
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001646  00800100  0001d4d8  0001d56c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d4d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000962  00801746  00801746  0001ebb2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001ebb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001ebc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001768  00000000  00000000  0001ec04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00027c06  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000062e9  00000000  00000000  00047f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00012018  00000000  00000000  0004e25b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000611c  00000000  00000000  00060274  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000474b  00000000  00000000  00066390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00026db6  00000000  00000000  0006aadb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001768  00000000  00000000  00091891  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
00801746 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000002d8 l     O .text	0000001e __c.3699
000002f6 l     O .text	0000001d __c.3694
00000000 l    df *ABS*	00000000 LCD.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800107 l     O .data	00000001 lcd_address
00800109 l     O .data	00000001 _displayControl
00800108 l     O .data	00000001 _displayMode
00000000 l    df *ABS*	00000000 lcd_printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000062aa l     F .text	00000016 _putc_win
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006da2 l     F .text	0000002a IS_Leap
00800263 l     O .data	00000018 __days
00801796 l     O .bss	00000016 t.3753
008017ac l     O .bss	00000002 p.3754
00801778 l     O .bss	00000008 ts.3832
00801780 l     O .bss	00000016 t.3765
0080027b l     O .data	0000001a __days_sum
00000772 l     O .text	00000012 __c.3872
00000761 l     O .text	00000011 __c.3874
00000750 l     O .text	00000011 __c.3876
0000073e l     O .text	00000012 __c.3878
0000072d l     O .text	00000011 __c.3880
00000716 l     O .text	00000017 __c.3882
00000784 l     O .text	00000021 __c.3851
000007a5 l     O .text	0000001d __c.3726
008017ee l     O .bss	00000020 buf.3731
008017ce l     O .bss	00000020 buf.3739
008017ae l     O .bss	00000020 buf.3743
000006fd l     O .text	00000019 __c.3911
000006e4 l     O .text	00000019 __c.3913
000006cb l     O .text	00000019 __c.3917
000006b2 l     O .text	00000019 __c.3919
000006a0 l     O .text	00000012 __c.3928
0000068b l     O .text	00000015 __c.3930
00000674 l     O .text	00000017 __c.3932
0000065a l     O .text	0000001a __c.3934
00000636 l     O .text	00000024 __c.3936
00000624 l     O .text	00000012 __c.3943
00000613 l     O .text	00000011 __c.3945
00000602 l     O .text	00000011 __c.3947
000005f0 l     O .text	00000012 __c.3949
000005df l     O .text	00000011 __c.3951
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000d5f0 l     F .text	00000004 xchg_spi
0000d5f4 l     F .text	0000000c deselect
0000d600 l     F .text	0000004e rcvr_datablock
0000d672 l     F .text	0000003a select
000007c2 l     O .text	00000010 __c.3694
0000d6ac l     F .text	00000086 send_cmd
0000d732 l     F .text	00000054 xmit_datablock
00801813 l     O .bss	00000001 CardType
00801815 l     O .bss	00000001 Timer1
00801814 l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800710 l     O .data	00000014 CSWTCH.97
00000c7e l     O .text	00000018 __c.3671
00000c66 l     O .text	00000018 __c.3678
0000ed4c l     F .text	0000001a _fprintf_putc
00000c4d l     O .text	0000000d __c.3870
00000c44 l     O .text	00000009 __c.3872
00000c3f l     O .text	00000005 __c.3874
00000c39 l     O .text	00000006 __c.3876
00000c30 l     O .text	00000009 __c.3878
00000c23 l     O .text	0000000d __c.3880
00000c16 l     O .text	0000000d __c.3882
00000c09 l     O .text	0000000d __c.3884
00000bfd l     O .text	0000000c __c.3886
00000bf1 l     O .text	0000000c __c.3888
00000be5 l     O .text	0000000c __c.3890
0080182d l     O .bss	0000002e _dp
00801820 l     O .bss	0000000d _de
00000bdd l     O .text	00000008 __c.3994
00000bd9 l     O .text	00000004 __c.3996
00000bba l     O .text	0000001f __c.4025
00800724 l     O .data	0000000a defopt.4023
00000c5a l     O .text	0000000c __c.3749
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000ea8 l     O .text	0000000c __c.3695
00000de8 l     O .text	000000c0 __c.3697
00000dbb l     O .text	0000000c __c.3748
00000dab l     O .text	00000010 __c.3750
00000d9e l     O .text	0000000d __c.3752
00000d8e l     O .text	00000010 __c.3754
00000d81 l     O .text	0000000d __c.3756
00000d65 l     O .text	0000000f __c.3761
00000d74 l     O .text	0000000d __c.3758
00000d52 l     O .text	00000013 __c.3765
00800187 l     O .data	00000002 _pagesize
00000d4b l     O .text	00000007 __c.3775
00000d49 l     O .text	00000002 __c.3777
00000dd4 l     O .text	00000010 __c.3730
00000dd2 l     O .text	00000002 __c.3735
00000dc7 l     O .text	0000000b __c.3737
00000d37 l     O .text	00000012 __c.3789
00000d33 l     O .text	00000004 __c.3791
00000d19 l     O .text	0000001a __c.3796
00000cf8 l     O .text	00000021 __c.3809
00000cea l     O .text	0000000e __c.3811
00000cd4 l     O .text	00000016 __c.3813
00000ca1 l     O .text	00000023 __c.3821
00000cc4 l     O .text	00000010 __c.3818
00000c96 l     O .text	0000000b __c.3825
00000de4 l     O .text	00000004 __c.3720
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000011b7 l     O .text	00000011 __c.4236
000011a4 l     O .text	00000013 __c.4241
0000117e l     O .text	00000026 __c.4246
00001163 l     O .text	0000001b __c.4248
0000113c l     O .text	00000027 __c.4253
00001121 l     O .text	0000001b __c.4255
000010fe l     O .text	00000023 __c.4261
000010f2 l     O .text	0000000c __c.4269
000010e7 l     O .text	0000000b __c.4274
000010dd l     O .text	0000000a __c.4276
000010af l     O .text	0000002e __c.4281
0000101d l     O .text	0000001a __c.4314
00001037 l     O .text	0000001b __c.4310
00001052 l     O .text	0000001b __c.4307
0000106d l     O .text	00000028 __c.4302
00001095 l     O .text	0000001a __c.4298
0000100a l     O .text	00000013 __c.4318
00001001 l     O .text	00000009 __c.4360
00000ffb l     O .text	00000006 __c.4362
00000ff0 l     O .text	0000000b __c.4366
00000fe5 l     O .text	0000000b __c.4368
00000fda l     O .text	0000000b __c.4370
00000fc1 l     O .text	00000019 __c.4386
00000f94 l     O .text	0000002d __c.4389
00000f6d l     O .text	00000027 __c.4393
00000f53 l     O .text	0000001a __c.4403
00000f2b l     O .text	00000028 __c.4408
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000147a l     O .text	00000012 __c.4220
00001469 l     O .text	00000011 __c.4222
00001450 l     O .text	00000019 __c.4224
00001436 l     O .text	0000001a __c.4270
0000140b l     O .text	0000002b __c.4272
000013f4 l     O .text	00000017 __c.4274
000013e8 l     O .text	0000000c __c.4276
000013e2 l     O .text	00000006 __c.4280
000013d0 l     O .text	00000012 __c.4282
000013c9 l     O .text	00000007 __c.4287
000013be l     O .text	0000000b __c.4289
000013b7 l     O .text	00000007 __c.4291
000013aa l     O .text	0000000d __c.4293
00001399 l     O .text	00000011 __c.4295
00001378 l     O .text	00000021 __c.4322
0000135e l     O .text	0000001a __c.4324
0000134b l     O .text	00000013 __c.4329
00001338 l     O .text	00000013 __c.4331
00001331 l     O .text	00000007 __c.4333
0000132a l     O .text	00000007 __c.4335
00001323 l     O .text	00000007 __c.4337
00001317 l     O .text	0000000c __c.4339
0000130a l     O .text	0000000d __c.4341
00001303 l     O .text	00000007 __c.4343
000012e7 l     O .text	0000001c __c.4345
00001294 l     O .text	00000007 __c.4365
00001283 l     O .text	00000011 __c.4367
00001271 l     O .text	00000012 __c.4369
0000125d l     O .text	00000014 __c.4371
0000124d l     O .text	00000010 __c.4373
00001241 l     O .text	0000000c __c.4375
00001230 l     O .text	00000011 __c.4380
0000121e l     O .text	00000012 __c.4382
000011f8 l     O .text	00000026 __c.4384
000011e7 l     O .text	00000011 __c.4389
000012e0 l     O .text	00000007 __c.4350
000012de l     O .text	00000002 __c.4352
000012cc l     O .text	00000012 __c.4354
000012bb l     O .text	00000011 __c.4356
000012a7 l     O .text	00000014 __c.4358
0000129b l     O .text	0000000c __c.4360
000011db l     O .text	0000000c __c.4400
000011d9 l     O .text	00000002 __c.4402
000011d3 l     O .text	00000006 __c.4404
000011cf l     O .text	00000004 __c.4409
000011ca l     O .text	00000002 __c.4413
000011cc l     O .text	00000003 __c.4411
000011c8 l     O .text	00000002 __c.4421
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002785 l     O .text	0000000d __c.4212
00002773 l     O .text	00000012 __c.4214
00801897 l     O .bss	00000005 B.4225
00801884 l     O .bss	00000013 B.4229
00801877 l     O .bss	0000000d B.4233
000025b2 l     O .text	00000005 __c.4336
000025a7 l     O .text	0000000b __c.4338
00002593 l     O .text	00000014 __c.4348
00002578 l     O .text	0000001b __c.4350
00002567 l     O .text	00000011 __c.4358
00002544 l     O .text	00000023 __c.4360
00002527 l     O .text	0000001d __c.4362
00002508 l     O .text	0000001f __c.4364
000024f0 l     O .text	00000018 __c.4369
000024d6 l     O .text	0000001a __c.4374
000024b0 l     O .text	00000026 __c.4383
00002497 l     O .text	00000019 __c.4385
0000239b l     O .text	00000025 __c.4407
000023c0 l     O .text	0000001a __c.4405
000023da l     O .text	00000016 __c.4403
000023f0 l     O .text	0000000e __c.4401
000023fe l     O .text	0000001c __c.4399
0000241a l     O .text	0000001d __c.4397
00002468 l     O .text	00000019 __c.4390
00002481 l     O .text	00000016 __c.4387
00002450 l     O .text	00000018 __c.4392
00002437 l     O .text	00000019 __c.4395
0000237a l     O .text	00000021 __c.4409
00002364 l     O .text	00000016 __c.4411
00002347 l     O .text	0000001d __c.4413
0000232b l     O .text	0000001c __c.4415
0000231a l     O .text	00000011 __c.4417
000022fc l     O .text	0000001e __c.4419
000022dd l     O .text	0000001f __c.4421
000022c2 l     O .text	0000001b __c.4423
000022a9 l     O .text	00000019 __c.4425
00002292 l     O .text	00000017 __c.4427
00002271 l     O .text	00000021 __c.4429
00002251 l     O .text	00000020 __c.4431
00002219 l     O .text	00000038 __c.4434
000020d6 l     O .text	00000020 __c.4467
000020c2 l     O .text	00000014 __c.4469
00002657 l     O .text	00000029 __c.4297
0000260a l     O .text	00000026 __c.4305
00002630 l     O .text	00000014 __c.4303
00002644 l     O .text	00000013 __c.4299
000025e2 l     O .text	00000028 __c.4309
000025b7 l     O .text	0000002b __c.4311
000020a8 l     O .text	0000001a __c.4476
00002095 l     O .text	00000013 __c.4478
00002760 l     O .text	00000013 __c.4239
00002089 l     O .text	0000000c __c.4492
00002076 l     O .text	00000013 __c.4499
00002067 l     O .text	0000000f __c.4501
00002206 l     O .text	00000013 __c.4443
000021ed l     O .text	00000019 __c.4445
000021c8 l     O .text	00000025 __c.4448
000021ab l     O .text	0000001d __c.4451
0000218d l     O .text	0000001e __c.4453
00002166 l     O .text	00000027 __c.4455
00002152 l     O .text	00000014 __c.4457
00002132 l     O .text	00000020 __c.4459
000020f6 l     O .text	0000003c __c.4462
0000204b l     O .text	0000001c __c.4508
00002028 l     O .text	00000023 __c.4515
0000271c l     O .text	00000028 __c.4272
000026fe l     O .text	0000001e __c.4274
000026cd l     O .text	00000019 __c.4278
000026e6 l     O .text	00000018 __c.4276
000026a8 l     O .text	00000025 __c.4283
00002680 l     O .text	00000028 __c.4285
00002744 l     O .text	0000001c __c.4255
00002012 l     O .text	00000016 __c.4520
00001ffc l     O .text	00000016 __c.4522
00001fe7 l     O .text	00000015 __c.4524
00001fd8 l     O .text	0000000f __c.4526
00001fc4 l     O .text	00000014 __c.4528
00001f90 l     O .text	00000034 __c.4530
00001f5c l     O .text	00000034 __c.4532
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00008e9e l     F .text	0000002a ld_dword
00008ec8 l     F .text	0000000c st_dword
00008ed4 l     F .text	00000012 mem_set
00008ee6 l     F .text	0000001e mem_cmp
00008f04 l     F .text	0000010c tchar2uni
00009010 l     F .text	00000050 clst2sect
00009060 l     F .text	00000078 clmt_clust
000090d8 l     F .text	0000001e sum_sfn
000090f6 l     F .text	00000058 get_ldnumber
0080180e l     O .bss	00000001 CurrVol
0000914e l     F .text	00000058 validate
000091a6 l     F .text	00000016 mem_cpy.part.0
000091bc l     F .text	0000015a put_utf
00009316 l     F .text	00000232 get_fileinfo
00009548 l     F .text	0000002a ld_clust.isra.4
00009572 l     F .text	0000001a st_clust.isra.5
0000958c l     F .text	000000a6 sync_window.part.6
00009632 l     F .text	000000e4 sync_fs
00009716 l     F .text	00000150 dir_clear
00009866 l     F .text	00000076 move_window
000098dc l     F .text	00000080 check_fs
0000995c l     F .text	000004c4 mount_volume
00801811 l     O .bss	00000002 FatFs
0080180f l     O .bss	00000002 Fsid
00009e20 l     F .text	000001fe put_fat
0000a01e l     F .text	00000168 get_fat.isra.10
0000a186 l     F .text	00000182 dir_sdi
0000a308 l     F .text	0000024c create_chain
0000a554 l     F .text	00000122 remove_chain
0000a676 l     F .text	000001d0 dir_next
0000a846 l     F .text	00000074 dir_alloc
0000a8ba l     F .text	000001a4 dir_read
0080034d l     O .data	0000000d LfnOfs
0000aa5e l     F .text	00000090 dir_remove
0000aaee l     F .text	0000021c dir_find
0000ad0a l     F .text	00000348 dir_register
0000b052 l     F .text	0000046c follow_path
008002cd l     O .data	00000080 ExCvt
008002bb l     O .data	00000012 badchr.4394
008002b1 l     O .data	0000000a defopt.4452
00800295 l     O .data	0000000e cst.4450
008002a3 l     O .data	0000000e cst32.4451
00000000 l    df *ABS*	00000000 ffunicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800608 l     O .data	00000100 uc437
0080035a l     O .data	000000bc cvt2.1843
00800416 l     O .data	000001f2 cvt1.1842
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000a5d l     O .text	00000007 __c.3673
00800708 l     O .data	00000008 CSWTCH.25
00000a4c l     O .text	00000011 __c.3709
00000a2e l     O .text	0000001e __c.3711
00000a0f l     O .text	0000001f __c.3713
000009f1 l     O .text	0000001e __c.3715
000009d3 l     O .text	0000001e __c.3717
000009b4 l     O .text	0000001f __c.3719
00000995 l     O .text	0000001f __c.3721
00000976 l     O .text	0000001f __c.3723
00000957 l     O .text	0000001f __c.3725
00000938 l     O .text	0000001f __c.3727
0000091a l     O .text	0000001e __c.3729
000008f5 l     O .text	00000025 __c.3731
000008a8 l     O .text	0000004d __c.3733
0000088d l     O .text	0000001b __c.3739
0000086b l     O .text	00000022 __c.3741
00000869 l     O .text	00000002 __c.3743
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000504 l     O .text	00000020 __c.3663
000004de l     O .text	00000026 __c.3829
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007d02 l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000deb6 l     F .text	0000003c mmc_task
0000084d l     O .text	0000001c __c.3671
00000840 l     O .text	0000000d __c.3699
00000830 l     O .text	00000010 __c.3712
0080181e l     O .bss	00000002 mmc_init_flag
00000824 l     O .text	0000000c __c.3714
00000813 l     O .text	00000011 __c.3716
000007f5 l     O .text	0000001e __c.3719
000007e0 l     O .text	00000015 __c.3721
000007d2 l     O .text	0000000e __c.3723
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000bae l     O .text	0000000c __c.3664
00000b32 l     O .text	0000007c __c.3666
00000aa2 l     O .text	0000000e __c.3705
00000a79 l     O .text	00000029 __c.3709
00000a64 l     O .text	00000015 __c.3711
00000b02 l     O .text	00000020 __c.3684
00000af2 l     O .text	00000010 __c.3686
00000ade l     O .text	00000014 __c.3688
00000ad0 l     O .text	0000000e __c.3690
00000ab0 l     O .text	00000020 __c.3692
00000b22 l     O .text	00000010 __c.3676
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001553 l     O .text	0000000b __c.4428
00001499 l     O .text	000000ba __c.4430
0000148c l     O .text	0000000d __c.4438
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001f02 l     O .text	00000025 __c.4493
00001ec9 l     O .text	00000039 __c.4495
00001e94 l     O .text	00000035 __c.4497
00001e5f l     O .text	00000035 __c.4499
00001e27 l     O .text	00000038 __c.4501
00001dfc l     O .text	0000002b __c.4503
00001dd8 l     O .text	00000024 __c.4516
00001db6 l     O .text	00000022 __c.4524
00801875 l     O .bss	00000002 stack_ind
0080186b l     O .bss	0000000a stack_p
00001d9e l     O .text	00000018 __c.4547
00001d7f l     O .text	0000001f __c.4549
00001d60 l     O .text	0000001f __c.4551
00001d41 l     O .text	0000001f __c.4560
00001cd4 l     O .text	00000037 __c.4575
00001d0b l     O .text	00000036 __c.4573
00001cc7 l     O .text	0000000d __c.4597
000019ea l     O .text	00000022 __c.4649
00001a0c l     O .text	00000030 __c.4646
00001a3c l     O .text	00000016 __c.4644
00001a52 l     O .text	0000002f __c.4641
00001a81 l     O .text	00000030 __c.4638
00001ab1 l     O .text	00000019 __c.4636
00001ca9 l     O .text	0000001e __c.4599
00001c90 l     O .text	00000019 __c.4603
00001c68 l     O .text	00000028 __c.4605
00001c3e l     O .text	0000002a __c.4609
00001c0d l     O .text	00000031 __c.4612
00001be0 l     O .text	0000002d __c.4615
00001bb2 l     O .text	0000002e __c.4618
00001b84 l     O .text	0000002e __c.4621
00001b52 l     O .text	00000032 __c.4624
00001b26 l     O .text	0000002c __c.4627
00001af8 l     O .text	0000002e __c.4630
00001aca l     O .text	0000002e __c.4633
000019c8 l     O .text	00000022 __c.4653
000019ab l     O .text	0000001d __c.4655
00001984 l     O .text	00000027 __c.4657
0000196b l     O .text	00000019 __c.4668
00001959 l     O .text	00000012 __c.4679
00001937 l     O .text	00000022 __c.4685
00001896 l     O .text	00000017 __c.4700
0000187f l     O .text	00000017 __c.4702
00001868 l     O .text	00000017 __c.4704
000018db l     O .text	00000017 __c.4694
000018c4 l     O .text	00000017 __c.4696
000018ad l     O .text	00000017 __c.4698
00001920 l     O .text	00000017 __c.4688
00001909 l     O .text	00000017 __c.4690
000018f2 l     O .text	00000017 __c.4692
00001866 l     O .text	00000002 __c.4709
00001846 l     O .text	00000020 __c.4717
000015bd l     O .text	00000005 __c.4836
000015bb l     O .text	00000002 __c.4838
000015db l     O .text	00000009 __c.4828
000015d1 l     O .text	0000000a __c.4830
000015c9 l     O .text	00000008 __c.4832
000015c2 l     O .text	00000007 __c.4834
0000183d l     O .text	00000009 __c.4720
0000181e l     O .text	0000001f __c.4722
00001814 l     O .text	0000000a __c.4724
0000180c l     O .text	00000008 __c.4726
00001808 l     O .text	00000004 __c.4728
00001803 l     O .text	00000005 __c.4730
000017fc l     O .text	00000007 __c.4732
000017f2 l     O .text	0000000a __c.4734
000017ef l     O .text	00000003 __c.4736
000017e8 l     O .text	00000007 __c.4738
000017da l     O .text	0000000e __c.4740
000017ca l     O .text	00000010 __c.4742
000017bc l     O .text	0000000e __c.4744
000017b7 l     O .text	00000005 __c.4746
000017b0 l     O .text	00000007 __c.4748
000017a8 l     O .text	00000008 __c.4750
0000179e l     O .text	0000000a __c.4752
00001790 l     O .text	0000000e __c.4754
00001780 l     O .text	00000010 __c.4756
00001770 l     O .text	00000010 __c.4758
00001765 l     O .text	0000000b __c.4760
0000175a l     O .text	0000000b __c.4762
00001742 l     O .text	00000018 __c.4764
0000172f l     O .text	00000013 __c.4766
00001723 l     O .text	0000000c __c.4768
00001710 l     O .text	00000013 __c.4770
00001702 l     O .text	0000000e __c.4772
000016f0 l     O .text	00000012 __c.4774
000016e9 l     O .text	00000007 __c.4776
000016df l     O .text	0000000a __c.4778
000016d2 l     O .text	0000000d __c.4780
000016c9 l     O .text	00000009 __c.4782
000016be l     O .text	0000000b __c.4784
000016ad l     O .text	00000011 __c.4786
000016a2 l     O .text	0000000b __c.4788
00001699 l     O .text	00000009 __c.4790
00001692 l     O .text	00000007 __c.4792
00001688 l     O .text	0000000a __c.4794
00001669 l     O .text	0000001f __c.4796
0000165f l     O .text	0000000a __c.4798
00001657 l     O .text	00000008 __c.4800
00001653 l     O .text	00000004 __c.4802
0000164e l     O .text	00000005 __c.4804
00001647 l     O .text	00000007 __c.4806
0000163d l     O .text	0000000a __c.4808
0000163a l     O .text	00000003 __c.4810
00001633 l     O .text	00000007 __c.4812
00001627 l     O .text	0000000c __c.4814
00001616 l     O .text	00000011 __c.4816
00001604 l     O .text	00000012 __c.4818
000015fe l     O .text	00000006 __c.4820
000015f4 l     O .text	0000000a __c.4822
000015eb l     O .text	00000009 __c.4824
000015e4 l     O .text	00000007 __c.4826
000015b6 l     O .text	00000005 __c.4843
000015b4 l     O .text	00000002 __c.4845
00001560 l     O .text	00000008 __c.4864
00001568 l     O .text	00000022 __c.4862
0000158a l     O .text	00000008 __c.4860
00001592 l     O .text	00000022 __c.4858
0000155e l     O .text	00000002 __c.4869
00000000 l    df *ABS*	00000000 drives_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001f38 l     O .text	00000007 __c.3724
00001f3f l     O .text	0000001d __c.3720
00001f27 l     O .text	00000011 __c.3726
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000168d0 l     F .text	000000a0 amigo_overflow_check
00002f33 l     O .text	00000019 __c.4185
00016970 l     F .text	000000de amigo_chs_to_logical
00002ee0 l     O .text	0000002b __c.4178
00002fb3 l     O .text	00000018 __c.4155
00002f95 l     O .text	0000001e __c.4161
00002f7b l     O .text	0000001a __c.4163
00002f66 l     O .text	00000015 __c.4169
00002f4c l     O .text	0000001a __c.4171
00002f0b l     O .text	00000028 __c.4208
00002ed0 l     O .text	00000010 __c.4219
00002ebb l     O .text	00000015 __c.4223
00002ea1 l     O .text	0000001a __c.4230
00002e82 l     O .text	0000001f __c.4237
00002e68 l     O .text	0000001a __c.4244
00002e5b l     O .text	0000000d __c.4246
00002e4b l     O .text	00000010 __c.4253
00002e31 l     O .text	0000001a __c.4255
00002e22 l     O .text	0000000f __c.4259
00002dbb l     O .text	00000067 __c.4266
00002d54 l     O .text	00000067 __c.4268
00002ced l     O .text	00000067 __c.4270
00002c88 l     O .text	00000065 __c.4272
00002c38 l     O .text	00000050 __c.4277
00002be8 l     O .text	00000050 __c.4279
00002b98 l     O .text	00000050 __c.4281
00002b47 l     O .text	00000051 __c.4283
00002b15 l     O .text	00000032 __c.4295
00002af3 l     O .text	00000022 __c.4297
00002ad2 l     O .text	00000021 __c.4299
00002ab1 l     O .text	00000021 __c.4301
00002a82 l     O .text	0000002f __c.4303
00002a62 l     O .text	00000020 __c.4306
00002a4e l     O .text	00000014 __c.4309
00002a3a l     O .text	00000014 __c.4312
00002a11 l     O .text	00000029 __c.4314
000029f0 l     O .text	00000021 __c.4316
000029e0 l     O .text	00000010 __c.4319
000029be l     O .text	00000022 __c.4321
000029a2 l     O .text	0000001c __c.4323
00002979 l     O .text	00000029 __c.4325
00002959 l     O .text	00000020 __c.4327
0000292e l     O .text	0000002b __c.4329
0000290f l     O .text	0000001f __c.4331
000028ff l     O .text	00000010 __c.4334
000028cd l     O .text	00000032 __c.4339
000028ad l     O .text	00000020 __c.4343
0000288c l     O .text	00000021 __c.4346
0000286d l     O .text	0000001f __c.4349
0000284b l     O .text	00000022 __c.4352
0000282f l     O .text	0000001c __c.4355
0000280f l     O .text	00000020 __c.4358
000027e6 l     O .text	00000029 __c.4363
000027bb l     O .text	0000002b __c.4366
00002792 l     O .text	00000029 __c.4369
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00003056 l     O .text	00000021 __c.4146
00003085 l     O .text	00000015 __c.4138
00003077 l     O .text	0000000e __c.4140
000030bc l     O .text	00000022 __c.4128
000030a6 l     O .text	00000016 __c.4130
0000309a l     O .text	0000000c __c.4132
0000304f l     O .text	00000007 __c.4152
00003033 l     O .text	0000001c __c.4157
00003019 l     O .text	0000001a __c.4159
00003004 l     O .text	00000015 __c.4168
00002ff2 l     O .text	00000012 __c.4173
00002fe0 l     O .text	00000012 __c.4175
00002fcb l     O .text	00000015 __c.4177
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000044fb l     O .text	0000000a __c.4088
00004332 l     O .text	000001c9 __c.4090
000042e8 l     O .text	00000029 __c.4109
000042d0 l     O .text	00000018 __c.4114
000042ab l     O .text	00000025 __c.4126
00004292 l     O .text	00000019 __c.4132
00004271 l     O .text	00000021 __c.4139
00004235 l     O .text	0000003c __c.4148
000041f8 l     O .text	0000003d __c.4157
008018c9 l     O .bss	00000020 _lif_ctime_buf.4260
008018a9 l     O .bss	00000020 _timestr.4265
000041f3 l     O .text	00000005 __c.4280
000041d9 l     O .text	0000001a __c.4282
000041bc l     O .text	0000001d __c.4284
0000419f l     O .text	0000001d __c.4286
00004182 l     O .text	0000001d __c.4288
00004165 l     O .text	0000001d __c.4290
00004148 l     O .text	0000001d __c.4292
0000412b l     O .text	0000001d __c.4294
0000410e l     O .text	0000001d __c.4296
000040f1 l     O .text	0000001d __c.4298
000040d7 l     O .text	0000001a __c.4300
000040bb l     O .text	0000001c __c.4302
0000409e l     O .text	0000001d __c.4304
00004081 l     O .text	0000001d __c.4306
00004065 l     O .text	0000001c __c.4308
00004049 l     O .text	0000001c __c.4310
0000402f l     O .text	0000001a __c.4312
00004015 l     O .text	0000001a __c.4314
00003ff9 l     O .text	0000001c __c.4316
00003fdd l     O .text	0000001c __c.4318
00003fc0 l     O .text	0000001d __c.4320
00003fa3 l     O .text	0000001d __c.4322
00003f86 l     O .text	0000001d __c.4324
00003f6a l     O .text	0000001c __c.4326
00003f50 l     O .text	0000001a __c.4328
00003f4e l     O .text	00000002 __c.4330
00003f2f l     O .text	0000001f __c.4337
00003ef6 l     O .text	00000039 __c.4339
00003ede l     O .text	00000018 __c.4341
00003ea5 l     O .text	00000039 __c.4343
00003e6c l     O .text	00000039 __c.4345
00003e47 l     O .text	00000025 __c.4347
00003e18 l     O .text	0000002f __c.4349
00003dec l     O .text	0000002c __c.4351
00003dcb l     O .text	00000021 __c.4357
00003d87 l     O .text	00000044 __c.4359
00003d46 l     O .text	00000041 __c.4361
00003d18 l     O .text	0000002e __c.4363
00003ccd l     O .text	0000004b __c.4365
00003c82 l     O .text	0000004b __c.4367
00003c57 l     O .text	0000002b __c.4369
00003c2b l     O .text	0000002c __c.4371
00003b68 l     O .text	0000003a __c.4426
00003b48 l     O .text	00000020 __c.4435
00003afb l     O .text	0000004d __c.4460
00003bd6 l     O .text	00000055 __c.4387
00003bc9 l     O .text	0000000d __c.4389
00003bbc l     O .text	0000000d __c.4397
00003baf l     O .text	0000000d __c.4402
00003ba2 l     O .text	0000000d __c.4407
00003ac3 l     O .text	00000038 __c.4472
00003a9a l     O .text	00000029 __c.4474
00003a49 l     O .text	00000051 __c.4477
00003a0a l     O .text	0000003f __c.4490
000039d4 l     O .text	00000036 __c.4492
000039a1 l     O .text	00000033 __c.4494
0000396e l     O .text	00000033 __c.4496
00003957 l     O .text	00000017 __c.4506
00003917 l     O .text	00000040 __c.4508
000038cb l     O .text	0000004c __c.4511
0000389b l     O .text	00000030 __c.4513
00003899 l     O .text	00000002 __c.4516
0000388d l     O .text	0000000c __c.4518
00003880 l     O .text	0000000d __c.4520
0000386f l     O .text	00000011 __c.4522
0000385c l     O .text	00000013 __c.4524
00003849 l     O .text	00000013 __c.4526
00003836 l     O .text	00000013 __c.4528
0000380f l     O .text	00000027 __c.4535
000037ea l     O .text	00000025 __c.4537
000037b1 l     O .text	00000039 __c.4551
0000378d l     O .text	00000024 __c.4568
0000377f l     O .text	0000000e __c.4585
00003771 l     O .text	0000000e __c.4590
00003763 l     O .text	0000000e __c.4592
00003730 l     O .text	00000033 __c.4606
00003702 l     O .text	0000002e __c.4608
000036d3 l     O .text	0000002f __c.4610
000036a3 l     O .text	00000030 __c.4612
00003674 l     O .text	0000002f __c.4614
00003644 l     O .text	00000030 __c.4616
0000361d l     O .text	00000027 __c.4618
00003606 l     O .text	00000017 __c.4620
000035ef l     O .text	00000017 __c.4622
000035d6 l     O .text	00000019 __c.4624
000035bd l     O .text	00000019 __c.4626
000035af l     O .text	0000000e __c.4628
00003597 l     O .text	00000018 __c.4652
00003580 l     O .text	00000017 __c.4654
00003548 l     O .text	00000038 __c.4656
00003538 l     O .text	00000010 __c.4658
00003477 l     O .text	0000000e __c.4669
00003485 l     O .text	00000028 __c.4667
00003503 l     O .text	00000035 __c.4662
000034ad l     O .text	00000056 __c.4664
0000344f l     O .text	00000028 __c.4677
00003441 l     O .text	0000000e __c.4680
00003429 l     O .text	00000018 __c.4697
00003416 l     O .text	00000013 __c.4699
00003408 l     O .text	0000000e __c.4701
000033fa l     O .text	0000000e __c.4706
000033da l     O .text	00000020 __c.4723
000033bf l     O .text	0000001b __c.4725
000033a3 l     O .text	0000001c __c.4727
00003374 l     O .text	0000002f __c.4729
00003361 l     O .text	00000013 __c.4731
00003331 l     O .text	00000030 __c.4733
00003323 l     O .text	0000000e __c.4735
00003315 l     O .text	0000000e __c.4740
000032f0 l     O .text	00000025 __c.4748
000032d0 l     O .text	00000020 __c.4750
000032b1 l     O .text	0000001f __c.4752
00003289 l     O .text	00000028 __c.4754
0000327a l     O .text	0000000f __c.4756
00003252 l     O .text	00000028 __c.4765
0000322b l     O .text	00000027 __c.4767
00003204 l     O .text	00000027 __c.4769
000031ce l     O .text	00000036 __c.4771
000031a5 l     O .text	00000029 __c.4773
0000318e l     O .text	00000017 __c.4775
00003165 l     O .text	00000029 __c.4788
00003140 l     O .text	00000025 __c.4790
0000311d l     O .text	00000023 __c.4792
000030fd l     O .text	00000020 __c.4794
000030de l     O .text	0000001f __c.4796
00004311 l     O .text	00000021 __c.4103
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00004873 l     O .text	00000030 __c.4458
00004854 l     O .text	0000001f __c.4460
00004837 l     O .text	0000001d __c.4462
00004827 l     O .text	00000010 __c.4464
00004800 l     O .text	00000027 __c.4466
000047e6 l     O .text	0000001a __c.4468
000047cc l     O .text	0000001a __c.4470
000047ca l     O .text	00000002 __c.4472
000047bb l     O .text	0000000f __c.4476
000047b0 l     O .text	0000000b __c.4478
0000478c l     O .text	00000024 __c.4482
00004789 l     O .text	00000003 __c.4492
0000477d l     O .text	0000000c __c.4494
00004776 l     O .text	00000007 __c.4502
00004765 l     O .text	00000011 __c.4504
0000473e l     O .text	00000027 __c.4506
0000471f l     O .text	0000001f __c.4508
00004702 l     O .text	0000001d __c.4510
000046f2 l     O .text	00000010 __c.4512
000046cb l     O .text	00000027 __c.4514
000046b1 l     O .text	0000001a __c.4516
00004697 l     O .text	0000001a __c.4518
00004681 l     O .text	00000016 __c.4520
0000466b l     O .text	00000016 __c.4522
00004659 l     O .text	00000012 __c.4524
0000464a l     O .text	0000000f __c.4526
0000462d l     O .text	0000001d __c.4528
0000460f l     O .text	0000001e __c.4530
000045f2 l     O .text	0000001d __c.4532
000045d8 l     O .text	0000001a __c.4534
000045c0 l     O .text	00000018 __c.4536
000045af l     O .text	00000011 __c.4538
00004599 l     O .text	00000016 __c.4540
00004584 l     O .text	00000015 __c.4542
00004572 l     O .text	00000012 __c.4544
0000455a l     O .text	00000018 __c.4546
00004545 l     O .text	00000015 __c.4548
0000452f l     O .text	00000016 __c.4550
00004519 l     O .text	00000016 __c.4552
00004505 l     O .text	00000014 __c.4554
00000000 l    df *ABS*	00000000 vfprintf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001d6 l     O .text	00000004 __c.2334
000001da l     O .text	00000004 __c.2332
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000041d l     O .text	0000000d __c.3681
0000040a l     O .text	00000013 __c.3683
000003f7 l     O .text	00000013 __c.3685
000003d9 l     O .text	0000001e __c.3687
000003bb l     O .text	0000001e __c.3689
0000039d l     O .text	0000001e __c.3691
0000037f l     O .text	0000001e __c.3693
0000036b l     O .text	00000014 __c.3695
00000350 l     O .text	0000001b __c.3710
00000338 l     O .text	00000018 __c.3716
00000313 l     O .text	00000025 __c.3725
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801748 l     O .bss	00000004 SPI0_Speed_value
0000042a l     O .text	0000001d __c.3679
00801746 l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004c8 l     O .text	00000016 __c.3671
000004b4 l     O .text	00000014 __c.3679
0000049d l     O .text	00000017 __c.3681
00000457 l     O .text	00000011 __c.3704
00000468 l     O .text	0000001c __c.3694
00000484 l     O .text	00000019 __c.3692
00000447 l     O .text	00000010 __c.3711
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000069d8 l     F .text	0000007c clock_settime.part.2
000005c2 l     O .text	0000001d __c.3676
000005b8 l     O .text	0000000a __c.3696
00801754 l     O .bss	00000020 _ts_to_str
000005a9 l     O .text	0000000f __c.3701
0080174c l     O .bss	00000008 __clock_elapsed
0000059b l     O .text	0000000e __c.3710
00000590 l     O .text	0000000b __c.3712
00801774 l     O .bss	00000002 timers_configured
00801776 l     O .bss	00000002 timers_enabled
0000057c l     O .text	00000014 __c.3732
00000569 l     O .text	00000013 __c.3734
0000055d l     O .text	0000000c __c.3736
00000545 l     O .text	00000018 __c.3738
00000534 l     O .text	00000011 __c.3740
00000524 l     O .text	00000010 __c.3742
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000f0e l     O .text	0000001d __c.3823
0080185b l     O .bss	00000001 _ppr_reg
00000efb l     O .text	00000013 __c.3841
00000eea l     O .text	00000011 __c.3855
00000edd l     O .text	0000000d __c.3864
00000ecf l     O .text	0000000e __c.3873
00000ec2 l     O .text	0000000d __c.3880
00000eb4 l     O .text	0000000e __c.3886
00000000 l    df *ABS*	00000000 _clear_bss.o
000048d4 l       .text	00000000 .do_clear_bss_start
000048d2 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 TWI_AVR8.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ffsystem.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001c900 l       .text	00000000 __udivmodqi4_ep
0001c8f8 l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001c920 l       .text	00000000 __udivmodhi4_ep
0001c912 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001c948 l       .text	00000000 __divmodhi4_neg1
0001c950 l       .text	00000000 __divmodhi4_neg2
0001c956 l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001c97e l       .text	00000000 __udivmodsi4_ep
0001c964 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001c9b4 l       .text	00000000 __divmodsi4_neg2
0001c9c2 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001d4d6 l       .text	00000000 __stop_program
00016006 g     F .text	00000040 SS80_Selected_Device_Clear
0001ca10 g       .text	00000002 .hidden __usmulhisi3
0000ed72 g     F .text	0000000c putchar
000117f6 g     F .text	0000001e SS80_is_MTA
00006874 g     F .text	000000ea clock_gettime
00005e18 g     F .text	000000e8 rtc_init
00011b06 g     F .text	000000a8 GPIB_COMMANDS
000048e2  w      .text	00000000 __vector_22
00010cbe g     F .text	0000004a gpib_unread
00015202 g     F .text	00000034 SS80_test_extended_status
00006342  w    F .text	00000016 strcpy
00007ae4 g     F .text	00000008 asctime
00006dcc g     F .text	00000020 tm_mon_to_ascii
00801978 g     O .bss	00000235 Fatfs
0000eea6 g     F .text	0000004a mctime
000048e2  w      .text	00000000 __vector_28
0000df66 g     F .text	0000001a mmc_fast
00005d62 g     F .text	000000b6 rtc_write
000160ee g     F .text	00000224 SS80_Transparent_State
0080185c g     O .bss	00000001 gpib_unread_f
000050e0 g     F .text	00000004 spi_RX_buffer
000121f4 g     F .text	00000038 gpib_help
00015e6a g     F .text	0000009c SS80_Report
0000f9a4 g     F .text	0000006a free_file_descriptor
0000eb7a g     F .text	00000096 fatfs_putc
0001c9f2 g       .text	0000001e .hidden __umulhisi3
008001bf g     O .data	0000000c cfgfile
000048e2  w      .text	00000000 __vector_1
00011c40 g     F .text	0000016e GPIB
0000e728 g     F .text	00000038 fatfs_help
00006ac0 g     F .text	00000016 delete_all_timers
000060fa g     F .text	00000016 LCD_clear
0000597c g     F .text	0000000c SPI0_TXRX_Byte
0001cfa0 g       .text	00000000 __fp_mpack_finite
00017008 g     F .text	00000188 amigo_buffered_read
0000f4ec g     F .text	00000086 utime
00801942 g     O .bss	00000008 __clock
000124f8 g     F .text	00000054 find_device
00014000 g     F .text	0000008e print_str_P
0080010a g     O .data	00000008 lcd
00007918 g     F .text	00000128 set_dst
0000f226 g     F .text	00000096 fdevopen
00011814 g     F .text	0000001e SS80_is_MSA
00005098 g     F .text	00000044 spi_end
00018a7c g     F .text	000000e2 lif_dir2str
0001cf26 g     F .text	00000040 round
0001288c g     F .text	00000166 alloc_device
000053a4 g     F .text	00000054 safefree
00013f5e g     F .text	000000a2 print_var_P
00011dae g     F .text	0000012a GPIB_TALK
000048e2  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001cbc2 g     F .text	00000004 __divsf3
0001ca94 g       .text	00000036 .hidden __epilogue_restores__
00005738 g     F .text	00000018 uart_rx_count
00014b96 g     F .text	0000003a lif_dir_count
00801bd7 g     O .bss	00000009 gpib_timer
00011ed8 g     F .text	000000fa GPIB_SECONDARY_ADDRESS
00018e16 g     F .text	0000000e lif_vol_clear
0000695e g     F .text	0000007a clock_task
000110c0 g     F .text	0000028e gpib_trace_display
0001bdbe g     F .text	0000010c lif_rename_file
00012e5a g     F .text	00001104 Read_Config
00012478 g     F .text	00000028 find_type
0001cde4 g     F .text	00000022 __fp_round
000124a0 g     F .text	0000001e count_drive_types
00006dec g     F .text	00000042 Days_Per_Month
00006c9a g     F .text	00000028 execute_timers
000100ac g     F .text	0000017a ls_info
000048e2  w      .text	00000000 __vector_34
0000df20 g     F .text	0000001a mmc_spi_begin
0001cc92 g     F .text	0000000a __fixsfsi
00006bac g     F .text	0000000c clock_elapsed_begin
000063aa  w    F .text	00000032 reverse
000062c0 g     F .text	0000003c lcd_printf
0000d8c0 g     F .text	00000006 mmc_disk_status
0001ce06 g     F .text	00000044 __fp_split3
00010ac4 g     F .text	00000014 gpib_timeout_set
0001c90a g       .text	00000028 .hidden __udivmodhi4
00005094 g     F .text	00000004 chip_select_init
00006b58 g     F .text	00000054 ts_to_str
00008e92 g     F .text	0000000c atol
00007e8e g     F .text	000000aa p_ntoa
0000e128 g     F .text	000000d8 tm_to_fat
0000520c g     F .text	00000106 PrintFree
00017300 g     F .text	000000c4 amigo_cmd_dsj
0000d64e g     F .text	00000024 wait_ready
000001d6 g       .text	00000000 __trampolines_start
00012bd0 g     F .text	00000140 hpdir_set_device
0001cd6e g     F .text	00000048 __fp_cmp
0001165e g     F .text	000000f2 gpib_write_str
00801bb5 g     O .bss	00000002 errno
000160cc g     F .text	00000022 SS80_Cancel
0001d4d8 g       .text	00000000 _etext
00005a78 g     F .text	00000008 TWI_StopTransmission
0000da1c g     F .text	0000047c mmc_disk_ioctl
000064fc g     F .text	00000028 MATCH
0080012c g     O .data	00000010 __WDay
0001983a g     F .text	000000b8 lif_writedirindex
000060a2 g     F .text	00000040 LCD_setCursor
00005842 g     F .text	000000ce SPI0_Speed
00006bb8 g     F .text	00000084 clock_elapsed_end
0080023f g     O .data	00000016 TD
0000d4c0 g     F .text	000000c4 ff_wtoupper
0001caf0 g     F .text	0000000a __subsf3
0001b95e g     F .text	00000330 lif_add_lif_file
00801be0 g     O .bss	00000002 lastcmd
000048e2  w      .text	00000000 __vector_24
00012bce g     F .text	00000002 set_Config_Defaults
00006416 g     F .text	00000014 skipspaces
0000c058 g     F .text	0000026c f_getcwd
000048e2  w      .text	00000000 __vector_12
0001073e g     F .text	00000028 gpib_timer_init
00010796 g     F .text	00000022 ppr_init
0000ed7e g     F .text	00000068 fgets
0001d418 g     F .text	000000bc __ultoa_invert
00005750 g     F .text	0000004c uart_get_tail
00005362 g     F .text	00000042 safemalloc
0001bc8e g     F .text	00000130 lif_del_file
00007cd0 g     F .text	00000032 _putc_buffer_fn
0001aafa g     F .text	00000172 lif_ascii_string_to_e010
0000e11c g     F .text	00000006 mmc_ins_status
00018dac g     F .text	0000004e lif_lifbcd2timestr
00801be2 g     O .bss	00000200 gpib_iobuff
000123a8 g     F .text	00000028 V2B_MSB
00018c4c g     F .text	00000084 lif_time2lifbcd
000124f0 g     F .text	00000008 find_free
00019300 g     F .text	00000366 lif_check_dir
000048e2 g       .text	00000000 __bad_interrupt
00005452 g     F .text	00000090 delayms
00015fd2 g     F .text	00000018 SS80_Channel_Independent_Clear
0000ffd2 g     F .text	000000da cat
00008d02 g     F .text	00000028 snprintf_P
0001740a g     F .text	00000152 amigo_todo_op
00016046 g     F .text	00000086 SS80_Amigo_Clear
0000f1b0 g     F .text	00000076 perror
0001eb1e g       *ABS*	00000000 __data_load_end
0000d590 g     F .text	0000000c disk_initialize
0080189c g     O .bss	0000000d plot
00010a72 g     F .text	00000006 gpib_timer_elapsed_end
000183cc g     F .text	00000020 lif_free
0000ee16 g     F .text	0000002e puts
0000fdac g     F .text	000001c0 copy
00006d92 g     F .text	00000010 clock_settime
000183ec g     F .text	0000003e lif_stralloc
00006312  w    F .text	00000016 islower
000051de g     F .text	0000002e freeRam
00016ad6 g     F .text	0000001c amigo_request_logical_address
000060e2 g     F .text	00000018 LCD_pos
0000cf76 g     F .text	0000022a f_rename
000048e2  w      .text	00000000 __vector_6
00010a54 g     F .text	0000001e gpib_timer_reset
00019b32 g     F .text	0000065a lif_create_volume
0001cfec g     F .text	00000130 malloc
00005104 g     F .text	00000040 spi_init
0000fd74 g     F .text	00000038 posix_help
000048e2  w      .text	00000000 __vector_31
000107ee g     F .text	00000044 dbf_open
0001c2a6 g     F .text	00000092 copyright
0000bfa2 g     F .text	000000b6 f_chdir
0001cbba g       .text	00000000 __lesf2
00005064 g     F .text	00000030 chip_deselect
000182de g     F .text	0000005e PRINTER_COMMANDS
00006c3c g     F .text	00000036 clock_clear
00007b0e g     F .text	000000ee initialize_clock
0000e11a g     F .text	00000002 mmc_power_off
0000e122 g     F .text	00000006 mmc_wp_status
0000ea74 g     F .text	00000106 fatfs_getc
00801de2 g     O .bss	00000001 listening_last
0000d584 g     F .text	0000000c disk_status
0000607c g     F .text	00000026 LCD_specialCommand
00800257 g     O .data	00000002 __malloc_heap_start
000001d6 g       .text	00000000 __trampolines_end
00006d72 g     F .text	00000020 clock_getres
0001ac6c g     F .text	0000021a lif_add_ascii_file_as_e010_wrapper
00010c82 g     F .text	0000003c gpib_assert_ifc
00018c36 g     F .text	00000016 lif_BCD2BIN
00005b40 g     F .text	00000028 TWI_SendByte
0001842a g     F .text	00000050 lif_open
00007bfc g     F .text	000000d4 display_clock
000107b8 g     F .text	0000001a ppr_bit_set
000048e2  w      .text	00000000 __vector_3
0001078e g     F .text	00000008 ppr_reg
000114fa g     F .text	00000008 gpib_decode
0000f0be g     F .text	00000004 rmdir
00006a54 g     F .text	0000006c set_timers
00801966 g     O .bss	0000000c dst
0000f134 g     F .text	0000007c readdir
0001ce4a g     F .text	0000000e __fp_zero
0000c95c g     F .text	0000002a f_closedir
0000d5dc g     F .text	00000014 disk_ioctl
0001bfc2 g     F .text	000002e4 lif_tests
000083fe g     F .text	00000084 _puts_pad
000050e4 g     F .text	00000020 spi_TX
00018e24 g     F .text	00000326 lif_dump_vol
00011fd2 g     F .text	00000042 listen_cleanup
00018cd0 g     F .text	000000a0 lif_lifbcd2time
00018b5e g     F .text	000000ca lif_str2dir
00005a0a g     F .text	0000002c SPI0_TXRX
0000614e g     F .text	00000064 LCD_init
0001cbba g       .text	00000000 __nesf2
00012d10 g     F .text	00000022 hpdir_set_parameters
00005c82 g     F .text	0000000e BINtoBCD
0000f5d2 g     F .text	000000ce lseek
000048e2  w      .text	00000000 __vector_23
0001d4d8 g       *ABS*	00000000 __data_load_start
00801818 g     O .bss	00000004 _mmc_clock
000048a4 g       .text	00000000 __dtors_end
00006032 g     F .text	00000024 LCD_putb
000118c8 g     F .text	00000010 gpib_init_devices
000064ac  w    F .text	00000050 strncasecmp
008020a8 g       .bss	00000000 __bss_end
00018684 g     F .text	00000056 lif_chars
0001ca1c g       .text	00000014 .hidden __muluhisi3
000048e2  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
0001484e g     F .text	0000024c format_drives
000048e2  w      .text	00000000 __vector_25
008020a4 g     O .bss	00000002 __brkval
00006fea g     F .text	0000002a gmtime_r
0000ef4a g     F .text	00000052 chmod
00006cc2 g     F .text	000000b0 init_timers
0001186e g     F .text	0000001e AMIGO_is_MSA
000196b2 g     F .text	000000b6 lif_checkdirindex
0000cc48 g     F .text	0000014e f_unlink
00010d14 g     F .text	00000020 gpib_control_pin_read
000108f2 g     F .text	000000ae dbf_open_read
0001c9e6 g       .text	0000000c .hidden __mulhisi3
00008dc8 g     F .text	000000bc strtol
00010a4e g     F .text	00000006 gpib_timer_elapsed_begin
0001d402 g     F .text	00000016 strnlen
000054e2 g     F .text	00000134 uart_ubr
0000d430 g     F .text	00000066 ff_uni2oem
0001aa46 g     F .text	000000b4 lif_e010_pad_sector
0001833c g     F .text	00000038 lif_help
000065de g     F .text	000000b8 split_args
0000f042 g     F .text	0000003e rename
000108c2 g     F .text	00000030 dbf_close
00017f6a g     F .text	000000b2 receive_plot_flush
0001cbdc g     F .text	000000d4 __divsf3x
000048e2  w      .text	00000000 __vector_11
00801de3 g     O .bss	00000001 spoll
0000eef0 g     F .text	0000001c basename
00015236 g     F .text	000000ae SS80_display_extended_status
00017e1e g     F .text	00000130 AMIGO_COMMANDS
0001d22e g     F .text	000001b0 __ftoa_engine
000187c2 g     F .text	0000007a lif_fixname
0000d952 g     F .text	000000ca mmc_disk_write
000048a4  w      .text	00000000 __init
0001cfb8 g     F .text	00000034 calloc
0001b6d0 g     F .text	0000028e lif_extract_lif_as_lif
00006800 g     F .text	00000026 install_timers_isr
00012a9a g     F .text	00000134 assign_value
00012d32 g     F .text	00000128 Post_Config
00010766 g     F .text	00000014 reverse_8bits
000153e6 g     F .text	000000e0 SS80_describe
000057d4 g     F .text	0000002c uart_getchar
00007f38 g     F .text	0000020e p_ftoa
0000f890 g     F .text	000000dc write
000061b2 g     F .text	00000046 lcd_cleareol
000186da g     F .text	00000074 lif_B2S
0001ce58 g       .text	00000000 __gtsf2
0000fd34 g     F .text	00000040 fprintf
0001101c g     F .text	000000a4 gpib_decode_header
0001134e g     F .text	000001ac gpib_read_byte
00015fea g     F .text	0000001c SS80_Universal_Device_Clear
0001ae86 g     F .text	00000272 lif_add_ascii_file_as_e010
00006826 g     F .text	0000004e __vector_13
00006384  w    F .text	00000026 strcat
008018eb g     O .bss	00000057 uarts
0001ce7c g       .text	00000000 __mulsf3_pse
000048e2  w      .text	00000000 __vector_17
000051bc g     F .text	00000022 spi_TXRX
0001cdc2 g     F .text	00000006 __fp_nan
0001254c g     F .text	00000212 set_active_device
000048e2  w      .text	00000000 __vector_19
00006780 g     F .text	0000007c get_value
000059e2 g     F .text	00000028 SPI0_TX
0001874e g     F .text	0000003a lif_checkname
0000ef0c g     F .text	0000003e chdir
000048e2  w      .text	00000000 __vector_7
0000dfde g     F .text	0000013c mmc_init
0000e760 g     F .text	0000019a fatfs_ls
0001cdb6 g     F .text	0000000c __fp_inf
00008d2a g     F .text	00000028 sprintf_P
0001cad8 g       .text	00000018 .hidden __cmpdi2_s8
0000f2bc g     F .text	00000088 fat_time_to_unix
0000f6a0 g     F .text	0000004e fseek
00801bad g     O .bss	00000004 AccSize
00018dfa g     F .text	0000000c lif_image_clear
0000df92 g     F .text	0000000e mmc_set_ms_timeout
000067fc g     F .text	00000004 enable_system_task
0000df86 g     F .text	00000006 mmc_spi_RX_buffer
0000710c g     F .text	00000058 is_dst
00005616 g     F .text	0000008e uart_init
00014f28 g     F .text	00000078 SS80ControllerPack
00801dec g     O .bss	00000204 Devices
000048ca g       .text	00000010 .hidden __do_clear_bss
0001d3de g     F .text	00000016 strnlen_P
00801972 g     O .bss	00000006 _pch
00005910 g     F .text	0000006c SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
0001a456 g     F .text	00000200 lif_open_volume
0000ff6c g     F .text	00000066 testpage
000181f8 g     F .text	000000e6 printer_buffer
00005c26 g     F .text	0000005c TWI_WritePacket
0000bf70 g     F .text	00000032 f_close
0001ce78 g     F .text	000000ca __mulsf3x
00017f4e g     F .text	0000001c printer_init
0000df42 g     F .text	0000001a mmc_slow
000062fc g     F .text	00000016 sep
00800255 g     O .data	00000002 __malloc_heap_end
0001077a g     F .text	00000014 ppr_set
00016ee4 g     F .text	00000124 amigo_format
0000f6ee g     F .text	000000da read
000198f2 g     F .text	00000030 lif_writedirEOF
0000df3a g     F .text	00000008 mmc_spi_end
0001ccf8 g       .text	00000000 __floatsisf
000173c4 g     F .text	00000046 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
00019922 g     F .text	00000210 lif_updatefree
00005a36 g     F .text	0000002a SPI0_RX
0000b8ac g     F .text	00000296 f_read
008018e9 g     O .bss	00000002 rtc_ok
000117d8 g     F .text	0000001e SS80_is_MLA
00006444  w    F .text	0000002a strncmp
000056a4 g     F .text	00000040 uart_rx_interrupt
00005800 g     F .text	00000006 uart0_getchar
000048e2  w      .text	00000000 __vector_27
00010c20 g     F .text	00000062 gpib_disable_PPR
0000e244 g     F .text	000000e0 fatfs_scan_files
00005032 g     F .text	00000032 chip_select
00801746 g       .data	00000000 __data_end
00010892 g     F .text	00000030 dbf_lseek
00016702 g     F .text	000001ce SS80_COMMANDS
0000c986 g     F .text	00000088 f_readdir
00801de4 g     O .bss	00000002 current
0001550a g     F .text	00000040 SS80_Check_Volume
0000def2 g     F .text	0000002e mmc_install_timer
00007e46 g     F .text	00000048 pch
00008d8c g     F .text	0000003c atodigit
0001c8d4 g       .text	0000001e .hidden __mulsi3
00006358  w    F .text	0000002c strncpy
0000f080 g     F .text	0000003e unlink
0000f866 g     F .text	0000002a sync
00015f44 g     F .text	0000008e SS80_init
0001cbba g       .text	00000000 __eqsf2
0000fa80 g     F .text	0000008a new_file_descriptor
0000646e  w    F .text	0000003e strcasecmp
0001ca3c g       .text	00000020 .hidden __negdi2
00012438 g     F .text	00000040 B2V_LSB
0000e61a g     F .text	0000010e fatfs_filinfo_list
0000d1a0 g     F .text	0000009a f_chmod
0080194a g     O .bss	00000018 timer_irq
000124be g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001c932 g       .text	00000026 .hidden __divmodhi4
00014fa0 g     F .text	00000198 SS80UnitPack
000109a0 g     F .text	000000ae dbf_open_write
000048e2  w      .text	00000000 __vector_5
0000de98 g     F .text	0000001e mmc_disk_timerproc
0000780c g     F .text	0000010c find_dst
00800189 g     O .data	00000034 gpib_tokens
000048e2  w      .text	00000000 __vector_33
00011502 g     F .text	0000015c gpib_read_str
0001a656 g     F .text	00000328 lif_dir
00017190 g     F .text	00000170 amigo_buffered_write
0001c436 g     F .text	00000164 task
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
000152e4 g     F .text	00000102 SS80_send_status
000061f8 g     F .text	000000b2 lcd_putch
0001c9d4 g       .text	00000012 .hidden __tablejump2__
000118d8 g     F .text	0000011a gpib_trace_task
0080013c g     O .data	00000001 Stat
0000f45c g     F .text	00000090 unix_time_to_fat
000048a4 g       .text	00000000 __ctors_start
00006110 g     F .text	0000003e LCD_setFastBacklightRGB
0000d786 g     F .text	0000013a mmc_disk_initialize
00801962 g     O .bss	00000004 __tzone
0000e200 g     F .text	00000026 get_fattime
0000f7c8 g     F .text	00000038 fread
00018e06 g     F .text	00000010 lif_dir_clear
00016d1a g     F .text	00000052 amigo_increment
00012014 g     F .text	0000011c GPIB_LISTEN
008001bd g     O .data	00000002 debuglevel
0080181c g     O .bss	00000002 _mmc_timeout
000048b0 g       .text	0000001a .hidden __do_copy_data
008001cb g     O .data	00000074 faults
0000fc48 g     F .text	000000d4 posix_fopen_modes_to_open
000123fa g     F .text	0000003e B2V_MSB
00018c28 g     F .text	0000000e lif_BIN2BCD
0001cf66 g     F .text	00000036 __fp_mintl
0001cbba g     F .text	00000008 __cmpsf2
0001caca g       .text	0000000e .hidden __xload_1
0000706e g     F .text	0000005c gettimeofday
0001cdd6 g     F .text	0000000e __fp_pscB
0001ce16 g       .text	00000000 __fp_splitA
00018d70 g     F .text	0000003c lif_ctime_gmt
00018536 g     F .text	000000b2 lif_read
0000fd1c g     F .text	00000018 fopen
00801746 g       .bss	00000000 __bss_start
00007a40 g     F .text	000000a4 asctime_r
000071fc g     F .text	00000008 localtime
0001d3f4 g     F .text	0000000e memset
0001755c g     F .text	00000120 amigo_todo
00012a3a g     F .text	00000032 push_state
000077ca g     F .text	00000042 setdate
0001c59a g     F .text	0000033a main
00005a60 g     F .text	00000018 TWI_Init
000121f2 g     F .text	00000002 talk_cleanup
00005ca2 g     F .text	000000c0 rtc_run
0000f59c g     F .text	00000036 ftell
00801de6 g     O .bss	00000001 talking
0000be70 g     F .text	00000100 f_sync
00801861 g     O .bss	00000002 AMIGOs
0001cbba g       .text	00000000 __ltsf2
0000583e g     F .text	00000004 uart_keyhit
000129f2 g     F .text	00000048 init_Devices
000048e2  w      .text	00000000 __vector_4
00019666 g     F .text	0000004c lif_close_volume
0000df5c g     F .text	0000000a mmc_spi_init
00019768 g     F .text	000000d2 lif_readdirindex
00005a80 g     F .text	000000c0 TWI_StartTransmission
000176a4 g     F .text	000005cc Amigo_Command
0000fa70 g     F .text	00000010 fclose
0000ed66 g     F .text	0000000c getchar
00016c5e g     F .text	000000bc amigo_send_status
00016a4e g     F .text	00000088 amigo_init
0080013d g     O .data	0000004a sys_errlist
000070ca g     F .text	00000042 time
0000f0f8 g     F .text	0000003c opendir
0001cf9c g     F .text	0000001c __fp_mpack
0001275e g     F .text	0000012e SS80_Set_Defaults
0000704c g     F .text	00000022 settimezone
0000b4be g     F .text	00000078 f_mount
0000e342 g     F .text	000002d8 fatfs_status
00007e2c g     F .text	0000001a pch_init
00011850 g     F .text	0000001e AMIGO_is_MTA
0001c9c4 g       .text	00000010 .hidden __negsi2
0000c87a g     F .text	000000e2 f_opendir
00015f06 g     F .text	0000003e Clear_Common
0001c3fe g     F .text	00000038 help
00010bbe g     F .text	00000062 gpib_enable_PPR
00016dc2 g     F .text	00000122 amigo_verify
0001ce60 g     F .text	00000004 __mulsf3
00006696 g     F .text	00000086 get_token
00016af2 g     F .text	000000b0 amigo_request_status
0001408e g     F .text	000001f6 display_Addresses
0000f572 g     F .text	0000002a fileno_to_fatfs
0000d496 g     F .text	0000002a ff_oem2uni
0000642a  w    F .text	0000001a strcmp
00010b6e g     F .text	00000050 gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
00010a78 g     F .text	0000004c gpib_timer_task
000053f8 g     F .text	0000005a delayus
00012a6c g     F .text	0000002e pop_state
000048e2  w      .text	00000000 __vector_9
0000ef9c g     F .text	0000004a getcwd
000048e2  w      .text	00000000 __vector_2
00006582 g     F .text	00000028 MATCHI
0001767c g     F .text	00000028 amigo_check_unit
0001cb14 g     F .text	000000c6 __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000c2c4 g     F .text	000005b6 f_lseek
0000ec10 g     F .text	000000a2 fgetc
00801de7 g     O .bss	00000001 secondary
00008cb6 g     F .text	0000004c vsnprintf_P
00007aec g     F .text	00000022 ctime_gm
0001ce58 g     F .text	00000008 __gesf2
00014a9a g     F .text	000000fc hpdir_init
00016ba2 g     F .text	000000bc amigo_send_logical_address
000154c6 g     F .text	00000044 SS80_Check_Unit
00011750 g     F .text	00000088 gpib_file_init
00800104 g     O .data	00000001 _cs_pin
00005fd8 g     F .text	00000028 I2C_Start
0080185d g     O .bss	00000002 gpib_log_fp
000048e2  w      .text	00000000 __vector_21
000048e2  w      .text	00000000 __vector_15
00006010 g     F .text	00000022 I2C_Send
00008146 g     F .text	000002b8 p_etoa
00016386 g     F .text	000002d0 SS80_locate_and_read
0001222c g     F .text	0000017c gpib_tests
00801bb1 g     O .bss	00000002 AccDirs
0000d42a g     F .text	00000006 ff_memfree
00801869 g     O .bss	00000002 PRINTERp
0001cdc8 g     F .text	0000000e __fp_pscA
0001c8f2 g       .text	00000018 .hidden __udivmodqi4
00801de8 g     O .bss	00000001 listening
000119f2 g     F .text	00000114 gpib_error_test
00801865 g     O .bss	00000002 SS80s
0000ca0e g     F .text	0000007c f_stat
00010b1e g     F .text	00000050 gpib_bus_init
0000ecb2 g     F .text	0000009a fputc
000048e2  w      .text	00000000 __vector_29
0000582a g     F .text	00000014 uart0_putchar
00008d52 g     F .text	0000003a printf_P
0001ca34 g       .text	00000006 .hidden __mulohisi3
00016656 g     F .text	000000ac SS80_Execute_State
00007594 g     F .text	00000008 timegm
0001554a g     F .text	000004f0 SS80_Command_State
0000702a g     F .text	00000022 gettimezone
008020a8 g       .comment	00000000 __heap_start
000063f6 g     F .text	00000020 trim_tail
00010d4c g     F .text	000002d0 gpib_write_byte
0001801c g     F .text	0000009a printer_close
0001914a g     F .text	000001b6 lif_check_volume
00007164 g     F .text	00000098 localtime_r
00801bb3 g     O .bss	00000002 AccFiles
00005f00 g     F .text	000000d8 rtc_read
000048a4 g       .text	00000000 __dtors_start
00010ad8 g     F .text	00000046 gpib_bus_read_init
000048a4 g       .text	00000000 __ctors_end
0001c99c g       .text	00000028 .hidden __divmodsi4
00010d08 g     F .text	0000000c gpib_bus_read
0000f344 g     F .text	00000118 stat
000040ff  w      *ABS*	00000000 __stack
0000f800 g     F .text	00000066 syncfs
00018374 g     F .text	00000058 lif_calloc
0000f96c g     F .text	00000038 fwrite
00011bae g     F .text	00000092 Send_Identify
00801816 g     O .bss	00000002 _mmc_pre
0000df8c g     F .text	00000006 mmc_spi_TXRX
00801746 g       .data	00000000 _edata
00005ba4 g     F .text	00000082 TWI_ReadPacket
0000d23a g     F .text	000000b2 f_utime
00014284 g     F .text	000005ca display_Config
0001ca12 g       .text	00000008 .hidden __usmulhisi3_tail
008020a8 g       .comment	00000000 _end
00005b68 g     F .text	0000003c TWI_ReceiveByte
000184c2 g     F .text	00000074 lif_seek_msg
00005144 g     F .text	00000078 spi_begin
000180b6 g     F .text	00000142 printer_open
0000bb42 g     F .text	0000032e f_write
000048e2  w      .text	00000000 __vector_8
0001a97e g     F .text	000000c8 lif_find_file
000048e2  w      .text	00000000 __vector_26
00007d1a g     F .text	00000112 bin2num
0001cbe0 g       .text	00000000 __divsf3_pse
0001c338 g     F .text	000000c6 delay_tests
00800100 g     O .data	00000004 _spi_clock
00801863 g     O .bss	00000002 AMIGOp
0000df80 g     F .text	00000006 mmc_spi_TX_buffer
0000b536 g     F .text	00000376 f_open
0001883c g     F .text	00000130 lif_vol2str
0000d5bc g     F .text	00000020 disk_write
00010226 g     F .text	00000224 ls
0001d4d4  w      .text	00000000 .hidden exit
00012130 g     F .text	000000c2 gpib_task
0001ccf4 g     F .text	0000007a __floatunsisf
00006ad6 g     F .text	00000082 subtract_timespec
0001c932 g       .text	00000000 .hidden _div
00017c70 g     F .text	000001ae Amigo_Execute
000063dc  w    F .text	0000001a strupper
008020a6 g     O .bss	00000002 __flp
0001c958 g       .text	00000044 .hidden __udivmodsi4
000118aa g     F .text	0000001e PRINTER_is_MTA
0001a18c g     F .text	000002ca lif_newdir
00014bd0 g     F .text	00000358 hpdir_find_drive
0001188c g     F .text	0000001e PRINTER_is_MLA
00008e84 g     F .text	0000000e atoi
00006e2e g     F .text	000001bc time_to_tm
0000e226 g     F .text	0000001e put_rc
00800105 g     O .data	00000002 LCD_ok
0000ee44 g     F .text	00000038 fileno
00800112 g     O .data	0000001a __Month
00005988 g     F .text	0000005a SPI0_Init
0000cd96 g     F .text	000001e0 f_mkdir
0001cc9c g     F .text	00000058 __fixunssfsi
00801ff0 g     O .bss	000000b4 hpdir
0000759c g     F .text	0000022e setdate_r
00006524 g     F .text	0000005e MATCHARGS
000050dc g     F .text	00000004 spi_TX_buffer
00006000 g     F .text	00000010 I2C_Stop
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001d4d4 g       .text	00000000 .hidden _exit
000185e8 g     F .text	0000009c lif_write
00018788 g     F .text	0000003a lif_S2B
00801de9 g     O .bss	00000001 talking_last
00010832 g     F .text	00000030 dbf_read
00005c90 g     F .text	00000012 BCDtoBIN
00007204 g     F .text	00000390 normalize
00007014 g     F .text	00000016 gmtime
000048e2  w      .text	00000000 __vector_14
0000e95e g     F .text	00000116 fatfs_tests
0001beca g     F .text	000000f8 lif_create_image
0000d59c g     F .text	00000020 disk_read
0000fb0a g     F .text	0000013e open
0000671c g     F .text	00000064 token
00006328  w    F .text	0000001a toupper
00015b3c g     F .text	0000032e SS80_locate_and_write
00008482 g     F .text	00000834 _printf_fn
000048e2  w      .text	00000000 __vector_10
000107d2 g     F .text	0000001c ppr_bit_clr
00801bb7 g     O .bss	00000020 __iob
0000d2ec g     F .text	00000138 f_getlabel
0001896c g     F .text	00000110 lif_str2vol
00006056 g     F .text	00000026 LCD_command
0000ca8a g     F .text	000001be f_getfree
0000ede6 g     F .text	00000030 fputs
000048e2  w      .text	00000000 __vector_16
000065aa g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
00005312 g     F .text	00000050 safecalloc
0000ee7c g     F .text	0000002a fileno_to_stream
00015a3a g     F .text	00000102 SS80_cmd_seek
0000f0c2 g     F .text	00000036 closedir
000048e2  w      .text	00000000 __vector_18
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00015138 g     F .text	000000ca SS80VolumePack
0000d8c6 g     F .text	0000008c mmc_disk_read
0000e8fa g     F .text	00000064 mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
0001847a g     F .text	00000048 lif_stat
0000579c g     F .text	00000006 uart_rx_byte
00016312 g     F .text	00000074 SS80_error_return
00800259 g     O .data	00000002 __malloc_margin
000056e4 g     F .text	00000054 __vector_20
0000efe6 g     F .text	0000005c mkdir
00005806 g     F .text	00000024 uart_putchar
0001044a g     F .text	000002f4 posix_tests
00801dea g     O .bss	00000002 gpib_unread_data
0000fa0e g     F .text	00000062 close
0001caf2 g       .text	00000000 __addsf3
0001ca5c g       .text	00000038 .hidden __prologue_saves__
00011832 g     F .text	0000001e AMIGO_is_MLA
0000dfa0 g     F .text	0000003e mmc_test_timeout
0001b0f8 g     F .text	000005d8 lif_extract_e010_as_ascii
000048e6 g     F .text	0000074c vfprintf
00016d6c g     F .text	00000056 amigo_seek
00010d34 g     F .text	00000018 gpib_handshake_pin_read
00006c72 g     F .text	00000028 enable_timers
0000e324 g     F .text	0000001e fatfs_fstype
000123d0 g     F .text	0000002a V2B_LSB
00010862 g     F .text	00000030 dbf_write
00801867 g     O .bss	00000002 SS80p
0080185f g     O .bss	00000002 lines
0000d424 g     F .text	00000006 ff_memalloc
0001d11c g     F .text	00000112 free
0001ce4c g       .text	00000000 __fp_szero
000057a2 g     F .text	00000032 uart_tx_byte
0001ca30 g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__ctors_end>
       4:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
       8:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
       c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      10:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      14:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      18:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      1c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      20:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      24:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      28:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      2c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      30:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      34:	0c 94 13 34 	jmp	0x6826	; 0x6826 <__vector_13>
      38:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      3c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      40:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      44:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      48:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      4c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      50:	0c 94 72 2b 	jmp	0x56e4	; 0x56e4 <__vector_20>
      54:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      58:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      5c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      60:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      64:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      68:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      6c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      70:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      74:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      78:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      7c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      80:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      84:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      88:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      8c:	ba 43       	sbci	r27, 0x3A	; 58
      8e:	15 45       	sbci	r17, 0x55	; 85
      90:	ea 43       	sbci	r30, 0x3A	; 58
      92:	ee 44       	sbci	r30, 0x4E	; 78
      94:	ee 44       	sbci	r30, 0x4E	; 78
      96:	15 45       	sbci	r17, 0x55	; 85
      98:	15 45       	sbci	r17, 0x55	; 85
      9a:	15 45       	sbci	r17, 0x55	; 85
      9c:	15 45       	sbci	r17, 0x55	; 85
      9e:	15 45       	sbci	r17, 0x55	; 85
      a0:	15 45       	sbci	r17, 0x55	; 85
      a2:	15 45       	sbci	r17, 0x55	; 85
      a4:	15 45       	sbci	r17, 0x55	; 85
      a6:	ba 43       	sbci	r27, 0x3A	; 58
      a8:	b4 43       	sbci	r27, 0x34	; 52
      aa:	15 45       	sbci	r17, 0x55	; 85
      ac:	15 45       	sbci	r17, 0x55	; 85
      ae:	15 45       	sbci	r17, 0x55	; 85
      b0:	15 45       	sbci	r17, 0x55	; 85
      b2:	e4 43       	sbci	r30, 0x34	; 52
      b4:	15 45       	sbci	r17, 0x55	; 85
      b6:	15 45       	sbci	r17, 0x55	; 85
      b8:	ba 43       	sbci	r27, 0x3A	; 58
      ba:	15 45       	sbci	r17, 0x55	; 85
      bc:	15 45       	sbci	r17, 0x55	; 85
      be:	15 45       	sbci	r17, 0x55	; 85
      c0:	15 45       	sbci	r17, 0x55	; 85
      c2:	15 45       	sbci	r17, 0x55	; 85
      c4:	15 45       	sbci	r17, 0x55	; 85
      c6:	15 45       	sbci	r17, 0x55	; 85
      c8:	15 45       	sbci	r17, 0x55	; 85
      ca:	15 45       	sbci	r17, 0x55	; 85
      cc:	ba 43       	sbci	r27, 0x3A	; 58
      ce:	10 45       	sbci	r17, 0x50	; 80
      d0:	ea 43       	sbci	r30, 0x3A	; 58
      d2:	ee 44       	sbci	r30, 0x4E	; 78
      d4:	ee 44       	sbci	r30, 0x4E	; 78
      d6:	15 45       	sbci	r17, 0x55	; 85
      d8:	15 45       	sbci	r17, 0x55	; 85
      da:	15 45       	sbci	r17, 0x55	; 85
      dc:	15 45       	sbci	r17, 0x55	; 85
      de:	15 45       	sbci	r17, 0x55	; 85
      e0:	15 45       	sbci	r17, 0x55	; 85
      e2:	15 45       	sbci	r17, 0x55	; 85
      e4:	15 45       	sbci	r17, 0x55	; 85
      e6:	ba 43       	sbci	r27, 0x3A	; 58
      e8:	b4 43       	sbci	r27, 0x34	; 52
      ea:	15 45       	sbci	r17, 0x55	; 85
      ec:	15 45       	sbci	r17, 0x55	; 85
      ee:	0b 45       	sbci	r16, 0x5B	; 91
      f0:	15 45       	sbci	r17, 0x55	; 85
      f2:	e4 43       	sbci	r30, 0x34	; 52
      f4:	15 45       	sbci	r17, 0x55	; 85
      f6:	15 45       	sbci	r17, 0x55	; 85
      f8:	ba 43       	sbci	r27, 0x3A	; 58
      fa:	37 45       	sbci	r19, 0x57	; 87
      fc:	1e 46       	sbci	r17, 0x6E	; 110
      fe:	2d 45       	sbci	r18, 0x5D	; 93
     100:	8b 45       	sbci	r24, 0x5B	; 91
     102:	72 45       	sbci	r23, 0x52	; 82
     104:	1e 46       	sbci	r17, 0x6E	; 110
     106:	1e 46       	sbci	r17, 0x6E	; 110
     108:	1e 46       	sbci	r17, 0x6E	; 110
     10a:	1e 46       	sbci	r17, 0x6E	; 110
     10c:	1e 46       	sbci	r17, 0x6E	; 110
     10e:	1e 46       	sbci	r17, 0x6E	; 110
     110:	1e 46       	sbci	r17, 0x6E	; 110
     112:	1e 46       	sbci	r17, 0x6E	; 110
     114:	41 45       	sbci	r20, 0x51	; 81
     116:	55 45       	sbci	r21, 0x55	; 85
     118:	1e 46       	sbci	r17, 0x6E	; 110
     11a:	1e 46       	sbci	r17, 0x6E	; 110
     11c:	1e 46       	sbci	r17, 0x6E	; 110
     11e:	1e 46       	sbci	r17, 0x6E	; 110
     120:	29 45       	sbci	r18, 0x59	; 89
     122:	1e 46       	sbci	r17, 0x6E	; 110
     124:	1e 46       	sbci	r17, 0x6E	; 110
     126:	55 45       	sbci	r21, 0x55	; 85
     128:	1e 46       	sbci	r17, 0x6E	; 110
     12a:	1e 46       	sbci	r17, 0x6E	; 110
     12c:	1e 46       	sbci	r17, 0x6E	; 110
     12e:	1e 46       	sbci	r17, 0x6E	; 110
     130:	1e 46       	sbci	r17, 0x6E	; 110
     132:	1e 46       	sbci	r17, 0x6E	; 110
     134:	1e 46       	sbci	r17, 0x6E	; 110
     136:	1e 46       	sbci	r17, 0x6E	; 110
     138:	1e 46       	sbci	r17, 0x6E	; 110
     13a:	37 45       	sbci	r19, 0x57	; 87
     13c:	b9 45       	sbci	r27, 0x59	; 89
     13e:	2d 45       	sbci	r18, 0x5D	; 93
     140:	8b 45       	sbci	r24, 0x5B	; 91
     142:	72 45       	sbci	r23, 0x52	; 82
     144:	1e 46       	sbci	r17, 0x6E	; 110
     146:	1e 46       	sbci	r17, 0x6E	; 110
     148:	1e 46       	sbci	r17, 0x6E	; 110
     14a:	1e 46       	sbci	r17, 0x6E	; 110
     14c:	1e 46       	sbci	r17, 0x6E	; 110
     14e:	1e 46       	sbci	r17, 0x6E	; 110
     150:	1e 46       	sbci	r17, 0x6E	; 110
     152:	1e 46       	sbci	r17, 0x6E	; 110
     154:	41 45       	sbci	r20, 0x51	; 81
     156:	55 45       	sbci	r21, 0x55	; 85
     158:	1e 46       	sbci	r17, 0x6E	; 110
     15a:	1e 46       	sbci	r17, 0x6E	; 110
     15c:	b9 45       	sbci	r27, 0x59	; 89
     15e:	1e 46       	sbci	r17, 0x6E	; 110
     160:	29 45       	sbci	r18, 0x59	; 89
     162:	1e 46       	sbci	r17, 0x6E	; 110
     164:	1e 46       	sbci	r17, 0x6E	; 110
     166:	55 45       	sbci	r21, 0x55	; 85
     168:	90 6a       	ori	r25, 0xA0	; 160
     16a:	9a 6a       	ori	r25, 0xAA	; 170
     16c:	a2 6a       	ori	r26, 0xA2	; 162
     16e:	a5 6a       	ori	r26, 0xA5	; 165
     170:	a8 6a       	ori	r26, 0xA8	; 168
     172:	ab 6a       	ori	r26, 0xAB	; 171
     174:	ae 6a       	ori	r26, 0xAE	; 174
     176:	b1 6a       	ori	r27, 0xA1	; 161
     178:	b4 6a       	ori	r27, 0xA4	; 164
     17a:	f6 86       	std	Z+14, r15	; 0x0e
     17c:	1c 87       	std	Y+12, r17	; 0x0c
     17e:	43 87       	std	Z+11, r20	; 0x0b
     180:	5d 87       	std	Y+13, r21	; 0x0d
     182:	66 87       	std	Z+14, r22	; 0x0e
     184:	86 87       	std	Z+14, r24	; 0x0e
     186:	9f 87       	std	Y+15, r25	; 0x0f
     188:	ae 87       	std	Y+14, r26	; 0x0e
     18a:	f9 87       	std	Y+9, r31	; 0x09
     18c:	cb 87       	std	Y+11, r28	; 0x0b
     18e:	e7 89       	ldd	r30, Z+23	; 0x17
     190:	ef 89       	ldd	r30, Y+23	; 0x17
     192:	f4 89       	ldd	r31, Z+20	; 0x14
     194:	18 8a       	std	Y+16, r1	; 0x10
     196:	22 8a       	std	Z+18, r2	; 0x12
     198:	6c 8a       	std	Y+20, r6	; 0x14
     19a:	37 8a       	std	Z+23, r3	; 0x17
     19c:	37 8a       	std	Z+23, r3	; 0x17
     19e:	2f 8a       	std	Y+23, r2	; 0x17
     1a0:	00 98       	cbi	0x00, 0	; 0
     1a2:	39 99       	sbic	0x07, 1	; 7
     1a4:	8d 99       	sbic	0x11, 5	; 17
     1a6:	0d 9a       	sbi	0x01, 5	; 1
     1a8:	3e 9a       	sbi	0x07, 6	; 7
     1aa:	b4 9a       	sbi	0x16, 4	; 22
     1ac:	76 9c       	mul	r7, r6
     1ae:	3b 9f       	mul	r19, r27
     1b0:	3b 9f       	mul	r19, r27
     1b2:	3b 9f       	mul	r19, r27
     1b4:	43 9d       	mul	r20, r3
     1b6:	7e 9d       	mul	r23, r14
     1b8:	2c 9e       	mul	r2, r28
     1ba:	6c 9e       	mul	r6, r28
     1bc:	d9 98       	cbi	0x1b, 1	; 27
     1be:	f2 98       	cbi	0x1e, 2	; 30
     1c0:	0a bf       	out	0x3a, r16	; 58
     1c2:	c9 be       	out	0x39, r12	; 57
     1c4:	c9 be       	out	0x39, r12	; 57
     1c6:	c9 be       	out	0x39, r12	; 57
     1c8:	c9 be       	out	0x39, r12	; 57
     1ca:	8d be       	out	0x3d, r8	; 61
     1cc:	94 be       	out	0x34, r9	; 52
     1ce:	9b be       	out	0x3b, r9	; 59
     1d0:	ab be       	out	0x3b, r10	; 59
     1d2:	b9 be       	out	0x39, r11	; 57
     1d4:	b2 be       	out	0x32, r11	; 50

000001d6 <__trampolines_end>:
     1d6:	6e 61       	ori	r22, 0x1E	; 30
     1d8:	6e 00       	.word	0x006e	; ????

000001da <__c.2332>:
     1da:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ea:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1fa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     20a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     21a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     22a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     23a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     24a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     25a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     26a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     27a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     28a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     29a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2aa:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ba:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ca:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d8 <__c.3699>:
     2d8:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e8:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f6 <__c.3694>:
     2f6:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     306:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000313 <__c.3725>:
     313:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     323:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     333:	25 75 29 0a 00                                      %u)..

00000338 <__c.3716>:
     338:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     348:	61 69 6c 65 64 21 0a 00                             ailed!..

00000350 <__c.3710>:
     350:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     360:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000036b <__c.3695>:
     36b:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     37b:	35 75 0a 00                                         5u..

0000037f <__c.3693>:
     37f:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     38f:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000039d <__c.3691>:
     39d:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3ad:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003bb <__c.3689>:
     3bb:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3cb:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d9 <__c.3687>:
     3d9:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f7 <__c.3685>:
     3f7:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     407:	75 0a 00                                            u..

0000040a <__c.3683>:
     40a:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     41a:	75 0a 00                                            u..

0000041d <__c.3681>:
     41d:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

0000042a <__c.3679>:
     42a:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     43a:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000447 <__c.3711>:
     447:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000457 <__c.3704>:
     457:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000468 <__c.3694>:
     468:	72 74 63 5f 69 6e 69 74 20 72 61 6d 20 2d 20 77     rtc_init ram - w
     478:	72 69 74 65 20 65 72 72 6f 72 0a 00                 rite error..

00000484 <__c.3692>:
     484:	72 74 63 20 5f 77 72 69 74 65 20 65 70 6f 63 68     rtc _write epoch
     494:	20 66 61 69 6c 65 64 0a 00                           failed..

0000049d <__c.3681>:
     49d:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     4ad:	65 72 72 6f 72 0a 00                                error..

000004b4 <__c.3679>:
     4b4:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     4c4:	6f 72 0a 00                                         or..

000004c8 <__c.3671>:
     4c8:	72 74 63 5f 73 74 61 74 65 20 72 65 61 64 20 65     rtc_state read e
     4d8:	72 72 6f 72 0a 00                                   rror..

000004de <__c.3829>:
     4de:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4ee:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4fe:	74 20 25 64 0a 00                                   t %d..

00000504 <__c.3663>:
     504:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     514:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000524 <__c.3742>:
     524:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

00000534 <__c.3740>:
     534:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

00000545 <__c.3738>:
     545:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     555:	66 61 69 6c 65 64 0a 00                             failed..

0000055d <__c.3736>:
     55d:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000569 <__c.3734>:
     569:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     579:	64 0a 00                                            d..

0000057c <__c.3732>:
     57c:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     58c:	65 64 0a 00                                         ed..

00000590 <__c.3712>:
     590:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

0000059b <__c.3710>:
     59b:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005a9 <__c.3701>:
     5a9:	5b 53 65 63 6f 6e 64 73 3a 20 25 73 5d 0a 00        [Seconds: %s]..

000005b8 <__c.3696>:
     5b8:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005c2 <__c.3676>:
     5c2:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5d2:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005df <__c.3951>:
     5df:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005f0 <__c.3949>:
     5f0:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     600:	0a 00                                               ..

00000602 <__c.3947>:
     602:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

00000613 <__c.3945>:
     613:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

00000624 <__c.3943>:
     624:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     634:	0a 00                                               ..

00000636 <__c.3936>:
     636:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     646:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     656:	6d 65 0a 00                                         me..

0000065a <__c.3934>:
     65a:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     66a:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

00000674 <__c.3932>:
     674:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     684:	61 69 6c 65 64 0a 00                                ailed..

0000068b <__c.3930>:
     68b:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     69b:	6e 69 74 0a 00                                      nit..

000006a0 <__c.3928>:
     6a0:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6b0:	0a 00                                               ..

000006b2 <__c.3919>:
     6b2:	44 53 54 20 45 4e 44 20 20 20 20 20 20 20 20 20     DST END         
     6c2:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006cb <__c.3917>:
     6cb:	44 53 54 20 53 54 41 52 54 20 20 20 20 20 20 20     DST START       
     6db:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006e4 <__c.3913>:
     6e4:	44 53 54 20 45 4e 44 20 20 20 6c 6f 63 61 6c 74     DST END   localt
     6f4:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

000006fd <__c.3911>:
     6fd:	44 53 54 20 53 54 41 52 54 20 6c 6f 63 61 6c 74     DST START localt
     70d:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

00000716 <__c.3882>:
     716:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     726:	61 69 6c 65 64 0a 00                                ailed..

0000072d <__c.3880>:
     72d:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

0000073e <__c.3878>:
     73e:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     74e:	0a 00                                               ..

00000750 <__c.3876>:
     750:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000761 <__c.3874>:
     761:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000772 <__c.3872>:
     772:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     782:	0a 00                                               ..

00000784 <__c.3851>:
     784:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     794:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

000007a5 <__c.3726>:
     7a5:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     7b5:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

000007c2 <__c.3694>:
     7c2:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

000007d2 <__c.3723>:
     7d2:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

000007e0 <__c.3721>:
     7e0:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     7f0:	25 6c 64 0a 00                                      %ld..

000007f5 <__c.3719>:
     7f5:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     805:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

00000813 <__c.3716>:
     813:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

00000824 <__c.3714>:
     824:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

00000830 <__c.3712>:
     830:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

00000840 <__c.3699>:
     840:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

0000084d <__c.3671>:
     84d:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     85d:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000869 <__c.3743>:
     869:	0a 00                                               ..

0000086b <__c.3741>:
     86b:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     87b:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     88b:	73 00                                               s.

0000088d <__c.3739>:
     88d:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     89d:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

000008a8 <__c.3733>:
     8a8:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     8b8:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8c8:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8d8:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8e8:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008f5 <__c.3731>:
     8f5:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     905:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     915:	30 34 58 0a 00                                      04X..

0000091a <__c.3729>:
     91a:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92a:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000938 <__c.3727>:
     938:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     948:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000957 <__c.3725>:
     957:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     967:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000976 <__c.3723>:
     976:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     986:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000995 <__c.3721>:
     995:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9a5:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009b4 <__c.3719>:
     9b4:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9c4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009d3 <__c.3717>:
     9d3:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9e3:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009f1 <__c.3715>:
     9f1:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a01:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a0f <__c.3713>:
     a0f:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a1f:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a2e <__c.3711>:
     a2e:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a3e:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a4c <__c.3709>:
     a4c:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a5d <__c.3673>:
     a5d:	72 63 3d 25 75 0a 00                                rc=%u..

00000a64 <__c.3711>:
     a64:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a74:	72 65 65 0a 00                                      ree..

00000a79 <__c.3709>:
     a79:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a89:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a99:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000aa2 <__c.3705>:
     aa2:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000ab0 <__c.3692>:
     ab0:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     ac0:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000ad0 <__c.3690>:
     ad0:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ade <__c.3688>:
     ade:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     aee:	73 74 0a 00                                         st..

00000af2 <__c.3686>:
     af2:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000b02 <__c.3684>:
     b02:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b12:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b22 <__c.3676>:
     b22:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b32 <__c.3666>:
     b32:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b42:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b52:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b62:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b72:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b82:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b92:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     ba2:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000bae <__c.3664>:
     bae:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000bba <__c.4025>:
     bba:	45 78 70 65 63 74 65 64 20 2f 64 65 76 2f 73 64     Expected /dev/sd
     bca:	61 20 2e 2e 20 2f 64 65 76 2f 73 64 6a 0a 00        a .. /dev/sdj..

00000bd9 <__c.3996>:
     bd9:	25 73 0a 00                                         %s..

00000bdd <__c.3994>:
     bdd:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000be5 <__c.3890>:
     be5:	09 63 74 69 6d 65 3a 20 25 73 0a 00                 .ctime: %s..

00000bf1 <__c.3888>:
     bf1:	09 6d 74 69 6d 65 3a 20 25 73 0a 00                 .mtime: %s..

00000bfd <__c.3886>:
     bfd:	09 61 74 69 6d 65 3a 20 25 73 0a 00                 .atime: %s..

00000c09 <__c.3884>:
     c09:	09 47 49 44 3a 20 20 20 25 6c 75 0a 00              .GID:   %lu..

00000c16 <__c.3882>:
     c16:	09 55 49 44 3a 20 20 20 25 6c 75 0a 00              .UID:   %lu..

00000c23 <__c.3880>:
     c23:	09 4d 6f 64 65 3a 20 20 25 6c 6f 0a 00              .Mode:  %lo..

00000c30 <__c.3878>:
     c30:	55 6e 6b 6e 6f 77 6e 0a 00                          Unknown..

00000c39 <__c.3876>:
     c39:	46 69 6c 65 0a 00                                   File..

00000c3f <__c.3874>:
     c3f:	44 49 52 0a 00                                      DIR..

00000c44 <__c.3872>:
     c44:	09 54 79 70 65 3a 20 20 00                          .Type:  .

00000c4d <__c.3870>:
     c4d:	09 53 69 7a 65 3a 20 20 25 6c 75 0a 00              .Size:  %lu..

00000c5a <__c.3749>:
     c5a:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000c66 <__c.3678>:
     c66:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     c76:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c7e <__c.3671>:
     c7e:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     c8e:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c96 <__c.3825>:
     c96:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000ca1 <__c.3821>:
     ca1:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     cb1:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     cc1:	68 0a 00                                            h..

00000cc4 <__c.3818>:
     cc4:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000cd4 <__c.3813>:
     cd4:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     ce4:	5b 25 73 5d 0a 00                                   [%s]..

00000cea <__c.3811>:
     cea:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000cf8 <__c.3809>:
     cf8:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     d08:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000d19 <__c.3796>:
     d19:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     d29:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000d33 <__c.3791>:
     d33:	25 73 0a 00                                         %s..

00000d37 <__c.3789>:
     d37:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     d47:	0a 00                                               ..

00000d49 <__c.3777>:
     d49:	0d 00                                               ..

00000d4b <__c.3775>:
     d4b:	4d 6f 72 65 2e 2e 00                                More...

00000d52 <__c.3765>:
     d52:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     d62:	2e 0a 00                                            ...

00000d65 <__c.3761>:
     d65:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000d74 <__c.3758>:
     d74:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000d81 <__c.3756>:
     d81:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000d8e <__c.3754>:
     d8e:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d9e <__c.3752>:
     d9e:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000dab <__c.3750>:
     dab:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000dbb <__c.3748>:
     dbb:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000dc7 <__c.3737>:
     dc7:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000dd2 <__c.3735>:
     dd2:	0a 00                                               ..

00000dd4 <__c.3730>:
     dd4:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000de4 <__c.3720>:
     de4:	25 73 0a 00                                         %s..

00000de8 <__c.3697>:
     de8:	70 6f 73 69 78 20 70 72 65 66 69 78 20 69 73 20     posix prefix is 
     df8:	6f 70 74 69 6f 6e 61 6c 0a 70 6f 73 69 78 20 63     optional.posix c
     e08:	61 74 20 66 69 6c 65 20 5b 2d 70 5d 0a 70 6f 73     at file [-p].pos
     e18:	69 78 20 63 64 20 64 69 72 0a 70 6f 73 69 78 20     ix cd dir.posix 
     e28:	63 6f 70 79 20 66 69 6c 65 31 20 66 69 6c 65 32     copy file1 file2
     e38:	0a 70 6f 73 69 78 20 6c 73 20 64 69 72 20 5b 2d     .posix ls dir [-
     e48:	6c 5d 0a 70 6f 73 69 78 20 6d 6b 64 69 72 20 64     l].posix mkdir d
     e58:	69 72 0a 70 6f 73 69 78 20 70 61 67 65 20 4e 4e     ir.posix page NN
     e68:	0a 70 6f 73 69 78 20 70 77 64 0a 70 6f 73 69 78     .posix pwd.posix
     e78:	20 72 6d 20 66 69 6c 65 0a 70 6f 73 69 78 20 72      rm file.posix r
     e88:	6d 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 72     mdir dir.posix r
     e98:	65 6e 61 6d 65 20 6f 6c 64 20 6e 65 77 0a 0a 00     ename old new...

00000ea8 <__c.3695>:
     ea8:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000eb4 <__c.3886>:
     eb4:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000ec2 <__c.3880>:
     ec2:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000ecf <__c.3873>:
     ecf:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000edd <__c.3864>:
     edd:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000eea <__c.3855>:
     eea:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000efb <__c.3841>:
     efb:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     f0b:	5d 0a 00                                            ]..

00000f0e <__c.3823>:
     f0e:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     f1e:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000f2b <__c.4408>:
     f2b:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f3b:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f4b:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f53 <__c.4403>:
     f53:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f63:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f6d <__c.4393>:
     f6d:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f7d:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     f8d:	28 25 64 29 5d 0a 00                                (%d)]..

00000f94 <__c.4389>:
     f94:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     fa4:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     fb4:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fc1 <__c.4386>:
     fc1:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fd1:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fda <__c.4370>:
     fda:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000fe5 <__c.4368>:
     fe5:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000ff0 <__c.4366>:
     ff0:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000ffb <__c.4362>:
     ffb:	20 20 20 20 20 00                                        .

00001001 <__c.4360>:
    1001:	25 30 32 58 20 25 63 20 00                          %02X %c .

0000100a <__c.4318>:
    100a:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    101a:	3e 0a 00                                            >..

0000101d <__c.4314>:
    101d:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    102d:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001037 <__c.4310>:
    1037:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1047:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

00001052 <__c.4307>:
    1052:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1062:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

0000106d <__c.4302>:
    106d:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    107d:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    108d:	20 3d 3d 20 30 3e 0a 00                              == 0>..

00001095 <__c.4298>:
    1095:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    10a5:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

000010af <__c.4281>:
    10af:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    10bf:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    10cf:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

000010dd <__c.4276>:
    10dd:	5b 52 45 4e 20 48 49 5d 0a 00                       [REN HI]..

000010e7 <__c.4274>:
    10e7:	5b 52 45 4e 20 4c 4f 57 5d 0a 00                    [REN LOW]..

000010f2 <__c.4269>:
    10f2:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

000010fe <__c.4261>:
    10fe:	5b 50 50 52 3a 25 30 32 58 48 2c 20 50 49 4e 3a     [PPR:%02XH, PIN:
    110e:	25 30 32 58 48 2c 20 44 44 52 3a 25 30 32 58 48     %02XH, DDR:%02XH
    111e:	5d 0a 00                                            ]..

00001121 <__c.4255>:
    1121:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1131:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000113c <__c.4253>:
    113c:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    114c:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    115c:	72 61 6e 67 65 0a 00                                range..

00001163 <__c.4248>:
    1163:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    1173:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000117e <__c.4246>:
    117e:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    118e:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    119e:	61 6e 67 65 0a 00                                   ange..

000011a4 <__c.4241>:
    11a4:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    11b4:	5d 0a 00                                            ]..

000011b7 <__c.4236>:
    11b7:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000011c8 <__c.4421>:
    11c8:	0a 00                                               ..

000011ca <__c.4413>:
    11ca:	2e 00                                               ..

000011cc <__c.4411>:
    11cc:	25 63 00                                            %c.

000011cf <__c.4409>:
    11cf:	20 7c 20 00                                          | .

000011d3 <__c.4404>:
    11d3:	20 25 30 32 58 00                                    %02X.

000011d9 <__c.4402>:
    11d9:	0a 00                                               ..

000011db <__c.4400>:
    11db:	5b 44 75 6d 70 3a 20 25 64 5d 0a 00                 [Dump: %d]..

000011e7 <__c.4389>:
    11e7:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000011f8 <__c.4384>:
    11f8:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1208:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    1218:	32 58 48 5d 0a 00                                   2XH]..

0000121e <__c.4382>:
    121e:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    122e:	0a 00                                               ..

00001230 <__c.4380>:
    1230:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001241 <__c.4375>:
    1241:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000124d <__c.4373>:
    124d:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

0000125d <__c.4371>:
    125d:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    126d:	52 5d 0a 00                                         R]..

00001271 <__c.4369>:
    1271:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    1281:	0a 00                                               ..

00001283 <__c.4367>:
    1283:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

00001294 <__c.4365>:
    1294:	5b 55 4e 54 5d 0a 00                                [UNT]..

0000129b <__c.4360>:
    129b:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012a7 <__c.4358>:
    12a7:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    12b7:	52 5d 0a 00                                         R]..

000012bb <__c.4356>:
    12bb:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000012cc <__c.4354>:
    12cc:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    12dc:	0a 00                                               ..

000012de <__c.4352>:
    12de:	0a 00                                               ..

000012e0 <__c.4350>:
    12e0:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000012e7 <__c.4345>:
    12e7:	5b 48 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [HPIB (%02XH) no
    12f7:	74 20 64 65 66 69 6e 65 64 5d 0a 00                 t defined]..

00001303 <__c.4343>:
    1303:	5b 44 43 4c 5d 0a 00                                [DCL]..

0000130a <__c.4341>:
    130a:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

00001317 <__c.4339>:
    1317:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

00001323 <__c.4337>:
    1323:	5b 53 44 43 5d 0a 00                                [SDC]..

0000132a <__c.4335>:
    132a:	5b 53 50 44 5d 0a 00                                [SPD]..

00001331 <__c.4333>:
    1331:	5b 53 50 45 5d 0a 00                                [SPE]..

00001338 <__c.4331>:
    1338:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    1348:	5d 0a 00                                            ]..

0000134b <__c.4329>:
    134b:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    135b:	5d 0a 00                                            ]..

0000135e <__c.4324>:
    135e:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    136e:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

00001378 <__c.4322>:
    1378:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1388:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001399 <__c.4295>:
    1399:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

000013aa <__c.4293>:
    13aa:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

000013b7 <__c.4291>:
    13b7:	3c 42 55 53 3e 0a 00                                <BUS>..

000013be <__c.4289>:
    13be:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000013c9 <__c.4287>:
    13c9:	3c 49 46 43 3e 0a 00                                <IFC>..

000013d0 <__c.4282>:
    13d0:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    13e0:	0a 00                                               ..

000013e2 <__c.4280>:
    13e2:	44 6f 6e 65 0a 00                                   Done..

000013e8 <__c.4276>:
    13e8:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000013f4 <__c.4274>:
    13f4:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1404:	20 65 78 69 74 0a 00                                 exit..

0000140b <__c.4272>:
    140b:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    141b:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    142b:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001436 <__c.4270>:
    1436:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1446:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

00001450 <__c.4224>:
    1450:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    1460:	6f 74 65 63 74 65 64 0a 00                          otected..

00001469 <__c.4222>:
    1469:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

0000147a <__c.4220>:
    147a:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    148a:	0a 00                                               ..

0000148c <__c.4438>:
    148c:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

00001499 <__c.4430>:
    1499:	67 70 69 62 20 70 72 65 66 69 78 20 69 73 20 6f     gpib prefix is o
    14a9:	70 74 69 6f 6e 61 6c 0a 67 70 69 62 20 61 64 64     ptional.gpib add
    14b9:	72 65 73 73 65 73 0a 67 70 69 62 20 63 6f 6e 66     resses.gpib conf
    14c9:	69 67 0a 67 70 69 62 20 64 65 62 75 67 20 4e 0a     ig.gpib debug N.
    14d9:	67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70 69     gpib elapsed.gpi
    14e9:	62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74 0a     b elapsed_reset.
    14f9:	67 70 69 62 20 69 66 63 0a 67 70 69 62 20 70 6c     gpib ifc.gpib pl
    1509:	6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78 74 0a     ot filename.txt.
    1519:	67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f 0a 67     gpib plot_echo.g
    1529:	70 69 62 20 74 61 73 6b 0a 67 70 69 62 20 74 72     pib task.gpib tr
    1539:	61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74 78 74     ace filename.txt
    1549:	20 5b 42 55 53 5d 0a 0a 0a 00                        [BUS]....

00001553 <__c.4428>:
    1553:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

0000155e <__c.4869>:
    155e:	0a 00                                               ..

00001560 <__c.4864>:
    1560:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001568 <__c.4862>:
    1568:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1578:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1588:	0a 00                                               ..

0000158a <__c.4860>:
    158a:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001592 <__c.4858>:
    1592:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    15a2:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    15b2:	0a 00                                               ..

000015b4 <__c.4845>:
    15b4:	0a 00                                               ..

000015b6 <__c.4843>:
    15b6:	45 4e 44 0a 00                                      END..

000015bb <__c.4838>:
    15bb:	0a 00                                               ..

000015bd <__c.4836>:
    15bd:	45 4e 44 0a 00                                      END..

000015c2 <__c.4834>:
    15c2:	20 20 45 4e 44 0a 00                                  END..

000015c9 <__c.4832>:
    15c9:	41 44 44 52 45 53 53 00                             ADDRESS.

000015d1 <__c.4830>:
    15d1:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

000015db <__c.4828>:
    15db:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

000015e4 <__c.4826>:
    15e4:	20 20 45 4e 44 0a 00                                  END..

000015eb <__c.4824>:
    15eb:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

000015f4 <__c.4822>:
    15f4:	43 59 4c 49 4e 44 45 52 53 00                       CYLINDERS.

000015fe <__c.4820>:
    15fe:	48 45 41 44 53 00                                   HEADS.

00001604 <__c.4818>:
    1604:	53 45 43 54 4f 52 53 5f 50 45 52 5f 54 52 41 43     SECTORS_PER_TRAC
    1614:	4b 00                                               K.

00001616 <__c.4816>:
    1616:	42 59 54 45 53 5f 50 45 52 5f 53 45 43 54 4f 52     BYTES_PER_SECTOR
	...

00001627 <__c.4814>:
    1627:	20 20 47 45 4f 4d 45 54 52 59 0a 00                   GEOMETRY..

00001633 <__c.4812>:
    1633:	20 20 45 4e 44 0a 00                                  END..

0000163a <__c.4810>:
    163a:	49 44 00                                            ID.

0000163d <__c.4808>:
    163d:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00001647 <__c.4806>:
    1647:	20 20 45 4e 44 0a 00                                  END..

0000164e <__c.4804>:
    164e:	46 49 4c 45 00                                      FILE.

00001653 <__c.4802>:
    1653:	50 50 52 00                                         PPR.

00001657 <__c.4800>:
    1657:	41 44 44 52 45 53 53 00                             ADDRESS.

0000165f <__c.4798>:
    165f:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00001669 <__c.4796>:
    1669:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1679:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001688 <__c.4794>:
    1688:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001692 <__c.4792>:
    1692:	20 20 45 4e 44 0a 00                                  END..

00001699 <__c.4790>:
    1699:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

000016a2 <__c.4788>:
    16a2:	49 4e 54 45 52 4c 45 41 56 45 00                    INTERLEAVE.

000016ad <__c.4786>:
    16ad:	4d 41 58 5f 42 4c 4f 43 4b 5f 4e 55 4d 42 45 52     MAX_BLOCK_NUMBER
	...

000016be <__c.4784>:
    16be:	4d 41 58 5f 53 45 43 54 4f 52 00                    MAX_SECTOR.

000016c9 <__c.4782>:
    16c9:	4d 41 58 5f 48 45 41 44 00                          MAX_HEAD.

000016d2 <__c.4780>:
    16d2:	4d 41 58 5f 43 59 4c 49 4e 44 45 52 00              MAX_CYLINDER.

000016df <__c.4778>:
    16df:	20 20 56 4f 4c 55 4d 45 0a 00                         VOLUME..

000016e9 <__c.4776>:
    16e9:	20 20 45 4e 44 0a 00                                  END..

000016f0 <__c.4774>:
    16f0:	52 45 4d 4f 56 41 42 4c 45 5f 56 4f 4c 55 4d 45     REMOVABLE_VOLUME
    1700:	53 00                                               S.

00001702 <__c.4772>:
    1702:	46 49 58 45 44 5f 56 4f 4c 55 4d 45 53 00           FIXED_VOLUMES.

00001710 <__c.4770>:
    1710:	4d 41 58 49 4d 55 4d 5f 49 4e 54 45 52 4c 45 41     MAXIMUM_INTERLEA
    1720:	56 45 00                                            VE.

00001723 <__c.4768>:
    1723:	41 43 43 45 53 53 5f 54 49 4d 45 00                 ACCESS_TIME.

0000172f <__c.4766>:
    172f:	4f 50 54 49 4d 41 4c 5f 52 45 54 52 59 5f 54 49     OPTIMAL_RETRY_TI
    173f:	4d 45 00                                            ME.

00001742 <__c.4764>:
    1742:	43 4f 4e 54 49 4e 4f 55 53 5f 54 52 41 4e 53 46     CONTINOUS_TRANSF
    1752:	45 52 5f 52 41 54 45 00                             ER_RATE.

0000175a <__c.4762>:
    175a:	42 4c 4f 43 4b 5f 54 49 4d 45 00                    BLOCK_TIME.

00001765 <__c.4760>:
    1765:	42 55 52 53 54 5f 53 49 5a 45 00                    BURST_SIZE.

00001770 <__c.4758>:
    1770:	42 55 46 46 45 52 45 44 5f 42 4c 4f 43 4b 53 00     BUFFERED_BLOCKS.

00001780 <__c.4756>:
    1780:	42 59 54 45 53 5f 50 45 52 5f 42 4c 4f 43 4b 00     BYTES_PER_BLOCK.

00001790 <__c.4754>:
    1790:	44 45 56 49 43 45 5f 4e 55 4d 42 45 52 00           DEVICE_NUMBER.

0000179e <__c.4752>:
    179e:	55 4e 49 54 5f 54 59 50 45 00                       UNIT_TYPE.

000017a8 <__c.4750>:
    17a8:	20 20 55 4e 49 54 0a 00                               UNIT..

000017b0 <__c.4748>:
    17b0:	20 20 45 4e 44 0a 00                                  END..

000017b7 <__c.4746>:
    17b7:	54 59 50 45 00                                      TYPE.

000017bc <__c.4744>:
    17bc:	54 52 41 4e 53 46 45 52 5f 52 41 54 45 00           TRANSFER_RATE.

000017ca <__c.4742>:
    17ca:	55 4e 49 54 53 5f 49 4e 53 54 41 4c 4c 45 44 00     UNITS_INSTALLED.

000017da <__c.4740>:
    17da:	20 20 43 4f 4e 54 52 4f 4c 4c 45 52 0a 00             CONTROLLER..

000017e8 <__c.4738>:
    17e8:	20 20 45 4e 44 0a 00                                  END..

000017ef <__c.4736>:
    17ef:	49 44 00                                            ID.

000017f2 <__c.4734>:
    17f2:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

000017fc <__c.4732>:
    17fc:	20 20 45 4e 44 0a 00                                  END..

00001803 <__c.4730>:
    1803:	46 49 4c 45 00                                      FILE.

00001808 <__c.4728>:
    1808:	50 50 52 00                                         PPR.

0000180c <__c.4726>:
    180c:	41 44 44 52 45 53 53 00                             ADDRESS.

00001814 <__c.4724>:
    1814:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

0000181e <__c.4722>:
    181e:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    182e:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

0000183d <__c.4720>:
    183d:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001846 <__c.4717>:
    1846:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1856:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001866 <__c.4709>:
    1866:	0a 00                                               ..

00001868 <__c.4704>:
    1868:	20 20 50 52 49 4e 54 45 52 5f 4d 53 41 20 3d 20       PRINTER_MSA = 
    1878:	25 30 32 58 48 0a 00                                %02XH..

0000187f <__c.4702>:
    187f:	20 20 50 52 49 4e 54 45 52 5f 4d 54 41 20 3d 20       PRINTER_MTA = 
    188f:	25 30 32 58 48 0a 00                                %02XH..

00001896 <__c.4700>:
    1896:	20 20 50 52 49 4e 54 45 52 5f 4d 4c 41 20 3d 20       PRINTER_MLA = 
    18a6:	25 30 32 58 48 0a 00                                %02XH..

000018ad <__c.4698>:
    18ad:	20 20 41 4d 49 47 4f 5f 4d 53 41 20 20 20 3d 20       AMIGO_MSA   = 
    18bd:	25 30 32 58 48 0a 00                                %02XH..

000018c4 <__c.4696>:
    18c4:	20 20 41 4d 49 47 4f 5f 4d 54 41 20 20 20 3d 20       AMIGO_MTA   = 
    18d4:	25 30 32 58 48 0a 00                                %02XH..

000018db <__c.4694>:
    18db:	20 20 41 4d 49 47 4f 5f 4d 4c 41 20 20 20 3d 20       AMIGO_MLA   = 
    18eb:	25 30 32 58 48 0a 00                                %02XH..

000018f2 <__c.4692>:
    18f2:	20 20 53 53 38 30 5f 4d 53 41 20 20 20 20 3d 20       SS80_MSA    = 
    1902:	25 30 32 58 48 0a 00                                %02XH..

00001909 <__c.4690>:
    1909:	20 20 53 53 38 30 5f 4d 54 41 20 20 20 20 3d 20       SS80_MTA    = 
    1919:	25 30 32 58 48 0a 00                                %02XH..

00001920 <__c.4688>:
    1920:	20 20 53 53 38 30 5f 4d 4c 41 20 20 20 20 3d 20       SS80_MLA    = 
    1930:	25 30 32 58 48 0a 00                                %02XH..

00001937 <__c.4685>:
    1937:	4c 69 73 74 65 6e 20 61 6e 64 20 54 61 6c 6b 20     Listen and Talk 
    1947:	41 64 64 72 65 73 73 20 53 65 74 74 69 6e 67 73     Address Settings
    1957:	0a 00                                               ..

00001959 <__c.4679>:
    1959:	20 20 20 20 25 2d 32 35 73 20 3d 20 22 25 73 22         %-25s = "%s"
    1969:	0a 00                                               ..

0000196b <__c.4668>:
    196b:	20 20 20 20 25 2d 32 35 73 20 3d 20 25 38 6c 78         %-25s = %8lx
    197b:	48 20 28 25 6c 64 29 0a 00                          H (%ld)..

00001984 <__c.4657>:
    1984:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1994:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    19a4:	2a 2a 2a 2a 2a 0a 00                                *****..

000019ab <__c.4655>:
    19ab:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    19bb:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

000019c8 <__c.4653>:
    19c8:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    19d8:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    19e8:	0a 00                                               ..

000019ea <__c.4649>:
    19ea:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    19fa:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1a0a:	0a 00                                               ..

00001a0c <__c.4646>:
    1a0c:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a1c:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1a2c:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001a3c <__c.4644>:
    1a3c:	42 59 54 45 53 20 50 45 52 20 53 45 43 54 4f 52     BYTES PER SECTOR
    1a4c:	3a 20 25 73 0a 00                                   : %s..

00001a52 <__c.4641>:
    1a52:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a62:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1a72:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001a81 <__c.4638>:
    1a81:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1a91:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1aa1:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001ab1 <__c.4636>:
    1ab1:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1ac1:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001aca <__c.4633>:
    1aca:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1ada:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1aea:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001af8 <__c.4630>:
    1af8:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b08:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1b18:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b26 <__c.4627>:
    1b26:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b36:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1b46:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001b52 <__c.4624>:
    1b52:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b62:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1b72:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1b82:	0a 00                                               ..

00001b84 <__c.4621>:
    1b84:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b94:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1ba4:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bb2 <__c.4618>:
    1bb2:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bc2:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1bd2:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001be0 <__c.4615>:
    1be0:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bf0:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1c00:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001c0d <__c.4612>:
    1c0d:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c1d:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1c2d:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001c3e <__c.4609>:
    1c3e:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c4e:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1c5e:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001c68 <__c.4605>:
    1c68:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 52 54     Unexpected START
    1c78:	20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74 20 6c      token: %s, at l
    1c88:	69 6e 65 3a 25 64 0a 00                             ine:%d..

00001c90 <__c.4603>:
    1c90:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1ca0:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001ca9 <__c.4599>:
    1ca9:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1cb9:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001cc7 <__c.4597>:
    1cc7:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001cd4 <__c.4575>:
    1cd4:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1ce4:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1cf4:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1d04:	6f 20 32 35 36 0a 00                                o 256..

00001d0b <__c.4573>:
    1d0b:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1d1b:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1d2b:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1d3b:	20 32 35 36 0a 00                                    256..

00001d41 <__c.4560>:
    1d41:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    1d51:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

00001d60 <__c.4551>:
    1d60:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 61     line:%d, %s is a
    1d70:	62 6f 76 65 20 72 61 6e 67 65 20 25 64 0a 00        bove range %d..

00001d7f <__c.4549>:
    1d7f:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 62     line:%d, %s is b
    1d8f:	65 6c 6f 77 20 72 61 6e 67 65 20 25 64 0a 00        elow range %d..

00001d9e <__c.4547>:
    1d9e:	6c 69 6e 65 3a 25 64 2c 20 6d 69 73 73 69 6e 67     line:%d, missing
    1dae:	20 76 61 6c 75 65 0a 00                              value..

00001db6 <__c.4524>:
    1db6:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1dc6:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1dd6:	0a 00                                               ..

00001dd8 <__c.4516>:
    1dd8:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1de8:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1df8:	6c 6c 0a 00                                         ll..

00001dfc <__c.4503>:
    1dfc:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e0c:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1e1c:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001e27 <__c.4501>:
    1e27:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e37:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1e47:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1e57:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001e5f <__c.4499>:
    1e5f:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e6f:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1e7f:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1e8f:	3a 25 73 0a 00                                      :%s..

00001e94 <__c.4497>:
    1e94:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1ea4:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1eb4:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1ec4:	55 4c 4c 0a 00                                      ULL..

00001ec9 <__c.4495>:
    1ec9:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1ed9:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1ee9:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1ef9:	66 20 72 61 6e 67 65 0a 00                          f range..

00001f02 <__c.4493>:
    1f02:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1f12:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1f22:	6e 67 65 0a 00                                      nge..

00001f27 <__c.3726>:
    1f27:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001f38 <__c.3724>:
    1f38:	25 73 20 25 73 0a 00                                %s %s..

00001f3f <__c.3720>:
    1f3f:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1f4f:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001f5c <__c.4532>:
    1f5c:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1f6c:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1f7c:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1f8c:	48 5d 0a 00                                         H]..

00001f90 <__c.4530>:
    1f90:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1fa0:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1fb0:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1fc0:	48 5d 0a 00                                         H]..

00001fc4 <__c.4528>:
    1fc4:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1fd4:	74 5d 0a 00                                         t]..

00001fd8 <__c.4526>:
    1fd8:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001fe7 <__c.4524>:
    1fe7:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1ff7:	74 65 5d 0a 00                                      te]..

00001ffc <__c.4522>:
    1ffc:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    200c:	61 74 65 5d 0a 00                                   ate]..

00002012 <__c.4520>:
    2012:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2022:	61 74 65 5d 0a 00                                   ate]..

00002028 <__c.4515>:
    2028:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    2038:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    2048:	5d 0a 00                                            ]..

0000204b <__c.4508>:
    204b:	5b 53 53 38 30 20 49 6e 63 72 65 6d 65 6e 74 20     [SS80 Increment 
    205b:	74 6f 20 28 25 6c 58 48 29 5d 0a 00                 to (%lXH)]..

00002067 <__c.4501>:
    2067:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002076 <__c.4499>:
    2076:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2086:	5d 0a 00                                            ]..

00002089 <__c.4492>:
    2089:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00002095 <__c.4478>:
    2095:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    20a5:	5d 0a 00                                            ]..

000020a8 <__c.4476>:
    20a8:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    20b8:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

000020c2 <__c.4469>:
    20c2:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    20d2:	48 5d 0a 00                                         H]..

000020d6 <__c.4467>:
    20d6:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    20e6:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

000020f6 <__c.4462>:
    20f6:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2106:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    2116:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    2126:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00002132 <__c.4459>:
    2132:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2142:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002152 <__c.4457>:
    2152:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    2162:	29 5d 0a 00                                         )]..

00002166 <__c.4455>:
    2166:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    2176:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    2186:	28 25 64 29 5d 0a 00                                (%d)]..

0000218d <__c.4453>:
    218d:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    219d:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

000021ab <__c.4451>:
    21ab:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    21bb:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

000021c8 <__c.4448>:
    21c8:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    21d8:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    21e8:	44 4f 5d 0a 00                                      DO]..

000021ed <__c.4445>:
    21ed:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    21fd:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002206 <__c.4443>:
    2206:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2216:	5d 0a 00                                            ]..

00002219 <__c.4434>:
    2219:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    2229:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    2239:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    2249:	43 6f 64 65 73 5d 0a 00                             Codes]..

00002251 <__c.4431>:
    2251:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2261:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002271 <__c.4429>:
    2271:	5b 53 53 38 30 20 49 6e 69 61 74 65 20 44 69 61     [SS80 Iniate Dia
    2281:	67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f 5d 0a     gnostic - TODO].
	...

00002292 <__c.4427>:
    2292:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    22a2:	61 74 75 73 5d 0a 00                                atus]..

000022a9 <__c.4425>:
    22a9:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    22b9:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

000022c2 <__c.4423>:
    22c2:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    22d2:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

000022dd <__c.4421>:
    22dd:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    22ed:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

000022fc <__c.4419>:
    22fc:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    230c:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

0000231a <__c.4417>:
    231a:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000232b <__c.4415>:
    232b:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    233b:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00002347 <__c.4413>:
    2347:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2357:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00002364 <__c.4411>:
    2364:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    2374:	2d 4f 50 5d 0a 00                                   -OP]..

0000237a <__c.4409>:
    237a:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    238a:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

0000239b <__c.4407>:
    239b:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    23ab:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    23bb:	44 4f 5d 0a 00                                      DO]..

000023c0 <__c.4405>:
    23c0:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    23d0:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

000023da <__c.4403>:
    23da:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    23ea:	2d 4f 50 5d 0a 00                                   -OP]..

000023f0 <__c.4401>:
    23f0:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000023fe <__c.4399>:
    23fe:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    240e:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

0000241a <__c.4397>:
    241a:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    242a:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00002437 <__c.4395>:
    2437:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2447:	20 57 72 69 74 65 5d 0a 00                           Write]..

00002450 <__c.4392>:
    2450:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2460:	20 52 65 61 64 5d 0a 00                              Read]..

00002468 <__c.4390>:
    2468:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    2478:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

00002481 <__c.4387>:
    2481:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    2491:	25 64 29 5d 0a 00                                   %d)]..

00002497 <__c.4385>:
    2497:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    24a7:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000024b0 <__c.4383>:
    24b0:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    24c0:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    24d0:	52 4f 52 5d 0a 00                                   ROR]..

000024d6 <__c.4374>:
    24d6:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    24e6:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

000024f0 <__c.4369>:
    24f0:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    2500:	76 61 6c 69 64 5d 0a 00                             valid]..

00002508 <__c.4364>:
    2508:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    2518:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00002527 <__c.4362>:
    2527:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    2537:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00002544 <__c.4360>:
    2544:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    2554:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    2564:	5d 0a 00                                            ]..

00002567 <__c.4358>:
    2567:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002578 <__c.4350>:
    2578:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2588:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00002593 <__c.4348>:
    2593:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    25a3:	73 5d 0a 00                                         s]..

000025a7 <__c.4338>:
    25a7:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

000025b2 <__c.4336>:
    25b2:	25 73 3a 0a 00                                      %s:..

000025b7 <__c.4311>:
    25b7:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25c7:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    25d7:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

000025e2 <__c.4309>:
    25e2:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25f2:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    2602:	49 4e 49 53 48 5d 0a 00                             INISH]..

0000260a <__c.4305>:
    260a:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    261a:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    262a:	58 48 29 5d 0a 00                                   XH)]..

00002630 <__c.4303>:
    2630:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    2640:	72 5d 0a 00                                         r]..

00002644 <__c.4299>:
    2644:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2654:	5d 0a 00                                            ]..

00002657 <__c.4297>:
    2657:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2667:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    2677:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00002680 <__c.4285>:
    2680:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2690:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    26a0:	62 79 74 65 73 5d 0a 00                             bytes]..

000026a8 <__c.4283>:
    26a8:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    26b8:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    26c8:	53 48 5d 0a 00                                      SH]..

000026cd <__c.4278>:
    26cd:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    26dd:	20 57 72 72 6f 72 5d 0a 00                           Wrror]..

000026e6 <__c.4276>:
    26e6:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    26f6:	45 72 72 6f 72 5d 0a 00                             Error]..

000026fe <__c.4274>:
    26fe:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    270e:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

0000271c <__c.4272>:
    271c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    272c:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    273c:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002744 <__c.4255>:
    2744:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2754:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

00002760 <__c.4239>:
    2760:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    2770:	5d 0a 00                                            ]..

00002773 <__c.4214>:
    2773:	5b 53 53 38 30 20 54 65 73 74 20 44 6f 6e 65 5d     [SS80 Test Done]
    2783:	0a 00                                               ..

00002785 <__c.4212>:
    2785:	5b 53 53 38 30 20 54 65 73 74 5d 0a 00              [SS80 Test]..

00002792 <__c.4369>:
    2792:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    27a2:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    27b2:	64 64 72 65 73 73 5d 0a 00                          ddress]..

000027bb <__c.4366>:
    27bb:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    27cb:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    27db:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000027e6 <__c.4363>:
    27e6:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    27f6:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2806:	66 66 65 72 65 64 5d 0a 00                          ffered]..

0000280f <__c.4358>:
    280f:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    281f:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

0000282f <__c.4355>:
    282f:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    283f:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

0000284b <__c.4352>:
    284b:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    285b:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    286b:	0a 00                                               ..

0000286d <__c.4349>:
    286d:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    287d:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

0000288c <__c.4346>:
    288c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    289c:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

000028ad <__c.4343>:
    28ad:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    28bd:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

000028cd <__c.4339>:
    28cd:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    28dd:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    28ed:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    28fd:	0a 00                                               ..

000028ff <__c.4334>:
    28ff:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

0000290f <__c.4331>:
    290f:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    291f:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

0000292e <__c.4329>:
    292e:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    293e:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    294e:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002959 <__c.4327>:
    2959:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2969:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002979 <__c.4325>:
    2979:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2989:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2999:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000029a2 <__c.4323>:
    29a2:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    29b2:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

000029be <__c.4321>:
    29be:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    29ce:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    29de:	0a 00                                               ..

000029e0 <__c.4319>:
    29e0:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

000029f0 <__c.4316>:
    29f0:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2a00:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002a11 <__c.4314>:
    2a11:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2a21:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2a31:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002a3a <__c.4312>:
    2a3a:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2a4a:	36 5d 0a 00                                         6]..

00002a4e <__c.4309>:
    2a4e:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2a5e:	35 5d 0a 00                                         5]..

00002a62 <__c.4306>:
    2a62:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2a72:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002a82 <__c.4303>:
    2a82:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2a92:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2aa2:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002ab1 <__c.4301>:
    2ab1:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2ac1:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002ad2 <__c.4299>:
    2ad2:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2ae2:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002af3 <__c.4297>:
    2af3:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2b03:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2b13:	0a 00                                               ..

00002b15 <__c.4295>:
    2b15:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2b25:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2b35:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2b45:	0a 00                                               ..

00002b47 <__c.4283>:
    2b47:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2b57:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2b67:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2b77:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2b87:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002b98 <__c.4281>:
    2b98:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2ba8:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2bb8:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2bc8:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2bd8:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002be8 <__c.4279>:
    2be8:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2bf8:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c08:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2c18:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2c28:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002c38 <__c.4277>:
    2c38:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2c48:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c58:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2c68:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2c78:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002c88 <__c.4272>:
    2c88:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2c98:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2ca8:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2cb8:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2cc8:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2cd8:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2ce8:	58 48 5d 0a 00                                      XH]..

00002ced <__c.4270>:
    2ced:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2cfd:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d0d:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2d1d:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2d2d:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2d3d:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2d4d:	30 32 58 48 5d 0a 00                                02XH]..

00002d54 <__c.4268>:
    2d54:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2d64:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d74:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2d84:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2d94:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2da4:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2db4:	30 32 58 48 5d 0a 00                                02XH]..

00002dbb <__c.4266>:
    2dbb:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2dcb:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2ddb:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2deb:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2dfb:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2e0b:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2e1b:	30 32 58 48 5d 0a 00                                02XH]..

00002e22 <__c.4259>:
    2e22:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002e31 <__c.4255>:
    2e31:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2e41:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002e4b <__c.4253>:
    2e4b:	5b 41 4d 49 47 4f 20 57 61 6b 65 75 70 5d 0a 00     [AMIGO Wakeup]..

00002e5b <__c.4246>:
    2e5b:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002e68 <__c.4244>:
    2e68:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2e78:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002e82 <__c.4237>:
    2e82:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2e92:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002ea1 <__c.4230>:
    2ea1:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2eb1:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002ebb <__c.4223>:
    2ebb:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2ecb:	6e 65 5d 0a 00                                      ne]..

00002ed0 <__c.4219>:
    2ed0:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002ee0 <__c.4178>:
    2ee0:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2ef0:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2f00:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002f0b <__c.4208>:
    2f0b:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2f1b:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2f2b:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002f33 <__c.4185>:
    2f33:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2f43:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002f4c <__c.4171>:
    2f4c:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2f5c:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002f66 <__c.4169>:
    2f66:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2f76:	75 73 5d 0a 00                                      us]..

00002f7b <__c.4163>:
    2f7b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2f8b:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002f95 <__c.4161>:
    2f95:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2fa5:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002fb3 <__c.4155>:
    2fb3:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2fc3:	74 61 74 75 73 5d 0a 00                             tatus]..

00002fcb <__c.4177>:
    2fcb:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 62 79     received:[%d] by
    2fdb:	74 65 73 0a 00                                      tes..

00002fe0 <__c.4175>:
    2fe0:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    2ff0:	0a 00                                               ..

00002ff2 <__c.4173>:
    2ff2:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    3002:	0a 00                                               ..

00003004 <__c.4168>:
    3004:	70 72 69 6e 74 65 72 20 6e 6f 74 20 64 65 66 69     printer not defi
    3014:	6e 65 64 0a 00                                      ned..

00003019 <__c.4159>:
    3019:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    3029:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00003033 <__c.4157>:
    3033:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    3043:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

0000304f <__c.4152>:
    304f:	25 30 38 6c 64 0d 00                                %08ld..

00003056 <__c.4146>:
    3056:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    3066:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00003077 <__c.4140>:
    3077:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00003085 <__c.4138>:
    3085:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    3095:	69 74 65 0a 00                                      ite..

0000309a <__c.4132>:
    309a:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000030a6 <__c.4130>:
    30a6:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    30b6:	6f 3a 25 73 0a 00                                   o:%s..

000030bc <__c.4128>:
    30bc:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    30cc:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    30dc:	74 00                                               t.

000030de <__c.4796>:
    30de:	09 46 6f 72 6d 61 74 69 6e 67 3a 20 77 72 6f 74     .Formating: wrot
    30ee:	65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00        e %ld sectors..

000030fd <__c.4794>:
    30fd:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    310d:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

0000311d <__c.4792>:
    311d:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    312d:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    313d:	30 0a 00                                            0..

00003140 <__c.4790>:
    3140:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3150:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    3160:	70 74 79 0a 00                                      pty..

00003165 <__c.4788>:
    3165:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3175:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    3185:	73 20 65 6d 70 74 79 0a 00                          s empty..

0000318e <__c.4775>:
    318e:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    319e:	20 25 31 30 73 0a 00                                 %10s..

000031a5 <__c.4773>:
    31a5:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    31b5:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    31c5:	74 20 66 6f 75 6e 64 0a 00                          t found..

000031ce <__c.4771>:
    31ce:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    31de:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    31ee:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    31fe:	74 65 72 73 0a 00                                   ters..

00003204 <__c.4769>:
    3204:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3214:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3224:	65 6d 70 74 79 0a 00                                empty..

0000322b <__c.4767>:
    322b:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    323b:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    324b:	65 6d 70 74 79 0a 00                                empty..

00003252 <__c.4765>:
    3252:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3262:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    3272:	20 65 6d 70 74 79 0a 00                              empty..

0000327a <__c.4756>:
    327a:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00003289 <__c.4754>:
    3289:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    3299:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    32a9:	20 66 6f 75 6e 64 0a 00                              found..

000032b1 <__c.4752>:
    32b1:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    32c1:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000032d0 <__c.4750>:
    32d0:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    32e0:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

000032f0 <__c.4748>:
    32f0:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3300:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    3310:	70 74 79 0a 00                                      pty..

00003315 <__c.4740>:
    3315:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003323 <__c.4735>:
    3323:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003331 <__c.4733>:
    3331:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3341:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3351:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003361 <__c.4731>:
    3361:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3371:	73 0a 00                                            s..

00003374 <__c.4729>:
    3374:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3384:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3394:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000033a3 <__c.4727>:
    33a3:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    33b3:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000033bf <__c.4725>:
    33bf:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    33cf:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000033da <__c.4723>:
    33da:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    33ea:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

000033fa <__c.4706>:
    33fa:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003408 <__c.4701>:
    3408:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003416 <__c.4699>:
    3416:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3426:	73 0a 00                                            s..

00003429 <__c.4697>:
    3429:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3439:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003441 <__c.4680>:
    3441:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000344f <__c.4677>:
    344f:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    345f:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    346f:	20 65 72 72 6f 72 0a 00                              error..

00003477 <__c.4669>:
    3477:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003485 <__c.4667>:
    3485:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3495:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    34a5:	20 65 72 72 6f 72 0a 00                              error..

000034ad <__c.4664>:
    34ad:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    34bd:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    34cd:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    34dd:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    34ed:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    34fd:	30 32 58 48 0a 00                                   02XH..

00003503 <__c.4662>:
    3503:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3513:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3523:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3533:	20 25 64 0a 00                                       %d..

00003538 <__c.4658>:
    3538:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003548 <__c.4656>:
    3548:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3558:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3568:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3578:	30 78 45 30 31 33 0a 00                             0xE013..

00003580 <__c.4654>:
    3580:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    3590:	6e 64 3a 25 73 0a 00                                nd:%s..

00003597 <__c.4652>:
    3597:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    35a7:	75 6e 64 3a 25 73 0a 00                             und:%s..

000035af <__c.4628>:
    35af:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000035bd <__c.4626>:
    35bd:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    35cd:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000035d6 <__c.4624>:
    35d6:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    35e6:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000035ef <__c.4622>:
    35ef:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    35ff:	20 20 25 34 64 0a 00                                  %4d..

00003606 <__c.4620>:
    3606:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3616:	20 20 20 25 73 0a 00                                   %s..

0000361d <__c.4618>:
    361d:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    362d:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    363d:	77 72 69 74 65 0a 00                                write..

00003644 <__c.4616>:
    3644:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3654:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3664:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003674 <__c.4614>:
    3674:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3684:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3694:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000036a3 <__c.4612>:
    36a3:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    36b3:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    36c3:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000036d3 <__c.4610>:
    36d3:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    36e3:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    36f3:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003702 <__c.4608>:
    3702:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3712:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3722:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003730 <__c.4606>:
    3730:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3740:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3750:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    3760:	79 0a 00                                            y..

00003763 <__c.4592>:
    3763:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003771 <__c.4590>:
    3771:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000377f <__c.4585>:
    377f:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000378d <__c.4568>:
    378d:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    379d:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    37ad:	25 64 0a 00                                         %d..

000037b1 <__c.4551>:
    37b1:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    37c1:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    37d1:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    37e1:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

000037ea <__c.4537>:
    37ea:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    37fa:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    380a:	62 69 67 0a 00                                      big..

0000380f <__c.4535>:
    380f:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    381f:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    382f:	63 74 65 72 73 0a 00                                cters..

00003836 <__c.4528>:
    3836:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3846:	73 0a 00                                            s..

00003849 <__c.4526>:
    3849:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3859:	73 0a 00                                            s..

0000385c <__c.4524>:
    385c:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    386c:	73 0a 00                                            s..

0000386f <__c.4522>:
    386f:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

00003880 <__c.4520>:
    3880:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

0000388d <__c.4518>:
    388d:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

00003899 <__c.4516>:
    3899:	0a 00                                               ..

0000389b <__c.4513>:
    389b:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    38ab:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    38bb:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000038cb <__c.4511>:
    38cb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    38db:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    38eb:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    38fb:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    390b:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003917 <__c.4508>:
    3917:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3927:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3937:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3947:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003957 <__c.4506>:
    3957:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3967:	3a 5b 25 73 5d 0a 00                                :[%s]..

0000396e <__c.4496>:
    396e:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    397e:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    398e:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    399e:	64 0a 00                                            d..

000039a1 <__c.4494>:
    39a1:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    39b1:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    39c1:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    39d1:	64 0a 00                                            d..

000039d4 <__c.4492>:
    39d4:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    39e4:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    39f4:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3a04:	69 6c 65 64 0a 00                                   iled..

00003a0a <__c.4490>:
    3a0a:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3a1a:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3a2a:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3a3a:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003a49 <__c.4477>:
    3a49:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3a59:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3a69:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3a79:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3a89:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003a9a <__c.4474>:
    3a9a:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3aaa:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3aba:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003ac3 <__c.4472>:
    3ac3:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3ad3:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3ae3:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3af3:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003afb <__c.4460>:
    3afb:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3b0b:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3b1b:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3b2b:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3b3b:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003b48 <__c.4435>:
    3b48:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3b58:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003b68 <__c.4426>:
    3b68:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3b78:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3b88:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3b98:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003ba2 <__c.4407>:
    3ba2:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003baf <__c.4402>:
    3baf:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003bbc <__c.4397>:
    3bbc:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003bc9 <__c.4389>:
    3bc9:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003bd6 <__c.4387>:
    3bd6:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3be6:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3bf6:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3c06:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3c16:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3c26:	25 6c 64 0a 00                                      %ld..

00003c2b <__c.4371>:
    3c2b:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c3b:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3c4b:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003c57 <__c.4369>:
    3c57:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c67:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3c77:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003c82 <__c.4367>:
    3c82:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c92:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3ca2:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3cb2:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3cc2:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003ccd <__c.4365>:
    3ccd:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3cdd:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3ced:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3cfd:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3d0d:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003d18 <__c.4363>:
    3d18:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d28:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3d38:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003d46 <__c.4361>:
    3d46:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d56:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3d66:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3d76:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003d87 <__c.4359>:
    3d87:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d97:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3da7:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3db7:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3dc7:	58 68 0a 00                                         Xh..

00003dcb <__c.4357>:
    3dcb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ddb:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003dec <__c.4351>:
    3dec:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3dfc:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3e0c:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003e18 <__c.4349>:
    3e18:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e28:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3e38:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003e47 <__c.4347>:
    3e47:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e57:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3e67:	25 6c 64 0a 00                                      %ld..

00003e6c <__c.4345>:
    3e6c:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e7c:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3e8c:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3e9c:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003ea5 <__c.4343>:
    3ea5:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3eb5:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3ec5:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3ed5:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003ede <__c.4341>:
    3ede:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3eee:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003ef6 <__c.4339>:
    3ef6:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f06:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3f16:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3f26:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003f2f <__c.4337>:
    3f2f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f3f:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003f4e <__c.4330>:
    3f4e:	0a 00                                               ..

00003f50 <__c.4328>:
    3f50:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3f60:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f6a <__c.4326>:
    3f6a:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3f7a:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003f86 <__c.4324>:
    3f86:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3f96:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fa3 <__c.4322>:
    3fa3:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3fb3:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003fc0 <__c.4320>:
    3fc0:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3fd0:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fdd <__c.4318>:
    3fdd:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3fed:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003ff9 <__c.4316>:
    3ff9:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    4009:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004015 <__c.4314>:
    4015:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    4025:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000402f <__c.4312>:
    402f:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    403f:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004049 <__c.4310>:
    4049:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    4059:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004065 <__c.4308>:
    4065:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    4075:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004081 <__c.4306>:
    4081:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    4091:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000409e <__c.4304>:
    409e:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    40ae:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040bb <__c.4302>:
    40bb:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    40cb:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000040d7 <__c.4300>:
    40d7:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    40e7:	20 20 20 20 20 20 25 73 0a 00                             %s..

000040f1 <__c.4298>:
    40f1:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    4101:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000410e <__c.4296>:
    410e:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    411e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000412b <__c.4294>:
    412b:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    413b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004148 <__c.4292>:
    4148:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4158:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004165 <__c.4290>:
    4165:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    4175:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004182 <__c.4288>:
    4182:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    4192:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000419f <__c.4286>:
    419f:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    41af:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041bc <__c.4284>:
    41bc:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    41cc:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041d9 <__c.4282>:
    41d9:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    41e9:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041f3 <__c.4280>:
    41f3:	0a 25 73 0a 00                                      .%s..

000041f8 <__c.4157>:
    41f8:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4208:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4218:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4228:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004235 <__c.4148>:
    4235:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    4245:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4255:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4265:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00004271 <__c.4139>:
    4271:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    4281:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

00004292 <__c.4132>:
    4292:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    42a2:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000042ab <__c.4126>:
    42ab:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    42bb:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    42cb:	25 73 5d 0a 00                                      %s]..

000042d0 <__c.4114>:
    42d0:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    42e0:	6f 69 6e 74 65 72 0a 00                             ointer..

000042e8 <__c.4109>:
    42e8:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    42f8:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4308:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004311 <__c.4103>:
    4311:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    4321:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004332 <__c.4090>:
    4332:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    4342:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    4352:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4362:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    4372:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    4382:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    4392:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    43a2:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    43b2:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    43c2:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    43d2:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    43e2:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    43f2:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4402:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4412:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    4422:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4432:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    4442:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    4452:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    4462:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    4472:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    4482:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    4492:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    44a2:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    44b2:	6d 65 0a 55 73 65 20 2d 64 20 61 66 74 65 72 20     me.Use -d after 
    44c2:	66 69 72 73 74 20 6b 65 79 77 6f 72 64 20 27 6c     first keyword 'l
    44d2:	69 66 27 20 61 62 6f 76 65 20 66 6f 72 20 4c 49     if' above for LI
    44e2:	46 20 66 69 6c 65 73 79 73 74 65 6d 20 64 65 62     F filesystem deb
    44f2:	75 67 67 69 6e 67 0a 0a 00                          ugging...

000044fb <__c.4088>:
    44fb:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

00004505 <__c.4554>:
    4505:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4515:	53 4b 0a 00                                         SK..

00004519 <__c.4552>:
    4519:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4529:	30 34 78 48 0a 00                                   04xH..

0000452f <__c.4550>:
    452f:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    453f:	64 6f 6e 65 0a 00                                   done..

00004545 <__c.4548>:
    4545:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    4555:	6f 6e 65 0a 00                                      one..

0000455a <__c.4546>:
    455a:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    456a:	61 6c 69 7a 65 64 0a 00                             alized..

00004572 <__c.4544>:
    4572:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    4582:	0a 00                                               ..

00004584 <__c.4542>:
    4584:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    4594:	7a 65 64 0a 00                                      zed..

00004599 <__c.4540>:
    4599:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    45a9:	69 7a 65 64 0a 00                                   ized..

000045af <__c.4538>:
    45af:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

000045c0 <__c.4536>:
    45c0:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    45d0:	20 73 74 61 72 74 0a 00                              start..

000045d8 <__c.4534>:
    45d8:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    45e8:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000045f2 <__c.4532>:
    45f2:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4602:	7a 61 74 69 6f 6e 20 44 6f 6e 65 0a 00              zation Done..

0000460f <__c.4530>:
    460f:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    461f:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

0000462d <__c.4528>:
    462d:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    463d:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

0000464a <__c.4526>:
    464a:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004659 <__c.4524>:
    4659:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     initializing RTC
    4669:	0a 00                                               ..

0000466b <__c.4522>:
    466b:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    467b:	20 62 75 73 0a 00                                    bus..

00004681 <__c.4520>:
    4681:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    4691:	20 62 75 73 0a 00                                    bus..

00004697 <__c.4518>:
    4697:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    46a7:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000046b1 <__c.4516>:
    46b1:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    46c1:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000046cb <__c.4514>:
    46cb:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    46db:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    46eb:	35 64 69 73 6b 0a 00                                5disk..

000046f2 <__c.4512>:
    46f2:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004702 <__c.4510>:
    4702:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4712:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000471f <__c.4508>:
    471f:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    472f:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000473e <__c.4506>:
    473e:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    474e:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    475e:	3a 20 25 6c 64 0a 00                                : %ld..

00004765 <__c.4504>:
    4765:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004776 <__c.4502>:
    4776:	53 74 61 72 74 0a 00                                Start..

0000477d <__c.4494>:
    477d:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

00004789 <__c.4492>:
    4789:	0a 3e 00                                            .>.

0000478c <__c.4482>:
    478c:	64 65 6c 61 79 5f 74 65 73 74 73 0a 68 65 6c 70     delay_tests.help
    479c:	0a 6d 65 6d 0a 73 65 74 64 61 74 65 0a 74 69 6d     .mem.setdate.tim
    47ac:	65 0a 0a 00                                         e...

000047b0 <__c.4478>:
    47b0:	4d 79 20 64 65 6c 61 79 73 0a 00                    My delays..

000047bb <__c.4476>:
    47bb:	53 79 73 74 65 6d 20 64 65 6c 61 79 73 0a 00        System delays..

000047ca <__c.4472>:
    47ca:	0a 00                                               ..

000047cc <__c.4470>:
    47cc:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    47dc:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000047e6 <__c.4468>:
    47e6:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    47f6:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004800 <__c.4466>:
    4800:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4810:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4820:	35 64 69 73 6b 0a 00                                5disk..

00004827 <__c.4464>:
    4827:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004837 <__c.4462>:
    4837:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4847:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004854 <__c.4460>:
    4854:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4864:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004873 <__c.4458>:
    4873:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4883:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4893:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

000048a4 <__ctors_end>:
    48a4:	11 24       	eor	r1, r1
    48a6:	1f be       	out	0x3f, r1	; 63
    48a8:	cf ef       	ldi	r28, 0xFF	; 255
    48aa:	d0 e4       	ldi	r29, 0x40	; 64
    48ac:	de bf       	out	0x3e, r29	; 62
    48ae:	cd bf       	out	0x3d, r28	; 61

000048b0 <__do_copy_data>:
    48b0:	17 e1       	ldi	r17, 0x17	; 23
    48b2:	a0 e0       	ldi	r26, 0x00	; 0
    48b4:	b1 e0       	ldi	r27, 0x01	; 1
    48b6:	e8 ed       	ldi	r30, 0xD8	; 216
    48b8:	f4 ed       	ldi	r31, 0xD4	; 212
    48ba:	01 e0       	ldi	r16, 0x01	; 1
    48bc:	0b bf       	out	0x3b, r16	; 59
    48be:	02 c0       	rjmp	.+4      	; 0x48c4 <__do_copy_data+0x14>
    48c0:	07 90       	elpm	r0, Z+
    48c2:	0d 92       	st	X+, r0
    48c4:	a6 34       	cpi	r26, 0x46	; 70
    48c6:	b1 07       	cpc	r27, r17
    48c8:	d9 f7       	brne	.-10     	; 0x48c0 <__do_copy_data+0x10>

000048ca <__do_clear_bss>:
    48ca:	20 e2       	ldi	r18, 0x20	; 32
    48cc:	a6 e4       	ldi	r26, 0x46	; 70
    48ce:	b7 e1       	ldi	r27, 0x17	; 23
    48d0:	01 c0       	rjmp	.+2      	; 0x48d4 <.do_clear_bss_start>

000048d2 <.do_clear_bss_loop>:
    48d2:	1d 92       	st	X+, r1

000048d4 <.do_clear_bss_start>:
    48d4:	a8 3a       	cpi	r26, 0xA8	; 168
    48d6:	b2 07       	cpc	r27, r18
    48d8:	e1 f7       	brne	.-8      	; 0x48d2 <.do_clear_bss_loop>
    48da:	0e 94 cd e2 	call	0x1c59a	; 0x1c59a <main>
    48de:	0c 94 6a ea 	jmp	0x1d4d4	; 0x1d4d4 <_exit>

000048e2 <__bad_interrupt>:
    48e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000048e6 <vfprintf>:
    48e6:	2f 92       	push	r2
    48e8:	3f 92       	push	r3
    48ea:	4f 92       	push	r4
    48ec:	5f 92       	push	r5
    48ee:	6f 92       	push	r6
    48f0:	7f 92       	push	r7
    48f2:	8f 92       	push	r8
    48f4:	9f 92       	push	r9
    48f6:	af 92       	push	r10
    48f8:	bf 92       	push	r11
    48fa:	cf 92       	push	r12
    48fc:	df 92       	push	r13
    48fe:	ef 92       	push	r14
    4900:	ff 92       	push	r15
    4902:	0f 93       	push	r16
    4904:	1f 93       	push	r17
    4906:	cf 93       	push	r28
    4908:	df 93       	push	r29
    490a:	cd b7       	in	r28, 0x3d	; 61
    490c:	de b7       	in	r29, 0x3e	; 62
    490e:	60 97       	sbiw	r28, 0x10	; 16
    4910:	0f b6       	in	r0, 0x3f	; 63
    4912:	f8 94       	cli
    4914:	de bf       	out	0x3e, r29	; 62
    4916:	0f be       	out	0x3f, r0	; 63
    4918:	cd bf       	out	0x3d, r28	; 61
    491a:	7c 01       	movw	r14, r24
    491c:	1b 01       	movw	r2, r22
    491e:	6a 01       	movw	r12, r20
    4920:	fc 01       	movw	r30, r24
    4922:	17 82       	std	Z+7, r1	; 0x07
    4924:	16 82       	std	Z+6, r1	; 0x06
    4926:	83 81       	ldd	r24, Z+3	; 0x03
    4928:	81 ff       	sbrs	r24, 1
    492a:	44 c3       	rjmp	.+1672   	; 0x4fb4 <vfprintf+0x6ce>
    492c:	9e 01       	movw	r18, r28
    492e:	2f 5f       	subi	r18, 0xFF	; 255
    4930:	3f 4f       	sbci	r19, 0xFF	; 255
    4932:	39 01       	movw	r6, r18
    4934:	f7 01       	movw	r30, r14
    4936:	93 81       	ldd	r25, Z+3	; 0x03
    4938:	f1 01       	movw	r30, r2
    493a:	93 fd       	sbrc	r25, 3
    493c:	85 91       	lpm	r24, Z+
    493e:	93 ff       	sbrs	r25, 3
    4940:	81 91       	ld	r24, Z+
    4942:	1f 01       	movw	r2, r30
    4944:	88 23       	and	r24, r24
    4946:	09 f4       	brne	.+2      	; 0x494a <vfprintf+0x64>
    4948:	31 c3       	rjmp	.+1634   	; 0x4fac <vfprintf+0x6c6>
    494a:	85 32       	cpi	r24, 0x25	; 37
    494c:	39 f4       	brne	.+14     	; 0x495c <vfprintf+0x76>
    494e:	93 fd       	sbrc	r25, 3
    4950:	85 91       	lpm	r24, Z+
    4952:	93 ff       	sbrs	r25, 3
    4954:	81 91       	ld	r24, Z+
    4956:	1f 01       	movw	r2, r30
    4958:	85 32       	cpi	r24, 0x25	; 37
    495a:	39 f4       	brne	.+14     	; 0x496a <vfprintf+0x84>
    495c:	b7 01       	movw	r22, r14
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4964:	56 01       	movw	r10, r12
    4966:	65 01       	movw	r12, r10
    4968:	e5 cf       	rjmp	.-54     	; 0x4934 <vfprintf+0x4e>
    496a:	10 e0       	ldi	r17, 0x00	; 0
    496c:	51 2c       	mov	r5, r1
    496e:	91 2c       	mov	r9, r1
    4970:	ff e1       	ldi	r31, 0x1F	; 31
    4972:	f9 15       	cp	r31, r9
    4974:	d8 f0       	brcs	.+54     	; 0x49ac <vfprintf+0xc6>
    4976:	8b 32       	cpi	r24, 0x2B	; 43
    4978:	79 f0       	breq	.+30     	; 0x4998 <vfprintf+0xb2>
    497a:	38 f4       	brcc	.+14     	; 0x498a <vfprintf+0xa4>
    497c:	80 32       	cpi	r24, 0x20	; 32
    497e:	79 f0       	breq	.+30     	; 0x499e <vfprintf+0xb8>
    4980:	83 32       	cpi	r24, 0x23	; 35
    4982:	a1 f4       	brne	.+40     	; 0x49ac <vfprintf+0xc6>
    4984:	f9 2d       	mov	r31, r9
    4986:	f0 61       	ori	r31, 0x10	; 16
    4988:	2e c0       	rjmp	.+92     	; 0x49e6 <vfprintf+0x100>
    498a:	8d 32       	cpi	r24, 0x2D	; 45
    498c:	61 f0       	breq	.+24     	; 0x49a6 <vfprintf+0xc0>
    498e:	80 33       	cpi	r24, 0x30	; 48
    4990:	69 f4       	brne	.+26     	; 0x49ac <vfprintf+0xc6>
    4992:	29 2d       	mov	r18, r9
    4994:	21 60       	ori	r18, 0x01	; 1
    4996:	2d c0       	rjmp	.+90     	; 0x49f2 <vfprintf+0x10c>
    4998:	39 2d       	mov	r19, r9
    499a:	32 60       	ori	r19, 0x02	; 2
    499c:	93 2e       	mov	r9, r19
    499e:	89 2d       	mov	r24, r9
    49a0:	84 60       	ori	r24, 0x04	; 4
    49a2:	98 2e       	mov	r9, r24
    49a4:	2a c0       	rjmp	.+84     	; 0x49fa <vfprintf+0x114>
    49a6:	e9 2d       	mov	r30, r9
    49a8:	e8 60       	ori	r30, 0x08	; 8
    49aa:	15 c0       	rjmp	.+42     	; 0x49d6 <vfprintf+0xf0>
    49ac:	97 fc       	sbrc	r9, 7
    49ae:	2d c0       	rjmp	.+90     	; 0x4a0a <vfprintf+0x124>
    49b0:	20 ed       	ldi	r18, 0xD0	; 208
    49b2:	28 0f       	add	r18, r24
    49b4:	2a 30       	cpi	r18, 0x0A	; 10
    49b6:	88 f4       	brcc	.+34     	; 0x49da <vfprintf+0xf4>
    49b8:	96 fe       	sbrs	r9, 6
    49ba:	06 c0       	rjmp	.+12     	; 0x49c8 <vfprintf+0xe2>
    49bc:	3a e0       	ldi	r19, 0x0A	; 10
    49be:	13 9f       	mul	r17, r19
    49c0:	20 0d       	add	r18, r0
    49c2:	11 24       	eor	r1, r1
    49c4:	12 2f       	mov	r17, r18
    49c6:	19 c0       	rjmp	.+50     	; 0x49fa <vfprintf+0x114>
    49c8:	8a e0       	ldi	r24, 0x0A	; 10
    49ca:	58 9e       	mul	r5, r24
    49cc:	20 0d       	add	r18, r0
    49ce:	11 24       	eor	r1, r1
    49d0:	52 2e       	mov	r5, r18
    49d2:	e9 2d       	mov	r30, r9
    49d4:	e0 62       	ori	r30, 0x20	; 32
    49d6:	9e 2e       	mov	r9, r30
    49d8:	10 c0       	rjmp	.+32     	; 0x49fa <vfprintf+0x114>
    49da:	8e 32       	cpi	r24, 0x2E	; 46
    49dc:	31 f4       	brne	.+12     	; 0x49ea <vfprintf+0x104>
    49de:	96 fc       	sbrc	r9, 6
    49e0:	e5 c2       	rjmp	.+1482   	; 0x4fac <vfprintf+0x6c6>
    49e2:	f9 2d       	mov	r31, r9
    49e4:	f0 64       	ori	r31, 0x40	; 64
    49e6:	9f 2e       	mov	r9, r31
    49e8:	08 c0       	rjmp	.+16     	; 0x49fa <vfprintf+0x114>
    49ea:	8c 36       	cpi	r24, 0x6C	; 108
    49ec:	21 f4       	brne	.+8      	; 0x49f6 <vfprintf+0x110>
    49ee:	29 2d       	mov	r18, r9
    49f0:	20 68       	ori	r18, 0x80	; 128
    49f2:	92 2e       	mov	r9, r18
    49f4:	02 c0       	rjmp	.+4      	; 0x49fa <vfprintf+0x114>
    49f6:	88 36       	cpi	r24, 0x68	; 104
    49f8:	41 f4       	brne	.+16     	; 0x4a0a <vfprintf+0x124>
    49fa:	f1 01       	movw	r30, r2
    49fc:	93 fd       	sbrc	r25, 3
    49fe:	85 91       	lpm	r24, Z+
    4a00:	93 ff       	sbrs	r25, 3
    4a02:	81 91       	ld	r24, Z+
    4a04:	1f 01       	movw	r2, r30
    4a06:	81 11       	cpse	r24, r1
    4a08:	b3 cf       	rjmp	.-154    	; 0x4970 <vfprintf+0x8a>
    4a0a:	9b eb       	ldi	r25, 0xBB	; 187
    4a0c:	98 0f       	add	r25, r24
    4a0e:	93 30       	cpi	r25, 0x03	; 3
    4a10:	20 f4       	brcc	.+8      	; 0x4a1a <vfprintf+0x134>
    4a12:	99 2d       	mov	r25, r9
    4a14:	90 61       	ori	r25, 0x10	; 16
    4a16:	80 5e       	subi	r24, 0xE0	; 224
    4a18:	07 c0       	rjmp	.+14     	; 0x4a28 <vfprintf+0x142>
    4a1a:	9b e9       	ldi	r25, 0x9B	; 155
    4a1c:	98 0f       	add	r25, r24
    4a1e:	93 30       	cpi	r25, 0x03	; 3
    4a20:	08 f0       	brcs	.+2      	; 0x4a24 <vfprintf+0x13e>
    4a22:	66 c1       	rjmp	.+716    	; 0x4cf0 <vfprintf+0x40a>
    4a24:	99 2d       	mov	r25, r9
    4a26:	9f 7e       	andi	r25, 0xEF	; 239
    4a28:	96 ff       	sbrs	r25, 6
    4a2a:	16 e0       	ldi	r17, 0x06	; 6
    4a2c:	9f 73       	andi	r25, 0x3F	; 63
    4a2e:	99 2e       	mov	r9, r25
    4a30:	85 36       	cpi	r24, 0x65	; 101
    4a32:	19 f4       	brne	.+6      	; 0x4a3a <vfprintf+0x154>
    4a34:	90 64       	ori	r25, 0x40	; 64
    4a36:	99 2e       	mov	r9, r25
    4a38:	08 c0       	rjmp	.+16     	; 0x4a4a <vfprintf+0x164>
    4a3a:	86 36       	cpi	r24, 0x66	; 102
    4a3c:	21 f4       	brne	.+8      	; 0x4a46 <vfprintf+0x160>
    4a3e:	39 2f       	mov	r19, r25
    4a40:	30 68       	ori	r19, 0x80	; 128
    4a42:	93 2e       	mov	r9, r19
    4a44:	02 c0       	rjmp	.+4      	; 0x4a4a <vfprintf+0x164>
    4a46:	11 11       	cpse	r17, r1
    4a48:	11 50       	subi	r17, 0x01	; 1
    4a4a:	97 fe       	sbrs	r9, 7
    4a4c:	07 c0       	rjmp	.+14     	; 0x4a5c <vfprintf+0x176>
    4a4e:	1c 33       	cpi	r17, 0x3C	; 60
    4a50:	50 f4       	brcc	.+20     	; 0x4a66 <vfprintf+0x180>
    4a52:	44 24       	eor	r4, r4
    4a54:	43 94       	inc	r4
    4a56:	41 0e       	add	r4, r17
    4a58:	27 e0       	ldi	r18, 0x07	; 7
    4a5a:	0b c0       	rjmp	.+22     	; 0x4a72 <vfprintf+0x18c>
    4a5c:	18 30       	cpi	r17, 0x08	; 8
    4a5e:	38 f0       	brcs	.+14     	; 0x4a6e <vfprintf+0x188>
    4a60:	27 e0       	ldi	r18, 0x07	; 7
    4a62:	17 e0       	ldi	r17, 0x07	; 7
    4a64:	05 c0       	rjmp	.+10     	; 0x4a70 <vfprintf+0x18a>
    4a66:	27 e0       	ldi	r18, 0x07	; 7
    4a68:	9c e3       	ldi	r25, 0x3C	; 60
    4a6a:	49 2e       	mov	r4, r25
    4a6c:	02 c0       	rjmp	.+4      	; 0x4a72 <vfprintf+0x18c>
    4a6e:	21 2f       	mov	r18, r17
    4a70:	41 2c       	mov	r4, r1
    4a72:	56 01       	movw	r10, r12
    4a74:	84 e0       	ldi	r24, 0x04	; 4
    4a76:	a8 0e       	add	r10, r24
    4a78:	b1 1c       	adc	r11, r1
    4a7a:	f6 01       	movw	r30, r12
    4a7c:	60 81       	ld	r22, Z
    4a7e:	71 81       	ldd	r23, Z+1	; 0x01
    4a80:	82 81       	ldd	r24, Z+2	; 0x02
    4a82:	93 81       	ldd	r25, Z+3	; 0x03
    4a84:	04 2d       	mov	r16, r4
    4a86:	a3 01       	movw	r20, r6
    4a88:	0e 94 17 e9 	call	0x1d22e	; 0x1d22e <__ftoa_engine>
    4a8c:	6c 01       	movw	r12, r24
    4a8e:	f9 81       	ldd	r31, Y+1	; 0x01
    4a90:	fc 87       	std	Y+12, r31	; 0x0c
    4a92:	f0 ff       	sbrs	r31, 0
    4a94:	02 c0       	rjmp	.+4      	; 0x4a9a <vfprintf+0x1b4>
    4a96:	f3 ff       	sbrs	r31, 3
    4a98:	06 c0       	rjmp	.+12     	; 0x4aa6 <vfprintf+0x1c0>
    4a9a:	91 fc       	sbrc	r9, 1
    4a9c:	06 c0       	rjmp	.+12     	; 0x4aaa <vfprintf+0x1c4>
    4a9e:	92 fe       	sbrs	r9, 2
    4aa0:	06 c0       	rjmp	.+12     	; 0x4aae <vfprintf+0x1c8>
    4aa2:	00 e2       	ldi	r16, 0x20	; 32
    4aa4:	05 c0       	rjmp	.+10     	; 0x4ab0 <vfprintf+0x1ca>
    4aa6:	0d e2       	ldi	r16, 0x2D	; 45
    4aa8:	03 c0       	rjmp	.+6      	; 0x4ab0 <vfprintf+0x1ca>
    4aaa:	0b e2       	ldi	r16, 0x2B	; 43
    4aac:	01 c0       	rjmp	.+2      	; 0x4ab0 <vfprintf+0x1ca>
    4aae:	00 e0       	ldi	r16, 0x00	; 0
    4ab0:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ab2:	8c 70       	andi	r24, 0x0C	; 12
    4ab4:	19 f0       	breq	.+6      	; 0x4abc <vfprintf+0x1d6>
    4ab6:	01 11       	cpse	r16, r1
    4ab8:	5a c2       	rjmp	.+1204   	; 0x4f6e <vfprintf+0x688>
    4aba:	9b c2       	rjmp	.+1334   	; 0x4ff2 <vfprintf+0x70c>
    4abc:	97 fe       	sbrs	r9, 7
    4abe:	10 c0       	rjmp	.+32     	; 0x4ae0 <vfprintf+0x1fa>
    4ac0:	4c 0c       	add	r4, r12
    4ac2:	fc 85       	ldd	r31, Y+12	; 0x0c
    4ac4:	f4 ff       	sbrs	r31, 4
    4ac6:	04 c0       	rjmp	.+8      	; 0x4ad0 <vfprintf+0x1ea>
    4ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aca:	81 33       	cpi	r24, 0x31	; 49
    4acc:	09 f4       	brne	.+2      	; 0x4ad0 <vfprintf+0x1ea>
    4ace:	4a 94       	dec	r4
    4ad0:	14 14       	cp	r1, r4
    4ad2:	74 f5       	brge	.+92     	; 0x4b30 <vfprintf+0x24a>
    4ad4:	28 e0       	ldi	r18, 0x08	; 8
    4ad6:	24 15       	cp	r18, r4
    4ad8:	78 f5       	brcc	.+94     	; 0x4b38 <vfprintf+0x252>
    4ada:	88 e0       	ldi	r24, 0x08	; 8
    4adc:	48 2e       	mov	r4, r24
    4ade:	2c c0       	rjmp	.+88     	; 0x4b38 <vfprintf+0x252>
    4ae0:	96 fc       	sbrc	r9, 6
    4ae2:	2a c0       	rjmp	.+84     	; 0x4b38 <vfprintf+0x252>
    4ae4:	81 2f       	mov	r24, r17
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	8c 15       	cp	r24, r12
    4aea:	9d 05       	cpc	r25, r13
    4aec:	9c f0       	brlt	.+38     	; 0x4b14 <vfprintf+0x22e>
    4aee:	3c ef       	ldi	r19, 0xFC	; 252
    4af0:	c3 16       	cp	r12, r19
    4af2:	3f ef       	ldi	r19, 0xFF	; 255
    4af4:	d3 06       	cpc	r13, r19
    4af6:	74 f0       	brlt	.+28     	; 0x4b14 <vfprintf+0x22e>
    4af8:	89 2d       	mov	r24, r9
    4afa:	80 68       	ori	r24, 0x80	; 128
    4afc:	98 2e       	mov	r9, r24
    4afe:	0a c0       	rjmp	.+20     	; 0x4b14 <vfprintf+0x22e>
    4b00:	e2 e0       	ldi	r30, 0x02	; 2
    4b02:	f0 e0       	ldi	r31, 0x00	; 0
    4b04:	ec 0f       	add	r30, r28
    4b06:	fd 1f       	adc	r31, r29
    4b08:	e1 0f       	add	r30, r17
    4b0a:	f1 1d       	adc	r31, r1
    4b0c:	80 81       	ld	r24, Z
    4b0e:	80 33       	cpi	r24, 0x30	; 48
    4b10:	19 f4       	brne	.+6      	; 0x4b18 <vfprintf+0x232>
    4b12:	11 50       	subi	r17, 0x01	; 1
    4b14:	11 11       	cpse	r17, r1
    4b16:	f4 cf       	rjmp	.-24     	; 0x4b00 <vfprintf+0x21a>
    4b18:	97 fe       	sbrs	r9, 7
    4b1a:	0e c0       	rjmp	.+28     	; 0x4b38 <vfprintf+0x252>
    4b1c:	44 24       	eor	r4, r4
    4b1e:	43 94       	inc	r4
    4b20:	41 0e       	add	r4, r17
    4b22:	81 2f       	mov	r24, r17
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	c8 16       	cp	r12, r24
    4b28:	d9 06       	cpc	r13, r25
    4b2a:	2c f4       	brge	.+10     	; 0x4b36 <vfprintf+0x250>
    4b2c:	1c 19       	sub	r17, r12
    4b2e:	04 c0       	rjmp	.+8      	; 0x4b38 <vfprintf+0x252>
    4b30:	44 24       	eor	r4, r4
    4b32:	43 94       	inc	r4
    4b34:	01 c0       	rjmp	.+2      	; 0x4b38 <vfprintf+0x252>
    4b36:	10 e0       	ldi	r17, 0x00	; 0
    4b38:	97 fe       	sbrs	r9, 7
    4b3a:	06 c0       	rjmp	.+12     	; 0x4b48 <vfprintf+0x262>
    4b3c:	1c 14       	cp	r1, r12
    4b3e:	1d 04       	cpc	r1, r13
    4b40:	34 f4       	brge	.+12     	; 0x4b4e <vfprintf+0x268>
    4b42:	c6 01       	movw	r24, r12
    4b44:	01 96       	adiw	r24, 0x01	; 1
    4b46:	05 c0       	rjmp	.+10     	; 0x4b52 <vfprintf+0x26c>
    4b48:	85 e0       	ldi	r24, 0x05	; 5
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	02 c0       	rjmp	.+4      	; 0x4b52 <vfprintf+0x26c>
    4b4e:	81 e0       	ldi	r24, 0x01	; 1
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	01 11       	cpse	r16, r1
    4b54:	01 96       	adiw	r24, 0x01	; 1
    4b56:	11 23       	and	r17, r17
    4b58:	31 f0       	breq	.+12     	; 0x4b66 <vfprintf+0x280>
    4b5a:	21 2f       	mov	r18, r17
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	2f 5f       	subi	r18, 0xFF	; 255
    4b60:	3f 4f       	sbci	r19, 0xFF	; 255
    4b62:	82 0f       	add	r24, r18
    4b64:	93 1f       	adc	r25, r19
    4b66:	25 2d       	mov	r18, r5
    4b68:	30 e0       	ldi	r19, 0x00	; 0
    4b6a:	82 17       	cp	r24, r18
    4b6c:	93 07       	cpc	r25, r19
    4b6e:	14 f4       	brge	.+4      	; 0x4b74 <vfprintf+0x28e>
    4b70:	58 1a       	sub	r5, r24
    4b72:	01 c0       	rjmp	.+2      	; 0x4b76 <vfprintf+0x290>
    4b74:	51 2c       	mov	r5, r1
    4b76:	89 2d       	mov	r24, r9
    4b78:	89 70       	andi	r24, 0x09	; 9
    4b7a:	49 f4       	brne	.+18     	; 0x4b8e <vfprintf+0x2a8>
    4b7c:	55 20       	and	r5, r5
    4b7e:	39 f0       	breq	.+14     	; 0x4b8e <vfprintf+0x2a8>
    4b80:	b7 01       	movw	r22, r14
    4b82:	80 e2       	ldi	r24, 0x20	; 32
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4b8a:	5a 94       	dec	r5
    4b8c:	f7 cf       	rjmp	.-18     	; 0x4b7c <vfprintf+0x296>
    4b8e:	00 23       	and	r16, r16
    4b90:	29 f0       	breq	.+10     	; 0x4b9c <vfprintf+0x2b6>
    4b92:	b7 01       	movw	r22, r14
    4b94:	80 2f       	mov	r24, r16
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4b9c:	93 fc       	sbrc	r9, 3
    4b9e:	09 c0       	rjmp	.+18     	; 0x4bb2 <vfprintf+0x2cc>
    4ba0:	55 20       	and	r5, r5
    4ba2:	39 f0       	breq	.+14     	; 0x4bb2 <vfprintf+0x2cc>
    4ba4:	b7 01       	movw	r22, r14
    4ba6:	80 e3       	ldi	r24, 0x30	; 48
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4bae:	5a 94       	dec	r5
    4bb0:	f7 cf       	rjmp	.-18     	; 0x4ba0 <vfprintf+0x2ba>
    4bb2:	97 fe       	sbrs	r9, 7
    4bb4:	4c c0       	rjmp	.+152    	; 0x4c4e <vfprintf+0x368>
    4bb6:	46 01       	movw	r8, r12
    4bb8:	d7 fe       	sbrs	r13, 7
    4bba:	02 c0       	rjmp	.+4      	; 0x4bc0 <vfprintf+0x2da>
    4bbc:	81 2c       	mov	r8, r1
    4bbe:	91 2c       	mov	r9, r1
    4bc0:	c6 01       	movw	r24, r12
    4bc2:	88 19       	sub	r24, r8
    4bc4:	99 09       	sbc	r25, r9
    4bc6:	f3 01       	movw	r30, r6
    4bc8:	e8 0f       	add	r30, r24
    4bca:	f9 1f       	adc	r31, r25
    4bcc:	fe 87       	std	Y+14, r31	; 0x0e
    4bce:	ed 87       	std	Y+13, r30	; 0x0d
    4bd0:	96 01       	movw	r18, r12
    4bd2:	24 19       	sub	r18, r4
    4bd4:	31 09       	sbc	r19, r1
    4bd6:	38 8b       	std	Y+16, r19	; 0x10
    4bd8:	2f 87       	std	Y+15, r18	; 0x0f
    4bda:	01 2f       	mov	r16, r17
    4bdc:	10 e0       	ldi	r17, 0x00	; 0
    4bde:	11 95       	neg	r17
    4be0:	01 95       	neg	r16
    4be2:	11 09       	sbc	r17, r1
    4be4:	3f ef       	ldi	r19, 0xFF	; 255
    4be6:	83 16       	cp	r8, r19
    4be8:	93 06       	cpc	r9, r19
    4bea:	29 f4       	brne	.+10     	; 0x4bf6 <vfprintf+0x310>
    4bec:	b7 01       	movw	r22, r14
    4bee:	8e e2       	ldi	r24, 0x2E	; 46
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4bf6:	c8 14       	cp	r12, r8
    4bf8:	d9 04       	cpc	r13, r9
    4bfa:	4c f0       	brlt	.+18     	; 0x4c0e <vfprintf+0x328>
    4bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bfe:	98 89       	ldd	r25, Y+16	; 0x10
    4c00:	88 15       	cp	r24, r8
    4c02:	99 05       	cpc	r25, r9
    4c04:	24 f4       	brge	.+8      	; 0x4c0e <vfprintf+0x328>
    4c06:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c08:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c0a:	81 81       	ldd	r24, Z+1	; 0x01
    4c0c:	01 c0       	rjmp	.+2      	; 0x4c10 <vfprintf+0x32a>
    4c0e:	80 e3       	ldi	r24, 0x30	; 48
    4c10:	f1 e0       	ldi	r31, 0x01	; 1
    4c12:	8f 1a       	sub	r8, r31
    4c14:	91 08       	sbc	r9, r1
    4c16:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c18:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c1a:	2f 5f       	subi	r18, 0xFF	; 255
    4c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c1e:	3e 87       	std	Y+14, r19	; 0x0e
    4c20:	2d 87       	std	Y+13, r18	; 0x0d
    4c22:	80 16       	cp	r8, r16
    4c24:	91 06       	cpc	r9, r17
    4c26:	2c f0       	brlt	.+10     	; 0x4c32 <vfprintf+0x34c>
    4c28:	b7 01       	movw	r22, r14
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4c30:	d9 cf       	rjmp	.-78     	; 0x4be4 <vfprintf+0x2fe>
    4c32:	c8 14       	cp	r12, r8
    4c34:	d9 04       	cpc	r13, r9
    4c36:	41 f4       	brne	.+16     	; 0x4c48 <vfprintf+0x362>
    4c38:	9a 81       	ldd	r25, Y+2	; 0x02
    4c3a:	96 33       	cpi	r25, 0x36	; 54
    4c3c:	20 f4       	brcc	.+8      	; 0x4c46 <vfprintf+0x360>
    4c3e:	95 33       	cpi	r25, 0x35	; 53
    4c40:	19 f4       	brne	.+6      	; 0x4c48 <vfprintf+0x362>
    4c42:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c44:	34 ff       	sbrs	r19, 4
    4c46:	81 e3       	ldi	r24, 0x31	; 49
    4c48:	b7 01       	movw	r22, r14
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	4e c0       	rjmp	.+156    	; 0x4cea <vfprintf+0x404>
    4c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c50:	81 33       	cpi	r24, 0x31	; 49
    4c52:	19 f0       	breq	.+6      	; 0x4c5a <vfprintf+0x374>
    4c54:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c56:	9f 7e       	andi	r25, 0xEF	; 239
    4c58:	9c 87       	std	Y+12, r25	; 0x0c
    4c5a:	b7 01       	movw	r22, r14
    4c5c:	90 e0       	ldi	r25, 0x00	; 0
    4c5e:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4c62:	11 11       	cpse	r17, r1
    4c64:	05 c0       	rjmp	.+10     	; 0x4c70 <vfprintf+0x38a>
    4c66:	94 fc       	sbrc	r9, 4
    4c68:	18 c0       	rjmp	.+48     	; 0x4c9a <vfprintf+0x3b4>
    4c6a:	85 e6       	ldi	r24, 0x65	; 101
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
    4c6e:	17 c0       	rjmp	.+46     	; 0x4c9e <vfprintf+0x3b8>
    4c70:	b7 01       	movw	r22, r14
    4c72:	8e e2       	ldi	r24, 0x2E	; 46
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4c7a:	1e 5f       	subi	r17, 0xFE	; 254
    4c7c:	82 e0       	ldi	r24, 0x02	; 2
    4c7e:	01 e0       	ldi	r16, 0x01	; 1
    4c80:	08 0f       	add	r16, r24
    4c82:	f3 01       	movw	r30, r6
    4c84:	e8 0f       	add	r30, r24
    4c86:	f1 1d       	adc	r31, r1
    4c88:	80 81       	ld	r24, Z
    4c8a:	b7 01       	movw	r22, r14
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4c92:	80 2f       	mov	r24, r16
    4c94:	01 13       	cpse	r16, r17
    4c96:	f3 cf       	rjmp	.-26     	; 0x4c7e <vfprintf+0x398>
    4c98:	e6 cf       	rjmp	.-52     	; 0x4c66 <vfprintf+0x380>
    4c9a:	85 e4       	ldi	r24, 0x45	; 69
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	b7 01       	movw	r22, r14
    4ca0:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4ca4:	d7 fc       	sbrc	r13, 7
    4ca6:	06 c0       	rjmp	.+12     	; 0x4cb4 <vfprintf+0x3ce>
    4ca8:	c1 14       	cp	r12, r1
    4caa:	d1 04       	cpc	r13, r1
    4cac:	41 f4       	brne	.+16     	; 0x4cbe <vfprintf+0x3d8>
    4cae:	ec 85       	ldd	r30, Y+12	; 0x0c
    4cb0:	e4 ff       	sbrs	r30, 4
    4cb2:	05 c0       	rjmp	.+10     	; 0x4cbe <vfprintf+0x3d8>
    4cb4:	d1 94       	neg	r13
    4cb6:	c1 94       	neg	r12
    4cb8:	d1 08       	sbc	r13, r1
    4cba:	8d e2       	ldi	r24, 0x2D	; 45
    4cbc:	01 c0       	rjmp	.+2      	; 0x4cc0 <vfprintf+0x3da>
    4cbe:	8b e2       	ldi	r24, 0x2B	; 43
    4cc0:	b7 01       	movw	r22, r14
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4cc8:	80 e3       	ldi	r24, 0x30	; 48
    4cca:	2a e0       	ldi	r18, 0x0A	; 10
    4ccc:	c2 16       	cp	r12, r18
    4cce:	d1 04       	cpc	r13, r1
    4cd0:	2c f0       	brlt	.+10     	; 0x4cdc <vfprintf+0x3f6>
    4cd2:	8f 5f       	subi	r24, 0xFF	; 255
    4cd4:	fa e0       	ldi	r31, 0x0A	; 10
    4cd6:	cf 1a       	sub	r12, r31
    4cd8:	d1 08       	sbc	r13, r1
    4cda:	f7 cf       	rjmp	.-18     	; 0x4cca <vfprintf+0x3e4>
    4cdc:	b7 01       	movw	r22, r14
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4ce4:	b7 01       	movw	r22, r14
    4ce6:	c6 01       	movw	r24, r12
    4ce8:	c0 96       	adiw	r24, 0x30	; 48
    4cea:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4cee:	54 c1       	rjmp	.+680    	; 0x4f98 <vfprintf+0x6b2>
    4cf0:	83 36       	cpi	r24, 0x63	; 99
    4cf2:	31 f0       	breq	.+12     	; 0x4d00 <vfprintf+0x41a>
    4cf4:	83 37       	cpi	r24, 0x73	; 115
    4cf6:	79 f0       	breq	.+30     	; 0x4d16 <vfprintf+0x430>
    4cf8:	83 35       	cpi	r24, 0x53	; 83
    4cfa:	09 f0       	breq	.+2      	; 0x4cfe <vfprintf+0x418>
    4cfc:	56 c0       	rjmp	.+172    	; 0x4daa <vfprintf+0x4c4>
    4cfe:	20 c0       	rjmp	.+64     	; 0x4d40 <vfprintf+0x45a>
    4d00:	56 01       	movw	r10, r12
    4d02:	32 e0       	ldi	r19, 0x02	; 2
    4d04:	a3 0e       	add	r10, r19
    4d06:	b1 1c       	adc	r11, r1
    4d08:	f6 01       	movw	r30, r12
    4d0a:	80 81       	ld	r24, Z
    4d0c:	89 83       	std	Y+1, r24	; 0x01
    4d0e:	01 e0       	ldi	r16, 0x01	; 1
    4d10:	10 e0       	ldi	r17, 0x00	; 0
    4d12:	63 01       	movw	r12, r6
    4d14:	12 c0       	rjmp	.+36     	; 0x4d3a <vfprintf+0x454>
    4d16:	56 01       	movw	r10, r12
    4d18:	f2 e0       	ldi	r31, 0x02	; 2
    4d1a:	af 0e       	add	r10, r31
    4d1c:	b1 1c       	adc	r11, r1
    4d1e:	f6 01       	movw	r30, r12
    4d20:	c0 80       	ld	r12, Z
    4d22:	d1 80       	ldd	r13, Z+1	; 0x01
    4d24:	96 fe       	sbrs	r9, 6
    4d26:	03 c0       	rjmp	.+6      	; 0x4d2e <vfprintf+0x448>
    4d28:	61 2f       	mov	r22, r17
    4d2a:	70 e0       	ldi	r23, 0x00	; 0
    4d2c:	02 c0       	rjmp	.+4      	; 0x4d32 <vfprintf+0x44c>
    4d2e:	6f ef       	ldi	r22, 0xFF	; 255
    4d30:	7f ef       	ldi	r23, 0xFF	; 255
    4d32:	c6 01       	movw	r24, r12
    4d34:	0e 94 01 ea 	call	0x1d402	; 0x1d402 <strnlen>
    4d38:	8c 01       	movw	r16, r24
    4d3a:	f9 2d       	mov	r31, r9
    4d3c:	ff 77       	andi	r31, 0x7F	; 127
    4d3e:	14 c0       	rjmp	.+40     	; 0x4d68 <vfprintf+0x482>
    4d40:	56 01       	movw	r10, r12
    4d42:	22 e0       	ldi	r18, 0x02	; 2
    4d44:	a2 0e       	add	r10, r18
    4d46:	b1 1c       	adc	r11, r1
    4d48:	f6 01       	movw	r30, r12
    4d4a:	c0 80       	ld	r12, Z
    4d4c:	d1 80       	ldd	r13, Z+1	; 0x01
    4d4e:	96 fe       	sbrs	r9, 6
    4d50:	03 c0       	rjmp	.+6      	; 0x4d58 <vfprintf+0x472>
    4d52:	61 2f       	mov	r22, r17
    4d54:	70 e0       	ldi	r23, 0x00	; 0
    4d56:	02 c0       	rjmp	.+4      	; 0x4d5c <vfprintf+0x476>
    4d58:	6f ef       	ldi	r22, 0xFF	; 255
    4d5a:	7f ef       	ldi	r23, 0xFF	; 255
    4d5c:	c6 01       	movw	r24, r12
    4d5e:	0e 94 ef e9 	call	0x1d3de	; 0x1d3de <strnlen_P>
    4d62:	8c 01       	movw	r16, r24
    4d64:	f9 2d       	mov	r31, r9
    4d66:	f0 68       	ori	r31, 0x80	; 128
    4d68:	9f 2e       	mov	r9, r31
    4d6a:	f3 fd       	sbrc	r31, 3
    4d6c:	1a c0       	rjmp	.+52     	; 0x4da2 <vfprintf+0x4bc>
    4d6e:	85 2d       	mov	r24, r5
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	08 17       	cp	r16, r24
    4d74:	19 07       	cpc	r17, r25
    4d76:	a8 f4       	brcc	.+42     	; 0x4da2 <vfprintf+0x4bc>
    4d78:	b7 01       	movw	r22, r14
    4d7a:	80 e2       	ldi	r24, 0x20	; 32
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4d82:	5a 94       	dec	r5
    4d84:	f4 cf       	rjmp	.-24     	; 0x4d6e <vfprintf+0x488>
    4d86:	f6 01       	movw	r30, r12
    4d88:	97 fc       	sbrc	r9, 7
    4d8a:	85 91       	lpm	r24, Z+
    4d8c:	97 fe       	sbrs	r9, 7
    4d8e:	81 91       	ld	r24, Z+
    4d90:	6f 01       	movw	r12, r30
    4d92:	b7 01       	movw	r22, r14
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4d9a:	51 10       	cpse	r5, r1
    4d9c:	5a 94       	dec	r5
    4d9e:	01 50       	subi	r16, 0x01	; 1
    4da0:	11 09       	sbc	r17, r1
    4da2:	01 15       	cp	r16, r1
    4da4:	11 05       	cpc	r17, r1
    4da6:	79 f7       	brne	.-34     	; 0x4d86 <vfprintf+0x4a0>
    4da8:	f7 c0       	rjmp	.+494    	; 0x4f98 <vfprintf+0x6b2>
    4daa:	84 36       	cpi	r24, 0x64	; 100
    4dac:	11 f0       	breq	.+4      	; 0x4db2 <vfprintf+0x4cc>
    4dae:	89 36       	cpi	r24, 0x69	; 105
    4db0:	61 f5       	brne	.+88     	; 0x4e0a <vfprintf+0x524>
    4db2:	56 01       	movw	r10, r12
    4db4:	97 fe       	sbrs	r9, 7
    4db6:	09 c0       	rjmp	.+18     	; 0x4dca <vfprintf+0x4e4>
    4db8:	24 e0       	ldi	r18, 0x04	; 4
    4dba:	a2 0e       	add	r10, r18
    4dbc:	b1 1c       	adc	r11, r1
    4dbe:	f6 01       	movw	r30, r12
    4dc0:	60 81       	ld	r22, Z
    4dc2:	71 81       	ldd	r23, Z+1	; 0x01
    4dc4:	82 81       	ldd	r24, Z+2	; 0x02
    4dc6:	93 81       	ldd	r25, Z+3	; 0x03
    4dc8:	0a c0       	rjmp	.+20     	; 0x4dde <vfprintf+0x4f8>
    4dca:	f2 e0       	ldi	r31, 0x02	; 2
    4dcc:	af 0e       	add	r10, r31
    4dce:	b1 1c       	adc	r11, r1
    4dd0:	f6 01       	movw	r30, r12
    4dd2:	60 81       	ld	r22, Z
    4dd4:	71 81       	ldd	r23, Z+1	; 0x01
    4dd6:	07 2e       	mov	r0, r23
    4dd8:	00 0c       	add	r0, r0
    4dda:	88 0b       	sbc	r24, r24
    4ddc:	99 0b       	sbc	r25, r25
    4dde:	f9 2d       	mov	r31, r9
    4de0:	ff 76       	andi	r31, 0x6F	; 111
    4de2:	9f 2e       	mov	r9, r31
    4de4:	97 ff       	sbrs	r25, 7
    4de6:	09 c0       	rjmp	.+18     	; 0x4dfa <vfprintf+0x514>
    4de8:	90 95       	com	r25
    4dea:	80 95       	com	r24
    4dec:	70 95       	com	r23
    4dee:	61 95       	neg	r22
    4df0:	7f 4f       	sbci	r23, 0xFF	; 255
    4df2:	8f 4f       	sbci	r24, 0xFF	; 255
    4df4:	9f 4f       	sbci	r25, 0xFF	; 255
    4df6:	f0 68       	ori	r31, 0x80	; 128
    4df8:	9f 2e       	mov	r9, r31
    4dfa:	2a e0       	ldi	r18, 0x0A	; 10
    4dfc:	30 e0       	ldi	r19, 0x00	; 0
    4dfe:	a3 01       	movw	r20, r6
    4e00:	0e 94 0c ea 	call	0x1d418	; 0x1d418 <__ultoa_invert>
    4e04:	c8 2e       	mov	r12, r24
    4e06:	c6 18       	sub	r12, r6
    4e08:	3f c0       	rjmp	.+126    	; 0x4e88 <vfprintf+0x5a2>
    4e0a:	09 2d       	mov	r16, r9
    4e0c:	85 37       	cpi	r24, 0x75	; 117
    4e0e:	21 f4       	brne	.+8      	; 0x4e18 <vfprintf+0x532>
    4e10:	0f 7e       	andi	r16, 0xEF	; 239
    4e12:	2a e0       	ldi	r18, 0x0A	; 10
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	1d c0       	rjmp	.+58     	; 0x4e52 <vfprintf+0x56c>
    4e18:	09 7f       	andi	r16, 0xF9	; 249
    4e1a:	8f 36       	cpi	r24, 0x6F	; 111
    4e1c:	91 f0       	breq	.+36     	; 0x4e42 <vfprintf+0x55c>
    4e1e:	18 f4       	brcc	.+6      	; 0x4e26 <vfprintf+0x540>
    4e20:	88 35       	cpi	r24, 0x58	; 88
    4e22:	59 f0       	breq	.+22     	; 0x4e3a <vfprintf+0x554>
    4e24:	c3 c0       	rjmp	.+390    	; 0x4fac <vfprintf+0x6c6>
    4e26:	80 37       	cpi	r24, 0x70	; 112
    4e28:	19 f0       	breq	.+6      	; 0x4e30 <vfprintf+0x54a>
    4e2a:	88 37       	cpi	r24, 0x78	; 120
    4e2c:	11 f0       	breq	.+4      	; 0x4e32 <vfprintf+0x54c>
    4e2e:	be c0       	rjmp	.+380    	; 0x4fac <vfprintf+0x6c6>
    4e30:	00 61       	ori	r16, 0x10	; 16
    4e32:	04 ff       	sbrs	r16, 4
    4e34:	09 c0       	rjmp	.+18     	; 0x4e48 <vfprintf+0x562>
    4e36:	04 60       	ori	r16, 0x04	; 4
    4e38:	07 c0       	rjmp	.+14     	; 0x4e48 <vfprintf+0x562>
    4e3a:	94 fe       	sbrs	r9, 4
    4e3c:	08 c0       	rjmp	.+16     	; 0x4e4e <vfprintf+0x568>
    4e3e:	06 60       	ori	r16, 0x06	; 6
    4e40:	06 c0       	rjmp	.+12     	; 0x4e4e <vfprintf+0x568>
    4e42:	28 e0       	ldi	r18, 0x08	; 8
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	05 c0       	rjmp	.+10     	; 0x4e52 <vfprintf+0x56c>
    4e48:	20 e1       	ldi	r18, 0x10	; 16
    4e4a:	30 e0       	ldi	r19, 0x00	; 0
    4e4c:	02 c0       	rjmp	.+4      	; 0x4e52 <vfprintf+0x56c>
    4e4e:	20 e1       	ldi	r18, 0x10	; 16
    4e50:	32 e0       	ldi	r19, 0x02	; 2
    4e52:	56 01       	movw	r10, r12
    4e54:	07 ff       	sbrs	r16, 7
    4e56:	09 c0       	rjmp	.+18     	; 0x4e6a <vfprintf+0x584>
    4e58:	84 e0       	ldi	r24, 0x04	; 4
    4e5a:	a8 0e       	add	r10, r24
    4e5c:	b1 1c       	adc	r11, r1
    4e5e:	f6 01       	movw	r30, r12
    4e60:	60 81       	ld	r22, Z
    4e62:	71 81       	ldd	r23, Z+1	; 0x01
    4e64:	82 81       	ldd	r24, Z+2	; 0x02
    4e66:	93 81       	ldd	r25, Z+3	; 0x03
    4e68:	08 c0       	rjmp	.+16     	; 0x4e7a <vfprintf+0x594>
    4e6a:	f2 e0       	ldi	r31, 0x02	; 2
    4e6c:	af 0e       	add	r10, r31
    4e6e:	b1 1c       	adc	r11, r1
    4e70:	f6 01       	movw	r30, r12
    4e72:	60 81       	ld	r22, Z
    4e74:	71 81       	ldd	r23, Z+1	; 0x01
    4e76:	80 e0       	ldi	r24, 0x00	; 0
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	a3 01       	movw	r20, r6
    4e7c:	0e 94 0c ea 	call	0x1d418	; 0x1d418 <__ultoa_invert>
    4e80:	c8 2e       	mov	r12, r24
    4e82:	c6 18       	sub	r12, r6
    4e84:	0f 77       	andi	r16, 0x7F	; 127
    4e86:	90 2e       	mov	r9, r16
    4e88:	96 fe       	sbrs	r9, 6
    4e8a:	0b c0       	rjmp	.+22     	; 0x4ea2 <vfprintf+0x5bc>
    4e8c:	09 2d       	mov	r16, r9
    4e8e:	0e 7f       	andi	r16, 0xFE	; 254
    4e90:	c1 16       	cp	r12, r17
    4e92:	50 f4       	brcc	.+20     	; 0x4ea8 <vfprintf+0x5c2>
    4e94:	94 fe       	sbrs	r9, 4
    4e96:	0a c0       	rjmp	.+20     	; 0x4eac <vfprintf+0x5c6>
    4e98:	92 fc       	sbrc	r9, 2
    4e9a:	08 c0       	rjmp	.+16     	; 0x4eac <vfprintf+0x5c6>
    4e9c:	09 2d       	mov	r16, r9
    4e9e:	0e 7e       	andi	r16, 0xEE	; 238
    4ea0:	05 c0       	rjmp	.+10     	; 0x4eac <vfprintf+0x5c6>
    4ea2:	dc 2c       	mov	r13, r12
    4ea4:	09 2d       	mov	r16, r9
    4ea6:	03 c0       	rjmp	.+6      	; 0x4eae <vfprintf+0x5c8>
    4ea8:	dc 2c       	mov	r13, r12
    4eaa:	01 c0       	rjmp	.+2      	; 0x4eae <vfprintf+0x5c8>
    4eac:	d1 2e       	mov	r13, r17
    4eae:	04 ff       	sbrs	r16, 4
    4eb0:	0d c0       	rjmp	.+26     	; 0x4ecc <vfprintf+0x5e6>
    4eb2:	fe 01       	movw	r30, r28
    4eb4:	ec 0d       	add	r30, r12
    4eb6:	f1 1d       	adc	r31, r1
    4eb8:	80 81       	ld	r24, Z
    4eba:	80 33       	cpi	r24, 0x30	; 48
    4ebc:	11 f4       	brne	.+4      	; 0x4ec2 <vfprintf+0x5dc>
    4ebe:	09 7e       	andi	r16, 0xE9	; 233
    4ec0:	09 c0       	rjmp	.+18     	; 0x4ed4 <vfprintf+0x5ee>
    4ec2:	02 ff       	sbrs	r16, 2
    4ec4:	06 c0       	rjmp	.+12     	; 0x4ed2 <vfprintf+0x5ec>
    4ec6:	d3 94       	inc	r13
    4ec8:	d3 94       	inc	r13
    4eca:	04 c0       	rjmp	.+8      	; 0x4ed4 <vfprintf+0x5ee>
    4ecc:	80 2f       	mov	r24, r16
    4ece:	86 78       	andi	r24, 0x86	; 134
    4ed0:	09 f0       	breq	.+2      	; 0x4ed4 <vfprintf+0x5ee>
    4ed2:	d3 94       	inc	r13
    4ed4:	03 fd       	sbrc	r16, 3
    4ed6:	11 c0       	rjmp	.+34     	; 0x4efa <vfprintf+0x614>
    4ed8:	00 ff       	sbrs	r16, 0
    4eda:	06 c0       	rjmp	.+12     	; 0x4ee8 <vfprintf+0x602>
    4edc:	1c 2d       	mov	r17, r12
    4ede:	d5 14       	cp	r13, r5
    4ee0:	80 f4       	brcc	.+32     	; 0x4f02 <vfprintf+0x61c>
    4ee2:	15 0d       	add	r17, r5
    4ee4:	1d 19       	sub	r17, r13
    4ee6:	0d c0       	rjmp	.+26     	; 0x4f02 <vfprintf+0x61c>
    4ee8:	d5 14       	cp	r13, r5
    4eea:	58 f4       	brcc	.+22     	; 0x4f02 <vfprintf+0x61c>
    4eec:	b7 01       	movw	r22, r14
    4eee:	80 e2       	ldi	r24, 0x20	; 32
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4ef6:	d3 94       	inc	r13
    4ef8:	f7 cf       	rjmp	.-18     	; 0x4ee8 <vfprintf+0x602>
    4efa:	d5 14       	cp	r13, r5
    4efc:	10 f4       	brcc	.+4      	; 0x4f02 <vfprintf+0x61c>
    4efe:	5d 18       	sub	r5, r13
    4f00:	01 c0       	rjmp	.+2      	; 0x4f04 <vfprintf+0x61e>
    4f02:	51 2c       	mov	r5, r1
    4f04:	04 ff       	sbrs	r16, 4
    4f06:	10 c0       	rjmp	.+32     	; 0x4f28 <vfprintf+0x642>
    4f08:	b7 01       	movw	r22, r14
    4f0a:	80 e3       	ldi	r24, 0x30	; 48
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4f12:	02 ff       	sbrs	r16, 2
    4f14:	17 c0       	rjmp	.+46     	; 0x4f44 <vfprintf+0x65e>
    4f16:	01 fd       	sbrc	r16, 1
    4f18:	03 c0       	rjmp	.+6      	; 0x4f20 <vfprintf+0x63a>
    4f1a:	88 e7       	ldi	r24, 0x78	; 120
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	02 c0       	rjmp	.+4      	; 0x4f24 <vfprintf+0x63e>
    4f20:	88 e5       	ldi	r24, 0x58	; 88
    4f22:	90 e0       	ldi	r25, 0x00	; 0
    4f24:	b7 01       	movw	r22, r14
    4f26:	0c c0       	rjmp	.+24     	; 0x4f40 <vfprintf+0x65a>
    4f28:	80 2f       	mov	r24, r16
    4f2a:	86 78       	andi	r24, 0x86	; 134
    4f2c:	59 f0       	breq	.+22     	; 0x4f44 <vfprintf+0x65e>
    4f2e:	01 ff       	sbrs	r16, 1
    4f30:	02 c0       	rjmp	.+4      	; 0x4f36 <vfprintf+0x650>
    4f32:	8b e2       	ldi	r24, 0x2B	; 43
    4f34:	01 c0       	rjmp	.+2      	; 0x4f38 <vfprintf+0x652>
    4f36:	80 e2       	ldi	r24, 0x20	; 32
    4f38:	07 fd       	sbrc	r16, 7
    4f3a:	8d e2       	ldi	r24, 0x2D	; 45
    4f3c:	b7 01       	movw	r22, r14
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4f44:	c1 16       	cp	r12, r17
    4f46:	38 f4       	brcc	.+14     	; 0x4f56 <vfprintf+0x670>
    4f48:	b7 01       	movw	r22, r14
    4f4a:	80 e3       	ldi	r24, 0x30	; 48
    4f4c:	90 e0       	ldi	r25, 0x00	; 0
    4f4e:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4f52:	11 50       	subi	r17, 0x01	; 1
    4f54:	f7 cf       	rjmp	.-18     	; 0x4f44 <vfprintf+0x65e>
    4f56:	ca 94       	dec	r12
    4f58:	f3 01       	movw	r30, r6
    4f5a:	ec 0d       	add	r30, r12
    4f5c:	f1 1d       	adc	r31, r1
    4f5e:	80 81       	ld	r24, Z
    4f60:	b7 01       	movw	r22, r14
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4f68:	c1 10       	cpse	r12, r1
    4f6a:	f5 cf       	rjmp	.-22     	; 0x4f56 <vfprintf+0x670>
    4f6c:	15 c0       	rjmp	.+42     	; 0x4f98 <vfprintf+0x6b2>
    4f6e:	f4 e0       	ldi	r31, 0x04	; 4
    4f70:	f5 15       	cp	r31, r5
    4f72:	60 f5       	brcc	.+88     	; 0x4fcc <vfprintf+0x6e6>
    4f74:	84 e0       	ldi	r24, 0x04	; 4
    4f76:	58 1a       	sub	r5, r24
    4f78:	93 fe       	sbrs	r9, 3
    4f7a:	1f c0       	rjmp	.+62     	; 0x4fba <vfprintf+0x6d4>
    4f7c:	01 11       	cpse	r16, r1
    4f7e:	27 c0       	rjmp	.+78     	; 0x4fce <vfprintf+0x6e8>
    4f80:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f82:	23 ff       	sbrs	r18, 3
    4f84:	2a c0       	rjmp	.+84     	; 0x4fda <vfprintf+0x6f4>
    4f86:	06 ed       	ldi	r16, 0xD6	; 214
    4f88:	11 e0       	ldi	r17, 0x01	; 1
    4f8a:	39 2d       	mov	r19, r9
    4f8c:	30 71       	andi	r19, 0x10	; 16
    4f8e:	93 2e       	mov	r9, r19
    4f90:	f8 01       	movw	r30, r16
    4f92:	84 91       	lpm	r24, Z
    4f94:	81 11       	cpse	r24, r1
    4f96:	24 c0       	rjmp	.+72     	; 0x4fe0 <vfprintf+0x6fa>
    4f98:	55 20       	and	r5, r5
    4f9a:	09 f4       	brne	.+2      	; 0x4f9e <vfprintf+0x6b8>
    4f9c:	e4 cc       	rjmp	.-1592   	; 0x4966 <vfprintf+0x80>
    4f9e:	b7 01       	movw	r22, r14
    4fa0:	80 e2       	ldi	r24, 0x20	; 32
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4fa8:	5a 94       	dec	r5
    4faa:	f6 cf       	rjmp	.-20     	; 0x4f98 <vfprintf+0x6b2>
    4fac:	f7 01       	movw	r30, r14
    4fae:	86 81       	ldd	r24, Z+6	; 0x06
    4fb0:	97 81       	ldd	r25, Z+7	; 0x07
    4fb2:	26 c0       	rjmp	.+76     	; 0x5000 <vfprintf+0x71a>
    4fb4:	8f ef       	ldi	r24, 0xFF	; 255
    4fb6:	9f ef       	ldi	r25, 0xFF	; 255
    4fb8:	23 c0       	rjmp	.+70     	; 0x5000 <vfprintf+0x71a>
    4fba:	b7 01       	movw	r22, r14
    4fbc:	80 e2       	ldi	r24, 0x20	; 32
    4fbe:	90 e0       	ldi	r25, 0x00	; 0
    4fc0:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4fc4:	5a 94       	dec	r5
    4fc6:	51 10       	cpse	r5, r1
    4fc8:	f8 cf       	rjmp	.-16     	; 0x4fba <vfprintf+0x6d4>
    4fca:	d8 cf       	rjmp	.-80     	; 0x4f7c <vfprintf+0x696>
    4fcc:	51 2c       	mov	r5, r1
    4fce:	b7 01       	movw	r22, r14
    4fd0:	80 2f       	mov	r24, r16
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4fd8:	d3 cf       	rjmp	.-90     	; 0x4f80 <vfprintf+0x69a>
    4fda:	0a ed       	ldi	r16, 0xDA	; 218
    4fdc:	11 e0       	ldi	r17, 0x01	; 1
    4fde:	d5 cf       	rjmp	.-86     	; 0x4f8a <vfprintf+0x6a4>
    4fe0:	91 10       	cpse	r9, r1
    4fe2:	80 52       	subi	r24, 0x20	; 32
    4fe4:	b7 01       	movw	r22, r14
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	0e 94 59 76 	call	0xecb2	; 0xecb2 <fputc>
    4fec:	0f 5f       	subi	r16, 0xFF	; 255
    4fee:	1f 4f       	sbci	r17, 0xFF	; 255
    4ff0:	cf cf       	rjmp	.-98     	; 0x4f90 <vfprintf+0x6aa>
    4ff2:	23 e0       	ldi	r18, 0x03	; 3
    4ff4:	25 15       	cp	r18, r5
    4ff6:	10 f4       	brcc	.+4      	; 0x4ffc <vfprintf+0x716>
    4ff8:	83 e0       	ldi	r24, 0x03	; 3
    4ffa:	bd cf       	rjmp	.-134    	; 0x4f76 <vfprintf+0x690>
    4ffc:	51 2c       	mov	r5, r1
    4ffe:	c0 cf       	rjmp	.-128    	; 0x4f80 <vfprintf+0x69a>
    5000:	60 96       	adiw	r28, 0x10	; 16
    5002:	0f b6       	in	r0, 0x3f	; 63
    5004:	f8 94       	cli
    5006:	de bf       	out	0x3e, r29	; 62
    5008:	0f be       	out	0x3f, r0	; 63
    500a:	cd bf       	out	0x3d, r28	; 61
    500c:	df 91       	pop	r29
    500e:	cf 91       	pop	r28
    5010:	1f 91       	pop	r17
    5012:	0f 91       	pop	r16
    5014:	ff 90       	pop	r15
    5016:	ef 90       	pop	r14
    5018:	df 90       	pop	r13
    501a:	cf 90       	pop	r12
    501c:	bf 90       	pop	r11
    501e:	af 90       	pop	r10
    5020:	9f 90       	pop	r9
    5022:	8f 90       	pop	r8
    5024:	7f 90       	pop	r7
    5026:	6f 90       	pop	r6
    5028:	5f 90       	pop	r5
    502a:	4f 90       	pop	r4
    502c:	3f 90       	pop	r3
    502e:	2f 90       	pop	r2
    5030:	08 95       	ret

00005032 <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    5032:	e8 2f       	mov	r30, r24
    5034:	e6 95       	lsr	r30
    5036:	e6 95       	lsr	r30
    5038:	e6 95       	lsr	r30
    503a:	93 e0       	ldi	r25, 0x03	; 3
    503c:	e9 9f       	mul	r30, r25
    503e:	f0 01       	movw	r30, r0
    5040:	11 24       	eor	r1, r1
    5042:	32 a1       	ldd	r19, Z+34	; 0x22
    5044:	28 2f       	mov	r18, r24
    5046:	27 70       	andi	r18, 0x07	; 7
    5048:	81 e0       	ldi	r24, 0x01	; 1
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	01 c0       	rjmp	.+2      	; 0x5050 <chip_select+0x1e>
    504e:	88 0f       	add	r24, r24
    5050:	2a 95       	dec	r18
    5052:	ea f7       	brpl	.-6      	; 0x504e <chip_select+0x1c>
    5054:	98 2f       	mov	r25, r24
    5056:	90 95       	com	r25
    5058:	93 23       	and	r25, r19
    505a:	92 a3       	std	Z+34, r25	; 0x22
    505c:	91 a1       	ldd	r25, Z+33	; 0x21
    505e:	89 2b       	or	r24, r25
    5060:	81 a3       	std	Z+33, r24	; 0x21
    5062:	08 95       	ret

00005064 <chip_deselect>:
    5064:	e8 2f       	mov	r30, r24
    5066:	e6 95       	lsr	r30
    5068:	e6 95       	lsr	r30
    506a:	e6 95       	lsr	r30
    506c:	93 e0       	ldi	r25, 0x03	; 3
    506e:	e9 9f       	mul	r30, r25
    5070:	f0 01       	movw	r30, r0
    5072:	11 24       	eor	r1, r1
    5074:	32 a1       	ldd	r19, Z+34	; 0x22
    5076:	28 2f       	mov	r18, r24
    5078:	27 70       	andi	r18, 0x07	; 7
    507a:	81 e0       	ldi	r24, 0x01	; 1
    507c:	90 e0       	ldi	r25, 0x00	; 0
    507e:	01 c0       	rjmp	.+2      	; 0x5082 <chip_deselect+0x1e>
    5080:	88 0f       	add	r24, r24
    5082:	2a 95       	dec	r18
    5084:	ea f7       	brpl	.-6      	; 0x5080 <chip_deselect+0x1c>
    5086:	93 2f       	mov	r25, r19
    5088:	98 2b       	or	r25, r24
    508a:	92 a3       	std	Z+34, r25	; 0x22
    508c:	91 a1       	ldd	r25, Z+33	; 0x21
    508e:	89 2b       	or	r24, r25
    5090:	81 a3       	std	Z+33, r24	; 0x21
    5092:	08 95       	ret

00005094 <chip_select_init>:
    5094:	e7 cf       	rjmp	.-50     	; 0x5064 <chip_deselect>
    5096:	08 95       	ret

00005098 <spi_end>:
    5098:	cf 93       	push	r28
    509a:	c8 2f       	mov	r28, r24
    509c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    50a0:	8c 17       	cp	r24, r28
    50a2:	a9 f0       	breq	.+42     	; 0x50ce <spi_end+0x36>
    50a4:	8f 3f       	cpi	r24, 0xFF	; 255
    50a6:	99 f0       	breq	.+38     	; 0x50ce <spi_end+0x36>
    50a8:	1f 92       	push	r1
    50aa:	cf 93       	push	r28
    50ac:	1f 92       	push	r1
    50ae:	8f 93       	push	r24
    50b0:	88 ed       	ldi	r24, 0xD8	; 216
    50b2:	92 e0       	ldi	r25, 0x02	; 2
    50b4:	1f 92       	push	r1
    50b6:	9f 93       	push	r25
    50b8:	8f 93       	push	r24
    50ba:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    50be:	8d b7       	in	r24, 0x3d	; 61
    50c0:	9e b7       	in	r25, 0x3e	; 62
    50c2:	07 96       	adiw	r24, 0x07	; 7
    50c4:	0f b6       	in	r0, 0x3f	; 63
    50c6:	f8 94       	cli
    50c8:	9e bf       	out	0x3e, r25	; 62
    50ca:	0f be       	out	0x3f, r0	; 63
    50cc:	8d bf       	out	0x3d, r24	; 61
    50ce:	8c 2f       	mov	r24, r28
    50d0:	c9 df       	rcall	.-110    	; 0x5064 <chip_deselect>
    50d2:	8f ef       	ldi	r24, 0xFF	; 255
    50d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    50d8:	cf 91       	pop	r28
    50da:	08 95       	ret

000050dc <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    50dc:	82 c4       	rjmp	.+2308   	; 0x59e2 <SPI0_TX>
    50de:	08 95       	ret

000050e0 <spi_RX_buffer>:
    50e0:	aa c4       	rjmp	.+2388   	; 0x5a36 <SPI0_RX>
    50e2:	08 95       	ret

000050e4 <spi_TX>:
    50e4:	a1 e0       	ldi	r26, 0x01	; 1
    50e6:	b0 e0       	ldi	r27, 0x00	; 0
    50e8:	e8 e7       	ldi	r30, 0x78	; 120
    50ea:	f8 e2       	ldi	r31, 0x28	; 40
    50ec:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    50f0:	89 83       	std	Y+1, r24	; 0x01
    50f2:	61 e0       	ldi	r22, 0x01	; 1
    50f4:	70 e0       	ldi	r23, 0x00	; 0
    50f6:	ce 01       	movw	r24, r28
    50f8:	01 96       	adiw	r24, 0x01	; 1
    50fa:	73 d4       	rcall	.+2278   	; 0x59e2 <SPI0_TX>
    50fc:	21 96       	adiw	r28, 0x01	; 1
    50fe:	e2 e0       	ldi	r30, 0x02	; 2
    5100:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

00005104 <spi_init>:
    5104:	cf 92       	push	r12
    5106:	df 92       	push	r13
    5108:	ef 92       	push	r14
    510a:	ff 92       	push	r15
    510c:	6b 01       	movw	r12, r22
    510e:	7c 01       	movw	r14, r24
    5110:	84 2f       	mov	r24, r20
    5112:	a8 df       	rcall	.-176    	; 0x5064 <chip_deselect>
    5114:	8f ef       	ldi	r24, 0xFF	; 255
    5116:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    511a:	c7 01       	movw	r24, r14
    511c:	b6 01       	movw	r22, r12
    511e:	34 d4       	rcall	.+2152   	; 0x5988 <SPI0_Init>
    5120:	80 e0       	ldi	r24, 0x00	; 0
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	f5 d3       	rcall	.+2026   	; 0x5910 <SPI0_Mode>
    5126:	8f ef       	ldi	r24, 0xFF	; 255
    5128:	dd df       	rcall	.-70     	; 0x50e4 <spi_TX>
    512a:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    512e:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    5132:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    5136:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    513a:	ff 90       	pop	r15
    513c:	ef 90       	pop	r14
    513e:	df 90       	pop	r13
    5140:	cf 90       	pop	r12
    5142:	08 95       	ret

00005144 <spi_begin>:
    5144:	cf 92       	push	r12
    5146:	df 92       	push	r13
    5148:	ef 92       	push	r14
    514a:	ff 92       	push	r15
    514c:	cf 93       	push	r28
    514e:	df 93       	push	r29
    5150:	6b 01       	movw	r12, r22
    5152:	7c 01       	movw	r14, r24
    5154:	ea 01       	movw	r28, r20
    5156:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    515a:	8f 3f       	cpi	r24, 0xFF	; 255
    515c:	99 f0       	breq	.+38     	; 0x5184 <spi_begin+0x40>
    515e:	df 93       	push	r29
    5160:	4f 93       	push	r20
    5162:	1f 92       	push	r1
    5164:	8f 93       	push	r24
    5166:	86 ef       	ldi	r24, 0xF6	; 246
    5168:	92 e0       	ldi	r25, 0x02	; 2
    516a:	1f 92       	push	r1
    516c:	9f 93       	push	r25
    516e:	8f 93       	push	r24
    5170:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    5174:	8d b7       	in	r24, 0x3d	; 61
    5176:	9e b7       	in	r25, 0x3e	; 62
    5178:	07 96       	adiw	r24, 0x07	; 7
    517a:	0f b6       	in	r0, 0x3f	; 63
    517c:	f8 94       	cli
    517e:	9e bf       	out	0x3e, r25	; 62
    5180:	0f be       	out	0x3f, r0	; 63
    5182:	8d bf       	out	0x3d, r24	; 61
    5184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5188:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    518c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    5190:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    5194:	8c 15       	cp	r24, r12
    5196:	9d 05       	cpc	r25, r13
    5198:	ae 05       	cpc	r26, r14
    519a:	bf 05       	cpc	r27, r15
    519c:	21 f0       	breq	.+8      	; 0x51a6 <spi_begin+0x62>
    519e:	ae 01       	movw	r20, r28
    51a0:	c7 01       	movw	r24, r14
    51a2:	b6 01       	movw	r22, r12
    51a4:	af df       	rcall	.-162    	; 0x5104 <spi_init>
    51a6:	8c 2f       	mov	r24, r28
    51a8:	44 df       	rcall	.-376    	; 0x5032 <chip_select>
    51aa:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <_cs_pin>
    51ae:	df 91       	pop	r29
    51b0:	cf 91       	pop	r28
    51b2:	ff 90       	pop	r15
    51b4:	ef 90       	pop	r14
    51b6:	df 90       	pop	r13
    51b8:	cf 90       	pop	r12
    51ba:	08 95       	ret

000051bc <spi_TXRX>:
    51bc:	a1 e0       	ldi	r26, 0x01	; 1
    51be:	b0 e0       	ldi	r27, 0x00	; 0
    51c0:	e4 ee       	ldi	r30, 0xE4	; 228
    51c2:	f8 e2       	ldi	r31, 0x28	; 40
    51c4:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    51c8:	89 83       	std	Y+1, r24	; 0x01
    51ca:	61 e0       	ldi	r22, 0x01	; 1
    51cc:	70 e0       	ldi	r23, 0x00	; 0
    51ce:	ce 01       	movw	r24, r28
    51d0:	01 96       	adiw	r24, 0x01	; 1
    51d2:	1b d4       	rcall	.+2102   	; 0x5a0a <SPI0_TXRX>
    51d4:	89 81       	ldd	r24, Y+1	; 0x01
    51d6:	21 96       	adiw	r28, 0x01	; 1
    51d8:	e2 e0       	ldi	r30, 0x02	; 2
    51da:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

000051de <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    51de:	a2 e0       	ldi	r26, 0x02	; 2
    51e0:	b0 e0       	ldi	r27, 0x00	; 0
    51e2:	e5 ef       	ldi	r30, 0xF5	; 245
    51e4:	f8 e2       	ldi	r31, 0x28	; 40
    51e6:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    51ea:	20 91 a4 20 	lds	r18, 0x20A4	; 0x8020a4 <__brkval>
    51ee:	30 91 a5 20 	lds	r19, 0x20A5	; 0x8020a5 <__brkval+0x1>
    51f2:	21 15       	cp	r18, r1
    51f4:	31 05       	cpc	r19, r1
    51f6:	11 f4       	brne	.+4      	; 0x51fc <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    51f8:	28 ea       	ldi	r18, 0xA8	; 168
    51fa:	30 e2       	ldi	r19, 0x20	; 32

    ret = (uint16_t) &v - top;
    return ( ret );
}
    51fc:	ce 01       	movw	r24, r28
    51fe:	01 96       	adiw	r24, 0x01	; 1
    5200:	82 1b       	sub	r24, r18
    5202:	93 0b       	sbc	r25, r19
    5204:	22 96       	adiw	r28, 0x02	; 2
    5206:	e2 e0       	ldi	r30, 0x02	; 2
    5208:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

0000520c <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    520c:	a2 e0       	ldi	r26, 0x02	; 2
    520e:	b0 e0       	ldi	r27, 0x00	; 0
    5210:	ec e0       	ldi	r30, 0x0C	; 12
    5212:	f9 e2       	ldi	r31, 0x29	; 41
    5214:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    5218:	e2 df       	rcall	.-60     	; 0x51de <freeRam>
    521a:	89 83       	std	Y+1, r24	; 0x01

    printf("Free Ram:%u\n", ram);
    521c:	9a 83       	std	Y+2, r25	; 0x02
    521e:	9f 93       	push	r25
    5220:	8f 93       	push	r24
    5222:	8d e1       	ldi	r24, 0x1D	; 29
    5224:	94 e0       	ldi	r25, 0x04	; 4
    5226:	1f 92       	push	r1
    5228:	9f 93       	push	r25
    522a:	8f 93       	push	r24
    522c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    5230:	8f ef       	ldi	r24, 0xFF	; 255
    5232:	90 e4       	ldi	r25, 0x40	; 64
    5234:	9f 93       	push	r25
    5236:	8f 93       	push	r24
    5238:	8a e0       	ldi	r24, 0x0A	; 10
    523a:	94 e0       	ldi	r25, 0x04	; 4
    523c:	1f 92       	push	r1
    523e:	9f 93       	push	r25
    5240:	8f 93       	push	r24
    5242:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    5246:	ce 01       	movw	r24, r28
    5248:	01 96       	adiw	r24, 0x01	; 1
    524a:	9f 93       	push	r25
    524c:	8f 93       	push	r24
    524e:	87 ef       	ldi	r24, 0xF7	; 247
    5250:	93 e0       	ldi	r25, 0x03	; 3
    5252:	1f 92       	push	r1
    5254:	9f 93       	push	r25
    5256:	8f 93       	push	r24
    5258:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    525c:	88 ea       	ldi	r24, 0xA8	; 168
    525e:	90 e2       	ldi	r25, 0x20	; 32
    5260:	9f 93       	push	r25
    5262:	8f 93       	push	r24
    5264:	86 e4       	ldi	r24, 0x46	; 70
    5266:	97 e1       	ldi	r25, 0x17	; 23
    5268:	9f 93       	push	r25
    526a:	8f 93       	push	r24
    526c:	89 ed       	ldi	r24, 0xD9	; 217
    526e:	93 e0       	ldi	r25, 0x03	; 3
    5270:	1f 92       	push	r1
    5272:	9f 93       	push	r25
    5274:	8f 93       	push	r24
    5276:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    527a:	86 e4       	ldi	r24, 0x46	; 70
    527c:	97 e1       	ldi	r25, 0x17	; 23
    527e:	9f 93       	push	r25
    5280:	8f 93       	push	r24
    5282:	80 e0       	ldi	r24, 0x00	; 0
    5284:	91 e0       	ldi	r25, 0x01	; 1
    5286:	9f 93       	push	r25
    5288:	8f 93       	push	r24
    528a:	8b eb       	ldi	r24, 0xBB	; 187
    528c:	93 e0       	ldi	r25, 0x03	; 3
    528e:	1f 92       	push	r1
    5290:	9f 93       	push	r25
    5292:	8f 93       	push	r24
    5294:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    5298:	80 e0       	ldi	r24, 0x00	; 0
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	9f 93       	push	r25
    529e:	8f 93       	push	r24
    52a0:	88 ea       	ldi	r24, 0xA8	; 168
    52a2:	90 e2       	ldi	r25, 0x20	; 32
    52a4:	9f 93       	push	r25
    52a6:	8f 93       	push	r24
    52a8:	8d e9       	ldi	r24, 0x9D	; 157
    52aa:	93 e0       	ldi	r25, 0x03	; 3
    52ac:	1f 92       	push	r1
    52ae:	9f 93       	push	r25
    52b0:	8f 93       	push	r24
    52b2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    52b6:	0f b6       	in	r0, 0x3f	; 63
    52b8:	f8 94       	cli
    52ba:	de bf       	out	0x3e, r29	; 62
    52bc:	0f be       	out	0x3f, r0	; 63
    52be:	cd bf       	out	0x3d, r28	; 61
    52c0:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__malloc_heap_end+0x1>
    52c4:	8f 93       	push	r24
    52c6:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <__malloc_heap_end>
    52ca:	8f 93       	push	r24
    52cc:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__malloc_heap_start+0x1>
    52d0:	8f 93       	push	r24
    52d2:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <__malloc_heap_start>
    52d6:	8f 93       	push	r24
    52d8:	8f e7       	ldi	r24, 0x7F	; 127
    52da:	93 e0       	ldi	r25, 0x03	; 3
    52dc:	1f 92       	push	r1
    52de:	9f 93       	push	r25
    52e0:	8f 93       	push	r24
    52e2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    52e6:	80 91 a5 20 	lds	r24, 0x20A5	; 0x8020a5 <__brkval+0x1>
    52ea:	8f 93       	push	r24
    52ec:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <__brkval>
    52f0:	8f 93       	push	r24
    52f2:	8b e6       	ldi	r24, 0x6B	; 107
    52f4:	93 e0       	ldi	r25, 0x03	; 3
    52f6:	1f 92       	push	r1
    52f8:	9f 93       	push	r25
    52fa:	8f 93       	push	r24
    52fc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>

}
    5300:	0f b6       	in	r0, 0x3f	; 63
    5302:	f8 94       	cli
    5304:	de bf       	out	0x3e, r29	; 62
    5306:	0f be       	out	0x3f, r0	; 63
    5308:	cd bf       	out	0x3d, r28	; 61
    530a:	22 96       	adiw	r28, 0x02	; 2
    530c:	e2 e0       	ldi	r30, 0x02	; 2
    530e:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

00005312 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    5312:	ef 92       	push	r14
    5314:	ff 92       	push	r15
    5316:	0f 93       	push	r16
    5318:	1f 93       	push	r17
    531a:	cf 93       	push	r28
    531c:	df 93       	push	r29
    531e:	18 2f       	mov	r17, r24
    5320:	09 2f       	mov	r16, r25
    5322:	f6 2e       	mov	r15, r22
    5324:	e7 2e       	mov	r14, r23
	void *p = calloc(size, elements);
    5326:	0e 94 dc e7 	call	0x1cfb8	; 0x1cfb8 <calloc>
    532a:	ec 01       	movw	r28, r24
	if(!p)
    532c:	89 2b       	or	r24, r25
    532e:	99 f4       	brne	.+38     	; 0x5356 <safecalloc+0x44>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    5330:	ef 92       	push	r14
    5332:	ff 92       	push	r15
    5334:	0f 93       	push	r16
    5336:	1f 93       	push	r17
    5338:	80 e5       	ldi	r24, 0x50	; 80
    533a:	93 e0       	ldi	r25, 0x03	; 3
    533c:	1f 92       	push	r1
    533e:	9f 93       	push	r25
    5340:	8f 93       	push	r24
    5342:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    5346:	8d b7       	in	r24, 0x3d	; 61
    5348:	9e b7       	in	r25, 0x3e	; 62
    534a:	07 96       	adiw	r24, 0x07	; 7
    534c:	0f b6       	in	r0, 0x3f	; 63
    534e:	f8 94       	cli
    5350:	9e bf       	out	0x3e, r25	; 62
    5352:	0f be       	out	0x3f, r0	; 63
    5354:	8d bf       	out	0x3d, r24	; 61
	}
	return(p);
}
    5356:	ce 01       	movw	r24, r28
    5358:	cd b7       	in	r28, 0x3d	; 61
    535a:	de b7       	in	r29, 0x3e	; 62
    535c:	e6 e0       	ldi	r30, 0x06	; 6
    535e:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

00005362 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    5362:	0f 93       	push	r16
    5364:	1f 93       	push	r17
    5366:	cf 93       	push	r28
    5368:	df 93       	push	r29
    536a:	18 2f       	mov	r17, r24
    536c:	09 2f       	mov	r16, r25
    void *p = calloc(size, 1);
    536e:	61 e0       	ldi	r22, 0x01	; 1
    5370:	70 e0       	ldi	r23, 0x00	; 0
    5372:	0e 94 dc e7 	call	0x1cfb8	; 0x1cfb8 <calloc>
    5376:	ec 01       	movw	r28, r24
    if(!p)
    5378:	89 2b       	or	r24, r25
    537a:	71 f4       	brne	.+28     	; 0x5398 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    537c:	0f 93       	push	r16
    537e:	1f 93       	push	r17
    5380:	88 e3       	ldi	r24, 0x38	; 56
    5382:	93 e0       	ldi	r25, 0x03	; 3
    5384:	1f 92       	push	r1
    5386:	9f 93       	push	r25
    5388:	8f 93       	push	r24
    538a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    538e:	0f 90       	pop	r0
    5390:	0f 90       	pop	r0
    5392:	0f 90       	pop	r0
    5394:	0f 90       	pop	r0
    5396:	0f 90       	pop	r0
    }
    return(p);
}
    5398:	ce 01       	movw	r24, r28
    539a:	df 91       	pop	r29
    539c:	cf 91       	pop	r28
    539e:	1f 91       	pop	r17
    53a0:	0f 91       	pop	r16
    53a2:	08 95       	ret

000053a4 <safefree>:
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    53a4:	00 97       	sbiw	r24, 0x00	; 0
    53a6:	39 f1       	breq	.+78     	; 0x53f6 <safefree+0x52>
        return;

    if(__brkval)
    53a8:	20 91 a4 20 	lds	r18, 0x20A4	; 0x8020a4 <__brkval>
    53ac:	30 91 a5 20 	lds	r19, 0x20A5	; 0x8020a5 <__brkval+0x1>
    53b0:	21 15       	cp	r18, r1
    53b2:	31 05       	cpc	r19, r1
    53b4:	11 f4       	brne	.+4      	; 0x53ba <safefree+0x16>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    53b6:	28 ea       	ldi	r18, 0xA8	; 168
    53b8:	30 e2       	ldi	r19, 0x20	; 32

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    53ba:	40 e2       	ldi	r20, 0x20	; 32
    53bc:	88 3a       	cpi	r24, 0xA8	; 168
    53be:	94 07       	cpc	r25, r20
    53c0:	30 f0       	brcs	.+12     	; 0x53ce <safefree+0x2a>
    53c2:	28 17       	cp	r18, r24
    53c4:	39 07       	cpc	r19, r25
    53c6:	18 f0       	brcs	.+6      	; 0x53ce <safefree+0x2a>
        ((uint16_t) p <= top) )
    {
        free(p);
    53c8:	0c 94 8e e8 	jmp	0x1d11c	; 0x1d11c <free>
        return;
    53cc:	08 95       	ret
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    53ce:	3f 93       	push	r19
    53d0:	2f 93       	push	r18
    53d2:	9f 93       	push	r25
    53d4:	8f 93       	push	r24
    53d6:	83 e1       	ldi	r24, 0x13	; 19
    53d8:	93 e0       	ldi	r25, 0x03	; 3
    53da:	1f 92       	push	r1
    53dc:	9f 93       	push	r25
    53de:	8f 93       	push	r24
    53e0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    PrintFree();
    53e4:	13 df       	rcall	.-474    	; 0x520c <PrintFree>
    53e6:	8d b7       	in	r24, 0x3d	; 61
    53e8:	9e b7       	in	r25, 0x3e	; 62
    53ea:	07 96       	adiw	r24, 0x07	; 7
    53ec:	0f b6       	in	r0, 0x3f	; 63
    53ee:	f8 94       	cli
    53f0:	9e bf       	out	0x3e, r25	; 62
    53f2:	0f be       	out	0x3f, r0	; 63
    53f4:	8d bf       	out	0x3d, r24	; 61
    53f6:	08 95       	ret

000053f8 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    53f8:	64 36       	cpi	r22, 0x64	; 100
    53fa:	71 05       	cpc	r23, r1
    53fc:	81 05       	cpc	r24, r1
    53fe:	91 05       	cpc	r25, r1
    5400:	58 f0       	brcs	.+22     	; 0x5418 <delayus+0x20>
    {
        us -= 100U;
    5402:	64 56       	subi	r22, 0x64	; 100
    5404:	71 09       	sbc	r23, r1
    5406:	81 09       	sbc	r24, r1
    5408:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    540a:	e3 ef       	ldi	r30, 0xF3	; 243
    540c:	f1 e0       	ldi	r31, 0x01	; 1
    540e:	31 97       	sbiw	r30, 0x01	; 1
    5410:	f1 f7       	brne	.-4      	; 0x540e <delayus+0x16>
    5412:	00 c0       	rjmp	.+0      	; 0x5414 <delayus+0x1c>
    5414:	00 00       	nop
    5416:	f0 cf       	rjmp	.-32     	; 0x53f8 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    5418:	6a 30       	cpi	r22, 0x0A	; 10
    541a:	71 05       	cpc	r23, r1
    541c:	81 05       	cpc	r24, r1
    541e:	91 05       	cpc	r25, r1
    5420:	48 f0       	brcs	.+18     	; 0x5434 <delayus+0x3c>
    {
        us -= 10U;
    5422:	6a 50       	subi	r22, 0x0A	; 10
    5424:	71 09       	sbc	r23, r1
    5426:	81 09       	sbc	r24, r1
    5428:	91 09       	sbc	r25, r1
    542a:	f2 e4       	ldi	r31, 0x42	; 66
    542c:	fa 95       	dec	r31
    542e:	f1 f7       	brne	.-4      	; 0x542c <delayus+0x34>
    5430:	00 c0       	rjmp	.+0      	; 0x5432 <delayus+0x3a>
    5432:	f2 cf       	rjmp	.-28     	; 0x5418 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    5434:	61 15       	cp	r22, r1
    5436:	71 05       	cpc	r23, r1
    5438:	81 05       	cpc	r24, r1
    543a:	91 05       	cpc	r25, r1
    543c:	49 f0       	breq	.+18     	; 0x5450 <delayus+0x58>
    {
        --us;
    543e:	61 50       	subi	r22, 0x01	; 1
    5440:	71 09       	sbc	r23, r1
    5442:	81 09       	sbc	r24, r1
    5444:	91 09       	sbc	r25, r1
    5446:	26 e0       	ldi	r18, 0x06	; 6
    5448:	2a 95       	dec	r18
    544a:	f1 f7       	brne	.-4      	; 0x5448 <delayus+0x50>
    544c:	00 c0       	rjmp	.+0      	; 0x544e <delayus+0x56>
    544e:	f2 cf       	rjmp	.-28     	; 0x5434 <delayus+0x3c>
        _delay_us(1);
    }
}
    5450:	08 95       	ret

00005452 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    5452:	61 15       	cp	r22, r1
    5454:	71 05       	cpc	r23, r1
    5456:	81 05       	cpc	r24, r1
    5458:	91 05       	cpc	r25, r1
    545a:	09 f4       	brne	.+2      	; 0x545e <delayms+0xc>
    545c:	41 c0       	rjmp	.+130    	; 0x54e0 <delayms+0x8e>
    545e:	e3 ef       	ldi	r30, 0xF3	; 243
    5460:	f1 e0       	ldi	r31, 0x01	; 1
    5462:	31 97       	sbiw	r30, 0x01	; 1
    5464:	f1 f7       	brne	.-4      	; 0x5462 <delayms+0x10>
    5466:	00 c0       	rjmp	.+0      	; 0x5468 <delayms+0x16>
    5468:	00 00       	nop
    546a:	e3 ef       	ldi	r30, 0xF3	; 243
    546c:	f1 e0       	ldi	r31, 0x01	; 1
    546e:	31 97       	sbiw	r30, 0x01	; 1
    5470:	f1 f7       	brne	.-4      	; 0x546e <delayms+0x1c>
    5472:	00 c0       	rjmp	.+0      	; 0x5474 <delayms+0x22>
    5474:	00 00       	nop
    5476:	e3 ef       	ldi	r30, 0xF3	; 243
    5478:	f1 e0       	ldi	r31, 0x01	; 1
    547a:	31 97       	sbiw	r30, 0x01	; 1
    547c:	f1 f7       	brne	.-4      	; 0x547a <delayms+0x28>
    547e:	00 c0       	rjmp	.+0      	; 0x5480 <delayms+0x2e>
    5480:	00 00       	nop
    5482:	e3 ef       	ldi	r30, 0xF3	; 243
    5484:	f1 e0       	ldi	r31, 0x01	; 1
    5486:	31 97       	sbiw	r30, 0x01	; 1
    5488:	f1 f7       	brne	.-4      	; 0x5486 <delayms+0x34>
    548a:	00 c0       	rjmp	.+0      	; 0x548c <delayms+0x3a>
    548c:	00 00       	nop
    548e:	e3 ef       	ldi	r30, 0xF3	; 243
    5490:	f1 e0       	ldi	r31, 0x01	; 1
    5492:	31 97       	sbiw	r30, 0x01	; 1
    5494:	f1 f7       	brne	.-4      	; 0x5492 <delayms+0x40>
    5496:	00 c0       	rjmp	.+0      	; 0x5498 <delayms+0x46>
    5498:	00 00       	nop
    549a:	e3 ef       	ldi	r30, 0xF3	; 243
    549c:	f1 e0       	ldi	r31, 0x01	; 1
    549e:	31 97       	sbiw	r30, 0x01	; 1
    54a0:	f1 f7       	brne	.-4      	; 0x549e <delayms+0x4c>
    54a2:	00 c0       	rjmp	.+0      	; 0x54a4 <delayms+0x52>
    54a4:	00 00       	nop
    54a6:	e3 ef       	ldi	r30, 0xF3	; 243
    54a8:	f1 e0       	ldi	r31, 0x01	; 1
    54aa:	31 97       	sbiw	r30, 0x01	; 1
    54ac:	f1 f7       	brne	.-4      	; 0x54aa <delayms+0x58>
    54ae:	00 c0       	rjmp	.+0      	; 0x54b0 <delayms+0x5e>
    54b0:	00 00       	nop
    54b2:	e3 ef       	ldi	r30, 0xF3	; 243
    54b4:	f1 e0       	ldi	r31, 0x01	; 1
    54b6:	31 97       	sbiw	r30, 0x01	; 1
    54b8:	f1 f7       	brne	.-4      	; 0x54b6 <delayms+0x64>
    54ba:	00 c0       	rjmp	.+0      	; 0x54bc <delayms+0x6a>
    54bc:	00 00       	nop
    54be:	e3 ef       	ldi	r30, 0xF3	; 243
    54c0:	f1 e0       	ldi	r31, 0x01	; 1
    54c2:	31 97       	sbiw	r30, 0x01	; 1
    54c4:	f1 f7       	brne	.-4      	; 0x54c2 <delayms+0x70>
    54c6:	00 c0       	rjmp	.+0      	; 0x54c8 <delayms+0x76>
    54c8:	00 00       	nop
    54ca:	e3 ef       	ldi	r30, 0xF3	; 243
    54cc:	f1 e0       	ldi	r31, 0x01	; 1
    54ce:	31 97       	sbiw	r30, 0x01	; 1
    54d0:	f1 f7       	brne	.-4      	; 0x54ce <delayms+0x7c>
    54d2:	00 c0       	rjmp	.+0      	; 0x54d4 <delayms+0x82>
    54d4:	00 00       	nop
    54d6:	61 50       	subi	r22, 0x01	; 1
    54d8:	71 09       	sbc	r23, r1
    54da:	81 09       	sbc	r24, r1
    54dc:	91 09       	sbc	r25, r1
    54de:	b9 cf       	rjmp	.-142    	; 0x5452 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    54e0:	08 95       	ret

000054e2 <uart_ubr>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    54e2:	4f 92       	push	r4
    54e4:	5f 92       	push	r5
    54e6:	6f 92       	push	r6
    54e8:	7f 92       	push	r7
    54ea:	8f 92       	push	r8
    54ec:	9f 92       	push	r9
    54ee:	af 92       	push	r10
    54f0:	bf 92       	push	r11
    54f2:	cf 92       	push	r12
    54f4:	df 92       	push	r13
    54f6:	ef 92       	push	r14
    54f8:	ff 92       	push	r15
    54fa:	cf 93       	push	r28
    54fc:	df 93       	push	r29
    54fe:	5a 01       	movw	r10, r20
    5500:	e9 01       	movw	r28, r18
    5502:	0e 94 7a e6 	call	0x1ccf4	; 0x1ccf4 <__floatunsisf>
    5506:	2b 01       	movw	r4, r22
    5508:	3c 01       	movw	r6, r24
    550a:	20 e0       	ldi	r18, 0x00	; 0
    550c:	30 e0       	ldi	r19, 0x00	; 0
    550e:	40 e0       	ldi	r20, 0x00	; 0
    5510:	51 e4       	ldi	r21, 0x41	; 65
    5512:	0e 94 30 e7 	call	0x1ce60	; 0x1ce60 <__mulsf3>
    5516:	9b 01       	movw	r18, r22
    5518:	ac 01       	movw	r20, r24
    551a:	60 e8       	ldi	r22, 0x80	; 128
    551c:	76 e9       	ldi	r23, 0x96	; 150
    551e:	88 e9       	ldi	r24, 0x98	; 152
    5520:	9b e4       	ldi	r25, 0x4B	; 75
    5522:	0e 94 e1 e5 	call	0x1cbc2	; 0x1cbc2 <__divsf3>
    5526:	20 e0       	ldi	r18, 0x00	; 0
    5528:	30 e0       	ldi	r19, 0x00	; 0
    552a:	40 e8       	ldi	r20, 0x80	; 128
    552c:	5f e3       	ldi	r21, 0x3F	; 63
    552e:	0e 94 78 e5 	call	0x1caf0	; 0x1caf0 <__subsf3>
    5532:	0e 94 93 e7 	call	0x1cf26	; 0x1cf26 <round>
    5536:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__fixunssfsi>
    553a:	6b 01       	movw	r12, r22
    553c:	7c 01       	movw	r14, r24
    553e:	c1 14       	cp	r12, r1
    5540:	80 e1       	ldi	r24, 0x10	; 16
    5542:	d8 06       	cpc	r13, r24
    5544:	e1 04       	cpc	r14, r1
    5546:	f1 04       	cpc	r15, r1
    5548:	58 f4       	brcc	.+22     	; 0x5560 <uart_ubr+0x7e>
    554a:	81 e0       	ldi	r24, 0x01	; 1
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	f5 01       	movw	r30, r10
    5550:	91 83       	std	Z+1, r25	; 0x01
    5552:	80 83       	st	Z, r24
    5554:	81 2c       	mov	r8, r1
    5556:	91 2c       	mov	r9, r1
    5558:	a1 2c       	mov	r10, r1
    555a:	21 e4       	ldi	r18, 0x41	; 65
    555c:	b2 2e       	mov	r11, r18
    555e:	31 c0       	rjmp	.+98     	; 0x55c2 <uart_ubr+0xe0>
    5560:	f5 01       	movw	r30, r10
    5562:	11 82       	std	Z+1, r1	; 0x01
    5564:	10 82       	st	Z, r1
    5566:	20 e0       	ldi	r18, 0x00	; 0
    5568:	30 e0       	ldi	r19, 0x00	; 0
    556a:	40 e8       	ldi	r20, 0x80	; 128
    556c:	51 e4       	ldi	r21, 0x41	; 65
    556e:	c3 01       	movw	r24, r6
    5570:	b2 01       	movw	r22, r4
    5572:	0e 94 30 e7 	call	0x1ce60	; 0x1ce60 <__mulsf3>
    5576:	9b 01       	movw	r18, r22
    5578:	ac 01       	movw	r20, r24
    557a:	60 e8       	ldi	r22, 0x80	; 128
    557c:	76 e9       	ldi	r23, 0x96	; 150
    557e:	88 e9       	ldi	r24, 0x98	; 152
    5580:	9b e4       	ldi	r25, 0x4B	; 75
    5582:	0e 94 e1 e5 	call	0x1cbc2	; 0x1cbc2 <__divsf3>
    5586:	20 e0       	ldi	r18, 0x00	; 0
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	40 e8       	ldi	r20, 0x80	; 128
    558c:	5f e3       	ldi	r21, 0x3F	; 63
    558e:	0e 94 78 e5 	call	0x1caf0	; 0x1caf0 <__subsf3>
    5592:	0e 94 93 e7 	call	0x1cf26	; 0x1cf26 <round>
    5596:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__fixunssfsi>
    559a:	6b 01       	movw	r12, r22
    559c:	7c 01       	movw	r14, r24
    559e:	81 2c       	mov	r8, r1
    55a0:	91 2c       	mov	r9, r1
    55a2:	90 e8       	ldi	r25, 0x80	; 128
    55a4:	a9 2e       	mov	r10, r25
    55a6:	91 e4       	ldi	r25, 0x41	; 65
    55a8:	b9 2e       	mov	r11, r25
    55aa:	c1 14       	cp	r12, r1
    55ac:	f0 e1       	ldi	r31, 0x10	; 16
    55ae:	df 06       	cpc	r13, r31
    55b0:	e1 04       	cpc	r14, r1
    55b2:	f1 04       	cpc	r15, r1
    55b4:	30 f0       	brcs	.+12     	; 0x55c2 <uart_ubr+0xe0>
    55b6:	cc 24       	eor	r12, r12
    55b8:	ca 94       	dec	r12
    55ba:	8f e0       	ldi	r24, 0x0F	; 15
    55bc:	d8 2e       	mov	r13, r24
    55be:	e1 2c       	mov	r14, r1
    55c0:	f1 2c       	mov	r15, r1
    55c2:	c7 01       	movw	r24, r14
    55c4:	b6 01       	movw	r22, r12
    55c6:	6f 5f       	subi	r22, 0xFF	; 255
    55c8:	7f 4f       	sbci	r23, 0xFF	; 255
    55ca:	8f 4f       	sbci	r24, 0xFF	; 255
    55cc:	9f 4f       	sbci	r25, 0xFF	; 255
    55ce:	0e 94 7a e6 	call	0x1ccf4	; 0x1ccf4 <__floatunsisf>
    55d2:	a5 01       	movw	r20, r10
    55d4:	94 01       	movw	r18, r8
    55d6:	0e 94 30 e7 	call	0x1ce60	; 0x1ce60 <__mulsf3>
    55da:	9b 01       	movw	r18, r22
    55dc:	ac 01       	movw	r20, r24
    55de:	60 e8       	ldi	r22, 0x80	; 128
    55e0:	76 e9       	ldi	r23, 0x96	; 150
    55e2:	88 e9       	ldi	r24, 0x98	; 152
    55e4:	9b e4       	ldi	r25, 0x4B	; 75
    55e6:	0e 94 e1 e5 	call	0x1cbc2	; 0x1cbc2 <__divsf3>
    55ea:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__fixunssfsi>
    55ee:	68 83       	st	Y, r22
    55f0:	79 83       	std	Y+1, r23	; 0x01
    55f2:	8a 83       	std	Y+2, r24	; 0x02
    55f4:	9b 83       	std	Y+3, r25	; 0x03
    55f6:	c6 01       	movw	r24, r12
    55f8:	df 91       	pop	r29
    55fa:	cf 91       	pop	r28
    55fc:	ff 90       	pop	r15
    55fe:	ef 90       	pop	r14
    5600:	df 90       	pop	r13
    5602:	cf 90       	pop	r12
    5604:	bf 90       	pop	r11
    5606:	af 90       	pop	r10
    5608:	9f 90       	pop	r9
    560a:	8f 90       	pop	r8
    560c:	7f 90       	pop	r7
    560e:	6f 90       	pop	r6
    5610:	5f 90       	pop	r5
    5612:	4f 90       	pop	r4
    5614:	08 95       	ret

00005616 <uart_init>:
    5616:	a6 e0       	ldi	r26, 0x06	; 6
    5618:	b0 e0       	ldi	r27, 0x00	; 0
    561a:	e1 e1       	ldi	r30, 0x11	; 17
    561c:	fb e2       	ldi	r31, 0x2B	; 43
    561e:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    5622:	1e 82       	std	Y+6, r1	; 0x06
    5624:	1d 82       	std	Y+5, r1	; 0x05
    5626:	81 11       	cpse	r24, r1
    5628:	36 c0       	rjmp	.+108    	; 0x5696 <uart_init+0x80>
    562a:	cb 01       	movw	r24, r22
    562c:	ba 01       	movw	r22, r20
    562e:	9e 01       	movw	r18, r28
    5630:	2f 5f       	subi	r18, 0xFF	; 255
    5632:	3f 4f       	sbci	r19, 0xFF	; 255
    5634:	ae 01       	movw	r20, r28
    5636:	4b 5f       	subi	r20, 0xFB	; 251
    5638:	5f 4f       	sbci	r21, 0xFF	; 255
    563a:	53 df       	rcall	.-346    	; 0x54e2 <uart_ubr>
    563c:	f8 94       	cli
    563e:	10 92 ef 18 	sts	0x18EF, r1	; 0x8018ef <uarts+0x4>
    5642:	10 92 ee 18 	sts	0x18EE, r1	; 0x8018ee <uarts+0x3>
    5646:	10 92 eb 18 	sts	0x18EB, r1	; 0x8018eb <uarts>
    564a:	10 92 ec 18 	sts	0x18EC, r1	; 0x8018ec <uarts+0x1>
    564e:	10 92 ed 18 	sts	0x18ED, r1	; 0x8018ed <uarts+0x2>
    5652:	10 92 f0 18 	sts	0x18F0, r1	; 0x8018f0 <uarts+0x5>
    5656:	78 94       	sei
    5658:	f8 94       	cli
    565a:	58 9a       	sbi	0x0b, 0	; 11
    565c:	59 9a       	sbi	0x0b, 1	; 11
    565e:	50 98       	cbi	0x0a, 0	; 10
    5660:	51 9a       	sbi	0x0a, 1	; 10
    5662:	28 e9       	ldi	r18, 0x98	; 152
    5664:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5668:	2d 81       	ldd	r18, Y+5	; 0x05
    566a:	3e 81       	ldd	r19, Y+6	; 0x06
    566c:	23 2b       	or	r18, r19
    566e:	19 f0       	breq	.+6      	; 0x5676 <uart_init+0x60>
    5670:	22 e0       	ldi	r18, 0x02	; 2
    5672:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5676:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    567a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    567e:	78 94       	sei
    5680:	60 e0       	ldi	r22, 0x00	; 0
    5682:	7c e2       	ldi	r23, 0x2C	; 44
    5684:	85 e1       	ldi	r24, 0x15	; 21
    5686:	9c e2       	ldi	r25, 0x2C	; 44
    5688:	0e 94 13 79 	call	0xf226	; 0xf226 <fdevopen>
    568c:	69 81       	ldd	r22, Y+1	; 0x01
    568e:	7a 81       	ldd	r23, Y+2	; 0x02
    5690:	8b 81       	ldd	r24, Y+3	; 0x03
    5692:	9c 81       	ldd	r25, Y+4	; 0x04
    5694:	03 c0       	rjmp	.+6      	; 0x569c <uart_init+0x86>
    5696:	60 e0       	ldi	r22, 0x00	; 0
    5698:	70 e0       	ldi	r23, 0x00	; 0
    569a:	cb 01       	movw	r24, r22
    569c:	26 96       	adiw	r28, 0x06	; 6
    569e:	e2 e0       	ldi	r30, 0x02	; 2
    56a0:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

000056a4 <uart_rx_interrupt>:
    56a4:	27 e5       	ldi	r18, 0x57	; 87
    56a6:	82 9f       	mul	r24, r18
    56a8:	c0 01       	movw	r24, r0
    56aa:	11 24       	eor	r1, r1
    56ac:	fc 01       	movw	r30, r24
    56ae:	e5 51       	subi	r30, 0x15	; 21
    56b0:	f7 4e       	sbci	r31, 0xE7	; 231
    56b2:	83 81       	ldd	r24, Z+3	; 0x03
    56b4:	94 81       	ldd	r25, Z+4	; 0x04
    56b6:	80 35       	cpi	r24, 0x50	; 80
    56b8:	91 05       	cpc	r25, r1
    56ba:	84 f4       	brge	.+32     	; 0x56dc <uart_rx_interrupt+0x38>
    56bc:	30 81       	ld	r19, Z
    56be:	21 e0       	ldi	r18, 0x01	; 1
    56c0:	23 0f       	add	r18, r19
    56c2:	20 83       	st	Z, r18
    56c4:	df 01       	movw	r26, r30
    56c6:	a3 0f       	add	r26, r19
    56c8:	b1 1d       	adc	r27, r1
    56ca:	16 96       	adiw	r26, 0x06	; 6
    56cc:	6c 93       	st	X, r22
    56ce:	01 96       	adiw	r24, 0x01	; 1
    56d0:	94 83       	std	Z+4, r25	; 0x04
    56d2:	83 83       	std	Z+3, r24	; 0x03
    56d4:	20 35       	cpi	r18, 0x50	; 80
    56d6:	28 f0       	brcs	.+10     	; 0x56e2 <uart_rx_interrupt+0x3e>
    56d8:	10 82       	st	Z, r1
    56da:	08 95       	ret
    56dc:	85 81       	ldd	r24, Z+5	; 0x05
    56de:	81 60       	ori	r24, 0x01	; 1
    56e0:	85 83       	std	Z+5, r24	; 0x05
    56e2:	08 95       	ret

000056e4 <__vector_20>:
    56e4:	1f 92       	push	r1
    56e6:	0f 92       	push	r0
    56e8:	0f b6       	in	r0, 0x3f	; 63
    56ea:	0f 92       	push	r0
    56ec:	11 24       	eor	r1, r1
    56ee:	0b b6       	in	r0, 0x3b	; 59
    56f0:	0f 92       	push	r0
    56f2:	2f 93       	push	r18
    56f4:	3f 93       	push	r19
    56f6:	4f 93       	push	r20
    56f8:	5f 93       	push	r21
    56fa:	6f 93       	push	r22
    56fc:	7f 93       	push	r23
    56fe:	8f 93       	push	r24
    5700:	9f 93       	push	r25
    5702:	af 93       	push	r26
    5704:	bf 93       	push	r27
    5706:	ef 93       	push	r30
    5708:	ff 93       	push	r31
    570a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    570e:	80 e0       	ldi	r24, 0x00	; 0
    5710:	c9 df       	rcall	.-110    	; 0x56a4 <uart_rx_interrupt>
    5712:	ff 91       	pop	r31
    5714:	ef 91       	pop	r30
    5716:	bf 91       	pop	r27
    5718:	af 91       	pop	r26
    571a:	9f 91       	pop	r25
    571c:	8f 91       	pop	r24
    571e:	7f 91       	pop	r23
    5720:	6f 91       	pop	r22
    5722:	5f 91       	pop	r21
    5724:	4f 91       	pop	r20
    5726:	3f 91       	pop	r19
    5728:	2f 91       	pop	r18
    572a:	0f 90       	pop	r0
    572c:	0b be       	out	0x3b, r0	; 59
    572e:	0f 90       	pop	r0
    5730:	0f be       	out	0x3f, r0	; 63
    5732:	0f 90       	pop	r0
    5734:	1f 90       	pop	r1
    5736:	18 95       	reti

00005738 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5738:	81 11       	cpse	r24, r1
    573a:	07 c0       	rjmp	.+14     	; 0x574a <uart_rx_count+0x12>
        return(EOF);

    cli();
    573c:	f8 94       	cli

    count = uarts[uart].rx_count;
    573e:	80 91 ee 18 	lds	r24, 0x18EE	; 0x8018ee <uarts+0x3>
    5742:	90 91 ef 18 	lds	r25, 0x18EF	; 0x8018ef <uarts+0x4>

    sei();
    5746:	78 94       	sei

    return (count );
    5748:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    574a:	8f ef       	ldi	r24, 0xFF	; 255
    574c:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    574e:	08 95       	ret

00005750 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    5750:	81 11       	cpse	r24, r1
    5752:	21 c0       	rjmp	.+66     	; 0x5796 <uart_get_tail+0x46>
	{
        return(EOF);
	}

	while(uart_rx_count(uart) < 1)
    5754:	80 e0       	ldi	r24, 0x00	; 0
    5756:	f0 df       	rcall	.-32     	; 0x5738 <uart_rx_count>
    5758:	18 16       	cp	r1, r24
    575a:	19 06       	cpc	r1, r25
    575c:	dc f7       	brge	.-10     	; 0x5754 <uart_get_tail+0x4>
		;

    cli();
    575e:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5760:	e0 91 ec 18 	lds	r30, 0x18EC	; 0x8018ec <uarts+0x1>
    5764:	91 e0       	ldi	r25, 0x01	; 1
    5766:	9e 0f       	add	r25, r30
    5768:	90 93 ec 18 	sts	0x18EC, r25	; 0x8018ec <uarts+0x1>
    576c:	f0 e0       	ldi	r31, 0x00	; 0
    576e:	e5 51       	subi	r30, 0x15	; 21
    5770:	f7 4e       	sbci	r31, 0xE7	; 231
    5772:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5774:	90 35       	cpi	r25, 0x50	; 80
    5776:	10 f0       	brcs	.+4      	; 0x577c <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    5778:	10 92 ec 18 	sts	0x18EC, r1	; 0x8018ec <uarts+0x1>
    uarts[uart].rx_count--;
    577c:	20 91 ee 18 	lds	r18, 0x18EE	; 0x8018ee <uarts+0x3>
    5780:	30 91 ef 18 	lds	r19, 0x18EF	; 0x8018ef <uarts+0x4>
    5784:	21 50       	subi	r18, 0x01	; 1
    5786:	31 09       	sbc	r19, r1
    5788:	30 93 ef 18 	sts	0x18EF, r19	; 0x8018ef <uarts+0x4>
    578c:	20 93 ee 18 	sts	0x18EE, r18	; 0x8018ee <uarts+0x3>
    sei();
    5790:	78 94       	sei

    return (c & 0xff);
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
	{
        return(EOF);
    5796:	8f ef       	ldi	r24, 0xFF	; 255
    5798:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    579a:	08 95       	ret

0000579c <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    579c:	d9 df       	rcall	.-78     	; 0x5750 <uart_get_tail>
    579e:	99 27       	eor	r25, r25
    57a0:	08 95       	ret

000057a2 <uart_tx_byte>:
    57a2:	61 11       	cpse	r22, r1
    57a4:	09 c0       	rjmp	.+18     	; 0x57b8 <uart_tx_byte+0x16>
    57a6:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    57aa:	25 ff       	sbrs	r18, 5
    57ac:	fc cf       	rjmp	.-8      	; 0x57a6 <uart_tx_byte+0x4>
    57ae:	28 2f       	mov	r18, r24
    57b0:	2f 77       	andi	r18, 0x7F	; 127
    57b2:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    57b6:	08 95       	ret
    57b8:	61 30       	cpi	r22, 0x01	; 1
    57ba:	49 f4       	brne	.+18     	; 0x57ce <uart_tx_byte+0x2c>
    57bc:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    57c0:	25 ff       	sbrs	r18, 5
    57c2:	fc cf       	rjmp	.-8      	; 0x57bc <uart_tx_byte+0x1a>
    57c4:	28 2f       	mov	r18, r24
    57c6:	2f 77       	andi	r18, 0x7F	; 127
    57c8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    57cc:	08 95       	ret
    57ce:	8f ef       	ldi	r24, 0xFF	; 255
    57d0:	9f ef       	ldi	r25, 0xFF	; 255
    57d2:	08 95       	ret

000057d4 <uart_getchar>:
    57d4:	cf 93       	push	r28
    57d6:	81 11       	cpse	r24, r1
    57d8:	0f c0       	rjmp	.+30     	; 0x57f8 <uart_getchar+0x24>
    57da:	e0 df       	rcall	.-64     	; 0x579c <uart_rx_byte>
    57dc:	c8 2f       	mov	r28, r24
    57de:	60 e0       	ldi	r22, 0x00	; 0
    57e0:	90 e0       	ldi	r25, 0x00	; 0
    57e2:	df df       	rcall	.-66     	; 0x57a2 <uart_tx_byte>
    57e4:	cd 30       	cpi	r28, 0x0D	; 13
    57e6:	29 f4       	brne	.+10     	; 0x57f2 <uart_getchar+0x1e>
    57e8:	60 e0       	ldi	r22, 0x00	; 0
    57ea:	8a e0       	ldi	r24, 0x0A	; 10
    57ec:	90 e0       	ldi	r25, 0x00	; 0
    57ee:	d9 df       	rcall	.-78     	; 0x57a2 <uart_tx_byte>
    57f0:	ca e0       	ldi	r28, 0x0A	; 10
    57f2:	8c 2f       	mov	r24, r28
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	02 c0       	rjmp	.+4      	; 0x57fc <uart_getchar+0x28>
    57f8:	8f ef       	ldi	r24, 0xFF	; 255
    57fa:	9f ef       	ldi	r25, 0xFF	; 255
    57fc:	cf 91       	pop	r28
    57fe:	08 95       	ret

00005800 <uart0_getchar>:
    5800:	80 e0       	ldi	r24, 0x00	; 0
    5802:	e8 cf       	rjmp	.-48     	; 0x57d4 <uart_getchar>
    5804:	08 95       	ret

00005806 <uart_putchar>:
    5806:	1f 93       	push	r17
    5808:	cf 93       	push	r28
    580a:	df 93       	push	r29
    580c:	ec 01       	movw	r28, r24
    580e:	16 2f       	mov	r17, r22
    5810:	c8 df       	rcall	.-112    	; 0x57a2 <uart_tx_byte>
    5812:	ca 30       	cpi	r28, 0x0A	; 10
    5814:	d1 05       	cpc	r29, r1
    5816:	21 f4       	brne	.+8      	; 0x5820 <uart_putchar+0x1a>
    5818:	61 2f       	mov	r22, r17
    581a:	8d e0       	ldi	r24, 0x0D	; 13
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	c1 df       	rcall	.-126    	; 0x57a2 <uart_tx_byte>
    5820:	ce 01       	movw	r24, r28
    5822:	df 91       	pop	r29
    5824:	cf 91       	pop	r28
    5826:	1f 91       	pop	r17
    5828:	08 95       	ret

0000582a <uart0_putchar>:
    582a:	cf 93       	push	r28
    582c:	df 93       	push	r29
    582e:	ec 01       	movw	r28, r24
    5830:	60 e0       	ldi	r22, 0x00	; 0
    5832:	70 e0       	ldi	r23, 0x00	; 0
    5834:	e8 df       	rcall	.-48     	; 0x5806 <uart_putchar>
    5836:	ce 01       	movw	r24, r28
    5838:	df 91       	pop	r29
    583a:	cf 91       	pop	r28
    583c:	08 95       	ret

0000583e <uart_keyhit>:
    583e:	7c cf       	rjmp	.-264    	; 0x5738 <uart_rx_count>
    5840:	08 95       	ret

00005842 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    5842:	cf 92       	push	r12
    5844:	df 92       	push	r13
    5846:	ef 92       	push	r14
    5848:	ff 92       	push	r15
    584a:	6b 01       	movw	r12, r22
    584c:	7c 01       	movw	r14, r24
    584e:	80 91 48 17 	lds	r24, 0x1748	; 0x801748 <SPI0_Speed_value>
    5852:	90 91 49 17 	lds	r25, 0x1749	; 0x801749 <SPI0_Speed_value+0x1>
    5856:	a0 91 4a 17 	lds	r26, 0x174A	; 0x80174a <SPI0_Speed_value+0x2>
    585a:	b0 91 4b 17 	lds	r27, 0x174B	; 0x80174b <SPI0_Speed_value+0x3>
    585e:	8c 15       	cp	r24, r12
    5860:	9d 05       	cpc	r25, r13
    5862:	ae 05       	cpc	r26, r14
    5864:	bf 05       	cpc	r27, r15
    5866:	09 f4       	brne	.+2      	; 0x586a <SPI0_Speed+0x28>
    5868:	4e c0       	rjmp	.+156    	; 0x5906 <SPI0_Speed+0xc4>
    586a:	60 e0       	ldi	r22, 0x00	; 0
    586c:	7d e2       	ldi	r23, 0x2D	; 45
    586e:	81 e3       	ldi	r24, 0x31	; 49
    5870:	91 e0       	ldi	r25, 0x01	; 1
    5872:	a7 01       	movw	r20, r14
    5874:	96 01       	movw	r18, r12
    5876:	0e 94 ac e4 	call	0x1c958	; 0x1c958 <__udivmodsi4>
    587a:	20 38       	cpi	r18, 0x80	; 128
    587c:	31 05       	cpc	r19, r1
    587e:	41 05       	cpc	r20, r1
    5880:	51 05       	cpc	r21, r1
    5882:	28 f4       	brcc	.+10     	; 0x588e <SPI0_Speed+0x4c>
    5884:	20 34       	cpi	r18, 0x40	; 64
    5886:	31 05       	cpc	r19, r1
    5888:	41 05       	cpc	r20, r1
    588a:	51 05       	cpc	r21, r1
    588c:	30 f0       	brcs	.+12     	; 0x589a <SPI0_Speed+0x58>
    588e:	8d b5       	in	r24, 0x2d	; 45
    5890:	8e 7f       	andi	r24, 0xFE	; 254
    5892:	8d bd       	out	0x2d, r24	; 45
    5894:	8c b5       	in	r24, 0x2c	; 44
    5896:	82 60       	ori	r24, 0x02	; 2
    5898:	1b c0       	rjmp	.+54     	; 0x58d0 <SPI0_Speed+0x8e>
    589a:	8d b5       	in	r24, 0x2d	; 45
    589c:	20 32       	cpi	r18, 0x20	; 32
    589e:	31 05       	cpc	r19, r1
    58a0:	41 05       	cpc	r20, r1
    58a2:	51 05       	cpc	r21, r1
    58a4:	28 f0       	brcs	.+10     	; 0x58b0 <SPI0_Speed+0x6e>
    58a6:	81 60       	ori	r24, 0x01	; 1
    58a8:	8d bd       	out	0x2d, r24	; 45
    58aa:	8c b5       	in	r24, 0x2c	; 44
    58ac:	82 60       	ori	r24, 0x02	; 2
    58ae:	1f c0       	rjmp	.+62     	; 0x58ee <SPI0_Speed+0xac>
    58b0:	20 31       	cpi	r18, 0x10	; 16
    58b2:	31 05       	cpc	r19, r1
    58b4:	41 05       	cpc	r20, r1
    58b6:	51 05       	cpc	r21, r1
    58b8:	10 f0       	brcs	.+4      	; 0x58be <SPI0_Speed+0x7c>
    58ba:	8e 7f       	andi	r24, 0xFE	; 254
    58bc:	06 c0       	rjmp	.+12     	; 0x58ca <SPI0_Speed+0x88>
    58be:	28 30       	cpi	r18, 0x08	; 8
    58c0:	31 05       	cpc	r19, r1
    58c2:	41 05       	cpc	r20, r1
    58c4:	51 05       	cpc	r21, r1
    58c6:	40 f0       	brcs	.+16     	; 0x58d8 <SPI0_Speed+0x96>
    58c8:	81 60       	ori	r24, 0x01	; 1
    58ca:	8d bd       	out	0x2d, r24	; 45
    58cc:	8c b5       	in	r24, 0x2c	; 44
    58ce:	8d 7f       	andi	r24, 0xFD	; 253
    58d0:	8c bd       	out	0x2c, r24	; 44
    58d2:	8c b5       	in	r24, 0x2c	; 44
    58d4:	81 60       	ori	r24, 0x01	; 1
    58d6:	0e c0       	rjmp	.+28     	; 0x58f4 <SPI0_Speed+0xb2>
    58d8:	24 30       	cpi	r18, 0x04	; 4
    58da:	31 05       	cpc	r19, r1
    58dc:	41 05       	cpc	r20, r1
    58de:	51 05       	cpc	r21, r1
    58e0:	10 f0       	brcs	.+4      	; 0x58e6 <SPI0_Speed+0xa4>
    58e2:	8e 7f       	andi	r24, 0xFE	; 254
    58e4:	01 c0       	rjmp	.+2      	; 0x58e8 <SPI0_Speed+0xa6>
    58e6:	81 60       	ori	r24, 0x01	; 1
    58e8:	8d bd       	out	0x2d, r24	; 45
    58ea:	8c b5       	in	r24, 0x2c	; 44
    58ec:	8d 7f       	andi	r24, 0xFD	; 253
    58ee:	8c bd       	out	0x2c, r24	; 44
    58f0:	8c b5       	in	r24, 0x2c	; 44
    58f2:	8e 7f       	andi	r24, 0xFE	; 254
    58f4:	8c bd       	out	0x2c, r24	; 44
    58f6:	c0 92 48 17 	sts	0x1748, r12	; 0x801748 <SPI0_Speed_value>
    58fa:	d0 92 49 17 	sts	0x1749, r13	; 0x801749 <SPI0_Speed_value+0x1>
    58fe:	e0 92 4a 17 	sts	0x174A, r14	; 0x80174a <SPI0_Speed_value+0x2>
    5902:	f0 92 4b 17 	sts	0x174B, r15	; 0x80174b <SPI0_Speed_value+0x3>
    5906:	ff 90       	pop	r15
    5908:	ef 90       	pop	r14
    590a:	df 90       	pop	r13
    590c:	cf 90       	pop	r12
    590e:	08 95       	ret

00005910 <SPI0_Mode>:
    5910:	cf 93       	push	r28
    5912:	df 93       	push	r29
    5914:	ec 01       	movw	r28, r24
    5916:	81 30       	cpi	r24, 0x01	; 1
    5918:	91 05       	cpc	r25, r1
    591a:	71 f0       	breq	.+28     	; 0x5938 <SPI0_Mode+0x28>
    591c:	2c f4       	brge	.+10     	; 0x5928 <SPI0_Mode+0x18>
    591e:	89 2b       	or	r24, r25
    5920:	c1 f4       	brne	.+48     	; 0x5952 <SPI0_Mode+0x42>
    5922:	8c b5       	in	r24, 0x2c	; 44
    5924:	87 7f       	andi	r24, 0xF7	; 247
    5926:	11 c0       	rjmp	.+34     	; 0x594a <SPI0_Mode+0x3a>
    5928:	82 30       	cpi	r24, 0x02	; 2
    592a:	91 05       	cpc	r25, r1
    592c:	61 f0       	breq	.+24     	; 0x5946 <SPI0_Mode+0x36>
    592e:	03 97       	sbiw	r24, 0x03	; 3
    5930:	81 f4       	brne	.+32     	; 0x5952 <SPI0_Mode+0x42>
    5932:	8c b5       	in	r24, 0x2c	; 44
    5934:	88 60       	ori	r24, 0x08	; 8
    5936:	02 c0       	rjmp	.+4      	; 0x593c <SPI0_Mode+0x2c>
    5938:	8c b5       	in	r24, 0x2c	; 44
    593a:	87 7f       	andi	r24, 0xF7	; 247
    593c:	8c bd       	out	0x2c, r24	; 44
    593e:	8c b5       	in	r24, 0x2c	; 44
    5940:	84 60       	ori	r24, 0x04	; 4
    5942:	8c bd       	out	0x2c, r24	; 44
    5944:	14 c0       	rjmp	.+40     	; 0x596e <SPI0_Mode+0x5e>
    5946:	8c b5       	in	r24, 0x2c	; 44
    5948:	88 60       	ori	r24, 0x08	; 8
    594a:	8c bd       	out	0x2c, r24	; 44
    594c:	8c b5       	in	r24, 0x2c	; 44
    594e:	8b 7f       	andi	r24, 0xFB	; 251
    5950:	f8 cf       	rjmp	.-16     	; 0x5942 <SPI0_Mode+0x32>
    5952:	df 93       	push	r29
    5954:	cf 93       	push	r28
    5956:	8a e2       	ldi	r24, 0x2A	; 42
    5958:	94 e0       	ldi	r25, 0x04	; 4
    595a:	1f 92       	push	r1
    595c:	9f 93       	push	r25
    595e:	8f 93       	push	r24
    5960:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    5964:	0f 90       	pop	r0
    5966:	0f 90       	pop	r0
    5968:	0f 90       	pop	r0
    596a:	0f 90       	pop	r0
    596c:	0f 90       	pop	r0
    596e:	d0 93 47 17 	sts	0x1747, r29	; 0x801747 <__data_end+0x1>
    5972:	c0 93 46 17 	sts	0x1746, r28	; 0x801746 <__data_end>
    5976:	df 91       	pop	r29
    5978:	cf 91       	pop	r28
    597a:	08 95       	ret

0000597c <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    597c:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    597e:	0d b4       	in	r0, 0x2d	; 45
    5980:	07 fe       	sbrs	r0, 7
    5982:	fd cf       	rjmp	.-6      	; 0x597e <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5984:	8e b5       	in	r24, 0x2e	; 46
}
    5986:	08 95       	ret

00005988 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5988:	cf 92       	push	r12
    598a:	df 92       	push	r13
    598c:	ef 92       	push	r14
    598e:	ff 92       	push	r15
    5990:	cf 93       	push	r28
    5992:	df 93       	push	r29
    5994:	1f 92       	push	r1
    5996:	cd b7       	in	r28, 0x3d	; 61
    5998:	de b7       	in	r29, 0x3e	; 62
    599a:	6b 01       	movw	r12, r22
    599c:	7c 01       	movw	r14, r24
	printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
	printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
	printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

	SPCR = 0;				// Clear SPCR in case we are not called after RESET
    599e:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);       // SCK Output
    59a0:	2f 9a       	sbi	0x05, 7	; 5
    59a2:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    59a4:	2d 9a       	sbi	0x05, 5	; 5
    59a6:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);   // MISO Input, no pull-up
    59a8:	26 98       	cbi	0x04, 6	; 4

	// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
	GPIO_PIN_LOW(SS); 		// SS Output must be HI prevent slave mode from getting set while initializing
    59aa:	2c 98       	cbi	0x05, 4	; 5
    59ac:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);    // Master Mode
    59ae:	8c b5       	in	r24, 0x2c	; 44
    59b0:	80 61       	ori	r24, 0x10	; 16
    59b2:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);     // Enable SPI
    59b4:	8c b5       	in	r24, 0x2c	; 44
    59b6:	80 64       	ori	r24, 0x40	; 64
    59b8:	8c bd       	out	0x2c, r24	; 44

	// SPI Clear any pending interrupt flags
	D = SPSR;
    59ba:	8d b5       	in	r24, 0x2d	; 45
    59bc:	89 83       	std	Y+1, r24	; 0x01
	D = SPDR;
    59be:	8e b5       	in	r24, 0x2e	; 46
    59c0:	89 83       	std	Y+1, r24	; 0x01

	/// Set SPI clock mode 0 
    ///  SPI Mode     CPOL    CPHA            Sample
    ///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    59c2:	80 e0       	ldi	r24, 0x00	; 0
    59c4:	90 e0       	ldi	r25, 0x00	; 0
    59c6:	a4 df       	rcall	.-184    	; 0x5910 <SPI0_Mode>

	// Set SPI clock speed
    SPI0_Speed(speed);
    59c8:	c7 01       	movw	r24, r14
    59ca:	b6 01       	movw	r22, r12

    SPI0_TXRX_Byte(0xff);	// Send dummy 0xFF
    59cc:	3a df       	rcall	.-396    	; 0x5842 <SPI0_Speed>
    59ce:	8f ef       	ldi	r24, 0xFF	; 255
    59d0:	d5 df       	rcall	.-86     	; 0x597c <SPI0_TXRX_Byte>
	SPI0_Init_state = 1;

}
    59d2:	0f 90       	pop	r0
    59d4:	df 91       	pop	r29
    59d6:	cf 91       	pop	r28
    59d8:	ff 90       	pop	r15
    59da:	ef 90       	pop	r14
    59dc:	df 90       	pop	r13
    59de:	cf 90       	pop	r12
    59e0:	08 95       	ret

000059e2 <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    59e2:	0f 93       	push	r16
    59e4:	1f 93       	push	r17
    59e6:	cf 93       	push	r28
    59e8:	df 93       	push	r29
    59ea:	8c 01       	movw	r16, r24
    59ec:	eb 01       	movw	r28, r22

    while(count > 0)
    59ee:	1c 16       	cp	r1, r28
    59f0:	1d 06       	cpc	r1, r29
    59f2:	34 f4       	brge	.+12     	; 0x5a00 <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    59f4:	f8 01       	movw	r30, r16
    59f6:	81 91       	ld	r24, Z+
    59f8:	8f 01       	movw	r16, r30
    59fa:	c0 df       	rcall	.-128    	; 0x597c <SPI0_TXRX_Byte>
		++data;
		--count;
    59fc:	21 97       	sbiw	r28, 0x01	; 1
    59fe:	f7 cf       	rjmp	.-18     	; 0x59ee <SPI0_TX+0xc>
	}
}
    5a00:	df 91       	pop	r29
    5a02:	cf 91       	pop	r28
    5a04:	1f 91       	pop	r17
    5a06:	0f 91       	pop	r16
    5a08:	08 95       	ret

00005a0a <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5a0a:	0f 93       	push	r16
    5a0c:	1f 93       	push	r17
    5a0e:	cf 93       	push	r28
    5a10:	df 93       	push	r29
    5a12:	8c 01       	movw	r16, r24
    5a14:	eb 01       	movw	r28, r22

    while(count > 0)
    5a16:	1c 16       	cp	r1, r28
    5a18:	1d 06       	cpc	r1, r29
    5a1a:	44 f4       	brge	.+16     	; 0x5a2c <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    5a1c:	f8 01       	movw	r30, r16
    5a1e:	80 81       	ld	r24, Z
    5a20:	ad df       	rcall	.-166    	; 0x597c <SPI0_TXRX_Byte>
    5a22:	f8 01       	movw	r30, r16
    5a24:	81 93       	st	Z+, r24
    5a26:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a28:	21 97       	sbiw	r28, 0x01	; 1
    5a2a:	f5 cf       	rjmp	.-22     	; 0x5a16 <SPI0_TXRX+0xc>
	}
}
    5a2c:	df 91       	pop	r29
    5a2e:	cf 91       	pop	r28
    5a30:	1f 91       	pop	r17
    5a32:	0f 91       	pop	r16
    5a34:	08 95       	ret

00005a36 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5a36:	0f 93       	push	r16
    5a38:	1f 93       	push	r17
    5a3a:	cf 93       	push	r28
    5a3c:	df 93       	push	r29
    5a3e:	8c 01       	movw	r16, r24
    5a40:	eb 01       	movw	r28, r22

    while(count > 0)
    5a42:	1c 16       	cp	r1, r28
    5a44:	1d 06       	cpc	r1, r29
    5a46:	3c f4       	brge	.+14     	; 0x5a56 <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    5a48:	8f ef       	ldi	r24, 0xFF	; 255
    5a4a:	98 df       	rcall	.-208    	; 0x597c <SPI0_TXRX_Byte>
    5a4c:	f8 01       	movw	r30, r16
    5a4e:	81 93       	st	Z+, r24
    5a50:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a52:	21 97       	sbiw	r28, 0x01	; 1
    5a54:	f6 cf       	rjmp	.-20     	; 0x5a42 <SPI0_RX+0xc>
	}
}
    5a56:	df 91       	pop	r29
    5a58:	cf 91       	pop	r28
    5a5a:	1f 91       	pop	r17
    5a5c:	0f 91       	pop	r16
    5a5e:	08 95       	ret

00005a60 <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    5a60:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    5a62:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5a64:	ec eb       	ldi	r30, 0xBC	; 188
    5a66:	f0 e0       	ldi	r31, 0x00	; 0
    5a68:	90 81       	ld	r25, Z
    5a6a:	94 60       	ori	r25, 0x04	; 4
    5a6c:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5a6e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    5a72:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5a76:	08 95       	ret

00005a78 <TWI_StopTransmission>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5a78:	84 e9       	ldi	r24, 0x94	; 148
    5a7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a7e:	08 95       	ret

00005a80 <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5a80:	94 ea       	ldi	r25, 0xA4	; 164
    5a82:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a86:	24 e6       	ldi	r18, 0x64	; 100
    5a88:	62 9f       	mul	r22, r18
    5a8a:	b0 01       	movw	r22, r0
    5a8c:	11 24       	eor	r1, r1
    5a8e:	61 50       	subi	r22, 0x01	; 1
    5a90:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5a92:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5a94:	40 e0       	ldi	r20, 0x00	; 0
    5a96:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5a98:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5a9a:	2f 3f       	cpi	r18, 0xFF	; 255
    5a9c:	9f ef       	ldi	r25, 0xFF	; 255
    5a9e:	39 07       	cpc	r19, r25
    5aa0:	41 f1       	breq	.+80     	; 0x5af2 <TWI_StartTransmission+0x72>
    5aa2:	41 15       	cp	r20, r1
    5aa4:	51 05       	cpc	r21, r1
    5aa6:	f1 f4       	brne	.+60     	; 0x5ae4 <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5aa8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5aac:	97 ff       	sbrs	r25, 7
    5aae:	13 c0       	rjmp	.+38     	; 0x5ad6 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    5ab0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5ab4:	98 7f       	andi	r25, 0xF8	; 248
    5ab6:	90 31       	cpi	r25, 0x10	; 16
    5ab8:	61 f0       	breq	.+24     	; 0x5ad2 <TWI_StartTransmission+0x52>
    5aba:	98 33       	cpi	r25, 0x38	; 56
    5abc:	39 f0       	breq	.+14     	; 0x5acc <TWI_StartTransmission+0x4c>
    5abe:	98 30       	cpi	r25, 0x08	; 8
    5ac0:	41 f0       	breq	.+16     	; 0x5ad2 <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    5ac2:	84 e0       	ldi	r24, 0x04	; 4
    5ac4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5ac8:	81 e0       	ldi	r24, 0x01	; 1
    5aca:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5acc:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    5ad0:	06 c0       	rjmp	.+12     	; 0x5ade <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    5ad2:	41 e0       	ldi	r20, 0x01	; 1
    5ad4:	50 e0       	ldi	r21, 0x00	; 0
    5ad6:	92 e4       	ldi	r25, 0x42	; 66
    5ad8:	9a 95       	dec	r25
    5ada:	f1 f7       	brne	.-4      	; 0x5ad8 <TWI_StartTransmission+0x58>
    5adc:	00 c0       	rjmp	.+0      	; 0x5ade <TWI_StartTransmission+0x5e>
    5ade:	21 50       	subi	r18, 0x01	; 1
    5ae0:	31 09       	sbc	r19, r1
    5ae2:	db cf       	rjmp	.-74     	; 0x5a9a <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5ae4:	23 2b       	or	r18, r19
    5ae6:	29 f4       	brne	.+10     	; 0x5af2 <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5ae8:	84 e0       	ldi	r24, 0x04	; 4
    5aea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    5aee:	82 e0       	ldi	r24, 0x02	; 2
    5af0:	08 95       	ret
        }

        TWDR = SlaveAddress;
    5af2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5af6:	84 e8       	ldi	r24, 0x84	; 132
    5af8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5afc:	6f 3f       	cpi	r22, 0xFF	; 255
    5afe:	8f ef       	ldi	r24, 0xFF	; 255
    5b00:	78 07       	cpc	r23, r24
    5b02:	71 f0       	breq	.+28     	; 0x5b20 <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5b04:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b08:	cb 01       	movw	r24, r22
    5b0a:	01 97       	sbiw	r24, 0x01	; 1
    5b0c:	27 fd       	sbrc	r18, 7
    5b0e:	06 c0       	rjmp	.+12     	; 0x5b1c <TWI_StartTransmission+0x9c>
    5b10:	22 e4       	ldi	r18, 0x42	; 66
    5b12:	2a 95       	dec	r18
    5b14:	f1 f7       	brne	.-4      	; 0x5b12 <TWI_StartTransmission+0x92>
    5b16:	00 c0       	rjmp	.+0      	; 0x5b18 <TWI_StartTransmission+0x98>
    5b18:	bc 01       	movw	r22, r24
    5b1a:	f0 cf       	rjmp	.-32     	; 0x5afc <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5b1c:	67 2b       	or	r22, r23
    5b1e:	61 f0       	breq	.+24     	; 0x5b38 <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    5b20:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b24:	88 7f       	andi	r24, 0xF8	; 248
    5b26:	88 31       	cpi	r24, 0x18	; 24
    5b28:	49 f0       	breq	.+18     	; 0x5b3c <TWI_StartTransmission+0xbc>
    5b2a:	80 34       	cpi	r24, 0x40	; 64
    5b2c:	39 f0       	breq	.+14     	; 0x5b3c <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5b2e:	84 e9       	ldi	r24, 0x94	; 148
    5b30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5b34:	84 e0       	ldi	r24, 0x04	; 4
    5b36:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5b38:	83 e0       	ldi	r24, 0x03	; 3
    5b3a:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5b3c:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5b3e:	08 95       	ret

00005b40 <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    5b40:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5b44:	84 e8       	ldi	r24, 0x84	; 132
    5b46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5b4a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b4e:	87 ff       	sbrs	r24, 7
    5b50:	fc cf       	rjmp	.-8      	; 0x5b4a <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    5b52:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b56:	98 7f       	andi	r25, 0xF8	; 248
    5b58:	21 e0       	ldi	r18, 0x01	; 1
    5b5a:	30 e0       	ldi	r19, 0x00	; 0
    5b5c:	98 32       	cpi	r25, 0x28	; 40
    5b5e:	11 f0       	breq	.+4      	; 0x5b64 <TWI_SendByte+0x24>
    5b60:	20 e0       	ldi	r18, 0x00	; 0
    5b62:	30 e0       	ldi	r19, 0x00	; 0
}
    5b64:	c9 01       	movw	r24, r18
    5b66:	08 95       	ret

00005b68 <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5b68:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5b6a:	61 15       	cp	r22, r1
    5b6c:	71 05       	cpc	r23, r1
    5b6e:	11 f4       	brne	.+4      	; 0x5b74 <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    5b70:	94 ec       	ldi	r25, 0xC4	; 196
    5b72:	01 c0       	rjmp	.+2      	; 0x5b76 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5b74:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5b76:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5b7a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b7e:	87 ff       	sbrs	r24, 7
    5b80:	fc cf       	rjmp	.-8      	; 0x5b7a <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    5b82:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5b86:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5b88:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b8c:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5b8e:	81 e0       	ldi	r24, 0x01	; 1
    5b90:	90 e0       	ldi	r25, 0x00	; 0
    5b92:	67 2b       	or	r22, r23
    5b94:	19 f0       	breq	.+6      	; 0x5b9c <TWI_ReceiveByte+0x34>
    5b96:	28 35       	cpi	r18, 0x58	; 88
    5b98:	19 f4       	brne	.+6      	; 0x5ba0 <TWI_ReceiveByte+0x38>
    5b9a:	03 c0       	rjmp	.+6      	; 0x5ba2 <TWI_ReceiveByte+0x3a>
    5b9c:	20 35       	cpi	r18, 0x50	; 80
    5b9e:	09 f0       	breq	.+2      	; 0x5ba2 <TWI_ReceiveByte+0x3a>
    5ba0:	80 e0       	ldi	r24, 0x00	; 0
}
    5ba2:	08 95       	ret

00005ba4 <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5ba4:	a0 e0       	ldi	r26, 0x00	; 0
    5ba6:	b0 e0       	ldi	r27, 0x00	; 0
    5ba8:	e8 ed       	ldi	r30, 0xD8	; 216
    5baa:	fd e2       	ldi	r31, 0x2D	; 45
    5bac:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__+0xe>
    5bb0:	f8 2e       	mov	r15, r24
    5bb2:	b6 2e       	mov	r11, r22
    5bb4:	94 2e       	mov	r9, r20
    5bb6:	a5 2e       	mov	r10, r21
    5bb8:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5bba:	8e 7f       	andi	r24, 0xFE	; 254
    5bbc:	61 df       	rcall	.-318    	; 0x5a80 <TWI_StartTransmission>
    5bbe:	d8 2f       	mov	r29, r24
    5bc0:	81 11       	cpse	r24, r1
    5bc2:	2b c0       	rjmp	.+86     	; 0x5c1a <TWI_ReadPacket+0x76>
    5bc4:	c9 2c       	mov	r12, r9
    5bc6:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5bc8:	cc 23       	and	r28, r28
    5bca:	39 f0       	breq	.+14     	; 0x5bda <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5bcc:	f6 01       	movw	r30, r12
    5bce:	81 91       	ld	r24, Z+
    5bd0:	6f 01       	movw	r12, r30
    5bd2:	b6 df       	rcall	.-148    	; 0x5b40 <TWI_SendByte>
    5bd4:	c1 50       	subi	r28, 0x01	; 1
    5bd6:	89 2b       	or	r24, r25
    5bd8:	b9 f7       	brne	.-18     	; 0x5bc8 <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5bda:	6b 2d       	mov	r22, r11
    5bdc:	8f 2d       	mov	r24, r15
    5bde:	81 60       	ori	r24, 0x01	; 1
    5be0:	4f df       	rcall	.-354    	; 0x5a80 <TWI_StartTransmission>
    5be2:	d8 2f       	mov	r29, r24
    5be4:	81 11       	cpse	r24, r1
    5be6:	19 c0       	rjmp	.+50     	; 0x5c1a <TWI_ReadPacket+0x76>
    5be8:	cf ef       	ldi	r28, 0xFF	; 255
    5bea:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5bec:	cf 3f       	cpi	r28, 0xFF	; 255
    5bee:	91 f0       	breq	.+36     	; 0x5c14 <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5bf0:	78 01       	movw	r14, r16
    5bf2:	ff ef       	ldi	r31, 0xFF	; 255
    5bf4:	ef 1a       	sub	r14, r31
    5bf6:	ff 0a       	sbc	r15, r31
    5bf8:	61 e0       	ldi	r22, 0x01	; 1
    5bfa:	70 e0       	ldi	r23, 0x00	; 0
    5bfc:	cc 23       	and	r28, r28
    5bfe:	11 f0       	breq	.+4      	; 0x5c04 <TWI_ReadPacket+0x60>
    5c00:	60 e0       	ldi	r22, 0x00	; 0
    5c02:	70 e0       	ldi	r23, 0x00	; 0
    5c04:	c8 01       	movw	r24, r16
    5c06:	b0 df       	rcall	.-160    	; 0x5b68 <TWI_ReceiveByte>
    5c08:	c1 50       	subi	r28, 0x01	; 1
    5c0a:	89 2b       	or	r24, r25
    5c0c:	11 f0       	breq	.+4      	; 0x5c12 <TWI_ReadPacket+0x6e>
    5c0e:	87 01       	movw	r16, r14
    5c10:	ed cf       	rjmp	.-38     	; 0x5bec <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5c12:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c14:	84 e9       	ldi	r24, 0x94	; 148
    5c16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5c1a:	8d 2f       	mov	r24, r29
    5c1c:	cd b7       	in	r28, 0x3d	; 61
    5c1e:	de b7       	in	r29, 0x3e	; 62
    5c20:	eb e0       	ldi	r30, 0x0B	; 11
    5c22:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__+0xe>

00005c26 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5c26:	a0 e0       	ldi	r26, 0x00	; 0
    5c28:	b0 e0       	ldi	r27, 0x00	; 0
    5c2a:	e9 e1       	ldi	r30, 0x19	; 25
    5c2c:	fe e2       	ldi	r31, 0x2E	; 46
    5c2e:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__prologue_saves__+0x12>
    5c32:	b4 2e       	mov	r11, r20
    5c34:	f5 2e       	mov	r15, r21
    5c36:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5c38:	8e 7f       	andi	r24, 0xFE	; 254
    5c3a:	22 df       	rcall	.-444    	; 0x5a80 <TWI_StartTransmission>
    5c3c:	d8 2f       	mov	r29, r24
    5c3e:	81 11       	cpse	r24, r1
    5c40:	1a c0       	rjmp	.+52     	; 0x5c76 <TWI_WritePacket+0x50>
    5c42:	cb 2c       	mov	r12, r11
    5c44:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5c46:	cc 23       	and	r28, r28
    5c48:	41 f0       	breq	.+16     	; 0x5c5a <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5c4a:	f6 01       	movw	r30, r12
    5c4c:	81 91       	ld	r24, Z+
    5c4e:	6f 01       	movw	r12, r30
    5c50:	77 df       	rcall	.-274    	; 0x5b40 <TWI_SendByte>
    5c52:	c1 50       	subi	r28, 0x01	; 1
    5c54:	89 2b       	or	r24, r25
    5c56:	b9 f7       	brne	.-18     	; 0x5c46 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c58:	d5 e0       	ldi	r29, 0x05	; 5
    5c5a:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5c5c:	ee 20       	and	r14, r14
    5c5e:	41 f0       	breq	.+16     	; 0x5c70 <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5c60:	f6 01       	movw	r30, r12
    5c62:	81 91       	ld	r24, Z+
    5c64:	6f 01       	movw	r12, r30
    5c66:	6c df       	rcall	.-296    	; 0x5b40 <TWI_SendByte>
    5c68:	ea 94       	dec	r14
    5c6a:	89 2b       	or	r24, r25
    5c6c:	b9 f7       	brne	.-18     	; 0x5c5c <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c6e:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c70:	84 e9       	ldi	r24, 0x94	; 148
    5c72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5c76:	8d 2f       	mov	r24, r29
    5c78:	cd b7       	in	r28, 0x3d	; 61
    5c7a:	de b7       	in	r29, 0x3e	; 62
    5c7c:	e9 e0       	ldi	r30, 0x09	; 9
    5c7e:	0c 94 53 e5 	jmp	0x1caa6	; 0x1caa6 <__epilogue_restores__+0x12>

00005c82 <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5c82:	6a e0       	ldi	r22, 0x0A	; 10
    5c84:	0e 94 79 e4 	call	0x1c8f2	; 0x1c8f2 <__udivmodqi4>
    5c88:	82 95       	swap	r24
    5c8a:	80 7f       	andi	r24, 0xF0	; 240
    5c8c:	89 2b       	or	r24, r25
    5c8e:	08 95       	ret

00005c90 <BCDtoBIN>:
    5c90:	98 2f       	mov	r25, r24
    5c92:	92 95       	swap	r25
    5c94:	9f 70       	andi	r25, 0x0F	; 15
    5c96:	8f 70       	andi	r24, 0x0F	; 15
    5c98:	2a e0       	ldi	r18, 0x0A	; 10
    5c9a:	92 9f       	mul	r25, r18
    5c9c:	80 0d       	add	r24, r0
    5c9e:	11 24       	eor	r1, r1
    5ca0:	08 95       	ret

00005ca2 <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5ca2:	cf 92       	push	r12
    5ca4:	df 92       	push	r13
    5ca6:	ef 92       	push	r14
    5ca8:	0f 93       	push	r16
    5caa:	1f 93       	push	r17
    5cac:	cf 93       	push	r28
    5cae:	df 93       	push	r29
    5cb0:	00 d0       	rcall	.+0      	; 0x5cb2 <rtc_run+0x10>
    5cb2:	1f 92       	push	r1
    5cb4:	cd b7       	in	r28, 0x3d	; 61
    5cb6:	de b7       	in	r29, 0x3e	; 62
    5cb8:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5cba:	19 82       	std	Y+1, r1	; 0x01

    ReadAddress = 0;
    5cbc:	1a 82       	std	Y+2, r1	; 0x02
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5cbe:	ee 24       	eor	r14, r14
    5cc0:	e3 94       	inc	r14
    5cc2:	8e 01       	movw	r16, r28
    5cc4:	0f 5f       	subi	r16, 0xFF	; 255
    5cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    5cc8:	21 e0       	ldi	r18, 0x01	; 1
    5cca:	ae 01       	movw	r20, r28
    5ccc:	4e 5f       	subi	r20, 0xFE	; 254
    5cce:	5f 4f       	sbci	r21, 0xFF	; 255
    5cd0:	64 e1       	ldi	r22, 0x14	; 20
    5cd2:	81 ed       	ldi	r24, 0xD1	; 209
    5cd4:	67 df       	rcall	.-306    	; 0x5ba4 <TWI_ReadPacket>
    5cd6:	88 23       	and	r24, r24
    5cd8:	19 f0       	breq	.+6      	; 0x5ce0 <rtc_run+0x3e>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read error\n");
    5cda:	84 eb       	ldi	r24, 0xB4	; 180
    5cdc:	94 e0       	ldi	r25, 0x04	; 4
    5cde:	2a c0       	rjmp	.+84     	; 0x5d34 <rtc_run+0x92>
    5ce0:	89 81       	ldd	r24, Y+1	; 0x01
        return -1;
    }

    if(run == -1)
    5ce2:	9f ef       	ldi	r25, 0xFF	; 255
    5ce4:	c9 16       	cp	r12, r25
    5ce6:	d9 06       	cpc	r13, r25
    5ce8:	59 f4       	brne	.+22     	; 0x5d00 <rtc_run+0x5e>
        return ((b & 0x80) ? 0 : 1);
    5cea:	08 2e       	mov	r0, r24
    5cec:	00 0c       	add	r0, r0
    5cee:	99 0b       	sbc	r25, r25
    5cf0:	80 95       	com	r24
    5cf2:	90 95       	com	r25
    5cf4:	89 2f       	mov	r24, r25
    5cf6:	88 1f       	adc	r24, r24
    5cf8:	88 27       	eor	r24, r24
    5cfa:	88 1f       	adc	r24, r24
    5cfc:	90 e0       	ldi	r25, 0x00	; 0
    5cfe:	26 c0       	rjmp	.+76     	; 0x5d4c <rtc_run+0xaa>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5d00:	8f 77       	andi	r24, 0x7F	; 127
    5d02:	c1 14       	cp	r12, r1
    5d04:	d1 04       	cpc	r13, r1
    5d06:	11 f4       	brne	.+4      	; 0x5d0c <rtc_run+0x6a>
    5d08:	90 e8       	ldi	r25, 0x80	; 128
    5d0a:	01 c0       	rjmp	.+2      	; 0x5d0e <rtc_run+0x6c>
    5d0c:	90 e0       	ldi	r25, 0x00	; 0
    5d0e:	89 2b       	or	r24, r25
    5d10:	89 83       	std	Y+1, r24	; 0x01

    WriteAddress = 0;
    5d12:	1b 82       	std	Y+3, r1	; 0x03
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5d14:	ee 24       	eor	r14, r14
    5d16:	e3 94       	inc	r14
    5d18:	8e 01       	movw	r16, r28
    5d1a:	0f 5f       	subi	r16, 0xFF	; 255
    5d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    5d1e:	21 e0       	ldi	r18, 0x01	; 1
    5d20:	ae 01       	movw	r20, r28
    5d22:	4d 5f       	subi	r20, 0xFD	; 253
    5d24:	5f 4f       	sbci	r21, 0xFF	; 255
    5d26:	64 e1       	ldi	r22, 0x14	; 20
    5d28:	80 ed       	ldi	r24, 0xD0	; 208
    5d2a:	7d df       	rcall	.-262    	; 0x5c26 <TWI_WritePacket>
    5d2c:	88 23       	and	r24, r24
    5d2e:	69 f0       	breq	.+26     	; 0x5d4a <rtc_run+0xa8>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write error\n");
    5d30:	8d e9       	ldi	r24, 0x9D	; 157
    5d32:	94 e0       	ldi	r25, 0x04	; 4
    5d34:	1f 92       	push	r1
    5d36:	9f 93       	push	r25
    5d38:	8f 93       	push	r24
    5d3a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(-1);
    5d3e:	0f 90       	pop	r0
    5d40:	0f 90       	pop	r0
    5d42:	0f 90       	pop	r0
    5d44:	8f ef       	ldi	r24, 0xFF	; 255
    5d46:	9f ef       	ldi	r25, 0xFF	; 255
    5d48:	01 c0       	rjmp	.+2      	; 0x5d4c <rtc_run+0xaa>
    5d4a:	c6 01       	movw	r24, r12
    }
    return(run);
}
    5d4c:	0f 90       	pop	r0
    5d4e:	0f 90       	pop	r0
    5d50:	0f 90       	pop	r0
    5d52:	df 91       	pop	r29
    5d54:	cf 91       	pop	r28
    5d56:	1f 91       	pop	r17
    5d58:	0f 91       	pop	r16
    5d5a:	ef 90       	pop	r14
    5d5c:	df 90       	pop	r13
    5d5e:	cf 90       	pop	r12
    5d60:	08 95       	ret

00005d62 <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    5d62:	ef 92       	push	r14
    5d64:	0f 93       	push	r16
    5d66:	1f 93       	push	r17
    5d68:	cf 93       	push	r28
    5d6a:	df 93       	push	r29
    5d6c:	cd b7       	in	r28, 0x3d	; 61
    5d6e:	de b7       	in	r29, 0x3e	; 62
    5d70:	29 97       	sbiw	r28, 0x09	; 9
    5d72:	0f b6       	in	r0, 0x3f	; 63
    5d74:	f8 94       	cli
    5d76:	de bf       	out	0x3e, r29	; 62
    5d78:	0f be       	out	0x3f, r0	; 63
    5d7a:	cd bf       	out	0x3d, r28	; 61
    5d7c:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    5d7e:	fc 01       	movw	r30, r24
    5d80:	80 81       	ld	r24, Z
    5d82:	7f df       	rcall	.-258    	; 0x5c82 <BINtoBCD>
    5d84:	8f 77       	andi	r24, 0x7F	; 127
    5d86:	89 83       	std	Y+1, r24	; 0x01
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    5d88:	f8 01       	movw	r30, r16
    5d8a:	82 81       	ldd	r24, Z+2	; 0x02
    5d8c:	7a df       	rcall	.-268    	; 0x5c82 <BINtoBCD>
    5d8e:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    5d90:	8a 83       	std	Y+2, r24	; 0x02
    5d92:	f8 01       	movw	r30, r16
    5d94:	84 81       	ldd	r24, Z+4	; 0x04
    5d96:	75 df       	rcall	.-278    	; 0x5c82 <BINtoBCD>
    5d98:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    5d9a:	8b 83       	std	Y+3, r24	; 0x03
    5d9c:	f8 01       	movw	r30, r16
    5d9e:	84 85       	ldd	r24, Z+12	; 0x0c
    5da0:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    5da2:	8f 5f       	subi	r24, 0xFF	; 255
    5da4:	8c 83       	std	Y+4, r24	; 0x04
    5da6:	86 81       	ldd	r24, Z+6	; 0x06
    5da8:	6c df       	rcall	.-296    	; 0x5c82 <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    5daa:	8f 73       	andi	r24, 0x3F	; 63
    5dac:	8d 83       	std	Y+5, r24	; 0x05
    5dae:	f8 01       	movw	r30, r16
    5db0:	80 85       	ldd	r24, Z+8	; 0x08
    5db2:	8f 5f       	subi	r24, 0xFF	; 255
    5db4:	66 df       	rcall	.-308    	; 0x5c82 <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    5db6:	8f 71       	andi	r24, 0x1F	; 31
    5db8:	8e 83       	std	Y+6, r24	; 0x06
    5dba:	f8 01       	movw	r30, r16
    5dbc:	82 85       	ldd	r24, Z+10	; 0x0a
    5dbe:	84 56       	subi	r24, 0x64	; 100
    5dc0:	60 df       	rcall	.-320    	; 0x5c82 <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    5dc2:	8f 83       	std	Y+7, r24	; 0x07
    5dc4:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    5dc6:	88 87       	std	Y+8, r24	; 0x08
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5dc8:	19 86       	std	Y+9, r1	; 0x09
    5dca:	88 e0       	ldi	r24, 0x08	; 8
    5dcc:	e8 2e       	mov	r14, r24
    5dce:	8e 01       	movw	r16, r28
    5dd0:	0f 5f       	subi	r16, 0xFF	; 255
    5dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    5dd4:	21 e0       	ldi	r18, 0x01	; 1
    5dd6:	ae 01       	movw	r20, r28
    5dd8:	47 5f       	subi	r20, 0xF7	; 247
    5dda:	5f 4f       	sbci	r21, 0xFF	; 255
    5ddc:	64 e1       	ldi	r22, 0x14	; 20
    5dde:	80 ed       	ldi	r24, 0xD0	; 208
    5de0:	22 df       	rcall	.-444    	; 0x5c26 <TWI_WritePacket>
    5de2:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    5de4:	61 f0       	breq	.+24     	; 0x5dfe <rtc_write+0x9c>
    5de6:	87 e5       	ldi	r24, 0x57	; 87
    5de8:	94 e0       	ldi	r25, 0x04	; 4
    5dea:	1f 92       	push	r1
    5dec:	9f 93       	push	r25
    5dee:	8f 93       	push	r24
    5df0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(0);
    5df4:	0f 90       	pop	r0
    5df6:	0f 90       	pop	r0
    5df8:	0f 90       	pop	r0
    5dfa:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    5dfc:	01 c0       	rjmp	.+2      	; 0x5e00 <rtc_write+0x9e>
}
    5dfe:	81 e0       	ldi	r24, 0x01	; 1
    5e00:	29 96       	adiw	r28, 0x09	; 9
    5e02:	0f b6       	in	r0, 0x3f	; 63
    5e04:	f8 94       	cli
    5e06:	de bf       	out	0x3e, r29	; 62
    5e08:	0f be       	out	0x3f, r0	; 63
    5e0a:	cd bf       	out	0x3d, r28	; 61
    5e0c:	df 91       	pop	r29
    5e0e:	cf 91       	pop	r28
    5e10:	1f 91       	pop	r17
    5e12:	0f 91       	pop	r16
    5e14:	ef 90       	pop	r14
    5e16:	08 95       	ret

00005e18 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    5e18:	ad e0       	ldi	r26, 0x0D	; 13
    5e1a:	b0 e0       	ldi	r27, 0x00	; 0
    5e1c:	e2 e1       	ldi	r30, 0x12	; 18
    5e1e:	ff e2       	ldi	r31, 0x2F	; 47
    5e20:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    5e24:	6c 01       	movw	r12, r24
    5e26:	4a 87       	std	Y+10, r20	; 0x0a
    5e28:	5b 87       	std	Y+11, r21	; 0x0b
    5e2a:	6c 87       	std	Y+12, r22	; 0x0c
    5e2c:	7d 87       	std	Y+13, r23	; 0x0d
    uint8_t  WriteAddress;
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 50000));
    5e2e:	6a e2       	ldi	r22, 0x2A	; 42
    5e30:	81 e0       	ldi	r24, 0x01	; 1
    5e32:	16 de       	rcall	.-980    	; 0x5a60 <TWI_Init>

    if(!force)
    5e34:	c1 14       	cp	r12, r1
    5e36:	d1 04       	cpc	r13, r1
    5e38:	09 f0       	breq	.+2      	; 0x5e3c <rtc_init+0x24>
    5e3a:	42 c0       	rjmp	.+132    	; 0x5ec0 <rtc_init+0xa8>
    {
        state = rtc_run(-1);
    5e3c:	8f ef       	ldi	r24, 0xFF	; 255
    5e3e:	9f ef       	ldi	r25, 0xFF	; 255
    5e40:	30 df       	rcall	.-416    	; 0x5ca2 <rtc_run>
        if(state < 0)
    5e42:	87 ff       	sbrs	r24, 7
    5e44:	05 c0       	rjmp	.+10     	; 0x5e50 <rtc_init+0x38>
        {
            rtc_ok = 0;
    5e46:	10 92 ea 18 	sts	0x18EA, r1	; 0x8018ea <rtc_ok+0x1>
    5e4a:	10 92 e9 18 	sts	0x18E9, r1	; 0x8018e9 <rtc_ok>
    5e4e:	24 c0       	rjmp	.+72     	; 0x5e98 <rtc_init+0x80>
            return 0;
        }
        if(state == 0)                            // stopped
    5e50:	88 23       	and	r24, r24
    5e52:	b1 f1       	breq	.+108    	; 0x5ec0 <rtc_init+0xa8>
    5e54:	2d c0       	rjmp	.+90     	; 0x5eb0 <rtc_init+0x98>
            printf("rtc _write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
    5e56:	ce 01       	movw	r24, r28
    5e58:	01 96       	adiw	r24, 0x01	; 1
    5e5a:	6c 01       	movw	r12, r24
    5e5c:	88 e0       	ldi	r24, 0x08	; 8
    5e5e:	f6 01       	movw	r30, r12
    5e60:	11 92       	st	Z+, r1
    5e62:	8a 95       	dec	r24
    5e64:	e9 f7       	brne	.-6      	; 0x5e60 <rtc_init+0x48>
        for (addr = 8; addr < 0x3f; addr += 8)
    5e66:	98 e0       	ldi	r25, 0x08	; 8
    5e68:	f9 2e       	mov	r15, r25
        {
            WriteAddress = addr;
    5e6a:	f9 86       	std	Y+9, r15	; 0x09
            if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5e6c:	88 e0       	ldi	r24, 0x08	; 8
    5e6e:	e8 2e       	mov	r14, r24
    5e70:	86 01       	movw	r16, r12
    5e72:	21 e0       	ldi	r18, 0x01	; 1
    5e74:	ae 01       	movw	r20, r28
    5e76:	47 5f       	subi	r20, 0xF7	; 247
    5e78:	5f 4f       	sbci	r21, 0xFF	; 255
    5e7a:	64 e1       	ldi	r22, 0x14	; 20
    5e7c:	80 ed       	ldi	r24, 0xD0	; 208
    5e7e:	d3 de       	rcall	.-602    	; 0x5c26 <TWI_WritePacket>
    5e80:	88 23       	and	r24, r24
    5e82:	61 f0       	breq	.+24     	; 0x5e9c <rtc_init+0x84>
                (uint8_t*)buf, 8) != TWI_ERROR_NoError)
            {
                printf("rtc_init ram - write error\n");
    5e84:	88 e6       	ldi	r24, 0x68	; 104
    5e86:	94 e0       	ldi	r25, 0x04	; 4
    5e88:	1f 92       	push	r1
    5e8a:	9f 93       	push	r25
    5e8c:	8f 93       	push	r24
    5e8e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
                return(0);
    5e92:	0f 90       	pop	r0
    5e94:	0f 90       	pop	r0
    5e96:	0f 90       	pop	r0
    5e98:	10 e0       	ldi	r17, 0x00	; 0
    5e9a:	2d c0       	rjmp	.+90     	; 0x5ef6 <rtc_init+0xde>
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
        for (addr = 8; addr < 0x3f; addr += 8)
    5e9c:	f8 e0       	ldi	r31, 0x08	; 8
    5e9e:	ff 0e       	add	r15, r31
    5ea0:	80 e4       	ldi	r24, 0x40	; 64
    5ea2:	f8 12       	cpse	r15, r24
                printf("rtc_init ram - write error\n");
                return(0);
            }
        }

        if(rtc_run(1) < 0)                        // START RTC
    5ea4:	e2 cf       	rjmp	.-60     	; 0x5e6a <rtc_init+0x52>
    5ea6:	81 e0       	ldi	r24, 0x01	; 1
    5ea8:	90 e0       	ldi	r25, 0x00	; 0
    5eaa:	fb de       	rcall	.-522    	; 0x5ca2 <rtc_run>
    5eac:	97 fd       	sbrc	r25, 7
    5eae:	cb cf       	rjmp	.-106    	; 0x5e46 <rtc_init+0x2e>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5eb0:	81 e0       	ldi	r24, 0x01	; 1
    5eb2:	90 e0       	ldi	r25, 0x00	; 0
    5eb4:	90 93 ea 18 	sts	0x18EA, r25	; 0x8018ea <rtc_ok+0x1>
    5eb8:	80 93 e9 18 	sts	0x18E9, r24	; 0x8018e9 <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5ebc:	11 e0       	ldi	r17, 0x01	; 1
    5ebe:	1b c0       	rjmp	.+54     	; 0x5ef6 <rtc_init+0xde>
    5ec0:	80 e0       	ldi	r24, 0x00	; 0
    5ec2:	90 e0       	ldi	r25, 0x00	; 0
    5ec4:	ee de       	rcall	.-548    	; 0x5ca2 <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    5ec6:	97 fd       	sbrc	r25, 7
    5ec8:	be cf       	rjmp	.-132    	; 0x5e46 <rtc_init+0x2e>
    5eca:	ce 01       	movw	r24, r28
    5ecc:	0a 96       	adiw	r24, 0x0a	; 10
        if(!rtc_write(tmp))
    5ece:	0e 94 0a 38 	call	0x7014	; 0x7014 <gmtime>
    5ed2:	47 df       	rcall	.-370    	; 0x5d62 <rtc_write>
    5ed4:	18 2f       	mov	r17, r24
    5ed6:	81 11       	cpse	r24, r1
        {
            printf("rtc _write epoch failed\n");
    5ed8:	be cf       	rjmp	.-132    	; 0x5e56 <rtc_init+0x3e>
    5eda:	84 e8       	ldi	r24, 0x84	; 132
    5edc:	94 e0       	ldi	r25, 0x04	; 4
    5ede:	1f 92       	push	r1
    5ee0:	9f 93       	push	r25
    5ee2:	8f 93       	push	r24
    5ee4:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            rtc_ok = 0;
    5ee8:	10 92 ea 18 	sts	0x18EA, r1	; 0x8018ea <rtc_ok+0x1>
    5eec:	10 92 e9 18 	sts	0x18E9, r1	; 0x8018e9 <rtc_ok>
            return 0;
    5ef0:	0f 90       	pop	r0
    5ef2:	0f 90       	pop	r0
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    5ef4:	0f 90       	pop	r0
    5ef6:	81 2f       	mov	r24, r17
    5ef8:	2d 96       	adiw	r28, 0x0d	; 13
    5efa:	e8 e0       	ldi	r30, 0x08	; 8
    5efc:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

00005f00 <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    5f00:	cf 92       	push	r12
    5f02:	df 92       	push	r13
    5f04:	ef 92       	push	r14
    5f06:	0f 93       	push	r16
    5f08:	1f 93       	push	r17
    5f0a:	cf 93       	push	r28
    5f0c:	df 93       	push	r29
    5f0e:	cd b7       	in	r28, 0x3d	; 61
    5f10:	de b7       	in	r29, 0x3e	; 62
    5f12:	29 97       	sbiw	r28, 0x09	; 9
    5f14:	0f b6       	in	r0, 0x3f	; 63
    5f16:	f8 94       	cli
    5f18:	de bf       	out	0x3e, r29	; 62
    5f1a:	0f be       	out	0x3f, r0	; 63
    5f1c:	cd bf       	out	0x3d, r28	; 61
    5f1e:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    5f20:	19 86       	std	Y+9, r1	; 0x09

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5f22:	88 e0       	ldi	r24, 0x08	; 8
    5f24:	e8 2e       	mov	r14, r24
    5f26:	8e 01       	movw	r16, r28
    5f28:	0f 5f       	subi	r16, 0xFF	; 255
    5f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    5f2c:	21 e0       	ldi	r18, 0x01	; 1
    5f2e:	ae 01       	movw	r20, r28
    5f30:	47 5f       	subi	r20, 0xF7	; 247
    5f32:	5f 4f       	sbci	r21, 0xFF	; 255
    5f34:	64 e1       	ldi	r22, 0x14	; 20
    5f36:	81 ed       	ldi	r24, 0xD1	; 209
    5f38:	35 de       	rcall	.-918    	; 0x5ba4 <TWI_ReadPacket>
    5f3a:	88 23       	and	r24, r24
    5f3c:	61 f0       	breq	.+24     	; 0x5f56 <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    5f3e:	87 e4       	ldi	r24, 0x47	; 71
    5f40:	94 e0       	ldi	r25, 0x04	; 4
    5f42:	1f 92       	push	r1
    5f44:	9f 93       	push	r25
    5f46:	8f 93       	push	r24
    5f48:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return 0;
    5f4c:	0f 90       	pop	r0
    5f4e:	0f 90       	pop	r0
    5f50:	0f 90       	pop	r0
    5f52:	80 e0       	ldi	r24, 0x00	; 0
    5f54:	33 c0       	rjmp	.+102    	; 0x5fbc <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    5f56:	89 81       	ldd	r24, Y+1	; 0x01
    5f58:	8f 77       	andi	r24, 0x7F	; 127
    5f5a:	9a de       	rcall	.-716    	; 0x5c90 <BCDtoBIN>
    5f5c:	90 e0       	ldi	r25, 0x00	; 0
    5f5e:	f6 01       	movw	r30, r12
    5f60:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    5f62:	80 83       	st	Z, r24
    5f64:	8a 81       	ldd	r24, Y+2	; 0x02
    5f66:	8f 77       	andi	r24, 0x7F	; 127
    5f68:	93 de       	rcall	.-730    	; 0x5c90 <BCDtoBIN>
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    5f6e:	93 83       	std	Z+3, r25	; 0x03
    5f70:	82 83       	std	Z+2, r24	; 0x02
    5f72:	8b 81       	ldd	r24, Y+3	; 0x03
    5f74:	8f 73       	andi	r24, 0x3F	; 63
    5f76:	8c de       	rcall	.-744    	; 0x5c90 <BCDtoBIN>
    5f78:	90 e0       	ldi	r25, 0x00	; 0
    5f7a:	f6 01       	movw	r30, r12
    5f7c:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    5f7e:	84 83       	std	Z+4, r24	; 0x04
    5f80:	8c 81       	ldd	r24, Y+4	; 0x04
    5f82:	87 70       	andi	r24, 0x07	; 7
    5f84:	90 e0       	ldi	r25, 0x00	; 0
    5f86:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    5f88:	95 87       	std	Z+13, r25	; 0x0d
    5f8a:	84 87       	std	Z+12, r24	; 0x0c
    5f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f8e:	8f 73       	andi	r24, 0x3F	; 63
    5f90:	7f de       	rcall	.-770    	; 0x5c90 <BCDtoBIN>
    5f92:	90 e0       	ldi	r25, 0x00	; 0
    5f94:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    5f96:	97 83       	std	Z+7, r25	; 0x07
    5f98:	86 83       	std	Z+6, r24	; 0x06
    5f9a:	8e 81       	ldd	r24, Y+6	; 0x06
    5f9c:	8f 71       	andi	r24, 0x1F	; 31
    5f9e:	78 de       	rcall	.-784    	; 0x5c90 <BCDtoBIN>
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	01 97       	sbiw	r24, 0x01	; 1
    5fa4:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    5fa6:	91 87       	std	Z+9, r25	; 0x09
    5fa8:	80 87       	std	Z+8, r24	; 0x08
    5faa:	8f 81       	ldd	r24, Y+7	; 0x07
    5fac:	71 de       	rcall	.-798    	; 0x5c90 <BCDtoBIN>
    5fae:	90 e0       	ldi	r25, 0x00	; 0
    5fb0:	8c 59       	subi	r24, 0x9C	; 156
    5fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    5fb4:	f6 01       	movw	r30, r12
    5fb6:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    5fb8:	82 87       	std	Z+10, r24	; 0x0a
}
    5fba:	81 e0       	ldi	r24, 0x01	; 1
    5fbc:	29 96       	adiw	r28, 0x09	; 9
    5fbe:	0f b6       	in	r0, 0x3f	; 63
    5fc0:	f8 94       	cli
    5fc2:	de bf       	out	0x3e, r29	; 62
    5fc4:	0f be       	out	0x3f, r0	; 63
    5fc6:	cd bf       	out	0x3d, r28	; 61
    5fc8:	df 91       	pop	r29
    5fca:	cf 91       	pop	r28
    5fcc:	1f 91       	pop	r17
    5fce:	0f 91       	pop	r16
    5fd0:	ef 90       	pop	r14
    5fd2:	df 90       	pop	r13
    5fd4:	cf 90       	pop	r12
    5fd6:	08 95       	ret

00005fd8 <I2C_Start>:
/*
 *  Move the cursor one character to the right.
 */
void LCD_moveCursorRight()
{
	LCD_moveCursorRightCount(1);
    5fd8:	64 e1       	ldi	r22, 0x14	; 20
    5fda:	52 dd       	rcall	.-1372   	; 0x5a80 <TWI_StartTransmission>
    5fdc:	81 11       	cpse	r24, r1
    5fde:	07 c0       	rjmp	.+14     	; 0x5fee <I2C_Start+0x16>
    5fe0:	81 e0       	ldi	r24, 0x01	; 1
    5fe2:	90 e0       	ldi	r25, 0x00	; 0
    5fe4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <LCD_ok+0x1>
    5fe8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LCD_ok>
    5fec:	04 c0       	rjmp	.+8      	; 0x5ff6 <I2C_Start+0x1e>
    5fee:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <LCD_ok+0x1>
    5ff2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <LCD_ok>
    5ff6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    5ffa:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    5ffe:	08 95       	ret

00006000 <I2C_Stop>:
    6000:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    6004:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    6008:	89 2b       	or	r24, r25
    600a:	09 f0       	breq	.+2      	; 0x600e <I2C_Stop+0xe>
    600c:	35 cd       	rjmp	.-1430   	; 0x5a78 <TWI_StopTransmission>
    600e:	08 95       	ret

00006010 <I2C_Send>:
    6010:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <LCD_ok>
    6014:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <LCD_ok+0x1>
    6018:	21 15       	cp	r18, r1
    601a:	31 05       	cpc	r19, r1
    601c:	41 f0       	breq	.+16     	; 0x602e <I2C_Send+0x1e>
    601e:	90 dd       	rcall	.-1248   	; 0x5b40 <TWI_SendByte>
    6020:	51 e0       	ldi	r21, 0x01	; 1
    6022:	40 e0       	ldi	r20, 0x00	; 0
    6024:	89 2b       	or	r24, r25
    6026:	09 f0       	breq	.+2      	; 0x602a <I2C_Send+0x1a>
    6028:	50 e0       	ldi	r21, 0x00	; 0
    602a:	25 2f       	mov	r18, r21
    602c:	34 2f       	mov	r19, r20
    602e:	c9 01       	movw	r24, r18
    6030:	08 95       	ret

00006032 <LCD_putb>:
    6032:	cf 93       	push	r28
    6034:	c8 2f       	mov	r28, r24
    6036:	84 ee       	ldi	r24, 0xE4	; 228
    6038:	cf df       	rcall	.-98     	; 0x5fd8 <I2C_Start>
    603a:	89 2b       	or	r24, r25
    603c:	19 f4       	brne	.+6      	; 0x6044 <LCD_putb+0x12>
    603e:	80 e0       	ldi	r24, 0x00	; 0
    6040:	90 e0       	ldi	r25, 0x00	; 0
    6042:	07 c0       	rjmp	.+14     	; 0x6052 <LCD_putb+0x20>
    6044:	8c 2f       	mov	r24, r28
    6046:	e4 df       	rcall	.-56     	; 0x6010 <I2C_Send>
    6048:	89 2b       	or	r24, r25
    604a:	c9 f3       	breq	.-14     	; 0x603e <LCD_putb+0xc>
    604c:	d9 df       	rcall	.-78     	; 0x6000 <I2C_Stop>
    604e:	81 e0       	ldi	r24, 0x01	; 1
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	cf 91       	pop	r28
    6054:	08 95       	ret

00006056 <LCD_command>:
    6056:	cf 93       	push	r28
    6058:	c8 2f       	mov	r28, r24
    605a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    605e:	bc df       	rcall	.-136    	; 0x5fd8 <I2C_Start>
    6060:	89 2b       	or	r24, r25
    6062:	51 f0       	breq	.+20     	; 0x6078 <LCD_command+0x22>
    6064:	8c e7       	ldi	r24, 0x7C	; 124
    6066:	d4 df       	rcall	.-88     	; 0x6010 <I2C_Send>
    6068:	8c 2f       	mov	r24, r28
    606a:	d2 df       	rcall	.-92     	; 0x6010 <I2C_Send>
    606c:	c9 df       	rcall	.-110    	; 0x6000 <I2C_Stop>
    606e:	6a e0       	ldi	r22, 0x0A	; 10
    6070:	70 e0       	ldi	r23, 0x00	; 0
    6072:	80 e0       	ldi	r24, 0x00	; 0
    6074:	90 e0       	ldi	r25, 0x00	; 0
    6076:	ed d9       	rcall	.-3110   	; 0x5452 <delayms>
    6078:	cf 91       	pop	r28
    607a:	08 95       	ret

0000607c <LCD_specialCommand>:
    607c:	cf 93       	push	r28
    607e:	c8 2f       	mov	r28, r24
    6080:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    6084:	a9 df       	rcall	.-174    	; 0x5fd8 <I2C_Start>
    6086:	89 2b       	or	r24, r25
    6088:	51 f0       	breq	.+20     	; 0x609e <LCD_specialCommand+0x22>
    608a:	8e ef       	ldi	r24, 0xFE	; 254
    608c:	c1 df       	rcall	.-126    	; 0x6010 <I2C_Send>
    608e:	8c 2f       	mov	r24, r28
    6090:	bf df       	rcall	.-130    	; 0x6010 <I2C_Send>
    6092:	b6 df       	rcall	.-148    	; 0x6000 <I2C_Stop>
    6094:	62 e3       	ldi	r22, 0x32	; 50
    6096:	70 e0       	ldi	r23, 0x00	; 0
    6098:	80 e0       	ldi	r24, 0x00	; 0
    609a:	90 e0       	ldi	r25, 0x00	; 0
    609c:	da d9       	rcall	.-3148   	; 0x5452 <delayms>
    609e:	cf 91       	pop	r28
    60a0:	08 95       	ret

000060a2 <LCD_setCursor>:
    60a2:	a8 e0       	ldi	r26, 0x08	; 8
    60a4:	b0 e0       	ldi	r27, 0x00	; 0
    60a6:	e7 e5       	ldi	r30, 0x57	; 87
    60a8:	f0 e3       	ldi	r31, 0x30	; 48
    60aa:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    60ae:	98 e0       	ldi	r25, 0x08	; 8
    60b0:	eb e5       	ldi	r30, 0x5B	; 91
    60b2:	f2 e0       	ldi	r31, 0x02	; 2
    60b4:	de 01       	movw	r26, r28
    60b6:	11 96       	adiw	r26, 0x01	; 1
    60b8:	01 90       	ld	r0, Z+
    60ba:	0d 92       	st	X+, r0
    60bc:	9a 95       	dec	r25
    60be:	e1 f7       	brne	.-8      	; 0x60b8 <LCD_setCursor+0x16>
    60c0:	64 30       	cpi	r22, 0x04	; 4
    60c2:	08 f0       	brcs	.+2      	; 0x60c6 <LCD_setCursor+0x24>
    60c4:	63 e0       	ldi	r22, 0x03	; 3
    60c6:	fe 01       	movw	r30, r28
    60c8:	31 96       	adiw	r30, 0x01	; 1
    60ca:	e6 0f       	add	r30, r22
    60cc:	f1 1d       	adc	r31, r1
    60ce:	e6 0f       	add	r30, r22
    60d0:	f1 1d       	adc	r31, r1
    60d2:	90 81       	ld	r25, Z
    60d4:	89 0f       	add	r24, r25
    60d6:	80 68       	ori	r24, 0x80	; 128
    60d8:	d1 df       	rcall	.-94     	; 0x607c <LCD_specialCommand>
    60da:	28 96       	adiw	r28, 0x08	; 8
    60dc:	e2 e0       	ldi	r30, 0x02	; 2
    60de:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

000060e2 <LCD_pos>:
    60e2:	ea e0       	ldi	r30, 0x0A	; 10
    60e4:	f1 e0       	ldi	r31, 0x01	; 1
    60e6:	28 2f       	mov	r18, r24
    60e8:	30 e0       	ldi	r19, 0x00	; 0
    60ea:	31 83       	std	Z+1, r19	; 0x01
    60ec:	20 83       	st	Z, r18
    60ee:	26 2f       	mov	r18, r22
    60f0:	30 e0       	ldi	r19, 0x00	; 0
    60f2:	33 83       	std	Z+3, r19	; 0x03
    60f4:	22 83       	std	Z+2, r18	; 0x02
    60f6:	d5 cf       	rjmp	.-86     	; 0x60a2 <LCD_setCursor>
    60f8:	08 95       	ret

000060fa <LCD_clear>:
    60fa:	8d e2       	ldi	r24, 0x2D	; 45
    60fc:	ac df       	rcall	.-168    	; 0x6056 <LCD_command>
    60fe:	60 e0       	ldi	r22, 0x00	; 0
    6100:	80 e0       	ldi	r24, 0x00	; 0
    6102:	ef df       	rcall	.-34     	; 0x60e2 <LCD_pos>
    6104:	6a e0       	ldi	r22, 0x0A	; 10
    6106:	70 e0       	ldi	r23, 0x00	; 0
    6108:	80 e0       	ldi	r24, 0x00	; 0
    610a:	90 e0       	ldi	r25, 0x00	; 0
    610c:	a2 c9       	rjmp	.-3260   	; 0x5452 <delayms>
    610e:	08 95       	ret

00006110 <LCD_setFastBacklightRGB>:
} // moveCursorRight


//New command - set backlight with LCD messages or delaymss
void LCD_setFastBacklightRGB(byte r, byte g, byte b)
{
    6110:	1f 93       	push	r17
    6112:	cf 93       	push	r28
    6114:	df 93       	push	r29
    6116:	18 2f       	mov	r17, r24
    6118:	d6 2f       	mov	r29, r22
    611a:	c4 2f       	mov	r28, r20
  //send commands to the display to set backlights
  if( !I2C_Start(lcd_address) )
    611c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    6120:	5b df       	rcall	.-330    	; 0x5fd8 <I2C_Start>
    6122:	89 2b       	or	r24, r25
	return;
  I2C_Send(SETTING_COMMAND); //Send special command character
    6124:	81 f0       	breq	.+32     	; 0x6146 <LCD_setFastBacklightRGB+0x36>
  I2C_Send(SET_RGB_COMMAND); //Send the set RGB character '+' or plus
    6126:	8c e7       	ldi	r24, 0x7C	; 124
  I2C_Send(r);               //Send the red value
  I2C_Send(g);               //Send the green value
    6128:	73 df       	rcall	.-282    	; 0x6010 <I2C_Send>
    612a:	8b e2       	ldi	r24, 0x2B	; 43
  I2C_Send(b);               //Send the blue value
    612c:	71 df       	rcall	.-286    	; 0x6010 <I2C_Send>
    612e:	81 2f       	mov	r24, r17
  I2C_Stop();         //Stop transmission
    6130:	6f df       	rcall	.-290    	; 0x6010 <I2C_Send>
    6132:	8d 2f       	mov	r24, r29
  delayms(10);
    6134:	6d df       	rcall	.-294    	; 0x6010 <I2C_Send>
    6136:	8c 2f       	mov	r24, r28
    6138:	6b df       	rcall	.-298    	; 0x6010 <I2C_Send>
    613a:	62 df       	rcall	.-316    	; 0x6000 <I2C_Stop>
    613c:	6a e0       	ldi	r22, 0x0A	; 10
    613e:	70 e0       	ldi	r23, 0x00	; 0
} // setFastBacklight
    6140:	80 e0       	ldi	r24, 0x00	; 0
    6142:	90 e0       	ldi	r25, 0x00	; 0
    6144:	86 d9       	rcall	.-3316   	; 0x5452 <delayms>
    6146:	df 91       	pop	r29
    6148:	cf 91       	pop	r28
    614a:	1f 91       	pop	r17
    614c:	08 95       	ret

0000614e <LCD_init>:
 *
 */
bool LCD_init(uint8_t addr)
{
  
  if( !I2C_Start(lcd_address = addr) )
    614e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <lcd_address>
    6152:	42 df       	rcall	.-380    	; 0x5fd8 <I2C_Start>
    6154:	00 97       	sbiw	r24, 0x00	; 0
	return 0;

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    6156:	61 f1       	breq	.+88     	; 0x61b0 <LCD_init+0x62>
    6158:	8e ef       	ldi	r24, 0xFE	; 254
  I2C_Send(LCD_DISPLAYCONTROL | _displayControl); //Send the display command
    615a:	5a df       	rcall	.-332    	; 0x6010 <I2C_Send>
    615c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_displayControl>

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    6160:	88 60       	ori	r24, 0x08	; 8
    6162:	56 df       	rcall	.-340    	; 0x6010 <I2C_Send>
  I2C_Send(LCD_ENTRYMODESET | _displayMode);      //Send the entry mode command
    6164:	8e ef       	ldi	r24, 0xFE	; 254
    6166:	54 df       	rcall	.-344    	; 0x6010 <I2C_Send>

  I2C_Send(SETTING_COMMAND);                      //Put LCD into setting mode
    6168:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_displayMode>
  I2C_Send(CLEAR_COMMAND);                        //Send clear display command

  I2C_Send(SETTING_COMMAND);                      //Send special command character
    616c:	84 60       	ori	r24, 0x04	; 4
  I2C_Send(DISABLE_SYSTEM_MESSAGE_DISPLAY);       //Send the set '.' character
    616e:	50 df       	rcall	.-352    	; 0x6010 <I2C_Send>
    6170:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    6172:	4e df       	rcall	.-356    	; 0x6010 <I2C_Send>
    6174:	8d e2       	ldi	r24, 0x2D	; 45
  I2C_Send(LCD_SETDDRAMADDR | 0);				// HOME 0,0
    6176:	4c df       	rcall	.-360    	; 0x6010 <I2C_Send>
    6178:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Stop();
    617a:	4a df       	rcall	.-364    	; 0x6010 <I2C_Send>
    617c:	8f e2       	ldi	r24, 0x2F	; 47
  delayms(50);                                      //let things settle a bit
    617e:	48 df       	rcall	.-368    	; 0x6010 <I2C_Send>
    6180:	8e ef       	ldi	r24, 0xFE	; 254
    6182:	46 df       	rcall	.-372    	; 0x6010 <I2C_Send>
    6184:	80 e8       	ldi	r24, 0x80	; 128
    6186:	44 df       	rcall	.-376    	; 0x6010 <I2C_Send>
    6188:	3b df       	rcall	.-394    	; 0x6000 <I2C_Stop>

  LCD_setFastBacklightRGB ( 0xC0, 0xC0, 0xC0 );
    618a:	62 e3       	ldi	r22, 0x32	; 50
    618c:	70 e0       	ldi	r23, 0x00	; 0
    618e:	80 e0       	ldi	r24, 0x00	; 0
    6190:	90 e0       	ldi	r25, 0x00	; 0
    6192:	5f d9       	rcall	.-3394   	; 0x5452 <delayms>

  lcd.xpos = 0;
    6194:	40 ec       	ldi	r20, 0xC0	; 192
    6196:	60 ec       	ldi	r22, 0xC0	; 192
    6198:	80 ec       	ldi	r24, 0xC0	; 192
    619a:	ba df       	rcall	.-140    	; 0x6110 <LCD_setFastBacklightRGB>
  lcd.ypos = 0;
    619c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    61a0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>

  return(1);
    61a4:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
} //init
    61a8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    61ac:	81 e0       	ldi	r24, 0x01	; 1
    61ae:	90 e0       	ldi	r25, 0x00	; 0
    61b0:	08 95       	ret

000061b2 <lcd_cleareol>:
	{
		LCD_putb(' ');
		rem--;
	}
	LCD_pos(lcd.xpos = 0,lcd.ypos);
}
    61b2:	cf 93       	push	r28
    61b4:	df 93       	push	r29
    61b6:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <lcd+0x4>
    61ba:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <lcd+0x5>
    61be:	21 97       	sbiw	r28, 0x01	; 1
    61c0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    61c4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    61c8:	c8 1b       	sub	r28, r24
    61ca:	d9 0b       	sbc	r29, r25
    61cc:	1c 16       	cp	r1, r28
    61ce:	1d 06       	cpc	r1, r29
    61d0:	24 f4       	brge	.+8      	; 0x61da <lcd_cleareol+0x28>
    61d2:	80 e2       	ldi	r24, 0x20	; 32
    61d4:	2e df       	rcall	.-420    	; 0x6032 <LCD_putb>
    61d6:	21 97       	sbiw	r28, 0x01	; 1
    61d8:	f9 cf       	rjmp	.-14     	; 0x61cc <lcd_cleareol+0x1a>
    61da:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    61de:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    61e2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    61e6:	01 97       	sbiw	r24, 0x01	; 1
    61e8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    61ec:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
    61f0:	78 df       	rcall	.-272    	; 0x60e2 <LCD_pos>
    61f2:	df 91       	pop	r29
    61f4:	cf 91       	pop	r28
    61f6:	08 95       	ret

000061f8 <lcd_putch>:

/// @brief  put character 
/// @param[in] c: character
/// return: void
void lcd_putch(int c)
{
    61f8:	cf 93       	push	r28
    61fa:	df 93       	push	r29
	int rem;

	if(c < 0 || c > 0x7e)
    61fc:	8f 37       	cpi	r24, 0x7F	; 127
    61fe:	91 05       	cpc	r25, r1
    6200:	08 f0       	brcs	.+2      	; 0x6204 <lcd_putch+0xc>
    6202:	50 c0       	rjmp	.+160    	; 0x62a4 <lcd_putch+0xac>
    6204:	ec 01       	movw	r28, r24
		return;

	// Normal visible characters
	if(c >= ' ')
    6206:	80 32       	cpi	r24, 0x20	; 32
    6208:	91 05       	cpc	r25, r1
    620a:	4c f1       	brlt	.+82     	; 0x625e <lcd_putch+0x66>
	{
		rem = (lcd.w - 1 - lcd.xpos);
		if( rem <= 0 )
    620c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    6210:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    6214:	01 97       	sbiw	r24, 0x01	; 1
    6216:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <lcd>
    621a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <lcd+0x1>
    621e:	82 1b       	sub	r24, r18
    6220:	93 0b       	sbc	r25, r19
    6222:	18 16       	cp	r1, r24
    6224:	19 06       	cpc	r1, r25
    6226:	7c f0       	brlt	.+30     	; 0x6246 <lcd_putch+0x4e>
		{
			LCD_pos(++lcd.ypos,lcd.xpos=0);
    6228:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    622c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    6230:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lcd+0x2>
    6234:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <lcd+0x3>
    6238:	01 96       	adiw	r24, 0x01	; 1
    623a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <lcd+0x3>
    623e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lcd+0x2>
    6242:	60 e0       	ldi	r22, 0x00	; 0
		}
		(void) LCD_putb(c);
    6244:	4e df       	rcall	.-356    	; 0x60e2 <LCD_pos>
    6246:	8c 2f       	mov	r24, r28
		// uart_putchar(c,0);
		lcd.xpos++;
    6248:	f4 de       	rcall	.-536    	; 0x6032 <LCD_putb>
    624a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    624e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    6252:	01 96       	adiw	r24, 0x01	; 1
    6254:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    6258:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
		return;
	}

	// Control characters
	if(c == '\n')
    625c:	23 c0       	rjmp	.+70     	; 0x62a4 <lcd_putch+0xac>
    625e:	8a 30       	cpi	r24, 0x0A	; 10
	{
		// uart_putchar(c,0);
		lcd_cleareol();
    6260:	91 05       	cpc	r25, r1
    6262:	91 f4       	brne	.+36     	; 0x6288 <lcd_putch+0x90>
		++lcd.ypos;
		lcd.ypos &= 3;
    6264:	a6 df       	rcall	.-180    	; 0x61b2 <lcd_cleareol>
    6266:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    626a:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <lcd+0x3>
    626e:	6f 5f       	subi	r22, 0xFF	; 255
    6270:	7f 4f       	sbci	r23, 0xFF	; 255
    6272:	63 70       	andi	r22, 0x03	; 3
    6274:	77 27       	eor	r23, r23
    6276:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <lcd+0x3>
    627a:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <lcd+0x2>
		LCD_pos(lcd.xpos=0,lcd.ypos);
    627e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    6282:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
	}

	if(c == '\f')
    6286:	0c c0       	rjmp	.+24     	; 0x62a0 <lcd_putch+0xa8>
	{
		LCD_clear();
    6288:	0c 97       	sbiw	r24, 0x0c	; 12
    628a:	61 f4       	brne	.+24     	; 0x62a4 <lcd_putch+0xac>
		LCD_pos(lcd.xpos=0,lcd.ypos=0);
    628c:	36 df       	rcall	.-404    	; 0x60fa <LCD_clear>
    628e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
    6292:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    6296:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    629a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    629e:	60 e0       	ldi	r22, 0x00	; 0
    62a0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    62a2:	1f df       	rcall	.-450    	; 0x60e2 <LCD_pos>
    62a4:	df 91       	pop	r29
    62a6:	cf 91       	pop	r28
    62a8:	08 95       	ret

000062aa <_putc_win>:


// We do not use the printf structure
static void _putc_win(struct _printf_t *p, char ch)
{
    62aa:	fc 01       	movw	r30, r24
	p->sent++;
    62ac:	26 81       	ldd	r18, Z+6	; 0x06
    62ae:	37 81       	ldd	r19, Z+7	; 0x07
    62b0:	2f 5f       	subi	r18, 0xFF	; 255
    62b2:	3f 4f       	sbci	r19, 0xFF	; 255
    62b4:	37 83       	std	Z+7, r19	; 0x07
    62b6:	26 83       	std	Z+6, r18	; 0x06
	lcd_putch(ch);
    62b8:	86 2f       	mov	r24, r22
    62ba:	90 e0       	ldi	r25, 0x00	; 0
    62bc:	9d cf       	rjmp	.-198    	; 0x61f8 <lcd_putch>
    62be:	08 95       	ret

000062c0 <lcd_printf>:
/// @param[in] fmt: printf forat string
/// @param[in] ...: vararg list or arguments
/// @return size of string
MEMSPACE
int lcd_printf(const char *fmt, ... )
{
    62c0:	a8 e0       	ldi	r26, 0x08	; 8
    62c2:	b0 e0       	ldi	r27, 0x00	; 0
    62c4:	e6 e6       	ldi	r30, 0x66	; 102
    62c6:	f1 e3       	ldi	r31, 0x31	; 49
    62c8:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    62cc:	9e 01       	movw	r18, r28
    62ce:	23 5f       	subi	r18, 0xF3	; 243
    62d0:	3f 4f       	sbci	r19, 0xFF	; 255
    62d2:	f9 01       	movw	r30, r18
    62d4:	41 91       	ld	r20, Z+
    62d6:	51 91       	ld	r21, Z+
    62d8:	9f 01       	movw	r18, r30
    printf_t fn;

    fn.put = _putc_win;
    62da:	85 e5       	ldi	r24, 0x55	; 85
    62dc:	91 e3       	ldi	r25, 0x31	; 49
    62de:	9a 83       	std	Y+2, r25	; 0x02
    62e0:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    62e2:	18 86       	std	Y+8, r1	; 0x08
    62e4:	1f 82       	std	Y+7, r1	; 0x07

    va_list va;
    va_start(va, fmt);

    _printf_fn(&fn, fmt, va);
    62e6:	60 e8       	ldi	r22, 0x80	; 128
    62e8:	ce 01       	movw	r24, r28
    62ea:	01 96       	adiw	r24, 0x01	; 1
    62ec:	0e 94 41 42 	call	0x8482	; 0x8482 <_printf_fn>

    va_end(va);

	return(fn.sent);

}
    62f0:	8f 81       	ldd	r24, Y+7	; 0x07
    62f2:	98 85       	ldd	r25, Y+8	; 0x08
    62f4:	28 96       	adiw	r28, 0x08	; 8
    62f6:	e2 e0       	ldi	r30, 0x02	; 2
    62f8:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

000062fc <sep>:
    {
        if(strncmp(str,pat,len) == 0 )
            return(len);
    }
    return(0);
}
    62fc:	84 e0       	ldi	r24, 0x04	; 4
    62fe:	95 e0       	ldi	r25, 0x05	; 5
    6300:	1f 92       	push	r1
    6302:	9f 93       	push	r25
    6304:	8f 93       	push	r24
    6306:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    630a:	0f 90       	pop	r0
    630c:	0f 90       	pop	r0
    630e:	0f 90       	pop	r0
    6310:	08 95       	ret

00006312 <islower>:
    6312:	9c 01       	movw	r18, r24
    6314:	21 56       	subi	r18, 0x61	; 97
    6316:	31 09       	sbc	r19, r1
    6318:	81 e0       	ldi	r24, 0x01	; 1
    631a:	90 e0       	ldi	r25, 0x00	; 0
    631c:	2a 31       	cpi	r18, 0x1A	; 26
    631e:	31 05       	cpc	r19, r1
    6320:	10 f0       	brcs	.+4      	; 0x6326 <islower+0x14>
    6322:	80 e0       	ldi	r24, 0x00	; 0
    6324:	90 e0       	ldi	r25, 0x00	; 0
    6326:	08 95       	ret

00006328 <toupper>:
    6328:	cf 93       	push	r28
    632a:	df 93       	push	r29
    632c:	ec 01       	movw	r28, r24
    632e:	f1 df       	rcall	.-30     	; 0x6312 <islower>
    6330:	89 2b       	or	r24, r25
    6332:	19 f0       	breq	.+6      	; 0x633a <toupper+0x12>
    6334:	ce 01       	movw	r24, r28
    6336:	80 97       	sbiw	r24, 0x20	; 32
    6338:	01 c0       	rjmp	.+2      	; 0x633c <toupper+0x14>
    633a:	ce 01       	movw	r24, r28
    633c:	df 91       	pop	r29
    633e:	cf 91       	pop	r28
    6340:	08 95       	ret

00006342 <strcpy>:
    6342:	fc 01       	movw	r30, r24
    6344:	db 01       	movw	r26, r22
    6346:	2d 91       	ld	r18, X+
    6348:	bd 01       	movw	r22, r26
    634a:	01 96       	adiw	r24, 0x01	; 1
    634c:	22 23       	and	r18, r18
    634e:	11 f0       	breq	.+4      	; 0x6354 <strcpy+0x12>
    6350:	20 83       	st	Z, r18
    6352:	f7 cf       	rjmp	.-18     	; 0x6342 <strcpy>
    6354:	10 82       	st	Z, r1
    6356:	08 95       	ret

00006358 <strncpy>:
    6358:	db 01       	movw	r26, r22
    635a:	fc 01       	movw	r30, r24
    635c:	2d 91       	ld	r18, X+
    635e:	21 11       	cpse	r18, r1
    6360:	03 c0       	rjmp	.+6      	; 0x6368 <strncpy+0x10>
    6362:	4e 0f       	add	r20, r30
    6364:	5f 1f       	adc	r21, r31
    6366:	08 c0       	rjmp	.+16     	; 0x6378 <strncpy+0x20>
    6368:	41 15       	cp	r20, r1
    636a:	51 05       	cpc	r21, r1
    636c:	21 f0       	breq	.+8      	; 0x6376 <strncpy+0x1e>
    636e:	21 93       	st	Z+, r18
    6370:	41 50       	subi	r20, 0x01	; 1
    6372:	51 09       	sbc	r21, r1
    6374:	f3 cf       	rjmp	.-26     	; 0x635c <strncpy+0x4>
    6376:	08 95       	ret
    6378:	4e 17       	cp	r20, r30
    637a:	5f 07       	cpc	r21, r31
    637c:	11 f0       	breq	.+4      	; 0x6382 <strncpy+0x2a>
    637e:	11 92       	st	Z+, r1
    6380:	fb cf       	rjmp	.-10     	; 0x6378 <strncpy+0x20>
    6382:	08 95       	ret

00006384 <strcat>:
    6384:	cf 93       	push	r28
    6386:	df 93       	push	r29
    6388:	d8 2f       	mov	r29, r24
    638a:	c9 2f       	mov	r28, r25
    638c:	28 2f       	mov	r18, r24
    638e:	39 2f       	mov	r19, r25
    6390:	c9 01       	movw	r24, r18
    6392:	2f 5f       	subi	r18, 0xFF	; 255
    6394:	3f 4f       	sbci	r19, 0xFF	; 255
    6396:	fc 01       	movw	r30, r24
    6398:	40 81       	ld	r20, Z
    639a:	41 11       	cpse	r20, r1
    639c:	f9 cf       	rjmp	.-14     	; 0x6390 <strcat+0xc>
    639e:	d1 df       	rcall	.-94     	; 0x6342 <strcpy>
    63a0:	8d 2f       	mov	r24, r29
    63a2:	9c 2f       	mov	r25, r28
    63a4:	df 91       	pop	r29
    63a6:	cf 91       	pop	r28
    63a8:	08 95       	ret

000063aa <reverse>:
    63aa:	fc 01       	movw	r30, r24
    63ac:	01 90       	ld	r0, Z+
    63ae:	00 20       	and	r0, r0
    63b0:	e9 f7       	brne	.-6      	; 0x63ac <reverse+0x2>
    63b2:	31 97       	sbiw	r30, 0x01	; 1
    63b4:	e8 1b       	sub	r30, r24
    63b6:	f9 0b       	sbc	r31, r25
    63b8:	af 01       	movw	r20, r30
    63ba:	55 95       	asr	r21
    63bc:	47 95       	ror	r20
    63be:	e8 0f       	add	r30, r24
    63c0:	f9 1f       	adc	r31, r25
    63c2:	dc 01       	movw	r26, r24
    63c4:	9d 01       	movw	r18, r26
    63c6:	28 1b       	sub	r18, r24
    63c8:	39 0b       	sbc	r19, r25
    63ca:	24 17       	cp	r18, r20
    63cc:	35 07       	cpc	r19, r21
    63ce:	2c f4       	brge	.+10     	; 0x63da <reverse+0x30>
    63d0:	22 91       	ld	r18, -Z
    63d2:	3c 91       	ld	r19, X
    63d4:	30 83       	st	Z, r19
    63d6:	2d 93       	st	X+, r18
    63d8:	f5 cf       	rjmp	.-22     	; 0x63c4 <reverse+0x1a>
    63da:	08 95       	ret

000063dc <strupper>:
    63dc:	cf 93       	push	r28
    63de:	df 93       	push	r29
    63e0:	ec 01       	movw	r28, r24
    63e2:	88 81       	ld	r24, Y
    63e4:	88 23       	and	r24, r24
    63e6:	21 f0       	breq	.+8      	; 0x63f0 <strupper+0x14>
    63e8:	90 e0       	ldi	r25, 0x00	; 0
    63ea:	9e df       	rcall	.-196    	; 0x6328 <toupper>
    63ec:	89 93       	st	Y+, r24
    63ee:	f9 cf       	rjmp	.-14     	; 0x63e2 <strupper+0x6>
    63f0:	df 91       	pop	r29
    63f2:	cf 91       	pop	r28
    63f4:	08 95       	ret

000063f6 <trim_tail>:
    63f6:	00 97       	sbiw	r24, 0x00	; 0
    63f8:	69 f0       	breq	.+26     	; 0x6414 <trim_tail+0x1e>
    63fa:	fc 01       	movw	r30, r24
    63fc:	01 90       	ld	r0, Z+
    63fe:	00 20       	and	r0, r0
    6400:	e9 f7       	brne	.-6      	; 0x63fc <trim_tail+0x6>
    6402:	31 97       	sbiw	r30, 0x01	; 1
    6404:	e8 17       	cp	r30, r24
    6406:	f9 07       	cpc	r31, r25
    6408:	29 f0       	breq	.+10     	; 0x6414 <trim_tail+0x1e>
    640a:	22 91       	ld	r18, -Z
    640c:	21 32       	cpi	r18, 0x21	; 33
    640e:	10 f4       	brcc	.+4      	; 0x6414 <trim_tail+0x1e>
    6410:	10 82       	st	Z, r1
    6412:	f8 cf       	rjmp	.-16     	; 0x6404 <trim_tail+0xe>
    6414:	08 95       	ret

00006416 <skipspaces>:
    6416:	00 97       	sbiw	r24, 0x00	; 0
    6418:	39 f0       	breq	.+14     	; 0x6428 <skipspaces+0x12>
    641a:	fc 01       	movw	r30, r24
    641c:	cf 01       	movw	r24, r30
    641e:	21 91       	ld	r18, Z+
    6420:	20 32       	cpi	r18, 0x20	; 32
    6422:	e1 f3       	breq	.-8      	; 0x641c <skipspaces+0x6>
    6424:	29 30       	cpi	r18, 0x09	; 9
    6426:	d1 f3       	breq	.-12     	; 0x641c <skipspaces+0x6>
    6428:	08 95       	ret

0000642a <strcmp>:
    642a:	dc 01       	movw	r26, r24
    642c:	fb 01       	movw	r30, r22
    642e:	2d 91       	ld	r18, X+
    6430:	41 91       	ld	r20, Z+
    6432:	50 e0       	ldi	r21, 0x00	; 0
    6434:	30 e0       	ldi	r19, 0x00	; 0
    6436:	c9 01       	movw	r24, r18
    6438:	84 1b       	sub	r24, r20
    643a:	95 0b       	sbc	r25, r21
    643c:	11 f4       	brne	.+4      	; 0x6442 <strcmp+0x18>
    643e:	45 2b       	or	r20, r21
    6440:	b1 f7       	brne	.-20     	; 0x642e <strcmp+0x4>
    6442:	08 95       	ret

00006444 <strncmp>:
    6444:	fc 01       	movw	r30, r24
    6446:	db 01       	movw	r26, r22
    6448:	48 0f       	add	r20, r24
    644a:	59 1f       	adc	r21, r25
    644c:	e4 17       	cp	r30, r20
    644e:	f5 07       	cpc	r31, r21
    6450:	59 f0       	breq	.+22     	; 0x6468 <strncmp+0x24>
    6452:	21 91       	ld	r18, Z+
    6454:	6d 91       	ld	r22, X+
    6456:	70 e0       	ldi	r23, 0x00	; 0
    6458:	30 e0       	ldi	r19, 0x00	; 0
    645a:	c9 01       	movw	r24, r18
    645c:	86 1b       	sub	r24, r22
    645e:	97 0b       	sbc	r25, r23
    6460:	29 f4       	brne	.+10     	; 0x646c <strncmp+0x28>
    6462:	67 2b       	or	r22, r23
    6464:	99 f7       	brne	.-26     	; 0x644c <strncmp+0x8>
    6466:	02 c0       	rjmp	.+4      	; 0x646c <strncmp+0x28>
    6468:	80 e0       	ldi	r24, 0x00	; 0
    646a:	90 e0       	ldi	r25, 0x00	; 0
    646c:	08 95       	ret

0000646e <strcasecmp>:
    646e:	ef 92       	push	r14
    6470:	ff 92       	push	r15
    6472:	0f 93       	push	r16
    6474:	1f 93       	push	r17
    6476:	cf 93       	push	r28
    6478:	df 93       	push	r29
    647a:	7c 01       	movw	r14, r24
    647c:	8b 01       	movw	r16, r22
    647e:	f7 01       	movw	r30, r14
    6480:	81 91       	ld	r24, Z+
    6482:	7f 01       	movw	r14, r30
    6484:	90 e0       	ldi	r25, 0x00	; 0
    6486:	50 df       	rcall	.-352    	; 0x6328 <toupper>
    6488:	ec 01       	movw	r28, r24
    648a:	f8 01       	movw	r30, r16
    648c:	81 91       	ld	r24, Z+
    648e:	8f 01       	movw	r16, r30
    6490:	90 e0       	ldi	r25, 0x00	; 0
    6492:	4a df       	rcall	.-364    	; 0x6328 <toupper>
    6494:	9c 01       	movw	r18, r24
    6496:	ce 01       	movw	r24, r28
    6498:	82 1b       	sub	r24, r18
    649a:	93 0b       	sbc	r25, r19
    649c:	11 f4       	brne	.+4      	; 0x64a2 <strcasecmp+0x34>
    649e:	23 2b       	or	r18, r19
    64a0:	71 f7       	brne	.-36     	; 0x647e <strcasecmp+0x10>
    64a2:	cd b7       	in	r28, 0x3d	; 61
    64a4:	de b7       	in	r29, 0x3e	; 62
    64a6:	e6 e0       	ldi	r30, 0x06	; 6
    64a8:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

000064ac <strncasecmp>:
    64ac:	a0 e0       	ldi	r26, 0x00	; 0
    64ae:	b0 e0       	ldi	r27, 0x00	; 0
    64b0:	ec e5       	ldi	r30, 0x5C	; 92
    64b2:	f2 e3       	ldi	r31, 0x32	; 50
    64b4:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    64b8:	8c 01       	movw	r16, r24
    64ba:	7b 01       	movw	r14, r22
    64bc:	6c 01       	movw	r12, r24
    64be:	c4 0e       	add	r12, r20
    64c0:	d5 1e       	adc	r13, r21
    64c2:	0c 15       	cp	r16, r12
    64c4:	1d 05       	cpc	r17, r13
    64c6:	99 f0       	breq	.+38     	; 0x64ee <strncasecmp+0x42>
    64c8:	f8 01       	movw	r30, r16
    64ca:	81 91       	ld	r24, Z+
    64cc:	8f 01       	movw	r16, r30
    64ce:	90 e0       	ldi	r25, 0x00	; 0
    64d0:	2b df       	rcall	.-426    	; 0x6328 <toupper>
    64d2:	ec 01       	movw	r28, r24
    64d4:	f7 01       	movw	r30, r14
    64d6:	81 91       	ld	r24, Z+
    64d8:	7f 01       	movw	r14, r30
    64da:	90 e0       	ldi	r25, 0x00	; 0
    64dc:	25 df       	rcall	.-438    	; 0x6328 <toupper>
    64de:	9c 01       	movw	r18, r24
    64e0:	ce 01       	movw	r24, r28
    64e2:	82 1b       	sub	r24, r18
    64e4:	93 0b       	sbc	r25, r19
    64e6:	29 f4       	brne	.+10     	; 0x64f2 <strncasecmp+0x46>
    64e8:	23 2b       	or	r18, r19
    64ea:	59 f7       	brne	.-42     	; 0x64c2 <strncasecmp+0x16>
    64ec:	02 c0       	rjmp	.+4      	; 0x64f2 <strncasecmp+0x46>
    64ee:	80 e0       	ldi	r24, 0x00	; 0
    64f0:	90 e0       	ldi	r25, 0x00	; 0
    64f2:	cd b7       	in	r28, 0x3d	; 61
    64f4:	de b7       	in	r29, 0x3e	; 62
    64f6:	e8 e0       	ldi	r30, 0x08	; 8
    64f8:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

000064fc <MATCH>:
    64fc:	cf 93       	push	r28
    64fe:	df 93       	push	r29
    6500:	fb 01       	movw	r30, r22
    6502:	01 90       	ld	r0, Z+
    6504:	00 20       	and	r0, r0
    6506:	e9 f7       	brne	.-6      	; 0x6502 <MATCH+0x6>
    6508:	31 97       	sbiw	r30, 0x01	; 1
    650a:	ef 01       	movw	r28, r30
    650c:	c6 1b       	sub	r28, r22
    650e:	d7 0b       	sbc	r29, r23
    6510:	8c df       	rcall	.-232    	; 0x642a <strcmp>
    6512:	89 2b       	or	r24, r25
    6514:	11 f4       	brne	.+4      	; 0x651a <MATCH+0x1e>
    6516:	ce 01       	movw	r24, r28
    6518:	02 c0       	rjmp	.+4      	; 0x651e <MATCH+0x22>
    651a:	80 e0       	ldi	r24, 0x00	; 0
    651c:	90 e0       	ldi	r25, 0x00	; 0
    651e:	df 91       	pop	r29
    6520:	cf 91       	pop	r28
    6522:	08 95       	ret

00006524 <MATCHARGS>:
    6524:	ef 92       	push	r14
    6526:	ff 92       	push	r15
    6528:	0f 93       	push	r16
    652a:	1f 93       	push	r17
    652c:	cf 93       	push	r28
    652e:	df 93       	push	r29
    6530:	f6 2e       	mov	r15, r22
    6532:	e7 2e       	mov	r14, r23
    6534:	ea 01       	movw	r28, r20
    6536:	89 01       	movw	r16, r18
    6538:	e1 df       	rcall	.-62     	; 0x64fc <MATCH>
    653a:	00 97       	sbiw	r24, 0x00	; 0
    653c:	e9 f0       	breq	.+58     	; 0x6578 <MATCHARGS+0x54>
    653e:	0c 17       	cp	r16, r28
    6540:	1d 07       	cpc	r17, r29
    6542:	c4 f4       	brge	.+48     	; 0x6574 <MATCHARGS+0x50>
    6544:	1f 93       	push	r17
    6546:	0f 93       	push	r16
    6548:	df 93       	push	r29
    654a:	cf 93       	push	r28
    654c:	ef 92       	push	r14
    654e:	ff 92       	push	r15
    6550:	8e ed       	ldi	r24, 0xDE	; 222
    6552:	94 e0       	ldi	r25, 0x04	; 4
    6554:	1f 92       	push	r1
    6556:	9f 93       	push	r25
    6558:	8f 93       	push	r24
    655a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    655e:	8d b7       	in	r24, 0x3d	; 61
    6560:	9e b7       	in	r25, 0x3e	; 62
    6562:	09 96       	adiw	r24, 0x09	; 9
    6564:	0f b6       	in	r0, 0x3f	; 63
    6566:	f8 94       	cli
    6568:	9e bf       	out	0x3e, r25	; 62
    656a:	0f be       	out	0x3f, r0	; 63
    656c:	8d bf       	out	0x3d, r24	; 61
    656e:	80 e0       	ldi	r24, 0x00	; 0
    6570:	90 e0       	ldi	r25, 0x00	; 0
    6572:	02 c0       	rjmp	.+4      	; 0x6578 <MATCHARGS+0x54>
    6574:	81 e0       	ldi	r24, 0x01	; 1
    6576:	90 e0       	ldi	r25, 0x00	; 0
    6578:	cd b7       	in	r28, 0x3d	; 61
    657a:	de b7       	in	r29, 0x3e	; 62
    657c:	e6 e0       	ldi	r30, 0x06	; 6
    657e:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

00006582 <MATCHI>:
    6582:	cf 93       	push	r28
    6584:	df 93       	push	r29
    6586:	fb 01       	movw	r30, r22
    6588:	01 90       	ld	r0, Z+
    658a:	00 20       	and	r0, r0
    658c:	e9 f7       	brne	.-6      	; 0x6588 <MATCHI+0x6>
    658e:	31 97       	sbiw	r30, 0x01	; 1
    6590:	ef 01       	movw	r28, r30
    6592:	c6 1b       	sub	r28, r22
    6594:	d7 0b       	sbc	r29, r23
    6596:	6b df       	rcall	.-298    	; 0x646e <strcasecmp>
    6598:	89 2b       	or	r24, r25
    659a:	11 f4       	brne	.+4      	; 0x65a0 <MATCHI+0x1e>
    659c:	ce 01       	movw	r24, r28
    659e:	02 c0       	rjmp	.+4      	; 0x65a4 <MATCHI+0x22>
    65a0:	80 e0       	ldi	r24, 0x00	; 0
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	df 91       	pop	r29
    65a6:	cf 91       	pop	r28
    65a8:	08 95       	ret

000065aa <MATCHI_LEN>:
///@return string lenth on match.
///@return 0 on no match.
///@warning Matches sub strings so be caeful.
MEMSPACE
int MATCHI_LEN(char *str, char *pat)
{
    65aa:	cf 93       	push	r28
    65ac:	df 93       	push	r29
    int len;

    if(!str || !pat)
    65ae:	00 97       	sbiw	r24, 0x00	; 0
    65b0:	89 f0       	breq	.+34     	; 0x65d4 <MATCHI_LEN+0x2a>
    65b2:	61 15       	cp	r22, r1
    65b4:	71 05       	cpc	r23, r1
    65b6:	71 f0       	breq	.+28     	; 0x65d4 <MATCHI_LEN+0x2a>
        return(0);
    len = strlen(pat);
    65b8:	eb 01       	movw	r28, r22
    65ba:	09 90       	ld	r0, Y+
    65bc:	00 20       	and	r0, r0
    65be:	e9 f7       	brne	.-6      	; 0x65ba <MATCHI_LEN+0x10>
    65c0:	21 97       	sbiw	r28, 0x01	; 1
    65c2:	c6 1b       	sub	r28, r22
    65c4:	d7 0b       	sbc	r29, r23

    if( len )
    65c6:	31 f0       	breq	.+12     	; 0x65d4 <MATCHI_LEN+0x2a>
    {
        if(strncasecmp(str,pat,len) == 0 )
    65c8:	ae 01       	movw	r20, r28
    65ca:	70 df       	rcall	.-288    	; 0x64ac <strncasecmp>
    65cc:	89 2b       	or	r24, r25
    65ce:	11 f4       	brne	.+4      	; 0x65d4 <MATCHI_LEN+0x2a>
    65d0:	ce 01       	movw	r24, r28
    65d2:	02 c0       	rjmp	.+4      	; 0x65d8 <MATCHI_LEN+0x2e>
int MATCHI_LEN(char *str, char *pat)
{
    int len;

    if(!str || !pat)
        return(0);
    65d4:	80 e0       	ldi	r24, 0x00	; 0
    65d6:	90 e0       	ldi	r25, 0x00	; 0
    {
        if(strncasecmp(str,pat,len) == 0 )
            return(len);
    }
    return(0);
}
    65d8:	df 91       	pop	r29
    65da:	cf 91       	pop	r28
    65dc:	08 95       	ret

000065de <split_args>:
///@param[out] *argv[]: token array
///@param[in] max: maximum argument count
///@return count
MEMSPACE
int split_args(char *str, char *argv[], int max)
{
    65de:	a0 e0       	ldi	r26, 0x00	; 0
    65e0:	b0 e0       	ldi	r27, 0x00	; 0
    65e2:	e5 ef       	ldi	r30, 0xF5	; 245
    65e4:	f2 e3       	ldi	r31, 0x32	; 50
    65e6:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    65ea:	dc 01       	movw	r26, r24
    65ec:	6a 01       	movw	r12, r20
    65ee:	8b 01       	movw	r16, r22
    int i;
    int count = 0;
    // NULL ?

    for(i=0;i<max;++i)
    65f0:	fb 01       	movw	r30, r22
    65f2:	80 e0       	ldi	r24, 0x00	; 0
    65f4:	90 e0       	ldi	r25, 0x00	; 0
    65f6:	8c 15       	cp	r24, r12
    65f8:	9d 05       	cpc	r25, r13
    65fa:	24 f4       	brge	.+8      	; 0x6604 <split_args+0x26>
        argv[i] = NULL; 
    65fc:	11 92       	st	Z+, r1
    65fe:	11 92       	st	Z+, r1
{
    int i;
    int count = 0;
    // NULL ?

    for(i=0;i<max;++i)
    6600:	01 96       	adiw	r24, 0x01	; 1
    6602:	f9 cf       	rjmp	.-14     	; 0x65f6 <split_args+0x18>
        argv[i] = NULL; 

    // You may replace argv[0]
    // argv[count++] = "main";

    if(!max)
    6604:	c1 14       	cp	r12, r1
    6606:	d1 04       	cpc	r13, r1
    6608:	d9 f1       	breq	.+118    	; 0x6680 <split_args+0xa2>
        return(0);

    if(!str)
    660a:	10 97       	sbiw	r26, 0x00	; 0
    660c:	c9 f1       	breq	.+114    	; 0x6680 <split_args+0xa2>
    660e:	ee 24       	eor	r14, r14
    6610:	e3 94       	inc	r14
    6612:	f1 2c       	mov	r15, r1
    6614:	c0 e0       	ldi	r28, 0x00	; 0
    6616:	d0 e0       	ldi	r29, 0x00	; 0
        return(0);

    while(*str && count < max)
    6618:	8c 91       	ld	r24, X
    661a:	88 23       	and	r24, r24
    661c:	b1 f1       	breq	.+108    	; 0x668a <split_args+0xac>
    661e:	cc 15       	cp	r28, r12
    6620:	dd 05       	cpc	r29, r13
    6622:	9c f5       	brge	.+102    	; 0x668a <split_args+0xac>
    {
        str = skipspaces(str);
    6624:	cd 01       	movw	r24, r26
    6626:	f7 de       	rcall	.-530    	; 0x6416 <skipspaces>
        if(!*str)
    6628:	dc 01       	movw	r26, r24
    662a:	2c 91       	ld	r18, X
    662c:	22 23       	and	r18, r18
    662e:	69 f1       	breq	.+90     	; 0x668a <split_args+0xac>
            break;

        // string processing
        if(*str == '"')
    6630:	22 32       	cpi	r18, 0x22	; 34
    6632:	79 f4       	brne	.+30     	; 0x6652 <split_args+0x74>
        {
            ++str;
    6634:	fc 01       	movw	r30, r24
    6636:	31 96       	adiw	r30, 0x01	; 1
            // Save string pointer
            argv[count++] = str;
    6638:	d8 01       	movw	r26, r16
    663a:	ed 93       	st	X+, r30
    663c:	fc 93       	st	X, r31
    663e:	df 01       	movw	r26, r30
            while(*str && *str != '"')
    6640:	80 81       	ld	r24, Z
    6642:	31 96       	adiw	r30, 0x01	; 1
    6644:	88 23       	and	r24, r24
    6646:	a9 f0       	breq	.+42     	; 0x6672 <split_args+0x94>
    6648:	82 32       	cpi	r24, 0x22	; 34
    664a:	c9 f7       	brne	.-14     	; 0x663e <split_args+0x60>
                ++str;
            if(*str == '"')
                *str++ = 0;
    664c:	1c 92       	st	X, r1
    664e:	df 01       	movw	r26, r30
    6650:	10 c0       	rjmp	.+32     	; 0x6672 <split_args+0x94>
            continue;
        }

        argv[count++] = str;
    6652:	f8 01       	movw	r30, r16
    6654:	91 83       	std	Z+1, r25	; 0x01
    6656:	80 83       	st	Z, r24
    6658:	fc 01       	movw	r30, r24
    665a:	2e 2f       	mov	r18, r30
    665c:	9f 2f       	mov	r25, r31
        // Find size of token
        while(*str > ' ' && *str <= 0x7e)
    665e:	81 91       	ld	r24, Z+
    6660:	3f ed       	ldi	r19, 0xDF	; 223
    6662:	38 0f       	add	r19, r24
    6664:	3e 35       	cpi	r19, 0x5E	; 94
    6666:	c8 f3       	brcs	.-14     	; 0x665a <split_args+0x7c>
            ++str;
        if(!*str)
    6668:	88 23       	and	r24, r24
    666a:	69 f0       	breq	.+26     	; 0x6686 <split_args+0xa8>
            break;
        *str  = 0;
    666c:	a2 2f       	mov	r26, r18
    666e:	b9 2f       	mov	r27, r25
    6670:	1d 92       	st	X+, r1
    6672:	21 96       	adiw	r28, 0x01	; 1
    6674:	ff ef       	ldi	r31, 0xFF	; 255
    6676:	ef 1a       	sub	r14, r31
    6678:	ff 0a       	sbc	r15, r31
    667a:	0e 5f       	subi	r16, 0xFE	; 254
    667c:	1f 4f       	sbci	r17, 0xFF	; 255
    667e:	cc cf       	rjmp	.-104    	; 0x6618 <split_args+0x3a>

    // You may replace argv[0]
    // argv[count++] = "main";

    if(!max)
        return(0);
    6680:	80 e0       	ldi	r24, 0x00	; 0
    6682:	90 e0       	ldi	r25, 0x00	; 0
    6684:	03 c0       	rjmp	.+6      	; 0x668c <split_args+0xae>
            if(*str == '"')
                *str++ = 0;
            continue;
        }

        argv[count++] = str;
    6686:	c7 01       	movw	r24, r14
    6688:	01 c0       	rjmp	.+2      	; 0x668c <split_args+0xae>
    668a:	ce 01       	movw	r24, r28
            break;
        *str  = 0;
        ++str;
    }
    return(count);
}
    668c:	cd b7       	in	r28, 0x3d	; 61
    668e:	de b7       	in	r29, 0x3e	; 62
    6690:	e8 e0       	ldi	r30, 0x08	; 8
    6692:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

00006696 <get_token>:
///
///@return pointer past token on success .
///@return NULL if no token found
MEMSPACE
char *get_token(char *str, char *token, int max)
{
    6696:	ef 92       	push	r14
    6698:	ff 92       	push	r15
    669a:	0f 93       	push	r16
    669c:	1f 93       	push	r17
    669e:	cf 93       	push	r28
    66a0:	df 93       	push	r29
    66a2:	eb 01       	movw	r28, r22
    66a4:	8a 01       	movw	r16, r20

	*token = 0;
    66a6:	18 82       	st	Y, r1

    if(!str || *str == 0)
    66a8:	00 97       	sbiw	r24, 0x00	; 0
    66aa:	89 f1       	breq	.+98     	; 0x670e <get_token+0x78>
    66ac:	fc 01       	movw	r30, r24
    66ae:	20 81       	ld	r18, Z
    66b0:	22 23       	and	r18, r18
        return(str);

    // Skip beginning spaces
    str = skipspaces(str);
    66b2:	79 f1       	breq	.+94     	; 0x6712 <get_token+0x7c>
    // Delete all trailing spaces
    trim_tail(str);
    66b4:	b0 de       	rcall	.-672    	; 0x6416 <skipspaces>
    66b6:	7c 01       	movw	r14, r24
    66b8:	9e de       	rcall	.-708    	; 0x63f6 <trim_tail>
    66ba:	f7 01       	movw	r30, r14

    while(*str > ' ' && max > 0) {
    66bc:	cf 01       	movw	r24, r30
    66be:	21 91       	ld	r18, Z+
    66c0:	21 32       	cpi	r18, 0x21	; 33
    66c2:	e0 f0       	brcs	.+56     	; 0x66fc <get_token+0x66>
    66c4:	10 16       	cp	r1, r16
    66c6:	11 06       	cpc	r1, r17

        // String processing
        // A token can be a quoted string
        if(*str == '"')
    66c8:	cc f4       	brge	.+50     	; 0x66fc <get_token+0x66>
    66ca:	22 32       	cpi	r18, 0x22	; 34
    66cc:	79 f4       	brne	.+30     	; 0x66ec <get_token+0x56>
    66ce:	fc 01       	movw	r30, r24
    66d0:	31 96       	adiw	r30, 0x01	; 1
    66d2:	0c 0f       	add	r16, r28
    66d4:	1d 1f       	adc	r17, r29
        {
            ++str;
            // We are pointing at the body of the quoted string now
            while(*str && *str != '"' && max > 0)
    66d6:	cf 01       	movw	r24, r30
    66d8:	21 91       	ld	r18, Z+
    66da:	22 23       	and	r18, r18
    66dc:	79 f0       	breq	.+30     	; 0x66fc <get_token+0x66>
    66de:	22 32       	cpi	r18, 0x22	; 34
    66e0:	59 f0       	breq	.+22     	; 0x66f8 <get_token+0x62>
    66e2:	c0 17       	cp	r28, r16
    66e4:	d1 07       	cpc	r29, r17
            {
                *token++ = *str++;
    66e6:	51 f0       	breq	.+20     	; 0x66fc <get_token+0x66>
    66e8:	29 93       	st	Y+, r18
            }
            break;
        }

        // If we have a comma, outside of a string, break
        if(*str == ',' )
    66ea:	f5 cf       	rjmp	.-22     	; 0x66d6 <get_token+0x40>
    66ec:	2c 32       	cpi	r18, 0x2C	; 44
            break;

        // copy token
        *token++ = *str++;
    66ee:	31 f0       	breq	.+12     	; 0x66fc <get_token+0x66>
        --max;
    66f0:	29 93       	st	Y+, r18
    66f2:	01 50       	subi	r16, 0x01	; 1
                --max;
            }
            if(*str == '"')
            {
                ++str;
                *token = 0;
    66f4:	11 09       	sbc	r17, r1
        *token++ = *str++;
        --max;
    }

    // Skip trailing spaces
    str = skipspaces(str);
    66f6:	e2 cf       	rjmp	.-60     	; 0x66bc <get_token+0x26>
    66f8:	cf 01       	movw	r24, r30
    66fa:	18 82       	st	Y, r1
    // If we had a trailing comma skip it
    if(*str == ',' )
    66fc:	8c de       	rcall	.-744    	; 0x6416 <skipspaces>
    66fe:	fc 01       	movw	r30, r24
    6700:	80 81       	ld	r24, Z
        ++str;
    6702:	8c 32       	cpi	r24, 0x2C	; 44

    *token = 0;
    6704:	09 f4       	brne	.+2      	; 0x6708 <get_token+0x72>
    return(str);
    6706:	31 96       	adiw	r30, 0x01	; 1
    6708:	18 82       	st	Y, r1
    670a:	cf 01       	movw	r24, r30
    670c:	02 c0       	rjmp	.+4      	; 0x6712 <get_token+0x7c>
}
    670e:	80 e0       	ldi	r24, 0x00	; 0
    6710:	90 e0       	ldi	r25, 0x00	; 0
    6712:	cd b7       	in	r28, 0x3d	; 61
    6714:	de b7       	in	r29, 0x3e	; 62
    6716:	e6 e0       	ldi	r30, 0x06	; 6
    6718:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

0000671c <token>:
///@return string lenth on match.
///@return 0 on no match.

MEMSPACE
int token(char *str, char *pat)
{
    671c:	ef 92       	push	r14
    671e:	ff 92       	push	r15
    6720:	0f 93       	push	r16
    6722:	1f 93       	push	r17
    6724:	cf 93       	push	r28
    6726:	df 93       	push	r29
    int patlen;
    int len;
    char *ptr;

    if(!str || *str == 0)
    6728:	00 97       	sbiw	r24, 0x00	; 0
    672a:	11 f1       	breq	.+68     	; 0x6770 <token+0x54>
    672c:	fc 01       	movw	r30, r24
    672e:	20 81       	ld	r18, Z
    6730:	22 23       	and	r18, r18
    6732:	f1 f0       	breq	.+60     	; 0x6770 <token+0x54>
    6734:	7b 01       	movw	r14, r22
        return(0);

    ptr = skipspaces(str);
    6736:	8c 01       	movw	r16, r24
    6738:	6e de       	rcall	.-804    	; 0x6416 <skipspaces>
    len = 0;
    while(*ptr > ' ' && *ptr <= 0x7e )
    673a:	9c 01       	movw	r18, r24
    673c:	fc 01       	movw	r30, r24
    673e:	ef 01       	movw	r28, r30
    6740:	c2 1b       	sub	r28, r18
    6742:	d3 0b       	sbc	r29, r19
    6744:	91 91       	ld	r25, Z+
    6746:	91 52       	subi	r25, 0x21	; 33
    6748:	9e 35       	cpi	r25, 0x5E	; 94
    {
        ++len;
        ++ptr;
    }

    if(!len)
    674a:	c8 f3       	brcs	.-14     	; 0x673e <token+0x22>
    674c:	20 97       	sbiw	r28, 0x00	; 0
        return(0);

    patlen = strlen(pat);
    674e:	91 f0       	breq	.+36     	; 0x6774 <token+0x58>
    6750:	f7 01       	movw	r30, r14
    6752:	01 90       	ld	r0, Z+
    6754:	00 20       	and	r0, r0
    6756:	e9 f7       	brne	.-6      	; 0x6752 <token+0x36>
    6758:	31 97       	sbiw	r30, 0x01	; 1
    675a:	ee 19       	sub	r30, r14

    if(len != patlen)
    675c:	ff 09       	sbc	r31, r15
    675e:	ec 17       	cp	r30, r28
    6760:	fd 07       	cpc	r31, r29
        return(0);

    if(strncmp(str,pat,patlen) == 0)
    6762:	31 f4       	brne	.+12     	; 0x6770 <token+0x54>
    6764:	ae 01       	movw	r20, r28
    6766:	b7 01       	movw	r22, r14
    6768:	c8 01       	movw	r24, r16
    676a:	6c de       	rcall	.-808    	; 0x6444 <strncmp>
    676c:	89 2b       	or	r24, r25
    int patlen;
    int len;
    char *ptr;

    if(!str || *str == 0)
        return(0);
    676e:	11 f0       	breq	.+4      	; 0x6774 <token+0x58>
    6770:	c0 e0       	ldi	r28, 0x00	; 0
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    6772:	d0 e0       	ldi	r29, 0x00	; 0
    6774:	ce 01       	movw	r24, r28
    6776:	cd b7       	in	r28, 0x3d	; 61
    6778:	de b7       	in	r29, 0x3e	; 62
    677a:	e6 e0       	ldi	r30, 0x06	; 6
    677c:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

00006780 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{ 
    6780:	a2 e0       	ldi	r26, 0x02	; 2
    6782:	b0 e0       	ldi	r27, 0x00	; 0
    6784:	e6 ec       	ldi	r30, 0xC6	; 198
    6786:	f3 e3       	ldi	r31, 0x33	; 51
    6788:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    678c:	00 97       	sbiw	r24, 0x00	; 0
    678e:	79 f1       	breq	.+94     	; 0x67ee <get_value+0x6e>
    6790:	fc 01       	movw	r30, r24
    6792:	20 81       	ld	r18, Z
    6794:	22 23       	and	r18, r18
        return(0);

    ptr = skipspaces(str);
    6796:	59 f1       	breq	.+86     	; 0x67ee <get_value+0x6e>
    6798:	3e de       	rcall	.-900    	; 0x6416 <skipspaces>
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    679a:	8c 01       	movw	r16, r24
    679c:	6e e2       	ldi	r22, 0x2E	; 46
    679e:	77 e0       	ldi	r23, 0x07	; 7
    67a0:	04 df       	rcall	.-504    	; 0x65aa <MATCHI_LEN>
    67a2:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    67a4:	29 f0       	breq	.+10     	; 0x67b0 <get_value+0x30>
    67a6:	08 0f       	add	r16, r24
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    67a8:	19 1f       	adc	r17, r25
    67aa:	40 e1       	ldi	r20, 0x10	; 16
    67ac:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    67ae:	18 c0       	rjmp	.+48     	; 0x67e0 <get_value+0x60>
    67b0:	61 e3       	ldi	r22, 0x31	; 49
    67b2:	77 e0       	ldi	r23, 0x07	; 7
    67b4:	c8 01       	movw	r24, r16
    67b6:	f9 de       	rcall	.-526    	; 0x65aa <MATCHI_LEN>
    67b8:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    67ba:	29 f0       	breq	.+10     	; 0x67c6 <get_value+0x46>
    67bc:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    67be:	19 1f       	adc	r17, r25
    67c0:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    67c2:	50 e0       	ldi	r21, 0x00	; 0
    67c4:	0d c0       	rjmp	.+26     	; 0x67e0 <get_value+0x60>
    67c6:	64 e3       	ldi	r22, 0x34	; 52
    67c8:	77 e0       	ldi	r23, 0x07	; 7
    67ca:	c8 01       	movw	r24, r16
    67cc:	ee de       	rcall	.-548    	; 0x65aa <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    67ce:	00 97       	sbiw	r24, 0x00	; 0
    67d0:	29 f0       	breq	.+10     	; 0x67dc <get_value+0x5c>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    67d2:	08 0f       	add	r16, r24
    67d4:	19 1f       	adc	r17, r25
    67d6:	42 e0       	ldi	r20, 0x02	; 2

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    67d8:	50 e0       	ldi	r21, 0x00	; 0
    67da:	02 c0       	rjmp	.+4      	; 0x67e0 <get_value+0x60>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    67dc:	4a e0       	ldi	r20, 0x0A	; 10
    67de:	50 e0       	ldi	r21, 0x00	; 0
    67e0:	be 01       	movw	r22, r28
    67e2:	6f 5f       	subi	r22, 0xFF	; 255
    67e4:	7f 4f       	sbci	r23, 0xFF	; 255
    67e6:	c8 01       	movw	r24, r16
    67e8:	0e 94 e4 46 	call	0x8dc8	; 0x8dc8 <strtol>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    67ec:	03 c0       	rjmp	.+6      	; 0x67f4 <get_value+0x74>
    67ee:	60 e0       	ldi	r22, 0x00	; 0
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    67f0:	70 e0       	ldi	r23, 0x00	; 0
    67f2:	cb 01       	movw	r24, r22
    67f4:	22 96       	adiw	r28, 0x02	; 2
    67f6:	e4 e0       	ldi	r30, 0x04	; 4
    67f8:	0c 94 58 e5 	jmp	0x1cab0	; 0x1cab0 <__epilogue_restores__+0x1c>

000067fc <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    67fc:	78 94       	sei
    67fe:	08 95       	ret

00006800 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6800:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    6802:	89 e0       	ldi	r24, 0x09	; 9
    6804:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6808:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    680c:	8f e1       	ldi	r24, 0x1F	; 31
    680e:	9e e4       	ldi	r25, 0x4E	; 78
    6810:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6814:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    6818:	ef e6       	ldi	r30, 0x6F	; 111
    681a:	f0 e0       	ldi	r31, 0x00	; 0
    681c:	80 81       	ld	r24, Z
    681e:	82 60       	ori	r24, 0x02	; 2
    6820:	80 83       	st	Z, r24
    sei();
    6822:	78 94       	sei
    6824:	08 95       	ret

00006826 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6826:	1f 92       	push	r1
    6828:	0f 92       	push	r0
    682a:	0f b6       	in	r0, 0x3f	; 63
    682c:	0f 92       	push	r0
    682e:	11 24       	eor	r1, r1
    6830:	0b b6       	in	r0, 0x3b	; 59
    6832:	0f 92       	push	r0
    6834:	2f 93       	push	r18
    6836:	3f 93       	push	r19
    6838:	4f 93       	push	r20
    683a:	5f 93       	push	r21
    683c:	6f 93       	push	r22
    683e:	7f 93       	push	r23
    6840:	8f 93       	push	r24
    6842:	9f 93       	push	r25
    6844:	af 93       	push	r26
    6846:	bf 93       	push	r27
    6848:	ef 93       	push	r30
    execute_timers();
    684a:	ff 93       	push	r31
}
    684c:	26 d2       	rcall	.+1100   	; 0x6c9a <execute_timers>
    684e:	ff 91       	pop	r31
    6850:	ef 91       	pop	r30
    6852:	bf 91       	pop	r27
    6854:	af 91       	pop	r26
    6856:	9f 91       	pop	r25
    6858:	8f 91       	pop	r24
    685a:	7f 91       	pop	r23
    685c:	6f 91       	pop	r22
    685e:	5f 91       	pop	r21
    6860:	4f 91       	pop	r20
    6862:	3f 91       	pop	r19
    6864:	2f 91       	pop	r18
    6866:	0f 90       	pop	r0
    6868:	0b be       	out	0x3b, r0	; 59
    686a:	0f 90       	pop	r0
    686c:	0f be       	out	0x3f, r0	; 63
    686e:	0f 90       	pop	r0
    6870:	1f 90       	pop	r1
    6872:	18 95       	reti

00006874 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    6874:	0f 93       	push	r16
    6876:	1f 93       	push	r17
    6878:	cf 93       	push	r28
    687a:	df 93       	push	r29
    687c:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    687e:	f8 94       	cli

    count1 = TCNT1;
    6880:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6884:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6888:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <__clock>
    688c:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <__clock+0x1>
    6890:	a0 91 44 19 	lds	r26, 0x1944	; 0x801944 <__clock+0x2>
    6894:	b0 91 45 19 	lds	r27, 0x1945	; 0x801945 <__clock+0x3>
    6898:	80 83       	st	Z, r24
    689a:	91 83       	std	Z+1, r25	; 0x01
    689c:	a2 83       	std	Z+2, r26	; 0x02
    689e:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    68a0:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <__clock+0x4>
    68a4:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <__clock+0x5>
    68a8:	a0 91 48 19 	lds	r26, 0x1948	; 0x801948 <__clock+0x6>
    68ac:	b0 91 49 19 	lds	r27, 0x1949	; 0x801949 <__clock+0x7>
    68b0:	84 83       	std	Z+4, r24	; 0x04
    68b2:	95 83       	std	Z+5, r25	; 0x05
    68b4:	a6 83       	std	Z+6, r26	; 0x06
    68b6:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    68b8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    68bc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    68c0:	b1 9b       	sbis	0x16, 1	; 22
    68c2:	03 c0       	rjmp	.+6      	; 0x68ca <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    68c4:	c0 e0       	ldi	r28, 0x00	; 0
    68c6:	d0 e0       	ldi	r29, 0x00	; 0
    68c8:	3f c0       	rjmp	.+126    	; 0x6948 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    68ca:	82 17       	cp	r24, r18
    68cc:	93 07       	cpc	r25, r19
    68ce:	d0 f1       	brcs	.+116    	; 0x6944 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    68d0:	c0 e0       	ldi	r28, 0x00	; 0
    68d2:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    68d4:	40 e0       	ldi	r20, 0x00	; 0
    68d6:	50 e0       	ldi	r21, 0x00	; 0
    68d8:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    68da:	9a 01       	movw	r18, r20
    68dc:	ab 01       	movw	r20, r22
    68de:	28 0f       	add	r18, r24
    68e0:	39 1f       	adc	r19, r25
    68e2:	41 1d       	adc	r20, r1
    68e4:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    68e6:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    68e8:	a2 e3       	ldi	r26, 0x32	; 50
    68ea:	b0 e0       	ldi	r27, 0x00	; 0
    68ec:	0e 94 0e e5 	call	0x1ca1c	; 0x1ca1c <__muluhisi3>
    68f0:	04 81       	ldd	r16, Z+4	; 0x04
    68f2:	15 81       	ldd	r17, Z+5	; 0x05
    68f4:	26 81       	ldd	r18, Z+6	; 0x06
    68f6:	37 81       	ldd	r19, Z+7	; 0x07
    68f8:	dc 01       	movw	r26, r24
    68fa:	cb 01       	movw	r24, r22
    68fc:	80 0f       	add	r24, r16
    68fe:	91 1f       	adc	r25, r17
    6900:	a2 1f       	adc	r26, r18
    6902:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6904:	81 15       	cp	r24, r1
    6906:	2a ec       	ldi	r18, 0xCA	; 202
    6908:	92 07       	cpc	r25, r18
    690a:	2a e9       	ldi	r18, 0x9A	; 154
    690c:	a2 07       	cpc	r26, r18
    690e:	2b e3       	ldi	r18, 0x3B	; 59
    6910:	b2 07       	cpc	r27, r18
    6912:	2c f4       	brge	.+10     	; 0x691e <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6914:	84 83       	std	Z+4, r24	; 0x04
    6916:	95 83       	std	Z+5, r25	; 0x05
    6918:	a6 83       	std	Z+6, r26	; 0x06
    691a:	b7 83       	std	Z+7, r27	; 0x07
    691c:	1a c0       	rjmp	.+52     	; 0x6952 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    691e:	9a 5c       	subi	r25, 0xCA	; 202
    6920:	aa 49       	sbci	r26, 0x9A	; 154
    6922:	bb 43       	sbci	r27, 0x3B	; 59
    6924:	84 83       	std	Z+4, r24	; 0x04
    6926:	95 83       	std	Z+5, r25	; 0x05
    6928:	a6 83       	std	Z+6, r26	; 0x06
    692a:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    692c:	80 81       	ld	r24, Z
    692e:	91 81       	ldd	r25, Z+1	; 0x01
    6930:	a2 81       	ldd	r26, Z+2	; 0x02
    6932:	b3 81       	ldd	r27, Z+3	; 0x03
    6934:	01 96       	adiw	r24, 0x01	; 1
    6936:	a1 1d       	adc	r26, r1
    6938:	b1 1d       	adc	r27, r1
    693a:	80 83       	st	Z, r24
    693c:	91 83       	std	Z+1, r25	; 0x01
    693e:	a2 83       	std	Z+2, r26	; 0x02
    6940:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6942:	07 c0       	rjmp	.+14     	; 0x6952 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    6944:	cf ef       	ldi	r28, 0xFF	; 255
    6946:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6948:	40 e2       	ldi	r20, 0x20	; 32
    694a:	5e e4       	ldi	r21, 0x4E	; 78
    694c:	60 e0       	ldi	r22, 0x00	; 0
    694e:	70 e0       	ldi	r23, 0x00	; 0
    6950:	c4 cf       	rjmp	.-120    	; 0x68da <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6952:	ce 01       	movw	r24, r28
    6954:	df 91       	pop	r29
    6956:	cf 91       	pop	r28
    6958:	1f 91       	pop	r17
    695a:	0f 91       	pop	r16
    695c:	08 95       	ret

0000695e <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    695e:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <__clock+0x4>
    6962:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <__clock+0x5>
    6966:	a0 91 48 19 	lds	r26, 0x1948	; 0x801948 <__clock+0x6>
    696a:	b0 91 49 19 	lds	r27, 0x1949	; 0x801949 <__clock+0x7>
    696e:	80 5c       	subi	r24, 0xC0	; 192
    6970:	9d 4b       	sbci	r25, 0xBD	; 189
    6972:	a0 4f       	sbci	r26, 0xF0	; 240
    6974:	bf 4f       	sbci	r27, 0xFF	; 255
    6976:	80 93 46 19 	sts	0x1946, r24	; 0x801946 <__clock+0x4>
    697a:	90 93 47 19 	sts	0x1947, r25	; 0x801947 <__clock+0x5>
    697e:	a0 93 48 19 	sts	0x1948, r26	; 0x801948 <__clock+0x6>
    6982:	b0 93 49 19 	sts	0x1949, r27	; 0x801949 <__clock+0x7>
    6986:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <__clock+0x4>
    698a:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <__clock+0x5>
    698e:	a0 91 48 19 	lds	r26, 0x1948	; 0x801948 <__clock+0x6>
    6992:	b0 91 49 19 	lds	r27, 0x1949	; 0x801949 <__clock+0x7>
    6996:	81 15       	cp	r24, r1
    6998:	9a 4c       	sbci	r25, 0xCA	; 202
    699a:	aa 49       	sbci	r26, 0x9A	; 154
    699c:	bb 43       	sbci	r27, 0x3B	; 59
    699e:	dc f0       	brlt	.+54     	; 0x69d6 <clock_task+0x78>
    69a0:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <__clock>
    69a4:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <__clock+0x1>
    69a8:	a0 91 44 19 	lds	r26, 0x1944	; 0x801944 <__clock+0x2>
    69ac:	b0 91 45 19 	lds	r27, 0x1945	; 0x801945 <__clock+0x3>
    69b0:	01 96       	adiw	r24, 0x01	; 1
    69b2:	a1 1d       	adc	r26, r1
    69b4:	b1 1d       	adc	r27, r1
    69b6:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <__clock>
    69ba:	90 93 43 19 	sts	0x1943, r25	; 0x801943 <__clock+0x1>
    69be:	a0 93 44 19 	sts	0x1944, r26	; 0x801944 <__clock+0x2>
    69c2:	b0 93 45 19 	sts	0x1945, r27	; 0x801945 <__clock+0x3>
    69c6:	10 92 46 19 	sts	0x1946, r1	; 0x801946 <__clock+0x4>
    69ca:	10 92 47 19 	sts	0x1947, r1	; 0x801947 <__clock+0x5>
    69ce:	10 92 48 19 	sts	0x1948, r1	; 0x801948 <__clock+0x6>
    69d2:	10 92 49 19 	sts	0x1949, r1	; 0x801949 <__clock+0x7>
    69d6:	08 95       	ret

000069d8 <clock_settime.part.2>:
    69d8:	fc 01       	movw	r30, r24
    69da:	84 81       	ldd	r24, Z+4	; 0x04
    69dc:	95 81       	ldd	r25, Z+5	; 0x05
    69de:	a6 81       	ldd	r26, Z+6	; 0x06
    69e0:	b7 81       	ldd	r27, Z+7	; 0x07
    69e2:	80 93 46 19 	sts	0x1946, r24	; 0x801946 <__clock+0x4>
    69e6:	90 93 47 19 	sts	0x1947, r25	; 0x801947 <__clock+0x5>
    69ea:	a0 93 48 19 	sts	0x1948, r26	; 0x801948 <__clock+0x6>
    69ee:	b0 93 49 19 	sts	0x1949, r27	; 0x801949 <__clock+0x7>
    69f2:	80 81       	ld	r24, Z
    69f4:	91 81       	ldd	r25, Z+1	; 0x01
    69f6:	a2 81       	ldd	r26, Z+2	; 0x02
    69f8:	b3 81       	ldd	r27, Z+3	; 0x03
    69fa:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <__clock>
    69fe:	90 93 43 19 	sts	0x1943, r25	; 0x801943 <__clock+0x1>
    6a02:	a0 93 44 19 	sts	0x1944, r26	; 0x801944 <__clock+0x2>
    6a06:	b0 93 45 19 	sts	0x1945, r27	; 0x801945 <__clock+0x3>
    6a0a:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <__clock+0x4>
    6a0e:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <__clock+0x5>
    6a12:	a0 91 48 19 	lds	r26, 0x1948	; 0x801948 <__clock+0x6>
    6a16:	b0 91 49 19 	lds	r27, 0x1949	; 0x801949 <__clock+0x7>
    6a1a:	44 81       	ldd	r20, Z+4	; 0x04
    6a1c:	55 81       	ldd	r21, Z+5	; 0x05
    6a1e:	66 81       	ldd	r22, Z+6	; 0x06
    6a20:	77 81       	ldd	r23, Z+7	; 0x07
    6a22:	48 17       	cp	r20, r24
    6a24:	59 07       	cpc	r21, r25
    6a26:	6a 07       	cpc	r22, r26
    6a28:	7b 07       	cpc	r23, r27
    6a2a:	b9 f6       	brne	.-82     	; 0x69da <clock_settime.part.2+0x2>
    6a2c:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <__clock>
    6a30:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <__clock+0x1>
    6a34:	a0 91 44 19 	lds	r26, 0x1944	; 0x801944 <__clock+0x2>
    6a38:	b0 91 45 19 	lds	r27, 0x1945	; 0x801945 <__clock+0x3>
    6a3c:	40 81       	ld	r20, Z
    6a3e:	51 81       	ldd	r21, Z+1	; 0x01
    6a40:	62 81       	ldd	r22, Z+2	; 0x02
    6a42:	73 81       	ldd	r23, Z+3	; 0x03
    6a44:	48 17       	cp	r20, r24
    6a46:	59 07       	cpc	r21, r25
    6a48:	6a 07       	cpc	r22, r26
    6a4a:	7b 07       	cpc	r23, r27
    6a4c:	31 f6       	brne	.-116    	; 0x69da <clock_settime.part.2+0x2>
    6a4e:	80 e0       	ldi	r24, 0x00	; 0
    6a50:	90 e0       	ldi	r25, 0x00	; 0
    6a52:	08 95       	ret

00006a54 <set_timers>:
    6a54:	00 97       	sbiw	r24, 0x00	; 0
    6a56:	79 f1       	breq	.+94     	; 0x6ab6 <set_timers+0x62>
    6a58:	ea e4       	ldi	r30, 0x4A	; 74
    6a5a:	f9 e1       	ldi	r31, 0x19	; 25
    6a5c:	4f ef       	ldi	r20, 0xFF	; 255
    6a5e:	5f ef       	ldi	r21, 0xFF	; 255
    6a60:	20 e0       	ldi	r18, 0x00	; 0
    6a62:	30 e0       	ldi	r19, 0x00	; 0
    6a64:	60 81       	ld	r22, Z
    6a66:	71 81       	ldd	r23, Z+1	; 0x01
    6a68:	86 17       	cp	r24, r22
    6a6a:	97 07       	cpc	r25, r23
    6a6c:	79 f0       	breq	.+30     	; 0x6a8c <set_timers+0x38>
    6a6e:	67 2b       	or	r22, r23
    6a70:	71 f4       	brne	.+28     	; 0x6a8e <set_timers+0x3a>
    6a72:	f9 01       	movw	r30, r18
    6a74:	ee 0f       	add	r30, r30
    6a76:	ff 1f       	adc	r31, r31
    6a78:	e2 0f       	add	r30, r18
    6a7a:	f3 1f       	adc	r31, r19
    6a7c:	e6 5b       	subi	r30, 0xB6	; 182
    6a7e:	f6 4e       	sbci	r31, 0xE6	; 230
    6a80:	91 83       	std	Z+1, r25	; 0x01
    6a82:	80 83       	st	Z, r24
    6a84:	81 e0       	ldi	r24, 0x01	; 1
    6a86:	82 83       	std	Z+2, r24	; 0x02
    6a88:	c9 01       	movw	r24, r18
    6a8a:	08 95       	ret
    6a8c:	a9 01       	movw	r20, r18
    6a8e:	2f 5f       	subi	r18, 0xFF	; 255
    6a90:	3f 4f       	sbci	r19, 0xFF	; 255
    6a92:	33 96       	adiw	r30, 0x03	; 3
    6a94:	28 30       	cpi	r18, 0x08	; 8
    6a96:	31 05       	cpc	r19, r1
    6a98:	29 f7       	brne	.-54     	; 0x6a64 <set_timers+0x10>
    6a9a:	4f 3f       	cpi	r20, 0xFF	; 255
    6a9c:	8f ef       	ldi	r24, 0xFF	; 255
    6a9e:	58 07       	cpc	r21, r24
    6aa0:	69 f4       	brne	.+26     	; 0x6abc <set_timers+0x68>
    6aa2:	82 ec       	ldi	r24, 0xC2	; 194
    6aa4:	95 e0       	ldi	r25, 0x05	; 5
    6aa6:	1f 92       	push	r1
    6aa8:	9f 93       	push	r25
    6aaa:	8f 93       	push	r24
    6aac:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    6ab0:	0f 90       	pop	r0
    6ab2:	0f 90       	pop	r0
    6ab4:	0f 90       	pop	r0
    6ab6:	8f ef       	ldi	r24, 0xFF	; 255
    6ab8:	9f ef       	ldi	r25, 0xFF	; 255
    6aba:	08 95       	ret
    6abc:	ca 01       	movw	r24, r20
    6abe:	08 95       	ret

00006ac0 <delete_all_timers>:
    6ac0:	ea e4       	ldi	r30, 0x4A	; 74
    6ac2:	f9 e1       	ldi	r31, 0x19	; 25
    6ac4:	12 82       	std	Z+2, r1	; 0x02
    6ac6:	11 82       	std	Z+1, r1	; 0x01
    6ac8:	10 82       	st	Z, r1
    6aca:	33 96       	adiw	r30, 0x03	; 3
    6acc:	89 e1       	ldi	r24, 0x19	; 25
    6ace:	e2 36       	cpi	r30, 0x62	; 98
    6ad0:	f8 07       	cpc	r31, r24
    6ad2:	c1 f7       	brne	.-16     	; 0x6ac4 <delete_all_timers+0x4>
    6ad4:	08 95       	ret

00006ad6 <subtract_timespec>:
    6ad6:	0f 93       	push	r16
    6ad8:	1f 93       	push	r17
    6ada:	cf 93       	push	r28
    6adc:	df 93       	push	r29
    6ade:	fc 01       	movw	r30, r24
    6ae0:	84 81       	ldd	r24, Z+4	; 0x04
    6ae2:	95 81       	ldd	r25, Z+5	; 0x05
    6ae4:	a6 81       	ldd	r26, Z+6	; 0x06
    6ae6:	b7 81       	ldd	r27, Z+7	; 0x07
    6ae8:	eb 01       	movw	r28, r22
    6aea:	0c 81       	ldd	r16, Y+4	; 0x04
    6aec:	1d 81       	ldd	r17, Y+5	; 0x05
    6aee:	2e 81       	ldd	r18, Y+6	; 0x06
    6af0:	3f 81       	ldd	r19, Y+7	; 0x07
    6af2:	80 1b       	sub	r24, r16
    6af4:	91 0b       	sbc	r25, r17
    6af6:	a2 0b       	sbc	r26, r18
    6af8:	b3 0b       	sbc	r27, r19
    6afa:	b7 fd       	sbrc	r27, 7
    6afc:	05 c0       	rjmp	.+10     	; 0x6b08 <subtract_timespec+0x32>
    6afe:	84 83       	std	Z+4, r24	; 0x04
    6b00:	95 83       	std	Z+5, r25	; 0x05
    6b02:	a6 83       	std	Z+6, r26	; 0x06
    6b04:	b7 83       	std	Z+7, r27	; 0x07
    6b06:	12 c0       	rjmp	.+36     	; 0x6b2c <subtract_timespec+0x56>
    6b08:	96 53       	subi	r25, 0x36	; 54
    6b0a:	a5 46       	sbci	r26, 0x65	; 101
    6b0c:	b4 4c       	sbci	r27, 0xC4	; 196
    6b0e:	84 83       	std	Z+4, r24	; 0x04
    6b10:	95 83       	std	Z+5, r25	; 0x05
    6b12:	a6 83       	std	Z+6, r26	; 0x06
    6b14:	b7 83       	std	Z+7, r27	; 0x07
    6b16:	80 81       	ld	r24, Z
    6b18:	91 81       	ldd	r25, Z+1	; 0x01
    6b1a:	a2 81       	ldd	r26, Z+2	; 0x02
    6b1c:	b3 81       	ldd	r27, Z+3	; 0x03
    6b1e:	01 97       	sbiw	r24, 0x01	; 1
    6b20:	a1 09       	sbc	r26, r1
    6b22:	b1 09       	sbc	r27, r1
    6b24:	80 83       	st	Z, r24
    6b26:	91 83       	std	Z+1, r25	; 0x01
    6b28:	a2 83       	std	Z+2, r26	; 0x02
    6b2a:	b3 83       	std	Z+3, r27	; 0x03
    6b2c:	80 81       	ld	r24, Z
    6b2e:	91 81       	ldd	r25, Z+1	; 0x01
    6b30:	a2 81       	ldd	r26, Z+2	; 0x02
    6b32:	b3 81       	ldd	r27, Z+3	; 0x03
    6b34:	eb 01       	movw	r28, r22
    6b36:	48 81       	ld	r20, Y
    6b38:	59 81       	ldd	r21, Y+1	; 0x01
    6b3a:	6a 81       	ldd	r22, Y+2	; 0x02
    6b3c:	7b 81       	ldd	r23, Y+3	; 0x03
    6b3e:	84 1b       	sub	r24, r20
    6b40:	95 0b       	sbc	r25, r21
    6b42:	a6 0b       	sbc	r26, r22
    6b44:	b7 0b       	sbc	r27, r23
    6b46:	80 83       	st	Z, r24
    6b48:	91 83       	std	Z+1, r25	; 0x01
    6b4a:	a2 83       	std	Z+2, r26	; 0x02
    6b4c:	b3 83       	std	Z+3, r27	; 0x03
    6b4e:	df 91       	pop	r29
    6b50:	cf 91       	pop	r28
    6b52:	1f 91       	pop	r17
    6b54:	0f 91       	pop	r16
    6b56:	08 95       	ret

00006b58 <ts_to_str>:
    6b58:	fc 01       	movw	r30, r24
    6b5a:	87 81       	ldd	r24, Z+7	; 0x07
    6b5c:	8f 93       	push	r24
    6b5e:	86 81       	ldd	r24, Z+6	; 0x06
    6b60:	8f 93       	push	r24
    6b62:	85 81       	ldd	r24, Z+5	; 0x05
    6b64:	8f 93       	push	r24
    6b66:	84 81       	ldd	r24, Z+4	; 0x04
    6b68:	8f 93       	push	r24
    6b6a:	83 81       	ldd	r24, Z+3	; 0x03
    6b6c:	8f 93       	push	r24
    6b6e:	82 81       	ldd	r24, Z+2	; 0x02
    6b70:	8f 93       	push	r24
    6b72:	81 81       	ldd	r24, Z+1	; 0x01
    6b74:	8f 93       	push	r24
    6b76:	80 81       	ld	r24, Z
    6b78:	8f 93       	push	r24
    6b7a:	88 eb       	ldi	r24, 0xB8	; 184
    6b7c:	95 e0       	ldi	r25, 0x05	; 5
    6b7e:	1f 92       	push	r1
    6b80:	9f 93       	push	r25
    6b82:	8f 93       	push	r24
    6b84:	1f 92       	push	r1
    6b86:	8f e1       	ldi	r24, 0x1F	; 31
    6b88:	8f 93       	push	r24
    6b8a:	84 e5       	ldi	r24, 0x54	; 84
    6b8c:	97 e1       	ldi	r25, 0x17	; 23
    6b8e:	9f 93       	push	r25
    6b90:	8f 93       	push	r24
    6b92:	0e 94 81 46 	call	0x8d02	; 0x8d02 <snprintf_P>
    6b96:	8d b7       	in	r24, 0x3d	; 61
    6b98:	9e b7       	in	r25, 0x3e	; 62
    6b9a:	0f 96       	adiw	r24, 0x0f	; 15
    6b9c:	0f b6       	in	r0, 0x3f	; 63
    6b9e:	f8 94       	cli
    6ba0:	9e bf       	out	0x3e, r25	; 62
    6ba2:	0f be       	out	0x3f, r0	; 63
    6ba4:	8d bf       	out	0x3d, r24	; 61
    6ba6:	84 e5       	ldi	r24, 0x54	; 84
    6ba8:	97 e1       	ldi	r25, 0x17	; 23
    6baa:	08 95       	ret

00006bac <clock_elapsed_begin>:
    6bac:	6c e4       	ldi	r22, 0x4C	; 76
    6bae:	77 e1       	ldi	r23, 0x17	; 23
    6bb0:	80 e0       	ldi	r24, 0x00	; 0
    6bb2:	90 e0       	ldi	r25, 0x00	; 0
    6bb4:	5f ce       	rjmp	.-834    	; 0x6874 <clock_gettime>
    6bb6:	08 95       	ret

00006bb8 <clock_elapsed_end>:
    6bb8:	a8 e0       	ldi	r26, 0x08	; 8
    6bba:	b0 e0       	ldi	r27, 0x00	; 0
    6bbc:	e2 ee       	ldi	r30, 0xE2	; 226
    6bbe:	f5 e3       	ldi	r31, 0x35	; 53
    6bc0:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__prologue_saves__+0x1c>
    6bc4:	8c 01       	movw	r16, r24
    6bc6:	be 01       	movw	r22, r28
    6bc8:	6f 5f       	subi	r22, 0xFF	; 255
    6bca:	7f 4f       	sbci	r23, 0xFF	; 255
    6bcc:	80 e0       	ldi	r24, 0x00	; 0
    6bce:	90 e0       	ldi	r25, 0x00	; 0
    6bd0:	51 de       	rcall	.-862    	; 0x6874 <clock_gettime>
    6bd2:	6c e4       	ldi	r22, 0x4C	; 76
    6bd4:	77 e1       	ldi	r23, 0x17	; 23
    6bd6:	ce 01       	movw	r24, r28
    6bd8:	01 96       	adiw	r24, 0x01	; 1
    6bda:	7d df       	rcall	.-262    	; 0x6ad6 <subtract_timespec>
    6bdc:	01 15       	cp	r16, r1
    6bde:	11 05       	cpc	r17, r1
    6be0:	c1 f0       	breq	.+48     	; 0x6c12 <clock_elapsed_end+0x5a>
    6be2:	f8 01       	movw	r30, r16
    6be4:	80 81       	ld	r24, Z
    6be6:	88 23       	and	r24, r24
    6be8:	a1 f0       	breq	.+40     	; 0x6c12 <clock_elapsed_end+0x5a>
    6bea:	ce 01       	movw	r24, r28
    6bec:	01 96       	adiw	r24, 0x01	; 1
    6bee:	b4 df       	rcall	.-152    	; 0x6b58 <ts_to_str>
    6bf0:	9f 93       	push	r25
    6bf2:	8f 93       	push	r24
    6bf4:	1f 93       	push	r17
    6bf6:	0f 93       	push	r16
    6bf8:	8b e9       	ldi	r24, 0x9B	; 155
    6bfa:	95 e0       	ldi	r25, 0x05	; 5
    6bfc:	1f 92       	push	r1
    6bfe:	9f 93       	push	r25
    6c00:	8f 93       	push	r24
    6c02:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    6c06:	0f b6       	in	r0, 0x3f	; 63
    6c08:	f8 94       	cli
    6c0a:	de bf       	out	0x3e, r29	; 62
    6c0c:	0f be       	out	0x3f, r0	; 63
    6c0e:	cd bf       	out	0x3d, r28	; 61
    6c10:	11 c0       	rjmp	.+34     	; 0x6c34 <clock_elapsed_end+0x7c>
    6c12:	ce 01       	movw	r24, r28
    6c14:	01 96       	adiw	r24, 0x01	; 1
    6c16:	a0 df       	rcall	.-192    	; 0x6b58 <ts_to_str>
    6c18:	9f 93       	push	r25
    6c1a:	8f 93       	push	r24
    6c1c:	80 e9       	ldi	r24, 0x90	; 144
    6c1e:	95 e0       	ldi	r25, 0x05	; 5
    6c20:	1f 92       	push	r1
    6c22:	9f 93       	push	r25
    6c24:	8f 93       	push	r24
    6c26:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    6c2a:	0f 90       	pop	r0
    6c2c:	0f 90       	pop	r0
    6c2e:	0f 90       	pop	r0
    6c30:	0f 90       	pop	r0
    6c32:	0f 90       	pop	r0
    6c34:	28 96       	adiw	r28, 0x08	; 8
    6c36:	e4 e0       	ldi	r30, 0x04	; 4
    6c38:	0c 94 58 e5 	jmp	0x1cab0	; 0x1cab0 <__epilogue_restores__+0x1c>

00006c3c <clock_clear>:
    6c3c:	a8 e0       	ldi	r26, 0x08	; 8
    6c3e:	b0 e0       	ldi	r27, 0x00	; 0
    6c40:	e4 e2       	ldi	r30, 0x24	; 36
    6c42:	f6 e3       	ldi	r31, 0x36	; 54
    6c44:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    6c48:	1d 82       	std	Y+5, r1	; 0x05
    6c4a:	1e 82       	std	Y+6, r1	; 0x06
    6c4c:	1f 82       	std	Y+7, r1	; 0x07
    6c4e:	18 86       	std	Y+8, r1	; 0x08
    6c50:	19 82       	std	Y+1, r1	; 0x01
    6c52:	1a 82       	std	Y+2, r1	; 0x02
    6c54:	1b 82       	std	Y+3, r1	; 0x03
    6c56:	1c 82       	std	Y+4, r1	; 0x04
    6c58:	ce 01       	movw	r24, r28
    6c5a:	01 96       	adiw	r24, 0x01	; 1
    6c5c:	bd de       	rcall	.-646    	; 0x69d8 <clock_settime.part.2>
    6c5e:	e2 e6       	ldi	r30, 0x62	; 98
    6c60:	f9 e1       	ldi	r31, 0x19	; 25
    6c62:	11 82       	std	Z+1, r1	; 0x01
    6c64:	10 82       	st	Z, r1
    6c66:	13 82       	std	Z+3, r1	; 0x03
    6c68:	12 82       	std	Z+2, r1	; 0x02
    6c6a:	28 96       	adiw	r28, 0x08	; 8
    6c6c:	e2 e0       	ldi	r30, 0x02	; 2
    6c6e:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

00006c72 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6c72:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <timers_configured>
    6c76:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <timers_configured+0x1>
    6c7a:	89 2b       	or	r24, r25
    6c7c:	69 f0       	breq	.+26     	; 0x6c98 <enable_timers+0x26>
    6c7e:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <timers_enabled>
    6c82:	90 91 77 17 	lds	r25, 0x1777	; 0x801777 <timers_enabled+0x1>
    6c86:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6c88:	39 f4       	brne	.+14     	; 0x6c98 <enable_timers+0x26>
        timers_enabled = 1;
    6c8a:	b8 dd       	rcall	.-1168   	; 0x67fc <enable_system_task>
    6c8c:	81 e0       	ldi	r24, 0x01	; 1
    6c8e:	90 e0       	ldi	r25, 0x00	; 0
    6c90:	90 93 77 17 	sts	0x1777, r25	; 0x801777 <timers_enabled+0x1>
    6c94:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <timers_enabled>
    6c98:	08 95       	ret

00006c9a <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6c9a:	cf 93       	push	r28
    6c9c:	df 93       	push	r29
    6c9e:	ca e4       	ldi	r28, 0x4A	; 74
    6ca0:	d9 e1       	ldi	r29, 0x19	; 25
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ca4:	88 23       	and	r24, r24
    6ca6:	29 f0       	breq	.+10     	; 0x6cb2 <execute_timers+0x18>
    6ca8:	e8 81       	ld	r30, Y
    6caa:	f9 81       	ldd	r31, Y+1	; 0x01
    6cac:	30 97       	sbiw	r30, 0x00	; 0
    6cae:	09 f0       	breq	.+2      	; 0x6cb2 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6cb0:	09 95       	icall
    6cb2:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6cb4:	89 e1       	ldi	r24, 0x19	; 25
    6cb6:	c2 36       	cpi	r28, 0x62	; 98
    6cb8:	d8 07       	cpc	r29, r24
    6cba:	99 f7       	brne	.-26     	; 0x6ca2 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6cbc:	df 91       	pop	r29
    6cbe:	cf 91       	pop	r28
    6cc0:	08 95       	ret

00006cc2 <init_timers>:
//
/// @return  void
MEMSPACE
void init_timers()
{
    printf("Timers init called\n");
    6cc2:	8c e7       	ldi	r24, 0x7C	; 124
    6cc4:	95 e0       	ldi	r25, 0x05	; 5
    6cc6:	1f 92       	push	r1
    6cc8:	9f 93       	push	r25
    6cca:	8f 93       	push	r24
    6ccc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>

    if(!timers_configured)
    6cd0:	0f 90       	pop	r0
    6cd2:	0f 90       	pop	r0
    6cd4:	0f 90       	pop	r0
    6cd6:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <timers_configured>
    6cda:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <timers_configured+0x1>
    6cde:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6ce0:	a9 f4       	brne	.+42     	; 0x6d0c <init_timers+0x4a>
        timers_configured = 1;
    6ce2:	8e dd       	rcall	.-1252   	; 0x6800 <install_timers_isr>
    6ce4:	81 e0       	ldi	r24, 0x01	; 1
    6ce6:	90 e0       	ldi	r25, 0x00	; 0
    6ce8:	90 93 75 17 	sts	0x1775, r25	; 0x801775 <timers_configured+0x1>
    6cec:	80 93 74 17 	sts	0x1774, r24	; 0x801774 <timers_configured>
        timers_enabled = 0;
    6cf0:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <timers_enabled+0x1>
    6cf4:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <timers_enabled>
        printf("Timers configured\n");
    6cf8:	89 e6       	ldi	r24, 0x69	; 105
    6cfa:	95 e0       	ldi	r25, 0x05	; 5
    6cfc:	1f 92       	push	r1
    6cfe:	9f 93       	push	r25
    6d00:	8f 93       	push	r24
    6d02:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    }

    delete_all_timers();
    6d06:	0f 90       	pop	r0

    clock_clear();
    6d08:	0f 90       	pop	r0
    6d0a:	0f 90       	pop	r0
    printf("Clock Init\n");
    6d0c:	d9 de       	rcall	.-590    	; 0x6ac0 <delete_all_timers>
    6d0e:	96 df       	rcall	.-212    	; 0x6c3c <clock_clear>
    6d10:	8d e5       	ldi	r24, 0x5D	; 93
    6d12:	95 e0       	ldi	r25, 0x05	; 5
    6d14:	1f 92       	push	r1
    6d16:	9f 93       	push	r25
    6d18:	8f 93       	push	r24

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6d1a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    6d1e:	61 e0       	ldi	r22, 0x01	; 1
    6d20:	70 e0       	ldi	r23, 0x00	; 0
    6d22:	8f ea       	ldi	r24, 0xAF	; 175
    6d24:	94 e3       	ldi	r25, 0x34	; 52
    6d26:	96 de       	rcall	.-724    	; 0x6a54 <set_timers>
    6d28:	0f 90       	pop	r0
    6d2a:	0f 90       	pop	r0
    6d2c:	0f 90       	pop	r0
        printf("Clock task init failed\n");
    6d2e:	01 96       	adiw	r24, 0x01	; 1
    6d30:	51 f4       	brne	.+20     	; 0x6d46 <init_timers+0x84>
    6d32:	85 e4       	ldi	r24, 0x45	; 69
    6d34:	95 e0       	ldi	r25, 0x05	; 5
    6d36:	1f 92       	push	r1
    6d38:	9f 93       	push	r25
    6d3a:	8f 93       	push	r24
    6d3c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    6d40:	0f 90       	pop	r0
    printf("Clock Installed\n");
    6d42:	0f 90       	pop	r0
    6d44:	0f 90       	pop	r0
    6d46:	84 e3       	ldi	r24, 0x34	; 52
    6d48:	95 e0       	ldi	r25, 0x05	; 5
    6d4a:	1f 92       	push	r1
    6d4c:	9f 93       	push	r25

    enable_timers();
    6d4e:	8f 93       	push	r24
    6d50:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>

    printf("Timers enabled\n");
    6d54:	8e df       	rcall	.-228    	; 0x6c72 <enable_timers>
    6d56:	84 e2       	ldi	r24, 0x24	; 36
    6d58:	95 e0       	ldi	r25, 0x05	; 5
    6d5a:	1f 92       	push	r1
    6d5c:	9f 93       	push	r25
    6d5e:	8f 93       	push	r24
}
    6d60:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    6d64:	0f 90       	pop	r0
    6d66:	0f 90       	pop	r0
    6d68:	0f 90       	pop	r0
    6d6a:	0f 90       	pop	r0
    6d6c:	0f 90       	pop	r0
    6d6e:	0f 90       	pop	r0
    6d70:	08 95       	ret

00006d72 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id, struct timespec *res)
{
    res->tv_sec = 0;
    6d72:	fb 01       	movw	r30, r22
    6d74:	10 82       	st	Z, r1
    6d76:	11 82       	std	Z+1, r1	; 0x01
    6d78:	12 82       	std	Z+2, r1	; 0x02
    6d7a:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6d7c:	80 e4       	ldi	r24, 0x40	; 64
    6d7e:	92 e4       	ldi	r25, 0x42	; 66
    6d80:	af e0       	ldi	r26, 0x0F	; 15
    6d82:	b0 e0       	ldi	r27, 0x00	; 0
    6d84:	84 83       	std	Z+4, r24	; 0x04
    6d86:	95 83       	std	Z+5, r25	; 0x05
    6d88:	a6 83       	std	Z+6, r26	; 0x06
    6d8a:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
}
    6d8c:	80 e0       	ldi	r24, 0x00	; 0
    6d8e:	90 e0       	ldi	r25, 0x00	; 0
    6d90:	08 95       	ret

00006d92 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id, const struct timespec *ts)
{
    if(clk_id)
    6d92:	89 2b       	or	r24, r25
    6d94:	19 f4       	brne	.+6      	; 0x6d9c <clock_settime+0xa>
    6d96:	cb 01       	movw	r24, r22
    6d98:	1f ce       	rjmp	.-962    	; 0x69d8 <clock_settime.part.2>
    6d9a:	08 95       	ret
        return(-1);
    6d9c:	8f ef       	ldi	r24, 0xFF	; 255
    6d9e:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6da0:	08 95       	ret

00006da2 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6da2:	9c 01       	movw	r18, r24
    6da4:	83 70       	andi	r24, 0x03	; 3
    6da6:	99 27       	eor	r25, r25
    6da8:	00 97       	sbiw	r24, 0x00	; 0
    6daa:	69 f4       	brne	.+26     	; 0x6dc6 <IS_Leap+0x24>
    6dac:	2c 36       	cpi	r18, 0x6C	; 108
    6dae:	47 e0       	ldi	r20, 0x07	; 7
    6db0:	34 07       	cpc	r19, r20
    6db2:	59 f0       	breq	.+22     	; 0x6dca <IS_Leap+0x28>
    6db4:	51 e0       	ldi	r21, 0x01	; 1
    6db6:	40 e0       	ldi	r20, 0x00	; 0
    6db8:	24 33       	cpi	r18, 0x34	; 52
    6dba:	38 40       	sbci	r19, 0x08	; 8
    6dbc:	09 f4       	brne	.+2      	; 0x6dc0 <IS_Leap+0x1e>
    6dbe:	50 e0       	ldi	r21, 0x00	; 0
    6dc0:	85 2f       	mov	r24, r21
    6dc2:	94 2f       	mov	r25, r20
    6dc4:	08 95       	ret
    6dc6:	80 e0       	ldi	r24, 0x00	; 0
    6dc8:	90 e0       	ldi	r25, 0x00	; 0
    6dca:	08 95       	ret

00006dcc <tm_mon_to_ascii>:
    6dcc:	8c 30       	cpi	r24, 0x0C	; 12
    6dce:	91 05       	cpc	r25, r1
    6dd0:	40 f4       	brcc	.+16     	; 0x6de2 <tm_mon_to_ascii+0x16>
    6dd2:	88 0f       	add	r24, r24
    6dd4:	99 1f       	adc	r25, r25
    6dd6:	fc 01       	movw	r30, r24
    6dd8:	ee 5e       	subi	r30, 0xEE	; 238
    6dda:	fe 4f       	sbci	r31, 0xFE	; 254
    6ddc:	80 81       	ld	r24, Z
    6dde:	91 81       	ldd	r25, Z+1	; 0x01
    6de0:	08 95       	ret
    6de2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__Month+0x18>
    6de6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__Month+0x19>
    6dea:	08 95       	ret

00006dec <Days_Per_Month>:
    6dec:	cf 93       	push	r28
    6dee:	df 93       	push	r29
    6df0:	8c 30       	cpi	r24, 0x0C	; 12
    6df2:	91 05       	cpc	r25, r1
    6df4:	24 f0       	brlt	.+8      	; 0x6dfe <Days_Per_Month+0x12>
    6df6:	6f 5f       	subi	r22, 0xFF	; 255
    6df8:	7f 4f       	sbci	r23, 0xFF	; 255
    6dfa:	0c 97       	sbiw	r24, 0x0c	; 12
    6dfc:	f9 cf       	rjmp	.-14     	; 0x6df0 <Days_Per_Month+0x4>
    6dfe:	97 ff       	sbrs	r25, 7
    6e00:	04 c0       	rjmp	.+8      	; 0x6e0a <Days_Per_Month+0x1e>
    6e02:	61 50       	subi	r22, 0x01	; 1
    6e04:	71 09       	sbc	r23, r1
    6e06:	0c 96       	adiw	r24, 0x0c	; 12
    6e08:	fa cf       	rjmp	.-12     	; 0x6dfe <Days_Per_Month+0x12>
    6e0a:	fc 01       	movw	r30, r24
    6e0c:	ee 0f       	add	r30, r30
    6e0e:	ff 1f       	adc	r31, r31
    6e10:	ed 59       	subi	r30, 0x9D	; 157
    6e12:	fd 4f       	sbci	r31, 0xFD	; 253
    6e14:	c0 81       	ld	r28, Z
    6e16:	d1 81       	ldd	r29, Z+1	; 0x01
    6e18:	01 97       	sbiw	r24, 0x01	; 1
    6e1a:	29 f4       	brne	.+10     	; 0x6e26 <Days_Per_Month+0x3a>
    6e1c:	cb 01       	movw	r24, r22
    6e1e:	c1 df       	rcall	.-126    	; 0x6da2 <IS_Leap>
    6e20:	89 2b       	or	r24, r25
    6e22:	09 f0       	breq	.+2      	; 0x6e26 <Days_Per_Month+0x3a>
    6e24:	21 96       	adiw	r28, 0x01	; 1
    6e26:	ce 01       	movw	r24, r28
    6e28:	df 91       	pop	r29
    6e2a:	cf 91       	pop	r28
    6e2c:	08 95       	ret

00006e2e <time_to_tm>:
    6e2e:	a0 e0       	ldi	r26, 0x00	; 0
    6e30:	b0 e0       	ldi	r27, 0x00	; 0
    6e32:	ed e1       	ldi	r30, 0x1D	; 29
    6e34:	f7 e3       	ldi	r31, 0x37	; 55
    6e36:	0c 94 30 e5 	jmp	0x1ca60	; 0x1ca60 <__prologue_saves__+0x4>
    6e3a:	e8 01       	movw	r28, r16
    6e3c:	e6 e1       	ldi	r30, 0x16	; 22
    6e3e:	d8 01       	movw	r26, r16
    6e40:	1d 92       	st	X+, r1
    6e42:	ea 95       	dec	r30
    6e44:	e9 f7       	brne	.-6      	; 0x6e40 <time_to_tm+0x12>
    6e46:	61 15       	cp	r22, r1
    6e48:	bd e5       	ldi	r27, 0x5D	; 93
    6e4a:	7b 07       	cpc	r23, r27
    6e4c:	bd ef       	ldi	r27, 0xFD	; 253
    6e4e:	8b 07       	cpc	r24, r27
    6e50:	bf ef       	ldi	r27, 0xFF	; 255
    6e52:	9b 07       	cpc	r25, r27
    6e54:	08 f0       	brcs	.+2      	; 0x6e58 <time_to_tm+0x2a>
    6e56:	c0 c0       	rjmp	.+384    	; 0x6fd8 <time_to_tm+0x1aa>
    6e58:	6b 01       	movw	r12, r22
    6e5a:	7c 01       	movw	r14, r24
    6e5c:	c2 1a       	sub	r12, r18
    6e5e:	d3 0a       	sbc	r13, r19
    6e60:	e4 0a       	sbc	r14, r20
    6e62:	f5 0a       	sbc	r15, r21
    6e64:	46 01       	movw	r8, r12
    6e66:	57 01       	movw	r10, r14
    6e68:	e0 e8       	ldi	r30, 0x80	; 128
    6e6a:	ce 16       	cp	r12, r30
    6e6c:	ee ea       	ldi	r30, 0xAE	; 174
    6e6e:	de 06       	cpc	r13, r30
    6e70:	ee ef       	ldi	r30, 0xFE	; 254
    6e72:	ee 06       	cpc	r14, r30
    6e74:	ef ef       	ldi	r30, 0xFF	; 255
    6e76:	fe 06       	cpc	r15, r30
    6e78:	50 f0       	brcs	.+20     	; 0x6e8e <time_to_tm+0x60>
    6e7a:	80 e8       	ldi	r24, 0x80	; 128
    6e7c:	88 0e       	add	r8, r24
    6e7e:	81 e5       	ldi	r24, 0x51	; 81
    6e80:	98 1e       	adc	r9, r24
    6e82:	81 e0       	ldi	r24, 0x01	; 1
    6e84:	a8 1e       	adc	r10, r24
    6e86:	b1 1c       	adc	r11, r1
    6e88:	01 e0       	ldi	r16, 0x01	; 1
    6e8a:	10 e0       	ldi	r17, 0x00	; 0
    6e8c:	02 c0       	rjmp	.+4      	; 0x6e92 <time_to_tm+0x64>
    6e8e:	00 e0       	ldi	r16, 0x00	; 0
    6e90:	10 e0       	ldi	r17, 0x00	; 0
    6e92:	8c e3       	ldi	r24, 0x3C	; 60
    6e94:	48 2e       	mov	r4, r24
    6e96:	51 2c       	mov	r5, r1
    6e98:	61 2c       	mov	r6, r1
    6e9a:	71 2c       	mov	r7, r1
    6e9c:	c5 01       	movw	r24, r10
    6e9e:	b4 01       	movw	r22, r8
    6ea0:	a3 01       	movw	r20, r6
    6ea2:	92 01       	movw	r18, r4
    6ea4:	0e 94 ac e4 	call	0x1c958	; 0x1c958 <__udivmodsi4>
    6ea8:	79 83       	std	Y+1, r23	; 0x01
    6eaa:	68 83       	st	Y, r22
    6eac:	ca 01       	movw	r24, r20
    6eae:	b9 01       	movw	r22, r18
    6eb0:	a3 01       	movw	r20, r6
    6eb2:	92 01       	movw	r18, r4
    6eb4:	0e 94 ac e4 	call	0x1c958	; 0x1c958 <__udivmodsi4>
    6eb8:	7b 83       	std	Y+3, r23	; 0x03
    6eba:	6a 83       	std	Y+2, r22	; 0x02
    6ebc:	c5 01       	movw	r24, r10
    6ebe:	b4 01       	movw	r22, r8
    6ec0:	20 e1       	ldi	r18, 0x10	; 16
    6ec2:	3e e0       	ldi	r19, 0x0E	; 14
    6ec4:	40 e0       	ldi	r20, 0x00	; 0
    6ec6:	50 e0       	ldi	r21, 0x00	; 0
    6ec8:	0e 94 ac e4 	call	0x1c958	; 0x1c958 <__udivmodsi4>
    6ecc:	ca 01       	movw	r24, r20
    6ece:	b9 01       	movw	r22, r18
    6ed0:	28 e1       	ldi	r18, 0x18	; 24
    6ed2:	30 e0       	ldi	r19, 0x00	; 0
    6ed4:	40 e0       	ldi	r20, 0x00	; 0
    6ed6:	50 e0       	ldi	r21, 0x00	; 0
    6ed8:	0e 94 ac e4 	call	0x1c958	; 0x1c958 <__udivmodsi4>
    6edc:	7d 83       	std	Y+5, r23	; 0x05
    6ede:	6c 83       	std	Y+4, r22	; 0x04
    6ee0:	01 15       	cp	r16, r1
    6ee2:	11 05       	cpc	r17, r1
    6ee4:	89 f0       	breq	.+34     	; 0x6f08 <time_to_tm+0xda>
    6ee6:	85 e4       	ldi	r24, 0x45	; 69
    6ee8:	90 e0       	ldi	r25, 0x00	; 0
    6eea:	9b 87       	std	Y+11, r25	; 0x0b
    6eec:	8a 87       	std	Y+10, r24	; 0x0a
    6eee:	8b e0       	ldi	r24, 0x0B	; 11
    6ef0:	90 e0       	ldi	r25, 0x00	; 0
    6ef2:	99 87       	std	Y+9, r25	; 0x09
    6ef4:	88 87       	std	Y+8, r24	; 0x08
    6ef6:	8f e1       	ldi	r24, 0x1F	; 31
    6ef8:	90 e0       	ldi	r25, 0x00	; 0
    6efa:	9f 83       	std	Y+7, r25	; 0x07
    6efc:	8e 83       	std	Y+6, r24	; 0x06
    6efe:	83 e0       	ldi	r24, 0x03	; 3
    6f00:	90 e0       	ldi	r25, 0x00	; 0
    6f02:	9d 87       	std	Y+13, r25	; 0x0d
    6f04:	8c 87       	std	Y+12, r24	; 0x0c
    6f06:	65 c0       	rjmp	.+202    	; 0x6fd2 <time_to_tm+0x1a4>
    6f08:	c5 01       	movw	r24, r10
    6f0a:	b4 01       	movw	r22, r8
    6f0c:	20 e8       	ldi	r18, 0x80	; 128
    6f0e:	31 e5       	ldi	r19, 0x51	; 81
    6f10:	41 e0       	ldi	r20, 0x01	; 1
    6f12:	50 e0       	ldi	r21, 0x00	; 0
    6f14:	0e 94 ac e4 	call	0x1c958	; 0x1c958 <__udivmodsi4>
    6f18:	49 01       	movw	r8, r18
    6f1a:	5a 01       	movw	r10, r20
    6f1c:	ca 01       	movw	r24, r20
    6f1e:	b9 01       	movw	r22, r18
    6f20:	6c 5f       	subi	r22, 0xFC	; 252
    6f22:	7f 4f       	sbci	r23, 0xFF	; 255
    6f24:	8f 4f       	sbci	r24, 0xFF	; 255
    6f26:	9f 4f       	sbci	r25, 0xFF	; 255
    6f28:	27 e0       	ldi	r18, 0x07	; 7
    6f2a:	30 e0       	ldi	r19, 0x00	; 0
    6f2c:	40 e0       	ldi	r20, 0x00	; 0
    6f2e:	50 e0       	ldi	r21, 0x00	; 0
    6f30:	0e 94 ce e4 	call	0x1c99c	; 0x1c99c <__divmodsi4>
    6f34:	7d 87       	std	Y+13, r23	; 0x0d
    6f36:	6c 87       	std	Y+12, r22	; 0x0c
    6f38:	02 eb       	ldi	r16, 0xB2	; 178
    6f3a:	17 e0       	ldi	r17, 0x07	; 7
    6f3c:	c8 01       	movw	r24, r16
    6f3e:	31 df       	rcall	.-414    	; 0x6da2 <IS_Leap>
    6f40:	00 97       	sbiw	r24, 0x00	; 0
    6f42:	19 f4       	brne	.+6      	; 0x6f4a <time_to_tm+0x11c>
    6f44:	4d e6       	ldi	r20, 0x6D	; 109
    6f46:	51 e0       	ldi	r21, 0x01	; 1
    6f48:	02 c0       	rjmp	.+4      	; 0x6f4e <time_to_tm+0x120>
    6f4a:	4e e6       	ldi	r20, 0x6E	; 110
    6f4c:	51 e0       	ldi	r21, 0x01	; 1
    6f4e:	05 2e       	mov	r0, r21
    6f50:	00 0c       	add	r0, r0
    6f52:	66 0b       	sbc	r22, r22
    6f54:	77 0b       	sbc	r23, r23
    6f56:	84 16       	cp	r8, r20
    6f58:	95 06       	cpc	r9, r21
    6f5a:	a6 06       	cpc	r10, r22
    6f5c:	b7 06       	cpc	r11, r23
    6f5e:	3c f0       	brlt	.+14     	; 0x6f6e <time_to_tm+0x140>
    6f60:	0f 5f       	subi	r16, 0xFF	; 255
    6f62:	1f 4f       	sbci	r17, 0xFF	; 255
    6f64:	84 1a       	sub	r8, r20
    6f66:	95 0a       	sbc	r9, r21
    6f68:	a6 0a       	sbc	r10, r22
    6f6a:	b7 0a       	sbc	r11, r23
    6f6c:	e7 cf       	rjmp	.-50     	; 0x6f3c <time_to_tm+0x10e>
    6f6e:	0c 56       	subi	r16, 0x6C	; 108
    6f70:	17 40       	sbci	r17, 0x07	; 7
    6f72:	1b 87       	std	Y+11, r17	; 0x0b
    6f74:	0a 87       	std	Y+10, r16	; 0x0a
    6f76:	9f 86       	std	Y+15, r9	; 0x0f
    6f78:	8e 86       	std	Y+14, r8	; 0x0e
    6f7a:	e3 e6       	ldi	r30, 0x63	; 99
    6f7c:	f2 e0       	ldi	r31, 0x02	; 2
    6f7e:	20 e0       	ldi	r18, 0x00	; 0
    6f80:	30 e0       	ldi	r19, 0x00	; 0
    6f82:	18 14       	cp	r1, r8
    6f84:	19 04       	cpc	r1, r9
    6f86:	1a 04       	cpc	r1, r10
    6f88:	1b 04       	cpc	r1, r11
    6f8a:	e4 f4       	brge	.+56     	; 0x6fc4 <time_to_tm+0x196>
    6f8c:	2c 30       	cpi	r18, 0x0C	; 12
    6f8e:	31 05       	cpc	r19, r1
    6f90:	c9 f0       	breq	.+50     	; 0x6fc4 <time_to_tm+0x196>
    6f92:	41 91       	ld	r20, Z+
    6f94:	51 91       	ld	r21, Z+
    6f96:	21 30       	cpi	r18, 0x01	; 1
    6f98:	31 05       	cpc	r19, r1
    6f9a:	21 f4       	brne	.+8      	; 0x6fa4 <time_to_tm+0x176>
    6f9c:	00 97       	sbiw	r24, 0x00	; 0
    6f9e:	11 f0       	breq	.+4      	; 0x6fa4 <time_to_tm+0x176>
    6fa0:	4f 5f       	subi	r20, 0xFF	; 255
    6fa2:	5f 4f       	sbci	r21, 0xFF	; 255
    6fa4:	05 2e       	mov	r0, r21
    6fa6:	00 0c       	add	r0, r0
    6fa8:	66 0b       	sbc	r22, r22
    6faa:	77 0b       	sbc	r23, r23
    6fac:	84 16       	cp	r8, r20
    6fae:	95 06       	cpc	r9, r21
    6fb0:	a6 06       	cpc	r10, r22
    6fb2:	b7 06       	cpc	r11, r23
    6fb4:	3c f0       	brlt	.+14     	; 0x6fc4 <time_to_tm+0x196>
    6fb6:	84 1a       	sub	r8, r20
    6fb8:	95 0a       	sbc	r9, r21
    6fba:	a6 0a       	sbc	r10, r22
    6fbc:	b7 0a       	sbc	r11, r23
    6fbe:	2f 5f       	subi	r18, 0xFF	; 255
    6fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    6fc2:	df cf       	rjmp	.-66     	; 0x6f82 <time_to_tm+0x154>
    6fc4:	39 87       	std	Y+9, r19	; 0x09
    6fc6:	28 87       	std	Y+8, r18	; 0x08
    6fc8:	af ef       	ldi	r26, 0xFF	; 255
    6fca:	8a 1a       	sub	r8, r26
    6fcc:	9a 0a       	sbc	r9, r26
    6fce:	9f 82       	std	Y+7, r9	; 0x07
    6fd0:	8e 82       	std	Y+6, r8	; 0x06
    6fd2:	b6 01       	movw	r22, r12
    6fd4:	c7 01       	movw	r24, r14
    6fd6:	04 c0       	rjmp	.+8      	; 0x6fe0 <time_to_tm+0x1b2>
    6fd8:	6f ef       	ldi	r22, 0xFF	; 255
    6fda:	7f ef       	ldi	r23, 0xFF	; 255
    6fdc:	8f ef       	ldi	r24, 0xFF	; 255
    6fde:	9f ef       	ldi	r25, 0xFF	; 255
    6fe0:	cd b7       	in	r28, 0x3d	; 61
    6fe2:	de b7       	in	r29, 0x3e	; 62
    6fe4:	e0 e1       	ldi	r30, 0x10	; 16
    6fe6:	0c 94 4c e5 	jmp	0x1ca98	; 0x1ca98 <__epilogue_restores__+0x4>

00006fea <gmtime_r>:
    6fea:	0f 93       	push	r16
    6fec:	1f 93       	push	r17
    6fee:	cf 93       	push	r28
    6ff0:	df 93       	push	r29
    6ff2:	eb 01       	movw	r28, r22
    6ff4:	fc 01       	movw	r30, r24
    6ff6:	60 81       	ld	r22, Z
    6ff8:	71 81       	ldd	r23, Z+1	; 0x01
    6ffa:	82 81       	ldd	r24, Z+2	; 0x02
    6ffc:	93 81       	ldd	r25, Z+3	; 0x03
    6ffe:	8e 01       	movw	r16, r28
    7000:	20 e0       	ldi	r18, 0x00	; 0
    7002:	30 e0       	ldi	r19, 0x00	; 0
    7004:	a9 01       	movw	r20, r18
    7006:	13 df       	rcall	.-474    	; 0x6e2e <time_to_tm>
    7008:	ce 01       	movw	r24, r28
    700a:	df 91       	pop	r29
    700c:	cf 91       	pop	r28
    700e:	1f 91       	pop	r17
    7010:	0f 91       	pop	r16
    7012:	08 95       	ret

00007014 <gmtime>:
    7014:	26 e9       	ldi	r18, 0x96	; 150
    7016:	37 e1       	ldi	r19, 0x17	; 23
    7018:	30 93 ad 17 	sts	0x17AD, r19	; 0x8017ad <p.3754+0x1>
    701c:	20 93 ac 17 	sts	0x17AC, r18	; 0x8017ac <p.3754>
    7020:	b9 01       	movw	r22, r18
    7022:	e3 df       	rcall	.-58     	; 0x6fea <gmtime_r>
    7024:	86 e9       	ldi	r24, 0x96	; 150
    7026:	97 e1       	ldi	r25, 0x17	; 23
    7028:	08 95       	ret

0000702a <gettimezone>:
    702a:	e2 e6       	ldi	r30, 0x62	; 98
    702c:	f9 e1       	ldi	r31, 0x19	; 25
    702e:	20 81       	ld	r18, Z
    7030:	31 81       	ldd	r19, Z+1	; 0x01
    7032:	dc 01       	movw	r26, r24
    7034:	11 96       	adiw	r26, 0x01	; 1
    7036:	3c 93       	st	X, r19
    7038:	2e 93       	st	-X, r18
    703a:	22 81       	ldd	r18, Z+2	; 0x02
    703c:	33 81       	ldd	r19, Z+3	; 0x03
    703e:	13 96       	adiw	r26, 0x03	; 3
    7040:	3c 93       	st	X, r19
    7042:	2e 93       	st	-X, r18
    7044:	12 97       	sbiw	r26, 0x02	; 2
    7046:	80 e0       	ldi	r24, 0x00	; 0
    7048:	90 e0       	ldi	r25, 0x00	; 0
    704a:	08 95       	ret

0000704c <settimezone>:
    704c:	dc 01       	movw	r26, r24
    704e:	2d 91       	ld	r18, X+
    7050:	3c 91       	ld	r19, X
    7052:	11 97       	sbiw	r26, 0x01	; 1
    7054:	e2 e6       	ldi	r30, 0x62	; 98
    7056:	f9 e1       	ldi	r31, 0x19	; 25
    7058:	31 83       	std	Z+1, r19	; 0x01
    705a:	20 83       	st	Z, r18
    705c:	12 96       	adiw	r26, 0x02	; 2
    705e:	8d 91       	ld	r24, X+
    7060:	9c 91       	ld	r25, X
    7062:	13 97       	sbiw	r26, 0x03	; 3
    7064:	93 83       	std	Z+3, r25	; 0x03
    7066:	82 83       	std	Z+2, r24	; 0x02
    7068:	80 e0       	ldi	r24, 0x00	; 0
    706a:	90 e0       	ldi	r25, 0x00	; 0
    706c:	08 95       	ret

0000706e <gettimeofday>:
    706e:	a8 e0       	ldi	r26, 0x08	; 8
    7070:	b0 e0       	ldi	r27, 0x00	; 0
    7072:	ed e3       	ldi	r30, 0x3D	; 61
    7074:	f8 e3       	ldi	r31, 0x38	; 56
    7076:	0c 94 3a e5 	jmp	0x1ca74	; 0x1ca74 <__prologue_saves__+0x18>
    707a:	8c 01       	movw	r16, r24
    707c:	7b 01       	movw	r14, r22
    707e:	be 01       	movw	r22, r28
    7080:	6f 5f       	subi	r22, 0xFF	; 255
    7082:	7f 4f       	sbci	r23, 0xFF	; 255
    7084:	80 e0       	ldi	r24, 0x00	; 0
    7086:	90 e0       	ldi	r25, 0x00	; 0
    7088:	f5 db       	rcall	.-2070   	; 0x6874 <clock_gettime>
    708a:	89 81       	ldd	r24, Y+1	; 0x01
    708c:	9a 81       	ldd	r25, Y+2	; 0x02
    708e:	ab 81       	ldd	r26, Y+3	; 0x03
    7090:	bc 81       	ldd	r27, Y+4	; 0x04
    7092:	f8 01       	movw	r30, r16
    7094:	80 83       	st	Z, r24
    7096:	91 83       	std	Z+1, r25	; 0x01
    7098:	a2 83       	std	Z+2, r26	; 0x02
    709a:	b3 83       	std	Z+3, r27	; 0x03
    709c:	6d 81       	ldd	r22, Y+5	; 0x05
    709e:	7e 81       	ldd	r23, Y+6	; 0x06
    70a0:	8f 81       	ldd	r24, Y+7	; 0x07
    70a2:	98 85       	ldd	r25, Y+8	; 0x08
    70a4:	28 ee       	ldi	r18, 0xE8	; 232
    70a6:	33 e0       	ldi	r19, 0x03	; 3
    70a8:	40 e0       	ldi	r20, 0x00	; 0
    70aa:	50 e0       	ldi	r21, 0x00	; 0
    70ac:	0e 94 ce e4 	call	0x1c99c	; 0x1c99c <__divmodsi4>
    70b0:	f8 01       	movw	r30, r16
    70b2:	24 83       	std	Z+4, r18	; 0x04
    70b4:	35 83       	std	Z+5, r19	; 0x05
    70b6:	46 83       	std	Z+6, r20	; 0x06
    70b8:	57 83       	std	Z+7, r21	; 0x07
    70ba:	c7 01       	movw	r24, r14
    70bc:	b6 df       	rcall	.-148    	; 0x702a <gettimezone>
    70be:	80 e0       	ldi	r24, 0x00	; 0
    70c0:	90 e0       	ldi	r25, 0x00	; 0
    70c2:	28 96       	adiw	r28, 0x08	; 8
    70c4:	e6 e0       	ldi	r30, 0x06	; 6
    70c6:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

000070ca <time>:
    70ca:	cf 93       	push	r28
    70cc:	df 93       	push	r29
    70ce:	ec 01       	movw	r28, r24
    70d0:	68 e7       	ldi	r22, 0x78	; 120
    70d2:	77 e1       	ldi	r23, 0x17	; 23
    70d4:	80 e0       	ldi	r24, 0x00	; 0
    70d6:	90 e0       	ldi	r25, 0x00	; 0
    70d8:	cd db       	rcall	.-2150   	; 0x6874 <clock_gettime>
    70da:	20 97       	sbiw	r28, 0x00	; 0
    70dc:	61 f0       	breq	.+24     	; 0x70f6 <time+0x2c>
    70de:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <ts.3832>
    70e2:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <ts.3832+0x1>
    70e6:	a0 91 7a 17 	lds	r26, 0x177A	; 0x80177a <ts.3832+0x2>
    70ea:	b0 91 7b 17 	lds	r27, 0x177B	; 0x80177b <ts.3832+0x3>
    70ee:	88 83       	st	Y, r24
    70f0:	99 83       	std	Y+1, r25	; 0x01
    70f2:	aa 83       	std	Y+2, r26	; 0x02
    70f4:	bb 83       	std	Y+3, r27	; 0x03
    70f6:	60 91 78 17 	lds	r22, 0x1778	; 0x801778 <ts.3832>
    70fa:	70 91 79 17 	lds	r23, 0x1779	; 0x801779 <ts.3832+0x1>
    70fe:	80 91 7a 17 	lds	r24, 0x177A	; 0x80177a <ts.3832+0x2>
    7102:	90 91 7b 17 	lds	r25, 0x177B	; 0x80177b <ts.3832+0x3>
    7106:	df 91       	pop	r29
    7108:	cf 91       	pop	r28
    710a:	08 95       	ret

0000710c <is_dst>:
    710c:	cf 92       	push	r12
    710e:	df 92       	push	r13
    7110:	ef 92       	push	r14
    7112:	ff 92       	push	r15
    7114:	6b 01       	movw	r12, r22
    7116:	7c 01       	movw	r14, r24
    7118:	ff d3       	rcall	.+2046   	; 0x7918 <set_dst>
    711a:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <dst>
    711e:	90 91 67 19 	lds	r25, 0x1967	; 0x801967 <dst+0x1>
    7122:	a0 91 68 19 	lds	r26, 0x1968	; 0x801968 <dst+0x2>
    7126:	b0 91 69 19 	lds	r27, 0x1969	; 0x801969 <dst+0x3>
    712a:	c8 16       	cp	r12, r24
    712c:	d9 06       	cpc	r13, r25
    712e:	ea 06       	cpc	r14, r26
    7130:	fb 06       	cpc	r15, r27
    7132:	88 f0       	brcs	.+34     	; 0x7156 <is_dst+0x4a>
    7134:	81 e0       	ldi	r24, 0x01	; 1
    7136:	90 e0       	ldi	r25, 0x00	; 0
    7138:	40 91 6a 19 	lds	r20, 0x196A	; 0x80196a <dst+0x4>
    713c:	50 91 6b 19 	lds	r21, 0x196B	; 0x80196b <dst+0x5>
    7140:	60 91 6c 19 	lds	r22, 0x196C	; 0x80196c <dst+0x6>
    7144:	70 91 6d 19 	lds	r23, 0x196D	; 0x80196d <dst+0x7>
    7148:	4c 15       	cp	r20, r12
    714a:	5d 05       	cpc	r21, r13
    714c:	6e 05       	cpc	r22, r14
    714e:	7f 05       	cpc	r23, r15
    7150:	20 f4       	brcc	.+8      	; 0x715a <is_dst+0x4e>
    7152:	80 e0       	ldi	r24, 0x00	; 0
    7154:	02 c0       	rjmp	.+4      	; 0x715a <is_dst+0x4e>
    7156:	80 e0       	ldi	r24, 0x00	; 0
    7158:	90 e0       	ldi	r25, 0x00	; 0
    715a:	ff 90       	pop	r15
    715c:	ef 90       	pop	r14
    715e:	df 90       	pop	r13
    7160:	cf 90       	pop	r12
    7162:	08 95       	ret

00007164 <localtime_r>:
    7164:	4f 92       	push	r4
    7166:	5f 92       	push	r5
    7168:	6f 92       	push	r6
    716a:	7f 92       	push	r7
    716c:	af 92       	push	r10
    716e:	bf 92       	push	r11
    7170:	cf 92       	push	r12
    7172:	df 92       	push	r13
    7174:	ef 92       	push	r14
    7176:	ff 92       	push	r15
    7178:	0f 93       	push	r16
    717a:	1f 93       	push	r17
    717c:	cf 93       	push	r28
    717e:	df 93       	push	r29
    7180:	00 d0       	rcall	.+0      	; 0x7182 <localtime_r+0x1e>
    7182:	00 d0       	rcall	.+0      	; 0x7184 <localtime_r+0x20>
    7184:	cd b7       	in	r28, 0x3d	; 61
    7186:	de b7       	in	r29, 0x3e	; 62
    7188:	5b 01       	movw	r10, r22
    718a:	fc 01       	movw	r30, r24
    718c:	40 80       	ld	r4, Z
    718e:	51 80       	ldd	r5, Z+1	; 0x01
    7190:	62 80       	ldd	r6, Z+2	; 0x02
    7192:	73 80       	ldd	r7, Z+3	; 0x03
    7194:	ce 01       	movw	r24, r28
    7196:	01 96       	adiw	r24, 0x01	; 1
    7198:	48 df       	rcall	.-368    	; 0x702a <gettimezone>
    719a:	a9 81       	ldd	r26, Y+1	; 0x01
    719c:	ba 81       	ldd	r27, Y+2	; 0x02
    719e:	2c e3       	ldi	r18, 0x3C	; 60
    71a0:	30 e0       	ldi	r19, 0x00	; 0
    71a2:	0e 94 08 e5 	call	0x1ca10	; 0x1ca10 <__usmulhisi3>
    71a6:	6b 01       	movw	r12, r22
    71a8:	7c 01       	movw	r14, r24
    71aa:	c3 01       	movw	r24, r6
    71ac:	b2 01       	movw	r22, r4
    71ae:	6c 19       	sub	r22, r12
    71b0:	7d 09       	sbc	r23, r13
    71b2:	8e 09       	sbc	r24, r14
    71b4:	9f 09       	sbc	r25, r15
    71b6:	aa df       	rcall	.-172    	; 0x710c <is_dst>
    71b8:	89 2b       	or	r24, r25
    71ba:	31 f0       	breq	.+12     	; 0x71c8 <localtime_r+0x64>
    71bc:	f0 e1       	ldi	r31, 0x10	; 16
    71be:	cf 1a       	sub	r12, r31
    71c0:	fe e0       	ldi	r31, 0x0E	; 14
    71c2:	df 0a       	sbc	r13, r31
    71c4:	e1 08       	sbc	r14, r1
    71c6:	f1 08       	sbc	r15, r1
    71c8:	85 01       	movw	r16, r10
    71ca:	a7 01       	movw	r20, r14
    71cc:	96 01       	movw	r18, r12
    71ce:	c3 01       	movw	r24, r6
    71d0:	b2 01       	movw	r22, r4
    71d2:	2d de       	rcall	.-934    	; 0x6e2e <time_to_tm>
    71d4:	c5 01       	movw	r24, r10
    71d6:	0f 90       	pop	r0
    71d8:	0f 90       	pop	r0
    71da:	0f 90       	pop	r0
    71dc:	0f 90       	pop	r0
    71de:	df 91       	pop	r29
    71e0:	cf 91       	pop	r28
    71e2:	1f 91       	pop	r17
    71e4:	0f 91       	pop	r16
    71e6:	ff 90       	pop	r15
    71e8:	ef 90       	pop	r14
    71ea:	df 90       	pop	r13
    71ec:	cf 90       	pop	r12
    71ee:	bf 90       	pop	r11
    71f0:	af 90       	pop	r10
    71f2:	7f 90       	pop	r7
    71f4:	6f 90       	pop	r6
    71f6:	5f 90       	pop	r5
    71f8:	4f 90       	pop	r4
    71fa:	08 95       	ret

000071fc <localtime>:
    71fc:	60 e8       	ldi	r22, 0x80	; 128
    71fe:	77 e1       	ldi	r23, 0x17	; 23
    7200:	b1 cf       	rjmp	.-158    	; 0x7164 <localtime_r>
    7202:	08 95       	ret

00007204 <normalize>:
    7204:	aa e0       	ldi	r26, 0x0A	; 10
    7206:	b0 e0       	ldi	r27, 0x00	; 0
    7208:	e8 e0       	ldi	r30, 0x08	; 8
    720a:	f9 e3       	ldi	r31, 0x39	; 57
    720c:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    7210:	7c 01       	movw	r14, r24
    7212:	7a 87       	std	Y+10, r23	; 0x0a
    7214:	69 87       	std	Y+9, r22	; 0x09
    7216:	f7 01       	movw	r30, r14
    7218:	80 81       	ld	r24, Z
    721a:	91 81       	ldd	r25, Z+1	; 0x01
    721c:	8c 33       	cpi	r24, 0x3C	; 60
    721e:	91 05       	cpc	r25, r1
    7220:	5c f0       	brlt	.+22     	; 0x7238 <normalize+0x34>
    7222:	f7 01       	movw	r30, r14
    7224:	22 81       	ldd	r18, Z+2	; 0x02
    7226:	33 81       	ldd	r19, Z+3	; 0x03
    7228:	2f 5f       	subi	r18, 0xFF	; 255
    722a:	3f 4f       	sbci	r19, 0xFF	; 255
    722c:	33 83       	std	Z+3, r19	; 0x03
    722e:	22 83       	std	Z+2, r18	; 0x02
    7230:	cc 97       	sbiw	r24, 0x3c	; 60
    7232:	91 83       	std	Z+1, r25	; 0x01
    7234:	80 83       	st	Z, r24
    7236:	ef cf       	rjmp	.-34     	; 0x7216 <normalize+0x12>
    7238:	f7 01       	movw	r30, r14
    723a:	01 90       	ld	r0, Z+
    723c:	f0 81       	ld	r31, Z
    723e:	e0 2d       	mov	r30, r0
    7240:	fe 83       	std	Y+6, r31	; 0x06
    7242:	ed 83       	std	Y+5, r30	; 0x05
    7244:	f7 ff       	sbrs	r31, 7
    7246:	0d c0       	rjmp	.+26     	; 0x7262 <normalize+0x5e>
    7248:	f7 01       	movw	r30, r14
    724a:	82 81       	ldd	r24, Z+2	; 0x02
    724c:	93 81       	ldd	r25, Z+3	; 0x03
    724e:	01 97       	sbiw	r24, 0x01	; 1
    7250:	93 83       	std	Z+3, r25	; 0x03
    7252:	82 83       	std	Z+2, r24	; 0x02
    7254:	6d 81       	ldd	r22, Y+5	; 0x05
    7256:	7e 81       	ldd	r23, Y+6	; 0x06
    7258:	64 5c       	subi	r22, 0xC4	; 196
    725a:	7f 4f       	sbci	r23, 0xFF	; 255
    725c:	71 83       	std	Z+1, r23	; 0x01
    725e:	60 83       	st	Z, r22
    7260:	eb cf       	rjmp	.-42     	; 0x7238 <normalize+0x34>
    7262:	f7 01       	movw	r30, r14
    7264:	82 81       	ldd	r24, Z+2	; 0x02
    7266:	93 81       	ldd	r25, Z+3	; 0x03
    7268:	8c 33       	cpi	r24, 0x3C	; 60
    726a:	91 05       	cpc	r25, r1
    726c:	5c f0       	brlt	.+22     	; 0x7284 <normalize+0x80>
    726e:	f7 01       	movw	r30, r14
    7270:	24 81       	ldd	r18, Z+4	; 0x04
    7272:	35 81       	ldd	r19, Z+5	; 0x05
    7274:	2f 5f       	subi	r18, 0xFF	; 255
    7276:	3f 4f       	sbci	r19, 0xFF	; 255
    7278:	35 83       	std	Z+5, r19	; 0x05
    727a:	24 83       	std	Z+4, r18	; 0x04
    727c:	cc 97       	sbiw	r24, 0x3c	; 60
    727e:	93 83       	std	Z+3, r25	; 0x03
    7280:	82 83       	std	Z+2, r24	; 0x02
    7282:	ef cf       	rjmp	.-34     	; 0x7262 <normalize+0x5e>
    7284:	f7 01       	movw	r30, r14
    7286:	22 80       	ldd	r2, Z+2	; 0x02
    7288:	33 80       	ldd	r3, Z+3	; 0x03
    728a:	37 fe       	sbrs	r3, 7
    728c:	0d c0       	rjmp	.+26     	; 0x72a8 <normalize+0xa4>
    728e:	f7 01       	movw	r30, r14
    7290:	84 81       	ldd	r24, Z+4	; 0x04
    7292:	95 81       	ldd	r25, Z+5	; 0x05
    7294:	01 97       	sbiw	r24, 0x01	; 1
    7296:	95 83       	std	Z+5, r25	; 0x05
    7298:	84 83       	std	Z+4, r24	; 0x04
    729a:	fc e3       	ldi	r31, 0x3C	; 60
    729c:	2f 0e       	add	r2, r31
    729e:	31 1c       	adc	r3, r1
    72a0:	f7 01       	movw	r30, r14
    72a2:	33 82       	std	Z+3, r3	; 0x03
    72a4:	22 82       	std	Z+2, r2	; 0x02
    72a6:	ee cf       	rjmp	.-36     	; 0x7284 <normalize+0x80>
    72a8:	f7 01       	movw	r30, r14
    72aa:	84 81       	ldd	r24, Z+4	; 0x04
    72ac:	95 81       	ldd	r25, Z+5	; 0x05
    72ae:	88 31       	cpi	r24, 0x18	; 24
    72b0:	91 05       	cpc	r25, r1
    72b2:	5c f0       	brlt	.+22     	; 0x72ca <normalize+0xc6>
    72b4:	f7 01       	movw	r30, r14
    72b6:	26 81       	ldd	r18, Z+6	; 0x06
    72b8:	37 81       	ldd	r19, Z+7	; 0x07
    72ba:	2f 5f       	subi	r18, 0xFF	; 255
    72bc:	3f 4f       	sbci	r19, 0xFF	; 255
    72be:	37 83       	std	Z+7, r19	; 0x07
    72c0:	26 83       	std	Z+6, r18	; 0x06
    72c2:	48 97       	sbiw	r24, 0x18	; 24
    72c4:	95 83       	std	Z+5, r25	; 0x05
    72c6:	84 83       	std	Z+4, r24	; 0x04
    72c8:	ef cf       	rjmp	.-34     	; 0x72a8 <normalize+0xa4>
    72ca:	f7 01       	movw	r30, r14
    72cc:	04 81       	ldd	r16, Z+4	; 0x04
    72ce:	15 81       	ldd	r17, Z+5	; 0x05
    72d0:	17 ff       	sbrs	r17, 7
    72d2:	0b c0       	rjmp	.+22     	; 0x72ea <normalize+0xe6>
    72d4:	f7 01       	movw	r30, r14
    72d6:	86 81       	ldd	r24, Z+6	; 0x06
    72d8:	97 81       	ldd	r25, Z+7	; 0x07
    72da:	01 97       	sbiw	r24, 0x01	; 1
    72dc:	97 83       	std	Z+7, r25	; 0x07
    72de:	86 83       	std	Z+6, r24	; 0x06
    72e0:	08 5e       	subi	r16, 0xE8	; 232
    72e2:	1f 4f       	sbci	r17, 0xFF	; 255
    72e4:	15 83       	std	Z+5, r17	; 0x05
    72e6:	04 83       	std	Z+4, r16	; 0x04
    72e8:	f0 cf       	rjmp	.-32     	; 0x72ca <normalize+0xc6>
    72ea:	f7 01       	movw	r30, r14
    72ec:	80 85       	ldd	r24, Z+8	; 0x08
    72ee:	91 85       	ldd	r25, Z+9	; 0x09
    72f0:	8c 30       	cpi	r24, 0x0C	; 12
    72f2:	91 05       	cpc	r25, r1
    72f4:	5c f0       	brlt	.+22     	; 0x730c <normalize+0x108>
    72f6:	f7 01       	movw	r30, r14
    72f8:	22 85       	ldd	r18, Z+10	; 0x0a
    72fa:	33 85       	ldd	r19, Z+11	; 0x0b
    72fc:	2f 5f       	subi	r18, 0xFF	; 255
    72fe:	3f 4f       	sbci	r19, 0xFF	; 255
    7300:	33 87       	std	Z+11, r19	; 0x0b
    7302:	22 87       	std	Z+10, r18	; 0x0a
    7304:	0c 97       	sbiw	r24, 0x0c	; 12
    7306:	91 87       	std	Z+9, r25	; 0x09
    7308:	80 87       	std	Z+8, r24	; 0x08
    730a:	ef cf       	rjmp	.-34     	; 0x72ea <normalize+0xe6>
    730c:	f7 01       	movw	r30, r14
    730e:	80 85       	ldd	r24, Z+8	; 0x08
    7310:	91 85       	ldd	r25, Z+9	; 0x09
    7312:	97 ff       	sbrs	r25, 7
    7314:	2d c0       	rjmp	.+90     	; 0x7370 <normalize+0x16c>
    7316:	f7 01       	movw	r30, r14
    7318:	22 85       	ldd	r18, Z+10	; 0x0a
    731a:	33 85       	ldd	r19, Z+11	; 0x0b
    731c:	21 50       	subi	r18, 0x01	; 1
    731e:	31 09       	sbc	r19, r1
    7320:	33 87       	std	Z+11, r19	; 0x0b
    7322:	22 87       	std	Z+10, r18	; 0x0a
    7324:	0c 96       	adiw	r24, 0x0c	; 12
    7326:	91 87       	std	Z+9, r25	; 0x09
    7328:	80 87       	std	Z+8, r24	; 0x08
    732a:	f0 cf       	rjmp	.-32     	; 0x730c <normalize+0x108>
    732c:	f7 01       	movw	r30, r14
    732e:	c6 80       	ldd	r12, Z+6	; 0x06
    7330:	d7 80       	ldd	r13, Z+7	; 0x07
    7332:	a0 84       	ldd	r10, Z+8	; 0x08
    7334:	b1 84       	ldd	r11, Z+9	; 0x09
    7336:	b4 01       	movw	r22, r8
    7338:	c5 01       	movw	r24, r10
    733a:	58 dd       	rcall	.-1360   	; 0x6dec <Days_Per_Month>
    733c:	8c 15       	cp	r24, r12
    733e:	9d 05       	cpc	r25, r13
    7340:	84 f5       	brge	.+96     	; 0x73a2 <normalize+0x19e>
    7342:	c8 1a       	sub	r12, r24
    7344:	d9 0a       	sbc	r13, r25
    7346:	f7 01       	movw	r30, r14
    7348:	d7 82       	std	Z+7, r13	; 0x07
    734a:	c6 82       	std	Z+6, r12	; 0x06
    734c:	c5 01       	movw	r24, r10
    734e:	01 96       	adiw	r24, 0x01	; 1
    7350:	91 87       	std	Z+9, r25	; 0x09
    7352:	80 87       	std	Z+8, r24	; 0x08
    7354:	0c 97       	sbiw	r24, 0x0c	; 12
    7356:	54 f3       	brlt	.-44     	; 0x732c <normalize+0x128>
    7358:	fb e0       	ldi	r31, 0x0B	; 11
    735a:	af 1a       	sub	r10, r31
    735c:	b1 08       	sbc	r11, r1
    735e:	f7 01       	movw	r30, r14
    7360:	b1 86       	std	Z+9, r11	; 0x09
    7362:	a0 86       	std	Z+8, r10	; 0x08
    7364:	ff ef       	ldi	r31, 0xFF	; 255
    7366:	8f 1a       	sub	r8, r31
    7368:	9f 0a       	sbc	r9, r31
    736a:	f7 01       	movw	r30, r14
    736c:	93 86       	std	Z+11, r9	; 0x0b
    736e:	82 86       	std	Z+10, r8	; 0x0a
    7370:	f7 01       	movw	r30, r14
    7372:	82 84       	ldd	r8, Z+10	; 0x0a
    7374:	93 84       	ldd	r9, Z+11	; 0x0b
    7376:	da cf       	rjmp	.-76     	; 0x732c <normalize+0x128>
    7378:	f7 01       	movw	r30, r14
    737a:	80 85       	ldd	r24, Z+8	; 0x08
    737c:	91 85       	ldd	r25, Z+9	; 0x09
    737e:	9c 01       	movw	r18, r24
    7380:	21 50       	subi	r18, 0x01	; 1
    7382:	31 09       	sbc	r19, r1
    7384:	37 fd       	sbrc	r19, 7
    7386:	16 c0       	rjmp	.+44     	; 0x73b4 <normalize+0x1b0>
    7388:	31 87       	std	Z+9, r19	; 0x09
    738a:	20 87       	std	Z+8, r18	; 0x08
    738c:	f7 01       	movw	r30, r14
    738e:	62 85       	ldd	r22, Z+10	; 0x0a
    7390:	73 85       	ldd	r23, Z+11	; 0x0b
    7392:	80 85       	ldd	r24, Z+8	; 0x08
    7394:	91 85       	ldd	r25, Z+9	; 0x09
    7396:	2a dd       	rcall	.-1452   	; 0x6dec <Days_Per_Month>
    7398:	88 0d       	add	r24, r8
    739a:	99 1d       	adc	r25, r9
    739c:	f7 01       	movw	r30, r14
    739e:	97 83       	std	Z+7, r25	; 0x07
    73a0:	86 83       	std	Z+6, r24	; 0x06
    73a2:	f7 01       	movw	r30, r14
    73a4:	86 80       	ldd	r8, Z+6	; 0x06
    73a6:	97 80       	ldd	r9, Z+7	; 0x07
    73a8:	a2 84       	ldd	r10, Z+10	; 0x0a
    73aa:	b3 84       	ldd	r11, Z+11	; 0x0b
    73ac:	18 14       	cp	r1, r8
    73ae:	19 04       	cpc	r1, r9
    73b0:	1c f7       	brge	.-58     	; 0x7378 <normalize+0x174>
    73b2:	0b c0       	rjmp	.+22     	; 0x73ca <normalize+0x1c6>
    73b4:	0b 96       	adiw	r24, 0x0b	; 11
    73b6:	f7 01       	movw	r30, r14
    73b8:	91 87       	std	Z+9, r25	; 0x09
    73ba:	80 87       	std	Z+8, r24	; 0x08
    73bc:	f1 e0       	ldi	r31, 0x01	; 1
    73be:	af 1a       	sub	r10, r31
    73c0:	b1 08       	sbc	r11, r1
    73c2:	f7 01       	movw	r30, r14
    73c4:	b3 86       	std	Z+11, r11	; 0x0b
    73c6:	a2 86       	std	Z+10, r10	; 0x0a
    73c8:	e1 cf       	rjmp	.-62     	; 0x738c <normalize+0x188>
    73ca:	a5 01       	movw	r20, r10
    73cc:	44 59       	subi	r20, 0x94	; 148
    73ce:	58 4f       	sbci	r21, 0xF8	; 248
    73d0:	58 87       	std	Y+8, r21	; 0x08
    73d2:	4f 83       	std	Y+7, r20	; 0x07
    73d4:	35 01       	movw	r6, r10
    73d6:	56 e4       	ldi	r21, 0x46	; 70
    73d8:	65 1a       	sub	r6, r21
    73da:	71 08       	sbc	r7, r1
    73dc:	89 e8       	ldi	r24, 0x89	; 137
    73de:	68 16       	cp	r6, r24
    73e0:	71 04       	cpc	r7, r1
    73e2:	08 f0       	brcs	.+2      	; 0x73e6 <normalize+0x1e2>
    73e4:	9b c0       	rjmp	.+310    	; 0x751c <normalize+0x318>
    73e6:	c0 84       	ldd	r12, Z+8	; 0x08
    73e8:	d1 84       	ldd	r13, Z+9	; 0x09
    73ea:	9c e0       	ldi	r25, 0x0C	; 12
    73ec:	c9 16       	cp	r12, r25
    73ee:	d1 04       	cpc	r13, r1
    73f0:	08 f0       	brcs	.+2      	; 0x73f4 <normalize+0x1f0>
    73f2:	94 c0       	rjmp	.+296    	; 0x751c <normalize+0x318>
    73f4:	24 01       	movw	r4, r8
    73f6:	e1 e0       	ldi	r30, 0x01	; 1
    73f8:	4e 1a       	sub	r4, r30
    73fa:	51 08       	sbc	r5, r1
    73fc:	6f 81       	ldd	r22, Y+7	; 0x07
    73fe:	78 85       	ldd	r23, Y+8	; 0x08
    7400:	c6 01       	movw	r24, r12
    7402:	f4 dc       	rcall	.-1560   	; 0x6dec <Days_Per_Month>
    7404:	48 16       	cp	r4, r24
    7406:	59 06       	cpc	r5, r25
    7408:	0c f0       	brlt	.+2      	; 0x740c <normalize+0x208>
    740a:	88 c0       	rjmp	.+272    	; 0x751c <normalize+0x318>
    740c:	08 31       	cpi	r16, 0x18	; 24
    740e:	11 05       	cpc	r17, r1
    7410:	0c f0       	brlt	.+2      	; 0x7414 <normalize+0x210>
    7412:	84 c0       	rjmp	.+264    	; 0x751c <normalize+0x318>
    7414:	fc e3       	ldi	r31, 0x3C	; 60
    7416:	2f 16       	cp	r2, r31
    7418:	31 04       	cpc	r3, r1
    741a:	0c f0       	brlt	.+2      	; 0x741e <normalize+0x21a>
    741c:	7f c0       	rjmp	.+254    	; 0x751c <normalize+0x318>
    741e:	4d 81       	ldd	r20, Y+5	; 0x05
    7420:	5e 81       	ldd	r21, Y+6	; 0x06
    7422:	4c 33       	cpi	r20, 0x3C	; 60
    7424:	51 05       	cpc	r21, r1
    7426:	0c f0       	brlt	.+2      	; 0x742a <normalize+0x226>
    7428:	79 c0       	rjmp	.+242    	; 0x751c <normalize+0x318>
    742a:	2d e6       	ldi	r18, 0x6D	; 109
    742c:	31 e0       	ldi	r19, 0x01	; 1
    742e:	d3 01       	movw	r26, r6
    7430:	0e 94 08 e5 	call	0x1ca10	; 0x1ca10 <__usmulhisi3>
    7434:	f6 01       	movw	r30, r12
    7436:	ee 0f       	add	r30, r30
    7438:	ff 1f       	adc	r31, r31
    743a:	e5 58       	subi	r30, 0x85	; 133
    743c:	fd 4f       	sbci	r31, 0xFD	; 253
    743e:	20 81       	ld	r18, Z
    7440:	31 81       	ldd	r19, Z+1	; 0x01
    7442:	dc 01       	movw	r26, r24
    7444:	cb 01       	movw	r24, r22
    7446:	82 0f       	add	r24, r18
    7448:	93 1f       	adc	r25, r19
    744a:	a1 1d       	adc	r26, r1
    744c:	b1 1d       	adc	r27, r1
    744e:	05 2c       	mov	r0, r5
    7450:	00 0c       	add	r0, r0
    7452:	66 08       	sbc	r6, r6
    7454:	77 08       	sbc	r7, r7
    7456:	48 0e       	add	r4, r24
    7458:	59 1e       	adc	r5, r25
    745a:	6a 1e       	adc	r6, r26
    745c:	7b 1e       	adc	r7, r27
    745e:	1a 14       	cp	r1, r10
    7460:	1b 04       	cpc	r1, r11
    7462:	1c f4       	brge	.+6      	; 0x746a <normalize+0x266>
    7464:	51 e0       	ldi	r21, 0x01	; 1
    7466:	a5 1a       	sub	r10, r21
    7468:	b1 08       	sbc	r11, r1
    746a:	45 01       	movw	r8, r10
    746c:	95 94       	asr	r9
    746e:	87 94       	ror	r8
    7470:	95 94       	asr	r9
    7472:	87 94       	ror	r8
    7474:	88 ec       	ldi	r24, 0xC8	; 200
    7476:	a8 16       	cp	r10, r24
    7478:	b1 04       	cpc	r11, r1
    747a:	1c f0       	brlt	.+6      	; 0x7482 <normalize+0x27e>
    747c:	91 e0       	ldi	r25, 0x01	; 1
    747e:	89 1a       	sub	r8, r25
    7480:	91 08       	sbc	r9, r1
    7482:	09 2c       	mov	r0, r9
    7484:	00 0c       	add	r0, r0
    7486:	aa 08       	sbc	r10, r10
    7488:	bb 08       	sbc	r11, r11
    748a:	84 0c       	add	r8, r4
    748c:	95 1c       	adc	r9, r5
    748e:	a6 1c       	adc	r10, r6
    7490:	b7 1c       	adc	r11, r7
    7492:	24 01       	movw	r4, r8
    7494:	35 01       	movw	r6, r10
    7496:	e1 e1       	ldi	r30, 0x11	; 17
    7498:	4e 1a       	sub	r4, r30
    749a:	51 08       	sbc	r5, r1
    749c:	61 08       	sbc	r6, r1
    749e:	71 08       	sbc	r7, r1
    74a0:	f2 e0       	ldi	r31, 0x02	; 2
    74a2:	cf 16       	cp	r12, r31
    74a4:	d1 04       	cpc	r13, r1
    74a6:	64 f0       	brlt	.+24     	; 0x74c0 <normalize+0x2bc>
    74a8:	8f 81       	ldd	r24, Y+7	; 0x07
    74aa:	98 85       	ldd	r25, Y+8	; 0x08
    74ac:	7a dc       	rcall	.-1804   	; 0x6da2 <IS_Leap>
    74ae:	89 2b       	or	r24, r25
    74b0:	39 f0       	breq	.+14     	; 0x74c0 <normalize+0x2bc>
    74b2:	24 01       	movw	r4, r8
    74b4:	35 01       	movw	r6, r10
    74b6:	40 e1       	ldi	r20, 0x10	; 16
    74b8:	44 1a       	sub	r4, r20
    74ba:	51 08       	sbc	r5, r1
    74bc:	61 08       	sbc	r6, r1
    74be:	71 08       	sbc	r7, r1
    74c0:	a8 e1       	ldi	r26, 0x18	; 24
    74c2:	b0 e0       	ldi	r27, 0x00	; 0
    74c4:	a3 01       	movw	r20, r6
    74c6:	92 01       	movw	r18, r4
    74c8:	0e 94 0e e5 	call	0x1ca1c	; 0x1ca1c <__muluhisi3>
    74cc:	01 2e       	mov	r0, r17
    74ce:	00 0c       	add	r0, r0
    74d0:	22 0b       	sbc	r18, r18
    74d2:	33 0b       	sbc	r19, r19
    74d4:	a9 01       	movw	r20, r18
    74d6:	98 01       	movw	r18, r16
    74d8:	26 0f       	add	r18, r22
    74da:	37 1f       	adc	r19, r23
    74dc:	48 1f       	adc	r20, r24
    74de:	59 1f       	adc	r21, r25
    74e0:	ac e3       	ldi	r26, 0x3C	; 60
    74e2:	b0 e0       	ldi	r27, 0x00	; 0
    74e4:	0e 94 0e e5 	call	0x1ca1c	; 0x1ca1c <__muluhisi3>
    74e8:	81 01       	movw	r16, r2
    74ea:	03 2c       	mov	r0, r3
    74ec:	00 0c       	add	r0, r0
    74ee:	22 0b       	sbc	r18, r18
    74f0:	33 0b       	sbc	r19, r19
    74f2:	a9 01       	movw	r20, r18
    74f4:	98 01       	movw	r18, r16
    74f6:	26 0f       	add	r18, r22
    74f8:	37 1f       	adc	r19, r23
    74fa:	48 1f       	adc	r20, r24
    74fc:	59 1f       	adc	r21, r25
    74fe:	0e 94 0e e5 	call	0x1ca1c	; 0x1ca1c <__muluhisi3>
    7502:	ed 81       	ldd	r30, Y+5	; 0x05
    7504:	fe 81       	ldd	r31, Y+6	; 0x06
    7506:	8f 01       	movw	r16, r30
    7508:	ff 0f       	add	r31, r31
    750a:	22 0b       	sbc	r18, r18
    750c:	33 0b       	sbc	r19, r19
    750e:	48 01       	movw	r8, r16
    7510:	59 01       	movw	r10, r18
    7512:	86 0e       	add	r8, r22
    7514:	97 1e       	adc	r9, r23
    7516:	a8 1e       	adc	r10, r24
    7518:	b9 1e       	adc	r11, r25
    751a:	04 c0       	rjmp	.+8      	; 0x7524 <normalize+0x320>
    751c:	88 24       	eor	r8, r8
    751e:	8a 94       	dec	r8
    7520:	98 2c       	mov	r9, r8
    7522:	54 01       	movw	r10, r8
    7524:	49 85       	ldd	r20, Y+9	; 0x09
    7526:	5a 85       	ldd	r21, Y+10	; 0x0a
    7528:	45 2b       	or	r20, r21
    752a:	e9 f0       	breq	.+58     	; 0x7566 <normalize+0x362>
    752c:	ce 01       	movw	r24, r28
    752e:	01 96       	adiw	r24, 0x01	; 1
    7530:	7c dd       	rcall	.-1288   	; 0x702a <gettimezone>
    7532:	a9 81       	ldd	r26, Y+1	; 0x01
    7534:	ba 81       	ldd	r27, Y+2	; 0x02
    7536:	2c e3       	ldi	r18, 0x3C	; 60
    7538:	30 e0       	ldi	r19, 0x00	; 0
    753a:	0e 94 08 e5 	call	0x1ca10	; 0x1ca10 <__usmulhisi3>
    753e:	2b 01       	movw	r4, r22
    7540:	3c 01       	movw	r6, r24
    7542:	c5 01       	movw	r24, r10
    7544:	b4 01       	movw	r22, r8
    7546:	e2 dd       	rcall	.-1084   	; 0x710c <is_dst>
    7548:	89 2b       	or	r24, r25
    754a:	51 f0       	breq	.+20     	; 0x7560 <normalize+0x35c>
    754c:	50 e1       	ldi	r21, 0x10	; 16
    754e:	45 1a       	sub	r4, r21
    7550:	5e e0       	ldi	r21, 0x0E	; 14
    7552:	55 0a       	sbc	r5, r21
    7554:	61 08       	sbc	r6, r1
    7556:	71 08       	sbc	r7, r1
    7558:	cc 24       	eor	r12, r12
    755a:	c3 94       	inc	r12
    755c:	d1 2c       	mov	r13, r1
    755e:	08 c0       	rjmp	.+16     	; 0x7570 <normalize+0x36c>
    7560:	c1 2c       	mov	r12, r1
    7562:	d1 2c       	mov	r13, r1
    7564:	05 c0       	rjmp	.+10     	; 0x7570 <normalize+0x36c>
    7566:	c1 2c       	mov	r12, r1
    7568:	d1 2c       	mov	r13, r1
    756a:	41 2c       	mov	r4, r1
    756c:	51 2c       	mov	r5, r1
    756e:	32 01       	movw	r6, r4
    7570:	87 01       	movw	r16, r14
    7572:	a3 01       	movw	r20, r6
    7574:	92 01       	movw	r18, r4
    7576:	c5 01       	movw	r24, r10
    7578:	b4 01       	movw	r22, r8
    757a:	59 dc       	rcall	.-1870   	; 0x6e2e <time_to_tm>
    757c:	c1 14       	cp	r12, r1
    757e:	d1 04       	cpc	r13, r1
    7580:	29 f0       	breq	.+10     	; 0x758c <normalize+0x388>
    7582:	21 e0       	ldi	r18, 0x01	; 1
    7584:	30 e0       	ldi	r19, 0x00	; 0
    7586:	f7 01       	movw	r30, r14
    7588:	31 8b       	std	Z+17, r19	; 0x11
    758a:	20 8b       	std	Z+16, r18	; 0x10
    758c:	2a 96       	adiw	r28, 0x0a	; 10
    758e:	e2 e1       	ldi	r30, 0x12	; 18
    7590:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

00007594 <timegm>:
    7594:	60 e0       	ldi	r22, 0x00	; 0
    7596:	70 e0       	ldi	r23, 0x00	; 0
    7598:	35 ce       	rjmp	.-918    	; 0x7204 <normalize>
    759a:	08 95       	ret

0000759c <setdate_r>:
    759c:	cf 92       	push	r12
    759e:	df 92       	push	r13
    75a0:	ef 92       	push	r14
    75a2:	ff 92       	push	r15
    75a4:	cf 93       	push	r28
    75a6:	df 93       	push	r29
    75a8:	cd b7       	in	r28, 0x3d	; 61
    75aa:	de b7       	in	r29, 0x3e	; 62
    75ac:	a0 97       	sbiw	r28, 0x20	; 32
    75ae:	0f b6       	in	r0, 0x3f	; 63
    75b0:	f8 94       	cli
    75b2:	de bf       	out	0x3e, r29	; 62
    75b4:	0f be       	out	0x3f, r0	; 63
    75b6:	cd bf       	out	0x3d, r28	; 61
    75b8:	98 a3       	std	Y+32, r25	; 0x20
    75ba:	8f 8f       	std	Y+31, r24	; 0x1f
    75bc:	1a 82       	std	Y+2, r1	; 0x02
    75be:	19 82       	std	Y+1, r1	; 0x01
    75c0:	1c 82       	std	Y+4, r1	; 0x04
    75c2:	1b 82       	std	Y+3, r1	; 0x03
    75c4:	1e 82       	std	Y+6, r1	; 0x06
    75c6:	1d 82       	std	Y+5, r1	; 0x05
    75c8:	18 86       	std	Y+8, r1	; 0x08
    75ca:	1f 82       	std	Y+7, r1	; 0x07
    75cc:	1a 86       	std	Y+10, r1	; 0x0a
    75ce:	19 86       	std	Y+9, r1	; 0x09
    75d0:	1c 86       	std	Y+12, r1	; 0x0c
    75d2:	1b 86       	std	Y+11, r1	; 0x0b
    75d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    75d6:	98 a1       	ldd	r25, Y+32	; 0x20
    75d8:	fc 01       	movw	r30, r24
    75da:	20 81       	ld	r18, Z
    75dc:	20 32       	cpi	r18, 0x20	; 32
    75de:	21 f4       	brne	.+8      	; 0x75e8 <setdate_r+0x4c>
    75e0:	01 96       	adiw	r24, 0x01	; 1
    75e2:	98 a3       	std	Y+32, r25	; 0x20
    75e4:	8f 8f       	std	Y+31, r24	; 0x1f
    75e6:	f6 cf       	rjmp	.-20     	; 0x75d4 <setdate_r+0x38>
    75e8:	4a e0       	ldi	r20, 0x0A	; 10
    75ea:	50 e0       	ldi	r21, 0x00	; 0
    75ec:	be 01       	movw	r22, r28
    75ee:	61 5e       	subi	r22, 0xE1	; 225
    75f0:	7f 4f       	sbci	r23, 0xFF	; 255
    75f2:	0e 94 e4 46 	call	0x8dc8	; 0x8dc8 <strtol>
    75f6:	7c 87       	std	Y+12, r23	; 0x0c
    75f8:	6b 87       	std	Y+11, r22	; 0x0b
    75fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    75fc:	98 a1       	ldd	r25, Y+32	; 0x20
    75fe:	fc 01       	movw	r30, r24
    7600:	20 81       	ld	r18, Z
    7602:	20 32       	cpi	r18, 0x20	; 32
    7604:	21 f4       	brne	.+8      	; 0x760e <setdate_r+0x72>
    7606:	01 96       	adiw	r24, 0x01	; 1
    7608:	98 a3       	std	Y+32, r25	; 0x20
    760a:	8f 8f       	std	Y+31, r24	; 0x1f
    760c:	f6 cf       	rjmp	.-20     	; 0x75fa <setdate_r+0x5e>
    760e:	4a e0       	ldi	r20, 0x0A	; 10
    7610:	50 e0       	ldi	r21, 0x00	; 0
    7612:	be 01       	movw	r22, r28
    7614:	61 5e       	subi	r22, 0xE1	; 225
    7616:	7f 4f       	sbci	r23, 0xFF	; 255
    7618:	0e 94 e4 46 	call	0x8dc8	; 0x8dc8 <strtol>
    761c:	7a 87       	std	Y+10, r23	; 0x0a
    761e:	69 87       	std	Y+9, r22	; 0x09
    7620:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7622:	98 a1       	ldd	r25, Y+32	; 0x20
    7624:	fc 01       	movw	r30, r24
    7626:	20 81       	ld	r18, Z
    7628:	20 32       	cpi	r18, 0x20	; 32
    762a:	21 f4       	brne	.+8      	; 0x7634 <setdate_r+0x98>
    762c:	01 96       	adiw	r24, 0x01	; 1
    762e:	98 a3       	std	Y+32, r25	; 0x20
    7630:	8f 8f       	std	Y+31, r24	; 0x1f
    7632:	f6 cf       	rjmp	.-20     	; 0x7620 <setdate_r+0x84>
    7634:	4a e0       	ldi	r20, 0x0A	; 10
    7636:	50 e0       	ldi	r21, 0x00	; 0
    7638:	be 01       	movw	r22, r28
    763a:	61 5e       	subi	r22, 0xE1	; 225
    763c:	7f 4f       	sbci	r23, 0xFF	; 255
    763e:	0e 94 e4 46 	call	0x8dc8	; 0x8dc8 <strtol>
    7642:	78 87       	std	Y+8, r23	; 0x08
    7644:	6f 83       	std	Y+7, r22	; 0x07
    7646:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7648:	98 a1       	ldd	r25, Y+32	; 0x20
    764a:	fc 01       	movw	r30, r24
    764c:	20 81       	ld	r18, Z
    764e:	20 32       	cpi	r18, 0x20	; 32
    7650:	21 f4       	brne	.+8      	; 0x765a <setdate_r+0xbe>
    7652:	01 96       	adiw	r24, 0x01	; 1
    7654:	98 a3       	std	Y+32, r25	; 0x20
    7656:	8f 8f       	std	Y+31, r24	; 0x1f
    7658:	f6 cf       	rjmp	.-20     	; 0x7646 <setdate_r+0xaa>
    765a:	4a e0       	ldi	r20, 0x0A	; 10
    765c:	50 e0       	ldi	r21, 0x00	; 0
    765e:	be 01       	movw	r22, r28
    7660:	61 5e       	subi	r22, 0xE1	; 225
    7662:	7f 4f       	sbci	r23, 0xFF	; 255
    7664:	0e 94 e4 46 	call	0x8dc8	; 0x8dc8 <strtol>
    7668:	7e 83       	std	Y+6, r23	; 0x06
    766a:	6d 83       	std	Y+5, r22	; 0x05
    766c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    766e:	f8 a1       	ldd	r31, Y+32	; 0x20
    7670:	80 81       	ld	r24, Z
    7672:	88 23       	and	r24, r24
    7674:	39 f0       	breq	.+14     	; 0x7684 <setdate_r+0xe8>
    7676:	80 32       	cpi	r24, 0x20	; 32
    7678:	11 f0       	breq	.+4      	; 0x767e <setdate_r+0xe2>
    767a:	8a 33       	cpi	r24, 0x3A	; 58
    767c:	19 f4       	brne	.+6      	; 0x7684 <setdate_r+0xe8>
    767e:	31 96       	adiw	r30, 0x01	; 1
    7680:	f8 a3       	std	Y+32, r31	; 0x20
    7682:	ef 8f       	std	Y+31, r30	; 0x1f
    7684:	4a e0       	ldi	r20, 0x0A	; 10
    7686:	50 e0       	ldi	r21, 0x00	; 0
    7688:	be 01       	movw	r22, r28
    768a:	61 5e       	subi	r22, 0xE1	; 225
    768c:	7f 4f       	sbci	r23, 0xFF	; 255
    768e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7690:	98 a1       	ldd	r25, Y+32	; 0x20
    7692:	0e 94 e4 46 	call	0x8dc8	; 0x8dc8 <strtol>
    7696:	7c 83       	std	Y+4, r23	; 0x04
    7698:	6b 83       	std	Y+3, r22	; 0x03
    769a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    769c:	f8 a1       	ldd	r31, Y+32	; 0x20
    769e:	80 81       	ld	r24, Z
    76a0:	88 23       	and	r24, r24
    76a2:	39 f0       	breq	.+14     	; 0x76b2 <setdate_r+0x116>
    76a4:	80 32       	cpi	r24, 0x20	; 32
    76a6:	11 f0       	breq	.+4      	; 0x76ac <setdate_r+0x110>
    76a8:	8a 33       	cpi	r24, 0x3A	; 58
    76aa:	19 f4       	brne	.+6      	; 0x76b2 <setdate_r+0x116>
    76ac:	31 96       	adiw	r30, 0x01	; 1
    76ae:	f8 a3       	std	Y+32, r31	; 0x20
    76b0:	ef 8f       	std	Y+31, r30	; 0x1f
    76b2:	4a e0       	ldi	r20, 0x0A	; 10
    76b4:	50 e0       	ldi	r21, 0x00	; 0
    76b6:	be 01       	movw	r22, r28
    76b8:	61 5e       	subi	r22, 0xE1	; 225
    76ba:	7f 4f       	sbci	r23, 0xFF	; 255
    76bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    76be:	98 a1       	ldd	r25, Y+32	; 0x20
    76c0:	0e 94 e4 46 	call	0x8dc8	; 0x8dc8 <strtol>
    76c4:	7a 83       	std	Y+2, r23	; 0x02
    76c6:	69 83       	std	Y+1, r22	; 0x01
    76c8:	29 85       	ldd	r18, Y+9	; 0x09
    76ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    76cc:	21 50       	subi	r18, 0x01	; 1
    76ce:	31 09       	sbc	r19, r1
    76d0:	3a 87       	std	Y+10, r19	; 0x0a
    76d2:	29 87       	std	Y+9, r18	; 0x09
    76d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    76d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    76d8:	ac 01       	movw	r20, r24
    76da:	42 5b       	subi	r20, 0xB2	; 178
    76dc:	57 40       	sbci	r21, 0x07	; 7
    76de:	45 34       	cpi	r20, 0x45	; 69
    76e0:	51 05       	cpc	r21, r1
    76e2:	28 f0       	brcs	.+10     	; 0x76ee <setdate_r+0x152>
    76e4:	9f 93       	push	r25
    76e6:	8f 93       	push	r24
    76e8:	82 e7       	ldi	r24, 0x72	; 114
    76ea:	97 e0       	ldi	r25, 0x07	; 7
    76ec:	2c c0       	rjmp	.+88     	; 0x7746 <setdate_r+0x1aa>
    76ee:	8c 56       	subi	r24, 0x6C	; 108
    76f0:	97 40       	sbci	r25, 0x07	; 7
    76f2:	9c 87       	std	Y+12, r25	; 0x0c
    76f4:	8b 87       	std	Y+11, r24	; 0x0b
    76f6:	2c 30       	cpi	r18, 0x0C	; 12
    76f8:	31 05       	cpc	r19, r1
    76fa:	28 f0       	brcs	.+10     	; 0x7706 <setdate_r+0x16a>
    76fc:	9f 93       	push	r25
    76fe:	8f 93       	push	r24
    7700:	81 e6       	ldi	r24, 0x61	; 97
    7702:	97 e0       	ldi	r25, 0x07	; 7
    7704:	20 c0       	rjmp	.+64     	; 0x7746 <setdate_r+0x1aa>
    7706:	8f 81       	ldd	r24, Y+7	; 0x07
    7708:	98 85       	ldd	r25, Y+8	; 0x08
    770a:	9c 01       	movw	r18, r24
    770c:	21 50       	subi	r18, 0x01	; 1
    770e:	31 09       	sbc	r19, r1
    7710:	2f 31       	cpi	r18, 0x1F	; 31
    7712:	31 05       	cpc	r19, r1
    7714:	28 f0       	brcs	.+10     	; 0x7720 <setdate_r+0x184>
    7716:	9f 93       	push	r25
    7718:	8f 93       	push	r24
    771a:	80 e5       	ldi	r24, 0x50	; 80
    771c:	97 e0       	ldi	r25, 0x07	; 7
    771e:	13 c0       	rjmp	.+38     	; 0x7746 <setdate_r+0x1aa>
    7720:	8d 81       	ldd	r24, Y+5	; 0x05
    7722:	9e 81       	ldd	r25, Y+6	; 0x06
    7724:	88 31       	cpi	r24, 0x18	; 24
    7726:	91 05       	cpc	r25, r1
    7728:	28 f0       	brcs	.+10     	; 0x7734 <setdate_r+0x198>
    772a:	9f 93       	push	r25
    772c:	8f 93       	push	r24
    772e:	8e e3       	ldi	r24, 0x3E	; 62
    7730:	97 e0       	ldi	r25, 0x07	; 7
    7732:	09 c0       	rjmp	.+18     	; 0x7746 <setdate_r+0x1aa>
    7734:	8b 81       	ldd	r24, Y+3	; 0x03
    7736:	9c 81       	ldd	r25, Y+4	; 0x04
    7738:	8c 33       	cpi	r24, 0x3C	; 60
    773a:	91 05       	cpc	r25, r1
    773c:	78 f0       	brcs	.+30     	; 0x775c <setdate_r+0x1c0>
    773e:	9f 93       	push	r25
    7740:	8f 93       	push	r24
    7742:	8d e2       	ldi	r24, 0x2D	; 45
    7744:	97 e0       	ldi	r25, 0x07	; 7
    7746:	1f 92       	push	r1
    7748:	9f 93       	push	r25
    774a:	8f 93       	push	r24
    774c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    7750:	0f 90       	pop	r0
    7752:	0f 90       	pop	r0
    7754:	0f 90       	pop	r0
    7756:	0f 90       	pop	r0
    7758:	0f 90       	pop	r0
    775a:	25 c0       	rjmp	.+74     	; 0x77a6 <setdate_r+0x20a>
    775c:	ce 01       	movw	r24, r28
    775e:	01 96       	adiw	r24, 0x01	; 1
    7760:	19 df       	rcall	.-462    	; 0x7594 <timegm>
    7762:	6b 01       	movw	r12, r22
    7764:	7c 01       	movw	r14, r24
    7766:	6f 8b       	std	Y+23, r22	; 0x17
    7768:	78 8f       	std	Y+24, r23	; 0x18
    776a:	89 8f       	std	Y+25, r24	; 0x19
    776c:	9a 8f       	std	Y+26, r25	; 0x1a
    776e:	1b 8e       	std	Y+27, r1	; 0x1b
    7770:	1c 8e       	std	Y+28, r1	; 0x1c
    7772:	1d 8e       	std	Y+29, r1	; 0x1d
    7774:	1e 8e       	std	Y+30, r1	; 0x1e
    7776:	be 01       	movw	r22, r28
    7778:	69 5e       	subi	r22, 0xE9	; 233
    777a:	7f 4f       	sbci	r23, 0xFF	; 255
    777c:	80 e0       	ldi	r24, 0x00	; 0
    777e:	90 e0       	ldi	r25, 0x00	; 0
    7780:	08 db       	rcall	.-2544   	; 0x6d92 <clock_settime>
    7782:	b7 01       	movw	r22, r14
    7784:	a6 01       	movw	r20, r12
    7786:	81 e0       	ldi	r24, 0x01	; 1
    7788:	90 e0       	ldi	r25, 0x00	; 0
    778a:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <rtc_init>
    778e:	81 11       	cpse	r24, r1
    7790:	0d c0       	rjmp	.+26     	; 0x77ac <setdate_r+0x210>
    7792:	86 e1       	ldi	r24, 0x16	; 22
    7794:	97 e0       	ldi	r25, 0x07	; 7
    7796:	1f 92       	push	r1
    7798:	9f 93       	push	r25
    779a:	8f 93       	push	r24
    779c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    77a0:	0f 90       	pop	r0
    77a2:	0f 90       	pop	r0
    77a4:	0f 90       	pop	r0
    77a6:	8f ef       	ldi	r24, 0xFF	; 255
    77a8:	9f ef       	ldi	r25, 0xFF	; 255
    77aa:	02 c0       	rjmp	.+4      	; 0x77b0 <setdate_r+0x214>
    77ac:	80 e0       	ldi	r24, 0x00	; 0
    77ae:	90 e0       	ldi	r25, 0x00	; 0
    77b0:	a0 96       	adiw	r28, 0x20	; 32
    77b2:	0f b6       	in	r0, 0x3f	; 63
    77b4:	f8 94       	cli
    77b6:	de bf       	out	0x3e, r29	; 62
    77b8:	0f be       	out	0x3f, r0	; 63
    77ba:	cd bf       	out	0x3d, r28	; 61
    77bc:	df 91       	pop	r29
    77be:	cf 91       	pop	r28
    77c0:	ff 90       	pop	r15
    77c2:	ef 90       	pop	r14
    77c4:	df 90       	pop	r13
    77c6:	cf 90       	pop	r12
    77c8:	08 95       	ret

000077ca <setdate>:
    77ca:	a8 e2       	ldi	r26, 0x28	; 40
    77cc:	b0 e0       	ldi	r27, 0x00	; 0
    77ce:	eb ee       	ldi	r30, 0xEB	; 235
    77d0:	fb e3       	ldi	r31, 0x3B	; 59
    77d2:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    77d6:	84 e8       	ldi	r24, 0x84	; 132
    77d8:	97 e0       	ldi	r25, 0x07	; 7
    77da:	1f 92       	push	r1
    77dc:	9f 93       	push	r25
    77de:	8f 93       	push	r24
    77e0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    77e4:	40 91 b7 1b 	lds	r20, 0x1BB7	; 0x801bb7 <__iob>
    77e8:	50 91 b8 1b 	lds	r21, 0x1BB8	; 0x801bb8 <__iob+0x1>
    77ec:	67 e2       	ldi	r22, 0x27	; 39
    77ee:	70 e0       	ldi	r23, 0x00	; 0
    77f0:	ce 01       	movw	r24, r28
    77f2:	01 96       	adiw	r24, 0x01	; 1
    77f4:	0e 94 bf 76 	call	0xed7e	; 0xed7e <fgets>
    77f8:	ce 01       	movw	r24, r28
    77fa:	01 96       	adiw	r24, 0x01	; 1
    77fc:	cf de       	rcall	.-610    	; 0x759c <setdate_r>
    77fe:	0f 90       	pop	r0
    7800:	0f 90       	pop	r0
    7802:	0f 90       	pop	r0
    7804:	a8 96       	adiw	r28, 0x28	; 40
    7806:	e2 e0       	ldi	r30, 0x02	; 2
    7808:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

0000780c <find_dst>:
    780c:	a8 e2       	ldi	r26, 0x28	; 40
    780e:	b0 e0       	ldi	r27, 0x00	; 0
    7810:	ec e0       	ldi	r30, 0x0C	; 12
    7812:	fc e3       	ldi	r31, 0x3C	; 60
    7814:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    7818:	3c 01       	movw	r6, r24
    781a:	1a 01       	movw	r2, r20
    781c:	2b 01       	movw	r4, r22
    781e:	49 01       	movw	r8, r18
    7820:	1c a3       	std	Y+36, r17	; 0x24
    7822:	0b a3       	std	Y+35, r16	; 0x23
    7824:	de a2       	std	Y+38, r13	; 0x26
    7826:	cd a2       	std	Y+37, r12	; 0x25
    7828:	b8 a6       	std	Y+40, r11	; 0x28
    782a:	af a2       	std	Y+39, r10	; 0x27
    782c:	be 01       	movw	r22, r28
    782e:	61 5e       	subi	r22, 0xE1	; 225
    7830:	7f 4f       	sbci	r23, 0xFF	; 255
    7832:	ce 01       	movw	r24, r28
    7834:	47 96       	adiw	r24, 0x17	; 23
    7836:	1b dc       	rcall	.-1994   	; 0x706e <gettimeofday>
    7838:	af 8d       	ldd	r26, Y+31	; 0x1f
    783a:	b8 a1       	ldd	r27, Y+32	; 0x20
    783c:	2c e3       	ldi	r18, 0x3C	; 60
    783e:	30 e0       	ldi	r19, 0x00	; 0
    7840:	0e 94 08 e5 	call	0x1ca10	; 0x1ca10 <__usmulhisi3>
    7844:	5b 01       	movw	r10, r22
    7846:	6c 01       	movw	r12, r24
    7848:	61 14       	cp	r6, r1
    784a:	71 04       	cpc	r7, r1
    784c:	31 f0       	breq	.+12     	; 0x785a <find_dst+0x4e>
    784e:	20 e1       	ldi	r18, 0x10	; 16
    7850:	a2 1a       	sub	r10, r18
    7852:	2e e0       	ldi	r18, 0x0E	; 14
    7854:	b2 0a       	sbc	r11, r18
    7856:	c1 08       	sbc	r12, r1
    7858:	d1 08       	sbc	r13, r1
    785a:	81 14       	cp	r8, r1
    785c:	91 04       	cpc	r9, r1
    785e:	39 f0       	breq	.+14     	; 0x786e <find_dst+0x62>
    7860:	4c e6       	ldi	r20, 0x6C	; 108
    7862:	84 1a       	sub	r8, r20
    7864:	47 e0       	ldi	r20, 0x07	; 7
    7866:	94 0a       	sbc	r9, r20
    7868:	9c 86       	std	Y+12, r9	; 0x0c
    786a:	8b 86       	std	Y+11, r8	; 0x0b
    786c:	11 c0       	rjmp	.+34     	; 0x7890 <find_dst+0x84>
    786e:	21 14       	cp	r2, r1
    7870:	31 04       	cpc	r3, r1
    7872:	41 04       	cpc	r4, r1
    7874:	51 04       	cpc	r5, r1
    7876:	21 f4       	brne	.+8      	; 0x7880 <find_dst+0x74>
    7878:	2f 88       	ldd	r2, Y+23	; 0x17
    787a:	38 8c       	ldd	r3, Y+24	; 0x18
    787c:	49 8c       	ldd	r4, Y+25	; 0x19
    787e:	5a 8c       	ldd	r5, Y+26	; 0x1a
    7880:	8e 01       	movw	r16, r28
    7882:	0f 5f       	subi	r16, 0xFF	; 255
    7884:	1f 4f       	sbci	r17, 0xFF	; 255
    7886:	a6 01       	movw	r20, r12
    7888:	95 01       	movw	r18, r10
    788a:	c2 01       	movw	r24, r4
    788c:	b1 01       	movw	r22, r2
    788e:	cf da       	rcall	.-2658   	; 0x6e2e <time_to_tm>
    7890:	8b a1       	ldd	r24, Y+35	; 0x23
    7892:	9c a1       	ldd	r25, Y+36	; 0x24
    7894:	01 97       	sbiw	r24, 0x01	; 1
    7896:	9a 87       	std	Y+10, r25	; 0x0a
    7898:	89 87       	std	Y+9, r24	; 0x09
    789a:	81 e0       	ldi	r24, 0x01	; 1
    789c:	90 e0       	ldi	r25, 0x00	; 0
    789e:	98 87       	std	Y+8, r25	; 0x08
    78a0:	8f 83       	std	Y+7, r24	; 0x07
    78a2:	8f a1       	ldd	r24, Y+39	; 0x27
    78a4:	98 a5       	ldd	r25, Y+40	; 0x28
    78a6:	9e 83       	std	Y+6, r25	; 0x06
    78a8:	8d 83       	std	Y+5, r24	; 0x05
    78aa:	1c 82       	std	Y+4, r1	; 0x04
    78ac:	1b 82       	std	Y+3, r1	; 0x03
    78ae:	1a 82       	std	Y+2, r1	; 0x02
    78b0:	19 82       	std	Y+1, r1	; 0x01
    78b2:	ce 01       	movw	r24, r28
    78b4:	01 96       	adiw	r24, 0x01	; 1
    78b6:	6e de       	rcall	.-804    	; 0x7594 <timegm>
    78b8:	45 01       	movw	r8, r10
    78ba:	56 01       	movw	r10, r12
    78bc:	86 0e       	add	r8, r22
    78be:	97 1e       	adc	r9, r23
    78c0:	a8 1e       	adc	r10, r24
    78c2:	b9 1e       	adc	r11, r25
    78c4:	8e 01       	movw	r16, r28
    78c6:	0f 5f       	subi	r16, 0xFF	; 255
    78c8:	1f 4f       	sbci	r17, 0xFF	; 255
    78ca:	20 e0       	ldi	r18, 0x00	; 0
    78cc:	30 e0       	ldi	r19, 0x00	; 0
    78ce:	a9 01       	movw	r20, r18
    78d0:	c5 01       	movw	r24, r10
    78d2:	b4 01       	movw	r22, r8
    78d4:	ac da       	rcall	.-2728   	; 0x6e2e <time_to_tm>
    78d6:	2d 85       	ldd	r18, Y+13	; 0x0d
    78d8:	3e 85       	ldd	r19, Y+14	; 0x0e
    78da:	e7 e0       	ldi	r30, 0x07	; 7
    78dc:	f0 e0       	ldi	r31, 0x00	; 0
    78de:	c9 01       	movw	r24, r18
    78e0:	bf 01       	movw	r22, r30
    78e2:	0e 94 99 e4 	call	0x1c932	; 0x1c932 <__divmodhi4>
    78e6:	4d a1       	ldd	r20, Y+37	; 0x25
    78e8:	5e a1       	ldd	r21, Y+38	; 0x26
    78ea:	48 17       	cp	r20, r24
    78ec:	59 07       	cpc	r21, r25
    78ee:	21 f4       	brne	.+8      	; 0x78f8 <find_dst+0xec>
    78f0:	51 e0       	ldi	r21, 0x01	; 1
    78f2:	e5 1a       	sub	r14, r21
    78f4:	f1 08       	sbc	r15, r1
    78f6:	51 f0       	breq	.+20     	; 0x790c <find_dst+0x100>
    78f8:	80 e8       	ldi	r24, 0x80	; 128
    78fa:	88 0e       	add	r8, r24
    78fc:	81 e5       	ldi	r24, 0x51	; 81
    78fe:	98 1e       	adc	r9, r24
    7900:	81 e0       	ldi	r24, 0x01	; 1
    7902:	a8 1e       	adc	r10, r24
    7904:	b1 1c       	adc	r11, r1
    7906:	2f 5f       	subi	r18, 0xFF	; 255
    7908:	3f 4f       	sbci	r19, 0xFF	; 255
    790a:	e9 cf       	rjmp	.-46     	; 0x78de <find_dst+0xd2>
    790c:	c5 01       	movw	r24, r10
    790e:	b4 01       	movw	r22, r8
    7910:	a8 96       	adiw	r28, 0x28	; 40
    7912:	e2 e1       	ldi	r30, 0x12	; 18
    7914:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

00007918 <set_dst>:
    7918:	4f 92       	push	r4
    791a:	5f 92       	push	r5
    791c:	6f 92       	push	r6
    791e:	7f 92       	push	r7
    7920:	af 92       	push	r10
    7922:	bf 92       	push	r11
    7924:	cf 92       	push	r12
    7926:	df 92       	push	r13
    7928:	ef 92       	push	r14
    792a:	ff 92       	push	r15
    792c:	0f 93       	push	r16
    792e:	1f 93       	push	r17
    7930:	cf 93       	push	r28
    7932:	df 93       	push	r29
    7934:	cd b7       	in	r28, 0x3d	; 61
    7936:	de b7       	in	r29, 0x3e	; 62
    7938:	2c 97       	sbiw	r28, 0x0c	; 12
    793a:	0f b6       	in	r0, 0x3f	; 63
    793c:	f8 94       	cli
    793e:	de bf       	out	0x3e, r29	; 62
    7940:	0f be       	out	0x3f, r0	; 63
    7942:	cd bf       	out	0x3d, r28	; 61
    7944:	2b 01       	movw	r4, r22
    7946:	3c 01       	movw	r6, r24
    7948:	67 2b       	or	r22, r23
    794a:	68 2b       	or	r22, r24
    794c:	69 2b       	or	r22, r25
    794e:	51 f4       	brne	.+20     	; 0x7964 <set_dst+0x4c>
    7950:	be 01       	movw	r22, r28
    7952:	67 5f       	subi	r22, 0xF7	; 247
    7954:	7f 4f       	sbci	r23, 0xFF	; 255
    7956:	ce 01       	movw	r24, r28
    7958:	01 96       	adiw	r24, 0x01	; 1
    795a:	89 db       	rcall	.-2286   	; 0x706e <gettimeofday>
    795c:	49 80       	ldd	r4, Y+1	; 0x01
    795e:	5a 80       	ldd	r5, Y+2	; 0x02
    7960:	6b 80       	ldd	r6, Y+3	; 0x03
    7962:	7c 80       	ldd	r7, Y+4	; 0x04
    7964:	80 91 6e 19 	lds	r24, 0x196E	; 0x80196e <dst+0x8>
    7968:	90 91 6f 19 	lds	r25, 0x196F	; 0x80196f <dst+0x9>
    796c:	a0 91 70 19 	lds	r26, 0x1970	; 0x801970 <dst+0xa>
    7970:	b0 91 71 19 	lds	r27, 0x1971	; 0x801971 <dst+0xb>
    7974:	84 15       	cp	r24, r4
    7976:	95 05       	cpc	r25, r5
    7978:	a6 05       	cpc	r26, r6
    797a:	b7 05       	cpc	r27, r7
    797c:	50 f0       	brcs	.+20     	; 0x7992 <set_dst+0x7a>
    797e:	84 19       	sub	r24, r4
    7980:	95 09       	sbc	r25, r5
    7982:	a6 09       	sbc	r26, r6
    7984:	b7 09       	sbc	r27, r7
    7986:	80 38       	cpi	r24, 0x80	; 128
    7988:	91 45       	sbci	r25, 0x51	; 81
    798a:	a1 40       	sbci	r26, 0x01	; 1
    798c:	b1 05       	cpc	r27, r1
    798e:	70 f4       	brcc	.+28     	; 0x79ac <set_dst+0x94>
    7990:	42 c0       	rjmp	.+132    	; 0x7a16 <set_dst+0xfe>
    7992:	a3 01       	movw	r20, r6
    7994:	92 01       	movw	r18, r4
    7996:	28 1b       	sub	r18, r24
    7998:	39 0b       	sbc	r19, r25
    799a:	4a 0b       	sbc	r20, r26
    799c:	5b 0b       	sbc	r21, r27
    799e:	da 01       	movw	r26, r20
    79a0:	c9 01       	movw	r24, r18
    79a2:	80 38       	cpi	r24, 0x80	; 128
    79a4:	91 45       	sbci	r25, 0x51	; 81
    79a6:	a1 40       	sbci	r26, 0x01	; 1
    79a8:	b1 05       	cpc	r27, r1
    79aa:	a8 f1       	brcs	.+106    	; 0x7a16 <set_dst+0xfe>
    79ac:	40 92 6e 19 	sts	0x196E, r4	; 0x80196e <dst+0x8>
    79b0:	50 92 6f 19 	sts	0x196F, r5	; 0x80196f <dst+0x9>
    79b4:	60 92 70 19 	sts	0x1970, r6	; 0x801970 <dst+0xa>
    79b8:	70 92 71 19 	sts	0x1971, r7	; 0x801971 <dst+0xb>
    79bc:	82 e0       	ldi	r24, 0x02	; 2
    79be:	a8 2e       	mov	r10, r24
    79c0:	b1 2c       	mov	r11, r1
    79c2:	c1 2c       	mov	r12, r1
    79c4:	d1 2c       	mov	r13, r1
    79c6:	92 e0       	ldi	r25, 0x02	; 2
    79c8:	e9 2e       	mov	r14, r25
    79ca:	f1 2c       	mov	r15, r1
    79cc:	03 e0       	ldi	r16, 0x03	; 3
    79ce:	10 e0       	ldi	r17, 0x00	; 0
    79d0:	20 e0       	ldi	r18, 0x00	; 0
    79d2:	30 e0       	ldi	r19, 0x00	; 0
    79d4:	b3 01       	movw	r22, r6
    79d6:	a2 01       	movw	r20, r4
    79d8:	80 e0       	ldi	r24, 0x00	; 0
    79da:	90 e0       	ldi	r25, 0x00	; 0
    79dc:	17 df       	rcall	.-466    	; 0x780c <find_dst>
    79de:	60 93 66 19 	sts	0x1966, r22	; 0x801966 <dst>
    79e2:	70 93 67 19 	sts	0x1967, r23	; 0x801967 <dst+0x1>
    79e6:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <dst+0x2>
    79ea:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <dst+0x3>
    79ee:	ee 24       	eor	r14, r14
    79f0:	e3 94       	inc	r14
    79f2:	f1 2c       	mov	r15, r1
    79f4:	0b e0       	ldi	r16, 0x0B	; 11
    79f6:	10 e0       	ldi	r17, 0x00	; 0
    79f8:	20 e0       	ldi	r18, 0x00	; 0
    79fa:	30 e0       	ldi	r19, 0x00	; 0
    79fc:	b3 01       	movw	r22, r6
    79fe:	a2 01       	movw	r20, r4
    7a00:	81 e0       	ldi	r24, 0x01	; 1
    7a02:	90 e0       	ldi	r25, 0x00	; 0
    7a04:	03 df       	rcall	.-506    	; 0x780c <find_dst>
    7a06:	60 93 6a 19 	sts	0x196A, r22	; 0x80196a <dst+0x4>
    7a0a:	70 93 6b 19 	sts	0x196B, r23	; 0x80196b <dst+0x5>
    7a0e:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <dst+0x6>
    7a12:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <dst+0x7>
    7a16:	2c 96       	adiw	r28, 0x0c	; 12
    7a18:	0f b6       	in	r0, 0x3f	; 63
    7a1a:	f8 94       	cli
    7a1c:	de bf       	out	0x3e, r29	; 62
    7a1e:	0f be       	out	0x3f, r0	; 63
    7a20:	cd bf       	out	0x3d, r28	; 61
    7a22:	df 91       	pop	r29
    7a24:	cf 91       	pop	r28
    7a26:	1f 91       	pop	r17
    7a28:	0f 91       	pop	r16
    7a2a:	ff 90       	pop	r15
    7a2c:	ef 90       	pop	r14
    7a2e:	df 90       	pop	r13
    7a30:	cf 90       	pop	r12
    7a32:	bf 90       	pop	r11
    7a34:	af 90       	pop	r10
    7a36:	7f 90       	pop	r7
    7a38:	6f 90       	pop	r6
    7a3a:	5f 90       	pop	r5
    7a3c:	4f 90       	pop	r4
    7a3e:	08 95       	ret

00007a40 <asctime_r>:
    7a40:	0f 93       	push	r16
    7a42:	1f 93       	push	r17
    7a44:	cf 93       	push	r28
    7a46:	df 93       	push	r29
    7a48:	ec 01       	movw	r28, r24
    7a4a:	8b 01       	movw	r16, r22
    7a4c:	60 e0       	ldi	r22, 0x00	; 0
    7a4e:	70 e0       	ldi	r23, 0x00	; 0
    7a50:	d9 db       	rcall	.-2126   	; 0x7204 <normalize>
    7a52:	20 e2       	ldi	r18, 0x20	; 32
    7a54:	d8 01       	movw	r26, r16
    7a56:	82 2f       	mov	r24, r18
    7a58:	1d 92       	st	X+, r1
    7a5a:	8a 95       	dec	r24
    7a5c:	e9 f7       	brne	.-6      	; 0x7a58 <asctime_r+0x18>
    7a5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7a60:	9b 85       	ldd	r25, Y+11	; 0x0b
    7a62:	84 59       	subi	r24, 0x94	; 148
    7a64:	98 4f       	sbci	r25, 0xF8	; 248
    7a66:	9f 93       	push	r25
    7a68:	8f 93       	push	r24
    7a6a:	89 81       	ldd	r24, Y+1	; 0x01
    7a6c:	8f 93       	push	r24
    7a6e:	88 81       	ld	r24, Y
    7a70:	8f 93       	push	r24
    7a72:	8b 81       	ldd	r24, Y+3	; 0x03
    7a74:	8f 93       	push	r24
    7a76:	8a 81       	ldd	r24, Y+2	; 0x02
    7a78:	8f 93       	push	r24
    7a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    7a7c:	8f 93       	push	r24
    7a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    7a80:	8f 93       	push	r24
    7a82:	8f 81       	ldd	r24, Y+7	; 0x07
    7a84:	8f 93       	push	r24
    7a86:	8e 81       	ldd	r24, Y+6	; 0x06
    7a88:	8f 93       	push	r24
    7a8a:	e8 85       	ldd	r30, Y+8	; 0x08
    7a8c:	f9 85       	ldd	r31, Y+9	; 0x09
    7a8e:	ee 0f       	add	r30, r30
    7a90:	ff 1f       	adc	r31, r31
    7a92:	ee 5e       	subi	r30, 0xEE	; 238
    7a94:	fe 4f       	sbci	r31, 0xFE	; 254
    7a96:	81 81       	ldd	r24, Z+1	; 0x01
    7a98:	8f 93       	push	r24
    7a9a:	80 81       	ld	r24, Z
    7a9c:	8f 93       	push	r24
    7a9e:	ec 85       	ldd	r30, Y+12	; 0x0c
    7aa0:	fd 85       	ldd	r31, Y+13	; 0x0d
    7aa2:	ee 0f       	add	r30, r30
    7aa4:	ff 1f       	adc	r31, r31
    7aa6:	e4 5d       	subi	r30, 0xD4	; 212
    7aa8:	fe 4f       	sbci	r31, 0xFE	; 254
    7aaa:	81 81       	ldd	r24, Z+1	; 0x01
    7aac:	8f 93       	push	r24
    7aae:	80 81       	ld	r24, Z
    7ab0:	8f 93       	push	r24
    7ab2:	85 ea       	ldi	r24, 0xA5	; 165
    7ab4:	97 e0       	ldi	r25, 0x07	; 7
    7ab6:	1f 92       	push	r1
    7ab8:	9f 93       	push	r25
    7aba:	8f 93       	push	r24
    7abc:	1f 92       	push	r1
    7abe:	2f 93       	push	r18
    7ac0:	1f 93       	push	r17
    7ac2:	0f 93       	push	r16
    7ac4:	0e 94 81 46 	call	0x8d02	; 0x8d02 <snprintf_P>
    7ac8:	ad b7       	in	r26, 0x3d	; 61
    7aca:	be b7       	in	r27, 0x3e	; 62
    7acc:	55 96       	adiw	r26, 0x15	; 21
    7ace:	0f b6       	in	r0, 0x3f	; 63
    7ad0:	f8 94       	cli
    7ad2:	be bf       	out	0x3e, r27	; 62
    7ad4:	0f be       	out	0x3f, r0	; 63
    7ad6:	ad bf       	out	0x3d, r26	; 61
    7ad8:	c8 01       	movw	r24, r16
    7ada:	df 91       	pop	r29
    7adc:	cf 91       	pop	r28
    7ade:	1f 91       	pop	r17
    7ae0:	0f 91       	pop	r16
    7ae2:	08 95       	ret

00007ae4 <asctime>:
    7ae4:	6e ee       	ldi	r22, 0xEE	; 238
    7ae6:	77 e1       	ldi	r23, 0x17	; 23
    7ae8:	ab cf       	rjmp	.-170    	; 0x7a40 <asctime_r>
    7aea:	08 95       	ret

00007aec <ctime_gm>:
    7aec:	a6 e1       	ldi	r26, 0x16	; 22
    7aee:	b0 e0       	ldi	r27, 0x00	; 0
    7af0:	ec e7       	ldi	r30, 0x7C	; 124
    7af2:	fd e3       	ldi	r31, 0x3D	; 61
    7af4:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    7af8:	be 01       	movw	r22, r28
    7afa:	6f 5f       	subi	r22, 0xFF	; 255
    7afc:	7f 4f       	sbci	r23, 0xFF	; 255
    7afe:	75 da       	rcall	.-2838   	; 0x6fea <gmtime_r>
    7b00:	6e ea       	ldi	r22, 0xAE	; 174
    7b02:	77 e1       	ldi	r23, 0x17	; 23
    7b04:	9d df       	rcall	.-198    	; 0x7a40 <asctime_r>
    7b06:	66 96       	adiw	r28, 0x16	; 22
    7b08:	e2 e0       	ldi	r30, 0x02	; 2
    7b0a:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

00007b0e <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7b0e:	a2 e2       	ldi	r26, 0x22	; 34
    7b10:	b0 e0       	ldi	r27, 0x00	; 0
    7b12:	ed e8       	ldi	r30, 0x8D	; 141
    7b14:	fd e3       	ldi	r31, 0x3D	; 61
    7b16:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    7b1a:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7b1c:	40 e0       	ldi	r20, 0x00	; 0
    7b1e:	50 e0       	ldi	r21, 0x00	; 0
    7b20:	ba 01       	movw	r22, r20
    7b22:	80 e0       	ldi	r24, 0x00	; 0
    7b24:	90 e0       	ldi	r25, 0x00	; 0
    7b26:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <rtc_init>
    7b2a:	81 11       	cpse	r24, r1
    7b2c:	27 c0       	rjmp	.+78     	; 0x7b7c <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7b2e:	80 ea       	ldi	r24, 0xA0	; 160
    7b30:	96 e0       	ldi	r25, 0x06	; 6
    7b32:	1f 92       	push	r1
    7b34:	9f 93       	push	r25
    7b36:	8f 93       	push	r24
    7b38:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        printf("attempting rtc init\n");
    7b3c:	8b e8       	ldi	r24, 0x8B	; 139
    7b3e:	96 e0       	ldi	r25, 0x06	; 6
    7b40:	1f 92       	push	r1
    7b42:	9f 93       	push	r25
    7b44:	8f 93       	push	r24
    7b46:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7b4a:	40 e0       	ldi	r20, 0x00	; 0
    7b4c:	50 e0       	ldi	r21, 0x00	; 0
    7b4e:	ba 01       	movw	r22, r20
    7b50:	81 e0       	ldi	r24, 0x01	; 1
    7b52:	90 e0       	ldi	r25, 0x00	; 0
    7b54:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <rtc_init>
    7b58:	0f 90       	pop	r0
    7b5a:	0f 90       	pop	r0
    7b5c:	0f 90       	pop	r0
    7b5e:	0f 90       	pop	r0
    7b60:	0f 90       	pop	r0
    7b62:	0f 90       	pop	r0
    7b64:	81 11       	cpse	r24, r1
    7b66:	0a c0       	rjmp	.+20     	; 0x7b7c <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7b68:	84 e7       	ldi	r24, 0x74	; 116
    7b6a:	96 e0       	ldi	r25, 0x06	; 6
    7b6c:	1f 92       	push	r1
    7b6e:	9f 93       	push	r25
    7b70:	8f 93       	push	r24
    7b72:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    7b76:	0f 90       	pop	r0
    7b78:	0f 90       	pop	r0
    7b7a:	0f 90       	pop	r0
        }
    }

    if(rtc_read(&tc))
    7b7c:	ce 01       	movw	r24, r28
    7b7e:	01 96       	adiw	r24, 0x01	; 1
    7b80:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <rtc_read>
    7b84:	88 23       	and	r24, r24
    7b86:	51 f0       	breq	.+20     	; 0x7b9c <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7b88:	ce 01       	movw	r24, r28
    7b8a:	01 96       	adiw	r24, 0x01	; 1
    7b8c:	03 dd       	rcall	.-1530   	; 0x7594 <timegm>
    7b8e:	6b 01       	movw	r12, r22
    7b90:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    7b92:	67 2b       	or	r22, r23
    7b94:	68 2b       	or	r22, r24
    7b96:	69 2b       	or	r22, r25
    7b98:	c1 f4       	brne	.+48     	; 0x7bca <initialize_clock+0xbc>
    7b9a:	0a c0       	rjmp	.+20     	; 0x7bb0 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7b9c:	8a e5       	ldi	r24, 0x5A	; 90
    7b9e:	96 e0       	ldi	r25, 0x06	; 6
    7ba0:	1f 92       	push	r1
    7ba2:	9f 93       	push	r25
    7ba4:	8f 93       	push	r24
    7ba6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    7baa:	0f 90       	pop	r0
    7bac:	0f 90       	pop	r0
    7bae:	0f 90       	pop	r0
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7bb0:	86 e3       	ldi	r24, 0x36	; 54
    7bb2:	96 e0       	ldi	r25, 0x06	; 6
    7bb4:	1f 92       	push	r1
    7bb6:	9f 93       	push	r25
    7bb8:	8f 93       	push	r24
    7bba:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    7bbe:	0f 90       	pop	r0
    7bc0:	0f 90       	pop	r0
    7bc2:	0f 90       	pop	r0
    7bc4:	c1 2c       	mov	r12, r1
    7bc6:	d1 2c       	mov	r13, r1
    7bc8:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7bca:	18 a3       	std	Y+32, r17	; 0x20
    7bcc:	0f 8f       	std	Y+31, r16	; 0x1f
    tz.tz_dsttime = 0;
    7bce:	1a a2       	std	Y+34, r1	; 0x22
    7bd0:	19 a2       	std	Y+33, r1	; 0x21
    settimezone( &tz );
    7bd2:	ce 01       	movw	r24, r28
    7bd4:	4f 96       	adiw	r24, 0x1f	; 31
    7bd6:	3a da       	rcall	.-2956   	; 0x704c <settimezone>

    ts.tv_sec = seconds;
    7bd8:	cf 8a       	std	Y+23, r12	; 0x17
    7bda:	d8 8e       	std	Y+24, r13	; 0x18
    7bdc:	e9 8e       	std	Y+25, r14	; 0x19
    7bde:	fa 8e       	std	Y+26, r15	; 0x1a
    ts.tv_nsec = 0L;
    7be0:	1b 8e       	std	Y+27, r1	; 0x1b
    7be2:	1c 8e       	std	Y+28, r1	; 0x1c
    7be4:	1d 8e       	std	Y+29, r1	; 0x1d
    7be6:	1e 8e       	std	Y+30, r1	; 0x1e
    clock_settime(0, (ts_t *) &ts);
    7be8:	be 01       	movw	r22, r28
    7bea:	69 5e       	subi	r22, 0xE9	; 233
    7bec:	7f 4f       	sbci	r23, 0xFF	; 255
    7bee:	80 e0       	ldi	r24, 0x00	; 0
    7bf0:	90 e0       	ldi	r25, 0x00	; 0
    7bf2:	cf d8       	rcall	.-3682   	; 0x6d92 <clock_settime>
}
    7bf4:	a2 96       	adiw	r28, 0x22	; 34
    7bf6:	e8 e0       	ldi	r30, 0x08	; 8
    7bf8:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

00007bfc <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7bfc:	a2 e2       	ldi	r26, 0x22	; 34
    7bfe:	b0 e0       	ldi	r27, 0x00	; 0
    7c00:	e4 e0       	ldi	r30, 0x04	; 4
    7c02:	fe e3       	ldi	r31, 0x3E	; 62
    7c04:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7c08:	ce 01       	movw	r24, r28
    7c0a:	01 96       	adiw	r24, 0x01	; 1
    7c0c:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <rtc_read>
    7c10:	88 23       	and	r24, r24
    7c12:	21 f1       	breq	.+72     	; 0x7c5c <display_clock+0x60>
    {
        seconds = timegm(&tc);
    7c14:	ce 01       	movw	r24, r28
    7c16:	01 96       	adiw	r24, 0x01	; 1
    7c18:	bd dc       	rcall	.-1670   	; 0x7594 <timegm>
    7c1a:	6f 8f       	std	Y+31, r22	; 0x1f
    7c1c:	78 a3       	std	Y+32, r23	; 0x20
    7c1e:	89 a3       	std	Y+33, r24	; 0x21
    7c20:	9a a3       	std	Y+34, r25	; 0x22
        printf("rtc seconds: %lu\n",seconds);
    7c22:	9f 93       	push	r25
    7c24:	8f 93       	push	r24
    7c26:	7f 93       	push	r23
    7c28:	6f 93       	push	r22
    7c2a:	84 e2       	ldi	r24, 0x24	; 36
    7c2c:	96 e0       	ldi	r25, 0x06	; 6
    7c2e:	1f 92       	push	r1
    7c30:	9f 93       	push	r25
    7c32:	8f 93       	push	r24
    7c34:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7c38:	ce 01       	movw	r24, r28
    7c3a:	01 96       	adiw	r24, 0x01	; 1
    7c3c:	53 df       	rcall	.-346    	; 0x7ae4 <asctime>
    7c3e:	9f 93       	push	r25
    7c40:	8f 93       	push	r24
    7c42:	83 e1       	ldi	r24, 0x13	; 19
    7c44:	96 e0       	ldi	r25, 0x06	; 6
    7c46:	1f 92       	push	r1
    7c48:	9f 93       	push	r25
    7c4a:	8f 93       	push	r24
    7c4c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    7c50:	0f b6       	in	r0, 0x3f	; 63
    7c52:	f8 94       	cli
    7c54:	de bf       	out	0x3e, r29	; 62
    7c56:	0f be       	out	0x3f, r0	; 63
    7c58:	cd bf       	out	0x3d, r28	; 61
    7c5a:	0a c0       	rjmp	.+20     	; 0x7c70 <display_clock+0x74>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7c5c:	82 e0       	ldi	r24, 0x02	; 2
    7c5e:	96 e0       	ldi	r25, 0x06	; 6
    7c60:	1f 92       	push	r1
    7c62:	9f 93       	push	r25
    7c64:	8f 93       	push	r24
    7c66:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    7c6a:	0f 90       	pop	r0
    7c6c:	0f 90       	pop	r0
    7c6e:	0f 90       	pop	r0
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7c70:	be 01       	movw	r22, r28
    7c72:	69 5e       	subi	r22, 0xE9	; 233
    7c74:	7f 4f       	sbci	r23, 0xFF	; 255
    7c76:	80 e0       	ldi	r24, 0x00	; 0
    7c78:	90 e0       	ldi	r25, 0x00	; 0
    7c7a:	0e 94 3a 34 	call	0x6874	; 0x6874 <clock_gettime>
    seconds = ts.tv_sec;
    7c7e:	8f 89       	ldd	r24, Y+23	; 0x17
    7c80:	98 8d       	ldd	r25, Y+24	; 0x18
    7c82:	29 8d       	ldd	r18, Y+25	; 0x19
    7c84:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7c86:	8f 8f       	std	Y+31, r24	; 0x1f
    7c88:	98 a3       	std	Y+32, r25	; 0x20
    7c8a:	29 a3       	std	Y+33, r18	; 0x21
    7c8c:	3a a3       	std	Y+34, r19	; 0x22
    printf("clk seconds: %lu\n",seconds);
    7c8e:	3f 93       	push	r19
    7c90:	2f 93       	push	r18
    7c92:	9f 93       	push	r25
    7c94:	8f 93       	push	r24
    7c96:	80 ef       	ldi	r24, 0xF0	; 240
    7c98:	95 e0       	ldi	r25, 0x05	; 5
    7c9a:	1f 92       	push	r1
    7c9c:	9f 93       	push	r25
    7c9e:	8f 93       	push	r24
    7ca0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7ca4:	ce 01       	movw	r24, r28
    7ca6:	4f 96       	adiw	r24, 0x1f	; 31
    7ca8:	b5 d9       	rcall	.-3222   	; 0x7014 <gmtime>
    7caa:	1c df       	rcall	.-456    	; 0x7ae4 <asctime>
    7cac:	9f 93       	push	r25
    7cae:	8f 93       	push	r24
    7cb0:	8f ed       	ldi	r24, 0xDF	; 223
    7cb2:	95 e0       	ldi	r25, 0x05	; 5
    7cb4:	1f 92       	push	r1
    7cb6:	9f 93       	push	r25
    7cb8:	8f 93       	push	r24
    7cba:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
}
    7cbe:	0f b6       	in	r0, 0x3f	; 63
    7cc0:	f8 94       	cli
    7cc2:	de bf       	out	0x3e, r29	; 62
    7cc4:	0f be       	out	0x3f, r0	; 63
    7cc6:	cd bf       	out	0x3d, r28	; 61
    7cc8:	a2 96       	adiw	r28, 0x22	; 34
    7cca:	e2 e0       	ldi	r30, 0x02	; 2
    7ccc:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

00007cd0 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7cd0:	fc 01       	movw	r30, r24
    7cd2:	84 81       	ldd	r24, Z+4	; 0x04
    7cd4:	95 81       	ldd	r25, Z+5	; 0x05
    7cd6:	00 97       	sbiw	r24, 0x00	; 0
    7cd8:	79 f0       	breq	.+30     	; 0x7cf8 <_putc_buffer_fn+0x28>
    7cda:	66 23       	and	r22, r22
    7cdc:	69 f0       	breq	.+26     	; 0x7cf8 <_putc_buffer_fn+0x28>
    7cde:	01 97       	sbiw	r24, 0x01	; 1
    7ce0:	95 83       	std	Z+5, r25	; 0x05
    7ce2:	84 83       	std	Z+4, r24	; 0x04
    7ce4:	86 81       	ldd	r24, Z+6	; 0x06
    7ce6:	97 81       	ldd	r25, Z+7	; 0x07
    7ce8:	01 96       	adiw	r24, 0x01	; 1
    7cea:	97 83       	std	Z+7, r25	; 0x07
    7cec:	86 83       	std	Z+6, r24	; 0x06
    7cee:	a2 81       	ldd	r26, Z+2	; 0x02
    7cf0:	b3 81       	ldd	r27, Z+3	; 0x03
    7cf2:	6d 93       	st	X+, r22
    7cf4:	b3 83       	std	Z+3, r27	; 0x03
    7cf6:	a2 83       	std	Z+2, r26	; 0x02
    7cf8:	02 80       	ldd	r0, Z+2	; 0x02
    7cfa:	f3 81       	ldd	r31, Z+3	; 0x03
    7cfc:	e0 2d       	mov	r30, r0
    7cfe:	10 82       	st	Z, r1
    7d00:	08 95       	ret

00007d02 <_putc_fn>:
    7d02:	fc 01       	movw	r30, r24
    7d04:	26 81       	ldd	r18, Z+6	; 0x06
    7d06:	37 81       	ldd	r19, Z+7	; 0x07
    7d08:	2f 5f       	subi	r18, 0xFF	; 255
    7d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    7d0c:	37 83       	std	Z+7, r19	; 0x07
    7d0e:	26 83       	std	Z+6, r18	; 0x06
    7d10:	86 2f       	mov	r24, r22
    7d12:	90 e0       	ldi	r25, 0x00	; 0
    7d14:	0c 94 b9 76 	jmp	0xed72	; 0xed72 <putchar>
    7d18:	08 95       	ret

00007d1a <bin2num>:
    7d1a:	a0 e0       	ldi	r26, 0x00	; 0
    7d1c:	b0 e0       	ldi	r27, 0x00	; 0
    7d1e:	e3 e9       	ldi	r30, 0x93	; 147
    7d20:	fe e3       	ldi	r31, 0x3E	; 62
    7d22:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__+0xe>
    7d26:	ea 01       	movw	r28, r20
    7d28:	53 e0       	ldi	r21, 0x03	; 3
    7d2a:	ee 0c       	add	r14, r14
    7d2c:	ff 1c       	adc	r15, r15
    7d2e:	5a 95       	dec	r21
    7d30:	e1 f7       	brne	.-8      	; 0x7d2a <bin2num+0x10>
    7d32:	fc 01       	movw	r30, r24
    7d34:	af 01       	movw	r20, r30
    7d36:	48 1b       	sub	r20, r24
    7d38:	59 0b       	sbc	r21, r25
    7d3a:	c4 17       	cp	r28, r20
    7d3c:	d5 07       	cpc	r29, r21
    7d3e:	14 f0       	brlt	.+4      	; 0x7d44 <bin2num+0x2a>
    7d40:	11 92       	st	Z+, r1
    7d42:	f8 cf       	rjmp	.-16     	; 0x7d34 <bin2num+0x1a>
    7d44:	41 e0       	ldi	r20, 0x01	; 1
    7d46:	e4 1a       	sub	r14, r20
    7d48:	f1 08       	sbc	r15, r1
    7d4a:	5b 01       	movw	r10, r22
    7d4c:	42 e0       	ldi	r20, 0x02	; 2
    7d4e:	a4 1a       	sub	r10, r20
    7d50:	b1 08       	sbc	r11, r1
    7d52:	f7 fc       	sbrc	r15, 7
    7d54:	3b c0       	rjmp	.+118    	; 0x7dcc <bin2num+0xb2>
    7d56:	f7 01       	movw	r30, r14
    7d58:	43 e0       	ldi	r20, 0x03	; 3
    7d5a:	f5 95       	asr	r31
    7d5c:	e7 95       	ror	r30
    7d5e:	4a 95       	dec	r20
    7d60:	e1 f7       	brne	.-8      	; 0x7d5a <bin2num+0x40>
    7d62:	e0 0f       	add	r30, r16
    7d64:	f1 1f       	adc	r31, r17
    7d66:	40 81       	ld	r20, Z
    7d68:	50 e0       	ldi	r21, 0x00	; 0
    7d6a:	f7 01       	movw	r30, r14
    7d6c:	e7 70       	andi	r30, 0x07	; 7
    7d6e:	ff 27       	eor	r31, r31
    7d70:	02 c0       	rjmp	.+4      	; 0x7d76 <bin2num+0x5c>
    7d72:	55 95       	asr	r21
    7d74:	47 95       	ror	r20
    7d76:	ea 95       	dec	r30
    7d78:	e2 f7       	brpl	.-8      	; 0x7d72 <bin2num+0x58>
    7d7a:	41 70       	andi	r20, 0x01	; 1
    7d7c:	55 27       	eor	r21, r21
    7d7e:	dc 01       	movw	r26, r24
    7d80:	e0 e0       	ldi	r30, 0x00	; 0
    7d82:	f0 e0       	ldi	r31, 0x00	; 0
    7d84:	ec 17       	cp	r30, r28
    7d86:	fd 07       	cpc	r31, r29
    7d88:	ec f4       	brge	.+58     	; 0x7dc4 <bin2num+0xaa>
    7d8a:	ea 15       	cp	r30, r10
    7d8c:	fb 05       	cpc	r31, r11
    7d8e:	4c f0       	brlt	.+18     	; 0x7da2 <bin2num+0x88>
    7d90:	dc 01       	movw	r26, r24
    7d92:	ae 0f       	add	r26, r30
    7d94:	bf 1f       	adc	r27, r31
    7d96:	1c 92       	st	X, r1
    7d98:	41 e0       	ldi	r20, 0x01	; 1
    7d9a:	e4 1a       	sub	r14, r20
    7d9c:	f1 08       	sbc	r15, r1
    7d9e:	ef 01       	movw	r28, r30
    7da0:	d8 cf       	rjmp	.-80     	; 0x7d52 <bin2num+0x38>
    7da2:	9c 90       	ld	r9, X
    7da4:	99 0c       	add	r9, r9
    7da6:	94 2a       	or	r9, r20
    7da8:	49 2d       	mov	r20, r9
    7daa:	50 e0       	ldi	r21, 0x00	; 0
    7dac:	42 17       	cp	r20, r18
    7dae:	53 07       	cpc	r21, r19
    7db0:	24 f0       	brlt	.+8      	; 0x7dba <bin2num+0xa0>
    7db2:	92 1a       	sub	r9, r18
    7db4:	41 e0       	ldi	r20, 0x01	; 1
    7db6:	50 e0       	ldi	r21, 0x00	; 0
    7db8:	02 c0       	rjmp	.+4      	; 0x7dbe <bin2num+0xa4>
    7dba:	40 e0       	ldi	r20, 0x00	; 0
    7dbc:	50 e0       	ldi	r21, 0x00	; 0
    7dbe:	9d 92       	st	X+, r9
    7dc0:	31 96       	adiw	r30, 0x01	; 1
    7dc2:	e0 cf       	rjmp	.-64     	; 0x7d84 <bin2num+0x6a>
    7dc4:	41 15       	cp	r20, r1
    7dc6:	51 05       	cpc	r21, r1
    7dc8:	01 f7       	brne	.-64     	; 0x7d8a <bin2num+0x70>
    7dca:	e2 cf       	rjmp	.-60     	; 0x7d90 <bin2num+0x76>
    7dcc:	fc 01       	movw	r30, r24
    7dce:	9f 01       	movw	r18, r30
    7dd0:	28 1b       	sub	r18, r24
    7dd2:	39 0b       	sbc	r19, r25
    7dd4:	2c 17       	cp	r18, r28
    7dd6:	3d 07       	cpc	r19, r29
    7dd8:	4c f4       	brge	.+18     	; 0x7dec <bin2num+0xd2>
    7dda:	20 81       	ld	r18, Z
    7ddc:	2a 30       	cpi	r18, 0x0A	; 10
    7dde:	10 f4       	brcc	.+4      	; 0x7de4 <bin2num+0xca>
    7de0:	20 5d       	subi	r18, 0xD0	; 208
    7de2:	01 c0       	rjmp	.+2      	; 0x7de6 <bin2num+0xcc>
    7de4:	29 5a       	subi	r18, 0xA9	; 169
    7de6:	20 83       	st	Z, r18
    7de8:	31 96       	adiw	r30, 0x01	; 1
    7dea:	f1 cf       	rjmp	.-30     	; 0x7dce <bin2num+0xb4>
    7dec:	9e 01       	movw	r18, r28
    7dee:	d7 ff       	sbrs	r29, 7
    7df0:	02 c0       	rjmp	.+4      	; 0x7df6 <bin2num+0xdc>
    7df2:	20 e0       	ldi	r18, 0x00	; 0
    7df4:	30 e0       	ldi	r19, 0x00	; 0
    7df6:	c1 14       	cp	r12, r1
    7df8:	d1 04       	cpc	r13, r1
    7dfa:	61 f0       	breq	.+24     	; 0x7e14 <bin2num+0xfa>
    7dfc:	61 50       	subi	r22, 0x01	; 1
    7dfe:	71 09       	sbc	r23, r1
    7e00:	26 17       	cp	r18, r22
    7e02:	37 07       	cpc	r19, r23
    7e04:	3c f4       	brge	.+14     	; 0x7e14 <bin2num+0xfa>
    7e06:	fc 01       	movw	r30, r24
    7e08:	e2 0f       	add	r30, r18
    7e0a:	f3 1f       	adc	r31, r19
    7e0c:	c0 82       	st	Z, r12
    7e0e:	21 96       	adiw	r28, 0x01	; 1
    7e10:	2f 5f       	subi	r18, 0xFF	; 255
    7e12:	3f 4f       	sbci	r19, 0xFF	; 255
    7e14:	fc 01       	movw	r30, r24
    7e16:	e2 0f       	add	r30, r18
    7e18:	f3 1f       	adc	r31, r19
    7e1a:	10 82       	st	Z, r1
    7e1c:	0e 94 d5 31 	call	0x63aa	; 0x63aa <reverse>
    7e20:	ce 01       	movw	r24, r28
    7e22:	cd b7       	in	r28, 0x3d	; 61
    7e24:	de b7       	in	r29, 0x3e	; 62
    7e26:	eb e0       	ldi	r30, 0x0B	; 11
    7e28:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__+0xe>

00007e2c <pch_init>:
    7e2c:	e2 e7       	ldi	r30, 0x72	; 114
    7e2e:	f9 e1       	ldi	r31, 0x19	; 25
    7e30:	91 83       	std	Z+1, r25	; 0x01
    7e32:	80 83       	st	Z, r24
    7e34:	13 82       	std	Z+3, r1	; 0x03
    7e36:	12 82       	std	Z+2, r1	; 0x02
    7e38:	61 50       	subi	r22, 0x01	; 1
    7e3a:	71 09       	sbc	r23, r1
    7e3c:	75 83       	std	Z+5, r23	; 0x05
    7e3e:	64 83       	std	Z+4, r22	; 0x04
    7e40:	fc 01       	movw	r30, r24
    7e42:	10 82       	st	Z, r1
    7e44:	08 95       	ret

00007e46 <pch>:
    7e46:	20 91 74 19 	lds	r18, 0x1974	; 0x801974 <_pch+0x2>
    7e4a:	30 91 75 19 	lds	r19, 0x1975	; 0x801975 <_pch+0x3>
    7e4e:	60 91 76 19 	lds	r22, 0x1976	; 0x801976 <_pch+0x4>
    7e52:	70 91 77 19 	lds	r23, 0x1977	; 0x801977 <_pch+0x5>
    7e56:	40 91 72 19 	lds	r20, 0x1972	; 0x801972 <_pch>
    7e5a:	50 91 73 19 	lds	r21, 0x1973	; 0x801973 <_pch+0x1>
    7e5e:	26 17       	cp	r18, r22
    7e60:	37 07       	cpc	r19, r23
    7e62:	64 f4       	brge	.+24     	; 0x7e7c <pch+0x36>
    7e64:	b9 01       	movw	r22, r18
    7e66:	6f 5f       	subi	r22, 0xFF	; 255
    7e68:	7f 4f       	sbci	r23, 0xFF	; 255
    7e6a:	70 93 75 19 	sts	0x1975, r23	; 0x801975 <_pch+0x3>
    7e6e:	60 93 74 19 	sts	0x1974, r22	; 0x801974 <_pch+0x2>
    7e72:	fa 01       	movw	r30, r20
    7e74:	e2 0f       	add	r30, r18
    7e76:	f3 1f       	adc	r31, r19
    7e78:	80 83       	st	Z, r24
    7e7a:	04 c0       	rjmp	.+8      	; 0x7e84 <pch+0x3e>
    7e7c:	fa 01       	movw	r30, r20
    7e7e:	e2 0f       	add	r30, r18
    7e80:	f3 1f       	adc	r31, r19
    7e82:	10 82       	st	Z, r1
    7e84:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <_pch+0x2>
    7e88:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <_pch+0x3>
    7e8c:	08 95       	ret

00007e8e <p_ntoa>:
    7e8e:	af 92       	push	r10
    7e90:	cf 92       	push	r12
    7e92:	df 92       	push	r13
    7e94:	ef 92       	push	r14
    7e96:	ff 92       	push	r15
    7e98:	0f 93       	push	r16
    7e9a:	1f 93       	push	r17
    7e9c:	cf 93       	push	r28
    7e9e:	df 93       	push	r29
    7ea0:	dc 01       	movw	r26, r24
    7ea2:	eb 01       	movw	r28, r22
    7ea4:	fa 01       	movw	r30, r20
    7ea6:	b9 01       	movw	r22, r18
    7ea8:	98 01       	movw	r18, r16
    7eaa:	a6 01       	movw	r20, r12
    7eac:	9a 2d       	mov	r25, r10
    7eae:	a5 fa       	bst	r10, 5
    7eb0:	cc 24       	eor	r12, r12
    7eb2:	c0 f8       	bld	r12, 0
    7eb4:	a6 fc       	sbrc	r10, 6
    7eb6:	07 c0       	rjmp	.+14     	; 0x7ec6 <p_ntoa+0x38>
    7eb8:	a2 fc       	sbrc	r10, 2
    7eba:	08 c0       	rjmp	.+16     	; 0x7ecc <p_ntoa+0x3e>
    7ebc:	a4 fe       	sbrs	r10, 4
    7ebe:	09 c0       	rjmp	.+18     	; 0x7ed2 <p_ntoa+0x44>
    7ec0:	00 e2       	ldi	r16, 0x20	; 32
    7ec2:	10 e0       	ldi	r17, 0x00	; 0
    7ec4:	08 c0       	rjmp	.+16     	; 0x7ed6 <p_ntoa+0x48>
    7ec6:	0d e2       	ldi	r16, 0x2D	; 45
    7ec8:	10 e0       	ldi	r17, 0x00	; 0
    7eca:	05 c0       	rjmp	.+10     	; 0x7ed6 <p_ntoa+0x48>
    7ecc:	0b e2       	ldi	r16, 0x2B	; 43
    7ece:	10 e0       	ldi	r17, 0x00	; 0
    7ed0:	02 c0       	rjmp	.+4      	; 0x7ed6 <p_ntoa+0x48>
    7ed2:	00 e0       	ldi	r16, 0x00	; 0
    7ed4:	10 e0       	ldi	r17, 0x00	; 0
    7ed6:	95 ff       	sbrs	r25, 5
    7ed8:	04 c0       	rjmp	.+8      	; 0x7ee2 <p_ntoa+0x54>
    7eda:	89 2f       	mov	r24, r25
    7edc:	8a 70       	andi	r24, 0x0A	; 10
    7ede:	09 f0       	breq	.+2      	; 0x7ee2 <p_ntoa+0x54>
    7ee0:	c1 2c       	mov	r12, r1
    7ee2:	c0 fa       	bst	r12, 0
    7ee4:	95 f9       	bld	r25, 5
    7ee6:	89 2f       	mov	r24, r25
    7ee8:	82 70       	andi	r24, 0x02	; 2
    7eea:	c8 2e       	mov	r12, r24
    7eec:	91 fd       	sbrc	r25, 1
    7eee:	02 c0       	rjmp	.+4      	; 0x7ef4 <p_ntoa+0x66>
    7ef0:	40 e0       	ldi	r20, 0x00	; 0
    7ef2:	50 e0       	ldi	r21, 0x00	; 0
    7ef4:	89 2f       	mov	r24, r25
    7ef6:	83 70       	andi	r24, 0x03	; 3
    7ef8:	11 f4       	brne	.+4      	; 0x7efe <p_ntoa+0x70>
    7efa:	41 e0       	ldi	r20, 0x01	; 1
    7efc:	50 e0       	ldi	r21, 0x00	; 0
    7efe:	90 ff       	sbrs	r25, 0
    7f00:	0c c0       	rjmp	.+24     	; 0x7f1a <p_ntoa+0x8c>
    7f02:	95 fd       	sbrc	r25, 5
    7f04:	05 c0       	rjmp	.+10     	; 0x7f10 <p_ntoa+0x82>
    7f06:	c1 10       	cpse	r12, r1
    7f08:	08 c0       	rjmp	.+16     	; 0x7f1a <p_ntoa+0x8c>
    7f0a:	41 e0       	ldi	r20, 0x01	; 1
    7f0c:	50 e0       	ldi	r21, 0x00	; 0
    7f0e:	05 c0       	rjmp	.+10     	; 0x7f1a <p_ntoa+0x8c>
    7f10:	94 75       	andi	r25, 0x54	; 84
    7f12:	a7 01       	movw	r20, r14
    7f14:	11 f0       	breq	.+4      	; 0x7f1a <p_ntoa+0x8c>
    7f16:	41 50       	subi	r20, 0x01	; 1
    7f18:	51 09       	sbc	r21, r1
    7f1a:	68 01       	movw	r12, r16
    7f1c:	7e 01       	movw	r14, r28
    7f1e:	8d 01       	movw	r16, r26
    7f20:	cf 01       	movw	r24, r30
    7f22:	fb de       	rcall	.-522    	; 0x7d1a <bin2num>
    7f24:	df 91       	pop	r29
    7f26:	cf 91       	pop	r28
    7f28:	1f 91       	pop	r17
    7f2a:	0f 91       	pop	r16
    7f2c:	ff 90       	pop	r15
    7f2e:	ef 90       	pop	r14
    7f30:	df 90       	pop	r13
    7f32:	cf 90       	pop	r12
    7f34:	af 90       	pop	r10
    7f36:	08 95       	ret

00007f38 <p_ftoa>:
    7f38:	2f 92       	push	r2
    7f3a:	3f 92       	push	r3
    7f3c:	4f 92       	push	r4
    7f3e:	5f 92       	push	r5
    7f40:	6f 92       	push	r6
    7f42:	7f 92       	push	r7
    7f44:	8f 92       	push	r8
    7f46:	9f 92       	push	r9
    7f48:	af 92       	push	r10
    7f4a:	bf 92       	push	r11
    7f4c:	cf 92       	push	r12
    7f4e:	ef 92       	push	r14
    7f50:	ff 92       	push	r15
    7f52:	0f 93       	push	r16
    7f54:	1f 93       	push	r17
    7f56:	cf 93       	push	r28
    7f58:	df 93       	push	r29
    7f5a:	4b 01       	movw	r8, r22
    7f5c:	5c 01       	movw	r10, r24
    7f5e:	1a 01       	movw	r2, r20
    7f60:	38 01       	movw	r6, r16
    7f62:	c6 fa       	bst	r12, 6
    7f64:	cc 27       	eor	r28, r28
    7f66:	c0 f9       	bld	r28, 0
    7f68:	b9 01       	movw	r22, r18
    7f6a:	ca 01       	movw	r24, r20
    7f6c:	5f df       	rcall	.-322    	; 0x7e2c <pch_init>
    7f6e:	20 e0       	ldi	r18, 0x00	; 0
    7f70:	30 e0       	ldi	r19, 0x00	; 0
    7f72:	a9 01       	movw	r20, r18
    7f74:	c5 01       	movw	r24, r10
    7f76:	b4 01       	movw	r22, r8
    7f78:	0e 94 dd e5 	call	0x1cbba	; 0x1cbba <__cmpsf2>
    7f7c:	87 ff       	sbrs	r24, 7
    7f7e:	05 c0       	rjmp	.+10     	; 0x7f8a <p_ftoa+0x52>
    7f80:	b7 fa       	bst	r11, 7
    7f82:	b0 94       	com	r11
    7f84:	b7 f8       	bld	r11, 7
    7f86:	b0 94       	com	r11
    7f88:	c1 e0       	ldi	r28, 0x01	; 1
    7f8a:	c0 fb       	bst	r28, 0
    7f8c:	c6 f8       	bld	r12, 6
    7f8e:	c6 fe       	sbrs	r12, 6
    7f90:	02 c0       	rjmp	.+4      	; 0x7f96 <p_ftoa+0x5e>
    7f92:	8d e2       	ldi	r24, 0x2D	; 45
    7f94:	07 c0       	rjmp	.+14     	; 0x7fa4 <p_ftoa+0x6c>
    7f96:	c2 fe       	sbrs	r12, 2
    7f98:	02 c0       	rjmp	.+4      	; 0x7f9e <p_ftoa+0x66>
    7f9a:	8b e2       	ldi	r24, 0x2B	; 43
    7f9c:	03 c0       	rjmp	.+6      	; 0x7fa4 <p_ftoa+0x6c>
    7f9e:	c4 fe       	sbrs	r12, 4
    7fa0:	02 c0       	rjmp	.+4      	; 0x7fa6 <p_ftoa+0x6e>
    7fa2:	80 e2       	ldi	r24, 0x20	; 32
    7fa4:	50 df       	rcall	.-352    	; 0x7e46 <pch>
    7fa6:	e7 01       	movw	r28, r14
    7fa8:	f7 fe       	sbrs	r15, 7
    7faa:	02 c0       	rjmp	.+4      	; 0x7fb0 <p_ftoa+0x78>
    7fac:	c0 e0       	ldi	r28, 0x00	; 0
    7fae:	d0 e0       	ldi	r29, 0x00	; 0
    7fb0:	20 e0       	ldi	r18, 0x00	; 0
    7fb2:	30 e0       	ldi	r19, 0x00	; 0
    7fb4:	a9 01       	movw	r20, r18
    7fb6:	c5 01       	movw	r24, r10
    7fb8:	b4 01       	movw	r22, r8
    7fba:	0e 94 dd e5 	call	0x1cbba	; 0x1cbba <__cmpsf2>
    7fbe:	88 23       	and	r24, r24
    7fc0:	d1 f1       	breq	.+116    	; 0x8036 <p_ftoa+0xfe>
    7fc2:	c1 fe       	sbrs	r12, 1
    7fc4:	11 c0       	rjmp	.+34     	; 0x7fe8 <p_ftoa+0xb0>
    7fc6:	8e 01       	movw	r16, r28
    7fc8:	60 e0       	ldi	r22, 0x00	; 0
    7fca:	70 e0       	ldi	r23, 0x00	; 0
    7fcc:	80 e0       	ldi	r24, 0x00	; 0
    7fce:	9f e3       	ldi	r25, 0x3F	; 63
    7fd0:	01 15       	cp	r16, r1
    7fd2:	11 05       	cpc	r17, r1
    7fd4:	69 f0       	breq	.+26     	; 0x7ff0 <p_ftoa+0xb8>
    7fd6:	20 e0       	ldi	r18, 0x00	; 0
    7fd8:	30 e0       	ldi	r19, 0x00	; 0
    7fda:	40 e2       	ldi	r20, 0x20	; 32
    7fdc:	51 e4       	ldi	r21, 0x41	; 65
    7fde:	0e 94 e1 e5 	call	0x1cbc2	; 0x1cbc2 <__divsf3>
    7fe2:	01 50       	subi	r16, 0x01	; 1
    7fe4:	11 09       	sbc	r17, r1
    7fe6:	f4 cf       	rjmp	.-24     	; 0x7fd0 <p_ftoa+0x98>
    7fe8:	60 e0       	ldi	r22, 0x00	; 0
    7fea:	70 e0       	ldi	r23, 0x00	; 0
    7fec:	80 e0       	ldi	r24, 0x00	; 0
    7fee:	9f e3       	ldi	r25, 0x3F	; 63
    7ff0:	9b 01       	movw	r18, r22
    7ff2:	ac 01       	movw	r20, r24
    7ff4:	c5 01       	movw	r24, r10
    7ff6:	b4 01       	movw	r22, r8
    7ff8:	0e 94 79 e5 	call	0x1caf2	; 0x1caf2 <__addsf3>
    7ffc:	4b 01       	movw	r8, r22
    7ffe:	5c 01       	movw	r10, r24
    8000:	ee 24       	eor	r14, r14
    8002:	e3 94       	inc	r14
    8004:	f1 2c       	mov	r15, r1
    8006:	20 e0       	ldi	r18, 0x00	; 0
    8008:	30 e0       	ldi	r19, 0x00	; 0
    800a:	40 e2       	ldi	r20, 0x20	; 32
    800c:	51 e4       	ldi	r21, 0x41	; 65
    800e:	c5 01       	movw	r24, r10
    8010:	b4 01       	movw	r22, r8
    8012:	0e 94 2c e7 	call	0x1ce58	; 0x1ce58 <__gesf2>
    8016:	87 fd       	sbrc	r24, 7
    8018:	11 c0       	rjmp	.+34     	; 0x803c <p_ftoa+0x104>
    801a:	2f ef       	ldi	r18, 0xFF	; 255
    801c:	e2 1a       	sub	r14, r18
    801e:	f2 0a       	sbc	r15, r18
    8020:	20 e0       	ldi	r18, 0x00	; 0
    8022:	30 e0       	ldi	r19, 0x00	; 0
    8024:	40 e2       	ldi	r20, 0x20	; 32
    8026:	51 e4       	ldi	r21, 0x41	; 65
    8028:	c5 01       	movw	r24, r10
    802a:	b4 01       	movw	r22, r8
    802c:	0e 94 e1 e5 	call	0x1cbc2	; 0x1cbc2 <__divsf3>
    8030:	4b 01       	movw	r8, r22
    8032:	5c 01       	movw	r10, r24
    8034:	e8 cf       	rjmp	.-48     	; 0x8006 <p_ftoa+0xce>
    8036:	ee 24       	eor	r14, r14
    8038:	e3 94       	inc	r14
    803a:	f1 2c       	mov	r15, r1
    803c:	8c 2d       	mov	r24, r12
    803e:	88 72       	andi	r24, 0x28	; 40
    8040:	80 32       	cpi	r24, 0x20	; 32
    8042:	b9 f4       	brne	.+46     	; 0x8072 <p_ftoa+0x13a>
    8044:	83 01       	movw	r16, r6
    8046:	0e 19       	sub	r16, r14
    8048:	1f 09       	sbc	r17, r15
    804a:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <_pch+0x2>
    804e:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <_pch+0x3>
    8052:	08 1b       	sub	r16, r24
    8054:	19 0b       	sbc	r17, r25
    8056:	c1 fe       	sbrs	r12, 1
    8058:	06 c0       	rjmp	.+12     	; 0x8066 <p_ftoa+0x12e>
    805a:	20 97       	sbiw	r28, 0x00	; 0
    805c:	21 f0       	breq	.+8      	; 0x8066 <p_ftoa+0x12e>
    805e:	0c 1b       	sub	r16, r28
    8060:	1d 0b       	sbc	r17, r29
    8062:	01 50       	subi	r16, 0x01	; 1
    8064:	11 09       	sbc	r17, r1
    8066:	10 16       	cp	r1, r16
    8068:	11 06       	cpc	r1, r17
    806a:	1c f4       	brge	.+6      	; 0x8072 <p_ftoa+0x13a>
    806c:	80 e3       	ldi	r24, 0x30	; 48
    806e:	eb de       	rcall	.-554    	; 0x7e46 <pch>
    8070:	f8 cf       	rjmp	.-16     	; 0x8062 <p_ftoa+0x12a>
    8072:	c5 01       	movw	r24, r10
    8074:	b4 01       	movw	r22, r8
    8076:	0e 94 49 e6 	call	0x1cc92	; 0x1cc92 <__fixsfsi>
    807a:	2b 01       	movw	r4, r22
    807c:	3c 01       	movw	r6, r24
    807e:	80 e3       	ldi	r24, 0x30	; 48
    8080:	84 0d       	add	r24, r4
    8082:	e1 de       	rcall	.-574    	; 0x7e46 <pch>
    8084:	b2 01       	movw	r22, r4
    8086:	55 0c       	add	r5, r5
    8088:	88 0b       	sbc	r24, r24
    808a:	99 0b       	sbc	r25, r25
    808c:	0e 94 7c e6 	call	0x1ccf8	; 0x1ccf8 <__floatsisf>
    8090:	9b 01       	movw	r18, r22
    8092:	ac 01       	movw	r20, r24
    8094:	c5 01       	movw	r24, r10
    8096:	b4 01       	movw	r22, r8
    8098:	0e 94 78 e5 	call	0x1caf0	; 0x1caf0 <__subsf3>
    809c:	21 e0       	ldi	r18, 0x01	; 1
    809e:	e2 1a       	sub	r14, r18
    80a0:	f1 08       	sbc	r15, r1
    80a2:	20 e0       	ldi	r18, 0x00	; 0
    80a4:	30 e0       	ldi	r19, 0x00	; 0
    80a6:	40 e2       	ldi	r20, 0x20	; 32
    80a8:	51 e4       	ldi	r21, 0x41	; 65
    80aa:	0e 94 30 e7 	call	0x1ce60	; 0x1ce60 <__mulsf3>
    80ae:	4b 01       	movw	r8, r22
    80b0:	5c 01       	movw	r10, r24
    80b2:	e1 14       	cp	r14, r1
    80b4:	f1 04       	cpc	r15, r1
    80b6:	e9 f6       	brne	.-70     	; 0x8072 <p_ftoa+0x13a>
    80b8:	c1 fc       	sbrc	r12, 1
    80ba:	1c c0       	rjmp	.+56     	; 0x80f4 <p_ftoa+0x1bc>
    80bc:	80 e0       	ldi	r24, 0x00	; 0
    80be:	c3 de       	rcall	.-634    	; 0x7e46 <pch>
    80c0:	f1 01       	movw	r30, r2
    80c2:	01 90       	ld	r0, Z+
    80c4:	00 20       	and	r0, r0
    80c6:	e9 f7       	brne	.-6      	; 0x80c2 <p_ftoa+0x18a>
    80c8:	31 97       	sbiw	r30, 0x01	; 1
    80ca:	cf 01       	movw	r24, r30
    80cc:	82 19       	sub	r24, r2
    80ce:	93 09       	sbc	r25, r3
    80d0:	df 91       	pop	r29
    80d2:	cf 91       	pop	r28
    80d4:	1f 91       	pop	r17
    80d6:	0f 91       	pop	r16
    80d8:	ff 90       	pop	r15
    80da:	ef 90       	pop	r14
    80dc:	cf 90       	pop	r12
    80de:	bf 90       	pop	r11
    80e0:	af 90       	pop	r10
    80e2:	9f 90       	pop	r9
    80e4:	8f 90       	pop	r8
    80e6:	7f 90       	pop	r7
    80e8:	6f 90       	pop	r6
    80ea:	5f 90       	pop	r5
    80ec:	4f 90       	pop	r4
    80ee:	3f 90       	pop	r3
    80f0:	2f 90       	pop	r2
    80f2:	08 95       	ret
    80f4:	20 97       	sbiw	r28, 0x00	; 0
    80f6:	11 f3       	breq	.-60     	; 0x80bc <p_ftoa+0x184>
    80f8:	8e e2       	ldi	r24, 0x2E	; 46
    80fa:	a5 de       	rcall	.-694    	; 0x7e46 <pch>
    80fc:	c5 01       	movw	r24, r10
    80fe:	b4 01       	movw	r22, r8
    8100:	0e 94 49 e6 	call	0x1cc92	; 0x1cc92 <__fixsfsi>
    8104:	2b 01       	movw	r4, r22
    8106:	3c 01       	movw	r6, r24
    8108:	07 2e       	mov	r0, r23
    810a:	00 0c       	add	r0, r0
    810c:	88 0b       	sbc	r24, r24
    810e:	99 0b       	sbc	r25, r25
    8110:	0e 94 7c e6 	call	0x1ccf8	; 0x1ccf8 <__floatsisf>
    8114:	9b 01       	movw	r18, r22
    8116:	ac 01       	movw	r20, r24
    8118:	c5 01       	movw	r24, r10
    811a:	b4 01       	movw	r22, r8
    811c:	0e 94 78 e5 	call	0x1caf0	; 0x1caf0 <__subsf3>
    8120:	4b 01       	movw	r8, r22
    8122:	5c 01       	movw	r10, r24
    8124:	80 e3       	ldi	r24, 0x30	; 48
    8126:	84 0d       	add	r24, r4
    8128:	8e de       	rcall	.-740    	; 0x7e46 <pch>
    812a:	21 97       	sbiw	r28, 0x01	; 1
    812c:	20 e0       	ldi	r18, 0x00	; 0
    812e:	30 e0       	ldi	r19, 0x00	; 0
    8130:	40 e2       	ldi	r20, 0x20	; 32
    8132:	51 e4       	ldi	r21, 0x41	; 65
    8134:	c5 01       	movw	r24, r10
    8136:	b4 01       	movw	r22, r8
    8138:	0e 94 30 e7 	call	0x1ce60	; 0x1ce60 <__mulsf3>
    813c:	4b 01       	movw	r8, r22
    813e:	5c 01       	movw	r10, r24
    8140:	20 97       	sbiw	r28, 0x00	; 0
    8142:	e1 f6       	brne	.-72     	; 0x80fc <p_ftoa+0x1c4>
    8144:	bb cf       	rjmp	.-138    	; 0x80bc <p_ftoa+0x184>

00008146 <p_etoa>:
    8146:	ad e0       	ldi	r26, 0x0D	; 13
    8148:	b0 e0       	ldi	r27, 0x00	; 0
    814a:	e9 ea       	ldi	r30, 0xA9	; 169
    814c:	f0 e4       	ldi	r31, 0x40	; 64
    814e:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    8152:	4b 01       	movw	r8, r22
    8154:	5c 01       	movw	r10, r24
    8156:	5b 87       	std	Y+11, r21	; 0x0b
    8158:	4a 87       	std	Y+10, r20	; 0x0a
    815a:	1d 87       	std	Y+13, r17	; 0x0d
    815c:	0c 87       	std	Y+12, r16	; 0x0c
    815e:	3c 2c       	mov	r3, r12
    8160:	c6 fa       	bst	r12, 6
    8162:	11 27       	eor	r17, r17
    8164:	10 f9       	bld	r17, 0
    8166:	b9 01       	movw	r22, r18
    8168:	ca 01       	movw	r24, r20
    816a:	60 de       	rcall	.-832    	; 0x7e2c <pch_init>
    816c:	20 e0       	ldi	r18, 0x00	; 0
    816e:	30 e0       	ldi	r19, 0x00	; 0
    8170:	a9 01       	movw	r20, r18
    8172:	c5 01       	movw	r24, r10
    8174:	b4 01       	movw	r22, r8
    8176:	0e 94 dd e5 	call	0x1cbba	; 0x1cbba <__cmpsf2>
    817a:	87 ff       	sbrs	r24, 7
    817c:	05 c0       	rjmp	.+10     	; 0x8188 <p_etoa+0x42>
    817e:	b7 fa       	bst	r11, 7
    8180:	b0 94       	com	r11
    8182:	b7 f8       	bld	r11, 7
    8184:	b0 94       	com	r11
    8186:	11 e0       	ldi	r17, 0x01	; 1
    8188:	10 fb       	bst	r17, 0
    818a:	36 f8       	bld	r3, 6
    818c:	36 fe       	sbrs	r3, 6
    818e:	02 c0       	rjmp	.+4      	; 0x8194 <p_etoa+0x4e>
    8190:	8d e2       	ldi	r24, 0x2D	; 45
    8192:	07 c0       	rjmp	.+14     	; 0x81a2 <p_etoa+0x5c>
    8194:	32 fe       	sbrs	r3, 2
    8196:	02 c0       	rjmp	.+4      	; 0x819c <p_etoa+0x56>
    8198:	8b e2       	ldi	r24, 0x2B	; 43
    819a:	03 c0       	rjmp	.+6      	; 0x81a2 <p_etoa+0x5c>
    819c:	34 fe       	sbrs	r3, 4
    819e:	02 c0       	rjmp	.+4      	; 0x81a4 <p_etoa+0x5e>
    81a0:	80 e2       	ldi	r24, 0x20	; 32
    81a2:	51 de       	rcall	.-862    	; 0x7e46 <pch>
    81a4:	37 01       	movw	r6, r14
    81a6:	f7 fe       	sbrs	r15, 7
    81a8:	02 c0       	rjmp	.+4      	; 0x81ae <p_etoa+0x68>
    81aa:	61 2c       	mov	r6, r1
    81ac:	71 2c       	mov	r7, r1
    81ae:	19 86       	std	Y+9, r1	; 0x09
    81b0:	18 86       	std	Y+8, r1	; 0x08
    81b2:	20 e0       	ldi	r18, 0x00	; 0
    81b4:	30 e0       	ldi	r19, 0x00	; 0
    81b6:	a9 01       	movw	r20, r18
    81b8:	c5 01       	movw	r24, r10
    81ba:	b4 01       	movw	r22, r8
    81bc:	0e 94 dd e5 	call	0x1cbba	; 0x1cbba <__cmpsf2>
    81c0:	23 2d       	mov	r18, r3
    81c2:	22 70       	andi	r18, 0x02	; 2
    81c4:	22 2e       	mov	r2, r18
    81c6:	88 23       	and	r24, r24
    81c8:	09 f4       	brne	.+2      	; 0x81cc <p_etoa+0x86>
    81ca:	70 c0       	rjmp	.+224    	; 0x82ac <p_etoa+0x166>
    81cc:	22 23       	and	r18, r18
    81ce:	b1 f0       	breq	.+44     	; 0x81fc <p_etoa+0xb6>
    81d0:	83 01       	movw	r16, r6
    81d2:	c1 2c       	mov	r12, r1
    81d4:	d1 2c       	mov	r13, r1
    81d6:	e1 2c       	mov	r14, r1
    81d8:	2f e3       	ldi	r18, 0x3F	; 63
    81da:	f2 2e       	mov	r15, r18
    81dc:	01 15       	cp	r16, r1
    81de:	11 05       	cpc	r17, r1
    81e0:	91 f0       	breq	.+36     	; 0x8206 <p_etoa+0xc0>
    81e2:	20 e0       	ldi	r18, 0x00	; 0
    81e4:	30 e0       	ldi	r19, 0x00	; 0
    81e6:	40 e2       	ldi	r20, 0x20	; 32
    81e8:	51 e4       	ldi	r21, 0x41	; 65
    81ea:	c7 01       	movw	r24, r14
    81ec:	b6 01       	movw	r22, r12
    81ee:	0e 94 e1 e5 	call	0x1cbc2	; 0x1cbc2 <__divsf3>
    81f2:	6b 01       	movw	r12, r22
    81f4:	7c 01       	movw	r14, r24
    81f6:	01 50       	subi	r16, 0x01	; 1
    81f8:	11 09       	sbc	r17, r1
    81fa:	f0 cf       	rjmp	.-32     	; 0x81dc <p_etoa+0x96>
    81fc:	c1 2c       	mov	r12, r1
    81fe:	d1 2c       	mov	r13, r1
    8200:	e1 2c       	mov	r14, r1
    8202:	9f e3       	ldi	r25, 0x3F	; 63
    8204:	f9 2e       	mov	r15, r25
    8206:	41 2c       	mov	r4, r1
    8208:	51 2c       	mov	r5, r1
    820a:	82 01       	movw	r16, r4
    820c:	01 50       	subi	r16, 0x01	; 1
    820e:	11 09       	sbc	r17, r1
    8210:	20 e0       	ldi	r18, 0x00	; 0
    8212:	30 e0       	ldi	r19, 0x00	; 0
    8214:	40 e8       	ldi	r20, 0x80	; 128
    8216:	5f e3       	ldi	r21, 0x3F	; 63
    8218:	c5 01       	movw	r24, r10
    821a:	b4 01       	movw	r22, r8
    821c:	0e 94 dd e5 	call	0x1cbba	; 0x1cbba <__cmpsf2>
    8220:	87 ff       	sbrs	r24, 7
    8222:	0c c0       	rjmp	.+24     	; 0x823c <p_etoa+0xf6>
    8224:	20 e0       	ldi	r18, 0x00	; 0
    8226:	30 e0       	ldi	r19, 0x00	; 0
    8228:	40 e2       	ldi	r20, 0x20	; 32
    822a:	51 e4       	ldi	r21, 0x41	; 65
    822c:	c5 01       	movw	r24, r10
    822e:	b4 01       	movw	r22, r8
    8230:	0e 94 30 e7 	call	0x1ce60	; 0x1ce60 <__mulsf3>
    8234:	4b 01       	movw	r8, r22
    8236:	5c 01       	movw	r10, r24
    8238:	28 01       	movw	r4, r16
    823a:	e7 cf       	rjmp	.-50     	; 0x820a <p_etoa+0xc4>
    823c:	82 01       	movw	r16, r4
    823e:	0f 5f       	subi	r16, 0xFF	; 255
    8240:	1f 4f       	sbci	r17, 0xFF	; 255
    8242:	20 e0       	ldi	r18, 0x00	; 0
    8244:	30 e0       	ldi	r19, 0x00	; 0
    8246:	40 e2       	ldi	r20, 0x20	; 32
    8248:	51 e4       	ldi	r21, 0x41	; 65
    824a:	c5 01       	movw	r24, r10
    824c:	b4 01       	movw	r22, r8
    824e:	0e 94 2c e7 	call	0x1ce58	; 0x1ce58 <__gesf2>
    8252:	87 fd       	sbrc	r24, 7
    8254:	0c c0       	rjmp	.+24     	; 0x826e <p_etoa+0x128>
    8256:	20 e0       	ldi	r18, 0x00	; 0
    8258:	30 e0       	ldi	r19, 0x00	; 0
    825a:	40 e2       	ldi	r20, 0x20	; 32
    825c:	51 e4       	ldi	r21, 0x41	; 65
    825e:	c5 01       	movw	r24, r10
    8260:	b4 01       	movw	r22, r8
    8262:	0e 94 e1 e5 	call	0x1cbc2	; 0x1cbc2 <__divsf3>
    8266:	4b 01       	movw	r8, r22
    8268:	5c 01       	movw	r10, r24
    826a:	28 01       	movw	r4, r16
    826c:	e7 cf       	rjmp	.-50     	; 0x823c <p_etoa+0xf6>
    826e:	a7 01       	movw	r20, r14
    8270:	96 01       	movw	r18, r12
    8272:	c5 01       	movw	r24, r10
    8274:	b4 01       	movw	r22, r8
    8276:	0e 94 79 e5 	call	0x1caf2	; 0x1caf2 <__addsf3>
    827a:	4b 01       	movw	r8, r22
    827c:	5c 01       	movw	r10, r24
    827e:	82 01       	movw	r16, r4
    8280:	3f ef       	ldi	r19, 0xFF	; 255
    8282:	43 1a       	sub	r4, r19
    8284:	53 0a       	sbc	r5, r19
    8286:	20 e0       	ldi	r18, 0x00	; 0
    8288:	30 e0       	ldi	r19, 0x00	; 0
    828a:	40 e2       	ldi	r20, 0x20	; 32
    828c:	51 e4       	ldi	r21, 0x41	; 65
    828e:	0e 94 2c e7 	call	0x1ce58	; 0x1ce58 <__gesf2>
    8292:	87 fd       	sbrc	r24, 7
    8294:	09 c0       	rjmp	.+18     	; 0x82a8 <p_etoa+0x162>
    8296:	20 e0       	ldi	r18, 0x00	; 0
    8298:	30 e0       	ldi	r19, 0x00	; 0
    829a:	40 e2       	ldi	r20, 0x20	; 32
    829c:	51 e4       	ldi	r21, 0x41	; 65
    829e:	c5 01       	movw	r24, r10
    82a0:	b4 01       	movw	r22, r8
    82a2:	0e 94 e1 e5 	call	0x1cbc2	; 0x1cbc2 <__divsf3>
    82a6:	e9 cf       	rjmp	.-46     	; 0x827a <p_etoa+0x134>
    82a8:	08 87       	std	Y+8, r16	; 0x08
    82aa:	19 87       	std	Y+9, r17	; 0x09
    82ac:	85 e6       	ldi	r24, 0x65	; 101
    82ae:	89 83       	std	Y+1, r24	; 0x01
    82b0:	88 85       	ldd	r24, Y+8	; 0x08
    82b2:	99 85       	ldd	r25, Y+9	; 0x09
    82b4:	97 ff       	sbrs	r25, 7
    82b6:	08 c0       	rjmp	.+16     	; 0x82c8 <p_etoa+0x182>
    82b8:	91 95       	neg	r25
    82ba:	81 95       	neg	r24
    82bc:	91 09       	sbc	r25, r1
    82be:	99 87       	std	Y+9, r25	; 0x09
    82c0:	88 87       	std	Y+8, r24	; 0x08
    82c2:	8d e2       	ldi	r24, 0x2D	; 45
    82c4:	90 e0       	ldi	r25, 0x00	; 0
    82c6:	02 c0       	rjmp	.+4      	; 0x82cc <p_etoa+0x186>
    82c8:	8b e2       	ldi	r24, 0x2B	; 43
    82ca:	90 e0       	ldi	r25, 0x00	; 0
    82cc:	6c 01       	movw	r12, r24
    82ce:	82 e0       	ldi	r24, 0x02	; 2
    82d0:	e8 2e       	mov	r14, r24
    82d2:	f1 2c       	mov	r15, r1
    82d4:	8e 01       	movw	r16, r28
    82d6:	08 5f       	subi	r16, 0xF8	; 248
    82d8:	1f 4f       	sbci	r17, 0xFF	; 255
    82da:	2a e0       	ldi	r18, 0x0A	; 10
    82dc:	30 e0       	ldi	r19, 0x00	; 0
    82de:	42 e0       	ldi	r20, 0x02	; 2
    82e0:	50 e0       	ldi	r21, 0x00	; 0
    82e2:	65 e0       	ldi	r22, 0x05	; 5
    82e4:	70 e0       	ldi	r23, 0x00	; 0
    82e6:	ce 01       	movw	r24, r28
    82e8:	02 96       	adiw	r24, 0x02	; 2
    82ea:	17 dd       	rcall	.-1490   	; 0x7d1a <bin2num>
    82ec:	9c 01       	movw	r18, r24
    82ee:	93 2d       	mov	r25, r3
    82f0:	98 72       	andi	r25, 0x28	; 40
    82f2:	90 32       	cpi	r25, 0x20	; 32
    82f4:	61 f0       	breq	.+24     	; 0x830e <p_etoa+0x1c8>
    82f6:	c5 01       	movw	r24, r10
    82f8:	b4 01       	movw	r22, r8
    82fa:	0e 94 49 e6 	call	0x1cc92	; 0x1cc92 <__fixsfsi>
    82fe:	6b 01       	movw	r12, r22
    8300:	7c 01       	movw	r14, r24
    8302:	80 e3       	ldi	r24, 0x30	; 48
    8304:	8c 0d       	add	r24, r12
    8306:	9f dd       	rcall	.-1218   	; 0x7e46 <pch>
    8308:	21 10       	cpse	r2, r1
    830a:	20 c0       	rjmp	.+64     	; 0x834c <p_etoa+0x206>
    830c:	5e c0       	rjmp	.+188    	; 0x83ca <p_etoa+0x284>
    830e:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <_pch+0x2>
    8312:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <_pch+0x3>
    8316:	0c 85       	ldd	r16, Y+12	; 0x0c
    8318:	1d 85       	ldd	r17, Y+13	; 0x0d
    831a:	08 1b       	sub	r16, r24
    831c:	19 0b       	sbc	r17, r25
    831e:	22 20       	and	r2, r2
    8320:	41 f0       	breq	.+16     	; 0x8332 <p_etoa+0x1ec>
    8322:	61 14       	cp	r6, r1
    8324:	71 04       	cpc	r7, r1
    8326:	29 f0       	breq	.+10     	; 0x8332 <p_etoa+0x1ec>
    8328:	06 19       	sub	r16, r6
    832a:	17 09       	sbc	r17, r7
    832c:	06 50       	subi	r16, 0x06	; 6
    832e:	11 09       	sbc	r17, r1
    8330:	02 c0       	rjmp	.+4      	; 0x8336 <p_etoa+0x1f0>
    8332:	05 50       	subi	r16, 0x05	; 5
    8334:	11 09       	sbc	r17, r1
    8336:	24 30       	cpi	r18, 0x04	; 4
    8338:	31 05       	cpc	r19, r1
    833a:	14 f0       	brlt	.+4      	; 0x8340 <p_etoa+0x1fa>
    833c:	01 50       	subi	r16, 0x01	; 1
    833e:	11 09       	sbc	r17, r1
    8340:	10 16       	cp	r1, r16
    8342:	11 06       	cpc	r1, r17
    8344:	c4 f6       	brge	.-80     	; 0x82f6 <p_etoa+0x1b0>
    8346:	80 e3       	ldi	r24, 0x30	; 48
    8348:	7e dd       	rcall	.-1284   	; 0x7e46 <pch>
    834a:	f8 cf       	rjmp	.-16     	; 0x833c <p_etoa+0x1f6>
    834c:	61 14       	cp	r6, r1
    834e:	71 04       	cpc	r7, r1
    8350:	09 f4       	brne	.+2      	; 0x8354 <p_etoa+0x20e>
    8352:	3b c0       	rjmp	.+118    	; 0x83ca <p_etoa+0x284>
    8354:	b6 01       	movw	r22, r12
    8356:	dd 0c       	add	r13, r13
    8358:	88 0b       	sbc	r24, r24
    835a:	99 0b       	sbc	r25, r25
    835c:	0e 94 7c e6 	call	0x1ccf8	; 0x1ccf8 <__floatsisf>
    8360:	9b 01       	movw	r18, r22
    8362:	ac 01       	movw	r20, r24
    8364:	c5 01       	movw	r24, r10
    8366:	b4 01       	movw	r22, r8
    8368:	0e 94 78 e5 	call	0x1caf0	; 0x1caf0 <__subsf3>
    836c:	20 e0       	ldi	r18, 0x00	; 0
    836e:	30 e0       	ldi	r19, 0x00	; 0
    8370:	40 e2       	ldi	r20, 0x20	; 32
    8372:	51 e4       	ldi	r21, 0x41	; 65
    8374:	0e 94 30 e7 	call	0x1ce60	; 0x1ce60 <__mulsf3>
    8378:	6b 01       	movw	r12, r22
    837a:	7c 01       	movw	r14, r24
    837c:	8e e2       	ldi	r24, 0x2E	; 46
    837e:	63 dd       	rcall	.-1338   	; 0x7e46 <pch>
    8380:	c7 01       	movw	r24, r14
    8382:	b6 01       	movw	r22, r12
    8384:	0e 94 49 e6 	call	0x1cc92	; 0x1cc92 <__fixsfsi>
    8388:	4b 01       	movw	r8, r22
    838a:	5c 01       	movw	r10, r24
    838c:	07 2e       	mov	r0, r23
    838e:	00 0c       	add	r0, r0
    8390:	88 0b       	sbc	r24, r24
    8392:	99 0b       	sbc	r25, r25
    8394:	0e 94 7c e6 	call	0x1ccf8	; 0x1ccf8 <__floatsisf>
    8398:	9b 01       	movw	r18, r22
    839a:	ac 01       	movw	r20, r24
    839c:	c7 01       	movw	r24, r14
    839e:	b6 01       	movw	r22, r12
    83a0:	0e 94 78 e5 	call	0x1caf0	; 0x1caf0 <__subsf3>
    83a4:	6b 01       	movw	r12, r22
    83a6:	7c 01       	movw	r14, r24
    83a8:	80 e3       	ldi	r24, 0x30	; 48
    83aa:	88 0d       	add	r24, r8
    83ac:	4c dd       	rcall	.-1384   	; 0x7e46 <pch>
    83ae:	20 e0       	ldi	r18, 0x00	; 0
    83b0:	30 e0       	ldi	r19, 0x00	; 0
    83b2:	40 e2       	ldi	r20, 0x20	; 32
    83b4:	51 e4       	ldi	r21, 0x41	; 65
    83b6:	c7 01       	movw	r24, r14
    83b8:	b6 01       	movw	r22, r12
    83ba:	0e 94 30 e7 	call	0x1ce60	; 0x1ce60 <__mulsf3>
    83be:	6b 01       	movw	r12, r22
    83c0:	7c 01       	movw	r14, r24
    83c2:	81 e0       	ldi	r24, 0x01	; 1
    83c4:	68 1a       	sub	r6, r24
    83c6:	71 08       	sbc	r7, r1
    83c8:	d9 f6       	brne	.-74     	; 0x8380 <p_etoa+0x23a>
    83ca:	8e 01       	movw	r16, r28
    83cc:	0f 5f       	subi	r16, 0xFF	; 255
    83ce:	1f 4f       	sbci	r17, 0xFF	; 255
    83d0:	f8 01       	movw	r30, r16
    83d2:	81 91       	ld	r24, Z+
    83d4:	8f 01       	movw	r16, r30
    83d6:	88 23       	and	r24, r24
    83d8:	11 f0       	breq	.+4      	; 0x83de <p_etoa+0x298>
    83da:	35 dd       	rcall	.-1430   	; 0x7e46 <pch>
    83dc:	f9 cf       	rjmp	.-14     	; 0x83d0 <p_etoa+0x28a>
    83de:	33 dd       	rcall	.-1434   	; 0x7e46 <pch>
    83e0:	ea 85       	ldd	r30, Y+10	; 0x0a
    83e2:	fb 85       	ldd	r31, Y+11	; 0x0b
    83e4:	01 90       	ld	r0, Z+
    83e6:	00 20       	and	r0, r0
    83e8:	e9 f7       	brne	.-6      	; 0x83e4 <p_etoa+0x29e>
    83ea:	cf 01       	movw	r24, r30
    83ec:	01 97       	sbiw	r24, 0x01	; 1
    83ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    83f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    83f2:	82 1b       	sub	r24, r18
    83f4:	93 0b       	sbc	r25, r19
    83f6:	2d 96       	adiw	r28, 0x0d	; 13
    83f8:	e2 e1       	ldi	r30, 0x12	; 18
    83fa:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

000083fe <_puts_pad>:
    83fe:	a0 e0       	ldi	r26, 0x00	; 0
    8400:	b0 e0       	ldi	r27, 0x00	; 0
    8402:	e5 e0       	ldi	r30, 0x05	; 5
    8404:	f2 e4       	ldi	r31, 0x42	; 66
    8406:	0c 94 34 e5 	jmp	0x1ca68	; 0x1ca68 <__prologue_saves__+0xc>
    840a:	6c 01       	movw	r12, r24
    840c:	4b 01       	movw	r8, r22
    840e:	79 01       	movw	r14, r18
    8410:	24 17       	cp	r18, r20
    8412:	35 07       	cpc	r19, r21
    8414:	24 f4       	brge	.+8      	; 0x841e <_puts_pad+0x20>
    8416:	ea 01       	movw	r28, r20
    8418:	c2 1b       	sub	r28, r18
    841a:	d3 0b       	sbc	r29, r19
    841c:	02 c0       	rjmp	.+4      	; 0x8422 <_puts_pad+0x24>
    841e:	c0 e0       	ldi	r28, 0x00	; 0
    8420:	d0 e0       	ldi	r29, 0x00	; 0
    8422:	01 15       	cp	r16, r1
    8424:	11 05       	cpc	r17, r1
    8426:	49 f4       	brne	.+18     	; 0x843a <_puts_pad+0x3c>
    8428:	21 97       	sbiw	r28, 0x01	; 1
    842a:	38 f0       	brcs	.+14     	; 0x843a <_puts_pad+0x3c>
    842c:	d6 01       	movw	r26, r12
    842e:	ed 91       	ld	r30, X+
    8430:	fc 91       	ld	r31, X
    8432:	60 e2       	ldi	r22, 0x20	; 32
    8434:	c6 01       	movw	r24, r12
    8436:	09 95       	icall
    8438:	f7 cf       	rjmp	.-18     	; 0x8428 <_puts_pad+0x2a>
    843a:	54 01       	movw	r10, r8
    843c:	f5 01       	movw	r30, r10
    843e:	61 91       	ld	r22, Z+
    8440:	5f 01       	movw	r10, r30
    8442:	66 23       	and	r22, r22
    8444:	61 f0       	breq	.+24     	; 0x845e <_puts_pad+0x60>
    8446:	e1 14       	cp	r14, r1
    8448:	f1 04       	cpc	r15, r1
    844a:	49 f0       	breq	.+18     	; 0x845e <_puts_pad+0x60>
    844c:	d6 01       	movw	r26, r12
    844e:	ed 91       	ld	r30, X+
    8450:	fc 91       	ld	r31, X
    8452:	c6 01       	movw	r24, r12
    8454:	09 95       	icall
    8456:	b1 e0       	ldi	r27, 0x01	; 1
    8458:	eb 1a       	sub	r14, r27
    845a:	f1 08       	sbc	r15, r1
    845c:	ef cf       	rjmp	.-34     	; 0x843c <_puts_pad+0x3e>
    845e:	01 15       	cp	r16, r1
    8460:	11 05       	cpc	r17, r1
    8462:	51 f0       	breq	.+20     	; 0x8478 <_puts_pad+0x7a>
    8464:	20 97       	sbiw	r28, 0x00	; 0
    8466:	41 f0       	breq	.+16     	; 0x8478 <_puts_pad+0x7a>
    8468:	d6 01       	movw	r26, r12
    846a:	ed 91       	ld	r30, X+
    846c:	fc 91       	ld	r31, X
    846e:	60 e2       	ldi	r22, 0x20	; 32
    8470:	c6 01       	movw	r24, r12
    8472:	09 95       	icall
    8474:	21 97       	sbiw	r28, 0x01	; 1
    8476:	f6 cf       	rjmp	.-20     	; 0x8464 <_puts_pad+0x66>
    8478:	cd b7       	in	r28, 0x3d	; 61
    847a:	de b7       	in	r29, 0x3e	; 62
    847c:	ec e0       	ldi	r30, 0x0C	; 12
    847e:	0c 94 50 e5 	jmp	0x1caa0	; 0x1caa0 <__epilogue_restores__+0xc>

00008482 <_printf_fn>:
    8482:	ab e6       	ldi	r26, 0x6B	; 107
    8484:	b0 e0       	ldi	r27, 0x00	; 0
    8486:	e7 e4       	ldi	r30, 0x47	; 71
    8488:	f2 e4       	ldi	r31, 0x42	; 66
    848a:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    848e:	a5 96       	adiw	r28, 0x25	; 37
    8490:	9f af       	std	Y+63, r25	; 0x3f
    8492:	8e af       	std	Y+62, r24	; 0x3e
    8494:	a5 97       	sbiw	r28, 0x25	; 37
    8496:	6a 01       	movw	r12, r20
    8498:	e6 2e       	mov	r14, r22
    849a:	19 01       	movw	r2, r18
    849c:	a9 96       	adiw	r28, 0x29	; 41
    849e:	1c ae       	std	Y+60, r1	; 0x3c
    84a0:	1d ae       	std	Y+61, r1	; 0x3d
    84a2:	1e ae       	std	Y+62, r1	; 0x3e
    84a4:	1f ae       	std	Y+63, r1	; 0x3f
    84a6:	a9 97       	sbiw	r28, 0x29	; 41
    84a8:	9e 01       	movw	r18, r28
    84aa:	2f 5a       	subi	r18, 0xAF	; 175
    84ac:	3f 4f       	sbci	r19, 0xFF	; 255
    84ae:	67 96       	adiw	r28, 0x17	; 23
    84b0:	3f af       	std	Y+63, r19	; 0x3f
    84b2:	2e af       	std	Y+62, r18	; 0x3e
    84b4:	67 97       	sbiw	r28, 0x17	; 23
    84b6:	ae 01       	movw	r20, r28
    84b8:	4d 5b       	subi	r20, 0xBD	; 189
    84ba:	5f 4f       	sbci	r21, 0xFF	; 255
    84bc:	69 96       	adiw	r28, 0x19	; 25
    84be:	5f af       	std	Y+63, r21	; 0x3f
    84c0:	4e af       	std	Y+62, r20	; 0x3e
    84c2:	69 97       	sbiw	r28, 0x19	; 25
    84c4:	ce 01       	movw	r24, r28
    84c6:	85 5b       	subi	r24, 0xB5	; 181
    84c8:	9f 4f       	sbci	r25, 0xFF	; 255
    84ca:	6b 96       	adiw	r28, 0x1b	; 27
    84cc:	9f af       	std	Y+63, r25	; 0x3f
    84ce:	8e af       	std	Y+62, r24	; 0x3e
    84d0:	6b 97       	sbiw	r28, 0x1b	; 27
    84d2:	de 01       	movw	r26, r28
    84d4:	ad 5a       	subi	r26, 0xAD	; 173
    84d6:	bf 4f       	sbci	r27, 0xFF	; 255
    84d8:	6d 96       	adiw	r28, 0x1d	; 29
    84da:	bf af       	std	Y+63, r27	; 0x3f
    84dc:	ae af       	std	Y+62, r26	; 0x3e
    84de:	6d 97       	sbiw	r28, 0x1d	; 29
    84e0:	f6 01       	movw	r30, r12
    84e2:	5e 2d       	mov	r21, r14
    84e4:	0e 94 65 e5 	call	0x1caca	; 0x1caca <__xload_1>
    84e8:	66 23       	and	r22, r22
    84ea:	09 f4       	brne	.+2      	; 0x84ee <_printf_fn+0x6c>
    84ec:	df c3       	rjmp	.+1982   	; 0x8cac <_printf_fn+0x82a>
    84ee:	ae 2d       	mov	r26, r14
    84f0:	c6 01       	movw	r24, r12
    84f2:	01 96       	adiw	r24, 0x01	; 1
    84f4:	a1 1d       	adc	r26, r1
    84f6:	3c 01       	movw	r6, r24
    84f8:	8a 2e       	mov	r8, r26
    84fa:	65 32       	cpi	r22, 0x25	; 37
    84fc:	51 f0       	breq	.+20     	; 0x8512 <_printf_fn+0x90>
    84fe:	a5 96       	adiw	r28, 0x25	; 37
    8500:	ae ad       	ldd	r26, Y+62	; 0x3e
    8502:	bf ad       	ldd	r27, Y+63	; 0x3f
    8504:	a5 97       	sbiw	r28, 0x25	; 37
    8506:	ed 91       	ld	r30, X+
    8508:	fc 91       	ld	r31, X
    850a:	11 97       	sbiw	r26, 0x01	; 1
    850c:	cd 01       	movw	r24, r26
    850e:	09 95       	icall
    8510:	99 c3       	rjmp	.+1842   	; 0x8c44 <_printf_fn+0x7c2>
    8512:	91 2c       	mov	r9, r1
    8514:	f3 01       	movw	r30, r6
    8516:	58 2d       	mov	r21, r8
    8518:	0e 94 65 e5 	call	0x1caca	; 0x1caca <__xload_1>
    851c:	63 32       	cpi	r22, 0x23	; 35
    851e:	19 f4       	brne	.+6      	; 0x8526 <_printf_fn+0xa4>
    8520:	68 94       	set
    8522:	97 f8       	bld	r9, 7
    8524:	04 c0       	rjmp	.+8      	; 0x852e <_printf_fn+0xac>
    8526:	6b 32       	cpi	r22, 0x2B	; 43
    8528:	39 f4       	brne	.+14     	; 0x8538 <_printf_fn+0xb6>
    852a:	68 94       	set
    852c:	92 f8       	bld	r9, 2
    852e:	bf ef       	ldi	r27, 0xFF	; 255
    8530:	6b 1a       	sub	r6, r27
    8532:	7b 0a       	sbc	r7, r27
    8534:	8b 0a       	sbc	r8, r27
    8536:	ee cf       	rjmp	.-36     	; 0x8514 <_printf_fn+0x92>
    8538:	6d 32       	cpi	r22, 0x2D	; 45
    853a:	a9 f4       	brne	.+42     	; 0x8566 <_printf_fn+0xe4>
    853c:	93 fc       	sbrc	r9, 3
    853e:	05 c0       	rjmp	.+10     	; 0x854a <_printf_fn+0xc8>
    8540:	6d 32       	cpi	r22, 0x2D	; 45
    8542:	19 f4       	brne	.+6      	; 0x854a <_printf_fn+0xc8>
    8544:	68 94       	set
    8546:	93 f8       	bld	r9, 3
    8548:	f2 cf       	rjmp	.-28     	; 0x852e <_printf_fn+0xac>
    854a:	94 fc       	sbrc	r9, 4
    854c:	05 c0       	rjmp	.+10     	; 0x8558 <_printf_fn+0xd6>
    854e:	60 32       	cpi	r22, 0x20	; 32
    8550:	19 f4       	brne	.+6      	; 0x8558 <_printf_fn+0xd6>
    8552:	68 94       	set
    8554:	94 f8       	bld	r9, 4
    8556:	eb cf       	rjmp	.-42     	; 0x852e <_printf_fn+0xac>
    8558:	95 fc       	sbrc	r9, 5
    855a:	e9 cf       	rjmp	.-46     	; 0x852e <_printf_fn+0xac>
    855c:	60 33       	cpi	r22, 0x30	; 48
    855e:	39 f7       	brne	.-50     	; 0x852e <_printf_fn+0xac>
    8560:	68 94       	set
    8562:	95 f8       	bld	r9, 5
    8564:	e4 cf       	rjmp	.-56     	; 0x852e <_printf_fn+0xac>
    8566:	86 2f       	mov	r24, r22
    8568:	8f 7e       	andi	r24, 0xEF	; 239
    856a:	80 32       	cpi	r24, 0x20	; 32
    856c:	39 f3       	breq	.-50     	; 0x853c <_printf_fn+0xba>
    856e:	70 e0       	ldi	r23, 0x00	; 0
    8570:	60 53       	subi	r22, 0x30	; 48
    8572:	71 09       	sbc	r23, r1
    8574:	41 2c       	mov	r4, r1
    8576:	51 2c       	mov	r5, r1
    8578:	6a 30       	cpi	r22, 0x0A	; 10
    857a:	71 05       	cpc	r23, r1
    857c:	e0 f4       	brcc	.+56     	; 0x85b6 <_printf_fn+0x134>
    857e:	2a e0       	ldi	r18, 0x0A	; 10
    8580:	f3 01       	movw	r30, r6
    8582:	58 2d       	mov	r21, r8
    8584:	0e 94 65 e5 	call	0x1caca	; 0x1caca <__xload_1>
    8588:	70 e0       	ldi	r23, 0x00	; 0
    858a:	cb 01       	movw	r24, r22
    858c:	c0 97       	sbiw	r24, 0x30	; 48
    858e:	0a 97       	sbiw	r24, 0x0a	; 10
    8590:	80 f4       	brcc	.+32     	; 0x85b2 <_printf_fn+0x130>
    8592:	ef ef       	ldi	r30, 0xFF	; 255
    8594:	6e 1a       	sub	r6, r30
    8596:	7e 0a       	sbc	r7, r30
    8598:	8e 0a       	sbc	r8, r30
    859a:	24 9d       	mul	r18, r4
    859c:	c0 01       	movw	r24, r0
    859e:	25 9d       	mul	r18, r5
    85a0:	90 0d       	add	r25, r0
    85a2:	11 24       	eor	r1, r1
    85a4:	68 0f       	add	r22, r24
    85a6:	79 1f       	adc	r23, r25
    85a8:	2b 01       	movw	r4, r22
    85aa:	f0 e3       	ldi	r31, 0x30	; 48
    85ac:	4f 1a       	sub	r4, r31
    85ae:	51 08       	sbc	r5, r1
    85b0:	e7 cf       	rjmp	.-50     	; 0x8580 <_printf_fn+0xfe>
    85b2:	68 94       	set
    85b4:	90 f8       	bld	r9, 0
    85b6:	f3 01       	movw	r30, r6
    85b8:	58 2d       	mov	r21, r8
    85ba:	0e 94 65 e5 	call	0x1caca	; 0x1caca <__xload_1>
    85be:	6e 32       	cpi	r22, 0x2E	; 46
    85c0:	59 f5       	brne	.+86     	; 0x8618 <_printf_fn+0x196>
    85c2:	2f ef       	ldi	r18, 0xFF	; 255
    85c4:	62 1a       	sub	r6, r18
    85c6:	72 0a       	sbc	r7, r18
    85c8:	82 0a       	sbc	r8, r18
    85ca:	a1 96       	adiw	r28, 0x21	; 33
    85cc:	1f ae       	std	Y+63, r1	; 0x3f
    85ce:	1e ae       	std	Y+62, r1	; 0x3e
    85d0:	a1 97       	sbiw	r28, 0x21	; 33
    85d2:	2a e0       	ldi	r18, 0x0A	; 10
    85d4:	f3 01       	movw	r30, r6
    85d6:	58 2d       	mov	r21, r8
    85d8:	0e 94 65 e5 	call	0x1caca	; 0x1caca <__xload_1>
    85dc:	70 e0       	ldi	r23, 0x00	; 0
    85de:	cb 01       	movw	r24, r22
    85e0:	c0 97       	sbiw	r24, 0x30	; 48
    85e2:	0a 97       	sbiw	r24, 0x0a	; 10
    85e4:	b0 f4       	brcc	.+44     	; 0x8612 <_printf_fn+0x190>
    85e6:	3f ef       	ldi	r19, 0xFF	; 255
    85e8:	63 1a       	sub	r6, r19
    85ea:	73 0a       	sbc	r7, r19
    85ec:	83 0a       	sbc	r8, r19
    85ee:	a1 96       	adiw	r28, 0x21	; 33
    85f0:	4e ad       	ldd	r20, Y+62	; 0x3e
    85f2:	5f ad       	ldd	r21, Y+63	; 0x3f
    85f4:	a1 97       	sbiw	r28, 0x21	; 33
    85f6:	24 9f       	mul	r18, r20
    85f8:	c0 01       	movw	r24, r0
    85fa:	25 9f       	mul	r18, r21
    85fc:	90 0d       	add	r25, r0
    85fe:	11 24       	eor	r1, r1
    8600:	68 0f       	add	r22, r24
    8602:	79 1f       	adc	r23, r25
    8604:	cb 01       	movw	r24, r22
    8606:	c0 97       	sbiw	r24, 0x30	; 48
    8608:	a1 96       	adiw	r28, 0x21	; 33
    860a:	9f af       	std	Y+63, r25	; 0x3f
    860c:	8e af       	std	Y+62, r24	; 0x3e
    860e:	a1 97       	sbiw	r28, 0x21	; 33
    8610:	e1 cf       	rjmp	.-62     	; 0x85d4 <_printf_fn+0x152>
    8612:	68 94       	set
    8614:	91 f8       	bld	r9, 1
    8616:	04 c0       	rjmp	.+8      	; 0x8620 <_printf_fn+0x19e>
    8618:	a1 96       	adiw	r28, 0x21	; 33
    861a:	1f ae       	std	Y+63, r1	; 0x3f
    861c:	1e ae       	std	Y+62, r1	; 0x3e
    861e:	a1 97       	sbiw	r28, 0x21	; 33
    8620:	f3 01       	movw	r30, r6
    8622:	58 2d       	mov	r21, r8
    8624:	0e 94 65 e5 	call	0x1caca	; 0x1caca <__xload_1>
    8628:	69 34       	cpi	r22, 0x49	; 73
    862a:	09 f0       	breq	.+2      	; 0x862e <_printf_fn+0x1ac>
    862c:	45 c0       	rjmp	.+138    	; 0x86b8 <_printf_fn+0x236>
    862e:	9f ef       	ldi	r25, 0xFF	; 255
    8630:	69 1a       	sub	r6, r25
    8632:	79 0a       	sbc	r7, r25
    8634:	89 0a       	sbc	r8, r25
    8636:	6f 96       	adiw	r28, 0x1f	; 31
    8638:	1f ae       	std	Y+63, r1	; 0x3f
    863a:	1e ae       	std	Y+62, r1	; 0x3e
    863c:	6f 97       	sbiw	r28, 0x1f	; 31
    863e:	2a e0       	ldi	r18, 0x0A	; 10
    8640:	f3 01       	movw	r30, r6
    8642:	58 2d       	mov	r21, r8
    8644:	0e 94 65 e5 	call	0x1caca	; 0x1caca <__xload_1>
    8648:	70 e0       	ldi	r23, 0x00	; 0
    864a:	cb 01       	movw	r24, r22
    864c:	c0 97       	sbiw	r24, 0x30	; 48
    864e:	0a 97       	sbiw	r24, 0x0a	; 10
    8650:	b8 f4       	brcc	.+46     	; 0x8680 <_printf_fn+0x1fe>
    8652:	af ef       	ldi	r26, 0xFF	; 255
    8654:	6a 1a       	sub	r6, r26
    8656:	7a 0a       	sbc	r7, r26
    8658:	8a 0a       	sbc	r8, r26
    865a:	6f 96       	adiw	r28, 0x1f	; 31
    865c:	ee ad       	ldd	r30, Y+62	; 0x3e
    865e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8660:	6f 97       	sbiw	r28, 0x1f	; 31
    8662:	2e 9f       	mul	r18, r30
    8664:	c0 01       	movw	r24, r0
    8666:	2f 9f       	mul	r18, r31
    8668:	90 0d       	add	r25, r0
    866a:	11 24       	eor	r1, r1
    866c:	68 0f       	add	r22, r24
    866e:	79 1f       	adc	r23, r25
    8670:	ab 01       	movw	r20, r22
    8672:	40 53       	subi	r20, 0x30	; 48
    8674:	51 09       	sbc	r21, r1
    8676:	6f 96       	adiw	r28, 0x1f	; 31
    8678:	5f af       	std	Y+63, r21	; 0x3f
    867a:	4e af       	std	Y+62, r20	; 0x3e
    867c:	6f 97       	sbiw	r28, 0x1f	; 31
    867e:	e0 cf       	rjmp	.-64     	; 0x8640 <_printf_fn+0x1be>
    8680:	6f 96       	adiw	r28, 0x1f	; 31
    8682:	8e ad       	ldd	r24, Y+62	; 0x3e
    8684:	9f ad       	ldd	r25, Y+63	; 0x3f
    8686:	6f 97       	sbiw	r28, 0x1f	; 31
    8688:	00 97       	sbiw	r24, 0x00	; 0
    868a:	09 f4       	brne	.+2      	; 0x868e <_printf_fn+0x20c>
    868c:	4f c0       	rjmp	.+158    	; 0x872c <_printf_fn+0x2aa>
    868e:	87 70       	andi	r24, 0x07	; 7
    8690:	99 27       	eor	r25, r25
    8692:	89 2b       	or	r24, r25
    8694:	09 f0       	breq	.+2      	; 0x8698 <_printf_fn+0x216>
    8696:	46 c0       	rjmp	.+140    	; 0x8724 <_printf_fn+0x2a2>
    8698:	6f 96       	adiw	r28, 0x1f	; 31
    869a:	ae ad       	ldd	r26, Y+62	; 0x3e
    869c:	bf ad       	ldd	r27, Y+63	; 0x3f
    869e:	6f 97       	sbiw	r28, 0x1f	; 31
    86a0:	83 e0       	ldi	r24, 0x03	; 3
    86a2:	b5 95       	asr	r27
    86a4:	a7 95       	ror	r26
    86a6:	8a 95       	dec	r24
    86a8:	e1 f7       	brne	.-8      	; 0x86a2 <_printf_fn+0x220>
    86aa:	6f 96       	adiw	r28, 0x1f	; 31
    86ac:	bf af       	std	Y+63, r27	; 0x3f
    86ae:	ae af       	std	Y+62, r26	; 0x3e
    86b0:	6f 97       	sbiw	r28, 0x1f	; 31
    86b2:	ab 2b       	or	r26, r27
    86b4:	d9 f1       	breq	.+118    	; 0x872c <_printf_fn+0x2aa>
    86b6:	27 c0       	rjmp	.+78     	; 0x8706 <_printf_fn+0x284>
    86b8:	68 36       	cpi	r22, 0x68	; 104
    86ba:	29 f4       	brne	.+10     	; 0x86c6 <_printf_fn+0x244>
    86bc:	bf ef       	ldi	r27, 0xFF	; 255
    86be:	6b 1a       	sub	r6, r27
    86c0:	7b 0a       	sbc	r7, r27
    86c2:	8b 0a       	sbc	r8, r27
    86c4:	c2 c2       	rjmp	.+1412   	; 0x8c4a <_printf_fn+0x7c8>
    86c6:	6c 36       	cpi	r22, 0x6C	; 108
    86c8:	09 f0       	breq	.+2      	; 0x86cc <_printf_fn+0x24a>
    86ca:	bf c2       	rjmp	.+1406   	; 0x8c4a <_printf_fn+0x7c8>
    86cc:	a8 2d       	mov	r26, r8
    86ce:	c3 01       	movw	r24, r6
    86d0:	01 96       	adiw	r24, 0x01	; 1
    86d2:	a1 1d       	adc	r26, r1
    86d4:	fc 01       	movw	r30, r24
    86d6:	5a 2f       	mov	r21, r26
    86d8:	0e 94 65 e5 	call	0x1caca	; 0x1caca <__xload_1>
    86dc:	6c 36       	cpi	r22, 0x6C	; 108
    86de:	49 f0       	breq	.+18     	; 0x86f2 <_printf_fn+0x270>
    86e0:	3c 01       	movw	r6, r24
    86e2:	8a 2e       	mov	r8, r26
    86e4:	24 e0       	ldi	r18, 0x04	; 4
    86e6:	30 e0       	ldi	r19, 0x00	; 0
    86e8:	6f 96       	adiw	r28, 0x1f	; 31
    86ea:	3f af       	std	Y+63, r19	; 0x3f
    86ec:	2e af       	std	Y+62, r18	; 0x3e
    86ee:	6f 97       	sbiw	r28, 0x1f	; 31
    86f0:	0a c0       	rjmp	.+20     	; 0x8706 <_printf_fn+0x284>
    86f2:	32 e0       	ldi	r19, 0x02	; 2
    86f4:	63 0e       	add	r6, r19
    86f6:	71 1c       	adc	r7, r1
    86f8:	81 1c       	adc	r8, r1
    86fa:	48 e0       	ldi	r20, 0x08	; 8
    86fc:	50 e0       	ldi	r21, 0x00	; 0
    86fe:	6f 96       	adiw	r28, 0x1f	; 31
    8700:	5f af       	std	Y+63, r21	; 0x3f
    8702:	4e af       	std	Y+62, r20	; 0x3e
    8704:	6f 97       	sbiw	r28, 0x1f	; 31
    8706:	f3 01       	movw	r30, r6
    8708:	58 2d       	mov	r21, r8
    870a:	0e 94 65 e5 	call	0x1caca	; 0x1caca <__xload_1>
    870e:	86 2f       	mov	r24, r22
    8710:	90 e0       	ldi	r25, 0x00	; 0
    8712:	a3 96       	adiw	r28, 0x23	; 35
    8714:	9f af       	std	Y+63, r25	; 0x3f
    8716:	8e af       	std	Y+62, r24	; 0x3e
    8718:	a3 97       	sbiw	r28, 0x23	; 35
    871a:	84 36       	cpi	r24, 0x64	; 100
    871c:	91 05       	cpc	r25, r1
    871e:	09 f4       	brne	.+2      	; 0x8722 <_printf_fn+0x2a0>
    8720:	9b c2       	rjmp	.+1334   	; 0x8c58 <_printf_fn+0x7d6>
    8722:	08 c0       	rjmp	.+16     	; 0x8734 <_printf_fn+0x2b2>
    8724:	6f 96       	adiw	r28, 0x1f	; 31
    8726:	1f ae       	std	Y+63, r1	; 0x3f
    8728:	1e ae       	std	Y+62, r1	; 0x3e
    872a:	6f 97       	sbiw	r28, 0x1f	; 31
    872c:	a3 96       	adiw	r28, 0x23	; 35
    872e:	1f ae       	std	Y+63, r1	; 0x3f
    8730:	1e ae       	std	Y+62, r1	; 0x3e
    8732:	a3 97       	sbiw	r28, 0x23	; 35
    8734:	31 e0       	ldi	r19, 0x01	; 1
    8736:	20 e0       	ldi	r18, 0x00	; 0
    8738:	a3 96       	adiw	r28, 0x23	; 35
    873a:	ae ad       	ldd	r26, Y+62	; 0x3e
    873c:	bf ad       	ldd	r27, Y+63	; 0x3f
    873e:	a3 97       	sbiw	r28, 0x23	; 35
    8740:	a4 34       	cpi	r26, 0x44	; 68
    8742:	b1 05       	cpc	r27, r1
    8744:	09 f0       	breq	.+2      	; 0x8748 <_printf_fn+0x2c6>
    8746:	30 e0       	ldi	r19, 0x00	; 0
    8748:	83 2f       	mov	r24, r19
    874a:	92 2f       	mov	r25, r18
    874c:	a3 96       	adiw	r28, 0x23	; 35
    874e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8750:	ff ad       	ldd	r31, Y+63	; 0x3f
    8752:	a3 97       	sbiw	r28, 0x23	; 35
    8754:	e2 54       	subi	r30, 0x42	; 66
    8756:	f1 09       	sbc	r31, r1
    8758:	e7 33       	cpi	r30, 0x37	; 55
    875a:	f1 05       	cpc	r31, r1
    875c:	08 f0       	brcs	.+2      	; 0x8760 <_printf_fn+0x2de>
    875e:	65 c1       	rjmp	.+714    	; 0x8a2a <_printf_fn+0x5a8>
    8760:	ea 5b       	subi	r30, 0xBA	; 186
    8762:	ff 4f       	sbci	r31, 0xFF	; 255
    8764:	0c 94 ea e4 	jmp	0x1c9d4	; 0x1c9d4 <__tablejump2__>
    8768:	e2 e0       	ldi	r30, 0x02	; 2
    876a:	f0 e0       	ldi	r31, 0x00	; 0
    876c:	6f 96       	adiw	r28, 0x1f	; 31
    876e:	ff af       	std	Y+63, r31	; 0x3f
    8770:	ee af       	std	Y+62, r30	; 0x3e
    8772:	6f 97       	sbiw	r28, 0x1f	; 31
    8774:	29 2d       	mov	r18, r9
    8776:	28 72       	andi	r18, 0x28	; 40
    8778:	28 32       	cpi	r18, 0x28	; 40
    877a:	11 f4       	brne	.+4      	; 0x8780 <_printf_fn+0x2fe>
    877c:	e8 94       	clt
    877e:	95 f8       	bld	r9, 5
    8780:	29 2d       	mov	r18, r9
    8782:	22 72       	andi	r18, 0x22	; 34
    8784:	22 32       	cpi	r18, 0x22	; 34
    8786:	11 f4       	brne	.+4      	; 0x878c <_printf_fn+0x30a>
    8788:	e8 94       	clt
    878a:	95 f8       	bld	r9, 5
    878c:	29 2d       	mov	r18, r9
    878e:	21 72       	andi	r18, 0x21	; 33
    8790:	21 32       	cpi	r18, 0x21	; 33
    8792:	59 f4       	brne	.+22     	; 0x87aa <_printf_fn+0x328>
    8794:	a1 96       	adiw	r28, 0x21	; 33
    8796:	2e ad       	ldd	r18, Y+62	; 0x3e
    8798:	3f ad       	ldd	r19, Y+63	; 0x3f
    879a:	a1 97       	sbiw	r28, 0x21	; 33
    879c:	24 15       	cp	r18, r4
    879e:	35 05       	cpc	r19, r5
    87a0:	24 f4       	brge	.+8      	; 0x87aa <_printf_fn+0x328>
    87a2:	a1 96       	adiw	r28, 0x21	; 33
    87a4:	5f ae       	std	Y+63, r5	; 0x3f
    87a6:	4e ae       	std	Y+62, r4	; 0x3e
    87a8:	a1 97       	sbiw	r28, 0x21	; 33
    87aa:	29 2d       	mov	r18, r9
    87ac:	23 72       	andi	r18, 0x23	; 35
    87ae:	23 32       	cpi	r18, 0x23	; 35
    87b0:	59 f4       	brne	.+22     	; 0x87c8 <_printf_fn+0x346>
    87b2:	a1 96       	adiw	r28, 0x21	; 33
    87b4:	4e ad       	ldd	r20, Y+62	; 0x3e
    87b6:	5f ad       	ldd	r21, Y+63	; 0x3f
    87b8:	a1 97       	sbiw	r28, 0x21	; 33
    87ba:	44 15       	cp	r20, r4
    87bc:	55 05       	cpc	r21, r5
    87be:	24 f4       	brge	.+8      	; 0x87c8 <_printf_fn+0x346>
    87c0:	a1 96       	adiw	r28, 0x21	; 33
    87c2:	5f ae       	std	Y+63, r5	; 0x3f
    87c4:	4e ae       	std	Y+62, r4	; 0x3e
    87c6:	a1 97       	sbiw	r28, 0x21	; 33
    87c8:	e8 94       	clt
    87ca:	94 f8       	bld	r9, 4
    87cc:	e8 94       	clt
    87ce:	92 f8       	bld	r9, 2
    87d0:	e8 94       	clt
    87d2:	96 f8       	bld	r9, 6
    87d4:	6f 96       	adiw	r28, 0x1f	; 31
    87d6:	ae ad       	ldd	r26, Y+62	; 0x3e
    87d8:	bf ad       	ldd	r27, Y+63	; 0x3f
    87da:	6f 97       	sbiw	r28, 0x1f	; 31
    87dc:	12 97       	sbiw	r26, 0x02	; 2
    87de:	29 f5       	brne	.+74     	; 0x882a <_printf_fn+0x3a8>
    87e0:	51 01       	movw	r10, r2
    87e2:	b2 e0       	ldi	r27, 0x02	; 2
    87e4:	ab 0e       	add	r10, r27
    87e6:	b1 1c       	adc	r11, r1
    87e8:	f1 01       	movw	r30, r2
    87ea:	80 81       	ld	r24, Z
    87ec:	91 81       	ldd	r25, Z+1	; 0x01
    87ee:	65 96       	adiw	r28, 0x15	; 21
    87f0:	9f af       	std	Y+63, r25	; 0x3f
    87f2:	8e af       	std	Y+62, r24	; 0x3e
    87f4:	65 97       	sbiw	r28, 0x15	; 21
    87f6:	a3 96       	adiw	r28, 0x23	; 35
    87f8:	2e ad       	ldd	r18, Y+62	; 0x3e
    87fa:	3f ad       	ldd	r19, Y+63	; 0x3f
    87fc:	a3 97       	sbiw	r28, 0x23	; 35
    87fe:	24 34       	cpi	r18, 0x44	; 68
    8800:	31 05       	cpc	r19, r1
    8802:	09 f0       	breq	.+2      	; 0x8806 <_printf_fn+0x384>
    8804:	c0 c0       	rjmp	.+384    	; 0x8986 <_printf_fn+0x504>
    8806:	97 ff       	sbrs	r25, 7
    8808:	b8 c0       	rjmp	.+368    	; 0x897a <_printf_fn+0x4f8>
    880a:	68 94       	set
    880c:	96 f8       	bld	r9, 6
    880e:	91 95       	neg	r25
    8810:	81 95       	neg	r24
    8812:	91 09       	sbc	r25, r1
    8814:	65 96       	adiw	r28, 0x15	; 21
    8816:	9f af       	std	Y+63, r25	; 0x3f
    8818:	8e af       	std	Y+62, r24	; 0x3e
    881a:	65 97       	sbiw	r28, 0x15	; 21
    881c:	42 e0       	ldi	r20, 0x02	; 2
    881e:	50 e0       	ldi	r21, 0x00	; 0
    8820:	6f 96       	adiw	r28, 0x1f	; 31
    8822:	5f af       	std	Y+63, r21	; 0x3f
    8824:	4e af       	std	Y+62, r20	; 0x3e
    8826:	6f 97       	sbiw	r28, 0x1f	; 31
    8828:	ae c0       	rjmp	.+348    	; 0x8986 <_printf_fn+0x504>
    882a:	6f 96       	adiw	r28, 0x1f	; 31
    882c:	ae ad       	ldd	r26, Y+62	; 0x3e
    882e:	bf ad       	ldd	r27, Y+63	; 0x3f
    8830:	6f 97       	sbiw	r28, 0x1f	; 31
    8832:	14 97       	sbiw	r26, 0x04	; 4
    8834:	59 f5       	brne	.+86     	; 0x888c <_printf_fn+0x40a>
    8836:	51 01       	movw	r10, r2
    8838:	b4 e0       	ldi	r27, 0x04	; 4
    883a:	ab 0e       	add	r10, r27
    883c:	b1 1c       	adc	r11, r1
    883e:	f1 01       	movw	r30, r2
    8840:	80 81       	ld	r24, Z
    8842:	91 81       	ldd	r25, Z+1	; 0x01
    8844:	a2 81       	ldd	r26, Z+2	; 0x02
    8846:	b3 81       	ldd	r27, Z+3	; 0x03
    8848:	2f 96       	adiw	r28, 0x0f	; 15
    884a:	8c af       	std	Y+60, r24	; 0x3c
    884c:	9d af       	std	Y+61, r25	; 0x3d
    884e:	ae af       	std	Y+62, r26	; 0x3e
    8850:	bf af       	std	Y+63, r27	; 0x3f
    8852:	2f 97       	sbiw	r28, 0x0f	; 15
    8854:	a3 96       	adiw	r28, 0x23	; 35
    8856:	2e ad       	ldd	r18, Y+62	; 0x3e
    8858:	3f ad       	ldd	r19, Y+63	; 0x3f
    885a:	a3 97       	sbiw	r28, 0x23	; 35
    885c:	24 34       	cpi	r18, 0x44	; 68
    885e:	31 05       	cpc	r19, r1
    8860:	09 f0       	breq	.+2      	; 0x8864 <_printf_fn+0x3e2>
    8862:	9e c0       	rjmp	.+316    	; 0x89a0 <_printf_fn+0x51e>
    8864:	b7 ff       	sbrs	r27, 7
    8866:	96 c0       	rjmp	.+300    	; 0x8994 <_printf_fn+0x512>
    8868:	68 94       	set
    886a:	96 f8       	bld	r9, 6
    886c:	b0 95       	com	r27
    886e:	a0 95       	com	r26
    8870:	90 95       	com	r25
    8872:	81 95       	neg	r24
    8874:	9f 4f       	sbci	r25, 0xFF	; 255
    8876:	af 4f       	sbci	r26, 0xFF	; 255
    8878:	bf 4f       	sbci	r27, 0xFF	; 255
    887a:	2f 96       	adiw	r28, 0x0f	; 15
    887c:	8c af       	std	Y+60, r24	; 0x3c
    887e:	9d af       	std	Y+61, r25	; 0x3d
    8880:	ae af       	std	Y+62, r26	; 0x3e
    8882:	bf af       	std	Y+63, r27	; 0x3f
    8884:	2f 97       	sbiw	r28, 0x0f	; 15
    8886:	86 c0       	rjmp	.+268    	; 0x8994 <_printf_fn+0x512>
    8888:	81 e0       	ldi	r24, 0x01	; 1
    888a:	90 e0       	ldi	r25, 0x00	; 0
    888c:	6f 96       	adiw	r28, 0x1f	; 31
    888e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8890:	bf ad       	ldd	r27, Y+63	; 0x3f
    8892:	6f 97       	sbiw	r28, 0x1f	; 31
    8894:	51 01       	movw	r10, r2
    8896:	18 97       	sbiw	r26, 0x08	; 8
    8898:	09 f0       	breq	.+2      	; 0x889c <_printf_fn+0x41a>
    889a:	89 c0       	rjmp	.+274    	; 0x89ae <_printf_fn+0x52c>
    889c:	b8 e0       	ldi	r27, 0x08	; 8
    889e:	ab 0e       	add	r10, r27
    88a0:	b1 1c       	adc	r11, r1
    88a2:	f1 01       	movw	r30, r2
    88a4:	f0 81       	ld	r31, Z
    88a6:	aa 96       	adiw	r28, 0x2a	; 42
    88a8:	ff af       	std	Y+63, r31	; 0x3f
    88aa:	aa 97       	sbiw	r28, 0x2a	; 42
    88ac:	d1 01       	movw	r26, r2
    88ae:	11 96       	adiw	r26, 0x01	; 1
    88b0:	fc 90       	ld	r15, X
    88b2:	11 97       	sbiw	r26, 0x01	; 1
    88b4:	12 96       	adiw	r26, 0x02	; 2
    88b6:	0c 91       	ld	r16, X
    88b8:	12 97       	sbiw	r26, 0x02	; 2
    88ba:	13 96       	adiw	r26, 0x03	; 3
    88bc:	1c 91       	ld	r17, X
    88be:	13 97       	sbiw	r26, 0x03	; 3
    88c0:	14 96       	adiw	r26, 0x04	; 4
    88c2:	bc 91       	ld	r27, X
    88c4:	f1 01       	movw	r30, r2
    88c6:	f5 81       	ldd	r31, Z+5	; 0x05
    88c8:	ab 96       	adiw	r28, 0x2b	; 43
    88ca:	ff af       	std	Y+63, r31	; 0x3f
    88cc:	ab 97       	sbiw	r28, 0x2b	; 43
    88ce:	f1 01       	movw	r30, r2
    88d0:	f6 81       	ldd	r31, Z+6	; 0x06
    88d2:	ac 96       	adiw	r28, 0x2c	; 44
    88d4:	ff af       	std	Y+63, r31	; 0x3f
    88d6:	ac 97       	sbiw	r28, 0x2c	; 44
    88d8:	f1 01       	movw	r30, r2
    88da:	37 80       	ldd	r3, Z+7	; 0x07
    88dc:	aa 96       	adiw	r28, 0x2a	; 42
    88de:	ff ad       	ldd	r31, Y+63	; 0x3f
    88e0:	aa 97       	sbiw	r28, 0x2a	; 42
    88e2:	24 96       	adiw	r28, 0x04	; 4
    88e4:	ff af       	std	Y+63, r31	; 0x3f
    88e6:	24 97       	sbiw	r28, 0x04	; 4
    88e8:	25 96       	adiw	r28, 0x05	; 5
    88ea:	ff ae       	std	Y+63, r15	; 0x3f
    88ec:	25 97       	sbiw	r28, 0x05	; 5
    88ee:	26 96       	adiw	r28, 0x06	; 6
    88f0:	0f af       	std	Y+63, r16	; 0x3f
    88f2:	26 97       	sbiw	r28, 0x06	; 6
    88f4:	27 96       	adiw	r28, 0x07	; 7
    88f6:	1f af       	std	Y+63, r17	; 0x3f
    88f8:	27 97       	sbiw	r28, 0x07	; 7
    88fa:	28 96       	adiw	r28, 0x08	; 8
    88fc:	bf af       	std	Y+63, r27	; 0x3f
    88fe:	28 97       	sbiw	r28, 0x08	; 8
    8900:	ab 96       	adiw	r28, 0x2b	; 43
    8902:	ef ad       	ldd	r30, Y+63	; 0x3f
    8904:	ab 97       	sbiw	r28, 0x2b	; 43
    8906:	29 96       	adiw	r28, 0x09	; 9
    8908:	ef af       	std	Y+63, r30	; 0x3f
    890a:	29 97       	sbiw	r28, 0x09	; 9
    890c:	ac 96       	adiw	r28, 0x2c	; 44
    890e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8910:	ac 97       	sbiw	r28, 0x2c	; 44
    8912:	2a 96       	adiw	r28, 0x0a	; 10
    8914:	ff af       	std	Y+63, r31	; 0x3f
    8916:	2a 97       	sbiw	r28, 0x0a	; 10
    8918:	2b 96       	adiw	r28, 0x0b	; 11
    891a:	3f ae       	std	Y+63, r3	; 0x3f
    891c:	2b 97       	sbiw	r28, 0x0b	; 11
    891e:	89 2b       	or	r24, r25
    8920:	09 f4       	brne	.+2      	; 0x8924 <_printf_fn+0x4a2>
    8922:	50 c0       	rjmp	.+160    	; 0x89c4 <_printf_fn+0x542>
    8924:	aa 96       	adiw	r28, 0x2a	; 42
    8926:	2f ad       	ldd	r18, Y+63	; 0x3f
    8928:	aa 97       	sbiw	r28, 0x2a	; 42
    892a:	3f 2d       	mov	r19, r15
    892c:	a8 01       	movw	r20, r16
    892e:	6b 2f       	mov	r22, r27
    8930:	7e 2f       	mov	r23, r30
    8932:	8f 2f       	mov	r24, r31
    8934:	93 2d       	mov	r25, r3
    8936:	a0 e0       	ldi	r26, 0x00	; 0
    8938:	0e 94 6c e5 	call	0x1cad8	; 0x1cad8 <__cmpdi2_s8>
    893c:	0c f0       	brlt	.+2      	; 0x8940 <_printf_fn+0x4be>
    893e:	42 c0       	rjmp	.+132    	; 0x89c4 <_printf_fn+0x542>
    8940:	68 94       	set
    8942:	96 f8       	bld	r9, 6
    8944:	0e 94 1e e5 	call	0x1ca3c	; 0x1ca3c <__negdi2>
    8948:	24 96       	adiw	r28, 0x04	; 4
    894a:	2f af       	std	Y+63, r18	; 0x3f
    894c:	24 97       	sbiw	r28, 0x04	; 4
    894e:	25 96       	adiw	r28, 0x05	; 5
    8950:	3f af       	std	Y+63, r19	; 0x3f
    8952:	25 97       	sbiw	r28, 0x05	; 5
    8954:	26 96       	adiw	r28, 0x06	; 6
    8956:	4f af       	std	Y+63, r20	; 0x3f
    8958:	26 97       	sbiw	r28, 0x06	; 6
    895a:	27 96       	adiw	r28, 0x07	; 7
    895c:	5f af       	std	Y+63, r21	; 0x3f
    895e:	27 97       	sbiw	r28, 0x07	; 7
    8960:	28 96       	adiw	r28, 0x08	; 8
    8962:	6f af       	std	Y+63, r22	; 0x3f
    8964:	28 97       	sbiw	r28, 0x08	; 8
    8966:	29 96       	adiw	r28, 0x09	; 9
    8968:	7f af       	std	Y+63, r23	; 0x3f
    896a:	29 97       	sbiw	r28, 0x09	; 9
    896c:	2a 96       	adiw	r28, 0x0a	; 10
    896e:	8f af       	std	Y+63, r24	; 0x3f
    8970:	2a 97       	sbiw	r28, 0x0a	; 10
    8972:	2b 96       	adiw	r28, 0x0b	; 11
    8974:	9f af       	std	Y+63, r25	; 0x3f
    8976:	2b 97       	sbiw	r28, 0x0b	; 11
    8978:	25 c0       	rjmp	.+74     	; 0x89c4 <_printf_fn+0x542>
    897a:	22 e0       	ldi	r18, 0x02	; 2
    897c:	30 e0       	ldi	r19, 0x00	; 0
    897e:	6f 96       	adiw	r28, 0x1f	; 31
    8980:	3f af       	std	Y+63, r19	; 0x3f
    8982:	2e af       	std	Y+62, r18	; 0x3e
    8984:	6f 97       	sbiw	r28, 0x1f	; 31
    8986:	6c 96       	adiw	r28, 0x1c	; 28
    8988:	8f ad       	ldd	r24, Y+63	; 0x3f
    898a:	6c 97       	sbiw	r28, 0x1c	; 28
    898c:	6d 96       	adiw	r28, 0x1d	; 29
    898e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8990:	6d 97       	sbiw	r28, 0x1d	; 29
    8992:	1e c0       	rjmp	.+60     	; 0x89d0 <_printf_fn+0x54e>
    8994:	44 e0       	ldi	r20, 0x04	; 4
    8996:	50 e0       	ldi	r21, 0x00	; 0
    8998:	6f 96       	adiw	r28, 0x1f	; 31
    899a:	5f af       	std	Y+63, r21	; 0x3f
    899c:	4e af       	std	Y+62, r20	; 0x3e
    899e:	6f 97       	sbiw	r28, 0x1f	; 31
    89a0:	6a 96       	adiw	r28, 0x1a	; 26
    89a2:	8f ad       	ldd	r24, Y+63	; 0x3f
    89a4:	6a 97       	sbiw	r28, 0x1a	; 26
    89a6:	6b 96       	adiw	r28, 0x1b	; 27
    89a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    89aa:	6b 97       	sbiw	r28, 0x1b	; 27
    89ac:	11 c0       	rjmp	.+34     	; 0x89d0 <_printf_fn+0x54e>
    89ae:	66 96       	adiw	r28, 0x16	; 22
    89b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    89b2:	66 97       	sbiw	r28, 0x16	; 22
    89b4:	67 96       	adiw	r28, 0x17	; 23
    89b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    89b8:	67 97       	sbiw	r28, 0x17	; 23
    89ba:	a3 96       	adiw	r28, 0x23	; 35
    89bc:	1f ae       	std	Y+63, r1	; 0x3f
    89be:	1e ae       	std	Y+62, r1	; 0x3e
    89c0:	a3 97       	sbiw	r28, 0x23	; 35
    89c2:	06 c0       	rjmp	.+12     	; 0x89d0 <_printf_fn+0x54e>
    89c4:	68 96       	adiw	r28, 0x18	; 24
    89c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    89c8:	68 97       	sbiw	r28, 0x18	; 24
    89ca:	69 96       	adiw	r28, 0x19	; 25
    89cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    89ce:	69 97       	sbiw	r28, 0x19	; 25
    89d0:	5f ef       	ldi	r21, 0xFF	; 255
    89d2:	65 1a       	sub	r6, r21
    89d4:	75 0a       	sbc	r7, r21
    89d6:	85 0a       	sbc	r8, r21
    89d8:	15 01       	movw	r2, r10
    89da:	2d c0       	rjmp	.+90     	; 0x8a36 <_printf_fn+0x5b4>
    89dc:	91 fc       	sbrc	r9, 1
    89de:	08 c0       	rjmp	.+16     	; 0x89f0 <_printf_fn+0x56e>
    89e0:	68 94       	set
    89e2:	91 f8       	bld	r9, 1
    89e4:	86 e0       	ldi	r24, 0x06	; 6
    89e6:	90 e0       	ldi	r25, 0x00	; 0
    89e8:	a1 96       	adiw	r28, 0x21	; 33
    89ea:	9f af       	std	Y+63, r25	; 0x3f
    89ec:	8e af       	std	Y+62, r24	; 0x3e
    89ee:	a1 97       	sbiw	r28, 0x21	; 33
    89f0:	d1 01       	movw	r26, r2
    89f2:	2d 91       	ld	r18, X+
    89f4:	3d 91       	ld	r19, X+
    89f6:	4d 91       	ld	r20, X+
    89f8:	5c 91       	ld	r21, X
    89fa:	a9 96       	adiw	r28, 0x29	; 41
    89fc:	2c af       	std	Y+60, r18	; 0x3c
    89fe:	3d af       	std	Y+61, r19	; 0x3d
    8a00:	4e af       	std	Y+62, r20	; 0x3e
    8a02:	5f af       	std	Y+63, r21	; 0x3f
    8a04:	a9 97       	sbiw	r28, 0x29	; 41
    8a06:	bf ef       	ldi	r27, 0xFF	; 255
    8a08:	6b 1a       	sub	r6, r27
    8a0a:	7b 0a       	sbc	r7, r27
    8a0c:	8b 0a       	sbc	r8, r27
    8a0e:	f1 01       	movw	r30, r2
    8a10:	34 96       	adiw	r30, 0x04	; 4
    8a12:	1f 01       	movw	r2, r30
    8a14:	0a c0       	rjmp	.+20     	; 0x8a2a <_printf_fn+0x5a8>
    8a16:	ff ef       	ldi	r31, 0xFF	; 255
    8a18:	6f 1a       	sub	r6, r31
    8a1a:	7f 0a       	sbc	r7, r31
    8a1c:	8f 0a       	sbc	r8, r31
    8a1e:	b0 c0       	rjmp	.+352    	; 0x8b80 <_printf_fn+0x6fe>
    8a20:	2f ef       	ldi	r18, 0xFF	; 255
    8a22:	62 1a       	sub	r6, r18
    8a24:	72 0a       	sbc	r7, r18
    8a26:	82 0a       	sbc	r8, r18
    8a28:	b8 c0       	rjmp	.+368    	; 0x8b9a <_printf_fn+0x718>
    8a2a:	66 96       	adiw	r28, 0x16	; 22
    8a2c:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a2e:	66 97       	sbiw	r28, 0x16	; 22
    8a30:	67 96       	adiw	r28, 0x17	; 23
    8a32:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a34:	67 97       	sbiw	r28, 0x17	; 23
    8a36:	a3 96       	adiw	r28, 0x23	; 35
    8a38:	ee ad       	ldd	r30, Y+62	; 0x3e
    8a3a:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a3c:	a3 97       	sbiw	r28, 0x23	; 35
    8a3e:	e2 54       	subi	r30, 0x42	; 66
    8a40:	f1 09       	sbc	r31, r1
    8a42:	e7 33       	cpi	r30, 0x37	; 55
    8a44:	f1 05       	cpc	r31, r1
    8a46:	08 f0       	brcs	.+2      	; 0x8a4a <_printf_fn+0x5c8>
    8a48:	f9 c0       	rjmp	.+498    	; 0x8c3c <_printf_fn+0x7ba>
    8a4a:	e3 58       	subi	r30, 0x83	; 131
    8a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    8a4e:	0c 94 ea e4 	jmp	0x1c9d4	; 0x1c9d4 <__tablejump2__>
    8a52:	e8 94       	clt
    8a54:	94 f8       	bld	r9, 4
    8a56:	e8 94       	clt
    8a58:	92 f8       	bld	r9, 2
    8a5a:	a9 2c       	mov	r10, r9
    8a5c:	b1 2c       	mov	r11, r1
    8a5e:	a1 96       	adiw	r28, 0x21	; 33
    8a60:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a62:	df ac       	ldd	r13, Y+63	; 0x3f
    8a64:	a1 97       	sbiw	r28, 0x21	; 33
    8a66:	72 01       	movw	r14, r4
    8a68:	0a e0       	ldi	r16, 0x0A	; 10
    8a6a:	10 e0       	ldi	r17, 0x00	; 0
    8a6c:	13 c0       	rjmp	.+38     	; 0x8a94 <_printf_fn+0x612>
    8a6e:	a9 2c       	mov	r10, r9
    8a70:	b1 2c       	mov	r11, r1
    8a72:	a1 96       	adiw	r28, 0x21	; 33
    8a74:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a76:	df ac       	ldd	r13, Y+63	; 0x3f
    8a78:	a1 97       	sbiw	r28, 0x21	; 33
    8a7a:	72 01       	movw	r14, r4
    8a7c:	02 e0       	ldi	r16, 0x02	; 2
    8a7e:	10 e0       	ldi	r17, 0x00	; 0
    8a80:	09 c0       	rjmp	.+18     	; 0x8a94 <_printf_fn+0x612>
    8a82:	a9 2c       	mov	r10, r9
    8a84:	b1 2c       	mov	r11, r1
    8a86:	a1 96       	adiw	r28, 0x21	; 33
    8a88:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a8a:	df ac       	ldd	r13, Y+63	; 0x3f
    8a8c:	a1 97       	sbiw	r28, 0x21	; 33
    8a8e:	72 01       	movw	r14, r4
    8a90:	08 e0       	ldi	r16, 0x08	; 8
    8a92:	10 e0       	ldi	r17, 0x00	; 0
    8a94:	22 e4       	ldi	r18, 0x42	; 66
    8a96:	30 e0       	ldi	r19, 0x00	; 0
    8a98:	ae 01       	movw	r20, r28
    8a9a:	4f 5f       	subi	r20, 0xFF	; 255
    8a9c:	5f 4f       	sbci	r21, 0xFF	; 255
    8a9e:	6f 96       	adiw	r28, 0x1f	; 31
    8aa0:	6e ad       	ldd	r22, Y+62	; 0x3e
    8aa2:	7f ad       	ldd	r23, Y+63	; 0x3f
    8aa4:	6f 97       	sbiw	r28, 0x1f	; 31
    8aa6:	f3 d9       	rcall	.-3098   	; 0x7e8e <p_ntoa>
    8aa8:	30 c0       	rjmp	.+96     	; 0x8b0a <_printf_fn+0x688>
    8aaa:	a9 2c       	mov	r10, r9
    8aac:	b1 2c       	mov	r11, r1
    8aae:	a1 96       	adiw	r28, 0x21	; 33
    8ab0:	ce ac       	ldd	r12, Y+62	; 0x3e
    8ab2:	df ac       	ldd	r13, Y+63	; 0x3f
    8ab4:	a1 97       	sbiw	r28, 0x21	; 33
    8ab6:	72 01       	movw	r14, r4
    8ab8:	00 e1       	ldi	r16, 0x10	; 16
    8aba:	10 e0       	ldi	r17, 0x00	; 0
    8abc:	22 e4       	ldi	r18, 0x42	; 66
    8abe:	30 e0       	ldi	r19, 0x00	; 0
    8ac0:	ae 01       	movw	r20, r28
    8ac2:	4f 5f       	subi	r20, 0xFF	; 255
    8ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    8ac6:	6f 96       	adiw	r28, 0x1f	; 31
    8ac8:	6e ad       	ldd	r22, Y+62	; 0x3e
    8aca:	7f ad       	ldd	r23, Y+63	; 0x3f
    8acc:	6f 97       	sbiw	r28, 0x1f	; 31
    8ace:	df d9       	rcall	.-3138   	; 0x7e8e <p_ntoa>
    8ad0:	7c 01       	movw	r14, r24
    8ad2:	a3 96       	adiw	r28, 0x23	; 35
    8ad4:	6e ad       	ldd	r22, Y+62	; 0x3e
    8ad6:	7f ad       	ldd	r23, Y+63	; 0x3f
    8ad8:	a3 97       	sbiw	r28, 0x23	; 35
    8ada:	67 7f       	andi	r22, 0xF7	; 247
    8adc:	60 35       	cpi	r22, 0x50	; 80
    8ade:	71 05       	cpc	r23, r1
    8ae0:	c9 f5       	brne	.+114    	; 0x8b54 <_printf_fn+0x6d2>
    8ae2:	34 c0       	rjmp	.+104    	; 0x8b4c <_printf_fn+0x6ca>
    8ae4:	c9 2c       	mov	r12, r9
    8ae6:	d1 2c       	mov	r13, r1
    8ae8:	a1 96       	adiw	r28, 0x21	; 33
    8aea:	ee ac       	ldd	r14, Y+62	; 0x3e
    8aec:	ff ac       	ldd	r15, Y+63	; 0x3f
    8aee:	a1 97       	sbiw	r28, 0x21	; 33
    8af0:	82 01       	movw	r16, r4
    8af2:	22 e4       	ldi	r18, 0x42	; 66
    8af4:	30 e0       	ldi	r19, 0x00	; 0
    8af6:	ae 01       	movw	r20, r28
    8af8:	4f 5f       	subi	r20, 0xFF	; 255
    8afa:	5f 4f       	sbci	r21, 0xFF	; 255
    8afc:	a9 96       	adiw	r28, 0x29	; 41
    8afe:	6c ad       	ldd	r22, Y+60	; 0x3c
    8b00:	7d ad       	ldd	r23, Y+61	; 0x3d
    8b02:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b04:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b06:	a9 97       	sbiw	r28, 0x29	; 41
    8b08:	17 da       	rcall	.-3026   	; 0x7f38 <p_ftoa>
    8b0a:	93 fa       	bst	r9, 3
    8b0c:	00 27       	eor	r16, r16
    8b0e:	00 f9       	bld	r16, 0
    8b10:	10 e0       	ldi	r17, 0x00	; 0
    8b12:	9c 01       	movw	r18, r24
    8b14:	24 c0       	rjmp	.+72     	; 0x8b5e <_printf_fn+0x6dc>
    8b16:	c9 2c       	mov	r12, r9
    8b18:	d1 2c       	mov	r13, r1
    8b1a:	a1 96       	adiw	r28, 0x21	; 33
    8b1c:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b1e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b20:	a1 97       	sbiw	r28, 0x21	; 33
    8b22:	82 01       	movw	r16, r4
    8b24:	22 e4       	ldi	r18, 0x42	; 66
    8b26:	30 e0       	ldi	r19, 0x00	; 0
    8b28:	ae 01       	movw	r20, r28
    8b2a:	4f 5f       	subi	r20, 0xFF	; 255
    8b2c:	5f 4f       	sbci	r21, 0xFF	; 255
    8b2e:	a9 96       	adiw	r28, 0x29	; 41
    8b30:	6c ad       	ldd	r22, Y+60	; 0x3c
    8b32:	7d ad       	ldd	r23, Y+61	; 0x3d
    8b34:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b36:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b38:	a9 97       	sbiw	r28, 0x29	; 41
    8b3a:	05 db       	rcall	.-2550   	; 0x8146 <p_etoa>
    8b3c:	7c 01       	movw	r14, r24
    8b3e:	a3 96       	adiw	r28, 0x23	; 35
    8b40:	4e ad       	ldd	r20, Y+62	; 0x3e
    8b42:	5f ad       	ldd	r21, Y+63	; 0x3f
    8b44:	a3 97       	sbiw	r28, 0x23	; 35
    8b46:	45 34       	cpi	r20, 0x45	; 69
    8b48:	51 05       	cpc	r21, r1
    8b4a:	21 f4       	brne	.+8      	; 0x8b54 <_printf_fn+0x6d2>
    8b4c:	ce 01       	movw	r24, r28
    8b4e:	01 96       	adiw	r24, 0x01	; 1
    8b50:	0e 94 ee 31 	call	0x63dc	; 0x63dc <strupper>
    8b54:	93 fa       	bst	r9, 3
    8b56:	00 27       	eor	r16, r16
    8b58:	00 f9       	bld	r16, 0
    8b5a:	10 e0       	ldi	r17, 0x00	; 0
    8b5c:	97 01       	movw	r18, r14
    8b5e:	a2 01       	movw	r20, r4
    8b60:	be 01       	movw	r22, r28
    8b62:	6f 5f       	subi	r22, 0xFF	; 255
    8b64:	7f 4f       	sbci	r23, 0xFF	; 255
    8b66:	a5 96       	adiw	r28, 0x25	; 37
    8b68:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b6c:	a5 97       	sbiw	r28, 0x25	; 37
    8b6e:	47 dc       	rcall	.-1906   	; 0x83fe <_puts_pad>
    8b70:	69 c0       	rjmp	.+210    	; 0x8c44 <_printf_fn+0x7c2>
    8b72:	a3 96       	adiw	r28, 0x23	; 35
    8b74:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b76:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b78:	a3 97       	sbiw	r28, 0x23	; 35
    8b7a:	83 37       	cpi	r24, 0x73	; 115
    8b7c:	91 05       	cpc	r25, r1
    8b7e:	69 f4       	brne	.+26     	; 0x8b9a <_printf_fn+0x718>
    8b80:	71 01       	movw	r14, r2
    8b82:	92 e0       	ldi	r25, 0x02	; 2
    8b84:	e9 0e       	add	r14, r25
    8b86:	f1 1c       	adc	r15, r1
    8b88:	d1 01       	movw	r26, r2
    8b8a:	6d 91       	ld	r22, X+
    8b8c:	7c 91       	ld	r23, X
    8b8e:	61 15       	cp	r22, r1
    8b90:	71 05       	cpc	r23, r1
    8b92:	91 f4       	brne	.+36     	; 0x8bb8 <_printf_fn+0x736>
    8b94:	67 ee       	ldi	r22, 0xE7	; 231
    8b96:	77 e0       	ldi	r23, 0x07	; 7
    8b98:	0f c0       	rjmp	.+30     	; 0x8bb8 <_printf_fn+0x736>
    8b9a:	71 01       	movw	r14, r2
    8b9c:	b2 e0       	ldi	r27, 0x02	; 2
    8b9e:	eb 0e       	add	r14, r27
    8ba0:	f1 1c       	adc	r15, r1
    8ba2:	f1 01       	movw	r30, r2
    8ba4:	80 81       	ld	r24, Z
    8ba6:	60 96       	adiw	r28, 0x10	; 16
    8ba8:	8f af       	std	Y+63, r24	; 0x3f
    8baa:	60 97       	sbiw	r28, 0x10	; 16
    8bac:	61 96       	adiw	r28, 0x11	; 17
    8bae:	1f ae       	std	Y+63, r1	; 0x3f
    8bb0:	61 97       	sbiw	r28, 0x11	; 17
    8bb2:	be 01       	movw	r22, r28
    8bb4:	61 5b       	subi	r22, 0xB1	; 177
    8bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    8bb8:	fb 01       	movw	r30, r22
    8bba:	01 90       	ld	r0, Z+
    8bbc:	00 20       	and	r0, r0
    8bbe:	e9 f7       	brne	.-6      	; 0x8bba <_printf_fn+0x738>
    8bc0:	31 97       	sbiw	r30, 0x01	; 1
    8bc2:	e6 1b       	sub	r30, r22
    8bc4:	f7 0b       	sbc	r31, r23
    8bc6:	a1 96       	adiw	r28, 0x21	; 33
    8bc8:	2e ad       	ldd	r18, Y+62	; 0x3e
    8bca:	3f ad       	ldd	r19, Y+63	; 0x3f
    8bcc:	a1 97       	sbiw	r28, 0x21	; 33
    8bce:	23 2b       	or	r18, r19
    8bd0:	21 f4       	brne	.+8      	; 0x8bda <_printf_fn+0x758>
    8bd2:	a1 96       	adiw	r28, 0x21	; 33
    8bd4:	ff af       	std	Y+63, r31	; 0x3f
    8bd6:	ee af       	std	Y+62, r30	; 0x3e
    8bd8:	a1 97       	sbiw	r28, 0x21	; 33
    8bda:	a1 96       	adiw	r28, 0x21	; 33
    8bdc:	4e ad       	ldd	r20, Y+62	; 0x3e
    8bde:	5f ad       	ldd	r21, Y+63	; 0x3f
    8be0:	a1 97       	sbiw	r28, 0x21	; 33
    8be2:	44 16       	cp	r4, r20
    8be4:	55 06       	cpc	r5, r21
    8be6:	3c f4       	brge	.+14     	; 0x8bf6 <_printf_fn+0x774>
    8be8:	41 14       	cp	r4, r1
    8bea:	51 04       	cpc	r5, r1
    8bec:	21 f0       	breq	.+8      	; 0x8bf6 <_printf_fn+0x774>
    8bee:	a1 96       	adiw	r28, 0x21	; 33
    8bf0:	5f ae       	std	Y+63, r5	; 0x3f
    8bf2:	4e ae       	std	Y+62, r4	; 0x3e
    8bf4:	a1 97       	sbiw	r28, 0x21	; 33
    8bf6:	93 fa       	bst	r9, 3
    8bf8:	00 27       	eor	r16, r16
    8bfa:	00 f9       	bld	r16, 0
    8bfc:	10 e0       	ldi	r17, 0x00	; 0
    8bfe:	a1 96       	adiw	r28, 0x21	; 33
    8c00:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c02:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c04:	a1 97       	sbiw	r28, 0x21	; 33
    8c06:	a2 01       	movw	r20, r4
    8c08:	a5 96       	adiw	r28, 0x25	; 37
    8c0a:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c0e:	a5 97       	sbiw	r28, 0x25	; 37
    8c10:	f6 db       	rcall	.-2068   	; 0x83fe <_puts_pad>
    8c12:	17 01       	movw	r2, r14
    8c14:	17 c0       	rjmp	.+46     	; 0x8c44 <_printf_fn+0x7c2>
    8c16:	f6 01       	movw	r30, r12
    8c18:	5e 2d       	mov	r21, r14
    8c1a:	0e 94 65 e5 	call	0x1caca	; 0x1caca <__xload_1>
    8c1e:	66 23       	and	r22, r22
    8c20:	89 f0       	breq	.+34     	; 0x8c44 <_printf_fn+0x7c2>
    8c22:	5f ef       	ldi	r21, 0xFF	; 255
    8c24:	c5 1a       	sub	r12, r21
    8c26:	d5 0a       	sbc	r13, r21
    8c28:	e5 0a       	sbc	r14, r21
    8c2a:	a5 96       	adiw	r28, 0x25	; 37
    8c2c:	ae ad       	ldd	r26, Y+62	; 0x3e
    8c2e:	bf ad       	ldd	r27, Y+63	; 0x3f
    8c30:	a5 97       	sbiw	r28, 0x25	; 37
    8c32:	ed 91       	ld	r30, X+
    8c34:	fc 91       	ld	r31, X
    8c36:	11 97       	sbiw	r26, 0x01	; 1
    8c38:	cd 01       	movw	r24, r26
    8c3a:	09 95       	icall
    8c3c:	6c 14       	cp	r6, r12
    8c3e:	7d 04       	cpc	r7, r13
    8c40:	8e 04       	cpc	r8, r14
    8c42:	48 f7       	brcc	.-46     	; 0x8c16 <_printf_fn+0x794>
    8c44:	e8 2c       	mov	r14, r8
    8c46:	63 01       	movw	r12, r6
    8c48:	4b cc       	rjmp	.-1898   	; 0x84e0 <_printf_fn+0x5e>
    8c4a:	e2 e0       	ldi	r30, 0x02	; 2
    8c4c:	f0 e0       	ldi	r31, 0x00	; 0
    8c4e:	6f 96       	adiw	r28, 0x1f	; 31
    8c50:	ff af       	std	Y+63, r31	; 0x3f
    8c52:	ee af       	std	Y+62, r30	; 0x3e
    8c54:	6f 97       	sbiw	r28, 0x1f	; 31
    8c56:	57 cd       	rjmp	.-1362   	; 0x8706 <_printf_fn+0x284>
    8c58:	6f 96       	adiw	r28, 0x1f	; 31
    8c5a:	ee ad       	ldd	r30, Y+62	; 0x3e
    8c5c:	ff ad       	ldd	r31, Y+63	; 0x3f
    8c5e:	6f 97       	sbiw	r28, 0x1f	; 31
    8c60:	32 97       	sbiw	r30, 0x02	; 2
    8c62:	61 f4       	brne	.+24     	; 0x8c7c <_printf_fn+0x7fa>
    8c64:	51 01       	movw	r10, r2
    8c66:	f2 e0       	ldi	r31, 0x02	; 2
    8c68:	af 0e       	add	r10, r31
    8c6a:	b1 1c       	adc	r11, r1
    8c6c:	d1 01       	movw	r26, r2
    8c6e:	8d 91       	ld	r24, X+
    8c70:	9c 91       	ld	r25, X
    8c72:	65 96       	adiw	r28, 0x15	; 21
    8c74:	9f af       	std	Y+63, r25	; 0x3f
    8c76:	8e af       	std	Y+62, r24	; 0x3e
    8c78:	65 97       	sbiw	r28, 0x15	; 21
    8c7a:	c5 cd       	rjmp	.-1142   	; 0x8806 <_printf_fn+0x384>
    8c7c:	6f 96       	adiw	r28, 0x1f	; 31
    8c7e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c80:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c82:	6f 97       	sbiw	r28, 0x1f	; 31
    8c84:	24 30       	cpi	r18, 0x04	; 4
    8c86:	31 05       	cpc	r19, r1
    8c88:	09 f0       	breq	.+2      	; 0x8c8c <_printf_fn+0x80a>
    8c8a:	fe cd       	rjmp	.-1028   	; 0x8888 <_printf_fn+0x406>
    8c8c:	51 01       	movw	r10, r2
    8c8e:	f4 e0       	ldi	r31, 0x04	; 4
    8c90:	af 0e       	add	r10, r31
    8c92:	b1 1c       	adc	r11, r1
    8c94:	f1 01       	movw	r30, r2
    8c96:	80 81       	ld	r24, Z
    8c98:	91 81       	ldd	r25, Z+1	; 0x01
    8c9a:	a2 81       	ldd	r26, Z+2	; 0x02
    8c9c:	b3 81       	ldd	r27, Z+3	; 0x03
    8c9e:	2f 96       	adiw	r28, 0x0f	; 15
    8ca0:	8c af       	std	Y+60, r24	; 0x3c
    8ca2:	9d af       	std	Y+61, r25	; 0x3d
    8ca4:	ae af       	std	Y+62, r26	; 0x3e
    8ca6:	bf af       	std	Y+63, r27	; 0x3f
    8ca8:	2f 97       	sbiw	r28, 0x0f	; 15
    8caa:	dc cd       	rjmp	.-1096   	; 0x8864 <_printf_fn+0x3e2>
    8cac:	c5 59       	subi	r28, 0x95	; 149
    8cae:	df 4f       	sbci	r29, 0xFF	; 255
    8cb0:	e2 e1       	ldi	r30, 0x12	; 18
    8cb2:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

00008cb6 <vsnprintf_P>:
    8cb6:	a8 e0       	ldi	r26, 0x08	; 8
    8cb8:	b0 e0       	ldi	r27, 0x00	; 0
    8cba:	e1 e6       	ldi	r30, 0x61	; 97
    8cbc:	f6 e4       	ldi	r31, 0x46	; 70
    8cbe:	0c 94 3a e5 	jmp	0x1ca74	; 0x1ca74 <__prologue_saves__+0x18>
    8cc2:	7c 01       	movw	r14, r24
    8cc4:	cb 01       	movw	r24, r22
    8cc6:	64 2f       	mov	r22, r20
    8cc8:	a9 01       	movw	r20, r18
    8cca:	98 01       	movw	r18, r16
    8ccc:	f7 01       	movw	r30, r14
    8cce:	10 82       	st	Z, r1
    8cd0:	e8 e6       	ldi	r30, 0x68	; 104
    8cd2:	fe e3       	ldi	r31, 0x3E	; 62
    8cd4:	fa 83       	std	Y+2, r31	; 0x02
    8cd6:	e9 83       	std	Y+1, r30	; 0x01
    8cd8:	9e 83       	std	Y+6, r25	; 0x06
    8cda:	8d 83       	std	Y+5, r24	; 0x05
    8cdc:	18 86       	std	Y+8, r1	; 0x08
    8cde:	1f 82       	std	Y+7, r1	; 0x07
    8ce0:	fc 82       	std	Y+4, r15	; 0x04
    8ce2:	eb 82       	std	Y+3, r14	; 0x03
    8ce4:	ce 01       	movw	r24, r28
    8ce6:	01 96       	adiw	r24, 0x01	; 1
    8ce8:	cc db       	rcall	.-2152   	; 0x8482 <_printf_fn>
    8cea:	f7 01       	movw	r30, r14
    8cec:	01 90       	ld	r0, Z+
    8cee:	00 20       	and	r0, r0
    8cf0:	e9 f7       	brne	.-6      	; 0x8cec <vsnprintf_P+0x36>
    8cf2:	cf 01       	movw	r24, r30
    8cf4:	01 97       	sbiw	r24, 0x01	; 1
    8cf6:	8e 19       	sub	r24, r14
    8cf8:	9f 09       	sbc	r25, r15
    8cfa:	28 96       	adiw	r28, 0x08	; 8
    8cfc:	e6 e0       	ldi	r30, 0x06	; 6
    8cfe:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

00008d02 <snprintf_P>:
    8d02:	a0 e0       	ldi	r26, 0x00	; 0
    8d04:	b0 e0       	ldi	r27, 0x00	; 0
    8d06:	e7 e8       	ldi	r30, 0x87	; 135
    8d08:	f6 e4       	ldi	r31, 0x46	; 70
    8d0a:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__prologue_saves__+0x1c>
    8d0e:	8e 01       	movw	r16, r28
    8d10:	02 5f       	subi	r16, 0xF2	; 242
    8d12:	1f 4f       	sbci	r17, 0xFF	; 255
    8d14:	2b 85       	ldd	r18, Y+11	; 0x0b
    8d16:	3c 85       	ldd	r19, Y+12	; 0x0c
    8d18:	4d 85       	ldd	r20, Y+13	; 0x0d
    8d1a:	69 85       	ldd	r22, Y+9	; 0x09
    8d1c:	7a 85       	ldd	r23, Y+10	; 0x0a
    8d1e:	8f 81       	ldd	r24, Y+7	; 0x07
    8d20:	98 85       	ldd	r25, Y+8	; 0x08
    8d22:	c9 df       	rcall	.-110    	; 0x8cb6 <vsnprintf_P>
    8d24:	e4 e0       	ldi	r30, 0x04	; 4
    8d26:	0c 94 58 e5 	jmp	0x1cab0	; 0x1cab0 <__epilogue_restores__+0x1c>

00008d2a <sprintf_P>:
    8d2a:	a0 e0       	ldi	r26, 0x00	; 0
    8d2c:	b0 e0       	ldi	r27, 0x00	; 0
    8d2e:	eb e9       	ldi	r30, 0x9B	; 155
    8d30:	f6 e4       	ldi	r31, 0x46	; 70
    8d32:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__prologue_saves__+0x1c>
    8d36:	8e 01       	movw	r16, r28
    8d38:	04 5f       	subi	r16, 0xF4	; 244
    8d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    8d3c:	29 85       	ldd	r18, Y+9	; 0x09
    8d3e:	3a 85       	ldd	r19, Y+10	; 0x0a
    8d40:	4b 85       	ldd	r20, Y+11	; 0x0b
    8d42:	60 e0       	ldi	r22, 0x00	; 0
    8d44:	74 e0       	ldi	r23, 0x04	; 4
    8d46:	8f 81       	ldd	r24, Y+7	; 0x07
    8d48:	98 85       	ldd	r25, Y+8	; 0x08
    8d4a:	b5 df       	rcall	.-150    	; 0x8cb6 <vsnprintf_P>
    8d4c:	e4 e0       	ldi	r30, 0x04	; 4
    8d4e:	0c 94 58 e5 	jmp	0x1cab0	; 0x1cab0 <__epilogue_restores__+0x1c>

00008d52 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    8d52:	a8 e0       	ldi	r26, 0x08	; 8
    8d54:	b0 e0       	ldi	r27, 0x00	; 0
    8d56:	ef ea       	ldi	r30, 0xAF	; 175
    8d58:	f6 e4       	ldi	r31, 0x46	; 70
    8d5a:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    8d5e:	9e 01       	movw	r18, r28
    8d60:	23 5f       	subi	r18, 0xF3	; 243
    8d62:	3f 4f       	sbci	r19, 0xFF	; 255
    8d64:	f9 01       	movw	r30, r18
    8d66:	41 91       	ld	r20, Z+
    8d68:	51 91       	ld	r21, Z+
    8d6a:	61 91       	ld	r22, Z+
    8d6c:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8d6e:	81 e8       	ldi	r24, 0x81	; 129
    8d70:	9e e3       	ldi	r25, 0x3E	; 62
    8d72:	9a 83       	std	Y+2, r25	; 0x02
    8d74:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8d76:	18 86       	std	Y+8, r1	; 0x08
    8d78:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8d7a:	ce 01       	movw	r24, r28
    8d7c:	01 96       	adiw	r24, 0x01	; 1
    8d7e:	81 db       	rcall	.-2302   	; 0x8482 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8d80:	8f 81       	ldd	r24, Y+7	; 0x07
    8d82:	98 85       	ldd	r25, Y+8	; 0x08
    8d84:	28 96       	adiw	r28, 0x08	; 8
    8d86:	e2 e0       	ldi	r30, 0x02	; 2
    8d88:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

00008d8c <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8d8c:	9c 01       	movw	r18, r24
    8d8e:	20 53       	subi	r18, 0x30	; 48
    8d90:	31 09       	sbc	r19, r1
    8d92:	2a 30       	cpi	r18, 0x0A	; 10
    8d94:	31 05       	cpc	r19, r1
    8d96:	10 f4       	brcc	.+4      	; 0x8d9c <atodigit+0x10>
    8d98:	c9 01       	movw	r24, r18
    8d9a:	10 c0       	rjmp	.+32     	; 0x8dbc <atodigit+0x30>
    8d9c:	9c 01       	movw	r18, r24
    8d9e:	21 54       	subi	r18, 0x41	; 65
    8da0:	31 09       	sbc	r19, r1
    8da2:	26 30       	cpi	r18, 0x06	; 6
    8da4:	31 05       	cpc	r19, r1
    8da6:	10 f4       	brcc	.+4      	; 0x8dac <atodigit+0x20>
    8da8:	c7 97       	sbiw	r24, 0x37	; 55
    8daa:	08 c0       	rjmp	.+16     	; 0x8dbc <atodigit+0x30>
    8dac:	9c 01       	movw	r18, r24
    8dae:	21 56       	subi	r18, 0x61	; 97
    8db0:	31 09       	sbc	r19, r1
    8db2:	26 30       	cpi	r18, 0x06	; 6
    8db4:	31 05       	cpc	r19, r1
    8db6:	28 f4       	brcc	.+10     	; 0x8dc2 <atodigit+0x36>
    8db8:	87 55       	subi	r24, 0x57	; 87
    8dba:	91 09       	sbc	r25, r1
    8dbc:	86 17       	cp	r24, r22
    8dbe:	97 07       	cpc	r25, r23
    8dc0:	14 f0       	brlt	.+4      	; 0x8dc6 <atodigit+0x3a>
    8dc2:	8f ef       	ldi	r24, 0xFF	; 255
    8dc4:	9f ef       	ldi	r25, 0xFF	; 255
    8dc6:	08 95       	ret

00008dc8 <strtol>:
    8dc8:	a0 e0       	ldi	r26, 0x00	; 0
    8dca:	b0 e0       	ldi	r27, 0x00	; 0
    8dcc:	ea ee       	ldi	r30, 0xEA	; 234
    8dce:	f6 e4       	ldi	r31, 0x46	; 70
    8dd0:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    8dd4:	2b 01       	movw	r4, r22
    8dd6:	8a 01       	movw	r16, r20
    8dd8:	ec 01       	movw	r28, r24
    8dda:	28 81       	ld	r18, Y
    8ddc:	01 96       	adiw	r24, 0x01	; 1
    8dde:	20 32       	cpi	r18, 0x20	; 32
    8de0:	d9 f3       	breq	.-10     	; 0x8dd8 <strtol+0x10>
    8de2:	29 30       	cpi	r18, 0x09	; 9
    8de4:	c9 f3       	breq	.-14     	; 0x8dd8 <strtol+0x10>
    8de6:	2d 32       	cpi	r18, 0x2D	; 45
    8de8:	29 f4       	brne	.+10     	; 0x8df4 <strtol+0x2c>
    8dea:	ec 01       	movw	r28, r24
    8dec:	66 24       	eor	r6, r6
    8dee:	63 94       	inc	r6
    8df0:	71 2c       	mov	r7, r1
    8df2:	05 c0       	rjmp	.+10     	; 0x8dfe <strtol+0x36>
    8df4:	2b 32       	cpi	r18, 0x2B	; 43
    8df6:	09 f4       	brne	.+2      	; 0x8dfa <strtol+0x32>
    8df8:	ec 01       	movw	r28, r24
    8dfa:	61 2c       	mov	r6, r1
    8dfc:	71 2c       	mov	r7, r1
    8dfe:	9e 01       	movw	r18, r28
    8e00:	2f 5f       	subi	r18, 0xFF	; 255
    8e02:	3f 4f       	sbci	r19, 0xFF	; 255
    8e04:	88 81       	ld	r24, Y
    8e06:	80 33       	cpi	r24, 0x30	; 48
    8e08:	11 f4       	brne	.+4      	; 0x8e0e <strtol+0x46>
    8e0a:	e9 01       	movw	r28, r18
    8e0c:	f8 cf       	rjmp	.-16     	; 0x8dfe <strtol+0x36>
    8e0e:	c1 2c       	mov	r12, r1
    8e10:	d1 2c       	mov	r13, r1
    8e12:	76 01       	movw	r14, r12
    8e14:	48 01       	movw	r8, r16
    8e16:	01 2e       	mov	r0, r17
    8e18:	00 0c       	add	r0, r0
    8e1a:	aa 08       	sbc	r10, r10
    8e1c:	bb 08       	sbc	r11, r11
    8e1e:	3c 2e       	mov	r3, r28
    8e20:	2d 2e       	mov	r2, r29
    8e22:	89 91       	ld	r24, Y+
    8e24:	88 23       	and	r24, r24
    8e26:	31 f0       	breq	.+12     	; 0x8e34 <strtol+0x6c>
    8e28:	b8 01       	movw	r22, r16
    8e2a:	90 e0       	ldi	r25, 0x00	; 0
    8e2c:	af df       	rcall	.-162    	; 0x8d8c <atodigit>
    8e2e:	fc 01       	movw	r30, r24
    8e30:	97 ff       	sbrs	r25, 7
    8e32:	0c c0       	rjmp	.+24     	; 0x8e4c <strtol+0x84>
    8e34:	61 14       	cp	r6, r1
    8e36:	71 04       	cpc	r7, r1
    8e38:	c1 f0       	breq	.+48     	; 0x8e6a <strtol+0xa2>
    8e3a:	f0 94       	com	r15
    8e3c:	e0 94       	com	r14
    8e3e:	d0 94       	com	r13
    8e40:	c0 94       	com	r12
    8e42:	c1 1c       	adc	r12, r1
    8e44:	d1 1c       	adc	r13, r1
    8e46:	e1 1c       	adc	r14, r1
    8e48:	f1 1c       	adc	r15, r1
    8e4a:	0f c0       	rjmp	.+30     	; 0x8e6a <strtol+0xa2>
    8e4c:	a5 01       	movw	r20, r10
    8e4e:	94 01       	movw	r18, r8
    8e50:	c7 01       	movw	r24, r14
    8e52:	b6 01       	movw	r22, r12
    8e54:	0e 94 6a e4 	call	0x1c8d4	; 0x1c8d4 <__mulsi3>
    8e58:	6f 01       	movw	r12, r30
    8e5a:	ff 0f       	add	r31, r31
    8e5c:	ee 08       	sbc	r14, r14
    8e5e:	ff 08       	sbc	r15, r15
    8e60:	c6 0e       	add	r12, r22
    8e62:	d7 1e       	adc	r13, r23
    8e64:	e8 1e       	adc	r14, r24
    8e66:	f9 1e       	adc	r15, r25
    8e68:	da cf       	rjmp	.-76     	; 0x8e1e <strtol+0x56>
    8e6a:	41 14       	cp	r4, r1
    8e6c:	51 04       	cpc	r5, r1
    8e6e:	19 f0       	breq	.+6      	; 0x8e76 <strtol+0xae>
    8e70:	f2 01       	movw	r30, r4
    8e72:	30 82       	st	Z, r3
    8e74:	21 82       	std	Z+1, r2	; 0x01
    8e76:	c7 01       	movw	r24, r14
    8e78:	b6 01       	movw	r22, r12
    8e7a:	cd b7       	in	r28, 0x3d	; 61
    8e7c:	de b7       	in	r29, 0x3e	; 62
    8e7e:	e2 e1       	ldi	r30, 0x12	; 18
    8e80:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

00008e84 <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8e84:	4a e0       	ldi	r20, 0x0A	; 10
    8e86:	50 e0       	ldi	r21, 0x00	; 0
    8e88:	60 e0       	ldi	r22, 0x00	; 0
    8e8a:	70 e0       	ldi	r23, 0x00	; 0
    8e8c:	9d df       	rcall	.-198    	; 0x8dc8 <strtol>
    return((int)num);
}
    8e8e:	cb 01       	movw	r24, r22
    8e90:	08 95       	ret

00008e92 <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8e92:	4a e0       	ldi	r20, 0x0A	; 10
    8e94:	50 e0       	ldi	r21, 0x00	; 0
    8e96:	60 e0       	ldi	r22, 0x00	; 0
    8e98:	70 e0       	ldi	r23, 0x00	; 0
    8e9a:	96 cf       	rjmp	.-212    	; 0x8dc8 <strtol>
    return(num);
}
    8e9c:	08 95       	ret

00008e9e <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8e9e:	fc 01       	movw	r30, r24
    8ea0:	62 81       	ldd	r22, Z+2	; 0x02
    8ea2:	73 81       	ldd	r23, Z+3	; 0x03
    8ea4:	cb 01       	movw	r24, r22
    8ea6:	a0 e0       	ldi	r26, 0x00	; 0
    8ea8:	b0 e0       	ldi	r27, 0x00	; 0
    8eaa:	ba 2f       	mov	r27, r26
    8eac:	a9 2f       	mov	r26, r25
    8eae:	98 2f       	mov	r25, r24
    8eb0:	88 27       	eor	r24, r24
    8eb2:	21 81       	ldd	r18, Z+1	; 0x01
    8eb4:	82 2b       	or	r24, r18
    8eb6:	ba 2f       	mov	r27, r26
    8eb8:	a9 2f       	mov	r26, r25
    8eba:	98 2f       	mov	r25, r24
    8ebc:	88 27       	eor	r24, r24
    8ebe:	20 81       	ld	r18, Z
    8ec0:	bc 01       	movw	r22, r24
    8ec2:	cd 01       	movw	r24, r26
    8ec4:	62 2b       	or	r22, r18
    8ec6:	08 95       	ret

00008ec8 <st_dword>:
    8ec8:	fc 01       	movw	r30, r24
    8eca:	40 83       	st	Z, r20
    8ecc:	51 83       	std	Z+1, r21	; 0x01
    8ece:	62 83       	std	Z+2, r22	; 0x02
    8ed0:	73 83       	std	Z+3, r23	; 0x03
    8ed2:	08 95       	ret

00008ed4 <mem_set>:
    8ed4:	48 0f       	add	r20, r24
    8ed6:	59 1f       	adc	r21, r25
    8ed8:	fc 01       	movw	r30, r24
    8eda:	61 93       	st	Z+, r22
    8edc:	cf 01       	movw	r24, r30
    8ede:	e4 17       	cp	r30, r20
    8ee0:	f5 07       	cpc	r31, r21
    8ee2:	d1 f7       	brne	.-12     	; 0x8ed8 <mem_set+0x4>
    8ee4:	08 95       	ret

00008ee6 <mem_cmp>:
    8ee6:	dc 01       	movw	r26, r24
    8ee8:	fb 01       	movw	r30, r22
    8eea:	2d 91       	ld	r18, X+
    8eec:	81 91       	ld	r24, Z+
    8eee:	30 e0       	ldi	r19, 0x00	; 0
    8ef0:	b9 01       	movw	r22, r18
    8ef2:	68 1b       	sub	r22, r24
    8ef4:	71 09       	sbc	r23, r1
    8ef6:	cb 01       	movw	r24, r22
    8ef8:	41 50       	subi	r20, 0x01	; 1
    8efa:	51 09       	sbc	r21, r1
    8efc:	11 f0       	breq	.+4      	; 0x8f02 <mem_cmp+0x1c>
    8efe:	00 97       	sbiw	r24, 0x00	; 0
    8f00:	a1 f3       	breq	.-24     	; 0x8eea <mem_cmp+0x4>
    8f02:	08 95       	ret

00008f04 <tchar2uni>:
    8f04:	0f 93       	push	r16
    8f06:	1f 93       	push	r17
    8f08:	fc 01       	movw	r30, r24
    8f0a:	a0 81       	ld	r26, Z
    8f0c:	b1 81       	ldd	r27, Z+1	; 0x01
    8f0e:	fd 01       	movw	r30, r26
    8f10:	31 96       	adiw	r30, 0x01	; 1
    8f12:	4c 91       	ld	r20, X
    8f14:	47 fd       	sbrc	r20, 7
    8f16:	04 c0       	rjmp	.+8      	; 0x8f20 <tchar2uni+0x1c>
    8f18:	50 e0       	ldi	r21, 0x00	; 0
    8f1a:	60 e0       	ldi	r22, 0x00	; 0
    8f1c:	70 e0       	ldi	r23, 0x00	; 0
    8f1e:	68 c0       	rjmp	.+208    	; 0x8ff0 <tchar2uni+0xec>
    8f20:	24 2f       	mov	r18, r20
    8f22:	20 7e       	andi	r18, 0xE0	; 224
    8f24:	20 3c       	cpi	r18, 0xC0	; 192
    8f26:	39 f4       	brne	.+14     	; 0x8f36 <tchar2uni+0x32>
    8f28:	4f 71       	andi	r20, 0x1F	; 31
    8f2a:	50 e0       	ldi	r21, 0x00	; 0
    8f2c:	60 e0       	ldi	r22, 0x00	; 0
    8f2e:	70 e0       	ldi	r23, 0x00	; 0
    8f30:	21 e0       	ldi	r18, 0x01	; 1
    8f32:	30 e0       	ldi	r19, 0x00	; 0
    8f34:	16 c0       	rjmp	.+44     	; 0x8f62 <tchar2uni+0x5e>
    8f36:	24 2f       	mov	r18, r20
    8f38:	20 7f       	andi	r18, 0xF0	; 240
    8f3a:	20 3e       	cpi	r18, 0xE0	; 224
    8f3c:	39 f4       	brne	.+14     	; 0x8f4c <tchar2uni+0x48>
    8f3e:	4f 70       	andi	r20, 0x0F	; 15
    8f40:	50 e0       	ldi	r21, 0x00	; 0
    8f42:	60 e0       	ldi	r22, 0x00	; 0
    8f44:	70 e0       	ldi	r23, 0x00	; 0
    8f46:	22 e0       	ldi	r18, 0x02	; 2
    8f48:	30 e0       	ldi	r19, 0x00	; 0
    8f4a:	0b c0       	rjmp	.+22     	; 0x8f62 <tchar2uni+0x5e>
    8f4c:	24 2f       	mov	r18, r20
    8f4e:	28 7f       	andi	r18, 0xF8	; 248
    8f50:	20 3f       	cpi	r18, 0xF0	; 240
    8f52:	09 f0       	breq	.+2      	; 0x8f56 <tchar2uni+0x52>
    8f54:	54 c0       	rjmp	.+168    	; 0x8ffe <tchar2uni+0xfa>
    8f56:	47 70       	andi	r20, 0x07	; 7
    8f58:	50 e0       	ldi	r21, 0x00	; 0
    8f5a:	60 e0       	ldi	r22, 0x00	; 0
    8f5c:	70 e0       	ldi	r23, 0x00	; 0
    8f5e:	23 e0       	ldi	r18, 0x03	; 3
    8f60:	30 e0       	ldi	r19, 0x00	; 0
    8f62:	31 96       	adiw	r30, 0x01	; 1
    8f64:	df 01       	movw	r26, r30
    8f66:	11 97       	sbiw	r26, 0x01	; 1
    8f68:	ac 91       	ld	r26, X
    8f6a:	ba 2f       	mov	r27, r26
    8f6c:	b0 7c       	andi	r27, 0xC0	; 192
    8f6e:	b0 38       	cpi	r27, 0x80	; 128
    8f70:	09 f0       	breq	.+2      	; 0x8f74 <tchar2uni+0x70>
    8f72:	45 c0       	rjmp	.+138    	; 0x8ffe <tchar2uni+0xfa>
    8f74:	b6 e0       	ldi	r27, 0x06	; 6
    8f76:	44 0f       	add	r20, r20
    8f78:	55 1f       	adc	r21, r21
    8f7a:	66 1f       	adc	r22, r22
    8f7c:	77 1f       	adc	r23, r23
    8f7e:	ba 95       	dec	r27
    8f80:	d1 f7       	brne	.-12     	; 0x8f76 <tchar2uni+0x72>
    8f82:	af 73       	andi	r26, 0x3F	; 63
    8f84:	4a 2b       	or	r20, r26
    8f86:	21 50       	subi	r18, 0x01	; 1
    8f88:	31 09       	sbc	r19, r1
    8f8a:	59 f7       	brne	.-42     	; 0x8f62 <tchar2uni+0x5e>
    8f8c:	8a 01       	movw	r16, r20
    8f8e:	9b 01       	movw	r18, r22
    8f90:	00 58       	subi	r16, 0x80	; 128
    8f92:	11 09       	sbc	r17, r1
    8f94:	21 09       	sbc	r18, r1
    8f96:	31 09       	sbc	r19, r1
    8f98:	00 38       	cpi	r16, 0x80	; 128
    8f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    8f9c:	20 41       	sbci	r18, 0x10	; 16
    8f9e:	31 05       	cpc	r19, r1
    8fa0:	70 f5       	brcc	.+92     	; 0x8ffe <tchar2uni+0xfa>
    8fa2:	8a 01       	movw	r16, r20
    8fa4:	9b 01       	movw	r18, r22
    8fa6:	18 5d       	subi	r17, 0xD8	; 216
    8fa8:	21 09       	sbc	r18, r1
    8faa:	31 09       	sbc	r19, r1
    8fac:	01 15       	cp	r16, r1
    8fae:	18 40       	sbci	r17, 0x08	; 8
    8fb0:	21 05       	cpc	r18, r1
    8fb2:	31 05       	cpc	r19, r1
    8fb4:	20 f1       	brcs	.+72     	; 0x8ffe <tchar2uni+0xfa>
    8fb6:	41 15       	cp	r20, r1
    8fb8:	51 05       	cpc	r21, r1
    8fba:	21 e0       	ldi	r18, 0x01	; 1
    8fbc:	62 07       	cpc	r22, r18
    8fbe:	71 05       	cpc	r23, r1
    8fc0:	b8 f0       	brcs	.+46     	; 0x8ff0 <tchar2uni+0xec>
    8fc2:	8a 01       	movw	r16, r20
    8fc4:	9b 01       	movw	r18, r22
    8fc6:	21 50       	subi	r18, 0x01	; 1
    8fc8:	31 09       	sbc	r19, r1
    8fca:	a6 e0       	ldi	r26, 0x06	; 6
    8fcc:	00 0f       	add	r16, r16
    8fce:	11 1f       	adc	r17, r17
    8fd0:	22 1f       	adc	r18, r18
    8fd2:	33 1f       	adc	r19, r19
    8fd4:	aa 95       	dec	r26
    8fd6:	d1 f7       	brne	.-12     	; 0x8fcc <tchar2uni+0xc8>
    8fd8:	00 27       	eor	r16, r16
    8fda:	11 27       	eor	r17, r17
    8fdc:	33 70       	andi	r19, 0x03	; 3
    8fde:	53 70       	andi	r21, 0x03	; 3
    8fe0:	66 27       	eor	r22, r22
    8fe2:	77 27       	eor	r23, r23
    8fe4:	5c 6d       	ori	r21, 0xDC	; 220
    8fe6:	78 6d       	ori	r23, 0xD8	; 216
    8fe8:	40 2b       	or	r20, r16
    8fea:	51 2b       	or	r21, r17
    8fec:	62 2b       	or	r22, r18
    8fee:	73 2b       	or	r23, r19
    8ff0:	dc 01       	movw	r26, r24
    8ff2:	ed 93       	st	X+, r30
    8ff4:	fc 93       	st	X, r31
    8ff6:	34 2f       	mov	r19, r20
    8ff8:	25 2f       	mov	r18, r21
    8ffa:	cb 01       	movw	r24, r22
    8ffc:	04 c0       	rjmp	.+8      	; 0x9006 <tchar2uni+0x102>
    8ffe:	3f ef       	ldi	r19, 0xFF	; 255
    9000:	2f ef       	ldi	r18, 0xFF	; 255
    9002:	8f ef       	ldi	r24, 0xFF	; 255
    9004:	9f ef       	ldi	r25, 0xFF	; 255
    9006:	63 2f       	mov	r22, r19
    9008:	72 2f       	mov	r23, r18
    900a:	1f 91       	pop	r17
    900c:	0f 91       	pop	r16
    900e:	08 95       	ret

00009010 <clst2sect>:
    9010:	0f 93       	push	r16
    9012:	1f 93       	push	r17
    9014:	fc 01       	movw	r30, r24
    9016:	9a 01       	movw	r18, r20
    9018:	ab 01       	movw	r20, r22
    901a:	22 50       	subi	r18, 0x02	; 2
    901c:	31 09       	sbc	r19, r1
    901e:	41 09       	sbc	r20, r1
    9020:	51 09       	sbc	r21, r1
    9022:	81 8d       	ldd	r24, Z+25	; 0x19
    9024:	92 8d       	ldd	r25, Z+26	; 0x1a
    9026:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9028:	b4 8d       	ldd	r27, Z+28	; 0x1c
    902a:	02 97       	sbiw	r24, 0x02	; 2
    902c:	a1 09       	sbc	r26, r1
    902e:	b1 09       	sbc	r27, r1
    9030:	28 17       	cp	r18, r24
    9032:	39 07       	cpc	r19, r25
    9034:	4a 07       	cpc	r20, r26
    9036:	5b 07       	cpc	r21, r27
    9038:	68 f4       	brcc	.+26     	; 0x9054 <clst2sect+0x44>
    903a:	a1 85       	ldd	r26, Z+9	; 0x09
    903c:	b2 85       	ldd	r27, Z+10	; 0x0a
    903e:	0e 94 0e e5 	call	0x1ca1c	; 0x1ca1c <__muluhisi3>
    9042:	05 a5       	ldd	r16, Z+45	; 0x2d
    9044:	16 a5       	ldd	r17, Z+46	; 0x2e
    9046:	27 a5       	ldd	r18, Z+47	; 0x2f
    9048:	30 a9       	ldd	r19, Z+48	; 0x30
    904a:	60 0f       	add	r22, r16
    904c:	71 1f       	adc	r23, r17
    904e:	82 1f       	adc	r24, r18
    9050:	93 1f       	adc	r25, r19
    9052:	03 c0       	rjmp	.+6      	; 0x905a <clst2sect+0x4a>
    9054:	60 e0       	ldi	r22, 0x00	; 0
    9056:	70 e0       	ldi	r23, 0x00	; 0
    9058:	cb 01       	movw	r24, r22
    905a:	1f 91       	pop	r17
    905c:	0f 91       	pop	r16
    905e:	08 95       	ret

00009060 <clmt_clust>:
    9060:	cf 93       	push	r28
    9062:	df 93       	push	r29
    9064:	fc 01       	movw	r30, r24
    9066:	c2 a1       	ldd	r28, Z+34	; 0x22
    9068:	d3 a1       	ldd	r29, Z+35	; 0x23
    906a:	24 96       	adiw	r28, 0x04	; 4
    906c:	cb 01       	movw	r24, r22
    906e:	ba 01       	movw	r22, r20
    9070:	29 e0       	ldi	r18, 0x09	; 9
    9072:	96 95       	lsr	r25
    9074:	87 95       	ror	r24
    9076:	77 95       	ror	r23
    9078:	67 95       	ror	r22
    907a:	2a 95       	dec	r18
    907c:	d1 f7       	brne	.-12     	; 0x9072 <clmt_clust+0x12>
    907e:	01 90       	ld	r0, Z+
    9080:	f0 81       	ld	r31, Z
    9082:	e0 2d       	mov	r30, r0
    9084:	21 85       	ldd	r18, Z+9	; 0x09
    9086:	32 85       	ldd	r19, Z+10	; 0x0a
    9088:	40 e0       	ldi	r20, 0x00	; 0
    908a:	50 e0       	ldi	r21, 0x00	; 0
    908c:	0e 94 ac e4 	call	0x1c958	; 0x1c958 <__udivmodsi4>
    9090:	88 81       	ld	r24, Y
    9092:	99 81       	ldd	r25, Y+1	; 0x01
    9094:	aa 81       	ldd	r26, Y+2	; 0x02
    9096:	bb 81       	ldd	r27, Y+3	; 0x03
    9098:	00 97       	sbiw	r24, 0x00	; 0
    909a:	a1 05       	cpc	r26, r1
    909c:	b1 05       	cpc	r27, r1
    909e:	b1 f0       	breq	.+44     	; 0x90cc <clmt_clust+0x6c>
    90a0:	28 17       	cp	r18, r24
    90a2:	39 07       	cpc	r19, r25
    90a4:	4a 07       	cpc	r20, r26
    90a6:	5b 07       	cpc	r21, r27
    90a8:	30 f0       	brcs	.+12     	; 0x90b6 <clmt_clust+0x56>
    90aa:	28 1b       	sub	r18, r24
    90ac:	39 0b       	sbc	r19, r25
    90ae:	4a 0b       	sbc	r20, r26
    90b0:	5b 0b       	sbc	r21, r27
    90b2:	28 96       	adiw	r28, 0x08	; 8
    90b4:	ed cf       	rjmp	.-38     	; 0x9090 <clmt_clust+0x30>
    90b6:	8c 81       	ldd	r24, Y+4	; 0x04
    90b8:	9d 81       	ldd	r25, Y+5	; 0x05
    90ba:	ae 81       	ldd	r26, Y+6	; 0x06
    90bc:	bf 81       	ldd	r27, Y+7	; 0x07
    90be:	bc 01       	movw	r22, r24
    90c0:	cd 01       	movw	r24, r26
    90c2:	62 0f       	add	r22, r18
    90c4:	73 1f       	adc	r23, r19
    90c6:	84 1f       	adc	r24, r20
    90c8:	95 1f       	adc	r25, r21
    90ca:	03 c0       	rjmp	.+6      	; 0x90d2 <clmt_clust+0x72>
    90cc:	60 e0       	ldi	r22, 0x00	; 0
    90ce:	70 e0       	ldi	r23, 0x00	; 0
    90d0:	cb 01       	movw	r24, r22
    90d2:	df 91       	pop	r29
    90d4:	cf 91       	pop	r28
    90d6:	08 95       	ret

000090d8 <sum_sfn>:
    90d8:	fc 01       	movw	r30, r24
    90da:	9c 01       	movw	r18, r24
    90dc:	25 5f       	subi	r18, 0xF5	; 245
    90de:	3f 4f       	sbci	r19, 0xFF	; 255
    90e0:	80 e0       	ldi	r24, 0x00	; 0
    90e2:	98 2f       	mov	r25, r24
    90e4:	90 fb       	bst	r25, 0
    90e6:	97 95       	ror	r25
    90e8:	97 f9       	bld	r25, 7
    90ea:	81 91       	ld	r24, Z+
    90ec:	89 0f       	add	r24, r25
    90ee:	e2 17       	cp	r30, r18
    90f0:	f3 07       	cpc	r31, r19
    90f2:	b9 f7       	brne	.-18     	; 0x90e2 <sum_sfn+0xa>
    90f4:	08 95       	ret

000090f6 <get_ldnumber>:
    90f6:	cf 93       	push	r28
    90f8:	df 93       	push	r29
    90fa:	dc 01       	movw	r26, r24
    90fc:	ed 91       	ld	r30, X+
    90fe:	fc 91       	ld	r31, X
    9100:	11 97       	sbiw	r26, 0x01	; 1
    9102:	30 97       	sbiw	r30, 0x00	; 0
    9104:	f9 f0       	breq	.+62     	; 0x9144 <get_ldnumber+0x4e>
    9106:	9f 01       	movw	r18, r30
    9108:	2f 5f       	subi	r18, 0xFF	; 255
    910a:	3f 4f       	sbci	r19, 0xFF	; 255
    910c:	e9 01       	movw	r28, r18
    910e:	21 97       	sbiw	r28, 0x01	; 1
    9110:	88 81       	ld	r24, Y
    9112:	80 32       	cpi	r24, 0x20	; 32
    9114:	18 f0       	brcs	.+6      	; 0x911c <get_ldnumber+0x26>
    9116:	8a 33       	cpi	r24, 0x3A	; 58
    9118:	b9 f7       	brne	.-18     	; 0x9108 <get_ldnumber+0x12>
    911a:	04 c0       	rjmp	.+8      	; 0x9124 <get_ldnumber+0x2e>
    911c:	80 91 0e 18 	lds	r24, 0x180E	; 0x80180e <CurrVol>
    9120:	90 e0       	ldi	r25, 0x00	; 0
    9122:	12 c0       	rjmp	.+36     	; 0x9148 <get_ldnumber+0x52>
    9124:	90 81       	ld	r25, Z
    9126:	80 ed       	ldi	r24, 0xD0	; 208
    9128:	89 0f       	add	r24, r25
    912a:	8a 30       	cpi	r24, 0x0A	; 10
    912c:	58 f4       	brcc	.+22     	; 0x9144 <get_ldnumber+0x4e>
    912e:	32 96       	adiw	r30, 0x02	; 2
    9130:	2e 17       	cp	r18, r30
    9132:	3f 07       	cpc	r19, r31
    9134:	39 f4       	brne	.+14     	; 0x9144 <get_ldnumber+0x4e>
    9136:	90 33       	cpi	r25, 0x30	; 48
    9138:	29 f4       	brne	.+10     	; 0x9144 <get_ldnumber+0x4e>
    913a:	2d 93       	st	X+, r18
    913c:	3c 93       	st	X, r19
    913e:	80 e0       	ldi	r24, 0x00	; 0
    9140:	90 e0       	ldi	r25, 0x00	; 0
    9142:	02 c0       	rjmp	.+4      	; 0x9148 <get_ldnumber+0x52>
    9144:	8f ef       	ldi	r24, 0xFF	; 255
    9146:	9f ef       	ldi	r25, 0xFF	; 255
    9148:	df 91       	pop	r29
    914a:	cf 91       	pop	r28
    914c:	08 95       	ret

0000914e <validate>:
    914e:	0f 93       	push	r16
    9150:	1f 93       	push	r17
    9152:	cf 93       	push	r28
    9154:	df 93       	push	r29
    9156:	ec 01       	movw	r28, r24
    9158:	8b 01       	movw	r16, r22
    915a:	89 2b       	or	r24, r25
    915c:	f9 f0       	breq	.+62     	; 0x919c <validate+0x4e>
    915e:	e8 81       	ld	r30, Y
    9160:	f9 81       	ldd	r31, Y+1	; 0x01
    9162:	30 97       	sbiw	r30, 0x00	; 0
    9164:	d9 f0       	breq	.+54     	; 0x919c <validate+0x4e>
    9166:	80 81       	ld	r24, Z
    9168:	88 23       	and	r24, r24
    916a:	c1 f0       	breq	.+48     	; 0x919c <validate+0x4e>
    916c:	2a 81       	ldd	r18, Y+2	; 0x02
    916e:	3b 81       	ldd	r19, Y+3	; 0x03
    9170:	85 81       	ldd	r24, Z+5	; 0x05
    9172:	96 81       	ldd	r25, Z+6	; 0x06
    9174:	28 17       	cp	r18, r24
    9176:	39 07       	cpc	r19, r25
    9178:	89 f4       	brne	.+34     	; 0x919c <validate+0x4e>
    917a:	81 81       	ldd	r24, Z+1	; 0x01
    917c:	0e 94 c2 6a 	call	0xd584	; 0xd584 <disk_status>
    9180:	80 fd       	sbrc	r24, 0
    9182:	0c c0       	rjmp	.+24     	; 0x919c <validate+0x4e>
    9184:	28 81       	ld	r18, Y
    9186:	39 81       	ldd	r19, Y+1	; 0x01
    9188:	80 e0       	ldi	r24, 0x00	; 0
    918a:	90 e0       	ldi	r25, 0x00	; 0
    918c:	f8 01       	movw	r30, r16
    918e:	31 83       	std	Z+1, r19	; 0x01
    9190:	20 83       	st	Z, r18
    9192:	df 91       	pop	r29
    9194:	cf 91       	pop	r28
    9196:	1f 91       	pop	r17
    9198:	0f 91       	pop	r16
    919a:	08 95       	ret
    919c:	89 e0       	ldi	r24, 0x09	; 9
    919e:	90 e0       	ldi	r25, 0x00	; 0
    91a0:	20 e0       	ldi	r18, 0x00	; 0
    91a2:	30 e0       	ldi	r19, 0x00	; 0
    91a4:	f3 cf       	rjmp	.-26     	; 0x918c <validate+0x3e>

000091a6 <mem_cpy.part.0>:
    91a6:	fb 01       	movw	r30, r22
    91a8:	48 0f       	add	r20, r24
    91aa:	59 1f       	adc	r21, r25
    91ac:	21 91       	ld	r18, Z+
    91ae:	dc 01       	movw	r26, r24
    91b0:	2d 93       	st	X+, r18
    91b2:	cd 01       	movw	r24, r26
    91b4:	a4 17       	cp	r26, r20
    91b6:	b5 07       	cpc	r27, r21
    91b8:	c9 f7       	brne	.-14     	; 0x91ac <mem_cpy.part.0+0x6>
    91ba:	08 95       	ret

000091bc <put_utf>:
    91bc:	0f 93       	push	r16
    91be:	1f 93       	push	r17
    91c0:	fa 01       	movw	r30, r20
    91c2:	60 38       	cpi	r22, 0x80	; 128
    91c4:	71 05       	cpc	r23, r1
    91c6:	81 05       	cpc	r24, r1
    91c8:	91 05       	cpc	r25, r1
    91ca:	30 f4       	brcc	.+12     	; 0x91d8 <put_utf+0x1c>
    91cc:	23 2b       	or	r18, r19
    91ce:	09 f4       	brne	.+2      	; 0x91d2 <put_utf+0x16>
    91d0:	9e c0       	rjmp	.+316    	; 0x930e <put_utf+0x152>
    91d2:	60 83       	st	Z, r22
    91d4:	81 e0       	ldi	r24, 0x01	; 1
    91d6:	9c c0       	rjmp	.+312    	; 0x9310 <put_utf+0x154>
    91d8:	61 15       	cp	r22, r1
    91da:	48 e0       	ldi	r20, 0x08	; 8
    91dc:	74 07       	cpc	r23, r20
    91de:	81 05       	cpc	r24, r1
    91e0:	91 05       	cpc	r25, r1
    91e2:	a0 f4       	brcc	.+40     	; 0x920c <put_utf+0x50>
    91e4:	22 30       	cpi	r18, 0x02	; 2
    91e6:	31 05       	cpc	r19, r1
    91e8:	08 f4       	brcc	.+2      	; 0x91ec <put_utf+0x30>
    91ea:	91 c0       	rjmp	.+290    	; 0x930e <put_utf+0x152>
    91ec:	8b 01       	movw	r16, r22
    91ee:	9c 01       	movw	r18, r24
    91f0:	76 e0       	ldi	r23, 0x06	; 6
    91f2:	36 95       	lsr	r19
    91f4:	27 95       	ror	r18
    91f6:	17 95       	ror	r17
    91f8:	07 95       	ror	r16
    91fa:	7a 95       	dec	r23
    91fc:	d1 f7       	brne	.-12     	; 0x91f2 <put_utf+0x36>
    91fe:	00 6c       	ori	r16, 0xC0	; 192
    9200:	00 83       	st	Z, r16
    9202:	6f 73       	andi	r22, 0x3F	; 63
    9204:	60 68       	ori	r22, 0x80	; 128
    9206:	61 83       	std	Z+1, r22	; 0x01
    9208:	82 e0       	ldi	r24, 0x02	; 2
    920a:	82 c0       	rjmp	.+260    	; 0x9310 <put_utf+0x154>
    920c:	61 15       	cp	r22, r1
    920e:	71 05       	cpc	r23, r1
    9210:	41 e0       	ldi	r20, 0x01	; 1
    9212:	84 07       	cpc	r24, r20
    9214:	91 05       	cpc	r25, r1
    9216:	58 f5       	brcc	.+86     	; 0x926e <put_utf+0xb2>
    9218:	23 30       	cpi	r18, 0x03	; 3
    921a:	31 05       	cpc	r19, r1
    921c:	08 f4       	brcc	.+2      	; 0x9220 <put_utf+0x64>
    921e:	77 c0       	rjmp	.+238    	; 0x930e <put_utf+0x152>
    9220:	8b 01       	movw	r16, r22
    9222:	9c 01       	movw	r18, r24
    9224:	18 5d       	subi	r17, 0xD8	; 216
    9226:	21 09       	sbc	r18, r1
    9228:	31 09       	sbc	r19, r1
    922a:	01 15       	cp	r16, r1
    922c:	18 40       	sbci	r17, 0x08	; 8
    922e:	21 05       	cpc	r18, r1
    9230:	31 05       	cpc	r19, r1
    9232:	08 f4       	brcc	.+2      	; 0x9236 <put_utf+0x7a>
    9234:	6c c0       	rjmp	.+216    	; 0x930e <put_utf+0x152>
    9236:	8b 01       	movw	r16, r22
    9238:	9c 01       	movw	r18, r24
    923a:	4c e0       	ldi	r20, 0x0C	; 12
    923c:	36 95       	lsr	r19
    923e:	27 95       	ror	r18
    9240:	17 95       	ror	r17
    9242:	07 95       	ror	r16
    9244:	4a 95       	dec	r20
    9246:	d1 f7       	brne	.-12     	; 0x923c <put_utf+0x80>
    9248:	00 6e       	ori	r16, 0xE0	; 224
    924a:	00 83       	st	Z, r16
    924c:	8b 01       	movw	r16, r22
    924e:	9c 01       	movw	r18, r24
    9250:	56 e0       	ldi	r21, 0x06	; 6
    9252:	36 95       	lsr	r19
    9254:	27 95       	ror	r18
    9256:	17 95       	ror	r17
    9258:	07 95       	ror	r16
    925a:	5a 95       	dec	r21
    925c:	d1 f7       	brne	.-12     	; 0x9252 <put_utf+0x96>
    925e:	0f 73       	andi	r16, 0x3F	; 63
    9260:	00 68       	ori	r16, 0x80	; 128
    9262:	01 83       	std	Z+1, r16	; 0x01
    9264:	6f 73       	andi	r22, 0x3F	; 63
    9266:	60 68       	ori	r22, 0x80	; 128
    9268:	62 83       	std	Z+2, r22	; 0x02
    926a:	83 e0       	ldi	r24, 0x03	; 3
    926c:	51 c0       	rjmp	.+162    	; 0x9310 <put_utf+0x154>
    926e:	24 30       	cpi	r18, 0x04	; 4
    9270:	31 05       	cpc	r19, r1
    9272:	08 f4       	brcc	.+2      	; 0x9276 <put_utf+0xba>
    9274:	4c c0       	rjmp	.+152    	; 0x930e <put_utf+0x152>
    9276:	8b 01       	movw	r16, r22
    9278:	9c 01       	movw	r18, r24
    927a:	00 27       	eor	r16, r16
    927c:	11 27       	eor	r17, r17
    927e:	38 5d       	subi	r19, 0xD8	; 216
    9280:	b6 e0       	ldi	r27, 0x06	; 6
    9282:	36 95       	lsr	r19
    9284:	27 95       	ror	r18
    9286:	17 95       	ror	r17
    9288:	07 95       	ror	r16
    928a:	ba 95       	dec	r27
    928c:	d1 f7       	brne	.-12     	; 0x9282 <put_utf+0xc6>
    928e:	01 15       	cp	r16, r1
    9290:	11 05       	cpc	r17, r1
    9292:	40 e1       	ldi	r20, 0x10	; 16
    9294:	24 07       	cpc	r18, r20
    9296:	31 05       	cpc	r19, r1
    9298:	d0 f5       	brcc	.+116    	; 0x930e <put_utf+0x152>
    929a:	dc 01       	movw	r26, r24
    929c:	cb 01       	movw	r24, r22
    929e:	aa 27       	eor	r26, r26
    92a0:	bb 27       	eor	r27, r27
    92a2:	9c 5d       	subi	r25, 0xDC	; 220
    92a4:	a1 09       	sbc	r26, r1
    92a6:	b1 09       	sbc	r27, r1
    92a8:	81 15       	cp	r24, r1
    92aa:	44 e0       	ldi	r20, 0x04	; 4
    92ac:	94 07       	cpc	r25, r20
    92ae:	a1 05       	cpc	r26, r1
    92b0:	b1 05       	cpc	r27, r1
    92b2:	68 f5       	brcc	.+90     	; 0x930e <put_utf+0x152>
    92b4:	80 2b       	or	r24, r16
    92b6:	91 2b       	or	r25, r17
    92b8:	a2 2b       	or	r26, r18
    92ba:	b3 2b       	or	r27, r19
    92bc:	11 96       	adiw	r26, 0x01	; 1
    92be:	ac 01       	movw	r20, r24
    92c0:	bd 01       	movw	r22, r26
    92c2:	22 e1       	ldi	r18, 0x12	; 18
    92c4:	76 95       	lsr	r23
    92c6:	67 95       	ror	r22
    92c8:	57 95       	ror	r21
    92ca:	47 95       	ror	r20
    92cc:	2a 95       	dec	r18
    92ce:	d1 f7       	brne	.-12     	; 0x92c4 <put_utf+0x108>
    92d0:	40 6f       	ori	r20, 0xF0	; 240
    92d2:	40 83       	st	Z, r20
    92d4:	ac 01       	movw	r20, r24
    92d6:	bd 01       	movw	r22, r26
    92d8:	3c e0       	ldi	r19, 0x0C	; 12
    92da:	76 95       	lsr	r23
    92dc:	67 95       	ror	r22
    92de:	57 95       	ror	r21
    92e0:	47 95       	ror	r20
    92e2:	3a 95       	dec	r19
    92e4:	d1 f7       	brne	.-12     	; 0x92da <put_utf+0x11e>
    92e6:	4f 73       	andi	r20, 0x3F	; 63
    92e8:	40 68       	ori	r20, 0x80	; 128
    92ea:	41 83       	std	Z+1, r20	; 0x01
    92ec:	ac 01       	movw	r20, r24
    92ee:	bd 01       	movw	r22, r26
    92f0:	a6 e0       	ldi	r26, 0x06	; 6
    92f2:	76 95       	lsr	r23
    92f4:	67 95       	ror	r22
    92f6:	57 95       	ror	r21
    92f8:	47 95       	ror	r20
    92fa:	aa 95       	dec	r26
    92fc:	d1 f7       	brne	.-12     	; 0x92f2 <put_utf+0x136>
    92fe:	4f 73       	andi	r20, 0x3F	; 63
    9300:	40 68       	ori	r20, 0x80	; 128
    9302:	42 83       	std	Z+2, r20	; 0x02
    9304:	8f 73       	andi	r24, 0x3F	; 63
    9306:	80 68       	ori	r24, 0x80	; 128
    9308:	83 83       	std	Z+3, r24	; 0x03
    930a:	84 e0       	ldi	r24, 0x04	; 4
    930c:	01 c0       	rjmp	.+2      	; 0x9310 <put_utf+0x154>
    930e:	80 e0       	ldi	r24, 0x00	; 0
    9310:	1f 91       	pop	r17
    9312:	0f 91       	pop	r16
    9314:	08 95       	ret

00009316 <get_fileinfo>:
    9316:	a0 e0       	ldi	r26, 0x00	; 0
    9318:	b0 e0       	ldi	r27, 0x00	; 0
    931a:	e1 e9       	ldi	r30, 0x91	; 145
    931c:	f9 e4       	ldi	r31, 0x49	; 73
    931e:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    9322:	dc 01       	movw	r26, r24
    9324:	6d 90       	ld	r6, X+
    9326:	7c 90       	ld	r7, X
    9328:	11 97       	sbiw	r26, 0x01	; 1
    932a:	fb 01       	movw	r30, r22
    932c:	16 8a       	std	Z+22, r1	; 0x16
    932e:	56 96       	adiw	r26, 0x16	; 22
    9330:	0d 91       	ld	r16, X+
    9332:	1d 91       	ld	r17, X+
    9334:	2d 91       	ld	r18, X+
    9336:	3c 91       	ld	r19, X
    9338:	59 97       	sbiw	r26, 0x19	; 25
    933a:	01 15       	cp	r16, r1
    933c:	11 05       	cpc	r17, r1
    933e:	21 05       	cpc	r18, r1
    9340:	31 05       	cpc	r19, r1
    9342:	09 f4       	brne	.+2      	; 0x9346 <get_fileinfo+0x30>
    9344:	fc c0       	rjmp	.+504    	; 0x953e <get_fileinfo+0x228>
    9346:	eb 01       	movw	r28, r22
    9348:	8c 01       	movw	r16, r24
    934a:	fc 01       	movw	r30, r24
    934c:	80 a5       	ldd	r24, Z+40	; 0x28
    934e:	91 a5       	ldd	r25, Z+41	; 0x29
    9350:	a2 a5       	ldd	r26, Z+42	; 0x2a
    9352:	b3 a5       	ldd	r27, Z+43	; 0x2b
    9354:	8f 3f       	cpi	r24, 0xFF	; 255
    9356:	9f 4f       	sbci	r25, 0xFF	; 255
    9358:	af 4f       	sbci	r26, 0xFF	; 255
    935a:	bf 4f       	sbci	r27, 0xFF	; 255
    935c:	09 f4       	brne	.+2      	; 0x9360 <get_fileinfo+0x4a>
    935e:	49 c0       	rjmp	.+146    	; 0x93f2 <get_fileinfo+0xdc>
    9360:	a1 2c       	mov	r10, r1
    9362:	b1 2c       	mov	r11, r1
    9364:	c1 2c       	mov	r12, r1
    9366:	d1 2c       	mov	r13, r1
    9368:	e1 2c       	mov	r14, r1
    936a:	f1 2c       	mov	r15, r1
    936c:	88 24       	eor	r8, r8
    936e:	8a 94       	dec	r8
    9370:	91 2c       	mov	r9, r1
    9372:	d3 01       	movw	r26, r6
    9374:	1b 96       	adiw	r26, 0x0b	; 11
    9376:	ed 91       	ld	r30, X+
    9378:	fc 91       	ld	r31, X
    937a:	1c 97       	sbiw	r26, 0x0c	; 12
    937c:	ea 0d       	add	r30, r10
    937e:	fb 1d       	adc	r31, r11
    9380:	80 81       	ld	r24, Z
    9382:	91 81       	ldd	r25, Z+1	; 0x01
    9384:	00 97       	sbiw	r24, 0x00	; 0
    9386:	69 f1       	breq	.+90     	; 0x93e2 <get_fileinfo+0xcc>
    9388:	c1 14       	cp	r12, r1
    938a:	d1 04       	cpc	r13, r1
    938c:	29 f4       	brne	.+10     	; 0x9398 <get_fileinfo+0x82>
    938e:	9c 01       	movw	r18, r24
    9390:	38 5d       	subi	r19, 0xD8	; 216
    9392:	21 15       	cp	r18, r1
    9394:	38 40       	sbci	r19, 0x08	; 8
    9396:	f0 f0       	brcs	.+60     	; 0x93d4 <get_fileinfo+0xbe>
    9398:	a7 01       	movw	r20, r14
    939a:	4a 5e       	subi	r20, 0xEA	; 234
    939c:	5f 4f       	sbci	r21, 0xFF	; 255
    939e:	4c 0f       	add	r20, r28
    93a0:	5d 1f       	adc	r21, r29
    93a2:	16 01       	movw	r2, r12
    93a4:	41 2c       	mov	r4, r1
    93a6:	51 2c       	mov	r5, r1
    93a8:	21 01       	movw	r4, r2
    93aa:	33 24       	eor	r3, r3
    93ac:	22 24       	eor	r2, r2
    93ae:	a0 e0       	ldi	r26, 0x00	; 0
    93b0:	b0 e0       	ldi	r27, 0x00	; 0
    93b2:	bc 01       	movw	r22, r24
    93b4:	cd 01       	movw	r24, r26
    93b6:	62 29       	or	r22, r2
    93b8:	73 29       	or	r23, r3
    93ba:	84 29       	or	r24, r4
    93bc:	95 29       	or	r25, r5
    93be:	94 01       	movw	r18, r8
    93c0:	2e 19       	sub	r18, r14
    93c2:	3f 09       	sbc	r19, r15
    93c4:	fb de       	rcall	.-522    	; 0x91bc <put_utf>
    93c6:	90 e0       	ldi	r25, 0x00	; 0
    93c8:	00 97       	sbiw	r24, 0x00	; 0
    93ca:	49 f0       	breq	.+18     	; 0x93de <get_fileinfo+0xc8>
    93cc:	e8 0e       	add	r14, r24
    93ce:	f9 1e       	adc	r15, r25
    93d0:	80 e0       	ldi	r24, 0x00	; 0
    93d2:	90 e0       	ldi	r25, 0x00	; 0
    93d4:	a2 e0       	ldi	r26, 0x02	; 2
    93d6:	aa 0e       	add	r10, r26
    93d8:	b1 1c       	adc	r11, r1
    93da:	6c 01       	movw	r12, r24
    93dc:	ca cf       	rjmp	.-108    	; 0x9372 <get_fileinfo+0x5c>
    93de:	e1 2c       	mov	r14, r1
    93e0:	f1 2c       	mov	r15, r1
    93e2:	cd 28       	or	r12, r13
    93e4:	11 f0       	breq	.+4      	; 0x93ea <get_fileinfo+0xd4>
    93e6:	e1 2c       	mov	r14, r1
    93e8:	f1 2c       	mov	r15, r1
    93ea:	fe 01       	movw	r30, r28
    93ec:	ee 0d       	add	r30, r14
    93ee:	ff 1d       	adc	r31, r15
    93f0:	16 8a       	std	Z+22, r1	; 0x16
    93f2:	e1 2c       	mov	r14, r1
    93f4:	f1 2c       	mov	r15, r1
    93f6:	80 e0       	ldi	r24, 0x00	; 0
    93f8:	90 e0       	ldi	r25, 0x00	; 0
    93fa:	2c e0       	ldi	r18, 0x0C	; 12
    93fc:	a2 2e       	mov	r10, r18
    93fe:	b1 2c       	mov	r11, r1
    9400:	3e e2       	ldi	r19, 0x2E	; 46
    9402:	93 2e       	mov	r9, r19
    9404:	6c 01       	movw	r12, r24
    9406:	bf ef       	ldi	r27, 0xFF	; 255
    9408:	cb 1a       	sub	r12, r27
    940a:	db 0a       	sbc	r13, r27
    940c:	f8 01       	movw	r30, r16
    940e:	22 8d       	ldd	r18, Z+26	; 0x1a
    9410:	33 8d       	ldd	r19, Z+27	; 0x1b
    9412:	f9 01       	movw	r30, r18
    9414:	e8 0f       	add	r30, r24
    9416:	f9 1f       	adc	r31, r25
    9418:	80 81       	ld	r24, Z
    941a:	90 e0       	ldi	r25, 0x00	; 0
    941c:	80 32       	cpi	r24, 0x20	; 32
    941e:	91 05       	cpc	r25, r1
    9420:	71 f1       	breq	.+92     	; 0x947e <get_fileinfo+0x168>
    9422:	85 30       	cpi	r24, 0x05	; 5
    9424:	91 05       	cpc	r25, r1
    9426:	11 f4       	brne	.+4      	; 0x942c <get_fileinfo+0x116>
    9428:	85 ee       	ldi	r24, 0xE5	; 229
    942a:	90 e0       	ldi	r25, 0x00	; 0
    942c:	f9 e0       	ldi	r31, 0x09	; 9
    942e:	cf 16       	cp	r12, r31
    9430:	d1 04       	cpc	r13, r1
    9432:	59 f4       	brne	.+22     	; 0x944a <get_fileinfo+0x134>
    9434:	2c e0       	ldi	r18, 0x0C	; 12
    9436:	e2 16       	cp	r14, r18
    9438:	f1 04       	cpc	r15, r1
    943a:	38 f4       	brcc	.+14     	; 0x944a <get_fileinfo+0x134>
    943c:	fe 01       	movw	r30, r28
    943e:	ee 0d       	add	r30, r14
    9440:	ff 1d       	adc	r31, r15
    9442:	91 86       	std	Z+9, r9	; 0x09
    9444:	d7 01       	movw	r26, r14
    9446:	11 96       	adiw	r26, 0x01	; 1
    9448:	7d 01       	movw	r14, r26
    944a:	65 eb       	ldi	r22, 0xB5	; 181
    944c:	71 e0       	ldi	r23, 0x01	; 1
    944e:	0e 94 4b 6a 	call	0xd496	; 0xd496 <ff_oem2uni>
    9452:	00 97       	sbiw	r24, 0x00	; 0
    9454:	19 f4       	brne	.+6      	; 0x945c <get_fileinfo+0x146>
    9456:	e1 2c       	mov	r14, r1
    9458:	f1 2c       	mov	r15, r1
    945a:	16 c0       	rjmp	.+44     	; 0x9488 <get_fileinfo+0x172>
    945c:	a7 01       	movw	r20, r14
    945e:	47 5f       	subi	r20, 0xF7	; 247
    9460:	5f 4f       	sbci	r21, 0xFF	; 255
    9462:	4c 0f       	add	r20, r28
    9464:	5d 1f       	adc	r21, r29
    9466:	bc 01       	movw	r22, r24
    9468:	80 e0       	ldi	r24, 0x00	; 0
    946a:	90 e0       	ldi	r25, 0x00	; 0
    946c:	95 01       	movw	r18, r10
    946e:	2e 19       	sub	r18, r14
    9470:	3f 09       	sbc	r19, r15
    9472:	a4 de       	rcall	.-696    	; 0x91bc <put_utf>
    9474:	90 e0       	ldi	r25, 0x00	; 0
    9476:	00 97       	sbiw	r24, 0x00	; 0
    9478:	71 f3       	breq	.-36     	; 0x9456 <get_fileinfo+0x140>
    947a:	e8 0e       	add	r14, r24
    947c:	f9 1e       	adc	r15, r25
    947e:	c6 01       	movw	r24, r12
    9480:	8b 30       	cpi	r24, 0x0B	; 11
    9482:	91 05       	cpc	r25, r1
    9484:	09 f0       	breq	.+2      	; 0x9488 <get_fileinfo+0x172>
    9486:	be cf       	rjmp	.-132    	; 0x9404 <get_fileinfo+0xee>
    9488:	fe 01       	movw	r30, r28
    948a:	ee 0d       	add	r30, r14
    948c:	ff 1d       	adc	r31, r15
    948e:	11 86       	std	Z+9, r1	; 0x09
    9490:	8e 89       	ldd	r24, Y+22	; 0x16
    9492:	81 11       	cpse	r24, r1
    9494:	39 c0       	rjmp	.+114    	; 0x9508 <get_fileinfo+0x1f2>
    9496:	e1 14       	cp	r14, r1
    9498:	f1 04       	cpc	r15, r1
    949a:	31 f0       	breq	.+12     	; 0x94a8 <get_fileinfo+0x192>
    949c:	fe 01       	movw	r30, r28
    949e:	39 96       	adiw	r30, 0x09	; 9
    94a0:	58 e0       	ldi	r21, 0x08	; 8
    94a2:	20 e0       	ldi	r18, 0x00	; 0
    94a4:	30 e0       	ldi	r19, 0x00	; 0
    94a6:	13 c0       	rjmp	.+38     	; 0x94ce <get_fileinfo+0x1b8>
    94a8:	8f e3       	ldi	r24, 0x3F	; 63
    94aa:	8e 8b       	std	Y+22, r24	; 0x16
    94ac:	21 e0       	ldi	r18, 0x01	; 1
    94ae:	30 e0       	ldi	r19, 0x00	; 0
    94b0:	1e c0       	rjmp	.+60     	; 0x94ee <get_fileinfo+0x1d8>
    94b2:	90 e0       	ldi	r25, 0x00	; 0
    94b4:	8e 32       	cpi	r24, 0x2E	; 46
    94b6:	91 05       	cpc	r25, r1
    94b8:	09 f4       	brne	.+2      	; 0x94bc <get_fileinfo+0x1a6>
    94ba:	50 e1       	ldi	r21, 0x10	; 16
    94bc:	bc 01       	movw	r22, r24
    94be:	61 54       	subi	r22, 0x41	; 65
    94c0:	71 09       	sbc	r23, r1
    94c2:	6a 31       	cpi	r22, 0x1A	; 26
    94c4:	71 05       	cpc	r23, r1
    94c6:	38 f0       	brcs	.+14     	; 0x94d6 <get_fileinfo+0x1c0>
    94c8:	84 87       	std	Z+12, r24	; 0x0c
    94ca:	2f 5f       	subi	r18, 0xFF	; 255
    94cc:	3f 4f       	sbci	r19, 0xFF	; 255
    94ce:	81 91       	ld	r24, Z+
    94d0:	81 11       	cpse	r24, r1
    94d2:	ef cf       	rjmp	.-34     	; 0x94b2 <get_fileinfo+0x19c>
    94d4:	0c c0       	rjmp	.+24     	; 0x94ee <get_fileinfo+0x1d8>
    94d6:	d8 01       	movw	r26, r16
    94d8:	5a 96       	adiw	r26, 0x1a	; 26
    94da:	6d 91       	ld	r22, X+
    94dc:	7c 91       	ld	r23, X
    94de:	5b 97       	sbiw	r26, 0x1b	; 27
    94e0:	db 01       	movw	r26, r22
    94e2:	1c 96       	adiw	r26, 0x0c	; 12
    94e4:	4c 91       	ld	r20, X
    94e6:	45 23       	and	r20, r21
    94e8:	79 f3       	breq	.-34     	; 0x94c8 <get_fileinfo+0x1b2>
    94ea:	80 96       	adiw	r24, 0x20	; 32
    94ec:	ed cf       	rjmp	.-38     	; 0x94c8 <get_fileinfo+0x1b2>
    94ee:	fe 01       	movw	r30, r28
    94f0:	e2 0f       	add	r30, r18
    94f2:	f3 1f       	adc	r31, r19
    94f4:	16 8a       	std	Z+22, r1	; 0x16
    94f6:	d8 01       	movw	r26, r16
    94f8:	5a 96       	adiw	r26, 0x1a	; 26
    94fa:	ed 91       	ld	r30, X+
    94fc:	fc 91       	ld	r31, X
    94fe:	5b 97       	sbiw	r26, 0x1b	; 27
    9500:	84 85       	ldd	r24, Z+12	; 0x0c
    9502:	81 11       	cpse	r24, r1
    9504:	01 c0       	rjmp	.+2      	; 0x9508 <get_fileinfo+0x1f2>
    9506:	19 86       	std	Y+9, r1	; 0x09
    9508:	d8 01       	movw	r26, r16
    950a:	5a 96       	adiw	r26, 0x1a	; 26
    950c:	ed 91       	ld	r30, X+
    950e:	fc 91       	ld	r31, X
    9510:	5b 97       	sbiw	r26, 0x1b	; 27
    9512:	83 85       	ldd	r24, Z+11	; 0x0b
    9514:	88 87       	std	Y+8, r24	; 0x08
    9516:	5a 96       	adiw	r26, 0x1a	; 26
    9518:	0d 91       	ld	r16, X+
    951a:	1c 91       	ld	r17, X
    951c:	5b 97       	sbiw	r26, 0x1b	; 27
    951e:	c8 01       	movw	r24, r16
    9520:	4c 96       	adiw	r24, 0x1c	; 28
    9522:	bd dc       	rcall	.-1670   	; 0x8e9e <ld_dword>
    9524:	68 83       	st	Y, r22
    9526:	79 83       	std	Y+1, r23	; 0x01
    9528:	8a 83       	std	Y+2, r24	; 0x02
    952a:	9b 83       	std	Y+3, r25	; 0x03
    952c:	f8 01       	movw	r30, r16
    952e:	86 89       	ldd	r24, Z+22	; 0x16
    9530:	97 89       	ldd	r25, Z+23	; 0x17
    9532:	9f 83       	std	Y+7, r25	; 0x07
    9534:	8e 83       	std	Y+6, r24	; 0x06
    9536:	80 8d       	ldd	r24, Z+24	; 0x18
    9538:	91 8d       	ldd	r25, Z+25	; 0x19
    953a:	9d 83       	std	Y+5, r25	; 0x05
    953c:	8c 83       	std	Y+4, r24	; 0x04
    953e:	cd b7       	in	r28, 0x3d	; 61
    9540:	de b7       	in	r29, 0x3e	; 62
    9542:	e2 e1       	ldi	r30, 0x12	; 18
    9544:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

00009548 <ld_clust.isra.4>:
    9548:	fb 01       	movw	r30, r22
    954a:	42 8d       	ldd	r20, Z+26	; 0x1a
    954c:	53 8d       	ldd	r21, Z+27	; 0x1b
    954e:	60 e0       	ldi	r22, 0x00	; 0
    9550:	70 e0       	ldi	r23, 0x00	; 0
    9552:	83 30       	cpi	r24, 0x03	; 3
    9554:	59 f4       	brne	.+22     	; 0x956c <ld_clust.isra.4+0x24>
    9556:	84 89       	ldd	r24, Z+20	; 0x14
    9558:	95 89       	ldd	r25, Z+21	; 0x15
    955a:	a0 e0       	ldi	r26, 0x00	; 0
    955c:	b0 e0       	ldi	r27, 0x00	; 0
    955e:	dc 01       	movw	r26, r24
    9560:	99 27       	eor	r25, r25
    9562:	88 27       	eor	r24, r24
    9564:	48 2b       	or	r20, r24
    9566:	59 2b       	or	r21, r25
    9568:	6a 2b       	or	r22, r26
    956a:	7b 2b       	or	r23, r27
    956c:	cb 01       	movw	r24, r22
    956e:	ba 01       	movw	r22, r20
    9570:	08 95       	ret

00009572 <st_clust.isra.5>:
    9572:	fb 01       	movw	r30, r22
    9574:	22 8f       	std	Z+26, r18	; 0x1a
    9576:	33 8f       	std	Z+27, r19	; 0x1b
    9578:	dc 01       	movw	r26, r24
    957a:	8c 91       	ld	r24, X
    957c:	83 30       	cpi	r24, 0x03	; 3
    957e:	29 f4       	brne	.+10     	; 0x958a <st_clust.isra.5+0x18>
    9580:	ca 01       	movw	r24, r20
    9582:	aa 27       	eor	r26, r26
    9584:	bb 27       	eor	r27, r27
    9586:	84 8b       	std	Z+20, r24	; 0x14
    9588:	95 8b       	std	Z+21, r25	; 0x15
    958a:	08 95       	ret

0000958c <sync_window.part.6>:
    958c:	8f 92       	push	r8
    958e:	9f 92       	push	r9
    9590:	af 92       	push	r10
    9592:	bf 92       	push	r11
    9594:	ef 92       	push	r14
    9596:	ff 92       	push	r15
    9598:	0f 93       	push	r16
    959a:	1f 93       	push	r17
    959c:	cf 93       	push	r28
    959e:	df 93       	push	r29
    95a0:	ec 01       	movw	r28, r24
    95a2:	7c 01       	movw	r14, r24
    95a4:	45 e3       	ldi	r20, 0x35	; 53
    95a6:	e4 0e       	add	r14, r20
    95a8:	f1 1c       	adc	r15, r1
    95aa:	29 a9       	ldd	r18, Y+49	; 0x31
    95ac:	3a a9       	ldd	r19, Y+50	; 0x32
    95ae:	4b a9       	ldd	r20, Y+51	; 0x33
    95b0:	5c a9       	ldd	r21, Y+52	; 0x34
    95b2:	01 e0       	ldi	r16, 0x01	; 1
    95b4:	10 e0       	ldi	r17, 0x00	; 0
    95b6:	b7 01       	movw	r22, r14
    95b8:	89 81       	ldd	r24, Y+1	; 0x01
    95ba:	0e 94 de 6a 	call	0xd5bc	; 0xd5bc <disk_write>
    95be:	89 2b       	or	r24, r25
    95c0:	41 f5       	brne	.+80     	; 0x9612 <sync_window.part.6+0x86>
    95c2:	1b 82       	std	Y+3, r1	; 0x03
    95c4:	09 a9       	ldd	r16, Y+49	; 0x31
    95c6:	1a a9       	ldd	r17, Y+50	; 0x32
    95c8:	2b a9       	ldd	r18, Y+51	; 0x33
    95ca:	3c a9       	ldd	r19, Y+52	; 0x34
    95cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    95ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    95d0:	af 8d       	ldd	r26, Y+31	; 0x1f
    95d2:	b8 a1       	ldd	r27, Y+32	; 0x20
    95d4:	8d a0       	ldd	r8, Y+37	; 0x25
    95d6:	9e a0       	ldd	r9, Y+38	; 0x26
    95d8:	af a0       	ldd	r10, Y+39	; 0x27
    95da:	b8 a4       	ldd	r11, Y+40	; 0x28
    95dc:	b9 01       	movw	r22, r18
    95de:	a8 01       	movw	r20, r16
    95e0:	48 19       	sub	r20, r8
    95e2:	59 09       	sbc	r21, r9
    95e4:	6a 09       	sbc	r22, r10
    95e6:	7b 09       	sbc	r23, r11
    95e8:	48 17       	cp	r20, r24
    95ea:	59 07       	cpc	r21, r25
    95ec:	6a 07       	cpc	r22, r26
    95ee:	7b 07       	cpc	r23, r27
    95f0:	98 f4       	brcc	.+38     	; 0x9618 <sync_window.part.6+0x8c>
    95f2:	6a 81       	ldd	r22, Y+2	; 0x02
    95f4:	62 30       	cpi	r22, 0x02	; 2
    95f6:	81 f4       	brne	.+32     	; 0x9618 <sync_window.part.6+0x8c>
    95f8:	a9 01       	movw	r20, r18
    95fa:	98 01       	movw	r18, r16
    95fc:	28 0f       	add	r18, r24
    95fe:	39 1f       	adc	r19, r25
    9600:	4a 1f       	adc	r20, r26
    9602:	5b 1f       	adc	r21, r27
    9604:	01 e0       	ldi	r16, 0x01	; 1
    9606:	10 e0       	ldi	r17, 0x00	; 0
    9608:	b7 01       	movw	r22, r14
    960a:	89 81       	ldd	r24, Y+1	; 0x01
    960c:	0e 94 de 6a 	call	0xd5bc	; 0xd5bc <disk_write>
    9610:	03 c0       	rjmp	.+6      	; 0x9618 <sync_window.part.6+0x8c>
    9612:	81 e0       	ldi	r24, 0x01	; 1
    9614:	90 e0       	ldi	r25, 0x00	; 0
    9616:	02 c0       	rjmp	.+4      	; 0x961c <sync_window.part.6+0x90>
    9618:	80 e0       	ldi	r24, 0x00	; 0
    961a:	90 e0       	ldi	r25, 0x00	; 0
    961c:	df 91       	pop	r29
    961e:	cf 91       	pop	r28
    9620:	1f 91       	pop	r17
    9622:	0f 91       	pop	r16
    9624:	ff 90       	pop	r15
    9626:	ef 90       	pop	r14
    9628:	bf 90       	pop	r11
    962a:	af 90       	pop	r10
    962c:	9f 90       	pop	r9
    962e:	8f 90       	pop	r8
    9630:	08 95       	ret

00009632 <sync_fs>:
    9632:	ef 92       	push	r14
    9634:	ff 92       	push	r15
    9636:	0f 93       	push	r16
    9638:	1f 93       	push	r17
    963a:	cf 93       	push	r28
    963c:	df 93       	push	r29
    963e:	ec 01       	movw	r28, r24
    9640:	8b 81       	ldd	r24, Y+3	; 0x03
    9642:	81 11       	cpse	r24, r1
    9644:	05 c0       	rjmp	.+10     	; 0x9650 <sync_fs+0x1e>
    9646:	88 81       	ld	r24, Y
    9648:	83 30       	cpi	r24, 0x03	; 3
    964a:	09 f0       	breq	.+2      	; 0x964e <sync_fs+0x1c>
    964c:	52 c0       	rjmp	.+164    	; 0x96f2 <sync_fs+0xc0>
    964e:	06 c0       	rjmp	.+12     	; 0x965c <sync_fs+0x2a>
    9650:	ce 01       	movw	r24, r28
    9652:	9c df       	rcall	.-200    	; 0x958c <sync_window.part.6>
    9654:	00 97       	sbiw	r24, 0x00	; 0
    9656:	09 f0       	breq	.+2      	; 0x965a <sync_fs+0x28>
    9658:	59 c0       	rjmp	.+178    	; 0x970c <sync_fs+0xda>
    965a:	f5 cf       	rjmp	.-22     	; 0x9646 <sync_fs+0x14>
    965c:	8c 81       	ldd	r24, Y+4	; 0x04
    965e:	81 30       	cpi	r24, 0x01	; 1
    9660:	09 f0       	breq	.+2      	; 0x9664 <sync_fs+0x32>
    9662:	47 c0       	rjmp	.+142    	; 0x96f2 <sync_fs+0xc0>
    9664:	40 e0       	ldi	r20, 0x00	; 0
    9666:	52 e0       	ldi	r21, 0x02	; 2
    9668:	60 e0       	ldi	r22, 0x00	; 0
    966a:	70 e0       	ldi	r23, 0x00	; 0
    966c:	7e 01       	movw	r14, r28
    966e:	85 e3       	ldi	r24, 0x35	; 53
    9670:	e8 0e       	add	r14, r24
    9672:	f1 1c       	adc	r15, r1
    9674:	c7 01       	movw	r24, r14
    9676:	2e dc       	rcall	.-1956   	; 0x8ed4 <mem_set>
    9678:	85 e5       	ldi	r24, 0x55	; 85
    967a:	fe 01       	movw	r30, r28
    967c:	ed 5c       	subi	r30, 0xCD	; 205
    967e:	fd 4f       	sbci	r31, 0xFD	; 253
    9680:	80 83       	st	Z, r24
    9682:	8a ea       	ldi	r24, 0xAA	; 170
    9684:	31 96       	adiw	r30, 0x01	; 1
    9686:	80 83       	st	Z, r24
    9688:	82 e5       	ldi	r24, 0x52	; 82
    968a:	8d ab       	std	Y+53, r24	; 0x35
    968c:	8e ab       	std	Y+54, r24	; 0x36
    968e:	81 e6       	ldi	r24, 0x61	; 97
    9690:	8f ab       	std	Y+55, r24	; 0x37
    9692:	91 e4       	ldi	r25, 0x41	; 65
    9694:	98 af       	std	Y+56, r25	; 0x38
    9696:	22 e7       	ldi	r18, 0x72	; 114
    9698:	7b 97       	sbiw	r30, 0x1b	; 27
    969a:	20 83       	st	Z, r18
    969c:	31 96       	adiw	r30, 0x01	; 1
    969e:	20 83       	st	Z, r18
    96a0:	31 96       	adiw	r30, 0x01	; 1
    96a2:	90 83       	st	Z, r25
    96a4:	31 96       	adiw	r30, 0x01	; 1
    96a6:	80 83       	st	Z, r24
    96a8:	49 89       	ldd	r20, Y+17	; 0x11
    96aa:	5a 89       	ldd	r21, Y+18	; 0x12
    96ac:	6b 89       	ldd	r22, Y+19	; 0x13
    96ae:	7c 89       	ldd	r23, Y+20	; 0x14
    96b0:	ce 01       	movw	r24, r28
    96b2:	83 5e       	subi	r24, 0xE3	; 227
    96b4:	9d 4f       	sbci	r25, 0xFD	; 253
    96b6:	08 dc       	rcall	.-2032   	; 0x8ec8 <st_dword>
    96b8:	4d 85       	ldd	r20, Y+13	; 0x0d
    96ba:	5e 85       	ldd	r21, Y+14	; 0x0e
    96bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    96be:	78 89       	ldd	r23, Y+16	; 0x10
    96c0:	ce 01       	movw	r24, r28
    96c2:	8f 5d       	subi	r24, 0xDF	; 223
    96c4:	9d 4f       	sbci	r25, 0xFD	; 253
    96c6:	00 dc       	rcall	.-2048   	; 0x8ec8 <st_dword>
    96c8:	89 a1       	ldd	r24, Y+33	; 0x21
    96ca:	9a a1       	ldd	r25, Y+34	; 0x22
    96cc:	ab a1       	ldd	r26, Y+35	; 0x23
    96ce:	bc a1       	ldd	r27, Y+36	; 0x24
    96d0:	9c 01       	movw	r18, r24
    96d2:	ad 01       	movw	r20, r26
    96d4:	2f 5f       	subi	r18, 0xFF	; 255
    96d6:	3f 4f       	sbci	r19, 0xFF	; 255
    96d8:	4f 4f       	sbci	r20, 0xFF	; 255
    96da:	5f 4f       	sbci	r21, 0xFF	; 255
    96dc:	29 ab       	std	Y+49, r18	; 0x31
    96de:	3a ab       	std	Y+50, r19	; 0x32
    96e0:	4b ab       	std	Y+51, r20	; 0x33
    96e2:	5c ab       	std	Y+52, r21	; 0x34
    96e4:	01 e0       	ldi	r16, 0x01	; 1
    96e6:	10 e0       	ldi	r17, 0x00	; 0
    96e8:	b7 01       	movw	r22, r14
    96ea:	89 81       	ldd	r24, Y+1	; 0x01
    96ec:	0e 94 de 6a 	call	0xd5bc	; 0xd5bc <disk_write>
    96f0:	1c 82       	std	Y+4, r1	; 0x04
    96f2:	40 e0       	ldi	r20, 0x00	; 0
    96f4:	50 e0       	ldi	r21, 0x00	; 0
    96f6:	60 e0       	ldi	r22, 0x00	; 0
    96f8:	89 81       	ldd	r24, Y+1	; 0x01
    96fa:	0e 94 ee 6a 	call	0xd5dc	; 0xd5dc <disk_ioctl>
    96fe:	31 e0       	ldi	r19, 0x01	; 1
    9700:	20 e0       	ldi	r18, 0x00	; 0
    9702:	89 2b       	or	r24, r25
    9704:	09 f4       	brne	.+2      	; 0x9708 <sync_fs+0xd6>
    9706:	30 e0       	ldi	r19, 0x00	; 0
    9708:	83 2f       	mov	r24, r19
    970a:	92 2f       	mov	r25, r18
    970c:	cd b7       	in	r28, 0x3d	; 61
    970e:	de b7       	in	r29, 0x3e	; 62
    9710:	e6 e0       	ldi	r30, 0x06	; 6
    9712:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

00009716 <dir_clear>:
    9716:	4f 92       	push	r4
    9718:	5f 92       	push	r5
    971a:	6f 92       	push	r6
    971c:	7f 92       	push	r7
    971e:	af 92       	push	r10
    9720:	bf 92       	push	r11
    9722:	cf 92       	push	r12
    9724:	df 92       	push	r13
    9726:	ef 92       	push	r14
    9728:	ff 92       	push	r15
    972a:	0f 93       	push	r16
    972c:	1f 93       	push	r17
    972e:	cf 93       	push	r28
    9730:	df 93       	push	r29
    9732:	ec 01       	movw	r28, r24
    9734:	6a 01       	movw	r12, r20
    9736:	7b 01       	movw	r14, r22
    9738:	8b 81       	ldd	r24, Y+3	; 0x03
    973a:	81 11       	cpse	r24, r1
    973c:	28 c0       	rjmp	.+80     	; 0x978e <dir_clear+0x78>
    973e:	b7 01       	movw	r22, r14
    9740:	a6 01       	movw	r20, r12
    9742:	ce 01       	movw	r24, r28
    9744:	65 dc       	rcall	.-1846   	; 0x9010 <clst2sect>
    9746:	2b 01       	movw	r4, r22
    9748:	3c 01       	movw	r6, r24
    974a:	69 ab       	std	Y+49, r22	; 0x31
    974c:	7a ab       	std	Y+50, r23	; 0x32
    974e:	8b ab       	std	Y+51, r24	; 0x33
    9750:	9c ab       	std	Y+52, r25	; 0x34
    9752:	5e 01       	movw	r10, r28
    9754:	25 e3       	ldi	r18, 0x35	; 53
    9756:	a2 0e       	add	r10, r18
    9758:	b1 1c       	adc	r11, r1
    975a:	40 e0       	ldi	r20, 0x00	; 0
    975c:	52 e0       	ldi	r21, 0x02	; 2
    975e:	60 e0       	ldi	r22, 0x00	; 0
    9760:	70 e0       	ldi	r23, 0x00	; 0
    9762:	c5 01       	movw	r24, r10
    9764:	b7 db       	rcall	.-2194   	; 0x8ed4 <mem_set>
    9766:	09 85       	ldd	r16, Y+9	; 0x09
    9768:	1a 85       	ldd	r17, Y+10	; 0x0a
    976a:	c8 01       	movw	r24, r16
    976c:	a0 e0       	ldi	r26, 0x00	; 0
    976e:	b0 e0       	ldi	r27, 0x00	; 0
    9770:	39 e0       	ldi	r19, 0x09	; 9
    9772:	88 0f       	add	r24, r24
    9774:	99 1f       	adc	r25, r25
    9776:	aa 1f       	adc	r26, r26
    9778:	bb 1f       	adc	r27, r27
    977a:	3a 95       	dec	r19
    977c:	d1 f7       	brne	.-12     	; 0x9772 <dir_clear+0x5c>
    977e:	81 15       	cp	r24, r1
    9780:	90 48       	sbci	r25, 0x80	; 128
    9782:	a1 05       	cpc	r26, r1
    9784:	b1 05       	cpc	r27, r1
    9786:	50 f0       	brcs	.+20     	; 0x979c <dir_clear+0x86>
    9788:	00 e0       	ldi	r16, 0x00	; 0
    978a:	10 e8       	ldi	r17, 0x80	; 128
    978c:	14 c0       	rjmp	.+40     	; 0x97b6 <dir_clear+0xa0>
    978e:	ce 01       	movw	r24, r28
    9790:	fd de       	rcall	.-518    	; 0x958c <sync_window.part.6>
    9792:	89 2b       	or	r24, r25
    9794:	a1 f2       	breq	.-88     	; 0x973e <dir_clear+0x28>
    9796:	81 e0       	ldi	r24, 0x01	; 1
    9798:	90 e0       	ldi	r25, 0x00	; 0
    979a:	56 c0       	rjmp	.+172    	; 0x9848 <dir_clear+0x132>
    979c:	10 2f       	mov	r17, r16
    979e:	00 27       	eor	r16, r16
    97a0:	11 0f       	add	r17, r17
    97a2:	09 c0       	rjmp	.+18     	; 0x97b6 <dir_clear+0xa0>
    97a4:	c8 01       	movw	r24, r16
    97a6:	0e 94 12 6a 	call	0xd424	; 0xd424 <ff_memalloc>
    97aa:	6c 01       	movw	r12, r24
    97ac:	00 97       	sbiw	r24, 0x00	; 0
    97ae:	09 f0       	breq	.+2      	; 0x97b2 <dir_clear+0x9c>
    97b0:	40 c0       	rjmp	.+128    	; 0x9832 <dir_clear+0x11c>
    97b2:	16 95       	lsr	r17
    97b4:	07 95       	ror	r16
    97b6:	01 30       	cpi	r16, 0x01	; 1
    97b8:	82 e0       	ldi	r24, 0x02	; 2
    97ba:	18 07       	cpc	r17, r24
    97bc:	98 f7       	brcc	.-26     	; 0x97a4 <dir_clear+0x8e>
    97be:	e1 2c       	mov	r14, r1
    97c0:	f1 2c       	mov	r15, r1
    97c2:	11 c0       	rjmp	.+34     	; 0x97e6 <dir_clear+0xd0>
    97c4:	01 e0       	ldi	r16, 0x01	; 1
    97c6:	10 e0       	ldi	r17, 0x00	; 0
    97c8:	a3 01       	movw	r20, r6
    97ca:	92 01       	movw	r18, r4
    97cc:	2e 0d       	add	r18, r14
    97ce:	3f 1d       	adc	r19, r15
    97d0:	41 1d       	adc	r20, r1
    97d2:	51 1d       	adc	r21, r1
    97d4:	b5 01       	movw	r22, r10
    97d6:	89 81       	ldd	r24, Y+1	; 0x01
    97d8:	0e 94 de 6a 	call	0xd5bc	; 0xd5bc <disk_write>
    97dc:	89 2b       	or	r24, r25
    97de:	01 f5       	brne	.+64     	; 0x9820 <dir_clear+0x10a>
    97e0:	2f ef       	ldi	r18, 0xFF	; 255
    97e2:	e2 1a       	sub	r14, r18
    97e4:	f2 0a       	sbc	r15, r18
    97e6:	89 85       	ldd	r24, Y+9	; 0x09
    97e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    97ea:	e8 16       	cp	r14, r24
    97ec:	f9 06       	cpc	r15, r25
    97ee:	50 f3       	brcs	.-44     	; 0x97c4 <dir_clear+0xae>
    97f0:	17 c0       	rjmp	.+46     	; 0x9820 <dir_clear+0x10a>
    97f2:	85 01       	movw	r16, r10
    97f4:	a3 01       	movw	r20, r6
    97f6:	92 01       	movw	r18, r4
    97f8:	2e 0d       	add	r18, r14
    97fa:	3f 1d       	adc	r19, r15
    97fc:	41 1d       	adc	r20, r1
    97fe:	51 1d       	adc	r21, r1
    9800:	b6 01       	movw	r22, r12
    9802:	89 81       	ldd	r24, Y+1	; 0x01
    9804:	0e 94 de 6a 	call	0xd5bc	; 0xd5bc <disk_write>
    9808:	89 2b       	or	r24, r25
    980a:	39 f4       	brne	.+14     	; 0x981a <dir_clear+0x104>
    980c:	ea 0c       	add	r14, r10
    980e:	fb 1c       	adc	r15, r11
    9810:	89 85       	ldd	r24, Y+9	; 0x09
    9812:	9a 85       	ldd	r25, Y+10	; 0x0a
    9814:	e8 16       	cp	r14, r24
    9816:	f9 06       	cpc	r15, r25
    9818:	60 f3       	brcs	.-40     	; 0x97f2 <dir_clear+0xdc>
    981a:	c6 01       	movw	r24, r12
    981c:	0e 94 15 6a 	call	0xd42a	; 0xd42a <ff_memfree>
    9820:	81 e0       	ldi	r24, 0x01	; 1
    9822:	90 e0       	ldi	r25, 0x00	; 0
    9824:	29 85       	ldd	r18, Y+9	; 0x09
    9826:	3a 85       	ldd	r19, Y+10	; 0x0a
    9828:	2e 15       	cp	r18, r14
    982a:	3f 05       	cpc	r19, r15
    982c:	69 f4       	brne	.+26     	; 0x9848 <dir_clear+0x132>
    982e:	80 e0       	ldi	r24, 0x00	; 0
    9830:	0b c0       	rjmp	.+22     	; 0x9848 <dir_clear+0x132>
    9832:	a8 01       	movw	r20, r16
    9834:	60 e0       	ldi	r22, 0x00	; 0
    9836:	70 e0       	ldi	r23, 0x00	; 0
    9838:	4d db       	rcall	.-2406   	; 0x8ed4 <mem_set>
    983a:	58 01       	movw	r10, r16
    983c:	ab 2c       	mov	r10, r11
    983e:	bb 24       	eor	r11, r11
    9840:	a6 94       	lsr	r10
    9842:	e1 2c       	mov	r14, r1
    9844:	f1 2c       	mov	r15, r1
    9846:	e4 cf       	rjmp	.-56     	; 0x9810 <dir_clear+0xfa>
    9848:	df 91       	pop	r29
    984a:	cf 91       	pop	r28
    984c:	1f 91       	pop	r17
    984e:	0f 91       	pop	r16
    9850:	ff 90       	pop	r15
    9852:	ef 90       	pop	r14
    9854:	df 90       	pop	r13
    9856:	cf 90       	pop	r12
    9858:	bf 90       	pop	r11
    985a:	af 90       	pop	r10
    985c:	7f 90       	pop	r7
    985e:	6f 90       	pop	r6
    9860:	5f 90       	pop	r5
    9862:	4f 90       	pop	r4
    9864:	08 95       	ret

00009866 <move_window>:
    9866:	a0 e0       	ldi	r26, 0x00	; 0
    9868:	b0 e0       	ldi	r27, 0x00	; 0
    986a:	e9 e3       	ldi	r30, 0x39	; 57
    986c:	fc e4       	ldi	r31, 0x4C	; 76
    986e:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    9872:	ec 01       	movw	r28, r24
    9874:	6a 01       	movw	r12, r20
    9876:	7b 01       	movw	r14, r22
    9878:	89 a9       	ldd	r24, Y+49	; 0x31
    987a:	9a a9       	ldd	r25, Y+50	; 0x32
    987c:	ab a9       	ldd	r26, Y+51	; 0x33
    987e:	bc a9       	ldd	r27, Y+52	; 0x34
    9880:	84 17       	cp	r24, r20
    9882:	95 07       	cpc	r25, r21
    9884:	a6 07       	cpc	r26, r22
    9886:	b7 07       	cpc	r27, r23
    9888:	11 f1       	breq	.+68     	; 0x98ce <move_window+0x68>
    988a:	8b 81       	ldd	r24, Y+3	; 0x03
    988c:	81 11       	cpse	r24, r1
    988e:	13 c0       	rjmp	.+38     	; 0x98b6 <move_window+0x50>
    9890:	01 e0       	ldi	r16, 0x01	; 1
    9892:	10 e0       	ldi	r17, 0x00	; 0
    9894:	a7 01       	movw	r20, r14
    9896:	96 01       	movw	r18, r12
    9898:	be 01       	movw	r22, r28
    989a:	6b 5c       	subi	r22, 0xCB	; 203
    989c:	7f 4f       	sbci	r23, 0xFF	; 255
    989e:	89 81       	ldd	r24, Y+1	; 0x01
    98a0:	0e 94 ce 6a 	call	0xd59c	; 0xd59c <disk_read>
    98a4:	89 2b       	or	r24, r25
    98a6:	61 f0       	breq	.+24     	; 0x98c0 <move_window+0x5a>
    98a8:	81 e0       	ldi	r24, 0x01	; 1
    98aa:	90 e0       	ldi	r25, 0x00	; 0
    98ac:	cc 24       	eor	r12, r12
    98ae:	ca 94       	dec	r12
    98b0:	dc 2c       	mov	r13, r12
    98b2:	76 01       	movw	r14, r12
    98b4:	07 c0       	rjmp	.+14     	; 0x98c4 <move_window+0x5e>
    98b6:	ce 01       	movw	r24, r28
    98b8:	69 de       	rcall	.-814    	; 0x958c <sync_window.part.6>
    98ba:	00 97       	sbiw	r24, 0x00	; 0
    98bc:	51 f4       	brne	.+20     	; 0x98d2 <move_window+0x6c>
    98be:	e8 cf       	rjmp	.-48     	; 0x9890 <move_window+0x2a>
    98c0:	80 e0       	ldi	r24, 0x00	; 0
    98c2:	90 e0       	ldi	r25, 0x00	; 0
    98c4:	c9 aa       	std	Y+49, r12	; 0x31
    98c6:	da aa       	std	Y+50, r13	; 0x32
    98c8:	eb aa       	std	Y+51, r14	; 0x33
    98ca:	fc aa       	std	Y+52, r15	; 0x34
    98cc:	02 c0       	rjmp	.+4      	; 0x98d2 <move_window+0x6c>
    98ce:	80 e0       	ldi	r24, 0x00	; 0
    98d0:	90 e0       	ldi	r25, 0x00	; 0
    98d2:	cd b7       	in	r28, 0x3d	; 61
    98d4:	de b7       	in	r29, 0x3e	; 62
    98d6:	e8 e0       	ldi	r30, 0x08	; 8
    98d8:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

000098dc <check_fs>:
    98dc:	cf 93       	push	r28
    98de:	df 93       	push	r29
    98e0:	ec 01       	movw	r28, r24
    98e2:	1b 82       	std	Y+3, r1	; 0x03
    98e4:	8f ef       	ldi	r24, 0xFF	; 255
    98e6:	9f ef       	ldi	r25, 0xFF	; 255
    98e8:	dc 01       	movw	r26, r24
    98ea:	89 ab       	std	Y+49, r24	; 0x31
    98ec:	9a ab       	std	Y+50, r25	; 0x32
    98ee:	ab ab       	std	Y+51, r26	; 0x33
    98f0:	bc ab       	std	Y+52, r27	; 0x34
    98f2:	ce 01       	movw	r24, r28
    98f4:	b8 df       	rcall	.-144    	; 0x9866 <move_window>
    98f6:	89 2b       	or	r24, r25
    98f8:	19 f5       	brne	.+70     	; 0x9940 <check_fs+0x64>
    98fa:	fe 01       	movw	r30, r28
    98fc:	ed 5c       	subi	r30, 0xCD	; 205
    98fe:	fd 4f       	sbci	r31, 0xFD	; 253
    9900:	80 81       	ld	r24, Z
    9902:	91 81       	ldd	r25, Z+1	; 0x01
    9904:	85 35       	cpi	r24, 0x55	; 85
    9906:	9a 4a       	sbci	r25, 0xAA	; 170
    9908:	f1 f4       	brne	.+60     	; 0x9946 <check_fs+0x6a>
    990a:	8d a9       	ldd	r24, Y+53	; 0x35
    990c:	8b 3e       	cpi	r24, 0xEB	; 235
    990e:	19 f0       	breq	.+6      	; 0x9916 <check_fs+0x3a>
    9910:	88 5e       	subi	r24, 0xE8	; 232
    9912:	82 30       	cpi	r24, 0x02	; 2
    9914:	f0 f4       	brcc	.+60     	; 0x9952 <check_fs+0x76>
    9916:	43 e0       	ldi	r20, 0x03	; 3
    9918:	50 e0       	ldi	r21, 0x00	; 0
    991a:	68 e5       	ldi	r22, 0x58	; 88
    991c:	78 e0       	ldi	r23, 0x08	; 8
    991e:	ce 01       	movw	r24, r28
    9920:	85 59       	subi	r24, 0x95	; 149
    9922:	9f 4f       	sbci	r25, 0xFF	; 255
    9924:	e0 da       	rcall	.-2624   	; 0x8ee6 <mem_cmp>
    9926:	89 2b       	or	r24, r25
    9928:	89 f0       	breq	.+34     	; 0x994c <check_fs+0x70>
    992a:	45 e0       	ldi	r20, 0x05	; 5
    992c:	50 e0       	ldi	r21, 0x00	; 0
    992e:	6e ee       	ldi	r22, 0xEE	; 238
    9930:	77 e0       	ldi	r23, 0x07	; 7
    9932:	ce 01       	movw	r24, r28
    9934:	89 57       	subi	r24, 0x79	; 121
    9936:	9f 4f       	sbci	r25, 0xFF	; 255
    9938:	d6 da       	rcall	.-2644   	; 0x8ee6 <mem_cmp>
    993a:	89 2b       	or	r24, r25
    993c:	51 f4       	brne	.+20     	; 0x9952 <check_fs+0x76>
    993e:	06 c0       	rjmp	.+12     	; 0x994c <check_fs+0x70>
    9940:	84 e0       	ldi	r24, 0x04	; 4
    9942:	90 e0       	ldi	r25, 0x00	; 0
    9944:	08 c0       	rjmp	.+16     	; 0x9956 <check_fs+0x7a>
    9946:	83 e0       	ldi	r24, 0x03	; 3
    9948:	90 e0       	ldi	r25, 0x00	; 0
    994a:	05 c0       	rjmp	.+10     	; 0x9956 <check_fs+0x7a>
    994c:	80 e0       	ldi	r24, 0x00	; 0
    994e:	90 e0       	ldi	r25, 0x00	; 0
    9950:	02 c0       	rjmp	.+4      	; 0x9956 <check_fs+0x7a>
    9952:	82 e0       	ldi	r24, 0x02	; 2
    9954:	90 e0       	ldi	r25, 0x00	; 0
    9956:	df 91       	pop	r29
    9958:	cf 91       	pop	r28
    995a:	08 95       	ret

0000995c <mount_volume>:
    995c:	a0 e2       	ldi	r26, 0x20	; 32
    995e:	b0 e0       	ldi	r27, 0x00	; 0
    9960:	e4 eb       	ldi	r30, 0xB4	; 180
    9962:	fc e4       	ldi	r31, 0x4C	; 76
    9964:	0c 94 30 e5 	jmp	0x1ca60	; 0x1ca60 <__prologue_saves__+0x4>
    9968:	5b 01       	movw	r10, r22
    996a:	f4 2e       	mov	r15, r20
    996c:	db 01       	movw	r26, r22
    996e:	1d 92       	st	X+, r1
    9970:	1c 92       	st	X, r1
    9972:	c1 db       	rcall	.-2174   	; 0x90f6 <get_ldnumber>
    9974:	6c 01       	movw	r12, r24
    9976:	97 fd       	sbrc	r25, 7
    9978:	41 c2       	rjmp	.+1154   	; 0x9dfc <mount_volume+0x4a0>
    997a:	fc 01       	movw	r30, r24
    997c:	ee 0f       	add	r30, r30
    997e:	ff 1f       	adc	r31, r31
    9980:	ef 5e       	subi	r30, 0xEF	; 239
    9982:	f7 4e       	sbci	r31, 0xE7	; 231
    9984:	00 81       	ld	r16, Z
    9986:	11 81       	ldd	r17, Z+1	; 0x01
    9988:	01 15       	cp	r16, r1
    998a:	11 05       	cpc	r17, r1
    998c:	09 f4       	brne	.+2      	; 0x9990 <mount_volume+0x34>
    998e:	39 c2       	rjmp	.+1138   	; 0x9e02 <mount_volume+0x4a6>
    9990:	f5 01       	movw	r30, r10
    9992:	11 83       	std	Z+1, r17	; 0x01
    9994:	00 83       	st	Z, r16
    9996:	ff 2d       	mov	r31, r15
    9998:	fe 7f       	andi	r31, 0xFE	; 254
    999a:	ff 2e       	mov	r15, r31
    999c:	d8 01       	movw	r26, r16
    999e:	8c 91       	ld	r24, X
    99a0:	88 23       	and	r24, r24
    99a2:	71 f0       	breq	.+28     	; 0x99c0 <mount_volume+0x64>
    99a4:	11 96       	adiw	r26, 0x01	; 1
    99a6:	8c 91       	ld	r24, X
    99a8:	0e 94 c2 6a 	call	0xd584	; 0xd584 <disk_status>
    99ac:	80 fd       	sbrc	r24, 0
    99ae:	08 c0       	rjmp	.+16     	; 0x99c0 <mount_volume+0x64>
    99b0:	ff 20       	and	r15, r15
    99b2:	09 f4       	brne	.+2      	; 0x99b6 <mount_volume+0x5a>
    99b4:	29 c2       	rjmp	.+1106   	; 0x9e08 <mount_volume+0x4ac>
    99b6:	82 ff       	sbrs	r24, 2
    99b8:	27 c2       	rjmp	.+1102   	; 0x9e08 <mount_volume+0x4ac>
    99ba:	8a e0       	ldi	r24, 0x0A	; 10
    99bc:	90 e0       	ldi	r25, 0x00	; 0
    99be:	2c c2       	rjmp	.+1112   	; 0x9e18 <mount_volume+0x4bc>
    99c0:	f8 01       	movw	r30, r16
    99c2:	10 82       	st	Z, r1
    99c4:	c1 82       	std	Z+1, r12	; 0x01
    99c6:	8c 2d       	mov	r24, r12
    99c8:	0e 94 c8 6a 	call	0xd590	; 0xd590 <disk_initialize>
    99cc:	80 fd       	sbrc	r24, 0
    99ce:	1f c2       	rjmp	.+1086   	; 0x9e0e <mount_volume+0x4b2>
    99d0:	ff 20       	and	r15, r15
    99d2:	11 f0       	breq	.+4      	; 0x99d8 <mount_volume+0x7c>
    99d4:	82 fd       	sbrc	r24, 2
    99d6:	f1 cf       	rjmp	.-30     	; 0x99ba <mount_volume+0x5e>
    99d8:	40 e0       	ldi	r20, 0x00	; 0
    99da:	50 e0       	ldi	r21, 0x00	; 0
    99dc:	ba 01       	movw	r22, r20
    99de:	c8 01       	movw	r24, r16
    99e0:	7d df       	rcall	.-262    	; 0x98dc <check_fs>
    99e2:	82 30       	cpi	r24, 0x02	; 2
    99e4:	91 05       	cpc	r25, r1
    99e6:	b9 f5       	brne	.+110    	; 0x9a56 <mount_volume+0xfa>
    99e8:	68 01       	movw	r12, r16
    99ea:	f5 e0       	ldi	r31, 0x05	; 5
    99ec:	cf 1a       	sub	r12, r31
    99ee:	fe ef       	ldi	r31, 0xFE	; 254
    99f0:	df 0a       	sbc	r13, r31
    99f2:	9e 01       	movw	r18, r28
    99f4:	2f 5f       	subi	r18, 0xFF	; 255
    99f6:	3f 4f       	sbci	r19, 0xFF	; 255
    99f8:	79 01       	movw	r14, r18
    99fa:	48 01       	movw	r8, r16
    99fc:	35 ec       	ldi	r19, 0xC5	; 197
    99fe:	83 1a       	sub	r8, r19
    9a00:	3d ef       	ldi	r19, 0xFD	; 253
    9a02:	93 0a       	sbc	r9, r19
    9a04:	57 01       	movw	r10, r14
    9a06:	c6 01       	movw	r24, r12
    9a08:	4a da       	rcall	.-2924   	; 0x8e9e <ld_dword>
    9a0a:	d5 01       	movw	r26, r10
    9a0c:	6d 93       	st	X+, r22
    9a0e:	7d 93       	st	X+, r23
    9a10:	8d 93       	st	X+, r24
    9a12:	9d 93       	st	X+, r25
    9a14:	5d 01       	movw	r10, r26
    9a16:	b0 e1       	ldi	r27, 0x10	; 16
    9a18:	cb 0e       	add	r12, r27
    9a1a:	d1 1c       	adc	r13, r1
    9a1c:	c8 14       	cp	r12, r8
    9a1e:	d9 04       	cpc	r13, r9
    9a20:	91 f7       	brne	.-28     	; 0x9a06 <mount_volume+0xaa>
    9a22:	6e 01       	movw	r12, r28
    9a24:	e1 e1       	ldi	r30, 0x11	; 17
    9a26:	ce 0e       	add	r12, r30
    9a28:	d1 1c       	adc	r13, r1
    9a2a:	d7 01       	movw	r26, r14
    9a2c:	4d 91       	ld	r20, X+
    9a2e:	5d 91       	ld	r21, X+
    9a30:	6d 91       	ld	r22, X+
    9a32:	7d 91       	ld	r23, X+
    9a34:	7d 01       	movw	r14, r26
    9a36:	41 15       	cp	r20, r1
    9a38:	51 05       	cpc	r21, r1
    9a3a:	61 05       	cpc	r22, r1
    9a3c:	71 05       	cpc	r23, r1
    9a3e:	31 f0       	breq	.+12     	; 0x9a4c <mount_volume+0xf0>
    9a40:	c8 01       	movw	r24, r16
    9a42:	4c df       	rcall	.-360    	; 0x98dc <check_fs>
    9a44:	82 30       	cpi	r24, 0x02	; 2
    9a46:	91 05       	cpc	r25, r1
    9a48:	18 f4       	brcc	.+6      	; 0x9a50 <mount_volume+0xf4>
    9a4a:	05 c0       	rjmp	.+10     	; 0x9a56 <mount_volume+0xfa>
    9a4c:	83 e0       	ldi	r24, 0x03	; 3
    9a4e:	90 e0       	ldi	r25, 0x00	; 0
    9a50:	ce 14       	cp	r12, r14
    9a52:	df 04       	cpc	r13, r15
    9a54:	51 f7       	brne	.-44     	; 0x9a2a <mount_volume+0xce>
    9a56:	84 30       	cpi	r24, 0x04	; 4
    9a58:	91 05       	cpc	r25, r1
    9a5a:	09 f4       	brne	.+2      	; 0x9a5e <mount_volume+0x102>
    9a5c:	db c1       	rjmp	.+950    	; 0x9e14 <mount_volume+0x4b8>
    9a5e:	02 97       	sbiw	r24, 0x02	; 2
    9a60:	18 f0       	brcs	.+6      	; 0x9a68 <mount_volume+0x10c>
    9a62:	8d e0       	ldi	r24, 0x0D	; 13
    9a64:	90 e0       	ldi	r25, 0x00	; 0
    9a66:	d8 c1       	rjmp	.+944    	; 0x9e18 <mount_volume+0x4bc>
    9a68:	f8 01       	movw	r30, r16
    9a6a:	e0 5c       	subi	r30, 0xC0	; 192
    9a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    9a6e:	80 81       	ld	r24, Z
    9a70:	91 81       	ldd	r25, Z+1	; 0x01
    9a72:	81 15       	cp	r24, r1
    9a74:	92 40       	sbci	r25, 0x02	; 2
    9a76:	a9 f7       	brne	.-22     	; 0x9a62 <mount_volume+0x106>
    9a78:	3b 96       	adiw	r30, 0x0b	; 11
    9a7a:	40 80       	ld	r4, Z
    9a7c:	51 80       	ldd	r5, Z+1	; 0x01
    9a7e:	41 14       	cp	r4, r1
    9a80:	51 04       	cpc	r5, r1
    9a82:	19 f0       	breq	.+6      	; 0x9a8a <mount_volume+0x12e>
    9a84:	61 2c       	mov	r6, r1
    9a86:	71 2c       	mov	r7, r1
    9a88:	06 c0       	rjmp	.+12     	; 0x9a96 <mount_volume+0x13a>
    9a8a:	c8 01       	movw	r24, r16
    9a8c:	87 5a       	subi	r24, 0xA7	; 167
    9a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    9a90:	06 da       	rcall	.-3060   	; 0x8e9e <ld_dword>
    9a92:	2b 01       	movw	r4, r22
    9a94:	3c 01       	movw	r6, r24
    9a96:	d8 01       	movw	r26, r16
    9a98:	d1 96       	adiw	r26, 0x31	; 49
    9a9a:	2d 91       	ld	r18, X+
    9a9c:	3d 91       	ld	r19, X+
    9a9e:	4d 91       	ld	r20, X+
    9aa0:	5c 91       	ld	r21, X
    9aa2:	d4 97       	sbiw	r26, 0x34	; 52
    9aa4:	29 8b       	std	Y+17, r18	; 0x11
    9aa6:	3a 8b       	std	Y+18, r19	; 0x12
    9aa8:	4b 8b       	std	Y+19, r20	; 0x13
    9aaa:	5c 8b       	std	Y+20, r21	; 0x14
    9aac:	f8 01       	movw	r30, r16
    9aae:	45 8e       	std	Z+29, r4	; 0x1d
    9ab0:	56 8e       	std	Z+30, r5	; 0x1e
    9ab2:	67 8e       	std	Z+31, r6	; 0x1f
    9ab4:	70 a2       	std	Z+32, r7	; 0x20
    9ab6:	eb 5b       	subi	r30, 0xBB	; 187
    9ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    9aba:	a0 80       	ld	r10, Z
    9abc:	12 96       	adiw	r26, 0x02	; 2
    9abe:	ac 92       	st	X, r10
    9ac0:	12 97       	sbiw	r26, 0x02	; 2
    9ac2:	8f ef       	ldi	r24, 0xFF	; 255
    9ac4:	8a 0d       	add	r24, r10
    9ac6:	82 30       	cpi	r24, 0x02	; 2
    9ac8:	60 f6       	brcc	.-104    	; 0x9a62 <mount_volume+0x106>
    9aca:	33 97       	sbiw	r30, 0x03	; 3
    9acc:	b0 80       	ld	r11, Z
    9ace:	8b 2d       	mov	r24, r11
    9ad0:	90 e0       	ldi	r25, 0x00	; 0
    9ad2:	f8 01       	movw	r30, r16
    9ad4:	92 87       	std	Z+10, r25	; 0x0a
    9ad6:	81 87       	std	Z+9, r24	; 0x09
    9ad8:	00 97       	sbiw	r24, 0x00	; 0
    9ada:	19 f2       	breq	.-122    	; 0x9a62 <mount_volume+0x106>
    9adc:	9c 01       	movw	r18, r24
    9ade:	21 50       	subi	r18, 0x01	; 1
    9ae0:	31 09       	sbc	r19, r1
    9ae2:	82 23       	and	r24, r18
    9ae4:	93 23       	and	r25, r19
    9ae6:	89 2b       	or	r24, r25
    9ae8:	09 f0       	breq	.+2      	; 0x9aec <mount_volume+0x190>
    9aea:	bb cf       	rjmp	.-138    	; 0x9a62 <mount_volume+0x106>
    9aec:	ea 5b       	subi	r30, 0xBA	; 186
    9aee:	ff 4f       	sbci	r31, 0xFF	; 255
    9af0:	80 80       	ld	r8, Z
    9af2:	91 80       	ldd	r9, Z+1	; 0x01
    9af4:	18 96       	adiw	r26, 0x08	; 8
    9af6:	9c 92       	st	X, r9
    9af8:	8e 92       	st	-X, r8
    9afa:	17 97       	sbiw	r26, 0x07	; 7
    9afc:	c4 01       	movw	r24, r8
    9afe:	8f 70       	andi	r24, 0x0F	; 15
    9b00:	99 27       	eor	r25, r25
    9b02:	89 2b       	or	r24, r25
    9b04:	09 f0       	breq	.+2      	; 0x9b08 <mount_volume+0x1ac>
    9b06:	ad cf       	rjmp	.-166    	; 0x9a62 <mount_volume+0x106>
    9b08:	32 96       	adiw	r30, 0x02	; 2
    9b0a:	80 81       	ld	r24, Z
    9b0c:	91 81       	ldd	r25, Z+1	; 0x01
    9b0e:	6c 01       	movw	r12, r24
    9b10:	e1 2c       	mov	r14, r1
    9b12:	f1 2c       	mov	r15, r1
    9b14:	89 2b       	or	r24, r25
    9b16:	31 f4       	brne	.+12     	; 0x9b24 <mount_volume+0x1c8>
    9b18:	c8 01       	movw	r24, r16
    9b1a:	8b 5a       	subi	r24, 0xAB	; 171
    9b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    9b1e:	bf d9       	rcall	.-3202   	; 0x8e9e <ld_dword>
    9b20:	6b 01       	movw	r12, r22
    9b22:	7c 01       	movw	r14, r24
    9b24:	f8 01       	movw	r30, r16
    9b26:	ed 5b       	subi	r30, 0xBD	; 189
    9b28:	ff 4f       	sbci	r31, 0xFF	; 255
    9b2a:	01 90       	ld	r0, Z+
    9b2c:	f0 81       	ld	r31, Z
    9b2e:	e0 2d       	mov	r30, r0
    9b30:	30 97       	sbiw	r30, 0x00	; 0
    9b32:	09 f4       	brne	.+2      	; 0x9b36 <mount_volume+0x1da>
    9b34:	96 cf       	rjmp	.-212    	; 0x9a62 <mount_volume+0x106>
    9b36:	aa 2d       	mov	r26, r10
    9b38:	b0 e0       	ldi	r27, 0x00	; 0
    9b3a:	a3 01       	movw	r20, r6
    9b3c:	92 01       	movw	r18, r4
    9b3e:	0e 94 0e e5 	call	0x1ca1c	; 0x1ca1c <__muluhisi3>
    9b42:	69 8f       	std	Y+25, r22	; 0x19
    9b44:	7a 8f       	std	Y+26, r23	; 0x1a
    9b46:	8b 8f       	std	Y+27, r24	; 0x1b
    9b48:	9c 8f       	std	Y+28, r25	; 0x1c
    9b4a:	9f 01       	movw	r18, r30
    9b4c:	40 e0       	ldi	r20, 0x00	; 0
    9b4e:	50 e0       	ldi	r21, 0x00	; 0
    9b50:	2d 8f       	std	Y+29, r18	; 0x1d
    9b52:	3e 8f       	std	Y+30, r19	; 0x1e
    9b54:	4f 8f       	std	Y+31, r20	; 0x1f
    9b56:	58 a3       	std	Y+32, r21	; 0x20
    9b58:	c4 01       	movw	r24, r8
    9b5a:	f4 e0       	ldi	r31, 0x04	; 4
    9b5c:	96 95       	lsr	r25
    9b5e:	87 95       	ror	r24
    9b60:	fa 95       	dec	r31
    9b62:	e1 f7       	brne	.-8      	; 0x9b5c <mount_volume+0x200>
    9b64:	28 0f       	add	r18, r24
    9b66:	39 1f       	adc	r19, r25
    9b68:	41 1d       	adc	r20, r1
    9b6a:	51 1d       	adc	r21, r1
    9b6c:	da 01       	movw	r26, r20
    9b6e:	c9 01       	movw	r24, r18
    9b70:	29 8d       	ldd	r18, Y+25	; 0x19
    9b72:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9b74:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9b76:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9b78:	28 0f       	add	r18, r24
    9b7a:	39 1f       	adc	r19, r25
    9b7c:	4a 1f       	adc	r20, r26
    9b7e:	5b 1f       	adc	r21, r27
    9b80:	2d 8b       	std	Y+21, r18	; 0x15
    9b82:	3e 8b       	std	Y+22, r19	; 0x16
    9b84:	4f 8b       	std	Y+23, r20	; 0x17
    9b86:	58 8f       	std	Y+24, r21	; 0x18
    9b88:	c2 16       	cp	r12, r18
    9b8a:	d3 06       	cpc	r13, r19
    9b8c:	e4 06       	cpc	r14, r20
    9b8e:	f5 06       	cpc	r15, r21
    9b90:	08 f4       	brcc	.+2      	; 0x9b94 <mount_volume+0x238>
    9b92:	67 cf       	rjmp	.-306    	; 0x9a62 <mount_volume+0x106>
    9b94:	c7 01       	movw	r24, r14
    9b96:	b6 01       	movw	r22, r12
    9b98:	62 1b       	sub	r22, r18
    9b9a:	73 0b       	sbc	r23, r19
    9b9c:	84 0b       	sbc	r24, r20
    9b9e:	95 0b       	sbc	r25, r21
    9ba0:	2b 2d       	mov	r18, r11
    9ba2:	30 e0       	ldi	r19, 0x00	; 0
    9ba4:	40 e0       	ldi	r20, 0x00	; 0
    9ba6:	50 e0       	ldi	r21, 0x00	; 0
    9ba8:	0e 94 ac e4 	call	0x1c958	; 0x1c958 <__udivmodsi4>
    9bac:	da 01       	movw	r26, r20
    9bae:	c9 01       	movw	r24, r18
    9bb0:	01 97       	sbiw	r24, 0x01	; 1
    9bb2:	a1 09       	sbc	r26, r1
    9bb4:	b1 09       	sbc	r27, r1
    9bb6:	85 3f       	cpi	r24, 0xF5	; 245
    9bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    9bba:	af 4f       	sbci	r26, 0xFF	; 255
    9bbc:	bf 40       	sbci	r27, 0x0F	; 15
    9bbe:	08 f0       	brcs	.+2      	; 0x9bc2 <mount_volume+0x266>
    9bc0:	50 cf       	rjmp	.-352    	; 0x9a62 <mount_volume+0x106>
    9bc2:	26 3f       	cpi	r18, 0xF6	; 246
    9bc4:	8f ef       	ldi	r24, 0xFF	; 255
    9bc6:	38 07       	cpc	r19, r24
    9bc8:	41 05       	cpc	r20, r1
    9bca:	51 05       	cpc	r21, r1
    9bcc:	50 f4       	brcc	.+20     	; 0x9be2 <mount_volume+0x286>
    9bce:	26 3f       	cpi	r18, 0xF6	; 246
    9bd0:	9f e0       	ldi	r25, 0x0F	; 15
    9bd2:	39 07       	cpc	r19, r25
    9bd4:	41 05       	cpc	r20, r1
    9bd6:	51 05       	cpc	r21, r1
    9bd8:	40 f4       	brcc	.+16     	; 0x9bea <mount_volume+0x28e>
    9bda:	aa 24       	eor	r10, r10
    9bdc:	a3 94       	inc	r10
    9bde:	b1 2c       	mov	r11, r1
    9be0:	07 c0       	rjmp	.+14     	; 0x9bf0 <mount_volume+0x294>
    9be2:	73 e0       	ldi	r23, 0x03	; 3
    9be4:	a7 2e       	mov	r10, r23
    9be6:	b1 2c       	mov	r11, r1
    9be8:	03 c0       	rjmp	.+6      	; 0x9bf0 <mount_volume+0x294>
    9bea:	62 e0       	ldi	r22, 0x02	; 2
    9bec:	a6 2e       	mov	r10, r22
    9bee:	b1 2c       	mov	r11, r1
    9bf0:	69 01       	movw	r12, r18
    9bf2:	7a 01       	movw	r14, r20
    9bf4:	a2 e0       	ldi	r26, 0x02	; 2
    9bf6:	ca 0e       	add	r12, r26
    9bf8:	d1 1c       	adc	r13, r1
    9bfa:	e1 1c       	adc	r14, r1
    9bfc:	f1 1c       	adc	r15, r1
    9bfe:	f8 01       	movw	r30, r16
    9c00:	c1 8e       	std	Z+25, r12	; 0x19
    9c02:	d2 8e       	std	Z+26, r13	; 0x1a
    9c04:	e3 8e       	std	Z+27, r14	; 0x1b
    9c06:	f4 8e       	std	Z+28, r15	; 0x1c
    9c08:	29 89       	ldd	r18, Y+17	; 0x11
    9c0a:	3a 89       	ldd	r19, Y+18	; 0x12
    9c0c:	4b 89       	ldd	r20, Y+19	; 0x13
    9c0e:	5c 89       	ldd	r21, Y+20	; 0x14
    9c10:	21 a3       	std	Z+33, r18	; 0x21
    9c12:	32 a3       	std	Z+34, r19	; 0x22
    9c14:	43 a3       	std	Z+35, r20	; 0x23
    9c16:	54 a3       	std	Z+36, r21	; 0x24
    9c18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9c1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9c1c:	af 8d       	ldd	r26, Y+31	; 0x1f
    9c1e:	b8 a1       	ldd	r27, Y+32	; 0x20
    9c20:	28 0f       	add	r18, r24
    9c22:	39 1f       	adc	r19, r25
    9c24:	4a 1f       	adc	r20, r26
    9c26:	5b 1f       	adc	r21, r27
    9c28:	2d 8f       	std	Y+29, r18	; 0x1d
    9c2a:	3e 8f       	std	Y+30, r19	; 0x1e
    9c2c:	4f 8f       	std	Y+31, r20	; 0x1f
    9c2e:	58 a3       	std	Y+32, r21	; 0x20
    9c30:	25 a3       	std	Z+37, r18	; 0x25
    9c32:	36 a3       	std	Z+38, r19	; 0x26
    9c34:	47 a3       	std	Z+39, r20	; 0x27
    9c36:	50 a7       	std	Z+40, r21	; 0x28
    9c38:	49 89       	ldd	r20, Y+17	; 0x11
    9c3a:	5a 89       	ldd	r21, Y+18	; 0x12
    9c3c:	6b 89       	ldd	r22, Y+19	; 0x13
    9c3e:	7c 89       	ldd	r23, Y+20	; 0x14
    9c40:	8d 89       	ldd	r24, Y+21	; 0x15
    9c42:	9e 89       	ldd	r25, Y+22	; 0x16
    9c44:	af 89       	ldd	r26, Y+23	; 0x17
    9c46:	b8 8d       	ldd	r27, Y+24	; 0x18
    9c48:	48 0f       	add	r20, r24
    9c4a:	59 1f       	adc	r21, r25
    9c4c:	6a 1f       	adc	r22, r26
    9c4e:	7b 1f       	adc	r23, r27
    9c50:	45 a7       	std	Z+45, r20	; 0x2d
    9c52:	56 a7       	std	Z+46, r21	; 0x2e
    9c54:	67 a7       	std	Z+47, r22	; 0x2f
    9c56:	70 ab       	std	Z+48, r23	; 0x30
    9c58:	b3 e0       	ldi	r27, 0x03	; 3
    9c5a:	ab 16       	cp	r10, r27
    9c5c:	b1 04       	cpc	r11, r1
    9c5e:	e1 f4       	brne	.+56     	; 0x9c98 <mount_volume+0x33c>
    9c60:	e1 5a       	subi	r30, 0xA1	; 161
    9c62:	ff 4f       	sbci	r31, 0xFF	; 255
    9c64:	80 81       	ld	r24, Z
    9c66:	91 81       	ldd	r25, Z+1	; 0x01
    9c68:	89 2b       	or	r24, r25
    9c6a:	09 f0       	breq	.+2      	; 0x9c6e <mount_volume+0x312>
    9c6c:	fa ce       	rjmp	.-524    	; 0x9a62 <mount_volume+0x106>
    9c6e:	81 14       	cp	r8, r1
    9c70:	91 04       	cpc	r9, r1
    9c72:	09 f0       	breq	.+2      	; 0x9c76 <mount_volume+0x31a>
    9c74:	f6 ce       	rjmp	.-532    	; 0x9a62 <mount_volume+0x106>
    9c76:	c8 01       	movw	r24, r16
    9c78:	8f 59       	subi	r24, 0x9F	; 159
    9c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    9c7c:	10 d9       	rcall	.-3552   	; 0x8e9e <ld_dword>
    9c7e:	f8 01       	movw	r30, r16
    9c80:	61 a7       	std	Z+41, r22	; 0x29
    9c82:	72 a7       	std	Z+42, r23	; 0x2a
    9c84:	83 a7       	std	Z+43, r24	; 0x2b
    9c86:	94 a7       	std	Z+44, r25	; 0x2c
    9c88:	42 e0       	ldi	r20, 0x02	; 2
    9c8a:	cc 0c       	add	r12, r12
    9c8c:	dd 1c       	adc	r13, r13
    9c8e:	ee 1c       	adc	r14, r14
    9c90:	ff 1c       	adc	r15, r15
    9c92:	4a 95       	dec	r20
    9c94:	d1 f7       	brne	.-12     	; 0x9c8a <mount_volume+0x32e>
    9c96:	33 c0       	rjmp	.+102    	; 0x9cfe <mount_volume+0x3a2>
    9c98:	81 14       	cp	r8, r1
    9c9a:	91 04       	cpc	r9, r1
    9c9c:	09 f4       	brne	.+2      	; 0x9ca0 <mount_volume+0x344>
    9c9e:	e1 ce       	rjmp	.-574    	; 0x9a62 <mount_volume+0x106>
    9ca0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9ca2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9ca4:	af 8d       	ldd	r26, Y+31	; 0x1f
    9ca6:	b8 a1       	ldd	r27, Y+32	; 0x20
    9ca8:	29 8d       	ldd	r18, Y+25	; 0x19
    9caa:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9cac:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9cae:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9cb0:	82 0f       	add	r24, r18
    9cb2:	93 1f       	adc	r25, r19
    9cb4:	a4 1f       	adc	r26, r20
    9cb6:	b5 1f       	adc	r27, r21
    9cb8:	f8 01       	movw	r30, r16
    9cba:	81 a7       	std	Z+41, r24	; 0x29
    9cbc:	92 a7       	std	Z+42, r25	; 0x2a
    9cbe:	a3 a7       	std	Z+43, r26	; 0x2b
    9cc0:	b4 a7       	std	Z+44, r27	; 0x2c
    9cc2:	f2 e0       	ldi	r31, 0x02	; 2
    9cc4:	af 16       	cp	r10, r31
    9cc6:	b1 04       	cpc	r11, r1
    9cc8:	29 f4       	brne	.+10     	; 0x9cd4 <mount_volume+0x378>
    9cca:	cc 0c       	add	r12, r12
    9ccc:	dd 1c       	adc	r13, r13
    9cce:	ee 1c       	adc	r14, r14
    9cd0:	ff 1c       	adc	r15, r15
    9cd2:	15 c0       	rjmp	.+42     	; 0x9cfe <mount_volume+0x3a2>
    9cd4:	a3 e0       	ldi	r26, 0x03	; 3
    9cd6:	b0 e0       	ldi	r27, 0x00	; 0
    9cd8:	a7 01       	movw	r20, r14
    9cda:	96 01       	movw	r18, r12
    9cdc:	0e 94 0e e5 	call	0x1ca1c	; 0x1ca1c <__muluhisi3>
    9ce0:	dc 01       	movw	r26, r24
    9ce2:	cb 01       	movw	r24, r22
    9ce4:	b6 95       	lsr	r27
    9ce6:	a7 95       	ror	r26
    9ce8:	97 95       	ror	r25
    9cea:	87 95       	ror	r24
    9cec:	21 e0       	ldi	r18, 0x01	; 1
    9cee:	c2 22       	and	r12, r18
    9cf0:	dd 24       	eor	r13, r13
    9cf2:	ee 24       	eor	r14, r14
    9cf4:	ff 24       	eor	r15, r15
    9cf6:	c8 0e       	add	r12, r24
    9cf8:	d9 1e       	adc	r13, r25
    9cfa:	ea 1e       	adc	r14, r26
    9cfc:	fb 1e       	adc	r15, r27
    9cfe:	3f ef       	ldi	r19, 0xFF	; 255
    9d00:	c3 0e       	add	r12, r19
    9d02:	31 e0       	ldi	r19, 0x01	; 1
    9d04:	d3 1e       	adc	r13, r19
    9d06:	e1 1c       	adc	r14, r1
    9d08:	f1 1c       	adc	r15, r1
    9d0a:	89 e0       	ldi	r24, 0x09	; 9
    9d0c:	f6 94       	lsr	r15
    9d0e:	e7 94       	ror	r14
    9d10:	d7 94       	ror	r13
    9d12:	c7 94       	ror	r12
    9d14:	8a 95       	dec	r24
    9d16:	d1 f7       	brne	.-12     	; 0x9d0c <mount_volume+0x3b0>
    9d18:	4c 14       	cp	r4, r12
    9d1a:	5d 04       	cpc	r5, r13
    9d1c:	6e 04       	cpc	r6, r14
    9d1e:	7f 04       	cpc	r7, r15
    9d20:	08 f4       	brcc	.+2      	; 0x9d24 <mount_volume+0x3c8>
    9d22:	9f ce       	rjmp	.-706    	; 0x9a62 <mount_volume+0x106>
    9d24:	8f ef       	ldi	r24, 0xFF	; 255
    9d26:	9f ef       	ldi	r25, 0xFF	; 255
    9d28:	dc 01       	movw	r26, r24
    9d2a:	f8 01       	movw	r30, r16
    9d2c:	81 8b       	std	Z+17, r24	; 0x11
    9d2e:	92 8b       	std	Z+18, r25	; 0x12
    9d30:	a3 8b       	std	Z+19, r26	; 0x13
    9d32:	b4 8b       	std	Z+20, r27	; 0x14
    9d34:	85 87       	std	Z+13, r24	; 0x0d
    9d36:	96 87       	std	Z+14, r25	; 0x0e
    9d38:	a7 87       	std	Z+15, r26	; 0x0f
    9d3a:	b0 8b       	std	Z+16, r27	; 0x10
    9d3c:	80 e8       	ldi	r24, 0x80	; 128
    9d3e:	84 83       	std	Z+4, r24	; 0x04
    9d40:	f3 e0       	ldi	r31, 0x03	; 3
    9d42:	af 16       	cp	r10, r31
    9d44:	b1 04       	cpc	r11, r1
    9d46:	09 f0       	breq	.+2      	; 0x9d4a <mount_volume+0x3ee>
    9d48:	44 c0       	rjmp	.+136    	; 0x9dd2 <mount_volume+0x476>
    9d4a:	f8 01       	movw	r30, r16
    9d4c:	eb 59       	subi	r30, 0x9B	; 155
    9d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    9d50:	80 81       	ld	r24, Z
    9d52:	91 81       	ldd	r25, Z+1	; 0x01
    9d54:	01 97       	sbiw	r24, 0x01	; 1
    9d56:	09 f0       	breq	.+2      	; 0x9d5a <mount_volume+0x3fe>
    9d58:	3c c0       	rjmp	.+120    	; 0x9dd2 <mount_volume+0x476>
    9d5a:	49 89       	ldd	r20, Y+17	; 0x11
    9d5c:	5a 89       	ldd	r21, Y+18	; 0x12
    9d5e:	6b 89       	ldd	r22, Y+19	; 0x13
    9d60:	7c 89       	ldd	r23, Y+20	; 0x14
    9d62:	4f 5f       	subi	r20, 0xFF	; 255
    9d64:	5f 4f       	sbci	r21, 0xFF	; 255
    9d66:	6f 4f       	sbci	r22, 0xFF	; 255
    9d68:	7f 4f       	sbci	r23, 0xFF	; 255
    9d6a:	c8 01       	movw	r24, r16
    9d6c:	7c dd       	rcall	.-1288   	; 0x9866 <move_window>
    9d6e:	89 2b       	or	r24, r25
    9d70:	81 f5       	brne	.+96     	; 0x9dd2 <mount_volume+0x476>
    9d72:	d8 01       	movw	r26, r16
    9d74:	14 96       	adiw	r26, 0x04	; 4
    9d76:	1c 92       	st	X, r1
    9d78:	f8 01       	movw	r30, r16
    9d7a:	ed 5c       	subi	r30, 0xCD	; 205
    9d7c:	fd 4f       	sbci	r31, 0xFD	; 253
    9d7e:	80 81       	ld	r24, Z
    9d80:	91 81       	ldd	r25, Z+1	; 0x01
    9d82:	85 35       	cpi	r24, 0x55	; 85
    9d84:	9a 4a       	sbci	r25, 0xAA	; 170
    9d86:	29 f5       	brne	.+74     	; 0x9dd2 <mount_volume+0x476>
    9d88:	c8 01       	movw	r24, r16
    9d8a:	c5 96       	adiw	r24, 0x35	; 53
    9d8c:	88 d8       	rcall	.-3824   	; 0x8e9e <ld_dword>
    9d8e:	62 35       	cpi	r22, 0x52	; 82
    9d90:	72 45       	sbci	r23, 0x52	; 82
    9d92:	81 46       	sbci	r24, 0x61	; 97
    9d94:	91 44       	sbci	r25, 0x41	; 65
    9d96:	e9 f4       	brne	.+58     	; 0x9dd2 <mount_volume+0x476>
    9d98:	c8 01       	movw	r24, r16
    9d9a:	87 5e       	subi	r24, 0xE7	; 231
    9d9c:	9d 4f       	sbci	r25, 0xFD	; 253
    9d9e:	7f d8       	rcall	.-3842   	; 0x8e9e <ld_dword>
    9da0:	62 37       	cpi	r22, 0x72	; 114
    9da2:	72 47       	sbci	r23, 0x72	; 114
    9da4:	81 44       	sbci	r24, 0x41	; 65
    9da6:	91 46       	sbci	r25, 0x61	; 97
    9da8:	a1 f4       	brne	.+40     	; 0x9dd2 <mount_volume+0x476>
    9daa:	c8 01       	movw	r24, r16
    9dac:	83 5e       	subi	r24, 0xE3	; 227
    9dae:	9d 4f       	sbci	r25, 0xFD	; 253
    9db0:	76 d8       	rcall	.-3860   	; 0x8e9e <ld_dword>
    9db2:	d8 01       	movw	r26, r16
    9db4:	51 96       	adiw	r26, 0x11	; 17
    9db6:	6d 93       	st	X+, r22
    9db8:	7d 93       	st	X+, r23
    9dba:	8d 93       	st	X+, r24
    9dbc:	9c 93       	st	X, r25
    9dbe:	54 97       	sbiw	r26, 0x14	; 20
    9dc0:	c8 01       	movw	r24, r16
    9dc2:	8f 5d       	subi	r24, 0xDF	; 223
    9dc4:	9d 4f       	sbci	r25, 0xFD	; 253
    9dc6:	6b d8       	rcall	.-3882   	; 0x8e9e <ld_dword>
    9dc8:	f8 01       	movw	r30, r16
    9dca:	65 87       	std	Z+13, r22	; 0x0d
    9dcc:	76 87       	std	Z+14, r23	; 0x0e
    9dce:	87 87       	std	Z+15, r24	; 0x0f
    9dd0:	90 8b       	std	Z+16, r25	; 0x10
    9dd2:	d8 01       	movw	r26, r16
    9dd4:	ac 92       	st	X, r10
    9dd6:	80 91 0f 18 	lds	r24, 0x180F	; 0x80180f <Fsid>
    9dda:	90 91 10 18 	lds	r25, 0x1810	; 0x801810 <Fsid+0x1>
    9dde:	01 96       	adiw	r24, 0x01	; 1
    9de0:	90 93 10 18 	sts	0x1810, r25	; 0x801810 <Fsid+0x1>
    9de4:	80 93 0f 18 	sts	0x180F, r24	; 0x80180f <Fsid>
    9de8:	16 96       	adiw	r26, 0x06	; 6
    9dea:	9c 93       	st	X, r25
    9dec:	8e 93       	st	-X, r24
    9dee:	15 97       	sbiw	r26, 0x05	; 5
    9df0:	f8 01       	movw	r30, r16
    9df2:	15 8a       	std	Z+21, r1	; 0x15
    9df4:	16 8a       	std	Z+22, r1	; 0x16
    9df6:	17 8a       	std	Z+23, r1	; 0x17
    9df8:	10 8e       	std	Z+24, r1	; 0x18
    9dfa:	06 c0       	rjmp	.+12     	; 0x9e08 <mount_volume+0x4ac>
    9dfc:	8b e0       	ldi	r24, 0x0B	; 11
    9dfe:	90 e0       	ldi	r25, 0x00	; 0
    9e00:	0b c0       	rjmp	.+22     	; 0x9e18 <mount_volume+0x4bc>
    9e02:	8c e0       	ldi	r24, 0x0C	; 12
    9e04:	90 e0       	ldi	r25, 0x00	; 0
    9e06:	08 c0       	rjmp	.+16     	; 0x9e18 <mount_volume+0x4bc>
    9e08:	80 e0       	ldi	r24, 0x00	; 0
    9e0a:	90 e0       	ldi	r25, 0x00	; 0
    9e0c:	05 c0       	rjmp	.+10     	; 0x9e18 <mount_volume+0x4bc>
    9e0e:	83 e0       	ldi	r24, 0x03	; 3
    9e10:	90 e0       	ldi	r25, 0x00	; 0
    9e12:	02 c0       	rjmp	.+4      	; 0x9e18 <mount_volume+0x4bc>
    9e14:	81 e0       	ldi	r24, 0x01	; 1
    9e16:	90 e0       	ldi	r25, 0x00	; 0
    9e18:	a0 96       	adiw	r28, 0x20	; 32
    9e1a:	e0 e1       	ldi	r30, 0x10	; 16
    9e1c:	0c 94 4c e5 	jmp	0x1ca98	; 0x1ca98 <__epilogue_restores__+0x4>

00009e20 <put_fat>:
    9e20:	a6 e0       	ldi	r26, 0x06	; 6
    9e22:	b0 e0       	ldi	r27, 0x00	; 0
    9e24:	e6 e1       	ldi	r30, 0x16	; 22
    9e26:	ff e4       	ldi	r31, 0x4F	; 79
    9e28:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    9e2c:	42 30       	cpi	r20, 0x02	; 2
    9e2e:	51 05       	cpc	r21, r1
    9e30:	61 05       	cpc	r22, r1
    9e32:	71 05       	cpc	r23, r1
    9e34:	08 f4       	brcc	.+2      	; 0x9e38 <put_fat+0x18>
    9e36:	eb c0       	rjmp	.+470    	; 0xa00e <put_fat+0x1ee>
    9e38:	dc 01       	movw	r26, r24
    9e3a:	59 96       	adiw	r26, 0x19	; 25
    9e3c:	cd 90       	ld	r12, X+
    9e3e:	dd 90       	ld	r13, X+
    9e40:	ed 90       	ld	r14, X+
    9e42:	fc 90       	ld	r15, X
    9e44:	5c 97       	sbiw	r26, 0x1c	; 28
    9e46:	4c 15       	cp	r20, r12
    9e48:	5d 05       	cpc	r21, r13
    9e4a:	6e 05       	cpc	r22, r14
    9e4c:	7f 05       	cpc	r23, r15
    9e4e:	08 f0       	brcs	.+2      	; 0x9e52 <put_fat+0x32>
    9e50:	de c0       	rjmp	.+444    	; 0xa00e <put_fat+0x1ee>
    9e52:	28 01       	movw	r4, r16
    9e54:	39 01       	movw	r6, r18
    9e56:	6a 01       	movw	r12, r20
    9e58:	7b 01       	movw	r14, r22
    9e5a:	9e 83       	std	Y+6, r25	; 0x06
    9e5c:	8d 83       	std	Y+5, r24	; 0x05
    9e5e:	fc 01       	movw	r30, r24
    9e60:	80 81       	ld	r24, Z
    9e62:	82 30       	cpi	r24, 0x02	; 2
    9e64:	09 f4       	brne	.+2      	; 0x9e68 <put_fat+0x48>
    9e66:	73 c0       	rjmp	.+230    	; 0x9f4e <put_fat+0x12e>
    9e68:	83 30       	cpi	r24, 0x03	; 3
    9e6a:	09 f4       	brne	.+2      	; 0x9e6e <put_fat+0x4e>
    9e6c:	92 c0       	rjmp	.+292    	; 0x9f92 <put_fat+0x172>
    9e6e:	81 30       	cpi	r24, 0x01	; 1
    9e70:	09 f0       	breq	.+2      	; 0x9e74 <put_fat+0x54>
    9e72:	cd c0       	rjmp	.+410    	; 0xa00e <put_fat+0x1ee>
    9e74:	4a 01       	movw	r8, r20
    9e76:	96 94       	lsr	r9
    9e78:	87 94       	ror	r8
    9e7a:	84 0e       	add	r8, r20
    9e7c:	95 1e       	adc	r9, r21
    9e7e:	c4 01       	movw	r24, r8
    9e80:	89 2f       	mov	r24, r25
    9e82:	99 27       	eor	r25, r25
    9e84:	86 95       	lsr	r24
    9e86:	45 a1       	ldd	r20, Z+37	; 0x25
    9e88:	56 a1       	ldd	r21, Z+38	; 0x26
    9e8a:	67 a1       	ldd	r22, Z+39	; 0x27
    9e8c:	70 a5       	ldd	r23, Z+40	; 0x28
    9e8e:	48 0f       	add	r20, r24
    9e90:	59 1f       	adc	r21, r25
    9e92:	61 1d       	adc	r22, r1
    9e94:	71 1d       	adc	r23, r1
    9e96:	cf 01       	movw	r24, r30
    9e98:	e6 dc       	rcall	.-1588   	; 0x9866 <move_window>
    9e9a:	5c 01       	movw	r10, r24
    9e9c:	89 2b       	or	r24, r25
    9e9e:	09 f0       	breq	.+2      	; 0x9ea2 <put_fat+0x82>
    9ea0:	b9 c0       	rjmp	.+370    	; 0xa014 <put_fat+0x1f4>
    9ea2:	2d 80       	ldd	r2, Y+5	; 0x05
    9ea4:	3e 80       	ldd	r3, Y+6	; 0x06
    9ea6:	f5 e3       	ldi	r31, 0x35	; 53
    9ea8:	2f 0e       	add	r2, r31
    9eaa:	31 1c       	adc	r3, r1
    9eac:	84 01       	movw	r16, r8
    9eae:	0f 5f       	subi	r16, 0xFF	; 255
    9eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    9eb2:	21 e0       	ldi	r18, 0x01	; 1
    9eb4:	92 22       	and	r9, r18
    9eb6:	f1 01       	movw	r30, r2
    9eb8:	e8 0d       	add	r30, r8
    9eba:	f9 1d       	adc	r31, r9
    9ebc:	d7 01       	movw	r26, r14
    9ebe:	c6 01       	movw	r24, r12
    9ec0:	81 70       	andi	r24, 0x01	; 1
    9ec2:	99 27       	eor	r25, r25
    9ec4:	aa 27       	eor	r26, r26
    9ec6:	bb 27       	eor	r27, r27
    9ec8:	89 83       	std	Y+1, r24	; 0x01
    9eca:	9a 83       	std	Y+2, r25	; 0x02
    9ecc:	ab 83       	std	Y+3, r26	; 0x03
    9ece:	bc 83       	std	Y+4, r27	; 0x04
    9ed0:	c0 fe       	sbrs	r12, 0
    9ed2:	09 c0       	rjmp	.+18     	; 0x9ee6 <put_fat+0xc6>
    9ed4:	80 81       	ld	r24, Z
    9ed6:	28 2f       	mov	r18, r24
    9ed8:	2f 70       	andi	r18, 0x0F	; 15
    9eda:	a0 e1       	ldi	r26, 0x10	; 16
    9edc:	4a 9e       	mul	r4, r26
    9ede:	c0 01       	movw	r24, r0
    9ee0:	11 24       	eor	r1, r1
    9ee2:	82 2b       	or	r24, r18
    9ee4:	01 c0       	rjmp	.+2      	; 0x9ee8 <put_fat+0xc8>
    9ee6:	84 2d       	mov	r24, r4
    9ee8:	80 83       	st	Z, r24
    9eea:	81 e0       	ldi	r24, 0x01	; 1
    9eec:	ed 81       	ldd	r30, Y+5	; 0x05
    9eee:	fe 81       	ldd	r31, Y+6	; 0x06
    9ef0:	83 83       	std	Z+3, r24	; 0x03
    9ef2:	45 a1       	ldd	r20, Z+37	; 0x25
    9ef4:	56 a1       	ldd	r21, Z+38	; 0x26
    9ef6:	67 a1       	ldd	r22, Z+39	; 0x27
    9ef8:	70 a5       	ldd	r23, Z+40	; 0x28
    9efa:	c8 01       	movw	r24, r16
    9efc:	89 2f       	mov	r24, r25
    9efe:	99 27       	eor	r25, r25
    9f00:	86 95       	lsr	r24
    9f02:	48 0f       	add	r20, r24
    9f04:	59 1f       	adc	r21, r25
    9f06:	61 1d       	adc	r22, r1
    9f08:	71 1d       	adc	r23, r1
    9f0a:	cf 01       	movw	r24, r30
    9f0c:	ac dc       	rcall	.-1704   	; 0x9866 <move_window>
    9f0e:	5c 01       	movw	r10, r24
    9f10:	89 2b       	or	r24, r25
    9f12:	09 f0       	breq	.+2      	; 0x9f16 <put_fat+0xf6>
    9f14:	7f c0       	rjmp	.+254    	; 0xa014 <put_fat+0x1f4>
    9f16:	11 70       	andi	r17, 0x01	; 1
    9f18:	f1 01       	movw	r30, r2
    9f1a:	e0 0f       	add	r30, r16
    9f1c:	f1 1f       	adc	r31, r17
    9f1e:	89 81       	ldd	r24, Y+1	; 0x01
    9f20:	9a 81       	ldd	r25, Y+2	; 0x02
    9f22:	ab 81       	ldd	r26, Y+3	; 0x03
    9f24:	bc 81       	ldd	r27, Y+4	; 0x04
    9f26:	89 2b       	or	r24, r25
    9f28:	8a 2b       	or	r24, r26
    9f2a:	8b 2b       	or	r24, r27
    9f2c:	41 f0       	breq	.+16     	; 0x9f3e <put_fat+0x11e>
    9f2e:	54 e0       	ldi	r21, 0x04	; 4
    9f30:	76 94       	lsr	r7
    9f32:	67 94       	ror	r6
    9f34:	57 94       	ror	r5
    9f36:	47 94       	ror	r4
    9f38:	5a 95       	dec	r21
    9f3a:	d1 f7       	brne	.-12     	; 0x9f30 <put_fat+0x110>
    9f3c:	06 c0       	rjmp	.+12     	; 0x9f4a <put_fat+0x12a>
    9f3e:	00 81       	ld	r16, Z
    9f40:	00 7f       	andi	r16, 0xF0	; 240
    9f42:	85 2d       	mov	r24, r5
    9f44:	8f 70       	andi	r24, 0x0F	; 15
    9f46:	40 2e       	mov	r4, r16
    9f48:	48 2a       	or	r4, r24
    9f4a:	40 82       	st	Z, r4
    9f4c:	5a c0       	rjmp	.+180    	; 0xa002 <put_fat+0x1e2>
    9f4e:	77 27       	eor	r23, r23
    9f50:	6f 2d       	mov	r22, r15
    9f52:	5e 2d       	mov	r21, r14
    9f54:	4d 2d       	mov	r20, r13
    9f56:	ed 81       	ldd	r30, Y+5	; 0x05
    9f58:	fe 81       	ldd	r31, Y+6	; 0x06
    9f5a:	85 a1       	ldd	r24, Z+37	; 0x25
    9f5c:	96 a1       	ldd	r25, Z+38	; 0x26
    9f5e:	a7 a1       	ldd	r26, Z+39	; 0x27
    9f60:	b0 a5       	ldd	r27, Z+40	; 0x28
    9f62:	48 0f       	add	r20, r24
    9f64:	59 1f       	adc	r21, r25
    9f66:	6a 1f       	adc	r22, r26
    9f68:	7b 1f       	adc	r23, r27
    9f6a:	cf 01       	movw	r24, r30
    9f6c:	7c dc       	rcall	.-1800   	; 0x9866 <move_window>
    9f6e:	5c 01       	movw	r10, r24
    9f70:	89 2b       	or	r24, r25
    9f72:	09 f0       	breq	.+2      	; 0x9f76 <put_fat+0x156>
    9f74:	4f c0       	rjmp	.+158    	; 0xa014 <put_fat+0x1f4>
    9f76:	ed 81       	ldd	r30, Y+5	; 0x05
    9f78:	fe 81       	ldd	r31, Y+6	; 0x06
    9f7a:	f5 96       	adiw	r30, 0x35	; 53
    9f7c:	cc 0c       	add	r12, r12
    9f7e:	dd 1c       	adc	r13, r13
    9f80:	e8 94       	clt
    9f82:	c0 f8       	bld	r12, 0
    9f84:	21 e0       	ldi	r18, 0x01	; 1
    9f86:	d2 22       	and	r13, r18
    9f88:	ec 0d       	add	r30, r12
    9f8a:	fd 1d       	adc	r31, r13
    9f8c:	40 82       	st	Z, r4
    9f8e:	51 82       	std	Z+1, r5	; 0x01
    9f90:	38 c0       	rjmp	.+112    	; 0xa002 <put_fat+0x1e2>
    9f92:	ed 81       	ldd	r30, Y+5	; 0x05
    9f94:	fe 81       	ldd	r31, Y+6	; 0x06
    9f96:	85 a1       	ldd	r24, Z+37	; 0x25
    9f98:	96 a1       	ldd	r25, Z+38	; 0x26
    9f9a:	a7 a1       	ldd	r26, Z+39	; 0x27
    9f9c:	b0 a5       	ldd	r27, Z+40	; 0x28
    9f9e:	27 e0       	ldi	r18, 0x07	; 7
    9fa0:	76 95       	lsr	r23
    9fa2:	67 95       	ror	r22
    9fa4:	57 95       	ror	r21
    9fa6:	47 95       	ror	r20
    9fa8:	2a 95       	dec	r18
    9faa:	d1 f7       	brne	.-12     	; 0x9fa0 <put_fat+0x180>
    9fac:	48 0f       	add	r20, r24
    9fae:	59 1f       	adc	r21, r25
    9fb0:	6a 1f       	adc	r22, r26
    9fb2:	7b 1f       	adc	r23, r27
    9fb4:	cf 01       	movw	r24, r30
    9fb6:	57 dc       	rcall	.-1874   	; 0x9866 <move_window>
    9fb8:	5c 01       	movw	r10, r24
    9fba:	89 2b       	or	r24, r25
    9fbc:	59 f5       	brne	.+86     	; 0xa014 <put_fat+0x1f4>
    9fbe:	4d 81       	ldd	r20, Y+5	; 0x05
    9fc0:	5e 81       	ldd	r21, Y+6	; 0x06
    9fc2:	4b 5c       	subi	r20, 0xCB	; 203
    9fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    9fc6:	cc 0c       	add	r12, r12
    9fc8:	dd 1c       	adc	r13, r13
    9fca:	cc 0c       	add	r12, r12
    9fcc:	dd 1c       	adc	r13, r13
    9fce:	fc ef       	ldi	r31, 0xFC	; 252
    9fd0:	cf 22       	and	r12, r31
    9fd2:	f1 e0       	ldi	r31, 0x01	; 1
    9fd4:	df 22       	and	r13, r31
    9fd6:	c4 0e       	add	r12, r20
    9fd8:	d5 1e       	adc	r13, r21
    9fda:	c6 01       	movw	r24, r12
    9fdc:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <ld_dword>
    9fe0:	2f e0       	ldi	r18, 0x0F	; 15
    9fe2:	72 22       	and	r7, r18
    9fe4:	dc 01       	movw	r26, r24
    9fe6:	cb 01       	movw	r24, r22
    9fe8:	88 27       	eor	r24, r24
    9fea:	99 27       	eor	r25, r25
    9fec:	aa 27       	eor	r26, r26
    9fee:	b0 7f       	andi	r27, 0xF0	; 240
    9ff0:	b3 01       	movw	r22, r6
    9ff2:	a2 01       	movw	r20, r4
    9ff4:	48 2b       	or	r20, r24
    9ff6:	59 2b       	or	r21, r25
    9ff8:	6a 2b       	or	r22, r26
    9ffa:	7b 2b       	or	r23, r27
    9ffc:	c6 01       	movw	r24, r12
    9ffe:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
    a002:	81 e0       	ldi	r24, 0x01	; 1
    a004:	ad 81       	ldd	r26, Y+5	; 0x05
    a006:	be 81       	ldd	r27, Y+6	; 0x06
    a008:	13 96       	adiw	r26, 0x03	; 3
    a00a:	8c 93       	st	X, r24
    a00c:	03 c0       	rjmp	.+6      	; 0xa014 <put_fat+0x1f4>
    a00e:	82 e0       	ldi	r24, 0x02	; 2
    a010:	a8 2e       	mov	r10, r24
    a012:	b1 2c       	mov	r11, r1
    a014:	c5 01       	movw	r24, r10
    a016:	26 96       	adiw	r28, 0x06	; 6
    a018:	e2 e1       	ldi	r30, 0x12	; 18
    a01a:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0000a01e <get_fat.isra.10>:
    a01e:	a0 e0       	ldi	r26, 0x00	; 0
    a020:	b0 e0       	ldi	r27, 0x00	; 0
    a022:	e5 e1       	ldi	r30, 0x15	; 21
    a024:	f0 e5       	ldi	r31, 0x50	; 80
    a026:	0c 94 36 e5 	jmp	0x1ca6c	; 0x1ca6c <__prologue_saves__+0x10>
    a02a:	42 30       	cpi	r20, 0x02	; 2
    a02c:	51 05       	cpc	r21, r1
    a02e:	61 05       	cpc	r22, r1
    a030:	71 05       	cpc	r23, r1
    a032:	08 f4       	brcc	.+2      	; 0xa036 <get_fat.isra.10+0x18>
    a034:	9f c0       	rjmp	.+318    	; 0xa174 <get_fat.isra.10+0x156>
    a036:	fc 01       	movw	r30, r24
    a038:	01 8d       	ldd	r16, Z+25	; 0x19
    a03a:	12 8d       	ldd	r17, Z+26	; 0x1a
    a03c:	23 8d       	ldd	r18, Z+27	; 0x1b
    a03e:	34 8d       	ldd	r19, Z+28	; 0x1c
    a040:	40 17       	cp	r20, r16
    a042:	51 07       	cpc	r21, r17
    a044:	62 07       	cpc	r22, r18
    a046:	73 07       	cpc	r23, r19
    a048:	08 f0       	brcs	.+2      	; 0xa04c <get_fat.isra.10+0x2e>
    a04a:	94 c0       	rjmp	.+296    	; 0xa174 <get_fat.isra.10+0x156>
    a04c:	6a 01       	movw	r12, r20
    a04e:	7b 01       	movw	r14, r22
    a050:	8c 01       	movw	r16, r24
    a052:	80 81       	ld	r24, Z
    a054:	82 30       	cpi	r24, 0x02	; 2
    a056:	09 f4       	brne	.+2      	; 0xa05a <get_fat.isra.10+0x3c>
    a058:	4b c0       	rjmp	.+150    	; 0xa0f0 <get_fat.isra.10+0xd2>
    a05a:	83 30       	cpi	r24, 0x03	; 3
    a05c:	09 f4       	brne	.+2      	; 0xa060 <get_fat.isra.10+0x42>
    a05e:	67 c0       	rjmp	.+206    	; 0xa12e <get_fat.isra.10+0x110>
    a060:	81 30       	cpi	r24, 0x01	; 1
    a062:	09 f0       	breq	.+2      	; 0xa066 <get_fat.isra.10+0x48>
    a064:	87 c0       	rjmp	.+270    	; 0xa174 <get_fat.isra.10+0x156>
    a066:	ea 01       	movw	r28, r20
    a068:	d6 95       	lsr	r29
    a06a:	c7 95       	ror	r28
    a06c:	cc 0d       	add	r28, r12
    a06e:	dd 1d       	adc	r29, r13
    a070:	ce 01       	movw	r24, r28
    a072:	89 2f       	mov	r24, r25
    a074:	99 27       	eor	r25, r25
    a076:	86 95       	lsr	r24
    a078:	45 a1       	ldd	r20, Z+37	; 0x25
    a07a:	56 a1       	ldd	r21, Z+38	; 0x26
    a07c:	67 a1       	ldd	r22, Z+39	; 0x27
    a07e:	70 a5       	ldd	r23, Z+40	; 0x28
    a080:	48 0f       	add	r20, r24
    a082:	59 1f       	adc	r21, r25
    a084:	61 1d       	adc	r22, r1
    a086:	71 1d       	adc	r23, r1
    a088:	cf 01       	movw	r24, r30
    a08a:	ed db       	rcall	.-2086   	; 0x9866 <move_window>
    a08c:	89 2b       	or	r24, r25
    a08e:	21 f0       	breq	.+8      	; 0xa098 <get_fat.isra.10+0x7a>
    a090:	6f ef       	ldi	r22, 0xFF	; 255
    a092:	7f ef       	ldi	r23, 0xFF	; 255
    a094:	cb 01       	movw	r24, r22
    a096:	72 c0       	rjmp	.+228    	; 0xa17c <get_fat.isra.10+0x15e>
    a098:	5e 01       	movw	r10, r28
    a09a:	ff ef       	ldi	r31, 0xFF	; 255
    a09c:	af 1a       	sub	r10, r31
    a09e:	bf 0a       	sbc	r11, r31
    a0a0:	d1 70       	andi	r29, 0x01	; 1
    a0a2:	c0 0f       	add	r28, r16
    a0a4:	d1 1f       	adc	r29, r17
    a0a6:	cd a9       	ldd	r28, Y+53	; 0x35
    a0a8:	c5 01       	movw	r24, r10
    a0aa:	89 2f       	mov	r24, r25
    a0ac:	99 27       	eor	r25, r25
    a0ae:	86 95       	lsr	r24
    a0b0:	f8 01       	movw	r30, r16
    a0b2:	45 a1       	ldd	r20, Z+37	; 0x25
    a0b4:	56 a1       	ldd	r21, Z+38	; 0x26
    a0b6:	67 a1       	ldd	r22, Z+39	; 0x27
    a0b8:	70 a5       	ldd	r23, Z+40	; 0x28
    a0ba:	48 0f       	add	r20, r24
    a0bc:	59 1f       	adc	r21, r25
    a0be:	61 1d       	adc	r22, r1
    a0c0:	71 1d       	adc	r23, r1
    a0c2:	c8 01       	movw	r24, r16
    a0c4:	d0 db       	rcall	.-2144   	; 0x9866 <move_window>
    a0c6:	89 2b       	or	r24, r25
    a0c8:	19 f7       	brne	.-58     	; 0xa090 <get_fat.isra.10+0x72>
    a0ca:	f1 e0       	ldi	r31, 0x01	; 1
    a0cc:	bf 22       	and	r11, r31
    a0ce:	f8 01       	movw	r30, r16
    a0d0:	ea 0d       	add	r30, r10
    a0d2:	fb 1d       	adc	r31, r11
    a0d4:	85 a9       	ldd	r24, Z+53	; 0x35
    a0d6:	6c 2f       	mov	r22, r28
    a0d8:	70 e0       	ldi	r23, 0x00	; 0
    a0da:	78 2b       	or	r23, r24
    a0dc:	c0 fe       	sbrs	r12, 0
    a0de:	06 c0       	rjmp	.+12     	; 0xa0ec <get_fat.isra.10+0xce>
    a0e0:	54 e0       	ldi	r21, 0x04	; 4
    a0e2:	76 95       	lsr	r23
    a0e4:	67 95       	ror	r22
    a0e6:	5a 95       	dec	r21
    a0e8:	e1 f7       	brne	.-8      	; 0xa0e2 <get_fat.isra.10+0xc4>
    a0ea:	1e c0       	rjmp	.+60     	; 0xa128 <get_fat.isra.10+0x10a>
    a0ec:	7f 70       	andi	r23, 0x0F	; 15
    a0ee:	1c c0       	rjmp	.+56     	; 0xa128 <get_fat.isra.10+0x10a>
    a0f0:	77 27       	eor	r23, r23
    a0f2:	6f 2d       	mov	r22, r15
    a0f4:	5e 2d       	mov	r21, r14
    a0f6:	4d 2d       	mov	r20, r13
    a0f8:	85 a1       	ldd	r24, Z+37	; 0x25
    a0fa:	96 a1       	ldd	r25, Z+38	; 0x26
    a0fc:	a7 a1       	ldd	r26, Z+39	; 0x27
    a0fe:	b0 a5       	ldd	r27, Z+40	; 0x28
    a100:	48 0f       	add	r20, r24
    a102:	59 1f       	adc	r21, r25
    a104:	6a 1f       	adc	r22, r26
    a106:	7b 1f       	adc	r23, r27
    a108:	cf 01       	movw	r24, r30
    a10a:	ad db       	rcall	.-2214   	; 0x9866 <move_window>
    a10c:	89 2b       	or	r24, r25
    a10e:	09 f0       	breq	.+2      	; 0xa112 <get_fat.isra.10+0xf4>
    a110:	bf cf       	rjmp	.-130    	; 0xa090 <get_fat.isra.10+0x72>
    a112:	cc 0c       	add	r12, r12
    a114:	dd 1c       	adc	r13, r13
    a116:	e8 94       	clt
    a118:	c0 f8       	bld	r12, 0
    a11a:	f1 e0       	ldi	r31, 0x01	; 1
    a11c:	df 22       	and	r13, r31
    a11e:	f8 01       	movw	r30, r16
    a120:	ec 0d       	add	r30, r12
    a122:	fd 1d       	adc	r31, r13
    a124:	65 a9       	ldd	r22, Z+53	; 0x35
    a126:	76 a9       	ldd	r23, Z+54	; 0x36
    a128:	80 e0       	ldi	r24, 0x00	; 0
    a12a:	90 e0       	ldi	r25, 0x00	; 0
    a12c:	27 c0       	rjmp	.+78     	; 0xa17c <get_fat.isra.10+0x15e>
    a12e:	85 a1       	ldd	r24, Z+37	; 0x25
    a130:	96 a1       	ldd	r25, Z+38	; 0x26
    a132:	a7 a1       	ldd	r26, Z+39	; 0x27
    a134:	b0 a5       	ldd	r27, Z+40	; 0x28
    a136:	27 e0       	ldi	r18, 0x07	; 7
    a138:	76 95       	lsr	r23
    a13a:	67 95       	ror	r22
    a13c:	57 95       	ror	r21
    a13e:	47 95       	ror	r20
    a140:	2a 95       	dec	r18
    a142:	d1 f7       	brne	.-12     	; 0xa138 <get_fat.isra.10+0x11a>
    a144:	48 0f       	add	r20, r24
    a146:	59 1f       	adc	r21, r25
    a148:	6a 1f       	adc	r22, r26
    a14a:	7b 1f       	adc	r23, r27
    a14c:	cf 01       	movw	r24, r30
    a14e:	8b db       	rcall	.-2282   	; 0x9866 <move_window>
    a150:	89 2b       	or	r24, r25
    a152:	09 f0       	breq	.+2      	; 0xa156 <get_fat.isra.10+0x138>
    a154:	9d cf       	rjmp	.-198    	; 0xa090 <get_fat.isra.10+0x72>
    a156:	0b 5c       	subi	r16, 0xCB	; 203
    a158:	1f 4f       	sbci	r17, 0xFF	; 255
    a15a:	cc 0c       	add	r12, r12
    a15c:	dd 1c       	adc	r13, r13
    a15e:	cc 0c       	add	r12, r12
    a160:	dd 1c       	adc	r13, r13
    a162:	c6 01       	movw	r24, r12
    a164:	8c 7f       	andi	r24, 0xFC	; 252
    a166:	91 70       	andi	r25, 0x01	; 1
    a168:	80 0f       	add	r24, r16
    a16a:	91 1f       	adc	r25, r17
    a16c:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <ld_dword>
    a170:	9f 70       	andi	r25, 0x0F	; 15
    a172:	04 c0       	rjmp	.+8      	; 0xa17c <get_fat.isra.10+0x15e>
    a174:	61 e0       	ldi	r22, 0x01	; 1
    a176:	70 e0       	ldi	r23, 0x00	; 0
    a178:	80 e0       	ldi	r24, 0x00	; 0
    a17a:	90 e0       	ldi	r25, 0x00	; 0
    a17c:	cd b7       	in	r28, 0x3d	; 61
    a17e:	de b7       	in	r29, 0x3e	; 62
    a180:	ea e0       	ldi	r30, 0x0A	; 10
    a182:	0c 94 52 e5 	jmp	0x1caa4	; 0x1caa4 <__epilogue_restores__+0x10>

0000a186 <dir_sdi>:
    a186:	a0 e0       	ldi	r26, 0x00	; 0
    a188:	b0 e0       	ldi	r27, 0x00	; 0
    a18a:	e9 ec       	ldi	r30, 0xC9	; 201
    a18c:	f0 e5       	ldi	r31, 0x50	; 80
    a18e:	0c 94 30 e5 	jmp	0x1ca60	; 0x1ca60 <__prologue_saves__+0x4>
    a192:	ec 01       	movw	r28, r24
    a194:	6a 01       	movw	r12, r20
    a196:	7b 01       	movw	r14, r22
    a198:	41 15       	cp	r20, r1
    a19a:	51 05       	cpc	r21, r1
    a19c:	80 e2       	ldi	r24, 0x20	; 32
    a19e:	68 07       	cpc	r22, r24
    a1a0:	71 05       	cpc	r23, r1
    a1a2:	18 f0       	brcs	.+6      	; 0xa1aa <dir_sdi+0x24>
    a1a4:	82 e0       	ldi	r24, 0x02	; 2
    a1a6:	90 e0       	ldi	r25, 0x00	; 0
    a1a8:	aa c0       	rjmp	.+340    	; 0xa2fe <dir_sdi+0x178>
    a1aa:	db 01       	movw	r26, r22
    a1ac:	ca 01       	movw	r24, r20
    a1ae:	8f 71       	andi	r24, 0x1F	; 31
    a1b0:	99 27       	eor	r25, r25
    a1b2:	aa 27       	eor	r26, r26
    a1b4:	bb 27       	eor	r27, r27
    a1b6:	89 2b       	or	r24, r25
    a1b8:	8a 2b       	or	r24, r26
    a1ba:	8b 2b       	or	r24, r27
    a1bc:	99 f7       	brne	.-26     	; 0xa1a4 <dir_sdi+0x1e>
    a1be:	08 81       	ld	r16, Y
    a1c0:	19 81       	ldd	r17, Y+1	; 0x01
    a1c2:	4e 87       	std	Y+14, r20	; 0x0e
    a1c4:	5f 87       	std	Y+15, r21	; 0x0f
    a1c6:	68 8b       	std	Y+16, r22	; 0x10
    a1c8:	79 8b       	std	Y+17, r23	; 0x11
    a1ca:	8e 80       	ldd	r8, Y+6	; 0x06
    a1cc:	9f 80       	ldd	r9, Y+7	; 0x07
    a1ce:	a8 84       	ldd	r10, Y+8	; 0x08
    a1d0:	b9 84       	ldd	r11, Y+9	; 0x09
    a1d2:	81 14       	cp	r8, r1
    a1d4:	91 04       	cpc	r9, r1
    a1d6:	a1 04       	cpc	r10, r1
    a1d8:	b1 04       	cpc	r11, r1
    a1da:	51 f5       	brne	.+84     	; 0xa230 <dir_sdi+0xaa>
    a1dc:	f8 01       	movw	r30, r16
    a1de:	80 81       	ld	r24, Z
    a1e0:	83 30       	cpi	r24, 0x03	; 3
    a1e2:	40 f0       	brcs	.+16     	; 0xa1f4 <dir_sdi+0x6e>
    a1e4:	81 a5       	ldd	r24, Z+41	; 0x29
    a1e6:	92 a5       	ldd	r25, Z+42	; 0x2a
    a1e8:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a1ea:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a1ec:	00 97       	sbiw	r24, 0x00	; 0
    a1ee:	a1 05       	cpc	r26, r1
    a1f0:	b1 05       	cpc	r27, r1
    a1f2:	e1 f4       	brne	.+56     	; 0xa22c <dir_sdi+0xa6>
    a1f4:	f8 01       	movw	r30, r16
    a1f6:	87 81       	ldd	r24, Z+7	; 0x07
    a1f8:	90 85       	ldd	r25, Z+8	; 0x08
    a1fa:	a0 e0       	ldi	r26, 0x00	; 0
    a1fc:	b0 e0       	ldi	r27, 0x00	; 0
    a1fe:	b7 01       	movw	r22, r14
    a200:	a6 01       	movw	r20, r12
    a202:	25 e0       	ldi	r18, 0x05	; 5
    a204:	76 95       	lsr	r23
    a206:	67 95       	ror	r22
    a208:	57 95       	ror	r21
    a20a:	47 95       	ror	r20
    a20c:	2a 95       	dec	r18
    a20e:	d1 f7       	brne	.-12     	; 0xa204 <dir_sdi+0x7e>
    a210:	48 17       	cp	r20, r24
    a212:	59 07       	cpc	r21, r25
    a214:	6a 07       	cpc	r22, r26
    a216:	7b 07       	cpc	r23, r27
    a218:	28 f6       	brcc	.-118    	; 0xa1a4 <dir_sdi+0x1e>
    a21a:	81 a5       	ldd	r24, Z+41	; 0x29
    a21c:	92 a5       	ldd	r25, Z+42	; 0x2a
    a21e:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a220:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a222:	8e 8b       	std	Y+22, r24	; 0x16
    a224:	9f 8b       	std	Y+23, r25	; 0x17
    a226:	a8 8f       	std	Y+24, r26	; 0x18
    a228:	b9 8f       	std	Y+25, r27	; 0x19
    a22a:	3e c0       	rjmp	.+124    	; 0xa2a8 <dir_sdi+0x122>
    a22c:	4c 01       	movw	r8, r24
    a22e:	5d 01       	movw	r10, r26
    a230:	f8 01       	movw	r30, r16
    a232:	41 84       	ldd	r4, Z+9	; 0x09
    a234:	52 84       	ldd	r5, Z+10	; 0x0a
    a236:	61 2c       	mov	r6, r1
    a238:	71 2c       	mov	r7, r1
    a23a:	39 e0       	ldi	r19, 0x09	; 9
    a23c:	44 0c       	add	r4, r4
    a23e:	55 1c       	adc	r5, r5
    a240:	66 1c       	adc	r6, r6
    a242:	77 1c       	adc	r7, r7
    a244:	3a 95       	dec	r19
    a246:	d1 f7       	brne	.-12     	; 0xa23c <dir_sdi+0xb6>
    a248:	b5 01       	movw	r22, r10
    a24a:	a4 01       	movw	r20, r8
    a24c:	c4 14       	cp	r12, r4
    a24e:	d5 04       	cpc	r13, r5
    a250:	e6 04       	cpc	r14, r6
    a252:	f7 04       	cpc	r15, r7
    a254:	10 f1       	brcs	.+68     	; 0xa29a <dir_sdi+0x114>
    a256:	88 81       	ld	r24, Y
    a258:	99 81       	ldd	r25, Y+1	; 0x01
    a25a:	e1 de       	rcall	.-574    	; 0xa01e <get_fat.isra.10>
    a25c:	4b 01       	movw	r8, r22
    a25e:	5c 01       	movw	r10, r24
    a260:	6f 3f       	cpi	r22, 0xFF	; 255
    a262:	7f 4f       	sbci	r23, 0xFF	; 255
    a264:	8f 4f       	sbci	r24, 0xFF	; 255
    a266:	9f 4f       	sbci	r25, 0xFF	; 255
    a268:	09 f4       	brne	.+2      	; 0xa26c <dir_sdi+0xe6>
    a26a:	47 c0       	rjmp	.+142    	; 0xa2fa <dir_sdi+0x174>
    a26c:	82 e0       	ldi	r24, 0x02	; 2
    a26e:	88 16       	cp	r8, r24
    a270:	91 04       	cpc	r9, r1
    a272:	a1 04       	cpc	r10, r1
    a274:	b1 04       	cpc	r11, r1
    a276:	08 f4       	brcc	.+2      	; 0xa27a <dir_sdi+0xf4>
    a278:	95 cf       	rjmp	.-214    	; 0xa1a4 <dir_sdi+0x1e>
    a27a:	f8 01       	movw	r30, r16
    a27c:	81 8d       	ldd	r24, Z+25	; 0x19
    a27e:	92 8d       	ldd	r25, Z+26	; 0x1a
    a280:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a282:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a284:	88 16       	cp	r8, r24
    a286:	99 06       	cpc	r9, r25
    a288:	aa 06       	cpc	r10, r26
    a28a:	bb 06       	cpc	r11, r27
    a28c:	08 f0       	brcs	.+2      	; 0xa290 <dir_sdi+0x10a>
    a28e:	8a cf       	rjmp	.-236    	; 0xa1a4 <dir_sdi+0x1e>
    a290:	c4 18       	sub	r12, r4
    a292:	d5 08       	sbc	r13, r5
    a294:	e6 08       	sbc	r14, r6
    a296:	f7 08       	sbc	r15, r7
    a298:	d7 cf       	rjmp	.-82     	; 0xa248 <dir_sdi+0xc2>
    a29a:	c8 01       	movw	r24, r16
    a29c:	0e 94 08 48 	call	0x9010	; 0x9010 <clst2sect>
    a2a0:	6e 8b       	std	Y+22, r22	; 0x16
    a2a2:	7f 8b       	std	Y+23, r23	; 0x17
    a2a4:	88 8f       	std	Y+24, r24	; 0x18
    a2a6:	99 8f       	std	Y+25, r25	; 0x19
    a2a8:	8a 8a       	std	Y+18, r8	; 0x12
    a2aa:	9b 8a       	std	Y+19, r9	; 0x13
    a2ac:	ac 8a       	std	Y+20, r10	; 0x14
    a2ae:	bd 8a       	std	Y+21, r11	; 0x15
    a2b0:	8e 89       	ldd	r24, Y+22	; 0x16
    a2b2:	9f 89       	ldd	r25, Y+23	; 0x17
    a2b4:	a8 8d       	ldd	r26, Y+24	; 0x18
    a2b6:	b9 8d       	ldd	r27, Y+25	; 0x19
    a2b8:	00 97       	sbiw	r24, 0x00	; 0
    a2ba:	a1 05       	cpc	r26, r1
    a2bc:	b1 05       	cpc	r27, r1
    a2be:	09 f4       	brne	.+2      	; 0xa2c2 <dir_sdi+0x13c>
    a2c0:	71 cf       	rjmp	.-286    	; 0xa1a4 <dir_sdi+0x1e>
    a2c2:	b7 01       	movw	r22, r14
    a2c4:	a6 01       	movw	r20, r12
    a2c6:	29 e0       	ldi	r18, 0x09	; 9
    a2c8:	76 95       	lsr	r23
    a2ca:	67 95       	ror	r22
    a2cc:	57 95       	ror	r21
    a2ce:	47 95       	ror	r20
    a2d0:	2a 95       	dec	r18
    a2d2:	d1 f7       	brne	.-12     	; 0xa2c8 <dir_sdi+0x142>
    a2d4:	84 0f       	add	r24, r20
    a2d6:	95 1f       	adc	r25, r21
    a2d8:	a6 1f       	adc	r26, r22
    a2da:	b7 1f       	adc	r27, r23
    a2dc:	8e 8b       	std	Y+22, r24	; 0x16
    a2de:	9f 8b       	std	Y+23, r25	; 0x17
    a2e0:	a8 8f       	std	Y+24, r26	; 0x18
    a2e2:	b9 8f       	std	Y+25, r27	; 0x19
    a2e4:	0b 5c       	subi	r16, 0xCB	; 203
    a2e6:	1f 4f       	sbci	r17, 0xFF	; 255
    a2e8:	f1 e0       	ldi	r31, 0x01	; 1
    a2ea:	df 22       	and	r13, r31
    a2ec:	c0 0e       	add	r12, r16
    a2ee:	d1 1e       	adc	r13, r17
    a2f0:	db 8e       	std	Y+27, r13	; 0x1b
    a2f2:	ca 8e       	std	Y+26, r12	; 0x1a
    a2f4:	80 e0       	ldi	r24, 0x00	; 0
    a2f6:	90 e0       	ldi	r25, 0x00	; 0
    a2f8:	02 c0       	rjmp	.+4      	; 0xa2fe <dir_sdi+0x178>
    a2fa:	81 e0       	ldi	r24, 0x01	; 1
    a2fc:	90 e0       	ldi	r25, 0x00	; 0
    a2fe:	cd b7       	in	r28, 0x3d	; 61
    a300:	de b7       	in	r29, 0x3e	; 62
    a302:	e0 e1       	ldi	r30, 0x10	; 16
    a304:	0c 94 4c e5 	jmp	0x1ca98	; 0x1ca98 <__epilogue_restores__+0x4>

0000a308 <create_chain>:
    a308:	a0 e0       	ldi	r26, 0x00	; 0
    a30a:	b0 e0       	ldi	r27, 0x00	; 0
    a30c:	ea e8       	ldi	r30, 0x8A	; 138
    a30e:	f1 e5       	ldi	r31, 0x51	; 81
    a310:	0c 94 30 e5 	jmp	0x1ca60	; 0x1ca60 <__prologue_saves__+0x4>
    a314:	8c 01       	movw	r16, r24
    a316:	2a 01       	movw	r4, r20
    a318:	3b 01       	movw	r6, r22
    a31a:	fc 01       	movw	r30, r24
    a31c:	c0 81       	ld	r28, Z
    a31e:	d1 81       	ldd	r29, Z+1	; 0x01
    a320:	41 15       	cp	r20, r1
    a322:	51 05       	cpc	r21, r1
    a324:	61 05       	cpc	r22, r1
    a326:	71 05       	cpc	r23, r1
    a328:	99 f4       	brne	.+38     	; 0xa350 <create_chain+0x48>
    a32a:	8d 84       	ldd	r8, Y+13	; 0x0d
    a32c:	9e 84       	ldd	r9, Y+14	; 0x0e
    a32e:	af 84       	ldd	r10, Y+15	; 0x0f
    a330:	b8 88       	ldd	r11, Y+16	; 0x10
    a332:	81 14       	cp	r8, r1
    a334:	91 04       	cpc	r9, r1
    a336:	a1 04       	cpc	r10, r1
    a338:	b1 04       	cpc	r11, r1
    a33a:	51 f1       	breq	.+84     	; 0xa390 <create_chain+0x88>
    a33c:	89 8d       	ldd	r24, Y+25	; 0x19
    a33e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a340:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a342:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a344:	88 16       	cp	r8, r24
    a346:	99 06       	cpc	r9, r25
    a348:	aa 06       	cpc	r10, r26
    a34a:	bb 06       	cpc	r11, r27
    a34c:	28 f1       	brcs	.+74     	; 0xa398 <create_chain+0x90>
    a34e:	20 c0       	rjmp	.+64     	; 0xa390 <create_chain+0x88>
    a350:	ce 01       	movw	r24, r28
    a352:	65 de       	rcall	.-822    	; 0xa01e <get_fat.isra.10>
    a354:	62 30       	cpi	r22, 0x02	; 2
    a356:	71 05       	cpc	r23, r1
    a358:	81 05       	cpc	r24, r1
    a35a:	91 05       	cpc	r25, r1
    a35c:	08 f4       	brcc	.+2      	; 0xa360 <create_chain+0x58>
    a35e:	ea c0       	rjmp	.+468    	; 0xa534 <create_chain+0x22c>
    a360:	6f 3f       	cpi	r22, 0xFF	; 255
    a362:	ff ef       	ldi	r31, 0xFF	; 255
    a364:	7f 07       	cpc	r23, r31
    a366:	8f 07       	cpc	r24, r31
    a368:	9f 07       	cpc	r25, r31
    a36a:	29 f4       	brne	.+10     	; 0xa376 <create_chain+0x6e>
    a36c:	4f ef       	ldi	r20, 0xFF	; 255
    a36e:	3f ef       	ldi	r19, 0xFF	; 255
    a370:	2f ef       	ldi	r18, 0xFF	; 255
    a372:	9f ef       	ldi	r25, 0xFF	; 255
    a374:	e7 c0       	rjmp	.+462    	; 0xa544 <create_chain+0x23c>
    a376:	c9 8c       	ldd	r12, Y+25	; 0x19
    a378:	da 8c       	ldd	r13, Y+26	; 0x1a
    a37a:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a37c:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a37e:	6c 15       	cp	r22, r12
    a380:	7d 05       	cpc	r23, r13
    a382:	8e 05       	cpc	r24, r14
    a384:	9f 05       	cpc	r25, r15
    a386:	08 f4       	brcc	.+2      	; 0xa38a <create_chain+0x82>
    a388:	da c0       	rjmp	.+436    	; 0xa53e <create_chain+0x236>
    a38a:	53 01       	movw	r10, r6
    a38c:	42 01       	movw	r8, r4
    a38e:	04 c0       	rjmp	.+8      	; 0xa398 <create_chain+0x90>
    a390:	81 2c       	mov	r8, r1
    a392:	91 2c       	mov	r9, r1
    a394:	54 01       	movw	r10, r8
    a396:	83 94       	inc	r8
    a398:	89 89       	ldd	r24, Y+17	; 0x11
    a39a:	9a 89       	ldd	r25, Y+18	; 0x12
    a39c:	ab 89       	ldd	r26, Y+19	; 0x13
    a39e:	bc 89       	ldd	r27, Y+20	; 0x14
    a3a0:	89 2b       	or	r24, r25
    a3a2:	8a 2b       	or	r24, r26
    a3a4:	8b 2b       	or	r24, r27
    a3a6:	11 f4       	brne	.+4      	; 0xa3ac <create_chain+0xa4>
    a3a8:	40 e0       	ldi	r20, 0x00	; 0
    a3aa:	c5 c0       	rjmp	.+394    	; 0xa536 <create_chain+0x22e>
    a3ac:	84 14       	cp	r8, r4
    a3ae:	95 04       	cpc	r9, r5
    a3b0:	a6 04       	cpc	r10, r6
    a3b2:	b7 04       	cpc	r11, r7
    a3b4:	09 f0       	breq	.+2      	; 0xa3b8 <create_chain+0xb0>
    a3b6:	46 c0       	rjmp	.+140    	; 0xa444 <create_chain+0x13c>
    a3b8:	75 01       	movw	r14, r10
    a3ba:	64 01       	movw	r12, r8
    a3bc:	2f ef       	ldi	r18, 0xFF	; 255
    a3be:	c2 1a       	sub	r12, r18
    a3c0:	d2 0a       	sbc	r13, r18
    a3c2:	e2 0a       	sbc	r14, r18
    a3c4:	f2 0a       	sbc	r15, r18
    a3c6:	89 8d       	ldd	r24, Y+25	; 0x19
    a3c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a3ca:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a3cc:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a3ce:	c8 16       	cp	r12, r24
    a3d0:	d9 06       	cpc	r13, r25
    a3d2:	ea 06       	cpc	r14, r26
    a3d4:	fb 06       	cpc	r15, r27
    a3d6:	28 f0       	brcs	.+10     	; 0xa3e2 <create_chain+0xda>
    a3d8:	92 e0       	ldi	r25, 0x02	; 2
    a3da:	c9 2e       	mov	r12, r25
    a3dc:	d1 2c       	mov	r13, r1
    a3de:	e1 2c       	mov	r14, r1
    a3e0:	f1 2c       	mov	r15, r1
    a3e2:	b7 01       	movw	r22, r14
    a3e4:	a6 01       	movw	r20, r12
    a3e6:	f8 01       	movw	r30, r16
    a3e8:	80 81       	ld	r24, Z
    a3ea:	91 81       	ldd	r25, Z+1	; 0x01
    a3ec:	18 de       	rcall	.-976    	; 0xa01e <get_fat.isra.10>
    a3ee:	61 30       	cpi	r22, 0x01	; 1
    a3f0:	71 05       	cpc	r23, r1
    a3f2:	81 05       	cpc	r24, r1
    a3f4:	91 05       	cpc	r25, r1
    a3f6:	09 f4       	brne	.+2      	; 0xa3fa <create_chain+0xf2>
    a3f8:	9d c0       	rjmp	.+314    	; 0xa534 <create_chain+0x22c>
    a3fa:	6f 3f       	cpi	r22, 0xFF	; 255
    a3fc:	ff ef       	ldi	r31, 0xFF	; 255
    a3fe:	7f 07       	cpc	r23, r31
    a400:	8f 07       	cpc	r24, r31
    a402:	9f 07       	cpc	r25, r31
    a404:	09 f4       	brne	.+2      	; 0xa408 <create_chain+0x100>
    a406:	b2 cf       	rjmp	.-156    	; 0xa36c <create_chain+0x64>
    a408:	67 2b       	or	r22, r23
    a40a:	68 2b       	or	r22, r24
    a40c:	69 2b       	or	r22, r25
    a40e:	a9 f0       	breq	.+42     	; 0xa43a <create_chain+0x132>
    a410:	8d 85       	ldd	r24, Y+13	; 0x0d
    a412:	9e 85       	ldd	r25, Y+14	; 0x0e
    a414:	af 85       	ldd	r26, Y+15	; 0x0f
    a416:	b8 89       	ldd	r27, Y+16	; 0x10
    a418:	82 30       	cpi	r24, 0x02	; 2
    a41a:	91 05       	cpc	r25, r1
    a41c:	a1 05       	cpc	r26, r1
    a41e:	b1 05       	cpc	r27, r1
    a420:	88 f0       	brcs	.+34     	; 0xa444 <create_chain+0x13c>
    a422:	49 8d       	ldd	r20, Y+25	; 0x19
    a424:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a426:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a428:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a42a:	84 17       	cp	r24, r20
    a42c:	95 07       	cpc	r25, r21
    a42e:	a6 07       	cpc	r26, r22
    a430:	b7 07       	cpc	r27, r23
    a432:	40 f4       	brcc	.+16     	; 0xa444 <create_chain+0x13c>
    a434:	4c 01       	movw	r8, r24
    a436:	5d 01       	movw	r10, r26
    a438:	05 c0       	rjmp	.+10     	; 0xa444 <create_chain+0x13c>
    a43a:	c1 14       	cp	r12, r1
    a43c:	d1 04       	cpc	r13, r1
    a43e:	e1 04       	cpc	r14, r1
    a440:	f1 04       	cpc	r15, r1
    a442:	c9 f5       	brne	.+114    	; 0xa4b6 <create_chain+0x1ae>
    a444:	75 01       	movw	r14, r10
    a446:	64 01       	movw	r12, r8
    a448:	2f ef       	ldi	r18, 0xFF	; 255
    a44a:	c2 1a       	sub	r12, r18
    a44c:	d2 0a       	sbc	r13, r18
    a44e:	e2 0a       	sbc	r14, r18
    a450:	f2 0a       	sbc	r15, r18
    a452:	89 8d       	ldd	r24, Y+25	; 0x19
    a454:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a456:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a458:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a45a:	c8 16       	cp	r12, r24
    a45c:	d9 06       	cpc	r13, r25
    a45e:	ea 06       	cpc	r14, r26
    a460:	fb 06       	cpc	r15, r27
    a462:	60 f0       	brcs	.+24     	; 0xa47c <create_chain+0x174>
    a464:	82 e0       	ldi	r24, 0x02	; 2
    a466:	88 16       	cp	r8, r24
    a468:	91 04       	cpc	r9, r1
    a46a:	a1 04       	cpc	r10, r1
    a46c:	b1 04       	cpc	r11, r1
    a46e:	08 f4       	brcc	.+2      	; 0xa472 <create_chain+0x16a>
    a470:	9b cf       	rjmp	.-202    	; 0xa3a8 <create_chain+0xa0>
    a472:	82 e0       	ldi	r24, 0x02	; 2
    a474:	c8 2e       	mov	r12, r24
    a476:	d1 2c       	mov	r13, r1
    a478:	e1 2c       	mov	r14, r1
    a47a:	f1 2c       	mov	r15, r1
    a47c:	b7 01       	movw	r22, r14
    a47e:	a6 01       	movw	r20, r12
    a480:	f8 01       	movw	r30, r16
    a482:	80 81       	ld	r24, Z
    a484:	91 81       	ldd	r25, Z+1	; 0x01
    a486:	cb dd       	rcall	.-1130   	; 0xa01e <get_fat.isra.10>
    a488:	61 15       	cp	r22, r1
    a48a:	71 05       	cpc	r23, r1
    a48c:	81 05       	cpc	r24, r1
    a48e:	91 05       	cpc	r25, r1
    a490:	91 f0       	breq	.+36     	; 0xa4b6 <create_chain+0x1ae>
    a492:	61 30       	cpi	r22, 0x01	; 1
    a494:	71 05       	cpc	r23, r1
    a496:	81 05       	cpc	r24, r1
    a498:	91 05       	cpc	r25, r1
    a49a:	09 f4       	brne	.+2      	; 0xa49e <create_chain+0x196>
    a49c:	4b c0       	rjmp	.+150    	; 0xa534 <create_chain+0x22c>
    a49e:	6f 3f       	cpi	r22, 0xFF	; 255
    a4a0:	7f 4f       	sbci	r23, 0xFF	; 255
    a4a2:	8f 4f       	sbci	r24, 0xFF	; 255
    a4a4:	9f 4f       	sbci	r25, 0xFF	; 255
    a4a6:	09 f4       	brne	.+2      	; 0xa4aa <create_chain+0x1a2>
    a4a8:	61 cf       	rjmp	.-318    	; 0xa36c <create_chain+0x64>
    a4aa:	c8 14       	cp	r12, r8
    a4ac:	d9 04       	cpc	r13, r9
    a4ae:	ea 04       	cpc	r14, r10
    a4b0:	fb 04       	cpc	r15, r11
    a4b2:	51 f6       	brne	.-108    	; 0xa448 <create_chain+0x140>
    a4b4:	79 cf       	rjmp	.-270    	; 0xa3a8 <create_chain+0xa0>
    a4b6:	0f ef       	ldi	r16, 0xFF	; 255
    a4b8:	1f ef       	ldi	r17, 0xFF	; 255
    a4ba:	98 01       	movw	r18, r16
    a4bc:	b7 01       	movw	r22, r14
    a4be:	a6 01       	movw	r20, r12
    a4c0:	ce 01       	movw	r24, r28
    a4c2:	ae dc       	rcall	.-1700   	; 0x9e20 <put_fat>
    a4c4:	00 97       	sbiw	r24, 0x00	; 0
    a4c6:	99 f5       	brne	.+102    	; 0xa52e <create_chain+0x226>
    a4c8:	41 14       	cp	r4, r1
    a4ca:	51 04       	cpc	r5, r1
    a4cc:	61 04       	cpc	r6, r1
    a4ce:	71 04       	cpc	r7, r1
    a4d0:	e9 f4       	brne	.+58     	; 0xa50c <create_chain+0x204>
    a4d2:	cd 86       	std	Y+13, r12	; 0x0d
    a4d4:	de 86       	std	Y+14, r13	; 0x0e
    a4d6:	ef 86       	std	Y+15, r14	; 0x0f
    a4d8:	f8 8a       	std	Y+16, r15	; 0x10
    a4da:	89 89       	ldd	r24, Y+17	; 0x11
    a4dc:	9a 89       	ldd	r25, Y+18	; 0x12
    a4de:	ab 89       	ldd	r26, Y+19	; 0x13
    a4e0:	bc 89       	ldd	r27, Y+20	; 0x14
    a4e2:	49 8d       	ldd	r20, Y+25	; 0x19
    a4e4:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a4e6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a4e8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a4ea:	42 50       	subi	r20, 0x02	; 2
    a4ec:	51 09       	sbc	r21, r1
    a4ee:	61 09       	sbc	r22, r1
    a4f0:	71 09       	sbc	r23, r1
    a4f2:	48 17       	cp	r20, r24
    a4f4:	59 07       	cpc	r21, r25
    a4f6:	6a 07       	cpc	r22, r26
    a4f8:	7b 07       	cpc	r23, r27
    a4fa:	88 f0       	brcs	.+34     	; 0xa51e <create_chain+0x216>
    a4fc:	01 97       	sbiw	r24, 0x01	; 1
    a4fe:	a1 09       	sbc	r26, r1
    a500:	b1 09       	sbc	r27, r1
    a502:	89 8b       	std	Y+17, r24	; 0x11
    a504:	9a 8b       	std	Y+18, r25	; 0x12
    a506:	ab 8b       	std	Y+19, r26	; 0x13
    a508:	bc 8b       	std	Y+20, r27	; 0x14
    a50a:	09 c0       	rjmp	.+18     	; 0xa51e <create_chain+0x216>
    a50c:	97 01       	movw	r18, r14
    a50e:	86 01       	movw	r16, r12
    a510:	b3 01       	movw	r22, r6
    a512:	a2 01       	movw	r20, r4
    a514:	ce 01       	movw	r24, r28
    a516:	84 dc       	rcall	.-1784   	; 0x9e20 <put_fat>
    a518:	00 97       	sbiw	r24, 0x00	; 0
    a51a:	d9 f2       	breq	.-74     	; 0xa4d2 <create_chain+0x1ca>
    a51c:	08 c0       	rjmp	.+16     	; 0xa52e <create_chain+0x226>
    a51e:	8c 81       	ldd	r24, Y+4	; 0x04
    a520:	81 60       	ori	r24, 0x01	; 1
    a522:	8c 83       	std	Y+4, r24	; 0x04
    a524:	4c 2d       	mov	r20, r12
    a526:	3d 2d       	mov	r19, r13
    a528:	2e 2d       	mov	r18, r14
    a52a:	9f 2d       	mov	r25, r15
    a52c:	0b c0       	rjmp	.+22     	; 0xa544 <create_chain+0x23c>
    a52e:	01 97       	sbiw	r24, 0x01	; 1
    a530:	09 f4       	brne	.+2      	; 0xa534 <create_chain+0x22c>
    a532:	1c cf       	rjmp	.-456    	; 0xa36c <create_chain+0x64>
    a534:	41 e0       	ldi	r20, 0x01	; 1
    a536:	30 e0       	ldi	r19, 0x00	; 0
    a538:	20 e0       	ldi	r18, 0x00	; 0
    a53a:	90 e0       	ldi	r25, 0x00	; 0
    a53c:	03 c0       	rjmp	.+6      	; 0xa544 <create_chain+0x23c>
    a53e:	46 2f       	mov	r20, r22
    a540:	37 2f       	mov	r19, r23
    a542:	28 2f       	mov	r18, r24
    a544:	64 2f       	mov	r22, r20
    a546:	73 2f       	mov	r23, r19
    a548:	82 2f       	mov	r24, r18
    a54a:	cd b7       	in	r28, 0x3d	; 61
    a54c:	de b7       	in	r29, 0x3e	; 62
    a54e:	e0 e1       	ldi	r30, 0x10	; 16
    a550:	0c 94 4c e5 	jmp	0x1ca98	; 0x1ca98 <__epilogue_restores__+0x4>

0000a554 <remove_chain>:
    a554:	4f 92       	push	r4
    a556:	5f 92       	push	r5
    a558:	6f 92       	push	r6
    a55a:	7f 92       	push	r7
    a55c:	af 92       	push	r10
    a55e:	bf 92       	push	r11
    a560:	cf 92       	push	r12
    a562:	df 92       	push	r13
    a564:	ef 92       	push	r14
    a566:	ff 92       	push	r15
    a568:	0f 93       	push	r16
    a56a:	1f 93       	push	r17
    a56c:	cf 93       	push	r28
    a56e:	df 93       	push	r29
    a570:	5c 01       	movw	r10, r24
    a572:	6a 01       	movw	r12, r20
    a574:	7b 01       	movw	r14, r22
    a576:	b9 01       	movw	r22, r18
    a578:	a8 01       	movw	r20, r16
    a57a:	22 e0       	ldi	r18, 0x02	; 2
    a57c:	c2 16       	cp	r12, r18
    a57e:	d1 04       	cpc	r13, r1
    a580:	e1 04       	cpc	r14, r1
    a582:	f1 04       	cpc	r15, r1
    a584:	10 f4       	brcc	.+4      	; 0xa58a <remove_chain+0x36>
    a586:	22 e0       	ldi	r18, 0x02	; 2
    a588:	27 c0       	rjmp	.+78     	; 0xa5d8 <remove_chain+0x84>
    a58a:	fc 01       	movw	r30, r24
    a58c:	c0 81       	ld	r28, Z
    a58e:	d1 81       	ldd	r29, Z+1	; 0x01
    a590:	89 8d       	ldd	r24, Y+25	; 0x19
    a592:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a594:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a596:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a598:	c8 16       	cp	r12, r24
    a59a:	d9 06       	cpc	r13, r25
    a59c:	ea 06       	cpc	r14, r26
    a59e:	fb 06       	cpc	r15, r27
    a5a0:	90 f7       	brcc	.-28     	; 0xa586 <remove_chain+0x32>
    a5a2:	41 15       	cp	r20, r1
    a5a4:	51 05       	cpc	r21, r1
    a5a6:	61 05       	cpc	r22, r1
    a5a8:	71 05       	cpc	r23, r1
    a5aa:	41 f0       	breq	.+16     	; 0xa5bc <remove_chain+0x68>
    a5ac:	0f ef       	ldi	r16, 0xFF	; 255
    a5ae:	1f ef       	ldi	r17, 0xFF	; 255
    a5b0:	98 01       	movw	r18, r16
    a5b2:	ce 01       	movw	r24, r28
    a5b4:	35 dc       	rcall	.-1942   	; 0x9e20 <put_fat>
    a5b6:	00 97       	sbiw	r24, 0x00	; 0
    a5b8:	09 f0       	breq	.+2      	; 0xa5bc <remove_chain+0x68>
    a5ba:	4c c0       	rjmp	.+152    	; 0xa654 <remove_chain+0x100>
    a5bc:	b7 01       	movw	r22, r14
    a5be:	a6 01       	movw	r20, r12
    a5c0:	f5 01       	movw	r30, r10
    a5c2:	80 81       	ld	r24, Z
    a5c4:	91 81       	ldd	r25, Z+1	; 0x01
    a5c6:	2b dd       	rcall	.-1450   	; 0xa01e <get_fat.isra.10>
    a5c8:	2b 01       	movw	r4, r22
    a5ca:	3c 01       	movw	r6, r24
    a5cc:	61 15       	cp	r22, r1
    a5ce:	71 05       	cpc	r23, r1
    a5d0:	81 05       	cpc	r24, r1
    a5d2:	91 05       	cpc	r25, r1
    a5d4:	19 f4       	brne	.+6      	; 0xa5dc <remove_chain+0x88>
    a5d6:	20 e0       	ldi	r18, 0x00	; 0
    a5d8:	90 e0       	ldi	r25, 0x00	; 0
    a5da:	3d c0       	rjmp	.+122    	; 0xa656 <remove_chain+0x102>
    a5dc:	61 30       	cpi	r22, 0x01	; 1
    a5de:	71 05       	cpc	r23, r1
    a5e0:	81 05       	cpc	r24, r1
    a5e2:	91 05       	cpc	r25, r1
    a5e4:	81 f2       	breq	.-96     	; 0xa586 <remove_chain+0x32>
    a5e6:	6f 3f       	cpi	r22, 0xFF	; 255
    a5e8:	7f 4f       	sbci	r23, 0xFF	; 255
    a5ea:	8f 4f       	sbci	r24, 0xFF	; 255
    a5ec:	9f 4f       	sbci	r25, 0xFF	; 255
    a5ee:	81 f1       	breq	.+96     	; 0xa650 <remove_chain+0xfc>
    a5f0:	00 e0       	ldi	r16, 0x00	; 0
    a5f2:	10 e0       	ldi	r17, 0x00	; 0
    a5f4:	98 01       	movw	r18, r16
    a5f6:	b7 01       	movw	r22, r14
    a5f8:	a6 01       	movw	r20, r12
    a5fa:	ce 01       	movw	r24, r28
    a5fc:	11 dc       	rcall	.-2014   	; 0x9e20 <put_fat>
    a5fe:	00 97       	sbiw	r24, 0x00	; 0
    a600:	49 f5       	brne	.+82     	; 0xa654 <remove_chain+0x100>
    a602:	89 89       	ldd	r24, Y+17	; 0x11
    a604:	9a 89       	ldd	r25, Y+18	; 0x12
    a606:	ab 89       	ldd	r26, Y+19	; 0x13
    a608:	bc 89       	ldd	r27, Y+20	; 0x14
    a60a:	49 8d       	ldd	r20, Y+25	; 0x19
    a60c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a60e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a610:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a612:	6a 01       	movw	r12, r20
    a614:	7b 01       	movw	r14, r22
    a616:	e2 e0       	ldi	r30, 0x02	; 2
    a618:	ce 1a       	sub	r12, r30
    a61a:	d1 08       	sbc	r13, r1
    a61c:	e1 08       	sbc	r14, r1
    a61e:	f1 08       	sbc	r15, r1
    a620:	8c 15       	cp	r24, r12
    a622:	9d 05       	cpc	r25, r13
    a624:	ae 05       	cpc	r26, r14
    a626:	bf 05       	cpc	r27, r15
    a628:	50 f4       	brcc	.+20     	; 0xa63e <remove_chain+0xea>
    a62a:	01 96       	adiw	r24, 0x01	; 1
    a62c:	a1 1d       	adc	r26, r1
    a62e:	b1 1d       	adc	r27, r1
    a630:	89 8b       	std	Y+17, r24	; 0x11
    a632:	9a 8b       	std	Y+18, r25	; 0x12
    a634:	ab 8b       	std	Y+19, r26	; 0x13
    a636:	bc 8b       	std	Y+20, r27	; 0x14
    a638:	8c 81       	ldd	r24, Y+4	; 0x04
    a63a:	81 60       	ori	r24, 0x01	; 1
    a63c:	8c 83       	std	Y+4, r24	; 0x04
    a63e:	73 01       	movw	r14, r6
    a640:	62 01       	movw	r12, r4
    a642:	44 16       	cp	r4, r20
    a644:	55 06       	cpc	r5, r21
    a646:	66 06       	cpc	r6, r22
    a648:	77 06       	cpc	r7, r23
    a64a:	08 f4       	brcc	.+2      	; 0xa64e <remove_chain+0xfa>
    a64c:	b7 cf       	rjmp	.-146    	; 0xa5bc <remove_chain+0x68>
    a64e:	c3 cf       	rjmp	.-122    	; 0xa5d6 <remove_chain+0x82>
    a650:	21 e0       	ldi	r18, 0x01	; 1
    a652:	c2 cf       	rjmp	.-124    	; 0xa5d8 <remove_chain+0x84>
    a654:	28 2f       	mov	r18, r24
    a656:	82 2f       	mov	r24, r18
    a658:	df 91       	pop	r29
    a65a:	cf 91       	pop	r28
    a65c:	1f 91       	pop	r17
    a65e:	0f 91       	pop	r16
    a660:	ff 90       	pop	r15
    a662:	ef 90       	pop	r14
    a664:	df 90       	pop	r13
    a666:	cf 90       	pop	r12
    a668:	bf 90       	pop	r11
    a66a:	af 90       	pop	r10
    a66c:	7f 90       	pop	r7
    a66e:	6f 90       	pop	r6
    a670:	5f 90       	pop	r5
    a672:	4f 90       	pop	r4
    a674:	08 95       	ret

0000a676 <dir_next>:
    a676:	4f 92       	push	r4
    a678:	5f 92       	push	r5
    a67a:	6f 92       	push	r6
    a67c:	7f 92       	push	r7
    a67e:	af 92       	push	r10
    a680:	bf 92       	push	r11
    a682:	cf 92       	push	r12
    a684:	df 92       	push	r13
    a686:	ef 92       	push	r14
    a688:	ff 92       	push	r15
    a68a:	0f 93       	push	r16
    a68c:	1f 93       	push	r17
    a68e:	cf 93       	push	r28
    a690:	df 93       	push	r29
    a692:	ec 01       	movw	r28, r24
    a694:	08 81       	ld	r16, Y
    a696:	19 81       	ldd	r17, Y+1	; 0x01
    a698:	ce 84       	ldd	r12, Y+14	; 0x0e
    a69a:	df 84       	ldd	r13, Y+15	; 0x0f
    a69c:	e8 88       	ldd	r14, Y+16	; 0x10
    a69e:	f9 88       	ldd	r15, Y+17	; 0x11
    a6a0:	80 e2       	ldi	r24, 0x20	; 32
    a6a2:	c8 0e       	add	r12, r24
    a6a4:	d1 1c       	adc	r13, r1
    a6a6:	e1 1c       	adc	r14, r1
    a6a8:	f1 1c       	adc	r15, r1
    a6aa:	c1 14       	cp	r12, r1
    a6ac:	d1 04       	cpc	r13, r1
    a6ae:	e0 e2       	ldi	r30, 0x20	; 32
    a6b0:	ee 06       	cpc	r14, r30
    a6b2:	f1 04       	cpc	r15, r1
    a6b4:	20 f0       	brcs	.+8      	; 0xa6be <dir_next+0x48>
    a6b6:	1e 8a       	std	Y+22, r1	; 0x16
    a6b8:	1f 8a       	std	Y+23, r1	; 0x17
    a6ba:	18 8e       	std	Y+24, r1	; 0x18
    a6bc:	19 8e       	std	Y+25, r1	; 0x19
    a6be:	8e 89       	ldd	r24, Y+22	; 0x16
    a6c0:	9f 89       	ldd	r25, Y+23	; 0x17
    a6c2:	a8 8d       	ldd	r26, Y+24	; 0x18
    a6c4:	b9 8d       	ldd	r27, Y+25	; 0x19
    a6c6:	00 97       	sbiw	r24, 0x00	; 0
    a6c8:	a1 05       	cpc	r26, r1
    a6ca:	b1 05       	cpc	r27, r1
    a6cc:	09 f4       	brne	.+2      	; 0xa6d0 <dir_next+0x5a>
    a6ce:	a7 c0       	rjmp	.+334    	; 0xa81e <dir_next+0x1a8>
    a6d0:	5b 01       	movw	r10, r22
    a6d2:	b7 01       	movw	r22, r14
    a6d4:	a6 01       	movw	r20, r12
    a6d6:	51 70       	andi	r21, 0x01	; 1
    a6d8:	66 27       	eor	r22, r22
    a6da:	77 27       	eor	r23, r23
    a6dc:	45 2b       	or	r20, r21
    a6de:	46 2b       	or	r20, r22
    a6e0:	47 2b       	or	r20, r23
    a6e2:	09 f0       	breq	.+2      	; 0xa6e6 <dir_next+0x70>
    a6e4:	8d c0       	rjmp	.+282    	; 0xa800 <dir_next+0x18a>
    a6e6:	01 96       	adiw	r24, 0x01	; 1
    a6e8:	a1 1d       	adc	r26, r1
    a6ea:	b1 1d       	adc	r27, r1
    a6ec:	8e 8b       	std	Y+22, r24	; 0x16
    a6ee:	9f 8b       	std	Y+23, r25	; 0x17
    a6f0:	a8 8f       	std	Y+24, r26	; 0x18
    a6f2:	b9 8f       	std	Y+25, r27	; 0x19
    a6f4:	4a 89       	ldd	r20, Y+18	; 0x12
    a6f6:	5b 89       	ldd	r21, Y+19	; 0x13
    a6f8:	6c 89       	ldd	r22, Y+20	; 0x14
    a6fa:	7d 89       	ldd	r23, Y+21	; 0x15
    a6fc:	f8 01       	movw	r30, r16
    a6fe:	41 15       	cp	r20, r1
    a700:	51 05       	cpc	r21, r1
    a702:	61 05       	cpc	r22, r1
    a704:	71 05       	cpc	r23, r1
    a706:	c1 f4       	brne	.+48     	; 0xa738 <dir_next+0xc2>
    a708:	87 81       	ldd	r24, Z+7	; 0x07
    a70a:	90 85       	ldd	r25, Z+8	; 0x08
    a70c:	a0 e0       	ldi	r26, 0x00	; 0
    a70e:	b0 e0       	ldi	r27, 0x00	; 0
    a710:	b7 01       	movw	r22, r14
    a712:	a6 01       	movw	r20, r12
    a714:	35 e0       	ldi	r19, 0x05	; 5
    a716:	76 95       	lsr	r23
    a718:	67 95       	ror	r22
    a71a:	57 95       	ror	r21
    a71c:	47 95       	ror	r20
    a71e:	3a 95       	dec	r19
    a720:	d1 f7       	brne	.-12     	; 0xa716 <dir_next+0xa0>
    a722:	48 17       	cp	r20, r24
    a724:	59 07       	cpc	r21, r25
    a726:	6a 07       	cpc	r22, r26
    a728:	7b 07       	cpc	r23, r27
    a72a:	08 f4       	brcc	.+2      	; 0xa72e <dir_next+0xb8>
    a72c:	69 c0       	rjmp	.+210    	; 0xa800 <dir_next+0x18a>
    a72e:	1e 8a       	std	Y+22, r1	; 0x16
    a730:	1f 8a       	std	Y+23, r1	; 0x17
    a732:	18 8e       	std	Y+24, r1	; 0x18
    a734:	19 8e       	std	Y+25, r1	; 0x19
    a736:	73 c0       	rjmp	.+230    	; 0xa81e <dir_next+0x1a8>
    a738:	81 85       	ldd	r24, Z+9	; 0x09
    a73a:	92 85       	ldd	r25, Z+10	; 0x0a
    a73c:	01 97       	sbiw	r24, 0x01	; 1
    a73e:	a0 e0       	ldi	r26, 0x00	; 0
    a740:	b0 e0       	ldi	r27, 0x00	; 0
    a742:	26 01       	movw	r4, r12
    a744:	37 01       	movw	r6, r14
    a746:	29 e0       	ldi	r18, 0x09	; 9
    a748:	76 94       	lsr	r7
    a74a:	67 94       	ror	r6
    a74c:	57 94       	ror	r5
    a74e:	47 94       	ror	r4
    a750:	2a 95       	dec	r18
    a752:	d1 f7       	brne	.-12     	; 0xa748 <dir_next+0xd2>
    a754:	84 21       	and	r24, r4
    a756:	95 21       	and	r25, r5
    a758:	a6 21       	and	r26, r6
    a75a:	b7 21       	and	r27, r7
    a75c:	89 2b       	or	r24, r25
    a75e:	8a 2b       	or	r24, r26
    a760:	8b 2b       	or	r24, r27
    a762:	09 f0       	breq	.+2      	; 0xa766 <dir_next+0xf0>
    a764:	4d c0       	rjmp	.+154    	; 0xa800 <dir_next+0x18a>
    a766:	c8 01       	movw	r24, r16
    a768:	5a dc       	rcall	.-1868   	; 0xa01e <get_fat.isra.10>
    a76a:	2b 01       	movw	r4, r22
    a76c:	3c 01       	movw	r6, r24
    a76e:	62 30       	cpi	r22, 0x02	; 2
    a770:	71 05       	cpc	r23, r1
    a772:	81 05       	cpc	r24, r1
    a774:	91 05       	cpc	r25, r1
    a776:	18 f4       	brcc	.+6      	; 0xa77e <dir_next+0x108>
    a778:	82 e0       	ldi	r24, 0x02	; 2
    a77a:	90 e0       	ldi	r25, 0x00	; 0
    a77c:	55 c0       	rjmp	.+170    	; 0xa828 <dir_next+0x1b2>
    a77e:	8f ef       	ldi	r24, 0xFF	; 255
    a780:	48 16       	cp	r4, r24
    a782:	58 06       	cpc	r5, r24
    a784:	68 06       	cpc	r6, r24
    a786:	78 06       	cpc	r7, r24
    a788:	19 f4       	brne	.+6      	; 0xa790 <dir_next+0x11a>
    a78a:	81 e0       	ldi	r24, 0x01	; 1
    a78c:	90 e0       	ldi	r25, 0x00	; 0
    a78e:	4c c0       	rjmp	.+152    	; 0xa828 <dir_next+0x1b2>
    a790:	f8 01       	movw	r30, r16
    a792:	81 8d       	ldd	r24, Z+25	; 0x19
    a794:	92 8d       	ldd	r25, Z+26	; 0x1a
    a796:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a798:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a79a:	48 16       	cp	r4, r24
    a79c:	59 06       	cpc	r5, r25
    a79e:	6a 06       	cpc	r6, r26
    a7a0:	7b 06       	cpc	r7, r27
    a7a2:	08 f1       	brcs	.+66     	; 0xa7e6 <dir_next+0x170>
    a7a4:	ab 28       	or	r10, r11
    a7a6:	19 f2       	breq	.-122    	; 0xa72e <dir_next+0xb8>
    a7a8:	4a 89       	ldd	r20, Y+18	; 0x12
    a7aa:	5b 89       	ldd	r21, Y+19	; 0x13
    a7ac:	6c 89       	ldd	r22, Y+20	; 0x14
    a7ae:	7d 89       	ldd	r23, Y+21	; 0x15
    a7b0:	ce 01       	movw	r24, r28
    a7b2:	aa dd       	rcall	.-1196   	; 0xa308 <create_chain>
    a7b4:	2b 01       	movw	r4, r22
    a7b6:	3c 01       	movw	r6, r24
    a7b8:	61 15       	cp	r22, r1
    a7ba:	71 05       	cpc	r23, r1
    a7bc:	81 05       	cpc	r24, r1
    a7be:	91 05       	cpc	r25, r1
    a7c0:	89 f1       	breq	.+98     	; 0xa824 <dir_next+0x1ae>
    a7c2:	61 30       	cpi	r22, 0x01	; 1
    a7c4:	71 05       	cpc	r23, r1
    a7c6:	81 05       	cpc	r24, r1
    a7c8:	91 05       	cpc	r25, r1
    a7ca:	b1 f2       	breq	.-84     	; 0xa778 <dir_next+0x102>
    a7cc:	8f ef       	ldi	r24, 0xFF	; 255
    a7ce:	48 16       	cp	r4, r24
    a7d0:	58 06       	cpc	r5, r24
    a7d2:	68 06       	cpc	r6, r24
    a7d4:	78 06       	cpc	r7, r24
    a7d6:	c9 f2       	breq	.-78     	; 0xa78a <dir_next+0x114>
    a7d8:	b3 01       	movw	r22, r6
    a7da:	a2 01       	movw	r20, r4
    a7dc:	c8 01       	movw	r24, r16
    a7de:	0e 94 8b 4b 	call	0x9716	; 0x9716 <dir_clear>
    a7e2:	89 2b       	or	r24, r25
    a7e4:	91 f6       	brne	.-92     	; 0xa78a <dir_next+0x114>
    a7e6:	4a 8a       	std	Y+18, r4	; 0x12
    a7e8:	5b 8a       	std	Y+19, r5	; 0x13
    a7ea:	6c 8a       	std	Y+20, r6	; 0x14
    a7ec:	7d 8a       	std	Y+21, r7	; 0x15
    a7ee:	b3 01       	movw	r22, r6
    a7f0:	a2 01       	movw	r20, r4
    a7f2:	c8 01       	movw	r24, r16
    a7f4:	0e 94 08 48 	call	0x9010	; 0x9010 <clst2sect>
    a7f8:	6e 8b       	std	Y+22, r22	; 0x16
    a7fa:	7f 8b       	std	Y+23, r23	; 0x17
    a7fc:	88 8f       	std	Y+24, r24	; 0x18
    a7fe:	99 8f       	std	Y+25, r25	; 0x19
    a800:	ce 86       	std	Y+14, r12	; 0x0e
    a802:	df 86       	std	Y+15, r13	; 0x0f
    a804:	e8 8a       	std	Y+16, r14	; 0x10
    a806:	f9 8a       	std	Y+17, r15	; 0x11
    a808:	0b 5c       	subi	r16, 0xCB	; 203
    a80a:	1f 4f       	sbci	r17, 0xFF	; 255
    a80c:	e1 e0       	ldi	r30, 0x01	; 1
    a80e:	de 22       	and	r13, r30
    a810:	c0 0e       	add	r12, r16
    a812:	d1 1e       	adc	r13, r17
    a814:	db 8e       	std	Y+27, r13	; 0x1b
    a816:	ca 8e       	std	Y+26, r12	; 0x1a
    a818:	80 e0       	ldi	r24, 0x00	; 0
    a81a:	90 e0       	ldi	r25, 0x00	; 0
    a81c:	05 c0       	rjmp	.+10     	; 0xa828 <dir_next+0x1b2>
    a81e:	84 e0       	ldi	r24, 0x04	; 4
    a820:	90 e0       	ldi	r25, 0x00	; 0
    a822:	02 c0       	rjmp	.+4      	; 0xa828 <dir_next+0x1b2>
    a824:	87 e0       	ldi	r24, 0x07	; 7
    a826:	90 e0       	ldi	r25, 0x00	; 0
    a828:	df 91       	pop	r29
    a82a:	cf 91       	pop	r28
    a82c:	1f 91       	pop	r17
    a82e:	0f 91       	pop	r16
    a830:	ff 90       	pop	r15
    a832:	ef 90       	pop	r14
    a834:	df 90       	pop	r13
    a836:	cf 90       	pop	r12
    a838:	bf 90       	pop	r11
    a83a:	af 90       	pop	r10
    a83c:	7f 90       	pop	r7
    a83e:	6f 90       	pop	r6
    a840:	5f 90       	pop	r5
    a842:	4f 90       	pop	r4
    a844:	08 95       	ret

0000a846 <dir_alloc>:
    a846:	a0 e0       	ldi	r26, 0x00	; 0
    a848:	b0 e0       	ldi	r27, 0x00	; 0
    a84a:	e9 e2       	ldi	r30, 0x29	; 41
    a84c:	f4 e5       	ldi	r31, 0x54	; 84
    a84e:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    a852:	ec 01       	movw	r28, r24
    a854:	6b 01       	movw	r12, r22
    a856:	e8 80       	ld	r14, Y
    a858:	f9 80       	ldd	r15, Y+1	; 0x01
    a85a:	40 e0       	ldi	r20, 0x00	; 0
    a85c:	50 e0       	ldi	r21, 0x00	; 0
    a85e:	ba 01       	movw	r22, r20
    a860:	92 dc       	rcall	.-1756   	; 0xa186 <dir_sdi>
    a862:	00 97       	sbiw	r24, 0x00	; 0
    a864:	01 f5       	brne	.+64     	; 0xa8a6 <dir_alloc+0x60>
    a866:	00 e0       	ldi	r16, 0x00	; 0
    a868:	10 e0       	ldi	r17, 0x00	; 0
    a86a:	4e 89       	ldd	r20, Y+22	; 0x16
    a86c:	5f 89       	ldd	r21, Y+23	; 0x17
    a86e:	68 8d       	ldd	r22, Y+24	; 0x18
    a870:	79 8d       	ldd	r23, Y+25	; 0x19
    a872:	c7 01       	movw	r24, r14
    a874:	0e 94 33 4c 	call	0x9866	; 0x9866 <move_window>
    a878:	00 97       	sbiw	r24, 0x00	; 0
    a87a:	a9 f4       	brne	.+42     	; 0xa8a6 <dir_alloc+0x60>
    a87c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a87e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a880:	20 81       	ld	r18, Z
    a882:	25 3e       	cpi	r18, 0xE5	; 229
    a884:	11 f0       	breq	.+4      	; 0xa88a <dir_alloc+0x44>
    a886:	21 11       	cpse	r18, r1
    a888:	06 c0       	rjmp	.+12     	; 0xa896 <dir_alloc+0x50>
    a88a:	0f 5f       	subi	r16, 0xFF	; 255
    a88c:	1f 4f       	sbci	r17, 0xFF	; 255
    a88e:	0c 15       	cp	r16, r12
    a890:	1d 05       	cpc	r17, r13
    a892:	19 f4       	brne	.+6      	; 0xa89a <dir_alloc+0x54>
    a894:	0d c0       	rjmp	.+26     	; 0xa8b0 <dir_alloc+0x6a>
    a896:	00 e0       	ldi	r16, 0x00	; 0
    a898:	10 e0       	ldi	r17, 0x00	; 0
    a89a:	61 e0       	ldi	r22, 0x01	; 1
    a89c:	70 e0       	ldi	r23, 0x00	; 0
    a89e:	ce 01       	movw	r24, r28
    a8a0:	ea de       	rcall	.-556    	; 0xa676 <dir_next>
    a8a2:	00 97       	sbiw	r24, 0x00	; 0
    a8a4:	11 f3       	breq	.-60     	; 0xa86a <dir_alloc+0x24>
    a8a6:	84 30       	cpi	r24, 0x04	; 4
    a8a8:	91 05       	cpc	r25, r1
    a8aa:	11 f4       	brne	.+4      	; 0xa8b0 <dir_alloc+0x6a>
    a8ac:	87 e0       	ldi	r24, 0x07	; 7
    a8ae:	90 e0       	ldi	r25, 0x00	; 0
    a8b0:	cd b7       	in	r28, 0x3d	; 61
    a8b2:	de b7       	in	r29, 0x3e	; 62
    a8b4:	e8 e0       	ldi	r30, 0x08	; 8
    a8b6:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

0000a8ba <dir_read>:
    a8ba:	a0 e0       	ldi	r26, 0x00	; 0
    a8bc:	b0 e0       	ldi	r27, 0x00	; 0
    a8be:	e3 e6       	ldi	r30, 0x63	; 99
    a8c0:	f4 e5       	ldi	r31, 0x54	; 84
    a8c2:	0c 94 32 e5 	jmp	0x1ca64	; 0x1ca64 <__prologue_saves__+0x8>
    a8c6:	ec 01       	movw	r28, r24
    a8c8:	7b 01       	movw	r14, r22
    a8ca:	a8 80       	ld	r10, Y
    a8cc:	b9 80       	ldd	r11, Y+1	; 0x01
    a8ce:	dd 24       	eor	r13, r13
    a8d0:	da 94       	dec	r13
    a8d2:	1f ef       	ldi	r17, 0xFF	; 255
    a8d4:	84 e0       	ldi	r24, 0x04	; 4
    a8d6:	90 e0       	ldi	r25, 0x00	; 0
    a8d8:	ad e0       	ldi	r26, 0x0D	; 13
    a8da:	ca 2e       	mov	r12, r26
    a8dc:	4e 89       	ldd	r20, Y+22	; 0x16
    a8de:	5f 89       	ldd	r21, Y+23	; 0x17
    a8e0:	68 8d       	ldd	r22, Y+24	; 0x18
    a8e2:	79 8d       	ldd	r23, Y+25	; 0x19
    a8e4:	41 15       	cp	r20, r1
    a8e6:	51 05       	cpc	r21, r1
    a8e8:	61 05       	cpc	r22, r1
    a8ea:	71 05       	cpc	r23, r1
    a8ec:	09 f4       	brne	.+2      	; 0xa8f0 <dir_read+0x36>
    a8ee:	a3 c0       	rjmp	.+326    	; 0xaa36 <dir_read+0x17c>
    a8f0:	c5 01       	movw	r24, r10
    a8f2:	0e 94 33 4c 	call	0x9866	; 0x9866 <move_window>
    a8f6:	00 97       	sbiw	r24, 0x00	; 0
    a8f8:	09 f0       	breq	.+2      	; 0xa8fc <dir_read+0x42>
    a8fa:	9f c0       	rjmp	.+318    	; 0xaa3a <dir_read+0x180>
    a8fc:	aa 8d       	ldd	r26, Y+26	; 0x1a
    a8fe:	bb 8d       	ldd	r27, Y+27	; 0x1b
    a900:	0c 91       	ld	r16, X
    a902:	00 23       	and	r16, r16
    a904:	09 f4       	brne	.+2      	; 0xa908 <dir_read+0x4e>
    a906:	a1 c0       	rjmp	.+322    	; 0xaa4a <dir_read+0x190>
    a908:	1b 96       	adiw	r26, 0x0b	; 11
    a90a:	8c 91       	ld	r24, X
    a90c:	1b 97       	sbiw	r26, 0x0b	; 11
    a90e:	8f 73       	andi	r24, 0x3F	; 63
    a910:	8c 83       	std	Y+4, r24	; 0x04
    a912:	05 3e       	cpi	r16, 0xE5	; 229
    a914:	09 f4       	brne	.+2      	; 0xa918 <dir_read+0x5e>
    a916:	86 c0       	rjmp	.+268    	; 0xaa24 <dir_read+0x16a>
    a918:	0e 32       	cpi	r16, 0x2E	; 46
    a91a:	09 f4       	brne	.+2      	; 0xa91e <dir_read+0x64>
    a91c:	83 c0       	rjmp	.+262    	; 0xaa24 <dir_read+0x16a>
    a91e:	21 e0       	ldi	r18, 0x01	; 1
    a920:	30 e0       	ldi	r19, 0x00	; 0
    a922:	98 2f       	mov	r25, r24
    a924:	9f 71       	andi	r25, 0x1F	; 31
    a926:	98 30       	cpi	r25, 0x08	; 8
    a928:	11 f0       	breq	.+4      	; 0xa92e <dir_read+0x74>
    a92a:	20 e0       	ldi	r18, 0x00	; 0
    a92c:	30 e0       	ldi	r19, 0x00	; 0
    a92e:	2e 15       	cp	r18, r14
    a930:	3f 05       	cpc	r19, r15
    a932:	09 f0       	breq	.+2      	; 0xa936 <dir_read+0x7c>
    a934:	77 c0       	rjmp	.+238    	; 0xaa24 <dir_read+0x16a>
    a936:	8f 30       	cpi	r24, 0x0F	; 15
    a938:	09 f0       	breq	.+2      	; 0xa93c <dir_read+0x82>
    a93a:	64 c0       	rjmp	.+200    	; 0xaa04 <dir_read+0x14a>
    a93c:	06 ff       	sbrs	r16, 6
    a93e:	0d c0       	rjmp	.+26     	; 0xa95a <dir_read+0xa0>
    a940:	1d 96       	adiw	r26, 0x0d	; 13
    a942:	8c 91       	ld	r24, X
    a944:	1d 97       	sbiw	r26, 0x0d	; 13
    a946:	0f 7b       	andi	r16, 0xBF	; 191
    a948:	4e 85       	ldd	r20, Y+14	; 0x0e
    a94a:	5f 85       	ldd	r21, Y+15	; 0x0f
    a94c:	68 89       	ldd	r22, Y+16	; 0x10
    a94e:	79 89       	ldd	r23, Y+17	; 0x11
    a950:	48 a7       	std	Y+40, r20	; 0x28
    a952:	59 a7       	std	Y+41, r21	; 0x29
    a954:	6a a7       	std	Y+42, r22	; 0x2a
    a956:	7b a7       	std	Y+43, r23	; 0x2b
    a958:	03 c0       	rjmp	.+6      	; 0xa960 <dir_read+0xa6>
    a95a:	10 13       	cpse	r17, r16
    a95c:	63 c0       	rjmp	.+198    	; 0xaa24 <dir_read+0x16a>
    a95e:	8d 2d       	mov	r24, r13
    a960:	1d 96       	adiw	r26, 0x0d	; 13
    a962:	dc 90       	ld	r13, X
    a964:	1d 97       	sbiw	r26, 0x0d	; 13
    a966:	d8 12       	cpse	r13, r24
    a968:	5c c0       	rjmp	.+184    	; 0xaa22 <dir_read+0x168>
    a96a:	5a 96       	adiw	r26, 0x1a	; 26
    a96c:	8d 91       	ld	r24, X+
    a96e:	9c 91       	ld	r25, X
    a970:	5b 97       	sbiw	r26, 0x1b	; 27
    a972:	89 2b       	or	r24, r25
    a974:	09 f0       	breq	.+2      	; 0xa978 <dir_read+0xbe>
    a976:	56 c0       	rjmp	.+172    	; 0xaa24 <dir_read+0x16a>
    a978:	f5 01       	movw	r30, r10
    a97a:	63 85       	ldd	r22, Z+11	; 0x0b
    a97c:	74 85       	ldd	r23, Z+12	; 0x0c
    a97e:	8c 91       	ld	r24, X
    a980:	90 e0       	ldi	r25, 0x00	; 0
    a982:	8f 7b       	andi	r24, 0xBF	; 191
    a984:	01 97       	sbiw	r24, 0x01	; 1
    a986:	c8 9e       	mul	r12, r24
    a988:	90 01       	movw	r18, r0
    a98a:	c9 9e       	mul	r12, r25
    a98c:	30 0d       	add	r19, r0
    a98e:	11 24       	eor	r1, r1
    a990:	fd e4       	ldi	r31, 0x4D	; 77
    a992:	6f 2e       	mov	r6, r31
    a994:	f3 e0       	ldi	r31, 0x03	; 3
    a996:	7f 2e       	mov	r7, r31
    a998:	81 e0       	ldi	r24, 0x01	; 1
    a99a:	90 e0       	ldi	r25, 0x00	; 0
    a99c:	f3 01       	movw	r30, r6
    a99e:	41 91       	ld	r20, Z+
    a9a0:	3f 01       	movw	r6, r30
    a9a2:	4d 01       	movw	r8, r26
    a9a4:	84 0e       	add	r8, r20
    a9a6:	91 1c       	adc	r9, r1
    a9a8:	f4 01       	movw	r30, r8
    a9aa:	40 81       	ld	r20, Z
    a9ac:	51 81       	ldd	r21, Z+1	; 0x01
    a9ae:	00 97       	sbiw	r24, 0x00	; 0
    a9b0:	81 f0       	breq	.+32     	; 0xa9d2 <dir_read+0x118>
    a9b2:	2f 3f       	cpi	r18, 0xFF	; 255
    a9b4:	31 05       	cpc	r19, r1
    a9b6:	09 f0       	breq	.+2      	; 0xa9ba <dir_read+0x100>
    a9b8:	a8 f5       	brcc	.+106    	; 0xaa24 <dir_read+0x16a>
    a9ba:	c9 01       	movw	r24, r18
    a9bc:	88 0f       	add	r24, r24
    a9be:	99 1f       	adc	r25, r25
    a9c0:	86 0f       	add	r24, r22
    a9c2:	97 1f       	adc	r25, r23
    a9c4:	fc 01       	movw	r30, r24
    a9c6:	51 83       	std	Z+1, r21	; 0x01
    a9c8:	40 83       	st	Z, r20
    a9ca:	ca 01       	movw	r24, r20
    a9cc:	2f 5f       	subi	r18, 0xFF	; 255
    a9ce:	3f 4f       	sbci	r19, 0xFF	; 255
    a9d0:	03 c0       	rjmp	.+6      	; 0xa9d8 <dir_read+0x11e>
    a9d2:	4f 3f       	cpi	r20, 0xFF	; 255
    a9d4:	5f 4f       	sbci	r21, 0xFF	; 255
    a9d6:	31 f5       	brne	.+76     	; 0xaa24 <dir_read+0x16a>
    a9d8:	4a e5       	ldi	r20, 0x5A	; 90
    a9da:	64 16       	cp	r6, r20
    a9dc:	43 e0       	ldi	r20, 0x03	; 3
    a9de:	74 06       	cpc	r7, r20
    a9e0:	e9 f6       	brne	.-70     	; 0xa99c <dir_read+0xe2>
    a9e2:	4c 91       	ld	r20, X
    a9e4:	46 ff       	sbrs	r20, 6
    a9e6:	2e c0       	rjmp	.+92     	; 0xaa44 <dir_read+0x18a>
    a9e8:	89 2b       	or	r24, r25
    a9ea:	61 f1       	breq	.+88     	; 0xaa44 <dir_read+0x18a>
    a9ec:	2f 3f       	cpi	r18, 0xFF	; 255
    a9ee:	31 05       	cpc	r19, r1
    a9f0:	09 f0       	breq	.+2      	; 0xa9f4 <dir_read+0x13a>
    a9f2:	c0 f4       	brcc	.+48     	; 0xaa24 <dir_read+0x16a>
    a9f4:	22 0f       	add	r18, r18
    a9f6:	33 1f       	adc	r19, r19
    a9f8:	fb 01       	movw	r30, r22
    a9fa:	e2 0f       	add	r30, r18
    a9fc:	f3 1f       	adc	r31, r19
    a9fe:	11 82       	std	Z+1, r1	; 0x01
    aa00:	10 82       	st	Z, r1
    aa02:	20 c0       	rjmp	.+64     	; 0xaa44 <dir_read+0x18a>
    aa04:	11 11       	cpse	r17, r1
    aa06:	05 c0       	rjmp	.+10     	; 0xaa12 <dir_read+0x158>
    aa08:	cd 01       	movw	r24, r26
    aa0a:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <sum_sfn>
    aa0e:	d8 16       	cp	r13, r24
    aa10:	f9 f0       	breq	.+62     	; 0xaa50 <dir_read+0x196>
    aa12:	8f ef       	ldi	r24, 0xFF	; 255
    aa14:	9f ef       	ldi	r25, 0xFF	; 255
    aa16:	dc 01       	movw	r26, r24
    aa18:	88 a7       	std	Y+40, r24	; 0x28
    aa1a:	99 a7       	std	Y+41, r25	; 0x29
    aa1c:	aa a7       	std	Y+42, r26	; 0x2a
    aa1e:	bb a7       	std	Y+43, r27	; 0x2b
    aa20:	17 c0       	rjmp	.+46     	; 0xaa50 <dir_read+0x196>
    aa22:	d8 2e       	mov	r13, r24
    aa24:	1f ef       	ldi	r17, 0xFF	; 255
    aa26:	60 e0       	ldi	r22, 0x00	; 0
    aa28:	70 e0       	ldi	r23, 0x00	; 0
    aa2a:	ce 01       	movw	r24, r28
    aa2c:	24 de       	rcall	.-952    	; 0xa676 <dir_next>
    aa2e:	00 97       	sbiw	r24, 0x00	; 0
    aa30:	09 f4       	brne	.+2      	; 0xaa34 <dir_read+0x17a>
    aa32:	54 cf       	rjmp	.-344    	; 0xa8dc <dir_read+0x22>
    aa34:	02 c0       	rjmp	.+4      	; 0xaa3a <dir_read+0x180>
    aa36:	00 97       	sbiw	r24, 0x00	; 0
    aa38:	59 f0       	breq	.+22     	; 0xaa50 <dir_read+0x196>
    aa3a:	1e 8a       	std	Y+22, r1	; 0x16
    aa3c:	1f 8a       	std	Y+23, r1	; 0x17
    aa3e:	18 8e       	std	Y+24, r1	; 0x18
    aa40:	19 8e       	std	Y+25, r1	; 0x19
    aa42:	08 c0       	rjmp	.+16     	; 0xaa54 <dir_read+0x19a>
    aa44:	1f ef       	ldi	r17, 0xFF	; 255
    aa46:	10 0f       	add	r17, r16
    aa48:	ee cf       	rjmp	.-36     	; 0xaa26 <dir_read+0x16c>
    aa4a:	84 e0       	ldi	r24, 0x04	; 4
    aa4c:	90 e0       	ldi	r25, 0x00	; 0
    aa4e:	f5 cf       	rjmp	.-22     	; 0xaa3a <dir_read+0x180>
    aa50:	80 e0       	ldi	r24, 0x00	; 0
    aa52:	90 e0       	ldi	r25, 0x00	; 0
    aa54:	cd b7       	in	r28, 0x3d	; 61
    aa56:	de b7       	in	r29, 0x3e	; 62
    aa58:	ee e0       	ldi	r30, 0x0E	; 14
    aa5a:	0c 94 4e e5 	jmp	0x1ca9c	; 0x1ca9c <__epilogue_restores__+0x8>

0000aa5e <dir_remove>:
    aa5e:	a0 e0       	ldi	r26, 0x00	; 0
    aa60:	b0 e0       	ldi	r27, 0x00	; 0
    aa62:	e5 e3       	ldi	r30, 0x35	; 53
    aa64:	f5 e5       	ldi	r31, 0x55	; 85
    aa66:	0c 94 36 e5 	jmp	0x1ca6c	; 0x1ca6c <__prologue_saves__+0x10>
    aa6a:	ec 01       	movw	r28, r24
    aa6c:	08 81       	ld	r16, Y
    aa6e:	19 81       	ldd	r17, Y+1	; 0x01
    aa70:	ce 84       	ldd	r12, Y+14	; 0x0e
    aa72:	df 84       	ldd	r13, Y+15	; 0x0f
    aa74:	e8 88       	ldd	r14, Y+16	; 0x10
    aa76:	f9 88       	ldd	r15, Y+17	; 0x11
    aa78:	48 a5       	ldd	r20, Y+40	; 0x28
    aa7a:	59 a5       	ldd	r21, Y+41	; 0x29
    aa7c:	6a a5       	ldd	r22, Y+42	; 0x2a
    aa7e:	7b a5       	ldd	r23, Y+43	; 0x2b
    aa80:	4f 3f       	cpi	r20, 0xFF	; 255
    aa82:	8f ef       	ldi	r24, 0xFF	; 255
    aa84:	58 07       	cpc	r21, r24
    aa86:	68 07       	cpc	r22, r24
    aa88:	78 07       	cpc	r23, r24
    aa8a:	29 f4       	brne	.+10     	; 0xaa96 <dir_remove+0x38>
    aa8c:	85 ee       	ldi	r24, 0xE5	; 229
    aa8e:	b8 2e       	mov	r11, r24
    aa90:	aa 24       	eor	r10, r10
    aa92:	a3 94       	inc	r10
    aa94:	19 c0       	rjmp	.+50     	; 0xaac8 <dir_remove+0x6a>
    aa96:	ce 01       	movw	r24, r28
    aa98:	76 db       	rcall	.-2324   	; 0xa186 <dir_sdi>
    aa9a:	00 97       	sbiw	r24, 0x00	; 0
    aa9c:	19 f5       	brne	.+70     	; 0xaae4 <dir_remove+0x86>
    aa9e:	f6 cf       	rjmp	.-20     	; 0xaa8c <dir_remove+0x2e>
    aaa0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    aaa2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    aaa4:	b0 82       	st	Z, r11
    aaa6:	f8 01       	movw	r30, r16
    aaa8:	a3 82       	std	Z+3, r10	; 0x03
    aaaa:	4e 85       	ldd	r20, Y+14	; 0x0e
    aaac:	5f 85       	ldd	r21, Y+15	; 0x0f
    aaae:	68 89       	ldd	r22, Y+16	; 0x10
    aab0:	79 89       	ldd	r23, Y+17	; 0x11
    aab2:	4c 15       	cp	r20, r12
    aab4:	5d 05       	cpc	r21, r13
    aab6:	6e 05       	cpc	r22, r14
    aab8:	7f 05       	cpc	r23, r15
    aaba:	a0 f4       	brcc	.+40     	; 0xaae4 <dir_remove+0x86>
    aabc:	60 e0       	ldi	r22, 0x00	; 0
    aabe:	70 e0       	ldi	r23, 0x00	; 0
    aac0:	ce 01       	movw	r24, r28
    aac2:	d9 dd       	rcall	.-1102   	; 0xa676 <dir_next>
    aac4:	00 97       	sbiw	r24, 0x00	; 0
    aac6:	49 f4       	brne	.+18     	; 0xaada <dir_remove+0x7c>
    aac8:	4e 89       	ldd	r20, Y+22	; 0x16
    aaca:	5f 89       	ldd	r21, Y+23	; 0x17
    aacc:	68 8d       	ldd	r22, Y+24	; 0x18
    aace:	79 8d       	ldd	r23, Y+25	; 0x19
    aad0:	c8 01       	movw	r24, r16
    aad2:	0e 94 33 4c 	call	0x9866	; 0x9866 <move_window>
    aad6:	00 97       	sbiw	r24, 0x00	; 0
    aad8:	19 f3       	breq	.-58     	; 0xaaa0 <dir_remove+0x42>
    aada:	84 30       	cpi	r24, 0x04	; 4
    aadc:	91 05       	cpc	r25, r1
    aade:	11 f4       	brne	.+4      	; 0xaae4 <dir_remove+0x86>
    aae0:	82 e0       	ldi	r24, 0x02	; 2
    aae2:	90 e0       	ldi	r25, 0x00	; 0
    aae4:	cd b7       	in	r28, 0x3d	; 61
    aae6:	de b7       	in	r29, 0x3e	; 62
    aae8:	ea e0       	ldi	r30, 0x0A	; 10
    aaea:	0c 94 52 e5 	jmp	0x1caa4	; 0x1caa4 <__epilogue_restores__+0x10>

0000aaee <dir_find>:
    aaee:	ac e0       	ldi	r26, 0x0C	; 12
    aaf0:	b0 e0       	ldi	r27, 0x00	; 0
    aaf2:	ed e7       	ldi	r30, 0x7D	; 125
    aaf4:	f5 e5       	ldi	r31, 0x55	; 85
    aaf6:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    aafa:	9c 87       	std	Y+12, r25	; 0x0c
    aafc:	8b 87       	std	Y+11, r24	; 0x0b
    aafe:	fc 01       	movw	r30, r24
    ab00:	01 90       	ld	r0, Z+
    ab02:	f0 81       	ld	r31, Z
    ab04:	e0 2d       	mov	r30, r0
    ab06:	fc 83       	std	Y+4, r31	; 0x04
    ab08:	eb 83       	std	Y+3, r30	; 0x03
    ab0a:	40 e0       	ldi	r20, 0x00	; 0
    ab0c:	50 e0       	ldi	r21, 0x00	; 0
    ab0e:	ba 01       	movw	r22, r20
    ab10:	3a db       	rcall	.-2444   	; 0xa186 <dir_sdi>
    ab12:	00 97       	sbiw	r24, 0x00	; 0
    ab14:	09 f0       	breq	.+2      	; 0xab18 <dir_find+0x2a>
    ab16:	e7 c0       	rjmp	.+462    	; 0xace6 <dir_find+0x1f8>
    ab18:	8f ef       	ldi	r24, 0xFF	; 255
    ab1a:	9f ef       	ldi	r25, 0xFF	; 255
    ab1c:	dc 01       	movw	r26, r24
    ab1e:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab20:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab22:	80 a7       	std	Z+40, r24	; 0x28
    ab24:	91 a7       	std	Z+41, r25	; 0x29
    ab26:	a2 a7       	std	Z+42, r26	; 0x2a
    ab28:	b3 a7       	std	Z+43, r27	; 0x2b
    ab2a:	0f ef       	ldi	r16, 0xFF	; 255
    ab2c:	1f ef       	ldi	r17, 0xFF	; 255
    ab2e:	44 24       	eor	r4, r4
    ab30:	4a 94       	dec	r4
    ab32:	54 2c       	mov	r5, r4
    ab34:	32 01       	movw	r6, r4
    ab36:	7c 96       	adiw	r30, 0x1c	; 28
    ab38:	fa 87       	std	Y+10, r31	; 0x0a
    ab3a:	e9 87       	std	Y+9, r30	; 0x09
    ab3c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab3e:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab40:	46 89       	ldd	r20, Z+22	; 0x16
    ab42:	57 89       	ldd	r21, Z+23	; 0x17
    ab44:	60 8d       	ldd	r22, Z+24	; 0x18
    ab46:	71 8d       	ldd	r23, Z+25	; 0x19
    ab48:	8b 81       	ldd	r24, Y+3	; 0x03
    ab4a:	9c 81       	ldd	r25, Y+4	; 0x04
    ab4c:	0e 94 33 4c 	call	0x9866	; 0x9866 <move_window>
    ab50:	00 97       	sbiw	r24, 0x00	; 0
    ab52:	09 f0       	breq	.+2      	; 0xab56 <dir_find+0x68>
    ab54:	c8 c0       	rjmp	.+400    	; 0xace6 <dir_find+0x1f8>
    ab56:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab58:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab5a:	e2 8c       	ldd	r14, Z+26	; 0x1a
    ab5c:	f3 8c       	ldd	r15, Z+27	; 0x1b
    ab5e:	f7 01       	movw	r30, r14
    ab60:	d0 80       	ld	r13, Z
    ab62:	dd 20       	and	r13, r13
    ab64:	09 f4       	brne	.+2      	; 0xab68 <dir_find+0x7a>
    ab66:	c1 c0       	rjmp	.+386    	; 0xacea <dir_find+0x1fc>
    ab68:	93 85       	ldd	r25, Z+11	; 0x0b
    ab6a:	89 2f       	mov	r24, r25
    ab6c:	8f 73       	andi	r24, 0x3F	; 63
    ab6e:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab70:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab72:	84 83       	std	Z+4, r24	; 0x04
    ab74:	f5 ee       	ldi	r31, 0xE5	; 229
    ab76:	df 16       	cp	r13, r31
    ab78:	09 f4       	brne	.+2      	; 0xab7c <dir_find+0x8e>
    ab7a:	a6 c0       	rjmp	.+332    	; 0xacc8 <dir_find+0x1da>
    ab7c:	93 ff       	sbrs	r25, 3
    ab7e:	04 c0       	rjmp	.+8      	; 0xab88 <dir_find+0x9a>
    ab80:	8f 30       	cpi	r24, 0x0F	; 15
    ab82:	09 f0       	breq	.+2      	; 0xab86 <dir_find+0x98>
    ab84:	a1 c0       	rjmp	.+322    	; 0xacc8 <dir_find+0x1da>
    ab86:	03 c0       	rjmp	.+6      	; 0xab8e <dir_find+0xa0>
    ab88:	8f 30       	cpi	r24, 0x0F	; 15
    ab8a:	09 f0       	breq	.+2      	; 0xab8e <dir_find+0xa0>
    ab8c:	88 c0       	rjmp	.+272    	; 0xac9e <dir_find+0x1b0>
    ab8e:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab90:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab92:	87 a1       	ldd	r24, Z+39	; 0x27
    ab94:	86 fd       	sbrc	r24, 6
    ab96:	9f c0       	rjmp	.+318    	; 0xacd6 <dir_find+0x1e8>
    ab98:	d6 fe       	sbrs	r13, 6
    ab9a:	10 c0       	rjmp	.+32     	; 0xabbc <dir_find+0xce>
    ab9c:	f7 01       	movw	r30, r14
    ab9e:	05 85       	ldd	r16, Z+13	; 0x0d
    aba0:	fd 2d       	mov	r31, r13
    aba2:	ff 7b       	andi	r31, 0xBF	; 191
    aba4:	df 2e       	mov	r13, r31
    aba6:	eb 85       	ldd	r30, Y+11	; 0x0b
    aba8:	fc 85       	ldd	r31, Y+12	; 0x0c
    abaa:	86 85       	ldd	r24, Z+14	; 0x0e
    abac:	97 85       	ldd	r25, Z+15	; 0x0f
    abae:	a0 89       	ldd	r26, Z+16	; 0x10
    abb0:	b1 89       	ldd	r27, Z+17	; 0x11
    abb2:	80 a7       	std	Z+40, r24	; 0x28
    abb4:	91 a7       	std	Z+41, r25	; 0x29
    abb6:	a2 a7       	std	Z+42, r26	; 0x2a
    abb8:	b3 a7       	std	Z+43, r27	; 0x2b
    abba:	02 c0       	rjmp	.+4      	; 0xabc0 <dir_find+0xd2>
    abbc:	1d 11       	cpse	r17, r13
    abbe:	8a c0       	rjmp	.+276    	; 0xacd4 <dir_find+0x1e6>
    abc0:	f7 01       	movw	r30, r14
    abc2:	c5 84       	ldd	r12, Z+13	; 0x0d
    abc4:	c0 12       	cpse	r12, r16
    abc6:	86 c0       	rjmp	.+268    	; 0xacd4 <dir_find+0x1e6>
    abc8:	82 8d       	ldd	r24, Z+26	; 0x1a
    abca:	93 8d       	ldd	r25, Z+27	; 0x1b
    abcc:	89 2b       	or	r24, r25
    abce:	09 f0       	breq	.+2      	; 0xabd2 <dir_find+0xe4>
    abd0:	91 c0       	rjmp	.+290    	; 0xacf4 <dir_find+0x206>
    abd2:	eb 81       	ldd	r30, Y+3	; 0x03
    abd4:	fc 81       	ldd	r31, Y+4	; 0x04
    abd6:	03 84       	ldd	r0, Z+11	; 0x0b
    abd8:	f4 85       	ldd	r31, Z+12	; 0x0c
    abda:	e0 2d       	mov	r30, r0
    abdc:	fe 83       	std	Y+6, r31	; 0x06
    abde:	ed 83       	std	Y+5, r30	; 0x05
    abe0:	f7 01       	movw	r30, r14
    abe2:	80 81       	ld	r24, Z
    abe4:	8f 73       	andi	r24, 0x3F	; 63
    abe6:	90 e0       	ldi	r25, 0x00	; 0
    abe8:	01 97       	sbiw	r24, 0x01	; 1
    abea:	fd e0       	ldi	r31, 0x0D	; 13
    abec:	f8 9f       	mul	r31, r24
    abee:	80 01       	movw	r16, r0
    abf0:	f9 9f       	mul	r31, r25
    abf2:	10 0d       	add	r17, r0
    abf4:	11 24       	eor	r1, r1
    abf6:	2d e4       	ldi	r18, 0x4D	; 77
    abf8:	33 e0       	ldi	r19, 0x03	; 3
    abfa:	3a 83       	std	Y+2, r19	; 0x02
    abfc:	29 83       	std	Y+1, r18	; 0x01
    abfe:	81 e0       	ldi	r24, 0x01	; 1
    ac00:	90 e0       	ldi	r25, 0x00	; 0
    ac02:	e9 81       	ldd	r30, Y+1	; 0x01
    ac04:	fa 81       	ldd	r31, Y+2	; 0x02
    ac06:	21 91       	ld	r18, Z+
    ac08:	fa 83       	std	Y+2, r31	; 0x02
    ac0a:	e9 83       	std	Y+1, r30	; 0x01
    ac0c:	f7 01       	movw	r30, r14
    ac0e:	e2 0f       	add	r30, r18
    ac10:	f1 1d       	adc	r31, r1
    ac12:	20 80       	ld	r2, Z
    ac14:	31 80       	ldd	r3, Z+1	; 0x01
    ac16:	00 97       	sbiw	r24, 0x00	; 0
    ac18:	39 f1       	breq	.+78     	; 0xac68 <dir_find+0x17a>
    ac1a:	0f 3f       	cpi	r16, 0xFF	; 255
    ac1c:	11 05       	cpc	r17, r1
    ac1e:	11 f0       	breq	.+4      	; 0xac24 <dir_find+0x136>
    ac20:	08 f0       	brcs	.+2      	; 0xac24 <dir_find+0x136>
    ac22:	68 c0       	rjmp	.+208    	; 0xacf4 <dir_find+0x206>
    ac24:	b1 01       	movw	r22, r2
    ac26:	80 e0       	ldi	r24, 0x00	; 0
    ac28:	90 e0       	ldi	r25, 0x00	; 0
    ac2a:	0e 94 60 6a 	call	0xd4c0	; 0xd4c0 <ff_wtoupper>
    ac2e:	4b 01       	movw	r8, r22
    ac30:	5c 01       	movw	r10, r24
    ac32:	98 01       	movw	r18, r16
    ac34:	2f 5f       	subi	r18, 0xFF	; 255
    ac36:	3f 4f       	sbci	r19, 0xFF	; 255
    ac38:	38 87       	std	Y+8, r19	; 0x08
    ac3a:	2f 83       	std	Y+7, r18	; 0x07
    ac3c:	00 0f       	add	r16, r16
    ac3e:	11 1f       	adc	r17, r17
    ac40:	ed 81       	ldd	r30, Y+5	; 0x05
    ac42:	fe 81       	ldd	r31, Y+6	; 0x06
    ac44:	e0 0f       	add	r30, r16
    ac46:	f1 1f       	adc	r31, r17
    ac48:	60 81       	ld	r22, Z
    ac4a:	71 81       	ldd	r23, Z+1	; 0x01
    ac4c:	80 e0       	ldi	r24, 0x00	; 0
    ac4e:	90 e0       	ldi	r25, 0x00	; 0
    ac50:	0e 94 60 6a 	call	0xd4c0	; 0xd4c0 <ff_wtoupper>
    ac54:	86 16       	cp	r8, r22
    ac56:	97 06       	cpc	r9, r23
    ac58:	a8 06       	cpc	r10, r24
    ac5a:	b9 06       	cpc	r11, r25
    ac5c:	09 f0       	breq	.+2      	; 0xac60 <dir_find+0x172>
    ac5e:	4a c0       	rjmp	.+148    	; 0xacf4 <dir_find+0x206>
    ac60:	c1 01       	movw	r24, r2
    ac62:	0f 81       	ldd	r16, Y+7	; 0x07
    ac64:	18 85       	ldd	r17, Y+8	; 0x08
    ac66:	05 c0       	rjmp	.+10     	; 0xac72 <dir_find+0x184>
    ac68:	3f ef       	ldi	r19, 0xFF	; 255
    ac6a:	23 16       	cp	r2, r19
    ac6c:	33 06       	cpc	r3, r19
    ac6e:	09 f0       	breq	.+2      	; 0xac72 <dir_find+0x184>
    ac70:	41 c0       	rjmp	.+130    	; 0xacf4 <dir_find+0x206>
    ac72:	e9 81       	ldd	r30, Y+1	; 0x01
    ac74:	fa 81       	ldd	r31, Y+2	; 0x02
    ac76:	ea 55       	subi	r30, 0x5A	; 90
    ac78:	f3 40       	sbci	r31, 0x03	; 3
    ac7a:	19 f6       	brne	.-122    	; 0xac02 <dir_find+0x114>
    ac7c:	f7 01       	movw	r30, r14
    ac7e:	20 81       	ld	r18, Z
    ac80:	26 ff       	sbrs	r18, 6
    ac82:	3a c0       	rjmp	.+116    	; 0xacf8 <dir_find+0x20a>
    ac84:	89 2b       	or	r24, r25
    ac86:	c1 f1       	breq	.+112    	; 0xacf8 <dir_find+0x20a>
    ac88:	00 0f       	add	r16, r16
    ac8a:	11 1f       	adc	r17, r17
    ac8c:	ed 81       	ldd	r30, Y+5	; 0x05
    ac8e:	fe 81       	ldd	r31, Y+6	; 0x06
    ac90:	e0 0f       	add	r30, r16
    ac92:	f1 1f       	adc	r31, r17
    ac94:	80 81       	ld	r24, Z
    ac96:	91 81       	ldd	r25, Z+1	; 0x01
    ac98:	89 2b       	or	r24, r25
    ac9a:	71 f1       	breq	.+92     	; 0xacf8 <dir_find+0x20a>
    ac9c:	2b c0       	rjmp	.+86     	; 0xacf4 <dir_find+0x206>
    ac9e:	11 11       	cpse	r17, r1
    aca0:	05 c0       	rjmp	.+10     	; 0xacac <dir_find+0x1be>
    aca2:	c7 01       	movw	r24, r14
    aca4:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <sum_sfn>
    aca8:	08 17       	cp	r16, r24
    acaa:	09 f1       	breq	.+66     	; 0xacee <dir_find+0x200>
    acac:	eb 85       	ldd	r30, Y+11	; 0x0b
    acae:	fc 85       	ldd	r31, Y+12	; 0x0c
    acb0:	87 a1       	ldd	r24, Z+39	; 0x27
    acb2:	80 fd       	sbrc	r24, 0
    acb4:	09 c0       	rjmp	.+18     	; 0xacc8 <dir_find+0x1da>
    acb6:	4b e0       	ldi	r20, 0x0B	; 11
    acb8:	50 e0       	ldi	r21, 0x00	; 0
    acba:	69 85       	ldd	r22, Y+9	; 0x09
    acbc:	7a 85       	ldd	r23, Y+10	; 0x0a
    acbe:	c7 01       	movw	r24, r14
    acc0:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <mem_cmp>
    acc4:	89 2b       	or	r24, r25
    acc6:	99 f0       	breq	.+38     	; 0xacee <dir_find+0x200>
    acc8:	eb 85       	ldd	r30, Y+11	; 0x0b
    acca:	fc 85       	ldd	r31, Y+12	; 0x0c
    accc:	40 a6       	std	Z+40, r4	; 0x28
    acce:	51 a6       	std	Z+41, r5	; 0x29
    acd0:	62 a6       	std	Z+42, r6	; 0x2a
    acd2:	73 a6       	std	Z+43, r7	; 0x2b
    acd4:	1f ef       	ldi	r17, 0xFF	; 255
    acd6:	60 e0       	ldi	r22, 0x00	; 0
    acd8:	70 e0       	ldi	r23, 0x00	; 0
    acda:	8b 85       	ldd	r24, Y+11	; 0x0b
    acdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    acde:	cb dc       	rcall	.-1642   	; 0xa676 <dir_next>
    ace0:	00 97       	sbiw	r24, 0x00	; 0
    ace2:	09 f4       	brne	.+2      	; 0xace6 <dir_find+0x1f8>
    ace4:	2b cf       	rjmp	.-426    	; 0xab3c <dir_find+0x4e>
    ace6:	28 2f       	mov	r18, r24
    ace8:	0b c0       	rjmp	.+22     	; 0xad00 <dir_find+0x212>
    acea:	24 e0       	ldi	r18, 0x04	; 4
    acec:	01 c0       	rjmp	.+2      	; 0xacf0 <dir_find+0x202>
    acee:	20 e0       	ldi	r18, 0x00	; 0
    acf0:	90 e0       	ldi	r25, 0x00	; 0
    acf2:	06 c0       	rjmp	.+12     	; 0xad00 <dir_find+0x212>
    acf4:	0c 2d       	mov	r16, r12
    acf6:	ee cf       	rjmp	.-36     	; 0xacd4 <dir_find+0x1e6>
    acf8:	1f ef       	ldi	r17, 0xFF	; 255
    acfa:	1d 0d       	add	r17, r13
    acfc:	0c 2d       	mov	r16, r12
    acfe:	eb cf       	rjmp	.-42     	; 0xacd6 <dir_find+0x1e8>
    ad00:	82 2f       	mov	r24, r18
    ad02:	2c 96       	adiw	r28, 0x0c	; 12
    ad04:	e2 e1       	ldi	r30, 0x12	; 18
    ad06:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0000ad0a <dir_register>:
    ad0a:	a6 e1       	ldi	r26, 0x16	; 22
    ad0c:	b0 e0       	ldi	r27, 0x00	; 0
    ad0e:	eb e8       	ldi	r30, 0x8B	; 139
    ad10:	f6 e5       	ldi	r31, 0x56	; 86
    ad12:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    ad16:	dc 01       	movw	r26, r24
    ad18:	97 96       	adiw	r26, 0x27	; 39
    ad1a:	2c 91       	ld	r18, X
    ad1c:	97 97       	sbiw	r26, 0x27	; 39
    ad1e:	20 7a       	andi	r18, 0xA0	; 160
    ad20:	09 f0       	breq	.+2      	; 0xad24 <dir_register+0x1a>
    ad22:	61 c1       	rjmp	.+706    	; 0xafe6 <dir_register+0x2dc>
    ad24:	cd 90       	ld	r12, X+
    ad26:	dc 90       	ld	r13, X
    ad28:	d6 01       	movw	r26, r12
    ad2a:	1b 96       	adiw	r26, 0x0b	; 11
    ad2c:	ed 91       	ld	r30, X+
    ad2e:	fc 91       	ld	r31, X
    ad30:	1c 97       	sbiw	r26, 0x0c	; 12
    ad32:	81 2c       	mov	r8, r1
    ad34:	91 2c       	mov	r9, r1
    ad36:	21 91       	ld	r18, Z+
    ad38:	31 91       	ld	r19, Z+
    ad3a:	23 2b       	or	r18, r19
    ad3c:	21 f0       	breq	.+8      	; 0xad46 <dir_register+0x3c>
    ad3e:	bf ef       	ldi	r27, 0xFF	; 255
    ad40:	8b 1a       	sub	r8, r27
    ad42:	9b 0a       	sbc	r9, r27
    ad44:	f8 cf       	rjmp	.-16     	; 0xad36 <dir_register+0x2c>
    ad46:	8c 01       	movw	r16, r24
    ad48:	5c 01       	movw	r10, r24
    ad4a:	ec e1       	ldi	r30, 0x1C	; 28
    ad4c:	ae 0e       	add	r10, r30
    ad4e:	b1 1c       	adc	r11, r1
    ad50:	4c e0       	ldi	r20, 0x0C	; 12
    ad52:	50 e0       	ldi	r21, 0x00	; 0
    ad54:	b5 01       	movw	r22, r10
    ad56:	ce 01       	movw	r24, r28
    ad58:	01 96       	adiw	r24, 0x01	; 1
    ad5a:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <mem_cpy.part.0>
    ad5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    ad60:	80 ff       	sbrs	r24, 0
    ad62:	96 c0       	rjmp	.+300    	; 0xae90 <dir_register+0x186>
    ad64:	80 e4       	ldi	r24, 0x40	; 64
    ad66:	d8 01       	movw	r26, r16
    ad68:	97 96       	adiw	r26, 0x27	; 39
    ad6a:	8c 93       	st	X, r24
    ad6c:	41 2c       	mov	r4, r1
    ad6e:	51 2c       	mov	r5, r1
    ad70:	32 01       	movw	r6, r4
    ad72:	43 94       	inc	r4
    ad74:	72 01       	movw	r14, r4
    ad76:	f6 01       	movw	r30, r12
    ad78:	23 84       	ldd	r2, Z+11	; 0x0b
    ad7a:	34 84       	ldd	r3, Z+12	; 0x0c
    ad7c:	4b e0       	ldi	r20, 0x0B	; 11
    ad7e:	50 e0       	ldi	r21, 0x00	; 0
    ad80:	be 01       	movw	r22, r28
    ad82:	6f 5f       	subi	r22, 0xFF	; 255
    ad84:	7f 4f       	sbci	r23, 0xFF	; 255
    ad86:	c5 01       	movw	r24, r10
    ad88:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <mem_cpy.part.0>
    ad8c:	f6 e0       	ldi	r31, 0x06	; 6
    ad8e:	4f 16       	cp	r4, r31
    ad90:	51 04       	cpc	r5, r1
    ad92:	18 f1       	brcs	.+70     	; 0xadda <dir_register+0xd0>
    ad94:	f1 01       	movw	r30, r2
    ad96:	b3 01       	movw	r22, r6
    ad98:	a2 01       	movw	r20, r4
    ad9a:	81 91       	ld	r24, Z+
    ad9c:	91 91       	ld	r25, Z+
    ad9e:	00 97       	sbiw	r24, 0x00	; 0
    ada0:	d9 f0       	breq	.+54     	; 0xadd8 <dir_register+0xce>
    ada2:	20 e1       	ldi	r18, 0x10	; 16
    ada4:	30 e0       	ldi	r19, 0x00	; 0
    ada6:	44 0f       	add	r20, r20
    ada8:	55 1f       	adc	r21, r21
    adaa:	66 1f       	adc	r22, r22
    adac:	77 1f       	adc	r23, r23
    adae:	dc 01       	movw	r26, r24
    adb0:	a1 70       	andi	r26, 0x01	; 1
    adb2:	bb 27       	eor	r27, r27
    adb4:	4a 0f       	add	r20, r26
    adb6:	5b 1f       	adc	r21, r27
    adb8:	61 1d       	adc	r22, r1
    adba:	71 1d       	adc	r23, r1
    adbc:	96 95       	lsr	r25
    adbe:	87 95       	ror	r24
    adc0:	60 ff       	sbrs	r22, 0
    adc2:	06 c0       	rjmp	.+12     	; 0xadd0 <dir_register+0xc6>
    adc4:	a1 e2       	ldi	r26, 0x21	; 33
    adc6:	4a 27       	eor	r20, r26
    adc8:	a0 e1       	ldi	r26, 0x10	; 16
    adca:	5a 27       	eor	r21, r26
    adcc:	a1 e0       	ldi	r26, 0x01	; 1
    adce:	6a 27       	eor	r22, r26
    add0:	21 50       	subi	r18, 0x01	; 1
    add2:	31 09       	sbc	r19, r1
    add4:	41 f7       	brne	.-48     	; 0xada6 <dir_register+0x9c>
    add6:	e1 cf       	rjmp	.-62     	; 0xad9a <dir_register+0x90>
    add8:	7a 01       	movw	r14, r20
    adda:	fe 01       	movw	r30, r28
    addc:	75 96       	adiw	r30, 0x15	; 21
    adde:	27 e0       	ldi	r18, 0x07	; 7
    ade0:	30 e0       	ldi	r19, 0x00	; 0
    ade2:	9e 2d       	mov	r25, r14
    ade4:	9f 70       	andi	r25, 0x0F	; 15
    ade6:	80 e3       	ldi	r24, 0x30	; 48
    ade8:	89 0f       	add	r24, r25
    adea:	8a 33       	cpi	r24, 0x3A	; 58
    adec:	10 f0       	brcs	.+4      	; 0xadf2 <dir_register+0xe8>
    adee:	87 e3       	ldi	r24, 0x37	; 55
    adf0:	89 0f       	add	r24, r25
    adf2:	21 50       	subi	r18, 0x01	; 1
    adf4:	31 09       	sbc	r19, r1
    adf6:	82 93       	st	-Z, r24
    adf8:	a4 e0       	ldi	r26, 0x04	; 4
    adfa:	f6 94       	lsr	r15
    adfc:	e7 94       	ror	r14
    adfe:	aa 95       	dec	r26
    ae00:	e1 f7       	brne	.-8      	; 0xadfa <dir_register+0xf0>
    ae02:	e1 14       	cp	r14, r1
    ae04:	f1 04       	cpc	r15, r1
    ae06:	69 f7       	brne	.-38     	; 0xade2 <dir_register+0xd8>
    ae08:	ed e0       	ldi	r30, 0x0D	; 13
    ae0a:	f0 e0       	ldi	r31, 0x00	; 0
    ae0c:	ec 0f       	add	r30, r28
    ae0e:	fd 1f       	adc	r31, r29
    ae10:	e2 0f       	add	r30, r18
    ae12:	f3 1f       	adc	r31, r19
    ae14:	be e7       	ldi	r27, 0x7E	; 126
    ae16:	b0 83       	st	Z, r27
    ae18:	f5 01       	movw	r30, r10
    ae1a:	80 e0       	ldi	r24, 0x00	; 0
    ae1c:	90 e0       	ldi	r25, 0x00	; 0
    ae1e:	28 17       	cp	r18, r24
    ae20:	39 07       	cpc	r19, r25
    ae22:	29 f0       	breq	.+10     	; 0xae2e <dir_register+0x124>
    ae24:	41 91       	ld	r20, Z+
    ae26:	40 32       	cpi	r20, 0x20	; 32
    ae28:	11 f0       	breq	.+4      	; 0xae2e <dir_register+0x124>
    ae2a:	01 96       	adiw	r24, 0x01	; 1
    ae2c:	f8 cf       	rjmp	.-16     	; 0xae1e <dir_register+0x114>
    ae2e:	f5 01       	movw	r30, r10
    ae30:	e8 0f       	add	r30, r24
    ae32:	f9 1f       	adc	r31, r25
    ae34:	28 30       	cpi	r18, 0x08	; 8
    ae36:	31 05       	cpc	r19, r1
    ae38:	50 f4       	brcc	.+20     	; 0xae4e <dir_register+0x144>
    ae3a:	ad e0       	ldi	r26, 0x0D	; 13
    ae3c:	b0 e0       	ldi	r27, 0x00	; 0
    ae3e:	ac 0f       	add	r26, r28
    ae40:	bd 1f       	adc	r27, r29
    ae42:	a2 0f       	add	r26, r18
    ae44:	b3 1f       	adc	r27, r19
    ae46:	8c 91       	ld	r24, X
    ae48:	2f 5f       	subi	r18, 0xFF	; 255
    ae4a:	3f 4f       	sbci	r19, 0xFF	; 255
    ae4c:	01 c0       	rjmp	.+2      	; 0xae50 <dir_register+0x146>
    ae4e:	80 e2       	ldi	r24, 0x20	; 32
    ae50:	81 93       	st	Z+, r24
    ae52:	cf 01       	movw	r24, r30
    ae54:	8a 19       	sub	r24, r10
    ae56:	9b 09       	sbc	r25, r11
    ae58:	08 97       	sbiw	r24, 0x08	; 8
    ae5a:	60 f3       	brcs	.-40     	; 0xae34 <dir_register+0x12a>
    ae5c:	c8 01       	movw	r24, r16
    ae5e:	47 de       	rcall	.-882    	; 0xaaee <dir_find>
    ae60:	00 97       	sbiw	r24, 0x00	; 0
    ae62:	71 f4       	brne	.+28     	; 0xae80 <dir_register+0x176>
    ae64:	ef ef       	ldi	r30, 0xFF	; 255
    ae66:	4e 1a       	sub	r4, r30
    ae68:	5e 0a       	sbc	r5, r30
    ae6a:	6e 0a       	sbc	r6, r30
    ae6c:	7e 0a       	sbc	r7, r30
    ae6e:	f4 e6       	ldi	r31, 0x64	; 100
    ae70:	4f 16       	cp	r4, r31
    ae72:	51 04       	cpc	r5, r1
    ae74:	61 04       	cpc	r6, r1
    ae76:	71 04       	cpc	r7, r1
    ae78:	09 f0       	breq	.+2      	; 0xae7c <dir_register+0x172>
    ae7a:	7c cf       	rjmp	.-264    	; 0xad74 <dir_register+0x6a>
    ae7c:	27 e0       	ldi	r18, 0x07	; 7
    ae7e:	b4 c0       	rjmp	.+360    	; 0xafe8 <dir_register+0x2de>
    ae80:	84 30       	cpi	r24, 0x04	; 4
    ae82:	91 05       	cpc	r25, r1
    ae84:	09 f0       	breq	.+2      	; 0xae88 <dir_register+0x17e>
    ae86:	df c0       	rjmp	.+446    	; 0xb046 <dir_register+0x33c>
    ae88:	8c 85       	ldd	r24, Y+12	; 0x0c
    ae8a:	d8 01       	movw	r26, r16
    ae8c:	97 96       	adiw	r26, 0x27	; 39
    ae8e:	8c 93       	st	X, r24
    ae90:	8c 85       	ldd	r24, Y+12	; 0x0c
    ae92:	81 ff       	sbrs	r24, 1
    ae94:	0b c0       	rjmp	.+22     	; 0xaeac <dir_register+0x1a2>
    ae96:	c4 01       	movw	r24, r8
    ae98:	0c 96       	adiw	r24, 0x0c	; 12
    ae9a:	6d e0       	ldi	r22, 0x0D	; 13
    ae9c:	70 e0       	ldi	r23, 0x00	; 0
    ae9e:	0e 94 85 e4 	call	0x1c90a	; 0x1c90a <__udivmodhi4>
    aea2:	7b 01       	movw	r14, r22
    aea4:	bf ef       	ldi	r27, 0xFF	; 255
    aea6:	eb 1a       	sub	r14, r27
    aea8:	fb 0a       	sbc	r15, r27
    aeaa:	03 c0       	rjmp	.+6      	; 0xaeb2 <dir_register+0x1a8>
    aeac:	ee 24       	eor	r14, r14
    aeae:	e3 94       	inc	r14
    aeb0:	f1 2c       	mov	r15, r1
    aeb2:	b7 01       	movw	r22, r14
    aeb4:	c8 01       	movw	r24, r16
    aeb6:	c7 dc       	rcall	.-1650   	; 0xa846 <dir_alloc>
    aeb8:	00 97       	sbiw	r24, 0x00	; 0
    aeba:	09 f0       	breq	.+2      	; 0xaebe <dir_register+0x1b4>
    aebc:	c4 c0       	rjmp	.+392    	; 0xb046 <dir_register+0x33c>
    aebe:	e1 e0       	ldi	r30, 0x01	; 1
    aec0:	ee 1a       	sub	r14, r30
    aec2:	f1 08       	sbc	r15, r1
    aec4:	09 f4       	brne	.+2      	; 0xaec8 <dir_register+0x1be>
    aec6:	92 c0       	rjmp	.+292    	; 0xafec <dir_register+0x2e2>
    aec8:	d8 01       	movw	r26, r16
    aeca:	1e 96       	adiw	r26, 0x0e	; 14
    aecc:	4d 91       	ld	r20, X+
    aece:	5d 91       	ld	r21, X+
    aed0:	6d 91       	ld	r22, X+
    aed2:	7c 91       	ld	r23, X
    aed4:	51 97       	sbiw	r26, 0x11	; 17
    aed6:	c7 01       	movw	r24, r14
    aed8:	e5 e0       	ldi	r30, 0x05	; 5
    aeda:	88 0f       	add	r24, r24
    aedc:	99 1f       	adc	r25, r25
    aede:	ea 95       	dec	r30
    aee0:	e1 f7       	brne	.-8      	; 0xaeda <dir_register+0x1d0>
    aee2:	48 1b       	sub	r20, r24
    aee4:	59 0b       	sbc	r21, r25
    aee6:	61 09       	sbc	r22, r1
    aee8:	71 09       	sbc	r23, r1
    aeea:	c8 01       	movw	r24, r16
    aeec:	4c d9       	rcall	.-3432   	; 0xa186 <dir_sdi>
    aeee:	00 97       	sbiw	r24, 0x00	; 0
    aef0:	09 f0       	breq	.+2      	; 0xaef4 <dir_register+0x1ea>
    aef2:	a9 c0       	rjmp	.+338    	; 0xb046 <dir_register+0x33c>
    aef4:	c5 01       	movw	r24, r10
    aef6:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <sum_sfn>
    aefa:	68 2e       	mov	r6, r24
    aefc:	5f e0       	ldi	r21, 0x0F	; 15
    aefe:	35 2e       	mov	r3, r21
    af00:	6d e0       	ldi	r22, 0x0D	; 13
    af02:	46 2e       	mov	r4, r22
    af04:	7a e5       	ldi	r23, 0x5A	; 90
    af06:	87 2e       	mov	r8, r23
    af08:	73 e0       	ldi	r23, 0x03	; 3
    af0a:	97 2e       	mov	r9, r23
    af0c:	55 24       	eor	r5, r5
    af0e:	53 94       	inc	r5
    af10:	f8 01       	movw	r30, r16
    af12:	46 89       	ldd	r20, Z+22	; 0x16
    af14:	57 89       	ldd	r21, Z+23	; 0x17
    af16:	60 8d       	ldd	r22, Z+24	; 0x18
    af18:	71 8d       	ldd	r23, Z+25	; 0x19
    af1a:	c6 01       	movw	r24, r12
    af1c:	0e 94 33 4c 	call	0x9866	; 0x9866 <move_window>
    af20:	00 97       	sbiw	r24, 0x00	; 0
    af22:	09 f0       	breq	.+2      	; 0xaf26 <dir_register+0x21c>
    af24:	90 c0       	rjmp	.+288    	; 0xb046 <dir_register+0x33c>
    af26:	7e 2c       	mov	r7, r14
    af28:	d8 01       	movw	r26, r16
    af2a:	5a 96       	adiw	r26, 0x1a	; 26
    af2c:	ed 91       	ld	r30, X+
    af2e:	fc 91       	ld	r31, X
    af30:	5b 97       	sbiw	r26, 0x1b	; 27
    af32:	d6 01       	movw	r26, r12
    af34:	1b 96       	adiw	r26, 0x0b	; 11
    af36:	6d 91       	ld	r22, X+
    af38:	7c 91       	ld	r23, X
    af3a:	1c 97       	sbiw	r26, 0x0c	; 12
    af3c:	65 86       	std	Z+13, r6	; 0x0d
    af3e:	33 86       	std	Z+11, r3	; 0x0b
    af40:	14 86       	std	Z+12, r1	; 0x0c
    af42:	12 8e       	std	Z+26, r1	; 0x1a
    af44:	13 8e       	std	Z+27, r1	; 0x1b
    af46:	97 01       	movw	r18, r14
    af48:	33 27       	eor	r19, r19
    af4a:	21 50       	subi	r18, 0x01	; 1
    af4c:	31 09       	sbc	r19, r1
    af4e:	42 9e       	mul	r4, r18
    af50:	c0 01       	movw	r24, r0
    af52:	43 9e       	mul	r4, r19
    af54:	90 0d       	add	r25, r0
    af56:	11 24       	eor	r1, r1
    af58:	2d e4       	ldi	r18, 0x4D	; 77
    af5a:	33 e0       	ldi	r19, 0x03	; 3
    af5c:	3e 8b       	std	Y+22, r19	; 0x16
    af5e:	2d 8b       	std	Y+21, r18	; 0x15
    af60:	20 e0       	ldi	r18, 0x00	; 0
    af62:	30 e0       	ldi	r19, 0x00	; 0
    af64:	2f 3f       	cpi	r18, 0xFF	; 255
    af66:	4f ef       	ldi	r20, 0xFF	; 255
    af68:	34 07       	cpc	r19, r20
    af6a:	49 f0       	breq	.+18     	; 0xaf7e <dir_register+0x274>
    af6c:	9c 01       	movw	r18, r24
    af6e:	22 0f       	add	r18, r18
    af70:	33 1f       	adc	r19, r19
    af72:	26 0f       	add	r18, r22
    af74:	37 1f       	adc	r19, r23
    af76:	d9 01       	movw	r26, r18
    af78:	2d 91       	ld	r18, X+
    af7a:	3c 91       	ld	r19, X
    af7c:	01 96       	adiw	r24, 0x01	; 1
    af7e:	ad 89       	ldd	r26, Y+21	; 0x15
    af80:	be 89       	ldd	r27, Y+22	; 0x16
    af82:	4d 91       	ld	r20, X+
    af84:	be 8b       	std	Y+22, r27	; 0x16
    af86:	ad 8b       	std	Y+21, r26	; 0x15
    af88:	df 01       	movw	r26, r30
    af8a:	a4 0f       	add	r26, r20
    af8c:	b1 1d       	adc	r27, r1
    af8e:	2c 93       	st	X, r18
    af90:	11 96       	adiw	r26, 0x01	; 1
    af92:	3c 93       	st	X, r19
    af94:	21 15       	cp	r18, r1
    af96:	31 05       	cpc	r19, r1
    af98:	11 f4       	brne	.+4      	; 0xaf9e <dir_register+0x294>
    af9a:	2f ef       	ldi	r18, 0xFF	; 255
    af9c:	3f ef       	ldi	r19, 0xFF	; 255
    af9e:	4d 89       	ldd	r20, Y+21	; 0x15
    afa0:	5e 89       	ldd	r21, Y+22	; 0x16
    afa2:	84 16       	cp	r8, r20
    afa4:	95 06       	cpc	r9, r21
    afa6:	f1 f6       	brne	.-68     	; 0xaf64 <dir_register+0x25a>
    afa8:	2f 3f       	cpi	r18, 0xFF	; 255
    afaa:	3f 4f       	sbci	r19, 0xFF	; 255
    afac:	49 f0       	breq	.+18     	; 0xafc0 <dir_register+0x2b6>
    afae:	88 0f       	add	r24, r24
    afb0:	99 1f       	adc	r25, r25
    afb2:	db 01       	movw	r26, r22
    afb4:	a8 0f       	add	r26, r24
    afb6:	b9 1f       	adc	r27, r25
    afb8:	8d 91       	ld	r24, X+
    afba:	9c 91       	ld	r25, X
    afbc:	89 2b       	or	r24, r25
    afbe:	19 f4       	brne	.+6      	; 0xafc6 <dir_register+0x2bc>
    afc0:	87 2d       	mov	r24, r7
    afc2:	80 64       	ori	r24, 0x40	; 64
    afc4:	78 2e       	mov	r7, r24
    afc6:	70 82       	st	Z, r7
    afc8:	d6 01       	movw	r26, r12
    afca:	13 96       	adiw	r26, 0x03	; 3
    afcc:	5c 92       	st	X, r5
    afce:	60 e0       	ldi	r22, 0x00	; 0
    afd0:	70 e0       	ldi	r23, 0x00	; 0
    afd2:	c8 01       	movw	r24, r16
    afd4:	50 db       	rcall	.-2400   	; 0xa676 <dir_next>
    afd6:	00 97       	sbiw	r24, 0x00	; 0
    afd8:	b1 f5       	brne	.+108    	; 0xb046 <dir_register+0x33c>
    afda:	b1 e0       	ldi	r27, 0x01	; 1
    afdc:	eb 1a       	sub	r14, r27
    afde:	f1 08       	sbc	r15, r1
    afe0:	09 f0       	breq	.+2      	; 0xafe4 <dir_register+0x2da>
    afe2:	96 cf       	rjmp	.-212    	; 0xaf10 <dir_register+0x206>
    afe4:	03 c0       	rjmp	.+6      	; 0xafec <dir_register+0x2e2>
    afe6:	26 e0       	ldi	r18, 0x06	; 6
    afe8:	90 e0       	ldi	r25, 0x00	; 0
    afea:	2e c0       	rjmp	.+92     	; 0xb048 <dir_register+0x33e>
    afec:	d8 01       	movw	r26, r16
    afee:	56 96       	adiw	r26, 0x16	; 22
    aff0:	4d 91       	ld	r20, X+
    aff2:	5d 91       	ld	r21, X+
    aff4:	6d 91       	ld	r22, X+
    aff6:	7c 91       	ld	r23, X
    aff8:	59 97       	sbiw	r26, 0x19	; 25
    affa:	c6 01       	movw	r24, r12
    affc:	0e 94 33 4c 	call	0x9866	; 0x9866 <move_window>
    b000:	00 97       	sbiw	r24, 0x00	; 0
    b002:	09 f5       	brne	.+66     	; 0xb046 <dir_register+0x33c>
    b004:	40 e2       	ldi	r20, 0x20	; 32
    b006:	50 e0       	ldi	r21, 0x00	; 0
    b008:	60 e0       	ldi	r22, 0x00	; 0
    b00a:	70 e0       	ldi	r23, 0x00	; 0
    b00c:	f8 01       	movw	r30, r16
    b00e:	82 8d       	ldd	r24, Z+26	; 0x1a
    b010:	93 8d       	ldd	r25, Z+27	; 0x1b
    b012:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>
    b016:	4b e0       	ldi	r20, 0x0B	; 11
    b018:	50 e0       	ldi	r21, 0x00	; 0
    b01a:	b5 01       	movw	r22, r10
    b01c:	d8 01       	movw	r26, r16
    b01e:	5a 96       	adiw	r26, 0x1a	; 26
    b020:	8d 91       	ld	r24, X+
    b022:	9c 91       	ld	r25, X
    b024:	5b 97       	sbiw	r26, 0x1b	; 27
    b026:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <mem_cpy.part.0>
    b02a:	d8 01       	movw	r26, r16
    b02c:	5a 96       	adiw	r26, 0x1a	; 26
    b02e:	ed 91       	ld	r30, X+
    b030:	fc 91       	ld	r31, X
    b032:	5b 97       	sbiw	r26, 0x1b	; 27
    b034:	97 96       	adiw	r26, 0x27	; 39
    b036:	8c 91       	ld	r24, X
    b038:	88 71       	andi	r24, 0x18	; 24
    b03a:	84 87       	std	Z+12, r24	; 0x0c
    b03c:	81 e0       	ldi	r24, 0x01	; 1
    b03e:	f6 01       	movw	r30, r12
    b040:	83 83       	std	Z+3, r24	; 0x03
    b042:	20 e0       	ldi	r18, 0x00	; 0
    b044:	d1 cf       	rjmp	.-94     	; 0xafe8 <dir_register+0x2de>
    b046:	28 2f       	mov	r18, r24
    b048:	82 2f       	mov	r24, r18
    b04a:	66 96       	adiw	r28, 0x16	; 22
    b04c:	e2 e1       	ldi	r30, 0x12	; 18
    b04e:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0000b052 <follow_path>:
    b052:	aa e0       	ldi	r26, 0x0A	; 10
    b054:	b0 e0       	ldi	r27, 0x00	; 0
    b056:	ef e2       	ldi	r30, 0x2F	; 47
    b058:	f8 e5       	ldi	r31, 0x58	; 88
    b05a:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    b05e:	7c 01       	movw	r14, r24
    b060:	3b 01       	movw	r6, r22
    b062:	dc 01       	movw	r26, r24
    b064:	0d 90       	ld	r0, X+
    b066:	bc 91       	ld	r27, X
    b068:	a0 2d       	mov	r26, r0
    b06a:	be 83       	std	Y+6, r27	; 0x06
    b06c:	ad 83       	std	Y+5, r26	; 0x05
    b06e:	fb 01       	movw	r30, r22
    b070:	80 81       	ld	r24, Z
    b072:	8f 32       	cpi	r24, 0x2F	; 47
    b074:	11 f0       	breq	.+4      	; 0xb07a <follow_path+0x28>
    b076:	8c 35       	cpi	r24, 0x5C	; 92
    b078:	11 f4       	brne	.+4      	; 0xb07e <follow_path+0x2c>
    b07a:	93 01       	movw	r18, r6
    b07c:	0c c0       	rjmp	.+24     	; 0xb096 <follow_path+0x44>
    b07e:	ed 81       	ldd	r30, Y+5	; 0x05
    b080:	fe 81       	ldd	r31, Y+6	; 0x06
    b082:	85 89       	ldd	r24, Z+21	; 0x15
    b084:	96 89       	ldd	r25, Z+22	; 0x16
    b086:	a7 89       	ldd	r26, Z+23	; 0x17
    b088:	b0 8d       	ldd	r27, Z+24	; 0x18
    b08a:	f7 01       	movw	r30, r14
    b08c:	86 83       	std	Z+6, r24	; 0x06
    b08e:	97 83       	std	Z+7, r25	; 0x07
    b090:	a0 87       	std	Z+8, r26	; 0x08
    b092:	b1 87       	std	Z+9, r27	; 0x09
    b094:	0e c0       	rjmp	.+28     	; 0xb0b2 <follow_path+0x60>
    b096:	39 01       	movw	r6, r18
    b098:	d9 01       	movw	r26, r18
    b09a:	8c 91       	ld	r24, X
    b09c:	2f 5f       	subi	r18, 0xFF	; 255
    b09e:	3f 4f       	sbci	r19, 0xFF	; 255
    b0a0:	8f 32       	cpi	r24, 0x2F	; 47
    b0a2:	c9 f3       	breq	.-14     	; 0xb096 <follow_path+0x44>
    b0a4:	8c 35       	cpi	r24, 0x5C	; 92
    b0a6:	b9 f3       	breq	.-18     	; 0xb096 <follow_path+0x44>
    b0a8:	f7 01       	movw	r30, r14
    b0aa:	16 82       	std	Z+6, r1	; 0x06
    b0ac:	17 82       	std	Z+7, r1	; 0x07
    b0ae:	10 86       	std	Z+8, r1	; 0x08
    b0b0:	11 86       	std	Z+9, r1	; 0x09
    b0b2:	d3 01       	movw	r26, r6
    b0b4:	8c 91       	ld	r24, X
    b0b6:	80 32       	cpi	r24, 0x20	; 32
    b0b8:	58 f0       	brcs	.+22     	; 0xb0d0 <follow_path+0x7e>
    b0ba:	f7 01       	movw	r30, r14
    b0bc:	7c 96       	adiw	r30, 0x1c	; 28
    b0be:	f8 87       	std	Y+8, r31	; 0x08
    b0c0:	ef 83       	std	Y+7, r30	; 0x07
    b0c2:	2d 81       	ldd	r18, Y+5	; 0x05
    b0c4:	3e 81       	ldd	r19, Y+6	; 0x06
    b0c6:	2b 5c       	subi	r18, 0xCB	; 203
    b0c8:	3f 4f       	sbci	r19, 0xFF	; 255
    b0ca:	3a 87       	std	Y+10, r19	; 0x0a
    b0cc:	29 87       	std	Y+9, r18	; 0x09
    b0ce:	98 c0       	rjmp	.+304    	; 0xb200 <follow_path+0x1ae>
    b0d0:	80 e8       	ldi	r24, 0x80	; 128
    b0d2:	d7 01       	movw	r26, r14
    b0d4:	97 96       	adiw	r26, 0x27	; 39
    b0d6:	8c 93       	st	X, r24
    b0d8:	40 e0       	ldi	r20, 0x00	; 0
    b0da:	50 e0       	ldi	r21, 0x00	; 0
    b0dc:	ba 01       	movw	r22, r20
    b0de:	c7 01       	movw	r24, r14
    b0e0:	52 d8       	rcall	.-3932   	; 0xa186 <dir_sdi>
    b0e2:	e9 c1       	rjmp	.+978    	; 0xb4b6 <follow_path+0x464>
    b0e4:	6c 35       	cpi	r22, 0x5C	; 92
    b0e6:	71 05       	cpc	r23, r1
    b0e8:	b9 f1       	breq	.+110    	; 0xb158 <follow_path+0x106>
    b0ea:	60 38       	cpi	r22, 0x80	; 128
    b0ec:	71 05       	cpc	r23, r1
    b0ee:	28 f4       	brcc	.+10     	; 0xb0fa <follow_path+0xa8>
    b0f0:	e4 ef       	ldi	r30, 0xF4	; 244
    b0f2:	f7 e0       	ldi	r31, 0x07	; 7
    b0f4:	41 91       	ld	r20, Z+
    b0f6:	41 11       	cpse	r20, r1
    b0f8:	8d c0       	rjmp	.+282    	; 0xb214 <follow_path+0x1c2>
    b0fa:	0f 3f       	cpi	r16, 0xFF	; 255
    b0fc:	11 05       	cpc	r17, r1
    b0fe:	08 f0       	brcs	.+2      	; 0xb102 <follow_path+0xb0>
    b100:	bc c1       	rjmp	.+888    	; 0xb47a <follow_path+0x428>
    b102:	f8 01       	movw	r30, r16
    b104:	ee 0f       	add	r30, r30
    b106:	ff 1f       	adc	r31, r31
    b108:	ea 0d       	add	r30, r10
    b10a:	fb 1d       	adc	r31, r11
    b10c:	71 83       	std	Z+1, r23	; 0x01
    b10e:	60 83       	st	Z, r22
    b110:	0f 5f       	subi	r16, 0xFF	; 255
    b112:	1f 4f       	sbci	r17, 0xFF	; 255
    b114:	ce 01       	movw	r24, r28
    b116:	01 96       	adiw	r24, 0x01	; 1
    b118:	0e 94 82 47 	call	0x8f04	; 0x8f04 <tchar2uni>
    b11c:	6f 3f       	cpi	r22, 0xFF	; 255
    b11e:	bf ef       	ldi	r27, 0xFF	; 255
    b120:	7b 07       	cpc	r23, r27
    b122:	8b 07       	cpc	r24, r27
    b124:	9b 07       	cpc	r25, r27
    b126:	09 f4       	brne	.+2      	; 0xb12a <follow_path+0xd8>
    b128:	a8 c1       	rjmp	.+848    	; 0xb47a <follow_path+0x428>
    b12a:	61 15       	cp	r22, r1
    b12c:	71 05       	cpc	r23, r1
    b12e:	e1 e0       	ldi	r30, 0x01	; 1
    b130:	8e 07       	cpc	r24, r30
    b132:	91 05       	cpc	r25, r1
    b134:	48 f0       	brcs	.+18     	; 0xb148 <follow_path+0xf6>
    b136:	f8 01       	movw	r30, r16
    b138:	ee 0f       	add	r30, r30
    b13a:	ff 1f       	adc	r31, r31
    b13c:	ea 0d       	add	r30, r10
    b13e:	fb 1d       	adc	r31, r11
    b140:	91 83       	std	Z+1, r25	; 0x01
    b142:	80 83       	st	Z, r24
    b144:	0f 5f       	subi	r16, 0xFF	; 255
    b146:	1f 4f       	sbci	r17, 0xFF	; 255
    b148:	9b 01       	movw	r18, r22
    b14a:	60 32       	cpi	r22, 0x20	; 32
    b14c:	71 05       	cpc	r23, r1
    b14e:	08 f4       	brcc	.+2      	; 0xb152 <follow_path+0x100>
    b150:	6b c0       	rjmp	.+214    	; 0xb228 <follow_path+0x1d6>
    b152:	6f 32       	cpi	r22, 0x2F	; 47
    b154:	71 05       	cpc	r23, r1
    b156:	31 f6       	brne	.-116    	; 0xb0e4 <follow_path+0x92>
    b158:	e9 81       	ldd	r30, Y+1	; 0x01
    b15a:	fa 81       	ldd	r31, Y+2	; 0x02
    b15c:	80 81       	ld	r24, Z
    b15e:	8f 32       	cpi	r24, 0x2F	; 47
    b160:	09 f4       	brne	.+2      	; 0xb164 <follow_path+0x112>
    b162:	5e c0       	rjmp	.+188    	; 0xb220 <follow_path+0x1ce>
    b164:	8c 35       	cpi	r24, 0x5C	; 92
    b166:	09 f4       	brne	.+2      	; 0xb16a <follow_path+0x118>
    b168:	5b c0       	rjmp	.+182    	; 0xb220 <follow_path+0x1ce>
    b16a:	1b 82       	std	Y+3, r1	; 0x03
    b16c:	69 80       	ldd	r6, Y+1	; 0x01
    b16e:	7a 80       	ldd	r7, Y+2	; 0x02
    b170:	f8 01       	movw	r30, r16
    b172:	ee 0f       	add	r30, r30
    b174:	ff 1f       	adc	r31, r31
    b176:	01 30       	cpi	r16, 0x01	; 1
    b178:	11 05       	cpc	r17, r1
    b17a:	09 f0       	breq	.+2      	; 0xb17e <follow_path+0x12c>
    b17c:	58 c0       	rjmp	.+176    	; 0xb22e <follow_path+0x1dc>
    b17e:	d5 01       	movw	r26, r10
    b180:	8d 91       	ld	r24, X+
    b182:	9c 91       	ld	r25, X
    b184:	8e 97       	sbiw	r24, 0x2e	; 46
    b186:	09 f0       	breq	.+2      	; 0xb18a <follow_path+0x138>
    b188:	5d c0       	rjmp	.+186    	; 0xb244 <follow_path+0x1f2>
    b18a:	ea 0d       	add	r30, r10
    b18c:	fb 1d       	adc	r31, r11
    b18e:	11 82       	std	Z+1, r1	; 0x01
    b190:	10 82       	st	Z, r1
    b192:	f7 01       	movw	r30, r14
    b194:	7c 96       	adiw	r30, 0x1c	; 28
    b196:	80 e0       	ldi	r24, 0x00	; 0
    b198:	90 e0       	ldi	r25, 0x00	; 0
    b19a:	80 17       	cp	r24, r16
    b19c:	91 07       	cpc	r25, r17
    b19e:	08 f0       	brcs	.+2      	; 0xb1a2 <follow_path+0x150>
    b1a0:	54 c0       	rjmp	.+168    	; 0xb24a <follow_path+0x1f8>
    b1a2:	2e e2       	ldi	r18, 0x2E	; 46
    b1a4:	21 93       	st	Z+, r18
    b1a6:	01 96       	adiw	r24, 0x01	; 1
    b1a8:	8b 30       	cpi	r24, 0x0B	; 11
    b1aa:	91 05       	cpc	r25, r1
    b1ac:	b1 f7       	brne	.-20     	; 0xb19a <follow_path+0x148>
    b1ae:	8b 81       	ldd	r24, Y+3	; 0x03
    b1b0:	80 62       	ori	r24, 0x20	; 32
    b1b2:	f7 01       	movw	r30, r14
    b1b4:	87 a3       	std	Z+39, r24	; 0x27
    b1b6:	80 e0       	ldi	r24, 0x00	; 0
    b1b8:	90 e0       	ldi	r25, 0x00	; 0
    b1ba:	00 97       	sbiw	r24, 0x00	; 0
    b1bc:	09 f0       	breq	.+2      	; 0xb1c0 <follow_path+0x16e>
    b1be:	7b c1       	rjmp	.+758    	; 0xb4b6 <follow_path+0x464>
    b1c0:	c7 01       	movw	r24, r14
    b1c2:	95 dc       	rcall	.-1750   	; 0xaaee <dir_find>
    b1c4:	d7 01       	movw	r26, r14
    b1c6:	97 96       	adiw	r26, 0x27	; 39
    b1c8:	2c 91       	ld	r18, X
    b1ca:	97 97       	sbiw	r26, 0x27	; 39
    b1cc:	00 97       	sbiw	r24, 0x00	; 0
    b1ce:	09 f0       	breq	.+2      	; 0xb1d2 <follow_path+0x180>
    b1d0:	57 c1       	rjmp	.+686    	; 0xb480 <follow_path+0x42e>
    b1d2:	22 fd       	sbrc	r18, 2
    b1d4:	70 c1       	rjmp	.+736    	; 0xb4b6 <follow_path+0x464>
    b1d6:	f7 01       	movw	r30, r14
    b1d8:	84 81       	ldd	r24, Z+4	; 0x04
    b1da:	84 ff       	sbrs	r24, 4
    b1dc:	63 c1       	rjmp	.+710    	; 0xb4a4 <follow_path+0x452>
    b1de:	66 85       	ldd	r22, Z+14	; 0x0e
    b1e0:	77 85       	ldd	r23, Z+15	; 0x0f
    b1e2:	71 70       	andi	r23, 0x01	; 1
    b1e4:	29 85       	ldd	r18, Y+9	; 0x09
    b1e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    b1e8:	62 0f       	add	r22, r18
    b1ea:	73 1f       	adc	r23, r19
    b1ec:	ad 81       	ldd	r26, Y+5	; 0x05
    b1ee:	be 81       	ldd	r27, Y+6	; 0x06
    b1f0:	8c 91       	ld	r24, X
    b1f2:	0e 94 a4 4a 	call	0x9548	; 0x9548 <ld_clust.isra.4>
    b1f6:	f7 01       	movw	r30, r14
    b1f8:	66 83       	std	Z+6, r22	; 0x06
    b1fa:	77 83       	std	Z+7, r23	; 0x07
    b1fc:	80 87       	std	Z+8, r24	; 0x08
    b1fe:	91 87       	std	Z+9, r25	; 0x09
    b200:	7a 82       	std	Y+2, r7	; 0x02
    b202:	69 82       	std	Y+1, r6	; 0x01
    b204:	d7 01       	movw	r26, r14
    b206:	ed 91       	ld	r30, X+
    b208:	fc 91       	ld	r31, X
    b20a:	a3 84       	ldd	r10, Z+11	; 0x0b
    b20c:	b4 84       	ldd	r11, Z+12	; 0x0c
    b20e:	00 e0       	ldi	r16, 0x00	; 0
    b210:	10 e0       	ldi	r17, 0x00	; 0
    b212:	80 cf       	rjmp	.-256    	; 0xb114 <follow_path+0xc2>
    b214:	50 e0       	ldi	r21, 0x00	; 0
    b216:	24 17       	cp	r18, r20
    b218:	35 07       	cpc	r19, r21
    b21a:	09 f0       	breq	.+2      	; 0xb21e <follow_path+0x1cc>
    b21c:	6b cf       	rjmp	.-298    	; 0xb0f4 <follow_path+0xa2>
    b21e:	2d c1       	rjmp	.+602    	; 0xb47a <follow_path+0x428>
    b220:	31 96       	adiw	r30, 0x01	; 1
    b222:	fa 83       	std	Y+2, r31	; 0x02
    b224:	e9 83       	std	Y+1, r30	; 0x01
    b226:	98 cf       	rjmp	.-208    	; 0xb158 <follow_path+0x106>
    b228:	f4 e0       	ldi	r31, 0x04	; 4
    b22a:	fb 83       	std	Y+3, r31	; 0x03
    b22c:	9f cf       	rjmp	.-194    	; 0xb16c <follow_path+0x11a>
    b22e:	02 30       	cpi	r16, 0x02	; 2
    b230:	11 05       	cpc	r17, r1
    b232:	41 f4       	brne	.+16     	; 0xb244 <follow_path+0x1f2>
    b234:	d5 01       	movw	r26, r10
    b236:	12 96       	adiw	r26, 0x02	; 2
    b238:	8d 91       	ld	r24, X+
    b23a:	9c 91       	ld	r25, X
    b23c:	13 97       	sbiw	r26, 0x03	; 3
    b23e:	8e 97       	sbiw	r24, 0x2e	; 46
    b240:	09 f4       	brne	.+2      	; 0xb244 <follow_path+0x1f2>
    b242:	9e cf       	rjmp	.-196    	; 0xb180 <follow_path+0x12e>
    b244:	ea 0d       	add	r30, r10
    b246:	fb 1d       	adc	r31, r11
    b248:	09 c0       	rjmp	.+18     	; 0xb25c <follow_path+0x20a>
    b24a:	20 e2       	ldi	r18, 0x20	; 32
    b24c:	ab cf       	rjmp	.-170    	; 0xb1a4 <follow_path+0x152>
    b24e:	92 91       	ld	r25, -Z
    b250:	82 91       	ld	r24, -Z
    b252:	80 32       	cpi	r24, 0x20	; 32
    b254:	91 05       	cpc	r25, r1
    b256:	31 f4       	brne	.+12     	; 0xb264 <follow_path+0x212>
    b258:	01 50       	subi	r16, 0x01	; 1
    b25a:	11 09       	sbc	r17, r1
    b25c:	01 15       	cp	r16, r1
    b25e:	11 05       	cpc	r17, r1
    b260:	b1 f7       	brne	.-20     	; 0xb24e <follow_path+0x1fc>
    b262:	02 c0       	rjmp	.+4      	; 0xb268 <follow_path+0x216>
    b264:	8e 97       	sbiw	r24, 0x2e	; 46
    b266:	c1 f3       	breq	.-16     	; 0xb258 <follow_path+0x206>
    b268:	f8 01       	movw	r30, r16
    b26a:	ee 0f       	add	r30, r30
    b26c:	ff 1f       	adc	r31, r31
    b26e:	ea 0d       	add	r30, r10
    b270:	fb 1d       	adc	r31, r11
    b272:	11 82       	std	Z+1, r1	; 0x01
    b274:	10 82       	st	Z, r1
    b276:	01 15       	cp	r16, r1
    b278:	11 05       	cpc	r17, r1
    b27a:	09 f4       	brne	.+2      	; 0xb27e <follow_path+0x22c>
    b27c:	fe c0       	rjmp	.+508    	; 0xb47a <follow_path+0x428>
    b27e:	d5 01       	movw	r26, r10
    b280:	41 2c       	mov	r4, r1
    b282:	51 2c       	mov	r5, r1
    b284:	8d 91       	ld	r24, X+
    b286:	9d 91       	ld	r25, X+
    b288:	80 32       	cpi	r24, 0x20	; 32
    b28a:	91 05       	cpc	r25, r1
    b28c:	21 f4       	brne	.+8      	; 0xb296 <follow_path+0x244>
    b28e:	2f ef       	ldi	r18, 0xFF	; 255
    b290:	42 1a       	sub	r4, r18
    b292:	52 0a       	sbc	r5, r18
    b294:	f7 cf       	rjmp	.-18     	; 0xb284 <follow_path+0x232>
    b296:	41 14       	cp	r4, r1
    b298:	51 04       	cpc	r5, r1
    b29a:	11 f4       	brne	.+4      	; 0xb2a0 <follow_path+0x24e>
    b29c:	8e 97       	sbiw	r24, 0x2e	; 46
    b29e:	39 f4       	brne	.+14     	; 0xb2ae <follow_path+0x25c>
    b2a0:	3b 81       	ldd	r19, Y+3	; 0x03
    b2a2:	33 60       	ori	r19, 0x03	; 3
    b2a4:	3b 83       	std	Y+3, r19	; 0x03
    b2a6:	03 c0       	rjmp	.+6      	; 0xb2ae <follow_path+0x25c>
    b2a8:	01 50       	subi	r16, 0x01	; 1
    b2aa:	11 09       	sbc	r17, r1
    b2ac:	21 f0       	breq	.+8      	; 0xb2b6 <follow_path+0x264>
    b2ae:	92 91       	ld	r25, -Z
    b2b0:	82 91       	ld	r24, -Z
    b2b2:	8e 97       	sbiw	r24, 0x2e	; 46
    b2b4:	c9 f7       	brne	.-14     	; 0xb2a8 <follow_path+0x256>
    b2b6:	4b e0       	ldi	r20, 0x0B	; 11
    b2b8:	50 e0       	ldi	r21, 0x00	; 0
    b2ba:	60 e2       	ldi	r22, 0x20	; 32
    b2bc:	70 e0       	ldi	r23, 0x00	; 0
    b2be:	8f 81       	ldd	r24, Y+7	; 0x07
    b2c0:	98 85       	ldd	r25, Y+8	; 0x08
    b2c2:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>
    b2c6:	48 e0       	ldi	r20, 0x08	; 8
    b2c8:	84 2e       	mov	r8, r20
    b2ca:	91 2c       	mov	r9, r1
    b2cc:	c1 2c       	mov	r12, r1
    b2ce:	d1 2c       	mov	r13, r1
    b2d0:	1c 82       	std	Y+4, r1	; 0x04
    b2d2:	12 01       	movw	r2, r4
    b2d4:	8f ef       	ldi	r24, 0xFF	; 255
    b2d6:	28 1a       	sub	r2, r24
    b2d8:	38 0a       	sbc	r3, r24
    b2da:	44 0c       	add	r4, r4
    b2dc:	55 1c       	adc	r5, r5
    b2de:	f5 01       	movw	r30, r10
    b2e0:	e4 0d       	add	r30, r4
    b2e2:	f5 1d       	adc	r31, r5
    b2e4:	80 81       	ld	r24, Z
    b2e6:	91 81       	ldd	r25, Z+1	; 0x01
    b2e8:	00 97       	sbiw	r24, 0x00	; 0
    b2ea:	09 f4       	brne	.+2      	; 0xb2ee <follow_path+0x29c>
    b2ec:	98 c0       	rjmp	.+304    	; 0xb41e <follow_path+0x3cc>
    b2ee:	80 32       	cpi	r24, 0x20	; 32
    b2f0:	91 05       	cpc	r25, r1
    b2f2:	31 f0       	breq	.+12     	; 0xb300 <follow_path+0x2ae>
    b2f4:	8e 32       	cpi	r24, 0x2E	; 46
    b2f6:	91 05       	cpc	r25, r1
    b2f8:	41 f4       	brne	.+16     	; 0xb30a <follow_path+0x2b8>
    b2fa:	20 16       	cp	r2, r16
    b2fc:	31 06       	cpc	r3, r17
    b2fe:	61 f0       	breq	.+24     	; 0xb318 <follow_path+0x2c6>
    b300:	9b 81       	ldd	r25, Y+3	; 0x03
    b302:	93 60       	ori	r25, 0x03	; 3
    b304:	9b 83       	std	Y+3, r25	; 0x03
    b306:	21 01       	movw	r4, r2
    b308:	e4 cf       	rjmp	.-56     	; 0xb2d2 <follow_path+0x280>
    b30a:	c8 14       	cp	r12, r8
    b30c:	d9 04       	cpc	r13, r9
    b30e:	40 f4       	brcc	.+16     	; 0xb320 <follow_path+0x2ce>
    b310:	20 16       	cp	r2, r16
    b312:	31 06       	cpc	r3, r17
    b314:	31 f5       	brne	.+76     	; 0xb362 <follow_path+0x310>
    b316:	c9 c0       	rjmp	.+402    	; 0xb4aa <follow_path+0x458>
    b318:	c8 14       	cp	r12, r8
    b31a:	d9 04       	cpc	r13, r9
    b31c:	08 f4       	brcc	.+2      	; 0xb320 <follow_path+0x2ce>
    b31e:	c5 c0       	rjmp	.+394    	; 0xb4aa <follow_path+0x458>
    b320:	ab e0       	ldi	r26, 0x0B	; 11
    b322:	8a 16       	cp	r8, r26
    b324:	91 04       	cpc	r9, r1
    b326:	39 f4       	brne	.+14     	; 0xb336 <follow_path+0x2e4>
    b328:	bb 81       	ldd	r27, Y+3	; 0x03
    b32a:	b3 60       	ori	r27, 0x03	; 3
    b32c:	bb 83       	std	Y+3, r27	; 0x03
    b32e:	2b e0       	ldi	r18, 0x0B	; 11
    b330:	82 2e       	mov	r8, r18
    b332:	91 2c       	mov	r9, r1
    b334:	74 c0       	rjmp	.+232    	; 0xb41e <follow_path+0x3cc>
    b336:	20 16       	cp	r2, r16
    b338:	31 06       	cpc	r3, r17
    b33a:	39 f0       	breq	.+14     	; 0xb34a <follow_path+0x2f8>
    b33c:	eb 81       	ldd	r30, Y+3	; 0x03
    b33e:	e3 60       	ori	r30, 0x03	; 3
    b340:	eb 83       	std	Y+3, r30	; 0x03
    b342:	02 15       	cp	r16, r2
    b344:	13 05       	cpc	r17, r3
    b346:	08 f4       	brcc	.+2      	; 0xb34a <follow_path+0x2f8>
    b348:	6a c0       	rjmp	.+212    	; 0xb41e <follow_path+0x3cc>
    b34a:	fc 81       	ldd	r31, Y+4	; 0x04
    b34c:	ff 0f       	add	r31, r31
    b34e:	ff 0f       	add	r31, r31
    b350:	fc 83       	std	Y+4, r31	; 0x04
    b352:	18 01       	movw	r2, r16
    b354:	8b e0       	ldi	r24, 0x0B	; 11
    b356:	88 2e       	mov	r8, r24
    b358:	91 2c       	mov	r9, r1
    b35a:	98 e0       	ldi	r25, 0x08	; 8
    b35c:	c9 2e       	mov	r12, r25
    b35e:	d1 2c       	mov	r13, r1
    b360:	d2 cf       	rjmp	.-92     	; 0xb306 <follow_path+0x2b4>
    b362:	80 38       	cpi	r24, 0x80	; 128
    b364:	91 05       	cpc	r25, r1
    b366:	78 f1       	brcs	.+94     	; 0xb3c6 <follow_path+0x374>
    b368:	2b 81       	ldd	r18, Y+3	; 0x03
    b36a:	22 60       	ori	r18, 0x02	; 2
    b36c:	52 2e       	mov	r5, r18
    b36e:	bc 01       	movw	r22, r24
    b370:	80 e0       	ldi	r24, 0x00	; 0
    b372:	90 e0       	ldi	r25, 0x00	; 0
    b374:	45 eb       	ldi	r20, 0xB5	; 181
    b376:	51 e0       	ldi	r21, 0x01	; 1
    b378:	0e 94 18 6a 	call	0xd430	; 0xd430 <ff_uni2oem>
    b37c:	87 ff       	sbrs	r24, 7
    b37e:	08 c0       	rjmp	.+16     	; 0xb390 <follow_path+0x33e>
    b380:	8f 77       	andi	r24, 0x7F	; 127
    b382:	99 27       	eor	r25, r25
    b384:	fc 01       	movw	r30, r24
    b386:	e3 53       	subi	r30, 0x33	; 51
    b388:	fd 4f       	sbci	r31, 0xFD	; 253
    b38a:	80 81       	ld	r24, Z
    b38c:	90 e0       	ldi	r25, 0x00	; 0
    b38e:	18 c0       	rjmp	.+48     	; 0xb3c0 <follow_path+0x36e>
    b390:	8f 3f       	cpi	r24, 0xFF	; 255
    b392:	91 05       	cpc	r25, r1
    b394:	a9 f0       	breq	.+42     	; 0xb3c0 <follow_path+0x36e>
    b396:	a0 f0       	brcs	.+40     	; 0xb3c0 <follow_path+0x36e>
    b398:	94 01       	movw	r18, r8
    b39a:	21 50       	subi	r18, 0x01	; 1
    b39c:	31 09       	sbc	r19, r1
    b39e:	c2 16       	cp	r12, r18
    b3a0:	d3 06       	cpc	r13, r19
    b3a2:	28 f0       	brcs	.+10     	; 0xb3ae <follow_path+0x35c>
    b3a4:	3b 81       	ldd	r19, Y+3	; 0x03
    b3a6:	33 60       	ori	r19, 0x03	; 3
    b3a8:	3b 83       	std	Y+3, r19	; 0x03
    b3aa:	64 01       	movw	r12, r8
    b3ac:	ac cf       	rjmp	.-168    	; 0xb306 <follow_path+0x2b4>
    b3ae:	f7 01       	movw	r30, r14
    b3b0:	ec 0d       	add	r30, r12
    b3b2:	fd 1d       	adc	r31, r13
    b3b4:	94 8f       	std	Z+28, r25	; 0x1c
    b3b6:	d6 01       	movw	r26, r12
    b3b8:	11 96       	adiw	r26, 0x01	; 1
    b3ba:	6d 01       	movw	r12, r26
    b3bc:	5b 82       	std	Y+3, r5	; 0x03
    b3be:	26 c0       	rjmp	.+76     	; 0xb40c <follow_path+0x3ba>
    b3c0:	00 97       	sbiw	r24, 0x00	; 0
    b3c2:	59 f0       	breq	.+22     	; 0xb3da <follow_path+0x388>
    b3c4:	5b 82       	std	Y+3, r5	; 0x03
    b3c6:	ed ef       	ldi	r30, 0xFD	; 253
    b3c8:	f7 e0       	ldi	r31, 0x07	; 7
    b3ca:	21 91       	ld	r18, Z+
    b3cc:	22 23       	and	r18, r18
    b3ce:	59 f0       	breq	.+22     	; 0xb3e6 <follow_path+0x394>
    b3d0:	30 e0       	ldi	r19, 0x00	; 0
    b3d2:	82 17       	cp	r24, r18
    b3d4:	93 07       	cpc	r25, r19
    b3d6:	c9 f7       	brne	.-14     	; 0xb3ca <follow_path+0x378>
    b3d8:	5b 80       	ldd	r5, Y+3	; 0x03
    b3da:	b5 2d       	mov	r27, r5
    b3dc:	b3 60       	ori	r27, 0x03	; 3
    b3de:	bb 83       	std	Y+3, r27	; 0x03
    b3e0:	8f e5       	ldi	r24, 0x5F	; 95
    b3e2:	90 e0       	ldi	r25, 0x00	; 0
    b3e4:	13 c0       	rjmp	.+38     	; 0xb40c <follow_path+0x3ba>
    b3e6:	9c 01       	movw	r18, r24
    b3e8:	21 54       	subi	r18, 0x41	; 65
    b3ea:	31 09       	sbc	r19, r1
    b3ec:	2a 31       	cpi	r18, 0x1A	; 26
    b3ee:	31 05       	cpc	r19, r1
    b3f0:	18 f4       	brcc	.+6      	; 0xb3f8 <follow_path+0x3a6>
    b3f2:	ec 81       	ldd	r30, Y+4	; 0x04
    b3f4:	e2 60       	ori	r30, 0x02	; 2
    b3f6:	ec 83       	std	Y+4, r30	; 0x04
    b3f8:	9c 01       	movw	r18, r24
    b3fa:	21 56       	subi	r18, 0x61	; 97
    b3fc:	31 09       	sbc	r19, r1
    b3fe:	2a 31       	cpi	r18, 0x1A	; 26
    b400:	31 05       	cpc	r19, r1
    b402:	20 f4       	brcc	.+8      	; 0xb40c <follow_path+0x3ba>
    b404:	fc 81       	ldd	r31, Y+4	; 0x04
    b406:	f1 60       	ori	r31, 0x01	; 1
    b408:	fc 83       	std	Y+4, r31	; 0x04
    b40a:	80 97       	sbiw	r24, 0x20	; 32
    b40c:	f7 01       	movw	r30, r14
    b40e:	ec 0d       	add	r30, r12
    b410:	fd 1d       	adc	r31, r13
    b412:	84 8f       	std	Z+28, r24	; 0x1c
    b414:	96 01       	movw	r18, r12
    b416:	2f 5f       	subi	r18, 0xFF	; 255
    b418:	3f 4f       	sbci	r19, 0xFF	; 255
    b41a:	69 01       	movw	r12, r18
    b41c:	74 cf       	rjmp	.-280    	; 0xb306 <follow_path+0x2b4>
    b41e:	d7 01       	movw	r26, r14
    b420:	5c 96       	adiw	r26, 0x1c	; 28
    b422:	8c 91       	ld	r24, X
    b424:	5c 97       	sbiw	r26, 0x1c	; 28
    b426:	85 3e       	cpi	r24, 0xE5	; 229
    b428:	19 f4       	brne	.+6      	; 0xb430 <follow_path+0x3de>
    b42a:	e5 e0       	ldi	r30, 0x05	; 5
    b42c:	5c 96       	adiw	r26, 0x1c	; 28
    b42e:	ec 93       	st	X, r30
    b430:	f8 e0       	ldi	r31, 0x08	; 8
    b432:	8f 16       	cp	r8, r31
    b434:	91 04       	cpc	r9, r1
    b436:	21 f4       	brne	.+8      	; 0xb440 <follow_path+0x3ee>
    b438:	2c 81       	ldd	r18, Y+4	; 0x04
    b43a:	22 0f       	add	r18, r18
    b43c:	22 0f       	add	r18, r18
    b43e:	2c 83       	std	Y+4, r18	; 0x04
    b440:	8c 81       	ldd	r24, Y+4	; 0x04
    b442:	8c 70       	andi	r24, 0x0C	; 12
    b444:	8c 30       	cpi	r24, 0x0C	; 12
    b446:	21 f0       	breq	.+8      	; 0xb450 <follow_path+0x3fe>
    b448:	8c 81       	ldd	r24, Y+4	; 0x04
    b44a:	83 70       	andi	r24, 0x03	; 3
    b44c:	83 30       	cpi	r24, 0x03	; 3
    b44e:	19 f4       	brne	.+6      	; 0xb456 <follow_path+0x404>
    b450:	3b 81       	ldd	r19, Y+3	; 0x03
    b452:	32 60       	ori	r19, 0x02	; 2
    b454:	3b 83       	std	Y+3, r19	; 0x03
    b456:	8b 81       	ldd	r24, Y+3	; 0x03
    b458:	81 fd       	sbrc	r24, 1
    b45a:	0b c0       	rjmp	.+22     	; 0xb472 <follow_path+0x420>
    b45c:	9c 81       	ldd	r25, Y+4	; 0x04
    b45e:	90 ff       	sbrs	r25, 0
    b460:	02 c0       	rjmp	.+4      	; 0xb466 <follow_path+0x414>
    b462:	80 61       	ori	r24, 0x10	; 16
    b464:	8b 83       	std	Y+3, r24	; 0x03
    b466:	ac 81       	ldd	r26, Y+4	; 0x04
    b468:	a2 ff       	sbrs	r26, 2
    b46a:	03 c0       	rjmp	.+6      	; 0xb472 <follow_path+0x420>
    b46c:	bb 81       	ldd	r27, Y+3	; 0x03
    b46e:	b8 60       	ori	r27, 0x08	; 8
    b470:	bb 83       	std	Y+3, r27	; 0x03
    b472:	2b 81       	ldd	r18, Y+3	; 0x03
    b474:	f7 01       	movw	r30, r14
    b476:	27 a3       	std	Z+39, r18	; 0x27
    b478:	9e ce       	rjmp	.-708    	; 0xb1b6 <follow_path+0x164>
    b47a:	86 e0       	ldi	r24, 0x06	; 6
    b47c:	90 e0       	ldi	r25, 0x00	; 0
    b47e:	9d ce       	rjmp	.-710    	; 0xb1ba <follow_path+0x168>
    b480:	84 30       	cpi	r24, 0x04	; 4
    b482:	91 05       	cpc	r25, r1
    b484:	c1 f4       	brne	.+48     	; 0xb4b6 <follow_path+0x464>
    b486:	32 2f       	mov	r19, r18
    b488:	34 70       	andi	r19, 0x04	; 4
    b48a:	25 ff       	sbrs	r18, 5
    b48c:	09 c0       	rjmp	.+18     	; 0xb4a0 <follow_path+0x44e>
    b48e:	33 23       	and	r19, r19
    b490:	09 f4       	brne	.+2      	; 0xb494 <follow_path+0x442>
    b492:	b6 ce       	rjmp	.-660    	; 0xb200 <follow_path+0x1ae>
    b494:	80 e8       	ldi	r24, 0x80	; 128
    b496:	97 96       	adiw	r26, 0x27	; 39
    b498:	8c 93       	st	X, r24
    b49a:	80 e0       	ldi	r24, 0x00	; 0
    b49c:	90 e0       	ldi	r25, 0x00	; 0
    b49e:	0b c0       	rjmp	.+22     	; 0xb4b6 <follow_path+0x464>
    b4a0:	31 11       	cpse	r19, r1
    b4a2:	09 c0       	rjmp	.+18     	; 0xb4b6 <follow_path+0x464>
    b4a4:	85 e0       	ldi	r24, 0x05	; 5
    b4a6:	90 e0       	ldi	r25, 0x00	; 0
    b4a8:	06 c0       	rjmp	.+12     	; 0xb4b6 <follow_path+0x464>
    b4aa:	fb e0       	ldi	r31, 0x0B	; 11
    b4ac:	8f 16       	cp	r8, r31
    b4ae:	91 04       	cpc	r9, r1
    b4b0:	09 f0       	breq	.+2      	; 0xb4b4 <follow_path+0x462>
    b4b2:	4b cf       	rjmp	.-362    	; 0xb34a <follow_path+0x2f8>
    b4b4:	39 cf       	rjmp	.-398    	; 0xb328 <follow_path+0x2d6>
    b4b6:	2a 96       	adiw	r28, 0x0a	; 10
    b4b8:	e2 e1       	ldi	r30, 0x12	; 18
    b4ba:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0000b4be <f_mount>:
    b4be:	a6 e0       	ldi	r26, 0x06	; 6
    b4c0:	b0 e0       	ldi	r27, 0x00	; 0
    b4c2:	e5 e6       	ldi	r30, 0x65	; 101
    b4c4:	fa e5       	ldi	r31, 0x5A	; 90
    b4c6:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__prologue_saves__+0x1e>
    b4ca:	9c 83       	std	Y+4, r25	; 0x04
    b4cc:	8b 83       	std	Y+3, r24	; 0x03
    b4ce:	7e 83       	std	Y+6, r23	; 0x06
    b4d0:	6d 83       	std	Y+5, r22	; 0x05
    b4d2:	14 2f       	mov	r17, r20
    b4d4:	7a 83       	std	Y+2, r23	; 0x02
    b4d6:	69 83       	std	Y+1, r22	; 0x01
    b4d8:	ce 01       	movw	r24, r28
    b4da:	01 96       	adiw	r24, 0x01	; 1
    b4dc:	0e 94 7b 48 	call	0x90f6	; 0x90f6 <get_ldnumber>
    b4e0:	97 fd       	sbrc	r25, 7
    b4e2:	20 c0       	rjmp	.+64     	; 0xb524 <f_mount+0x66>
    b4e4:	88 0f       	add	r24, r24
    b4e6:	99 1f       	adc	r25, r25
    b4e8:	fc 01       	movw	r30, r24
    b4ea:	ef 5e       	subi	r30, 0xEF	; 239
    b4ec:	f7 4e       	sbci	r31, 0xE7	; 231
    b4ee:	01 90       	ld	r0, Z+
    b4f0:	f0 81       	ld	r31, Z
    b4f2:	e0 2d       	mov	r30, r0
    b4f4:	30 97       	sbiw	r30, 0x00	; 0
    b4f6:	09 f0       	breq	.+2      	; 0xb4fa <f_mount+0x3c>
    b4f8:	10 82       	st	Z, r1
    b4fa:	eb 81       	ldd	r30, Y+3	; 0x03
    b4fc:	fc 81       	ldd	r31, Y+4	; 0x04
    b4fe:	30 97       	sbiw	r30, 0x00	; 0
    b500:	09 f0       	breq	.+2      	; 0xb504 <f_mount+0x46>
    b502:	10 82       	st	Z, r1
    b504:	dc 01       	movw	r26, r24
    b506:	af 5e       	subi	r26, 0xEF	; 239
    b508:	b7 4e       	sbci	r27, 0xE7	; 231
    b50a:	ed 93       	st	X+, r30
    b50c:	fc 93       	st	X, r31
    b50e:	11 23       	and	r17, r17
    b510:	61 f0       	breq	.+24     	; 0xb52a <f_mount+0x6c>
    b512:	40 e0       	ldi	r20, 0x00	; 0
    b514:	be 01       	movw	r22, r28
    b516:	6d 5f       	subi	r22, 0xFD	; 253
    b518:	7f 4f       	sbci	r23, 0xFF	; 255
    b51a:	ce 01       	movw	r24, r28
    b51c:	05 96       	adiw	r24, 0x05	; 5
    b51e:	0e 94 ae 4c 	call	0x995c	; 0x995c <mount_volume>
    b522:	05 c0       	rjmp	.+10     	; 0xb52e <f_mount+0x70>
    b524:	8b e0       	ldi	r24, 0x0B	; 11
    b526:	90 e0       	ldi	r25, 0x00	; 0
    b528:	02 c0       	rjmp	.+4      	; 0xb52e <f_mount+0x70>
    b52a:	80 e0       	ldi	r24, 0x00	; 0
    b52c:	90 e0       	ldi	r25, 0x00	; 0
    b52e:	26 96       	adiw	r28, 0x06	; 6
    b530:	e3 e0       	ldi	r30, 0x03	; 3
    b532:	0c 94 59 e5 	jmp	0x1cab2	; 0x1cab2 <__epilogue_restores__+0x1e>

0000b536 <f_open>:
    b536:	a6 e3       	ldi	r26, 0x36	; 54
    b538:	b0 e0       	ldi	r27, 0x00	; 0
    b53a:	e1 ea       	ldi	r30, 0xA1	; 161
    b53c:	fa e5       	ldi	r31, 0x5A	; 90
    b53e:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    b542:	7a ab       	std	Y+50, r23	; 0x32
    b544:	69 ab       	std	Y+49, r22	; 0x31
    b546:	00 97       	sbiw	r24, 0x00	; 0
    b548:	09 f4       	brne	.+2      	; 0xb54c <f_open+0x16>
    b54a:	96 c1       	rjmp	.+812    	; 0xb878 <f_open+0x342>
    b54c:	74 2e       	mov	r7, r20
    b54e:	7c 01       	movw	r14, r24
    b550:	24 2f       	mov	r18, r20
    b552:	2f 73       	andi	r18, 0x3F	; 63
    b554:	32 2e       	mov	r3, r18
    b556:	42 2f       	mov	r20, r18
    b558:	be 01       	movw	r22, r28
    b55a:	61 5d       	subi	r22, 0xD1	; 209
    b55c:	7f 4f       	sbci	r23, 0xFF	; 255
    b55e:	ce 01       	movw	r24, r28
    b560:	c1 96       	adiw	r24, 0x31	; 49
    b562:	0e 94 ae 4c 	call	0x995c	; 0x995c <mount_volume>
    b566:	00 97       	sbiw	r24, 0x00	; 0
    b568:	09 f0       	breq	.+2      	; 0xb56c <f_open+0x36>
    b56a:	80 c1       	rjmp	.+768    	; 0xb86c <f_open+0x336>
    b56c:	8f a5       	ldd	r24, Y+47	; 0x2f
    b56e:	98 a9       	ldd	r25, Y+48	; 0x30
    b570:	9a 83       	std	Y+2, r25	; 0x02
    b572:	89 83       	std	Y+1, r24	; 0x01
    b574:	80 e0       	ldi	r24, 0x00	; 0
    b576:	92 e0       	ldi	r25, 0x02	; 2
    b578:	0e 94 12 6a 	call	0xd424	; 0xd424 <ff_memalloc>
    b57c:	5c 01       	movw	r10, r24
    b57e:	00 97       	sbiw	r24, 0x00	; 0
    b580:	09 f4       	brne	.+2      	; 0xb584 <f_open+0x4e>
    b582:	7c c1       	rjmp	.+760    	; 0xb87c <f_open+0x346>
    b584:	ef a5       	ldd	r30, Y+47	; 0x2f
    b586:	f8 a9       	ldd	r31, Y+48	; 0x30
    b588:	94 87       	std	Z+12, r25	; 0x0c
    b58a:	83 87       	std	Z+11, r24	; 0x0b
    b58c:	69 a9       	ldd	r22, Y+49	; 0x31
    b58e:	7a a9       	ldd	r23, Y+50	; 0x32
    b590:	ce 01       	movw	r24, r28
    b592:	01 96       	adiw	r24, 0x01	; 1
    b594:	5e dd       	rcall	.-1348   	; 0xb052 <follow_path>
    b596:	8c 01       	movw	r16, r24
    b598:	89 2b       	or	r24, r25
    b59a:	29 f4       	brne	.+10     	; 0xb5a6 <f_open+0x70>
    b59c:	88 a5       	ldd	r24, Y+40	; 0x28
    b59e:	87 ff       	sbrs	r24, 7
    b5a0:	02 c0       	rjmp	.+4      	; 0xb5a6 <f_open+0x70>
    b5a2:	06 e0       	ldi	r16, 0x06	; 6
    b5a4:	10 e0       	ldi	r17, 0x00	; 0
    b5a6:	87 2d       	mov	r24, r7
    b5a8:	8c 71       	andi	r24, 0x1C	; 28
    b5aa:	09 f4       	brne	.+2      	; 0xb5ae <f_open+0x78>
    b5ac:	78 c0       	rjmp	.+240    	; 0xb69e <f_open+0x168>
    b5ae:	01 15       	cp	r16, r1
    b5b0:	11 05       	cpc	r17, r1
    b5b2:	79 f0       	breq	.+30     	; 0xb5d2 <f_open+0x9c>
    b5b4:	04 30       	cpi	r16, 0x04	; 4
    b5b6:	11 05       	cpc	r17, r1
    b5b8:	09 f0       	breq	.+2      	; 0xb5bc <f_open+0x86>
    b5ba:	70 c1       	rjmp	.+736    	; 0xb89c <f_open+0x366>
    b5bc:	ce 01       	movw	r24, r28
    b5be:	01 96       	adiw	r24, 0x01	; 1
    b5c0:	a4 db       	rcall	.-2232   	; 0xad0a <dir_register>
    b5c2:	8c 01       	movw	r16, r24
    b5c4:	89 2b       	or	r24, r25
    b5c6:	09 f0       	breq	.+2      	; 0xb5ca <f_open+0x94>
    b5c8:	69 c1       	rjmp	.+722    	; 0xb89c <f_open+0x366>
    b5ca:	33 2d       	mov	r19, r3
    b5cc:	38 60       	ori	r19, 0x08	; 8
    b5ce:	33 2e       	mov	r3, r19
    b5d0:	06 c0       	rjmp	.+12     	; 0xb5de <f_open+0xa8>
    b5d2:	8d 81       	ldd	r24, Y+5	; 0x05
    b5d4:	81 71       	andi	r24, 0x11	; 17
    b5d6:	09 f0       	breq	.+2      	; 0xb5da <f_open+0xa4>
    b5d8:	5f c1       	rjmp	.+702    	; 0xb898 <f_open+0x362>
    b5da:	72 fc       	sbrc	r7, 2
    b5dc:	54 c1       	rjmp	.+680    	; 0xb886 <f_open+0x350>
    b5de:	33 fe       	sbrs	r3, 3
    b5e0:	6e c0       	rjmp	.+220    	; 0xb6be <f_open+0x188>
    b5e2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    b5e4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    b5e6:	ef a5       	ldd	r30, Y+47	; 0x2f
    b5e8:	f8 a9       	ldd	r31, Y+48	; 0x30
    b5ea:	80 81       	ld	r24, Z
    b5ec:	0e 94 a4 4a 	call	0x9548	; 0x9548 <ld_clust.isra.4>
    b5f0:	2b 01       	movw	r4, r22
    b5f2:	3c 01       	movw	r6, r24
    b5f4:	0e 94 00 71 	call	0xe200	; 0xe200 <get_fattime>
    b5f8:	ab 01       	movw	r20, r22
    b5fa:	bc 01       	movw	r22, r24
    b5fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b5fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b600:	0e 96       	adiw	r24, 0x0e	; 14
    b602:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
    b606:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b608:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b60a:	80 e2       	ldi	r24, 0x20	; 32
    b60c:	83 87       	std	Z+11, r24	; 0x0b
    b60e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b610:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b612:	af a5       	ldd	r26, Y+47	; 0x2f
    b614:	b8 a9       	ldd	r27, Y+48	; 0x30
    b616:	12 8e       	std	Z+26, r1	; 0x1a
    b618:	13 8e       	std	Z+27, r1	; 0x1b
    b61a:	8c 91       	ld	r24, X
    b61c:	83 30       	cpi	r24, 0x03	; 3
    b61e:	11 f4       	brne	.+4      	; 0xb624 <f_open+0xee>
    b620:	14 8a       	std	Z+20, r1	; 0x14
    b622:	15 8a       	std	Z+21, r1	; 0x15
    b624:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b626:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b628:	14 8e       	std	Z+28, r1	; 0x1c
    b62a:	15 8e       	std	Z+29, r1	; 0x1d
    b62c:	16 8e       	std	Z+30, r1	; 0x1e
    b62e:	17 8e       	std	Z+31, r1	; 0x1f
    b630:	81 e0       	ldi	r24, 0x01	; 1
    b632:	13 96       	adiw	r26, 0x03	; 3
    b634:	8c 93       	st	X, r24
    b636:	13 97       	sbiw	r26, 0x03	; 3
    b638:	41 14       	cp	r4, r1
    b63a:	51 04       	cpc	r5, r1
    b63c:	61 04       	cpc	r6, r1
    b63e:	71 04       	cpc	r7, r1
    b640:	d9 f1       	breq	.+118    	; 0xb6b8 <f_open+0x182>
    b642:	d1 96       	adiw	r26, 0x31	; 49
    b644:	2d 91       	ld	r18, X+
    b646:	3d 91       	ld	r19, X+
    b648:	4d 91       	ld	r20, X+
    b64a:	5c 91       	ld	r21, X
    b64c:	d4 97       	sbiw	r26, 0x34	; 52
    b64e:	2b ab       	std	Y+51, r18	; 0x33
    b650:	3c ab       	std	Y+52, r19	; 0x34
    b652:	4d ab       	std	Y+53, r20	; 0x35
    b654:	5e ab       	std	Y+54, r21	; 0x36
    b656:	00 e0       	ldi	r16, 0x00	; 0
    b658:	10 e0       	ldi	r17, 0x00	; 0
    b65a:	98 01       	movw	r18, r16
    b65c:	b3 01       	movw	r22, r6
    b65e:	a2 01       	movw	r20, r4
    b660:	ce 01       	movw	r24, r28
    b662:	01 96       	adiw	r24, 0x01	; 1
    b664:	0e 94 aa 52 	call	0xa554	; 0xa554 <remove_chain>
    b668:	8c 01       	movw	r16, r24
    b66a:	89 2b       	or	r24, r25
    b66c:	09 f0       	breq	.+2      	; 0xb670 <f_open+0x13a>
    b66e:	16 c1       	rjmp	.+556    	; 0xb89c <f_open+0x366>
    b670:	4b a9       	ldd	r20, Y+51	; 0x33
    b672:	5c a9       	ldd	r21, Y+52	; 0x34
    b674:	6d a9       	ldd	r22, Y+53	; 0x35
    b676:	7e a9       	ldd	r23, Y+54	; 0x36
    b678:	8f a5       	ldd	r24, Y+47	; 0x2f
    b67a:	98 a9       	ldd	r25, Y+48	; 0x30
    b67c:	0e 94 33 4c 	call	0x9866	; 0x9866 <move_window>
    b680:	8c 01       	movw	r16, r24
    b682:	ef a5       	ldd	r30, Y+47	; 0x2f
    b684:	f8 a9       	ldd	r31, Y+48	; 0x30
    b686:	31 e0       	ldi	r19, 0x01	; 1
    b688:	43 1a       	sub	r4, r19
    b68a:	51 08       	sbc	r5, r1
    b68c:	61 08       	sbc	r6, r1
    b68e:	71 08       	sbc	r7, r1
    b690:	45 86       	std	Z+13, r4	; 0x0d
    b692:	56 86       	std	Z+14, r5	; 0x0e
    b694:	67 86       	std	Z+15, r6	; 0x0f
    b696:	70 8a       	std	Z+16, r7	; 0x10
    b698:	89 2b       	or	r24, r25
    b69a:	61 f0       	breq	.+24     	; 0xb6b4 <f_open+0x17e>
    b69c:	ff c0       	rjmp	.+510    	; 0xb89c <f_open+0x366>
    b69e:	01 15       	cp	r16, r1
    b6a0:	11 05       	cpc	r17, r1
    b6a2:	09 f0       	breq	.+2      	; 0xb6a6 <f_open+0x170>
    b6a4:	fb c0       	rjmp	.+502    	; 0xb89c <f_open+0x366>
    b6a6:	8d 81       	ldd	r24, Y+5	; 0x05
    b6a8:	84 fd       	sbrc	r24, 4
    b6aa:	f3 c0       	rjmp	.+486    	; 0xb892 <f_open+0x35c>
    b6ac:	71 fe       	sbrs	r7, 1
    b6ae:	02 c0       	rjmp	.+4      	; 0xb6b4 <f_open+0x17e>
    b6b0:	80 fd       	sbrc	r24, 0
    b6b2:	f2 c0       	rjmp	.+484    	; 0xb898 <f_open+0x362>
    b6b4:	33 fe       	sbrs	r3, 3
    b6b6:	03 c0       	rjmp	.+6      	; 0xb6be <f_open+0x188>
    b6b8:	43 2d       	mov	r20, r3
    b6ba:	40 64       	ori	r20, 0x40	; 64
    b6bc:	34 2e       	mov	r3, r20
    b6be:	0f a5       	ldd	r16, Y+47	; 0x2f
    b6c0:	18 a9       	ldd	r17, Y+48	; 0x30
    b6c2:	f8 01       	movw	r30, r16
    b6c4:	81 a9       	ldd	r24, Z+49	; 0x31
    b6c6:	92 a9       	ldd	r25, Z+50	; 0x32
    b6c8:	a3 a9       	ldd	r26, Z+51	; 0x33
    b6ca:	b4 a9       	ldd	r27, Z+52	; 0x34
    b6cc:	f7 01       	movw	r30, r14
    b6ce:	84 8f       	std	Z+28, r24	; 0x1c
    b6d0:	95 8f       	std	Z+29, r25	; 0x1d
    b6d2:	a6 8f       	std	Z+30, r26	; 0x1e
    b6d4:	b7 8f       	std	Z+31, r27	; 0x1f
    b6d6:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b6d8:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b6da:	71 a2       	std	Z+33, r7	; 0x21
    b6dc:	60 a2       	std	Z+32, r6	; 0x20
    b6de:	b3 01       	movw	r22, r6
    b6e0:	f8 01       	movw	r30, r16
    b6e2:	80 81       	ld	r24, Z
    b6e4:	0e 94 a4 4a 	call	0x9548	; 0x9548 <ld_clust.isra.4>
    b6e8:	f7 01       	movw	r30, r14
    b6ea:	66 83       	std	Z+6, r22	; 0x06
    b6ec:	77 83       	std	Z+7, r23	; 0x07
    b6ee:	80 87       	std	Z+8, r24	; 0x08
    b6f0:	91 87       	std	Z+9, r25	; 0x09
    b6f2:	c3 01       	movw	r24, r6
    b6f4:	4c 96       	adiw	r24, 0x1c	; 28
    b6f6:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <ld_dword>
    b6fa:	f7 01       	movw	r30, r14
    b6fc:	62 87       	std	Z+10, r22	; 0x0a
    b6fe:	73 87       	std	Z+11, r23	; 0x0b
    b700:	84 87       	std	Z+12, r24	; 0x0c
    b702:	95 87       	std	Z+13, r25	; 0x0d
    b704:	13 a2       	std	Z+35, r1	; 0x23
    b706:	12 a2       	std	Z+34, r1	; 0x22
    b708:	11 83       	std	Z+1, r17	; 0x01
    b70a:	00 83       	st	Z, r16
    b70c:	f8 01       	movw	r30, r16
    b70e:	85 81       	ldd	r24, Z+5	; 0x05
    b710:	96 81       	ldd	r25, Z+6	; 0x06
    b712:	f7 01       	movw	r30, r14
    b714:	93 83       	std	Z+3, r25	; 0x03
    b716:	82 83       	std	Z+2, r24	; 0x02
    b718:	36 86       	std	Z+14, r3	; 0x0e
    b71a:	17 86       	std	Z+15, r1	; 0x0f
    b71c:	10 8e       	std	Z+24, r1	; 0x18
    b71e:	11 8e       	std	Z+25, r1	; 0x19
    b720:	12 8e       	std	Z+26, r1	; 0x1a
    b722:	13 8e       	std	Z+27, r1	; 0x1b
    b724:	10 8a       	std	Z+16, r1	; 0x10
    b726:	11 8a       	std	Z+17, r1	; 0x11
    b728:	12 8a       	std	Z+18, r1	; 0x12
    b72a:	13 8a       	std	Z+19, r1	; 0x13
    b72c:	67 01       	movw	r12, r14
    b72e:	f4 e2       	ldi	r31, 0x24	; 36
    b730:	cf 0e       	add	r12, r31
    b732:	d1 1c       	adc	r13, r1
    b734:	40 e0       	ldi	r20, 0x00	; 0
    b736:	52 e0       	ldi	r21, 0x02	; 2
    b738:	60 e0       	ldi	r22, 0x00	; 0
    b73a:	70 e0       	ldi	r23, 0x00	; 0
    b73c:	c6 01       	movw	r24, r12
    b73e:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>
    b742:	35 fc       	sbrc	r3, 5
    b744:	03 c0       	rjmp	.+6      	; 0xb74c <f_open+0x216>
    b746:	00 e0       	ldi	r16, 0x00	; 0
    b748:	10 e0       	ldi	r17, 0x00	; 0
    b74a:	89 c0       	rjmp	.+274    	; 0xb85e <f_open+0x328>
    b74c:	f7 01       	movw	r30, r14
    b74e:	62 84       	ldd	r6, Z+10	; 0x0a
    b750:	73 84       	ldd	r7, Z+11	; 0x0b
    b752:	84 84       	ldd	r8, Z+12	; 0x0c
    b754:	95 84       	ldd	r9, Z+13	; 0x0d
    b756:	61 14       	cp	r6, r1
    b758:	71 04       	cpc	r7, r1
    b75a:	81 04       	cpc	r8, r1
    b75c:	91 04       	cpc	r9, r1
    b75e:	99 f3       	breq	.-26     	; 0xb746 <f_open+0x210>
    b760:	60 8a       	std	Z+16, r6	; 0x10
    b762:	71 8a       	std	Z+17, r7	; 0x11
    b764:	82 8a       	std	Z+18, r8	; 0x12
    b766:	93 8a       	std	Z+19, r9	; 0x13
    b768:	ef a5       	ldd	r30, Y+47	; 0x2f
    b76a:	f8 a9       	ldd	r31, Y+48	; 0x30
    b76c:	21 84       	ldd	r2, Z+9	; 0x09
    b76e:	32 84       	ldd	r3, Z+10	; 0x0a
    b770:	c1 01       	movw	r24, r2
    b772:	a0 e0       	ldi	r26, 0x00	; 0
    b774:	b0 e0       	ldi	r27, 0x00	; 0
    b776:	1c 01       	movw	r2, r24
    b778:	2d 01       	movw	r4, r26
    b77a:	59 e0       	ldi	r21, 0x09	; 9
    b77c:	22 0c       	add	r2, r2
    b77e:	33 1c       	adc	r3, r3
    b780:	44 1c       	adc	r4, r4
    b782:	55 1c       	adc	r5, r5
    b784:	5a 95       	dec	r21
    b786:	d1 f7       	brne	.-12     	; 0xb77c <f_open+0x246>
    b788:	f7 01       	movw	r30, r14
    b78a:	46 81       	ldd	r20, Z+6	; 0x06
    b78c:	57 81       	ldd	r21, Z+7	; 0x07
    b78e:	60 85       	ldd	r22, Z+8	; 0x08
    b790:	71 85       	ldd	r23, Z+9	; 0x09
    b792:	26 14       	cp	r2, r6
    b794:	37 04       	cpc	r3, r7
    b796:	48 04       	cpc	r4, r8
    b798:	59 04       	cpc	r5, r9
    b79a:	f0 f4       	brcc	.+60     	; 0xb7d8 <f_open+0x2a2>
    b79c:	f7 01       	movw	r30, r14
    b79e:	80 81       	ld	r24, Z
    b7a0:	91 81       	ldd	r25, Z+1	; 0x01
    b7a2:	0e 94 0f 50 	call	0xa01e	; 0xa01e <get_fat.isra.10>
    b7a6:	ab 01       	movw	r20, r22
    b7a8:	bc 01       	movw	r22, r24
    b7aa:	d4 01       	movw	r26, r8
    b7ac:	c3 01       	movw	r24, r6
    b7ae:	82 19       	sub	r24, r2
    b7b0:	93 09       	sbc	r25, r3
    b7b2:	a4 09       	sbc	r26, r4
    b7b4:	b5 09       	sbc	r27, r5
    b7b6:	3c 01       	movw	r6, r24
    b7b8:	4d 01       	movw	r8, r26
    b7ba:	42 30       	cpi	r20, 0x02	; 2
    b7bc:	51 05       	cpc	r21, r1
    b7be:	61 05       	cpc	r22, r1
    b7c0:	71 05       	cpc	r23, r1
    b7c2:	08 f4       	brcc	.+2      	; 0xb7c6 <f_open+0x290>
    b7c4:	63 c0       	rjmp	.+198    	; 0xb88c <f_open+0x356>
    b7c6:	4f 3f       	cpi	r20, 0xFF	; 255
    b7c8:	ff ef       	ldi	r31, 0xFF	; 255
    b7ca:	5f 07       	cpc	r21, r31
    b7cc:	6f 07       	cpc	r22, r31
    b7ce:	7f 07       	cpc	r23, r31
    b7d0:	01 f7       	brne	.-64     	; 0xb792 <f_open+0x25c>
    b7d2:	01 e0       	ldi	r16, 0x01	; 1
    b7d4:	10 e0       	ldi	r17, 0x00	; 0
    b7d6:	02 c0       	rjmp	.+4      	; 0xb7dc <f_open+0x2a6>
    b7d8:	00 e0       	ldi	r16, 0x00	; 0
    b7da:	10 e0       	ldi	r17, 0x00	; 0
    b7dc:	f7 01       	movw	r30, r14
    b7de:	44 8b       	std	Z+20, r20	; 0x14
    b7e0:	55 8b       	std	Z+21, r21	; 0x15
    b7e2:	66 8b       	std	Z+22, r22	; 0x16
    b7e4:	77 8b       	std	Z+23, r23	; 0x17
    b7e6:	01 15       	cp	r16, r1
    b7e8:	11 05       	cpc	r17, r1
    b7ea:	c9 f5       	brne	.+114    	; 0xb85e <f_open+0x328>
    b7ec:	d4 01       	movw	r26, r8
    b7ee:	c3 01       	movw	r24, r6
    b7f0:	91 70       	andi	r25, 0x01	; 1
    b7f2:	aa 27       	eor	r26, r26
    b7f4:	bb 27       	eor	r27, r27
    b7f6:	89 2b       	or	r24, r25
    b7f8:	8a 2b       	or	r24, r26
    b7fa:	8b 2b       	or	r24, r27
    b7fc:	09 f4       	brne	.+2      	; 0xb800 <f_open+0x2ca>
    b7fe:	a3 cf       	rjmp	.-186    	; 0xb746 <f_open+0x210>
    b800:	4f a4       	ldd	r4, Y+47	; 0x2f
    b802:	58 a8       	ldd	r5, Y+48	; 0x30
    b804:	c2 01       	movw	r24, r4
    b806:	0e 94 08 48 	call	0x9010	; 0x9010 <clst2sect>
    b80a:	61 15       	cp	r22, r1
    b80c:	71 05       	cpc	r23, r1
    b80e:	81 05       	cpc	r24, r1
    b810:	91 05       	cpc	r25, r1
    b812:	19 f1       	breq	.+70     	; 0xb85a <f_open+0x324>
    b814:	94 01       	movw	r18, r8
    b816:	83 01       	movw	r16, r6
    b818:	49 e0       	ldi	r20, 0x09	; 9
    b81a:	36 95       	lsr	r19
    b81c:	27 95       	ror	r18
    b81e:	17 95       	ror	r17
    b820:	07 95       	ror	r16
    b822:	4a 95       	dec	r20
    b824:	d1 f7       	brne	.-12     	; 0xb81a <f_open+0x2e4>
    b826:	a9 01       	movw	r20, r18
    b828:	98 01       	movw	r18, r16
    b82a:	26 0f       	add	r18, r22
    b82c:	37 1f       	adc	r19, r23
    b82e:	48 1f       	adc	r20, r24
    b830:	59 1f       	adc	r21, r25
    b832:	f7 01       	movw	r30, r14
    b834:	20 8f       	std	Z+24, r18	; 0x18
    b836:	31 8f       	std	Z+25, r19	; 0x19
    b838:	42 8f       	std	Z+26, r20	; 0x1a
    b83a:	53 8f       	std	Z+27, r21	; 0x1b
    b83c:	01 e0       	ldi	r16, 0x01	; 1
    b83e:	10 e0       	ldi	r17, 0x00	; 0
    b840:	b6 01       	movw	r22, r12
    b842:	f2 01       	movw	r30, r4
    b844:	81 81       	ldd	r24, Z+1	; 0x01
    b846:	0e 94 ce 6a 	call	0xd59c	; 0xd59c <disk_read>
    b84a:	31 e0       	ldi	r19, 0x01	; 1
    b84c:	20 e0       	ldi	r18, 0x00	; 0
    b84e:	89 2b       	or	r24, r25
    b850:	09 f4       	brne	.+2      	; 0xb854 <f_open+0x31e>
    b852:	30 e0       	ldi	r19, 0x00	; 0
    b854:	03 2f       	mov	r16, r19
    b856:	12 2f       	mov	r17, r18
    b858:	02 c0       	rjmp	.+4      	; 0xb85e <f_open+0x328>
    b85a:	02 e0       	ldi	r16, 0x02	; 2
    b85c:	10 e0       	ldi	r17, 0x00	; 0
    b85e:	c5 01       	movw	r24, r10
    b860:	0e 94 15 6a 	call	0xd42a	; 0xd42a <ff_memfree>
    b864:	01 15       	cp	r16, r1
    b866:	11 05       	cpc	r17, r1
    b868:	59 f0       	breq	.+22     	; 0xb880 <f_open+0x34a>
    b86a:	01 c0       	rjmp	.+2      	; 0xb86e <f_open+0x338>
    b86c:	8c 01       	movw	r16, r24
    b86e:	f7 01       	movw	r30, r14
    b870:	11 82       	std	Z+1, r1	; 0x01
    b872:	10 82       	st	Z, r1
    b874:	c8 01       	movw	r24, r16
    b876:	16 c0       	rjmp	.+44     	; 0xb8a4 <f_open+0x36e>
    b878:	89 e0       	ldi	r24, 0x09	; 9
    b87a:	03 c0       	rjmp	.+6      	; 0xb882 <f_open+0x34c>
    b87c:	81 e1       	ldi	r24, 0x11	; 17
    b87e:	01 c0       	rjmp	.+2      	; 0xb882 <f_open+0x34c>
    b880:	80 e0       	ldi	r24, 0x00	; 0
    b882:	90 e0       	ldi	r25, 0x00	; 0
    b884:	0f c0       	rjmp	.+30     	; 0xb8a4 <f_open+0x36e>
    b886:	08 e0       	ldi	r16, 0x08	; 8
    b888:	10 e0       	ldi	r17, 0x00	; 0
    b88a:	08 c0       	rjmp	.+16     	; 0xb89c <f_open+0x366>
    b88c:	02 e0       	ldi	r16, 0x02	; 2
    b88e:	10 e0       	ldi	r17, 0x00	; 0
    b890:	a5 cf       	rjmp	.-182    	; 0xb7dc <f_open+0x2a6>
    b892:	04 e0       	ldi	r16, 0x04	; 4
    b894:	10 e0       	ldi	r17, 0x00	; 0
    b896:	02 c0       	rjmp	.+4      	; 0xb89c <f_open+0x366>
    b898:	07 e0       	ldi	r16, 0x07	; 7
    b89a:	10 e0       	ldi	r17, 0x00	; 0
    b89c:	c5 01       	movw	r24, r10
    b89e:	0e 94 15 6a 	call	0xd42a	; 0xd42a <ff_memfree>
    b8a2:	e5 cf       	rjmp	.-54     	; 0xb86e <f_open+0x338>
    b8a4:	e6 96       	adiw	r28, 0x36	; 54
    b8a6:	e2 e1       	ldi	r30, 0x12	; 18
    b8a8:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0000b8ac <f_read>:
    b8ac:	a6 e0       	ldi	r26, 0x06	; 6
    b8ae:	b0 e0       	ldi	r27, 0x00	; 0
    b8b0:	ec e5       	ldi	r30, 0x5C	; 92
    b8b2:	fc e5       	ldi	r31, 0x5C	; 92
    b8b4:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    b8b8:	7c 01       	movw	r14, r24
    b8ba:	4b 01       	movw	r8, r22
    b8bc:	5a 01       	movw	r10, r20
    b8be:	3e 83       	std	Y+6, r19	; 0x06
    b8c0:	2d 83       	std	Y+5, r18	; 0x05
    b8c2:	f9 01       	movw	r30, r18
    b8c4:	11 82       	std	Z+1, r1	; 0x01
    b8c6:	10 82       	st	Z, r1
    b8c8:	be 01       	movw	r22, r28
    b8ca:	6f 5f       	subi	r22, 0xFF	; 255
    b8cc:	7f 4f       	sbci	r23, 0xFF	; 255
    b8ce:	0e 94 a7 48 	call	0x914e	; 0x914e <validate>
    b8d2:	00 97       	sbiw	r24, 0x00	; 0
    b8d4:	09 f0       	breq	.+2      	; 0xb8d8 <f_read+0x2c>
    b8d6:	31 c1       	rjmp	.+610    	; 0xbb3a <f_read+0x28e>
    b8d8:	f7 01       	movw	r30, r14
    b8da:	87 85       	ldd	r24, Z+15	; 0x0f
    b8dc:	90 e0       	ldi	r25, 0x00	; 0
    b8de:	00 97       	sbiw	r24, 0x00	; 0
    b8e0:	09 f0       	breq	.+2      	; 0xb8e4 <f_read+0x38>
    b8e2:	2b c1       	rjmp	.+598    	; 0xbb3a <f_read+0x28e>
    b8e4:	86 85       	ldd	r24, Z+14	; 0x0e
    b8e6:	80 ff       	sbrs	r24, 0
    b8e8:	26 c1       	rjmp	.+588    	; 0xbb36 <f_read+0x28a>
    b8ea:	82 85       	ldd	r24, Z+10	; 0x0a
    b8ec:	93 85       	ldd	r25, Z+11	; 0x0b
    b8ee:	a4 85       	ldd	r26, Z+12	; 0x0c
    b8f0:	b5 85       	ldd	r27, Z+13	; 0x0d
    b8f2:	40 89       	ldd	r20, Z+16	; 0x10
    b8f4:	51 89       	ldd	r21, Z+17	; 0x11
    b8f6:	62 89       	ldd	r22, Z+18	; 0x12
    b8f8:	73 89       	ldd	r23, Z+19	; 0x13
    b8fa:	84 1b       	sub	r24, r20
    b8fc:	95 0b       	sbc	r25, r21
    b8fe:	a6 0b       	sbc	r26, r22
    b900:	b7 0b       	sbc	r27, r23
    b902:	a5 01       	movw	r20, r10
    b904:	60 e0       	ldi	r22, 0x00	; 0
    b906:	70 e0       	ldi	r23, 0x00	; 0
    b908:	84 17       	cp	r24, r20
    b90a:	95 07       	cpc	r25, r21
    b90c:	a6 07       	cpc	r26, r22
    b90e:	b7 07       	cpc	r27, r23
    b910:	08 f4       	brcc	.+2      	; 0xb914 <f_read+0x68>
    b912:	5c 01       	movw	r10, r24
    b914:	17 01       	movw	r2, r14
    b916:	f4 e2       	ldi	r31, 0x24	; 36
    b918:	2f 0e       	add	r2, r31
    b91a:	31 1c       	adc	r3, r1
    b91c:	a1 14       	cp	r10, r1
    b91e:	b1 04       	cpc	r11, r1
    b920:	09 f4       	brne	.+2      	; 0xb924 <f_read+0x78>
    b922:	07 c1       	rjmp	.+526    	; 0xbb32 <f_read+0x286>
    b924:	f7 01       	movw	r30, r14
    b926:	40 89       	ldd	r20, Z+16	; 0x10
    b928:	51 89       	ldd	r21, Z+17	; 0x11
    b92a:	62 89       	ldd	r22, Z+18	; 0x12
    b92c:	73 89       	ldd	r23, Z+19	; 0x13
    b92e:	db 01       	movw	r26, r22
    b930:	ca 01       	movw	r24, r20
    b932:	91 70       	andi	r25, 0x01	; 1
    b934:	aa 27       	eor	r26, r26
    b936:	bb 27       	eor	r27, r27
    b938:	89 2b       	or	r24, r25
    b93a:	8a 2b       	or	r24, r26
    b93c:	8b 2b       	or	r24, r27
    b93e:	09 f0       	breq	.+2      	; 0xb942 <f_read+0x96>
    b940:	cb c0       	rjmp	.+406    	; 0xbad8 <f_read+0x22c>
    b942:	e9 81       	ldd	r30, Y+1	; 0x01
    b944:	fa 81       	ldd	r31, Y+2	; 0x02
    b946:	01 85       	ldd	r16, Z+9	; 0x09
    b948:	12 85       	ldd	r17, Z+10	; 0x0a
    b94a:	01 50       	subi	r16, 0x01	; 1
    b94c:	11 09       	sbc	r17, r1
    b94e:	db 01       	movw	r26, r22
    b950:	ca 01       	movw	r24, r20
    b952:	e9 e0       	ldi	r30, 0x09	; 9
    b954:	b6 95       	lsr	r27
    b956:	a7 95       	ror	r26
    b958:	97 95       	ror	r25
    b95a:	87 95       	ror	r24
    b95c:	ea 95       	dec	r30
    b95e:	d1 f7       	brne	.-12     	; 0xb954 <f_read+0xa8>
    b960:	08 23       	and	r16, r24
    b962:	19 23       	and	r17, r25
    b964:	01 15       	cp	r16, r1
    b966:	11 05       	cpc	r17, r1
    b968:	91 f5       	brne	.+100    	; 0xb9ce <f_read+0x122>
    b96a:	f7 01       	movw	r30, r14
    b96c:	41 15       	cp	r20, r1
    b96e:	51 05       	cpc	r21, r1
    b970:	61 05       	cpc	r22, r1
    b972:	71 05       	cpc	r23, r1
    b974:	29 f4       	brne	.+10     	; 0xb980 <f_read+0xd4>
    b976:	66 81       	ldd	r22, Z+6	; 0x06
    b978:	77 81       	ldd	r23, Z+7	; 0x07
    b97a:	80 85       	ldd	r24, Z+8	; 0x08
    b97c:	91 85       	ldd	r25, Z+9	; 0x09
    b97e:	11 c0       	rjmp	.+34     	; 0xb9a2 <f_read+0xf6>
    b980:	82 a1       	ldd	r24, Z+34	; 0x22
    b982:	93 a1       	ldd	r25, Z+35	; 0x23
    b984:	89 2b       	or	r24, r25
    b986:	21 f0       	breq	.+8      	; 0xb990 <f_read+0xe4>
    b988:	c7 01       	movw	r24, r14
    b98a:	0e 94 30 48 	call	0x9060	; 0x9060 <clmt_clust>
    b98e:	09 c0       	rjmp	.+18     	; 0xb9a2 <f_read+0xf6>
    b990:	f7 01       	movw	r30, r14
    b992:	44 89       	ldd	r20, Z+20	; 0x14
    b994:	55 89       	ldd	r21, Z+21	; 0x15
    b996:	66 89       	ldd	r22, Z+22	; 0x16
    b998:	77 89       	ldd	r23, Z+23	; 0x17
    b99a:	80 81       	ld	r24, Z
    b99c:	91 81       	ldd	r25, Z+1	; 0x01
    b99e:	0e 94 0f 50 	call	0xa01e	; 0xa01e <get_fat.isra.10>
    b9a2:	62 30       	cpi	r22, 0x02	; 2
    b9a4:	71 05       	cpc	r23, r1
    b9a6:	81 05       	cpc	r24, r1
    b9a8:	91 05       	cpc	r25, r1
    b9aa:	10 f4       	brcc	.+4      	; 0xb9b0 <f_read+0x104>
    b9ac:	82 e0       	ldi	r24, 0x02	; 2
    b9ae:	07 c0       	rjmp	.+14     	; 0xb9be <f_read+0x112>
    b9b0:	6f 3f       	cpi	r22, 0xFF	; 255
    b9b2:	ff ef       	ldi	r31, 0xFF	; 255
    b9b4:	7f 07       	cpc	r23, r31
    b9b6:	8f 07       	cpc	r24, r31
    b9b8:	9f 07       	cpc	r25, r31
    b9ba:	21 f4       	brne	.+8      	; 0xb9c4 <f_read+0x118>
    b9bc:	81 e0       	ldi	r24, 0x01	; 1
    b9be:	f7 01       	movw	r30, r14
    b9c0:	87 87       	std	Z+15, r24	; 0x0f
    b9c2:	ba c0       	rjmp	.+372    	; 0xbb38 <f_read+0x28c>
    b9c4:	f7 01       	movw	r30, r14
    b9c6:	64 8b       	std	Z+20, r22	; 0x14
    b9c8:	75 8b       	std	Z+21, r23	; 0x15
    b9ca:	86 8b       	std	Z+22, r24	; 0x16
    b9cc:	97 8b       	std	Z+23, r25	; 0x17
    b9ce:	89 81       	ldd	r24, Y+1	; 0x01
    b9d0:	9a 81       	ldd	r25, Y+2	; 0x02
    b9d2:	9c 83       	std	Y+4, r25	; 0x04
    b9d4:	8b 83       	std	Y+3, r24	; 0x03
    b9d6:	f7 01       	movw	r30, r14
    b9d8:	44 89       	ldd	r20, Z+20	; 0x14
    b9da:	55 89       	ldd	r21, Z+21	; 0x15
    b9dc:	66 89       	ldd	r22, Z+22	; 0x16
    b9de:	77 89       	ldd	r23, Z+23	; 0x17
    b9e0:	0e 94 08 48 	call	0x9010	; 0x9010 <clst2sect>
    b9e4:	61 15       	cp	r22, r1
    b9e6:	71 05       	cpc	r23, r1
    b9e8:	81 05       	cpc	r24, r1
    b9ea:	91 05       	cpc	r25, r1
    b9ec:	f9 f2       	breq	.-66     	; 0xb9ac <f_read+0x100>
    b9ee:	2b 01       	movw	r4, r22
    b9f0:	3c 01       	movw	r6, r24
    b9f2:	40 0e       	add	r4, r16
    b9f4:	51 1e       	adc	r5, r17
    b9f6:	61 1c       	adc	r6, r1
    b9f8:	71 1c       	adc	r7, r1
    b9fa:	65 01       	movw	r12, r10
    b9fc:	cd 2c       	mov	r12, r13
    b9fe:	dd 24       	eor	r13, r13
    ba00:	c6 94       	lsr	r12
    ba02:	c1 14       	cp	r12, r1
    ba04:	d1 04       	cpc	r13, r1
    ba06:	d1 f1       	breq	.+116    	; 0xba7c <f_read+0x1d0>
    ba08:	eb 81       	ldd	r30, Y+3	; 0x03
    ba0a:	fc 81       	ldd	r31, Y+4	; 0x04
    ba0c:	81 85       	ldd	r24, Z+9	; 0x09
    ba0e:	92 85       	ldd	r25, Z+10	; 0x0a
    ba10:	98 01       	movw	r18, r16
    ba12:	2c 0d       	add	r18, r12
    ba14:	3d 1d       	adc	r19, r13
    ba16:	82 17       	cp	r24, r18
    ba18:	93 07       	cpc	r25, r19
    ba1a:	18 f4       	brcc	.+6      	; 0xba22 <f_read+0x176>
    ba1c:	6c 01       	movw	r12, r24
    ba1e:	c0 1a       	sub	r12, r16
    ba20:	d1 0a       	sbc	r13, r17
    ba22:	86 01       	movw	r16, r12
    ba24:	a3 01       	movw	r20, r6
    ba26:	92 01       	movw	r18, r4
    ba28:	b4 01       	movw	r22, r8
    ba2a:	eb 81       	ldd	r30, Y+3	; 0x03
    ba2c:	fc 81       	ldd	r31, Y+4	; 0x04
    ba2e:	81 81       	ldd	r24, Z+1	; 0x01
    ba30:	0e 94 ce 6a 	call	0xd59c	; 0xd59c <disk_read>
    ba34:	89 2b       	or	r24, r25
    ba36:	11 f6       	brne	.-124    	; 0xb9bc <f_read+0x110>
    ba38:	f7 01       	movw	r30, r14
    ba3a:	86 85       	ldd	r24, Z+14	; 0x0e
    ba3c:	87 ff       	sbrs	r24, 7
    ba3e:	1a c0       	rjmp	.+52     	; 0xba74 <f_read+0x1c8>
    ba40:	80 8d       	ldd	r24, Z+24	; 0x18
    ba42:	91 8d       	ldd	r25, Z+25	; 0x19
    ba44:	a2 8d       	ldd	r26, Z+26	; 0x1a
    ba46:	b3 8d       	ldd	r27, Z+27	; 0x1b
    ba48:	84 19       	sub	r24, r4
    ba4a:	95 09       	sbc	r25, r5
    ba4c:	a6 09       	sbc	r26, r6
    ba4e:	b7 09       	sbc	r27, r7
    ba50:	a6 01       	movw	r20, r12
    ba52:	60 e0       	ldi	r22, 0x00	; 0
    ba54:	70 e0       	ldi	r23, 0x00	; 0
    ba56:	84 17       	cp	r24, r20
    ba58:	95 07       	cpc	r25, r21
    ba5a:	a6 07       	cpc	r26, r22
    ba5c:	b7 07       	cpc	r27, r23
    ba5e:	50 f4       	brcc	.+20     	; 0xba74 <f_read+0x1c8>
    ba60:	98 2f       	mov	r25, r24
    ba62:	88 27       	eor	r24, r24
    ba64:	99 0f       	add	r25, r25
    ba66:	40 e0       	ldi	r20, 0x00	; 0
    ba68:	52 e0       	ldi	r21, 0x02	; 2
    ba6a:	b1 01       	movw	r22, r2
    ba6c:	88 0d       	add	r24, r8
    ba6e:	99 1d       	adc	r25, r9
    ba70:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <mem_cpy.part.0>
    ba74:	dc 2c       	mov	r13, r12
    ba76:	cc 24       	eor	r12, r12
    ba78:	dd 0c       	add	r13, r13
    ba7a:	41 c0       	rjmp	.+130    	; 0xbafe <f_read+0x252>
    ba7c:	f7 01       	movw	r30, r14
    ba7e:	20 8d       	ldd	r18, Z+24	; 0x18
    ba80:	31 8d       	ldd	r19, Z+25	; 0x19
    ba82:	42 8d       	ldd	r20, Z+26	; 0x1a
    ba84:	53 8d       	ldd	r21, Z+27	; 0x1b
    ba86:	42 16       	cp	r4, r18
    ba88:	53 06       	cpc	r5, r19
    ba8a:	64 06       	cpc	r6, r20
    ba8c:	75 06       	cpc	r7, r21
    ba8e:	f9 f0       	breq	.+62     	; 0xbace <f_read+0x222>
    ba90:	86 85       	ldd	r24, Z+14	; 0x0e
    ba92:	87 ff       	sbrs	r24, 7
    ba94:	0f c0       	rjmp	.+30     	; 0xbab4 <f_read+0x208>
    ba96:	01 e0       	ldi	r16, 0x01	; 1
    ba98:	10 e0       	ldi	r17, 0x00	; 0
    ba9a:	b1 01       	movw	r22, r2
    ba9c:	eb 81       	ldd	r30, Y+3	; 0x03
    ba9e:	fc 81       	ldd	r31, Y+4	; 0x04
    baa0:	81 81       	ldd	r24, Z+1	; 0x01
    baa2:	0e 94 de 6a 	call	0xd5bc	; 0xd5bc <disk_write>
    baa6:	89 2b       	or	r24, r25
    baa8:	09 f0       	breq	.+2      	; 0xbaac <f_read+0x200>
    baaa:	88 cf       	rjmp	.-240    	; 0xb9bc <f_read+0x110>
    baac:	f7 01       	movw	r30, r14
    baae:	86 85       	ldd	r24, Z+14	; 0x0e
    bab0:	8f 77       	andi	r24, 0x7F	; 127
    bab2:	86 87       	std	Z+14, r24	; 0x0e
    bab4:	e9 81       	ldd	r30, Y+1	; 0x01
    bab6:	fa 81       	ldd	r31, Y+2	; 0x02
    bab8:	01 e0       	ldi	r16, 0x01	; 1
    baba:	10 e0       	ldi	r17, 0x00	; 0
    babc:	a3 01       	movw	r20, r6
    babe:	92 01       	movw	r18, r4
    bac0:	b1 01       	movw	r22, r2
    bac2:	81 81       	ldd	r24, Z+1	; 0x01
    bac4:	0e 94 ce 6a 	call	0xd59c	; 0xd59c <disk_read>
    bac8:	89 2b       	or	r24, r25
    baca:	09 f0       	breq	.+2      	; 0xbace <f_read+0x222>
    bacc:	77 cf       	rjmp	.-274    	; 0xb9bc <f_read+0x110>
    bace:	f7 01       	movw	r30, r14
    bad0:	40 8e       	std	Z+24, r4	; 0x18
    bad2:	51 8e       	std	Z+25, r5	; 0x19
    bad4:	62 8e       	std	Z+26, r6	; 0x1a
    bad6:	73 8e       	std	Z+27, r7	; 0x1b
    bad8:	f7 01       	movw	r30, r14
    bada:	60 89       	ldd	r22, Z+16	; 0x10
    badc:	71 89       	ldd	r23, Z+17	; 0x11
    bade:	71 70       	andi	r23, 0x01	; 1
    bae0:	80 e0       	ldi	r24, 0x00	; 0
    bae2:	92 e0       	ldi	r25, 0x02	; 2
    bae4:	86 1b       	sub	r24, r22
    bae6:	97 0b       	sbc	r25, r23
    bae8:	65 01       	movw	r12, r10
    baea:	8a 15       	cp	r24, r10
    baec:	9b 05       	cpc	r25, r11
    baee:	08 f4       	brcc	.+2      	; 0xbaf2 <f_read+0x246>
    baf0:	6c 01       	movw	r12, r24
    baf2:	62 0d       	add	r22, r2
    baf4:	73 1d       	adc	r23, r3
    baf6:	a6 01       	movw	r20, r12
    baf8:	c4 01       	movw	r24, r8
    bafa:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <mem_cpy.part.0>
    bafe:	ac 18       	sub	r10, r12
    bb00:	bd 08       	sbc	r11, r13
    bb02:	ed 81       	ldd	r30, Y+5	; 0x05
    bb04:	fe 81       	ldd	r31, Y+6	; 0x06
    bb06:	80 81       	ld	r24, Z
    bb08:	91 81       	ldd	r25, Z+1	; 0x01
    bb0a:	8c 0d       	add	r24, r12
    bb0c:	9d 1d       	adc	r25, r13
    bb0e:	91 83       	std	Z+1, r25	; 0x01
    bb10:	80 83       	st	Z, r24
    bb12:	8c 0c       	add	r8, r12
    bb14:	9d 1c       	adc	r9, r13
    bb16:	f7 01       	movw	r30, r14
    bb18:	80 89       	ldd	r24, Z+16	; 0x10
    bb1a:	91 89       	ldd	r25, Z+17	; 0x11
    bb1c:	a2 89       	ldd	r26, Z+18	; 0x12
    bb1e:	b3 89       	ldd	r27, Z+19	; 0x13
    bb20:	8c 0d       	add	r24, r12
    bb22:	9d 1d       	adc	r25, r13
    bb24:	a1 1d       	adc	r26, r1
    bb26:	b1 1d       	adc	r27, r1
    bb28:	80 8b       	std	Z+16, r24	; 0x10
    bb2a:	91 8b       	std	Z+17, r25	; 0x11
    bb2c:	a2 8b       	std	Z+18, r26	; 0x12
    bb2e:	b3 8b       	std	Z+19, r27	; 0x13
    bb30:	f5 ce       	rjmp	.-534    	; 0xb91c <f_read+0x70>
    bb32:	80 e0       	ldi	r24, 0x00	; 0
    bb34:	01 c0       	rjmp	.+2      	; 0xbb38 <f_read+0x28c>
    bb36:	87 e0       	ldi	r24, 0x07	; 7
    bb38:	90 e0       	ldi	r25, 0x00	; 0
    bb3a:	26 96       	adiw	r28, 0x06	; 6
    bb3c:	e2 e1       	ldi	r30, 0x12	; 18
    bb3e:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0000bb42 <f_write>:
    bb42:	a8 e0       	ldi	r26, 0x08	; 8
    bb44:	b0 e0       	ldi	r27, 0x00	; 0
    bb46:	e7 ea       	ldi	r30, 0xA7	; 167
    bb48:	fd e5       	ldi	r31, 0x5D	; 93
    bb4a:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    bb4e:	7c 01       	movw	r14, r24
    bb50:	3b 01       	movw	r6, r22
    bb52:	5a 01       	movw	r10, r20
    bb54:	38 87       	std	Y+8, r19	; 0x08
    bb56:	2f 83       	std	Y+7, r18	; 0x07
    bb58:	f9 01       	movw	r30, r18
    bb5a:	11 82       	std	Z+1, r1	; 0x01
    bb5c:	10 82       	st	Z, r1
    bb5e:	be 01       	movw	r22, r28
    bb60:	6f 5f       	subi	r22, 0xFF	; 255
    bb62:	7f 4f       	sbci	r23, 0xFF	; 255
    bb64:	0e 94 a7 48 	call	0x914e	; 0x914e <validate>
    bb68:	00 97       	sbiw	r24, 0x00	; 0
    bb6a:	09 f0       	breq	.+2      	; 0xbb6e <f_write+0x2c>
    bb6c:	7d c1       	rjmp	.+762    	; 0xbe68 <f_write+0x326>
    bb6e:	f7 01       	movw	r30, r14
    bb70:	87 85       	ldd	r24, Z+15	; 0x0f
    bb72:	90 e0       	ldi	r25, 0x00	; 0
    bb74:	00 97       	sbiw	r24, 0x00	; 0
    bb76:	09 f0       	breq	.+2      	; 0xbb7a <f_write+0x38>
    bb78:	77 c1       	rjmp	.+750    	; 0xbe68 <f_write+0x326>
    bb7a:	86 85       	ldd	r24, Z+14	; 0x0e
    bb7c:	81 ff       	sbrs	r24, 1
    bb7e:	72 c1       	rjmp	.+740    	; 0xbe64 <f_write+0x322>
    bb80:	80 89       	ldd	r24, Z+16	; 0x10
    bb82:	91 89       	ldd	r25, Z+17	; 0x11
    bb84:	a2 89       	ldd	r26, Z+18	; 0x12
    bb86:	b3 89       	ldd	r27, Z+19	; 0x13
    bb88:	ac 01       	movw	r20, r24
    bb8a:	bd 01       	movw	r22, r26
    bb8c:	4a 0d       	add	r20, r10
    bb8e:	5b 1d       	adc	r21, r11
    bb90:	61 1d       	adc	r22, r1
    bb92:	71 1d       	adc	r23, r1
    bb94:	48 17       	cp	r20, r24
    bb96:	59 07       	cpc	r21, r25
    bb98:	6a 07       	cpc	r22, r26
    bb9a:	7b 07       	cpc	r23, r27
    bb9c:	18 f4       	brcc	.+6      	; 0xbba4 <f_write+0x62>
    bb9e:	5c 01       	movw	r10, r24
    bba0:	a0 94       	com	r10
    bba2:	b0 94       	com	r11
    bba4:	97 01       	movw	r18, r14
    bba6:	2c 5d       	subi	r18, 0xDC	; 220
    bba8:	3f 4f       	sbci	r19, 0xFF	; 255
    bbaa:	3e 83       	std	Y+6, r19	; 0x06
    bbac:	2d 83       	std	Y+5, r18	; 0x05
    bbae:	a1 14       	cp	r10, r1
    bbb0:	b1 04       	cpc	r11, r1
    bbb2:	09 f4       	brne	.+2      	; 0xbbb6 <f_write+0x74>
    bbb4:	4d c0       	rjmp	.+154    	; 0xbc50 <f_write+0x10e>
    bbb6:	f7 01       	movw	r30, r14
    bbb8:	40 89       	ldd	r20, Z+16	; 0x10
    bbba:	51 89       	ldd	r21, Z+17	; 0x11
    bbbc:	62 89       	ldd	r22, Z+18	; 0x12
    bbbe:	73 89       	ldd	r23, Z+19	; 0x13
    bbc0:	db 01       	movw	r26, r22
    bbc2:	ca 01       	movw	r24, r20
    bbc4:	91 70       	andi	r25, 0x01	; 1
    bbc6:	aa 27       	eor	r26, r26
    bbc8:	bb 27       	eor	r27, r27
    bbca:	89 2b       	or	r24, r25
    bbcc:	8a 2b       	or	r24, r26
    bbce:	8b 2b       	or	r24, r27
    bbd0:	09 f0       	breq	.+2      	; 0xbbd4 <f_write+0x92>
    bbd2:	05 c1       	rjmp	.+522    	; 0xbdde <f_write+0x29c>
    bbd4:	e9 81       	ldd	r30, Y+1	; 0x01
    bbd6:	fa 81       	ldd	r31, Y+2	; 0x02
    bbd8:	81 84       	ldd	r8, Z+9	; 0x09
    bbda:	92 84       	ldd	r9, Z+10	; 0x0a
    bbdc:	f1 e0       	ldi	r31, 0x01	; 1
    bbde:	8f 1a       	sub	r8, r31
    bbe0:	91 08       	sbc	r9, r1
    bbe2:	db 01       	movw	r26, r22
    bbe4:	ca 01       	movw	r24, r20
    bbe6:	e9 e0       	ldi	r30, 0x09	; 9
    bbe8:	b6 95       	lsr	r27
    bbea:	a7 95       	ror	r26
    bbec:	97 95       	ror	r25
    bbee:	87 95       	ror	r24
    bbf0:	ea 95       	dec	r30
    bbf2:	d1 f7       	brne	.-12     	; 0xbbe8 <f_write+0xa6>
    bbf4:	88 22       	and	r8, r24
    bbf6:	99 22       	and	r9, r25
    bbf8:	81 14       	cp	r8, r1
    bbfa:	91 04       	cpc	r9, r1
    bbfc:	09 f0       	breq	.+2      	; 0xbc00 <f_write+0xbe>
    bbfe:	51 c0       	rjmp	.+162    	; 0xbca2 <f_write+0x160>
    bc00:	f7 01       	movw	r30, r14
    bc02:	41 15       	cp	r20, r1
    bc04:	51 05       	cpc	r21, r1
    bc06:	61 05       	cpc	r22, r1
    bc08:	71 05       	cpc	r23, r1
    bc0a:	69 f4       	brne	.+26     	; 0xbc26 <f_write+0xe4>
    bc0c:	66 81       	ldd	r22, Z+6	; 0x06
    bc0e:	77 81       	ldd	r23, Z+7	; 0x07
    bc10:	80 85       	ldd	r24, Z+8	; 0x08
    bc12:	91 85       	ldd	r25, Z+9	; 0x09
    bc14:	61 15       	cp	r22, r1
    bc16:	71 05       	cpc	r23, r1
    bc18:	81 05       	cpc	r24, r1
    bc1a:	91 05       	cpc	r25, r1
    bc1c:	f9 f4       	brne	.+62     	; 0xbc5c <f_write+0x11a>
    bc1e:	40 e0       	ldi	r20, 0x00	; 0
    bc20:	50 e0       	ldi	r21, 0x00	; 0
    bc22:	ba 01       	movw	r22, r20
    bc24:	0d c0       	rjmp	.+26     	; 0xbc40 <f_write+0xfe>
    bc26:	82 a1       	ldd	r24, Z+34	; 0x22
    bc28:	93 a1       	ldd	r25, Z+35	; 0x23
    bc2a:	89 2b       	or	r24, r25
    bc2c:	21 f0       	breq	.+8      	; 0xbc36 <f_write+0xf4>
    bc2e:	c7 01       	movw	r24, r14
    bc30:	0e 94 30 48 	call	0x9060	; 0x9060 <clmt_clust>
    bc34:	08 c0       	rjmp	.+16     	; 0xbc46 <f_write+0x104>
    bc36:	f7 01       	movw	r30, r14
    bc38:	44 89       	ldd	r20, Z+20	; 0x14
    bc3a:	55 89       	ldd	r21, Z+21	; 0x15
    bc3c:	66 89       	ldd	r22, Z+22	; 0x16
    bc3e:	77 89       	ldd	r23, Z+23	; 0x17
    bc40:	c7 01       	movw	r24, r14
    bc42:	0e 94 84 51 	call	0xa308	; 0xa308 <create_chain>
    bc46:	61 15       	cp	r22, r1
    bc48:	71 05       	cpc	r23, r1
    bc4a:	81 05       	cpc	r24, r1
    bc4c:	91 05       	cpc	r25, r1
    bc4e:	31 f4       	brne	.+12     	; 0xbc5c <f_write+0x11a>
    bc50:	f7 01       	movw	r30, r14
    bc52:	86 85       	ldd	r24, Z+14	; 0x0e
    bc54:	80 64       	ori	r24, 0x40	; 64
    bc56:	86 87       	std	Z+14, r24	; 0x0e
    bc58:	80 e0       	ldi	r24, 0x00	; 0
    bc5a:	05 c1       	rjmp	.+522    	; 0xbe66 <f_write+0x324>
    bc5c:	61 30       	cpi	r22, 0x01	; 1
    bc5e:	71 05       	cpc	r23, r1
    bc60:	81 05       	cpc	r24, r1
    bc62:	91 05       	cpc	r25, r1
    bc64:	11 f4       	brne	.+4      	; 0xbc6a <f_write+0x128>
    bc66:	82 e0       	ldi	r24, 0x02	; 2
    bc68:	07 c0       	rjmp	.+14     	; 0xbc78 <f_write+0x136>
    bc6a:	6f 3f       	cpi	r22, 0xFF	; 255
    bc6c:	ff ef       	ldi	r31, 0xFF	; 255
    bc6e:	7f 07       	cpc	r23, r31
    bc70:	8f 07       	cpc	r24, r31
    bc72:	9f 07       	cpc	r25, r31
    bc74:	21 f4       	brne	.+8      	; 0xbc7e <f_write+0x13c>
    bc76:	81 e0       	ldi	r24, 0x01	; 1
    bc78:	f7 01       	movw	r30, r14
    bc7a:	87 87       	std	Z+15, r24	; 0x0f
    bc7c:	f4 c0       	rjmp	.+488    	; 0xbe66 <f_write+0x324>
    bc7e:	f7 01       	movw	r30, r14
    bc80:	64 8b       	std	Z+20, r22	; 0x14
    bc82:	75 8b       	std	Z+21, r23	; 0x15
    bc84:	86 8b       	std	Z+22, r24	; 0x16
    bc86:	97 8b       	std	Z+23, r25	; 0x17
    bc88:	06 81       	ldd	r16, Z+6	; 0x06
    bc8a:	17 81       	ldd	r17, Z+7	; 0x07
    bc8c:	20 85       	ldd	r18, Z+8	; 0x08
    bc8e:	31 85       	ldd	r19, Z+9	; 0x09
    bc90:	01 15       	cp	r16, r1
    bc92:	11 05       	cpc	r17, r1
    bc94:	21 05       	cpc	r18, r1
    bc96:	31 05       	cpc	r19, r1
    bc98:	21 f4       	brne	.+8      	; 0xbca2 <f_write+0x160>
    bc9a:	66 83       	std	Z+6, r22	; 0x06
    bc9c:	77 83       	std	Z+7, r23	; 0x07
    bc9e:	80 87       	std	Z+8, r24	; 0x08
    bca0:	91 87       	std	Z+9, r25	; 0x09
    bca2:	f7 01       	movw	r30, r14
    bca4:	86 85       	ldd	r24, Z+14	; 0x0e
    bca6:	87 ff       	sbrs	r24, 7
    bca8:	13 c0       	rjmp	.+38     	; 0xbcd0 <f_write+0x18e>
    bcaa:	20 8d       	ldd	r18, Z+24	; 0x18
    bcac:	31 8d       	ldd	r19, Z+25	; 0x19
    bcae:	42 8d       	ldd	r20, Z+26	; 0x1a
    bcb0:	53 8d       	ldd	r21, Z+27	; 0x1b
    bcb2:	e9 81       	ldd	r30, Y+1	; 0x01
    bcb4:	fa 81       	ldd	r31, Y+2	; 0x02
    bcb6:	01 e0       	ldi	r16, 0x01	; 1
    bcb8:	10 e0       	ldi	r17, 0x00	; 0
    bcba:	6d 81       	ldd	r22, Y+5	; 0x05
    bcbc:	7e 81       	ldd	r23, Y+6	; 0x06
    bcbe:	81 81       	ldd	r24, Z+1	; 0x01
    bcc0:	0e 94 de 6a 	call	0xd5bc	; 0xd5bc <disk_write>
    bcc4:	89 2b       	or	r24, r25
    bcc6:	b9 f6       	brne	.-82     	; 0xbc76 <f_write+0x134>
    bcc8:	f7 01       	movw	r30, r14
    bcca:	86 85       	ldd	r24, Z+14	; 0x0e
    bccc:	8f 77       	andi	r24, 0x7F	; 127
    bcce:	86 87       	std	Z+14, r24	; 0x0e
    bcd0:	29 81       	ldd	r18, Y+1	; 0x01
    bcd2:	3a 81       	ldd	r19, Y+2	; 0x02
    bcd4:	3c 83       	std	Y+4, r19	; 0x04
    bcd6:	2b 83       	std	Y+3, r18	; 0x03
    bcd8:	f7 01       	movw	r30, r14
    bcda:	44 89       	ldd	r20, Z+20	; 0x14
    bcdc:	55 89       	ldd	r21, Z+21	; 0x15
    bcde:	66 89       	ldd	r22, Z+22	; 0x16
    bce0:	77 89       	ldd	r23, Z+23	; 0x17
    bce2:	c9 01       	movw	r24, r18
    bce4:	0e 94 08 48 	call	0x9010	; 0x9010 <clst2sect>
    bce8:	61 15       	cp	r22, r1
    bcea:	71 05       	cpc	r23, r1
    bcec:	81 05       	cpc	r24, r1
    bcee:	91 05       	cpc	r25, r1
    bcf0:	09 f4       	brne	.+2      	; 0xbcf4 <f_write+0x1b2>
    bcf2:	b9 cf       	rjmp	.-142    	; 0xbc66 <f_write+0x124>
    bcf4:	1b 01       	movw	r2, r22
    bcf6:	2c 01       	movw	r4, r24
    bcf8:	28 0c       	add	r2, r8
    bcfa:	39 1c       	adc	r3, r9
    bcfc:	41 1c       	adc	r4, r1
    bcfe:	51 1c       	adc	r5, r1
    bd00:	65 01       	movw	r12, r10
    bd02:	cd 2c       	mov	r12, r13
    bd04:	dd 24       	eor	r13, r13
    bd06:	c6 94       	lsr	r12
    bd08:	c1 14       	cp	r12, r1
    bd0a:	d1 04       	cpc	r13, r1
    bd0c:	f1 f1       	breq	.+124    	; 0xbd8a <f_write+0x248>
    bd0e:	eb 81       	ldd	r30, Y+3	; 0x03
    bd10:	fc 81       	ldd	r31, Y+4	; 0x04
    bd12:	81 85       	ldd	r24, Z+9	; 0x09
    bd14:	92 85       	ldd	r25, Z+10	; 0x0a
    bd16:	94 01       	movw	r18, r8
    bd18:	2c 0d       	add	r18, r12
    bd1a:	3d 1d       	adc	r19, r13
    bd1c:	82 17       	cp	r24, r18
    bd1e:	93 07       	cpc	r25, r19
    bd20:	18 f4       	brcc	.+6      	; 0xbd28 <f_write+0x1e6>
    bd22:	6c 01       	movw	r12, r24
    bd24:	c8 18       	sub	r12, r8
    bd26:	d9 08       	sbc	r13, r9
    bd28:	86 01       	movw	r16, r12
    bd2a:	a2 01       	movw	r20, r4
    bd2c:	91 01       	movw	r18, r2
    bd2e:	b3 01       	movw	r22, r6
    bd30:	eb 81       	ldd	r30, Y+3	; 0x03
    bd32:	fc 81       	ldd	r31, Y+4	; 0x04
    bd34:	81 81       	ldd	r24, Z+1	; 0x01
    bd36:	0e 94 de 6a 	call	0xd5bc	; 0xd5bc <disk_write>
    bd3a:	89 2b       	or	r24, r25
    bd3c:	09 f0       	breq	.+2      	; 0xbd40 <f_write+0x1fe>
    bd3e:	9b cf       	rjmp	.-202    	; 0xbc76 <f_write+0x134>
    bd40:	f7 01       	movw	r30, r14
    bd42:	80 8d       	ldd	r24, Z+24	; 0x18
    bd44:	91 8d       	ldd	r25, Z+25	; 0x19
    bd46:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bd48:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bd4a:	82 19       	sub	r24, r2
    bd4c:	93 09       	sbc	r25, r3
    bd4e:	a4 09       	sbc	r26, r4
    bd50:	b5 09       	sbc	r27, r5
    bd52:	a6 01       	movw	r20, r12
    bd54:	60 e0       	ldi	r22, 0x00	; 0
    bd56:	70 e0       	ldi	r23, 0x00	; 0
    bd58:	84 17       	cp	r24, r20
    bd5a:	95 07       	cpc	r25, r21
    bd5c:	a6 07       	cpc	r26, r22
    bd5e:	b7 07       	cpc	r27, r23
    bd60:	80 f4       	brcc	.+32     	; 0xbd82 <f_write+0x240>
    bd62:	98 2f       	mov	r25, r24
    bd64:	88 27       	eor	r24, r24
    bd66:	99 0f       	add	r25, r25
    bd68:	b3 01       	movw	r22, r6
    bd6a:	68 0f       	add	r22, r24
    bd6c:	79 1f       	adc	r23, r25
    bd6e:	40 e0       	ldi	r20, 0x00	; 0
    bd70:	52 e0       	ldi	r21, 0x02	; 2
    bd72:	8d 81       	ldd	r24, Y+5	; 0x05
    bd74:	9e 81       	ldd	r25, Y+6	; 0x06
    bd76:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <mem_cpy.part.0>
    bd7a:	f7 01       	movw	r30, r14
    bd7c:	86 85       	ldd	r24, Z+14	; 0x0e
    bd7e:	8f 77       	andi	r24, 0x7F	; 127
    bd80:	86 87       	std	Z+14, r24	; 0x0e
    bd82:	dc 2c       	mov	r13, r12
    bd84:	cc 24       	eor	r12, r12
    bd86:	dd 0c       	add	r13, r13
    bd88:	43 c0       	rjmp	.+134    	; 0xbe10 <f_write+0x2ce>
    bd8a:	f7 01       	movw	r30, r14
    bd8c:	80 8d       	ldd	r24, Z+24	; 0x18
    bd8e:	91 8d       	ldd	r25, Z+25	; 0x19
    bd90:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bd92:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bd94:	28 16       	cp	r2, r24
    bd96:	39 06       	cpc	r3, r25
    bd98:	4a 06       	cpc	r4, r26
    bd9a:	5b 06       	cpc	r5, r27
    bd9c:	d9 f0       	breq	.+54     	; 0xbdd4 <f_write+0x292>
    bd9e:	40 89       	ldd	r20, Z+16	; 0x10
    bda0:	51 89       	ldd	r21, Z+17	; 0x11
    bda2:	62 89       	ldd	r22, Z+18	; 0x12
    bda4:	73 89       	ldd	r23, Z+19	; 0x13
    bda6:	82 85       	ldd	r24, Z+10	; 0x0a
    bda8:	93 85       	ldd	r25, Z+11	; 0x0b
    bdaa:	a4 85       	ldd	r26, Z+12	; 0x0c
    bdac:	b5 85       	ldd	r27, Z+13	; 0x0d
    bdae:	48 17       	cp	r20, r24
    bdb0:	59 07       	cpc	r21, r25
    bdb2:	6a 07       	cpc	r22, r26
    bdb4:	7b 07       	cpc	r23, r27
    bdb6:	70 f4       	brcc	.+28     	; 0xbdd4 <f_write+0x292>
    bdb8:	01 e0       	ldi	r16, 0x01	; 1
    bdba:	10 e0       	ldi	r17, 0x00	; 0
    bdbc:	a2 01       	movw	r20, r4
    bdbe:	91 01       	movw	r18, r2
    bdc0:	6d 81       	ldd	r22, Y+5	; 0x05
    bdc2:	7e 81       	ldd	r23, Y+6	; 0x06
    bdc4:	eb 81       	ldd	r30, Y+3	; 0x03
    bdc6:	fc 81       	ldd	r31, Y+4	; 0x04
    bdc8:	81 81       	ldd	r24, Z+1	; 0x01
    bdca:	0e 94 ce 6a 	call	0xd59c	; 0xd59c <disk_read>
    bdce:	89 2b       	or	r24, r25
    bdd0:	09 f0       	breq	.+2      	; 0xbdd4 <f_write+0x292>
    bdd2:	51 cf       	rjmp	.-350    	; 0xbc76 <f_write+0x134>
    bdd4:	f7 01       	movw	r30, r14
    bdd6:	20 8e       	std	Z+24, r2	; 0x18
    bdd8:	31 8e       	std	Z+25, r3	; 0x19
    bdda:	42 8e       	std	Z+26, r4	; 0x1a
    bddc:	53 8e       	std	Z+27, r5	; 0x1b
    bdde:	f7 01       	movw	r30, r14
    bde0:	80 89       	ldd	r24, Z+16	; 0x10
    bde2:	91 89       	ldd	r25, Z+17	; 0x11
    bde4:	91 70       	andi	r25, 0x01	; 1
    bde6:	20 e0       	ldi	r18, 0x00	; 0
    bde8:	32 e0       	ldi	r19, 0x02	; 2
    bdea:	28 1b       	sub	r18, r24
    bdec:	39 0b       	sbc	r19, r25
    bdee:	65 01       	movw	r12, r10
    bdf0:	2a 15       	cp	r18, r10
    bdf2:	3b 05       	cpc	r19, r11
    bdf4:	08 f4       	brcc	.+2      	; 0xbdf8 <f_write+0x2b6>
    bdf6:	69 01       	movw	r12, r18
    bdf8:	a6 01       	movw	r20, r12
    bdfa:	b3 01       	movw	r22, r6
    bdfc:	2d 81       	ldd	r18, Y+5	; 0x05
    bdfe:	3e 81       	ldd	r19, Y+6	; 0x06
    be00:	82 0f       	add	r24, r18
    be02:	93 1f       	adc	r25, r19
    be04:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <mem_cpy.part.0>
    be08:	f7 01       	movw	r30, r14
    be0a:	86 85       	ldd	r24, Z+14	; 0x0e
    be0c:	80 68       	ori	r24, 0x80	; 128
    be0e:	86 87       	std	Z+14, r24	; 0x0e
    be10:	ac 18       	sub	r10, r12
    be12:	bd 08       	sbc	r11, r13
    be14:	ef 81       	ldd	r30, Y+7	; 0x07
    be16:	f8 85       	ldd	r31, Y+8	; 0x08
    be18:	80 81       	ld	r24, Z
    be1a:	91 81       	ldd	r25, Z+1	; 0x01
    be1c:	8c 0d       	add	r24, r12
    be1e:	9d 1d       	adc	r25, r13
    be20:	91 83       	std	Z+1, r25	; 0x01
    be22:	80 83       	st	Z, r24
    be24:	6c 0c       	add	r6, r12
    be26:	7d 1c       	adc	r7, r13
    be28:	f7 01       	movw	r30, r14
    be2a:	80 89       	ldd	r24, Z+16	; 0x10
    be2c:	91 89       	ldd	r25, Z+17	; 0x11
    be2e:	a2 89       	ldd	r26, Z+18	; 0x12
    be30:	b3 89       	ldd	r27, Z+19	; 0x13
    be32:	8c 0d       	add	r24, r12
    be34:	9d 1d       	adc	r25, r13
    be36:	a1 1d       	adc	r26, r1
    be38:	b1 1d       	adc	r27, r1
    be3a:	80 8b       	std	Z+16, r24	; 0x10
    be3c:	91 8b       	std	Z+17, r25	; 0x11
    be3e:	a2 8b       	std	Z+18, r26	; 0x12
    be40:	b3 8b       	std	Z+19, r27	; 0x13
    be42:	42 85       	ldd	r20, Z+10	; 0x0a
    be44:	53 85       	ldd	r21, Z+11	; 0x0b
    be46:	64 85       	ldd	r22, Z+12	; 0x0c
    be48:	75 85       	ldd	r23, Z+13	; 0x0d
    be4a:	48 17       	cp	r20, r24
    be4c:	59 07       	cpc	r21, r25
    be4e:	6a 07       	cpc	r22, r26
    be50:	7b 07       	cpc	r23, r27
    be52:	10 f4       	brcc	.+4      	; 0xbe58 <f_write+0x316>
    be54:	ac 01       	movw	r20, r24
    be56:	bd 01       	movw	r22, r26
    be58:	f7 01       	movw	r30, r14
    be5a:	42 87       	std	Z+10, r20	; 0x0a
    be5c:	53 87       	std	Z+11, r21	; 0x0b
    be5e:	64 87       	std	Z+12, r22	; 0x0c
    be60:	75 87       	std	Z+13, r23	; 0x0d
    be62:	a5 ce       	rjmp	.-694    	; 0xbbae <f_write+0x6c>
    be64:	87 e0       	ldi	r24, 0x07	; 7
    be66:	90 e0       	ldi	r25, 0x00	; 0
    be68:	28 96       	adiw	r28, 0x08	; 8
    be6a:	e2 e1       	ldi	r30, 0x12	; 18
    be6c:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0000be70 <f_sync>:
    be70:	8f 92       	push	r8
    be72:	9f 92       	push	r9
    be74:	af 92       	push	r10
    be76:	bf 92       	push	r11
    be78:	ef 92       	push	r14
    be7a:	ff 92       	push	r15
    be7c:	0f 93       	push	r16
    be7e:	1f 93       	push	r17
    be80:	cf 93       	push	r28
    be82:	df 93       	push	r29
    be84:	00 d0       	rcall	.+0      	; 0xbe86 <f_sync+0x16>
    be86:	cd b7       	in	r28, 0x3d	; 61
    be88:	de b7       	in	r29, 0x3e	; 62
    be8a:	7c 01       	movw	r14, r24
    be8c:	be 01       	movw	r22, r28
    be8e:	6f 5f       	subi	r22, 0xFF	; 255
    be90:	7f 4f       	sbci	r23, 0xFF	; 255
    be92:	0e 94 a7 48 	call	0x914e	; 0x914e <validate>
    be96:	00 97       	sbiw	r24, 0x00	; 0
    be98:	09 f0       	breq	.+2      	; 0xbe9c <f_sync+0x2c>
    be9a:	5d c0       	rjmp	.+186    	; 0xbf56 <f_sync+0xe6>
    be9c:	f7 01       	movw	r30, r14
    be9e:	86 85       	ldd	r24, Z+14	; 0x0e
    bea0:	86 ff       	sbrs	r24, 6
    bea2:	55 c0       	rjmp	.+170    	; 0xbf4e <f_sync+0xde>
    bea4:	87 ff       	sbrs	r24, 7
    bea6:	15 c0       	rjmp	.+42     	; 0xbed2 <f_sync+0x62>
    bea8:	20 8d       	ldd	r18, Z+24	; 0x18
    beaa:	31 8d       	ldd	r19, Z+25	; 0x19
    beac:	42 8d       	ldd	r20, Z+26	; 0x1a
    beae:	53 8d       	ldd	r21, Z+27	; 0x1b
    beb0:	e9 81       	ldd	r30, Y+1	; 0x01
    beb2:	fa 81       	ldd	r31, Y+2	; 0x02
    beb4:	01 e0       	ldi	r16, 0x01	; 1
    beb6:	10 e0       	ldi	r17, 0x00	; 0
    beb8:	b7 01       	movw	r22, r14
    beba:	6c 5d       	subi	r22, 0xDC	; 220
    bebc:	7f 4f       	sbci	r23, 0xFF	; 255
    bebe:	81 81       	ldd	r24, Z+1	; 0x01
    bec0:	0e 94 de 6a 	call	0xd5bc	; 0xd5bc <disk_write>
    bec4:	89 2b       	or	r24, r25
    bec6:	09 f0       	breq	.+2      	; 0xbeca <f_sync+0x5a>
    bec8:	44 c0       	rjmp	.+136    	; 0xbf52 <f_sync+0xe2>
    beca:	f7 01       	movw	r30, r14
    becc:	86 85       	ldd	r24, Z+14	; 0x0e
    bece:	8f 77       	andi	r24, 0x7F	; 127
    bed0:	86 87       	std	Z+14, r24	; 0x0e
    bed2:	0e 94 00 71 	call	0xe200	; 0xe200 <get_fattime>
    bed6:	4b 01       	movw	r8, r22
    bed8:	5c 01       	movw	r10, r24
    beda:	f7 01       	movw	r30, r14
    bedc:	44 8d       	ldd	r20, Z+28	; 0x1c
    bede:	55 8d       	ldd	r21, Z+29	; 0x1d
    bee0:	66 8d       	ldd	r22, Z+30	; 0x1e
    bee2:	77 8d       	ldd	r23, Z+31	; 0x1f
    bee4:	89 81       	ldd	r24, Y+1	; 0x01
    bee6:	9a 81       	ldd	r25, Y+2	; 0x02
    bee8:	0e 94 33 4c 	call	0x9866	; 0x9866 <move_window>
    beec:	00 97       	sbiw	r24, 0x00	; 0
    beee:	99 f5       	brne	.+102    	; 0xbf56 <f_sync+0xe6>
    bef0:	f7 01       	movw	r30, r14
    bef2:	00 a1       	ldd	r16, Z+32	; 0x20
    bef4:	11 a1       	ldd	r17, Z+33	; 0x21
    bef6:	f8 01       	movw	r30, r16
    bef8:	83 85       	ldd	r24, Z+11	; 0x0b
    befa:	80 62       	ori	r24, 0x20	; 32
    befc:	83 87       	std	Z+11, r24	; 0x0b
    befe:	f7 01       	movw	r30, r14
    bf00:	26 81       	ldd	r18, Z+6	; 0x06
    bf02:	37 81       	ldd	r19, Z+7	; 0x07
    bf04:	40 85       	ldd	r20, Z+8	; 0x08
    bf06:	51 85       	ldd	r21, Z+9	; 0x09
    bf08:	b8 01       	movw	r22, r16
    bf0a:	80 81       	ld	r24, Z
    bf0c:	91 81       	ldd	r25, Z+1	; 0x01
    bf0e:	0e 94 b9 4a 	call	0x9572	; 0x9572 <st_clust.isra.5>
    bf12:	f7 01       	movw	r30, r14
    bf14:	42 85       	ldd	r20, Z+10	; 0x0a
    bf16:	53 85       	ldd	r21, Z+11	; 0x0b
    bf18:	64 85       	ldd	r22, Z+12	; 0x0c
    bf1a:	75 85       	ldd	r23, Z+13	; 0x0d
    bf1c:	c8 01       	movw	r24, r16
    bf1e:	4c 96       	adiw	r24, 0x1c	; 28
    bf20:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
    bf24:	b5 01       	movw	r22, r10
    bf26:	a4 01       	movw	r20, r8
    bf28:	c8 01       	movw	r24, r16
    bf2a:	46 96       	adiw	r24, 0x16	; 22
    bf2c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
    bf30:	f8 01       	movw	r30, r16
    bf32:	12 8a       	std	Z+18, r1	; 0x12
    bf34:	13 8a       	std	Z+19, r1	; 0x13
    bf36:	89 81       	ldd	r24, Y+1	; 0x01
    bf38:	9a 81       	ldd	r25, Y+2	; 0x02
    bf3a:	21 e0       	ldi	r18, 0x01	; 1
    bf3c:	fc 01       	movw	r30, r24
    bf3e:	23 83       	std	Z+3, r18	; 0x03
    bf40:	0e 94 19 4b 	call	0x9632	; 0x9632 <sync_fs>
    bf44:	f7 01       	movw	r30, r14
    bf46:	26 85       	ldd	r18, Z+14	; 0x0e
    bf48:	2f 7b       	andi	r18, 0xBF	; 191
    bf4a:	26 87       	std	Z+14, r18	; 0x0e
    bf4c:	04 c0       	rjmp	.+8      	; 0xbf56 <f_sync+0xe6>
    bf4e:	80 e0       	ldi	r24, 0x00	; 0
    bf50:	01 c0       	rjmp	.+2      	; 0xbf54 <f_sync+0xe4>
    bf52:	81 e0       	ldi	r24, 0x01	; 1
    bf54:	90 e0       	ldi	r25, 0x00	; 0
    bf56:	0f 90       	pop	r0
    bf58:	0f 90       	pop	r0
    bf5a:	df 91       	pop	r29
    bf5c:	cf 91       	pop	r28
    bf5e:	1f 91       	pop	r17
    bf60:	0f 91       	pop	r16
    bf62:	ff 90       	pop	r15
    bf64:	ef 90       	pop	r14
    bf66:	bf 90       	pop	r11
    bf68:	af 90       	pop	r10
    bf6a:	9f 90       	pop	r9
    bf6c:	8f 90       	pop	r8
    bf6e:	08 95       	ret

0000bf70 <f_close>:
    bf70:	a2 e0       	ldi	r26, 0x02	; 2
    bf72:	b0 e0       	ldi	r27, 0x00	; 0
    bf74:	ee eb       	ldi	r30, 0xBE	; 190
    bf76:	ff e5       	ldi	r31, 0x5F	; 95
    bf78:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__prologue_saves__+0x1c>
    bf7c:	8c 01       	movw	r16, r24
    bf7e:	78 df       	rcall	.-272    	; 0xbe70 <f_sync>
    bf80:	00 97       	sbiw	r24, 0x00	; 0
    bf82:	59 f4       	brne	.+22     	; 0xbf9a <f_close+0x2a>
    bf84:	be 01       	movw	r22, r28
    bf86:	6f 5f       	subi	r22, 0xFF	; 255
    bf88:	7f 4f       	sbci	r23, 0xFF	; 255
    bf8a:	c8 01       	movw	r24, r16
    bf8c:	0e 94 a7 48 	call	0x914e	; 0x914e <validate>
    bf90:	00 97       	sbiw	r24, 0x00	; 0
    bf92:	19 f4       	brne	.+6      	; 0xbf9a <f_close+0x2a>
    bf94:	f8 01       	movw	r30, r16
    bf96:	11 82       	std	Z+1, r1	; 0x01
    bf98:	10 82       	st	Z, r1
    bf9a:	22 96       	adiw	r28, 0x02	; 2
    bf9c:	e4 e0       	ldi	r30, 0x04	; 4
    bf9e:	0c 94 58 e5 	jmp	0x1cab0	; 0x1cab0 <__epilogue_restores__+0x1c>

0000bfa2 <f_chdir>:
    bfa2:	a2 e3       	ldi	r26, 0x32	; 50
    bfa4:	b0 e0       	ldi	r27, 0x00	; 0
    bfa6:	e7 ed       	ldi	r30, 0xD7	; 215
    bfa8:	ff e5       	ldi	r31, 0x5F	; 95
    bfaa:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    bfae:	9a ab       	std	Y+50, r25	; 0x32
    bfb0:	89 ab       	std	Y+49, r24	; 0x31
    bfb2:	40 e0       	ldi	r20, 0x00	; 0
    bfb4:	be 01       	movw	r22, r28
    bfb6:	61 5d       	subi	r22, 0xD1	; 209
    bfb8:	7f 4f       	sbci	r23, 0xFF	; 255
    bfba:	ce 01       	movw	r24, r28
    bfbc:	c1 96       	adiw	r24, 0x31	; 49
    bfbe:	0e 94 ae 4c 	call	0x995c	; 0x995c <mount_volume>
    bfc2:	00 97       	sbiw	r24, 0x00	; 0
    bfc4:	09 f0       	breq	.+2      	; 0xbfc8 <f_chdir+0x26>
    bfc6:	44 c0       	rjmp	.+136    	; 0xc050 <f_chdir+0xae>
    bfc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    bfca:	98 a9       	ldd	r25, Y+48	; 0x30
    bfcc:	9a 83       	std	Y+2, r25	; 0x02
    bfce:	89 83       	std	Y+1, r24	; 0x01
    bfd0:	80 e0       	ldi	r24, 0x00	; 0
    bfd2:	92 e0       	ldi	r25, 0x02	; 2
    bfd4:	0e 94 12 6a 	call	0xd424	; 0xd424 <ff_memalloc>
    bfd8:	7c 01       	movw	r14, r24
    bfda:	00 97       	sbiw	r24, 0x00	; 0
    bfdc:	a9 f1       	breq	.+106    	; 0xc048 <f_chdir+0xa6>
    bfde:	ef a5       	ldd	r30, Y+47	; 0x2f
    bfe0:	f8 a9       	ldd	r31, Y+48	; 0x30
    bfe2:	94 87       	std	Z+12, r25	; 0x0c
    bfe4:	83 87       	std	Z+11, r24	; 0x0b
    bfe6:	69 a9       	ldd	r22, Y+49	; 0x31
    bfe8:	7a a9       	ldd	r23, Y+50	; 0x32
    bfea:	ce 01       	movw	r24, r28
    bfec:	01 96       	adiw	r24, 0x01	; 1
    bfee:	31 d8       	rcall	.-3998   	; 0xb052 <follow_path>
    bff0:	8c 01       	movw	r16, r24
    bff2:	89 2b       	or	r24, r25
    bff4:	09 f5       	brne	.+66     	; 0xc038 <f_chdir+0x96>
    bff6:	88 a5       	ldd	r24, Y+40	; 0x28
    bff8:	87 ff       	sbrs	r24, 7
    bffa:	0b c0       	rjmp	.+22     	; 0xc012 <f_chdir+0x70>
    bffc:	ef a5       	ldd	r30, Y+47	; 0x2f
    bffe:	f8 a9       	ldd	r31, Y+48	; 0x30
    c000:	8f 81       	ldd	r24, Y+7	; 0x07
    c002:	98 85       	ldd	r25, Y+8	; 0x08
    c004:	a9 85       	ldd	r26, Y+9	; 0x09
    c006:	ba 85       	ldd	r27, Y+10	; 0x0a
    c008:	85 8b       	std	Z+21, r24	; 0x15
    c00a:	96 8b       	std	Z+22, r25	; 0x16
    c00c:	a7 8b       	std	Z+23, r26	; 0x17
    c00e:	b0 8f       	std	Z+24, r27	; 0x18
    c010:	13 c0       	rjmp	.+38     	; 0xc038 <f_chdir+0x96>
    c012:	8d 81       	ldd	r24, Y+5	; 0x05
    c014:	84 ff       	sbrs	r24, 4
    c016:	0e c0       	rjmp	.+28     	; 0xc034 <f_chdir+0x92>
    c018:	cf a4       	ldd	r12, Y+47	; 0x2f
    c01a:	d8 a8       	ldd	r13, Y+48	; 0x30
    c01c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    c01e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    c020:	f6 01       	movw	r30, r12
    c022:	80 81       	ld	r24, Z
    c024:	0e 94 a4 4a 	call	0x9548	; 0x9548 <ld_clust.isra.4>
    c028:	f6 01       	movw	r30, r12
    c02a:	65 8b       	std	Z+21, r22	; 0x15
    c02c:	76 8b       	std	Z+22, r23	; 0x16
    c02e:	87 8b       	std	Z+23, r24	; 0x17
    c030:	90 8f       	std	Z+24, r25	; 0x18
    c032:	02 c0       	rjmp	.+4      	; 0xc038 <f_chdir+0x96>
    c034:	05 e0       	ldi	r16, 0x05	; 5
    c036:	10 e0       	ldi	r17, 0x00	; 0
    c038:	c7 01       	movw	r24, r14
    c03a:	0e 94 15 6a 	call	0xd42a	; 0xd42a <ff_memfree>
    c03e:	04 30       	cpi	r16, 0x04	; 4
    c040:	11 05       	cpc	r17, r1
    c042:	29 f4       	brne	.+10     	; 0xc04e <f_chdir+0xac>
    c044:	85 e0       	ldi	r24, 0x05	; 5
    c046:	01 c0       	rjmp	.+2      	; 0xc04a <f_chdir+0xa8>
    c048:	81 e1       	ldi	r24, 0x11	; 17
    c04a:	90 e0       	ldi	r25, 0x00	; 0
    c04c:	01 c0       	rjmp	.+2      	; 0xc050 <f_chdir+0xae>
    c04e:	c8 01       	movw	r24, r16
    c050:	e2 96       	adiw	r28, 0x32	; 50
    c052:	e8 e0       	ldi	r30, 0x08	; 8
    c054:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

0000c058 <f_getcwd>:
    c058:	a8 e4       	ldi	r26, 0x48	; 72
    c05a:	b1 e0       	ldi	r27, 0x01	; 1
    c05c:	e2 e3       	ldi	r30, 0x32	; 50
    c05e:	f0 e6       	ldi	r31, 0x60	; 96
    c060:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    c064:	c9 5b       	subi	r28, 0xB9	; 185
    c066:	de 4f       	sbci	r29, 0xFE	; 254
    c068:	99 83       	std	Y+1, r25	; 0x01
    c06a:	88 83       	st	Y, r24
    c06c:	c7 54       	subi	r28, 0x47	; 71
    c06e:	d1 40       	sbci	r29, 0x01	; 1
    c070:	4b 01       	movw	r8, r22
    c072:	7c 01       	movw	r14, r24
    c074:	fc 01       	movw	r30, r24
    c076:	10 82       	st	Z, r1
    c078:	40 e0       	ldi	r20, 0x00	; 0
    c07a:	be 01       	movw	r22, r28
    c07c:	6b 5b       	subi	r22, 0xBB	; 187
    c07e:	7e 4f       	sbci	r23, 0xFE	; 254
    c080:	ce 01       	movw	r24, r28
    c082:	89 5b       	subi	r24, 0xB9	; 185
    c084:	9e 4f       	sbci	r25, 0xFE	; 254
    c086:	0e 94 ae 4c 	call	0x995c	; 0x995c <mount_volume>
    c08a:	1c 01       	movw	r2, r24
    c08c:	89 2b       	or	r24, r25
    c08e:	09 f0       	breq	.+2      	; 0xc092 <f_getcwd+0x3a>
    c090:	03 c1       	rjmp	.+518    	; 0xc298 <f_getcwd+0x240>
    c092:	cb 5b       	subi	r28, 0xBB	; 187
    c094:	de 4f       	sbci	r29, 0xFE	; 254
    c096:	88 81       	ld	r24, Y
    c098:	99 81       	ldd	r25, Y+1	; 0x01
    c09a:	c5 54       	subi	r28, 0x45	; 69
    c09c:	d1 40       	sbci	r29, 0x01	; 1
    c09e:	c9 5e       	subi	r28, 0xE9	; 233
    c0a0:	de 4f       	sbci	r29, 0xFE	; 254
    c0a2:	99 83       	std	Y+1, r25	; 0x01
    c0a4:	88 83       	st	Y, r24
    c0a6:	c7 51       	subi	r28, 0x17	; 23
    c0a8:	d1 40       	sbci	r29, 0x01	; 1
    c0aa:	80 e0       	ldi	r24, 0x00	; 0
    c0ac:	92 e0       	ldi	r25, 0x02	; 2
    c0ae:	0e 94 12 6a 	call	0xd424	; 0xd424 <ff_memalloc>
    c0b2:	5c 01       	movw	r10, r24
    c0b4:	00 97       	sbiw	r24, 0x00	; 0
    c0b6:	09 f4       	brne	.+2      	; 0xc0ba <f_getcwd+0x62>
    c0b8:	f3 c0       	rjmp	.+486    	; 0xc2a0 <f_getcwd+0x248>
    c0ba:	cb 5b       	subi	r28, 0xBB	; 187
    c0bc:	de 4f       	sbci	r29, 0xFE	; 254
    c0be:	e8 81       	ld	r30, Y
    c0c0:	f9 81       	ldd	r31, Y+1	; 0x01
    c0c2:	c5 54       	subi	r28, 0x45	; 69
    c0c4:	d1 40       	sbci	r29, 0x01	; 1
    c0c6:	94 87       	std	Z+12, r25	; 0x0c
    c0c8:	83 87       	std	Z+11, r24	; 0x0b
    c0ca:	85 89       	ldd	r24, Z+21	; 0x15
    c0cc:	96 89       	ldd	r25, Z+22	; 0x16
    c0ce:	a7 89       	ldd	r26, Z+23	; 0x17
    c0d0:	b0 8d       	ldd	r27, Z+24	; 0x18
    c0d2:	c3 5e       	subi	r28, 0xE3	; 227
    c0d4:	de 4f       	sbci	r29, 0xFE	; 254
    c0d6:	88 83       	st	Y, r24
    c0d8:	99 83       	std	Y+1, r25	; 0x01
    c0da:	aa 83       	std	Y+2, r26	; 0x02
    c0dc:	bb 83       	std	Y+3, r27	; 0x03
    c0de:	cd 51       	subi	r28, 0x1D	; 29
    c0e0:	d1 40       	sbci	r29, 0x01	; 1
    c0e2:	84 01       	movw	r16, r8
    c0e4:	ce 01       	movw	r24, r28
    c0e6:	01 96       	adiw	r24, 0x01	; 1
    c0e8:	6c 01       	movw	r12, r24
    c0ea:	c3 5e       	subi	r28, 0xE3	; 227
    c0ec:	de 4f       	sbci	r29, 0xFE	; 254
    c0ee:	48 80       	ld	r4, Y
    c0f0:	59 80       	ldd	r5, Y+1	; 0x01
    c0f2:	6a 80       	ldd	r6, Y+2	; 0x02
    c0f4:	7b 80       	ldd	r7, Y+3	; 0x03
    c0f6:	cd 51       	subi	r28, 0x1D	; 29
    c0f8:	d1 40       	sbci	r29, 0x01	; 1
    c0fa:	41 14       	cp	r4, r1
    c0fc:	51 04       	cpc	r5, r1
    c0fe:	61 04       	cpc	r6, r1
    c100:	71 04       	cpc	r7, r1
    c102:	09 f4       	brne	.+2      	; 0xc106 <f_getcwd+0xae>
    c104:	a3 c0       	rjmp	.+326    	; 0xc24c <f_getcwd+0x1f4>
    c106:	40 e2       	ldi	r20, 0x20	; 32
    c108:	50 e0       	ldi	r21, 0x00	; 0
    c10a:	60 e0       	ldi	r22, 0x00	; 0
    c10c:	70 e0       	ldi	r23, 0x00	; 0
    c10e:	ce 01       	movw	r24, r28
    c110:	89 5e       	subi	r24, 0xE9	; 233
    c112:	9e 4f       	sbci	r25, 0xFE	; 254
    c114:	0e 94 c3 50 	call	0xa186	; 0xa186 <dir_sdi>
    c118:	00 97       	sbiw	r24, 0x00	; 0
    c11a:	09 f0       	breq	.+2      	; 0xc11e <f_getcwd+0xc6>
    c11c:	c6 c0       	rjmp	.+396    	; 0xc2aa <f_getcwd+0x252>
    c11e:	c3 5d       	subi	r28, 0xD3	; 211
    c120:	de 4f       	sbci	r29, 0xFE	; 254
    c122:	48 81       	ld	r20, Y
    c124:	59 81       	ldd	r21, Y+1	; 0x01
    c126:	6a 81       	ldd	r22, Y+2	; 0x02
    c128:	7b 81       	ldd	r23, Y+3	; 0x03
    c12a:	cd 52       	subi	r28, 0x2D	; 45
    c12c:	d1 40       	sbci	r29, 0x01	; 1
    c12e:	cb 5b       	subi	r28, 0xBB	; 187
    c130:	de 4f       	sbci	r29, 0xFE	; 254
    c132:	88 81       	ld	r24, Y
    c134:	99 81       	ldd	r25, Y+1	; 0x01
    c136:	c5 54       	subi	r28, 0x45	; 69
    c138:	d1 40       	sbci	r29, 0x01	; 1
    c13a:	0e 94 33 4c 	call	0x9866	; 0x9866 <move_window>
    c13e:	00 97       	sbiw	r24, 0x00	; 0
    c140:	09 f0       	breq	.+2      	; 0xc144 <f_getcwd+0xec>
    c142:	b3 c0       	rjmp	.+358    	; 0xc2aa <f_getcwd+0x252>
    c144:	cf 5c       	subi	r28, 0xCF	; 207
    c146:	de 4f       	sbci	r29, 0xFE	; 254
    c148:	68 81       	ld	r22, Y
    c14a:	79 81       	ldd	r23, Y+1	; 0x01
    c14c:	c1 53       	subi	r28, 0x31	; 49
    c14e:	d1 40       	sbci	r29, 0x01	; 1
    c150:	cb 5b       	subi	r28, 0xBB	; 187
    c152:	de 4f       	sbci	r29, 0xFE	; 254
    c154:	e8 81       	ld	r30, Y
    c156:	f9 81       	ldd	r31, Y+1	; 0x01
    c158:	c5 54       	subi	r28, 0x45	; 69
    c15a:	d1 40       	sbci	r29, 0x01	; 1
    c15c:	80 81       	ld	r24, Z
    c15e:	0e 94 a4 4a 	call	0x9548	; 0x9548 <ld_clust.isra.4>
    c162:	c3 5e       	subi	r28, 0xE3	; 227
    c164:	de 4f       	sbci	r29, 0xFE	; 254
    c166:	68 83       	st	Y, r22
    c168:	79 83       	std	Y+1, r23	; 0x01
    c16a:	8a 83       	std	Y+2, r24	; 0x02
    c16c:	9b 83       	std	Y+3, r25	; 0x03
    c16e:	cd 51       	subi	r28, 0x1D	; 29
    c170:	d1 40       	sbci	r29, 0x01	; 1
    c172:	40 e0       	ldi	r20, 0x00	; 0
    c174:	50 e0       	ldi	r21, 0x00	; 0
    c176:	ba 01       	movw	r22, r20
    c178:	ce 01       	movw	r24, r28
    c17a:	89 5e       	subi	r24, 0xE9	; 233
    c17c:	9e 4f       	sbci	r25, 0xFE	; 254
    c17e:	0e 94 c3 50 	call	0xa186	; 0xa186 <dir_sdi>
    c182:	00 97       	sbiw	r24, 0x00	; 0
    c184:	09 f0       	breq	.+2      	; 0xc188 <f_getcwd+0x130>
    c186:	91 c0       	rjmp	.+290    	; 0xc2aa <f_getcwd+0x252>
    c188:	60 e0       	ldi	r22, 0x00	; 0
    c18a:	70 e0       	ldi	r23, 0x00	; 0
    c18c:	ce 01       	movw	r24, r28
    c18e:	89 5e       	subi	r24, 0xE9	; 233
    c190:	9e 4f       	sbci	r25, 0xFE	; 254
    c192:	0e 94 5d 54 	call	0xa8ba	; 0xa8ba <dir_read>
    c196:	00 97       	sbiw	r24, 0x00	; 0
    c198:	09 f0       	breq	.+2      	; 0xc19c <f_getcwd+0x144>
    c19a:	89 c0       	rjmp	.+274    	; 0xc2ae <f_getcwd+0x256>
    c19c:	cf 5c       	subi	r28, 0xCF	; 207
    c19e:	de 4f       	sbci	r29, 0xFE	; 254
    c1a0:	68 81       	ld	r22, Y
    c1a2:	79 81       	ldd	r23, Y+1	; 0x01
    c1a4:	c1 53       	subi	r28, 0x31	; 49
    c1a6:	d1 40       	sbci	r29, 0x01	; 1
    c1a8:	cb 5b       	subi	r28, 0xBB	; 187
    c1aa:	de 4f       	sbci	r29, 0xFE	; 254
    c1ac:	e8 81       	ld	r30, Y
    c1ae:	f9 81       	ldd	r31, Y+1	; 0x01
    c1b0:	c5 54       	subi	r28, 0x45	; 69
    c1b2:	d1 40       	sbci	r29, 0x01	; 1
    c1b4:	80 81       	ld	r24, Z
    c1b6:	0e 94 a4 4a 	call	0x9548	; 0x9548 <ld_clust.isra.4>
    c1ba:	46 16       	cp	r4, r22
    c1bc:	57 06       	cpc	r5, r23
    c1be:	68 06       	cpc	r6, r24
    c1c0:	79 06       	cpc	r7, r25
    c1c2:	41 f4       	brne	.+16     	; 0xc1d4 <f_getcwd+0x17c>
    c1c4:	b6 01       	movw	r22, r12
    c1c6:	ce 01       	movw	r24, r28
    c1c8:	89 5e       	subi	r24, 0xE9	; 233
    c1ca:	9e 4f       	sbci	r25, 0xFE	; 254
    c1cc:	0e 94 8b 49 	call	0x9316	; 0x9316 <get_fileinfo>
    c1d0:	f6 01       	movw	r30, r12
    c1d2:	0a c0       	rjmp	.+20     	; 0xc1e8 <f_getcwd+0x190>
    c1d4:	60 e0       	ldi	r22, 0x00	; 0
    c1d6:	70 e0       	ldi	r23, 0x00	; 0
    c1d8:	ce 01       	movw	r24, r28
    c1da:	89 5e       	subi	r24, 0xE9	; 233
    c1dc:	9e 4f       	sbci	r25, 0xFE	; 254
    c1de:	0e 94 3b 53 	call	0xa676	; 0xa676 <dir_next>
    c1e2:	00 97       	sbiw	r24, 0x00	; 0
    c1e4:	89 f2       	breq	.-94     	; 0xc188 <f_getcwd+0x130>
    c1e6:	63 c0       	rjmp	.+198    	; 0xc2ae <f_getcwd+0x256>
    c1e8:	cf 01       	movw	r24, r30
    c1ea:	8c 19       	sub	r24, r12
    c1ec:	9d 09       	sbc	r25, r13
    c1ee:	31 96       	adiw	r30, 0x01	; 1
    c1f0:	25 89       	ldd	r18, Z+21	; 0x15
    c1f2:	21 11       	cpse	r18, r1
    c1f4:	f9 cf       	rjmp	.-14     	; 0xc1e8 <f_getcwd+0x190>
    c1f6:	9c 01       	movw	r18, r24
    c1f8:	2f 5f       	subi	r18, 0xFF	; 255
    c1fa:	3f 4f       	sbci	r19, 0xFF	; 255
    c1fc:	02 17       	cp	r16, r18
    c1fe:	13 07       	cpc	r17, r19
    c200:	08 f4       	brcc	.+2      	; 0xc204 <f_getcwd+0x1ac>
    c202:	51 c0       	rjmp	.+162    	; 0xc2a6 <f_getcwd+0x24e>
    c204:	f6 01       	movw	r30, r12
    c206:	e8 0f       	add	r30, r24
    c208:	f9 1f       	adc	r31, r25
    c20a:	98 01       	movw	r18, r16
    c20c:	ce 16       	cp	r12, r30
    c20e:	df 06       	cpc	r13, r31
    c210:	71 f0       	breq	.+28     	; 0xc22e <f_getcwd+0x1d6>
    c212:	21 50       	subi	r18, 0x01	; 1
    c214:	31 09       	sbc	r19, r1
    c216:	45 89       	ldd	r20, Z+21	; 0x15
    c218:	c9 5b       	subi	r28, 0xB9	; 185
    c21a:	de 4f       	sbci	r29, 0xFE	; 254
    c21c:	a8 81       	ld	r26, Y
    c21e:	b9 81       	ldd	r27, Y+1	; 0x01
    c220:	c7 54       	subi	r28, 0x47	; 71
    c222:	d1 40       	sbci	r29, 0x01	; 1
    c224:	a2 0f       	add	r26, r18
    c226:	b3 1f       	adc	r27, r19
    c228:	4c 93       	st	X, r20
    c22a:	31 97       	sbiw	r30, 0x01	; 1
    c22c:	ef cf       	rjmp	.-34     	; 0xc20c <f_getcwd+0x1b4>
    c22e:	80 95       	com	r24
    c230:	90 95       	com	r25
    c232:	08 0f       	add	r16, r24
    c234:	19 1f       	adc	r17, r25
    c236:	c9 5b       	subi	r28, 0xB9	; 185
    c238:	de 4f       	sbci	r29, 0xFE	; 254
    c23a:	e8 81       	ld	r30, Y
    c23c:	f9 81       	ldd	r31, Y+1	; 0x01
    c23e:	c7 54       	subi	r28, 0x47	; 71
    c240:	d1 40       	sbci	r29, 0x01	; 1
    c242:	e0 0f       	add	r30, r16
    c244:	f1 1f       	adc	r31, r17
    c246:	9f e2       	ldi	r25, 0x2F	; 47
    c248:	90 83       	st	Z, r25
    c24a:	4f cf       	rjmp	.-354    	; 0xc0ea <f_getcwd+0x92>
    c24c:	08 15       	cp	r16, r8
    c24e:	19 05       	cpc	r17, r9
    c250:	61 f4       	brne	.+24     	; 0xc26a <f_getcwd+0x212>
    c252:	01 50       	subi	r16, 0x01	; 1
    c254:	11 09       	sbc	r17, r1
    c256:	c9 5b       	subi	r28, 0xB9	; 185
    c258:	de 4f       	sbci	r29, 0xFE	; 254
    c25a:	e8 81       	ld	r30, Y
    c25c:	f9 81       	ldd	r31, Y+1	; 0x01
    c25e:	c7 54       	subi	r28, 0x47	; 71
    c260:	d1 40       	sbci	r29, 0x01	; 1
    c262:	e0 0f       	add	r30, r16
    c264:	f1 1f       	adc	r31, r17
    c266:	8f e2       	ldi	r24, 0x2F	; 47
    c268:	80 83       	st	Z, r24
    c26a:	ef ef       	ldi	r30, 0xFF	; 255
    c26c:	ee 1a       	sub	r14, r30
    c26e:	fe 0a       	sbc	r15, r30
    c270:	c9 5b       	subi	r28, 0xB9	; 185
    c272:	de 4f       	sbci	r29, 0xFE	; 254
    c274:	e8 81       	ld	r30, Y
    c276:	f9 81       	ldd	r31, Y+1	; 0x01
    c278:	c7 54       	subi	r28, 0x47	; 71
    c27a:	d1 40       	sbci	r29, 0x01	; 1
    c27c:	e0 0f       	add	r30, r16
    c27e:	f1 1f       	adc	r31, r17
    c280:	80 81       	ld	r24, Z
    c282:	f7 01       	movw	r30, r14
    c284:	31 97       	sbiw	r30, 0x01	; 1
    c286:	80 83       	st	Z, r24
    c288:	0f 5f       	subi	r16, 0xFF	; 255
    c28a:	1f 4f       	sbci	r17, 0xFF	; 255
    c28c:	08 15       	cp	r16, r8
    c28e:	19 05       	cpc	r17, r9
    c290:	60 f3       	brcs	.-40     	; 0xc26a <f_getcwd+0x212>
    c292:	c5 01       	movw	r24, r10
    c294:	0e 94 15 6a 	call	0xd42a	; 0xd42a <ff_memfree>
    c298:	f7 01       	movw	r30, r14
    c29a:	10 82       	st	Z, r1
    c29c:	c1 01       	movw	r24, r2
    c29e:	0d c0       	rjmp	.+26     	; 0xc2ba <f_getcwd+0x262>
    c2a0:	81 e1       	ldi	r24, 0x11	; 17
    c2a2:	90 e0       	ldi	r25, 0x00	; 0
    c2a4:	0a c0       	rjmp	.+20     	; 0xc2ba <f_getcwd+0x262>
    c2a6:	81 e1       	ldi	r24, 0x11	; 17
    c2a8:	90 e0       	ldi	r25, 0x00	; 0
    c2aa:	1c 01       	movw	r2, r24
    c2ac:	f2 cf       	rjmp	.-28     	; 0xc292 <f_getcwd+0x23a>
    c2ae:	84 30       	cpi	r24, 0x04	; 4
    c2b0:	91 05       	cpc	r25, r1
    c2b2:	d9 f7       	brne	.-10     	; 0xc2aa <f_getcwd+0x252>
    c2b4:	82 e0       	ldi	r24, 0x02	; 2
    c2b6:	90 e0       	ldi	r25, 0x00	; 0
    c2b8:	f8 cf       	rjmp	.-16     	; 0xc2aa <f_getcwd+0x252>
    c2ba:	c8 5b       	subi	r28, 0xB8	; 184
    c2bc:	de 4f       	sbci	r29, 0xFE	; 254
    c2be:	e2 e1       	ldi	r30, 0x12	; 18
    c2c0:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0000c2c4 <f_lseek>:
    c2c4:	aa e0       	ldi	r26, 0x0A	; 10
    c2c6:	b0 e0       	ldi	r27, 0x00	; 0
    c2c8:	e8 e6       	ldi	r30, 0x68	; 104
    c2ca:	f1 e6       	ldi	r31, 0x61	; 97
    c2cc:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    c2d0:	1c 01       	movw	r2, r24
    c2d2:	6a 01       	movw	r12, r20
    c2d4:	7b 01       	movw	r14, r22
    c2d6:	be 01       	movw	r22, r28
    c2d8:	6f 5f       	subi	r22, 0xFF	; 255
    c2da:	7f 4f       	sbci	r23, 0xFF	; 255
    c2dc:	0e 94 a7 48 	call	0x914e	; 0x914e <validate>
    c2e0:	00 97       	sbiw	r24, 0x00	; 0
    c2e2:	09 f0       	breq	.+2      	; 0xc2e6 <f_lseek+0x22>
    c2e4:	c6 c2       	rjmp	.+1420   	; 0xc872 <f_lseek+0x5ae>
    c2e6:	d1 01       	movw	r26, r2
    c2e8:	1f 96       	adiw	r26, 0x0f	; 15
    c2ea:	8c 91       	ld	r24, X
    c2ec:	1f 97       	sbiw	r26, 0x0f	; 15
    c2ee:	90 e0       	ldi	r25, 0x00	; 0
    c2f0:	00 97       	sbiw	r24, 0x00	; 0
    c2f2:	09 f0       	breq	.+2      	; 0xc2f6 <f_lseek+0x32>
    c2f4:	be c2       	rjmp	.+1404   	; 0xc872 <f_lseek+0x5ae>
    c2f6:	92 96       	adiw	r26, 0x22	; 34
    c2f8:	ed 91       	ld	r30, X+
    c2fa:	fc 91       	ld	r31, X
    c2fc:	93 97       	sbiw	r26, 0x23	; 35
    c2fe:	30 97       	sbiw	r30, 0x00	; 0
    c300:	09 f4       	brne	.+2      	; 0xc304 <f_lseek+0x40>
    c302:	3a c1       	rjmp	.+628    	; 0xc578 <f_lseek+0x2b4>
    c304:	bf ef       	ldi	r27, 0xFF	; 255
    c306:	cb 16       	cp	r12, r27
    c308:	db 06       	cpc	r13, r27
    c30a:	eb 06       	cpc	r14, r27
    c30c:	fb 06       	cpc	r15, r27
    c30e:	09 f0       	breq	.+2      	; 0xc312 <f_lseek+0x4e>
    c310:	9f c0       	rjmp	.+318    	; 0xc450 <f_lseek+0x18c>
    c312:	8f 01       	movw	r16, r30
    c314:	0c 5f       	subi	r16, 0xFC	; 252
    c316:	1f 4f       	sbci	r17, 0xFF	; 255
    c318:	20 81       	ld	r18, Z
    c31a:	31 81       	ldd	r19, Z+1	; 0x01
    c31c:	42 81       	ldd	r20, Z+2	; 0x02
    c31e:	53 81       	ldd	r21, Z+3	; 0x03
    c320:	2f 83       	std	Y+7, r18	; 0x07
    c322:	38 87       	std	Y+8, r19	; 0x08
    c324:	49 87       	std	Y+9, r20	; 0x09
    c326:	5a 87       	std	Y+10, r21	; 0x0a
    c328:	d1 01       	movw	r26, r2
    c32a:	16 96       	adiw	r26, 0x06	; 6
    c32c:	8d 90       	ld	r8, X+
    c32e:	9d 90       	ld	r9, X+
    c330:	ad 90       	ld	r10, X+
    c332:	bc 90       	ld	r11, X
    c334:	19 97       	sbiw	r26, 0x09	; 9
    c336:	52 e0       	ldi	r21, 0x02	; 2
    c338:	c5 2e       	mov	r12, r21
    c33a:	d1 2c       	mov	r13, r1
    c33c:	e1 2c       	mov	r14, r1
    c33e:	f1 2c       	mov	r15, r1
    c340:	81 14       	cp	r8, r1
    c342:	91 04       	cpc	r9, r1
    c344:	a1 04       	cpc	r10, r1
    c346:	b1 04       	cpc	r11, r1
    c348:	09 f4       	brne	.+2      	; 0xc34c <f_lseek+0x88>
    c34a:	68 c0       	rjmp	.+208    	; 0xc41c <f_lseek+0x158>
    c34c:	24 01       	movw	r4, r8
    c34e:	35 01       	movw	r6, r10
    c350:	1b 82       	std	Y+3, r1	; 0x03
    c352:	1c 82       	std	Y+4, r1	; 0x04
    c354:	1d 82       	std	Y+5, r1	; 0x05
    c356:	1e 82       	std	Y+6, r1	; 0x06
    c358:	2b 81       	ldd	r18, Y+3	; 0x03
    c35a:	3c 81       	ldd	r19, Y+4	; 0x04
    c35c:	4d 81       	ldd	r20, Y+5	; 0x05
    c35e:	5e 81       	ldd	r21, Y+6	; 0x06
    c360:	2f 5f       	subi	r18, 0xFF	; 255
    c362:	3f 4f       	sbci	r19, 0xFF	; 255
    c364:	4f 4f       	sbci	r20, 0xFF	; 255
    c366:	5f 4f       	sbci	r21, 0xFF	; 255
    c368:	2b 83       	std	Y+3, r18	; 0x03
    c36a:	3c 83       	std	Y+4, r19	; 0x04
    c36c:	4d 83       	std	Y+5, r20	; 0x05
    c36e:	5e 83       	std	Y+6, r21	; 0x06
    c370:	b3 01       	movw	r22, r6
    c372:	a2 01       	movw	r20, r4
    c374:	d1 01       	movw	r26, r2
    c376:	8d 91       	ld	r24, X+
    c378:	9c 91       	ld	r25, X
    c37a:	0e 94 0f 50 	call	0xa01e	; 0xa01e <get_fat.isra.10>
    c37e:	62 30       	cpi	r22, 0x02	; 2
    c380:	71 05       	cpc	r23, r1
    c382:	81 05       	cpc	r24, r1
    c384:	91 05       	cpc	r25, r1
    c386:	20 f4       	brcc	.+8      	; 0xc390 <f_lseek+0xcc>
    c388:	82 e0       	ldi	r24, 0x02	; 2
    c38a:	f1 01       	movw	r30, r2
    c38c:	87 87       	std	Z+15, r24	; 0x0f
    c38e:	0a c0       	rjmp	.+20     	; 0xc3a4 <f_lseek+0xe0>
    c390:	6f 3f       	cpi	r22, 0xFF	; 255
    c392:	ff ef       	ldi	r31, 0xFF	; 255
    c394:	7f 07       	cpc	r23, r31
    c396:	8f 07       	cpc	r24, r31
    c398:	9f 07       	cpc	r25, r31
    c39a:	31 f4       	brne	.+12     	; 0xc3a8 <f_lseek+0xe4>
    c39c:	81 e0       	ldi	r24, 0x01	; 1
    c39e:	d1 01       	movw	r26, r2
    c3a0:	1f 96       	adiw	r26, 0x0f	; 15
    c3a2:	8c 93       	st	X, r24
    c3a4:	90 e0       	ldi	r25, 0x00	; 0
    c3a6:	65 c2       	rjmp	.+1226   	; 0xc872 <f_lseek+0x5ae>
    c3a8:	a3 01       	movw	r20, r6
    c3aa:	92 01       	movw	r18, r4
    c3ac:	2f 5f       	subi	r18, 0xFF	; 255
    c3ae:	3f 4f       	sbci	r19, 0xFF	; 255
    c3b0:	4f 4f       	sbci	r20, 0xFF	; 255
    c3b2:	5f 4f       	sbci	r21, 0xFF	; 255
    c3b4:	2b 01       	movw	r4, r22
    c3b6:	3c 01       	movw	r6, r24
    c3b8:	62 17       	cp	r22, r18
    c3ba:	73 07       	cpc	r23, r19
    c3bc:	84 07       	cpc	r24, r20
    c3be:	95 07       	cpc	r25, r21
    c3c0:	59 f2       	breq	.-106    	; 0xc358 <f_lseek+0x94>
    c3c2:	b2 e0       	ldi	r27, 0x02	; 2
    c3c4:	cb 0e       	add	r12, r27
    c3c6:	d1 1c       	adc	r13, r1
    c3c8:	e1 1c       	adc	r14, r1
    c3ca:	f1 1c       	adc	r15, r1
    c3cc:	2f 81       	ldd	r18, Y+7	; 0x07
    c3ce:	38 85       	ldd	r19, Y+8	; 0x08
    c3d0:	49 85       	ldd	r20, Y+9	; 0x09
    c3d2:	5a 85       	ldd	r21, Y+10	; 0x0a
    c3d4:	2c 15       	cp	r18, r12
    c3d6:	3d 05       	cpc	r19, r13
    c3d8:	4e 05       	cpc	r20, r14
    c3da:	5f 05       	cpc	r21, r15
    c3dc:	88 f0       	brcs	.+34     	; 0xc400 <f_lseek+0x13c>
    c3de:	2b 81       	ldd	r18, Y+3	; 0x03
    c3e0:	3c 81       	ldd	r19, Y+4	; 0x04
    c3e2:	4d 81       	ldd	r20, Y+5	; 0x05
    c3e4:	5e 81       	ldd	r21, Y+6	; 0x06
    c3e6:	d8 01       	movw	r26, r16
    c3e8:	2d 93       	st	X+, r18
    c3ea:	3d 93       	st	X+, r19
    c3ec:	4d 93       	st	X+, r20
    c3ee:	5c 93       	st	X, r21
    c3f0:	13 97       	sbiw	r26, 0x03	; 3
    c3f2:	f8 01       	movw	r30, r16
    c3f4:	84 82       	std	Z+4, r8	; 0x04
    c3f6:	95 82       	std	Z+5, r9	; 0x05
    c3f8:	a6 82       	std	Z+6, r10	; 0x06
    c3fa:	b7 82       	std	Z+7, r11	; 0x07
    c3fc:	08 5f       	subi	r16, 0xF8	; 248
    c3fe:	1f 4f       	sbci	r17, 0xFF	; 255
    c400:	e9 81       	ldd	r30, Y+1	; 0x01
    c402:	fa 81       	ldd	r31, Y+2	; 0x02
    c404:	81 8c       	ldd	r8, Z+25	; 0x19
    c406:	92 8c       	ldd	r9, Z+26	; 0x1a
    c408:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c40a:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c40c:	68 15       	cp	r22, r8
    c40e:	79 05       	cpc	r23, r9
    c410:	8a 05       	cpc	r24, r10
    c412:	9b 05       	cpc	r25, r11
    c414:	18 f4       	brcc	.+6      	; 0xc41c <f_lseek+0x158>
    c416:	4b 01       	movw	r8, r22
    c418:	5c 01       	movw	r10, r24
    c41a:	98 cf       	rjmp	.-208    	; 0xc34c <f_lseek+0x88>
    c41c:	d1 01       	movw	r26, r2
    c41e:	92 96       	adiw	r26, 0x22	; 34
    c420:	ed 91       	ld	r30, X+
    c422:	fc 91       	ld	r31, X
    c424:	93 97       	sbiw	r26, 0x23	; 35
    c426:	c0 82       	st	Z, r12
    c428:	d1 82       	std	Z+1, r13	; 0x01
    c42a:	e2 82       	std	Z+2, r14	; 0x02
    c42c:	f3 82       	std	Z+3, r15	; 0x03
    c42e:	2f 81       	ldd	r18, Y+7	; 0x07
    c430:	38 85       	ldd	r19, Y+8	; 0x08
    c432:	49 85       	ldd	r20, Y+9	; 0x09
    c434:	5a 85       	ldd	r21, Y+10	; 0x0a
    c436:	2c 15       	cp	r18, r12
    c438:	3d 05       	cpc	r19, r13
    c43a:	4e 05       	cpc	r20, r14
    c43c:	5f 05       	cpc	r21, r15
    c43e:	08 f4       	brcc	.+2      	; 0xc442 <f_lseek+0x17e>
    c440:	0f c2       	rjmp	.+1054   	; 0xc860 <f_lseek+0x59c>
    c442:	d8 01       	movw	r26, r16
    c444:	1d 92       	st	X+, r1
    c446:	1d 92       	st	X+, r1
    c448:	1d 92       	st	X+, r1
    c44a:	1c 92       	st	X, r1
    c44c:	13 97       	sbiw	r26, 0x03	; 3
    c44e:	06 c2       	rjmp	.+1036   	; 0xc85c <f_lseek+0x598>
    c450:	f1 01       	movw	r30, r2
    c452:	82 85       	ldd	r24, Z+10	; 0x0a
    c454:	93 85       	ldd	r25, Z+11	; 0x0b
    c456:	a4 85       	ldd	r26, Z+12	; 0x0c
    c458:	b5 85       	ldd	r27, Z+13	; 0x0d
    c45a:	46 01       	movw	r8, r12
    c45c:	57 01       	movw	r10, r14
    c45e:	8c 15       	cp	r24, r12
    c460:	9d 05       	cpc	r25, r13
    c462:	ae 05       	cpc	r26, r14
    c464:	bf 05       	cpc	r27, r15
    c466:	10 f4       	brcc	.+4      	; 0xc46c <f_lseek+0x1a8>
    c468:	4c 01       	movw	r8, r24
    c46a:	5d 01       	movw	r10, r26
    c46c:	d1 01       	movw	r26, r2
    c46e:	50 96       	adiw	r26, 0x10	; 16
    c470:	8d 92       	st	X+, r8
    c472:	9d 92       	st	X+, r9
    c474:	ad 92       	st	X+, r10
    c476:	bc 92       	st	X, r11
    c478:	53 97       	sbiw	r26, 0x13	; 19
    c47a:	81 14       	cp	r8, r1
    c47c:	91 04       	cpc	r9, r1
    c47e:	a1 04       	cpc	r10, r1
    c480:	b1 04       	cpc	r11, r1
    c482:	09 f4       	brne	.+2      	; 0xc486 <f_lseek+0x1c2>
    c484:	eb c1       	rjmp	.+982    	; 0xc85c <f_lseek+0x598>
    c486:	24 01       	movw	r4, r8
    c488:	35 01       	movw	r6, r10
    c48a:	b1 e0       	ldi	r27, 0x01	; 1
    c48c:	4b 1a       	sub	r4, r27
    c48e:	51 08       	sbc	r5, r1
    c490:	61 08       	sbc	r6, r1
    c492:	71 08       	sbc	r7, r1
    c494:	b3 01       	movw	r22, r6
    c496:	a2 01       	movw	r20, r4
    c498:	c1 01       	movw	r24, r2
    c49a:	0e 94 30 48 	call	0x9060	; 0x9060 <clmt_clust>
    c49e:	ab 01       	movw	r20, r22
    c4a0:	bc 01       	movw	r22, r24
    c4a2:	f1 01       	movw	r30, r2
    c4a4:	44 8b       	std	Z+20, r20	; 0x14
    c4a6:	55 8b       	std	Z+21, r21	; 0x15
    c4a8:	66 8b       	std	Z+22, r22	; 0x16
    c4aa:	77 8b       	std	Z+23, r23	; 0x17
    c4ac:	e9 80       	ldd	r14, Y+1	; 0x01
    c4ae:	fa 80       	ldd	r15, Y+2	; 0x02
    c4b0:	c7 01       	movw	r24, r14
    c4b2:	0e 94 08 48 	call	0x9010	; 0x9010 <clst2sect>
    c4b6:	61 15       	cp	r22, r1
    c4b8:	71 05       	cpc	r23, r1
    c4ba:	81 05       	cpc	r24, r1
    c4bc:	91 05       	cpc	r25, r1
    c4be:	09 f4       	brne	.+2      	; 0xc4c2 <f_lseek+0x1fe>
    c4c0:	63 cf       	rjmp	.-314    	; 0xc388 <f_lseek+0xc4>
    c4c2:	95 01       	movw	r18, r10
    c4c4:	84 01       	movw	r16, r8
    c4c6:	11 70       	andi	r17, 0x01	; 1
    c4c8:	22 27       	eor	r18, r18
    c4ca:	33 27       	eor	r19, r19
    c4cc:	01 15       	cp	r16, r1
    c4ce:	11 05       	cpc	r17, r1
    c4d0:	21 05       	cpc	r18, r1
    c4d2:	31 05       	cpc	r19, r1
    c4d4:	09 f4       	brne	.+2      	; 0xc4d8 <f_lseek+0x214>
    c4d6:	c2 c1       	rjmp	.+900    	; 0xc85c <f_lseek+0x598>
    c4d8:	d7 01       	movw	r26, r14
    c4da:	19 96       	adiw	r26, 0x09	; 9
    c4dc:	8d 90       	ld	r8, X+
    c4de:	9c 90       	ld	r9, X
    c4e0:	1a 97       	sbiw	r26, 0x0a	; 10
    c4e2:	b1 e0       	ldi	r27, 0x01	; 1
    c4e4:	8b 1a       	sub	r8, r27
    c4e6:	91 08       	sbc	r9, r1
    c4e8:	a1 2c       	mov	r10, r1
    c4ea:	b1 2c       	mov	r11, r1
    c4ec:	49 e0       	ldi	r20, 0x09	; 9
    c4ee:	76 94       	lsr	r7
    c4f0:	67 94       	ror	r6
    c4f2:	57 94       	ror	r5
    c4f4:	47 94       	ror	r4
    c4f6:	4a 95       	dec	r20
    c4f8:	d1 f7       	brne	.-12     	; 0xc4ee <f_lseek+0x22a>
    c4fa:	48 20       	and	r4, r8
    c4fc:	59 20       	and	r5, r9
    c4fe:	6a 20       	and	r6, r10
    c500:	7b 20       	and	r7, r11
    c502:	53 01       	movw	r10, r6
    c504:	42 01       	movw	r8, r4
    c506:	86 0e       	add	r8, r22
    c508:	97 1e       	adc	r9, r23
    c50a:	a8 1e       	adc	r10, r24
    c50c:	b9 1e       	adc	r11, r25
    c50e:	f1 01       	movw	r30, r2
    c510:	20 8d       	ldd	r18, Z+24	; 0x18
    c512:	31 8d       	ldd	r19, Z+25	; 0x19
    c514:	42 8d       	ldd	r20, Z+26	; 0x1a
    c516:	53 8d       	ldd	r21, Z+27	; 0x1b
    c518:	82 16       	cp	r8, r18
    c51a:	93 06       	cpc	r9, r19
    c51c:	a4 06       	cpc	r10, r20
    c51e:	b5 06       	cpc	r11, r21
    c520:	09 f4       	brne	.+2      	; 0xc524 <f_lseek+0x260>
    c522:	9c c1       	rjmp	.+824    	; 0xc85c <f_lseek+0x598>
    c524:	86 85       	ldd	r24, Z+14	; 0x0e
    c526:	b1 01       	movw	r22, r2
    c528:	6c 5d       	subi	r22, 0xDC	; 220
    c52a:	7f 4f       	sbci	r23, 0xFF	; 255
    c52c:	6b 01       	movw	r12, r22
    c52e:	87 ff       	sbrs	r24, 7
    c530:	0e c0       	rjmp	.+28     	; 0xc54e <f_lseek+0x28a>
    c532:	01 e0       	ldi	r16, 0x01	; 1
    c534:	10 e0       	ldi	r17, 0x00	; 0
    c536:	d7 01       	movw	r26, r14
    c538:	11 96       	adiw	r26, 0x01	; 1
    c53a:	8c 91       	ld	r24, X
    c53c:	0e 94 de 6a 	call	0xd5bc	; 0xd5bc <disk_write>
    c540:	89 2b       	or	r24, r25
    c542:	09 f0       	breq	.+2      	; 0xc546 <f_lseek+0x282>
    c544:	2b cf       	rjmp	.-426    	; 0xc39c <f_lseek+0xd8>
    c546:	f1 01       	movw	r30, r2
    c548:	86 85       	ldd	r24, Z+14	; 0x0e
    c54a:	8f 77       	andi	r24, 0x7F	; 127
    c54c:	86 87       	std	Z+14, r24	; 0x0e
    c54e:	e9 81       	ldd	r30, Y+1	; 0x01
    c550:	fa 81       	ldd	r31, Y+2	; 0x02
    c552:	01 e0       	ldi	r16, 0x01	; 1
    c554:	10 e0       	ldi	r17, 0x00	; 0
    c556:	a5 01       	movw	r20, r10
    c558:	94 01       	movw	r18, r8
    c55a:	b6 01       	movw	r22, r12
    c55c:	81 81       	ldd	r24, Z+1	; 0x01
    c55e:	0e 94 ce 6a 	call	0xd59c	; 0xd59c <disk_read>
    c562:	89 2b       	or	r24, r25
    c564:	09 f0       	breq	.+2      	; 0xc568 <f_lseek+0x2a4>
    c566:	1a cf       	rjmp	.-460    	; 0xc39c <f_lseek+0xd8>
    c568:	d1 01       	movw	r26, r2
    c56a:	58 96       	adiw	r26, 0x18	; 24
    c56c:	8d 92       	st	X+, r8
    c56e:	9d 92       	st	X+, r9
    c570:	ad 92       	st	X+, r10
    c572:	bc 92       	st	X, r11
    c574:	5b 97       	sbiw	r26, 0x1b	; 27
    c576:	72 c1       	rjmp	.+740    	; 0xc85c <f_lseek+0x598>
    c578:	f1 01       	movw	r30, r2
    c57a:	82 85       	ldd	r24, Z+10	; 0x0a
    c57c:	93 85       	ldd	r25, Z+11	; 0x0b
    c57e:	a4 85       	ldd	r26, Z+12	; 0x0c
    c580:	b5 85       	ldd	r27, Z+13	; 0x0d
    c582:	8c 15       	cp	r24, r12
    c584:	9d 05       	cpc	r25, r13
    c586:	ae 05       	cpc	r26, r14
    c588:	bf 05       	cpc	r27, r15
    c58a:	28 f4       	brcc	.+10     	; 0xc596 <f_lseek+0x2d2>
    c58c:	26 85       	ldd	r18, Z+14	; 0x0e
    c58e:	21 fd       	sbrc	r18, 1
    c590:	02 c0       	rjmp	.+4      	; 0xc596 <f_lseek+0x2d2>
    c592:	6c 01       	movw	r12, r24
    c594:	7d 01       	movw	r14, r26
    c596:	d1 01       	movw	r26, r2
    c598:	50 96       	adiw	r26, 0x10	; 16
    c59a:	4d 90       	ld	r4, X+
    c59c:	5d 90       	ld	r5, X+
    c59e:	6d 90       	ld	r6, X+
    c5a0:	7c 90       	ld	r7, X
    c5a2:	53 97       	sbiw	r26, 0x13	; 19
    c5a4:	f1 01       	movw	r30, r2
    c5a6:	10 8a       	std	Z+16, r1	; 0x10
    c5a8:	11 8a       	std	Z+17, r1	; 0x11
    c5aa:	12 8a       	std	Z+18, r1	; 0x12
    c5ac:	13 8a       	std	Z+19, r1	; 0x13
    c5ae:	c1 14       	cp	r12, r1
    c5b0:	d1 04       	cpc	r13, r1
    c5b2:	e1 04       	cpc	r14, r1
    c5b4:	f1 04       	cpc	r15, r1
    c5b6:	09 f4       	brne	.+2      	; 0xc5ba <f_lseek+0x2f6>
    c5b8:	55 c1       	rjmp	.+682    	; 0xc864 <f_lseek+0x5a0>
    c5ba:	e9 81       	ldd	r30, Y+1	; 0x01
    c5bc:	fa 81       	ldd	r31, Y+2	; 0x02
    c5be:	81 84       	ldd	r8, Z+9	; 0x09
    c5c0:	92 84       	ldd	r9, Z+10	; 0x0a
    c5c2:	a1 2c       	mov	r10, r1
    c5c4:	b1 2c       	mov	r11, r1
    c5c6:	39 e0       	ldi	r19, 0x09	; 9
    c5c8:	88 0c       	add	r8, r8
    c5ca:	99 1c       	adc	r9, r9
    c5cc:	aa 1c       	adc	r10, r10
    c5ce:	bb 1c       	adc	r11, r11
    c5d0:	3a 95       	dec	r19
    c5d2:	d1 f7       	brne	.-12     	; 0xc5c8 <f_lseek+0x304>
    c5d4:	41 14       	cp	r4, r1
    c5d6:	51 04       	cpc	r5, r1
    c5d8:	61 04       	cpc	r6, r1
    c5da:	71 04       	cpc	r7, r1
    c5dc:	09 f4       	brne	.+2      	; 0xc5e0 <f_lseek+0x31c>
    c5de:	3f c0       	rjmp	.+126    	; 0xc65e <f_lseek+0x39a>
    c5e0:	f1 e0       	ldi	r31, 0x01	; 1
    c5e2:	4f 1a       	sub	r4, r31
    c5e4:	51 08       	sbc	r5, r1
    c5e6:	61 08       	sbc	r6, r1
    c5e8:	71 08       	sbc	r7, r1
    c5ea:	c7 01       	movw	r24, r14
    c5ec:	b6 01       	movw	r22, r12
    c5ee:	61 50       	subi	r22, 0x01	; 1
    c5f0:	71 09       	sbc	r23, r1
    c5f2:	81 09       	sbc	r24, r1
    c5f4:	91 09       	sbc	r25, r1
    c5f6:	a5 01       	movw	r20, r10
    c5f8:	94 01       	movw	r18, r8
    c5fa:	0e 94 ac e4 	call	0x1c958	; 0x1c958 <__udivmodsi4>
    c5fe:	2b 83       	std	Y+3, r18	; 0x03
    c600:	3c 83       	std	Y+4, r19	; 0x04
    c602:	4d 83       	std	Y+5, r20	; 0x05
    c604:	5e 83       	std	Y+6, r21	; 0x06
    c606:	c3 01       	movw	r24, r6
    c608:	b2 01       	movw	r22, r4
    c60a:	a5 01       	movw	r20, r10
    c60c:	94 01       	movw	r18, r8
    c60e:	0e 94 ac e4 	call	0x1c958	; 0x1c958 <__udivmodsi4>
    c612:	6b 81       	ldd	r22, Y+3	; 0x03
    c614:	7c 81       	ldd	r23, Y+4	; 0x04
    c616:	8d 81       	ldd	r24, Y+5	; 0x05
    c618:	9e 81       	ldd	r25, Y+6	; 0x06
    c61a:	62 17       	cp	r22, r18
    c61c:	73 07       	cpc	r23, r19
    c61e:	84 07       	cpc	r24, r20
    c620:	95 07       	cpc	r25, r21
    c622:	e8 f0       	brcs	.+58     	; 0xc65e <f_lseek+0x39a>
    c624:	88 27       	eor	r24, r24
    c626:	99 27       	eor	r25, r25
    c628:	dc 01       	movw	r26, r24
    c62a:	88 19       	sub	r24, r8
    c62c:	99 09       	sbc	r25, r9
    c62e:	aa 09       	sbc	r26, r10
    c630:	bb 09       	sbc	r27, r11
    c632:	48 22       	and	r4, r24
    c634:	59 22       	and	r5, r25
    c636:	6a 22       	and	r6, r26
    c638:	7b 22       	and	r7, r27
    c63a:	d1 01       	movw	r26, r2
    c63c:	50 96       	adiw	r26, 0x10	; 16
    c63e:	4d 92       	st	X+, r4
    c640:	5d 92       	st	X+, r5
    c642:	6d 92       	st	X+, r6
    c644:	7c 92       	st	X, r7
    c646:	53 97       	sbiw	r26, 0x13	; 19
    c648:	c4 18       	sub	r12, r4
    c64a:	d5 08       	sbc	r13, r5
    c64c:	e6 08       	sbc	r14, r6
    c64e:	f7 08       	sbc	r15, r7
    c650:	54 96       	adiw	r26, 0x14	; 20
    c652:	4d 91       	ld	r20, X+
    c654:	5d 91       	ld	r21, X+
    c656:	6d 91       	ld	r22, X+
    c658:	7c 91       	ld	r23, X
    c65a:	57 97       	sbiw	r26, 0x17	; 23
    c65c:	2b c0       	rjmp	.+86     	; 0xc6b4 <f_lseek+0x3f0>
    c65e:	f1 01       	movw	r30, r2
    c660:	46 81       	ldd	r20, Z+6	; 0x06
    c662:	57 81       	ldd	r21, Z+7	; 0x07
    c664:	60 85       	ldd	r22, Z+8	; 0x08
    c666:	71 85       	ldd	r23, Z+9	; 0x09
    c668:	41 15       	cp	r20, r1
    c66a:	51 05       	cpc	r21, r1
    c66c:	61 05       	cpc	r22, r1
    c66e:	71 05       	cpc	r23, r1
    c670:	e1 f4       	brne	.+56     	; 0xc6aa <f_lseek+0x3e6>
    c672:	40 e0       	ldi	r20, 0x00	; 0
    c674:	50 e0       	ldi	r21, 0x00	; 0
    c676:	ba 01       	movw	r22, r20
    c678:	c1 01       	movw	r24, r2
    c67a:	0e 94 84 51 	call	0xa308	; 0xa308 <create_chain>
    c67e:	ab 01       	movw	r20, r22
    c680:	bc 01       	movw	r22, r24
    c682:	41 30       	cpi	r20, 0x01	; 1
    c684:	51 05       	cpc	r21, r1
    c686:	61 05       	cpc	r22, r1
    c688:	71 05       	cpc	r23, r1
    c68a:	09 f4       	brne	.+2      	; 0xc68e <f_lseek+0x3ca>
    c68c:	7d ce       	rjmp	.-774    	; 0xc388 <f_lseek+0xc4>
    c68e:	4f 3f       	cpi	r20, 0xFF	; 255
    c690:	ff ef       	ldi	r31, 0xFF	; 255
    c692:	5f 07       	cpc	r21, r31
    c694:	6f 07       	cpc	r22, r31
    c696:	7f 07       	cpc	r23, r31
    c698:	09 f4       	brne	.+2      	; 0xc69c <f_lseek+0x3d8>
    c69a:	80 ce       	rjmp	.-768    	; 0xc39c <f_lseek+0xd8>
    c69c:	d1 01       	movw	r26, r2
    c69e:	16 96       	adiw	r26, 0x06	; 6
    c6a0:	4d 93       	st	X+, r20
    c6a2:	5d 93       	st	X+, r21
    c6a4:	6d 93       	st	X+, r22
    c6a6:	7c 93       	st	X, r23
    c6a8:	19 97       	sbiw	r26, 0x09	; 9
    c6aa:	f1 01       	movw	r30, r2
    c6ac:	44 8b       	std	Z+20, r20	; 0x14
    c6ae:	55 8b       	std	Z+21, r21	; 0x15
    c6b0:	66 8b       	std	Z+22, r22	; 0x16
    c6b2:	77 8b       	std	Z+23, r23	; 0x17
    c6b4:	41 15       	cp	r20, r1
    c6b6:	51 05       	cpc	r21, r1
    c6b8:	61 05       	cpc	r22, r1
    c6ba:	71 05       	cpc	r23, r1
    c6bc:	09 f0       	breq	.+2      	; 0xc6c0 <f_lseek+0x3fc>
    c6be:	40 c0       	rjmp	.+128    	; 0xc740 <f_lseek+0x47c>
    c6c0:	c1 2c       	mov	r12, r1
    c6c2:	d1 2c       	mov	r13, r1
    c6c4:	76 01       	movw	r14, r12
    c6c6:	79 c0       	rjmp	.+242    	; 0xc7ba <f_lseek+0x4f6>
    c6c8:	c8 18       	sub	r12, r8
    c6ca:	d9 08       	sbc	r13, r9
    c6cc:	ea 08       	sbc	r14, r10
    c6ce:	fb 08       	sbc	r15, r11
    c6d0:	f1 01       	movw	r30, r2
    c6d2:	80 89       	ldd	r24, Z+16	; 0x10
    c6d4:	91 89       	ldd	r25, Z+17	; 0x11
    c6d6:	a2 89       	ldd	r26, Z+18	; 0x12
    c6d8:	b3 89       	ldd	r27, Z+19	; 0x13
    c6da:	88 0d       	add	r24, r8
    c6dc:	99 1d       	adc	r25, r9
    c6de:	aa 1d       	adc	r26, r10
    c6e0:	bb 1d       	adc	r27, r11
    c6e2:	80 8b       	std	Z+16, r24	; 0x10
    c6e4:	91 8b       	std	Z+17, r25	; 0x11
    c6e6:	a2 8b       	std	Z+18, r26	; 0x12
    c6e8:	b3 8b       	std	Z+19, r27	; 0x13
    c6ea:	86 85       	ldd	r24, Z+14	; 0x0e
    c6ec:	81 ff       	sbrs	r24, 1
    c6ee:	2f c0       	rjmp	.+94     	; 0xc74e <f_lseek+0x48a>
    c6f0:	c1 01       	movw	r24, r2
    c6f2:	0e 94 84 51 	call	0xa308	; 0xa308 <create_chain>
    c6f6:	ab 01       	movw	r20, r22
    c6f8:	bc 01       	movw	r22, r24
    c6fa:	41 15       	cp	r20, r1
    c6fc:	51 05       	cpc	r21, r1
    c6fe:	61 05       	cpc	r22, r1
    c700:	71 05       	cpc	r23, r1
    c702:	61 f1       	breq	.+88     	; 0xc75c <f_lseek+0x498>
    c704:	4f 3f       	cpi	r20, 0xFF	; 255
    c706:	bf ef       	ldi	r27, 0xFF	; 255
    c708:	5b 07       	cpc	r21, r27
    c70a:	6b 07       	cpc	r22, r27
    c70c:	7b 07       	cpc	r23, r27
    c70e:	09 f4       	brne	.+2      	; 0xc712 <f_lseek+0x44e>
    c710:	45 ce       	rjmp	.-886    	; 0xc39c <f_lseek+0xd8>
    c712:	42 30       	cpi	r20, 0x02	; 2
    c714:	51 05       	cpc	r21, r1
    c716:	61 05       	cpc	r22, r1
    c718:	71 05       	cpc	r23, r1
    c71a:	08 f4       	brcc	.+2      	; 0xc71e <f_lseek+0x45a>
    c71c:	35 ce       	rjmp	.-918    	; 0xc388 <f_lseek+0xc4>
    c71e:	e9 81       	ldd	r30, Y+1	; 0x01
    c720:	fa 81       	ldd	r31, Y+2	; 0x02
    c722:	81 8d       	ldd	r24, Z+25	; 0x19
    c724:	92 8d       	ldd	r25, Z+26	; 0x1a
    c726:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c728:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c72a:	48 17       	cp	r20, r24
    c72c:	59 07       	cpc	r21, r25
    c72e:	6a 07       	cpc	r22, r26
    c730:	7b 07       	cpc	r23, r27
    c732:	08 f0       	brcs	.+2      	; 0xc736 <f_lseek+0x472>
    c734:	29 ce       	rjmp	.-942    	; 0xc388 <f_lseek+0xc4>
    c736:	f1 01       	movw	r30, r2
    c738:	44 8b       	std	Z+20, r20	; 0x14
    c73a:	55 8b       	std	Z+21, r21	; 0x15
    c73c:	66 8b       	std	Z+22, r22	; 0x16
    c73e:	77 8b       	std	Z+23, r23	; 0x17
    c740:	8c 14       	cp	r8, r12
    c742:	9d 04       	cpc	r9, r13
    c744:	ae 04       	cpc	r10, r14
    c746:	bf 04       	cpc	r11, r15
    c748:	08 f4       	brcc	.+2      	; 0xc74c <f_lseek+0x488>
    c74a:	be cf       	rjmp	.-132    	; 0xc6c8 <f_lseek+0x404>
    c74c:	0a c0       	rjmp	.+20     	; 0xc762 <f_lseek+0x49e>
    c74e:	80 81       	ld	r24, Z
    c750:	91 81       	ldd	r25, Z+1	; 0x01
    c752:	0e 94 0f 50 	call	0xa01e	; 0xa01e <get_fat.isra.10>
    c756:	ab 01       	movw	r20, r22
    c758:	bc 01       	movw	r22, r24
    c75a:	d4 cf       	rjmp	.-88     	; 0xc704 <f_lseek+0x440>
    c75c:	c1 2c       	mov	r12, r1
    c75e:	d1 2c       	mov	r13, r1
    c760:	76 01       	movw	r14, r12
    c762:	f1 01       	movw	r30, r2
    c764:	80 89       	ldd	r24, Z+16	; 0x10
    c766:	91 89       	ldd	r25, Z+17	; 0x11
    c768:	a2 89       	ldd	r26, Z+18	; 0x12
    c76a:	b3 89       	ldd	r27, Z+19	; 0x13
    c76c:	8c 0d       	add	r24, r12
    c76e:	9d 1d       	adc	r25, r13
    c770:	ae 1d       	adc	r26, r14
    c772:	bf 1d       	adc	r27, r15
    c774:	80 8b       	std	Z+16, r24	; 0x10
    c776:	91 8b       	std	Z+17, r25	; 0x11
    c778:	a2 8b       	std	Z+18, r26	; 0x12
    c77a:	b3 8b       	std	Z+19, r27	; 0x13
    c77c:	d7 01       	movw	r26, r14
    c77e:	c6 01       	movw	r24, r12
    c780:	91 70       	andi	r25, 0x01	; 1
    c782:	aa 27       	eor	r26, r26
    c784:	bb 27       	eor	r27, r27
    c786:	89 2b       	or	r24, r25
    c788:	8a 2b       	or	r24, r26
    c78a:	8b 2b       	or	r24, r27
    c78c:	09 f4       	brne	.+2      	; 0xc790 <f_lseek+0x4cc>
    c78e:	98 cf       	rjmp	.-208    	; 0xc6c0 <f_lseek+0x3fc>
    c790:	89 81       	ldd	r24, Y+1	; 0x01
    c792:	9a 81       	ldd	r25, Y+2	; 0x02
    c794:	0e 94 08 48 	call	0x9010	; 0x9010 <clst2sect>
    c798:	61 15       	cp	r22, r1
    c79a:	71 05       	cpc	r23, r1
    c79c:	81 05       	cpc	r24, r1
    c79e:	91 05       	cpc	r25, r1
    c7a0:	09 f4       	brne	.+2      	; 0xc7a4 <f_lseek+0x4e0>
    c7a2:	f2 cd       	rjmp	.-1052   	; 0xc388 <f_lseek+0xc4>
    c7a4:	29 e0       	ldi	r18, 0x09	; 9
    c7a6:	f6 94       	lsr	r15
    c7a8:	e7 94       	ror	r14
    c7aa:	d7 94       	ror	r13
    c7ac:	c7 94       	ror	r12
    c7ae:	2a 95       	dec	r18
    c7b0:	d1 f7       	brne	.-12     	; 0xc7a6 <f_lseek+0x4e2>
    c7b2:	c6 0e       	add	r12, r22
    c7b4:	d7 1e       	adc	r13, r23
    c7b6:	e8 1e       	adc	r14, r24
    c7b8:	f9 1e       	adc	r15, r25
    c7ba:	f1 01       	movw	r30, r2
    c7bc:	80 89       	ldd	r24, Z+16	; 0x10
    c7be:	91 89       	ldd	r25, Z+17	; 0x11
    c7c0:	a2 89       	ldd	r26, Z+18	; 0x12
    c7c2:	b3 89       	ldd	r27, Z+19	; 0x13
    c7c4:	42 85       	ldd	r20, Z+10	; 0x0a
    c7c6:	53 85       	ldd	r21, Z+11	; 0x0b
    c7c8:	64 85       	ldd	r22, Z+12	; 0x0c
    c7ca:	75 85       	ldd	r23, Z+13	; 0x0d
    c7cc:	48 17       	cp	r20, r24
    c7ce:	59 07       	cpc	r21, r25
    c7d0:	6a 07       	cpc	r22, r26
    c7d2:	7b 07       	cpc	r23, r27
    c7d4:	38 f4       	brcc	.+14     	; 0xc7e4 <f_lseek+0x520>
    c7d6:	82 87       	std	Z+10, r24	; 0x0a
    c7d8:	93 87       	std	Z+11, r25	; 0x0b
    c7da:	a4 87       	std	Z+12, r26	; 0x0c
    c7dc:	b5 87       	std	Z+13, r27	; 0x0d
    c7de:	26 85       	ldd	r18, Z+14	; 0x0e
    c7e0:	20 64       	ori	r18, 0x40	; 64
    c7e2:	26 87       	std	Z+14, r18	; 0x0e
    c7e4:	91 70       	andi	r25, 0x01	; 1
    c7e6:	aa 27       	eor	r26, r26
    c7e8:	bb 27       	eor	r27, r27
    c7ea:	89 2b       	or	r24, r25
    c7ec:	8a 2b       	or	r24, r26
    c7ee:	8b 2b       	or	r24, r27
    c7f0:	a9 f1       	breq	.+106    	; 0xc85c <f_lseek+0x598>
    c7f2:	d1 01       	movw	r26, r2
    c7f4:	58 96       	adiw	r26, 0x18	; 24
    c7f6:	2d 91       	ld	r18, X+
    c7f8:	3d 91       	ld	r19, X+
    c7fa:	4d 91       	ld	r20, X+
    c7fc:	5c 91       	ld	r21, X
    c7fe:	5b 97       	sbiw	r26, 0x1b	; 27
    c800:	2c 15       	cp	r18, r12
    c802:	3d 05       	cpc	r19, r13
    c804:	4e 05       	cpc	r20, r14
    c806:	5f 05       	cpc	r21, r15
    c808:	49 f1       	breq	.+82     	; 0xc85c <f_lseek+0x598>
    c80a:	1e 96       	adiw	r26, 0x0e	; 14
    c80c:	8c 91       	ld	r24, X
    c80e:	f1 01       	movw	r30, r2
    c810:	b4 96       	adiw	r30, 0x24	; 36
    c812:	5f 01       	movw	r10, r30
    c814:	87 ff       	sbrs	r24, 7
    c816:	11 c0       	rjmp	.+34     	; 0xc83a <f_lseek+0x576>
    c818:	e9 81       	ldd	r30, Y+1	; 0x01
    c81a:	fa 81       	ldd	r31, Y+2	; 0x02
    c81c:	01 e0       	ldi	r16, 0x01	; 1
    c81e:	10 e0       	ldi	r17, 0x00	; 0
    c820:	b5 01       	movw	r22, r10
    c822:	81 81       	ldd	r24, Z+1	; 0x01
    c824:	cb d6       	rcall	.+3478   	; 0xd5bc <disk_write>
    c826:	89 2b       	or	r24, r25
    c828:	09 f0       	breq	.+2      	; 0xc82c <f_lseek+0x568>
    c82a:	b8 cd       	rjmp	.-1168   	; 0xc39c <f_lseek+0xd8>
    c82c:	d1 01       	movw	r26, r2
    c82e:	1e 96       	adiw	r26, 0x0e	; 14
    c830:	8c 91       	ld	r24, X
    c832:	1e 97       	sbiw	r26, 0x0e	; 14
    c834:	8f 77       	andi	r24, 0x7F	; 127
    c836:	1e 96       	adiw	r26, 0x0e	; 14
    c838:	8c 93       	st	X, r24
    c83a:	e9 81       	ldd	r30, Y+1	; 0x01
    c83c:	fa 81       	ldd	r31, Y+2	; 0x02
    c83e:	01 e0       	ldi	r16, 0x01	; 1
    c840:	10 e0       	ldi	r17, 0x00	; 0
    c842:	a7 01       	movw	r20, r14
    c844:	96 01       	movw	r18, r12
    c846:	b5 01       	movw	r22, r10
    c848:	81 81       	ldd	r24, Z+1	; 0x01
    c84a:	a8 d6       	rcall	.+3408   	; 0xd59c <disk_read>
    c84c:	89 2b       	or	r24, r25
    c84e:	09 f0       	breq	.+2      	; 0xc852 <f_lseek+0x58e>
    c850:	a5 cd       	rjmp	.-1206   	; 0xc39c <f_lseek+0xd8>
    c852:	f1 01       	movw	r30, r2
    c854:	c0 8e       	std	Z+24, r12	; 0x18
    c856:	d1 8e       	std	Z+25, r13	; 0x19
    c858:	e2 8e       	std	Z+26, r14	; 0x1a
    c85a:	f3 8e       	std	Z+27, r15	; 0x1b
    c85c:	80 e0       	ldi	r24, 0x00	; 0
    c85e:	a2 cd       	rjmp	.-1212   	; 0xc3a4 <f_lseek+0xe0>
    c860:	81 e1       	ldi	r24, 0x11	; 17
    c862:	a0 cd       	rjmp	.-1216   	; 0xc3a4 <f_lseek+0xe0>
    c864:	80 e0       	ldi	r24, 0x00	; 0
    c866:	90 e0       	ldi	r25, 0x00	; 0
    c868:	dc 01       	movw	r26, r24
    c86a:	c1 2c       	mov	r12, r1
    c86c:	d1 2c       	mov	r13, r1
    c86e:	76 01       	movw	r14, r12
    c870:	b9 cf       	rjmp	.-142    	; 0xc7e4 <f_lseek+0x520>
    c872:	2a 96       	adiw	r28, 0x0a	; 10
    c874:	e2 e1       	ldi	r30, 0x12	; 18
    c876:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0000c87a <f_opendir>:
    c87a:	a4 e0       	ldi	r26, 0x04	; 4
    c87c:	b0 e0       	ldi	r27, 0x00	; 0
    c87e:	e3 e4       	ldi	r30, 0x43	; 67
    c880:	f4 e6       	ldi	r31, 0x64	; 100
    c882:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    c886:	7c 83       	std	Y+4, r23	; 0x04
    c888:	6b 83       	std	Y+3, r22	; 0x03
    c88a:	00 97       	sbiw	r24, 0x00	; 0
    c88c:	09 f4       	brne	.+2      	; 0xc890 <f_opendir+0x16>
    c88e:	48 c0       	rjmp	.+144    	; 0xc920 <f_opendir+0xa6>
    c890:	8c 01       	movw	r16, r24
    c892:	40 e0       	ldi	r20, 0x00	; 0
    c894:	be 01       	movw	r22, r28
    c896:	6f 5f       	subi	r22, 0xFF	; 255
    c898:	7f 4f       	sbci	r23, 0xFF	; 255
    c89a:	ce 01       	movw	r24, r28
    c89c:	03 96       	adiw	r24, 0x03	; 3
    c89e:	0e 94 ae 4c 	call	0x995c	; 0x995c <mount_volume>
    c8a2:	7c 01       	movw	r14, r24
    c8a4:	89 2b       	or	r24, r25
    c8a6:	b9 f5       	brne	.+110    	; 0xc916 <f_opendir+0x9c>
    c8a8:	89 81       	ldd	r24, Y+1	; 0x01
    c8aa:	9a 81       	ldd	r25, Y+2	; 0x02
    c8ac:	f8 01       	movw	r30, r16
    c8ae:	91 83       	std	Z+1, r25	; 0x01
    c8b0:	80 83       	st	Z, r24
    c8b2:	80 e0       	ldi	r24, 0x00	; 0
    c8b4:	92 e0       	ldi	r25, 0x02	; 2
    c8b6:	b6 d5       	rcall	.+2924   	; 0xd424 <ff_memalloc>
    c8b8:	6c 01       	movw	r12, r24
    c8ba:	00 97       	sbiw	r24, 0x00	; 0
    c8bc:	99 f1       	breq	.+102    	; 0xc924 <f_opendir+0xaa>
    c8be:	e9 81       	ldd	r30, Y+1	; 0x01
    c8c0:	fa 81       	ldd	r31, Y+2	; 0x02
    c8c2:	94 87       	std	Z+12, r25	; 0x0c
    c8c4:	83 87       	std	Z+11, r24	; 0x0b
    c8c6:	6b 81       	ldd	r22, Y+3	; 0x03
    c8c8:	7c 81       	ldd	r23, Y+4	; 0x04
    c8ca:	c8 01       	movw	r24, r16
    c8cc:	0e 94 29 58 	call	0xb052	; 0xb052 <follow_path>
    c8d0:	7c 01       	movw	r14, r24
    c8d2:	89 2b       	or	r24, r25
    c8d4:	b9 f4       	brne	.+46     	; 0xc904 <f_opendir+0x8a>
    c8d6:	f8 01       	movw	r30, r16
    c8d8:	87 a1       	ldd	r24, Z+39	; 0x27
    c8da:	87 fd       	sbrc	r24, 7
    c8dc:	28 c0       	rjmp	.+80     	; 0xc92e <f_opendir+0xb4>
    c8de:	84 81       	ldd	r24, Z+4	; 0x04
    c8e0:	84 ff       	sbrs	r24, 4
    c8e2:	0d c0       	rjmp	.+26     	; 0xc8fe <f_opendir+0x84>
    c8e4:	62 8d       	ldd	r22, Z+26	; 0x1a
    c8e6:	73 8d       	ldd	r23, Z+27	; 0x1b
    c8e8:	e9 81       	ldd	r30, Y+1	; 0x01
    c8ea:	fa 81       	ldd	r31, Y+2	; 0x02
    c8ec:	80 81       	ld	r24, Z
    c8ee:	0e 94 a4 4a 	call	0x9548	; 0x9548 <ld_clust.isra.4>
    c8f2:	f8 01       	movw	r30, r16
    c8f4:	66 83       	std	Z+6, r22	; 0x06
    c8f6:	77 83       	std	Z+7, r23	; 0x07
    c8f8:	80 87       	std	Z+8, r24	; 0x08
    c8fa:	91 87       	std	Z+9, r25	; 0x09
    c8fc:	18 c0       	rjmp	.+48     	; 0xc92e <f_opendir+0xb4>
    c8fe:	95 e0       	ldi	r25, 0x05	; 5
    c900:	e9 2e       	mov	r14, r25
    c902:	f1 2c       	mov	r15, r1
    c904:	c6 01       	movw	r24, r12
    c906:	91 d5       	rcall	.+2850   	; 0xd42a <ff_memfree>
    c908:	f4 e0       	ldi	r31, 0x04	; 4
    c90a:	ef 16       	cp	r14, r31
    c90c:	f1 04       	cpc	r15, r1
    c90e:	f1 f0       	breq	.+60     	; 0xc94c <f_opendir+0xd2>
    c910:	e1 14       	cp	r14, r1
    c912:	f1 04       	cpc	r15, r1
    c914:	49 f0       	breq	.+18     	; 0xc928 <f_opendir+0xae>
    c916:	f8 01       	movw	r30, r16
    c918:	11 82       	std	Z+1, r1	; 0x01
    c91a:	10 82       	st	Z, r1
    c91c:	c7 01       	movw	r24, r14
    c91e:	1a c0       	rjmp	.+52     	; 0xc954 <f_opendir+0xda>
    c920:	89 e0       	ldi	r24, 0x09	; 9
    c922:	03 c0       	rjmp	.+6      	; 0xc92a <f_opendir+0xb0>
    c924:	81 e1       	ldi	r24, 0x11	; 17
    c926:	01 c0       	rjmp	.+2      	; 0xc92a <f_opendir+0xb0>
    c928:	80 e0       	ldi	r24, 0x00	; 0
    c92a:	90 e0       	ldi	r25, 0x00	; 0
    c92c:	13 c0       	rjmp	.+38     	; 0xc954 <f_opendir+0xda>
    c92e:	e9 81       	ldd	r30, Y+1	; 0x01
    c930:	fa 81       	ldd	r31, Y+2	; 0x02
    c932:	85 81       	ldd	r24, Z+5	; 0x05
    c934:	96 81       	ldd	r25, Z+6	; 0x06
    c936:	f8 01       	movw	r30, r16
    c938:	93 83       	std	Z+3, r25	; 0x03
    c93a:	82 83       	std	Z+2, r24	; 0x02
    c93c:	40 e0       	ldi	r20, 0x00	; 0
    c93e:	50 e0       	ldi	r21, 0x00	; 0
    c940:	ba 01       	movw	r22, r20
    c942:	c8 01       	movw	r24, r16
    c944:	0e 94 c3 50 	call	0xa186	; 0xa186 <dir_sdi>
    c948:	7c 01       	movw	r14, r24
    c94a:	dc cf       	rjmp	.-72     	; 0xc904 <f_opendir+0x8a>
    c94c:	85 e0       	ldi	r24, 0x05	; 5
    c94e:	e8 2e       	mov	r14, r24
    c950:	f1 2c       	mov	r15, r1
    c952:	e1 cf       	rjmp	.-62     	; 0xc916 <f_opendir+0x9c>
    c954:	24 96       	adiw	r28, 0x04	; 4
    c956:	e8 e0       	ldi	r30, 0x08	; 8
    c958:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

0000c95c <f_closedir>:
    c95c:	a2 e0       	ldi	r26, 0x02	; 2
    c95e:	b0 e0       	ldi	r27, 0x00	; 0
    c960:	e4 eb       	ldi	r30, 0xB4	; 180
    c962:	f4 e6       	ldi	r31, 0x64	; 100
    c964:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__prologue_saves__+0x1c>
    c968:	8c 01       	movw	r16, r24
    c96a:	be 01       	movw	r22, r28
    c96c:	6f 5f       	subi	r22, 0xFF	; 255
    c96e:	7f 4f       	sbci	r23, 0xFF	; 255
    c970:	0e 94 a7 48 	call	0x914e	; 0x914e <validate>
    c974:	00 97       	sbiw	r24, 0x00	; 0
    c976:	19 f4       	brne	.+6      	; 0xc97e <f_closedir+0x22>
    c978:	f8 01       	movw	r30, r16
    c97a:	11 82       	std	Z+1, r1	; 0x01
    c97c:	10 82       	st	Z, r1
    c97e:	22 96       	adiw	r28, 0x02	; 2
    c980:	e4 e0       	ldi	r30, 0x04	; 4
    c982:	0c 94 58 e5 	jmp	0x1cab0	; 0x1cab0 <__epilogue_restores__+0x1c>

0000c986 <f_readdir>:
    c986:	a2 e0       	ldi	r26, 0x02	; 2
    c988:	b0 e0       	ldi	r27, 0x00	; 0
    c98a:	e9 ec       	ldi	r30, 0xC9	; 201
    c98c:	f4 e6       	ldi	r31, 0x64	; 100
    c98e:	0c 94 36 e5 	jmp	0x1ca6c	; 0x1ca6c <__prologue_saves__+0x10>
    c992:	7c 01       	movw	r14, r24
    c994:	5b 01       	movw	r10, r22
    c996:	be 01       	movw	r22, r28
    c998:	6f 5f       	subi	r22, 0xFF	; 255
    c99a:	7f 4f       	sbci	r23, 0xFF	; 255
    c99c:	0e 94 a7 48 	call	0x914e	; 0x914e <validate>
    c9a0:	00 97       	sbiw	r24, 0x00	; 0
    c9a2:	89 f5       	brne	.+98     	; 0xca06 <f_readdir+0x80>
    c9a4:	a1 14       	cp	r10, r1
    c9a6:	b1 04       	cpc	r11, r1
    c9a8:	39 f4       	brne	.+14     	; 0xc9b8 <f_readdir+0x32>
    c9aa:	40 e0       	ldi	r20, 0x00	; 0
    c9ac:	50 e0       	ldi	r21, 0x00	; 0
    c9ae:	ba 01       	movw	r22, r20
    c9b0:	c7 01       	movw	r24, r14
    c9b2:	0e 94 c3 50 	call	0xa186	; 0xa186 <dir_sdi>
    c9b6:	27 c0       	rjmp	.+78     	; 0xca06 <f_readdir+0x80>
    c9b8:	80 e0       	ldi	r24, 0x00	; 0
    c9ba:	92 e0       	ldi	r25, 0x02	; 2
    c9bc:	33 d5       	rcall	.+2662   	; 0xd424 <ff_memalloc>
    c9be:	6c 01       	movw	r12, r24
    c9c0:	00 97       	sbiw	r24, 0x00	; 0
    c9c2:	f9 f0       	breq	.+62     	; 0xca02 <f_readdir+0x7c>
    c9c4:	e9 81       	ldd	r30, Y+1	; 0x01
    c9c6:	fa 81       	ldd	r31, Y+2	; 0x02
    c9c8:	94 87       	std	Z+12, r25	; 0x0c
    c9ca:	83 87       	std	Z+11, r24	; 0x0b
    c9cc:	60 e0       	ldi	r22, 0x00	; 0
    c9ce:	70 e0       	ldi	r23, 0x00	; 0
    c9d0:	c7 01       	movw	r24, r14
    c9d2:	0e 94 5d 54 	call	0xa8ba	; 0xa8ba <dir_read>
    c9d6:	8c 01       	movw	r16, r24
    c9d8:	8b 7f       	andi	r24, 0xFB	; 251
    c9da:	89 2b       	or	r24, r25
    c9dc:	71 f4       	brne	.+28     	; 0xc9fa <f_readdir+0x74>
    c9de:	b5 01       	movw	r22, r10
    c9e0:	c7 01       	movw	r24, r14
    c9e2:	0e 94 8b 49 	call	0x9316	; 0x9316 <get_fileinfo>
    c9e6:	60 e0       	ldi	r22, 0x00	; 0
    c9e8:	70 e0       	ldi	r23, 0x00	; 0
    c9ea:	c7 01       	movw	r24, r14
    c9ec:	0e 94 3b 53 	call	0xa676	; 0xa676 <dir_next>
    c9f0:	8c 01       	movw	r16, r24
    c9f2:	04 97       	sbiw	r24, 0x04	; 4
    c9f4:	11 f4       	brne	.+4      	; 0xc9fa <f_readdir+0x74>
    c9f6:	00 e0       	ldi	r16, 0x00	; 0
    c9f8:	10 e0       	ldi	r17, 0x00	; 0
    c9fa:	c6 01       	movw	r24, r12
    c9fc:	16 d5       	rcall	.+2604   	; 0xd42a <ff_memfree>
    c9fe:	c8 01       	movw	r24, r16
    ca00:	02 c0       	rjmp	.+4      	; 0xca06 <f_readdir+0x80>
    ca02:	81 e1       	ldi	r24, 0x11	; 17
    ca04:	90 e0       	ldi	r25, 0x00	; 0
    ca06:	22 96       	adiw	r28, 0x02	; 2
    ca08:	ea e0       	ldi	r30, 0x0A	; 10
    ca0a:	0c 94 52 e5 	jmp	0x1caa4	; 0x1caa4 <__epilogue_restores__+0x10>

0000ca0e <f_stat>:
    ca0e:	a0 e3       	ldi	r26, 0x30	; 48
    ca10:	b0 e0       	ldi	r27, 0x00	; 0
    ca12:	ed e0       	ldi	r30, 0x0D	; 13
    ca14:	f5 e6       	ldi	r31, 0x65	; 101
    ca16:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    ca1a:	98 ab       	std	Y+48, r25	; 0x30
    ca1c:	8f a7       	std	Y+47, r24	; 0x2f
    ca1e:	6b 01       	movw	r12, r22
    ca20:	40 e0       	ldi	r20, 0x00	; 0
    ca22:	be 01       	movw	r22, r28
    ca24:	6f 5f       	subi	r22, 0xFF	; 255
    ca26:	7f 4f       	sbci	r23, 0xFF	; 255
    ca28:	ce 01       	movw	r24, r28
    ca2a:	8f 96       	adiw	r24, 0x2f	; 47
    ca2c:	0e 94 ae 4c 	call	0x995c	; 0x995c <mount_volume>
    ca30:	00 97       	sbiw	r24, 0x00	; 0
    ca32:	39 f5       	brne	.+78     	; 0xca82 <f_stat+0x74>
    ca34:	80 e0       	ldi	r24, 0x00	; 0
    ca36:	92 e0       	ldi	r25, 0x02	; 2
    ca38:	f5 d4       	rcall	.+2538   	; 0xd424 <ff_memalloc>
    ca3a:	7c 01       	movw	r14, r24
    ca3c:	00 97       	sbiw	r24, 0x00	; 0
    ca3e:	f9 f0       	breq	.+62     	; 0xca7e <f_stat+0x70>
    ca40:	e9 81       	ldd	r30, Y+1	; 0x01
    ca42:	fa 81       	ldd	r31, Y+2	; 0x02
    ca44:	94 87       	std	Z+12, r25	; 0x0c
    ca46:	83 87       	std	Z+11, r24	; 0x0b
    ca48:	6f a5       	ldd	r22, Y+47	; 0x2f
    ca4a:	78 a9       	ldd	r23, Y+48	; 0x30
    ca4c:	ce 01       	movw	r24, r28
    ca4e:	01 96       	adiw	r24, 0x01	; 1
    ca50:	0e 94 29 58 	call	0xb052	; 0xb052 <follow_path>
    ca54:	8c 01       	movw	r16, r24
    ca56:	89 2b       	or	r24, r25
    ca58:	71 f4       	brne	.+28     	; 0xca76 <f_stat+0x68>
    ca5a:	88 a5       	ldd	r24, Y+40	; 0x28
    ca5c:	87 fd       	sbrc	r24, 7
    ca5e:	09 c0       	rjmp	.+18     	; 0xca72 <f_stat+0x64>
    ca60:	c1 14       	cp	r12, r1
    ca62:	d1 04       	cpc	r13, r1
    ca64:	41 f0       	breq	.+16     	; 0xca76 <f_stat+0x68>
    ca66:	b6 01       	movw	r22, r12
    ca68:	ce 01       	movw	r24, r28
    ca6a:	01 96       	adiw	r24, 0x01	; 1
    ca6c:	0e 94 8b 49 	call	0x9316	; 0x9316 <get_fileinfo>
    ca70:	02 c0       	rjmp	.+4      	; 0xca76 <f_stat+0x68>
    ca72:	06 e0       	ldi	r16, 0x06	; 6
    ca74:	10 e0       	ldi	r17, 0x00	; 0
    ca76:	c7 01       	movw	r24, r14
    ca78:	d8 d4       	rcall	.+2480   	; 0xd42a <ff_memfree>
    ca7a:	c8 01       	movw	r24, r16
    ca7c:	02 c0       	rjmp	.+4      	; 0xca82 <f_stat+0x74>
    ca7e:	81 e1       	ldi	r24, 0x11	; 17
    ca80:	90 e0       	ldi	r25, 0x00	; 0
    ca82:	e0 96       	adiw	r28, 0x30	; 48
    ca84:	e8 e0       	ldi	r30, 0x08	; 8
    ca86:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

0000ca8a <f_getfree>:
    ca8a:	aa e0       	ldi	r26, 0x0A	; 10
    ca8c:	b0 e0       	ldi	r27, 0x00	; 0
    ca8e:	eb e4       	ldi	r30, 0x4B	; 75
    ca90:	f5 e6       	ldi	r31, 0x65	; 101
    ca92:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    ca96:	9c 83       	std	Y+4, r25	; 0x04
    ca98:	8b 83       	std	Y+3, r24	; 0x03
    ca9a:	7e 83       	std	Y+6, r23	; 0x06
    ca9c:	6d 83       	std	Y+5, r22	; 0x05
    ca9e:	7a 01       	movw	r14, r20
    caa0:	40 e0       	ldi	r20, 0x00	; 0
    caa2:	be 01       	movw	r22, r28
    caa4:	6f 5f       	subi	r22, 0xFF	; 255
    caa6:	7f 4f       	sbci	r23, 0xFF	; 255
    caa8:	ce 01       	movw	r24, r28
    caaa:	03 96       	adiw	r24, 0x03	; 3
    caac:	0e 94 ae 4c 	call	0x995c	; 0x995c <mount_volume>
    cab0:	8c 01       	movw	r16, r24
    cab2:	89 2b       	or	r24, r25
    cab4:	09 f0       	breq	.+2      	; 0xcab8 <f_getfree+0x2e>
    cab6:	c3 c0       	rjmp	.+390    	; 0xcc3e <f_getfree+0x1b4>
    cab8:	69 80       	ldd	r6, Y+1	; 0x01
    caba:	7a 80       	ldd	r7, Y+2	; 0x02
    cabc:	d7 01       	movw	r26, r14
    cabe:	6d 92       	st	X+, r6
    cac0:	7c 92       	st	X, r7
    cac2:	f3 01       	movw	r30, r6
    cac4:	81 89       	ldd	r24, Z+17	; 0x11
    cac6:	92 89       	ldd	r25, Z+18	; 0x12
    cac8:	a3 89       	ldd	r26, Z+19	; 0x13
    caca:	b4 89       	ldd	r27, Z+20	; 0x14
    cacc:	81 8c       	ldd	r8, Z+25	; 0x19
    cace:	92 8c       	ldd	r9, Z+26	; 0x1a
    cad0:	a3 8c       	ldd	r10, Z+27	; 0x1b
    cad2:	b4 8c       	ldd	r11, Z+28	; 0x1c
    cad4:	b5 01       	movw	r22, r10
    cad6:	a4 01       	movw	r20, r8
    cad8:	42 50       	subi	r20, 0x02	; 2
    cada:	51 09       	sbc	r21, r1
    cadc:	61 09       	sbc	r22, r1
    cade:	71 09       	sbc	r23, r1
    cae0:	48 17       	cp	r20, r24
    cae2:	59 07       	cpc	r21, r25
    cae4:	6a 07       	cpc	r22, r26
    cae6:	7b 07       	cpc	r23, r27
    cae8:	38 f0       	brcs	.+14     	; 0xcaf8 <f_getfree+0x6e>
    caea:	ed 81       	ldd	r30, Y+5	; 0x05
    caec:	fe 81       	ldd	r31, Y+6	; 0x06
    caee:	80 83       	st	Z, r24
    caf0:	91 83       	std	Z+1, r25	; 0x01
    caf2:	a2 83       	std	Z+2, r26	; 0x02
    caf4:	b3 83       	std	Z+3, r27	; 0x03
    caf6:	a3 c0       	rjmp	.+326    	; 0xcc3e <f_getfree+0x1b4>
    caf8:	80 81       	ld	r24, Z
    cafa:	81 30       	cpi	r24, 0x01	; 1
    cafc:	a1 f5       	brne	.+104    	; 0xcb66 <f_getfree+0xdc>
    cafe:	82 e0       	ldi	r24, 0x02	; 2
    cb00:	88 2e       	mov	r8, r24
    cb02:	91 2c       	mov	r9, r1
    cb04:	a1 2c       	mov	r10, r1
    cb06:	b1 2c       	mov	r11, r1
    cb08:	c1 2c       	mov	r12, r1
    cb0a:	d1 2c       	mov	r13, r1
    cb0c:	76 01       	movw	r14, r12
    cb0e:	b5 01       	movw	r22, r10
    cb10:	a4 01       	movw	r20, r8
    cb12:	c3 01       	movw	r24, r6
    cb14:	0e 94 0f 50 	call	0xa01e	; 0xa01e <get_fat.isra.10>
    cb18:	6f 3f       	cpi	r22, 0xFF	; 255
    cb1a:	bf ef       	ldi	r27, 0xFF	; 255
    cb1c:	7b 07       	cpc	r23, r27
    cb1e:	8b 07       	cpc	r24, r27
    cb20:	9b 07       	cpc	r25, r27
    cb22:	09 f4       	brne	.+2      	; 0xcb26 <f_getfree+0x9c>
    cb24:	75 c0       	rjmp	.+234    	; 0xcc10 <f_getfree+0x186>
    cb26:	61 30       	cpi	r22, 0x01	; 1
    cb28:	71 05       	cpc	r23, r1
    cb2a:	81 05       	cpc	r24, r1
    cb2c:	91 05       	cpc	r25, r1
    cb2e:	09 f4       	brne	.+2      	; 0xcb32 <f_getfree+0xa8>
    cb30:	72 c0       	rjmp	.+228    	; 0xcc16 <f_getfree+0x18c>
    cb32:	67 2b       	or	r22, r23
    cb34:	68 2b       	or	r22, r24
    cb36:	69 2b       	or	r22, r25
    cb38:	29 f4       	brne	.+10     	; 0xcb44 <f_getfree+0xba>
    cb3a:	ef ef       	ldi	r30, 0xFF	; 255
    cb3c:	ce 1a       	sub	r12, r30
    cb3e:	de 0a       	sbc	r13, r30
    cb40:	ee 0a       	sbc	r14, r30
    cb42:	fe 0a       	sbc	r15, r30
    cb44:	ff ef       	ldi	r31, 0xFF	; 255
    cb46:	8f 1a       	sub	r8, r31
    cb48:	9f 0a       	sbc	r9, r31
    cb4a:	af 0a       	sbc	r10, r31
    cb4c:	bf 0a       	sbc	r11, r31
    cb4e:	e9 81       	ldd	r30, Y+1	; 0x01
    cb50:	fa 81       	ldd	r31, Y+2	; 0x02
    cb52:	81 8d       	ldd	r24, Z+25	; 0x19
    cb54:	92 8d       	ldd	r25, Z+26	; 0x1a
    cb56:	a3 8d       	ldd	r26, Z+27	; 0x1b
    cb58:	b4 8d       	ldd	r27, Z+28	; 0x1c
    cb5a:	88 16       	cp	r8, r24
    cb5c:	99 06       	cpc	r9, r25
    cb5e:	aa 06       	cpc	r10, r26
    cb60:	bb 06       	cpc	r11, r27
    cb62:	a8 f2       	brcs	.-86     	; 0xcb0e <f_getfree+0x84>
    cb64:	5c c0       	rjmp	.+184    	; 0xcc1e <f_getfree+0x194>
    cb66:	45 a0       	ldd	r4, Z+37	; 0x25
    cb68:	56 a0       	ldd	r5, Z+38	; 0x26
    cb6a:	67 a0       	ldd	r6, Z+39	; 0x27
    cb6c:	70 a4       	ldd	r7, Z+40	; 0x28
    cb6e:	21 2c       	mov	r2, r1
    cb70:	31 2c       	mov	r3, r1
    cb72:	c1 2c       	mov	r12, r1
    cb74:	d1 2c       	mov	r13, r1
    cb76:	76 01       	movw	r14, r12
    cb78:	21 14       	cp	r2, r1
    cb7a:	31 04       	cpc	r3, r1
    cb7c:	b1 f4       	brne	.+44     	; 0xcbaa <f_getfree+0x120>
    cb7e:	d3 01       	movw	r26, r6
    cb80:	c2 01       	movw	r24, r4
    cb82:	01 96       	adiw	r24, 0x01	; 1
    cb84:	a1 1d       	adc	r26, r1
    cb86:	b1 1d       	adc	r27, r1
    cb88:	8f 83       	std	Y+7, r24	; 0x07
    cb8a:	98 87       	std	Y+8, r25	; 0x08
    cb8c:	a9 87       	std	Y+9, r26	; 0x09
    cb8e:	ba 87       	std	Y+10, r27	; 0x0a
    cb90:	b3 01       	movw	r22, r6
    cb92:	a2 01       	movw	r20, r4
    cb94:	89 81       	ldd	r24, Y+1	; 0x01
    cb96:	9a 81       	ldd	r25, Y+2	; 0x02
    cb98:	0e 94 33 4c 	call	0x9866	; 0x9866 <move_window>
    cb9c:	00 97       	sbiw	r24, 0x00	; 0
    cb9e:	09 f0       	breq	.+2      	; 0xcba2 <f_getfree+0x118>
    cba0:	3d c0       	rjmp	.+122    	; 0xcc1c <f_getfree+0x192>
    cba2:	4f 80       	ldd	r4, Y+7	; 0x07
    cba4:	58 84       	ldd	r5, Y+8	; 0x08
    cba6:	69 84       	ldd	r6, Y+9	; 0x09
    cba8:	7a 84       	ldd	r7, Y+10	; 0x0a
    cbaa:	e9 81       	ldd	r30, Y+1	; 0x01
    cbac:	fa 81       	ldd	r31, Y+2	; 0x02
    cbae:	80 81       	ld	r24, Z
    cbb0:	82 30       	cpi	r24, 0x02	; 2
    cbb2:	79 f4       	brne	.+30     	; 0xcbd2 <f_getfree+0x148>
    cbb4:	e2 0d       	add	r30, r2
    cbb6:	f3 1d       	adc	r31, r3
    cbb8:	85 a9       	ldd	r24, Z+53	; 0x35
    cbba:	96 a9       	ldd	r25, Z+54	; 0x36
    cbbc:	89 2b       	or	r24, r25
    cbbe:	29 f4       	brne	.+10     	; 0xcbca <f_getfree+0x140>
    cbc0:	9f ef       	ldi	r25, 0xFF	; 255
    cbc2:	c9 1a       	sub	r12, r25
    cbc4:	d9 0a       	sbc	r13, r25
    cbc6:	e9 0a       	sbc	r14, r25
    cbc8:	f9 0a       	sbc	r15, r25
    cbca:	a2 e0       	ldi	r26, 0x02	; 2
    cbcc:	2a 0e       	add	r2, r26
    cbce:	31 1c       	adc	r3, r1
    cbd0:	15 c0       	rjmp	.+42     	; 0xcbfc <f_getfree+0x172>
    cbd2:	cf 01       	movw	r24, r30
    cbd4:	c5 96       	adiw	r24, 0x35	; 53
    cbd6:	82 0d       	add	r24, r2
    cbd8:	93 1d       	adc	r25, r3
    cbda:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <ld_dword>
    cbde:	dc 01       	movw	r26, r24
    cbe0:	cb 01       	movw	r24, r22
    cbe2:	bf 70       	andi	r27, 0x0F	; 15
    cbe4:	89 2b       	or	r24, r25
    cbe6:	8a 2b       	or	r24, r26
    cbe8:	8b 2b       	or	r24, r27
    cbea:	29 f4       	brne	.+10     	; 0xcbf6 <f_getfree+0x16c>
    cbec:	bf ef       	ldi	r27, 0xFF	; 255
    cbee:	cb 1a       	sub	r12, r27
    cbf0:	db 0a       	sbc	r13, r27
    cbf2:	eb 0a       	sbc	r14, r27
    cbf4:	fb 0a       	sbc	r15, r27
    cbf6:	e4 e0       	ldi	r30, 0x04	; 4
    cbf8:	2e 0e       	add	r2, r30
    cbfa:	31 1c       	adc	r3, r1
    cbfc:	f1 e0       	ldi	r31, 0x01	; 1
    cbfe:	3f 22       	and	r3, r31
    cc00:	21 e0       	ldi	r18, 0x01	; 1
    cc02:	82 1a       	sub	r8, r18
    cc04:	91 08       	sbc	r9, r1
    cc06:	a1 08       	sbc	r10, r1
    cc08:	b1 08       	sbc	r11, r1
    cc0a:	09 f0       	breq	.+2      	; 0xcc0e <f_getfree+0x184>
    cc0c:	b5 cf       	rjmp	.-150    	; 0xcb78 <f_getfree+0xee>
    cc0e:	07 c0       	rjmp	.+14     	; 0xcc1e <f_getfree+0x194>
    cc10:	01 e0       	ldi	r16, 0x01	; 1
    cc12:	10 e0       	ldi	r17, 0x00	; 0
    cc14:	04 c0       	rjmp	.+8      	; 0xcc1e <f_getfree+0x194>
    cc16:	02 e0       	ldi	r16, 0x02	; 2
    cc18:	10 e0       	ldi	r17, 0x00	; 0
    cc1a:	01 c0       	rjmp	.+2      	; 0xcc1e <f_getfree+0x194>
    cc1c:	8c 01       	movw	r16, r24
    cc1e:	ad 81       	ldd	r26, Y+5	; 0x05
    cc20:	be 81       	ldd	r27, Y+6	; 0x06
    cc22:	cd 92       	st	X+, r12
    cc24:	dd 92       	st	X+, r13
    cc26:	ed 92       	st	X+, r14
    cc28:	fc 92       	st	X, r15
    cc2a:	13 97       	sbiw	r26, 0x03	; 3
    cc2c:	e9 81       	ldd	r30, Y+1	; 0x01
    cc2e:	fa 81       	ldd	r31, Y+2	; 0x02
    cc30:	c1 8a       	std	Z+17, r12	; 0x11
    cc32:	d2 8a       	std	Z+18, r13	; 0x12
    cc34:	e3 8a       	std	Z+19, r14	; 0x13
    cc36:	f4 8a       	std	Z+20, r15	; 0x14
    cc38:	84 81       	ldd	r24, Z+4	; 0x04
    cc3a:	81 60       	ori	r24, 0x01	; 1
    cc3c:	84 83       	std	Z+4, r24	; 0x04
    cc3e:	c8 01       	movw	r24, r16
    cc40:	2a 96       	adiw	r28, 0x0a	; 10
    cc42:	e2 e1       	ldi	r30, 0x12	; 18
    cc44:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0000cc48 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    cc48:	a0 e6       	ldi	r26, 0x60	; 96
    cc4a:	b0 e0       	ldi	r27, 0x00	; 0
    cc4c:	ea e2       	ldi	r30, 0x2A	; 42
    cc4e:	f6 e6       	ldi	r31, 0x66	; 102
    cc50:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__+0xe>
    cc54:	a1 96       	adiw	r28, 0x21	; 33
    cc56:	9f af       	std	Y+63, r25	; 0x3f
    cc58:	8e af       	std	Y+62, r24	; 0x3e
    cc5a:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    cc5c:	42 e0       	ldi	r20, 0x02	; 2
    cc5e:	be 01       	movw	r22, r28
    cc60:	63 5a       	subi	r22, 0xA3	; 163
    cc62:	7f 4f       	sbci	r23, 0xFF	; 255
    cc64:	ce 01       	movw	r24, r28
    cc66:	81 5a       	subi	r24, 0xA1	; 161
    cc68:	9f 4f       	sbci	r25, 0xFF	; 255
    cc6a:	0e 94 ae 4c 	call	0x995c	; 0x995c <mount_volume>
	if (res == FR_OK) {
    cc6e:	00 97       	sbiw	r24, 0x00	; 0
    cc70:	09 f0       	breq	.+2      	; 0xcc74 <f_unlink+0x2c>
    cc72:	8c c0       	rjmp	.+280    	; 0xcd8c <f_unlink+0x144>
		dj.obj.fs = fs;
    cc74:	6f 96       	adiw	r28, 0x1f	; 31
    cc76:	8e ad       	ldd	r24, Y+62	; 0x3e
    cc78:	9f ad       	ldd	r25, Y+63	; 0x3f
    cc7a:	6f 97       	sbiw	r28, 0x1f	; 31
    cc7c:	98 ab       	std	Y+48, r25	; 0x30
    cc7e:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cc80:	80 e0       	ldi	r24, 0x00	; 0
    cc82:	92 e0       	ldi	r25, 0x02	; 2
    cc84:	cf d3       	rcall	.+1950   	; 0xd424 <ff_memalloc>
    cc86:	5c 01       	movw	r10, r24
    cc88:	00 97       	sbiw	r24, 0x00	; 0
    cc8a:	09 f4       	brne	.+2      	; 0xcc8e <f_unlink+0x46>
    cc8c:	49 c0       	rjmp	.+146    	; 0xcd20 <f_unlink+0xd8>
    cc8e:	6f 96       	adiw	r28, 0x1f	; 31
    cc90:	ee ad       	ldd	r30, Y+62	; 0x3e
    cc92:	ff ad       	ldd	r31, Y+63	; 0x3f
    cc94:	6f 97       	sbiw	r28, 0x1f	; 31
    cc96:	94 87       	std	Z+12, r25	; 0x0c
    cc98:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    cc9a:	a1 96       	adiw	r28, 0x21	; 33
    cc9c:	6e ad       	ldd	r22, Y+62	; 0x3e
    cc9e:	7f ad       	ldd	r23, Y+63	; 0x3f
    cca0:	a1 97       	sbiw	r28, 0x21	; 33
    cca2:	ce 01       	movw	r24, r28
    cca4:	8f 96       	adiw	r24, 0x2f	; 47
    cca6:	0e 94 29 58 	call	0xb052	; 0xb052 <follow_path>
    ccaa:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    ccac:	89 2b       	or	r24, r25
    ccae:	a1 f5       	brne	.+104    	; 0xcd18 <f_unlink+0xd0>
    ccb0:	67 96       	adiw	r28, 0x17	; 23
    ccb2:	8f ad       	ldd	r24, Y+63	; 0x3f
    ccb4:	67 97       	sbiw	r28, 0x17	; 23
    ccb6:	85 fd       	sbrc	r24, 5
    ccb8:	36 c0       	rjmp	.+108    	; 0xcd26 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    ccba:	87 fd       	sbrc	r24, 7
    ccbc:	34 c0       	rjmp	.+104    	; 0xcd26 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    ccbe:	9b a8       	ldd	r9, Y+51	; 0x33
    ccc0:	90 fc       	sbrc	r9, 0
    ccc2:	40 c0       	rjmp	.+128    	; 0xcd44 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    ccc4:	6f 96       	adiw	r28, 0x1f	; 31
    ccc6:	0e ad       	ldd	r16, Y+62	; 0x3e
    ccc8:	1f ad       	ldd	r17, Y+63	; 0x3f
    ccca:	6f 97       	sbiw	r28, 0x1f	; 31
    cccc:	2b 96       	adiw	r28, 0x0b	; 11
    ccce:	6e ad       	ldd	r22, Y+62	; 0x3e
    ccd0:	7f ad       	ldd	r23, Y+63	; 0x3f
    ccd2:	2b 97       	sbiw	r28, 0x0b	; 11
    ccd4:	f8 01       	movw	r30, r16
    ccd6:	80 81       	ld	r24, Z
    ccd8:	0e 94 a4 4a 	call	0x9548	; 0x9548 <ld_clust.isra.4>
    ccdc:	6b 01       	movw	r12, r22
    ccde:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    cce0:	94 fe       	sbrs	r9, 4
    cce2:	33 c0       	rjmp	.+102    	; 0xcd4a <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    cce4:	f8 01       	movw	r30, r16
    cce6:	85 89       	ldd	r24, Z+21	; 0x15
    cce8:	96 89       	ldd	r25, Z+22	; 0x16
    ccea:	a7 89       	ldd	r26, Z+23	; 0x17
    ccec:	b0 8d       	ldd	r27, Z+24	; 0x18
    ccee:	c8 16       	cp	r12, r24
    ccf0:	d9 06       	cpc	r13, r25
    ccf2:	ea 06       	cpc	r14, r26
    ccf4:	fb 06       	cpc	r15, r27
    ccf6:	31 f1       	breq	.+76     	; 0xcd44 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    ccf8:	1a 83       	std	Y+2, r17	; 0x02
    ccfa:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    ccfc:	cf 82       	std	Y+7, r12	; 0x07
    ccfe:	d8 86       	std	Y+8, r13	; 0x08
    cd00:	e9 86       	std	Y+9, r14	; 0x09
    cd02:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    cd04:	40 e0       	ldi	r20, 0x00	; 0
    cd06:	50 e0       	ldi	r21, 0x00	; 0
    cd08:	ba 01       	movw	r22, r20
    cd0a:	ce 01       	movw	r24, r28
    cd0c:	01 96       	adiw	r24, 0x01	; 1
    cd0e:	0e 94 c3 50 	call	0xa186	; 0xa186 <dir_sdi>
    cd12:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    cd14:	89 2b       	or	r24, r25
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cd16:	51 f0       	breq	.+20     	; 0xcd2c <f_unlink+0xe4>
    cd18:	c5 01       	movw	r24, r10
    cd1a:	87 d3       	rcall	.+1806   	; 0xd42a <ff_memfree>
    cd1c:	c8 01       	movw	r24, r16

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cd1e:	36 c0       	rjmp	.+108    	; 0xcd8c <f_unlink+0x144>
    cd20:	81 e1       	ldi	r24, 0x11	; 17
    cd22:	90 e0       	ldi	r25, 0x00	; 0
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    cd24:	33 c0       	rjmp	.+102    	; 0xcd8c <f_unlink+0x144>
    cd26:	06 e0       	ldi	r16, 0x06	; 6
    cd28:	10 e0       	ldi	r17, 0x00	; 0
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    cd2a:	f6 cf       	rjmp	.-20     	; 0xcd18 <f_unlink+0xd0>
    cd2c:	60 e0       	ldi	r22, 0x00	; 0
    cd2e:	70 e0       	ldi	r23, 0x00	; 0
    cd30:	ce 01       	movw	r24, r28
    cd32:	01 96       	adiw	r24, 0x01	; 1
    cd34:	0e 94 5d 54 	call	0xa8ba	; 0xa8ba <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cd38:	8c 01       	movw	r16, r24
    cd3a:	00 97       	sbiw	r24, 0x00	; 0
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cd3c:	19 f0       	breq	.+6      	; 0xcd44 <f_unlink+0xfc>
    cd3e:	04 97       	sbiw	r24, 0x04	; 4
    cd40:	21 f0       	breq	.+8      	; 0xcd4a <f_unlink+0x102>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    cd42:	ea cf       	rjmp	.-44     	; 0xcd18 <f_unlink+0xd0>
    cd44:	07 e0       	ldi	r16, 0x07	; 7
    cd46:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    cd48:	e7 cf       	rjmp	.-50     	; 0xcd18 <f_unlink+0xd0>
    cd4a:	ce 01       	movw	r24, r28
    cd4c:	8f 96       	adiw	r24, 0x2f	; 47
    cd4e:	0e 94 2f 55 	call	0xaa5e	; 0xaa5e <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    cd52:	8c 01       	movw	r16, r24
    cd54:	89 2b       	or	r24, r25
    cd56:	01 f7       	brne	.-64     	; 0xcd18 <f_unlink+0xd0>
    cd58:	c1 14       	cp	r12, r1
    cd5a:	d1 04       	cpc	r13, r1
    cd5c:	e1 04       	cpc	r14, r1
    cd5e:	f1 04       	cpc	r15, r1
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cd60:	41 f4       	brne	.+16     	; 0xcd72 <f_unlink+0x12a>
    cd62:	6f 96       	adiw	r28, 0x1f	; 31
    cd64:	8e ad       	ldd	r24, Y+62	; 0x3e
    cd66:	9f ad       	ldd	r25, Y+63	; 0x3f
    cd68:	6f 97       	sbiw	r28, 0x1f	; 31
    cd6a:	0e 94 19 4b 	call	0x9632	; 0x9632 <sync_fs>
    cd6e:	8c 01       	movw	r16, r24
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cd70:	d3 cf       	rjmp	.-90     	; 0xcd18 <f_unlink+0xd0>
    cd72:	00 e0       	ldi	r16, 0x00	; 0
    cd74:	10 e0       	ldi	r17, 0x00	; 0
    cd76:	98 01       	movw	r18, r16
    cd78:	b7 01       	movw	r22, r14
    cd7a:	a6 01       	movw	r20, r12
    cd7c:	ce 01       	movw	r24, r28
    cd7e:	8f 96       	adiw	r24, 0x2f	; 47
    cd80:	0e 94 aa 52 	call	0xa554	; 0xa554 <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cd84:	8c 01       	movw	r16, r24
    cd86:	89 2b       	or	r24, r25
    cd88:	39 f6       	brne	.-114    	; 0xcd18 <f_unlink+0xd0>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cd8a:	eb cf       	rjmp	.-42     	; 0xcd62 <f_unlink+0x11a>
    cd8c:	c0 5a       	subi	r28, 0xA0	; 160
    cd8e:	df 4f       	sbci	r29, 0xFF	; 255
    cd90:	eb e0       	ldi	r30, 0x0B	; 11
    cd92:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__+0xe>

0000cd96 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cd96:	a0 e4       	ldi	r26, 0x40	; 64
    cd98:	b0 e0       	ldi	r27, 0x00	; 0
    cd9a:	e1 ed       	ldi	r30, 0xD1	; 209
    cd9c:	f6 e6       	ldi	r31, 0x66	; 102
    cd9e:	0c 94 30 e5 	jmp	0x1ca60	; 0x1ca60 <__prologue_saves__+0x4>
    cda2:	21 96       	adiw	r28, 0x01	; 1
    cda4:	9f af       	std	Y+63, r25	; 0x3f
    cda6:	8e af       	std	Y+62, r24	; 0x3e
    cda8:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cdaa:	42 e0       	ldi	r20, 0x02	; 2
    cdac:	be 01       	movw	r22, r28
    cdae:	63 5c       	subi	r22, 0xC3	; 195
    cdb0:	7f 4f       	sbci	r23, 0xFF	; 255
    cdb2:	ce 01       	movw	r24, r28
    cdb4:	cf 96       	adiw	r24, 0x3f	; 63
    cdb6:	0e 94 ae 4c 	call	0x995c	; 0x995c <mount_volume>
	if (res == FR_OK) {
    cdba:	00 97       	sbiw	r24, 0x00	; 0
    cdbc:	09 f0       	breq	.+2      	; 0xcdc0 <f_mkdir+0x2a>
    cdbe:	d6 c0       	rjmp	.+428    	; 0xcf6c <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cdc0:	8d ad       	ldd	r24, Y+61	; 0x3d
    cdc2:	9e ad       	ldd	r25, Y+62	; 0x3e
    cdc4:	9a 83       	std	Y+2, r25	; 0x02
    cdc6:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cdc8:	80 e0       	ldi	r24, 0x00	; 0
    cdca:	92 e0       	ldi	r25, 0x02	; 2
    cdcc:	2b d3       	rcall	.+1622   	; 0xd424 <ff_memalloc>
    cdce:	6c 01       	movw	r12, r24
    cdd0:	00 97       	sbiw	r24, 0x00	; 0
    cdd2:	e9 f0       	breq	.+58     	; 0xce0e <f_mkdir+0x78>
    cdd4:	ed ad       	ldd	r30, Y+61	; 0x3d
    cdd6:	fe ad       	ldd	r31, Y+62	; 0x3e
    cdd8:	94 87       	std	Z+12, r25	; 0x0c
    cdda:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cddc:	21 96       	adiw	r28, 0x01	; 1
    cdde:	6e ad       	ldd	r22, Y+62	; 0x3e
    cde0:	7f ad       	ldd	r23, Y+63	; 0x3f
    cde2:	21 97       	sbiw	r28, 0x01	; 1
    cde4:	ce 01       	movw	r24, r28
    cde6:	01 96       	adiw	r24, 0x01	; 1
    cde8:	0e 94 29 58 	call	0xb052	; 0xb052 <follow_path>
    cdec:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cdee:	89 2b       	or	r24, r25
    cdf0:	89 f0       	breq	.+34     	; 0xce14 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cdf2:	84 e0       	ldi	r24, 0x04	; 4
    cdf4:	e8 16       	cp	r14, r24
    cdf6:	f1 04       	cpc	r15, r1
    cdf8:	31 f4       	brne	.+12     	; 0xce06 <f_mkdir+0x70>
    cdfa:	88 a5       	ldd	r24, Y+40	; 0x28
    cdfc:	85 ff       	sbrs	r24, 5
    cdfe:	0e c0       	rjmp	.+28     	; 0xce1c <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    ce00:	26 e0       	ldi	r18, 0x06	; 6
    ce02:	e2 2e       	mov	r14, r18
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    ce04:	f1 2c       	mov	r15, r1
    ce06:	c6 01       	movw	r24, r12
    ce08:	10 d3       	rcall	.+1568   	; 0xd42a <ff_memfree>
    ce0a:	c7 01       	movw	r24, r14


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ce0c:	af c0       	rjmp	.+350    	; 0xcf6c <f_mkdir+0x1d6>
    ce0e:	81 e1       	ldi	r24, 0x11	; 17
    ce10:	90 e0       	ldi	r25, 0x00	; 0
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    ce12:	ac c0       	rjmp	.+344    	; 0xcf6c <f_mkdir+0x1d6>
    ce14:	38 e0       	ldi	r19, 0x08	; 8
    ce16:	e3 2e       	mov	r14, r19
    ce18:	f1 2c       	mov	r15, r1
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    ce1a:	f5 cf       	rjmp	.-22     	; 0xce06 <f_mkdir+0x70>
    ce1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    ce1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    ce20:	98 ab       	std	Y+48, r25	; 0x30
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    ce22:	8f a7       	std	Y+47, r24	; 0x2f
    ce24:	40 e0       	ldi	r20, 0x00	; 0
    ce26:	50 e0       	ldi	r21, 0x00	; 0
    ce28:	ba 01       	movw	r22, r20
    ce2a:	ce 01       	movw	r24, r28
    ce2c:	8f 96       	adiw	r24, 0x2f	; 47
    ce2e:	0e 94 84 51 	call	0xa308	; 0xa308 <create_chain>
    ce32:	4b 01       	movw	r8, r22
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ce34:	5c 01       	movw	r10, r24
    ce36:	67 2b       	or	r22, r23
    ce38:	68 2b       	or	r22, r24
    ce3a:	69 2b       	or	r22, r25
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    ce3c:	09 f1       	breq	.+66     	; 0xce80 <f_mkdir+0xea>
    ce3e:	e1 e0       	ldi	r30, 0x01	; 1
    ce40:	8e 16       	cp	r8, r30
    ce42:	91 04       	cpc	r9, r1
    ce44:	a1 04       	cpc	r10, r1
    ce46:	b1 04       	cpc	r11, r1
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    ce48:	61 f0       	breq	.+24     	; 0xce62 <f_mkdir+0xcc>
    ce4a:	ff ef       	ldi	r31, 0xFF	; 255
    ce4c:	8f 16       	cp	r8, r31
    ce4e:	9f 06       	cpc	r9, r31
    ce50:	af 06       	cpc	r10, r31
    ce52:	bf 06       	cpc	r11, r31
			tm = GET_FATTIME();
    ce54:	d9 f4       	brne	.+54     	; 0xce8c <f_mkdir+0xf6>
    ce56:	0e 94 00 71 	call	0xe200	; 0xe200 <get_fattime>
    ce5a:	ee 24       	eor	r14, r14
    ce5c:	e3 94       	inc	r14
    ce5e:	f1 2c       	mov	r15, r1
    ce60:	05 c0       	rjmp	.+10     	; 0xce6c <f_mkdir+0xd6>
    ce62:	0e 94 00 71 	call	0xe200	; 0xe200 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    ce66:	92 e0       	ldi	r25, 0x02	; 2
    ce68:	e9 2e       	mov	r14, r25
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    ce6a:	f1 2c       	mov	r15, r1
    ce6c:	00 e0       	ldi	r16, 0x00	; 0
    ce6e:	10 e0       	ldi	r17, 0x00	; 0
    ce70:	98 01       	movw	r18, r16
    ce72:	b5 01       	movw	r22, r10
    ce74:	a4 01       	movw	r20, r8
    ce76:	ce 01       	movw	r24, r28
    ce78:	8f 96       	adiw	r24, 0x2f	; 47
    ce7a:	0e 94 aa 52 	call	0xa554	; 0xa554 <remove_chain>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    ce7e:	c3 cf       	rjmp	.-122    	; 0xce06 <f_mkdir+0x70>
    ce80:	0e 94 00 71 	call	0xe200	; 0xe200 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ce84:	87 e0       	ldi	r24, 0x07	; 7
    ce86:	e8 2e       	mov	r14, r24
    ce88:	f1 2c       	mov	r15, r1
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    ce8a:	f0 cf       	rjmp	.-32     	; 0xce6c <f_mkdir+0xd6>
    ce8c:	0e 94 00 71 	call	0xe200	; 0xe200 <get_fattime>
    ce90:	2b 01       	movw	r4, r22
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    ce92:	3c 01       	movw	r6, r24
    ce94:	b5 01       	movw	r22, r10
    ce96:	a4 01       	movw	r20, r8
    ce98:	8d ad       	ldd	r24, Y+61	; 0x3d
    ce9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    ce9c:	0e 94 8b 4b 	call	0x9716	; 0x9716 <dir_clear>
				if (res == FR_OK) {
    cea0:	7c 01       	movw	r14, r24
    cea2:	89 2b       	or	r24, r25
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    cea4:	19 f7       	brne	.-58     	; 0xce6c <f_mkdir+0xd6>
    cea6:	8d ad       	ldd	r24, Y+61	; 0x3d
    cea8:	9e ad       	ldd	r25, Y+62	; 0x3e
    ceaa:	4b e0       	ldi	r20, 0x0B	; 11
    ceac:	50 e0       	ldi	r21, 0x00	; 0
    ceae:	60 e2       	ldi	r22, 0x20	; 32
    ceb0:	70 e0       	ldi	r23, 0x00	; 0
    ceb2:	c5 96       	adiw	r24, 0x35	; 53
    ceb4:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>
						fs->win[DIR_Name] = '.';
    ceb8:	8d ad       	ldd	r24, Y+61	; 0x3d
    ceba:	9e ad       	ldd	r25, Y+62	; 0x3e
    cebc:	1e e2       	ldi	r17, 0x2E	; 46
    cebe:	fc 01       	movw	r30, r24
						fs->win[DIR_Attr] = AM_DIR;
    cec0:	15 ab       	std	Z+53, r17	; 0x35
    cec2:	e0 5c       	subi	r30, 0xC0	; 192
    cec4:	ff 4f       	sbci	r31, 0xFF	; 255
    cec6:	20 e1       	ldi	r18, 0x10	; 16
						st_dword(fs->win + DIR_ModTime, tm);
    cec8:	20 83       	st	Z, r18
    ceca:	b3 01       	movw	r22, r6
    cecc:	a2 01       	movw	r20, r4
    cece:	85 5b       	subi	r24, 0xB5	; 181
    ced0:	9f 4f       	sbci	r25, 0xFF	; 255
    ced2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
						st_clust(fs, fs->win, dcl);
    ced6:	8d ad       	ldd	r24, Y+61	; 0x3d
    ced8:	9e ad       	ldd	r25, Y+62	; 0x3e
    ceda:	bc 01       	movw	r22, r24
    cedc:	6b 5c       	subi	r22, 0xCB	; 203
    cede:	7f 4f       	sbci	r23, 0xFF	; 255
    cee0:	a5 01       	movw	r20, r10
    cee2:	94 01       	movw	r18, r8
    cee4:	0e 94 b9 4a 	call	0x9572	; 0x9572 <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cee8:	8d ad       	ldd	r24, Y+61	; 0x3d
    ceea:	9e ad       	ldd	r25, Y+62	; 0x3e
    ceec:	bc 01       	movw	r22, r24
    ceee:	6b 5c       	subi	r22, 0xCB	; 203
    cef0:	7f 4f       	sbci	r23, 0xFF	; 255
    cef2:	40 e2       	ldi	r20, 0x20	; 32
    cef4:	50 e0       	ldi	r21, 0x00	; 0
    cef6:	8b 5a       	subi	r24, 0xAB	; 171
    cef8:	9f 4f       	sbci	r25, 0xFF	; 255
    cefa:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cefe:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf00:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf02:	fc 01       	movw	r30, r24
    cf04:	ea 5a       	subi	r30, 0xAA	; 170
    cf06:	ff 4f       	sbci	r31, 0xFF	; 255
						st_clust(fs, fs->win + SZDIRE, pcl);
    cf08:	10 83       	st	Z, r17
    cf0a:	2f 81       	ldd	r18, Y+7	; 0x07
    cf0c:	38 85       	ldd	r19, Y+8	; 0x08
    cf0e:	49 85       	ldd	r20, Y+9	; 0x09
    cf10:	5a 85       	ldd	r21, Y+10	; 0x0a
    cf12:	bc 01       	movw	r22, r24
    cf14:	6b 5a       	subi	r22, 0xAB	; 171
    cf16:	7f 4f       	sbci	r23, 0xFF	; 255
    cf18:	0e 94 b9 4a 	call	0x9572	; 0x9572 <st_clust.isra.5>
						fs->wflag = 1;
    cf1c:	ed ad       	ldd	r30, Y+61	; 0x3d
    cf1e:	fe ad       	ldd	r31, Y+62	; 0x3e
    cf20:	81 e0       	ldi	r24, 0x01	; 1
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    cf22:	83 83       	std	Z+3, r24	; 0x03
    cf24:	ce 01       	movw	r24, r28
    cf26:	01 96       	adiw	r24, 0x01	; 1
    cf28:	0e 94 85 56 	call	0xad0a	; 0xad0a <dir_register>
				}
			}
			if (res == FR_OK) {
    cf2c:	7c 01       	movw	r14, r24
    cf2e:	89 2b       	or	r24, r25
    cf30:	09 f0       	breq	.+2      	; 0xcf34 <f_mkdir+0x19e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cf32:	9c cf       	rjmp	.-200    	; 0xce6c <f_mkdir+0xd6>
    cf34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cf36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cf38:	b3 01       	movw	r22, r6
    cf3a:	a2 01       	movw	r20, r4
    cf3c:	46 96       	adiw	r24, 0x16	; 22
    cf3e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    cf42:	6b 8d       	ldd	r22, Y+27	; 0x1b
    cf44:	7c 8d       	ldd	r23, Y+28	; 0x1c
    cf46:	a5 01       	movw	r20, r10
    cf48:	94 01       	movw	r18, r8
    cf4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf4e:	0e 94 b9 4a 	call	0x9572	; 0x9572 <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    cf52:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cf54:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cf56:	80 e1       	ldi	r24, 0x10	; 16
					fs->wflag = 1;
    cf58:	83 87       	std	Z+11, r24	; 0x0b
    cf5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf5e:	21 e0       	ldi	r18, 0x01	; 1
    cf60:	fc 01       	movw	r30, r24
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    cf62:	23 83       	std	Z+3, r18	; 0x03
    cf64:	0e 94 19 4b 	call	0x9632	; 0x9632 <sync_fs>
    cf68:	7c 01       	movw	r14, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cf6a:	4d cf       	rjmp	.-358    	; 0xce06 <f_mkdir+0x70>
    cf6c:	c0 5c       	subi	r28, 0xC0	; 192
    cf6e:	df 4f       	sbci	r29, 0xFF	; 255
    cf70:	e0 e1       	ldi	r30, 0x10	; 16
    cf72:	0c 94 4c e5 	jmp	0x1ca98	; 0x1ca98 <__epilogue_restores__+0x4>

0000cf76 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cf76:	a2 e8       	ldi	r26, 0x82	; 130
    cf78:	b0 e0       	ldi	r27, 0x00	; 0
    cf7a:	e1 ec       	ldi	r30, 0xC1	; 193
    cf7c:	f7 e6       	ldi	r31, 0x67	; 103
    cf7e:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__prologue_saves__+0x12>
    cf82:	c1 58       	subi	r28, 0x81	; 129
    cf84:	df 4f       	sbci	r29, 0xFF	; 255
    cf86:	99 83       	std	Y+1, r25	; 0x01
    cf88:	88 83       	st	Y, r24
    cf8a:	cf 57       	subi	r28, 0x7F	; 127
    cf8c:	d0 40       	sbci	r29, 0x00	; 0
    cf8e:	cf 57       	subi	r28, 0x7F	; 127
    cf90:	df 4f       	sbci	r29, 0xFF	; 255
    cf92:	79 83       	std	Y+1, r23	; 0x01
    cf94:	68 83       	st	Y, r22
    cf96:	c1 58       	subi	r28, 0x81	; 129
    cf98:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    cf9a:	ce 01       	movw	r24, r28
    cf9c:	8f 57       	subi	r24, 0x7F	; 127
    cf9e:	9f 4f       	sbci	r25, 0xFF	; 255
    cfa0:	0e 94 7b 48 	call	0x90f6	; 0x90f6 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    cfa4:	42 e0       	ldi	r20, 0x02	; 2
    cfa6:	be 01       	movw	r22, r28
    cfa8:	63 58       	subi	r22, 0x83	; 131
    cfaa:	7f 4f       	sbci	r23, 0xFF	; 255
    cfac:	ce 01       	movw	r24, r28
    cfae:	81 58       	subi	r24, 0x81	; 129
    cfb0:	9f 4f       	sbci	r25, 0xFF	; 255
    cfb2:	0e 94 ae 4c 	call	0x995c	; 0x995c <mount_volume>
	if (res == FR_OK) {
    cfb6:	00 97       	sbiw	r24, 0x00	; 0
    cfb8:	09 f0       	breq	.+2      	; 0xcfbc <f_rename+0x46>
    cfba:	ed c0       	rjmp	.+474    	; 0xd196 <f_rename+0x220>
		djo.obj.fs = fs;
    cfbc:	ef 96       	adiw	r28, 0x3f	; 63
    cfbe:	8e ad       	ldd	r24, Y+62	; 0x3e
    cfc0:	9f ad       	ldd	r25, Y+63	; 0x3f
    cfc2:	ef 97       	sbiw	r28, 0x3f	; 63
    cfc4:	98 ab       	std	Y+48, r25	; 0x30
    cfc6:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cfc8:	80 e0       	ldi	r24, 0x00	; 0
    cfca:	92 e0       	ldi	r25, 0x02	; 2
    cfcc:	2b d2       	rcall	.+1110   	; 0xd424 <ff_memalloc>
    cfce:	6c 01       	movw	r12, r24
    cfd0:	00 97       	sbiw	r24, 0x00	; 0
    cfd2:	f1 f0       	breq	.+60     	; 0xd010 <f_rename+0x9a>
    cfd4:	ef 96       	adiw	r28, 0x3f	; 63
    cfd6:	ee ad       	ldd	r30, Y+62	; 0x3e
    cfd8:	ff ad       	ldd	r31, Y+63	; 0x3f
    cfda:	ef 97       	sbiw	r28, 0x3f	; 63
    cfdc:	94 87       	std	Z+12, r25	; 0x0c
    cfde:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    cfe0:	c1 58       	subi	r28, 0x81	; 129
    cfe2:	df 4f       	sbci	r29, 0xFF	; 255
    cfe4:	68 81       	ld	r22, Y
    cfe6:	79 81       	ldd	r23, Y+1	; 0x01
    cfe8:	cf 57       	subi	r28, 0x7F	; 127
    cfea:	d0 40       	sbci	r29, 0x00	; 0
    cfec:	ce 01       	movw	r24, r28
    cfee:	8f 96       	adiw	r24, 0x2f	; 47
    cff0:	0e 94 29 58 	call	0xb052	; 0xb052 <follow_path>
    cff4:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    cff6:	89 2b       	or	r24, r25
    cff8:	39 f4       	brne	.+14     	; 0xd008 <f_rename+0x92>
    cffa:	67 96       	adiw	r28, 0x17	; 23
    cffc:	8f ad       	ldd	r24, Y+63	; 0x3f
    cffe:	67 97       	sbiw	r28, 0x17	; 23
    d000:	80 7a       	andi	r24, 0xA0	; 160
    d002:	49 f0       	breq	.+18     	; 0xd016 <f_rename+0xa0>
    d004:	06 e0       	ldi	r16, 0x06	; 6
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    d006:	10 e0       	ldi	r17, 0x00	; 0
    d008:	c6 01       	movw	r24, r12
    d00a:	0f d2       	rcall	.+1054   	; 0xd42a <ff_memfree>
    d00c:	c8 01       	movw	r24, r16

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    d00e:	c3 c0       	rjmp	.+390    	; 0xd196 <f_rename+0x220>
    d010:	81 e1       	ldi	r24, 0x11	; 17
    d012:	90 e0       	ldi	r25, 0x00	; 0
    d014:	c0 c0       	rjmp	.+384    	; 0xd196 <f_rename+0x220>
    d016:	2b 96       	adiw	r28, 0x0b	; 11
    d018:	6e ad       	ldd	r22, Y+62	; 0x3e
    d01a:	7f ad       	ldd	r23, Y+63	; 0x3f
    d01c:	2b 97       	sbiw	r28, 0x0b	; 11
    d01e:	40 e2       	ldi	r20, 0x20	; 32
    d020:	50 e0       	ldi	r21, 0x00	; 0
    d022:	ce 01       	movw	r24, r28
    d024:	83 5a       	subi	r24, 0xA3	; 163
    d026:	9f 4f       	sbci	r25, 0xFF	; 255
    d028:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <mem_cpy.part.0>
    d02c:	4e e2       	ldi	r20, 0x2E	; 46
    d02e:	50 e0       	ldi	r21, 0x00	; 0
    d030:	be 01       	movw	r22, r28
    d032:	61 5d       	subi	r22, 0xD1	; 209
    d034:	7f 4f       	sbci	r23, 0xFF	; 255
    d036:	ce 01       	movw	r24, r28
    d038:	01 96       	adiw	r24, 0x01	; 1
    d03a:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    d03e:	cf 57       	subi	r28, 0x7F	; 127
    d040:	df 4f       	sbci	r29, 0xFF	; 255
    d042:	68 81       	ld	r22, Y
    d044:	79 81       	ldd	r23, Y+1	; 0x01
    d046:	c1 58       	subi	r28, 0x81	; 129
    d048:	d0 40       	sbci	r29, 0x00	; 0
    d04a:	ce 01       	movw	r24, r28
    d04c:	01 96       	adiw	r24, 0x01	; 1
    d04e:	0e 94 29 58 	call	0xb052	; 0xb052 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    d052:	8c 01       	movw	r16, r24
    d054:	89 2b       	or	r24, r25
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    d056:	f9 f4       	brne	.+62     	; 0xd096 <f_rename+0x120>
    d058:	4f 81       	ldd	r20, Y+7	; 0x07
    d05a:	58 85       	ldd	r21, Y+8	; 0x08
    d05c:	69 85       	ldd	r22, Y+9	; 0x09
    d05e:	7a 85       	ldd	r23, Y+10	; 0x0a
    d060:	8d a9       	ldd	r24, Y+53	; 0x35
    d062:	9e a9       	ldd	r25, Y+54	; 0x36
    d064:	af a9       	ldd	r26, Y+55	; 0x37
    d066:	b8 ad       	ldd	r27, Y+56	; 0x38
    d068:	48 17       	cp	r20, r24
    d06a:	59 07       	cpc	r21, r25
    d06c:	6a 07       	cpc	r22, r26
    d06e:	7b 07       	cpc	r23, r27
    d070:	09 f0       	breq	.+2      	; 0xd074 <f_rename+0xfe>
    d072:	8b c0       	rjmp	.+278    	; 0xd18a <f_rename+0x214>
    d074:	4f 85       	ldd	r20, Y+15	; 0x0f
    d076:	58 89       	ldd	r21, Y+16	; 0x10
    d078:	69 89       	ldd	r22, Y+17	; 0x11
    d07a:	7a 89       	ldd	r23, Y+18	; 0x12
    d07c:	21 96       	adiw	r28, 0x01	; 1
    d07e:	8c ad       	ldd	r24, Y+60	; 0x3c
    d080:	9d ad       	ldd	r25, Y+61	; 0x3d
    d082:	ae ad       	ldd	r26, Y+62	; 0x3e
    d084:	bf ad       	ldd	r27, Y+63	; 0x3f
    d086:	21 97       	sbiw	r28, 0x01	; 1
    d088:	48 17       	cp	r20, r24
    d08a:	59 07       	cpc	r21, r25
    d08c:	6a 07       	cpc	r22, r26
    d08e:	7b 07       	cpc	r23, r27
    d090:	09 f0       	breq	.+2      	; 0xd094 <f_rename+0x11e>
    d092:	7b c0       	rjmp	.+246    	; 0xd18a <f_rename+0x214>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    d094:	04 c0       	rjmp	.+8      	; 0xd09e <f_rename+0x128>
    d096:	04 30       	cpi	r16, 0x04	; 4
    d098:	11 05       	cpc	r17, r1
    d09a:	09 f0       	breq	.+2      	; 0xd09e <f_rename+0x128>
					res = dir_register(&djn);			/* Register the new entry */
    d09c:	b5 cf       	rjmp	.-150    	; 0xd008 <f_rename+0x92>
    d09e:	ce 01       	movw	r24, r28
    d0a0:	01 96       	adiw	r24, 0x01	; 1
    d0a2:	0e 94 85 56 	call	0xad0a	; 0xad0a <dir_register>
					if (res == FR_OK) {
    d0a6:	8c 01       	movw	r16, r24
    d0a8:	89 2b       	or	r24, r25
    d0aa:	09 f0       	breq	.+2      	; 0xd0ae <f_rename+0x138>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    d0ac:	ad cf       	rjmp	.-166    	; 0xd008 <f_rename+0x92>
    d0ae:	0b 8d       	ldd	r16, Y+27	; 0x1b
    d0b0:	1c 8d       	ldd	r17, Y+28	; 0x1c
    d0b2:	6d e5       	ldi	r22, 0x5D	; 93
    d0b4:	70 e0       	ldi	r23, 0x00	; 0
    d0b6:	6c 0f       	add	r22, r28
    d0b8:	7d 1f       	adc	r23, r29
    d0ba:	63 5f       	subi	r22, 0xF3	; 243
    d0bc:	7f 4f       	sbci	r23, 0xFF	; 255
    d0be:	43 e1       	ldi	r20, 0x13	; 19
    d0c0:	50 e0       	ldi	r21, 0x00	; 0
    d0c2:	c8 01       	movw	r24, r16
    d0c4:	0d 96       	adiw	r24, 0x0d	; 13
    d0c6:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    d0ca:	a9 96       	adiw	r28, 0x29	; 41
    d0cc:	8f ad       	ldd	r24, Y+63	; 0x3f
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    d0ce:	a9 97       	sbiw	r28, 0x29	; 41
    d0d0:	84 ff       	sbrs	r24, 4
    d0d2:	80 62       	ori	r24, 0x20	; 32
    d0d4:	f8 01       	movw	r30, r16
						fs->wflag = 1;
    d0d6:	83 87       	std	Z+11, r24	; 0x0b
    d0d8:	ef 96       	adiw	r28, 0x3f	; 63
    d0da:	ee ac       	ldd	r14, Y+62	; 0x3e
    d0dc:	ff ac       	ldd	r15, Y+63	; 0x3f
    d0de:	ef 97       	sbiw	r28, 0x3f	; 63
    d0e0:	bb 24       	eor	r11, r11
    d0e2:	b3 94       	inc	r11
    d0e4:	f7 01       	movw	r30, r14
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    d0e6:	b3 82       	std	Z+3, r11	; 0x03
    d0e8:	f8 01       	movw	r30, r16
    d0ea:	83 85       	ldd	r24, Z+11	; 0x0b
    d0ec:	84 ff       	sbrs	r24, 4
    d0ee:	3d c0       	rjmp	.+122    	; 0xd16a <f_rename+0x1f4>
    d0f0:	4d a9       	ldd	r20, Y+53	; 0x35
    d0f2:	5e a9       	ldd	r21, Y+54	; 0x36
    d0f4:	6f a9       	ldd	r22, Y+55	; 0x37
    d0f6:	78 ad       	ldd	r23, Y+56	; 0x38
    d0f8:	8f 81       	ldd	r24, Y+7	; 0x07
    d0fa:	98 85       	ldd	r25, Y+8	; 0x08
    d0fc:	a9 85       	ldd	r26, Y+9	; 0x09
    d0fe:	ba 85       	ldd	r27, Y+10	; 0x0a
    d100:	48 17       	cp	r20, r24
    d102:	59 07       	cpc	r21, r25
    d104:	6a 07       	cpc	r22, r26
    d106:	7b 07       	cpc	r23, r27
							sect = clst2sect(fs, ld_clust(fs, dir));
    d108:	81 f1       	breq	.+96     	; 0xd16a <f_rename+0x1f4>
    d10a:	b8 01       	movw	r22, r16
    d10c:	f7 01       	movw	r30, r14
    d10e:	80 81       	ld	r24, Z
    d110:	0e 94 a4 4a 	call	0x9548	; 0x9548 <ld_clust.isra.4>
    d114:	ab 01       	movw	r20, r22
    d116:	bc 01       	movw	r22, r24
    d118:	c7 01       	movw	r24, r14
    d11a:	0e 94 08 48 	call	0x9010	; 0x9010 <clst2sect>
    d11e:	ab 01       	movw	r20, r22
							if (sect == 0) {
    d120:	bc 01       	movw	r22, r24
    d122:	41 15       	cp	r20, r1
    d124:	51 05       	cpc	r21, r1
    d126:	61 05       	cpc	r22, r1
    d128:	71 05       	cpc	r23, r1
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    d12a:	91 f1       	breq	.+100    	; 0xd190 <f_rename+0x21a>
    d12c:	c7 01       	movw	r24, r14
    d12e:	0e 94 33 4c 	call	0x9866	; 0x9866 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    d132:	8c 01       	movw	r16, r24
    d134:	89 2b       	or	r24, r25
    d136:	09 f0       	breq	.+2      	; 0xd13a <f_rename+0x1c4>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d138:	67 cf       	rjmp	.-306    	; 0xd008 <f_rename+0x92>
    d13a:	ef 96       	adiw	r28, 0x3f	; 63
    d13c:	8e ad       	ldd	r24, Y+62	; 0x3e
    d13e:	9f ad       	ldd	r25, Y+63	; 0x3f
								if (res == FR_OK && dir[1] == '.') {
    d140:	ef 97       	sbiw	r28, 0x3f	; 63
    d142:	fc 01       	movw	r30, r24
    d144:	ea 5a       	subi	r30, 0xAA	; 170
    d146:	ff 4f       	sbci	r31, 0xFF	; 255
    d148:	20 81       	ld	r18, Z
    d14a:	2e 32       	cpi	r18, 0x2E	; 46
									st_clust(fs, dir, djn.obj.sclust);
    d14c:	71 f4       	brne	.+28     	; 0xd16a <f_rename+0x1f4>
    d14e:	2f 81       	ldd	r18, Y+7	; 0x07
    d150:	38 85       	ldd	r19, Y+8	; 0x08
    d152:	49 85       	ldd	r20, Y+9	; 0x09
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d154:	5a 85       	ldd	r21, Y+10	; 0x0a
    d156:	bc 01       	movw	r22, r24
    d158:	6b 5a       	subi	r22, 0xAB	; 171
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    d15a:	7f 4f       	sbci	r23, 0xFF	; 255
    d15c:	0e 94 b9 4a 	call	0x9572	; 0x9572 <st_clust.isra.5>
									fs->wflag = 1;
    d160:	ef 96       	adiw	r28, 0x3f	; 63
    d162:	ee ad       	ldd	r30, Y+62	; 0x3e
    d164:	ff ad       	ldd	r31, Y+63	; 0x3f
    d166:	ef 97       	sbiw	r28, 0x3f	; 63
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    d168:	b3 82       	std	Z+3, r11	; 0x03
    d16a:	ce 01       	movw	r24, r28
    d16c:	8f 96       	adiw	r24, 0x2f	; 47
    d16e:	0e 94 2f 55 	call	0xaa5e	; 0xaa5e <dir_remove>
				if (res == FR_OK) {
    d172:	8c 01       	movw	r16, r24
    d174:	89 2b       	or	r24, r25
    d176:	09 f0       	breq	.+2      	; 0xd17a <f_rename+0x204>
					res = sync_fs(fs);
    d178:	47 cf       	rjmp	.-370    	; 0xd008 <f_rename+0x92>
    d17a:	ef 96       	adiw	r28, 0x3f	; 63
    d17c:	8e ad       	ldd	r24, Y+62	; 0x3e
    d17e:	9f ad       	ldd	r25, Y+63	; 0x3f
    d180:	ef 97       	sbiw	r28, 0x3f	; 63
    d182:	0e 94 19 4b 	call	0x9632	; 0x9632 <sync_fs>
    d186:	8c 01       	movw	r16, r24
    d188:	3f cf       	rjmp	.-386    	; 0xd008 <f_rename+0x92>
    d18a:	08 e0       	ldi	r16, 0x08	; 8
    d18c:	10 e0       	ldi	r17, 0x00	; 0
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    d18e:	3c cf       	rjmp	.-392    	; 0xd008 <f_rename+0x92>
    d190:	02 e0       	ldi	r16, 0x02	; 2
    d192:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d194:	39 cf       	rjmp	.-398    	; 0xd008 <f_rename+0x92>
    d196:	ce 57       	subi	r28, 0x7E	; 126
    d198:	df 4f       	sbci	r29, 0xFF	; 255
    d19a:	e9 e0       	ldi	r30, 0x09	; 9
    d19c:	0c 94 53 e5 	jmp	0x1caa6	; 0x1caa6 <__epilogue_restores__+0x12>

0000d1a0 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    d1a0:	a2 e3       	ldi	r26, 0x32	; 50
    d1a2:	b0 e0       	ldi	r27, 0x00	; 0
    d1a4:	e6 ed       	ldi	r30, 0xD6	; 214
    d1a6:	f8 e6       	ldi	r31, 0x68	; 104
    d1a8:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    d1ac:	9a ab       	std	Y+50, r25	; 0x32
    d1ae:	89 ab       	std	Y+49, r24	; 0x31
    d1b0:	e6 2e       	mov	r14, r22
    d1b2:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d1b4:	42 e0       	ldi	r20, 0x02	; 2
    d1b6:	be 01       	movw	r22, r28
    d1b8:	61 5d       	subi	r22, 0xD1	; 209
    d1ba:	7f 4f       	sbci	r23, 0xFF	; 255
    d1bc:	ce 01       	movw	r24, r28
    d1be:	c1 96       	adiw	r24, 0x31	; 49
    d1c0:	0e 94 ae 4c 	call	0x995c	; 0x995c <mount_volume>
	if (res == FR_OK) {
    d1c4:	00 97       	sbiw	r24, 0x00	; 0
    d1c6:	a9 f5       	brne	.+106    	; 0xd232 <f_chmod+0x92>
		dj.obj.fs = fs;
    d1c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    d1ca:	98 a9       	ldd	r25, Y+48	; 0x30
    d1cc:	9a 83       	std	Y+2, r25	; 0x02
    d1ce:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d1d0:	80 e0       	ldi	r24, 0x00	; 0
    d1d2:	92 e0       	ldi	r25, 0x02	; 2
    d1d4:	27 d1       	rcall	.+590    	; 0xd424 <ff_memalloc>
    d1d6:	6c 01       	movw	r12, r24
    d1d8:	00 97       	sbiw	r24, 0x00	; 0
    d1da:	b1 f0       	breq	.+44     	; 0xd208 <f_chmod+0x68>
    d1dc:	ef a5       	ldd	r30, Y+47	; 0x2f
    d1de:	f8 a9       	ldd	r31, Y+48	; 0x30
    d1e0:	94 87       	std	Z+12, r25	; 0x0c
    d1e2:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d1e4:	69 a9       	ldd	r22, Y+49	; 0x31
    d1e6:	7a a9       	ldd	r23, Y+50	; 0x32
    d1e8:	ce 01       	movw	r24, r28
    d1ea:	01 96       	adiw	r24, 0x01	; 1
    d1ec:	0e 94 29 58 	call	0xb052	; 0xb052 <follow_path>
    d1f0:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d1f2:	89 2b       	or	r24, r25
    d1f4:	29 f4       	brne	.+10     	; 0xd200 <f_chmod+0x60>
    d1f6:	88 a5       	ldd	r24, Y+40	; 0x28
    d1f8:	80 7a       	andi	r24, 0xA0	; 160
    d1fa:	49 f0       	breq	.+18     	; 0xd20e <f_chmod+0x6e>
    d1fc:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d1fe:	10 e0       	ldi	r17, 0x00	; 0
    d200:	c6 01       	movw	r24, r12
    d202:	13 d1       	rcall	.+550    	; 0xd42a <ff_memfree>
    d204:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d206:	15 c0       	rjmp	.+42     	; 0xd232 <f_chmod+0x92>
    d208:	81 e1       	ldi	r24, 0x11	; 17
    d20a:	90 e0       	ldi	r25, 0x00	; 0
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d20c:	12 c0       	rjmp	.+36     	; 0xd232 <f_chmod+0x92>
    d20e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d210:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d212:	83 85       	ldd	r24, Z+11	; 0x0b
    d214:	6e 2d       	mov	r22, r14
    d216:	68 27       	eor	r22, r24
    d218:	6f 21       	and	r22, r15
    d21a:	67 72       	andi	r22, 0x27	; 39
    d21c:	68 27       	eor	r22, r24
				fs->wflag = 1;
    d21e:	63 87       	std	Z+11, r22	; 0x0b
    d220:	8f a5       	ldd	r24, Y+47	; 0x2f
    d222:	98 a9       	ldd	r25, Y+48	; 0x30
    d224:	21 e0       	ldi	r18, 0x01	; 1
    d226:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d228:	23 83       	std	Z+3, r18	; 0x03
    d22a:	0e 94 19 4b 	call	0x9632	; 0x9632 <sync_fs>
    d22e:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d230:	e7 cf       	rjmp	.-50     	; 0xd200 <f_chmod+0x60>
    d232:	e2 96       	adiw	r28, 0x32	; 50
    d234:	e8 e0       	ldi	r30, 0x08	; 8
    d236:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

0000d23a <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d23a:	a2 e3       	ldi	r26, 0x32	; 50
    d23c:	b0 e0       	ldi	r27, 0x00	; 0
    d23e:	e3 e2       	ldi	r30, 0x23	; 35
    d240:	f9 e6       	ldi	r31, 0x69	; 105
    d242:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    d246:	9a ab       	std	Y+50, r25	; 0x32
    d248:	89 ab       	std	Y+49, r24	; 0x31
    d24a:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d24c:	42 e0       	ldi	r20, 0x02	; 2
    d24e:	be 01       	movw	r22, r28
    d250:	61 5d       	subi	r22, 0xD1	; 209
    d252:	7f 4f       	sbci	r23, 0xFF	; 255
    d254:	ce 01       	movw	r24, r28
    d256:	c1 96       	adiw	r24, 0x31	; 49
    d258:	0e 94 ae 4c 	call	0x995c	; 0x995c <mount_volume>
	if (res == FR_OK) {
    d25c:	00 97       	sbiw	r24, 0x00	; 0
    d25e:	09 f0       	breq	.+2      	; 0xd262 <f_utime+0x28>
    d260:	41 c0       	rjmp	.+130    	; 0xd2e4 <f_utime+0xaa>
		dj.obj.fs = fs;
    d262:	8f a5       	ldd	r24, Y+47	; 0x2f
    d264:	98 a9       	ldd	r25, Y+48	; 0x30
    d266:	9a 83       	std	Y+2, r25	; 0x02
    d268:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d26a:	80 e0       	ldi	r24, 0x00	; 0
    d26c:	92 e0       	ldi	r25, 0x02	; 2
    d26e:	da d0       	rcall	.+436    	; 0xd424 <ff_memalloc>
    d270:	7c 01       	movw	r14, r24
    d272:	00 97       	sbiw	r24, 0x00	; 0
    d274:	b1 f0       	breq	.+44     	; 0xd2a2 <f_utime+0x68>
    d276:	ef a5       	ldd	r30, Y+47	; 0x2f
    d278:	f8 a9       	ldd	r31, Y+48	; 0x30
    d27a:	94 87       	std	Z+12, r25	; 0x0c
    d27c:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d27e:	69 a9       	ldd	r22, Y+49	; 0x31
    d280:	7a a9       	ldd	r23, Y+50	; 0x32
    d282:	ce 01       	movw	r24, r28
    d284:	01 96       	adiw	r24, 0x01	; 1
    d286:	0e 94 29 58 	call	0xb052	; 0xb052 <follow_path>
    d28a:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d28c:	89 2b       	or	r24, r25
    d28e:	29 f4       	brne	.+10     	; 0xd29a <f_utime+0x60>
    d290:	88 a5       	ldd	r24, Y+40	; 0x28
    d292:	80 7a       	andi	r24, 0xA0	; 160
    d294:	49 f0       	breq	.+18     	; 0xd2a8 <f_utime+0x6e>
    d296:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d298:	10 e0       	ldi	r17, 0x00	; 0
    d29a:	c7 01       	movw	r24, r14
    d29c:	c6 d0       	rcall	.+396    	; 0xd42a <ff_memfree>
    d29e:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d2a0:	21 c0       	rjmp	.+66     	; 0xd2e4 <f_utime+0xaa>
    d2a2:	81 e1       	ldi	r24, 0x11	; 17
    d2a4:	90 e0       	ldi	r25, 0x00	; 0
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d2a6:	1e c0       	rjmp	.+60     	; 0xd2e4 <f_utime+0xaa>
    d2a8:	f6 01       	movw	r30, r12
    d2aa:	44 81       	ldd	r20, Z+4	; 0x04
    d2ac:	55 81       	ldd	r21, Z+5	; 0x05
    d2ae:	60 e0       	ldi	r22, 0x00	; 0
    d2b0:	70 e0       	ldi	r23, 0x00	; 0
    d2b2:	ba 01       	movw	r22, r20
    d2b4:	55 27       	eor	r21, r21
    d2b6:	44 27       	eor	r20, r20
    d2b8:	86 81       	ldd	r24, Z+6	; 0x06
    d2ba:	97 81       	ldd	r25, Z+7	; 0x07
    d2bc:	a0 e0       	ldi	r26, 0x00	; 0
    d2be:	b0 e0       	ldi	r27, 0x00	; 0
    d2c0:	48 2b       	or	r20, r24
    d2c2:	59 2b       	or	r21, r25
    d2c4:	6a 2b       	or	r22, r26
    d2c6:	7b 2b       	or	r23, r27
    d2c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d2ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d2cc:	46 96       	adiw	r24, 0x16	; 22
    d2ce:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
				fs->wflag = 1;
    d2d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    d2d4:	98 a9       	ldd	r25, Y+48	; 0x30
    d2d6:	21 e0       	ldi	r18, 0x01	; 1
    d2d8:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d2da:	23 83       	std	Z+3, r18	; 0x03
    d2dc:	0e 94 19 4b 	call	0x9632	; 0x9632 <sync_fs>
    d2e0:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d2e2:	db cf       	rjmp	.-74     	; 0xd29a <f_utime+0x60>
    d2e4:	e2 96       	adiw	r28, 0x32	; 50
    d2e6:	e8 e0       	ldi	r30, 0x08	; 8
    d2e8:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

0000d2ec <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d2ec:	a2 e3       	ldi	r26, 0x32	; 50
    d2ee:	b0 e0       	ldi	r27, 0x00	; 0
    d2f0:	ec e7       	ldi	r30, 0x7C	; 124
    d2f2:	f9 e6       	ldi	r31, 0x69	; 105
    d2f4:	0c 94 34 e5 	jmp	0x1ca68	; 0x1ca68 <__prologue_saves__+0xc>
    d2f8:	9a ab       	std	Y+50, r25	; 0x32
    d2fa:	89 ab       	std	Y+49, r24	; 0x31
    d2fc:	6b 01       	movw	r12, r22
    d2fe:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d300:	40 e0       	ldi	r20, 0x00	; 0
    d302:	be 01       	movw	r22, r28
    d304:	61 5d       	subi	r22, 0xD1	; 209
    d306:	7f 4f       	sbci	r23, 0xFF	; 255
    d308:	ce 01       	movw	r24, r28
    d30a:	c1 96       	adiw	r24, 0x31	; 49
    d30c:	0e 94 ae 4c 	call	0x995c	; 0x995c <mount_volume>
    d310:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d312:	89 2b       	or	r24, r25
    d314:	09 f0       	breq	.+2      	; 0xd318 <f_getlabel+0x2c>
    d316:	81 c0       	rjmp	.+258    	; 0xd41a <f_getlabel+0x12e>
    d318:	c1 14       	cp	r12, r1
    d31a:	d1 04       	cpc	r13, r1
    d31c:	09 f4       	brne	.+2      	; 0xd320 <f_getlabel+0x34>
    d31e:	53 c0       	rjmp	.+166    	; 0xd3c6 <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d320:	8f a5       	ldd	r24, Y+47	; 0x2f
    d322:	98 a9       	ldd	r25, Y+48	; 0x30
    d324:	9a 83       	std	Y+2, r25	; 0x02
    d326:	89 83       	std	Y+1, r24	; 0x01
    d328:	1f 82       	std	Y+7, r1	; 0x07
    d32a:	18 86       	std	Y+8, r1	; 0x08
    d32c:	19 86       	std	Y+9, r1	; 0x09
    d32e:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d330:	40 e0       	ldi	r20, 0x00	; 0
    d332:	50 e0       	ldi	r21, 0x00	; 0
    d334:	ba 01       	movw	r22, r20
    d336:	ce 01       	movw	r24, r28
    d338:	01 96       	adiw	r24, 0x01	; 1
    d33a:	0e 94 c3 50 	call	0xa186	; 0xa186 <dir_sdi>
		if (res == FR_OK) {
    d33e:	00 97       	sbiw	r24, 0x00	; 0
    d340:	e9 f5       	brne	.+122    	; 0xd3bc <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d342:	61 e0       	ldi	r22, 0x01	; 1
    d344:	70 e0       	ldi	r23, 0x00	; 0
    d346:	ce 01       	movw	r24, r28
    d348:	01 96       	adiw	r24, 0x01	; 1
    d34a:	0e 94 5d 54 	call	0xa8ba	; 0xa8ba <dir_read>
		 	if (res == FR_OK) {
    d34e:	00 97       	sbiw	r24, 0x00	; 0
    d350:	a9 f5       	brne	.+106    	; 0xd3bc <f_getlabel+0xd0>
    d352:	00 e0       	ldi	r16, 0x00	; 0
    d354:	10 e0       	ldi	r17, 0x00	; 0
    d356:	80 e0       	ldi	r24, 0x00	; 0
    d358:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d35a:	4c 01       	movw	r8, r24
    d35c:	2f ef       	ldi	r18, 0xFF	; 255
    d35e:	82 1a       	sub	r8, r18
    d360:	92 0a       	sbc	r9, r18
    d362:	2b 8d       	ldd	r18, Y+27	; 0x1b
    d364:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d366:	f9 01       	movw	r30, r18
    d368:	e8 0f       	add	r30, r24
    d36a:	f9 1f       	adc	r31, r25
    d36c:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    d36e:	65 eb       	ldi	r22, 0xB5	; 181
    d370:	71 e0       	ldi	r23, 0x01	; 1
    d372:	90 e0       	ldi	r25, 0x00	; 0
    d374:	90 d0       	rcall	.+288    	; 0xd496 <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d376:	00 97       	sbiw	r24, 0x00	; 0
    d378:	19 f4       	brne	.+6      	; 0xd380 <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    d37a:	00 e0       	ldi	r16, 0x00	; 0
    d37c:	10 e0       	ldi	r17, 0x00	; 0
    d37e:	13 c0       	rjmp	.+38     	; 0xd3a6 <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d380:	bc 01       	movw	r22, r24
    d382:	80 e0       	ldi	r24, 0x00	; 0
    d384:	90 e0       	ldi	r25, 0x00	; 0
    d386:	24 e0       	ldi	r18, 0x04	; 4
    d388:	30 e0       	ldi	r19, 0x00	; 0
    d38a:	a6 01       	movw	r20, r12
    d38c:	40 0f       	add	r20, r16
    d38e:	51 1f       	adc	r21, r17
    d390:	0e 94 de 48 	call	0x91bc	; 0x91bc <put_utf>
    d394:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    d396:	00 97       	sbiw	r24, 0x00	; 0
    d398:	81 f3       	breq	.-32     	; 0xd37a <f_getlabel+0x8e>
						di += wc;
    d39a:	08 0f       	add	r16, r24
    d39c:	19 1f       	adc	r17, r25
    d39e:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d3a0:	8b 30       	cpi	r24, 0x0B	; 11
    d3a2:	91 05       	cpc	r25, r1
    d3a4:	d1 f6       	brne	.-76     	; 0xd35a <f_getlabel+0x6e>
    d3a6:	f6 01       	movw	r30, r12
    d3a8:	e0 0f       	add	r30, r16
    d3aa:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d3ac:	10 82       	st	Z, r1
						if (di == 0) break;
    d3ae:	ce 16       	cp	r12, r30
    d3b0:	df 06       	cpc	r13, r31
    d3b2:	49 f0       	breq	.+18     	; 0xd3c6 <f_getlabel+0xda>
					} while (label[--di] == ' ');
    d3b4:	82 91       	ld	r24, -Z
    d3b6:	80 32       	cpi	r24, 0x20	; 32
    d3b8:	c9 f3       	breq	.-14     	; 0xd3ac <f_getlabel+0xc0>
    d3ba:	05 c0       	rjmp	.+10     	; 0xd3c6 <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d3bc:	84 30       	cpi	r24, 0x04	; 4
    d3be:	91 05       	cpc	r25, r1
    d3c0:	59 f5       	brne	.+86     	; 0xd418 <f_getlabel+0x12c>
			label[0] = 0;
    d3c2:	f6 01       	movw	r30, r12
    d3c4:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d3c6:	a1 14       	cp	r10, r1
    d3c8:	b1 04       	cpc	r11, r1
    d3ca:	39 f1       	breq	.+78     	; 0xd41a <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    d3cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    d3ce:	98 a9       	ldd	r25, Y+48	; 0x30
    d3d0:	fc 01       	movw	r30, r24
    d3d2:	41 a1       	ldd	r20, Z+33	; 0x21
    d3d4:	52 a1       	ldd	r21, Z+34	; 0x22
    d3d6:	63 a1       	ldd	r22, Z+35	; 0x23
    d3d8:	74 a1       	ldd	r23, Z+36	; 0x24
    d3da:	0e 94 33 4c 	call	0x9866	; 0x9866 <move_window>
    d3de:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    d3e0:	89 2b       	or	r24, r25
    d3e2:	d9 f4       	brne	.+54     	; 0xd41a <f_getlabel+0x12e>
			switch (fs->fs_type) {
    d3e4:	ef a5       	ldd	r30, Y+47	; 0x2f
    d3e6:	f8 a9       	ldd	r31, Y+48	; 0x30
    d3e8:	80 81       	ld	r24, Z
    d3ea:	83 30       	cpi	r24, 0x03	; 3
    d3ec:	29 f0       	breq	.+10     	; 0xd3f8 <f_getlabel+0x10c>
    d3ee:	84 30       	cpi	r24, 0x04	; 4
    d3f0:	31 f0       	breq	.+12     	; 0xd3fe <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d3f2:	87 e2       	ldi	r24, 0x27	; 39
    d3f4:	90 e0       	ldi	r25, 0x00	; 0
    d3f6:	05 c0       	rjmp	.+10     	; 0xd402 <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d3f8:	83 e4       	ldi	r24, 0x43	; 67
    d3fa:	90 e0       	ldi	r25, 0x00	; 0
    d3fc:	02 c0       	rjmp	.+4      	; 0xd402 <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d3fe:	84 e6       	ldi	r24, 0x64	; 100
    d400:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d402:	f5 96       	adiw	r30, 0x35	; 53
    d404:	8e 0f       	add	r24, r30
    d406:	9f 1f       	adc	r25, r31
    d408:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <ld_dword>
    d40c:	f5 01       	movw	r30, r10
    d40e:	60 83       	st	Z, r22
    d410:	71 83       	std	Z+1, r23	; 0x01
    d412:	82 83       	std	Z+2, r24	; 0x02
    d414:	93 83       	std	Z+3, r25	; 0x03
    d416:	01 c0       	rjmp	.+2      	; 0xd41a <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d418:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d41a:	c7 01       	movw	r24, r14
    d41c:	e2 96       	adiw	r28, 0x32	; 50
    d41e:	ec e0       	ldi	r30, 0x0C	; 12
    d420:	0c 94 50 e5 	jmp	0x1caa0	; 0x1caa0 <__epilogue_restores__+0xc>

0000d424 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d424:	0c 94 b1 29 	jmp	0x5362	; 0x5362 <safemalloc>
}
    d428:	08 95       	ret

0000d42a <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d42a:	0c 94 d2 29 	jmp	0x53a4	; 0x53a4 <safefree>
    d42e:	08 95       	ret

0000d430 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d430:	cf 92       	push	r12
    d432:	df 92       	push	r13
    d434:	ef 92       	push	r14
    d436:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d438:	60 38       	cpi	r22, 0x80	; 128
    d43a:	71 05       	cpc	r23, r1
    d43c:	81 05       	cpc	r24, r1
    d43e:	91 05       	cpc	r25, r1
    d440:	10 f4       	brcc	.+4      	; 0xd446 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d442:	cb 01       	movw	r24, r22
    d444:	23 c0       	rjmp	.+70     	; 0xd48c <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d446:	61 15       	cp	r22, r1
    d448:	71 05       	cpc	r23, r1
    d44a:	21 e0       	ldi	r18, 0x01	; 1
    d44c:	82 07       	cpc	r24, r18
    d44e:	91 05       	cpc	r25, r1
    d450:	d8 f4       	brcc	.+54     	; 0xd488 <ff_uni2oem+0x58>
    d452:	45 3b       	cpi	r20, 0xB5	; 181
    d454:	51 40       	sbci	r21, 0x01	; 1
    d456:	c1 f4       	brne	.+48     	; 0xd488 <ff_uni2oem+0x58>
    d458:	e8 e0       	ldi	r30, 0x08	; 8
    d45a:	f6 e0       	ldi	r31, 0x06	; 6
    d45c:	20 e0       	ldi	r18, 0x00	; 0
    d45e:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d460:	c1 90       	ld	r12, Z+
    d462:	d1 90       	ld	r13, Z+
    d464:	e1 2c       	mov	r14, r1
    d466:	f1 2c       	mov	r15, r1
    d468:	6c 15       	cp	r22, r12
    d46a:	7d 05       	cpc	r23, r13
    d46c:	8e 05       	cpc	r24, r14
    d46e:	9f 05       	cpc	r25, r15
    d470:	29 f0       	breq	.+10     	; 0xd47c <ff_uni2oem+0x4c>
    d472:	2f 5f       	subi	r18, 0xFF	; 255
    d474:	3f 4f       	sbci	r19, 0xFF	; 255
    d476:	20 38       	cpi	r18, 0x80	; 128
    d478:	31 05       	cpc	r19, r1
    d47a:	91 f7       	brne	.-28     	; 0xd460 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d47c:	b9 01       	movw	r22, r18
    d47e:	60 58       	subi	r22, 0x80	; 128
    d480:	7f 4f       	sbci	r23, 0xFF	; 255
    d482:	cb 01       	movw	r24, r22
    d484:	99 27       	eor	r25, r25
    d486:	02 c0       	rjmp	.+4      	; 0xd48c <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d488:	80 e0       	ldi	r24, 0x00	; 0
    d48a:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d48c:	ff 90       	pop	r15
    d48e:	ef 90       	pop	r14
    d490:	df 90       	pop	r13
    d492:	cf 90       	pop	r12
    d494:	08 95       	ret

0000d496 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d496:	80 38       	cpi	r24, 0x80	; 128
    d498:	91 05       	cpc	r25, r1
    d49a:	88 f0       	brcs	.+34     	; 0xd4be <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d49c:	65 3b       	cpi	r22, 0xB5	; 181
    d49e:	71 40       	sbci	r23, 0x01	; 1
    d4a0:	61 f4       	brne	.+24     	; 0xd4ba <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d4a2:	8f 3f       	cpi	r24, 0xFF	; 255
    d4a4:	91 05       	cpc	r25, r1
    d4a6:	09 f0       	breq	.+2      	; 0xd4aa <ff_oem2uni+0x14>
    d4a8:	40 f4       	brcc	.+16     	; 0xd4ba <ff_oem2uni+0x24>
    d4aa:	88 0f       	add	r24, r24
    d4ac:	99 1f       	adc	r25, r25
    d4ae:	fc 01       	movw	r30, r24
    d4b0:	e8 5f       	subi	r30, 0xF8	; 248
    d4b2:	fa 4f       	sbci	r31, 0xFA	; 250
    d4b4:	80 81       	ld	r24, Z
    d4b6:	91 81       	ldd	r25, Z+1	; 0x01
    d4b8:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d4ba:	80 e0       	ldi	r24, 0x00	; 0
    d4bc:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d4be:	08 95       	ret

0000d4c0 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d4c0:	61 15       	cp	r22, r1
    d4c2:	71 05       	cpc	r23, r1
    d4c4:	21 e0       	ldi	r18, 0x01	; 1
    d4c6:	82 07       	cpc	r24, r18
    d4c8:	91 05       	cpc	r25, r1
    d4ca:	08 f0       	brcs	.+2      	; 0xd4ce <ff_wtoupper+0xe>
    d4cc:	5a c0       	rjmp	.+180    	; 0xd582 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d4ce:	61 15       	cp	r22, r1
    d4d0:	80 e1       	ldi	r24, 0x10	; 16
    d4d2:	78 07       	cpc	r23, r24
    d4d4:	18 f0       	brcs	.+6      	; 0xd4dc <ff_wtoupper+0x1c>
    d4d6:	aa e5       	ldi	r26, 0x5A	; 90
    d4d8:	b3 e0       	ldi	r27, 0x03	; 3
    d4da:	02 c0       	rjmp	.+4      	; 0xd4e0 <ff_wtoupper+0x20>
    d4dc:	a6 e1       	ldi	r26, 0x16	; 22
    d4de:	b4 e0       	ldi	r27, 0x04	; 4
		for (;;) {
			bc = *p++;								/* Get the block base */
    d4e0:	2d 91       	ld	r18, X+
    d4e2:	3c 91       	ld	r19, X
    d4e4:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d4e6:	21 15       	cp	r18, r1
    d4e8:	31 05       	cpc	r19, r1
    d4ea:	09 f4       	brne	.+2      	; 0xd4ee <ff_wtoupper+0x2e>
    d4ec:	48 c0       	rjmp	.+144    	; 0xd57e <ff_wtoupper+0xbe>
    d4ee:	62 17       	cp	r22, r18
    d4f0:	73 07       	cpc	r23, r19
    d4f2:	08 f4       	brcc	.+2      	; 0xd4f6 <ff_wtoupper+0x36>
    d4f4:	44 c0       	rjmp	.+136    	; 0xd57e <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d4f6:	14 96       	adiw	r26, 0x04	; 4
    d4f8:	fd 01       	movw	r30, r26
    d4fa:	32 97       	sbiw	r30, 0x02	; 2
    d4fc:	80 81       	ld	r24, Z
    d4fe:	91 81       	ldd	r25, Z+1	; 0x01
    d500:	e9 2f       	mov	r30, r25
    d502:	ff 27       	eor	r31, r31
    d504:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d506:	a9 01       	movw	r20, r18
    d508:	48 0f       	add	r20, r24
    d50a:	59 1f       	adc	r21, r25
    d50c:	64 17       	cp	r22, r20
    d50e:	75 07       	cpc	r23, r21
    d510:	70 f5       	brcc	.+92     	; 0xd56e <ff_wtoupper+0xae>
				switch (cmd) {
    d512:	e9 30       	cpi	r30, 0x09	; 9
    d514:	f1 05       	cpc	r31, r1
    d516:	98 f5       	brcc	.+102    	; 0xd57e <ff_wtoupper+0xbe>
    d518:	ec 54       	subi	r30, 0x4C	; 76
    d51a:	ff 4f       	sbci	r31, 0xFF	; 255
    d51c:	0c 94 ea e4 	jmp	0x1c9d4	; 0x1c9d4 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d520:	62 1b       	sub	r22, r18
    d522:	73 0b       	sbc	r23, r19
    d524:	fb 01       	movw	r30, r22
    d526:	ee 0f       	add	r30, r30
    d528:	ff 1f       	adc	r31, r31
    d52a:	ea 0f       	add	r30, r26
    d52c:	fb 1f       	adc	r31, r27
    d52e:	60 81       	ld	r22, Z
    d530:	71 81       	ldd	r23, Z+1	; 0x01
    d532:	25 c0       	rjmp	.+74     	; 0xd57e <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d534:	cb 01       	movw	r24, r22
    d536:	82 1b       	sub	r24, r18
    d538:	93 0b       	sbc	r25, r19
    d53a:	81 70       	andi	r24, 0x01	; 1
    d53c:	99 27       	eor	r25, r25
    d53e:	68 1b       	sub	r22, r24
    d540:	79 0b       	sbc	r23, r25
    d542:	1d c0       	rjmp	.+58     	; 0xd57e <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d544:	60 51       	subi	r22, 0x10	; 16
    d546:	71 09       	sbc	r23, r1
    d548:	1a c0       	rjmp	.+52     	; 0xd57e <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d54a:	60 52       	subi	r22, 0x20	; 32
    d54c:	71 09       	sbc	r23, r1
    d54e:	17 c0       	rjmp	.+46     	; 0xd57e <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d550:	60 53       	subi	r22, 0x30	; 48
    d552:	71 09       	sbc	r23, r1
    d554:	14 c0       	rjmp	.+40     	; 0xd57e <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d556:	6a 51       	subi	r22, 0x1A	; 26
    d558:	71 09       	sbc	r23, r1
    d55a:	11 c0       	rjmp	.+34     	; 0xd57e <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d55c:	68 5f       	subi	r22, 0xF8	; 248
    d55e:	7f 4f       	sbci	r23, 0xFF	; 255
    d560:	0e c0       	rjmp	.+28     	; 0xd57e <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d562:	60 55       	subi	r22, 0x50	; 80
    d564:	71 09       	sbc	r23, r1
    d566:	0b c0       	rjmp	.+22     	; 0xd57e <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d568:	60 56       	subi	r22, 0x60	; 96
    d56a:	7c 41       	sbci	r23, 0x1C	; 28
    d56c:	08 c0       	rjmp	.+16     	; 0xd57e <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d56e:	ef 2b       	or	r30, r31
    d570:	09 f0       	breq	.+2      	; 0xd574 <ff_wtoupper+0xb4>
    d572:	b6 cf       	rjmp	.-148    	; 0xd4e0 <ff_wtoupper+0x20>
    d574:	88 0f       	add	r24, r24
    d576:	99 1f       	adc	r25, r25
    d578:	a8 0f       	add	r26, r24
    d57a:	b9 1f       	adc	r27, r25
    d57c:	b1 cf       	rjmp	.-158    	; 0xd4e0 <ff_wtoupper+0x20>
		}
		uni = uc;
    d57e:	80 e0       	ldi	r24, 0x00	; 0
    d580:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d582:	08 95       	ret

0000d584 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
    d584:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_status() );
    d586:	02 c0       	rjmp	.+4      	; 0xd58c <disk_status+0x8>
    d588:	9b c1       	rjmp	.+822    	; 0xd8c0 <mmc_disk_status>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_status() );
#endif
	}
	return STA_NOINIT;
    d58a:	08 95       	ret
}
    d58c:	81 e0       	ldi	r24, 0x01	; 1
    d58e:	08 95       	ret

0000d590 <disk_initialize>:
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{

	switch (pdrv) {
    d590:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_initialize() );
    d592:	02 c0       	rjmp	.+4      	; 0xd598 <disk_initialize+0x8>
    d594:	f8 c0       	rjmp	.+496    	; 0xd786 <mmc_disk_initialize>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_initialize() );
#endif
	}
	return STA_NOINIT;
    d596:	08 95       	ret
}
    d598:	81 e0       	ldi	r24, 0x01	; 1
    d59a:	08 95       	ret

0000d59c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
    d59c:	0f 93       	push	r16
    d59e:	1f 93       	push	r17
    d5a0:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d5a2:	81 11       	cpse	r24, r1
    d5a4:	06 c0       	rjmp	.+12     	; 0xd5b2 <disk_read+0x16>
    d5a6:	ba 01       	movw	r22, r20
    d5a8:	a9 01       	movw	r20, r18
    d5aa:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_read(buff, sector, count) );
    d5ac:	98 01       	movw	r18, r16
    d5ae:	8b d1       	rcall	.+790    	; 0xd8c6 <mmc_disk_read>
    d5b0:	02 c0       	rjmp	.+4      	; 0xd5b6 <disk_read+0x1a>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_read(buff, sector, count) );
#endif
	}
	return RES_PARERR;
    d5b2:	84 e0       	ldi	r24, 0x04	; 4
    d5b4:	90 e0       	ldi	r25, 0x00	; 0
}
    d5b6:	1f 91       	pop	r17
    d5b8:	0f 91       	pop	r16
    d5ba:	08 95       	ret

0000d5bc <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
    d5bc:	0f 93       	push	r16
    d5be:	1f 93       	push	r17
    d5c0:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d5c2:	81 11       	cpse	r24, r1
    d5c4:	06 c0       	rjmp	.+12     	; 0xd5d2 <disk_write+0x16>
    d5c6:	ba 01       	movw	r22, r20
    d5c8:	a9 01       	movw	r20, r18
    d5ca:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_write(buff, sector, count) );
    d5cc:	98 01       	movw	r18, r16
    d5ce:	c1 d1       	rcall	.+898    	; 0xd952 <mmc_disk_write>
    d5d0:	02 c0       	rjmp	.+4      	; 0xd5d6 <disk_write+0x1a>
	case DEV_USB :
		return ( usb_disk_write(buff, sector, count) );
#endif
	}

	return RES_PARERR;
    d5d2:	84 e0       	ldi	r24, 0x04	; 4
    d5d4:	90 e0       	ldi	r25, 0x00	; 0
}
    d5d6:	1f 91       	pop	r17
    d5d8:	0f 91       	pop	r16
    d5da:	08 95       	ret

0000d5dc <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    d5dc:	96 2f       	mov	r25, r22
    switch (pdrv) {
    d5de:	81 11       	cpse	r24, r1
    d5e0:	04 c0       	rjmp	.+8      	; 0xd5ea <disk_ioctl+0xe>
    d5e2:	ba 01       	movw	r22, r20
#ifdef DRV_MMC
    case DEV_MMC :
        return ( mmc_disk_ioctl(cmd, buff) );
    d5e4:	89 2f       	mov	r24, r25
    d5e6:	1a c2       	rjmp	.+1076   	; 0xda1c <mmc_disk_ioctl>
#ifdef DRV_USB
    case DEV_MMC :
        return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d5e8:	08 95       	ret
    d5ea:	84 e0       	ldi	r24, 0x04	; 4
}
    d5ec:	90 e0       	ldi	r25, 0x00	; 0
    d5ee:	08 95       	ret

0000d5f0 <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    d5f0:	cd c4       	rjmp	.+2458   	; 0xdf8c <mmc_spi_TXRX>
    d5f2:	08 95       	ret

0000d5f4 <deselect>:
    d5f4:	a2 d4       	rcall	.+2372   	; 0xdf3a <mmc_spi_end>
    d5f6:	8f ef       	ldi	r24, 0xFF	; 255
    d5f8:	fb df       	rcall	.-10     	; 0xd5f0 <xchg_spi>
    d5fa:	8f ef       	ldi	r24, 0xFF	; 255
    d5fc:	f9 cf       	rjmp	.-14     	; 0xd5f0 <xchg_spi>
    d5fe:	08 95       	ret

0000d600 <rcvr_datablock>:
    d600:	0f 93       	push	r16
    d602:	1f 93       	push	r17
    d604:	cf 93       	push	r28
    d606:	df 93       	push	r29
    d608:	ec 01       	movw	r28, r24
    d60a:	8b 01       	movw	r16, r22
    d60c:	46 9a       	sbi	0x08, 6	; 8
    d60e:	3e 9a       	sbi	0x07, 6	; 7
    d610:	88 ee       	ldi	r24, 0xE8	; 232
    d612:	93 e0       	ldi	r25, 0x03	; 3
    d614:	be d4       	rcall	.+2428   	; 0xdf92 <mmc_set_ms_timeout>
    d616:	8f ef       	ldi	r24, 0xFF	; 255
    d618:	b9 d4       	rcall	.+2418   	; 0xdf8c <mmc_spi_TXRX>
    d61a:	8f 3f       	cpi	r24, 0xFF	; 255
    d61c:	31 f4       	brne	.+12     	; 0xd62a <rcvr_datablock+0x2a>
    d61e:	c0 d4       	rcall	.+2432   	; 0xdfa0 <mmc_test_timeout>
    d620:	89 2b       	or	r24, r25
    d622:	c9 f3       	breq	.-14     	; 0xd616 <rcvr_datablock+0x16>
    d624:	80 e0       	ldi	r24, 0x00	; 0
    d626:	90 e0       	ldi	r25, 0x00	; 0
    d628:	0d c0       	rjmp	.+26     	; 0xd644 <rcvr_datablock+0x44>
    d62a:	8e 3f       	cpi	r24, 0xFE	; 254
    d62c:	d9 f7       	brne	.-10     	; 0xd624 <rcvr_datablock+0x24>
    d62e:	b8 01       	movw	r22, r16
    d630:	ce 01       	movw	r24, r28
    d632:	a9 d4       	rcall	.+2386   	; 0xdf86 <mmc_spi_RX_buffer>
    d634:	8f ef       	ldi	r24, 0xFF	; 255
    d636:	dc df       	rcall	.-72     	; 0xd5f0 <xchg_spi>
    d638:	8f ef       	ldi	r24, 0xFF	; 255
    d63a:	da df       	rcall	.-76     	; 0xd5f0 <xchg_spi>
    d63c:	46 98       	cbi	0x08, 6	; 8
    d63e:	3e 9a       	sbi	0x07, 6	; 7
    d640:	81 e0       	ldi	r24, 0x01	; 1
    d642:	90 e0       	ldi	r25, 0x00	; 0
    d644:	df 91       	pop	r29
    d646:	cf 91       	pop	r28
    d648:	1f 91       	pop	r17
    d64a:	0f 91       	pop	r16
    d64c:	08 95       	ret

0000d64e <wait_ready>:
    d64e:	cf 93       	push	r28
    d650:	a0 d4       	rcall	.+2368   	; 0xdf92 <mmc_set_ms_timeout>
    d652:	8f ef       	ldi	r24, 0xFF	; 255
    d654:	9b d4       	rcall	.+2358   	; 0xdf8c <mmc_spi_TXRX>
    d656:	c8 2f       	mov	r28, r24
    d658:	8f 3f       	cpi	r24, 0xFF	; 255
    d65a:	19 f0       	breq	.+6      	; 0xd662 <wait_ready+0x14>
    d65c:	a1 d4       	rcall	.+2370   	; 0xdfa0 <mmc_test_timeout>
    d65e:	89 2b       	or	r24, r25
    d660:	c1 f3       	breq	.-16     	; 0xd652 <wait_ready+0x4>
    d662:	81 e0       	ldi	r24, 0x01	; 1
    d664:	90 e0       	ldi	r25, 0x00	; 0
    d666:	cf 3f       	cpi	r28, 0xFF	; 255
    d668:	11 f0       	breq	.+4      	; 0xd66e <wait_ready+0x20>
    d66a:	80 e0       	ldi	r24, 0x00	; 0
    d66c:	90 e0       	ldi	r25, 0x00	; 0
    d66e:	cf 91       	pop	r28
    d670:	08 95       	ret

0000d672 <select>:
    d672:	cf 93       	push	r28
    d674:	df 93       	push	r29
    d676:	54 d4       	rcall	.+2216   	; 0xdf20 <mmc_spi_begin>
    d678:	8f ef       	ldi	r24, 0xFF	; 255
    d67a:	ba df       	rcall	.-140    	; 0xd5f0 <xchg_spi>
    d67c:	88 ee       	ldi	r24, 0xE8	; 232
    d67e:	93 e0       	ldi	r25, 0x03	; 3
    d680:	e6 df       	rcall	.-52     	; 0xd64e <wait_ready>
    d682:	ec 01       	movw	r28, r24
    d684:	89 2b       	or	r24, r25
    d686:	61 f4       	brne	.+24     	; 0xd6a0 <select+0x2e>
    d688:	82 ec       	ldi	r24, 0xC2	; 194
    d68a:	97 e0       	ldi	r25, 0x07	; 7
    d68c:	1f 92       	push	r1
    d68e:	9f 93       	push	r25
    d690:	8f 93       	push	r24
    d692:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    d696:	ae df       	rcall	.-164    	; 0xd5f4 <deselect>
    d698:	0f 90       	pop	r0
    d69a:	0f 90       	pop	r0
    d69c:	0f 90       	pop	r0
    d69e:	02 c0       	rjmp	.+4      	; 0xd6a4 <select+0x32>
    d6a0:	c1 e0       	ldi	r28, 0x01	; 1
    d6a2:	d0 e0       	ldi	r29, 0x00	; 0
    d6a4:	ce 01       	movw	r24, r28
    d6a6:	df 91       	pop	r29
    d6a8:	cf 91       	pop	r28
    d6aa:	08 95       	ret

0000d6ac <send_cmd>:
    d6ac:	ff 92       	push	r15
    d6ae:	0f 93       	push	r16
    d6b0:	1f 93       	push	r17
    d6b2:	cf 93       	push	r28
    d6b4:	df 93       	push	r29
    d6b6:	c8 2f       	mov	r28, r24
    d6b8:	d4 2f       	mov	r29, r20
    d6ba:	15 2f       	mov	r17, r21
    d6bc:	06 2f       	mov	r16, r22
    d6be:	f7 2e       	mov	r15, r23
    d6c0:	87 ff       	sbrs	r24, 7
    d6c2:	08 c0       	rjmp	.+16     	; 0xd6d4 <send_cmd+0x28>
    d6c4:	40 e0       	ldi	r20, 0x00	; 0
    d6c6:	50 e0       	ldi	r21, 0x00	; 0
    d6c8:	ba 01       	movw	r22, r20
    d6ca:	87 e3       	ldi	r24, 0x37	; 55
    d6cc:	ef df       	rcall	.-34     	; 0xd6ac <send_cmd>
    d6ce:	82 30       	cpi	r24, 0x02	; 2
    d6d0:	58 f5       	brcc	.+86     	; 0xd728 <send_cmd+0x7c>
    d6d2:	cf 77       	andi	r28, 0x7F	; 127
    d6d4:	cc 30       	cpi	r28, 0x0C	; 12
    d6d6:	71 f4       	brne	.+28     	; 0xd6f4 <send_cmd+0x48>
    d6d8:	8c 2f       	mov	r24, r28
    d6da:	80 64       	ori	r24, 0x40	; 64
    d6dc:	89 df       	rcall	.-238    	; 0xd5f0 <xchg_spi>
    d6de:	8f 2d       	mov	r24, r15
    d6e0:	87 df       	rcall	.-242    	; 0xd5f0 <xchg_spi>
    d6e2:	80 2f       	mov	r24, r16
    d6e4:	85 df       	rcall	.-246    	; 0xd5f0 <xchg_spi>
    d6e6:	81 2f       	mov	r24, r17
    d6e8:	83 df       	rcall	.-250    	; 0xd5f0 <xchg_spi>
    d6ea:	8d 2f       	mov	r24, r29
    d6ec:	81 df       	rcall	.-254    	; 0xd5f0 <xchg_spi>
    d6ee:	cc 23       	and	r28, r28
    d6f0:	c9 f0       	breq	.+50     	; 0xd724 <send_cmd+0x78>
    d6f2:	06 c0       	rjmp	.+12     	; 0xd700 <send_cmd+0x54>
    d6f4:	7f df       	rcall	.-258    	; 0xd5f4 <deselect>
    d6f6:	bd df       	rcall	.-134    	; 0xd672 <select>
    d6f8:	89 2b       	or	r24, r25
    d6fa:	71 f7       	brne	.-36     	; 0xd6d8 <send_cmd+0x2c>
    d6fc:	8f ef       	ldi	r24, 0xFF	; 255
    d6fe:	14 c0       	rjmp	.+40     	; 0xd728 <send_cmd+0x7c>
    d700:	c8 30       	cpi	r28, 0x08	; 8
    d702:	11 f4       	brne	.+4      	; 0xd708 <send_cmd+0x5c>
    d704:	87 e8       	ldi	r24, 0x87	; 135
    d706:	01 c0       	rjmp	.+2      	; 0xd70a <send_cmd+0x5e>
    d708:	81 e0       	ldi	r24, 0x01	; 1
    d70a:	72 df       	rcall	.-284    	; 0xd5f0 <xchg_spi>
    d70c:	cc 30       	cpi	r28, 0x0C	; 12
    d70e:	11 f4       	brne	.+4      	; 0xd714 <send_cmd+0x68>
    d710:	8f ef       	ldi	r24, 0xFF	; 255
    d712:	6e df       	rcall	.-292    	; 0xd5f0 <xchg_spi>
    d714:	ca e0       	ldi	r28, 0x0A	; 10
    d716:	8f ef       	ldi	r24, 0xFF	; 255
    d718:	39 d4       	rcall	.+2162   	; 0xdf8c <mmc_spi_TXRX>
    d71a:	87 ff       	sbrs	r24, 7
    d71c:	05 c0       	rjmp	.+10     	; 0xd728 <send_cmd+0x7c>
    d71e:	c1 50       	subi	r28, 0x01	; 1
    d720:	d1 f7       	brne	.-12     	; 0xd716 <send_cmd+0x6a>
    d722:	02 c0       	rjmp	.+4      	; 0xd728 <send_cmd+0x7c>
    d724:	85 e9       	ldi	r24, 0x95	; 149
    d726:	f5 cf       	rjmp	.-22     	; 0xd712 <send_cmd+0x66>
    d728:	cd b7       	in	r28, 0x3d	; 61
    d72a:	de b7       	in	r29, 0x3e	; 62
    d72c:	e5 e0       	ldi	r30, 0x05	; 5
    d72e:	0c 94 57 e5 	jmp	0x1caae	; 0x1caae <__epilogue_restores__+0x1a>

0000d732 <xmit_datablock>:
    d732:	0f 93       	push	r16
    d734:	1f 93       	push	r17
    d736:	cf 93       	push	r28
    d738:	8c 01       	movw	r16, r24
    d73a:	c6 2f       	mov	r28, r22
    d73c:	2c 9a       	sbi	0x05, 4	; 5
    d73e:	24 9a       	sbi	0x04, 4	; 4
    d740:	88 ee       	ldi	r24, 0xE8	; 232
    d742:	93 e0       	ldi	r25, 0x03	; 3
    d744:	84 df       	rcall	.-248    	; 0xd64e <wait_ready>
    d746:	89 2b       	or	r24, r25
    d748:	19 f4       	brne	.+6      	; 0xd750 <xmit_datablock+0x1e>
    d74a:	80 e0       	ldi	r24, 0x00	; 0
    d74c:	90 e0       	ldi	r25, 0x00	; 0
    d74e:	17 c0       	rjmp	.+46     	; 0xd77e <xmit_datablock+0x4c>
    d750:	8c 2f       	mov	r24, r28
    d752:	4e df       	rcall	.-356    	; 0xd5f0 <xchg_spi>
    d754:	cd 3f       	cpi	r28, 0xFD	; 253
    d756:	29 f4       	brne	.+10     	; 0xd762 <xmit_datablock+0x30>
    d758:	46 98       	cbi	0x08, 6	; 8
    d75a:	3e 9a       	sbi	0x07, 6	; 7
    d75c:	81 e0       	ldi	r24, 0x01	; 1
    d75e:	90 e0       	ldi	r25, 0x00	; 0
    d760:	0e c0       	rjmp	.+28     	; 0xd77e <xmit_datablock+0x4c>
    d762:	60 e0       	ldi	r22, 0x00	; 0
    d764:	72 e0       	ldi	r23, 0x02	; 2
    d766:	c8 01       	movw	r24, r16
    d768:	0b d4       	rcall	.+2070   	; 0xdf80 <mmc_spi_TX_buffer>
    d76a:	8f ef       	ldi	r24, 0xFF	; 255
    d76c:	41 df       	rcall	.-382    	; 0xd5f0 <xchg_spi>
    d76e:	8f ef       	ldi	r24, 0xFF	; 255
    d770:	3f df       	rcall	.-386    	; 0xd5f0 <xchg_spi>
    d772:	8f ef       	ldi	r24, 0xFF	; 255
    d774:	0b d4       	rcall	.+2070   	; 0xdf8c <mmc_spi_TXRX>
    d776:	8f 71       	andi	r24, 0x1F	; 31
    d778:	85 30       	cpi	r24, 0x05	; 5
    d77a:	39 f7       	brne	.-50     	; 0xd74a <xmit_datablock+0x18>
    d77c:	ed cf       	rjmp	.-38     	; 0xd758 <xmit_datablock+0x26>
    d77e:	cf 91       	pop	r28
    d780:	1f 91       	pop	r17
    d782:	0f 91       	pop	r16
    d784:	08 95       	ret

0000d786 <mmc_disk_initialize>:
    d786:	a4 e0       	ldi	r26, 0x04	; 4
    d788:	b0 e0       	ldi	r27, 0x00	; 0
    d78a:	e9 ec       	ldi	r30, 0xC9	; 201
    d78c:	fb e6       	ldi	r31, 0x6B	; 107
    d78e:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    d792:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d796:	81 fd       	sbrc	r24, 1
    d798:	8d c0       	rjmp	.+282    	; 0xd8b4 <mmc_disk_initialize+0x12e>
    d79a:	d3 d3       	rcall	.+1958   	; 0xdf42 <mmc_slow>
    d79c:	1a e0       	ldi	r17, 0x0A	; 10
    d79e:	8f ef       	ldi	r24, 0xFF	; 255
    d7a0:	27 df       	rcall	.-434    	; 0xd5f0 <xchg_spi>
    d7a2:	11 50       	subi	r17, 0x01	; 1
    d7a4:	e1 f7       	brne	.-8      	; 0xd79e <mmc_disk_initialize+0x18>
    d7a6:	40 e0       	ldi	r20, 0x00	; 0
    d7a8:	50 e0       	ldi	r21, 0x00	; 0
    d7aa:	ba 01       	movw	r22, r20
    d7ac:	80 e0       	ldi	r24, 0x00	; 0
    d7ae:	7e df       	rcall	.-260    	; 0xd6ac <send_cmd>
    d7b0:	81 30       	cpi	r24, 0x01	; 1
    d7b2:	09 f0       	breq	.+2      	; 0xd7b6 <mmc_disk_initialize+0x30>
    d7b4:	6f c0       	rjmp	.+222    	; 0xd894 <mmc_disk_initialize+0x10e>
    d7b6:	80 ed       	ldi	r24, 0xD0	; 208
    d7b8:	97 e0       	ldi	r25, 0x07	; 7
    d7ba:	eb d3       	rcall	.+2006   	; 0xdf92 <mmc_set_ms_timeout>
    d7bc:	4a ea       	ldi	r20, 0xAA	; 170
    d7be:	51 e0       	ldi	r21, 0x01	; 1
    d7c0:	60 e0       	ldi	r22, 0x00	; 0
    d7c2:	70 e0       	ldi	r23, 0x00	; 0
    d7c4:	88 e0       	ldi	r24, 0x08	; 8
    d7c6:	72 df       	rcall	.-284    	; 0xd6ac <send_cmd>
    d7c8:	81 30       	cpi	r24, 0x01	; 1
    d7ca:	09 f0       	breq	.+2      	; 0xd7ce <mmc_disk_initialize+0x48>
    d7cc:	3d c0       	rjmp	.+122    	; 0xd848 <mmc_disk_initialize+0xc2>
    d7ce:	8e 01       	movw	r16, r28
    d7d0:	0f 5f       	subi	r16, 0xFF	; 255
    d7d2:	1f 4f       	sbci	r17, 0xFF	; 255
    d7d4:	6e 01       	movw	r12, r28
    d7d6:	85 e0       	ldi	r24, 0x05	; 5
    d7d8:	c8 0e       	add	r12, r24
    d7da:	d1 1c       	adc	r13, r1
    d7dc:	78 01       	movw	r14, r16
    d7de:	8f ef       	ldi	r24, 0xFF	; 255
    d7e0:	d5 d3       	rcall	.+1962   	; 0xdf8c <mmc_spi_TXRX>
    d7e2:	f7 01       	movw	r30, r14
    d7e4:	81 93       	st	Z+, r24
    d7e6:	7f 01       	movw	r14, r30
    d7e8:	ce 16       	cp	r12, r30
    d7ea:	df 06       	cpc	r13, r31
    d7ec:	c1 f7       	brne	.-16     	; 0xd7de <mmc_disk_initialize+0x58>
    d7ee:	8b 81       	ldd	r24, Y+3	; 0x03
    d7f0:	81 30       	cpi	r24, 0x01	; 1
    d7f2:	09 f0       	breq	.+2      	; 0xd7f6 <mmc_disk_initialize+0x70>
    d7f4:	4f c0       	rjmp	.+158    	; 0xd894 <mmc_disk_initialize+0x10e>
    d7f6:	8c 81       	ldd	r24, Y+4	; 0x04
    d7f8:	8a 3a       	cpi	r24, 0xAA	; 170
    d7fa:	09 f0       	breq	.+2      	; 0xd7fe <mmc_disk_initialize+0x78>
    d7fc:	4b c0       	rjmp	.+150    	; 0xd894 <mmc_disk_initialize+0x10e>
    d7fe:	d0 d3       	rcall	.+1952   	; 0xdfa0 <mmc_test_timeout>
    d800:	89 2b       	or	r24, r25
    d802:	29 f0       	breq	.+10     	; 0xd80e <mmc_disk_initialize+0x88>
    d804:	cd d3       	rcall	.+1946   	; 0xdfa0 <mmc_test_timeout>
    d806:	89 2b       	or	r24, r25
    d808:	09 f0       	breq	.+2      	; 0xd80c <mmc_disk_initialize+0x86>
    d80a:	44 c0       	rjmp	.+136    	; 0xd894 <mmc_disk_initialize+0x10e>
    d80c:	09 c0       	rjmp	.+18     	; 0xd820 <mmc_disk_initialize+0x9a>
    d80e:	40 e0       	ldi	r20, 0x00	; 0
    d810:	50 e0       	ldi	r21, 0x00	; 0
    d812:	60 e0       	ldi	r22, 0x00	; 0
    d814:	70 e4       	ldi	r23, 0x40	; 64
    d816:	89 ea       	ldi	r24, 0xA9	; 169
    d818:	49 df       	rcall	.-366    	; 0xd6ac <send_cmd>
    d81a:	81 11       	cpse	r24, r1
    d81c:	f0 cf       	rjmp	.-32     	; 0xd7fe <mmc_disk_initialize+0x78>
    d81e:	f2 cf       	rjmp	.-28     	; 0xd804 <mmc_disk_initialize+0x7e>
    d820:	40 e0       	ldi	r20, 0x00	; 0
    d822:	50 e0       	ldi	r21, 0x00	; 0
    d824:	ba 01       	movw	r22, r20
    d826:	8a e3       	ldi	r24, 0x3A	; 58
    d828:	41 df       	rcall	.-382    	; 0xd6ac <send_cmd>
    d82a:	81 11       	cpse	r24, r1
    d82c:	33 c0       	rjmp	.+102    	; 0xd894 <mmc_disk_initialize+0x10e>
    d82e:	8f ef       	ldi	r24, 0xFF	; 255
    d830:	ad d3       	rcall	.+1882   	; 0xdf8c <mmc_spi_TXRX>
    d832:	f8 01       	movw	r30, r16
    d834:	81 93       	st	Z+, r24
    d836:	8f 01       	movw	r16, r30
    d838:	ce 16       	cp	r12, r30
    d83a:	df 06       	cpc	r13, r31
    d83c:	c1 f7       	brne	.-16     	; 0xd82e <mmc_disk_initialize+0xa8>
    d83e:	89 81       	ldd	r24, Y+1	; 0x01
    d840:	86 fd       	sbrc	r24, 6
    d842:	2a c0       	rjmp	.+84     	; 0xd898 <mmc_disk_initialize+0x112>
    d844:	14 e0       	ldi	r17, 0x04	; 4
    d846:	29 c0       	rjmp	.+82     	; 0xd89a <mmc_disk_initialize+0x114>
    d848:	80 ed       	ldi	r24, 0xD0	; 208
    d84a:	97 e0       	ldi	r25, 0x07	; 7
    d84c:	a2 d3       	rcall	.+1860   	; 0xdf92 <mmc_set_ms_timeout>
    d84e:	40 e0       	ldi	r20, 0x00	; 0
    d850:	50 e0       	ldi	r21, 0x00	; 0
    d852:	ba 01       	movw	r22, r20
    d854:	89 ea       	ldi	r24, 0xA9	; 169
    d856:	2a df       	rcall	.-428    	; 0xd6ac <send_cmd>
    d858:	82 30       	cpi	r24, 0x02	; 2
    d85a:	18 f0       	brcs	.+6      	; 0xd862 <mmc_disk_initialize+0xdc>
    d85c:	11 e0       	ldi	r17, 0x01	; 1
    d85e:	01 e0       	ldi	r16, 0x01	; 1
    d860:	02 c0       	rjmp	.+4      	; 0xd866 <mmc_disk_initialize+0xe0>
    d862:	12 e0       	ldi	r17, 0x02	; 2
    d864:	09 ea       	ldi	r16, 0xA9	; 169
    d866:	9c d3       	rcall	.+1848   	; 0xdfa0 <mmc_test_timeout>
    d868:	89 2b       	or	r24, r25
    d86a:	21 f0       	breq	.+8      	; 0xd874 <mmc_disk_initialize+0xee>
    d86c:	99 d3       	rcall	.+1842   	; 0xdfa0 <mmc_test_timeout>
    d86e:	89 2b       	or	r24, r25
    d870:	89 f4       	brne	.+34     	; 0xd894 <mmc_disk_initialize+0x10e>
    d872:	08 c0       	rjmp	.+16     	; 0xd884 <mmc_disk_initialize+0xfe>
    d874:	40 e0       	ldi	r20, 0x00	; 0
    d876:	50 e0       	ldi	r21, 0x00	; 0
    d878:	ba 01       	movw	r22, r20
    d87a:	80 2f       	mov	r24, r16
    d87c:	17 df       	rcall	.-466    	; 0xd6ac <send_cmd>
    d87e:	81 11       	cpse	r24, r1
    d880:	f2 cf       	rjmp	.-28     	; 0xd866 <mmc_disk_initialize+0xe0>
    d882:	f4 cf       	rjmp	.-24     	; 0xd86c <mmc_disk_initialize+0xe6>
    d884:	40 e0       	ldi	r20, 0x00	; 0
    d886:	52 e0       	ldi	r21, 0x02	; 2
    d888:	60 e0       	ldi	r22, 0x00	; 0
    d88a:	70 e0       	ldi	r23, 0x00	; 0
    d88c:	80 e1       	ldi	r24, 0x10	; 16
    d88e:	0e df       	rcall	.-484    	; 0xd6ac <send_cmd>
    d890:	88 23       	and	r24, r24
    d892:	19 f0       	breq	.+6      	; 0xd89a <mmc_disk_initialize+0x114>
    d894:	10 e0       	ldi	r17, 0x00	; 0
    d896:	01 c0       	rjmp	.+2      	; 0xd89a <mmc_disk_initialize+0x114>
    d898:	1c e0       	ldi	r17, 0x0C	; 12
    d89a:	10 93 13 18 	sts	0x1813, r17	; 0x801813 <CardType>
    d89e:	aa de       	rcall	.-684    	; 0xd5f4 <deselect>
    d8a0:	11 23       	and	r17, r17
    d8a2:	39 f0       	breq	.+14     	; 0xd8b2 <mmc_disk_initialize+0x12c>
    d8a4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d8a8:	8e 7f       	andi	r24, 0xFE	; 254
    d8aa:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    d8ae:	5b d3       	rcall	.+1718   	; 0xdf66 <mmc_fast>
    d8b0:	01 c0       	rjmp	.+2      	; 0xd8b4 <mmc_disk_initialize+0x12e>
    d8b2:	33 d4       	rcall	.+2150   	; 0xe11a <mmc_power_off>
    d8b4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d8b8:	24 96       	adiw	r28, 0x04	; 4
    d8ba:	e8 e0       	ldi	r30, 0x08	; 8
    d8bc:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

0000d8c0 <mmc_disk_status>:
    d8c0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d8c4:	08 95       	ret

0000d8c6 <mmc_disk_read>:
    d8c6:	ef 92       	push	r14
    d8c8:	ff 92       	push	r15
    d8ca:	1f 93       	push	r17
    d8cc:	cf 93       	push	r28
    d8ce:	df 93       	push	r29
    d8d0:	7c 01       	movw	r14, r24
    d8d2:	e9 01       	movw	r28, r18
    d8d4:	20 97       	sbiw	r28, 0x00	; 0
    d8d6:	19 f4       	brne	.+6      	; 0xd8de <mmc_disk_read+0x18>
    d8d8:	8d de       	rcall	.-742    	; 0xd5f4 <deselect>
    d8da:	84 e0       	ldi	r24, 0x04	; 4
    d8dc:	06 c0       	rjmp	.+12     	; 0xd8ea <mmc_disk_read+0x24>
    d8de:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d8e2:	80 ff       	sbrs	r24, 0
    d8e4:	04 c0       	rjmp	.+8      	; 0xd8ee <mmc_disk_read+0x28>
    d8e6:	86 de       	rcall	.-756    	; 0xd5f4 <deselect>
    d8e8:	83 e0       	ldi	r24, 0x03	; 3
    d8ea:	90 e0       	ldi	r25, 0x00	; 0
    d8ec:	2c c0       	rjmp	.+88     	; 0xd946 <mmc_disk_read+0x80>
    d8ee:	80 91 13 18 	lds	r24, 0x1813	; 0x801813 <CardType>
    d8f2:	83 fd       	sbrc	r24, 3
    d8f4:	07 c0       	rjmp	.+14     	; 0xd904 <mmc_disk_read+0x3e>
    d8f6:	89 e0       	ldi	r24, 0x09	; 9
    d8f8:	44 0f       	add	r20, r20
    d8fa:	55 1f       	adc	r21, r21
    d8fc:	66 1f       	adc	r22, r22
    d8fe:	77 1f       	adc	r23, r23
    d900:	8a 95       	dec	r24
    d902:	d1 f7       	brne	.-12     	; 0xd8f8 <mmc_disk_read+0x32>
    d904:	c2 30       	cpi	r28, 0x02	; 2
    d906:	d1 05       	cpc	r29, r1
    d908:	10 f4       	brcc	.+4      	; 0xd90e <mmc_disk_read+0x48>
    d90a:	11 e1       	ldi	r17, 0x11	; 17
    d90c:	01 c0       	rjmp	.+2      	; 0xd910 <mmc_disk_read+0x4a>
    d90e:	12 e1       	ldi	r17, 0x12	; 18
    d910:	81 2f       	mov	r24, r17
    d912:	cc de       	rcall	.-616    	; 0xd6ac <send_cmd>
    d914:	81 11       	cpse	r24, r1
    d916:	11 c0       	rjmp	.+34     	; 0xd93a <mmc_disk_read+0x74>
    d918:	60 e0       	ldi	r22, 0x00	; 0
    d91a:	72 e0       	ldi	r23, 0x02	; 2
    d91c:	c7 01       	movw	r24, r14
    d91e:	70 de       	rcall	.-800    	; 0xd600 <rcvr_datablock>
    d920:	89 2b       	or	r24, r25
    d922:	21 f0       	breq	.+8      	; 0xd92c <mmc_disk_read+0x66>
    d924:	8e ef       	ldi	r24, 0xFE	; 254
    d926:	f8 1a       	sub	r15, r24
    d928:	21 97       	sbiw	r28, 0x01	; 1
    d92a:	b1 f7       	brne	.-20     	; 0xd918 <mmc_disk_read+0x52>
    d92c:	12 31       	cpi	r17, 0x12	; 18
    d92e:	29 f4       	brne	.+10     	; 0xd93a <mmc_disk_read+0x74>
    d930:	40 e0       	ldi	r20, 0x00	; 0
    d932:	50 e0       	ldi	r21, 0x00	; 0
    d934:	ba 01       	movw	r22, r20
    d936:	8c e0       	ldi	r24, 0x0C	; 12
    d938:	b9 de       	rcall	.-654    	; 0xd6ac <send_cmd>
    d93a:	5c de       	rcall	.-840    	; 0xd5f4 <deselect>
    d93c:	81 e0       	ldi	r24, 0x01	; 1
    d93e:	90 e0       	ldi	r25, 0x00	; 0
    d940:	cd 2b       	or	r28, r29
    d942:	09 f4       	brne	.+2      	; 0xd946 <mmc_disk_read+0x80>
    d944:	80 e0       	ldi	r24, 0x00	; 0
    d946:	df 91       	pop	r29
    d948:	cf 91       	pop	r28
    d94a:	1f 91       	pop	r17
    d94c:	ff 90       	pop	r15
    d94e:	ef 90       	pop	r14
    d950:	08 95       	ret

0000d952 <mmc_disk_write>:
    d952:	a0 e0       	ldi	r26, 0x00	; 0
    d954:	b0 e0       	ldi	r27, 0x00	; 0
    d956:	ef ea       	ldi	r30, 0xAF	; 175
    d958:	fc e6       	ldi	r31, 0x6C	; 108
    d95a:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    d95e:	8c 01       	movw	r16, r24
    d960:	6a 01       	movw	r12, r20
    d962:	7b 01       	movw	r14, r22
    d964:	e9 01       	movw	r28, r18
    d966:	20 97       	sbiw	r28, 0x00	; 0
    d968:	19 f4       	brne	.+6      	; 0xd970 <mmc_disk_write+0x1e>
    d96a:	44 de       	rcall	.-888    	; 0xd5f4 <deselect>
    d96c:	84 e0       	ldi	r24, 0x04	; 4
    d96e:	06 c0       	rjmp	.+12     	; 0xd97c <mmc_disk_write+0x2a>
    d970:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d974:	80 ff       	sbrs	r24, 0
    d976:	04 c0       	rjmp	.+8      	; 0xd980 <mmc_disk_write+0x2e>
    d978:	3d de       	rcall	.-902    	; 0xd5f4 <deselect>
    d97a:	83 e0       	ldi	r24, 0x03	; 3
    d97c:	90 e0       	ldi	r25, 0x00	; 0
    d97e:	49 c0       	rjmp	.+146    	; 0xda12 <mmc_disk_write+0xc0>
    d980:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d984:	82 ff       	sbrs	r24, 2
    d986:	03 c0       	rjmp	.+6      	; 0xd98e <mmc_disk_write+0x3c>
    d988:	35 de       	rcall	.-918    	; 0xd5f4 <deselect>
    d98a:	82 e0       	ldi	r24, 0x02	; 2
    d98c:	f7 cf       	rjmp	.-18     	; 0xd97c <mmc_disk_write+0x2a>
    d98e:	80 91 13 18 	lds	r24, 0x1813	; 0x801813 <CardType>
    d992:	83 fd       	sbrc	r24, 3
    d994:	07 c0       	rjmp	.+14     	; 0xd9a4 <mmc_disk_write+0x52>
    d996:	99 e0       	ldi	r25, 0x09	; 9
    d998:	cc 0c       	add	r12, r12
    d99a:	dd 1c       	adc	r13, r13
    d99c:	ee 1c       	adc	r14, r14
    d99e:	ff 1c       	adc	r15, r15
    d9a0:	9a 95       	dec	r25
    d9a2:	d1 f7       	brne	.-12     	; 0xd998 <mmc_disk_write+0x46>
    d9a4:	c1 30       	cpi	r28, 0x01	; 1
    d9a6:	d1 05       	cpc	r29, r1
    d9a8:	89 f4       	brne	.+34     	; 0xd9cc <mmc_disk_write+0x7a>
    d9aa:	b7 01       	movw	r22, r14
    d9ac:	a6 01       	movw	r20, r12
    d9ae:	88 e1       	ldi	r24, 0x18	; 24
    d9b0:	7d de       	rcall	.-774    	; 0xd6ac <send_cmd>
    d9b2:	81 11       	cpse	r24, r1
    d9b4:	26 c0       	rjmp	.+76     	; 0xda02 <mmc_disk_write+0xb0>
    d9b6:	6e ef       	ldi	r22, 0xFE	; 254
    d9b8:	c8 01       	movw	r24, r16
    d9ba:	bb de       	rcall	.-650    	; 0xd732 <xmit_datablock>
    d9bc:	31 e0       	ldi	r19, 0x01	; 1
    d9be:	20 e0       	ldi	r18, 0x00	; 0
    d9c0:	89 2b       	or	r24, r25
    d9c2:	09 f0       	breq	.+2      	; 0xd9c6 <mmc_disk_write+0x74>
    d9c4:	30 e0       	ldi	r19, 0x00	; 0
    d9c6:	c3 2f       	mov	r28, r19
    d9c8:	d2 2f       	mov	r29, r18
    d9ca:	1d c0       	rjmp	.+58     	; 0xda06 <mmc_disk_write+0xb4>
    d9cc:	86 70       	andi	r24, 0x06	; 6
    d9ce:	29 f0       	breq	.+10     	; 0xd9da <mmc_disk_write+0x88>
    d9d0:	ae 01       	movw	r20, r28
    d9d2:	60 e0       	ldi	r22, 0x00	; 0
    d9d4:	70 e0       	ldi	r23, 0x00	; 0
    d9d6:	87 e9       	ldi	r24, 0x97	; 151
    d9d8:	69 de       	rcall	.-814    	; 0xd6ac <send_cmd>
    d9da:	b7 01       	movw	r22, r14
    d9dc:	a6 01       	movw	r20, r12
    d9de:	89 e1       	ldi	r24, 0x19	; 25
    d9e0:	65 de       	rcall	.-822    	; 0xd6ac <send_cmd>
    d9e2:	81 11       	cpse	r24, r1
    d9e4:	10 c0       	rjmp	.+32     	; 0xda06 <mmc_disk_write+0xb4>
    d9e6:	6c ef       	ldi	r22, 0xFC	; 252
    d9e8:	c8 01       	movw	r24, r16
    d9ea:	a3 de       	rcall	.-698    	; 0xd732 <xmit_datablock>
    d9ec:	89 2b       	or	r24, r25
    d9ee:	19 f0       	breq	.+6      	; 0xd9f6 <mmc_disk_write+0xa4>
    d9f0:	1e 5f       	subi	r17, 0xFE	; 254
    d9f2:	21 97       	sbiw	r28, 0x01	; 1
    d9f4:	c1 f7       	brne	.-16     	; 0xd9e6 <mmc_disk_write+0x94>
    d9f6:	6d ef       	ldi	r22, 0xFD	; 253
    d9f8:	80 e0       	ldi	r24, 0x00	; 0
    d9fa:	90 e0       	ldi	r25, 0x00	; 0
    d9fc:	9a de       	rcall	.-716    	; 0xd732 <xmit_datablock>
    d9fe:	89 2b       	or	r24, r25
    da00:	11 f4       	brne	.+4      	; 0xda06 <mmc_disk_write+0xb4>
    da02:	c1 e0       	ldi	r28, 0x01	; 1
    da04:	d0 e0       	ldi	r29, 0x00	; 0
    da06:	f6 dd       	rcall	.-1044   	; 0xd5f4 <deselect>
    da08:	81 e0       	ldi	r24, 0x01	; 1
    da0a:	90 e0       	ldi	r25, 0x00	; 0
    da0c:	cd 2b       	or	r28, r29
    da0e:	09 f4       	brne	.+2      	; 0xda12 <mmc_disk_write+0xc0>
    da10:	80 e0       	ldi	r24, 0x00	; 0
    da12:	cd b7       	in	r28, 0x3d	; 61
    da14:	de b7       	in	r29, 0x3e	; 62
    da16:	e8 e0       	ldi	r30, 0x08	; 8
    da18:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

0000da1c <mmc_disk_ioctl>:
    da1c:	a0 e1       	ldi	r26, 0x10	; 16
    da1e:	b0 e0       	ldi	r27, 0x00	; 0
    da20:	e4 e1       	ldi	r30, 0x14	; 20
    da22:	fd e6       	ldi	r31, 0x6D	; 109
    da24:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    da28:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Stat>
    da2c:	90 fd       	sbrc	r25, 0
    da2e:	2b c2       	rjmp	.+1110   	; 0xde86 <mmc_disk_ioctl+0x46a>
    da30:	8b 01       	movw	r16, r22
    da32:	83 33       	cpi	r24, 0x33	; 51
    da34:	09 f4       	brne	.+2      	; 0xda38 <mmc_disk_ioctl+0x1c>
    da36:	01 c1       	rjmp	.+514    	; 0xdc3a <mmc_disk_ioctl+0x21e>
    da38:	a0 f4       	brcc	.+40     	; 0xda62 <mmc_disk_ioctl+0x46>
    da3a:	83 30       	cpi	r24, 0x03	; 3
    da3c:	09 f4       	brne	.+2      	; 0xda40 <mmc_disk_ioctl+0x24>
    da3e:	85 c0       	rjmp	.+266    	; 0xdb4a <mmc_disk_ioctl+0x12e>
    da40:	28 f4       	brcc	.+10     	; 0xda4c <mmc_disk_ioctl+0x30>
    da42:	88 23       	and	r24, r24
    da44:	11 f1       	breq	.+68     	; 0xda8a <mmc_disk_ioctl+0x6e>
    da46:	81 30       	cpi	r24, 0x01	; 1
    da48:	11 f1       	breq	.+68     	; 0xda8e <mmc_disk_ioctl+0x72>
    da4a:	1f c2       	rjmp	.+1086   	; 0xde8a <mmc_disk_ioctl+0x46e>
    da4c:	87 30       	cpi	r24, 0x07	; 7
    da4e:	09 f4       	brne	.+2      	; 0xda52 <mmc_disk_ioctl+0x36>
    da50:	2a c1       	rjmp	.+596    	; 0xdca6 <mmc_disk_ioctl+0x28a>
    da52:	82 33       	cpi	r24, 0x32	; 50
    da54:	09 f0       	breq	.+2      	; 0xda58 <mmc_disk_ioctl+0x3c>
    da56:	19 c2       	rjmp	.+1074   	; 0xde8a <mmc_disk_ioctl+0x46e>
    da58:	80 91 13 18 	lds	r24, 0x1813	; 0x801813 <CardType>
    da5c:	fb 01       	movw	r30, r22
    da5e:	80 83       	st	Z, r24
    da60:	28 c1       	rjmp	.+592    	; 0xdcb2 <mmc_disk_ioctl+0x296>
    da62:	86 33       	cpi	r24, 0x36	; 54
    da64:	09 f4       	brne	.+2      	; 0xda68 <mmc_disk_ioctl+0x4c>
    da66:	0c c1       	rjmp	.+536    	; 0xdc80 <mmc_disk_ioctl+0x264>
    da68:	38 f4       	brcc	.+14     	; 0xda78 <mmc_disk_ioctl+0x5c>
    da6a:	84 33       	cpi	r24, 0x34	; 52
    da6c:	09 f4       	brne	.+2      	; 0xda70 <mmc_disk_ioctl+0x54>
    da6e:	ea c0       	rjmp	.+468    	; 0xdc44 <mmc_disk_ioctl+0x228>
    da70:	85 33       	cpi	r24, 0x35	; 53
    da72:	09 f4       	brne	.+2      	; 0xda76 <mmc_disk_ioctl+0x5a>
    da74:	f1 c0       	rjmp	.+482    	; 0xdc58 <mmc_disk_ioctl+0x23c>
    da76:	09 c2       	rjmp	.+1042   	; 0xde8a <mmc_disk_ioctl+0x46e>
    da78:	88 33       	cpi	r24, 0x38	; 56
    da7a:	09 f4       	brne	.+2      	; 0xda7e <mmc_disk_ioctl+0x62>
    da7c:	74 c1       	rjmp	.+744    	; 0xdd66 <mmc_disk_ioctl+0x34a>
    da7e:	08 f4       	brcc	.+2      	; 0xda82 <mmc_disk_ioctl+0x66>
    da80:	1a c1       	rjmp	.+564    	; 0xdcb6 <mmc_disk_ioctl+0x29a>
    da82:	89 33       	cpi	r24, 0x39	; 57
    da84:	09 f4       	brne	.+2      	; 0xda88 <mmc_disk_ioctl+0x6c>
    da86:	bc c1       	rjmp	.+888    	; 0xde00 <mmc_disk_ioctl+0x3e4>
    da88:	00 c2       	rjmp	.+1024   	; 0xde8a <mmc_disk_ioctl+0x46e>
    da8a:	f3 dd       	rcall	.-1050   	; 0xd672 <select>
    da8c:	06 c1       	rjmp	.+524    	; 0xdc9a <mmc_disk_ioctl+0x27e>
    da8e:	40 e0       	ldi	r20, 0x00	; 0
    da90:	50 e0       	ldi	r21, 0x00	; 0
    da92:	ba 01       	movw	r22, r20
    da94:	89 e0       	ldi	r24, 0x09	; 9
    da96:	0a de       	rcall	.-1004   	; 0xd6ac <send_cmd>
    da98:	81 11       	cpse	r24, r1
    da9a:	f1 c1       	rjmp	.+994    	; 0xde7e <mmc_disk_ioctl+0x462>
    da9c:	60 e1       	ldi	r22, 0x10	; 16
    da9e:	70 e0       	ldi	r23, 0x00	; 0
    daa0:	ce 01       	movw	r24, r28
    daa2:	01 96       	adiw	r24, 0x01	; 1
    daa4:	ad dd       	rcall	.-1190   	; 0xd600 <rcvr_datablock>
    daa6:	89 2b       	or	r24, r25
    daa8:	09 f4       	brne	.+2      	; 0xdaac <mmc_disk_ioctl+0x90>
    daaa:	e9 c1       	rjmp	.+978    	; 0xde7e <mmc_disk_ioctl+0x462>
    daac:	99 81       	ldd	r25, Y+1	; 0x01
    daae:	92 95       	swap	r25
    dab0:	96 95       	lsr	r25
    dab2:	96 95       	lsr	r25
    dab4:	93 70       	andi	r25, 0x03	; 3
    dab6:	29 85       	ldd	r18, Y+9	; 0x09
    dab8:	4a 85       	ldd	r20, Y+10	; 0x0a
    daba:	88 85       	ldd	r24, Y+8	; 0x08
    dabc:	91 30       	cpi	r25, 0x01	; 1
    dabe:	d9 f4       	brne	.+54     	; 0xdaf6 <mmc_disk_ioctl+0xda>
    dac0:	30 e0       	ldi	r19, 0x00	; 0
    dac2:	32 2f       	mov	r19, r18
    dac4:	22 27       	eor	r18, r18
    dac6:	24 0f       	add	r18, r20
    dac8:	31 1d       	adc	r19, r1
    daca:	8f 73       	andi	r24, 0x3F	; 63
    dacc:	90 e0       	ldi	r25, 0x00	; 0
    dace:	a0 e0       	ldi	r26, 0x00	; 0
    dad0:	b0 e0       	ldi	r27, 0x00	; 0
    dad2:	dc 01       	movw	r26, r24
    dad4:	99 27       	eor	r25, r25
    dad6:	88 27       	eor	r24, r24
    dad8:	01 96       	adiw	r24, 0x01	; 1
    dada:	a1 1d       	adc	r26, r1
    dadc:	b1 1d       	adc	r27, r1
    dade:	82 0f       	add	r24, r18
    dae0:	93 1f       	adc	r25, r19
    dae2:	a1 1d       	adc	r26, r1
    dae4:	b1 1d       	adc	r27, r1
    dae6:	fa e0       	ldi	r31, 0x0A	; 10
    dae8:	88 0f       	add	r24, r24
    daea:	99 1f       	adc	r25, r25
    daec:	aa 1f       	adc	r26, r26
    daee:	bb 1f       	adc	r27, r27
    daf0:	fa 95       	dec	r31
    daf2:	d1 f7       	brne	.-12     	; 0xdae8 <mmc_disk_ioctl+0xcc>
    daf4:	9b c0       	rjmp	.+310    	; 0xdc2c <mmc_disk_ioctl+0x210>
    daf6:	22 95       	swap	r18
    daf8:	26 95       	lsr	r18
    dafa:	26 95       	lsr	r18
    dafc:	23 70       	andi	r18, 0x03	; 3
    dafe:	f4 e0       	ldi	r31, 0x04	; 4
    db00:	8f 9f       	mul	r24, r31
    db02:	c0 01       	movw	r24, r0
    db04:	11 24       	eor	r1, r1
    db06:	82 0f       	add	r24, r18
    db08:	91 1d       	adc	r25, r1
    db0a:	01 96       	adiw	r24, 0x01	; 1
    db0c:	2f 81       	ldd	r18, Y+7	; 0x07
    db0e:	23 70       	andi	r18, 0x03	; 3
    db10:	30 e0       	ldi	r19, 0x00	; 0
    db12:	32 2f       	mov	r19, r18
    db14:	22 27       	eor	r18, r18
    db16:	33 0f       	add	r19, r19
    db18:	33 0f       	add	r19, r19
    db1a:	82 0f       	add	r24, r18
    db1c:	93 1f       	adc	r25, r19
    db1e:	a0 e0       	ldi	r26, 0x00	; 0
    db20:	b0 e0       	ldi	r27, 0x00	; 0
    db22:	2e 81       	ldd	r18, Y+6	; 0x06
    db24:	32 2f       	mov	r19, r18
    db26:	3f 70       	andi	r19, 0x0F	; 15
    db28:	2b 85       	ldd	r18, Y+11	; 0x0b
    db2a:	22 1f       	adc	r18, r18
    db2c:	22 27       	eor	r18, r18
    db2e:	22 1f       	adc	r18, r18
    db30:	23 0f       	add	r18, r19
    db32:	43 70       	andi	r20, 0x03	; 3
    db34:	44 0f       	add	r20, r20
    db36:	42 0f       	add	r20, r18
    db38:	47 50       	subi	r20, 0x07	; 7
    db3a:	04 c0       	rjmp	.+8      	; 0xdb44 <mmc_disk_ioctl+0x128>
    db3c:	88 0f       	add	r24, r24
    db3e:	99 1f       	adc	r25, r25
    db40:	aa 1f       	adc	r26, r26
    db42:	bb 1f       	adc	r27, r27
    db44:	4a 95       	dec	r20
    db46:	d2 f7       	brpl	.-12     	; 0xdb3c <mmc_disk_ioctl+0x120>
    db48:	71 c0       	rjmp	.+226    	; 0xdc2c <mmc_disk_ioctl+0x210>
    db4a:	80 91 13 18 	lds	r24, 0x1813	; 0x801813 <CardType>
    db4e:	40 e0       	ldi	r20, 0x00	; 0
    db50:	50 e0       	ldi	r21, 0x00	; 0
    db52:	ba 01       	movw	r22, r20
    db54:	82 ff       	sbrs	r24, 2
    db56:	24 c0       	rjmp	.+72     	; 0xdba0 <mmc_disk_ioctl+0x184>
    db58:	8d e8       	ldi	r24, 0x8D	; 141
    db5a:	a8 dd       	rcall	.-1200   	; 0xd6ac <send_cmd>
    db5c:	81 11       	cpse	r24, r1
    db5e:	8f c1       	rjmp	.+798    	; 0xde7e <mmc_disk_ioctl+0x462>
    db60:	8f ef       	ldi	r24, 0xFF	; 255
    db62:	46 dd       	rcall	.-1396   	; 0xd5f0 <xchg_spi>
    db64:	60 e1       	ldi	r22, 0x10	; 16
    db66:	70 e0       	ldi	r23, 0x00	; 0
    db68:	ce 01       	movw	r24, r28
    db6a:	01 96       	adiw	r24, 0x01	; 1
    db6c:	49 dd       	rcall	.-1390   	; 0xd600 <rcvr_datablock>
    db6e:	89 2b       	or	r24, r25
    db70:	09 f4       	brne	.+2      	; 0xdb74 <mmc_disk_ioctl+0x158>
    db72:	85 c1       	rjmp	.+778    	; 0xde7e <mmc_disk_ioctl+0x462>
    db74:	50 e3       	ldi	r21, 0x30	; 48
    db76:	f5 2e       	mov	r15, r21
    db78:	8f ef       	ldi	r24, 0xFF	; 255
    db7a:	3a dd       	rcall	.-1420   	; 0xd5f0 <xchg_spi>
    db7c:	fa 94       	dec	r15
    db7e:	f1 10       	cpse	r15, r1
    db80:	fb cf       	rjmp	.-10     	; 0xdb78 <mmc_disk_ioctl+0x15c>
    db82:	2b 85       	ldd	r18, Y+11	; 0x0b
    db84:	22 95       	swap	r18
    db86:	2f 70       	andi	r18, 0x0F	; 15
    db88:	80 e1       	ldi	r24, 0x10	; 16
    db8a:	90 e0       	ldi	r25, 0x00	; 0
    db8c:	a0 e0       	ldi	r26, 0x00	; 0
    db8e:	b0 e0       	ldi	r27, 0x00	; 0
    db90:	04 c0       	rjmp	.+8      	; 0xdb9a <mmc_disk_ioctl+0x17e>
    db92:	88 0f       	add	r24, r24
    db94:	99 1f       	adc	r25, r25
    db96:	aa 1f       	adc	r26, r26
    db98:	bb 1f       	adc	r27, r27
    db9a:	2a 95       	dec	r18
    db9c:	d2 f7       	brpl	.-12     	; 0xdb92 <mmc_disk_ioctl+0x176>
    db9e:	46 c0       	rjmp	.+140    	; 0xdc2c <mmc_disk_ioctl+0x210>
    dba0:	89 e0       	ldi	r24, 0x09	; 9
    dba2:	84 dd       	rcall	.-1272   	; 0xd6ac <send_cmd>
    dba4:	81 11       	cpse	r24, r1
    dba6:	6b c1       	rjmp	.+726    	; 0xde7e <mmc_disk_ioctl+0x462>
    dba8:	60 e1       	ldi	r22, 0x10	; 16
    dbaa:	70 e0       	ldi	r23, 0x00	; 0
    dbac:	ce 01       	movw	r24, r28
    dbae:	01 96       	adiw	r24, 0x01	; 1
    dbb0:	27 dd       	rcall	.-1458   	; 0xd600 <rcvr_datablock>
    dbb2:	89 2b       	or	r24, r25
    dbb4:	09 f4       	brne	.+2      	; 0xdbb8 <mmc_disk_ioctl+0x19c>
    dbb6:	63 c1       	rjmp	.+710    	; 0xde7e <mmc_disk_ioctl+0x462>
    dbb8:	90 91 13 18 	lds	r25, 0x1813	; 0x801813 <CardType>
    dbbc:	2b 85       	ldd	r18, Y+11	; 0x0b
    dbbe:	8c 85       	ldd	r24, Y+12	; 0x0c
    dbc0:	91 ff       	sbrs	r25, 1
    dbc2:	16 c0       	rjmp	.+44     	; 0xdbf0 <mmc_disk_ioctl+0x1d4>
    dbc4:	2f 73       	andi	r18, 0x3F	; 63
    dbc6:	88 1f       	adc	r24, r24
    dbc8:	88 27       	eor	r24, r24
    dbca:	88 1f       	adc	r24, r24
    dbcc:	90 e0       	ldi	r25, 0x00	; 0
    dbce:	01 96       	adiw	r24, 0x01	; 1
    dbd0:	82 0f       	add	r24, r18
    dbd2:	91 1d       	adc	r25, r1
    dbd4:	82 0f       	add	r24, r18
    dbd6:	91 1d       	adc	r25, r1
    dbd8:	2e 85       	ldd	r18, Y+14	; 0x0e
    dbda:	22 95       	swap	r18
    dbdc:	26 95       	lsr	r18
    dbde:	26 95       	lsr	r18
    dbe0:	23 70       	andi	r18, 0x03	; 3
    dbe2:	21 50       	subi	r18, 0x01	; 1
    dbe4:	02 c0       	rjmp	.+4      	; 0xdbea <mmc_disk_ioctl+0x1ce>
    dbe6:	88 0f       	add	r24, r24
    dbe8:	99 1f       	adc	r25, r25
    dbea:	2a 95       	dec	r18
    dbec:	e2 f7       	brpl	.-8      	; 0xdbe6 <mmc_disk_ioctl+0x1ca>
    dbee:	1c c0       	rjmp	.+56     	; 0xdc28 <mmc_disk_ioctl+0x20c>
    dbf0:	38 2f       	mov	r19, r24
    dbf2:	33 70       	andi	r19, 0x03	; 3
    dbf4:	82 95       	swap	r24
    dbf6:	86 95       	lsr	r24
    dbf8:	87 70       	andi	r24, 0x07	; 7
    dbfa:	90 e0       	ldi	r25, 0x00	; 0
    dbfc:	f8 e0       	ldi	r31, 0x08	; 8
    dbfe:	3f 9f       	mul	r19, r31
    dc00:	80 0d       	add	r24, r0
    dc02:	91 1d       	adc	r25, r1
    dc04:	11 24       	eor	r1, r1
    dc06:	01 96       	adiw	r24, 0x01	; 1
    dc08:	2c 77       	andi	r18, 0x7C	; 124
    dc0a:	30 e0       	ldi	r19, 0x00	; 0
    dc0c:	35 95       	asr	r19
    dc0e:	27 95       	ror	r18
    dc10:	35 95       	asr	r19
    dc12:	27 95       	ror	r18
    dc14:	2f 5f       	subi	r18, 0xFF	; 255
    dc16:	3f 4f       	sbci	r19, 0xFF	; 255
    dc18:	82 9f       	mul	r24, r18
    dc1a:	a0 01       	movw	r20, r0
    dc1c:	83 9f       	mul	r24, r19
    dc1e:	50 0d       	add	r21, r0
    dc20:	92 9f       	mul	r25, r18
    dc22:	50 0d       	add	r21, r0
    dc24:	11 24       	eor	r1, r1
    dc26:	ca 01       	movw	r24, r20
    dc28:	a0 e0       	ldi	r26, 0x00	; 0
    dc2a:	b0 e0       	ldi	r27, 0x00	; 0
    dc2c:	f8 01       	movw	r30, r16
    dc2e:	80 83       	st	Z, r24
    dc30:	91 83       	std	Z+1, r25	; 0x01
    dc32:	a2 83       	std	Z+2, r26	; 0x02
    dc34:	b3 83       	std	Z+3, r27	; 0x03
    dc36:	00 e0       	ldi	r16, 0x00	; 0
    dc38:	23 c1       	rjmp	.+582    	; 0xde80 <mmc_disk_ioctl+0x464>
    dc3a:	40 e0       	ldi	r20, 0x00	; 0
    dc3c:	50 e0       	ldi	r21, 0x00	; 0
    dc3e:	ba 01       	movw	r22, r20
    dc40:	89 e0       	ldi	r24, 0x09	; 9
    dc42:	04 c0       	rjmp	.+8      	; 0xdc4c <mmc_disk_ioctl+0x230>
    dc44:	40 e0       	ldi	r20, 0x00	; 0
    dc46:	50 e0       	ldi	r21, 0x00	; 0
    dc48:	ba 01       	movw	r22, r20
    dc4a:	8a e0       	ldi	r24, 0x0A	; 10
    dc4c:	2f dd       	rcall	.-1442   	; 0xd6ac <send_cmd>
    dc4e:	81 11       	cpse	r24, r1
    dc50:	16 c1       	rjmp	.+556    	; 0xde7e <mmc_disk_ioctl+0x462>
    dc52:	60 e1       	ldi	r22, 0x10	; 16
    dc54:	70 e0       	ldi	r23, 0x00	; 0
    dc56:	1f c0       	rjmp	.+62     	; 0xdc96 <mmc_disk_ioctl+0x27a>
    dc58:	40 e0       	ldi	r20, 0x00	; 0
    dc5a:	50 e0       	ldi	r21, 0x00	; 0
    dc5c:	ba 01       	movw	r22, r20
    dc5e:	8a e3       	ldi	r24, 0x3A	; 58
    dc60:	25 dd       	rcall	.-1462   	; 0xd6ac <send_cmd>
    dc62:	81 11       	cpse	r24, r1
    dc64:	0c c1       	rjmp	.+536    	; 0xde7e <mmc_disk_ioctl+0x462>
    dc66:	78 01       	movw	r14, r16
    dc68:	f4 e0       	ldi	r31, 0x04	; 4
    dc6a:	ef 0e       	add	r14, r31
    dc6c:	f1 1c       	adc	r15, r1
    dc6e:	8f ef       	ldi	r24, 0xFF	; 255
    dc70:	8d d1       	rcall	.+794    	; 0xdf8c <mmc_spi_TXRX>
    dc72:	f8 01       	movw	r30, r16
    dc74:	81 93       	st	Z+, r24
    dc76:	8f 01       	movw	r16, r30
    dc78:	ee 15       	cp	r30, r14
    dc7a:	ff 05       	cpc	r31, r15
    dc7c:	c1 f7       	brne	.-16     	; 0xdc6e <mmc_disk_ioctl+0x252>
    dc7e:	db cf       	rjmp	.-74     	; 0xdc36 <mmc_disk_ioctl+0x21a>
    dc80:	40 e0       	ldi	r20, 0x00	; 0
    dc82:	50 e0       	ldi	r21, 0x00	; 0
    dc84:	ba 01       	movw	r22, r20
    dc86:	8d e8       	ldi	r24, 0x8D	; 141
    dc88:	11 dd       	rcall	.-1502   	; 0xd6ac <send_cmd>
    dc8a:	81 11       	cpse	r24, r1
    dc8c:	f8 c0       	rjmp	.+496    	; 0xde7e <mmc_disk_ioctl+0x462>
    dc8e:	8f ef       	ldi	r24, 0xFF	; 255
    dc90:	af dc       	rcall	.-1698   	; 0xd5f0 <xchg_spi>
    dc92:	60 e4       	ldi	r22, 0x40	; 64
    dc94:	70 e0       	ldi	r23, 0x00	; 0
    dc96:	c8 01       	movw	r24, r16
    dc98:	b3 dc       	rcall	.-1690   	; 0xd600 <rcvr_datablock>
    dc9a:	01 e0       	ldi	r16, 0x01	; 1
    dc9c:	10 e0       	ldi	r17, 0x00	; 0
    dc9e:	89 2b       	or	r24, r25
    dca0:	09 f4       	brne	.+2      	; 0xdca4 <mmc_disk_ioctl+0x288>
    dca2:	ef c0       	rjmp	.+478    	; 0xde82 <mmc_disk_ioctl+0x466>
    dca4:	ea c0       	rjmp	.+468    	; 0xde7a <mmc_disk_ioctl+0x45e>
    dca6:	39 d2       	rcall	.+1138   	; 0xe11a <mmc_power_off>
    dca8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dcac:	81 60       	ori	r24, 0x01	; 1
    dcae:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    dcb2:	00 e0       	ldi	r16, 0x00	; 0
    dcb4:	eb c0       	rjmp	.+470    	; 0xde8c <mmc_disk_ioctl+0x470>
    dcb6:	fb 01       	movw	r30, r22
    dcb8:	43 81       	ldd	r20, Z+3	; 0x03
    dcba:	54 81       	ldd	r21, Z+4	; 0x04
    dcbc:	65 81       	ldd	r22, Z+5	; 0x05
    dcbe:	76 81       	ldd	r23, Z+6	; 0x06
    dcc0:	39 e0       	ldi	r19, 0x09	; 9
    dcc2:	44 0f       	add	r20, r20
    dcc4:	55 1f       	adc	r21, r21
    dcc6:	66 1f       	adc	r22, r22
    dcc8:	77 1f       	adc	r23, r23
    dcca:	3a 95       	dec	r19
    dccc:	d1 f7       	brne	.-12     	; 0xdcc2 <mmc_disk_ioctl+0x2a6>
    dcce:	70 68       	ori	r23, 0x80	; 128
    dcd0:	80 81       	ld	r24, Z
    dcd2:	90 e0       	ldi	r25, 0x00	; 0
    dcd4:	a0 e0       	ldi	r26, 0x00	; 0
    dcd6:	b0 e0       	ldi	r27, 0x00	; 0
    dcd8:	2c e1       	ldi	r18, 0x1C	; 28
    dcda:	88 0f       	add	r24, r24
    dcdc:	99 1f       	adc	r25, r25
    dcde:	aa 1f       	adc	r26, r26
    dce0:	bb 1f       	adc	r27, r27
    dce2:	2a 95       	dec	r18
    dce4:	d1 f7       	brne	.-12     	; 0xdcda <mmc_disk_ioctl+0x2be>
    dce6:	48 2b       	or	r20, r24
    dce8:	59 2b       	or	r21, r25
    dcea:	6a 2b       	or	r22, r26
    dcec:	7b 2b       	or	r23, r27
    dcee:	81 81       	ldd	r24, Z+1	; 0x01
    dcf0:	92 81       	ldd	r25, Z+2	; 0x02
    dcf2:	01 97       	sbiw	r24, 0x01	; 1
    dcf4:	91 70       	andi	r25, 0x01	; 1
    dcf6:	a0 e0       	ldi	r26, 0x00	; 0
    dcf8:	b0 e0       	ldi	r27, 0x00	; 0
    dcfa:	48 2b       	or	r20, r24
    dcfc:	59 2b       	or	r21, r25
    dcfe:	6a 2b       	or	r22, r26
    dd00:	7b 2b       	or	r23, r27
    dd02:	80 e3       	ldi	r24, 0x30	; 48
    dd04:	d3 dc       	rcall	.-1626   	; 0xd6ac <send_cmd>
    dd06:	81 11       	cpse	r24, r1
    dd08:	ba c0       	rjmp	.+372    	; 0xde7e <mmc_disk_ioctl+0x462>
    dd0a:	88 ee       	ldi	r24, 0xE8	; 232
    dd0c:	93 e0       	ldi	r25, 0x03	; 3
    dd0e:	41 d1       	rcall	.+642    	; 0xdf92 <mmc_set_ms_timeout>
    dd10:	8f ef       	ldi	r24, 0xFF	; 255
    dd12:	3c d1       	rcall	.+632    	; 0xdf8c <mmc_spi_TXRX>
    dd14:	8f 3f       	cpi	r24, 0xFF	; 255
    dd16:	21 f4       	brne	.+8      	; 0xdd20 <mmc_disk_ioctl+0x304>
    dd18:	43 d1       	rcall	.+646    	; 0xdfa0 <mmc_test_timeout>
    dd1a:	89 2b       	or	r24, r25
    dd1c:	c9 f3       	breq	.-14     	; 0xdd10 <mmc_disk_ioctl+0x2f4>
    dd1e:	af c0       	rjmp	.+350    	; 0xde7e <mmc_disk_ioctl+0x462>
    dd20:	8e 3f       	cpi	r24, 0xFE	; 254
    dd22:	09 f0       	breq	.+2      	; 0xdd26 <mmc_disk_ioctl+0x30a>
    dd24:	ac c0       	rjmp	.+344    	; 0xde7e <mmc_disk_ioctl+0x462>
    dd26:	f8 01       	movw	r30, r16
    dd28:	e7 80       	ldd	r14, Z+7	; 0x07
    dd2a:	f0 84       	ldd	r15, Z+8	; 0x08
    dd2c:	c1 80       	ldd	r12, Z+1	; 0x01
    dd2e:	d2 80       	ldd	r13, Z+2	; 0x02
    dd30:	ce 0c       	add	r12, r14
    dd32:	df 1c       	adc	r13, r15
    dd34:	ce 14       	cp	r12, r14
    dd36:	df 04       	cpc	r13, r15
    dd38:	31 f0       	breq	.+12     	; 0xdd46 <mmc_disk_ioctl+0x32a>
    dd3a:	8f ef       	ldi	r24, 0xFF	; 255
    dd3c:	27 d1       	rcall	.+590    	; 0xdf8c <mmc_spi_TXRX>
    dd3e:	f7 01       	movw	r30, r14
    dd40:	81 93       	st	Z+, r24
    dd42:	7f 01       	movw	r14, r30
    dd44:	f7 cf       	rjmp	.-18     	; 0xdd34 <mmc_disk_ioctl+0x318>
    dd46:	f8 01       	movw	r30, r16
    dd48:	81 81       	ldd	r24, Z+1	; 0x01
    dd4a:	92 81       	ldd	r25, Z+2	; 0x02
    dd4c:	02 e0       	ldi	r16, 0x02	; 2
    dd4e:	12 e0       	ldi	r17, 0x02	; 2
    dd50:	08 1b       	sub	r16, r24
    dd52:	19 0b       	sbc	r17, r25
    dd54:	01 15       	cp	r16, r1
    dd56:	11 05       	cpc	r17, r1
    dd58:	09 f4       	brne	.+2      	; 0xdd5c <mmc_disk_ioctl+0x340>
    dd5a:	6d cf       	rjmp	.-294    	; 0xdc36 <mmc_disk_ioctl+0x21a>
    dd5c:	8f ef       	ldi	r24, 0xFF	; 255
    dd5e:	48 dc       	rcall	.-1904   	; 0xd5f0 <xchg_spi>
    dd60:	01 50       	subi	r16, 0x01	; 1
    dd62:	11 09       	sbc	r17, r1
    dd64:	f7 cf       	rjmp	.-18     	; 0xdd54 <mmc_disk_ioctl+0x338>
    dd66:	fb 01       	movw	r30, r22
    dd68:	43 81       	ldd	r20, Z+3	; 0x03
    dd6a:	54 81       	ldd	r21, Z+4	; 0x04
    dd6c:	65 81       	ldd	r22, Z+5	; 0x05
    dd6e:	76 81       	ldd	r23, Z+6	; 0x06
    dd70:	39 e0       	ldi	r19, 0x09	; 9
    dd72:	44 0f       	add	r20, r20
    dd74:	55 1f       	adc	r21, r21
    dd76:	66 1f       	adc	r22, r22
    dd78:	77 1f       	adc	r23, r23
    dd7a:	3a 95       	dec	r19
    dd7c:	d1 f7       	brne	.-12     	; 0xdd72 <mmc_disk_ioctl+0x356>
    dd7e:	70 68       	ori	r23, 0x80	; 128
    dd80:	80 81       	ld	r24, Z
    dd82:	90 e0       	ldi	r25, 0x00	; 0
    dd84:	a0 e0       	ldi	r26, 0x00	; 0
    dd86:	b0 e0       	ldi	r27, 0x00	; 0
    dd88:	2c e1       	ldi	r18, 0x1C	; 28
    dd8a:	88 0f       	add	r24, r24
    dd8c:	99 1f       	adc	r25, r25
    dd8e:	aa 1f       	adc	r26, r26
    dd90:	bb 1f       	adc	r27, r27
    dd92:	2a 95       	dec	r18
    dd94:	d1 f7       	brne	.-12     	; 0xdd8a <mmc_disk_ioctl+0x36e>
    dd96:	48 2b       	or	r20, r24
    dd98:	59 2b       	or	r21, r25
    dd9a:	6a 2b       	or	r22, r26
    dd9c:	7b 2b       	or	r23, r27
    dd9e:	81 81       	ldd	r24, Z+1	; 0x01
    dda0:	92 81       	ldd	r25, Z+2	; 0x02
    dda2:	01 97       	sbiw	r24, 0x01	; 1
    dda4:	91 70       	andi	r25, 0x01	; 1
    dda6:	a0 e0       	ldi	r26, 0x00	; 0
    dda8:	b0 e0       	ldi	r27, 0x00	; 0
    ddaa:	48 2b       	or	r20, r24
    ddac:	59 2b       	or	r21, r25
    ddae:	6a 2b       	or	r22, r26
    ddb0:	7b 2b       	or	r23, r27
    ddb2:	81 e3       	ldi	r24, 0x31	; 49
    ddb4:	7b dc       	rcall	.-1802   	; 0xd6ac <send_cmd>
    ddb6:	81 11       	cpse	r24, r1
    ddb8:	62 c0       	rjmp	.+196    	; 0xde7e <mmc_disk_ioctl+0x462>
    ddba:	8f ef       	ldi	r24, 0xFF	; 255
    ddbc:	19 dc       	rcall	.-1998   	; 0xd5f0 <xchg_spi>
    ddbe:	8e ef       	ldi	r24, 0xFE	; 254
    ddc0:	17 dc       	rcall	.-2002   	; 0xd5f0 <xchg_spi>
    ddc2:	f8 01       	movw	r30, r16
    ddc4:	e7 80       	ldd	r14, Z+7	; 0x07
    ddc6:	f0 84       	ldd	r15, Z+8	; 0x08
    ddc8:	c1 80       	ldd	r12, Z+1	; 0x01
    ddca:	d2 80       	ldd	r13, Z+2	; 0x02
    ddcc:	ce 0c       	add	r12, r14
    ddce:	df 1c       	adc	r13, r15
    ddd0:	ec 14       	cp	r14, r12
    ddd2:	fd 04       	cpc	r15, r13
    ddd4:	29 f0       	breq	.+10     	; 0xdde0 <mmc_disk_ioctl+0x3c4>
    ddd6:	f7 01       	movw	r30, r14
    ddd8:	81 91       	ld	r24, Z+
    ddda:	7f 01       	movw	r14, r30
    dddc:	09 dc       	rcall	.-2030   	; 0xd5f0 <xchg_spi>
    ddde:	f8 cf       	rjmp	.-16     	; 0xddd0 <mmc_disk_ioctl+0x3b4>
    dde0:	f8 01       	movw	r30, r16
    dde2:	81 81       	ldd	r24, Z+1	; 0x01
    dde4:	92 81       	ldd	r25, Z+2	; 0x02
    dde6:	02 e0       	ldi	r16, 0x02	; 2
    dde8:	12 e0       	ldi	r17, 0x02	; 2
    ddea:	08 1b       	sub	r16, r24
    ddec:	19 0b       	sbc	r17, r25
    ddee:	8f ef       	ldi	r24, 0xFF	; 255
    ddf0:	01 15       	cp	r16, r1
    ddf2:	11 05       	cpc	r17, r1
    ddf4:	09 f4       	brne	.+2      	; 0xddf8 <mmc_disk_ioctl+0x3dc>
    ddf6:	3b c0       	rjmp	.+118    	; 0xde6e <mmc_disk_ioctl+0x452>
    ddf8:	fb db       	rcall	.-2058   	; 0xd5f0 <xchg_spi>
    ddfa:	01 50       	subi	r16, 0x01	; 1
    ddfc:	11 09       	sbc	r17, r1
    ddfe:	f7 cf       	rjmp	.-18     	; 0xddee <mmc_disk_ioctl+0x3d2>
    de00:	fb 01       	movw	r30, r22
    de02:	43 81       	ldd	r20, Z+3	; 0x03
    de04:	54 81       	ldd	r21, Z+4	; 0x04
    de06:	65 81       	ldd	r22, Z+5	; 0x05
    de08:	76 81       	ldd	r23, Z+6	; 0x06
    de0a:	89 e0       	ldi	r24, 0x09	; 9
    de0c:	44 0f       	add	r20, r20
    de0e:	55 1f       	adc	r21, r21
    de10:	66 1f       	adc	r22, r22
    de12:	77 1f       	adc	r23, r23
    de14:	8a 95       	dec	r24
    de16:	d1 f7       	brne	.-12     	; 0xde0c <mmc_disk_ioctl+0x3f0>
    de18:	74 68       	ori	r23, 0x84	; 132
    de1a:	80 81       	ld	r24, Z
    de1c:	90 e0       	ldi	r25, 0x00	; 0
    de1e:	a0 e0       	ldi	r26, 0x00	; 0
    de20:	b0 e0       	ldi	r27, 0x00	; 0
    de22:	2c e1       	ldi	r18, 0x1C	; 28
    de24:	88 0f       	add	r24, r24
    de26:	99 1f       	adc	r25, r25
    de28:	aa 1f       	adc	r26, r26
    de2a:	bb 1f       	adc	r27, r27
    de2c:	2a 95       	dec	r18
    de2e:	d1 f7       	brne	.-12     	; 0xde24 <mmc_disk_ioctl+0x408>
    de30:	48 2b       	or	r20, r24
    de32:	59 2b       	or	r21, r25
    de34:	6a 2b       	or	r22, r26
    de36:	7b 2b       	or	r23, r27
    de38:	82 81       	ldd	r24, Z+2	; 0x02
    de3a:	90 e0       	ldi	r25, 0x00	; 0
    de3c:	a0 e0       	ldi	r26, 0x00	; 0
    de3e:	b0 e0       	ldi	r27, 0x00	; 0
    de40:	48 2b       	or	r20, r24
    de42:	59 2b       	or	r21, r25
    de44:	6a 2b       	or	r22, r26
    de46:	7b 2b       	or	r23, r27
    de48:	81 e3       	ldi	r24, 0x31	; 49
    de4a:	30 dc       	rcall	.-1952   	; 0xd6ac <send_cmd>
    de4c:	81 11       	cpse	r24, r1
    de4e:	17 c0       	rjmp	.+46     	; 0xde7e <mmc_disk_ioctl+0x462>
    de50:	8f ef       	ldi	r24, 0xFF	; 255
    de52:	ce db       	rcall	.-2148   	; 0xd5f0 <xchg_spi>
    de54:	8e ef       	ldi	r24, 0xFE	; 254
    de56:	cc db       	rcall	.-2152   	; 0xd5f0 <xchg_spi>
    de58:	f8 01       	movw	r30, r16
    de5a:	81 81       	ldd	r24, Z+1	; 0x01
    de5c:	c9 db       	rcall	.-2158   	; 0xd5f0 <xchg_spi>
    de5e:	01 e0       	ldi	r16, 0x01	; 1
    de60:	12 e0       	ldi	r17, 0x02	; 2
    de62:	8f ef       	ldi	r24, 0xFF	; 255
    de64:	c5 db       	rcall	.-2166   	; 0xd5f0 <xchg_spi>
    de66:	01 50       	subi	r16, 0x01	; 1
    de68:	11 09       	sbc	r17, r1
    de6a:	d9 f7       	brne	.-10     	; 0xde62 <mmc_disk_ioctl+0x446>
    de6c:	8f ef       	ldi	r24, 0xFF	; 255
    de6e:	8e d0       	rcall	.+284    	; 0xdf8c <mmc_spi_TXRX>
    de70:	8f 71       	andi	r24, 0x1F	; 31
    de72:	01 e0       	ldi	r16, 0x01	; 1
    de74:	10 e0       	ldi	r17, 0x00	; 0
    de76:	85 30       	cpi	r24, 0x05	; 5
    de78:	21 f4       	brne	.+8      	; 0xde82 <mmc_disk_ioctl+0x466>
    de7a:	00 e0       	ldi	r16, 0x00	; 0
    de7c:	02 c0       	rjmp	.+4      	; 0xde82 <mmc_disk_ioctl+0x466>
    de7e:	01 e0       	ldi	r16, 0x01	; 1
    de80:	10 e0       	ldi	r17, 0x00	; 0
    de82:	b8 db       	rcall	.-2192   	; 0xd5f4 <deselect>
    de84:	04 c0       	rjmp	.+8      	; 0xde8e <mmc_disk_ioctl+0x472>
    de86:	03 e0       	ldi	r16, 0x03	; 3
    de88:	01 c0       	rjmp	.+2      	; 0xde8c <mmc_disk_ioctl+0x470>
    de8a:	04 e0       	ldi	r16, 0x04	; 4
    de8c:	10 e0       	ldi	r17, 0x00	; 0
    de8e:	c8 01       	movw	r24, r16
    de90:	60 96       	adiw	r28, 0x10	; 16
    de92:	e8 e0       	ldi	r30, 0x08	; 8
    de94:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

0000de98 <mmc_disk_timerproc>:
    de98:	80 91 15 18 	lds	r24, 0x1815	; 0x801815 <Timer1>
    de9c:	88 23       	and	r24, r24
    de9e:	19 f0       	breq	.+6      	; 0xdea6 <mmc_disk_timerproc+0xe>
    dea0:	81 50       	subi	r24, 0x01	; 1
    dea2:	80 93 15 18 	sts	0x1815, r24	; 0x801815 <Timer1>
    dea6:	80 91 14 18 	lds	r24, 0x1814	; 0x801814 <Timer2>
    deaa:	88 23       	and	r24, r24
    deac:	19 f0       	breq	.+6      	; 0xdeb4 <mmc_disk_timerproc+0x1c>
    deae:	81 50       	subi	r24, 0x01	; 1
    deb0:	80 93 14 18 	sts	0x1814, r24	; 0x801814 <Timer2>
    deb4:	08 95       	ret

0000deb6 <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    deb6:	80 91 1c 18 	lds	r24, 0x181C	; 0x80181c <_mmc_timeout>
    deba:	90 91 1d 18 	lds	r25, 0x181D	; 0x80181d <_mmc_timeout+0x1>
    debe:	00 97       	sbiw	r24, 0x00	; 0
    dec0:	29 f0       	breq	.+10     	; 0xdecc <mmc_task+0x16>
    dec2:	01 97       	sbiw	r24, 0x01	; 1
    dec4:	90 93 1d 18 	sts	0x181D, r25	; 0x80181d <_mmc_timeout+0x1>
    dec8:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <_mmc_timeout>
    decc:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <_mmc_pre>
    ded0:	90 91 17 18 	lds	r25, 0x1817	; 0x801817 <_mmc_pre+0x1>
    ded4:	8a 30       	cpi	r24, 0x0A	; 10
    ded6:	91 05       	cpc	r25, r1
    ded8:	30 f4       	brcc	.+12     	; 0xdee6 <mmc_task+0x30>
    deda:	01 96       	adiw	r24, 0x01	; 1
    dedc:	90 93 17 18 	sts	0x1817, r25	; 0x801817 <_mmc_pre+0x1>
    dee0:	80 93 16 18 	sts	0x1816, r24	; 0x801816 <_mmc_pre>
    dee4:	08 95       	ret
    dee6:	10 92 17 18 	sts	0x1817, r1	; 0x801817 <_mmc_pre+0x1>
    deea:	10 92 16 18 	sts	0x1816, r1	; 0x801816 <_mmc_pre>
    deee:	d4 cf       	rjmp	.-88     	; 0xde98 <mmc_disk_timerproc>
    def0:	08 95       	ret

0000def2 <mmc_install_timer>:
    def2:	10 92 1d 18 	sts	0x181D, r1	; 0x80181d <_mmc_timeout+0x1>
    def6:	10 92 1c 18 	sts	0x181C, r1	; 0x80181c <_mmc_timeout>
    defa:	61 e0       	ldi	r22, 0x01	; 1
    defc:	70 e0       	ldi	r23, 0x00	; 0
    defe:	8b e5       	ldi	r24, 0x5B	; 91
    df00:	9f e6       	ldi	r25, 0x6F	; 111
    df02:	0e 94 2a 35 	call	0x6a54	; 0x6a54 <set_timers>
    df06:	01 96       	adiw	r24, 0x01	; 1
    df08:	51 f4       	brne	.+20     	; 0xdf1e <mmc_install_timer+0x2c>
    df0a:	8d e4       	ldi	r24, 0x4D	; 77
    df0c:	98 e0       	ldi	r25, 0x08	; 8
    df0e:	1f 92       	push	r1
    df10:	9f 93       	push	r25
    df12:	8f 93       	push	r24
    df14:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    df18:	0f 90       	pop	r0
    df1a:	0f 90       	pop	r0
    df1c:	0f 90       	pop	r0
    df1e:	08 95       	ret

0000df20 <mmc_spi_begin>:
    df20:	60 91 18 18 	lds	r22, 0x1818	; 0x801818 <_mmc_clock>
    df24:	70 91 19 18 	lds	r23, 0x1819	; 0x801819 <_mmc_clock+0x1>
    df28:	80 91 1a 18 	lds	r24, 0x181A	; 0x80181a <_mmc_clock+0x2>
    df2c:	90 91 1b 18 	lds	r25, 0x181B	; 0x80181b <_mmc_clock+0x3>
    df30:	4b e0       	ldi	r20, 0x0B	; 11
    df32:	50 e0       	ldi	r21, 0x00	; 0
    df34:	0c 94 a2 28 	jmp	0x5144	; 0x5144 <spi_begin>
    df38:	08 95       	ret

0000df3a <mmc_spi_end>:
    df3a:	8b e0       	ldi	r24, 0x0B	; 11
    df3c:	0c 94 4c 28 	jmp	0x5098	; 0x5098 <spi_end>
    df40:	08 95       	ret

0000df42 <mmc_slow>:
    df42:	80 e2       	ldi	r24, 0x20	; 32
    df44:	91 ea       	ldi	r25, 0xA1	; 161
    df46:	a7 e0       	ldi	r26, 0x07	; 7
    df48:	b0 e0       	ldi	r27, 0x00	; 0
    df4a:	80 93 18 18 	sts	0x1818, r24	; 0x801818 <_mmc_clock>
    df4e:	90 93 19 18 	sts	0x1819, r25	; 0x801819 <_mmc_clock+0x1>
    df52:	a0 93 1a 18 	sts	0x181A, r26	; 0x80181a <_mmc_clock+0x2>
    df56:	b0 93 1b 18 	sts	0x181B, r27	; 0x80181b <_mmc_clock+0x3>
    df5a:	08 95       	ret

0000df5c <mmc_spi_init>:
    df5c:	8b e0       	ldi	r24, 0x0B	; 11
    df5e:	0e 94 4a 28 	call	0x5094	; 0x5094 <chip_select_init>
    df62:	ef cf       	rjmp	.-34     	; 0xdf42 <mmc_slow>
    df64:	08 95       	ret

0000df66 <mmc_fast>:
    df66:	80 ea       	ldi	r24, 0xA0	; 160
    df68:	95 e2       	ldi	r25, 0x25	; 37
    df6a:	a6 e2       	ldi	r26, 0x26	; 38
    df6c:	b0 e0       	ldi	r27, 0x00	; 0
    df6e:	80 93 18 18 	sts	0x1818, r24	; 0x801818 <_mmc_clock>
    df72:	90 93 19 18 	sts	0x1819, r25	; 0x801819 <_mmc_clock+0x1>
    df76:	a0 93 1a 18 	sts	0x181A, r26	; 0x80181a <_mmc_clock+0x2>
    df7a:	b0 93 1b 18 	sts	0x181B, r27	; 0x80181b <_mmc_clock+0x3>
    df7e:	08 95       	ret

0000df80 <mmc_spi_TX_buffer>:
    df80:	0c 94 6e 28 	jmp	0x50dc	; 0x50dc <spi_TX_buffer>
    df84:	08 95       	ret

0000df86 <mmc_spi_RX_buffer>:
    df86:	0c 94 70 28 	jmp	0x50e0	; 0x50e0 <spi_RX_buffer>
    df8a:	08 95       	ret

0000df8c <mmc_spi_TXRX>:
    df8c:	0c 94 de 28 	jmp	0x51bc	; 0x51bc <spi_TXRX>
    df90:	08 95       	ret

0000df92 <mmc_set_ms_timeout>:
    df92:	f8 94       	cli
    df94:	90 93 1d 18 	sts	0x181D, r25	; 0x80181d <_mmc_timeout+0x1>
    df98:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <_mmc_timeout>
    df9c:	78 94       	sei
    df9e:	08 95       	ret

0000dfa0 <mmc_test_timeout>:
    dfa0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dfa4:	81 fd       	sbrc	r24, 1
    dfa6:	15 c0       	rjmp	.+42     	; 0xdfd2 <mmc_test_timeout+0x32>
    dfa8:	80 91 1c 18 	lds	r24, 0x181C	; 0x80181c <_mmc_timeout>
    dfac:	90 91 1d 18 	lds	r25, 0x181D	; 0x80181d <_mmc_timeout+0x1>
    dfb0:	89 2b       	or	r24, r25
    dfb2:	91 f4       	brne	.+36     	; 0xdfd8 <mmc_test_timeout+0x38>
    dfb4:	80 e4       	ldi	r24, 0x40	; 64
    dfb6:	98 e0       	ldi	r25, 0x08	; 8
    dfb8:	1f 92       	push	r1
    dfba:	9f 93       	push	r25
    dfbc:	8f 93       	push	r24
    dfbe:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    dfc2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dfc6:	83 60       	ori	r24, 0x03	; 3
    dfc8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    dfcc:	0f 90       	pop	r0
    dfce:	0f 90       	pop	r0
    dfd0:	0f 90       	pop	r0
    dfd2:	81 e0       	ldi	r24, 0x01	; 1
    dfd4:	90 e0       	ldi	r25, 0x00	; 0
    dfd6:	08 95       	ret
    dfd8:	80 e0       	ldi	r24, 0x00	; 0
    dfda:	90 e0       	ldi	r25, 0x00	; 0
    dfdc:	08 95       	ret

0000dfde <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    dfde:	a4 e0       	ldi	r26, 0x04	; 4
    dfe0:	b0 e0       	ldi	r27, 0x00	; 0
    dfe2:	e5 ef       	ldi	r30, 0xF5	; 245
    dfe4:	ff e6       	ldi	r31, 0x6F	; 111
    dfe6:	0c 94 3a e5 	jmp	0x1ca74	; 0x1ca74 <__prologue_saves__+0x18>
    dfea:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    dfec:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Stat>

    mmc_spi_init();

    if( verbose)
    dff0:	b5 df       	rcall	.-150    	; 0xdf5c <mmc_spi_init>
    dff2:	e1 14       	cp	r14, r1
    dff4:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    dff6:	51 f0       	breq	.+20     	; 0xe00c <mmc_init+0x2e>
    dff8:	80 e3       	ldi	r24, 0x30	; 48
    dffa:	98 e0       	ldi	r25, 0x08	; 8
    dffc:	1f 92       	push	r1
    dffe:	9f 93       	push	r25
    e000:	8f 93       	push	r24
    e002:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    e006:	0f 90       	pop	r0
    e008:	0f 90       	pop	r0
    }
    // we only install timers once!
    if(!mmc_init_flag)
    e00a:	0f 90       	pop	r0
    e00c:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <mmc_init_flag>
    e010:	90 91 1f 18 	lds	r25, 0x181F	; 0x80181f <mmc_init_flag+0x1>
        mmc_install_timer();
    e014:	89 2b       	or	r24, r25
    e016:	09 f4       	brne	.+2      	; 0xe01a <mmc_init+0x3c>

    if( verbose)
    e018:	6c df       	rcall	.-296    	; 0xdef2 <mmc_install_timer>
    e01a:	e1 14       	cp	r14, r1
    e01c:	f1 04       	cpc	r15, r1
    {
#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    e01e:	b9 f0       	breq	.+46     	; 0xe04e <mmc_init+0x70>
    e020:	84 e2       	ldi	r24, 0x24	; 36
    e022:	98 e0       	ldi	r25, 0x08	; 8
    e024:	1f 92       	push	r1
    e026:	9f 93       	push	r25
    e028:	8f 93       	push	r24
    e02a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    e02e:	81 e0       	ldi	r24, 0x01	; 1
    e030:	8f 93       	push	r24
    e032:	85 eb       	ldi	r24, 0xB5	; 181
    e034:	8f 93       	push	r24
    e036:	83 e1       	ldi	r24, 0x13	; 19
    e038:	98 e0       	ldi	r25, 0x08	; 8
    e03a:	1f 92       	push	r1
    e03c:	9f 93       	push	r25
    e03e:	8f 93       	push	r24
    e040:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    e044:	0f b6       	in	r0, 0x3f	; 63
    e046:	f8 94       	cli
    e048:	de bf       	out	0x3e, r29	; 62
    }

    rc = disk_initialize(DEV_MMC);    // aliased to mmc_disk_initialize()
    e04a:	0f be       	out	0x3f, r0	; 63
    e04c:	cd bf       	out	0x3d, r28	; 61
    e04e:	80 e0       	ldi	r24, 0x00	; 0
    e050:	9f da       	rcall	.-2754   	; 0xd590 <disk_initialize>
    e052:	08 2f       	mov	r16, r24

    if( rc != RES_OK  )
    e054:	10 e0       	ldi	r17, 0x00	; 0
    e056:	01 15       	cp	r16, r1
        put_rc(rc);
    e058:	11 05       	cpc	r17, r1
    e05a:	19 f0       	breq	.+6      	; 0xe062 <mmc_init+0x84>
    e05c:	c8 01       	movw	r24, r16
    e05e:	e3 d0       	rcall	.+454    	; 0xe226 <put_rc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    e060:	0e c0       	rjmp	.+28     	; 0xe07e <mmc_init+0xa0>
    e062:	40 e0       	ldi	r20, 0x00	; 0
    e064:	68 e3       	ldi	r22, 0x38	; 56
    e066:	78 e0       	ldi	r23, 0x08	; 8
    e068:	88 e7       	ldi	r24, 0x78	; 120
    e06a:	99 e1       	ldi	r25, 0x19	; 25
    e06c:	0e 94 5f 5a 	call	0xb4be	; 0xb4be <f_mount>

    if( rc != RES_OK || verbose)
    e070:	8c 01       	movw	r16, r24
    e072:	89 2b       	or	r24, r25
    e074:	21 f4       	brne	.+8      	; 0xe07e <mmc_init+0xa0>
    e076:	e1 14       	cp	r14, r1
    e078:	f1 04       	cpc	r15, r1
        put_rc( rc );
    e07a:	09 f4       	brne	.+2      	; 0xe07e <mmc_init+0xa0>
    e07c:	43 c0       	rjmp	.+134    	; 0xe104 <mmc_init+0x126>
    e07e:	c8 01       	movw	r24, r16

    if (verbose )
    e080:	d2 d0       	rcall	.+420    	; 0xe226 <put_rc>
    e082:	e1 14       	cp	r14, r1
    e084:	f1 04       	cpc	r15, r1
    e086:	09 f4       	brne	.+2      	; 0xe08a <mmc_init+0xac>
    {
        DWORD blksize = 0;
    e088:	3d c0       	rjmp	.+122    	; 0xe104 <mmc_init+0x126>
    e08a:	19 82       	std	Y+1, r1	; 0x01
    e08c:	1a 82       	std	Y+2, r1	; 0x02
    e08e:	1b 82       	std	Y+3, r1	; 0x03
        if(rc == RES_OK)
    e090:	1c 82       	std	Y+4, r1	; 0x04
    e092:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    e094:	11 05       	cpc	r17, r1
    e096:	61 f5       	brne	.+88     	; 0xe0f0 <mmc_init+0x112>
    e098:	ae 01       	movw	r20, r28
    e09a:	4f 5f       	subi	r20, 0xFF	; 255
    e09c:	5f 4f       	sbci	r21, 0xFF	; 255
    e09e:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    e0a0:	80 e0       	ldi	r24, 0x00	; 0
    e0a2:	9c da       	rcall	.-2760   	; 0xd5dc <disk_ioctl>
            {
                put_rc( rc );
    e0a4:	8c 01       	movw	r16, r24
    e0a6:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    e0a8:	61 f0       	breq	.+24     	; 0xe0c2 <mmc_init+0xe4>
    e0aa:	bd d0       	rcall	.+378    	; 0xe226 <put_rc>
    e0ac:	85 ef       	ldi	r24, 0xF5	; 245
    e0ae:	97 e0       	ldi	r25, 0x07	; 7
    e0b0:	1f 92       	push	r1
    e0b2:	9f 93       	push	r25
    e0b4:	8f 93       	push	r24
    e0b6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    e0ba:	0f 90       	pop	r0
    e0bc:	0f 90       	pop	r0
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e0be:	0f 90       	pop	r0
    e0c0:	17 c0       	rjmp	.+46     	; 0xe0f0 <mmc_init+0x112>
    e0c2:	8c 81       	ldd	r24, Y+4	; 0x04
    e0c4:	8f 93       	push	r24
    e0c6:	8b 81       	ldd	r24, Y+3	; 0x03
    e0c8:	8f 93       	push	r24
    e0ca:	8a 81       	ldd	r24, Y+2	; 0x02
    e0cc:	8f 93       	push	r24
    e0ce:	89 81       	ldd	r24, Y+1	; 0x01
    e0d0:	8f 93       	push	r24
    e0d2:	80 ee       	ldi	r24, 0xE0	; 224
    e0d4:	97 e0       	ldi	r25, 0x07	; 7
    e0d6:	1f 92       	push	r1
    e0d8:	9f 93       	push	r25
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e0da:	8f 93       	push	r24
    e0dc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    e0e0:	88 e3       	ldi	r24, 0x38	; 56
    e0e2:	98 e0       	ldi	r25, 0x08	; 8
    e0e4:	2e d1       	rcall	.+604    	; 0xe342 <fatfs_status>
    e0e6:	0f b6       	in	r0, 0x3f	; 63
    e0e8:	f8 94       	cli
    e0ea:	de bf       	out	0x3e, r29	; 62
            }
        }
        printf("END MMC INIT\n");
    e0ec:	0f be       	out	0x3f, r0	; 63
    e0ee:	cd bf       	out	0x3d, r28	; 61
    e0f0:	82 ed       	ldi	r24, 0xD2	; 210
    e0f2:	97 e0       	ldi	r25, 0x07	; 7
    e0f4:	1f 92       	push	r1
    e0f6:	9f 93       	push	r25
    e0f8:	8f 93       	push	r24
    e0fa:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    e0fe:	0f 90       	pop	r0
    }
    mmc_init_flag = 1;
    e100:	0f 90       	pop	r0
    e102:	0f 90       	pop	r0
    e104:	81 e0       	ldi	r24, 0x01	; 1
    e106:	90 e0       	ldi	r25, 0x00	; 0
    e108:	90 93 1f 18 	sts	0x181F, r25	; 0x80181f <mmc_init_flag+0x1>

    return( rc ) ;
}
    e10c:	80 93 1e 18 	sts	0x181E, r24	; 0x80181e <mmc_init_flag>
    e110:	c8 01       	movw	r24, r16
    e112:	24 96       	adiw	r28, 0x04	; 4
    e114:	e6 e0       	ldi	r30, 0x06	; 6
    e116:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

0000e11a <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    e11a:	08 95       	ret

0000e11c <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    e11c:	81 e0       	ldi	r24, 0x01	; 1
    e11e:	90 e0       	ldi	r25, 0x00	; 0
    e120:	08 95       	ret

0000e122 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e122:	80 e0       	ldi	r24, 0x00	; 0
    e124:	90 e0       	ldi	r25, 0x00	; 0
    e126:	08 95       	ret

0000e128 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e128:	0f 93       	push	r16
    e12a:	1f 93       	push	r17
    e12c:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e12e:	46 81       	ldd	r20, Z+6	; 0x06
    e130:	57 81       	ldd	r21, Z+7	; 0x07
    e132:	05 2e       	mov	r0, r21
    e134:	00 0c       	add	r0, r0
    e136:	66 0b       	sbc	r22, r22
    e138:	77 0b       	sbc	r23, r23
    e13a:	ba 01       	movw	r22, r20
    e13c:	55 27       	eor	r21, r21
    e13e:	44 27       	eor	r20, r20
    e140:	84 81       	ldd	r24, Z+4	; 0x04
    e142:	95 81       	ldd	r25, Z+5	; 0x05
    e144:	09 2e       	mov	r0, r25
    e146:	00 0c       	add	r0, r0
    e148:	aa 0b       	sbc	r26, r26
    e14a:	bb 0b       	sbc	r27, r27
    e14c:	2b e0       	ldi	r18, 0x0B	; 11
    e14e:	88 0f       	add	r24, r24
    e150:	99 1f       	adc	r25, r25
    e152:	aa 1f       	adc	r26, r26
    e154:	bb 1f       	adc	r27, r27
    e156:	2a 95       	dec	r18
    e158:	d1 f7       	brne	.-12     	; 0xe14e <tm_to_fat+0x26>
    e15a:	48 2b       	or	r20, r24
    e15c:	59 2b       	or	r21, r25
    e15e:	6a 2b       	or	r22, r26
    e160:	7b 2b       	or	r23, r27
    e162:	82 81       	ldd	r24, Z+2	; 0x02
    e164:	93 81       	ldd	r25, Z+3	; 0x03
    e166:	09 2e       	mov	r0, r25
    e168:	00 0c       	add	r0, r0
    e16a:	aa 0b       	sbc	r26, r26
    e16c:	bb 0b       	sbc	r27, r27
    e16e:	35 e0       	ldi	r19, 0x05	; 5
    e170:	88 0f       	add	r24, r24
    e172:	99 1f       	adc	r25, r25
    e174:	aa 1f       	adc	r26, r26
    e176:	bb 1f       	adc	r27, r27
    e178:	3a 95       	dec	r19
    e17a:	d1 f7       	brne	.-12     	; 0xe170 <tm_to_fat+0x48>
    e17c:	48 2b       	or	r20, r24
    e17e:	59 2b       	or	r21, r25
    e180:	6a 2b       	or	r22, r26
    e182:	7b 2b       	or	r23, r27
    e184:	80 81       	ld	r24, Z
    e186:	91 81       	ldd	r25, Z+1	; 0x01
    e188:	09 2e       	mov	r0, r25
    e18a:	00 0c       	add	r0, r0
    e18c:	aa 0b       	sbc	r26, r26
    e18e:	bb 0b       	sbc	r27, r27
    e190:	b6 95       	lsr	r27
    e192:	a7 95       	ror	r26
    e194:	97 95       	ror	r25
    e196:	87 95       	ror	r24
    e198:	84 2b       	or	r24, r20
    e19a:	95 2b       	or	r25, r21
    e19c:	a6 2b       	or	r26, r22
    e19e:	b7 2b       	or	r27, r23
    e1a0:	02 85       	ldd	r16, Z+10	; 0x0a
    e1a2:	13 85       	ldd	r17, Z+11	; 0x0b
    e1a4:	00 55       	subi	r16, 0x50	; 80
    e1a6:	11 09       	sbc	r17, r1
    e1a8:	01 2e       	mov	r0, r17
    e1aa:	00 0c       	add	r0, r0
    e1ac:	22 0b       	sbc	r18, r18
    e1ae:	33 0b       	sbc	r19, r19
    e1b0:	49 e1       	ldi	r20, 0x19	; 25
    e1b2:	00 0f       	add	r16, r16
    e1b4:	11 1f       	adc	r17, r17
    e1b6:	22 1f       	adc	r18, r18
    e1b8:	33 1f       	adc	r19, r19
    e1ba:	4a 95       	dec	r20
    e1bc:	d1 f7       	brne	.-12     	; 0xe1b2 <tm_to_fat+0x8a>
    e1be:	ac 01       	movw	r20, r24
    e1c0:	bd 01       	movw	r22, r26
    e1c2:	40 2b       	or	r20, r16
    e1c4:	51 2b       	or	r21, r17
    e1c6:	62 2b       	or	r22, r18
    e1c8:	73 2b       	or	r23, r19
    e1ca:	80 85       	ldd	r24, Z+8	; 0x08
    e1cc:	91 85       	ldd	r25, Z+9	; 0x09
    e1ce:	09 2e       	mov	r0, r25
    e1d0:	00 0c       	add	r0, r0
    e1d2:	aa 0b       	sbc	r26, r26
    e1d4:	bb 0b       	sbc	r27, r27
    e1d6:	01 96       	adiw	r24, 0x01	; 1
    e1d8:	a1 1d       	adc	r26, r1
    e1da:	b1 1d       	adc	r27, r1
    e1dc:	e5 e1       	ldi	r30, 0x15	; 21
    e1de:	88 0f       	add	r24, r24
    e1e0:	99 1f       	adc	r25, r25
    e1e2:	aa 1f       	adc	r26, r26
    e1e4:	bb 1f       	adc	r27, r27
    e1e6:	ea 95       	dec	r30
    e1e8:	d1 f7       	brne	.-12     	; 0xe1de <tm_to_fat+0xb6>
    e1ea:	8a 01       	movw	r16, r20
    e1ec:	9b 01       	movw	r18, r22
    e1ee:	08 2b       	or	r16, r24
    e1f0:	19 2b       	or	r17, r25
    e1f2:	2a 2b       	or	r18, r26
    e1f4:	3b 2b       	or	r19, r27
    e1f6:	c9 01       	movw	r24, r18
    e1f8:	b8 01       	movw	r22, r16
}
    e1fa:	1f 91       	pop	r17
    e1fc:	0f 91       	pop	r16
    e1fe:	08 95       	ret

0000e200 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e200:	a4 e0       	ldi	r26, 0x04	; 4
    e202:	b0 e0       	ldi	r27, 0x00	; 0
    e204:	e6 e0       	ldi	r30, 0x06	; 6
    e206:	f1 e7       	ldi	r31, 0x71	; 113
    e208:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e20c:	ce 01       	movw	r24, r28
    e20e:	01 96       	adiw	r24, 0x01	; 1
    e210:	0e 94 65 38 	call	0x70ca	; 0x70ca <time>
    return( tm_to_fat(localtime(&t)));
    e214:	ce 01       	movw	r24, r28
    e216:	01 96       	adiw	r24, 0x01	; 1
    e218:	0e 94 fe 38 	call	0x71fc	; 0x71fc <localtime>
    e21c:	85 df       	rcall	.-246    	; 0xe128 <tm_to_fat>
}
    e21e:	24 96       	adiw	r28, 0x04	; 4
    e220:	e2 e0       	ldi	r30, 0x02	; 2
    e222:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

0000e226 <put_rc>:
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e226:	9f 93       	push	r25
    e228:	8f 93       	push	r24
    e22a:	8d e5       	ldi	r24, 0x5D	; 93
    e22c:	9a e0       	ldi	r25, 0x0A	; 10
    e22e:	1f 92       	push	r1
    e230:	9f 93       	push	r25
    e232:	8f 93       	push	r24
    e234:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
#endif
}
    e238:	0f 90       	pop	r0
    e23a:	0f 90       	pop	r0
    e23c:	0f 90       	pop	r0
    e23e:	0f 90       	pop	r0
    e240:	0f 90       	pop	r0
    e242:	08 95       	ret

0000e244 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e244:	a4 e4       	ldi	r26, 0x44	; 68
    e246:	b1 e0       	ldi	r27, 0x01	; 1
    e248:	e8 e2       	ldi	r30, 0x28	; 40
    e24a:	f1 e7       	ldi	r31, 0x71	; 113
    e24c:	0c 94 39 e5 	jmp	0x1ca72	; 0x1ca72 <__prologue_saves__+0x16>
    e250:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e252:	bc 01       	movw	r22, r24
    e254:	ce 01       	movw	r24, r28
    e256:	89 5e       	subi	r24, 0xE9	; 233
    e258:	9e 4f       	sbci	r25, 0xFE	; 254
    e25a:	0e 94 3d 64 	call	0xc87a	; 0xc87a <f_opendir>
    if (fr == FR_OK) {
    e25e:	00 97       	sbiw	r24, 0x00	; 0
    e260:	09 f0       	breq	.+2      	; 0xe264 <fatfs_scan_files+0x20>
    e262:	5b c0       	rjmp	.+182    	; 0xe31a <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e264:	8f e2       	ldi	r24, 0x2F	; 47
    e266:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    e268:	be 01       	movw	r22, r28
    e26a:	6f 5f       	subi	r22, 0xFF	; 255
    e26c:	7f 4f       	sbci	r23, 0xFF	; 255
    e26e:	ce 01       	movw	r24, r28
    e270:	89 5e       	subi	r24, 0xE9	; 233
    e272:	9e 4f       	sbci	r25, 0xFE	; 254
    e274:	0e 94 c3 64 	call	0xc986	; 0xc986 <f_readdir>
    e278:	00 97       	sbiw	r24, 0x00	; 0
    e27a:	09 f0       	breq	.+2      	; 0xe27e <fatfs_scan_files+0x3a>
    e27c:	4e c0       	rjmp	.+156    	; 0xe31a <fatfs_scan_files+0xd6>
    e27e:	2f 89       	ldd	r18, Y+23	; 0x17
    e280:	22 23       	and	r18, r18
    e282:	09 f4       	brne	.+2      	; 0xe286 <fatfs_scan_files+0x42>
    e284:	4a c0       	rjmp	.+148    	; 0xe31a <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    e286:	89 85       	ldd	r24, Y+9	; 0x09
    e288:	84 ff       	sbrs	r24, 4
    e28a:	25 c0       	rjmp	.+74     	; 0xe2d6 <fatfs_scan_files+0x92>
                AccDirs++;
    e28c:	80 91 b1 1b 	lds	r24, 0x1BB1	; 0x801bb1 <AccDirs>
    e290:	90 91 b2 1b 	lds	r25, 0x1BB2	; 0x801bb2 <AccDirs+0x1>
    e294:	01 96       	adiw	r24, 0x01	; 1
    e296:	90 93 b2 1b 	sts	0x1BB2, r25	; 0x801bb2 <AccDirs+0x1>
    e29a:	80 93 b1 1b 	sts	0x1BB1, r24	; 0x801bb1 <AccDirs>
                i = strlen(path);
    e29e:	f8 01       	movw	r30, r16
    e2a0:	01 90       	ld	r0, Z+
    e2a2:	00 20       	and	r0, r0
    e2a4:	e9 f7       	brne	.-6      	; 0xe2a0 <fatfs_scan_files+0x5c>
    e2a6:	31 97       	sbiw	r30, 0x01	; 1
    e2a8:	e0 1b       	sub	r30, r16
    e2aa:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e2ac:	78 01       	movw	r14, r16
    e2ae:	ee 0e       	add	r14, r30
    e2b0:	ff 1e       	adc	r15, r31
    e2b2:	d7 01       	movw	r26, r14
    e2b4:	dc 92       	st	X, r13
    e2b6:	cf 01       	movw	r24, r30
    e2b8:	01 96       	adiw	r24, 0x01	; 1
    e2ba:	be 01       	movw	r22, r28
    e2bc:	69 5e       	subi	r22, 0xE9	; 233
    e2be:	7f 4f       	sbci	r23, 0xFF	; 255
    e2c0:	80 0f       	add	r24, r16
    e2c2:	91 1f       	adc	r25, r17
    e2c4:	0e 94 a1 31 	call	0x6342	; 0x6342 <strcpy>
                fr = fatfs_scan_files(path);
    e2c8:	c8 01       	movw	r24, r16
    e2ca:	bc df       	rcall	.-136    	; 0xe244 <fatfs_scan_files>
                path[i] = 0;
    e2cc:	f7 01       	movw	r30, r14
    e2ce:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e2d0:	00 97       	sbiw	r24, 0x00	; 0
    e2d2:	51 f2       	breq	.-108    	; 0xe268 <fatfs_scan_files+0x24>
    e2d4:	22 c0       	rjmp	.+68     	; 0xe31a <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e2d6:	80 91 b3 1b 	lds	r24, 0x1BB3	; 0x801bb3 <AccFiles>
    e2da:	90 91 b4 1b 	lds	r25, 0x1BB4	; 0x801bb4 <AccFiles+0x1>
    e2de:	01 96       	adiw	r24, 0x01	; 1
    e2e0:	90 93 b4 1b 	sts	0x1BB4, r25	; 0x801bb4 <AccFiles+0x1>
    e2e4:	80 93 b3 1b 	sts	0x1BB3, r24	; 0x801bb3 <AccFiles>
                AccSize += info.fsize;
    e2e8:	40 91 ad 1b 	lds	r20, 0x1BAD	; 0x801bad <AccSize>
    e2ec:	50 91 ae 1b 	lds	r21, 0x1BAE	; 0x801bae <AccSize+0x1>
    e2f0:	60 91 af 1b 	lds	r22, 0x1BAF	; 0x801baf <AccSize+0x2>
    e2f4:	70 91 b0 1b 	lds	r23, 0x1BB0	; 0x801bb0 <AccSize+0x3>
    e2f8:	89 81       	ldd	r24, Y+1	; 0x01
    e2fa:	9a 81       	ldd	r25, Y+2	; 0x02
    e2fc:	ab 81       	ldd	r26, Y+3	; 0x03
    e2fe:	bc 81       	ldd	r27, Y+4	; 0x04
    e300:	84 0f       	add	r24, r20
    e302:	95 1f       	adc	r25, r21
    e304:	a6 1f       	adc	r26, r22
    e306:	b7 1f       	adc	r27, r23
    e308:	80 93 ad 1b 	sts	0x1BAD, r24	; 0x801bad <AccSize>
    e30c:	90 93 ae 1b 	sts	0x1BAE, r25	; 0x801bae <AccSize+0x1>
    e310:	a0 93 af 1b 	sts	0x1BAF, r26	; 0x801baf <AccSize+0x2>
    e314:	b0 93 b0 1b 	sts	0x1BB0, r27	; 0x801bb0 <AccSize+0x3>
    e318:	a7 cf       	rjmp	.-178    	; 0xe268 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e31a:	cc 5b       	subi	r28, 0xBC	; 188
    e31c:	de 4f       	sbci	r29, 0xFE	; 254
    e31e:	e7 e0       	ldi	r30, 0x07	; 7
    e320:	0c 94 55 e5 	jmp	0x1caaa	; 0x1caaa <__epilogue_restores__+0x16>

0000e324 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e324:	01 97       	sbiw	r24, 0x01	; 1
    e326:	84 30       	cpi	r24, 0x04	; 4
    e328:	91 05       	cpc	r25, r1
    e32a:	40 f4       	brcc	.+16     	; 0xe33c <fatfs_fstype+0x18>
    e32c:	88 0f       	add	r24, r24
    e32e:	99 1f       	adc	r25, r25
    e330:	fc 01       	movw	r30, r24
    e332:	e8 5f       	subi	r30, 0xF8	; 248
    e334:	f8 4f       	sbci	r31, 0xF8	; 248
    e336:	80 81       	ld	r24, Z
    e338:	91 81       	ldd	r25, Z+1	; 0x01
    e33a:	08 95       	ret
    char *ptr;
    switch(type)
    e33c:	8a e3       	ldi	r24, 0x3A	; 58
    e33e:	98 e0       	ldi	r25, 0x08	; 8
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e340:	08 95       	ret

0000e342 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e342:	a4 e2       	ldi	r26, 0x24	; 36
    e344:	b0 e0       	ldi	r27, 0x00	; 0
    e346:	e7 ea       	ldi	r30, 0xA7	; 167
    e348:	f1 e7       	ldi	r31, 0x71	; 113
    e34a:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    e34e:	8c 01       	movw	r16, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e350:	fc 01       	movw	r30, r24
    e352:	21 91       	ld	r18, Z+
    e354:	cf 01       	movw	r24, r30
    e356:	20 32       	cpi	r18, 0x20	; 32
    e358:	d1 f3       	breq	.-12     	; 0xe34e <fatfs_status+0xc>
    e35a:	29 30       	cpi	r18, 0x09	; 9
    e35c:	c1 f3       	breq	.-16     	; 0xe34e <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e35e:	1f 93       	push	r17
    e360:	0f 93       	push	r16
    e362:	8c e4       	ldi	r24, 0x4C	; 76
    e364:	9a e0       	ldi	r25, 0x0A	; 10
    e366:	1f 92       	push	r1
    e368:	9f 93       	push	r25
    e36a:	8f 93       	push	r24
    e36c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e370:	ae 01       	movw	r20, r28
    e372:	4d 5d       	subi	r20, 0xDD	; 221
    e374:	5f 4f       	sbci	r21, 0xFF	; 255
    e376:	be 01       	movw	r22, r28
    e378:	61 5e       	subi	r22, 0xE1	; 225
    e37a:	7f 4f       	sbci	r23, 0xFF	; 255
    e37c:	c8 01       	movw	r24, r16
    e37e:	0e 94 45 65 	call	0xca8a	; 0xca8a <f_getfree>
    if (res)
    e382:	0f 90       	pop	r0
    e384:	0f 90       	pop	r0
    e386:	0f 90       	pop	r0
    e388:	0f 90       	pop	r0
    e38a:	0f 90       	pop	r0
    e38c:	00 97       	sbiw	r24, 0x00	; 0
    e38e:	09 f0       	breq	.+2      	; 0xe392 <fatfs_status+0x50>
    e390:	e8 c0       	rjmp	.+464    	; 0xe562 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e392:	eb a1       	ldd	r30, Y+35	; 0x23
    e394:	fc a1       	ldd	r31, Y+36	; 0x24
    e396:	80 81       	ld	r24, Z
    e398:	90 e0       	ldi	r25, 0x00	; 0
    e39a:	c4 df       	rcall	.-120    	; 0xe324 <fatfs_fstype>
    e39c:	9f 93       	push	r25
    e39e:	8f 93       	push	r24
    e3a0:	8e e2       	ldi	r24, 0x2E	; 46
    e3a2:	9a e0       	ldi	r25, 0x0A	; 10
    e3a4:	1f 92       	push	r1
    e3a6:	9f 93       	push	r25
    e3a8:	8f 93       	push	r24
    e3aa:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e3ae:	eb a1       	ldd	r30, Y+35	; 0x23
    e3b0:	fc a1       	ldd	r31, Y+36	; 0x24
    e3b2:	81 85       	ldd	r24, Z+9	; 0x09
    e3b4:	92 85       	ldd	r25, Z+10	; 0x0a
    e3b6:	a0 e0       	ldi	r26, 0x00	; 0
    e3b8:	b0 e0       	ldi	r27, 0x00	; 0
    e3ba:	49 e0       	ldi	r20, 0x09	; 9
    e3bc:	88 0f       	add	r24, r24
    e3be:	99 1f       	adc	r25, r25
    e3c0:	aa 1f       	adc	r26, r26
    e3c2:	bb 1f       	adc	r27, r27
    e3c4:	4a 95       	dec	r20
    e3c6:	d1 f7       	brne	.-12     	; 0xe3bc <fatfs_status+0x7a>
    e3c8:	bf 93       	push	r27
    e3ca:	af 93       	push	r26
    e3cc:	9f 93       	push	r25
    e3ce:	8f 93       	push	r24
    e3d0:	8f e0       	ldi	r24, 0x0F	; 15
    e3d2:	9a e0       	ldi	r25, 0x0A	; 10
    e3d4:	1f 92       	push	r1
    e3d6:	9f 93       	push	r25
    e3d8:	8f 93       	push	r24
    e3da:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e3de:	eb a1       	ldd	r30, Y+35	; 0x23
    e3e0:	fc a1       	ldd	r31, Y+36	; 0x24
    e3e2:	82 81       	ldd	r24, Z+2	; 0x02
    e3e4:	1f 92       	push	r1
    e3e6:	8f 93       	push	r24
    e3e8:	81 ef       	ldi	r24, 0xF1	; 241
    e3ea:	99 e0       	ldi	r25, 0x09	; 9
    e3ec:	1f 92       	push	r1
    e3ee:	9f 93       	push	r25
    e3f0:	8f 93       	push	r24
    e3f2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e3f6:	eb a1       	ldd	r30, Y+35	; 0x23
    e3f8:	fc a1       	ldd	r31, Y+36	; 0x24
    e3fa:	80 85       	ldd	r24, Z+8	; 0x08
    e3fc:	8f 93       	push	r24
    e3fe:	87 81       	ldd	r24, Z+7	; 0x07
    e400:	8f 93       	push	r24
    e402:	83 ed       	ldi	r24, 0xD3	; 211
    e404:	99 e0       	ldi	r25, 0x09	; 9
    e406:	1f 92       	push	r1
    e408:	9f 93       	push	r25
    e40a:	8f 93       	push	r24
    e40c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e410:	eb a1       	ldd	r30, Y+35	; 0x23
    e412:	fc a1       	ldd	r31, Y+36	; 0x24
    e414:	80 a1       	ldd	r24, Z+32	; 0x20
    e416:	8f 93       	push	r24
    e418:	87 8d       	ldd	r24, Z+31	; 0x1f
    e41a:	8f 93       	push	r24
    e41c:	86 8d       	ldd	r24, Z+30	; 0x1e
    e41e:	8f 93       	push	r24
    e420:	85 8d       	ldd	r24, Z+29	; 0x1d
    e422:	8f 93       	push	r24
    e424:	84 eb       	ldi	r24, 0xB4	; 180
    e426:	99 e0       	ldi	r25, 0x09	; 9
    e428:	1f 92       	push	r1
    e42a:	9f 93       	push	r25
    e42c:	8f 93       	push	r24
    e42e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e432:	eb a1       	ldd	r30, Y+35	; 0x23
    e434:	fc a1       	ldd	r31, Y+36	; 0x24
    e436:	81 8d       	ldd	r24, Z+25	; 0x19
    e438:	92 8d       	ldd	r25, Z+26	; 0x1a
    e43a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e43c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e43e:	02 97       	sbiw	r24, 0x02	; 2
    e440:	a1 09       	sbc	r26, r1
    e442:	b1 09       	sbc	r27, r1
    e444:	bf 93       	push	r27
    e446:	af 93       	push	r26
    e448:	9f 93       	push	r25
    e44a:	8f 93       	push	r24
    e44c:	85 e9       	ldi	r24, 0x95	; 149
    e44e:	99 e0       	ldi	r25, 0x09	; 9
    e450:	1f 92       	push	r1
    e452:	9f 93       	push	r25
    e454:	8f 93       	push	r24
    e456:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e45a:	0f b6       	in	r0, 0x3f	; 63
    e45c:	f8 94       	cli
    e45e:	de bf       	out	0x3e, r29	; 62
    e460:	0f be       	out	0x3f, r0	; 63
    e462:	cd bf       	out	0x3d, r28	; 61
    e464:	eb a1       	ldd	r30, Y+35	; 0x23
    e466:	fc a1       	ldd	r31, Y+36	; 0x24
    e468:	80 a5       	ldd	r24, Z+40	; 0x28
    e46a:	8f 93       	push	r24
    e46c:	87 a1       	ldd	r24, Z+39	; 0x27
    e46e:	8f 93       	push	r24
    e470:	86 a1       	ldd	r24, Z+38	; 0x26
    e472:	8f 93       	push	r24
    e474:	85 a1       	ldd	r24, Z+37	; 0x25
    e476:	8f 93       	push	r24
    e478:	86 e7       	ldi	r24, 0x76	; 118
    e47a:	99 e0       	ldi	r25, 0x09	; 9
    e47c:	1f 92       	push	r1
    e47e:	9f 93       	push	r25
    e480:	8f 93       	push	r24
    e482:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e486:	eb a1       	ldd	r30, Y+35	; 0x23
    e488:	fc a1       	ldd	r31, Y+36	; 0x24
    e48a:	84 a5       	ldd	r24, Z+44	; 0x2c
    e48c:	8f 93       	push	r24
    e48e:	83 a5       	ldd	r24, Z+43	; 0x2b
    e490:	8f 93       	push	r24
    e492:	82 a5       	ldd	r24, Z+42	; 0x2a
    e494:	8f 93       	push	r24
    e496:	81 a5       	ldd	r24, Z+41	; 0x29
    e498:	8f 93       	push	r24
    e49a:	87 e5       	ldi	r24, 0x57	; 87
    e49c:	99 e0       	ldi	r25, 0x09	; 9
    e49e:	1f 92       	push	r1
    e4a0:	9f 93       	push	r25
    e4a2:	8f 93       	push	r24
    e4a4:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e4a8:	eb a1       	ldd	r30, Y+35	; 0x23
    e4aa:	fc a1       	ldd	r31, Y+36	; 0x24
    e4ac:	80 a9       	ldd	r24, Z+48	; 0x30
    e4ae:	8f 93       	push	r24
    e4b0:	87 a5       	ldd	r24, Z+47	; 0x2f
    e4b2:	8f 93       	push	r24
    e4b4:	86 a5       	ldd	r24, Z+46	; 0x2e
    e4b6:	8f 93       	push	r24
    e4b8:	85 a5       	ldd	r24, Z+45	; 0x2d
    e4ba:	8f 93       	push	r24
    e4bc:	88 e3       	ldi	r24, 0x38	; 56
    e4be:	99 e0       	ldi	r25, 0x09	; 9
    e4c0:	1f 92       	push	r1
    e4c2:	9f 93       	push	r25
    e4c4:	8f 93       	push	r24
    e4c6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e4ca:	ae 01       	movw	r20, r28
    e4cc:	45 5e       	subi	r20, 0xE5	; 229
    e4ce:	5f 4f       	sbci	r21, 0xFF	; 255
    e4d0:	be 01       	movw	r22, r28
    e4d2:	6f 5f       	subi	r22, 0xFF	; 255
    e4d4:	7f 4f       	sbci	r23, 0xFF	; 255
    e4d6:	c8 01       	movw	r24, r16
    e4d8:	0e 94 76 69 	call	0xd2ec	; 0xd2ec <f_getlabel>
    if (res)
    e4dc:	0f b6       	in	r0, 0x3f	; 63
    e4de:	f8 94       	cli
    e4e0:	de bf       	out	0x3e, r29	; 62
    e4e2:	0f be       	out	0x3f, r0	; 63
    e4e4:	cd bf       	out	0x3d, r28	; 61
    e4e6:	00 97       	sbiw	r24, 0x00	; 0
    e4e8:	e1 f5       	brne	.+120    	; 0xe562 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e4ea:	89 81       	ldd	r24, Y+1	; 0x01
    e4ec:	81 11       	cpse	r24, r1
    e4ee:	03 c0       	rjmp	.+6      	; 0xe4f6 <fatfs_status+0x1b4>
    e4f0:	82 e4       	ldi	r24, 0x42	; 66
    e4f2:	98 e0       	ldi	r25, 0x08	; 8
    e4f4:	02 c0       	rjmp	.+4      	; 0xe4fa <fatfs_status+0x1b8>
    e4f6:	ce 01       	movw	r24, r28
    e4f8:	01 96       	adiw	r24, 0x01	; 1
    e4fa:	9f 93       	push	r25
    e4fc:	8f 93       	push	r24
    e4fe:	8a e1       	ldi	r24, 0x1A	; 26
    e500:	99 e0       	ldi	r25, 0x09	; 9
    e502:	1f 92       	push	r1
    e504:	9f 93       	push	r25
    e506:	8f 93       	push	r24
    e508:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e50c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e50e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e510:	ad 8d       	ldd	r26, Y+29	; 0x1d
    e512:	be 8d       	ldd	r27, Y+30	; 0x1e
    e514:	9f 93       	push	r25
    e516:	8f 93       	push	r24
    e518:	cd 01       	movw	r24, r26
    e51a:	aa 27       	eor	r26, r26
    e51c:	bb 27       	eor	r27, r27
    e51e:	9f 93       	push	r25
    e520:	8f 93       	push	r24
    e522:	85 ef       	ldi	r24, 0xF5	; 245
    e524:	98 e0       	ldi	r25, 0x08	; 8
    e526:	1f 92       	push	r1
    e528:	9f 93       	push	r25
    e52a:	8f 93       	push	r24
    e52c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e530:	10 92 b2 1b 	sts	0x1BB2, r1	; 0x801bb2 <AccDirs+0x1>
    e534:	10 92 b1 1b 	sts	0x1BB1, r1	; 0x801bb1 <AccDirs>
    e538:	10 92 b4 1b 	sts	0x1BB4, r1	; 0x801bb4 <AccFiles+0x1>
    e53c:	10 92 b3 1b 	sts	0x1BB3, r1	; 0x801bb3 <AccFiles>
    e540:	10 92 ad 1b 	sts	0x1BAD, r1	; 0x801bad <AccSize>
    e544:	10 92 ae 1b 	sts	0x1BAE, r1	; 0x801bae <AccSize+0x1>
    e548:	10 92 af 1b 	sts	0x1BAF, r1	; 0x801baf <AccSize+0x2>
    e54c:	10 92 b0 1b 	sts	0x1BB0, r1	; 0x801bb0 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e550:	c8 01       	movw	r24, r16
    if (res)
    e552:	78 de       	rcall	.-784    	; 0xe244 <fatfs_scan_files>
    e554:	0f b6       	in	r0, 0x3f	; 63
    e556:	f8 94       	cli
    e558:	de bf       	out	0x3e, r29	; 62
    e55a:	0f be       	out	0x3f, r0	; 63
    e55c:	cd bf       	out	0x3d, r28	; 61
    {
        put_rc(res);
    e55e:	00 97       	sbiw	r24, 0x00	; 0
    e560:	11 f0       	breq	.+4      	; 0xe566 <fatfs_status+0x224>
        return;
    e562:	61 de       	rcall	.-830    	; 0xe226 <put_rc>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e564:	56 c0       	rjmp	.+172    	; 0xe612 <fatfs_status+0x2d0>
    e566:	0b a1       	ldd	r16, Y+35	; 0x23
    e568:	1c a1       	ldd	r17, Y+36	; 0x24
    e56a:	f8 01       	movw	r30, r16
    e56c:	c1 84       	ldd	r12, Z+9	; 0x09
    e56e:	d2 84       	ldd	r13, Z+10	; 0x0a
    e570:	e1 2c       	mov	r14, r1
    e572:	f1 2c       	mov	r15, r1
    e574:	6f 8d       	ldd	r22, Y+31	; 0x1f
    e576:	78 a1       	ldd	r23, Y+32	; 0x20
    e578:	89 a1       	ldd	r24, Y+33	; 0x21
    e57a:	9a a1       	ldd	r25, Y+34	; 0x22
    e57c:	a7 01       	movw	r20, r14
    e57e:	96 01       	movw	r18, r12
    e580:	0e 94 6a e4 	call	0x1c8d4	; 0x1c8d4 <__mulsi3>
    e584:	22 e0       	ldi	r18, 0x02	; 2
    e586:	30 e0       	ldi	r19, 0x00	; 0
    e588:	40 e0       	ldi	r20, 0x00	; 0
    e58a:	50 e0       	ldi	r21, 0x00	; 0
    e58c:	0e 94 ce e4 	call	0x1c99c	; 0x1c99c <__divmodsi4>
    e590:	5f 93       	push	r21
    e592:	4f 93       	push	r20
    e594:	3f 93       	push	r19
    e596:	2f 93       	push	r18
    e598:	f8 01       	movw	r30, r16
    e59a:	81 8d       	ldd	r24, Z+25	; 0x19
    e59c:	92 8d       	ldd	r25, Z+26	; 0x1a
    e59e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e5a0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e5a2:	9c 01       	movw	r18, r24
    e5a4:	ad 01       	movw	r20, r26
    e5a6:	22 50       	subi	r18, 0x02	; 2
    e5a8:	31 09       	sbc	r19, r1
    e5aa:	41 09       	sbc	r20, r1
    e5ac:	51 09       	sbc	r21, r1
    e5ae:	c7 01       	movw	r24, r14
    e5b0:	b6 01       	movw	r22, r12
    e5b2:	0e 94 6a e4 	call	0x1c8d4	; 0x1c8d4 <__mulsi3>
    e5b6:	dc 01       	movw	r26, r24
    e5b8:	cb 01       	movw	r24, r22
    e5ba:	b6 95       	lsr	r27
    e5bc:	a7 95       	ror	r26
    e5be:	97 95       	ror	r25
    e5c0:	87 95       	ror	r24
    e5c2:	bf 93       	push	r27
    e5c4:	af 93       	push	r26
    e5c6:	9f 93       	push	r25
    e5c8:	8f 93       	push	r24
    e5ca:	80 91 b2 1b 	lds	r24, 0x1BB2	; 0x801bb2 <AccDirs+0x1>
    e5ce:	8f 93       	push	r24
    e5d0:	80 91 b1 1b 	lds	r24, 0x1BB1	; 0x801bb1 <AccDirs>
    e5d4:	8f 93       	push	r24
    e5d6:	80 91 b0 1b 	lds	r24, 0x1BB0	; 0x801bb0 <AccSize+0x3>
    e5da:	8f 93       	push	r24
    e5dc:	80 91 af 1b 	lds	r24, 0x1BAF	; 0x801baf <AccSize+0x2>
    e5e0:	8f 93       	push	r24
    e5e2:	80 91 ae 1b 	lds	r24, 0x1BAE	; 0x801bae <AccSize+0x1>
    e5e6:	8f 93       	push	r24
    e5e8:	80 91 ad 1b 	lds	r24, 0x1BAD	; 0x801bad <AccSize>
    e5ec:	8f 93       	push	r24
    e5ee:	80 91 b4 1b 	lds	r24, 0x1BB4	; 0x801bb4 <AccFiles+0x1>
    e5f2:	8f 93       	push	r24
    e5f4:	80 91 b3 1b 	lds	r24, 0x1BB3	; 0x801bb3 <AccFiles>
    e5f8:	8f 93       	push	r24
    e5fa:	88 ea       	ldi	r24, 0xA8	; 168
    e5fc:	98 e0       	ldi	r25, 0x08	; 8
    e5fe:	1f 92       	push	r1
    e600:	9f 93       	push	r25
    e602:	8f 93       	push	r24
    e604:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    e608:	0f b6       	in	r0, 0x3f	; 63
    e60a:	f8 94       	cli
    e60c:	de bf       	out	0x3e, r29	; 62
    e60e:	0f be       	out	0x3f, r0	; 63
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    e610:	cd bf       	out	0x3d, r28	; 61
    e612:	a4 96       	adiw	r28, 0x24	; 36
    e614:	e8 e0       	ldi	r30, 0x08	; 8
    e616:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

0000e61a <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e61a:	a6 e0       	ldi	r26, 0x06	; 6
    e61c:	b0 e0       	ldi	r27, 0x00	; 0
    e61e:	e3 e1       	ldi	r30, 0x13	; 19
    e620:	f3 e7       	ldi	r31, 0x73	; 115
    e622:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    e626:	fc 01       	movw	r30, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e628:	86 89       	ldd	r24, Z+22	; 0x16
    e62a:	81 11       	cpse	r24, r1
    e62c:	0b c0       	rjmp	.+22     	; 0xe644 <fatfs_filinfo_list+0x2a>
    {
        printf("fatfs_filinfo_list: empty\n");
    e62e:	8d e8       	ldi	r24, 0x8D	; 141
    e630:	98 e0       	ldi	r25, 0x08	; 8
    e632:	1f 92       	push	r1
    e634:	9f 93       	push	r25
    e636:	8f 93       	push	r24
    e638:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return;
    e63c:	0f 90       	pop	r0
    e63e:	0f 90       	pop	r0
    e640:	0f 90       	pop	r0
    e642:	6e c0       	rjmp	.+220    	; 0xe720 <fatfs_filinfo_list+0x106>
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e644:	80 85       	ldd	r24, Z+8	; 0x08
    e646:	84 fd       	sbrc	r24, 4
    e648:	02 c0       	rjmp	.+4      	; 0xe64e <fatfs_filinfo_list+0x34>
    e64a:	9d e2       	ldi	r25, 0x2D	; 45
    e64c:	01 c0       	rjmp	.+2      	; 0xe650 <fatfs_filinfo_list+0x36>
    e64e:	94 e4       	ldi	r25, 0x44	; 68
    e650:	99 83       	std	Y+1, r25	; 0x01
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e652:	80 fd       	sbrc	r24, 0
    e654:	02 c0       	rjmp	.+4      	; 0xe65a <fatfs_filinfo_list+0x40>
    e656:	9d e2       	ldi	r25, 0x2D	; 45
    e658:	01 c0       	rjmp	.+2      	; 0xe65c <fatfs_filinfo_list+0x42>
    e65a:	92 e5       	ldi	r25, 0x52	; 82
    e65c:	9a 83       	std	Y+2, r25	; 0x02
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e65e:	81 fd       	sbrc	r24, 1
    e660:	02 c0       	rjmp	.+4      	; 0xe666 <fatfs_filinfo_list+0x4c>
    e662:	9d e2       	ldi	r25, 0x2D	; 45
    e664:	01 c0       	rjmp	.+2      	; 0xe668 <fatfs_filinfo_list+0x4e>
    e666:	98 e4       	ldi	r25, 0x48	; 72
    e668:	9b 83       	std	Y+3, r25	; 0x03
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e66a:	82 fd       	sbrc	r24, 2
    e66c:	02 c0       	rjmp	.+4      	; 0xe672 <fatfs_filinfo_list+0x58>
    e66e:	9d e2       	ldi	r25, 0x2D	; 45
    e670:	01 c0       	rjmp	.+2      	; 0xe674 <fatfs_filinfo_list+0x5a>
    e672:	93 e5       	ldi	r25, 0x53	; 83
    e674:	9c 83       	std	Y+4, r25	; 0x04
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e676:	85 fd       	sbrc	r24, 5
    e678:	02 c0       	rjmp	.+4      	; 0xe67e <fatfs_filinfo_list+0x64>
    e67a:	8d e2       	ldi	r24, 0x2D	; 45
    e67c:	01 c0       	rjmp	.+2      	; 0xe680 <fatfs_filinfo_list+0x66>
    e67e:	81 e4       	ldi	r24, 0x41	; 65
    e680:	8d 83       	std	Y+5, r24	; 0x05
    attrs[5] = 0;
    e682:	1e 82       	std	Y+6, r1	; 0x06
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e684:	46 81       	ldd	r20, Z+6	; 0x06
    e686:	57 81       	ldd	r21, Z+7	; 0x07
    e688:	84 81       	ldd	r24, Z+4	; 0x04
    e68a:	95 81       	ldd	r25, Z+5	; 0x05
    e68c:	9f 01       	movw	r18, r30
    e68e:	2a 5e       	subi	r18, 0xEA	; 234
    e690:	3f 4f       	sbci	r19, 0xFF	; 255
    e692:	3f 93       	push	r19
    e694:	2f 93       	push	r18
    e696:	23 81       	ldd	r18, Z+3	; 0x03
    e698:	2f 93       	push	r18
    e69a:	22 81       	ldd	r18, Z+2	; 0x02
    e69c:	2f 93       	push	r18
    e69e:	21 81       	ldd	r18, Z+1	; 0x01
    e6a0:	2f 93       	push	r18
    e6a2:	20 81       	ld	r18, Z
    e6a4:	2f 93       	push	r18
    e6a6:	9a 01       	movw	r18, r20
    e6a8:	45 e0       	ldi	r20, 0x05	; 5
    e6aa:	36 95       	lsr	r19
    e6ac:	27 95       	ror	r18
    e6ae:	4a 95       	dec	r20
    e6b0:	e1 f7       	brne	.-8      	; 0xe6aa <fatfs_filinfo_list+0x90>
    e6b2:	2f 73       	andi	r18, 0x3F	; 63
    e6b4:	33 27       	eor	r19, r19
    e6b6:	3f 93       	push	r19
    e6b8:	2f 93       	push	r18
    e6ba:	25 2f       	mov	r18, r21
    e6bc:	26 95       	lsr	r18
    e6be:	26 95       	lsr	r18
    e6c0:	26 95       	lsr	r18
    e6c2:	1f 92       	push	r1
    e6c4:	2f 93       	push	r18
    e6c6:	9c 01       	movw	r18, r24
    e6c8:	2f 71       	andi	r18, 0x1F	; 31
    e6ca:	33 27       	eor	r19, r19
    e6cc:	3f 93       	push	r19
    e6ce:	2f 93       	push	r18
    e6d0:	9c 01       	movw	r18, r24
    e6d2:	55 e0       	ldi	r21, 0x05	; 5
    e6d4:	36 95       	lsr	r19
    e6d6:	27 95       	ror	r18
    e6d8:	5a 95       	dec	r21
    e6da:	e1 f7       	brne	.-8      	; 0xe6d4 <fatfs_filinfo_list+0xba>
    e6dc:	2f 70       	andi	r18, 0x0F	; 15
    e6de:	33 27       	eor	r19, r19
    e6e0:	3f 93       	push	r19
    e6e2:	2f 93       	push	r18
    e6e4:	89 2f       	mov	r24, r25
    e6e6:	99 27       	eor	r25, r25
    e6e8:	86 95       	lsr	r24
    e6ea:	84 54       	subi	r24, 0x44	; 68
    e6ec:	98 4f       	sbci	r25, 0xF8	; 248
    e6ee:	9f 93       	push	r25
    e6f0:	8f 93       	push	r24
    e6f2:	ce 01       	movw	r24, r28
    e6f4:	01 96       	adiw	r24, 0x01	; 1
    e6f6:	9f 93       	push	r25
    e6f8:	8f 93       	push	r24
    e6fa:	8b e6       	ldi	r24, 0x6B	; 107
    e6fc:	98 e0       	ldi	r25, 0x08	; 8
    e6fe:	1f 92       	push	r1
    e700:	9f 93       	push	r25
    e702:	8f 93       	push	r24
    e704:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e708:	89 e6       	ldi	r24, 0x69	; 105
    e70a:	98 e0       	ldi	r25, 0x08	; 8
    e70c:	1f 92       	push	r1
    e70e:	9f 93       	push	r25
    e710:	8f 93       	push	r24
    e712:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    e716:	0f b6       	in	r0, 0x3f	; 63
    e718:	f8 94       	cli
    e71a:	de bf       	out	0x3e, r29	; 62
    e71c:	0f be       	out	0x3f, r0	; 63
    e71e:	cd bf       	out	0x3d, r28	; 61
}
    e720:	26 96       	adiw	r28, 0x06	; 6
    e722:	e2 e0       	ldi	r30, 0x02	; 2
    e724:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

0000e728 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e728:	cf 93       	push	r28
    e72a:	df 93       	push	r29
    e72c:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e72e:	8e ea       	ldi	r24, 0xAE	; 174
    e730:	9b e0       	ldi	r25, 0x0B	; 11
    e732:	1f 92       	push	r1
    e734:	9f 93       	push	r25
    e736:	8f 93       	push	r24
    e738:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    
    if(full)
    e73c:	0f 90       	pop	r0
    e73e:	0f 90       	pop	r0
    e740:	0f 90       	pop	r0
    e742:	cd 2b       	or	r28, r29
    e744:	51 f0       	breq	.+20     	; 0xe75a <fatfs_help+0x32>
    {
        printf(
    e746:	82 e3       	ldi	r24, 0x32	; 50
    e748:	9b e0       	ldi	r25, 0x0B	; 11
    e74a:	1f 92       	push	r1
    e74c:	9f 93       	push	r25
    e74e:	8f 93       	push	r24
    e750:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    e754:	0f 90       	pop	r0
    e756:	0f 90       	pop	r0
    e758:	0f 90       	pop	r0
#endif
        "\n"
        );
    }
        
}
    e75a:	df 91       	pop	r29
    e75c:	cf 91       	pop	r28
    e75e:	08 95       	ret

0000e760 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e760:	aa e4       	ldi	r26, 0x4A	; 74
    e762:	b2 e0       	ldi	r27, 0x02	; 2
    e764:	e6 eb       	ldi	r30, 0xB6	; 182
    e766:	f3 e7       	ldi	r31, 0x73	; 115
    e768:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    e76c:	8e 01       	movw	r16, r28
    e76e:	09 5e       	subi	r16, 0xE9	; 233
    e770:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    e772:	00 97       	sbiw	r24, 0x00	; 0
    e774:	21 f0       	breq	.+8      	; 0xe77e <fatfs_ls+0x1e>
    e776:	fc 01       	movw	r30, r24
    e778:	20 81       	ld	r18, Z
    e77a:	21 11       	cpse	r18, r1
    e77c:	03 c0       	rjmp	.+6      	; 0xe784 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e77e:	66 e4       	ldi	r22, 0x46	; 70
    e780:	72 e1       	ldi	r23, 0x12	; 18
    e782:	01 c0       	rjmp	.+2      	; 0xe786 <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e784:	bc 01       	movw	r22, r24
    e786:	c8 01       	movw	r24, r16
    e788:	0e 94 a1 31 	call	0x6342	; 0x6342 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e78c:	1f 93       	push	r17
    e78e:	0f 93       	push	r16
    e790:	82 ea       	ldi	r24, 0xA2	; 162
    e792:	9a e0       	ldi	r25, 0x0A	; 10
    e794:	1f 92       	push	r1
    e796:	9f 93       	push	r25
    e798:	8f 93       	push	r24
    e79a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>

    res = f_opendir(&dirs, buff);
    e79e:	b8 01       	movw	r22, r16
    e7a0:	ce 01       	movw	r24, r28
    e7a2:	89 5e       	subi	r24, 0xE9	; 233
    e7a4:	9d 4f       	sbci	r25, 0xFD	; 253
    e7a6:	0e 94 3d 64 	call	0xc87a	; 0xc87a <f_opendir>
    if (res) { put_rc(res); return; }
    e7aa:	0f 90       	pop	r0
    e7ac:	0f 90       	pop	r0
    e7ae:	0f 90       	pop	r0
    e7b0:	0f 90       	pop	r0
    e7b2:	0f 90       	pop	r0
    e7b4:	00 97       	sbiw	r24, 0x00	; 0
    e7b6:	11 f0       	breq	.+4      	; 0xe7bc <fatfs_ls+0x5c>
    e7b8:	36 dd       	rcall	.-1428   	; 0xe226 <put_rc>
    p1 = s1 = s2 = 0;
    e7ba:	9a c0       	rjmp	.+308    	; 0xe8f0 <fatfs_ls+0x190>
    e7bc:	cb 5b       	subi	r28, 0xBB	; 187
    e7be:	dd 4f       	sbci	r29, 0xFD	; 253
    e7c0:	18 82       	st	Y, r1
    e7c2:	19 82       	std	Y+1, r1	; 0x01
    e7c4:	1a 82       	std	Y+2, r1	; 0x02
    e7c6:	1b 82       	std	Y+3, r1	; 0x03
    e7c8:	c5 54       	subi	r28, 0x45	; 69
    e7ca:	d2 40       	sbci	r29, 0x02	; 2
    e7cc:	c1 2c       	mov	r12, r1
    e7ce:	d1 2c       	mov	r13, r1
    e7d0:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e7d2:	f1 2c       	mov	r15, r1
    e7d4:	be 01       	movw	r22, r28
    e7d6:	6f 5f       	subi	r22, 0xFF	; 255
    e7d8:	7f 4f       	sbci	r23, 0xFF	; 255
    e7da:	ce 01       	movw	r24, r28
    e7dc:	89 5e       	subi	r24, 0xE9	; 233
    e7de:	9d 4f       	sbci	r25, 0xFD	; 253
    e7e0:	0e 94 c3 64 	call	0xc986	; 0xc986 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e7e4:	89 2b       	or	r24, r25
    e7e6:	49 f5       	brne	.+82     	; 0xe83a <fatfs_ls+0xda>
    e7e8:	8f 89       	ldd	r24, Y+23	; 0x17
    e7ea:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    e7ec:	31 f1       	breq	.+76     	; 0xe83a <fatfs_ls+0xda>
    e7ee:	89 85       	ldd	r24, Y+9	; 0x09
    e7f0:	84 ff       	sbrs	r24, 4
        {
            s2++;
    e7f2:	04 c0       	rjmp	.+8      	; 0xe7fc <fatfs_ls+0x9c>
    e7f4:	ff ef       	ldi	r31, 0xFF	; 255
    e7f6:	cf 1a       	sub	r12, r31
    e7f8:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    e7fa:	1b c0       	rjmp	.+54     	; 0xe832 <fatfs_ls+0xd2>
    e7fc:	2f ef       	ldi	r18, 0xFF	; 255
    e7fe:	e2 1a       	sub	r14, r18
    e800:	f2 0a       	sbc	r15, r18
    e802:	49 81       	ldd	r20, Y+1	; 0x01
    e804:	5a 81       	ldd	r21, Y+2	; 0x02
    e806:	6b 81       	ldd	r22, Y+3	; 0x03
    e808:	7c 81       	ldd	r23, Y+4	; 0x04
    e80a:	cb 5b       	subi	r28, 0xBB	; 187
    e80c:	dd 4f       	sbci	r29, 0xFD	; 253
    e80e:	88 81       	ld	r24, Y
    e810:	99 81       	ldd	r25, Y+1	; 0x01
    e812:	aa 81       	ldd	r26, Y+2	; 0x02
    e814:	bb 81       	ldd	r27, Y+3	; 0x03
    e816:	c5 54       	subi	r28, 0x45	; 69
    e818:	d2 40       	sbci	r29, 0x02	; 2
    e81a:	84 0f       	add	r24, r20
    e81c:	95 1f       	adc	r25, r21
    e81e:	a6 1f       	adc	r26, r22
    e820:	b7 1f       	adc	r27, r23
    e822:	cb 5b       	subi	r28, 0xBB	; 187
    e824:	dd 4f       	sbci	r29, 0xFD	; 253
    e826:	88 83       	st	Y, r24
    e828:	99 83       	std	Y+1, r25	; 0x01
    e82a:	aa 83       	std	Y+2, r26	; 0x02
    e82c:	bb 83       	std	Y+3, r27	; 0x03
    e82e:	c5 54       	subi	r28, 0x45	; 69
        }
        fatfs_filinfo_list(&fno);
    e830:	d2 40       	sbci	r29, 0x02	; 2
    e832:	ce 01       	movw	r24, r28
    e834:	01 96       	adiw	r24, 0x01	; 1
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e836:	f1 de       	rcall	.-542    	; 0xe61a <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e838:	cd cf       	rjmp	.-102    	; 0xe7d4 <fatfs_ls+0x74>
    e83a:	df 92       	push	r13
    e83c:	cf 92       	push	r12
    e83e:	c8 5b       	subi	r28, 0xB8	; 184
    e840:	dd 4f       	sbci	r29, 0xFD	; 253
    e842:	88 81       	ld	r24, Y
    e844:	c8 54       	subi	r28, 0x48	; 72
    e846:	d2 40       	sbci	r29, 0x02	; 2
    e848:	8f 93       	push	r24
    e84a:	c9 5b       	subi	r28, 0xB9	; 185
    e84c:	dd 4f       	sbci	r29, 0xFD	; 253
    e84e:	88 81       	ld	r24, Y
    e850:	c7 54       	subi	r28, 0x47	; 71
    e852:	d2 40       	sbci	r29, 0x02	; 2
    e854:	8f 93       	push	r24
    e856:	ca 5b       	subi	r28, 0xBA	; 186
    e858:	dd 4f       	sbci	r29, 0xFD	; 253
    e85a:	88 81       	ld	r24, Y
    e85c:	c6 54       	subi	r28, 0x46	; 70
    e85e:	d2 40       	sbci	r29, 0x02	; 2
    e860:	8f 93       	push	r24
    e862:	cb 5b       	subi	r28, 0xBB	; 187
    e864:	dd 4f       	sbci	r29, 0xFD	; 253
    e866:	88 81       	ld	r24, Y
    e868:	c5 54       	subi	r28, 0x45	; 69
    e86a:	d2 40       	sbci	r29, 0x02	; 2
    e86c:	8f 93       	push	r24
    e86e:	ff 92       	push	r15
    e870:	ef 92       	push	r14
    e872:	89 e7       	ldi	r24, 0x79	; 121
    e874:	9a e0       	ldi	r25, 0x0A	; 10
    e876:	1f 92       	push	r1
    e878:	9f 93       	push	r25
    e87a:	8f 93       	push	r24
    e87c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e880:	ae 01       	movw	r20, r28
    e882:	47 5b       	subi	r20, 0xB7	; 183
    e884:	5d 4f       	sbci	r21, 0xFD	; 253
    e886:	be 01       	movw	r22, r28
    e888:	6b 5b       	subi	r22, 0xBB	; 187
    e88a:	7d 4f       	sbci	r23, 0xFD	; 253
    e88c:	c8 01       	movw	r24, r16
    e88e:	0e 94 45 65 	call	0xca8a	; 0xca8a <f_getfree>
    e892:	0f b6       	in	r0, 0x3f	; 63
    e894:	f8 94       	cli
    e896:	de bf       	out	0x3e, r29	; 62
    e898:	0f be       	out	0x3f, r0	; 63
    e89a:	cd bf       	out	0x3d, r28	; 61
    e89c:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e89e:	41 f5       	brne	.+80     	; 0xe8f0 <fatfs_ls+0x190>
    e8a0:	c7 5b       	subi	r28, 0xB7	; 183
    e8a2:	dd 4f       	sbci	r29, 0xFD	; 253
    e8a4:	e8 81       	ld	r30, Y
    e8a6:	f9 81       	ldd	r31, Y+1	; 0x01
    e8a8:	c9 54       	subi	r28, 0x49	; 73
    e8aa:	d2 40       	sbci	r29, 0x02	; 2
    e8ac:	a1 85       	ldd	r26, Z+9	; 0x09
    e8ae:	b2 85       	ldd	r27, Z+10	; 0x0a
    e8b0:	cb 5b       	subi	r28, 0xBB	; 187
    e8b2:	dd 4f       	sbci	r29, 0xFD	; 253
    e8b4:	28 81       	ld	r18, Y
    e8b6:	39 81       	ldd	r19, Y+1	; 0x01
    e8b8:	4a 81       	ldd	r20, Y+2	; 0x02
    e8ba:	5b 81       	ldd	r21, Y+3	; 0x03
    e8bc:	c5 54       	subi	r28, 0x45	; 69
    e8be:	d2 40       	sbci	r29, 0x02	; 2
    e8c0:	0e 94 0e e5 	call	0x1ca1c	; 0x1ca1c <__muluhisi3>
    e8c4:	22 e0       	ldi	r18, 0x02	; 2
    e8c6:	30 e0       	ldi	r19, 0x00	; 0
    e8c8:	40 e0       	ldi	r20, 0x00	; 0
    e8ca:	50 e0       	ldi	r21, 0x00	; 0
    e8cc:	0e 94 ce e4 	call	0x1c99c	; 0x1c99c <__divmodsi4>
    e8d0:	5f 93       	push	r21
    e8d2:	4f 93       	push	r20
    e8d4:	3f 93       	push	r19
    e8d6:	2f 93       	push	r18
    e8d8:	84 e6       	ldi	r24, 0x64	; 100
    e8da:	9a e0       	ldi	r25, 0x0A	; 10
    e8dc:	1f 92       	push	r1
    e8de:	9f 93       	push	r25
    e8e0:	8f 93       	push	r24
    e8e2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    e8e6:	0f b6       	in	r0, 0x3f	; 63
    e8e8:	f8 94       	cli
    e8ea:	de bf       	out	0x3e, r29	; 62
    e8ec:	0f be       	out	0x3f, r0	; 63
}
    e8ee:	cd bf       	out	0x3d, r28	; 61
    e8f0:	c6 5b       	subi	r28, 0xB6	; 182
    e8f2:	dd 4f       	sbci	r29, 0xFD	; 253
    e8f4:	e8 e0       	ldi	r30, 0x08	; 8
    e8f6:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

0000e8fa <mmc_test>:
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    printf("==============================\n");
    e8fa:	82 e0       	ldi	r24, 0x02	; 2
    e8fc:	9b e0       	ldi	r25, 0x0B	; 11
    e8fe:	1f 92       	push	r1
    e900:	9f 93       	push	r25
    e902:	8f 93       	push	r24
    e904:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("START MMC TEST\n");
    e908:	82 ef       	ldi	r24, 0xF2	; 242
    e90a:	9a e0       	ldi	r25, 0x0A	; 10
    e90c:	1f 92       	push	r1
    e90e:	9f 93       	push	r25
    e910:	8f 93       	push	r24
    e912:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    fatfs_status("/");
    e916:	88 e3       	ldi	r24, 0x38	; 56
    e918:	98 e0       	ldi	r25, 0x08	; 8
    e91a:	13 dd       	rcall	.-1498   	; 0xe342 <fatfs_status>
    printf("MMC Directory List\n");
    e91c:	8e ed       	ldi	r24, 0xDE	; 222
    e91e:	9a e0       	ldi	r25, 0x0A	; 10
    e920:	1f 92       	push	r1
    e922:	9f 93       	push	r25
    e924:	8f 93       	push	r24
    e926:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    fatfs_ls("/");
    e92a:	88 e3       	ldi	r24, 0x38	; 56
    e92c:	98 e0       	ldi	r25, 0x08	; 8
    e92e:	18 df       	rcall	.-464    	; 0xe760 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e930:	80 ed       	ldi	r24, 0xD0	; 208
    e932:	9a e0       	ldi	r25, 0x0A	; 10
    e934:	1f 92       	push	r1
    e936:	9f 93       	push	r25
    e938:	8f 93       	push	r24
    e93a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("==============================\n");
    e93e:	80 eb       	ldi	r24, 0xB0	; 176
    e940:	9a e0       	ldi	r25, 0x0A	; 10
    e942:	1f 92       	push	r1
    e944:	9f 93       	push	r25
    e946:	8f 93       	push	r24
    e948:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
}
    e94c:	8d b7       	in	r24, 0x3d	; 61
    e94e:	9e b7       	in	r25, 0x3e	; 62
    e950:	0f 96       	adiw	r24, 0x0f	; 15
    e952:	0f b6       	in	r0, 0x3f	; 63
    e954:	f8 94       	cli
    e956:	9e bf       	out	0x3e, r25	; 62
    e958:	0f be       	out	0x3f, r0	; 63
    e95a:	8d bf       	out	0x3d, r24	; 61
    e95c:	08 95       	ret

0000e95e <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e95e:	ef 92       	push	r14
    e960:	ff 92       	push	r15
    e962:	0f 93       	push	r16
    e964:	1f 93       	push	r17
    e966:	cf 93       	push	r28
    e968:	df 93       	push	r29
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    e96a:	fb 01       	movw	r30, r22
    e96c:	20 81       	ld	r18, Z
    e96e:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e970:	21 15       	cp	r18, r1
    e972:	31 05       	cpc	r19, r1
    e974:	19 f4       	brne	.+6      	; 0xe97c <fatfs_tests+0x1e>
        return(0);
    e976:	80 e0       	ldi	r24, 0x00	; 0
    e978:	90 e0       	ldi	r25, 0x00	; 0
    e97a:	77 c0       	rjmp	.+238    	; 0xea6a <fatfs_tests+0x10c>
    e97c:	eb 01       	movw	r28, r22
    e97e:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    e980:	6c e5       	ldi	r22, 0x5C	; 92
    e982:	78 e0       	ldi	r23, 0x08	; 8
    e984:	c9 01       	movw	r24, r18
    e986:	0e 94 7e 32 	call	0x64fc	; 0x64fc <MATCH>
    e98a:	89 2b       	or	r24, r25
    e98c:	a1 f3       	breq	.-24     	; 0xe976 <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    e98e:	ea 80       	ldd	r14, Y+2	; 0x02
    e990:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    e992:	e1 14       	cp	r14, r1
    e994:	f1 04       	cpc	r15, r1
    e996:	21 f4       	brne	.+8      	; 0xe9a0 <fatfs_tests+0x42>
        {
            fatfs_help(1);
    e998:	81 e0       	ldi	r24, 0x01	; 1
    e99a:	90 e0       	ldi	r25, 0x00	; 0
    e99c:	c5 de       	rcall	.-630    	; 0xe728 <fatfs_help>
    e99e:	63 c0       	rjmp	.+198    	; 0xea66 <fatfs_tests+0x108>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    e9a0:	67 ef       	ldi	r22, 0xF7	; 247
    e9a2:	75 e1       	ldi	r23, 0x15	; 21
    e9a4:	c7 01       	movw	r24, r14
    e9a6:	0e 94 7e 32 	call	0x64fc	; 0x64fc <MATCH>
    e9aa:	89 2b       	or	r24, r25
    e9ac:	a9 f7       	brne	.-22     	; 0xe998 <fatfs_tests+0x3a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    e9ae:	98 01       	movw	r18, r16
    e9b0:	42 e0       	ldi	r20, 0x02	; 2
    e9b2:	50 e0       	ldi	r21, 0x00	; 0
    e9b4:	62 e6       	ldi	r22, 0x62	; 98
    e9b6:	78 e0       	ldi	r23, 0x08	; 8
    e9b8:	c7 01       	movw	r24, r14
    e9ba:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
    e9be:	89 2b       	or	r24, r25
    e9c0:	51 f1       	breq	.+84     	; 0xea16 <fatfs_tests+0xb8>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    e9c2:	1f 93       	push	r17
    e9c4:	0f 93       	push	r16
    e9c6:	1f 92       	push	r1
    e9c8:	82 e0       	ldi	r24, 0x02	; 2
    e9ca:	8f 93       	push	r24
    e9cc:	82 e2       	ldi	r24, 0x22	; 34
    e9ce:	9b e0       	ldi	r25, 0x0B	; 11
    e9d0:	1f 92       	push	r1
    e9d2:	9f 93       	push	r25
    e9d4:	8f 93       	push	r24
    e9d6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    e9da:	7e 01       	movw	r14, r28
    e9dc:	f4 e0       	ldi	r31, 0x04	; 4
    e9de:	ef 0e       	add	r14, r31
    e9e0:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    e9e2:	8d b7       	in	r24, 0x3d	; 61
    e9e4:	9e b7       	in	r25, 0x3e	; 62
    e9e6:	07 96       	adiw	r24, 0x07	; 7
    e9e8:	0f b6       	in	r0, 0x3f	; 63
    e9ea:	f8 94       	cli
    e9ec:	9e bf       	out	0x3e, r25	; 62
    e9ee:	0f be       	out	0x3f, r0	; 63
    e9f0:	8d bf       	out	0x3d, r24	; 61
    e9f2:	c2 e0       	ldi	r28, 0x02	; 2
    e9f4:	d0 e0       	ldi	r29, 0x00	; 0
    e9f6:	c0 17       	cp	r28, r16
    e9f8:	d1 07       	cpc	r29, r17
    e9fa:	3c f4       	brge	.+14     	; 0xea0a <fatfs_tests+0xac>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    e9fc:	f7 01       	movw	r30, r14
    e9fe:	81 91       	ld	r24, Z+
    ea00:	91 91       	ld	r25, Z+
    ea02:	7f 01       	movw	r14, r30
    ea04:	ad de       	rcall	.-678    	; 0xe760 <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    ea06:	21 96       	adiw	r28, 0x01	; 1
    ea08:	f6 cf       	rjmp	.-20     	; 0xe9f6 <fatfs_tests+0x98>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    ea0a:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    ea0c:	61 f5       	brne	.+88     	; 0xea66 <fatfs_tests+0x108>
    ea0e:	87 e1       	ldi	r24, 0x17	; 23
    ea10:	97 e1       	ldi	r25, 0x17	; 23
    ea12:	a6 de       	rcall	.-692    	; 0xe760 <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    ea14:	28 c0       	rjmp	.+80     	; 0xea66 <fatfs_tests+0x108>
    ea16:	98 01       	movw	r18, r16
    ea18:	42 e0       	ldi	r20, 0x02	; 2
    ea1a:	50 e0       	ldi	r21, 0x00	; 0
    ea1c:	65 e6       	ldi	r22, 0x65	; 101
    ea1e:	78 e0       	ldi	r23, 0x08	; 8
    ea20:	c7 01       	movw	r24, r14
    ea22:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
    {
        mmc_test();
    ea26:	89 2b       	or	r24, r25
    ea28:	11 f0       	breq	.+4      	; 0xea2e <fatfs_tests+0xd0>
    ea2a:	67 df       	rcall	.-306    	; 0xe8fa <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    ea2c:	1c c0       	rjmp	.+56     	; 0xea66 <fatfs_tests+0x108>
    ea2e:	98 01       	movw	r18, r16
    ea30:	42 e0       	ldi	r20, 0x02	; 2
    ea32:	50 e0       	ldi	r21, 0x00	; 0
    ea34:	6e e6       	ldi	r22, 0x6E	; 110
    ea36:	78 e0       	ldi	r23, 0x08	; 8
    ea38:	c7 01       	movw	r24, r14
    ea3a:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
    {
        mmc_init(1);
    ea3e:	89 2b       	or	r24, r25
    ea40:	21 f0       	breq	.+8      	; 0xea4a <fatfs_tests+0xec>
    ea42:	81 e0       	ldi	r24, 0x01	; 1
    ea44:	90 e0       	ldi	r25, 0x00	; 0
    ea46:	cb da       	rcall	.-2666   	; 0xdfde <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    ea48:	0e c0       	rjmp	.+28     	; 0xea66 <fatfs_tests+0x108>
    ea4a:	98 01       	movw	r18, r16
    ea4c:	43 e0       	ldi	r20, 0x03	; 3
    ea4e:	50 e0       	ldi	r21, 0x00	; 0
    ea50:	67 e7       	ldi	r22, 0x77	; 119
    ea52:	78 e0       	ldi	r23, 0x08	; 8
    ea54:	c7 01       	movw	r24, r14
    ea56:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
    ea5a:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    ea5c:	09 f4       	brne	.+2      	; 0xea60 <fatfs_tests+0x102>
    ea5e:	8b cf       	rjmp	.-234    	; 0xe976 <fatfs_tests+0x18>
    ea60:	8c 81       	ldd	r24, Y+4	; 0x04
    ea62:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    ea64:	6e dc       	rcall	.-1828   	; 0xe342 <fatfs_status>
    ea66:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    ea68:	90 e0       	ldi	r25, 0x00	; 0
    ea6a:	cd b7       	in	r28, 0x3d	; 61
    ea6c:	de b7       	in	r29, 0x3e	; 62
    ea6e:	e6 e0       	ldi	r30, 0x06	; 6
    ea70:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

0000ea74 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    ea74:	8f 92       	push	r8
    ea76:	9f 92       	push	r9
    ea78:	af 92       	push	r10
    ea7a:	bf 92       	push	r11
    ea7c:	ef 92       	push	r14
    ea7e:	ff 92       	push	r15
    ea80:	0f 93       	push	r16
    ea82:	1f 93       	push	r17
    ea84:	cf 93       	push	r28
    ea86:	df 93       	push	r29
    ea88:	00 d0       	rcall	.+0      	; 0xea8a <fatfs_getc+0x16>
    ea8a:	1f 92       	push	r1
    ea8c:	cd b7       	in	r28, 0x3d	; 61
    ea8e:	de b7       	in	r29, 0x3e	; 62
    ea90:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    ea94:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    ea98:	00 97       	sbiw	r24, 0x00	; 0
    ea9a:	39 f4       	brne	.+14     	; 0xeaaa <fatfs_getc+0x36>
    ea9c:	89 e0       	ldi	r24, 0x09	; 9
    ea9e:	90 e0       	ldi	r25, 0x00	; 0
    eaa0:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    eaa4:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    eaa8:	2f c0       	rjmp	.+94     	; 0xeb08 <fatfs_getc+0x94>
    eaaa:	fc 01       	movw	r30, r24
    eaac:	e4 84       	ldd	r14, Z+12	; 0x0c
    eaae:	f5 84       	ldd	r15, Z+13	; 0x0d
    eab0:	e1 14       	cp	r14, r1
    eab2:	f1 04       	cpc	r15, r1
    eab4:	99 f3       	breq	.-26     	; 0xea9c <fatfs_getc+0x28>
    eab6:	8c 01       	movw	r16, r24
    eab8:	9e 01       	movw	r18, r28
    eaba:	2f 5f       	subi	r18, 0xFF	; 255
    eabc:	3f 4f       	sbci	r19, 0xFF	; 255
    eabe:	41 e0       	ldi	r20, 0x01	; 1
    eac0:	50 e0       	ldi	r21, 0x00	; 0
    eac2:	be 01       	movw	r22, r28
    eac4:	6d 5f       	subi	r22, 0xFD	; 253
    eac6:	7f 4f       	sbci	r23, 0xFF	; 255
    eac8:	c7 01       	movw	r24, r14
    eaca:	0e 94 56 5c 	call	0xb8ac	; 0xb8ac <f_read>
    eace:	00 97       	sbiw	r24, 0x00	; 0
    ead0:	31 f4       	brne	.+12     	; 0xeade <fatfs_getc+0x6a>
    ead2:	29 81       	ldd	r18, Y+1	; 0x01
    ead4:	3a 81       	ldd	r19, Y+2	; 0x02
    ead6:	21 30       	cpi	r18, 0x01	; 1
    ead8:	31 05       	cpc	r19, r1
    eada:	c9 f0       	breq	.+50     	; 0xeb0e <fatfs_getc+0x9a>
    eadc:	03 c0       	rjmp	.+6      	; 0xeae4 <fatfs_getc+0x70>
    eade:	84 31       	cpi	r24, 0x14	; 20
    eae0:	91 05       	cpc	r25, r1
    eae2:	40 f4       	brcc	.+16     	; 0xeaf4 <fatfs_getc+0x80>
    eae4:	fc 01       	movw	r30, r24
    eae6:	e0 5f       	subi	r30, 0xF0	; 240
    eae8:	f8 4f       	sbci	r31, 0xF8	; 248
    eaea:	80 81       	ld	r24, Z
    eaec:	08 2e       	mov	r0, r24
    eaee:	00 0c       	add	r0, r0
    eaf0:	99 0b       	sbc	r25, r25
    eaf2:	02 c0       	rjmp	.+4      	; 0xeaf8 <fatfs_getc+0x84>
    eaf4:	83 e2       	ldi	r24, 0x23	; 35
    eaf6:	90 e0       	ldi	r25, 0x00	; 0
    eaf8:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    eafc:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    eb00:	f8 01       	movw	r30, r16
    eb02:	83 81       	ldd	r24, Z+3	; 0x03
    eb04:	80 62       	ori	r24, 0x20	; 32
    eb06:	83 83       	std	Z+3, r24	; 0x03
    eb08:	8f ef       	ldi	r24, 0xFF	; 255
    eb0a:	9f ef       	ldi	r25, 0xFF	; 255
    eb0c:	28 c0       	rjmp	.+80     	; 0xeb5e <fatfs_getc+0xea>
    eb0e:	8b 81       	ldd	r24, Y+3	; 0x03
    eb10:	8d 30       	cpi	r24, 0x0D	; 13
    eb12:	01 f5       	brne	.+64     	; 0xeb54 <fatfs_getc+0xe0>
    eb14:	f7 01       	movw	r30, r14
    eb16:	80 88       	ldd	r8, Z+16	; 0x10
    eb18:	91 88       	ldd	r9, Z+17	; 0x11
    eb1a:	a2 88       	ldd	r10, Z+18	; 0x12
    eb1c:	b3 88       	ldd	r11, Z+19	; 0x13
    eb1e:	9e 01       	movw	r18, r28
    eb20:	2f 5f       	subi	r18, 0xFF	; 255
    eb22:	3f 4f       	sbci	r19, 0xFF	; 255
    eb24:	41 e0       	ldi	r20, 0x01	; 1
    eb26:	50 e0       	ldi	r21, 0x00	; 0
    eb28:	be 01       	movw	r22, r28
    eb2a:	6d 5f       	subi	r22, 0xFD	; 253
    eb2c:	7f 4f       	sbci	r23, 0xFF	; 255
    eb2e:	c7 01       	movw	r24, r14
    eb30:	0e 94 56 5c 	call	0xb8ac	; 0xb8ac <f_read>
    eb34:	89 2b       	or	r24, r25
    eb36:	89 f4       	brne	.+34     	; 0xeb5a <fatfs_getc+0xe6>
    eb38:	89 81       	ldd	r24, Y+1	; 0x01
    eb3a:	9a 81       	ldd	r25, Y+2	; 0x02
    eb3c:	01 97       	sbiw	r24, 0x01	; 1
    eb3e:	69 f4       	brne	.+26     	; 0xeb5a <fatfs_getc+0xe6>
    eb40:	8b 81       	ldd	r24, Y+3	; 0x03
    eb42:	8a 30       	cpi	r24, 0x0A	; 10
    eb44:	31 f0       	breq	.+12     	; 0xeb52 <fatfs_getc+0xde>
    eb46:	b5 01       	movw	r22, r10
    eb48:	a4 01       	movw	r20, r8
    eb4a:	c7 01       	movw	r24, r14
    eb4c:	0e 94 62 61 	call	0xc2c4	; 0xc2c4 <f_lseek>
    eb50:	04 c0       	rjmp	.+8      	; 0xeb5a <fatfs_getc+0xe6>
    eb52:	8b 83       	std	Y+3, r24	; 0x03
    eb54:	8b 81       	ldd	r24, Y+3	; 0x03
    eb56:	90 e0       	ldi	r25, 0x00	; 0
    eb58:	02 c0       	rjmp	.+4      	; 0xeb5e <fatfs_getc+0xea>
    eb5a:	8a e0       	ldi	r24, 0x0A	; 10
    eb5c:	90 e0       	ldi	r25, 0x00	; 0
    eb5e:	0f 90       	pop	r0
    eb60:	0f 90       	pop	r0
    eb62:	0f 90       	pop	r0
    eb64:	df 91       	pop	r29
    eb66:	cf 91       	pop	r28
    eb68:	1f 91       	pop	r17
    eb6a:	0f 91       	pop	r16
    eb6c:	ff 90       	pop	r15
    eb6e:	ef 90       	pop	r14
    eb70:	bf 90       	pop	r11
    eb72:	af 90       	pop	r10
    eb74:	9f 90       	pop	r9
    eb76:	8f 90       	pop	r8
    eb78:	08 95       	ret

0000eb7a <fatfs_putc>:
    eb7a:	a3 e0       	ldi	r26, 0x03	; 3
    eb7c:	b0 e0       	ldi	r27, 0x00	; 0
    eb7e:	e3 ec       	ldi	r30, 0xC3	; 195
    eb80:	f5 e7       	ldi	r31, 0x75	; 117
    eb82:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__prologue_saves__+0x1c>
    eb86:	8b 83       	std	Y+3, r24	; 0x03
    eb88:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    eb8c:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    eb90:	61 15       	cp	r22, r1
    eb92:	71 05       	cpc	r23, r1
    eb94:	39 f4       	brne	.+14     	; 0xeba4 <fatfs_putc+0x2a>
    eb96:	89 e0       	ldi	r24, 0x09	; 9
    eb98:	90 e0       	ldi	r25, 0x00	; 0
    eb9a:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    eb9e:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    eba2:	2d c0       	rjmp	.+90     	; 0xebfe <fatfs_putc+0x84>
    eba4:	fb 01       	movw	r30, r22
    eba6:	84 85       	ldd	r24, Z+12	; 0x0c
    eba8:	95 85       	ldd	r25, Z+13	; 0x0d
    ebaa:	00 97       	sbiw	r24, 0x00	; 0
    ebac:	a1 f3       	breq	.-24     	; 0xeb96 <fatfs_putc+0x1c>
    ebae:	8b 01       	movw	r16, r22
    ebb0:	9e 01       	movw	r18, r28
    ebb2:	2f 5f       	subi	r18, 0xFF	; 255
    ebb4:	3f 4f       	sbci	r19, 0xFF	; 255
    ebb6:	41 e0       	ldi	r20, 0x01	; 1
    ebb8:	50 e0       	ldi	r21, 0x00	; 0
    ebba:	be 01       	movw	r22, r28
    ebbc:	6d 5f       	subi	r22, 0xFD	; 253
    ebbe:	7f 4f       	sbci	r23, 0xFF	; 255
    ebc0:	0e 94 a1 5d 	call	0xbb42	; 0xbb42 <f_write>
    ebc4:	00 97       	sbiw	r24, 0x00	; 0
    ebc6:	31 f4       	brne	.+12     	; 0xebd4 <fatfs_putc+0x5a>
    ebc8:	29 81       	ldd	r18, Y+1	; 0x01
    ebca:	3a 81       	ldd	r19, Y+2	; 0x02
    ebcc:	21 30       	cpi	r18, 0x01	; 1
    ebce:	31 05       	cpc	r19, r1
    ebd0:	c9 f0       	breq	.+50     	; 0xec04 <fatfs_putc+0x8a>
    ebd2:	03 c0       	rjmp	.+6      	; 0xebda <fatfs_putc+0x60>
    ebd4:	84 31       	cpi	r24, 0x14	; 20
    ebd6:	91 05       	cpc	r25, r1
    ebd8:	40 f4       	brcc	.+16     	; 0xebea <fatfs_putc+0x70>
    ebda:	fc 01       	movw	r30, r24
    ebdc:	e0 5f       	subi	r30, 0xF0	; 240
    ebde:	f8 4f       	sbci	r31, 0xF8	; 248
    ebe0:	80 81       	ld	r24, Z
    ebe2:	08 2e       	mov	r0, r24
    ebe4:	00 0c       	add	r0, r0
    ebe6:	99 0b       	sbc	r25, r25
    ebe8:	02 c0       	rjmp	.+4      	; 0xebee <fatfs_putc+0x74>
    ebea:	83 e2       	ldi	r24, 0x23	; 35
    ebec:	90 e0       	ldi	r25, 0x00	; 0
    ebee:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    ebf2:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    ebf6:	f8 01       	movw	r30, r16
    ebf8:	83 81       	ldd	r24, Z+3	; 0x03
    ebfa:	80 62       	ori	r24, 0x20	; 32
    ebfc:	83 83       	std	Z+3, r24	; 0x03
    ebfe:	8f ef       	ldi	r24, 0xFF	; 255
    ec00:	9f ef       	ldi	r25, 0xFF	; 255
    ec02:	02 c0       	rjmp	.+4      	; 0xec08 <fatfs_putc+0x8e>
    ec04:	8b 81       	ldd	r24, Y+3	; 0x03
    ec06:	90 e0       	ldi	r25, 0x00	; 0
    ec08:	23 96       	adiw	r28, 0x03	; 3
    ec0a:	e4 e0       	ldi	r30, 0x04	; 4
    ec0c:	0c 94 58 e5 	jmp	0x1cab0	; 0x1cab0 <__epilogue_restores__+0x1c>

0000ec10 <fgetc>:
    ec10:	cf 93       	push	r28
    ec12:	df 93       	push	r29
    ec14:	ec 01       	movw	r28, r24
    ec16:	00 97       	sbiw	r24, 0x00	; 0
    ec18:	39 f4       	brne	.+14     	; 0xec28 <fgetc+0x18>
    ec1a:	89 e0       	ldi	r24, 0x09	; 9
    ec1c:	90 e0       	ldi	r25, 0x00	; 0
    ec1e:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    ec22:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    ec26:	40 c0       	rjmp	.+128    	; 0xeca8 <fgetc+0x98>
    ec28:	2b 81       	ldd	r18, Y+3	; 0x03
    ec2a:	20 ff       	sbrs	r18, 0
    ec2c:	3d c0       	rjmp	.+122    	; 0xeca8 <fgetc+0x98>
    ec2e:	26 ff       	sbrs	r18, 6
    ec30:	0a c0       	rjmp	.+20     	; 0xec46 <fgetc+0x36>
    ec32:	2f 7b       	andi	r18, 0xBF	; 191
    ec34:	2b 83       	std	Y+3, r18	; 0x03
    ec36:	8e 81       	ldd	r24, Y+6	; 0x06
    ec38:	9f 81       	ldd	r25, Y+7	; 0x07
    ec3a:	01 96       	adiw	r24, 0x01	; 1
    ec3c:	9f 83       	std	Y+7, r25	; 0x07
    ec3e:	8e 83       	std	Y+6, r24	; 0x06
    ec40:	8a 81       	ldd	r24, Y+2	; 0x02
    ec42:	90 e0       	ldi	r25, 0x00	; 0
    ec44:	33 c0       	rjmp	.+102    	; 0xecac <fgetc+0x9c>
    ec46:	22 ff       	sbrs	r18, 2
    ec48:	0d c0       	rjmp	.+26     	; 0xec64 <fgetc+0x54>
    ec4a:	e8 81       	ld	r30, Y
    ec4c:	f9 81       	ldd	r31, Y+1	; 0x01
    ec4e:	80 81       	ld	r24, Z
    ec50:	90 e0       	ldi	r25, 0x00	; 0
    ec52:	00 97       	sbiw	r24, 0x00	; 0
    ec54:	19 f4       	brne	.+6      	; 0xec5c <fgetc+0x4c>
    ec56:	20 62       	ori	r18, 0x20	; 32
    ec58:	2b 83       	std	Y+3, r18	; 0x03
    ec5a:	26 c0       	rjmp	.+76     	; 0xeca8 <fgetc+0x98>
    ec5c:	31 96       	adiw	r30, 0x01	; 1
    ec5e:	f9 83       	std	Y+1, r31	; 0x01
    ec60:	e8 83       	st	Y, r30
    ec62:	1b c0       	rjmp	.+54     	; 0xec9a <fgetc+0x8a>
    ec64:	ea 85       	ldd	r30, Y+10	; 0x0a
    ec66:	fb 85       	ldd	r31, Y+11	; 0x0b
    ec68:	30 97       	sbiw	r30, 0x00	; 0
    ec6a:	59 f4       	brne	.+22     	; 0xec82 <fgetc+0x72>
    ec6c:	8e e7       	ldi	r24, 0x7E	; 126
    ec6e:	9c e0       	ldi	r25, 0x0C	; 12
    ec70:	1f 92       	push	r1
    ec72:	9f 93       	push	r25
    ec74:	8f 93       	push	r24
    ec76:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    ec7a:	0f 90       	pop	r0
    ec7c:	0f 90       	pop	r0
    ec7e:	0f 90       	pop	r0
    ec80:	13 c0       	rjmp	.+38     	; 0xeca8 <fgetc+0x98>
    ec82:	09 95       	icall
    ec84:	97 ff       	sbrs	r25, 7
    ec86:	09 c0       	rjmp	.+18     	; 0xec9a <fgetc+0x8a>
    ec88:	2b 81       	ldd	r18, Y+3	; 0x03
    ec8a:	02 96       	adiw	r24, 0x02	; 2
    ec8c:	11 f0       	breq	.+4      	; 0xec92 <fgetc+0x82>
    ec8e:	80 e2       	ldi	r24, 0x20	; 32
    ec90:	01 c0       	rjmp	.+2      	; 0xec94 <fgetc+0x84>
    ec92:	80 e1       	ldi	r24, 0x10	; 16
    ec94:	82 2b       	or	r24, r18
    ec96:	8b 83       	std	Y+3, r24	; 0x03
    ec98:	07 c0       	rjmp	.+14     	; 0xeca8 <fgetc+0x98>
    ec9a:	2e 81       	ldd	r18, Y+6	; 0x06
    ec9c:	3f 81       	ldd	r19, Y+7	; 0x07
    ec9e:	2f 5f       	subi	r18, 0xFF	; 255
    eca0:	3f 4f       	sbci	r19, 0xFF	; 255
    eca2:	3f 83       	std	Y+7, r19	; 0x07
    eca4:	2e 83       	std	Y+6, r18	; 0x06
    eca6:	02 c0       	rjmp	.+4      	; 0xecac <fgetc+0x9c>
    eca8:	8f ef       	ldi	r24, 0xFF	; 255
    ecaa:	9f ef       	ldi	r25, 0xFF	; 255
    ecac:	df 91       	pop	r29
    ecae:	cf 91       	pop	r28
    ecb0:	08 95       	ret

0000ecb2 <fputc>:
    ecb2:	cf 93       	push	r28
    ecb4:	df 93       	push	r29
    ecb6:	eb 01       	movw	r28, r22
    ecb8:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    ecbc:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    ecc0:	20 91 b9 1b 	lds	r18, 0x1BB9	; 0x801bb9 <__iob+0x2>
    ecc4:	30 91 ba 1b 	lds	r19, 0x1BBA	; 0x801bba <__iob+0x3>
    ecc8:	62 17       	cp	r22, r18
    ecca:	73 07       	cpc	r23, r19
    eccc:	49 f0       	breq	.+18     	; 0xece0 <fputc+0x2e>
    ecce:	20 91 bb 1b 	lds	r18, 0x1BBB	; 0x801bbb <__iob+0x4>
    ecd2:	30 91 bc 1b 	lds	r19, 0x1BBC	; 0x801bbc <__iob+0x5>
    ecd6:	62 17       	cp	r22, r18
    ecd8:	73 07       	cpc	r23, r19
    ecda:	11 f0       	breq	.+4      	; 0xece0 <fputc+0x2e>
    ecdc:	4e df       	rcall	.-356    	; 0xeb7a <fatfs_putc>
    ecde:	33 c0       	rjmp	.+102    	; 0xed46 <fputc+0x94>
    ece0:	2b 81       	ldd	r18, Y+3	; 0x03
    ece2:	21 ff       	sbrs	r18, 1
    ece4:	2e c0       	rjmp	.+92     	; 0xed42 <fputc+0x90>
    ece6:	22 ff       	sbrs	r18, 2
    ece8:	10 c0       	rjmp	.+32     	; 0xed0a <fputc+0x58>
    ecea:	4e 81       	ldd	r20, Y+6	; 0x06
    ecec:	5f 81       	ldd	r21, Y+7	; 0x07
    ecee:	2c 81       	ldd	r18, Y+4	; 0x04
    ecf0:	3d 81       	ldd	r19, Y+5	; 0x05
    ecf2:	42 17       	cp	r20, r18
    ecf4:	53 07       	cpc	r21, r19
    ecf6:	f4 f4       	brge	.+60     	; 0xed34 <fputc+0x82>
    ecf8:	e8 81       	ld	r30, Y
    ecfa:	f9 81       	ldd	r31, Y+1	; 0x01
    ecfc:	9f 01       	movw	r18, r30
    ecfe:	2f 5f       	subi	r18, 0xFF	; 255
    ed00:	3f 4f       	sbci	r19, 0xFF	; 255
    ed02:	39 83       	std	Y+1, r19	; 0x01
    ed04:	28 83       	st	Y, r18
    ed06:	80 83       	st	Z, r24
    ed08:	15 c0       	rjmp	.+42     	; 0xed34 <fputc+0x82>
    ed0a:	e8 85       	ldd	r30, Y+8	; 0x08
    ed0c:	f9 85       	ldd	r31, Y+9	; 0x09
    ed0e:	30 97       	sbiw	r30, 0x00	; 0
    ed10:	59 f4       	brne	.+22     	; 0xed28 <fputc+0x76>
    ed12:	86 e6       	ldi	r24, 0x66	; 102
    ed14:	9c e0       	ldi	r25, 0x0C	; 12
    ed16:	1f 92       	push	r1
    ed18:	9f 93       	push	r25
    ed1a:	8f 93       	push	r24
    ed1c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    ed20:	0f 90       	pop	r0
    ed22:	0f 90       	pop	r0
    ed24:	0f 90       	pop	r0
    ed26:	0d c0       	rjmp	.+26     	; 0xed42 <fputc+0x90>
    ed28:	be 01       	movw	r22, r28
    ed2a:	09 95       	icall
    ed2c:	8f 3f       	cpi	r24, 0xFF	; 255
    ed2e:	2f ef       	ldi	r18, 0xFF	; 255
    ed30:	92 07       	cpc	r25, r18
    ed32:	39 f0       	breq	.+14     	; 0xed42 <fputc+0x90>
    ed34:	2e 81       	ldd	r18, Y+6	; 0x06
    ed36:	3f 81       	ldd	r19, Y+7	; 0x07
    ed38:	2f 5f       	subi	r18, 0xFF	; 255
    ed3a:	3f 4f       	sbci	r19, 0xFF	; 255
    ed3c:	3f 83       	std	Y+7, r19	; 0x07
    ed3e:	2e 83       	std	Y+6, r18	; 0x06
    ed40:	02 c0       	rjmp	.+4      	; 0xed46 <fputc+0x94>
    ed42:	8f ef       	ldi	r24, 0xFF	; 255
    ed44:	9f ef       	ldi	r25, 0xFF	; 255
    ed46:	df 91       	pop	r29
    ed48:	cf 91       	pop	r28
    ed4a:	08 95       	ret

0000ed4c <_fprintf_putc>:
    ed4c:	fc 01       	movw	r30, r24
    ed4e:	86 2f       	mov	r24, r22
    ed50:	26 81       	ldd	r18, Z+6	; 0x06
    ed52:	37 81       	ldd	r19, Z+7	; 0x07
    ed54:	2f 5f       	subi	r18, 0xFF	; 255
    ed56:	3f 4f       	sbci	r19, 0xFF	; 255
    ed58:	37 83       	std	Z+7, r19	; 0x07
    ed5a:	26 83       	std	Z+6, r18	; 0x06
    ed5c:	62 81       	ldd	r22, Z+2	; 0x02
    ed5e:	73 81       	ldd	r23, Z+3	; 0x03
    ed60:	90 e0       	ldi	r25, 0x00	; 0
    ed62:	a7 cf       	rjmp	.-178    	; 0xecb2 <fputc>
    ed64:	08 95       	ret

0000ed66 <getchar>:
    ed66:	80 91 b7 1b 	lds	r24, 0x1BB7	; 0x801bb7 <__iob>
    ed6a:	90 91 b8 1b 	lds	r25, 0x1BB8	; 0x801bb8 <__iob+0x1>
    ed6e:	50 cf       	rjmp	.-352    	; 0xec10 <fgetc>
    ed70:	08 95       	ret

0000ed72 <putchar>:
    ed72:	60 91 b9 1b 	lds	r22, 0x1BB9	; 0x801bb9 <__iob+0x2>
    ed76:	70 91 ba 1b 	lds	r23, 0x1BBA	; 0x801bba <__iob+0x3>
    ed7a:	9b cf       	rjmp	.-202    	; 0xecb2 <fputc>
    ed7c:	08 95       	ret

0000ed7e <fgets>:
    ed7e:	a0 e0       	ldi	r26, 0x00	; 0
    ed80:	b0 e0       	ldi	r27, 0x00	; 0
    ed82:	e5 ec       	ldi	r30, 0xC5	; 197
    ed84:	f6 e7       	ldi	r31, 0x76	; 118
    ed86:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
    ed8a:	7c 01       	movw	r14, r24
    ed8c:	6a 01       	movw	r12, r20
    ed8e:	8b 01       	movw	r16, r22
    ed90:	c0 e0       	ldi	r28, 0x00	; 0
    ed92:	d0 e0       	ldi	r29, 0x00	; 0
    ed94:	01 15       	cp	r16, r1
    ed96:	11 05       	cpc	r17, r1
    ed98:	41 f0       	breq	.+16     	; 0xedaa <fgets+0x2c>
    ed9a:	c6 01       	movw	r24, r12
    ed9c:	39 df       	rcall	.-398    	; 0xec10 <fgetc>
    ed9e:	8f 3f       	cpi	r24, 0xFF	; 255
    eda0:	2f ef       	ldi	r18, 0xFF	; 255
    eda2:	92 07       	cpc	r25, r18
    eda4:	39 f4       	brne	.+14     	; 0xedb4 <fgets+0x36>
    eda6:	20 97       	sbiw	r28, 0x00	; 0
    eda8:	b9 f0       	breq	.+46     	; 0xedd8 <fgets+0x5a>
    edaa:	ce 0d       	add	r28, r14
    edac:	df 1d       	adc	r29, r15
    edae:	18 82       	st	Y, r1
    edb0:	c7 01       	movw	r24, r14
    edb2:	14 c0       	rjmp	.+40     	; 0xeddc <fgets+0x5e>
    edb4:	8a 30       	cpi	r24, 0x0A	; 10
    edb6:	91 05       	cpc	r25, r1
    edb8:	c1 f3       	breq	.-16     	; 0xedaa <fgets+0x2c>
    edba:	88 30       	cpi	r24, 0x08	; 8
    edbc:	91 05       	cpc	r25, r1
    edbe:	21 f4       	brne	.+8      	; 0xedc8 <fgets+0x4a>
    edc0:	20 97       	sbiw	r28, 0x00	; 0
    edc2:	39 f0       	breq	.+14     	; 0xedd2 <fgets+0x54>
    edc4:	21 97       	sbiw	r28, 0x01	; 1
    edc6:	05 c0       	rjmp	.+10     	; 0xedd2 <fgets+0x54>
    edc8:	f7 01       	movw	r30, r14
    edca:	ec 0f       	add	r30, r28
    edcc:	fd 1f       	adc	r31, r29
    edce:	80 83       	st	Z, r24
    edd0:	21 96       	adiw	r28, 0x01	; 1
    edd2:	01 50       	subi	r16, 0x01	; 1
    edd4:	11 09       	sbc	r17, r1
    edd6:	de cf       	rjmp	.-68     	; 0xed94 <fgets+0x16>
    edd8:	80 e0       	ldi	r24, 0x00	; 0
    edda:	90 e0       	ldi	r25, 0x00	; 0
    eddc:	cd b7       	in	r28, 0x3d	; 61
    edde:	de b7       	in	r29, 0x3e	; 62
    ede0:	e8 e0       	ldi	r30, 0x08	; 8
    ede2:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

0000ede6 <fputs>:
    ede6:	0f 93       	push	r16
    ede8:	1f 93       	push	r17
    edea:	cf 93       	push	r28
    edec:	df 93       	push	r29
    edee:	8b 01       	movw	r16, r22
    edf0:	ec 01       	movw	r28, r24
    edf2:	89 91       	ld	r24, Y+
    edf4:	88 23       	and	r24, r24
    edf6:	41 f0       	breq	.+16     	; 0xee08 <fputs+0x22>
    edf8:	b8 01       	movw	r22, r16
    edfa:	90 e0       	ldi	r25, 0x00	; 0
    edfc:	5a df       	rcall	.-332    	; 0xecb2 <fputc>
    edfe:	8f 3f       	cpi	r24, 0xFF	; 255
    ee00:	2f ef       	ldi	r18, 0xFF	; 255
    ee02:	92 07       	cpc	r25, r18
    ee04:	b1 f7       	brne	.-20     	; 0xedf2 <fputs+0xc>
    ee06:	02 c0       	rjmp	.+4      	; 0xee0c <fputs+0x26>
    ee08:	80 e0       	ldi	r24, 0x00	; 0
    ee0a:	90 e0       	ldi	r25, 0x00	; 0
    ee0c:	df 91       	pop	r29
    ee0e:	cf 91       	pop	r28
    ee10:	1f 91       	pop	r17
    ee12:	0f 91       	pop	r16
    ee14:	08 95       	ret

0000ee16 <puts>:
    ee16:	cf 93       	push	r28
    ee18:	df 93       	push	r29
    ee1a:	ec 01       	movw	r28, r24
    ee1c:	89 91       	ld	r24, Y+
    ee1e:	60 91 b9 1b 	lds	r22, 0x1BB9	; 0x801bb9 <__iob+0x2>
    ee22:	70 91 ba 1b 	lds	r23, 0x1BBA	; 0x801bba <__iob+0x3>
    ee26:	88 23       	and	r24, r24
    ee28:	39 f0       	breq	.+14     	; 0xee38 <puts+0x22>
    ee2a:	90 e0       	ldi	r25, 0x00	; 0
    ee2c:	42 df       	rcall	.-380    	; 0xecb2 <fputc>
    ee2e:	8f 3f       	cpi	r24, 0xFF	; 255
    ee30:	2f ef       	ldi	r18, 0xFF	; 255
    ee32:	92 07       	cpc	r25, r18
    ee34:	99 f7       	brne	.-26     	; 0xee1c <puts+0x6>
    ee36:	03 c0       	rjmp	.+6      	; 0xee3e <puts+0x28>
    ee38:	8a e0       	ldi	r24, 0x0A	; 10
    ee3a:	90 e0       	ldi	r25, 0x00	; 0
    ee3c:	3a df       	rcall	.-396    	; 0xecb2 <fputc>
    ee3e:	df 91       	pop	r29
    ee40:	cf 91       	pop	r28
    ee42:	08 95       	ret

0000ee44 <fileno>:
    ee44:	00 97       	sbiw	r24, 0x00	; 0
    ee46:	39 f4       	brne	.+14     	; 0xee56 <fileno+0x12>
    ee48:	89 e0       	ldi	r24, 0x09	; 9
    ee4a:	90 e0       	ldi	r25, 0x00	; 0
    ee4c:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    ee50:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    ee54:	0e c0       	rjmp	.+28     	; 0xee72 <fileno+0x2e>
    ee56:	e7 eb       	ldi	r30, 0xB7	; 183
    ee58:	fb e1       	ldi	r31, 0x1B	; 27
    ee5a:	20 e0       	ldi	r18, 0x00	; 0
    ee5c:	30 e0       	ldi	r19, 0x00	; 0
    ee5e:	41 91       	ld	r20, Z+
    ee60:	51 91       	ld	r21, Z+
    ee62:	84 17       	cp	r24, r20
    ee64:	95 07       	cpc	r25, r21
    ee66:	41 f0       	breq	.+16     	; 0xee78 <fileno+0x34>
    ee68:	2f 5f       	subi	r18, 0xFF	; 255
    ee6a:	3f 4f       	sbci	r19, 0xFF	; 255
    ee6c:	20 31       	cpi	r18, 0x10	; 16
    ee6e:	31 05       	cpc	r19, r1
    ee70:	b1 f7       	brne	.-20     	; 0xee5e <fileno+0x1a>
    ee72:	8f ef       	ldi	r24, 0xFF	; 255
    ee74:	9f ef       	ldi	r25, 0xFF	; 255
    ee76:	08 95       	ret
    ee78:	c9 01       	movw	r24, r18
    ee7a:	08 95       	ret

0000ee7c <fileno_to_stream>:
    ee7c:	80 31       	cpi	r24, 0x10	; 16
    ee7e:	91 05       	cpc	r25, r1
    ee80:	48 f4       	brcc	.+18     	; 0xee94 <fileno_to_stream+0x18>
    ee82:	88 0f       	add	r24, r24
    ee84:	99 1f       	adc	r25, r25
    ee86:	fc 01       	movw	r30, r24
    ee88:	e9 54       	subi	r30, 0x49	; 73
    ee8a:	f4 4e       	sbci	r31, 0xE4	; 228
    ee8c:	80 81       	ld	r24, Z
    ee8e:	91 81       	ldd	r25, Z+1	; 0x01
    ee90:	00 97       	sbiw	r24, 0x00	; 0
    ee92:	41 f4       	brne	.+16     	; 0xeea4 <fileno_to_stream+0x28>
    ee94:	89 e0       	ldi	r24, 0x09	; 9
    ee96:	90 e0       	ldi	r25, 0x00	; 0
    ee98:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    ee9c:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    eea0:	80 e0       	ldi	r24, 0x00	; 0
    eea2:	90 e0       	ldi	r25, 0x00	; 0
    eea4:	08 95       	ret

0000eea6 <mctime>:
    eea6:	a4 e0       	ldi	r26, 0x04	; 4
    eea8:	b0 e0       	ldi	r27, 0x00	; 0
    eeaa:	e9 e5       	ldi	r30, 0x59	; 89
    eeac:	f7 e7       	ldi	r31, 0x77	; 119
    eeae:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    eeb2:	69 83       	std	Y+1, r22	; 0x01
    eeb4:	7a 83       	std	Y+2, r23	; 0x02
    eeb6:	8b 83       	std	Y+3, r24	; 0x03
    eeb8:	9c 83       	std	Y+4, r25	; 0x04
    eeba:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    eebe:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    eec2:	ce 01       	movw	r24, r28
    eec4:	01 96       	adiw	r24, 0x01	; 1
    eec6:	0e 94 76 3d 	call	0x7aec	; 0x7aec <ctime_gm>
    eeca:	fc 01       	movw	r30, r24
    eecc:	01 90       	ld	r0, Z+
    eece:	00 20       	and	r0, r0
    eed0:	e9 f7       	brne	.-6      	; 0xeecc <mctime+0x26>
    eed2:	31 97       	sbiw	r30, 0x01	; 1
    eed4:	e8 1b       	sub	r30, r24
    eed6:	f9 0b       	sbc	r31, r25
    eed8:	39 f0       	breq	.+14     	; 0xeee8 <mctime+0x42>
    eeda:	31 97       	sbiw	r30, 0x01	; 1
    eedc:	e8 0f       	add	r30, r24
    eede:	f9 1f       	adc	r31, r25
    eee0:	20 81       	ld	r18, Z
    eee2:	2a 30       	cpi	r18, 0x0A	; 10
    eee4:	09 f4       	brne	.+2      	; 0xeee8 <mctime+0x42>
    eee6:	10 82       	st	Z, r1
    eee8:	24 96       	adiw	r28, 0x04	; 4
    eeea:	e2 e0       	ldi	r30, 0x02	; 2
    eeec:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

0000eef0 <basename>:
    eef0:	00 97       	sbiw	r24, 0x00	; 0
    eef2:	49 f0       	breq	.+18     	; 0xef06 <basename+0x16>
    eef4:	fc 01       	movw	r30, r24
    eef6:	21 91       	ld	r18, Z+
    eef8:	22 23       	and	r18, r18
    eefa:	21 f0       	breq	.+8      	; 0xef04 <basename+0x14>
    eefc:	2f 32       	cpi	r18, 0x2F	; 47
    eefe:	d9 f7       	brne	.-10     	; 0xeef6 <basename+0x6>
    ef00:	cf 01       	movw	r24, r30
    ef02:	f9 cf       	rjmp	.-14     	; 0xeef6 <basename+0x6>
    ef04:	08 95       	ret
    ef06:	87 e1       	ldi	r24, 0x17	; 23
    ef08:	97 e1       	ldi	r25, 0x17	; 23
    ef0a:	08 95       	ret

0000ef0c <chdir>:
    ef0c:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    ef10:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    ef14:	0e 94 d1 5f 	call	0xbfa2	; 0xbfa2 <f_chdir>
    ef18:	00 97       	sbiw	r24, 0x00	; 0
    ef1a:	a1 f0       	breq	.+40     	; 0xef44 <chdir+0x38>
    ef1c:	84 31       	cpi	r24, 0x14	; 20
    ef1e:	91 05       	cpc	r25, r1
    ef20:	40 f4       	brcc	.+16     	; 0xef32 <chdir+0x26>
    ef22:	fc 01       	movw	r30, r24
    ef24:	e0 5f       	subi	r30, 0xF0	; 240
    ef26:	f8 4f       	sbci	r31, 0xF8	; 248
    ef28:	80 81       	ld	r24, Z
    ef2a:	08 2e       	mov	r0, r24
    ef2c:	00 0c       	add	r0, r0
    ef2e:	99 0b       	sbc	r25, r25
    ef30:	02 c0       	rjmp	.+4      	; 0xef36 <chdir+0x2a>
    ef32:	83 e2       	ldi	r24, 0x23	; 35
    ef34:	90 e0       	ldi	r25, 0x00	; 0
    ef36:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    ef3a:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    ef3e:	8f ef       	ldi	r24, 0xFF	; 255
    ef40:	9f ef       	ldi	r25, 0xFF	; 255
    ef42:	08 95       	ret
    ef44:	80 e0       	ldi	r24, 0x00	; 0
    ef46:	90 e0       	ldi	r25, 0x00	; 0
    ef48:	08 95       	ret

0000ef4a <chmod>:
    ef4a:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    ef4e:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    ef52:	42 79       	andi	r20, 0x92	; 146
    ef54:	55 27       	eor	r21, r21
    ef56:	66 27       	eor	r22, r22
    ef58:	77 27       	eor	r23, r23
    ef5a:	45 2b       	or	r20, r21
    ef5c:	46 2b       	or	r20, r22
    ef5e:	47 2b       	or	r20, r23
    ef60:	19 f0       	breq	.+6      	; 0xef68 <chmod+0x1e>
    ef62:	80 e0       	ldi	r24, 0x00	; 0
    ef64:	90 e0       	ldi	r25, 0x00	; 0
    ef66:	08 95       	ret
    ef68:	41 e0       	ldi	r20, 0x01	; 1
    ef6a:	61 e0       	ldi	r22, 0x01	; 1
    ef6c:	0e 94 d0 68 	call	0xd1a0	; 0xd1a0 <f_chmod>
    ef70:	00 97       	sbiw	r24, 0x00	; 0
    ef72:	b9 f3       	breq	.-18     	; 0xef62 <chmod+0x18>
    ef74:	84 31       	cpi	r24, 0x14	; 20
    ef76:	91 05       	cpc	r25, r1
    ef78:	40 f4       	brcc	.+16     	; 0xef8a <chmod+0x40>
    ef7a:	fc 01       	movw	r30, r24
    ef7c:	e0 5f       	subi	r30, 0xF0	; 240
    ef7e:	f8 4f       	sbci	r31, 0xF8	; 248
    ef80:	80 81       	ld	r24, Z
    ef82:	08 2e       	mov	r0, r24
    ef84:	00 0c       	add	r0, r0
    ef86:	99 0b       	sbc	r25, r25
    ef88:	02 c0       	rjmp	.+4      	; 0xef8e <chmod+0x44>
    ef8a:	83 e2       	ldi	r24, 0x23	; 35
    ef8c:	90 e0       	ldi	r25, 0x00	; 0
    ef8e:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    ef92:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    ef96:	8f ef       	ldi	r24, 0xFF	; 255
    ef98:	9f ef       	ldi	r25, 0xFF	; 255
    ef9a:	08 95       	ret

0000ef9c <getcwd>:
    ef9c:	cf 93       	push	r28
    ef9e:	df 93       	push	r29
    efa0:	d8 2f       	mov	r29, r24
    efa2:	c9 2f       	mov	r28, r25
    efa4:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    efa8:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    efac:	0e 94 2c 60 	call	0xc058	; 0xc058 <f_getcwd>
    efb0:	00 97       	sbiw	r24, 0x00	; 0
    efb2:	a1 f0       	breq	.+40     	; 0xefdc <getcwd+0x40>
    efb4:	84 31       	cpi	r24, 0x14	; 20
    efb6:	91 05       	cpc	r25, r1
    efb8:	40 f4       	brcc	.+16     	; 0xefca <getcwd+0x2e>
    efba:	fc 01       	movw	r30, r24
    efbc:	e0 5f       	subi	r30, 0xF0	; 240
    efbe:	f8 4f       	sbci	r31, 0xF8	; 248
    efc0:	80 81       	ld	r24, Z
    efc2:	08 2e       	mov	r0, r24
    efc4:	00 0c       	add	r0, r0
    efc6:	99 0b       	sbc	r25, r25
    efc8:	02 c0       	rjmp	.+4      	; 0xefce <getcwd+0x32>
    efca:	83 e2       	ldi	r24, 0x23	; 35
    efcc:	90 e0       	ldi	r25, 0x00	; 0
    efce:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    efd2:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    efd6:	80 e0       	ldi	r24, 0x00	; 0
    efd8:	90 e0       	ldi	r25, 0x00	; 0
    efda:	02 c0       	rjmp	.+4      	; 0xefe0 <getcwd+0x44>
    efdc:	8d 2f       	mov	r24, r29
    efde:	9c 2f       	mov	r25, r28
    efe0:	df 91       	pop	r29
    efe2:	cf 91       	pop	r28
    efe4:	08 95       	ret

0000efe6 <mkdir>:
    efe6:	cf 93       	push	r28
    efe8:	df 93       	push	r29
    efea:	ec 01       	movw	r28, r24
    efec:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    eff0:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    eff4:	41 15       	cp	r20, r1
    eff6:	51 05       	cpc	r21, r1
    eff8:	61 05       	cpc	r22, r1
    effa:	71 05       	cpc	r23, r1
    effc:	41 f4       	brne	.+16     	; 0xf00e <mkdir+0x28>
    effe:	ce 01       	movw	r24, r28
    f000:	0e 94 cb 66 	call	0xcd96	; 0xcd96 <f_mkdir>
    f004:	00 97       	sbiw	r24, 0x00	; 0
    f006:	39 f4       	brne	.+14     	; 0xf016 <mkdir+0x30>
    f008:	80 e0       	ldi	r24, 0x00	; 0
    f00a:	90 e0       	ldi	r25, 0x00	; 0
    f00c:	17 c0       	rjmp	.+46     	; 0xf03c <mkdir+0x56>
    f00e:	9d df       	rcall	.-198    	; 0xef4a <chmod>
    f010:	89 2b       	or	r24, r25
    f012:	a9 f3       	breq	.-22     	; 0xeffe <mkdir+0x18>
    f014:	11 c0       	rjmp	.+34     	; 0xf038 <mkdir+0x52>
    f016:	84 31       	cpi	r24, 0x14	; 20
    f018:	91 05       	cpc	r25, r1
    f01a:	40 f4       	brcc	.+16     	; 0xf02c <mkdir+0x46>
    f01c:	fc 01       	movw	r30, r24
    f01e:	e0 5f       	subi	r30, 0xF0	; 240
    f020:	f8 4f       	sbci	r31, 0xF8	; 248
    f022:	80 81       	ld	r24, Z
    f024:	08 2e       	mov	r0, r24
    f026:	00 0c       	add	r0, r0
    f028:	99 0b       	sbc	r25, r25
    f02a:	02 c0       	rjmp	.+4      	; 0xf030 <mkdir+0x4a>
    f02c:	83 e2       	ldi	r24, 0x23	; 35
    f02e:	90 e0       	ldi	r25, 0x00	; 0
    f030:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f034:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f038:	8f ef       	ldi	r24, 0xFF	; 255
    f03a:	9f ef       	ldi	r25, 0xFF	; 255
    f03c:	df 91       	pop	r29
    f03e:	cf 91       	pop	r28
    f040:	08 95       	ret

0000f042 <rename>:
    f042:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f046:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    f04a:	0e 94 bb 67 	call	0xcf76	; 0xcf76 <f_rename>
    f04e:	00 97       	sbiw	r24, 0x00	; 0
    f050:	a1 f0       	breq	.+40     	; 0xf07a <rename+0x38>
    f052:	84 31       	cpi	r24, 0x14	; 20
    f054:	91 05       	cpc	r25, r1
    f056:	40 f4       	brcc	.+16     	; 0xf068 <rename+0x26>
    f058:	fc 01       	movw	r30, r24
    f05a:	e0 5f       	subi	r30, 0xF0	; 240
    f05c:	f8 4f       	sbci	r31, 0xF8	; 248
    f05e:	80 81       	ld	r24, Z
    f060:	08 2e       	mov	r0, r24
    f062:	00 0c       	add	r0, r0
    f064:	99 0b       	sbc	r25, r25
    f066:	02 c0       	rjmp	.+4      	; 0xf06c <rename+0x2a>
    f068:	83 e2       	ldi	r24, 0x23	; 35
    f06a:	90 e0       	ldi	r25, 0x00	; 0
    f06c:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f070:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f074:	8f ef       	ldi	r24, 0xFF	; 255
    f076:	9f ef       	ldi	r25, 0xFF	; 255
    f078:	08 95       	ret
    f07a:	80 e0       	ldi	r24, 0x00	; 0
    f07c:	90 e0       	ldi	r25, 0x00	; 0
    f07e:	08 95       	ret

0000f080 <unlink>:
    f080:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f084:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    f088:	0e 94 24 66 	call	0xcc48	; 0xcc48 <f_unlink>
    f08c:	00 97       	sbiw	r24, 0x00	; 0
    f08e:	a1 f0       	breq	.+40     	; 0xf0b8 <unlink+0x38>
    f090:	84 31       	cpi	r24, 0x14	; 20
    f092:	91 05       	cpc	r25, r1
    f094:	40 f4       	brcc	.+16     	; 0xf0a6 <unlink+0x26>
    f096:	fc 01       	movw	r30, r24
    f098:	e0 5f       	subi	r30, 0xF0	; 240
    f09a:	f8 4f       	sbci	r31, 0xF8	; 248
    f09c:	80 81       	ld	r24, Z
    f09e:	08 2e       	mov	r0, r24
    f0a0:	00 0c       	add	r0, r0
    f0a2:	99 0b       	sbc	r25, r25
    f0a4:	02 c0       	rjmp	.+4      	; 0xf0aa <unlink+0x2a>
    f0a6:	83 e2       	ldi	r24, 0x23	; 35
    f0a8:	90 e0       	ldi	r25, 0x00	; 0
    f0aa:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f0ae:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f0b2:	8f ef       	ldi	r24, 0xFF	; 255
    f0b4:	9f ef       	ldi	r25, 0xFF	; 255
    f0b6:	08 95       	ret
    f0b8:	80 e0       	ldi	r24, 0x00	; 0
    f0ba:	90 e0       	ldi	r25, 0x00	; 0
    f0bc:	08 95       	ret

0000f0be <rmdir>:
    f0be:	e0 cf       	rjmp	.-64     	; 0xf080 <unlink>
    f0c0:	08 95       	ret

0000f0c2 <closedir>:
    f0c2:	0e 94 ae 64 	call	0xc95c	; 0xc95c <f_closedir>
    f0c6:	00 97       	sbiw	r24, 0x00	; 0
    f0c8:	a1 f0       	breq	.+40     	; 0xf0f2 <closedir+0x30>
    f0ca:	84 31       	cpi	r24, 0x14	; 20
    f0cc:	91 05       	cpc	r25, r1
    f0ce:	40 f4       	brcc	.+16     	; 0xf0e0 <closedir+0x1e>
    f0d0:	fc 01       	movw	r30, r24
    f0d2:	e0 5f       	subi	r30, 0xF0	; 240
    f0d4:	f8 4f       	sbci	r31, 0xF8	; 248
    f0d6:	80 81       	ld	r24, Z
    f0d8:	08 2e       	mov	r0, r24
    f0da:	00 0c       	add	r0, r0
    f0dc:	99 0b       	sbc	r25, r25
    f0de:	02 c0       	rjmp	.+4      	; 0xf0e4 <closedir+0x22>
    f0e0:	83 e2       	ldi	r24, 0x23	; 35
    f0e2:	90 e0       	ldi	r25, 0x00	; 0
    f0e4:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f0e8:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f0ec:	8f ef       	ldi	r24, 0xFF	; 255
    f0ee:	9f ef       	ldi	r25, 0xFF	; 255
    f0f0:	08 95       	ret
    f0f2:	80 e0       	ldi	r24, 0x00	; 0
    f0f4:	90 e0       	ldi	r25, 0x00	; 0
    f0f6:	08 95       	ret

0000f0f8 <opendir>:
    f0f8:	bc 01       	movw	r22, r24
    f0fa:	8d e2       	ldi	r24, 0x2D	; 45
    f0fc:	98 e1       	ldi	r25, 0x18	; 24
    f0fe:	0e 94 3d 64 	call	0xc87a	; 0xc87a <f_opendir>
    f102:	00 97       	sbiw	r24, 0x00	; 0
    f104:	a1 f0       	breq	.+40     	; 0xf12e <opendir+0x36>
    f106:	84 31       	cpi	r24, 0x14	; 20
    f108:	91 05       	cpc	r25, r1
    f10a:	40 f4       	brcc	.+16     	; 0xf11c <opendir+0x24>
    f10c:	fc 01       	movw	r30, r24
    f10e:	e0 5f       	subi	r30, 0xF0	; 240
    f110:	f8 4f       	sbci	r31, 0xF8	; 248
    f112:	80 81       	ld	r24, Z
    f114:	08 2e       	mov	r0, r24
    f116:	00 0c       	add	r0, r0
    f118:	99 0b       	sbc	r25, r25
    f11a:	02 c0       	rjmp	.+4      	; 0xf120 <opendir+0x28>
    f11c:	83 e2       	ldi	r24, 0x23	; 35
    f11e:	90 e0       	ldi	r25, 0x00	; 0
    f120:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f124:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f128:	80 e0       	ldi	r24, 0x00	; 0
    f12a:	90 e0       	ldi	r25, 0x00	; 0
    f12c:	08 95       	ret
    f12e:	8d e2       	ldi	r24, 0x2D	; 45
    f130:	98 e1       	ldi	r25, 0x18	; 24
    f132:	08 95       	ret

0000f134 <readdir>:
    f134:	a6 e1       	ldi	r26, 0x16	; 22
    f136:	b1 e0       	ldi	r27, 0x01	; 1
    f138:	e0 ea       	ldi	r30, 0xA0	; 160
    f13a:	f8 e7       	ldi	r31, 0x78	; 120
    f13c:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__prologue_saves__+0x1c>
    f140:	10 92 20 18 	sts	0x1820, r1	; 0x801820 <_de>
    f144:	be 01       	movw	r22, r28
    f146:	6f 5f       	subi	r22, 0xFF	; 255
    f148:	7f 4f       	sbci	r23, 0xFF	; 255
    f14a:	0e 94 c3 64 	call	0xc986	; 0xc986 <f_readdir>
    f14e:	00 97       	sbiw	r24, 0x00	; 0
    f150:	a1 f0       	breq	.+40     	; 0xf17a <readdir+0x46>
    f152:	84 31       	cpi	r24, 0x14	; 20
    f154:	91 05       	cpc	r25, r1
    f156:	40 f4       	brcc	.+16     	; 0xf168 <readdir+0x34>
    f158:	fc 01       	movw	r30, r24
    f15a:	e0 5f       	subi	r30, 0xF0	; 240
    f15c:	f8 4f       	sbci	r31, 0xF8	; 248
    f15e:	80 81       	ld	r24, Z
    f160:	08 2e       	mov	r0, r24
    f162:	00 0c       	add	r0, r0
    f164:	99 0b       	sbc	r25, r25
    f166:	02 c0       	rjmp	.+4      	; 0xf16c <readdir+0x38>
    f168:	83 e2       	ldi	r24, 0x23	; 35
    f16a:	90 e0       	ldi	r25, 0x00	; 0
    f16c:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f170:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f174:	80 e0       	ldi	r24, 0x00	; 0
    f176:	90 e0       	ldi	r25, 0x00	; 0
    f178:	16 c0       	rjmp	.+44     	; 0xf1a6 <readdir+0x72>
    f17a:	be 01       	movw	r22, r28
    f17c:	69 5e       	subi	r22, 0xE9	; 233
    f17e:	7f 4f       	sbci	r23, 0xFF	; 255
    f180:	fb 01       	movw	r30, r22
    f182:	01 90       	ld	r0, Z+
    f184:	00 20       	and	r0, r0
    f186:	e9 f7       	brne	.-6      	; 0xf182 <readdir+0x4e>
    f188:	31 97       	sbiw	r30, 0x01	; 1
    f18a:	8f 01       	movw	r16, r30
    f18c:	06 1b       	sub	r16, r22
    f18e:	17 0b       	sbc	r17, r23
    f190:	a8 01       	movw	r20, r16
    f192:	80 e2       	ldi	r24, 0x20	; 32
    f194:	98 e1       	ldi	r25, 0x18	; 24
    f196:	0e 94 ac 31 	call	0x6358	; 0x6358 <strncpy>
    f19a:	f8 01       	movw	r30, r16
    f19c:	e0 5e       	subi	r30, 0xE0	; 224
    f19e:	f7 4e       	sbci	r31, 0xE7	; 231
    f1a0:	10 82       	st	Z, r1
    f1a2:	80 e2       	ldi	r24, 0x20	; 32
    f1a4:	98 e1       	ldi	r25, 0x18	; 24
    f1a6:	ca 5e       	subi	r28, 0xEA	; 234
    f1a8:	de 4f       	sbci	r29, 0xFE	; 254
    f1aa:	e4 e0       	ldi	r30, 0x04	; 4
    f1ac:	0c 94 58 e5 	jmp	0x1cab0	; 0x1cab0 <__epilogue_restores__+0x1c>

0000f1b0 <perror>:
    f1b0:	e0 91 b5 1b 	lds	r30, 0x1BB5	; 0x801bb5 <errno>
    f1b4:	f0 91 b6 1b 	lds	r31, 0x1BB6	; 0x801bb6 <errno+0x1>
    f1b8:	e3 32       	cpi	r30, 0x23	; 35
    f1ba:	f1 05       	cpc	r31, r1
    f1bc:	38 f4       	brcc	.+14     	; 0xf1cc <perror+0x1c>
    f1be:	ee 0f       	add	r30, r30
    f1c0:	ff 1f       	adc	r31, r31
    f1c2:	e3 5c       	subi	r30, 0xC3	; 195
    f1c4:	fe 4f       	sbci	r31, 0xFE	; 254
    f1c6:	20 81       	ld	r18, Z
    f1c8:	31 81       	ldd	r19, Z+1	; 0x01
    f1ca:	04 c0       	rjmp	.+8      	; 0xf1d4 <perror+0x24>
    f1cc:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <sys_errlist+0x46>
    f1d0:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <sys_errlist+0x47>
    f1d4:	00 97       	sbiw	r24, 0x00	; 0
    f1d6:	c1 f0       	breq	.+48     	; 0xf208 <perror+0x58>
    f1d8:	fc 01       	movw	r30, r24
    f1da:	40 81       	ld	r20, Z
    f1dc:	44 23       	and	r20, r20
    f1de:	a1 f0       	breq	.+40     	; 0xf208 <perror+0x58>
    f1e0:	3f 93       	push	r19
    f1e2:	2f 93       	push	r18
    f1e4:	9f 93       	push	r25
    f1e6:	8f 93       	push	r24
    f1e8:	8d ed       	ldi	r24, 0xDD	; 221
    f1ea:	9b e0       	ldi	r25, 0x0B	; 11
    f1ec:	1f 92       	push	r1
    f1ee:	9f 93       	push	r25
    f1f0:	8f 93       	push	r24
    f1f2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    f1f6:	8d b7       	in	r24, 0x3d	; 61
    f1f8:	9e b7       	in	r25, 0x3e	; 62
    f1fa:	07 96       	adiw	r24, 0x07	; 7
    f1fc:	0f b6       	in	r0, 0x3f	; 63
    f1fe:	f8 94       	cli
    f200:	9e bf       	out	0x3e, r25	; 62
    f202:	0f be       	out	0x3f, r0	; 63
    f204:	8d bf       	out	0x3d, r24	; 61
    f206:	08 95       	ret
    f208:	3f 93       	push	r19
    f20a:	2f 93       	push	r18
    f20c:	89 ed       	ldi	r24, 0xD9	; 217
    f20e:	9b e0       	ldi	r25, 0x0B	; 11
    f210:	1f 92       	push	r1
    f212:	9f 93       	push	r25
    f214:	8f 93       	push	r24
    f216:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    f21a:	0f 90       	pop	r0
    f21c:	0f 90       	pop	r0
    f21e:	0f 90       	pop	r0
    f220:	0f 90       	pop	r0
    f222:	0f 90       	pop	r0
    f224:	08 95       	ret

0000f226 <fdevopen>:
    f226:	0f 93       	push	r16
    f228:	1f 93       	push	r17
    f22a:	cf 93       	push	r28
    f22c:	df 93       	push	r29
    f22e:	00 97       	sbiw	r24, 0x00	; 0
    f230:	31 f4       	brne	.+12     	; 0xf23e <fdevopen+0x18>
    f232:	61 15       	cp	r22, r1
    f234:	71 05       	cpc	r23, r1
    f236:	19 f4       	brne	.+6      	; 0xf23e <fdevopen+0x18>
    f238:	80 e0       	ldi	r24, 0x00	; 0
    f23a:	90 e0       	ldi	r25, 0x00	; 0
    f23c:	3a c0       	rjmp	.+116    	; 0xf2b2 <fdevopen+0x8c>
    f23e:	8b 01       	movw	r16, r22
    f240:	ec 01       	movw	r28, r24
    f242:	6e e0       	ldi	r22, 0x0E	; 14
    f244:	70 e0       	ldi	r23, 0x00	; 0
    f246:	81 e0       	ldi	r24, 0x01	; 1
    f248:	90 e0       	ldi	r25, 0x00	; 0
    f24a:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
    f24e:	fc 01       	movw	r30, r24
    f250:	89 2b       	or	r24, r25
    f252:	91 f3       	breq	.-28     	; 0xf238 <fdevopen+0x12>
    f254:	80 e8       	ldi	r24, 0x80	; 128
    f256:	83 83       	std	Z+3, r24	; 0x03
    f258:	01 15       	cp	r16, r1
    f25a:	11 05       	cpc	r17, r1
    f25c:	71 f0       	breq	.+28     	; 0xf27a <fdevopen+0x54>
    f25e:	13 87       	std	Z+11, r17	; 0x0b
    f260:	02 87       	std	Z+10, r16	; 0x0a
    f262:	81 e8       	ldi	r24, 0x81	; 129
    f264:	83 83       	std	Z+3, r24	; 0x03
    f266:	80 91 b7 1b 	lds	r24, 0x1BB7	; 0x801bb7 <__iob>
    f26a:	90 91 b8 1b 	lds	r25, 0x1BB8	; 0x801bb8 <__iob+0x1>
    f26e:	89 2b       	or	r24, r25
    f270:	21 f4       	brne	.+8      	; 0xf27a <fdevopen+0x54>
    f272:	f0 93 b8 1b 	sts	0x1BB8, r31	; 0x801bb8 <__iob+0x1>
    f276:	e0 93 b7 1b 	sts	0x1BB7, r30	; 0x801bb7 <__iob>
    f27a:	20 97       	sbiw	r28, 0x00	; 0
    f27c:	c9 f0       	breq	.+50     	; 0xf2b0 <fdevopen+0x8a>
    f27e:	d1 87       	std	Z+9, r29	; 0x09
    f280:	c0 87       	std	Z+8, r28	; 0x08
    f282:	83 81       	ldd	r24, Z+3	; 0x03
    f284:	82 60       	ori	r24, 0x02	; 2
    f286:	83 83       	std	Z+3, r24	; 0x03
    f288:	80 91 b9 1b 	lds	r24, 0x1BB9	; 0x801bb9 <__iob+0x2>
    f28c:	90 91 ba 1b 	lds	r25, 0x1BBA	; 0x801bba <__iob+0x3>
    f290:	89 2b       	or	r24, r25
    f292:	21 f4       	brne	.+8      	; 0xf29c <fdevopen+0x76>
    f294:	f0 93 ba 1b 	sts	0x1BBA, r31	; 0x801bba <__iob+0x3>
    f298:	e0 93 b9 1b 	sts	0x1BB9, r30	; 0x801bb9 <__iob+0x2>
    f29c:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <__iob+0x4>
    f2a0:	90 91 bc 1b 	lds	r25, 0x1BBC	; 0x801bbc <__iob+0x5>
    f2a4:	89 2b       	or	r24, r25
    f2a6:	21 f4       	brne	.+8      	; 0xf2b0 <fdevopen+0x8a>
    f2a8:	f0 93 bc 1b 	sts	0x1BBC, r31	; 0x801bbc <__iob+0x5>
    f2ac:	e0 93 bb 1b 	sts	0x1BBB, r30	; 0x801bbb <__iob+0x4>
    f2b0:	cf 01       	movw	r24, r30
    f2b2:	df 91       	pop	r29
    f2b4:	cf 91       	pop	r28
    f2b6:	1f 91       	pop	r17
    f2b8:	0f 91       	pop	r16
    f2ba:	08 95       	ret

0000f2bc <fat_time_to_unix>:
    f2bc:	a6 e1       	ldi	r26, 0x16	; 22
    f2be:	b0 e0       	ldi	r27, 0x00	; 0
    f2c0:	e4 e6       	ldi	r30, 0x64	; 100
    f2c2:	f9 e7       	ldi	r31, 0x79	; 121
    f2c4:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    f2c8:	fe 01       	movw	r30, r28
    f2ca:	31 96       	adiw	r30, 0x01	; 1
    f2cc:	26 e1       	ldi	r18, 0x16	; 22
    f2ce:	df 01       	movw	r26, r30
    f2d0:	1d 92       	st	X+, r1
    f2d2:	2a 95       	dec	r18
    f2d4:	e9 f7       	brne	.-6      	; 0xf2d0 <fat_time_to_unix+0x14>
    f2d6:	9b 01       	movw	r18, r22
    f2d8:	22 0f       	add	r18, r18
    f2da:	33 1f       	adc	r19, r19
    f2dc:	2e 73       	andi	r18, 0x3E	; 62
    f2de:	33 27       	eor	r19, r19
    f2e0:	3a 83       	std	Y+2, r19	; 0x02
    f2e2:	29 83       	std	Y+1, r18	; 0x01
    f2e4:	9b 01       	movw	r18, r22
    f2e6:	55 e0       	ldi	r21, 0x05	; 5
    f2e8:	36 95       	lsr	r19
    f2ea:	27 95       	ror	r18
    f2ec:	5a 95       	dec	r21
    f2ee:	e1 f7       	brne	.-8      	; 0xf2e8 <fat_time_to_unix+0x2c>
    f2f0:	2f 73       	andi	r18, 0x3F	; 63
    f2f2:	33 27       	eor	r19, r19
    f2f4:	3c 83       	std	Y+4, r19	; 0x04
    f2f6:	2b 83       	std	Y+3, r18	; 0x03
    f2f8:	27 2f       	mov	r18, r23
    f2fa:	26 95       	lsr	r18
    f2fc:	26 95       	lsr	r18
    f2fe:	26 95       	lsr	r18
    f300:	2d 83       	std	Y+5, r18	; 0x05
    f302:	1e 82       	std	Y+6, r1	; 0x06
    f304:	9c 01       	movw	r18, r24
    f306:	2f 71       	andi	r18, 0x1F	; 31
    f308:	33 27       	eor	r19, r19
    f30a:	38 87       	std	Y+8, r19	; 0x08
    f30c:	2f 83       	std	Y+7, r18	; 0x07
    f30e:	9c 01       	movw	r18, r24
    f310:	65 e0       	ldi	r22, 0x05	; 5
    f312:	36 95       	lsr	r19
    f314:	27 95       	ror	r18
    f316:	6a 95       	dec	r22
    f318:	e1 f7       	brne	.-8      	; 0xf312 <fat_time_to_unix+0x56>
    f31a:	2f 70       	andi	r18, 0x0F	; 15
    f31c:	33 27       	eor	r19, r19
    f31e:	21 50       	subi	r18, 0x01	; 1
    f320:	31 09       	sbc	r19, r1
    f322:	3a 87       	std	Y+10, r19	; 0x0a
    f324:	29 87       	std	Y+9, r18	; 0x09
    f326:	9c 01       	movw	r18, r24
    f328:	23 2f       	mov	r18, r19
    f32a:	33 27       	eor	r19, r19
    f32c:	26 95       	lsr	r18
    f32e:	20 5b       	subi	r18, 0xB0	; 176
    f330:	3f 4f       	sbci	r19, 0xFF	; 255
    f332:	3c 87       	std	Y+12, r19	; 0x0c
    f334:	2b 87       	std	Y+11, r18	; 0x0b
    f336:	cf 01       	movw	r24, r30
    f338:	0e 94 ca 3a 	call	0x7594	; 0x7594 <timegm>
    f33c:	66 96       	adiw	r28, 0x16	; 22
    f33e:	e2 e0       	ldi	r30, 0x02	; 2
    f340:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

0000f344 <stat>:
    f344:	a6 e1       	ldi	r26, 0x16	; 22
    f346:	b1 e0       	ldi	r27, 0x01	; 1
    f348:	e8 ea       	ldi	r30, 0xA8	; 168
    f34a:	f9 e7       	ldi	r31, 0x79	; 121
    f34c:	0c 94 3a e5 	jmp	0x1ca74	; 0x1ca74 <__prologue_saves__+0x18>
    f350:	7c 01       	movw	r14, r24
    f352:	8b 01       	movw	r16, r22
    f354:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f358:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    f35c:	68 e3       	ldi	r22, 0x38	; 56
    f35e:	78 e0       	ldi	r23, 0x08	; 8
    f360:	0e 94 15 32 	call	0x642a	; 0x642a <strcmp>
    f364:	89 2b       	or	r24, r25
    f366:	39 f0       	breq	.+14     	; 0xf376 <stat+0x32>
    f368:	66 e4       	ldi	r22, 0x46	; 70
    f36a:	72 e1       	ldi	r23, 0x12	; 18
    f36c:	c7 01       	movw	r24, r14
    f36e:	0e 94 15 32 	call	0x642a	; 0x642a <strcmp>
    f372:	89 2b       	or	r24, r25
    f374:	d1 f4       	brne	.+52     	; 0xf3aa <stat+0x66>
    f376:	f8 01       	movw	r30, r16
    f378:	14 a2       	std	Z+36, r1	; 0x24
    f37a:	15 a2       	std	Z+37, r1	; 0x25
    f37c:	16 a2       	std	Z+38, r1	; 0x26
    f37e:	17 a2       	std	Z+39, r1	; 0x27
    f380:	10 a6       	std	Z+40, r1	; 0x28
    f382:	11 a6       	std	Z+41, r1	; 0x29
    f384:	12 a6       	std	Z+42, r1	; 0x2a
    f386:	13 a6       	std	Z+43, r1	; 0x2b
    f388:	14 a6       	std	Z+44, r1	; 0x2c
    f38a:	15 a6       	std	Z+45, r1	; 0x2d
    f38c:	16 a6       	std	Z+46, r1	; 0x2e
    f38e:	17 a6       	std	Z+47, r1	; 0x2f
    f390:	11 8a       	std	Z+17, r1	; 0x11
    f392:	10 8a       	std	Z+16, r1	; 0x10
    f394:	13 8a       	std	Z+19, r1	; 0x13
    f396:	12 8a       	std	Z+18, r1	; 0x12
    f398:	10 8e       	std	Z+24, r1	; 0x18
    f39a:	11 8e       	std	Z+25, r1	; 0x19
    f39c:	12 8e       	std	Z+26, r1	; 0x1a
    f39e:	13 8e       	std	Z+27, r1	; 0x1b
    f3a0:	80 e0       	ldi	r24, 0x00	; 0
    f3a2:	90 e4       	ldi	r25, 0x40	; 64
    f3a4:	a0 e0       	ldi	r26, 0x00	; 0
    f3a6:	b0 e0       	ldi	r27, 0x00	; 0
    f3a8:	4e c0       	rjmp	.+156    	; 0xf446 <stat+0x102>
    f3aa:	be 01       	movw	r22, r28
    f3ac:	6f 5f       	subi	r22, 0xFF	; 255
    f3ae:	7f 4f       	sbci	r23, 0xFF	; 255
    f3b0:	c7 01       	movw	r24, r14
    f3b2:	0e 94 07 65 	call	0xca0e	; 0xca0e <f_stat>
    f3b6:	00 97       	sbiw	r24, 0x00	; 0
    f3b8:	a1 f0       	breq	.+40     	; 0xf3e2 <stat+0x9e>
    f3ba:	84 31       	cpi	r24, 0x14	; 20
    f3bc:	91 05       	cpc	r25, r1
    f3be:	40 f4       	brcc	.+16     	; 0xf3d0 <stat+0x8c>
    f3c0:	fc 01       	movw	r30, r24
    f3c2:	e0 5f       	subi	r30, 0xF0	; 240
    f3c4:	f8 4f       	sbci	r31, 0xF8	; 248
    f3c6:	80 81       	ld	r24, Z
    f3c8:	08 2e       	mov	r0, r24
    f3ca:	00 0c       	add	r0, r0
    f3cc:	99 0b       	sbc	r25, r25
    f3ce:	02 c0       	rjmp	.+4      	; 0xf3d4 <stat+0x90>
    f3d0:	83 e2       	ldi	r24, 0x23	; 35
    f3d2:	90 e0       	ldi	r25, 0x00	; 0
    f3d4:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f3d8:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f3dc:	8f ef       	ldi	r24, 0xFF	; 255
    f3de:	9f ef       	ldi	r25, 0xFF	; 255
    f3e0:	38 c0       	rjmp	.+112    	; 0xf452 <stat+0x10e>
    f3e2:	89 81       	ldd	r24, Y+1	; 0x01
    f3e4:	9a 81       	ldd	r25, Y+2	; 0x02
    f3e6:	ab 81       	ldd	r26, Y+3	; 0x03
    f3e8:	bc 81       	ldd	r27, Y+4	; 0x04
    f3ea:	f8 01       	movw	r30, r16
    f3ec:	80 8f       	std	Z+24, r24	; 0x18
    f3ee:	91 8f       	std	Z+25, r25	; 0x19
    f3f0:	a2 8f       	std	Z+26, r26	; 0x1a
    f3f2:	b3 8f       	std	Z+27, r27	; 0x1b
    f3f4:	6f 81       	ldd	r22, Y+7	; 0x07
    f3f6:	78 85       	ldd	r23, Y+8	; 0x08
    f3f8:	8d 81       	ldd	r24, Y+5	; 0x05
    f3fa:	9e 81       	ldd	r25, Y+6	; 0x06
    f3fc:	5f df       	rcall	.-322    	; 0xf2bc <fat_time_to_unix>
    f3fe:	f8 01       	movw	r30, r16
    f400:	64 a3       	std	Z+36, r22	; 0x24
    f402:	75 a3       	std	Z+37, r23	; 0x25
    f404:	86 a3       	std	Z+38, r24	; 0x26
    f406:	97 a3       	std	Z+39, r25	; 0x27
    f408:	60 a7       	std	Z+40, r22	; 0x28
    f40a:	71 a7       	std	Z+41, r23	; 0x29
    f40c:	82 a7       	std	Z+42, r24	; 0x2a
    f40e:	93 a7       	std	Z+43, r25	; 0x2b
    f410:	64 a7       	std	Z+44, r22	; 0x2c
    f412:	75 a7       	std	Z+45, r23	; 0x2d
    f414:	86 a7       	std	Z+46, r24	; 0x2e
    f416:	97 a7       	std	Z+47, r25	; 0x2f
    f418:	29 85       	ldd	r18, Y+9	; 0x09
    f41a:	20 fd       	sbrc	r18, 0
    f41c:	03 c0       	rjmp	.+6      	; 0xf424 <stat+0xe0>
    f41e:	8f ef       	ldi	r24, 0xFF	; 255
    f420:	91 e0       	ldi	r25, 0x01	; 1
    f422:	02 c0       	rjmp	.+4      	; 0xf428 <stat+0xe4>
    f424:	8d e6       	ldi	r24, 0x6D	; 109
    f426:	91 e0       	ldi	r25, 0x01	; 1
    f428:	48 ee       	ldi	r20, 0xE8	; 232
    f42a:	53 e0       	ldi	r21, 0x03	; 3
    f42c:	f8 01       	movw	r30, r16
    f42e:	51 8b       	std	Z+17, r21	; 0x11
    f430:	40 8b       	std	Z+16, r20	; 0x10
    f432:	53 8b       	std	Z+19, r21	; 0x13
    f434:	42 8b       	std	Z+18, r20	; 0x12
    f436:	24 ff       	sbrs	r18, 4
    f438:	02 c0       	rjmp	.+4      	; 0xf43e <stat+0xfa>
    f43a:	90 64       	ori	r25, 0x40	; 64
    f43c:	01 c0       	rjmp	.+2      	; 0xf440 <stat+0xfc>
    f43e:	90 68       	ori	r25, 0x80	; 128
    f440:	a0 e0       	ldi	r26, 0x00	; 0
    f442:	b0 e0       	ldi	r27, 0x00	; 0
    f444:	f8 01       	movw	r30, r16
    f446:	80 87       	std	Z+8, r24	; 0x08
    f448:	91 87       	std	Z+9, r25	; 0x09
    f44a:	a2 87       	std	Z+10, r26	; 0x0a
    f44c:	b3 87       	std	Z+11, r27	; 0x0b
    f44e:	80 e0       	ldi	r24, 0x00	; 0
    f450:	90 e0       	ldi	r25, 0x00	; 0
    f452:	ca 5e       	subi	r28, 0xEA	; 234
    f454:	de 4f       	sbci	r29, 0xFE	; 254
    f456:	e6 e0       	ldi	r30, 0x06	; 6
    f458:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

0000f45c <unix_time_to_fat>:
    f45c:	a4 e0       	ldi	r26, 0x04	; 4
    f45e:	b0 e0       	ldi	r27, 0x00	; 0
    f460:	e4 e3       	ldi	r30, 0x34	; 52
    f462:	fa e7       	ldi	r31, 0x7A	; 122
    f464:	0c 94 3a e5 	jmp	0x1ca74	; 0x1ca74 <__prologue_saves__+0x18>
    f468:	69 83       	std	Y+1, r22	; 0x01
    f46a:	7a 83       	std	Y+2, r23	; 0x02
    f46c:	8b 83       	std	Y+3, r24	; 0x03
    f46e:	9c 83       	std	Y+4, r25	; 0x04
    f470:	7a 01       	movw	r14, r20
    f472:	89 01       	movw	r16, r18
    f474:	ce 01       	movw	r24, r28
    f476:	01 96       	adiw	r24, 0x01	; 1
    f478:	0e 94 0a 38 	call	0x7014	; 0x7014 <gmtime>
    f47c:	fc 01       	movw	r30, r24
    f47e:	22 85       	ldd	r18, Z+10	; 0x0a
    f480:	33 85       	ldd	r19, Z+11	; 0x0b
    f482:	20 55       	subi	r18, 0x50	; 80
    f484:	31 09       	sbc	r19, r1
    f486:	c9 01       	movw	r24, r18
    f488:	98 2f       	mov	r25, r24
    f48a:	88 27       	eor	r24, r24
    f48c:	99 0f       	add	r25, r25
    f48e:	20 85       	ldd	r18, Z+8	; 0x08
    f490:	31 85       	ldd	r19, Z+9	; 0x09
    f492:	2f 5f       	subi	r18, 0xFF	; 255
    f494:	3f 4f       	sbci	r19, 0xFF	; 255
    f496:	45 e0       	ldi	r20, 0x05	; 5
    f498:	22 0f       	add	r18, r18
    f49a:	33 1f       	adc	r19, r19
    f49c:	4a 95       	dec	r20
    f49e:	e1 f7       	brne	.-8      	; 0xf498 <unix_time_to_fat+0x3c>
    f4a0:	28 2b       	or	r18, r24
    f4a2:	39 2b       	or	r19, r25
    f4a4:	86 81       	ldd	r24, Z+6	; 0x06
    f4a6:	97 81       	ldd	r25, Z+7	; 0x07
    f4a8:	28 2b       	or	r18, r24
    f4aa:	39 2b       	or	r19, r25
    f4ac:	d7 01       	movw	r26, r14
    f4ae:	2d 93       	st	X+, r18
    f4b0:	3c 93       	st	X, r19
    f4b2:	84 81       	ldd	r24, Z+4	; 0x04
    f4b4:	20 e0       	ldi	r18, 0x00	; 0
    f4b6:	30 e0       	ldi	r19, 0x00	; 0
    f4b8:	38 2f       	mov	r19, r24
    f4ba:	33 0f       	add	r19, r19
    f4bc:	33 0f       	add	r19, r19
    f4be:	33 0f       	add	r19, r19
    f4c0:	82 81       	ldd	r24, Z+2	; 0x02
    f4c2:	93 81       	ldd	r25, Z+3	; 0x03
    f4c4:	55 e0       	ldi	r21, 0x05	; 5
    f4c6:	88 0f       	add	r24, r24
    f4c8:	99 1f       	adc	r25, r25
    f4ca:	5a 95       	dec	r21
    f4cc:	e1 f7       	brne	.-8      	; 0xf4c6 <unix_time_to_fat+0x6a>
    f4ce:	82 2b       	or	r24, r18
    f4d0:	93 2b       	or	r25, r19
    f4d2:	20 81       	ld	r18, Z
    f4d4:	31 81       	ldd	r19, Z+1	; 0x01
    f4d6:	36 95       	lsr	r19
    f4d8:	27 95       	ror	r18
    f4da:	82 2b       	or	r24, r18
    f4dc:	93 2b       	or	r25, r19
    f4de:	f8 01       	movw	r30, r16
    f4e0:	91 83       	std	Z+1, r25	; 0x01
    f4e2:	80 83       	st	Z, r24
    f4e4:	24 96       	adiw	r28, 0x04	; 4
    f4e6:	e6 e0       	ldi	r30, 0x06	; 6
    f4e8:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

0000f4ec <utime>:
    f4ec:	aa e1       	ldi	r26, 0x1A	; 26
    f4ee:	b1 e0       	ldi	r27, 0x01	; 1
    f4f0:	ec e7       	ldi	r30, 0x7C	; 124
    f4f2:	fa e7       	ldi	r31, 0x7A	; 122
    f4f4:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__prologue_saves__+0x1c>
    f4f8:	8c 01       	movw	r16, r24
    f4fa:	61 15       	cp	r22, r1
    f4fc:	71 05       	cpc	r23, r1
    f4fe:	31 f0       	breq	.+12     	; 0xf50c <utime+0x20>
    f500:	fb 01       	movw	r30, r22
    f502:	64 81       	ldd	r22, Z+4	; 0x04
    f504:	75 81       	ldd	r23, Z+5	; 0x05
    f506:	86 81       	ldd	r24, Z+6	; 0x06
    f508:	97 81       	ldd	r25, Z+7	; 0x07
    f50a:	04 c0       	rjmp	.+8      	; 0xf514 <utime+0x28>
    f50c:	80 e0       	ldi	r24, 0x00	; 0
    f50e:	90 e0       	ldi	r25, 0x00	; 0
    f510:	0e 94 65 38 	call	0x70ca	; 0x70ca <time>
    f514:	9e 01       	movw	r18, r28
    f516:	29 5e       	subi	r18, 0xE9	; 233
    f518:	3e 4f       	sbci	r19, 0xFE	; 254
    f51a:	ae 01       	movw	r20, r28
    f51c:	47 5e       	subi	r20, 0xE7	; 231
    f51e:	5e 4f       	sbci	r21, 0xFE	; 254
    f520:	9d df       	rcall	.-198    	; 0xf45c <unix_time_to_fat>
    f522:	c7 5e       	subi	r28, 0xE7	; 231
    f524:	de 4f       	sbci	r29, 0xFE	; 254
    f526:	88 81       	ld	r24, Y
    f528:	99 81       	ldd	r25, Y+1	; 0x01
    f52a:	c9 51       	subi	r28, 0x19	; 25
    f52c:	d1 40       	sbci	r29, 0x01	; 1
    f52e:	9e 83       	std	Y+6, r25	; 0x06
    f530:	8d 83       	std	Y+5, r24	; 0x05
    f532:	c9 5e       	subi	r28, 0xE9	; 233
    f534:	de 4f       	sbci	r29, 0xFE	; 254
    f536:	88 81       	ld	r24, Y
    f538:	99 81       	ldd	r25, Y+1	; 0x01
    f53a:	c7 51       	subi	r28, 0x17	; 23
    f53c:	d1 40       	sbci	r29, 0x01	; 1
    f53e:	98 87       	std	Y+8, r25	; 0x08
    f540:	8f 83       	std	Y+7, r24	; 0x07
    f542:	be 01       	movw	r22, r28
    f544:	6f 5f       	subi	r22, 0xFF	; 255
    f546:	7f 4f       	sbci	r23, 0xFF	; 255
    f548:	c8 01       	movw	r24, r16
    f54a:	0e 94 1d 69 	call	0xd23a	; 0xd23a <f_utime>
    f54e:	84 31       	cpi	r24, 0x14	; 20
    f550:	91 05       	cpc	r25, r1
    f552:	40 f4       	brcc	.+16     	; 0xf564 <utime+0x78>
    f554:	fc 01       	movw	r30, r24
    f556:	e0 5f       	subi	r30, 0xF0	; 240
    f558:	f8 4f       	sbci	r31, 0xF8	; 248
    f55a:	80 81       	ld	r24, Z
    f55c:	08 2e       	mov	r0, r24
    f55e:	00 0c       	add	r0, r0
    f560:	99 0b       	sbc	r25, r25
    f562:	02 c0       	rjmp	.+4      	; 0xf568 <utime+0x7c>
    f564:	83 e2       	ldi	r24, 0x23	; 35
    f566:	90 e0       	ldi	r25, 0x00	; 0
    f568:	c6 5e       	subi	r28, 0xE6	; 230
    f56a:	de 4f       	sbci	r29, 0xFE	; 254
    f56c:	e4 e0       	ldi	r30, 0x04	; 4
    f56e:	0c 94 58 e5 	jmp	0x1cab0	; 0x1cab0 <__epilogue_restores__+0x1c>

0000f572 <fileno_to_fatfs>:
    f572:	83 30       	cpi	r24, 0x03	; 3
    f574:	91 05       	cpc	r25, r1
    f576:	48 f4       	brcc	.+18     	; 0xf58a <fileno_to_fatfs+0x18>
    f578:	89 e0       	ldi	r24, 0x09	; 9
    f57a:	90 e0       	ldi	r25, 0x00	; 0
    f57c:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f580:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f584:	80 e0       	ldi	r24, 0x00	; 0
    f586:	90 e0       	ldi	r25, 0x00	; 0
    f588:	08 95       	ret
    f58a:	78 dc       	rcall	.-1808   	; 0xee7c <fileno_to_stream>
    f58c:	00 97       	sbiw	r24, 0x00	; 0
    f58e:	d1 f3       	breq	.-12     	; 0xf584 <fileno_to_fatfs+0x12>
    f590:	fc 01       	movw	r30, r24
    f592:	84 85       	ldd	r24, Z+12	; 0x0c
    f594:	95 85       	ldd	r25, Z+13	; 0x0d
    f596:	00 97       	sbiw	r24, 0x00	; 0
    f598:	79 f3       	breq	.-34     	; 0xf578 <fileno_to_fatfs+0x6>
    f59a:	08 95       	ret

0000f59c <ftell>:
    f59c:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f5a0:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    f5a4:	4f dc       	rcall	.-1890   	; 0xee44 <fileno>
    f5a6:	83 30       	cpi	r24, 0x03	; 3
    f5a8:	91 05       	cpc	r25, r1
    f5aa:	48 f0       	brcs	.+18     	; 0xf5be <ftell+0x22>
    f5ac:	e2 df       	rcall	.-60     	; 0xf572 <fileno_to_fatfs>
    f5ae:	00 97       	sbiw	r24, 0x00	; 0
    f5b0:	51 f4       	brne	.+20     	; 0xf5c6 <ftell+0x2a>
    f5b2:	89 e0       	ldi	r24, 0x09	; 9
    f5b4:	90 e0       	ldi	r25, 0x00	; 0
    f5b6:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f5ba:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f5be:	6f ef       	ldi	r22, 0xFF	; 255
    f5c0:	7f ef       	ldi	r23, 0xFF	; 255
    f5c2:	cb 01       	movw	r24, r22
    f5c4:	08 95       	ret
    f5c6:	fc 01       	movw	r30, r24
    f5c8:	60 89       	ldd	r22, Z+16	; 0x10
    f5ca:	71 89       	ldd	r23, Z+17	; 0x11
    f5cc:	82 89       	ldd	r24, Z+18	; 0x12
    f5ce:	93 89       	ldd	r25, Z+19	; 0x13
    f5d0:	08 95       	ret

0000f5d2 <lseek>:
    f5d2:	a0 e0       	ldi	r26, 0x00	; 0
    f5d4:	b0 e0       	ldi	r27, 0x00	; 0
    f5d6:	ef ee       	ldi	r30, 0xEF	; 239
    f5d8:	fa e7       	ldi	r31, 0x7A	; 122
    f5da:	0c 94 36 e5 	jmp	0x1ca6c	; 0x1ca6c <__prologue_saves__+0x10>
    f5de:	5c 01       	movw	r10, r24
    f5e0:	6a 01       	movw	r12, r20
    f5e2:	7b 01       	movw	r14, r22
    f5e4:	89 01       	movw	r16, r18
    f5e6:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f5ea:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    f5ee:	c1 df       	rcall	.-126    	; 0xf572 <fileno_to_fatfs>
    f5f0:	ec 01       	movw	r28, r24
    f5f2:	89 2b       	or	r24, r25
    f5f4:	19 f4       	brne	.+6      	; 0xf5fc <lseek+0x2a>
    f5f6:	88 e1       	ldi	r24, 0x18	; 24
    f5f8:	90 e0       	ldi	r25, 0x00	; 0
    f5fa:	26 c0       	rjmp	.+76     	; 0xf648 <lseek+0x76>
    f5fc:	83 e0       	ldi	r24, 0x03	; 3
    f5fe:	a8 16       	cp	r10, r24
    f600:	b1 04       	cpc	r11, r1
    f602:	d0 f1       	brcs	.+116    	; 0xf678 <lseek+0xa6>
    f604:	c5 01       	movw	r24, r10
    f606:	3a dc       	rcall	.-1932   	; 0xee7c <fileno_to_stream>
    f608:	fc 01       	movw	r30, r24
    f60a:	93 81       	ldd	r25, Z+3	; 0x03
    f60c:	90 64       	ori	r25, 0x40	; 64
    f60e:	93 83       	std	Z+3, r25	; 0x03
    f610:	02 30       	cpi	r16, 0x02	; 2
    f612:	11 05       	cpc	r17, r1
    f614:	a9 f5       	brne	.+106    	; 0xf680 <lseek+0xae>
    f616:	8a 85       	ldd	r24, Y+10	; 0x0a
    f618:	9b 85       	ldd	r25, Y+11	; 0x0b
    f61a:	ac 85       	ldd	r26, Y+12	; 0x0c
    f61c:	bd 85       	ldd	r27, Y+13	; 0x0d
    f61e:	c8 0e       	add	r12, r24
    f620:	d9 1e       	adc	r13, r25
    f622:	ea 1e       	adc	r14, r26
    f624:	fb 1e       	adc	r15, r27
    f626:	b7 01       	movw	r22, r14
    f628:	a6 01       	movw	r20, r12
    f62a:	ce 01       	movw	r24, r28
    f62c:	0e 94 62 61 	call	0xc2c4	; 0xc2c4 <f_lseek>
    f630:	00 97       	sbiw	r24, 0x00	; 0
    f632:	79 f0       	breq	.+30     	; 0xf652 <lseek+0x80>
    f634:	84 31       	cpi	r24, 0x14	; 20
    f636:	91 05       	cpc	r25, r1
    f638:	58 f5       	brcc	.+86     	; 0xf690 <lseek+0xbe>
    f63a:	fc 01       	movw	r30, r24
    f63c:	e0 5f       	subi	r30, 0xF0	; 240
    f63e:	f8 4f       	sbci	r31, 0xF8	; 248
    f640:	80 81       	ld	r24, Z
    f642:	08 2e       	mov	r0, r24
    f644:	00 0c       	add	r0, r0
    f646:	99 0b       	sbc	r25, r25
    f648:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f64c:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f650:	13 c0       	rjmp	.+38     	; 0xf678 <lseek+0xa6>
    f652:	68 89       	ldd	r22, Y+16	; 0x10
    f654:	79 89       	ldd	r23, Y+17	; 0x11
    f656:	8a 89       	ldd	r24, Y+18	; 0x12
    f658:	9b 89       	ldd	r25, Y+19	; 0x13
    f65a:	c6 16       	cp	r12, r22
    f65c:	d7 06       	cpc	r13, r23
    f65e:	e8 06       	cpc	r14, r24
    f660:	f9 06       	cpc	r15, r25
    f662:	c9 f0       	breq	.+50     	; 0xf696 <lseek+0xc4>
    f664:	8a e5       	ldi	r24, 0x5A	; 90
    f666:	9c e0       	ldi	r25, 0x0C	; 12
    f668:	1f 92       	push	r1
    f66a:	9f 93       	push	r25
    f66c:	8f 93       	push	r24
    f66e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    f672:	0f 90       	pop	r0
    f674:	0f 90       	pop	r0
    f676:	0f 90       	pop	r0
    f678:	6f ef       	ldi	r22, 0xFF	; 255
    f67a:	7f ef       	ldi	r23, 0xFF	; 255
    f67c:	cb 01       	movw	r24, r22
    f67e:	0b c0       	rjmp	.+22     	; 0xf696 <lseek+0xc4>
    f680:	01 30       	cpi	r16, 0x01	; 1
    f682:	11 05       	cpc	r17, r1
    f684:	81 f6       	brne	.-96     	; 0xf626 <lseek+0x54>
    f686:	88 89       	ldd	r24, Y+16	; 0x10
    f688:	99 89       	ldd	r25, Y+17	; 0x11
    f68a:	aa 89       	ldd	r26, Y+18	; 0x12
    f68c:	bb 89       	ldd	r27, Y+19	; 0x13
    f68e:	c7 cf       	rjmp	.-114    	; 0xf61e <lseek+0x4c>
    f690:	83 e2       	ldi	r24, 0x23	; 35
    f692:	90 e0       	ldi	r25, 0x00	; 0
    f694:	d9 cf       	rjmp	.-78     	; 0xf648 <lseek+0x76>
    f696:	cd b7       	in	r28, 0x3d	; 61
    f698:	de b7       	in	r29, 0x3e	; 62
    f69a:	ea e0       	ldi	r30, 0x0A	; 10
    f69c:	0c 94 52 e5 	jmp	0x1caa4	; 0x1caa4 <__epilogue_restores__+0x10>

0000f6a0 <fseek>:
    f6a0:	cf 92       	push	r12
    f6a2:	df 92       	push	r13
    f6a4:	ef 92       	push	r14
    f6a6:	ff 92       	push	r15
    f6a8:	cf 93       	push	r28
    f6aa:	df 93       	push	r29
    f6ac:	6a 01       	movw	r12, r20
    f6ae:	7b 01       	movw	r14, r22
    f6b0:	e9 01       	movw	r28, r18
    f6b2:	c8 db       	rcall	.-2160   	; 0xee44 <fileno>
    f6b4:	97 fd       	sbrc	r25, 7
    f6b6:	12 c0       	rjmp	.+36     	; 0xf6dc <fseek+0x3c>
    f6b8:	9e 01       	movw	r18, r28
    f6ba:	b7 01       	movw	r22, r14
    f6bc:	a6 01       	movw	r20, r12
    f6be:	89 df       	rcall	.-238    	; 0xf5d2 <lseek>
    f6c0:	21 e0       	ldi	r18, 0x01	; 1
    f6c2:	30 e0       	ldi	r19, 0x00	; 0
    f6c4:	6f 3f       	cpi	r22, 0xFF	; 255
    f6c6:	7f 4f       	sbci	r23, 0xFF	; 255
    f6c8:	8f 4f       	sbci	r24, 0xFF	; 255
    f6ca:	9f 4f       	sbci	r25, 0xFF	; 255
    f6cc:	11 f0       	breq	.+4      	; 0xf6d2 <fseek+0x32>
    f6ce:	20 e0       	ldi	r18, 0x00	; 0
    f6d0:	30 e0       	ldi	r19, 0x00	; 0
    f6d2:	88 27       	eor	r24, r24
    f6d4:	99 27       	eor	r25, r25
    f6d6:	82 1b       	sub	r24, r18
    f6d8:	93 0b       	sbc	r25, r19
    f6da:	02 c0       	rjmp	.+4      	; 0xf6e0 <fseek+0x40>
    f6dc:	8f ef       	ldi	r24, 0xFF	; 255
    f6de:	9f ef       	ldi	r25, 0xFF	; 255
    f6e0:	df 91       	pop	r29
    f6e2:	cf 91       	pop	r28
    f6e4:	ff 90       	pop	r15
    f6e6:	ef 90       	pop	r14
    f6e8:	df 90       	pop	r13
    f6ea:	cf 90       	pop	r12
    f6ec:	08 95       	ret

0000f6ee <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f6ee:	a2 e0       	ldi	r26, 0x02	; 2
    f6f0:	b0 e0       	ldi	r27, 0x00	; 0
    f6f2:	ed e7       	ldi	r30, 0x7D	; 125
    f6f4:	fb e7       	ldi	r31, 0x7B	; 123
    f6f6:	0c 94 36 e5 	jmp	0x1ca6c	; 0x1ca6c <__prologue_saves__+0x10>
    f6fa:	5c 01       	movw	r10, r24
    f6fc:	8b 01       	movw	r16, r22
    f6fe:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

    //FIXME
    *(char *) buf = 0;
    f700:	fb 01       	movw	r30, r22
    f702:	10 82       	st	Z, r1

    errno = 0;
    f704:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f708:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>

    // TTY read function
    // FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f70c:	b7 db       	rcall	.-2194   	; 0xee7c <fileno_to_stream>
    if(stream == stdin)
    f70e:	7c 01       	movw	r14, r24
    f710:	80 91 b7 1b 	lds	r24, 0x1BB7	; 0x801bb7 <__iob>
    f714:	90 91 b8 1b 	lds	r25, 0x1BB8	; 0x801bb8 <__iob+0x1>
    f718:	e8 16       	cp	r14, r24
    f71a:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
        // ungetc is undefined for read
        stream->flags |= __SUNGET;
    f71c:	c9 f4       	brne	.+50     	; 0xf750 <read+0x62>
    f71e:	f7 01       	movw	r30, r14
    f720:	83 81       	ldd	r24, Z+3	; 0x03
    f722:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    f724:	83 83       	std	Z+3, r24	; 0x03
    f726:	1a 82       	std	Y+2, r1	; 0x02
    f728:	19 82       	std	Y+1, r1	; 0x01
    f72a:	c0 0e       	add	r12, r16
        while(count--)
    f72c:	d1 1e       	adc	r13, r17
    f72e:	0c 15       	cp	r16, r12
    f730:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    f732:	09 f4       	brne	.+2      	; 0xf736 <read+0x48>
    f734:	3d c0       	rjmp	.+122    	; 0xf7b0 <read+0xc2>
            if(ret < 0)
    f736:	c7 01       	movw	r24, r14
    f738:	6b da       	rcall	.-2858   	; 0xec10 <fgetc>
                break;
            
            *ptr++ = ret;
    f73a:	97 fd       	sbrc	r25, 7
    f73c:	39 c0       	rjmp	.+114    	; 0xf7b0 <read+0xc2>
    f73e:	f8 01       	movw	r30, r16
            ++size;
    f740:	81 93       	st	Z+, r24
    f742:	8f 01       	movw	r16, r30
    f744:	89 81       	ldd	r24, Y+1	; 0x01
    f746:	9a 81       	ldd	r25, Y+2	; 0x02
    f748:	01 96       	adiw	r24, 0x01	; 1
    f74a:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f74c:	89 83       	std	Y+1, r24	; 0x01
    f74e:	ef cf       	rjmp	.-34     	; 0xf72e <read+0x40>
    f750:	80 91 b9 1b 	lds	r24, 0x1BB9	; 0x801bb9 <__iob+0x2>
    f754:	90 91 ba 1b 	lds	r25, 0x1BBA	; 0x801bba <__iob+0x3>
    f758:	e8 16       	cp	r14, r24
    f75a:	f9 06       	cpc	r15, r25
    f75c:	71 f1       	breq	.+92     	; 0xf7ba <read+0xcc>
    f75e:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <__iob+0x4>
    f762:	90 91 bc 1b 	lds	r25, 0x1BBC	; 0x801bbc <__iob+0x5>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f766:	e8 16       	cp	r14, r24
    f768:	f9 06       	cpc	r15, r25
    f76a:	39 f1       	breq	.+78     	; 0xf7ba <read+0xcc>
    if ( fh == NULL )
    f76c:	c5 01       	movw	r24, r10
    f76e:	01 df       	rcall	.-510    	; 0xf572 <fileno_to_fatfs>
    {
        errno = EBADF;
    f770:	00 97       	sbiw	r24, 0x00	; 0
    f772:	19 f4       	brne	.+6      	; 0xf77a <read+0x8c>
    f774:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f776:	90 e0       	ldi	r25, 0x00	; 0
    f778:	16 c0       	rjmp	.+44     	; 0xf7a6 <read+0xb8>
    f77a:	9e 01       	movw	r18, r28
    f77c:	2f 5f       	subi	r18, 0xFF	; 255
    f77e:	3f 4f       	sbci	r19, 0xFF	; 255
    f780:	a6 01       	movw	r20, r12
    f782:	b8 01       	movw	r22, r16
    if(res != FR_OK)
    f784:	0e 94 56 5c 	call	0xb8ac	; 0xb8ac <f_read>
    f788:	00 97       	sbiw	r24, 0x00	; 0
    f78a:	91 f0       	breq	.+36     	; 0xf7b0 <read+0xc2>
    f78c:	84 31       	cpi	r24, 0x14	; 20
    f78e:	91 05       	cpc	r25, r1
    f790:	40 f4       	brcc	.+16     	; 0xf7a2 <read+0xb4>
    f792:	fc 01       	movw	r30, r24
    f794:	e0 5f       	subi	r30, 0xF0	; 240
    f796:	f8 4f       	sbci	r31, 0xF8	; 248
    f798:	80 81       	ld	r24, Z
    f79a:	08 2e       	mov	r0, r24
    f79c:	00 0c       	add	r0, r0
    f79e:	99 0b       	sbc	r25, r25
    f7a0:	02 c0       	rjmp	.+4      	; 0xf7a6 <read+0xb8>
    {
        errno = fatfs_to_errno(res);
    f7a2:	83 e2       	ldi	r24, 0x23	; 35
    f7a4:	90 e0       	ldi	r25, 0x00	; 0
    f7a6:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f7aa:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f7ae:	05 c0       	rjmp	.+10     	; 0xf7ba <read+0xcc>
    f7b0:	69 81       	ldd	r22, Y+1	; 0x01
    f7b2:	7a 81       	ldd	r23, Y+2	; 0x02
    f7b4:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f7b6:	90 e0       	ldi	r25, 0x00	; 0
    f7b8:	03 c0       	rjmp	.+6      	; 0xf7c0 <read+0xd2>
    f7ba:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f7bc:	7f ef       	ldi	r23, 0xFF	; 255
    f7be:	cb 01       	movw	r24, r22
    f7c0:	22 96       	adiw	r28, 0x02	; 2
    f7c2:	ea e0       	ldi	r30, 0x0A	; 10
    f7c4:	0c 94 52 e5 	jmp	0x1caa4	; 0x1caa4 <__epilogue_restores__+0x10>

0000f7c8 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f7c8:	0f 93       	push	r16
    f7ca:	1f 93       	push	r17
    f7cc:	cf 93       	push	r28
    f7ce:	df 93       	push	r29
    f7d0:	ec 01       	movw	r28, r24
    f7d2:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f7d4:	64 9f       	mul	r22, r20
    f7d6:	80 01       	movw	r16, r0
    f7d8:	65 9f       	mul	r22, r21
    f7da:	10 0d       	add	r17, r0
    f7dc:	74 9f       	mul	r23, r20
    f7de:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f7e0:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f7e2:	30 db       	rcall	.-2464   	; 0xee44 <fileno>
    f7e4:	a8 01       	movw	r20, r16
    f7e6:	be 01       	movw	r22, r28
    if(ret < 0)
    f7e8:	82 df       	rcall	.-252    	; 0xf6ee <read>
    f7ea:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f7ec:	02 c0       	rjmp	.+4      	; 0xf7f2 <fread+0x2a>
    f7ee:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f7f0:	02 c0       	rjmp	.+4      	; 0xf7f6 <fread+0x2e>
    f7f2:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f7f4:	90 e0       	ldi	r25, 0x00	; 0
    f7f6:	df 91       	pop	r29
    f7f8:	cf 91       	pop	r28
    f7fa:	1f 91       	pop	r17
    f7fc:	0f 91       	pop	r16
    f7fe:	08 95       	ret

0000f800 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f800:	cf 93       	push	r28
    f802:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f804:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f808:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f80c:	83 30       	cpi	r24, 0x03	; 3
    f80e:	91 05       	cpc	r25, r1
    f810:	18 f4       	brcc	.+6      	; 0xf818 <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f812:	89 e0       	ldi	r24, 0x09	; 9
    f814:	90 e0       	ldi	r25, 0x00	; 0
    f816:	18 c0       	rjmp	.+48     	; 0xf848 <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f818:	ec 01       	movw	r28, r24
    f81a:	30 db       	rcall	.-2464   	; 0xee7c <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
    f81c:	fc 01       	movw	r30, r24
    f81e:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f820:	90 64       	ori	r25, 0x40	; 64
    f822:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    f824:	ce 01       	movw	r24, r28
    f826:	a5 de       	rcall	.-694    	; 0xf572 <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f828:	00 97       	sbiw	r24, 0x00	; 0
    f82a:	99 f3       	breq	.-26     	; 0xf812 <syncfs+0x12>
    if (res != FR_OK)
    f82c:	0e 94 38 5f 	call	0xbe70	; 0xbe70 <f_sync>
    f830:	00 97       	sbiw	r24, 0x00	; 0
    f832:	a1 f0       	breq	.+40     	; 0xf85c <syncfs+0x5c>
    f834:	84 31       	cpi	r24, 0x14	; 20
    f836:	91 05       	cpc	r25, r1
    f838:	70 f4       	brcc	.+28     	; 0xf856 <syncfs+0x56>
    f83a:	fc 01       	movw	r30, r24
    f83c:	e0 5f       	subi	r30, 0xF0	; 240
    f83e:	f8 4f       	sbci	r31, 0xF8	; 248
    f840:	80 81       	ld	r24, Z
    f842:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    f844:	00 0c       	add	r0, r0
    f846:	99 0b       	sbc	r25, r25
    f848:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
        return(-1);
    f84c:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f850:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f852:	9f ef       	ldi	r25, 0xFF	; 255
    f854:	05 c0       	rjmp	.+10     	; 0xf860 <syncfs+0x60>
    f856:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f858:	90 e0       	ldi	r25, 0x00	; 0
    f85a:	f6 cf       	rjmp	.-20     	; 0xf848 <syncfs+0x48>
}
    f85c:	80 e0       	ldi	r24, 0x00	; 0
    f85e:	90 e0       	ldi	r25, 0x00	; 0
    f860:	df 91       	pop	r29
    f862:	cf 91       	pop	r28
    f864:	08 95       	ret

0000f866 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f866:	cf 93       	push	r28
    f868:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f86a:	c0 e0       	ldi	r28, 0x00	; 0
    f86c:	d0 e0       	ldi	r29, 0x00	; 0
    f86e:	21 96       	adiw	r28, 0x01	; 1
    f870:	c0 31       	cpi	r28, 0x10	; 16
    f872:	d1 05       	cpc	r29, r1
    f874:	51 f0       	breq	.+20     	; 0xf88a <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f876:	c3 30       	cpi	r28, 0x03	; 3
    f878:	d1 05       	cpc	r29, r1
    f87a:	cc f3       	brlt	.-14     	; 0xf86e <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f87c:	ce 01       	movw	r24, r28
    f87e:	79 de       	rcall	.-782    	; 0xf572 <fileno_to_fatfs>
        if(fh == NULL)
    f880:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    f882:	a9 f3       	breq	.-22     	; 0xf86e <sync+0x8>
    f884:	ce 01       	movw	r24, r28
    f886:	bc df       	rcall	.-136    	; 0xf800 <syncfs>
    }
}
    f888:	f2 cf       	rjmp	.-28     	; 0xf86e <sync+0x8>
    f88a:	df 91       	pop	r29
    f88c:	cf 91       	pop	r28
    f88e:	08 95       	ret

0000f890 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f890:	a2 e0       	ldi	r26, 0x02	; 2
    f892:	b0 e0       	ldi	r27, 0x00	; 0
    f894:	ee e4       	ldi	r30, 0x4E	; 78
    f896:	fc e7       	ldi	r31, 0x7C	; 124
    f898:	0c 94 34 e5 	jmp	0x1ca68	; 0x1ca68 <__prologue_saves__+0xc>
    f89c:	8c 01       	movw	r16, r24
    f89e:	b6 2e       	mov	r11, r22
    f8a0:	f7 2e       	mov	r15, r23
    f8a2:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f8a4:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f8a8:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
    f8ac:	e7 da       	rcall	.-2610   	; 0xee7c <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    f8ae:	6c 01       	movw	r12, r24
    f8b0:	80 91 b9 1b 	lds	r24, 0x1BB9	; 0x801bb9 <__iob+0x2>
    f8b4:	90 91 ba 1b 	lds	r25, 0x1BBA	; 0x801bba <__iob+0x3>
    f8b8:	c8 16       	cp	r12, r24
    f8ba:	d9 06       	cpc	r13, r25
    f8bc:	39 f0       	breq	.+14     	; 0xf8cc <write+0x3c>
    f8be:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <__iob+0x4>
    f8c2:	90 91 bc 1b 	lds	r25, 0x1BBC	; 0x801bbc <__iob+0x5>
    f8c6:	c8 16       	cp	r12, r24
    f8c8:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
    f8ca:	d1 f4       	brne	.+52     	; 0xf900 <write+0x70>
    f8cc:	1a 82       	std	Y+2, r1	; 0x02
    f8ce:	19 82       	std	Y+1, r1	; 0x01
    f8d0:	0b 2d       	mov	r16, r11
    f8d2:	1f 2d       	mov	r17, r15
    f8d4:	78 01       	movw	r14, r16
    f8d6:	e8 0c       	add	r14, r8
        while(count--)
    f8d8:	f9 1c       	adc	r15, r9
    f8da:	0e 15       	cp	r16, r14
    f8dc:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    f8de:	d1 f1       	breq	.+116    	; 0xf954 <write+0xc4>
    f8e0:	f8 01       	movw	r30, r16
    f8e2:	a1 90       	ld	r10, Z+
    f8e4:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    f8e6:	b1 2c       	mov	r11, r1
    f8e8:	b6 01       	movw	r22, r12
    f8ea:	c5 01       	movw	r24, r10
            if(c != ret)
    f8ec:	e2 d9       	rcall	.-3132   	; 0xecb2 <fputc>
    f8ee:	a8 16       	cp	r10, r24
    f8f0:	b9 06       	cpc	r11, r25
                break;

            ++size;
    f8f2:	81 f5       	brne	.+96     	; 0xf954 <write+0xc4>
    f8f4:	89 81       	ldd	r24, Y+1	; 0x01
    f8f6:	9a 81       	ldd	r25, Y+2	; 0x02
    f8f8:	01 96       	adiw	r24, 0x01	; 1
    f8fa:	9a 83       	std	Y+2, r25	; 0x02
    f8fc:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
    f8fe:	ed cf       	rjmp	.-38     	; 0xf8da <write+0x4a>
    f900:	80 91 b7 1b 	lds	r24, 0x1BB7	; 0x801bb7 <__iob>
    f904:	90 91 b8 1b 	lds	r25, 0x1BB8	; 0x801bb8 <__iob+0x1>
    f908:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f90a:	d9 06       	cpc	r13, r25
    f90c:	41 f1       	breq	.+80     	; 0xf95e <write+0xce>
    f90e:	c8 01       	movw	r24, r16
    if ( fh == NULL )
    f910:	30 de       	rcall	.-928    	; 0xf572 <fileno_to_fatfs>
    f912:	00 97       	sbiw	r24, 0x00	; 0
    {
        errno = EBADF;
    f914:	19 f4       	brne	.+6      	; 0xf91c <write+0x8c>
    f916:	89 e0       	ldi	r24, 0x09	; 9
    f918:	90 e0       	ldi	r25, 0x00	; 0
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f91a:	17 c0       	rjmp	.+46     	; 0xf94a <write+0xba>
    f91c:	9e 01       	movw	r18, r28
    f91e:	2f 5f       	subi	r18, 0xFF	; 255
    f920:	3f 4f       	sbci	r19, 0xFF	; 255
    f922:	a4 01       	movw	r20, r8
    f924:	6b 2d       	mov	r22, r11
    f926:	7f 2d       	mov	r23, r15
    f928:	0e 94 a1 5d 	call	0xbb42	; 0xbb42 <f_write>
    if(res != FR_OK)
    f92c:	00 97       	sbiw	r24, 0x00	; 0
    f92e:	91 f0       	breq	.+36     	; 0xf954 <write+0xc4>
    f930:	84 31       	cpi	r24, 0x14	; 20
    f932:	91 05       	cpc	r25, r1
    f934:	40 f4       	brcc	.+16     	; 0xf946 <write+0xb6>
    f936:	fc 01       	movw	r30, r24
    f938:	e0 5f       	subi	r30, 0xF0	; 240
    f93a:	f8 4f       	sbci	r31, 0xF8	; 248
    f93c:	80 81       	ld	r24, Z
    f93e:	08 2e       	mov	r0, r24
    f940:	00 0c       	add	r0, r0
    f942:	99 0b       	sbc	r25, r25
    f944:	02 c0       	rjmp	.+4      	; 0xf94a <write+0xba>
    f946:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
    f948:	90 e0       	ldi	r25, 0x00	; 0
    f94a:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f94e:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f952:	05 c0       	rjmp	.+10     	; 0xf95e <write+0xce>
    f954:	69 81       	ldd	r22, Y+1	; 0x01
    f956:	7a 81       	ldd	r23, Y+2	; 0x02
    f958:	80 e0       	ldi	r24, 0x00	; 0
    f95a:	90 e0       	ldi	r25, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f95c:	03 c0       	rjmp	.+6      	; 0xf964 <write+0xd4>
    f95e:	6f ef       	ldi	r22, 0xFF	; 255
    f960:	7f ef       	ldi	r23, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f962:	cb 01       	movw	r24, r22
    f964:	22 96       	adiw	r28, 0x02	; 2
    f966:	ec e0       	ldi	r30, 0x0C	; 12
    f968:	0c 94 50 e5 	jmp	0x1caa0	; 0x1caa0 <__epilogue_restores__+0xc>

0000f96c <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f96c:	0f 93       	push	r16
    f96e:	1f 93       	push	r17
    f970:	cf 93       	push	r28
    f972:	df 93       	push	r29
    f974:	ec 01       	movw	r28, r24
    f976:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f978:	64 9f       	mul	r22, r20
    f97a:	80 01       	movw	r16, r0
    f97c:	65 9f       	mul	r22, r21
    f97e:	10 0d       	add	r17, r0
    f980:	74 9f       	mul	r23, r20
    f982:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f984:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f986:	5e da       	rcall	.-2884   	; 0xee44 <fileno>
    f988:	a8 01       	movw	r20, r16
    f98a:	be 01       	movw	r22, r28

    if(ret < 0)
    f98c:	81 df       	rcall	.-254    	; 0xf890 <write>
    f98e:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f990:	02 c0       	rjmp	.+4      	; 0xf996 <fwrite+0x2a>
    f992:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f994:	02 c0       	rjmp	.+4      	; 0xf99a <fwrite+0x2e>
    f996:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f998:	90 e0       	ldi	r25, 0x00	; 0
    f99a:	df 91       	pop	r29
    f99c:	cf 91       	pop	r28
    f99e:	1f 91       	pop	r17
    f9a0:	0f 91       	pop	r16
    f9a2:	08 95       	ret

0000f9a4 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f9a4:	0f 93       	push	r16
    f9a6:	1f 93       	push	r17
    f9a8:	cf 93       	push	r28
    f9aa:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f9ac:	83 30       	cpi	r24, 0x03	; 3
    f9ae:	91 05       	cpc	r25, r1
    f9b0:	48 f4       	brcc	.+18     	; 0xf9c4 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f9b2:	89 e0       	ldi	r24, 0x09	; 9
    f9b4:	90 e0       	ldi	r25, 0x00	; 0
    f9b6:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f9ba:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
        return(-1);
    f9be:	8f ef       	ldi	r24, 0xFF	; 255
    f9c0:	9f ef       	ldi	r25, 0xFF	; 255
    f9c2:	20 c0       	rjmp	.+64     	; 0xfa04 <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f9c4:	ec 01       	movw	r28, r24
    f9c6:	5a da       	rcall	.-2892   	; 0xee7c <fileno_to_stream>
    if(stream == NULL)
    f9c8:	8c 01       	movw	r16, r24
    f9ca:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f9cc:	c1 f3       	breq	.-16     	; 0xf9be <free_file_descriptor+0x1a>
    f9ce:	f8 01       	movw	r30, r16
    f9d0:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
    f9d2:	95 85       	ldd	r25, Z+13	; 0x0d
    f9d4:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
    f9d6:	11 f0       	breq	.+4      	; 0xf9dc <free_file_descriptor+0x38>
    f9d8:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f9dc:	f8 01       	movw	r30, r16
    f9de:	80 81       	ld	r24, Z
    f9e0:	91 81       	ldd	r25, Z+1	; 0x01
    f9e2:	00 97       	sbiw	r24, 0x00	; 0
    f9e4:	21 f0       	breq	.+8      	; 0xf9ee <free_file_descriptor+0x4a>
    f9e6:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
    f9e8:	27 fd       	sbrc	r18, 7
    f9ea:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
    }

    __iob[fileno]  = NULL;
    f9ee:	fe 01       	movw	r30, r28
    f9f0:	ee 0f       	add	r30, r30
    f9f2:	ff 1f       	adc	r31, r31
    f9f4:	e9 54       	subi	r30, 0x49	; 73
    f9f6:	f4 4e       	sbci	r31, 0xE4	; 228
    f9f8:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
    f9fa:	10 82       	st	Z, r1
    f9fc:	c8 01       	movw	r24, r16
    f9fe:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
    return(fileno);
}
    fa02:	ce 01       	movw	r24, r28
    fa04:	df 91       	pop	r29
    fa06:	cf 91       	pop	r28
    fa08:	1f 91       	pop	r17
    fa0a:	0f 91       	pop	r16
    fa0c:	08 95       	ret

0000fa0e <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    fa0e:	0f 93       	push	r16
    fa10:	1f 93       	push	r17
    fa12:	cf 93       	push	r28
    fa14:	df 93       	push	r29
    fa16:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fa18:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    fa1c:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fa20:	2d da       	rcall	.-2982   	; 0xee7c <fileno_to_stream>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fa22:	89 2b       	or	r24, r25
    fa24:	d9 f0       	breq	.+54     	; 0xfa5c <close+0x4e>
    if(fh == NULL)
    fa26:	c8 01       	movw	r24, r16
    fa28:	a4 dd       	rcall	.-1208   	; 0xf572 <fileno_to_fatfs>
    {
        return(-1);
    }
    res = f_close(fh);
    fa2a:	00 97       	sbiw	r24, 0x00	; 0
    fa2c:	b9 f0       	breq	.+46     	; 0xfa5c <close+0x4e>
    free_file_descriptor(fileno);
    fa2e:	0e 94 b8 5f 	call	0xbf70	; 0xbf70 <f_close>
    fa32:	ec 01       	movw	r28, r24
    if (res != FR_OK)
    fa34:	c8 01       	movw	r24, r16
    fa36:	b6 df       	rcall	.-148    	; 0xf9a4 <free_file_descriptor>
    fa38:	20 97       	sbiw	r28, 0x00	; 0
    fa3a:	99 f0       	breq	.+38     	; 0xfa62 <close+0x54>
    fa3c:	c4 31       	cpi	r28, 0x14	; 20
    fa3e:	d1 05       	cpc	r29, r1
    fa40:	38 f4       	brcc	.+14     	; 0xfa50 <close+0x42>
    fa42:	c0 5f       	subi	r28, 0xF0	; 240
    fa44:	d8 4f       	sbci	r29, 0xF8	; 248
    fa46:	88 81       	ld	r24, Y
    fa48:	08 2e       	mov	r0, r24
    fa4a:	00 0c       	add	r0, r0
    fa4c:	99 0b       	sbc	r25, r25
    fa4e:	02 c0       	rjmp	.+4      	; 0xfa54 <close+0x46>
    {
        errno = fatfs_to_errno(res);
    fa50:	83 e2       	ldi	r24, 0x23	; 35
    fa52:	90 e0       	ldi	r25, 0x00	; 0
    fa54:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
        return(-1);
    fa58:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    fa5c:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
    fa5e:	9f ef       	ldi	r25, 0xFF	; 255
    fa60:	02 c0       	rjmp	.+4      	; 0xfa66 <close+0x58>
}
    fa62:	80 e0       	ldi	r24, 0x00	; 0
    fa64:	90 e0       	ldi	r25, 0x00	; 0
    fa66:	df 91       	pop	r29
    fa68:	cf 91       	pop	r28
    fa6a:	1f 91       	pop	r17
    fa6c:	0f 91       	pop	r16
    fa6e:	08 95       	ret

0000fa70 <fclose>:
    fa70:	e9 d9       	rcall	.-3118   	; 0xee44 <fileno>
    fa72:	97 fd       	sbrc	r25, 7
    fa74:	02 c0       	rjmp	.+4      	; 0xfa7a <fclose+0xa>
    fa76:	cb cf       	rjmp	.-106    	; 0xfa0e <close>
    fa78:	08 95       	ret
    fa7a:	8f ef       	ldi	r24, 0xFF	; 255
    fa7c:	9f ef       	ldi	r25, 0xFF	; 255
    fa7e:	08 95       	ret

0000fa80 <new_file_descriptor>:
    fa80:	0f 93       	push	r16
    fa82:	1f 93       	push	r17
    fa84:	cf 93       	push	r28
    fa86:	df 93       	push	r29
    fa88:	e7 eb       	ldi	r30, 0xB7	; 183
    fa8a:	fb e1       	ldi	r31, 0x1B	; 27
    fa8c:	c0 e0       	ldi	r28, 0x00	; 0
    fa8e:	d0 e0       	ldi	r29, 0x00	; 0
    fa90:	21 96       	adiw	r28, 0x01	; 1
    fa92:	c0 31       	cpi	r28, 0x10	; 16
    fa94:	d1 05       	cpc	r29, r1
    fa96:	49 f0       	breq	.+18     	; 0xfaaa <new_file_descriptor+0x2a>
    fa98:	c3 30       	cpi	r28, 0x03	; 3
    fa9a:	d1 05       	cpc	r29, r1
    fa9c:	24 f0       	brlt	.+8      	; 0xfaa6 <new_file_descriptor+0x26>
    fa9e:	82 81       	ldd	r24, Z+2	; 0x02
    faa0:	93 81       	ldd	r25, Z+3	; 0x03
    faa2:	89 2b       	or	r24, r25
    faa4:	59 f0       	breq	.+22     	; 0xfabc <new_file_descriptor+0x3c>
    faa6:	32 96       	adiw	r30, 0x02	; 2
    faa8:	f3 cf       	rjmp	.-26     	; 0xfa90 <new_file_descriptor+0x10>
    faaa:	87 e1       	ldi	r24, 0x17	; 23
    faac:	90 e0       	ldi	r25, 0x00	; 0
    faae:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    fab2:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    fab6:	8f ef       	ldi	r24, 0xFF	; 255
    fab8:	9f ef       	ldi	r25, 0xFF	; 255
    faba:	22 c0       	rjmp	.+68     	; 0xfb00 <new_file_descriptor+0x80>
    fabc:	61 e0       	ldi	r22, 0x01	; 1
    fabe:	70 e0       	ldi	r23, 0x00	; 0
    fac0:	8e e0       	ldi	r24, 0x0E	; 14
    fac2:	90 e0       	ldi	r25, 0x00	; 0
    fac4:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
    fac8:	8c 01       	movw	r16, r24
    faca:	89 2b       	or	r24, r25
    facc:	59 f0       	breq	.+22     	; 0xfae4 <new_file_descriptor+0x64>
    face:	61 e0       	ldi	r22, 0x01	; 1
    fad0:	70 e0       	ldi	r23, 0x00	; 0
    fad2:	84 e2       	ldi	r24, 0x24	; 36
    fad4:	92 e0       	ldi	r25, 0x02	; 2
    fad6:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
    fada:	00 97       	sbiw	r24, 0x00	; 0
    fadc:	31 f4       	brne	.+12     	; 0xfaea <new_file_descriptor+0x6a>
    fade:	c8 01       	movw	r24, r16
    fae0:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
    fae4:	8c e0       	ldi	r24, 0x0C	; 12
    fae6:	90 e0       	ldi	r25, 0x00	; 0
    fae8:	e2 cf       	rjmp	.-60     	; 0xfaae <new_file_descriptor+0x2e>
    faea:	fe 01       	movw	r30, r28
    faec:	ee 0f       	add	r30, r30
    faee:	ff 1f       	adc	r31, r31
    faf0:	e9 54       	subi	r30, 0x49	; 73
    faf2:	f4 4e       	sbci	r31, 0xE4	; 228
    faf4:	11 83       	std	Z+1, r17	; 0x01
    faf6:	00 83       	st	Z, r16
    faf8:	f8 01       	movw	r30, r16
    fafa:	95 87       	std	Z+13, r25	; 0x0d
    fafc:	84 87       	std	Z+12, r24	; 0x0c
    fafe:	ce 01       	movw	r24, r28
    fb00:	df 91       	pop	r29
    fb02:	cf 91       	pop	r28
    fb04:	1f 91       	pop	r17
    fb06:	0f 91       	pop	r16
    fb08:	08 95       	ret

0000fb0a <open>:
    fb0a:	a0 e0       	ldi	r26, 0x00	; 0
    fb0c:	b0 e0       	ldi	r27, 0x00	; 0
    fb0e:	eb e8       	ldi	r30, 0x8B	; 139
    fb10:	fd e7       	ldi	r31, 0x7D	; 125
    fb12:	0c 94 32 e5 	jmp	0x1ca64	; 0x1ca64 <__prologue_saves__+0x8>
    fb16:	5c 01       	movw	r10, r24
    fb18:	6b 01       	movw	r12, r22
    fb1a:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    fb1e:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    fb22:	7b 01       	movw	r14, r22
    fb24:	83 e0       	ldi	r24, 0x03	; 3
    fb26:	e8 22       	and	r14, r24
    fb28:	ff 24       	eor	r15, r15
    fb2a:	e2 e0       	ldi	r30, 0x02	; 2
    fb2c:	ee 16       	cp	r14, r30
    fb2e:	f1 04       	cpc	r15, r1
    fb30:	31 f0       	breq	.+12     	; 0xfb3e <open+0x34>
    fb32:	e1 14       	cp	r14, r1
    fb34:	f1 04       	cpc	r15, r1
    fb36:	31 f0       	breq	.+12     	; 0xfb44 <open+0x3a>
    fb38:	02 e0       	ldi	r16, 0x02	; 2
    fb3a:	10 e0       	ldi	r17, 0x00	; 0
    fb3c:	05 c0       	rjmp	.+10     	; 0xfb48 <open+0x3e>
    fb3e:	03 e0       	ldi	r16, 0x03	; 3
    fb40:	10 e0       	ldi	r17, 0x00	; 0
    fb42:	02 c0       	rjmp	.+4      	; 0xfb48 <open+0x3e>
    fb44:	01 e0       	ldi	r16, 0x01	; 1
    fb46:	10 e0       	ldi	r17, 0x00	; 0
    fb48:	c6 fe       	sbrs	r12, 6
    fb4a:	05 c0       	rjmp	.+10     	; 0xfb56 <open+0x4c>
    fb4c:	d1 fe       	sbrs	r13, 1
    fb4e:	02 c0       	rjmp	.+4      	; 0xfb54 <open+0x4a>
    fb50:	08 60       	ori	r16, 0x08	; 8
    fb52:	01 c0       	rjmp	.+2      	; 0xfb56 <open+0x4c>
    fb54:	00 61       	ori	r16, 0x10	; 16
    fb56:	94 df       	rcall	.-216    	; 0xfa80 <new_file_descriptor>
    fb58:	3c 01       	movw	r6, r24
    fb5a:	90 d9       	rcall	.-3296   	; 0xee7c <fileno_to_stream>
    fb5c:	ec 01       	movw	r28, r24
    fb5e:	c3 01       	movw	r24, r6
    fb60:	20 97       	sbiw	r28, 0x00	; 0
    fb62:	09 f4       	brne	.+2      	; 0xfb66 <open+0x5c>
    fb64:	48 c0       	rjmp	.+144    	; 0xfbf6 <open+0xec>
    fb66:	05 dd       	rcall	.-1526   	; 0xf572 <fileno_to_fatfs>
    fb68:	4c 01       	movw	r8, r24
    fb6a:	00 97       	sbiw	r24, 0x00	; 0
    fb6c:	59 f4       	brne	.+22     	; 0xfb84 <open+0x7a>
    fb6e:	c3 01       	movw	r24, r6
    fb70:	19 df       	rcall	.-462    	; 0xf9a4 <free_file_descriptor>
    fb72:	89 e0       	ldi	r24, 0x09	; 9
    fb74:	90 e0       	ldi	r25, 0x00	; 0
    fb76:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    fb7a:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    fb7e:	8f ef       	ldi	r24, 0xFF	; 255
    fb80:	9f ef       	ldi	r25, 0xFF	; 255
    fb82:	5d c0       	rjmp	.+186    	; 0xfc3e <open+0x134>
    fb84:	40 2f       	mov	r20, r16
    fb86:	b5 01       	movw	r22, r10
    fb88:	0e 94 9b 5a 	call	0xb536	; 0xb536 <f_open>
    fb8c:	00 97       	sbiw	r24, 0x00	; 0
    fb8e:	91 f0       	breq	.+36     	; 0xfbb4 <open+0xaa>
    fb90:	84 31       	cpi	r24, 0x14	; 20
    fb92:	91 05       	cpc	r25, r1
    fb94:	40 f4       	brcc	.+16     	; 0xfba6 <open+0x9c>
    fb96:	fc 01       	movw	r30, r24
    fb98:	e0 5f       	subi	r30, 0xF0	; 240
    fb9a:	f8 4f       	sbci	r31, 0xF8	; 248
    fb9c:	80 81       	ld	r24, Z
    fb9e:	08 2e       	mov	r0, r24
    fba0:	00 0c       	add	r0, r0
    fba2:	99 0b       	sbc	r25, r25
    fba4:	02 c0       	rjmp	.+4      	; 0xfbaa <open+0xa0>
    fba6:	83 e2       	ldi	r24, 0x23	; 35
    fba8:	90 e0       	ldi	r25, 0x00	; 0
    fbaa:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    fbae:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    fbb2:	20 c0       	rjmp	.+64     	; 0xfbf4 <open+0xea>
    fbb4:	d2 fe       	sbrs	r13, 2
    fbb6:	21 c0       	rjmp	.+66     	; 0xfbfa <open+0xf0>
    fbb8:	f4 01       	movw	r30, r8
    fbba:	42 85       	ldd	r20, Z+10	; 0x0a
    fbbc:	53 85       	ldd	r21, Z+11	; 0x0b
    fbbe:	64 85       	ldd	r22, Z+12	; 0x0c
    fbc0:	75 85       	ldd	r23, Z+13	; 0x0d
    fbc2:	c4 01       	movw	r24, r8
    fbc4:	0e 94 62 61 	call	0xc2c4	; 0xc2c4 <f_lseek>
    fbc8:	00 97       	sbiw	r24, 0x00	; 0
    fbca:	b9 f0       	breq	.+46     	; 0xfbfa <open+0xf0>
    fbcc:	84 31       	cpi	r24, 0x14	; 20
    fbce:	91 05       	cpc	r25, r1
    fbd0:	40 f4       	brcc	.+16     	; 0xfbe2 <open+0xd8>
    fbd2:	fc 01       	movw	r30, r24
    fbd4:	e0 5f       	subi	r30, 0xF0	; 240
    fbd6:	f8 4f       	sbci	r31, 0xF8	; 248
    fbd8:	80 81       	ld	r24, Z
    fbda:	08 2e       	mov	r0, r24
    fbdc:	00 0c       	add	r0, r0
    fbde:	99 0b       	sbc	r25, r25
    fbe0:	02 c0       	rjmp	.+4      	; 0xfbe6 <open+0xdc>
    fbe2:	83 e2       	ldi	r24, 0x23	; 35
    fbe4:	90 e0       	ldi	r25, 0x00	; 0
    fbe6:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    fbea:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    fbee:	c4 01       	movw	r24, r8
    fbf0:	0e 94 b8 5f 	call	0xbf70	; 0xbf70 <f_close>
    fbf4:	c3 01       	movw	r24, r6
    fbf6:	d6 de       	rcall	.-596    	; 0xf9a4 <free_file_descriptor>
    fbf8:	c2 cf       	rjmp	.-124    	; 0xfb7e <open+0x74>
    fbfa:	f2 e0       	ldi	r31, 0x02	; 2
    fbfc:	ef 16       	cp	r14, r31
    fbfe:	f1 04       	cpc	r15, r1
    fc00:	51 f4       	brne	.+20     	; 0xfc16 <open+0x10c>
    fc02:	8d eb       	ldi	r24, 0xBD	; 189
    fc04:	95 e7       	ldi	r25, 0x75	; 117
    fc06:	99 87       	std	Y+9, r25	; 0x09
    fc08:	88 87       	std	Y+8, r24	; 0x08
    fc0a:	8a e3       	ldi	r24, 0x3A	; 58
    fc0c:	95 e7       	ldi	r25, 0x75	; 117
    fc0e:	9b 87       	std	Y+11, r25	; 0x0b
    fc10:	8a 87       	std	Y+10, r24	; 0x0a
    fc12:	83 e0       	ldi	r24, 0x03	; 3
    fc14:	12 c0       	rjmp	.+36     	; 0xfc3a <open+0x130>
    fc16:	e1 14       	cp	r14, r1
    fc18:	f1 04       	cpc	r15, r1
    fc1a:	41 f4       	brne	.+16     	; 0xfc2c <open+0x122>
    fc1c:	19 86       	std	Y+9, r1	; 0x09
    fc1e:	18 86       	std	Y+8, r1	; 0x08
    fc20:	8a e3       	ldi	r24, 0x3A	; 58
    fc22:	95 e7       	ldi	r25, 0x75	; 117
    fc24:	9b 87       	std	Y+11, r25	; 0x0b
    fc26:	8a 87       	std	Y+10, r24	; 0x0a
    fc28:	81 e0       	ldi	r24, 0x01	; 1
    fc2a:	07 c0       	rjmp	.+14     	; 0xfc3a <open+0x130>
    fc2c:	8d eb       	ldi	r24, 0xBD	; 189
    fc2e:	95 e7       	ldi	r25, 0x75	; 117
    fc30:	99 87       	std	Y+9, r25	; 0x09
    fc32:	88 87       	std	Y+8, r24	; 0x08
    fc34:	1b 86       	std	Y+11, r1	; 0x0b
    fc36:	1a 86       	std	Y+10, r1	; 0x0a
    fc38:	82 e0       	ldi	r24, 0x02	; 2
    fc3a:	8b 83       	std	Y+3, r24	; 0x03
    fc3c:	c3 01       	movw	r24, r6
    fc3e:	cd b7       	in	r28, 0x3d	; 61
    fc40:	de b7       	in	r29, 0x3e	; 62
    fc42:	ee e0       	ldi	r30, 0x0E	; 14
    fc44:	0c 94 4e e5 	jmp	0x1ca9c	; 0x1ca9c <__epilogue_restores__+0x8>

0000fc48 <posix_fopen_modes_to_open>:
    fc48:	cf 93       	push	r28
    fc4a:	df 93       	push	r29
    fc4c:	ec 01       	movw	r28, r24
    fc4e:	61 e4       	ldi	r22, 0x41	; 65
    fc50:	77 e0       	ldi	r23, 0x07	; 7
    fc52:	0e 94 15 32 	call	0x642a	; 0x642a <strcmp>
    fc56:	00 97       	sbiw	r24, 0x00	; 0
    fc58:	09 f4       	brne	.+2      	; 0xfc5c <posix_fopen_modes_to_open+0x14>
    fc5a:	5d c0       	rjmp	.+186    	; 0xfd16 <posix_fopen_modes_to_open+0xce>
    fc5c:	66 e8       	ldi	r22, 0x86	; 134
    fc5e:	78 e0       	ldi	r23, 0x08	; 8
    fc60:	ce 01       	movw	r24, r28
    fc62:	0e 94 15 32 	call	0x642a	; 0x642a <strcmp>
    fc66:	00 97       	sbiw	r24, 0x00	; 0
    fc68:	09 f4       	brne	.+2      	; 0xfc6c <posix_fopen_modes_to_open+0x24>
    fc6a:	55 c0       	rjmp	.+170    	; 0xfd16 <posix_fopen_modes_to_open+0xce>
    fc6c:	69 e8       	ldi	r22, 0x89	; 137
    fc6e:	78 e0       	ldi	r23, 0x08	; 8
    fc70:	ce 01       	movw	r24, r28
    fc72:	0e 94 15 32 	call	0x642a	; 0x642a <strcmp>
    fc76:	89 2b       	or	r24, r25
    fc78:	09 f4       	brne	.+2      	; 0xfc7c <posix_fopen_modes_to_open+0x34>
    fc7a:	42 c0       	rjmp	.+132    	; 0xfd00 <posix_fopen_modes_to_open+0xb8>
    fc7c:	6c e8       	ldi	r22, 0x8C	; 140
    fc7e:	78 e0       	ldi	r23, 0x08	; 8
    fc80:	ce 01       	movw	r24, r28
    fc82:	0e 94 15 32 	call	0x642a	; 0x642a <strcmp>
    fc86:	89 2b       	or	r24, r25
    fc88:	d9 f1       	breq	.+118    	; 0xfd00 <posix_fopen_modes_to_open+0xb8>
    fc8a:	60 e9       	ldi	r22, 0x90	; 144
    fc8c:	78 e0       	ldi	r23, 0x08	; 8
    fc8e:	ce 01       	movw	r24, r28
    fc90:	0e 94 15 32 	call	0x642a	; 0x642a <strcmp>
    fc94:	89 2b       	or	r24, r25
    fc96:	a1 f1       	breq	.+104    	; 0xfd00 <posix_fopen_modes_to_open+0xb8>
    fc98:	65 e4       	ldi	r22, 0x45	; 69
    fc9a:	7a e0       	ldi	r23, 0x0A	; 10
    fc9c:	ce 01       	movw	r24, r28
    fc9e:	0e 94 15 32 	call	0x642a	; 0x642a <strcmp>
    fca2:	89 2b       	or	r24, r25
    fca4:	81 f1       	breq	.+96     	; 0xfd06 <posix_fopen_modes_to_open+0xbe>
    fca6:	64 e9       	ldi	r22, 0x94	; 148
    fca8:	78 e0       	ldi	r23, 0x08	; 8
    fcaa:	ce 01       	movw	r24, r28
    fcac:	0e 94 15 32 	call	0x642a	; 0x642a <strcmp>
    fcb0:	89 2b       	or	r24, r25
    fcb2:	49 f1       	breq	.+82     	; 0xfd06 <posix_fopen_modes_to_open+0xbe>
    fcb4:	67 e9       	ldi	r22, 0x97	; 151
    fcb6:	78 e0       	ldi	r23, 0x08	; 8
    fcb8:	ce 01       	movw	r24, r28
    fcba:	0e 94 15 32 	call	0x642a	; 0x642a <strcmp>
    fcbe:	89 2b       	or	r24, r25
    fcc0:	29 f1       	breq	.+74     	; 0xfd0c <posix_fopen_modes_to_open+0xc4>
    fcc2:	6a e9       	ldi	r22, 0x9A	; 154
    fcc4:	78 e0       	ldi	r23, 0x08	; 8
    fcc6:	ce 01       	movw	r24, r28
    fcc8:	0e 94 15 32 	call	0x642a	; 0x642a <strcmp>
    fccc:	89 2b       	or	r24, r25
    fcce:	f1 f0       	breq	.+60     	; 0xfd0c <posix_fopen_modes_to_open+0xc4>
    fcd0:	6e e9       	ldi	r22, 0x9E	; 158
    fcd2:	78 e0       	ldi	r23, 0x08	; 8
    fcd4:	ce 01       	movw	r24, r28
    fcd6:	0e 94 15 32 	call	0x642a	; 0x642a <strcmp>
    fcda:	89 2b       	or	r24, r25
    fcdc:	b9 f0       	breq	.+46     	; 0xfd0c <posix_fopen_modes_to_open+0xc4>
    fcde:	67 e7       	ldi	r22, 0x77	; 119
    fce0:	72 e1       	ldi	r23, 0x12	; 18
    fce2:	ce 01       	movw	r24, r28
    fce4:	0e 94 15 32 	call	0x642a	; 0x642a <strcmp>
    fce8:	89 2b       	or	r24, r25
    fcea:	99 f0       	breq	.+38     	; 0xfd12 <posix_fopen_modes_to_open+0xca>
    fcec:	62 ea       	ldi	r22, 0xA2	; 162
    fcee:	78 e0       	ldi	r23, 0x08	; 8
    fcf0:	ce 01       	movw	r24, r28
    fcf2:	0e 94 15 32 	call	0x642a	; 0x642a <strcmp>
    fcf6:	89 2b       	or	r24, r25
    fcf8:	61 f0       	breq	.+24     	; 0xfd12 <posix_fopen_modes_to_open+0xca>
    fcfa:	8f ef       	ldi	r24, 0xFF	; 255
    fcfc:	9f ef       	ldi	r25, 0xFF	; 255
    fcfe:	0b c0       	rjmp	.+22     	; 0xfd16 <posix_fopen_modes_to_open+0xce>
    fd00:	82 e0       	ldi	r24, 0x02	; 2
    fd02:	92 e0       	ldi	r25, 0x02	; 2
    fd04:	08 c0       	rjmp	.+16     	; 0xfd16 <posix_fopen_modes_to_open+0xce>
    fd06:	81 e4       	ldi	r24, 0x41	; 65
    fd08:	92 e0       	ldi	r25, 0x02	; 2
    fd0a:	05 c0       	rjmp	.+10     	; 0xfd16 <posix_fopen_modes_to_open+0xce>
    fd0c:	82 e4       	ldi	r24, 0x42	; 66
    fd0e:	92 e0       	ldi	r25, 0x02	; 2
    fd10:	02 c0       	rjmp	.+4      	; 0xfd16 <posix_fopen_modes_to_open+0xce>
    fd12:	81 e4       	ldi	r24, 0x41	; 65
    fd14:	94 e0       	ldi	r25, 0x04	; 4
    fd16:	df 91       	pop	r29
    fd18:	cf 91       	pop	r28
    fd1a:	08 95       	ret

0000fd1c <fopen>:
    fd1c:	cf 93       	push	r28
    fd1e:	df 93       	push	r29
    fd20:	ec 01       	movw	r28, r24
    fd22:	cb 01       	movw	r24, r22
    fd24:	91 df       	rcall	.-222    	; 0xfc48 <posix_fopen_modes_to_open>
    fd26:	bc 01       	movw	r22, r24
    fd28:	ce 01       	movw	r24, r28
    fd2a:	ef de       	rcall	.-546    	; 0xfb0a <open>
    fd2c:	a7 d8       	rcall	.-3762   	; 0xee7c <fileno_to_stream>
    fd2e:	df 91       	pop	r29
    fd30:	cf 91       	pop	r28
    fd32:	08 95       	ret

0000fd34 <fprintf>:
    fd34:	a8 e0       	ldi	r26, 0x08	; 8
    fd36:	b0 e0       	ldi	r27, 0x00	; 0
    fd38:	e0 ea       	ldi	r30, 0xA0	; 160
    fd3a:	fe e7       	ldi	r31, 0x7E	; 126
    fd3c:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
    fd40:	86 ea       	ldi	r24, 0xA6	; 166
    fd42:	96 e7       	ldi	r25, 0x76	; 118
    fd44:	9a 83       	std	Y+2, r25	; 0x02
    fd46:	89 83       	std	Y+1, r24	; 0x01
    fd48:	18 86       	std	Y+8, r1	; 0x08
    fd4a:	1f 82       	std	Y+7, r1	; 0x07
    fd4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    fd4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    fd50:	9c 83       	std	Y+4, r25	; 0x04
    fd52:	8b 83       	std	Y+3, r24	; 0x03
    fd54:	4f 85       	ldd	r20, Y+15	; 0x0f
    fd56:	58 89       	ldd	r21, Y+16	; 0x10
    fd58:	60 e8       	ldi	r22, 0x80	; 128
    fd5a:	9e 01       	movw	r18, r28
    fd5c:	2f 5e       	subi	r18, 0xEF	; 239
    fd5e:	3f 4f       	sbci	r19, 0xFF	; 255
    fd60:	ce 01       	movw	r24, r28
    fd62:	01 96       	adiw	r24, 0x01	; 1
    fd64:	0e 94 41 42 	call	0x8482	; 0x8482 <_printf_fn>
    fd68:	8f 81       	ldd	r24, Y+7	; 0x07
    fd6a:	98 85       	ldd	r25, Y+8	; 0x08
    fd6c:	28 96       	adiw	r28, 0x08	; 8
    fd6e:	e2 e0       	ldi	r30, 0x02	; 2
    fd70:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

0000fd74 <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    fd74:	cf 93       	push	r28
    fd76:	df 93       	push	r29
    fd78:	ec 01       	movw	r28, r24
    fd7a:	88 ea       	ldi	r24, 0xA8	; 168
    fd7c:	9e e0       	ldi	r25, 0x0E	; 14
    fd7e:	1f 92       	push	r1
    fd80:	9f 93       	push	r25
    fd82:	8f 93       	push	r24
    fd84:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    fd88:	0f 90       	pop	r0
    fd8a:	0f 90       	pop	r0
    fd8c:	0f 90       	pop	r0
    fd8e:	cd 2b       	or	r28, r29
    fd90:	51 f0       	breq	.+20     	; 0xfda6 <posix_help+0x32>
    fd92:	88 ee       	ldi	r24, 0xE8	; 232
    fd94:	9d e0       	ldi	r25, 0x0D	; 13
    fd96:	1f 92       	push	r1
    fd98:	9f 93       	push	r25
    fd9a:	8f 93       	push	r24
    fd9c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    fda0:	0f 90       	pop	r0
    fda2:	0f 90       	pop	r0
    fda4:	0f 90       	pop	r0
    fda6:	df 91       	pop	r29
    fda8:	cf 91       	pop	r28
    fdaa:	08 95       	ret

0000fdac <copy>:
    fdac:	4f 92       	push	r4
    fdae:	5f 92       	push	r5
    fdb0:	6f 92       	push	r6
    fdb2:	8f 92       	push	r8
    fdb4:	9f 92       	push	r9
    fdb6:	af 92       	push	r10
    fdb8:	bf 92       	push	r11
    fdba:	cf 92       	push	r12
    fdbc:	df 92       	push	r13
    fdbe:	ef 92       	push	r14
    fdc0:	ff 92       	push	r15
    fdc2:	0f 93       	push	r16
    fdc4:	1f 93       	push	r17
    fdc6:	cf 93       	push	r28
    fdc8:	df 93       	push	r29
    fdca:	18 2f       	mov	r17, r24
    fdcc:	09 2f       	mov	r16, r25
    fdce:	eb 01       	movw	r28, r22
    fdd0:	9f 93       	push	r25
    fdd2:	8f 93       	push	r24
    fdd4:	8b eb       	ldi	r24, 0xBB	; 187
    fdd6:	9d e0       	ldi	r25, 0x0D	; 13
    fdd8:	1f 92       	push	r1
    fdda:	9f 93       	push	r25
    fddc:	8f 93       	push	r24
    fdde:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    fde2:	66 e8       	ldi	r22, 0x86	; 134
    fde4:	78 e0       	ldi	r23, 0x08	; 8
    fde6:	81 2f       	mov	r24, r17
    fde8:	90 2f       	mov	r25, r16
    fdea:	98 df       	rcall	.-208    	; 0xfd1c <fopen>
    fdec:	7c 01       	movw	r14, r24
    fdee:	0f 90       	pop	r0
    fdf0:	0f 90       	pop	r0
    fdf2:	0f 90       	pop	r0
    fdf4:	0f 90       	pop	r0
    fdf6:	0f 90       	pop	r0
    fdf8:	89 2b       	or	r24, r25
    fdfa:	51 f4       	brne	.+20     	; 0xfe10 <copy+0x64>
    fdfc:	0f 93       	push	r16
    fdfe:	1f 93       	push	r17
    fe00:	8b ea       	ldi	r24, 0xAB	; 171
    fe02:	9d e0       	ldi	r25, 0x0D	; 13
    fe04:	1f 92       	push	r1
    fe06:	9f 93       	push	r25
    fe08:	8f 93       	push	r24
    fe0a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    fe0e:	21 c0       	rjmp	.+66     	; 0xfe52 <copy+0xa6>
    fe10:	df 93       	push	r29
    fe12:	cf 93       	push	r28
    fe14:	8e e9       	ldi	r24, 0x9E	; 158
    fe16:	9d e0       	ldi	r25, 0x0D	; 13
    fe18:	1f 92       	push	r1
    fe1a:	9f 93       	push	r25
    fe1c:	8f 93       	push	r24
    fe1e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    fe22:	64 e9       	ldi	r22, 0x94	; 148
    fe24:	78 e0       	ldi	r23, 0x08	; 8
    fe26:	ce 01       	movw	r24, r28
    fe28:	79 df       	rcall	.-270    	; 0xfd1c <fopen>
    fe2a:	8c 01       	movw	r16, r24
    fe2c:	0f 90       	pop	r0
    fe2e:	0f 90       	pop	r0
    fe30:	0f 90       	pop	r0
    fe32:	0f 90       	pop	r0
    fe34:	0f 90       	pop	r0
    fe36:	89 2b       	or	r24, r25
    fe38:	b1 f4       	brne	.+44     	; 0xfe66 <copy+0xba>
    fe3a:	df 93       	push	r29
    fe3c:	cf 93       	push	r28
    fe3e:	8e e8       	ldi	r24, 0x8E	; 142
    fe40:	9d e0       	ldi	r25, 0x0D	; 13
    fe42:	1f 92       	push	r1
    fe44:	9f 93       	push	r25
    fe46:	8f 93       	push	r24
    fe48:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    fe4c:	80 e0       	ldi	r24, 0x00	; 0
    fe4e:	90 e0       	ldi	r25, 0x00	; 0
    fe50:	0f de       	rcall	.-994    	; 0xfa70 <fclose>
    fe52:	0f 90       	pop	r0
    fe54:	0f 90       	pop	r0
    fe56:	0f 90       	pop	r0
    fe58:	0f 90       	pop	r0
    fe5a:	0f 90       	pop	r0
    fe5c:	60 e0       	ldi	r22, 0x00	; 0
    fe5e:	70 e0       	ldi	r23, 0x00	; 0
    fe60:	80 e0       	ldi	r24, 0x00	; 0
    fe62:	90 e0       	ldi	r25, 0x00	; 0
    fe64:	73 c0       	rjmp	.+230    	; 0xff4c <__DATA_REGION_LENGTH__+0x4c>
    fe66:	61 e0       	ldi	r22, 0x01	; 1
    fe68:	70 e0       	ldi	r23, 0x00	; 0
    fe6a:	80 e0       	ldi	r24, 0x00	; 0
    fe6c:	92 e0       	ldi	r25, 0x02	; 2
    fe6e:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
    fe72:	6c 01       	movw	r12, r24
    fe74:	89 2b       	or	r24, r25
    fe76:	29 f4       	brne	.+10     	; 0xfe82 <copy+0xd6>
    fe78:	c7 01       	movw	r24, r14
    fe7a:	fa dd       	rcall	.-1036   	; 0xfa70 <fclose>
    fe7c:	c8 01       	movw	r24, r16
    fe7e:	f8 dd       	rcall	.-1040   	; 0xfa70 <fclose>
    fe80:	ed cf       	rjmp	.-38     	; 0xfe5c <copy+0xb0>
    fe82:	81 e8       	ldi	r24, 0x81	; 129
    fe84:	9d e0       	ldi	r25, 0x0D	; 13
    fe86:	1f 92       	push	r1
    fe88:	9f 93       	push	r25
    fe8a:	8f 93       	push	r24
    fe8c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    fe90:	0f 90       	pop	r0
    fe92:	0f 90       	pop	r0
    fe94:	0f 90       	pop	r0
    fe96:	81 2c       	mov	r8, r1
    fe98:	91 2c       	mov	r9, r1
    fe9a:	54 01       	movw	r10, r8
    fe9c:	85 e6       	ldi	r24, 0x65	; 101
    fe9e:	9d e0       	ldi	r25, 0x0D	; 13
    fea0:	2c 01       	movw	r4, r24
    fea2:	97 01       	movw	r18, r14
    fea4:	40 e0       	ldi	r20, 0x00	; 0
    fea6:	52 e0       	ldi	r21, 0x02	; 2
    fea8:	61 e0       	ldi	r22, 0x01	; 1
    feaa:	70 e0       	ldi	r23, 0x00	; 0
    feac:	c6 01       	movw	r24, r12
    feae:	8c dc       	rcall	.-1768   	; 0xf7c8 <fread>
    feb0:	ec 01       	movw	r28, r24
    feb2:	18 16       	cp	r1, r24
    feb4:	19 06       	cpc	r1, r25
    feb6:	74 f5       	brge	.+92     	; 0xff14 <__DATA_REGION_LENGTH__+0x14>
    feb8:	98 01       	movw	r18, r16
    feba:	ae 01       	movw	r20, r28
    febc:	61 e0       	ldi	r22, 0x01	; 1
    febe:	70 e0       	ldi	r23, 0x00	; 0
    fec0:	c6 01       	movw	r24, r12
    fec2:	54 dd       	rcall	.-1368   	; 0xf96c <fwrite>
    fec4:	8c 17       	cp	r24, r28
    fec6:	9d 07       	cpc	r25, r29
    fec8:	5c f4       	brge	.+22     	; 0xfee0 <copy+0x134>
    feca:	84 e7       	ldi	r24, 0x74	; 116
    fecc:	9d e0       	ldi	r25, 0x0D	; 13
    fece:	1f 92       	push	r1
    fed0:	9f 93       	push	r25
    fed2:	8f 93       	push	r24
    fed4:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    fed8:	0f 90       	pop	r0
    feda:	0f 90       	pop	r0
    fedc:	0f 90       	pop	r0
    fede:	1a c0       	rjmp	.+52     	; 0xff14 <__DATA_REGION_LENGTH__+0x14>
    fee0:	ce 01       	movw	r24, r28
    fee2:	dd 0f       	add	r29, r29
    fee4:	aa 0b       	sbc	r26, r26
    fee6:	bb 0b       	sbc	r27, r27
    fee8:	88 0e       	add	r8, r24
    feea:	99 1e       	adc	r9, r25
    feec:	aa 1e       	adc	r10, r26
    feee:	bb 1e       	adc	r11, r27
    fef0:	bf 92       	push	r11
    fef2:	af 92       	push	r10
    fef4:	9f 92       	push	r9
    fef6:	8f 92       	push	r8
    fef8:	1f 92       	push	r1
    fefa:	5f 92       	push	r5
    fefc:	4f 92       	push	r4
    fefe:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    ff02:	8d b7       	in	r24, 0x3d	; 61
    ff04:	9e b7       	in	r25, 0x3e	; 62
    ff06:	07 96       	adiw	r24, 0x07	; 7
    ff08:	0f b6       	in	r0, 0x3f	; 63
    ff0a:	f8 94       	cli
    ff0c:	9e bf       	out	0x3e, r25	; 62
    ff0e:	0f be       	out	0x3f, r0	; 63
    ff10:	8d bf       	out	0x3d, r24	; 61
    ff12:	c7 cf       	rjmp	.-114    	; 0xfea2 <copy+0xf6>
    ff14:	bf 92       	push	r11
    ff16:	af 92       	push	r10
    ff18:	9f 92       	push	r9
    ff1a:	8f 92       	push	r8
    ff1c:	82 e5       	ldi	r24, 0x52	; 82
    ff1e:	9d e0       	ldi	r25, 0x0D	; 13
    ff20:	1f 92       	push	r1
    ff22:	9f 93       	push	r25
    ff24:	8f 93       	push	r24
    ff26:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    ff2a:	c6 01       	movw	r24, r12
    ff2c:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
    ff30:	c7 01       	movw	r24, r14
    ff32:	9e dd       	rcall	.-1220   	; 0xfa70 <fclose>
    ff34:	c8 01       	movw	r24, r16
    ff36:	9c dd       	rcall	.-1224   	; 0xfa70 <fclose>
    ff38:	8d b7       	in	r24, 0x3d	; 61
    ff3a:	9e b7       	in	r25, 0x3e	; 62
    ff3c:	07 96       	adiw	r24, 0x07	; 7
    ff3e:	0f b6       	in	r0, 0x3f	; 63
    ff40:	f8 94       	cli
    ff42:	9e bf       	out	0x3e, r25	; 62
    ff44:	0f be       	out	0x3f, r0	; 63
    ff46:	8d bf       	out	0x3d, r24	; 61
    ff48:	b4 01       	movw	r22, r8
    ff4a:	c5 01       	movw	r24, r10
    ff4c:	df 91       	pop	r29
    ff4e:	cf 91       	pop	r28
    ff50:	1f 91       	pop	r17
    ff52:	0f 91       	pop	r16
    ff54:	ff 90       	pop	r15
    ff56:	ef 90       	pop	r14
    ff58:	df 90       	pop	r13
    ff5a:	cf 90       	pop	r12
    ff5c:	bf 90       	pop	r11
    ff5e:	af 90       	pop	r10
    ff60:	9f 90       	pop	r9
    ff62:	8f 90       	pop	r8
    ff64:	6f 90       	pop	r6
    ff66:	5f 90       	pop	r5
    ff68:	4f 90       	pop	r4
    ff6a:	08 95       	ret

0000ff6c <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    ff6c:	cf 93       	push	r28
    ff6e:	df 93       	push	r29
    int c;
    if(count >= _pagesize)
    ff70:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <_pagesize>
    ff74:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <_pagesize+0x1>
    ff78:	82 17       	cp	r24, r18
    ff7a:	93 07       	cpc	r25, r19
    ff7c:	3c f1       	brlt	.+78     	; 0xffcc <testpage+0x60>
    {
        printf("More..");
    ff7e:	8b e4       	ldi	r24, 0x4B	; 75
    ff80:	9d e0       	ldi	r25, 0x0D	; 13
    ff82:	1f 92       	push	r1
    ff84:	9f 93       	push	r25
    ff86:	8f 93       	push	r24
    ff88:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    ff8c:	0e 94 b3 76 	call	0xed66	; 0xed66 <getchar>
    ff90:	ec 01       	movw	r28, r24
        printf("\r");
    ff92:	89 e4       	ldi	r24, 0x49	; 73
    ff94:	9d e0       	ldi	r25, 0x0D	; 13
    ff96:	1f 92       	push	r1
    ff98:	9f 93       	push	r25
    ff9a:	8f 93       	push	r24
    ff9c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        if(c == 'q')
    ffa0:	0f 90       	pop	r0
    ffa2:	0f 90       	pop	r0
    ffa4:	0f 90       	pop	r0
    ffa6:	0f 90       	pop	r0
    ffa8:	0f 90       	pop	r0
    ffaa:	0f 90       	pop	r0
    ffac:	c1 37       	cpi	r28, 0x71	; 113
    ffae:	d1 05       	cpc	r29, r1
    ffb0:	41 f0       	breq	.+16     	; 0xffc2 <testpage+0x56>
            return(-1);         // quit
        if(c == '\n')
    ffb2:	2a 97       	sbiw	r28, 0x0a	; 10
    ffb4:	49 f4       	brne	.+18     	; 0xffc8 <testpage+0x5c>
            return(_pagesize-1); // single line
    ffb6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_pagesize>
    ffba:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_pagesize+0x1>
    ffbe:	01 97       	sbiw	r24, 0x01	; 1
    ffc0:	05 c0       	rjmp	.+10     	; 0xffcc <testpage+0x60>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);         // quit
    ffc2:	8f ef       	ldi	r24, 0xFF	; 255
    ffc4:	9f ef       	ldi	r25, 0xFF	; 255
    ffc6:	02 c0       	rjmp	.+4      	; 0xffcc <testpage+0x60>
        if(c == '\n')
            return(_pagesize-1); // single line
        return(0);              // new page
    ffc8:	80 e0       	ldi	r24, 0x00	; 0
    ffca:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    ffcc:	df 91       	pop	r29
    ffce:	cf 91       	pop	r28
    ffd0:	08 95       	ret

0000ffd2 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
    ffd2:	a0 e0       	ldi	r26, 0x00	; 0
    ffd4:	b1 e0       	ldi	r27, 0x01	; 1
    ffd6:	ef ee       	ldi	r30, 0xEF	; 239
    ffd8:	ff e7       	ldi	r31, 0x7F	; 127
    ffda:	0c 94 34 e5 	jmp	0x1ca68	; 0x1ca68 <__prologue_saves__+0xc>
    ffde:	18 2f       	mov	r17, r24
    ffe0:	09 2f       	mov	r16, r25
    ffe2:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    ffe4:	66 e8       	ldi	r22, 0x86	; 134
    ffe6:	78 e0       	ldi	r23, 0x08	; 8
    ffe8:	99 de       	rcall	.-718    	; 0xfd1c <fopen>
    ffea:	7c 01       	movw	r14, r24
    if (!fp)
    ffec:	89 2b       	or	r24, r25
    ffee:	41 f0       	breq	.+16     	; 0x10000 <__EEPROM_REGION_LENGTH__>
    fff0:	c1 2c       	mov	r12, r1
    fff2:	d1 2c       	mov	r13, r1
    fff4:	a1 2c       	mov	r10, r1
    fff6:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fff8:	8e 01       	movw	r16, r28
    fffa:	0f 5f       	subi	r16, 0xFF	; 255
    fffc:	1f 4f       	sbci	r17, 0xFF	; 255
    fffe:	24 c0       	rjmp	.+72     	; 0x10048 <__EEPROM_REGION_LENGTH__+0x48>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   10000:	0f 93       	push	r16
   10002:	1f 93       	push	r17
   10004:	84 ed       	ldi	r24, 0xD4	; 212
   10006:	9d e0       	ldi	r25, 0x0D	; 13
   10008:	1f 92       	push	r1
   1000a:	9f 93       	push	r25
   1000c:	8f 93       	push	r24
   1000e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(0);
   10012:	0f 90       	pop	r0
   10014:	0f 90       	pop	r0
   10016:	0f 90       	pop	r0
   10018:	0f 90       	pop	r0
   1001a:	0f 90       	pop	r0
   1001c:	c1 2c       	mov	r12, r1
   1001e:	d1 2c       	mov	r13, r1
   10020:	76 01       	movw	r14, r12
   10022:	3e c0       	rjmp	.+124    	; 0x100a0 <__EEPROM_REGION_LENGTH__+0xa0>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   10024:	c8 01       	movw	r24, r16
   10026:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <trim_tail>
        size += strlen(line);
   1002a:	f8 01       	movw	r30, r16
   1002c:	01 90       	ld	r0, Z+
   1002e:	00 20       	and	r0, r0
   10030:	e9 f7       	brne	.-6      	; 0x1002c <__EEPROM_REGION_LENGTH__+0x2c>
   10032:	31 97       	sbiw	r30, 0x01	; 1
   10034:	e0 1b       	sub	r30, r16
   10036:	f1 0b       	sbc	r31, r17
   10038:	ce 0e       	add	r12, r30
   1003a:	df 1e       	adc	r13, r31
        puts(line);
   1003c:	c8 01       	movw	r24, r16
   1003e:	0e 94 0b 77 	call	0xee16	; 0xee16 <puts>
        if(dopage)
   10042:	81 14       	cp	r8, r1
   10044:	91 04       	cpc	r9, r1
   10046:	49 f4       	brne	.+18     	; 0x1005a <__EEPROM_REGION_LENGTH__+0x5a>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10048:	a7 01       	movw	r20, r14
   1004a:	6e ef       	ldi	r22, 0xFE	; 254
   1004c:	70 e0       	ldi	r23, 0x00	; 0
   1004e:	c8 01       	movw	r24, r16
   10050:	0e 94 bf 76 	call	0xed7e	; 0xed7e <fgets>
   10054:	89 2b       	or	r24, r25
   10056:	31 f7       	brne	.-52     	; 0x10024 <__EEPROM_REGION_LENGTH__+0x24>
   10058:	06 c0       	rjmp	.+12     	; 0x10066 <__EEPROM_REGION_LENGTH__+0x66>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   1005a:	c5 01       	movw	r24, r10
   1005c:	01 96       	adiw	r24, 0x01	; 1
   1005e:	86 df       	rcall	.-244    	; 0xff6c <testpage>
   10060:	5c 01       	movw	r10, r24
            if(count < 0)
   10062:	97 ff       	sbrs	r25, 7
   10064:	f1 cf       	rjmp	.-30     	; 0x10048 <__EEPROM_REGION_LENGTH__+0x48>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   10066:	82 ed       	ldi	r24, 0xD2	; 210
   10068:	9d e0       	ldi	r25, 0x0D	; 13
   1006a:	1f 92       	push	r1
   1006c:	9f 93       	push	r25
   1006e:	8f 93       	push	r24
   10070:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    fclose(fp);
   10074:	c7 01       	movw	r24, r14
   10076:	fc dc       	rcall	.-1544   	; 0xfa70 <fclose>
    printf("%ld bytes\n", (long)size);
   10078:	0d 2c       	mov	r0, r13
   1007a:	00 0c       	add	r0, r0
   1007c:	ee 08       	sbc	r14, r14
   1007e:	ff 08       	sbc	r15, r15
   10080:	ff 92       	push	r15
   10082:	ef 92       	push	r14
   10084:	df 92       	push	r13
   10086:	cf 92       	push	r12
   10088:	87 ec       	ldi	r24, 0xC7	; 199
   1008a:	9d e0       	ldi	r25, 0x0D	; 13
   1008c:	1f 92       	push	r1
   1008e:	9f 93       	push	r25
   10090:	8f 93       	push	r24
   10092:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    return(size);
   10096:	0f b6       	in	r0, 0x3f	; 63
   10098:	f8 94       	cli
   1009a:	de bf       	out	0x3e, r29	; 62
   1009c:	0f be       	out	0x3f, r0	; 63
   1009e:	cd bf       	out	0x3d, r28	; 61
}
   100a0:	c7 01       	movw	r24, r14
   100a2:	b6 01       	movw	r22, r12
   100a4:	d3 95       	inc	r29
   100a6:	ec e0       	ldi	r30, 0x0C	; 12
   100a8:	0c 94 50 e5 	jmp	0x1caa0	; 0x1caa0 <__epilogue_restores__+0xc>

000100ac <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   100ac:	4f 92       	push	r4
   100ae:	5f 92       	push	r5
   100b0:	6f 92       	push	r6
   100b2:	7f 92       	push	r7
   100b4:	af 92       	push	r10
   100b6:	bf 92       	push	r11
   100b8:	cf 92       	push	r12
   100ba:	df 92       	push	r13
   100bc:	ef 92       	push	r14
   100be:	ff 92       	push	r15
   100c0:	0f 93       	push	r16
   100c2:	1f 93       	push	r17
   100c4:	cf 93       	push	r28
   100c6:	df 93       	push	r29
   100c8:	cd b7       	in	r28, 0x3d	; 61
   100ca:	de b7       	in	r29, 0x3e	; 62
   100cc:	ec 97       	sbiw	r28, 0x3c	; 60
   100ce:	0f b6       	in	r0, 0x3f	; 63
   100d0:	f8 94       	cli
   100d2:	de bf       	out	0x3e, r29	; 62
   100d4:	0f be       	out	0x3f, r0	; 63
   100d6:	cd bf       	out	0x3d, r28	; 61
   100d8:	8c 01       	movw	r16, r24
   100da:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
   100dc:	be 01       	movw	r22, r28
   100de:	6f 5f       	subi	r22, 0xFF	; 255
   100e0:	7f 4f       	sbci	r23, 0xFF	; 255
   100e2:	30 d9       	rcall	.-3488   	; 0xf344 <stat>
   100e4:	01 96       	adiw	r24, 0x01	; 1
   100e6:	89 f4       	brne	.+34     	; 0x1010a <ls_info+0x5e>
    {
        printf("can not stat: %s\n", name);
   100e8:	1f 93       	push	r17
   100ea:	0f 93       	push	r16
   100ec:	87 e3       	ldi	r24, 0x37	; 55
   100ee:	9d e0       	ldi	r25, 0x0D	; 13
   100f0:	1f 92       	push	r1
   100f2:	9f 93       	push	r25
   100f4:	8f 93       	push	r24
   100f6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(0);
   100fa:	0f 90       	pop	r0
   100fc:	0f 90       	pop	r0
   100fe:	0f 90       	pop	r0
   10100:	0f 90       	pop	r0
   10102:	0f 90       	pop	r0
   10104:	80 e0       	ldi	r24, 0x00	; 0
   10106:	90 e0       	ldi	r25, 0x00	; 0
   10108:	79 c0       	rjmp	.+242    	; 0x101fc <ls_info+0x150>
    }

    if(!verbose)
   1010a:	ef 28       	or	r14, r15
   1010c:	91 f4       	brne	.+36     	; 0x10132 <ls_info+0x86>
    {
        printf("%s\n",basename(name));
   1010e:	c8 01       	movw	r24, r16
   10110:	0e 94 78 77 	call	0xeef0	; 0xeef0 <basename>
   10114:	9f 93       	push	r25
   10116:	8f 93       	push	r24
   10118:	83 e3       	ldi	r24, 0x33	; 51
   1011a:	9d e0       	ldi	r25, 0x0D	; 13
   1011c:	1f 92       	push	r1
   1011e:	9f 93       	push	r25
   10120:	8f 93       	push	r24
   10122:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(1);
   10126:	0f 90       	pop	r0
   10128:	0f 90       	pop	r0
   1012a:	0f 90       	pop	r0
   1012c:	0f 90       	pop	r0
   1012e:	0f 90       	pop	r0
   10130:	63 c0       	rjmp	.+198    	; 0x101f8 <ls_info+0x14c>
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   10132:	49 84       	ldd	r4, Y+9	; 0x09
   10134:	5a 84       	ldd	r5, Y+10	; 0x0a
   10136:	6b 84       	ldd	r6, Y+11	; 0x0b
   10138:	7c 84       	ldd	r7, Y+12	; 0x0c
   1013a:	d3 01       	movw	r26, r6
   1013c:	c2 01       	movw	r24, r4
   1013e:	88 27       	eor	r24, r24
   10140:	90 7f       	andi	r25, 0xF0	; 240
   10142:	aa 27       	eor	r26, r26
   10144:	bb 27       	eor	r27, r27
   10146:	81 15       	cp	r24, r1
   10148:	90 44       	sbci	r25, 0x40	; 64
   1014a:	a1 05       	cpc	r26, r1
   1014c:	b1 05       	cpc	r27, r1
   1014e:	11 f4       	brne	.+4      	; 0x10154 <ls_info+0xa8>
        *p++ = 'd';
   10150:	84 e6       	ldi	r24, 0x64	; 100
   10152:	01 c0       	rjmp	.+2      	; 0x10156 <ls_info+0xaa>
    else
        *p++ = '-';
   10154:	8d e2       	ldi	r24, 0x2D	; 45
   10156:	89 ab       	std	Y+49, r24	; 0x31
   10158:	fe 01       	movw	r30, r28
   1015a:	f1 96       	adiw	r30, 0x31	; 49
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   1015c:	e1 2c       	mov	r14, r1
   1015e:	ff 24       	eor	r15, r15
   10160:	f3 94       	inc	r15
   10162:	20 e0       	ldi	r18, 0x00	; 0
   10164:	30 e0       	ldi	r19, 0x00	; 0
   10166:	5f 01       	movw	r10, r30
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   10168:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   1016a:	53 e0       	ldi	r21, 0x03	; 3
   1016c:	c5 2e       	mov	r12, r21
   1016e:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
   10170:	c7 01       	movw	r24, r14
   10172:	a0 e0       	ldi	r26, 0x00	; 0
   10174:	b0 e0       	ldi	r27, 0x00	; 0
   10176:	84 21       	and	r24, r4
   10178:	95 21       	and	r25, r5
   1017a:	a6 21       	and	r26, r6
   1017c:	b7 21       	and	r27, r7
   1017e:	89 2b       	or	r24, r25
   10180:	8a 2b       	or	r24, r26
   10182:	8b 2b       	or	r24, r27
   10184:	51 f0       	breq	.+20     	; 0x1019a <ls_info+0xee>
            *p++ = cm[ i % 3];
   10186:	c9 01       	movw	r24, r18
   10188:	b6 01       	movw	r22, r12
   1018a:	0e 94 99 e4 	call	0x1c932	; 0x1c932 <__divmodhi4>
   1018e:	dc 01       	movw	r26, r24
   10190:	a2 5d       	subi	r26, 0xD2	; 210
   10192:	b4 4f       	sbci	r27, 0xF4	; 244
   10194:	8c 91       	ld	r24, X
   10196:	81 83       	std	Z+1, r24	; 0x01
   10198:	01 c0       	rjmp	.+2      	; 0x1019c <ls_info+0xf0>
        else
            *p++ = '-';
   1019a:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   1019c:	f6 94       	lsr	r15
   1019e:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   101a0:	2f 5f       	subi	r18, 0xFF	; 255
   101a2:	3f 4f       	sbci	r19, 0xFF	; 255
   101a4:	31 96       	adiw	r30, 0x01	; 1
   101a6:	29 30       	cpi	r18, 0x09	; 9
   101a8:	31 05       	cpc	r19, r1
   101aa:	11 f7       	brne	.-60     	; 0x10170 <ls_info+0xc4>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   101ac:	1b ae       	std	Y+59, r1	; 0x3b

    printf("%s none none %12ld %s %s\n",
   101ae:	c8 01       	movw	r24, r16
   101b0:	0e 94 78 77 	call	0xeef0	; 0xeef0 <basename>
   101b4:	18 2f       	mov	r17, r24
   101b6:	09 2f       	mov	r16, r25
   101b8:	69 a5       	ldd	r22, Y+41	; 0x29
   101ba:	7a a5       	ldd	r23, Y+42	; 0x2a
   101bc:	8b a5       	ldd	r24, Y+43	; 0x2b
   101be:	9c a5       	ldd	r25, Y+44	; 0x2c
   101c0:	0e 94 53 77 	call	0xeea6	; 0xeea6 <mctime>
   101c4:	0f 93       	push	r16
   101c6:	1f 93       	push	r17
   101c8:	9f 93       	push	r25
   101ca:	8f 93       	push	r24
   101cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
   101ce:	8f 93       	push	r24
   101d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
   101d2:	8f 93       	push	r24
   101d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
   101d6:	8f 93       	push	r24
   101d8:	89 8d       	ldd	r24, Y+25	; 0x19
   101da:	8f 93       	push	r24
   101dc:	bf 92       	push	r11
   101de:	af 92       	push	r10
   101e0:	89 e1       	ldi	r24, 0x19	; 25
   101e2:	9d e0       	ldi	r25, 0x0D	; 13
   101e4:	1f 92       	push	r1
   101e6:	9f 93       	push	r25
   101e8:	8f 93       	push	r24
   101ea:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   101ee:	0f b6       	in	r0, 0x3f	; 63
   101f0:	f8 94       	cli
   101f2:	de bf       	out	0x3e, r29	; 62
   101f4:	0f be       	out	0x3f, r0	; 63
   101f6:	cd bf       	out	0x3d, r28	; 61
   101f8:	81 e0       	ldi	r24, 0x01	; 1
   101fa:	90 e0       	ldi	r25, 0x00	; 0
}
   101fc:	ec 96       	adiw	r28, 0x3c	; 60
   101fe:	0f b6       	in	r0, 0x3f	; 63
   10200:	f8 94       	cli
   10202:	de bf       	out	0x3e, r29	; 62
   10204:	0f be       	out	0x3f, r0	; 63
   10206:	cd bf       	out	0x3d, r28	; 61
   10208:	df 91       	pop	r29
   1020a:	cf 91       	pop	r28
   1020c:	1f 91       	pop	r17
   1020e:	0f 91       	pop	r16
   10210:	ff 90       	pop	r15
   10212:	ef 90       	pop	r14
   10214:	df 90       	pop	r13
   10216:	cf 90       	pop	r12
   10218:	bf 90       	pop	r11
   1021a:	af 90       	pop	r10
   1021c:	7f 90       	pop	r7
   1021e:	6f 90       	pop	r6
   10220:	5f 90       	pop	r5
   10222:	4f 90       	pop	r4
   10224:	08 95       	ret

00010226 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   10226:	2f 92       	push	r2
   10228:	3f 92       	push	r3
   1022a:	4f 92       	push	r4
   1022c:	5f 92       	push	r5
   1022e:	6f 92       	push	r6
   10230:	8f 92       	push	r8
   10232:	9f 92       	push	r9
   10234:	af 92       	push	r10
   10236:	bf 92       	push	r11
   10238:	cf 92       	push	r12
   1023a:	df 92       	push	r13
   1023c:	ef 92       	push	r14
   1023e:	ff 92       	push	r15
   10240:	0f 93       	push	r16
   10242:	1f 93       	push	r17
   10244:	cf 93       	push	r28
   10246:	df 93       	push	r29
   10248:	cd b7       	in	r28, 0x3d	; 61
   1024a:	de b7       	in	r29, 0x3e	; 62
   1024c:	c0 54       	subi	r28, 0x40	; 64
   1024e:	d1 09       	sbc	r29, r1
   10250:	0f b6       	in	r0, 0x3f	; 63
   10252:	f8 94       	cli
   10254:	de bf       	out	0x3e, r29	; 62
   10256:	0f be       	out	0x3f, r0	; 63
   10258:	cd bf       	out	0x3d, r28	; 61
   1025a:	7c 01       	movw	r14, r24
   1025c:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   1025e:	19 aa       	std	Y+49, r1	; 0x31
   10260:	8e 01       	movw	r16, r28
   10262:	0f 5c       	subi	r16, 0xCF	; 207
   10264:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   10266:	00 97       	sbiw	r24, 0x00	; 0
   10268:	91 f4       	brne	.+36     	; 0x1028e <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   1026a:	6c e0       	ldi	r22, 0x0C	; 12
   1026c:	70 e0       	ldi	r23, 0x00	; 0
   1026e:	c8 01       	movw	r24, r16
   10270:	0e 94 ce 77 	call	0xef9c	; 0xef9c <getcwd>
   10274:	89 2b       	or	r24, r25
   10276:	d1 f4       	brne	.+52     	; 0x102ac <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   10278:	88 ef       	ldi	r24, 0xF8	; 248
   1027a:	9c e0       	ldi	r25, 0x0C	; 12
   1027c:	1f 92       	push	r1
   1027e:	9f 93       	push	r25
   10280:	8f 93       	push	r24
   10282:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            return(0); 
   10286:	0f 90       	pop	r0
   10288:	0f 90       	pop	r0
   1028a:	0f 90       	pop	r0
   1028c:	3b c0       	rjmp	.+118    	; 0x10304 <ls+0xde>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   1028e:	fc 01       	movw	r30, r24
   10290:	80 81       	ld	r24, Z
   10292:	88 23       	and	r24, r24
   10294:	51 f3       	breq	.-44     	; 0x1026a <ls+0x44>
   10296:	66 e4       	ldi	r22, 0x46	; 70
   10298:	72 e1       	ldi	r23, 0x12	; 18
   1029a:	c7 01       	movw	r24, r14
   1029c:	0e 94 7e 32 	call	0x64fc	; 0x64fc <MATCH>
   102a0:	89 2b       	or	r24, r25
   102a2:	19 f7       	brne	.-58     	; 0x1026a <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   102a4:	b7 01       	movw	r22, r14
   102a6:	c8 01       	movw	r24, r16
   102a8:	0e 94 a1 31 	call	0x6342	; 0x6342 <strcpy>
    }
    len = strlen(fullpath);
   102ac:	f8 01       	movw	r30, r16
   102ae:	01 90       	ld	r0, Z+
   102b0:	00 20       	and	r0, r0
   102b2:	e9 f7       	brne	.-6      	; 0x102ae <ls+0x88>
   102b4:	31 97       	sbiw	r30, 0x01	; 1
   102b6:	1f 01       	movw	r2, r30
   102b8:	20 1a       	sub	r2, r16
   102ba:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   102bc:	1f 93       	push	r17
   102be:	0f 93       	push	r16
   102c0:	8a ee       	ldi	r24, 0xEA	; 234
   102c2:	9c e0       	ldi	r25, 0x0C	; 12
   102c4:	1f 92       	push	r1
   102c6:	9f 93       	push	r25
   102c8:	8f 93       	push	r24
   102ca:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>

    if (stat(fullpath, &st)) 
   102ce:	be 01       	movw	r22, r28
   102d0:	6f 5f       	subi	r22, 0xFF	; 255
   102d2:	7f 4f       	sbci	r23, 0xFF	; 255
   102d4:	c8 01       	movw	r24, r16
   102d6:	36 d8       	rcall	.-3988   	; 0xf344 <stat>
   102d8:	7c 01       	movw	r14, r24
   102da:	0f 90       	pop	r0
   102dc:	0f 90       	pop	r0
   102de:	0f 90       	pop	r0
   102e0:	0f 90       	pop	r0
   102e2:	0f 90       	pop	r0
   102e4:	89 2b       	or	r24, r25
   102e6:	89 f0       	breq	.+34     	; 0x1030a <ls+0xe4>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   102e8:	1f 93       	push	r17
   102ea:	0f 93       	push	r16
   102ec:	84 ed       	ldi	r24, 0xD4	; 212
   102ee:	9c e0       	ldi	r25, 0x0C	; 12
   102f0:	1f 92       	push	r1
   102f2:	9f 93       	push	r25
   102f4:	8f 93       	push	r24
   102f6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(0); 
   102fa:	0f 90       	pop	r0
   102fc:	0f 90       	pop	r0
   102fe:	0f 90       	pop	r0
   10300:	0f 90       	pop	r0
   10302:	0f 90       	pop	r0
   10304:	e1 2c       	mov	r14, r1
   10306:	f1 2c       	mov	r15, r1
   10308:	86 c0       	rjmp	.+268    	; 0x10416 <ls+0x1f0>
    }

    switch (st.st_mode & S_IFMT) 
   1030a:	89 85       	ldd	r24, Y+9	; 0x09
   1030c:	9a 85       	ldd	r25, Y+10	; 0x0a
   1030e:	ab 85       	ldd	r26, Y+11	; 0x0b
   10310:	bc 85       	ldd	r27, Y+12	; 0x0c
   10312:	88 27       	eor	r24, r24
   10314:	90 7f       	andi	r25, 0xF0	; 240
   10316:	aa 27       	eor	r26, r26
   10318:	bb 27       	eor	r27, r27
   1031a:	81 15       	cp	r24, r1
   1031c:	f0 e4       	ldi	r31, 0x40	; 64
   1031e:	9f 07       	cpc	r25, r31
   10320:	a1 05       	cpc	r26, r1
   10322:	b1 05       	cpc	r27, r1
   10324:	51 f0       	breq	.+20     	; 0x1033a <ls+0x114>
   10326:	81 15       	cp	r24, r1
   10328:	90 48       	sbci	r25, 0x80	; 128
   1032a:	a1 05       	cpc	r26, r1
   1032c:	b1 05       	cpc	r27, r1
   1032e:	09 f0       	breq	.+2      	; 0x10332 <ls+0x10c>
   10330:	62 c0       	rjmp	.+196    	; 0x103f6 <ls+0x1d0>
    {
    case S_IFREG:
        ls_info(fullpath,verbose);
   10332:	b4 01       	movw	r22, r8
   10334:	c8 01       	movw	r24, r16
   10336:	ba de       	rcall	.-652    	; 0x100ac <ls_info>
   10338:	5e c0       	rjmp	.+188    	; 0x103f6 <ls+0x1d0>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
   1033a:	c8 01       	movw	r24, r16
   1033c:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <opendir>
   10340:	5c 01       	movw	r10, r24
        if(!dirp)
   10342:	89 2b       	or	r24, r25
   10344:	69 f0       	breq	.+26     	; 0x10360 <ls+0x13a>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   10346:	e1 2c       	mov	r14, r1
   10348:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   1034a:	c8 01       	movw	r24, r16
   1034c:	82 0d       	add	r24, r2
   1034e:	93 1d       	adc	r25, r3
   10350:	21 96       	adiw	r28, 0x01	; 1
   10352:	9f af       	std	Y+63, r25	; 0x3f
   10354:	8e af       	std	Y+62, r24	; 0x3e
   10356:	21 97       	sbiw	r28, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10358:	81 ea       	ldi	r24, 0xA1	; 161
   1035a:	9c e0       	ldi	r25, 0x0C	; 12
   1035c:	2c 01       	movw	r4, r24
   1035e:	26 c0       	rjmp	.+76     	; 0x103ac <ls+0x186>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   10360:	84 ec       	ldi	r24, 0xC4	; 196
   10362:	9c e0       	ldi	r25, 0x0C	; 12
   10364:	1f 92       	push	r1
   10366:	9f 93       	push	r25
   10368:	8f 93       	push	r24
   1036a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            return(0);
   1036e:	0f 90       	pop	r0
   10370:	0f 90       	pop	r0
   10372:	0f 90       	pop	r0
   10374:	50 c0       	rjmp	.+160    	; 0x10416 <ls+0x1f0>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   10376:	f6 01       	movw	r30, r12
   10378:	80 81       	ld	r24, Z
   1037a:	88 23       	and	r24, r24
   1037c:	e9 f0       	breq	.+58     	; 0x103b8 <ls+0x192>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   1037e:	f6 01       	movw	r30, r12
   10380:	01 90       	ld	r0, Z+
   10382:	00 20       	and	r0, r0
   10384:	e9 f7       	brne	.-6      	; 0x10380 <ls+0x15a>
   10386:	31 97       	sbiw	r30, 0x01	; 1
   10388:	ec 19       	sub	r30, r12
   1038a:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   1038c:	e2 0d       	add	r30, r2
   1038e:	f3 1d       	adc	r31, r3
   10390:	3d 97       	sbiw	r30, 0x0d	; 13
   10392:	b4 f0       	brlt	.+44     	; 0x103c0 <ls+0x19a>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10394:	df 92       	push	r13
   10396:	cf 92       	push	r12
   10398:	1f 92       	push	r1
   1039a:	5f 92       	push	r5
   1039c:	4f 92       	push	r4
   1039e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
                continue;
   103a2:	0f 90       	pop	r0
   103a4:	0f 90       	pop	r0
   103a6:	0f 90       	pop	r0
   103a8:	0f 90       	pop	r0
   103aa:	0f 90       	pop	r0
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   103ac:	c5 01       	movw	r24, r10
   103ae:	0e 94 9a 78 	call	0xf134	; 0xf134 <readdir>
   103b2:	6c 01       	movw	r12, r24
   103b4:	89 2b       	or	r24, r25
   103b6:	f9 f6       	brne	.-66     	; 0x10376 <ls+0x150>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   103b8:	c5 01       	movw	r24, r10
   103ba:	0e 94 61 78 	call	0xf0c2	; 0xf0c2 <closedir>
        break;
   103be:	1d c0       	rjmp	.+58     	; 0x103fa <ls+0x1d4>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   103c0:	68 e3       	ldi	r22, 0x38	; 56
   103c2:	78 e0       	ldi	r23, 0x08	; 8
   103c4:	c8 01       	movw	r24, r16
   103c6:	0e 94 7e 32 	call	0x64fc	; 0x64fc <MATCH>
   103ca:	89 2b       	or	r24, r25
   103cc:	29 f4       	brne	.+10     	; 0x103d8 <ls+0x1b2>
            {
                strcat(fullpath,"/");
   103ce:	68 e3       	ldi	r22, 0x38	; 56
   103d0:	78 e0       	ldi	r23, 0x08	; 8
   103d2:	c8 01       	movw	r24, r16
   103d4:	0e 94 c2 31 	call	0x6384	; 0x6384 <strcat>
            }
            strcat(fullpath,de->d_name);
   103d8:	b6 01       	movw	r22, r12
   103da:	c8 01       	movw	r24, r16
   103dc:	0e 94 c2 31 	call	0x6384	; 0x6384 <strcat>
            files +=ls_info(fullpath,verbose);
   103e0:	b4 01       	movw	r22, r8
   103e2:	c8 01       	movw	r24, r16
   103e4:	63 de       	rcall	.-826    	; 0x100ac <ls_info>
   103e6:	e8 0e       	add	r14, r24
   103e8:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   103ea:	21 96       	adiw	r28, 0x01	; 1
   103ec:	ee ad       	ldd	r30, Y+62	; 0x3e
   103ee:	ff ad       	ldd	r31, Y+63	; 0x3f
   103f0:	21 97       	sbiw	r28, 0x01	; 1
   103f2:	10 82       	st	Z, r1
   103f4:	db cf       	rjmp	.-74     	; 0x103ac <ls+0x186>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   103f6:	e1 2c       	mov	r14, r1
   103f8:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   103fa:	ff 92       	push	r15
   103fc:	ef 92       	push	r14
   103fe:	86 e9       	ldi	r24, 0x96	; 150
   10400:	9c e0       	ldi	r25, 0x0C	; 12
   10402:	1f 92       	push	r1
   10404:	9f 93       	push	r25
   10406:	8f 93       	push	r24
   10408:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    return(files);
   1040c:	0f 90       	pop	r0
   1040e:	0f 90       	pop	r0
   10410:	0f 90       	pop	r0
   10412:	0f 90       	pop	r0
   10414:	0f 90       	pop	r0
}
   10416:	c7 01       	movw	r24, r14
   10418:	c0 5c       	subi	r28, 0xC0	; 192
   1041a:	df 4f       	sbci	r29, 0xFF	; 255
   1041c:	0f b6       	in	r0, 0x3f	; 63
   1041e:	f8 94       	cli
   10420:	de bf       	out	0x3e, r29	; 62
   10422:	0f be       	out	0x3f, r0	; 63
   10424:	cd bf       	out	0x3d, r28	; 61
   10426:	df 91       	pop	r29
   10428:	cf 91       	pop	r28
   1042a:	1f 91       	pop	r17
   1042c:	0f 91       	pop	r16
   1042e:	ff 90       	pop	r15
   10430:	ef 90       	pop	r14
   10432:	df 90       	pop	r13
   10434:	cf 90       	pop	r12
   10436:	bf 90       	pop	r11
   10438:	af 90       	pop	r10
   1043a:	9f 90       	pop	r9
   1043c:	8f 90       	pop	r8
   1043e:	6f 90       	pop	r6
   10440:	5f 90       	pop	r5
   10442:	4f 90       	pop	r4
   10444:	3f 90       	pop	r3
   10446:	2f 90       	pop	r2
   10448:	08 95       	ret

0001044a <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   1044a:	a0 e0       	ldi	r26, 0x00	; 0
   1044c:	b1 e0       	ldi	r27, 0x01	; 1
   1044e:	eb e2       	ldi	r30, 0x2B	; 43
   10450:	f2 e8       	ldi	r31, 0x82	; 130
   10452:	0c 94 30 e5 	jmp	0x1ca60	; 0x1ca60 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10456:	fb 01       	movw	r30, r22
   10458:	c0 80       	ld	r12, Z
   1045a:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   1045c:	c1 14       	cp	r12, r1
   1045e:	d1 04       	cpc	r13, r1
   10460:	19 f4       	brne	.+6      	; 0x10468 <posix_tests+0x1e>
        return(0);
   10462:	80 e0       	ldi	r24, 0x00	; 0
   10464:	90 e0       	ldi	r25, 0x00	; 0
   10466:	67 c1       	rjmp	.+718    	; 0x10736 <posix_tests+0x2ec>
   10468:	4b 01       	movw	r8, r22
   1046a:	8c 01       	movw	r16, r24

    if( MATCH(ptr,"posix") )
   1046c:	62 e3       	ldi	r22, 0x32	; 50
   1046e:	7b e0       	ldi	r23, 0x0B	; 11
   10470:	c6 01       	movw	r24, r12
   10472:	0e 94 7e 32 	call	0x64fc	; 0x64fc <MATCH>
   10476:	89 2b       	or	r24, r25
   10478:	a9 f0       	breq	.+42     	; 0x104a4 <posix_tests+0x5a>
    {
        ptr = argv[ind++];
   1047a:	f4 01       	movw	r30, r8
   1047c:	c2 80       	ldd	r12, Z+2	; 0x02
   1047e:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   10480:	c1 14       	cp	r12, r1
   10482:	d1 04       	cpc	r13, r1
   10484:	21 f4       	brne	.+8      	; 0x1048e <posix_tests+0x44>
        {
            posix_help(1);
   10486:	81 e0       	ldi	r24, 0x01	; 1
   10488:	90 e0       	ldi	r25, 0x00	; 0
   1048a:	74 dc       	rcall	.-1816   	; 0xfd74 <posix_help>
   1048c:	52 c1       	rjmp	.+676    	; 0x10732 <posix_tests+0x2e8>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   1048e:	67 ef       	ldi	r22, 0xF7	; 247
   10490:	75 e1       	ldi	r23, 0x15	; 21
   10492:	c6 01       	movw	r24, r12
   10494:	0e 94 7e 32 	call	0x64fc	; 0x64fc <MATCH>
   10498:	89 2b       	or	r24, r25
   1049a:	a9 f7       	brne	.-22     	; 0x10486 <posix_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   1049c:	42 e0       	ldi	r20, 0x02	; 2
   1049e:	64 2e       	mov	r6, r20
   104a0:	71 2c       	mov	r7, r1
   104a2:	03 c0       	rjmp	.+6      	; 0x104aa <posix_tests+0x60>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   104a4:	66 24       	eor	r6, r6
   104a6:	63 94       	inc	r6
   104a8:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   104aa:	73 01       	movw	r14, r6
   104ac:	ff ef       	ldi	r31, 0xFF	; 255
   104ae:	ef 1a       	sub	r14, r31
   104b0:	ff 0a       	sbc	r15, r31
   104b2:	98 01       	movw	r18, r16
   104b4:	a7 01       	movw	r20, r14
   104b6:	68 e3       	ldi	r22, 0x38	; 56
   104b8:	7b e0       	ldi	r23, 0x0B	; 11
   104ba:	c6 01       	movw	r24, r12
   104bc:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   104c0:	89 2b       	or	r24, r25
   104c2:	a1 f1       	breq	.+104    	; 0x1052c <posix_tests+0xe2>
   104c4:	73 01       	movw	r14, r6
   104c6:	ee 0c       	add	r14, r14
   104c8:	ff 1c       	adc	r15, r15
   104ca:	e8 0c       	add	r14, r8
   104cc:	f9 1c       	adc	r15, r9
   104ce:	57 01       	movw	r10, r14
   104d0:	47 01       	movw	r8, r14
   104d2:	63 01       	movw	r12, r6
   104d4:	41 2c       	mov	r4, r1
   104d6:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   104d8:	c0 16       	cp	r12, r16
   104da:	d1 06       	cpc	r13, r17
   104dc:	1c f5       	brge	.+70     	; 0x10524 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   104de:	6c e3       	ldi	r22, 0x3C	; 60
   104e0:	7b e0       	ldi	r23, 0x0B	; 11
   104e2:	f4 01       	movw	r30, r8
   104e4:	81 91       	ld	r24, Z+
   104e6:	91 91       	ld	r25, Z+
   104e8:	4f 01       	movw	r8, r30
   104ea:	0e 94 7e 32 	call	0x64fc	; 0x64fc <MATCH>
   104ee:	89 2b       	or	r24, r25
   104f0:	19 f0       	breq	.+6      	; 0x104f8 <posix_tests+0xae>
                page = 1;
   104f2:	44 24       	eor	r4, r4
   104f4:	43 94       	inc	r4
   104f6:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   104f8:	ff ef       	ldi	r31, 0xFF	; 255
   104fa:	cf 1a       	sub	r12, r31
   104fc:	df 0a       	sbc	r13, r31
   104fe:	ec cf       	rjmp	.-40     	; 0x104d8 <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10500:	6c e3       	ldi	r22, 0x3C	; 60
   10502:	7b e0       	ldi	r23, 0x0B	; 11
   10504:	f5 01       	movw	r30, r10
   10506:	81 91       	ld	r24, Z+
   10508:	91 91       	ld	r25, Z+
   1050a:	5f 01       	movw	r10, r30
   1050c:	0e 94 7e 32 	call	0x64fc	; 0x64fc <MATCH>
   10510:	89 2b       	or	r24, r25
   10512:	29 f4       	brne	.+10     	; 0x1051e <posix_tests+0xd4>
                cat(argv[ind], page);
   10514:	b2 01       	movw	r22, r4
   10516:	f7 01       	movw	r30, r14
   10518:	80 81       	ld	r24, Z
   1051a:	91 81       	ldd	r25, Z+1	; 0x01
   1051c:	5a dd       	rcall	.-1356   	; 0xffd2 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   1051e:	ff ef       	ldi	r31, 0xFF	; 255
   10520:	6f 1a       	sub	r6, r31
   10522:	7f 0a       	sbc	r7, r31
   10524:	60 16       	cp	r6, r16
   10526:	71 06       	cpc	r7, r17
   10528:	5c f3       	brlt	.-42     	; 0x10500 <posix_tests+0xb6>
   1052a:	03 c1       	rjmp	.+518    	; 0x10732 <posix_tests+0x2e8>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   1052c:	53 01       	movw	r10, r6
   1052e:	82 e0       	ldi	r24, 0x02	; 2
   10530:	a8 0e       	add	r10, r24
   10532:	b1 1c       	adc	r11, r1
   10534:	98 01       	movw	r18, r16
   10536:	a5 01       	movw	r20, r10
   10538:	6f e3       	ldi	r22, 0x3F	; 63
   1053a:	7b e0       	ldi	r23, 0x0B	; 11
   1053c:	c6 01       	movw	r24, r12
   1053e:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   10542:	89 2b       	or	r24, r25
   10544:	61 f0       	breq	.+24     	; 0x1055e <posix_tests+0x114>
    {
        copy(argv[ind],argv[ind+1]);
   10546:	ee 0c       	add	r14, r14
   10548:	ff 1c       	adc	r15, r15
   1054a:	f4 01       	movw	r30, r8
   1054c:	ee 0d       	add	r30, r14
   1054e:	ff 1d       	adc	r31, r15
   10550:	60 81       	ld	r22, Z
   10552:	71 81       	ldd	r23, Z+1	; 0x01
   10554:	32 97       	sbiw	r30, 0x02	; 2
   10556:	80 81       	ld	r24, Z
   10558:	91 81       	ldd	r25, Z+1	; 0x01
   1055a:	28 dc       	rcall	.-1968   	; 0xfdac <copy>
   1055c:	ea c0       	rjmp	.+468    	; 0x10732 <posix_tests+0x2e8>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   1055e:	98 01       	movw	r18, r16
   10560:	a7 01       	movw	r20, r14
   10562:	64 e4       	ldi	r22, 0x44	; 68
   10564:	7b e0       	ldi	r23, 0x0B	; 11
   10566:	c6 01       	movw	r24, r12
   10568:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1056c:	89 2b       	or	r24, r25
   1056e:	59 f0       	breq	.+22     	; 0x10586 <posix_tests+0x13c>
    {
        chdir(argv[ind]);
   10570:	73 01       	movw	r14, r6
   10572:	ee 0c       	add	r14, r14
   10574:	ff 1c       	adc	r15, r15
   10576:	f4 01       	movw	r30, r8
   10578:	ee 0d       	add	r30, r14
   1057a:	ff 1d       	adc	r31, r15
   1057c:	80 81       	ld	r24, Z
   1057e:	91 81       	ldd	r25, Z+1	; 0x01
   10580:	0e 94 86 77 	call	0xef0c	; 0xef0c <chdir>
   10584:	d6 c0       	rjmp	.+428    	; 0x10732 <posix_tests+0x2e8>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   10586:	98 01       	movw	r18, r16
   10588:	a3 01       	movw	r20, r6
   1058a:	62 e6       	ldi	r22, 0x62	; 98
   1058c:	78 e0       	ldi	r23, 0x08	; 8
   1058e:	c6 01       	movw	r24, r12
   10590:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   10594:	89 2b       	or	r24, r25
   10596:	69 f1       	breq	.+90     	; 0x105f2 <posix_tests+0x1a8>
   10598:	73 01       	movw	r14, r6
   1059a:	ee 0c       	add	r14, r14
   1059c:	ff 1c       	adc	r15, r15
   1059e:	e8 0c       	add	r14, r8
   105a0:	f9 1c       	adc	r15, r9
   105a2:	c1 2c       	mov	r12, r1
   105a4:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   105a6:	c6 01       	movw	r24, r12
   105a8:	86 0d       	add	r24, r6
   105aa:	97 1d       	adc	r25, r7
   105ac:	80 17       	cp	r24, r16
   105ae:	91 07       	cpc	r25, r17
   105b0:	b4 f4       	brge	.+44     	; 0x105de <posix_tests+0x194>
        {
            if(!MATCH(argv[i],"-l"))
   105b2:	67 e4       	ldi	r22, 0x47	; 71
   105b4:	7b e0       	ldi	r23, 0x0B	; 11
   105b6:	f7 01       	movw	r30, r14
   105b8:	80 81       	ld	r24, Z
   105ba:	91 81       	ldd	r25, Z+1	; 0x01
   105bc:	0e 94 7e 32 	call	0x64fc	; 0x64fc <MATCH>
   105c0:	89 2b       	or	r24, r25
   105c2:	31 f4       	brne	.+12     	; 0x105d0 <posix_tests+0x186>
                ls(argv[i],1);
   105c4:	61 e0       	ldi	r22, 0x01	; 1
   105c6:	70 e0       	ldi	r23, 0x00	; 0
   105c8:	f7 01       	movw	r30, r14
   105ca:	80 81       	ld	r24, Z
   105cc:	91 81       	ldd	r25, Z+1	; 0x01
   105ce:	2b de       	rcall	.-938    	; 0x10226 <ls>
            ++args;
   105d0:	ff ef       	ldi	r31, 0xFF	; 255
   105d2:	cf 1a       	sub	r12, r31
   105d4:	df 0a       	sbc	r13, r31
   105d6:	82 e0       	ldi	r24, 0x02	; 2
   105d8:	e8 0e       	add	r14, r24
   105da:	f1 1c       	adc	r15, r1
   105dc:	e4 cf       	rjmp	.-56     	; 0x105a6 <posix_tests+0x15c>
        }
        if(!args)
   105de:	c1 14       	cp	r12, r1
   105e0:	d1 04       	cpc	r13, r1
   105e2:	09 f0       	breq	.+2      	; 0x105e6 <posix_tests+0x19c>
        {
            ls("",1);
   105e4:	a6 c0       	rjmp	.+332    	; 0x10732 <posix_tests+0x2e8>
   105e6:	61 e0       	ldi	r22, 0x01	; 1
   105e8:	70 e0       	ldi	r23, 0x00	; 0
   105ea:	87 e1       	ldi	r24, 0x17	; 23
   105ec:	97 e1       	ldi	r25, 0x17	; 23
   105ee:	1b de       	rcall	.-970    	; 0x10226 <ls>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   105f0:	a0 c0       	rjmp	.+320    	; 0x10732 <posix_tests+0x2e8>
   105f2:	98 01       	movw	r18, r16
   105f4:	a7 01       	movw	r20, r14
   105f6:	6a e4       	ldi	r22, 0x4A	; 74
   105f8:	7b e0       	ldi	r23, 0x0B	; 11
   105fa:	c6 01       	movw	r24, r12
   105fc:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   10600:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10602:	19 f1       	breq	.+70     	; 0x1064a <posix_tests+0x200>
   10604:	e0 16       	cp	r14, r16
   10606:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   10608:	7c f4       	brge	.+30     	; 0x10628 <posix_tests+0x1de>
   1060a:	ee 0c       	add	r14, r14
   1060c:	ff 1c       	adc	r15, r15
   1060e:	f4 01       	movw	r30, r8
   10610:	ee 0d       	add	r30, r14
   10612:	ff 1d       	adc	r31, r15
   10614:	48 e0       	ldi	r20, 0x08	; 8
   10616:	50 e0       	ldi	r21, 0x00	; 0
   10618:	60 e0       	ldi	r22, 0x00	; 0
   1061a:	70 e0       	ldi	r23, 0x00	; 0
   1061c:	80 81       	ld	r24, Z
   1061e:	91 81       	ldd	r25, Z+1	; 0x01
   10620:	0e 94 e4 46 	call	0x8dc8	; 0x8dc8 <strtol>
   10624:	ab 01       	movw	r20, r22
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10626:	02 c0       	rjmp	.+4      	; 0x1062c <posix_tests+0x1e2>
   10628:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        mkdir(argv[ind],mode);
   1062a:	51 e0       	ldi	r21, 0x01	; 1
   1062c:	05 2e       	mov	r0, r21
   1062e:	00 0c       	add	r0, r0
   10630:	66 0b       	sbc	r22, r22
   10632:	77 0b       	sbc	r23, r23
   10634:	73 01       	movw	r14, r6
   10636:	ee 0c       	add	r14, r14
   10638:	ff 1c       	adc	r15, r15
   1063a:	f4 01       	movw	r30, r8
   1063c:	ee 0d       	add	r30, r14
   1063e:	ff 1d       	adc	r31, r15
   10640:	80 81       	ld	r24, Z
   10642:	91 81       	ldd	r25, Z+1	; 0x01
   10644:	0e 94 f3 77 	call	0xefe6	; 0xefe6 <mkdir>
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10648:	74 c0       	rjmp	.+232    	; 0x10732 <posix_tests+0x2e8>
   1064a:	98 01       	movw	r18, r16
   1064c:	a7 01       	movw	r20, r14
   1064e:	60 e5       	ldi	r22, 0x50	; 80
   10650:	7b e0       	ldi	r23, 0x0B	; 11
   10652:	c6 01       	movw	r24, r12
   10654:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   10658:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   1065a:	79 f0       	breq	.+30     	; 0x1067a <posix_tests+0x230>
   1065c:	73 01       	movw	r14, r6
   1065e:	ee 0c       	add	r14, r14
   10660:	ff 1c       	adc	r15, r15
   10662:	f4 01       	movw	r30, r8
   10664:	ee 0d       	add	r30, r14
   10666:	ff 1d       	adc	r31, r15
   10668:	80 81       	ld	r24, Z
   1066a:	91 81       	ldd	r25, Z+1	; 0x01
   1066c:	0e 94 42 47 	call	0x8e84	; 0x8e84 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10670:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_pagesize+0x1>
   10674:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   10678:	5c c0       	rjmp	.+184    	; 0x10732 <posix_tests+0x2e8>
   1067a:	98 01       	movw	r18, r16
   1067c:	a3 01       	movw	r20, r6
   1067e:	65 e5       	ldi	r22, 0x55	; 85
   10680:	7b e0       	ldi	r23, 0x0B	; 11
   10682:	c6 01       	movw	r24, r12
   10684:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   10688:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   1068a:	a9 f0       	breq	.+42     	; 0x106b6 <posix_tests+0x26c>
   1068c:	6e ef       	ldi	r22, 0xFE	; 254
   1068e:	70 e0       	ldi	r23, 0x00	; 0
   10690:	ce 01       	movw	r24, r28
   10692:	01 96       	adiw	r24, 0x01	; 1
   10694:	0e 94 ce 77 	call	0xef9c	; 0xef9c <getcwd>
   10698:	9f 93       	push	r25
   1069a:	8f 93       	push	r24
   1069c:	84 ee       	ldi	r24, 0xE4	; 228
   1069e:	9d e0       	ldi	r25, 0x0D	; 13
   106a0:	1f 92       	push	r1
   106a2:	9f 93       	push	r25
   106a4:	8f 93       	push	r24
   106a6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   106aa:	0f 90       	pop	r0
   106ac:	0f 90       	pop	r0
   106ae:	0f 90       	pop	r0
   106b0:	0f 90       	pop	r0
   106b2:	0f 90       	pop	r0
        return(1);
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   106b4:	3e c0       	rjmp	.+124    	; 0x10732 <posix_tests+0x2e8>
   106b6:	98 01       	movw	r18, r16
   106b8:	a5 01       	movw	r20, r10
   106ba:	69 e5       	ldi	r22, 0x59	; 89
   106bc:	7b e0       	ldi	r23, 0x0B	; 11
   106be:	c6 01       	movw	r24, r12
   106c0:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   106c4:	89 2b       	or	r24, r25
    {
        rename(argv[ind],argv[ind+1]);
   106c6:	69 f0       	breq	.+26     	; 0x106e2 <posix_tests+0x298>
   106c8:	ee 0c       	add	r14, r14
   106ca:	ff 1c       	adc	r15, r15
   106cc:	f4 01       	movw	r30, r8
   106ce:	ee 0d       	add	r30, r14
   106d0:	ff 1d       	adc	r31, r15
   106d2:	60 81       	ld	r22, Z
   106d4:	71 81       	ldd	r23, Z+1	; 0x01
   106d6:	32 97       	sbiw	r30, 0x02	; 2
   106d8:	80 81       	ld	r24, Z
   106da:	91 81       	ldd	r25, Z+1	; 0x01
   106dc:	0e 94 21 78 	call	0xf042	; 0xf042 <rename>
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   106e0:	28 c0       	rjmp	.+80     	; 0x10732 <posix_tests+0x2e8>
   106e2:	98 01       	movw	r18, r16
   106e4:	a7 01       	movw	r20, r14
   106e6:	60 e6       	ldi	r22, 0x60	; 96
   106e8:	7b e0       	ldi	r23, 0x0B	; 11
   106ea:	c6 01       	movw	r24, r12
   106ec:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   106f0:	89 2b       	or	r24, r25
    {
        unlink(argv[ind]);
   106f2:	59 f0       	breq	.+22     	; 0x1070a <posix_tests+0x2c0>
   106f4:	73 01       	movw	r14, r6
   106f6:	ee 0c       	add	r14, r14
   106f8:	ff 1c       	adc	r15, r15
   106fa:	f4 01       	movw	r30, r8
   106fc:	ee 0d       	add	r30, r14
   106fe:	ff 1d       	adc	r31, r15
   10700:	80 81       	ld	r24, Z
   10702:	91 81       	ldd	r25, Z+1	; 0x01
   10704:	0e 94 40 78 	call	0xf080	; 0xf080 <unlink>
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   10708:	14 c0       	rjmp	.+40     	; 0x10732 <posix_tests+0x2e8>
   1070a:	98 01       	movw	r18, r16
   1070c:	a7 01       	movw	r20, r14
   1070e:	63 e6       	ldi	r22, 0x63	; 99
   10710:	7b e0       	ldi	r23, 0x0B	; 11
   10712:	c6 01       	movw	r24, r12
   10714:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   10718:	89 2b       	or	r24, r25
   1071a:	09 f4       	brne	.+2      	; 0x1071e <posix_tests+0x2d4>
    {
        rmdir(argv[ind]);
   1071c:	a2 ce       	rjmp	.-700    	; 0x10462 <posix_tests+0x18>
   1071e:	73 01       	movw	r14, r6
   10720:	ee 0c       	add	r14, r14
   10722:	ff 1c       	adc	r15, r15
   10724:	f4 01       	movw	r30, r8
   10726:	ee 0d       	add	r30, r14
   10728:	ff 1d       	adc	r31, r15
   1072a:	80 81       	ld	r24, Z
   1072c:	91 81       	ldd	r25, Z+1	; 0x01
   1072e:	0e 94 5f 78 	call	0xf0be	; 0xf0be <rmdir>
        return(1);
   10732:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
   10734:	90 e0       	ldi	r25, 0x00	; 0
   10736:	d3 95       	inc	r29
   10738:	e0 e1       	ldi	r30, 0x10	; 16
   1073a:	0c 94 4c e5 	jmp	0x1ca98	; 0x1ca98 <__epilogue_restores__+0x4>

0001073e <gpib_timer_init>:
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   1073e:	61 e0       	ldi	r22, 0x01	; 1
   10740:	70 e0       	ldi	r23, 0x00	; 0
   10742:	8c e3       	ldi	r24, 0x3C	; 60
   10744:	95 e8       	ldi	r25, 0x85	; 133
   10746:	0e 94 2a 35 	call	0x6a54	; 0x6a54 <set_timers>
   1074a:	01 96       	adiw	r24, 0x01	; 1
   1074c:	51 f4       	brne	.+20     	; 0x10762 <gpib_timer_init+0x24>
        printf("GPIB Clock task init failed\n");
   1074e:	8e e0       	ldi	r24, 0x0E	; 14
   10750:	9f e0       	ldi	r25, 0x0F	; 15
   10752:	1f 92       	push	r1
   10754:	9f 93       	push	r25
   10756:	8f 93       	push	r24
   10758:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1075c:	0f 90       	pop	r0
   1075e:	0f 90       	pop	r0

    gpib_timer_reset();
   10760:	0f 90       	pop	r0
   10762:	78 c1       	rjmp	.+752    	; 0x10a54 <gpib_timer_reset>
   10764:	08 95       	ret

00010766 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10766:	28 2f       	mov	r18, r24
   10768:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   1076a:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   1076c:	88 0f       	add	r24, r24
        if(mask & 1)
   1076e:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10770:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10772:	26 95       	lsr	r18
   10774:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10776:	d1 f7       	brne	.-12     	; 0x1076c <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   10778:	08 95       	ret

0001077a <ppr_set>:
   1077a:	f5 df       	rcall	.-22     	; 0x10766 <reverse_8bits>
   1077c:	80 93 5b 18 	sts	0x185B, r24	; 0x80185b <_ppr_reg>
   10780:	0e 94 be 2c 	call	0x597c	; 0x597c <SPI0_TXRX_Byte>
   10784:	2a 9a       	sbi	0x05, 2	; 5
   10786:	22 9a       	sbi	0x04, 2	; 4
   10788:	2a 98       	cbi	0x05, 2	; 5
   1078a:	22 9a       	sbi	0x04, 2	; 4
   1078c:	08 95       	ret

0001078e <ppr_reg>:
   1078e:	80 91 5b 18 	lds	r24, 0x185B	; 0x80185b <_ppr_reg>
   10792:	e9 cf       	rjmp	.-46     	; 0x10766 <reverse_8bits>
   10794:	08 95       	ret

00010796 <ppr_init>:
   10796:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1079a:	81 ff       	sbrs	r24, 1
   1079c:	0a c0       	rjmp	.+20     	; 0x107b2 <ppr_init+0x1c>
   1079e:	8b ef       	ldi	r24, 0xFB	; 251
   107a0:	9e e0       	ldi	r25, 0x0E	; 14
   107a2:	1f 92       	push	r1
   107a4:	9f 93       	push	r25
   107a6:	8f 93       	push	r24
   107a8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   107ac:	0f 90       	pop	r0
   107ae:	0f 90       	pop	r0
   107b0:	0f 90       	pop	r0
   107b2:	80 e0       	ldi	r24, 0x00	; 0
   107b4:	e2 cf       	rjmp	.-60     	; 0x1077a <ppr_set>
   107b6:	08 95       	ret

000107b8 <ppr_bit_set>:
   107b8:	21 e0       	ldi	r18, 0x01	; 1
   107ba:	30 e0       	ldi	r19, 0x00	; 0
   107bc:	01 c0       	rjmp	.+2      	; 0x107c0 <ppr_bit_set+0x8>
   107be:	22 0f       	add	r18, r18
   107c0:	8a 95       	dec	r24
   107c2:	ea f7       	brpl	.-6      	; 0x107be <ppr_bit_set+0x6>
   107c4:	80 91 5b 18 	lds	r24, 0x185B	; 0x80185b <_ppr_reg>
   107c8:	82 2b       	or	r24, r18
   107ca:	80 93 5b 18 	sts	0x185B, r24	; 0x80185b <_ppr_reg>
   107ce:	d5 cf       	rjmp	.-86     	; 0x1077a <ppr_set>
   107d0:	08 95       	ret

000107d2 <ppr_bit_clr>:
   107d2:	21 e0       	ldi	r18, 0x01	; 1
   107d4:	30 e0       	ldi	r19, 0x00	; 0
   107d6:	01 c0       	rjmp	.+2      	; 0x107da <ppr_bit_clr+0x8>
   107d8:	22 0f       	add	r18, r18
   107da:	8a 95       	dec	r24
   107dc:	ea f7       	brpl	.-6      	; 0x107d8 <ppr_bit_clr+0x6>
   107de:	20 95       	com	r18
   107e0:	80 91 5b 18 	lds	r24, 0x185B	; 0x80185b <_ppr_reg>
   107e4:	82 23       	and	r24, r18
   107e6:	80 93 5b 18 	sts	0x185B, r24	; 0x80185b <_ppr_reg>
   107ea:	c7 cf       	rjmp	.-114    	; 0x1077a <ppr_set>
   107ec:	08 95       	ret

000107ee <dbf_open>:
   107ee:	0f 93       	push	r16
   107f0:	1f 93       	push	r17
   107f2:	cf 93       	push	r28
   107f4:	df 93       	push	r29
   107f6:	16 2f       	mov	r17, r22
   107f8:	07 2f       	mov	r16, r23
   107fa:	0e 94 9b 5a 	call	0xb536	; 0xb536 <f_open>
   107fe:	ec 01       	movw	r28, r24
   10800:	89 2b       	or	r24, r25
   10802:	89 f0       	breq	.+34     	; 0x10826 <dbf_open+0x38>
   10804:	0f 93       	push	r16
   10806:	1f 93       	push	r17
   10808:	8a ee       	ldi	r24, 0xEA	; 234
   1080a:	9e e0       	ldi	r25, 0x0E	; 14
   1080c:	1f 92       	push	r1
   1080e:	9f 93       	push	r25
   10810:	8f 93       	push	r24
   10812:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   10816:	ce 01       	movw	r24, r28
   10818:	0e 94 13 71 	call	0xe226	; 0xe226 <put_rc>
   1081c:	0f 90       	pop	r0
   1081e:	0f 90       	pop	r0
   10820:	0f 90       	pop	r0
   10822:	0f 90       	pop	r0
   10824:	0f 90       	pop	r0
   10826:	ce 01       	movw	r24, r28
   10828:	df 91       	pop	r29
   1082a:	cf 91       	pop	r28
   1082c:	1f 91       	pop	r17
   1082e:	0f 91       	pop	r16
   10830:	08 95       	ret

00010832 <dbf_read>:
   10832:	cf 93       	push	r28
   10834:	df 93       	push	r29
   10836:	0e 94 56 5c 	call	0xb8ac	; 0xb8ac <f_read>
   1083a:	ec 01       	movw	r28, r24
   1083c:	89 2b       	or	r24, r25
   1083e:	69 f0       	breq	.+26     	; 0x1085a <dbf_read+0x28>
   10840:	8d ed       	ldi	r24, 0xDD	; 221
   10842:	9e e0       	ldi	r25, 0x0E	; 14
   10844:	1f 92       	push	r1
   10846:	9f 93       	push	r25
   10848:	8f 93       	push	r24
   1084a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1084e:	ce 01       	movw	r24, r28
   10850:	0e 94 13 71 	call	0xe226	; 0xe226 <put_rc>
   10854:	0f 90       	pop	r0
   10856:	0f 90       	pop	r0
   10858:	0f 90       	pop	r0
   1085a:	ce 01       	movw	r24, r28
   1085c:	df 91       	pop	r29
   1085e:	cf 91       	pop	r28
   10860:	08 95       	ret

00010862 <dbf_write>:
   10862:	cf 93       	push	r28
   10864:	df 93       	push	r29
   10866:	0e 94 a1 5d 	call	0xbb42	; 0xbb42 <f_write>
   1086a:	ec 01       	movw	r28, r24
   1086c:	89 2b       	or	r24, r25
   1086e:	69 f0       	breq	.+26     	; 0x1088a <dbf_write+0x28>
   10870:	8f ec       	ldi	r24, 0xCF	; 207
   10872:	9e e0       	ldi	r25, 0x0E	; 14
   10874:	1f 92       	push	r1
   10876:	9f 93       	push	r25
   10878:	8f 93       	push	r24
   1087a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1087e:	ce 01       	movw	r24, r28
   10880:	0e 94 13 71 	call	0xe226	; 0xe226 <put_rc>
   10884:	0f 90       	pop	r0
   10886:	0f 90       	pop	r0
   10888:	0f 90       	pop	r0
   1088a:	ce 01       	movw	r24, r28
   1088c:	df 91       	pop	r29
   1088e:	cf 91       	pop	r28
   10890:	08 95       	ret

00010892 <dbf_lseek>:
   10892:	cf 93       	push	r28
   10894:	df 93       	push	r29
   10896:	0e 94 62 61 	call	0xc2c4	; 0xc2c4 <f_lseek>
   1089a:	ec 01       	movw	r28, r24
   1089c:	89 2b       	or	r24, r25
   1089e:	69 f0       	breq	.+26     	; 0x108ba <dbf_lseek+0x28>
   108a0:	82 ec       	ldi	r24, 0xC2	; 194
   108a2:	9e e0       	ldi	r25, 0x0E	; 14
   108a4:	1f 92       	push	r1
   108a6:	9f 93       	push	r25
   108a8:	8f 93       	push	r24
   108aa:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   108ae:	ce 01       	movw	r24, r28
   108b0:	0e 94 13 71 	call	0xe226	; 0xe226 <put_rc>
   108b4:	0f 90       	pop	r0
   108b6:	0f 90       	pop	r0
   108b8:	0f 90       	pop	r0
   108ba:	ce 01       	movw	r24, r28
   108bc:	df 91       	pop	r29
   108be:	cf 91       	pop	r28
   108c0:	08 95       	ret

000108c2 <dbf_close>:
   108c2:	cf 93       	push	r28
   108c4:	df 93       	push	r29
   108c6:	0e 94 b8 5f 	call	0xbf70	; 0xbf70 <f_close>
   108ca:	ec 01       	movw	r28, r24
   108cc:	89 2b       	or	r24, r25
   108ce:	69 f0       	breq	.+26     	; 0x108ea <dbf_close+0x28>
   108d0:	84 eb       	ldi	r24, 0xB4	; 180
   108d2:	9e e0       	ldi	r25, 0x0E	; 14
   108d4:	1f 92       	push	r1
   108d6:	9f 93       	push	r25
   108d8:	8f 93       	push	r24
   108da:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   108de:	ce 01       	movw	r24, r28
   108e0:	0e 94 13 71 	call	0xe226	; 0xe226 <put_rc>
   108e4:	0f 90       	pop	r0
   108e6:	0f 90       	pop	r0
   108e8:	0f 90       	pop	r0
   108ea:	ce 01       	movw	r24, r28
   108ec:	df 91       	pop	r29
   108ee:	cf 91       	pop	r28
   108f0:	08 95       	ret

000108f2 <dbf_open_read>:
   108f2:	a6 e2       	ldi	r26, 0x26	; 38
   108f4:	b2 e0       	ldi	r27, 0x02	; 2
   108f6:	ef e7       	ldi	r30, 0x7F	; 127
   108f8:	f4 e8       	ldi	r31, 0x84	; 132
   108fa:	0c 94 34 e5 	jmp	0x1ca68	; 0x1ca68 <__prologue_saves__+0xc>
   108fe:	4a 01       	movw	r8, r20
   10900:	5b 01       	movw	r10, r22
   10902:	69 01       	movw	r12, r18
   10904:	cb 5d       	subi	r28, 0xDB	; 219
   10906:	dd 4f       	sbci	r29, 0xFD	; 253
   10908:	19 82       	std	Y+1, r1	; 0x01
   1090a:	18 82       	st	Y, r1
   1090c:	c5 52       	subi	r28, 0x25	; 37
   1090e:	d2 40       	sbci	r29, 0x02	; 2
   10910:	43 e0       	ldi	r20, 0x03	; 3
   10912:	bc 01       	movw	r22, r24
   10914:	ce 01       	movw	r24, r28
   10916:	01 96       	adiw	r24, 0x01	; 1
   10918:	6a df       	rcall	.-300    	; 0x107ee <dbf_open>
   1091a:	89 2b       	or	r24, r25
   1091c:	19 f0       	breq	.+6      	; 0x10924 <dbf_open_read+0x32>
   1091e:	81 e1       	ldi	r24, 0x11	; 17
   10920:	90 e0       	ldi	r25, 0x00	; 0
   10922:	2f c0       	rjmp	.+94     	; 0x10982 <dbf_open_read+0x90>
   10924:	b5 01       	movw	r22, r10
   10926:	a4 01       	movw	r20, r8
   10928:	ce 01       	movw	r24, r28
   1092a:	01 96       	adiw	r24, 0x01	; 1
   1092c:	b2 df       	rcall	.-156    	; 0x10892 <dbf_lseek>
   1092e:	89 2b       	or	r24, r25
   10930:	59 f0       	breq	.+22     	; 0x10948 <dbf_open_read+0x56>
   10932:	85 e0       	ldi	r24, 0x05	; 5
   10934:	90 e0       	ldi	r25, 0x00	; 0
   10936:	f7 01       	movw	r30, r14
   10938:	91 83       	std	Z+1, r25	; 0x01
   1093a:	80 83       	st	Z, r24
   1093c:	ce 01       	movw	r24, r28
   1093e:	01 96       	adiw	r24, 0x01	; 1
   10940:	c0 df       	rcall	.-128    	; 0x108c2 <dbf_close>
   10942:	8f ef       	ldi	r24, 0xFF	; 255
   10944:	9f ef       	ldi	r25, 0xFF	; 255
   10946:	27 c0       	rjmp	.+78     	; 0x10996 <dbf_open_read+0xa4>
   10948:	9e 01       	movw	r18, r28
   1094a:	2b 5d       	subi	r18, 0xDB	; 219
   1094c:	3d 4f       	sbci	r19, 0xFD	; 253
   1094e:	a8 01       	movw	r20, r16
   10950:	b6 01       	movw	r22, r12
   10952:	ce 01       	movw	r24, r28
   10954:	01 96       	adiw	r24, 0x01	; 1
   10956:	6d df       	rcall	.-294    	; 0x10832 <dbf_read>
   10958:	89 2b       	or	r24, r25
   1095a:	49 f4       	brne	.+18     	; 0x1096e <dbf_open_read+0x7c>
   1095c:	cb 5d       	subi	r28, 0xDB	; 219
   1095e:	dd 4f       	sbci	r29, 0xFD	; 253
   10960:	88 81       	ld	r24, Y
   10962:	99 81       	ldd	r25, Y+1	; 0x01
   10964:	c5 52       	subi	r28, 0x25	; 37
   10966:	d2 40       	sbci	r29, 0x02	; 2
   10968:	08 17       	cp	r16, r24
   1096a:	19 07       	cpc	r17, r25
   1096c:	19 f0       	breq	.+6      	; 0x10974 <dbf_open_read+0x82>
   1096e:	81 e0       	ldi	r24, 0x01	; 1
   10970:	90 e0       	ldi	r25, 0x00	; 0
   10972:	e1 cf       	rjmp	.-62     	; 0x10936 <dbf_open_read+0x44>
   10974:	ce 01       	movw	r24, r28
   10976:	01 96       	adiw	r24, 0x01	; 1
   10978:	a4 df       	rcall	.-184    	; 0x108c2 <dbf_close>
   1097a:	89 2b       	or	r24, r25
   1097c:	31 f0       	breq	.+12     	; 0x1098a <dbf_open_read+0x98>
   1097e:	80 e1       	ldi	r24, 0x10	; 16
   10980:	90 e0       	ldi	r25, 0x00	; 0
   10982:	f7 01       	movw	r30, r14
   10984:	91 83       	std	Z+1, r25	; 0x01
   10986:	80 83       	st	Z, r24
   10988:	dc cf       	rjmp	.-72     	; 0x10942 <dbf_open_read+0x50>
   1098a:	cb 5d       	subi	r28, 0xDB	; 219
   1098c:	dd 4f       	sbci	r29, 0xFD	; 253
   1098e:	88 81       	ld	r24, Y
   10990:	99 81       	ldd	r25, Y+1	; 0x01
   10992:	c5 52       	subi	r28, 0x25	; 37
   10994:	d2 40       	sbci	r29, 0x02	; 2
   10996:	ca 5d       	subi	r28, 0xDA	; 218
   10998:	dd 4f       	sbci	r29, 0xFD	; 253
   1099a:	ec e0       	ldi	r30, 0x0C	; 12
   1099c:	0c 94 50 e5 	jmp	0x1caa0	; 0x1caa0 <__epilogue_restores__+0xc>

000109a0 <dbf_open_write>:
   109a0:	a6 e2       	ldi	r26, 0x26	; 38
   109a2:	b2 e0       	ldi	r27, 0x02	; 2
   109a4:	e6 ed       	ldi	r30, 0xD6	; 214
   109a6:	f4 e8       	ldi	r31, 0x84	; 132
   109a8:	0c 94 34 e5 	jmp	0x1ca68	; 0x1ca68 <__prologue_saves__+0xc>
   109ac:	4a 01       	movw	r8, r20
   109ae:	5b 01       	movw	r10, r22
   109b0:	69 01       	movw	r12, r18
   109b2:	cb 5d       	subi	r28, 0xDB	; 219
   109b4:	dd 4f       	sbci	r29, 0xFD	; 253
   109b6:	19 82       	std	Y+1, r1	; 0x01
   109b8:	18 82       	st	Y, r1
   109ba:	c5 52       	subi	r28, 0x25	; 37
   109bc:	d2 40       	sbci	r29, 0x02	; 2
   109be:	43 e0       	ldi	r20, 0x03	; 3
   109c0:	bc 01       	movw	r22, r24
   109c2:	ce 01       	movw	r24, r28
   109c4:	01 96       	adiw	r24, 0x01	; 1
   109c6:	13 df       	rcall	.-474    	; 0x107ee <dbf_open>
   109c8:	89 2b       	or	r24, r25
   109ca:	19 f0       	breq	.+6      	; 0x109d2 <dbf_open_write+0x32>
   109cc:	81 e1       	ldi	r24, 0x11	; 17
   109ce:	90 e0       	ldi	r25, 0x00	; 0
   109d0:	2f c0       	rjmp	.+94     	; 0x10a30 <dbf_open_write+0x90>
   109d2:	b5 01       	movw	r22, r10
   109d4:	a4 01       	movw	r20, r8
   109d6:	ce 01       	movw	r24, r28
   109d8:	01 96       	adiw	r24, 0x01	; 1
   109da:	5b df       	rcall	.-330    	; 0x10892 <dbf_lseek>
   109dc:	89 2b       	or	r24, r25
   109de:	59 f0       	breq	.+22     	; 0x109f6 <dbf_open_write+0x56>
   109e0:	85 e0       	ldi	r24, 0x05	; 5
   109e2:	90 e0       	ldi	r25, 0x00	; 0
   109e4:	f7 01       	movw	r30, r14
   109e6:	91 83       	std	Z+1, r25	; 0x01
   109e8:	80 83       	st	Z, r24
   109ea:	ce 01       	movw	r24, r28
   109ec:	01 96       	adiw	r24, 0x01	; 1
   109ee:	69 df       	rcall	.-302    	; 0x108c2 <dbf_close>
   109f0:	8f ef       	ldi	r24, 0xFF	; 255
   109f2:	9f ef       	ldi	r25, 0xFF	; 255
   109f4:	27 c0       	rjmp	.+78     	; 0x10a44 <dbf_open_write+0xa4>
   109f6:	9e 01       	movw	r18, r28
   109f8:	2b 5d       	subi	r18, 0xDB	; 219
   109fa:	3d 4f       	sbci	r19, 0xFD	; 253
   109fc:	a8 01       	movw	r20, r16
   109fe:	b6 01       	movw	r22, r12
   10a00:	ce 01       	movw	r24, r28
   10a02:	01 96       	adiw	r24, 0x01	; 1
   10a04:	2e df       	rcall	.-420    	; 0x10862 <dbf_write>
   10a06:	89 2b       	or	r24, r25
   10a08:	49 f4       	brne	.+18     	; 0x10a1c <dbf_open_write+0x7c>
   10a0a:	cb 5d       	subi	r28, 0xDB	; 219
   10a0c:	dd 4f       	sbci	r29, 0xFD	; 253
   10a0e:	88 81       	ld	r24, Y
   10a10:	99 81       	ldd	r25, Y+1	; 0x01
   10a12:	c5 52       	subi	r28, 0x25	; 37
   10a14:	d2 40       	sbci	r29, 0x02	; 2
   10a16:	08 17       	cp	r16, r24
   10a18:	19 07       	cpc	r17, r25
   10a1a:	19 f0       	breq	.+6      	; 0x10a22 <dbf_open_write+0x82>
   10a1c:	81 e0       	ldi	r24, 0x01	; 1
   10a1e:	90 e0       	ldi	r25, 0x00	; 0
   10a20:	e1 cf       	rjmp	.-62     	; 0x109e4 <dbf_open_write+0x44>
   10a22:	ce 01       	movw	r24, r28
   10a24:	01 96       	adiw	r24, 0x01	; 1
   10a26:	4d df       	rcall	.-358    	; 0x108c2 <dbf_close>
   10a28:	89 2b       	or	r24, r25
   10a2a:	31 f0       	breq	.+12     	; 0x10a38 <dbf_open_write+0x98>
   10a2c:	80 e1       	ldi	r24, 0x10	; 16
   10a2e:	90 e0       	ldi	r25, 0x00	; 0
   10a30:	f7 01       	movw	r30, r14
   10a32:	91 83       	std	Z+1, r25	; 0x01
   10a34:	80 83       	st	Z, r24
   10a36:	dc cf       	rjmp	.-72     	; 0x109f0 <dbf_open_write+0x50>
   10a38:	cb 5d       	subi	r28, 0xDB	; 219
   10a3a:	dd 4f       	sbci	r29, 0xFD	; 253
   10a3c:	88 81       	ld	r24, Y
   10a3e:	99 81       	ldd	r25, Y+1	; 0x01
   10a40:	c5 52       	subi	r28, 0x25	; 37
   10a42:	d2 40       	sbci	r29, 0x02	; 2
   10a44:	ca 5d       	subi	r28, 0xDA	; 218
   10a46:	dd 4f       	sbci	r29, 0xFD	; 253
   10a48:	ec e0       	ldi	r30, 0x0C	; 12
   10a4a:	0c 94 50 e5 	jmp	0x1caa0	; 0x1caa0 <__epilogue_restores__+0xc>

00010a4e <gpib_timer_elapsed_begin>:
   10a4e:	0c 94 d6 35 	jmp	0x6bac	; 0x6bac <clock_elapsed_begin>
   10a52:	08 95       	ret

00010a54 <gpib_timer_reset>:
   10a54:	f8 94       	cli
   10a56:	e7 ed       	ldi	r30, 0xD7	; 215
   10a58:	fb e1       	ldi	r31, 0x1B	; 27
   10a5a:	10 82       	st	Z, r1
   10a5c:	11 82       	std	Z+1, r1	; 0x01
   10a5e:	12 82       	std	Z+2, r1	; 0x02
   10a60:	13 82       	std	Z+3, r1	; 0x03
   10a62:	14 82       	std	Z+4, r1	; 0x04
   10a64:	15 82       	std	Z+5, r1	; 0x05
   10a66:	16 82       	std	Z+6, r1	; 0x06
   10a68:	17 82       	std	Z+7, r1	; 0x07
   10a6a:	81 e0       	ldi	r24, 0x01	; 1
   10a6c:	80 87       	std	Z+8, r24	; 0x08
   10a6e:	78 94       	sei
   10a70:	08 95       	ret

00010a72 <gpib_timer_elapsed_end>:
   10a72:	0c 94 dc 35 	jmp	0x6bb8	; 0x6bb8 <clock_elapsed_end>
   10a76:	08 95       	ret

00010a78 <gpib_timer_task>:
   10a78:	f8 94       	cli
   10a7a:	80 91 db 1b 	lds	r24, 0x1BDB	; 0x801bdb <gpib_timer+0x4>
   10a7e:	90 91 dc 1b 	lds	r25, 0x1BDC	; 0x801bdc <gpib_timer+0x5>
   10a82:	a0 91 dd 1b 	lds	r26, 0x1BDD	; 0x801bdd <gpib_timer+0x6>
   10a86:	b0 91 de 1b 	lds	r27, 0x1BDE	; 0x801bde <gpib_timer+0x7>
   10a8a:	89 2b       	or	r24, r25
   10a8c:	8a 2b       	or	r24, r26
   10a8e:	8b 2b       	or	r24, r27
   10a90:	a1 f0       	breq	.+40     	; 0x10aba <gpib_timer_task+0x42>
   10a92:	80 91 db 1b 	lds	r24, 0x1BDB	; 0x801bdb <gpib_timer+0x4>
   10a96:	90 91 dc 1b 	lds	r25, 0x1BDC	; 0x801bdc <gpib_timer+0x5>
   10a9a:	a0 91 dd 1b 	lds	r26, 0x1BDD	; 0x801bdd <gpib_timer+0x6>
   10a9e:	b0 91 de 1b 	lds	r27, 0x1BDE	; 0x801bde <gpib_timer+0x7>
   10aa2:	01 97       	sbiw	r24, 0x01	; 1
   10aa4:	a1 09       	sbc	r26, r1
   10aa6:	b1 09       	sbc	r27, r1
   10aa8:	80 93 db 1b 	sts	0x1BDB, r24	; 0x801bdb <gpib_timer+0x4>
   10aac:	90 93 dc 1b 	sts	0x1BDC, r25	; 0x801bdc <gpib_timer+0x5>
   10ab0:	a0 93 dd 1b 	sts	0x1BDD, r26	; 0x801bdd <gpib_timer+0x6>
   10ab4:	b0 93 de 1b 	sts	0x1BDE, r27	; 0x801bde <gpib_timer+0x7>
   10ab8:	03 c0       	rjmp	.+6      	; 0x10ac0 <gpib_timer_task+0x48>
   10aba:	81 e0       	ldi	r24, 0x01	; 1
   10abc:	80 93 df 1b 	sts	0x1BDF, r24	; 0x801bdf <gpib_timer+0x8>
   10ac0:	78 94       	sei
   10ac2:	08 95       	ret

00010ac4 <gpib_timeout_set>:
   10ac4:	f8 94       	cli
   10ac6:	e7 ed       	ldi	r30, 0xD7	; 215
   10ac8:	fb e1       	ldi	r31, 0x1B	; 27
   10aca:	64 83       	std	Z+4, r22	; 0x04
   10acc:	75 83       	std	Z+5, r23	; 0x05
   10ace:	86 83       	std	Z+6, r24	; 0x06
   10ad0:	97 83       	std	Z+7, r25	; 0x07
   10ad2:	10 86       	std	Z+8, r1	; 0x08
   10ad4:	78 94       	sei
   10ad6:	08 95       	ret

00010ad8 <gpib_bus_read_init>:
   10ad8:	54 98       	cbi	0x0a, 4	; 10
   10ada:	57 98       	cbi	0x0a, 7	; 10
   10adc:	45 98       	cbi	0x08, 5	; 8
   10ade:	3d 9a       	sbi	0x07, 5	; 7
   10ae0:	11 b8       	out	0x01, r1	; 1
   10ae2:	2f ef       	ldi	r18, 0xFF	; 255
   10ae4:	22 b9       	out	0x02, r18	; 2
   10ae6:	43 98       	cbi	0x08, 3	; 8
   10ae8:	3b 9a       	sbi	0x07, 3	; 7
   10aea:	21 98       	cbi	0x04, 1	; 4
   10aec:	56 98       	cbi	0x0a, 6	; 10
   10aee:	20 98       	cbi	0x04, 0	; 4
   10af0:	55 98       	cbi	0x0a, 5	; 10
   10af2:	89 2b       	or	r24, r25
   10af4:	39 f4       	brne	.+14     	; 0x10b04 <gpib_bus_read_init+0x2c>
   10af6:	52 98       	cbi	0x0a, 2	; 10
   10af8:	53 98       	cbi	0x0a, 3	; 10
   10afa:	8d e0       	ldi	r24, 0x0D	; 13
   10afc:	8a 95       	dec	r24
   10afe:	f1 f7       	brne	.-4      	; 0x10afc <gpib_bus_read_init+0x24>
   10b00:	00 00       	nop
   10b02:	04 c0       	rjmp	.+8      	; 0x10b0c <gpib_bus_read_init+0x34>
   10b04:	5b 98       	cbi	0x0b, 3	; 11
   10b06:	53 9a       	sbi	0x0a, 3	; 10
   10b08:	5a 98       	cbi	0x0b, 2	; 11
   10b0a:	52 9a       	sbi	0x0a, 2	; 10
   10b0c:	42 98       	cbi	0x08, 2	; 8
   10b0e:	3a 9a       	sbi	0x07, 2	; 7
   10b10:	44 9a       	sbi	0x08, 4	; 8
   10b12:	3c 9a       	sbi	0x07, 4	; 7
   10b14:	8d e0       	ldi	r24, 0x0D	; 13
   10b16:	8a 95       	dec	r24
   10b18:	f1 f7       	brne	.-4      	; 0x10b16 <gpib_bus_read_init+0x3e>
   10b1a:	00 00       	nop
   10b1c:	08 95       	ret

00010b1e <gpib_bus_init>:
   10b1e:	10 92 5c 18 	sts	0x185C, r1	; 0x80185c <gpib_unread_f>
   10b22:	11 b8       	out	0x01, r1	; 1
   10b24:	8f ef       	ldi	r24, 0xFF	; 255
   10b26:	82 b9       	out	0x02, r24	; 2
   10b28:	21 98       	cbi	0x04, 1	; 4
   10b2a:	52 98       	cbi	0x0a, 2	; 10
   10b2c:	53 98       	cbi	0x0a, 3	; 10
   10b2e:	54 98       	cbi	0x0a, 4	; 10
   10b30:	57 98       	cbi	0x0a, 7	; 10
   10b32:	56 98       	cbi	0x0a, 6	; 10
   10b34:	20 98       	cbi	0x04, 0	; 4
   10b36:	55 98       	cbi	0x0a, 5	; 10
   10b38:	45 98       	cbi	0x08, 5	; 8
   10b3a:	3d 9a       	sbi	0x07, 5	; 7
   10b3c:	43 98       	cbi	0x08, 3	; 8
   10b3e:	3b 9a       	sbi	0x07, 3	; 7
   10b40:	42 98       	cbi	0x08, 2	; 8
   10b42:	3a 9a       	sbi	0x07, 2	; 7
   10b44:	44 9a       	sbi	0x08, 4	; 8
   10b46:	3c 9a       	sbi	0x07, 4	; 7
   10b48:	8d e0       	ldi	r24, 0x0D	; 13
   10b4a:	8a 95       	dec	r24
   10b4c:	f1 f7       	brne	.-4      	; 0x10b4a <gpib_bus_init+0x2c>
   10b4e:	00 00       	nop
   10b50:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10b54:	82 ff       	sbrs	r24, 2
   10b56:	0a c0       	rjmp	.+20     	; 0x10b6c <gpib_bus_init+0x4e>
   10b58:	87 eb       	ldi	r24, 0xB7	; 183
   10b5a:	91 e1       	ldi	r25, 0x11	; 17
   10b5c:	1f 92       	push	r1
   10b5e:	9f 93       	push	r25
   10b60:	8f 93       	push	r24
   10b62:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   10b66:	0f 90       	pop	r0
   10b68:	0f 90       	pop	r0
   10b6a:	0f 90       	pop	r0
   10b6c:	08 95       	ret

00010b6e <gpib_state_init>:
   10b6e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10b72:	82 ff       	sbrs	r24, 2
   10b74:	0a c0       	rjmp	.+20     	; 0x10b8a <gpib_state_init+0x1c>
   10b76:	84 ea       	ldi	r24, 0xA4	; 164
   10b78:	91 e1       	ldi	r25, 0x11	; 17
   10b7a:	1f 92       	push	r1
   10b7c:	9f 93       	push	r25
   10b7e:	8f 93       	push	r24
   10b80:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   10b84:	0f 90       	pop	r0
   10b86:	0f 90       	pop	r0
   10b88:	0f 90       	pop	r0
   10b8a:	05 de       	rcall	.-1014   	; 0x10796 <ppr_init>
   10b8c:	0e 94 e9 8f 	call	0x11fd2	; 0x11fd2 <listen_cleanup>
   10b90:	0e 94 f9 90 	call	0x121f2	; 0x121f2 <talk_cleanup>
   10b94:	10 92 e3 1d 	sts	0x1DE3, r1	; 0x801de3 <spoll>
   10b98:	10 92 e6 1d 	sts	0x1DE6, r1	; 0x801de6 <talking>
   10b9c:	10 92 e9 1d 	sts	0x1DE9, r1	; 0x801de9 <talking_last>
   10ba0:	10 92 e8 1d 	sts	0x1DE8, r1	; 0x801de8 <listening>
   10ba4:	10 92 e2 1d 	sts	0x1DE2, r1	; 0x801de2 <listening_last>
   10ba8:	10 92 e1 1b 	sts	0x1BE1, r1	; 0x801be1 <lastcmd+0x1>
   10bac:	10 92 e0 1b 	sts	0x1BE0, r1	; 0x801be0 <lastcmd>
   10bb0:	10 92 e5 1d 	sts	0x1DE5, r1	; 0x801de5 <current+0x1>
   10bb4:	10 92 e4 1d 	sts	0x1DE4, r1	; 0x801de4 <current>
   10bb8:	10 92 e7 1d 	sts	0x1DE7, r1	; 0x801de7 <secondary>
   10bbc:	08 95       	ret

00010bbe <gpib_enable_PPR>:
   10bbe:	cf 93       	push	r28
   10bc0:	df 93       	push	r29
   10bc2:	ec 01       	movw	r28, r24
   10bc4:	88 30       	cpi	r24, 0x08	; 8
   10bc6:	91 05       	cpc	r25, r1
   10bc8:	78 f0       	brcs	.+30     	; 0x10be8 <gpib_enable_PPR+0x2a>
   10bca:	df 93       	push	r29
   10bcc:	cf 93       	push	r28
   10bce:	8e e7       	ldi	r24, 0x7E	; 126
   10bd0:	91 e1       	ldi	r25, 0x11	; 17
   10bd2:	1f 92       	push	r1
   10bd4:	9f 93       	push	r25
   10bd6:	8f 93       	push	r24
   10bd8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   10bdc:	0f 90       	pop	r0
   10bde:	0f 90       	pop	r0
   10be0:	0f 90       	pop	r0
   10be2:	0f 90       	pop	r0
   10be4:	0f 90       	pop	r0
   10be6:	19 c0       	rjmp	.+50     	; 0x10c1a <gpib_enable_PPR+0x5c>
   10be8:	e7 dd       	rcall	.-1074   	; 0x107b8 <ppr_bit_set>
   10bea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10bee:	81 ff       	sbrs	r24, 1
   10bf0:	14 c0       	rjmp	.+40     	; 0x10c1a <gpib_enable_PPR+0x5c>
   10bf2:	cd dd       	rcall	.-1126   	; 0x1078e <ppr_reg>
   10bf4:	1f 92       	push	r1
   10bf6:	8f 93       	push	r24
   10bf8:	df 93       	push	r29
   10bfa:	cf 93       	push	r28
   10bfc:	83 e6       	ldi	r24, 0x63	; 99
   10bfe:	91 e1       	ldi	r25, 0x11	; 17
   10c00:	1f 92       	push	r1
   10c02:	9f 93       	push	r25
   10c04:	8f 93       	push	r24
   10c06:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   10c0a:	8d b7       	in	r24, 0x3d	; 61
   10c0c:	9e b7       	in	r25, 0x3e	; 62
   10c0e:	07 96       	adiw	r24, 0x07	; 7
   10c10:	0f b6       	in	r0, 0x3f	; 63
   10c12:	f8 94       	cli
   10c14:	9e bf       	out	0x3e, r25	; 62
   10c16:	0f be       	out	0x3f, r0	; 63
   10c18:	8d bf       	out	0x3d, r24	; 61
   10c1a:	df 91       	pop	r29
   10c1c:	cf 91       	pop	r28
   10c1e:	08 95       	ret

00010c20 <gpib_disable_PPR>:
   10c20:	cf 93       	push	r28
   10c22:	df 93       	push	r29
   10c24:	ec 01       	movw	r28, r24
   10c26:	88 30       	cpi	r24, 0x08	; 8
   10c28:	91 05       	cpc	r25, r1
   10c2a:	78 f0       	brcs	.+30     	; 0x10c4a <gpib_disable_PPR+0x2a>
   10c2c:	df 93       	push	r29
   10c2e:	cf 93       	push	r28
   10c30:	8c e3       	ldi	r24, 0x3C	; 60
   10c32:	91 e1       	ldi	r25, 0x11	; 17
   10c34:	1f 92       	push	r1
   10c36:	9f 93       	push	r25
   10c38:	8f 93       	push	r24
   10c3a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   10c3e:	0f 90       	pop	r0
   10c40:	0f 90       	pop	r0
   10c42:	0f 90       	pop	r0
   10c44:	0f 90       	pop	r0
   10c46:	0f 90       	pop	r0
   10c48:	19 c0       	rjmp	.+50     	; 0x10c7c <gpib_disable_PPR+0x5c>
   10c4a:	c3 dd       	rcall	.-1146   	; 0x107d2 <ppr_bit_clr>
   10c4c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10c50:	81 ff       	sbrs	r24, 1
   10c52:	14 c0       	rjmp	.+40     	; 0x10c7c <gpib_disable_PPR+0x5c>
   10c54:	9c dd       	rcall	.-1224   	; 0x1078e <ppr_reg>
   10c56:	1f 92       	push	r1
   10c58:	8f 93       	push	r24
   10c5a:	df 93       	push	r29
   10c5c:	cf 93       	push	r28
   10c5e:	81 e2       	ldi	r24, 0x21	; 33
   10c60:	91 e1       	ldi	r25, 0x11	; 17
   10c62:	1f 92       	push	r1
   10c64:	9f 93       	push	r25
   10c66:	8f 93       	push	r24
   10c68:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   10c6c:	8d b7       	in	r24, 0x3d	; 61
   10c6e:	9e b7       	in	r25, 0x3e	; 62
   10c70:	07 96       	adiw	r24, 0x07	; 7
   10c72:	0f b6       	in	r0, 0x3f	; 63
   10c74:	f8 94       	cli
   10c76:	9e bf       	out	0x3e, r25	; 62
   10c78:	0f be       	out	0x3f, r0	; 63
   10c7a:	8d bf       	out	0x3d, r24	; 61
   10c7c:	df 91       	pop	r29
   10c7e:	cf 91       	pop	r28
   10c80:	08 95       	ret

00010c82 <gpib_assert_ifc>:
   10c82:	5c 98       	cbi	0x0b, 4	; 11
   10c84:	54 9a       	sbi	0x0a, 4	; 10
   10c86:	6a ef       	ldi	r22, 0xFA	; 250
   10c88:	70 e0       	ldi	r23, 0x00	; 0
   10c8a:	80 e0       	ldi	r24, 0x00	; 0
   10c8c:	90 e0       	ldi	r25, 0x00	; 0
   10c8e:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <delayus>
   10c92:	54 98       	cbi	0x0a, 4	; 10
   10c94:	6a ef       	ldi	r22, 0xFA	; 250
   10c96:	70 e0       	ldi	r23, 0x00	; 0
   10c98:	80 e0       	ldi	r24, 0x00	; 0
   10c9a:	90 e0       	ldi	r25, 0x00	; 0
   10c9c:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <delayus>
   10ca0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10ca4:	82 ff       	sbrs	r24, 2
   10ca6:	0a c0       	rjmp	.+20     	; 0x10cbc <gpib_assert_ifc+0x3a>
   10ca8:	82 ef       	ldi	r24, 0xF2	; 242
   10caa:	90 e1       	ldi	r25, 0x10	; 16
   10cac:	1f 92       	push	r1
   10cae:	9f 93       	push	r25
   10cb0:	8f 93       	push	r24
   10cb2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   10cb6:	0f 90       	pop	r0
   10cb8:	0f 90       	pop	r0
   10cba:	0f 90       	pop	r0
   10cbc:	08 95       	ret

00010cbe <gpib_unread>:
   10cbe:	cf 93       	push	r28
   10cc0:	df 93       	push	r29
   10cc2:	ec 01       	movw	r28, r24
   10cc4:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <gpib_unread_f>
   10cc8:	81 11       	cpse	r24, r1
   10cca:	08 c0       	rjmp	.+16     	; 0x10cdc <gpib_unread+0x1e>
   10ccc:	d0 93 eb 1d 	sts	0x1DEB, r29	; 0x801deb <gpib_unread_data+0x1>
   10cd0:	c0 93 ea 1d 	sts	0x1DEA, r28	; 0x801dea <gpib_unread_data>
   10cd4:	81 e0       	ldi	r24, 0x01	; 1
   10cd6:	80 93 5c 18 	sts	0x185C, r24	; 0x80185c <gpib_unread_f>
   10cda:	12 c0       	rjmp	.+36     	; 0x10d00 <gpib_unread+0x42>
   10cdc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10ce0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10ce4:	85 70       	andi	r24, 0x05	; 5
   10ce6:	99 27       	eor	r25, r25
   10ce8:	89 2b       	or	r24, r25
   10cea:	51 f0       	breq	.+20     	; 0x10d00 <gpib_unread+0x42>
   10cec:	8f ea       	ldi	r24, 0xAF	; 175
   10cee:	90 e1       	ldi	r25, 0x10	; 16
   10cf0:	1f 92       	push	r1
   10cf2:	9f 93       	push	r25
   10cf4:	8f 93       	push	r24
   10cf6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   10cfa:	0f 90       	pop	r0
   10cfc:	0f 90       	pop	r0
   10cfe:	0f 90       	pop	r0
   10d00:	ce 01       	movw	r24, r28
   10d02:	df 91       	pop	r29
   10d04:	cf 91       	pop	r28
   10d06:	08 95       	ret

00010d08 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10d08:	11 b8       	out	0x01, r1	; 1
   10d0a:	80 b1       	in	r24, 0x00	; 0
   10d0c:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10d0e:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10d10:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10d12:	08 95       	ret

00010d14 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10d14:	4e 99       	sbic	0x09, 6	; 9
   10d16:	03 c0       	rjmp	.+6      	; 0x10d1e <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10d18:	80 e0       	ldi	r24, 0x00	; 0
   10d1a:	94 e0       	ldi	r25, 0x04	; 4
   10d1c:	02 c0       	rjmp	.+4      	; 0x10d22 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10d1e:	80 e0       	ldi	r24, 0x00	; 0
   10d20:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10d22:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10d24:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10d26:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10d28:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10d2a:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10d2c:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10d2e:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10d30:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10d32:	08 95       	ret

00010d34 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10d34:	19 99       	sbic	0x03, 1	; 3
   10d36:	03 c0       	rjmp	.+6      	; 0x10d3e <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10d38:	80 e0       	ldi	r24, 0x00	; 0
   10d3a:	90 e2       	ldi	r25, 0x20	; 32
   10d3c:	02 c0       	rjmp	.+4      	; 0x10d42 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10d3e:	80 e0       	ldi	r24, 0x00	; 0
   10d40:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10d42:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10d44:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10d46:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10d48:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10d4a:	08 95       	ret

00010d4c <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10d4c:	2f 92       	push	r2
   10d4e:	3f 92       	push	r3
   10d50:	4f 92       	push	r4
   10d52:	6f 92       	push	r6
   10d54:	7f 92       	push	r7
   10d56:	8f 92       	push	r8
   10d58:	cf 92       	push	r12
   10d5a:	df 92       	push	r13
   10d5c:	ef 92       	push	r14
   10d5e:	1f 93       	push	r17
   10d60:	cf 93       	push	r28
   10d62:	df 93       	push	r29
   10d64:	cd b7       	in	r28, 0x3d	; 61
   10d66:	de b7       	in	r29, 0x3e	; 62
   10d68:	28 97       	sbiw	r28, 0x08	; 8
   10d6a:	0f b6       	in	r0, 0x3f	; 63
   10d6c:	f8 94       	cli
   10d6e:	de bf       	out	0x3e, r29	; 62
   10d70:	0f be       	out	0x3f, r0	; 63
   10d72:	cd bf       	out	0x3d, r28	; 61
   10d74:	98 87       	std	Y+8, r25	; 0x08
   10d76:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   10d78:	80 e0       	ldi	r24, 0x00	; 0
   10d7a:	90 e0       	ldi	r25, 0x00	; 0
   10d7c:	ad de       	rcall	.-678    	; 0x10ad8 <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10d7e:	64 ef       	ldi	r22, 0xF4	; 244
   10d80:	71 e0       	ldi	r23, 0x01	; 1
   10d82:	80 e0       	ldi	r24, 0x00	; 0
   10d84:	90 e0       	ldi	r25, 0x00	; 0
   10d86:	9e de       	rcall	.-708    	; 0x10ac4 <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   10d88:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   10d8a:	8d e1       	ldi	r24, 0x1D	; 29
   10d8c:	90 e1       	ldi	r25, 0x10	; 16
   10d8e:	6c 01       	movw	r12, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NDAC==1>\n");
   10d90:	87 e3       	ldi	r24, 0x37	; 55
   10d92:	90 e1       	ldi	r25, 0x10	; 16
   10d94:	3c 01       	movw	r6, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==0>\n");
   10d96:	82 e5       	ldi	r24, 0x52	; 82
   10d98:	90 e1       	ldi	r25, 0x10	; 16
   10d9a:	1c 01       	movw	r2, r24
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10d9c:	8d e6       	ldi	r24, 0x6D	; 109
   10d9e:	90 e1       	ldi	r25, 0x10	; 16
   10da0:	9c 01       	movw	r18, r24
   10da2:	40 e0       	ldi	r20, 0x00	; 0
   10da4:	29 83       	std	Y+1, r18	; 0x01
   10da6:	3a 83       	std	Y+2, r19	; 0x02
   10da8:	4b 83       	std	Y+3, r20	; 0x03
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   10daa:	85 e9       	ldi	r24, 0x95	; 149
   10dac:	90 e1       	ldi	r25, 0x10	; 16
   10dae:	9c 01       	movw	r18, r24
   10db0:	40 e0       	ldi	r20, 0x00	; 0
   10db2:	2c 83       	std	Y+4, r18	; 0x04
   10db4:	3d 83       	std	Y+5, r19	; 0x05
   10db6:	4e 83       	std	Y+6, r20	; 0x06
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   10db8:	80 e0       	ldi	r24, 0x00	; 0
   10dba:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   10dbe:	89 2b       	or	r24, r25
   10dc0:	09 f0       	breq	.+2      	; 0x10dc4 <gpib_write_byte+0x78>
   10dc2:	17 c1       	rjmp	.+558    	; 0x10ff2 <gpib_write_byte+0x2a6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10dc4:	4c 99       	sbic	0x09, 4	; 9
   10dc6:	07 c0       	rjmp	.+14     	; 0x10dd6 <gpib_write_byte+0x8a>
        {
            ch |= IFC_FLAG;
   10dc8:	8f 81       	ldd	r24, Y+7	; 0x07
   10dca:	98 85       	ldd	r25, Y+8	; 0x08
   10dcc:	90 61       	ori	r25, 0x10	; 16
   10dce:	98 87       	std	Y+8, r25	; 0x08
			gpib_bus_init();
   10dd0:	8f 83       	std	Y+7, r24	; 0x07
   10dd2:	a5 de       	rcall	.-694    	; 0x10b1e <gpib_bus_init>
            break;
   10dd4:	0e c1       	rjmp	.+540    	; 0x10ff2 <gpib_write_byte+0x2a6>
        }

        switch(tx_state)
   10dd6:	81 2f       	mov	r24, r17
   10dd8:	90 e0       	ldi	r25, 0x00	; 0
   10dda:	8a 30       	cpi	r24, 0x0A	; 10
   10ddc:	91 05       	cpc	r25, r1
   10dde:	08 f0       	brcs	.+2      	; 0x10de2 <gpib_write_byte+0x96>
   10de0:	fe c0       	rjmp	.+508    	; 0x10fde <gpib_write_byte+0x292>
   10de2:	fc 01       	movw	r30, r24
   10de4:	e3 54       	subi	r30, 0x43	; 67
   10de6:	ff 4f       	sbci	r31, 0xFF	; 255
   10de8:	0c 94 ea e4 	jmp	0x1c9d4	; 0x1c9d4 <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   10dec:	19 9b       	sbis	0x03, 1	; 3
   10dee:	12 c0       	rjmp	.+36     	; 0x10e14 <gpib_write_byte+0xc8>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   10df0:	42 9a       	sbi	0x08, 2	; 8
   10df2:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   10df4:	44 98       	cbi	0x08, 4	; 8
   10df6:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   10df8:	2f 81       	ldd	r18, Y+7	; 0x07
   10dfa:	38 85       	ldd	r19, Y+8	; 0x08
   10dfc:	32 ff       	sbrs	r19, 2
   10dfe:	03 c0       	rjmp	.+6      	; 0x10e06 <gpib_write_byte+0xba>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   10e00:	5e 98       	cbi	0x0b, 6	; 11
   10e02:	56 9a       	sbi	0x0a, 6	; 10
   10e04:	01 c0       	rjmp	.+2      	; 0x10e08 <gpib_write_byte+0xbc>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   10e06:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   10e08:	64 ef       	ldi	r22, 0xF4	; 244
   10e0a:	71 e0       	ldi	r23, 0x01	; 1
   10e0c:	80 e0       	ldi	r24, 0x00	; 0
   10e0e:	90 e0       	ldi	r25, 0x00	; 0
   10e10:	59 de       	rcall	.-846    	; 0x10ac4 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   10e12:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10e14:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   10e18:	88 23       	and	r24, r24
   10e1a:	71 f2       	breq	.-100    	; 0x10db8 <gpib_write_byte+0x6c>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   10e1c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10e20:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10e24:	85 70       	andi	r24, 0x05	; 5
   10e26:	99 27       	eor	r25, r25
   10e28:	89 2b       	or	r24, r25
   10e2a:	39 f1       	breq	.+78     	; 0x10e7a <gpib_write_byte+0x12e>
                        printf("<BUS waiting for DAV==1>\n");
   10e2c:	1f 92       	push	r1
   10e2e:	3d 81       	ldd	r19, Y+5	; 0x05
   10e30:	3f 93       	push	r19
   10e32:	4c 81       	ldd	r20, Y+4	; 0x04
   10e34:	4f 93       	push	r20
   10e36:	1c c0       	rjmp	.+56     	; 0x10e70 <gpib_write_byte+0x124>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   10e38:	4a 9b       	sbis	0x09, 2	; 9
   10e3a:	08 c0       	rjmp	.+16     	; 0x10e4c <gpib_write_byte+0x100>
   10e3c:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   10e3e:	06 c0       	rjmp	.+12     	; 0x10e4c <gpib_write_byte+0x100>
   10e40:	64 ef       	ldi	r22, 0xF4	; 244
   10e42:	71 e0       	ldi	r23, 0x01	; 1
   10e44:	80 e0       	ldi	r24, 0x00	; 0
   10e46:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   10e48:	3d de       	rcall	.-902    	; 0x10ac4 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10e4a:	12 e0       	ldi	r17, 0x02	; 2
   10e4c:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   10e50:	88 23       	and	r24, r24
   10e52:	09 f4       	brne	.+2      	; 0x10e56 <gpib_write_byte+0x10a>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   10e54:	b1 cf       	rjmp	.-158    	; 0x10db8 <gpib_write_byte+0x6c>
   10e56:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10e5a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10e5e:	85 70       	andi	r24, 0x05	; 5
   10e60:	99 27       	eor	r25, r25
   10e62:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10e64:	51 f0       	breq	.+20     	; 0x10e7a <gpib_write_byte+0x12e>
   10e66:	1f 92       	push	r1
   10e68:	9a 81       	ldd	r25, Y+2	; 0x02
   10e6a:	9f 93       	push	r25
   10e6c:	29 81       	ldd	r18, Y+1	; 0x01
   10e6e:	2f 93       	push	r18
   10e70:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   10e74:	0f 90       	pop	r0
   10e76:	0f 90       	pop	r0
#endif
                    ch |= TIMEOUT_FLAG;
   10e78:	0f 90       	pop	r0
   10e7a:	8f 81       	ldd	r24, Y+7	; 0x07
   10e7c:	98 85       	ldd	r25, Y+8	; 0x08
   10e7e:	90 64       	ori	r25, 0x40	; 64
   10e80:	98 87       	std	Y+8, r25	; 0x08
   10e82:	8f 83       	std	Y+7, r24	; 0x07
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   10e84:	b4 c0       	rjmp	.+360    	; 0x10fee <gpib_write_byte+0x2a2>
   10e86:	2f 81       	ldd	r18, Y+7	; 0x07
   10e88:	38 85       	ldd	r19, Y+8	; 0x08
   10e8a:	30 ff       	sbrs	r19, 0
                    GPIB_IO_LOW(EOI);
   10e8c:	03 c0       	rjmp	.+6      	; 0x10e94 <gpib_write_byte+0x148>
   10e8e:	28 98       	cbi	0x05, 0	; 5
   10e90:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10e92:	01 c0       	rjmp	.+2      	; 0x10e96 <gpib_write_byte+0x14a>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10e94:	20 98       	cbi	0x04, 0	; 4
   10e96:	8f ef       	ldi	r24, 0xFF	; 255
   10e98:	81 b9       	out	0x01, r24	; 1
   10e9a:	8f 81       	ldd	r24, Y+7	; 0x07
   10e9c:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   10e9e:	82 b9       	out	0x02, r24	; 2
   10ea0:	43 9a       	sbi	0x08, 3	; 8
   10ea2:	3b 9a       	sbi	0x07, 3	; 7
   10ea4:	3d e0       	ldi	r19, 0x0D	; 13
   10ea6:	3a 95       	dec	r19
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10ea8:	f1 f7       	brne	.-4      	; 0x10ea6 <gpib_write_byte+0x15a>
   10eaa:	00 00       	nop
   10eac:	64 ef       	ldi	r22, 0xF4	; 244
   10eae:	71 e0       	ldi	r23, 0x01	; 1
   10eb0:	80 e0       	ldi	r24, 0x00	; 0
   10eb2:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   10eb4:	07 de       	rcall	.-1010   	; 0x10ac4 <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10eb6:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   10eb8:	7f cf       	rjmp	.-258    	; 0x10db8 <gpib_write_byte+0x6c>
   10eba:	29 98       	cbi	0x05, 1	; 5
   10ebc:	21 9a       	sbi	0x04, 1	; 4
   10ebe:	64 ef       	ldi	r22, 0xF4	; 244
   10ec0:	71 e0       	ldi	r23, 0x01	; 1
   10ec2:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   10ec4:	90 e0       	ldi	r25, 0x00	; 0
   10ec6:	fe dd       	rcall	.-1028   	; 0x10ac4 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   10ec8:	14 e0       	ldi	r17, 0x04	; 4
   10eca:	76 cf       	rjmp	.-276    	; 0x10db8 <gpib_write_byte+0x6c>
   10ecc:	4a 99       	sbic	0x09, 2	; 9
   10ece:	07 c0       	rjmp	.+14     	; 0x10ede <gpib_write_byte+0x192>
   10ed0:	64 ef       	ldi	r22, 0xF4	; 244
   10ed2:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10ed4:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   10ed6:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10ed8:	f5 dd       	rcall	.-1046   	; 0x10ac4 <gpib_timeout_set>
   10eda:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   10edc:	6d cf       	rjmp	.-294    	; 0x10db8 <gpib_write_byte+0x6c>
   10ede:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10ee2:	88 23       	and	r24, r24
   10ee4:	09 f4       	brne	.+2      	; 0x10ee8 <gpib_write_byte+0x19c>
   10ee6:	68 cf       	rjmp	.-304    	; 0x10db8 <gpib_write_byte+0x6c>
   10ee8:	8f 81       	ldd	r24, Y+7	; 0x07
   10eea:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   10eec:	90 64       	ori	r25, 0x40	; 64
   10eee:	98 87       	std	Y+8, r25	; 0x08
   10ef0:	8f 83       	std	Y+7, r24	; 0x07
   10ef2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10ef6:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10efa:	85 70       	andi	r24, 0x05	; 5
   10efc:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   10efe:	89 2b       	or	r24, r25
   10f00:	09 f4       	brne	.+2      	; 0x10f04 <gpib_write_byte+0x1b8>
   10f02:	75 c0       	rjmp	.+234    	; 0x10fee <gpib_write_byte+0x2a2>
   10f04:	1f 92       	push	r1
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   10f06:	3f 92       	push	r3
   10f08:	2f 92       	push	r2
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f0a:	3f c0       	rjmp	.+126    	; 0x10f8a <gpib_write_byte+0x23e>
   10f0c:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10f0e:	6b c0       	rjmp	.+214    	; 0x10fe6 <gpib_write_byte+0x29a>
   10f10:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10f14:	88 23       	and	r24, r24
   10f16:	09 f4       	brne	.+2      	; 0x10f1a <gpib_write_byte+0x1ce>
   10f18:	4f cf       	rjmp	.-354    	; 0x10db8 <gpib_write_byte+0x6c>
   10f1a:	2f 81       	ldd	r18, Y+7	; 0x07
   10f1c:	38 85       	ldd	r19, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   10f1e:	30 64       	ori	r19, 0x40	; 64
   10f20:	38 87       	std	Y+8, r19	; 0x08
   10f22:	2f 83       	std	Y+7, r18	; 0x07
   10f24:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10f28:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10f2c:	85 70       	andi	r24, 0x05	; 5
   10f2e:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   10f30:	89 2b       	or	r24, r25
   10f32:	09 f4       	brne	.+2      	; 0x10f36 <gpib_write_byte+0x1ea>
   10f34:	5c c0       	rjmp	.+184    	; 0x10fee <gpib_write_byte+0x2a2>
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10f36:	1f 92       	push	r1
   10f38:	7f 92       	push	r7
   10f3a:	6f 92       	push	r6
   10f3c:	26 c0       	rjmp	.+76     	; 0x10f8a <gpib_write_byte+0x23e>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   10f3e:	21 98       	cbi	0x04, 1	; 4
   10f40:	3d e0       	ldi	r19, 0x0D	; 13
   10f42:	3a 95       	dec	r19
   10f44:	f1 f7       	brne	.-4      	; 0x10f42 <gpib_write_byte+0x1f6>

                gpib_timeout_set(HTIMEOUT);
   10f46:	00 00       	nop
   10f48:	80 e0       	ldi	r24, 0x00	; 0
   10f4a:	90 e0       	ldi	r25, 0x00	; 0
   10f4c:	c5 dd       	rcall	.-1142   	; 0x10ad8 <gpib_bus_read_init>
   10f4e:	64 ef       	ldi	r22, 0xF4	; 244
   10f50:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   10f52:	80 e0       	ldi	r24, 0x00	; 0
                break;
   10f54:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   10f56:	b6 dd       	rcall	.-1172   	; 0x10ac4 <gpib_timeout_set>
   10f58:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f5a:	2e cf       	rjmp	.-420    	; 0x10db8 <gpib_write_byte+0x6c>
   10f5c:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   10f5e:	45 c0       	rjmp	.+138    	; 0x10fea <gpib_write_byte+0x29e>
   10f60:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10f64:	88 23       	and	r24, r24
   10f66:	09 f4       	brne	.+2      	; 0x10f6a <gpib_write_byte+0x21e>
   10f68:	27 cf       	rjmp	.-434    	; 0x10db8 <gpib_write_byte+0x6c>
   10f6a:	8f 81       	ldd	r24, Y+7	; 0x07
   10f6c:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   10f6e:	90 64       	ori	r25, 0x40	; 64
   10f70:	98 87       	std	Y+8, r25	; 0x08
   10f72:	8f 83       	std	Y+7, r24	; 0x07
   10f74:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10f78:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10f7c:	85 70       	andi	r24, 0x05	; 5
                        printf("<BUS waiting for DAV==1>\n");
   10f7e:	99 27       	eor	r25, r25
   10f80:	89 2b       	or	r24, r25
   10f82:	a9 f1       	breq	.+106    	; 0x10fee <gpib_write_byte+0x2a2>
   10f84:	1f 92       	push	r1
   10f86:	df 92       	push	r13
   10f88:	cf 92       	push	r12
   10f8a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   10f8e:	0f 90       	pop	r0
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
#if SDEBUG
                if(debuglevel & (1+4))
   10f90:	0f 90       	pop	r0
   10f92:	0f 90       	pop	r0
   10f94:	2c c0       	rjmp	.+88     	; 0x10fee <gpib_write_byte+0x2a2>
   10f96:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10f9a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10f9e:	85 70       	andi	r24, 0x05	; 5
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   10fa0:	99 27       	eor	r25, r25
   10fa2:	89 2b       	or	r24, r25
   10fa4:	c1 f0       	breq	.+48     	; 0x10fd6 <gpib_write_byte+0x28a>
   10fa6:	99 b1       	in	r25, 0x09	; 9
   10fa8:	89 b1       	in	r24, 0x09	; 9
   10faa:	93 fb       	bst	r25, 3
   10fac:	99 27       	eor	r25, r25
   10fae:	90 f9       	bld	r25, 0
   10fb0:	1f 92       	push	r1
   10fb2:	9f 93       	push	r25
   10fb4:	82 fb       	bst	r24, 2
   10fb6:	88 27       	eor	r24, r24
   10fb8:	80 f9       	bld	r24, 0
   10fba:	1f 92       	push	r1
   10fbc:	8f 93       	push	r24
   10fbe:	8a e0       	ldi	r24, 0x0A	; 10
   10fc0:	90 e1       	ldi	r25, 0x10	; 16
   10fc2:	1f 92       	push	r1
   10fc4:	9f 93       	push	r25
   10fc6:	8f 93       	push	r24
   10fc8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   10fcc:	0f b6       	in	r0, 0x3f	; 63
#endif
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   10fce:	f8 94       	cli
   10fd0:	de bf       	out	0x3e, r29	; 62
   10fd2:	0f be       	out	0x3f, r0	; 63
   10fd4:	cd bf       	out	0x3d, r28	; 61
                tx_state = GPIB_TX_DONE;
                break;
   10fd6:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   10fd8:	90 e0       	ldi	r25, 0x00	; 0
   10fda:	7e dd       	rcall	.-1284   	; 0x10ad8 <gpib_bus_read_init>
   10fdc:	0a c0       	rjmp	.+20     	; 0x10ff2 <gpib_write_byte+0x2a6>
   10fde:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10fe0:	09 f0       	breq	.+2      	; 0x10fe4 <gpib_write_byte+0x298>
   10fe2:	ea ce       	rjmp	.-556    	; 0x10db8 <gpib_write_byte+0x6c>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   10fe4:	06 c0       	rjmp	.+12     	; 0x10ff2 <gpib_write_byte+0x2a6>
   10fe6:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10fe8:	e7 ce       	rjmp	.-562    	; 0x10db8 <gpib_write_byte+0x6c>
   10fea:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10fec:	e5 ce       	rjmp	.-566    	; 0x10db8 <gpib_write_byte+0x6c>
   10fee:	19 e0       	ldi	r17, 0x09	; 9
   10ff0:	e3 ce       	rjmp	.-570    	; 0x10db8 <gpib_write_byte+0x6c>
   10ff2:	8f 81       	ldd	r24, Y+7	; 0x07
   10ff4:	98 85       	ldd	r25, Y+8	; 0x08
   10ff6:	28 96       	adiw	r28, 0x08	; 8
   10ff8:	0f b6       	in	r0, 0x3f	; 63
   10ffa:	f8 94       	cli
   10ffc:	de bf       	out	0x3e, r29	; 62
   10ffe:	0f be       	out	0x3f, r0	; 63
   11000:	cd bf       	out	0x3d, r28	; 61
   11002:	df 91       	pop	r29
   11004:	cf 91       	pop	r28
   11006:	1f 91       	pop	r17
   11008:	ef 90       	pop	r14
   1100a:	df 90       	pop	r13
   1100c:	cf 90       	pop	r12
   1100e:	8f 90       	pop	r8
   11010:	7f 90       	pop	r7
   11012:	6f 90       	pop	r6
   11014:	4f 90       	pop	r4
   11016:	3f 90       	pop	r3
   11018:	2f 90       	pop	r2
   1101a:	08 95       	ret

0001101c <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   1101c:	cf 93       	push	r28
   1101e:	df 93       	push	r29
   11020:	ec 01       	movw	r28, r24
    if(fo == NULL)
   11022:	89 2b       	or	r24, r25
   11024:	21 f4       	brne	.+8      	; 0x1102e <gpib_decode_header+0x12>
        fo = stdout;
   11026:	c0 91 b9 1b 	lds	r28, 0x1BB9	; 0x801bb9 <__iob+0x2>
   1102a:	d0 91 ba 1b 	lds	r29, 0x1BBA	; 0x801bba <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   1102e:	be 01       	movw	r22, r28
   11030:	85 e7       	ldi	r24, 0x75	; 117
   11032:	9b e0       	ldi	r25, 0x0B	; 11
   11034:	0e 94 f3 76 	call	0xede6	; 0xede6 <fputs>
    fprintf(fo,"GPIB bus state\n");
   11038:	be 01       	movw	r22, r28
   1103a:	82 ea       	ldi	r24, 0xA2	; 162
   1103c:	9b e0       	ldi	r25, 0x0B	; 11
   1103e:	0e 94 f3 76 	call	0xede6	; 0xede6 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   11042:	be 01       	movw	r22, r28
   11044:	82 eb       	ldi	r24, 0xB2	; 178
   11046:	9b e0       	ldi	r25, 0x0B	; 11
   11048:	0e 94 f3 76 	call	0xede6	; 0xede6 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   1104c:	be 01       	movw	r22, r28
   1104e:	86 ec       	ldi	r24, 0xC6	; 198
   11050:	9b e0       	ldi	r25, 0x0B	; 11
   11052:	0e 94 f3 76 	call	0xede6	; 0xede6 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   11056:	be 01       	movw	r22, r28
   11058:	89 ee       	ldi	r24, 0xE9	; 233
   1105a:	9b e0       	ldi	r25, 0x0B	; 11
   1105c:	0e 94 f3 76 	call	0xede6	; 0xede6 <fputs>
    fprintf(fo,"     A = ATN\n");
   11060:	be 01       	movw	r22, r28
   11062:	83 e1       	ldi	r24, 0x13	; 19
   11064:	9c e0       	ldi	r25, 0x0C	; 12
   11066:	0e 94 f3 76 	call	0xede6	; 0xede6 <fputs>
    fprintf(fo,"      E = EOI\n");
   1106a:	be 01       	movw	r22, r28
   1106c:	81 e2       	ldi	r24, 0x21	; 33
   1106e:	9c e0       	ldi	r25, 0x0C	; 12
   11070:	0e 94 f3 76 	call	0xede6	; 0xede6 <fputs>
    fprintf(fo,"       S = SRQ\n");
   11074:	be 01       	movw	r22, r28
   11076:	80 e3       	ldi	r24, 0x30	; 48
   11078:	9c e0       	ldi	r25, 0x0C	; 12
   1107a:	0e 94 f3 76 	call	0xede6	; 0xede6 <fputs>
    fprintf(fo,"        R = REN\n");
   1107e:	be 01       	movw	r22, r28
   11080:	80 e4       	ldi	r24, 0x40	; 64
   11082:	9c e0       	ldi	r25, 0x0C	; 12
   11084:	0e 94 f3 76 	call	0xede6	; 0xede6 <fputs>
    fprintf(fo,"         I = IFC\n");
   11088:	be 01       	movw	r22, r28
   1108a:	81 e5       	ldi	r24, 0x51	; 81
   1108c:	9c e0       	ldi	r25, 0x0C	; 12
   1108e:	0e 94 f3 76 	call	0xede6	; 0xede6 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   11092:	be 01       	movw	r22, r28
   11094:	83 e6       	ldi	r24, 0x63	; 99
   11096:	9c e0       	ldi	r25, 0x0C	; 12
   11098:	0e 94 f3 76 	call	0xede6	; 0xede6 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   1109c:	be 01       	movw	r22, r28
   1109e:	85 e8       	ldi	r24, 0x85	; 133
   110a0:	9c e0       	ldi	r25, 0x0C	; 12
   110a2:	0e 94 f3 76 	call	0xede6	; 0xede6 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   110a6:	be 01       	movw	r22, r28
   110a8:	8d e9       	ldi	r24, 0x9D	; 157
   110aa:	9c e0       	ldi	r25, 0x0C	; 12
   110ac:	0e 94 f3 76 	call	0xede6	; 0xede6 <fputs>
    fprintf(fo,"              GPIB commands\n");
   110b0:	be 01       	movw	r22, r28
   110b2:	88 eb       	ldi	r24, 0xB8	; 184
   110b4:	9c e0       	ldi	r25, 0x0C	; 12
   110b6:	0e 94 f3 76 	call	0xede6	; 0xede6 <fputs>
}
   110ba:	df 91       	pop	r29
   110bc:	cf 91       	pop	r28
   110be:	08 95       	ret

000110c0 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   110c0:	a0 e8       	ldi	r26, 0x80	; 128
   110c2:	b0 e0       	ldi	r27, 0x00	; 0
   110c4:	e6 e6       	ldi	r30, 0x66	; 102
   110c6:	f8 e8       	ldi	r31, 0x88	; 136
   110c8:	0c 94 34 e5 	jmp	0x1ca68	; 0x1ca68 <__prologue_saves__+0xc>
   110cc:	8c 01       	movw	r16, r24
   110ce:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   110d0:	19 82       	std	Y+1, r1	; 0x01
   110d2:	4c 01       	movw	r8, r24
   110d4:	88 24       	eor	r8, r8
   110d6:	44 e0       	ldi	r20, 0x04	; 4
   110d8:	94 22       	and	r9, r20
   110da:	ce 01       	movw	r24, r28
   110dc:	01 96       	adiw	r24, 0x01	; 1
   110de:	6c 01       	movw	r12, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   110e0:	62 30       	cpi	r22, 0x02	; 2
   110e2:	71 05       	cpc	r23, r1
   110e4:	f0 f4       	brcc	.+60     	; 0x11122 <gpib_trace_display+0x62>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   110e6:	81 14       	cp	r8, r1
   110e8:	91 04       	cpc	r9, r1
   110ea:	29 f4       	brne	.+10     	; 0x110f6 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   110ec:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   110ee:	90 ee       	ldi	r25, 0xE0	; 224
   110f0:	90 0f       	add	r25, r16
   110f2:	9f 35       	cpi	r25, 0x5F	; 95
   110f4:	08 f0       	brcs	.+2      	; 0x110f8 <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   110f6:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   110f8:	1f 92       	push	r1
   110fa:	8f 93       	push	r24
   110fc:	c8 01       	movw	r24, r16
   110fe:	99 27       	eor	r25, r25
   11100:	9f 93       	push	r25
   11102:	8f 93       	push	r24
   11104:	81 e0       	ldi	r24, 0x01	; 1
   11106:	90 e1       	ldi	r25, 0x10	; 16
   11108:	1f 92       	push	r1
   1110a:	9f 93       	push	r25
   1110c:	8f 93       	push	r24
   1110e:	df 92       	push	r13
   11110:	cf 92       	push	r12
   11112:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <sprintf_P>
   11116:	0f b6       	in	r0, 0x3f	; 63
   11118:	f8 94       	cli
   1111a:	de bf       	out	0x3e, r29	; 62
   1111c:	0f be       	out	0x3f, r0	; 63
   1111e:	cd bf       	out	0x3d, r28	; 61
   11120:	0e c0       	rjmp	.+28     	; 0x1113e <gpib_trace_display+0x7e>
    }
    else
    {
        sprintf(str, "     ");
   11122:	8b ef       	ldi	r24, 0xFB	; 251
   11124:	9f e0       	ldi	r25, 0x0F	; 15
   11126:	1f 92       	push	r1
   11128:	9f 93       	push	r25
   1112a:	8f 93       	push	r24
   1112c:	df 92       	push	r13
   1112e:	cf 92       	push	r12
   11130:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <sprintf_P>
   11134:	0f 90       	pop	r0
   11136:	0f 90       	pop	r0
   11138:	0f 90       	pop	r0
   1113a:	0f 90       	pop	r0
   1113c:	0f 90       	pop	r0
    }

    tmp = str + strlen(str);
   1113e:	f6 01       	movw	r30, r12
   11140:	01 90       	ld	r0, Z+
   11142:	00 20       	and	r0, r0
   11144:	e9 f7       	brne	.-6      	; 0x11140 <gpib_trace_display+0x80>
   11146:	31 97       	sbiw	r30, 0x01	; 1
   11148:	cf 01       	movw	r24, r30
   1114a:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   1114c:	81 14       	cp	r8, r1
   1114e:	91 04       	cpc	r9, r1
   11150:	11 f0       	breq	.+4      	; 0x11156 <gpib_trace_display+0x96>
        *tmp++ = 'A';
   11152:	21 e4       	ldi	r18, 0x41	; 65
   11154:	01 c0       	rjmp	.+2      	; 0x11158 <gpib_trace_display+0x98>
    else
        *tmp++ = '-';
   11156:	2d e2       	ldi	r18, 0x2D	; 45
   11158:	20 83       	st	Z, r18
   1115a:	dc 01       	movw	r26, r24
   1115c:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   1115e:	10 ff       	sbrs	r17, 0
   11160:	02 c0       	rjmp	.+4      	; 0x11166 <gpib_trace_display+0xa6>
        *tmp++ = 'E';
   11162:	25 e4       	ldi	r18, 0x45	; 69
   11164:	01 c0       	rjmp	.+2      	; 0x11168 <gpib_trace_display+0xa8>
    else
        *tmp++ = '-';
   11166:	2d e2       	ldi	r18, 0x2D	; 45
   11168:	fc 01       	movw	r30, r24
   1116a:	20 83       	st	Z, r18
   1116c:	fd 01       	movw	r30, r26
   1116e:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   11170:	11 ff       	sbrs	r17, 1
   11172:	02 c0       	rjmp	.+4      	; 0x11178 <gpib_trace_display+0xb8>
        *tmp++ = 'S';
   11174:	83 e5       	ldi	r24, 0x53	; 83
   11176:	01 c0       	rjmp	.+2      	; 0x1117a <gpib_trace_display+0xba>
    else
        *tmp++ = '-';
   11178:	8d e2       	ldi	r24, 0x2D	; 45
   1117a:	8c 93       	st	X, r24
   1117c:	df 01       	movw	r26, r30
   1117e:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   11180:	13 ff       	sbrs	r17, 3
   11182:	02 c0       	rjmp	.+4      	; 0x11188 <gpib_trace_display+0xc8>
        *tmp++ = 'R';
   11184:	82 e5       	ldi	r24, 0x52	; 82
   11186:	01 c0       	rjmp	.+2      	; 0x1118a <gpib_trace_display+0xca>
    else
        *tmp++ = '-';
   11188:	8d e2       	ldi	r24, 0x2D	; 45
   1118a:	80 83       	st	Z, r24
   1118c:	fd 01       	movw	r30, r26
   1118e:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   11190:	14 ff       	sbrs	r17, 4
   11192:	02 c0       	rjmp	.+4      	; 0x11198 <gpib_trace_display+0xd8>
        *tmp++ = 'I';
   11194:	89 e4       	ldi	r24, 0x49	; 73
   11196:	01 c0       	rjmp	.+2      	; 0x1119a <gpib_trace_display+0xda>
    else
        *tmp++ = '-';
   11198:	8d e2       	ldi	r24, 0x2D	; 45
   1119a:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   1119c:	a1 14       	cp	r10, r1
   1119e:	b1 04       	cpc	r11, r1
   111a0:	d1 f4       	brne	.+52     	; 0x111d6 <gpib_trace_display+0x116>
   111a2:	df 01       	movw	r26, r30
   111a4:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   111a6:	15 ff       	sbrs	r17, 5
   111a8:	02 c0       	rjmp	.+4      	; 0x111ae <gpib_trace_display+0xee>
            *tmp++ = 'P';
   111aa:	80 e5       	ldi	r24, 0x50	; 80
   111ac:	01 c0       	rjmp	.+2      	; 0x111b0 <gpib_trace_display+0xf0>
        else
            *tmp++ = '-';
   111ae:	8d e2       	ldi	r24, 0x2D	; 45
   111b0:	80 83       	st	Z, r24
   111b2:	fd 01       	movw	r30, r26
   111b4:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   111b6:	16 ff       	sbrs	r17, 6
   111b8:	02 c0       	rjmp	.+4      	; 0x111be <gpib_trace_display+0xfe>
            *tmp++ = 'T';
   111ba:	84 e5       	ldi	r24, 0x54	; 84
   111bc:	01 c0       	rjmp	.+2      	; 0x111c0 <gpib_trace_display+0x100>
        else
            *tmp++ = '-';
   111be:	8d e2       	ldi	r24, 0x2D	; 45
   111c0:	8c 93       	st	X, r24
   111c2:	cf 01       	movw	r24, r30
   111c4:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   111c6:	7c 01       	movw	r14, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   111c8:	17 ff       	sbrs	r17, 7
   111ca:	02 c0       	rjmp	.+4      	; 0x111d0 <gpib_trace_display+0x110>
            *tmp++ = 'B';
   111cc:	82 e4       	ldi	r24, 0x42	; 66
   111ce:	01 c0       	rjmp	.+2      	; 0x111d2 <gpib_trace_display+0x112>
        else
            *tmp++ = '-';
   111d0:	8d e2       	ldi	r24, 0x2D	; 45
   111d2:	80 83       	st	Z, r24
   111d4:	08 c0       	rjmp	.+16     	; 0x111e6 <gpib_trace_display+0x126>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   111d6:	8d e2       	ldi	r24, 0x2D	; 45
   111d8:	80 83       	st	Z, r24
        *tmp++ = '-';
   111da:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   111dc:	7f 01       	movw	r14, r30
   111de:	43 e0       	ldi	r20, 0x03	; 3
   111e0:	e4 0e       	add	r14, r20
   111e2:	f1 1c       	adc	r15, r1
   111e4:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   111e6:	f7 01       	movw	r30, r14
   111e8:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   111ea:	f1 e0       	ldi	r31, 0x01	; 1
   111ec:	af 1a       	sub	r10, r31
   111ee:	b1 08       	sbc	r11, r1
   111f0:	42 e0       	ldi	r20, 0x02	; 2
   111f2:	a4 16       	cp	r10, r20
   111f4:	b1 04       	cpc	r11, r1
   111f6:	f0 f4       	brcc	.+60     	; 0x11234 <gpib_trace_display+0x174>
    {
        if(status & DAV_FLAG)
   111f8:	15 ff       	sbrs	r17, 5
   111fa:	03 c0       	rjmp	.+6      	; 0x11202 <gpib_trace_display+0x142>
            strcat(str,"  DAV");
   111fc:	65 ed       	ldi	r22, 0xD5	; 213
   111fe:	7c e0       	ldi	r23, 0x0C	; 12
   11200:	02 c0       	rjmp	.+4      	; 0x11206 <gpib_trace_display+0x146>
        else
            strcat(str,"     ");
   11202:	62 e3       	ldi	r22, 0x32	; 50
   11204:	78 e0       	ldi	r23, 0x08	; 8
   11206:	c6 01       	movw	r24, r12
   11208:	0e 94 c2 31 	call	0x6384	; 0x6384 <strcat>
        if(status & NRFD_FLAG)
   1120c:	16 ff       	sbrs	r17, 6
   1120e:	03 c0       	rjmp	.+6      	; 0x11216 <gpib_trace_display+0x156>
            strcat(str," NRFD");
   11210:	6b ed       	ldi	r22, 0xDB	; 219
   11212:	7c e0       	ldi	r23, 0x0C	; 12
   11214:	02 c0       	rjmp	.+4      	; 0x1121a <gpib_trace_display+0x15a>
        else
            strcat(str,"     ");
   11216:	62 e3       	ldi	r22, 0x32	; 50
   11218:	78 e0       	ldi	r23, 0x08	; 8
   1121a:	c6 01       	movw	r24, r12
   1121c:	0e 94 c2 31 	call	0x6384	; 0x6384 <strcat>
        if(status & NDAC_FLAG)
   11220:	17 ff       	sbrs	r17, 7
   11222:	03 c0       	rjmp	.+6      	; 0x1122a <gpib_trace_display+0x16a>
            strcat(str," NDAC");
   11224:	61 ee       	ldi	r22, 0xE1	; 225
   11226:	7c e0       	ldi	r23, 0x0C	; 12
   11228:	02 c0       	rjmp	.+4      	; 0x1122e <gpib_trace_display+0x16e>
        else
            strcat(str,"     ");
   1122a:	62 e3       	ldi	r22, 0x32	; 50
   1122c:	78 e0       	ldi	r23, 0x08	; 8
   1122e:	c6 01       	movw	r24, r12
   11230:	0e 94 c2 31 	call	0x6384	; 0x6384 <strcat>
    }

    if( (status & ATN_FLAG) )
   11234:	81 14       	cp	r8, r1
   11236:	91 04       	cpc	r9, r1
   11238:	09 f4       	brne	.+2      	; 0x1123c <gpib_trace_display+0x17c>
   1123a:	58 c0       	rjmp	.+176    	; 0x112ec <gpib_trace_display+0x22c>
    {
        int i;
        int cmd = status & CMD_MASK;
   1123c:	c8 01       	movw	r24, r16
   1123e:	8f 77       	andi	r24, 0x7F	; 127
   11240:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   11242:	9c 01       	movw	r18, r24
   11244:	20 52       	subi	r18, 0x20	; 32
   11246:	31 09       	sbc	r19, r1
   11248:	2f 31       	cpi	r18, 0x1F	; 31
   1124a:	31 05       	cpc	r19, r1
   1124c:	38 f4       	brcc	.+14     	; 0x1125c <gpib_trace_display+0x19c>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   1124e:	0f 71       	andi	r16, 0x1F	; 31
   11250:	11 27       	eor	r17, r17
   11252:	1f 93       	push	r17
   11254:	0f 93       	push	r16
   11256:	80 ef       	ldi	r24, 0xF0	; 240
   11258:	9f e0       	ldi	r25, 0x0F	; 15
   1125a:	0c c0       	rjmp	.+24     	; 0x11274 <gpib_trace_display+0x1b4>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   1125c:	9c 01       	movw	r18, r24
   1125e:	20 54       	subi	r18, 0x40	; 64
   11260:	31 09       	sbc	r19, r1
   11262:	2f 30       	cpi	r18, 0x0F	; 15
   11264:	31 05       	cpc	r19, r1
   11266:	98 f4       	brcc	.+38     	; 0x1128e <gpib_trace_display+0x1ce>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   11268:	0f 71       	andi	r16, 0x1F	; 31
   1126a:	11 27       	eor	r17, r17
   1126c:	1f 93       	push	r17
   1126e:	0f 93       	push	r16
   11270:	85 ee       	ldi	r24, 0xE5	; 229
   11272:	9f e0       	ldi	r25, 0x0F	; 15
   11274:	1f 92       	push	r1
   11276:	9f 93       	push	r25
   11278:	8f 93       	push	r24
   1127a:	ff 92       	push	r15
   1127c:	ef 92       	push	r14
   1127e:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <sprintf_P>
   11282:	0f b6       	in	r0, 0x3f	; 63
   11284:	f8 94       	cli
   11286:	de bf       	out	0x3e, r29	; 62
   11288:	0f be       	out	0x3f, r0	; 63
   1128a:	cd bf       	out	0x3d, r28	; 61
   1128c:	2f c0       	rjmp	.+94     	; 0x112ec <gpib_trace_display+0x22c>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   1128e:	9c 01       	movw	r18, r24
   11290:	20 56       	subi	r18, 0x60	; 96
   11292:	31 09       	sbc	r19, r1
   11294:	20 31       	cpi	r18, 0x10	; 16
   11296:	31 05       	cpc	r19, r1
   11298:	28 f0       	brcs	.+10     	; 0x112a4 <gpib_trace_display+0x1e4>
   1129a:	e9 e8       	ldi	r30, 0x89	; 137
   1129c:	f1 e0       	ldi	r31, 0x01	; 1
   1129e:	00 e0       	ldi	r16, 0x00	; 0
   112a0:	10 e0       	ldi	r17, 0x00	; 0
   112a2:	09 c0       	rjmp	.+18     	; 0x112b6 <gpib_trace_display+0x1f6>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   112a4:	0f 71       	andi	r16, 0x1F	; 31
   112a6:	11 27       	eor	r17, r17
   112a8:	1f 93       	push	r17
   112aa:	0f 93       	push	r16
   112ac:	8a ed       	ldi	r24, 0xDA	; 218
   112ae:	9f e0       	ldi	r25, 0x0F	; 15
   112b0:	e1 cf       	rjmp	.-62     	; 0x11274 <gpib_trace_display+0x1b4>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   112b2:	0f 5f       	subi	r16, 0xFF	; 255
   112b4:	1f 4f       	sbci	r17, 0xFF	; 255
   112b6:	20 81       	ld	r18, Z
   112b8:	31 81       	ldd	r19, Z+1	; 0x01
   112ba:	2f 3f       	cpi	r18, 0xFF	; 255
   112bc:	4f ef       	ldi	r20, 0xFF	; 255
   112be:	34 07       	cpc	r19, r20
   112c0:	a9 f0       	breq	.+42     	; 0x112ec <gpib_trace_display+0x22c>
   112c2:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   112c4:	82 17       	cp	r24, r18
   112c6:	93 07       	cpc	r25, r19
   112c8:	a1 f7       	brne	.-24     	; 0x112b2 <gpib_trace_display+0x1f2>
                {
                    strcat(tmp," ");
   112ca:	66 e3       	ldi	r22, 0x36	; 54
   112cc:	78 e0       	ldi	r23, 0x08	; 8
   112ce:	c7 01       	movw	r24, r14
   112d0:	0e 94 c2 31 	call	0x6384	; 0x6384 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   112d4:	00 0f       	add	r16, r16
   112d6:	11 1f       	adc	r17, r17
   112d8:	00 0f       	add	r16, r16
   112da:	11 1f       	adc	r17, r17
   112dc:	f8 01       	movw	r30, r16
   112de:	e7 57       	subi	r30, 0x77	; 119
   112e0:	fe 4f       	sbci	r31, 0xFE	; 254
   112e2:	62 81       	ldd	r22, Z+2	; 0x02
   112e4:	73 81       	ldd	r23, Z+3	; 0x03
   112e6:	c7 01       	movw	r24, r14
   112e8:	0e 94 c2 31 	call	0x6384	; 0x6384 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   112ec:	20 91 5d 18 	lds	r18, 0x185D	; 0x80185d <gpib_log_fp>
   112f0:	30 91 5e 18 	lds	r19, 0x185E	; 0x80185e <gpib_log_fp+0x1>
   112f4:	80 91 b9 1b 	lds	r24, 0x1BB9	; 0x801bb9 <__iob+0x2>
   112f8:	90 91 ba 1b 	lds	r25, 0x1BBA	; 0x801bba <__iob+0x3>
   112fc:	23 2b       	or	r18, r19
   112fe:	21 f4       	brne	.+8      	; 0x11308 <gpib_trace_display+0x248>
        gpib_log_fp = stdout;
   11300:	90 93 5e 18 	sts	0x185E, r25	; 0x80185e <gpib_log_fp+0x1>
   11304:	80 93 5d 18 	sts	0x185D, r24	; 0x80185d <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11308:	20 91 5d 18 	lds	r18, 0x185D	; 0x80185d <gpib_log_fp>
   1130c:	30 91 5e 18 	lds	r19, 0x185E	; 0x80185e <gpib_log_fp+0x1>
   11310:	82 17       	cp	r24, r18
   11312:	93 07       	cpc	r25, r19
   11314:	19 f0       	breq	.+6      	; 0x1131c <gpib_trace_display+0x25c>
        puts(str);
   11316:	c6 01       	movw	r24, r12
   11318:	0e 94 0b 77 	call	0xee16	; 0xee16 <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   1131c:	df 92       	push	r13
   1131e:	cf 92       	push	r12
   11320:	87 ee       	ldi	r24, 0xE7	; 231
   11322:	9c e0       	ldi	r25, 0x0C	; 12
   11324:	9f 93       	push	r25
   11326:	8f 93       	push	r24
   11328:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <gpib_log_fp+0x1>
   1132c:	8f 93       	push	r24
   1132e:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <gpib_log_fp>
   11332:	8f 93       	push	r24
   11334:	0e 94 9a 7e 	call	0xfd34	; 0xfd34 <fprintf>
}
   11338:	0f 90       	pop	r0
   1133a:	0f 90       	pop	r0
   1133c:	0f 90       	pop	r0
   1133e:	0f 90       	pop	r0
   11340:	0f 90       	pop	r0
   11342:	0f 90       	pop	r0
   11344:	c0 58       	subi	r28, 0x80	; 128
   11346:	df 4f       	sbci	r29, 0xFF	; 255
   11348:	ec e0       	ldi	r30, 0x0C	; 12
   1134a:	0c 94 50 e5 	jmp	0x1caa0	; 0x1caa0 <__epilogue_restores__+0xc>

0001134e <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   1134e:	af 92       	push	r10
   11350:	bf 92       	push	r11
   11352:	cf 92       	push	r12
   11354:	df 92       	push	r13
   11356:	ff 92       	push	r15
   11358:	0f 93       	push	r16
   1135a:	1f 93       	push	r17
   1135c:	cf 93       	push	r28
   1135e:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   11360:	20 91 5c 18 	lds	r18, 0x185C	; 0x80185c <gpib_unread_f>
   11364:	22 23       	and	r18, r18
   11366:	39 f0       	breq	.+14     	; 0x11376 <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   11368:	10 92 5c 18 	sts	0x185C, r1	; 0x80185c <gpib_unread_f>
        return(gpib_unread_data);
   1136c:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <gpib_unread_data>
   11370:	90 91 eb 1d 	lds	r25, 0x1DEB	; 0x801deb <gpib_unread_data+0x1>
   11374:	b8 c0       	rjmp	.+368    	; 0x114e6 <gpib_read_byte+0x198>
   11376:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   11378:	81 e0       	ldi	r24, 0x01	; 1
   1137a:	90 e0       	ldi	r25, 0x00	; 0
   1137c:	ad db       	rcall	.-2214   	; 0x10ad8 <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   1137e:	c1 14       	cp	r12, r1
   11380:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   11382:	51 f0       	breq	.+20     	; 0x11398 <gpib_read_byte+0x4a>
   11384:	c7 dc       	rcall	.-1650   	; 0x10d14 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   11386:	8c 01       	movw	r16, r24
   11388:	d5 dc       	rcall	.-1622   	; 0x10d34 <gpib_handshake_pin_read>
   1138a:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   1138c:	19 2b       	or	r17, r25
   1138e:	62 e0       	ldi	r22, 0x02	; 2
   11390:	70 e0       	ldi	r23, 0x00	; 0
   11392:	c8 01       	movw	r24, r16
   11394:	95 de       	rcall	.-726    	; 0x110c0 <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   11396:	02 c0       	rjmp	.+4      	; 0x1139c <gpib_read_byte+0x4e>
   11398:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   1139a:	10 e0       	ldi	r17, 0x00	; 0
   1139c:	f1 2c       	mov	r15, r1
   1139e:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   113a0:	d0 e0       	ldi	r29, 0x00	; 0
   113a2:	80 e0       	ldi	r24, 0x00	; 0
   113a4:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   113a8:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   113aa:	09 f0       	breq	.+2      	; 0x113ae <gpib_read_byte+0x60>
   113ac:	78 c0       	rjmp	.+240    	; 0x1149e <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   113ae:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   113b0:	03 c0       	rjmp	.+6      	; 0x113b8 <gpib_read_byte+0x6a>
   113b2:	d0 61       	ori	r29, 0x10	; 16
   113b4:	b4 db       	rcall	.-2200   	; 0x10b1e <gpib_bus_init>
            break;
        }


        switch(rx_state)
   113b6:	73 c0       	rjmp	.+230    	; 0x1149e <gpib_read_byte+0x150>
   113b8:	8f 2d       	mov	r24, r15
   113ba:	90 e0       	ldi	r25, 0x00	; 0
   113bc:	89 30       	cpi	r24, 0x09	; 9
   113be:	91 05       	cpc	r25, r1
   113c0:	08 f0       	brcs	.+2      	; 0x113c4 <gpib_read_byte+0x76>
   113c2:	51 c0       	rjmp	.+162    	; 0x11466 <gpib_read_byte+0x118>
   113c4:	fc 01       	movw	r30, r24
   113c6:	e9 53       	subi	r30, 0x39	; 57
   113c8:	ff 4f       	sbci	r31, 0xFF	; 255
   113ca:	0c 94 ea e4 	jmp	0x1c9d4	; 0x1c9d4 <__tablejump2__>
   113ce:	52 98       	cbi	0x0a, 2	; 10
   113d0:	8d e0       	ldi	r24, 0x0D	; 13
   113d2:	8a 95       	dec	r24
   113d4:	f1 f7       	brne	.-4      	; 0x113d2 <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   113d6:	00 00       	nop
   113d8:	ff 24       	eor	r15, r15
   113da:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   113dc:	7f c0       	rjmp	.+254    	; 0x114dc <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   113de:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   113e0:	7d c0       	rjmp	.+250    	; 0x114dc <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   113e2:	62 e0       	ldi	r22, 0x02	; 2
   113e4:	f6 2e       	mov	r15, r22
   113e6:	7a c0       	rjmp	.+244    	; 0x114dc <gpib_read_byte+0x18e>
   113e8:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   113ea:	52 9a       	sbi	0x0a, 2	; 10
   113ec:	8d dc       	rcall	.-1766   	; 0x10d08 <gpib_bus_read>
   113ee:	a8 2e       	mov	r10, r24
   113f0:	b1 2c       	mov	r11, r1
                ch |= control_last;
   113f2:	90 dc       	rcall	.-1760   	; 0x10d14 <gpib_control_pin_read>
   113f4:	8c 01       	movw	r16, r24

                if(trace)
   113f6:	c8 2b       	or	r28, r24
   113f8:	d9 2b       	or	r29, r25
   113fa:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   113fc:	db 29       	or	r29, r11
   113fe:	c1 14       	cp	r12, r1
   11400:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   11402:	49 f0       	breq	.+18     	; 0x11416 <gpib_read_byte+0xc8>
   11404:	97 dc       	rcall	.-1746   	; 0x10d34 <gpib_handshake_pin_read>
   11406:	08 2b       	or	r16, r24
   11408:	19 2b       	or	r17, r25
   1140a:	61 e0       	ldi	r22, 0x01	; 1
   1140c:	70 e0       	ldi	r23, 0x00	; 0
   1140e:	c5 01       	movw	r24, r10
   11410:	80 2b       	or	r24, r16
   11412:	91 2b       	or	r25, r17
   11414:	55 de       	rcall	.-854    	; 0x110c0 <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   11416:	53 98       	cbi	0x0a, 3	; 10
   11418:	8d e0       	ldi	r24, 0x0D	; 13
   1141a:	8a 95       	dec	r24
   1141c:	f1 f7       	brne	.-4      	; 0x1141a <gpib_read_byte+0xcc>
   1141e:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11420:	64 ef       	ldi	r22, 0xF4	; 244
   11422:	71 e0       	ldi	r23, 0x01	; 1
   11424:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   11426:	90 e0       	ldi	r25, 0x00	; 0
   11428:	4d db       	rcall	.-2406   	; 0x10ac4 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   1142a:	54 e0       	ldi	r21, 0x04	; 4
   1142c:	f5 2e       	mov	r15, r21
   1142e:	56 c0       	rjmp	.+172    	; 0x114dc <gpib_read_byte+0x18e>
   11430:	4b 9b       	sbis	0x09, 3	; 9
   11432:	0c c0       	rjmp	.+24     	; 0x1144c <gpib_read_byte+0xfe>
   11434:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11436:	71 e0       	ldi	r23, 0x01	; 1
   11438:	80 e0       	ldi	r24, 0x00	; 0
   1143a:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   1143c:	43 db       	rcall	.-2426   	; 0x10ac4 <gpib_timeout_set>
   1143e:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   11440:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11442:	04 c0       	rjmp	.+8      	; 0x1144c <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   11444:	19 9b       	sbis	0x03, 1	; 3
   11446:	02 c0       	rjmp	.+4      	; 0x1144c <gpib_read_byte+0xfe>
   11448:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   1144a:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   1144c:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <gpib_timer+0x8>
   11450:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   11452:	09 f4       	brne	.+2      	; 0x11456 <gpib_read_byte+0x108>
   11454:	43 c0       	rjmp	.+134    	; 0x114dc <gpib_read_byte+0x18e>
   11456:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   11458:	27 e0       	ldi	r18, 0x07	; 7
   1145a:	f2 2e       	mov	r15, r18
   1145c:	3f c0       	rjmp	.+126    	; 0x114dc <gpib_read_byte+0x18e>
   1145e:	81 e0       	ldi	r24, 0x01	; 1
   11460:	90 e0       	ldi	r25, 0x00	; 0
   11462:	3a db       	rcall	.-2444   	; 0x10ad8 <gpib_bus_read_init>
   11464:	04 c0       	rjmp	.+8      	; 0x1146e <gpib_read_byte+0x120>
   11466:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11468:	d1 04       	cpc	r13, r1
   1146a:	99 f0       	breq	.+38     	; 0x11492 <gpib_read_byte+0x144>
   1146c:	05 c0       	rjmp	.+10     	; 0x11478 <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   1146e:	c1 14       	cp	r12, r1
   11470:	d1 04       	cpc	r13, r1
   11472:	a9 f0       	breq	.+42     	; 0x1149e <gpib_read_byte+0x150>
   11474:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   11476:	f9 2e       	mov	r15, r25
   11478:	4d dc       	rcall	.-1894   	; 0x10d14 <gpib_control_pin_read>
   1147a:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   1147c:	5b dc       	rcall	.-1866   	; 0x10d34 <gpib_handshake_pin_read>
   1147e:	a8 2a       	or	r10, r24
   11480:	b9 2a       	or	r11, r25
   11482:	a0 16       	cp	r10, r16
   11484:	b1 06       	cpc	r11, r17
   11486:	31 f0       	breq	.+12     	; 0x11494 <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   11488:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   1148a:	70 e0       	ldi	r23, 0x00	; 0
   1148c:	c5 01       	movw	r24, r10
   1148e:	18 de       	rcall	.-976    	; 0x110c0 <gpib_trace_display>
   11490:	01 c0       	rjmp	.+2      	; 0x11494 <gpib_read_byte+0x146>
   11492:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   11494:	88 e0       	ldi	r24, 0x08	; 8
   11496:	f8 16       	cp	r15, r24
   11498:	11 f0       	breq	.+4      	; 0x1149e <gpib_read_byte+0x150>
   1149a:	85 01       	movw	r16, r10
   1149c:	82 cf       	rjmp	.-252    	; 0x113a2 <gpib_read_byte+0x54>
   1149e:	80 91 e4 1d 	lds	r24, 0x1DE4	; 0x801de4 <current>
   114a2:	90 91 e5 1d 	lds	r25, 0x1DE5	; 0x801de5 <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   114a6:	90 93 e1 1b 	sts	0x1BE1, r25	; 0x801be1 <lastcmd+0x1>
   114aa:	80 93 e0 1b 	sts	0x1BE0, r24	; 0x801be0 <lastcmd>
   114ae:	ce 01       	movw	r24, r28
   114b0:	88 27       	eor	r24, r24
        current = 0;
   114b2:	90 7d       	andi	r25, 0xD0	; 208
   114b4:	89 2b       	or	r24, r25
   114b6:	11 f4       	brne	.+4      	; 0x114bc <gpib_read_byte+0x16e>
   114b8:	d2 fd       	sbrc	r29, 2
   114ba:	05 c0       	rjmp	.+10     	; 0x114c6 <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   114bc:	10 92 e5 1d 	sts	0x1DE5, r1	; 0x801de5 <current+0x1>
   114c0:	10 92 e4 1d 	sts	0x1DE4, r1	; 0x801de4 <current>
   114c4:	07 c0       	rjmp	.+14     	; 0x114d4 <gpib_read_byte+0x186>
   114c6:	ce 01       	movw	r24, r28
   114c8:	8f 77       	andi	r24, 0x7F	; 127
   114ca:	99 27       	eor	r25, r25
   114cc:	90 93 e5 1d 	sts	0x1DE5, r25	; 0x801de5 <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   114d0:	80 93 e4 1d 	sts	0x1DE4, r24	; 0x801de4 <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   114d4:	ce 01       	movw	r24, r28
   114d6:	07 c0       	rjmp	.+14     	; 0x114e6 <gpib_read_byte+0x198>
   114d8:	86 e0       	ldi	r24, 0x06	; 6
   114da:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   114dc:	c1 14       	cp	r12, r1
   114de:	d1 04       	cpc	r13, r1
   114e0:	09 f4       	brne	.+2      	; 0x114e4 <gpib_read_byte+0x196>
   114e2:	5f cf       	rjmp	.-322    	; 0x113a2 <gpib_read_byte+0x54>
   114e4:	c9 cf       	rjmp	.-110    	; 0x11478 <gpib_read_byte+0x12a>
   114e6:	df 91       	pop	r29
   114e8:	cf 91       	pop	r28
   114ea:	1f 91       	pop	r17
   114ec:	0f 91       	pop	r16
   114ee:	ff 90       	pop	r15
   114f0:	df 90       	pop	r13
   114f2:	cf 90       	pop	r12
   114f4:	bf 90       	pop	r11
   114f6:	af 90       	pop	r10
   114f8:	08 95       	ret

000114fa <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   114fa:	60 e0       	ldi	r22, 0x00	; 0
   114fc:	70 e0       	ldi	r23, 0x00	; 0
   114fe:	e0 cd       	rjmp	.-1088   	; 0x110c0 <gpib_trace_display>
   11500:	08 95       	ret

00011502 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11502:	a0 e0       	ldi	r26, 0x00	; 0
   11504:	b0 e0       	ldi	r27, 0x00	; 0
   11506:	e7 e8       	ldi	r30, 0x87	; 135
   11508:	fa e8       	ldi	r31, 0x8A	; 138
   1150a:	0c 94 36 e5 	jmp	0x1ca6c	; 0x1ca6c <__prologue_saves__+0x10>
   1150e:	5b 01       	movw	r10, r22
   11510:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11512:	fa 01       	movw	r30, r20
   11514:	20 81       	ld	r18, Z
   11516:	31 81       	ldd	r19, Z+1	; 0x01
   11518:	22 27       	eor	r18, r18
   1151a:	31 83       	std	Z+1, r19	; 0x01
   1151c:	20 83       	st	Z, r18

    if(!size)
   1151e:	67 2b       	or	r22, r23
   11520:	21 f0       	breq	.+8      	; 0x1152a <gpib_read_str+0x28>
   11522:	7c 01       	movw	r14, r24
   11524:	c0 e0       	ldi	r28, 0x00	; 0
   11526:	d0 e0       	ldi	r29, 0x00	; 0
   11528:	28 c0       	rjmp	.+80     	; 0x1157a <gpib_read_str+0x78>
    {
        if(debuglevel & (1+4))
   1152a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1152e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11532:	85 70       	andi	r24, 0x05	; 5
   11534:	99 27       	eor	r25, r25
   11536:	89 2b       	or	r24, r25
   11538:	09 f4       	brne	.+2      	; 0x1153c <gpib_read_str+0x3a>
   1153a:	89 c0       	rjmp	.+274    	; 0x1164e <gpib_read_str+0x14c>
            printf("gpib_read_str: size = 0\n");
   1153c:	81 ec       	ldi	r24, 0xC1	; 193
   1153e:	9f e0       	ldi	r25, 0x0F	; 15
   11540:	1f 92       	push	r1
   11542:	9f 93       	push	r25
   11544:	8f 93       	push	r24
   11546:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1154a:	0f 90       	pop	r0
   1154c:	0f 90       	pop	r0
   1154e:	0f 90       	pop	r0
   11550:	7e c0       	rjmp	.+252    	; 0x1164e <gpib_read_str+0x14c>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11552:	80 27       	eor	r24, r16
   11554:	91 27       	eor	r25, r17
   11556:	92 fd       	sbrc	r25, 2
   11558:	2e c0       	rjmp	.+92     	; 0x115b6 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1155a:	c8 01       	movw	r24, r16
   1155c:	88 27       	eor	r24, r24
   1155e:	94 70       	andi	r25, 0x04	; 4
   11560:	12 ff       	sbrs	r17, 2
   11562:	49 c0       	rjmp	.+146    	; 0x115f6 <gpib_read_str+0xf4>
            buf[ind] = (val & CMD_MASK);
   11564:	20 2f       	mov	r18, r16
   11566:	2f 77       	andi	r18, 0x7F	; 127
   11568:	f7 01       	movw	r30, r14
   1156a:	20 83       	st	Z, r18
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;
   1156c:	21 96       	adiw	r28, 0x01	; 1

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1156e:	89 2b       	or	r24, r25
   11570:	09 f4       	brne	.+2      	; 0x11574 <gpib_read_str+0x72>
   11572:	44 c0       	rjmp	.+136    	; 0x115fc <gpib_read_str+0xfa>
   11574:	ff ef       	ldi	r31, 0xFF	; 255
   11576:	ef 1a       	sub	r14, r31
   11578:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (1+4))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   1157a:	ca 15       	cp	r28, r10
   1157c:	db 05       	cpc	r29, r11
   1157e:	0c f0       	brlt	.+2      	; 0x11582 <gpib_read_str+0x80>
   11580:	47 c0       	rjmp	.+142    	; 0x11610 <gpib_read_str+0x10e>
    {
        val = gpib_read_byte(NO_TRACE);
   11582:	80 e0       	ldi	r24, 0x00	; 0
   11584:	90 e0       	ldi	r25, 0x00	; 0
   11586:	e3 de       	rcall	.-570    	; 0x1134e <gpib_read_byte>
   11588:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & 256)
   1158a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1158e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11592:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   11594:	02 c0       	rjmp	.+4      	; 0x1159a <gpib_read_str+0x98>
   11596:	c8 01       	movw	r24, r16
#endif
        if(val & ERROR_MASK)
   11598:	b0 df       	rcall	.-160    	; 0x114fa <gpib_decode>
   1159a:	98 01       	movw	r18, r16
   1159c:	22 27       	eor	r18, r18
   1159e:	30 7d       	andi	r19, 0xD0	; 208
   115a0:	f6 01       	movw	r30, r12
   115a2:	80 81       	ld	r24, Z
   115a4:	91 81       	ldd	r25, Z+1	; 0x01
   115a6:	21 15       	cp	r18, r1
   115a8:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   115aa:	99 f2       	breq	.-90     	; 0x11552 <gpib_read_str+0x50>
   115ac:	82 2b       	or	r24, r18
   115ae:	93 2b       	or	r25, r19
   115b0:	91 83       	std	Z+1, r25	; 0x01
            break;
   115b2:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (1+4))
   115b4:	30 c0       	rjmp	.+96     	; 0x11616 <gpib_read_str+0x114>
   115b6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   115ba:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   115be:	85 70       	andi	r24, 0x05	; 5
   115c0:	99 27       	eor	r25, r25
   115c2:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   115c4:	a9 f0       	breq	.+42     	; 0x115f0 <gpib_read_str+0xee>
   115c6:	c8 01       	movw	r24, r16
   115c8:	99 27       	eor	r25, r25
   115ca:	9f 93       	push	r25
   115cc:	8f 93       	push	r24
   115ce:	df 93       	push	r29
   115d0:	cf 93       	push	r28
   115d2:	84 e9       	ldi	r24, 0x94	; 148
   115d4:	9f e0       	ldi	r25, 0x0F	; 15
   115d6:	1f 92       	push	r1
   115d8:	9f 93       	push	r25
   115da:	8f 93       	push	r24
   115dc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   115e0:	ed b7       	in	r30, 0x3d	; 61
   115e2:	fe b7       	in	r31, 0x3e	; 62
   115e4:	37 96       	adiw	r30, 0x07	; 7
   115e6:	0f b6       	in	r0, 0x3f	; 63
   115e8:	f8 94       	cli
   115ea:	fe bf       	out	0x3e, r31	; 62
            gpib_unread(val);
   115ec:	0f be       	out	0x3f, r0	; 63
   115ee:	ed bf       	out	0x3d, r30	; 61
   115f0:	c8 01       	movw	r24, r16
            break;
   115f2:	65 db       	rcall	.-2358   	; 0x10cbe <gpib_unread>
        }

        if(val & ATN_FLAG)
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
   115f4:	10 c0       	rjmp	.+32     	; 0x11616 <gpib_read_str+0x114>
   115f6:	f7 01       	movw	r30, r14
   115f8:	00 83       	st	Z, r16
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   115fa:	b8 cf       	rjmp	.-144    	; 0x1156c <gpib_read_str+0x6a>
   115fc:	10 ff       	sbrs	r17, 0
        {

            if(*status & EOI_FLAG)
   115fe:	ba cf       	rjmp	.-140    	; 0x11574 <gpib_read_str+0x72>
   11600:	f6 01       	movw	r30, r12
   11602:	80 81       	ld	r24, Z
   11604:	91 81       	ldd	r25, Z+1	; 0x01
   11606:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   11608:	24 c0       	rjmp	.+72     	; 0x11652 <gpib_read_str+0x150>
   1160a:	91 60       	ori	r25, 0x01	; 1
   1160c:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   1160e:	80 83       	st	Z, r24
   11610:	ca 15       	cp	r28, r10
   11612:	db 05       	cpc	r29, r11
    {
        if(debuglevel & (1+4))
   11614:	f1 f0       	breq	.+60     	; 0x11652 <gpib_read_str+0x150>
   11616:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1161a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1161e:	85 70       	andi	r24, 0x05	; 5
   11620:	99 27       	eor	r25, r25
   11622:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   11624:	b1 f0       	breq	.+44     	; 0x11652 <gpib_read_str+0x150>
   11626:	bf 92       	push	r11
   11628:	af 92       	push	r10
   1162a:	df 93       	push	r29
   1162c:	cf 93       	push	r28
   1162e:	8d e6       	ldi	r24, 0x6D	; 109
   11630:	9f e0       	ldi	r25, 0x0F	; 15
   11632:	1f 92       	push	r1
   11634:	9f 93       	push	r25
   11636:	8f 93       	push	r24
   11638:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1163c:	ed b7       	in	r30, 0x3d	; 61
   1163e:	fe b7       	in	r31, 0x3e	; 62
   11640:	37 96       	adiw	r30, 0x07	; 7
   11642:	0f b6       	in	r0, 0x3f	; 63
   11644:	f8 94       	cli
   11646:	fe bf       	out	0x3e, r31	; 62
   11648:	0f be       	out	0x3f, r0	; 63
   1164a:	ed bf       	out	0x3d, r30	; 61
   1164c:	02 c0       	rjmp	.+4      	; 0x11652 <gpib_read_str+0x150>
   1164e:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return(ind);
}
   11650:	d0 e0       	ldi	r29, 0x00	; 0
   11652:	ce 01       	movw	r24, r28
   11654:	cd b7       	in	r28, 0x3d	; 61
   11656:	de b7       	in	r29, 0x3e	; 62
   11658:	ea e0       	ldi	r30, 0x0A	; 10
   1165a:	0c 94 52 e5 	jmp	0x1caa4	; 0x1caa4 <__epilogue_restores__+0x10>

0001165e <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   1165e:	a0 e0       	ldi	r26, 0x00	; 0
   11660:	b0 e0       	ldi	r27, 0x00	; 0
   11662:	e5 e3       	ldi	r30, 0x35	; 53
   11664:	fb e8       	ldi	r31, 0x8B	; 139
   11666:	0c 94 36 e5 	jmp	0x1ca6c	; 0x1ca6c <__prologue_saves__+0x10>
   1166a:	8b 01       	movw	r16, r22
   1166c:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   1166e:	fa 01       	movw	r30, r20
   11670:	20 81       	ld	r18, Z
   11672:	31 81       	ldd	r19, Z+1	; 0x01
   11674:	22 27       	eor	r18, r18
   11676:	31 83       	std	Z+1, r19	; 0x01
   11678:	20 83       	st	Z, r18

    if(!size)
   1167a:	67 2b       	or	r22, r23
   1167c:	21 f0       	breq	.+8      	; 0x11686 <gpib_write_str+0x28>
   1167e:	6c 01       	movw	r12, r24
   11680:	c0 e0       	ldi	r28, 0x00	; 0
   11682:	d0 e0       	ldi	r29, 0x00	; 0
   11684:	35 c0       	rjmp	.+106    	; 0x116f0 <gpib_write_str+0x92>
    {
        if(debuglevel & (1+4))
   11686:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1168a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1168e:	85 70       	andi	r24, 0x05	; 5
   11690:	99 27       	eor	r25, r25
   11692:	89 2b       	or	r24, r25
   11694:	09 f4       	brne	.+2      	; 0x11698 <gpib_write_str+0x3a>
   11696:	54 c0       	rjmp	.+168    	; 0x11740 <gpib_write_str+0xe2>
            printf("gpib_write_str: size = 0\n");
   11698:	83 e5       	ldi	r24, 0x53	; 83
   1169a:	9f e0       	ldi	r25, 0x0F	; 15
   1169c:	1f 92       	push	r1
   1169e:	9f 93       	push	r25
   116a0:	8f 93       	push	r24
   116a2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   116a6:	0f 90       	pop	r0
   116a8:	0f 90       	pop	r0
   116aa:	0f 90       	pop	r0
   116ac:	49 c0       	rjmp	.+146    	; 0x11740 <gpib_write_str+0xe2>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   116ae:	21 96       	adiw	r28, 0x01	; 1
   116b0:	f6 01       	movw	r30, r12
   116b2:	81 91       	ld	r24, Z+
   116b4:	6f 01       	movw	r12, r30
   116b6:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   116b8:	f7 01       	movw	r30, r14
   116ba:	20 81       	ld	r18, Z
   116bc:	31 81       	ldd	r19, Z+1	; 0x01
   116be:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   116c0:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   116c2:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   116c4:	19 c0       	rjmp	.+50     	; 0x116f8 <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   116c6:	42 db       	rcall	.-2428   	; 0x10d4c <gpib_write_byte>
   116c8:	5c 01       	movw	r10, r24
   116ca:	aa 24       	eor	r10, r10
   116cc:	f0 ed       	ldi	r31, 0xD0	; 208
   116ce:	bf 22       	and	r11, r31
   116d0:	f7 01       	movw	r30, r14
   116d2:	20 81       	ld	r18, Z
   116d4:	31 81       	ldd	r19, Z+1	; 0x01
   116d6:	2a 29       	or	r18, r10
   116d8:	3b 29       	or	r19, r11
   116da:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & 256)
   116dc:	20 83       	st	Z, r18
   116de:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   116e2:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
            gpib_decode(val);
   116e6:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   116e8:	08 df       	rcall	.-496    	; 0x114fa <gpib_decode>
   116ea:	a1 14       	cp	r10, r1
   116ec:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (1+4))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   116ee:	49 f4       	brne	.+18     	; 0x11702 <gpib_write_str+0xa4>
   116f0:	c0 17       	cp	r28, r16
   116f2:	d1 07       	cpc	r29, r17
   116f4:	e4 f2       	brlt	.-72     	; 0x116ae <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   116f6:	05 c0       	rjmp	.+10     	; 0x11702 <gpib_write_str+0xa4>
   116f8:	0c 17       	cp	r16, r28
   116fa:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   116fc:	21 f7       	brne	.-56     	; 0x116c6 <gpib_write_str+0x68>
   116fe:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   11700:	e2 cf       	rjmp	.-60     	; 0x116c6 <gpib_write_str+0x68>
   11702:	c0 17       	cp	r28, r16
   11704:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (1+4))
   11706:	f1 f0       	breq	.+60     	; 0x11744 <gpib_write_str+0xe6>
   11708:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1170c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11710:	85 70       	andi	r24, 0x05	; 5
   11712:	99 27       	eor	r25, r25
   11714:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11716:	b1 f0       	breq	.+44     	; 0x11744 <gpib_write_str+0xe6>
   11718:	1f 93       	push	r17
   1171a:	0f 93       	push	r16
   1171c:	df 93       	push	r29
   1171e:	cf 93       	push	r28
   11720:	8b e2       	ldi	r24, 0x2B	; 43
   11722:	9f e0       	ldi	r25, 0x0F	; 15
   11724:	1f 92       	push	r1
   11726:	9f 93       	push	r25
   11728:	8f 93       	push	r24
   1172a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1172e:	8d b7       	in	r24, 0x3d	; 61
   11730:	9e b7       	in	r25, 0x3e	; 62
   11732:	07 96       	adiw	r24, 0x07	; 7
   11734:	0f b6       	in	r0, 0x3f	; 63
   11736:	f8 94       	cli
   11738:	9e bf       	out	0x3e, r25	; 62
   1173a:	0f be       	out	0x3f, r0	; 63
   1173c:	8d bf       	out	0x3d, r24	; 61
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   1173e:	02 c0       	rjmp	.+4      	; 0x11744 <gpib_write_str+0xe6>
   11740:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (1+4))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   11742:	d0 e0       	ldi	r29, 0x00	; 0
   11744:	ce 01       	movw	r24, r28
   11746:	cd b7       	in	r28, 0x3d	; 61
   11748:	de b7       	in	r29, 0x3e	; 62
   1174a:	ea e0       	ldi	r30, 0x0A	; 10
   1174c:	0c 94 52 e5 	jmp	0x1caa4	; 0x1caa4 <__epilogue_restores__+0x10>

00011750 <gpib_file_init>:
   11750:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <debuglevel+0x1>
   11754:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <debuglevel>
   11758:	8f eb       	ldi	r24, 0xBF	; 191
   1175a:	91 e0       	ldi	r25, 0x01	; 1
   1175c:	0e 94 2d 97 	call	0x12e5a	; 0x12e5a <Read_Config>
   11760:	18 16       	cp	r1, r24
   11762:	19 06       	cpc	r1, r25
   11764:	b4 f4       	brge	.+44     	; 0x11792 <gpib_file_init+0x42>
   11766:	9f 93       	push	r25
   11768:	8f 93       	push	r24
   1176a:	8f eb       	ldi	r24, 0xBF	; 191
   1176c:	91 e0       	ldi	r25, 0x01	; 1
   1176e:	9f 93       	push	r25
   11770:	8f 93       	push	r24
   11772:	8a e7       	ldi	r24, 0x7A	; 122
   11774:	94 e1       	ldi	r25, 0x14	; 20
   11776:	1f 92       	push	r1
   11778:	9f 93       	push	r25
   1177a:	8f 93       	push	r24
   1177c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11780:	8d b7       	in	r24, 0x3d	; 61
   11782:	9e b7       	in	r25, 0x3e	; 62
   11784:	07 96       	adiw	r24, 0x07	; 7
   11786:	0f b6       	in	r0, 0x3f	; 63
   11788:	f8 94       	cli
   1178a:	9e bf       	out	0x3e, r25	; 62
   1178c:	0f be       	out	0x3f, r0	; 63
   1178e:	8d bf       	out	0x3d, r24	; 61
   11790:	12 c0       	rjmp	.+36     	; 0x117b6 <gpib_file_init+0x66>
   11792:	89 2b       	or	r24, r25
   11794:	81 f0       	breq	.+32     	; 0x117b6 <gpib_file_init+0x66>
   11796:	8f eb       	ldi	r24, 0xBF	; 191
   11798:	91 e0       	ldi	r25, 0x01	; 1
   1179a:	9f 93       	push	r25
   1179c:	8f 93       	push	r24
   1179e:	89 e6       	ldi	r24, 0x69	; 105
   117a0:	94 e1       	ldi	r25, 0x14	; 20
   117a2:	1f 92       	push	r1
   117a4:	9f 93       	push	r25
   117a6:	8f 93       	push	r24
   117a8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   117ac:	0f 90       	pop	r0
   117ae:	0f 90       	pop	r0
   117b0:	0f 90       	pop	r0
   117b2:	0f 90       	pop	r0
   117b4:	0f 90       	pop	r0
   117b6:	0e 94 e7 95 	call	0x12bce	; 0x12bce <set_Config_Defaults>
   117ba:	0e 94 91 70 	call	0xe122	; 0xe122 <mmc_wp_status>
   117be:	89 2b       	or	r24, r25
   117c0:	51 f0       	breq	.+20     	; 0x117d6 <gpib_file_init+0x86>
   117c2:	80 e5       	ldi	r24, 0x50	; 80
   117c4:	94 e1       	ldi	r25, 0x14	; 20
   117c6:	1f 92       	push	r1
   117c8:	9f 93       	push	r25
   117ca:	8f 93       	push	r24
   117cc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   117d0:	0f 90       	pop	r0
   117d2:	0f 90       	pop	r0
   117d4:	0f 90       	pop	r0
   117d6:	08 95       	ret

000117d8 <SS80_is_MLA>:
   117d8:	40 e2       	ldi	r20, 0x20	; 32
   117da:	50 e0       	ldi	r21, 0x00	; 0
   117dc:	bc 01       	movw	r22, r24
   117de:	83 e0       	ldi	r24, 0x03	; 3
   117e0:	90 e0       	ldi	r25, 0x00	; 0
   117e2:	8a d6       	rcall	.+3348   	; 0x124f8 <find_device>
   117e4:	8f 3f       	cpi	r24, 0xFF	; 255
   117e6:	2f ef       	ldi	r18, 0xFF	; 255
   117e8:	92 07       	cpc	r25, r18
   117ea:	11 f0       	breq	.+4      	; 0x117f0 <SS80_is_MLA+0x18>
   117ec:	af c6       	rjmp	.+3422   	; 0x1254c <set_active_device>
   117ee:	08 95       	ret
   117f0:	80 e0       	ldi	r24, 0x00	; 0
   117f2:	90 e0       	ldi	r25, 0x00	; 0
   117f4:	08 95       	ret

000117f6 <SS80_is_MTA>:
   117f6:	40 e4       	ldi	r20, 0x40	; 64
   117f8:	50 e0       	ldi	r21, 0x00	; 0
   117fa:	bc 01       	movw	r22, r24
   117fc:	83 e0       	ldi	r24, 0x03	; 3
   117fe:	90 e0       	ldi	r25, 0x00	; 0
   11800:	7b d6       	rcall	.+3318   	; 0x124f8 <find_device>
   11802:	8f 3f       	cpi	r24, 0xFF	; 255
   11804:	2f ef       	ldi	r18, 0xFF	; 255
   11806:	92 07       	cpc	r25, r18
   11808:	11 f0       	breq	.+4      	; 0x1180e <SS80_is_MTA+0x18>
   1180a:	a0 c6       	rjmp	.+3392   	; 0x1254c <set_active_device>
   1180c:	08 95       	ret
   1180e:	80 e0       	ldi	r24, 0x00	; 0
   11810:	90 e0       	ldi	r25, 0x00	; 0
   11812:	08 95       	ret

00011814 <SS80_is_MSA>:
   11814:	40 e6       	ldi	r20, 0x60	; 96
   11816:	50 e0       	ldi	r21, 0x00	; 0
   11818:	bc 01       	movw	r22, r24
   1181a:	83 e0       	ldi	r24, 0x03	; 3
   1181c:	90 e0       	ldi	r25, 0x00	; 0
   1181e:	6c d6       	rcall	.+3288   	; 0x124f8 <find_device>
   11820:	8f 3f       	cpi	r24, 0xFF	; 255
   11822:	2f ef       	ldi	r18, 0xFF	; 255
   11824:	92 07       	cpc	r25, r18
   11826:	11 f0       	breq	.+4      	; 0x1182c <SS80_is_MSA+0x18>
   11828:	91 c6       	rjmp	.+3362   	; 0x1254c <set_active_device>
   1182a:	08 95       	ret
   1182c:	80 e0       	ldi	r24, 0x00	; 0
   1182e:	90 e0       	ldi	r25, 0x00	; 0
   11830:	08 95       	ret

00011832 <AMIGO_is_MLA>:
   11832:	40 e2       	ldi	r20, 0x20	; 32
   11834:	50 e0       	ldi	r21, 0x00	; 0
   11836:	bc 01       	movw	r22, r24
   11838:	81 e0       	ldi	r24, 0x01	; 1
   1183a:	90 e0       	ldi	r25, 0x00	; 0
   1183c:	5d d6       	rcall	.+3258   	; 0x124f8 <find_device>
   1183e:	8f 3f       	cpi	r24, 0xFF	; 255
   11840:	2f ef       	ldi	r18, 0xFF	; 255
   11842:	92 07       	cpc	r25, r18
   11844:	11 f0       	breq	.+4      	; 0x1184a <AMIGO_is_MLA+0x18>
   11846:	82 c6       	rjmp	.+3332   	; 0x1254c <set_active_device>
   11848:	08 95       	ret
   1184a:	80 e0       	ldi	r24, 0x00	; 0
   1184c:	90 e0       	ldi	r25, 0x00	; 0
   1184e:	08 95       	ret

00011850 <AMIGO_is_MTA>:
   11850:	40 e4       	ldi	r20, 0x40	; 64
   11852:	50 e0       	ldi	r21, 0x00	; 0
   11854:	bc 01       	movw	r22, r24
   11856:	81 e0       	ldi	r24, 0x01	; 1
   11858:	90 e0       	ldi	r25, 0x00	; 0
   1185a:	4e d6       	rcall	.+3228   	; 0x124f8 <find_device>
   1185c:	8f 3f       	cpi	r24, 0xFF	; 255
   1185e:	2f ef       	ldi	r18, 0xFF	; 255
   11860:	92 07       	cpc	r25, r18
   11862:	11 f0       	breq	.+4      	; 0x11868 <AMIGO_is_MTA+0x18>
   11864:	73 c6       	rjmp	.+3302   	; 0x1254c <set_active_device>
   11866:	08 95       	ret
   11868:	80 e0       	ldi	r24, 0x00	; 0
   1186a:	90 e0       	ldi	r25, 0x00	; 0
   1186c:	08 95       	ret

0001186e <AMIGO_is_MSA>:
   1186e:	40 e6       	ldi	r20, 0x60	; 96
   11870:	50 e0       	ldi	r21, 0x00	; 0
   11872:	bc 01       	movw	r22, r24
   11874:	81 e0       	ldi	r24, 0x01	; 1
   11876:	90 e0       	ldi	r25, 0x00	; 0
   11878:	3f d6       	rcall	.+3198   	; 0x124f8 <find_device>
   1187a:	8f 3f       	cpi	r24, 0xFF	; 255
   1187c:	2f ef       	ldi	r18, 0xFF	; 255
   1187e:	92 07       	cpc	r25, r18
   11880:	11 f0       	breq	.+4      	; 0x11886 <AMIGO_is_MSA+0x18>
   11882:	64 c6       	rjmp	.+3272   	; 0x1254c <set_active_device>
   11884:	08 95       	ret
   11886:	80 e0       	ldi	r24, 0x00	; 0
   11888:	90 e0       	ldi	r25, 0x00	; 0
   1188a:	08 95       	ret

0001188c <PRINTER_is_MLA>:
   1188c:	40 e2       	ldi	r20, 0x20	; 32
   1188e:	50 e0       	ldi	r21, 0x00	; 0
   11890:	bc 01       	movw	r22, r24
   11892:	84 e0       	ldi	r24, 0x04	; 4
   11894:	90 e0       	ldi	r25, 0x00	; 0
   11896:	30 d6       	rcall	.+3168   	; 0x124f8 <find_device>
   11898:	8f 3f       	cpi	r24, 0xFF	; 255
   1189a:	2f ef       	ldi	r18, 0xFF	; 255
   1189c:	92 07       	cpc	r25, r18
   1189e:	11 f0       	breq	.+4      	; 0x118a4 <PRINTER_is_MLA+0x18>
   118a0:	55 c6       	rjmp	.+3242   	; 0x1254c <set_active_device>
   118a2:	08 95       	ret
   118a4:	80 e0       	ldi	r24, 0x00	; 0
   118a6:	90 e0       	ldi	r25, 0x00	; 0
   118a8:	08 95       	ret

000118aa <PRINTER_is_MTA>:
   118aa:	40 e4       	ldi	r20, 0x40	; 64
   118ac:	50 e0       	ldi	r21, 0x00	; 0
   118ae:	bc 01       	movw	r22, r24
   118b0:	84 e0       	ldi	r24, 0x04	; 4
   118b2:	90 e0       	ldi	r25, 0x00	; 0
   118b4:	21 d6       	rcall	.+3138   	; 0x124f8 <find_device>
   118b6:	8f 3f       	cpi	r24, 0xFF	; 255
   118b8:	2f ef       	ldi	r18, 0xFF	; 255
   118ba:	92 07       	cpc	r25, r18
   118bc:	11 f0       	breq	.+4      	; 0x118c2 <PRINTER_is_MTA+0x18>
   118be:	46 c6       	rjmp	.+3212   	; 0x1254c <set_active_device>
   118c0:	08 95       	ret
   118c2:	80 e0       	ldi	r24, 0x00	; 0
   118c4:	90 e0       	ldi	r25, 0x00	; 0
   118c6:	08 95       	ret

000118c8 <gpib_init_devices>:
   118c8:	2a d9       	rcall	.-3500   	; 0x10b1e <gpib_bus_init>
   118ca:	0e 94 a2 af 	call	0x15f44	; 0x15f44 <SS80_init>
   118ce:	0e 94 27 b5 	call	0x16a4e	; 0x16a4e <amigo_init>
   118d2:	0c 94 0e c0 	jmp	0x1801c	; 0x1801c <printer_close>
   118d6:	08 95       	ret

000118d8 <gpib_trace_task>:
   118d8:	0f 93       	push	r16
   118da:	1f 93       	push	r17
   118dc:	cf 93       	push	r28
   118de:	df 93       	push	r29
   118e0:	eb 01       	movw	r28, r22
   118e2:	00 97       	sbiw	r24, 0x00	; 0
   118e4:	09 f4       	brne	.+2      	; 0x118e8 <gpib_trace_task+0x10>
   118e6:	42 c0       	rjmp	.+132    	; 0x1196c <gpib_trace_task+0x94>
   118e8:	fc 01       	movw	r30, r24
   118ea:	20 81       	ld	r18, Z
   118ec:	22 23       	and	r18, r18
   118ee:	f1 f1       	breq	.+124    	; 0x1196c <gpib_trace_task+0x94>
   118f0:	0e 94 0b 32 	call	0x6416	; 0x6416 <skipspaces>
   118f4:	8c 01       	movw	r16, r24
   118f6:	1f 93       	push	r17
   118f8:	8f 93       	push	r24
   118fa:	86 e3       	ldi	r24, 0x36	; 54
   118fc:	94 e1       	ldi	r25, 0x14	; 20
   118fe:	1f 92       	push	r1
   11900:	9f 93       	push	r25
   11902:	8f 93       	push	r24
   11904:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11908:	0f 90       	pop	r0
   1190a:	0f 90       	pop	r0
   1190c:	0f 90       	pop	r0
   1190e:	0f 90       	pop	r0
   11910:	0f 90       	pop	r0
   11912:	20 97       	sbiw	r28, 0x00	; 0
   11914:	51 f0       	breq	.+20     	; 0x1192a <gpib_trace_task+0x52>
   11916:	8b e0       	ldi	r24, 0x0B	; 11
   11918:	94 e1       	ldi	r25, 0x14	; 20
   1191a:	1f 92       	push	r1
   1191c:	9f 93       	push	r25
   1191e:	8f 93       	push	r24
   11920:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11924:	0f 90       	pop	r0
   11926:	0f 90       	pop	r0
   11928:	0f 90       	pop	r0
   1192a:	84 ef       	ldi	r24, 0xF4	; 244
   1192c:	93 e1       	ldi	r25, 0x13	; 19
   1192e:	1f 92       	push	r1
   11930:	9f 93       	push	r25
   11932:	8f 93       	push	r24
   11934:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11938:	64 e9       	ldi	r22, 0x94	; 148
   1193a:	78 e0       	ldi	r23, 0x08	; 8
   1193c:	c8 01       	movw	r24, r16
   1193e:	0e 94 8e 7e 	call	0xfd1c	; 0xfd1c <fopen>
   11942:	90 93 5e 18 	sts	0x185E, r25	; 0x80185e <gpib_log_fp+0x1>
   11946:	80 93 5d 18 	sts	0x185D, r24	; 0x80185d <gpib_log_fp>
   1194a:	0f 90       	pop	r0
   1194c:	0f 90       	pop	r0
   1194e:	0f 90       	pop	r0
   11950:	89 2b       	or	r24, r25
   11952:	a1 f4       	brne	.+40     	; 0x1197c <gpib_trace_task+0xa4>
   11954:	8b e1       	ldi	r24, 0x1B	; 27
   11956:	9d e0       	ldi	r25, 0x0D	; 13
   11958:	0e 94 d8 78 	call	0xf1b0	; 0xf1b0 <perror>
   1195c:	88 ee       	ldi	r24, 0xE8	; 232
   1195e:	93 e1       	ldi	r25, 0x13	; 19
   11960:	1f 92       	push	r1
   11962:	9f 93       	push	r25
   11964:	8f 93       	push	r24
   11966:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1196a:	3b c0       	rjmp	.+118    	; 0x119e2 <gpib_trace_task+0x10a>
   1196c:	80 91 b9 1b 	lds	r24, 0x1BB9	; 0x801bb9 <__iob+0x2>
   11970:	90 91 ba 1b 	lds	r25, 0x1BBA	; 0x801bba <__iob+0x3>
   11974:	90 93 5e 18 	sts	0x185E, r25	; 0x80185e <gpib_log_fp+0x1>
   11978:	80 93 5d 18 	sts	0x185D, r24	; 0x80185d <gpib_log_fp>
   1197c:	f8 d8       	rcall	.-3600   	; 0x10b6e <gpib_state_init>
   1197e:	a4 df       	rcall	.-184    	; 0x118c8 <gpib_init_devices>
   11980:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <gpib_log_fp>
   11984:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <gpib_log_fp+0x1>
   11988:	49 db       	rcall	.-2414   	; 0x1101c <gpib_decode_header>
   1198a:	80 e0       	ldi	r24, 0x00	; 0
   1198c:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   11990:	89 2b       	or	r24, r25
   11992:	31 f4       	brne	.+12     	; 0x119a0 <gpib_trace_task+0xc8>
   11994:	ce 01       	movw	r24, r28
   11996:	db dc       	rcall	.-1610   	; 0x1134e <gpib_read_byte>
   11998:	20 97       	sbiw	r28, 0x00	; 0
   1199a:	b9 f7       	brne	.-18     	; 0x1198a <gpib_trace_task+0xb2>
   1199c:	ae dd       	rcall	.-1188   	; 0x114fa <gpib_decode>
   1199e:	f5 cf       	rjmp	.-22     	; 0x1198a <gpib_trace_task+0xb2>
   119a0:	82 ee       	ldi	r24, 0xE2	; 226
   119a2:	93 e1       	ldi	r25, 0x13	; 19
   119a4:	1f 92       	push	r1
   119a6:	9f 93       	push	r25
   119a8:	8f 93       	push	r24
   119aa:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   119ae:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <gpib_log_fp>
   119b2:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <gpib_log_fp+0x1>
   119b6:	0f 90       	pop	r0
   119b8:	0f 90       	pop	r0
   119ba:	0f 90       	pop	r0
   119bc:	00 97       	sbiw	r24, 0x00	; 0
   119be:	a1 f0       	breq	.+40     	; 0x119e8 <gpib_trace_task+0x110>
   119c0:	0e 94 38 7d 	call	0xfa70	; 0xfa70 <fclose>
   119c4:	80 ed       	ldi	r24, 0xD0	; 208
   119c6:	93 e1       	ldi	r25, 0x13	; 19
   119c8:	1f 92       	push	r1
   119ca:	9f 93       	push	r25
   119cc:	8f 93       	push	r24
   119ce:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   119d2:	80 91 b9 1b 	lds	r24, 0x1BB9	; 0x801bb9 <__iob+0x2>
   119d6:	90 91 ba 1b 	lds	r25, 0x1BBA	; 0x801bba <__iob+0x3>
   119da:	90 93 5e 18 	sts	0x185E, r25	; 0x80185e <gpib_log_fp+0x1>
   119de:	80 93 5d 18 	sts	0x185D, r24	; 0x80185d <gpib_log_fp>
   119e2:	0f 90       	pop	r0
   119e4:	0f 90       	pop	r0
   119e6:	0f 90       	pop	r0
   119e8:	df 91       	pop	r29
   119ea:	cf 91       	pop	r28
   119ec:	1f 91       	pop	r17
   119ee:	0f 91       	pop	r16
   119f0:	08 95       	ret

000119f2 <gpib_error_test>:
   119f2:	ef 92       	push	r14
   119f4:	ff 92       	push	r15
   119f6:	0f 93       	push	r16
   119f8:	1f 93       	push	r17
   119fa:	cf 93       	push	r28
   119fc:	df 93       	push	r29
   119fe:	7c 01       	movw	r14, r24
   11a00:	ec 01       	movw	r28, r24
   11a02:	cc 27       	eor	r28, r28
   11a04:	d0 7d       	andi	r29, 0xD0	; 208
   11a06:	20 97       	sbiw	r28, 0x00	; 0
   11a08:	61 f0       	breq	.+24     	; 0x11a22 <gpib_error_test+0x30>
   11a0a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11a0e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11a12:	8e 72       	andi	r24, 0x2E	; 46
   11a14:	99 27       	eor	r25, r25
   11a16:	87 01       	movw	r16, r14
   11a18:	00 27       	eor	r16, r16
   11a1a:	10 71       	andi	r17, 0x10	; 16
   11a1c:	89 2b       	or	r24, r25
   11a1e:	59 f4       	brne	.+22     	; 0x11a36 <gpib_error_test+0x44>
   11a20:	17 c0       	rjmp	.+46     	; 0x11a50 <gpib_error_test+0x5e>
   11a22:	80 e0       	ldi	r24, 0x00	; 0
   11a24:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   11a28:	89 2b       	or	r24, r25
   11a2a:	79 f7       	brne	.-34     	; 0x11a0a <gpib_error_test+0x18>
   11a2c:	0e 94 8e 70 	call	0xe11c	; 0xe11c <mmc_ins_status>
   11a30:	01 97       	sbiw	r24, 0x01	; 1
   11a32:	59 f7       	brne	.-42     	; 0x11a0a <gpib_error_test+0x18>
   11a34:	62 c0       	rjmp	.+196    	; 0x11afa <gpib_error_test+0x108>
   11a36:	01 15       	cp	r16, r1
   11a38:	11 05       	cpc	r17, r1
   11a3a:	51 f0       	breq	.+20     	; 0x11a50 <gpib_error_test+0x5e>
   11a3c:	89 ec       	ldi	r24, 0xC9	; 201
   11a3e:	93 e1       	ldi	r25, 0x13	; 19
   11a40:	1f 92       	push	r1
   11a42:	9f 93       	push	r25
   11a44:	8f 93       	push	r24
   11a46:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11a4a:	0f 90       	pop	r0
   11a4c:	0f 90       	pop	r0
   11a4e:	0f 90       	pop	r0
   11a50:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11a54:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11a58:	85 70       	andi	r24, 0x05	; 5
   11a5a:	99 27       	eor	r25, r25
   11a5c:	89 2b       	or	r24, r25
   11a5e:	c1 f0       	breq	.+48     	; 0x11a90 <gpib_error_test+0x9e>
   11a60:	f6 fe       	sbrs	r15, 6
   11a62:	0a c0       	rjmp	.+20     	; 0x11a78 <gpib_error_test+0x86>
   11a64:	8e eb       	ldi	r24, 0xBE	; 190
   11a66:	93 e1       	ldi	r25, 0x13	; 19
   11a68:	1f 92       	push	r1
   11a6a:	9f 93       	push	r25
   11a6c:	8f 93       	push	r24
   11a6e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11a72:	0f 90       	pop	r0
   11a74:	0f 90       	pop	r0
   11a76:	0f 90       	pop	r0
   11a78:	d7 ff       	sbrs	r29, 7
   11a7a:	0a c0       	rjmp	.+20     	; 0x11a90 <gpib_error_test+0x9e>
   11a7c:	87 eb       	ldi	r24, 0xB7	; 183
   11a7e:	93 e1       	ldi	r25, 0x13	; 19
   11a80:	1f 92       	push	r1
   11a82:	9f 93       	push	r25
   11a84:	8f 93       	push	r24
   11a86:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11a8a:	0f 90       	pop	r0
   11a8c:	0f 90       	pop	r0
   11a8e:	0f 90       	pop	r0
   11a90:	80 e0       	ldi	r24, 0x00	; 0
   11a92:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   11a96:	89 2b       	or	r24, r25
   11a98:	51 f0       	breq	.+20     	; 0x11aae <gpib_error_test+0xbc>
   11a9a:	8a ea       	ldi	r24, 0xAA	; 170
   11a9c:	93 e1       	ldi	r25, 0x13	; 19
   11a9e:	1f 92       	push	r1
   11aa0:	9f 93       	push	r25
   11aa2:	8f 93       	push	r24
   11aa4:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11aa8:	0f 90       	pop	r0
   11aaa:	0f 90       	pop	r0
   11aac:	0f 90       	pop	r0
   11aae:	0e 94 8e 70 	call	0xe11c	; 0xe11c <mmc_ins_status>
   11ab2:	01 97       	sbiw	r24, 0x01	; 1
   11ab4:	51 f0       	breq	.+20     	; 0x11aca <gpib_error_test+0xd8>
   11ab6:	89 e9       	ldi	r24, 0x99	; 153
   11ab8:	93 e1       	ldi	r25, 0x13	; 19
   11aba:	1f 92       	push	r1
   11abc:	9f 93       	push	r25
   11abe:	8f 93       	push	r24
   11ac0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11ac4:	0f 90       	pop	r0
   11ac6:	0f 90       	pop	r0
   11ac8:	0f 90       	pop	r0
   11aca:	01 15       	cp	r16, r1
   11acc:	11 05       	cpc	r17, r1
   11ace:	09 f0       	breq	.+2      	; 0x11ad2 <gpib_error_test+0xe0>
   11ad0:	fb de       	rcall	.-522    	; 0x118c8 <gpib_init_devices>
   11ad2:	80 e0       	ldi	r24, 0x00	; 0
   11ad4:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   11ad8:	89 2b       	or	r24, r25
   11ada:	11 f0       	breq	.+4      	; 0x11ae0 <gpib_error_test+0xee>
   11adc:	f5 de       	rcall	.-534    	; 0x118c8 <gpib_init_devices>
   11ade:	0b c0       	rjmp	.+22     	; 0x11af6 <gpib_error_test+0x104>
   11ae0:	0e 94 8e 70 	call	0xe11c	; 0xe11c <mmc_ins_status>
   11ae4:	01 97       	sbiw	r24, 0x01	; 1
   11ae6:	39 f4       	brne	.+14     	; 0x11af6 <gpib_error_test+0x104>
   11ae8:	01 15       	cp	r16, r1
   11aea:	11 05       	cpc	r17, r1
   11aec:	31 f0       	breq	.+12     	; 0x11afa <gpib_error_test+0x108>
   11aee:	54 98       	cbi	0x0a, 4	; 10
   11af0:	4c 9b       	sbis	0x09, 4	; 9
   11af2:	fd cf       	rjmp	.-6      	; 0x11aee <gpib_error_test+0xfc>
   11af4:	02 c0       	rjmp	.+4      	; 0x11afa <gpib_error_test+0x108>
   11af6:	c1 e0       	ldi	r28, 0x01	; 1
   11af8:	d0 e0       	ldi	r29, 0x00	; 0
   11afa:	ce 01       	movw	r24, r28
   11afc:	cd b7       	in	r28, 0x3d	; 61
   11afe:	de b7       	in	r29, 0x3e	; 62
   11b00:	e6 e0       	ldi	r30, 0x06	; 6
   11b02:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

00011b06 <GPIB_COMMANDS>:
   11b06:	1f 93       	push	r17
   11b08:	cf 93       	push	r28
   11b0a:	df 93       	push	r29
   11b0c:	ec 01       	movw	r28, r24
   11b0e:	16 2f       	mov	r17, r22
   11b10:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   11b14:	8f 35       	cpi	r24, 0x5F	; 95
   11b16:	91 f0       	breq	.+36     	; 0x11b3c <GPIB_COMMANDS+0x36>
   11b18:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11b1c:	90 e0       	ldi	r25, 0x00	; 0
   11b1e:	89 de       	rcall	.-750    	; 0x11832 <AMIGO_is_MLA>
   11b20:	89 2b       	or	r24, r25
   11b22:	c9 f4       	brne	.+50     	; 0x11b56 <GPIB_COMMANDS+0x50>
   11b24:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11b28:	90 e0       	ldi	r25, 0x00	; 0
   11b2a:	56 de       	rcall	.-852    	; 0x117d8 <SS80_is_MLA>
   11b2c:	89 2b       	or	r24, r25
   11b2e:	11 f5       	brne	.+68     	; 0x11b74 <GPIB_COMMANDS+0x6e>
   11b30:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11b34:	90 e0       	ldi	r25, 0x00	; 0
   11b36:	aa de       	rcall	.-684    	; 0x1188c <PRINTER_is_MLA>
   11b38:	89 2b       	or	r24, r25
   11b3a:	59 f5       	brne	.+86     	; 0x11b92 <GPIB_COMMANDS+0x8c>
   11b3c:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11b40:	8f 33       	cpi	r24, 0x3F	; 63
   11b42:	19 f4       	brne	.+6      	; 0x11b4a <GPIB_COMMANDS+0x44>
   11b44:	80 e0       	ldi	r24, 0x00	; 0
   11b46:	90 e0       	ldi	r25, 0x00	; 0
   11b48:	2e c0       	rjmp	.+92     	; 0x11ba6 <GPIB_COMMANDS+0xa0>
   11b4a:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   11b4e:	90 e0       	ldi	r25, 0x00	; 0
   11b50:	7f de       	rcall	.-770    	; 0x11850 <AMIGO_is_MTA>
   11b52:	89 2b       	or	r24, r25
   11b54:	49 f0       	breq	.+18     	; 0x11b68 <GPIB_COMMANDS+0x62>
   11b56:	11 23       	and	r17, r17
   11b58:	11 f0       	breq	.+4      	; 0x11b5e <GPIB_COMMANDS+0x58>
   11b5a:	ce 01       	movw	r24, r28
   11b5c:	b0 d8       	rcall	.-3744   	; 0x10cbe <gpib_unread>
   11b5e:	80 91 e7 1d 	lds	r24, 0x1DE7	; 0x801de7 <secondary>
   11b62:	0e 94 0f bf 	call	0x17e1e	; 0x17e1e <AMIGO_COMMANDS>
   11b66:	1d c0       	rjmp	.+58     	; 0x11ba2 <GPIB_COMMANDS+0x9c>
   11b68:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   11b6c:	90 e0       	ldi	r25, 0x00	; 0
   11b6e:	43 de       	rcall	.-890    	; 0x117f6 <SS80_is_MTA>
   11b70:	89 2b       	or	r24, r25
   11b72:	49 f0       	breq	.+18     	; 0x11b86 <GPIB_COMMANDS+0x80>
   11b74:	11 23       	and	r17, r17
   11b76:	11 f0       	breq	.+4      	; 0x11b7c <GPIB_COMMANDS+0x76>
   11b78:	ce 01       	movw	r24, r28
   11b7a:	a1 d8       	rcall	.-3774   	; 0x10cbe <gpib_unread>
   11b7c:	80 91 e7 1d 	lds	r24, 0x1DE7	; 0x801de7 <secondary>
   11b80:	0e 94 81 b3 	call	0x16702	; 0x16702 <SS80_COMMANDS>
   11b84:	0e c0       	rjmp	.+28     	; 0x11ba2 <GPIB_COMMANDS+0x9c>
   11b86:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   11b8a:	90 e0       	ldi	r25, 0x00	; 0
   11b8c:	8e de       	rcall	.-740    	; 0x118aa <PRINTER_is_MTA>
   11b8e:	89 2b       	or	r24, r25
   11b90:	c9 f2       	breq	.-78     	; 0x11b44 <GPIB_COMMANDS+0x3e>
   11b92:	11 23       	and	r17, r17
   11b94:	11 f0       	breq	.+4      	; 0x11b9a <GPIB_COMMANDS+0x94>
   11b96:	ce 01       	movw	r24, r28
   11b98:	92 d8       	rcall	.-3804   	; 0x10cbe <gpib_unread>
   11b9a:	80 91 e7 1d 	lds	r24, 0x1DE7	; 0x801de7 <secondary>
   11b9e:	0e 94 6f c1 	call	0x182de	; 0x182de <PRINTER_COMMANDS>
   11ba2:	10 92 e7 1d 	sts	0x1DE7, r1	; 0x801de7 <secondary>
   11ba6:	df 91       	pop	r29
   11ba8:	cf 91       	pop	r28
   11baa:	1f 91       	pop	r17
   11bac:	08 95       	ret

00011bae <Send_Identify>:
   11bae:	a4 e0       	ldi	r26, 0x04	; 4
   11bb0:	b0 e0       	ldi	r27, 0x00	; 0
   11bb2:	ed ed       	ldi	r30, 0xDD	; 221
   11bb4:	fd e8       	ldi	r31, 0x8D	; 141
   11bb6:	0c 94 39 e5 	jmp	0x1ca72	; 0x1ca72 <__prologue_saves__+0x16>
   11bba:	d8 2e       	mov	r13, r24
   11bbc:	7b 01       	movw	r14, r22
   11bbe:	80 e0       	ldi	r24, 0x00	; 0
   11bc0:	91 e0       	ldi	r25, 0x01	; 1
   11bc2:	9c 83       	std	Y+4, r25	; 0x04
   11bc4:	8b 83       	std	Y+3, r24	; 0x03
   11bc6:	8b 01       	movw	r16, r22
   11bc8:	20 e0       	ldi	r18, 0x00	; 0
   11bca:	30 e0       	ldi	r19, 0x00	; 0
   11bcc:	42 e0       	ldi	r20, 0x02	; 2
   11bce:	50 e0       	ldi	r21, 0x00	; 0
   11bd0:	60 e0       	ldi	r22, 0x00	; 0
   11bd2:	70 e0       	ldi	r23, 0x00	; 0
   11bd4:	ce 01       	movw	r24, r28
   11bd6:	01 96       	adiw	r24, 0x01	; 1
   11bd8:	e7 d3       	rcall	.+1998   	; 0x123a8 <V2B_MSB>
   11bda:	ae 01       	movw	r20, r28
   11bdc:	4d 5f       	subi	r20, 0xFD	; 253
   11bde:	5f 4f       	sbci	r21, 0xFF	; 255
   11be0:	62 e0       	ldi	r22, 0x02	; 2
   11be2:	70 e0       	ldi	r23, 0x00	; 0
   11be4:	ce 01       	movw	r24, r28
   11be6:	01 96       	adiw	r24, 0x01	; 1
   11be8:	3a dd       	rcall	.-1420   	; 0x1165e <gpib_write_str>
   11bea:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11bee:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11bf2:	02 97       	sbiw	r24, 0x02	; 2
   11bf4:	59 f0       	breq	.+22     	; 0x11c0c <Send_Identify+0x5e>
   11bf6:	25 70       	andi	r18, 0x05	; 5
   11bf8:	33 27       	eor	r19, r19
   11bfa:	23 2b       	or	r18, r19
   11bfc:	c9 f0       	breq	.+50     	; 0x11c30 <Send_Identify+0x82>
   11bfe:	ff 92       	push	r15
   11c00:	ef 92       	push	r14
   11c02:	1f 92       	push	r1
   11c04:	df 92       	push	r13
   11c06:	88 e7       	ldi	r24, 0x78	; 120
   11c08:	93 e1       	ldi	r25, 0x13	; 19
   11c0a:	08 c0       	rjmp	.+16     	; 0x11c1c <Send_Identify+0x6e>
   11c0c:	22 ff       	sbrs	r18, 2
   11c0e:	10 c0       	rjmp	.+32     	; 0x11c30 <Send_Identify+0x82>
   11c10:	ff 92       	push	r15
   11c12:	ef 92       	push	r14
   11c14:	1f 92       	push	r1
   11c16:	df 92       	push	r13
   11c18:	8e e5       	ldi	r24, 0x5E	; 94
   11c1a:	93 e1       	ldi	r25, 0x13	; 19
   11c1c:	1f 92       	push	r1
   11c1e:	9f 93       	push	r25
   11c20:	8f 93       	push	r24
   11c22:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11c26:	0f b6       	in	r0, 0x3f	; 63
   11c28:	f8 94       	cli
   11c2a:	de bf       	out	0x3e, r29	; 62
   11c2c:	0f be       	out	0x3f, r0	; 63
   11c2e:	cd bf       	out	0x3d, r28	; 61
   11c30:	8b 81       	ldd	r24, Y+3	; 0x03
   11c32:	9c 81       	ldd	r25, Y+4	; 0x04
   11c34:	88 27       	eor	r24, r24
   11c36:	90 7d       	andi	r25, 0xD0	; 208
   11c38:	24 96       	adiw	r28, 0x04	; 4
   11c3a:	e7 e0       	ldi	r30, 0x07	; 7
   11c3c:	0c 94 55 e5 	jmp	0x1caaa	; 0x1caaa <__epilogue_restores__+0x16>

00011c40 <GPIB>:
   11c40:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11c44:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11c48:	85 30       	cpi	r24, 0x05	; 5
   11c4a:	89 f4       	brne	.+34     	; 0x11c6e <GPIB+0x2e>
   11c4c:	24 71       	andi	r18, 0x14	; 20
   11c4e:	33 27       	eor	r19, r19
   11c50:	23 2b       	or	r18, r19
   11c52:	51 f0       	breq	.+20     	; 0x11c68 <GPIB+0x28>
   11c54:	8b e4       	ldi	r24, 0x4B	; 75
   11c56:	93 e1       	ldi	r25, 0x13	; 19
   11c58:	1f 92       	push	r1
   11c5a:	9f 93       	push	r25
   11c5c:	8f 93       	push	r24
   11c5e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11c62:	0f 90       	pop	r0
   11c64:	0f 90       	pop	r0
   11c66:	0f 90       	pop	r0
   11c68:	10 92 e3 1d 	sts	0x1DE3, r1	; 0x801de3 <spoll>
   11c6c:	9d c0       	rjmp	.+314    	; 0x11da8 <GPIB+0x168>
   11c6e:	85 31       	cpi	r24, 0x15	; 21
   11c70:	39 f4       	brne	.+14     	; 0x11c80 <GPIB+0x40>
   11c72:	24 71       	andi	r18, 0x14	; 20
   11c74:	33 27       	eor	r19, r19
   11c76:	23 2b       	or	r18, r19
   11c78:	b9 f3       	breq	.-18     	; 0x11c68 <GPIB+0x28>
   11c7a:	88 e3       	ldi	r24, 0x38	; 56
   11c7c:	93 e1       	ldi	r25, 0x13	; 19
   11c7e:	ec cf       	rjmp	.-40     	; 0x11c58 <GPIB+0x18>
   11c80:	88 31       	cpi	r24, 0x18	; 24
   11c82:	c9 f4       	brne	.+50     	; 0x11cb6 <GPIB+0x76>
   11c84:	22 ff       	sbrs	r18, 2
   11c86:	0a c0       	rjmp	.+20     	; 0x11c9c <GPIB+0x5c>
   11c88:	81 e3       	ldi	r24, 0x31	; 49
   11c8a:	93 e1       	ldi	r25, 0x13	; 19
   11c8c:	1f 92       	push	r1
   11c8e:	9f 93       	push	r25
   11c90:	8f 93       	push	r24
   11c92:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11c96:	0f 90       	pop	r0
   11c98:	0f 90       	pop	r0
   11c9a:	0f 90       	pop	r0
   11c9c:	81 e0       	ldi	r24, 0x01	; 1
   11c9e:	80 93 e3 1d 	sts	0x1DE3, r24	; 0x801de3 <spoll>
   11ca2:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   11ca6:	90 e0       	ldi	r25, 0x00	; 0
   11ca8:	a6 dd       	rcall	.-1204   	; 0x117f6 <SS80_is_MTA>
   11caa:	89 2b       	or	r24, r25
   11cac:	09 f4       	brne	.+2      	; 0x11cb0 <GPIB+0x70>
   11cae:	7c c0       	rjmp	.+248    	; 0x11da8 <GPIB+0x168>
   11cb0:	0c 94 35 af 	jmp	0x15e6a	; 0x15e6a <SS80_Report>
   11cb4:	08 95       	ret
   11cb6:	89 31       	cpi	r24, 0x19	; 25
   11cb8:	29 f4       	brne	.+10     	; 0x11cc4 <GPIB+0x84>
   11cba:	22 ff       	sbrs	r18, 2
   11cbc:	d5 cf       	rjmp	.-86     	; 0x11c68 <GPIB+0x28>
   11cbe:	8a e2       	ldi	r24, 0x2A	; 42
   11cc0:	93 e1       	ldi	r25, 0x13	; 19
   11cc2:	ca cf       	rjmp	.-108    	; 0x11c58 <GPIB+0x18>
   11cc4:	84 30       	cpi	r24, 0x04	; 4
   11cc6:	09 f0       	breq	.+2      	; 0x11cca <GPIB+0x8a>
   11cc8:	48 c0       	rjmp	.+144    	; 0x11d5a <GPIB+0x11a>
   11cca:	22 ff       	sbrs	r18, 2
   11ccc:	0a c0       	rjmp	.+20     	; 0x11ce2 <GPIB+0xa2>
   11cce:	83 e2       	ldi	r24, 0x23	; 35
   11cd0:	93 e1       	ldi	r25, 0x13	; 19
   11cd2:	1f 92       	push	r1
   11cd4:	9f 93       	push	r25
   11cd6:	8f 93       	push	r24
   11cd8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11cdc:	0f 90       	pop	r0
   11cde:	0f 90       	pop	r0
   11ce0:	0f 90       	pop	r0
   11ce2:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11ce6:	90 e0       	ldi	r25, 0x00	; 0
   11ce8:	77 dd       	rcall	.-1298   	; 0x117d8 <SS80_is_MLA>
   11cea:	89 2b       	or	r24, r25
   11cec:	d9 f0       	breq	.+54     	; 0x11d24 <GPIB+0xe4>
   11cee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11cf2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11cf6:	84 72       	andi	r24, 0x24	; 36
   11cf8:	99 27       	eor	r25, r25
   11cfa:	89 2b       	or	r24, r25
   11cfc:	51 f0       	breq	.+20     	; 0x11d12 <GPIB+0xd2>
   11cfe:	87 e1       	ldi	r24, 0x17	; 23
   11d00:	93 e1       	ldi	r25, 0x13	; 19
   11d02:	1f 92       	push	r1
   11d04:	9f 93       	push	r25
   11d06:	8f 93       	push	r24
   11d08:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11d0c:	0f 90       	pop	r0
   11d0e:	0f 90       	pop	r0
   11d10:	0f 90       	pop	r0
   11d12:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   11d16:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   11d1a:	85 81       	ldd	r24, Z+5	; 0x05
   11d1c:	90 e0       	ldi	r25, 0x00	; 0
   11d1e:	0c 94 03 b0 	jmp	0x16006	; 0x16006 <SS80_Selected_Device_Clear>
   11d22:	08 95       	ret
   11d24:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11d28:	90 e0       	ldi	r25, 0x00	; 0
   11d2a:	83 dd       	rcall	.-1274   	; 0x11832 <AMIGO_is_MLA>
   11d2c:	89 2b       	or	r24, r25
   11d2e:	e1 f1       	breq	.+120    	; 0x11da8 <GPIB+0x168>
   11d30:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11d34:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11d38:	84 72       	andi	r24, 0x24	; 36
   11d3a:	99 27       	eor	r25, r25
   11d3c:	89 2b       	or	r24, r25
   11d3e:	51 f0       	breq	.+20     	; 0x11d54 <GPIB+0x114>
   11d40:	8a e0       	ldi	r24, 0x0A	; 10
   11d42:	93 e1       	ldi	r25, 0x13	; 19
   11d44:	1f 92       	push	r1
   11d46:	9f 93       	push	r25
   11d48:	8f 93       	push	r24
   11d4a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11d4e:	0f 90       	pop	r0
   11d50:	0f 90       	pop	r0
   11d52:	0f 90       	pop	r0
   11d54:	0c 94 e2 b9 	jmp	0x173c4	; 0x173c4 <amigo_cmd_clear>
   11d58:	08 95       	ret
   11d5a:	84 31       	cpi	r24, 0x14	; 20
   11d5c:	99 f4       	brne	.+38     	; 0x11d84 <GPIB+0x144>
   11d5e:	22 ff       	sbrs	r18, 2
   11d60:	0a c0       	rjmp	.+20     	; 0x11d76 <GPIB+0x136>
   11d62:	83 e0       	ldi	r24, 0x03	; 3
   11d64:	93 e1       	ldi	r25, 0x13	; 19
   11d66:	1f 92       	push	r1
   11d68:	9f 93       	push	r25
   11d6a:	8f 93       	push	r24
   11d6c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11d70:	0f 90       	pop	r0
   11d72:	0f 90       	pop	r0
   11d74:	0f 90       	pop	r0
   11d76:	0e 94 f5 af 	call	0x15fea	; 0x15fea <SS80_Universal_Device_Clear>
   11d7a:	0e 94 e2 b9 	call	0x173c4	; 0x173c4 <amigo_cmd_clear>
   11d7e:	0e 94 0e c0 	call	0x1801c	; 0x1801c <printer_close>
   11d82:	12 c0       	rjmp	.+36     	; 0x11da8 <GPIB+0x168>
   11d84:	25 71       	andi	r18, 0x15	; 21
   11d86:	33 27       	eor	r19, r19
   11d88:	23 2b       	or	r18, r19
   11d8a:	71 f0       	breq	.+28     	; 0x11da8 <GPIB+0x168>
   11d8c:	1f 92       	push	r1
   11d8e:	8f 93       	push	r24
   11d90:	87 ee       	ldi	r24, 0xE7	; 231
   11d92:	92 e1       	ldi	r25, 0x12	; 18
   11d94:	1f 92       	push	r1
   11d96:	9f 93       	push	r25
   11d98:	8f 93       	push	r24
   11d9a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11d9e:	0f 90       	pop	r0
   11da0:	0f 90       	pop	r0
   11da2:	0f 90       	pop	r0
   11da4:	0f 90       	pop	r0
   11da6:	0f 90       	pop	r0
   11da8:	80 e0       	ldi	r24, 0x00	; 0
   11daa:	90 e0       	ldi	r25, 0x00	; 0
   11dac:	08 95       	ret

00011dae <GPIB_TALK>:
   11dae:	0f 93       	push	r16
   11db0:	1f 93       	push	r17
   11db2:	cf 93       	push	r28
   11db4:	c8 2f       	mov	r28, r24
   11db6:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   11dba:	80 93 e9 1d 	sts	0x1DE9, r24	; 0x801de9 <talking_last>
   11dbe:	c0 93 e6 1d 	sts	0x1DE6, r28	; 0x801de6 <talking>
   11dc2:	cf 35       	cpi	r28, 0x5F	; 95
   11dc4:	79 f4       	brne	.+30     	; 0x11de4 <GPIB_TALK+0x36>
   11dc6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11dca:	82 ff       	sbrs	r24, 2
   11dcc:	7f c0       	rjmp	.+254    	; 0x11ecc <GPIB_TALK+0x11e>
   11dce:	84 e9       	ldi	r24, 0x94	; 148
   11dd0:	92 e1       	ldi	r25, 0x12	; 18
   11dd2:	1f 92       	push	r1
   11dd4:	9f 93       	push	r25
   11dd6:	8f 93       	push	r24
   11dd8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11ddc:	0f 90       	pop	r0
   11dde:	0f 90       	pop	r0
   11de0:	0f 90       	pop	r0
   11de2:	74 c0       	rjmp	.+232    	; 0x11ecc <GPIB_TALK+0x11e>
   11de4:	0c 2f       	mov	r16, r28
   11de6:	10 e0       	ldi	r17, 0x00	; 0
   11de8:	c8 01       	movw	r24, r16
   11dea:	05 dd       	rcall	.-1526   	; 0x117f6 <SS80_is_MTA>
   11dec:	89 2b       	or	r24, r25
   11dee:	f1 f0       	breq	.+60     	; 0x11e2c <GPIB_TALK+0x7e>
   11df0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11df4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11df8:	84 72       	andi	r24, 0x24	; 36
   11dfa:	99 27       	eor	r25, r25
   11dfc:	89 2b       	or	r24, r25
   11dfe:	71 f0       	breq	.+28     	; 0x11e1c <GPIB_TALK+0x6e>
   11e00:	1f 92       	push	r1
   11e02:	cf 93       	push	r28
   11e04:	83 e8       	ldi	r24, 0x83	; 131
   11e06:	92 e1       	ldi	r25, 0x12	; 18
   11e08:	1f 92       	push	r1
   11e0a:	9f 93       	push	r25
   11e0c:	8f 93       	push	r24
   11e0e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11e12:	0f 90       	pop	r0
   11e14:	0f 90       	pop	r0
   11e16:	0f 90       	pop	r0
   11e18:	0f 90       	pop	r0
   11e1a:	0f 90       	pop	r0
   11e1c:	80 91 e3 1d 	lds	r24, 0x1DE3	; 0x801de3 <spoll>
   11e20:	88 23       	and	r24, r24
   11e22:	09 f4       	brne	.+2      	; 0x11e26 <GPIB_TALK+0x78>
   11e24:	53 c0       	rjmp	.+166    	; 0x11ecc <GPIB_TALK+0x11e>
   11e26:	0e 94 35 af 	call	0x15e6a	; 0x15e6a <SS80_Report>
   11e2a:	50 c0       	rjmp	.+160    	; 0x11ecc <GPIB_TALK+0x11e>
   11e2c:	c8 01       	movw	r24, r16
   11e2e:	10 dd       	rcall	.-1504   	; 0x11850 <AMIGO_is_MTA>
   11e30:	89 2b       	or	r24, r25
   11e32:	71 f0       	breq	.+28     	; 0x11e50 <GPIB_TALK+0xa2>
   11e34:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11e38:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11e3c:	84 72       	andi	r24, 0x24	; 36
   11e3e:	99 27       	eor	r25, r25
   11e40:	89 2b       	or	r24, r25
   11e42:	09 f4       	brne	.+2      	; 0x11e46 <GPIB_TALK+0x98>
   11e44:	43 c0       	rjmp	.+134    	; 0x11ecc <GPIB_TALK+0x11e>
   11e46:	1f 92       	push	r1
   11e48:	cf 93       	push	r28
   11e4a:	81 e7       	ldi	r24, 0x71	; 113
   11e4c:	92 e1       	ldi	r25, 0x12	; 18
   11e4e:	34 c0       	rjmp	.+104    	; 0x11eb8 <GPIB_TALK+0x10a>
   11e50:	c8 01       	movw	r24, r16
   11e52:	2b dd       	rcall	.-1450   	; 0x118aa <PRINTER_is_MTA>
   11e54:	89 2b       	or	r24, r25
   11e56:	69 f0       	breq	.+26     	; 0x11e72 <GPIB_TALK+0xc4>
   11e58:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11e5c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11e60:	84 72       	andi	r24, 0x24	; 36
   11e62:	99 27       	eor	r25, r25
   11e64:	89 2b       	or	r24, r25
   11e66:	91 f1       	breq	.+100    	; 0x11ecc <GPIB_TALK+0x11e>
   11e68:	1f 92       	push	r1
   11e6a:	cf 93       	push	r28
   11e6c:	8d e5       	ldi	r24, 0x5D	; 93
   11e6e:	92 e1       	ldi	r25, 0x12	; 18
   11e70:	23 c0       	rjmp	.+70     	; 0x11eb8 <GPIB_TALK+0x10a>
   11e72:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11e76:	90 e0       	ldi	r25, 0x00	; 0
   11e78:	09 dd       	rcall	.-1518   	; 0x1188c <PRINTER_is_MLA>
   11e7a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11e7e:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11e82:	89 2b       	or	r24, r25
   11e84:	99 f0       	breq	.+38     	; 0x11eac <GPIB_TALK+0xfe>
   11e86:	24 72       	andi	r18, 0x24	; 36
   11e88:	33 27       	eor	r19, r19
   11e8a:	23 2b       	or	r18, r19
   11e8c:	51 f0       	breq	.+20     	; 0x11ea2 <GPIB_TALK+0xf4>
   11e8e:	8d e4       	ldi	r24, 0x4D	; 77
   11e90:	92 e1       	ldi	r25, 0x12	; 18
   11e92:	1f 92       	push	r1
   11e94:	9f 93       	push	r25
   11e96:	8f 93       	push	r24
   11e98:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11e9c:	0f 90       	pop	r0
   11e9e:	0f 90       	pop	r0
   11ea0:	0f 90       	pop	r0
   11ea2:	80 e0       	ldi	r24, 0x00	; 0
   11ea4:	90 e0       	ldi	r25, 0x00	; 0
   11ea6:	0e 94 5b c0 	call	0x180b6	; 0x180b6 <printer_open>
   11eaa:	10 c0       	rjmp	.+32     	; 0x11ecc <GPIB_TALK+0x11e>
   11eac:	22 ff       	sbrs	r18, 2
   11eae:	0e c0       	rjmp	.+28     	; 0x11ecc <GPIB_TALK+0x11e>
   11eb0:	1f 92       	push	r1
   11eb2:	cf 93       	push	r28
   11eb4:	81 e4       	ldi	r24, 0x41	; 65
   11eb6:	92 e1       	ldi	r25, 0x12	; 18
   11eb8:	1f 92       	push	r1
   11eba:	9f 93       	push	r25
   11ebc:	8f 93       	push	r24
   11ebe:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11ec2:	0f 90       	pop	r0
   11ec4:	0f 90       	pop	r0
   11ec6:	0f 90       	pop	r0
   11ec8:	0f 90       	pop	r0
   11eca:	0f 90       	pop	r0
   11ecc:	80 e0       	ldi	r24, 0x00	; 0
   11ece:	90 e0       	ldi	r25, 0x00	; 0
   11ed0:	cf 91       	pop	r28
   11ed2:	1f 91       	pop	r17
   11ed4:	0f 91       	pop	r16
   11ed6:	08 95       	ret

00011ed8 <GPIB_SECONDARY_ADDRESS>:
   11ed8:	0f 93       	push	r16
   11eda:	1f 93       	push	r17
   11edc:	cf 93       	push	r28
   11ede:	c8 2f       	mov	r28, r24
   11ee0:	08 2f       	mov	r16, r24
   11ee2:	10 e0       	ldi	r17, 0x00	; 0
   11ee4:	c8 01       	movw	r24, r16
   11ee6:	96 dc       	rcall	.-1748   	; 0x11814 <SS80_is_MSA>
   11ee8:	89 2b       	or	r24, r25
   11eea:	19 f1       	breq	.+70     	; 0x11f32 <GPIB_SECONDARY_ADDRESS+0x5a>
   11eec:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11ef0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11ef4:	84 72       	andi	r24, 0x24	; 36
   11ef6:	99 27       	eor	r25, r25
   11ef8:	89 2b       	or	r24, r25
   11efa:	71 f0       	breq	.+28     	; 0x11f18 <GPIB_SECONDARY_ADDRESS+0x40>
   11efc:	1f 92       	push	r1
   11efe:	cf 93       	push	r28
   11f00:	80 e3       	ldi	r24, 0x30	; 48
   11f02:	92 e1       	ldi	r25, 0x12	; 18
   11f04:	1f 92       	push	r1
   11f06:	9f 93       	push	r25
   11f08:	8f 93       	push	r24
   11f0a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11f0e:	0f 90       	pop	r0
   11f10:	0f 90       	pop	r0
   11f12:	0f 90       	pop	r0
   11f14:	0f 90       	pop	r0
   11f16:	0f 90       	pop	r0
   11f18:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   11f1c:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   11f20:	81 81       	ldd	r24, Z+1	; 0x01
   11f22:	90 e0       	ldi	r25, 0x00	; 0
   11f24:	0e 94 10 86 	call	0x10c20	; 0x10c20 <gpib_disable_PPR>
   11f28:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   11f2c:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   11f30:	27 c0       	rjmp	.+78     	; 0x11f80 <GPIB_SECONDARY_ADDRESS+0xa8>
   11f32:	c8 01       	movw	r24, r16
   11f34:	9c dc       	rcall	.-1736   	; 0x1186e <AMIGO_is_MSA>
   11f36:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11f3a:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11f3e:	89 2b       	or	r24, r25
   11f40:	21 f1       	breq	.+72     	; 0x11f8a <GPIB_SECONDARY_ADDRESS+0xb2>
   11f42:	c9 01       	movw	r24, r18
   11f44:	84 72       	andi	r24, 0x24	; 36
   11f46:	99 27       	eor	r25, r25
   11f48:	89 2b       	or	r24, r25
   11f4a:	71 f0       	breq	.+28     	; 0x11f68 <GPIB_SECONDARY_ADDRESS+0x90>
   11f4c:	1f 92       	push	r1
   11f4e:	cf 93       	push	r28
   11f50:	8e e1       	ldi	r24, 0x1E	; 30
   11f52:	92 e1       	ldi	r25, 0x12	; 18
   11f54:	1f 92       	push	r1
   11f56:	9f 93       	push	r25
   11f58:	8f 93       	push	r24
   11f5a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11f5e:	0f 90       	pop	r0
   11f60:	0f 90       	pop	r0
   11f62:	0f 90       	pop	r0
   11f64:	0f 90       	pop	r0
   11f66:	0f 90       	pop	r0
   11f68:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   11f6c:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   11f70:	81 81       	ldd	r24, Z+1	; 0x01
   11f72:	90 e0       	ldi	r25, 0x00	; 0
   11f74:	0e 94 10 86 	call	0x10c20	; 0x10c20 <gpib_disable_PPR>
   11f78:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   11f7c:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   11f80:	63 a1       	ldd	r22, Z+35	; 0x23
   11f82:	74 a1       	ldd	r23, Z+36	; 0x24
   11f84:	8c 2f       	mov	r24, r28
   11f86:	13 de       	rcall	.-986    	; 0x11bae <Send_Identify>
   11f88:	20 c0       	rjmp	.+64     	; 0x11fca <GPIB_SECONDARY_ADDRESS+0xf2>
   11f8a:	c9 01       	movw	r24, r18
   11f8c:	84 72       	andi	r24, 0x24	; 36
   11f8e:	99 27       	eor	r25, r25
   11f90:	00 97       	sbiw	r24, 0x00	; 0
   11f92:	d9 f0       	breq	.+54     	; 0x11fca <GPIB_SECONDARY_ADDRESS+0xf2>
   11f94:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   11f98:	1f 92       	push	r1
   11f9a:	8f 93       	push	r24
   11f9c:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11fa0:	1f 92       	push	r1
   11fa2:	8f 93       	push	r24
   11fa4:	1f 92       	push	r1
   11fa6:	cf 93       	push	r28
   11fa8:	88 ef       	ldi	r24, 0xF8	; 248
   11faa:	91 e1       	ldi	r25, 0x11	; 17
   11fac:	1f 92       	push	r1
   11fae:	9f 93       	push	r25
   11fb0:	8f 93       	push	r24
   11fb2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   11fb6:	8d b7       	in	r24, 0x3d	; 61
   11fb8:	9e b7       	in	r25, 0x3e	; 62
   11fba:	09 96       	adiw	r24, 0x09	; 9
   11fbc:	0f b6       	in	r0, 0x3f	; 63
   11fbe:	f8 94       	cli
   11fc0:	9e bf       	out	0x3e, r25	; 62
   11fc2:	0f be       	out	0x3f, r0	; 63
   11fc4:	8d bf       	out	0x3d, r24	; 61
   11fc6:	80 e0       	ldi	r24, 0x00	; 0
   11fc8:	90 e0       	ldi	r25, 0x00	; 0
   11fca:	cf 91       	pop	r28
   11fcc:	1f 91       	pop	r17
   11fce:	0f 91       	pop	r16
   11fd0:	08 95       	ret

00011fd2 <listen_cleanup>:
   11fd2:	60 91 e2 1d 	lds	r22, 0x1DE2	; 0x801de2 <listening_last>
   11fd6:	66 23       	and	r22, r22
   11fd8:	e1 f0       	breq	.+56     	; 0x12012 <listen_cleanup+0x40>
   11fda:	70 e0       	ldi	r23, 0x00	; 0
   11fdc:	40 e2       	ldi	r20, 0x20	; 32
   11fde:	50 e0       	ldi	r21, 0x00	; 0
   11fe0:	84 e0       	ldi	r24, 0x04	; 4
   11fe2:	90 e0       	ldi	r25, 0x00	; 0
   11fe4:	89 d2       	rcall	.+1298   	; 0x124f8 <find_device>
   11fe6:	01 96       	adiw	r24, 0x01	; 1
   11fe8:	a1 f0       	breq	.+40     	; 0x12012 <listen_cleanup+0x40>
   11fea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11fee:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11ff2:	84 72       	andi	r24, 0x24	; 36
   11ff4:	99 27       	eor	r25, r25
   11ff6:	89 2b       	or	r24, r25
   11ff8:	51 f0       	breq	.+20     	; 0x1200e <listen_cleanup+0x3c>
   11ffa:	87 ee       	ldi	r24, 0xE7	; 231
   11ffc:	91 e1       	ldi	r25, 0x11	; 17
   11ffe:	1f 92       	push	r1
   12000:	9f 93       	push	r25
   12002:	8f 93       	push	r24
   12004:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   12008:	0f 90       	pop	r0
   1200a:	0f 90       	pop	r0
   1200c:	0f 90       	pop	r0
   1200e:	0c 94 0e c0 	jmp	0x1801c	; 0x1801c <printer_close>
   12012:	08 95       	ret

00012014 <GPIB_LISTEN>:
   12014:	0f 93       	push	r16
   12016:	1f 93       	push	r17
   12018:	cf 93       	push	r28
   1201a:	c8 2f       	mov	r28, r24
   1201c:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   12020:	80 93 e2 1d 	sts	0x1DE2, r24	; 0x801de2 <listening_last>
   12024:	c0 93 e8 1d 	sts	0x1DE8, r28	; 0x801de8 <listening>
   12028:	d4 df       	rcall	.-88     	; 0x11fd2 <listen_cleanup>
   1202a:	cf 33       	cpi	r28, 0x3F	; 63
   1202c:	19 f5       	brne	.+70     	; 0x12074 <GPIB_LISTEN+0x60>
   1202e:	10 92 e8 1d 	sts	0x1DE8, r1	; 0x801de8 <listening>
   12032:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12036:	82 ff       	sbrs	r24, 2
   12038:	75 c0       	rjmp	.+234    	; 0x12124 <GPIB_LISTEN+0x110>
   1203a:	80 ee       	ldi	r24, 0xE0	; 224
   1203c:	92 e1       	ldi	r25, 0x12	; 18
   1203e:	1f 92       	push	r1
   12040:	9f 93       	push	r25
   12042:	8f 93       	push	r24
   12044:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   12048:	0f 90       	pop	r0
   1204a:	0f 90       	pop	r0
   1204c:	0f 90       	pop	r0
   1204e:	80 91 e0 1b 	lds	r24, 0x1BE0	; 0x801be0 <lastcmd>
   12052:	90 91 e1 1b 	lds	r25, 0x1BE1	; 0x801be1 <lastcmd+0x1>
   12056:	8f 35       	cpi	r24, 0x5F	; 95
   12058:	91 05       	cpc	r25, r1
   1205a:	09 f0       	breq	.+2      	; 0x1205e <GPIB_LISTEN+0x4a>
   1205c:	63 c0       	rjmp	.+198    	; 0x12124 <GPIB_LISTEN+0x110>
   1205e:	8e ed       	ldi	r24, 0xDE	; 222
   12060:	92 e1       	ldi	r25, 0x12	; 18
   12062:	1f 92       	push	r1
   12064:	9f 93       	push	r25
   12066:	8f 93       	push	r24
   12068:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1206c:	0f 90       	pop	r0
   1206e:	0f 90       	pop	r0
   12070:	0f 90       	pop	r0
   12072:	58 c0       	rjmp	.+176    	; 0x12124 <GPIB_LISTEN+0x110>
   12074:	0c 2f       	mov	r16, r28
   12076:	10 e0       	ldi	r17, 0x00	; 0
   12078:	c8 01       	movw	r24, r16
   1207a:	db db       	rcall	.-2122   	; 0x11832 <AMIGO_is_MLA>
   1207c:	89 2b       	or	r24, r25
   1207e:	71 f0       	breq	.+28     	; 0x1209c <GPIB_LISTEN+0x88>
   12080:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12084:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12088:	84 72       	andi	r24, 0x24	; 36
   1208a:	99 27       	eor	r25, r25
   1208c:	89 2b       	or	r24, r25
   1208e:	09 f4       	brne	.+2      	; 0x12092 <GPIB_LISTEN+0x7e>
   12090:	49 c0       	rjmp	.+146    	; 0x12124 <GPIB_LISTEN+0x110>
   12092:	1f 92       	push	r1
   12094:	cf 93       	push	r28
   12096:	8c ec       	ldi	r24, 0xCC	; 204
   12098:	92 e1       	ldi	r25, 0x12	; 18
   1209a:	3a c0       	rjmp	.+116    	; 0x12110 <GPIB_LISTEN+0xfc>
   1209c:	c8 01       	movw	r24, r16
   1209e:	9c db       	rcall	.-2248   	; 0x117d8 <SS80_is_MLA>
   120a0:	89 2b       	or	r24, r25
   120a2:	69 f0       	breq	.+26     	; 0x120be <GPIB_LISTEN+0xaa>
   120a4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   120a8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   120ac:	84 72       	andi	r24, 0x24	; 36
   120ae:	99 27       	eor	r25, r25
   120b0:	89 2b       	or	r24, r25
   120b2:	c1 f1       	breq	.+112    	; 0x12124 <GPIB_LISTEN+0x110>
   120b4:	1f 92       	push	r1
   120b6:	cf 93       	push	r28
   120b8:	8b eb       	ldi	r24, 0xBB	; 187
   120ba:	92 e1       	ldi	r25, 0x12	; 18
   120bc:	29 c0       	rjmp	.+82     	; 0x12110 <GPIB_LISTEN+0xfc>
   120be:	c8 01       	movw	r24, r16
   120c0:	e5 db       	rcall	.-2102   	; 0x1188c <PRINTER_is_MLA>
   120c2:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   120c6:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   120ca:	89 2b       	or	r24, r25
   120cc:	d9 f0       	breq	.+54     	; 0x12104 <GPIB_LISTEN+0xf0>
   120ce:	24 72       	andi	r18, 0x24	; 36
   120d0:	33 27       	eor	r19, r19
   120d2:	23 2b       	or	r18, r19
   120d4:	71 f0       	breq	.+28     	; 0x120f2 <GPIB_LISTEN+0xde>
   120d6:	1f 92       	push	r1
   120d8:	cf 93       	push	r28
   120da:	87 ea       	ldi	r24, 0xA7	; 167
   120dc:	92 e1       	ldi	r25, 0x12	; 18
   120de:	1f 92       	push	r1
   120e0:	9f 93       	push	r25
   120e2:	8f 93       	push	r24
   120e4:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   120e8:	0f 90       	pop	r0
   120ea:	0f 90       	pop	r0
   120ec:	0f 90       	pop	r0
   120ee:	0f 90       	pop	r0
   120f0:	0f 90       	pop	r0
   120f2:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   120f6:	8f 35       	cpi	r24, 0x5F	; 95
   120f8:	a9 f0       	breq	.+42     	; 0x12124 <GPIB_LISTEN+0x110>
   120fa:	80 e0       	ldi	r24, 0x00	; 0
   120fc:	90 e0       	ldi	r25, 0x00	; 0
   120fe:	0e 94 5b c0 	call	0x180b6	; 0x180b6 <printer_open>
   12102:	10 c0       	rjmp	.+32     	; 0x12124 <GPIB_LISTEN+0x110>
   12104:	22 ff       	sbrs	r18, 2
   12106:	0e c0       	rjmp	.+28     	; 0x12124 <GPIB_LISTEN+0x110>
   12108:	1f 92       	push	r1
   1210a:	cf 93       	push	r28
   1210c:	8b e9       	ldi	r24, 0x9B	; 155
   1210e:	92 e1       	ldi	r25, 0x12	; 18
   12110:	1f 92       	push	r1
   12112:	9f 93       	push	r25
   12114:	8f 93       	push	r24
   12116:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1211a:	0f 90       	pop	r0
   1211c:	0f 90       	pop	r0
   1211e:	0f 90       	pop	r0
   12120:	0f 90       	pop	r0
   12122:	0f 90       	pop	r0
   12124:	80 e0       	ldi	r24, 0x00	; 0
   12126:	90 e0       	ldi	r25, 0x00	; 0
   12128:	cf 91       	pop	r28
   1212a:	1f 91       	pop	r17
   1212c:	0f 91       	pop	r16
   1212e:	08 95       	ret

00012130 <gpib_task>:
   12130:	cf 93       	push	r28
   12132:	df 93       	push	r29
   12134:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_state_init>
   12138:	c7 db       	rcall	.-2162   	; 0x118c8 <gpib_init_devices>
   1213a:	10 92 5e 18 	sts	0x185E, r1	; 0x80185e <gpib_log_fp+0x1>
   1213e:	10 92 5d 18 	sts	0x185D, r1	; 0x80185d <gpib_log_fp>
   12142:	80 e0       	ldi	r24, 0x00	; 0
   12144:	90 e0       	ldi	r25, 0x00	; 0
   12146:	03 d9       	rcall	.-3578   	; 0x1134e <gpib_read_byte>
   12148:	ec 01       	movw	r28, r24
   1214a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1214e:	83 ff       	sbrs	r24, 3
   12150:	02 c0       	rjmp	.+4      	; 0x12156 <gpib_task+0x26>
   12152:	ce 01       	movw	r24, r28
   12154:	d2 d9       	rcall	.-3164   	; 0x114fa <gpib_decode>
   12156:	ce 01       	movw	r24, r28
   12158:	4c dc       	rcall	.-1896   	; 0x119f2 <gpib_error_test>
   1215a:	9c 01       	movw	r18, r24
   1215c:	23 70       	andi	r18, 0x03	; 3
   1215e:	33 27       	eor	r19, r19
   12160:	23 2b       	or	r18, r19
   12162:	09 f0       	breq	.+2      	; 0x12166 <gpib_task+0x36>
   12164:	43 c0       	rjmp	.+134    	; 0x121ec <gpib_task+0xbc>
   12166:	89 2b       	or	r24, r25
   12168:	61 f7       	brne	.-40     	; 0x12142 <gpib_task+0x12>
   1216a:	d2 ff       	sbrs	r29, 2
   1216c:	26 c0       	rjmp	.+76     	; 0x121ba <gpib_task+0x8a>
   1216e:	8c 2f       	mov	r24, r28
   12170:	8f 77       	andi	r24, 0x7F	; 127
   12172:	80 32       	cpi	r24, 0x20	; 32
   12174:	10 f4       	brcc	.+4      	; 0x1217a <gpib_task+0x4a>
   12176:	64 dd       	rcall	.-1336   	; 0x11c40 <GPIB>
   12178:	e4 cf       	rjmp	.-56     	; 0x12142 <gpib_task+0x12>
   1217a:	90 ee       	ldi	r25, 0xE0	; 224
   1217c:	98 0f       	add	r25, r24
   1217e:	90 32       	cpi	r25, 0x20	; 32
   12180:	10 f4       	brcc	.+4      	; 0x12186 <gpib_task+0x56>
   12182:	48 df       	rcall	.-368    	; 0x12014 <GPIB_LISTEN>
   12184:	de cf       	rjmp	.-68     	; 0x12142 <gpib_task+0x12>
   12186:	90 ec       	ldi	r25, 0xC0	; 192
   12188:	98 0f       	add	r25, r24
   1218a:	90 32       	cpi	r25, 0x20	; 32
   1218c:	10 f4       	brcc	.+4      	; 0x12192 <gpib_task+0x62>
   1218e:	0f de       	rcall	.-994    	; 0x11dae <GPIB_TALK>
   12190:	d8 cf       	rjmp	.-80     	; 0x12142 <gpib_task+0x12>
   12192:	90 91 e8 1d 	lds	r25, 0x1DE8	; 0x801de8 <listening>
   12196:	99 23       	and	r25, r25
   12198:	59 f0       	breq	.+22     	; 0x121b0 <gpib_task+0x80>
   1219a:	20 91 e0 1b 	lds	r18, 0x1BE0	; 0x801be0 <lastcmd>
   1219e:	30 91 e1 1b 	lds	r19, 0x1BE1	; 0x801be1 <lastcmd+0x1>
   121a2:	2f 35       	cpi	r18, 0x5F	; 95
   121a4:	31 05       	cpc	r19, r1
   121a6:	21 f4       	brne	.+8      	; 0x121b0 <gpib_task+0x80>
   121a8:	10 92 e7 1d 	sts	0x1DE7, r1	; 0x801de7 <secondary>
   121ac:	95 de       	rcall	.-726    	; 0x11ed8 <GPIB_SECONDARY_ADDRESS>
   121ae:	c9 cf       	rjmp	.-110    	; 0x12142 <gpib_task+0x12>
   121b0:	80 93 e7 1d 	sts	0x1DE7, r24	; 0x801de7 <secondary>
   121b4:	60 e0       	ldi	r22, 0x00	; 0
   121b6:	90 e0       	ldi	r25, 0x00	; 0
   121b8:	12 c0       	rjmp	.+36     	; 0x121de <gpib_task+0xae>
   121ba:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   121be:	90 e0       	ldi	r25, 0x00	; 0
   121c0:	65 db       	rcall	.-2358   	; 0x1188c <PRINTER_is_MLA>
   121c2:	89 2b       	or	r24, r25
   121c4:	29 f0       	breq	.+10     	; 0x121d0 <gpib_task+0xa0>
   121c6:	ce 01       	movw	r24, r28
   121c8:	99 27       	eor	r25, r25
   121ca:	0e 94 fc c0 	call	0x181f8	; 0x181f8 <printer_buffer>
   121ce:	b9 cf       	rjmp	.-142    	; 0x12142 <gpib_task+0x12>
   121d0:	80 91 e7 1d 	lds	r24, 0x1DE7	; 0x801de7 <secondary>
   121d4:	88 23       	and	r24, r24
   121d6:	09 f4       	brne	.+2      	; 0x121da <gpib_task+0xaa>
   121d8:	b4 cf       	rjmp	.-152    	; 0x12142 <gpib_task+0x12>
   121da:	61 e0       	ldi	r22, 0x01	; 1
   121dc:	ce 01       	movw	r24, r28
   121de:	93 dc       	rcall	.-1754   	; 0x11b06 <GPIB_COMMANDS>
   121e0:	08 dc       	rcall	.-2032   	; 0x119f2 <gpib_error_test>
   121e2:	83 70       	andi	r24, 0x03	; 3
   121e4:	99 27       	eor	r25, r25
   121e6:	89 2b       	or	r24, r25
   121e8:	09 f4       	brne	.+2      	; 0x121ec <gpib_task+0xbc>
   121ea:	ab cf       	rjmp	.-170    	; 0x12142 <gpib_task+0x12>
   121ec:	df 91       	pop	r29
   121ee:	cf 91       	pop	r28
   121f0:	08 95       	ret

000121f2 <talk_cleanup>:
   121f2:	08 95       	ret

000121f4 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   121f4:	cf 93       	push	r28
   121f6:	df 93       	push	r29
   121f8:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   121fa:	83 e5       	ldi	r24, 0x53	; 83
   121fc:	95 e1       	ldi	r25, 0x15	; 21
   121fe:	1f 92       	push	r1
   12200:	9f 93       	push	r25
   12202:	8f 93       	push	r24
   12204:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    if(full)
   12208:	0f 90       	pop	r0
   1220a:	0f 90       	pop	r0
   1220c:	0f 90       	pop	r0
   1220e:	cd 2b       	or	r28, r29
   12210:	51 f0       	breq	.+20     	; 0x12226 <gpib_help+0x32>
    {
        printf("gpib prefix is optional\n"
   12212:	89 e9       	ldi	r24, 0x99	; 153
   12214:	94 e1       	ldi	r25, 0x14	; 20
   12216:	1f 92       	push	r1
   12218:	9f 93       	push	r25
   1221a:	8f 93       	push	r24
   1221c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   12220:	0f 90       	pop	r0
   12222:	0f 90       	pop	r0
   12224:	0f 90       	pop	r0
            "gpib ppr_set XX\n"
#endif
            "\n"
            );
    }
}
   12226:	df 91       	pop	r29
   12228:	cf 91       	pop	r28
   1222a:	08 95       	ret

0001222c <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   1222c:	ef 92       	push	r14
   1222e:	ff 92       	push	r15
   12230:	0f 93       	push	r16
   12232:	1f 93       	push	r17
   12234:	cf 93       	push	r28
   12236:	df 93       	push	r29
   12238:	8c 01       	movw	r16, r24

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1223a:	fb 01       	movw	r30, r22
   1223c:	80 81       	ld	r24, Z
   1223e:	91 81       	ldd	r25, Z+1	; 0x01

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   12240:	00 97       	sbiw	r24, 0x00	; 0
   12242:	19 f4       	brne	.+6      	; 0x1224a <gpib_tests+0x1e>
        return(0);
   12244:	80 e0       	ldi	r24, 0x00	; 0
   12246:	90 e0       	ldi	r25, 0x00	; 0
   12248:	aa c0       	rjmp	.+340    	; 0x1239e <gpib_tests+0x172>
   1224a:	7b 01       	movw	r14, r22

    ind = 0;
    ptr = argv[ind++];

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   1224c:	67 e2       	ldi	r22, 0x27	; 39
   1224e:	7d e0       	ldi	r23, 0x0D	; 13
   12250:	0e 94 7e 32 	call	0x64fc	; 0x64fc <MATCH>
   12254:	89 2b       	or	r24, r25
   12256:	b1 f3       	breq	.-20     	; 0x12244 <gpib_tests+0x18>
        return(0);

    ptr = argv[ind++];
   12258:	f7 01       	movw	r30, r14
   1225a:	c2 81       	ldd	r28, Z+2	; 0x02
   1225c:	d3 81       	ldd	r29, Z+3	; 0x03
    if ( !ptr || MATCH(ptr,"help") )
   1225e:	20 97       	sbiw	r28, 0x00	; 0
   12260:	21 f4       	brne	.+8      	; 0x1226a <gpib_tests+0x3e>
    {
        gpib_help(1);
   12262:	81 e0       	ldi	r24, 0x01	; 1
   12264:	90 e0       	ldi	r25, 0x00	; 0
   12266:	c6 df       	rcall	.-116    	; 0x121f4 <gpib_help>
   12268:	98 c0       	rjmp	.+304    	; 0x1239a <gpib_tests+0x16e>
    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
    if ( !ptr || MATCH(ptr,"help") )
   1226a:	67 ef       	ldi	r22, 0xF7	; 247
   1226c:	75 e1       	ldi	r23, 0x15	; 21
   1226e:	ce 01       	movw	r24, r28
   12270:	0e 94 7e 32 	call	0x64fc	; 0x64fc <MATCH>
   12274:	89 2b       	or	r24, r25
   12276:	a9 f7       	brne	.-22     	; 0x12262 <gpib_tests+0x36>
    {
        gpib_help(1);
        return(1);
    }

    if (MATCHARGS(ptr,"addresses",(ind+0),argc))
   12278:	98 01       	movw	r18, r16
   1227a:	42 e0       	ldi	r20, 0x02	; 2
   1227c:	50 e0       	ldi	r21, 0x00	; 0
   1227e:	6c e2       	ldi	r22, 0x2C	; 44
   12280:	7d e0       	ldi	r23, 0x0D	; 13
   12282:	ce 01       	movw	r24, r28
   12284:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   12288:	89 2b       	or	r24, r25
   1228a:	19 f0       	breq	.+6      	; 0x12292 <gpib_tests+0x66>
    {
        display_Addresses();
   1228c:	0e 94 47 a0 	call	0x1408e	; 0x1408e <display_Addresses>
   12290:	84 c0       	rjmp	.+264    	; 0x1239a <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"config",(ind+0),argc))
   12292:	98 01       	movw	r18, r16
   12294:	42 e0       	ldi	r20, 0x02	; 2
   12296:	50 e0       	ldi	r21, 0x00	; 0
   12298:	66 e3       	ldi	r22, 0x36	; 54
   1229a:	7d e0       	ldi	r23, 0x0D	; 13
   1229c:	ce 01       	movw	r24, r28
   1229e:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   122a2:	89 2b       	or	r24, r25
   122a4:	19 f0       	breq	.+6      	; 0x122ac <gpib_tests+0x80>
    {
        display_Config();
   122a6:	0e 94 42 a1 	call	0x14284	; 0x14284 <display_Config>
   122aa:	77 c0       	rjmp	.+238    	; 0x1239a <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"debug", (ind+1) ,argc))
   122ac:	98 01       	movw	r18, r16
   122ae:	43 e0       	ldi	r20, 0x03	; 3
   122b0:	50 e0       	ldi	r21, 0x00	; 0
   122b2:	6d e3       	ldi	r22, 0x3D	; 61
   122b4:	7d e0       	ldi	r23, 0x0D	; 13
   122b6:	ce 01       	movw	r24, r28
   122b8:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   122bc:	89 2b       	or	r24, r25
   122be:	c1 f0       	breq	.+48     	; 0x122f0 <gpib_tests+0xc4>
    {
        debuglevel = get_value(argv[ind]);
   122c0:	f7 01       	movw	r30, r14
   122c2:	84 81       	ldd	r24, Z+4	; 0x04
   122c4:	95 81       	ldd	r25, Z+5	; 0x05
   122c6:	0e 94 c0 33 	call	0x6780	; 0x6780 <get_value>
   122ca:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <debuglevel>
   122ce:	70 93 be 01 	sts	0x01BE, r23	; 0x8001be <debuglevel+0x1>
        printf("debug=%04XH\n", debuglevel);
   122d2:	7f 93       	push	r23
   122d4:	6f 93       	push	r22
   122d6:	8c e8       	ldi	r24, 0x8C	; 140
   122d8:	94 e1       	ldi	r25, 0x14	; 20
   122da:	1f 92       	push	r1
   122dc:	9f 93       	push	r25
   122de:	8f 93       	push	r24
   122e0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(1);
   122e4:	0f 90       	pop	r0
   122e6:	0f 90       	pop	r0
   122e8:	0f 90       	pop	r0
   122ea:	0f 90       	pop	r0
   122ec:	0f 90       	pop	r0
   122ee:	55 c0       	rjmp	.+170    	; 0x1239a <gpib_tests+0x16e>
    }

    if (MATCHARGS(ptr,"elapsed_reset",(ind+0),argc))
   122f0:	98 01       	movw	r18, r16
   122f2:	42 e0       	ldi	r20, 0x02	; 2
   122f4:	50 e0       	ldi	r21, 0x00	; 0
   122f6:	63 e4       	ldi	r22, 0x43	; 67
   122f8:	7d e0       	ldi	r23, 0x0D	; 13
   122fa:	ce 01       	movw	r24, r28
   122fc:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   12300:	89 2b       	or	r24, r25
   12302:	19 f0       	breq	.+6      	; 0x1230a <gpib_tests+0xde>
    {
        gpib_timer_elapsed_begin();
   12304:	0e 94 27 85 	call	0x10a4e	; 0x10a4e <gpib_timer_elapsed_begin>
   12308:	48 c0       	rjmp	.+144    	; 0x1239a <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed",(ind+0),argc))
   1230a:	98 01       	movw	r18, r16
   1230c:	42 e0       	ldi	r20, 0x02	; 2
   1230e:	50 e0       	ldi	r21, 0x00	; 0
   12310:	61 e5       	ldi	r22, 0x51	; 81
   12312:	7d e0       	ldi	r23, 0x0D	; 13
   12314:	ce 01       	movw	r24, r28
   12316:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1231a:	89 2b       	or	r24, r25
   1231c:	29 f0       	breq	.+10     	; 0x12328 <gpib_tests+0xfc>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   1231e:	89 e5       	ldi	r24, 0x59	; 89
   12320:	9d e0       	ldi	r25, 0x0D	; 13
   12322:	0e 94 39 85 	call	0x10a72	; 0x10a72 <gpib_timer_elapsed_end>
   12326:	39 c0       	rjmp	.+114    	; 0x1239a <gpib_tests+0x16e>
        return(1);
    }

    if ( MATCHARGS(ptr, "ifc",(ind+0),argc))
   12328:	98 01       	movw	r18, r16
   1232a:	42 e0       	ldi	r20, 0x02	; 2
   1232c:	50 e0       	ldi	r21, 0x00	; 0
   1232e:	67 e6       	ldi	r22, 0x67	; 103
   12330:	7d e0       	ldi	r23, 0x0D	; 13
   12332:	ce 01       	movw	r24, r28
   12334:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   12338:	89 2b       	or	r24, r25
   1233a:	19 f0       	breq	.+6      	; 0x12342 <gpib_tests+0x116>
    {
        gpib_assert_ifc();
   1233c:	0e 94 41 86 	call	0x10c82	; 0x10c82 <gpib_assert_ifc>
   12340:	2c c0       	rjmp	.+88     	; 0x1239a <gpib_tests+0x16e>
        return(1);

    }

    if (MATCHARGS(ptr,"task",(ind+0),argc))
   12342:	98 01       	movw	r18, r16
   12344:	42 e0       	ldi	r20, 0x02	; 2
   12346:	50 e0       	ldi	r21, 0x00	; 0
   12348:	6b e6       	ldi	r22, 0x6B	; 107
   1234a:	7d e0       	ldi	r23, 0x0D	; 13
   1234c:	ce 01       	movw	r24, r28
   1234e:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   12352:	89 2b       	or	r24, r25
    {
        gpib_task();
   12354:	11 f0       	breq	.+4      	; 0x1235a <gpib_tests+0x12e>
   12356:	ec de       	rcall	.-552    	; 0x12130 <gpib_task>
   12358:	20 c0       	rjmp	.+64     	; 0x1239a <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   1235a:	98 01       	movw	r18, r16
   1235c:	43 e0       	ldi	r20, 0x03	; 3
   1235e:	50 e0       	ldi	r21, 0x00	; 0
   12360:	60 e7       	ldi	r22, 0x70	; 112
   12362:	7d e0       	ldi	r23, 0x0D	; 13
   12364:	ce 01       	movw	r24, r28
   12366:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1236a:	89 2b       	or	r24, r25
   1236c:	09 f4       	brne	.+2      	; 0x12370 <gpib_tests+0x144>
   1236e:	6a cf       	rjmp	.-300    	; 0x12244 <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   12370:	f7 01       	movw	r30, r14
   12372:	86 81       	ldd	r24, Z+6	; 0x06
   12374:	97 81       	ldd	r25, Z+7	; 0x07
   12376:	00 97       	sbiw	r24, 0x00	; 0
   12378:	51 f0       	breq	.+20     	; 0x1238e <gpib_tests+0x162>
   1237a:	66 e7       	ldi	r22, 0x76	; 118
   1237c:	7d e0       	ldi	r23, 0x0D	; 13
   1237e:	0e 94 7e 32 	call	0x64fc	; 0x64fc <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12382:	61 e0       	ldi	r22, 0x01	; 1
   12384:	70 e0       	ldi	r23, 0x00	; 0
   12386:	89 2b       	or	r24, r25
   12388:	21 f4       	brne	.+8      	; 0x12392 <gpib_tests+0x166>
   1238a:	60 e0       	ldi	r22, 0x00	; 0
   1238c:	02 c0       	rjmp	.+4      	; 0x12392 <gpib_tests+0x166>
   1238e:	60 e0       	ldi	r22, 0x00	; 0
   12390:	70 e0       	ldi	r23, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   12392:	f7 01       	movw	r30, r14
   12394:	84 81       	ldd	r24, Z+4	; 0x04
   12396:	95 81       	ldd	r25, Z+5	; 0x05
   12398:	9f da       	rcall	.-2754   	; 0x118d8 <gpib_trace_task>
        return(1);
   1239a:	81 e0       	ldi	r24, 0x01	; 1
   1239c:	90 e0       	ldi	r25, 0x00	; 0

	} // port write 
#endif  // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   1239e:	cd b7       	in	r28, 0x3d	; 61
   123a0:	de b7       	in	r29, 0x3e	; 62
   123a2:	e6 e0       	ldi	r30, 0x06	; 6
   123a4:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

000123a8 <V2B_MSB>:
   123a8:	0f 93       	push	r16
   123aa:	1f 93       	push	r17
   123ac:	da 01       	movw	r26, r20
   123ae:	11 97       	sbiw	r26, 0x01	; 1
   123b0:	b7 fd       	sbrc	r27, 7
   123b2:	0b c0       	rjmp	.+22     	; 0x123ca <V2B_MSB+0x22>
   123b4:	fd 01       	movw	r30, r26
   123b6:	e6 0f       	add	r30, r22
   123b8:	f7 1f       	adc	r31, r23
   123ba:	e8 0f       	add	r30, r24
   123bc:	f9 1f       	adc	r31, r25
   123be:	00 83       	st	Z, r16
   123c0:	01 2f       	mov	r16, r17
   123c2:	12 2f       	mov	r17, r18
   123c4:	23 2f       	mov	r18, r19
   123c6:	33 27       	eor	r19, r19
   123c8:	f2 cf       	rjmp	.-28     	; 0x123ae <V2B_MSB+0x6>
   123ca:	1f 91       	pop	r17
   123cc:	0f 91       	pop	r16
   123ce:	08 95       	ret

000123d0 <V2B_LSB>:
   123d0:	0f 93       	push	r16
   123d2:	1f 93       	push	r17
   123d4:	fc 01       	movw	r30, r24
   123d6:	e6 0f       	add	r30, r22
   123d8:	f7 1f       	adc	r31, r23
   123da:	bf 01       	movw	r22, r30
   123dc:	cf 01       	movw	r24, r30
   123de:	86 1b       	sub	r24, r22
   123e0:	97 0b       	sbc	r25, r23
   123e2:	84 17       	cp	r24, r20
   123e4:	95 07       	cpc	r25, r21
   123e6:	34 f4       	brge	.+12     	; 0x123f4 <V2B_LSB+0x24>
   123e8:	01 93       	st	Z+, r16
   123ea:	01 2f       	mov	r16, r17
   123ec:	12 2f       	mov	r17, r18
   123ee:	23 2f       	mov	r18, r19
   123f0:	33 27       	eor	r19, r19
   123f2:	f4 cf       	rjmp	.-24     	; 0x123dc <V2B_LSB+0xc>
   123f4:	1f 91       	pop	r17
   123f6:	0f 91       	pop	r16
   123f8:	08 95       	ret

000123fa <B2V_MSB>:
   123fa:	cf 92       	push	r12
   123fc:	df 92       	push	r13
   123fe:	ef 92       	push	r14
   12400:	ff 92       	push	r15
   12402:	fc 01       	movw	r30, r24
   12404:	e6 0f       	add	r30, r22
   12406:	f7 1f       	adc	r31, r23
   12408:	60 e0       	ldi	r22, 0x00	; 0
   1240a:	70 e0       	ldi	r23, 0x00	; 0
   1240c:	cb 01       	movw	r24, r22
   1240e:	df 01       	movw	r26, r30
   12410:	9f 01       	movw	r18, r30
   12412:	2a 1b       	sub	r18, r26
   12414:	3b 0b       	sbc	r19, r27
   12416:	24 17       	cp	r18, r20
   12418:	35 07       	cpc	r19, r21
   1241a:	4c f4       	brge	.+18     	; 0x1242e <B2V_MSB+0x34>
   1241c:	cc 24       	eor	r12, r12
   1241e:	d6 2e       	mov	r13, r22
   12420:	e7 2e       	mov	r14, r23
   12422:	f8 2e       	mov	r15, r24
   12424:	21 91       	ld	r18, Z+
   12426:	c7 01       	movw	r24, r14
   12428:	b6 01       	movw	r22, r12
   1242a:	62 2b       	or	r22, r18
   1242c:	f1 cf       	rjmp	.-30     	; 0x12410 <B2V_MSB+0x16>
   1242e:	ff 90       	pop	r15
   12430:	ef 90       	pop	r14
   12432:	df 90       	pop	r13
   12434:	cf 90       	pop	r12
   12436:	08 95       	ret

00012438 <B2V_LSB>:
   12438:	cf 92       	push	r12
   1243a:	df 92       	push	r13
   1243c:	ef 92       	push	r14
   1243e:	ff 92       	push	r15
   12440:	9c 01       	movw	r18, r24
   12442:	db 01       	movw	r26, r22
   12444:	60 e0       	ldi	r22, 0x00	; 0
   12446:	70 e0       	ldi	r23, 0x00	; 0
   12448:	cb 01       	movw	r24, r22
   1244a:	41 50       	subi	r20, 0x01	; 1
   1244c:	51 09       	sbc	r21, r1
   1244e:	57 fd       	sbrc	r21, 7
   12450:	0e c0       	rjmp	.+28     	; 0x1246e <B2V_LSB+0x36>
   12452:	cc 24       	eor	r12, r12
   12454:	d6 2e       	mov	r13, r22
   12456:	e7 2e       	mov	r14, r23
   12458:	f8 2e       	mov	r15, r24
   1245a:	fa 01       	movw	r30, r20
   1245c:	ea 0f       	add	r30, r26
   1245e:	fb 1f       	adc	r31, r27
   12460:	e2 0f       	add	r30, r18
   12462:	f3 1f       	adc	r31, r19
   12464:	e0 81       	ld	r30, Z
   12466:	c7 01       	movw	r24, r14
   12468:	b6 01       	movw	r22, r12
   1246a:	6e 2b       	or	r22, r30
   1246c:	ee cf       	rjmp	.-36     	; 0x1244a <B2V_LSB+0x12>
   1246e:	ff 90       	pop	r15
   12470:	ef 90       	pop	r14
   12472:	df 90       	pop	r13
   12474:	cf 90       	pop	r12
   12476:	08 95       	ret

00012478 <find_type>:
   12478:	ec ee       	ldi	r30, 0xEC	; 236
   1247a:	fd e1       	ldi	r31, 0x1D	; 29
   1247c:	20 e0       	ldi	r18, 0x00	; 0
   1247e:	30 e0       	ldi	r19, 0x00	; 0
   12480:	40 81       	ld	r20, Z
   12482:	50 e0       	ldi	r21, 0x00	; 0
   12484:	48 17       	cp	r20, r24
   12486:	59 07       	cpc	r21, r25
   12488:	49 f0       	breq	.+18     	; 0x1249c <find_type+0x24>
   1248a:	2f 5f       	subi	r18, 0xFF	; 255
   1248c:	3f 4f       	sbci	r19, 0xFF	; 255
   1248e:	bb 96       	adiw	r30, 0x2b	; 43
   12490:	2c 30       	cpi	r18, 0x0C	; 12
   12492:	31 05       	cpc	r19, r1
   12494:	a9 f7       	brne	.-22     	; 0x12480 <find_type+0x8>
   12496:	8f ef       	ldi	r24, 0xFF	; 255
   12498:	9f ef       	ldi	r25, 0xFF	; 255
   1249a:	08 95       	ret
   1249c:	c9 01       	movw	r24, r18
   1249e:	08 95       	ret

000124a0 <count_drive_types>:
   124a0:	28 2f       	mov	r18, r24
   124a2:	ec ee       	ldi	r30, 0xEC	; 236
   124a4:	fd e1       	ldi	r31, 0x1D	; 29
   124a6:	80 e0       	ldi	r24, 0x00	; 0
   124a8:	90 e0       	ldi	r25, 0x00	; 0
   124aa:	30 81       	ld	r19, Z
   124ac:	32 13       	cpse	r19, r18
   124ae:	01 c0       	rjmp	.+2      	; 0x124b2 <count_drive_types+0x12>
   124b0:	01 96       	adiw	r24, 0x01	; 1
   124b2:	bb 96       	adiw	r30, 0x2b	; 43
   124b4:	3f e1       	ldi	r19, 0x1F	; 31
   124b6:	e0 3f       	cpi	r30, 0xF0	; 240
   124b8:	f3 07       	cpc	r31, r19
   124ba:	b9 f7       	brne	.-18     	; 0x124aa <count_drive_types+0xa>
   124bc:	08 95       	ret

000124be <type_to_str>:
   124be:	00 97       	sbiw	r24, 0x00	; 0
   124c0:	59 f0       	breq	.+22     	; 0x124d8 <type_to_str+0x1a>
   124c2:	81 30       	cpi	r24, 0x01	; 1
   124c4:	91 05       	cpc	r25, r1
   124c6:	59 f0       	breq	.+22     	; 0x124de <type_to_str+0x20>
   124c8:	83 30       	cpi	r24, 0x03	; 3
   124ca:	91 05       	cpc	r25, r1
   124cc:	59 f0       	breq	.+22     	; 0x124e4 <type_to_str+0x26>
   124ce:	04 97       	sbiw	r24, 0x04	; 4
   124d0:	61 f0       	breq	.+24     	; 0x124ea <type_to_str+0x2c>
   124d2:	84 ea       	ldi	r24, 0xA4	; 164
   124d4:	9d e0       	ldi	r25, 0x0D	; 13
   124d6:	08 95       	ret
   124d8:	8a e7       	ldi	r24, 0x7A	; 122
   124da:	9d e0       	ldi	r25, 0x0D	; 13
   124dc:	08 95       	ret
   124de:	82 e8       	ldi	r24, 0x82	; 130
   124e0:	9d e0       	ldi	r25, 0x0D	; 13
   124e2:	08 95       	ret
   124e4:	8a e9       	ldi	r24, 0x9A	; 154
   124e6:	9d e0       	ldi	r25, 0x0D	; 13
   124e8:	08 95       	ret
   124ea:	8d e8       	ldi	r24, 0x8D	; 141
   124ec:	9d e0       	ldi	r25, 0x0D	; 13
   124ee:	08 95       	ret

000124f0 <find_free>:
   124f0:	80 e0       	ldi	r24, 0x00	; 0
   124f2:	90 e0       	ldi	r25, 0x00	; 0
   124f4:	c1 cf       	rjmp	.-126    	; 0x12478 <find_type>
   124f6:	08 95       	ret

000124f8 <find_device>:
int find_device(int type, int address, int base)
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
   124f8:	9b 01       	movw	r18, r22
   124fa:	20 52       	subi	r18, 0x20	; 32
   124fc:	31 09       	sbc	r19, r1
   124fe:	2f 35       	cpi	r18, 0x5F	; 95
   12500:	31 05       	cpc	r19, r1
   12502:	f8 f4       	brcc	.+62     	; 0x12542 <find_device+0x4a>
        return(-1);

    ///@brief Make sure address is in expected range
    if(address < base || address > (base+30))
   12504:	64 17       	cp	r22, r20
   12506:	75 07       	cpc	r23, r21
   12508:	e4 f0       	brlt	.+56     	; 0x12542 <find_device+0x4a>
   1250a:	9a 01       	movw	r18, r20
   1250c:	22 5e       	subi	r18, 0xE2	; 226
   1250e:	3f 4f       	sbci	r19, 0xFF	; 255
   12510:	26 17       	cp	r18, r22
   12512:	37 07       	cpc	r19, r23
   12514:	b4 f0       	brlt	.+44     	; 0x12542 <find_device+0x4a>
        return(-1);

    ///@brief convert to device address
    address -= base;
   12516:	64 1b       	sub	r22, r20
   12518:	75 0b       	sbc	r23, r21
   1251a:	ec ee       	ldi	r30, 0xEC	; 236
   1251c:	fd e1       	ldi	r31, 0x1D	; 29

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   1251e:	20 e0       	ldi	r18, 0x00	; 0
   12520:	30 e0       	ldi	r19, 0x00	; 0
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
   12522:	40 81       	ld	r20, Z
   12524:	50 e0       	ldi	r21, 0x00	; 0
   12526:	48 17       	cp	r20, r24
   12528:	59 07       	cpc	r21, r25
   1252a:	29 f4       	brne	.+10     	; 0x12536 <find_device+0x3e>
   1252c:	41 81       	ldd	r20, Z+1	; 0x01
   1252e:	50 e0       	ldi	r21, 0x00	; 0
   12530:	64 17       	cp	r22, r20
   12532:	75 07       	cpc	r23, r21
   12534:	49 f0       	breq	.+18     	; 0x12548 <find_device+0x50>

    ///@brief convert to device address
    address -= base;

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   12536:	2f 5f       	subi	r18, 0xFF	; 255
   12538:	3f 4f       	sbci	r19, 0xFF	; 255
   1253a:	bb 96       	adiw	r30, 0x2b	; 43
   1253c:	2c 30       	cpi	r18, 0x0C	; 12
   1253e:	31 05       	cpc	r19, r1
   12540:	81 f7       	brne	.-32     	; 0x12522 <find_device+0x2a>
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
        return(-1);
   12542:	8f ef       	ldi	r24, 0xFF	; 255
   12544:	9f ef       	ldi	r25, 0xFF	; 255
   12546:	08 95       	ret
   12548:	c9 01       	movw	r24, r18
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
            return(i);
    }
    return(-1);
}
   1254a:	08 95       	ret

0001254c <set_active_device>:
/// Since we can be called multiple times per single GPIB state we do not
/// display state changes here. Other code displays the active state.
///@param index: Devices[] index
///@return 1 on success or 0 on fail
int set_active_device(int index)
{
   1254c:	1f 93       	push	r17
   1254e:	cf 93       	push	r28
   12550:	df 93       	push	r29
    int type,address;

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
   12552:	8f 3f       	cpi	r24, 0xFF	; 255
   12554:	2f ef       	ldi	r18, 0xFF	; 255
   12556:	92 07       	cpc	r25, r18
   12558:	09 f4       	brne	.+2      	; 0x1255c <set_active_device+0x10>
   1255a:	fa c0       	rjmp	.+500    	; 0x12750 <set_active_device+0x204>
   1255c:	ec 01       	movw	r28, r24
    {
        return(0);
    }

    if(index < 0 || index >= MAX_DEVICES)
   1255e:	0c 97       	sbiw	r24, 0x0c	; 12
   12560:	c0 f0       	brcs	.+48     	; 0x12592 <set_active_device+0x46>
    {
        if(debuglevel & 1)
   12562:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12566:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1256a:	9c 01       	movw	r18, r24
   1256c:	21 70       	andi	r18, 0x01	; 1
   1256e:	33 27       	eor	r19, r19
   12570:	80 ff       	sbrs	r24, 0
   12572:	f0 c0       	rjmp	.+480    	; 0x12754 <set_active_device+0x208>
            printf("set_active_device:(%d) out of range\n", index);
   12574:	df 93       	push	r29
   12576:	cf 93       	push	r28
   12578:	82 e0       	ldi	r24, 0x02	; 2
   1257a:	9f e1       	ldi	r25, 0x1F	; 31
   1257c:	1f 92       	push	r1
   1257e:	9f 93       	push	r25
   12580:	8f 93       	push	r24
   12582:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   12586:	0f 90       	pop	r0
   12588:	0f 90       	pop	r0
   1258a:	0f 90       	pop	r0
   1258c:	0f 90       	pop	r0
   1258e:	0f 90       	pop	r0
   12590:	df c0       	rjmp	.+446    	; 0x12750 <set_active_device+0x204>
        return(0);
    }

    type = Devices[index].TYPE;
    address = Devices[index].ADDRESS;
   12592:	8b e2       	ldi	r24, 0x2B	; 43
   12594:	8c 9f       	mul	r24, r28
   12596:	f0 01       	movw	r30, r0
   12598:	8d 9f       	mul	r24, r29
   1259a:	f0 0d       	add	r31, r0
   1259c:	11 24       	eor	r1, r1
   1259e:	e4 51       	subi	r30, 0x14	; 20
   125a0:	f2 4e       	sbci	r31, 0xE2	; 226
   125a2:	81 81       	ldd	r24, Z+1	; 0x01
    if(address < 0 || address > 30)
   125a4:	8f 31       	cpi	r24, 0x1F	; 31
   125a6:	e8 f0       	brcs	.+58     	; 0x125e2 <set_active_device+0x96>
    {
        if(debuglevel & 1)
   125a8:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   125ac:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   125b0:	9a 01       	movw	r18, r20
   125b2:	21 70       	andi	r18, 0x01	; 1
   125b4:	33 27       	eor	r19, r19
   125b6:	40 ff       	sbrs	r20, 0
   125b8:	cd c0       	rjmp	.+410    	; 0x12754 <set_active_device+0x208>
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
   125ba:	1f 92       	push	r1
   125bc:	8f 93       	push	r24
   125be:	df 93       	push	r29
   125c0:	cf 93       	push	r28
   125c2:	89 ec       	ldi	r24, 0xC9	; 201
   125c4:	9e e1       	ldi	r25, 0x1E	; 30
   125c6:	1f 92       	push	r1
   125c8:	9f 93       	push	r25
   125ca:	8f 93       	push	r24
   125cc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   125d0:	8d b7       	in	r24, 0x3d	; 61
   125d2:	9e b7       	in	r25, 0x3e	; 62
   125d4:	07 96       	adiw	r24, 0x07	; 7
   125d6:	0f b6       	in	r0, 0x3f	; 63
   125d8:	f8 94       	cli
   125da:	9e bf       	out	0x3e, r25	; 62
   125dc:	0f be       	out	0x3f, r0	; 63
   125de:	8d bf       	out	0x3d, r24	; 61
   125e0:	b7 c0       	rjmp	.+366    	; 0x12750 <set_active_device+0x204>
        if(debuglevel & 1)
            printf("set_active_device:(%d) out of range\n", index);
        return(0);
    }

    type = Devices[index].TYPE;
   125e2:	10 81       	ld	r17, Z
   125e4:	81 2f       	mov	r24, r17
   125e6:	90 e0       	ldi	r25, 0x00	; 0
        if(debuglevel & 1)
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
        return(0);
    }

    if(Devices[index].dev == NULL)
   125e8:	27 a1       	ldd	r18, Z+39	; 0x27
   125ea:	30 a5       	ldd	r19, Z+40	; 0x28
   125ec:	21 15       	cp	r18, r1
   125ee:	31 05       	cpc	r19, r1
   125f0:	01 f5       	brne	.+64     	; 0x12632 <set_active_device+0xe6>
    {
        if(debuglevel & 1)
   125f2:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   125f6:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   125fa:	9a 01       	movw	r18, r20
   125fc:	21 70       	andi	r18, 0x01	; 1
   125fe:	33 27       	eor	r19, r19
   12600:	40 ff       	sbrs	r20, 0
            printf("set_active_device: index:%d type:%d:%s, dev == NULL\n", 
   12602:	a8 c0       	rjmp	.+336    	; 0x12754 <set_active_device+0x208>
   12604:	5c df       	rcall	.-328    	; 0x124be <type_to_str>
   12606:	9f 93       	push	r25
   12608:	8f 93       	push	r24
   1260a:	1f 92       	push	r1
   1260c:	1f 93       	push	r17
   1260e:	df 93       	push	r29
   12610:	cf 93       	push	r28
   12612:	84 e9       	ldi	r24, 0x94	; 148
   12614:	9e e1       	ldi	r25, 0x1E	; 30
   12616:	1f 92       	push	r1
   12618:	9f 93       	push	r25
   1261a:	8f 93       	push	r24
   1261c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   12620:	8d b7       	in	r24, 0x3d	; 61
   12622:	9e b7       	in	r25, 0x3e	; 62
   12624:	09 96       	adiw	r24, 0x09	; 9
   12626:	0f b6       	in	r0, 0x3f	; 63
   12628:	f8 94       	cli
   1262a:	9e bf       	out	0x3e, r25	; 62
   1262c:	0f be       	out	0x3f, r0	; 63
   1262e:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == NO_TYPE)
   12630:	8f c0       	rjmp	.+286    	; 0x12750 <set_active_device+0x204>
   12632:	00 97       	sbiw	r24, 0x00	; 0
    {
        if(debuglevel & 1)
   12634:	11 f5       	brne	.+68     	; 0x1267a <set_active_device+0x12e>
   12636:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1263a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1263e:	9c 01       	movw	r18, r24
   12640:	21 70       	andi	r18, 0x01	; 1
   12642:	33 27       	eor	r19, r19
   12644:	80 ff       	sbrs	r24, 0
            printf("set_active_device: index %d uninitalized type:%d:%s\n", 
   12646:	86 c0       	rjmp	.+268    	; 0x12754 <set_active_device+0x208>
   12648:	80 e0       	ldi	r24, 0x00	; 0
   1264a:	90 e0       	ldi	r25, 0x00	; 0
   1264c:	38 df       	rcall	.-400    	; 0x124be <type_to_str>
   1264e:	9f 93       	push	r25
   12650:	8f 93       	push	r24
   12652:	1f 92       	push	r1
   12654:	1f 92       	push	r1
   12656:	df 93       	push	r29
   12658:	cf 93       	push	r28
   1265a:	8f e5       	ldi	r24, 0x5F	; 95
   1265c:	9e e1       	ldi	r25, 0x1E	; 30
   1265e:	1f 92       	push	r1
   12660:	9f 93       	push	r25
   12662:	8f 93       	push	r24
   12664:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   12668:	8d b7       	in	r24, 0x3d	; 61
   1266a:	9e b7       	in	r25, 0x3e	; 62
   1266c:	09 96       	adiw	r24, 0x09	; 9
   1266e:	0f b6       	in	r0, 0x3f	; 63
   12670:	f8 94       	cli
   12672:	9e bf       	out	0x3e, r25	; 62
   12674:	0f be       	out	0x3f, r0	; 63
   12676:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == PRINTER_TYPE)
   12678:	6b c0       	rjmp	.+214    	; 0x12750 <set_active_device+0x204>
   1267a:	84 30       	cpi	r24, 0x04	; 4
   1267c:	91 05       	cpc	r25, r1
    {
        PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   1267e:	29 f4       	brne	.+10     	; 0x1268a <set_active_device+0x13e>
   12680:	30 93 6a 18 	sts	0x186A, r19	; 0x80186a <PRINTERp+0x1>
   12684:	20 93 69 18 	sts	0x1869, r18	; 0x801869 <PRINTERp>
        return(1);
    }

    if(type == AMIGO_TYPE || type == SS80_TYPE) 
   12688:	41 c0       	rjmp	.+130    	; 0x1270c <set_active_device+0x1c0>
   1268a:	41 2f       	mov	r20, r17
   1268c:	4d 7f       	andi	r20, 0xFD	; 253
   1268e:	41 30       	cpi	r20, 0x01	; 1
   12690:	09 f0       	breq	.+2      	; 0x12694 <set_active_device+0x148>
    {
        if(Devices[index].state == NULL)
   12692:	3f c0       	rjmp	.+126    	; 0x12712 <set_active_device+0x1c6>
   12694:	41 a5       	ldd	r20, Z+41	; 0x29
   12696:	52 a5       	ldd	r21, Z+42	; 0x2a
   12698:	41 15       	cp	r20, r1
   1269a:	51 05       	cpc	r21, r1
        {
            if(debuglevel & 1)
   1269c:	01 f5       	brne	.+64     	; 0x126de <set_active_device+0x192>
   1269e:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   126a2:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   126a6:	9a 01       	movw	r18, r20
   126a8:	21 70       	andi	r18, 0x01	; 1
   126aa:	33 27       	eor	r19, r19
                printf("set_active_device: index: %d type:%d:%s, state == NULL\n",
   126ac:	40 ff       	sbrs	r20, 0
   126ae:	52 c0       	rjmp	.+164    	; 0x12754 <set_active_device+0x208>
   126b0:	06 df       	rcall	.-500    	; 0x124be <type_to_str>
   126b2:	9f 93       	push	r25
   126b4:	8f 93       	push	r24
   126b6:	1f 92       	push	r1
   126b8:	1f 93       	push	r17
   126ba:	df 93       	push	r29
   126bc:	cf 93       	push	r28
   126be:	87 e2       	ldi	r24, 0x27	; 39
   126c0:	9e e1       	ldi	r25, 0x1E	; 30
   126c2:	1f 92       	push	r1
   126c4:	9f 93       	push	r25
   126c6:	8f 93       	push	r24
   126c8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   126cc:	8d b7       	in	r24, 0x3d	; 61
   126ce:	9e b7       	in	r25, 0x3e	; 62
   126d0:	09 96       	adiw	r24, 0x09	; 9
   126d2:	0f b6       	in	r0, 0x3f	; 63
   126d4:	f8 94       	cli
   126d6:	9e bf       	out	0x3e, r25	; 62
   126d8:	0f be       	out	0x3f, r0	; 63
   126da:	8d bf       	out	0x3d, r24	; 61
                     index,type,type_to_str(type));
            return(0);
        }
#ifdef AMIGO
        if(type == AMIGO_TYPE)
   126dc:	39 c0       	rjmp	.+114    	; 0x12750 <set_active_device+0x204>
   126de:	81 30       	cpi	r24, 0x01	; 1
   126e0:	91 05       	cpc	r25, r1
        {
            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   126e2:	49 f4       	brne	.+18     	; 0x126f6 <set_active_device+0x1aa>
   126e4:	30 93 64 18 	sts	0x1864, r19	; 0x801864 <AMIGOp+0x1>
   126e8:	20 93 63 18 	sts	0x1863, r18	; 0x801863 <AMIGOp>
            AMIGOs = (AMIGOStateType *) Devices[index].state;
   126ec:	50 93 62 18 	sts	0x1862, r21	; 0x801862 <AMIGOs+0x1>
   126f0:	40 93 61 18 	sts	0x1861, r20	; 0x801861 <AMIGOs>
            return(1);
        }
#endif
        if(type == SS80_TYPE)
   126f4:	0b c0       	rjmp	.+22     	; 0x1270c <set_active_device+0x1c0>
   126f6:	83 30       	cpi	r24, 0x03	; 3
   126f8:	91 05       	cpc	r25, r1
        {
            SS80p = (SS80DiskType *) Devices[index].dev;
   126fa:	59 f4       	brne	.+22     	; 0x12712 <set_active_device+0x1c6>
   126fc:	30 93 68 18 	sts	0x1868, r19	; 0x801868 <SS80p+0x1>
   12700:	20 93 67 18 	sts	0x1867, r18	; 0x801867 <SS80p>
            SS80s = (SS80StateType *) Devices[index].state;
   12704:	50 93 66 18 	sts	0x1866, r21	; 0x801866 <SS80s+0x1>
   12708:	40 93 65 18 	sts	0x1865, r20	; 0x801865 <SS80s>
            return(1);
   1270c:	21 e0       	ldi	r18, 0x01	; 1
   1270e:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    if(debuglevel & 1)
   12710:	21 c0       	rjmp	.+66     	; 0x12754 <set_active_device+0x208>
   12712:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   12716:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1271a:	9a 01       	movw	r18, r20
   1271c:	21 70       	andi	r18, 0x01	; 1
   1271e:	33 27       	eor	r19, r19
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
   12720:	40 ff       	sbrs	r20, 0
   12722:	18 c0       	rjmp	.+48     	; 0x12754 <set_active_device+0x208>
   12724:	cc de       	rcall	.-616    	; 0x124be <type_to_str>
   12726:	9f 93       	push	r25
   12728:	8f 93       	push	r24
   1272a:	1f 92       	push	r1
   1272c:	1f 93       	push	r17
   1272e:	df 93       	push	r29
   12730:	cf 93       	push	r28
   12732:	8c ef       	ldi	r24, 0xFC	; 252
   12734:	9d e1       	ldi	r25, 0x1D	; 29
   12736:	1f 92       	push	r1
   12738:	9f 93       	push	r25
   1273a:	8f 93       	push	r24
   1273c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   12740:	8d b7       	in	r24, 0x3d	; 61
   12742:	9e b7       	in	r25, 0x3e	; 62
   12744:	09 96       	adiw	r24, 0x09	; 9
   12746:	0f b6       	in	r0, 0x3f	; 63
   12748:	f8 94       	cli
   1274a:	9e bf       	out	0x3e, r25	; 62
   1274c:	0f be       	out	0x3f, r0	; 63

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
    {
        return(0);
   1274e:	8d bf       	out	0x3d, r24	; 61
   12750:	20 e0       	ldi	r18, 0x00	; 0
    }
    if(debuglevel & 1)
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
            index,type,type_to_str(type));
    return(0);
}
   12752:	30 e0       	ldi	r19, 0x00	; 0
   12754:	c9 01       	movw	r24, r18
   12756:	df 91       	pop	r29
   12758:	cf 91       	pop	r28
   1275a:	1f 91       	pop	r17
   1275c:	08 95       	ret

0001275e <SS80_Set_Defaults>:
///@brief Set Default Values for a new SS80 Device IF defaults have been defined
/// Most values in the CONTROLER and UNIT are defaults that should not need to be specified
/// Note all of the values are zeroed on allocation including strings
///@return void
void SS80_Set_Defaults(int index)
{
   1275e:	0f 93       	push	r16
   12760:	1f 93       	push	r17
   12762:	cf 93       	push	r28
   12764:	df 93       	push	r29
   12766:	ec 01       	movw	r28, r24
	int defindex = find_type(SS80_DEFAULT_TYPE);
   12768:	82 e0       	ldi	r24, 0x02	; 2
   1276a:	90 e0       	ldi	r25, 0x00	; 0
   1276c:	85 de       	rcall	.-758    	; 0x12478 <find_type>
	SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
	SS80DiskType *SS80DEFAULTp;

	if(defindex < 0 )
   1276e:	97 fd       	sbrc	r25, 7
   12770:	88 c0       	rjmp	.+272    	; 0x12882 <SS80_Set_Defaults+0x124>
/// Note all of the values are zeroed on allocation including strings
///@return void
void SS80_Set_Defaults(int index)
{
	int defindex = find_type(SS80_DEFAULT_TYPE);
	SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   12772:	2b e2       	ldi	r18, 0x2B	; 43
   12774:	2c 9f       	mul	r18, r28
   12776:	f0 01       	movw	r30, r0
   12778:	2d 9f       	mul	r18, r29
   1277a:	f0 0d       	add	r31, r0
   1277c:	11 24       	eor	r1, r1
   1277e:	e4 51       	subi	r30, 0x14	; 20
   12780:	f2 4e       	sbci	r31, 0xE2	; 226
   12782:	c7 a1       	ldd	r28, Z+39	; 0x27
   12784:	d0 a5       	ldd	r29, Z+40	; 0x28
	SS80DiskType *SS80DEFAULTp;

	if(defindex < 0 )
		return;

	SS80DEFAULTp = (SS80DiskType *) Devices[defindex].dev;
   12786:	28 9f       	mul	r18, r24
   12788:	f0 01       	movw	r30, r0
   1278a:	29 9f       	mul	r18, r25
   1278c:	f0 0d       	add	r31, r0
   1278e:	11 24       	eor	r1, r1
   12790:	e4 51       	subi	r30, 0x14	; 20
   12792:	f2 4e       	sbci	r31, 0xE2	; 226
   12794:	07 a1       	ldd	r16, Z+39	; 0x27
   12796:	10 a5       	ldd	r17, Z+40	; 0x28

	SS80p->HEADER.ADDRESS				= SS80DEFAULTp->HEADER.ADDRESS;
   12798:	f8 01       	movw	r30, r16
   1279a:	80 81       	ld	r24, Z
   1279c:	88 83       	st	Y, r24
	SS80p->HEADER.PPR					= SS80DEFAULTp->HEADER.PPR;
   1279e:	81 81       	ldd	r24, Z+1	; 0x01
   127a0:	89 83       	std	Y+1, r24	; 0x01
	strncpy(SS80p->HEADER.NAME,SS80DEFAULTp->HEADER.NAME,sizeof(SS80p->HEADER.NAME)-1);
   127a2:	b8 01       	movw	r22, r16
   127a4:	6e 5f       	subi	r22, 0xFE	; 254
   127a6:	7f 4f       	sbci	r23, 0xFF	; 255
   127a8:	40 e2       	ldi	r20, 0x20	; 32
   127aa:	50 e0       	ldi	r21, 0x00	; 0
   127ac:	ce 01       	movw	r24, r28
   127ae:	02 96       	adiw	r24, 0x02	; 2
   127b0:	0e 94 ac 31 	call	0x6358	; 0x6358 <strncpy>

	SS80p->CONFIG.ID					= SS80DEFAULTp->CONFIG.ID;
   127b4:	f8 01       	movw	r30, r16
   127b6:	83 a1       	ldd	r24, Z+35	; 0x23
   127b8:	94 a1       	ldd	r25, Z+36	; 0x24
   127ba:	9c a3       	std	Y+36, r25	; 0x24
   127bc:	8b a3       	std	Y+35, r24	; 0x23
	SS80p->CONTROLLER.UNITS_INSTALLED	= SS80DEFAULTp->CONTROLLER.UNITS_INSTALLED;
   127be:	85 a1       	ldd	r24, Z+37	; 0x25
   127c0:	96 a1       	ldd	r25, Z+38	; 0x26
   127c2:	9e a3       	std	Y+38, r25	; 0x26
   127c4:	8d a3       	std	Y+37, r24	; 0x25
	SS80p->CONTROLLER.TRANSFER_RATE		= SS80DEFAULTp->CONTROLLER.TRANSFER_RATE;
   127c6:	87 a1       	ldd	r24, Z+39	; 0x27
   127c8:	90 a5       	ldd	r25, Z+40	; 0x28
   127ca:	98 a7       	std	Y+40, r25	; 0x28
   127cc:	8f a3       	std	Y+39, r24	; 0x27
	SS80p->CONTROLLER.TYPE				= SS80DEFAULTp->CONTROLLER.TYPE;
   127ce:	81 a5       	ldd	r24, Z+41	; 0x29
   127d0:	89 a7       	std	Y+41, r24	; 0x29

	SS80p->UNIT.UNIT_TYPE				= SS80DEFAULTp->UNIT.UNIT_TYPE;
   127d2:	82 a5       	ldd	r24, Z+42	; 0x2a
   127d4:	8a a7       	std	Y+42, r24	; 0x2a
	SS80p->UNIT.DEVICE_NUMBER			= SS80DEFAULTp->UNIT.DEVICE_NUMBER;
   127d6:	83 a5       	ldd	r24, Z+43	; 0x2b
   127d8:	94 a5       	ldd	r25, Z+44	; 0x2c
   127da:	a5 a5       	ldd	r26, Z+45	; 0x2d
   127dc:	b6 a5       	ldd	r27, Z+46	; 0x2e
   127de:	8b a7       	std	Y+43, r24	; 0x2b
   127e0:	9c a7       	std	Y+44, r25	; 0x2c
   127e2:	ad a7       	std	Y+45, r26	; 0x2d
   127e4:	be a7       	std	Y+46, r27	; 0x2e
	SS80p->UNIT.BYTES_PER_BLOCK			= SS80DEFAULTp->UNIT.BYTES_PER_BLOCK;
   127e6:	87 a5       	ldd	r24, Z+47	; 0x2f
   127e8:	90 a9       	ldd	r25, Z+48	; 0x30
   127ea:	98 ab       	std	Y+48, r25	; 0x30
   127ec:	8f a7       	std	Y+47, r24	; 0x2f
	SS80p->UNIT.BUFFERED_BLOCKS			= SS80DEFAULTp->UNIT.BUFFERED_BLOCKS;
   127ee:	81 a9       	ldd	r24, Z+49	; 0x31
   127f0:	89 ab       	std	Y+49, r24	; 0x31
	SS80p->UNIT.BURST_SIZE				= SS80DEFAULTp->UNIT.BURST_SIZE;
   127f2:	82 a9       	ldd	r24, Z+50	; 0x32
   127f4:	8a ab       	std	Y+50, r24	; 0x32
	SS80p->UNIT.BLOCK_TIME				= SS80DEFAULTp->UNIT.BLOCK_TIME;
   127f6:	83 a9       	ldd	r24, Z+51	; 0x33
   127f8:	94 a9       	ldd	r25, Z+52	; 0x34
   127fa:	9c ab       	std	Y+52, r25	; 0x34
   127fc:	8b ab       	std	Y+51, r24	; 0x33
	SS80p->UNIT.CONTINOUS_TRANSFER_RATE	= SS80DEFAULTp->UNIT.CONTINOUS_TRANSFER_RATE;
   127fe:	85 a9       	ldd	r24, Z+53	; 0x35
   12800:	96 a9       	ldd	r25, Z+54	; 0x36
   12802:	9e ab       	std	Y+54, r25	; 0x36
   12804:	8d ab       	std	Y+53, r24	; 0x35
	SS80p->UNIT.OPTIMAL_RETRY_TIME		= SS80DEFAULTp->UNIT.OPTIMAL_RETRY_TIME;
   12806:	87 a9       	ldd	r24, Z+55	; 0x37
   12808:	90 ad       	ldd	r25, Z+56	; 0x38
   1280a:	98 af       	std	Y+56, r25	; 0x38
   1280c:	8f ab       	std	Y+55, r24	; 0x37
	SS80p->UNIT.ACCESS_TIME				= SS80DEFAULTp->UNIT.ACCESS_TIME;
   1280e:	81 ad       	ldd	r24, Z+57	; 0x39
   12810:	92 ad       	ldd	r25, Z+58	; 0x3a
   12812:	9a af       	std	Y+58, r25	; 0x3a
   12814:	89 af       	std	Y+57, r24	; 0x39
	SS80p->UNIT.MAXIMUM_INTERLEAVE		= SS80DEFAULTp->UNIT.MAXIMUM_INTERLEAVE;
   12816:	83 ad       	ldd	r24, Z+59	; 0x3b
   12818:	8b af       	std	Y+59, r24	; 0x3b
	SS80p->UNIT.FIXED_VOLUMES			= SS80DEFAULTp->UNIT.FIXED_VOLUMES;
   1281a:	84 ad       	ldd	r24, Z+60	; 0x3c
   1281c:	8c af       	std	Y+60, r24	; 0x3c

	SS80p->VOLUME.MAX_CYLINDER			= SS80DEFAULTp->VOLUME.MAX_CYLINDER;
   1281e:	fe 96       	adiw	r30, 0x3e	; 62
   12820:	80 81       	ld	r24, Z
   12822:	91 81       	ldd	r25, Z+1	; 0x01
   12824:	a2 81       	ldd	r26, Z+2	; 0x02
   12826:	b3 81       	ldd	r27, Z+3	; 0x03
   12828:	fe 01       	movw	r30, r28
   1282a:	fe 96       	adiw	r30, 0x3e	; 62
   1282c:	80 83       	st	Z, r24
   1282e:	91 83       	std	Z+1, r25	; 0x01
   12830:	a2 83       	std	Z+2, r26	; 0x02
   12832:	b3 83       	std	Z+3, r27	; 0x03
	SS80p->VOLUME.MAX_HEAD				= SS80DEFAULTp->VOLUME.MAX_HEAD;
   12834:	f8 01       	movw	r30, r16
   12836:	ee 5b       	subi	r30, 0xBE	; 190
   12838:	ff 4f       	sbci	r31, 0xFF	; 255
   1283a:	80 81       	ld	r24, Z
   1283c:	fe 01       	movw	r30, r28
   1283e:	ee 5b       	subi	r30, 0xBE	; 190
   12840:	ff 4f       	sbci	r31, 0xFF	; 255
   12842:	80 83       	st	Z, r24
	SS80p->VOLUME.MAX_SECTOR			= SS80DEFAULTp->VOLUME.MAX_SECTOR;
   12844:	f8 01       	movw	r30, r16
   12846:	ed 5b       	subi	r30, 0xBD	; 189
   12848:	ff 4f       	sbci	r31, 0xFF	; 255
   1284a:	80 81       	ld	r24, Z
   1284c:	91 81       	ldd	r25, Z+1	; 0x01
   1284e:	fe 01       	movw	r30, r28
   12850:	ed 5b       	subi	r30, 0xBD	; 189
   12852:	ff 4f       	sbci	r31, 0xFF	; 255
   12854:	91 83       	std	Z+1, r25	; 0x01
   12856:	80 83       	st	Z, r24
	SS80p->VOLUME.MAX_BLOCK_NUMBER		= SS80DEFAULTp->VOLUME.MAX_BLOCK_NUMBER;
   12858:	f8 01       	movw	r30, r16
   1285a:	eb 5b       	subi	r30, 0xBB	; 187
   1285c:	ff 4f       	sbci	r31, 0xFF	; 255
   1285e:	80 81       	ld	r24, Z
   12860:	91 81       	ldd	r25, Z+1	; 0x01
   12862:	a2 81       	ldd	r26, Z+2	; 0x02
   12864:	b3 81       	ldd	r27, Z+3	; 0x03
   12866:	fe 01       	movw	r30, r28
   12868:	eb 5b       	subi	r30, 0xBB	; 187
   1286a:	ff 4f       	sbci	r31, 0xFF	; 255
   1286c:	80 83       	st	Z, r24
   1286e:	91 83       	std	Z+1, r25	; 0x01
   12870:	a2 83       	std	Z+2, r26	; 0x02
   12872:	b3 83       	std	Z+3, r27	; 0x03
	SS80p->VOLUME.INTERLEAVE			= SS80DEFAULTp->VOLUME.INTERLEAVE;
   12874:	f8 01       	movw	r30, r16
   12876:	e7 5b       	subi	r30, 0xB7	; 183
   12878:	ff 4f       	sbci	r31, 0xFF	; 255
   1287a:	80 81       	ld	r24, Z
   1287c:	c7 5b       	subi	r28, 0xB7	; 183
   1287e:	df 4f       	sbci	r29, 0xFF	; 255
   12880:	88 83       	st	Y, r24
};
   12882:	df 91       	pop	r29
   12884:	cf 91       	pop	r28
   12886:	1f 91       	pop	r17
   12888:	0f 91       	pop	r16
   1288a:	08 95       	ret

0001288c <alloc_device>:

///@brief Allocate a Device structure for a disk or printer
///@param type: disk type
///@return Devices[] index on sucess or -1
int alloc_device(int type)
{
   1288c:	0f 93       	push	r16
   1288e:	1f 93       	push	r17
   12890:	cf 93       	push	r28
   12892:	df 93       	push	r29
    int ind;
    int index = -1;

    // Find a free slot
    ind = find_free();
   12894:	ec 01       	movw	r28, r24
   12896:	2c de       	rcall	.-936    	; 0x124f0 <find_free>
    if(ind == -1)
   12898:	8c 01       	movw	r16, r24
   1289a:	0f 3f       	cpi	r16, 0xFF	; 255
   1289c:	8f ef       	ldi	r24, 0xFF	; 255
   1289e:	18 07       	cpc	r17, r24
    {
        if(debuglevel & 1)
   128a0:	99 f4       	brne	.+38     	; 0x128c8 <alloc_device+0x3c>
   128a2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   128a6:	80 ff       	sbrs	r24, 0
            printf("alloc_device: Device table is full\n", type);
   128a8:	9e c0       	rjmp	.+316    	; 0x129e6 <alloc_device+0x15a>
   128aa:	df 93       	push	r29
   128ac:	cf 93       	push	r28
   128ae:	88 ed       	ldi	r24, 0xD8	; 216
   128b0:	9d e1       	ldi	r25, 0x1D	; 29
   128b2:	1f 92       	push	r1
   128b4:	9f 93       	push	r25
   128b6:	8f 93       	push	r24
   128b8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   128bc:	0f 90       	pop	r0
   128be:	0f 90       	pop	r0
   128c0:	0f 90       	pop	r0
   128c2:	0f 90       	pop	r0
   128c4:	0f 90       	pop	r0
        return(ind);
    }

    switch(type)
   128c6:	8f c0       	rjmp	.+286    	; 0x129e6 <alloc_device+0x15a>
   128c8:	c2 30       	cpi	r28, 0x02	; 2
   128ca:	d1 05       	cpc	r29, r1
   128cc:	c1 f1       	breq	.+112    	; 0x1293e <alloc_device+0xb2>
   128ce:	dc f4       	brge	.+54     	; 0x12906 <alloc_device+0x7a>
   128d0:	c1 30       	cpi	r28, 0x01	; 1
   128d2:	d1 05       	cpc	r29, r1
   128d4:	09 f0       	breq	.+2      	; 0x128d8 <alloc_device+0x4c>
            index = ind;
			SS80_Set_Defaults(index);	// Set any defaults we may have
            break;
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
   128d6:	6c c0       	rjmp	.+216    	; 0x129b0 <alloc_device+0x124>
   128d8:	8b e2       	ldi	r24, 0x2B	; 43
   128da:	80 9f       	mul	r24, r16
   128dc:	e0 01       	movw	r28, r0
   128de:	81 9f       	mul	r24, r17
   128e0:	d0 0d       	add	r29, r0
   128e2:	11 24       	eor	r1, r1
   128e4:	c4 51       	subi	r28, 0x14	; 20
   128e6:	d2 4e       	sbci	r29, 0xE2	; 226
   128e8:	81 e0       	ldi	r24, 0x01	; 1
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
   128ea:	88 83       	st	Y, r24
   128ec:	61 e0       	ldi	r22, 0x01	; 1
   128ee:	70 e0       	ldi	r23, 0x00	; 0
   128f0:	84 e3       	ldi	r24, 0x34	; 52
   128f2:	90 e0       	ldi	r25, 0x00	; 0
   128f4:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   128f8:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   128fa:	8f a3       	std	Y+39, r24	; 0x27
   128fc:	61 e0       	ldi	r22, 0x01	; 1
   128fe:	70 e0       	ldi	r23, 0x00	; 0
   12900:	88 e1       	ldi	r24, 0x18	; 24
   12902:	90 e0       	ldi	r25, 0x00	; 0
        if(debuglevel & 1)
            printf("alloc_device: Device table is full\n", type);
        return(ind);
    }

    switch(type)
   12904:	50 c0       	rjmp	.+160    	; 0x129a6 <alloc_device+0x11a>
   12906:	c3 30       	cpi	r28, 0x03	; 3
   12908:	d1 05       	cpc	r29, r1
   1290a:	81 f1       	breq	.+96     	; 0x1296c <alloc_device+0xe0>
   1290c:	c4 30       	cpi	r28, 0x04	; 4
   1290e:	d1 05       	cpc	r29, r1
   12910:	09 f0       	breq	.+2      	; 0x12914 <alloc_device+0x88>
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
            index = ind;
            break;
#endif
        case PRINTER_TYPE:
            Devices[ind].TYPE = type;
   12912:	4e c0       	rjmp	.+156    	; 0x129b0 <alloc_device+0x124>
   12914:	8b e2       	ldi	r24, 0x2B	; 43
   12916:	80 9f       	mul	r24, r16
   12918:	e0 01       	movw	r28, r0
   1291a:	81 9f       	mul	r24, r17
   1291c:	d0 0d       	add	r29, r0
   1291e:	11 24       	eor	r1, r1
   12920:	c4 51       	subi	r28, 0x14	; 20
   12922:	d2 4e       	sbci	r29, 0xE2	; 226
   12924:	84 e0       	ldi	r24, 0x04	; 4
            Devices[ind].dev = safecalloc(sizeof(PRINTERDeviceType)+7,1);
   12926:	88 83       	st	Y, r24
   12928:	61 e0       	ldi	r22, 0x01	; 1
   1292a:	70 e0       	ldi	r23, 0x00	; 0
   1292c:	8a e2       	ldi	r24, 0x2A	; 42
   1292e:	90 e0       	ldi	r25, 0x00	; 0
   12930:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   12934:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = NULL;
   12936:	8f a3       	std	Y+39, r24	; 0x27
   12938:	1a a6       	std	Y+42, r1	; 0x2a
            index = ind;
            break;
   1293a:	19 a6       	std	Y+41, r1	; 0x29

    switch(type)
    {
		// Same as SS80 type but sets initial defaults for any remaining SS80 drives
        case SS80_DEFAULT_TYPE:
            Devices[ind].TYPE = type;
   1293c:	54 c0       	rjmp	.+168    	; 0x129e6 <alloc_device+0x15a>
   1293e:	8b e2       	ldi	r24, 0x2B	; 43
   12940:	80 9f       	mul	r24, r16
   12942:	e0 01       	movw	r28, r0
   12944:	81 9f       	mul	r24, r17
   12946:	d0 0d       	add	r29, r0
   12948:	11 24       	eor	r1, r1
   1294a:	c4 51       	subi	r28, 0x14	; 20
   1294c:	d2 4e       	sbci	r29, 0xE2	; 226
   1294e:	82 e0       	ldi	r24, 0x02	; 2
            Devices[ind].dev = safecalloc(sizeof(SS80DiskType)+7,1);
   12950:	88 83       	st	Y, r24
   12952:	61 e0       	ldi	r22, 0x01	; 1
   12954:	70 e0       	ldi	r23, 0x00	; 0
   12956:	81 e5       	ldi	r24, 0x51	; 81
   12958:	90 e0       	ldi	r25, 0x00	; 0
   1295a:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   1295e:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
   12960:	8f a3       	std	Y+39, r24	; 0x27
   12962:	61 e0       	ldi	r22, 0x01	; 1
   12964:	70 e0       	ldi	r23, 0x00	; 0
   12966:	86 e1       	ldi	r24, 0x16	; 22
   12968:	90 e0       	ldi	r25, 0x00	; 0
            index = ind;
            break;
        case SS80_TYPE:
            Devices[ind].TYPE = type;
   1296a:	1d c0       	rjmp	.+58     	; 0x129a6 <alloc_device+0x11a>
   1296c:	8b e2       	ldi	r24, 0x2B	; 43
   1296e:	80 9f       	mul	r24, r16
   12970:	e0 01       	movw	r28, r0
   12972:	81 9f       	mul	r24, r17
   12974:	d0 0d       	add	r29, r0
   12976:	11 24       	eor	r1, r1
   12978:	c4 51       	subi	r28, 0x14	; 20
   1297a:	d2 4e       	sbci	r29, 0xE2	; 226
   1297c:	83 e0       	ldi	r24, 0x03	; 3
            Devices[ind].dev = safecalloc(sizeof(SS80DiskType)+7,1);
   1297e:	88 83       	st	Y, r24
   12980:	61 e0       	ldi	r22, 0x01	; 1
   12982:	70 e0       	ldi	r23, 0x00	; 0
   12984:	81 e5       	ldi	r24, 0x51	; 81
   12986:	90 e0       	ldi	r25, 0x00	; 0
   12988:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   1298c:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
   1298e:	8f a3       	std	Y+39, r24	; 0x27
   12990:	61 e0       	ldi	r22, 0x01	; 1
   12992:	70 e0       	ldi	r23, 0x00	; 0
   12994:	86 e1       	ldi	r24, 0x16	; 22
   12996:	90 e0       	ldi	r25, 0x00	; 0
   12998:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
            index = ind;
			SS80_Set_Defaults(index);	// Set any defaults we may have
   1299c:	9a a7       	std	Y+42, r25	; 0x2a
   1299e:	89 a7       	std	Y+41, r24	; 0x29
            break;
   129a0:	c8 01       	movw	r24, r16
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   129a2:	dd de       	rcall	.-582    	; 0x1275e <SS80_Set_Defaults>
   129a4:	20 c0       	rjmp	.+64     	; 0x129e6 <alloc_device+0x15a>
   129a6:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
            index = ind;
            break;
   129aa:	9a a7       	std	Y+42, r25	; 0x2a
            Devices[ind].dev = safecalloc(sizeof(PRINTERDeviceType)+7,1);
            Devices[ind].state = NULL;
            index = ind;
            break;
        default:
            if(debuglevel & 1)
   129ac:	89 a7       	std	Y+41, r24	; 0x29
   129ae:	1b c0       	rjmp	.+54     	; 0x129e6 <alloc_device+0x15a>
   129b0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("alloc_device: invalid type:%d:%s\n", type,type_to_str(type));
   129b4:	80 ff       	sbrs	r24, 0
   129b6:	15 c0       	rjmp	.+42     	; 0x129e2 <alloc_device+0x156>
   129b8:	ce 01       	movw	r24, r28
   129ba:	81 dd       	rcall	.-1278   	; 0x124be <type_to_str>
   129bc:	9f 93       	push	r25
   129be:	8f 93       	push	r24
   129c0:	df 93       	push	r29
   129c2:	cf 93       	push	r28
   129c4:	86 eb       	ldi	r24, 0xB6	; 182
   129c6:	9d e1       	ldi	r25, 0x1D	; 29
   129c8:	1f 92       	push	r1
   129ca:	9f 93       	push	r25
   129cc:	8f 93       	push	r24
   129ce:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   129d2:	8d b7       	in	r24, 0x3d	; 61
   129d4:	9e b7       	in	r25, 0x3e	; 62
   129d6:	07 96       	adiw	r24, 0x07	; 7
   129d8:	0f b6       	in	r0, 0x3f	; 63
   129da:	f8 94       	cli
   129dc:	9e bf       	out	0x3e, r25	; 62
   129de:	0f be       	out	0x3f, r0	; 63
   129e0:	8d bf       	out	0x3d, r24	; 61
            break;
    }
    return(index);
}
   129e2:	0f ef       	ldi	r16, 0xFF	; 255
   129e4:	1f ef       	ldi	r17, 0xFF	; 255
   129e6:	c8 01       	movw	r24, r16
   129e8:	df 91       	pop	r29
   129ea:	cf 91       	pop	r28
   129ec:	1f 91       	pop	r17
   129ee:	0f 91       	pop	r16
   129f0:	08 95       	ret

000129f2 <init_Devices>:

// =============================================
/// @brief Init Config Parser Stack
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
   129f2:	cf 93       	push	r28
   129f4:	df 93       	push	r29
    int i;
    stack_ind = 0;
   129f6:	10 92 76 18 	sts	0x1876, r1	; 0x801876 <stack_ind+0x1>
   129fa:	10 92 75 18 	sts	0x1875, r1	; 0x801875 <stack_ind>
   129fe:	ec ee       	ldi	r30, 0xEC	; 236
   12a00:	fd e1       	ldi	r31, 0x1D	; 29
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
        Devices[i].ADDRESS = 0;
        Devices[i].PPR = 0xff;
   12a02:	9f ef       	ldi	r25, 0xFF	; 255
        Devices[i].BLOCKS = 0;
        memset(Devices[i].model, 0, sizeof(Devices[i].model) );
   12a04:	80 e2       	ldi	r24, 0x20	; 32
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
   12a06:	10 82       	st	Z, r1
        Devices[i].ADDRESS = 0;
   12a08:	11 82       	std	Z+1, r1	; 0x01
        Devices[i].PPR = 0xff;
   12a0a:	92 83       	std	Z+2, r25	; 0x02
        Devices[i].BLOCKS = 0;
   12a0c:	13 82       	std	Z+3, r1	; 0x03
   12a0e:	14 82       	std	Z+4, r1	; 0x04
   12a10:	15 82       	std	Z+5, r1	; 0x05
   12a12:	16 82       	std	Z+6, r1	; 0x06
        memset(Devices[i].model, 0, sizeof(Devices[i].model) );
   12a14:	df 01       	movw	r26, r30
   12a16:	17 96       	adiw	r26, 0x07	; 7
   12a18:	ed 01       	movw	r28, r26
   12a1a:	28 2f       	mov	r18, r24
   12a1c:	19 92       	st	Y+, r1
   12a1e:	2a 95       	dec	r18
   12a20:	e9 f7       	brne	.-6      	; 0x12a1c <init_Devices+0x2a>
        Devices[i].dev = NULL;
   12a22:	10 a6       	std	Z+40, r1	; 0x28
   12a24:	17 a2       	std	Z+39, r1	; 0x27
        Devices[i].state = NULL;
   12a26:	12 a6       	std	Z+42, r1	; 0x2a
   12a28:	11 a6       	std	Z+41, r1	; 0x29
   12a2a:	bb 96       	adiw	r30, 0x2b	; 43
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
   12a2c:	cf e1       	ldi	r28, 0x1F	; 31
   12a2e:	e0 3f       	cpi	r30, 0xF0	; 240
   12a30:	fc 07       	cpc	r31, r28
   12a32:	49 f7       	brne	.-46     	; 0x12a06 <init_Devices+0x14>
        Devices[i].BLOCKS = 0;
        memset(Devices[i].model, 0, sizeof(Devices[i].model) );
        Devices[i].dev = NULL;
        Devices[i].state = NULL;
    }
}
   12a34:	df 91       	pop	r29
   12a36:	cf 91       	pop	r28
   12a38:	08 95       	ret

00012a3a <push_state>:
/// @brief Push Parser State
/// @param state: parser state
/// @return state
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
   12a3a:	20 91 75 18 	lds	r18, 0x1875	; 0x801875 <stack_ind>
   12a3e:	30 91 76 18 	lds	r19, 0x1876	; 0x801876 <stack_ind+0x1>
   12a42:	25 30       	cpi	r18, 0x05	; 5
   12a44:	31 05       	cpc	r19, r1
   12a46:	7c f4       	brge	.+30     	; 0x12a66 <push_state+0x2c>
        stack_p[stack_ind++] = state;
   12a48:	a9 01       	movw	r20, r18
   12a4a:	4f 5f       	subi	r20, 0xFF	; 255
   12a4c:	5f 4f       	sbci	r21, 0xFF	; 255
   12a4e:	50 93 76 18 	sts	0x1876, r21	; 0x801876 <stack_ind+0x1>
   12a52:	40 93 75 18 	sts	0x1875, r20	; 0x801875 <stack_ind>
   12a56:	22 0f       	add	r18, r18
   12a58:	33 1f       	adc	r19, r19
   12a5a:	f9 01       	movw	r30, r18
   12a5c:	e5 59       	subi	r30, 0x95	; 149
   12a5e:	f7 4e       	sbci	r31, 0xE7	; 231
   12a60:	80 83       	st	Z, r24
   12a62:	91 83       	std	Z+1, r25	; 0x01
    else
        return(START_STATE);
    return(state);
   12a64:	08 95       	ret
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
        stack_p[stack_ind++] = state;
    else
        return(START_STATE);
   12a66:	80 e0       	ldi	r24, 0x00	; 0
   12a68:	90 e0       	ldi	r25, 0x00	; 0
    return(state);
}
   12a6a:	08 95       	ret

00012a6c <pop_state>:
/// ===============================================
/// @brief Pop Parser State
/// @return state
int pop_state()
{
    if(stack_ind > 0)
   12a6c:	80 91 75 18 	lds	r24, 0x1875	; 0x801875 <stack_ind>
   12a70:	90 91 76 18 	lds	r25, 0x1876	; 0x801876 <stack_ind+0x1>
   12a74:	18 16       	cp	r1, r24
   12a76:	19 06       	cpc	r1, r25
   12a78:	6c f4       	brge	.+26     	; 0x12a94 <pop_state+0x28>
        return(stack_p[--stack_ind]);
   12a7a:	01 97       	sbiw	r24, 0x01	; 1
   12a7c:	90 93 76 18 	sts	0x1876, r25	; 0x801876 <stack_ind+0x1>
   12a80:	80 93 75 18 	sts	0x1875, r24	; 0x801875 <stack_ind>
   12a84:	88 0f       	add	r24, r24
   12a86:	99 1f       	adc	r25, r25
   12a88:	fc 01       	movw	r30, r24
   12a8a:	e5 59       	subi	r30, 0x95	; 149
   12a8c:	f7 4e       	sbci	r31, 0xE7	; 231
   12a8e:	80 81       	ld	r24, Z
   12a90:	91 81       	ldd	r25, Z+1	; 0x01
   12a92:	08 95       	ret
    else
        return(START_STATE);
   12a94:	80 e0       	ldi	r24, 0x00	; 0
   12a96:	90 e0       	ldi	r25, 0x00	; 0
}
   12a98:	08 95       	ret

00012a9a <assign_value>:
/// @param[in] maxval: maximum value
/// @param[in] *val: value to set
///
/// @return  1 is matched and value in range, 0 not matched or out of range
bool assign_value(char *str, uint32_t minval, uint32_t maxval, uint32_t *val)
{
   12a9a:	a0 e0       	ldi	r26, 0x00	; 0
   12a9c:	b0 e0       	ldi	r27, 0x00	; 0
   12a9e:	e3 e5       	ldi	r30, 0x53	; 83
   12aa0:	f5 e9       	ldi	r31, 0x95	; 149
   12aa2:	0c 94 30 e5 	jmp	0x1ca60	; 0x1ca60 <__prologue_saves__+0x4>
   12aa6:	2a 01       	movw	r4, r20
   12aa8:	3b 01       	movw	r6, r22
   12aaa:	48 01       	movw	r8, r16
   12aac:	59 01       	movw	r10, r18
   12aae:	87 01       	movw	r16, r14
    uint32_t tmp;
    int bad = 0;
    char *ptr;

    // Skip spaces before assignment
    ptr = skipspaces(str);
   12ab0:	0e 94 0b 32 	call	0x6416	; 0x6416 <skipspaces>
   12ab4:	ec 01       	movw	r28, r24
    // Skip optional '='
    if(*ptr == '=')
   12ab6:	88 81       	ld	r24, Y
   12ab8:	8d 33       	cpi	r24, 0x3D	; 61
   12aba:	29 f4       	brne	.+10     	; 0x12ac6 <assign_value+0x2c>
    {
        ++ptr;
        // skip spaces after assignment
        ptr = skipspaces(ptr);
   12abc:	ce 01       	movw	r24, r28
   12abe:	01 96       	adiw	r24, 0x01	; 1
   12ac0:	0e 94 0b 32 	call	0x6416	; 0x6416 <skipspaces>
   12ac4:	ec 01       	movw	r28, r24
    }
    if(!*ptr)
   12ac6:	88 81       	ld	r24, Y
   12ac8:	81 11       	cpse	r24, r1
   12aca:	17 c0       	rjmp	.+46     	; 0x12afa <assign_value+0x60>
    {
        if(debuglevel & 1)
   12acc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12ad0:	80 ff       	sbrs	r24, 0
   12ad2:	76 c0       	rjmp	.+236    	; 0x12bc0 <assign_value+0x126>
            printf("line:%d, missing value\n", lines);
   12ad4:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   12ad8:	8f 93       	push	r24
   12ada:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   12ade:	8f 93       	push	r24
   12ae0:	8e e9       	ldi	r24, 0x9E	; 158
   12ae2:	9d e1       	ldi	r25, 0x1D	; 29
   12ae4:	1f 92       	push	r1
   12ae6:	9f 93       	push	r25
   12ae8:	8f 93       	push	r24
   12aea:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   12aee:	0f 90       	pop	r0
   12af0:	0f 90       	pop	r0
   12af2:	0f 90       	pop	r0
   12af4:	0f 90       	pop	r0
   12af6:	0f 90       	pop	r0
   12af8:	63 c0       	rjmp	.+198    	; 0x12bc0 <assign_value+0x126>
        bad = 1;
    }
    if(!bad)
    {
        // FIXME detect bad numbers
        tmp = get_value(ptr);
   12afa:	ce 01       	movw	r24, r28
   12afc:	0e 94 c0 33 	call	0x6780	; 0x6780 <get_value>
   12b00:	6b 01       	movw	r12, r22
   12b02:	7c 01       	movw	r14, r24
        *val = tmp;
   12b04:	f8 01       	movw	r30, r16
   12b06:	60 83       	st	Z, r22
   12b08:	71 83       	std	Z+1, r23	; 0x01
   12b0a:	82 83       	std	Z+2, r24	; 0x02
   12b0c:	93 83       	std	Z+3, r25	; 0x03
        if((minval && (tmp < minval)))
   12b0e:	41 14       	cp	r4, r1
   12b10:	51 04       	cpc	r5, r1
   12b12:	61 04       	cpc	r6, r1
   12b14:	71 04       	cpc	r7, r1
   12b16:	39 f1       	breq	.+78     	; 0x12b66 <assign_value+0xcc>
   12b18:	c4 14       	cp	r12, r4
   12b1a:	d5 04       	cpc	r13, r5
   12b1c:	e6 04       	cpc	r14, r6
   12b1e:	f7 04       	cpc	r15, r7
   12b20:	10 f5       	brcc	.+68     	; 0x12b66 <assign_value+0xcc>
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
   12b22:	5f 92       	push	r5
   12b24:	4f 92       	push	r4
   12b26:	df 93       	push	r29
   12b28:	cf 93       	push	r28
   12b2a:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   12b2e:	8f 93       	push	r24
   12b30:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   12b34:	8f 93       	push	r24
   12b36:	8f e7       	ldi	r24, 0x7F	; 127
   12b38:	9d e1       	ldi	r25, 0x1D	; 29
   12b3a:	1f 92       	push	r1
   12b3c:	9f 93       	push	r25
   12b3e:	8f 93       	push	r24
   12b40:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            bad = 1;
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   12b44:	ed b7       	in	r30, 0x3d	; 61
   12b46:	fe b7       	in	r31, 0x3e	; 62
   12b48:	39 96       	adiw	r30, 0x09	; 9
   12b4a:	0f b6       	in	r0, 0x3f	; 63
   12b4c:	f8 94       	cli
   12b4e:	fe bf       	out	0x3e, r31	; 62
   12b50:	0f be       	out	0x3f, r0	; 63
   12b52:	ed bf       	out	0x3d, r30	; 61
   12b54:	ff ef       	ldi	r31, 0xFF	; 255
   12b56:	8f 16       	cp	r8, r31
   12b58:	9f 06       	cpc	r9, r31
   12b5a:	af 06       	cpc	r10, r31
   12b5c:	bf 06       	cpc	r11, r31
   12b5e:	81 f1       	breq	.+96     	; 0x12bc0 <assign_value+0x126>
        tmp = get_value(ptr);
        *val = tmp;
        if((minval && (tmp < minval)))
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
            bad = 1;
   12b60:	81 e0       	ldi	r24, 0x01	; 1
   12b62:	90 e0       	ldi	r25, 0x00	; 0
   12b64:	08 c0       	rjmp	.+16     	; 0x12b76 <assign_value+0xdc>
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   12b66:	ff ef       	ldi	r31, 0xFF	; 255
   12b68:	8f 16       	cp	r8, r31
   12b6a:	9f 06       	cpc	r9, r31
   12b6c:	af 06       	cpc	r10, r31
   12b6e:	bf 06       	cpc	r11, r31
   12b70:	21 f1       	breq	.+72     	; 0x12bba <assign_value+0x120>
   12b72:	80 e0       	ldi	r24, 0x00	; 0
   12b74:	90 e0       	ldi	r25, 0x00	; 0
   12b76:	8c 14       	cp	r8, r12
   12b78:	9d 04       	cpc	r9, r13
   12b7a:	ae 04       	cpc	r10, r14
   12b7c:	bf 04       	cpc	r11, r15
   12b7e:	d0 f4       	brcc	.+52     	; 0x12bb4 <assign_value+0x11a>
        {
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
   12b80:	9f 92       	push	r9
   12b82:	8f 92       	push	r8
   12b84:	df 93       	push	r29
   12b86:	cf 93       	push	r28
   12b88:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   12b8c:	8f 93       	push	r24
   12b8e:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   12b92:	8f 93       	push	r24
   12b94:	80 e6       	ldi	r24, 0x60	; 96
   12b96:	9d e1       	ldi	r25, 0x1D	; 29
   12b98:	1f 92       	push	r1
   12b9a:	9f 93       	push	r25
   12b9c:	8f 93       	push	r24
   12b9e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   12ba2:	ed b7       	in	r30, 0x3d	; 61
   12ba4:	fe b7       	in	r31, 0x3e	; 62
   12ba6:	39 96       	adiw	r30, 0x09	; 9
   12ba8:	0f b6       	in	r0, 0x3f	; 63
   12baa:	f8 94       	cli
   12bac:	fe bf       	out	0x3e, r31	; 62
   12bae:	0f be       	out	0x3f, r0	; 63
   12bb0:	ed bf       	out	0x3d, r30	; 61
   12bb2:	06 c0       	rjmp	.+12     	; 0x12bc0 <assign_value+0x126>
            bad = 1;
        }
    }
    if(bad)
        return(0);
   12bb4:	f1 e0       	ldi	r31, 0x01	; 1
   12bb6:	8f 27       	eor	r24, r31
   12bb8:	05 c0       	rjmp	.+10     	; 0x12bc4 <assign_value+0x12a>
    return(1);
   12bba:	81 e0       	ldi	r24, 0x01	; 1
   12bbc:	90 e0       	ldi	r25, 0x00	; 0
   12bbe:	02 c0       	rjmp	.+4      	; 0x12bc4 <assign_value+0x12a>
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
            bad = 1;
        }
    }
    if(bad)
        return(0);
   12bc0:	80 e0       	ldi	r24, 0x00	; 0
   12bc2:	90 e0       	ldi	r25, 0x00	; 0
    return(1);
}
   12bc4:	cd b7       	in	r28, 0x3d	; 61
   12bc6:	de b7       	in	r29, 0x3e	; 62
   12bc8:	e0 e1       	ldi	r30, 0x10	; 16
   12bca:	0c 94 4c e5 	jmp	0x1ca98	; 0x1ca98 <__epilogue_restores__+0x4>

00012bce <set_Config_Defaults>:
/// ===============================================
///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   12bce:	08 95       	ret

00012bd0 <hpdir_set_device>:
{
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
#endif
	if(Devices[index].TYPE == SS80_TYPE)
   12bd0:	2b e2       	ldi	r18, 0x2B	; 43
   12bd2:	28 9f       	mul	r18, r24
   12bd4:	f0 01       	movw	r30, r0
   12bd6:	29 9f       	mul	r18, r25
   12bd8:	f0 0d       	add	r31, r0
   12bda:	11 24       	eor	r1, r1
   12bdc:	e4 51       	subi	r30, 0x14	; 20
   12bde:	f2 4e       	sbci	r31, 0xE2	; 226
   12be0:	20 81       	ld	r18, Z
   12be2:	23 30       	cpi	r18, 0x03	; 3
   12be4:	e1 f5       	brne	.+120    	; 0x12c5e <hpdir_set_device+0x8e>
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
   12be6:	07 a0       	ldd	r0, Z+39	; 0x27
   12be8:	f0 a5       	ldd	r31, Z+40	; 0x28
   12bea:	e0 2d       	mov	r30, r0
		return;
	}

	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p->CONFIG.ID 				= hpdir.ID;
   12bec:	20 91 70 20 	lds	r18, 0x2070	; 0x802070 <hpdir+0x80>
   12bf0:	30 91 71 20 	lds	r19, 0x2071	; 0x802071 <hpdir+0x81>
   12bf4:	34 a3       	std	Z+36, r19	; 0x24
   12bf6:	23 a3       	std	Z+35, r18	; 0x23
		SS80p->UNIT.DEVICE_NUMBER 		= hpdir.DEVICE_NUMBER;
   12bf8:	40 91 7c 20 	lds	r20, 0x207C	; 0x80207c <hpdir+0x8c>
   12bfc:	50 91 7d 20 	lds	r21, 0x207D	; 0x80207d <hpdir+0x8d>
   12c00:	60 91 7e 20 	lds	r22, 0x207E	; 0x80207e <hpdir+0x8e>
   12c04:	70 91 7f 20 	lds	r23, 0x207F	; 0x80207f <hpdir+0x8f>
   12c08:	43 a7       	std	Z+43, r20	; 0x2b
   12c0a:	54 a7       	std	Z+44, r21	; 0x2c
   12c0c:	65 a7       	std	Z+45, r22	; 0x2d
   12c0e:	76 a7       	std	Z+46, r23	; 0x2e
		SS80p->UNIT.BYTES_PER_BLOCK 	= hpdir.BYTES_PER_SECTOR;
   12c10:	20 91 90 20 	lds	r18, 0x2090	; 0x802090 <hpdir+0xa0>
   12c14:	30 91 91 20 	lds	r19, 0x2091	; 0x802091 <hpdir+0xa1>
   12c18:	30 ab       	std	Z+48, r19	; 0x30
   12c1a:	27 a7       	std	Z+47, r18	; 0x2f

		// CHS NOT used in this emulator!
		SS80p->VOLUME.MAX_CYLINDER 		= 0;	// hpdir.CYLINDERS-1;
   12c1c:	df 01       	movw	r26, r30
   12c1e:	de 96       	adiw	r26, 0x3e	; 62
   12c20:	1d 92       	st	X+, r1
   12c22:	1d 92       	st	X+, r1
   12c24:	1d 92       	st	X+, r1
   12c26:	1c 92       	st	X, r1
   12c28:	13 97       	sbiw	r26, 0x03	; 3
		SS80p->VOLUME.MAX_HEAD 			= 0;	// hpdir.HEADS-1;
   12c2a:	14 96       	adiw	r26, 0x04	; 4
   12c2c:	1c 92       	st	X, r1
		SS80p->VOLUME.MAX_SECTOR 		= 0;	// hpdir.SECTORS-1;
   12c2e:	11 96       	adiw	r26, 0x01	; 1
   12c30:	1d 92       	st	X+, r1
   12c32:	1c 92       	st	X, r1

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
   12c34:	eb 5b       	subi	r30, 0xBB	; 187
   12c36:	ff 4f       	sbci	r31, 0xFF	; 255
   12c38:	40 91 9c 20 	lds	r20, 0x209C	; 0x80209c <hpdir+0xac>
   12c3c:	50 91 9d 20 	lds	r21, 0x209D	; 0x80209d <hpdir+0xad>
   12c40:	60 91 9e 20 	lds	r22, 0x209E	; 0x80209e <hpdir+0xae>
   12c44:	70 91 9f 20 	lds	r23, 0x209F	; 0x80209f <hpdir+0xaf>
   12c48:	41 50       	subi	r20, 0x01	; 1
   12c4a:	51 09       	sbc	r21, r1
   12c4c:	61 09       	sbc	r22, r1
   12c4e:	71 09       	sbc	r23, r1
   12c50:	40 83       	st	Z, r20
   12c52:	51 83       	std	Z+1, r21	; 0x01
   12c54:	62 83       	std	Z+2, r22	; 0x02
   12c56:	73 83       	std	Z+3, r23	; 0x03
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
   12c58:	e0 e0       	ldi	r30, 0x00	; 0
   12c5a:	f0 e0       	ldi	r31, 0x00	; 0
   12c5c:	11 c0       	rjmp	.+34     	; 0x12c80 <hpdir_set_device+0xb0>
	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
	}
#ifdef AMIGO
	else if(Devices[index].TYPE == AMIGO_TYPE)
   12c5e:	21 30       	cpi	r18, 0x01	; 1
   12c60:	21 f4       	brne	.+8      	; 0x12c6a <hpdir_set_device+0x9a>
	{
		AMIGOp = (AMIGODiskType *) Devices[index].dev;
   12c62:	07 a0       	ldd	r0, Z+39	; 0x27
   12c64:	f0 a5       	ldd	r31, Z+40	; 0x28
   12c66:	e0 2d       	mov	r30, r0
   12c68:	0b c0       	rjmp	.+22     	; 0x12c80 <hpdir_set_device+0xb0>
	}
#endif
	else
	{
		printf("hpdir_parameters invalid TYPE\n");
   12c6a:	81 e4       	ldi	r24, 0x41	; 65
   12c6c:	9d e1       	ldi	r25, 0x1D	; 29
   12c6e:	1f 92       	push	r1
   12c70:	9f 93       	push	r25
   12c72:	8f 93       	push	r24
   12c74:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
		return;
   12c78:	0f 90       	pop	r0
   12c7a:	0f 90       	pop	r0
   12c7c:	0f 90       	pop	r0
   12c7e:	08 95       	ret

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE)
   12c80:	2b e2       	ldi	r18, 0x2B	; 43
   12c82:	28 9f       	mul	r18, r24
   12c84:	d0 01       	movw	r26, r0
   12c86:	29 9f       	mul	r18, r25
   12c88:	b0 0d       	add	r27, r0
   12c8a:	11 24       	eor	r1, r1
   12c8c:	a4 51       	subi	r26, 0x14	; 20
   12c8e:	b2 4e       	sbci	r27, 0xE2	; 226
   12c90:	2c 91       	ld	r18, X
   12c92:	21 30       	cpi	r18, 0x01	; 1
   12c94:	f1 f4       	brne	.+60     	; 0x12cd2 <hpdir_set_device+0x102>
	{
		AMIGOp->CONFIG.ID = hpdir.ID;
   12c96:	20 91 70 20 	lds	r18, 0x2070	; 0x802070 <hpdir+0x80>
   12c9a:	30 91 71 20 	lds	r19, 0x2071	; 0x802071 <hpdir+0x81>
   12c9e:	34 a3       	std	Z+36, r19	; 0x24
   12ca0:	23 a3       	std	Z+35, r18	; 0x23
		AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   12ca2:	20 91 90 20 	lds	r18, 0x2090	; 0x802090 <hpdir+0xa0>
   12ca6:	30 91 91 20 	lds	r19, 0x2091	; 0x802091 <hpdir+0xa1>
   12caa:	36 a3       	std	Z+38, r19	; 0x26
   12cac:	25 a3       	std	Z+37, r18	; 0x25
		AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   12cae:	20 91 8c 20 	lds	r18, 0x208C	; 0x80208c <hpdir+0x9c>
   12cb2:	30 91 8d 20 	lds	r19, 0x208D	; 0x80208d <hpdir+0x9d>
   12cb6:	30 a7       	std	Z+40, r19	; 0x28
   12cb8:	27 a3       	std	Z+39, r18	; 0x27
		AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   12cba:	20 91 88 20 	lds	r18, 0x2088	; 0x802088 <hpdir+0x98>
   12cbe:	30 91 89 20 	lds	r19, 0x2089	; 0x802089 <hpdir+0x99>
   12cc2:	32 a7       	std	Z+42, r19	; 0x2a
   12cc4:	21 a7       	std	Z+41, r18	; 0x29
		AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   12cc6:	20 91 84 20 	lds	r18, 0x2084	; 0x802084 <hpdir+0x94>
   12cca:	30 91 85 20 	lds	r19, 0x2085	; 0x802085 <hpdir+0x95>
   12cce:	34 a7       	std	Z+44, r19	; 0x2c
   12cd0:	23 a7       	std	Z+43, r18	; 0x2b
	}
#endif
	Devices[index].BLOCKS = hpdir.BLOCKS;
   12cd2:	4b e2       	ldi	r20, 0x2B	; 43
   12cd4:	48 9f       	mul	r20, r24
   12cd6:	90 01       	movw	r18, r0
   12cd8:	49 9f       	mul	r20, r25
   12cda:	30 0d       	add	r19, r0
   12cdc:	11 24       	eor	r1, r1
   12cde:	f9 01       	movw	r30, r18
   12ce0:	e4 51       	subi	r30, 0x14	; 20
   12ce2:	f2 4e       	sbci	r31, 0xE2	; 226
   12ce4:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <hpdir+0xac>
   12ce8:	90 91 9d 20 	lds	r25, 0x209D	; 0x80209d <hpdir+0xad>
   12cec:	a0 91 9e 20 	lds	r26, 0x209E	; 0x80209e <hpdir+0xae>
   12cf0:	b0 91 9f 20 	lds	r27, 0x209F	; 0x80209f <hpdir+0xaf>
   12cf4:	83 83       	std	Z+3, r24	; 0x03
   12cf6:	94 83       	std	Z+4, r25	; 0x04
   12cf8:	a5 83       	std	Z+5, r26	; 0x05
   12cfa:	b6 83       	std	Z+6, r27	; 0x06
	strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   12cfc:	4e e1       	ldi	r20, 0x1E	; 30
   12cfe:	50 e0       	ldi	r21, 0x00	; 0
   12d00:	60 ef       	ldi	r22, 0xF0	; 240
   12d02:	7f e1       	ldi	r23, 0x1F	; 31
   12d04:	c9 01       	movw	r24, r18
   12d06:	8d 50       	subi	r24, 0x0D	; 13
   12d08:	92 4e       	sbci	r25, 0xE2	; 226
   12d0a:	0c 94 ac 31 	jmp	0x6358	; 0x6358 <strncpy>
   12d0e:	08 95       	ret

00012d10 <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   12d10:	cf 93       	push	r28
   12d12:	df 93       	push	r29
   12d14:	ec 01       	movw	r28, r24
   12d16:	cb 01       	movw	r24, r22
	if ( hpdir_find_drive( model, 0 ,1) )
   12d18:	41 e0       	ldi	r20, 0x01	; 1
   12d1a:	50 e0       	ldi	r21, 0x00	; 0
   12d1c:	60 e0       	ldi	r22, 0x00	; 0
   12d1e:	70 e0       	ldi	r23, 0x00	; 0
   12d20:	0e 94 e8 a5 	call	0x14bd0	; 0x14bd0 <hpdir_find_drive>
   12d24:	89 2b       	or	r24, r25
   12d26:	11 f0       	breq	.+4      	; 0x12d2c <hpdir_set_parameters+0x1c>
		hpdir_set_device(index);
   12d28:	ce 01       	movw	r24, r28
   12d2a:	52 df       	rcall	.-348    	; 0x12bd0 <hpdir_set_device>
}
   12d2c:	df 91       	pop	r29
   12d2e:	cf 91       	pop	r28
   12d30:	08 95       	ret

00012d32 <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   12d32:	4f 92       	push	r4
   12d34:	5f 92       	push	r5
   12d36:	6f 92       	push	r6
   12d38:	7f 92       	push	r7
   12d3a:	8f 92       	push	r8
   12d3c:	af 92       	push	r10
   12d3e:	bf 92       	push	r11
   12d40:	cf 92       	push	r12
   12d42:	df 92       	push	r13
   12d44:	ef 92       	push	r14
   12d46:	0f 93       	push	r16
   12d48:	1f 93       	push	r17
   12d4a:	cf 93       	push	r28
   12d4c:	df 93       	push	r29
   12d4e:	cc ee       	ldi	r28, 0xEC	; 236
   12d50:	dd e1       	ldi	r29, 0x1D	; 29
   12d52:	80 ef       	ldi	r24, 0xF0	; 240
   12d54:	48 2e       	mov	r4, r24
   12d56:	8f e1       	ldi	r24, 0x1F	; 31
   12d58:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12d5a:	a1 2c       	mov	r10, r1
   12d5c:	bb 24       	eor	r11, r11
   12d5e:	b3 94       	inc	r11
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12d60:	84 ed       	ldi	r24, 0xD4	; 212
   12d62:	9c e1       	ldi	r25, 0x1C	; 28
   12d64:	6c 01       	movw	r12, r24
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12d66:	8b e0       	ldi	r24, 0x0B	; 11
   12d68:	9d e1       	ldi	r25, 0x1D	; 29
   12d6a:	3c 01       	movw	r6, r24
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   12d6c:	88 81       	ld	r24, Y
   12d6e:	88 23       	and	r24, r24
   12d70:	09 f4       	brne	.+2      	; 0x12d74 <Post_Config+0x42>
   12d72:	5f c0       	rjmp	.+190    	; 0x12e32 <Post_Config+0x100>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   12d74:	83 30       	cpi	r24, 0x03	; 3
   12d76:	21 f5       	brne	.+72     	; 0x12dc0 <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   12d78:	0f a1       	ldd	r16, Y+39	; 0x27
   12d7a:	18 a5       	ldd	r17, Y+40	; 0x28
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   12d7c:	f8 01       	movw	r30, r16
   12d7e:	87 a5       	ldd	r24, Z+47	; 0x2f
   12d80:	90 a9       	ldd	r25, Z+48	; 0x30
   12d82:	81 15       	cp	r24, r1
   12d84:	91 40       	sbci	r25, 0x01	; 1
   12d86:	71 f0       	breq	.+28     	; 0x12da4 <Post_Config+0x72>
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12d88:	ce 01       	movw	r24, r28
   12d8a:	07 96       	adiw	r24, 0x07	; 7
   12d8c:	9f 93       	push	r25
   12d8e:	8f 93       	push	r24
   12d90:	1f 92       	push	r1
   12d92:	7f 92       	push	r7
   12d94:	6f 92       	push	r6
   12d96:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   12d9a:	0f 90       	pop	r0
   12d9c:	0f 90       	pop	r0
   12d9e:	0f 90       	pop	r0
   12da0:	0f 90       	pop	r0
   12da2:	0f 90       	pop	r0
			}
			sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
   12da4:	f8 01       	movw	r30, r16
   12da6:	eb 5b       	subi	r30, 0xBB	; 187
   12da8:	ff 4f       	sbci	r31, 0xFF	; 255
			Devices[i].BLOCKS = sectors;
   12daa:	80 81       	ld	r24, Z
   12dac:	91 81       	ldd	r25, Z+1	; 0x01
   12dae:	a2 81       	ldd	r26, Z+2	; 0x02
   12db0:	b3 81       	ldd	r27, Z+3	; 0x03
   12db2:	01 96       	adiw	r24, 0x01	; 1
   12db4:	a1 1d       	adc	r26, r1
   12db6:	b1 1d       	adc	r27, r1
   12db8:	8b 83       	std	Y+3, r24	; 0x03
   12dba:	9c 83       	std	Y+4, r25	; 0x04
   12dbc:	ad 83       	std	Y+5, r26	; 0x05
   12dbe:	be 83       	std	Y+6, r27	; 0x06
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   12dc0:	88 81       	ld	r24, Y
   12dc2:	81 30       	cpi	r24, 0x01	; 1
   12dc4:	b1 f5       	brne	.+108    	; 0x12e32 <Post_Config+0x100>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   12dc6:	0f a1       	ldd	r16, Y+39	; 0x27
   12dc8:	18 a5       	ldd	r17, Y+40	; 0x28
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   12dca:	f8 01       	movw	r30, r16
   12dcc:	85 a1       	ldd	r24, Z+37	; 0x25
   12dce:	96 a1       	ldd	r25, Z+38	; 0x26
   12dd0:	81 15       	cp	r24, r1
   12dd2:	91 40       	sbci	r25, 0x01	; 1
   12dd4:	89 f0       	breq	.+34     	; 0x12df8 <Post_Config+0xc6>
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12dd6:	f8 01       	movw	r30, r16
   12dd8:	b6 a2       	std	Z+38, r11	; 0x26
   12dda:	a5 a2       	std	Z+37, r10	; 0x25
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12ddc:	ce 01       	movw	r24, r28
   12dde:	07 96       	adiw	r24, 0x07	; 7
   12de0:	9f 93       	push	r25
   12de2:	8f 93       	push	r24
   12de4:	1f 92       	push	r1
   12de6:	df 92       	push	r13
   12de8:	cf 92       	push	r12
   12dea:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   12dee:	0f 90       	pop	r0
   12df0:	0f 90       	pop	r0
   12df2:	0f 90       	pop	r0
   12df4:	0f 90       	pop	r0
   12df6:	0f 90       	pop	r0
			}
			sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
				 * AMIGOp->GEOMETRY.HEADS
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
   12df8:	f8 01       	movw	r30, r16
   12dfa:	27 a1       	ldd	r18, Z+39	; 0x27
   12dfc:	30 a5       	ldd	r19, Z+40	; 0x28
   12dfe:	81 a5       	ldd	r24, Z+41	; 0x29
   12e00:	92 a5       	ldd	r25, Z+42	; 0x2a
   12e02:	28 9f       	mul	r18, r24
   12e04:	a0 01       	movw	r20, r0
   12e06:	29 9f       	mul	r18, r25
   12e08:	50 0d       	add	r21, r0
   12e0a:	38 9f       	mul	r19, r24
   12e0c:	50 0d       	add	r21, r0
   12e0e:	11 24       	eor	r1, r1
   12e10:	23 a5       	ldd	r18, Z+43	; 0x2b
   12e12:	34 a5       	ldd	r19, Z+44	; 0x2c
   12e14:	42 9f       	mul	r20, r18
   12e16:	c0 01       	movw	r24, r0
   12e18:	43 9f       	mul	r20, r19
   12e1a:	90 0d       	add	r25, r0
   12e1c:	52 9f       	mul	r21, r18
   12e1e:	90 0d       	add	r25, r0
   12e20:	11 24       	eor	r1, r1
   12e22:	09 2e       	mov	r0, r25
   12e24:	00 0c       	add	r0, r0
   12e26:	aa 0b       	sbc	r26, r26
   12e28:	bb 0b       	sbc	r27, r27
   12e2a:	8b 83       	std	Y+3, r24	; 0x03
   12e2c:	9c 83       	std	Y+4, r25	; 0x04
   12e2e:	ad 83       	std	Y+5, r26	; 0x05
   12e30:	be 83       	std	Y+6, r27	; 0x06
   12e32:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   12e34:	4c 16       	cp	r4, r28
   12e36:	5d 06       	cpc	r5, r29
   12e38:	09 f0       	breq	.+2      	; 0x12e3c <Post_Config+0x10a>
   12e3a:	98 cf       	rjmp	.-208    	; 0x12d6c <Post_Config+0x3a>
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
        } 
#endif // #ifdef AMIGO
    }
}
   12e3c:	df 91       	pop	r29
   12e3e:	cf 91       	pop	r28
   12e40:	1f 91       	pop	r17
   12e42:	0f 91       	pop	r16
   12e44:	ef 90       	pop	r14
   12e46:	df 90       	pop	r13
   12e48:	cf 90       	pop	r12
   12e4a:	bf 90       	pop	r11
   12e4c:	af 90       	pop	r10
   12e4e:	8f 90       	pop	r8
   12e50:	7f 90       	pop	r7
   12e52:	6f 90       	pop	r6
   12e54:	5f 90       	pop	r5
   12e56:	4f 90       	pop	r4
   12e58:	08 95       	ret

00012e5a <Read_Config>:
/// Set all drive parameters and debuglevel 
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   12e5a:	aa e9       	ldi	r26, 0x9A	; 154
   12e5c:	b0 e0       	ldi	r27, 0x00	; 0
   12e5e:	e3 e3       	ldi	r30, 0x33	; 51
   12e60:	f7 e9       	ldi	r31, 0x97	; 151
   12e62:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
   12e66:	18 2f       	mov	r17, r24
#endif

    char *ptr;
    char str[128];

    init_Devices();
   12e68:	09 2f       	mov	r16, r25

    lines = 0;
   12e6a:	c3 dd       	rcall	.-1146   	; 0x129f2 <init_Devices>
   12e6c:	10 92 60 18 	sts	0x1860, r1	; 0x801860 <lines+0x1>
   12e70:	10 92 5f 18 	sts	0x185F, r1	; 0x80185f <lines>

    printf("Reading: %s\n", name);
   12e74:	0f 93       	push	r16
   12e76:	1f 93       	push	r17
   12e78:	87 ec       	ldi	r24, 0xC7	; 199
   12e7a:	9c e1       	ldi	r25, 0x1C	; 28
   12e7c:	1f 92       	push	r1
   12e7e:	9f 93       	push	r25
   12e80:	8f 93       	push	r24
   12e82:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    cfg = fopen(name, "rb");
   12e86:	66 e8       	ldi	r22, 0x86	; 134
   12e88:	78 e0       	ldi	r23, 0x08	; 8
   12e8a:	81 2f       	mov	r24, r17
   12e8c:	90 2f       	mov	r25, r16
   12e8e:	0e 94 8e 7e 	call	0xfd1c	; 0xfd1c <fopen>
   12e92:	c9 57       	subi	r28, 0x79	; 121
   12e94:	df 4f       	sbci	r29, 0xFF	; 255
   12e96:	99 83       	std	Y+1, r25	; 0x01
   12e98:	88 83       	st	Y, r24
   12e9a:	c7 58       	subi	r28, 0x87	; 135
    if(cfg == NULL)
   12e9c:	d0 40       	sbci	r29, 0x00	; 0
   12e9e:	0f 90       	pop	r0
   12ea0:	0f 90       	pop	r0
   12ea2:	0f 90       	pop	r0
   12ea4:	0f 90       	pop	r0
   12ea6:	0f 90       	pop	r0
   12ea8:	89 2b       	or	r24, r25
   12eaa:	09 f4       	brne	.+2      	; 0x12eae <Read_Config+0x54>
   12eac:	53 c0       	rjmp	.+166    	; 0x12f54 <Read_Config+0xfa>
   12eae:	21 2c       	mov	r2, r1
   12eb0:	31 2c       	mov	r3, r1
   12eb2:	41 2c       	mov	r4, r1
   12eb4:	51 2c       	mov	r5, r1
   12eb6:	cb 57       	subi	r28, 0x7B	; 123
   12eb8:	df 4f       	sbci	r29, 0xFF	; 255
   12eba:	19 82       	std	Y+1, r1	; 0x01
   12ebc:	18 82       	st	Y, r1
   12ebe:	c5 58       	subi	r28, 0x85	; 133
   12ec0:	d0 40       	sbci	r29, 0x00	; 0
   12ec2:	81 2c       	mov	r8, r1
   12ec4:	91 2c       	mov	r9, r1
   12ec6:	a1 2c       	mov	r10, r1
   12ec8:	b1 2c       	mov	r11, r1
   12eca:	61 2c       	mov	r6, r1
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   12ecc:	71 2c       	mov	r7, r1
   12ece:	8a ee       	ldi	r24, 0xEA	; 234
   12ed0:	99 e1       	ldi	r25, 0x19	; 25
   12ed2:	9c 01       	movw	r18, r24
   12ed4:	40 e0       	ldi	r20, 0x00	; 0
   12ed6:	c7 57       	subi	r28, 0x77	; 119
   12ed8:	df 4f       	sbci	r29, 0xFF	; 255
   12eda:	28 83       	st	Y, r18
   12edc:	39 83       	std	Y+1, r19	; 0x01
   12ede:	4a 83       	std	Y+2, r20	; 0x02
   12ee0:	c9 58       	subi	r28, 0x89	; 137
                    ++errors;
                AMIGOp->GEOMETRY.CYLINDERS = val;
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   12ee2:	d0 40       	sbci	r29, 0x00	; 0
   12ee4:	8c e0       	ldi	r24, 0x0C	; 12
   12ee6:	9a e1       	ldi	r25, 0x1A	; 26
   12ee8:	9c 01       	movw	r18, r24
   12eea:	40 e0       	ldi	r20, 0x00	; 0
   12eec:	c4 57       	subi	r28, 0x74	; 116
   12eee:	df 4f       	sbci	r29, 0xFF	; 255
   12ef0:	28 83       	st	Y, r18
   12ef2:	39 83       	std	Y+1, r19	; 0x01
   12ef4:	4a 83       	std	Y+2, r20	; 0x02
   12ef6:	cc 58       	subi	r28, 0x8C	; 140
            if( (ind = token(ptr,"BYTES_PER_SECTOR")) )
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
                    ++errors;
printf("BYTES PER SECTOR: %s\n", token);
   12ef8:	d0 40       	sbci	r29, 0x00	; 0
   12efa:	8c e3       	ldi	r24, 0x3C	; 60
   12efc:	9a e1       	ldi	r25, 0x1A	; 26
   12efe:	9c 01       	movw	r18, r24
   12f00:	40 e0       	ldi	r20, 0x00	; 0
   12f02:	c1 57       	subi	r28, 0x71	; 113
   12f04:	df 4f       	sbci	r29, 0xFF	; 255
   12f06:	28 83       	st	Y, r18
   12f08:	39 83       	std	Y+1, r19	; 0x01
   12f0a:	4a 83       	std	Y+2, r20	; 0x02
   12f0c:	cf 58       	subi	r28, 0x8F	; 143
                    ++errors;
                AMIGOp->CONFIG.ID = val;
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   12f0e:	d0 40       	sbci	r29, 0x00	; 0
   12f10:	82 e5       	ldi	r24, 0x52	; 82
   12f12:	9a e1       	ldi	r25, 0x1A	; 26
   12f14:	9c 01       	movw	r18, r24
   12f16:	40 e0       	ldi	r20, 0x00	; 0
   12f18:	ce 56       	subi	r28, 0x6E	; 110
   12f1a:	df 4f       	sbci	r29, 0xFF	; 255
   12f1c:	28 83       	st	Y, r18
   12f1e:	39 83       	std	Y+1, r19	; 0x01
   12f20:	4a 83       	std	Y+2, r20	; 0x02
   12f22:	c2 59       	subi	r28, 0x92	; 146
                strncpy(AMIGOp->HEADER.NAME, ptr, sizeof(AMIGOp->HEADER.NAME)-1);
                AMIGOp->HEADER.NAME[sizeof(AMIGOp->HEADER.NAME)-1] = 0;
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   12f24:	d0 40       	sbci	r29, 0x00	; 0
   12f26:	81 e8       	ldi	r24, 0x81	; 129
   12f28:	9a e1       	ldi	r25, 0x1A	; 26
   12f2a:	9c 01       	movw	r18, r24
   12f2c:	40 e0       	ldi	r20, 0x00	; 0
   12f2e:	cb 56       	subi	r28, 0x6B	; 107
   12f30:	df 4f       	sbci	r29, 0xFF	; 255
   12f32:	28 83       	st	Y, r18
   12f34:	39 83       	std	Y+1, r19	; 0x01
   12f36:	4a 83       	std	Y+2, r20	; 0x02
   12f38:	c5 59       	subi	r28, 0x95	; 149

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   12f3a:	d0 40       	sbci	r29, 0x00	; 0
   12f3c:	81 eb       	ldi	r24, 0xB1	; 177
   12f3e:	9a e1       	ldi	r25, 0x1A	; 26
   12f40:	9c 01       	movw	r18, r24
   12f42:	40 e0       	ldi	r20, 0x00	; 0
   12f44:	c8 56       	subi	r28, 0x68	; 104
   12f46:	df 4f       	sbci	r29, 0xFF	; 255
   12f48:	28 83       	st	Y, r18
   12f4a:	39 83       	std	Y+1, r19	; 0x01
   12f4c:	4a 83       	std	Y+2, r20	; 0x02
   12f4e:	c8 59       	subi	r28, 0x98	; 152
   12f50:	d0 40       	sbci	r29, 0x00	; 0
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
        //FIXME
        perror("Read_Config - open");
   12f52:	2f c0       	rjmp	.+94     	; 0x12fb2 <Read_Config+0x158>
   12f54:	8c ec       	ldi	r24, 0xCC	; 204
   12f56:	9d e0       	ldi	r25, 0x0D	; 13
   12f58:	0e 94 d8 78 	call	0xf1b0	; 0xf1b0 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   12f5c:	0f 93       	push	r16
   12f5e:	1f 93       	push	r17
   12f60:	89 ea       	ldi	r24, 0xA9	; 169
   12f62:	9c e1       	ldi	r25, 0x1C	; 28
   12f64:	1f 92       	push	r1
   12f66:	9f 93       	push	r25
   12f68:	8f 93       	push	r24
   12f6a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        set_Config_Defaults();
        return(errors);
   12f6e:	0f 90       	pop	r0
   12f70:	0f 90       	pop	r0
   12f72:	0f 90       	pop	r0
   12f74:	0f 90       	pop	r0
   12f76:	0f 90       	pop	r0
   12f78:	81 e0       	ldi	r24, 0x01	; 1
   12f7a:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   12f7c:	eb c7       	rjmp	.+4054   	; 0x13f54 <Read_Config+0x10fa>
   12f7e:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   12f82:	90 91 60 18 	lds	r25, 0x1860	; 0x801860 <lines+0x1>
   12f86:	01 96       	adiw	r24, 0x01	; 1
   12f88:	90 93 60 18 	sts	0x1860, r25	; 0x801860 <lines+0x1>
   12f8c:	80 93 5f 18 	sts	0x185F, r24	; 0x80185f <lines>

        ptr = str;

        trim_tail(ptr);
   12f90:	ce 01       	movw	r24, r28
   12f92:	01 96       	adiw	r24, 0x01	; 1
   12f94:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <trim_tail>
        ptr = skipspaces(ptr);
   12f98:	ce 01       	movw	r24, r28
   12f9a:	01 96       	adiw	r24, 0x01	; 1
   12f9c:	0e 94 0b 32 	call	0x6416	; 0x6416 <skipspaces>
        len = strlen(ptr);
   12fa0:	6c 01       	movw	r12, r24
   12fa2:	fc 01       	movw	r30, r24
   12fa4:	01 90       	ld	r0, Z+
   12fa6:	00 20       	and	r0, r0
   12fa8:	e9 f7       	brne	.-6      	; 0x12fa4 <Read_Config+0x14a>
        if(!len)
   12faa:	31 97       	sbiw	r30, 0x01	; 1
   12fac:	8e 17       	cp	r24, r30
   12fae:	9f 07       	cpc	r25, r31
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   12fb0:	79 f4       	brne	.+30     	; 0x12fd0 <Read_Config+0x176>
   12fb2:	c9 57       	subi	r28, 0x79	; 121
   12fb4:	df 4f       	sbci	r29, 0xFF	; 255
   12fb6:	48 81       	ld	r20, Y
   12fb8:	59 81       	ldd	r21, Y+1	; 0x01
   12fba:	c7 58       	subi	r28, 0x87	; 135
   12fbc:	d0 40       	sbci	r29, 0x00	; 0
   12fbe:	6e e7       	ldi	r22, 0x7E	; 126
   12fc0:	70 e0       	ldi	r23, 0x00	; 0
   12fc2:	ce 01       	movw	r24, r28
   12fc4:	01 96       	adiw	r24, 0x01	; 1
   12fc6:	0e 94 bf 76 	call	0xed7e	; 0xed7e <fgets>
   12fca:	89 2b       	or	r24, r25
   12fcc:	c1 f6       	brne	.-80     	; 0x12f7e <Read_Config+0x124>
        ptr = skipspaces(ptr);
        len = strlen(ptr);
        if(!len)
            continue;
        // Skip comments
        if(*ptr == '#')
   12fce:	73 c7       	rjmp	.+3814   	; 0x13eb6 <Read_Config+0x105c>
   12fd0:	dc 01       	movw	r26, r24
   12fd2:	8c 91       	ld	r24, X
   12fd4:	83 32       	cpi	r24, 0x23	; 35
            continue;

        //FIXME check for state and last state
        if(token(ptr,"END"))
   12fd6:	69 f3       	breq	.-38     	; 0x12fb2 <Read_Config+0x158>
   12fd8:	6f ed       	ldi	r22, 0xDF	; 223
   12fda:	7d e0       	ldi	r23, 0x0D	; 13
   12fdc:	c6 01       	movw	r24, r12
   12fde:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
        {
            state = pop_state();
   12fe2:	89 2b       	or	r24, r25
   12fe4:	19 f0       	breq	.+6      	; 0x12fec <Read_Config+0x192>
   12fe6:	42 dd       	rcall	.-1404   	; 0x12a6c <pop_state>
            continue;
   12fe8:	3c 01       	movw	r6, r24
        }

        switch(state)
   12fea:	e3 cf       	rjmp	.-58     	; 0x12fb2 <Read_Config+0x158>
   12fec:	b0 e1       	ldi	r27, 0x10	; 16
   12fee:	6b 16       	cp	r6, r27
   12ff0:	71 04       	cpc	r7, r1
   12ff2:	08 f0       	brcs	.+2      	; 0x12ff6 <Read_Config+0x19c>
   12ff4:	40 c7       	rjmp	.+3712   	; 0x13e76 <Read_Config+0x101c>
   12ff6:	f3 01       	movw	r30, r6
   12ff8:	e0 53       	subi	r30, 0x30	; 48
   12ffa:	ff 4f       	sbci	r31, 0xFF	; 255
   12ffc:	0c 94 ea e4 	jmp	0x1c9d4	; 0x1c9d4 <__tablejump2__>
        {
        case START_STATE:

            if( (ind = token(ptr,"SS80_DEFAULT") ))
   13000:	63 ee       	ldi	r22, 0xE3	; 227
   13002:	7d e0       	ldi	r23, 0x0D	; 13
   13004:	c6 01       	movw	r24, r12
   13006:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
            {
                push_state(state);
   1300a:	89 2b       	or	r24, r25
   1300c:	a1 f0       	breq	.+40     	; 0x13036 <Read_Config+0x1dc>
				state = SS80_STATE;
				index = alloc_device(SS80_DEFAULT_TYPE);
   1300e:	80 e0       	ldi	r24, 0x00	; 0
   13010:	90 e0       	ldi	r25, 0x00	; 0
   13012:	13 dd       	rcall	.-1498   	; 0x12a3a <push_state>
   13014:	82 e0       	ldi	r24, 0x02	; 2
   13016:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   13018:	39 dc       	rcall	.-1934   	; 0x1288c <alloc_device>
   1301a:	4c 01       	movw	r8, r24
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
   1301c:	01 96       	adiw	r24, 0x01	; 1
   1301e:	49 f2       	breq	.-110    	; 0x12fb2 <Read_Config+0x158>
   13020:	8b e2       	ldi	r24, 0x2B	; 43
   13022:	88 9d       	mul	r24, r8
   13024:	f0 01       	movw	r30, r0
   13026:	89 9d       	mul	r24, r9
   13028:	f0 0d       	add	r31, r0
   1302a:	11 24       	eor	r1, r1
   1302c:	e4 51       	subi	r30, 0x14	; 20
   1302e:	f2 4e       	sbci	r31, 0xE2	; 226
   13030:	47 a0       	ldd	r4, Z+39	; 0x27
            }

            else if( (ind = token(ptr,"SS80")) || (ind = token(ptr, "CS80")) )
   13032:	50 a4       	ldd	r5, Z+40	; 0x28
   13034:	2c c0       	rjmp	.+88     	; 0x1308e <Read_Config+0x234>
   13036:	60 ef       	ldi	r22, 0xF0	; 240
   13038:	7d e0       	ldi	r23, 0x0D	; 13
   1303a:	c6 01       	movw	r24, r12
   1303c:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13040:	8c 01       	movw	r16, r24
   13042:	89 2b       	or	r24, r25
   13044:	41 f4       	brne	.+16     	; 0x13056 <Read_Config+0x1fc>
   13046:	65 ef       	ldi	r22, 0xF5	; 245
   13048:	7d e0       	ldi	r23, 0x0D	; 13
   1304a:	c6 01       	movw	r24, r12
   1304c:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
            {
                push_state(state);
   13050:	8c 01       	movw	r16, r24
   13052:	89 2b       	or	r24, r25
   13054:	01 f1       	breq	.+64     	; 0x13096 <Read_Config+0x23c>
				state = SS80_STATE;
				index = alloc_device(SS80_TYPE);
   13056:	80 e0       	ldi	r24, 0x00	; 0
   13058:	90 e0       	ldi	r25, 0x00	; 0
   1305a:	ef dc       	rcall	.-1570   	; 0x12a3a <push_state>
   1305c:	83 e0       	ldi	r24, 0x03	; 3
   1305e:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   13060:	15 dc       	rcall	.-2006   	; 0x1288c <alloc_device>
   13062:	4c 01       	movw	r8, r24
   13064:	01 96       	adiw	r24, 0x01	; 1
				{
					state = START_STATE;
				}
				else
				{
					SS80p = (SS80DiskType *) Devices[index].dev;
   13066:	09 f4       	brne	.+2      	; 0x1306a <Read_Config+0x210>
   13068:	a4 cf       	rjmp	.-184    	; 0x12fb2 <Read_Config+0x158>
   1306a:	8b e2       	ldi	r24, 0x2B	; 43
   1306c:	88 9d       	mul	r24, r8
   1306e:	f0 01       	movw	r30, r0
   13070:	89 9d       	mul	r24, r9
   13072:	f0 0d       	add	r31, r0
   13074:	11 24       	eor	r1, r1
   13076:	e4 51       	subi	r30, 0x14	; 20
   13078:	f2 4e       	sbci	r31, 0xE2	; 226
					ptr += ind;
					ptr = skipspaces(ptr);
   1307a:	47 a0       	ldd	r4, Z+39	; 0x27
   1307c:	50 a4       	ldd	r5, Z+40	; 0x28
   1307e:	c6 01       	movw	r24, r12
   13080:	80 0f       	add	r24, r16
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index].model
   13082:	91 1f       	adc	r25, r17
   13084:	0e 94 0b 32 	call	0x6416	; 0x6416 <skipspaces>
   13088:	bc 01       	movw	r22, r24
            }

            else if( (ind = token(ptr,"SS80")) || (ind = token(ptr, "CS80")) )
            {
                push_state(state);
				state = SS80_STATE;
   1308a:	c4 01       	movw	r24, r8
   1308c:	41 de       	rcall	.-894    	; 0x12d10 <hpdir_set_parameters>
   1308e:	66 24       	eor	r6, r6
   13090:	63 94       	inc	r6
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index].model
				}
			}

#ifdef AMIGO
            else if( (ind = token(ptr,"AMIGO")) )
   13092:	71 2c       	mov	r7, r1
   13094:	8e cf       	rjmp	.-228    	; 0x12fb2 <Read_Config+0x158>
   13096:	6a ef       	ldi	r22, 0xFA	; 250
   13098:	7d e0       	ldi	r23, 0x0D	; 13
   1309a:	c6 01       	movw	r24, r12
   1309c:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
            {
                push_state(state);
   130a0:	8c 01       	movw	r16, r24
   130a2:	89 2b       	or	r24, r25
   130a4:	01 f1       	breq	.+64     	; 0x130e6 <Read_Config+0x28c>
                state = AMIGO_STATE;
                index = alloc_device(AMIGO_TYPE);
   130a6:	80 e0       	ldi	r24, 0x00	; 0
   130a8:	90 e0       	ldi	r25, 0x00	; 0
   130aa:	c7 dc       	rcall	.-1650   	; 0x12a3a <push_state>
   130ac:	81 e0       	ldi	r24, 0x01	; 1
   130ae:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   130b0:	ed db       	rcall	.-2086   	; 0x1288c <alloc_device>
   130b2:	4c 01       	movw	r8, r24
   130b4:	01 96       	adiw	r24, 0x01	; 1
				{
                    state = START_STATE;
				}
                else
				{
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
   130b6:	09 f4       	brne	.+2      	; 0x130ba <Read_Config+0x260>
   130b8:	7c cf       	rjmp	.-264    	; 0x12fb2 <Read_Config+0x158>
   130ba:	8b e2       	ldi	r24, 0x2B	; 43
   130bc:	88 9d       	mul	r24, r8
   130be:	f0 01       	movw	r30, r0
   130c0:	89 9d       	mul	r24, r9
   130c2:	f0 0d       	add	r31, r0
   130c4:	11 24       	eor	r1, r1
   130c6:	e4 51       	subi	r30, 0x14	; 20
					ptr += ind;
					ptr = skipspaces(ptr);
   130c8:	f2 4e       	sbci	r31, 0xE2	; 226
   130ca:	27 a0       	ldd	r2, Z+39	; 0x27
   130cc:	30 a4       	ldd	r3, Z+40	; 0x28
   130ce:	c6 01       	movw	r24, r12
   130d0:	80 0f       	add	r24, r16
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index.model
   130d2:	91 1f       	adc	r25, r17
   130d4:	0e 94 0b 32 	call	0x6416	; 0x6416 <skipspaces>
   130d8:	bc 01       	movw	r22, r24

#ifdef AMIGO
            else if( (ind = token(ptr,"AMIGO")) )
            {
                push_state(state);
                state = AMIGO_STATE;
   130da:	c4 01       	movw	r24, r8
   130dc:	19 de       	rcall	.-974    	; 0x12d10 <hpdir_set_parameters>
   130de:	aa e0       	ldi	r26, 0x0A	; 10
					ptr = skipspaces(ptr);
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index.model
				}
			}
#endif
            else if(token(ptr,"PRINTER"))
   130e0:	6a 2e       	mov	r6, r26
   130e2:	71 2c       	mov	r7, r1
   130e4:	66 cf       	rjmp	.-308    	; 0x12fb2 <Read_Config+0x158>
   130e6:	60 e0       	ldi	r22, 0x00	; 0
   130e8:	7e e0       	ldi	r23, 0x0E	; 14
   130ea:	c6 01       	movw	r24, r12
            {
                push_state(state);
   130ec:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   130f0:	89 2b       	or	r24, r25
   130f2:	f1 f0       	breq	.+60     	; 0x13130 <Read_Config+0x2d6>
                state = PRINTER_STATE;
                index = alloc_device(PRINTER_TYPE);
   130f4:	80 e0       	ldi	r24, 0x00	; 0
   130f6:	90 e0       	ldi	r25, 0x00	; 0
   130f8:	a0 dc       	rcall	.-1728   	; 0x12a3a <push_state>
   130fa:	84 e0       	ldi	r24, 0x04	; 4
   130fc:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   130fe:	c6 db       	rcall	.-2164   	; 0x1288c <alloc_device>
   13100:	4c 01       	movw	r8, r24
   13102:	01 96       	adiw	r24, 0x01	; 1
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13104:	09 f4       	brne	.+2      	; 0x13108 <Read_Config+0x2ae>
   13106:	55 cf       	rjmp	.-342    	; 0x12fb2 <Read_Config+0x158>
   13108:	8b e2       	ldi	r24, 0x2B	; 43
   1310a:	88 9d       	mul	r24, r8
   1310c:	f0 01       	movw	r30, r0
   1310e:	89 9d       	mul	r24, r9
   13110:	f0 0d       	add	r31, r0
   13112:	11 24       	eor	r1, r1
   13114:	e4 51       	subi	r30, 0x14	; 20
   13116:	f2 4e       	sbci	r31, 0xE2	; 226
   13118:	87 a1       	ldd	r24, Z+39	; 0x27
   1311a:	90 a5       	ldd	r25, Z+40	; 0x28
   1311c:	cb 57       	subi	r28, 0x7B	; 123
   1311e:	df 4f       	sbci	r29, 0xFF	; 255
   13120:	99 83       	std	Y+1, r25	; 0x01
   13122:	88 83       	st	Y, r24
			}
#endif
            else if(token(ptr,"PRINTER"))
            {
                push_state(state);
                state = PRINTER_STATE;
   13124:	c5 58       	subi	r28, 0x85	; 133
   13126:	d0 40       	sbci	r29, 0x00	; 0
   13128:	fe e0       	ldi	r31, 0x0E	; 14
   1312a:	6f 2e       	mov	r6, r31
                if(index == -1)
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
            }
            else if( (ind = token(ptr,"DEBUG")) )
   1312c:	71 2c       	mov	r7, r1
   1312e:	41 cf       	rjmp	.-382    	; 0x12fb2 <Read_Config+0x158>
   13130:	68 e0       	ldi	r22, 0x08	; 8
   13132:	7e e0       	ldi	r23, 0x0E	; 14
   13134:	c6 01       	movw	r24, r12
   13136:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
            {
                ptr += ind;
                if ( assign_value(ptr, 0, 65535, &val) )
   1313a:	00 97       	sbiw	r24, 0x00	; 0
   1313c:	e1 f0       	breq	.+56     	; 0x13176 <Read_Config+0x31c>
   1313e:	de 01       	movw	r26, r28
   13140:	af 57       	subi	r26, 0x7F	; 127
   13142:	bf 4f       	sbci	r27, 0xFF	; 255
   13144:	7d 01       	movw	r14, r26
   13146:	0f ef       	ldi	r16, 0xFF	; 255
   13148:	1f ef       	ldi	r17, 0xFF	; 255
   1314a:	20 e0       	ldi	r18, 0x00	; 0
   1314c:	30 e0       	ldi	r19, 0x00	; 0
   1314e:	40 e0       	ldi	r20, 0x00	; 0
   13150:	50 e0       	ldi	r21, 0x00	; 0
   13152:	ba 01       	movw	r22, r20
   13154:	8c 0d       	add	r24, r12
   13156:	9d 1d       	adc	r25, r13
   13158:	a0 dc       	rcall	.-1728   	; 0x12a9a <assign_value>
   1315a:	89 2b       	or	r24, r25
                    debuglevel = val;
   1315c:	09 f4       	brne	.+2      	; 0x13160 <Read_Config+0x306>
   1315e:	29 cf       	rjmp	.-430    	; 0x12fb2 <Read_Config+0x158>
   13160:	cf 57       	subi	r28, 0x7F	; 127
   13162:	df 4f       	sbci	r29, 0xFF	; 255
   13164:	88 81       	ld	r24, Y
   13166:	99 81       	ldd	r25, Y+1	; 0x01
   13168:	c1 58       	subi	r28, 0x81	; 129
   1316a:	d0 40       	sbci	r29, 0x00	; 0
   1316c:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   13170:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
            }
            else if( (ind = token(ptr,"PRINTER_DEFAULT_ADDRESS")) )
   13174:	1e cf       	rjmp	.-452    	; 0x12fb2 <Read_Config+0x158>
   13176:	6e e0       	ldi	r22, 0x0E	; 14
   13178:	7e e0       	ldi	r23, 0x0E	; 14
   1317a:	c6 01       	movw	r24, r12
   1317c:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13180:	30 91 60 18 	lds	r19, 0x1860	; 0x801860 <lines+0x1>
   13184:	20 91 5f 18 	lds	r18, 0x185F	; 0x80185f <lines>
            {
                ptr += ind;
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", ptr,lines);
   13188:	00 97       	sbiw	r24, 0x00	; 0
   1318a:	61 f0       	breq	.+24     	; 0x131a4 <Read_Config+0x34a>
   1318c:	3f 93       	push	r19
   1318e:	2f 93       	push	r18
   13190:	c8 0e       	add	r12, r24
   13192:	d9 1e       	adc	r13, r25
   13194:	df 92       	push	r13
   13196:	cf 92       	push	r12
   13198:	80 e9       	ldi	r24, 0x90	; 144
   1319a:	9c e1       	ldi	r25, 0x1C	; 28
   1319c:	1f 92       	push	r1
   1319e:	9f 93       	push	r25
            }
            else
            {
                printf("Unexpected START token: %s, at line:%d\n", ptr,lines);
   131a0:	8f 93       	push	r24
   131a2:	ca c4       	rjmp	.+2452   	; 0x13b38 <Read_Config+0xcde>
   131a4:	3f 93       	push	r19
   131a6:	2f 93       	push	r18
   131a8:	df 92       	push	r13
   131aa:	cf 92       	push	r12
                ++errors;
            }
            break;

        case PRINTER_STATE:
            if(token(ptr,"CONFIG"))
   131ac:	88 e6       	ldi	r24, 0x68	; 104
   131ae:	9c e1       	ldi	r25, 0x1C	; 28
   131b0:	b0 c0       	rjmp	.+352    	; 0x13312 <Read_Config+0x4b8>
   131b2:	66 e2       	ldi	r22, 0x26	; 38
   131b4:	7e e0       	ldi	r23, 0x0E	; 14
   131b6:	c6 01       	movw	r24, r12
   131b8:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
            {
                push_state(state);
   131bc:	89 2b       	or	r24, r25
   131be:	39 f0       	breq	.+14     	; 0x131ce <Read_Config+0x374>
   131c0:	8e e0       	ldi	r24, 0x0E	; 14
                state = PRINTER_CONFIG;
   131c2:	90 e0       	ldi	r25, 0x00	; 0
   131c4:	3a dc       	rcall	.-1932   	; 0x12a3a <push_state>
   131c6:	ef e0       	ldi	r30, 0x0F	; 15
   131c8:	6e 2e       	mov	r6, r30
            }
            else
            {
                printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   131ca:	71 2c       	mov	r7, r1
   131cc:	f2 ce       	rjmp	.-540    	; 0x12fb2 <Read_Config+0x158>
   131ce:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   131d2:	8f 93       	push	r24
   131d4:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   131d8:	8f 93       	push	r24
   131da:	df 92       	push	r13
   131dc:	cf 92       	push	r12
   131de:	8e e3       	ldi	r24, 0x3E	; 62
                ++errors;
            }
            break;

        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
   131e0:	9c e1       	ldi	r25, 0x1C	; 28
   131e2:	88 c4       	rjmp	.+2320   	; 0x13af4 <Read_Config+0xc9a>
   131e4:	6e e1       	ldi	r22, 0x1E	; 30
   131e6:	7e e0       	ldi	r23, 0x0E	; 14
   131e8:	c6 01       	movw	r24, r12
   131ea:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
            {
                ptr += ind;
                
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14, &val) )
   131ee:	00 97       	sbiw	r24, 0x00	; 0
   131f0:	69 f1       	breq	.+90     	; 0x1324c <Read_Config+0x3f2>
   131f2:	de 01       	movw	r26, r28
   131f4:	af 57       	subi	r26, 0x7F	; 127
   131f6:	bf 4f       	sbci	r27, 0xFF	; 255
   131f8:	7d 01       	movw	r14, r26
   131fa:	0e e0       	ldi	r16, 0x0E	; 14
   131fc:	10 e0       	ldi	r17, 0x00	; 0
   131fe:	20 e0       	ldi	r18, 0x00	; 0
   13200:	30 e0       	ldi	r19, 0x00	; 0
   13202:	40 e0       	ldi	r20, 0x00	; 0
   13204:	50 e0       	ldi	r21, 0x00	; 0
   13206:	ba 01       	movw	r22, r20
   13208:	8c 0d       	add	r24, r12
   1320a:	9d 1d       	adc	r25, r13
   1320c:	46 dc       	rcall	.-1908   	; 0x12a9a <assign_value>
                    ++errors;
   1320e:	89 2b       	or	r24, r25
   13210:	29 f4       	brne	.+10     	; 0x1321c <Read_Config+0x3c2>
   13212:	bf ef       	ldi	r27, 0xFF	; 255
        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                
                tmp = 0xff;
   13214:	ab 1a       	sub	r10, r27
   13216:	bb 0a       	sbc	r11, r27
                if (!assign_value(ptr, 0, 14, &val) )
                    ++errors;
                else
                    tmp = val;
   13218:	8f ef       	ldi	r24, 0xFF	; 255
   1321a:	05 c0       	rjmp	.+10     	; 0x13226 <Read_Config+0x3cc>
   1321c:	cf 57       	subi	r28, 0x7F	; 127
   1321e:	df 4f       	sbci	r29, 0xFF	; 255
   13220:	88 81       	ld	r24, Y
                Devices[index].ADDRESS = tmp;
   13222:	c1 58       	subi	r28, 0x81	; 129
   13224:	d0 40       	sbci	r29, 0x00	; 0
   13226:	9b e2       	ldi	r25, 0x2B	; 43
   13228:	98 9d       	mul	r25, r8
   1322a:	f0 01       	movw	r30, r0
   1322c:	99 9d       	mul	r25, r9
   1322e:	f0 0d       	add	r31, r0
   13230:	11 24       	eor	r1, r1
   13232:	e4 51       	subi	r30, 0x14	; 20
                PRINTERp->HEADER.ADDRESS  = tmp;
   13234:	f2 4e       	sbci	r31, 0xE2	; 226
   13236:	81 83       	std	Z+1, r24	; 0x01
   13238:	cb 57       	subi	r28, 0x7B	; 123
   1323a:	df 4f       	sbci	r29, 0xFF	; 255
   1323c:	a8 81       	ld	r26, Y
   1323e:	b9 81       	ldd	r27, Y+1	; 0x01
   13240:	c5 58       	subi	r28, 0x85	; 133
                // NO PPR
                Devices[index].PPR = 0xff;
   13242:	d0 40       	sbci	r29, 0x00	; 0
   13244:	8c 93       	st	X, r24
   13246:	8f ef       	ldi	r24, 0xFF	; 255
                PRINTERp->HEADER.PPR = 0xff;
            }
            else
            {
                printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   13248:	82 83       	std	Z+2, r24	; 0x02
   1324a:	be c0       	rjmp	.+380    	; 0x133c8 <Read_Config+0x56e>
   1324c:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13250:	8f 93       	push	r24
   13252:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   13256:	8f 93       	push	r24
   13258:	df 92       	push	r13
   1325a:	cf 92       	push	r12
   1325c:	8d e0       	ldi	r24, 0x0D	; 13
   1325e:	9c e1       	ldi	r25, 0x1C	; 28
   13260:	1f 92       	push	r1
   13262:	9f 93       	push	r25
                ++errors;
   13264:	8f 93       	push	r24
   13266:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1326a:	bf ef       	ldi	r27, 0xFF	; 255
            }
            break;

        case SS80_STATE:
            if(token(ptr,"HEADER"))
   1326c:	ab 1a       	sub	r10, r27
   1326e:	bb 0a       	sbc	r11, r27
   13270:	1c c6       	rjmp	.+3128   	; 0x13eaa <Read_Config+0x1050>
   13272:	6d e2       	ldi	r22, 0x2D	; 45
   13274:	7e e0       	ldi	r23, 0x0E	; 14
   13276:	c6 01       	movw	r24, r12
   13278:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
            {
                push_state(state);
   1327c:	89 2b       	or	r24, r25
   1327e:	39 f0       	breq	.+14     	; 0x1328e <Read_Config+0x434>
                state = SS80_HEADER;
   13280:	81 e0       	ldi	r24, 0x01	; 1
   13282:	90 e0       	ldi	r25, 0x00	; 0
   13284:	da db       	rcall	.-2124   	; 0x12a3a <push_state>
   13286:	72 e0       	ldi	r23, 0x02	; 2
            }
            else if(token(ptr,"CONFIG"))
   13288:	67 2e       	mov	r6, r23
   1328a:	71 2c       	mov	r7, r1
   1328c:	92 ce       	rjmp	.-732    	; 0x12fb2 <Read_Config+0x158>
   1328e:	66 e2       	ldi	r22, 0x26	; 38
   13290:	7e e0       	ldi	r23, 0x0E	; 14
   13292:	c6 01       	movw	r24, r12
            {
                push_state(state);
   13294:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13298:	89 2b       	or	r24, r25
                state = SS80_CONFIG;
   1329a:	39 f0       	breq	.+14     	; 0x132aa <Read_Config+0x450>
   1329c:	81 e0       	ldi	r24, 0x01	; 1
   1329e:	90 e0       	ldi	r25, 0x00	; 0
   132a0:	cc db       	rcall	.-2152   	; 0x12a3a <push_state>
            }
            else if(token(ptr,"CONTROLLER"))
   132a2:	63 e0       	ldi	r22, 0x03	; 3
   132a4:	66 2e       	mov	r6, r22
   132a6:	71 2c       	mov	r7, r1
   132a8:	84 ce       	rjmp	.-760    	; 0x12fb2 <Read_Config+0x158>
   132aa:	64 e3       	ldi	r22, 0x34	; 52
   132ac:	7e e0       	ldi	r23, 0x0E	; 14
            {
                push_state(state);
   132ae:	c6 01       	movw	r24, r12
   132b0:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   132b4:	89 2b       	or	r24, r25
                state = SS80_CONTROLLER;
   132b6:	39 f0       	breq	.+14     	; 0x132c6 <Read_Config+0x46c>
   132b8:	81 e0       	ldi	r24, 0x01	; 1
   132ba:	90 e0       	ldi	r25, 0x00	; 0
   132bc:	be db       	rcall	.-2180   	; 0x12a3a <push_state>
            }
            else if(token(ptr,"UNIT"))
   132be:	54 e0       	ldi	r21, 0x04	; 4
   132c0:	65 2e       	mov	r6, r21
   132c2:	71 2c       	mov	r7, r1
   132c4:	76 ce       	rjmp	.-788    	; 0x12fb2 <Read_Config+0x158>
   132c6:	6f e3       	ldi	r22, 0x3F	; 63
   132c8:	7e e0       	ldi	r23, 0x0E	; 14
            {
                push_state(state);
   132ca:	c6 01       	movw	r24, r12
   132cc:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   132d0:	89 2b       	or	r24, r25
                state = SS80_UNIT;
   132d2:	39 f0       	breq	.+14     	; 0x132e2 <Read_Config+0x488>
   132d4:	81 e0       	ldi	r24, 0x01	; 1
   132d6:	90 e0       	ldi	r25, 0x00	; 0
   132d8:	b0 db       	rcall	.-2208   	; 0x12a3a <push_state>
            }
            else if(token(ptr,"VOLUME"))
   132da:	45 e0       	ldi	r20, 0x05	; 5
   132dc:	64 2e       	mov	r6, r20
   132de:	71 2c       	mov	r7, r1
   132e0:	68 ce       	rjmp	.-816    	; 0x12fb2 <Read_Config+0x158>
   132e2:	64 e4       	ldi	r22, 0x44	; 68
   132e4:	7e e0       	ldi	r23, 0x0E	; 14
   132e6:	c6 01       	movw	r24, r12
            {
                push_state(state);
   132e8:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   132ec:	89 2b       	or	r24, r25
   132ee:	39 f0       	breq	.+14     	; 0x132fe <Read_Config+0x4a4>
                state = SS80_VOLUME;
   132f0:	81 e0       	ldi	r24, 0x01	; 1
   132f2:	90 e0       	ldi	r25, 0x00	; 0
   132f4:	a2 db       	rcall	.-2236   	; 0x12a3a <push_state>
   132f6:	36 e0       	ldi	r19, 0x06	; 6
            }
            else
            {
                printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   132f8:	63 2e       	mov	r6, r19
   132fa:	71 2c       	mov	r7, r1
   132fc:	5a ce       	rjmp	.-844    	; 0x12fb2 <Read_Config+0x158>
   132fe:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13302:	8f 93       	push	r24
   13304:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   13308:	8f 93       	push	r24
   1330a:	df 92       	push	r13
   1330c:	cf 92       	push	r12
   1330e:	80 ee       	ldi	r24, 0xE0	; 224
   13310:	9b e1       	ldi	r25, 0x1B	; 27
            }
            break;


        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
   13312:	1f 92       	push	r1
   13314:	9f 93       	push	r25
   13316:	8f 93       	push	r24
   13318:	a8 c5       	rjmp	.+2896   	; 0x13e6a <Read_Config+0x1010>
   1331a:	6e e1       	ldi	r22, 0x1E	; 30
   1331c:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 30, &val) )
   1331e:	c6 01       	movw	r24, r12
   13320:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13324:	00 97       	sbiw	r24, 0x00	; 0
   13326:	29 f1       	breq	.+74     	; 0x13372 <Read_Config+0x518>
   13328:	de 01       	movw	r26, r28
   1332a:	af 57       	subi	r26, 0x7F	; 127
   1332c:	bf 4f       	sbci	r27, 0xFF	; 255
   1332e:	7d 01       	movw	r14, r26
   13330:	0e e1       	ldi	r16, 0x1E	; 30
   13332:	10 e0       	ldi	r17, 0x00	; 0
   13334:	20 e0       	ldi	r18, 0x00	; 0
   13336:	30 e0       	ldi	r19, 0x00	; 0
   13338:	40 e0       	ldi	r20, 0x00	; 0
   1333a:	50 e0       	ldi	r21, 0x00	; 0
   1333c:	ba 01       	movw	r22, r20
   1333e:	8c 0d       	add	r24, r12
                    ++errors;
   13340:	9d 1d       	adc	r25, r13
   13342:	ab db       	rcall	.-2218   	; 0x12a9a <assign_value>
   13344:	89 2b       	or	r24, r25

        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   13346:	29 f4       	brne	.+10     	; 0x13352 <Read_Config+0x4f8>
   13348:	bf ef       	ldi	r27, 0xFF	; 255
                if (!assign_value(ptr, 0, 30, &val) )
                    ++errors;
                else
                    tmp = val;
   1334a:	ab 1a       	sub	r10, r27
   1334c:	bb 0a       	sbc	r11, r27
   1334e:	8f ef       	ldi	r24, 0xFF	; 255
   13350:	05 c0       	rjmp	.+10     	; 0x1335c <Read_Config+0x502>
   13352:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].ADDRESS = tmp;
   13354:	df 4f       	sbci	r29, 0xFF	; 255
   13356:	88 81       	ld	r24, Y
   13358:	c1 58       	subi	r28, 0x81	; 129
   1335a:	d0 40       	sbci	r29, 0x00	; 0
   1335c:	9b e2       	ldi	r25, 0x2B	; 43
   1335e:	98 9d       	mul	r25, r8
   13360:	f0 01       	movw	r30, r0
   13362:	99 9d       	mul	r25, r9
   13364:	f0 0d       	add	r31, r0
                SS80p->HEADER.ADDRESS  = tmp;
   13366:	11 24       	eor	r1, r1
            }
            else if( (ind = token(ptr,"PPR")) )
   13368:	e4 51       	subi	r30, 0x14	; 20
   1336a:	f2 4e       	sbci	r31, 0xE2	; 226
   1336c:	81 83       	std	Z+1, r24	; 0x01
   1336e:	f2 01       	movw	r30, r4
   13370:	03 c3       	rjmp	.+1542   	; 0x13978 <Read_Config+0xb1e>
   13372:	6b e4       	ldi	r22, 0x4B	; 75
   13374:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7, &val) )
   13376:	c6 01       	movw	r24, r12
   13378:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   1337c:	00 97       	sbiw	r24, 0x00	; 0
   1337e:	39 f1       	breq	.+78     	; 0x133ce <Read_Config+0x574>
   13380:	9e 01       	movw	r18, r28
   13382:	2f 57       	subi	r18, 0x7F	; 127
   13384:	3f 4f       	sbci	r19, 0xFF	; 255
   13386:	79 01       	movw	r14, r18
   13388:	07 e0       	ldi	r16, 0x07	; 7
   1338a:	10 e0       	ldi	r17, 0x00	; 0
   1338c:	20 e0       	ldi	r18, 0x00	; 0
   1338e:	30 e0       	ldi	r19, 0x00	; 0
   13390:	40 e0       	ldi	r20, 0x00	; 0
   13392:	50 e0       	ldi	r21, 0x00	; 0
   13394:	ba 01       	movw	r22, r20
   13396:	8c 0d       	add	r24, r12
                    ++errors;
   13398:	9d 1d       	adc	r25, r13
   1339a:	7f db       	rcall	.-2306   	; 0x12a9a <assign_value>
   1339c:	89 2b       	or	r24, r25
                SS80p->HEADER.ADDRESS  = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   1339e:	29 f4       	brne	.+10     	; 0x133aa <Read_Config+0x550>
   133a0:	3f ef       	ldi	r19, 0xFF	; 255
                if (!assign_value(ptr, 0, 7, &val) )
                    ++errors;
                else
                    tmp = val;
   133a2:	a3 1a       	sub	r10, r19
   133a4:	b3 0a       	sbc	r11, r19
   133a6:	8f ef       	ldi	r24, 0xFF	; 255
   133a8:	05 c0       	rjmp	.+10     	; 0x133b4 <Read_Config+0x55a>
   133aa:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].PPR = tmp;
   133ac:	df 4f       	sbci	r29, 0xFF	; 255
   133ae:	88 81       	ld	r24, Y
   133b0:	c1 58       	subi	r28, 0x81	; 129
   133b2:	d0 40       	sbci	r29, 0x00	; 0
   133b4:	9b e2       	ldi	r25, 0x2B	; 43
   133b6:	98 9d       	mul	r25, r8
   133b8:	f0 01       	movw	r30, r0
   133ba:	99 9d       	mul	r25, r9
   133bc:	f0 0d       	add	r31, r0
                SS80p->HEADER.PPR = tmp;
   133be:	11 24       	eor	r1, r1
   133c0:	e4 51       	subi	r30, 0x14	; 20
   133c2:	f2 4e       	sbci	r31, 0xE2	; 226
   133c4:	82 83       	std	Z+2, r24	; 0x02
            }
            else if( (ind = token(ptr,"FILE")) )
   133c6:	d2 01       	movw	r26, r4
   133c8:	11 96       	adiw	r26, 0x01	; 1
   133ca:	8c 93       	st	X, r24
   133cc:	f2 cd       	rjmp	.-1052   	; 0x12fb2 <Read_Config+0x158>
   133ce:	6f e4       	ldi	r22, 0x4F	; 79
   133d0:	7e e0       	ldi	r23, 0x0E	; 14
   133d2:	c6 01       	movw	r24, r12
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   133d4:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   133d8:	00 97       	sbiw	r24, 0x00	; 0
   133da:	a1 f0       	breq	.+40     	; 0x13404 <Read_Config+0x5aa>
                if(*ptr == '=')
   133dc:	8c 0d       	add	r24, r12
   133de:	9d 1d       	adc	r25, r13
   133e0:	0e 94 0b 32 	call	0x6416	; 0x6416 <skipspaces>
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   133e4:	fc 01       	movw	r30, r24
   133e6:	20 81       	ld	r18, Z
   133e8:	2d 33       	cpi	r18, 0x3D	; 61
                }
                strncpy(SS80p->HEADER.NAME,ptr, sizeof(SS80p->HEADER.NAME)-1);
   133ea:	19 f4       	brne	.+6      	; 0x133f2 <Read_Config+0x598>
   133ec:	01 96       	adiw	r24, 0x01	; 1
   133ee:	0e 94 0b 32 	call	0x6416	; 0x6416 <skipspaces>
   133f2:	40 e2       	ldi	r20, 0x20	; 32
   133f4:	50 e0       	ldi	r21, 0x00	; 0
   133f6:	bc 01       	movw	r22, r24
                SS80p->HEADER.NAME[sizeof(SS80p->HEADER.NAME)-1] = 0;
   133f8:	c2 01       	movw	r24, r4
   133fa:	02 96       	adiw	r24, 0x02	; 2
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   133fc:	0e 94 ac 31 	call	0x6358	; 0x6358 <strncpy>
   13400:	d2 01       	movw	r26, r4
   13402:	12 c4       	rjmp	.+2084   	; 0x13c28 <Read_Config+0xdce>
   13404:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13408:	8f 93       	push	r24
   1340a:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   1340e:	8f 93       	push	r24
                ++errors;
            }
            break;

        case SS80_CONFIG:
            if( (ind = token(ptr,"ID")) )
   13410:	df 92       	push	r13
   13412:	cf 92       	push	r12
   13414:	82 eb       	ldi	r24, 0xB2	; 178
   13416:	9b e1       	ldi	r25, 0x1B	; 27
   13418:	23 cf       	rjmp	.-442    	; 0x13260 <Read_Config+0x406>
   1341a:	64 e5       	ldi	r22, 0x54	; 84
   1341c:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   1341e:	c6 01       	movw	r24, r12
   13420:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13424:	00 97       	sbiw	r24, 0x00	; 0
   13426:	f9 f0       	breq	.+62     	; 0x13466 <Read_Config+0x60c>
   13428:	9e 01       	movw	r18, r28
   1342a:	2f 57       	subi	r18, 0x7F	; 127
   1342c:	3f 4f       	sbci	r19, 0xFF	; 255
   1342e:	79 01       	movw	r14, r18
   13430:	0f ef       	ldi	r16, 0xFF	; 255
   13432:	1f ef       	ldi	r17, 0xFF	; 255
   13434:	20 e0       	ldi	r18, 0x00	; 0
   13436:	30 e0       	ldi	r19, 0x00	; 0
   13438:	40 e0       	ldi	r20, 0x00	; 0
   1343a:	50 e0       	ldi	r21, 0x00	; 0
   1343c:	ba 01       	movw	r22, r20
   1343e:	8c 0d       	add	r24, r12
                    ++errors;
   13440:	9d 1d       	adc	r25, r13
   13442:	2b db       	rcall	.-2474   	; 0x12a9a <assign_value>
   13444:	89 2b       	or	r24, r25
                SS80p->CONFIG.ID = val;
   13446:	19 f4       	brne	.+6      	; 0x1344e <Read_Config+0x5f4>
   13448:	3f ef       	ldi	r19, 0xFF	; 255
   1344a:	a3 1a       	sub	r10, r19
   1344c:	b3 0a       	sbc	r11, r19
   1344e:	cf 57       	subi	r28, 0x7F	; 127
   13450:	df 4f       	sbci	r29, 0xFF	; 255
   13452:	88 81       	ld	r24, Y
   13454:	99 81       	ldd	r25, Y+1	; 0x01
   13456:	c1 58       	subi	r28, 0x81	; 129
   13458:	d0 40       	sbci	r29, 0x00	; 0
   1345a:	d2 01       	movw	r26, r4
   1345c:	94 96       	adiw	r26, 0x24	; 36
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   1345e:	9c 93       	st	X, r25
   13460:	8e 93       	st	-X, r24
   13462:	93 97       	sbiw	r26, 0x23	; 35
   13464:	a6 cd       	rjmp	.-1204   	; 0x12fb2 <Read_Config+0x158>
   13466:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   1346a:	8f 93       	push	r24
   1346c:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   13470:	8f 93       	push	r24
                ++errors;
            }
            break;

        case SS80_CONTROLLER:
            if( (ind = token(ptr,"UNITS_INSTALLED")) )
   13472:	df 92       	push	r13
   13474:	cf 92       	push	r12
   13476:	84 e8       	ldi	r24, 0x84	; 132
   13478:	9b e1       	ldi	r25, 0x1B	; 27
   1347a:	f2 ce       	rjmp	.-540    	; 0x13260 <Read_Config+0x406>
   1347c:	67 e5       	ldi	r22, 0x57	; 87
   1347e:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   13480:	c6 01       	movw	r24, r12
   13482:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13486:	00 97       	sbiw	r24, 0x00	; 0
   13488:	f9 f0       	breq	.+62     	; 0x134c8 <Read_Config+0x66e>
   1348a:	9e 01       	movw	r18, r28
   1348c:	2f 57       	subi	r18, 0x7F	; 127
   1348e:	3f 4f       	sbci	r19, 0xFF	; 255
   13490:	79 01       	movw	r14, r18
   13492:	0f ef       	ldi	r16, 0xFF	; 255
   13494:	1f ef       	ldi	r17, 0xFF	; 255
   13496:	20 e0       	ldi	r18, 0x00	; 0
   13498:	30 e0       	ldi	r19, 0x00	; 0
   1349a:	40 e0       	ldi	r20, 0x00	; 0
   1349c:	50 e0       	ldi	r21, 0x00	; 0
   1349e:	ba 01       	movw	r22, r20
   134a0:	8c 0d       	add	r24, r12
                    ++errors;
   134a2:	9d 1d       	adc	r25, r13
   134a4:	fa da       	rcall	.-2572   	; 0x12a9a <assign_value>
   134a6:	89 2b       	or	r24, r25
                SS80p->CONTROLLER.UNITS_INSTALLED = val;
   134a8:	19 f4       	brne	.+6      	; 0x134b0 <Read_Config+0x656>
   134aa:	3f ef       	ldi	r19, 0xFF	; 255
   134ac:	a3 1a       	sub	r10, r19
   134ae:	b3 0a       	sbc	r11, r19
   134b0:	cf 57       	subi	r28, 0x7F	; 127
   134b2:	df 4f       	sbci	r29, 0xFF	; 255
   134b4:	88 81       	ld	r24, Y
   134b6:	99 81       	ldd	r25, Y+1	; 0x01
   134b8:	c1 58       	subi	r28, 0x81	; 129
   134ba:	d0 40       	sbci	r29, 0x00	; 0
   134bc:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"TRANSFER_RATE")) )
   134be:	96 96       	adiw	r26, 0x26	; 38
   134c0:	9c 93       	st	X, r25
   134c2:	8e 93       	st	-X, r24
   134c4:	95 97       	sbiw	r26, 0x25	; 37
   134c6:	75 cd       	rjmp	.-1302   	; 0x12fb2 <Read_Config+0x158>
   134c8:	6f eb       	ldi	r22, 0xBF	; 191
   134ca:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   134cc:	c6 01       	movw	r24, r12
   134ce:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   134d2:	00 97       	sbiw	r24, 0x00	; 0
   134d4:	d9 f0       	breq	.+54     	; 0x1350c <Read_Config+0x6b2>
   134d6:	fe 01       	movw	r30, r28
   134d8:	ef 57       	subi	r30, 0x7F	; 127
   134da:	ff 4f       	sbci	r31, 0xFF	; 255
   134dc:	7f 01       	movw	r14, r30
   134de:	0f ef       	ldi	r16, 0xFF	; 255
   134e0:	1f ef       	ldi	r17, 0xFF	; 255
   134e2:	20 e0       	ldi	r18, 0x00	; 0
   134e4:	30 e0       	ldi	r19, 0x00	; 0
   134e6:	40 e0       	ldi	r20, 0x00	; 0
   134e8:	50 e0       	ldi	r21, 0x00	; 0
   134ea:	ba 01       	movw	r22, r20
   134ec:	8c 0d       	add	r24, r12
                    ++errors;
   134ee:	9d 1d       	adc	r25, r13
   134f0:	d4 da       	rcall	.-2648   	; 0x12a9a <assign_value>
   134f2:	89 2b       	or	r24, r25
                SS80p->CONTROLLER.TRANSFER_RATE = val;
   134f4:	19 f4       	brne	.+6      	; 0x134fc <Read_Config+0x6a2>
   134f6:	ff ef       	ldi	r31, 0xFF	; 255
   134f8:	af 1a       	sub	r10, r31
   134fa:	bf 0a       	sbc	r11, r31
   134fc:	cf 57       	subi	r28, 0x7F	; 127
   134fe:	df 4f       	sbci	r29, 0xFF	; 255
   13500:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"TYPE")) )
   13502:	99 81       	ldd	r25, Y+1	; 0x01
   13504:	c1 58       	subi	r28, 0x81	; 129
   13506:	d0 40       	sbci	r29, 0x00	; 0
   13508:	d2 01       	movw	r26, r4
   1350a:	47 c4       	rjmp	.+2190   	; 0x13d9a <Read_Config+0xf40>
   1350c:	6c ea       	ldi	r22, 0xAC	; 172
   1350e:	7d e0       	ldi	r23, 0x0D	; 13
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   13510:	c6 01       	movw	r24, r12
   13512:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13516:	00 97       	sbiw	r24, 0x00	; 0
   13518:	e1 f0       	breq	.+56     	; 0x13552 <Read_Config+0x6f8>
   1351a:	fe 01       	movw	r30, r28
   1351c:	ef 57       	subi	r30, 0x7F	; 127
   1351e:	ff 4f       	sbci	r31, 0xFF	; 255
   13520:	7f 01       	movw	r14, r30
   13522:	0f ef       	ldi	r16, 0xFF	; 255
   13524:	1f ef       	ldi	r17, 0xFF	; 255
   13526:	20 e0       	ldi	r18, 0x00	; 0
   13528:	30 e0       	ldi	r19, 0x00	; 0
   1352a:	40 e0       	ldi	r20, 0x00	; 0
   1352c:	50 e0       	ldi	r21, 0x00	; 0
   1352e:	ba 01       	movw	r22, r20
   13530:	8c 0d       	add	r24, r12
                    ++errors;
   13532:	9d 1d       	adc	r25, r13
   13534:	b2 da       	rcall	.-2716   	; 0x12a9a <assign_value>
   13536:	89 2b       	or	r24, r25
                SS80p->CONTROLLER.TYPE = val;
   13538:	19 f4       	brne	.+6      	; 0x13540 <Read_Config+0x6e6>
   1353a:	ff ef       	ldi	r31, 0xFF	; 255
   1353c:	af 1a       	sub	r10, r31
   1353e:	bf 0a       	sbc	r11, r31
   13540:	cf 57       	subi	r28, 0x7F	; 127
   13542:	df 4f       	sbci	r29, 0xFF	; 255
   13544:	88 81       	ld	r24, Y
   13546:	c1 58       	subi	r28, 0x81	; 129
   13548:	d0 40       	sbci	r29, 0x00	; 0
            }
            else
            {
                printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   1354a:	d2 01       	movw	r26, r4
   1354c:	99 96       	adiw	r26, 0x29	; 41
   1354e:	8c 93       	st	X, r24
   13550:	30 cd       	rjmp	.-1440   	; 0x12fb2 <Read_Config+0x158>
   13552:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13556:	8f 93       	push	r24
   13558:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   1355c:	8f 93       	push	r24
            }
            break;


        case SS80_UNIT:
            if( (ind = token(ptr,"UNIT_TYPE")) )
   1355e:	df 92       	push	r13
   13560:	cf 92       	push	r12
   13562:	82 e5       	ldi	r24, 0x52	; 82
   13564:	9b e1       	ldi	r25, 0x1B	; 27
   13566:	7c ce       	rjmp	.-776    	; 0x13260 <Read_Config+0x406>
   13568:	67 e6       	ldi	r22, 0x67	; 103
   1356a:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   1356c:	c6 01       	movw	r24, r12
   1356e:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13572:	00 97       	sbiw	r24, 0x00	; 0
   13574:	e1 f0       	breq	.+56     	; 0x135ae <Read_Config+0x754>
   13576:	9e 01       	movw	r18, r28
   13578:	2f 57       	subi	r18, 0x7F	; 127
   1357a:	3f 4f       	sbci	r19, 0xFF	; 255
   1357c:	79 01       	movw	r14, r18
   1357e:	0f ef       	ldi	r16, 0xFF	; 255
   13580:	1f ef       	ldi	r17, 0xFF	; 255
   13582:	20 e0       	ldi	r18, 0x00	; 0
   13584:	30 e0       	ldi	r19, 0x00	; 0
   13586:	40 e0       	ldi	r20, 0x00	; 0
   13588:	50 e0       	ldi	r21, 0x00	; 0
   1358a:	ba 01       	movw	r22, r20
   1358c:	8c 0d       	add	r24, r12
                    ++errors;
   1358e:	9d 1d       	adc	r25, r13
   13590:	84 da       	rcall	.-2808   	; 0x12a9a <assign_value>
                SS80p->UNIT.UNIT_TYPE = val;
   13592:	89 2b       	or	r24, r25
   13594:	19 f4       	brne	.+6      	; 0x1359c <Read_Config+0x742>
   13596:	3f ef       	ldi	r19, 0xFF	; 255
   13598:	a3 1a       	sub	r10, r19
   1359a:	b3 0a       	sbc	r11, r19
   1359c:	cf 57       	subi	r28, 0x7F	; 127
   1359e:	df 4f       	sbci	r29, 0xFF	; 255
   135a0:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"DEVICE_NUMBER")) )
   135a2:	c1 58       	subi	r28, 0x81	; 129
   135a4:	d0 40       	sbci	r29, 0x00	; 0
   135a6:	d2 01       	movw	r26, r4
   135a8:	9a 96       	adiw	r26, 0x2a	; 42
   135aa:	8c 93       	st	X, r24
   135ac:	02 cd       	rjmp	.-1532   	; 0x12fb2 <Read_Config+0x158>
   135ae:	61 e7       	ldi	r22, 0x71	; 113
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val))
   135b0:	7e e0       	ldi	r23, 0x0E	; 14
   135b2:	c6 01       	movw	r24, r12
   135b4:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   135b8:	00 97       	sbiw	r24, 0x00	; 0
   135ba:	01 f1       	breq	.+64     	; 0x135fc <Read_Config+0x7a2>
   135bc:	fe 01       	movw	r30, r28
   135be:	ef 57       	subi	r30, 0x7F	; 127
   135c0:	ff 4f       	sbci	r31, 0xFF	; 255
   135c2:	7f 01       	movw	r14, r30
   135c4:	0f ef       	ldi	r16, 0xFF	; 255
   135c6:	1f ef       	ldi	r17, 0xFF	; 255
   135c8:	98 01       	movw	r18, r16
   135ca:	40 e0       	ldi	r20, 0x00	; 0
   135cc:	50 e0       	ldi	r21, 0x00	; 0
   135ce:	ba 01       	movw	r22, r20
                    ++errors;
   135d0:	8c 0d       	add	r24, r12
   135d2:	9d 1d       	adc	r25, r13
   135d4:	62 da       	rcall	.-2876   	; 0x12a9a <assign_value>
                SS80p->UNIT.DEVICE_NUMBER = val;
   135d6:	89 2b       	or	r24, r25
   135d8:	19 f4       	brne	.+6      	; 0x135e0 <Read_Config+0x786>
   135da:	ff ef       	ldi	r31, 0xFF	; 255
   135dc:	af 1a       	sub	r10, r31
   135de:	bf 0a       	sbc	r11, r31
   135e0:	cf 57       	subi	r28, 0x7F	; 127
   135e2:	df 4f       	sbci	r29, 0xFF	; 255
   135e4:	88 81       	ld	r24, Y
   135e6:	99 81       	ldd	r25, Y+1	; 0x01
   135e8:	aa 81       	ldd	r26, Y+2	; 0x02
   135ea:	bb 81       	ldd	r27, Y+3	; 0x03
   135ec:	c1 58       	subi	r28, 0x81	; 129
   135ee:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BYTES_PER_BLOCK")) )
   135f0:	f2 01       	movw	r30, r4
   135f2:	83 a7       	std	Z+43, r24	; 0x2b
   135f4:	94 a7       	std	Z+44, r25	; 0x2c
   135f6:	a5 a7       	std	Z+45, r26	; 0x2d
   135f8:	b6 a7       	std	Z+46, r27	; 0x2e
   135fa:	db cc       	rjmp	.-1610   	; 0x12fb2 <Read_Config+0x158>
   135fc:	6f e7       	ldi	r22, 0x7F	; 127
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   135fe:	7e e0       	ldi	r23, 0x0E	; 14
   13600:	c6 01       	movw	r24, r12
   13602:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13606:	00 97       	sbiw	r24, 0x00	; 0
   13608:	f9 f0       	breq	.+62     	; 0x13648 <Read_Config+0x7ee>
   1360a:	9e 01       	movw	r18, r28
   1360c:	2f 57       	subi	r18, 0x7F	; 127
   1360e:	3f 4f       	sbci	r19, 0xFF	; 255
   13610:	79 01       	movw	r14, r18
   13612:	00 e0       	ldi	r16, 0x00	; 0
   13614:	10 e1       	ldi	r17, 0x10	; 16
   13616:	20 e0       	ldi	r18, 0x00	; 0
   13618:	30 e0       	ldi	r19, 0x00	; 0
   1361a:	40 e0       	ldi	r20, 0x00	; 0
   1361c:	50 e0       	ldi	r21, 0x00	; 0
   1361e:	ba 01       	movw	r22, r20
                    ++errors;
   13620:	8c 0d       	add	r24, r12
   13622:	9d 1d       	adc	r25, r13
   13624:	3a da       	rcall	.-2956   	; 0x12a9a <assign_value>
                SS80p->UNIT.BYTES_PER_BLOCK = val;
   13626:	89 2b       	or	r24, r25
   13628:	19 f4       	brne	.+6      	; 0x13630 <Read_Config+0x7d6>
   1362a:	3f ef       	ldi	r19, 0xFF	; 255
   1362c:	a3 1a       	sub	r10, r19
   1362e:	b3 0a       	sbc	r11, r19
   13630:	cf 57       	subi	r28, 0x7F	; 127
   13632:	df 4f       	sbci	r29, 0xFF	; 255
   13634:	88 81       	ld	r24, Y
   13636:	99 81       	ldd	r25, Y+1	; 0x01
   13638:	c1 58       	subi	r28, 0x81	; 129
   1363a:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BUFFERED_BLOCKS")) )
   1363c:	d2 01       	movw	r26, r4
   1363e:	d0 96       	adiw	r26, 0x30	; 48
   13640:	9c 93       	st	X, r25
   13642:	8e 93       	st	-X, r24
   13644:	9f 97       	sbiw	r26, 0x2f	; 47
   13646:	b5 cc       	rjmp	.-1686   	; 0x12fb2 <Read_Config+0x158>
   13648:	6f e8       	ldi	r22, 0x8F	; 143
            {
                ptr += ind;
                if (!assign_value(ptr, 1UL, 1UL, &val) )
   1364a:	7e e0       	ldi	r23, 0x0E	; 14
   1364c:	c6 01       	movw	r24, r12
   1364e:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13652:	00 97       	sbiw	r24, 0x00	; 0
   13654:	e9 f0       	breq	.+58     	; 0x13690 <Read_Config+0x836>
   13656:	fe 01       	movw	r30, r28
   13658:	ef 57       	subi	r30, 0x7F	; 127
   1365a:	ff 4f       	sbci	r31, 0xFF	; 255
   1365c:	7f 01       	movw	r14, r30
   1365e:	01 e0       	ldi	r16, 0x01	; 1
   13660:	10 e0       	ldi	r17, 0x00	; 0
   13662:	20 e0       	ldi	r18, 0x00	; 0
   13664:	30 e0       	ldi	r19, 0x00	; 0
   13666:	41 e0       	ldi	r20, 0x01	; 1
   13668:	50 e0       	ldi	r21, 0x00	; 0
   1366a:	60 e0       	ldi	r22, 0x00	; 0
                    ++errors;
   1366c:	70 e0       	ldi	r23, 0x00	; 0
   1366e:	8c 0d       	add	r24, r12
                SS80p->UNIT.BUFFERED_BLOCKS = val;
   13670:	9d 1d       	adc	r25, r13
   13672:	13 da       	rcall	.-3034   	; 0x12a9a <assign_value>
   13674:	89 2b       	or	r24, r25
   13676:	19 f4       	brne	.+6      	; 0x1367e <Read_Config+0x824>
   13678:	ff ef       	ldi	r31, 0xFF	; 255
   1367a:	af 1a       	sub	r10, r31
   1367c:	bf 0a       	sbc	r11, r31
   1367e:	cf 57       	subi	r28, 0x7F	; 127
   13680:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"BURST_SIZE")) )
   13682:	88 81       	ld	r24, Y
   13684:	c1 58       	subi	r28, 0x81	; 129
   13686:	d0 40       	sbci	r29, 0x00	; 0
   13688:	d2 01       	movw	r26, r4
   1368a:	d1 96       	adiw	r26, 0x31	; 49
   1368c:	8c 93       	st	X, r24
   1368e:	91 cc       	rjmp	.-1758   	; 0x12fb2 <Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0, &val) )
   13690:	6f e9       	ldi	r22, 0x9F	; 159
   13692:	7e e0       	ldi	r23, 0x0E	; 14
   13694:	c6 01       	movw	r24, r12
   13696:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   1369a:	00 97       	sbiw	r24, 0x00	; 0
   1369c:	d9 f0       	breq	.+54     	; 0x136d4 <Read_Config+0x87a>
   1369e:	fe 01       	movw	r30, r28
   136a0:	ef 57       	subi	r30, 0x7F	; 127
   136a2:	ff 4f       	sbci	r31, 0xFF	; 255
   136a4:	7f 01       	movw	r14, r30
   136a6:	00 e0       	ldi	r16, 0x00	; 0
   136a8:	10 e0       	ldi	r17, 0x00	; 0
   136aa:	98 01       	movw	r18, r16
   136ac:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   136ae:	50 e0       	ldi	r21, 0x00	; 0
   136b0:	ba 01       	movw	r22, r20
                SS80p->UNIT.BURST_SIZE = val;
   136b2:	8c 0d       	add	r24, r12
   136b4:	9d 1d       	adc	r25, r13
   136b6:	f1 d9       	rcall	.-3102   	; 0x12a9a <assign_value>
   136b8:	89 2b       	or	r24, r25
   136ba:	19 f4       	brne	.+6      	; 0x136c2 <Read_Config+0x868>
   136bc:	ff ef       	ldi	r31, 0xFF	; 255
   136be:	af 1a       	sub	r10, r31
   136c0:	bf 0a       	sbc	r11, r31
   136c2:	cf 57       	subi	r28, 0x7F	; 127
            }
            else if( (ind = token(ptr,"BLOCK_TIME")) )
   136c4:	df 4f       	sbci	r29, 0xFF	; 255
   136c6:	88 81       	ld	r24, Y
   136c8:	c1 58       	subi	r28, 0x81	; 129
   136ca:	d0 40       	sbci	r29, 0x00	; 0
   136cc:	d2 01       	movw	r26, r4
   136ce:	d2 96       	adiw	r26, 0x32	; 50
   136d0:	8c 93       	st	X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   136d2:	6f cc       	rjmp	.-1826   	; 0x12fb2 <Read_Config+0x158>
   136d4:	6a ea       	ldi	r22, 0xAA	; 170
   136d6:	7e e0       	ldi	r23, 0x0E	; 14
   136d8:	c6 01       	movw	r24, r12
   136da:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   136de:	00 97       	sbiw	r24, 0x00	; 0
   136e0:	f9 f0       	breq	.+62     	; 0x13720 <Read_Config+0x8c6>
   136e2:	fe 01       	movw	r30, r28
   136e4:	ef 57       	subi	r30, 0x7F	; 127
   136e6:	ff 4f       	sbci	r31, 0xFF	; 255
   136e8:	7f 01       	movw	r14, r30
   136ea:	0f ef       	ldi	r16, 0xFF	; 255
   136ec:	1f ef       	ldi	r17, 0xFF	; 255
   136ee:	20 e0       	ldi	r18, 0x00	; 0
   136f0:	30 e0       	ldi	r19, 0x00	; 0
   136f2:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   136f4:	50 e0       	ldi	r21, 0x00	; 0
   136f6:	ba 01       	movw	r22, r20
                SS80p->UNIT.BLOCK_TIME = val;
   136f8:	8c 0d       	add	r24, r12
   136fa:	9d 1d       	adc	r25, r13
   136fc:	ce d9       	rcall	.-3172   	; 0x12a9a <assign_value>
   136fe:	89 2b       	or	r24, r25
   13700:	19 f4       	brne	.+6      	; 0x13708 <Read_Config+0x8ae>
   13702:	ff ef       	ldi	r31, 0xFF	; 255
   13704:	af 1a       	sub	r10, r31
   13706:	bf 0a       	sbc	r11, r31
   13708:	cf 57       	subi	r28, 0x7F	; 127
   1370a:	df 4f       	sbci	r29, 0xFF	; 255
   1370c:	88 81       	ld	r24, Y
   1370e:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else if( (ind = token(ptr,"CONTINOUS_TRANSFER_RATE")) )
   13710:	c1 58       	subi	r28, 0x81	; 129
   13712:	d0 40       	sbci	r29, 0x00	; 0
   13714:	d2 01       	movw	r26, r4
   13716:	d4 96       	adiw	r26, 0x34	; 52
   13718:	9c 93       	st	X, r25
   1371a:	8e 93       	st	-X, r24
   1371c:	d3 97       	sbiw	r26, 0x33	; 51
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   1371e:	49 cc       	rjmp	.-1902   	; 0x12fb2 <Read_Config+0x158>
   13720:	65 eb       	ldi	r22, 0xB5	; 181
   13722:	7e e0       	ldi	r23, 0x0E	; 14
   13724:	c6 01       	movw	r24, r12
   13726:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   1372a:	00 97       	sbiw	r24, 0x00	; 0
   1372c:	f9 f0       	breq	.+62     	; 0x1376c <Read_Config+0x912>
   1372e:	fe 01       	movw	r30, r28
   13730:	ef 57       	subi	r30, 0x7F	; 127
   13732:	ff 4f       	sbci	r31, 0xFF	; 255
   13734:	7f 01       	movw	r14, r30
   13736:	0f ef       	ldi	r16, 0xFF	; 255
   13738:	1f ef       	ldi	r17, 0xFF	; 255
   1373a:	20 e0       	ldi	r18, 0x00	; 0
   1373c:	30 e0       	ldi	r19, 0x00	; 0
   1373e:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   13740:	50 e0       	ldi	r21, 0x00	; 0
   13742:	ba 01       	movw	r22, r20
                SS80p->UNIT.CONTINOUS_TRANSFER_RATE = val;
   13744:	8c 0d       	add	r24, r12
   13746:	9d 1d       	adc	r25, r13
   13748:	a8 d9       	rcall	.-3248   	; 0x12a9a <assign_value>
   1374a:	89 2b       	or	r24, r25
   1374c:	19 f4       	brne	.+6      	; 0x13754 <Read_Config+0x8fa>
   1374e:	ff ef       	ldi	r31, 0xFF	; 255
   13750:	af 1a       	sub	r10, r31
   13752:	bf 0a       	sbc	r11, r31
   13754:	cf 57       	subi	r28, 0x7F	; 127
   13756:	df 4f       	sbci	r29, 0xFF	; 255
   13758:	88 81       	ld	r24, Y
   1375a:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else if( (ind = token(ptr,"OPTIMAL_RETRY_TIME")) )
   1375c:	c1 58       	subi	r28, 0x81	; 129
   1375e:	d0 40       	sbci	r29, 0x00	; 0
   13760:	d2 01       	movw	r26, r4
   13762:	d6 96       	adiw	r26, 0x36	; 54
   13764:	9c 93       	st	X, r25
   13766:	8e 93       	st	-X, r24
   13768:	d5 97       	sbiw	r26, 0x35	; 53
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   1376a:	23 cc       	rjmp	.-1978   	; 0x12fb2 <Read_Config+0x158>
   1376c:	6d ec       	ldi	r22, 0xCD	; 205
   1376e:	7e e0       	ldi	r23, 0x0E	; 14
   13770:	c6 01       	movw	r24, r12
   13772:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13776:	00 97       	sbiw	r24, 0x00	; 0
   13778:	f9 f0       	breq	.+62     	; 0x137b8 <Read_Config+0x95e>
   1377a:	fe 01       	movw	r30, r28
   1377c:	ef 57       	subi	r30, 0x7F	; 127
   1377e:	ff 4f       	sbci	r31, 0xFF	; 255
   13780:	7f 01       	movw	r14, r30
   13782:	0f ef       	ldi	r16, 0xFF	; 255
   13784:	1f ef       	ldi	r17, 0xFF	; 255
   13786:	20 e0       	ldi	r18, 0x00	; 0
   13788:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   1378a:	40 e0       	ldi	r20, 0x00	; 0
   1378c:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.OPTIMAL_RETRY_TIME = val;
   1378e:	ba 01       	movw	r22, r20
   13790:	8c 0d       	add	r24, r12
   13792:	9d 1d       	adc	r25, r13
   13794:	82 d9       	rcall	.-3324   	; 0x12a9a <assign_value>
   13796:	89 2b       	or	r24, r25
   13798:	19 f4       	brne	.+6      	; 0x137a0 <Read_Config+0x946>
   1379a:	ff ef       	ldi	r31, 0xFF	; 255
   1379c:	af 1a       	sub	r10, r31
   1379e:	bf 0a       	sbc	r11, r31
   137a0:	cf 57       	subi	r28, 0x7F	; 127
   137a2:	df 4f       	sbci	r29, 0xFF	; 255
   137a4:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"ACCESS_TIME")) )
   137a6:	99 81       	ldd	r25, Y+1	; 0x01
   137a8:	c1 58       	subi	r28, 0x81	; 129
   137aa:	d0 40       	sbci	r29, 0x00	; 0
   137ac:	d2 01       	movw	r26, r4
   137ae:	d8 96       	adiw	r26, 0x38	; 56
   137b0:	9c 93       	st	X, r25
   137b2:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   137b4:	d7 97       	sbiw	r26, 0x37	; 55
   137b6:	fd cb       	rjmp	.-2054   	; 0x12fb2 <Read_Config+0x158>
   137b8:	60 ee       	ldi	r22, 0xE0	; 224
   137ba:	7e e0       	ldi	r23, 0x0E	; 14
   137bc:	c6 01       	movw	r24, r12
   137be:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   137c2:	00 97       	sbiw	r24, 0x00	; 0
   137c4:	f9 f0       	breq	.+62     	; 0x13804 <Read_Config+0x9aa>
   137c6:	fe 01       	movw	r30, r28
   137c8:	ef 57       	subi	r30, 0x7F	; 127
   137ca:	ff 4f       	sbci	r31, 0xFF	; 255
   137cc:	7f 01       	movw	r14, r30
   137ce:	0f ef       	ldi	r16, 0xFF	; 255
   137d0:	1f ef       	ldi	r17, 0xFF	; 255
   137d2:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   137d4:	30 e0       	ldi	r19, 0x00	; 0
   137d6:	40 e0       	ldi	r20, 0x00	; 0
   137d8:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.ACCESS_TIME = val;
   137da:	ba 01       	movw	r22, r20
   137dc:	8c 0d       	add	r24, r12
   137de:	9d 1d       	adc	r25, r13
   137e0:	5c d9       	rcall	.-3400   	; 0x12a9a <assign_value>
   137e2:	89 2b       	or	r24, r25
   137e4:	19 f4       	brne	.+6      	; 0x137ec <Read_Config+0x992>
   137e6:	ff ef       	ldi	r31, 0xFF	; 255
   137e8:	af 1a       	sub	r10, r31
   137ea:	bf 0a       	sbc	r11, r31
   137ec:	cf 57       	subi	r28, 0x7F	; 127
   137ee:	df 4f       	sbci	r29, 0xFF	; 255
   137f0:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"MAXIMUM_INTERLEAVE")) )
   137f2:	99 81       	ldd	r25, Y+1	; 0x01
   137f4:	c1 58       	subi	r28, 0x81	; 129
   137f6:	d0 40       	sbci	r29, 0x00	; 0
   137f8:	d2 01       	movw	r26, r4
   137fa:	da 96       	adiw	r26, 0x3a	; 58
   137fc:	9c 93       	st	X, r25
   137fe:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13800:	d9 97       	sbiw	r26, 0x39	; 57
   13802:	d7 cb       	rjmp	.-2130   	; 0x12fb2 <Read_Config+0x158>
   13804:	6c ee       	ldi	r22, 0xEC	; 236
   13806:	7e e0       	ldi	r23, 0x0E	; 14
   13808:	c6 01       	movw	r24, r12
   1380a:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   1380e:	00 97       	sbiw	r24, 0x00	; 0
   13810:	e1 f0       	breq	.+56     	; 0x1384a <Read_Config+0x9f0>
   13812:	fe 01       	movw	r30, r28
   13814:	ef 57       	subi	r30, 0x7F	; 127
   13816:	ff 4f       	sbci	r31, 0xFF	; 255
   13818:	7f 01       	movw	r14, r30
   1381a:	0f ef       	ldi	r16, 0xFF	; 255
   1381c:	10 e0       	ldi	r17, 0x00	; 0
   1381e:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   13820:	30 e0       	ldi	r19, 0x00	; 0
   13822:	40 e0       	ldi	r20, 0x00	; 0
   13824:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.MAXIMUM_INTERLEAVE = val;
   13826:	ba 01       	movw	r22, r20
   13828:	8c 0d       	add	r24, r12
   1382a:	9d 1d       	adc	r25, r13
   1382c:	36 d9       	rcall	.-3476   	; 0x12a9a <assign_value>
   1382e:	89 2b       	or	r24, r25
   13830:	19 f4       	brne	.+6      	; 0x13838 <Read_Config+0x9de>
   13832:	ff ef       	ldi	r31, 0xFF	; 255
   13834:	af 1a       	sub	r10, r31
   13836:	bf 0a       	sbc	r11, r31
            }
            else if( (ind = token(ptr,"FIXED_VOLUMES")) )
   13838:	cf 57       	subi	r28, 0x7F	; 127
   1383a:	df 4f       	sbci	r29, 0xFF	; 255
   1383c:	88 81       	ld	r24, Y
   1383e:	c1 58       	subi	r28, 0x81	; 129
   13840:	d0 40       	sbci	r29, 0x00	; 0
   13842:	d2 01       	movw	r26, r4
   13844:	db 96       	adiw	r26, 0x3b	; 59
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13846:	8c 93       	st	X, r24
   13848:	b4 cb       	rjmp	.-2200   	; 0x12fb2 <Read_Config+0x158>
   1384a:	6f ef       	ldi	r22, 0xFF	; 255
   1384c:	7e e0       	ldi	r23, 0x0E	; 14
   1384e:	c6 01       	movw	r24, r12
   13850:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13854:	00 97       	sbiw	r24, 0x00	; 0
   13856:	e1 f0       	breq	.+56     	; 0x13890 <Read_Config+0xa36>
   13858:	fe 01       	movw	r30, r28
   1385a:	ef 57       	subi	r30, 0x7F	; 127
   1385c:	ff 4f       	sbci	r31, 0xFF	; 255
   1385e:	7f 01       	movw	r14, r30
   13860:	0f ef       	ldi	r16, 0xFF	; 255
   13862:	10 e0       	ldi	r17, 0x00	; 0
   13864:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   13866:	30 e0       	ldi	r19, 0x00	; 0
   13868:	40 e0       	ldi	r20, 0x00	; 0
   1386a:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.FIXED_VOLUMES = val;
   1386c:	ba 01       	movw	r22, r20
   1386e:	8c 0d       	add	r24, r12
   13870:	9d 1d       	adc	r25, r13
   13872:	13 d9       	rcall	.-3546   	; 0x12a9a <assign_value>
   13874:	89 2b       	or	r24, r25
   13876:	19 f4       	brne	.+6      	; 0x1387e <Read_Config+0xa24>
   13878:	ff ef       	ldi	r31, 0xFF	; 255
   1387a:	af 1a       	sub	r10, r31
   1387c:	bf 0a       	sbc	r11, r31
            }
            else if( (ind = token(ptr,"REMOVABLE_VOLUMES")) )
   1387e:	cf 57       	subi	r28, 0x7F	; 127
   13880:	df 4f       	sbci	r29, 0xFF	; 255
   13882:	88 81       	ld	r24, Y
   13884:	c1 58       	subi	r28, 0x81	; 129
   13886:	d0 40       	sbci	r29, 0x00	; 0
   13888:	d2 01       	movw	r26, r4
   1388a:	dc 96       	adiw	r26, 0x3c	; 60
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   1388c:	8c 93       	st	X, r24
   1388e:	91 cb       	rjmp	.-2270   	; 0x12fb2 <Read_Config+0x158>
   13890:	6d e0       	ldi	r22, 0x0D	; 13
   13892:	7f e0       	ldi	r23, 0x0F	; 15
   13894:	c6 01       	movw	r24, r12
   13896:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   1389a:	00 97       	sbiw	r24, 0x00	; 0
   1389c:	e1 f0       	breq	.+56     	; 0x138d6 <Read_Config+0xa7c>
   1389e:	fe 01       	movw	r30, r28
   138a0:	ef 57       	subi	r30, 0x7F	; 127
   138a2:	ff 4f       	sbci	r31, 0xFF	; 255
   138a4:	7f 01       	movw	r14, r30
   138a6:	0f ef       	ldi	r16, 0xFF	; 255
   138a8:	10 e0       	ldi	r17, 0x00	; 0
   138aa:	20 e0       	ldi	r18, 0x00	; 0
   138ac:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   138ae:	40 e0       	ldi	r20, 0x00	; 0
   138b0:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.REMOVABLE_VOLUMES = val;
   138b2:	ba 01       	movw	r22, r20
   138b4:	8c 0d       	add	r24, r12
   138b6:	9d 1d       	adc	r25, r13
   138b8:	f0 d8       	rcall	.-3616   	; 0x12a9a <assign_value>
   138ba:	89 2b       	or	r24, r25
   138bc:	19 f4       	brne	.+6      	; 0x138c4 <Read_Config+0xa6a>
   138be:	ff ef       	ldi	r31, 0xFF	; 255
   138c0:	af 1a       	sub	r10, r31
            }
            else
            {
                printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   138c2:	bf 0a       	sbc	r11, r31
   138c4:	cf 57       	subi	r28, 0x7F	; 127
   138c6:	df 4f       	sbci	r29, 0xFF	; 255
   138c8:	88 81       	ld	r24, Y
   138ca:	c1 58       	subi	r28, 0x81	; 129
   138cc:	d0 40       	sbci	r29, 0x00	; 0
   138ce:	d2 01       	movw	r26, r4
   138d0:	dd 96       	adiw	r26, 0x3d	; 61
   138d2:	8c 93       	st	X, r24
   138d4:	6e cb       	rjmp	.-2340   	; 0x12fb2 <Read_Config+0x158>
   138d6:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
                ++errors;
            }
            break;

        case SS80_VOLUME:
            if( (ind = token(ptr,"MAX_CYLINDER")) )
   138da:	8f 93       	push	r24
   138dc:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   138e0:	8f 93       	push	r24
   138e2:	df 92       	push	r13
   138e4:	cf 92       	push	r12
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   138e6:	86 e2       	ldi	r24, 0x26	; 38
   138e8:	9b e1       	ldi	r25, 0x1B	; 27
   138ea:	ba cc       	rjmp	.-1676   	; 0x13260 <Read_Config+0x406>
   138ec:	6f e1       	ldi	r22, 0x1F	; 31
   138ee:	7f e0       	ldi	r23, 0x0F	; 15
   138f0:	c6 01       	movw	r24, r12
   138f2:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   138f6:	00 97       	sbiw	r24, 0x00	; 0
   138f8:	e9 f0       	breq	.+58     	; 0x13934 <Read_Config+0xada>
   138fa:	9e 01       	movw	r18, r28
   138fc:	2f 57       	subi	r18, 0x7F	; 127
   138fe:	3f 4f       	sbci	r19, 0xFF	; 255
   13900:	79 01       	movw	r14, r18
   13902:	0f ef       	ldi	r16, 0xFF	; 255
                    ++errors;
   13904:	1f ef       	ldi	r17, 0xFF	; 255
   13906:	98 01       	movw	r18, r16
   13908:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_CYLINDER = val;
   1390a:	50 e0       	ldi	r21, 0x00	; 0
   1390c:	ba 01       	movw	r22, r20
   1390e:	8c 0d       	add	r24, r12
   13910:	9d 1d       	adc	r25, r13
   13912:	c3 d8       	rcall	.-3706   	; 0x12a9a <assign_value>
   13914:	89 2b       	or	r24, r25
   13916:	19 f4       	brne	.+6      	; 0x1391e <Read_Config+0xac4>
   13918:	3f ef       	ldi	r19, 0xFF	; 255
   1391a:	a3 1a       	sub	r10, r19
   1391c:	b3 0a       	sbc	r11, r19
   1391e:	cf 57       	subi	r28, 0x7F	; 127
            }
            else if( (ind = token(ptr,"MAX_HEAD")) )
   13920:	df 4f       	sbci	r29, 0xFF	; 255
   13922:	88 81       	ld	r24, Y
   13924:	99 81       	ldd	r25, Y+1	; 0x01
   13926:	aa 81       	ldd	r26, Y+2	; 0x02
   13928:	bb 81       	ldd	r27, Y+3	; 0x03
   1392a:	c1 58       	subi	r28, 0x81	; 129
   1392c:	d0 40       	sbci	r29, 0x00	; 0
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   1392e:	f2 01       	movw	r30, r4
   13930:	fe 96       	adiw	r30, 0x3e	; 62
   13932:	6e c0       	rjmp	.+220    	; 0x13a10 <Read_Config+0xbb6>
   13934:	6c e2       	ldi	r22, 0x2C	; 44
   13936:	7f e0       	ldi	r23, 0x0F	; 15
   13938:	c6 01       	movw	r24, r12
   1393a:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   1393e:	00 97       	sbiw	r24, 0x00	; 0
   13940:	e9 f0       	breq	.+58     	; 0x1397c <Read_Config+0xb22>
   13942:	de 01       	movw	r26, r28
   13944:	af 57       	subi	r26, 0x7F	; 127
   13946:	bf 4f       	sbci	r27, 0xFF	; 255
   13948:	7d 01       	movw	r14, r26
   1394a:	0f ef       	ldi	r16, 0xFF	; 255
   1394c:	10 e0       	ldi	r17, 0x00	; 0
                    ++errors;
   1394e:	20 e0       	ldi	r18, 0x00	; 0
   13950:	30 e0       	ldi	r19, 0x00	; 0
   13952:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_HEAD = val;
   13954:	50 e0       	ldi	r21, 0x00	; 0
   13956:	ba 01       	movw	r22, r20
   13958:	8c 0d       	add	r24, r12
   1395a:	9d 1d       	adc	r25, r13
   1395c:	9e d8       	rcall	.-3780   	; 0x12a9a <assign_value>
   1395e:	89 2b       	or	r24, r25
   13960:	19 f4       	brne	.+6      	; 0x13968 <Read_Config+0xb0e>
   13962:	bf ef       	ldi	r27, 0xFF	; 255
   13964:	ab 1a       	sub	r10, r27
   13966:	bb 0a       	sbc	r11, r27
            }
            else if( (ind = token(ptr,"MAX_SECTOR")) )
   13968:	cf 57       	subi	r28, 0x7F	; 127
   1396a:	df 4f       	sbci	r29, 0xFF	; 255
   1396c:	88 81       	ld	r24, Y
   1396e:	c1 58       	subi	r28, 0x81	; 129
   13970:	d0 40       	sbci	r29, 0x00	; 0
   13972:	f2 01       	movw	r30, r4
   13974:	ee 5b       	subi	r30, 0xBE	; 190
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13976:	ff 4f       	sbci	r31, 0xFF	; 255
   13978:	80 83       	st	Z, r24
   1397a:	1b cb       	rjmp	.-2506   	; 0x12fb2 <Read_Config+0x158>
   1397c:	65 e3       	ldi	r22, 0x35	; 53
   1397e:	7f e0       	ldi	r23, 0x0F	; 15
   13980:	c6 01       	movw	r24, r12
   13982:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13986:	00 97       	sbiw	r24, 0x00	; 0
   13988:	f9 f0       	breq	.+62     	; 0x139c8 <Read_Config+0xb6e>
   1398a:	fe 01       	movw	r30, r28
   1398c:	ef 57       	subi	r30, 0x7F	; 127
   1398e:	ff 4f       	sbci	r31, 0xFF	; 255
   13990:	7f 01       	movw	r14, r30
   13992:	0f ef       	ldi	r16, 0xFF	; 255
   13994:	1f ef       	ldi	r17, 0xFF	; 255
                    ++errors;
   13996:	20 e0       	ldi	r18, 0x00	; 0
   13998:	30 e0       	ldi	r19, 0x00	; 0
   1399a:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_SECTOR = val;
   1399c:	50 e0       	ldi	r21, 0x00	; 0
   1399e:	ba 01       	movw	r22, r20
   139a0:	8c 0d       	add	r24, r12
   139a2:	9d 1d       	adc	r25, r13
   139a4:	7a d8       	rcall	.-3852   	; 0x12a9a <assign_value>
   139a6:	89 2b       	or	r24, r25
   139a8:	19 f4       	brne	.+6      	; 0x139b0 <Read_Config+0xb56>
   139aa:	ff ef       	ldi	r31, 0xFF	; 255
   139ac:	af 1a       	sub	r10, r31
   139ae:	bf 0a       	sbc	r11, r31
   139b0:	cf 57       	subi	r28, 0x7F	; 127
   139b2:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"MAX_BLOCK_NUMBER")) )
   139b4:	88 81       	ld	r24, Y
   139b6:	99 81       	ldd	r25, Y+1	; 0x01
   139b8:	c1 58       	subi	r28, 0x81	; 129
   139ba:	d0 40       	sbci	r29, 0x00	; 0
   139bc:	f2 01       	movw	r30, r4
   139be:	ed 5b       	subi	r30, 0xBD	; 189
   139c0:	ff 4f       	sbci	r31, 0xFF	; 255
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   139c2:	91 83       	std	Z+1, r25	; 0x01
   139c4:	80 83       	st	Z, r24
   139c6:	f5 ca       	rjmp	.-2582   	; 0x12fb2 <Read_Config+0x158>
   139c8:	60 e4       	ldi	r22, 0x40	; 64
   139ca:	7f e0       	ldi	r23, 0x0F	; 15
   139cc:	c6 01       	movw	r24, r12
   139ce:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   139d2:	00 97       	sbiw	r24, 0x00	; 0
   139d4:	11 f1       	breq	.+68     	; 0x13a1a <Read_Config+0xbc0>
   139d6:	9e 01       	movw	r18, r28
   139d8:	2f 57       	subi	r18, 0x7F	; 127
   139da:	3f 4f       	sbci	r19, 0xFF	; 255
   139dc:	79 01       	movw	r14, r18
   139de:	0f ef       	ldi	r16, 0xFF	; 255
                    ++errors;
   139e0:	1f ef       	ldi	r17, 0xFF	; 255
   139e2:	98 01       	movw	r18, r16
   139e4:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_BLOCK_NUMBER = val;
   139e6:	50 e0       	ldi	r21, 0x00	; 0
   139e8:	ba 01       	movw	r22, r20
   139ea:	8c 0d       	add	r24, r12
   139ec:	9d 1d       	adc	r25, r13
   139ee:	55 d8       	rcall	.-3926   	; 0x12a9a <assign_value>
   139f0:	89 2b       	or	r24, r25
   139f2:	19 f4       	brne	.+6      	; 0x139fa <Read_Config+0xba0>
   139f4:	3f ef       	ldi	r19, 0xFF	; 255
   139f6:	a3 1a       	sub	r10, r19
   139f8:	b3 0a       	sbc	r11, r19
   139fa:	cf 57       	subi	r28, 0x7F	; 127
   139fc:	df 4f       	sbci	r29, 0xFF	; 255
   139fe:	88 81       	ld	r24, Y
   13a00:	99 81       	ldd	r25, Y+1	; 0x01
   13a02:	aa 81       	ldd	r26, Y+2	; 0x02
   13a04:	bb 81       	ldd	r27, Y+3	; 0x03
            }
            else if( (ind = token(ptr,"INTERLEAVE")) )
   13a06:	c1 58       	subi	r28, 0x81	; 129
   13a08:	d0 40       	sbci	r29, 0x00	; 0
   13a0a:	f2 01       	movw	r30, r4
   13a0c:	eb 5b       	subi	r30, 0xBB	; 187
   13a0e:	ff 4f       	sbci	r31, 0xFF	; 255
   13a10:	80 83       	st	Z, r24
   13a12:	91 83       	std	Z+1, r25	; 0x01
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13a14:	a2 83       	std	Z+2, r26	; 0x02
   13a16:	b3 83       	std	Z+3, r27	; 0x03
   13a18:	cc ca       	rjmp	.-2664   	; 0x12fb2 <Read_Config+0x158>
   13a1a:	64 ef       	ldi	r22, 0xF4	; 244
   13a1c:	7e e0       	ldi	r23, 0x0E	; 14
   13a1e:	c6 01       	movw	r24, r12
   13a20:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13a24:	00 97       	sbiw	r24, 0x00	; 0
   13a26:	e1 f0       	breq	.+56     	; 0x13a60 <Read_Config+0xc06>
   13a28:	de 01       	movw	r26, r28
   13a2a:	af 57       	subi	r26, 0x7F	; 127
   13a2c:	bf 4f       	sbci	r27, 0xFF	; 255
   13a2e:	7d 01       	movw	r14, r26
   13a30:	0f ef       	ldi	r16, 0xFF	; 255
   13a32:	10 e0       	ldi	r17, 0x00	; 0
   13a34:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   13a36:	30 e0       	ldi	r19, 0x00	; 0
   13a38:	40 e0       	ldi	r20, 0x00	; 0
   13a3a:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->VOLUME.INTERLEAVE = val;
   13a3c:	ba 01       	movw	r22, r20
   13a3e:	8c 0d       	add	r24, r12
   13a40:	9d 1d       	adc	r25, r13
   13a42:	2b d8       	rcall	.-4010   	; 0x12a9a <assign_value>
   13a44:	89 2b       	or	r24, r25
   13a46:	19 f4       	brne	.+6      	; 0x13a4e <Read_Config+0xbf4>
   13a48:	bf ef       	ldi	r27, 0xFF	; 255
   13a4a:	ab 1a       	sub	r10, r27
   13a4c:	bb 0a       	sbc	r11, r27

            }
            else
            {
                printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13a4e:	cf 57       	subi	r28, 0x7F	; 127
   13a50:	df 4f       	sbci	r29, 0xFF	; 255
   13a52:	88 81       	ld	r24, Y
   13a54:	c1 58       	subi	r28, 0x81	; 129
   13a56:	d0 40       	sbci	r29, 0x00	; 0
   13a58:	f2 01       	movw	r30, r4
   13a5a:	e7 5b       	subi	r30, 0xB7	; 183
   13a5c:	ff 4f       	sbci	r31, 0xFF	; 255
   13a5e:	8c cf       	rjmp	.-232    	; 0x13978 <Read_Config+0xb1e>
   13a60:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13a64:	8f 93       	push	r24
   13a66:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   13a6a:	8f 93       	push	r24
                ++errors;
   13a6c:	df 92       	push	r13
   13a6e:	cf 92       	push	r12
   13a70:	88 ef       	ldi	r24, 0xF8	; 248
   13a72:	9a e1       	ldi	r25, 0x1A	; 26
            }
            break;

#ifdef AMIGO
        case AMIGO_STATE:
            if(token(ptr,"HEADER"))
   13a74:	1f 92       	push	r1
   13a76:	9f 93       	push	r25
   13a78:	8f 93       	push	r24
   13a7a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   13a7e:	ef ef       	ldi	r30, 0xFF	; 255
   13a80:	ae 1a       	sub	r10, r30
            {
                push_state(state);
   13a82:	be 0a       	sbc	r11, r30
   13a84:	12 c2       	rjmp	.+1060   	; 0x13eaa <Read_Config+0x1050>
   13a86:	6d e2       	ldi	r22, 0x2D	; 45
   13a88:	7e e0       	ldi	r23, 0x0E	; 14
                state = AMIGO_HEADER;
   13a8a:	c6 01       	movw	r24, r12
   13a8c:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13a90:	89 2b       	or	r24, r25
            }
            else if(token(ptr,"CONFIG"))
   13a92:	41 f0       	breq	.+16     	; 0x13aa4 <Read_Config+0xc4a>
   13a94:	8a e0       	ldi	r24, 0x0A	; 10
   13a96:	90 e0       	ldi	r25, 0x00	; 0
   13a98:	0e 94 1d 95 	call	0x12a3a	; 0x12a3a <push_state>
   13a9c:	2b e0       	ldi	r18, 0x0B	; 11
   13a9e:	62 2e       	mov	r6, r18
            {
                push_state(state);
   13aa0:	71 2c       	mov	r7, r1
   13aa2:	87 ca       	rjmp	.-2802   	; 0x12fb2 <Read_Config+0x158>
   13aa4:	66 e2       	ldi	r22, 0x26	; 38
   13aa6:	7e e0       	ldi	r23, 0x0E	; 14
                state = AMIGO_CONFIG;
   13aa8:	c6 01       	movw	r24, r12
   13aaa:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13aae:	89 2b       	or	r24, r25
            }
            else if(token(ptr,"GEOMETRY"))
   13ab0:	41 f0       	breq	.+16     	; 0x13ac2 <Read_Config+0xc68>
   13ab2:	8a e0       	ldi	r24, 0x0A	; 10
   13ab4:	90 e0       	ldi	r25, 0x00	; 0
   13ab6:	0e 94 1d 95 	call	0x12a3a	; 0x12a3a <push_state>
   13aba:	9c e0       	ldi	r25, 0x0C	; 12
   13abc:	69 2e       	mov	r6, r25
            {
                push_state(state);
   13abe:	71 2c       	mov	r7, r1
   13ac0:	78 ca       	rjmp	.-2832   	; 0x12fb2 <Read_Config+0x158>
   13ac2:	61 e5       	ldi	r22, 0x51	; 81
   13ac4:	7f e0       	ldi	r23, 0x0F	; 15
                state = AMIGO_GEOMETRY;
   13ac6:	c6 01       	movw	r24, r12
   13ac8:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13acc:	89 2b       	or	r24, r25
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13ace:	41 f0       	breq	.+16     	; 0x13ae0 <Read_Config+0xc86>
   13ad0:	8a e0       	ldi	r24, 0x0A	; 10
   13ad2:	90 e0       	ldi	r25, 0x00	; 0
   13ad4:	0e 94 1d 95 	call	0x12a3a	; 0x12a3a <push_state>
   13ad8:	8d e0       	ldi	r24, 0x0D	; 13
   13ada:	68 2e       	mov	r6, r24
   13adc:	71 2c       	mov	r7, r1
   13ade:	69 ca       	rjmp	.-2862   	; 0x12fb2 <Read_Config+0x158>
   13ae0:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13ae4:	8f 93       	push	r24
   13ae6:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
                ++errors;
            }
            break;

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
   13aea:	8f 93       	push	r24
   13aec:	df 92       	push	r13
   13aee:	cf 92       	push	r12
   13af0:	8a ec       	ldi	r24, 0xCA	; 202
   13af2:	9a e1       	ldi	r25, 0x1A	; 26
   13af4:	1f 92       	push	r1
   13af6:	9f 93       	push	r25
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   13af8:	8f 93       	push	r24
   13afa:	e8 c0       	rjmp	.+464    	; 0x13ccc <Read_Config+0xe72>
   13afc:	6a e5       	ldi	r22, 0x5A	; 90
   13afe:	7f e0       	ldi	r23, 0x0F	; 15
   13b00:	c6 01       	movw	r24, r12
   13b02:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13b06:	00 97       	sbiw	r24, 0x00	; 0
   13b08:	d1 f0       	breq	.+52     	; 0x13b3e <Read_Config+0xce4>
   13b0a:	20 91 60 18 	lds	r18, 0x1860	; 0x801860 <lines+0x1>
   13b0e:	2f 93       	push	r18
   13b10:	20 91 5f 18 	lds	r18, 0x185F	; 0x80185f <lines>
   13b14:	2f 93       	push	r18
   13b16:	c8 0e       	add	r12, r24
   13b18:	d9 1e       	adc	r13, r25
   13b1a:	df 92       	push	r13
   13b1c:	cf 92       	push	r12
   13b1e:	1f 92       	push	r1
   13b20:	c7 56       	subi	r28, 0x67	; 103
   13b22:	df 4f       	sbci	r29, 0xFF	; 255
   13b24:	98 81       	ld	r25, Y
   13b26:	c9 59       	subi	r28, 0x99	; 153
   13b28:	d0 40       	sbci	r29, 0x00	; 0
   13b2a:	9f 93       	push	r25
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
   13b2c:	c8 56       	subi	r28, 0x68	; 104
   13b2e:	df 4f       	sbci	r29, 0xFF	; 255
   13b30:	a8 81       	ld	r26, Y
   13b32:	c8 59       	subi	r28, 0x98	; 152
   13b34:	d0 40       	sbci	r29, 0x00	; 0
   13b36:	af 93       	push	r26
   13b38:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14UL, &val) )
   13b3c:	b6 c1       	rjmp	.+876    	; 0x13eaa <Read_Config+0x1050>
   13b3e:	6e e1       	ldi	r22, 0x1E	; 30
   13b40:	7e e0       	ldi	r23, 0x0E	; 14
   13b42:	c6 01       	movw	r24, r12
   13b44:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13b48:	00 97       	sbiw	r24, 0x00	; 0
   13b4a:	39 f1       	breq	.+78     	; 0x13b9a <Read_Config+0xd40>
   13b4c:	9e 01       	movw	r18, r28
   13b4e:	2f 57       	subi	r18, 0x7F	; 127
   13b50:	3f 4f       	sbci	r19, 0xFF	; 255
   13b52:	79 01       	movw	r14, r18
   13b54:	0e e0       	ldi	r16, 0x0E	; 14
   13b56:	10 e0       	ldi	r17, 0x00	; 0
   13b58:	20 e0       	ldi	r18, 0x00	; 0
   13b5a:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13b5c:	40 e0       	ldi	r20, 0x00	; 0
   13b5e:	50 e0       	ldi	r21, 0x00	; 0
   13b60:	ba 01       	movw	r22, r20
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   13b62:	8c 0d       	add	r24, r12
   13b64:	9d 1d       	adc	r25, r13
                if (!assign_value(ptr, 0, 14UL, &val) )
                    ++errors;
                else
                    tmp = val;
   13b66:	0e 94 4d 95 	call	0x12a9a	; 0x12a9a <assign_value>
   13b6a:	89 2b       	or	r24, r25
   13b6c:	29 f4       	brne	.+10     	; 0x13b78 <Read_Config+0xd1e>
   13b6e:	3f ef       	ldi	r19, 0xFF	; 255
                Devices[index].ADDRESS = tmp;
   13b70:	a3 1a       	sub	r10, r19
   13b72:	b3 0a       	sbc	r11, r19
   13b74:	8f ef       	ldi	r24, 0xFF	; 255
   13b76:	05 c0       	rjmp	.+10     	; 0x13b82 <Read_Config+0xd28>
   13b78:	cf 57       	subi	r28, 0x7F	; 127
   13b7a:	df 4f       	sbci	r29, 0xFF	; 255
   13b7c:	88 81       	ld	r24, Y
   13b7e:	c1 58       	subi	r28, 0x81	; 129
   13b80:	d0 40       	sbci	r29, 0x00	; 0
                AMIGOp->HEADER.ADDRESS = tmp;
   13b82:	9b e2       	ldi	r25, 0x2B	; 43
   13b84:	98 9d       	mul	r25, r8
   13b86:	f0 01       	movw	r30, r0
            }
            else if( (ind = token(ptr,"PPR")) )
   13b88:	99 9d       	mul	r25, r9
   13b8a:	f0 0d       	add	r31, r0
   13b8c:	11 24       	eor	r1, r1
   13b8e:	e4 51       	subi	r30, 0x14	; 20
   13b90:	f2 4e       	sbci	r31, 0xE2	; 226
   13b92:	81 83       	std	Z+1, r24	; 0x01
   13b94:	d1 01       	movw	r26, r2
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7UL, &val) )
   13b96:	8c 93       	st	X, r24
   13b98:	0c ca       	rjmp	.-3048   	; 0x12fb2 <Read_Config+0x158>
   13b9a:	6b e4       	ldi	r22, 0x4B	; 75
   13b9c:	7e e0       	ldi	r23, 0x0E	; 14
   13b9e:	c6 01       	movw	r24, r12
   13ba0:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13ba4:	00 97       	sbiw	r24, 0x00	; 0
   13ba6:	31 f1       	breq	.+76     	; 0x13bf4 <Read_Config+0xd9a>
   13ba8:	fe 01       	movw	r30, r28
   13baa:	ef 57       	subi	r30, 0x7F	; 127
   13bac:	ff 4f       	sbci	r31, 0xFF	; 255
   13bae:	7f 01       	movw	r14, r30
   13bb0:	07 e0       	ldi	r16, 0x07	; 7
   13bb2:	10 e0       	ldi	r17, 0x00	; 0
   13bb4:	20 e0       	ldi	r18, 0x00	; 0
   13bb6:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13bb8:	40 e0       	ldi	r20, 0x00	; 0
   13bba:	50 e0       	ldi	r21, 0x00	; 0
   13bbc:	ba 01       	movw	r22, r20
                AMIGOp->HEADER.ADDRESS = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   13bbe:	8c 0d       	add	r24, r12
   13bc0:	9d 1d       	adc	r25, r13
                if (!assign_value(ptr, 0, 7UL, &val) )
                    ++errors;
                else
                    tmp = val;
   13bc2:	0e 94 4d 95 	call	0x12a9a	; 0x12a9a <assign_value>
   13bc6:	89 2b       	or	r24, r25
   13bc8:	29 f4       	brne	.+10     	; 0x13bd4 <Read_Config+0xd7a>
   13bca:	ff ef       	ldi	r31, 0xFF	; 255
                Devices[index].PPR = tmp;
   13bcc:	af 1a       	sub	r10, r31
   13bce:	bf 0a       	sbc	r11, r31
   13bd0:	8f ef       	ldi	r24, 0xFF	; 255
   13bd2:	05 c0       	rjmp	.+10     	; 0x13bde <Read_Config+0xd84>
   13bd4:	cf 57       	subi	r28, 0x7F	; 127
   13bd6:	df 4f       	sbci	r29, 0xFF	; 255
   13bd8:	88 81       	ld	r24, Y
   13bda:	c1 58       	subi	r28, 0x81	; 129
   13bdc:	d0 40       	sbci	r29, 0x00	; 0
                AMIGOp->HEADER.PPR = tmp;
   13bde:	9b e2       	ldi	r25, 0x2B	; 43
   13be0:	98 9d       	mul	r25, r8
            }
            else if( (ind = token(ptr,"FILE")) )
   13be2:	f0 01       	movw	r30, r0
   13be4:	99 9d       	mul	r25, r9
   13be6:	f0 0d       	add	r31, r0
   13be8:	11 24       	eor	r1, r1
   13bea:	e4 51       	subi	r30, 0x14	; 20
   13bec:	f2 4e       	sbci	r31, 0xE2	; 226
   13bee:	82 83       	std	Z+2, r24	; 0x02
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   13bf0:	d1 01       	movw	r26, r2
   13bf2:	ea cb       	rjmp	.-2092   	; 0x133c8 <Read_Config+0x56e>
   13bf4:	6f e4       	ldi	r22, 0x4F	; 79
   13bf6:	7e e0       	ldi	r23, 0x0E	; 14
                if(*ptr == '=')
   13bf8:	c6 01       	movw	r24, r12
   13bfa:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13bfe:	00 97       	sbiw	r24, 0x00	; 0
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   13c00:	b1 f0       	breq	.+44     	; 0x13c2e <Read_Config+0xdd4>
   13c02:	8c 0d       	add	r24, r12
   13c04:	9d 1d       	adc	r25, r13
                }
                strncpy(AMIGOp->HEADER.NAME, ptr, sizeof(AMIGOp->HEADER.NAME)-1);
   13c06:	0e 94 0b 32 	call	0x6416	; 0x6416 <skipspaces>
   13c0a:	fc 01       	movw	r30, r24
   13c0c:	20 81       	ld	r18, Z
   13c0e:	2d 33       	cpi	r18, 0x3D	; 61
   13c10:	19 f4       	brne	.+6      	; 0x13c18 <Read_Config+0xdbe>
   13c12:	01 96       	adiw	r24, 0x01	; 1
                AMIGOp->HEADER.NAME[sizeof(AMIGOp->HEADER.NAME)-1] = 0;
   13c14:	0e 94 0b 32 	call	0x6416	; 0x6416 <skipspaces>
   13c18:	40 e2       	ldi	r20, 0x20	; 32
   13c1a:	50 e0       	ldi	r21, 0x00	; 0
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13c1c:	bc 01       	movw	r22, r24
   13c1e:	c1 01       	movw	r24, r2
   13c20:	02 96       	adiw	r24, 0x02	; 2
   13c22:	0e 94 ac 31 	call	0x6358	; 0x6358 <strncpy>
   13c26:	d1 01       	movw	r26, r2
   13c28:	92 96       	adiw	r26, 0x22	; 34
   13c2a:	1c 92       	st	X, r1
   13c2c:	c2 c9       	rjmp	.-3196   	; 0x12fb2 <Read_Config+0x158>
   13c2e:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13c32:	8f 93       	push	r24
   13c34:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   13c38:	8f 93       	push	r24
   13c3a:	df 92       	push	r13
   13c3c:	cf 92       	push	r12
   13c3e:	1f 92       	push	r1
   13c40:	ca 56       	subi	r28, 0x6A	; 106
   13c42:	df 4f       	sbci	r29, 0xFF	; 255
   13c44:	b8 81       	ld	r27, Y
                ++errors;
            }
            break;

        case AMIGO_CONFIG:
            if( (ind = token(ptr,"ID")) )
   13c46:	c6 59       	subi	r28, 0x96	; 150
   13c48:	d0 40       	sbci	r29, 0x00	; 0
   13c4a:	bf 93       	push	r27
   13c4c:	cb 56       	subi	r28, 0x6B	; 107
   13c4e:	df 4f       	sbci	r29, 0xFF	; 255
   13c50:	e8 81       	ld	r30, Y
   13c52:	c5 59       	subi	r28, 0x95	; 149
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13c54:	d0 40       	sbci	r29, 0x00	; 0
   13c56:	08 c1       	rjmp	.+528    	; 0x13e68 <Read_Config+0x100e>
   13c58:	64 e5       	ldi	r22, 0x54	; 84
   13c5a:	7e e0       	ldi	r23, 0x0E	; 14
   13c5c:	c6 01       	movw	r24, r12
   13c5e:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13c62:	00 97       	sbiw	r24, 0x00	; 0
   13c64:	f1 f0       	breq	.+60     	; 0x13ca2 <Read_Config+0xe48>
   13c66:	de 01       	movw	r26, r28
   13c68:	af 57       	subi	r26, 0x7F	; 127
   13c6a:	bf 4f       	sbci	r27, 0xFF	; 255
   13c6c:	7d 01       	movw	r14, r26
   13c6e:	0f ef       	ldi	r16, 0xFF	; 255
   13c70:	1f ef       	ldi	r17, 0xFF	; 255
   13c72:	20 e0       	ldi	r18, 0x00	; 0
   13c74:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13c76:	40 e0       	ldi	r20, 0x00	; 0
   13c78:	50 e0       	ldi	r21, 0x00	; 0
   13c7a:	ba 01       	movw	r22, r20
                AMIGOp->CONFIG.ID = val;
   13c7c:	8c 0d       	add	r24, r12
   13c7e:	9d 1d       	adc	r25, r13
   13c80:	0e 94 4d 95 	call	0x12a9a	; 0x12a9a <assign_value>
   13c84:	89 2b       	or	r24, r25
   13c86:	19 f4       	brne	.+6      	; 0x13c8e <Read_Config+0xe34>
   13c88:	bf ef       	ldi	r27, 0xFF	; 255
   13c8a:	ab 1a       	sub	r10, r27
   13c8c:	bb 0a       	sbc	r11, r27
   13c8e:	cf 57       	subi	r28, 0x7F	; 127
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13c90:	df 4f       	sbci	r29, 0xFF	; 255
   13c92:	88 81       	ld	r24, Y
   13c94:	99 81       	ldd	r25, Y+1	; 0x01
   13c96:	c1 58       	subi	r28, 0x81	; 129
   13c98:	d0 40       	sbci	r29, 0x00	; 0
   13c9a:	f1 01       	movw	r30, r2
   13c9c:	94 a3       	std	Z+36, r25	; 0x24
   13c9e:	83 a3       	std	Z+35, r24	; 0x23
   13ca0:	88 c9       	rjmp	.-3312   	; 0x12fb2 <Read_Config+0x158>
   13ca2:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13ca6:	8f 93       	push	r24
   13ca8:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   13cac:	8f 93       	push	r24
   13cae:	df 92       	push	r13
   13cb0:	cf 92       	push	r12
   13cb2:	1f 92       	push	r1
   13cb4:	cd 56       	subi	r28, 0x6D	; 109
   13cb6:	df 4f       	sbci	r29, 0xFF	; 255
   13cb8:	f8 81       	ld	r31, Y
   13cba:	c3 59       	subi	r28, 0x93	; 147
   13cbc:	d0 40       	sbci	r29, 0x00	; 0
                ++errors;
   13cbe:	ff 93       	push	r31
   13cc0:	ce 56       	subi	r28, 0x6E	; 110
   13cc2:	df 4f       	sbci	r29, 0xFF	; 255
   13cc4:	28 81       	ld	r18, Y
            }
            break;

        case AMIGO_GEOMETRY:
            if( (ind = token(ptr,"BYTES_PER_SECTOR")) )
   13cc6:	c2 59       	subi	r28, 0x92	; 146
   13cc8:	d0 40       	sbci	r29, 0x00	; 0
   13cca:	2f 93       	push	r18
   13ccc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   13cd0:	3f ef       	ldi	r19, 0xFF	; 255
   13cd2:	a3 1a       	sub	r10, r19
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   13cd4:	b3 0a       	sbc	r11, r19
   13cd6:	e9 c0       	rjmp	.+466    	; 0x13eaa <Read_Config+0x1050>
   13cd8:	60 e6       	ldi	r22, 0x60	; 96
   13cda:	7f e0       	ldi	r23, 0x0F	; 15
   13cdc:	c6 01       	movw	r24, r12
   13cde:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13ce2:	00 97       	sbiw	r24, 0x00	; 0
   13ce4:	c1 f1       	breq	.+112    	; 0x13d56 <Read_Config+0xefc>
   13ce6:	de 01       	movw	r26, r28
   13ce8:	af 57       	subi	r26, 0x7F	; 127
   13cea:	bf 4f       	sbci	r27, 0xFF	; 255
   13cec:	7d 01       	movw	r14, r26
   13cee:	00 e0       	ldi	r16, 0x00	; 0
   13cf0:	10 e1       	ldi	r17, 0x10	; 16
   13cf2:	20 e0       	ldi	r18, 0x00	; 0
   13cf4:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13cf6:	40 e0       	ldi	r20, 0x00	; 0
   13cf8:	50 e0       	ldi	r21, 0x00	; 0
   13cfa:	ba 01       	movw	r22, r20
printf("BYTES PER SECTOR: %s\n", token);
   13cfc:	8c 0d       	add	r24, r12
   13cfe:	9d 1d       	adc	r25, r13
   13d00:	0e 94 4d 95 	call	0x12a9a	; 0x12a9a <assign_value>
   13d04:	89 2b       	or	r24, r25
   13d06:	19 f4       	brne	.+6      	; 0x13d0e <Read_Config+0xeb4>
   13d08:	bf ef       	ldi	r27, 0xFF	; 255
   13d0a:	ab 1a       	sub	r10, r27
   13d0c:	bb 0a       	sbc	r11, r27
   13d0e:	8e e8       	ldi	r24, 0x8E	; 142
   13d10:	93 e3       	ldi	r25, 0x33	; 51
   13d12:	9f 93       	push	r25
   13d14:	8f 93       	push	r24
   13d16:	1f 92       	push	r1
   13d18:	c0 57       	subi	r28, 0x70	; 112
   13d1a:	df 4f       	sbci	r29, 0xFF	; 255
   13d1c:	e8 81       	ld	r30, Y
   13d1e:	c0 59       	subi	r28, 0x90	; 144
   13d20:	d0 40       	sbci	r29, 0x00	; 0
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val;
   13d22:	ef 93       	push	r30
   13d24:	c1 57       	subi	r28, 0x71	; 113
   13d26:	df 4f       	sbci	r29, 0xFF	; 255
   13d28:	f8 81       	ld	r31, Y
   13d2a:	cf 58       	subi	r28, 0x8F	; 143
   13d2c:	d0 40       	sbci	r29, 0x00	; 0
   13d2e:	ff 93       	push	r31
   13d30:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   13d34:	cf 57       	subi	r28, 0x7F	; 127
   13d36:	df 4f       	sbci	r29, 0xFF	; 255
   13d38:	88 81       	ld	r24, Y
   13d3a:	99 81       	ldd	r25, Y+1	; 0x01
   13d3c:	c1 58       	subi	r28, 0x81	; 129
   13d3e:	d0 40       	sbci	r29, 0x00	; 0
   13d40:	d1 01       	movw	r26, r2
   13d42:	96 96       	adiw	r26, 0x26	; 38
            }
            else if( (ind = token(ptr,"SECTORS_PER_TRACK")) )
   13d44:	9c 93       	st	X, r25
   13d46:	8e 93       	st	-X, r24
   13d48:	95 97       	sbiw	r26, 0x25	; 37
   13d4a:	0f 90       	pop	r0
   13d4c:	0f 90       	pop	r0
   13d4e:	0f 90       	pop	r0
   13d50:	0f 90       	pop	r0
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13d52:	0f 90       	pop	r0
   13d54:	2e c9       	rjmp	.-3492   	; 0x12fb2 <Read_Config+0x158>
   13d56:	61 e7       	ldi	r22, 0x71	; 113
   13d58:	7f e0       	ldi	r23, 0x0F	; 15
   13d5a:	c6 01       	movw	r24, r12
   13d5c:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13d60:	00 97       	sbiw	r24, 0x00	; 0
   13d62:	01 f1       	breq	.+64     	; 0x13da4 <Read_Config+0xf4a>
   13d64:	fe 01       	movw	r30, r28
   13d66:	ef 57       	subi	r30, 0x7F	; 127
   13d68:	ff 4f       	sbci	r31, 0xFF	; 255
   13d6a:	7f 01       	movw	r14, r30
   13d6c:	0f ef       	ldi	r16, 0xFF	; 255
   13d6e:	10 e0       	ldi	r17, 0x00	; 0
   13d70:	20 e0       	ldi	r18, 0x00	; 0
   13d72:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13d74:	40 e0       	ldi	r20, 0x00	; 0
   13d76:	50 e0       	ldi	r21, 0x00	; 0
   13d78:	ba 01       	movw	r22, r20
                AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val;
   13d7a:	8c 0d       	add	r24, r12
   13d7c:	9d 1d       	adc	r25, r13
   13d7e:	0e 94 4d 95 	call	0x12a9a	; 0x12a9a <assign_value>
   13d82:	89 2b       	or	r24, r25
   13d84:	19 f4       	brne	.+6      	; 0x13d8c <Read_Config+0xf32>
   13d86:	ff ef       	ldi	r31, 0xFF	; 255
   13d88:	af 1a       	sub	r10, r31
   13d8a:	bf 0a       	sbc	r11, r31
   13d8c:	cf 57       	subi	r28, 0x7F	; 127
   13d8e:	df 4f       	sbci	r29, 0xFF	; 255
   13d90:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"HEADS")) )
   13d92:	99 81       	ldd	r25, Y+1	; 0x01
   13d94:	c1 58       	subi	r28, 0x81	; 129
   13d96:	d0 40       	sbci	r29, 0x00	; 0
   13d98:	d1 01       	movw	r26, r2
   13d9a:	98 96       	adiw	r26, 0x28	; 40
   13d9c:	9c 93       	st	X, r25
   13d9e:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13da0:	97 97       	sbiw	r26, 0x27	; 39
   13da2:	07 c9       	rjmp	.-3570   	; 0x12fb2 <Read_Config+0x158>
   13da4:	63 e8       	ldi	r22, 0x83	; 131
   13da6:	7f e0       	ldi	r23, 0x0F	; 15
   13da8:	c6 01       	movw	r24, r12
   13daa:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13dae:	00 97       	sbiw	r24, 0x00	; 0
   13db0:	01 f1       	breq	.+64     	; 0x13df2 <Read_Config+0xf98>
   13db2:	fe 01       	movw	r30, r28
   13db4:	ef 57       	subi	r30, 0x7F	; 127
   13db6:	ff 4f       	sbci	r31, 0xFF	; 255
   13db8:	7f 01       	movw	r14, r30
   13dba:	0f ef       	ldi	r16, 0xFF	; 255
   13dbc:	10 e0       	ldi	r17, 0x00	; 0
   13dbe:	20 e0       	ldi	r18, 0x00	; 0
   13dc0:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13dc2:	40 e0       	ldi	r20, 0x00	; 0
   13dc4:	50 e0       	ldi	r21, 0x00	; 0
   13dc6:	ba 01       	movw	r22, r20
                AMIGOp->GEOMETRY.HEADS = val;
   13dc8:	8c 0d       	add	r24, r12
   13dca:	9d 1d       	adc	r25, r13
   13dcc:	0e 94 4d 95 	call	0x12a9a	; 0x12a9a <assign_value>
   13dd0:	89 2b       	or	r24, r25
   13dd2:	19 f4       	brne	.+6      	; 0x13dda <Read_Config+0xf80>
   13dd4:	ff ef       	ldi	r31, 0xFF	; 255
   13dd6:	af 1a       	sub	r10, r31
   13dd8:	bf 0a       	sbc	r11, r31
   13dda:	cf 57       	subi	r28, 0x7F	; 127
   13ddc:	df 4f       	sbci	r29, 0xFF	; 255
   13dde:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"CYLINDERS")) )
   13de0:	99 81       	ldd	r25, Y+1	; 0x01
   13de2:	c1 58       	subi	r28, 0x81	; 129
   13de4:	d0 40       	sbci	r29, 0x00	; 0
   13de6:	d1 01       	movw	r26, r2
   13de8:	9a 96       	adiw	r26, 0x2a	; 42
   13dea:	9c 93       	st	X, r25
   13dec:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13dee:	99 97       	sbiw	r26, 0x29	; 41
   13df0:	e0 c8       	rjmp	.-3648   	; 0x12fb2 <Read_Config+0x158>
   13df2:	69 e8       	ldi	r22, 0x89	; 137
   13df4:	7f e0       	ldi	r23, 0x0F	; 15
   13df6:	c6 01       	movw	r24, r12
   13df8:	0e 94 8e 33 	call	0x671c	; 0x671c <token>
   13dfc:	00 97       	sbiw	r24, 0x00	; 0
   13dfe:	01 f1       	breq	.+64     	; 0x13e40 <Read_Config+0xfe6>
   13e00:	fe 01       	movw	r30, r28
   13e02:	ef 57       	subi	r30, 0x7F	; 127
   13e04:	ff 4f       	sbci	r31, 0xFF	; 255
   13e06:	7f 01       	movw	r14, r30
   13e08:	0f ef       	ldi	r16, 0xFF	; 255
   13e0a:	10 e0       	ldi	r17, 0x00	; 0
   13e0c:	20 e0       	ldi	r18, 0x00	; 0
   13e0e:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13e10:	40 e0       	ldi	r20, 0x00	; 0
   13e12:	50 e0       	ldi	r21, 0x00	; 0
   13e14:	ba 01       	movw	r22, r20
                AMIGOp->GEOMETRY.CYLINDERS = val;
   13e16:	8c 0d       	add	r24, r12
   13e18:	9d 1d       	adc	r25, r13
   13e1a:	0e 94 4d 95 	call	0x12a9a	; 0x12a9a <assign_value>
   13e1e:	89 2b       	or	r24, r25
   13e20:	19 f4       	brne	.+6      	; 0x13e28 <Read_Config+0xfce>
   13e22:	ff ef       	ldi	r31, 0xFF	; 255
   13e24:	af 1a       	sub	r10, r31
   13e26:	bf 0a       	sbc	r11, r31
   13e28:	cf 57       	subi	r28, 0x7F	; 127
   13e2a:	df 4f       	sbci	r29, 0xFF	; 255
   13e2c:	88 81       	ld	r24, Y
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13e2e:	99 81       	ldd	r25, Y+1	; 0x01
   13e30:	c1 58       	subi	r28, 0x81	; 129
   13e32:	d0 40       	sbci	r29, 0x00	; 0
   13e34:	d1 01       	movw	r26, r2
   13e36:	9c 96       	adiw	r26, 0x2c	; 44
   13e38:	9c 93       	st	X, r25
   13e3a:	8e 93       	st	-X, r24
   13e3c:	9b 97       	sbiw	r26, 0x2b	; 43
   13e3e:	b9 c8       	rjmp	.-3726   	; 0x12fb2 <Read_Config+0x158>
   13e40:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13e44:	8f 93       	push	r24
   13e46:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   13e4a:	8f 93       	push	r24
   13e4c:	df 92       	push	r13
   13e4e:	cf 92       	push	r12
   13e50:	1f 92       	push	r1
   13e52:	c3 57       	subi	r28, 0x73	; 115
   13e54:	df 4f       	sbci	r29, 0xFF	; 255
   13e56:	b8 81       	ld	r27, Y
   13e58:	cd 58       	subi	r28, 0x8D	; 141
   13e5a:	d0 40       	sbci	r29, 0x00	; 0
                ++errors;
   13e5c:	bf 93       	push	r27
   13e5e:	c4 57       	subi	r28, 0x74	; 116
   13e60:	df 4f       	sbci	r29, 0xFF	; 255
   13e62:	e8 81       	ld	r30, Y
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13e64:	cc 58       	subi	r28, 0x8C	; 140
   13e66:	d0 40       	sbci	r29, 0x00	; 0
   13e68:	ef 93       	push	r30
   13e6a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   13e6e:	ff ef       	ldi	r31, 0xFF	; 255
   13e70:	af 1a       	sub	r10, r31
   13e72:	bf 0a       	sbc	r11, r31
   13e74:	1a c0       	rjmp	.+52     	; 0x13eaa <Read_Config+0x1050>
   13e76:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13e7a:	8f 93       	push	r24
   13e7c:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   13e80:	8f 93       	push	r24
   13e82:	df 92       	push	r13
   13e84:	cf 92       	push	r12
   13e86:	1f 92       	push	r1
   13e88:	c6 57       	subi	r28, 0x76	; 118
   13e8a:	df 4f       	sbci	r29, 0xFF	; 255
   13e8c:	38 81       	ld	r19, Y
   13e8e:	ca 58       	subi	r28, 0x8A	; 138
   13e90:	d0 40       	sbci	r29, 0x00	; 0
            ++errors;
   13e92:	3f 93       	push	r19
   13e94:	c7 57       	subi	r28, 0x77	; 119
   13e96:	df 4f       	sbci	r29, 0xFF	; 255
            break;
   13e98:	48 81       	ld	r20, Y
   13e9a:	c9 58       	subi	r28, 0x89	; 137
   13e9c:	d0 40       	sbci	r29, 0x00	; 0
   13e9e:	4f 93       	push	r20
   13ea0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>

        } // switch
    } //while
    if(state != START_STATE)
   13ea4:	8f ef       	ldi	r24, 0xFF	; 255
   13ea6:	a8 1a       	sub	r10, r24
   13ea8:	b8 0a       	sbc	r11, r24
    {
        printf("Missing END statement at line:%d\n", lines);
   13eaa:	0f b6       	in	r0, 0x3f	; 63
   13eac:	f8 94       	cli
   13eae:	de bf       	out	0x3e, r29	; 62
   13eb0:	0f be       	out	0x3f, r0	; 63
   13eb2:	cd bf       	out	0x3d, r28	; 61
   13eb4:	7e c8       	rjmp	.-3844   	; 0x12fb2 <Read_Config+0x158>
   13eb6:	61 14       	cp	r6, r1
   13eb8:	71 04       	cpc	r7, r1
   13eba:	a9 f0       	breq	.+42     	; 0x13ee6 <Read_Config+0x108c>
   13ebc:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13ec0:	8f 93       	push	r24
   13ec2:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
        ++errors;
   13ec6:	8f 93       	push	r24
   13ec8:	88 ec       	ldi	r24, 0xC8	; 200
   13eca:	99 e1       	ldi	r25, 0x19	; 25
   13ecc:	1f 92       	push	r1
   13ece:	9f 93       	push	r25
   13ed0:	8f 93       	push	r24
   13ed2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13ed6:	bf ef       	ldi	r27, 0xFF	; 255
   13ed8:	ab 1a       	sub	r10, r27
   13eda:	bb 0a       	sbc	r11, r27
   13edc:	0f 90       	pop	r0
   13ede:	0f 90       	pop	r0
   13ee0:	0f 90       	pop	r0
   13ee2:	0f 90       	pop	r0
   13ee4:	0f 90       	pop	r0
   13ee6:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13eea:	8f 93       	push	r24
   13eec:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
    if(errors)
   13ef0:	8f 93       	push	r24
   13ef2:	8b ea       	ldi	r24, 0xAB	; 171
   13ef4:	99 e1       	ldi	r25, 0x19	; 25
   13ef6:	1f 92       	push	r1
   13ef8:	9f 93       	push	r25
   13efa:	8f 93       	push	r24
   13efc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13f00:	0f 90       	pop	r0
   13f02:	0f 90       	pop	r0
   13f04:	0f 90       	pop	r0
   13f06:	0f 90       	pop	r0
   13f08:	0f 90       	pop	r0
   13f0a:	a1 14       	cp	r10, r1
   13f0c:	b1 04       	cpc	r11, r1
   13f0e:	71 f0       	breq	.+28     	; 0x13f2c <Read_Config+0x10d2>
   13f10:	bf 92       	push	r11
   13f12:	af 92       	push	r10
   13f14:	84 e8       	ldi	r24, 0x84	; 132
   13f16:	99 e1       	ldi	r25, 0x19	; 25
   13f18:	1f 92       	push	r1

    ret = fclose(cfg);
   13f1a:	9f 93       	push	r25
   13f1c:	8f 93       	push	r24
   13f1e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   13f22:	0f 90       	pop	r0
   13f24:	0f 90       	pop	r0
   13f26:	0f 90       	pop	r0
   13f28:	0f 90       	pop	r0
    if(ret == EOF)
   13f2a:	0f 90       	pop	r0
   13f2c:	c9 57       	subi	r28, 0x79	; 121
    {
        perror("Read_Config - close error");
   13f2e:	df 4f       	sbci	r29, 0xFF	; 255
   13f30:	88 81       	ld	r24, Y
   13f32:	99 81       	ldd	r25, Y+1	; 0x01
   13f34:	c7 58       	subi	r28, 0x87	; 135
        ++errors;
   13f36:	d0 40       	sbci	r29, 0x00	; 0
   13f38:	0e 94 38 7d 	call	0xfa70	; 0xfa70 <fclose>
    }

	// Post process device values
	Post_Config();
   13f3c:	01 96       	adiw	r24, 0x01	; 1
   13f3e:	39 f4       	brne	.+14     	; 0x13f4e <Read_Config+0x10f4>

    return(errors);
   13f40:	83 e9       	ldi	r24, 0x93	; 147
}
   13f42:	9f e0       	ldi	r25, 0x0F	; 15
   13f44:	0e 94 d8 78 	call	0xf1b0	; 0xf1b0 <perror>
   13f48:	ff ef       	ldi	r31, 0xFF	; 255
   13f4a:	af 1a       	sub	r10, r31
   13f4c:	bf 0a       	sbc	r11, r31
   13f4e:	0e 94 99 96 	call	0x12d32	; 0x12d32 <Post_Config>
   13f52:	c5 01       	movw	r24, r10
   13f54:	c6 56       	subi	r28, 0x66	; 102
   13f56:	df 4f       	sbci	r29, 0xFF	; 255
   13f58:	e2 e1       	ldi	r30, 0x12	; 18
   13f5a:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

00013f5e <print_var_P>:
/// @brief Display Configuration File variable
/// @param str: title
/// @param val: variable value
/// @return  void
void print_var_P(__memx const char *str, uint32_t val)
{
   13f5e:	cf 92       	push	r12
   13f60:	df 92       	push	r13
   13f62:	ef 92       	push	r14
   13f64:	0f 93       	push	r16
   13f66:	1f 93       	push	r17
   13f68:	cf 93       	push	r28
   13f6a:	df 93       	push	r29
   13f6c:	cd b7       	in	r28, 0x3d	; 61
   13f6e:	de b7       	in	r29, 0x3e	; 62
   13f70:	c0 54       	subi	r28, 0x40	; 64
   13f72:	d1 09       	sbc	r29, r1
   13f74:	0f b6       	in	r0, 0x3f	; 63
   13f76:	f8 94       	cli
   13f78:	de bf       	out	0x3e, r29	; 62
   13f7a:	0f be       	out	0x3f, r0	; 63
   13f7c:	cd bf       	out	0x3d, r28	; 61
   13f7e:	6b 01       	movw	r12, r22
   13f80:	e8 2e       	mov	r14, r24
   13f82:	75 2f       	mov	r23, r21
   13f84:	de 01       	movw	r26, r28
   13f86:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   13f88:	80 e0       	ldi	r24, 0x00	; 0
   13f8a:	90 e0       	ldi	r25, 0x00	; 0
   13f8c:	8d 01       	movw	r16, r26
    while( *str && i < 62)
   13f8e:	f6 01       	movw	r30, r12
   13f90:	5e 2d       	mov	r21, r14
   13f92:	0e 94 65 e5 	call	0x1caca	; 0x1caca <__xload_1>
   13f96:	66 23       	and	r22, r22
   13f98:	51 f0       	breq	.+20     	; 0x13fae <print_var_P+0x50>
   13f9a:	8e 33       	cpi	r24, 0x3E	; 62
   13f9c:	91 05       	cpc	r25, r1
   13f9e:	39 f0       	breq	.+14     	; 0x13fae <print_var_P+0x50>
        tmp[i++] = *str++;
   13fa0:	01 96       	adiw	r24, 0x01	; 1
   13fa2:	5f ef       	ldi	r21, 0xFF	; 255
   13fa4:	c5 1a       	sub	r12, r21
   13fa6:	d5 0a       	sbc	r13, r21
   13fa8:	e5 0a       	sbc	r14, r21
   13faa:	6d 93       	st	X+, r22
   13fac:	f0 cf       	rjmp	.-32     	; 0x13f8e <print_var_P+0x30>
    tmp[i++] = 0;
   13fae:	f8 01       	movw	r30, r16
   13fb0:	e8 0f       	add	r30, r24
   13fb2:	f9 1f       	adc	r31, r25
   13fb4:	10 82       	st	Z, r1

    printf("    %-25s = %8lxH (%ld)\n", tmp, val, val); 
   13fb6:	7f 93       	push	r23
   13fb8:	4f 93       	push	r20
   13fba:	3f 93       	push	r19
   13fbc:	2f 93       	push	r18
   13fbe:	7f 93       	push	r23
   13fc0:	4f 93       	push	r20
   13fc2:	3f 93       	push	r19
   13fc4:	2f 93       	push	r18
   13fc6:	1f 93       	push	r17
   13fc8:	0f 93       	push	r16
   13fca:	8b e6       	ldi	r24, 0x6B	; 107
   13fcc:	99 e1       	ldi	r25, 0x19	; 25
   13fce:	1f 92       	push	r1
   13fd0:	9f 93       	push	r25
   13fd2:	8f 93       	push	r24
   13fd4:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
}
   13fd8:	0f b6       	in	r0, 0x3f	; 63
   13fda:	f8 94       	cli
   13fdc:	de bf       	out	0x3e, r29	; 62
   13fde:	0f be       	out	0x3f, r0	; 63
   13fe0:	cd bf       	out	0x3d, r28	; 61
   13fe2:	c0 5c       	subi	r28, 0xC0	; 192
   13fe4:	df 4f       	sbci	r29, 0xFF	; 255
   13fe6:	0f b6       	in	r0, 0x3f	; 63
   13fe8:	f8 94       	cli
   13fea:	de bf       	out	0x3e, r29	; 62
   13fec:	0f be       	out	0x3f, r0	; 63
   13fee:	cd bf       	out	0x3d, r28	; 61
   13ff0:	df 91       	pop	r29
   13ff2:	cf 91       	pop	r28
   13ff4:	1f 91       	pop	r17
   13ff6:	0f 91       	pop	r16
   13ff8:	ef 90       	pop	r14
   13ffa:	df 90       	pop	r13
   13ffc:	cf 90       	pop	r12
   13ffe:	08 95       	ret

00014000 <print_str_P>:
/// @brief Display Configuration File string
/// @param *str: title
/// @param *arg: string
/// @return  void
void print_str_P(__memx const char *str, char *arg)
{
   14000:	cf 92       	push	r12
   14002:	df 92       	push	r13
   14004:	ef 92       	push	r14
   14006:	cf 93       	push	r28
   14008:	df 93       	push	r29
   1400a:	cd b7       	in	r28, 0x3d	; 61
   1400c:	de b7       	in	r29, 0x3e	; 62
   1400e:	c0 54       	subi	r28, 0x40	; 64
   14010:	d1 09       	sbc	r29, r1
   14012:	0f b6       	in	r0, 0x3f	; 63
   14014:	f8 94       	cli
   14016:	de bf       	out	0x3e, r29	; 62
   14018:	0f be       	out	0x3f, r0	; 63
   1401a:	cd bf       	out	0x3d, r28	; 61
   1401c:	6b 01       	movw	r12, r22
   1401e:	e8 2e       	mov	r14, r24
   14020:	75 2f       	mov	r23, r21
   14022:	de 01       	movw	r26, r28
   14024:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   14026:	80 e0       	ldi	r24, 0x00	; 0
   14028:	90 e0       	ldi	r25, 0x00	; 0
   1402a:	9d 01       	movw	r18, r26
    while( *str && i < 62)
   1402c:	f6 01       	movw	r30, r12
   1402e:	5e 2d       	mov	r21, r14
   14030:	0e 94 65 e5 	call	0x1caca	; 0x1caca <__xload_1>
   14034:	66 23       	and	r22, r22
   14036:	51 f0       	breq	.+20     	; 0x1404c <print_str_P+0x4c>
   14038:	8e 33       	cpi	r24, 0x3E	; 62
   1403a:	91 05       	cpc	r25, r1
   1403c:	39 f0       	breq	.+14     	; 0x1404c <print_str_P+0x4c>
        tmp[i++] = *str++;
   1403e:	01 96       	adiw	r24, 0x01	; 1
   14040:	5f ef       	ldi	r21, 0xFF	; 255
   14042:	c5 1a       	sub	r12, r21
   14044:	d5 0a       	sbc	r13, r21
   14046:	e5 0a       	sbc	r14, r21
   14048:	6d 93       	st	X+, r22
   1404a:	f0 cf       	rjmp	.-32     	; 0x1402c <print_str_P+0x2c>
    tmp[i++] = 0;
   1404c:	f9 01       	movw	r30, r18
   1404e:	e8 0f       	add	r30, r24
   14050:	f9 1f       	adc	r31, r25
   14052:	10 82       	st	Z, r1
    printf("    %-25s = \"%s\"\n", tmp, arg);   
   14054:	7f 93       	push	r23
   14056:	4f 93       	push	r20
   14058:	3f 93       	push	r19
   1405a:	2f 93       	push	r18
   1405c:	89 e5       	ldi	r24, 0x59	; 89
   1405e:	99 e1       	ldi	r25, 0x19	; 25
   14060:	1f 92       	push	r1
   14062:	9f 93       	push	r25
   14064:	8f 93       	push	r24
   14066:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
}
   1406a:	0f b6       	in	r0, 0x3f	; 63
   1406c:	f8 94       	cli
   1406e:	de bf       	out	0x3e, r29	; 62
   14070:	0f be       	out	0x3f, r0	; 63
   14072:	cd bf       	out	0x3d, r28	; 61
   14074:	c0 5c       	subi	r28, 0xC0	; 192
   14076:	df 4f       	sbci	r29, 0xFF	; 255
   14078:	0f b6       	in	r0, 0x3f	; 63
   1407a:	f8 94       	cli
   1407c:	de bf       	out	0x3e, r29	; 62
   1407e:	0f be       	out	0x3f, r0	; 63
   14080:	cd bf       	out	0x3d, r28	; 61
   14082:	df 91       	pop	r29
   14084:	cf 91       	pop	r28
   14086:	ef 90       	pop	r14
   14088:	df 90       	pop	r13
   1408a:	cf 90       	pop	r12
   1408c:	08 95       	ret

0001408e <display_Addresses>:

/// ===============================================
/// @brief Display Configuration device address saummary
/// @return  void
void display_Addresses()
{
   1408e:	2f 92       	push	r2
   14090:	3f 92       	push	r3
   14092:	4f 92       	push	r4
   14094:	6f 92       	push	r6
   14096:	7f 92       	push	r7
   14098:	8f 92       	push	r8
   1409a:	af 92       	push	r10
   1409c:	bf 92       	push	r11
   1409e:	cf 92       	push	r12
   140a0:	df 92       	push	r13
   140a2:	ef 92       	push	r14
   140a4:	0f 93       	push	r16
   140a6:	1f 93       	push	r17
   140a8:	cf 93       	push	r28
   140aa:	df 93       	push	r29
   140ac:	cd b7       	in	r28, 0x3d	; 61
   140ae:	de b7       	in	r29, 0x3e	; 62
   140b0:	2b 97       	sbiw	r28, 0x0b	; 11
   140b2:	0f b6       	in	r0, 0x3f	; 63
   140b4:	f8 94       	cli
   140b6:	de bf       	out	0x3e, r29	; 62
   140b8:	0f be       	out	0x3f, r0	; 63
   140ba:	cd bf       	out	0x3d, r28	; 61
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
   140bc:	87 e3       	ldi	r24, 0x37	; 55
   140be:	99 e1       	ldi	r25, 0x19	; 25
   140c0:	1f 92       	push	r1
   140c2:	9f 93       	push	r25
   140c4:	8f 93       	push	r24
   140c6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   140ca:	0c ee       	ldi	r16, 0xEC	; 236
   140cc:	1d e1       	ldi	r17, 0x1D	; 29
   140ce:	0f 90       	pop	r0
   140d0:	0f 90       	pop	r0
   140d2:	0f 90       	pop	r0
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   140d4:	86 e9       	ldi	r24, 0x96	; 150
   140d6:	98 e1       	ldi	r25, 0x18	; 24
   140d8:	9c 01       	movw	r18, r24
   140da:	40 e0       	ldi	r20, 0x00	; 0
   140dc:	29 83       	std	Y+1, r18	; 0x01
   140de:	3a 83       	std	Y+2, r19	; 0x02
   140e0:	4b 83       	std	Y+3, r20	; 0x03
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   140e2:	8f e7       	ldi	r24, 0x7F	; 127
   140e4:	98 e1       	ldi	r25, 0x18	; 24
   140e6:	9c 01       	movw	r18, r24
   140e8:	40 e0       	ldi	r20, 0x00	; 0
   140ea:	2c 83       	std	Y+4, r18	; 0x04
   140ec:	3d 83       	std	Y+5, r19	; 0x05
   140ee:	4e 83       	std	Y+6, r20	; 0x06
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   140f0:	88 e6       	ldi	r24, 0x68	; 104
   140f2:	98 e1       	ldi	r25, 0x18	; 24
   140f4:	9c 01       	movw	r18, r24
   140f6:	40 e0       	ldi	r20, 0x00	; 0
   140f8:	2f 83       	std	Y+7, r18	; 0x07
   140fa:	38 87       	std	Y+8, r19	; 0x08
   140fc:	49 87       	std	Y+9, r20	; 0x09
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   140fe:	8b ed       	ldi	r24, 0xDB	; 219
   14100:	98 e1       	ldi	r25, 0x18	; 24
   14102:	6c 01       	movw	r12, r24
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   14104:	84 ec       	ldi	r24, 0xC4	; 196
   14106:	98 e1       	ldi	r25, 0x18	; 24
   14108:	3c 01       	movw	r6, r24
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   1410a:	8d ea       	ldi	r24, 0xAD	; 173
   1410c:	98 e1       	ldi	r25, 0x18	; 24
   1410e:	1c 01       	movw	r2, r24
            continue;
        address = Devices[i].ADDRESS;

        if(Devices[i].TYPE == SS80_TYPE)
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   14110:	80 e2       	ldi	r24, 0x20	; 32
   14112:	a8 2e       	mov	r10, r24
   14114:	89 e1       	ldi	r24, 0x19	; 25
   14116:	b8 2e       	mov	r11, r24
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   14118:	f8 01       	movw	r30, r16
   1411a:	80 81       	ld	r24, Z
   1411c:	88 23       	and	r24, r24
   1411e:	09 f4       	brne	.+2      	; 0x14122 <display_Addresses+0x94>
   14120:	8a c0       	rjmp	.+276    	; 0x14236 <display_Addresses+0x1a8>
            continue;
        address = Devices[i].ADDRESS;
   14122:	f1 81       	ldd	r31, Z+1	; 0x01
   14124:	2f 2f       	mov	r18, r31
   14126:	30 e0       	ldi	r19, 0x00	; 0
   14128:	3b 87       	std	Y+11, r19	; 0x0b
   1412a:	2a 87       	std	Y+10, r18	; 0x0a

        if(Devices[i].TYPE == SS80_TYPE)
   1412c:	83 30       	cpi	r24, 0x03	; 3
   1412e:	49 f5       	brne	.+82     	; 0x14182 <display_Addresses+0xf4>
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   14130:	c9 01       	movw	r24, r18
   14132:	80 96       	adiw	r24, 0x20	; 32
   14134:	9f 93       	push	r25
   14136:	8f 93       	push	r24
   14138:	c5 01       	movw	r24, r10
   1413a:	1f 92       	push	r1
   1413c:	9f 93       	push	r25
   1413e:	af 92       	push	r10
   14140:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            printf("  SS80_MTA    = %02XH\n",BASE_MTA + address );
   14144:	8a 85       	ldd	r24, Y+10	; 0x0a
   14146:	9b 85       	ldd	r25, Y+11	; 0x0b
   14148:	80 5c       	subi	r24, 0xC0	; 192
   1414a:	9f 4f       	sbci	r25, 0xFF	; 255
   1414c:	9f 93       	push	r25
   1414e:	8f 93       	push	r24
   14150:	89 e0       	ldi	r24, 0x09	; 9
   14152:	99 e1       	ldi	r25, 0x19	; 25
   14154:	1f 92       	push	r1
   14156:	9f 93       	push	r25
   14158:	8f 93       	push	r24
   1415a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
   1415e:	8a 85       	ldd	r24, Y+10	; 0x0a
   14160:	9b 85       	ldd	r25, Y+11	; 0x0b
   14162:	80 5a       	subi	r24, 0xA0	; 160
   14164:	9f 4f       	sbci	r25, 0xFF	; 255
   14166:	9f 93       	push	r25
   14168:	8f 93       	push	r24
   1416a:	82 ef       	ldi	r24, 0xF2	; 242
   1416c:	98 e1       	ldi	r25, 0x18	; 24
   1416e:	1f 92       	push	r1
   14170:	9f 93       	push	r25
   14172:	8f 93       	push	r24
   14174:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   14178:	0f b6       	in	r0, 0x3f	; 63
   1417a:	f8 94       	cli
   1417c:	de bf       	out	0x3e, r29	; 62
   1417e:	0f be       	out	0x3f, r0	; 63
   14180:	cd bf       	out	0x3d, r28	; 61
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   14182:	f8 01       	movw	r30, r16
   14184:	80 81       	ld	r24, Z
   14186:	81 30       	cpi	r24, 0x01	; 1
   14188:	29 f5       	brne	.+74     	; 0x141d4 <display_Addresses+0x146>
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   1418a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1418c:	9b 85       	ldd	r25, Y+11	; 0x0b
   1418e:	80 96       	adiw	r24, 0x20	; 32
   14190:	9f 93       	push	r25
   14192:	8f 93       	push	r24
   14194:	1f 92       	push	r1
   14196:	df 92       	push	r13
   14198:	cf 92       	push	r12
   1419a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   1419e:	8a 85       	ldd	r24, Y+10	; 0x0a
   141a0:	9b 85       	ldd	r25, Y+11	; 0x0b
   141a2:	80 5c       	subi	r24, 0xC0	; 192
   141a4:	9f 4f       	sbci	r25, 0xFF	; 255
   141a6:	9f 93       	push	r25
   141a8:	8f 93       	push	r24
   141aa:	1f 92       	push	r1
   141ac:	7f 92       	push	r7
   141ae:	6f 92       	push	r6
   141b0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   141b4:	8a 85       	ldd	r24, Y+10	; 0x0a
   141b6:	9b 85       	ldd	r25, Y+11	; 0x0b
   141b8:	80 5a       	subi	r24, 0xA0	; 160
   141ba:	9f 4f       	sbci	r25, 0xFF	; 255
   141bc:	9f 93       	push	r25
   141be:	8f 93       	push	r24
   141c0:	1f 92       	push	r1
   141c2:	3f 92       	push	r3
   141c4:	2f 92       	push	r2
   141c6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   141ca:	0f b6       	in	r0, 0x3f	; 63
   141cc:	f8 94       	cli
   141ce:	de bf       	out	0x3e, r29	; 62
   141d0:	0f be       	out	0x3f, r0	; 63
   141d2:	cd bf       	out	0x3d, r28	; 61
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
   141d4:	f8 01       	movw	r30, r16
   141d6:	80 81       	ld	r24, Z
   141d8:	84 30       	cpi	r24, 0x04	; 4
   141da:	69 f5       	brne	.+90     	; 0x14236 <display_Addresses+0x1a8>
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   141dc:	8a 85       	ldd	r24, Y+10	; 0x0a
   141de:	9b 85       	ldd	r25, Y+11	; 0x0b
   141e0:	80 96       	adiw	r24, 0x20	; 32
   141e2:	9f 93       	push	r25
   141e4:	8f 93       	push	r24
   141e6:	1f 92       	push	r1
   141e8:	fa 81       	ldd	r31, Y+2	; 0x02
   141ea:	ff 93       	push	r31
   141ec:	29 81       	ldd	r18, Y+1	; 0x01
   141ee:	2f 93       	push	r18
   141f0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   141f4:	8a 85       	ldd	r24, Y+10	; 0x0a
   141f6:	9b 85       	ldd	r25, Y+11	; 0x0b
   141f8:	80 5c       	subi	r24, 0xC0	; 192
   141fa:	9f 4f       	sbci	r25, 0xFF	; 255
   141fc:	9f 93       	push	r25
   141fe:	8f 93       	push	r24
   14200:	1f 92       	push	r1
   14202:	3d 81       	ldd	r19, Y+5	; 0x05
   14204:	3f 93       	push	r19
   14206:	4c 81       	ldd	r20, Y+4	; 0x04
   14208:	4f 93       	push	r20
   1420a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   1420e:	8a 85       	ldd	r24, Y+10	; 0x0a
   14210:	9b 85       	ldd	r25, Y+11	; 0x0b
   14212:	80 5a       	subi	r24, 0xA0	; 160
   14214:	9f 4f       	sbci	r25, 0xFF	; 255
   14216:	9b 87       	std	Y+11, r25	; 0x0b
   14218:	8a 87       	std	Y+10, r24	; 0x0a
   1421a:	9f 93       	push	r25
   1421c:	8f 93       	push	r24
   1421e:	1f 92       	push	r1
   14220:	98 85       	ldd	r25, Y+8	; 0x08
   14222:	9f 93       	push	r25
   14224:	ef 81       	ldd	r30, Y+7	; 0x07
   14226:	ef 93       	push	r30
   14228:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1422c:	0f b6       	in	r0, 0x3f	; 63
   1422e:	f8 94       	cli
   14230:	de bf       	out	0x3e, r29	; 62
   14232:	0f be       	out	0x3f, r0	; 63
   14234:	cd bf       	out	0x3d, r28	; 61
   14236:	05 5d       	subi	r16, 0xD5	; 213
   14238:	1f 4f       	sbci	r17, 0xFF	; 255
void display_Addresses()
{
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   1423a:	3f e1       	ldi	r19, 0x1F	; 31
   1423c:	00 3f       	cpi	r16, 0xF0	; 240
   1423e:	13 07       	cpc	r17, r19
   14240:	09 f0       	breq	.+2      	; 0x14244 <display_Addresses+0x1b6>
   14242:	6a cf       	rjmp	.-300    	; 0x14118 <display_Addresses+0x8a>
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
        }
    }
    printf("\n");
   14244:	86 e6       	ldi	r24, 0x66	; 102
   14246:	98 e1       	ldi	r25, 0x18	; 24
   14248:	1f 92       	push	r1
   1424a:	9f 93       	push	r25
   1424c:	8f 93       	push	r24
   1424e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
}
   14252:	0f 90       	pop	r0
   14254:	0f 90       	pop	r0
   14256:	0f 90       	pop	r0
   14258:	2b 96       	adiw	r28, 0x0b	; 11
   1425a:	0f b6       	in	r0, 0x3f	; 63
   1425c:	f8 94       	cli
   1425e:	de bf       	out	0x3e, r29	; 62
   14260:	0f be       	out	0x3f, r0	; 63
   14262:	cd bf       	out	0x3d, r28	; 61
   14264:	df 91       	pop	r29
   14266:	cf 91       	pop	r28
   14268:	1f 91       	pop	r17
   1426a:	0f 91       	pop	r16
   1426c:	ef 90       	pop	r14
   1426e:	df 90       	pop	r13
   14270:	cf 90       	pop	r12
   14272:	bf 90       	pop	r11
   14274:	af 90       	pop	r10
   14276:	8f 90       	pop	r8
   14278:	7f 90       	pop	r7
   1427a:	6f 90       	pop	r6
   1427c:	4f 90       	pop	r4
   1427e:	3f 90       	pop	r3
   14280:	2f 90       	pop	r2
   14282:	08 95       	ret

00014284 <display_Config>:

/// ===============================================
/// @brief Display current Configuration File values
/// @return  void
void display_Config()
{
   14284:	2f 92       	push	r2
   14286:	3f 92       	push	r3
   14288:	4f 92       	push	r4
   1428a:	6f 92       	push	r6
   1428c:	7f 92       	push	r7
   1428e:	8f 92       	push	r8
   14290:	af 92       	push	r10
   14292:	bf 92       	push	r11
   14294:	cf 92       	push	r12
   14296:	df 92       	push	r13
   14298:	ef 92       	push	r14
   1429a:	0f 93       	push	r16
   1429c:	1f 93       	push	r17
   1429e:	cf 93       	push	r28
   142a0:	df 93       	push	r29
   142a2:	cd b7       	in	r28, 0x3d	; 61
   142a4:	de b7       	in	r29, 0x3e	; 62
   142a6:	2b 97       	sbiw	r28, 0x0b	; 11
   142a8:	0f b6       	in	r0, 0x3f	; 63
   142aa:	f8 94       	cli
   142ac:	de bf       	out	0x3e, r29	; 62
   142ae:	0f be       	out	0x3f, r0	; 63
   142b0:	cd bf       	out	0x3d, r28	; 61
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
   142b2:	86 e4       	ldi	r24, 0x46	; 70
   142b4:	98 e1       	ldi	r25, 0x18	; 24
   142b6:	1f 92       	push	r1
   142b8:	9f 93       	push	r25
   142ba:	8f 93       	push	r24
   142bc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   142c0:	0c ee       	ldi	r16, 0xEC	; 236
   142c2:	1d e1       	ldi	r17, 0x1D	; 29
   142c4:	0f 90       	pop	r0
   142c6:	0f 90       	pop	r0
   142c8:	0f 90       	pop	r0
            printf("PRINTER\n");
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
			printf("  END\n");
        }
		printf("END\n");
   142ca:	8d eb       	ldi	r24, 0xBD	; 189
   142cc:	95 e1       	ldi	r25, 0x15	; 21
   142ce:	9c 01       	movw	r18, r24
   142d0:	40 e0       	ldi	r20, 0x00	; 0
   142d2:	29 83       	std	Y+1, r18	; 0x01
   142d4:	3a 83       	std	Y+2, r19	; 0x02
   142d6:	4b 83       	std	Y+3, r20	; 0x03
		printf("\n");
   142d8:	8b eb       	ldi	r24, 0xBB	; 187
   142da:	95 e1       	ldi	r25, 0x15	; 21
   142dc:	9c 01       	movw	r18, r24
   142de:	40 e0       	ldi	r20, 0x00	; 0
   142e0:	2c 83       	std	Y+4, r18	; 0x04
   142e2:	3d 83       	std	Y+5, r19	; 0x05
   142e4:	4e 83       	std	Y+6, r20	; 0x06

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;

            printf("PRINTER\n");
   142e6:	8b ed       	ldi	r24, 0xDB	; 219
   142e8:	95 e1       	ldi	r25, 0x15	; 21
   142ea:	9c 01       	movw	r18, r24
   142ec:	40 e0       	ldi	r20, 0x00	; 0
   142ee:	2f 83       	std	Y+7, r18	; 0x07
   142f0:	38 87       	std	Y+8, r19	; 0x08
   142f2:	49 87       	std	Y+9, r20	; 0x09
            printf("  CONFIG\n");
   142f4:	81 ed       	ldi	r24, 0xD1	; 209
   142f6:	95 e1       	ldi	r25, 0x15	; 21
   142f8:	1c 01       	movw	r2, r24
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   142fa:	89 ec       	ldi	r24, 0xC9	; 201
   142fc:	95 e1       	ldi	r25, 0x15	; 21
   142fe:	3c 01       	movw	r6, r24
   14300:	81 2c       	mov	r8, r1
			printf("  END\n");
   14302:	82 ec       	ldi	r24, 0xC2	; 194
   14304:	95 e1       	ldi	r25, 0x15	; 21
   14306:	6c 01       	movw	r12, r24
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   14308:	f8 01       	movw	r30, r16
   1430a:	80 81       	ld	r24, Z
   1430c:	88 23       	and	r24, r24
   1430e:	09 f4       	brne	.+2      	; 0x14312 <display_Config+0x8e>
   14310:	6d c2       	rjmp	.+1242   	; 0x147ec <display_Config+0x568>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   14312:	83 30       	cpi	r24, 0x03	; 3
   14314:	09 f0       	breq	.+2      	; 0x14318 <display_Config+0x94>
   14316:	75 c1       	rjmp	.+746    	; 0x14602 <display_Config+0x37e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   14318:	27 a1       	ldd	r18, Z+39	; 0x27
   1431a:	30 a5       	ldd	r19, Z+40	; 0x28
   1431c:	3b 87       	std	Y+11, r19	; 0x0b
   1431e:	2a 87       	std	Y+10, r18	; 0x0a

            printf("SS80 %s\n", Devices[i].model);
   14320:	c8 01       	movw	r24, r16
   14322:	07 96       	adiw	r24, 0x07	; 7
   14324:	9f 93       	push	r25
   14326:	8f 93       	push	r24
   14328:	8d e3       	ldi	r24, 0x3D	; 61
   1432a:	98 e1       	ldi	r25, 0x18	; 24
   1432c:	1f 92       	push	r1
   1432e:	9f 93       	push	r25
   14330:	8f 93       	push	r24
   14332:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) SS80p->HEADER.ADDRESS);
   14336:	ea 85       	ldd	r30, Y+10	; 0x0a
   14338:	fb 85       	ldd	r31, Y+11	; 0x0b
   1433a:	80 81       	ld	r24, Z
   1433c:	1f 92       	push	r1
   1433e:	8f 93       	push	r24
   14340:	8e e1       	ldi	r24, 0x1E	; 30
   14342:	98 e1       	ldi	r25, 0x18	; 24
   14344:	1f 92       	push	r1
   14346:	9f 93       	push	r25
   14348:	8f 93       	push	r24
   1434a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            printf("  CONFIG\n");
   1434e:	84 e1       	ldi	r24, 0x14	; 20
   14350:	98 e1       	ldi	r25, 0x18	; 24
   14352:	1f 92       	push	r1
   14354:	9f 93       	push	r25
   14356:	8f 93       	push	r24
   14358:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
                print_var("ADDRESS", (uint32_t) SS80p->HEADER.ADDRESS);
   1435c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1435e:	fb 85       	ldd	r31, Y+11	; 0x0b
   14360:	20 81       	ld	r18, Z
   14362:	30 e0       	ldi	r19, 0x00	; 0
   14364:	40 e0       	ldi	r20, 0x00	; 0
   14366:	50 e0       	ldi	r21, 0x00	; 0
   14368:	6c e0       	ldi	r22, 0x0C	; 12
   1436a:	78 e1       	ldi	r23, 0x18	; 24
   1436c:	80 e0       	ldi	r24, 0x00	; 0
   1436e:	f7 dd       	rcall	.-1042   	; 0x13f5e <print_var_P>
                print_var("PPR", (uint32_t) SS80p->HEADER.PPR);
   14370:	ea 85       	ldd	r30, Y+10	; 0x0a
   14372:	fb 85       	ldd	r31, Y+11	; 0x0b
   14374:	21 81       	ldd	r18, Z+1	; 0x01
   14376:	30 e0       	ldi	r19, 0x00	; 0
   14378:	40 e0       	ldi	r20, 0x00	; 0
   1437a:	50 e0       	ldi	r21, 0x00	; 0
   1437c:	68 e0       	ldi	r22, 0x08	; 8
   1437e:	78 e1       	ldi	r23, 0x18	; 24
   14380:	80 e0       	ldi	r24, 0x00	; 0
   14382:	ed dd       	rcall	.-1062   	; 0x13f5e <print_var_P>
                print_str("FILE", SS80p->HEADER.NAME);
   14384:	4a 85       	ldd	r20, Y+10	; 0x0a
   14386:	5b 85       	ldd	r21, Y+11	; 0x0b
   14388:	4e 5f       	subi	r20, 0xFE	; 254
   1438a:	5f 4f       	sbci	r21, 0xFF	; 255
   1438c:	63 e0       	ldi	r22, 0x03	; 3
   1438e:	78 e1       	ldi	r23, 0x18	; 24
   14390:	80 e0       	ldi	r24, 0x00	; 0
   14392:	36 de       	rcall	.-916    	; 0x14000 <print_str_P>
			printf("  END\n");
   14394:	8c ef       	ldi	r24, 0xFC	; 252
   14396:	97 e1       	ldi	r25, 0x17	; 23
   14398:	1f 92       	push	r1
   1439a:	9f 93       	push	r25
   1439c:	8f 93       	push	r24
   1439e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            printf("  HEADER\n");
   143a2:	82 ef       	ldi	r24, 0xF2	; 242
   143a4:	97 e1       	ldi	r25, 0x17	; 23
   143a6:	1f 92       	push	r1
   143a8:	9f 93       	push	r25
   143aa:	8f 93       	push	r24
   143ac:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
                print_var("ID", (uint32_t) SS80p->CONFIG.ID);
   143b0:	ea 85       	ldd	r30, Y+10	; 0x0a
   143b2:	fb 85       	ldd	r31, Y+11	; 0x0b
   143b4:	23 a1       	ldd	r18, Z+35	; 0x23
   143b6:	34 a1       	ldd	r19, Z+36	; 0x24
   143b8:	40 e0       	ldi	r20, 0x00	; 0
   143ba:	50 e0       	ldi	r21, 0x00	; 0
   143bc:	6f ee       	ldi	r22, 0xEF	; 239
   143be:	77 e1       	ldi	r23, 0x17	; 23
   143c0:	80 e0       	ldi	r24, 0x00	; 0
   143c2:	cd dd       	rcall	.-1126   	; 0x13f5e <print_var_P>
			printf("  END\n");
   143c4:	88 ee       	ldi	r24, 0xE8	; 232
   143c6:	97 e1       	ldi	r25, 0x17	; 23
   143c8:	1f 92       	push	r1
   143ca:	9f 93       	push	r25
   143cc:	8f 93       	push	r24
   143ce:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            printf("  CONTROLLER\n");
   143d2:	8a ed       	ldi	r24, 0xDA	; 218
   143d4:	97 e1       	ldi	r25, 0x17	; 23
   143d6:	1f 92       	push	r1
   143d8:	9f 93       	push	r25
   143da:	8f 93       	push	r24
   143dc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
                print_var("UNITS_INSTALLED", (uint32_t) SS80p->CONTROLLER.UNITS_INSTALLED);
   143e0:	ea 85       	ldd	r30, Y+10	; 0x0a
   143e2:	fb 85       	ldd	r31, Y+11	; 0x0b
   143e4:	25 a1       	ldd	r18, Z+37	; 0x25
   143e6:	36 a1       	ldd	r19, Z+38	; 0x26
   143e8:	40 e0       	ldi	r20, 0x00	; 0
   143ea:	50 e0       	ldi	r21, 0x00	; 0
   143ec:	6a ec       	ldi	r22, 0xCA	; 202
   143ee:	77 e1       	ldi	r23, 0x17	; 23
   143f0:	80 e0       	ldi	r24, 0x00	; 0
   143f2:	b5 dd       	rcall	.-1174   	; 0x13f5e <print_var_P>
                print_var("TRANSFER_RATE", (uint32_t)  SS80p->CONTROLLER.TRANSFER_RATE);
   143f4:	ea 85       	ldd	r30, Y+10	; 0x0a
   143f6:	fb 85       	ldd	r31, Y+11	; 0x0b
   143f8:	27 a1       	ldd	r18, Z+39	; 0x27
   143fa:	30 a5       	ldd	r19, Z+40	; 0x28
   143fc:	40 e0       	ldi	r20, 0x00	; 0
   143fe:	50 e0       	ldi	r21, 0x00	; 0
   14400:	6c eb       	ldi	r22, 0xBC	; 188
   14402:	77 e1       	ldi	r23, 0x17	; 23
   14404:	80 e0       	ldi	r24, 0x00	; 0
   14406:	ab dd       	rcall	.-1194   	; 0x13f5e <print_var_P>
                print_var("TYPE", (uint32_t)  SS80p->CONTROLLER.TYPE);
   14408:	ea 85       	ldd	r30, Y+10	; 0x0a
   1440a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1440c:	21 a5       	ldd	r18, Z+41	; 0x29
   1440e:	30 e0       	ldi	r19, 0x00	; 0
   14410:	40 e0       	ldi	r20, 0x00	; 0
   14412:	50 e0       	ldi	r21, 0x00	; 0
   14414:	67 eb       	ldi	r22, 0xB7	; 183
   14416:	77 e1       	ldi	r23, 0x17	; 23
   14418:	80 e0       	ldi	r24, 0x00	; 0
   1441a:	a1 dd       	rcall	.-1214   	; 0x13f5e <print_var_P>
			printf("  END\n");
   1441c:	80 eb       	ldi	r24, 0xB0	; 176
   1441e:	97 e1       	ldi	r25, 0x17	; 23
   14420:	1f 92       	push	r1
   14422:	9f 93       	push	r25
   14424:	8f 93       	push	r24
   14426:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            printf("  UNIT\n");
   1442a:	88 ea       	ldi	r24, 0xA8	; 168
   1442c:	97 e1       	ldi	r25, 0x17	; 23
   1442e:	1f 92       	push	r1
   14430:	9f 93       	push	r25
   14432:	8f 93       	push	r24
   14434:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
                print_var("UNIT_TYPE", (uint32_t)SS80p->UNIT.UNIT_TYPE);
   14438:	ea 85       	ldd	r30, Y+10	; 0x0a
   1443a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1443c:	22 a5       	ldd	r18, Z+42	; 0x2a
   1443e:	30 e0       	ldi	r19, 0x00	; 0
   14440:	40 e0       	ldi	r20, 0x00	; 0
   14442:	50 e0       	ldi	r21, 0x00	; 0
   14444:	6e e9       	ldi	r22, 0x9E	; 158
   14446:	77 e1       	ldi	r23, 0x17	; 23
   14448:	80 e0       	ldi	r24, 0x00	; 0
   1444a:	89 dd       	rcall	.-1262   	; 0x13f5e <print_var_P>
                print_var("DEVICE_NUMBER", (uint32_t)SS80p->UNIT.DEVICE_NUMBER);
   1444c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1444e:	fb 85       	ldd	r31, Y+11	; 0x0b
   14450:	23 a5       	ldd	r18, Z+43	; 0x2b
   14452:	34 a5       	ldd	r19, Z+44	; 0x2c
   14454:	45 a5       	ldd	r20, Z+45	; 0x2d
   14456:	56 a5       	ldd	r21, Z+46	; 0x2e
   14458:	60 e9       	ldi	r22, 0x90	; 144
   1445a:	77 e1       	ldi	r23, 0x17	; 23
   1445c:	80 e0       	ldi	r24, 0x00	; 0
                print_var("BYTES_PER_BLOCK", (uint32_t)SS80p->UNIT.BYTES_PER_BLOCK);
   1445e:	7f dd       	rcall	.-1282   	; 0x13f5e <print_var_P>
   14460:	ea 85       	ldd	r30, Y+10	; 0x0a
   14462:	fb 85       	ldd	r31, Y+11	; 0x0b
   14464:	27 a5       	ldd	r18, Z+47	; 0x2f
   14466:	30 a9       	ldd	r19, Z+48	; 0x30
   14468:	40 e0       	ldi	r20, 0x00	; 0
   1446a:	50 e0       	ldi	r21, 0x00	; 0
   1446c:	60 e8       	ldi	r22, 0x80	; 128
   1446e:	77 e1       	ldi	r23, 0x17	; 23
                print_var("BUFFERED_BLOCKS", (uint32_t)SS80p->UNIT.BUFFERED_BLOCKS);
   14470:	80 e0       	ldi	r24, 0x00	; 0
   14472:	75 dd       	rcall	.-1302   	; 0x13f5e <print_var_P>
   14474:	ea 85       	ldd	r30, Y+10	; 0x0a
   14476:	fb 85       	ldd	r31, Y+11	; 0x0b
   14478:	21 a9       	ldd	r18, Z+49	; 0x31
   1447a:	30 e0       	ldi	r19, 0x00	; 0
   1447c:	40 e0       	ldi	r20, 0x00	; 0
   1447e:	50 e0       	ldi	r21, 0x00	; 0
   14480:	60 e7       	ldi	r22, 0x70	; 112
   14482:	77 e1       	ldi	r23, 0x17	; 23
                print_var("BURST_SIZE", (uint32_t)SS80p->UNIT.BURST_SIZE);
   14484:	80 e0       	ldi	r24, 0x00	; 0
   14486:	6b dd       	rcall	.-1322   	; 0x13f5e <print_var_P>
   14488:	ea 85       	ldd	r30, Y+10	; 0x0a
   1448a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1448c:	22 a9       	ldd	r18, Z+50	; 0x32
   1448e:	30 e0       	ldi	r19, 0x00	; 0
   14490:	40 e0       	ldi	r20, 0x00	; 0
   14492:	50 e0       	ldi	r21, 0x00	; 0
   14494:	65 e6       	ldi	r22, 0x65	; 101
   14496:	77 e1       	ldi	r23, 0x17	; 23
                print_var("BLOCK_TIME", (uint32_t)SS80p->UNIT.BLOCK_TIME);
   14498:	80 e0       	ldi	r24, 0x00	; 0
   1449a:	61 dd       	rcall	.-1342   	; 0x13f5e <print_var_P>
   1449c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1449e:	fb 85       	ldd	r31, Y+11	; 0x0b
   144a0:	23 a9       	ldd	r18, Z+51	; 0x33
   144a2:	34 a9       	ldd	r19, Z+52	; 0x34
   144a4:	40 e0       	ldi	r20, 0x00	; 0
   144a6:	50 e0       	ldi	r21, 0x00	; 0
   144a8:	6a e5       	ldi	r22, 0x5A	; 90
   144aa:	77 e1       	ldi	r23, 0x17	; 23
                print_var("CONTINOUS_TRANSFER_RATE", (uint32_t)SS80p->UNIT.CONTINOUS_TRANSFER_RATE);
   144ac:	80 e0       	ldi	r24, 0x00	; 0
   144ae:	57 dd       	rcall	.-1362   	; 0x13f5e <print_var_P>
   144b0:	ea 85       	ldd	r30, Y+10	; 0x0a
   144b2:	fb 85       	ldd	r31, Y+11	; 0x0b
   144b4:	25 a9       	ldd	r18, Z+53	; 0x35
   144b6:	36 a9       	ldd	r19, Z+54	; 0x36
   144b8:	40 e0       	ldi	r20, 0x00	; 0
   144ba:	50 e0       	ldi	r21, 0x00	; 0
   144bc:	62 e4       	ldi	r22, 0x42	; 66
   144be:	77 e1       	ldi	r23, 0x17	; 23
                print_var("OPTIMAL_RETRY_TIME", (uint32_t)SS80p->UNIT.OPTIMAL_RETRY_TIME);
   144c0:	80 e0       	ldi	r24, 0x00	; 0
   144c2:	4d dd       	rcall	.-1382   	; 0x13f5e <print_var_P>
   144c4:	ea 85       	ldd	r30, Y+10	; 0x0a
   144c6:	fb 85       	ldd	r31, Y+11	; 0x0b
   144c8:	27 a9       	ldd	r18, Z+55	; 0x37
   144ca:	30 ad       	ldd	r19, Z+56	; 0x38
   144cc:	40 e0       	ldi	r20, 0x00	; 0
   144ce:	50 e0       	ldi	r21, 0x00	; 0
   144d0:	6f e2       	ldi	r22, 0x2F	; 47
   144d2:	77 e1       	ldi	r23, 0x17	; 23
                print_var("ACCESS_TIME", (uint32_t)SS80p->UNIT.ACCESS_TIME);
   144d4:	80 e0       	ldi	r24, 0x00	; 0
   144d6:	43 dd       	rcall	.-1402   	; 0x13f5e <print_var_P>
   144d8:	ea 85       	ldd	r30, Y+10	; 0x0a
   144da:	fb 85       	ldd	r31, Y+11	; 0x0b
   144dc:	21 ad       	ldd	r18, Z+57	; 0x39
   144de:	32 ad       	ldd	r19, Z+58	; 0x3a
   144e0:	40 e0       	ldi	r20, 0x00	; 0
   144e2:	50 e0       	ldi	r21, 0x00	; 0
   144e4:	63 e2       	ldi	r22, 0x23	; 35
   144e6:	77 e1       	ldi	r23, 0x17	; 23
                print_var("MAXIMUM_INTERLEAVE", (uint32_t)SS80p->UNIT.MAXIMUM_INTERLEAVE);
   144e8:	80 e0       	ldi	r24, 0x00	; 0
   144ea:	39 dd       	rcall	.-1422   	; 0x13f5e <print_var_P>
   144ec:	ea 85       	ldd	r30, Y+10	; 0x0a
   144ee:	fb 85       	ldd	r31, Y+11	; 0x0b
   144f0:	23 ad       	ldd	r18, Z+59	; 0x3b
   144f2:	30 e0       	ldi	r19, 0x00	; 0
   144f4:	40 e0       	ldi	r20, 0x00	; 0
   144f6:	50 e0       	ldi	r21, 0x00	; 0
   144f8:	60 e1       	ldi	r22, 0x10	; 16
   144fa:	77 e1       	ldi	r23, 0x17	; 23
                print_var("FIXED_VOLUMES", (uint32_t)SS80p->UNIT.FIXED_VOLUMES);
   144fc:	80 e0       	ldi	r24, 0x00	; 0
   144fe:	2f dd       	rcall	.-1442   	; 0x13f5e <print_var_P>
   14500:	ea 85       	ldd	r30, Y+10	; 0x0a
   14502:	fb 85       	ldd	r31, Y+11	; 0x0b
   14504:	24 ad       	ldd	r18, Z+60	; 0x3c
   14506:	30 e0       	ldi	r19, 0x00	; 0
   14508:	40 e0       	ldi	r20, 0x00	; 0
   1450a:	50 e0       	ldi	r21, 0x00	; 0
   1450c:	62 e0       	ldi	r22, 0x02	; 2
   1450e:	77 e1       	ldi	r23, 0x17	; 23
                print_var("REMOVABLE_VOLUMES", (uint32_t)SS80p->UNIT.REMOVABLE_VOLUMES);
   14510:	80 e0       	ldi	r24, 0x00	; 0
   14512:	25 dd       	rcall	.-1462   	; 0x13f5e <print_var_P>
   14514:	ea 85       	ldd	r30, Y+10	; 0x0a
   14516:	fb 85       	ldd	r31, Y+11	; 0x0b
   14518:	25 ad       	ldd	r18, Z+61	; 0x3d
   1451a:	30 e0       	ldi	r19, 0x00	; 0
   1451c:	40 e0       	ldi	r20, 0x00	; 0
   1451e:	50 e0       	ldi	r21, 0x00	; 0
   14520:	60 ef       	ldi	r22, 0xF0	; 240
   14522:	76 e1       	ldi	r23, 0x16	; 22
   14524:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   14526:	1b dd       	rcall	.-1482   	; 0x13f5e <print_var_P>
   14528:	89 ee       	ldi	r24, 0xE9	; 233
   1452a:	96 e1       	ldi	r25, 0x16	; 22
   1452c:	1f 92       	push	r1
   1452e:	9f 93       	push	r25
   14530:	8f 93       	push	r24
   14532:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            printf("  VOLUME\n");
   14536:	0f b6       	in	r0, 0x3f	; 63
   14538:	f8 94       	cli
   1453a:	de bf       	out	0x3e, r29	; 62
   1453c:	0f be       	out	0x3f, r0	; 63
   1453e:	cd bf       	out	0x3d, r28	; 61
   14540:	8f ed       	ldi	r24, 0xDF	; 223
   14542:	96 e1       	ldi	r25, 0x16	; 22
   14544:	1f 92       	push	r1
   14546:	9f 93       	push	r25
   14548:	8f 93       	push	r24
                print_var("MAX_CYLINDER", (uint32_t)SS80p->VOLUME.MAX_CYLINDER);
   1454a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1454e:	ea 85       	ldd	r30, Y+10	; 0x0a
   14550:	fb 85       	ldd	r31, Y+11	; 0x0b
   14552:	fe 96       	adiw	r30, 0x3e	; 62
   14554:	20 81       	ld	r18, Z
   14556:	31 81       	ldd	r19, Z+1	; 0x01
   14558:	42 81       	ldd	r20, Z+2	; 0x02
   1455a:	53 81       	ldd	r21, Z+3	; 0x03
   1455c:	62 ed       	ldi	r22, 0xD2	; 210
   1455e:	76 e1       	ldi	r23, 0x16	; 22
                print_var("MAX_HEAD", (uint32_t)SS80p->VOLUME.MAX_HEAD);
   14560:	80 e0       	ldi	r24, 0x00	; 0
   14562:	fd dc       	rcall	.-1542   	; 0x13f5e <print_var_P>
   14564:	ea 85       	ldd	r30, Y+10	; 0x0a
   14566:	fb 85       	ldd	r31, Y+11	; 0x0b
   14568:	ee 5b       	subi	r30, 0xBE	; 190
   1456a:	ff 4f       	sbci	r31, 0xFF	; 255
   1456c:	20 81       	ld	r18, Z
   1456e:	30 e0       	ldi	r19, 0x00	; 0
   14570:	40 e0       	ldi	r20, 0x00	; 0
   14572:	50 e0       	ldi	r21, 0x00	; 0
   14574:	69 ec       	ldi	r22, 0xC9	; 201
   14576:	76 e1       	ldi	r23, 0x16	; 22
                print_var("MAX_SECTOR", (uint32_t)SS80p->VOLUME.MAX_SECTOR);
   14578:	80 e0       	ldi	r24, 0x00	; 0
   1457a:	f1 dc       	rcall	.-1566   	; 0x13f5e <print_var_P>
   1457c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1457e:	fb 85       	ldd	r31, Y+11	; 0x0b
   14580:	ed 5b       	subi	r30, 0xBD	; 189
   14582:	ff 4f       	sbci	r31, 0xFF	; 255
   14584:	20 81       	ld	r18, Z
   14586:	31 81       	ldd	r19, Z+1	; 0x01
   14588:	40 e0       	ldi	r20, 0x00	; 0
   1458a:	50 e0       	ldi	r21, 0x00	; 0
   1458c:	6e eb       	ldi	r22, 0xBE	; 190
   1458e:	76 e1       	ldi	r23, 0x16	; 22
                print_var("MAX_BLOCK_NUMBER", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER);
   14590:	80 e0       	ldi	r24, 0x00	; 0
   14592:	e5 dc       	rcall	.-1590   	; 0x13f5e <print_var_P>
   14594:	aa 84       	ldd	r10, Y+10	; 0x0a
   14596:	bb 84       	ldd	r11, Y+11	; 0x0b
   14598:	35 e4       	ldi	r19, 0x45	; 69
   1459a:	a3 0e       	add	r10, r19
   1459c:	b1 1c       	adc	r11, r1
   1459e:	f5 01       	movw	r30, r10
   145a0:	20 81       	ld	r18, Z
   145a2:	31 81       	ldd	r19, Z+1	; 0x01
   145a4:	42 81       	ldd	r20, Z+2	; 0x02
   145a6:	53 81       	ldd	r21, Z+3	; 0x03
   145a8:	6d ea       	ldi	r22, 0xAD	; 173
   145aa:	76 e1       	ldi	r23, 0x16	; 22
                print_var("INTERLEAVE", (uint32_t)SS80p->VOLUME.INTERLEAVE);
   145ac:	80 e0       	ldi	r24, 0x00	; 0
   145ae:	d7 dc       	rcall	.-1618   	; 0x13f5e <print_var_P>
   145b0:	2a 85       	ldd	r18, Y+10	; 0x0a
   145b2:	3b 85       	ldd	r19, Y+11	; 0x0b
   145b4:	27 5b       	subi	r18, 0xB7	; 183
   145b6:	3f 4f       	sbci	r19, 0xFF	; 255
   145b8:	f9 01       	movw	r30, r18
   145ba:	20 81       	ld	r18, Z
   145bc:	30 e0       	ldi	r19, 0x00	; 0
   145be:	40 e0       	ldi	r20, 0x00	; 0
   145c0:	50 e0       	ldi	r21, 0x00	; 0
   145c2:	62 ea       	ldi	r22, 0xA2	; 162
   145c4:	76 e1       	ldi	r23, 0x16	; 22
                print_var("# BLOCKS", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER+1);
   145c6:	80 e0       	ldi	r24, 0x00	; 0
   145c8:	ca dc       	rcall	.-1644   	; 0x13f5e <print_var_P>
   145ca:	f5 01       	movw	r30, r10
   145cc:	80 81       	ld	r24, Z
   145ce:	91 81       	ldd	r25, Z+1	; 0x01
   145d0:	a2 81       	ldd	r26, Z+2	; 0x02
   145d2:	b3 81       	ldd	r27, Z+3	; 0x03
   145d4:	9c 01       	movw	r18, r24
   145d6:	ad 01       	movw	r20, r26
   145d8:	2f 5f       	subi	r18, 0xFF	; 255
   145da:	3f 4f       	sbci	r19, 0xFF	; 255
   145dc:	4f 4f       	sbci	r20, 0xFF	; 255
   145de:	5f 4f       	sbci	r21, 0xFF	; 255
   145e0:	69 e9       	ldi	r22, 0x99	; 153
   145e2:	76 e1       	ldi	r23, 0x16	; 22
   145e4:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   145e6:	bb dc       	rcall	.-1674   	; 0x13f5e <print_var_P>
   145e8:	82 e9       	ldi	r24, 0x92	; 146
   145ea:	96 e1       	ldi	r25, 0x16	; 22
   145ec:	1f 92       	push	r1
   145ee:	9f 93       	push	r25
   145f0:	8f 93       	push	r24
   145f2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   145f6:	0f 90       	pop	r0
   145f8:	0f 90       	pop	r0
   145fa:	0f 90       	pop	r0
   145fc:	0f 90       	pop	r0
   145fe:	0f 90       	pop	r0
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   14600:	0f 90       	pop	r0
   14602:	f8 01       	movw	r30, r16
   14604:	80 81       	ld	r24, Z
   14606:	81 30       	cpi	r24, 0x01	; 1
   14608:	09 f0       	breq	.+2      	; 0x1460c <display_Config+0x388>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   1460a:	b5 c0       	rjmp	.+362    	; 0x14776 <display_Config+0x4f2>
   1460c:	27 a1       	ldd	r18, Z+39	; 0x27
   1460e:	30 a5       	ldd	r19, Z+40	; 0x28
   14610:	3b 87       	std	Y+11, r19	; 0x0b

            printf("AMIGO %s\n", Devices[i].model);
   14612:	2a 87       	std	Y+10, r18	; 0x0a
   14614:	c8 01       	movw	r24, r16
   14616:	07 96       	adiw	r24, 0x07	; 7
   14618:	9f 93       	push	r25
   1461a:	8f 93       	push	r24
   1461c:	e8 e8       	ldi	r30, 0x88	; 136
   1461e:	f6 e1       	ldi	r31, 0x16	; 22
   14620:	cf 01       	movw	r24, r30
   14622:	1f 92       	push	r1
   14624:	9f 93       	push	r25
   14626:	ef 93       	push	r30
   14628:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) AMIGOp->HEADER.ADDRESS);
   1462c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1462e:	fb 85       	ldd	r31, Y+11	; 0x0b
   14630:	80 81       	ld	r24, Z
   14632:	1f 92       	push	r1
   14634:	8f 93       	push	r24
   14636:	89 e6       	ldi	r24, 0x69	; 105
   14638:	96 e1       	ldi	r25, 0x16	; 22
   1463a:	1f 92       	push	r1
   1463c:	9f 93       	push	r25
   1463e:	8f 93       	push	r24
            printf("  HEADER\n");
   14640:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   14644:	8f e5       	ldi	r24, 0x5F	; 95
   14646:	96 e1       	ldi	r25, 0x16	; 22
   14648:	1f 92       	push	r1
   1464a:	9f 93       	push	r25
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   1464c:	8f 93       	push	r24
   1464e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   14652:	ea 85       	ldd	r30, Y+10	; 0x0a
   14654:	fb 85       	ldd	r31, Y+11	; 0x0b
   14656:	20 81       	ld	r18, Z
   14658:	30 e0       	ldi	r19, 0x00	; 0
   1465a:	40 e0       	ldi	r20, 0x00	; 0
   1465c:	50 e0       	ldi	r21, 0x00	; 0
   1465e:	67 e5       	ldi	r22, 0x57	; 87
                print_var("PPR", (uint32_t) AMIGOp->HEADER.PPR);
   14660:	76 e1       	ldi	r23, 0x16	; 22
   14662:	80 e0       	ldi	r24, 0x00	; 0
   14664:	7c dc       	rcall	.-1800   	; 0x13f5e <print_var_P>
   14666:	ea 85       	ldd	r30, Y+10	; 0x0a
   14668:	fb 85       	ldd	r31, Y+11	; 0x0b
   1466a:	21 81       	ldd	r18, Z+1	; 0x01
   1466c:	30 e0       	ldi	r19, 0x00	; 0
   1466e:	40 e0       	ldi	r20, 0x00	; 0
   14670:	50 e0       	ldi	r21, 0x00	; 0
   14672:	63 e5       	ldi	r22, 0x53	; 83
   14674:	76 e1       	ldi	r23, 0x16	; 22
                print_str("FILE", AMIGOp->HEADER.NAME);
   14676:	80 e0       	ldi	r24, 0x00	; 0
   14678:	72 dc       	rcall	.-1820   	; 0x13f5e <print_var_P>
   1467a:	4a 85       	ldd	r20, Y+10	; 0x0a
   1467c:	5b 85       	ldd	r21, Y+11	; 0x0b
   1467e:	4e 5f       	subi	r20, 0xFE	; 254
   14680:	5f 4f       	sbci	r21, 0xFF	; 255
   14682:	6e e4       	ldi	r22, 0x4E	; 78
   14684:	76 e1       	ldi	r23, 0x16	; 22
			printf("  END\n");
   14686:	80 e0       	ldi	r24, 0x00	; 0
   14688:	bb dc       	rcall	.-1674   	; 0x14000 <print_str_P>
   1468a:	87 e4       	ldi	r24, 0x47	; 71
   1468c:	96 e1       	ldi	r25, 0x16	; 22
   1468e:	1f 92       	push	r1
   14690:	9f 93       	push	r25
   14692:	8f 93       	push	r24
            printf("  CONFIG\n");
   14694:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   14698:	8d e3       	ldi	r24, 0x3D	; 61
   1469a:	96 e1       	ldi	r25, 0x16	; 22
   1469c:	1f 92       	push	r1
   1469e:	9f 93       	push	r25
   146a0:	8f 93       	push	r24
                print_var("ID", (uint32_t) AMIGOp->CONFIG.ID);
   146a2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   146a6:	ea 85       	ldd	r30, Y+10	; 0x0a
   146a8:	fb 85       	ldd	r31, Y+11	; 0x0b
   146aa:	23 a1       	ldd	r18, Z+35	; 0x23
   146ac:	34 a1       	ldd	r19, Z+36	; 0x24
   146ae:	40 e0       	ldi	r20, 0x00	; 0
   146b0:	50 e0       	ldi	r21, 0x00	; 0
   146b2:	6a e3       	ldi	r22, 0x3A	; 58
   146b4:	76 e1       	ldi	r23, 0x16	; 22
			printf("  END\n");
   146b6:	80 e0       	ldi	r24, 0x00	; 0
   146b8:	52 dc       	rcall	.-1884   	; 0x13f5e <print_var_P>
   146ba:	83 e3       	ldi	r24, 0x33	; 51
   146bc:	96 e1       	ldi	r25, 0x16	; 22
   146be:	1f 92       	push	r1
   146c0:	9f 93       	push	r25
   146c2:	8f 93       	push	r24
            printf("  GEOMETRY\n");
   146c4:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   146c8:	87 e2       	ldi	r24, 0x27	; 39
   146ca:	96 e1       	ldi	r25, 0x16	; 22
   146cc:	1f 92       	push	r1
   146ce:	9f 93       	push	r25
                print_var("BYTES_PER_SECTOR", (uint32_t) AMIGOp->GEOMETRY.BYTES_PER_SECTOR);
   146d0:	8f 93       	push	r24
   146d2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   146d6:	ea 85       	ldd	r30, Y+10	; 0x0a
   146d8:	fb 85       	ldd	r31, Y+11	; 0x0b
   146da:	25 a1       	ldd	r18, Z+37	; 0x25
   146dc:	36 a1       	ldd	r19, Z+38	; 0x26
   146de:	03 2e       	mov	r0, r19
   146e0:	00 0c       	add	r0, r0
   146e2:	44 0b       	sbc	r20, r20
   146e4:	55 0b       	sbc	r21, r21
   146e6:	66 e1       	ldi	r22, 0x16	; 22
                print_var("SECTORS_PER_TRACK", (uint32_t) AMIGOp->GEOMETRY.SECTORS_PER_TRACK);
   146e8:	76 e1       	ldi	r23, 0x16	; 22
   146ea:	80 e0       	ldi	r24, 0x00	; 0
   146ec:	38 dc       	rcall	.-1936   	; 0x13f5e <print_var_P>
   146ee:	ea 85       	ldd	r30, Y+10	; 0x0a
   146f0:	fb 85       	ldd	r31, Y+11	; 0x0b
   146f2:	27 a1       	ldd	r18, Z+39	; 0x27
   146f4:	30 a5       	ldd	r19, Z+40	; 0x28
   146f6:	03 2e       	mov	r0, r19
   146f8:	00 0c       	add	r0, r0
   146fa:	44 0b       	sbc	r20, r20
   146fc:	55 0b       	sbc	r21, r21
   146fe:	64 e0       	ldi	r22, 0x04	; 4
                print_var("HEADS", (uint32_t) AMIGOp->GEOMETRY.HEADS);
   14700:	76 e1       	ldi	r23, 0x16	; 22
   14702:	80 e0       	ldi	r24, 0x00	; 0
   14704:	2c dc       	rcall	.-1960   	; 0x13f5e <print_var_P>
   14706:	ea 85       	ldd	r30, Y+10	; 0x0a
   14708:	fb 85       	ldd	r31, Y+11	; 0x0b
   1470a:	21 a5       	ldd	r18, Z+41	; 0x29
   1470c:	32 a5       	ldd	r19, Z+42	; 0x2a
   1470e:	03 2e       	mov	r0, r19
   14710:	00 0c       	add	r0, r0
   14712:	44 0b       	sbc	r20, r20
   14714:	55 0b       	sbc	r21, r21
   14716:	6e ef       	ldi	r22, 0xFE	; 254
                print_var("CYLINDERS", (uint32_t) AMIGOp->GEOMETRY.CYLINDERS);
   14718:	75 e1       	ldi	r23, 0x15	; 21
   1471a:	80 e0       	ldi	r24, 0x00	; 0
   1471c:	20 dc       	rcall	.-1984   	; 0x13f5e <print_var_P>
   1471e:	ea 85       	ldd	r30, Y+10	; 0x0a
   14720:	fb 85       	ldd	r31, Y+11	; 0x0b
   14722:	23 a5       	ldd	r18, Z+43	; 0x2b
   14724:	34 a5       	ldd	r19, Z+44	; 0x2c
   14726:	03 2e       	mov	r0, r19
   14728:	00 0c       	add	r0, r0
   1472a:	44 0b       	sbc	r20, r20
   1472c:	55 0b       	sbc	r21, r21
   1472e:	64 ef       	ldi	r22, 0xF4	; 244
   14730:	75 e1       	ldi	r23, 0x15	; 21
                print_var("# BLOCKS", (uint32_t)AMIGOp->GEOMETRY.CYLINDERS * AMIGOp->GEOMETRY.SECTORS_PER_TRACK * AMIGOp->GEOMETRY.HEADS );
   14732:	80 e0       	ldi	r24, 0x00	; 0
   14734:	14 dc       	rcall	.-2008   	; 0x13f5e <print_var_P>
   14736:	ea 85       	ldd	r30, Y+10	; 0x0a
   14738:	fb 85       	ldd	r31, Y+11	; 0x0b
   1473a:	23 a5       	ldd	r18, Z+43	; 0x2b
   1473c:	34 a5       	ldd	r19, Z+44	; 0x2c
   1473e:	a7 a1       	ldd	r26, Z+39	; 0x27
   14740:	b0 a5       	ldd	r27, Z+40	; 0x28
   14742:	0e 94 f3 e4 	call	0x1c9e6	; 0x1c9e6 <__mulhisi3>
   14746:	9b 01       	movw	r18, r22
   14748:	ac 01       	movw	r20, r24
   1474a:	a1 a5       	ldd	r26, Z+41	; 0x29
   1474c:	b2 a5       	ldd	r27, Z+42	; 0x2a
   1474e:	0e 94 18 e5 	call	0x1ca30	; 0x1ca30 <__mulshisi3>
   14752:	9b 01       	movw	r18, r22
   14754:	ac 01       	movw	r20, r24
   14756:	6b ee       	ldi	r22, 0xEB	; 235
   14758:	75 e1       	ldi	r23, 0x15	; 21
   1475a:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   1475c:	00 dc       	rcall	.-2048   	; 0x13f5e <print_var_P>
   1475e:	84 ee       	ldi	r24, 0xE4	; 228
   14760:	95 e1       	ldi	r25, 0x15	; 21
   14762:	1f 92       	push	r1
   14764:	9f 93       	push	r25
   14766:	8f 93       	push	r24
   14768:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1476c:	0f b6       	in	r0, 0x3f	; 63
   1476e:	f8 94       	cli
   14770:	de bf       	out	0x3e, r29	; 62
        } 
#endif // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   14772:	0f be       	out	0x3f, r0	; 63
   14774:	cd bf       	out	0x3d, r28	; 61
   14776:	f8 01       	movw	r30, r16
   14778:	80 81       	ld	r24, Z
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
   1477a:	84 30       	cpi	r24, 0x04	; 4
   1477c:	19 f5       	brne	.+70     	; 0x147c4 <display_Config+0x540>
   1477e:	27 a1       	ldd	r18, Z+39	; 0x27
   14780:	30 a5       	ldd	r19, Z+40	; 0x28

            printf("PRINTER\n");
   14782:	3b 87       	std	Y+11, r19	; 0x0b
   14784:	2a 87       	std	Y+10, r18	; 0x0a
   14786:	1f 92       	push	r1
   14788:	38 85       	ldd	r19, Y+8	; 0x08
   1478a:	3f 93       	push	r19
   1478c:	4f 81       	ldd	r20, Y+7	; 0x07
   1478e:	4f 93       	push	r20
            printf("  CONFIG\n");
   14790:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   14794:	1f 92       	push	r1
   14796:	3f 92       	push	r3
   14798:	2f 92       	push	r2
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   1479a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1479e:	ea 85       	ldd	r30, Y+10	; 0x0a
   147a0:	fb 85       	ldd	r31, Y+11	; 0x0b
   147a2:	20 81       	ld	r18, Z
   147a4:	30 e0       	ldi	r19, 0x00	; 0
   147a6:	40 e0       	ldi	r20, 0x00	; 0
   147a8:	50 e0       	ldi	r21, 0x00	; 0
   147aa:	88 2d       	mov	r24, r8
   147ac:	b3 01       	movw	r22, r6
			printf("  END\n");
   147ae:	d7 db       	rcall	.-2130   	; 0x13f5e <print_var_P>
   147b0:	1f 92       	push	r1
   147b2:	df 92       	push	r13
   147b4:	cf 92       	push	r12
   147b6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   147ba:	0f b6       	in	r0, 0x3f	; 63
   147bc:	f8 94       	cli
   147be:	de bf       	out	0x3e, r29	; 62
   147c0:	0f be       	out	0x3f, r0	; 63
        }
		printf("END\n");
   147c2:	cd bf       	out	0x3d, r28	; 61
   147c4:	1f 92       	push	r1
   147c6:	3a 81       	ldd	r19, Y+2	; 0x02
   147c8:	3f 93       	push	r19
   147ca:	49 81       	ldd	r20, Y+1	; 0x01
   147cc:	4f 93       	push	r20
   147ce:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
		printf("\n");
   147d2:	1f 92       	push	r1
   147d4:	8d 81       	ldd	r24, Y+5	; 0x05
   147d6:	8f 93       	push	r24
   147d8:	9c 81       	ldd	r25, Y+4	; 0x04
   147da:	9f 93       	push	r25
   147dc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   147e0:	0f 90       	pop	r0
   147e2:	0f 90       	pop	r0
   147e4:	0f 90       	pop	r0
   147e6:	0f 90       	pop	r0
   147e8:	0f 90       	pop	r0
   147ea:	0f 90       	pop	r0
   147ec:	05 5d       	subi	r16, 0xD5	; 213
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   147ee:	1f 4f       	sbci	r17, 0xFF	; 255
   147f0:	ef e1       	ldi	r30, 0x1F	; 31
   147f2:	00 3f       	cpi	r16, 0xF0	; 240
   147f4:	1e 07       	cpc	r17, r30
   147f6:	09 f0       	breq	.+2      	; 0x147fa <display_Config+0x576>
			printf("  END\n");
        }
		printf("END\n");
		printf("\n");
    }
    printf("END\n");
   147f8:	87 cd       	rjmp	.-1266   	; 0x14308 <display_Config+0x84>
   147fa:	86 eb       	ldi	r24, 0xB6	; 182
   147fc:	95 e1       	ldi	r25, 0x15	; 21
   147fe:	1f 92       	push	r1
   14800:	9f 93       	push	r25
   14802:	8f 93       	push	r24
   14804:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("\n");
   14808:	84 eb       	ldi	r24, 0xB4	; 180
   1480a:	95 e1       	ldi	r25, 0x15	; 21
   1480c:	1f 92       	push	r1
   1480e:	9f 93       	push	r25
   14810:	8f 93       	push	r24
   14812:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
}
   14816:	0f 90       	pop	r0
   14818:	0f 90       	pop	r0
   1481a:	0f 90       	pop	r0
   1481c:	0f 90       	pop	r0
   1481e:	0f 90       	pop	r0
   14820:	0f 90       	pop	r0
   14822:	2b 96       	adiw	r28, 0x0b	; 11
   14824:	0f b6       	in	r0, 0x3f	; 63
   14826:	f8 94       	cli
   14828:	de bf       	out	0x3e, r29	; 62
   1482a:	0f be       	out	0x3f, r0	; 63
   1482c:	cd bf       	out	0x3d, r28	; 61
   1482e:	df 91       	pop	r29
   14830:	cf 91       	pop	r28
   14832:	1f 91       	pop	r17
   14834:	0f 91       	pop	r16
   14836:	ef 90       	pop	r14
   14838:	df 90       	pop	r13
   1483a:	cf 90       	pop	r12
   1483c:	bf 90       	pop	r11
   1483e:	af 90       	pop	r10
   14840:	8f 90       	pop	r8
   14842:	7f 90       	pop	r7
   14844:	6f 90       	pop	r6
   14846:	4f 90       	pop	r4
   14848:	3f 90       	pop	r3
   1484a:	2f 90       	pop	r2
   1484c:	08 95       	ret

0001484e <format_drives>:

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   1484e:	2f 92       	push	r2
   14850:	3f 92       	push	r3
   14852:	4f 92       	push	r4
   14854:	5f 92       	push	r5
   14856:	6f 92       	push	r6
   14858:	7f 92       	push	r7
   1485a:	8f 92       	push	r8
   1485c:	af 92       	push	r10
   1485e:	bf 92       	push	r11
   14860:	cf 92       	push	r12
   14862:	df 92       	push	r13
   14864:	ef 92       	push	r14
   14866:	ff 92       	push	r15
   14868:	0f 93       	push	r16
   1486a:	1f 93       	push	r17
   1486c:	cf 93       	push	r28
   1486e:	df 93       	push	r29
   14870:	cd b7       	in	r28, 0x3d	; 61
   14872:	de b7       	in	r29, 0x3e	; 62
   14874:	cd 55       	subi	r28, 0x5D	; 93
   14876:	d1 09       	sbc	r29, r1
   14878:	0f b6       	in	r0, 0x3f	; 63
   1487a:	f8 94       	cli
   1487c:	de bf       	out	0x3e, r29	; 62
   1487e:	0f be       	out	0x3f, r0	; 63
   14880:	cd bf       	out	0x3d, r28	; 61
   14882:	8c ee       	ldi	r24, 0xEC	; 236
   14884:	a8 2e       	mov	r10, r24
   14886:	8d e1       	ldi	r24, 0x1D	; 29
   14888:	b8 2e       	mov	r11, r24
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
    int amigo = 1;
   1488a:	21 e0       	ldi	r18, 0x01	; 1
   1488c:	30 e0       	ldi	r19, 0x00	; 0
   1488e:	65 96       	adiw	r28, 0x15	; 21
   14890:	3f af       	std	Y+63, r19	; 0x3f
   14892:	2e af       	std	Y+62, r18	; 0x3e
   14894:	65 97       	sbiw	r28, 0x15	; 21
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
   14896:	81 e0       	ldi	r24, 0x01	; 1
   14898:	90 e0       	ldi	r25, 0x00	; 0
   1489a:	63 96       	adiw	r28, 0x13	; 19
   1489c:	9f af       	std	Y+63, r25	; 0x3f
   1489e:	8e af       	std	Y+62, r24	; 0x3e
   148a0:	63 97       	sbiw	r28, 0x13	; 19
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
   148a2:	80 e6       	ldi	r24, 0x60	; 96
   148a4:	95 e1       	ldi	r25, 0x15	; 21
   148a6:	9c 01       	movw	r18, r24
   148a8:	40 e0       	ldi	r20, 0x00	; 0
   148aa:	68 96       	adiw	r28, 0x18	; 24
   148ac:	2d af       	std	Y+61, r18	; 0x3d
   148ae:	3e af       	std	Y+62, r19	; 0x3e
   148b0:	4f af       	std	Y+63, r20	; 0x3f
   148b2:	68 97       	sbiw	r28, 0x18	; 24
   148b4:	2e 01       	movw	r4, r28
   148b6:	31 e3       	ldi	r19, 0x31	; 49
   148b8:	43 0e       	add	r4, r19
   148ba:	51 1c       	adc	r5, r1
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   148bc:	88 e6       	ldi	r24, 0x68	; 104
   148be:	95 e1       	ldi	r25, 0x15	; 21
   148c0:	9c 01       	movw	r18, r24
   148c2:	40 e0       	ldi	r20, 0x00	; 0
   148c4:	6b 96       	adiw	r28, 0x1b	; 27
   148c6:	2d af       	std	Y+61, r18	; 0x3d
   148c8:	3e af       	std	Y+62, r19	; 0x3e
   148ca:	4f af       	std	Y+63, r20	; 0x3f
   148cc:	6b 97       	sbiw	r28, 0x1b	; 27
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
   148ce:	8a e8       	ldi	r24, 0x8A	; 138
   148d0:	95 e1       	ldi	r25, 0x15	; 21
   148d2:	3c 01       	movw	r6, r24

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   148d4:	82 e9       	ldi	r24, 0x92	; 146
   148d6:	95 e1       	ldi	r25, 0x15	; 21
   148d8:	9c 01       	movw	r18, r24
   148da:	40 e0       	ldi	r20, 0x00	; 0
   148dc:	6e 96       	adiw	r28, 0x1e	; 30
   148de:	2d af       	std	Y+61, r18	; 0x3d
   148e0:	3e af       	std	Y+62, r19	; 0x3e
   148e2:	4f af       	std	Y+63, r20	; 0x3f
   148e4:	6e 97       	sbiw	r28, 0x1e	; 30
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   148e6:	f5 01       	movw	r30, r10
   148e8:	80 81       	ld	r24, Z
   148ea:	88 23       	and	r24, r24
   148ec:	09 f4       	brne	.+2      	; 0x148f0 <format_drives+0xa2>
   148ee:	a9 c0       	rjmp	.+338    	; 0x14a42 <format_drives+0x1f4>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   148f0:	83 30       	cpi	r24, 0x03	; 3
   148f2:	09 f0       	breq	.+2      	; 0x148f6 <format_drives+0xa8>
   148f4:	4a c0       	rjmp	.+148    	; 0x1498a <format_drives+0x13c>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   148f6:	07 a1       	ldd	r16, Z+39	; 0x27
   148f8:	10 a5       	ldd	r17, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   148fa:	18 01       	movw	r2, r16
   148fc:	f2 e0       	ldi	r31, 0x02	; 2
   148fe:	2f 0e       	add	r2, r31
   14900:	31 1c       	adc	r3, r1
   14902:	be 01       	movw	r22, r28
   14904:	6f 5f       	subi	r22, 0xFF	; 255
   14906:	7f 4f       	sbci	r23, 0xFF	; 255
   14908:	c1 01       	movw	r24, r2
   1490a:	0e 94 a2 79 	call	0xf344	; 0xf344 <stat>
   1490e:	01 96       	adiw	r24, 0x01	; 1
   14910:	99 f5       	brne	.+102    	; 0x14978 <format_drives+0x12a>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   14912:	f8 01       	movw	r30, r16
   14914:	87 a5       	ldd	r24, Z+47	; 0x2f
   14916:	90 a9       	ldd	r25, Z+48	; 0x30
   14918:	81 15       	cp	r24, r1
   1491a:	91 40       	sbci	r25, 0x01	; 1
   1491c:	49 f0       	breq	.+18     	; 0x14930 <format_drives+0xe2>
                {
                    printf("Can not use non 256 byte sectors\n");
   1491e:	1f 92       	push	r1
   14920:	6d 96       	adiw	r28, 0x1d	; 29
   14922:	2f ad       	ldd	r18, Y+63	; 0x3f
   14924:	6d 97       	sbiw	r28, 0x1d	; 29
   14926:	2f 93       	push	r18
   14928:	6c 96       	adiw	r28, 0x1c	; 28
   1492a:	3f ad       	ldd	r19, Y+63	; 0x3f
   1492c:	6c 97       	sbiw	r28, 0x1c	; 28
   1492e:	4f c0       	rjmp	.+158    	; 0x149ce <format_drives+0x180>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   14930:	f5 01       	movw	r30, r10
   14932:	c3 80       	ldd	r12, Z+3	; 0x03
   14934:	d4 80       	ldd	r13, Z+4	; 0x04
   14936:	e5 80       	ldd	r14, Z+5	; 0x05
   14938:	f6 80       	ldd	r15, Z+6	; 0x06
                sprintf(label,"SS80-%d", ss80);
   1493a:	63 96       	adiw	r28, 0x13	; 19
   1493c:	ff ad       	ldd	r31, Y+63	; 0x3f
   1493e:	63 97       	sbiw	r28, 0x13	; 19
   14940:	ff 93       	push	r31
   14942:	62 96       	adiw	r28, 0x12	; 18
   14944:	2f ad       	ldd	r18, Y+63	; 0x3f
   14946:	62 97       	sbiw	r28, 0x12	; 18
   14948:	2f 93       	push	r18
   1494a:	1f 92       	push	r1
   1494c:	7f 92       	push	r7
   1494e:	6f 92       	push	r6
   14950:	5f 92       	push	r5
   14952:	4f 92       	push	r4
   14954:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
                    label,
                    lif_dir_count(sectors), 
   14958:	c7 01       	movw	r24, r14
   1495a:	b6 01       	movw	r22, r12
   1495c:	1c d1       	rcall	.+568    	; 0x14b96 <lif_dir_count>
   1495e:	9b 01       	movw	r18, r22
   14960:	ac 01       	movw	r20, r24
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   14962:	87 01       	movw	r16, r14
   14964:	76 01       	movw	r14, r12
   14966:	b2 01       	movw	r22, r4
   14968:	c1 01       	movw	r24, r2
   1496a:	0e 94 65 df 	call	0x1beca	; 0x1beca <lif_create_image>
   1496e:	0f b6       	in	r0, 0x3f	; 63
   14970:	f8 94       	cli
   14972:	de bf       	out	0x3e, r29	; 62
   14974:	0f be       	out	0x3f, r0	; 63
   14976:	cd bf       	out	0x3d, r28	; 61
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif

            }
            ss80++;
   14978:	63 96       	adiw	r28, 0x13	; 19
   1497a:	ee ad       	ldd	r30, Y+62	; 0x3e
   1497c:	ff ad       	ldd	r31, Y+63	; 0x3f
   1497e:	63 97       	sbiw	r28, 0x13	; 19
   14980:	31 96       	adiw	r30, 0x01	; 1
   14982:	63 96       	adiw	r28, 0x13	; 19
   14984:	ff af       	std	Y+63, r31	; 0x3f
   14986:	ee af       	std	Y+62, r30	; 0x3e
   14988:	63 97       	sbiw	r28, 0x13	; 19
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   1498a:	f5 01       	movw	r30, r10
   1498c:	80 81       	ld	r24, Z
   1498e:	81 30       	cpi	r24, 0x01	; 1
   14990:	09 f0       	breq	.+2      	; 0x14994 <format_drives+0x146>
   14992:	57 c0       	rjmp	.+174    	; 0x14a42 <format_drives+0x1f4>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   14994:	07 a1       	ldd	r16, Z+39	; 0x27
   14996:	10 a5       	ldd	r17, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   14998:	18 01       	movw	r2, r16
   1499a:	f2 e0       	ldi	r31, 0x02	; 2
   1499c:	2f 0e       	add	r2, r31
   1499e:	31 1c       	adc	r3, r1
   149a0:	be 01       	movw	r22, r28
   149a2:	6f 5f       	subi	r22, 0xFF	; 255
   149a4:	7f 4f       	sbci	r23, 0xFF	; 255
   149a6:	c1 01       	movw	r24, r2
   149a8:	0e 94 a2 79 	call	0xf344	; 0xf344 <stat>
   149ac:	01 96       	adiw	r24, 0x01	; 1
   149ae:	09 f0       	breq	.+2      	; 0x149b2 <format_drives+0x164>
   149b0:	3f c0       	rjmp	.+126    	; 0x14a30 <format_drives+0x1e2>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   149b2:	f8 01       	movw	r30, r16
   149b4:	85 a1       	ldd	r24, Z+37	; 0x25
   149b6:	96 a1       	ldd	r25, Z+38	; 0x26
   149b8:	81 15       	cp	r24, r1
   149ba:	91 40       	sbci	r25, 0x01	; 1
   149bc:	79 f0       	breq	.+30     	; 0x149dc <format_drives+0x18e>
                {
                    printf("Can not use non 256 byte sectors\n");
   149be:	1f 92       	push	r1
   149c0:	6a 96       	adiw	r28, 0x1a	; 26
   149c2:	2f ad       	ldd	r18, Y+63	; 0x3f
   149c4:	6a 97       	sbiw	r28, 0x1a	; 26
   149c6:	2f 93       	push	r18
   149c8:	69 96       	adiw	r28, 0x19	; 25
   149ca:	3f ad       	ldd	r19, Y+63	; 0x3f
   149cc:	69 97       	sbiw	r28, 0x19	; 25
   149ce:	3f 93       	push	r19
   149d0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
                    continue;
   149d4:	0f 90       	pop	r0
   149d6:	0f 90       	pop	r0
   149d8:	0f 90       	pop	r0
   149da:	33 c0       	rjmp	.+102    	; 0x14a42 <format_drives+0x1f4>
                }
                sectors = Devices[i].BLOCKS;
   149dc:	f5 01       	movw	r30, r10
   149de:	c3 80       	ldd	r12, Z+3	; 0x03
   149e0:	d4 80       	ldd	r13, Z+4	; 0x04
   149e2:	e5 80       	ldd	r14, Z+5	; 0x05
   149e4:	f6 80       	ldd	r15, Z+6	; 0x06
                sprintf(label,"AMIGO%d", amigo);
   149e6:	65 96       	adiw	r28, 0x15	; 21
   149e8:	ff ad       	ldd	r31, Y+63	; 0x3f
   149ea:	65 97       	sbiw	r28, 0x15	; 21
   149ec:	ff 93       	push	r31
   149ee:	64 96       	adiw	r28, 0x14	; 20
   149f0:	2f ad       	ldd	r18, Y+63	; 0x3f
   149f2:	64 97       	sbiw	r28, 0x14	; 20
   149f4:	2f 93       	push	r18
   149f6:	1f 92       	push	r1
   149f8:	67 96       	adiw	r28, 0x17	; 23
   149fa:	3f ad       	ldd	r19, Y+63	; 0x3f
   149fc:	67 97       	sbiw	r28, 0x17	; 23
   149fe:	3f 93       	push	r19
   14a00:	66 96       	adiw	r28, 0x16	; 22
   14a02:	4f ad       	ldd	r20, Y+63	; 0x3f
   14a04:	66 97       	sbiw	r28, 0x16	; 22
   14a06:	4f 93       	push	r20
   14a08:	5f 92       	push	r5
   14a0a:	4f 92       	push	r4
   14a0c:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
                    label,
                    lif_dir_count(sectors), 
   14a10:	c7 01       	movw	r24, r14
   14a12:	b6 01       	movw	r22, r12
   14a14:	c0 d0       	rcall	.+384    	; 0x14b96 <lif_dir_count>
   14a16:	9b 01       	movw	r18, r22
   14a18:	ac 01       	movw	r20, r24
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   14a1a:	87 01       	movw	r16, r14
   14a1c:	76 01       	movw	r14, r12
   14a1e:	b2 01       	movw	r22, r4
   14a20:	c1 01       	movw	r24, r2
   14a22:	0e 94 65 df 	call	0x1beca	; 0x1beca <lif_create_image>
   14a26:	0f b6       	in	r0, 0x3f	; 63
   14a28:	f8 94       	cli
   14a2a:	de bf       	out	0x3e, r29	; 62
   14a2c:	0f be       	out	0x3f, r0	; 63
   14a2e:	cd bf       	out	0x3d, r28	; 61
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
            }
            amigo++;
   14a30:	65 96       	adiw	r28, 0x15	; 21
   14a32:	ee ad       	ldd	r30, Y+62	; 0x3e
   14a34:	ff ad       	ldd	r31, Y+63	; 0x3f
   14a36:	65 97       	sbiw	r28, 0x15	; 21
   14a38:	31 96       	adiw	r30, 0x01	; 1
   14a3a:	65 96       	adiw	r28, 0x15	; 21
   14a3c:	ff af       	std	Y+63, r31	; 0x3f
   14a3e:	ee af       	std	Y+62, r30	; 0x3e
   14a40:	65 97       	sbiw	r28, 0x15	; 21
   14a42:	fb e2       	ldi	r31, 0x2B	; 43
   14a44:	af 0e       	add	r10, r31
   14a46:	b1 1c       	adc	r11, r1
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   14a48:	20 ef       	ldi	r18, 0xF0	; 240
   14a4a:	3f e1       	ldi	r19, 0x1F	; 31
   14a4c:	2a 15       	cp	r18, r10
   14a4e:	3b 05       	cpc	r19, r11
   14a50:	09 f0       	breq	.+2      	; 0x14a54 <format_drives+0x206>
   14a52:	49 cf       	rjmp	.-366    	; 0x148e6 <format_drives+0x98>
            }
            amigo++;
        } 
#endif // #ifdef AMIGO
    }
    printf("\n");
   14a54:	8e e5       	ldi	r24, 0x5E	; 94
   14a56:	95 e1       	ldi	r25, 0x15	; 21
   14a58:	1f 92       	push	r1
   14a5a:	9f 93       	push	r25
   14a5c:	8f 93       	push	r24
   14a5e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
}
   14a62:	0f 90       	pop	r0
   14a64:	0f 90       	pop	r0
   14a66:	0f 90       	pop	r0
   14a68:	c3 5a       	subi	r28, 0xA3	; 163
   14a6a:	df 4f       	sbci	r29, 0xFF	; 255
   14a6c:	0f b6       	in	r0, 0x3f	; 63
   14a6e:	f8 94       	cli
   14a70:	de bf       	out	0x3e, r29	; 62
   14a72:	0f be       	out	0x3f, r0	; 63
   14a74:	cd bf       	out	0x3d, r28	; 61
   14a76:	df 91       	pop	r29
   14a78:	cf 91       	pop	r28
   14a7a:	1f 91       	pop	r17
   14a7c:	0f 91       	pop	r16
   14a7e:	ff 90       	pop	r15
   14a80:	ef 90       	pop	r14
   14a82:	df 90       	pop	r13
   14a84:	cf 90       	pop	r12
   14a86:	bf 90       	pop	r11
   14a88:	af 90       	pop	r10
   14a8a:	8f 90       	pop	r8
   14a8c:	7f 90       	pop	r7
   14a8e:	6f 90       	pop	r6
   14a90:	5f 90       	pop	r5
   14a92:	4f 90       	pop	r4
   14a94:	3f 90       	pop	r3
   14a96:	2f 90       	pop	r2
   14a98:	08 95       	ret

00014a9a <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1);		// 1
   14a9a:	8f e1       	ldi	r24, 0x1F	; 31
   14a9c:	e0 ef       	ldi	r30, 0xF0	; 240
   14a9e:	ff e1       	ldi	r31, 0x1F	; 31
   14aa0:	df 01       	movw	r26, r30
   14aa2:	98 2f       	mov	r25, r24
   14aa4:	1d 92       	st	X+, r1
   14aa6:	9a 95       	dec	r25
   14aa8:	e9 f7       	brne	.-6      	; 0x14aa4 <hpdir_init+0xa>
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);	// 2
   14aaa:	9f e3       	ldi	r25, 0x3F	; 63
   14aac:	e0 e1       	ldi	r30, 0x10	; 16
   14aae:	f0 e2       	ldi	r31, 0x20	; 32
   14ab0:	df 01       	movw	r26, r30
   14ab2:	1d 92       	st	X+, r1
   14ab4:	9a 95       	dec	r25
   14ab6:	e9 f7       	brne	.-6      	; 0x14ab2 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);		// 3
   14ab8:	e0 e5       	ldi	r30, 0x50	; 80
   14aba:	f0 e2       	ldi	r31, 0x20	; 32
   14abc:	df 01       	movw	r26, r30
   14abe:	1d 92       	st	X+, r1
   14ac0:	8a 95       	dec	r24
   14ac2:	e9 f7       	brne	.-6      	; 0x14abe <hpdir_init+0x24>
    hpdir.ID = 0;						// 4
   14ac4:	10 92 70 20 	sts	0x2070, r1	; 0x802070 <hpdir+0x80>
   14ac8:	10 92 71 20 	sts	0x2071, r1	; 0x802071 <hpdir+0x81>
   14acc:	10 92 72 20 	sts	0x2072, r1	; 0x802072 <hpdir+0x82>
   14ad0:	10 92 73 20 	sts	0x2073, r1	; 0x802073 <hpdir+0x83>
	hpdir.mask_stat2 = 0;				// 5
   14ad4:	10 92 74 20 	sts	0x2074, r1	; 0x802074 <hpdir+0x84>
   14ad8:	10 92 75 20 	sts	0x2075, r1	; 0x802075 <hpdir+0x85>
   14adc:	10 92 76 20 	sts	0x2076, r1	; 0x802076 <hpdir+0x86>
   14ae0:	10 92 77 20 	sts	0x2077, r1	; 0x802077 <hpdir+0x87>
	hpdir.id_stat2 = 0;					// 6
   14ae4:	10 92 78 20 	sts	0x2078, r1	; 0x802078 <hpdir+0x88>
   14ae8:	10 92 79 20 	sts	0x2079, r1	; 0x802079 <hpdir+0x89>
   14aec:	10 92 7a 20 	sts	0x207A, r1	; 0x80207a <hpdir+0x8a>
   14af0:	10 92 7b 20 	sts	0x207B, r1	; 0x80207b <hpdir+0x8b>
	hpdir.DEVICE_NUMBER = 0;			// 7
   14af4:	10 92 7c 20 	sts	0x207C, r1	; 0x80207c <hpdir+0x8c>
   14af8:	10 92 7d 20 	sts	0x207D, r1	; 0x80207d <hpdir+0x8d>
   14afc:	10 92 7e 20 	sts	0x207E, r1	; 0x80207e <hpdir+0x8e>
   14b00:	10 92 7f 20 	sts	0x207F, r1	; 0x80207f <hpdir+0x8f>
	hpdir.UNITS_INSTALLED = 0x8001;		// 8
   14b04:	81 e0       	ldi	r24, 0x01	; 1
   14b06:	90 e8       	ldi	r25, 0x80	; 128
   14b08:	a0 e0       	ldi	r26, 0x00	; 0
   14b0a:	b0 e0       	ldi	r27, 0x00	; 0
   14b0c:	80 93 80 20 	sts	0x2080, r24	; 0x802080 <hpdir+0x90>
   14b10:	90 93 81 20 	sts	0x2081, r25	; 0x802081 <hpdir+0x91>
   14b14:	a0 93 82 20 	sts	0x2082, r26	; 0x802082 <hpdir+0x92>
   14b18:	b0 93 83 20 	sts	0x2083, r27	; 0x802083 <hpdir+0x93>
	hpdir.CYLINDERS = 0;  				// 9
   14b1c:	10 92 84 20 	sts	0x2084, r1	; 0x802084 <hpdir+0x94>
   14b20:	10 92 85 20 	sts	0x2085, r1	; 0x802085 <hpdir+0x95>
   14b24:	10 92 86 20 	sts	0x2086, r1	; 0x802086 <hpdir+0x96>
   14b28:	10 92 87 20 	sts	0x2087, r1	; 0x802087 <hpdir+0x97>
	hpdir.HEADS= 0;	     				// 10
   14b2c:	10 92 88 20 	sts	0x2088, r1	; 0x802088 <hpdir+0x98>
   14b30:	10 92 89 20 	sts	0x2089, r1	; 0x802089 <hpdir+0x99>
   14b34:	10 92 8a 20 	sts	0x208A, r1	; 0x80208a <hpdir+0x9a>
   14b38:	10 92 8b 20 	sts	0x208B, r1	; 0x80208b <hpdir+0x9b>
	hpdir.SECTORS= 0;    				// 11
   14b3c:	10 92 8c 20 	sts	0x208C, r1	; 0x80208c <hpdir+0x9c>
   14b40:	10 92 8d 20 	sts	0x208D, r1	; 0x80208d <hpdir+0x9d>
   14b44:	10 92 8e 20 	sts	0x208E, r1	; 0x80208e <hpdir+0x9e>
   14b48:	10 92 8f 20 	sts	0x208F, r1	; 0x80208f <hpdir+0x9f>
	hpdir.BYTES_PER_SECTOR = 0;			// 12
   14b4c:	10 92 90 20 	sts	0x2090, r1	; 0x802090 <hpdir+0xa0>
   14b50:	10 92 91 20 	sts	0x2091, r1	; 0x802091 <hpdir+0xa1>
   14b54:	10 92 92 20 	sts	0x2092, r1	; 0x802092 <hpdir+0xa2>
   14b58:	10 92 93 20 	sts	0x2093, r1	; 0x802093 <hpdir+0xa3>
	hpdir.INTERLEAVE = 0;				// 13
   14b5c:	10 92 94 20 	sts	0x2094, r1	; 0x802094 <hpdir+0xa4>
   14b60:	10 92 95 20 	sts	0x2095, r1	; 0x802095 <hpdir+0xa5>
   14b64:	10 92 96 20 	sts	0x2096, r1	; 0x802096 <hpdir+0xa6>
   14b68:	10 92 97 20 	sts	0x2097, r1	; 0x802097 <hpdir+0xa7>
    hpdir.FIXED = 1;					// 14 ALWAYS 1
   14b6c:	81 e0       	ldi	r24, 0x01	; 1
   14b6e:	90 e0       	ldi	r25, 0x00	; 0
   14b70:	a0 e0       	ldi	r26, 0x00	; 0
   14b72:	b0 e0       	ldi	r27, 0x00	; 0
   14b74:	80 93 98 20 	sts	0x2098, r24	; 0x802098 <hpdir+0xa8>
   14b78:	90 93 99 20 	sts	0x2099, r25	; 0x802099 <hpdir+0xa9>
   14b7c:	a0 93 9a 20 	sts	0x209A, r26	; 0x80209a <hpdir+0xaa>
   14b80:	b0 93 9b 20 	sts	0x209B, r27	; 0x80209b <hpdir+0xab>

	// Computed values
    hpdir.BLOCKS = 0;
   14b84:	10 92 9c 20 	sts	0x209C, r1	; 0x80209c <hpdir+0xac>
   14b88:	10 92 9d 20 	sts	0x209D, r1	; 0x80209d <hpdir+0xad>
   14b8c:	10 92 9e 20 	sts	0x209E, r1	; 0x80209e <hpdir+0xae>
   14b90:	10 92 9f 20 	sts	0x209F, r1	; 0x80209f <hpdir+0xaf>
   14b94:	08 95       	ret

00014b96 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
   14b96:	20 e0       	ldi	r18, 0x00	; 0
   14b98:	30 e0       	ldi	r19, 0x00	; 0
	long num = 1;
	while(blocks)
   14b9a:	61 15       	cp	r22, r1
   14b9c:	71 05       	cpc	r23, r1
   14b9e:	81 05       	cpc	r24, r1
   14ba0:	91 05       	cpc	r25, r1
   14ba2:	39 f0       	breq	.+14     	; 0x14bb2 <lif_dir_count+0x1c>
	{
		scale++;
   14ba4:	2f 5f       	subi	r18, 0xFF	; 255
   14ba6:	3f 4f       	sbci	r19, 0xFF	; 255
 		blocks >>= 1;
   14ba8:	95 95       	asr	r25
   14baa:	87 95       	ror	r24
   14bac:	77 95       	ror	r23
   14bae:	67 95       	ror	r22
   14bb0:	f4 cf       	rjmp	.-24     	; 0x14b9a <lif_dir_count+0x4>
	}
	scale>>=1;
   14bb2:	35 95       	asr	r19
   14bb4:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
	long num = 1;
   14bb6:	61 e0       	ldi	r22, 0x01	; 1
   14bb8:	70 e0       	ldi	r23, 0x00	; 0
   14bba:	80 e0       	ldi	r24, 0x00	; 0
   14bbc:	90 e0       	ldi	r25, 0x00	; 0
	{
		scale++;
 		blocks >>= 1;
	}
	scale>>=1;
	while(scale--)
   14bbe:	21 50       	subi	r18, 0x01	; 1
   14bc0:	31 09       	sbc	r19, r1
   14bc2:	28 f0       	brcs	.+10     	; 0x14bce <lif_dir_count+0x38>
		num <<=1;
   14bc4:	66 0f       	add	r22, r22
   14bc6:	77 1f       	adc	r23, r23
   14bc8:	88 1f       	adc	r24, r24
   14bca:	99 1f       	adc	r25, r25
   14bcc:	f8 cf       	rjmp	.-16     	; 0x14bbe <lif_dir_count+0x28>
	return(num);
}
   14bce:	08 95       	ret

00014bd0 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   14bd0:	a1 e8       	ldi	r26, 0x81	; 129
   14bd2:	b1 e0       	ldi	r27, 0x01	; 1
   14bd4:	ee ee       	ldi	r30, 0xEE	; 238
   14bd6:	f5 ea       	ldi	r31, 0xA5	; 165
   14bd8:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
   14bdc:	98 2e       	mov	r9, r24
   14bde:	59 2e       	mov	r5, r25
   14be0:	1b 01       	movw	r2, r22
	FILE *cfg;
	char *ptr;
    char str[256];
    char token[128];

	hpdir_init();
   14be2:	5a 01       	movw	r10, r20

	cfg = fopen("hpdir.ini","rb");
   14be4:	5a df       	rcall	.-332    	; 0x14a9a <hpdir_init>
   14be6:	66 e8       	ldi	r22, 0x86	; 134
   14be8:	78 e0       	ldi	r23, 0x08	; 8
   14bea:	8e ea       	ldi	r24, 0xAE	; 174
   14bec:	9f e0       	ldi	r25, 0x0F	; 15
   14bee:	0e 94 8e 7e 	call	0xfd1c	; 0xfd1c <fopen>

#ifndef LIF_STAND_ALONE
	if(cfg == NULL)
   14bf2:	7c 01       	movw	r14, r24
   14bf4:	89 2b       	or	r24, r25
		cfg = fopen("/hpdir.ini","rb");
   14bf6:	49 f4       	brne	.+18     	; 0x14c0a <hpdir_find_drive+0x3a>
   14bf8:	66 e8       	ldi	r22, 0x86	; 134
   14bfa:	78 e0       	ldi	r23, 0x08	; 8
   14bfc:	8d ea       	ldi	r24, 0xAD	; 173
   14bfe:	9f e0       	ldi	r25, 0x0F	; 15
   14c00:	0e 94 8e 7e 	call	0xfd1c	; 0xfd1c <fopen>
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

	if(cfg == NULL)
   14c04:	7c 01       	movw	r14, r24
   14c06:	89 2b       	or	r24, r25
		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
			driveinfo = 1;
   14c08:	51 f0       	breq	.+20     	; 0x14c1e <hpdir_find_drive+0x4e>
   14c0a:	c1 2c       	mov	r12, r1

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   14c0c:	d1 2c       	mov	r13, r1
   14c0e:	8e 01       	movw	r16, r28
   14c10:	0f 5f       	subi	r16, 0xFF	; 255
		if( driveinfo != 1)
			continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14c12:	1e 4f       	sbci	r17, 0xFE	; 254
   14c14:	88 e3       	ldi	r24, 0x38	; 56
   14c16:	9f e1       	ldi	r25, 0x1F	; 31
   14c18:	3c 01       	movw	r6, r24
   14c1a:	81 2c       	mov	r8, r1
    }
#endif

	if(cfg == NULL)
	{
		if(verbose)
   14c1c:	1f c0       	rjmp	.+62     	; 0x14c5c <hpdir_find_drive+0x8c>
   14c1e:	a1 14       	cp	r10, r1
   14c20:	b1 04       	cpc	r11, r1
   14c22:	09 f4       	brne	.+2      	; 0x14c26 <hpdir_find_drive+0x56>
			printf("Error: hpdir.ini not found!\n");
   14c24:	7a c1       	rjmp	.+756    	; 0x14f1a <hpdir_find_drive+0x34a>
   14c26:	8f e3       	ldi	r24, 0x3F	; 63
   14c28:	9f e1       	ldi	r25, 0x1F	; 31
   14c2a:	1f 92       	push	r1
   14c2c:	9f 93       	push	r25
   14c2e:	8f 93       	push	r24
   14c30:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   14c34:	0f 90       	pop	r0
   14c36:	0f 90       	pop	r0
   14c38:	0f 90       	pop	r0
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
		errors = 0;
        ptr = str;

        trim_tail(ptr);
   14c3a:	6f c1       	rjmp	.+734    	; 0x14f1a <hpdir_find_drive+0x34a>
   14c3c:	ce 01       	movw	r24, r28
   14c3e:	01 96       	adiw	r24, 0x01	; 1
   14c40:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <trim_tail>
        ptr = skipspaces(ptr);
   14c44:	ce 01       	movw	r24, r28
   14c46:	01 96       	adiw	r24, 0x01	; 1
   14c48:	0e 94 0b 32 	call	0x6416	; 0x6416 <skipspaces>

        len = strlen(ptr);
   14c4c:	fc 01       	movw	r30, r24
   14c4e:	01 90       	ld	r0, Z+
   14c50:	00 20       	and	r0, r0
   14c52:	e9 f7       	brne	.-6      	; 0x14c4e <hpdir_find_drive+0x7e>
        if(!len)
   14c54:	31 97       	sbiw	r30, 0x01	; 1
   14c56:	8e 17       	cp	r24, r30
   14c58:	9f 07       	cpc	r25, r31
		return(0);
	}

	// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14c5a:	51 f4       	brne	.+20     	; 0x14c70 <hpdir_find_drive+0xa0>
   14c5c:	a7 01       	movw	r20, r14
   14c5e:	6e ef       	ldi	r22, 0xFE	; 254
   14c60:	70 e0       	ldi	r23, 0x00	; 0
   14c62:	ce 01       	movw	r24, r28
   14c64:	01 96       	adiw	r24, 0x01	; 1
   14c66:	0e 94 bf 76 	call	0xed7e	; 0xed7e <fgets>
   14c6a:	89 2b       	or	r24, r25
   14c6c:	39 f7       	brne	.-50     	; 0x14c3c <hpdir_find_drive+0x6c>
        len = strlen(ptr);
        if(!len)
            continue;

        // Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14c6e:	0c c0       	rjmp	.+24     	; 0x14c88 <hpdir_find_drive+0xb8>
   14c70:	fc 01       	movw	r30, r24
   14c72:	20 81       	ld	r18, Z
   14c74:	2b 33       	cpi	r18, 0x3B	; 59
   14c76:	91 f3       	breq	.-28     	; 0x14c5c <hpdir_find_drive+0x8c>
   14c78:	23 32       	cpi	r18, 0x23	; 35
            continue;

		if(*ptr == '[' && driveinfo == 1 )
   14c7a:	81 f3       	breq	.-32     	; 0x14c5c <hpdir_find_drive+0x8c>
   14c7c:	2b 35       	cpi	r18, 0x5B	; 91
   14c7e:	31 f4       	brne	.+12     	; 0x14c8c <hpdir_find_drive+0xbc>
   14c80:	f1 e0       	ldi	r31, 0x01	; 1
   14c82:	cf 16       	cp	r12, r31
   14c84:	d1 04       	cpc	r13, r1
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   14c86:	11 f4       	brne	.+4      	; 0x14c8c <hpdir_find_drive+0xbc>
   14c88:	00 e0       	ldi	r16, 0x00	; 0

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   14c8a:	41 c1       	rjmp	.+642    	; 0x14f0e <hpdir_find_drive+0x33e>
   14c8c:	4e e7       	ldi	r20, 0x7E	; 126
   14c8e:	50 e0       	ldi	r21, 0x00	; 0
   14c90:	b8 01       	movw	r22, r16
   14c92:	0e 94 4b 33 	call	0x6696	; 0x6696 <get_token>
   14c96:	cf 57       	subi	r28, 0x7F	; 127
   14c98:	de 4f       	sbci	r29, 0xFE	; 254
   14c9a:	88 83       	st	Y, r24
   14c9c:	c1 58       	subi	r28, 0x81	; 129
   14c9e:	d1 40       	sbci	r29, 0x01	; 1

        if(MATCHI(token,"[driveinfo]"))
   14ca0:	49 2e       	mov	r4, r25
   14ca2:	68 eb       	ldi	r22, 0xB8	; 184
   14ca4:	7f e0       	ldi	r23, 0x0F	; 15
   14ca6:	c8 01       	movw	r24, r16
   14ca8:	0e 94 c1 32 	call	0x6582	; 0x6582 <MATCHI>
   14cac:	89 2b       	or	r24, r25
        {
			driveinfo = 1;
   14cae:	21 f0       	breq	.+8      	; 0x14cb8 <hpdir_find_drive+0xe8>
   14cb0:	cc 24       	eor	r12, r12
   14cb2:	c3 94       	inc	r12
   14cb4:	d1 2c       	mov	r13, r1
            continue;
        }

		if( driveinfo != 1)
   14cb6:	d2 cf       	rjmp	.-92     	; 0x14c5c <hpdir_find_drive+0x8c>
   14cb8:	21 e0       	ldi	r18, 0x01	; 1
   14cba:	c2 16       	cp	r12, r18
   14cbc:	d1 04       	cpc	r13, r1
			continue;

        if(list)
   14cbe:	71 f6       	brne	.-100    	; 0x14c5c <hpdir_find_drive+0x8c>
   14cc0:	21 14       	cp	r2, r1
   14cc2:	31 04       	cpc	r3, r1
        {
            printf("%s %s\n", token, ptr);
   14cc4:	a1 f0       	breq	.+40     	; 0x14cee <hpdir_find_drive+0x11e>
   14cc6:	4f 92       	push	r4
   14cc8:	cf 57       	subi	r28, 0x7F	; 127
   14cca:	de 4f       	sbci	r29, 0xFE	; 254
   14ccc:	88 81       	ld	r24, Y
   14cce:	c1 58       	subi	r28, 0x81	; 129
   14cd0:	d1 40       	sbci	r29, 0x01	; 1
   14cd2:	8f 93       	push	r24
   14cd4:	1f 93       	push	r17
   14cd6:	0f 93       	push	r16
   14cd8:	1f 92       	push	r1
   14cda:	7f 92       	push	r7
   14cdc:	6f 92       	push	r6
   14cde:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            continue;
   14ce2:	0f b6       	in	r0, 0x3f	; 63
   14ce4:	f8 94       	cli
   14ce6:	de bf       	out	0x3e, r29	; 62
   14ce8:	0f be       	out	0x3f, r0	; 63
   14cea:	cd bf       	out	0x3d, r28	; 61
        }

		if ( ! MATCHI(model,token) )
   14cec:	b7 cf       	rjmp	.-146    	; 0x14c5c <hpdir_find_drive+0x8c>
   14cee:	b8 01       	movw	r22, r16
   14cf0:	89 2d       	mov	r24, r9
   14cf2:	95 2d       	mov	r25, r5
   14cf4:	0e 94 c1 32 	call	0x6582	; 0x6582 <MATCHI>
			continue;

		hpdir_init();
   14cf8:	89 2b       	or	r24, r25
   14cfa:	d1 f2       	breq	.-76     	; 0x14cb0 <hpdir_find_drive+0xe0>

		if(verbose)
   14cfc:	ce de       	rcall	.-612    	; 0x14a9a <hpdir_init>
   14cfe:	a1 14       	cp	r10, r1
   14d00:	b1 04       	cpc	r11, r1
			printf("Found Model: %s\n", model);
   14d02:	71 f0       	breq	.+28     	; 0x14d20 <hpdir_find_drive+0x150>
   14d04:	5f 92       	push	r5
   14d06:	9f 92       	push	r9
   14d08:	87 e2       	ldi	r24, 0x27	; 39
   14d0a:	9f e1       	ldi	r25, 0x1F	; 31
   14d0c:	1f 92       	push	r1
   14d0e:	9f 93       	push	r25
   14d10:	8f 93       	push	r24
   14d12:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   14d16:	0f 90       	pop	r0
   14d18:	0f 90       	pop	r0
   14d1a:	0f 90       	pop	r0
   14d1c:	0f 90       	pop	r0

		strncpy(hpdir.model,token,sizeof(hpdir.model)-2);				// 1 Model
   14d1e:	0f 90       	pop	r0
   14d20:	4e e1       	ldi	r20, 0x1E	; 30
   14d22:	50 e0       	ldi	r21, 0x00	; 0
   14d24:	b8 01       	movw	r22, r16
   14d26:	80 ef       	ldi	r24, 0xF0	; 240
   14d28:	9f e1       	ldi	r25, 0x1F	; 31
   14d2a:	0e 94 ac 31 	call	0x6358	; 0x6358 <strncpy>

		ptr = get_token(ptr, token, 	sizeof(token)-2);				// =
   14d2e:	4e e7       	ldi	r20, 0x7E	; 126
   14d30:	50 e0       	ldi	r21, 0x00	; 0
   14d32:	b8 01       	movw	r22, r16
   14d34:	cf 57       	subi	r28, 0x7F	; 127
   14d36:	de 4f       	sbci	r29, 0xFE	; 254
   14d38:	88 81       	ld	r24, Y
   14d3a:	c1 58       	subi	r28, 0x81	; 129
   14d3c:	d1 40       	sbci	r29, 0x01	; 1
   14d3e:	94 2d       	mov	r25, r4
   14d40:	0e 94 4b 33 	call	0x6696	; 0x6696 <get_token>

		ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);	// 2 Comment
   14d44:	4e e3       	ldi	r20, 0x3E	; 62
   14d46:	50 e0       	ldi	r21, 0x00	; 0
   14d48:	60 e1       	ldi	r22, 0x10	; 16
   14d4a:	70 e2       	ldi	r23, 0x20	; 32
   14d4c:	0e 94 4b 33 	call	0x6696	; 0x6696 <get_token>

		ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);		// 3 AMIGO/SS80/CS80
   14d50:	4e e1       	ldi	r20, 0x1E	; 30
   14d52:	50 e0       	ldi	r21, 0x00	; 0
   14d54:	60 e5       	ldi	r22, 0x50	; 80
   14d56:	70 e2       	ldi	r23, 0x20	; 32
   14d58:	0e 94 4b 33 	call	0x6696	; 0x6696 <get_token>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 4 Identify ID
   14d5c:	4e e7       	ldi	r20, 0x7E	; 126
   14d5e:	50 e0       	ldi	r21, 0x00	; 0
   14d60:	b8 01       	movw	r22, r16
   14d62:	0e 94 4b 33 	call	0x6696	; 0x6696 <get_token>
		hpdir.ID = get_value(token);
   14d66:	6c 01       	movw	r12, r24
   14d68:	c8 01       	movw	r24, r16
   14d6a:	0e 94 c0 33 	call	0x6780	; 0x6780 <get_value>
   14d6e:	60 93 70 20 	sts	0x2070, r22	; 0x802070 <hpdir+0x80>
   14d72:	70 93 71 20 	sts	0x2071, r23	; 0x802071 <hpdir+0x81>
   14d76:	80 93 72 20 	sts	0x2072, r24	; 0x802072 <hpdir+0x82>
   14d7a:	90 93 73 20 	sts	0x2073, r25	; 0x802073 <hpdir+0x83>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 5 MASK STAT 2
   14d7e:	4e e7       	ldi	r20, 0x7E	; 126
   14d80:	50 e0       	ldi	r21, 0x00	; 0
   14d82:	b8 01       	movw	r22, r16
   14d84:	c6 01       	movw	r24, r12
   14d86:	0e 94 4b 33 	call	0x6696	; 0x6696 <get_token>
		hpdir.mask_stat2 = get_value(token);
   14d8a:	6c 01       	movw	r12, r24
   14d8c:	c8 01       	movw	r24, r16
   14d8e:	0e 94 c0 33 	call	0x6780	; 0x6780 <get_value>
   14d92:	60 93 74 20 	sts	0x2074, r22	; 0x802074 <hpdir+0x84>
   14d96:	70 93 75 20 	sts	0x2075, r23	; 0x802075 <hpdir+0x85>
   14d9a:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <hpdir+0x86>
   14d9e:	90 93 77 20 	sts	0x2077, r25	; 0x802077 <hpdir+0x87>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 6 STAT2
   14da2:	4e e7       	ldi	r20, 0x7E	; 126
   14da4:	50 e0       	ldi	r21, 0x00	; 0
   14da6:	b8 01       	movw	r22, r16
   14da8:	c6 01       	movw	r24, r12
   14daa:	0e 94 4b 33 	call	0x6696	; 0x6696 <get_token>
		hpdir.id_stat2 = get_value(token);
   14dae:	6c 01       	movw	r12, r24
   14db0:	c8 01       	movw	r24, r16
   14db2:	0e 94 c0 33 	call	0x6780	; 0x6780 <get_value>
   14db6:	60 93 78 20 	sts	0x2078, r22	; 0x802078 <hpdir+0x88>
   14dba:	70 93 79 20 	sts	0x2079, r23	; 0x802079 <hpdir+0x89>
   14dbe:	80 93 7a 20 	sts	0x207A, r24	; 0x80207a <hpdir+0x8a>
   14dc2:	90 93 7b 20 	sts	0x207B, r25	; 0x80207b <hpdir+0x8b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 7 BCD include model number
   14dc6:	4e e7       	ldi	r20, 0x7E	; 126
   14dc8:	50 e0       	ldi	r21, 0x00	; 0
   14dca:	b8 01       	movw	r22, r16
   14dcc:	c6 01       	movw	r24, r12
   14dce:	0e 94 4b 33 	call	0x6696	; 0x6696 <get_token>
		hpdir.DEVICE_NUMBER = get_value(token);
   14dd2:	6c 01       	movw	r12, r24
   14dd4:	c8 01       	movw	r24, r16
   14dd6:	0e 94 c0 33 	call	0x6780	; 0x6780 <get_value>
   14dda:	60 93 7c 20 	sts	0x207C, r22	; 0x80207c <hpdir+0x8c>
   14dde:	70 93 7d 20 	sts	0x207D, r23	; 0x80207d <hpdir+0x8d>
   14de2:	80 93 7e 20 	sts	0x207E, r24	; 0x80207e <hpdir+0x8e>
   14de6:	90 93 7f 20 	sts	0x207F, r25	; 0x80207f <hpdir+0x8f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 8 Units installed
   14dea:	4e e7       	ldi	r20, 0x7E	; 126
   14dec:	50 e0       	ldi	r21, 0x00	; 0
   14dee:	b8 01       	movw	r22, r16
   14df0:	c6 01       	movw	r24, r12
   14df2:	0e 94 4b 33 	call	0x6696	; 0x6696 <get_token>
		hpdir.UNITS_INSTALLED = get_value(token);
   14df6:	6c 01       	movw	r12, r24
   14df8:	c8 01       	movw	r24, r16
   14dfa:	0e 94 c0 33 	call	0x6780	; 0x6780 <get_value>
   14dfe:	60 93 80 20 	sts	0x2080, r22	; 0x802080 <hpdir+0x90>
   14e02:	70 93 81 20 	sts	0x2081, r23	; 0x802081 <hpdir+0x91>
   14e06:	80 93 82 20 	sts	0x2082, r24	; 0x802082 <hpdir+0x92>
   14e0a:	90 93 83 20 	sts	0x2083, r25	; 0x802083 <hpdir+0x93>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 9 Cylinders
   14e0e:	4e e7       	ldi	r20, 0x7E	; 126
   14e10:	50 e0       	ldi	r21, 0x00	; 0
   14e12:	b8 01       	movw	r22, r16
   14e14:	c6 01       	movw	r24, r12
   14e16:	0e 94 4b 33 	call	0x6696	; 0x6696 <get_token>
		hpdir.CYLINDERS = get_value(token);
   14e1a:	6c 01       	movw	r12, r24
   14e1c:	c8 01       	movw	r24, r16
   14e1e:	0e 94 c0 33 	call	0x6780	; 0x6780 <get_value>
   14e22:	60 93 84 20 	sts	0x2084, r22	; 0x802084 <hpdir+0x94>
   14e26:	70 93 85 20 	sts	0x2085, r23	; 0x802085 <hpdir+0x95>
   14e2a:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <hpdir+0x96>
   14e2e:	90 93 87 20 	sts	0x2087, r25	; 0x802087 <hpdir+0x97>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 10 Heads
   14e32:	4e e7       	ldi	r20, 0x7E	; 126
   14e34:	50 e0       	ldi	r21, 0x00	; 0
   14e36:	b8 01       	movw	r22, r16
   14e38:	c6 01       	movw	r24, r12
   14e3a:	0e 94 4b 33 	call	0x6696	; 0x6696 <get_token>
		hpdir.HEADS = get_value(token);
   14e3e:	6c 01       	movw	r12, r24
   14e40:	c8 01       	movw	r24, r16
   14e42:	0e 94 c0 33 	call	0x6780	; 0x6780 <get_value>
   14e46:	60 93 88 20 	sts	0x2088, r22	; 0x802088 <hpdir+0x98>
   14e4a:	70 93 89 20 	sts	0x2089, r23	; 0x802089 <hpdir+0x99>
   14e4e:	80 93 8a 20 	sts	0x208A, r24	; 0x80208a <hpdir+0x9a>
   14e52:	90 93 8b 20 	sts	0x208B, r25	; 0x80208b <hpdir+0x9b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 11 Sectors
   14e56:	4e e7       	ldi	r20, 0x7E	; 126
   14e58:	50 e0       	ldi	r21, 0x00	; 0
   14e5a:	b8 01       	movw	r22, r16
   14e5c:	c6 01       	movw	r24, r12
   14e5e:	0e 94 4b 33 	call	0x6696	; 0x6696 <get_token>
		hpdir.SECTORS = get_value(token);
   14e62:	6c 01       	movw	r12, r24
   14e64:	c8 01       	movw	r24, r16
   14e66:	0e 94 c0 33 	call	0x6780	; 0x6780 <get_value>
   14e6a:	60 93 8c 20 	sts	0x208C, r22	; 0x80208c <hpdir+0x9c>
   14e6e:	70 93 8d 20 	sts	0x208D, r23	; 0x80208d <hpdir+0x9d>
   14e72:	80 93 8e 20 	sts	0x208E, r24	; 0x80208e <hpdir+0x9e>
   14e76:	90 93 8f 20 	sts	0x208F, r25	; 0x80208f <hpdir+0x9f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 12 Bytes Per Block/Sector
   14e7a:	4e e7       	ldi	r20, 0x7E	; 126
   14e7c:	50 e0       	ldi	r21, 0x00	; 0
   14e7e:	b8 01       	movw	r22, r16
   14e80:	c6 01       	movw	r24, r12
   14e82:	0e 94 4b 33 	call	0x6696	; 0x6696 <get_token>
		hpdir.BYTES_PER_SECTOR = get_value(token);
   14e86:	6c 01       	movw	r12, r24
   14e88:	c8 01       	movw	r24, r16
   14e8a:	0e 94 c0 33 	call	0x6780	; 0x6780 <get_value>
   14e8e:	60 93 90 20 	sts	0x2090, r22	; 0x802090 <hpdir+0xa0>
   14e92:	70 93 91 20 	sts	0x2091, r23	; 0x802091 <hpdir+0xa1>
   14e96:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <hpdir+0xa2>
   14e9a:	90 93 93 20 	sts	0x2093, r25	; 0x802093 <hpdir+0xa3>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 13 Interleave
   14e9e:	4e e7       	ldi	r20, 0x7E	; 126
   14ea0:	50 e0       	ldi	r21, 0x00	; 0
   14ea2:	b8 01       	movw	r22, r16
   14ea4:	c6 01       	movw	r24, r12
   14ea6:	0e 94 4b 33 	call	0x6696	; 0x6696 <get_token>
		hpdir.INTERLEAVE = get_value(token);
   14eaa:	c8 01       	movw	r24, r16
   14eac:	0e 94 c0 33 	call	0x6780	; 0x6780 <get_value>
   14eb0:	60 93 94 20 	sts	0x2094, r22	; 0x802094 <hpdir+0xa4>
   14eb4:	70 93 95 20 	sts	0x2095, r23	; 0x802095 <hpdir+0xa5>
   14eb8:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <hpdir+0xa6>
   14ebc:	90 93 97 20 	sts	0x2097, r25	; 0x802097 <hpdir+0xa7>

		// Computed values
		hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14ec0:	20 91 84 20 	lds	r18, 0x2084	; 0x802084 <hpdir+0x94>
   14ec4:	30 91 85 20 	lds	r19, 0x2085	; 0x802085 <hpdir+0x95>
   14ec8:	40 91 86 20 	lds	r20, 0x2086	; 0x802086 <hpdir+0x96>
   14ecc:	50 91 87 20 	lds	r21, 0x2087	; 0x802087 <hpdir+0x97>
   14ed0:	60 91 88 20 	lds	r22, 0x2088	; 0x802088 <hpdir+0x98>
   14ed4:	70 91 89 20 	lds	r23, 0x2089	; 0x802089 <hpdir+0x99>
   14ed8:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <hpdir+0x9a>
   14edc:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <hpdir+0x9b>
   14ee0:	0e 94 6a e4 	call	0x1c8d4	; 0x1c8d4 <__mulsi3>
   14ee4:	9b 01       	movw	r18, r22
   14ee6:	ac 01       	movw	r20, r24
   14ee8:	60 91 8c 20 	lds	r22, 0x208C	; 0x80208c <hpdir+0x9c>
   14eec:	70 91 8d 20 	lds	r23, 0x208D	; 0x80208d <hpdir+0x9d>
   14ef0:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <hpdir+0x9e>
   14ef4:	90 91 8f 20 	lds	r25, 0x208F	; 0x80208f <hpdir+0x9f>
   14ef8:	0e 94 6a e4 	call	0x1c8d4	; 0x1c8d4 <__mulsi3>
   14efc:	60 93 9c 20 	sts	0x209C, r22	; 0x80209c <hpdir+0xac>
   14f00:	70 93 9d 20 	sts	0x209D, r23	; 0x80209d <hpdir+0xad>
   14f04:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <hpdir+0xae>
   14f08:	90 93 9f 20 	sts	0x209F, r25	; 0x80209f <hpdir+0xaf>
		{
			if(verbose)
				printf("Error /hpdir.ini parsing\n");
			break;
		}
		found = 1;
   14f0c:	01 e0       	ldi	r16, 0x01	; 1
		break;

	}	// while
	fclose(cfg);
   14f0e:	10 e0       	ldi	r17, 0x00	; 0
   14f10:	c7 01       	movw	r24, r14
   14f12:	0e 94 38 7d 	call	0xfa70	; 0xfa70 <fclose>
	return(found);
   14f16:	c8 01       	movw	r24, r16

	if(cfg == NULL)
	{
		if(verbose)
			printf("Error: hpdir.ini not found!\n");
		return(0);
   14f18:	02 c0       	rjmp	.+4      	; 0x14f1e <hpdir_find_drive+0x34e>
   14f1a:	80 e0       	ldi	r24, 0x00	; 0
		break;

	}	// while
	fclose(cfg);
	return(found);
}
   14f1c:	90 e0       	ldi	r25, 0x00	; 0
   14f1e:	cf 57       	subi	r28, 0x7F	; 127
   14f20:	de 4f       	sbci	r29, 0xFE	; 254
   14f22:	e2 e1       	ldi	r30, 0x12	; 18
   14f24:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

00014f28 <SS80ControllerPack>:
   14f28:	0f 93       	push	r16
   14f2a:	1f 93       	push	r17
   14f2c:	25 e0       	ldi	r18, 0x05	; 5
   14f2e:	30 e0       	ldi	r19, 0x00	; 0
   14f30:	fc 01       	movw	r30, r24
   14f32:	31 83       	std	Z+1, r19	; 0x01
   14f34:	20 83       	st	Z, r18
   14f36:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   14f3a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   14f3e:	05 a1       	ldd	r16, Z+37	; 0x25
   14f40:	16 a1       	ldd	r17, Z+38	; 0x26
   14f42:	20 e0       	ldi	r18, 0x00	; 0
   14f44:	30 e0       	ldi	r19, 0x00	; 0
   14f46:	42 e0       	ldi	r20, 0x02	; 2
   14f48:	50 e0       	ldi	r21, 0x00	; 0
   14f4a:	60 e0       	ldi	r22, 0x00	; 0
   14f4c:	70 e0       	ldi	r23, 0x00	; 0
   14f4e:	87 e9       	ldi	r24, 0x97	; 151
   14f50:	98 e1       	ldi	r25, 0x18	; 24
   14f52:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   14f56:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   14f5a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   14f5e:	07 a1       	ldd	r16, Z+39	; 0x27
   14f60:	10 a5       	ldd	r17, Z+40	; 0x28
   14f62:	20 e0       	ldi	r18, 0x00	; 0
   14f64:	30 e0       	ldi	r19, 0x00	; 0
   14f66:	42 e0       	ldi	r20, 0x02	; 2
   14f68:	50 e0       	ldi	r21, 0x00	; 0
   14f6a:	61 e0       	ldi	r22, 0x01	; 1
   14f6c:	70 e0       	ldi	r23, 0x00	; 0
   14f6e:	87 e9       	ldi	r24, 0x97	; 151
   14f70:	98 e1       	ldi	r25, 0x18	; 24
   14f72:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   14f76:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   14f7a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   14f7e:	01 a5       	ldd	r16, Z+41	; 0x29
   14f80:	10 e0       	ldi	r17, 0x00	; 0
   14f82:	20 e0       	ldi	r18, 0x00	; 0
   14f84:	30 e0       	ldi	r19, 0x00	; 0
   14f86:	41 e0       	ldi	r20, 0x01	; 1
   14f88:	50 e0       	ldi	r21, 0x00	; 0
   14f8a:	64 e0       	ldi	r22, 0x04	; 4
   14f8c:	70 e0       	ldi	r23, 0x00	; 0
   14f8e:	87 e9       	ldi	r24, 0x97	; 151
   14f90:	98 e1       	ldi	r25, 0x18	; 24
   14f92:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   14f96:	87 e9       	ldi	r24, 0x97	; 151
   14f98:	98 e1       	ldi	r25, 0x18	; 24
   14f9a:	1f 91       	pop	r17
   14f9c:	0f 91       	pop	r16
   14f9e:	08 95       	ret

00014fa0 <SS80UnitPack>:
   14fa0:	0f 93       	push	r16
   14fa2:	1f 93       	push	r17
   14fa4:	23 e1       	ldi	r18, 0x13	; 19
   14fa6:	30 e0       	ldi	r19, 0x00	; 0
   14fa8:	fc 01       	movw	r30, r24
   14faa:	31 83       	std	Z+1, r19	; 0x01
   14fac:	20 83       	st	Z, r18
   14fae:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   14fb2:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   14fb6:	02 a5       	ldd	r16, Z+42	; 0x2a
   14fb8:	10 e0       	ldi	r17, 0x00	; 0
   14fba:	20 e0       	ldi	r18, 0x00	; 0
   14fbc:	30 e0       	ldi	r19, 0x00	; 0
   14fbe:	41 e0       	ldi	r20, 0x01	; 1
   14fc0:	50 e0       	ldi	r21, 0x00	; 0
   14fc2:	60 e0       	ldi	r22, 0x00	; 0
   14fc4:	70 e0       	ldi	r23, 0x00	; 0
   14fc6:	84 e8       	ldi	r24, 0x84	; 132
   14fc8:	98 e1       	ldi	r25, 0x18	; 24
   14fca:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   14fce:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   14fd2:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   14fd6:	03 a5       	ldd	r16, Z+43	; 0x2b
   14fd8:	14 a5       	ldd	r17, Z+44	; 0x2c
   14fda:	25 a5       	ldd	r18, Z+45	; 0x2d
   14fdc:	36 a5       	ldd	r19, Z+46	; 0x2e
   14fde:	43 e0       	ldi	r20, 0x03	; 3
   14fe0:	50 e0       	ldi	r21, 0x00	; 0
   14fe2:	61 e0       	ldi	r22, 0x01	; 1
   14fe4:	70 e0       	ldi	r23, 0x00	; 0
   14fe6:	84 e8       	ldi	r24, 0x84	; 132
   14fe8:	98 e1       	ldi	r25, 0x18	; 24
   14fea:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   14fee:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   14ff2:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   14ff6:	07 a5       	ldd	r16, Z+47	; 0x2f
   14ff8:	10 a9       	ldd	r17, Z+48	; 0x30
   14ffa:	20 e0       	ldi	r18, 0x00	; 0
   14ffc:	30 e0       	ldi	r19, 0x00	; 0
   14ffe:	42 e0       	ldi	r20, 0x02	; 2
   15000:	50 e0       	ldi	r21, 0x00	; 0
   15002:	64 e0       	ldi	r22, 0x04	; 4
   15004:	70 e0       	ldi	r23, 0x00	; 0
   15006:	84 e8       	ldi	r24, 0x84	; 132
   15008:	98 e1       	ldi	r25, 0x18	; 24
   1500a:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   1500e:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15012:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15016:	01 a9       	ldd	r16, Z+49	; 0x31
   15018:	10 e0       	ldi	r17, 0x00	; 0
   1501a:	20 e0       	ldi	r18, 0x00	; 0
   1501c:	30 e0       	ldi	r19, 0x00	; 0
   1501e:	41 e0       	ldi	r20, 0x01	; 1
   15020:	50 e0       	ldi	r21, 0x00	; 0
   15022:	66 e0       	ldi	r22, 0x06	; 6
   15024:	70 e0       	ldi	r23, 0x00	; 0
   15026:	84 e8       	ldi	r24, 0x84	; 132
   15028:	98 e1       	ldi	r25, 0x18	; 24
   1502a:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   1502e:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15032:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15036:	02 a9       	ldd	r16, Z+50	; 0x32
   15038:	10 e0       	ldi	r17, 0x00	; 0
   1503a:	20 e0       	ldi	r18, 0x00	; 0
   1503c:	30 e0       	ldi	r19, 0x00	; 0
   1503e:	41 e0       	ldi	r20, 0x01	; 1
   15040:	50 e0       	ldi	r21, 0x00	; 0
   15042:	67 e0       	ldi	r22, 0x07	; 7
   15044:	70 e0       	ldi	r23, 0x00	; 0
   15046:	84 e8       	ldi	r24, 0x84	; 132
   15048:	98 e1       	ldi	r25, 0x18	; 24
   1504a:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   1504e:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15052:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15056:	03 a9       	ldd	r16, Z+51	; 0x33
   15058:	14 a9       	ldd	r17, Z+52	; 0x34
   1505a:	20 e0       	ldi	r18, 0x00	; 0
   1505c:	30 e0       	ldi	r19, 0x00	; 0
   1505e:	42 e0       	ldi	r20, 0x02	; 2
   15060:	50 e0       	ldi	r21, 0x00	; 0
   15062:	68 e0       	ldi	r22, 0x08	; 8
   15064:	70 e0       	ldi	r23, 0x00	; 0
   15066:	84 e8       	ldi	r24, 0x84	; 132
   15068:	98 e1       	ldi	r25, 0x18	; 24
   1506a:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   1506e:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15072:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15076:	05 a9       	ldd	r16, Z+53	; 0x35
   15078:	16 a9       	ldd	r17, Z+54	; 0x36
   1507a:	20 e0       	ldi	r18, 0x00	; 0
   1507c:	30 e0       	ldi	r19, 0x00	; 0
   1507e:	42 e0       	ldi	r20, 0x02	; 2
   15080:	50 e0       	ldi	r21, 0x00	; 0
   15082:	6a e0       	ldi	r22, 0x0A	; 10
   15084:	70 e0       	ldi	r23, 0x00	; 0
   15086:	84 e8       	ldi	r24, 0x84	; 132
   15088:	98 e1       	ldi	r25, 0x18	; 24
   1508a:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   1508e:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15092:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15096:	07 a9       	ldd	r16, Z+55	; 0x37
   15098:	10 ad       	ldd	r17, Z+56	; 0x38
   1509a:	20 e0       	ldi	r18, 0x00	; 0
   1509c:	30 e0       	ldi	r19, 0x00	; 0
   1509e:	42 e0       	ldi	r20, 0x02	; 2
   150a0:	50 e0       	ldi	r21, 0x00	; 0
   150a2:	6c e0       	ldi	r22, 0x0C	; 12
   150a4:	70 e0       	ldi	r23, 0x00	; 0
   150a6:	84 e8       	ldi	r24, 0x84	; 132
   150a8:	98 e1       	ldi	r25, 0x18	; 24
   150aa:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   150ae:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   150b2:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   150b6:	01 ad       	ldd	r16, Z+57	; 0x39
   150b8:	12 ad       	ldd	r17, Z+58	; 0x3a
   150ba:	20 e0       	ldi	r18, 0x00	; 0
   150bc:	30 e0       	ldi	r19, 0x00	; 0
   150be:	42 e0       	ldi	r20, 0x02	; 2
   150c0:	50 e0       	ldi	r21, 0x00	; 0
   150c2:	6e e0       	ldi	r22, 0x0E	; 14
   150c4:	70 e0       	ldi	r23, 0x00	; 0
   150c6:	84 e8       	ldi	r24, 0x84	; 132
   150c8:	98 e1       	ldi	r25, 0x18	; 24
   150ca:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   150ce:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   150d2:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   150d6:	03 ad       	ldd	r16, Z+59	; 0x3b
   150d8:	10 e0       	ldi	r17, 0x00	; 0
   150da:	20 e0       	ldi	r18, 0x00	; 0
   150dc:	30 e0       	ldi	r19, 0x00	; 0
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   150de:	41 e0       	ldi	r20, 0x01	; 1
   150e0:	50 e0       	ldi	r21, 0x00	; 0
   150e2:	60 e1       	ldi	r22, 0x10	; 16
   150e4:	70 e0       	ldi	r23, 0x00	; 0
   150e6:	84 e8       	ldi	r24, 0x84	; 132
   150e8:	98 e1       	ldi	r25, 0x18	; 24
   150ea:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   150ee:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   150f2:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   150f6:	04 ad       	ldd	r16, Z+60	; 0x3c
   150f8:	10 e0       	ldi	r17, 0x00	; 0
   150fa:	20 e0       	ldi	r18, 0x00	; 0
   150fc:	30 e0       	ldi	r19, 0x00	; 0
   150fe:	41 e0       	ldi	r20, 0x01	; 1
   15100:	50 e0       	ldi	r21, 0x00	; 0
   15102:	61 e1       	ldi	r22, 0x11	; 17
   15104:	70 e0       	ldi	r23, 0x00	; 0
   15106:	84 e8       	ldi	r24, 0x84	; 132
   15108:	98 e1       	ldi	r25, 0x18	; 24
   1510a:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   1510e:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15112:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15116:	05 ad       	ldd	r16, Z+61	; 0x3d
   15118:	10 e0       	ldi	r17, 0x00	; 0
   1511a:	20 e0       	ldi	r18, 0x00	; 0
   1511c:	30 e0       	ldi	r19, 0x00	; 0
   1511e:	41 e0       	ldi	r20, 0x01	; 1
   15120:	50 e0       	ldi	r21, 0x00	; 0
   15122:	62 e1       	ldi	r22, 0x12	; 18
   15124:	70 e0       	ldi	r23, 0x00	; 0
   15126:	84 e8       	ldi	r24, 0x84	; 132
   15128:	98 e1       	ldi	r25, 0x18	; 24
   1512a:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   1512e:	84 e8       	ldi	r24, 0x84	; 132
   15130:	98 e1       	ldi	r25, 0x18	; 24
   15132:	1f 91       	pop	r17
   15134:	0f 91       	pop	r16
   15136:	08 95       	ret

00015138 <SS80VolumePack>:
   15138:	0f 93       	push	r16
   1513a:	1f 93       	push	r17
   1513c:	2d e0       	ldi	r18, 0x0D	; 13
   1513e:	30 e0       	ldi	r19, 0x00	; 0
   15140:	fc 01       	movw	r30, r24
   15142:	31 83       	std	Z+1, r19	; 0x01
   15144:	20 83       	st	Z, r18
   15146:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   1514a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   1514e:	fe 96       	adiw	r30, 0x3e	; 62
   15150:	00 81       	ld	r16, Z
   15152:	11 81       	ldd	r17, Z+1	; 0x01
   15154:	22 81       	ldd	r18, Z+2	; 0x02
   15156:	33 81       	ldd	r19, Z+3	; 0x03
   15158:	43 e0       	ldi	r20, 0x03	; 3
   1515a:	50 e0       	ldi	r21, 0x00	; 0
   1515c:	60 e0       	ldi	r22, 0x00	; 0
   1515e:	70 e0       	ldi	r23, 0x00	; 0
   15160:	87 e7       	ldi	r24, 0x77	; 119
   15162:	98 e1       	ldi	r25, 0x18	; 24
   15164:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   15168:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   1516c:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15170:	ee 5b       	subi	r30, 0xBE	; 190
   15172:	ff 4f       	sbci	r31, 0xFF	; 255
   15174:	00 81       	ld	r16, Z
   15176:	10 e0       	ldi	r17, 0x00	; 0
   15178:	20 e0       	ldi	r18, 0x00	; 0
   1517a:	30 e0       	ldi	r19, 0x00	; 0
   1517c:	41 e0       	ldi	r20, 0x01	; 1
   1517e:	50 e0       	ldi	r21, 0x00	; 0
   15180:	63 e0       	ldi	r22, 0x03	; 3
   15182:	70 e0       	ldi	r23, 0x00	; 0
   15184:	87 e7       	ldi	r24, 0x77	; 119
   15186:	98 e1       	ldi	r25, 0x18	; 24
   15188:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   1518c:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15190:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15194:	ed 5b       	subi	r30, 0xBD	; 189
   15196:	ff 4f       	sbci	r31, 0xFF	; 255
   15198:	00 81       	ld	r16, Z
   1519a:	11 81       	ldd	r17, Z+1	; 0x01
   1519c:	20 e0       	ldi	r18, 0x00	; 0
   1519e:	30 e0       	ldi	r19, 0x00	; 0
   151a0:	42 e0       	ldi	r20, 0x02	; 2
   151a2:	50 e0       	ldi	r21, 0x00	; 0
   151a4:	64 e0       	ldi	r22, 0x04	; 4
   151a6:	70 e0       	ldi	r23, 0x00	; 0
   151a8:	87 e7       	ldi	r24, 0x77	; 119
   151aa:	98 e1       	ldi	r25, 0x18	; 24
   151ac:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   151b0:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   151b4:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   151b8:	eb 5b       	subi	r30, 0xBB	; 187
   151ba:	ff 4f       	sbci	r31, 0xFF	; 255
   151bc:	00 81       	ld	r16, Z
   151be:	11 81       	ldd	r17, Z+1	; 0x01
   151c0:	22 81       	ldd	r18, Z+2	; 0x02
   151c2:	33 81       	ldd	r19, Z+3	; 0x03
   151c4:	46 e0       	ldi	r20, 0x06	; 6
   151c6:	50 e0       	ldi	r21, 0x00	; 0
   151c8:	66 e0       	ldi	r22, 0x06	; 6
   151ca:	70 e0       	ldi	r23, 0x00	; 0
   151cc:	87 e7       	ldi	r24, 0x77	; 119
   151ce:	98 e1       	ldi	r25, 0x18	; 24
   151d0:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   151d4:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   151d8:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   151dc:	e7 5b       	subi	r30, 0xB7	; 183
   151de:	ff 4f       	sbci	r31, 0xFF	; 255
   151e0:	00 81       	ld	r16, Z
   151e2:	10 e0       	ldi	r17, 0x00	; 0
   151e4:	20 e0       	ldi	r18, 0x00	; 0
   151e6:	30 e0       	ldi	r19, 0x00	; 0
   151e8:	41 e0       	ldi	r20, 0x01	; 1
   151ea:	50 e0       	ldi	r21, 0x00	; 0
   151ec:	6c e0       	ldi	r22, 0x0C	; 12
   151ee:	70 e0       	ldi	r23, 0x00	; 0
   151f0:	87 e7       	ldi	r24, 0x77	; 119
   151f2:	98 e1       	ldi	r25, 0x18	; 24
   151f4:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   151f8:	87 e7       	ldi	r24, 0x77	; 119
   151fa:	98 e1       	ldi	r25, 0x18	; 24
   151fc:	1f 91       	pop	r17
   151fe:	0f 91       	pop	r16
   15200:	08 95       	ret

00015202 <SS80_test_extended_status>:
   15202:	9b 01       	movw	r18, r22
   15204:	43 e0       	ldi	r20, 0x03	; 3
   15206:	35 95       	asr	r19
   15208:	27 95       	ror	r18
   1520a:	4a 95       	dec	r20
   1520c:	e1 f7       	brne	.-8      	; 0x15206 <SS80_test_extended_status+0x4>
   1520e:	82 0f       	add	r24, r18
   15210:	93 1f       	adc	r25, r19
   15212:	67 70       	andi	r22, 0x07	; 7
   15214:	77 27       	eor	r23, r23
   15216:	20 e8       	ldi	r18, 0x80	; 128
   15218:	30 e0       	ldi	r19, 0x00	; 0
   1521a:	02 c0       	rjmp	.+4      	; 0x15220 <SS80_test_extended_status+0x1e>
   1521c:	35 95       	asr	r19
   1521e:	27 95       	ror	r18
   15220:	6a 95       	dec	r22
   15222:	e2 f7       	brpl	.-8      	; 0x1521c <SS80_test_extended_status+0x1a>
   15224:	fc 01       	movw	r30, r24
   15226:	80 81       	ld	r24, Z
   15228:	28 23       	and	r18, r24
   1522a:	81 e0       	ldi	r24, 0x01	; 1
   1522c:	90 e0       	ldi	r25, 0x00	; 0
   1522e:	11 f4       	brne	.+4      	; 0x15234 <SS80_test_extended_status+0x32>
   15230:	80 e0       	ldi	r24, 0x00	; 0
   15232:	90 e0       	ldi	r25, 0x00	; 0
   15234:	08 95       	ret

00015236 <SS80_display_extended_status>:
   15236:	6f 92       	push	r6
   15238:	7f 92       	push	r7
   1523a:	8f 92       	push	r8
   1523c:	ef 92       	push	r14
   1523e:	ff 92       	push	r15
   15240:	0f 93       	push	r16
   15242:	1f 93       	push	r17
   15244:	cf 93       	push	r28
   15246:	df 93       	push	r29
   15248:	fc 01       	movw	r30, r24
   1524a:	ac 01       	movw	r20, r24
   1524c:	48 5f       	subi	r20, 0xF8	; 248
   1524e:	5f 4f       	sbci	r21, 0xFF	; 255
   15250:	20 e0       	ldi	r18, 0x00	; 0
   15252:	30 e0       	ldi	r19, 0x00	; 0
   15254:	a1 91       	ld	r26, Z+
   15256:	aa 23       	and	r26, r26
   15258:	11 f0       	breq	.+4      	; 0x1525e <SS80_display_extended_status+0x28>
   1525a:	21 e0       	ldi	r18, 0x01	; 1
   1525c:	30 e0       	ldi	r19, 0x00	; 0
   1525e:	e4 17       	cp	r30, r20
   15260:	f5 07       	cpc	r31, r21
   15262:	c1 f7       	brne	.-16     	; 0x15254 <SS80_display_extended_status+0x1e>
   15264:	23 2b       	or	r18, r19
   15266:	a1 f1       	breq	.+104    	; 0x152d0 <SS80_display_extended_status+0x9a>
   15268:	8c 01       	movw	r16, r24
   1526a:	7f 93       	push	r23
   1526c:	6f 93       	push	r22
   1526e:	82 eb       	ldi	r24, 0xB2	; 178
   15270:	95 e2       	ldi	r25, 0x25	; 37
   15272:	1f 92       	push	r1
   15274:	9f 93       	push	r25
   15276:	8f 93       	push	r24
   15278:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1527c:	cb ec       	ldi	r28, 0xCB	; 203
   1527e:	d1 e0       	ldi	r29, 0x01	; 1
   15280:	0f 90       	pop	r0
   15282:	0f 90       	pop	r0
   15284:	0f 90       	pop	r0
   15286:	0f 90       	pop	r0
   15288:	0f 90       	pop	r0
   1528a:	87 ea       	ldi	r24, 0xA7	; 167
   1528c:	95 e2       	ldi	r25, 0x25	; 37
   1528e:	3c 01       	movw	r6, r24
   15290:	e8 80       	ld	r14, Y
   15292:	f9 80       	ldd	r15, Y+1	; 0x01
   15294:	9f ef       	ldi	r25, 0xFF	; 255
   15296:	e9 16       	cp	r14, r25
   15298:	f9 06       	cpc	r15, r25
   1529a:	d1 f0       	breq	.+52     	; 0x152d0 <SS80_display_extended_status+0x9a>
   1529c:	b7 01       	movw	r22, r14
   1529e:	c8 01       	movw	r24, r16
   152a0:	b0 df       	rcall	.-160    	; 0x15202 <SS80_test_extended_status>
   152a2:	89 2b       	or	r24, r25
   152a4:	99 f0       	breq	.+38     	; 0x152cc <SS80_display_extended_status+0x96>
   152a6:	8b 81       	ldd	r24, Y+3	; 0x03
   152a8:	8f 93       	push	r24
   152aa:	8a 81       	ldd	r24, Y+2	; 0x02
   152ac:	8f 93       	push	r24
   152ae:	ff 92       	push	r15
   152b0:	ef 92       	push	r14
   152b2:	1f 92       	push	r1
   152b4:	7f 92       	push	r7
   152b6:	6f 92       	push	r6
   152b8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   152bc:	8d b7       	in	r24, 0x3d	; 61
   152be:	9e b7       	in	r25, 0x3e	; 62
   152c0:	07 96       	adiw	r24, 0x07	; 7
   152c2:	0f b6       	in	r0, 0x3f	; 63
   152c4:	f8 94       	cli
   152c6:	9e bf       	out	0x3e, r25	; 62
   152c8:	0f be       	out	0x3f, r0	; 63
   152ca:	8d bf       	out	0x3d, r24	; 61
   152cc:	24 96       	adiw	r28, 0x04	; 4
   152ce:	e0 cf       	rjmp	.-64     	; 0x15290 <SS80_display_extended_status+0x5a>
   152d0:	df 91       	pop	r29
   152d2:	cf 91       	pop	r28
   152d4:	1f 91       	pop	r17
   152d6:	0f 91       	pop	r16
   152d8:	ff 90       	pop	r15
   152da:	ef 90       	pop	r14
   152dc:	8f 90       	pop	r8
   152de:	7f 90       	pop	r7
   152e0:	6f 90       	pop	r6
   152e2:	08 95       	ret

000152e4 <SS80_send_status>:
   152e4:	a6 e1       	ldi	r26, 0x16	; 22
   152e6:	b0 e0       	ldi	r27, 0x00	; 0
   152e8:	e8 e7       	ldi	r30, 0x78	; 120
   152ea:	f9 ea       	ldi	r31, 0xA9	; 169
   152ec:	0c 94 3a e5 	jmp	0x1ca74	; 0x1ca74 <__prologue_saves__+0x18>
   152f0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   152f4:	85 ff       	sbrs	r24, 5
   152f6:	0a c0       	rjmp	.+20     	; 0x1530c <SS80_send_status+0x28>
   152f8:	83 e9       	ldi	r24, 0x93	; 147
   152fa:	95 e2       	ldi	r25, 0x25	; 37
   152fc:	1f 92       	push	r1
   152fe:	9f 93       	push	r25
   15300:	8f 93       	push	r24
   15302:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   15306:	0f 90       	pop	r0
   15308:	0f 90       	pop	r0
   1530a:	0f 90       	pop	r0
   1530c:	ce 01       	movw	r24, r28
   1530e:	01 96       	adiw	r24, 0x01	; 1
   15310:	7c 01       	movw	r14, r24
   15312:	84 e1       	ldi	r24, 0x14	; 20
   15314:	f7 01       	movw	r30, r14
   15316:	11 92       	st	Z+, r1
   15318:	8a 95       	dec	r24
   1531a:	e9 f7       	brne	.-6      	; 0x15316 <SS80_send_status+0x32>
   1531c:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15320:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15324:	86 81       	ldd	r24, Z+6	; 0x06
   15326:	20 e1       	ldi	r18, 0x10	; 16
   15328:	82 9f       	mul	r24, r18
   1532a:	c0 01       	movw	r24, r0
   1532c:	11 24       	eor	r1, r1
   1532e:	95 81       	ldd	r25, Z+5	; 0x05
   15330:	9f 70       	andi	r25, 0x0F	; 15
   15332:	89 2b       	or	r24, r25
   15334:	89 83       	std	Y+1, r24	; 0x01
   15336:	8f ef       	ldi	r24, 0xFF	; 255
   15338:	8a 83       	std	Y+2, r24	; 0x02
   1533a:	83 81       	ldd	r24, Z+3	; 0x03
   1533c:	86 ff       	sbrs	r24, 6
   1533e:	02 c0       	rjmp	.+4      	; 0x15344 <SS80_send_status+0x60>
   15340:	92 e0       	ldi	r25, 0x02	; 2
   15342:	9b 83       	std	Y+3, r25	; 0x03
   15344:	82 ff       	sbrs	r24, 2
   15346:	03 c0       	rjmp	.+6      	; 0x1534e <SS80_send_status+0x6a>
   15348:	9b 81       	ldd	r25, Y+3	; 0x03
   1534a:	91 60       	ori	r25, 0x01	; 1
   1534c:	9b 83       	std	Y+3, r25	; 0x03
   1534e:	80 ff       	sbrs	r24, 0
   15350:	02 c0       	rjmp	.+4      	; 0x15356 <SS80_send_status+0x72>
   15352:	82 e0       	ldi	r24, 0x02	; 2
   15354:	8d 83       	std	Y+5, r24	; 0x05
   15356:	83 81       	ldd	r24, Z+3	; 0x03
   15358:	81 ff       	sbrs	r24, 1
   1535a:	03 c0       	rjmp	.+6      	; 0x15362 <SS80_send_status+0x7e>
   1535c:	8d 81       	ldd	r24, Y+5	; 0x05
   1535e:	82 60       	ori	r24, 0x02	; 2
   15360:	8d 83       	std	Y+5, r24	; 0x05
   15362:	83 81       	ldd	r24, Z+3	; 0x03
   15364:	83 ff       	sbrs	r24, 3
   15366:	02 c0       	rjmp	.+4      	; 0x1536c <SS80_send_status+0x88>
   15368:	88 e0       	ldi	r24, 0x08	; 8
   1536a:	8f 83       	std	Y+7, r24	; 0x07
   1536c:	83 81       	ldd	r24, Z+3	; 0x03
   1536e:	94 81       	ldd	r25, Z+4	; 0x04
   15370:	89 2b       	or	r24, r25
   15372:	59 f4       	brne	.+22     	; 0x1538a <SS80_send_status+0xa6>
   15374:	07 81       	ldd	r16, Z+7	; 0x07
   15376:	10 85       	ldd	r17, Z+8	; 0x08
   15378:	21 85       	ldd	r18, Z+9	; 0x09
   1537a:	32 85       	ldd	r19, Z+10	; 0x0a
   1537c:	46 e0       	ldi	r20, 0x06	; 6
   1537e:	50 e0       	ldi	r21, 0x00	; 0
   15380:	6a e0       	ldi	r22, 0x0A	; 10
   15382:	70 e0       	ldi	r23, 0x00	; 0
   15384:	c7 01       	movw	r24, r14
   15386:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   1538a:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   1538e:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15392:	83 81       	ldd	r24, Z+3	; 0x03
   15394:	94 81       	ldd	r25, Z+4	; 0x04
   15396:	89 2b       	or	r24, r25
   15398:	11 f0       	breq	.+4      	; 0x1539e <SS80_send_status+0xba>
   1539a:	81 e0       	ldi	r24, 0x01	; 1
   1539c:	82 83       	std	Z+2, r24	; 0x02
   1539e:	80 e0       	ldi	r24, 0x00	; 0
   153a0:	91 e0       	ldi	r25, 0x01	; 1
   153a2:	9e 8b       	std	Y+22, r25	; 0x16
   153a4:	8d 8b       	std	Y+21, r24	; 0x15
   153a6:	ae 01       	movw	r20, r28
   153a8:	4b 5e       	subi	r20, 0xEB	; 235
   153aa:	5f 4f       	sbci	r21, 0xFF	; 255
   153ac:	64 e1       	ldi	r22, 0x14	; 20
   153ae:	70 e0       	ldi	r23, 0x00	; 0
   153b0:	c7 01       	movw	r24, r14
   153b2:	0e 94 2f 8b 	call	0x1165e	; 0x1165e <gpib_write_str>
   153b6:	44 97       	sbiw	r24, 0x14	; 20
   153b8:	71 f0       	breq	.+28     	; 0x153d6 <SS80_send_status+0xf2>
   153ba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   153be:	80 ff       	sbrs	r24, 0
   153c0:	0a c0       	rjmp	.+20     	; 0x153d6 <SS80_send_status+0xf2>
   153c2:	88 e7       	ldi	r24, 0x78	; 120
   153c4:	95 e2       	ldi	r25, 0x25	; 37
   153c6:	1f 92       	push	r1
   153c8:	9f 93       	push	r25
   153ca:	8f 93       	push	r24
   153cc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   153d0:	0f 90       	pop	r0
   153d2:	0f 90       	pop	r0
   153d4:	0f 90       	pop	r0
   153d6:	8d 89       	ldd	r24, Y+21	; 0x15
   153d8:	9e 89       	ldd	r25, Y+22	; 0x16
   153da:	88 27       	eor	r24, r24
   153dc:	90 7d       	andi	r25, 0xD0	; 208
   153de:	66 96       	adiw	r28, 0x16	; 22
   153e0:	e6 e0       	ldi	r30, 0x06	; 6
   153e2:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

000153e6 <SS80_describe>:
   153e6:	a4 e0       	ldi	r26, 0x04	; 4
   153e8:	b0 e0       	ldi	r27, 0x00	; 0
   153ea:	e9 ef       	ldi	r30, 0xF9	; 249
   153ec:	f9 ea       	ldi	r31, 0xA9	; 169
   153ee:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
   153f2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   153f6:	85 ff       	sbrs	r24, 5
   153f8:	0a c0       	rjmp	.+20     	; 0x1540e <SS80_describe+0x28>
   153fa:	87 e6       	ldi	r24, 0x67	; 103
   153fc:	95 e2       	ldi	r25, 0x25	; 37
   153fe:	1f 92       	push	r1
   15400:	9f 93       	push	r25
   15402:	8f 93       	push	r24
   15404:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   15408:	0f 90       	pop	r0
   1540a:	0f 90       	pop	r0
   1540c:	0f 90       	pop	r0
   1540e:	1c 82       	std	Y+4, r1	; 0x04
   15410:	1b 82       	std	Y+3, r1	; 0x03
   15412:	ce 01       	movw	r24, r28
   15414:	01 96       	adiw	r24, 0x01	; 1
   15416:	88 dd       	rcall	.-1264   	; 0x14f28 <SS80ControllerPack>
   15418:	69 81       	ldd	r22, Y+1	; 0x01
   1541a:	7a 81       	ldd	r23, Y+2	; 0x02
   1541c:	ae 01       	movw	r20, r28
   1541e:	4d 5f       	subi	r20, 0xFD	; 253
   15420:	5f 4f       	sbci	r21, 0xFF	; 255
   15422:	0e 94 2f 8b 	call	0x1165e	; 0x1165e <gpib_write_str>
   15426:	29 81       	ldd	r18, Y+1	; 0x01
   15428:	3a 81       	ldd	r19, Y+2	; 0x02
   1542a:	82 17       	cp	r24, r18
   1542c:	93 07       	cpc	r25, r19
   1542e:	39 f0       	breq	.+14     	; 0x1543e <SS80_describe+0x58>
   15430:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15434:	80 ff       	sbrs	r24, 0
   15436:	3c c0       	rjmp	.+120    	; 0x154b0 <SS80_describe+0xca>
   15438:	84 e4       	ldi	r24, 0x44	; 68
   1543a:	95 e2       	ldi	r25, 0x25	; 37
   1543c:	31 c0       	rjmp	.+98     	; 0x154a0 <SS80_describe+0xba>
   1543e:	1c 82       	std	Y+4, r1	; 0x04
   15440:	1b 82       	std	Y+3, r1	; 0x03
   15442:	ce 01       	movw	r24, r28
   15444:	01 96       	adiw	r24, 0x01	; 1
   15446:	ac dd       	rcall	.-1192   	; 0x14fa0 <SS80UnitPack>
   15448:	69 81       	ldd	r22, Y+1	; 0x01
   1544a:	7a 81       	ldd	r23, Y+2	; 0x02
   1544c:	ae 01       	movw	r20, r28
   1544e:	4d 5f       	subi	r20, 0xFD	; 253
   15450:	5f 4f       	sbci	r21, 0xFF	; 255
   15452:	0e 94 2f 8b 	call	0x1165e	; 0x1165e <gpib_write_str>
   15456:	29 81       	ldd	r18, Y+1	; 0x01
   15458:	3a 81       	ldd	r19, Y+2	; 0x02
   1545a:	82 17       	cp	r24, r18
   1545c:	93 07       	cpc	r25, r19
   1545e:	39 f0       	breq	.+14     	; 0x1546e <SS80_describe+0x88>
   15460:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15464:	80 ff       	sbrs	r24, 0
   15466:	24 c0       	rjmp	.+72     	; 0x154b0 <SS80_describe+0xca>
   15468:	87 e2       	ldi	r24, 0x27	; 39
   1546a:	95 e2       	ldi	r25, 0x25	; 37
   1546c:	19 c0       	rjmp	.+50     	; 0x154a0 <SS80_describe+0xba>
   1546e:	80 e0       	ldi	r24, 0x00	; 0
   15470:	91 e0       	ldi	r25, 0x01	; 1
   15472:	9c 83       	std	Y+4, r25	; 0x04
   15474:	8b 83       	std	Y+3, r24	; 0x03
   15476:	ce 01       	movw	r24, r28
   15478:	01 96       	adiw	r24, 0x01	; 1
   1547a:	5e de       	rcall	.-836    	; 0x15138 <SS80VolumePack>
   1547c:	69 81       	ldd	r22, Y+1	; 0x01
   1547e:	7a 81       	ldd	r23, Y+2	; 0x02
   15480:	ae 01       	movw	r20, r28
   15482:	4d 5f       	subi	r20, 0xFD	; 253
   15484:	5f 4f       	sbci	r21, 0xFF	; 255
   15486:	0e 94 2f 8b 	call	0x1165e	; 0x1165e <gpib_write_str>
   1548a:	29 81       	ldd	r18, Y+1	; 0x01
   1548c:	3a 81       	ldd	r19, Y+2	; 0x02
   1548e:	82 17       	cp	r24, r18
   15490:	93 07       	cpc	r25, r19
   15492:	99 f0       	breq	.+38     	; 0x154ba <SS80_describe+0xd4>
   15494:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15498:	80 ff       	sbrs	r24, 0
   1549a:	0a c0       	rjmp	.+20     	; 0x154b0 <SS80_describe+0xca>
   1549c:	88 e0       	ldi	r24, 0x08	; 8
   1549e:	95 e2       	ldi	r25, 0x25	; 37
   154a0:	1f 92       	push	r1
   154a2:	9f 93       	push	r25
   154a4:	8f 93       	push	r24
   154a6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   154aa:	0f 90       	pop	r0
   154ac:	0f 90       	pop	r0
   154ae:	0f 90       	pop	r0
   154b0:	8b 81       	ldd	r24, Y+3	; 0x03
   154b2:	9c 81       	ldd	r25, Y+4	; 0x04
   154b4:	88 27       	eor	r24, r24
   154b6:	90 7d       	andi	r25, 0xD0	; 208
   154b8:	02 c0       	rjmp	.+4      	; 0x154be <SS80_describe+0xd8>
   154ba:	80 e0       	ldi	r24, 0x00	; 0
   154bc:	90 e0       	ldi	r25, 0x00	; 0
   154be:	24 96       	adiw	r28, 0x04	; 4
   154c0:	e2 e0       	ldi	r30, 0x02	; 2
   154c2:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

000154c6 <SS80_Check_Unit>:
   154c6:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   154ca:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   154ce:	88 23       	and	r24, r24
   154d0:	d1 f0       	breq	.+52     	; 0x15506 <SS80_Check_Unit+0x40>
   154d2:	8f 30       	cpi	r24, 0x0F	; 15
   154d4:	c1 f0       	breq	.+48     	; 0x15506 <SS80_Check_Unit+0x40>
   154d6:	23 81       	ldd	r18, Z+3	; 0x03
   154d8:	34 81       	ldd	r19, Z+4	; 0x04
   154da:	20 64       	ori	r18, 0x40	; 64
   154dc:	34 83       	std	Z+4, r19	; 0x04
   154de:	23 83       	std	Z+3, r18	; 0x03
   154e0:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   154e4:	90 ff       	sbrs	r25, 0
   154e6:	10 c0       	rjmp	.+32     	; 0x15508 <SS80_Check_Unit+0x42>
   154e8:	1f 92       	push	r1
   154ea:	8f 93       	push	r24
   154ec:	80 ef       	ldi	r24, 0xF0	; 240
   154ee:	94 e2       	ldi	r25, 0x24	; 36
   154f0:	1f 92       	push	r1
   154f2:	9f 93       	push	r25
   154f4:	8f 93       	push	r24
   154f6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   154fa:	0f 90       	pop	r0
   154fc:	0f 90       	pop	r0
   154fe:	0f 90       	pop	r0
   15500:	0f 90       	pop	r0
   15502:	0f 90       	pop	r0
   15504:	08 95       	ret
   15506:	85 83       	std	Z+5, r24	; 0x05
   15508:	08 95       	ret

0001550a <SS80_Check_Volume>:
   1550a:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   1550e:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15512:	88 23       	and	r24, r24
   15514:	c1 f0       	breq	.+48     	; 0x15546 <SS80_Check_Volume+0x3c>
   15516:	23 81       	ldd	r18, Z+3	; 0x03
   15518:	34 81       	ldd	r19, Z+4	; 0x04
   1551a:	20 64       	ori	r18, 0x40	; 64
   1551c:	34 83       	std	Z+4, r19	; 0x04
   1551e:	23 83       	std	Z+3, r18	; 0x03
   15520:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   15524:	90 ff       	sbrs	r25, 0
   15526:	10 c0       	rjmp	.+32     	; 0x15548 <SS80_Check_Volume+0x3e>
   15528:	1f 92       	push	r1
   1552a:	8f 93       	push	r24
   1552c:	86 ed       	ldi	r24, 0xD6	; 214
   1552e:	94 e2       	ldi	r25, 0x24	; 36
   15530:	1f 92       	push	r1
   15532:	9f 93       	push	r25
   15534:	8f 93       	push	r24
   15536:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1553a:	0f 90       	pop	r0
   1553c:	0f 90       	pop	r0
   1553e:	0f 90       	pop	r0
   15540:	0f 90       	pop	r0
   15542:	0f 90       	pop	r0
   15544:	08 95       	ret
   15546:	16 82       	std	Z+6, r1	; 0x06
   15548:	08 95       	ret

0001554a <SS80_Command_State>:
   1554a:	2f 92       	push	r2
   1554c:	3f 92       	push	r3
   1554e:	4f 92       	push	r4
   15550:	6f 92       	push	r6
   15552:	7f 92       	push	r7
   15554:	8f 92       	push	r8
   15556:	af 92       	push	r10
   15558:	bf 92       	push	r11
   1555a:	cf 92       	push	r12
   1555c:	df 92       	push	r13
   1555e:	ef 92       	push	r14
   15560:	ff 92       	push	r15
   15562:	0f 93       	push	r16
   15564:	1f 93       	push	r17
   15566:	cf 93       	push	r28
   15568:	df 93       	push	r29
   1556a:	cd b7       	in	r28, 0x3d	; 61
   1556c:	de b7       	in	r29, 0x3e	; 62
   1556e:	60 97       	sbiw	r28, 0x10	; 16
   15570:	0f b6       	in	r0, 0x3f	; 63
   15572:	f8 94       	cli
   15574:	de bf       	out	0x3e, r29	; 62
   15576:	0f be       	out	0x3f, r0	; 63
   15578:	cd bf       	out	0x3d, r28	; 61
   1557a:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   1557e:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15582:	81 81       	ldd	r24, Z+1	; 0x01
   15584:	90 e0       	ldi	r25, 0x00	; 0
   15586:	0e 94 10 86 	call	0x10c20	; 0x10c20 <gpib_disable_PPR>
   1558a:	80 e0       	ldi	r24, 0x00	; 0
   1558c:	91 e0       	ldi	r25, 0x01	; 1
   1558e:	9a 83       	std	Y+2, r25	; 0x02
   15590:	89 83       	std	Y+1, r24	; 0x01
   15592:	ae 01       	movw	r20, r28
   15594:	4f 5f       	subi	r20, 0xFF	; 255
   15596:	5f 4f       	sbci	r21, 0xFF	; 255
   15598:	60 e0       	ldi	r22, 0x00	; 0
   1559a:	72 e0       	ldi	r23, 0x02	; 2
   1559c:	82 ee       	ldi	r24, 0xE2	; 226
   1559e:	9b e1       	ldi	r25, 0x1B	; 27
   155a0:	0e 94 81 8a 	call	0x11502	; 0x11502 <gpib_read_str>
   155a4:	6c 01       	movw	r12, r24
   155a6:	89 81       	ldd	r24, Y+1	; 0x01
   155a8:	9a 81       	ldd	r25, Y+2	; 0x02
   155aa:	9c 01       	movw	r18, r24
   155ac:	22 27       	eor	r18, r18
   155ae:	30 7d       	andi	r19, 0xD0	; 208
   155b0:	23 2b       	or	r18, r19
   155b2:	79 f0       	breq	.+30     	; 0x155d2 <SS80_Command_State+0x88>
   155b4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   155b8:	80 ff       	sbrs	r24, 0
   155ba:	21 c2       	rjmp	.+1090   	; 0x159fe <SS80_Command_State+0x4b4>
   155bc:	80 eb       	ldi	r24, 0xB0	; 176
   155be:	94 e2       	ldi	r25, 0x24	; 36
   155c0:	1f 92       	push	r1
   155c2:	9f 93       	push	r25
   155c4:	8f 93       	push	r24
   155c6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   155ca:	0f 90       	pop	r0
   155cc:	0f 90       	pop	r0
   155ce:	0f 90       	pop	r0
   155d0:	16 c2       	rjmp	.+1068   	; 0x159fe <SS80_Command_State+0x4b4>
   155d2:	c1 14       	cp	r12, r1
   155d4:	d1 04       	cpc	r13, r1
   155d6:	09 f4       	brne	.+2      	; 0x155da <SS80_Command_State+0x90>
   155d8:	17 c2       	rjmp	.+1070   	; 0x15a08 <SS80_Command_State+0x4be>
   155da:	90 fd       	sbrc	r25, 0
   155dc:	0e c0       	rjmp	.+28     	; 0x155fa <SS80_Command_State+0xb0>
   155de:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   155e2:	80 ff       	sbrs	r24, 0
   155e4:	0a c0       	rjmp	.+20     	; 0x155fa <SS80_Command_State+0xb0>
   155e6:	87 e9       	ldi	r24, 0x97	; 151
   155e8:	94 e2       	ldi	r25, 0x24	; 36
   155ea:	1f 92       	push	r1
   155ec:	9f 93       	push	r25
   155ee:	8f 93       	push	r24
   155f0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   155f4:	0f 90       	pop	r0
   155f6:	0f 90       	pop	r0
   155f8:	0f 90       	pop	r0
   155fa:	e1 2c       	mov	r14, r1
   155fc:	f1 2c       	mov	r15, r1
   155fe:	8b e9       	ldi	r24, 0x9B	; 155
   15600:	93 e2       	ldi	r25, 0x23	; 35
   15602:	9c 01       	movw	r18, r24
   15604:	40 e0       	ldi	r20, 0x00	; 0
   15606:	2d 83       	std	Y+5, r18	; 0x05
   15608:	3e 83       	std	Y+6, r19	; 0x06
   1560a:	4f 83       	std	Y+7, r20	; 0x07
   1560c:	80 ec       	ldi	r24, 0xC0	; 192
   1560e:	93 e2       	ldi	r25, 0x23	; 35
   15610:	9c 01       	movw	r18, r24
   15612:	40 e0       	ldi	r20, 0x00	; 0
   15614:	28 87       	std	Y+8, r18	; 0x08
   15616:	39 87       	std	Y+9, r19	; 0x09
   15618:	4a 87       	std	Y+10, r20	; 0x0a
   1561a:	8a ed       	ldi	r24, 0xDA	; 218
   1561c:	93 e2       	ldi	r25, 0x23	; 35
   1561e:	9c 01       	movw	r18, r24
   15620:	40 e0       	ldi	r20, 0x00	; 0
   15622:	2b 87       	std	Y+11, r18	; 0x0b
   15624:	3c 87       	std	Y+12, r19	; 0x0c
   15626:	4d 87       	std	Y+13, r20	; 0x0d
   15628:	80 ef       	ldi	r24, 0xF0	; 240
   1562a:	93 e2       	ldi	r25, 0x23	; 35
   1562c:	3c 01       	movw	r6, r24
   1562e:	8e ef       	ldi	r24, 0xFE	; 254
   15630:	93 e2       	ldi	r25, 0x23	; 35
   15632:	9c 01       	movw	r18, r24
   15634:	40 e0       	ldi	r20, 0x00	; 0
   15636:	2e 87       	std	Y+14, r18	; 0x0e
   15638:	3f 87       	std	Y+15, r19	; 0x0f
   1563a:	48 8b       	std	Y+16, r20	; 0x10
   1563c:	8a e1       	ldi	r24, 0x1A	; 26
   1563e:	94 e2       	ldi	r25, 0x24	; 36
   15640:	1c 01       	movw	r2, r24
   15642:	88 e6       	ldi	r24, 0x68	; 104
   15644:	a8 2e       	mov	r10, r24
   15646:	84 e2       	ldi	r24, 0x24	; 36
   15648:	b8 2e       	mov	r11, r24
   1564a:	87 01       	movw	r16, r14
   1564c:	ec 14       	cp	r14, r12
   1564e:	fd 04       	cpc	r15, r13
   15650:	0c f0       	brlt	.+2      	; 0x15654 <SS80_Command_State+0x10a>
   15652:	b6 c1       	rjmp	.+876    	; 0x159c0 <SS80_Command_State+0x476>
   15654:	0f 5f       	subi	r16, 0xFF	; 255
   15656:	1f 4f       	sbci	r17, 0xFF	; 255
   15658:	f7 01       	movw	r30, r14
   1565a:	ee 51       	subi	r30, 0x1E	; 30
   1565c:	f4 4e       	sbci	r31, 0xE4	; 228
   1565e:	80 81       	ld	r24, Z
   15660:	28 2f       	mov	r18, r24
   15662:	30 e0       	ldi	r19, 0x00	; 0
   15664:	a9 01       	movw	r20, r18
   15666:	40 52       	subi	r20, 0x20	; 32
   15668:	51 09       	sbc	r21, r1
   1566a:	40 31       	cpi	r20, 0x10	; 16
   1566c:	51 05       	cpc	r21, r1
   1566e:	80 f4       	brcc	.+32     	; 0x15690 <SS80_Command_State+0x146>
   15670:	80 52       	subi	r24, 0x20	; 32
   15672:	29 df       	rcall	.-430    	; 0x154c6 <SS80_Check_Unit>
   15674:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15678:	85 ff       	sbrs	r24, 5
   1567a:	a0 c1       	rjmp	.+832    	; 0x159bc <SS80_Command_State+0x472>
   1567c:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15680:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15684:	85 81       	ldd	r24, Z+5	; 0x05
   15686:	1f 92       	push	r1
   15688:	8f 93       	push	r24
   1568a:	81 e8       	ldi	r24, 0x81	; 129
   1568c:	94 e2       	ldi	r25, 0x24	; 36
   1568e:	14 c0       	rjmp	.+40     	; 0x156b8 <SS80_Command_State+0x16e>
   15690:	a9 01       	movw	r20, r18
   15692:	40 54       	subi	r20, 0x40	; 64
   15694:	51 09       	sbc	r21, r1
   15696:	40 31       	cpi	r20, 0x10	; 16
   15698:	51 05       	cpc	r21, r1
   1569a:	c8 f4       	brcc	.+50     	; 0x156ce <SS80_Command_State+0x184>
   1569c:	80 54       	subi	r24, 0x40	; 64
   1569e:	35 df       	rcall	.-406    	; 0x1550a <SS80_Check_Volume>
   156a0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   156a4:	85 ff       	sbrs	r24, 5
   156a6:	8a c1       	rjmp	.+788    	; 0x159bc <SS80_Command_State+0x472>
   156a8:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   156ac:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   156b0:	86 81       	ldd	r24, Z+6	; 0x06
   156b2:	1f 92       	push	r1
   156b4:	8f 93       	push	r24
   156b6:	c5 01       	movw	r24, r10
   156b8:	1f 92       	push	r1
   156ba:	9f 93       	push	r25
   156bc:	8f 93       	push	r24
   156be:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   156c2:	0f 90       	pop	r0
   156c4:	0f 90       	pop	r0
   156c6:	0f 90       	pop	r0
   156c8:	0f 90       	pop	r0
   156ca:	0f 90       	pop	r0
   156cc:	77 c1       	rjmp	.+750    	; 0x159bc <SS80_Command_State+0x472>
   156ce:	21 15       	cp	r18, r1
   156d0:	31 05       	cpc	r19, r1
   156d2:	79 f4       	brne	.+30     	; 0x156f2 <SS80_Command_State+0x1a8>
   156d4:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   156d8:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   156dc:	81 e0       	ldi	r24, 0x01	; 1
   156de:	90 e0       	ldi	r25, 0x00	; 0
   156e0:	91 83       	std	Z+1, r25	; 0x01
   156e2:	80 83       	st	Z, r24
   156e4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   156e8:	85 ff       	sbrs	r24, 5
   156ea:	6a c1       	rjmp	.+724    	; 0x159c0 <SS80_Command_State+0x476>
   156ec:	80 e5       	ldi	r24, 0x50	; 80
   156ee:	94 e2       	ldi	r25, 0x24	; 36
   156f0:	0f c0       	rjmp	.+30     	; 0x15710 <SS80_Command_State+0x1c6>
   156f2:	22 30       	cpi	r18, 0x02	; 2
   156f4:	31 05       	cpc	r19, r1
   156f6:	a9 f4       	brne	.+42     	; 0x15722 <SS80_Command_State+0x1d8>
   156f8:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   156fc:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15700:	31 83       	std	Z+1, r19	; 0x01
   15702:	20 83       	st	Z, r18
   15704:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15708:	85 ff       	sbrs	r24, 5
   1570a:	5a c1       	rjmp	.+692    	; 0x159c0 <SS80_Command_State+0x476>
   1570c:	87 e3       	ldi	r24, 0x37	; 55
   1570e:	94 e2       	ldi	r25, 0x24	; 36
   15710:	1f 92       	push	r1
   15712:	9f 93       	push	r25
   15714:	8f 93       	push	r24
   15716:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1571a:	0f 90       	pop	r0
   1571c:	0f 90       	pop	r0
   1571e:	0f 90       	pop	r0
   15720:	4f c1       	rjmp	.+670    	; 0x159c0 <SS80_Command_State+0x476>
   15722:	20 31       	cpi	r18, 0x10	; 16
   15724:	31 05       	cpc	r19, r1
   15726:	a1 f5       	brne	.+104    	; 0x15790 <SS80_Command_State+0x246>
   15728:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <SS80s>
   1572c:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <SS80s+0x1>
   15730:	9c 83       	std	Y+4, r25	; 0x04
   15732:	8b 83       	std	Y+3, r24	; 0x03
   15734:	46 e0       	ldi	r20, 0x06	; 6
   15736:	50 e0       	ldi	r21, 0x00	; 0
   15738:	b8 01       	movw	r22, r16
   1573a:	82 ee       	ldi	r24, 0xE2	; 226
   1573c:	9b e1       	ldi	r25, 0x1B	; 27
   1573e:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   15742:	eb 81       	ldd	r30, Y+3	; 0x03
   15744:	fc 81       	ldd	r31, Y+4	; 0x04
   15746:	67 83       	std	Z+7, r22	; 0x07
   15748:	70 87       	std	Z+8, r23	; 0x08
   1574a:	81 87       	std	Z+9, r24	; 0x09
   1574c:	92 87       	std	Z+10, r25	; 0x0a
   1574e:	87 01       	movw	r16, r14
   15750:	09 5f       	subi	r16, 0xF9	; 249
   15752:	1f 4f       	sbci	r17, 0xFF	; 255
   15754:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15758:	85 ff       	sbrs	r24, 5
   1575a:	30 c1       	rjmp	.+608    	; 0x159bc <SS80_Command_State+0x472>
   1575c:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15760:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15764:	a0 91 67 18 	lds	r26, 0x1867	; 0x801867 <SS80p>
   15768:	b0 91 68 18 	lds	r27, 0x1868	; 0x801868 <SS80p+0x1>
   1576c:	9f 96       	adiw	r26, 0x2f	; 47
   1576e:	0d 90       	ld	r0, X+
   15770:	bc 91       	ld	r27, X
   15772:	a0 2d       	mov	r26, r0
   15774:	27 81       	ldd	r18, Z+7	; 0x07
   15776:	30 85       	ldd	r19, Z+8	; 0x08
   15778:	41 85       	ldd	r20, Z+9	; 0x09
   1577a:	52 85       	ldd	r21, Z+10	; 0x0a
   1577c:	0e 94 0e e5 	call	0x1ca1c	; 0x1ca1c <__muluhisi3>
   15780:	9f 93       	push	r25
   15782:	8f 93       	push	r24
   15784:	7f 93       	push	r23
   15786:	6f 93       	push	r22
   15788:	1f 92       	push	r1
   1578a:	3f 92       	push	r3
   1578c:	2f 92       	push	r2
   1578e:	2e c0       	rjmp	.+92     	; 0x157ec <SS80_Command_State+0x2a2>
   15790:	28 31       	cpi	r18, 0x18	; 24
   15792:	31 05       	cpc	r19, r1
   15794:	99 f5       	brne	.+102    	; 0x157fc <SS80_Command_State+0x2b2>
   15796:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <SS80s>
   1579a:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <SS80s+0x1>
   1579e:	9c 83       	std	Y+4, r25	; 0x04
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   157a0:	8b 83       	std	Y+3, r24	; 0x03
   157a2:	44 e0       	ldi	r20, 0x04	; 4
   157a4:	50 e0       	ldi	r21, 0x00	; 0
   157a6:	b8 01       	movw	r22, r16
   157a8:	82 ee       	ldi	r24, 0xE2	; 226
   157aa:	9b e1       	ldi	r25, 0x1B	; 27
   157ac:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   157b0:	eb 81       	ldd	r30, Y+3	; 0x03
   157b2:	fc 81       	ldd	r31, Y+4	; 0x04
   157b4:	63 87       	std	Z+11, r22	; 0x0b
   157b6:	74 87       	std	Z+12, r23	; 0x0c
   157b8:	85 87       	std	Z+13, r24	; 0x0d
   157ba:	96 87       	std	Z+14, r25	; 0x0e
   157bc:	87 01       	movw	r16, r14
   157be:	0b 5f       	subi	r16, 0xFB	; 251
   157c0:	1f 4f       	sbci	r17, 0xFF	; 255
   157c2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   157c6:	85 ff       	sbrs	r24, 5
   157c8:	f9 c0       	rjmp	.+498    	; 0x159bc <SS80_Command_State+0x472>
   157ca:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   157ce:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   157d2:	86 85       	ldd	r24, Z+14	; 0x0e
   157d4:	8f 93       	push	r24
   157d6:	85 85       	ldd	r24, Z+13	; 0x0d
   157d8:	8f 93       	push	r24
   157da:	84 85       	ldd	r24, Z+12	; 0x0c
   157dc:	8f 93       	push	r24
   157de:	83 85       	ldd	r24, Z+11	; 0x0b
   157e0:	8f 93       	push	r24
   157e2:	1f 92       	push	r1
   157e4:	ff 85       	ldd	r31, Y+15	; 0x0f
   157e6:	ff 93       	push	r31
   157e8:	2e 85       	ldd	r18, Y+14	; 0x0e
   157ea:	2f 93       	push	r18
   157ec:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   157f0:	0f b6       	in	r0, 0x3f	; 63
   157f2:	f8 94       	cli
   157f4:	de bf       	out	0x3e, r29	; 62
   157f6:	0f be       	out	0x3f, r0	; 63
   157f8:	cd bf       	out	0x3d, r28	; 61
   157fa:	e0 c0       	rjmp	.+448    	; 0x159bc <SS80_Command_State+0x472>
   157fc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15800:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   15804:	24 33       	cpi	r18, 0x34	; 52
   15806:	31 05       	cpc	r19, r1
   15808:	31 f4       	brne	.+12     	; 0x15816 <SS80_Command_State+0x2cc>
   1580a:	85 ff       	sbrs	r24, 5
   1580c:	d7 c0       	rjmp	.+430    	; 0x159bc <SS80_Command_State+0x472>
   1580e:	1f 92       	push	r1
   15810:	7f 92       	push	r7
   15812:	6f 92       	push	r6
   15814:	2c c0       	rjmp	.+88     	; 0x1586e <SS80_Command_State+0x324>
   15816:	29 33       	cpi	r18, 0x39	; 57
   15818:	31 05       	cpc	r19, r1
   1581a:	59 f4       	brne	.+22     	; 0x15832 <SS80_Command_State+0x2e8>
   1581c:	87 01       	movw	r16, r14
   1581e:	0d 5f       	subi	r16, 0xFD	; 253
   15820:	1f 4f       	sbci	r17, 0xFF	; 255
   15822:	85 ff       	sbrs	r24, 5
   15824:	cb c0       	rjmp	.+406    	; 0x159bc <SS80_Command_State+0x472>
   15826:	1f 92       	push	r1
   15828:	9c 85       	ldd	r25, Y+12	; 0x0c
   1582a:	9f 93       	push	r25
   1582c:	eb 85       	ldd	r30, Y+11	; 0x0b
   1582e:	ef 93       	push	r30
   15830:	1e c0       	rjmp	.+60     	; 0x1586e <SS80_Command_State+0x324>
   15832:	2b 33       	cpi	r18, 0x3B	; 59
   15834:	31 05       	cpc	r19, r1
   15836:	59 f4       	brne	.+22     	; 0x1584e <SS80_Command_State+0x304>
   15838:	87 01       	movw	r16, r14
   1583a:	0e 5f       	subi	r16, 0xFE	; 254
    return ( uart_rx_count( uart ) );
   1583c:	1f 4f       	sbci	r17, 0xFF	; 255
}
   1583e:	85 ff       	sbrs	r24, 5
   15840:	bd c0       	rjmp	.+378    	; 0x159bc <SS80_Command_State+0x472>
   15842:	1f 92       	push	r1
   15844:	f9 85       	ldd	r31, Y+9	; 0x09
   15846:	ff 93       	push	r31
   15848:	28 85       	ldd	r18, Y+8	; 0x08
   1584a:	2f 93       	push	r18
   1584c:	10 c0       	rjmp	.+32     	; 0x1586e <SS80_Command_State+0x324>
   1584e:	28 34       	cpi	r18, 0x48	; 72
   15850:	31 05       	cpc	r19, r1
   15852:	99 f4       	brne	.+38     	; 0x1587a <SS80_Command_State+0x330>
   15854:	87 01       	movw	r16, r14
   15856:	0e 5f       	subi	r16, 0xFE	; 254
   15858:	1f 4f       	sbci	r17, 0xFF	; 255
   1585a:	80 73       	andi	r24, 0x30	; 48
   1585c:	99 27       	eor	r25, r25
   1585e:	89 2b       	or	r24, r25
   15860:	09 f4       	brne	.+2      	; 0x15864 <SS80_Command_State+0x31a>
   15862:	ac c0       	rjmp	.+344    	; 0x159bc <SS80_Command_State+0x472>
   15864:	1f 92       	push	r1
   15866:	3e 81       	ldd	r19, Y+6	; 0x06
   15868:	3f 93       	push	r19
   1586a:	4d 81       	ldd	r20, Y+5	; 0x05
   1586c:	4f 93       	push	r20
   1586e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   15872:	0f 90       	pop	r0
   15874:	0f 90       	pop	r0
   15876:	0f 90       	pop	r0
   15878:	a1 c0       	rjmp	.+322    	; 0x159bc <SS80_Command_State+0x472>
   1587a:	24 30       	cpi	r18, 0x04	; 4
   1587c:	31 05       	cpc	r19, r1
   1587e:	41 f4       	brne	.+16     	; 0x15890 <SS80_Command_State+0x346>
   15880:	80 73       	andi	r24, 0x30	; 48
   15882:	99 27       	eor	r25, r25
   15884:	89 2b       	or	r24, r25
   15886:	09 f4       	brne	.+2      	; 0x1588a <SS80_Command_State+0x340>
   15888:	9b c0       	rjmp	.+310    	; 0x159c0 <SS80_Command_State+0x476>
   1588a:	8a e7       	ldi	r24, 0x7A	; 122
   1588c:	93 e2       	ldi	r25, 0x23	; 35
   1588e:	40 cf       	rjmp	.-384    	; 0x15710 <SS80_Command_State+0x1c6>
   15890:	2e 30       	cpi	r18, 0x0E	; 14
   15892:	31 05       	cpc	r19, r1
   15894:	29 f4       	brne	.+10     	; 0x158a0 <SS80_Command_State+0x356>
   15896:	85 ff       	sbrs	r24, 5
   15898:	93 c0       	rjmp	.+294    	; 0x159c0 <SS80_Command_State+0x476>
   1589a:	84 e6       	ldi	r24, 0x64	; 100
   1589c:	93 e2       	ldi	r25, 0x23	; 35
   1589e:	38 cf       	rjmp	.-400    	; 0x15710 <SS80_Command_State+0x1c6>
   158a0:	2f 30       	cpi	r18, 0x0F	; 15
   158a2:	31 05       	cpc	r19, r1
   158a4:	29 f4       	brne	.+10     	; 0x158b0 <SS80_Command_State+0x366>
   158a6:	85 ff       	sbrs	r24, 5
   158a8:	8b c0       	rjmp	.+278    	; 0x159c0 <SS80_Command_State+0x476>
   158aa:	87 e4       	ldi	r24, 0x47	; 71
   158ac:	93 e2       	ldi	r25, 0x23	; 35
   158ae:	30 cf       	rjmp	.-416    	; 0x15710 <SS80_Command_State+0x1c6>
   158b0:	21 33       	cpi	r18, 0x31	; 49
   158b2:	31 05       	cpc	r19, r1
   158b4:	41 f4       	brne	.+16     	; 0x158c6 <SS80_Command_State+0x37c>
   158b6:	87 01       	movw	r16, r14
   158b8:	0d 5f       	subi	r16, 0xFD	; 253
   158ba:	1f 4f       	sbci	r17, 0xFF	; 255
   158bc:	85 ff       	sbrs	r24, 5
   158be:	80 c0       	rjmp	.+256    	; 0x159c0 <SS80_Command_State+0x476>
   158c0:	8b e2       	ldi	r24, 0x2B	; 43
   158c2:	93 e2       	ldi	r25, 0x23	; 35
   158c4:	25 cf       	rjmp	.-438    	; 0x15710 <SS80_Command_State+0x1c6>
   158c6:	25 33       	cpi	r18, 0x35	; 53
   158c8:	31 05       	cpc	r19, r1
   158ca:	69 f4       	brne	.+26     	; 0x158e6 <SS80_Command_State+0x39c>
   158cc:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   158d0:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   158d4:	24 e0       	ldi	r18, 0x04	; 4
   158d6:	30 e0       	ldi	r19, 0x00	; 0
   158d8:	31 83       	std	Z+1, r19	; 0x01
   158da:	20 83       	st	Z, r18
   158dc:	85 ff       	sbrs	r24, 5
   158de:	70 c0       	rjmp	.+224    	; 0x159c0 <SS80_Command_State+0x476>
   158e0:	8a e1       	ldi	r24, 0x1A	; 26
   158e2:	93 e2       	ldi	r25, 0x23	; 35
   158e4:	15 cf       	rjmp	.-470    	; 0x15710 <SS80_Command_State+0x1c6>
   158e6:	27 33       	cpi	r18, 0x37	; 55
   158e8:	31 05       	cpc	r19, r1
   158ea:	59 f4       	brne	.+22     	; 0x15902 <SS80_Command_State+0x3b8>
   158ec:	87 01       	movw	r16, r14
   158ee:	0d 5f       	subi	r16, 0xFD	; 253
   158f0:	1f 4f       	sbci	r17, 0xFF	; 255
   158f2:	80 73       	andi	r24, 0x30	; 48
   158f4:	99 27       	eor	r25, r25
   158f6:	89 2b       	or	r24, r25
   158f8:	09 f4       	brne	.+2      	; 0x158fc <SS80_Command_State+0x3b2>
   158fa:	62 c0       	rjmp	.+196    	; 0x159c0 <SS80_Command_State+0x476>
   158fc:	8c ef       	ldi	r24, 0xFC	; 252
   158fe:	92 e2       	ldi	r25, 0x22	; 34
   15900:	07 cf       	rjmp	.-498    	; 0x15710 <SS80_Command_State+0x1c6>
   15902:	2e 33       	cpi	r18, 0x3E	; 62
   15904:	31 05       	cpc	r19, r1
   15906:	c1 f4       	brne	.+48     	; 0x15938 <SS80_Command_State+0x3ee>
   15908:	80 73       	andi	r24, 0x30	; 48
   1590a:	99 27       	eor	r25, r25
   1590c:	89 2b       	or	r24, r25
   1590e:	81 f0       	breq	.+32     	; 0x15930 <SS80_Command_State+0x3e6>
   15910:	8d ed       	ldi	r24, 0xDD	; 221
   15912:	92 e2       	ldi	r25, 0x22	; 34
   15914:	1f 92       	push	r1
   15916:	9f 93       	push	r25
   15918:	8f 93       	push	r24
   1591a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1591e:	64 ec       	ldi	r22, 0xC4	; 196
   15920:	7f e0       	ldi	r23, 0x0F	; 15
   15922:	c8 01       	movw	r24, r16
   15924:	8e 51       	subi	r24, 0x1E	; 30
   15926:	94 4e       	sbci	r25, 0xE4	; 228
   15928:	86 dc       	rcall	.-1780   	; 0x15236 <SS80_display_extended_status>
   1592a:	0f 90       	pop	r0
   1592c:	0f 90       	pop	r0
   1592e:	0f 90       	pop	r0
   15930:	87 01       	movw	r16, r14
   15932:	07 5f       	subi	r16, 0xF7	; 247
   15934:	1f 4f       	sbci	r17, 0xFF	; 255
   15936:	44 c0       	rjmp	.+136    	; 0x159c0 <SS80_Command_State+0x476>
   15938:	2c 34       	cpi	r18, 0x4C	; 76
   1593a:	31 05       	cpc	r19, r1
   1593c:	39 f4       	brne	.+14     	; 0x1594c <SS80_Command_State+0x402>
   1593e:	80 73       	andi	r24, 0x30	; 48
   15940:	99 27       	eor	r25, r25
   15942:	89 2b       	or	r24, r25
   15944:	e9 f1       	breq	.+122    	; 0x159c0 <SS80_Command_State+0x476>
   15946:	82 ec       	ldi	r24, 0xC2	; 194
   15948:	92 e2       	ldi	r25, 0x22	; 34
   1594a:	e2 ce       	rjmp	.-572    	; 0x15710 <SS80_Command_State+0x1c6>
   1594c:	2d 34       	cpi	r18, 0x4D	; 77
   1594e:	31 05       	cpc	r19, r1
   15950:	39 f4       	brne	.+14     	; 0x15960 <SS80_Command_State+0x416>
   15952:	80 73       	andi	r24, 0x30	; 48
   15954:	99 27       	eor	r25, r25
   15956:	89 2b       	or	r24, r25
   15958:	99 f1       	breq	.+102    	; 0x159c0 <SS80_Command_State+0x476>
   1595a:	89 ea       	ldi	r24, 0xA9	; 169
   1595c:	92 e2       	ldi	r25, 0x22	; 34
   1595e:	d8 ce       	rjmp	.-592    	; 0x15710 <SS80_Command_State+0x1c6>
   15960:	2d 30       	cpi	r18, 0x0D	; 13
   15962:	31 05       	cpc	r19, r1
   15964:	69 f4       	brne	.+26     	; 0x15980 <SS80_Command_State+0x436>
   15966:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   1596a:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   1596e:	23 e0       	ldi	r18, 0x03	; 3
   15970:	30 e0       	ldi	r19, 0x00	; 0
   15972:	31 83       	std	Z+1, r19	; 0x01
   15974:	20 83       	st	Z, r18
   15976:	85 ff       	sbrs	r24, 5
   15978:	23 c0       	rjmp	.+70     	; 0x159c0 <SS80_Command_State+0x476>
   1597a:	82 e9       	ldi	r24, 0x92	; 146
   1597c:	92 e2       	ldi	r25, 0x22	; 34
   1597e:	c8 ce       	rjmp	.-624    	; 0x15710 <SS80_Command_State+0x1c6>
   15980:	23 33       	cpi	r18, 0x33	; 51
   15982:	31 05       	cpc	r19, r1
   15984:	51 f4       	brne	.+20     	; 0x1599a <SS80_Command_State+0x450>
   15986:	87 01       	movw	r16, r14
   15988:	0c 5f       	subi	r16, 0xFC	; 252
   1598a:	1f 4f       	sbci	r17, 0xFF	; 255
   1598c:	80 73       	andi	r24, 0x30	; 48
   1598e:	99 27       	eor	r25, r25
   15990:	89 2b       	or	r24, r25
   15992:	b1 f0       	breq	.+44     	; 0x159c0 <SS80_Command_State+0x476>
   15994:	81 e7       	ldi	r24, 0x71	; 113
   15996:	92 e2       	ldi	r25, 0x22	; 34
   15998:	bb ce       	rjmp	.-650    	; 0x15710 <SS80_Command_State+0x1c6>
   1599a:	80 ff       	sbrs	r24, 0
   1599c:	28 c0       	rjmp	.+80     	; 0x159ee <SS80_Command_State+0x4a4>
   1599e:	3f 93       	push	r19
   159a0:	2f 93       	push	r18
   159a2:	81 e5       	ldi	r24, 0x51	; 81
   159a4:	92 e2       	ldi	r25, 0x22	; 34
   159a6:	1f 92       	push	r1
   159a8:	9f 93       	push	r25
   159aa:	8f 93       	push	r24
   159ac:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   159b0:	0f 90       	pop	r0
   159b2:	0f 90       	pop	r0
   159b4:	0f 90       	pop	r0
   159b6:	0f 90       	pop	r0
   159b8:	0f 90       	pop	r0
   159ba:	02 c0       	rjmp	.+4      	; 0x159c0 <SS80_Command_State+0x476>
   159bc:	78 01       	movw	r14, r16
   159be:	45 ce       	rjmp	.-886    	; 0x1564a <SS80_Command_State+0x100>
   159c0:	0c 15       	cp	r16, r12
   159c2:	1d 05       	cpc	r17, r13
   159c4:	a1 f0       	breq	.+40     	; 0x159ee <SS80_Command_State+0x4a4>
   159c6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   159ca:	80 ff       	sbrs	r24, 0
   159cc:	10 c0       	rjmp	.+32     	; 0x159ee <SS80_Command_State+0x4a4>
   159ce:	df 92       	push	r13
   159d0:	cf 92       	push	r12
   159d2:	1f 93       	push	r17
   159d4:	0f 93       	push	r16
   159d6:	89 e1       	ldi	r24, 0x19	; 25
   159d8:	92 e2       	ldi	r25, 0x22	; 34
   159da:	1f 92       	push	r1
   159dc:	9f 93       	push	r25
   159de:	8f 93       	push	r24
   159e0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   159e4:	0f b6       	in	r0, 0x3f	; 63
   159e6:	f8 94       	cli
   159e8:	de bf       	out	0x3e, r29	; 62
   159ea:	0f be       	out	0x3f, r0	; 63
   159ec:	cd bf       	out	0x3d, r28	; 61
   159ee:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   159f2:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   159f6:	81 81       	ldd	r24, Z+1	; 0x01
   159f8:	90 e0       	ldi	r25, 0x00	; 0
   159fa:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   159fe:	89 81       	ldd	r24, Y+1	; 0x01
   15a00:	9a 81       	ldd	r25, Y+2	; 0x02
   15a02:	88 27       	eor	r24, r24
   15a04:	90 7d       	andi	r25, 0xD0	; 208
   15a06:	02 c0       	rjmp	.+4      	; 0x15a0c <SS80_Command_State+0x4c2>
   15a08:	80 e0       	ldi	r24, 0x00	; 0
   15a0a:	90 e0       	ldi	r25, 0x00	; 0
   15a0c:	60 96       	adiw	r28, 0x10	; 16
   15a0e:	0f b6       	in	r0, 0x3f	; 63
   15a10:	f8 94       	cli
   15a12:	de bf       	out	0x3e, r29	; 62
   15a14:	0f be       	out	0x3f, r0	; 63
   15a16:	cd bf       	out	0x3d, r28	; 61
   15a18:	df 91       	pop	r29
   15a1a:	cf 91       	pop	r28
   15a1c:	1f 91       	pop	r17
   15a1e:	0f 91       	pop	r16
   15a20:	ff 90       	pop	r15
   15a22:	ef 90       	pop	r14
   15a24:	df 90       	pop	r13
   15a26:	cf 90       	pop	r12
   15a28:	bf 90       	pop	r11
   15a2a:	af 90       	pop	r10
   15a2c:	8f 90       	pop	r8
   15a2e:	7f 90       	pop	r7
   15a30:	6f 90       	pop	r6
   15a32:	4f 90       	pop	r4
   15a34:	3f 90       	pop	r3
   15a36:	2f 90       	pop	r2
   15a38:	08 95       	ret

00015a3a <SS80_cmd_seek>:
   15a3a:	a0 e0       	ldi	r26, 0x00	; 0
   15a3c:	b0 e0       	ldi	r27, 0x00	; 0
   15a3e:	e3 e2       	ldi	r30, 0x23	; 35
   15a40:	fd ea       	ldi	r31, 0xAD	; 173
   15a42:	0c 94 30 e5 	jmp	0x1ca60	; 0x1ca60 <__prologue_saves__+0x4>
   15a46:	c0 91 65 18 	lds	r28, 0x1865	; 0x801865 <SS80s>
   15a4a:	d0 91 66 18 	lds	r29, 0x1866	; 0x801866 <SS80s+0x1>
   15a4e:	8f 80       	ldd	r8, Y+7	; 0x07
   15a50:	98 84       	ldd	r9, Y+8	; 0x08
   15a52:	a9 84       	ldd	r10, Y+9	; 0x09
   15a54:	ba 84       	ldd	r11, Y+10	; 0x0a
   15a56:	00 91 67 18 	lds	r16, 0x1867	; 0x801867 <SS80p>
   15a5a:	10 91 68 18 	lds	r17, 0x1868	; 0x801868 <SS80p+0x1>
   15a5e:	f8 01       	movw	r30, r16
   15a60:	c7 a4       	ldd	r12, Z+47	; 0x2f
   15a62:	d0 a8       	ldd	r13, Z+48	; 0x30
   15a64:	e1 2c       	mov	r14, r1
   15a66:	f1 2c       	mov	r15, r1
   15a68:	6b 85       	ldd	r22, Y+11	; 0x0b
   15a6a:	7c 85       	ldd	r23, Y+12	; 0x0c
   15a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
   15a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
   15a70:	a7 01       	movw	r20, r14
   15a72:	96 01       	movw	r18, r12
   15a74:	0e 94 ac e4 	call	0x1c958	; 0x1c958 <__udivmodsi4>
   15a78:	da 01       	movw	r26, r20
   15a7a:	c9 01       	movw	r24, r18
   15a7c:	88 0d       	add	r24, r8
   15a7e:	99 1d       	adc	r25, r9
   15a80:	aa 1d       	adc	r26, r10
   15a82:	bb 1d       	adc	r27, r11
   15a84:	f8 01       	movw	r30, r16
   15a86:	eb 5b       	subi	r30, 0xBB	; 187
   15a88:	ff 4f       	sbci	r31, 0xFF	; 255
   15a8a:	40 80       	ld	r4, Z
   15a8c:	51 80       	ldd	r5, Z+1	; 0x01
   15a8e:	62 80       	ldd	r6, Z+2	; 0x02
   15a90:	73 80       	ldd	r7, Z+3	; 0x03
   15a92:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   15a96:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   15a9a:	48 16       	cp	r4, r24
   15a9c:	59 06       	cpc	r5, r25
   15a9e:	6a 06       	cpc	r6, r26
   15aa0:	7b 06       	cpc	r7, r27
   15aa2:	20 f5       	brcc	.+72     	; 0x15aec <SS80_cmd_seek+0xb2>
   15aa4:	81 e0       	ldi	r24, 0x01	; 1
   15aa6:	8a 83       	std	Y+2, r24	; 0x02
   15aa8:	8b 81       	ldd	r24, Y+3	; 0x03
   15aaa:	9c 81       	ldd	r25, Y+4	; 0x04
   15aac:	84 60       	ori	r24, 0x04	; 4
   15aae:	9c 83       	std	Y+4, r25	; 0x04
   15ab0:	8b 83       	std	Y+3, r24	; 0x03
   15ab2:	40 ff       	sbrs	r20, 0
   15ab4:	3c c0       	rjmp	.+120    	; 0x15b2e <SS80_cmd_seek+0xf4>
   15ab6:	f8 01       	movw	r30, r16
   15ab8:	a7 a5       	ldd	r26, Z+47	; 0x2f
   15aba:	b0 a9       	ldd	r27, Z+48	; 0x30
   15abc:	a5 01       	movw	r20, r10
   15abe:	94 01       	movw	r18, r8
   15ac0:	0e 94 0e e5 	call	0x1ca1c	; 0x1ca1c <__muluhisi3>
   15ac4:	9f 93       	push	r25
   15ac6:	8f 93       	push	r24
   15ac8:	7f 93       	push	r23
   15aca:	6f 93       	push	r22
   15acc:	86 ed       	ldi	r24, 0xD6	; 214
   15ace:	90 e2       	ldi	r25, 0x20	; 32
   15ad0:	1f 92       	push	r1
   15ad2:	9f 93       	push	r25
   15ad4:	8f 93       	push	r24
   15ad6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   15ada:	8d b7       	in	r24, 0x3d	; 61
   15adc:	9e b7       	in	r25, 0x3e	; 62
   15ade:	07 96       	adiw	r24, 0x07	; 7
   15ae0:	0f b6       	in	r0, 0x3f	; 63
   15ae2:	f8 94       	cli
   15ae4:	9e bf       	out	0x3e, r25	; 62
   15ae6:	0f be       	out	0x3f, r0	; 63
   15ae8:	8d bf       	out	0x3d, r24	; 61
   15aea:	21 c0       	rjmp	.+66     	; 0x15b2e <SS80_cmd_seek+0xf4>
   15aec:	ca 01       	movw	r24, r20
   15aee:	80 72       	andi	r24, 0x20	; 32
   15af0:	99 27       	eor	r25, r25
   15af2:	45 ff       	sbrs	r20, 5
   15af4:	1e c0       	rjmp	.+60     	; 0x15b32 <SS80_cmd_seek+0xf8>
   15af6:	a5 01       	movw	r20, r10
   15af8:	94 01       	movw	r18, r8
   15afa:	c7 01       	movw	r24, r14
   15afc:	b6 01       	movw	r22, r12
   15afe:	0e 94 6a e4 	call	0x1c8d4	; 0x1c8d4 <__mulsi3>
   15b02:	9f 93       	push	r25
   15b04:	8f 93       	push	r24
   15b06:	7f 93       	push	r23
   15b08:	6f 93       	push	r22
   15b0a:	82 ec       	ldi	r24, 0xC2	; 194
   15b0c:	90 e2       	ldi	r25, 0x20	; 32
   15b0e:	1f 92       	push	r1
   15b10:	9f 93       	push	r25
   15b12:	8f 93       	push	r24
   15b14:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   15b18:	ed b7       	in	r30, 0x3d	; 61
   15b1a:	fe b7       	in	r31, 0x3e	; 62
   15b1c:	37 96       	adiw	r30, 0x07	; 7
   15b1e:	0f b6       	in	r0, 0x3f	; 63
   15b20:	f8 94       	cli
   15b22:	fe bf       	out	0x3e, r31	; 62
   15b24:	0f be       	out	0x3f, r0	; 63
   15b26:	ed bf       	out	0x3d, r30	; 61
   15b28:	80 e0       	ldi	r24, 0x00	; 0
   15b2a:	90 e0       	ldi	r25, 0x00	; 0
   15b2c:	02 c0       	rjmp	.+4      	; 0x15b32 <SS80_cmd_seek+0xf8>
   15b2e:	81 e0       	ldi	r24, 0x01	; 1
   15b30:	90 e0       	ldi	r25, 0x00	; 0
   15b32:	cd b7       	in	r28, 0x3d	; 61
   15b34:	de b7       	in	r29, 0x3e	; 62
   15b36:	e0 e1       	ldi	r30, 0x10	; 16
   15b38:	0c 94 4c e5 	jmp	0x1ca98	; 0x1ca98 <__epilogue_restores__+0x4>

00015b3c <SS80_locate_and_write>:
   15b3c:	a8 e0       	ldi	r26, 0x08	; 8
   15b3e:	b0 e0       	ldi	r27, 0x00	; 0
   15b40:	e4 ea       	ldi	r30, 0xA4	; 164
   15b42:	fd ea       	ldi	r31, 0xAD	; 173
   15b44:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
   15b48:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15b4c:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15b50:	a0 91 67 18 	lds	r26, 0x1867	; 0x801867 <SS80p>
   15b54:	b0 91 68 18 	lds	r27, 0x1868	; 0x801868 <SS80p+0x1>
   15b58:	9f 96       	adiw	r26, 0x2f	; 47
   15b5a:	0d 90       	ld	r0, X+
   15b5c:	bc 91       	ld	r27, X
   15b5e:	a0 2d       	mov	r26, r0
   15b60:	27 81       	ldd	r18, Z+7	; 0x07
   15b62:	30 85       	ldd	r19, Z+8	; 0x08
   15b64:	41 85       	ldd	r20, Z+9	; 0x09
   15b66:	52 85       	ldd	r21, Z+10	; 0x0a
   15b68:	0e 94 0e e5 	call	0x1ca1c	; 0x1ca1c <__muluhisi3>
   15b6c:	4b 01       	movw	r8, r22
   15b6e:	5c 01       	movw	r10, r24
   15b70:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15b74:	85 ff       	sbrs	r24, 5
   15b76:	18 c0       	rjmp	.+48     	; 0x15ba8 <SS80_locate_and_write+0x6c>
   15b78:	86 85       	ldd	r24, Z+14	; 0x0e
   15b7a:	8f 93       	push	r24
   15b7c:	85 85       	ldd	r24, Z+13	; 0x0d
   15b7e:	8f 93       	push	r24
   15b80:	84 85       	ldd	r24, Z+12	; 0x0c
   15b82:	8f 93       	push	r24
   15b84:	83 85       	ldd	r24, Z+11	; 0x0b
   15b86:	8f 93       	push	r24
   15b88:	bf 92       	push	r11
   15b8a:	af 92       	push	r10
   15b8c:	9f 92       	push	r9
   15b8e:	8f 92       	push	r8
   15b90:	87 e5       	ldi	r24, 0x57	; 87
   15b92:	96 e2       	ldi	r25, 0x26	; 38
   15b94:	1f 92       	push	r1
   15b96:	9f 93       	push	r25
   15b98:	8f 93       	push	r24
   15b9a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   15b9e:	0f b6       	in	r0, 0x3f	; 63
   15ba0:	f8 94       	cli
   15ba2:	de bf       	out	0x3e, r29	; 62
   15ba4:	0f be       	out	0x3f, r0	; 63
   15ba6:	cd bf       	out	0x3d, r28	; 61
   15ba8:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15bac:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15bb0:	12 82       	std	Z+2, r1	; 0x02
   15bb2:	54 98       	cbi	0x0a, 4	; 10
   15bb4:	4c 99       	sbic	0x09, 4	; 9
   15bb6:	03 c0       	rjmp	.+6      	; 0x15bbe <SS80_locate_and_write+0x82>
   15bb8:	80 e0       	ldi	r24, 0x00	; 0
   15bba:	90 e1       	ldi	r25, 0x10	; 16
   15bbc:	52 c1       	rjmp	.+676    	; 0x15e62 <SS80_locate_and_write+0x326>
   15bbe:	3d df       	rcall	.-390    	; 0x15a3a <SS80_cmd_seek>
   15bc0:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15bc4:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15bc8:	89 2b       	or	r24, r25
   15bca:	41 f0       	breq	.+16     	; 0x15bdc <SS80_locate_and_write+0xa0>
   15bcc:	83 81       	ldd	r24, Z+3	; 0x03
   15bce:	94 81       	ldd	r25, Z+4	; 0x04
   15bd0:	82 60       	ori	r24, 0x02	; 2
   15bd2:	94 83       	std	Z+4, r25	; 0x04
   15bd4:	83 83       	std	Z+3, r24	; 0x03
   15bd6:	01 e0       	ldi	r16, 0x01	; 1
   15bd8:	10 e0       	ldi	r17, 0x00	; 0
   15bda:	02 c0       	rjmp	.+4      	; 0x15be0 <SS80_locate_and_write+0xa4>
   15bdc:	00 e0       	ldi	r16, 0x00	; 0
   15bde:	10 e0       	ldi	r17, 0x00	; 0
   15be0:	23 84       	ldd	r2, Z+11	; 0x0b
   15be2:	34 84       	ldd	r3, Z+12	; 0x0c
   15be4:	1a 82       	std	Y+2, r1	; 0x02
   15be6:	19 82       	std	Y+1, r1	; 0x01
   15be8:	41 2c       	mov	r4, r1
   15bea:	51 2c       	mov	r5, r1
   15bec:	32 01       	movw	r6, r4
   15bee:	8a e0       	ldi	r24, 0x0A	; 10
   15bf0:	96 e2       	ldi	r25, 0x26	; 38
   15bf2:	9c 01       	movw	r18, r24
   15bf4:	40 e0       	ldi	r20, 0x00	; 0
   15bf6:	2b 83       	std	Y+3, r18	; 0x03
   15bf8:	3c 83       	std	Y+4, r19	; 0x04
   15bfa:	4d 83       	std	Y+5, r20	; 0x05
   15bfc:	80 e3       	ldi	r24, 0x30	; 48
   15bfe:	96 e2       	ldi	r25, 0x26	; 38
   15c00:	9c 01       	movw	r18, r24
   15c02:	40 e0       	ldi	r20, 0x00	; 0
   15c04:	2e 83       	std	Y+6, r18	; 0x06
   15c06:	3f 83       	std	Y+7, r19	; 0x07
   15c08:	48 87       	std	Y+8, r20	; 0x08
   15c0a:	12 14       	cp	r1, r2
   15c0c:	13 04       	cpc	r1, r3
   15c0e:	0c f0       	brlt	.+2      	; 0x15c12 <SS80_locate_and_write+0xd6>
   15c10:	f6 c0       	rjmp	.+492    	; 0x15dfe <SS80_locate_and_write+0x2c2>
   15c12:	54 98       	cbi	0x0a, 4	; 10
   15c14:	4c 9b       	sbis	0x09, 4	; 9
   15c16:	d0 cf       	rjmp	.-96     	; 0x15bb8 <SS80_locate_and_write+0x7c>
   15c18:	71 01       	movw	r14, r2
   15c1a:	31 e0       	ldi	r19, 0x01	; 1
   15c1c:	23 16       	cp	r2, r19
   15c1e:	33 06       	cpc	r3, r19
   15c20:	1c f0       	brlt	.+6      	; 0x15c28 <SS80_locate_and_write+0xec>
   15c22:	e1 2c       	mov	r14, r1
   15c24:	ff 24       	eor	r15, r15
   15c26:	f3 94       	inc	r15
   15c28:	e2 ee       	ldi	r30, 0xE2	; 226
   15c2a:	fb e1       	ldi	r31, 0x1B	; 27
   15c2c:	20 e0       	ldi	r18, 0x00	; 0
   15c2e:	32 e0       	ldi	r19, 0x02	; 2
   15c30:	11 92       	st	Z+, r1
   15c32:	21 50       	subi	r18, 0x01	; 1
   15c34:	30 40       	sbci	r19, 0x00	; 0
   15c36:	e1 f7       	brne	.-8      	; 0x15c30 <SS80_locate_and_write+0xf4>
   15c38:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15c3c:	87 fd       	sbrc	r24, 7
   15c3e:	0e 94 27 85 	call	0x10a4e	; 0x10a4e <gpib_timer_elapsed_begin>
   15c42:	ae 01       	movw	r20, r28
   15c44:	4f 5f       	subi	r20, 0xFF	; 255
   15c46:	5f 4f       	sbci	r21, 0xFF	; 255
   15c48:	b7 01       	movw	r22, r14
   15c4a:	82 ee       	ldi	r24, 0xE2	; 226
   15c4c:	9b e1       	ldi	r25, 0x1B	; 27
   15c4e:	0e 94 81 8a 	call	0x11502	; 0x11502 <gpib_read_str>
   15c52:	6c 01       	movw	r12, r24
   15c54:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15c58:	87 ff       	sbrs	r24, 7
   15c5a:	04 c0       	rjmp	.+8      	; 0x15c64 <SS80_locate_and_write+0x128>
   15c5c:	80 ee       	ldi	r24, 0xE0	; 224
   15c5e:	9f e0       	ldi	r25, 0x0F	; 15
   15c60:	0e 94 39 85 	call	0x10a72	; 0x10a72 <gpib_timer_elapsed_end>
   15c64:	ce 14       	cp	r12, r14
   15c66:	df 04       	cpc	r13, r15
   15c68:	39 f1       	breq	.+78     	; 0x15cb8 <SS80_locate_and_write+0x17c>
   15c6a:	89 81       	ldd	r24, Y+1	; 0x01
   15c6c:	9a 81       	ldd	r25, Y+2	; 0x02
   15c6e:	9c 01       	movw	r18, r24
   15c70:	22 27       	eor	r18, r18
   15c72:	30 7d       	andi	r19, 0xD0	; 208
   15c74:	23 2b       	or	r18, r19
   15c76:	d1 f0       	breq	.+52     	; 0x15cac <SS80_locate_and_write+0x170>
   15c78:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15c7c:	80 ff       	sbrs	r24, 0
   15c7e:	0a c0       	rjmp	.+20     	; 0x15c94 <SS80_locate_and_write+0x158>
   15c80:	84 e4       	ldi	r24, 0x44	; 68
   15c82:	96 e2       	ldi	r25, 0x26	; 38
   15c84:	1f 92       	push	r1
   15c86:	9f 93       	push	r25
   15c88:	8f 93       	push	r24
   15c8a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   15c8e:	0f 90       	pop	r0
   15c90:	0f 90       	pop	r0
   15c92:	0f 90       	pop	r0
   15c94:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15c98:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15c9c:	83 81       	ldd	r24, Z+3	; 0x03
   15c9e:	94 81       	ldd	r25, Z+4	; 0x04
   15ca0:	82 60       	ori	r24, 0x02	; 2
   15ca2:	94 83       	std	Z+4, r25	; 0x04
   15ca4:	83 83       	std	Z+3, r24	; 0x03
   15ca6:	81 e0       	ldi	r24, 0x01	; 1
   15ca8:	82 83       	std	Z+2, r24	; 0x02
   15caa:	9a c0       	rjmp	.+308    	; 0x15de0 <SS80_locate_and_write+0x2a4>
   15cac:	c1 14       	cp	r12, r1
   15cae:	d1 04       	cpc	r13, r1
   15cb0:	09 f0       	breq	.+2      	; 0x15cb4 <SS80_locate_and_write+0x178>
   15cb2:	d3 c0       	rjmp	.+422    	; 0x15e5a <SS80_locate_and_write+0x31e>
   15cb4:	90 fd       	sbrc	r25, 0
   15cb6:	94 c0       	rjmp	.+296    	; 0x15de0 <SS80_locate_and_write+0x2a4>
   15cb8:	01 15       	cp	r16, r1
   15cba:	11 05       	cpc	r17, r1
   15cbc:	09 f0       	breq	.+2      	; 0x15cc0 <SS80_locate_and_write+0x184>
   15cbe:	85 c0       	rjmp	.+266    	; 0x15dca <SS80_locate_and_write+0x28e>
   15cc0:	c1 14       	cp	r12, r1
   15cc2:	d1 04       	cpc	r13, r1
   15cc4:	09 f4       	brne	.+2      	; 0x15cc8 <SS80_locate_and_write+0x18c>
   15cc6:	83 c0       	rjmp	.+262    	; 0x15dce <SS80_locate_and_write+0x292>
   15cc8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15ccc:	86 fd       	sbrc	r24, 6
   15cce:	0e 94 27 85 	call	0x10a4e	; 0x10a4e <gpib_timer_elapsed_begin>
   15cd2:	e0 90 65 18 	lds	r14, 0x1865	; 0x801865 <SS80s>
   15cd6:	f0 90 66 18 	lds	r15, 0x1866	; 0x801866 <SS80s+0x1>
   15cda:	33 e0       	ldi	r19, 0x03	; 3
   15cdc:	e3 0e       	add	r14, r19
   15cde:	f1 1c       	adc	r15, r1
   15ce0:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <SS80p>
   15ce4:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <SS80p+0x1>
   15ce8:	86 01       	movw	r16, r12
   15cea:	22 ee       	ldi	r18, 0xE2	; 226
   15cec:	3b e1       	ldi	r19, 0x1B	; 27
   15cee:	b5 01       	movw	r22, r10
   15cf0:	a4 01       	movw	r20, r8
   15cf2:	02 96       	adiw	r24, 0x02	; 2
   15cf4:	0e 94 d0 84 	call	0x109a0	; 0x109a0 <dbf_open_write>
   15cf8:	7c 01       	movw	r14, r24
   15cfa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15cfe:	86 ff       	sbrs	r24, 6
   15d00:	04 c0       	rjmp	.+8      	; 0x15d0a <SS80_locate_and_write+0x1ce>
   15d02:	8a ee       	ldi	r24, 0xEA	; 234
   15d04:	9f e0       	ldi	r25, 0x0F	; 15
   15d06:	0e 94 39 85 	call	0x10a72	; 0x10a72 <gpib_timer_elapsed_end>
   15d0a:	ce 14       	cp	r12, r14
   15d0c:	df 04       	cpc	r13, r15
   15d0e:	39 f1       	breq	.+78     	; 0x15d5e <SS80_locate_and_write+0x222>
   15d10:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15d14:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15d18:	83 81       	ldd	r24, Z+3	; 0x03
   15d1a:	94 81       	ldd	r25, Z+4	; 0x04
   15d1c:	82 60       	ori	r24, 0x02	; 2
   15d1e:	94 83       	std	Z+4, r25	; 0x04
   15d20:	83 83       	std	Z+3, r24	; 0x03
   15d22:	0e 94 91 70 	call	0xe122	; 0xe122 <mmc_wp_status>
   15d26:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15d2a:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15d2e:	89 2b       	or	r24, r25
   15d30:	29 f0       	breq	.+10     	; 0x15d3c <SS80_locate_and_write+0x200>
   15d32:	83 81       	ldd	r24, Z+3	; 0x03
   15d34:	94 81       	ldd	r25, Z+4	; 0x04
   15d36:	88 60       	ori	r24, 0x08	; 8
   15d38:	94 83       	std	Z+4, r25	; 0x04
   15d3a:	83 83       	std	Z+3, r24	; 0x03
   15d3c:	41 e0       	ldi	r20, 0x01	; 1
   15d3e:	42 83       	std	Z+2, r20	; 0x02
   15d40:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15d44:	80 ff       	sbrs	r24, 0
   15d46:	29 c0       	rjmp	.+82     	; 0x15d9a <SS80_locate_and_write+0x25e>
   15d48:	1f 92       	push	r1
   15d4a:	8f 81       	ldd	r24, Y+7	; 0x07
   15d4c:	8f 93       	push	r24
   15d4e:	9e 81       	ldd	r25, Y+6	; 0x06
   15d50:	9f 93       	push	r25
   15d52:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   15d56:	0f 90       	pop	r0
   15d58:	0f 90       	pop	r0
   15d5a:	0f 90       	pop	r0
   15d5c:	1e c0       	rjmp	.+60     	; 0x15d9a <SS80_locate_and_write+0x25e>
   15d5e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15d62:	85 ff       	sbrs	r24, 5
   15d64:	0e c0       	rjmp	.+28     	; 0x15d82 <SS80_locate_and_write+0x246>
   15d66:	df 92       	push	r13
   15d68:	cf 92       	push	r12
   15d6a:	1f 92       	push	r1
   15d6c:	ec 81       	ldd	r30, Y+4	; 0x04
   15d6e:	ef 93       	push	r30
   15d70:	fb 81       	ldd	r31, Y+3	; 0x03
   15d72:	ff 93       	push	r31
   15d74:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   15d78:	0f 90       	pop	r0
   15d7a:	0f 90       	pop	r0
   15d7c:	0f 90       	pop	r0
   15d7e:	0f 90       	pop	r0
   15d80:	0f 90       	pop	r0
   15d82:	c6 01       	movw	r24, r12
   15d84:	0d 2c       	mov	r0, r13
   15d86:	00 0c       	add	r0, r0
   15d88:	aa 0b       	sbc	r26, r26
   15d8a:	bb 0b       	sbc	r27, r27
   15d8c:	88 0e       	add	r8, r24
   15d8e:	99 1e       	adc	r9, r25
   15d90:	aa 1e       	adc	r10, r26
   15d92:	bb 1e       	adc	r11, r27
   15d94:	00 e0       	ldi	r16, 0x00	; 0
   15d96:	10 e0       	ldi	r17, 0x00	; 0
   15d98:	05 c0       	rjmp	.+10     	; 0x15da4 <SS80_locate_and_write+0x268>
   15d9a:	ec 14       	cp	r14, r12
   15d9c:	fd 04       	cpc	r15, r13
   15d9e:	64 f0       	brlt	.+24     	; 0x15db8 <SS80_locate_and_write+0x27c>
   15da0:	01 e0       	ldi	r16, 0x01	; 1
   15da2:	10 e0       	ldi	r17, 0x00	; 0
   15da4:	c7 01       	movw	r24, r14
   15da6:	0f 2c       	mov	r0, r15
   15da8:	00 0c       	add	r0, r0
   15daa:	aa 0b       	sbc	r26, r26
   15dac:	bb 0b       	sbc	r27, r27
   15dae:	48 0e       	add	r4, r24
   15db0:	59 1e       	adc	r5, r25
   15db2:	6a 1e       	adc	r6, r26
   15db4:	7b 1e       	adc	r7, r27
   15db6:	0b c0       	rjmp	.+22     	; 0x15dce <SS80_locate_and_write+0x292>
   15db8:	c6 01       	movw	r24, r12
   15dba:	0d 2c       	mov	r0, r13
   15dbc:	00 0c       	add	r0, r0
   15dbe:	aa 0b       	sbc	r26, r26
   15dc0:	bb 0b       	sbc	r27, r27
   15dc2:	48 0e       	add	r4, r24
   15dc4:	59 1e       	adc	r5, r25
   15dc6:	6a 1e       	adc	r6, r26
   15dc8:	7b 1e       	adc	r7, r27
   15dca:	01 e0       	ldi	r16, 0x01	; 1
   15dcc:	10 e0       	ldi	r17, 0x00	; 0
   15dce:	2c 18       	sub	r2, r12
   15dd0:	3d 08       	sbc	r3, r13
   15dd2:	89 81       	ldd	r24, Y+1	; 0x01
   15dd4:	9a 81       	ldd	r25, Y+2	; 0x02
   15dd6:	90 ff       	sbrs	r25, 0
   15dd8:	18 cf       	rjmp	.-464    	; 0x15c0a <SS80_locate_and_write+0xce>
   15dda:	12 14       	cp	r1, r2
   15ddc:	13 04       	cpc	r1, r3
   15dde:	7c f4       	brge	.+30     	; 0x15dfe <SS80_locate_and_write+0x2c2>
   15de0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15de4:	80 ff       	sbrs	r24, 0
   15de6:	1f c0       	rjmp	.+62     	; 0x15e26 <SS80_locate_and_write+0x2ea>
   15de8:	82 ee       	ldi	r24, 0xE2	; 226
   15dea:	95 e2       	ldi	r25, 0x25	; 37
   15dec:	1f 92       	push	r1
   15dee:	9f 93       	push	r25
   15df0:	8f 93       	push	r24
   15df2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   15df6:	0f 90       	pop	r0
   15df8:	0f 90       	pop	r0
   15dfa:	0f 90       	pop	r0
   15dfc:	14 c0       	rjmp	.+40     	; 0x15e26 <SS80_locate_and_write+0x2ea>
   15dfe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15e02:	85 ff       	sbrs	r24, 5
   15e04:	10 c0       	rjmp	.+32     	; 0x15e26 <SS80_locate_and_write+0x2ea>
   15e06:	7f 92       	push	r7
   15e08:	6f 92       	push	r6
   15e0a:	5f 92       	push	r5
   15e0c:	4f 92       	push	r4
   15e0e:	87 eb       	ldi	r24, 0xB7	; 183
   15e10:	95 e2       	ldi	r25, 0x25	; 37
   15e12:	1f 92       	push	r1
   15e14:	9f 93       	push	r25
   15e16:	8f 93       	push	r24
   15e18:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   15e1c:	0f b6       	in	r0, 0x3f	; 63
   15e1e:	f8 94       	cli
   15e20:	de bf       	out	0x3e, r29	; 62
   15e22:	0f be       	out	0x3f, r0	; 63
   15e24:	cd bf       	out	0x3d, r28	; 61
   15e26:	00 91 65 18 	lds	r16, 0x1865	; 0x801865 <SS80s>
   15e2a:	10 91 66 18 	lds	r17, 0x1866	; 0x801866 <SS80s+0x1>
   15e2e:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15e32:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15e36:	27 a5       	ldd	r18, Z+47	; 0x2f
   15e38:	30 a9       	ldd	r19, Z+48	; 0x30
   15e3a:	40 e0       	ldi	r20, 0x00	; 0
   15e3c:	50 e0       	ldi	r21, 0x00	; 0
   15e3e:	c5 01       	movw	r24, r10
   15e40:	b4 01       	movw	r22, r8
   15e42:	0e 94 ac e4 	call	0x1c958	; 0x1c958 <__udivmodsi4>
   15e46:	f8 01       	movw	r30, r16
   15e48:	27 83       	std	Z+7, r18	; 0x07
   15e4a:	30 87       	std	Z+8, r19	; 0x08
   15e4c:	41 87       	std	Z+9, r20	; 0x09
   15e4e:	52 87       	std	Z+10, r21	; 0x0a
   15e50:	89 81       	ldd	r24, Y+1	; 0x01
   15e52:	9a 81       	ldd	r25, Y+2	; 0x02
   15e54:	88 27       	eor	r24, r24
   15e56:	90 7d       	andi	r25, 0xD0	; 208
   15e58:	04 c0       	rjmp	.+8      	; 0x15e62 <SS80_locate_and_write+0x326>
   15e5a:	01 2b       	or	r16, r17
   15e5c:	09 f4       	brne	.+2      	; 0x15e60 <SS80_locate_and_write+0x324>
   15e5e:	34 cf       	rjmp	.-408    	; 0x15cc8 <SS80_locate_and_write+0x18c>
   15e60:	b4 cf       	rjmp	.-152    	; 0x15dca <SS80_locate_and_write+0x28e>
   15e62:	28 96       	adiw	r28, 0x08	; 8
   15e64:	e2 e1       	ldi	r30, 0x12	; 18
   15e66:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

00015e6a <SS80_Report>:
   15e6a:	a3 e0       	ldi	r26, 0x03	; 3
   15e6c:	b0 e0       	ldi	r27, 0x00	; 0
   15e6e:	eb e3       	ldi	r30, 0x3B	; 59
   15e70:	ff ea       	ldi	r31, 0xAF	; 175
   15e72:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
   15e76:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15e7a:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15e7e:	82 81       	ldd	r24, Z+2	; 0x02
   15e80:	8b 83       	std	Y+3, r24	; 0x03
   15e82:	80 e0       	ldi	r24, 0x00	; 0
   15e84:	91 e0       	ldi	r25, 0x01	; 1
   15e86:	9a 83       	std	Y+2, r25	; 0x02
   15e88:	89 83       	std	Y+1, r24	; 0x01
   15e8a:	ae 01       	movw	r20, r28
   15e8c:	4f 5f       	subi	r20, 0xFF	; 255
   15e8e:	5f 4f       	sbci	r21, 0xFF	; 255
   15e90:	61 e0       	ldi	r22, 0x01	; 1
   15e92:	70 e0       	ldi	r23, 0x00	; 0
   15e94:	ce 01       	movw	r24, r28
   15e96:	03 96       	adiw	r24, 0x03	; 3
   15e98:	0e 94 2f 8b 	call	0x1165e	; 0x1165e <gpib_write_str>
   15e9c:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   15ea0:	01 97       	sbiw	r24, 0x01	; 1
   15ea2:	89 f0       	breq	.+34     	; 0x15ec6 <SS80_Report+0x5c>
   15ea4:	20 ff       	sbrs	r18, 0
   15ea6:	0a c0       	rjmp	.+20     	; 0x15ebc <SS80_Report+0x52>
   15ea8:	88 ea       	ldi	r24, 0xA8	; 168
   15eaa:	90 e2       	ldi	r25, 0x20	; 32
   15eac:	1f 92       	push	r1
   15eae:	9f 93       	push	r25
   15eb0:	8f 93       	push	r24
   15eb2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   15eb6:	0f 90       	pop	r0
   15eb8:	0f 90       	pop	r0
   15eba:	0f 90       	pop	r0
   15ebc:	89 81       	ldd	r24, Y+1	; 0x01
   15ebe:	9a 81       	ldd	r25, Y+2	; 0x02
   15ec0:	88 27       	eor	r24, r24
   15ec2:	90 7d       	andi	r25, 0xD0	; 208
   15ec4:	1c c0       	rjmp	.+56     	; 0x15efe <SS80_Report+0x94>
   15ec6:	25 ff       	sbrs	r18, 5
   15ec8:	13 c0       	rjmp	.+38     	; 0x15ef0 <SS80_Report+0x86>
   15eca:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15ece:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15ed2:	82 81       	ldd	r24, Z+2	; 0x02
   15ed4:	1f 92       	push	r1
   15ed6:	8f 93       	push	r24
   15ed8:	85 e9       	ldi	r24, 0x95	; 149
   15eda:	90 e2       	ldi	r25, 0x20	; 32
   15edc:	1f 92       	push	r1
   15ede:	9f 93       	push	r25
   15ee0:	8f 93       	push	r24
   15ee2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   15ee6:	0f 90       	pop	r0
   15ee8:	0f 90       	pop	r0
   15eea:	0f 90       	pop	r0
   15eec:	0f 90       	pop	r0
   15eee:	0f 90       	pop	r0
   15ef0:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15ef4:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15ef8:	12 82       	std	Z+2, r1	; 0x02
   15efa:	80 e0       	ldi	r24, 0x00	; 0
   15efc:	90 e0       	ldi	r25, 0x00	; 0
   15efe:	23 96       	adiw	r28, 0x03	; 3
   15f00:	e2 e0       	ldi	r30, 0x02	; 2
   15f02:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

00015f06 <Clear_Common>:
   15f06:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15f0a:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15f0e:	25 81       	ldd	r18, Z+5	; 0x05
   15f10:	30 e0       	ldi	r19, 0x00	; 0
   15f12:	28 17       	cp	r18, r24
   15f14:	39 07       	cpc	r19, r25
   15f16:	19 f0       	breq	.+6      	; 0x15f1e <Clear_Common+0x18>
   15f18:	0f 97       	sbiw	r24, 0x0f	; 15
   15f1a:	99 f4       	brne	.+38     	; 0x15f42 <Clear_Common+0x3c>
   15f1c:	03 c0       	rjmp	.+6      	; 0x15f24 <Clear_Common+0x1e>
   15f1e:	2f 30       	cpi	r18, 0x0F	; 15
   15f20:	31 05       	cpc	r19, r1
   15f22:	09 f4       	brne	.+2      	; 0x15f26 <Clear_Common+0x20>
   15f24:	15 82       	std	Z+5, r1	; 0x05
   15f26:	16 82       	std	Z+6, r1	; 0x06
   15f28:	17 82       	std	Z+7, r1	; 0x07
   15f2a:	10 86       	std	Z+8, r1	; 0x08
   15f2c:	11 86       	std	Z+9, r1	; 0x09
   15f2e:	12 86       	std	Z+10, r1	; 0x0a
   15f30:	13 86       	std	Z+11, r1	; 0x0b
   15f32:	14 86       	std	Z+12, r1	; 0x0c
   15f34:	15 86       	std	Z+13, r1	; 0x0d
   15f36:	16 86       	std	Z+14, r1	; 0x0e
   15f38:	11 82       	std	Z+1, r1	; 0x01
   15f3a:	10 82       	st	Z, r1
   15f3c:	14 82       	std	Z+4, r1	; 0x04
   15f3e:	13 82       	std	Z+3, r1	; 0x03
   15f40:	12 82       	std	Z+2, r1	; 0x02
   15f42:	08 95       	ret

00015f44 <SS80_init>:
   15f44:	a0 e0       	ldi	r26, 0x00	; 0
   15f46:	b0 e0       	ldi	r27, 0x00	; 0
   15f48:	e8 ea       	ldi	r30, 0xA8	; 168
   15f4a:	ff ea       	ldi	r31, 0xAF	; 175
   15f4c:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
   15f50:	05 ec       	ldi	r16, 0xC5	; 197
   15f52:	1f e1       	ldi	r17, 0x1F	; 31
   15f54:	cb e0       	ldi	r28, 0x0B	; 11
   15f56:	d0 e0       	ldi	r29, 0x00	; 0
   15f58:	82 e0       	ldi	r24, 0x02	; 2
   15f5a:	f8 2e       	mov	r15, r24
   15f5c:	80 e6       	ldi	r24, 0x60	; 96
   15f5e:	97 e2       	ldi	r25, 0x27	; 39
   15f60:	6c 01       	movw	r12, r24
   15f62:	e1 2c       	mov	r14, r1
   15f64:	f8 01       	movw	r30, r16
   15f66:	80 81       	ld	r24, Z
   15f68:	83 30       	cpi	r24, 0x03	; 3
   15f6a:	39 f5       	brne	.+78     	; 0x15fba <SS80_init+0x76>
   15f6c:	ce 01       	movw	r24, r28
   15f6e:	0e 94 a6 92 	call	0x1254c	; 0x1254c <set_active_device>
   15f72:	89 2b       	or	r24, r25
   15f74:	11 f1       	breq	.+68     	; 0x15fba <SS80_init+0x76>
   15f76:	8f e0       	ldi	r24, 0x0F	; 15
   15f78:	90 e0       	ldi	r25, 0x00	; 0
   15f7a:	c5 df       	rcall	.-118    	; 0x15f06 <Clear_Common>
   15f7c:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15f80:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15f84:	f2 82       	std	Z+2, r15	; 0x02
   15f86:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15f8a:	85 ff       	sbrs	r24, 5
   15f8c:	0e c0       	rjmp	.+28     	; 0x15faa <SS80_init+0x66>
   15f8e:	f8 01       	movw	r30, r16
   15f90:	81 81       	ldd	r24, Z+1	; 0x01
   15f92:	1f 92       	push	r1
   15f94:	8f 93       	push	r24
   15f96:	1f 92       	push	r1
   15f98:	df 92       	push	r13
   15f9a:	cf 92       	push	r12
   15f9c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   15fa0:	0f 90       	pop	r0
   15fa2:	0f 90       	pop	r0
   15fa4:	0f 90       	pop	r0
   15fa6:	0f 90       	pop	r0
   15fa8:	0f 90       	pop	r0
   15faa:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15fae:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15fb2:	81 81       	ldd	r24, Z+1	; 0x01
   15fb4:	90 e0       	ldi	r25, 0x00	; 0
   15fb6:	0e 94 10 86 	call	0x10c20	; 0x10c20 <gpib_disable_PPR>
   15fba:	21 97       	sbiw	r28, 0x01	; 1
   15fbc:	0b 52       	subi	r16, 0x2B	; 43
   15fbe:	11 09       	sbc	r17, r1
   15fc0:	cf 3f       	cpi	r28, 0xFF	; 255
   15fc2:	ff ef       	ldi	r31, 0xFF	; 255
   15fc4:	df 07       	cpc	r29, r31
   15fc6:	71 f6       	brne	.-100    	; 0x15f64 <SS80_init+0x20>
   15fc8:	cd b7       	in	r28, 0x3d	; 61
   15fca:	de b7       	in	r29, 0x3e	; 62
   15fcc:	e8 e0       	ldi	r30, 0x08	; 8
   15fce:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

00015fd2 <SS80_Channel_Independent_Clear>:
   15fd2:	99 df       	rcall	.-206    	; 0x15f06 <Clear_Common>
   15fd4:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15fd8:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15fdc:	81 81       	ldd	r24, Z+1	; 0x01
   15fde:	90 e0       	ldi	r25, 0x00	; 0
   15fe0:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   15fe4:	80 e0       	ldi	r24, 0x00	; 0
   15fe6:	90 e0       	ldi	r25, 0x00	; 0
   15fe8:	08 95       	ret

00015fea <SS80_Universal_Device_Clear>:
   15fea:	8f e0       	ldi	r24, 0x0F	; 15
   15fec:	90 e0       	ldi	r25, 0x00	; 0
   15fee:	8b df       	rcall	.-234    	; 0x15f06 <Clear_Common>
   15ff0:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15ff4:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15ff8:	81 81       	ldd	r24, Z+1	; 0x01
   15ffa:	90 e0       	ldi	r25, 0x00	; 0
   15ffc:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   16000:	80 e0       	ldi	r24, 0x00	; 0
   16002:	90 e0       	ldi	r25, 0x00	; 0
   16004:	08 95       	ret

00016006 <SS80_Selected_Device_Clear>:
   16006:	cf 93       	push	r28
   16008:	df 93       	push	r29
   1600a:	ec 01       	movw	r28, r24
   1600c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16010:	85 ff       	sbrs	r24, 5
   16012:	0a c0       	rjmp	.+20     	; 0x16028 <SS80_Selected_Device_Clear+0x22>
   16014:	89 e8       	ldi	r24, 0x89	; 137
   16016:	90 e2       	ldi	r25, 0x20	; 32
   16018:	1f 92       	push	r1
   1601a:	9f 93       	push	r25
   1601c:	8f 93       	push	r24
   1601e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16022:	0f 90       	pop	r0
   16024:	0f 90       	pop	r0
   16026:	0f 90       	pop	r0
   16028:	ce 01       	movw	r24, r28
   1602a:	6d df       	rcall	.-294    	; 0x15f06 <Clear_Common>
   1602c:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   16030:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   16034:	81 81       	ldd	r24, Z+1	; 0x01
   16036:	90 e0       	ldi	r25, 0x00	; 0
   16038:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   1603c:	80 e0       	ldi	r24, 0x00	; 0
   1603e:	90 e0       	ldi	r25, 0x00	; 0
   16040:	df 91       	pop	r29
   16042:	cf 91       	pop	r28
   16044:	08 95       	ret

00016046 <SS80_Amigo_Clear>:
   16046:	a3 e0       	ldi	r26, 0x03	; 3
   16048:	b0 e0       	ldi	r27, 0x00	; 0
   1604a:	e9 e2       	ldi	r30, 0x29	; 41
   1604c:	f0 eb       	ldi	r31, 0xB0	; 176
   1604e:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
   16052:	1a 82       	std	Y+2, r1	; 0x02
   16054:	19 82       	std	Y+1, r1	; 0x01
   16056:	ae 01       	movw	r20, r28
   16058:	4f 5f       	subi	r20, 0xFF	; 255
   1605a:	5f 4f       	sbci	r21, 0xFF	; 255
   1605c:	61 e0       	ldi	r22, 0x01	; 1
   1605e:	70 e0       	ldi	r23, 0x00	; 0
   16060:	ce 01       	movw	r24, r28
   16062:	03 96       	adiw	r24, 0x03	; 3
   16064:	0e 94 81 8a 	call	0x11502	; 0x11502 <gpib_read_str>
   16068:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1606c:	01 97       	sbiw	r24, 0x01	; 1
   1606e:	89 f0       	breq	.+34     	; 0x16092 <SS80_Amigo_Clear+0x4c>
   16070:	20 ff       	sbrs	r18, 0
   16072:	0a c0       	rjmp	.+20     	; 0x16088 <SS80_Amigo_Clear+0x42>
   16074:	86 e7       	ldi	r24, 0x76	; 118
   16076:	90 e2       	ldi	r25, 0x20	; 32
   16078:	1f 92       	push	r1
   1607a:	9f 93       	push	r25
   1607c:	8f 93       	push	r24
   1607e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16082:	0f 90       	pop	r0
   16084:	0f 90       	pop	r0
   16086:	0f 90       	pop	r0
   16088:	89 81       	ldd	r24, Y+1	; 0x01
   1608a:	9a 81       	ldd	r25, Y+2	; 0x02
   1608c:	88 27       	eor	r24, r24
   1608e:	90 7d       	andi	r25, 0xD0	; 208
   16090:	19 c0       	rjmp	.+50     	; 0x160c4 <SS80_Amigo_Clear+0x7e>
   16092:	25 ff       	sbrs	r18, 5
   16094:	0a c0       	rjmp	.+20     	; 0x160aa <SS80_Amigo_Clear+0x64>
   16096:	87 e6       	ldi	r24, 0x67	; 103
   16098:	90 e2       	ldi	r25, 0x20	; 32
   1609a:	1f 92       	push	r1
   1609c:	9f 93       	push	r25
   1609e:	8f 93       	push	r24
   160a0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   160a4:	0f 90       	pop	r0
   160a6:	0f 90       	pop	r0
   160a8:	0f 90       	pop	r0
   160aa:	8f e0       	ldi	r24, 0x0F	; 15
   160ac:	90 e0       	ldi	r25, 0x00	; 0
   160ae:	2b df       	rcall	.-426    	; 0x15f06 <Clear_Common>
   160b0:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   160b4:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   160b8:	81 81       	ldd	r24, Z+1	; 0x01
   160ba:	90 e0       	ldi	r25, 0x00	; 0
   160bc:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   160c0:	80 e0       	ldi	r24, 0x00	; 0
   160c2:	90 e0       	ldi	r25, 0x00	; 0
   160c4:	23 96       	adiw	r28, 0x03	; 3
   160c6:	e2 e0       	ldi	r30, 0x02	; 2
   160c8:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

000160cc <SS80_Cancel>:
   160cc:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   160d0:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   160d4:	11 82       	std	Z+1, r1	; 0x01
   160d6:	10 82       	st	Z, r1
   160d8:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   160dc:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   160e0:	81 81       	ldd	r24, Z+1	; 0x01
   160e2:	90 e0       	ldi	r25, 0x00	; 0
   160e4:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   160e8:	80 e0       	ldi	r24, 0x00	; 0
   160ea:	90 e0       	ldi	r25, 0x00	; 0
   160ec:	08 95       	ret

000160ee <SS80_Transparent_State>:
   160ee:	a2 e0       	ldi	r26, 0x02	; 2
   160f0:	b0 e0       	ldi	r27, 0x00	; 0
   160f2:	ed e7       	ldi	r30, 0x7D	; 125
   160f4:	f0 eb       	ldi	r31, 0xB0	; 176
   160f6:	0c 94 36 e5 	jmp	0x1ca6c	; 0x1ca6c <__prologue_saves__+0x10>
   160fa:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   160fe:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   16102:	81 81       	ldd	r24, Z+1	; 0x01
   16104:	90 e0       	ldi	r25, 0x00	; 0
   16106:	0e 94 10 86 	call	0x10c20	; 0x10c20 <gpib_disable_PPR>
   1610a:	80 e0       	ldi	r24, 0x00	; 0
   1610c:	91 e0       	ldi	r25, 0x01	; 1
   1610e:	9a 83       	std	Y+2, r25	; 0x02
   16110:	89 83       	std	Y+1, r24	; 0x01
   16112:	ae 01       	movw	r20, r28
   16114:	4f 5f       	subi	r20, 0xFF	; 255
   16116:	5f 4f       	sbci	r21, 0xFF	; 255
   16118:	60 e0       	ldi	r22, 0x00	; 0
   1611a:	72 e0       	ldi	r23, 0x02	; 2
   1611c:	82 ee       	ldi	r24, 0xE2	; 226
   1611e:	9b e1       	ldi	r25, 0x1B	; 27
   16120:	0e 94 81 8a 	call	0x11502	; 0x11502 <gpib_read_str>
   16124:	7c 01       	movw	r14, r24
   16126:	89 81       	ldd	r24, Y+1	; 0x01
   16128:	9a 81       	ldd	r25, Y+2	; 0x02
   1612a:	9c 01       	movw	r18, r24
   1612c:	22 27       	eor	r18, r18
   1612e:	30 7d       	andi	r19, 0xD0	; 208
   16130:	23 2b       	or	r18, r19
   16132:	79 f0       	breq	.+30     	; 0x16152 <SS80_Transparent_State+0x64>
   16134:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16138:	80 ff       	sbrs	r24, 0
   1613a:	e0 c0       	rjmp	.+448    	; 0x162fc <SS80_Transparent_State+0x20e>
   1613c:	86 e0       	ldi	r24, 0x06	; 6
   1613e:	92 e2       	ldi	r25, 0x22	; 34
   16140:	1f 92       	push	r1
   16142:	9f 93       	push	r25
   16144:	8f 93       	push	r24
   16146:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1614a:	0f 90       	pop	r0
   1614c:	0f 90       	pop	r0
   1614e:	0f 90       	pop	r0
   16150:	d5 c0       	rjmp	.+426    	; 0x162fc <SS80_Transparent_State+0x20e>
   16152:	e1 14       	cp	r14, r1
   16154:	f1 04       	cpc	r15, r1
   16156:	09 f4       	brne	.+2      	; 0x1615a <SS80_Transparent_State+0x6c>
   16158:	d6 c0       	rjmp	.+428    	; 0x16306 <SS80_Transparent_State+0x218>
   1615a:	90 fd       	sbrc	r25, 0
   1615c:	0e c0       	rjmp	.+28     	; 0x1617a <SS80_Transparent_State+0x8c>
   1615e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16162:	80 ff       	sbrs	r24, 0
   16164:	0a c0       	rjmp	.+20     	; 0x1617a <SS80_Transparent_State+0x8c>
   16166:	8d ee       	ldi	r24, 0xED	; 237
   16168:	91 e2       	ldi	r25, 0x21	; 33
   1616a:	1f 92       	push	r1
   1616c:	9f 93       	push	r25
   1616e:	8f 93       	push	r24
   16170:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16174:	0f 90       	pop	r0
   16176:	0f 90       	pop	r0
   16178:	0f 90       	pop	r0
   1617a:	82 ee       	ldi	r24, 0xE2	; 226
   1617c:	a8 2e       	mov	r10, r24
   1617e:	8b e1       	ldi	r24, 0x1B	; 27
   16180:	b8 2e       	mov	r11, r24
   16182:	00 e0       	ldi	r16, 0x00	; 0
   16184:	10 e0       	ldi	r17, 0x00	; 0
   16186:	0e 15       	cp	r16, r14
   16188:	1f 05       	cpc	r17, r15
   1618a:	0c f0       	brlt	.+2      	; 0x1618e <SS80_Transparent_State+0xa0>
   1618c:	a0 c0       	rjmp	.+320    	; 0x162ce <SS80_Transparent_State+0x1e0>
   1618e:	68 01       	movw	r12, r16
   16190:	8f ef       	ldi	r24, 0xFF	; 255
   16192:	c8 1a       	sub	r12, r24
   16194:	d8 0a       	sbc	r13, r24
   16196:	f5 01       	movw	r30, r10
   16198:	81 91       	ld	r24, Z+
   1619a:	5f 01       	movw	r10, r30
   1619c:	28 2f       	mov	r18, r24
   1619e:	30 e0       	ldi	r19, 0x00	; 0
   161a0:	a9 01       	movw	r20, r18
   161a2:	40 52       	subi	r20, 0x20	; 32
   161a4:	51 09       	sbc	r21, r1
   161a6:	40 31       	cpi	r20, 0x10	; 16
   161a8:	51 05       	cpc	r21, r1
   161aa:	20 f4       	brcc	.+8      	; 0x161b4 <SS80_Transparent_State+0xc6>
   161ac:	80 52       	subi	r24, 0x20	; 32
   161ae:	8b d9       	rcall	.-3306   	; 0x154c6 <SS80_Check_Unit>
   161b0:	86 01       	movw	r16, r12
   161b2:	e9 cf       	rjmp	.-46     	; 0x16186 <SS80_Transparent_State+0x98>
   161b4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   161b8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   161bc:	21 30       	cpi	r18, 0x01	; 1
   161be:	31 05       	cpc	r19, r1
   161c0:	c9 f4       	brne	.+50     	; 0x161f4 <SS80_Transparent_State+0x106>
   161c2:	0e 5f       	subi	r16, 0xFE	; 254
   161c4:	1f 4f       	sbci	r17, 0xFF	; 255
   161c6:	80 73       	andi	r24, 0x30	; 48
   161c8:	99 27       	eor	r25, r25
   161ca:	89 2b       	or	r24, r25
   161cc:	51 f0       	breq	.+20     	; 0x161e2 <SS80_Transparent_State+0xf4>
   161ce:	88 ec       	ldi	r24, 0xC8	; 200
   161d0:	91 e2       	ldi	r25, 0x21	; 33
   161d2:	1f 92       	push	r1
   161d4:	9f 93       	push	r25
   161d6:	8f 93       	push	r24
   161d8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   161dc:	0f 90       	pop	r0
   161de:	0f 90       	pop	r0
   161e0:	0f 90       	pop	r0
   161e2:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   161e6:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   161ea:	81 81       	ldd	r24, Z+1	; 0x01
   161ec:	90 e0       	ldi	r25, 0x00	; 0
   161ee:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   161f2:	6d c0       	rjmp	.+218    	; 0x162ce <SS80_Transparent_State+0x1e0>
   161f4:	22 30       	cpi	r18, 0x02	; 2
   161f6:	31 05       	cpc	r19, r1
   161f8:	51 f4       	brne	.+20     	; 0x1620e <SS80_Transparent_State+0x120>
   161fa:	0b 5f       	subi	r16, 0xFB	; 251
   161fc:	1f 4f       	sbci	r17, 0xFF	; 255
   161fe:	80 73       	andi	r24, 0x30	; 48
   16200:	99 27       	eor	r25, r25
   16202:	89 2b       	or	r24, r25
   16204:	09 f4       	brne	.+2      	; 0x16208 <SS80_Transparent_State+0x11a>
   16206:	63 c0       	rjmp	.+198    	; 0x162ce <SS80_Transparent_State+0x1e0>
   16208:	8b ea       	ldi	r24, 0xAB	; 171
   1620a:	91 e2       	ldi	r25, 0x21	; 33
   1620c:	0c c0       	rjmp	.+24     	; 0x16226 <SS80_Transparent_State+0x138>
   1620e:	23 30       	cpi	r18, 0x03	; 3
   16210:	31 05       	cpc	r19, r1
   16212:	91 f4       	brne	.+36     	; 0x16238 <SS80_Transparent_State+0x14a>
   16214:	0b 5f       	subi	r16, 0xFB	; 251
   16216:	1f 4f       	sbci	r17, 0xFF	; 255
   16218:	80 73       	andi	r24, 0x30	; 48
   1621a:	99 27       	eor	r25, r25
   1621c:	89 2b       	or	r24, r25
   1621e:	09 f4       	brne	.+2      	; 0x16222 <SS80_Transparent_State+0x134>
   16220:	56 c0       	rjmp	.+172    	; 0x162ce <SS80_Transparent_State+0x1e0>
   16222:	8d e8       	ldi	r24, 0x8D	; 141
   16224:	91 e2       	ldi	r25, 0x21	; 33
   16226:	1f 92       	push	r1
   16228:	9f 93       	push	r25
   1622a:	8f 93       	push	r24
   1622c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16230:	0f 90       	pop	r0
   16232:	0f 90       	pop	r0
   16234:	0f 90       	pop	r0
   16236:	4b c0       	rjmp	.+150    	; 0x162ce <SS80_Transparent_State+0x1e0>
   16238:	28 30       	cpi	r18, 0x08	; 8
   1623a:	31 05       	cpc	r19, r1
   1623c:	e9 f4       	brne	.+58     	; 0x16278 <SS80_Transparent_State+0x18a>
   1623e:	85 ff       	sbrs	r24, 5
   16240:	13 c0       	rjmp	.+38     	; 0x16268 <SS80_Transparent_State+0x17a>
   16242:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   16246:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   1624a:	85 81       	ldd	r24, Z+5	; 0x05
   1624c:	1f 92       	push	r1
   1624e:	8f 93       	push	r24
   16250:	86 e6       	ldi	r24, 0x66	; 102
   16252:	91 e2       	ldi	r25, 0x21	; 33
   16254:	1f 92       	push	r1
   16256:	9f 93       	push	r25
   16258:	8f 93       	push	r24
   1625a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1625e:	0f 90       	pop	r0
   16260:	0f 90       	pop	r0
   16262:	0f 90       	pop	r0
   16264:	0f 90       	pop	r0
   16266:	0f 90       	pop	r0
   16268:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   1626c:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   16270:	85 81       	ldd	r24, Z+5	; 0x05
   16272:	90 e0       	ldi	r25, 0x00	; 0
   16274:	ae de       	rcall	.-676    	; 0x15fd2 <SS80_Channel_Independent_Clear>
   16276:	49 c0       	rjmp	.+146    	; 0x1630a <SS80_Transparent_State+0x21c>
   16278:	29 30       	cpi	r18, 0x09	; 9
   1627a:	31 05       	cpc	r19, r1
   1627c:	b9 f4       	brne	.+46     	; 0x162ac <SS80_Transparent_State+0x1be>
   1627e:	85 ff       	sbrs	r24, 5
   16280:	13 c0       	rjmp	.+38     	; 0x162a8 <SS80_Transparent_State+0x1ba>
   16282:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   16286:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   1628a:	85 81       	ldd	r24, Z+5	; 0x05
   1628c:	1f 92       	push	r1
   1628e:	8f 93       	push	r24
   16290:	82 e5       	ldi	r24, 0x52	; 82
   16292:	91 e2       	ldi	r25, 0x21	; 33
   16294:	1f 92       	push	r1
   16296:	9f 93       	push	r25
   16298:	8f 93       	push	r24
   1629a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1629e:	0f 90       	pop	r0
   162a0:	0f 90       	pop	r0
   162a2:	0f 90       	pop	r0
   162a4:	0f 90       	pop	r0
   162a6:	0f 90       	pop	r0
   162a8:	11 df       	rcall	.-478    	; 0x160cc <SS80_Cancel>
   162aa:	2f c0       	rjmp	.+94     	; 0x1630a <SS80_Transparent_State+0x21c>
   162ac:	80 ff       	sbrs	r24, 0
   162ae:	26 c0       	rjmp	.+76     	; 0x162fc <SS80_Transparent_State+0x20e>
   162b0:	3f 93       	push	r19
   162b2:	2f 93       	push	r18
   162b4:	82 e3       	ldi	r24, 0x32	; 50
   162b6:	91 e2       	ldi	r25, 0x21	; 33
   162b8:	1f 92       	push	r1
   162ba:	9f 93       	push	r25
   162bc:	8f 93       	push	r24
   162be:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   162c2:	0f 90       	pop	r0
   162c4:	0f 90       	pop	r0
   162c6:	0f 90       	pop	r0
   162c8:	0f 90       	pop	r0
   162ca:	0f 90       	pop	r0
   162cc:	86 01       	movw	r16, r12
   162ce:	0e 15       	cp	r16, r14
   162d0:	1f 05       	cpc	r17, r15
   162d2:	a1 f0       	breq	.+40     	; 0x162fc <SS80_Transparent_State+0x20e>
   162d4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   162d8:	80 ff       	sbrs	r24, 0
   162da:	10 c0       	rjmp	.+32     	; 0x162fc <SS80_Transparent_State+0x20e>
   162dc:	ff 92       	push	r15
   162de:	ef 92       	push	r14
   162e0:	1f 93       	push	r17
   162e2:	0f 93       	push	r16
   162e4:	86 ef       	ldi	r24, 0xF6	; 246
   162e6:	90 e2       	ldi	r25, 0x20	; 32
   162e8:	1f 92       	push	r1
   162ea:	9f 93       	push	r25
   162ec:	8f 93       	push	r24
   162ee:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   162f2:	0f b6       	in	r0, 0x3f	; 63
   162f4:	f8 94       	cli
   162f6:	de bf       	out	0x3e, r29	; 62
   162f8:	0f be       	out	0x3f, r0	; 63
   162fa:	cd bf       	out	0x3d, r28	; 61
   162fc:	89 81       	ldd	r24, Y+1	; 0x01
   162fe:	9a 81       	ldd	r25, Y+2	; 0x02
   16300:	88 27       	eor	r24, r24
   16302:	90 7d       	andi	r25, 0xD0	; 208
   16304:	02 c0       	rjmp	.+4      	; 0x1630a <SS80_Transparent_State+0x21c>
   16306:	80 e0       	ldi	r24, 0x00	; 0
   16308:	90 e0       	ldi	r25, 0x00	; 0
   1630a:	22 96       	adiw	r28, 0x02	; 2
   1630c:	ea e0       	ldi	r30, 0x0A	; 10
   1630e:	0c 94 52 e5 	jmp	0x1caa4	; 0x1caa4 <__epilogue_restores__+0x10>

00016312 <SS80_error_return>:
   16312:	a3 e0       	ldi	r26, 0x03	; 3
   16314:	b0 e0       	ldi	r27, 0x00	; 0
   16316:	ef e8       	ldi	r30, 0x8F	; 143
   16318:	f1 eb       	ldi	r31, 0xB1	; 177
   1631a:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
   1631e:	80 e0       	ldi	r24, 0x00	; 0
   16320:	91 e0       	ldi	r25, 0x01	; 1
   16322:	9a 83       	std	Y+2, r25	; 0x02
   16324:	89 83       	std	Y+1, r24	; 0x01
   16326:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   1632a:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   1632e:	81 e0       	ldi	r24, 0x01	; 1
   16330:	82 83       	std	Z+2, r24	; 0x02
   16332:	8b 83       	std	Y+3, r24	; 0x03
   16334:	ae 01       	movw	r20, r28
   16336:	4f 5f       	subi	r20, 0xFF	; 255
   16338:	5f 4f       	sbci	r21, 0xFF	; 255
   1633a:	61 e0       	ldi	r22, 0x01	; 1
   1633c:	70 e0       	ldi	r23, 0x00	; 0
   1633e:	ce 01       	movw	r24, r28
   16340:	03 96       	adiw	r24, 0x03	; 3
   16342:	0e 94 2f 8b 	call	0x1165e	; 0x1165e <gpib_write_str>
   16346:	01 97       	sbiw	r24, 0x01	; 1
   16348:	99 f0       	breq	.+38     	; 0x16370 <SS80_error_return+0x5e>
   1634a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1634e:	80 ff       	sbrs	r24, 0
   16350:	0a c0       	rjmp	.+20     	; 0x16366 <SS80_error_return+0x54>
   16352:	88 e2       	ldi	r24, 0x28	; 40
   16354:	90 e2       	ldi	r25, 0x20	; 32
   16356:	1f 92       	push	r1
   16358:	9f 93       	push	r25
   1635a:	8f 93       	push	r24
   1635c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16360:	0f 90       	pop	r0
   16362:	0f 90       	pop	r0
   16364:	0f 90       	pop	r0
   16366:	89 81       	ldd	r24, Y+1	; 0x01
   16368:	9a 81       	ldd	r25, Y+2	; 0x02
   1636a:	88 27       	eor	r24, r24
   1636c:	90 7d       	andi	r25, 0xD0	; 208
   1636e:	07 c0       	rjmp	.+14     	; 0x1637e <SS80_error_return+0x6c>
   16370:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   16374:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   16378:	12 82       	std	Z+2, r1	; 0x02
   1637a:	80 e0       	ldi	r24, 0x00	; 0
   1637c:	90 e0       	ldi	r25, 0x00	; 0
   1637e:	23 96       	adiw	r28, 0x03	; 3
   16380:	e2 e0       	ldi	r30, 0x02	; 2
   16382:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

00016386 <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   16386:	ac e0       	ldi	r26, 0x0C	; 12
   16388:	b0 e0       	ldi	r27, 0x00	; 0
   1638a:	e9 ec       	ldi	r30, 0xC9	; 201
   1638c:	f1 eb       	ldi	r31, 0xB1	; 177
   1638e:	0c 94 2f e5 	jmp	0x1ca5e	; 0x1ca5e <__prologue_saves__+0x2>
   16392:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   16396:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   1639a:	27 81       	ldd	r18, Z+7	; 0x07
   1639c:	30 85       	ldd	r19, Z+8	; 0x08
   1639e:	41 85       	ldd	r20, Z+9	; 0x09
   163a0:	52 85       	ldd	r21, Z+10	; 0x0a
   163a2:	a0 91 67 18 	lds	r26, 0x1867	; 0x801867 <SS80p>
   163a6:	b0 91 68 18 	lds	r27, 0x1868	; 0x801868 <SS80p+0x1>
   163aa:	9f 96       	adiw	r26, 0x2f	; 47
   163ac:	0d 90       	ld	r0, X+
   163ae:	bc 91       	ld	r27, X
   163b0:	a0 2d       	mov	r26, r0
   163b2:	12 82       	std	Z+2, r1	; 0x02
   163b4:	1a 82       	std	Y+2, r1	; 0x02
   163b6:	19 82       	std	Y+1, r1	; 0x01
   163b8:	54 98       	cbi	0x0a, 4	; 10
   163ba:	4c 99       	sbic	0x09, 4	; 9
   163bc:	03 c0       	rjmp	.+6      	; 0x163c4 <SS80_locate_and_read+0x3e>
   163be:	80 e0       	ldi	r24, 0x00	; 0
   163c0:	90 e1       	ldi	r25, 0x10	; 16
   163c2:	45 c1       	rjmp	.+650    	; 0x1664e <SS80_locate_and_read+0x2c8>
   163c4:	0e 94 0e e5 	call	0x1ca1c	; 0x1ca1c <__muluhisi3>
   163c8:	4b 01       	movw	r8, r22
   163ca:	5c 01       	movw	r10, r24
   163cc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   163d0:	85 ff       	sbrs	r24, 5
   163d2:	1c c0       	rjmp	.+56     	; 0x1640c <SS80_locate_and_read+0x86>
   163d4:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   163d8:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   163dc:	86 85       	ldd	r24, Z+14	; 0x0e
   163de:	8f 93       	push	r24
   163e0:	85 85       	ldd	r24, Z+13	; 0x0d
   163e2:	8f 93       	push	r24
   163e4:	84 85       	ldd	r24, Z+12	; 0x0c
   163e6:	8f 93       	push	r24
   163e8:	83 85       	ldd	r24, Z+11	; 0x0b
   163ea:	8f 93       	push	r24
   163ec:	bf 92       	push	r11
   163ee:	af 92       	push	r10
   163f0:	9f 92       	push	r9
   163f2:	8f 92       	push	r8
   163f4:	8c e1       	ldi	r24, 0x1C	; 28
   163f6:	97 e2       	ldi	r25, 0x27	; 39
   163f8:	1f 92       	push	r1
   163fa:	9f 93       	push	r25
   163fc:	8f 93       	push	r24
   163fe:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16402:	0f b6       	in	r0, 0x3f	; 63
   16404:	f8 94       	cli
   16406:	de bf       	out	0x3e, r29	; 62
   16408:	0f be       	out	0x3f, r0	; 63
   1640a:	cd bf       	out	0x3d, r28	; 61
   1640c:	16 db       	rcall	.-2516   	; 0x15a3a <SS80_cmd_seek>
   1640e:	89 2b       	or	r24, r25
   16410:	09 f0       	breq	.+2      	; 0x16414 <SS80_locate_and_read+0x8e>
   16412:	af c0       	rjmp	.+350    	; 0x16572 <SS80_locate_and_read+0x1ec>
   16414:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   16418:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   1641c:	43 84       	ldd	r4, Z+11	; 0x0b
   1641e:	54 84       	ldd	r5, Z+12	; 0x0c
   16420:	65 84       	ldd	r6, Z+13	; 0x0d
   16422:	76 84       	ldd	r7, Z+14	; 0x0e
   16424:	1b 82       	std	Y+3, r1	; 0x03
   16426:	1c 82       	std	Y+4, r1	; 0x04
   16428:	1d 82       	std	Y+5, r1	; 0x05
   1642a:	1e 82       	std	Y+6, r1	; 0x06
   1642c:	8e ef       	ldi	r24, 0xFE	; 254
   1642e:	96 e2       	ldi	r25, 0x26	; 38
   16430:	9c 01       	movw	r18, r24
   16432:	40 e0       	ldi	r20, 0x00	; 0
   16434:	2f 83       	std	Y+7, r18	; 0x07
   16436:	38 87       	std	Y+8, r19	; 0x08
   16438:	49 87       	std	Y+9, r20	; 0x09
   1643a:	33 24       	eor	r3, r3
   1643c:	33 94       	inc	r3
   1643e:	8d ec       	ldi	r24, 0xCD	; 205
   16440:	96 e2       	ldi	r25, 0x26	; 38
   16442:	9c 01       	movw	r18, r24
   16444:	40 e0       	ldi	r20, 0x00	; 0
   16446:	2a 87       	std	Y+10, r18	; 0x0a
   16448:	3b 87       	std	Y+11, r19	; 0x0b
   1644a:	4c 87       	std	Y+12, r20	; 0x0c
   1644c:	34 c0       	rjmp	.+104    	; 0x164b6 <SS80_locate_and_read+0x130>
   1644e:	86 fd       	sbrc	r24, 6
   16450:	0e 94 27 85 	call	0x10a4e	; 0x10a4e <gpib_timer_elapsed_begin>
   16454:	ae 01       	movw	r20, r28
   16456:	4f 5f       	subi	r20, 0xFF	; 255
   16458:	5f 4f       	sbci	r21, 0xFF	; 255
   1645a:	b6 01       	movw	r22, r12
   1645c:	82 ee       	ldi	r24, 0xE2	; 226
   1645e:	9b e1       	ldi	r25, 0x1B	; 27
   16460:	0e 94 2f 8b 	call	0x1165e	; 0x1165e <gpib_write_str>
   16464:	8c 01       	movw	r16, r24
   16466:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1646a:	86 ff       	sbrs	r24, 6
   1646c:	04 c0       	rjmp	.+8      	; 0x16476 <SS80_locate_and_read+0xf0>
   1646e:	8f ef       	ldi	r24, 0xFF	; 255
   16470:	9f e0       	ldi	r25, 0x0F	; 15
   16472:	0e 94 39 85 	call	0x10a72	; 0x10a72 <gpib_timer_elapsed_end>
   16476:	c0 16       	cp	r12, r16
   16478:	d1 06       	cpc	r13, r17
   1647a:	09 f0       	breq	.+2      	; 0x1647e <SS80_locate_and_read+0xf8>
   1647c:	83 c0       	rjmp	.+262    	; 0x16584 <SS80_locate_and_read+0x1fe>
   1647e:	0d 2c       	mov	r0, r13
   16480:	00 0c       	add	r0, r0
   16482:	ee 08       	sbc	r14, r14
   16484:	ff 08       	sbc	r15, r15
   16486:	8c 0c       	add	r8, r12
   16488:	9d 1c       	adc	r9, r13
   1648a:	ae 1c       	adc	r10, r14
   1648c:	bf 1c       	adc	r11, r15
   1648e:	01 2e       	mov	r0, r17
   16490:	00 0c       	add	r0, r0
   16492:	22 0b       	sbc	r18, r18
   16494:	33 0b       	sbc	r19, r19
   16496:	8b 81       	ldd	r24, Y+3	; 0x03
   16498:	9c 81       	ldd	r25, Y+4	; 0x04
   1649a:	ad 81       	ldd	r26, Y+5	; 0x05
   1649c:	be 81       	ldd	r27, Y+6	; 0x06
   1649e:	80 0f       	add	r24, r16
   164a0:	91 1f       	adc	r25, r17
   164a2:	a2 1f       	adc	r26, r18
   164a4:	b3 1f       	adc	r27, r19
   164a6:	8b 83       	std	Y+3, r24	; 0x03
   164a8:	9c 83       	std	Y+4, r25	; 0x04
   164aa:	ad 83       	std	Y+5, r26	; 0x05
   164ac:	be 83       	std	Y+6, r27	; 0x06
   164ae:	40 1a       	sub	r4, r16
   164b0:	51 0a       	sbc	r5, r17
   164b2:	62 0a       	sbc	r6, r18
   164b4:	73 0a       	sbc	r7, r19
   164b6:	41 14       	cp	r4, r1
   164b8:	51 04       	cpc	r5, r1
   164ba:	61 04       	cpc	r6, r1
   164bc:	71 04       	cpc	r7, r1
   164be:	09 f4       	brne	.+2      	; 0x164c2 <SS80_locate_and_read+0x13c>
   164c0:	93 c0       	rjmp	.+294    	; 0x165e8 <SS80_locate_and_read+0x262>
   164c2:	54 98       	cbi	0x0a, 4	; 10
   164c4:	4c 9b       	sbis	0x09, 4	; 9
   164c6:	7b cf       	rjmp	.-266    	; 0x163be <SS80_locate_and_read+0x38>
   164c8:	31 e0       	ldi	r19, 0x01	; 1
   164ca:	43 16       	cp	r4, r19
   164cc:	53 06       	cpc	r5, r19
   164ce:	61 04       	cpc	r6, r1
   164d0:	71 04       	cpc	r7, r1
   164d2:	08 f4       	brcc	.+2      	; 0x164d6 <SS80_locate_and_read+0x150>
   164d4:	50 c0       	rjmp	.+160    	; 0x16576 <SS80_locate_and_read+0x1f0>
   164d6:	1a 82       	std	Y+2, r1	; 0x02
   164d8:	19 82       	std	Y+1, r1	; 0x01
   164da:	c1 2c       	mov	r12, r1
   164dc:	dd 24       	eor	r13, r13
   164de:	d3 94       	inc	r13
   164e0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   164e4:	86 fd       	sbrc	r24, 6
   164e6:	0e 94 27 85 	call	0x10a4e	; 0x10a4e <gpib_timer_elapsed_begin>
   164ea:	e0 90 65 18 	lds	r14, 0x1865	; 0x801865 <SS80s>
   164ee:	f0 90 66 18 	lds	r15, 0x1866	; 0x801866 <SS80s+0x1>
   164f2:	43 e0       	ldi	r20, 0x03	; 3
   164f4:	e4 0e       	add	r14, r20
   164f6:	f1 1c       	adc	r15, r1
   164f8:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <SS80p>
   164fc:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <SS80p+0x1>
   16500:	86 01       	movw	r16, r12
   16502:	22 ee       	ldi	r18, 0xE2	; 226
   16504:	3b e1       	ldi	r19, 0x1B	; 27
   16506:	b5 01       	movw	r22, r10
   16508:	a4 01       	movw	r20, r8
   1650a:	02 96       	adiw	r24, 0x02	; 2
   1650c:	0e 94 79 84 	call	0x108f2	; 0x108f2 <dbf_open_read>
   16510:	8c 01       	movw	r16, r24
   16512:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16516:	86 ff       	sbrs	r24, 6
   16518:	04 c0       	rjmp	.+8      	; 0x16522 <SS80_locate_and_read+0x19c>
   1651a:	85 ef       	ldi	r24, 0xF5	; 245
   1651c:	9f e0       	ldi	r25, 0x0F	; 15
   1651e:	0e 94 39 85 	call	0x10a72	; 0x10a72 <gpib_timer_elapsed_end>
   16522:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16526:	85 ff       	sbrs	r24, 5
   16528:	0e c0       	rjmp	.+28     	; 0x16546 <SS80_locate_and_read+0x1c0>
   1652a:	1f 93       	push	r17
   1652c:	0f 93       	push	r16
   1652e:	1f 92       	push	r1
   16530:	88 85       	ldd	r24, Y+8	; 0x08
   16532:	8f 93       	push	r24
   16534:	9f 81       	ldd	r25, Y+7	; 0x07
   16536:	9f 93       	push	r25
   16538:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1653c:	0f 90       	pop	r0
   1653e:	0f 90       	pop	r0
   16540:	0f 90       	pop	r0
   16542:	0f 90       	pop	r0
   16544:	0f 90       	pop	r0
   16546:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1654a:	17 ff       	sbrs	r17, 7
   1654c:	80 cf       	rjmp	.-256    	; 0x1644e <SS80_locate_and_read+0xc8>
   1654e:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   16552:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   16556:	91 e0       	ldi	r25, 0x01	; 1
   16558:	92 83       	std	Z+2, r25	; 0x02
   1655a:	80 ff       	sbrs	r24, 0
   1655c:	0a c0       	rjmp	.+20     	; 0x16572 <SS80_locate_and_read+0x1ec>
   1655e:	86 ee       	ldi	r24, 0xE6	; 230
   16560:	96 e2       	ldi	r25, 0x26	; 38
   16562:	1f 92       	push	r1
   16564:	9f 93       	push	r25
   16566:	8f 93       	push	r24
   16568:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1656c:	0f 90       	pop	r0
   1656e:	0f 90       	pop	r0
   16570:	0f 90       	pop	r0
   16572:	cf de       	rcall	.-610    	; 0x16312 <SS80_error_return>
   16574:	6c c0       	rjmp	.+216    	; 0x1664e <SS80_locate_and_read+0x2c8>
   16576:	62 01       	movw	r12, r4
   16578:	89 81       	ldd	r24, Y+1	; 0x01
   1657a:	9a 81       	ldd	r25, Y+2	; 0x02
   1657c:	91 60       	ori	r25, 0x01	; 1
   1657e:	9a 83       	std	Y+2, r25	; 0x02
   16580:	89 83       	std	Y+1, r24	; 0x01
   16582:	ae cf       	rjmp	.-164    	; 0x164e0 <SS80_locate_and_read+0x15a>
   16584:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   16588:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   1658c:	32 82       	std	Z+2, r3	; 0x02
   1658e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16592:	80 ff       	sbrs	r24, 0
   16594:	0a c0       	rjmp	.+20     	; 0x165aa <SS80_locate_and_read+0x224>
   16596:	1f 92       	push	r1
   16598:	ab 85       	ldd	r26, Y+11	; 0x0b
   1659a:	af 93       	push	r26
   1659c:	ba 85       	ldd	r27, Y+10	; 0x0a
   1659e:	bf 93       	push	r27
   165a0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   165a4:	0f 90       	pop	r0
   165a6:	0f 90       	pop	r0
   165a8:	0f 90       	pop	r0
   165aa:	89 81       	ldd	r24, Y+1	; 0x01
   165ac:	9a 81       	ldd	r25, Y+2	; 0x02
   165ae:	88 27       	eor	r24, r24
   165b0:	90 7d       	andi	r25, 0xD0	; 208
   165b2:	89 2b       	or	r24, r25
   165b4:	09 f4       	brne	.+2      	; 0x165b8 <SS80_locate_and_read+0x232>
   165b6:	63 cf       	rjmp	.-314    	; 0x1647e <SS80_locate_and_read+0xf8>
   165b8:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   165bc:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   165c0:	83 81       	ldd	r24, Z+3	; 0x03
   165c2:	94 81       	ldd	r25, Z+4	; 0x04
   165c4:	80 62       	ori	r24, 0x20	; 32
   165c6:	94 83       	std	Z+4, r25	; 0x04
   165c8:	83 83       	std	Z+3, r24	; 0x03
   165ca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   165ce:	80 ff       	sbrs	r24, 0
   165d0:	23 c0       	rjmp	.+70     	; 0x16618 <SS80_locate_and_read+0x292>
   165d2:	88 ea       	ldi	r24, 0xA8	; 168
   165d4:	96 e2       	ldi	r25, 0x26	; 38
   165d6:	1f 92       	push	r1
   165d8:	9f 93       	push	r25
   165da:	8f 93       	push	r24
   165dc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   165e0:	0f 90       	pop	r0
   165e2:	0f 90       	pop	r0
   165e4:	0f 90       	pop	r0
   165e6:	18 c0       	rjmp	.+48     	; 0x16618 <SS80_locate_and_read+0x292>
   165e8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   165ec:	85 ff       	sbrs	r24, 5
   165ee:	14 c0       	rjmp	.+40     	; 0x16618 <SS80_locate_and_read+0x292>
   165f0:	9e 81       	ldd	r25, Y+6	; 0x06
   165f2:	9f 93       	push	r25
   165f4:	ad 81       	ldd	r26, Y+5	; 0x05
   165f6:	af 93       	push	r26
   165f8:	bc 81       	ldd	r27, Y+4	; 0x04
   165fa:	bf 93       	push	r27
   165fc:	eb 81       	ldd	r30, Y+3	; 0x03
   165fe:	ef 93       	push	r30
   16600:	80 e8       	ldi	r24, 0x80	; 128
   16602:	96 e2       	ldi	r25, 0x26	; 38
   16604:	1f 92       	push	r1
   16606:	9f 93       	push	r25
   16608:	8f 93       	push	r24
   1660a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1660e:	0f b6       	in	r0, 0x3f	; 63
   16610:	f8 94       	cli
   16612:	de bf       	out	0x3e, r29	; 62
   16614:	0f be       	out	0x3f, r0	; 63
   16616:	cd bf       	out	0x3d, r28	; 61
   16618:	00 91 65 18 	lds	r16, 0x1865	; 0x801865 <SS80s>
   1661c:	10 91 66 18 	lds	r17, 0x1866	; 0x801866 <SS80s+0x1>
   16620:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   16624:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   16628:	27 a5       	ldd	r18, Z+47	; 0x2f
   1662a:	30 a9       	ldd	r19, Z+48	; 0x30
   1662c:	40 e0       	ldi	r20, 0x00	; 0
   1662e:	50 e0       	ldi	r21, 0x00	; 0
   16630:	c5 01       	movw	r24, r10
   16632:	b4 01       	movw	r22, r8
   16634:	0e 94 ac e4 	call	0x1c958	; 0x1c958 <__udivmodsi4>
   16638:	d8 01       	movw	r26, r16
   1663a:	17 96       	adiw	r26, 0x07	; 7
   1663c:	2d 93       	st	X+, r18
   1663e:	3d 93       	st	X+, r19
   16640:	4d 93       	st	X+, r20
   16642:	5c 93       	st	X, r21
   16644:	1a 97       	sbiw	r26, 0x0a	; 10
   16646:	89 81       	ldd	r24, Y+1	; 0x01
   16648:	9a 81       	ldd	r25, Y+2	; 0x02
   1664a:	88 27       	eor	r24, r24
   1664c:	90 7d       	andi	r25, 0xD0	; 208
   1664e:	2c 96       	adiw	r28, 0x0c	; 12
   16650:	e1 e1       	ldi	r30, 0x11	; 17
   16652:	0c 94 4b e5 	jmp	0x1ca96	; 0x1ca96 <__epilogue_restores__+0x2>

00016656 <SS80_Execute_State>:
   16656:	cf 93       	push	r28
   16658:	df 93       	push	r29
   1665a:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   1665e:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   16662:	81 81       	ldd	r24, Z+1	; 0x01
   16664:	90 e0       	ldi	r25, 0x00	; 0
   16666:	0e 94 10 86 	call	0x10c20	; 0x10c20 <gpib_disable_PPR>
   1666a:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   1666e:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   16672:	80 81       	ld	r24, Z
   16674:	91 81       	ldd	r25, Z+1	; 0x01
   16676:	82 30       	cpi	r24, 0x02	; 2
   16678:	91 05       	cpc	r25, r1
   1667a:	89 f0       	breq	.+34     	; 0x1669e <SS80_Execute_State+0x48>
   1667c:	3c f4       	brge	.+14     	; 0x1668c <SS80_Execute_State+0x36>
   1667e:	00 97       	sbiw	r24, 0x00	; 0
   16680:	91 f1       	breq	.+100    	; 0x166e6 <SS80_Execute_State+0x90>
   16682:	81 30       	cpi	r24, 0x01	; 1
   16684:	91 05       	cpc	r25, r1
   16686:	b9 f4       	brne	.+46     	; 0x166b6 <SS80_Execute_State+0x60>
   16688:	7e de       	rcall	.-772    	; 0x16386 <SS80_locate_and_read>
   1668a:	0d c0       	rjmp	.+26     	; 0x166a6 <SS80_Execute_State+0x50>
   1668c:	83 30       	cpi	r24, 0x03	; 3
   1668e:	91 05       	cpc	r25, r1
   16690:	41 f0       	breq	.+16     	; 0x166a2 <SS80_Execute_State+0x4c>
   16692:	84 30       	cpi	r24, 0x04	; 4
   16694:	91 05       	cpc	r25, r1
   16696:	79 f4       	brne	.+30     	; 0x166b6 <SS80_Execute_State+0x60>
   16698:	0e 94 f3 a9 	call	0x153e6	; 0x153e6 <SS80_describe>
   1669c:	04 c0       	rjmp	.+8      	; 0x166a6 <SS80_Execute_State+0x50>
   1669e:	4e da       	rcall	.-2916   	; 0x15b3c <SS80_locate_and_write>
   166a0:	02 c0       	rjmp	.+4      	; 0x166a6 <SS80_Execute_State+0x50>
   166a2:	0e 94 72 a9 	call	0x152e4	; 0x152e4 <SS80_send_status>
   166a6:	ec 01       	movw	r28, r24
   166a8:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   166ac:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   166b0:	11 82       	std	Z+1, r1	; 0x01
   166b2:	10 82       	st	Z, r1
   166b4:	1a c0       	rjmp	.+52     	; 0x166ea <SS80_Execute_State+0x94>
   166b6:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   166ba:	20 ff       	sbrs	r18, 0
   166bc:	0e c0       	rjmp	.+28     	; 0x166da <SS80_Execute_State+0x84>
   166be:	9f 93       	push	r25
   166c0:	8f 93       	push	r24
   166c2:	84 e4       	ldi	r24, 0x44	; 68
   166c4:	97 e2       	ldi	r25, 0x27	; 39
   166c6:	1f 92       	push	r1
   166c8:	9f 93       	push	r25
   166ca:	8f 93       	push	r24
   166cc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   166d0:	0f 90       	pop	r0
   166d2:	0f 90       	pop	r0
   166d4:	0f 90       	pop	r0
   166d6:	0f 90       	pop	r0
   166d8:	0f 90       	pop	r0
   166da:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   166de:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   166e2:	11 82       	std	Z+1, r1	; 0x01
   166e4:	10 82       	st	Z, r1
   166e6:	c0 e0       	ldi	r28, 0x00	; 0
   166e8:	d0 e0       	ldi	r29, 0x00	; 0
   166ea:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   166ee:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   166f2:	81 81       	ldd	r24, Z+1	; 0x01
   166f4:	90 e0       	ldi	r25, 0x00	; 0
   166f6:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   166fa:	ce 01       	movw	r24, r28
   166fc:	df 91       	pop	r29
   166fe:	cf 91       	pop	r28
   16700:	08 95       	ret

00016702 <SS80_COMMANDS>:
   16702:	1f 93       	push	r17
   16704:	cf 93       	push	r28
   16706:	df 93       	push	r29
   16708:	18 2f       	mov	r17, r24
   1670a:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   1670e:	90 e0       	ldi	r25, 0x00	; 0
   16710:	0e 94 fb 8b 	call	0x117f6	; 0x117f6 <SS80_is_MTA>
   16714:	89 2b       	or	r24, r25
   16716:	19 f0       	breq	.+6      	; 0x1671e <SS80_COMMANDS+0x1c>
   16718:	15 36       	cpi	r17, 0x65	; 101
   1671a:	19 f5       	brne	.+70     	; 0x16762 <SS80_COMMANDS+0x60>
   1671c:	09 c0       	rjmp	.+18     	; 0x16730 <SS80_COMMANDS+0x2e>
   1671e:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   16722:	90 e0       	ldi	r25, 0x00	; 0
   16724:	0e 94 ec 8b 	call	0x117d8	; 0x117d8 <SS80_is_MLA>
   16728:	ec 01       	movw	r28, r24
   1672a:	89 2b       	or	r24, r25
   1672c:	a9 f7       	brne	.-22     	; 0x16718 <SS80_COMMANDS+0x16>
   1672e:	ae c0       	rjmp	.+348    	; 0x1688c <SS80_COMMANDS+0x18a>
   16730:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   16734:	90 e0       	ldi	r25, 0x00	; 0
   16736:	0e 94 ec 8b 	call	0x117d8	; 0x117d8 <SS80_is_MLA>
   1673a:	89 2b       	or	r24, r25
   1673c:	09 f4       	brne	.+2      	; 0x16740 <SS80_COMMANDS+0x3e>
   1673e:	a3 c0       	rjmp	.+326    	; 0x16886 <SS80_COMMANDS+0x184>
   16740:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16744:	85 ff       	sbrs	r24, 5
   16746:	0a c0       	rjmp	.+20     	; 0x1675c <SS80_COMMANDS+0x5a>
   16748:	82 e1       	ldi	r24, 0x12	; 18
   1674a:	90 e2       	ldi	r25, 0x20	; 32
   1674c:	1f 92       	push	r1
   1674e:	9f 93       	push	r25
   16750:	8f 93       	push	r24
   16752:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16756:	0f 90       	pop	r0
   16758:	0f 90       	pop	r0
   1675a:	0f 90       	pop	r0
   1675c:	0e 94 a5 aa 	call	0x1554a	; 0x1554a <SS80_Command_State>
   16760:	73 c0       	rjmp	.+230    	; 0x16848 <SS80_COMMANDS+0x146>
   16762:	1e 36       	cpi	r17, 0x6E	; 110
   16764:	01 f5       	brne	.+64     	; 0x167a6 <SS80_COMMANDS+0xa4>
   16766:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   1676a:	90 e0       	ldi	r25, 0x00	; 0
   1676c:	0e 94 ec 8b 	call	0x117d8	; 0x117d8 <SS80_is_MLA>
   16770:	89 2b       	or	r24, r25
   16772:	79 f0       	breq	.+30     	; 0x16792 <SS80_COMMANDS+0x90>
   16774:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16778:	85 ff       	sbrs	r24, 5
   1677a:	13 c0       	rjmp	.+38     	; 0x167a2 <SS80_COMMANDS+0xa0>
   1677c:	8c ef       	ldi	r24, 0xFC	; 252
   1677e:	9f e1       	ldi	r25, 0x1F	; 31
   16780:	1f 92       	push	r1
   16782:	9f 93       	push	r25
   16784:	8f 93       	push	r24
   16786:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1678a:	0f 90       	pop	r0
   1678c:	0f 90       	pop	r0
   1678e:	0f 90       	pop	r0
   16790:	08 c0       	rjmp	.+16     	; 0x167a2 <SS80_COMMANDS+0xa0>
   16792:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   16796:	90 e0       	ldi	r25, 0x00	; 0
   16798:	0e 94 fb 8b 	call	0x117f6	; 0x117f6 <SS80_is_MTA>
   1679c:	89 2b       	or	r24, r25
   1679e:	51 f7       	brne	.-44     	; 0x16774 <SS80_COMMANDS+0x72>
   167a0:	72 c0       	rjmp	.+228    	; 0x16886 <SS80_COMMANDS+0x184>
   167a2:	59 df       	rcall	.-334    	; 0x16656 <SS80_Execute_State>
   167a4:	51 c0       	rjmp	.+162    	; 0x16848 <SS80_COMMANDS+0x146>
   167a6:	10 37       	cpi	r17, 0x70	; 112
   167a8:	b9 f5       	brne	.+110    	; 0x16818 <SS80_COMMANDS+0x116>
   167aa:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   167ae:	90 e0       	ldi	r25, 0x00	; 0
   167b0:	0e 94 fb 8b 	call	0x117f6	; 0x117f6 <SS80_is_MTA>
   167b4:	89 2b       	or	r24, r25
   167b6:	81 f0       	breq	.+32     	; 0x167d8 <SS80_COMMANDS+0xd6>
   167b8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   167bc:	85 ff       	sbrs	r24, 5
   167be:	0a c0       	rjmp	.+20     	; 0x167d4 <SS80_COMMANDS+0xd2>
   167c0:	87 ee       	ldi	r24, 0xE7	; 231
   167c2:	9f e1       	ldi	r25, 0x1F	; 31
   167c4:	1f 92       	push	r1
   167c6:	9f 93       	push	r25
   167c8:	8f 93       	push	r24
   167ca:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   167ce:	0f 90       	pop	r0
   167d0:	0f 90       	pop	r0
   167d2:	0f 90       	pop	r0
   167d4:	4a db       	rcall	.-2412   	; 0x15e6a <SS80_Report>
   167d6:	38 c0       	rjmp	.+112    	; 0x16848 <SS80_COMMANDS+0x146>
   167d8:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   167dc:	90 e0       	ldi	r25, 0x00	; 0
   167de:	0e 94 ec 8b 	call	0x117d8	; 0x117d8 <SS80_is_MLA>
   167e2:	89 2b       	or	r24, r25
   167e4:	09 f4       	brne	.+2      	; 0x167e8 <SS80_COMMANDS+0xe6>
   167e6:	4f c0       	rjmp	.+158    	; 0x16886 <SS80_COMMANDS+0x184>
   167e8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   167ec:	85 ff       	sbrs	r24, 5
   167ee:	0a c0       	rjmp	.+20     	; 0x16804 <SS80_COMMANDS+0x102>
   167f0:	88 ed       	ldi	r24, 0xD8	; 216
   167f2:	9f e1       	ldi	r25, 0x1F	; 31
   167f4:	1f 92       	push	r1
   167f6:	9f 93       	push	r25
   167f8:	8f 93       	push	r24
   167fa:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   167fe:	0f 90       	pop	r0
   16800:	0f 90       	pop	r0
   16802:	0f 90       	pop	r0
   16804:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   16808:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   1680c:	81 81       	ldd	r24, Z+1	; 0x01
   1680e:	90 e0       	ldi	r25, 0x00	; 0
   16810:	0e 94 10 86 	call	0x10c20	; 0x10c20 <gpib_disable_PPR>
   16814:	18 dc       	rcall	.-2000   	; 0x16046 <SS80_Amigo_Clear>
   16816:	18 c0       	rjmp	.+48     	; 0x16848 <SS80_COMMANDS+0x146>
   16818:	12 37       	cpi	r17, 0x72	; 114
   1681a:	c1 f4       	brne	.+48     	; 0x1684c <SS80_COMMANDS+0x14a>
   1681c:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   16820:	90 e0       	ldi	r25, 0x00	; 0
   16822:	0e 94 ec 8b 	call	0x117d8	; 0x117d8 <SS80_is_MLA>
   16826:	89 2b       	or	r24, r25
   16828:	89 f0       	breq	.+34     	; 0x1684c <SS80_COMMANDS+0x14a>
   1682a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1682e:	85 ff       	sbrs	r24, 5
   16830:	0a c0       	rjmp	.+20     	; 0x16846 <SS80_COMMANDS+0x144>
   16832:	84 ec       	ldi	r24, 0xC4	; 196
   16834:	9f e1       	ldi	r25, 0x1F	; 31
   16836:	1f 92       	push	r1
   16838:	9f 93       	push	r25
   1683a:	8f 93       	push	r24
   1683c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16840:	0f 90       	pop	r0
   16842:	0f 90       	pop	r0
   16844:	0f 90       	pop	r0
   16846:	53 dc       	rcall	.-1882   	; 0x160ee <SS80_Transparent_State>
   16848:	ec 01       	movw	r28, r24
   1684a:	3d c0       	rjmp	.+122    	; 0x168c6 <SS80_COMMANDS+0x1c4>
   1684c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16850:	80 ff       	sbrs	r24, 0
   16852:	19 c0       	rjmp	.+50     	; 0x16886 <SS80_COMMANDS+0x184>
   16854:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   16858:	1f 92       	push	r1
   1685a:	8f 93       	push	r24
   1685c:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   16860:	1f 92       	push	r1
   16862:	8f 93       	push	r24
   16864:	1f 92       	push	r1
   16866:	1f 93       	push	r17
   16868:	80 e9       	ldi	r24, 0x90	; 144
   1686a:	9f e1       	ldi	r25, 0x1F	; 31
   1686c:	1f 92       	push	r1
   1686e:	9f 93       	push	r25
   16870:	8f 93       	push	r24
   16872:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16876:	8d b7       	in	r24, 0x3d	; 61
   16878:	9e b7       	in	r25, 0x3e	; 62
   1687a:	09 96       	adiw	r24, 0x09	; 9
   1687c:	0f b6       	in	r0, 0x3f	; 63
   1687e:	f8 94       	cli
   16880:	9e bf       	out	0x3e, r25	; 62
   16882:	0f be       	out	0x3f, r0	; 63
   16884:	8d bf       	out	0x3d, r24	; 61
   16886:	c0 e0       	ldi	r28, 0x00	; 0
   16888:	d0 e0       	ldi	r29, 0x00	; 0
   1688a:	1d c0       	rjmp	.+58     	; 0x168c6 <SS80_COMMANDS+0x1c4>
   1688c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16890:	80 ff       	sbrs	r24, 0
   16892:	f9 cf       	rjmp	.-14     	; 0x16886 <SS80_COMMANDS+0x184>
   16894:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   16898:	1f 92       	push	r1
   1689a:	8f 93       	push	r24
   1689c:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   168a0:	1f 92       	push	r1
   168a2:	8f 93       	push	r24
   168a4:	1f 92       	push	r1
   168a6:	1f 93       	push	r17
   168a8:	8c e5       	ldi	r24, 0x5C	; 92
   168aa:	9f e1       	ldi	r25, 0x1F	; 31
   168ac:	1f 92       	push	r1
   168ae:	9f 93       	push	r25
   168b0:	8f 93       	push	r24
   168b2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   168b6:	8d b7       	in	r24, 0x3d	; 61
   168b8:	9e b7       	in	r25, 0x3e	; 62
   168ba:	09 96       	adiw	r24, 0x09	; 9
   168bc:	0f b6       	in	r0, 0x3f	; 63
   168be:	f8 94       	cli
   168c0:	9e bf       	out	0x3e, r25	; 62
   168c2:	0f be       	out	0x3f, r0	; 63
   168c4:	8d bf       	out	0x3d, r24	; 61
   168c6:	ce 01       	movw	r24, r28
   168c8:	df 91       	pop	r29
   168ca:	cf 91       	pop	r28
   168cc:	1f 91       	pop	r17
   168ce:	08 95       	ret

000168d0 <amigo_overflow_check>:
   168d0:	cf 92       	push	r12
   168d2:	df 92       	push	r13
   168d4:	ef 92       	push	r14
   168d6:	0f 93       	push	r16
   168d8:	1f 93       	push	r17
   168da:	cf 93       	push	r28
   168dc:	df 93       	push	r29
   168de:	ec 01       	movw	r28, r24
   168e0:	8b 01       	movw	r16, r22
   168e2:	80 e0       	ldi	r24, 0x00	; 0
   168e4:	90 e0       	ldi	r25, 0x00	; 0
   168e6:	23 e3       	ldi	r18, 0x33	; 51
   168e8:	3f e2       	ldi	r19, 0x2F	; 47
   168ea:	69 01       	movw	r12, r18
   168ec:	2d 81       	ldd	r18, Y+5	; 0x05
   168ee:	30 e0       	ldi	r19, 0x00	; 0
   168f0:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   168f4:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   168f8:	47 a1       	ldd	r20, Z+39	; 0x27
   168fa:	50 a5       	ldd	r21, Z+40	; 0x28
   168fc:	24 17       	cp	r18, r20
   168fe:	35 07       	cpc	r19, r21
   16900:	7c f1       	brlt	.+94     	; 0x16960 <amigo_overflow_check+0x90>
   16902:	1d 82       	std	Y+5, r1	; 0x05
   16904:	2c 81       	ldd	r18, Y+4	; 0x04
   16906:	2f 5f       	subi	r18, 0xFF	; 255
   16908:	2c 83       	std	Y+4, r18	; 0x04
   1690a:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   1690e:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16912:	2c 81       	ldd	r18, Y+4	; 0x04
   16914:	30 e0       	ldi	r19, 0x00	; 0
   16916:	41 a5       	ldd	r20, Z+41	; 0x29
   16918:	52 a5       	ldd	r21, Z+42	; 0x2a
   1691a:	24 17       	cp	r18, r20
   1691c:	35 07       	cpc	r19, r21
   1691e:	34 f3       	brlt	.-52     	; 0x168ec <amigo_overflow_check+0x1c>
   16920:	1c 82       	std	Y+4, r1	; 0x04
   16922:	2b 81       	ldd	r18, Y+3	; 0x03
   16924:	2f 5f       	subi	r18, 0xFF	; 255
   16926:	2b 83       	std	Y+3, r18	; 0x03
   16928:	30 e0       	ldi	r19, 0x00	; 0
   1692a:	43 a5       	ldd	r20, Z+43	; 0x2b
   1692c:	54 a5       	ldd	r21, Z+44	; 0x2c
   1692e:	24 17       	cp	r18, r20
   16930:	35 07       	cpc	r19, r21
   16932:	5c f3       	brlt	.-42     	; 0x1690a <amigo_overflow_check+0x3a>
   16934:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16938:	80 ff       	sbrs	r24, 0
   1693a:	0f c0       	rjmp	.+30     	; 0x1695a <amigo_overflow_check+0x8a>
   1693c:	01 15       	cp	r16, r1
   1693e:	11 05       	cpc	r17, r1
   16940:	61 f0       	breq	.+24     	; 0x1695a <amigo_overflow_check+0x8a>
   16942:	1f 93       	push	r17
   16944:	0f 93       	push	r16
   16946:	1f 92       	push	r1
   16948:	df 92       	push	r13
   1694a:	cf 92       	push	r12
   1694c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16950:	0f 90       	pop	r0
   16952:	0f 90       	pop	r0
   16954:	0f 90       	pop	r0
   16956:	0f 90       	pop	r0
   16958:	0f 90       	pop	r0
   1695a:	81 e0       	ldi	r24, 0x01	; 1
   1695c:	90 e0       	ldi	r25, 0x00	; 0
   1695e:	d5 cf       	rjmp	.-86     	; 0x1690a <amigo_overflow_check+0x3a>
   16960:	df 91       	pop	r29
   16962:	cf 91       	pop	r28
   16964:	1f 91       	pop	r17
   16966:	0f 91       	pop	r16
   16968:	ef 90       	pop	r14
   1696a:	df 90       	pop	r13
   1696c:	cf 90       	pop	r12
   1696e:	08 95       	ret

00016970 <amigo_chs_to_logical>:
   16970:	a0 e0       	ldi	r26, 0x00	; 0
   16972:	b0 e0       	ldi	r27, 0x00	; 0
   16974:	ee eb       	ldi	r30, 0xBE	; 190
   16976:	f4 eb       	ldi	r31, 0xB4	; 180
   16978:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__prologue_saves__+0x12>
   1697c:	dc 01       	movw	r26, r24
   1697e:	d6 2f       	mov	r29, r22
   16980:	17 2f       	mov	r17, r23
   16982:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16986:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   1698a:	87 a1       	ldd	r24, Z+39	; 0x27
   1698c:	90 a5       	ldd	r25, Z+40	; 0x28
   1698e:	14 96       	adiw	r26, 0x04	; 4
   16990:	cc 91       	ld	r28, X
   16992:	14 97       	sbiw	r26, 0x04	; 4
   16994:	c8 9f       	mul	r28, r24
   16996:	90 01       	movw	r18, r0
   16998:	c9 9f       	mul	r28, r25
   1699a:	30 0d       	add	r19, r0
   1699c:	11 24       	eor	r1, r1
   1699e:	a9 01       	movw	r20, r18
   169a0:	33 0f       	add	r19, r19
   169a2:	66 0b       	sbc	r22, r22
   169a4:	77 0b       	sbc	r23, r23
   169a6:	13 96       	adiw	r26, 0x03	; 3
   169a8:	0c 91       	ld	r16, X
   169aa:	13 97       	sbiw	r26, 0x03	; 3
   169ac:	21 a5       	ldd	r18, Z+41	; 0x29
   169ae:	32 a5       	ldd	r19, Z+42	; 0x2a
   169b0:	82 9f       	mul	r24, r18
   169b2:	70 01       	movw	r14, r0
   169b4:	83 9f       	mul	r24, r19
   169b6:	f0 0c       	add	r15, r0
   169b8:	92 9f       	mul	r25, r18
   169ba:	f0 0c       	add	r15, r0
   169bc:	11 24       	eor	r1, r1
   169be:	0e 9d       	mul	r16, r14
   169c0:	90 01       	movw	r18, r0
   169c2:	0f 9d       	mul	r16, r15
   169c4:	30 0d       	add	r19, r0
   169c6:	11 24       	eor	r1, r1
   169c8:	69 01       	movw	r12, r18
   169ca:	33 0f       	add	r19, r19
   169cc:	ee 08       	sbc	r14, r14
   169ce:	ff 08       	sbc	r15, r15
   169d0:	4c 0d       	add	r20, r12
   169d2:	5d 1d       	adc	r21, r13
   169d4:	6e 1d       	adc	r22, r14
   169d6:	7f 1d       	adc	r23, r15
   169d8:	15 96       	adiw	r26, 0x05	; 5
   169da:	bc 90       	ld	r11, X
   169dc:	9a 01       	movw	r18, r20
   169de:	ab 01       	movw	r20, r22
   169e0:	2b 0d       	add	r18, r11
   169e2:	31 1d       	adc	r19, r1
   169e4:	41 1d       	adc	r20, r1
   169e6:	51 1d       	adc	r21, r1
   169e8:	a5 a1       	ldd	r26, Z+37	; 0x25
   169ea:	b6 a1       	ldd	r27, Z+38	; 0x26
   169ec:	0e 94 18 e5 	call	0x1ca30	; 0x1ca30 <__mulshisi3>
   169f0:	6b 01       	movw	r12, r22
   169f2:	7c 01       	movw	r14, r24
   169f4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   169f8:	85 ff       	sbrs	r24, 5
   169fa:	22 c0       	rjmp	.+68     	; 0x16a40 <amigo_chs_to_logical+0xd0>
   169fc:	1f 92       	push	r1
   169fe:	bf 92       	push	r11
   16a00:	1f 92       	push	r1
   16a02:	cf 93       	push	r28
   16a04:	1f 92       	push	r1
   16a06:	0f 93       	push	r16
   16a08:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16a0c:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16a10:	81 81       	ldd	r24, Z+1	; 0x01
   16a12:	1f 92       	push	r1
   16a14:	8f 93       	push	r24
   16a16:	ff 92       	push	r15
   16a18:	ef 92       	push	r14
   16a1a:	df 92       	push	r13
   16a1c:	cf 92       	push	r12
   16a1e:	1f 93       	push	r17
   16a20:	df 93       	push	r29
   16a22:	80 ee       	ldi	r24, 0xE0	; 224
   16a24:	9e e2       	ldi	r25, 0x2E	; 46
   16a26:	1f 92       	push	r1
   16a28:	9f 93       	push	r25
   16a2a:	8f 93       	push	r24
   16a2c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16a30:	8d b7       	in	r24, 0x3d	; 61
   16a32:	9e b7       	in	r25, 0x3e	; 62
   16a34:	41 96       	adiw	r24, 0x11	; 17
   16a36:	0f b6       	in	r0, 0x3f	; 63
   16a38:	f8 94       	cli
   16a3a:	9e bf       	out	0x3e, r25	; 62
   16a3c:	0f be       	out	0x3f, r0	; 63
   16a3e:	8d bf       	out	0x3d, r24	; 61
   16a40:	b6 01       	movw	r22, r12
   16a42:	c7 01       	movw	r24, r14
   16a44:	cd b7       	in	r28, 0x3d	; 61
   16a46:	de b7       	in	r29, 0x3e	; 62
   16a48:	e9 e0       	ldi	r30, 0x09	; 9
   16a4a:	0c 94 53 e5 	jmp	0x1caa6	; 0x1caa6 <__epilogue_restores__+0x12>

00016a4e <amigo_init>:
   16a4e:	ef 92       	push	r14
   16a50:	ff 92       	push	r15
   16a52:	0f 93       	push	r16
   16a54:	1f 93       	push	r17
   16a56:	cf 93       	push	r28
   16a58:	df 93       	push	r29
   16a5a:	05 ec       	ldi	r16, 0xC5	; 197
   16a5c:	1f e1       	ldi	r17, 0x1F	; 31
   16a5e:	cb e0       	ldi	r28, 0x0B	; 11
   16a60:	d0 e0       	ldi	r29, 0x00	; 0
   16a62:	84 e0       	ldi	r24, 0x04	; 4
   16a64:	f8 2e       	mov	r15, r24
   16a66:	92 e0       	ldi	r25, 0x02	; 2
   16a68:	e9 2e       	mov	r14, r25
   16a6a:	d8 01       	movw	r26, r16
   16a6c:	8c 91       	ld	r24, X
   16a6e:	81 30       	cpi	r24, 0x01	; 1
   16a70:	31 f5       	brne	.+76     	; 0x16abe <amigo_init+0x70>
   16a72:	ce 01       	movw	r24, r28
   16a74:	0e 94 a6 92 	call	0x1254c	; 0x1254c <set_active_device>
   16a78:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16a7c:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16a80:	10 82       	st	Z, r1
   16a82:	9f 01       	movw	r18, r30
   16a84:	27 5f       	subi	r18, 0xF7	; 247
   16a86:	3f 4f       	sbci	r19, 0xFF	; 255
   16a88:	d9 01       	movw	r26, r18
   16a8a:	8f 2d       	mov	r24, r15
   16a8c:	1d 92       	st	X+, r1
   16a8e:	8a 95       	dec	r24
   16a90:	e9 f7       	brne	.-6      	; 0x16a8c <amigo_init+0x3e>
   16a92:	2c 5f       	subi	r18, 0xFC	; 252
   16a94:	3f 4f       	sbci	r19, 0xFF	; 255
   16a96:	d9 01       	movw	r26, r18
   16a98:	8f 2d       	mov	r24, r15
   16a9a:	1d 92       	st	X+, r1
   16a9c:	8a 95       	dec	r24
   16a9e:	e9 f7       	brne	.-6      	; 0x16a9a <amigo_init+0x4c>
   16aa0:	11 82       	std	Z+1, r1	; 0x01
   16aa2:	15 82       	std	Z+5, r1	; 0x05
   16aa4:	14 82       	std	Z+4, r1	; 0x04
   16aa6:	13 82       	std	Z+3, r1	; 0x03
   16aa8:	e6 82       	std	Z+6, r14	; 0x06
   16aaa:	10 86       	std	Z+8, r1	; 0x08
   16aac:	17 82       	std	Z+7, r1	; 0x07
   16aae:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16ab2:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16ab6:	81 81       	ldd	r24, Z+1	; 0x01
   16ab8:	90 e0       	ldi	r25, 0x00	; 0
   16aba:	0e 94 10 86 	call	0x10c20	; 0x10c20 <gpib_disable_PPR>
   16abe:	21 97       	sbiw	r28, 0x01	; 1
   16ac0:	0b 52       	subi	r16, 0x2B	; 43
   16ac2:	11 09       	sbc	r17, r1
   16ac4:	cf 3f       	cpi	r28, 0xFF	; 255
   16ac6:	af ef       	ldi	r26, 0xFF	; 255
   16ac8:	da 07       	cpc	r29, r26
   16aca:	79 f6       	brne	.-98     	; 0x16a6a <amigo_init+0x1c>
   16acc:	cd b7       	in	r28, 0x3d	; 61
   16ace:	de b7       	in	r29, 0x3e	; 62
   16ad0:	e6 e0       	ldi	r30, 0x06	; 6
   16ad2:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

00016ad6 <amigo_request_logical_address>:
   16ad6:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16ada:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16ade:	15 86       	std	Z+13, r1	; 0x0d
   16ae0:	83 81       	ldd	r24, Z+3	; 0x03
   16ae2:	86 87       	std	Z+14, r24	; 0x0e
   16ae4:	84 81       	ldd	r24, Z+4	; 0x04
   16ae6:	87 87       	std	Z+15, r24	; 0x0f
   16ae8:	85 81       	ldd	r24, Z+5	; 0x05
   16aea:	80 8b       	std	Z+16, r24	; 0x10
   16aec:	80 e0       	ldi	r24, 0x00	; 0
   16aee:	90 e0       	ldi	r25, 0x00	; 0
   16af0:	08 95       	ret

00016af2 <amigo_request_status>:
   16af2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16af6:	85 ff       	sbrs	r24, 5
   16af8:	0a c0       	rjmp	.+20     	; 0x16b0e <amigo_request_status+0x1c>
   16afa:	83 eb       	ldi	r24, 0xB3	; 179
   16afc:	9f e2       	ldi	r25, 0x2F	; 47
   16afe:	1f 92       	push	r1
   16b00:	9f 93       	push	r25
   16b02:	8f 93       	push	r24
   16b04:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16b08:	0f 90       	pop	r0
   16b0a:	0f 90       	pop	r0
   16b0c:	0f 90       	pop	r0
   16b0e:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16b12:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16b16:	11 86       	std	Z+9, r1	; 0x09
   16b18:	81 81       	ldd	r24, Z+1	; 0x01
   16b1a:	82 87       	std	Z+10, r24	; 0x0a
   16b1c:	8d e0       	ldi	r24, 0x0D	; 13
   16b1e:	83 87       	std	Z+11, r24	; 0x0b
   16b20:	14 86       	std	Z+12, r1	; 0x0c
   16b22:	0e 94 91 70 	call	0xe122	; 0xe122 <mmc_wp_status>
   16b26:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16b2a:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16b2e:	89 2b       	or	r24, r25
   16b30:	19 f0       	breq	.+6      	; 0x16b38 <amigo_request_status+0x46>
   16b32:	84 85       	ldd	r24, Z+12	; 0x0c
   16b34:	80 66       	ori	r24, 0x60	; 96
   16b36:	84 87       	std	Z+12, r24	; 0x0c
   16b38:	86 81       	ldd	r24, Z+6	; 0x06
   16b3a:	82 30       	cpi	r24, 0x02	; 2
   16b3c:	31 f4       	brne	.+12     	; 0x16b4a <amigo_request_status+0x58>
   16b3e:	83 e1       	ldi	r24, 0x13	; 19
   16b40:	81 87       	std	Z+9, r24	; 0x09
   16b42:	84 85       	ldd	r24, Z+12	; 0x0c
   16b44:	88 60       	ori	r24, 0x08	; 8
   16b46:	84 87       	std	Z+12, r24	; 0x0c
   16b48:	21 c0       	rjmp	.+66     	; 0x16b8c <amigo_request_status+0x9a>
   16b4a:	27 81       	ldd	r18, Z+7	; 0x07
   16b4c:	30 85       	ldd	r19, Z+8	; 0x08
   16b4e:	21 15       	cp	r18, r1
   16b50:	31 05       	cpc	r19, r1
   16b52:	11 f4       	brne	.+4      	; 0x16b58 <amigo_request_status+0x66>
   16b54:	81 30       	cpi	r24, 0x01	; 1
   16b56:	d1 f4       	brne	.+52     	; 0x16b8c <amigo_request_status+0x9a>
   16b58:	26 fd       	sbrc	r18, 6
   16b5a:	0c c0       	rjmp	.+24     	; 0x16b74 <amigo_request_status+0x82>
   16b5c:	25 ff       	sbrs	r18, 5
   16b5e:	03 c0       	rjmp	.+6      	; 0x16b66 <amigo_request_status+0x74>
   16b60:	8a e0       	ldi	r24, 0x0A	; 10
   16b62:	81 87       	std	Z+9, r24	; 0x09
   16b64:	0d c0       	rjmp	.+26     	; 0x16b80 <amigo_request_status+0x8e>
   16b66:	84 85       	ldd	r24, Z+12	; 0x0c
   16b68:	24 ff       	sbrs	r18, 4
   16b6a:	02 c0       	rjmp	.+4      	; 0x16b70 <amigo_request_status+0x7e>
   16b6c:	83 60       	ori	r24, 0x03	; 3
   16b6e:	07 c0       	rjmp	.+14     	; 0x16b7e <amigo_request_status+0x8c>
   16b70:	21 ff       	sbrs	r18, 1
   16b72:	02 c0       	rjmp	.+4      	; 0x16b78 <amigo_request_status+0x86>
   16b74:	83 e1       	ldi	r24, 0x13	; 19
   16b76:	f5 cf       	rjmp	.-22     	; 0x16b62 <amigo_request_status+0x70>
   16b78:	22 ff       	sbrs	r18, 2
   16b7a:	02 c0       	rjmp	.+4      	; 0x16b80 <amigo_request_status+0x8e>
   16b7c:	84 60       	ori	r24, 0x04	; 4
   16b7e:	84 87       	std	Z+12, r24	; 0x0c
   16b80:	84 85       	ldd	r24, Z+12	; 0x0c
   16b82:	80 61       	ori	r24, 0x10	; 16
   16b84:	84 87       	std	Z+12, r24	; 0x0c
   16b86:	83 85       	ldd	r24, Z+11	; 0x0b
   16b88:	80 68       	ori	r24, 0x80	; 128
   16b8a:	83 87       	std	Z+11, r24	; 0x0b
   16b8c:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16b90:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16b94:	81 81       	ldd	r24, Z+1	; 0x01
   16b96:	90 e0       	ldi	r25, 0x00	; 0
   16b98:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   16b9c:	80 e0       	ldi	r24, 0x00	; 0
   16b9e:	90 e0       	ldi	r25, 0x00	; 0
   16ba0:	08 95       	ret

00016ba2 <amigo_send_logical_address>:
   16ba2:	a2 e0       	ldi	r26, 0x02	; 2
   16ba4:	b0 e0       	ldi	r27, 0x00	; 0
   16ba6:	e7 ed       	ldi	r30, 0xD7	; 215
   16ba8:	f5 eb       	ldi	r31, 0xB5	; 181
   16baa:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
   16bae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16bb2:	85 ff       	sbrs	r24, 5
   16bb4:	0a c0       	rjmp	.+20     	; 0x16bca <amigo_send_logical_address+0x28>
   16bb6:	85 e9       	ldi	r24, 0x95	; 149
   16bb8:	9f e2       	ldi	r25, 0x2F	; 47
   16bba:	1f 92       	push	r1
   16bbc:	9f 93       	push	r25
   16bbe:	8f 93       	push	r24
   16bc0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16bc4:	0f 90       	pop	r0
   16bc6:	0f 90       	pop	r0
   16bc8:	0f 90       	pop	r0
   16bca:	80 e0       	ldi	r24, 0x00	; 0
   16bcc:	91 e0       	ldi	r25, 0x01	; 1
   16bce:	9a 83       	std	Y+2, r25	; 0x02
   16bd0:	89 83       	std	Y+1, r24	; 0x01
   16bd2:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <AMIGOs>
   16bd6:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <AMIGOs+0x1>
   16bda:	ae 01       	movw	r20, r28
   16bdc:	4f 5f       	subi	r20, 0xFF	; 255
   16bde:	5f 4f       	sbci	r21, 0xFF	; 255
   16be0:	64 e0       	ldi	r22, 0x04	; 4
   16be2:	70 e0       	ldi	r23, 0x00	; 0
   16be4:	0d 96       	adiw	r24, 0x0d	; 13
   16be6:	0e 94 2f 8b 	call	0x1165e	; 0x1165e <gpib_write_str>
   16bea:	29 81       	ldd	r18, Y+1	; 0x01
   16bec:	3a 81       	ldd	r19, Y+2	; 0x02
   16bee:	22 27       	eor	r18, r18
   16bf0:	30 7d       	andi	r19, 0xD0	; 208
   16bf2:	23 2b       	or	r18, r19
   16bf4:	49 f0       	breq	.+18     	; 0x16c08 <amigo_send_logical_address+0x66>
   16bf6:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16bfa:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16bfe:	27 81       	ldd	r18, Z+7	; 0x07
   16c00:	30 85       	ldd	r19, Z+8	; 0x08
   16c02:	20 62       	ori	r18, 0x20	; 32
   16c04:	30 87       	std	Z+8, r19	; 0x08
   16c06:	27 83       	std	Z+7, r18	; 0x07
   16c08:	04 97       	sbiw	r24, 0x04	; 4
   16c0a:	c9 f0       	breq	.+50     	; 0x16c3e <amigo_send_logical_address+0x9c>
   16c0c:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16c10:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16c14:	87 81       	ldd	r24, Z+7	; 0x07
   16c16:	90 85       	ldd	r25, Z+8	; 0x08
   16c18:	80 62       	ori	r24, 0x20	; 32
   16c1a:	90 87       	std	Z+8, r25	; 0x08
   16c1c:	87 83       	std	Z+7, r24	; 0x07
   16c1e:	81 e0       	ldi	r24, 0x01	; 1
   16c20:	86 83       	std	Z+6, r24	; 0x06
   16c22:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16c26:	80 ff       	sbrs	r24, 0
   16c28:	0a c0       	rjmp	.+20     	; 0x16c3e <amigo_send_logical_address+0x9c>
   16c2a:	8b e7       	ldi	r24, 0x7B	; 123
   16c2c:	9f e2       	ldi	r25, 0x2F	; 47
   16c2e:	1f 92       	push	r1
   16c30:	9f 93       	push	r25
   16c32:	8f 93       	push	r24
   16c34:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16c38:	0f 90       	pop	r0
   16c3a:	0f 90       	pop	r0
   16c3c:	0f 90       	pop	r0
   16c3e:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16c42:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16c46:	81 81       	ldd	r24, Z+1	; 0x01
   16c48:	90 e0       	ldi	r25, 0x00	; 0
   16c4a:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   16c4e:	89 81       	ldd	r24, Y+1	; 0x01
   16c50:	9a 81       	ldd	r25, Y+2	; 0x02
   16c52:	88 27       	eor	r24, r24
   16c54:	90 7d       	andi	r25, 0xD0	; 208
   16c56:	22 96       	adiw	r28, 0x02	; 2
   16c58:	e2 e0       	ldi	r30, 0x02	; 2
   16c5a:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

00016c5e <amigo_send_status>:
   16c5e:	a2 e0       	ldi	r26, 0x02	; 2
   16c60:	b0 e0       	ldi	r27, 0x00	; 0
   16c62:	e5 e3       	ldi	r30, 0x35	; 53
   16c64:	f6 eb       	ldi	r31, 0xB6	; 182
   16c66:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
   16c6a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16c6e:	85 ff       	sbrs	r24, 5
   16c70:	0a c0       	rjmp	.+20     	; 0x16c86 <amigo_send_status+0x28>
   16c72:	86 e6       	ldi	r24, 0x66	; 102
   16c74:	9f e2       	ldi	r25, 0x2F	; 47
   16c76:	1f 92       	push	r1
   16c78:	9f 93       	push	r25
   16c7a:	8f 93       	push	r24
   16c7c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16c80:	0f 90       	pop	r0
   16c82:	0f 90       	pop	r0
   16c84:	0f 90       	pop	r0
   16c86:	80 e0       	ldi	r24, 0x00	; 0
   16c88:	91 e0       	ldi	r25, 0x01	; 1
   16c8a:	9a 83       	std	Y+2, r25	; 0x02
   16c8c:	89 83       	std	Y+1, r24	; 0x01
   16c8e:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <AMIGOs>
   16c92:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <AMIGOs+0x1>
   16c96:	ae 01       	movw	r20, r28
   16c98:	4f 5f       	subi	r20, 0xFF	; 255
   16c9a:	5f 4f       	sbci	r21, 0xFF	; 255
   16c9c:	64 e0       	ldi	r22, 0x04	; 4
   16c9e:	70 e0       	ldi	r23, 0x00	; 0
   16ca0:	09 96       	adiw	r24, 0x09	; 9
   16ca2:	0e 94 2f 8b 	call	0x1165e	; 0x1165e <gpib_write_str>
   16ca6:	29 81       	ldd	r18, Y+1	; 0x01
   16ca8:	3a 81       	ldd	r19, Y+2	; 0x02
   16caa:	22 27       	eor	r18, r18
   16cac:	30 7d       	andi	r19, 0xD0	; 208
   16cae:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16cb2:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16cb6:	23 2b       	or	r18, r19
   16cb8:	29 f0       	breq	.+10     	; 0x16cc4 <amigo_send_status+0x66>
   16cba:	27 81       	ldd	r18, Z+7	; 0x07
   16cbc:	30 85       	ldd	r19, Z+8	; 0x08
   16cbe:	20 62       	ori	r18, 0x20	; 32
   16cc0:	30 87       	std	Z+8, r19	; 0x08
   16cc2:	27 83       	std	Z+7, r18	; 0x07
   16cc4:	04 97       	sbiw	r24, 0x04	; 4
   16cc6:	b1 f0       	breq	.+44     	; 0x16cf4 <amigo_send_status+0x96>
   16cc8:	87 81       	ldd	r24, Z+7	; 0x07
   16cca:	90 85       	ldd	r25, Z+8	; 0x08
   16ccc:	80 62       	ori	r24, 0x20	; 32
   16cce:	90 87       	std	Z+8, r25	; 0x08
   16cd0:	87 83       	std	Z+7, r24	; 0x07
   16cd2:	81 e0       	ldi	r24, 0x01	; 1
   16cd4:	86 83       	std	Z+6, r24	; 0x06
   16cd6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16cda:	80 ff       	sbrs	r24, 0
   16cdc:	0e c0       	rjmp	.+28     	; 0x16cfa <amigo_send_status+0x9c>
   16cde:	8c e4       	ldi	r24, 0x4C	; 76
   16ce0:	9f e2       	ldi	r25, 0x2F	; 47
   16ce2:	1f 92       	push	r1
   16ce4:	9f 93       	push	r25
   16ce6:	8f 93       	push	r24
   16ce8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16cec:	0f 90       	pop	r0
   16cee:	0f 90       	pop	r0
   16cf0:	0f 90       	pop	r0
   16cf2:	03 c0       	rjmp	.+6      	; 0x16cfa <amigo_send_status+0x9c>
   16cf4:	10 86       	std	Z+8, r1	; 0x08
   16cf6:	17 82       	std	Z+7, r1	; 0x07
   16cf8:	16 82       	std	Z+6, r1	; 0x06
   16cfa:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16cfe:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16d02:	81 81       	ldd	r24, Z+1	; 0x01
   16d04:	90 e0       	ldi	r25, 0x00	; 0
   16d06:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   16d0a:	89 81       	ldd	r24, Y+1	; 0x01
   16d0c:	9a 81       	ldd	r25, Y+2	; 0x02
   16d0e:	88 27       	eor	r24, r24
   16d10:	90 7d       	andi	r25, 0xD0	; 208
   16d12:	22 96       	adiw	r28, 0x02	; 2
   16d14:	e2 e0       	ldi	r30, 0x02	; 2
   16d16:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

00016d1a <amigo_increment>:
   16d1a:	a1 e1       	ldi	r26, 0x11	; 17
   16d1c:	b0 e0       	ldi	r27, 0x00	; 0
   16d1e:	e3 e9       	ldi	r30, 0x93	; 147
   16d20:	f6 eb       	ldi	r31, 0xB6	; 182
   16d22:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
   16d26:	bc 01       	movw	r22, r24
   16d28:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16d2c:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16d30:	91 e1       	ldi	r25, 0x11	; 17
   16d32:	de 01       	movw	r26, r28
   16d34:	11 96       	adiw	r26, 0x01	; 1
   16d36:	01 90       	ld	r0, Z+
   16d38:	0d 92       	st	X+, r0
   16d3a:	9a 95       	dec	r25
   16d3c:	e1 f7       	brne	.-8      	; 0x16d36 <amigo_increment+0x1c>
   16d3e:	9e 81       	ldd	r25, Y+6	; 0x06
   16d40:	9f 5f       	subi	r25, 0xFF	; 255
   16d42:	9e 83       	std	Y+6, r25	; 0x06
   16d44:	ce 01       	movw	r24, r28
   16d46:	01 96       	adiw	r24, 0x01	; 1
   16d48:	c3 dd       	rcall	.-1146   	; 0x168d0 <amigo_overflow_check>
   16d4a:	00 97       	sbiw	r24, 0x00	; 0
   16d4c:	59 f4       	brne	.+22     	; 0x16d64 <amigo_increment+0x4a>
   16d4e:	a0 91 61 18 	lds	r26, 0x1861	; 0x801861 <AMIGOs>
   16d52:	b0 91 62 18 	lds	r27, 0x1862	; 0x801862 <AMIGOs+0x1>
   16d56:	21 e1       	ldi	r18, 0x11	; 17
   16d58:	fe 01       	movw	r30, r28
   16d5a:	31 96       	adiw	r30, 0x01	; 1
   16d5c:	01 90       	ld	r0, Z+
   16d5e:	0d 92       	st	X+, r0
   16d60:	2a 95       	dec	r18
   16d62:	e1 f7       	brne	.-8      	; 0x16d5c <amigo_increment+0x42>
   16d64:	61 96       	adiw	r28, 0x11	; 17
   16d66:	e2 e0       	ldi	r30, 0x02	; 2
   16d68:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

00016d6c <amigo_seek>:
   16d6c:	0f 93       	push	r16
   16d6e:	1f 93       	push	r17
   16d70:	cf 93       	push	r28
   16d72:	df 93       	push	r29
   16d74:	ec 01       	movw	r28, r24
   16d76:	6b ed       	ldi	r22, 0xDB	; 219
   16d78:	74 e1       	ldi	r23, 0x14	; 20
   16d7a:	aa dd       	rcall	.-1196   	; 0x168d0 <amigo_overflow_check>
   16d7c:	8c 01       	movw	r16, r24
   16d7e:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16d82:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16d86:	89 2b       	or	r24, r25
   16d88:	41 f0       	breq	.+16     	; 0x16d9a <amigo_seek+0x2e>
   16d8a:	81 e0       	ldi	r24, 0x01	; 1
   16d8c:	86 83       	std	Z+6, r24	; 0x06
   16d8e:	87 81       	ldd	r24, Z+7	; 0x07
   16d90:	90 85       	ldd	r25, Z+8	; 0x08
   16d92:	84 60       	ori	r24, 0x04	; 4
   16d94:	90 87       	std	Z+8, r25	; 0x08
   16d96:	87 83       	std	Z+7, r24	; 0x07
   16d98:	06 c0       	rjmp	.+12     	; 0x16da6 <amigo_seek+0x3a>
   16d9a:	8d 81       	ldd	r24, Y+5	; 0x05
   16d9c:	85 83       	std	Z+5, r24	; 0x05
   16d9e:	8c 81       	ldd	r24, Y+4	; 0x04
   16da0:	84 83       	std	Z+4, r24	; 0x04
   16da2:	8b 81       	ldd	r24, Y+3	; 0x03
   16da4:	83 83       	std	Z+3, r24	; 0x03
   16da6:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16daa:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16dae:	81 81       	ldd	r24, Z+1	; 0x01
   16db0:	90 e0       	ldi	r25, 0x00	; 0
   16db2:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   16db6:	c8 01       	movw	r24, r16
   16db8:	df 91       	pop	r29
   16dba:	cf 91       	pop	r28
   16dbc:	1f 91       	pop	r17
   16dbe:	0f 91       	pop	r16
   16dc0:	08 95       	ret

00016dc2 <amigo_verify>:
   16dc2:	8f 92       	push	r8
   16dc4:	9f 92       	push	r9
   16dc6:	af 92       	push	r10
   16dc8:	bf 92       	push	r11
   16dca:	ef 92       	push	r14
   16dcc:	ff 92       	push	r15
   16dce:	0f 93       	push	r16
   16dd0:	1f 93       	push	r17
   16dd2:	cf 93       	push	r28
   16dd4:	df 93       	push	r29
   16dd6:	7c 01       	movw	r14, r24
   16dd8:	60 ee       	ldi	r22, 0xE0	; 224
   16dda:	74 e1       	ldi	r23, 0x14	; 20
   16ddc:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <AMIGOs>
   16de0:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <AMIGOs+0x1>
   16de4:	c5 dd       	rcall	.-1142   	; 0x16970 <amigo_chs_to_logical>
   16de6:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   16dea:	25 ff       	sbrs	r18, 5
   16dec:	15 c0       	rjmp	.+42     	; 0x16e18 <amigo_verify+0x56>
   16dee:	ff 92       	push	r15
   16df0:	ef 92       	push	r14
   16df2:	9f 93       	push	r25
   16df4:	8f 93       	push	r24
   16df6:	7f 93       	push	r23
   16df8:	6f 93       	push	r22
   16dfa:	8b e0       	ldi	r24, 0x0B	; 11
   16dfc:	9f e2       	ldi	r25, 0x2F	; 47
   16dfe:	1f 92       	push	r1
   16e00:	9f 93       	push	r25
   16e02:	8f 93       	push	r24
   16e04:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16e08:	8d b7       	in	r24, 0x3d	; 61
   16e0a:	9e b7       	in	r25, 0x3e	; 62
   16e0c:	09 96       	adiw	r24, 0x09	; 9
   16e0e:	0f b6       	in	r0, 0x3f	; 63
   16e10:	f8 94       	cli
   16e12:	9e bf       	out	0x3e, r25	; 62
   16e14:	0f be       	out	0x3f, r0	; 63
   16e16:	8d bf       	out	0x3d, r24	; 61
   16e18:	e7 01       	movw	r28, r14
   16e1a:	20 97       	sbiw	r28, 0x00	; 0
   16e1c:	09 f4       	brne	.+2      	; 0x16e20 <amigo_verify+0x5e>
   16e1e:	49 c0       	rjmp	.+146    	; 0x16eb2 <amigo_verify+0xf0>
   16e20:	6d ee       	ldi	r22, 0xED	; 237
   16e22:	74 e1       	ldi	r23, 0x14	; 20
   16e24:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <AMIGOs>
   16e28:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <AMIGOs+0x1>
   16e2c:	a1 dd       	rcall	.-1214   	; 0x16970 <amigo_chs_to_logical>
   16e2e:	4b 01       	movw	r8, r22
   16e30:	5c 01       	movw	r10, r24
   16e32:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16e36:	86 fd       	sbrc	r24, 6
   16e38:	0e 94 27 85 	call	0x10a4e	; 0x10a4e <gpib_timer_elapsed_begin>
   16e3c:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <AMIGOp>
   16e40:	90 91 64 18 	lds	r25, 0x1864	; 0x801864 <AMIGOp+0x1>
   16e44:	e0 90 61 18 	lds	r14, 0x1861	; 0x801861 <AMIGOs>
   16e48:	f0 90 62 18 	lds	r15, 0x1862	; 0x801862 <AMIGOs+0x1>
   16e4c:	e7 e0       	ldi	r30, 0x07	; 7
   16e4e:	ee 0e       	add	r14, r30
   16e50:	f1 1c       	adc	r15, r1
   16e52:	fc 01       	movw	r30, r24
   16e54:	05 a1       	ldd	r16, Z+37	; 0x25
   16e56:	16 a1       	ldd	r17, Z+38	; 0x26
   16e58:	22 ee       	ldi	r18, 0xE2	; 226
   16e5a:	3b e1       	ldi	r19, 0x1B	; 27
   16e5c:	b5 01       	movw	r22, r10
   16e5e:	a4 01       	movw	r20, r8
   16e60:	02 96       	adiw	r24, 0x02	; 2
   16e62:	0e 94 79 84 	call	0x108f2	; 0x108f2 <dbf_open_read>
   16e66:	7c 01       	movw	r14, r24
   16e68:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16e6c:	86 ff       	sbrs	r24, 6
   16e6e:	04 c0       	rjmp	.+8      	; 0x16e78 <amigo_verify+0xb6>
   16e70:	85 ef       	ldi	r24, 0xF5	; 245
   16e72:	9f e0       	ldi	r25, 0x0F	; 15
   16e74:	0e 94 39 85 	call	0x10a72	; 0x10a72 <gpib_timer_elapsed_end>
   16e78:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16e7c:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16e80:	85 a1       	ldd	r24, Z+37	; 0x25
   16e82:	96 a1       	ldd	r25, Z+38	; 0x26
   16e84:	e8 16       	cp	r14, r24
   16e86:	f9 06       	cpc	r15, r25
   16e88:	61 f0       	breq	.+24     	; 0x16ea2 <amigo_verify+0xe0>
   16e8a:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16e8e:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16e92:	81 e0       	ldi	r24, 0x01	; 1
   16e94:	86 83       	std	Z+6, r24	; 0x06
   16e96:	87 81       	ldd	r24, Z+7	; 0x07
   16e98:	90 85       	ldd	r25, Z+8	; 0x08
   16e9a:	81 60       	ori	r24, 0x01	; 1
   16e9c:	90 87       	std	Z+8, r25	; 0x08
   16e9e:	87 83       	std	Z+7, r24	; 0x07
   16ea0:	0b c0       	rjmp	.+22     	; 0x16eb8 <amigo_verify+0xf6>
   16ea2:	85 ef       	ldi	r24, 0xF5	; 245
   16ea4:	94 e1       	ldi	r25, 0x14	; 20
   16ea6:	39 df       	rcall	.-398    	; 0x16d1a <amigo_increment>
   16ea8:	21 97       	sbiw	r28, 0x01	; 1
   16eaa:	89 2b       	or	r24, r25
   16eac:	09 f4       	brne	.+2      	; 0x16eb0 <amigo_verify+0xee>
   16eae:	b5 cf       	rjmp	.-150    	; 0x16e1a <amigo_verify+0x58>
   16eb0:	03 c0       	rjmp	.+6      	; 0x16eb8 <amigo_verify+0xf6>
   16eb2:	c0 e0       	ldi	r28, 0x00	; 0
   16eb4:	d0 e0       	ldi	r29, 0x00	; 0
   16eb6:	02 c0       	rjmp	.+4      	; 0x16ebc <amigo_verify+0xfa>
   16eb8:	c1 e0       	ldi	r28, 0x01	; 1
   16eba:	d0 e0       	ldi	r29, 0x00	; 0
   16ebc:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16ec0:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16ec4:	81 81       	ldd	r24, Z+1	; 0x01
   16ec6:	90 e0       	ldi	r25, 0x00	; 0
   16ec8:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   16ecc:	ce 01       	movw	r24, r28
   16ece:	df 91       	pop	r29
   16ed0:	cf 91       	pop	r28
   16ed2:	1f 91       	pop	r17
   16ed4:	0f 91       	pop	r16
   16ed6:	ff 90       	pop	r15
   16ed8:	ef 90       	pop	r14
   16eda:	bf 90       	pop	r11
   16edc:	af 90       	pop	r10
   16ede:	9f 90       	pop	r9
   16ee0:	8f 90       	pop	r8
   16ee2:	08 95       	ret

00016ee4 <amigo_format>:
   16ee4:	ef 92       	push	r14
   16ee6:	ff 92       	push	r15
   16ee8:	0f 93       	push	r16
   16eea:	1f 93       	push	r17
   16eec:	cf 93       	push	r28
   16eee:	df 93       	push	r29
   16ef0:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16ef4:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16ef8:	15 82       	std	Z+5, r1	; 0x05
   16efa:	14 82       	std	Z+4, r1	; 0x04
   16efc:	13 82       	std	Z+3, r1	; 0x03
   16efe:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16f02:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16f06:	45 a1       	ldd	r20, Z+37	; 0x25
   16f08:	56 a1       	ldd	r21, Z+38	; 0x26
   16f0a:	68 2f       	mov	r22, r24
   16f0c:	70 e0       	ldi	r23, 0x00	; 0
   16f0e:	82 ee       	ldi	r24, 0xE2	; 226
   16f10:	9b e1       	ldi	r25, 0x1B	; 27
   16f12:	0e 94 fa e9 	call	0x1d3f4	; 0x1d3f4 <memset>
   16f16:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16f1a:	85 ff       	sbrs	r24, 5
   16f1c:	0a c0       	rjmp	.+20     	; 0x16f32 <amigo_format+0x4e>
   16f1e:	80 ed       	ldi	r24, 0xD0	; 208
   16f20:	9e e2       	ldi	r25, 0x2E	; 46
   16f22:	1f 92       	push	r1
   16f24:	9f 93       	push	r25
   16f26:	8f 93       	push	r24
   16f28:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16f2c:	0f 90       	pop	r0
   16f2e:	0f 90       	pop	r0
   16f30:	0f 90       	pop	r0
   16f32:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16f36:	86 fd       	sbrc	r24, 6
   16f38:	0e 94 27 85 	call	0x10a4e	; 0x10a4e <gpib_timer_elapsed_begin>
   16f3c:	6c ef       	ldi	r22, 0xFC	; 252
   16f3e:	74 e1       	ldi	r23, 0x14	; 20
   16f40:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <AMIGOs>
   16f44:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <AMIGOs+0x1>
   16f48:	13 dd       	rcall	.-1498   	; 0x16970 <amigo_chs_to_logical>
   16f4a:	ab 01       	movw	r20, r22
   16f4c:	bc 01       	movw	r22, r24
   16f4e:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <AMIGOp>
   16f52:	90 91 64 18 	lds	r25, 0x1864	; 0x801864 <AMIGOp+0x1>
   16f56:	e0 90 61 18 	lds	r14, 0x1861	; 0x801861 <AMIGOs>
   16f5a:	f0 90 62 18 	lds	r15, 0x1862	; 0x801862 <AMIGOs+0x1>
   16f5e:	27 e0       	ldi	r18, 0x07	; 7
   16f60:	e2 0e       	add	r14, r18
   16f62:	f1 1c       	adc	r15, r1
   16f64:	fc 01       	movw	r30, r24
   16f66:	05 a1       	ldd	r16, Z+37	; 0x25
   16f68:	16 a1       	ldd	r17, Z+38	; 0x26
   16f6a:	22 ee       	ldi	r18, 0xE2	; 226
   16f6c:	3b e1       	ldi	r19, 0x1B	; 27
   16f6e:	02 96       	adiw	r24, 0x02	; 2
   16f70:	0e 94 d0 84 	call	0x109a0	; 0x109a0 <dbf_open_write>
   16f74:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16f78:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16f7c:	25 a1       	ldd	r18, Z+37	; 0x25
   16f7e:	36 a1       	ldd	r19, Z+38	; 0x26
   16f80:	82 17       	cp	r24, r18
   16f82:	93 07       	cpc	r25, r19
   16f84:	71 f0       	breq	.+28     	; 0x16fa2 <amigo_format+0xbe>
   16f86:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16f8a:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16f8e:	87 81       	ldd	r24, Z+7	; 0x07
   16f90:	90 85       	ldd	r25, Z+8	; 0x08
   16f92:	82 60       	ori	r24, 0x02	; 2
   16f94:	90 87       	std	Z+8, r25	; 0x08
   16f96:	87 83       	std	Z+7, r24	; 0x07
   16f98:	81 e0       	ldi	r24, 0x01	; 1
   16f9a:	86 83       	std	Z+6, r24	; 0x06
   16f9c:	c1 e0       	ldi	r28, 0x01	; 1
   16f9e:	d0 e0       	ldi	r29, 0x00	; 0
   16fa0:	0f c0       	rjmp	.+30     	; 0x16fc0 <amigo_format+0xdc>
   16fa2:	80 e0       	ldi	r24, 0x00	; 0
   16fa4:	90 e0       	ldi	r25, 0x00	; 0
   16fa6:	b9 de       	rcall	.-654    	; 0x16d1a <amigo_increment>
   16fa8:	89 2b       	or	r24, r25
   16faa:	41 f2       	breq	.-112    	; 0x16f3c <amigo_format+0x58>
   16fac:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16fb0:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16fb4:	15 82       	std	Z+5, r1	; 0x05
   16fb6:	14 82       	std	Z+4, r1	; 0x04
   16fb8:	13 82       	std	Z+3, r1	; 0x03
   16fba:	16 82       	std	Z+6, r1	; 0x06
   16fbc:	c0 e0       	ldi	r28, 0x00	; 0
   16fbe:	d0 e0       	ldi	r29, 0x00	; 0
   16fc0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16fc4:	86 ff       	sbrs	r24, 6
   16fc6:	04 c0       	rjmp	.+8      	; 0x16fd0 <amigo_format+0xec>
   16fc8:	8c ef       	ldi	r24, 0xFC	; 252
   16fca:	94 e1       	ldi	r25, 0x14	; 20
   16fcc:	0e 94 39 85 	call	0x10a72	; 0x10a72 <gpib_timer_elapsed_end>
   16fd0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16fd4:	85 ff       	sbrs	r24, 5
   16fd6:	0a c0       	rjmp	.+20     	; 0x16fec <amigo_format+0x108>
   16fd8:	8b eb       	ldi	r24, 0xBB	; 187
   16fda:	9e e2       	ldi	r25, 0x2E	; 46
   16fdc:	1f 92       	push	r1
   16fde:	9f 93       	push	r25
   16fe0:	8f 93       	push	r24
   16fe2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   16fe6:	0f 90       	pop	r0
   16fe8:	0f 90       	pop	r0
   16fea:	0f 90       	pop	r0
   16fec:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16ff0:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16ff4:	81 81       	ldd	r24, Z+1	; 0x01
   16ff6:	90 e0       	ldi	r25, 0x00	; 0
   16ff8:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   16ffc:	ce 01       	movw	r24, r28
   16ffe:	cd b7       	in	r28, 0x3d	; 61
   17000:	de b7       	in	r29, 0x3e	; 62
   17002:	e6 e0       	ldi	r30, 0x06	; 6
   17004:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

00017008 <amigo_buffered_read>:
   17008:	8f 92       	push	r8
   1700a:	9f 92       	push	r9
   1700c:	af 92       	push	r10
   1700e:	bf 92       	push	r11
   17010:	ef 92       	push	r14
   17012:	ff 92       	push	r15
   17014:	0f 93       	push	r16
   17016:	1f 93       	push	r17
   17018:	cf 93       	push	r28
   1701a:	df 93       	push	r29
   1701c:	00 d0       	rcall	.+0      	; 0x1701e <amigo_buffered_read+0x16>
   1701e:	cd b7       	in	r28, 0x3d	; 61
   17020:	de b7       	in	r29, 0x3e	; 62
   17022:	63 e0       	ldi	r22, 0x03	; 3
   17024:	75 e1       	ldi	r23, 0x15	; 21
   17026:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <AMIGOs>
   1702a:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <AMIGOs+0x1>
   1702e:	a0 dc       	rcall	.-1728   	; 0x16970 <amigo_chs_to_logical>
   17030:	4b 01       	movw	r8, r22
   17032:	5c 01       	movw	r10, r24
   17034:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17038:	86 fd       	sbrc	r24, 6
   1703a:	0e 94 27 85 	call	0x10a4e	; 0x10a4e <gpib_timer_elapsed_begin>
   1703e:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <AMIGOp>
   17042:	90 91 64 18 	lds	r25, 0x1864	; 0x801864 <AMIGOp+0x1>
   17046:	e0 90 61 18 	lds	r14, 0x1861	; 0x801861 <AMIGOs>
   1704a:	f0 90 62 18 	lds	r15, 0x1862	; 0x801862 <AMIGOs+0x1>
   1704e:	27 e0       	ldi	r18, 0x07	; 7
   17050:	e2 0e       	add	r14, r18
   17052:	f1 1c       	adc	r15, r1
   17054:	fc 01       	movw	r30, r24
   17056:	05 a1       	ldd	r16, Z+37	; 0x25
   17058:	16 a1       	ldd	r17, Z+38	; 0x26
   1705a:	22 ee       	ldi	r18, 0xE2	; 226
   1705c:	3b e1       	ldi	r19, 0x1B	; 27
   1705e:	b5 01       	movw	r22, r10
   17060:	a4 01       	movw	r20, r8
   17062:	02 96       	adiw	r24, 0x02	; 2
   17064:	0e 94 79 84 	call	0x108f2	; 0x108f2 <dbf_open_read>
   17068:	7c 01       	movw	r14, r24
   1706a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1706e:	86 ff       	sbrs	r24, 6
   17070:	04 c0       	rjmp	.+8      	; 0x1707a <amigo_buffered_read+0x72>
   17072:	85 ef       	ldi	r24, 0xF5	; 245
   17074:	9f e0       	ldi	r25, 0x0F	; 15
   17076:	0e 94 39 85 	call	0x10a72	; 0x10a72 <gpib_timer_elapsed_end>
   1707a:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   1707e:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17082:	85 a1       	ldd	r24, Z+37	; 0x25
   17084:	96 a1       	ldd	r25, Z+38	; 0x26
   17086:	e8 16       	cp	r14, r24
   17088:	f9 06       	cpc	r15, r25
   1708a:	39 f0       	breq	.+14     	; 0x1709a <amigo_buffered_read+0x92>
   1708c:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17090:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17094:	81 e0       	ldi	r24, 0x01	; 1
   17096:	86 83       	std	Z+6, r24	; 0x06
   17098:	6c c0       	rjmp	.+216    	; 0x17172 <amigo_buffered_read+0x16a>
   1709a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1709e:	87 fd       	sbrc	r24, 7
   170a0:	0e 94 27 85 	call	0x10a4e	; 0x10a4e <gpib_timer_elapsed_begin>
   170a4:	80 e0       	ldi	r24, 0x00	; 0
   170a6:	91 e0       	ldi	r25, 0x01	; 1
   170a8:	9a 83       	std	Y+2, r25	; 0x02
   170aa:	89 83       	std	Y+1, r24	; 0x01
   170ac:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   170b0:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   170b4:	65 a1       	ldd	r22, Z+37	; 0x25
   170b6:	76 a1       	ldd	r23, Z+38	; 0x26
   170b8:	ae 01       	movw	r20, r28
   170ba:	4f 5f       	subi	r20, 0xFF	; 255
   170bc:	5f 4f       	sbci	r21, 0xFF	; 255
   170be:	82 ee       	ldi	r24, 0xE2	; 226
   170c0:	9b e1       	ldi	r25, 0x1B	; 27
   170c2:	0e 94 2f 8b 	call	0x1165e	; 0x1165e <gpib_write_str>
   170c6:	7c 01       	movw	r14, r24
   170c8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   170cc:	87 ff       	sbrs	r24, 7
   170ce:	04 c0       	rjmp	.+8      	; 0x170d8 <amigo_buffered_read+0xd0>
   170d0:	81 e1       	ldi	r24, 0x11	; 17
   170d2:	95 e1       	ldi	r25, 0x15	; 21
   170d4:	0e 94 39 85 	call	0x10a72	; 0x10a72 <gpib_timer_elapsed_end>
   170d8:	89 81       	ldd	r24, Y+1	; 0x01
   170da:	9a 81       	ldd	r25, Y+2	; 0x02
   170dc:	88 27       	eor	r24, r24
   170de:	90 7d       	andi	r25, 0xD0	; 208
   170e0:	89 2b       	or	r24, r25
   170e2:	49 f4       	brne	.+18     	; 0x170f6 <amigo_buffered_read+0xee>
   170e4:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   170e8:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   170ec:	85 a1       	ldd	r24, Z+37	; 0x25
   170ee:	96 a1       	ldd	r25, Z+38	; 0x26
   170f0:	e8 16       	cp	r14, r24
   170f2:	f9 06       	cpc	r15, r25
   170f4:	31 f1       	breq	.+76     	; 0x17142 <amigo_buffered_read+0x13a>
   170f6:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   170fa:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   170fe:	81 e0       	ldi	r24, 0x01	; 1
   17100:	86 83       	std	Z+6, r24	; 0x06
   17102:	87 81       	ldd	r24, Z+7	; 0x07
   17104:	90 85       	ldd	r25, Z+8	; 0x08
   17106:	80 62       	ori	r24, 0x20	; 32
   17108:	90 87       	std	Z+8, r25	; 0x08
   1710a:	87 83       	std	Z+7, r24	; 0x07
   1710c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17110:	80 ff       	sbrs	r24, 0
   17112:	0a c0       	rjmp	.+20     	; 0x17128 <amigo_buffered_read+0x120>
   17114:	81 ea       	ldi	r24, 0xA1	; 161
   17116:	9e e2       	ldi	r25, 0x2E	; 46
   17118:	1f 92       	push	r1
   1711a:	9f 93       	push	r25
   1711c:	8f 93       	push	r24
   1711e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17122:	0f 90       	pop	r0
   17124:	0f 90       	pop	r0
   17126:	0f 90       	pop	r0
   17128:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   1712c:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17130:	81 81       	ldd	r24, Z+1	; 0x01
   17132:	90 e0       	ldi	r25, 0x00	; 0
   17134:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   17138:	89 81       	ldd	r24, Y+1	; 0x01
   1713a:	9a 81       	ldd	r25, Y+2	; 0x02
   1713c:	88 27       	eor	r24, r24
   1713e:	90 7d       	andi	r25, 0xD0	; 208
   17140:	1a c0       	rjmp	.+52     	; 0x17176 <amigo_buffered_read+0x16e>
   17142:	83 e0       	ldi	r24, 0x03	; 3
   17144:	95 e1       	ldi	r25, 0x15	; 21
   17146:	e9 dd       	rcall	.-1070   	; 0x16d1a <amigo_increment>
   17148:	89 2b       	or	r24, r25
   1714a:	59 f0       	breq	.+22     	; 0x17162 <amigo_buffered_read+0x15a>
   1714c:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17150:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17154:	81 e0       	ldi	r24, 0x01	; 1
   17156:	86 83       	std	Z+6, r24	; 0x06
   17158:	87 81       	ldd	r24, Z+7	; 0x07
   1715a:	90 85       	ldd	r25, Z+8	; 0x08
   1715c:	84 60       	ori	r24, 0x04	; 4
   1715e:	90 87       	std	Z+8, r25	; 0x08
   17160:	87 83       	std	Z+7, r24	; 0x07
   17162:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17166:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   1716a:	81 81       	ldd	r24, Z+1	; 0x01
   1716c:	90 e0       	ldi	r25, 0x00	; 0
   1716e:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   17172:	80 e0       	ldi	r24, 0x00	; 0
   17174:	90 e0       	ldi	r25, 0x00	; 0
   17176:	0f 90       	pop	r0
   17178:	0f 90       	pop	r0
   1717a:	df 91       	pop	r29
   1717c:	cf 91       	pop	r28
   1717e:	1f 91       	pop	r17
   17180:	0f 91       	pop	r16
   17182:	ff 90       	pop	r15
   17184:	ef 90       	pop	r14
   17186:	bf 90       	pop	r11
   17188:	af 90       	pop	r10
   1718a:	9f 90       	pop	r9
   1718c:	8f 90       	pop	r8
   1718e:	08 95       	ret

00017190 <amigo_buffered_write>:
   17190:	8f 92       	push	r8
   17192:	9f 92       	push	r9
   17194:	af 92       	push	r10
   17196:	bf 92       	push	r11
   17198:	ef 92       	push	r14
   1719a:	ff 92       	push	r15
   1719c:	0f 93       	push	r16
   1719e:	1f 93       	push	r17
   171a0:	cf 93       	push	r28
   171a2:	df 93       	push	r29
   171a4:	00 d0       	rcall	.+0      	; 0x171a6 <amigo_buffered_write+0x16>
   171a6:	cd b7       	in	r28, 0x3d	; 61
   171a8:	de b7       	in	r29, 0x3e	; 62
   171aa:	6c e1       	ldi	r22, 0x1C	; 28
   171ac:	75 e1       	ldi	r23, 0x15	; 21
   171ae:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <AMIGOs>
   171b2:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <AMIGOs+0x1>
   171b6:	dc db       	rcall	.-2120   	; 0x16970 <amigo_chs_to_logical>
   171b8:	4b 01       	movw	r8, r22
   171ba:	5c 01       	movw	r10, r24
   171bc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   171c0:	87 fd       	sbrc	r24, 7
   171c2:	0e 94 27 85 	call	0x10a4e	; 0x10a4e <gpib_timer_elapsed_begin>
   171c6:	1a 82       	std	Y+2, r1	; 0x02
   171c8:	19 82       	std	Y+1, r1	; 0x01
   171ca:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   171ce:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   171d2:	65 a1       	ldd	r22, Z+37	; 0x25
   171d4:	76 a1       	ldd	r23, Z+38	; 0x26
   171d6:	ae 01       	movw	r20, r28
   171d8:	4f 5f       	subi	r20, 0xFF	; 255
   171da:	5f 4f       	sbci	r21, 0xFF	; 255
   171dc:	82 ee       	ldi	r24, 0xE2	; 226
   171de:	9b e1       	ldi	r25, 0x1B	; 27
   171e0:	0e 94 81 8a 	call	0x11502	; 0x11502 <gpib_read_str>
   171e4:	7c 01       	movw	r14, r24
   171e6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   171ea:	87 ff       	sbrs	r24, 7
   171ec:	04 c0       	rjmp	.+8      	; 0x171f6 <amigo_buffered_write+0x66>
   171ee:	8b e2       	ldi	r24, 0x2B	; 43
   171f0:	95 e1       	ldi	r25, 0x15	; 21
   171f2:	0e 94 39 85 	call	0x10a72	; 0x10a72 <gpib_timer_elapsed_end>
   171f6:	89 81       	ldd	r24, Y+1	; 0x01
   171f8:	9a 81       	ldd	r25, Y+2	; 0x02
   171fa:	88 27       	eor	r24, r24
   171fc:	90 7d       	andi	r25, 0xD0	; 208
   171fe:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   17202:	89 2b       	or	r24, r25
   17204:	49 f4       	brne	.+18     	; 0x17218 <amigo_buffered_write+0x88>
   17206:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   1720a:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   1720e:	85 a1       	ldd	r24, Z+37	; 0x25
   17210:	96 a1       	ldd	r25, Z+38	; 0x26
   17212:	e8 16       	cp	r14, r24
   17214:	f9 06       	cpc	r15, r25
   17216:	c1 f0       	breq	.+48     	; 0x17248 <amigo_buffered_write+0xb8>
   17218:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   1721c:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17220:	81 e0       	ldi	r24, 0x01	; 1
   17222:	86 83       	std	Z+6, r24	; 0x06
   17224:	87 81       	ldd	r24, Z+7	; 0x07
   17226:	90 85       	ldd	r25, Z+8	; 0x08
   17228:	80 62       	ori	r24, 0x20	; 32
   1722a:	90 87       	std	Z+8, r25	; 0x08
   1722c:	87 83       	std	Z+7, r24	; 0x07
   1722e:	20 ff       	sbrs	r18, 0
   17230:	4e c0       	rjmp	.+156    	; 0x172ce <amigo_buffered_write+0x13e>
   17232:	82 e8       	ldi	r24, 0x82	; 130
   17234:	9e e2       	ldi	r25, 0x2E	; 46
   17236:	1f 92       	push	r1
   17238:	9f 93       	push	r25
   1723a:	8f 93       	push	r24
   1723c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17240:	0f 90       	pop	r0
   17242:	0f 90       	pop	r0
   17244:	0f 90       	pop	r0
   17246:	43 c0       	rjmp	.+134    	; 0x172ce <amigo_buffered_write+0x13e>
   17248:	26 fd       	sbrc	r18, 6
   1724a:	0e 94 27 85 	call	0x10a4e	; 0x10a4e <gpib_timer_elapsed_begin>
   1724e:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <AMIGOp>
   17252:	90 91 64 18 	lds	r25, 0x1864	; 0x801864 <AMIGOp+0x1>
   17256:	e0 90 61 18 	lds	r14, 0x1861	; 0x801861 <AMIGOs>
   1725a:	f0 90 62 18 	lds	r15, 0x1862	; 0x801862 <AMIGOs+0x1>
   1725e:	27 e0       	ldi	r18, 0x07	; 7
   17260:	e2 0e       	add	r14, r18
   17262:	f1 1c       	adc	r15, r1
   17264:	fc 01       	movw	r30, r24
   17266:	05 a1       	ldd	r16, Z+37	; 0x25
   17268:	16 a1       	ldd	r17, Z+38	; 0x26
   1726a:	22 ee       	ldi	r18, 0xE2	; 226
   1726c:	3b e1       	ldi	r19, 0x1B	; 27
   1726e:	b5 01       	movw	r22, r10
   17270:	a4 01       	movw	r20, r8
   17272:	02 96       	adiw	r24, 0x02	; 2
   17274:	0e 94 d0 84 	call	0x109a0	; 0x109a0 <dbf_open_write>
   17278:	7c 01       	movw	r14, r24
   1727a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1727e:	86 ff       	sbrs	r24, 6
   17280:	04 c0       	rjmp	.+8      	; 0x1728a <amigo_buffered_write+0xfa>
   17282:	8a ee       	ldi	r24, 0xEA	; 234
   17284:	9f e0       	ldi	r25, 0x0F	; 15
   17286:	0e 94 39 85 	call	0x10a72	; 0x10a72 <gpib_timer_elapsed_end>
   1728a:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   1728e:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17292:	85 a1       	ldd	r24, Z+37	; 0x25
   17294:	96 a1       	ldd	r25, Z+38	; 0x26
   17296:	e8 16       	cp	r14, r24
   17298:	f9 06       	cpc	r15, r25
   1729a:	49 f0       	breq	.+18     	; 0x172ae <amigo_buffered_write+0x11e>
   1729c:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   172a0:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   172a4:	81 e0       	ldi	r24, 0x01	; 1
   172a6:	86 83       	std	Z+6, r24	; 0x06
   172a8:	80 e0       	ldi	r24, 0x00	; 0
   172aa:	90 e0       	ldi	r25, 0x00	; 0
   172ac:	1c c0       	rjmp	.+56     	; 0x172e6 <amigo_buffered_write+0x156>
   172ae:	8c e1       	ldi	r24, 0x1C	; 28
   172b0:	95 e1       	ldi	r25, 0x15	; 21
   172b2:	33 dd       	rcall	.-1434   	; 0x16d1a <amigo_increment>
   172b4:	89 2b       	or	r24, r25
   172b6:	59 f0       	breq	.+22     	; 0x172ce <amigo_buffered_write+0x13e>
   172b8:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   172bc:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   172c0:	81 e0       	ldi	r24, 0x01	; 1
   172c2:	86 83       	std	Z+6, r24	; 0x06
   172c4:	87 81       	ldd	r24, Z+7	; 0x07
   172c6:	90 85       	ldd	r25, Z+8	; 0x08
   172c8:	84 60       	ori	r24, 0x04	; 4
   172ca:	90 87       	std	Z+8, r25	; 0x08
   172cc:	87 83       	std	Z+7, r24	; 0x07
   172ce:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   172d2:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   172d6:	81 81       	ldd	r24, Z+1	; 0x01
   172d8:	90 e0       	ldi	r25, 0x00	; 0
   172da:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   172de:	89 81       	ldd	r24, Y+1	; 0x01
   172e0:	9a 81       	ldd	r25, Y+2	; 0x02
   172e2:	88 27       	eor	r24, r24
   172e4:	90 7d       	andi	r25, 0xD0	; 208
   172e6:	0f 90       	pop	r0
   172e8:	0f 90       	pop	r0
   172ea:	df 91       	pop	r29
   172ec:	cf 91       	pop	r28
   172ee:	1f 91       	pop	r17
   172f0:	0f 91       	pop	r16
   172f2:	ff 90       	pop	r15
   172f4:	ef 90       	pop	r14
   172f6:	bf 90       	pop	r11
   172f8:	af 90       	pop	r10
   172fa:	9f 90       	pop	r9
   172fc:	8f 90       	pop	r8
   172fe:	08 95       	ret

00017300 <amigo_cmd_dsj>:
   17300:	a3 e0       	ldi	r26, 0x03	; 3
   17302:	b0 e0       	ldi	r27, 0x00	; 0
   17304:	e6 e8       	ldi	r30, 0x86	; 134
   17306:	f9 eb       	ldi	r31, 0xB9	; 185
   17308:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
   1730c:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17310:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17314:	86 81       	ldd	r24, Z+6	; 0x06
   17316:	8b 83       	std	Y+3, r24	; 0x03
   17318:	80 e0       	ldi	r24, 0x00	; 0
   1731a:	91 e0       	ldi	r25, 0x01	; 1
   1731c:	9a 83       	std	Y+2, r25	; 0x02
   1731e:	89 83       	std	Y+1, r24	; 0x01
   17320:	ae 01       	movw	r20, r28
   17322:	4f 5f       	subi	r20, 0xFF	; 255
   17324:	5f 4f       	sbci	r21, 0xFF	; 255
   17326:	61 e0       	ldi	r22, 0x01	; 1
   17328:	70 e0       	ldi	r23, 0x00	; 0
   1732a:	ce 01       	movw	r24, r28
   1732c:	03 96       	adiw	r24, 0x03	; 3
   1732e:	0e 94 2f 8b 	call	0x1165e	; 0x1165e <gpib_write_str>
   17332:	29 81       	ldd	r18, Y+1	; 0x01
   17334:	3a 81       	ldd	r19, Y+2	; 0x02
   17336:	22 27       	eor	r18, r18
   17338:	30 7d       	andi	r19, 0xD0	; 208
   1733a:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   1733e:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17342:	23 2b       	or	r18, r19
   17344:	29 f0       	breq	.+10     	; 0x17350 <amigo_cmd_dsj+0x50>
   17346:	27 81       	ldd	r18, Z+7	; 0x07
   17348:	30 85       	ldd	r19, Z+8	; 0x08
   1734a:	20 62       	ori	r18, 0x20	; 32
   1734c:	30 87       	std	Z+8, r19	; 0x08
   1734e:	27 83       	std	Z+7, r18	; 0x07
   17350:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   17354:	01 97       	sbiw	r24, 0x01	; 1
   17356:	c1 f0       	breq	.+48     	; 0x17388 <amigo_cmd_dsj+0x88>
   17358:	81 e0       	ldi	r24, 0x01	; 1
   1735a:	86 83       	std	Z+6, r24	; 0x06
   1735c:	87 81       	ldd	r24, Z+7	; 0x07
   1735e:	90 85       	ldd	r25, Z+8	; 0x08
   17360:	80 62       	ori	r24, 0x20	; 32
   17362:	90 87       	std	Z+8, r25	; 0x08
   17364:	87 83       	std	Z+7, r24	; 0x07
   17366:	20 ff       	sbrs	r18, 0
   17368:	0a c0       	rjmp	.+20     	; 0x1737e <amigo_cmd_dsj+0x7e>
   1736a:	88 e6       	ldi	r24, 0x68	; 104
   1736c:	9e e2       	ldi	r25, 0x2E	; 46
   1736e:	1f 92       	push	r1
   17370:	9f 93       	push	r25
   17372:	8f 93       	push	r24
   17374:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17378:	0f 90       	pop	r0
   1737a:	0f 90       	pop	r0
   1737c:	0f 90       	pop	r0
   1737e:	89 81       	ldd	r24, Y+1	; 0x01
   17380:	9a 81       	ldd	r25, Y+2	; 0x02
   17382:	88 27       	eor	r24, r24
   17384:	90 7d       	andi	r25, 0xD0	; 208
   17386:	1a c0       	rjmp	.+52     	; 0x173bc <amigo_cmd_dsj+0xbc>
   17388:	25 ff       	sbrs	r18, 5
   1738a:	0f c0       	rjmp	.+30     	; 0x173aa <amigo_cmd_dsj+0xaa>
   1738c:	86 81       	ldd	r24, Z+6	; 0x06
   1738e:	1f 92       	push	r1
   17390:	8f 93       	push	r24
   17392:	8b e5       	ldi	r24, 0x5B	; 91
   17394:	9e e2       	ldi	r25, 0x2E	; 46
   17396:	1f 92       	push	r1
   17398:	9f 93       	push	r25
   1739a:	8f 93       	push	r24
   1739c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   173a0:	0f 90       	pop	r0
   173a2:	0f 90       	pop	r0
   173a4:	0f 90       	pop	r0
   173a6:	0f 90       	pop	r0
   173a8:	0f 90       	pop	r0
   173aa:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   173ae:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   173b2:	16 82       	std	Z+6, r1	; 0x06
   173b4:	10 86       	std	Z+8, r1	; 0x08
   173b6:	17 82       	std	Z+7, r1	; 0x07
   173b8:	80 e0       	ldi	r24, 0x00	; 0
   173ba:	90 e0       	ldi	r25, 0x00	; 0
   173bc:	23 96       	adiw	r28, 0x03	; 3
   173be:	e2 e0       	ldi	r30, 0x02	; 2
   173c0:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

000173c4 <amigo_cmd_clear>:
   173c4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   173c8:	85 ff       	sbrs	r24, 5
   173ca:	0a c0       	rjmp	.+20     	; 0x173e0 <amigo_cmd_clear+0x1c>
   173cc:	82 e2       	ldi	r24, 0x22	; 34
   173ce:	9e e2       	ldi	r25, 0x2E	; 46
   173d0:	1f 92       	push	r1
   173d2:	9f 93       	push	r25
   173d4:	8f 93       	push	r24
   173d6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   173da:	0f 90       	pop	r0
   173dc:	0f 90       	pop	r0
   173de:	0f 90       	pop	r0
   173e0:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   173e4:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   173e8:	15 82       	std	Z+5, r1	; 0x05
   173ea:	14 82       	std	Z+4, r1	; 0x04
   173ec:	13 82       	std	Z+3, r1	; 0x03
   173ee:	16 82       	std	Z+6, r1	; 0x06
   173f0:	10 86       	std	Z+8, r1	; 0x08
   173f2:	17 82       	std	Z+7, r1	; 0x07
   173f4:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   173f8:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   173fc:	81 81       	ldd	r24, Z+1	; 0x01
   173fe:	90 e0       	ldi	r25, 0x00	; 0
   17400:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
   17404:	80 e0       	ldi	r24, 0x00	; 0
   17406:	90 e0       	ldi	r25, 0x00	; 0
   17408:	08 95       	ret

0001740a <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   1740a:	0f 93       	push	r16
   1740c:	1f 93       	push	r17
   1740e:	cf 93       	push	r28
   17410:	df 93       	push	r29
   17412:	c8 2f       	mov	r28, r24
   17414:	d6 2f       	mov	r29, r22
   17416:	14 2f       	mov	r17, r20
   17418:	05 2f       	mov	r16, r21
    if(AMIGO_is_MLA(listening))
   1741a:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   1741e:	90 e0       	ldi	r25, 0x00	; 0
   17420:	0e 94 19 8c 	call	0x11832	; 0x11832 <AMIGO_is_MLA>
   17424:	20 91 e6 1d 	lds	r18, 0x1DE6	; 0x801de6 <talking>
   17428:	89 2b       	or	r24, r25
   1742a:	19 f1       	breq	.+70     	; 0x17472 <amigo_todo_op+0x68>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   1742c:	1f 92       	push	r1
   1742e:	2f 93       	push	r18
   17430:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17434:	1f 92       	push	r1
   17436:	8f 93       	push	r24
   17438:	0f 93       	push	r16
   1743a:	1f 93       	push	r17
   1743c:	1f 92       	push	r1
   1743e:	df 93       	push	r29
   17440:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17444:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17448:	80 81       	ld	r24, Z
   1744a:	1f 92       	push	r1
   1744c:	8f 93       	push	r24
   1744e:	1f 92       	push	r1
   17450:	cf 93       	push	r28
   17452:	8b eb       	ldi	r24, 0xBB	; 187
   17454:	9d e2       	ldi	r25, 0x2D	; 45
   17456:	1f 92       	push	r1
   17458:	9f 93       	push	r25
   1745a:	8f 93       	push	r24
   1745c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17460:	8d b7       	in	r24, 0x3d	; 61
   17462:	9e b7       	in	r25, 0x3e	; 62
   17464:	0f 96       	adiw	r24, 0x0f	; 15
   17466:	0f b6       	in	r0, 0x3f	; 63
   17468:	f8 94       	cli
   1746a:	9e bf       	out	0x3e, r25	; 62
   1746c:	0f be       	out	0x3f, r0	; 63
   1746e:	8d bf       	out	0x3d, r24	; 61
   17470:	66 c0       	rjmp	.+204    	; 0x1753e <amigo_todo_op+0x134>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   17472:	82 2f       	mov	r24, r18
   17474:	90 e0       	ldi	r25, 0x00	; 0
   17476:	0e 94 28 8c 	call	0x11850	; 0x11850 <AMIGO_is_MTA>
   1747a:	30 91 e8 1d 	lds	r19, 0x1DE8	; 0x801de8 <listening>
   1747e:	20 91 e6 1d 	lds	r18, 0x1DE6	; 0x801de6 <talking>
   17482:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17486:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   1748a:	89 2b       	or	r24, r25
   1748c:	e9 f0       	breq	.+58     	; 0x174c8 <amigo_todo_op+0xbe>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   1748e:	1f 92       	push	r1
   17490:	2f 93       	push	r18
   17492:	1f 92       	push	r1
   17494:	3f 93       	push	r19
   17496:	0f 93       	push	r16
   17498:	1f 93       	push	r17
   1749a:	1f 92       	push	r1
   1749c:	df 93       	push	r29
   1749e:	80 81       	ld	r24, Z
   174a0:	1f 92       	push	r1
   174a2:	8f 93       	push	r24
   174a4:	1f 92       	push	r1
   174a6:	cf 93       	push	r28
   174a8:	84 e5       	ldi	r24, 0x54	; 84
   174aa:	9d e2       	ldi	r25, 0x2D	; 45
   174ac:	1f 92       	push	r1
   174ae:	9f 93       	push	r25
   174b0:	8f 93       	push	r24
   174b2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   174b6:	8d b7       	in	r24, 0x3d	; 61
   174b8:	9e b7       	in	r25, 0x3e	; 62
   174ba:	0f 96       	adiw	r24, 0x0f	; 15
   174bc:	0f b6       	in	r0, 0x3f	; 63
   174be:	f8 94       	cli
   174c0:	9e bf       	out	0x3e, r25	; 62
   174c2:	0f be       	out	0x3f, r0	; 63
   174c4:	8d bf       	out	0x3d, r24	; 61
   174c6:	3b c0       	rjmp	.+118    	; 0x1753e <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   174c8:	2f 35       	cpi	r18, 0x5F	; 95
   174ca:	e9 f4       	brne	.+58     	; 0x17506 <amigo_todo_op+0xfc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   174cc:	1f 92       	push	r1
   174ce:	2f 93       	push	r18
   174d0:	1f 92       	push	r1
   174d2:	3f 93       	push	r19
   174d4:	0f 93       	push	r16
   174d6:	1f 93       	push	r17
   174d8:	1f 92       	push	r1
   174da:	df 93       	push	r29
   174dc:	80 81       	ld	r24, Z
   174de:	1f 92       	push	r1
   174e0:	8f 93       	push	r24
   174e2:	1f 92       	push	r1
   174e4:	cf 93       	push	r28
   174e6:	8d ee       	ldi	r24, 0xED	; 237
   174e8:	9c e2       	ldi	r25, 0x2C	; 44
   174ea:	1f 92       	push	r1
   174ec:	9f 93       	push	r25
   174ee:	8f 93       	push	r24
   174f0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   174f4:	8d b7       	in	r24, 0x3d	; 61
   174f6:	9e b7       	in	r25, 0x3e	; 62
   174f8:	0f 96       	adiw	r24, 0x0f	; 15
   174fa:	0f b6       	in	r0, 0x3f	; 63
   174fc:	f8 94       	cli
   174fe:	9e bf       	out	0x3e, r25	; 62
   17500:	0f be       	out	0x3f, r0	; 63
   17502:	8d bf       	out	0x3d, r24	; 61
   17504:	1c c0       	rjmp	.+56     	; 0x1753e <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17506:	1f 92       	push	r1
   17508:	2f 93       	push	r18
   1750a:	1f 92       	push	r1
   1750c:	3f 93       	push	r19
   1750e:	0f 93       	push	r16
   17510:	1f 93       	push	r17
   17512:	1f 92       	push	r1
   17514:	df 93       	push	r29
   17516:	80 81       	ld	r24, Z
   17518:	1f 92       	push	r1
   1751a:	8f 93       	push	r24
   1751c:	1f 92       	push	r1
   1751e:	cf 93       	push	r28
   17520:	88 e8       	ldi	r24, 0x88	; 136
   17522:	9c e2       	ldi	r25, 0x2C	; 44
   17524:	1f 92       	push	r1
   17526:	9f 93       	push	r25
   17528:	8f 93       	push	r24
   1752a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1752e:	8d b7       	in	r24, 0x3d	; 61
   17530:	9e b7       	in	r25, 0x3e	; 62
   17532:	0f 96       	adiw	r24, 0x0f	; 15
   17534:	0f b6       	in	r0, 0x3f	; 63
   17536:	f8 94       	cli
   17538:	9e bf       	out	0x3e, r25	; 62
   1753a:	0f be       	out	0x3f, r0	; 63
   1753c:	8d bf       	out	0x3d, r24	; 61
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1753e:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17542:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17546:	81 81       	ldd	r24, Z+1	; 0x01
   17548:	90 e0       	ldi	r25, 0x00	; 0
   1754a:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
    return(0);
}
   1754e:	80 e0       	ldi	r24, 0x00	; 0
   17550:	90 e0       	ldi	r25, 0x00	; 0
   17552:	df 91       	pop	r29
   17554:	cf 91       	pop	r28
   17556:	1f 91       	pop	r17
   17558:	0f 91       	pop	r16
   1755a:	08 95       	ret

0001755c <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   1755c:	cf 93       	push	r28
   1755e:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   17560:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17564:	90 e0       	ldi	r25, 0x00	; 0
   17566:	0e 94 19 8c 	call	0x11832	; 0x11832 <AMIGO_is_MLA>
   1756a:	20 91 e6 1d 	lds	r18, 0x1DE6	; 0x801de6 <talking>
   1756e:	89 2b       	or	r24, r25
   17570:	f9 f0       	breq	.+62     	; 0x175b0 <amigo_todo+0x54>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17572:	1f 92       	push	r1
   17574:	2f 93       	push	r18
   17576:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   1757a:	1f 92       	push	r1
   1757c:	8f 93       	push	r24
   1757e:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17582:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17586:	80 81       	ld	r24, Z
   17588:	1f 92       	push	r1
   1758a:	8f 93       	push	r24
   1758c:	1f 92       	push	r1
   1758e:	cf 93       	push	r28
   17590:	88 e3       	ldi	r24, 0x38	; 56
   17592:	9c e2       	ldi	r25, 0x2C	; 44
   17594:	1f 92       	push	r1
   17596:	9f 93       	push	r25
   17598:	8f 93       	push	r24
   1759a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1759e:	8d b7       	in	r24, 0x3d	; 61
   175a0:	9e b7       	in	r25, 0x3e	; 62
   175a2:	0b 96       	adiw	r24, 0x0b	; 11
   175a4:	0f b6       	in	r0, 0x3f	; 63
   175a6:	f8 94       	cli
   175a8:	9e bf       	out	0x3e, r25	; 62
   175aa:	0f be       	out	0x3f, r0	; 63
   175ac:	8d bf       	out	0x3d, r24	; 61
   175ae:	5a c0       	rjmp	.+180    	; 0x17664 <amigo_todo+0x108>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   175b0:	82 2f       	mov	r24, r18
   175b2:	90 e0       	ldi	r25, 0x00	; 0
   175b4:	0e 94 28 8c 	call	0x11850	; 0x11850 <AMIGO_is_MTA>
   175b8:	30 91 e8 1d 	lds	r19, 0x1DE8	; 0x801de8 <listening>
   175bc:	20 91 e6 1d 	lds	r18, 0x1DE6	; 0x801de6 <talking>
   175c0:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   175c4:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   175c8:	89 2b       	or	r24, r25
   175ca:	c9 f0       	breq	.+50     	; 0x175fe <amigo_todo+0xa2>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   175cc:	1f 92       	push	r1
   175ce:	2f 93       	push	r18
   175d0:	1f 92       	push	r1
   175d2:	3f 93       	push	r19
   175d4:	80 81       	ld	r24, Z
   175d6:	1f 92       	push	r1
   175d8:	8f 93       	push	r24
   175da:	1f 92       	push	r1
   175dc:	cf 93       	push	r28
   175de:	88 ee       	ldi	r24, 0xE8	; 232
   175e0:	9b e2       	ldi	r25, 0x2B	; 43
   175e2:	1f 92       	push	r1
   175e4:	9f 93       	push	r25
   175e6:	8f 93       	push	r24
   175e8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   175ec:	8d b7       	in	r24, 0x3d	; 61
   175ee:	9e b7       	in	r25, 0x3e	; 62
   175f0:	0b 96       	adiw	r24, 0x0b	; 11
   175f2:	0f b6       	in	r0, 0x3f	; 63
   175f4:	f8 94       	cli
   175f6:	9e bf       	out	0x3e, r25	; 62
   175f8:	0f be       	out	0x3f, r0	; 63
   175fa:	8d bf       	out	0x3d, r24	; 61
   175fc:	33 c0       	rjmp	.+102    	; 0x17664 <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   175fe:	2f 35       	cpi	r18, 0x5F	; 95
   17600:	c9 f4       	brne	.+50     	; 0x17634 <amigo_todo+0xd8>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17602:	1f 92       	push	r1
   17604:	2f 93       	push	r18
   17606:	1f 92       	push	r1
   17608:	3f 93       	push	r19
   1760a:	80 81       	ld	r24, Z
   1760c:	1f 92       	push	r1
   1760e:	8f 93       	push	r24
   17610:	1f 92       	push	r1
   17612:	cf 93       	push	r28
   17614:	88 e9       	ldi	r24, 0x98	; 152
   17616:	9b e2       	ldi	r25, 0x2B	; 43
   17618:	1f 92       	push	r1
   1761a:	9f 93       	push	r25
   1761c:	8f 93       	push	r24
   1761e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17622:	8d b7       	in	r24, 0x3d	; 61
   17624:	9e b7       	in	r25, 0x3e	; 62
   17626:	0b 96       	adiw	r24, 0x0b	; 11
   17628:	0f b6       	in	r0, 0x3f	; 63
   1762a:	f8 94       	cli
   1762c:	9e bf       	out	0x3e, r25	; 62
   1762e:	0f be       	out	0x3f, r0	; 63
   17630:	8d bf       	out	0x3d, r24	; 61
   17632:	18 c0       	rjmp	.+48     	; 0x17664 <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17634:	1f 92       	push	r1
   17636:	2f 93       	push	r18
   17638:	1f 92       	push	r1
   1763a:	3f 93       	push	r19
   1763c:	80 81       	ld	r24, Z
   1763e:	1f 92       	push	r1
   17640:	8f 93       	push	r24
   17642:	1f 92       	push	r1
   17644:	cf 93       	push	r28
   17646:	87 e4       	ldi	r24, 0x47	; 71
   17648:	9b e2       	ldi	r25, 0x2B	; 43
   1764a:	1f 92       	push	r1
   1764c:	9f 93       	push	r25
   1764e:	8f 93       	push	r24
   17650:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17654:	8d b7       	in	r24, 0x3d	; 61
   17656:	9e b7       	in	r25, 0x3e	; 62
   17658:	0b 96       	adiw	r24, 0x0b	; 11
   1765a:	0f b6       	in	r0, 0x3f	; 63
   1765c:	f8 94       	cli
   1765e:	9e bf       	out	0x3e, r25	; 62
   17660:	0f be       	out	0x3f, r0	; 63
   17662:	8d bf       	out	0x3d, r24	; 61
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17664:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17668:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   1766c:	81 81       	ldd	r24, Z+1	; 0x01
   1766e:	90 e0       	ldi	r25, 0x00	; 0
   17670:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
    return(0);
}
   17674:	80 e0       	ldi	r24, 0x00	; 0
   17676:	90 e0       	ldi	r25, 0x00	; 0
   17678:	cf 91       	pop	r28
   1767a:	08 95       	ret

0001767c <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   1767c:	8f 30       	cpi	r24, 0x0F	; 15
   1767e:	29 f0       	breq	.+10     	; 0x1768a <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   17680:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17684:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17688:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   1768a:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   1768e:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17692:	81 81       	ldd	r24, Z+1	; 0x01
   17694:	88 23       	and	r24, r24
   17696:	29 f0       	breq	.+10     	; 0x176a2 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   17698:	87 81       	ldd	r24, Z+7	; 0x07
   1769a:	90 85       	ldd	r25, Z+8	; 0x08
   1769c:	80 64       	ori	r24, 0x40	; 64
   1769e:	90 87       	std	Z+8, r25	; 0x08
   176a0:	87 83       	std	Z+7, r24	; 0x07
   176a2:	08 95       	ret

000176a4 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   176a4:	a3 e1       	ldi	r26, 0x13	; 19
   176a6:	b0 e0       	ldi	r27, 0x00	; 0
   176a8:	e8 e5       	ldi	r30, 0x58	; 88
   176aa:	fb eb       	ldi	r31, 0xBB	; 187
   176ac:	0c 94 3a e5 	jmp	0x1ca74	; 0x1ca74 <__prologue_saves__+0x18>
   176b0:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & 32)
   176b2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   176b6:	85 ff       	sbrs	r24, 5
   176b8:	16 c0       	rjmp	.+44     	; 0x176e6 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   176ba:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   176be:	1f 92       	push	r1
   176c0:	8f 93       	push	r24
   176c2:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   176c6:	1f 92       	push	r1
   176c8:	8f 93       	push	r24
   176ca:	ff 92       	push	r15
   176cc:	ef 92       	push	r14
   176ce:	85 e1       	ldi	r24, 0x15	; 21
   176d0:	9b e2       	ldi	r25, 0x2B	; 43
   176d2:	1f 92       	push	r1
   176d4:	9f 93       	push	r25
   176d6:	8f 93       	push	r24
   176d8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   176dc:	0f b6       	in	r0, 0x3f	; 63
   176de:	f8 94       	cli
   176e0:	de bf       	out	0x3e, r29	; 62
   176e2:	0f be       	out	0x3f, r0	; 63
   176e4:	cd bf       	out	0x3d, r28	; 61
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   176e6:	9e e7       	ldi	r25, 0x7E	; 126
   176e8:	e9 16       	cp	r14, r25
   176ea:	f1 04       	cpc	r15, r1
   176ec:	f1 f5       	brne	.+124    	; 0x1776a <Amigo_Command+0xc6>
   176ee:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   176f2:	90 e0       	ldi	r25, 0x00	; 0
   176f4:	0e 94 28 8c 	call	0x11850	; 0x11850 <AMIGO_is_MTA>
   176f8:	89 2b       	or	r24, r25
   176fa:	09 f4       	brne	.+2      	; 0x176fe <Amigo_Command+0x5a>
   176fc:	86 c0       	rjmp	.+268    	; 0x1780a <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   176fe:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17702:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17706:	81 81       	ldd	r24, Z+1	; 0x01
   17708:	90 e0       	ldi	r25, 0x00	; 0
   1770a:	0e 94 10 86 	call	0x10c20	; 0x10c20 <gpib_disable_PPR>
        status = EOI_FLAG;
   1770e:	80 e0       	ldi	r24, 0x00	; 0
   17710:	91 e0       	ldi	r25, 0x01	; 1
   17712:	9b 8b       	std	Y+19, r25	; 0x13
   17714:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17716:	ae 01       	movw	r20, r28
   17718:	4e 5e       	subi	r20, 0xEE	; 238
   1771a:	5f 4f       	sbci	r21, 0xFF	; 255
   1771c:	60 e0       	ldi	r22, 0x00	; 0
   1771e:	72 e0       	ldi	r23, 0x02	; 2
   17720:	82 ee       	ldi	r24, 0xE2	; 226
   17722:	9b e1       	ldi	r25, 0x1B	; 27
   17724:	0e 94 2f 8b 	call	0x1165e	; 0x1165e <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17728:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   1772c:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17730:	81 81       	ldd	r24, Z+1	; 0x01
   17732:	90 e0       	ldi	r25, 0x00	; 0
   17734:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17738:	8a 89       	ldd	r24, Y+18	; 0x12
   1773a:	9b 89       	ldd	r25, Y+19	; 0x13
   1773c:	88 27       	eor	r24, r24
   1773e:	90 7d       	andi	r25, 0xD0	; 208
   17740:	89 2b       	or	r24, r25
   17742:	09 f4       	brne	.+2      	; 0x17746 <Amigo_Command+0xa2>
   17744:	89 c2       	rjmp	.+1298   	; 0x17c58 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   17746:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   1774a:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   1774e:	81 e0       	ldi	r24, 0x01	; 1
   17750:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17752:	87 81       	ldd	r24, Z+7	; 0x07
   17754:	90 85       	ldd	r25, Z+8	; 0x08
   17756:	80 62       	ori	r24, 0x20	; 32
   17758:	90 87       	std	Z+8, r25	; 0x08
   1775a:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   1775c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17760:	80 ff       	sbrs	r24, 0
   17762:	7a c2       	rjmp	.+1268   	; 0x17c58 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   17764:	83 ef       	ldi	r24, 0xF3	; 243
   17766:	9a e2       	ldi	r25, 0x2A	; 42
   17768:	8e c0       	rjmp	.+284    	; 0x17886 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   1776a:	8f e7       	ldi	r24, 0x7F	; 127
   1776c:	e8 16       	cp	r14, r24
   1776e:	f1 04       	cpc	r15, r1
   17770:	09 f0       	breq	.+2      	; 0x17774 <Amigo_Command+0xd0>
   17772:	4b c0       	rjmp	.+150    	; 0x1780a <Amigo_Command+0x166>
   17774:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17778:	90 e0       	ldi	r25, 0x00	; 0
   1777a:	0e 94 19 8c 	call	0x11832	; 0x11832 <AMIGO_is_MLA>
   1777e:	89 2b       	or	r24, r25
   17780:	09 f4       	brne	.+2      	; 0x17784 <Amigo_Command+0xe0>
   17782:	43 c0       	rjmp	.+134    	; 0x1780a <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17784:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17788:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   1778c:	81 81       	ldd	r24, Z+1	; 0x01
   1778e:	90 e0       	ldi	r25, 0x00	; 0
   17790:	0e 94 10 86 	call	0x10c20	; 0x10c20 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & 128)
   17794:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17798:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   1779a:	0e 94 27 85 	call	0x10a4e	; 0x10a4e <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   1779e:	80 e0       	ldi	r24, 0x00	; 0
   177a0:	91 e0       	ldi	r25, 0x01	; 1
   177a2:	9b 8b       	std	Y+19, r25	; 0x13
   177a4:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   177a6:	ae 01       	movw	r20, r28
   177a8:	4e 5e       	subi	r20, 0xEE	; 238
   177aa:	5f 4f       	sbci	r21, 0xFF	; 255
   177ac:	60 e0       	ldi	r22, 0x00	; 0
   177ae:	72 e0       	ldi	r23, 0x02	; 2
   177b0:	82 ee       	ldi	r24, 0xE2	; 226
   177b2:	9b e1       	ldi	r25, 0x1B	; 27
   177b4:	0e 94 81 8a 	call	0x11502	; 0x11502 <gpib_read_str>
#if SDEBUG
        if(debuglevel & 128)
   177b8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   177bc:	87 ff       	sbrs	r24, 7
   177be:	04 c0       	rjmp	.+8      	; 0x177c8 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   177c0:	8b e2       	ldi	r24, 0x2B	; 43
   177c2:	95 e1       	ldi	r25, 0x15	; 21
   177c4:	0e 94 39 85 	call	0x10a72	; 0x10a72 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   177c8:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   177cc:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   177d0:	81 81       	ldd	r24, Z+1	; 0x01
   177d2:	90 e0       	ldi	r25, 0x00	; 0
   177d4:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
        if(status & ERROR_MASK)
   177d8:	8a 89       	ldd	r24, Y+18	; 0x12
   177da:	9b 89       	ldd	r25, Y+19	; 0x13
   177dc:	88 27       	eor	r24, r24
   177de:	90 7d       	andi	r25, 0xD0	; 208
   177e0:	89 2b       	or	r24, r25
   177e2:	09 f4       	brne	.+2      	; 0x177e6 <Amigo_Command+0x142>
   177e4:	39 c2       	rjmp	.+1138   	; 0x17c58 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   177e6:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   177ea:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   177ee:	81 e0       	ldi	r24, 0x01	; 1
   177f0:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   177f2:	87 81       	ldd	r24, Z+7	; 0x07
   177f4:	90 85       	ldd	r25, Z+8	; 0x08
   177f6:	80 62       	ori	r24, 0x20	; 32
   177f8:	90 87       	std	Z+8, r25	; 0x08
   177fa:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   177fc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17800:	80 ff       	sbrs	r24, 0
   17802:	2a c2       	rjmp	.+1108   	; 0x17c58 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   17804:	82 ed       	ldi	r24, 0xD2	; 210
   17806:	9a e2       	ldi	r25, 0x2A	; 42
   17808:	3e c0       	rjmp	.+124    	; 0x17886 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   1780a:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   1780e:	90 e0       	ldi	r25, 0x00	; 0
   17810:	0e 94 19 8c 	call	0x11832	; 0x11832 <AMIGO_is_MLA>
   17814:	89 2b       	or	r24, r25
   17816:	19 f4       	brne	.+6      	; 0x1781e <Amigo_Command+0x17a>
        return(0);
   17818:	80 e0       	ldi	r24, 0x00	; 0
   1781a:	90 e0       	ldi	r25, 0x00	; 0
   1781c:	25 c2       	rjmp	.+1098   	; 0x17c68 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   1781e:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17822:	90 e0       	ldi	r25, 0x00	; 0
   17824:	0e 94 28 8c 	call	0x11850	; 0x11850 <AMIGO_is_MTA>
   17828:	89 2b       	or	r24, r25
   1782a:	b1 f7       	brne	.-20     	; 0x17818 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1782c:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17830:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17834:	81 81       	ldd	r24, Z+1	; 0x01
   17836:	90 e0       	ldi	r25, 0x00	; 0
   17838:	0e 94 10 86 	call	0x10c20	; 0x10c20 <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   1783c:	80 e0       	ldi	r24, 0x00	; 0
   1783e:	91 e0       	ldi	r25, 0x01	; 1
   17840:	9b 8b       	std	Y+19, r25	; 0x13
   17842:	8a 8b       	std	Y+18, r24	; 0x12
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17844:	ae 01       	movw	r20, r28
   17846:	4e 5e       	subi	r20, 0xEE	; 238
   17848:	5f 4f       	sbci	r21, 0xFF	; 255
   1784a:	60 e0       	ldi	r22, 0x00	; 0
   1784c:	72 e0       	ldi	r23, 0x02	; 2
   1784e:	82 ee       	ldi	r24, 0xE2	; 226
   17850:	9b e1       	ldi	r25, 0x1B	; 27
   17852:	0e 94 81 8a 	call	0x11502	; 0x11502 <gpib_read_str>
   17856:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   17858:	8a 89       	ldd	r24, Y+18	; 0x12
   1785a:	9b 89       	ldd	r25, Y+19	; 0x13
   1785c:	88 27       	eor	r24, r24
   1785e:	90 7d       	andi	r25, 0xD0	; 208
   17860:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   17864:	89 2b       	or	r24, r25
   17866:	c1 f0       	breq	.+48     	; 0x17898 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   17868:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   1786c:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17870:	81 e0       	ldi	r24, 0x01	; 1
   17872:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17874:	87 81       	ldd	r24, Z+7	; 0x07
   17876:	90 85       	ldd	r25, Z+8	; 0x08
   17878:	80 62       	ori	r24, 0x20	; 32
   1787a:	90 87       	std	Z+8, r25	; 0x08
   1787c:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & 1)
   1787e:	20 ff       	sbrs	r18, 0
   17880:	eb c1       	rjmp	.+982    	; 0x17c58 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   17882:	81 eb       	ldi	r24, 0xB1	; 177
   17884:	9a e2       	ldi	r25, 0x2A	; 42
   17886:	1f 92       	push	r1
   17888:	9f 93       	push	r25
   1788a:	8f 93       	push	r24
   1788c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17890:	0f 90       	pop	r0
   17892:	0f 90       	pop	r0
   17894:	0f 90       	pop	r0
   17896:	e0 c1       	rjmp	.+960    	; 0x17c58 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 32)
   17898:	25 ff       	sbrs	r18, 5
   1789a:	10 c0       	rjmp	.+32     	; 0x178bc <Amigo_Command+0x218>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   1789c:	1f 93       	push	r17
   1789e:	0f 93       	push	r16
   178a0:	ff 92       	push	r15
   178a2:	ef 92       	push	r14
   178a4:	82 e8       	ldi	r24, 0x82	; 130
   178a6:	9a e2       	ldi	r25, 0x2A	; 42
   178a8:	1f 92       	push	r1
   178aa:	9f 93       	push	r25
   178ac:	8f 93       	push	r24
   178ae:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   178b2:	0f b6       	in	r0, 0x3f	; 63
   178b4:	f8 94       	cli
   178b6:	de bf       	out	0x3e, r29	; 62
   178b8:	0f be       	out	0x3f, r0	; 63
   178ba:	cd bf       	out	0x3d, r28	; 61
            secondary, len);
#endif
    if(!len)
   178bc:	01 15       	cp	r16, r1
   178be:	11 05       	cpc	r17, r1
   178c0:	61 f4       	brne	.+24     	; 0x178da <Amigo_Command+0x236>
    {
        AMIGOs->dsj = 1;
   178c2:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   178c6:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   178ca:	81 e0       	ldi	r24, 0x01	; 1
   178cc:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   178ce:	87 81       	ldd	r24, Z+7	; 0x07
   178d0:	90 85       	ldd	r25, Z+8	; 0x08
   178d2:	80 62       	ori	r24, 0x20	; 32
   178d4:	90 87       	std	Z+8, r25	; 0x08
   178d6:	87 83       	std	Z+7, r24	; 0x07
   178d8:	bf c1       	rjmp	.+894    	; 0x17c58 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   178da:	60 91 e2 1b 	lds	r22, 0x1BE2	; 0x801be2 <gpib_iobuff>

    if (secondary == 0x68)
   178de:	98 e6       	ldi	r25, 0x68	; 104
   178e0:	e9 16       	cp	r14, r25
   178e2:	f1 04       	cpc	r15, r1
   178e4:	09 f0       	breq	.+2      	; 0x178e8 <Amigo_Command+0x244>
   178e6:	28 c1       	rjmp	.+592    	; 0x17b38 <Amigo_Command+0x494>
    {
        if(op == 0x00 && len == 2)
   178e8:	61 11       	cpse	r22, r1
   178ea:	2e c0       	rjmp	.+92     	; 0x17948 <Amigo_Command+0x2a4>
   178ec:	02 30       	cpi	r16, 0x02	; 2
   178ee:	11 05       	cpc	r17, r1
   178f0:	09 f0       	breq	.+2      	; 0x178f4 <Amigo_Command+0x250>
   178f2:	b7 c1       	rjmp	.+878    	; 0x17c62 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   178f4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   178f8:	85 ff       	sbrs	r24, 5
   178fa:	0a c0       	rjmp	.+20     	; 0x17910 <Amigo_Command+0x26c>
                printf("[AMIGO Cold Load Read Command]\n");
   178fc:	82 e6       	ldi	r24, 0x62	; 98
   178fe:	9a e2       	ldi	r25, 0x2A	; 42
   17900:	1f 92       	push	r1
   17902:	9f 93       	push	r25
   17904:	8f 93       	push	r24
   17906:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1790a:	0f 90       	pop	r0
   1790c:	0f 90       	pop	r0
   1790e:	0f 90       	pop	r0
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   17910:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17914:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17918:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   1791a:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   1791c:	10 86       	std	Z+8, r1	; 0x08
   1791e:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   17920:	1c 82       	std	Y+4, r1	; 0x04
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   17922:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
   17926:	98 2f       	mov	r25, r24
   17928:	92 95       	swap	r25
   1792a:	96 95       	lsr	r25
   1792c:	96 95       	lsr	r25
   1792e:	93 70       	andi	r25, 0x03	; 3
   17930:	9d 83       	std	Y+5, r25	; 0x05
            tmp.sector = 0x3f & *ptr;
   17932:	8f 73       	andi	r24, 0x3F	; 63
   17934:	8e 83       	std	Y+6, r24	; 0x06
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   17936:	ce 01       	movw	r24, r28
   17938:	01 96       	adiw	r24, 0x01	; 1
   1793a:	18 da       	rcall	.-3024   	; 0x16d6c <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   1793c:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17940:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17944:	85 e0       	ldi	r24, 0x05	; 5
   17946:	5c c1       	rjmp	.+696    	; 0x17c00 <Amigo_Command+0x55c>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   17948:	62 30       	cpi	r22, 0x02	; 2
   1794a:	09 f0       	breq	.+2      	; 0x1794e <Amigo_Command+0x2aa>
   1794c:	3f c0       	rjmp	.+126    	; 0x179cc <Amigo_Command+0x328>
   1794e:	05 30       	cpi	r16, 0x05	; 5
   17950:	11 05       	cpc	r17, r1
   17952:	d1 f4       	brne	.+52     	; 0x17988 <Amigo_Command+0x2e4>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17954:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17958:	85 ff       	sbrs	r24, 5
   1795a:	0a c0       	rjmp	.+20     	; 0x17970 <Amigo_Command+0x2cc>
                printf("[AMIGO Seek len=5]\n");
   1795c:	8e e4       	ldi	r24, 0x4E	; 78
   1795e:	9a e2       	ldi	r25, 0x2A	; 42
   17960:	1f 92       	push	r1
   17962:	9f 93       	push	r25
   17964:	8f 93       	push	r24
   17966:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1796a:	0f 90       	pop	r0
   1796c:	0f 90       	pop	r0
   1796e:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17970:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
   17974:	83 de       	rcall	.-762    	; 0x1767c <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   17976:	80 91 e4 1b 	lds	r24, 0x1BE4	; 0x801be4 <gpib_iobuff+0x2>
   1797a:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   1797c:	80 91 e5 1b 	lds	r24, 0x1BE5	; 0x801be5 <gpib_iobuff+0x3>
   17980:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   17982:	80 91 e6 1b 	lds	r24, 0x1BE6	; 0x801be6 <gpib_iobuff+0x4>
   17986:	1d c0       	rjmp	.+58     	; 0x179c2 <Amigo_Command+0x31e>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   17988:	06 30       	cpi	r16, 0x06	; 6
   1798a:	11 05       	cpc	r17, r1
   1798c:	09 f0       	breq	.+2      	; 0x17990 <Amigo_Command+0x2ec>
   1798e:	69 c1       	rjmp	.+722    	; 0x17c62 <Amigo_Command+0x5be>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17990:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17994:	85 ff       	sbrs	r24, 5
   17996:	0a c0       	rjmp	.+20     	; 0x179ac <Amigo_Command+0x308>
                printf("[AMIGO Seek len=6]\n");
   17998:	8a e3       	ldi	r24, 0x3A	; 58
   1799a:	9a e2       	ldi	r25, 0x2A	; 42
   1799c:	1f 92       	push	r1
   1799e:	9f 93       	push	r25
   179a0:	8f 93       	push	r24
   179a2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   179a6:	0f 90       	pop	r0
   179a8:	0f 90       	pop	r0
   179aa:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   179ac:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
   179b0:	65 de       	rcall	.-822    	; 0x1767c <amigo_check_unit>
            /// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   179b2:	80 91 e5 1b 	lds	r24, 0x1BE5	; 0x801be5 <gpib_iobuff+0x3>
   179b6:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   179b8:	80 91 e6 1b 	lds	r24, 0x1BE6	; 0x801be6 <gpib_iobuff+0x4>
   179bc:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   179be:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_iobuff+0x5>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   179c2:	8e 83       	std	Y+6, r24	; 0x06
   179c4:	ce 01       	movw	r24, r28
   179c6:	01 96       	adiw	r24, 0x01	; 1
   179c8:	d1 d9       	rcall	.-3166   	; 0x16d6c <amigo_seek>
   179ca:	1b c1       	rjmp	.+566    	; 0x17c02 <Amigo_Command+0x55e>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   179cc:	63 30       	cpi	r22, 0x03	; 3
   179ce:	e9 f4       	brne	.+58     	; 0x17a0a <Amigo_Command+0x366>
   179d0:	02 30       	cpi	r16, 0x02	; 2
   179d2:	11 05       	cpc	r17, r1
   179d4:	09 f0       	breq	.+2      	; 0x179d8 <Amigo_Command+0x334>
   179d6:	45 c1       	rjmp	.+650    	; 0x17c62 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & 32)
   179d8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   179dc:	85 ff       	sbrs	r24, 5
   179de:	0a c0       	rjmp	.+20     	; 0x179f4 <Amigo_Command+0x350>
                printf("[AMIGO Request Status Buffered Command]\n");
   179e0:	81 e1       	ldi	r24, 0x11	; 17
   179e2:	9a e2       	ldi	r25, 0x2A	; 42
   179e4:	1f 92       	push	r1
   179e6:	9f 93       	push	r25
   179e8:	8f 93       	push	r24
   179ea:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   179ee:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   179f0:	0f 90       	pop	r0
   179f2:	0f 90       	pop	r0
   179f4:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            amigo_request_status();
   179f8:	41 de       	rcall	.-894    	; 0x1767c <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   179fa:	7b d8       	rcall	.-3850   	; 0x16af2 <amigo_request_status>
   179fc:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17a00:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17a04:	83 e0       	ldi	r24, 0x03	; 3
   17a06:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   17a08:	27 c1       	rjmp	.+590    	; 0x17c58 <Amigo_Command+0x5b4>
   17a0a:	65 30       	cpi	r22, 0x05	; 5
   17a0c:	d9 f4       	brne	.+54     	; 0x17a44 <Amigo_Command+0x3a0>
   17a0e:	02 30       	cpi	r16, 0x02	; 2
   17a10:	11 05       	cpc	r17, r1
   17a12:	09 f0       	breq	.+2      	; 0x17a16 <Amigo_Command+0x372>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & 32)
   17a14:	26 c1       	rjmp	.+588    	; 0x17c62 <Amigo_Command+0x5be>
   17a16:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17a1a:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   17a1c:	0a c0       	rjmp	.+20     	; 0x17a32 <Amigo_Command+0x38e>
   17a1e:	80 ef       	ldi	r24, 0xF0	; 240
   17a20:	99 e2       	ldi	r25, 0x29	; 41
   17a22:	1f 92       	push	r1
   17a24:	9f 93       	push	r25
   17a26:	8f 93       	push	r24
   17a28:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17a2c:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17a2e:	0f 90       	pop	r0
   17a30:	0f 90       	pop	r0
   17a32:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   17a36:	22 de       	rcall	.-956    	; 0x1767c <amigo_check_unit>
   17a38:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17a3c:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17a40:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   17a42:	de c0       	rjmp	.+444    	; 0x17c00 <Amigo_Command+0x55c>
   17a44:	67 30       	cpi	r22, 0x07	; 7
   17a46:	f9 f4       	brne	.+62     	; 0x17a86 <Amigo_Command+0x3e2>
   17a48:	04 30       	cpi	r16, 0x04	; 4
   17a4a:	11 05       	cpc	r17, r1
   17a4c:	09 f0       	breq	.+2      	; 0x17a50 <Amigo_Command+0x3ac>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & 32)
   17a4e:	09 c1       	rjmp	.+530    	; 0x17c62 <Amigo_Command+0x5be>
   17a50:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17a54:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   17a56:	0a c0       	rjmp	.+20     	; 0x17a6c <Amigo_Command+0x3c8>
   17a58:	80 ee       	ldi	r24, 0xE0	; 224
   17a5a:	99 e2       	ldi	r25, 0x29	; 41
   17a5c:	1f 92       	push	r1
   17a5e:	9f 93       	push	r25
   17a60:	8f 93       	push	r24
   17a62:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17a66:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17a68:	0f 90       	pop	r0
   17a6a:	0f 90       	pop	r0
   17a6c:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   17a70:	05 de       	rcall	.-1014   	; 0x1767c <amigo_check_unit>
   17a72:	80 91 e4 1b 	lds	r24, 0x1BE4	; 0x801be4 <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   17a76:	90 e0       	ldi	r25, 0x00	; 0
   17a78:	98 2f       	mov	r25, r24
   17a7a:	88 27       	eor	r24, r24
   17a7c:	20 91 e5 1b 	lds	r18, 0x1BE5	; 0x801be5 <gpib_iobuff+0x3>
   17a80:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   17a82:	9f d9       	rcall	.-3266   	; 0x16dc2 <amigo_verify>
   17a84:	f1 c0       	rjmp	.+482    	; 0x17c68 <Amigo_Command+0x5c4>
   17a86:	68 30       	cpi	r22, 0x08	; 8
   17a88:	d9 f4       	brne	.+54     	; 0x17ac0 <Amigo_Command+0x41c>
   17a8a:	02 30       	cpi	r16, 0x02	; 2
   17a8c:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17a8e:	09 f0       	breq	.+2      	; 0x17a92 <Amigo_Command+0x3ee>
   17a90:	e8 c0       	rjmp	.+464    	; 0x17c62 <Amigo_Command+0x5be>
   17a92:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   17a96:	85 ff       	sbrs	r24, 5
   17a98:	0a c0       	rjmp	.+20     	; 0x17aae <Amigo_Command+0x40a>
   17a9a:	8e eb       	ldi	r24, 0xBE	; 190
   17a9c:	99 e2       	ldi	r25, 0x29	; 41
   17a9e:	1f 92       	push	r1
   17aa0:	9f 93       	push	r25
   17aa2:	8f 93       	push	r24
   17aa4:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17aa8:	0f 90       	pop	r0
   17aaa:	0f 90       	pop	r0
   17aac:	0f 90       	pop	r0
   17aae:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   17ab2:	e4 dd       	rcall	.-1080   	; 0x1767c <amigo_check_unit>
   17ab4:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17ab8:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   17abc:	88 e0       	ldi	r24, 0x08	; 8
   17abe:	a0 c0       	rjmp	.+320    	; 0x17c00 <Amigo_Command+0x55c>
   17ac0:	86 2f       	mov	r24, r22
   17ac2:	8f 7d       	andi	r24, 0xDF	; 223
   17ac4:	8b 30       	cpi	r24, 0x0B	; 11
   17ac6:	d9 f4       	brne	.+54     	; 0x17afe <Amigo_Command+0x45a>
   17ac8:	02 30       	cpi	r16, 0x02	; 2
   17aca:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17acc:	09 f0       	breq	.+2      	; 0x17ad0 <Amigo_Command+0x42c>
   17ace:	c9 c0       	rjmp	.+402    	; 0x17c62 <Amigo_Command+0x5be>
   17ad0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   17ad4:	85 ff       	sbrs	r24, 5
   17ad6:	0a c0       	rjmp	.+20     	; 0x17aec <Amigo_Command+0x448>
   17ad8:	82 ea       	ldi	r24, 0xA2	; 162
   17ada:	99 e2       	ldi	r25, 0x29	; 41
   17adc:	1f 92       	push	r1
   17ade:	9f 93       	push	r25
   17ae0:	8f 93       	push	r24
   17ae2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17ae6:	0f 90       	pop	r0
   17ae8:	0f 90       	pop	r0
   17aea:	0f 90       	pop	r0
   17aec:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   17af0:	c5 dd       	rcall	.-1142   	; 0x1767c <amigo_check_unit>
   17af2:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17af6:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   17afa:	8a e0       	ldi	r24, 0x0A	; 10
   17afc:	81 c0       	rjmp	.+258    	; 0x17c00 <Amigo_Command+0x55c>
   17afe:	64 31       	cpi	r22, 0x14	; 20
   17b00:	09 f0       	breq	.+2      	; 0x17b04 <Amigo_Command+0x460>
   17b02:	af c0       	rjmp	.+350    	; 0x17c62 <Amigo_Command+0x5be>
   17b04:	02 30       	cpi	r16, 0x02	; 2
   17b06:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17b08:	09 f0       	breq	.+2      	; 0x17b0c <Amigo_Command+0x468>
   17b0a:	ab c0       	rjmp	.+342    	; 0x17c62 <Amigo_Command+0x5be>
   17b0c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   17b10:	85 ff       	sbrs	r24, 5
   17b12:	0a c0       	rjmp	.+20     	; 0x17b28 <Amigo_Command+0x484>
   17b14:	89 e7       	ldi	r24, 0x79	; 121
   17b16:	99 e2       	ldi	r25, 0x29	; 41
   17b18:	1f 92       	push	r1
   17b1a:	9f 93       	push	r25
   17b1c:	8f 93       	push	r24
   17b1e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17b22:	0f 90       	pop	r0
#endif
            amigo_request_logical_address();
   17b24:	0f 90       	pop	r0
   17b26:	0f 90       	pop	r0
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   17b28:	0e 94 6b b5 	call	0x16ad6	; 0x16ad6 <amigo_request_logical_address>
   17b2c:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17b30:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   17b34:	84 e0       	ldi	r24, 0x04	; 4
   17b36:	64 c0       	rjmp	.+200    	; 0x17c00 <Amigo_Command+0x55c>
   17b38:	89 e6       	ldi	r24, 0x69	; 105
   17b3a:	e8 16       	cp	r14, r24
    {
        if(op == 0x08 && len == 2)
   17b3c:	f1 04       	cpc	r15, r1
   17b3e:	f1 f4       	brne	.+60     	; 0x17b7c <Amigo_Command+0x4d8>
   17b40:	68 30       	cpi	r22, 0x08	; 8
   17b42:	09 f0       	breq	.+2      	; 0x17b46 <Amigo_Command+0x4a2>
   17b44:	8e c0       	rjmp	.+284    	; 0x17c62 <Amigo_Command+0x5be>
   17b46:	02 30       	cpi	r16, 0x02	; 2
   17b48:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17b4a:	09 f0       	breq	.+2      	; 0x17b4e <Amigo_Command+0x4aa>
   17b4c:	8a c0       	rjmp	.+276    	; 0x17c62 <Amigo_Command+0x5be>
   17b4e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   17b52:	85 ff       	sbrs	r24, 5
   17b54:	0a c0       	rjmp	.+20     	; 0x17b6a <Amigo_Command+0x4c6>
   17b56:	89 e5       	ldi	r24, 0x59	; 89
   17b58:	99 e2       	ldi	r25, 0x29	; 41
   17b5a:	1f 92       	push	r1
   17b5c:	9f 93       	push	r25
   17b5e:	8f 93       	push	r24
   17b60:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17b64:	0f 90       	pop	r0
   17b66:	0f 90       	pop	r0
   17b68:	0f 90       	pop	r0
   17b6a:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17b6e:	86 dd       	rcall	.-1268   	; 0x1767c <amigo_check_unit>
   17b70:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17b74:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17b78:	89 e0       	ldi	r24, 0x09	; 9
   17b7a:	42 c0       	rjmp	.+132    	; 0x17c00 <Amigo_Command+0x55c>
   17b7c:	9a e6       	ldi	r25, 0x6A	; 106
   17b7e:	e9 16       	cp	r14, r25
   17b80:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   17b82:	09 f0       	breq	.+2      	; 0x17b86 <Amigo_Command+0x4e2>
   17b84:	47 c0       	rjmp	.+142    	; 0x17c14 <Amigo_Command+0x570>
   17b86:	68 30       	cpi	r22, 0x08	; 8
   17b88:	f1 f4       	brne	.+60     	; 0x17bc6 <Amigo_Command+0x522>
   17b8a:	02 30       	cpi	r16, 0x02	; 2
   17b8c:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17b8e:	09 f0       	breq	.+2      	; 0x17b92 <Amigo_Command+0x4ee>
   17b90:	68 c0       	rjmp	.+208    	; 0x17c62 <Amigo_Command+0x5be>
   17b92:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17b96:	85 ff       	sbrs	r24, 5
   17b98:	0a c0       	rjmp	.+20     	; 0x17bae <Amigo_Command+0x50a>
   17b9a:	8e e2       	ldi	r24, 0x2E	; 46
   17b9c:	99 e2       	ldi	r25, 0x29	; 41
   17b9e:	1f 92       	push	r1
   17ba0:	9f 93       	push	r25
   17ba2:	8f 93       	push	r24
   17ba4:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17ba8:	0f 90       	pop	r0
   17baa:	0f 90       	pop	r0
   17bac:	0f 90       	pop	r0
   17bae:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   17bb2:	64 dd       	rcall	.-1336   	; 0x1767c <amigo_check_unit>
   17bb4:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17bb8:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
            amigo_request_status();
   17bbc:	82 e0       	ldi	r24, 0x02	; 2
   17bbe:	80 83       	st	Z, r24
   17bc0:	0e 94 79 b5 	call	0x16af2	; 0x16af2 <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17bc4:	49 c0       	rjmp	.+146    	; 0x17c58 <Amigo_Command+0x5b4>
   17bc6:	65 30       	cpi	r22, 0x05	; 5
   17bc8:	09 f0       	breq	.+2      	; 0x17bcc <Amigo_Command+0x528>
   17bca:	4b c0       	rjmp	.+150    	; 0x17c62 <Amigo_Command+0x5be>
   17bcc:	02 30       	cpi	r16, 0x02	; 2
   17bce:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17bd0:	09 f0       	breq	.+2      	; 0x17bd4 <Amigo_Command+0x530>
   17bd2:	47 c0       	rjmp	.+142    	; 0x17c62 <Amigo_Command+0x5be>
   17bd4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   17bd8:	85 ff       	sbrs	r24, 5
   17bda:	0a c0       	rjmp	.+20     	; 0x17bf0 <Amigo_Command+0x54c>
   17bdc:	8f e0       	ldi	r24, 0x0F	; 15
   17bde:	99 e2       	ldi	r25, 0x29	; 41
   17be0:	1f 92       	push	r1
   17be2:	9f 93       	push	r25
   17be4:	8f 93       	push	r24
   17be6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17bea:	0f 90       	pop	r0
   17bec:	0f 90       	pop	r0
   17bee:	0f 90       	pop	r0
   17bf0:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   17bf4:	43 dd       	rcall	.-1402   	; 0x1767c <amigo_check_unit>
   17bf6:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17bfa:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17bfe:	87 e0       	ldi	r24, 0x07	; 7
   17c00:	80 83       	st	Z, r24
   17c02:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17c06:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17c0a:	81 81       	ldd	r24, Z+1	; 0x01
   17c0c:	90 e0       	ldi	r25, 0x00	; 0
   17c0e:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   17c12:	22 c0       	rjmp	.+68     	; 0x17c58 <Amigo_Command+0x5b4>
   17c14:	8c e6       	ldi	r24, 0x6C	; 108
   17c16:	e8 16       	cp	r14, r24
    {
        if(op == 0x18 && len == 5)
   17c18:	f1 04       	cpc	r15, r1
   17c1a:	d1 f4       	brne	.+52     	; 0x17c50 <Amigo_Command+0x5ac>
   17c1c:	68 31       	cpi	r22, 0x18	; 24
   17c1e:	09 f5       	brne	.+66     	; 0x17c62 <Amigo_Command+0x5be>
   17c20:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & 32)
   17c22:	11 05       	cpc	r17, r1
   17c24:	f1 f4       	brne	.+60     	; 0x17c62 <Amigo_Command+0x5be>
   17c26:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Format]\n");
   17c2a:	85 ff       	sbrs	r24, 5
   17c2c:	0a c0       	rjmp	.+20     	; 0x17c42 <Amigo_Command+0x59e>
   17c2e:	8f ef       	ldi	r24, 0xFF	; 255
   17c30:	98 e2       	ldi	r25, 0x28	; 40
   17c32:	1f 92       	push	r1
   17c34:	9f 93       	push	r25
   17c36:	8f 93       	push	r24
   17c38:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17c3c:	0f 90       	pop	r0
   17c3e:	0f 90       	pop	r0
   17c40:	0f 90       	pop	r0
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   17c42:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
   17c46:	1a dd       	rcall	.-1484   	; 0x1767c <amigo_check_unit>
   17c48:	80 91 e6 1b 	lds	r24, 0x1BE6	; 0x801be6 <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17c4c:	4b d9       	rcall	.-3434   	; 0x16ee4 <amigo_format>
   17c4e:	04 c0       	rjmp	.+8      	; 0x17c58 <Amigo_Command+0x5b4>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   17c50:	90 e7       	ldi	r25, 0x70	; 112
   17c52:	e9 16       	cp	r14, r25
   17c54:	f1 04       	cpc	r15, r1
   17c56:	29 f4       	brne	.+10     	; 0x17c62 <Amigo_Command+0x5be>
   17c58:	8a 89       	ldd	r24, Y+18	; 0x12
    }
    return ( amigo_todo_op(secondary, op, len) );
   17c5a:	9b 89       	ldd	r25, Y+19	; 0x13
   17c5c:	88 27       	eor	r24, r24
   17c5e:	90 7d       	andi	r25, 0xD0	; 208
   17c60:	03 c0       	rjmp	.+6      	; 0x17c68 <Amigo_Command+0x5c4>
}
   17c62:	a8 01       	movw	r20, r16
   17c64:	8e 2d       	mov	r24, r14
   17c66:	d1 db       	rcall	.-2142   	; 0x1740a <amigo_todo_op>
   17c68:	63 96       	adiw	r28, 0x13	; 19
   17c6a:	e6 e0       	ldi	r30, 0x06	; 6
   17c6c:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

00017c70 <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   17c70:	cf 93       	push	r28
   17c72:	df 93       	push	r29
   17c74:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & 32)
   17c76:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17c7a:	85 ff       	sbrs	r24, 5
   17c7c:	19 c0       	rjmp	.+50     	; 0x17cb0 <Amigo_Execute+0x40>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17c7e:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17c82:	1f 92       	push	r1
   17c84:	8f 93       	push	r24
   17c86:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17c8a:	1f 92       	push	r1
   17c8c:	8f 93       	push	r24
   17c8e:	df 93       	push	r29
   17c90:	cf 93       	push	r28
   17c92:	8d ec       	ldi	r24, 0xCD	; 205
   17c94:	98 e2       	ldi	r25, 0x28	; 40
   17c96:	1f 92       	push	r1
   17c98:	9f 93       	push	r25
   17c9a:	8f 93       	push	r24
   17c9c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17ca0:	8d b7       	in	r24, 0x3d	; 61
   17ca2:	9e b7       	in	r25, 0x3e	; 62
   17ca4:	09 96       	adiw	r24, 0x09	; 9
   17ca6:	0f b6       	in	r0, 0x3f	; 63
   17ca8:	f8 94       	cli
   17caa:	9e bf       	out	0x3e, r25	; 62
   17cac:	0f be       	out	0x3f, r0	; 63
   17cae:	8d bf       	out	0x3d, r24	; 61
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17cb0:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17cb4:	8f 35       	cpi	r24, 0x5F	; 95
   17cb6:	09 f4       	brne	.+2      	; 0x17cba <Amigo_Execute+0x4a>
   17cb8:	ad c0       	rjmp	.+346    	; 0x17e14 <Amigo_Execute+0x1a4>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17cba:	90 e0       	ldi	r25, 0x00	; 0
   17cbc:	0e 94 28 8c 	call	0x11850	; 0x11850 <AMIGO_is_MTA>
   17cc0:	89 2b       	or	r24, r25
   17cc2:	39 f0       	breq	.+14     	; 0x17cd2 <Amigo_Execute+0x62>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17cc4:	ce 01       	movw	r24, r28
   17cc6:	87 7f       	andi	r24, 0xF7	; 247
   17cc8:	80 36       	cpi	r24, 0x60	; 96
   17cca:	91 05       	cpc	r25, r1
   17ccc:	09 f0       	breq	.+2      	; 0x17cd0 <Amigo_Execute+0x60>
   17cce:	a2 c0       	rjmp	.+324    	; 0x17e14 <Amigo_Execute+0x1a4>
   17cd0:	08 c0       	rjmp	.+16     	; 0x17ce2 <Amigo_Execute+0x72>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17cd2:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17cd6:	90 e0       	ldi	r25, 0x00	; 0
   17cd8:	0e 94 19 8c 	call	0x11832	; 0x11832 <AMIGO_is_MLA>
   17cdc:	89 2b       	or	r24, r25
   17cde:	91 f7       	brne	.-28     	; 0x17cc4 <Amigo_Execute+0x54>
   17ce0:	99 c0       	rjmp	.+306    	; 0x17e14 <Amigo_Execute+0x1a4>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17ce2:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17ce6:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17cea:	81 81       	ldd	r24, Z+1	; 0x01
   17cec:	90 e0       	ldi	r25, 0x00	; 0
   17cee:	0e 94 10 86 	call	0x10c20	; 0x10c20 <gpib_disable_PPR>

    if(secondary == 0x60)
   17cf2:	c0 36       	cpi	r28, 0x60	; 96
   17cf4:	d1 05       	cpc	r29, r1
   17cf6:	09 f0       	breq	.+2      	; 0x17cfa <Amigo_Execute+0x8a>
   17cf8:	4e c0       	rjmp	.+156    	; 0x17d96 <Amigo_Execute+0x126>
    {
        switch(AMIGOs->state)
   17cfa:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17cfe:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17d02:	e0 81       	ld	r30, Z
   17d04:	8e 2f       	mov	r24, r30
   17d06:	90 e0       	ldi	r25, 0x00	; 0
   17d08:	8b 30       	cpi	r24, 0x0B	; 11
   17d0a:	91 05       	cpc	r25, r1
   17d0c:	08 f0       	brcs	.+2      	; 0x17d10 <Amigo_Execute+0xa0>
   17d0e:	41 c0       	rjmp	.+130    	; 0x17d92 <Amigo_Execute+0x122>
   17d10:	fc 01       	movw	r30, r24
   17d12:	e0 52       	subi	r30, 0x20	; 32
   17d14:	ff 4f       	sbci	r31, 0xFF	; 255
   17d16:	0c 94 ea e4 	jmp	0x1c9d4	; 0x1c9d4 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & 32)
   17d1a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17d1e:	85 ff       	sbrs	r24, 5
   17d20:	18 c0       	rjmp	.+48     	; 0x17d52 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17d22:	8d ea       	ldi	r24, 0xAD	; 173
   17d24:	98 e2       	ldi	r25, 0x28	; 40
   17d26:	0d c0       	rjmp	.+26     	; 0x17d42 <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17d28:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17d2c:	85 ff       	sbrs	r24, 5
   17d2e:	11 c0       	rjmp	.+34     	; 0x17d52 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17d30:	8c e8       	ldi	r24, 0x8C	; 140
   17d32:	98 e2       	ldi	r25, 0x28	; 40
   17d34:	06 c0       	rjmp	.+12     	; 0x17d42 <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17d36:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17d3a:	85 ff       	sbrs	r24, 5
   17d3c:	0a c0       	rjmp	.+20     	; 0x17d52 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Buffered]\n");
   17d3e:	8d e6       	ldi	r24, 0x6D	; 109
   17d40:	98 e2       	ldi	r25, 0x28	; 40
   17d42:	1f 92       	push	r1
   17d44:	9f 93       	push	r25
   17d46:	8f 93       	push	r24
   17d48:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17d4c:	0f 90       	pop	r0
   17d4e:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_read() );
   17d50:	0f 90       	pop	r0
   17d52:	5a d9       	rcall	.-3404   	; 0x17008 <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17d54:	61 c0       	rjmp	.+194    	; 0x17e18 <Amigo_Execute+0x1a8>
   17d56:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17d5a:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17d5c:	18 c0       	rjmp	.+48     	; 0x17d8e <Amigo_Execute+0x11e>
   17d5e:	8b e4       	ldi	r24, 0x4B	; 75
   17d60:	98 e2       	ldi	r25, 0x28	; 40
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & 32)
   17d62:	0d c0       	rjmp	.+26     	; 0x17d7e <Amigo_Execute+0x10e>
   17d64:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17d68:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   17d6a:	11 c0       	rjmp	.+34     	; 0x17d8e <Amigo_Execute+0x11e>
   17d6c:	8f e2       	ldi	r24, 0x2F	; 47
   17d6e:	98 e2       	ldi	r25, 0x28	; 40
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17d70:	06 c0       	rjmp	.+12     	; 0x17d7e <Amigo_Execute+0x10e>
   17d72:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17d76:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   17d78:	0a c0       	rjmp	.+20     	; 0x17d8e <Amigo_Execute+0x11e>
   17d7a:	8f e0       	ldi	r24, 0x0F	; 15
   17d7c:	98 e2       	ldi	r25, 0x28	; 40
   17d7e:	1f 92       	push	r1
   17d80:	9f 93       	push	r25
   17d82:	8f 93       	push	r24
   17d84:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17d88:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_write() );
   17d8a:	0f 90       	pop	r0
   17d8c:	0f 90       	pop	r0
   17d8e:	00 da       	rcall	.-3072   	; 0x17190 <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   17d90:	43 c0       	rjmp	.+134    	; 0x17e18 <Amigo_Execute+0x1a8>
   17d92:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17d94:	3d c0       	rjmp	.+122    	; 0x17e10 <Amigo_Execute+0x1a0>
   17d96:	c8 36       	cpi	r28, 0x68	; 104
   17d98:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   17d9a:	e1 f5       	brne	.+120    	; 0x17e14 <Amigo_Execute+0x1a4>
   17d9c:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17da0:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17da4:	80 81       	ld	r24, Z
   17da6:	82 30       	cpi	r24, 0x02	; 2
   17da8:	81 f0       	breq	.+32     	; 0x17dca <Amigo_Execute+0x15a>
   17daa:	18 f4       	brcc	.+6      	; 0x17db2 <Amigo_Execute+0x142>
   17dac:	88 23       	and	r24, r24
   17dae:	91 f1       	breq	.+100    	; 0x17e14 <Amigo_Execute+0x1a4>
   17db0:	2e c0       	rjmp	.+92     	; 0x17e0e <Amigo_Execute+0x19e>
   17db2:	83 30       	cpi	r24, 0x03	; 3
   17db4:	19 f0       	breq	.+6      	; 0x17dbc <Amigo_Execute+0x14c>
   17db6:	84 30       	cpi	r24, 0x04	; 4
   17db8:	c9 f0       	breq	.+50     	; 0x17dec <Amigo_Execute+0x17c>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17dba:	29 c0       	rjmp	.+82     	; 0x17e0e <Amigo_Execute+0x19e>
   17dbc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17dc0:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17dc2:	11 c0       	rjmp	.+34     	; 0x17de6 <Amigo_Execute+0x176>
   17dc4:	86 ee       	ldi	r24, 0xE6	; 230
   17dc6:	97 e2       	ldi	r25, 0x27	; 39
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17dc8:	06 c0       	rjmp	.+12     	; 0x17dd6 <Amigo_Execute+0x166>
   17dca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17dce:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17dd0:	0a c0       	rjmp	.+20     	; 0x17de6 <Amigo_Execute+0x176>
   17dd2:	8b eb       	ldi	r24, 0xBB	; 187
   17dd4:	97 e2       	ldi	r25, 0x27	; 39
   17dd6:	1f 92       	push	r1
   17dd8:	9f 93       	push	r25
   17dda:	8f 93       	push	r24
   17ddc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17de0:	0f 90       	pop	r0
   17de2:	0f 90       	pop	r0
#endif
                return ( amigo_send_status() );
   17de4:	0f 90       	pop	r0
   17de6:	0e 94 2f b6 	call	0x16c5e	; 0x16c5e <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & 32)
   17dea:	16 c0       	rjmp	.+44     	; 0x17e18 <Amigo_Execute+0x1a8>
   17dec:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17df0:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   17df2:	0a c0       	rjmp	.+20     	; 0x17e08 <Amigo_Execute+0x198>
   17df4:	82 e9       	ldi	r24, 0x92	; 146
   17df6:	97 e2       	ldi	r25, 0x27	; 39
   17df8:	1f 92       	push	r1
   17dfa:	9f 93       	push	r25
   17dfc:	8f 93       	push	r24
   17dfe:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17e02:	0f 90       	pop	r0
   17e04:	0f 90       	pop	r0
#endif
                return ( amigo_send_logical_address() );
   17e06:	0f 90       	pop	r0
   17e08:	0e 94 d1 b5 	call	0x16ba2	; 0x16ba2 <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   17e0c:	05 c0       	rjmp	.+10     	; 0x17e18 <Amigo_Execute+0x1a8>
   17e0e:	88 e6       	ldi	r24, 0x68	; 104
   17e10:	a5 db       	rcall	.-2230   	; 0x1755c <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17e12:	02 c0       	rjmp	.+4      	; 0x17e18 <Amigo_Execute+0x1a8>
   17e14:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17e16:	90 e0       	ldi	r25, 0x00	; 0
   17e18:	df 91       	pop	r29
   17e1a:	cf 91       	pop	r28
   17e1c:	08 95       	ret

00017e1e <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17e1e:	cf 93       	push	r28
   17e20:	df 93       	push	r29
   17e22:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17e24:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17e28:	90 e0       	ldi	r25, 0x00	; 0
   17e2a:	0e 94 28 8c 	call	0x11850	; 0x11850 <AMIGO_is_MTA>
   17e2e:	89 2b       	or	r24, r25
   17e30:	51 f0       	breq	.+20     	; 0x17e46 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17e32:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17e36:	8f 35       	cpi	r24, 0x5F	; 95
   17e38:	71 f4       	brne	.+28     	; 0x17e56 <AMIGO_COMMANDS+0x38>
   17e3a:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17e3e:	90 e0       	ldi	r25, 0x00	; 0
   17e40:	0e 94 19 8c 	call	0x11832	; 0x11832 <AMIGO_is_MLA>
   17e44:	08 c0       	rjmp	.+16     	; 0x17e56 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17e46:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17e4a:	90 e0       	ldi	r25, 0x00	; 0
   17e4c:	0e 94 19 8c 	call	0x11832	; 0x11832 <AMIGO_is_MLA>
   17e50:	89 2b       	or	r24, r25
   17e52:	79 f7       	brne	.-34     	; 0x17e32 <AMIGO_COMMANDS+0x14>
   17e54:	76 c0       	rjmp	.+236    	; 0x17f42 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17e56:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17e5a:	81 11       	cpse	r24, r1
   17e5c:	05 c0       	rjmp	.+10     	; 0x17e68 <AMIGO_COMMANDS+0x4a>
   17e5e:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17e62:	90 e0       	ldi	r25, 0x00	; 0
   17e64:	0e 94 28 8c 	call	0x11850	; 0x11850 <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17e68:	c0 36       	cpi	r28, 0x60	; 96
   17e6a:	99 f4       	brne	.+38     	; 0x17e92 <AMIGO_COMMANDS+0x74>
   17e6c:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17e70:	90 e0       	ldi	r25, 0x00	; 0
   17e72:	0e 94 28 8c 	call	0x11850	; 0x11850 <AMIGO_is_MTA>
   17e76:	89 2b       	or	r24, r25
   17e78:	19 f0       	breq	.+6      	; 0x17e80 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17e7a:	80 e6       	ldi	r24, 0x60	; 96
   17e7c:	90 e0       	ldi	r25, 0x00	; 0
   17e7e:	14 c0       	rjmp	.+40     	; 0x17ea8 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17e80:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17e84:	90 e0       	ldi	r25, 0x00	; 0
   17e86:	0e 94 19 8c 	call	0x11832	; 0x11832 <AMIGO_is_MLA>
   17e8a:	89 2b       	or	r24, r25
   17e8c:	09 f4       	brne	.+2      	; 0x17e90 <AMIGO_COMMANDS+0x72>
   17e8e:	59 c0       	rjmp	.+178    	; 0x17f42 <AMIGO_COMMANDS+0x124>
   17e90:	f4 cf       	rjmp	.-24     	; 0x17e7a <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17e92:	c8 36       	cpi	r28, 0x68	; 104
   17e94:	c1 f4       	brne	.+48     	; 0x17ec6 <AMIGO_COMMANDS+0xa8>
   17e96:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17e9a:	90 e0       	ldi	r25, 0x00	; 0
   17e9c:	0e 94 28 8c 	call	0x11850	; 0x11850 <AMIGO_is_MTA>
   17ea0:	89 2b       	or	r24, r25
   17ea2:	21 f0       	breq	.+8      	; 0x17eac <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17ea4:	88 e6       	ldi	r24, 0x68	; 104
   17ea6:	90 e0       	ldi	r25, 0x00	; 0
   17ea8:	e3 de       	rcall	.-570    	; 0x17c70 <Amigo_Execute>
   17eaa:	0b c0       	rjmp	.+22     	; 0x17ec2 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   17eac:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17eb0:	90 e0       	ldi	r25, 0x00	; 0
   17eb2:	0e 94 19 8c 	call	0x11832	; 0x11832 <AMIGO_is_MLA>
   17eb6:	89 2b       	or	r24, r25
   17eb8:	09 f4       	brne	.+2      	; 0x17ebc <AMIGO_COMMANDS+0x9e>
   17eba:	43 c0       	rjmp	.+134    	; 0x17f42 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17ebc:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   17ebe:	90 e0       	ldi	r25, 0x00	; 0
   17ec0:	f1 db       	rcall	.-2078   	; 0x176a4 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17ec2:	ec 01       	movw	r28, r24
   17ec4:	40 c0       	rjmp	.+128    	; 0x17f46 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   17ec6:	c9 36       	cpi	r28, 0x69	; 105
   17ec8:	51 f4       	brne	.+20     	; 0x17ede <AMIGO_COMMANDS+0xc0>
   17eca:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17ece:	90 e0       	ldi	r25, 0x00	; 0
   17ed0:	0e 94 19 8c 	call	0x11832	; 0x11832 <AMIGO_is_MLA>
   17ed4:	89 2b       	or	r24, r25
   17ed6:	a9 f1       	breq	.+106    	; 0x17f42 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17ed8:	89 e6       	ldi	r24, 0x69	; 105
   17eda:	90 e0       	ldi	r25, 0x00	; 0
   17edc:	f1 cf       	rjmp	.-30     	; 0x17ec0 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   17ede:	ca 36       	cpi	r28, 0x6A	; 106
   17ee0:	51 f4       	brne	.+20     	; 0x17ef6 <AMIGO_COMMANDS+0xd8>
   17ee2:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17ee6:	90 e0       	ldi	r25, 0x00	; 0
   17ee8:	0e 94 19 8c 	call	0x11832	; 0x11832 <AMIGO_is_MLA>
   17eec:	89 2b       	or	r24, r25
   17eee:	49 f1       	breq	.+82     	; 0x17f42 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17ef0:	8a e6       	ldi	r24, 0x6A	; 106
   17ef2:	90 e0       	ldi	r25, 0x00	; 0
   17ef4:	e5 cf       	rjmp	.-54     	; 0x17ec0 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   17ef6:	cc 36       	cpi	r28, 0x6C	; 108
   17ef8:	51 f4       	brne	.+20     	; 0x17f0e <AMIGO_COMMANDS+0xf0>
   17efa:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17efe:	90 e0       	ldi	r25, 0x00	; 0
   17f00:	0e 94 19 8c 	call	0x11832	; 0x11832 <AMIGO_is_MLA>
   17f04:	89 2b       	or	r24, r25
   17f06:	e9 f0       	breq	.+58     	; 0x17f42 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17f08:	8c e6       	ldi	r24, 0x6C	; 108
   17f0a:	90 e0       	ldi	r25, 0x00	; 0
   17f0c:	d9 cf       	rjmp	.-78     	; 0x17ec0 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17f0e:	c0 37       	cpi	r28, 0x70	; 112
   17f10:	c1 f4       	brne	.+48     	; 0x17f42 <AMIGO_COMMANDS+0x124>
   17f12:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17f16:	90 e0       	ldi	r25, 0x00	; 0
   17f18:	0e 94 28 8c 	call	0x11850	; 0x11850 <AMIGO_is_MTA>
   17f1c:	ec 01       	movw	r28, r24
   17f1e:	89 2b       	or	r24, r25
   17f20:	51 f0       	breq	.+20     	; 0x17f36 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17f22:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17f26:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17f2a:	81 81       	ldd	r24, Z+1	; 0x01
   17f2c:	90 e0       	ldi	r25, 0x00	; 0
   17f2e:	0e 94 10 86 	call	0x10c20	; 0x10c20 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17f32:	e6 d9       	rcall	.-3124   	; 0x17300 <amigo_cmd_dsj>
   17f34:	c6 cf       	rjmp	.-116    	; 0x17ec2 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17f36:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17f3a:	90 e0       	ldi	r25, 0x00	; 0
   17f3c:	0e 94 19 8c 	call	0x11832	; 0x11832 <AMIGO_is_MLA>
   17f40:	02 c0       	rjmp	.+4      	; 0x17f46 <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   17f42:	c0 e0       	ldi	r28, 0x00	; 0
   17f44:	d0 e0       	ldi	r29, 0x00	; 0
}
   17f46:	ce 01       	movw	r24, r28
   17f48:	df 91       	pop	r29
   17f4a:	cf 91       	pop	r28
   17f4c:	08 95       	ret

00017f4e <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17f4e:	ec e9       	ldi	r30, 0x9C	; 156
   17f50:	f8 e1       	ldi	r31, 0x18	; 24
   17f52:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17f54:	10 82       	st	Z, r1
   17f56:	11 82       	std	Z+1, r1	; 0x01
   17f58:	12 82       	std	Z+2, r1	; 0x02
   17f5a:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17f5c:	15 82       	std	Z+5, r1	; 0x05
   17f5e:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17f60:	12 86       	std	Z+10, r1	; 0x0a
   17f62:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17f64:	14 86       	std	Z+12, r1	; 0x0c
   17f66:	13 86       	std	Z+11, r1	; 0x0b
   17f68:	08 95       	ret

00017f6a <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17f6a:	cf 93       	push	r28
   17f6c:	df 93       	push	r29
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17f6e:	20 91 a5 18 	lds	r18, 0x18A5	; 0x8018a5 <plot+0x9>
   17f72:	30 91 a6 18 	lds	r19, 0x18A6	; 0x8018a6 <plot+0xa>
   17f76:	21 15       	cp	r18, r1
   17f78:	31 05       	cpc	r19, r1
   17f7a:	09 f4       	brne	.+2      	; 0x17f7e <receive_plot_flush+0x14>
   17f7c:	4a c0       	rjmp	.+148    	; 0x18012 <receive_plot_flush+0xa8>
   17f7e:	80 91 a0 18 	lds	r24, 0x18A0	; 0x8018a0 <plot+0x4>
   17f82:	90 91 a1 18 	lds	r25, 0x18A1	; 0x8018a1 <plot+0x5>
   17f86:	00 97       	sbiw	r24, 0x00	; 0
   17f88:	09 f4       	brne	.+2      	; 0x17f8c <receive_plot_flush+0x22>
   17f8a:	45 c0       	rjmp	.+138    	; 0x18016 <receive_plot_flush+0xac>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17f8c:	ac 01       	movw	r20, r24
   17f8e:	61 e0       	ldi	r22, 0x01	; 1
   17f90:	70 e0       	ldi	r23, 0x00	; 0
   17f92:	80 91 a7 18 	lds	r24, 0x18A7	; 0x8018a7 <plot+0xb>
   17f96:	90 91 a8 18 	lds	r25, 0x18A8	; 0x8018a8 <plot+0xc>
   17f9a:	0e 94 b6 7c 	call	0xf96c	; 0xf96c <fwrite>
   17f9e:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17fa0:	80 91 a0 18 	lds	r24, 0x18A0	; 0x8018a0 <plot+0x4>
   17fa4:	90 91 a1 18 	lds	r25, 0x18A1	; 0x8018a1 <plot+0x5>
   17fa8:	c8 17       	cp	r28, r24
   17faa:	d9 07       	cpc	r29, r25
   17fac:	31 f1       	breq	.+76     	; 0x17ffa <receive_plot_flush+0x90>
    {
        if(debuglevel & (1+32))
   17fae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17fb2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   17fb6:	81 72       	andi	r24, 0x21	; 33
   17fb8:	99 27       	eor	r25, r25
   17fba:	89 2b       	or	r24, r25
   17fbc:	d9 f0       	breq	.+54     	; 0x17ff4 <receive_plot_flush+0x8a>
        {
            perror("receive_plot_flush");
   17fbe:	89 e3       	ldi	r24, 0x39	; 57
   17fc0:	95 e1       	ldi	r25, 0x15	; 21
   17fc2:	0e 94 d8 78 	call	0xf1b0	; 0xf1b0 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17fc6:	df 93       	push	r29
   17fc8:	cf 93       	push	r28
   17fca:	80 91 a1 18 	lds	r24, 0x18A1	; 0x8018a1 <plot+0x5>
   17fce:	8f 93       	push	r24
   17fd0:	80 91 a0 18 	lds	r24, 0x18A0	; 0x8018a0 <plot+0x4>
   17fd4:	8f 93       	push	r24
   17fd6:	86 e5       	ldi	r24, 0x56	; 86
   17fd8:	90 e3       	ldi	r25, 0x30	; 48
   17fda:	1f 92       	push	r1
   17fdc:	9f 93       	push	r25
   17fde:	8f 93       	push	r24
   17fe0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   17fe4:	8d b7       	in	r24, 0x3d	; 61
   17fe6:	9e b7       	in	r25, 0x3e	; 62
   17fe8:	07 96       	adiw	r24, 0x07	; 7
   17fea:	0f b6       	in	r0, 0x3f	; 63
   17fec:	f8 94       	cli
   17fee:	9e bf       	out	0x3e, r25	; 62
   17ff0:	0f be       	out	0x3f, r0	; 63
   17ff2:	8d bf       	out	0x3d, r24	; 61
        }
        return(-1);
   17ff4:	8f ef       	ldi	r24, 0xFF	; 255
   17ff6:	9f ef       	ldi	r25, 0xFF	; 255
   17ff8:	0e c0       	rjmp	.+28     	; 0x18016 <receive_plot_flush+0xac>
    }

    fno = fileno( plot.fp );
   17ffa:	80 91 a5 18 	lds	r24, 0x18A5	; 0x8018a5 <plot+0x9>
   17ffe:	90 91 a6 18 	lds	r25, 0x18A6	; 0x8018a6 <plot+0xa>
   18002:	0e 94 22 77 	call	0xee44	; 0xee44 <fileno>
    if(fno < 0)
   18006:	97 fd       	sbrc	r25, 7
   18008:	f5 cf       	rjmp	.-22     	; 0x17ff4 <receive_plot_flush+0x8a>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   1800a:	0e 94 00 7c 	call	0xf800	; 0xf800 <syncfs>
    return (ret);
   1800e:	ce 01       	movw	r24, r28
   18010:	02 c0       	rjmp	.+4      	; 0x18016 <receive_plot_flush+0xac>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   18012:	80 e0       	ldi	r24, 0x00	; 0
   18014:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   18016:	df 91       	pop	r29
   18018:	cf 91       	pop	r28
   1801a:	08 95       	ret

0001801c <printer_close>:
   1801c:	a6 df       	rcall	.-180    	; 0x17f6a <receive_plot_flush>
   1801e:	97 ff       	sbrs	r25, 7
   18020:	03 c0       	rjmp	.+6      	; 0x18028 <printer_close+0xc>
   18022:	81 e0       	ldi	r24, 0x01	; 1
   18024:	80 93 a4 18 	sts	0x18A4, r24	; 0x8018a4 <plot+0x8>
   18028:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1802c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   18030:	81 72       	andi	r24, 0x21	; 33
   18032:	99 27       	eor	r25, r25
   18034:	89 2b       	or	r24, r25
   18036:	71 f0       	breq	.+28     	; 0x18054 <printer_close+0x38>
   18038:	80 91 a4 18 	lds	r24, 0x18A4	; 0x8018a4 <plot+0x8>
   1803c:	88 23       	and	r24, r24
   1803e:	51 f0       	breq	.+20     	; 0x18054 <printer_close+0x38>
   18040:	85 e8       	ldi	r24, 0x85	; 133
   18042:	90 e3       	ldi	r25, 0x30	; 48
   18044:	1f 92       	push	r1
   18046:	9f 93       	push	r25
   18048:	8f 93       	push	r24
   1804a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1804e:	0f 90       	pop	r0
   18050:	0f 90       	pop	r0
   18052:	0f 90       	pop	r0
   18054:	80 91 a5 18 	lds	r24, 0x18A5	; 0x8018a5 <plot+0x9>
   18058:	90 91 a6 18 	lds	r25, 0x18A6	; 0x8018a6 <plot+0xa>
   1805c:	00 97       	sbiw	r24, 0x00	; 0
   1805e:	09 f1       	breq	.+66     	; 0x180a2 <printer_close+0x86>
   18060:	0e 94 38 7d 	call	0xfa70	; 0xfa70 <fclose>
   18064:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18068:	85 ff       	sbrs	r24, 5
   1806a:	1b c0       	rjmp	.+54     	; 0x180a2 <printer_close+0x86>
   1806c:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <plot+0x3>
   18070:	8f 93       	push	r24
   18072:	80 91 9e 18 	lds	r24, 0x189E	; 0x80189e <plot+0x2>
   18076:	8f 93       	push	r24
   18078:	80 91 9d 18 	lds	r24, 0x189D	; 0x80189d <plot+0x1>
   1807c:	8f 93       	push	r24
   1807e:	80 91 9c 18 	lds	r24, 0x189C	; 0x80189c <plot>
   18082:	8f 93       	push	r24
   18084:	87 e7       	ldi	r24, 0x77	; 119
   18086:	90 e3       	ldi	r25, 0x30	; 48
   18088:	1f 92       	push	r1
   1808a:	9f 93       	push	r25
   1808c:	8f 93       	push	r24
   1808e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18092:	8d b7       	in	r24, 0x3d	; 61
   18094:	9e b7       	in	r25, 0x3e	; 62
   18096:	07 96       	adiw	r24, 0x07	; 7
   18098:	0f b6       	in	r0, 0x3f	; 63
   1809a:	f8 94       	cli
   1809c:	9e bf       	out	0x3e, r25	; 62
   1809e:	0f be       	out	0x3f, r0	; 63
   180a0:	8d bf       	out	0x3d, r24	; 61
   180a2:	80 91 a7 18 	lds	r24, 0x18A7	; 0x8018a7 <plot+0xb>
   180a6:	90 91 a8 18 	lds	r25, 0x18A8	; 0x8018a8 <plot+0xc>
   180aa:	00 97       	sbiw	r24, 0x00	; 0
   180ac:	11 f0       	breq	.+4      	; 0x180b2 <printer_close+0x96>
   180ae:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
   180b2:	4d cf       	rjmp	.-358    	; 0x17f4e <printer_init>
   180b4:	08 95       	ret

000180b6 <printer_open>:
   180b6:	ac e4       	ldi	r26, 0x4C	; 76
   180b8:	b0 e0       	ldi	r27, 0x00	; 0
   180ba:	e1 e6       	ldi	r30, 0x61	; 97
   180bc:	f0 ec       	ldi	r31, 0xC0	; 192
   180be:	0c 94 34 e5 	jmp	0x1ca68	; 0x1ca68 <__prologue_saves__+0xc>
   180c2:	8c 01       	movw	r16, r24
   180c4:	89 2b       	or	r24, r25
   180c6:	09 f0       	breq	.+2      	; 0x180ca <printer_open+0x14>
   180c8:	4b c0       	rjmp	.+150    	; 0x18160 <printer_open+0xaa>
   180ca:	be 01       	movw	r22, r28
   180cc:	6f 5b       	subi	r22, 0xBF	; 191
   180ce:	7f 4f       	sbci	r23, 0xFF	; 255
   180d0:	80 e0       	ldi	r24, 0x00	; 0
   180d2:	90 e0       	ldi	r25, 0x00	; 0
   180d4:	0e 94 3a 34 	call	0x6874	; 0x6874 <clock_gettime>
   180d8:	25 96       	adiw	r28, 0x05	; 5
   180da:	8c ad       	ldd	r24, Y+60	; 0x3c
   180dc:	9d ad       	ldd	r25, Y+61	; 0x3d
   180de:	ae ad       	ldd	r26, Y+62	; 0x3e
   180e0:	bf ad       	ldd	r27, Y+63	; 0x3f
   180e2:	25 97       	sbiw	r28, 0x05	; 5
   180e4:	2d 96       	adiw	r28, 0x0d	; 13
   180e6:	8c af       	std	Y+60, r24	; 0x3c
   180e8:	9d af       	std	Y+61, r25	; 0x3d
   180ea:	ae af       	std	Y+62, r26	; 0x3e
   180ec:	bf af       	std	Y+63, r27	; 0x3f
   180ee:	2d 97       	sbiw	r28, 0x0d	; 13
   180f0:	ce 01       	movw	r24, r28
   180f2:	87 5b       	subi	r24, 0xB7	; 183
   180f4:	9f 4f       	sbci	r25, 0xFF	; 255
   180f6:	0e 94 0a 38 	call	0x7014	; 0x7014 <gmtime>
   180fa:	8c 01       	movw	r16, r24
   180fc:	fc 01       	movw	r30, r24
   180fe:	90 80       	ld	r9, Z
   18100:	81 80       	ldd	r8, Z+1	; 0x01
   18102:	b2 80       	ldd	r11, Z+2	; 0x02
   18104:	a3 80       	ldd	r10, Z+3	; 0x03
   18106:	d4 80       	ldd	r13, Z+4	; 0x04
   18108:	c5 80       	ldd	r12, Z+5	; 0x05
   1810a:	e2 84       	ldd	r14, Z+10	; 0x0a
   1810c:	f3 84       	ldd	r15, Z+11	; 0x0b
   1810e:	f4 e9       	ldi	r31, 0x94	; 148
   18110:	ef 1a       	sub	r14, r31
   18112:	f8 ef       	ldi	r31, 0xF8	; 248
   18114:	ff 0a       	sbc	r15, r31
   18116:	fc 01       	movw	r30, r24
   18118:	80 85       	ldd	r24, Z+8	; 0x08
   1811a:	91 85       	ldd	r25, Z+9	; 0x09
   1811c:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <tm_mon_to_ascii>
   18120:	8f 92       	push	r8
   18122:	9f 92       	push	r9
   18124:	af 92       	push	r10
   18126:	bf 92       	push	r11
   18128:	cf 92       	push	r12
   1812a:	df 92       	push	r13
   1812c:	ff 92       	push	r15
   1812e:	ef 92       	push	r14
   18130:	9f 93       	push	r25
   18132:	8f 93       	push	r24
   18134:	f8 01       	movw	r30, r16
   18136:	87 81       	ldd	r24, Z+7	; 0x07
   18138:	8f 93       	push	r24
   1813a:	86 81       	ldd	r24, Z+6	; 0x06
   1813c:	8f 93       	push	r24
   1813e:	8c eb       	ldi	r24, 0xBC	; 188
   18140:	90 e3       	ldi	r25, 0x30	; 48
   18142:	1f 92       	push	r1
   18144:	9f 93       	push	r25
   18146:	8f 93       	push	r24
   18148:	8e 01       	movw	r16, r28
   1814a:	0f 5f       	subi	r16, 0xFF	; 255
   1814c:	1f 4f       	sbci	r17, 0xFF	; 255
   1814e:	1f 93       	push	r17
   18150:	0f 93       	push	r16
   18152:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <sprintf_P>
   18156:	0f b6       	in	r0, 0x3f	; 63
   18158:	f8 94       	cli
   1815a:	de bf       	out	0x3e, r29	; 62
   1815c:	0f be       	out	0x3f, r0	; 63
   1815e:	cd bf       	out	0x3d, r28	; 61
   18160:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18164:	85 ff       	sbrs	r24, 5
   18166:	0e c0       	rjmp	.+28     	; 0x18184 <printer_open+0xce>
   18168:	1f 93       	push	r17
   1816a:	0f 93       	push	r16
   1816c:	86 ea       	ldi	r24, 0xA6	; 166
   1816e:	90 e3       	ldi	r25, 0x30	; 48
   18170:	1f 92       	push	r1
   18172:	9f 93       	push	r25
   18174:	8f 93       	push	r24
   18176:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1817a:	0f 90       	pop	r0
   1817c:	0f 90       	pop	r0
   1817e:	0f 90       	pop	r0
   18180:	0f 90       	pop	r0
   18182:	0f 90       	pop	r0
   18184:	64 e9       	ldi	r22, 0x94	; 148
   18186:	78 e0       	ldi	r23, 0x08	; 8
   18188:	c8 01       	movw	r24, r16
   1818a:	0e 94 8e 7e 	call	0xfd1c	; 0xfd1c <fopen>
   1818e:	90 93 a6 18 	sts	0x18A6, r25	; 0x8018a6 <plot+0xa>
   18192:	80 93 a5 18 	sts	0x18A5, r24	; 0x8018a5 <plot+0x9>
   18196:	89 2b       	or	r24, r25
   18198:	b9 f4       	brne	.+46     	; 0x181c8 <printer_open+0x112>
   1819a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1819e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   181a2:	81 72       	andi	r24, 0x21	; 33
   181a4:	99 27       	eor	r25, r25
   181a6:	89 2b       	or	r24, r25
   181a8:	11 f1       	breq	.+68     	; 0x181ee <printer_open+0x138>
   181aa:	8b e1       	ldi	r24, 0x1B	; 27
   181ac:	9d e0       	ldi	r25, 0x0D	; 13
   181ae:	0e 94 d8 78 	call	0xf1b0	; 0xf1b0 <perror>
   181b2:	8a e9       	ldi	r24, 0x9A	; 154
   181b4:	90 e3       	ldi	r25, 0x30	; 48
   181b6:	1f 92       	push	r1
   181b8:	9f 93       	push	r25
   181ba:	8f 93       	push	r24
   181bc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   181c0:	0f 90       	pop	r0
   181c2:	0f 90       	pop	r0
   181c4:	0f 90       	pop	r0
   181c6:	13 c0       	rjmp	.+38     	; 0x181ee <printer_open+0x138>
   181c8:	61 e0       	ldi	r22, 0x01	; 1
   181ca:	70 e0       	ldi	r23, 0x00	; 0
   181cc:	81 e0       	ldi	r24, 0x01	; 1
   181ce:	92 e0       	ldi	r25, 0x02	; 2
   181d0:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   181d4:	90 93 a8 18 	sts	0x18A8, r25	; 0x8018a8 <plot+0xc>
   181d8:	80 93 a7 18 	sts	0x18A7, r24	; 0x8018a7 <plot+0xb>
   181dc:	89 2b       	or	r24, r25
   181de:	09 f4       	brne	.+2      	; 0x181e2 <printer_open+0x12c>
   181e0:	1d df       	rcall	.-454    	; 0x1801c <printer_close>
   181e2:	80 e0       	ldi	r24, 0x00	; 0
   181e4:	92 e0       	ldi	r25, 0x02	; 2
   181e6:	90 93 a3 18 	sts	0x18A3, r25	; 0x8018a3 <plot+0x7>
   181ea:	80 93 a2 18 	sts	0x18A2, r24	; 0x8018a2 <plot+0x6>
   181ee:	c4 5b       	subi	r28, 0xB4	; 180
   181f0:	df 4f       	sbci	r29, 0xFF	; 255
   181f2:	ec e0       	ldi	r30, 0x0C	; 12
   181f4:	0c 94 50 e5 	jmp	0x1caa0	; 0x1caa0 <__epilogue_restores__+0xc>

000181f8 <printer_buffer>:
   181f8:	cf 93       	push	r28
   181fa:	df 93       	push	r29
   181fc:	ec 01       	movw	r28, r24
   181fe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18202:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   18206:	81 72       	andi	r24, 0x21	; 33
   18208:	99 27       	eor	r25, r25
   1820a:	89 2b       	or	r24, r25
   1820c:	e9 f0       	breq	.+58     	; 0x18248 <printer_buffer+0x50>
   1820e:	80 91 9c 18 	lds	r24, 0x189C	; 0x80189c <plot>
   18212:	90 91 9d 18 	lds	r25, 0x189D	; 0x80189d <plot+0x1>
   18216:	20 91 9e 18 	lds	r18, 0x189E	; 0x80189e <plot+0x2>
   1821a:	30 91 9f 18 	lds	r19, 0x189F	; 0x80189f <plot+0x3>
   1821e:	81 11       	cpse	r24, r1
   18220:	13 c0       	rjmp	.+38     	; 0x18248 <printer_buffer+0x50>
   18222:	3f 93       	push	r19
   18224:	2f 93       	push	r18
   18226:	9f 93       	push	r25
   18228:	8f 93       	push	r24
   1822a:	8f e4       	ldi	r24, 0x4F	; 79
   1822c:	90 e3       	ldi	r25, 0x30	; 48
   1822e:	1f 92       	push	r1
   18230:	9f 93       	push	r25
   18232:	8f 93       	push	r24
   18234:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18238:	8d b7       	in	r24, 0x3d	; 61
   1823a:	9e b7       	in	r25, 0x3e	; 62
   1823c:	07 96       	adiw	r24, 0x07	; 7
   1823e:	0f b6       	in	r0, 0x3f	; 63
   18240:	f8 94       	cli
   18242:	9e bf       	out	0x3e, r25	; 62
   18244:	0f be       	out	0x3f, r0	; 63
   18246:	8d bf       	out	0x3d, r24	; 61
   18248:	ce 01       	movw	r24, r28
   1824a:	88 27       	eor	r24, r24
   1824c:	97 7f       	andi	r25, 0xF7	; 247
   1824e:	89 2b       	or	r24, r25
   18250:	41 f0       	breq	.+16     	; 0x18262 <printer_buffer+0x6a>
   18252:	8b de       	rcall	.-746    	; 0x17f6a <receive_plot_flush>
   18254:	89 2b       	or	r24, r25
   18256:	09 f4       	brne	.+2      	; 0x1825a <printer_buffer+0x62>
   18258:	3f c0       	rjmp	.+126    	; 0x182d8 <printer_buffer+0xe0>
   1825a:	81 e0       	ldi	r24, 0x01	; 1
   1825c:	80 93 a4 18 	sts	0x18A4, r24	; 0x8018a4 <plot+0x8>
   18260:	3b c0       	rjmp	.+118    	; 0x182d8 <printer_buffer+0xe0>
   18262:	20 91 a7 18 	lds	r18, 0x18A7	; 0x8018a7 <plot+0xb>
   18266:	30 91 a8 18 	lds	r19, 0x18A8	; 0x8018a8 <plot+0xc>
   1826a:	80 91 a0 18 	lds	r24, 0x18A0	; 0x8018a0 <plot+0x4>
   1826e:	90 91 a1 18 	lds	r25, 0x18A1	; 0x8018a1 <plot+0x5>
   18272:	ac 01       	movw	r20, r24
   18274:	4f 5f       	subi	r20, 0xFF	; 255
   18276:	5f 4f       	sbci	r21, 0xFF	; 255
   18278:	50 93 a1 18 	sts	0x18A1, r21	; 0x8018a1 <plot+0x5>
   1827c:	40 93 a0 18 	sts	0x18A0, r20	; 0x8018a0 <plot+0x4>
   18280:	f9 01       	movw	r30, r18
   18282:	e8 0f       	add	r30, r24
   18284:	f9 1f       	adc	r31, r25
   18286:	c0 83       	st	Z, r28
   18288:	80 91 9c 18 	lds	r24, 0x189C	; 0x80189c <plot>
   1828c:	90 91 9d 18 	lds	r25, 0x189D	; 0x80189d <plot+0x1>
   18290:	a0 91 9e 18 	lds	r26, 0x189E	; 0x80189e <plot+0x2>
   18294:	b0 91 9f 18 	lds	r27, 0x189F	; 0x80189f <plot+0x3>
   18298:	01 96       	adiw	r24, 0x01	; 1
   1829a:	a1 1d       	adc	r26, r1
   1829c:	b1 1d       	adc	r27, r1
   1829e:	80 93 9c 18 	sts	0x189C, r24	; 0x80189c <plot>
   182a2:	90 93 9d 18 	sts	0x189D, r25	; 0x80189d <plot+0x1>
   182a6:	a0 93 9e 18 	sts	0x189E, r26	; 0x80189e <plot+0x2>
   182aa:	b0 93 9f 18 	sts	0x189F, r27	; 0x80189f <plot+0x3>
   182ae:	20 91 a0 18 	lds	r18, 0x18A0	; 0x8018a0 <plot+0x4>
   182b2:	30 91 a1 18 	lds	r19, 0x18A1	; 0x8018a1 <plot+0x5>
   182b6:	80 91 a2 18 	lds	r24, 0x18A2	; 0x8018a2 <plot+0x6>
   182ba:	90 91 a3 18 	lds	r25, 0x18A3	; 0x8018a3 <plot+0x7>
   182be:	28 17       	cp	r18, r24
   182c0:	39 07       	cpc	r19, r25
   182c2:	54 f0       	brlt	.+20     	; 0x182d8 <printer_buffer+0xe0>
   182c4:	52 de       	rcall	.-860    	; 0x17f6a <receive_plot_flush>
   182c6:	97 ff       	sbrs	r25, 7
   182c8:	03 c0       	rjmp	.+6      	; 0x182d0 <printer_buffer+0xd8>
   182ca:	81 e0       	ldi	r24, 0x01	; 1
   182cc:	80 93 a4 18 	sts	0x18A4, r24	; 0x8018a4 <plot+0x8>
   182d0:	10 92 a1 18 	sts	0x18A1, r1	; 0x8018a1 <plot+0x5>
   182d4:	10 92 a0 18 	sts	0x18A0, r1	; 0x8018a0 <plot+0x4>
   182d8:	df 91       	pop	r29
   182da:	cf 91       	pop	r28
   182dc:	08 95       	ret

000182de <PRINTER_COMMANDS>:
   182de:	cf 93       	push	r28
   182e0:	c8 2f       	mov	r28, r24
   182e2:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   182e6:	90 e0       	ldi	r25, 0x00	; 0
   182e8:	0e 94 46 8c 	call	0x1188c	; 0x1188c <PRINTER_is_MLA>
   182ec:	89 2b       	or	r24, r25
   182ee:	49 f0       	breq	.+18     	; 0x18302 <PRINTER_COMMANDS+0x24>
   182f0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   182f4:	85 ff       	sbrs	r24, 5
   182f6:	1e c0       	rjmp	.+60     	; 0x18334 <PRINTER_COMMANDS+0x56>
   182f8:	1f 92       	push	r1
   182fa:	cf 93       	push	r28
   182fc:	83 e3       	ldi	r24, 0x33	; 51
   182fe:	90 e3       	ldi	r25, 0x30	; 48
   18300:	0f c0       	rjmp	.+30     	; 0x18320 <PRINTER_COMMANDS+0x42>
   18302:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   18306:	90 e0       	ldi	r25, 0x00	; 0
   18308:	0e 94 55 8c 	call	0x118aa	; 0x118aa <PRINTER_is_MTA>
   1830c:	89 2b       	or	r24, r25
   1830e:	91 f0       	breq	.+36     	; 0x18334 <PRINTER_COMMANDS+0x56>
   18310:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18314:	85 ff       	sbrs	r24, 5
   18316:	0e c0       	rjmp	.+28     	; 0x18334 <PRINTER_COMMANDS+0x56>
   18318:	1f 92       	push	r1
   1831a:	cf 93       	push	r28
   1831c:	89 e1       	ldi	r24, 0x19	; 25
   1831e:	90 e3       	ldi	r25, 0x30	; 48
   18320:	1f 92       	push	r1
   18322:	9f 93       	push	r25
   18324:	8f 93       	push	r24
   18326:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1832a:	0f 90       	pop	r0
   1832c:	0f 90       	pop	r0
   1832e:	0f 90       	pop	r0
   18330:	0f 90       	pop	r0
   18332:	0f 90       	pop	r0
   18334:	80 e0       	ldi	r24, 0x00	; 0
   18336:	90 e0       	ldi	r25, 0x00	; 0
   18338:	cf 91       	pop	r28
   1833a:	08 95       	ret

0001833c <lif_help>:
   1833c:	cf 93       	push	r28
   1833e:	df 93       	push	r29
   18340:	ec 01       	movw	r28, r24
   18342:	8b ef       	ldi	r24, 0xFB	; 251
   18344:	94 e4       	ldi	r25, 0x44	; 68
   18346:	1f 92       	push	r1
   18348:	9f 93       	push	r25
   1834a:	8f 93       	push	r24
   1834c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18350:	0f 90       	pop	r0
   18352:	0f 90       	pop	r0
   18354:	0f 90       	pop	r0
   18356:	cd 2b       	or	r28, r29
   18358:	51 f0       	breq	.+20     	; 0x1836e <lif_help+0x32>
   1835a:	82 e3       	ldi	r24, 0x32	; 50
   1835c:	93 e4       	ldi	r25, 0x43	; 67
   1835e:	1f 92       	push	r1
   18360:	9f 93       	push	r25
   18362:	8f 93       	push	r24
   18364:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18368:	0f 90       	pop	r0
   1836a:	0f 90       	pop	r0
   1836c:	0f 90       	pop	r0
   1836e:	df 91       	pop	r29
   18370:	cf 91       	pop	r28
   18372:	08 95       	ret

00018374 <lif_calloc>:
   18374:	ef 92       	push	r14
   18376:	ff 92       	push	r15
   18378:	0f 93       	push	r16
   1837a:	1f 93       	push	r17
   1837c:	cf 93       	push	r28
   1837e:	df 93       	push	r29
   18380:	16 2f       	mov	r17, r22
   18382:	07 2f       	mov	r16, r23
   18384:	f8 2e       	mov	r15, r24
   18386:	e9 2e       	mov	r14, r25
   18388:	61 e0       	ldi	r22, 0x01	; 1
   1838a:	70 e0       	ldi	r23, 0x00	; 0
   1838c:	81 2f       	mov	r24, r17
   1838e:	90 2f       	mov	r25, r16
   18390:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   18394:	ec 01       	movw	r28, r24
   18396:	89 2b       	or	r24, r25
   18398:	99 f4       	brne	.+38     	; 0x183c0 <lif_calloc+0x4c>
   1839a:	ef 92       	push	r14
   1839c:	ff 92       	push	r15
   1839e:	0f 93       	push	r16
   183a0:	1f 93       	push	r17
   183a2:	88 ee       	ldi	r24, 0xE8	; 232
   183a4:	92 e4       	ldi	r25, 0x42	; 66
   183a6:	1f 92       	push	r1
   183a8:	9f 93       	push	r25
   183aa:	8f 93       	push	r24
   183ac:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   183b0:	8d b7       	in	r24, 0x3d	; 61
   183b2:	9e b7       	in	r25, 0x3e	; 62
   183b4:	07 96       	adiw	r24, 0x07	; 7
   183b6:	0f b6       	in	r0, 0x3f	; 63
   183b8:	f8 94       	cli
   183ba:	9e bf       	out	0x3e, r25	; 62
   183bc:	0f be       	out	0x3f, r0	; 63
   183be:	8d bf       	out	0x3d, r24	; 61
   183c0:	ce 01       	movw	r24, r28
   183c2:	cd b7       	in	r28, 0x3d	; 61
   183c4:	de b7       	in	r29, 0x3e	; 62
   183c6:	e6 e0       	ldi	r30, 0x06	; 6
   183c8:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

000183cc <lif_free>:
   183cc:	00 97       	sbiw	r24, 0x00	; 0
   183ce:	59 f4       	brne	.+22     	; 0x183e6 <lif_free+0x1a>
   183d0:	80 ed       	ldi	r24, 0xD0	; 208
   183d2:	92 e4       	ldi	r25, 0x42	; 66
   183d4:	1f 92       	push	r1
   183d6:	9f 93       	push	r25
   183d8:	8f 93       	push	r24
   183da:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   183de:	0f 90       	pop	r0
   183e0:	0f 90       	pop	r0
   183e2:	0f 90       	pop	r0
   183e4:	08 95       	ret
   183e6:	0c 94 d2 29 	jmp	0x53a4	; 0x53a4 <safefree>
   183ea:	08 95       	ret

000183ec <lif_stralloc>:
   183ec:	0f 93       	push	r16
   183ee:	1f 93       	push	r17
   183f0:	cf 93       	push	r28
   183f2:	df 93       	push	r29
   183f4:	ec 01       	movw	r28, r24
   183f6:	fc 01       	movw	r30, r24
   183f8:	01 90       	ld	r0, Z+
   183fa:	00 20       	and	r0, r0
   183fc:	e9 f7       	brne	.-6      	; 0x183f8 <lif_stralloc+0xc>
   183fe:	bf 01       	movw	r22, r30
   18400:	68 1b       	sub	r22, r24
   18402:	79 0b       	sbc	r23, r25
   18404:	6d 5f       	subi	r22, 0xFD	; 253
   18406:	7f 4f       	sbci	r23, 0xFF	; 255
   18408:	07 2e       	mov	r0, r23
   1840a:	00 0c       	add	r0, r0
   1840c:	88 0b       	sbc	r24, r24
   1840e:	99 0b       	sbc	r25, r25
   18410:	b1 df       	rcall	.-158    	; 0x18374 <lif_calloc>
   18412:	8c 01       	movw	r16, r24
   18414:	00 97       	sbiw	r24, 0x00	; 0
   18416:	19 f0       	breq	.+6      	; 0x1841e <lif_stralloc+0x32>
   18418:	be 01       	movw	r22, r28
   1841a:	0e 94 a1 31 	call	0x6342	; 0x6342 <strcpy>
   1841e:	c8 01       	movw	r24, r16
   18420:	df 91       	pop	r29
   18422:	cf 91       	pop	r28
   18424:	1f 91       	pop	r17
   18426:	0f 91       	pop	r16
   18428:	08 95       	ret

0001842a <lif_open>:
   1842a:	ef 92       	push	r14
   1842c:	ff 92       	push	r15
   1842e:	0f 93       	push	r16
   18430:	1f 93       	push	r17
   18432:	cf 93       	push	r28
   18434:	df 93       	push	r29
   18436:	18 2f       	mov	r17, r24
   18438:	09 2f       	mov	r16, r25
   1843a:	f6 2e       	mov	r15, r22
   1843c:	e7 2e       	mov	r14, r23
   1843e:	0e 94 8e 7e 	call	0xfd1c	; 0xfd1c <fopen>
   18442:	ec 01       	movw	r28, r24
   18444:	89 2b       	or	r24, r25
   18446:	99 f4       	brne	.+38     	; 0x1846e <lif_open+0x44>
   18448:	ef 92       	push	r14
   1844a:	ff 92       	push	r15
   1844c:	0f 93       	push	r16
   1844e:	1f 93       	push	r17
   18450:	8b ea       	ldi	r24, 0xAB	; 171
   18452:	92 e4       	ldi	r25, 0x42	; 66
   18454:	1f 92       	push	r1
   18456:	9f 93       	push	r25
   18458:	8f 93       	push	r24
   1845a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1845e:	8d b7       	in	r24, 0x3d	; 61
   18460:	9e b7       	in	r25, 0x3e	; 62
   18462:	07 96       	adiw	r24, 0x07	; 7
   18464:	0f b6       	in	r0, 0x3f	; 63
   18466:	f8 94       	cli
   18468:	9e bf       	out	0x3e, r25	; 62
   1846a:	0f be       	out	0x3f, r0	; 63
   1846c:	8d bf       	out	0x3d, r24	; 61
   1846e:	ce 01       	movw	r24, r28
   18470:	cd b7       	in	r28, 0x3d	; 61
   18472:	de b7       	in	r29, 0x3e	; 62
   18474:	e6 e0       	ldi	r30, 0x06	; 6
   18476:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

0001847a <lif_stat>:
   1847a:	0f 93       	push	r16
   1847c:	1f 93       	push	r17
   1847e:	cf 93       	push	r28
   18480:	df 93       	push	r29
   18482:	18 2f       	mov	r17, r24
   18484:	09 2f       	mov	r16, r25
   18486:	d6 2f       	mov	r29, r22
   18488:	c7 2f       	mov	r28, r23
   1848a:	0e 94 a2 79 	call	0xf344	; 0xf344 <stat>
   1848e:	97 ff       	sbrs	r25, 7
   18490:	11 c0       	rjmp	.+34     	; 0x184b4 <lif_stat+0x3a>
   18492:	0f 93       	push	r16
   18494:	1f 93       	push	r17
   18496:	82 e9       	ldi	r24, 0x92	; 146
   18498:	92 e4       	ldi	r25, 0x42	; 66
   1849a:	1f 92       	push	r1
   1849c:	9f 93       	push	r25
   1849e:	8f 93       	push	r24
   184a0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   184a4:	0f 90       	pop	r0
   184a6:	0f 90       	pop	r0
   184a8:	0f 90       	pop	r0
   184aa:	0f 90       	pop	r0
   184ac:	0f 90       	pop	r0
   184ae:	80 e0       	ldi	r24, 0x00	; 0
   184b0:	90 e0       	ldi	r25, 0x00	; 0
   184b2:	02 c0       	rjmp	.+4      	; 0x184b8 <lif_stat+0x3e>
   184b4:	8d 2f       	mov	r24, r29
   184b6:	9c 2f       	mov	r25, r28
   184b8:	df 91       	pop	r29
   184ba:	cf 91       	pop	r28
   184bc:	1f 91       	pop	r17
   184be:	0f 91       	pop	r16
   184c0:	08 95       	ret

000184c2 <lif_seek_msg>:
   184c2:	a0 e0       	ldi	r26, 0x00	; 0
   184c4:	b0 e0       	ldi	r27, 0x00	; 0
   184c6:	e7 e6       	ldi	r30, 0x67	; 103
   184c8:	f2 ec       	ldi	r31, 0xC2	; 194
   184ca:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
   184ce:	ec 01       	movw	r28, r24
   184d0:	6a 01       	movw	r12, r20
   184d2:	7b 01       	movw	r14, r22
   184d4:	12 2f       	mov	r17, r18
   184d6:	03 2f       	mov	r16, r19
   184d8:	0e 94 ce 7a 	call	0xf59c	; 0xf59c <ftell>
   184dc:	6c 15       	cp	r22, r12
   184de:	7d 05       	cpc	r23, r13
   184e0:	8e 05       	cpc	r24, r14
   184e2:	9f 05       	cpc	r25, r15
   184e4:	19 f4       	brne	.+6      	; 0x184ec <lif_seek_msg+0x2a>
   184e6:	81 e0       	ldi	r24, 0x01	; 1
   184e8:	90 e0       	ldi	r25, 0x00	; 0
   184ea:	20 c0       	rjmp	.+64     	; 0x1852c <lif_seek_msg+0x6a>
   184ec:	20 e0       	ldi	r18, 0x00	; 0
   184ee:	30 e0       	ldi	r19, 0x00	; 0
   184f0:	b7 01       	movw	r22, r14
   184f2:	a6 01       	movw	r20, r12
   184f4:	ce 01       	movw	r24, r28
   184f6:	0e 94 50 7b 	call	0xf6a0	; 0xf6a0 <fseek>
   184fa:	97 ff       	sbrs	r25, 7
   184fc:	f4 cf       	rjmp	.-24     	; 0x184e6 <lif_seek_msg+0x24>
   184fe:	ff 92       	push	r15
   18500:	ef 92       	push	r14
   18502:	df 92       	push	r13
   18504:	cf 92       	push	r12
   18506:	0f 93       	push	r16
   18508:	1f 93       	push	r17
   1850a:	81 e7       	ldi	r24, 0x71	; 113
   1850c:	92 e4       	ldi	r25, 0x42	; 66
   1850e:	1f 92       	push	r1
   18510:	9f 93       	push	r25
   18512:	8f 93       	push	r24
   18514:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18518:	8d b7       	in	r24, 0x3d	; 61
   1851a:	9e b7       	in	r25, 0x3e	; 62
   1851c:	09 96       	adiw	r24, 0x09	; 9
   1851e:	0f b6       	in	r0, 0x3f	; 63
   18520:	f8 94       	cli
   18522:	9e bf       	out	0x3e, r25	; 62
   18524:	0f be       	out	0x3f, r0	; 63
   18526:	8d bf       	out	0x3d, r24	; 61
   18528:	80 e0       	ldi	r24, 0x00	; 0
   1852a:	90 e0       	ldi	r25, 0x00	; 0
   1852c:	cd b7       	in	r28, 0x3d	; 61
   1852e:	de b7       	in	r29, 0x3e	; 62
   18530:	e8 e0       	ldi	r30, 0x08	; 8
   18532:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

00018536 <lif_read>:
   18536:	a0 e0       	ldi	r26, 0x00	; 0
   18538:	b0 e0       	ldi	r27, 0x00	; 0
   1853a:	e1 ea       	ldi	r30, 0xA1	; 161
   1853c:	f2 ec       	ldi	r31, 0xC2	; 194
   1853e:	0c 94 34 e5 	jmp	0x1ca68	; 0x1ca68 <__prologue_saves__+0xc>
   18542:	ec 01       	movw	r28, r24
   18544:	7b 01       	movw	r14, r22
   18546:	b2 2e       	mov	r11, r18
   18548:	a3 2e       	mov	r10, r19
   1854a:	94 2e       	mov	r9, r20
   1854c:	85 2e       	mov	r8, r21
   1854e:	28 81       	ld	r18, Y
   18550:	39 81       	ldd	r19, Y+1	; 0x01
   18552:	4b 2d       	mov	r20, r11
   18554:	5a 2d       	mov	r21, r10
   18556:	69 2d       	mov	r22, r9
   18558:	78 2d       	mov	r23, r8
   1855a:	8a 81       	ldd	r24, Y+2	; 0x02
   1855c:	9b 81       	ldd	r25, Y+3	; 0x03
   1855e:	b1 df       	rcall	.-158    	; 0x184c2 <lif_seek_msg>
   18560:	89 2b       	or	r24, r25
   18562:	b9 f1       	breq	.+110    	; 0x185d2 <lif_read+0x9c>
   18564:	2a 81       	ldd	r18, Y+2	; 0x02
   18566:	3b 81       	ldd	r19, Y+3	; 0x03
   18568:	a8 01       	movw	r20, r16
   1856a:	61 e0       	ldi	r22, 0x01	; 1
   1856c:	70 e0       	ldi	r23, 0x00	; 0
   1856e:	c7 01       	movw	r24, r14
   18570:	0e 94 e4 7b 	call	0xf7c8	; 0xf7c8 <fread>
   18574:	6c 01       	movw	r12, r24
   18576:	e1 2c       	mov	r14, r1
   18578:	f1 2c       	mov	r15, r1
   1857a:	b8 01       	movw	r22, r16
   1857c:	01 2e       	mov	r0, r17
   1857e:	00 0c       	add	r0, r0
   18580:	88 0b       	sbc	r24, r24
   18582:	99 0b       	sbc	r25, r25
   18584:	c6 16       	cp	r12, r22
   18586:	d7 06       	cpc	r13, r23
   18588:	e8 06       	cpc	r14, r24
   1858a:	f9 06       	cpc	r15, r25
   1858c:	41 f1       	breq	.+80     	; 0x185de <lif_read+0xa8>
   1858e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18592:	80 ff       	sbrs	r24, 0
   18594:	22 c0       	rjmp	.+68     	; 0x185da <lif_read+0xa4>
   18596:	1f 93       	push	r17
   18598:	0f 93       	push	r16
   1859a:	1f 92       	push	r1
   1859c:	1f 92       	push	r1
   1859e:	df 92       	push	r13
   185a0:	cf 92       	push	r12
   185a2:	8f 92       	push	r8
   185a4:	9f 92       	push	r9
   185a6:	af 92       	push	r10
   185a8:	bf 92       	push	r11
   185aa:	89 81       	ldd	r24, Y+1	; 0x01
   185ac:	8f 93       	push	r24
   185ae:	88 81       	ld	r24, Y
   185b0:	8f 93       	push	r24
   185b2:	85 e3       	ldi	r24, 0x35	; 53
   185b4:	92 e4       	ldi	r25, 0x42	; 66
   185b6:	1f 92       	push	r1
   185b8:	9f 93       	push	r25
   185ba:	8f 93       	push	r24
   185bc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   185c0:	8d b7       	in	r24, 0x3d	; 61
   185c2:	9e b7       	in	r25, 0x3e	; 62
   185c4:	0f 96       	adiw	r24, 0x0f	; 15
   185c6:	0f b6       	in	r0, 0x3f	; 63
   185c8:	f8 94       	cli
   185ca:	9e bf       	out	0x3e, r25	; 62
   185cc:	0f be       	out	0x3f, r0	; 63
   185ce:	8d bf       	out	0x3d, r24	; 61
   185d0:	04 c0       	rjmp	.+8      	; 0x185da <lif_read+0xa4>
   185d2:	60 e0       	ldi	r22, 0x00	; 0
   185d4:	70 e0       	ldi	r23, 0x00	; 0
   185d6:	cb 01       	movw	r24, r22
   185d8:	02 c0       	rjmp	.+4      	; 0x185de <lif_read+0xa8>
   185da:	c7 01       	movw	r24, r14
   185dc:	b6 01       	movw	r22, r12
   185de:	cd b7       	in	r28, 0x3d	; 61
   185e0:	de b7       	in	r29, 0x3e	; 62
   185e2:	ec e0       	ldi	r30, 0x0C	; 12
   185e4:	0c 94 50 e5 	jmp	0x1caa0	; 0x1caa0 <__epilogue_restores__+0xc>

000185e8 <lif_write>:
   185e8:	a0 e0       	ldi	r26, 0x00	; 0
   185ea:	b0 e0       	ldi	r27, 0x00	; 0
   185ec:	ea ef       	ldi	r30, 0xFA	; 250
   185ee:	f2 ec       	ldi	r31, 0xC2	; 194
   185f0:	0c 94 36 e5 	jmp	0x1ca6c	; 0x1ca6c <__prologue_saves__+0x10>
   185f4:	7c 01       	movw	r14, r24
   185f6:	eb 01       	movw	r28, r22
   185f8:	d2 2e       	mov	r13, r18
   185fa:	c3 2e       	mov	r12, r19
   185fc:	b4 2e       	mov	r11, r20
   185fe:	a5 2e       	mov	r10, r21
   18600:	fc 01       	movw	r30, r24
   18602:	20 81       	ld	r18, Z
   18604:	31 81       	ldd	r19, Z+1	; 0x01
   18606:	4d 2d       	mov	r20, r13
   18608:	5c 2d       	mov	r21, r12
   1860a:	6b 2d       	mov	r22, r11
   1860c:	7a 2d       	mov	r23, r10
   1860e:	82 81       	ldd	r24, Z+2	; 0x02
   18610:	93 81       	ldd	r25, Z+3	; 0x03
   18612:	57 df       	rcall	.-338    	; 0x184c2 <lif_seek_msg>
   18614:	00 97       	sbiw	r24, 0x00	; 0
   18616:	89 f1       	breq	.+98     	; 0x1867a <lif_write+0x92>
   18618:	f7 01       	movw	r30, r14
   1861a:	22 81       	ldd	r18, Z+2	; 0x02
   1861c:	33 81       	ldd	r19, Z+3	; 0x03
   1861e:	a8 01       	movw	r20, r16
   18620:	61 e0       	ldi	r22, 0x01	; 1
   18622:	70 e0       	ldi	r23, 0x00	; 0
   18624:	ce 01       	movw	r24, r28
   18626:	0e 94 b6 7c 	call	0xf96c	; 0xf96c <fwrite>
   1862a:	ec 01       	movw	r28, r24
   1862c:	08 17       	cp	r16, r24
   1862e:	19 07       	cpc	r17, r25
   18630:	09 f1       	breq	.+66     	; 0x18674 <lif_write+0x8c>
   18632:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18636:	80 ff       	sbrs	r24, 0
   18638:	1f c0       	rjmp	.+62     	; 0x18678 <lif_write+0x90>
   1863a:	1f 93       	push	r17
   1863c:	0f 93       	push	r16
   1863e:	df 93       	push	r29
   18640:	cf 93       	push	r28
   18642:	af 92       	push	r10
   18644:	bf 92       	push	r11
   18646:	cf 92       	push	r12
   18648:	df 92       	push	r13
   1864a:	f7 01       	movw	r30, r14
   1864c:	81 81       	ldd	r24, Z+1	; 0x01
   1864e:	8f 93       	push	r24
   18650:	80 81       	ld	r24, Z
   18652:	8f 93       	push	r24
   18654:	88 ef       	ldi	r24, 0xF8	; 248
   18656:	91 e4       	ldi	r25, 0x41	; 65
   18658:	1f 92       	push	r1
   1865a:	9f 93       	push	r25
   1865c:	8f 93       	push	r24
   1865e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18662:	8d b7       	in	r24, 0x3d	; 61
   18664:	9e b7       	in	r25, 0x3e	; 62
   18666:	0d 96       	adiw	r24, 0x0d	; 13
   18668:	0f b6       	in	r0, 0x3f	; 63
   1866a:	f8 94       	cli
   1866c:	9e bf       	out	0x3e, r25	; 62
   1866e:	0f be       	out	0x3f, r0	; 63
   18670:	8d bf       	out	0x3d, r24	; 61
   18672:	02 c0       	rjmp	.+4      	; 0x18678 <lif_write+0x90>
   18674:	c8 01       	movw	r24, r16
   18676:	01 c0       	rjmp	.+2      	; 0x1867a <lif_write+0x92>
   18678:	ce 01       	movw	r24, r28
   1867a:	cd b7       	in	r28, 0x3d	; 61
   1867c:	de b7       	in	r29, 0x3e	; 62
   1867e:	ea e0       	ldi	r30, 0x0A	; 10
   18680:	0c 94 52 e5 	jmp	0x1caa4	; 0x1caa4 <__epilogue_restores__+0x10>

00018684 <lif_chars>:
   18684:	80 32       	cpi	r24, 0x20	; 32
   18686:	91 05       	cpc	r25, r1
   18688:	e1 f0       	breq	.+56     	; 0x186c2 <lif_chars+0x3e>
   1868a:	9c 01       	movw	r18, r24
   1868c:	21 56       	subi	r18, 0x61	; 97
   1868e:	31 09       	sbc	r19, r1
   18690:	2a 31       	cpi	r18, 0x1A	; 26
   18692:	31 05       	cpc	r19, r1
   18694:	10 f4       	brcc	.+4      	; 0x1869a <lif_chars+0x16>
   18696:	80 97       	sbiw	r24, 0x20	; 32
   18698:	08 95       	ret
   1869a:	9c 01       	movw	r18, r24
   1869c:	21 54       	subi	r18, 0x41	; 65
   1869e:	31 09       	sbc	r19, r1
   186a0:	2a 31       	cpi	r18, 0x1A	; 26
   186a2:	31 05       	cpc	r19, r1
   186a4:	c8 f0       	brcs	.+50     	; 0x186d8 <lif_chars+0x54>
   186a6:	16 16       	cp	r1, r22
   186a8:	17 06       	cpc	r1, r23
   186aa:	74 f4       	brge	.+28     	; 0x186c8 <lif_chars+0x44>
   186ac:	2f 5e       	subi	r18, 0xEF	; 239
   186ae:	3f 4f       	sbci	r19, 0xFF	; 255
   186b0:	2a 30       	cpi	r18, 0x0A	; 10
   186b2:	31 05       	cpc	r19, r1
   186b4:	88 f0       	brcs	.+34     	; 0x186d8 <lif_chars+0x54>
   186b6:	8f 35       	cpi	r24, 0x5F	; 95
   186b8:	91 05       	cpc	r25, r1
   186ba:	49 f0       	breq	.+18     	; 0x186ce <lif_chars+0x4a>
   186bc:	8d 97       	sbiw	r24, 0x2d	; 45
   186be:	21 f4       	brne	.+8      	; 0x186c8 <lif_chars+0x44>
   186c0:	09 c0       	rjmp	.+18     	; 0x186d4 <lif_chars+0x50>
   186c2:	80 e2       	ldi	r24, 0x20	; 32
   186c4:	90 e0       	ldi	r25, 0x00	; 0
   186c6:	08 95       	ret
   186c8:	80 e0       	ldi	r24, 0x00	; 0
   186ca:	90 e0       	ldi	r25, 0x00	; 0
   186cc:	08 95       	ret
   186ce:	8f e5       	ldi	r24, 0x5F	; 95
   186d0:	90 e0       	ldi	r25, 0x00	; 0
   186d2:	08 95       	ret
   186d4:	8d e2       	ldi	r24, 0x2D	; 45
   186d6:	90 e0       	ldi	r25, 0x00	; 0
   186d8:	08 95       	ret

000186da <lif_B2S>:
   186da:	a0 e0       	ldi	r26, 0x00	; 0
   186dc:	b0 e0       	ldi	r27, 0x00	; 0
   186de:	e3 e7       	ldi	r30, 0x73	; 115
   186e0:	f3 ec       	ldi	r31, 0xC3	; 195
   186e2:	0c 94 34 e5 	jmp	0x1ca68	; 0x1ca68 <__prologue_saves__+0xc>
   186e6:	5c 01       	movw	r10, r24
   186e8:	6b 01       	movw	r12, r22
   186ea:	ea 01       	movw	r28, r20
   186ec:	4c 01       	movw	r8, r24
   186ee:	ee 24       	eor	r14, r14
   186f0:	e3 94       	inc	r14
   186f2:	f1 2c       	mov	r15, r1
   186f4:	00 e0       	ldi	r16, 0x00	; 0
   186f6:	10 e0       	ldi	r17, 0x00	; 0
   186f8:	0c 17       	cp	r16, r28
   186fa:	1d 07       	cpc	r17, r29
   186fc:	6c f4       	brge	.+26     	; 0x18718 <lif_B2S+0x3e>
   186fe:	f4 01       	movw	r30, r8
   18700:	81 91       	ld	r24, Z+
   18702:	4f 01       	movw	r8, r30
   18704:	b8 01       	movw	r22, r16
   18706:	90 e0       	ldi	r25, 0x00	; 0
   18708:	bd df       	rcall	.-134    	; 0x18684 <lif_chars>
   1870a:	89 2b       	or	r24, r25
   1870c:	11 f4       	brne	.+4      	; 0x18712 <lif_B2S+0x38>
   1870e:	e1 2c       	mov	r14, r1
   18710:	f1 2c       	mov	r15, r1
   18712:	0f 5f       	subi	r16, 0xFF	; 255
   18714:	1f 4f       	sbci	r17, 0xFF	; 255
   18716:	f0 cf       	rjmp	.-32     	; 0x186f8 <lif_B2S+0x1e>
   18718:	d6 01       	movw	r26, r12
   1871a:	f5 01       	movw	r30, r10
   1871c:	cf 01       	movw	r24, r30
   1871e:	8a 19       	sub	r24, r10
   18720:	9b 09       	sbc	r25, r11
   18722:	8c 17       	cp	r24, r28
   18724:	9d 07       	cpc	r25, r29
   18726:	1c f4       	brge	.+6      	; 0x1872e <lif_B2S+0x54>
   18728:	81 91       	ld	r24, Z+
   1872a:	8d 93       	st	X+, r24
   1872c:	f7 cf       	rjmp	.-18     	; 0x1871c <lif_B2S+0x42>
   1872e:	d7 ff       	sbrs	r29, 7
   18730:	02 c0       	rjmp	.+4      	; 0x18736 <lif_B2S+0x5c>
   18732:	c0 e0       	ldi	r28, 0x00	; 0
   18734:	d0 e0       	ldi	r29, 0x00	; 0
   18736:	cc 0d       	add	r28, r12
   18738:	dd 1d       	adc	r29, r13
   1873a:	18 82       	st	Y, r1
   1873c:	c6 01       	movw	r24, r12
   1873e:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <trim_tail>
   18742:	c7 01       	movw	r24, r14
   18744:	cd b7       	in	r28, 0x3d	; 61
   18746:	de b7       	in	r29, 0x3e	; 62
   18748:	ec e0       	ldi	r30, 0x0C	; 12
   1874a:	0c 94 50 e5 	jmp	0x1caa0	; 0x1caa0 <__epilogue_restores__+0xc>

0001874e <lif_checkname>:
   1874e:	ef 92       	push	r14
   18750:	ff 92       	push	r15
   18752:	0f 93       	push	r16
   18754:	1f 93       	push	r17
   18756:	cf 93       	push	r28
   18758:	df 93       	push	r29
   1875a:	7c 01       	movw	r14, r24
   1875c:	ec 01       	movw	r28, r24
   1875e:	01 e0       	ldi	r16, 0x01	; 1
   18760:	10 e0       	ldi	r17, 0x00	; 0
   18762:	be 01       	movw	r22, r28
   18764:	6e 19       	sub	r22, r14
   18766:	7f 09       	sbc	r23, r15
   18768:	89 91       	ld	r24, Y+
   1876a:	88 23       	and	r24, r24
   1876c:	39 f0       	breq	.+14     	; 0x1877c <lif_checkname+0x2e>
   1876e:	90 e0       	ldi	r25, 0x00	; 0
   18770:	89 df       	rcall	.-238    	; 0x18684 <lif_chars>
   18772:	89 2b       	or	r24, r25
   18774:	b1 f7       	brne	.-20     	; 0x18762 <lif_checkname+0x14>
   18776:	00 e0       	ldi	r16, 0x00	; 0
   18778:	10 e0       	ldi	r17, 0x00	; 0
   1877a:	f3 cf       	rjmp	.-26     	; 0x18762 <lif_checkname+0x14>
   1877c:	c8 01       	movw	r24, r16
   1877e:	cd b7       	in	r28, 0x3d	; 61
   18780:	de b7       	in	r29, 0x3e	; 62
   18782:	e6 e0       	ldi	r30, 0x06	; 6
   18784:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

00018788 <lif_S2B>:
   18788:	fb 01       	movw	r30, r22
   1878a:	dc 01       	movw	r26, r24
   1878c:	20 e0       	ldi	r18, 0x00	; 0
   1878e:	30 e0       	ldi	r19, 0x00	; 0
   18790:	61 91       	ld	r22, Z+
   18792:	61 11       	cpse	r22, r1
   18794:	05 c0       	rjmp	.+10     	; 0x187a0 <lif_S2B+0x18>
   18796:	fc 01       	movw	r30, r24
   18798:	e2 0f       	add	r30, r18
   1879a:	f3 1f       	adc	r31, r19
   1879c:	60 e2       	ldi	r22, 0x20	; 32
   1879e:	08 c0       	rjmp	.+16     	; 0x187b0 <lif_S2B+0x28>
   187a0:	24 17       	cp	r18, r20
   187a2:	35 07       	cpc	r19, r21
   187a4:	24 f4       	brge	.+8      	; 0x187ae <lif_S2B+0x26>
   187a6:	6d 93       	st	X+, r22
   187a8:	2f 5f       	subi	r18, 0xFF	; 255
   187aa:	3f 4f       	sbci	r19, 0xFF	; 255
   187ac:	f1 cf       	rjmp	.-30     	; 0x18790 <lif_S2B+0x8>
   187ae:	08 95       	ret
   187b0:	9f 01       	movw	r18, r30
   187b2:	28 1b       	sub	r18, r24
   187b4:	39 0b       	sbc	r19, r25
   187b6:	24 17       	cp	r18, r20
   187b8:	35 07       	cpc	r19, r21
   187ba:	14 f4       	brge	.+4      	; 0x187c0 <lif_S2B+0x38>
   187bc:	61 93       	st	Z+, r22
   187be:	f8 cf       	rjmp	.-16     	; 0x187b0 <lif_S2B+0x28>
   187c0:	08 95       	ret

000187c2 <lif_fixname>:
   187c2:	a0 e0       	ldi	r26, 0x00	; 0
   187c4:	b0 e0       	ldi	r27, 0x00	; 0
   187c6:	e7 ee       	ldi	r30, 0xE7	; 231
   187c8:	f3 ec       	ldi	r31, 0xC3	; 195
   187ca:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__prologue_saves__+0x12>
   187ce:	8c 01       	movw	r16, r24
   187d0:	cb 01       	movw	r24, r22
   187d2:	7a 01       	movw	r14, r20
   187d4:	0e 94 78 77 	call	0xeef0	; 0xeef0 <basename>
   187d8:	6c 01       	movw	r12, r24
   187da:	e8 01       	movw	r28, r16
   187dc:	80 e2       	ldi	r24, 0x20	; 32
   187de:	b8 2e       	mov	r11, r24
   187e0:	be 01       	movw	r22, r28
   187e2:	60 1b       	sub	r22, r16
   187e4:	71 0b       	sbc	r23, r17
   187e6:	f6 01       	movw	r30, r12
   187e8:	81 91       	ld	r24, Z+
   187ea:	6f 01       	movw	r12, r30
   187ec:	81 11       	cpse	r24, r1
   187ee:	02 c0       	rjmp	.+4      	; 0x187f4 <lif_fixname+0x32>
   187f0:	20 e2       	ldi	r18, 0x20	; 32
   187f2:	0e c0       	rjmp	.+28     	; 0x18810 <lif_fixname+0x4e>
   187f4:	1e 14       	cp	r1, r14
   187f6:	1f 04       	cpc	r1, r15
   187f8:	dc f7       	brge	.-10     	; 0x187f0 <lif_fixname+0x2e>
   187fa:	8e 32       	cpi	r24, 0x2E	; 46
   187fc:	c9 f3       	breq	.-14     	; 0x187f0 <lif_fixname+0x2e>
   187fe:	90 e0       	ldi	r25, 0x00	; 0
   18800:	41 df       	rcall	.-382    	; 0x18684 <lif_chars>
   18802:	88 23       	and	r24, r24
   18804:	11 f0       	breq	.+4      	; 0x1880a <lif_fixname+0x48>
   18806:	88 83       	st	Y, r24
   18808:	01 c0       	rjmp	.+2      	; 0x1880c <lif_fixname+0x4a>
   1880a:	b8 82       	st	Y, r11
   1880c:	21 96       	adiw	r28, 0x01	; 1
   1880e:	e8 cf       	rjmp	.-48     	; 0x187e0 <lif_fixname+0x1e>
   18810:	ce 01       	movw	r24, r28
   18812:	80 1b       	sub	r24, r16
   18814:	91 0b       	sbc	r25, r17
   18816:	8e 15       	cp	r24, r14
   18818:	9f 05       	cpc	r25, r15
   1881a:	14 f4       	brge	.+4      	; 0x18820 <lif_fixname+0x5e>
   1881c:	29 93       	st	Y+, r18
   1881e:	f8 cf       	rjmp	.-16     	; 0x18810 <lif_fixname+0x4e>
   18820:	18 82       	st	Y, r1
   18822:	f8 01       	movw	r30, r16
   18824:	01 90       	ld	r0, Z+
   18826:	00 20       	and	r0, r0
   18828:	e9 f7       	brne	.-6      	; 0x18824 <lif_fixname+0x62>
   1882a:	cf 01       	movw	r24, r30
   1882c:	01 97       	sbiw	r24, 0x01	; 1
   1882e:	80 1b       	sub	r24, r16
   18830:	91 0b       	sbc	r25, r17
   18832:	cd b7       	in	r28, 0x3d	; 61
   18834:	de b7       	in	r29, 0x3e	; 62
   18836:	e9 e0       	ldi	r30, 0x09	; 9
   18838:	0c 94 53 e5 	jmp	0x1caa6	; 0x1caa6 <__epilogue_restores__+0x12>

0001883c <lif_vol2str>:
   1883c:	ef 92       	push	r14
   1883e:	ff 92       	push	r15
   18840:	0f 93       	push	r16
   18842:	1f 93       	push	r17
   18844:	cf 93       	push	r28
   18846:	df 93       	push	r29
   18848:	7c 01       	movw	r14, r24
   1884a:	eb 01       	movw	r28, r22
   1884c:	fc 01       	movw	r30, r24
   1884e:	04 a1       	ldd	r16, Z+36	; 0x24
   18850:	15 a1       	ldd	r17, Z+37	; 0x25
   18852:	20 e0       	ldi	r18, 0x00	; 0
   18854:	30 e0       	ldi	r19, 0x00	; 0
   18856:	42 e0       	ldi	r20, 0x02	; 2
   18858:	50 e0       	ldi	r21, 0x00	; 0
   1885a:	60 e0       	ldi	r22, 0x00	; 0
   1885c:	70 e0       	ldi	r23, 0x00	; 0
   1885e:	ce 01       	movw	r24, r28
   18860:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   18864:	b7 01       	movw	r22, r14
   18866:	6a 5d       	subi	r22, 0xDA	; 218
   18868:	7f 4f       	sbci	r23, 0xFF	; 255
   1886a:	46 e0       	ldi	r20, 0x06	; 6
   1886c:	50 e0       	ldi	r21, 0x00	; 0
   1886e:	ce 01       	movw	r24, r28
   18870:	02 96       	adiw	r24, 0x02	; 2
   18872:	8a df       	rcall	.-236    	; 0x18788 <lif_S2B>
   18874:	f7 01       	movw	r30, r14
   18876:	05 a5       	ldd	r16, Z+45	; 0x2d
   18878:	16 a5       	ldd	r17, Z+46	; 0x2e
   1887a:	27 a5       	ldd	r18, Z+47	; 0x2f
   1887c:	30 a9       	ldd	r19, Z+48	; 0x30
   1887e:	44 e0       	ldi	r20, 0x04	; 4
   18880:	50 e0       	ldi	r21, 0x00	; 0
   18882:	68 e0       	ldi	r22, 0x08	; 8
   18884:	70 e0       	ldi	r23, 0x00	; 0
   18886:	ce 01       	movw	r24, r28
   18888:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   1888c:	f7 01       	movw	r30, r14
   1888e:	01 a9       	ldd	r16, Z+49	; 0x31
   18890:	12 a9       	ldd	r17, Z+50	; 0x32
   18892:	20 e0       	ldi	r18, 0x00	; 0
   18894:	30 e0       	ldi	r19, 0x00	; 0
   18896:	42 e0       	ldi	r20, 0x02	; 2
   18898:	50 e0       	ldi	r21, 0x00	; 0
   1889a:	6c e0       	ldi	r22, 0x0C	; 12
   1889c:	70 e0       	ldi	r23, 0x00	; 0
   1889e:	ce 01       	movw	r24, r28
   188a0:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   188a4:	00 e0       	ldi	r16, 0x00	; 0
   188a6:	10 e0       	ldi	r17, 0x00	; 0
   188a8:	98 01       	movw	r18, r16
   188aa:	42 e0       	ldi	r20, 0x02	; 2
   188ac:	50 e0       	ldi	r21, 0x00	; 0
   188ae:	6e e0       	ldi	r22, 0x0E	; 14
   188b0:	70 e0       	ldi	r23, 0x00	; 0
   188b2:	ce 01       	movw	r24, r28
   188b4:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   188b8:	f7 01       	movw	r30, r14
   188ba:	05 a9       	ldd	r16, Z+53	; 0x35
   188bc:	16 a9       	ldd	r17, Z+54	; 0x36
   188be:	27 a9       	ldd	r18, Z+55	; 0x37
   188c0:	30 ad       	ldd	r19, Z+56	; 0x38
   188c2:	44 e0       	ldi	r20, 0x04	; 4
   188c4:	50 e0       	ldi	r21, 0x00	; 0
   188c6:	60 e1       	ldi	r22, 0x10	; 16
   188c8:	70 e0       	ldi	r23, 0x00	; 0
   188ca:	ce 01       	movw	r24, r28
   188cc:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   188d0:	f7 01       	movw	r30, r14
   188d2:	01 ad       	ldd	r16, Z+57	; 0x39
   188d4:	12 ad       	ldd	r17, Z+58	; 0x3a
   188d6:	20 e0       	ldi	r18, 0x00	; 0
   188d8:	30 e0       	ldi	r19, 0x00	; 0
   188da:	42 e0       	ldi	r20, 0x02	; 2
   188dc:	50 e0       	ldi	r21, 0x00	; 0
   188de:	64 e1       	ldi	r22, 0x14	; 20
   188e0:	70 e0       	ldi	r23, 0x00	; 0
   188e2:	ce 01       	movw	r24, r28
   188e4:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   188e8:	00 e0       	ldi	r16, 0x00	; 0
   188ea:	10 e0       	ldi	r17, 0x00	; 0
   188ec:	98 01       	movw	r18, r16
   188ee:	42 e0       	ldi	r20, 0x02	; 2
   188f0:	50 e0       	ldi	r21, 0x00	; 0
   188f2:	66 e1       	ldi	r22, 0x16	; 22
   188f4:	70 e0       	ldi	r23, 0x00	; 0
   188f6:	ce 01       	movw	r24, r28
   188f8:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   188fc:	f7 01       	movw	r30, r14
   188fe:	fd 96       	adiw	r30, 0x3d	; 61
   18900:	00 81       	ld	r16, Z
   18902:	11 81       	ldd	r17, Z+1	; 0x01
   18904:	22 81       	ldd	r18, Z+2	; 0x02
   18906:	33 81       	ldd	r19, Z+3	; 0x03
   18908:	44 e0       	ldi	r20, 0x04	; 4
   1890a:	50 e0       	ldi	r21, 0x00	; 0
   1890c:	68 e1       	ldi	r22, 0x18	; 24
   1890e:	70 e0       	ldi	r23, 0x00	; 0
   18910:	ce 01       	movw	r24, r28
   18912:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   18916:	f7 01       	movw	r30, r14
   18918:	ef 5b       	subi	r30, 0xBF	; 191
   1891a:	ff 4f       	sbci	r31, 0xFF	; 255
   1891c:	00 81       	ld	r16, Z
   1891e:	11 81       	ldd	r17, Z+1	; 0x01
   18920:	22 81       	ldd	r18, Z+2	; 0x02
   18922:	33 81       	ldd	r19, Z+3	; 0x03
   18924:	44 e0       	ldi	r20, 0x04	; 4
   18926:	50 e0       	ldi	r21, 0x00	; 0
   18928:	6c e1       	ldi	r22, 0x1C	; 28
   1892a:	70 e0       	ldi	r23, 0x00	; 0
   1892c:	ce 01       	movw	r24, r28
   1892e:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   18932:	f7 01       	movw	r30, r14
   18934:	eb 5b       	subi	r30, 0xBB	; 187
   18936:	ff 4f       	sbci	r31, 0xFF	; 255
   18938:	00 81       	ld	r16, Z
   1893a:	11 81       	ldd	r17, Z+1	; 0x01
   1893c:	22 81       	ldd	r18, Z+2	; 0x02
   1893e:	33 81       	ldd	r19, Z+3	; 0x03
   18940:	44 e0       	ldi	r20, 0x04	; 4
   18942:	50 e0       	ldi	r21, 0x00	; 0
   18944:	60 e2       	ldi	r22, 0x20	; 32
   18946:	70 e0       	ldi	r23, 0x00	; 0
   18948:	ce 01       	movw	r24, r28
   1894a:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   1894e:	de 01       	movw	r26, r28
   18950:	94 96       	adiw	r26, 0x24	; 36
   18952:	f7 01       	movw	r30, r14
   18954:	e7 5b       	subi	r30, 0xB7	; 183
   18956:	ff 4f       	sbci	r31, 0xFF	; 255
   18958:	86 e0       	ldi	r24, 0x06	; 6
   1895a:	01 90       	ld	r0, Z+
   1895c:	0d 92       	st	X+, r0
   1895e:	8a 95       	dec	r24
   18960:	e1 f7       	brne	.-8      	; 0x1895a <lif_vol2str+0x11e>
   18962:	cd b7       	in	r28, 0x3d	; 61
   18964:	de b7       	in	r29, 0x3e	; 62
   18966:	e6 e0       	ldi	r30, 0x06	; 6
   18968:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

0001896c <lif_str2vol>:
   1896c:	0f 93       	push	r16
   1896e:	1f 93       	push	r17
   18970:	cf 93       	push	r28
   18972:	df 93       	push	r29
   18974:	8c 01       	movw	r16, r24
   18976:	eb 01       	movw	r28, r22
   18978:	42 e0       	ldi	r20, 0x02	; 2
   1897a:	50 e0       	ldi	r21, 0x00	; 0
   1897c:	60 e0       	ldi	r22, 0x00	; 0
   1897e:	70 e0       	ldi	r23, 0x00	; 0
   18980:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   18984:	7d a3       	std	Y+37, r23	; 0x25
   18986:	6c a3       	std	Y+36, r22	; 0x24
   18988:	be 01       	movw	r22, r28
   1898a:	6a 5d       	subi	r22, 0xDA	; 218
   1898c:	7f 4f       	sbci	r23, 0xFF	; 255
   1898e:	46 e0       	ldi	r20, 0x06	; 6
   18990:	50 e0       	ldi	r21, 0x00	; 0
   18992:	c8 01       	movw	r24, r16
   18994:	02 96       	adiw	r24, 0x02	; 2
   18996:	a1 de       	rcall	.-702    	; 0x186da <lif_B2S>
   18998:	44 e0       	ldi	r20, 0x04	; 4
   1899a:	50 e0       	ldi	r21, 0x00	; 0
   1899c:	68 e0       	ldi	r22, 0x08	; 8
   1899e:	70 e0       	ldi	r23, 0x00	; 0
   189a0:	c8 01       	movw	r24, r16
   189a2:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   189a6:	6d a7       	std	Y+45, r22	; 0x2d
   189a8:	7e a7       	std	Y+46, r23	; 0x2e
   189aa:	8f a7       	std	Y+47, r24	; 0x2f
   189ac:	98 ab       	std	Y+48, r25	; 0x30
   189ae:	42 e0       	ldi	r20, 0x02	; 2
   189b0:	50 e0       	ldi	r21, 0x00	; 0
   189b2:	6c e0       	ldi	r22, 0x0C	; 12
   189b4:	70 e0       	ldi	r23, 0x00	; 0
   189b6:	c8 01       	movw	r24, r16
   189b8:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   189bc:	7a ab       	std	Y+50, r23	; 0x32
   189be:	69 ab       	std	Y+49, r22	; 0x31
   189c0:	42 e0       	ldi	r20, 0x02	; 2
   189c2:	50 e0       	ldi	r21, 0x00	; 0
   189c4:	6e e0       	ldi	r22, 0x0E	; 14
   189c6:	70 e0       	ldi	r23, 0x00	; 0
   189c8:	c8 01       	movw	r24, r16
   189ca:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   189ce:	7c ab       	std	Y+52, r23	; 0x34
   189d0:	6b ab       	std	Y+51, r22	; 0x33
   189d2:	44 e0       	ldi	r20, 0x04	; 4
   189d4:	50 e0       	ldi	r21, 0x00	; 0
   189d6:	60 e1       	ldi	r22, 0x10	; 16
   189d8:	70 e0       	ldi	r23, 0x00	; 0
   189da:	c8 01       	movw	r24, r16
   189dc:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   189e0:	6d ab       	std	Y+53, r22	; 0x35
   189e2:	7e ab       	std	Y+54, r23	; 0x36
   189e4:	8f ab       	std	Y+55, r24	; 0x37
   189e6:	98 af       	std	Y+56, r25	; 0x38
   189e8:	42 e0       	ldi	r20, 0x02	; 2
   189ea:	50 e0       	ldi	r21, 0x00	; 0
   189ec:	64 e1       	ldi	r22, 0x14	; 20
   189ee:	70 e0       	ldi	r23, 0x00	; 0
   189f0:	c8 01       	movw	r24, r16
   189f2:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   189f6:	7a af       	std	Y+58, r23	; 0x3a
   189f8:	69 af       	std	Y+57, r22	; 0x39
   189fa:	42 e0       	ldi	r20, 0x02	; 2
   189fc:	50 e0       	ldi	r21, 0x00	; 0
   189fe:	66 e1       	ldi	r22, 0x16	; 22
   18a00:	70 e0       	ldi	r23, 0x00	; 0
   18a02:	c8 01       	movw	r24, r16
   18a04:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   18a08:	7c af       	std	Y+60, r23	; 0x3c
   18a0a:	6b af       	std	Y+59, r22	; 0x3b
   18a0c:	44 e0       	ldi	r20, 0x04	; 4
   18a0e:	50 e0       	ldi	r21, 0x00	; 0
   18a10:	68 e1       	ldi	r22, 0x18	; 24
   18a12:	70 e0       	ldi	r23, 0x00	; 0
   18a14:	c8 01       	movw	r24, r16
   18a16:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   18a1a:	fe 01       	movw	r30, r28
   18a1c:	fd 96       	adiw	r30, 0x3d	; 61
   18a1e:	60 83       	st	Z, r22
   18a20:	71 83       	std	Z+1, r23	; 0x01
   18a22:	82 83       	std	Z+2, r24	; 0x02
   18a24:	93 83       	std	Z+3, r25	; 0x03
   18a26:	44 e0       	ldi	r20, 0x04	; 4
   18a28:	50 e0       	ldi	r21, 0x00	; 0
   18a2a:	6c e1       	ldi	r22, 0x1C	; 28
   18a2c:	70 e0       	ldi	r23, 0x00	; 0
   18a2e:	c8 01       	movw	r24, r16
   18a30:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   18a34:	fe 01       	movw	r30, r28
   18a36:	ef 5b       	subi	r30, 0xBF	; 191
   18a38:	ff 4f       	sbci	r31, 0xFF	; 255
   18a3a:	60 83       	st	Z, r22
   18a3c:	71 83       	std	Z+1, r23	; 0x01
   18a3e:	82 83       	std	Z+2, r24	; 0x02
   18a40:	93 83       	std	Z+3, r25	; 0x03
   18a42:	44 e0       	ldi	r20, 0x04	; 4
   18a44:	50 e0       	ldi	r21, 0x00	; 0
   18a46:	60 e2       	ldi	r22, 0x20	; 32
   18a48:	70 e0       	ldi	r23, 0x00	; 0
   18a4a:	c8 01       	movw	r24, r16
   18a4c:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   18a50:	fe 01       	movw	r30, r28
   18a52:	eb 5b       	subi	r30, 0xBB	; 187
   18a54:	ff 4f       	sbci	r31, 0xFF	; 255
   18a56:	60 83       	st	Z, r22
   18a58:	71 83       	std	Z+1, r23	; 0x01
   18a5a:	82 83       	std	Z+2, r24	; 0x02
   18a5c:	93 83       	std	Z+3, r25	; 0x03
   18a5e:	de 01       	movw	r26, r28
   18a60:	a7 5b       	subi	r26, 0xB7	; 183
   18a62:	bf 4f       	sbci	r27, 0xFF	; 255
   18a64:	f8 01       	movw	r30, r16
   18a66:	b4 96       	adiw	r30, 0x24	; 36
   18a68:	86 e0       	ldi	r24, 0x06	; 6
   18a6a:	01 90       	ld	r0, Z+
   18a6c:	0d 92       	st	X+, r0
   18a6e:	8a 95       	dec	r24
   18a70:	e1 f7       	brne	.-8      	; 0x18a6a <lif_str2vol+0xfe>
   18a72:	df 91       	pop	r29
   18a74:	cf 91       	pop	r28
   18a76:	1f 91       	pop	r17
   18a78:	0f 91       	pop	r16
   18a7a:	08 95       	ret

00018a7c <lif_dir2str>:
   18a7c:	ef 92       	push	r14
   18a7e:	ff 92       	push	r15
   18a80:	0f 93       	push	r16
   18a82:	1f 93       	push	r17
   18a84:	cf 93       	push	r28
   18a86:	df 93       	push	r29
   18a88:	ec 01       	movw	r28, r24
   18a8a:	7b 01       	movw	r14, r22
   18a8c:	bc 01       	movw	r22, r24
   18a8e:	61 5b       	subi	r22, 0xB1	; 177
   18a90:	7f 4f       	sbci	r23, 0xFF	; 255
   18a92:	4a e0       	ldi	r20, 0x0A	; 10
   18a94:	50 e0       	ldi	r21, 0x00	; 0
   18a96:	c7 01       	movw	r24, r14
   18a98:	77 de       	rcall	.-786    	; 0x18788 <lif_S2B>
   18a9a:	fe 01       	movw	r30, r28
   18a9c:	e6 5a       	subi	r30, 0xA6	; 166
   18a9e:	ff 4f       	sbci	r31, 0xFF	; 255
   18aa0:	00 81       	ld	r16, Z
   18aa2:	11 81       	ldd	r17, Z+1	; 0x01
   18aa4:	20 e0       	ldi	r18, 0x00	; 0
   18aa6:	30 e0       	ldi	r19, 0x00	; 0
   18aa8:	42 e0       	ldi	r20, 0x02	; 2
   18aaa:	50 e0       	ldi	r21, 0x00	; 0
   18aac:	6a e0       	ldi	r22, 0x0A	; 10
   18aae:	70 e0       	ldi	r23, 0x00	; 0
   18ab0:	c7 01       	movw	r24, r14
   18ab2:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   18ab6:	fe 01       	movw	r30, r28
   18ab8:	e4 5a       	subi	r30, 0xA4	; 164
   18aba:	ff 4f       	sbci	r31, 0xFF	; 255
   18abc:	00 81       	ld	r16, Z
   18abe:	11 81       	ldd	r17, Z+1	; 0x01
   18ac0:	22 81       	ldd	r18, Z+2	; 0x02
   18ac2:	33 81       	ldd	r19, Z+3	; 0x03
   18ac4:	44 e0       	ldi	r20, 0x04	; 4
   18ac6:	50 e0       	ldi	r21, 0x00	; 0
   18ac8:	6c e0       	ldi	r22, 0x0C	; 12
   18aca:	70 e0       	ldi	r23, 0x00	; 0
   18acc:	c7 01       	movw	r24, r14
   18ace:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   18ad2:	fe 01       	movw	r30, r28
   18ad4:	e0 5a       	subi	r30, 0xA0	; 160
   18ad6:	ff 4f       	sbci	r31, 0xFF	; 255
   18ad8:	00 81       	ld	r16, Z
   18ada:	11 81       	ldd	r17, Z+1	; 0x01
   18adc:	22 81       	ldd	r18, Z+2	; 0x02
   18ade:	33 81       	ldd	r19, Z+3	; 0x03
   18ae0:	44 e0       	ldi	r20, 0x04	; 4
   18ae2:	50 e0       	ldi	r21, 0x00	; 0
   18ae4:	60 e1       	ldi	r22, 0x10	; 16
   18ae6:	70 e0       	ldi	r23, 0x00	; 0
   18ae8:	c7 01       	movw	r24, r14
   18aea:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   18aee:	d7 01       	movw	r26, r14
   18af0:	54 96       	adiw	r26, 0x14	; 20
   18af2:	fe 01       	movw	r30, r28
   18af4:	ec 59       	subi	r30, 0x9C	; 156
   18af6:	ff 4f       	sbci	r31, 0xFF	; 255
   18af8:	86 e0       	ldi	r24, 0x06	; 6
   18afa:	01 90       	ld	r0, Z+
   18afc:	0d 92       	st	X+, r0
   18afe:	8a 95       	dec	r24
   18b00:	e1 f7       	brne	.-8      	; 0x18afa <lif_dir2str+0x7e>
   18b02:	fe 01       	movw	r30, r28
   18b04:	e6 59       	subi	r30, 0x96	; 150
   18b06:	ff 4f       	sbci	r31, 0xFF	; 255
   18b08:	00 81       	ld	r16, Z
   18b0a:	11 81       	ldd	r17, Z+1	; 0x01
   18b0c:	20 e0       	ldi	r18, 0x00	; 0
   18b0e:	30 e0       	ldi	r19, 0x00	; 0
   18b10:	42 e0       	ldi	r20, 0x02	; 2
   18b12:	50 e0       	ldi	r21, 0x00	; 0
   18b14:	6a e1       	ldi	r22, 0x1A	; 26
   18b16:	70 e0       	ldi	r23, 0x00	; 0
   18b18:	c7 01       	movw	r24, r14
   18b1a:	0e 94 d4 91 	call	0x123a8	; 0x123a8 <V2B_MSB>
   18b1e:	fe 01       	movw	r30, r28
   18b20:	e4 59       	subi	r30, 0x94	; 148
   18b22:	ff 4f       	sbci	r31, 0xFF	; 255
   18b24:	00 81       	ld	r16, Z
   18b26:	11 81       	ldd	r17, Z+1	; 0x01
   18b28:	20 e0       	ldi	r18, 0x00	; 0
   18b2a:	30 e0       	ldi	r19, 0x00	; 0
   18b2c:	42 e0       	ldi	r20, 0x02	; 2
   18b2e:	50 e0       	ldi	r21, 0x00	; 0
   18b30:	6c e1       	ldi	r22, 0x1C	; 28
   18b32:	70 e0       	ldi	r23, 0x00	; 0
   18b34:	c7 01       	movw	r24, r14
   18b36:	0e 94 e8 91 	call	0x123d0	; 0x123d0 <V2B_LSB>
   18b3a:	c2 59       	subi	r28, 0x92	; 146
   18b3c:	df 4f       	sbci	r29, 0xFF	; 255
   18b3e:	08 81       	ld	r16, Y
   18b40:	19 81       	ldd	r17, Y+1	; 0x01
   18b42:	20 e0       	ldi	r18, 0x00	; 0
   18b44:	30 e0       	ldi	r19, 0x00	; 0
   18b46:	42 e0       	ldi	r20, 0x02	; 2
   18b48:	50 e0       	ldi	r21, 0x00	; 0
   18b4a:	6e e1       	ldi	r22, 0x1E	; 30
   18b4c:	70 e0       	ldi	r23, 0x00	; 0
   18b4e:	c7 01       	movw	r24, r14
   18b50:	0e 94 e8 91 	call	0x123d0	; 0x123d0 <V2B_LSB>
   18b54:	cd b7       	in	r28, 0x3d	; 61
   18b56:	de b7       	in	r29, 0x3e	; 62
   18b58:	e6 e0       	ldi	r30, 0x06	; 6
   18b5a:	0c 94 56 e5 	jmp	0x1caac	; 0x1caac <__epilogue_restores__+0x18>

00018b5e <lif_str2dir>:
   18b5e:	0f 93       	push	r16
   18b60:	1f 93       	push	r17
   18b62:	cf 93       	push	r28
   18b64:	df 93       	push	r29
   18b66:	8c 01       	movw	r16, r24
   18b68:	eb 01       	movw	r28, r22
   18b6a:	61 5b       	subi	r22, 0xB1	; 177
   18b6c:	7f 4f       	sbci	r23, 0xFF	; 255
   18b6e:	4a e0       	ldi	r20, 0x0A	; 10
   18b70:	50 e0       	ldi	r21, 0x00	; 0
   18b72:	b3 dd       	rcall	.-1178   	; 0x186da <lif_B2S>
   18b74:	42 e0       	ldi	r20, 0x02	; 2
   18b76:	50 e0       	ldi	r21, 0x00	; 0
   18b78:	6a e0       	ldi	r22, 0x0A	; 10
   18b7a:	70 e0       	ldi	r23, 0x00	; 0
   18b7c:	c8 01       	movw	r24, r16
   18b7e:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   18b82:	fe 01       	movw	r30, r28
   18b84:	e6 5a       	subi	r30, 0xA6	; 166
   18b86:	ff 4f       	sbci	r31, 0xFF	; 255
   18b88:	71 83       	std	Z+1, r23	; 0x01
   18b8a:	60 83       	st	Z, r22
   18b8c:	44 e0       	ldi	r20, 0x04	; 4
   18b8e:	50 e0       	ldi	r21, 0x00	; 0
   18b90:	6c e0       	ldi	r22, 0x0C	; 12
   18b92:	70 e0       	ldi	r23, 0x00	; 0
   18b94:	c8 01       	movw	r24, r16
   18b96:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   18b9a:	fe 01       	movw	r30, r28
   18b9c:	e4 5a       	subi	r30, 0xA4	; 164
   18b9e:	ff 4f       	sbci	r31, 0xFF	; 255
   18ba0:	60 83       	st	Z, r22
   18ba2:	71 83       	std	Z+1, r23	; 0x01
   18ba4:	82 83       	std	Z+2, r24	; 0x02
   18ba6:	93 83       	std	Z+3, r25	; 0x03
   18ba8:	44 e0       	ldi	r20, 0x04	; 4
   18baa:	50 e0       	ldi	r21, 0x00	; 0
   18bac:	60 e1       	ldi	r22, 0x10	; 16
   18bae:	70 e0       	ldi	r23, 0x00	; 0
   18bb0:	c8 01       	movw	r24, r16
   18bb2:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   18bb6:	fe 01       	movw	r30, r28
   18bb8:	e0 5a       	subi	r30, 0xA0	; 160
   18bba:	ff 4f       	sbci	r31, 0xFF	; 255
   18bbc:	60 83       	st	Z, r22
   18bbe:	71 83       	std	Z+1, r23	; 0x01
   18bc0:	82 83       	std	Z+2, r24	; 0x02
   18bc2:	93 83       	std	Z+3, r25	; 0x03
   18bc4:	de 01       	movw	r26, r28
   18bc6:	ac 59       	subi	r26, 0x9C	; 156
   18bc8:	bf 4f       	sbci	r27, 0xFF	; 255
   18bca:	f8 01       	movw	r30, r16
   18bcc:	74 96       	adiw	r30, 0x14	; 20
   18bce:	86 e0       	ldi	r24, 0x06	; 6
   18bd0:	01 90       	ld	r0, Z+
   18bd2:	0d 92       	st	X+, r0
   18bd4:	8a 95       	dec	r24
   18bd6:	e1 f7       	brne	.-8      	; 0x18bd0 <lif_str2dir+0x72>
   18bd8:	42 e0       	ldi	r20, 0x02	; 2
   18bda:	50 e0       	ldi	r21, 0x00	; 0
   18bdc:	6a e1       	ldi	r22, 0x1A	; 26
   18bde:	70 e0       	ldi	r23, 0x00	; 0
   18be0:	c8 01       	movw	r24, r16
   18be2:	0e 94 fd 91 	call	0x123fa	; 0x123fa <B2V_MSB>
   18be6:	fe 01       	movw	r30, r28
   18be8:	e6 59       	subi	r30, 0x96	; 150
   18bea:	ff 4f       	sbci	r31, 0xFF	; 255
   18bec:	71 83       	std	Z+1, r23	; 0x01
   18bee:	60 83       	st	Z, r22
   18bf0:	42 e0       	ldi	r20, 0x02	; 2
   18bf2:	50 e0       	ldi	r21, 0x00	; 0
   18bf4:	6c e1       	ldi	r22, 0x1C	; 28
   18bf6:	70 e0       	ldi	r23, 0x00	; 0
   18bf8:	c8 01       	movw	r24, r16
   18bfa:	0e 94 1c 92 	call	0x12438	; 0x12438 <B2V_LSB>
   18bfe:	fe 01       	movw	r30, r28
   18c00:	e4 59       	subi	r30, 0x94	; 148
   18c02:	ff 4f       	sbci	r31, 0xFF	; 255
   18c04:	71 83       	std	Z+1, r23	; 0x01
   18c06:	60 83       	st	Z, r22
   18c08:	42 e0       	ldi	r20, 0x02	; 2
   18c0a:	50 e0       	ldi	r21, 0x00	; 0
   18c0c:	6e e1       	ldi	r22, 0x1E	; 30
   18c0e:	70 e0       	ldi	r23, 0x00	; 0
   18c10:	c8 01       	movw	r24, r16
   18c12:	0e 94 1c 92 	call	0x12438	; 0x12438 <B2V_LSB>
   18c16:	c2 59       	subi	r28, 0x92	; 146
   18c18:	df 4f       	sbci	r29, 0xFF	; 255
   18c1a:	79 83       	std	Y+1, r23	; 0x01
   18c1c:	68 83       	st	Y, r22
   18c1e:	df 91       	pop	r29
   18c20:	cf 91       	pop	r28
   18c22:	1f 91       	pop	r17
   18c24:	0f 91       	pop	r16
   18c26:	08 95       	ret

00018c28 <lif_BIN2BCD>:
   18c28:	6a e0       	ldi	r22, 0x0A	; 10
   18c2a:	0e 94 79 e4 	call	0x1c8f2	; 0x1c8f2 <__udivmodqi4>
   18c2e:	82 95       	swap	r24
   18c30:	80 7f       	andi	r24, 0xF0	; 240
   18c32:	89 2b       	or	r24, r25
   18c34:	08 95       	ret

00018c36 <lif_BCD2BIN>:
   18c36:	28 2f       	mov	r18, r24
   18c38:	22 95       	swap	r18
   18c3a:	2f 70       	andi	r18, 0x0F	; 15
   18c3c:	8f 70       	andi	r24, 0x0F	; 15
   18c3e:	90 e0       	ldi	r25, 0x00	; 0
   18c40:	3a e0       	ldi	r19, 0x0A	; 10
   18c42:	23 9f       	mul	r18, r19
   18c44:	80 0d       	add	r24, r0
   18c46:	91 1d       	adc	r25, r1
   18c48:	11 24       	eor	r1, r1
   18c4a:	08 95       	ret

00018c4c <lif_time2lifbcd>:
   18c4c:	aa e1       	ldi	r26, 0x1A	; 26
   18c4e:	b0 e0       	ldi	r27, 0x00	; 0
   18c50:	ec e2       	ldi	r30, 0x2C	; 44
   18c52:	f6 ec       	ldi	r31, 0xC6	; 198
   18c54:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__prologue_saves__+0x1c>
   18c58:	8b 01       	movw	r16, r22
   18c5a:	9c 01       	movw	r18, r24
   18c5c:	6f 8b       	std	Y+23, r22	; 0x17
   18c5e:	78 8f       	std	Y+24, r23	; 0x18
   18c60:	89 8f       	std	Y+25, r24	; 0x19
   18c62:	9a 8f       	std	Y+26, r25	; 0x1a
   18c64:	67 2b       	or	r22, r23
   18c66:	68 2b       	or	r22, r24
   18c68:	69 2b       	or	r22, r25
   18c6a:	41 f4       	brne	.+16     	; 0x18c7c <lif_time2lifbcd+0x30>
   18c6c:	fa 01       	movw	r30, r20
   18c6e:	ca 01       	movw	r24, r20
   18c70:	06 96       	adiw	r24, 0x06	; 6
   18c72:	11 92       	st	Z+, r1
   18c74:	e8 17       	cp	r30, r24
   18c76:	f9 07       	cpc	r31, r25
   18c78:	e1 f7       	brne	.-8      	; 0x18c72 <lif_time2lifbcd+0x26>
   18c7a:	26 c0       	rjmp	.+76     	; 0x18cc8 <lif_time2lifbcd+0x7c>
   18c7c:	8a 01       	movw	r16, r20
   18c7e:	be 01       	movw	r22, r28
   18c80:	6f 5f       	subi	r22, 0xFF	; 255
   18c82:	7f 4f       	sbci	r23, 0xFF	; 255
   18c84:	ce 01       	movw	r24, r28
   18c86:	47 96       	adiw	r24, 0x17	; 23
   18c88:	0e 94 f5 37 	call	0x6fea	; 0x6fea <gmtime_r>
   18c8c:	8b 85       	ldd	r24, Y+11	; 0x0b
   18c8e:	9c 85       	ldd	r25, Y+12	; 0x0c
   18c90:	64 e6       	ldi	r22, 0x64	; 100
   18c92:	70 e0       	ldi	r23, 0x00	; 0
   18c94:	0e 94 99 e4 	call	0x1c932	; 0x1c932 <__divmodhi4>
   18c98:	c7 df       	rcall	.-114    	; 0x18c28 <lif_BIN2BCD>
   18c9a:	f8 01       	movw	r30, r16
   18c9c:	80 83       	st	Z, r24
   18c9e:	89 85       	ldd	r24, Y+9	; 0x09
   18ca0:	8f 5f       	subi	r24, 0xFF	; 255
   18ca2:	c2 df       	rcall	.-124    	; 0x18c28 <lif_BIN2BCD>
   18ca4:	f8 01       	movw	r30, r16
   18ca6:	81 83       	std	Z+1, r24	; 0x01
   18ca8:	8f 81       	ldd	r24, Y+7	; 0x07
   18caa:	be df       	rcall	.-132    	; 0x18c28 <lif_BIN2BCD>
   18cac:	f8 01       	movw	r30, r16
   18cae:	82 83       	std	Z+2, r24	; 0x02
   18cb0:	8d 81       	ldd	r24, Y+5	; 0x05
   18cb2:	ba df       	rcall	.-140    	; 0x18c28 <lif_BIN2BCD>
   18cb4:	f8 01       	movw	r30, r16
   18cb6:	83 83       	std	Z+3, r24	; 0x03
   18cb8:	8b 81       	ldd	r24, Y+3	; 0x03
   18cba:	b6 df       	rcall	.-148    	; 0x18c28 <lif_BIN2BCD>
   18cbc:	f8 01       	movw	r30, r16
   18cbe:	84 83       	std	Z+4, r24	; 0x04
   18cc0:	89 81       	ldd	r24, Y+1	; 0x01
   18cc2:	b2 df       	rcall	.-156    	; 0x18c28 <lif_BIN2BCD>
   18cc4:	f8 01       	movw	r30, r16
   18cc6:	85 83       	std	Z+5, r24	; 0x05
   18cc8:	6a 96       	adiw	r28, 0x1a	; 26
   18cca:	e4 e0       	ldi	r30, 0x04	; 4
   18ccc:	0c 94 58 e5 	jmp	0x1cab0	; 0x1cab0 <__epilogue_restores__+0x1c>

00018cd0 <lif_lifbcd2time>:
   18cd0:	a6 e1       	ldi	r26, 0x16	; 22
   18cd2:	b0 e0       	ldi	r27, 0x00	; 0
   18cd4:	ee e6       	ldi	r30, 0x6E	; 110
   18cd6:	f6 ec       	ldi	r31, 0xC6	; 198
   18cd8:	0c 94 36 e5 	jmp	0x1ca6c	; 0x1ca6c <__prologue_saves__+0x10>
   18cdc:	8c 01       	movw	r16, r24
   18cde:	7c 01       	movw	r14, r24
   18ce0:	5c 01       	movw	r10, r24
   18ce2:	26 e0       	ldi	r18, 0x06	; 6
   18ce4:	a2 0e       	add	r10, r18
   18ce6:	b1 1c       	adc	r11, r1
   18ce8:	cc 24       	eor	r12, r12
   18cea:	c3 94       	inc	r12
   18cec:	d1 2c       	mov	r13, r1
   18cee:	f7 01       	movw	r30, r14
   18cf0:	81 91       	ld	r24, Z+
   18cf2:	7f 01       	movw	r14, r30
   18cf4:	a0 df       	rcall	.-192    	; 0x18c36 <lif_BCD2BIN>
   18cf6:	89 2b       	or	r24, r25
   18cf8:	11 f0       	breq	.+4      	; 0x18cfe <lif_lifbcd2time+0x2e>
   18cfa:	c1 2c       	mov	r12, r1
   18cfc:	d1 2c       	mov	r13, r1
   18cfe:	ea 14       	cp	r14, r10
   18d00:	fb 04       	cpc	r15, r11
   18d02:	a9 f7       	brne	.-22     	; 0x18cee <lif_lifbcd2time+0x1e>
   18d04:	c1 14       	cp	r12, r1
   18d06:	d1 04       	cpc	r13, r1
   18d08:	61 f5       	brne	.+88     	; 0x18d62 <lif_lifbcd2time+0x92>
   18d0a:	f8 01       	movw	r30, r16
   18d0c:	80 81       	ld	r24, Z
   18d0e:	93 df       	rcall	.-218    	; 0x18c36 <lif_BCD2BIN>
   18d10:	7c 01       	movw	r14, r24
   18d12:	f8 01       	movw	r30, r16
   18d14:	81 81       	ldd	r24, Z+1	; 0x01
   18d16:	8f df       	rcall	.-226    	; 0x18c36 <lif_BCD2BIN>
   18d18:	01 97       	sbiw	r24, 0x01	; 1
   18d1a:	f6 e4       	ldi	r31, 0x46	; 70
   18d1c:	ef 16       	cp	r14, r31
   18d1e:	f1 04       	cpc	r15, r1
   18d20:	1c f4       	brge	.+6      	; 0x18d28 <lif_lifbcd2time+0x58>
   18d22:	24 e6       	ldi	r18, 0x64	; 100
   18d24:	e2 0e       	add	r14, r18
   18d26:	f1 1c       	adc	r15, r1
   18d28:	fc 86       	std	Y+12, r15	; 0x0c
   18d2a:	eb 86       	std	Y+11, r14	; 0x0b
   18d2c:	9a 87       	std	Y+10, r25	; 0x0a
   18d2e:	89 87       	std	Y+9, r24	; 0x09
   18d30:	f8 01       	movw	r30, r16
   18d32:	82 81       	ldd	r24, Z+2	; 0x02
   18d34:	80 df       	rcall	.-256    	; 0x18c36 <lif_BCD2BIN>
   18d36:	98 87       	std	Y+8, r25	; 0x08
   18d38:	8f 83       	std	Y+7, r24	; 0x07
   18d3a:	f8 01       	movw	r30, r16
   18d3c:	83 81       	ldd	r24, Z+3	; 0x03
   18d3e:	7b df       	rcall	.-266    	; 0x18c36 <lif_BCD2BIN>
   18d40:	9e 83       	std	Y+6, r25	; 0x06
   18d42:	8d 83       	std	Y+5, r24	; 0x05
   18d44:	f8 01       	movw	r30, r16
   18d46:	84 81       	ldd	r24, Z+4	; 0x04
   18d48:	76 df       	rcall	.-276    	; 0x18c36 <lif_BCD2BIN>
   18d4a:	9c 83       	std	Y+4, r25	; 0x04
   18d4c:	8b 83       	std	Y+3, r24	; 0x03
   18d4e:	f8 01       	movw	r30, r16
   18d50:	85 81       	ldd	r24, Z+5	; 0x05
   18d52:	71 df       	rcall	.-286    	; 0x18c36 <lif_BCD2BIN>
   18d54:	9a 83       	std	Y+2, r25	; 0x02
   18d56:	89 83       	std	Y+1, r24	; 0x01
   18d58:	ce 01       	movw	r24, r28
   18d5a:	01 96       	adiw	r24, 0x01	; 1
   18d5c:	0e 94 ca 3a 	call	0x7594	; 0x7594 <timegm>
   18d60:	03 c0       	rjmp	.+6      	; 0x18d68 <lif_lifbcd2time+0x98>
   18d62:	60 e0       	ldi	r22, 0x00	; 0
   18d64:	70 e0       	ldi	r23, 0x00	; 0
   18d66:	cb 01       	movw	r24, r22
   18d68:	66 96       	adiw	r28, 0x16	; 22
   18d6a:	ea e0       	ldi	r30, 0x0A	; 10
   18d6c:	0c 94 52 e5 	jmp	0x1caa4	; 0x1caa4 <__epilogue_restores__+0x10>

00018d70 <lif_ctime_gmt>:
   18d70:	a6 e1       	ldi	r26, 0x16	; 22
   18d72:	b0 e0       	ldi	r27, 0x00	; 0
   18d74:	ee eb       	ldi	r30, 0xBE	; 190
   18d76:	f6 ec       	ldi	r31, 0xC6	; 198
   18d78:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__prologue_saves__+0x1c>
   18d7c:	20 e2       	ldi	r18, 0x20	; 32
   18d7e:	e9 ec       	ldi	r30, 0xC9	; 201
   18d80:	f8 e1       	ldi	r31, 0x18	; 24
   18d82:	df 01       	movw	r26, r30
   18d84:	1d 92       	st	X+, r1
   18d86:	2a 95       	dec	r18
   18d88:	e9 f7       	brne	.-6      	; 0x18d84 <lif_ctime_gmt+0x14>
   18d8a:	be 01       	movw	r22, r28
   18d8c:	6f 5f       	subi	r22, 0xFF	; 255
   18d8e:	7f 4f       	sbci	r23, 0xFF	; 255
   18d90:	0e 94 f5 37 	call	0x6fea	; 0x6fea <gmtime_r>
   18d94:	69 ec       	ldi	r22, 0xC9	; 201
   18d96:	78 e1       	ldi	r23, 0x18	; 24
   18d98:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <asctime_r>
   18d9c:	8c 01       	movw	r16, r24
   18d9e:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <trim_tail>
   18da2:	c8 01       	movw	r24, r16
   18da4:	66 96       	adiw	r28, 0x16	; 22
   18da6:	e4 e0       	ldi	r30, 0x04	; 4
   18da8:	0c 94 58 e5 	jmp	0x1cab0	; 0x1cab0 <__epilogue_restores__+0x1c>

00018dac <lif_lifbcd2timestr>:
   18dac:	a4 e0       	ldi	r26, 0x04	; 4
   18dae:	b0 e0       	ldi	r27, 0x00	; 0
   18db0:	ec ed       	ldi	r30, 0xDC	; 220
   18db2:	f6 ec       	ldi	r31, 0xC6	; 198
   18db4:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x20>
   18db8:	20 e2       	ldi	r18, 0x20	; 32
   18dba:	e9 ea       	ldi	r30, 0xA9	; 169
   18dbc:	f8 e1       	ldi	r31, 0x18	; 24
   18dbe:	df 01       	movw	r26, r30
   18dc0:	1d 92       	st	X+, r1
   18dc2:	2a 95       	dec	r18
   18dc4:	e9 f7       	brne	.-6      	; 0x18dc0 <lif_lifbcd2timestr+0x14>
   18dc6:	84 df       	rcall	.-248    	; 0x18cd0 <lif_lifbcd2time>
   18dc8:	69 83       	std	Y+1, r22	; 0x01
   18dca:	7a 83       	std	Y+2, r23	; 0x02
   18dcc:	8b 83       	std	Y+3, r24	; 0x03
   18dce:	9c 83       	std	Y+4, r25	; 0x04
   18dd0:	67 2b       	or	r22, r23
   18dd2:	68 2b       	or	r22, r24
   18dd4:	69 2b       	or	r22, r25
   18dd6:	29 f0       	breq	.+10     	; 0x18de2 <lif_lifbcd2timestr+0x36>
   18dd8:	ce 01       	movw	r24, r28
   18dda:	01 96       	adiw	r24, 0x01	; 1
   18ddc:	c9 df       	rcall	.-110    	; 0x18d70 <lif_ctime_gmt>
   18dde:	bc 01       	movw	r22, r24
   18de0:	02 c0       	rjmp	.+4      	; 0x18de6 <lif_lifbcd2timestr+0x3a>
   18de2:	62 e7       	ldi	r22, 0x72	; 114
   18de4:	75 e1       	ldi	r23, 0x15	; 21
   18de6:	89 ea       	ldi	r24, 0xA9	; 169
   18de8:	98 e1       	ldi	r25, 0x18	; 24
   18dea:	0e 94 a1 31 	call	0x6342	; 0x6342 <strcpy>
   18dee:	89 ea       	ldi	r24, 0xA9	; 169
   18df0:	98 e1       	ldi	r25, 0x18	; 24
   18df2:	24 96       	adiw	r28, 0x04	; 4
   18df4:	e2 e0       	ldi	r30, 0x02	; 2
   18df6:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x20>

00018dfa <lif_image_clear>:
   18dfa:	20 e7       	ldi	r18, 0x70	; 112
   18dfc:	fc 01       	movw	r30, r24
   18dfe:	11 92       	st	Z+, r1
   18e00:	2a 95       	dec	r18
   18e02:	e9 f7       	brne	.-6      	; 0x18dfe <lif_image_clear+0x4>
   18e04:	08 95       	ret

00018e06 <lif_dir_clear>:
   18e06:	81 5b       	subi	r24, 0xB1	; 177
   18e08:	9f 4f       	sbci	r25, 0xFF	; 255
   18e0a:	21 e2       	ldi	r18, 0x21	; 33
   18e0c:	fc 01       	movw	r30, r24
   18e0e:	11 92       	st	Z+, r1
   18e10:	2a 95       	dec	r18
   18e12:	e9 f7       	brne	.-6      	; 0x18e0e <lif_dir_clear+0x8>
   18e14:	08 95       	ret

00018e16 <lif_vol_clear>:
   18e16:	84 96       	adiw	r24, 0x24	; 36
   18e18:	2b e2       	ldi	r18, 0x2B	; 43
   18e1a:	fc 01       	movw	r30, r24
   18e1c:	11 92       	st	Z+, r1
   18e1e:	2a 95       	dec	r18
   18e20:	e9 f7       	brne	.-6      	; 0x18e1c <lif_vol_clear+0x6>
   18e22:	08 95       	ret

00018e24 <lif_dump_vol>:
   18e24:	cf 93       	push	r28
   18e26:	df 93       	push	r29
   18e28:	ec 01       	movw	r28, r24
   18e2a:	7f 93       	push	r23
   18e2c:	6f 93       	push	r22
   18e2e:	83 ef       	ldi	r24, 0xF3	; 243
   18e30:	91 e4       	ldi	r25, 0x41	; 65
   18e32:	1f 92       	push	r1
   18e34:	9f 93       	push	r25
   18e36:	8f 93       	push	r24
   18e38:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18e3c:	89 81       	ldd	r24, Y+1	; 0x01
   18e3e:	8f 93       	push	r24
   18e40:	88 81       	ld	r24, Y
   18e42:	8f 93       	push	r24
   18e44:	89 ed       	ldi	r24, 0xD9	; 217
   18e46:	91 e4       	ldi	r25, 0x41	; 65
   18e48:	1f 92       	push	r1
   18e4a:	9f 93       	push	r25
   18e4c:	8f 93       	push	r24
   18e4e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18e52:	8f 81       	ldd	r24, Y+7	; 0x07
   18e54:	8f 93       	push	r24
   18e56:	8e 81       	ldd	r24, Y+6	; 0x06
   18e58:	8f 93       	push	r24
   18e5a:	8d 81       	ldd	r24, Y+5	; 0x05
   18e5c:	8f 93       	push	r24
   18e5e:	8c 81       	ldd	r24, Y+4	; 0x04
   18e60:	8f 93       	push	r24
   18e62:	8c eb       	ldi	r24, 0xBC	; 188
   18e64:	91 e4       	ldi	r25, 0x41	; 65
   18e66:	1f 92       	push	r1
   18e68:	9f 93       	push	r25
   18e6a:	8f 93       	push	r24
   18e6c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18e70:	8b 85       	ldd	r24, Y+11	; 0x0b
   18e72:	8f 93       	push	r24
   18e74:	8a 85       	ldd	r24, Y+10	; 0x0a
   18e76:	8f 93       	push	r24
   18e78:	89 85       	ldd	r24, Y+9	; 0x09
   18e7a:	8f 93       	push	r24
   18e7c:	88 85       	ldd	r24, Y+8	; 0x08
   18e7e:	8f 93       	push	r24
   18e80:	8f e9       	ldi	r24, 0x9F	; 159
   18e82:	91 e4       	ldi	r25, 0x41	; 65
   18e84:	1f 92       	push	r1
   18e86:	9f 93       	push	r25
   18e88:	8f 93       	push	r24
   18e8a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18e8e:	8f 85       	ldd	r24, Y+15	; 0x0f
   18e90:	8f 93       	push	r24
   18e92:	8e 85       	ldd	r24, Y+14	; 0x0e
   18e94:	8f 93       	push	r24
   18e96:	8d 85       	ldd	r24, Y+13	; 0x0d
   18e98:	8f 93       	push	r24
   18e9a:	8c 85       	ldd	r24, Y+12	; 0x0c
   18e9c:	8f 93       	push	r24
   18e9e:	82 e8       	ldi	r24, 0x82	; 130
   18ea0:	91 e4       	ldi	r25, 0x41	; 65
   18ea2:	1f 92       	push	r1
   18ea4:	9f 93       	push	r25
   18ea6:	8f 93       	push	r24
   18ea8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18eac:	8b 89       	ldd	r24, Y+19	; 0x13
   18eae:	8f 93       	push	r24
   18eb0:	8a 89       	ldd	r24, Y+18	; 0x12
   18eb2:	8f 93       	push	r24
   18eb4:	89 89       	ldd	r24, Y+17	; 0x11
   18eb6:	8f 93       	push	r24
   18eb8:	88 89       	ldd	r24, Y+16	; 0x10
   18eba:	8f 93       	push	r24
   18ebc:	85 e6       	ldi	r24, 0x65	; 101
   18ebe:	91 e4       	ldi	r25, 0x41	; 65
   18ec0:	1f 92       	push	r1
   18ec2:	9f 93       	push	r25
   18ec4:	8f 93       	push	r24
   18ec6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18eca:	8d b7       	in	r24, 0x3d	; 61
   18ecc:	9e b7       	in	r25, 0x3e	; 62
   18ece:	86 96       	adiw	r24, 0x26	; 38
   18ed0:	0f b6       	in	r0, 0x3f	; 63
   18ed2:	f8 94       	cli
   18ed4:	9e bf       	out	0x3e, r25	; 62
   18ed6:	0f be       	out	0x3f, r0	; 63
   18ed8:	8d bf       	out	0x3d, r24	; 61
   18eda:	8f 89       	ldd	r24, Y+23	; 0x17
   18edc:	8f 93       	push	r24
   18ede:	8e 89       	ldd	r24, Y+22	; 0x16
   18ee0:	8f 93       	push	r24
   18ee2:	8d 89       	ldd	r24, Y+21	; 0x15
   18ee4:	8f 93       	push	r24
   18ee6:	8c 89       	ldd	r24, Y+20	; 0x14
   18ee8:	8f 93       	push	r24
   18eea:	88 e4       	ldi	r24, 0x48	; 72
   18eec:	91 e4       	ldi	r25, 0x41	; 65
   18eee:	1f 92       	push	r1
   18ef0:	9f 93       	push	r25
   18ef2:	8f 93       	push	r24
   18ef4:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18ef8:	8b 8d       	ldd	r24, Y+27	; 0x1b
   18efa:	8f 93       	push	r24
   18efc:	8a 8d       	ldd	r24, Y+26	; 0x1a
   18efe:	8f 93       	push	r24
   18f00:	89 8d       	ldd	r24, Y+25	; 0x19
   18f02:	8f 93       	push	r24
   18f04:	88 8d       	ldd	r24, Y+24	; 0x18
   18f06:	8f 93       	push	r24
   18f08:	8b e2       	ldi	r24, 0x2B	; 43
   18f0a:	91 e4       	ldi	r25, 0x41	; 65
   18f0c:	1f 92       	push	r1
   18f0e:	9f 93       	push	r25
   18f10:	8f 93       	push	r24
   18f12:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18f16:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18f18:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18f1a:	09 2e       	mov	r0, r25
   18f1c:	00 0c       	add	r0, r0
   18f1e:	aa 0b       	sbc	r26, r26
   18f20:	bb 0b       	sbc	r27, r27
   18f22:	bf 93       	push	r27
   18f24:	af 93       	push	r26
   18f26:	9f 93       	push	r25
   18f28:	8f 93       	push	r24
   18f2a:	8e e0       	ldi	r24, 0x0E	; 14
   18f2c:	91 e4       	ldi	r25, 0x41	; 65
   18f2e:	1f 92       	push	r1
   18f30:	9f 93       	push	r25
   18f32:	8f 93       	push	r24
   18f34:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18f38:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18f3a:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18f3c:	09 2e       	mov	r0, r25
   18f3e:	00 0c       	add	r0, r0
   18f40:	aa 0b       	sbc	r26, r26
   18f42:	bb 0b       	sbc	r27, r27
   18f44:	bf 93       	push	r27
   18f46:	af 93       	push	r26
   18f48:	9f 93       	push	r25
   18f4a:	8f 93       	push	r24
   18f4c:	81 ef       	ldi	r24, 0xF1	; 241
   18f4e:	90 e4       	ldi	r25, 0x40	; 64
   18f50:	1f 92       	push	r1
   18f52:	9f 93       	push	r25
   18f54:	8f 93       	push	r24
   18f56:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18f5a:	ce 01       	movw	r24, r28
   18f5c:	86 96       	adiw	r24, 0x26	; 38
   18f5e:	9f 93       	push	r25
   18f60:	8f 93       	push	r24
   18f62:	87 ed       	ldi	r24, 0xD7	; 215
   18f64:	90 e4       	ldi	r25, 0x40	; 64
   18f66:	1f 92       	push	r1
   18f68:	9f 93       	push	r25
   18f6a:	8f 93       	push	r24
   18f6c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18f70:	8d b7       	in	r24, 0x3d	; 61
   18f72:	9e b7       	in	r25, 0x3e	; 62
   18f74:	81 96       	adiw	r24, 0x21	; 33
   18f76:	0f b6       	in	r0, 0x3f	; 63
   18f78:	f8 94       	cli
   18f7a:	9e bf       	out	0x3e, r25	; 62
   18f7c:	0f be       	out	0x3f, r0	; 63
   18f7e:	8d bf       	out	0x3d, r24	; 61
   18f80:	8d a1       	ldd	r24, Y+37	; 0x25
   18f82:	8f 93       	push	r24
   18f84:	8c a1       	ldd	r24, Y+36	; 0x24
   18f86:	8f 93       	push	r24
   18f88:	8b eb       	ldi	r24, 0xBB	; 187
   18f8a:	90 e4       	ldi	r25, 0x40	; 64
   18f8c:	1f 92       	push	r1
   18f8e:	9f 93       	push	r25
   18f90:	8f 93       	push	r24
   18f92:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18f96:	88 a9       	ldd	r24, Y+48	; 0x30
   18f98:	8f 93       	push	r24
   18f9a:	8f a5       	ldd	r24, Y+47	; 0x2f
   18f9c:	8f 93       	push	r24
   18f9e:	8e a5       	ldd	r24, Y+46	; 0x2e
   18fa0:	8f 93       	push	r24
   18fa2:	8d a5       	ldd	r24, Y+45	; 0x2d
   18fa4:	8f 93       	push	r24
   18fa6:	8e e9       	ldi	r24, 0x9E	; 158
   18fa8:	90 e4       	ldi	r25, 0x40	; 64
   18faa:	1f 92       	push	r1
   18fac:	9f 93       	push	r25
   18fae:	8f 93       	push	r24
   18fb0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18fb4:	88 ad       	ldd	r24, Y+56	; 0x38
   18fb6:	8f 93       	push	r24
   18fb8:	8f a9       	ldd	r24, Y+55	; 0x37
   18fba:	8f 93       	push	r24
   18fbc:	8e a9       	ldd	r24, Y+54	; 0x36
   18fbe:	8f 93       	push	r24
   18fc0:	8d a9       	ldd	r24, Y+53	; 0x35
   18fc2:	8f 93       	push	r24
   18fc4:	81 e8       	ldi	r24, 0x81	; 129
   18fc6:	90 e4       	ldi	r25, 0x40	; 64
   18fc8:	1f 92       	push	r1
   18fca:	9f 93       	push	r25
   18fcc:	8f 93       	push	r24
   18fce:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18fd2:	8a a9       	ldd	r24, Y+50	; 0x32
   18fd4:	8f 93       	push	r24
   18fd6:	89 a9       	ldd	r24, Y+49	; 0x31
   18fd8:	8f 93       	push	r24
   18fda:	85 e6       	ldi	r24, 0x65	; 101
   18fdc:	90 e4       	ldi	r25, 0x40	; 64
   18fde:	1f 92       	push	r1
   18fe0:	9f 93       	push	r25
   18fe2:	8f 93       	push	r24
   18fe4:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18fe8:	8a ad       	ldd	r24, Y+58	; 0x3a
   18fea:	8f 93       	push	r24
   18fec:	89 ad       	ldd	r24, Y+57	; 0x39
   18fee:	8f 93       	push	r24
   18ff0:	89 e4       	ldi	r24, 0x49	; 73
   18ff2:	90 e4       	ldi	r25, 0x40	; 64
   18ff4:	1f 92       	push	r1
   18ff6:	9f 93       	push	r25
   18ff8:	8f 93       	push	r24
   18ffa:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   18ffe:	ce 01       	movw	r24, r28
   19000:	87 5b       	subi	r24, 0xB7	; 183
   19002:	9f 4f       	sbci	r25, 0xFF	; 255
   19004:	d3 de       	rcall	.-602    	; 0x18dac <lif_lifbcd2timestr>
   19006:	9f 93       	push	r25
   19008:	8f 93       	push	r24
   1900a:	8f e2       	ldi	r24, 0x2F	; 47
   1900c:	90 e4       	ldi	r25, 0x40	; 64
   1900e:	1f 92       	push	r1
   19010:	9f 93       	push	r25
   19012:	8f 93       	push	r24
   19014:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   19018:	8d b7       	in	r24, 0x3d	; 61
   1901a:	9e b7       	in	r25, 0x3e	; 62
   1901c:	82 96       	adiw	r24, 0x22	; 34
   1901e:	0f b6       	in	r0, 0x3f	; 63
   19020:	f8 94       	cli
   19022:	9e bf       	out	0x3e, r25	; 62
   19024:	0f be       	out	0x3f, r0	; 63
   19026:	8d bf       	out	0x3d, r24	; 61
   19028:	ce 01       	movw	r24, r28
   1902a:	81 5b       	subi	r24, 0xB1	; 177
   1902c:	9f 4f       	sbci	r25, 0xFF	; 255
   1902e:	9f 93       	push	r25
   19030:	8f 93       	push	r24
   19032:	85 e1       	ldi	r24, 0x15	; 21
   19034:	90 e4       	ldi	r25, 0x40	; 64
   19036:	1f 92       	push	r1
   19038:	9f 93       	push	r25
   1903a:	8f 93       	push	r24
   1903c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   19040:	fe 01       	movw	r30, r28
   19042:	e6 5a       	subi	r30, 0xA6	; 166
   19044:	ff 4f       	sbci	r31, 0xFF	; 255
   19046:	81 81       	ldd	r24, Z+1	; 0x01
   19048:	8f 93       	push	r24
   1904a:	80 81       	ld	r24, Z
   1904c:	8f 93       	push	r24
   1904e:	89 ef       	ldi	r24, 0xF9	; 249
   19050:	9f e3       	ldi	r25, 0x3F	; 63
   19052:	1f 92       	push	r1
   19054:	9f 93       	push	r25
   19056:	8f 93       	push	r24
   19058:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1905c:	fe 01       	movw	r30, r28
   1905e:	e6 59       	subi	r30, 0x96	; 150
   19060:	ff 4f       	sbci	r31, 0xFF	; 255
   19062:	81 81       	ldd	r24, Z+1	; 0x01
   19064:	8f 93       	push	r24
   19066:	80 81       	ld	r24, Z
   19068:	8f 93       	push	r24
   1906a:	8d ed       	ldi	r24, 0xDD	; 221
   1906c:	9f e3       	ldi	r25, 0x3F	; 63
   1906e:	1f 92       	push	r1
   19070:	9f 93       	push	r25
   19072:	8f 93       	push	r24
   19074:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   19078:	fe 01       	movw	r30, r28
   1907a:	e4 5a       	subi	r30, 0xA4	; 164
   1907c:	ff 4f       	sbci	r31, 0xFF	; 255
   1907e:	83 81       	ldd	r24, Z+3	; 0x03
   19080:	8f 93       	push	r24
   19082:	82 81       	ldd	r24, Z+2	; 0x02
   19084:	8f 93       	push	r24
   19086:	81 81       	ldd	r24, Z+1	; 0x01
   19088:	8f 93       	push	r24
   1908a:	80 81       	ld	r24, Z
   1908c:	8f 93       	push	r24
   1908e:	80 ec       	ldi	r24, 0xC0	; 192
   19090:	9f e3       	ldi	r25, 0x3F	; 63
   19092:	1f 92       	push	r1
   19094:	9f 93       	push	r25
   19096:	8f 93       	push	r24
   19098:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1909c:	fe 01       	movw	r30, r28
   1909e:	e0 5a       	subi	r30, 0xA0	; 160
   190a0:	ff 4f       	sbci	r31, 0xFF	; 255
   190a2:	83 81       	ldd	r24, Z+3	; 0x03
   190a4:	8f 93       	push	r24
   190a6:	82 81       	ldd	r24, Z+2	; 0x02
   190a8:	8f 93       	push	r24
   190aa:	81 81       	ldd	r24, Z+1	; 0x01
   190ac:	8f 93       	push	r24
   190ae:	80 81       	ld	r24, Z
   190b0:	8f 93       	push	r24
   190b2:	83 ea       	ldi	r24, 0xA3	; 163
   190b4:	9f e3       	ldi	r25, 0x3F	; 63
   190b6:	1f 92       	push	r1
   190b8:	9f 93       	push	r25
   190ba:	8f 93       	push	r24
   190bc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   190c0:	fe 01       	movw	r30, r28
   190c2:	e4 59       	subi	r30, 0x94	; 148
   190c4:	ff 4f       	sbci	r31, 0xFF	; 255
   190c6:	80 81       	ld	r24, Z
   190c8:	91 81       	ldd	r25, Z+1	; 0x01
   190ca:	1f 92       	push	r1
   190cc:	1f 92       	push	r1
   190ce:	9f 93       	push	r25
   190d0:	8f 93       	push	r24
   190d2:	86 e8       	ldi	r24, 0x86	; 134
   190d4:	9f e3       	ldi	r25, 0x3F	; 63
   190d6:	1f 92       	push	r1
   190d8:	9f 93       	push	r25
   190da:	8f 93       	push	r24
   190dc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   190e0:	8d b7       	in	r24, 0x3d	; 61
   190e2:	9e b7       	in	r25, 0x3e	; 62
   190e4:	84 96       	adiw	r24, 0x24	; 36
   190e6:	0f b6       	in	r0, 0x3f	; 63
   190e8:	f8 94       	cli
   190ea:	9e bf       	out	0x3e, r25	; 62
   190ec:	0f be       	out	0x3f, r0	; 63
   190ee:	8d bf       	out	0x3d, r24	; 61
   190f0:	fe 01       	movw	r30, r28
   190f2:	e2 59       	subi	r30, 0x92	; 146
   190f4:	ff 4f       	sbci	r31, 0xFF	; 255
   190f6:	81 81       	ldd	r24, Z+1	; 0x01
   190f8:	8f 93       	push	r24
   190fa:	80 81       	ld	r24, Z
   190fc:	8f 93       	push	r24
   190fe:	8a e6       	ldi	r24, 0x6A	; 106
   19100:	9f e3       	ldi	r25, 0x3F	; 63
   19102:	1f 92       	push	r1
   19104:	9f 93       	push	r25
   19106:	8f 93       	push	r24
   19108:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1910c:	ce 01       	movw	r24, r28
   1910e:	8c 59       	subi	r24, 0x9C	; 156
   19110:	9f 4f       	sbci	r25, 0xFF	; 255
   19112:	4c de       	rcall	.-872    	; 0x18dac <lif_lifbcd2timestr>
   19114:	9f 93       	push	r25
   19116:	8f 93       	push	r24
   19118:	80 e5       	ldi	r24, 0x50	; 80
   1911a:	9f e3       	ldi	r25, 0x3F	; 63
   1911c:	1f 92       	push	r1
   1911e:	9f 93       	push	r25
   19120:	8f 93       	push	r24
   19122:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   19126:	8e e4       	ldi	r24, 0x4E	; 78
   19128:	9f e3       	ldi	r25, 0x3F	; 63
   1912a:	1f 92       	push	r1
   1912c:	9f 93       	push	r25
   1912e:	8f 93       	push	r24
   19130:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   19134:	8d b7       	in	r24, 0x3d	; 61
   19136:	9e b7       	in	r25, 0x3e	; 62
   19138:	0d 96       	adiw	r24, 0x0d	; 13
   1913a:	0f b6       	in	r0, 0x3f	; 63
   1913c:	f8 94       	cli
   1913e:	9e bf       	out	0x3e, r25	; 62
   19140:	0f be       	out	0x3f, r0	; 63
   19142:	8d bf       	out	0x3d, r24	; 61
   19144:	df 91       	pop	r29
   19146:	cf 91       	pop	r28
   19148:	08 95       	ret

0001914a <lif_check_volume>:
   1914a:	0f 93       	push	r16
   1914c:	1f 93       	push	r17
   1914e:	cf 93       	push	r28
   19150:	df 93       	push	r29
   19152:	ec 01       	movw	r28, r24
   19154:	86 96       	adiw	r24, 0x26	; 38
   19156:	fb da       	rcall	.-2570   	; 0x1874e <lif_checkname>
   19158:	89 2b       	or	r24, r25
   1915a:	79 f4       	brne	.+30     	; 0x1917a <lif_check_volume+0x30>
   1915c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19160:	80 ff       	sbrs	r24, 0
   19162:	0e c0       	rjmp	.+28     	; 0x19180 <lif_check_volume+0x36>
   19164:	8f e2       	ldi	r24, 0x2F	; 47
   19166:	9f e3       	ldi	r25, 0x3F	; 63
   19168:	1f 92       	push	r1
   1916a:	9f 93       	push	r25
   1916c:	8f 93       	push	r24
   1916e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   19172:	0f 90       	pop	r0
   19174:	0f 90       	pop	r0
   19176:	0f 90       	pop	r0
   19178:	03 c0       	rjmp	.+6      	; 0x19180 <lif_check_volume+0x36>
   1917a:	81 e0       	ldi	r24, 0x01	; 1
   1917c:	90 e0       	ldi	r25, 0x00	; 0
   1917e:	02 c0       	rjmp	.+4      	; 0x19184 <lif_check_volume+0x3a>
   19180:	80 e0       	ldi	r24, 0x00	; 0
   19182:	90 e0       	ldi	r25, 0x00	; 0
   19184:	29 a9       	ldd	r18, Y+49	; 0x31
   19186:	3a a9       	ldd	r19, Y+50	; 0x32
   19188:	21 15       	cp	r18, r1
   1918a:	40 e1       	ldi	r20, 0x10	; 16
   1918c:	34 07       	cpc	r19, r20
   1918e:	a1 f0       	breq	.+40     	; 0x191b8 <lif_check_volume+0x6e>
   19190:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19194:	80 ff       	sbrs	r24, 0
   19196:	0e c0       	rjmp	.+28     	; 0x191b4 <lif_check_volume+0x6a>
   19198:	3f 93       	push	r19
   1919a:	2f 93       	push	r18
   1919c:	86 ef       	ldi	r24, 0xF6	; 246
   1919e:	9e e3       	ldi	r25, 0x3E	; 62
   191a0:	1f 92       	push	r1
   191a2:	9f 93       	push	r25
   191a4:	8f 93       	push	r24
   191a6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   191aa:	0f 90       	pop	r0
   191ac:	0f 90       	pop	r0
   191ae:	0f 90       	pop	r0
   191b0:	0f 90       	pop	r0
   191b2:	0f 90       	pop	r0
   191b4:	80 e0       	ldi	r24, 0x00	; 0
   191b6:	90 e0       	ldi	r25, 0x00	; 0
   191b8:	29 ad       	ldd	r18, Y+57	; 0x39
   191ba:	3a ad       	ldd	r19, Y+58	; 0x3a
   191bc:	22 30       	cpi	r18, 0x02	; 2
   191be:	31 05       	cpc	r19, r1
   191c0:	a0 f0       	brcs	.+40     	; 0x191ea <lif_check_volume+0xa0>
   191c2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   191c6:	80 ff       	sbrs	r24, 0
   191c8:	0e c0       	rjmp	.+28     	; 0x191e6 <lif_check_volume+0x9c>
   191ca:	3f 93       	push	r19
   191cc:	2f 93       	push	r18
   191ce:	8e ed       	ldi	r24, 0xDE	; 222
   191d0:	9e e3       	ldi	r25, 0x3E	; 62
   191d2:	1f 92       	push	r1
   191d4:	9f 93       	push	r25
   191d6:	8f 93       	push	r24
   191d8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   191dc:	0f 90       	pop	r0
   191de:	0f 90       	pop	r0
   191e0:	0f 90       	pop	r0
   191e2:	0f 90       	pop	r0
   191e4:	0f 90       	pop	r0
   191e6:	80 e0       	ldi	r24, 0x00	; 0
   191e8:	90 e0       	ldi	r25, 0x00	; 0
   191ea:	2b a9       	ldd	r18, Y+51	; 0x33
   191ec:	3c a9       	ldd	r19, Y+52	; 0x34
   191ee:	23 2b       	or	r18, r19
   191f0:	81 f0       	breq	.+32     	; 0x19212 <lif_check_volume+0xc8>
   191f2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   191f6:	80 ff       	sbrs	r24, 0
   191f8:	0a c0       	rjmp	.+20     	; 0x1920e <lif_check_volume+0xc4>
   191fa:	85 ea       	ldi	r24, 0xA5	; 165
   191fc:	9e e3       	ldi	r25, 0x3E	; 62
   191fe:	1f 92       	push	r1
   19200:	9f 93       	push	r25
   19202:	8f 93       	push	r24
   19204:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   19208:	0f 90       	pop	r0
   1920a:	0f 90       	pop	r0
   1920c:	0f 90       	pop	r0
   1920e:	80 e0       	ldi	r24, 0x00	; 0
   19210:	90 e0       	ldi	r25, 0x00	; 0
   19212:	2b ad       	ldd	r18, Y+59	; 0x3b
   19214:	3c ad       	ldd	r19, Y+60	; 0x3c
   19216:	23 2b       	or	r18, r19
   19218:	81 f0       	breq	.+32     	; 0x1923a <lif_check_volume+0xf0>
   1921a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1921e:	80 ff       	sbrs	r24, 0
   19220:	0a c0       	rjmp	.+20     	; 0x19236 <lif_check_volume+0xec>
   19222:	8c e6       	ldi	r24, 0x6C	; 108
   19224:	9e e3       	ldi	r25, 0x3E	; 62
   19226:	1f 92       	push	r1
   19228:	9f 93       	push	r25
   1922a:	8f 93       	push	r24
   1922c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   19230:	0f 90       	pop	r0
   19232:	0f 90       	pop	r0
   19234:	0f 90       	pop	r0
   19236:	80 e0       	ldi	r24, 0x00	; 0
   19238:	90 e0       	ldi	r25, 0x00	; 0
   1923a:	4d a5       	ldd	r20, Y+45	; 0x2d
   1923c:	5e a5       	ldd	r21, Y+46	; 0x2e
   1923e:	6f a5       	ldd	r22, Y+47	; 0x2f
   19240:	78 a9       	ldd	r23, Y+48	; 0x30
   19242:	45 2b       	or	r20, r21
   19244:	46 2b       	or	r20, r22
   19246:	47 2b       	or	r20, r23
   19248:	c9 f4       	brne	.+50     	; 0x1927c <lif_check_volume+0x132>
   1924a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1924e:	80 ff       	sbrs	r24, 0
   19250:	13 c0       	rjmp	.+38     	; 0x19278 <lif_check_volume+0x12e>
   19252:	1f 92       	push	r1
   19254:	1f 92       	push	r1
   19256:	1f 92       	push	r1
   19258:	1f 92       	push	r1
   1925a:	87 e4       	ldi	r24, 0x47	; 71
   1925c:	9e e3       	ldi	r25, 0x3E	; 62
   1925e:	1f 92       	push	r1
   19260:	9f 93       	push	r25
   19262:	8f 93       	push	r24
   19264:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   19268:	8d b7       	in	r24, 0x3d	; 61
   1926a:	9e b7       	in	r25, 0x3e	; 62
   1926c:	07 96       	adiw	r24, 0x07	; 7
   1926e:	0f b6       	in	r0, 0x3f	; 63
   19270:	f8 94       	cli
   19272:	9e bf       	out	0x3e, r25	; 62
   19274:	0f be       	out	0x3f, r0	; 63
   19276:	8d bf       	out	0x3d, r24	; 61
   19278:	80 e0       	ldi	r24, 0x00	; 0
   1927a:	90 e0       	ldi	r25, 0x00	; 0
   1927c:	4d a9       	ldd	r20, Y+53	; 0x35
   1927e:	5e a9       	ldd	r21, Y+54	; 0x36
   19280:	6f a9       	ldd	r22, Y+55	; 0x37
   19282:	78 ad       	ldd	r23, Y+56	; 0x38
   19284:	45 2b       	or	r20, r21
   19286:	46 2b       	or	r20, r22
   19288:	47 2b       	or	r20, r23
   1928a:	81 f4       	brne	.+32     	; 0x192ac <lif_check_volume+0x162>
   1928c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19290:	80 ff       	sbrs	r24, 0
   19292:	0a c0       	rjmp	.+20     	; 0x192a8 <lif_check_volume+0x15e>
   19294:	88 e1       	ldi	r24, 0x18	; 24
   19296:	9e e3       	ldi	r25, 0x3E	; 62
   19298:	1f 92       	push	r1
   1929a:	9f 93       	push	r25
   1929c:	8f 93       	push	r24
   1929e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   192a2:	0f 90       	pop	r0
   192a4:	0f 90       	pop	r0
   192a6:	0f 90       	pop	r0
   192a8:	80 e0       	ldi	r24, 0x00	; 0
   192aa:	90 e0       	ldi	r25, 0x00	; 0
   192ac:	0d a5       	ldd	r16, Y+45	; 0x2d
   192ae:	1e a5       	ldd	r17, Y+46	; 0x2e
   192b0:	2f a5       	ldd	r18, Y+47	; 0x2f
   192b2:	38 a9       	ldd	r19, Y+48	; 0x30
   192b4:	4d a9       	ldd	r20, Y+53	; 0x35
   192b6:	5e a9       	ldd	r21, Y+54	; 0x36
   192b8:	6f a9       	ldd	r22, Y+55	; 0x37
   192ba:	78 ad       	ldd	r23, Y+56	; 0x38
   192bc:	40 0f       	add	r20, r16
   192be:	51 1f       	adc	r21, r17
   192c0:	62 1f       	adc	r22, r18
   192c2:	73 1f       	adc	r23, r19
   192c4:	0c 81       	ldd	r16, Y+4	; 0x04
   192c6:	1d 81       	ldd	r17, Y+5	; 0x05
   192c8:	2e 81       	ldd	r18, Y+6	; 0x06
   192ca:	3f 81       	ldd	r19, Y+7	; 0x07
   192cc:	04 17       	cp	r16, r20
   192ce:	15 07       	cpc	r17, r21
   192d0:	26 07       	cpc	r18, r22
   192d2:	37 07       	cpc	r19, r23
   192d4:	80 f4       	brcc	.+32     	; 0x192f6 <lif_check_volume+0x1ac>
   192d6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   192da:	80 ff       	sbrs	r24, 0
   192dc:	0a c0       	rjmp	.+20     	; 0x192f2 <lif_check_volume+0x1a8>
   192de:	8c ee       	ldi	r24, 0xEC	; 236
   192e0:	9d e3       	ldi	r25, 0x3D	; 61
   192e2:	1f 92       	push	r1
   192e4:	9f 93       	push	r25
   192e6:	8f 93       	push	r24
   192e8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   192ec:	0f 90       	pop	r0
   192ee:	0f 90       	pop	r0
   192f0:	0f 90       	pop	r0
   192f2:	80 e0       	ldi	r24, 0x00	; 0
   192f4:	90 e0       	ldi	r25, 0x00	; 0
   192f6:	df 91       	pop	r29
   192f8:	cf 91       	pop	r28
   192fa:	1f 91       	pop	r17
   192fc:	0f 91       	pop	r16
   192fe:	08 95       	ret

00019300 <lif_check_dir>:
   19300:	a4 e0       	ldi	r26, 0x04	; 4
   19302:	b0 e0       	ldi	r27, 0x00	; 0
   19304:	e6 e8       	ldi	r30, 0x86	; 134
   19306:	f9 ec       	ldi	r31, 0xC9	; 201
   19308:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
   1930c:	6c 01       	movw	r12, r24
   1930e:	2a e5       	ldi	r18, 0x5A	; 90
   19310:	c2 0e       	add	r12, r18
   19312:	d1 1c       	adc	r13, r1
   19314:	f6 01       	movw	r30, r12
   19316:	20 81       	ld	r18, Z
   19318:	31 81       	ldd	r19, Z+1	; 0x01
   1931a:	21 50       	subi	r18, 0x01	; 1
   1931c:	31 09       	sbc	r19, r1
   1931e:	2e 3f       	cpi	r18, 0xFE	; 254
   19320:	3f 4f       	sbci	r19, 0xFF	; 255
   19322:	08 f0       	brcs	.+2      	; 0x19326 <lif_check_dir+0x26>
   19324:	98 c1       	rjmp	.+816    	; 0x19656 <lif_check_dir+0x356>
   19326:	9c 83       	std	Y+4, r25	; 0x04
   19328:	8b 83       	std	Y+3, r24	; 0x03
   1932a:	8c 01       	movw	r16, r24
   1932c:	01 5b       	subi	r16, 0xB1	; 177
   1932e:	1f 4f       	sbci	r17, 0xFF	; 255
   19330:	c8 01       	movw	r24, r16
   19332:	0d da       	rcall	.-3046   	; 0x1874e <lif_checkname>
   19334:	89 2b       	or	r24, r25
   19336:	99 f4       	brne	.+38     	; 0x1935e <lif_check_dir+0x5e>
   19338:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1933c:	80 ff       	sbrs	r24, 0
   1933e:	12 c0       	rjmp	.+36     	; 0x19364 <lif_check_dir+0x64>
   19340:	1f 93       	push	r17
   19342:	0f 93       	push	r16
   19344:	8b ec       	ldi	r24, 0xCB	; 203
   19346:	9d e3       	ldi	r25, 0x3D	; 61
   19348:	1f 92       	push	r1
   1934a:	9f 93       	push	r25
   1934c:	8f 93       	push	r24
   1934e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   19352:	0f 90       	pop	r0
   19354:	0f 90       	pop	r0
   19356:	0f 90       	pop	r0
   19358:	0f 90       	pop	r0
   1935a:	0f 90       	pop	r0
   1935c:	03 c0       	rjmp	.+6      	; 0x19364 <lif_check_dir+0x64>
   1935e:	ee 24       	eor	r14, r14
   19360:	e3 94       	inc	r14
   19362:	01 c0       	rjmp	.+2      	; 0x19366 <lif_check_dir+0x66>
   19364:	e1 2c       	mov	r14, r1
   19366:	f1 2c       	mov	r15, r1
   19368:	eb 81       	ldd	r30, Y+3	; 0x03
   1936a:	fc 81       	ldd	r31, Y+4	; 0x04
   1936c:	84 85       	ldd	r24, Z+12	; 0x0c
   1936e:	95 85       	ldd	r25, Z+13	; 0x0d
   19370:	a6 85       	ldd	r26, Z+14	; 0x0e
   19372:	b7 85       	ldd	r27, Z+15	; 0x0f
   19374:	00 97       	sbiw	r24, 0x00	; 0
   19376:	a1 05       	cpc	r26, r1
   19378:	b1 05       	cpc	r27, r1
   1937a:	39 f1       	breq	.+78     	; 0x193ca <lif_check_dir+0xca>
   1937c:	e4 5a       	subi	r30, 0xA4	; 164
   1937e:	ff 4f       	sbci	r31, 0xFF	; 255
   19380:	40 81       	ld	r20, Z
   19382:	51 81       	ldd	r21, Z+1	; 0x01
   19384:	62 81       	ldd	r22, Z+2	; 0x02
   19386:	73 81       	ldd	r23, Z+3	; 0x03
   19388:	48 17       	cp	r20, r24
   1938a:	59 07       	cpc	r21, r25
   1938c:	6a 07       	cpc	r22, r26
   1938e:	7b 07       	cpc	r23, r27
   19390:	e0 f4       	brcc	.+56     	; 0x193ca <lif_check_dir+0xca>
   19392:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   19396:	20 ff       	sbrs	r18, 0
   19398:	16 c0       	rjmp	.+44     	; 0x193c6 <lif_check_dir+0xc6>
   1939a:	bf 93       	push	r27
   1939c:	af 93       	push	r26
   1939e:	9f 93       	push	r25
   193a0:	8f 93       	push	r24
   193a2:	7f 93       	push	r23
   193a4:	6f 93       	push	r22
   193a6:	5f 93       	push	r21
   193a8:	4f 93       	push	r20
   193aa:	1f 93       	push	r17
   193ac:	0f 93       	push	r16
   193ae:	87 e8       	ldi	r24, 0x87	; 135
   193b0:	9d e3       	ldi	r25, 0x3D	; 61
   193b2:	1f 92       	push	r1
   193b4:	9f 93       	push	r25
   193b6:	8f 93       	push	r24
   193b8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   193bc:	0f b6       	in	r0, 0x3f	; 63
   193be:	f8 94       	cli
   193c0:	de bf       	out	0x3e, r29	; 62
   193c2:	0f be       	out	0x3f, r0	; 63
   193c4:	cd bf       	out	0x3d, r28	; 61
   193c6:	e1 2c       	mov	r14, r1
   193c8:	f1 2c       	mov	r15, r1
   193ca:	eb 81       	ldd	r30, Y+3	; 0x03
   193cc:	fc 81       	ldd	r31, Y+4	; 0x04
   193ce:	44 81       	ldd	r20, Z+4	; 0x04
   193d0:	55 81       	ldd	r21, Z+5	; 0x05
   193d2:	66 81       	ldd	r22, Z+6	; 0x06
   193d4:	77 81       	ldd	r23, Z+7	; 0x07
   193d6:	41 15       	cp	r20, r1
   193d8:	51 05       	cpc	r21, r1
   193da:	61 05       	cpc	r22, r1
   193dc:	71 05       	cpc	r23, r1
   193de:	99 f1       	breq	.+102    	; 0x19446 <lif_check_dir+0x146>
   193e0:	e4 5a       	subi	r30, 0xA4	; 164
   193e2:	ff 4f       	sbci	r31, 0xFF	; 255
   193e4:	80 80       	ld	r8, Z
   193e6:	91 80       	ldd	r9, Z+1	; 0x01
   193e8:	a2 80       	ldd	r10, Z+2	; 0x02
   193ea:	b3 80       	ldd	r11, Z+3	; 0x03
   193ec:	eb 81       	ldd	r30, Y+3	; 0x03
   193ee:	fc 81       	ldd	r31, Y+4	; 0x04
   193f0:	e0 5a       	subi	r30, 0xA0	; 160
   193f2:	ff 4f       	sbci	r31, 0xFF	; 255
   193f4:	80 81       	ld	r24, Z
   193f6:	91 81       	ldd	r25, Z+1	; 0x01
   193f8:	a2 81       	ldd	r26, Z+2	; 0x02
   193fa:	b3 81       	ldd	r27, Z+3	; 0x03
   193fc:	88 0d       	add	r24, r8
   193fe:	99 1d       	adc	r25, r9
   19400:	aa 1d       	adc	r26, r10
   19402:	bb 1d       	adc	r27, r11
   19404:	48 17       	cp	r20, r24
   19406:	59 07       	cpc	r21, r25
   19408:	6a 07       	cpc	r22, r26
   1940a:	7b 07       	cpc	r23, r27
   1940c:	e0 f4       	brcc	.+56     	; 0x19446 <lif_check_dir+0x146>
   1940e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   19412:	20 ff       	sbrs	r18, 0
   19414:	16 c0       	rjmp	.+44     	; 0x19442 <lif_check_dir+0x142>
   19416:	7f 93       	push	r23
   19418:	6f 93       	push	r22
   1941a:	5f 93       	push	r21
   1941c:	4f 93       	push	r20
   1941e:	bf 93       	push	r27
   19420:	af 93       	push	r26
   19422:	9f 93       	push	r25
   19424:	8f 93       	push	r24
   19426:	1f 93       	push	r17
   19428:	0f 93       	push	r16
   1942a:	86 e4       	ldi	r24, 0x46	; 70
   1942c:	9d e3       	ldi	r25, 0x3D	; 61
   1942e:	1f 92       	push	r1
   19430:	9f 93       	push	r25
   19432:	8f 93       	push	r24
   19434:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   19438:	0f b6       	in	r0, 0x3f	; 63
   1943a:	f8 94       	cli
   1943c:	de bf       	out	0x3e, r29	; 62
   1943e:	0f be       	out	0x3f, r0	; 63
   19440:	cd bf       	out	0x3d, r28	; 61
   19442:	e1 2c       	mov	r14, r1
   19444:	f1 2c       	mov	r15, r1
   19446:	eb 81       	ldd	r30, Y+3	; 0x03
   19448:	fc 81       	ldd	r31, Y+4	; 0x04
   1944a:	e6 59       	subi	r30, 0x96	; 150
   1944c:	ff 4f       	sbci	r31, 0xFF	; 255
   1944e:	80 81       	ld	r24, Z
   19450:	91 81       	ldd	r25, Z+1	; 0x01
   19452:	81 30       	cpi	r24, 0x01	; 1
   19454:	30 e8       	ldi	r19, 0x80	; 128
   19456:	93 07       	cpc	r25, r19
   19458:	b1 f0       	breq	.+44     	; 0x19486 <lif_check_dir+0x186>
   1945a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1945e:	20 ff       	sbrs	r18, 0
   19460:	10 c0       	rjmp	.+32     	; 0x19482 <lif_check_dir+0x182>
   19462:	9f 93       	push	r25
   19464:	8f 93       	push	r24
   19466:	1f 93       	push	r17
   19468:	0f 93       	push	r16
   1946a:	88 e1       	ldi	r24, 0x18	; 24
   1946c:	9d e3       	ldi	r25, 0x3D	; 61
   1946e:	1f 92       	push	r1
   19470:	9f 93       	push	r25
   19472:	8f 93       	push	r24
   19474:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   19478:	0f b6       	in	r0, 0x3f	; 63
   1947a:	f8 94       	cli
   1947c:	de bf       	out	0x3e, r29	; 62
   1947e:	0f be       	out	0x3f, r0	; 63
   19480:	cd bf       	out	0x3d, r28	; 61
   19482:	e1 2c       	mov	r14, r1
   19484:	f1 2c       	mov	r15, r1
   19486:	f6 01       	movw	r30, r12
   19488:	80 81       	ld	r24, Z
   1948a:	91 81       	ldd	r25, Z+1	; 0x01
   1948c:	8c 7f       	andi	r24, 0xFC	; 252
   1948e:	80 31       	cpi	r24, 0x10	; 16
   19490:	90 4e       	sbci	r25, 0xE0	; 224
   19492:	09 f0       	breq	.+2      	; 0x19496 <lif_check_dir+0x196>
   19494:	b3 c0       	rjmp	.+358    	; 0x195fc <lif_check_dir+0x2fc>
   19496:	cb 80       	ldd	r12, Y+3	; 0x03
   19498:	dc 80       	ldd	r13, Y+4	; 0x04
   1949a:	2c e6       	ldi	r18, 0x6C	; 108
   1949c:	c2 0e       	add	r12, r18
   1949e:	d1 1c       	adc	r13, r1
   194a0:	f6 01       	movw	r30, r12
   194a2:	20 81       	ld	r18, Z
   194a4:	31 81       	ldd	r19, Z+1	; 0x01
   194a6:	21 15       	cp	r18, r1
   194a8:	31 05       	cpc	r19, r1
   194aa:	09 f4       	brne	.+2      	; 0x194ae <lif_check_dir+0x1ae>
   194ac:	a7 c0       	rjmp	.+334    	; 0x195fc <lif_check_dir+0x2fc>
   194ae:	49 01       	movw	r8, r18
   194b0:	a1 2c       	mov	r10, r1
   194b2:	b1 2c       	mov	r11, r1
   194b4:	bb 27       	eor	r27, r27
   194b6:	ab 2d       	mov	r26, r11
   194b8:	9a 2d       	mov	r25, r10
   194ba:	89 2d       	mov	r24, r9
   194bc:	33 27       	eor	r19, r19
   194be:	2c 01       	movw	r4, r24
   194c0:	3d 01       	movw	r6, r26
   194c2:	21 15       	cp	r18, r1
   194c4:	31 05       	cpc	r19, r1
   194c6:	29 f0       	breq	.+10     	; 0x194d2 <lif_check_dir+0x1d2>
   194c8:	ff ef       	ldi	r31, 0xFF	; 255
   194ca:	4f 1a       	sub	r4, r31
   194cc:	5f 0a       	sbc	r5, r31
   194ce:	6f 0a       	sbc	r6, r31
   194d0:	7f 0a       	sbc	r7, r31
   194d2:	2b 80       	ldd	r2, Y+3	; 0x03
   194d4:	3c 80       	ldd	r3, Y+4	; 0x04
   194d6:	40 e6       	ldi	r20, 0x60	; 96
   194d8:	24 0e       	add	r2, r20
   194da:	31 1c       	adc	r3, r1
   194dc:	f1 01       	movw	r30, r2
   194de:	40 81       	ld	r20, Z
   194e0:	51 81       	ldd	r21, Z+1	; 0x01
   194e2:	62 81       	ldd	r22, Z+2	; 0x02
   194e4:	73 81       	ldd	r23, Z+3	; 0x03
   194e6:	44 15       	cp	r20, r4
   194e8:	55 05       	cpc	r21, r5
   194ea:	66 05       	cpc	r22, r6
   194ec:	77 05       	cpc	r23, r7
   194ee:	28 f5       	brcc	.+74     	; 0x1953a <lif_check_dir+0x23a>
   194f0:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <debuglevel>
   194f4:	e0 ff       	sbrs	r30, 0
   194f6:	1f c0       	rjmp	.+62     	; 0x19536 <lif_check_dir+0x236>
   194f8:	23 2b       	or	r18, r19
   194fa:	19 f0       	breq	.+6      	; 0x19502 <lif_check_dir+0x202>
   194fc:	01 96       	adiw	r24, 0x01	; 1
   194fe:	a1 1d       	adc	r26, r1
   19500:	b1 1d       	adc	r27, r1
   19502:	7f 93       	push	r23
   19504:	6f 93       	push	r22
   19506:	5f 93       	push	r21
   19508:	4f 93       	push	r20
   1950a:	bf 93       	push	r27
   1950c:	af 93       	push	r26
   1950e:	9f 93       	push	r25
   19510:	8f 93       	push	r24
   19512:	1f 92       	push	r1
   19514:	1f 92       	push	r1
   19516:	9f 92       	push	r9
   19518:	8f 92       	push	r8
   1951a:	1f 93       	push	r17
   1951c:	0f 93       	push	r16
   1951e:	8d ec       	ldi	r24, 0xCD	; 205
   19520:	9c e3       	ldi	r25, 0x3C	; 60
   19522:	1f 92       	push	r1
   19524:	9f 93       	push	r25
   19526:	8f 93       	push	r24
   19528:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1952c:	0f b6       	in	r0, 0x3f	; 63
   1952e:	f8 94       	cli
   19530:	de bf       	out	0x3e, r29	; 62
   19532:	0f be       	out	0x3f, r0	; 63
   19534:	cd bf       	out	0x3d, r28	; 61
   19536:	e1 2c       	mov	r14, r1
   19538:	f1 2c       	mov	r15, r1
   1953a:	f6 01       	movw	r30, r12
   1953c:	20 81       	ld	r18, Z
   1953e:	31 81       	ldd	r19, Z+1	; 0x01
   19540:	49 01       	movw	r8, r18
   19542:	a1 2c       	mov	r10, r1
   19544:	b1 2c       	mov	r11, r1
   19546:	bb 27       	eor	r27, r27
   19548:	ab 2d       	mov	r26, r11
   1954a:	9a 2d       	mov	r25, r10
   1954c:	89 2d       	mov	r24, r9
   1954e:	a9 01       	movw	r20, r18
   19550:	55 27       	eor	r21, r21
   19552:	5a 83       	std	Y+2, r21	; 0x02
   19554:	49 83       	std	Y+1, r20	; 0x01
   19556:	2c 01       	movw	r4, r24
   19558:	3d 01       	movw	r6, r26
   1955a:	45 2b       	or	r20, r21
   1955c:	29 f0       	breq	.+10     	; 0x19568 <lif_check_dir+0x268>
   1955e:	5f ef       	ldi	r21, 0xFF	; 255
   19560:	45 1a       	sub	r4, r21
   19562:	55 0a       	sbc	r5, r21
   19564:	65 0a       	sbc	r6, r21
   19566:	75 0a       	sbc	r7, r21
   19568:	f1 01       	movw	r30, r2
   1956a:	40 81       	ld	r20, Z
   1956c:	51 81       	ldd	r21, Z+1	; 0x01
   1956e:	62 81       	ldd	r22, Z+2	; 0x02
   19570:	73 81       	ldd	r23, Z+3	; 0x03
   19572:	44 16       	cp	r4, r20
   19574:	55 06       	cpc	r5, r21
   19576:	66 06       	cpc	r6, r22
   19578:	77 06       	cpc	r7, r23
   1957a:	38 f5       	brcc	.+78     	; 0x195ca <lif_check_dir+0x2ca>
   1957c:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   19580:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   19584:	32 ff       	sbrs	r19, 2
   19586:	21 c0       	rjmp	.+66     	; 0x195ca <lif_check_dir+0x2ca>
   19588:	29 81       	ldd	r18, Y+1	; 0x01
   1958a:	3a 81       	ldd	r19, Y+2	; 0x02
   1958c:	23 2b       	or	r18, r19
   1958e:	19 f0       	breq	.+6      	; 0x19596 <lif_check_dir+0x296>
   19590:	01 96       	adiw	r24, 0x01	; 1
   19592:	a1 1d       	adc	r26, r1
   19594:	b1 1d       	adc	r27, r1
   19596:	7f 93       	push	r23
   19598:	6f 93       	push	r22
   1959a:	5f 93       	push	r21
   1959c:	4f 93       	push	r20
   1959e:	bf 93       	push	r27
   195a0:	af 93       	push	r26
   195a2:	9f 93       	push	r25
   195a4:	8f 93       	push	r24
   195a6:	1f 92       	push	r1
   195a8:	1f 92       	push	r1
   195aa:	9f 92       	push	r9
   195ac:	8f 92       	push	r8
   195ae:	1f 93       	push	r17
   195b0:	0f 93       	push	r16
   195b2:	82 e8       	ldi	r24, 0x82	; 130
   195b4:	9c e3       	ldi	r25, 0x3C	; 60
   195b6:	1f 92       	push	r1
   195b8:	9f 93       	push	r25
   195ba:	8f 93       	push	r24
   195bc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   195c0:	0f b6       	in	r0, 0x3f	; 63
   195c2:	f8 94       	cli
   195c4:	de bf       	out	0x3e, r29	; 62
   195c6:	0f be       	out	0x3f, r0	; 63
   195c8:	cd bf       	out	0x3d, r28	; 61
   195ca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   195ce:	80 ff       	sbrs	r24, 0
   195d0:	15 c0       	rjmp	.+42     	; 0x195fc <lif_check_dir+0x2fc>
   195d2:	f6 01       	movw	r30, r12
   195d4:	80 81       	ld	r24, Z
   195d6:	91 81       	ldd	r25, Z+1	; 0x01
   195d8:	89 2b       	or	r24, r25
   195da:	81 f4       	brne	.+32     	; 0x195fc <lif_check_dir+0x2fc>
   195dc:	1f 93       	push	r17
   195de:	0f 93       	push	r16
   195e0:	87 e5       	ldi	r24, 0x57	; 87
   195e2:	9c e3       	ldi	r25, 0x3C	; 60
   195e4:	1f 92       	push	r1
   195e6:	9f 93       	push	r25
   195e8:	8f 93       	push	r24
   195ea:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   195ee:	0f 90       	pop	r0
   195f0:	0f 90       	pop	r0
   195f2:	0f 90       	pop	r0
   195f4:	0f 90       	pop	r0
   195f6:	0f 90       	pop	r0
   195f8:	e1 2c       	mov	r14, r1
   195fa:	f1 2c       	mov	r15, r1
   195fc:	eb 81       	ldd	r30, Y+3	; 0x03
   195fe:	fc 81       	ldd	r31, Y+4	; 0x04
   19600:	e2 59       	subi	r30, 0x92	; 146
   19602:	ff 4f       	sbci	r31, 0xFF	; 255
   19604:	20 81       	ld	r18, Z
   19606:	31 81       	ldd	r19, Z+1	; 0x01
   19608:	21 15       	cp	r18, r1
   1960a:	f1 e0       	ldi	r31, 0x01	; 1
   1960c:	3f 07       	cpc	r19, r31
   1960e:	31 f1       	breq	.+76     	; 0x1965c <lif_check_dir+0x35c>
   19610:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   19614:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   19618:	ca 01       	movw	r24, r20
   1961a:	81 70       	andi	r24, 0x01	; 1
   1961c:	99 27       	eor	r25, r25
   1961e:	40 ff       	sbrs	r20, 0
   19620:	1e c0       	rjmp	.+60     	; 0x1965e <lif_check_dir+0x35e>
   19622:	c9 01       	movw	r24, r18
   19624:	1f 92       	push	r1
   19626:	1f 92       	push	r1
   19628:	9f 93       	push	r25
   1962a:	2f 93       	push	r18
   1962c:	eb 81       	ldd	r30, Y+3	; 0x03
   1962e:	fc 81       	ldd	r31, Y+4	; 0x04
   19630:	81 81       	ldd	r24, Z+1	; 0x01
   19632:	8f 93       	push	r24
   19634:	80 81       	ld	r24, Z
   19636:	8f 93       	push	r24
   19638:	8b e2       	ldi	r24, 0x2B	; 43
   1963a:	9c e3       	ldi	r25, 0x3C	; 60
   1963c:	1f 92       	push	r1
   1963e:	9f 93       	push	r25
   19640:	8f 93       	push	r24
   19642:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   19646:	0f b6       	in	r0, 0x3f	; 63
   19648:	f8 94       	cli
   1964a:	de bf       	out	0x3e, r29	; 62
   1964c:	0f be       	out	0x3f, r0	; 63
   1964e:	cd bf       	out	0x3d, r28	; 61
   19650:	80 e0       	ldi	r24, 0x00	; 0
   19652:	90 e0       	ldi	r25, 0x00	; 0
   19654:	04 c0       	rjmp	.+8      	; 0x1965e <lif_check_dir+0x35e>
   19656:	81 e0       	ldi	r24, 0x01	; 1
   19658:	90 e0       	ldi	r25, 0x00	; 0
   1965a:	01 c0       	rjmp	.+2      	; 0x1965e <lif_check_dir+0x35e>
   1965c:	c7 01       	movw	r24, r14
   1965e:	24 96       	adiw	r28, 0x04	; 4
   19660:	e2 e1       	ldi	r30, 0x12	; 18
   19662:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

00019666 <lif_close_volume>:
   19666:	cf 93       	push	r28
   19668:	df 93       	push	r29
   1966a:	00 97       	sbiw	r24, 0x00	; 0
   1966c:	f9 f0       	breq	.+62     	; 0x196ac <lif_close_volume+0x46>
   1966e:	ec 01       	movw	r28, r24
   19670:	8a 81       	ldd	r24, Y+2	; 0x02
   19672:	9b 81       	ldd	r25, Y+3	; 0x03
   19674:	00 97       	sbiw	r24, 0x00	; 0
   19676:	79 f0       	breq	.+30     	; 0x19696 <lif_close_volume+0x30>
   19678:	22 e0       	ldi	r18, 0x02	; 2
   1967a:	30 e0       	ldi	r19, 0x00	; 0
   1967c:	40 e0       	ldi	r20, 0x00	; 0
   1967e:	50 e0       	ldi	r21, 0x00	; 0
   19680:	ba 01       	movw	r22, r20
   19682:	0e 94 50 7b 	call	0xf6a0	; 0xf6a0 <fseek>
   19686:	8a 81       	ldd	r24, Y+2	; 0x02
   19688:	9b 81       	ldd	r25, Y+3	; 0x03
   1968a:	0e 94 38 7d 	call	0xfa70	; 0xfa70 <fclose>
   1968e:	1b 82       	std	Y+3, r1	; 0x03
   19690:	1a 82       	std	Y+2, r1	; 0x02
   19692:	0e 94 33 7c 	call	0xf866	; 0xf866 <sync>
   19696:	88 81       	ld	r24, Y
   19698:	99 81       	ldd	r25, Y+1	; 0x01
   1969a:	00 97       	sbiw	r24, 0x00	; 0
   1969c:	11 f0       	breq	.+4      	; 0x196a2 <lif_close_volume+0x3c>
   1969e:	0e 94 e6 c1 	call	0x183cc	; 0x183cc <lif_free>
   196a2:	ce 01       	movw	r24, r28
   196a4:	b8 db       	rcall	.-2192   	; 0x18e16 <lif_vol_clear>
   196a6:	ce 01       	movw	r24, r28
   196a8:	0e 94 e6 c1 	call	0x183cc	; 0x183cc <lif_free>
   196ac:	df 91       	pop	r29
   196ae:	cf 91       	pop	r28
   196b0:	08 95       	ret

000196b2 <lif_checkdirindex>:
   196b2:	a0 e0       	ldi	r26, 0x00	; 0
   196b4:	b0 e0       	ldi	r27, 0x00	; 0
   196b6:	ef e5       	ldi	r30, 0x5F	; 95
   196b8:	fb ec       	ldi	r31, 0xCB	; 203
   196ba:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
   196be:	77 fd       	sbrc	r23, 7
   196c0:	26 c0       	rjmp	.+76     	; 0x1970e <lif_checkdirindex+0x5c>
   196c2:	8b 01       	movw	r16, r22
   196c4:	07 2e       	mov	r0, r23
   196c6:	00 0c       	add	r0, r0
   196c8:	22 0b       	sbc	r18, r18
   196ca:	33 0b       	sbc	r19, r19
   196cc:	45 e0       	ldi	r20, 0x05	; 5
   196ce:	00 0f       	add	r16, r16
   196d0:	11 1f       	adc	r17, r17
   196d2:	22 1f       	adc	r18, r18
   196d4:	33 1f       	adc	r19, r19
   196d6:	4a 95       	dec	r20
   196d8:	d1 f7       	brne	.-12     	; 0x196ce <lif_checkdirindex+0x1c>
   196da:	c1 2e       	mov	r12, r17
   196dc:	d2 2e       	mov	r13, r18
   196de:	e3 2e       	mov	r14, r19
   196e0:	ff 24       	eor	r15, r15
   196e2:	11 27       	eor	r17, r17
   196e4:	22 27       	eor	r18, r18
   196e6:	33 27       	eor	r19, r19
   196e8:	01 2b       	or	r16, r17
   196ea:	02 2b       	or	r16, r18
   196ec:	03 2b       	or	r16, r19
   196ee:	29 f0       	breq	.+10     	; 0x196fa <lif_checkdirindex+0x48>
   196f0:	2f ef       	ldi	r18, 0xFF	; 255
   196f2:	c2 1a       	sub	r12, r18
   196f4:	d2 0a       	sbc	r13, r18
   196f6:	e2 0a       	sbc	r14, r18
   196f8:	f2 0a       	sbc	r15, r18
   196fa:	fc 01       	movw	r30, r24
   196fc:	05 a9       	ldd	r16, Z+53	; 0x35
   196fe:	16 a9       	ldd	r17, Z+54	; 0x36
   19700:	27 a9       	ldd	r18, Z+55	; 0x37
   19702:	30 ad       	ldd	r19, Z+56	; 0x38
   19704:	0c 15       	cp	r16, r12
   19706:	1d 05       	cpc	r17, r13
   19708:	2e 05       	cpc	r18, r14
   1970a:	3f 05       	cpc	r19, r15
   1970c:	30 f5       	brcc	.+76     	; 0x1975a <lif_checkdirindex+0xa8>
   1970e:	ec 01       	movw	r28, r24
   19710:	7f 93       	push	r23
   19712:	6f 93       	push	r22
   19714:	89 81       	ldd	r24, Y+1	; 0x01
   19716:	8f 93       	push	r24
   19718:	88 81       	ld	r24, Y
   1971a:	8f 93       	push	r24
   1971c:	88 e6       	ldi	r24, 0x68	; 104
   1971e:	9b e3       	ldi	r25, 0x3B	; 59
   19720:	1f 92       	push	r1
   19722:	9f 93       	push	r25
   19724:	8f 93       	push	r24
   19726:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1972a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1972e:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   19732:	8d b7       	in	r24, 0x3d	; 61
   19734:	9e b7       	in	r25, 0x3e	; 62
   19736:	07 96       	adiw	r24, 0x07	; 7
   19738:	0f b6       	in	r0, 0x3f	; 63
   1973a:	f8 94       	cli
   1973c:	9e bf       	out	0x3e, r25	; 62
   1973e:	0f be       	out	0x3f, r0	; 63
   19740:	8d bf       	out	0x3d, r24	; 61
   19742:	c9 01       	movw	r24, r18
   19744:	88 27       	eor	r24, r24
   19746:	94 70       	andi	r25, 0x04	; 4
   19748:	32 ff       	sbrs	r19, 2
   1974a:	09 c0       	rjmp	.+18     	; 0x1975e <lif_checkdirindex+0xac>
   1974c:	6a e7       	ldi	r22, 0x7A	; 122
   1974e:	75 e1       	ldi	r23, 0x15	; 21
   19750:	ce 01       	movw	r24, r28
   19752:	68 db       	rcall	.-2352   	; 0x18e24 <lif_dump_vol>
   19754:	80 e0       	ldi	r24, 0x00	; 0
   19756:	90 e0       	ldi	r25, 0x00	; 0
   19758:	02 c0       	rjmp	.+4      	; 0x1975e <lif_checkdirindex+0xac>
   1975a:	81 e0       	ldi	r24, 0x01	; 1
   1975c:	90 e0       	ldi	r25, 0x00	; 0
   1975e:	cd b7       	in	r28, 0x3d	; 61
   19760:	de b7       	in	r29, 0x3e	; 62
   19762:	e8 e0       	ldi	r30, 0x08	; 8
   19764:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

00019768 <lif_readdirindex>:
   19768:	a0 e2       	ldi	r26, 0x20	; 32
   1976a:	b0 e0       	ldi	r27, 0x00	; 0
   1976c:	ea eb       	ldi	r30, 0xBA	; 186
   1976e:	fb ec       	ldi	r31, 0xCB	; 203
   19770:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
   19774:	7c 01       	movw	r14, r24
   19776:	6b 01       	movw	r12, r22
   19778:	9c df       	rcall	.-200    	; 0x196b2 <lif_checkdirindex>
   1977a:	89 2b       	or	r24, r25
   1977c:	19 f4       	brne	.+6      	; 0x19784 <lif_readdirindex+0x1c>
   1977e:	00 e0       	ldi	r16, 0x00	; 0
   19780:	10 e0       	ldi	r17, 0x00	; 0
   19782:	56 c0       	rjmp	.+172    	; 0x19830 <lif_readdirindex+0xc8>
   19784:	f7 01       	movw	r30, r14
   19786:	85 a5       	ldd	r24, Z+45	; 0x2d
   19788:	96 a5       	ldd	r25, Z+46	; 0x2e
   1978a:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1978c:	b0 a9       	ldd	r27, Z+48	; 0x30
   1978e:	44 27       	eor	r20, r20
   19790:	58 2f       	mov	r21, r24
   19792:	69 2f       	mov	r22, r25
   19794:	7a 2f       	mov	r23, r26
   19796:	c6 01       	movw	r24, r12
   19798:	0d 2c       	mov	r0, r13
   1979a:	00 0c       	add	r0, r0
   1979c:	aa 0b       	sbc	r26, r26
   1979e:	bb 0b       	sbc	r27, r27
   197a0:	35 e0       	ldi	r19, 0x05	; 5
   197a2:	88 0f       	add	r24, r24
   197a4:	99 1f       	adc	r25, r25
   197a6:	aa 1f       	adc	r26, r26
   197a8:	bb 1f       	adc	r27, r27
   197aa:	3a 95       	dec	r19
   197ac:	d1 f7       	brne	.-12     	; 0x197a2 <lif_readdirindex+0x3a>
   197ae:	9a 01       	movw	r18, r20
   197b0:	ab 01       	movw	r20, r22
   197b2:	28 0f       	add	r18, r24
   197b4:	39 1f       	adc	r19, r25
   197b6:	4a 1f       	adc	r20, r26
   197b8:	5b 1f       	adc	r21, r27
   197ba:	00 e2       	ldi	r16, 0x20	; 32
   197bc:	10 e0       	ldi	r17, 0x00	; 0
   197be:	be 01       	movw	r22, r28
   197c0:	6f 5f       	subi	r22, 0xFF	; 255
   197c2:	7f 4f       	sbci	r23, 0xFF	; 255
   197c4:	c7 01       	movw	r24, r14
   197c6:	0e 94 9b c2 	call	0x18536	; 0x18536 <lif_read>
   197ca:	60 32       	cpi	r22, 0x20	; 32
   197cc:	71 05       	cpc	r23, r1
   197ce:	81 05       	cpc	r24, r1
   197d0:	91 05       	cpc	r25, r1
   197d2:	a8 f2       	brcs	.-86     	; 0x1977e <lif_readdirindex+0x16>
   197d4:	b7 01       	movw	r22, r14
   197d6:	ce 01       	movw	r24, r28
   197d8:	01 96       	adiw	r24, 0x01	; 1
   197da:	c1 d9       	rcall	.-3198   	; 0x18b5e <lif_str2dir>
   197dc:	f7 01       	movw	r30, r14
   197de:	e6 5a       	subi	r30, 0xA6	; 166
   197e0:	ff 4f       	sbci	r31, 0xFF	; 255
   197e2:	80 81       	ld	r24, Z
   197e4:	91 81       	ldd	r25, Z+1	; 0x01
   197e6:	01 96       	adiw	r24, 0x01	; 1
   197e8:	19 f4       	brne	.+6      	; 0x197f0 <lif_readdirindex+0x88>
   197ea:	f7 01       	movw	r30, r14
   197ec:	d3 a2       	std	Z+35, r13	; 0x23
   197ee:	c2 a2       	std	Z+34, r12	; 0x22
   197f0:	c7 01       	movw	r24, r14
   197f2:	86 dd       	rcall	.-1268   	; 0x19300 <lif_check_dir>
   197f4:	8c 01       	movw	r16, r24
   197f6:	89 2b       	or	r24, r25
   197f8:	c9 f4       	brne	.+50     	; 0x1982c <lif_readdirindex+0xc4>
   197fa:	df 92       	push	r13
   197fc:	cf 92       	push	r12
   197fe:	88 e4       	ldi	r24, 0x48	; 72
   19800:	9b e3       	ldi	r25, 0x3B	; 59
   19802:	1f 92       	push	r1
   19804:	9f 93       	push	r25
   19806:	8f 93       	push	r24
   19808:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1980c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19810:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   19814:	0f 90       	pop	r0
   19816:	0f 90       	pop	r0
   19818:	0f 90       	pop	r0
   1981a:	0f 90       	pop	r0
   1981c:	0f 90       	pop	r0
   1981e:	92 ff       	sbrs	r25, 2
   19820:	ae cf       	rjmp	.-164    	; 0x1977e <lif_readdirindex+0x16>
   19822:	6b e8       	ldi	r22, 0x8B	; 139
   19824:	75 e1       	ldi	r23, 0x15	; 21
   19826:	c7 01       	movw	r24, r14
   19828:	fd da       	rcall	.-2566   	; 0x18e24 <lif_dump_vol>
   1982a:	02 c0       	rjmp	.+4      	; 0x19830 <lif_readdirindex+0xc8>
   1982c:	01 e0       	ldi	r16, 0x01	; 1
   1982e:	10 e0       	ldi	r17, 0x00	; 0
   19830:	c8 01       	movw	r24, r16
   19832:	a0 96       	adiw	r28, 0x20	; 32
   19834:	e8 e0       	ldi	r30, 0x08	; 8
   19836:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

0001983a <lif_writedirindex>:
   1983a:	a0 e2       	ldi	r26, 0x20	; 32
   1983c:	b0 e0       	ldi	r27, 0x00	; 0
   1983e:	e3 e2       	ldi	r30, 0x23	; 35
   19840:	fc ec       	ldi	r31, 0xCC	; 204
   19842:	0c 94 36 e5 	jmp	0x1ca6c	; 0x1ca6c <__prologue_saves__+0x10>
   19846:	5c 01       	movw	r10, r24
   19848:	6b 01       	movw	r12, r22
   1984a:	5a dd       	rcall	.-1356   	; 0x19300 <lif_check_dir>
   1984c:	7c 01       	movw	r14, r24
   1984e:	89 2b       	or	r24, r25
   19850:	71 f4       	brne	.+28     	; 0x1986e <lif_writedirindex+0x34>
   19852:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19856:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1985a:	92 fd       	sbrc	r25, 2
   1985c:	03 c0       	rjmp	.+6      	; 0x19864 <lif_writedirindex+0x2a>
   1985e:	e1 2c       	mov	r14, r1
   19860:	f1 2c       	mov	r15, r1
   19862:	42 c0       	rjmp	.+132    	; 0x198e8 <lif_writedirindex+0xae>
   19864:	6c e9       	ldi	r22, 0x9C	; 156
   19866:	75 e1       	ldi	r23, 0x15	; 21
   19868:	c5 01       	movw	r24, r10
   1986a:	dc da       	rcall	.-2632   	; 0x18e24 <lif_dump_vol>
   1986c:	3d c0       	rjmp	.+122    	; 0x198e8 <lif_writedirindex+0xae>
   1986e:	b6 01       	movw	r22, r12
   19870:	c5 01       	movw	r24, r10
   19872:	1f df       	rcall	.-450    	; 0x196b2 <lif_checkdirindex>
   19874:	89 2b       	or	r24, r25
   19876:	99 f3       	breq	.-26     	; 0x1985e <lif_writedirindex+0x24>
   19878:	f5 01       	movw	r30, r10
   1987a:	e6 5a       	subi	r30, 0xA6	; 166
   1987c:	ff 4f       	sbci	r31, 0xFF	; 255
   1987e:	80 81       	ld	r24, Z
   19880:	91 81       	ldd	r25, Z+1	; 0x01
   19882:	01 96       	adiw	r24, 0x01	; 1
   19884:	19 f4       	brne	.+6      	; 0x1988c <lif_writedirindex+0x52>
   19886:	f5 01       	movw	r30, r10
   19888:	d3 a2       	std	Z+35, r13	; 0x23
   1988a:	c2 a2       	std	Z+34, r12	; 0x22
   1988c:	f5 01       	movw	r30, r10
   1988e:	85 a5       	ldd	r24, Z+45	; 0x2d
   19890:	96 a5       	ldd	r25, Z+46	; 0x2e
   19892:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19894:	b0 a9       	ldd	r27, Z+48	; 0x30
   19896:	ba 2f       	mov	r27, r26
   19898:	a9 2f       	mov	r26, r25
   1989a:	98 2f       	mov	r25, r24
   1989c:	88 27       	eor	r24, r24
   1989e:	0d 2c       	mov	r0, r13
   198a0:	00 0c       	add	r0, r0
   198a2:	ee 08       	sbc	r14, r14
   198a4:	ff 08       	sbc	r15, r15
   198a6:	35 e0       	ldi	r19, 0x05	; 5
   198a8:	cc 0c       	add	r12, r12
   198aa:	dd 1c       	adc	r13, r13
   198ac:	ee 1c       	adc	r14, r14
   198ae:	ff 1c       	adc	r15, r15
   198b0:	3a 95       	dec	r19
   198b2:	d1 f7       	brne	.-12     	; 0x198a8 <lif_writedirindex+0x6e>
   198b4:	c8 0e       	add	r12, r24
   198b6:	d9 1e       	adc	r13, r25
   198b8:	ea 1e       	adc	r14, r26
   198ba:	fb 1e       	adc	r15, r27
   198bc:	be 01       	movw	r22, r28
   198be:	6f 5f       	subi	r22, 0xFF	; 255
   198c0:	7f 4f       	sbci	r23, 0xFF	; 255
   198c2:	c5 01       	movw	r24, r10
   198c4:	db d8       	rcall	.-3658   	; 0x18a7c <lif_dir2str>
   198c6:	00 e2       	ldi	r16, 0x20	; 32
   198c8:	10 e0       	ldi	r17, 0x00	; 0
   198ca:	a7 01       	movw	r20, r14
   198cc:	96 01       	movw	r18, r12
   198ce:	be 01       	movw	r22, r28
   198d0:	6f 5f       	subi	r22, 0xFF	; 255
   198d2:	7f 4f       	sbci	r23, 0xFF	; 255
   198d4:	c5 01       	movw	r24, r10
   198d6:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <lif_write>
   198da:	31 e0       	ldi	r19, 0x01	; 1
   198dc:	20 e0       	ldi	r18, 0x00	; 0
   198de:	80 97       	sbiw	r24, 0x20	; 32
   198e0:	0c f4       	brge	.+2      	; 0x198e4 <lif_writedirindex+0xaa>
   198e2:	30 e0       	ldi	r19, 0x00	; 0
   198e4:	e3 2e       	mov	r14, r19
   198e6:	f2 2e       	mov	r15, r18
   198e8:	c7 01       	movw	r24, r14
   198ea:	a0 96       	adiw	r28, 0x20	; 32
   198ec:	ea e0       	ldi	r30, 0x0A	; 10
   198ee:	0c 94 52 e5 	jmp	0x1caa4	; 0x1caa4 <__epilogue_restores__+0x10>

000198f2 <lif_writedirEOF>:
   198f2:	0f 93       	push	r16
   198f4:	1f 93       	push	r17
   198f6:	cf 93       	push	r28
   198f8:	df 93       	push	r29
   198fa:	ec 01       	movw	r28, r24
   198fc:	8b 01       	movw	r16, r22
   198fe:	83 da       	rcall	.-2810   	; 0x18e06 <lif_dir_clear>
   19900:	fe 01       	movw	r30, r28
   19902:	e6 5a       	subi	r30, 0xA6	; 166
   19904:	ff 4f       	sbci	r31, 0xFF	; 255
   19906:	8f ef       	ldi	r24, 0xFF	; 255
   19908:	9f ef       	ldi	r25, 0xFF	; 255
   1990a:	91 83       	std	Z+1, r25	; 0x01
   1990c:	80 83       	st	Z, r24
   1990e:	1b a3       	std	Y+35, r17	; 0x23
   19910:	0a a3       	std	Y+34, r16	; 0x22
   19912:	b8 01       	movw	r22, r16
   19914:	ce 01       	movw	r24, r28
   19916:	91 df       	rcall	.-222    	; 0x1983a <lif_writedirindex>
   19918:	df 91       	pop	r29
   1991a:	cf 91       	pop	r28
   1991c:	1f 91       	pop	r17
   1991e:	0f 91       	pop	r16
   19920:	08 95       	ret

00019922 <lif_updatefree>:
   19922:	2f 92       	push	r2
   19924:	3f 92       	push	r3
   19926:	4f 92       	push	r4
   19928:	5f 92       	push	r5
   1992a:	6f 92       	push	r6
   1992c:	7f 92       	push	r7
   1992e:	8f 92       	push	r8
   19930:	af 92       	push	r10
   19932:	bf 92       	push	r11
   19934:	cf 92       	push	r12
   19936:	df 92       	push	r13
   19938:	ef 92       	push	r14
   1993a:	ff 92       	push	r15
   1993c:	0f 93       	push	r16
   1993e:	1f 93       	push	r17
   19940:	cf 93       	push	r28
   19942:	df 93       	push	r29
   19944:	cd b7       	in	r28, 0x3d	; 61
   19946:	de b7       	in	r29, 0x3e	; 62
   19948:	28 97       	sbiw	r28, 0x08	; 8
   1994a:	0f b6       	in	r0, 0x3f	; 63
   1994c:	f8 94       	cli
   1994e:	de bf       	out	0x3e, r29	; 62
   19950:	0f be       	out	0x3f, r0	; 63
   19952:	cd bf       	out	0x3d, r28	; 61
   19954:	98 87       	std	Y+8, r25	; 0x08
   19956:	8f 83       	std	Y+7, r24	; 0x07
   19958:	fc 01       	movw	r30, r24
   1995a:	24 84       	ldd	r2, Z+12	; 0x0c
   1995c:	35 84       	ldd	r3, Z+13	; 0x0d
   1995e:	46 84       	ldd	r4, Z+14	; 0x0e
   19960:	57 84       	ldd	r5, Z+15	; 0x0f
   19962:	80 89       	ldd	r24, Z+16	; 0x10
   19964:	91 89       	ldd	r25, Z+17	; 0x11
   19966:	a2 89       	ldd	r26, Z+18	; 0x12
   19968:	b3 89       	ldd	r27, Z+19	; 0x13
   1996a:	80 8f       	std	Z+24, r24	; 0x18
   1996c:	91 8f       	std	Z+25, r25	; 0x19
   1996e:	a2 8f       	std	Z+26, r26	; 0x1a
   19970:	b3 8f       	std	Z+27, r27	; 0x1b
   19972:	14 8a       	std	Z+20, r1	; 0x14
   19974:	15 8a       	std	Z+21, r1	; 0x15
   19976:	16 8a       	std	Z+22, r1	; 0x16
   19978:	17 8a       	std	Z+23, r1	; 0x17
   1997a:	17 8e       	std	Z+31, r1	; 0x1f
   1997c:	16 8e       	std	Z+30, r1	; 0x1e
   1997e:	15 8e       	std	Z+29, r1	; 0x1d
   19980:	14 8e       	std	Z+28, r1	; 0x1c
   19982:	11 a2       	std	Z+33, r1	; 0x21
   19984:	10 a2       	std	Z+32, r1	; 0x20
   19986:	13 a2       	std	Z+35, r1	; 0x23
   19988:	12 a2       	std	Z+34, r1	; 0x22
   1998a:	cc 24       	eor	r12, r12
   1998c:	c3 94       	inc	r12
   1998e:	d1 2c       	mov	r13, r1
   19990:	0f ef       	ldi	r16, 0xFF	; 255
   19992:	1f ef       	ldi	r17, 0xFF	; 255
   19994:	e6 5a       	subi	r30, 0xA6	; 166
   19996:	ff 4f       	sbci	r31, 0xFF	; 255
   19998:	fc 83       	std	Y+4, r31	; 0x04
   1999a:	eb 83       	std	Y+3, r30	; 0x03
   1999c:	af 80       	ldd	r10, Y+7	; 0x07
   1999e:	b8 84       	ldd	r11, Y+8	; 0x08
   199a0:	fc e5       	ldi	r31, 0x5C	; 92
   199a2:	af 0e       	add	r10, r31
   199a4:	b1 1c       	adc	r11, r1
   199a6:	8f 81       	ldd	r24, Y+7	; 0x07
   199a8:	98 85       	ldd	r25, Y+8	; 0x08
   199aa:	80 5a       	subi	r24, 0xA0	; 160
   199ac:	9f 4f       	sbci	r25, 0xFF	; 255
   199ae:	9e 83       	std	Y+6, r25	; 0x06
   199b0:	8d 83       	std	Y+5, r24	; 0x05
   199b2:	ef 81       	ldd	r30, Y+7	; 0x07
   199b4:	f8 85       	ldd	r31, Y+8	; 0x08
   199b6:	e1 5b       	subi	r30, 0xB1	; 177
   199b8:	ff 4f       	sbci	r31, 0xFF	; 255
   199ba:	fa 83       	std	Y+2, r31	; 0x02
   199bc:	e9 83       	std	Y+1, r30	; 0x01
   199be:	8b ef       	ldi	r24, 0xFB	; 251
   199c0:	9a e3       	ldi	r25, 0x3A	; 58
   199c2:	3c 01       	movw	r6, r24
   199c4:	76 01       	movw	r14, r12
   199c6:	21 e0       	ldi	r18, 0x01	; 1
   199c8:	e2 1a       	sub	r14, r18
   199ca:	f1 08       	sbc	r15, r1
   199cc:	b7 01       	movw	r22, r14
   199ce:	8f 81       	ldd	r24, Y+7	; 0x07
   199d0:	98 85       	ldd	r25, Y+8	; 0x08
   199d2:	ca de       	rcall	.-620    	; 0x19768 <lif_readdirindex>
   199d4:	89 2b       	or	r24, r25
   199d6:	19 f4       	brne	.+6      	; 0x199de <lif_updatefree+0xbc>
   199d8:	80 e0       	ldi	r24, 0x00	; 0
   199da:	90 e0       	ldi	r25, 0x00	; 0
   199dc:	92 c0       	rjmp	.+292    	; 0x19b02 <lif_updatefree+0x1e0>
   199de:	eb 81       	ldd	r30, Y+3	; 0x03
   199e0:	fc 81       	ldd	r31, Y+4	; 0x04
   199e2:	80 81       	ld	r24, Z
   199e4:	91 81       	ldd	r25, Z+1	; 0x01
   199e6:	8f 3f       	cpi	r24, 0xFF	; 255
   199e8:	ff ef       	ldi	r31, 0xFF	; 255
   199ea:	9f 07       	cpc	r25, r31
   199ec:	c1 f4       	brne	.+48     	; 0x19a1e <lif_updatefree+0xfc>
   199ee:	ef 81       	ldd	r30, Y+7	; 0x07
   199f0:	f8 85       	ldd	r31, Y+8	; 0x08
   199f2:	0f 3f       	cpi	r16, 0xFF	; 255
   199f4:	2f ef       	ldi	r18, 0xFF	; 255
   199f6:	12 07       	cpc	r17, r18
   199f8:	09 f4       	brne	.+2      	; 0x199fc <lif_updatefree+0xda>
   199fa:	79 c0       	rjmp	.+242    	; 0x19aee <lif_updatefree+0x1cc>
   199fc:	13 a3       	std	Z+35, r17	; 0x23
   199fe:	02 a3       	std	Z+34, r16	; 0x22
   19a00:	e0 1a       	sub	r14, r16
   19a02:	f1 0a       	sbc	r15, r17
   19a04:	86 8d       	ldd	r24, Z+30	; 0x1e
   19a06:	97 8d       	ldd	r25, Z+31	; 0x1f
   19a08:	8e 19       	sub	r24, r14
   19a0a:	9f 09       	sbc	r25, r15
   19a0c:	97 8f       	std	Z+31, r25	; 0x1f
   19a0e:	86 8f       	std	Z+30, r24	; 0x1e
   19a10:	b8 01       	movw	r22, r16
   19a12:	cf 01       	movw	r24, r30
   19a14:	6e df       	rcall	.-292    	; 0x198f2 <lif_writedirEOF>
   19a16:	89 2b       	or	r24, r25
   19a18:	09 f0       	breq	.+2      	; 0x19a1c <lif_updatefree+0xfa>
   19a1a:	6b c0       	rjmp	.+214    	; 0x19af2 <lif_updatefree+0x1d0>
   19a1c:	dd cf       	rjmp	.-70     	; 0x199d8 <lif_updatefree+0xb6>
   19a1e:	89 2b       	or	r24, r25
   19a20:	81 f4       	brne	.+32     	; 0x19a42 <lif_updatefree+0x120>
   19a22:	0f 3f       	cpi	r16, 0xFF	; 255
   19a24:	ff ef       	ldi	r31, 0xFF	; 255
   19a26:	1f 07       	cpc	r17, r31
   19a28:	09 f4       	brne	.+2      	; 0x19a2c <lif_updatefree+0x10a>
   19a2a:	87 01       	movw	r16, r14
   19a2c:	ef 81       	ldd	r30, Y+7	; 0x07
   19a2e:	f8 85       	ldd	r31, Y+8	; 0x08
   19a30:	86 8d       	ldd	r24, Z+30	; 0x1e
   19a32:	97 8d       	ldd	r25, Z+31	; 0x1f
   19a34:	01 96       	adiw	r24, 0x01	; 1
   19a36:	97 8f       	std	Z+31, r25	; 0x1f
   19a38:	86 8f       	std	Z+30, r24	; 0x1e
   19a3a:	ff ef       	ldi	r31, 0xFF	; 255
   19a3c:	cf 1a       	sub	r12, r31
   19a3e:	df 0a       	sbc	r13, r31
   19a40:	c1 cf       	rjmp	.-126    	; 0x199c4 <lif_updatefree+0xa2>
   19a42:	f5 01       	movw	r30, r10
   19a44:	80 81       	ld	r24, Z
   19a46:	91 81       	ldd	r25, Z+1	; 0x01
   19a48:	a2 81       	ldd	r26, Z+2	; 0x02
   19a4a:	b3 81       	ldd	r27, Z+3	; 0x03
   19a4c:	82 15       	cp	r24, r2
   19a4e:	93 05       	cpc	r25, r3
   19a50:	a4 05       	cpc	r26, r4
   19a52:	b5 05       	cpc	r27, r5
   19a54:	c0 f4       	brcc	.+48     	; 0x19a86 <lif_updatefree+0x164>
   19a56:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19a5a:	80 ff       	sbrs	r24, 0
   19a5c:	14 c0       	rjmp	.+40     	; 0x19a86 <lif_updatefree+0x164>
   19a5e:	fa 81       	ldd	r31, Y+2	; 0x02
   19a60:	ff 93       	push	r31
   19a62:	29 81       	ldd	r18, Y+1	; 0x01
   19a64:	2f 93       	push	r18
   19a66:	ef 81       	ldd	r30, Y+7	; 0x07
   19a68:	f8 85       	ldd	r31, Y+8	; 0x08
   19a6a:	81 81       	ldd	r24, Z+1	; 0x01
   19a6c:	8f 93       	push	r24
   19a6e:	80 81       	ld	r24, Z
   19a70:	8f 93       	push	r24
   19a72:	1f 92       	push	r1
   19a74:	7f 92       	push	r7
   19a76:	6f 92       	push	r6
   19a78:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   19a7c:	0f b6       	in	r0, 0x3f	; 63
   19a7e:	f8 94       	cli
   19a80:	de bf       	out	0x3e, r29	; 62
   19a82:	0f be       	out	0x3f, r0	; 63
   19a84:	cd bf       	out	0x3d, r28	; 61
   19a86:	ed 81       	ldd	r30, Y+5	; 0x05
   19a88:	fe 81       	ldd	r31, Y+6	; 0x06
   19a8a:	80 81       	ld	r24, Z
   19a8c:	91 81       	ldd	r25, Z+1	; 0x01
   19a8e:	a2 81       	ldd	r26, Z+2	; 0x02
   19a90:	b3 81       	ldd	r27, Z+3	; 0x03
   19a92:	ef 81       	ldd	r30, Y+7	; 0x07
   19a94:	f8 85       	ldd	r31, Y+8	; 0x08
   19a96:	44 89       	ldd	r20, Z+20	; 0x14
   19a98:	55 89       	ldd	r21, Z+21	; 0x15
   19a9a:	66 89       	ldd	r22, Z+22	; 0x16
   19a9c:	77 89       	ldd	r23, Z+23	; 0x17
   19a9e:	48 0f       	add	r20, r24
   19aa0:	59 1f       	adc	r21, r25
   19aa2:	6a 1f       	adc	r22, r26
   19aa4:	7b 1f       	adc	r23, r27
   19aa6:	44 8b       	std	Z+20, r20	; 0x14
   19aa8:	55 8b       	std	Z+21, r21	; 0x15
   19aaa:	66 8b       	std	Z+22, r22	; 0x16
   19aac:	77 8b       	std	Z+23, r23	; 0x17
   19aae:	40 8d       	ldd	r20, Z+24	; 0x18
   19ab0:	51 8d       	ldd	r21, Z+25	; 0x19
   19ab2:	62 8d       	ldd	r22, Z+26	; 0x1a
   19ab4:	73 8d       	ldd	r23, Z+27	; 0x1b
   19ab6:	48 1b       	sub	r20, r24
   19ab8:	59 0b       	sbc	r21, r25
   19aba:	6a 0b       	sbc	r22, r26
   19abc:	7b 0b       	sbc	r23, r27
   19abe:	40 8f       	std	Z+24, r20	; 0x18
   19ac0:	51 8f       	std	Z+25, r21	; 0x19
   19ac2:	62 8f       	std	Z+26, r22	; 0x1a
   19ac4:	73 8f       	std	Z+27, r23	; 0x1b
   19ac6:	24 8d       	ldd	r18, Z+28	; 0x1c
   19ac8:	35 8d       	ldd	r19, Z+29	; 0x1d
   19aca:	2f 5f       	subi	r18, 0xFF	; 255
   19acc:	3f 4f       	sbci	r19, 0xFF	; 255
   19ace:	35 8f       	std	Z+29, r19	; 0x1d
   19ad0:	24 8f       	std	Z+28, r18	; 0x1c
   19ad2:	f5 01       	movw	r30, r10
   19ad4:	40 81       	ld	r20, Z
   19ad6:	51 81       	ldd	r21, Z+1	; 0x01
   19ad8:	62 81       	ldd	r22, Z+2	; 0x02
   19ada:	73 81       	ldd	r23, Z+3	; 0x03
   19adc:	1c 01       	movw	r2, r24
   19ade:	2d 01       	movw	r4, r26
   19ae0:	24 0e       	add	r2, r20
   19ae2:	35 1e       	adc	r3, r21
   19ae4:	46 1e       	adc	r4, r22
   19ae6:	57 1e       	adc	r5, r23
   19ae8:	0f ef       	ldi	r16, 0xFF	; 255
   19aea:	1f ef       	ldi	r17, 0xFF	; 255
   19aec:	a6 cf       	rjmp	.-180    	; 0x19a3a <lif_updatefree+0x118>
   19aee:	f3 a2       	std	Z+35, r15	; 0x23
   19af0:	e2 a2       	std	Z+34, r14	; 0x22
   19af2:	8f ef       	ldi	r24, 0xFF	; 255
   19af4:	9f ef       	ldi	r25, 0xFF	; 255
   19af6:	ef 81       	ldd	r30, Y+7	; 0x07
   19af8:	f8 85       	ldd	r31, Y+8	; 0x08
   19afa:	91 a3       	std	Z+33, r25	; 0x21
   19afc:	80 a3       	std	Z+32, r24	; 0x20
   19afe:	8f 81       	ldd	r24, Y+7	; 0x07
   19b00:	98 85       	ldd	r25, Y+8	; 0x08
   19b02:	28 96       	adiw	r28, 0x08	; 8
   19b04:	0f b6       	in	r0, 0x3f	; 63
   19b06:	f8 94       	cli
   19b08:	de bf       	out	0x3e, r29	; 62
   19b0a:	0f be       	out	0x3f, r0	; 63
   19b0c:	cd bf       	out	0x3d, r28	; 61
   19b0e:	df 91       	pop	r29
   19b10:	cf 91       	pop	r28
   19b12:	1f 91       	pop	r17
   19b14:	0f 91       	pop	r16
   19b16:	ff 90       	pop	r15
   19b18:	ef 90       	pop	r14
   19b1a:	df 90       	pop	r13
   19b1c:	cf 90       	pop	r12
   19b1e:	bf 90       	pop	r11
   19b20:	af 90       	pop	r10
   19b22:	8f 90       	pop	r8
   19b24:	7f 90       	pop	r7
   19b26:	6f 90       	pop	r6
   19b28:	5f 90       	pop	r5
   19b2a:	4f 90       	pop	r4
   19b2c:	3f 90       	pop	r3
   19b2e:	2f 90       	pop	r2
   19b30:	08 95       	ret

00019b32 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19b32:	a6 e1       	ldi	r26, 0x16	; 22
   19b34:	b1 e0       	ldi	r27, 0x01	; 1
   19b36:	ef e9       	ldi	r30, 0x9F	; 159
   19b38:	fd ec       	ldi	r31, 0xCD	; 205
   19b3a:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
   19b3e:	4c 01       	movw	r8, r24
   19b40:	1b 01       	movw	r2, r22
   19b42:	29 01       	movw	r4, r18
   19b44:	3a 01       	movw	r6, r20
   19b46:	cd 5e       	subi	r28, 0xED	; 237
   19b48:	de 4f       	sbci	r29, 0xFE	; 254
   19b4a:	e8 82       	st	Y, r14
   19b4c:	f9 82       	std	Y+1, r15	; 0x01
   19b4e:	0a 83       	std	Y+2, r16	; 0x02
   19b50:	1b 83       	std	Y+3, r17	; 0x03
   19b52:	c3 51       	subi	r28, 0x13	; 19
   19b54:	d1 40       	sbci	r29, 0x01	; 1
   19b56:	c5 5f       	subi	r28, 0xF5	; 245
   19b58:	de 4f       	sbci	r29, 0xFE	; 254
   19b5a:	a8 82       	st	Y, r10
   19b5c:	b9 82       	std	Y+1, r11	; 0x01
   19b5e:	ca 82       	std	Y+2, r12	; 0x02
   19b60:	db 82       	std	Y+3, r13	; 0x03
   19b62:	cb 50       	subi	r28, 0x0B	; 11
   19b64:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19b66:	80 e0       	ldi	r24, 0x00	; 0
   19b68:	90 e0       	ldi	r25, 0x00	; 0
   19b6a:	0e 94 65 38 	call	0x70ca	; 0x70ca <time>
   19b6e:	6b 01       	movw	r12, r22
   19b70:	7c 01       	movw	r14, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19b72:	64 e7       	ldi	r22, 0x74	; 116
   19b74:	70 e0       	ldi	r23, 0x00	; 0
   19b76:	80 e0       	ldi	r24, 0x00	; 0
   19b78:	90 e0       	ldi	r25, 0x00	; 0
   19b7a:	0e 94 ba c1 	call	0x18374	; 0x18374 <lif_calloc>
   19b7e:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   19b80:	89 2b       	or	r24, r25
   19b82:	09 f4       	brne	.+2      	; 0x19b86 <lif_create_volume+0x54>
   19b84:	f9 c2       	rjmp	.+1522   	; 0x1a178 <lif_create_volume+0x646>
        return(NULL);

	printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19b86:	c2 5f       	subi	r28, 0xF2	; 242
   19b88:	de 4f       	sbci	r29, 0xFE	; 254
   19b8a:	28 81       	ld	r18, Y
   19b8c:	ce 50       	subi	r28, 0x0E	; 14
   19b8e:	d1 40       	sbci	r29, 0x01	; 1
   19b90:	2f 93       	push	r18
   19b92:	c3 5f       	subi	r28, 0xF3	; 243
   19b94:	de 4f       	sbci	r29, 0xFE	; 254
   19b96:	38 81       	ld	r19, Y
   19b98:	cd 50       	subi	r28, 0x0D	; 13
   19b9a:	d1 40       	sbci	r29, 0x01	; 1
   19b9c:	3f 93       	push	r19
   19b9e:	c4 5f       	subi	r28, 0xF4	; 244
   19ba0:	de 4f       	sbci	r29, 0xFE	; 254
   19ba2:	48 81       	ld	r20, Y
   19ba4:	cc 50       	subi	r28, 0x0C	; 12
   19ba6:	d1 40       	sbci	r29, 0x01	; 1
   19ba8:	4f 93       	push	r20
   19baa:	c5 5f       	subi	r28, 0xF5	; 245
   19bac:	de 4f       	sbci	r29, 0xFE	; 254
   19bae:	58 81       	ld	r21, Y
   19bb0:	cb 50       	subi	r28, 0x0B	; 11
   19bb2:	d1 40       	sbci	r29, 0x01	; 1
   19bb4:	5f 93       	push	r21
   19bb6:	ca 5e       	subi	r28, 0xEA	; 234
   19bb8:	de 4f       	sbci	r29, 0xFE	; 254
   19bba:	88 81       	ld	r24, Y
   19bbc:	c6 51       	subi	r28, 0x16	; 22
   19bbe:	d1 40       	sbci	r29, 0x01	; 1
   19bc0:	8f 93       	push	r24
   19bc2:	cb 5e       	subi	r28, 0xEB	; 235
   19bc4:	de 4f       	sbci	r29, 0xFE	; 254
   19bc6:	98 81       	ld	r25, Y
   19bc8:	c5 51       	subi	r28, 0x15	; 21
   19bca:	d1 40       	sbci	r29, 0x01	; 1
   19bcc:	9f 93       	push	r25
   19bce:	cc 5e       	subi	r28, 0xEC	; 236
   19bd0:	de 4f       	sbci	r29, 0xFE	; 254
   19bd2:	a8 81       	ld	r26, Y
   19bd4:	c4 51       	subi	r28, 0x14	; 20
   19bd6:	d1 40       	sbci	r29, 0x01	; 1
   19bd8:	af 93       	push	r26
   19bda:	cd 5e       	subi	r28, 0xED	; 237
   19bdc:	de 4f       	sbci	r29, 0xFE	; 254
   19bde:	b8 81       	ld	r27, Y
   19be0:	c3 51       	subi	r28, 0x13	; 19
   19be2:	d1 40       	sbci	r29, 0x01	; 1
   19be4:	bf 93       	push	r27
   19be6:	7f 92       	push	r7
   19be8:	6f 92       	push	r6
   19bea:	5f 92       	push	r5
   19bec:	4f 92       	push	r4
   19bee:	3f 92       	push	r3
   19bf0:	2f 92       	push	r2
   19bf2:	9f 92       	push	r9
   19bf4:	8f 92       	push	r8
   19bf6:	86 ed       	ldi	r24, 0xD6	; 214
   19bf8:	9b e3       	ldi	r25, 0x3B	; 59
   19bfa:	1f 92       	push	r1
   19bfc:	9f 93       	push	r25
   19bfe:	8f 93       	push	r24
   19c00:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
		imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & 0x400)
   19c04:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19c08:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   19c0c:	0f b6       	in	r0, 0x3f	; 63
   19c0e:	f8 94       	cli
   19c10:	de bf       	out	0x3e, r29	; 62
   19c12:	0f be       	out	0x3f, r0	; 63
   19c14:	cd bf       	out	0x3d, r28	; 61
   19c16:	92 ff       	sbrs	r25, 2
   19c18:	04 c0       	rjmp	.+8      	; 0x19c22 <lif_create_volume+0xf0>
        lif_dump_vol(LIF,"lif_create_volume");
   19c1a:	6e ea       	ldi	r22, 0xAE	; 174
   19c1c:	75 e1       	ldi	r23, 0x15	; 21
   19c1e:	c5 01       	movw	r24, r10
    
    lif_image_clear(LIF);
   19c20:	01 d9       	rcall	.-3582   	; 0x18e24 <lif_dump_vol>
   19c22:	c5 01       	movw	r24, r10

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19c24:	ea d8       	rcall	.-3628   	; 0x18dfa <lif_image_clear>
   19c26:	80 e0       	ldi	r24, 0x00	; 0
   19c28:	90 e8       	ldi	r25, 0x80	; 128
   19c2a:	d5 01       	movw	r26, r10
   19c2c:	95 96       	adiw	r26, 0x25	; 37
   19c2e:	9c 93       	st	X, r25
   19c30:	8e 93       	st	-X, r24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19c32:	94 97       	sbiw	r26, 0x24	; 36
   19c34:	46 e0       	ldi	r20, 0x06	; 6
   19c36:	50 e0       	ldi	r21, 0x00	; 0
   19c38:	b1 01       	movw	r22, r2
   19c3a:	c5 01       	movw	r24, r10
   19c3c:	86 96       	adiw	r24, 0x26	; 38
   19c3e:	0e 94 e1 c3 	call	0x187c2	; 0x187c2 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19c42:	f5 01       	movw	r30, r10
   19c44:	45 a6       	std	Z+45, r4	; 0x2d
   19c46:	56 a6       	std	Z+46, r5	; 0x2e
   19c48:	67 a6       	std	Z+47, r6	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   19c4a:	70 aa       	std	Z+48, r7	; 0x30
   19c4c:	cd 5e       	subi	r28, 0xED	; 237
   19c4e:	de 4f       	sbci	r29, 0xFE	; 254
   19c50:	28 81       	ld	r18, Y
   19c52:	39 81       	ldd	r19, Y+1	; 0x01
   19c54:	4a 81       	ldd	r20, Y+2	; 0x02
   19c56:	5b 81       	ldd	r21, Y+3	; 0x03
   19c58:	c3 51       	subi	r28, 0x13	; 19
   19c5a:	d1 40       	sbci	r29, 0x01	; 1
   19c5c:	25 ab       	std	Z+53, r18	; 0x35
   19c5e:	36 ab       	std	Z+54, r19	; 0x36
   19c60:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   19c62:	50 af       	std	Z+56, r21	; 0x38
   19c64:	80 e0       	ldi	r24, 0x00	; 0
   19c66:	90 e1       	ldi	r25, 0x10	; 16
   19c68:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   19c6a:	81 ab       	std	Z+49, r24	; 0x31
   19c6c:	fd 96       	adiw	r30, 0x3d	; 61
   19c6e:	10 82       	st	Z, r1
   19c70:	11 82       	std	Z+1, r1	; 0x01
   19c72:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   19c74:	13 82       	std	Z+3, r1	; 0x03
   19c76:	34 96       	adiw	r30, 0x04	; 4
   19c78:	10 82       	st	Z, r1
   19c7a:	11 82       	std	Z+1, r1	; 0x01
   19c7c:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   19c7e:	13 82       	std	Z+3, r1	; 0x03
   19c80:	34 96       	adiw	r30, 0x04	; 4
   19c82:	10 82       	st	Z, r1
   19c84:	11 82       	std	Z+1, r1	; 0x01
   19c86:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19c88:	13 82       	std	Z+3, r1	; 0x03
   19c8a:	a5 01       	movw	r20, r10
   19c8c:	47 5b       	subi	r20, 0xB7	; 183
   19c8e:	5f 4f       	sbci	r21, 0xFF	; 255
   19c90:	c7 01       	movw	r24, r14
   19c92:	b6 01       	movw	r22, r12
   19c94:	0e 94 26 c6 	call	0x18c4c	; 0x18c4c <lif_time2lifbcd>

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   19c98:	c4 01       	movw	r24, r8
   19c9a:	0e 94 f6 c1 	call	0x183ec	; 0x183ec <lif_stralloc>
   19c9e:	f5 01       	movw	r30, r10
   19ca0:	91 83       	std	Z+1, r25	; 0x01
    if(LIF->name == NULL)
   19ca2:	80 83       	st	Z, r24
   19ca4:	89 2b       	or	r24, r25
   19ca6:	09 f4       	brne	.+2      	; 0x19caa <lif_create_volume+0x178>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   19ca8:	5c c2       	rjmp	.+1208   	; 0x1a162 <lif_create_volume+0x630>
   19caa:	c5 5f       	subi	r28, 0xF5	; 245
   19cac:	de 4f       	sbci	r29, 0xFE	; 254
   19cae:	28 81       	ld	r18, Y
   19cb0:	39 81       	ldd	r19, Y+1	; 0x01
   19cb2:	4a 81       	ldd	r20, Y+2	; 0x02
   19cb4:	5b 81       	ldd	r21, Y+3	; 0x03
   19cb6:	cb 50       	subi	r28, 0x0B	; 11
   19cb8:	d1 40       	sbci	r29, 0x01	; 1
   19cba:	20 8b       	std	Z+16, r18	; 0x10
   19cbc:	31 8b       	std	Z+17, r19	; 0x11
   19cbe:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   19cc0:	53 8b       	std	Z+19, r21	; 0x13
   19cc2:	cd 5e       	subi	r28, 0xED	; 237
   19cc4:	de 4f       	sbci	r29, 0xFE	; 254
   19cc6:	88 81       	ld	r24, Y
   19cc8:	99 81       	ldd	r25, Y+1	; 0x01
   19cca:	aa 81       	ldd	r26, Y+2	; 0x02
   19ccc:	bb 81       	ldd	r27, Y+3	; 0x03
   19cce:	c3 51       	subi	r28, 0x13	; 19
   19cd0:	d1 40       	sbci	r29, 0x01	; 1
   19cd2:	84 0d       	add	r24, r4
   19cd4:	95 1d       	adc	r25, r5
   19cd6:	a6 1d       	adc	r26, r6
   19cd8:	b7 1d       	adc	r27, r7
   19cda:	f5 01       	movw	r30, r10
   19cdc:	84 87       	std	Z+12, r24	; 0x0c
   19cde:	95 87       	std	Z+13, r25	; 0x0d
   19ce0:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19ce2:	b7 87       	std	Z+15, r27	; 0x0f
   19ce4:	82 0f       	add	r24, r18
   19ce6:	93 1f       	adc	r25, r19
   19ce8:	a4 1f       	adc	r26, r20
   19cea:	b5 1f       	adc	r27, r21
   19cec:	84 83       	std	Z+4, r24	; 0x04
   19cee:	95 83       	std	Z+5, r25	; 0x05
   19cf0:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19cf2:	b7 83       	std	Z+7, r27	; 0x07
   19cf4:	ba 2f       	mov	r27, r26
   19cf6:	a9 2f       	mov	r26, r25
   19cf8:	98 2f       	mov	r25, r24
   19cfa:	88 27       	eor	r24, r24
   19cfc:	80 87       	std	Z+8, r24	; 0x08
   19cfe:	91 87       	std	Z+9, r25	; 0x09
   19d00:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   19d02:	b3 87       	std	Z+11, r27	; 0x0b
   19d04:	20 8f       	std	Z+24, r18	; 0x18
   19d06:	31 8f       	std	Z+25, r19	; 0x19
   19d08:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   19d0a:	53 8f       	std	Z+27, r21	; 0x1b
   19d0c:	14 8a       	std	Z+20, r1	; 0x14
   19d0e:	15 8a       	std	Z+21, r1	; 0x15
   19d10:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   19d12:	17 8a       	std	Z+23, r1	; 0x17
   19d14:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   19d16:	14 8e       	std	Z+28, r1	; 0x1c
   19d18:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   19d1a:	16 8e       	std	Z+30, r1	; 0x1e
   19d1c:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   19d1e:	10 a2       	std	Z+32, r1	; 0x20
   19d20:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   19d22:	12 a2       	std	Z+34, r1	; 0x22
   19d24:	c1 2c       	mov	r12, r1
   19d26:	dd 24       	eor	r13, r13
   19d28:	d3 94       	inc	r13
   19d2a:	9e 01       	movw	r18, r28
   19d2c:	2f 5f       	subi	r18, 0xFF	; 255
   19d2e:	3f 4f       	sbci	r19, 0xFF	; 255
   19d30:	79 01       	movw	r14, r18
   19d32:	d9 01       	movw	r26, r18
   19d34:	f6 01       	movw	r30, r12
   19d36:	1d 92       	st	X+, r1
   19d38:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   19d3a:	e9 f7       	brne	.-6      	; 0x19d36 <lif_create_volume+0x204>
   19d3c:	b9 01       	movw	r22, r18
   19d3e:	c5 01       	movw	r24, r10
   19d40:	0e 94 1e c4 	call	0x1883c	; 0x1883c <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19d44:	6e e9       	ldi	r22, 0x9E	; 158
   19d46:	78 e0       	ldi	r23, 0x08	; 8
   19d48:	d5 01       	movw	r26, r10
   19d4a:	8d 91       	ld	r24, X+
   19d4c:	9c 91       	ld	r25, X
   19d4e:	0e 94 15 c2 	call	0x1842a	; 0x1842a <lif_open>
   19d52:	f5 01       	movw	r30, r10
   19d54:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   19d56:	82 83       	std	Z+2, r24	; 0x02
   19d58:	89 2b       	or	r24, r25
   19d5a:	09 f4       	brne	.+2      	; 0x19d5e <lif_create_volume+0x22c>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19d5c:	02 c2       	rjmp	.+1028   	; 0x1a162 <lif_create_volume+0x630>
   19d5e:	00 e0       	ldi	r16, 0x00	; 0
   19d60:	11 e0       	ldi	r17, 0x01	; 1
   19d62:	20 e0       	ldi	r18, 0x00	; 0
   19d64:	30 e0       	ldi	r19, 0x00	; 0
   19d66:	a9 01       	movw	r20, r18
   19d68:	b7 01       	movw	r22, r14
   19d6a:	c5 01       	movw	r24, r10
   19d6c:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <lif_write>
   19d70:	9c 01       	movw	r18, r24
   19d72:	99 0f       	add	r25, r25
   19d74:	44 0b       	sbc	r20, r20
   19d76:	55 0b       	sbc	r21, r21
   19d78:	c9 5f       	subi	r28, 0xF9	; 249
   19d7a:	de 4f       	sbci	r29, 0xFE	; 254
   19d7c:	28 83       	st	Y, r18
   19d7e:	39 83       	std	Y+1, r19	; 0x01
   19d80:	4a 83       	std	Y+2, r20	; 0x02
   19d82:	5b 83       	std	Y+3, r21	; 0x03
   19d84:	c7 50       	subi	r28, 0x07	; 7

    if(size < LIF_SECTOR_SIZE)
   19d86:	d1 40       	sbci	r29, 0x01	; 1
   19d88:	2f 3f       	cpi	r18, 0xFF	; 255
   19d8a:	31 05       	cpc	r19, r1
   19d8c:	41 05       	cpc	r20, r1
   19d8e:	51 05       	cpc	r21, r1
   19d90:	09 f0       	breq	.+2      	; 0x19d94 <lif_create_volume+0x262>
   19d92:	0c f4       	brge	.+2      	; 0x19d96 <lif_create_volume+0x264>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   19d94:	e6 c1       	rjmp	.+972    	; 0x1a162 <lif_create_volume+0x630>
   19d96:	d7 01       	movw	r26, r14
   19d98:	f6 01       	movw	r30, r12
   19d9a:	1d 92       	st	X+, r1
   19d9c:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19d9e:	e9 f7       	brne	.-6      	; 0x19d9a <lif_create_volume+0x268>
   19da0:	21 e0       	ldi	r18, 0x01	; 1
   19da2:	30 e0       	ldi	r19, 0x00	; 0
   19da4:	40 e0       	ldi	r20, 0x00	; 0
   19da6:	50 e0       	ldi	r21, 0x00	; 0
   19da8:	cd 5f       	subi	r28, 0xFD	; 253
   19daa:	de 4f       	sbci	r29, 0xFE	; 254
   19dac:	28 83       	st	Y, r18
   19dae:	39 83       	std	Y+1, r19	; 0x01
   19db0:	4a 83       	std	Y+2, r20	; 0x02
   19db2:	5b 83       	std	Y+3, r21	; 0x03
   19db4:	c3 50       	subi	r28, 0x03	; 3
   19db6:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("\tWrote: %ld\r", count);
   19db8:	47 01       	movw	r8, r14
   19dba:	89 ec       	ldi	r24, 0xC9	; 201
   19dbc:	9b e3       	ldi	r25, 0x3B	; 59


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19dbe:	6c 01       	movw	r12, r24
   19dc0:	cd 5f       	subi	r28, 0xFD	; 253
   19dc2:	de 4f       	sbci	r29, 0xFE	; 254
   19dc4:	88 81       	ld	r24, Y
   19dc6:	99 81       	ldd	r25, Y+1	; 0x01
   19dc8:	aa 81       	ldd	r26, Y+2	; 0x02
   19dca:	bb 81       	ldd	r27, Y+3	; 0x03
   19dcc:	c3 50       	subi	r28, 0x03	; 3
   19dce:	d1 40       	sbci	r29, 0x01	; 1
   19dd0:	84 15       	cp	r24, r4
   19dd2:	95 05       	cpc	r25, r5
   19dd4:	a6 05       	cpc	r26, r6
   19dd6:	b7 05       	cpc	r27, r7
   19dd8:	0c f0       	brlt	.+2      	; 0x19ddc <lif_create_volume+0x2aa>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19dda:	64 c0       	rjmp	.+200    	; 0x19ea4 <lif_create_volume+0x372>
   19ddc:	00 e0       	ldi	r16, 0x00	; 0
   19dde:	11 e0       	ldi	r17, 0x01	; 1
   19de0:	c9 5f       	subi	r28, 0xF9	; 249
   19de2:	de 4f       	sbci	r29, 0xFE	; 254
   19de4:	28 81       	ld	r18, Y
   19de6:	39 81       	ldd	r19, Y+1	; 0x01
   19de8:	4a 81       	ldd	r20, Y+2	; 0x02
   19dea:	5b 81       	ldd	r21, Y+3	; 0x03
   19dec:	c7 50       	subi	r28, 0x07	; 7
   19dee:	d1 40       	sbci	r29, 0x01	; 1
   19df0:	b4 01       	movw	r22, r8
   19df2:	c5 01       	movw	r24, r10
   19df4:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <lif_write>
   19df8:	09 2e       	mov	r0, r25
   19dfa:	00 0c       	add	r0, r0
   19dfc:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19dfe:	bb 0b       	sbc	r27, r27
   19e00:	8f 3f       	cpi	r24, 0xFF	; 255
   19e02:	91 05       	cpc	r25, r1
   19e04:	a1 05       	cpc	r26, r1
   19e06:	b1 05       	cpc	r27, r1
   19e08:	09 f0       	breq	.+2      	; 0x19e0c <lif_create_volume+0x2da>
   19e0a:	0c f4       	brge	.+2      	; 0x19e0e <lif_create_volume+0x2dc>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19e0c:	aa c1       	rjmp	.+852    	; 0x1a162 <lif_create_volume+0x630>
   19e0e:	c9 5f       	subi	r28, 0xF9	; 249
   19e10:	de 4f       	sbci	r29, 0xFE	; 254
   19e12:	28 81       	ld	r18, Y
   19e14:	39 81       	ldd	r19, Y+1	; 0x01
   19e16:	4a 81       	ldd	r20, Y+2	; 0x02
   19e18:	5b 81       	ldd	r21, Y+3	; 0x03
   19e1a:	c7 50       	subi	r28, 0x07	; 7
   19e1c:	d1 40       	sbci	r29, 0x01	; 1
   19e1e:	28 0f       	add	r18, r24
   19e20:	39 1f       	adc	r19, r25
   19e22:	4a 1f       	adc	r20, r26
   19e24:	5b 1f       	adc	r21, r27
   19e26:	c9 5f       	subi	r28, 0xF9	; 249
   19e28:	de 4f       	sbci	r29, 0xFE	; 254
   19e2a:	28 83       	st	Y, r18
   19e2c:	39 83       	std	Y+1, r19	; 0x01
   19e2e:	4a 83       	std	Y+2, r20	; 0x02
   19e30:	5b 83       	std	Y+3, r21	; 0x03
   19e32:	c7 50       	subi	r28, 0x07	; 7
            printf("\tWrote: %ld\r", count);
   19e34:	d1 40       	sbci	r29, 0x01	; 1
   19e36:	ca 5f       	subi	r28, 0xFA	; 250
   19e38:	de 4f       	sbci	r29, 0xFE	; 254
   19e3a:	38 81       	ld	r19, Y
   19e3c:	c6 50       	subi	r28, 0x06	; 6
   19e3e:	d1 40       	sbci	r29, 0x01	; 1
   19e40:	3f 93       	push	r19
   19e42:	cb 5f       	subi	r28, 0xFB	; 251
   19e44:	de 4f       	sbci	r29, 0xFE	; 254
   19e46:	48 81       	ld	r20, Y
   19e48:	c5 50       	subi	r28, 0x05	; 5
   19e4a:	d1 40       	sbci	r29, 0x01	; 1
   19e4c:	4f 93       	push	r20
   19e4e:	cc 5f       	subi	r28, 0xFC	; 252
   19e50:	de 4f       	sbci	r29, 0xFE	; 254
   19e52:	58 81       	ld	r21, Y
   19e54:	c4 50       	subi	r28, 0x04	; 4
   19e56:	d1 40       	sbci	r29, 0x01	; 1
   19e58:	5f 93       	push	r21
   19e5a:	cd 5f       	subi	r28, 0xFD	; 253
   19e5c:	de 4f       	sbci	r29, 0xFE	; 254
   19e5e:	88 81       	ld	r24, Y
   19e60:	c3 50       	subi	r28, 0x03	; 3
   19e62:	d1 40       	sbci	r29, 0x01	; 1
   19e64:	8f 93       	push	r24
   19e66:	1f 92       	push	r1
   19e68:	df 92       	push	r13
   19e6a:	cf 92       	push	r12
   19e6c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19e70:	cd 5f       	subi	r28, 0xFD	; 253
   19e72:	de 4f       	sbci	r29, 0xFE	; 254
   19e74:	28 81       	ld	r18, Y
   19e76:	39 81       	ldd	r19, Y+1	; 0x01
   19e78:	4a 81       	ldd	r20, Y+2	; 0x02
   19e7a:	5b 81       	ldd	r21, Y+3	; 0x03
   19e7c:	c3 50       	subi	r28, 0x03	; 3
   19e7e:	d1 40       	sbci	r29, 0x01	; 1
   19e80:	2f 5f       	subi	r18, 0xFF	; 255
   19e82:	3f 4f       	sbci	r19, 0xFF	; 255
   19e84:	4f 4f       	sbci	r20, 0xFF	; 255
   19e86:	5f 4f       	sbci	r21, 0xFF	; 255
   19e88:	cd 5f       	subi	r28, 0xFD	; 253
   19e8a:	de 4f       	sbci	r29, 0xFE	; 254
   19e8c:	28 83       	st	Y, r18
   19e8e:	39 83       	std	Y+1, r19	; 0x01
   19e90:	4a 83       	std	Y+2, r20	; 0x02
   19e92:	5b 83       	std	Y+3, r21	; 0x03
   19e94:	c3 50       	subi	r28, 0x03	; 3
   19e96:	d1 40       	sbci	r29, 0x01	; 1
   19e98:	0f b6       	in	r0, 0x3f	; 63
   19e9a:	f8 94       	cli
   19e9c:	de bf       	out	0x3e, r29	; 62
   19e9e:	0f be       	out	0x3f, r0	; 63
   19ea0:	cd bf       	out	0x3d, r28	; 61
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   19ea2:	8e cf       	rjmp	.-228    	; 0x19dc0 <lif_create_volume+0x28e>
   19ea4:	c5 01       	movw	r24, r10
   19ea6:	0e 94 03 c7 	call	0x18e06	; 0x18e06 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19eaa:	8f ef       	ldi	r24, 0xFF	; 255
   19eac:	9f ef       	ldi	r25, 0xFF	; 255
   19eae:	f5 01       	movw	r30, r10
   19eb0:	e6 5a       	subi	r30, 0xA6	; 166
   19eb2:	ff 4f       	sbci	r31, 0xFF	; 255
   19eb4:	91 83       	std	Z+1, r25	; 0x01
   19eb6:	80 83       	st	Z, r24
   19eb8:	74 01       	movw	r14, r8
   19eba:	6e 01       	movw	r12, r28
   19ebc:	91 e0       	ldi	r25, 0x01	; 1
   19ebe:	c9 0e       	add	r12, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19ec0:	d9 1e       	adc	r13, r25
   19ec2:	b7 01       	movw	r22, r14
   19ec4:	c5 01       	movw	r24, r10
   19ec6:	0e 94 3e c5 	call	0x18a7c	; 0x18a7c <lif_dir2str>
   19eca:	a0 e2       	ldi	r26, 0x20	; 32
   19ecc:	ea 0e       	add	r14, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19ece:	f1 1c       	adc	r15, r1
   19ed0:	ce 14       	cp	r12, r14
   19ed2:	df 04       	cpc	r13, r15
   19ed4:	b1 f7       	brne	.-20     	; 0x19ec2 <lif_create_volume+0x390>
   19ed6:	c1 2c       	mov	r12, r1
   19ed8:	d1 2c       	mov	r13, r1
   19eda:	76 01       	movw	r14, r12
   19edc:	fe 01       	movw	r30, r28
   19ede:	31 96       	adiw	r30, 0x01	; 1
   19ee0:	cf 5f       	subi	r28, 0xFF	; 255
   19ee2:	de 4f       	sbci	r29, 0xFE	; 254
   19ee4:	f9 83       	std	Y+1, r31	; 0x01
   19ee6:	e8 83       	st	Y, r30
   19ee8:	c1 50       	subi	r28, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19eea:	d1 40       	sbci	r29, 0x01	; 1
   19eec:	84 e6       	ldi	r24, 0x64	; 100
   19eee:	28 2e       	mov	r2, r24
   19ef0:	31 2c       	mov	r3, r1
   19ef2:	41 2c       	mov	r4, r1
            printf("\tWrote: %ld\r", count);
   19ef4:	51 2c       	mov	r5, r1
   19ef6:	8c eb       	ldi	r24, 0xBC	; 188
   19ef8:	9b e3       	ldi	r25, 0x3B	; 59
   19efa:	3c 01       	movw	r6, r24
   19efc:	81 2c       	mov	r8, r1
   19efe:	cd 5f       	subi	r28, 0xFD	; 253
   19f00:	de 4f       	sbci	r29, 0xFE	; 254
   19f02:	28 81       	ld	r18, Y
   19f04:	39 81       	ldd	r19, Y+1	; 0x01
   19f06:	4a 81       	ldd	r20, Y+2	; 0x02
   19f08:	5b 81       	ldd	r21, Y+3	; 0x03
   19f0a:	c3 50       	subi	r28, 0x03	; 3
   19f0c:	d1 40       	sbci	r29, 0x01	; 1
   19f0e:	2c 0d       	add	r18, r12
   19f10:	3d 1d       	adc	r19, r13
   19f12:	4e 1d       	adc	r20, r14
   19f14:	5f 1d       	adc	r21, r15
   19f16:	c1 5f       	subi	r28, 0xF1	; 241
   19f18:	de 4f       	sbci	r29, 0xFE	; 254
   19f1a:	28 83       	st	Y, r18
   19f1c:	39 83       	std	Y+1, r19	; 0x01
   19f1e:	4a 83       	std	Y+2, r20	; 0x02
   19f20:	5b 83       	std	Y+3, r21	; 0x03
   19f22:	cf 50       	subi	r28, 0x0F	; 15
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19f24:	d1 40       	sbci	r29, 0x01	; 1
   19f26:	cd 5e       	subi	r28, 0xED	; 237
   19f28:	de 4f       	sbci	r29, 0xFE	; 254
   19f2a:	88 81       	ld	r24, Y
   19f2c:	99 81       	ldd	r25, Y+1	; 0x01
   19f2e:	aa 81       	ldd	r26, Y+2	; 0x02
   19f30:	bb 81       	ldd	r27, Y+3	; 0x03
   19f32:	c3 51       	subi	r28, 0x13	; 19
   19f34:	d1 40       	sbci	r29, 0x01	; 1
   19f36:	c8 16       	cp	r12, r24
   19f38:	d9 06       	cpc	r13, r25
   19f3a:	ea 06       	cpc	r14, r26
   19f3c:	fb 06       	cpc	r15, r27
   19f3e:	0c f0       	brlt	.+2      	; 0x19f42 <lif_create_volume+0x410>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19f40:	67 c0       	rjmp	.+206    	; 0x1a010 <lif_create_volume+0x4de>
   19f42:	00 e0       	ldi	r16, 0x00	; 0
   19f44:	11 e0       	ldi	r17, 0x01	; 1
   19f46:	c9 5f       	subi	r28, 0xF9	; 249
   19f48:	de 4f       	sbci	r29, 0xFE	; 254
   19f4a:	28 81       	ld	r18, Y
   19f4c:	39 81       	ldd	r19, Y+1	; 0x01
   19f4e:	4a 81       	ldd	r20, Y+2	; 0x02
   19f50:	5b 81       	ldd	r21, Y+3	; 0x03
   19f52:	c7 50       	subi	r28, 0x07	; 7
   19f54:	d1 40       	sbci	r29, 0x01	; 1
   19f56:	be 01       	movw	r22, r28
   19f58:	6f 5f       	subi	r22, 0xFF	; 255
   19f5a:	7f 4f       	sbci	r23, 0xFF	; 255
   19f5c:	c5 01       	movw	r24, r10
   19f5e:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <lif_write>
   19f62:	09 2e       	mov	r0, r25
   19f64:	00 0c       	add	r0, r0
   19f66:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19f68:	bb 0b       	sbc	r27, r27
   19f6a:	8f 3f       	cpi	r24, 0xFF	; 255
   19f6c:	91 05       	cpc	r25, r1
   19f6e:	a1 05       	cpc	r26, r1
   19f70:	b1 05       	cpc	r27, r1
   19f72:	09 f0       	breq	.+2      	; 0x19f76 <lif_create_volume+0x444>
   19f74:	0c f4       	brge	.+2      	; 0x19f78 <lif_create_volume+0x446>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19f76:	f5 c0       	rjmp	.+490    	; 0x1a162 <lif_create_volume+0x630>
   19f78:	c9 5f       	subi	r28, 0xF9	; 249
   19f7a:	de 4f       	sbci	r29, 0xFE	; 254
   19f7c:	28 81       	ld	r18, Y
   19f7e:	39 81       	ldd	r19, Y+1	; 0x01
   19f80:	4a 81       	ldd	r20, Y+2	; 0x02
   19f82:	5b 81       	ldd	r21, Y+3	; 0x03
   19f84:	c7 50       	subi	r28, 0x07	; 7
   19f86:	d1 40       	sbci	r29, 0x01	; 1
   19f88:	28 0f       	add	r18, r24
   19f8a:	39 1f       	adc	r19, r25
   19f8c:	4a 1f       	adc	r20, r26
   19f8e:	5b 1f       	adc	r21, r27
   19f90:	c9 5f       	subi	r28, 0xF9	; 249
   19f92:	de 4f       	sbci	r29, 0xFE	; 254
   19f94:	28 83       	st	Y, r18
   19f96:	39 83       	std	Y+1, r19	; 0x01
   19f98:	4a 83       	std	Y+2, r20	; 0x02
   19f9a:	5b 83       	std	Y+3, r21	; 0x03
   19f9c:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   19f9e:	d1 40       	sbci	r29, 0x01	; 1
   19fa0:	c1 5f       	subi	r28, 0xF1	; 241
   19fa2:	de 4f       	sbci	r29, 0xFE	; 254
   19fa4:	68 81       	ld	r22, Y
   19fa6:	79 81       	ldd	r23, Y+1	; 0x01
   19fa8:	8a 81       	ldd	r24, Y+2	; 0x02
   19faa:	9b 81       	ldd	r25, Y+3	; 0x03
   19fac:	cf 50       	subi	r28, 0x0F	; 15
   19fae:	d1 40       	sbci	r29, 0x01	; 1
   19fb0:	a2 01       	movw	r20, r4
   19fb2:	91 01       	movw	r18, r2
   19fb4:	0e 94 ce e4 	call	0x1c99c	; 0x1c99c <__divmodsi4>
   19fb8:	67 2b       	or	r22, r23
   19fba:	68 2b       	or	r22, r24
   19fbc:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   19fbe:	11 f5       	brne	.+68     	; 0x1a004 <lif_create_volume+0x4d2>
   19fc0:	ce 5e       	subi	r28, 0xEE	; 238
   19fc2:	de 4f       	sbci	r29, 0xFE	; 254
   19fc4:	38 81       	ld	r19, Y
   19fc6:	c2 51       	subi	r28, 0x12	; 18
   19fc8:	d1 40       	sbci	r29, 0x01	; 1
   19fca:	3f 93       	push	r19
   19fcc:	cf 5e       	subi	r28, 0xEF	; 239
   19fce:	de 4f       	sbci	r29, 0xFE	; 254
   19fd0:	48 81       	ld	r20, Y
   19fd2:	c1 51       	subi	r28, 0x11	; 17
   19fd4:	d1 40       	sbci	r29, 0x01	; 1
   19fd6:	4f 93       	push	r20
   19fd8:	c0 5f       	subi	r28, 0xF0	; 240
   19fda:	de 4f       	sbci	r29, 0xFE	; 254
   19fdc:	58 81       	ld	r21, Y
   19fde:	c0 51       	subi	r28, 0x10	; 16
   19fe0:	d1 40       	sbci	r29, 0x01	; 1
   19fe2:	5f 93       	push	r21
   19fe4:	c1 5f       	subi	r28, 0xF1	; 241
   19fe6:	de 4f       	sbci	r29, 0xFE	; 254
   19fe8:	88 81       	ld	r24, Y
   19fea:	cf 50       	subi	r28, 0x0F	; 15
   19fec:	d1 40       	sbci	r29, 0x01	; 1
   19fee:	8f 93       	push	r24
   19ff0:	1f 92       	push	r1
   19ff2:	7f 92       	push	r7
   19ff4:	6f 92       	push	r6
   19ff6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   19ffa:	0f b6       	in	r0, 0x3f	; 63
   19ffc:	f8 94       	cli
   19ffe:	de bf       	out	0x3e, r29	; 62
   1a000:	0f be       	out	0x3f, r0	; 63
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1a002:	cd bf       	out	0x3d, r28	; 61
   1a004:	bf ef       	ldi	r27, 0xFF	; 255
   1a006:	cb 1a       	sub	r12, r27
   1a008:	db 0a       	sbc	r13, r27
   1a00a:	eb 0a       	sbc	r14, r27
   1a00c:	fb 0a       	sbc	r15, r27
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1a00e:	77 cf       	rjmp	.-274    	; 0x19efe <lif_create_volume+0x3cc>
   1a010:	80 e0       	ldi	r24, 0x00	; 0
   1a012:	91 e0       	ldi	r25, 0x01	; 1
   1a014:	cf 5f       	subi	r28, 0xFF	; 255
   1a016:	de 4f       	sbci	r29, 0xFE	; 254
   1a018:	a8 81       	ld	r26, Y
   1a01a:	b9 81       	ldd	r27, Y+1	; 0x01
   1a01c:	c1 50       	subi	r28, 0x01	; 1
   1a01e:	d1 40       	sbci	r29, 0x01	; 1
   1a020:	fc 01       	movw	r30, r24
   1a022:	1d 92       	st	X+, r1
   1a024:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   1a026:	e9 f7       	brne	.-6      	; 0x1a022 <lif_create_volume+0x4f0>
   1a028:	41 2c       	mov	r4, r1
   1a02a:	51 2c       	mov	r5, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   1a02c:	32 01       	movw	r6, r4
   1a02e:	8f ea       	ldi	r24, 0xAF	; 175
   1a030:	9b e3       	ldi	r25, 0x3B	; 59
   1a032:	9c 01       	movw	r18, r24
   1a034:	40 e0       	ldi	r20, 0x00	; 0
   1a036:	cd 5f       	subi	r28, 0xFD	; 253
   1a038:	de 4f       	sbci	r29, 0xFE	; 254
   1a03a:	28 83       	st	Y, r18
   1a03c:	39 83       	std	Y+1, r19	; 0x01
   1a03e:	4a 83       	std	Y+2, r20	; 0x02
   1a040:	c3 50       	subi	r28, 0x03	; 3
   1a042:	d1 40       	sbci	r29, 0x01	; 1
   1a044:	c1 5f       	subi	r28, 0xF1	; 241
   1a046:	de 4f       	sbci	r29, 0xFE	; 254
   1a048:	c8 80       	ld	r12, Y
   1a04a:	d9 80       	ldd	r13, Y+1	; 0x01
   1a04c:	ea 80       	ldd	r14, Y+2	; 0x02
   1a04e:	fb 80       	ldd	r15, Y+3	; 0x03
   1a050:	cf 50       	subi	r28, 0x0F	; 15
   1a052:	d1 40       	sbci	r29, 0x01	; 1
   1a054:	c4 0c       	add	r12, r4
   1a056:	d5 1c       	adc	r13, r5
   1a058:	e6 1c       	adc	r14, r6
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a05a:	f7 1c       	adc	r15, r7
   1a05c:	c5 5f       	subi	r28, 0xF5	; 245
   1a05e:	de 4f       	sbci	r29, 0xFE	; 254
   1a060:	28 81       	ld	r18, Y
   1a062:	39 81       	ldd	r19, Y+1	; 0x01
   1a064:	4a 81       	ldd	r20, Y+2	; 0x02
   1a066:	5b 81       	ldd	r21, Y+3	; 0x03
   1a068:	cb 50       	subi	r28, 0x0B	; 11
   1a06a:	d1 40       	sbci	r29, 0x01	; 1
   1a06c:	42 16       	cp	r4, r18
   1a06e:	53 06       	cpc	r5, r19
   1a070:	64 06       	cpc	r6, r20
   1a072:	75 06       	cpc	r7, r21
   1a074:	0c f0       	brlt	.+2      	; 0x1a078 <lif_create_volume+0x546>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a076:	59 c0       	rjmp	.+178    	; 0x1a12a <lif_create_volume+0x5f8>
   1a078:	00 e0       	ldi	r16, 0x00	; 0
   1a07a:	11 e0       	ldi	r17, 0x01	; 1
   1a07c:	c9 5f       	subi	r28, 0xF9	; 249
   1a07e:	de 4f       	sbci	r29, 0xFE	; 254
   1a080:	28 81       	ld	r18, Y
   1a082:	39 81       	ldd	r19, Y+1	; 0x01
   1a084:	4a 81       	ldd	r20, Y+2	; 0x02
   1a086:	5b 81       	ldd	r21, Y+3	; 0x03
   1a088:	c7 50       	subi	r28, 0x07	; 7
   1a08a:	d1 40       	sbci	r29, 0x01	; 1
   1a08c:	be 01       	movw	r22, r28
   1a08e:	6f 5f       	subi	r22, 0xFF	; 255
   1a090:	7f 4f       	sbci	r23, 0xFF	; 255
   1a092:	c5 01       	movw	r24, r10
   1a094:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <lif_write>
   1a098:	09 2e       	mov	r0, r25
   1a09a:	00 0c       	add	r0, r0
   1a09c:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a09e:	bb 0b       	sbc	r27, r27
   1a0a0:	8f 3f       	cpi	r24, 0xFF	; 255
   1a0a2:	91 05       	cpc	r25, r1
   1a0a4:	a1 05       	cpc	r26, r1
   1a0a6:	b1 05       	cpc	r27, r1
   1a0a8:	09 f0       	breq	.+2      	; 0x1a0ac <lif_create_volume+0x57a>
   1a0aa:	0c f4       	brge	.+2      	; 0x1a0ae <lif_create_volume+0x57c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a0ac:	5a c0       	rjmp	.+180    	; 0x1a162 <lif_create_volume+0x630>
   1a0ae:	c9 5f       	subi	r28, 0xF9	; 249
   1a0b0:	de 4f       	sbci	r29, 0xFE	; 254
   1a0b2:	28 81       	ld	r18, Y
   1a0b4:	39 81       	ldd	r19, Y+1	; 0x01
   1a0b6:	4a 81       	ldd	r20, Y+2	; 0x02
   1a0b8:	5b 81       	ldd	r21, Y+3	; 0x03
   1a0ba:	c7 50       	subi	r28, 0x07	; 7
   1a0bc:	d1 40       	sbci	r29, 0x01	; 1
   1a0be:	28 0f       	add	r18, r24
   1a0c0:	39 1f       	adc	r19, r25
   1a0c2:	4a 1f       	adc	r20, r26
   1a0c4:	5b 1f       	adc	r21, r27
   1a0c6:	c9 5f       	subi	r28, 0xF9	; 249
   1a0c8:	de 4f       	sbci	r29, 0xFE	; 254
   1a0ca:	28 83       	st	Y, r18
   1a0cc:	39 83       	std	Y+1, r19	; 0x01
   1a0ce:	4a 83       	std	Y+2, r20	; 0x02
   1a0d0:	5b 83       	std	Y+3, r21	; 0x03
   1a0d2:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   1a0d4:	d1 40       	sbci	r29, 0x01	; 1
   1a0d6:	c7 01       	movw	r24, r14
   1a0d8:	b6 01       	movw	r22, r12
   1a0da:	24 e6       	ldi	r18, 0x64	; 100
   1a0dc:	30 e0       	ldi	r19, 0x00	; 0
   1a0de:	40 e0       	ldi	r20, 0x00	; 0
   1a0e0:	50 e0       	ldi	r21, 0x00	; 0
   1a0e2:	0e 94 ce e4 	call	0x1c99c	; 0x1c99c <__divmodsi4>
   1a0e6:	67 2b       	or	r22, r23
   1a0e8:	68 2b       	or	r22, r24
   1a0ea:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   1a0ec:	c1 f4       	brne	.+48     	; 0x1a11e <lif_create_volume+0x5ec>
   1a0ee:	ff 92       	push	r15
   1a0f0:	ef 92       	push	r14
   1a0f2:	df 92       	push	r13
   1a0f4:	cf 92       	push	r12
   1a0f6:	1f 92       	push	r1
   1a0f8:	cc 5f       	subi	r28, 0xFC	; 252
   1a0fa:	de 4f       	sbci	r29, 0xFE	; 254
   1a0fc:	38 81       	ld	r19, Y
   1a0fe:	c4 50       	subi	r28, 0x04	; 4
   1a100:	d1 40       	sbci	r29, 0x01	; 1
   1a102:	3f 93       	push	r19
   1a104:	cd 5f       	subi	r28, 0xFD	; 253
   1a106:	de 4f       	sbci	r29, 0xFE	; 254
   1a108:	48 81       	ld	r20, Y
   1a10a:	c3 50       	subi	r28, 0x03	; 3
   1a10c:	d1 40       	sbci	r29, 0x01	; 1
   1a10e:	4f 93       	push	r20
   1a110:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1a114:	0f b6       	in	r0, 0x3f	; 63
   1a116:	f8 94       	cli
   1a118:	de bf       	out	0x3e, r29	; 62
   1a11a:	0f be       	out	0x3f, r0	; 63
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a11c:	cd bf       	out	0x3d, r28	; 61
   1a11e:	9f ef       	ldi	r25, 0xFF	; 255
   1a120:	49 1a       	sub	r4, r25
   1a122:	59 0a       	sbc	r5, r25
   1a124:	69 0a       	sbc	r6, r25
   1a126:	79 0a       	sbc	r7, r25
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   1a128:	8d cf       	rjmp	.-230    	; 0x1a044 <lif_create_volume+0x512>
   1a12a:	ff 92       	push	r15
   1a12c:	ef 92       	push	r14
   1a12e:	df 92       	push	r13
   1a130:	cf 92       	push	r12
   1a132:	82 ea       	ldi	r24, 0xA2	; 162
   1a134:	9b e3       	ldi	r25, 0x3B	; 59
   1a136:	1f 92       	push	r1
   1a138:	9f 93       	push	r25
   1a13a:	8f 93       	push	r24
   1a13c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   1a140:	8f ef       	ldi	r24, 0xFF	; 255
   1a142:	9f ef       	ldi	r25, 0xFF	; 255
   1a144:	d5 01       	movw	r26, r10
   1a146:	91 96       	adiw	r26, 0x21	; 33
   1a148:	9c 93       	st	X, r25
   1a14a:	8e 93       	st	-X, r24
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1a14c:	90 97       	sbiw	r26, 0x20	; 32
   1a14e:	c5 01       	movw	r24, r10
   1a150:	0e 94 a5 c8 	call	0x1914a	; 0x1914a <lif_check_volume>
   1a154:	0f b6       	in	r0, 0x3f	; 63
   1a156:	f8 94       	cli
   1a158:	de bf       	out	0x3e, r29	; 62
   1a15a:	0f be       	out	0x3f, r0	; 63
   1a15c:	cd bf       	out	0x3d, r28	; 61
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a15e:	89 2b       	or	r24, r25
   1a160:	19 f4       	brne	.+6      	; 0x1a168 <lif_create_volume+0x636>
   1a162:	c5 01       	movw	r24, r10
   1a164:	80 da       	rcall	.-2816   	; 0x19666 <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   1a166:	08 c0       	rjmp	.+16     	; 0x1a178 <lif_create_volume+0x646>
   1a168:	c5 01       	movw	r24, r10
   1a16a:	db db       	rcall	.-2122   	; 0x19922 <lif_updatefree>
   1a16c:	7c 01       	movw	r14, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a16e:	89 2b       	or	r24, r25
   1a170:	31 f4       	brne	.+12     	; 0x1a17e <lif_create_volume+0x64c>
   1a172:	c5 01       	movw	r24, r10

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1a174:	78 da       	rcall	.-2832   	; 0x19666 <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1a176:	04 c0       	rjmp	.+8      	; 0x1a180 <lif_create_volume+0x64e>
   1a178:	e1 2c       	mov	r14, r1
   1a17a:	f1 2c       	mov	r15, r1
   1a17c:	01 c0       	rjmp	.+2      	; 0x1a180 <lif_create_volume+0x64e>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1a17e:	75 01       	movw	r14, r10
   1a180:	c7 01       	movw	r24, r14
   1a182:	ca 5e       	subi	r28, 0xEA	; 234
   1a184:	de 4f       	sbci	r29, 0xFE	; 254
   1a186:	e2 e1       	ldi	r30, 0x12	; 18
   1a188:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0001a18c <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1a18c:	ac e0       	ldi	r26, 0x0C	; 12
   1a18e:	b0 e0       	ldi	r27, 0x00	; 0
   1a190:	ec ec       	ldi	r30, 0xCC	; 204
   1a192:	f0 ed       	ldi	r31, 0xD0	; 208
   1a194:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
   1a198:	9c 87       	std	Y+12, r25	; 0x0c
   1a19a:	8b 87       	std	Y+11, r24	; 0x0b
   1a19c:	6a 01       	movw	r12, r20
   1a19e:	7b 01       	movw	r14, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   1a1a0:	fc 01       	movw	r30, r24
   1a1a2:	84 84       	ldd	r8, Z+12	; 0x0c
   1a1a4:	95 84       	ldd	r9, Z+13	; 0x0d
   1a1a6:	a6 84       	ldd	r10, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   1a1a8:	b7 84       	ldd	r11, Z+15	; 0x0f
   1a1aa:	bb db       	rcall	.-2186   	; 0x19922 <lif_updatefree>
   1a1ac:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1a1ae:	b1 f4       	brne	.+44     	; 0x1a1dc <lif_newdir+0x50>
   1a1b0:	ff 92       	push	r15
   1a1b2:	ef 92       	push	r14
   1a1b4:	df 92       	push	r13
   1a1b6:	cf 92       	push	r12
   1a1b8:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a1ba:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a1bc:	83 8d       	ldd	r24, Z+27	; 0x1b
   1a1be:	8f 93       	push	r24
   1a1c0:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a1c2:	8f 93       	push	r24
   1a1c4:	81 8d       	ldd	r24, Z+25	; 0x19
   1a1c6:	8f 93       	push	r24
   1a1c8:	80 8d       	ldd	r24, Z+24	; 0x18
   1a1ca:	8f 93       	push	r24
   1a1cc:	83 ec       	ldi	r24, 0xC3	; 195
   1a1ce:	9a e3       	ldi	r25, 0x3A	; 58
   1a1d0:	1f 92       	push	r1
   1a1d2:	9f 93       	push	r25
   1a1d4:	8f 93       	push	r24
   1a1d6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1a1da:	2c c0       	rjmp	.+88     	; 0x1a234 <lif_newdir+0xa8>
   1a1dc:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a1de:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a1e0:	80 8d       	ldd	r24, Z+24	; 0x18
   1a1e2:	91 8d       	ldd	r25, Z+25	; 0x19
   1a1e4:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a1e6:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a1e8:	8c 15       	cp	r24, r12
   1a1ea:	9d 05       	cpc	r25, r13
   1a1ec:	ae 05       	cpc	r26, r14
   1a1ee:	bf 05       	cpc	r27, r15
   1a1f0:	b4 f0       	brlt	.+44     	; 0x1a21e <lif_newdir+0x92>
   1a1f2:	44 24       	eor	r4, r4
   1a1f4:	43 94       	inc	r4
   1a1f6:	51 2c       	mov	r5, r1
   1a1f8:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a1fa:	71 2c       	mov	r7, r1
   1a1fc:	e6 5a       	subi	r30, 0xA6	; 166
   1a1fe:	ff 4f       	sbci	r31, 0xFF	; 255
   1a200:	fc 83       	std	Y+4, r31	; 0x04
   1a202:	eb 83       	std	Y+3, r30	; 0x03
   1a204:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a206:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a208:	84 5a       	subi	r24, 0xA4	; 164
   1a20a:	9f 4f       	sbci	r25, 0xFF	; 255
   1a20c:	9a 83       	std	Y+2, r25	; 0x02
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a20e:	89 83       	std	Y+1, r24	; 0x01
   1a210:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a212:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a214:	e0 5a       	subi	r30, 0xA0	; 160
   1a216:	ff 4f       	sbci	r31, 0xFF	; 255
   1a218:	fe 83       	std	Y+6, r31	; 0x06
   1a21a:	ed 83       	std	Y+5, r30	; 0x05
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1a21c:	23 c0       	rjmp	.+70     	; 0x1a264 <lif_newdir+0xd8>
   1a21e:	bf 93       	push	r27
   1a220:	af 93       	push	r26
   1a222:	9f 93       	push	r25
   1a224:	8f 93       	push	r24
   1a226:	8a e9       	ldi	r24, 0x9A	; 154
   1a228:	9a e3       	ldi	r25, 0x3A	; 58
   1a22a:	1f 92       	push	r1
   1a22c:	9f 93       	push	r25
   1a22e:	8f 93       	push	r24
   1a230:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(-1);
   1a234:	0f b6       	in	r0, 0x3f	; 63
   1a236:	f8 94       	cli
   1a238:	de bf       	out	0x3e, r29	; 62
   1a23a:	0f be       	out	0x3f, r0	; 63
   1a23c:	cd bf       	out	0x3d, r28	; 61
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a23e:	05 c1       	rjmp	.+522    	; 0x1a44a <lif_newdir+0x2be>
   1a240:	eb 81       	ldd	r30, Y+3	; 0x03
   1a242:	fc 81       	ldd	r31, Y+4	; 0x04
   1a244:	80 81       	ld	r24, Z
   1a246:	91 81       	ldd	r25, Z+1	; 0x01
   1a248:	8f 3f       	cpi	r24, 0xFF	; 255
   1a24a:	ff ef       	ldi	r31, 0xFF	; 255
   1a24c:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   1a24e:	a1 f0       	breq	.+40     	; 0x1a278 <lif_newdir+0xec>
   1a250:	89 2b       	or	r24, r25
   1a252:	09 f0       	breq	.+2      	; 0x1a256 <lif_newdir+0xca>
        {
            if(freestate == 0)
   1a254:	d0 c0       	rjmp	.+416    	; 0x1a3f6 <lif_newdir+0x26a>
   1a256:	61 14       	cp	r6, r1
   1a258:	71 04       	cpc	r7, r1
   1a25a:	09 f4       	brne	.+2      	; 0x1a25e <lif_newdir+0xd2>
   1a25c:	c3 c0       	rjmp	.+390    	; 0x1a3e4 <lif_newdir+0x258>
   1a25e:	9f ef       	ldi	r25, 0xFF	; 255
   1a260:	49 1a       	sub	r4, r25
   1a262:	59 0a       	sbc	r5, r25
   1a264:	82 01       	movw	r16, r4
   1a266:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a268:	11 09       	sbc	r17, r1
   1a26a:	b8 01       	movw	r22, r16
   1a26c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a26e:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a270:	7b da       	rcall	.-2826   	; 0x19768 <lif_readdirindex>
   1a272:	89 2b       	or	r24, r25
   1a274:	29 f7       	brne	.-54     	; 0x1a240 <lif_newdir+0xb4>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   1a276:	e9 c0       	rjmp	.+466    	; 0x1a44a <lif_newdir+0x2be>
   1a278:	22 e0       	ldi	r18, 0x02	; 2
   1a27a:	62 16       	cp	r6, r18
   1a27c:	71 04       	cpc	r7, r1
   1a27e:	09 f0       	breq	.+2      	; 0x1a282 <lif_newdir+0xf6>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   1a280:	46 c0       	rjmp	.+140    	; 0x1a30e <lif_newdir+0x182>
   1a282:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a284:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a286:	0e 94 03 c7 	call	0x18e06	; 0x18e06 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a28a:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a28c:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a28e:	e4 5a       	subi	r30, 0xA4	; 164
   1a290:	ff 4f       	sbci	r31, 0xFF	; 255
   1a292:	8f 81       	ldd	r24, Y+7	; 0x07
   1a294:	80 83       	st	Z, r24
   1a296:	98 85       	ldd	r25, Y+8	; 0x08
   1a298:	91 83       	std	Z+1, r25	; 0x01
   1a29a:	29 85       	ldd	r18, Y+9	; 0x09
   1a29c:	22 83       	std	Z+2, r18	; 0x02
   1a29e:	8a 85       	ldd	r24, Y+10	; 0x0a
                LIF->DIR.FileSectors = sectors;
   1a2a0:	83 83       	std	Z+3, r24	; 0x03
   1a2a2:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a2a4:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a2a6:	e0 5a       	subi	r30, 0xA0	; 160
   1a2a8:	ff 4f       	sbci	r31, 0xFF	; 255
   1a2aa:	c0 82       	st	Z, r12
   1a2ac:	d1 82       	std	Z+1, r13	; 0x01
   1a2ae:	e2 82       	std	Z+2, r14	; 0x02
                LIF->usedsectors += sectors;
   1a2b0:	f3 82       	std	Z+3, r15	; 0x03
   1a2b2:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a2b4:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a2b6:	84 89       	ldd	r24, Z+20	; 0x14
   1a2b8:	95 89       	ldd	r25, Z+21	; 0x15
   1a2ba:	a6 89       	ldd	r26, Z+22	; 0x16
   1a2bc:	b7 89       	ldd	r27, Z+23	; 0x17
   1a2be:	8c 0d       	add	r24, r12
   1a2c0:	9d 1d       	adc	r25, r13
   1a2c2:	ae 1d       	adc	r26, r14
   1a2c4:	bf 1d       	adc	r27, r15
   1a2c6:	84 8b       	std	Z+20, r24	; 0x14
   1a2c8:	95 8b       	std	Z+21, r25	; 0x15
   1a2ca:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   1a2cc:	b7 8b       	std	Z+23, r27	; 0x17
   1a2ce:	80 8d       	ldd	r24, Z+24	; 0x18
   1a2d0:	91 8d       	ldd	r25, Z+25	; 0x19
   1a2d2:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a2d4:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a2d6:	8c 19       	sub	r24, r12
   1a2d8:	9d 09       	sbc	r25, r13
   1a2da:	ae 09       	sbc	r26, r14
   1a2dc:	bf 09       	sbc	r27, r15
   1a2de:	80 8f       	std	Z+24, r24	; 0x18
   1a2e0:	91 8f       	std	Z+25, r25	; 0x19
   1a2e2:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1a2e4:	b3 8f       	std	Z+27, r27	; 0x1b
   1a2e6:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a2e8:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a2ea:	01 96       	adiw	r24, 0x01	; 1
   1a2ec:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   1a2ee:	84 8f       	std	Z+28, r24	; 0x1c
   1a2f0:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a2f2:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a2f4:	01 97       	sbiw	r24, 0x01	; 1
   1a2f6:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1a2f8:	86 8f       	std	Z+30, r24	; 0x1e
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a2fa:	20 a2       	std	Z+32, r2	; 0x20
   1a2fc:	31 a2       	std	Z+33, r3	; 0x21
   1a2fe:	b1 01       	movw	r22, r2
   1a300:	cf 01       	movw	r24, r30
   1a302:	9b da       	rcall	.-2762   	; 0x1983a <lif_writedirindex>
   1a304:	89 2b       	or	r24, r25
   1a306:	09 f4       	brne	.+2      	; 0x1a30a <lif_newdir+0x17e>
   1a308:	a0 c0       	rjmp	.+320    	; 0x1a44a <lif_newdir+0x2be>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & 0x400)
   1a30a:	c1 01       	movw	r24, r2
   1a30c:	a0 c0       	rjmp	.+320    	; 0x1a44e <lif_newdir+0x2c2>
   1a30e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a312:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   1a316:	92 ff       	sbrs	r25, 2
   1a318:	20 c0       	rjmp	.+64     	; 0x1a35a <lif_newdir+0x1ce>
   1a31a:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a31c:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a31e:	83 8d       	ldd	r24, Z+27	; 0x1b
   1a320:	8f 93       	push	r24
   1a322:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a324:	8f 93       	push	r24
   1a326:	81 8d       	ldd	r24, Z+25	; 0x19
   1a328:	8f 93       	push	r24
   1a32a:	80 8d       	ldd	r24, Z+24	; 0x18
   1a32c:	8f 93       	push	r24
   1a32e:	ff 92       	push	r15
   1a330:	ef 92       	push	r14
   1a332:	df 92       	push	r13
   1a334:	cf 92       	push	r12
   1a336:	bf 92       	push	r11
   1a338:	af 92       	push	r10
   1a33a:	9f 92       	push	r9
   1a33c:	8f 92       	push	r8
   1a33e:	1f 93       	push	r17
   1a340:	0f 93       	push	r16
   1a342:	89 e4       	ldi	r24, 0x49	; 73
   1a344:	9a e3       	ldi	r25, 0x3A	; 58
   1a346:	1f 92       	push	r1
   1a348:	9f 93       	push	r25
   1a34a:	8f 93       	push	r24
   1a34c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1a350:	0f b6       	in	r0, 0x3f	; 63
   1a352:	f8 94       	cli
   1a354:	de bf       	out	0x3e, r29	; 62
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a356:	0f be       	out	0x3f, r0	; 63
   1a358:	cd bf       	out	0x3d, r28	; 61
   1a35a:	b8 01       	movw	r22, r16
   1a35c:	6f 5f       	subi	r22, 0xFF	; 255
   1a35e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a360:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a362:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a364:	c6 da       	rcall	.-2676   	; 0x198f2 <lif_writedirEOF>
   1a366:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   1a368:	09 f4       	brne	.+2      	; 0x1a36c <lif_newdir+0x1e0>
   1a36a:	6f c0       	rjmp	.+222    	; 0x1a44a <lif_newdir+0x2be>
   1a36c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a36e:	9c 85       	ldd	r25, Y+12	; 0x0c
            LIF->DIR.FileStartSector = start;
   1a370:	0e 94 03 c7 	call	0x18e06	; 0x18e06 <lif_dir_clear>
   1a374:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a376:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a378:	e4 5a       	subi	r30, 0xA4	; 164
   1a37a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a37c:	80 82       	st	Z, r8
   1a37e:	91 82       	std	Z+1, r9	; 0x01
            LIF->DIR.FileSectors = sectors;
   1a380:	a2 82       	std	Z+2, r10	; 0x02
   1a382:	b3 82       	std	Z+3, r11	; 0x03
   1a384:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a386:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a388:	e0 5a       	subi	r30, 0xA0	; 160
   1a38a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a38c:	c0 82       	st	Z, r12
   1a38e:	d1 82       	std	Z+1, r13	; 0x01
            LIF->usedsectors += sectors;
   1a390:	e2 82       	std	Z+2, r14	; 0x02
   1a392:	f3 82       	std	Z+3, r15	; 0x03
   1a394:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a396:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a398:	84 89       	ldd	r24, Z+20	; 0x14
   1a39a:	95 89       	ldd	r25, Z+21	; 0x15
   1a39c:	a6 89       	ldd	r26, Z+22	; 0x16
   1a39e:	b7 89       	ldd	r27, Z+23	; 0x17
   1a3a0:	8c 0d       	add	r24, r12
   1a3a2:	9d 1d       	adc	r25, r13
   1a3a4:	ae 1d       	adc	r26, r14
   1a3a6:	bf 1d       	adc	r27, r15
   1a3a8:	84 8b       	std	Z+20, r24	; 0x14
   1a3aa:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   1a3ac:	a6 8b       	std	Z+22, r26	; 0x16
   1a3ae:	b7 8b       	std	Z+23, r27	; 0x17
   1a3b0:	80 8d       	ldd	r24, Z+24	; 0x18
   1a3b2:	91 8d       	ldd	r25, Z+25	; 0x19
   1a3b4:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a3b6:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a3b8:	8c 19       	sub	r24, r12
   1a3ba:	9d 09       	sbc	r25, r13
   1a3bc:	ae 09       	sbc	r26, r14
   1a3be:	bf 09       	sbc	r27, r15
   1a3c0:	80 8f       	std	Z+24, r24	; 0x18
   1a3c2:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   1a3c4:	a2 8f       	std	Z+26, r26	; 0x1a
   1a3c6:	b3 8f       	std	Z+27, r27	; 0x1b
   1a3c8:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a3ca:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   1a3cc:	01 96       	adiw	r24, 0x01	; 1
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a3ce:	95 8f       	std	Z+29, r25	; 0x1d
   1a3d0:	84 8f       	std	Z+28, r24	; 0x1c
   1a3d2:	11 a3       	std	Z+33, r17	; 0x21
   1a3d4:	00 a3       	std	Z+32, r16	; 0x20
   1a3d6:	b8 01       	movw	r22, r16
   1a3d8:	cf 01       	movw	r24, r30
   1a3da:	2f da       	rcall	.-2978   	; 0x1983a <lif_writedirindex>
   1a3dc:	89 2b       	or	r24, r25


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a3de:	a9 f1       	breq	.+106    	; 0x1a44a <lif_newdir+0x2be>
   1a3e0:	c8 01       	movw	r24, r16
   1a3e2:	35 c0       	rjmp	.+106    	; 0x1a44e <lif_newdir+0x2c2>
   1a3e4:	8f 82       	std	Y+7, r8	; 0x07
   1a3e6:	98 86       	std	Y+8, r9	; 0x08
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a3e8:	a9 86       	std	Y+9, r10	; 0x09
   1a3ea:	ba 86       	std	Y+10, r11	; 0x0a
   1a3ec:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   1a3ee:	66 24       	eor	r6, r6
        }
        

        // VALID record
        if(freestate == 1)
   1a3f0:	63 94       	inc	r6
   1a3f2:	71 2c       	mov	r7, r1
   1a3f4:	34 cf       	rjmp	.-408    	; 0x1a25e <lif_newdir+0xd2>
   1a3f6:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a3f8:	6f 16       	cp	r6, r31
   1a3fa:	71 04       	cpc	r7, r1
   1a3fc:	a9 f4       	brne	.+42     	; 0x1a428 <lif_newdir+0x29c>
   1a3fe:	e9 81       	ldd	r30, Y+1	; 0x01
   1a400:	fa 81       	ldd	r31, Y+2	; 0x02
   1a402:	80 81       	ld	r24, Z
   1a404:	91 81       	ldd	r25, Z+1	; 0x01
   1a406:	a2 81       	ldd	r26, Z+2	; 0x02
   1a408:	b3 81       	ldd	r27, Z+3	; 0x03
   1a40a:	88 19       	sub	r24, r8
   1a40c:	99 09       	sbc	r25, r9
   1a40e:	aa 09       	sbc	r26, r10
   1a410:	bb 09       	sbc	r27, r11
   1a412:	8c 15       	cp	r24, r12
   1a414:	9d 05       	cpc	r25, r13
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   1a416:	ae 05       	cpc	r26, r14
   1a418:	bf 05       	cpc	r27, r15
   1a41a:	1c f4       	brge	.+6      	; 0x1a422 <lif_newdir+0x296>
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   1a41c:	61 2c       	mov	r6, r1
   1a41e:	71 2c       	mov	r7, r1
   1a420:	03 c0       	rjmp	.+6      	; 0x1a428 <lif_newdir+0x29c>
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a422:	82 e0       	ldi	r24, 0x02	; 2
   1a424:	68 2e       	mov	r6, r24
   1a426:	71 2c       	mov	r7, r1
   1a428:	e9 81       	ldd	r30, Y+1	; 0x01
   1a42a:	fa 81       	ldd	r31, Y+2	; 0x02
   1a42c:	80 80       	ld	r8, Z
   1a42e:	91 80       	ldd	r9, Z+1	; 0x01
   1a430:	a2 80       	ldd	r10, Z+2	; 0x02
   1a432:	b3 80       	ldd	r11, Z+3	; 0x03
   1a434:	ed 81       	ldd	r30, Y+5	; 0x05
   1a436:	fe 81       	ldd	r31, Y+6	; 0x06
   1a438:	80 81       	ld	r24, Z
   1a43a:	91 81       	ldd	r25, Z+1	; 0x01
   1a43c:	a2 81       	ldd	r26, Z+2	; 0x02
   1a43e:	b3 81       	ldd	r27, Z+3	; 0x03
   1a440:	88 0e       	add	r8, r24
   1a442:	99 1e       	adc	r9, r25
        ++index;
    }
    // ERROR
    return(-1);
   1a444:	aa 1e       	adc	r10, r26
   1a446:	bb 1e       	adc	r11, r27
}
   1a448:	0a cf       	rjmp	.-492    	; 0x1a25e <lif_newdir+0xd2>
   1a44a:	8f ef       	ldi	r24, 0xFF	; 255
   1a44c:	9f ef       	ldi	r25, 0xFF	; 255
   1a44e:	2c 96       	adiw	r28, 0x0c	; 12
   1a450:	e2 e1       	ldi	r30, 0x12	; 18
   1a452:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0001a456 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a456:	a0 e3       	ldi	r26, 0x30	; 48
   1a458:	b1 e0       	ldi	r27, 0x01	; 1
   1a45a:	e1 e3       	ldi	r30, 0x31	; 49
   1a45c:	f2 ed       	ldi	r31, 0xD2	; 210
   1a45e:	0c 94 36 e5 	jmp	0x1ca6c	; 0x1ca6c <__prologue_saves__+0x10>
   1a462:	b8 2e       	mov	r11, r24
   1a464:	a9 2e       	mov	r10, r25
   1a466:	6b 01       	movw	r12, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   1a468:	be 01       	movw	r22, r28
   1a46a:	6f 5f       	subi	r22, 0xFF	; 255
   1a46c:	7e 4f       	sbci	r23, 0xFE	; 254
   1a46e:	0e 94 3d c2 	call	0x1847a	; 0x1847a <lif_stat>
   1a472:	8c 01       	movw	r16, r24
    if(sp == NULL)
   1a474:	00 97       	sbiw	r24, 0x00	; 0
   1a476:	09 f1       	breq	.+66     	; 0x1a4ba <lif_open_volume+0x64>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a478:	fc 01       	movw	r30, r24
   1a47a:	80 8d       	ldd	r24, Z+24	; 0x18
   1a47c:	91 8d       	ldd	r25, Z+25	; 0x19
   1a47e:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a480:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a482:	81 15       	cp	r24, r1
   1a484:	f2 e0       	ldi	r31, 0x02	; 2
   1a486:	9f 07       	cpc	r25, r31
   1a488:	a1 05       	cpc	r26, r1
   1a48a:	b1 05       	cpc	r27, r1
   1a48c:	c8 f4       	brcc	.+50     	; 0x1a4c0 <lif_open_volume+0x6a>
    {
        if(debuglevel & 1)
   1a48e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a492:	20 ff       	sbrs	r18, 0
   1a494:	12 c0       	rjmp	.+36     	; 0x1a4ba <lif_open_volume+0x64>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a496:	bf 93       	push	r27
   1a498:	af 93       	push	r26
   1a49a:	9f 93       	push	r25
   1a49c:	8f 93       	push	r24
   1a49e:	af 92       	push	r10
   1a4a0:	bf 92       	push	r11
   1a4a2:	8a e0       	ldi	r24, 0x0A	; 10
   1a4a4:	9a e3       	ldi	r25, 0x3A	; 58
   1a4a6:	1f 92       	push	r1
   1a4a8:	9f 93       	push	r25
   1a4aa:	8f 93       	push	r24
   1a4ac:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1a4b0:	0f b6       	in	r0, 0x3f	; 63
   1a4b2:	f8 94       	cli
   1a4b4:	de bf       	out	0x3e, r29	; 62
   1a4b6:	0f be       	out	0x3f, r0	; 63
   1a4b8:	cd bf       	out	0x3d, r28	; 61
        return(NULL);
   1a4ba:	00 e0       	ldi	r16, 0x00	; 0
   1a4bc:	10 e0       	ldi	r17, 0x00	; 0
   1a4be:	c5 c0       	rjmp	.+394    	; 0x1a64a <lif_open_volume+0x1f4>
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a4c0:	64 e7       	ldi	r22, 0x74	; 116
   1a4c2:	70 e0       	ldi	r23, 0x00	; 0
   1a4c4:	80 e0       	ldi	r24, 0x00	; 0
   1a4c6:	90 e0       	ldi	r25, 0x00	; 0
   1a4c8:	0e 94 ba c1 	call	0x18374	; 0x18374 <lif_calloc>
   1a4cc:	7c 01       	movw	r14, r24
    if(!LIF)
   1a4ce:	89 2b       	or	r24, r25
   1a4d0:	a1 f3       	breq	.-24     	; 0x1a4ba <lif_open_volume+0x64>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a4d2:	8b 2d       	mov	r24, r11
   1a4d4:	9a 2d       	mov	r25, r10
   1a4d6:	0e 94 f6 c1 	call	0x183ec	; 0x183ec <lif_stralloc>
   1a4da:	f7 01       	movw	r30, r14
   1a4dc:	91 83       	std	Z+1, r25	; 0x01
   1a4de:	80 83       	st	Z, r24
    if(!LIF->name)
   1a4e0:	00 97       	sbiw	r24, 0x00	; 0
   1a4e2:	09 f4       	brne	.+2      	; 0x1a4e6 <lif_open_volume+0x90>
   1a4e4:	5a c0       	rjmp	.+180    	; 0x1a59a <lif_open_volume+0x144>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   1a4e6:	f8 01       	movw	r30, r16
   1a4e8:	00 8d       	ldd	r16, Z+24	; 0x18
   1a4ea:	11 8d       	ldd	r17, Z+25	; 0x19
   1a4ec:	22 8d       	ldd	r18, Z+26	; 0x1a
   1a4ee:	33 8d       	ldd	r19, Z+27	; 0x1b
   1a4f0:	f7 01       	movw	r30, r14
   1a4f2:	00 87       	std	Z+8, r16	; 0x08
   1a4f4:	11 87       	std	Z+9, r17	; 0x09
   1a4f6:	22 87       	std	Z+10, r18	; 0x0a
   1a4f8:	33 87       	std	Z+11, r19	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a4fa:	77 27       	eor	r23, r23
   1a4fc:	63 2f       	mov	r22, r19
   1a4fe:	52 2f       	mov	r21, r18
   1a500:	41 2f       	mov	r20, r17
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a502:	00 23       	and	r16, r16
   1a504:	21 f0       	breq	.+8      	; 0x1a50e <lif_open_volume+0xb8>
        ++sectors;
   1a506:	4f 5f       	subi	r20, 0xFF	; 255
   1a508:	5f 4f       	sbci	r21, 0xFF	; 255
   1a50a:	6f 4f       	sbci	r22, 0xFF	; 255
   1a50c:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a50e:	f7 01       	movw	r30, r14
   1a510:	44 83       	std	Z+4, r20	; 0x04
   1a512:	55 83       	std	Z+5, r21	; 0x05
   1a514:	66 83       	std	Z+6, r22	; 0x06
   1a516:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a518:	b6 01       	movw	r22, r12
   1a51a:	0e 94 15 c2 	call	0x1842a	; 0x1842a <lif_open>
   1a51e:	f7 01       	movw	r30, r14
   1a520:	93 83       	std	Z+3, r25	; 0x03
   1a522:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a524:	89 2b       	or	r24, r25
   1a526:	c9 f1       	breq	.+114    	; 0x1a59a <lif_open_volume+0x144>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a528:	00 e0       	ldi	r16, 0x00	; 0
   1a52a:	11 e0       	ldi	r17, 0x01	; 1
   1a52c:	20 e0       	ldi	r18, 0x00	; 0
   1a52e:	30 e0       	ldi	r19, 0x00	; 0
   1a530:	a9 01       	movw	r20, r18
   1a532:	be 01       	movw	r22, r28
   1a534:	6f 5f       	subi	r22, 0xFF	; 255
   1a536:	7f 4f       	sbci	r23, 0xFF	; 255
   1a538:	c7 01       	movw	r24, r14
   1a53a:	0e 94 9b c2 	call	0x18536	; 0x18536 <lif_read>
   1a53e:	6f 3f       	cpi	r22, 0xFF	; 255
   1a540:	71 05       	cpc	r23, r1
   1a542:	81 05       	cpc	r24, r1
   1a544:	91 05       	cpc	r25, r1
   1a546:	09 f0       	breq	.+2      	; 0x1a54a <lif_open_volume+0xf4>
   1a548:	4c f4       	brge	.+18     	; 0x1a55c <lif_open_volume+0x106>
    {
        if(debuglevel & 1)
   1a54a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a54e:	80 ff       	sbrs	r24, 0
   1a550:	24 c0       	rjmp	.+72     	; 0x1a59a <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a552:	af 92       	push	r10
   1a554:	bf 92       	push	r11
   1a556:	84 ed       	ldi	r24, 0xD4	; 212
   1a558:	99 e3       	ldi	r25, 0x39	; 57
   1a55a:	15 c0       	rjmp	.+42     	; 0x1a586 <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a55c:	b7 01       	movw	r22, r14
   1a55e:	ce 01       	movw	r24, r28
   1a560:	01 96       	adiw	r24, 0x01	; 1
   1a562:	0e 94 b6 c4 	call	0x1896c	; 0x1896c <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   1a566:	c7 01       	movw	r24, r14
   1a568:	0e 94 a5 c8 	call	0x1914a	; 0x1914a <lif_check_volume>
   1a56c:	89 2b       	or	r24, r25
   1a56e:	c1 f4       	brne	.+48     	; 0x1a5a0 <lif_open_volume+0x14a>
    {
        if(debuglevel & 1)
   1a570:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a574:	80 ff       	sbrs	r24, 0
   1a576:	11 c0       	rjmp	.+34     	; 0x1a59a <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a578:	f7 01       	movw	r30, r14
   1a57a:	81 81       	ldd	r24, Z+1	; 0x01
   1a57c:	8f 93       	push	r24
   1a57e:	80 81       	ld	r24, Z
   1a580:	8f 93       	push	r24
   1a582:	81 ea       	ldi	r24, 0xA1	; 161
   1a584:	99 e3       	ldi	r25, 0x39	; 57
   1a586:	1f 92       	push	r1
   1a588:	9f 93       	push	r25
   1a58a:	8f 93       	push	r24
   1a58c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1a590:	0f 90       	pop	r0
   1a592:	0f 90       	pop	r0
   1a594:	0f 90       	pop	r0
   1a596:	0f 90       	pop	r0
   1a598:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a59a:	c7 01       	movw	r24, r14
   1a59c:	64 d8       	rcall	.-3896   	; 0x19666 <lif_close_volume>
   1a59e:	8d cf       	rjmp	.-230    	; 0x1a4ba <lif_open_volume+0x64>
        lif_closedir(LIF);
        return(NULL);
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a5a0:	f7 01       	movw	r30, r14
   1a5a2:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a5a4:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a5a6:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a5a8:	70 a9       	ldd	r23, Z+48	; 0x30
   1a5aa:	85 a9       	ldd	r24, Z+53	; 0x35
   1a5ac:	96 a9       	ldd	r25, Z+54	; 0x36
   1a5ae:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a5b0:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a5b2:	48 0f       	add	r20, r24
   1a5b4:	59 1f       	adc	r21, r25
   1a5b6:	6a 1f       	adc	r22, r26
   1a5b8:	7b 1f       	adc	r23, r27
   1a5ba:	44 87       	std	Z+12, r20	; 0x0c
   1a5bc:	55 87       	std	Z+13, r21	; 0x0d
   1a5be:	66 87       	std	Z+14, r22	; 0x0e
   1a5c0:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a5c2:	84 81       	ldd	r24, Z+4	; 0x04
   1a5c4:	95 81       	ldd	r25, Z+5	; 0x05
   1a5c6:	a6 81       	ldd	r26, Z+6	; 0x06
   1a5c8:	b7 81       	ldd	r27, Z+7	; 0x07
   1a5ca:	84 1b       	sub	r24, r20
   1a5cc:	95 0b       	sbc	r25, r21
   1a5ce:	a6 0b       	sbc	r26, r22
   1a5d0:	b7 0b       	sbc	r27, r23
   1a5d2:	80 8b       	std	Z+16, r24	; 0x10
   1a5d4:	91 8b       	std	Z+17, r25	; 0x11
   1a5d6:	a2 8b       	std	Z+18, r26	; 0x12
   1a5d8:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a5da:	80 8f       	std	Z+24, r24	; 0x18
   1a5dc:	91 8f       	std	Z+25, r25	; 0x19
   1a5de:	a2 8f       	std	Z+26, r26	; 0x1a
   1a5e0:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a5e2:	14 8a       	std	Z+20, r1	; 0x14
   1a5e4:	15 8a       	std	Z+21, r1	; 0x15
   1a5e6:	16 8a       	std	Z+22, r1	; 0x16
   1a5e8:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a5ea:	17 8e       	std	Z+31, r1	; 0x1f
   1a5ec:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a5ee:	15 8e       	std	Z+29, r1	; 0x1d
   1a5f0:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a5f2:	11 a2       	std	Z+33, r1	; 0x21
   1a5f4:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a5f6:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1a5f8:	12 a2       	std	Z+34, r1	; 0x22
   1a5fa:	c7 01       	movw	r24, r14
   1a5fc:	92 d9       	rcall	.-3292   	; 0x19922 <lif_updatefree>
   1a5fe:	8c 01       	movw	r16, r24
   1a600:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a604:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a608:	01 15       	cp	r16, r1
   1a60a:	11 05       	cpc	r17, r1
    {
        if(debuglevel & 1)
   1a60c:	b1 f4       	brne	.+44     	; 0x1a63a <lif_open_volume+0x1e4>
   1a60e:	80 ff       	sbrs	r24, 0
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a610:	11 c0       	rjmp	.+34     	; 0x1a634 <lif_open_volume+0x1de>
   1a612:	f7 01       	movw	r30, r14
   1a614:	81 81       	ldd	r24, Z+1	; 0x01
   1a616:	8f 93       	push	r24
   1a618:	80 81       	ld	r24, Z
   1a61a:	8f 93       	push	r24
   1a61c:	8e e6       	ldi	r24, 0x6E	; 110
   1a61e:	99 e3       	ldi	r25, 0x39	; 57
   1a620:	1f 92       	push	r1
   1a622:	9f 93       	push	r25
   1a624:	8f 93       	push	r24
   1a626:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1a62a:	0f 90       	pop	r0
   1a62c:	0f 90       	pop	r0
   1a62e:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a630:	0f 90       	pop	r0
   1a632:	0f 90       	pop	r0
   1a634:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a636:	17 d8       	rcall	.-4050   	; 0x19666 <lif_close_volume>
    }

	if(debuglevel &0x400)
   1a638:	08 c0       	rjmp	.+16     	; 0x1a64a <lif_open_volume+0x1f4>
   1a63a:	92 ff       	sbrs	r25, 2
		lif_dump_vol(LIF, "Volume Listing");	
   1a63c:	05 c0       	rjmp	.+10     	; 0x1a648 <lif_open_volume+0x1f2>
   1a63e:	60 ec       	ldi	r22, 0xC0	; 192
   1a640:	75 e1       	ldi	r23, 0x15	; 21
   1a642:	c7 01       	movw	r24, r14
   1a644:	0e 94 12 c7 	call	0x18e24	; 0x18e24 <lif_dump_vol>
    return( LIF );
}
   1a648:	87 01       	movw	r16, r14
   1a64a:	c8 01       	movw	r24, r16
   1a64c:	c0 5d       	subi	r28, 0xD0	; 208
   1a64e:	de 4f       	sbci	r29, 0xFE	; 254
   1a650:	ea e0       	ldi	r30, 0x0A	; 10
   1a652:	0c 94 52 e5 	jmp	0x1caa4	; 0x1caa4 <__epilogue_restores__+0x10>

0001a656 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a656:	a1 e1       	ldi	r26, 0x11	; 17
   1a658:	b0 e0       	ldi	r27, 0x00	; 0
   1a65a:	e1 e3       	ldi	r30, 0x31	; 49
   1a65c:	f3 ed       	ldi	r31, 0xD3	; 211
   1a65e:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a662:	60 e9       	ldi	r22, 0x90	; 144
   1a664:	78 e0       	ldi	r23, 0x08	; 8
   1a666:	f7 de       	rcall	.-530    	; 0x1a456 <lif_open_volume>
   1a668:	99 8b       	std	Y+17, r25	; 0x11
   1a66a:	88 8b       	std	Y+16, r24	; 0x10
    if(LIF == NULL)
   1a66c:	00 97       	sbiw	r24, 0x00	; 0
   1a66e:	09 f4       	brne	.+2      	; 0x1a672 <lif_dir+0x1c>
   1a670:	82 c1       	rjmp	.+772    	; 0x1a976 <lif_dir+0x320>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a672:	fc 01       	movw	r30, r24
   1a674:	86 a1       	ldd	r24, Z+38	; 0x26
   1a676:	88 23       	and	r24, r24
   1a678:	21 f0       	breq	.+8      	; 0x1a682 <lif_dir+0x2c>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a67a:	8f 01       	movw	r16, r30
   1a67c:	0a 5d       	subi	r16, 0xDA	; 218
   1a67e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a680:	02 c0       	rjmp	.+4      	; 0x1a686 <lif_dir+0x30>
    if(!vol[0])
        vol = "<EMPTY>";
   1a682:	02 e7       	ldi	r16, 0x72	; 114
   1a684:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a686:	88 89       	ldd	r24, Y+16	; 0x10
   1a688:	99 89       	ldd	r25, Y+17	; 0x11
   1a68a:	87 5b       	subi	r24, 0xB7	; 183
   1a68c:	9f 4f       	sbci	r25, 0xFF	; 255
   1a68e:	0e 94 d6 c6 	call	0x18dac	; 0x18dac <lif_lifbcd2timestr>
   1a692:	9f 93       	push	r25
   1a694:	8f 93       	push	r24
   1a696:	1f 93       	push	r17
   1a698:	0f 93       	push	r16
   1a69a:	87 e5       	ldi	r24, 0x57	; 87
   1a69c:	99 e3       	ldi	r25, 0x39	; 57
   1a69e:	1f 92       	push	r1
   1a6a0:	9f 93       	push	r25
   1a6a2:	8f 93       	push	r24
   1a6a4:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a6a8:	87 e1       	ldi	r24, 0x17	; 23
   1a6aa:	99 e3       	ldi	r25, 0x39	; 57
   1a6ac:	1f 92       	push	r1
   1a6ae:	9f 93       	push	r25
   1a6b0:	8f 93       	push	r24
   1a6b2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1a6b6:	0f b6       	in	r0, 0x3f	; 63
   1a6b8:	f8 94       	cli
   1a6ba:	de bf       	out	0x3e, r29	; 62
   1a6bc:	0f be       	out	0x3f, r0	; 63
   1a6be:	cd bf       	out	0x3d, r28	; 61
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a6c0:	60 e2       	ldi	r22, 0x20	; 32
   1a6c2:	96 2e       	mov	r9, r22
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a6c4:	00 e0       	ldi	r16, 0x00	; 0
   1a6c6:	10 e0       	ldi	r17, 0x00	; 0

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a6c8:	88 89       	ldd	r24, Y+16	; 0x10
   1a6ca:	99 89       	ldd	r25, Y+17	; 0x11
   1a6cc:	86 5a       	subi	r24, 0xA6	; 166
   1a6ce:	9f 4f       	sbci	r25, 0xFF	; 255
   1a6d0:	9c 83       	std	Y+4, r25	; 0x04
   1a6d2:	8b 83       	std	Y+3, r24	; 0x03
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a6d4:	e8 89       	ldd	r30, Y+16	; 0x10
   1a6d6:	f9 89       	ldd	r31, Y+17	; 0x11
   1a6d8:	e0 5a       	subi	r30, 0xA0	; 160
   1a6da:	ff 4f       	sbci	r31, 0xFF	; 255
   1a6dc:	fb 87       	std	Y+11, r31	; 0x0b
   1a6de:	ea 87       	std	Y+10, r30	; 0x0a

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a6e0:	28 89       	ldd	r18, Y+16	; 0x10
   1a6e2:	39 89       	ldd	r19, Y+17	; 0x11
   1a6e4:	24 59       	subi	r18, 0x94	; 148
   1a6e6:	3f 4f       	sbci	r19, 0xFF	; 255
   1a6e8:	3d 87       	std	Y+13, r19	; 0x0d
   1a6ea:	2c 87       	std	Y+12, r18	; 0x0c
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a6ec:	88 89       	ldd	r24, Y+16	; 0x10
   1a6ee:	99 89       	ldd	r25, Y+17	; 0x11
   1a6f0:	81 5b       	subi	r24, 0xB1	; 177
   1a6f2:	9f 4f       	sbci	r25, 0xFF	; 255
   1a6f4:	9a 83       	std	Y+2, r25	; 0x02
   1a6f6:	89 83       	std	Y+1, r24	; 0x01
   1a6f8:	8b ec       	ldi	r24, 0xCB	; 203
   1a6fa:	98 e3       	ldi	r25, 0x38	; 56
   1a6fc:	3c 01       	movw	r6, r24
   1a6fe:	81 2c       	mov	r8, r1
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a700:	e8 89       	ldd	r30, Y+16	; 0x10
   1a702:	f9 89       	ldd	r31, Y+17	; 0x11
   1a704:	ec 59       	subi	r30, 0x9C	; 156
   1a706:	ff 4f       	sbci	r31, 0xFF	; 255
   1a708:	ff 87       	std	Y+15, r31	; 0x0f
   1a70a:	ee 87       	std	Y+14, r30	; 0x0e
   1a70c:	28 89       	ldd	r18, Y+16	; 0x10
   1a70e:	39 89       	ldd	r19, Y+17	; 0x11
   1a710:	22 59       	subi	r18, 0x92	; 146
   1a712:	3f 4f       	sbci	r19, 0xFF	; 255
   1a714:	3e 83       	std	Y+6, r19	; 0x06
   1a716:	2d 83       	std	Y+5, r18	; 0x05
   1a718:	a8 88       	ldd	r10, Y+16	; 0x10
   1a71a:	b9 88       	ldd	r11, Y+17	; 0x11
   1a71c:	3c e5       	ldi	r19, 0x5C	; 92
   1a71e:	a3 0e       	add	r10, r19
   1a720:	b1 1c       	adc	r11, r1
   1a722:	8b e9       	ldi	r24, 0x9B	; 155
   1a724:	98 e3       	ldi	r25, 0x38	; 56
   1a726:	9c 01       	movw	r18, r24
   1a728:	40 e0       	ldi	r20, 0x00	; 0
   1a72a:	2f 83       	std	Y+7, r18	; 0x07
   1a72c:	38 87       	std	Y+8, r19	; 0x08
   1a72e:	49 87       	std	Y+9, r20	; 0x09
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a730:	b8 01       	movw	r22, r16
   1a732:	88 89       	ldd	r24, Y+16	; 0x10
   1a734:	99 89       	ldd	r25, Y+17	; 0x11
   1a736:	18 d8       	rcall	.-4048   	; 0x19768 <lif_readdirindex>
   1a738:	89 2b       	or	r24, r25
   1a73a:	09 f4       	brne	.+2      	; 0x1a73e <lif_dir+0xe8>
   1a73c:	9d c0       	rjmp	.+314    	; 0x1a878 <lif_dir+0x222>
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a73e:	eb 81       	ldd	r30, Y+3	; 0x03
   1a740:	fc 81       	ldd	r31, Y+4	; 0x04
   1a742:	20 81       	ld	r18, Z
   1a744:	31 81       	ldd	r19, Z+1	; 0x01
   1a746:	2f 3f       	cpi	r18, 0xFF	; 255
   1a748:	ff ef       	ldi	r31, 0xFF	; 255
   1a74a:	3f 07       	cpc	r19, r31
   1a74c:	09 f4       	brne	.+2      	; 0x1a750 <lif_dir+0xfa>
   1a74e:	94 c0       	rjmp	.+296    	; 0x1a878 <lif_dir+0x222>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a750:	ea 85       	ldd	r30, Y+10	; 0x0a
   1a752:	fb 85       	ldd	r31, Y+11	; 0x0b
   1a754:	80 81       	ld	r24, Z
   1a756:	91 81       	ldd	r25, Z+1	; 0x01
   1a758:	a2 81       	ldd	r26, Z+2	; 0x02
   1a75a:	b3 81       	ldd	r27, Z+3	; 0x03
   1a75c:	cc 24       	eor	r12, r12
   1a75e:	d8 2e       	mov	r13, r24
   1a760:	e9 2e       	mov	r14, r25
   1a762:	fa 2e       	mov	r15, r26

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a764:	2c 7f       	andi	r18, 0xFC	; 252
   1a766:	20 31       	cpi	r18, 0x10	; 16
   1a768:	30 4e       	sbci	r19, 0xE0	; 224
   1a76a:	09 f0       	breq	.+2      	; 0x1a76e <lif_dir+0x118>
   1a76c:	4b c0       	rjmp	.+150    	; 0x1a804 <lif_dir+0x1ae>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a76e:	ec 85       	ldd	r30, Y+12	; 0x0c
   1a770:	fd 85       	ldd	r31, Y+13	; 0x0d
   1a772:	20 81       	ld	r18, Z
   1a774:	31 81       	ldd	r19, Z+1	; 0x01
   1a776:	21 15       	cp	r18, r1
   1a778:	31 05       	cpc	r19, r1
   1a77a:	a9 f0       	breq	.+42     	; 0x1a7a6 <lif_dir+0x150>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a77c:	19 01       	movw	r2, r18
   1a77e:	41 2c       	mov	r4, r1
   1a780:	51 2c       	mov	r5, r1
   1a782:	77 27       	eor	r23, r23
   1a784:	65 2d       	mov	r22, r5
   1a786:	54 2d       	mov	r21, r4
   1a788:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a78a:	22 23       	and	r18, r18
   1a78c:	21 f0       	breq	.+8      	; 0x1a796 <lif_dir+0x140>
        ++sectors;
   1a78e:	4f 5f       	subi	r20, 0xFF	; 255
   1a790:	5f 4f       	sbci	r21, 0xFF	; 255
   1a792:	6f 4f       	sbci	r22, 0xFF	; 255
   1a794:	7f 4f       	sbci	r23, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a796:	84 17       	cp	r24, r20
   1a798:	95 07       	cpc	r25, r21
   1a79a:	a6 07       	cpc	r26, r22
   1a79c:	b7 07       	cpc	r27, r23
   1a79e:	19 f4       	brne	.+6      	; 0x1a7a6 <lif_dir+0x150>
            {
                bytes = LIF->DIR.FileBytes;
   1a7a0:	72 01       	movw	r14, r4
   1a7a2:	61 01       	movw	r12, r2
   1a7a4:	2f c0       	rjmp	.+94     	; 0x1a804 <lif_dir+0x1ae>
            }
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
   1a7a6:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1a7aa:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a7ae:	52 ff       	sbrs	r21, 2
   1a7b0:	27 c0       	rjmp	.+78     	; 0x1a800 <lif_dir+0x1aa>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a7b2:	19 01       	movw	r2, r18
   1a7b4:	41 2c       	mov	r4, r1
   1a7b6:	51 2c       	mov	r5, r1
   1a7b8:	77 27       	eor	r23, r23
   1a7ba:	65 2d       	mov	r22, r5
   1a7bc:	54 2d       	mov	r21, r4
   1a7be:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a7c0:	22 23       	and	r18, r18
   1a7c2:	21 f0       	breq	.+8      	; 0x1a7cc <lif_dir+0x176>
        ++sectors;
   1a7c4:	4f 5f       	subi	r20, 0xFF	; 255
   1a7c6:	5f 4f       	sbci	r21, 0xFF	; 255
   1a7c8:	6f 4f       	sbci	r22, 0xFF	; 255
   1a7ca:	7f 4f       	sbci	r23, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a7cc:	bf 93       	push	r27
   1a7ce:	af 93       	push	r26
   1a7d0:	9f 93       	push	r25
   1a7d2:	8f 93       	push	r24
   1a7d4:	7f 93       	push	r23
   1a7d6:	6f 93       	push	r22
   1a7d8:	5f 93       	push	r21
   1a7da:	4f 93       	push	r20
   1a7dc:	1f 92       	push	r1
   1a7de:	1f 92       	push	r1
   1a7e0:	3f 92       	push	r3
   1a7e2:	2f 92       	push	r2
   1a7e4:	fa 81       	ldd	r31, Y+2	; 0x02
   1a7e6:	ff 93       	push	r31
   1a7e8:	29 81       	ldd	r18, Y+1	; 0x01
   1a7ea:	2f 93       	push	r18
   1a7ec:	1f 92       	push	r1
   1a7ee:	7f 92       	push	r7
   1a7f0:	6f 92       	push	r6
   1a7f2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1a7f6:	0f b6       	in	r0, 0x3f	; 63
   1a7f8:	f8 94       	cli
   1a7fa:	de bf       	out	0x3e, r29	; 62
   1a7fc:	0f be       	out	0x3f, r0	; 63
   1a7fe:	cd bf       	out	0x3d, r28	; 61
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a800:	81 e2       	ldi	r24, 0x21	; 33
   1a802:	98 2e       	mov	r9, r24
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a804:	8e 85       	ldd	r24, Y+14	; 0x0e
   1a806:	9f 85       	ldd	r25, Y+15	; 0x0f
   1a808:	0e 94 d6 c6 	call	0x18dac	; 0x18dac <lif_lifbcd2timestr>
   1a80c:	ed 81       	ldd	r30, Y+5	; 0x05
   1a80e:	fe 81       	ldd	r31, Y+6	; 0x06
   1a810:	a0 81       	ld	r26, Z
   1a812:	b1 81       	ldd	r27, Z+1	; 0x01
   1a814:	f5 01       	movw	r30, r10
   1a816:	60 81       	ld	r22, Z
   1a818:	71 81       	ldd	r23, Z+1	; 0x01
   1a81a:	52 80       	ldd	r5, Z+2	; 0x02
   1a81c:	43 80       	ldd	r4, Z+3	; 0x03
   1a81e:	eb 81       	ldd	r30, Y+3	; 0x03
   1a820:	fc 81       	ldd	r31, Y+4	; 0x04
   1a822:	40 81       	ld	r20, Z
   1a824:	51 81       	ldd	r21, Z+1	; 0x01
   1a826:	41 15       	cp	r20, r1
   1a828:	51 05       	cpc	r21, r1
   1a82a:	19 f0       	breq	.+6      	; 0x1a832 <lif_dir+0x1dc>
   1a82c:	29 81       	ldd	r18, Y+1	; 0x01
   1a82e:	3a 81       	ldd	r19, Y+2	; 0x02
   1a830:	02 c0       	rjmp	.+4      	; 0x1a836 <lif_dir+0x1e0>
   1a832:	2f ec       	ldi	r18, 0xCF	; 207
   1a834:	35 e1       	ldi	r19, 0x15	; 21
   1a836:	9f 93       	push	r25
   1a838:	8f 93       	push	r24
   1a83a:	bf 93       	push	r27
   1a83c:	af 93       	push	r26
   1a83e:	1f 92       	push	r1
   1a840:	9f 92       	push	r9
   1a842:	ff 92       	push	r15
   1a844:	ef 92       	push	r14
   1a846:	df 92       	push	r13
   1a848:	cf 92       	push	r12
   1a84a:	4f 92       	push	r4
   1a84c:	5f 92       	push	r5
   1a84e:	7f 93       	push	r23
   1a850:	6f 93       	push	r22
   1a852:	5f 93       	push	r21
   1a854:	4f 93       	push	r20
   1a856:	3f 93       	push	r19
   1a858:	2f 93       	push	r18
   1a85a:	1f 92       	push	r1
   1a85c:	f8 85       	ldd	r31, Y+8	; 0x08
   1a85e:	ff 93       	push	r31
   1a860:	2f 81       	ldd	r18, Y+7	; 0x07
   1a862:	2f 93       	push	r18
   1a864:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a868:	0f 5f       	subi	r16, 0xFF	; 255
   1a86a:	1f 4f       	sbci	r17, 0xFF	; 255
    }   
   1a86c:	0f b6       	in	r0, 0x3f	; 63
   1a86e:	f8 94       	cli
   1a870:	de bf       	out	0x3e, r29	; 62
   1a872:	0f be       	out	0x3f, r0	; 63
   1a874:	cd bf       	out	0x3d, r28	; 61
   1a876:	5c cf       	rjmp	.-328    	; 0x1a730 <lif_dir+0xda>

    printf("\n");
   1a878:	89 e9       	ldi	r24, 0x99	; 153
   1a87a:	98 e3       	ldi	r25, 0x38	; 56
   1a87c:	1f 92       	push	r1
   1a87e:	9f 93       	push	r25
   1a880:	8f 93       	push	r24
   1a882:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a886:	e8 89       	ldd	r30, Y+16	; 0x10
   1a888:	f9 89       	ldd	r31, Y+17	; 0x11
   1a88a:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a88c:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a88e:	09 2e       	mov	r0, r25
   1a890:	00 0c       	add	r0, r0
   1a892:	aa 0b       	sbc	r26, r26
   1a894:	bb 0b       	sbc	r27, r27
   1a896:	bf 93       	push	r27
   1a898:	af 93       	push	r26
   1a89a:	9f 93       	push	r25
   1a89c:	8f 93       	push	r24
   1a89e:	8d e8       	ldi	r24, 0x8D	; 141
   1a8a0:	98 e3       	ldi	r25, 0x38	; 56
   1a8a2:	1f 92       	push	r1
   1a8a4:	9f 93       	push	r25
   1a8a6:	8f 93       	push	r24
   1a8a8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a8ac:	e8 89       	ldd	r30, Y+16	; 0x10
   1a8ae:	f9 89       	ldd	r31, Y+17	; 0x11
   1a8b0:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a8b2:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a8b4:	09 2e       	mov	r0, r25
   1a8b6:	00 0c       	add	r0, r0
   1a8b8:	aa 0b       	sbc	r26, r26
   1a8ba:	bb 0b       	sbc	r27, r27
   1a8bc:	bf 93       	push	r27
   1a8be:	af 93       	push	r26
   1a8c0:	9f 93       	push	r25
   1a8c2:	8f 93       	push	r24
   1a8c4:	80 e8       	ldi	r24, 0x80	; 128
   1a8c6:	98 e3       	ldi	r25, 0x38	; 56
   1a8c8:	1f 92       	push	r1
   1a8ca:	9f 93       	push	r25
   1a8cc:	8f 93       	push	r24
   1a8ce:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a8d2:	e8 89       	ldd	r30, Y+16	; 0x10
   1a8d4:	f9 89       	ldd	r31, Y+17	; 0x11
   1a8d6:	80 a9       	ldd	r24, Z+48	; 0x30
   1a8d8:	8f 93       	push	r24
   1a8da:	87 a5       	ldd	r24, Z+47	; 0x2f
   1a8dc:	8f 93       	push	r24
   1a8de:	86 a5       	ldd	r24, Z+46	; 0x2e
   1a8e0:	8f 93       	push	r24
   1a8e2:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a8e4:	8f 93       	push	r24
   1a8e6:	8f e6       	ldi	r24, 0x6F	; 111
   1a8e8:	98 e3       	ldi	r25, 0x38	; 56
   1a8ea:	1f 92       	push	r1
   1a8ec:	9f 93       	push	r25
   1a8ee:	8f 93       	push	r24
   1a8f0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a8f4:	e8 89       	ldd	r30, Y+16	; 0x10
   1a8f6:	f9 89       	ldd	r31, Y+17	; 0x11
   1a8f8:	80 ad       	ldd	r24, Z+56	; 0x38
   1a8fa:	8f 93       	push	r24
   1a8fc:	87 a9       	ldd	r24, Z+55	; 0x37
   1a8fe:	8f 93       	push	r24
   1a900:	86 a9       	ldd	r24, Z+54	; 0x36
   1a902:	8f 93       	push	r24
   1a904:	85 a9       	ldd	r24, Z+53	; 0x35
   1a906:	8f 93       	push	r24
   1a908:	8c e5       	ldi	r24, 0x5C	; 92
   1a90a:	98 e3       	ldi	r25, 0x38	; 56
   1a90c:	1f 92       	push	r1
   1a90e:	9f 93       	push	r25
   1a910:	8f 93       	push	r24
   1a912:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a916:	e8 89       	ldd	r30, Y+16	; 0x10
   1a918:	f9 89       	ldd	r31, Y+17	; 0x11
   1a91a:	87 89       	ldd	r24, Z+23	; 0x17
   1a91c:	8f 93       	push	r24
   1a91e:	86 89       	ldd	r24, Z+22	; 0x16
   1a920:	8f 93       	push	r24
   1a922:	85 89       	ldd	r24, Z+21	; 0x15
   1a924:	8f 93       	push	r24
   1a926:	84 89       	ldd	r24, Z+20	; 0x14
   1a928:	8f 93       	push	r24
   1a92a:	89 e4       	ldi	r24, 0x49	; 73
   1a92c:	98 e3       	ldi	r25, 0x38	; 56
   1a92e:	1f 92       	push	r1
   1a930:	9f 93       	push	r25
   1a932:	8f 93       	push	r24
   1a934:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a938:	0f b6       	in	r0, 0x3f	; 63
   1a93a:	f8 94       	cli
   1a93c:	de bf       	out	0x3e, r29	; 62
   1a93e:	0f be       	out	0x3f, r0	; 63
   1a940:	cd bf       	out	0x3d, r28	; 61
   1a942:	e8 89       	ldd	r30, Y+16	; 0x10
   1a944:	f9 89       	ldd	r31, Y+17	; 0x11
   1a946:	83 8d       	ldd	r24, Z+27	; 0x1b
   1a948:	8f 93       	push	r24
   1a94a:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a94c:	8f 93       	push	r24
   1a94e:	81 8d       	ldd	r24, Z+25	; 0x19
   1a950:	8f 93       	push	r24
   1a952:	80 8d       	ldd	r24, Z+24	; 0x18
   1a954:	8f 93       	push	r24
   1a956:	86 e3       	ldi	r24, 0x36	; 54
   1a958:	98 e3       	ldi	r25, 0x38	; 56
   1a95a:	1f 92       	push	r1
   1a95c:	9f 93       	push	r25
   1a95e:	8f 93       	push	r24
   1a960:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a964:	88 89       	ldd	r24, Y+16	; 0x10
   1a966:	99 89       	ldd	r25, Y+17	; 0x11
   1a968:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
   1a96c:	0f b6       	in	r0, 0x3f	; 63
   1a96e:	f8 94       	cli
   1a970:	de bf       	out	0x3e, r29	; 62
   1a972:	0f be       	out	0x3f, r0	; 63
   1a974:	cd bf       	out	0x3d, r28	; 61
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a976:	61 96       	adiw	r28, 0x11	; 17
   1a978:	e2 e1       	ldi	r30, 0x12	; 18
   1a97a:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0001a97e <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a97e:	a0 e0       	ldi	r26, 0x00	; 0
   1a980:	b0 e0       	ldi	r27, 0x00	; 0
   1a982:	e5 ec       	ldi	r30, 0xC5	; 197
   1a984:	f4 ed       	ldi	r31, 0xD4	; 212
   1a986:	0c 94 36 e5 	jmp	0x1ca6c	; 0x1ca6c <__prologue_saves__+0x10>
   1a98a:	7c 01       	movw	r14, r24
   1a98c:	16 2f       	mov	r17, r22
   1a98e:	07 2f       	mov	r16, r23
    int index;

    if( !lif_checkname(liflabel) )
   1a990:	86 2f       	mov	r24, r22
   1a992:	97 2f       	mov	r25, r23
   1a994:	0e 94 a7 c3 	call	0x1874e	; 0x1874e <lif_checkname>
   1a998:	89 2b       	or	r24, r25
   1a99a:	49 f4       	brne	.+18     	; 0x1a9ae <lif_find_file+0x30>
    {
        if(debuglevel & 1)
   1a99c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a9a0:	80 ff       	sbrs	r24, 0
   1a9a2:	48 c0       	rjmp	.+144    	; 0x1aa34 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a9a4:	0f 93       	push	r16
   1a9a6:	1f 93       	push	r17
   1a9a8:	8f e0       	ldi	r24, 0x0F	; 15
   1a9aa:	98 e3       	ldi	r25, 0x38	; 56
   1a9ac:	13 c0       	rjmp	.+38     	; 0x1a9d4 <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a9ae:	a1 2f       	mov	r26, r17
   1a9b0:	b0 2f       	mov	r27, r16
   1a9b2:	fd 01       	movw	r30, r26
   1a9b4:	01 90       	ld	r0, Z+
   1a9b6:	00 20       	and	r0, r0
   1a9b8:	e9 f7       	brne	.-6      	; 0x1a9b4 <lif_find_file+0x36>
   1a9ba:	31 97       	sbiw	r30, 0x01	; 1
   1a9bc:	ea 1b       	sub	r30, r26
   1a9be:	fb 0b       	sbc	r31, r27
   1a9c0:	3b 97       	sbiw	r30, 0x0b	; 11
   1a9c2:	98 f0       	brcs	.+38     	; 0x1a9ea <lif_find_file+0x6c>
    {
        if(debuglevel & 1)
   1a9c4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a9c8:	80 ff       	sbrs	r24, 0
   1a9ca:	34 c0       	rjmp	.+104    	; 0x1aa34 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a9cc:	0f 93       	push	r16
   1a9ce:	1f 93       	push	r17
   1a9d0:	8a ee       	ldi	r24, 0xEA	; 234
   1a9d2:	97 e3       	ldi	r25, 0x37	; 55
   1a9d4:	1f 92       	push	r1
   1a9d6:	9f 93       	push	r25
   1a9d8:	8f 93       	push	r24
   1a9da:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1a9de:	0f 90       	pop	r0
   1a9e0:	0f 90       	pop	r0
   1a9e2:	0f 90       	pop	r0
   1a9e4:	0f 90       	pop	r0
   1a9e6:	0f 90       	pop	r0
   1a9e8:	25 c0       	rjmp	.+74     	; 0x1aa34 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a9ea:	e1 14       	cp	r14, r1
   1a9ec:	f1 04       	cpc	r15, r1
   1a9ee:	11 f1       	breq	.+68     	; 0x1aa34 <lif_find_file+0xb6>
   1a9f0:	c0 e0       	ldi	r28, 0x00	; 0
   1a9f2:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a9f4:	67 01       	movw	r12, r14
   1a9f6:	2a e5       	ldi	r18, 0x5A	; 90
   1a9f8:	c2 0e       	add	r12, r18
   1a9fa:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a9fc:	57 01       	movw	r10, r14
   1a9fe:	8f e4       	ldi	r24, 0x4F	; 79
   1aa00:	a8 0e       	add	r10, r24
   1aa02:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1aa04:	be 01       	movw	r22, r28
   1aa06:	c7 01       	movw	r24, r14
   1aa08:	0e 94 b4 cb 	call	0x19768	; 0x19768 <lif_readdirindex>
   1aa0c:	89 2b       	or	r24, r25
   1aa0e:	91 f0       	breq	.+36     	; 0x1aa34 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1aa10:	f6 01       	movw	r30, r12
   1aa12:	80 81       	ld	r24, Z
   1aa14:	91 81       	ldd	r25, Z+1	; 0x01
   1aa16:	8f 3f       	cpi	r24, 0xFF	; 255
   1aa18:	ff ef       	ldi	r31, 0xFF	; 255
   1aa1a:	9f 07       	cpc	r25, r31
   1aa1c:	59 f0       	breq	.+22     	; 0x1aa34 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1aa1e:	89 2b       	or	r24, r25
   1aa20:	39 f0       	breq	.+14     	; 0x1aa30 <lif_find_file+0xb2>
   1aa22:	61 2f       	mov	r22, r17
   1aa24:	70 2f       	mov	r23, r16
   1aa26:	c5 01       	movw	r24, r10
   1aa28:	0e 94 37 32 	call	0x646e	; 0x646e <strcasecmp>
   1aa2c:	89 2b       	or	r24, r25
   1aa2e:	29 f0       	breq	.+10     	; 0x1aa3a <lif_find_file+0xbc>
            break;
        ++index;
   1aa30:	21 96       	adiw	r28, 0x01	; 1
   1aa32:	e8 cf       	rjmp	.-48     	; 0x1aa04 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & 1)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1aa34:	8f ef       	ldi	r24, 0xFF	; 255
   1aa36:	9f ef       	ldi	r25, 0xFF	; 255
   1aa38:	01 c0       	rjmp	.+2      	; 0x1aa3c <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1aa3a:	ce 01       	movw	r24, r28
            break;
        ++index;
    }
    return(index);
}
   1aa3c:	cd b7       	in	r28, 0x3d	; 61
   1aa3e:	de b7       	in	r29, 0x3e	; 62
   1aa40:	ea e0       	ldi	r30, 0x0A	; 10
   1aa42:	0c 94 52 e5 	jmp	0x1caa4	; 0x1caa4 <__epilogue_restores__+0x10>

0001aa46 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1aa46:	a0 e0       	ldi	r26, 0x00	; 0
   1aa48:	b0 e0       	ldi	r27, 0x00	; 0
   1aa4a:	e9 e2       	ldi	r30, 0x29	; 41
   1aa4c:	f5 ed       	ldi	r31, 0xD5	; 213
   1aa4e:	0c 94 38 e5 	jmp	0x1ca70	; 0x1ca70 <__prologue_saves__+0x14>
   1aa52:	6b 01       	movw	r12, r22
   1aa54:	7c 01       	movw	r14, r24
   1aa56:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1aa58:	20 e0       	ldi	r18, 0x00	; 0
   1aa5a:	31 e0       	ldi	r19, 0x01	; 1
   1aa5c:	40 e0       	ldi	r20, 0x00	; 0
   1aa5e:	50 e0       	ldi	r21, 0x00	; 0
   1aa60:	0e 94 ce e4 	call	0x1c99c	; 0x1c99c <__divmodsi4>
    if(!pos)
   1aa64:	61 15       	cp	r22, r1
   1aa66:	71 05       	cpc	r23, r1
   1aa68:	e1 f1       	breq	.+120    	; 0x1aae2 <lif_e010_pad_sector+0x9c>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1aa6a:	c0 e0       	ldi	r28, 0x00	; 0
   1aa6c:	d1 e0       	ldi	r29, 0x01	; 1
   1aa6e:	c6 1b       	sub	r28, r22
   1aa70:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1aa72:	f8 01       	movw	r30, r16
   1aa74:	8f ee       	ldi	r24, 0xEF	; 239
   1aa76:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1aa78:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1aa7a:	cf 01       	movw	r24, r30
   1aa7c:	80 1b       	sub	r24, r16
   1aa7e:	91 0b       	sbc	r25, r17
   1aa80:	8c 17       	cp	r24, r28
   1aa82:	9d 07       	cpc	r25, r29
   1aa84:	14 f4       	brge	.+4      	; 0x1aa8a <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1aa86:	21 93       	st	Z+, r18
   1aa88:	f8 cf       	rjmp	.-16     	; 0x1aa7a <lif_e010_pad_sector+0x34>
   1aa8a:	1c 16       	cp	r1, r28
   1aa8c:	1d 06       	cpc	r1, r29
   1aa8e:	14 f0       	brlt	.+4      	; 0x1aa94 <lif_e010_pad_sector+0x4e>
   1aa90:	c1 e0       	ldi	r28, 0x01	; 1
   1aa92:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1aa94:	ce 01       	movw	r24, r28
   1aa96:	0d 2e       	mov	r0, r29
   1aa98:	00 0c       	add	r0, r0
   1aa9a:	aa 0b       	sbc	r26, r26
   1aa9c:	bb 0b       	sbc	r27, r27
   1aa9e:	bc 01       	movw	r22, r24
   1aaa0:	cd 01       	movw	r24, r26
   1aaa2:	6c 0d       	add	r22, r12
   1aaa4:	7d 1d       	adc	r23, r13
   1aaa6:	8e 1d       	adc	r24, r14
   1aaa8:	9f 1d       	adc	r25, r15
   1aaaa:	20 e0       	ldi	r18, 0x00	; 0
   1aaac:	31 e0       	ldi	r19, 0x01	; 1
   1aaae:	40 e0       	ldi	r20, 0x00	; 0
   1aab0:	50 e0       	ldi	r21, 0x00	; 0
   1aab2:	0e 94 ce e4 	call	0x1c99c	; 0x1c99c <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1aab6:	61 15       	cp	r22, r1
   1aab8:	71 05       	cpc	r23, r1
   1aaba:	b1 f0       	breq	.+44     	; 0x1aae8 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & 1)
   1aabc:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1aac0:	20 ff       	sbrs	r18, 0
   1aac2:	14 c0       	rjmp	.+40     	; 0x1aaec <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1aac4:	7f 93       	push	r23
   1aac6:	6f 93       	push	r22
   1aac8:	81 eb       	ldi	r24, 0xB1	; 177
   1aaca:	97 e3       	ldi	r25, 0x37	; 55
   1aacc:	1f 92       	push	r1
   1aace:	9f 93       	push	r25
   1aad0:	8f 93       	push	r24
   1aad2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1aad6:	0f 90       	pop	r0
   1aad8:	0f 90       	pop	r0
   1aada:	0f 90       	pop	r0
   1aadc:	0f 90       	pop	r0
   1aade:	0f 90       	pop	r0
   1aae0:	05 c0       	rjmp	.+10     	; 0x1aaec <lif_e010_pad_sector+0xa6>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1aae2:	80 e0       	ldi	r24, 0x00	; 0
   1aae4:	90 e0       	ldi	r25, 0x00	; 0
   1aae6:	04 c0       	rjmp	.+8      	; 0x1aaf0 <lif_e010_pad_sector+0xaa>
   1aae8:	ce 01       	movw	r24, r28
   1aaea:	02 c0       	rjmp	.+4      	; 0x1aaf0 <lif_e010_pad_sector+0xaa>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & 1)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1aaec:	8f ef       	ldi	r24, 0xFF	; 255
   1aaee:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1aaf0:	cd b7       	in	r28, 0x3d	; 61
   1aaf2:	de b7       	in	r29, 0x3e	; 62
   1aaf4:	e8 e0       	ldi	r30, 0x08	; 8
   1aaf6:	0c 94 54 e5 	jmp	0x1caa8	; 0x1caa8 <__epilogue_restores__+0x14>

0001aafa <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1aafa:	a0 e0       	ldi	r26, 0x00	; 0
   1aafc:	b0 e0       	ldi	r27, 0x00	; 0
   1aafe:	e3 e8       	ldi	r30, 0x83	; 131
   1ab00:	f5 ed       	ldi	r31, 0xD5	; 213
   1ab02:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
   1ab06:	ec 01       	movw	r28, r24
   1ab08:	4a 01       	movw	r8, r20
   1ab0a:	5b 01       	movw	r10, r22
   1ab0c:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1ab0e:	fc 01       	movw	r30, r24
   1ab10:	01 90       	ld	r0, Z+
   1ab12:	00 20       	and	r0, r0
   1ab14:	e9 f7       	brne	.-6      	; 0x1ab10 <lif_ascii_string_to_e010+0x16>
   1ab16:	31 97       	sbiw	r30, 0x01	; 1
   1ab18:	6f 01       	movw	r12, r30
   1ab1a:	c8 1a       	sub	r12, r24
   1ab1c:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1ab1e:	41 2c       	mov	r4, r1
   1ab20:	51 2c       	mov	r5, r1
   1ab22:	32 01       	movw	r6, r4
   1ab24:	53 94       	inc	r5
   1ab26:	cb 01       	movw	r24, r22
   1ab28:	ba 01       	movw	r22, r20
   1ab2a:	a3 01       	movw	r20, r6
   1ab2c:	92 01       	movw	r18, r4
   1ab2e:	0e 94 ce e4 	call	0x1c99c	; 0x1c99c <__divmodsi4>
   1ab32:	21 2c       	mov	r2, r1
   1ab34:	33 24       	eor	r3, r3
   1ab36:	33 94       	inc	r3
   1ab38:	c1 01       	movw	r24, r2
   1ab3a:	86 1b       	sub	r24, r22
   1ab3c:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1ab3e:	86 30       	cpi	r24, 0x06	; 6
   1ab40:	91 05       	cpc	r25, r1
   1ab42:	20 f0       	brcs	.+8      	; 0x1ab4c <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1ab44:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1ab46:	00 e0       	ldi	r16, 0x00	; 0
   1ab48:	10 e0       	ldi	r17, 0x00	; 0
   1ab4a:	17 c0       	rjmp	.+46     	; 0x1ab7a <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1ab4c:	a7 01       	movw	r20, r14
   1ab4e:	c5 01       	movw	r24, r10
   1ab50:	b4 01       	movw	r22, r8
   1ab52:	79 df       	rcall	.-270    	; 0x1aa46 <lif_e010_pad_sector>
   1ab54:	8c 01       	movw	r16, r24
        if(ind < 0)
   1ab56:	97 fd       	sbrc	r25, 7
   1ab58:	84 c0       	rjmp	.+264    	; 0x1ac62 <lif_ascii_string_to_e010+0x168>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1ab5a:	09 2e       	mov	r0, r25
   1ab5c:	00 0c       	add	r0, r0
   1ab5e:	aa 0b       	sbc	r26, r26
   1ab60:	bb 0b       	sbc	r27, r27
   1ab62:	bc 01       	movw	r22, r24
   1ab64:	cd 01       	movw	r24, r26
   1ab66:	68 0d       	add	r22, r8
   1ab68:	79 1d       	adc	r23, r9
   1ab6a:	8a 1d       	adc	r24, r10
   1ab6c:	9b 1d       	adc	r25, r11
   1ab6e:	a3 01       	movw	r20, r6
   1ab70:	92 01       	movw	r18, r4
   1ab72:	0e 94 ce e4 	call	0x1c99c	; 0x1c99c <__divmodsi4>
   1ab76:	26 1a       	sub	r2, r22
   1ab78:	37 0a       	sbc	r3, r23
   1ab7a:	f7 01       	movw	r30, r14
   1ab7c:	e0 0f       	add	r30, r16
   1ab7e:	f1 1f       	adc	r31, r17
   1ab80:	0d 5f       	subi	r16, 0xFD	; 253
   1ab82:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1ab84:	c6 01       	movw	r24, r12
   1ab86:	02 96       	adiw	r24, 0x02	; 2
   1ab88:	82 15       	cp	r24, r2
   1ab8a:	93 05       	cpc	r25, r3
   1ab8c:	84 f4       	brge	.+32     	; 0x1abae <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1ab8e:	8f ed       	ldi	r24, 0xDF	; 223
   1ab90:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1ab92:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1ab94:	d2 82       	std	Z+2, r13	; 0x02
   1ab96:	f7 01       	movw	r30, r14
   1ab98:	e0 0f       	add	r30, r16
   1ab9a:	f1 1f       	adc	r31, r17
   1ab9c:	cf 01       	movw	r24, r30
   1ab9e:	8e 19       	sub	r24, r14
   1aba0:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1aba2:	29 91       	ld	r18, Y+
   1aba4:	22 23       	and	r18, r18
   1aba6:	09 f4       	brne	.+2      	; 0x1abaa <lif_ascii_string_to_e010+0xb0>
   1aba8:	5c c0       	rjmp	.+184    	; 0x1ac62 <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1abaa:	21 93       	st	Z+, r18
   1abac:	f7 cf       	rjmp	.-18     	; 0x1ab9c <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1abae:	8f ec       	ldi	r24, 0xCF	; 207
   1abb0:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1abb2:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1abb4:	d2 82       	std	Z+2, r13	; 0x02
   1abb6:	d7 01       	movw	r26, r14
   1abb8:	a0 0f       	add	r26, r16
   1abba:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1abbc:	fe 01       	movw	r30, r28
   1abbe:	81 91       	ld	r24, Z+
   1abc0:	81 11       	cpse	r24, r1
   1abc2:	0e c0       	rjmp	.+28     	; 0x1abe0 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1abc4:	c8 01       	movw	r24, r16
   1abc6:	01 2e       	mov	r0, r17
   1abc8:	00 0c       	add	r0, r0
   1abca:	aa 0b       	sbc	r26, r26
   1abcc:	bb 0b       	sbc	r27, r27
   1abce:	bc 01       	movw	r22, r24
   1abd0:	cd 01       	movw	r24, r26
   1abd2:	68 0d       	add	r22, r8
   1abd4:	79 1d       	adc	r23, r9
   1abd6:	8a 1d       	adc	r24, r10
   1abd8:	9b 1d       	adc	r25, r11
   1abda:	61 11       	cpse	r22, r1
   1abdc:	09 c0       	rjmp	.+18     	; 0x1abf0 <lif_ascii_string_to_e010+0xf6>
   1abde:	21 c0       	rjmp	.+66     	; 0x1ac22 <lif_ascii_string_to_e010+0x128>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1abe0:	02 15       	cp	r16, r2
   1abe2:	13 05       	cpc	r17, r3
   1abe4:	7c f7       	brge	.-34     	; 0x1abc4 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1abe6:	0f 5f       	subi	r16, 0xFF	; 255
   1abe8:	1f 4f       	sbci	r17, 0xFF	; 255
   1abea:	8d 93       	st	X+, r24
   1abec:	ef 01       	movw	r28, r30
   1abee:	e6 cf       	rjmp	.-52     	; 0x1abbc <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
   1abf0:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1abf4:	20 ff       	sbrs	r18, 0
   1abf6:	33 c0       	rjmp	.+102    	; 0x1ac5e <lif_ascii_string_to_e010+0x164>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1abf8:	20 e0       	ldi	r18, 0x00	; 0
   1abfa:	31 e0       	ldi	r19, 0x01	; 1
   1abfc:	40 e0       	ldi	r20, 0x00	; 0
   1abfe:	50 e0       	ldi	r21, 0x00	; 0
   1ac00:	0e 94 ce e4 	call	0x1c99c	; 0x1c99c <__divmodsi4>
   1ac04:	7f 93       	push	r23
   1ac06:	6f 93       	push	r22
   1ac08:	8d e8       	ldi	r24, 0x8D	; 141
   1ac0a:	97 e3       	ldi	r25, 0x37	; 55
   1ac0c:	1f 92       	push	r1
   1ac0e:	9f 93       	push	r25
   1ac10:	8f 93       	push	r24
   1ac12:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1ac16:	0f 90       	pop	r0
   1ac18:	0f 90       	pop	r0
   1ac1a:	0f 90       	pop	r0
   1ac1c:	0f 90       	pop	r0
   1ac1e:	0f 90       	pop	r0
   1ac20:	1e c0       	rjmp	.+60     	; 0x1ac5e <lif_ascii_string_to_e010+0x164>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1ac22:	fe 01       	movw	r30, r28
   1ac24:	01 90       	ld	r0, Z+
   1ac26:	00 20       	and	r0, r0
   1ac28:	e9 f7       	brne	.-6      	; 0x1ac24 <lif_ascii_string_to_e010+0x12a>
   1ac2a:	31 97       	sbiw	r30, 0x01	; 1
   1ac2c:	ec 1b       	sub	r30, r28
   1ac2e:	fd 0b       	sbc	r31, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1ac30:	d7 01       	movw	r26, r14
   1ac32:	a0 0f       	add	r26, r16
   1ac34:	b1 1f       	adc	r27, r17
   1ac36:	8f e6       	ldi	r24, 0x6F	; 111
   1ac38:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1ac3a:	11 96       	adiw	r26, 0x01	; 1
   1ac3c:	ec 93       	st	X, r30
   1ac3e:	11 97       	sbiw	r26, 0x01	; 1
        wbuf[ind++] = (len>>8) & 0xff;
   1ac40:	12 96       	adiw	r26, 0x02	; 2
   1ac42:	fc 93       	st	X, r31
   1ac44:	0d 5f       	subi	r16, 0xFD	; 253
   1ac46:	1f 4f       	sbci	r17, 0xFF	; 255
   1ac48:	f7 01       	movw	r30, r14
   1ac4a:	e0 0f       	add	r30, r16
   1ac4c:	f1 1f       	adc	r31, r17
   1ac4e:	cf 01       	movw	r24, r30
   1ac50:	8e 19       	sub	r24, r14
   1ac52:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1ac54:	29 91       	ld	r18, Y+
   1ac56:	22 23       	and	r18, r18
   1ac58:	21 f0       	breq	.+8      	; 0x1ac62 <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1ac5a:	21 93       	st	Z+, r18
   1ac5c:	f8 cf       	rjmp	.-16     	; 0x1ac4e <lif_ascii_string_to_e010+0x154>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1ac5e:	8f ef       	ldi	r24, 0xFF	; 255
   1ac60:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1ac62:	cd b7       	in	r28, 0x3d	; 61
   1ac64:	de b7       	in	r29, 0x3e	; 62
   1ac66:	e2 e1       	ldi	r30, 0x12	; 18
   1ac68:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0001ac6c <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1ac6c:	a6 e0       	ldi	r26, 0x06	; 6
   1ac6e:	b3 e0       	ldi	r27, 0x03	; 3
   1ac70:	ec e3       	ldi	r30, 0x3C	; 60
   1ac72:	f6 ed       	ldi	r31, 0xD6	; 214
   1ac74:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
   1ac78:	7c 01       	movw	r14, r24
   1ac7a:	4a 01       	movw	r8, r20
   1ac7c:	5b 01       	movw	r10, r22
   1ac7e:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1ac80:	66 e8       	ldi	r22, 0x86	; 134
   1ac82:	78 e0       	ldi	r23, 0x08	; 8
   1ac84:	0e 94 15 c2 	call	0x1842a	; 0x1842a <lif_open>
   1ac88:	6c 01       	movw	r12, r24
    if(fi == NULL)
   1ac8a:	89 2b       	or	r24, r25
   1ac8c:	09 f4       	brne	.+2      	; 0x1ac90 <lif_add_ascii_file_as_e010_wrapper+0x24>
   1ac8e:	6b c0       	rjmp	.+214    	; 0x1ad66 <lif_add_ascii_file_as_e010_wrapper+0xfa>
   1ac90:	21 2c       	mov	r2, r1
   1ac92:	31 2c       	mov	r3, r1
   1ac94:	41 2c       	mov	r4, r1
   1ac96:	51 2c       	mov	r5, r1
   1ac98:	32 01       	movw	r6, r4

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1ac9a:	8f e7       	ldi	r24, 0x7F	; 127
   1ac9c:	97 e3       	ldi	r25, 0x37	; 55
   1ac9e:	9c 01       	movw	r18, r24
   1aca0:	40 e0       	ldi	r20, 0x00	; 0
   1aca2:	cc 5f       	subi	r28, 0xFC	; 252
   1aca4:	dc 4f       	sbci	r29, 0xFC	; 252
   1aca6:	28 83       	st	Y, r18
   1aca8:	39 83       	std	Y+1, r19	; 0x01
   1acaa:	4a 83       	std	Y+2, r20	; 0x02
   1acac:	c4 50       	subi	r28, 0x04	; 4
   1acae:	d3 40       	sbci	r29, 0x03	; 3
   1acb0:	1a c0       	rjmp	.+52     	; 0x1ace6 <lif_add_ascii_file_as_e010_wrapper+0x7a>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1acb2:	ce 5f       	subi	r28, 0xFE	; 254
   1acb4:	dc 4f       	sbci	r29, 0xFC	; 252
   1acb6:	28 81       	ld	r18, Y
   1acb8:	39 81       	ldd	r19, Y+1	; 0x01
   1acba:	c2 50       	subi	r28, 0x02	; 2
   1acbc:	d3 40       	sbci	r29, 0x03	; 3
   1acbe:	c9 01       	movw	r24, r18
   1acc0:	03 2e       	mov	r0, r19
   1acc2:	00 0c       	add	r0, r0
   1acc4:	aa 0b       	sbc	r26, r26
   1acc6:	bb 0b       	sbc	r27, r27
   1acc8:	88 0e       	add	r8, r24
   1acca:	99 1e       	adc	r9, r25
   1accc:	aa 1e       	adc	r10, r26
   1acce:	bb 1e       	adc	r11, r27
        bytes += size;
   1acd0:	48 0e       	add	r4, r24
   1acd2:	59 1e       	adc	r5, r25
   1acd4:	6a 1e       	adc	r6, r26
   1acd6:	7b 1e       	adc	r7, r27
        count += size;
   1acd8:	22 0e       	add	r2, r18
   1acda:	33 1e       	adc	r3, r19

        if(count > 256)
   1acdc:	31 e0       	ldi	r19, 0x01	; 1
   1acde:	23 16       	cp	r2, r19
   1ace0:	33 06       	cpc	r3, r19
   1ace2:	0c f0       	brlt	.+2      	; 0x1ace6 <lif_add_ascii_file_as_e010_wrapper+0x7a>
   1ace4:	45 c0       	rjmp	.+138    	; 0x1ad70 <lif_add_ascii_file_as_e010_wrapper+0x104>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1ace6:	a6 01       	movw	r20, r12
   1ace8:	6d ef       	ldi	r22, 0xFD	; 253
   1acea:	70 e0       	ldi	r23, 0x00	; 0
   1acec:	ce 01       	movw	r24, r28
   1acee:	8f 5f       	subi	r24, 0xFF	; 255
   1acf0:	9d 4f       	sbci	r25, 0xFD	; 253
   1acf2:	0e 94 bf 76 	call	0xed7e	; 0xed7e <fgets>
   1acf6:	89 2b       	or	r24, r25
   1acf8:	09 f4       	brne	.+2      	; 0x1acfc <lif_add_ascii_file_as_e010_wrapper+0x90>
   1acfa:	58 c0       	rjmp	.+176    	; 0x1adac <lif_add_ascii_file_as_e010_wrapper+0x140>
    {
        trim_tail((char *)str);
   1acfc:	ce 01       	movw	r24, r28
   1acfe:	8f 5f       	subi	r24, 0xFF	; 255
   1ad00:	9d 4f       	sbci	r25, 0xFD	; 253
   1ad02:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1ad06:	68 ed       	ldi	r22, 0xD8	; 216
   1ad08:	75 e1       	ldi	r23, 0x15	; 21
   1ad0a:	ce 01       	movw	r24, r28
   1ad0c:	8f 5f       	subi	r24, 0xFF	; 255
   1ad0e:	9d 4f       	sbci	r25, 0xFD	; 253
   1ad10:	0e 94 c2 31 	call	0x6384	; 0x6384 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1ad14:	9e 01       	movw	r18, r28
   1ad16:	2f 5f       	subi	r18, 0xFF	; 255
   1ad18:	3f 4f       	sbci	r19, 0xFF	; 255
   1ad1a:	b5 01       	movw	r22, r10
   1ad1c:	a4 01       	movw	r20, r8
   1ad1e:	ce 01       	movw	r24, r28
   1ad20:	8f 5f       	subi	r24, 0xFF	; 255
   1ad22:	9d 4f       	sbci	r25, 0xFD	; 253
   1ad24:	ea de       	rcall	.-556    	; 0x1aafa <lif_ascii_string_to_e010>
   1ad26:	ce 5f       	subi	r28, 0xFE	; 254
   1ad28:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad2a:	99 83       	std	Y+1, r25	; 0x01
   1ad2c:	88 83       	st	Y, r24
   1ad2e:	c2 50       	subi	r28, 0x02	; 2
   1ad30:	d3 40       	sbci	r29, 0x03	; 3
        // Write string
        // Now Write string
        if(LIF)
   1ad32:	e1 14       	cp	r14, r1
   1ad34:	f1 04       	cpc	r15, r1
   1ad36:	09 f4       	brne	.+2      	; 0x1ad3a <lif_add_ascii_file_as_e010_wrapper+0xce>
   1ad38:	bc cf       	rjmp	.-136    	; 0x1acb2 <lif_add_ascii_file_as_e010_wrapper+0x46>
        {
            len = lif_write(LIF, obuf, offset, size);
   1ad3a:	8c 01       	movw	r16, r24
   1ad3c:	a5 01       	movw	r20, r10
   1ad3e:	94 01       	movw	r18, r8
   1ad40:	be 01       	movw	r22, r28
   1ad42:	6f 5f       	subi	r22, 0xFF	; 255
   1ad44:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad46:	c7 01       	movw	r24, r14
   1ad48:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <lif_write>
            if(len < size)
   1ad4c:	ce 5f       	subi	r28, 0xFE	; 254
   1ad4e:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad50:	08 81       	ld	r16, Y
   1ad52:	19 81       	ldd	r17, Y+1	; 0x01
   1ad54:	c2 50       	subi	r28, 0x02	; 2
   1ad56:	d3 40       	sbci	r29, 0x03	; 3
   1ad58:	80 17       	cp	r24, r16
   1ad5a:	91 07       	cpc	r25, r17
   1ad5c:	0c f0       	brlt	.+2      	; 0x1ad60 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1ad5e:	a9 cf       	rjmp	.-174    	; 0x1acb2 <lif_add_ascii_file_as_e010_wrapper+0x46>
            {
                fclose(fi);
   1ad60:	c6 01       	movw	r24, r12
   1ad62:	0e 94 38 7d 	call	0xfa70	; 0xfa70 <fclose>
                return(-1);
   1ad66:	6f ef       	ldi	r22, 0xFF	; 255
   1ad68:	7f ef       	ldi	r23, 0xFF	; 255
   1ad6a:	8f ef       	ldi	r24, 0xFF	; 255
   1ad6c:	9f ef       	ldi	r25, 0xFF	; 255
   1ad6e:	86 c0       	rjmp	.+268    	; 0x1ae7c <lif_add_ascii_file_as_e010_wrapper+0x210>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1ad70:	e1 14       	cp	r14, r1
   1ad72:	f1 04       	cpc	r15, r1
   1ad74:	c1 f0       	breq	.+48     	; 0x1ada6 <lif_add_ascii_file_as_e010_wrapper+0x13a>
                printf("\tWrote: %8ld\r", (long)bytes);
   1ad76:	7f 92       	push	r7
   1ad78:	6f 92       	push	r6
   1ad7a:	5f 92       	push	r5
   1ad7c:	4f 92       	push	r4
   1ad7e:	1f 92       	push	r1
   1ad80:	cb 5f       	subi	r28, 0xFB	; 251
   1ad82:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad84:	48 81       	ld	r20, Y
   1ad86:	c5 50       	subi	r28, 0x05	; 5
   1ad88:	d3 40       	sbci	r29, 0x03	; 3
   1ad8a:	4f 93       	push	r20
   1ad8c:	cc 5f       	subi	r28, 0xFC	; 252
   1ad8e:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad90:	88 81       	ld	r24, Y
   1ad92:	c4 50       	subi	r28, 0x04	; 4
   1ad94:	d3 40       	sbci	r29, 0x03	; 3
   1ad96:	8f 93       	push	r24
   1ad98:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1ad9c:	0f b6       	in	r0, 0x3f	; 63
   1ad9e:	f8 94       	cli
   1ada0:	de bf       	out	0x3e, r29	; 62
   1ada2:	0f be       	out	0x3f, r0	; 63
   1ada4:	cd bf       	out	0x3d, r28	; 61
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1ada6:	21 2c       	mov	r2, r1
   1ada8:	31 2c       	mov	r3, r1
   1adaa:	9d cf       	rjmp	.-198    	; 0x1ace6 <lif_add_ascii_file_as_e010_wrapper+0x7a>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1adac:	c6 01       	movw	r24, r12
   1adae:	0e 94 38 7d 	call	0xfa70	; 0xfa70 <fclose>

    // Write EOF
    str[0] = 0;
   1adb2:	cf 5f       	subi	r28, 0xFF	; 255
   1adb4:	dd 4f       	sbci	r29, 0xFD	; 253
   1adb6:	18 82       	st	Y, r1
   1adb8:	c1 50       	subi	r28, 0x01	; 1
   1adba:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1adbc:	9e 01       	movw	r18, r28
   1adbe:	2f 5f       	subi	r18, 0xFF	; 255
   1adc0:	3f 4f       	sbci	r19, 0xFF	; 255
   1adc2:	b5 01       	movw	r22, r10
   1adc4:	a4 01       	movw	r20, r8
   1adc6:	ce 01       	movw	r24, r28
   1adc8:	8f 5f       	subi	r24, 0xFF	; 255
   1adca:	9d 4f       	sbci	r25, 0xFD	; 253
   1adcc:	96 de       	rcall	.-724    	; 0x1aafa <lif_ascii_string_to_e010>
   1adce:	6c 01       	movw	r12, r24

    if(LIF)
   1add0:	e1 14       	cp	r14, r1
   1add2:	f1 04       	cpc	r15, r1
   1add4:	b9 f4       	brne	.+46     	; 0x1ae04 <lif_add_ascii_file_as_e010_wrapper+0x198>
            return(-1);

    }

    offset += size;
    bytes += size;
   1add6:	c6 01       	movw	r24, r12
   1add8:	dd 0c       	add	r13, r13
   1adda:	aa 0b       	sbc	r26, r26
   1addc:	bb 0b       	sbc	r27, r27
   1adde:	48 0e       	add	r4, r24
   1ade0:	59 1e       	adc	r5, r25
   1ade2:	6a 1e       	adc	r6, r26
   1ade4:	7b 1e       	adc	r7, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1ade6:	88 0e       	add	r8, r24
   1ade8:	99 1e       	adc	r9, r25
   1adea:	aa 1e       	adc	r10, r26
   1adec:	bb 1e       	adc	r11, r27
   1adee:	ae 01       	movw	r20, r28
   1adf0:	4f 5f       	subi	r20, 0xFF	; 255
   1adf2:	5f 4f       	sbci	r21, 0xFF	; 255
   1adf4:	c5 01       	movw	r24, r10
   1adf6:	b4 01       	movw	r22, r8
   1adf8:	26 de       	rcall	.-948    	; 0x1aa46 <lif_e010_pad_sector>
   1adfa:	6c 01       	movw	r12, r24
    if(LIF)
   1adfc:	e1 14       	cp	r14, r1
   1adfe:	f1 04       	cpc	r15, r1
   1ae00:	f1 f4       	brne	.+60     	; 0x1ae3e <lif_add_ascii_file_as_e010_wrapper+0x1d2>
   1ae02:	3a c0       	rjmp	.+116    	; 0x1ae78 <lif_add_ascii_file_as_e010_wrapper+0x20c>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1ae04:	7f 92       	push	r7
   1ae06:	6f 92       	push	r6
   1ae08:	5f 92       	push	r5
   1ae0a:	4f 92       	push	r4
   1ae0c:	81 e7       	ldi	r24, 0x71	; 113
   1ae0e:	97 e3       	ldi	r25, 0x37	; 55
   1ae10:	1f 92       	push	r1
   1ae12:	9f 93       	push	r25
   1ae14:	8f 93       	push	r24
   1ae16:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1ae1a:	86 01       	movw	r16, r12
   1ae1c:	a5 01       	movw	r20, r10
   1ae1e:	94 01       	movw	r18, r8
   1ae20:	be 01       	movw	r22, r28
   1ae22:	6f 5f       	subi	r22, 0xFF	; 255
   1ae24:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae26:	c7 01       	movw	r24, r14
   1ae28:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <lif_write>
        if(len < size)
   1ae2c:	0f b6       	in	r0, 0x3f	; 63
   1ae2e:	f8 94       	cli
   1ae30:	de bf       	out	0x3e, r29	; 62
   1ae32:	0f be       	out	0x3f, r0	; 63
   1ae34:	cd bf       	out	0x3d, r28	; 61
   1ae36:	8c 15       	cp	r24, r12
   1ae38:	9d 05       	cpc	r25, r13
   1ae3a:	6c f6       	brge	.-102    	; 0x1add6 <lif_add_ascii_file_as_e010_wrapper+0x16a>
   1ae3c:	94 cf       	rjmp	.-216    	; 0x1ad66 <lif_add_ascii_file_as_e010_wrapper+0xfa>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1ae3e:	8c 01       	movw	r16, r24
   1ae40:	a5 01       	movw	r20, r10
   1ae42:	94 01       	movw	r18, r8
   1ae44:	be 01       	movw	r22, r28
   1ae46:	6f 5f       	subi	r22, 0xFF	; 255
   1ae48:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae4a:	c7 01       	movw	r24, r14
   1ae4c:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <lif_write>
        if(len < size)
   1ae50:	8c 15       	cp	r24, r12
   1ae52:	9d 05       	cpc	r25, r13
   1ae54:	0c f4       	brge	.+2      	; 0x1ae58 <lif_add_ascii_file_as_e010_wrapper+0x1ec>
   1ae56:	87 cf       	rjmp	.-242    	; 0x1ad66 <lif_add_ascii_file_as_e010_wrapper+0xfa>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1ae58:	7f 92       	push	r7
   1ae5a:	6f 92       	push	r6
   1ae5c:	5f 92       	push	r5
   1ae5e:	4f 92       	push	r4
   1ae60:	83 e6       	ldi	r24, 0x63	; 99
   1ae62:	97 e3       	ldi	r25, 0x37	; 55
   1ae64:	1f 92       	push	r1
   1ae66:	9f 93       	push	r25
   1ae68:	8f 93       	push	r24
   1ae6a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1ae6e:	0f b6       	in	r0, 0x3f	; 63
   1ae70:	f8 94       	cli
   1ae72:	de bf       	out	0x3e, r29	; 62
   1ae74:	0f be       	out	0x3f, r0	; 63
   1ae76:	cd bf       	out	0x3d, r28	; 61

    return(bytes);
   1ae78:	b2 01       	movw	r22, r4
   1ae7a:	c3 01       	movw	r24, r6
}
   1ae7c:	ca 5f       	subi	r28, 0xFA	; 250
   1ae7e:	dc 4f       	sbci	r29, 0xFC	; 252
   1ae80:	e2 e1       	ldi	r30, 0x12	; 18
   1ae82:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0001ae86 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1ae86:	a2 e3       	ldi	r26, 0x32	; 50
   1ae88:	b0 e0       	ldi	r27, 0x00	; 0
   1ae8a:	e9 e4       	ldi	r30, 0x49	; 73
   1ae8c:	f7 ed       	ldi	r31, 0xD7	; 215
   1ae8e:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
   1ae92:	6c 01       	movw	r12, r24
   1ae94:	1b 01       	movw	r2, r22
   1ae96:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1ae98:	fc 01       	movw	r30, r24
   1ae9a:	80 81       	ld	r24, Z
   1ae9c:	81 11       	cpse	r24, r1
   1ae9e:	03 c0       	rjmp	.+6      	; 0x1aea6 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1aea0:	80 e3       	ldi	r24, 0x30	; 48
   1aea2:	97 e3       	ldi	r25, 0x37	; 55
   1aea4:	1a c0       	rjmp	.+52     	; 0x1aeda <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1aea6:	fb 01       	movw	r30, r22
   1aea8:	80 81       	ld	r24, Z
   1aeaa:	81 11       	cpse	r24, r1
   1aeac:	03 c0       	rjmp	.+6      	; 0x1aeb4 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1aeae:	82 e0       	ldi	r24, 0x02	; 2
   1aeb0:	97 e3       	ldi	r25, 0x37	; 55
   1aeb2:	13 c0       	rjmp	.+38     	; 0x1aeda <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1aeb4:	fa 01       	movw	r30, r20
   1aeb6:	80 81       	ld	r24, Z
   1aeb8:	81 11       	cpse	r24, r1
   1aeba:	03 c0       	rjmp	.+6      	; 0x1aec2 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1aebc:	83 ed       	ldi	r24, 0xD3	; 211
   1aebe:	96 e3       	ldi	r25, 0x36	; 54
   1aec0:	0c c0       	rjmp	.+24     	; 0x1aeda <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1aec2:	be 01       	movw	r22, r28
   1aec4:	6f 5f       	subi	r22, 0xFF	; 255
   1aec6:	7f 4f       	sbci	r23, 0xFF	; 255
   1aec8:	ca 01       	movw	r24, r20
   1aeca:	0e 94 3d c2 	call	0x1847a	; 0x1847a <lif_stat>
   1aece:	9a ab       	std	Y+50, r25	; 0x32
   1aed0:	89 ab       	std	Y+49, r24	; 0x31
    if(!sp)
   1aed2:	89 2b       	or	r24, r25
   1aed4:	59 f4       	brne	.+22     	; 0x1aeec <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1aed6:	83 ea       	ldi	r24, 0xA3	; 163
   1aed8:	96 e3       	ldi	r25, 0x36	; 54
   1aeda:	1f 92       	push	r1
   1aedc:	9f 93       	push	r25
   1aede:	8f 93       	push	r24
   1aee0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(-1);
   1aee4:	0f 90       	pop	r0
   1aee6:	0f 90       	pop	r0
   1aee8:	0f 90       	pop	r0
   1aeea:	fe c0       	rjmp	.+508    	; 0x1b0e8 <lif_add_ascii_file_as_e010+0x262>
    }

    if(debuglevel & 0x400)
   1aeec:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1aef0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1aef4:	92 ff       	sbrs	r25, 2
   1aef6:	12 c0       	rjmp	.+36     	; 0x1af1c <lif_add_ascii_file_as_e010+0x96>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1aef8:	ff 92       	push	r15
   1aefa:	ef 92       	push	r14
   1aefc:	3f 92       	push	r3
   1aefe:	2f 92       	push	r2
   1af00:	df 92       	push	r13
   1af02:	cf 92       	push	r12
   1af04:	84 e7       	ldi	r24, 0x74	; 116
   1af06:	96 e3       	ldi	r25, 0x36	; 54
   1af08:	1f 92       	push	r1
   1af0a:	9f 93       	push	r25
   1af0c:	8f 93       	push	r24
   1af0e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1af12:	0f b6       	in	r0, 0x3f	; 63
   1af14:	f8 94       	cli
   1af16:	de bf       	out	0x3e, r29	; 62
   1af18:	0f be       	out	0x3f, r0	; 63
   1af1a:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1af1c:	97 01       	movw	r18, r14
   1af1e:	40 e0       	ldi	r20, 0x00	; 0
   1af20:	50 e0       	ldi	r21, 0x00	; 0
   1af22:	ba 01       	movw	r22, r20
   1af24:	80 e0       	ldi	r24, 0x00	; 0
   1af26:	90 e0       	ldi	r25, 0x00	; 0
   1af28:	a1 de       	rcall	.-702    	; 0x1ac6c <lif_add_ascii_file_as_e010_wrapper>
   1af2a:	4b 01       	movw	r8, r22
   1af2c:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1af2e:	47 2e       	mov	r4, r23
   1af30:	58 2e       	mov	r5, r24
   1af32:	69 2e       	mov	r6, r25
   1af34:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1af36:	66 23       	and	r22, r22
   1af38:	29 f0       	breq	.+10     	; 0x1af44 <lif_add_ascii_file_as_e010+0xbe>
        ++sectors;
   1af3a:	9f ef       	ldi	r25, 0xFF	; 255
   1af3c:	49 1a       	sub	r4, r25
   1af3e:	59 0a       	sbc	r5, r25
   1af40:	69 0a       	sbc	r6, r25
   1af42:	79 0a       	sbc	r7, r25

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1af44:	69 e8       	ldi	r22, 0x89	; 137
   1af46:	78 e0       	ldi	r23, 0x08	; 8
   1af48:	c6 01       	movw	r24, r12
   1af4a:	85 da       	rcall	.-2806   	; 0x1a456 <lif_open_volume>
   1af4c:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1af4e:	00 97       	sbiw	r24, 0x00	; 0
   1af50:	09 f4       	brne	.+2      	; 0x1af54 <lif_add_ascii_file_as_e010+0xce>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1af52:	ca c0       	rjmp	.+404    	; 0x1b0e8 <lif_add_ascii_file_as_e010+0x262>
   1af54:	b3 01       	movw	r22, r6
   1af56:	a2 01       	movw	r20, r4
   1af58:	19 d9       	rcall	.-3534   	; 0x1a18c <lif_newdir>
    if(index == -1)
   1af5a:	3c 01       	movw	r6, r24
   1af5c:	01 96       	adiw	r24, 0x01	; 1
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1af5e:	a1 f4       	brne	.+40     	; 0x1af88 <lif_add_ascii_file_as_e010+0x102>
   1af60:	ff 92       	push	r15
   1af62:	ef 92       	push	r14
   1af64:	df 92       	push	r13
   1af66:	cf 92       	push	r12
   1af68:	84 e4       	ldi	r24, 0x44	; 68
   1af6a:	96 e3       	ldi	r25, 0x36	; 54
   1af6c:	1f 92       	push	r1
   1af6e:	9f 93       	push	r25
   1af70:	8f 93       	push	r24
   1af72:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af76:	c8 01       	movw	r24, r16
   1af78:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
    if(index == -1)
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            return(-1);
   1af7c:	0f b6       	in	r0, 0x3f	; 63
   1af7e:	f8 94       	cli
   1af80:	de bf       	out	0x3e, r29	; 62
   1af82:	0f be       	out	0x3f, r0	; 63
   1af84:	cd bf       	out	0x3d, r28	; 61
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1af86:	b0 c0       	rjmp	.+352    	; 0x1b0e8 <lif_add_ascii_file_as_e010+0x262>
   1af88:	68 01       	movw	r12, r16
   1af8a:	9f e4       	ldi	r25, 0x4F	; 79
   1af8c:	c9 0e       	add	r12, r25
   1af8e:	d1 1c       	adc	r13, r1
   1af90:	4a e0       	ldi	r20, 0x0A	; 10
   1af92:	50 e0       	ldi	r21, 0x00	; 0
   1af94:	b1 01       	movw	r22, r2
   1af96:	c6 01       	movw	r24, r12
   1af98:	0e 94 e1 c3 	call	0x187c2	; 0x187c2 <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1af9c:	80 e1       	ldi	r24, 0x10	; 16
   1af9e:	90 ee       	ldi	r25, 0xE0	; 224
   1afa0:	f8 01       	movw	r30, r16
   1afa2:	e6 5a       	subi	r30, 0xA6	; 166
   1afa4:	ff 4f       	sbci	r31, 0xFF	; 255
   1afa6:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1afa8:	80 83       	st	Z, r24
   1afaa:	e9 a9       	ldd	r30, Y+49	; 0x31
   1afac:	fa a9       	ldd	r31, Y+50	; 0x32
   1afae:	60 a5       	ldd	r22, Z+40	; 0x28
   1afb0:	71 a5       	ldd	r23, Z+41	; 0x29
   1afb2:	82 a5       	ldd	r24, Z+42	; 0x2a
   1afb4:	93 a5       	ldd	r25, Z+43	; 0x2b
   1afb6:	a8 01       	movw	r20, r16
   1afb8:	4c 59       	subi	r20, 0x9C	; 156
   1afba:	5f 4f       	sbci	r21, 0xFF	; 255
   1afbc:	0e 94 26 c6 	call	0x18c4c	; 0x18c4c <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1afc0:	81 e0       	ldi	r24, 0x01	; 1
   1afc2:	90 e8       	ldi	r25, 0x80	; 128
   1afc4:	f8 01       	movw	r30, r16
   1afc6:	e6 59       	subi	r30, 0x96	; 150
   1afc8:	ff 4f       	sbci	r31, 0xFF	; 255
   1afca:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1afcc:	80 83       	st	Z, r24
   1afce:	32 96       	adiw	r30, 0x02	; 2
   1afd0:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1afd2:	80 82       	st	Z, r8
   1afd4:	80 e0       	ldi	r24, 0x00	; 0
   1afd6:	91 e0       	ldi	r25, 0x01	; 1
   1afd8:	32 96       	adiw	r30, 0x02	; 2
   1afda:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1afdc:	80 83       	st	Z, r24
   1afde:	58 01       	movw	r10, r16
   1afe0:	fc e5       	ldi	r31, 0x5C	; 92
   1afe2:	af 0e       	add	r10, r31
   1afe4:	b1 1c       	adc	r11, r1
   1afe6:	f5 01       	movw	r30, r10
   1afe8:	80 81       	ld	r24, Z
   1afea:	91 81       	ldd	r25, Z+1	; 0x01
   1afec:	a2 81       	ldd	r26, Z+2	; 0x02
   1afee:	b3 81       	ldd	r27, Z+3	; 0x03
   1aff0:	22 24       	eor	r2, r2
   1aff2:	38 2e       	mov	r3, r24
   1aff4:	49 2e       	mov	r4, r25

    if(debuglevel & 0x400)
   1aff6:	5a 2e       	mov	r5, r26
   1aff8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1affc:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b000:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1b002:	05 c0       	rjmp	.+10     	; 0x1b00e <lif_add_ascii_file_as_e010+0x188>
   1b004:	6a ed       	ldi	r22, 0xDA	; 218
   1b006:	75 e1       	ldi	r23, 0x15	; 21
   1b008:	c8 01       	movw	r24, r16
   1b00a:	0e 94 12 c7 	call	0x18e24	; 0x18e24 <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1b00e:	97 01       	movw	r18, r14
   1b010:	b2 01       	movw	r22, r4
   1b012:	a1 01       	movw	r20, r2
   1b014:	c8 01       	movw	r24, r16
   1b016:	2a de       	rcall	.-940    	; 0x1ac6c <lif_add_ascii_file_as_e010_wrapper>
   1b018:	4b 01       	movw	r8, r22

    if(debuglevel & 0x400)
   1b01a:	7c 01       	movw	r14, r24
   1b01c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b020:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b024:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1b026:	40 c0       	rjmp	.+128    	; 0x1b0a8 <lif_add_ascii_file_as_e010+0x222>
   1b028:	8d e1       	ldi	r24, 0x1D	; 29
   1b02a:	96 e3       	ldi	r25, 0x36	; 54
   1b02c:	1f 92       	push	r1
   1b02e:	9f 93       	push	r25
   1b030:	8f 93       	push	r24
   1b032:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1b036:	df 92       	push	r13
   1b038:	cf 92       	push	r12
   1b03a:	86 e0       	ldi	r24, 0x06	; 6
   1b03c:	96 e3       	ldi	r25, 0x36	; 54
   1b03e:	1f 92       	push	r1
   1b040:	9f 93       	push	r25
   1b042:	8f 93       	push	r24
   1b044:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1b048:	7f 92       	push	r7
   1b04a:	6f 92       	push	r6
   1b04c:	8f ee       	ldi	r24, 0xEF	; 239
   1b04e:	95 e3       	ldi	r25, 0x35	; 53
   1b050:	1f 92       	push	r1
   1b052:	9f 93       	push	r25
   1b054:	8f 93       	push	r24
   1b056:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1b05a:	f5 01       	movw	r30, r10
   1b05c:	83 81       	ldd	r24, Z+3	; 0x03
   1b05e:	8f 93       	push	r24
   1b060:	82 81       	ldd	r24, Z+2	; 0x02
   1b062:	8f 93       	push	r24
   1b064:	81 81       	ldd	r24, Z+1	; 0x01
   1b066:	8f 93       	push	r24
   1b068:	80 81       	ld	r24, Z
   1b06a:	8f 93       	push	r24
   1b06c:	86 ed       	ldi	r24, 0xD6	; 214
   1b06e:	95 e3       	ldi	r25, 0x35	; 53
   1b070:	1f 92       	push	r1
   1b072:	9f 93       	push	r25
   1b074:	8f 93       	push	r24
   1b076:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1b07a:	f8 01       	movw	r30, r16
   1b07c:	e0 5a       	subi	r30, 0xA0	; 160
   1b07e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b080:	83 81       	ldd	r24, Z+3	; 0x03
   1b082:	8f 93       	push	r24
   1b084:	82 81       	ldd	r24, Z+2	; 0x02
   1b086:	8f 93       	push	r24
   1b088:	81 81       	ldd	r24, Z+1	; 0x01
   1b08a:	8f 93       	push	r24
   1b08c:	80 81       	ld	r24, Z
   1b08e:	8f 93       	push	r24
   1b090:	8d eb       	ldi	r24, 0xBD	; 189
   1b092:	95 e3       	ldi	r25, 0x35	; 53
   1b094:	1f 92       	push	r1
   1b096:	9f 93       	push	r25
   1b098:	8f 93       	push	r24
   1b09a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1b09e:	0f b6       	in	r0, 0x3f	; 63
   1b0a0:	f8 94       	cli
   1b0a2:	de bf       	out	0x3e, r29	; 62
   1b0a4:	0f be       	out	0x3f, r0	; 63
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1b0a6:	cd bf       	out	0x3d, r28	; 61
   1b0a8:	b3 01       	movw	r22, r6
   1b0aa:	c8 01       	movw	r24, r16
   1b0ac:	0e 94 1d cc 	call	0x1983a	; 0x1983a <lif_writedirindex>
   1b0b0:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b0b2:	21 f4       	brne	.+8      	; 0x1b0bc <lif_add_ascii_file_as_e010+0x236>
   1b0b4:	c8 01       	movw	r24, r16
   1b0b6:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
   1b0ba:	16 c0       	rjmp	.+44     	; 0x1b0e8 <lif_add_ascii_file_as_e010+0x262>
   1b0bc:	c8 01       	movw	r24, r16
   1b0be:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1b0c2:	ff 92       	push	r15
   1b0c4:	ef 92       	push	r14
   1b0c6:	9f 92       	push	r9
   1b0c8:	8f 92       	push	r8
   1b0ca:	8f ea       	ldi	r24, 0xAF	; 175
   1b0cc:	95 e3       	ldi	r25, 0x35	; 53
   1b0ce:	1f 92       	push	r1
   1b0d0:	9f 93       	push	r25
   1b0d2:	8f 93       	push	r24
   1b0d4:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>

    // Return file size
    return(bytes);
   1b0d8:	0f b6       	in	r0, 0x3f	; 63
   1b0da:	f8 94       	cli
   1b0dc:	de bf       	out	0x3e, r29	; 62
   1b0de:	0f be       	out	0x3f, r0	; 63
   1b0e0:	cd bf       	out	0x3d, r28	; 61
   1b0e2:	b4 01       	movw	r22, r8
   1b0e4:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1b0e6:	04 c0       	rjmp	.+8      	; 0x1b0f0 <lif_add_ascii_file_as_e010+0x26a>
   1b0e8:	6f ef       	ldi	r22, 0xFF	; 255
   1b0ea:	7f ef       	ldi	r23, 0xFF	; 255
   1b0ec:	8f ef       	ldi	r24, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1b0ee:	9f ef       	ldi	r25, 0xFF	; 255
   1b0f0:	e2 96       	adiw	r28, 0x32	; 50
   1b0f2:	e2 e1       	ldi	r30, 0x12	; 18
   1b0f4:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0001b0f8 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1b0f8:	ac e2       	ldi	r26, 0x2C	; 44
   1b0fa:	b2 e0       	ldi	r27, 0x02	; 2
   1b0fc:	e2 e8       	ldi	r30, 0x82	; 130
   1b0fe:	f8 ed       	ldi	r31, 0xD8	; 216
   1b100:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
   1b104:	f8 2e       	mov	r15, r24
   1b106:	b9 2e       	mov	r11, r25
   1b108:	16 2f       	mov	r17, r22
   1b10a:	07 2f       	mov	r16, r23
   1b10c:	c4 5e       	subi	r28, 0xE4	; 228
   1b10e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b110:	48 83       	st	Y, r20
   1b112:	cc 51       	subi	r28, 0x1C	; 28
   1b114:	d2 40       	sbci	r29, 0x02	; 2
   1b116:	e5 2e       	mov	r14, r21
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1b118:	61 e4       	ldi	r22, 0x41	; 65
   1b11a:	77 e0       	ldi	r23, 0x07	; 7
   1b11c:	9c d9       	rcall	.-3272   	; 0x1a456 <lif_open_volume>
   1b11e:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1b120:	00 97       	sbiw	r24, 0x00	; 0
   1b122:	51 f4       	brne	.+20     	; 0x1b138 <lif_extract_e010_as_ascii+0x40>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b124:	bf 92       	push	r11
   1b126:	ff 92       	push	r15
   1b128:	87 e9       	ldi	r24, 0x97	; 151
   1b12a:	95 e3       	ldi	r25, 0x35	; 53
   1b12c:	1f 92       	push	r1
   1b12e:	9f 93       	push	r25
   1b130:	8f 93       	push	r24
   1b132:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1b136:	11 c0       	rjmp	.+34     	; 0x1b15a <lif_extract_e010_as_ascii+0x62>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b138:	61 2f       	mov	r22, r17
   1b13a:	70 2f       	mov	r23, r16
   1b13c:	20 dc       	rcall	.-1984   	; 0x1a97e <lif_find_file>
    if(index == -1)
   1b13e:	01 96       	adiw	r24, 0x01	; 1
   1b140:	a1 f4       	brne	.+40     	; 0x1b16a <lif_extract_e010_as_ascii+0x72>
    {
        printf("LIF File not found:%s\n", lifname);
   1b142:	0f 93       	push	r16
   1b144:	1f 93       	push	r17
   1b146:	80 e8       	ldi	r24, 0x80	; 128
   1b148:	95 e3       	ldi	r25, 0x35	; 53
   1b14a:	1f 92       	push	r1
   1b14c:	9f 93       	push	r25
   1b14e:	8f 93       	push	r24
   1b150:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b154:	c6 01       	movw	r24, r12
   1b156:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b15a:	0f 90       	pop	r0
   1b15c:	0f 90       	pop	r0
   1b15e:	0f 90       	pop	r0
   1b160:	0f 90       	pop	r0
   1b162:	0f 90       	pop	r0
   1b164:	80 e0       	ldi	r24, 0x00	; 0
   1b166:	90 e0       	ldi	r25, 0x00	; 0
   1b168:	ae c2       	rjmp	.+1372   	; 0x1b6c6 <lif_extract_e010_as_ascii+0x5ce>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1b16a:	f6 01       	movw	r30, r12
   1b16c:	e6 5a       	subi	r30, 0xA6	; 166
   1b16e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b170:	80 81       	ld	r24, Z
   1b172:	91 81       	ldd	r25, Z+1	; 0x01
   1b174:	9c 01       	movw	r18, r24
   1b176:	2c 7f       	andi	r18, 0xFC	; 252
   1b178:	20 31       	cpi	r18, 0x10	; 16
   1b17a:	30 4e       	sbci	r19, 0xE0	; 224
   1b17c:	c9 f0       	breq	.+50     	; 0x1b1b0 <lif_extract_e010_as_ascii+0xb8>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1b17e:	9f 93       	push	r25
   1b180:	8f 93       	push	r24
   1b182:	ef 92       	push	r14
   1b184:	c4 5e       	subi	r28, 0xE4	; 228
   1b186:	dd 4f       	sbci	r29, 0xFD	; 253
   1b188:	58 81       	ld	r21, Y
   1b18a:	cc 51       	subi	r28, 0x1C	; 28
   1b18c:	d2 40       	sbci	r29, 0x02	; 2
   1b18e:	5f 93       	push	r21
   1b190:	88 e4       	ldi	r24, 0x48	; 72
   1b192:	95 e3       	ldi	r25, 0x35	; 53
   1b194:	1f 92       	push	r1
   1b196:	9f 93       	push	r25
   1b198:	8f 93       	push	r24
   1b19a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b19e:	c6 01       	movw	r24, r12
   1b1a0:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
        lif_closedir(LIF);
        return(0);
   1b1a4:	0f b6       	in	r0, 0x3f	; 63
   1b1a6:	f8 94       	cli
   1b1a8:	de bf       	out	0x3e, r29	; 62
   1b1aa:	0f be       	out	0x3f, r0	; 63
   1b1ac:	cd bf       	out	0x3d, r28	; 61
   1b1ae:	da cf       	rjmp	.-76     	; 0x1b164 <lif_extract_e010_as_ascii+0x6c>
    }

    start = LIF->DIR.FileStartSector;
   1b1b0:	f6 01       	movw	r30, r12
   1b1b2:	e4 5a       	subi	r30, 0xA4	; 164
   1b1b4:	ff 4f       	sbci	r31, 0xFF	; 255
   1b1b6:	80 80       	ld	r8, Z
   1b1b8:	91 80       	ldd	r9, Z+1	; 0x01
   1b1ba:	a2 80       	ldd	r10, Z+2	; 0x02
   1b1bc:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1b1be:	34 96       	adiw	r30, 0x04	; 4
   1b1c0:	80 81       	ld	r24, Z
   1b1c2:	91 81       	ldd	r25, Z+1	; 0x01
   1b1c4:	a2 81       	ldd	r26, Z+2	; 0x02
   1b1c6:	b3 81       	ldd	r27, Z+3	; 0x03
   1b1c8:	a5 01       	movw	r20, r10
   1b1ca:	94 01       	movw	r18, r8
   1b1cc:	28 0f       	add	r18, r24
   1b1ce:	39 1f       	adc	r19, r25
   1b1d0:	4a 1f       	adc	r20, r26
   1b1d2:	5b 1f       	adc	r21, r27
   1b1d4:	c9 5d       	subi	r28, 0xD9	; 217
   1b1d6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1d8:	28 83       	st	Y, r18
   1b1da:	39 83       	std	Y+1, r19	; 0x01
   1b1dc:	4a 83       	std	Y+2, r20	; 0x02
   1b1de:	5b 83       	std	Y+3, r21	; 0x03
   1b1e0:	c7 52       	subi	r28, 0x27	; 39
   1b1e2:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1b1e4:	c6 01       	movw	r24, r12
   1b1e6:	8c 59       	subi	r24, 0x9C	; 156
   1b1e8:	9f 4f       	sbci	r25, 0xFF	; 255
   1b1ea:	0e 94 68 c6 	call	0x18cd0	; 0x18cd0 <lif_lifbcd2time>
   1b1ee:	c3 5e       	subi	r28, 0xE3	; 227
   1b1f0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1f2:	68 83       	st	Y, r22
   1b1f4:	79 83       	std	Y+1, r23	; 0x01
   1b1f6:	8a 83       	std	Y+2, r24	; 0x02
   1b1f8:	9b 83       	std	Y+3, r25	; 0x03
   1b1fa:	cd 51       	subi	r28, 0x1D	; 29
   1b1fc:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1b1fe:	ba 2d       	mov	r27, r10
   1b200:	a9 2d       	mov	r26, r9
   1b202:	98 2d       	mov	r25, r8
   1b204:	88 27       	eor	r24, r24
   1b206:	cf 5e       	subi	r28, 0xEF	; 239
   1b208:	dd 4f       	sbci	r29, 0xFD	; 253
   1b20a:	88 83       	st	Y, r24
   1b20c:	99 83       	std	Y+1, r25	; 0x01
   1b20e:	aa 83       	std	Y+2, r26	; 0x02
   1b210:	bb 83       	std	Y+3, r27	; 0x03
   1b212:	c1 51       	subi	r28, 0x11	; 17
   1b214:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1b216:	64 e9       	ldi	r22, 0x94	; 148
   1b218:	78 e0       	ldi	r23, 0x08	; 8
   1b21a:	c4 5e       	subi	r28, 0xE4	; 228
   1b21c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b21e:	88 81       	ld	r24, Y
   1b220:	cc 51       	subi	r28, 0x1C	; 28
   1b222:	d2 40       	sbci	r29, 0x02	; 2
   1b224:	9e 2d       	mov	r25, r14
   1b226:	0e 94 15 c2 	call	0x1842a	; 0x1842a <lif_open>
   1b22a:	c6 5e       	subi	r28, 0xE6	; 230
   1b22c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b22e:	99 83       	std	Y+1, r25	; 0x01
   1b230:	88 83       	st	Y, r24
   1b232:	ca 51       	subi	r28, 0x1A	; 26
   1b234:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1b236:	89 2b       	or	r24, r25
   1b238:	21 f4       	brne	.+8      	; 0x1b242 <lif_extract_e010_as_ascii+0x14a>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b23a:	c6 01       	movw	r24, r12
   1b23c:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
   1b240:	91 cf       	rjmp	.-222    	; 0x1b164 <lif_extract_e010_as_ascii+0x6c>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b242:	ef 92       	push	r14
   1b244:	c4 5e       	subi	r28, 0xE4	; 228
   1b246:	dd 4f       	sbci	r29, 0xFD	; 253
   1b248:	98 81       	ld	r25, Y
   1b24a:	cc 51       	subi	r28, 0x1C	; 28
   1b24c:	d2 40       	sbci	r29, 0x02	; 2
   1b24e:	9f 93       	push	r25
   1b250:	88 e3       	ldi	r24, 0x38	; 56
   1b252:	95 e3       	ldi	r25, 0x35	; 53
   1b254:	1f 92       	push	r1
   1b256:	9f 93       	push	r25
   1b258:	8f 93       	push	r24
   1b25a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b25e:	0f 90       	pop	r0
   1b260:	0f 90       	pop	r0
   1b262:	0f 90       	pop	r0
   1b264:	0f 90       	pop	r0
   1b266:	0f 90       	pop	r0
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
    wind = 0;
   1b268:	81 2c       	mov	r8, r1
   1b26a:	91 2c       	mov	r9, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b26c:	c8 5e       	subi	r28, 0xE8	; 232
   1b26e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b270:	19 82       	std	Y+1, r1	; 0x01
   1b272:	18 82       	st	Y, r1
   1b274:	c8 51       	subi	r28, 0x18	; 24
   1b276:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b278:	a1 e0       	ldi	r26, 0x01	; 1
   1b27a:	cb 5e       	subi	r28, 0xEB	; 235
   1b27c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b27e:	a8 83       	st	Y, r26
   1b280:	c5 51       	subi	r28, 0x15	; 21
   1b282:	d2 40       	sbci	r29, 0x02	; 2
   1b284:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b286:	41 2c       	mov	r4, r1
   1b288:	51 2c       	mov	r5, r1
   1b28a:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b28c:	87 e7       	ldi	r24, 0x77	; 119
   1b28e:	94 e3       	ldi	r25, 0x34	; 52
   1b290:	9c 01       	movw	r18, r24
   1b292:	40 e0       	ldi	r20, 0x00	; 0
   1b294:	cf 5d       	subi	r28, 0xDF	; 223
   1b296:	dd 4f       	sbci	r29, 0xFD	; 253
   1b298:	28 83       	st	Y, r18
   1b29a:	39 83       	std	Y+1, r19	; 0x01
   1b29c:	4a 83       	std	Y+2, r20	; 0x02
   1b29e:	c1 52       	subi	r28, 0x21	; 33
   1b2a0:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b2a2:	85 e8       	ldi	r24, 0x85	; 133
   1b2a4:	94 e3       	ldi	r25, 0x34	; 52
   1b2a6:	9c 01       	movw	r18, r24
   1b2a8:	40 e0       	ldi	r20, 0x00	; 0
   1b2aa:	cc 5d       	subi	r28, 0xDC	; 220
   1b2ac:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2ae:	28 83       	st	Y, r18
   1b2b0:	39 83       	std	Y+1, r19	; 0x01
   1b2b2:	4a 83       	std	Y+2, r20	; 0x02
   1b2b4:	c4 52       	subi	r28, 0x24	; 36
   1b2b6:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b2b8:	cf 5e       	subi	r28, 0xEF	; 239
   1b2ba:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2bc:	28 81       	ld	r18, Y
   1b2be:	39 81       	ldd	r19, Y+1	; 0x01
   1b2c0:	4a 81       	ldd	r20, Y+2	; 0x02
   1b2c2:	5b 81       	ldd	r21, Y+3	; 0x03
   1b2c4:	c1 51       	subi	r28, 0x11	; 17
   1b2c6:	d2 40       	sbci	r29, 0x02	; 2
   1b2c8:	bb 27       	eor	r27, r27
   1b2ca:	a5 2f       	mov	r26, r21
   1b2cc:	94 2f       	mov	r25, r20
   1b2ce:	83 2f       	mov	r24, r19
   1b2d0:	c9 5d       	subi	r28, 0xD9	; 217
   1b2d2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2d4:	28 81       	ld	r18, Y
   1b2d6:	39 81       	ldd	r19, Y+1	; 0x01
   1b2d8:	4a 81       	ldd	r20, Y+2	; 0x02
   1b2da:	5b 81       	ldd	r21, Y+3	; 0x03
   1b2dc:	c7 52       	subi	r28, 0x27	; 39
   1b2de:	d2 40       	sbci	r29, 0x02	; 2
   1b2e0:	28 17       	cp	r18, r24
   1b2e2:	39 07       	cpc	r19, r25
   1b2e4:	4a 07       	cpc	r20, r26
   1b2e6:	5b 07       	cpc	r21, r27
   1b2e8:	08 f4       	brcc	.+2      	; 0x1b2ec <lif_extract_e010_as_ascii+0x1f4>
   1b2ea:	76 c1       	rjmp	.+748    	; 0x1b5d8 <lif_extract_e010_as_ascii+0x4e0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b2ec:	00 e0       	ldi	r16, 0x00	; 0
   1b2ee:	11 e0       	ldi	r17, 0x01	; 1
   1b2f0:	cf 5e       	subi	r28, 0xEF	; 239
   1b2f2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2f4:	28 81       	ld	r18, Y
   1b2f6:	39 81       	ldd	r19, Y+1	; 0x01
   1b2f8:	4a 81       	ldd	r20, Y+2	; 0x02
   1b2fa:	5b 81       	ldd	r21, Y+3	; 0x03
   1b2fc:	c1 51       	subi	r28, 0x11	; 17
   1b2fe:	d2 40       	sbci	r29, 0x02	; 2
   1b300:	be 01       	movw	r22, r28
   1b302:	6b 5f       	subi	r22, 0xFB	; 251
   1b304:	7e 4f       	sbci	r23, 0xFE	; 254
   1b306:	c6 01       	movw	r24, r12
   1b308:	0e 94 9b c2 	call	0x18536	; 0x18536 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b30c:	6f 3f       	cpi	r22, 0xFF	; 255
   1b30e:	71 05       	cpc	r23, r1
   1b310:	09 f0       	breq	.+2      	; 0x1b314 <lif_extract_e010_as_ascii+0x21c>
   1b312:	0c f4       	brge	.+2      	; 0x1b316 <lif_extract_e010_as_ascii+0x21e>
   1b314:	5b c1       	rjmp	.+694    	; 0x1b5cc <lif_extract_e010_as_ascii+0x4d4>
   1b316:	00 e0       	ldi	r16, 0x00	; 0
   1b318:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b31a:	c8 5e       	subi	r28, 0xE8	; 232
   1b31c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b31e:	a8 81       	ld	r26, Y
   1b320:	b9 81       	ldd	r27, Y+1	; 0x01
   1b322:	c8 51       	subi	r28, 0x18	; 24
   1b324:	d2 40       	sbci	r29, 0x02	; 2
   1b326:	ab 2b       	or	r26, r27
   1b328:	09 f0       	breq	.+2      	; 0x1b32c <lif_extract_e010_as_ascii+0x234>
   1b32a:	3c c1       	rjmp	.+632    	; 0x1b5a4 <lif_extract_e010_as_ascii+0x4ac>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b32c:	e5 e0       	ldi	r30, 0x05	; 5
   1b32e:	f1 e0       	ldi	r31, 0x01	; 1
   1b330:	ec 0f       	add	r30, r28
   1b332:	fd 1f       	adc	r31, r29
   1b334:	e0 0f       	add	r30, r16
   1b336:	f1 1f       	adc	r31, r17
   1b338:	80 81       	ld	r24, Z
   1b33a:	98 2f       	mov	r25, r24
   1b33c:	9f 7e       	andi	r25, 0xEF	; 239
   1b33e:	9f 3c       	cpi	r25, 0xCF	; 207
   1b340:	11 f0       	breq	.+4      	; 0x1b346 <lif_extract_e010_as_ascii+0x24e>
   1b342:	8f 36       	cpi	r24, 0x6F	; 111
   1b344:	d9 f5       	brne	.+118    	; 0x1b3bc <lif_extract_e010_as_ascii+0x2c4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b346:	e5 e0       	ldi	r30, 0x05	; 5
   1b348:	f1 e0       	ldi	r31, 0x01	; 1
   1b34a:	ec 0f       	add	r30, r28
   1b34c:	fd 1f       	adc	r31, r29
   1b34e:	e0 0f       	add	r30, r16
   1b350:	f1 1f       	adc	r31, r17
   1b352:	21 80       	ldd	r2, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1b354:	f8 01       	movw	r30, r16
   1b356:	32 96       	adiw	r30, 0x02	; 2
   1b358:	45 e0       	ldi	r20, 0x05	; 5
   1b35a:	51 e0       	ldi	r21, 0x01	; 1
   1b35c:	4c 0f       	add	r20, r28
   1b35e:	5d 1f       	adc	r21, r29
   1b360:	e4 0f       	add	r30, r20
   1b362:	f5 1f       	adc	r31, r21
   1b364:	0d 5f       	subi	r16, 0xFD	; 253
   1b366:	1f 4f       	sbci	r17, 0xFF	; 255
   1b368:	80 81       	ld	r24, Z
   1b36a:	31 2c       	mov	r3, r1
   1b36c:	38 2a       	or	r3, r24
                // EOF ?
                if(len == 0)
   1b36e:	21 14       	cp	r2, r1
   1b370:	31 04       	cpc	r3, r1
   1b372:	09 f4       	brne	.+2      	; 0x1b376 <lif_extract_e010_as_ascii+0x27e>
   1b374:	0f c1       	rjmp	.+542    	; 0x1b594 <lif_extract_e010_as_ascii+0x49c>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b376:	5f ef       	ldi	r21, 0xFF	; 255
   1b378:	25 16       	cp	r2, r21
   1b37a:	31 04       	cpc	r3, r1
   1b37c:	09 f0       	breq	.+2      	; 0x1b380 <lif_extract_e010_as_ascii+0x288>
   1b37e:	7c f4       	brge	.+30     	; 0x1b39e <lif_extract_e010_as_ascii+0x2a6>
   1b380:	ca 5e       	subi	r28, 0xEA	; 234
   1b382:	dd 4f       	sbci	r29, 0xFD	; 253
   1b384:	19 82       	std	Y+1, r1	; 0x01
   1b386:	18 82       	st	Y, r1
   1b388:	c6 51       	subi	r28, 0x16	; 22
   1b38a:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b38c:	c1 01       	movw	r24, r2
   1b38e:	01 97       	sbiw	r24, 0x01	; 1
   1b390:	c5 5d       	subi	r28, 0xD5	; 213
   1b392:	dd 4f       	sbci	r29, 0xFD	; 253
   1b394:	99 83       	std	Y+1, r25	; 0x01
   1b396:	88 83       	st	Y, r24
   1b398:	cb 52       	subi	r28, 0x2B	; 43
   1b39a:	d2 40       	sbci	r29, 0x02	; 2
   1b39c:	7b c0       	rjmp	.+246    	; 0x1b494 <lif_extract_e010_as_ascii+0x39c>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b39e:	3f 92       	push	r3
   1b3a0:	2f 92       	push	r2
   1b3a2:	83 e0       	ldi	r24, 0x03	; 3
   1b3a4:	95 e3       	ldi	r25, 0x35	; 53
   1b3a6:	1f 92       	push	r1
   1b3a8:	9f 93       	push	r25
   1b3aa:	8f 93       	push	r24
   1b3ac:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
                    status = 0;
                    done = 1;
                    break;
   1b3b0:	0f 90       	pop	r0
   1b3b2:	0f 90       	pop	r0
   1b3b4:	0f 90       	pop	r0
   1b3b6:	0f 90       	pop	r0
   1b3b8:	0f 90       	pop	r0
   1b3ba:	2b c0       	rjmp	.+86     	; 0x1b412 <lif_extract_e010_as_ascii+0x31a>
                }
            }
            else if(buf[ind] == 0xEF)
   1b3bc:	8f 3e       	cpi	r24, 0xEF	; 239
   1b3be:	09 f4       	brne	.+2      	; 0x1b3c2 <lif_extract_e010_as_ascii+0x2ca>
   1b3c0:	f1 c0       	rjmp	.+482    	; 0x1b5a4 <lif_extract_e010_as_ascii+0x4ac>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b3c2:	1f 93       	push	r17
   1b3c4:	0f 93       	push	r16
   1b3c6:	cc 5e       	subi	r28, 0xEC	; 236
   1b3c8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3ca:	b8 81       	ld	r27, Y
   1b3cc:	c4 51       	subi	r28, 0x14	; 20
   1b3ce:	d2 40       	sbci	r29, 0x02	; 2
   1b3d0:	bf 93       	push	r27
   1b3d2:	cd 5e       	subi	r28, 0xED	; 237
   1b3d4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3d6:	28 81       	ld	r18, Y
   1b3d8:	c3 51       	subi	r28, 0x13	; 19
   1b3da:	d2 40       	sbci	r29, 0x02	; 2
   1b3dc:	2f 93       	push	r18
   1b3de:	ce 5e       	subi	r28, 0xEE	; 238
   1b3e0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3e2:	38 81       	ld	r19, Y
   1b3e4:	c2 51       	subi	r28, 0x12	; 18
   1b3e6:	d2 40       	sbci	r29, 0x02	; 2
   1b3e8:	3f 93       	push	r19
   1b3ea:	cf 5e       	subi	r28, 0xEF	; 239
   1b3ec:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3ee:	48 81       	ld	r20, Y
   1b3f0:	c1 51       	subi	r28, 0x11	; 17
   1b3f2:	d2 40       	sbci	r29, 0x02	; 2
   1b3f4:	4f 93       	push	r20
   1b3f6:	1f 92       	push	r1
   1b3f8:	8f 93       	push	r24
   1b3fa:	8d ea       	ldi	r24, 0xAD	; 173
   1b3fc:	94 e3       	ldi	r25, 0x34	; 52
   1b3fe:	1f 92       	push	r1
   1b400:	9f 93       	push	r25
   1b402:	8f 93       	push	r24
   1b404:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
                status = 0;
                done = 1;
                break;
   1b408:	0f b6       	in	r0, 0x3f	; 63
   1b40a:	f8 94       	cli
   1b40c:	de bf       	out	0x3e, r29	; 62
   1b40e:	0f be       	out	0x3f, r0	; 63
   1b410:	cd bf       	out	0x3d, r28	; 61
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
                done = 1;
   1b412:	a1 e0       	ldi	r26, 0x01	; 1
   1b414:	b0 e0       	ldi	r27, 0x00	; 0
   1b416:	c8 5e       	subi	r28, 0xE8	; 232
   1b418:	dd 4f       	sbci	r29, 0xFD	; 253
   1b41a:	b9 83       	std	Y+1, r27	; 0x01
   1b41c:	a8 83       	st	Y, r26
   1b41e:	c8 51       	subi	r28, 0x18	; 24
   1b420:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b422:	cb 5e       	subi	r28, 0xEB	; 235
   1b424:	dd 4f       	sbci	r29, 0xFD	; 253
   1b426:	18 82       	st	Y, r1
   1b428:	c5 51       	subi	r28, 0x15	; 21
   1b42a:	d2 40       	sbci	r29, 0x02	; 2
   1b42c:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b42e:	ba c0       	rjmp	.+372    	; 0x1b5a4 <lif_extract_e010_as_ascii+0x4ac>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b430:	0f 3f       	cpi	r16, 0xFF	; 255
   1b432:	11 05       	cpc	r17, r1
   1b434:	11 f0       	breq	.+4      	; 0x1b43a <lif_extract_e010_as_ascii+0x342>
   1b436:	0c f0       	brlt	.+2      	; 0x1b43a <lif_extract_e010_as_ascii+0x342>
   1b438:	b5 c0       	rjmp	.+362    	; 0x1b5a4 <lif_extract_e010_as_ascii+0x4ac>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b43a:	e5 e0       	ldi	r30, 0x05	; 5
   1b43c:	f1 e0       	ldi	r31, 0x01	; 1
   1b43e:	ec 0f       	add	r30, r28
   1b440:	fd 1f       	adc	r31, r29
   1b442:	e0 0f       	add	r30, r16
   1b444:	f1 1f       	adc	r31, r17
   1b446:	20 81       	ld	r18, Z
   1b448:	a4 01       	movw	r20, r8
   1b44a:	4f 5f       	subi	r20, 0xFF	; 255
   1b44c:	5f 4f       	sbci	r21, 0xFF	; 255
   1b44e:	5a 01       	movw	r10, r20
   1b450:	2d 30       	cpi	r18, 0x0D	; 13
   1b452:	51 f1       	breq	.+84     	; 0x1b4a8 <lif_extract_e010_as_ascii+0x3b0>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b454:	9a 2d       	mov	r25, r10
   1b456:	8b 2d       	mov	r24, r11
   1b458:	0f 5f       	subi	r16, 0xFF	; 255
   1b45a:	1f 4f       	sbci	r17, 0xFF	; 255
   1b45c:	e1 e0       	ldi	r30, 0x01	; 1
   1b45e:	f0 e0       	ldi	r31, 0x00	; 0
   1b460:	ec 0f       	add	r30, r28
   1b462:	fd 1f       	adc	r31, r29
   1b464:	e8 0d       	add	r30, r8
   1b466:	f9 1d       	adc	r31, r9
   1b468:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b46a:	2f ef       	ldi	r18, 0xFF	; 255
   1b46c:	a2 16       	cp	r10, r18
   1b46e:	b1 04       	cpc	r11, r1
   1b470:	09 f0       	breq	.+2      	; 0x1b474 <lif_extract_e010_as_ascii+0x37c>
   1b472:	ac f5       	brge	.+106    	; 0x1b4de <lif_extract_e010_as_ascii+0x3e6>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b474:	ca 5e       	subi	r28, 0xEA	; 234
   1b476:	dd 4f       	sbci	r29, 0xFD	; 253
   1b478:	48 81       	ld	r20, Y
   1b47a:	59 81       	ldd	r21, Y+1	; 0x01
   1b47c:	c6 51       	subi	r28, 0x16	; 22
   1b47e:	d2 40       	sbci	r29, 0x02	; 2
   1b480:	4f 5f       	subi	r20, 0xFF	; 255
   1b482:	5f 4f       	sbci	r21, 0xFF	; 255
   1b484:	ca 5e       	subi	r28, 0xEA	; 234
   1b486:	dd 4f       	sbci	r29, 0xFD	; 253
   1b488:	59 83       	std	Y+1, r21	; 0x01
   1b48a:	48 83       	st	Y, r20
   1b48c:	c6 51       	subi	r28, 0x16	; 22
   1b48e:	d2 40       	sbci	r29, 0x02	; 2
   1b490:	89 2e       	mov	r8, r25
   1b492:	98 2e       	mov	r9, r24
   1b494:	ca 5e       	subi	r28, 0xEA	; 234
   1b496:	dd 4f       	sbci	r29, 0xFD	; 253
   1b498:	88 81       	ld	r24, Y
   1b49a:	99 81       	ldd	r25, Y+1	; 0x01
   1b49c:	c6 51       	subi	r28, 0x16	; 22
   1b49e:	d2 40       	sbci	r29, 0x02	; 2
   1b4a0:	82 15       	cp	r24, r2
   1b4a2:	93 05       	cpc	r25, r3
   1b4a4:	2c f2       	brlt	.-118    	; 0x1b430 <lif_extract_e010_as_ascii+0x338>
   1b4a6:	70 c0       	rjmp	.+224    	; 0x1b588 <lif_extract_e010_as_ascii+0x490>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b4a8:	ca 5e       	subi	r28, 0xEA	; 234
   1b4aa:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4ac:	88 81       	ld	r24, Y
   1b4ae:	99 81       	ldd	r25, Y+1	; 0x01
   1b4b0:	c6 51       	subi	r28, 0x16	; 22
   1b4b2:	d2 40       	sbci	r29, 0x02	; 2
   1b4b4:	c5 5d       	subi	r28, 0xD5	; 213
   1b4b6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4b8:	a8 81       	ld	r26, Y
   1b4ba:	b9 81       	ldd	r27, Y+1	; 0x01
   1b4bc:	cb 52       	subi	r28, 0x2B	; 43
   1b4be:	d2 40       	sbci	r29, 0x02	; 2
   1b4c0:	8a 17       	cp	r24, r26
   1b4c2:	9b 07       	cpc	r25, r27
   1b4c4:	39 f6       	brne	.-114    	; 0x1b454 <lif_extract_e010_as_ascii+0x35c>
                {
                    wbuf[wind++] = '\n';
   1b4c6:	e1 e0       	ldi	r30, 0x01	; 1
   1b4c8:	f0 e0       	ldi	r31, 0x00	; 0
   1b4ca:	ec 0f       	add	r30, r28
   1b4cc:	fd 1f       	adc	r31, r29
   1b4ce:	e8 0d       	add	r30, r8
   1b4d0:	f9 1d       	adc	r31, r9
   1b4d2:	ba e0       	ldi	r27, 0x0A	; 10
   1b4d4:	b0 83       	st	Z, r27
                    ++ind;
   1b4d6:	0f 5f       	subi	r16, 0xFF	; 255
   1b4d8:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b4da:	4a 01       	movw	r8, r20
                    ++ind;
                    break;
   1b4dc:	55 c0       	rjmp	.+170    	; 0x1b588 <lif_extract_e010_as_ascii+0x490>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b4de:	c6 5e       	subi	r28, 0xE6	; 230
   1b4e0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4e2:	28 81       	ld	r18, Y
   1b4e4:	39 81       	ldd	r19, Y+1	; 0x01
   1b4e6:	ca 51       	subi	r28, 0x1A	; 26
   1b4e8:	d2 40       	sbci	r29, 0x02	; 2
   1b4ea:	a5 01       	movw	r20, r10
   1b4ec:	61 e0       	ldi	r22, 0x01	; 1
   1b4ee:	70 e0       	ldi	r23, 0x00	; 0
   1b4f0:	ce 01       	movw	r24, r28
   1b4f2:	01 96       	adiw	r24, 0x01	; 1
   1b4f4:	0e 94 b6 7c 	call	0xf96c	; 0xf96c <fwrite>
                    if(size < wind)
   1b4f8:	8a 15       	cp	r24, r10
   1b4fa:	9b 05       	cpc	r25, r11
   1b4fc:	14 f5       	brge	.+68     	; 0x1b542 <lif_extract_e010_as_ascii+0x44a>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b4fe:	1f 92       	push	r1
   1b500:	cb 5d       	subi	r28, 0xDB	; 219
   1b502:	dd 4f       	sbci	r29, 0xFD	; 253
   1b504:	38 81       	ld	r19, Y
   1b506:	c5 52       	subi	r28, 0x25	; 37
   1b508:	d2 40       	sbci	r29, 0x02	; 2
   1b50a:	3f 93       	push	r19
   1b50c:	cc 5d       	subi	r28, 0xDC	; 220
   1b50e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b510:	48 81       	ld	r20, Y
   1b512:	c4 52       	subi	r28, 0x24	; 36
   1b514:	d2 40       	sbci	r29, 0x02	; 2
   1b516:	4f 93       	push	r20
   1b518:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
                        status = 0;
                        done = 1;
                        break;
   1b51c:	0f 90       	pop	r0
   1b51e:	0f 90       	pop	r0
   1b520:	0f 90       	pop	r0
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b522:	45 01       	movw	r8, r10
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b524:	81 e0       	ldi	r24, 0x01	; 1
   1b526:	90 e0       	ldi	r25, 0x00	; 0
   1b528:	c8 5e       	subi	r28, 0xE8	; 232
   1b52a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b52c:	99 83       	std	Y+1, r25	; 0x01
   1b52e:	88 83       	st	Y, r24
   1b530:	c8 51       	subi	r28, 0x18	; 24
   1b532:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b534:	cb 5e       	subi	r28, 0xEB	; 235
   1b536:	dd 4f       	sbci	r29, 0xFD	; 253
   1b538:	18 82       	st	Y, r1
   1b53a:	c5 51       	subi	r28, 0x15	; 21
   1b53c:	d2 40       	sbci	r29, 0x02	; 2
   1b53e:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b540:	23 c0       	rjmp	.+70     	; 0x1b588 <lif_extract_e010_as_ascii+0x490>
                    }
                    bytes += size;
   1b542:	09 2e       	mov	r0, r25
   1b544:	00 0c       	add	r0, r0
   1b546:	aa 0b       	sbc	r26, r26
   1b548:	bb 0b       	sbc	r27, r27
   1b54a:	48 0e       	add	r4, r24
   1b54c:	59 1e       	adc	r5, r25
   1b54e:	6a 1e       	adc	r6, r26
   1b550:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b552:	7f 92       	push	r7
   1b554:	6f 92       	push	r6
   1b556:	5f 92       	push	r5
   1b558:	4f 92       	push	r4
   1b55a:	1f 92       	push	r1
   1b55c:	ce 5d       	subi	r28, 0xDE	; 222
   1b55e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b560:	98 81       	ld	r25, Y
   1b562:	c2 52       	subi	r28, 0x22	; 34
   1b564:	d2 40       	sbci	r29, 0x02	; 2
   1b566:	9f 93       	push	r25
   1b568:	cf 5d       	subi	r28, 0xDF	; 223
   1b56a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b56c:	a8 81       	ld	r26, Y
   1b56e:	c1 52       	subi	r28, 0x21	; 33
   1b570:	d2 40       	sbci	r29, 0x02	; 2
   1b572:	af 93       	push	r26
   1b574:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1b578:	0f b6       	in	r0, 0x3f	; 63
   1b57a:	f8 94       	cli
   1b57c:	de bf       	out	0x3e, r29	; 62
   1b57e:	0f be       	out	0x3f, r0	; 63
   1b580:	cd bf       	out	0x3d, r28	; 61
                    wind = 0;
   1b582:	90 e0       	ldi	r25, 0x00	; 0
   1b584:	80 e0       	ldi	r24, 0x00	; 0
   1b586:	76 cf       	rjmp	.-276    	; 0x1b474 <lif_extract_e010_as_ascii+0x37c>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b588:	0f 3f       	cpi	r16, 0xFF	; 255
   1b58a:	11 05       	cpc	r17, r1
   1b58c:	09 f0       	breq	.+2      	; 0x1b590 <lif_extract_e010_as_ascii+0x498>
   1b58e:	0c f4       	brge	.+2      	; 0x1b592 <lif_extract_e010_as_ascii+0x49a>
   1b590:	c4 ce       	rjmp	.-632    	; 0x1b31a <lif_extract_e010_as_ascii+0x222>
   1b592:	08 c0       	rjmp	.+16     	; 0x1b5a4 <lif_extract_e010_as_ascii+0x4ac>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1b594:	21 e0       	ldi	r18, 0x01	; 1
   1b596:	30 e0       	ldi	r19, 0x00	; 0
   1b598:	c8 5e       	subi	r28, 0xE8	; 232
   1b59a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b59c:	39 83       	std	Y+1, r19	; 0x01
   1b59e:	28 83       	st	Y, r18
   1b5a0:	c8 51       	subi	r28, 0x18	; 24
   1b5a2:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b5a4:	cf 5e       	subi	r28, 0xEF	; 239
   1b5a6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5a8:	88 81       	ld	r24, Y
   1b5aa:	99 81       	ldd	r25, Y+1	; 0x01
   1b5ac:	aa 81       	ldd	r26, Y+2	; 0x02
   1b5ae:	bb 81       	ldd	r27, Y+3	; 0x03
   1b5b0:	c1 51       	subi	r28, 0x11	; 17
   1b5b2:	d2 40       	sbci	r29, 0x02	; 2
   1b5b4:	9f 5f       	subi	r25, 0xFF	; 255
   1b5b6:	af 4f       	sbci	r26, 0xFF	; 255
   1b5b8:	bf 4f       	sbci	r27, 0xFF	; 255
   1b5ba:	cf 5e       	subi	r28, 0xEF	; 239
   1b5bc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5be:	88 83       	st	Y, r24
   1b5c0:	99 83       	std	Y+1, r25	; 0x01
   1b5c2:	aa 83       	std	Y+2, r26	; 0x02
   1b5c4:	bb 83       	std	Y+3, r27	; 0x03
   1b5c6:	c1 51       	subi	r28, 0x11	; 17
   1b5c8:	d2 40       	sbci	r29, 0x02	; 2
   1b5ca:	76 ce       	rjmp	.-788    	; 0x1b2b8 <lif_extract_e010_as_ascii+0x1c0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b5cc:	cb 5e       	subi	r28, 0xEB	; 235
   1b5ce:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5d0:	18 82       	st	Y, r1
   1b5d2:	c5 51       	subi	r28, 0x15	; 21
   1b5d4:	d2 40       	sbci	r29, 0x02	; 2
   1b5d6:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5d8:	c6 01       	movw	r24, r12
   1b5da:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1b5de:	81 14       	cp	r8, r1
   1b5e0:	91 04       	cpc	r9, r1
   1b5e2:	51 f1       	breq	.+84     	; 0x1b638 <lif_extract_e010_as_ascii+0x540>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b5e4:	c6 5e       	subi	r28, 0xE6	; 230
   1b5e6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5e8:	28 81       	ld	r18, Y
   1b5ea:	39 81       	ldd	r19, Y+1	; 0x01
   1b5ec:	ca 51       	subi	r28, 0x1A	; 26
   1b5ee:	d2 40       	sbci	r29, 0x02	; 2
   1b5f0:	a4 01       	movw	r20, r8
   1b5f2:	61 e0       	ldi	r22, 0x01	; 1
   1b5f4:	70 e0       	ldi	r23, 0x00	; 0
   1b5f6:	ce 01       	movw	r24, r28
   1b5f8:	01 96       	adiw	r24, 0x01	; 1
   1b5fa:	0e 94 b6 7c 	call	0xf96c	; 0xf96c <fwrite>
   1b5fe:	8c 01       	movw	r16, r24
        if(size < wind)
   1b600:	88 15       	cp	r24, r8
   1b602:	99 05       	cpc	r25, r9
   1b604:	84 f4       	brge	.+32     	; 0x1b626 <lif_extract_e010_as_ascii+0x52e>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b606:	8f e4       	ldi	r24, 0x4F	; 79
   1b608:	94 e3       	ldi	r25, 0x34	; 52
   1b60a:	1f 92       	push	r1
   1b60c:	9f 93       	push	r25
   1b60e:	8f 93       	push	r24
   1b610:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1b614:	0f 90       	pop	r0
   1b616:	0f 90       	pop	r0
   1b618:	0f 90       	pop	r0
            status = 0;
   1b61a:	cb 5e       	subi	r28, 0xEB	; 235
   1b61c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b61e:	18 82       	st	Y, r1
   1b620:	c5 51       	subi	r28, 0x15	; 21
   1b622:	d2 40       	sbci	r29, 0x02	; 2
   1b624:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b626:	c8 01       	movw	r24, r16
   1b628:	01 2e       	mov	r0, r17
   1b62a:	00 0c       	add	r0, r0
   1b62c:	aa 0b       	sbc	r26, r26
   1b62e:	bb 0b       	sbc	r27, r27
   1b630:	48 0e       	add	r4, r24
   1b632:	59 1e       	adc	r5, r25
   1b634:	6a 1e       	adc	r6, r26
   1b636:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b638:	c6 5e       	subi	r28, 0xE6	; 230
   1b63a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b63c:	88 81       	ld	r24, Y
   1b63e:	99 81       	ldd	r25, Y+1	; 0x01
   1b640:	ca 51       	subi	r28, 0x1A	; 26
   1b642:	d2 40       	sbci	r29, 0x02	; 2
   1b644:	0e 94 38 7d 	call	0xfa70	; 0xfa70 <fclose>
    if(t)
   1b648:	c3 5e       	subi	r28, 0xE3	; 227
   1b64a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b64c:	88 81       	ld	r24, Y
   1b64e:	99 81       	ldd	r25, Y+1	; 0x01
   1b650:	aa 81       	ldd	r26, Y+2	; 0x02
   1b652:	bb 81       	ldd	r27, Y+3	; 0x03
   1b654:	cd 51       	subi	r28, 0x1D	; 29
   1b656:	d2 40       	sbci	r29, 0x02	; 2
   1b658:	00 97       	sbiw	r24, 0x00	; 0
   1b65a:	a1 05       	cpc	r26, r1
   1b65c:	b1 05       	cpc	r27, r1
   1b65e:	d9 f0       	breq	.+54     	; 0x1b696 <lif_extract_e010_as_ascii+0x59e>
    {
        struct utimbuf times;
        times.modtime = t;
   1b660:	c3 5f       	subi	r28, 0xF3	; 243
   1b662:	dd 4f       	sbci	r29, 0xFD	; 253
   1b664:	88 83       	st	Y, r24
   1b666:	99 83       	std	Y+1, r25	; 0x01
   1b668:	aa 83       	std	Y+2, r26	; 0x02
   1b66a:	bb 83       	std	Y+3, r27	; 0x03
   1b66c:	cd 50       	subi	r28, 0x0D	; 13
   1b66e:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b670:	c7 5f       	subi	r28, 0xF7	; 247
   1b672:	dd 4f       	sbci	r29, 0xFD	; 253
   1b674:	88 83       	st	Y, r24
   1b676:	99 83       	std	Y+1, r25	; 0x01
   1b678:	aa 83       	std	Y+2, r26	; 0x02
   1b67a:	bb 83       	std	Y+3, r27	; 0x03
   1b67c:	c9 50       	subi	r28, 0x09	; 9
   1b67e:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b680:	be 01       	movw	r22, r28
   1b682:	67 5f       	subi	r22, 0xF7	; 247
   1b684:	7d 4f       	sbci	r23, 0xFD	; 253
   1b686:	c4 5e       	subi	r28, 0xE4	; 228
   1b688:	dd 4f       	sbci	r29, 0xFD	; 253
   1b68a:	88 81       	ld	r24, Y
   1b68c:	cc 51       	subi	r28, 0x1C	; 28
   1b68e:	d2 40       	sbci	r29, 0x02	; 2
   1b690:	9e 2d       	mov	r25, r14
   1b692:	0e 94 76 7a 	call	0xf4ec	; 0xf4ec <utime>
    }
    sync();
   1b696:	0e 94 33 7c 	call	0xf866	; 0xf866 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b69a:	7f 92       	push	r7
   1b69c:	6f 92       	push	r6
   1b69e:	5f 92       	push	r5
   1b6a0:	4f 92       	push	r4
   1b6a2:	81 e4       	ldi	r24, 0x41	; 65
   1b6a4:	94 e3       	ldi	r25, 0x34	; 52
   1b6a6:	1f 92       	push	r1
   1b6a8:	9f 93       	push	r25
   1b6aa:	8f 93       	push	r24
   1b6ac:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    return(status);
   1b6b0:	0f b6       	in	r0, 0x3f	; 63
   1b6b2:	f8 94       	cli
   1b6b4:	de bf       	out	0x3e, r29	; 62
   1b6b6:	0f be       	out	0x3f, r0	; 63
   1b6b8:	cd bf       	out	0x3d, r28	; 61
   1b6ba:	cb 5e       	subi	r28, 0xEB	; 235
   1b6bc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b6be:	88 81       	ld	r24, Y
   1b6c0:	c5 51       	subi	r28, 0x15	; 21
   1b6c2:	d2 40       	sbci	r29, 0x02	; 2
   1b6c4:	9f 2d       	mov	r25, r15
}
   1b6c6:	c4 5d       	subi	r28, 0xD4	; 212
   1b6c8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b6ca:	e2 e1       	ldi	r30, 0x12	; 18
   1b6cc:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0001b6d0 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b6d0:	ad e0       	ldi	r26, 0x0D	; 13
   1b6d2:	b1 e0       	ldi	r27, 0x01	; 1
   1b6d4:	ee e6       	ldi	r30, 0x6E	; 110
   1b6d6:	fb ed       	ldi	r31, 0xDB	; 219
   1b6d8:	0c 94 2e e5 	jmp	0x1ca5c	; 0x1ca5c <__prologue_saves__>
   1b6dc:	f8 2e       	mov	r15, r24
   1b6de:	e9 2e       	mov	r14, r25
   1b6e0:	16 2f       	mov	r17, r22
   1b6e2:	07 2f       	mov	r16, r23
   1b6e4:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b6e6:	61 e4       	ldi	r22, 0x41	; 65
   1b6e8:	77 e0       	ldi	r23, 0x07	; 7
   1b6ea:	0e 94 2b d2 	call	0x1a456	; 0x1a456 <lif_open_volume>
   1b6ee:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b6f0:	00 97       	sbiw	r24, 0x00	; 0
   1b6f2:	51 f4       	brne	.+20     	; 0x1b708 <lif_extract_lif_as_lif+0x38>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b6f4:	ef 92       	push	r14
   1b6f6:	ff 92       	push	r15
   1b6f8:	89 e2       	ldi	r24, 0x29	; 41
   1b6fa:	94 e3       	ldi	r25, 0x34	; 52
   1b6fc:	1f 92       	push	r1
   1b6fe:	9f 93       	push	r25
   1b700:	8f 93       	push	r24
   1b702:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1b706:	11 c0       	rjmp	.+34     	; 0x1b72a <lif_extract_lif_as_lif+0x5a>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b708:	61 2f       	mov	r22, r17
   1b70a:	70 2f       	mov	r23, r16
   1b70c:	38 d9       	rcall	.-3472   	; 0x1a97e <lif_find_file>
    if(index == -1)
   1b70e:	01 96       	adiw	r24, 0x01	; 1
   1b710:	a1 f4       	brne	.+40     	; 0x1b73a <lif_extract_lif_as_lif+0x6a>
    {
        printf("File not found:%s\n", lifname);
   1b712:	0f 93       	push	r16
   1b714:	1f 93       	push	r17
   1b716:	86 e1       	ldi	r24, 0x16	; 22
   1b718:	94 e3       	ldi	r25, 0x34	; 52
   1b71a:	1f 92       	push	r1
   1b71c:	9f 93       	push	r25
   1b71e:	8f 93       	push	r24
   1b720:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b724:	c4 01       	movw	r24, r8
   1b726:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b72a:	0f 90       	pop	r0
   1b72c:	0f 90       	pop	r0
   1b72e:	0f 90       	pop	r0
   1b730:	0f 90       	pop	r0
   1b732:	0f 90       	pop	r0
   1b734:	00 e0       	ldi	r16, 0x00	; 0
   1b736:	10 e0       	ldi	r17, 0x00	; 0
   1b738:	0c c1       	rjmp	.+536    	; 0x1b952 <lif_extract_lif_as_lif+0x282>
    }

    sectors = LIF->DIR.FileSectors;
   1b73a:	a4 01       	movw	r20, r8
   1b73c:	40 5a       	subi	r20, 0xA0	; 160
   1b73e:	5f 4f       	sbci	r21, 0xFF	; 255
   1b740:	c4 5f       	subi	r28, 0xF4	; 244
   1b742:	de 4f       	sbci	r29, 0xFE	; 254
   1b744:	59 83       	std	Y+1, r21	; 0x01
   1b746:	48 83       	st	Y, r20
   1b748:	cc 50       	subi	r28, 0x0C	; 12
   1b74a:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b74c:	da 01       	movw	r26, r20
   1b74e:	ad 90       	ld	r10, X+
   1b750:	bc 90       	ld	r11, X
   1b752:	0b 2c       	mov	r0, r11
   1b754:	00 0c       	add	r0, r0
   1b756:	cc 08       	sbc	r12, r12
   1b758:	dd 08       	sbc	r13, r13
   1b75a:	e1 2c       	mov	r14, r1
   1b75c:	f1 2c       	mov	r15, r1
   1b75e:	87 01       	movw	r16, r14
   1b760:	e3 94       	inc	r14
   1b762:	21 e0       	ldi	r18, 0x01	; 1
   1b764:	30 e0       	ldi	r19, 0x00	; 0
   1b766:	40 e0       	ldi	r20, 0x00	; 0
   1b768:	50 e0       	ldi	r21, 0x00	; 0
   1b76a:	6f ee       	ldi	r22, 0xEF	; 239
   1b76c:	75 e1       	ldi	r23, 0x15	; 21
   1b76e:	c3 01       	movw	r24, r6
   1b770:	0e 94 99 cd 	call	0x19b32	; 0x19b32 <lif_create_volume>
   1b774:	5c 01       	movw	r10, r24
    if(ULIF == NULL)
   1b776:	89 2b       	or	r24, r25
   1b778:	11 f4       	brne	.+4      	; 0x1b77e <lif_extract_lif_as_lif+0xae>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b77a:	c4 01       	movw	r24, r8
   1b77c:	cf c0       	rjmp	.+414    	; 0x1b91c <lif_extract_lif_as_lif+0x24c>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1b77e:	81 e2       	ldi	r24, 0x21	; 33
   1b780:	f4 01       	movw	r30, r8
   1b782:	e1 5b       	subi	r30, 0xB1	; 177
   1b784:	ff 4f       	sbci	r31, 0xFF	; 255
   1b786:	d5 01       	movw	r26, r10
   1b788:	a1 5b       	subi	r26, 0xB1	; 177
   1b78a:	bf 4f       	sbci	r27, 0xFF	; 255
   1b78c:	01 90       	ld	r0, Z+
   1b78e:	0d 92       	st	X+, r0
   1b790:	8a 95       	dec	r24
   1b792:	e1 f7       	brne	.-8      	; 0x1b78c <lif_extract_lif_as_lif+0xbc>

    ULIF->DIR.FileStartSector = 2;
   1b794:	82 e0       	ldi	r24, 0x02	; 2
   1b796:	90 e0       	ldi	r25, 0x00	; 0
   1b798:	a0 e0       	ldi	r26, 0x00	; 0
   1b79a:	b0 e0       	ldi	r27, 0x00	; 0
   1b79c:	f5 01       	movw	r30, r10
   1b79e:	e4 5a       	subi	r30, 0xA4	; 164
   1b7a0:	ff 4f       	sbci	r31, 0xFF	; 255
   1b7a2:	80 83       	st	Z, r24
   1b7a4:	91 83       	std	Z+1, r25	; 0x01
   1b7a6:	a2 83       	std	Z+2, r26	; 0x02
   1b7a8:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b7aa:	c4 5f       	subi	r28, 0xF4	; 244
   1b7ac:	de 4f       	sbci	r29, 0xFE	; 254
   1b7ae:	e8 81       	ld	r30, Y
   1b7b0:	f9 81       	ldd	r31, Y+1	; 0x01
   1b7b2:	cc 50       	subi	r28, 0x0C	; 12
   1b7b4:	d1 40       	sbci	r29, 0x01	; 1
   1b7b6:	80 81       	ld	r24, Z
   1b7b8:	91 81       	ldd	r25, Z+1	; 0x01
   1b7ba:	a2 81       	ldd	r26, Z+2	; 0x02
   1b7bc:	b3 81       	ldd	r27, Z+3	; 0x03
   1b7be:	f5 01       	movw	r30, r10
   1b7c0:	80 8b       	std	Z+16, r24	; 0x10
   1b7c2:	91 8b       	std	Z+17, r25	; 0x11
   1b7c4:	a2 8b       	std	Z+18, r26	; 0x12
   1b7c6:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b7c8:	60 e0       	ldi	r22, 0x00	; 0
   1b7ca:	70 e0       	ldi	r23, 0x00	; 0
   1b7cc:	c5 01       	movw	r24, r10
   1b7ce:	0e 94 1d cc 	call	0x1983a	; 0x1983a <lif_writedirindex>
   1b7d2:	8c 01       	movw	r16, r24
   1b7d4:	89 2b       	or	r24, r25
   1b7d6:	41 f0       	breq	.+16     	; 0x1b7e8 <lif_extract_lif_as_lif+0x118>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b7d8:	61 e0       	ldi	r22, 0x01	; 1
   1b7da:	70 e0       	ldi	r23, 0x00	; 0
   1b7dc:	c5 01       	movw	r24, r10
   1b7de:	0e 94 79 cc 	call	0x198f2	; 0x198f2 <lif_writedirEOF>
   1b7e2:	8c 01       	movw	r16, r24
   1b7e4:	89 2b       	or	r24, r25
   1b7e6:	39 f4       	brne	.+14     	; 0x1b7f6 <lif_extract_lif_as_lif+0x126>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b7e8:	c4 01       	movw	r24, r8
   1b7ea:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
   1b7ee:	c5 01       	movw	r24, r10
   1b7f0:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b7f4:	ae c0       	rjmp	.+348    	; 0x1b952 <lif_extract_lif_as_lif+0x282>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b7f6:	d5 01       	movw	r26, r10
   1b7f8:	1c 96       	adiw	r26, 0x0c	; 12
   1b7fa:	cd 90       	ld	r12, X+
   1b7fc:	dd 90       	ld	r13, X+
   1b7fe:	ed 90       	ld	r14, X+
   1b800:	fc 90       	ld	r15, X
   1b802:	1f 97       	sbiw	r26, 0x0f	; 15
   1b804:	fe 2c       	mov	r15, r14
   1b806:	ed 2c       	mov	r14, r13
   1b808:	dc 2c       	mov	r13, r12
   1b80a:	cc 24       	eor	r12, r12

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b80c:	f4 01       	movw	r30, r8
   1b80e:	e4 5a       	subi	r30, 0xA4	; 164
   1b810:	ff 4f       	sbci	r31, 0xFF	; 255
   1b812:	80 81       	ld	r24, Z
   1b814:	91 81       	ldd	r25, Z+1	; 0x01
   1b816:	a2 81       	ldd	r26, Z+2	; 0x02
   1b818:	b3 81       	ldd	r27, Z+3	; 0x03
   1b81a:	22 27       	eor	r18, r18
   1b81c:	38 2f       	mov	r19, r24
   1b81e:	49 2f       	mov	r20, r25
   1b820:	5a 2f       	mov	r21, r26
   1b822:	cb 5f       	subi	r28, 0xFB	; 251
   1b824:	de 4f       	sbci	r29, 0xFE	; 254
   1b826:	28 83       	st	Y, r18
   1b828:	39 83       	std	Y+1, r19	; 0x01
   1b82a:	4a 83       	std	Y+2, r20	; 0x02
   1b82c:	5b 83       	std	Y+3, r21	; 0x03
   1b82e:	c5 50       	subi	r28, 0x05	; 5
   1b830:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b832:	21 2c       	mov	r2, r1
   1b834:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b836:	88 e0       	ldi	r24, 0x08	; 8
   1b838:	94 e3       	ldi	r25, 0x34	; 52
   1b83a:	9c 01       	movw	r18, r24
   1b83c:	40 e0       	ldi	r20, 0x00	; 0
   1b83e:	c7 5f       	subi	r28, 0xF7	; 247
   1b840:	de 4f       	sbci	r29, 0xFE	; 254
   1b842:	28 83       	st	Y, r18
   1b844:	39 83       	std	Y+1, r19	; 0x01
   1b846:	4a 83       	std	Y+2, r20	; 0x02
   1b848:	c9 50       	subi	r28, 0x09	; 9
   1b84a:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b84c:	41 c0       	rjmp	.+130    	; 0x1b8d0 <lif_extract_lif_as_lif+0x200>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b84e:	00 e0       	ldi	r16, 0x00	; 0
   1b850:	11 e0       	ldi	r17, 0x01	; 1
   1b852:	a7 01       	movw	r20, r14
   1b854:	96 01       	movw	r18, r12
   1b856:	be 01       	movw	r22, r28
   1b858:	6f 5f       	subi	r22, 0xFF	; 255
   1b85a:	7f 4f       	sbci	r23, 0xFF	; 255
   1b85c:	c5 01       	movw	r24, r10
   1b85e:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b862:	05 2c       	mov	r0, r5
   1b864:	00 0c       	add	r0, r0
   1b866:	66 08       	sbc	r6, r6
   1b868:	77 08       	sbc	r7, r7
   1b86a:	c4 0c       	add	r12, r4
   1b86c:	d5 1c       	adc	r13, r5
   1b86e:	e6 1c       	adc	r14, r6
   1b870:	f7 1c       	adc	r15, r7
        offset += size;
   1b872:	cb 5f       	subi	r28, 0xFB	; 251
   1b874:	de 4f       	sbci	r29, 0xFE	; 254
   1b876:	88 81       	ld	r24, Y
   1b878:	99 81       	ldd	r25, Y+1	; 0x01
   1b87a:	aa 81       	ldd	r26, Y+2	; 0x02
   1b87c:	bb 81       	ldd	r27, Y+3	; 0x03
   1b87e:	c5 50       	subi	r28, 0x05	; 5
   1b880:	d1 40       	sbci	r29, 0x01	; 1
   1b882:	84 0d       	add	r24, r4
   1b884:	95 1d       	adc	r25, r5
   1b886:	a6 1d       	adc	r26, r6
   1b888:	b7 1d       	adc	r27, r7
   1b88a:	cb 5f       	subi	r28, 0xFB	; 251
   1b88c:	de 4f       	sbci	r29, 0xFE	; 254
   1b88e:	88 83       	st	Y, r24
   1b890:	99 83       	std	Y+1, r25	; 0x01
   1b892:	aa 83       	std	Y+2, r26	; 0x02
   1b894:	bb 83       	std	Y+3, r27	; 0x03
   1b896:	c5 50       	subi	r28, 0x05	; 5
   1b898:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b89a:	ff 92       	push	r15
   1b89c:	ef 92       	push	r14
   1b89e:	df 92       	push	r13
   1b8a0:	cf 92       	push	r12
   1b8a2:	1f 92       	push	r1
   1b8a4:	c6 5f       	subi	r28, 0xF6	; 246
   1b8a6:	de 4f       	sbci	r29, 0xFE	; 254
   1b8a8:	98 81       	ld	r25, Y
   1b8aa:	ca 50       	subi	r28, 0x0A	; 10
   1b8ac:	d1 40       	sbci	r29, 0x01	; 1
   1b8ae:	9f 93       	push	r25
   1b8b0:	c7 5f       	subi	r28, 0xF7	; 247
   1b8b2:	de 4f       	sbci	r29, 0xFE	; 254
   1b8b4:	a8 81       	ld	r26, Y
   1b8b6:	c9 50       	subi	r28, 0x09	; 9
   1b8b8:	d1 40       	sbci	r29, 0x01	; 1
   1b8ba:	af 93       	push	r26
   1b8bc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b8c0:	bf ef       	ldi	r27, 0xFF	; 255
   1b8c2:	2b 1a       	sub	r2, r27
   1b8c4:	3b 0a       	sbc	r3, r27
   1b8c6:	0f b6       	in	r0, 0x3f	; 63
   1b8c8:	f8 94       	cli
   1b8ca:	de bf       	out	0x3e, r29	; 62
   1b8cc:	0f be       	out	0x3f, r0	; 63
   1b8ce:	cd bf       	out	0x3d, r28	; 61
   1b8d0:	c4 5f       	subi	r28, 0xF4	; 244
   1b8d2:	de 4f       	sbci	r29, 0xFE	; 254
   1b8d4:	a8 81       	ld	r26, Y
   1b8d6:	b9 81       	ldd	r27, Y+1	; 0x01
   1b8d8:	cc 50       	subi	r28, 0x0C	; 12
   1b8da:	d1 40       	sbci	r29, 0x01	; 1
   1b8dc:	8d 91       	ld	r24, X+
   1b8de:	9c 91       	ld	r25, X
   1b8e0:	28 16       	cp	r2, r24
   1b8e2:	39 06       	cpc	r3, r25
   1b8e4:	f4 f4       	brge	.+60     	; 0x1b922 <lif_extract_lif_as_lif+0x252>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b8e6:	00 e0       	ldi	r16, 0x00	; 0
   1b8e8:	11 e0       	ldi	r17, 0x01	; 1
   1b8ea:	cb 5f       	subi	r28, 0xFB	; 251
   1b8ec:	de 4f       	sbci	r29, 0xFE	; 254
   1b8ee:	28 81       	ld	r18, Y
   1b8f0:	39 81       	ldd	r19, Y+1	; 0x01
   1b8f2:	4a 81       	ldd	r20, Y+2	; 0x02
   1b8f4:	5b 81       	ldd	r21, Y+3	; 0x03
   1b8f6:	c5 50       	subi	r28, 0x05	; 5
   1b8f8:	d1 40       	sbci	r29, 0x01	; 1
   1b8fa:	be 01       	movw	r22, r28
   1b8fc:	6f 5f       	subi	r22, 0xFF	; 255
   1b8fe:	7f 4f       	sbci	r23, 0xFF	; 255
   1b900:	c4 01       	movw	r24, r8
   1b902:	0e 94 9b c2 	call	0x18536	; 0x18536 <lif_read>
   1b906:	2b 01       	movw	r4, r22
   1b908:	3c 01       	movw	r6, r24
        if(size < LIF_SECTOR_SIZE)
   1b90a:	6f 3f       	cpi	r22, 0xFF	; 255
   1b90c:	71 05       	cpc	r23, r1
   1b90e:	11 f0       	breq	.+4      	; 0x1b914 <lif_extract_lif_as_lif+0x244>
   1b910:	0c f0       	brlt	.+2      	; 0x1b914 <lif_extract_lif_as_lif+0x244>
   1b912:	9d cf       	rjmp	.-198    	; 0x1b84e <lif_extract_lif_as_lif+0x17e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b914:	c4 01       	movw	r24, r8
   1b916:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
   1b91a:	c5 01       	movw	r24, r10
   1b91c:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
   1b920:	09 cf       	rjmp	.-494    	; 0x1b734 <lif_extract_lif_as_lif+0x64>
   1b922:	c4 01       	movw	r24, r8
   1b924:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
   1b928:	c5 01       	movw	r24, r10
   1b92a:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b92e:	ff 92       	push	r15
   1b930:	ef 92       	push	r14
   1b932:	df 92       	push	r13
   1b934:	cf 92       	push	r12
   1b936:	8a ef       	ldi	r24, 0xFA	; 250
   1b938:	93 e3       	ldi	r25, 0x33	; 51
   1b93a:	1f 92       	push	r1
   1b93c:	9f 93       	push	r25
   1b93e:	8f 93       	push	r24
   1b940:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    return(1);
   1b944:	0f b6       	in	r0, 0x3f	; 63
   1b946:	f8 94       	cli
   1b948:	de bf       	out	0x3e, r29	; 62
   1b94a:	0f be       	out	0x3f, r0	; 63
   1b94c:	cd bf       	out	0x3d, r28	; 61
   1b94e:	01 e0       	ldi	r16, 0x01	; 1
   1b950:	10 e0       	ldi	r17, 0x00	; 0
}
   1b952:	c8 01       	movw	r24, r16
   1b954:	c3 5f       	subi	r28, 0xF3	; 243
   1b956:	de 4f       	sbci	r29, 0xFE	; 254
   1b958:	e2 e1       	ldi	r30, 0x12	; 18
   1b95a:	0c 94 4a e5 	jmp	0x1ca94	; 0x1ca94 <__epilogue_restores__>

0001b95e <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b95e:	2f 92       	push	r2
   1b960:	3f 92       	push	r3
   1b962:	4f 92       	push	r4
   1b964:	5f 92       	push	r5
   1b966:	6f 92       	push	r6
   1b968:	8f 92       	push	r8
   1b96a:	9f 92       	push	r9
   1b96c:	af 92       	push	r10
   1b96e:	bf 92       	push	r11
   1b970:	cf 92       	push	r12
   1b972:	df 92       	push	r13
   1b974:	ef 92       	push	r14
   1b976:	ff 92       	push	r15
   1b978:	0f 93       	push	r16
   1b97a:	1f 93       	push	r17
   1b97c:	cf 93       	push	r28
   1b97e:	df 93       	push	r29
   1b980:	cd b7       	in	r28, 0x3d	; 61
   1b982:	de b7       	in	r29, 0x3e	; 62
   1b984:	c4 51       	subi	r28, 0x14	; 20
   1b986:	d1 40       	sbci	r29, 0x01	; 1
   1b988:	0f b6       	in	r0, 0x3f	; 63
   1b98a:	f8 94       	cli
   1b98c:	de bf       	out	0x3e, r29	; 62
   1b98e:	0f be       	out	0x3f, r0	; 63
   1b990:	cd bf       	out	0x3d, r28	; 61
   1b992:	7c 01       	movw	r14, r24
   1b994:	5b 01       	movw	r10, r22
   1b996:	6a 01       	movw	r12, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b998:	dc 01       	movw	r26, r24
   1b99a:	8c 91       	ld	r24, X
   1b99c:	81 11       	cpse	r24, r1
   1b99e:	03 c0       	rjmp	.+6      	; 0x1b9a6 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b9a0:	8a ed       	ldi	r24, 0xDA	; 218
   1b9a2:	93 e3       	ldi	r25, 0x33	; 51
   1b9a4:	06 c0       	rjmp	.+12     	; 0x1b9b2 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b9a6:	fb 01       	movw	r30, r22
   1b9a8:	80 81       	ld	r24, Z
   1b9aa:	81 11       	cpse	r24, r1
   1b9ac:	0b c0       	rjmp	.+22     	; 0x1b9c4 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b9ae:	8f eb       	ldi	r24, 0xBF	; 191
   1b9b0:	93 e3       	ldi	r25, 0x33	; 51
   1b9b2:	1f 92       	push	r1
   1b9b4:	9f 93       	push	r25
   1b9b6:	8f 93       	push	r24
   1b9b8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(-1);
   1b9bc:	0f 90       	pop	r0
   1b9be:	0f 90       	pop	r0
   1b9c0:	0f 90       	pop	r0
   1b9c2:	32 c1       	rjmp	.+612    	; 0x1bc28 <lif_add_lif_file+0x2ca>
    }
    if(!*userfile)
   1b9c4:	da 01       	movw	r26, r20
   1b9c6:	8c 91       	ld	r24, X
   1b9c8:	81 11       	cpse	r24, r1
   1b9ca:	03 c0       	rjmp	.+6      	; 0x1b9d2 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b9cc:	83 ea       	ldi	r24, 0xA3	; 163
   1b9ce:	93 e3       	ldi	r25, 0x33	; 51
   1b9d0:	f0 cf       	rjmp	.-32     	; 0x1b9b2 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & 0x400)
   1b9d2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b9d6:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b9da:	92 ff       	sbrs	r25, 2
   1b9dc:	12 c0       	rjmp	.+36     	; 0x1ba02 <lif_add_lif_file+0xa4>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1b9de:	df 92       	push	r13
   1b9e0:	4f 93       	push	r20
   1b9e2:	bf 92       	push	r11
   1b9e4:	6f 93       	push	r22
   1b9e6:	ff 92       	push	r15
   1b9e8:	ef 92       	push	r14
   1b9ea:	84 e7       	ldi	r24, 0x74	; 116
   1b9ec:	93 e3       	ldi	r25, 0x33	; 51
   1b9ee:	1f 92       	push	r1
   1b9f0:	9f 93       	push	r25
   1b9f2:	8f 93       	push	r24
   1b9f4:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1b9f8:	0f b6       	in	r0, 0x3f	; 63
   1b9fa:	f8 94       	cli
   1b9fc:	de bf       	out	0x3e, r29	; 62
   1b9fe:	0f be       	out	0x3f, r0	; 63
   1ba00:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1ba02:	60 e9       	ldi	r22, 0x90	; 144
   1ba04:	78 e0       	ldi	r23, 0x08	; 8
   1ba06:	c6 01       	movw	r24, r12
   1ba08:	0e 94 2b d2 	call	0x1a456	; 0x1a456 <lif_open_volume>
   1ba0c:	4c 01       	movw	r8, r24
    if(ULIF == NULL)
   1ba0e:	00 97       	sbiw	r24, 0x00	; 0
   1ba10:	09 f4       	brne	.+2      	; 0x1ba14 <lif_add_lif_file+0xb6>
   1ba12:	0a c1       	rjmp	.+532    	; 0x1bc28 <lif_add_lif_file+0x2ca>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1ba14:	b5 01       	movw	r22, r10
   1ba16:	0e 94 bf d4 	call	0x1a97e	; 0x1a97e <lif_find_file>
    if(index == -1)
   1ba1a:	01 96       	adiw	r24, 0x01	; 1
   1ba1c:	b1 f4       	brne	.+44     	; 0x1ba4a <lif_add_lif_file+0xec>
    {
        printf("File not found:%s\n", lifname);
   1ba1e:	bf 92       	push	r11
   1ba20:	af 92       	push	r10
   1ba22:	81 e6       	ldi	r24, 0x61	; 97
   1ba24:	93 e3       	ldi	r25, 0x33	; 51
   1ba26:	1f 92       	push	r1
   1ba28:	9f 93       	push	r25
   1ba2a:	8f 93       	push	r24
   1ba2c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba30:	c4 01       	movw	r24, r8
   1ba32:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1ba36:	0f 90       	pop	r0
   1ba38:	0f 90       	pop	r0
   1ba3a:	0f 90       	pop	r0
   1ba3c:	0f 90       	pop	r0
   1ba3e:	0f 90       	pop	r0
   1ba40:	60 e0       	ldi	r22, 0x00	; 0
   1ba42:	70 e0       	ldi	r23, 0x00	; 0
   1ba44:	80 e0       	ldi	r24, 0x00	; 0
   1ba46:	90 e0       	ldi	r25, 0x00	; 0
   1ba48:	09 c1       	rjmp	.+530    	; 0x1bc5c <lif_add_lif_file+0x2fe>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1ba4a:	60 e9       	ldi	r22, 0x90	; 144
   1ba4c:	78 e0       	ldi	r23, 0x08	; 8
   1ba4e:	c7 01       	movw	r24, r14
   1ba50:	0e 94 2b d2 	call	0x1a456	; 0x1a456 <lif_open_volume>
   1ba54:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   1ba56:	00 97       	sbiw	r24, 0x00	; 0
   1ba58:	09 f4       	brne	.+2      	; 0x1ba5c <lif_add_lif_file+0xfe>
   1ba5a:	e6 c0       	rjmp	.+460    	; 0x1bc28 <lif_add_lif_file+0x2ca>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1ba5c:	f4 01       	movw	r30, r8
   1ba5e:	e0 5a       	subi	r30, 0xA0	; 160
   1ba60:	ff 4f       	sbci	r31, 0xFF	; 255
   1ba62:	40 81       	ld	r20, Z
   1ba64:	51 81       	ldd	r21, Z+1	; 0x01
   1ba66:	62 81       	ldd	r22, Z+2	; 0x02
   1ba68:	73 81       	ldd	r23, Z+3	; 0x03
   1ba6a:	0e 94 c6 d0 	call	0x1a18c	; 0x1a18c <lif_newdir>
   1ba6e:	c3 5f       	subi	r28, 0xF3	; 243
   1ba70:	de 4f       	sbci	r29, 0xFE	; 254
   1ba72:	99 83       	std	Y+1, r25	; 0x01
   1ba74:	88 83       	st	Y, r24
   1ba76:	cd 50       	subi	r28, 0x0D	; 13
   1ba78:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1ba7a:	01 96       	adiw	r24, 0x01	; 1
   1ba7c:	b9 f4       	brne	.+46     	; 0x1baac <lif_add_lif_file+0x14e>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1ba7e:	df 92       	push	r13
   1ba80:	cf 92       	push	r12
   1ba82:	ff 92       	push	r15
   1ba84:	ef 92       	push	r14
   1ba86:	81 e3       	ldi	r24, 0x31	; 49
   1ba88:	93 e3       	ldi	r25, 0x33	; 51
   1ba8a:	1f 92       	push	r1
   1ba8c:	9f 93       	push	r25
   1ba8e:	8f 93       	push	r24
   1ba90:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba94:	c5 01       	movw	r24, r10
   1ba96:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
   1ba9a:	c4 01       	movw	r24, r8
   1ba9c:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            lif_closedir(ULIF);
        return(-1);
   1baa0:	0f b6       	in	r0, 0x3f	; 63
   1baa2:	f8 94       	cli
   1baa4:	de bf       	out	0x3e, r29	; 62
   1baa6:	0f be       	out	0x3f, r0	; 63
   1baa8:	cd bf       	out	0x3d, r28	; 61
   1baaa:	be c0       	rjmp	.+380    	; 0x1bc28 <lif_add_lif_file+0x2ca>
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1baac:	c5 01       	movw	r24, r10
   1baae:	84 5a       	subi	r24, 0xA4	; 164
   1bab0:	9f 4f       	sbci	r25, 0xFF	; 255
   1bab2:	dc 01       	movw	r26, r24
   1bab4:	4d 91       	ld	r20, X+
   1bab6:	5d 91       	ld	r21, X+
   1bab8:	6d 91       	ld	r22, X+
   1baba:	7c 91       	ld	r23, X
   1babc:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1babe:	21 e2       	ldi	r18, 0x21	; 33
   1bac0:	f4 01       	movw	r30, r8
   1bac2:	e1 5b       	subi	r30, 0xB1	; 177
   1bac4:	ff 4f       	sbci	r31, 0xFF	; 255
   1bac6:	1d 97       	sbiw	r26, 0x0d	; 13
   1bac8:	01 90       	ld	r0, Z+
   1baca:	0d 92       	st	X+, r0
   1bacc:	2a 95       	dec	r18
   1bace:	e1 f7       	brne	.-8      	; 0x1bac8 <lif_add_lif_file+0x16a>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1bad0:	fc 01       	movw	r30, r24
   1bad2:	40 83       	st	Z, r20
   1bad4:	51 83       	std	Z+1, r21	; 0x01
   1bad6:	62 83       	std	Z+2, r22	; 0x02
   1bad8:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1bada:	b6 2f       	mov	r27, r22
   1badc:	a5 2f       	mov	r26, r21
   1bade:	94 2f       	mov	r25, r20
   1bae0:	88 27       	eor	r24, r24
   1bae2:	cb 5f       	subi	r28, 0xFB	; 251
   1bae4:	de 4f       	sbci	r29, 0xFE	; 254
   1bae6:	88 83       	st	Y, r24
   1bae8:	99 83       	std	Y+1, r25	; 0x01
   1baea:	aa 83       	std	Y+2, r26	; 0x02
   1baec:	bb 83       	std	Y+3, r27	; 0x03
   1baee:	c5 50       	subi	r28, 0x05	; 5
   1baf0:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1baf2:	f4 01       	movw	r30, r8
   1baf4:	e4 5a       	subi	r30, 0xA4	; 164
   1baf6:	ff 4f       	sbci	r31, 0xFF	; 255
   1baf8:	80 81       	ld	r24, Z
   1bafa:	91 81       	ldd	r25, Z+1	; 0x01
   1bafc:	a2 81       	ldd	r26, Z+2	; 0x02
   1bafe:	b3 81       	ldd	r27, Z+3	; 0x03
   1bb00:	22 27       	eor	r18, r18
   1bb02:	38 2f       	mov	r19, r24
   1bb04:	49 2f       	mov	r20, r25
   1bb06:	5a 2f       	mov	r21, r26
   1bb08:	c7 5f       	subi	r28, 0xF7	; 247
   1bb0a:	de 4f       	sbci	r29, 0xFE	; 254
   1bb0c:	28 83       	st	Y, r18
   1bb0e:	39 83       	std	Y+1, r19	; 0x01
   1bb10:	4a 83       	std	Y+2, r20	; 0x02
   1bb12:	5b 83       	std	Y+3, r21	; 0x03
   1bb14:	c9 50       	subi	r28, 0x09	; 9
   1bb16:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bb18:	21 2c       	mov	r2, r1
   1bb1a:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1bb1c:	c1 2c       	mov	r12, r1
   1bb1e:	d1 2c       	mov	r13, r1
   1bb20:	76 01       	movw	r14, r12
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bb22:	a5 01       	movw	r20, r10
   1bb24:	40 5a       	subi	r20, 0xA0	; 160
   1bb26:	5f 4f       	sbci	r21, 0xFF	; 255
   1bb28:	cd 5e       	subi	r28, 0xED	; 237
   1bb2a:	de 4f       	sbci	r29, 0xFE	; 254
   1bb2c:	59 83       	std	Y+1, r21	; 0x01
   1bb2e:	48 83       	st	Y, r20
   1bb30:	c3 51       	subi	r28, 0x13	; 19
   1bb32:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1bb34:	83 e2       	ldi	r24, 0x23	; 35
   1bb36:	93 e3       	ldi	r25, 0x33	; 51
   1bb38:	2c 01       	movw	r4, r24
   1bb3a:	c7 5f       	subi	r28, 0xF7	; 247
   1bb3c:	de 4f       	sbci	r29, 0xFE	; 254
   1bb3e:	28 81       	ld	r18, Y
   1bb40:	39 81       	ldd	r19, Y+1	; 0x01
   1bb42:	4a 81       	ldd	r20, Y+2	; 0x02
   1bb44:	5b 81       	ldd	r21, Y+3	; 0x03
   1bb46:	c9 50       	subi	r28, 0x09	; 9
   1bb48:	d1 40       	sbci	r29, 0x01	; 1
   1bb4a:	2c 0d       	add	r18, r12
   1bb4c:	3d 1d       	adc	r19, r13
   1bb4e:	4e 1d       	adc	r20, r14
   1bb50:	5f 1d       	adc	r21, r15
   1bb52:	cb 5f       	subi	r28, 0xFB	; 251
   1bb54:	de 4f       	sbci	r29, 0xFE	; 254
   1bb56:	88 81       	ld	r24, Y
   1bb58:	99 81       	ldd	r25, Y+1	; 0x01
   1bb5a:	aa 81       	ldd	r26, Y+2	; 0x02
   1bb5c:	bb 81       	ldd	r27, Y+3	; 0x03
   1bb5e:	c5 50       	subi	r28, 0x05	; 5
   1bb60:	d1 40       	sbci	r29, 0x01	; 1
   1bb62:	8c 0d       	add	r24, r12
   1bb64:	9d 1d       	adc	r25, r13
   1bb66:	ae 1d       	adc	r26, r14
   1bb68:	bf 1d       	adc	r27, r15
   1bb6a:	c1 5f       	subi	r28, 0xF1	; 241
   1bb6c:	de 4f       	sbci	r29, 0xFE	; 254
   1bb6e:	88 83       	st	Y, r24
   1bb70:	99 83       	std	Y+1, r25	; 0x01
   1bb72:	aa 83       	std	Y+2, r26	; 0x02
   1bb74:	bb 83       	std	Y+3, r27	; 0x03
   1bb76:	cf 50       	subi	r28, 0x0F	; 15
   1bb78:	d1 40       	sbci	r29, 0x01	; 1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bb7a:	cd 5e       	subi	r28, 0xED	; 237
   1bb7c:	de 4f       	sbci	r29, 0xFE	; 254
   1bb7e:	a8 81       	ld	r26, Y
   1bb80:	b9 81       	ldd	r27, Y+1	; 0x01
   1bb82:	c3 51       	subi	r28, 0x13	; 19
   1bb84:	d1 40       	sbci	r29, 0x01	; 1
   1bb86:	8d 91       	ld	r24, X+
   1bb88:	9c 91       	ld	r25, X
   1bb8a:	28 16       	cp	r2, r24
   1bb8c:	39 06       	cpc	r3, r25
   1bb8e:	dc f5       	brge	.+118    	; 0x1bc06 <lif_add_lif_file+0x2a8>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1bb90:	00 e0       	ldi	r16, 0x00	; 0
   1bb92:	11 e0       	ldi	r17, 0x01	; 1
   1bb94:	be 01       	movw	r22, r28
   1bb96:	6f 5f       	subi	r22, 0xFF	; 255
   1bb98:	7f 4f       	sbci	r23, 0xFF	; 255
   1bb9a:	c4 01       	movw	r24, r8
   1bb9c:	0e 94 9b c2 	call	0x18536	; 0x18536 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1bba0:	6f 3f       	cpi	r22, 0xFF	; 255
   1bba2:	71 05       	cpc	r23, r1
   1bba4:	a9 f0       	breq	.+42     	; 0x1bbd0 <lif_add_lif_file+0x272>
   1bba6:	a4 f0       	brlt	.+40     	; 0x1bbd0 <lif_add_lif_file+0x272>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1bba8:	00 e0       	ldi	r16, 0x00	; 0
   1bbaa:	11 e0       	ldi	r17, 0x01	; 1
   1bbac:	c1 5f       	subi	r28, 0xF1	; 241
   1bbae:	de 4f       	sbci	r29, 0xFE	; 254
   1bbb0:	28 81       	ld	r18, Y
   1bbb2:	39 81       	ldd	r19, Y+1	; 0x01
   1bbb4:	4a 81       	ldd	r20, Y+2	; 0x02
   1bbb6:	5b 81       	ldd	r21, Y+3	; 0x03
   1bbb8:	cf 50       	subi	r28, 0x0F	; 15
   1bbba:	d1 40       	sbci	r29, 0x01	; 1
   1bbbc:	be 01       	movw	r22, r28
   1bbbe:	6f 5f       	subi	r22, 0xFF	; 255
   1bbc0:	7f 4f       	sbci	r23, 0xFF	; 255
   1bbc2:	c5 01       	movw	r24, r10
   1bbc4:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1bbc8:	8f 3f       	cpi	r24, 0xFF	; 255
   1bbca:	91 05       	cpc	r25, r1
   1bbcc:	09 f0       	breq	.+2      	; 0x1bbd0 <lif_add_lif_file+0x272>
   1bbce:	2c f4       	brge	.+10     	; 0x1bbda <lif_add_lif_file+0x27c>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbd0:	c5 01       	movw	r24, r10
   1bbd2:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
   1bbd6:	c4 01       	movw	r24, r8
   1bbd8:	25 c0       	rjmp	.+74     	; 0x1bc24 <lif_add_lif_file+0x2c6>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1bbda:	5f ef       	ldi	r21, 0xFF	; 255
   1bbdc:	d5 1a       	sub	r13, r21
   1bbde:	e5 0a       	sbc	r14, r21
   1bbe0:	f5 0a       	sbc	r15, r21
        printf("\tWrote: %8ld\r", bytes);
   1bbe2:	ff 92       	push	r15
   1bbe4:	ef 92       	push	r14
   1bbe6:	df 92       	push	r13
   1bbe8:	cf 92       	push	r12
   1bbea:	1f 92       	push	r1
   1bbec:	5f 92       	push	r5
   1bbee:	4f 92       	push	r4
   1bbf0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bbf4:	8f ef       	ldi	r24, 0xFF	; 255
   1bbf6:	28 1a       	sub	r2, r24
   1bbf8:	38 0a       	sbc	r3, r24
   1bbfa:	0f b6       	in	r0, 0x3f	; 63
   1bbfc:	f8 94       	cli
   1bbfe:	de bf       	out	0x3e, r29	; 62
   1bc00:	0f be       	out	0x3f, r0	; 63
   1bc02:	cd bf       	out	0x3d, r28	; 61
   1bc04:	9a cf       	rjmp	.-204    	; 0x1bb3a <lif_add_lif_file+0x1dc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc06:	c4 01       	movw	r24, r8
   1bc08:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1bc0c:	c3 5f       	subi	r28, 0xF3	; 243
   1bc0e:	de 4f       	sbci	r29, 0xFE	; 254
   1bc10:	68 81       	ld	r22, Y
   1bc12:	79 81       	ldd	r23, Y+1	; 0x01
   1bc14:	cd 50       	subi	r28, 0x0D	; 13
   1bc16:	d1 40       	sbci	r29, 0x01	; 1
   1bc18:	c5 01       	movw	r24, r10
   1bc1a:	0e 94 1d cc 	call	0x1983a	; 0x1983a <lif_writedirindex>
   1bc1e:	89 2b       	or	r24, r25
   1bc20:	41 f4       	brne	.+16     	; 0x1bc32 <lif_add_lif_file+0x2d4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc22:	c5 01       	movw	r24, r10
   1bc24:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1bc28:	6f ef       	ldi	r22, 0xFF	; 255
   1bc2a:	7f ef       	ldi	r23, 0xFF	; 255
   1bc2c:	8f ef       	ldi	r24, 0xFF	; 255
   1bc2e:	9f ef       	ldi	r25, 0xFF	; 255
   1bc30:	15 c0       	rjmp	.+42     	; 0x1bc5c <lif_add_lif_file+0x2fe>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc32:	c5 01       	movw	r24, r10
   1bc34:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1bc38:	ff 92       	push	r15
   1bc3a:	ef 92       	push	r14
   1bc3c:	df 92       	push	r13
   1bc3e:	cf 92       	push	r12
   1bc40:	85 e1       	ldi	r24, 0x15	; 21
   1bc42:	93 e3       	ldi	r25, 0x33	; 51
   1bc44:	1f 92       	push	r1
   1bc46:	9f 93       	push	r25
   1bc48:	8f 93       	push	r24
   1bc4a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    return(bytes);
   1bc4e:	0f b6       	in	r0, 0x3f	; 63
   1bc50:	f8 94       	cli
   1bc52:	de bf       	out	0x3e, r29	; 62
   1bc54:	0f be       	out	0x3f, r0	; 63
   1bc56:	cd bf       	out	0x3d, r28	; 61
   1bc58:	b6 01       	movw	r22, r12
   1bc5a:	c7 01       	movw	r24, r14
}
   1bc5c:	cc 5e       	subi	r28, 0xEC	; 236
   1bc5e:	de 4f       	sbci	r29, 0xFE	; 254
   1bc60:	0f b6       	in	r0, 0x3f	; 63
   1bc62:	f8 94       	cli
   1bc64:	de bf       	out	0x3e, r29	; 62
   1bc66:	0f be       	out	0x3f, r0	; 63
   1bc68:	cd bf       	out	0x3d, r28	; 61
   1bc6a:	df 91       	pop	r29
   1bc6c:	cf 91       	pop	r28
   1bc6e:	1f 91       	pop	r17
   1bc70:	0f 91       	pop	r16
   1bc72:	ff 90       	pop	r15
   1bc74:	ef 90       	pop	r14
   1bc76:	df 90       	pop	r13
   1bc78:	cf 90       	pop	r12
   1bc7a:	bf 90       	pop	r11
   1bc7c:	af 90       	pop	r10
   1bc7e:	9f 90       	pop	r9
   1bc80:	8f 90       	pop	r8
   1bc82:	6f 90       	pop	r6
   1bc84:	5f 90       	pop	r5
   1bc86:	4f 90       	pop	r4
   1bc88:	3f 90       	pop	r3
   1bc8a:	2f 90       	pop	r2
   1bc8c:	08 95       	ret

0001bc8e <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1bc8e:	ef 92       	push	r14
   1bc90:	ff 92       	push	r15
   1bc92:	0f 93       	push	r16
   1bc94:	1f 93       	push	r17
   1bc96:	cf 93       	push	r28
   1bc98:	df 93       	push	r29
   1bc9a:	7c 01       	movw	r14, r24
   1bc9c:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1bc9e:	fc 01       	movw	r30, r24
   1bca0:	80 81       	ld	r24, Z
   1bca2:	81 11       	cpse	r24, r1
   1bca4:	03 c0       	rjmp	.+6      	; 0x1bcac <lif_del_file+0x1e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1bca6:	80 ef       	ldi	r24, 0xF0	; 240
   1bca8:	92 e3       	ldi	r25, 0x32	; 50
   1bcaa:	06 c0       	rjmp	.+12     	; 0x1bcb8 <lif_del_file+0x2a>
        return(-1);
    }
    if(!*lifname)
   1bcac:	fb 01       	movw	r30, r22
   1bcae:	80 81       	ld	r24, Z
   1bcb0:	81 11       	cpse	r24, r1
   1bcb2:	0b c0       	rjmp	.+22     	; 0x1bcca <lif_del_file+0x3c>
    {
        printf("lif_del_file: lifname is empty\n");
   1bcb4:	80 ed       	ldi	r24, 0xD0	; 208
   1bcb6:	92 e3       	ldi	r25, 0x32	; 50
   1bcb8:	1f 92       	push	r1
   1bcba:	9f 93       	push	r25
   1bcbc:	8f 93       	push	r24
   1bcbe:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(-1);
   1bcc2:	0f 90       	pop	r0
   1bcc4:	0f 90       	pop	r0
   1bcc6:	0f 90       	pop	r0
   1bcc8:	74 c0       	rjmp	.+232    	; 0x1bdb2 <lif_del_file+0x124>
    }
    if(debuglevel & 0x400)
   1bcca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1bcce:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1bcd2:	92 ff       	sbrs	r25, 2
   1bcd4:	13 c0       	rjmp	.+38     	; 0x1bcfc <lif_del_file+0x6e>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1bcd6:	1f 93       	push	r17
   1bcd8:	6f 93       	push	r22
   1bcda:	ff 92       	push	r15
   1bcdc:	ef 92       	push	r14
   1bcde:	81 eb       	ldi	r24, 0xB1	; 177
   1bce0:	92 e3       	ldi	r25, 0x32	; 50
   1bce2:	1f 92       	push	r1
   1bce4:	9f 93       	push	r25
   1bce6:	8f 93       	push	r24
   1bce8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1bcec:	8d b7       	in	r24, 0x3d	; 61
   1bcee:	9e b7       	in	r25, 0x3e	; 62
   1bcf0:	07 96       	adiw	r24, 0x07	; 7
   1bcf2:	0f b6       	in	r0, 0x3f	; 63
   1bcf4:	f8 94       	cli
   1bcf6:	9e bf       	out	0x3e, r25	; 62
   1bcf8:	0f be       	out	0x3f, r0	; 63
   1bcfa:	8d bf       	out	0x3d, r24	; 61
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1bcfc:	60 e9       	ldi	r22, 0x90	; 144
   1bcfe:	78 e0       	ldi	r23, 0x08	; 8
   1bd00:	c7 01       	movw	r24, r14
   1bd02:	0e 94 2b d2 	call	0x1a456	; 0x1a456 <lif_open_volume>
   1bd06:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bd08:	00 97       	sbiw	r24, 0x00	; 0
   1bd0a:	09 f4       	brne	.+2      	; 0x1bd0e <lif_del_file+0x80>
   1bd0c:	52 c0       	rjmp	.+164    	; 0x1bdb2 <lif_del_file+0x124>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1bd0e:	b8 01       	movw	r22, r16
   1bd10:	0e 94 bf d4 	call	0x1a97e	; 0x1a97e <lif_find_file>
    if(index == -1)
   1bd14:	8f 3f       	cpi	r24, 0xFF	; 255
   1bd16:	ef ef       	ldi	r30, 0xFF	; 255
   1bd18:	9e 07       	cpc	r25, r30
   1bd1a:	c9 f4       	brne	.+50     	; 0x1bd4e <lif_del_file+0xc0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd1c:	ce 01       	movw	r24, r28
   1bd1e:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1bd22:	1f 93       	push	r17
   1bd24:	0f 93       	push	r16
   1bd26:	ff 92       	push	r15
   1bd28:	ef 92       	push	r14
   1bd2a:	89 e8       	ldi	r24, 0x89	; 137
   1bd2c:	92 e3       	ldi	r25, 0x32	; 50
   1bd2e:	1f 92       	push	r1
   1bd30:	9f 93       	push	r25
   1bd32:	8f 93       	push	r24
   1bd34:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(0);
   1bd38:	8d b7       	in	r24, 0x3d	; 61
   1bd3a:	9e b7       	in	r25, 0x3e	; 62
   1bd3c:	07 96       	adiw	r24, 0x07	; 7
   1bd3e:	0f b6       	in	r0, 0x3f	; 63
   1bd40:	f8 94       	cli
   1bd42:	9e bf       	out	0x3e, r25	; 62
   1bd44:	0f be       	out	0x3f, r0	; 63
   1bd46:	8d bf       	out	0x3d, r24	; 61
   1bd48:	80 e0       	ldi	r24, 0x00	; 0
   1bd4a:	90 e0       	ldi	r25, 0x00	; 0
   1bd4c:	34 c0       	rjmp	.+104    	; 0x1bdb6 <lif_del_file+0x128>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1bd4e:	2a a1       	ldd	r18, Y+34	; 0x22
   1bd50:	3b a1       	ldd	r19, Y+35	; 0x23
   1bd52:	21 50       	subi	r18, 0x01	; 1
   1bd54:	31 09       	sbc	r19, r1
   1bd56:	fe 01       	movw	r30, r28
   1bd58:	e6 5a       	subi	r30, 0xA6	; 166
   1bd5a:	ff 4f       	sbci	r31, 0xFF	; 255
   1bd5c:	82 17       	cp	r24, r18
   1bd5e:	93 07       	cpc	r25, r19
   1bd60:	2c f0       	brlt	.+10     	; 0x1bd6c <lif_del_file+0xde>
        LIF->DIR.FileType = 0xffff;
   1bd62:	2f ef       	ldi	r18, 0xFF	; 255
   1bd64:	3f ef       	ldi	r19, 0xFF	; 255
   1bd66:	31 83       	std	Z+1, r19	; 0x01
   1bd68:	20 83       	st	Z, r18
   1bd6a:	02 c0       	rjmp	.+4      	; 0x1bd70 <lif_del_file+0xe2>
    else
        LIF->DIR.FileType = 0;
   1bd6c:	11 82       	std	Z+1, r1	; 0x01
   1bd6e:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1bd70:	bc 01       	movw	r22, r24
   1bd72:	ce 01       	movw	r24, r28
   1bd74:	0e 94 1d cc 	call	0x1983a	; 0x1983a <lif_writedirindex>
   1bd78:	89 2b       	or	r24, r25
   1bd7a:	21 f4       	brne	.+8      	; 0x1bd84 <lif_del_file+0xf6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd7c:	ce 01       	movw	r24, r28
   1bd7e:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
   1bd82:	17 c0       	rjmp	.+46     	; 0x1bdb2 <lif_del_file+0x124>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1bd84:	ce 01       	movw	r24, r28
   1bd86:	0e 94 91 cc 	call	0x19922	; 0x19922 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd8a:	ce 01       	movw	r24, r28
   1bd8c:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1bd90:	1f 93       	push	r17
   1bd92:	0f 93       	push	r16
   1bd94:	8a e7       	ldi	r24, 0x7A	; 122
   1bd96:	92 e3       	ldi	r25, 0x32	; 50
   1bd98:	1f 92       	push	r1
   1bd9a:	9f 93       	push	r25
   1bd9c:	8f 93       	push	r24
   1bd9e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>

    return(1);
   1bda2:	0f 90       	pop	r0
   1bda4:	0f 90       	pop	r0
   1bda6:	0f 90       	pop	r0
   1bda8:	0f 90       	pop	r0
   1bdaa:	0f 90       	pop	r0
   1bdac:	81 e0       	ldi	r24, 0x01	; 1
   1bdae:	90 e0       	ldi	r25, 0x00	; 0
   1bdb0:	02 c0       	rjmp	.+4      	; 0x1bdb6 <lif_del_file+0x128>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1bdb2:	8f ef       	ldi	r24, 0xFF	; 255
   1bdb4:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1bdb6:	cd b7       	in	r28, 0x3d	; 61
   1bdb8:	de b7       	in	r29, 0x3e	; 62
   1bdba:	e6 e0       	ldi	r30, 0x06	; 6
   1bdbc:	77 c6       	rjmp	.+3310   	; 0x1caac <__epilogue_restores__+0x18>

0001bdbe <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1bdbe:	a0 e0       	ldi	r26, 0x00	; 0
   1bdc0:	b0 e0       	ldi	r27, 0x00	; 0
   1bdc2:	e4 ee       	ldi	r30, 0xE4	; 228
   1bdc4:	fe ed       	ldi	r31, 0xDE	; 222
   1bdc6:	52 c6       	rjmp	.+3236   	; 0x1ca6c <__prologue_saves__+0x10>
   1bdc8:	6c 01       	movw	r12, r24
   1bdca:	8b 01       	movw	r16, r22
   1bdcc:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bdce:	fc 01       	movw	r30, r24
   1bdd0:	80 81       	ld	r24, Z
   1bdd2:	81 11       	cpse	r24, r1
   1bdd4:	03 c0       	rjmp	.+6      	; 0x1bddc <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bdd6:	82 e5       	ldi	r24, 0x52	; 82
   1bdd8:	92 e3       	ldi	r25, 0x32	; 50
   1bdda:	06 c0       	rjmp	.+12     	; 0x1bde8 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1bddc:	fb 01       	movw	r30, r22
   1bdde:	80 81       	ld	r24, Z
   1bde0:	81 11       	cpse	r24, r1
   1bde2:	0b c0       	rjmp	.+22     	; 0x1bdfa <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bde4:	8b e2       	ldi	r24, 0x2B	; 43
   1bde6:	92 e3       	ldi	r25, 0x32	; 50
   1bde8:	1f 92       	push	r1
   1bdea:	9f 93       	push	r25
   1bdec:	8f 93       	push	r24
   1bdee:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(-1);
   1bdf2:	0f 90       	pop	r0
   1bdf4:	0f 90       	pop	r0
   1bdf6:	0f 90       	pop	r0
   1bdf8:	62 c0       	rjmp	.+196    	; 0x1bebe <lif_rename_file+0x100>
    }
    if(!*newlifname)
   1bdfa:	fa 01       	movw	r30, r20
   1bdfc:	80 81       	ld	r24, Z
   1bdfe:	81 11       	cpse	r24, r1
   1be00:	03 c0       	rjmp	.+6      	; 0x1be08 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1be02:	84 e0       	ldi	r24, 0x04	; 4
   1be04:	92 e3       	ldi	r25, 0x32	; 50
   1be06:	f0 cf       	rjmp	.-32     	; 0x1bde8 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1be08:	ca 01       	movw	r24, r20
   1be0a:	0e 94 a7 c3 	call	0x1874e	; 0x1874e <lif_checkname>
   1be0e:	89 2b       	or	r24, r25
   1be10:	19 f4       	brne	.+6      	; 0x1be18 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1be12:	8e ec       	ldi	r24, 0xCE	; 206
   1be14:	91 e3       	ldi	r25, 0x31	; 49
   1be16:	e8 cf       	rjmp	.-48     	; 0x1bde8 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1be18:	60 e9       	ldi	r22, 0x90	; 144
   1be1a:	78 e0       	ldi	r23, 0x08	; 8
   1be1c:	c6 01       	movw	r24, r12
   1be1e:	0e 94 2b d2 	call	0x1a456	; 0x1a456 <lif_open_volume>
   1be22:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1be24:	00 97       	sbiw	r24, 0x00	; 0
   1be26:	09 f4       	brne	.+2      	; 0x1be2a <lif_rename_file+0x6c>
   1be28:	4a c0       	rjmp	.+148    	; 0x1bebe <lif_rename_file+0x100>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1be2a:	b8 01       	movw	r22, r16
   1be2c:	0e 94 bf d4 	call	0x1a97e	; 0x1a97e <lif_find_file>
   1be30:	5c 01       	movw	r10, r24
    if(index == -1)
   1be32:	01 96       	adiw	r24, 0x01	; 1
   1be34:	c9 f4       	brne	.+50     	; 0x1be68 <lif_rename_file+0xaa>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1be36:	1f 93       	push	r17
   1be38:	0f 93       	push	r16
   1be3a:	df 92       	push	r13
   1be3c:	cf 92       	push	r12
   1be3e:	85 ea       	ldi	r24, 0xA5	; 165
   1be40:	91 e3       	ldi	r25, 0x31	; 49
   1be42:	1f 92       	push	r1
   1be44:	9f 93       	push	r25
   1be46:	8f 93       	push	r24
   1be48:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1be4c:	ce 01       	movw	r24, r28
   1be4e:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1be52:	8d b7       	in	r24, 0x3d	; 61
   1be54:	9e b7       	in	r25, 0x3e	; 62
   1be56:	07 96       	adiw	r24, 0x07	; 7
   1be58:	0f b6       	in	r0, 0x3f	; 63
   1be5a:	f8 94       	cli
   1be5c:	9e bf       	out	0x3e, r25	; 62
   1be5e:	0f be       	out	0x3f, r0	; 63
   1be60:	8d bf       	out	0x3d, r24	; 61
   1be62:	80 e0       	ldi	r24, 0x00	; 0
   1be64:	90 e0       	ldi	r25, 0x00	; 0
   1be66:	2d c0       	rjmp	.+90     	; 0x1bec2 <lif_rename_file+0x104>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1be68:	4a e0       	ldi	r20, 0x0A	; 10
   1be6a:	50 e0       	ldi	r21, 0x00	; 0
   1be6c:	b7 01       	movw	r22, r14
   1be6e:	ce 01       	movw	r24, r28
   1be70:	81 5b       	subi	r24, 0xB1	; 177
   1be72:	9f 4f       	sbci	r25, 0xFF	; 255
   1be74:	0e 94 e1 c3 	call	0x187c2	; 0x187c2 <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1be78:	b5 01       	movw	r22, r10
   1be7a:	ce 01       	movw	r24, r28
   1be7c:	0e 94 1d cc 	call	0x1983a	; 0x1983a <lif_writedirindex>
   1be80:	89 2b       	or	r24, r25
   1be82:	21 f4       	brne	.+8      	; 0x1be8c <lif_rename_file+0xce>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1be84:	ce 01       	movw	r24, r28
   1be86:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
   1be8a:	19 c0       	rjmp	.+50     	; 0x1bebe <lif_rename_file+0x100>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1be8c:	ff 92       	push	r15
   1be8e:	ef 92       	push	r14
   1be90:	1f 93       	push	r17
   1be92:	0f 93       	push	r16
   1be94:	8e e8       	ldi	r24, 0x8E	; 142
   1be96:	91 e3       	ldi	r25, 0x31	; 49
   1be98:	1f 92       	push	r1
   1be9a:	9f 93       	push	r25
   1be9c:	8f 93       	push	r24
   1be9e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bea2:	ce 01       	movw	r24, r28
   1bea4:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1bea8:	ed b7       	in	r30, 0x3d	; 61
   1beaa:	fe b7       	in	r31, 0x3e	; 62
   1beac:	37 96       	adiw	r30, 0x07	; 7
   1beae:	0f b6       	in	r0, 0x3f	; 63
   1beb0:	f8 94       	cli
   1beb2:	fe bf       	out	0x3e, r31	; 62
   1beb4:	0f be       	out	0x3f, r0	; 63
   1beb6:	ed bf       	out	0x3d, r30	; 61
   1beb8:	81 e0       	ldi	r24, 0x01	; 1
   1beba:	90 e0       	ldi	r25, 0x00	; 0
   1bebc:	02 c0       	rjmp	.+4      	; 0x1bec2 <lif_rename_file+0x104>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1bebe:	8f ef       	ldi	r24, 0xFF	; 255
   1bec0:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1bec2:	cd b7       	in	r28, 0x3d	; 61
   1bec4:	de b7       	in	r29, 0x3e	; 62
   1bec6:	ea e0       	ldi	r30, 0x0A	; 10
   1bec8:	ed c5       	rjmp	.+3034   	; 0x1caa4 <__epilogue_restores__+0x10>

0001beca <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1beca:	4f 92       	push	r4
   1becc:	5f 92       	push	r5
   1bece:	6f 92       	push	r6
   1bed0:	7f 92       	push	r7
   1bed2:	af 92       	push	r10
   1bed4:	bf 92       	push	r11
   1bed6:	cf 92       	push	r12
   1bed8:	df 92       	push	r13
   1beda:	ef 92       	push	r14
   1bedc:	ff 92       	push	r15
   1bede:	0f 93       	push	r16
   1bee0:	1f 93       	push	r17
   1bee2:	cf 93       	push	r28
   1bee4:	df 93       	push	r29
   1bee6:	27 01       	movw	r4, r14
   1bee8:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1beea:	dc 01       	movw	r26, r24
   1beec:	ec 91       	ld	r30, X
   1beee:	e1 11       	cpse	r30, r1
   1bef0:	03 c0       	rjmp	.+6      	; 0x1bef8 <lif_create_image+0x2e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1bef2:	85 e6       	ldi	r24, 0x65	; 101
   1bef4:	91 e3       	ldi	r25, 0x31	; 49
   1bef6:	16 c0       	rjmp	.+44     	; 0x1bf24 <lif_create_image+0x5a>
        return(-1);
    }
    if(!*liflabel)
   1bef8:	db 01       	movw	r26, r22
   1befa:	ec 91       	ld	r30, X
   1befc:	e1 11       	cpse	r30, r1
   1befe:	03 c0       	rjmp	.+6      	; 0x1bf06 <lif_create_image+0x3c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1bf00:	80 e4       	ldi	r24, 0x40	; 64
   1bf02:	91 e3       	ldi	r25, 0x31	; 49
   1bf04:	0f c0       	rjmp	.+30     	; 0x1bf24 <lif_create_image+0x5a>
        return(-1);
    }
    if(!dirsectors)
   1bf06:	21 15       	cp	r18, r1
   1bf08:	31 05       	cpc	r19, r1
   1bf0a:	41 05       	cpc	r20, r1
   1bf0c:	51 05       	cpc	r21, r1
   1bf0e:	19 f4       	brne	.+6      	; 0x1bf16 <lif_create_image+0x4c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1bf10:	8d e1       	ldi	r24, 0x1D	; 29
   1bf12:	91 e3       	ldi	r25, 0x31	; 49
   1bf14:	07 c0       	rjmp	.+14     	; 0x1bf24 <lif_create_image+0x5a>
        return(-1);
    }
    if(!sectors)
   1bf16:	e1 14       	cp	r14, r1
   1bf18:	f1 04       	cpc	r15, r1
   1bf1a:	01 05       	cpc	r16, r1
   1bf1c:	11 05       	cpc	r17, r1
   1bf1e:	59 f4       	brne	.+22     	; 0x1bf36 <lif_create_image+0x6c>
    {
        printf("lif_create_image: sectors is 0\n");
   1bf20:	8d ef       	ldi	r24, 0xFD	; 253
   1bf22:	90 e3       	ldi	r25, 0x30	; 48
   1bf24:	1f 92       	push	r1
   1bf26:	9f 93       	push	r25
   1bf28:	8f 93       	push	r24
   1bf2a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(-1);
   1bf2e:	0f 90       	pop	r0
   1bf30:	0f 90       	pop	r0
   1bf32:	0f 90       	pop	r0
   1bf34:	30 c0       	rjmp	.+96     	; 0x1bf96 <lif_create_image+0xcc>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1bf36:	67 01       	movw	r12, r14
   1bf38:	78 01       	movw	r14, r16
   1bf3a:	b2 e0       	ldi	r27, 0x02	; 2
   1bf3c:	cb 1a       	sub	r12, r27
   1bf3e:	d1 08       	sbc	r13, r1
   1bf40:	e1 08       	sbc	r14, r1
   1bf42:	f1 08       	sbc	r15, r1
   1bf44:	56 01       	movw	r10, r12
   1bf46:	67 01       	movw	r12, r14
   1bf48:	a2 1a       	sub	r10, r18
   1bf4a:	b3 0a       	sbc	r11, r19
   1bf4c:	c4 0a       	sbc	r12, r20
   1bf4e:	d5 0a       	sbc	r13, r21
   1bf50:	79 01       	movw	r14, r18
   1bf52:	8a 01       	movw	r16, r20
   1bf54:	22 e0       	ldi	r18, 0x02	; 2
   1bf56:	30 e0       	ldi	r19, 0x00	; 0
   1bf58:	40 e0       	ldi	r20, 0x00	; 0
   1bf5a:	50 e0       	ldi	r21, 0x00	; 0
   1bf5c:	0e 94 99 cd 	call	0x19b32	; 0x19b32 <lif_create_volume>
    if(LIF == NULL)
   1bf60:	00 97       	sbiw	r24, 0x00	; 0
   1bf62:	c9 f0       	breq	.+50     	; 0x1bf96 <lif_create_image+0xcc>
        return(-1);
    lif_close_volume(LIF);
   1bf64:	0e 94 33 cb 	call	0x19666	; 0x19666 <lif_close_volume>

    printf("\tFormating: wrote %ld sectors\n", (long)end);
   1bf68:	82 01       	movw	r16, r4
   1bf6a:	d6 2d       	mov	r29, r6
   1bf6c:	c7 2d       	mov	r28, r7
   1bf6e:	7f 92       	push	r7
   1bf70:	6f 92       	push	r6
   1bf72:	5f 92       	push	r5
   1bf74:	4f 92       	push	r4
   1bf76:	8e ed       	ldi	r24, 0xDE	; 222
   1bf78:	90 e3       	ldi	r25, 0x30	; 48
   1bf7a:	1f 92       	push	r1
   1bf7c:	9f 93       	push	r25
   1bf7e:	8f 93       	push	r24
   1bf80:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    return(end);
   1bf84:	8d b7       	in	r24, 0x3d	; 61
   1bf86:	9e b7       	in	r25, 0x3e	; 62
   1bf88:	07 96       	adiw	r24, 0x07	; 7
   1bf8a:	0f b6       	in	r0, 0x3f	; 63
   1bf8c:	f8 94       	cli
   1bf8e:	9e bf       	out	0x3e, r25	; 62
   1bf90:	0f be       	out	0x3f, r0	; 63
   1bf92:	8d bf       	out	0x3d, r24	; 61
   1bf94:	04 c0       	rjmp	.+8      	; 0x1bf9e <lif_create_image+0xd4>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1bf96:	0f ef       	ldi	r16, 0xFF	; 255
   1bf98:	1f ef       	ldi	r17, 0xFF	; 255
   1bf9a:	df ef       	ldi	r29, 0xFF	; 255
   1bf9c:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormating: wrote %ld sectors\n", (long)end);
    return(end);
}
   1bf9e:	b8 01       	movw	r22, r16
   1bfa0:	8d 2f       	mov	r24, r29
   1bfa2:	9c 2f       	mov	r25, r28
   1bfa4:	df 91       	pop	r29
   1bfa6:	cf 91       	pop	r28
   1bfa8:	1f 91       	pop	r17
   1bfaa:	0f 91       	pop	r16
   1bfac:	ff 90       	pop	r15
   1bfae:	ef 90       	pop	r14
   1bfb0:	df 90       	pop	r13
   1bfb2:	cf 90       	pop	r12
   1bfb4:	bf 90       	pop	r11
   1bfb6:	af 90       	pop	r10
   1bfb8:	7f 90       	pop	r7
   1bfba:	6f 90       	pop	r6
   1bfbc:	5f 90       	pop	r5
   1bfbe:	4f 90       	pop	r4
   1bfc0:	08 95       	ret

0001bfc2 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1bfc2:	a0 e0       	ldi	r26, 0x00	; 0
   1bfc4:	b0 e0       	ldi	r27, 0x00	; 0
   1bfc6:	e6 ee       	ldi	r30, 0xE6	; 230
   1bfc8:	ff ed       	ldi	r31, 0xDF	; 223
   1bfca:	4e c5       	rjmp	.+2716   	; 0x1ca68 <__prologue_saves__+0xc>
    // NAME
    ind = 0;
	// Skip program name
    ptr = argv[ind++];

    if(!ptr )
   1bfcc:	fb 01       	movw	r30, r22
   1bfce:	20 81       	ld	r18, Z
   1bfd0:	31 81       	ldd	r19, Z+1	; 0x01
   1bfd2:	23 2b       	or	r18, r19
   1bfd4:	59 f0       	breq	.+22     	; 0x1bfec <lif_tests+0x2a>
   1bfd6:	6b 01       	movw	r12, r22
   1bfd8:	4c 01       	movw	r8, r24
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1bfda:	fb 01       	movw	r30, r22
   1bfdc:	a2 80       	ldd	r10, Z+2	; 0x02
   1bfde:	b3 80       	ldd	r11, Z+3	; 0x03



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1bfe0:	02 97       	sbiw	r24, 0x02	; 2
   1bfe2:	3c f4       	brge	.+14     	; 0x1bff2 <lif_tests+0x30>
    {
        lif_help(1);
   1bfe4:	81 e0       	ldi	r24, 0x01	; 1
   1bfe6:	90 e0       	ldi	r25, 0x00	; 0
   1bfe8:	0e 94 9e c1 	call	0x1833c	; 0x1833c <lif_help>
#ifdef TELEDISK
        td0_help(1);
#endif
        return(0);
   1bfec:	80 e0       	ldi	r24, 0x00	; 0
   1bfee:	90 e0       	ldi	r25, 0x00	; 0
   1bff0:	56 c1       	rjmp	.+684    	; 0x1c29e <lif_tests+0x2dc>
	// Next Argument after program name
    ptr = argv[ind++];



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1bff2:	a1 14       	cp	r10, r1
   1bff4:	b1 04       	cpc	r11, r1
   1bff6:	b1 f3       	breq	.-20     	; 0x1bfe4 <lif_tests+0x22>
   1bff8:	67 ef       	ldi	r22, 0xF7	; 247
   1bffa:	75 e1       	ldi	r23, 0x15	; 21
   1bffc:	c5 01       	movw	r24, r10
   1bffe:	0e 94 7e 32 	call	0x64fc	; 0x64fc <MATCH>
   1c002:	89 2b       	or	r24, r25
   1c004:	79 f7       	brne	.-34     	; 0x1bfe4 <lif_tests+0x22>
   1c006:	66 ef       	ldi	r22, 0xF6	; 246
   1c008:	75 e1       	ldi	r23, 0x15	; 21
   1c00a:	c5 01       	movw	r24, r10
   1c00c:	0e 94 7e 32 	call	0x64fc	; 0x64fc <MATCH>
   1c010:	89 2b       	or	r24, r25
   1c012:	41 f7       	brne	.-48     	; 0x1bfe4 <lif_tests+0x22>
   1c014:	6c ef       	ldi	r22, 0xFC	; 252
   1c016:	75 e1       	ldi	r23, 0x15	; 21
   1c018:	c5 01       	movw	r24, r10
   1c01a:	0e 94 7e 32 	call	0x64fc	; 0x64fc <MATCH>
   1c01e:	89 2b       	or	r24, r25
   1c020:	09 f7       	brne	.-62     	; 0x1bfe4 <lif_tests+0x22>
        return(0);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1c022:	94 01       	movw	r18, r8
   1c024:	42 e0       	ldi	r20, 0x02	; 2
   1c026:	50 e0       	ldi	r21, 0x00	; 0
   1c028:	6f ef       	ldi	r22, 0xFF	; 255
   1c02a:	75 e1       	ldi	r23, 0x15	; 21
   1c02c:	c5 01       	movw	r24, r10
   1c02e:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c032:	89 2b       	or	r24, r25
   1c034:	61 f0       	breq	.+24     	; 0x1c04e <lif_tests+0x8c>
    {
		debuglevel = 0xffff;
   1c036:	8f ef       	ldi	r24, 0xFF	; 255
   1c038:	9f ef       	ldi	r25, 0xFF	; 255
   1c03a:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   1c03e:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
		ptr = argv[ind++];
   1c042:	f6 01       	movw	r30, r12
   1c044:	a4 80       	ldd	r10, Z+4	; 0x04
   1c046:	b5 80       	ldd	r11, Z+5	; 0x05
   1c048:	c3 e0       	ldi	r28, 0x03	; 3
   1c04a:	d0 e0       	ldi	r29, 0x00	; 0
   1c04c:	02 c0       	rjmp	.+4      	; 0x1c052 <lif_tests+0x90>

    if(!ptr )
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1c04e:	c2 e0       	ldi	r28, 0x02	; 2
   1c050:	d0 e0       	ldi	r29, 0x00	; 0
    {
		debuglevel = 0xffff;
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1c052:	7e 01       	movw	r14, r28
   1c054:	f3 e0       	ldi	r31, 0x03	; 3
   1c056:	ef 0e       	add	r14, r31
   1c058:	f1 1c       	adc	r15, r1
   1c05a:	94 01       	movw	r18, r8
   1c05c:	a7 01       	movw	r20, r14
   1c05e:	62 e0       	ldi	r22, 0x02	; 2
   1c060:	76 e1       	ldi	r23, 0x16	; 22
   1c062:	c5 01       	movw	r24, r10
   1c064:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c068:	89 2b       	or	r24, r25
   1c06a:	81 f0       	breq	.+32     	; 0x1c08c <lif_tests+0xca>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c06c:	22 96       	adiw	r28, 0x02	; 2
   1c06e:	cc 0f       	add	r28, r28
   1c070:	dd 1f       	adc	r29, r29
   1c072:	cc 0d       	add	r28, r12
   1c074:	dd 1d       	adc	r29, r13
   1c076:	48 81       	ld	r20, Y
   1c078:	59 81       	ldd	r21, Y+1	; 0x01
   1c07a:	fe 01       	movw	r30, r28
   1c07c:	32 97       	sbiw	r30, 0x02	; 2
   1c07e:	60 81       	ld	r22, Z
   1c080:	71 81       	ldd	r23, Z+1	; 0x01
   1c082:	24 97       	sbiw	r28, 0x04	; 4
   1c084:	88 81       	ld	r24, Y
   1c086:	99 81       	ldd	r25, Y+1	; 0x01
   1c088:	6a dc       	rcall	.-1836   	; 0x1b95e <lif_add_lif_file>
   1c08a:	07 c1       	rjmp	.+526    	; 0x1c29a <lif_tests+0x2d8>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1c08c:	94 01       	movw	r18, r8
   1c08e:	a7 01       	movw	r20, r14
   1c090:	69 e0       	ldi	r22, 0x09	; 9
   1c092:	76 e1       	ldi	r23, 0x16	; 22
   1c094:	c5 01       	movw	r24, r10
   1c096:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c09a:	89 2b       	or	r24, r25
   1c09c:	89 f0       	breq	.+34     	; 0x1c0c0 <lif_tests+0xfe>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1c09e:	22 96       	adiw	r28, 0x02	; 2
   1c0a0:	cc 0f       	add	r28, r28
   1c0a2:	dd 1f       	adc	r29, r29
   1c0a4:	cc 0d       	add	r28, r12
   1c0a6:	dd 1d       	adc	r29, r13
   1c0a8:	48 81       	ld	r20, Y
   1c0aa:	59 81       	ldd	r21, Y+1	; 0x01
   1c0ac:	fe 01       	movw	r30, r28
   1c0ae:	32 97       	sbiw	r30, 0x02	; 2
   1c0b0:	60 81       	ld	r22, Z
   1c0b2:	71 81       	ldd	r23, Z+1	; 0x01
   1c0b4:	24 97       	sbiw	r28, 0x04	; 4
   1c0b6:	88 81       	ld	r24, Y
   1c0b8:	99 81       	ldd	r25, Y+1	; 0x01
   1c0ba:	0e 94 43 d7 	call	0x1ae86	; 0x1ae86 <lif_add_ascii_file_as_e010>
   1c0be:	ed c0       	rjmp	.+474    	; 0x1c29a <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1c0c0:	94 01       	movw	r18, r8
   1c0c2:	a7 01       	movw	r20, r14
   1c0c4:	6d e0       	ldi	r22, 0x0D	; 13
   1c0c6:	76 e1       	ldi	r23, 0x16	; 22
   1c0c8:	c5 01       	movw	r24, r10
   1c0ca:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c0ce:	89 2b       	or	r24, r25
   1c0d0:	09 f4       	brne	.+2      	; 0x1c0d4 <lif_tests+0x112>
   1c0d2:	42 c0       	rjmp	.+132    	; 0x1c158 <lif_tests+0x196>
    {
		///@brief format LIF image
		long dir,sectors;
		char *name = argv[ind];
   1c0d4:	cc 0f       	add	r28, r28
   1c0d6:	dd 1f       	adc	r29, r29
   1c0d8:	cc 0d       	add	r28, r12
   1c0da:	dd 1d       	adc	r29, r13
   1c0dc:	c8 80       	ld	r12, Y
   1c0de:	d9 80       	ldd	r13, Y+1	; 0x01
		char *label = argv[ind+1];
   1c0e0:	aa 80       	ldd	r10, Y+2	; 0x02
   1c0e2:	bb 80       	ldd	r11, Y+3	; 0x03
		char *model = argv[ind+2];
   1c0e4:	0c 80       	ldd	r0, Y+4	; 0x04
   1c0e6:	dd 81       	ldd	r29, Y+5	; 0x05
   1c0e8:	c0 2d       	mov	r28, r0
		if( MATCHI_LEN(model,"hp"))
   1c0ea:	68 e1       	ldi	r22, 0x18	; 24
   1c0ec:	76 e1       	ldi	r23, 0x16	; 22
   1c0ee:	ce 01       	movw	r24, r28
   1c0f0:	0e 94 d5 32 	call	0x65aa	; 0x65aa <MATCHI_LEN>
   1c0f4:	89 2b       	or	r24, r25
   1c0f6:	09 f0       	breq	.+2      	; 0x1c0fa <lif_tests+0x138>
			model +=2;
   1c0f8:	22 96       	adiw	r28, 0x02	; 2
		if(hpdir_find_drive(model,0, 0))
   1c0fa:	40 e0       	ldi	r20, 0x00	; 0
   1c0fc:	50 e0       	ldi	r21, 0x00	; 0
   1c0fe:	60 e0       	ldi	r22, 0x00	; 0
   1c100:	70 e0       	ldi	r23, 0x00	; 0
   1c102:	ce 01       	movw	r24, r28
   1c104:	0e 94 e8 a5 	call	0x14bd0	; 0x14bd0 <hpdir_find_drive>
   1c108:	89 2b       	or	r24, r25
   1c10a:	b9 f0       	breq	.+46     	; 0x1c13a <lif_tests+0x178>
		{
			dir = lif_dir_count(hpdir.BLOCKS);
   1c10c:	60 91 9c 20 	lds	r22, 0x209C	; 0x80209c <hpdir+0xac>
   1c110:	70 91 9d 20 	lds	r23, 0x209D	; 0x80209d <hpdir+0xad>
   1c114:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <hpdir+0xae>
   1c118:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <hpdir+0xaf>
   1c11c:	0e 94 cb a5 	call	0x14b96	; 0x14b96 <lif_dir_count>
   1c120:	9b 01       	movw	r18, r22
   1c122:	ac 01       	movw	r20, r24
			sectors = hpdir.BLOCKS;
			lif_create_image(name, label, dir, sectors);
   1c124:	e0 90 9c 20 	lds	r14, 0x209C	; 0x80209c <hpdir+0xac>
   1c128:	f0 90 9d 20 	lds	r15, 0x209D	; 0x80209d <hpdir+0xad>
   1c12c:	00 91 9e 20 	lds	r16, 0x209E	; 0x80209e <hpdir+0xae>
   1c130:	10 91 9f 20 	lds	r17, 0x209F	; 0x80209f <hpdir+0xaf>
   1c134:	b5 01       	movw	r22, r10
   1c136:	c6 01       	movw	r24, r12
   1c138:	36 c0       	rjmp	.+108    	; 0x1c1a6 <lif_tests+0x1e4>
			return(1);
		}
		printf("Disk: %s not found in hpdir.ini\n", model);
   1c13a:	df 93       	push	r29
   1c13c:	cf 93       	push	r28
   1c13e:	81 e1       	ldi	r24, 0x11	; 17
   1c140:	93 e4       	ldi	r25, 0x43	; 67
   1c142:	1f 92       	push	r1
   1c144:	9f 93       	push	r25
   1c146:	8f 93       	push	r24
   1c148:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
        return(1);
   1c14c:	0f 90       	pop	r0
   1c14e:	0f 90       	pop	r0
   1c150:	0f 90       	pop	r0
   1c152:	0f 90       	pop	r0
   1c154:	0f 90       	pop	r0
   1c156:	a1 c0       	rjmp	.+322    	; 0x1c29a <lif_tests+0x2d8>
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1c158:	94 01       	movw	r18, r8
   1c15a:	ae 01       	movw	r20, r28
   1c15c:	4c 5f       	subi	r20, 0xFC	; 252
   1c15e:	5f 4f       	sbci	r21, 0xFF	; 255
   1c160:	6b e1       	ldi	r22, 0x1B	; 27
   1c162:	76 e1       	ldi	r23, 0x16	; 22
   1c164:	c5 01       	movw	r24, r10
   1c166:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c16a:	89 2b       	or	r24, r25
   1c16c:	f1 f0       	breq	.+60     	; 0x1c1aa <lif_tests+0x1e8>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1c16e:	e7 01       	movw	r28, r14
   1c170:	cc 0f       	add	r28, r28
   1c172:	dd 1f       	adc	r29, r29
   1c174:	cc 0d       	add	r28, r12
   1c176:	dd 1d       	adc	r29, r13
   1c178:	88 81       	ld	r24, Y
   1c17a:	99 81       	ldd	r25, Y+1	; 0x01
   1c17c:	0e 94 49 47 	call	0x8e92	; 0x8e92 <atol>
   1c180:	6b 01       	movw	r12, r22
   1c182:	7c 01       	movw	r14, r24
   1c184:	fe 01       	movw	r30, r28
   1c186:	32 97       	sbiw	r30, 0x02	; 2
   1c188:	80 81       	ld	r24, Z
   1c18a:	91 81       	ldd	r25, Z+1	; 0x01
   1c18c:	0e 94 49 47 	call	0x8e92	; 0x8e92 <atol>
   1c190:	9b 01       	movw	r18, r22
   1c192:	ac 01       	movw	r20, r24
   1c194:	fe 01       	movw	r30, r28
   1c196:	34 97       	sbiw	r30, 0x04	; 4
   1c198:	60 81       	ld	r22, Z
   1c19a:	71 81       	ldd	r23, Z+1	; 0x01
   1c19c:	26 97       	sbiw	r28, 0x06	; 6
   1c19e:	87 01       	movw	r16, r14
   1c1a0:	76 01       	movw	r14, r12
   1c1a2:	88 81       	ld	r24, Y
   1c1a4:	99 81       	ldd	r25, Y+1	; 0x01
   1c1a6:	91 de       	rcall	.-734    	; 0x1beca <lif_create_image>
   1c1a8:	78 c0       	rjmp	.+240    	; 0x1c29a <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1c1aa:	8e 01       	movw	r16, r28
   1c1ac:	0e 5f       	subi	r16, 0xFE	; 254
   1c1ae:	1f 4f       	sbci	r17, 0xFF	; 255
   1c1b0:	94 01       	movw	r18, r8
   1c1b2:	a8 01       	movw	r20, r16
   1c1b4:	62 e2       	ldi	r22, 0x22	; 34
   1c1b6:	76 e1       	ldi	r23, 0x16	; 22
   1c1b8:	c5 01       	movw	r24, r10
   1c1ba:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c1be:	ae 01       	movw	r20, r28
   1c1c0:	4f 5f       	subi	r20, 0xFF	; 255
   1c1c2:	5f 4f       	sbci	r21, 0xFF	; 255
   1c1c4:	89 2b       	or	r24, r25
   1c1c6:	61 f0       	breq	.+24     	; 0x1c1e0 <lif_tests+0x21e>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1c1c8:	ea 01       	movw	r28, r20
   1c1ca:	cc 0f       	add	r28, r28
   1c1cc:	dd 1f       	adc	r29, r29
   1c1ce:	cc 0d       	add	r28, r12
   1c1d0:	dd 1d       	adc	r29, r13
   1c1d2:	68 81       	ld	r22, Y
   1c1d4:	79 81       	ldd	r23, Y+1	; 0x01
   1c1d6:	22 97       	sbiw	r28, 0x02	; 2
   1c1d8:	88 81       	ld	r24, Y
   1c1da:	99 81       	ldd	r25, Y+1	; 0x01
   1c1dc:	58 dd       	rcall	.-1360   	; 0x1bc8e <lif_del_file>
   1c1de:	5d c0       	rjmp	.+186    	; 0x1c29a <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1c1e0:	94 01       	movw	r18, r8
   1c1e2:	6c e4       	ldi	r22, 0x4C	; 76
   1c1e4:	7b e0       	ldi	r23, 0x0B	; 11
   1c1e6:	c5 01       	movw	r24, r10
   1c1e8:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c1ec:	89 2b       	or	r24, r25
   1c1ee:	49 f0       	breq	.+18     	; 0x1c202 <lif_tests+0x240>
    {
        lif_dir(argv[ind]);
   1c1f0:	cc 0f       	add	r28, r28
   1c1f2:	dd 1f       	adc	r29, r29
   1c1f4:	cc 0d       	add	r28, r12
   1c1f6:	dd 1d       	adc	r29, r13
   1c1f8:	88 81       	ld	r24, Y
   1c1fa:	99 81       	ldd	r25, Y+1	; 0x01
   1c1fc:	0e 94 2b d3 	call	0x1a656	; 0x1a656 <lif_dir>
   1c200:	4c c0       	rjmp	.+152    	; 0x1c29a <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1c202:	94 01       	movw	r18, r8
   1c204:	a7 01       	movw	r20, r14
   1c206:	66 e2       	ldi	r22, 0x26	; 38
   1c208:	76 e1       	ldi	r23, 0x16	; 22
   1c20a:	c5 01       	movw	r24, r10
   1c20c:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c210:	89 2b       	or	r24, r25
   1c212:	81 f0       	breq	.+32     	; 0x1c234 <lif_tests+0x272>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1c214:	e8 01       	movw	r28, r16
   1c216:	cc 0f       	add	r28, r28
   1c218:	dd 1f       	adc	r29, r29
   1c21a:	cc 0d       	add	r28, r12
   1c21c:	dd 1d       	adc	r29, r13
   1c21e:	48 81       	ld	r20, Y
   1c220:	59 81       	ldd	r21, Y+1	; 0x01
   1c222:	fe 01       	movw	r30, r28
   1c224:	32 97       	sbiw	r30, 0x02	; 2
   1c226:	60 81       	ld	r22, Z
   1c228:	71 81       	ldd	r23, Z+1	; 0x01
   1c22a:	24 97       	sbiw	r28, 0x04	; 4
   1c22c:	88 81       	ld	r24, Y
   1c22e:	99 81       	ldd	r25, Y+1	; 0x01
   1c230:	4f da       	rcall	.-2914   	; 0x1b6d0 <lif_extract_lif_as_lif>
   1c232:	33 c0       	rjmp	.+102    	; 0x1c29a <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1c234:	94 01       	movw	r18, r8
   1c236:	a7 01       	movw	r20, r14
   1c238:	61 e3       	ldi	r22, 0x31	; 49
   1c23a:	76 e1       	ldi	r23, 0x16	; 22
   1c23c:	c5 01       	movw	r24, r10
   1c23e:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c242:	89 2b       	or	r24, r25
   1c244:	89 f0       	breq	.+34     	; 0x1c268 <lif_tests+0x2a6>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1c246:	e8 01       	movw	r28, r16
   1c248:	cc 0f       	add	r28, r28
   1c24a:	dd 1f       	adc	r29, r29
   1c24c:	cc 0d       	add	r28, r12
   1c24e:	dd 1d       	adc	r29, r13
   1c250:	48 81       	ld	r20, Y
   1c252:	59 81       	ldd	r21, Y+1	; 0x01
   1c254:	fe 01       	movw	r30, r28
   1c256:	32 97       	sbiw	r30, 0x02	; 2
   1c258:	60 81       	ld	r22, Z
   1c25a:	71 81       	ldd	r23, Z+1	; 0x01
   1c25c:	24 97       	sbiw	r28, 0x04	; 4
   1c25e:	88 81       	ld	r24, Y
   1c260:	99 81       	ldd	r25, Y+1	; 0x01
   1c262:	0e 94 7c d8 	call	0x1b0f8	; 0x1b0f8 <lif_extract_e010_as_ascii>
   1c266:	19 c0       	rjmp	.+50     	; 0x1c29a <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c268:	94 01       	movw	r18, r8
   1c26a:	a7 01       	movw	r20, r14
   1c26c:	69 e5       	ldi	r22, 0x59	; 89
   1c26e:	7b e0       	ldi	r23, 0x0B	; 11
   1c270:	c5 01       	movw	r24, r10
   1c272:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c276:	89 2b       	or	r24, r25
   1c278:	09 f4       	brne	.+2      	; 0x1c27c <lif_tests+0x2ba>
   1c27a:	b8 ce       	rjmp	.-656    	; 0x1bfec <lif_tests+0x2a>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c27c:	00 0f       	add	r16, r16
   1c27e:	11 1f       	adc	r17, r17
   1c280:	e6 01       	movw	r28, r12
   1c282:	c0 0f       	add	r28, r16
   1c284:	d1 1f       	adc	r29, r17
   1c286:	48 81       	ld	r20, Y
   1c288:	59 81       	ldd	r21, Y+1	; 0x01
   1c28a:	fe 01       	movw	r30, r28
   1c28c:	32 97       	sbiw	r30, 0x02	; 2
   1c28e:	60 81       	ld	r22, Z
   1c290:	71 81       	ldd	r23, Z+1	; 0x01
   1c292:	24 97       	sbiw	r28, 0x04	; 4
   1c294:	88 81       	ld	r24, Y
   1c296:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   1c298:	92 dd       	rcall	.-1244   	; 0x1bdbe <lif_rename_file>
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1c29a:	81 e0       	ldi	r24, 0x01	; 1
   1c29c:	90 e0       	ldi	r25, 0x00	; 0
   1c29e:	cd b7       	in	r28, 0x3d	; 61
   1c2a0:	de b7       	in	r29, 0x3e	; 62
   1c2a2:	ec e0       	ldi	r30, 0x0C	; 12
   1c2a4:	fd c3       	rjmp	.+2042   	; 0x1caa0 <__epilogue_restores__+0xc>

0001c2a6 <copyright>:

///@brief Display Copyright
///@return void
void copyright()
{
    printf("Stand alone version of LIF utilities for linux\n");
   1c2a6:	83 e7       	ldi	r24, 0x73	; 115
   1c2a8:	98 e4       	ldi	r25, 0x48	; 72
   1c2aa:	1f 92       	push	r1
   1c2ac:	9f 93       	push	r25
   1c2ae:	8f 93       	push	r24
   1c2b0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1c2b4:	84 e5       	ldi	r24, 0x54	; 84
   1c2b6:	98 e4       	ldi	r25, 0x48	; 72
   1c2b8:	1f 92       	push	r1
   1c2ba:	9f 93       	push	r25
   1c2bc:	8f 93       	push	r24
   1c2be:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c2c2:	87 e3       	ldi	r24, 0x37	; 55
   1c2c4:	98 e4       	ldi	r25, 0x48	; 72
   1c2c6:	1f 92       	push	r1
   1c2c8:	9f 93       	push	r25
   1c2ca:	8f 93       	push	r24
   1c2cc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf(" GNU version 3\n");
   1c2d0:	87 e2       	ldi	r24, 0x27	; 39
   1c2d2:	98 e4       	ldi	r25, 0x48	; 72
   1c2d4:	1f 92       	push	r1
   1c2d6:	9f 93       	push	r25
   1c2d8:	8f 93       	push	r24
   1c2da:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c2de:	80 e0       	ldi	r24, 0x00	; 0
   1c2e0:	98 e4       	ldi	r25, 0x48	; 72
   1c2e2:	1f 92       	push	r1
   1c2e4:	9f 93       	push	r25
   1c2e6:	8f 93       	push	r24
   1c2e8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c2ec:	89 e3       	ldi	r24, 0x39	; 57
   1c2ee:	96 e1       	ldi	r25, 0x16	; 22
   1c2f0:	9f 93       	push	r25
   1c2f2:	8f 93       	push	r24
   1c2f4:	86 ee       	ldi	r24, 0xE6	; 230
   1c2f6:	97 e4       	ldi	r25, 0x47	; 71
   1c2f8:	1f 92       	push	r1
   1c2fa:	9f 93       	push	r25
   1c2fc:	8f 93       	push	r24
   1c2fe:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c302:	8d e5       	ldi	r24, 0x5D	; 93
   1c304:	96 e1       	ldi	r25, 0x16	; 22
   1c306:	9f 93       	push	r25
   1c308:	8f 93       	push	r24
   1c30a:	8c ec       	ldi	r24, 0xCC	; 204
   1c30c:	97 e4       	ldi	r25, 0x47	; 71
   1c30e:	1f 92       	push	r1
   1c310:	9f 93       	push	r25
   1c312:	8f 93       	push	r24
   1c314:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
    printf("\n");
   1c318:	8a ec       	ldi	r24, 0xCA	; 202
   1c31a:	97 e4       	ldi	r25, 0x47	; 71
   1c31c:	1f 92       	push	r1
   1c31e:	9f 93       	push	r25
   1c320:	8f 93       	push	r24
   1c322:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
}
   1c326:	8d b7       	in	r24, 0x3d	; 61
   1c328:	9e b7       	in	r25, 0x3e	; 62
   1c32a:	4c 96       	adiw	r24, 0x1c	; 28
   1c32c:	0f b6       	in	r0, 0x3f	; 63
   1c32e:	f8 94       	cli
   1c330:	9e bf       	out	0x3e, r25	; 62
   1c332:	0f be       	out	0x3f, r0	; 63
   1c334:	8d bf       	out	0x3d, r24	; 61
   1c336:	08 95       	ret

0001c338 <delay_tests>:
///
/// This included measurement of avr-libc delays
/// @return  void
void delay_tests()
{
    printf("System delays\n");
   1c338:	8b eb       	ldi	r24, 0xBB	; 187
   1c33a:	97 e4       	ldi	r25, 0x47	; 71
   1c33c:	1f 92       	push	r1
   1c33e:	9f 93       	push	r25
   1c340:	8f 93       	push	r24
   1c342:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>

    clock_elapsed_begin();
   1c346:	0e 94 d6 35 	call	0x6bac	; 0x6bac <clock_elapsed_begin>
    clock_elapsed_end("elapsed timer overhead");
   1c34a:	81 e8       	ldi	r24, 0x81	; 129
   1c34c:	96 e1       	ldi	r25, 0x16	; 22
   1c34e:	0e 94 dc 35 	call	0x6bb8	; 0x6bb8 <clock_elapsed_end>

    clock_elapsed_begin();
   1c352:	0e 94 d6 35 	call	0x6bac	; 0x6bac <clock_elapsed_begin>
   1c356:	83 ef       	ldi	r24, 0xF3	; 243
   1c358:	91 e0       	ldi	r25, 0x01	; 1
   1c35a:	01 97       	sbiw	r24, 0x01	; 1
   1c35c:	f1 f7       	brne	.-4      	; 0x1c35a <delay_tests+0x22>
   1c35e:	00 c0       	rjmp	.+0      	; 0x1c360 <delay_tests+0x28>
   1c360:	00 00       	nop
    _delay_us(100);
    clock_elapsed_end("_delay_us(100)");
   1c362:	88 e9       	ldi	r24, 0x98	; 152
   1c364:	96 e1       	ldi	r25, 0x16	; 22
   1c366:	0e 94 dc 35 	call	0x6bb8	; 0x6bb8 <clock_elapsed_end>

    clock_elapsed_begin();
   1c36a:	0e 94 d6 35 	call	0x6bac	; 0x6bac <clock_elapsed_begin>
   1c36e:	83 ec       	ldi	r24, 0xC3	; 195
   1c370:	99 e0       	ldi	r25, 0x09	; 9
   1c372:	01 97       	sbiw	r24, 0x01	; 1
   1c374:	f1 f7       	brne	.-4      	; 0x1c372 <delay_tests+0x3a>
   1c376:	00 c0       	rjmp	.+0      	; 0x1c378 <delay_tests+0x40>
   1c378:	00 00       	nop
    _delay_us(500);
    clock_elapsed_end("_delay_us(500)");
   1c37a:	87 ea       	ldi	r24, 0xA7	; 167
   1c37c:	96 e1       	ldi	r25, 0x16	; 22
   1c37e:	0e 94 dc 35 	call	0x6bb8	; 0x6bb8 <clock_elapsed_end>

    printf("My delays\n");
   1c382:	80 eb       	ldi	r24, 0xB0	; 176
   1c384:	97 e4       	ldi	r25, 0x47	; 71
   1c386:	1f 92       	push	r1
   1c388:	9f 93       	push	r25
   1c38a:	8f 93       	push	r24
   1c38c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>

    clock_elapsed_begin();
   1c390:	0e 94 d6 35 	call	0x6bac	; 0x6bac <clock_elapsed_begin>
    delayus(100U);
   1c394:	64 e6       	ldi	r22, 0x64	; 100
   1c396:	70 e0       	ldi	r23, 0x00	; 0
   1c398:	80 e0       	ldi	r24, 0x00	; 0
   1c39a:	90 e0       	ldi	r25, 0x00	; 0
   1c39c:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <delayus>
    clock_elapsed_end("delayus(100)");
   1c3a0:	86 eb       	ldi	r24, 0xB6	; 182
   1c3a2:	96 e1       	ldi	r25, 0x16	; 22
   1c3a4:	0e 94 dc 35 	call	0x6bb8	; 0x6bb8 <clock_elapsed_end>

    clock_elapsed_begin();
   1c3a8:	0e 94 d6 35 	call	0x6bac	; 0x6bac <clock_elapsed_begin>
    delayus(500U);
   1c3ac:	64 ef       	ldi	r22, 0xF4	; 244
   1c3ae:	71 e0       	ldi	r23, 0x01	; 1
   1c3b0:	80 e0       	ldi	r24, 0x00	; 0
   1c3b2:	90 e0       	ldi	r25, 0x00	; 0
   1c3b4:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <delayus>
    clock_elapsed_end("delayus(500)");
   1c3b8:	83 ec       	ldi	r24, 0xC3	; 195
   1c3ba:	96 e1       	ldi	r25, 0x16	; 22
   1c3bc:	0e 94 dc 35 	call	0x6bb8	; 0x6bb8 <clock_elapsed_end>

    clock_elapsed_begin();
   1c3c0:	0e 94 d6 35 	call	0x6bac	; 0x6bac <clock_elapsed_begin>
    delayus(1100);
   1c3c4:	6c e4       	ldi	r22, 0x4C	; 76
   1c3c6:	74 e0       	ldi	r23, 0x04	; 4
   1c3c8:	80 e0       	ldi	r24, 0x00	; 0
   1c3ca:	90 e0       	ldi	r25, 0x00	; 0
   1c3cc:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <delayus>
    clock_elapsed_end("delayus(1100)");
   1c3d0:	80 ed       	ldi	r24, 0xD0	; 208
   1c3d2:	96 e1       	ldi	r25, 0x16	; 22
   1c3d4:	0e 94 dc 35 	call	0x6bb8	; 0x6bb8 <clock_elapsed_end>

    clock_elapsed_begin();
   1c3d8:	0e 94 d6 35 	call	0x6bac	; 0x6bac <clock_elapsed_begin>
    delayms(1000);
   1c3dc:	68 ee       	ldi	r22, 0xE8	; 232
   1c3de:	73 e0       	ldi	r23, 0x03	; 3
   1c3e0:	80 e0       	ldi	r24, 0x00	; 0
   1c3e2:	90 e0       	ldi	r25, 0x00	; 0
   1c3e4:	0e 94 29 2a 	call	0x5452	; 0x5452 <delayms>
    clock_elapsed_end("delayms(1100)");
   1c3e8:	8e ed       	ldi	r24, 0xDE	; 222
   1c3ea:	96 e1       	ldi	r25, 0x16	; 22
   1c3ec:	0e 94 dc 35 	call	0x6bb8	; 0x6bb8 <clock_elapsed_end>
}
   1c3f0:	0f 90       	pop	r0
   1c3f2:	0f 90       	pop	r0
   1c3f4:	0f 90       	pop	r0
   1c3f6:	0f 90       	pop	r0
   1c3f8:	0f 90       	pop	r0
   1c3fa:	0f 90       	pop	r0
   1c3fc:	08 95       	ret

0001c3fe <help>:
   1c3fe:	53 df       	rcall	.-346    	; 0x1c2a6 <copyright>
   1c400:	80 e0       	ldi	r24, 0x00	; 0
   1c402:	90 e0       	ldi	r25, 0x00	; 0
   1c404:	0e 94 94 73 	call	0xe728	; 0xe728 <fatfs_help>
   1c408:	80 e0       	ldi	r24, 0x00	; 0
   1c40a:	90 e0       	ldi	r25, 0x00	; 0
   1c40c:	0e 94 ba 7e 	call	0xfd74	; 0xfd74 <posix_help>
   1c410:	80 e0       	ldi	r24, 0x00	; 0
   1c412:	90 e0       	ldi	r25, 0x00	; 0
   1c414:	0e 94 9e c1 	call	0x1833c	; 0x1833c <lif_help>
   1c418:	80 e0       	ldi	r24, 0x00	; 0
   1c41a:	90 e0       	ldi	r25, 0x00	; 0
   1c41c:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <gpib_help>
   1c420:	8c e8       	ldi	r24, 0x8C	; 140
   1c422:	97 e4       	ldi	r25, 0x47	; 71
   1c424:	1f 92       	push	r1
   1c426:	9f 93       	push	r25
   1c428:	8f 93       	push	r24
   1c42a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c42e:	0f 90       	pop	r0
   1c430:	0f 90       	pop	r0
   1c432:	0f 90       	pop	r0
   1c434:	08 95       	ret

0001c436 <task>:
   1c436:	a4 ee       	ldi	r26, 0xE4	; 228
   1c438:	b0 e0       	ldi	r27, 0x00	; 0
   1c43a:	e0 e2       	ldi	r30, 0x20	; 32
   1c43c:	f2 ee       	ldi	r31, 0xE2	; 226
   1c43e:	1a c3       	rjmp	.+1588   	; 0x1ca74 <__prologue_saves__+0x18>
   1c440:	81 11       	cpse	r24, r1
   1c442:	0e 94 98 90 	call	0x12130	; 0x12130 <gpib_task>
   1c446:	80 e0       	ldi	r24, 0x00	; 0
   1c448:	0e 94 9c 2b 	call	0x5738	; 0x5738 <uart_rx_count>
   1c44c:	89 2b       	or	r24, r25
   1c44e:	09 f4       	brne	.+2      	; 0x1c452 <task+0x1c>
   1c450:	a0 c0       	rjmp	.+320    	; 0x1c592 <task+0x15c>
   1c452:	89 e8       	ldi	r24, 0x89	; 137
   1c454:	97 e4       	ldi	r25, 0x47	; 71
   1c456:	1f 92       	push	r1
   1c458:	9f 93       	push	r25
   1c45a:	8f 93       	push	r24
   1c45c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c460:	40 91 b7 1b 	lds	r20, 0x1BB7	; 0x801bb7 <__iob>
   1c464:	50 91 b8 1b 	lds	r21, 0x1BB8	; 0x801bb8 <__iob+0x1>
   1c468:	6e e7       	ldi	r22, 0x7E	; 126
   1c46a:	70 e0       	ldi	r23, 0x00	; 0
   1c46c:	ce 01       	movw	r24, r28
   1c46e:	01 96       	adiw	r24, 0x01	; 1
   1c470:	0e 94 bf 76 	call	0xed7e	; 0xed7e <fgets>
   1c474:	42 e3       	ldi	r20, 0x32	; 50
   1c476:	50 e0       	ldi	r21, 0x00	; 0
   1c478:	be 01       	movw	r22, r28
   1c47a:	6f 57       	subi	r22, 0x7F	; 127
   1c47c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c47e:	ce 01       	movw	r24, r28
   1c480:	01 96       	adiw	r24, 0x01	; 1
   1c482:	0e 94 ef 32 	call	0x65de	; 0x65de <split_args>
   1c486:	8c 01       	movw	r16, r24
   1c488:	cf 57       	subi	r28, 0x7F	; 127
   1c48a:	df 4f       	sbci	r29, 0xFF	; 255
   1c48c:	e8 80       	ld	r14, Y
   1c48e:	f9 80       	ldd	r15, Y+1	; 0x01
   1c490:	c1 58       	subi	r28, 0x81	; 129
   1c492:	d0 40       	sbci	r29, 0x00	; 0
   1c494:	0f 90       	pop	r0
   1c496:	0f 90       	pop	r0
   1c498:	0f 90       	pop	r0
   1c49a:	e1 14       	cp	r14, r1
   1c49c:	f1 04       	cpc	r15, r1
   1c49e:	09 f4       	brne	.+2      	; 0x1c4a2 <task+0x6c>
   1c4a0:	78 c0       	rjmp	.+240    	; 0x1c592 <task+0x15c>
   1c4a2:	9c 01       	movw	r18, r24
   1c4a4:	41 e0       	ldi	r20, 0x01	; 1
   1c4a6:	50 e0       	ldi	r21, 0x00	; 0
   1c4a8:	6c ee       	ldi	r22, 0xEC	; 236
   1c4aa:	76 e1       	ldi	r23, 0x16	; 22
   1c4ac:	c7 01       	movw	r24, r14
   1c4ae:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c4b2:	89 2b       	or	r24, r25
   1c4b4:	11 f0       	breq	.+4      	; 0x1c4ba <task+0x84>
   1c4b6:	40 df       	rcall	.-384    	; 0x1c338 <delay_tests>
   1c4b8:	6c c0       	rjmp	.+216    	; 0x1c592 <task+0x15c>
   1c4ba:	98 01       	movw	r18, r16
   1c4bc:	41 e0       	ldi	r20, 0x01	; 1
   1c4be:	50 e0       	ldi	r21, 0x00	; 0
   1c4c0:	68 ef       	ldi	r22, 0xF8	; 248
   1c4c2:	76 e1       	ldi	r23, 0x16	; 22
   1c4c4:	c7 01       	movw	r24, r14
   1c4c6:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c4ca:	89 2b       	or	r24, r25
   1c4cc:	61 f4       	brne	.+24     	; 0x1c4e6 <task+0xb0>
   1c4ce:	98 01       	movw	r18, r16
   1c4d0:	41 e0       	ldi	r20, 0x01	; 1
   1c4d2:	50 e0       	ldi	r21, 0x00	; 0
   1c4d4:	6d ef       	ldi	r22, 0xFD	; 253
   1c4d6:	76 e1       	ldi	r23, 0x16	; 22
   1c4d8:	c7 01       	movw	r24, r14
   1c4da:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c4de:	89 2b       	or	r24, r25
   1c4e0:	29 f0       	breq	.+10     	; 0x1c4ec <task+0xb6>
   1c4e2:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <setdate>
   1c4e6:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <display_clock>
   1c4ea:	53 c0       	rjmp	.+166    	; 0x1c592 <task+0x15c>
   1c4ec:	98 01       	movw	r18, r16
   1c4ee:	41 e0       	ldi	r20, 0x01	; 1
   1c4f0:	50 e0       	ldi	r21, 0x00	; 0
   1c4f2:	65 e0       	ldi	r22, 0x05	; 5
   1c4f4:	77 e1       	ldi	r23, 0x17	; 23
   1c4f6:	c7 01       	movw	r24, r14
   1c4f8:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c4fc:	89 2b       	or	r24, r25
   1c4fe:	19 f0       	breq	.+6      	; 0x1c506 <task+0xd0>
   1c500:	0e 94 06 29 	call	0x520c	; 0x520c <PrintFree>
   1c504:	46 c0       	rjmp	.+140    	; 0x1c592 <task+0x15c>
   1c506:	98 01       	movw	r18, r16
   1c508:	41 e0       	ldi	r20, 0x01	; 1
   1c50a:	50 e0       	ldi	r21, 0x00	; 0
   1c50c:	67 ef       	ldi	r22, 0xF7	; 247
   1c50e:	75 e1       	ldi	r23, 0x15	; 21
   1c510:	c7 01       	movw	r24, r14
   1c512:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c516:	89 2b       	or	r24, r25
   1c518:	11 f0       	breq	.+4      	; 0x1c51e <task+0xe8>
   1c51a:	71 df       	rcall	.-286    	; 0x1c3fe <help>
   1c51c:	3a c0       	rjmp	.+116    	; 0x1c592 <task+0x15c>
   1c51e:	98 01       	movw	r18, r16
   1c520:	41 e0       	ldi	r20, 0x01	; 1
   1c522:	50 e0       	ldi	r21, 0x00	; 0
   1c524:	6d ef       	ldi	r22, 0xFD	; 253
   1c526:	75 e1       	ldi	r23, 0x15	; 21
   1c528:	c7 01       	movw	r24, r14
   1c52a:	0e 94 92 32 	call	0x6524	; 0x6524 <MATCHARGS>
   1c52e:	89 2b       	or	r24, r25
   1c530:	a1 f7       	brne	.-24     	; 0x1c51a <task+0xe4>
   1c532:	be 01       	movw	r22, r28
   1c534:	6f 57       	subi	r22, 0x7F	; 127
   1c536:	7f 4f       	sbci	r23, 0xFF	; 255
   1c538:	c8 01       	movw	r24, r16
   1c53a:	0e 94 16 91 	call	0x1222c	; 0x1222c <gpib_tests>
   1c53e:	89 2b       	or	r24, r25
   1c540:	19 f0       	breq	.+6      	; 0x1c548 <task+0x112>
   1c542:	0e 94 64 8c 	call	0x118c8	; 0x118c8 <gpib_init_devices>
   1c546:	25 c0       	rjmp	.+74     	; 0x1c592 <task+0x15c>
   1c548:	be 01       	movw	r22, r28
   1c54a:	6f 57       	subi	r22, 0x7F	; 127
   1c54c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c54e:	c8 01       	movw	r24, r16
   1c550:	0e 94 25 82 	call	0x1044a	; 0x1044a <posix_tests>
   1c554:	89 2b       	or	r24, r25
   1c556:	e9 f4       	brne	.+58     	; 0x1c592 <task+0x15c>
   1c558:	be 01       	movw	r22, r28
   1c55a:	6f 57       	subi	r22, 0x7F	; 127
   1c55c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c55e:	c8 01       	movw	r24, r16
   1c560:	0e 94 af 74 	call	0xe95e	; 0xe95e <fatfs_tests>
   1c564:	89 2b       	or	r24, r25
   1c566:	a9 f4       	brne	.+42     	; 0x1c592 <task+0x15c>
   1c568:	be 01       	movw	r22, r28
   1c56a:	6f 57       	subi	r22, 0x7F	; 127
   1c56c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c56e:	c8 01       	movw	r24, r16
   1c570:	28 dd       	rcall	.-1456   	; 0x1bfc2 <lif_tests>
   1c572:	89 2b       	or	r24, r25
   1c574:	71 f4       	brne	.+28     	; 0x1c592 <task+0x15c>
   1c576:	ff 92       	push	r15
   1c578:	ef 92       	push	r14
   1c57a:	8d e7       	ldi	r24, 0x7D	; 125
   1c57c:	97 e4       	ldi	r25, 0x47	; 71
   1c57e:	1f 92       	push	r1
   1c580:	9f 93       	push	r25
   1c582:	8f 93       	push	r24
   1c584:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c588:	0f 90       	pop	r0
   1c58a:	0f 90       	pop	r0
   1c58c:	0f 90       	pop	r0
   1c58e:	0f 90       	pop	r0
   1c590:	0f 90       	pop	r0
   1c592:	cc 51       	subi	r28, 0x1C	; 28
   1c594:	df 4f       	sbci	r29, 0xFF	; 255
   1c596:	e6 e0       	ldi	r30, 0x06	; 6
   1c598:	89 c2       	rjmp	.+1298   	; 0x1caac <__epilogue_restores__+0x18>

0001c59a <main>:
   1c59a:	a8 e0       	ldi	r26, 0x08	; 8
   1c59c:	b0 e0       	ldi	r27, 0x00	; 0
   1c59e:	e2 ed       	ldi	r30, 0xD2	; 210
   1c5a0:	f2 ee       	ldi	r31, 0xE2	; 226
   1c5a2:	67 c2       	rjmp	.+1230   	; 0x1ca72 <__prologue_saves__+0x16>
   1c5a4:	0e 94 8f 85 	call	0x10b1e	; 0x10b1e <gpib_bus_init>
   1c5a8:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <init_timers>
   1c5ac:	40 e0       	ldi	r20, 0x00	; 0
   1c5ae:	52 ec       	ldi	r21, 0xC2	; 194
   1c5b0:	61 e0       	ldi	r22, 0x01	; 1
   1c5b2:	70 e0       	ldi	r23, 0x00	; 0
   1c5b4:	80 e0       	ldi	r24, 0x00	; 0
   1c5b6:	0e 94 0b 2b 	call	0x5616	; 0x5616 <uart_init>
   1c5ba:	06 2f       	mov	r16, r22
   1c5bc:	f7 2e       	mov	r15, r23
   1c5be:	e8 2e       	mov	r14, r24
   1c5c0:	d9 2e       	mov	r13, r25
   1c5c2:	68 ec       	ldi	r22, 0xC8	; 200
   1c5c4:	70 e0       	ldi	r23, 0x00	; 0
   1c5c6:	80 e0       	ldi	r24, 0x00	; 0
   1c5c8:	90 e0       	ldi	r25, 0x00	; 0
   1c5ca:	0e 94 29 2a 	call	0x5452	; 0x5452 <delayms>
   1c5ce:	0e 94 7e 31 	call	0x62fc	; 0x62fc <sep>
   1c5d2:	86 e7       	ldi	r24, 0x76	; 118
   1c5d4:	97 e4       	ldi	r25, 0x47	; 71
   1c5d6:	1f 92       	push	r1
   1c5d8:	9f 93       	push	r25
   1c5da:	8f 93       	push	r24
   1c5dc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c5e0:	11 e0       	ldi	r17, 0x01	; 1
   1c5e2:	1f 93       	push	r17
   1c5e4:	81 e3       	ldi	r24, 0x31	; 49
   1c5e6:	8f 93       	push	r24
   1c5e8:	8d e2       	ldi	r24, 0x2D	; 45
   1c5ea:	8f 93       	push	r24
   1c5ec:	1f 92       	push	r1
   1c5ee:	85 e6       	ldi	r24, 0x65	; 101
   1c5f0:	97 e4       	ldi	r25, 0x47	; 71
   1c5f2:	1f 92       	push	r1
   1c5f4:	9f 93       	push	r25
   1c5f6:	8f 93       	push	r24
   1c5f8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c5fc:	df 92       	push	r13
   1c5fe:	ef 92       	push	r14
   1c600:	ff 92       	push	r15
   1c602:	0f 93       	push	r16
   1c604:	1f 92       	push	r1
   1c606:	1f 93       	push	r17
   1c608:	82 ec       	ldi	r24, 0xC2	; 194
   1c60a:	8f 93       	push	r24
   1c60c:	1f 92       	push	r1
   1c60e:	8e e3       	ldi	r24, 0x3E	; 62
   1c610:	97 e4       	ldi	r25, 0x47	; 71
   1c612:	1f 92       	push	r1
   1c614:	9f 93       	push	r25
   1c616:	8f 93       	push	r24
   1c618:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c61c:	0e 94 7e 31 	call	0x62fc	; 0x62fc <sep>
   1c620:	8f e1       	ldi	r24, 0x1F	; 31
   1c622:	97 e4       	ldi	r25, 0x47	; 71
   1c624:	1f 92       	push	r1
   1c626:	9f 93       	push	r25
   1c628:	8f 93       	push	r24
   1c62a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c62e:	82 e0       	ldi	r24, 0x02	; 2
   1c630:	97 e4       	ldi	r25, 0x47	; 71
   1c632:	1f 92       	push	r1
   1c634:	9f 93       	push	r25
   1c636:	8f 93       	push	r24
   1c638:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c63c:	82 ef       	ldi	r24, 0xF2	; 242
   1c63e:	96 e4       	ldi	r25, 0x46	; 70
   1c640:	1f 92       	push	r1
   1c642:	9f 93       	push	r25
   1c644:	8f 93       	push	r24
   1c646:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c64a:	8b ec       	ldi	r24, 0xCB	; 203
   1c64c:	96 e4       	ldi	r25, 0x46	; 70
   1c64e:	1f 92       	push	r1
   1c650:	9f 93       	push	r25
   1c652:	8f 93       	push	r24
   1c654:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c658:	0f b6       	in	r0, 0x3f	; 63
   1c65a:	f8 94       	cli
   1c65c:	de bf       	out	0x3e, r29	; 62
   1c65e:	0f be       	out	0x3f, r0	; 63
   1c660:	cd bf       	out	0x3d, r28	; 61
   1c662:	89 e3       	ldi	r24, 0x39	; 57
   1c664:	96 e1       	ldi	r25, 0x16	; 22
   1c666:	9f 93       	push	r25
   1c668:	8f 93       	push	r24
   1c66a:	81 eb       	ldi	r24, 0xB1	; 177
   1c66c:	96 e4       	ldi	r25, 0x46	; 70
   1c66e:	1f 92       	push	r1
   1c670:	9f 93       	push	r25
   1c672:	8f 93       	push	r24
   1c674:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c678:	8d e5       	ldi	r24, 0x5D	; 93
   1c67a:	96 e1       	ldi	r25, 0x16	; 22
   1c67c:	9f 93       	push	r25
   1c67e:	8f 93       	push	r24
   1c680:	87 e9       	ldi	r24, 0x97	; 151
   1c682:	96 e4       	ldi	r25, 0x46	; 70
   1c684:	1f 92       	push	r1
   1c686:	9f 93       	push	r25
   1c688:	8f 93       	push	r24
   1c68a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c68e:	0e 94 7e 31 	call	0x62fc	; 0x62fc <sep>
   1c692:	0e 94 06 29 	call	0x520c	; 0x520c <PrintFree>
   1c696:	0e 94 7e 31 	call	0x62fc	; 0x62fc <sep>
   1c69a:	68 ec       	ldi	r22, 0xC8	; 200
   1c69c:	70 e0       	ldi	r23, 0x00	; 0
   1c69e:	80 e0       	ldi	r24, 0x00	; 0
   1c6a0:	90 e0       	ldi	r25, 0x00	; 0
   1c6a2:	0e 94 29 2a 	call	0x5452	; 0x5452 <delayms>
   1c6a6:	81 e8       	ldi	r24, 0x81	; 129
   1c6a8:	96 e4       	ldi	r25, 0x46	; 70
   1c6aa:	1f 92       	push	r1
   1c6ac:	9f 93       	push	r25
   1c6ae:	8f 93       	push	r24
   1c6b0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c6b4:	4b e0       	ldi	r20, 0x0B	; 11
   1c6b6:	50 e0       	ldi	r21, 0x00	; 0
   1c6b8:	60 e2       	ldi	r22, 0x20	; 32
   1c6ba:	71 ea       	ldi	r23, 0xA1	; 161
   1c6bc:	87 e0       	ldi	r24, 0x07	; 7
   1c6be:	90 e0       	ldi	r25, 0x00	; 0
   1c6c0:	0e 94 82 28 	call	0x5104	; 0x5104 <spi_init>
   1c6c4:	8b e6       	ldi	r24, 0x6B	; 107
   1c6c6:	96 e4       	ldi	r25, 0x46	; 70
   1c6c8:	1f 92       	push	r1
   1c6ca:	9f 93       	push	r25
   1c6cc:	8f 93       	push	r24
   1c6ce:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c6d2:	61 e1       	ldi	r22, 0x11	; 17
   1c6d4:	81 e0       	ldi	r24, 0x01	; 1
   1c6d6:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <TWI_Init>
   1c6da:	0e 94 7e 31 	call	0x62fc	; 0x62fc <sep>
   1c6de:	89 e5       	ldi	r24, 0x59	; 89
   1c6e0:	96 e4       	ldi	r25, 0x46	; 70
   1c6e2:	1f 92       	push	r1
   1c6e4:	9f 93       	push	r25
   1c6e6:	8f 93       	push	r24
   1c6e8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c6ec:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <clock_clear>
   1c6f0:	8a e4       	ldi	r24, 0x4A	; 74
   1c6f2:	96 e4       	ldi	r25, 0x46	; 70
   1c6f4:	1f 92       	push	r1
   1c6f6:	9f 93       	push	r25
   1c6f8:	8f 93       	push	r24
   1c6fa:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c6fe:	be 01       	movw	r22, r28
   1c700:	6f 5f       	subi	r22, 0xFF	; 255
   1c702:	7f 4f       	sbci	r23, 0xFF	; 255
   1c704:	80 e0       	ldi	r24, 0x00	; 0
   1c706:	90 e0       	ldi	r25, 0x00	; 0
   1c708:	0e 94 b9 36 	call	0x6d72	; 0x6d72 <clock_getres>
   1c70c:	88 85       	ldd	r24, Y+8	; 0x08
   1c70e:	8f 93       	push	r24
   1c710:	8f 81       	ldd	r24, Y+7	; 0x07
   1c712:	8f 93       	push	r24
   1c714:	8e 81       	ldd	r24, Y+6	; 0x06
   1c716:	8f 93       	push	r24
   1c718:	8d 81       	ldd	r24, Y+5	; 0x05
   1c71a:	8f 93       	push	r24
   1c71c:	8d e2       	ldi	r24, 0x2D	; 45
   1c71e:	96 e4       	ldi	r25, 0x46	; 70
   1c720:	1f 92       	push	r1
   1c722:	9f 93       	push	r25
   1c724:	8f 93       	push	r24
   1c726:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c72a:	8c e2       	ldi	r24, 0x2C	; 44
   1c72c:	91 e0       	ldi	r25, 0x01	; 1
   1c72e:	0e 94 87 3d 	call	0x7b0e	; 0x7b0e <initialize_clock>
   1c732:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <display_clock>
   1c736:	0e 94 7e 31 	call	0x62fc	; 0x62fc <sep>
   1c73a:	8f e0       	ldi	r24, 0x0F	; 15
   1c73c:	96 e4       	ldi	r25, 0x46	; 70
   1c73e:	1f 92       	push	r1
   1c740:	9f 93       	push	r25
   1c742:	8f 93       	push	r24
   1c744:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c748:	0f b6       	in	r0, 0x3f	; 63
   1c74a:	f8 94       	cli
   1c74c:	de bf       	out	0x3e, r29	; 62
   1c74e:	0f be       	out	0x3f, r0	; 63
   1c750:	cd bf       	out	0x3d, r28	; 61
   1c752:	84 ee       	ldi	r24, 0xE4	; 228
   1c754:	0e 94 a7 30 	call	0x614e	; 0x614e <LCD_init>
   1c758:	89 2b       	or	r24, r25
   1c75a:	e9 f0       	breq	.+58     	; 0x1c796 <main+0x1fc>
   1c75c:	60 e0       	ldi	r22, 0x00	; 0
   1c75e:	80 e0       	ldi	r24, 0x00	; 0
   1c760:	0e 94 71 30 	call	0x60e2	; 0x60e2 <LCD_pos>
   1c764:	89 e0       	ldi	r24, 0x09	; 9
   1c766:	97 e1       	ldi	r25, 0x17	; 23
   1c768:	9f 93       	push	r25
   1c76a:	8f 93       	push	r24
   1c76c:	0e 94 60 31 	call	0x62c0	; 0x62c0 <lcd_printf>
   1c770:	88 e1       	ldi	r24, 0x18	; 24
   1c772:	97 e1       	ldi	r25, 0x17	; 23
   1c774:	9f 93       	push	r25
   1c776:	8f 93       	push	r24
   1c778:	0e 94 60 31 	call	0x62c0	; 0x62c0 <lcd_printf>
   1c77c:	82 ef       	ldi	r24, 0xF2	; 242
   1c77e:	95 e4       	ldi	r25, 0x45	; 69
   1c780:	1f 92       	push	r1
   1c782:	9f 93       	push	r25
   1c784:	8f 93       	push	r24
   1c786:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c78a:	0f b6       	in	r0, 0x3f	; 63
   1c78c:	f8 94       	cli
   1c78e:	de bf       	out	0x3e, r29	; 62
   1c790:	0f be       	out	0x3f, r0	; 63
   1c792:	cd bf       	out	0x3d, r28	; 61
   1c794:	0a c0       	rjmp	.+20     	; 0x1c7aa <main+0x210>
   1c796:	88 ed       	ldi	r24, 0xD8	; 216
   1c798:	95 e4       	ldi	r25, 0x45	; 69
   1c79a:	1f 92       	push	r1
   1c79c:	9f 93       	push	r25
   1c79e:	8f 93       	push	r24
   1c7a0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c7a4:	0f 90       	pop	r0
   1c7a6:	0f 90       	pop	r0
   1c7a8:	0f 90       	pop	r0
   1c7aa:	0e 94 7e 31 	call	0x62fc	; 0x62fc <sep>
   1c7ae:	80 ec       	ldi	r24, 0xC0	; 192
   1c7b0:	95 e4       	ldi	r25, 0x45	; 69
   1c7b2:	1f 92       	push	r1
   1c7b4:	9f 93       	push	r25
   1c7b6:	8f 93       	push	r24
   1c7b8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c7bc:	81 e0       	ldi	r24, 0x01	; 1
   1c7be:	90 e0       	ldi	r25, 0x00	; 0
   1c7c0:	0e 94 ef 6f 	call	0xdfde	; 0xdfde <mmc_init>
   1c7c4:	8f ea       	ldi	r24, 0xAF	; 175
   1c7c6:	95 e4       	ldi	r25, 0x45	; 69
   1c7c8:	1f 92       	push	r1
   1c7ca:	9f 93       	push	r25
   1c7cc:	8f 93       	push	r24
   1c7ce:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c7d2:	0e 94 7e 31 	call	0x62fc	; 0x62fc <sep>
   1c7d6:	0e 94 8f 85 	call	0x10b1e	; 0x10b1e <gpib_bus_init>
   1c7da:	89 e9       	ldi	r24, 0x99	; 153
   1c7dc:	95 e4       	ldi	r25, 0x45	; 69
   1c7de:	1f 92       	push	r1
   1c7e0:	9f 93       	push	r25
   1c7e2:	8f 93       	push	r24
   1c7e4:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c7e8:	0e 94 a7 bf 	call	0x17f4e	; 0x17f4e <printer_init>
   1c7ec:	84 e8       	ldi	r24, 0x84	; 132
   1c7ee:	95 e4       	ldi	r25, 0x45	; 69
   1c7f0:	1f 92       	push	r1
   1c7f2:	9f 93       	push	r25
   1c7f4:	8f 93       	push	r24
   1c7f6:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c7fa:	0e 94 7e 31 	call	0x62fc	; 0x62fc <sep>
   1c7fe:	82 e7       	ldi	r24, 0x72	; 114
   1c800:	95 e4       	ldi	r25, 0x45	; 69
   1c802:	1f 92       	push	r1
   1c804:	9f 93       	push	r25
   1c806:	8f 93       	push	r24
   1c808:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c80c:	0e 94 9f 83 	call	0x1073e	; 0x1073e <gpib_timer_init>
   1c810:	8a e5       	ldi	r24, 0x5A	; 90
   1c812:	95 e4       	ldi	r25, 0x45	; 69
   1c814:	1f 92       	push	r1
   1c816:	9f 93       	push	r25
   1c818:	8f 93       	push	r24
   1c81a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c81e:	0e 94 a8 8b 	call	0x11750	; 0x11750 <gpib_file_init>
   1c822:	85 e4       	ldi	r24, 0x45	; 69
   1c824:	95 e4       	ldi	r25, 0x45	; 69
   1c826:	1f 92       	push	r1
   1c828:	9f 93       	push	r25
   1c82a:	8f 93       	push	r24
   1c82c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c830:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_state_init>
   1c834:	8f e2       	ldi	r24, 0x2F	; 47
   1c836:	95 e4       	ldi	r25, 0x45	; 69
   1c838:	1f 92       	push	r1
   1c83a:	9f 93       	push	r25
   1c83c:	8f 93       	push	r24
   1c83e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c842:	0e 94 7e 31 	call	0x62fc	; 0x62fc <sep>
   1c846:	0e 94 42 a1 	call	0x14284	; 0x14284 <display_Config>
   1c84a:	0e 94 27 a4 	call	0x1484e	; 0x1484e <format_drives>
   1c84e:	0e 94 7e 31 	call	0x62fc	; 0x62fc <sep>
   1c852:	0e 94 47 a0 	call	0x1408e	; 0x1408e <display_Addresses>
   1c856:	0e 94 7e 31 	call	0x62fc	; 0x62fc <sep>
   1c85a:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <debuglevel+0x1>
   1c85e:	8f 93       	push	r24
   1c860:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1c864:	8f 93       	push	r24
   1c866:	89 e1       	ldi	r24, 0x19	; 25
   1c868:	95 e4       	ldi	r25, 0x45	; 69
   1c86a:	1f 92       	push	r1
   1c86c:	9f 93       	push	r25
   1c86e:	8f 93       	push	r24
   1c870:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c874:	60 e0       	ldi	r22, 0x00	; 0
   1c876:	80 e0       	ldi	r24, 0x00	; 0
   1c878:	0e 94 71 30 	call	0x60e2	; 0x60e2 <LCD_pos>
   1c87c:	83 e0       	ldi	r24, 0x03	; 3
   1c87e:	0e 94 50 92 	call	0x124a0	; 0x124a0 <count_drive_types>
   1c882:	9f 93       	push	r25
   1c884:	8f 93       	push	r24
   1c886:	86 e2       	ldi	r24, 0x26	; 38
   1c888:	97 e1       	ldi	r25, 0x17	; 23
   1c88a:	9f 93       	push	r25
   1c88c:	8f 93       	push	r24
   1c88e:	0e 94 60 31 	call	0x62c0	; 0x62c0 <lcd_printf>
   1c892:	0f b6       	in	r0, 0x3f	; 63
   1c894:	f8 94       	cli
   1c896:	de bf       	out	0x3e, r29	; 62
   1c898:	0f be       	out	0x3f, r0	; 63
   1c89a:	cd bf       	out	0x3d, r28	; 61
   1c89c:	81 e0       	ldi	r24, 0x01	; 1
   1c89e:	0e 94 50 92 	call	0x124a0	; 0x124a0 <count_drive_types>
   1c8a2:	9f 93       	push	r25
   1c8a4:	8f 93       	push	r24
   1c8a6:	86 e3       	ldi	r24, 0x36	; 54
   1c8a8:	97 e1       	ldi	r25, 0x17	; 23
   1c8aa:	9f 93       	push	r25
   1c8ac:	8f 93       	push	r24
   1c8ae:	0e 94 60 31 	call	0x62c0	; 0x62c0 <lcd_printf>
   1c8b2:	0e 94 7e 31 	call	0x62fc	; 0x62fc <sep>
   1c8b6:	85 e0       	ldi	r24, 0x05	; 5
   1c8b8:	95 e4       	ldi	r25, 0x45	; 69
   1c8ba:	1f 92       	push	r1
   1c8bc:	9f 93       	push	r25
   1c8be:	8f 93       	push	r24
   1c8c0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <printf_P>
   1c8c4:	0f b6       	in	r0, 0x3f	; 63
   1c8c6:	f8 94       	cli
   1c8c8:	de bf       	out	0x3e, r29	; 62
   1c8ca:	0f be       	out	0x3f, r0	; 63
   1c8cc:	cd bf       	out	0x3d, r28	; 61
   1c8ce:	81 e0       	ldi	r24, 0x01	; 1
   1c8d0:	b2 dd       	rcall	.-1180   	; 0x1c436 <task>
   1c8d2:	fd cf       	rjmp	.-6      	; 0x1c8ce <main+0x334>

0001c8d4 <__mulsi3>:
   1c8d4:	db 01       	movw	r26, r22
   1c8d6:	8f 93       	push	r24
   1c8d8:	9f 93       	push	r25
   1c8da:	a0 d0       	rcall	.+320    	; 0x1ca1c <__muluhisi3>
   1c8dc:	bf 91       	pop	r27
   1c8de:	af 91       	pop	r26
   1c8e0:	a2 9f       	mul	r26, r18
   1c8e2:	80 0d       	add	r24, r0
   1c8e4:	91 1d       	adc	r25, r1
   1c8e6:	a3 9f       	mul	r26, r19
   1c8e8:	90 0d       	add	r25, r0
   1c8ea:	b2 9f       	mul	r27, r18
   1c8ec:	90 0d       	add	r25, r0
   1c8ee:	11 24       	eor	r1, r1
   1c8f0:	08 95       	ret

0001c8f2 <__udivmodqi4>:
   1c8f2:	99 1b       	sub	r25, r25
   1c8f4:	79 e0       	ldi	r23, 0x09	; 9
   1c8f6:	04 c0       	rjmp	.+8      	; 0x1c900 <__udivmodqi4_ep>

0001c8f8 <__udivmodqi4_loop>:
   1c8f8:	99 1f       	adc	r25, r25
   1c8fa:	96 17       	cp	r25, r22
   1c8fc:	08 f0       	brcs	.+2      	; 0x1c900 <__udivmodqi4_ep>
   1c8fe:	96 1b       	sub	r25, r22

0001c900 <__udivmodqi4_ep>:
   1c900:	88 1f       	adc	r24, r24
   1c902:	7a 95       	dec	r23
   1c904:	c9 f7       	brne	.-14     	; 0x1c8f8 <__udivmodqi4_loop>
   1c906:	80 95       	com	r24
   1c908:	08 95       	ret

0001c90a <__udivmodhi4>:
   1c90a:	aa 1b       	sub	r26, r26
   1c90c:	bb 1b       	sub	r27, r27
   1c90e:	51 e1       	ldi	r21, 0x11	; 17
   1c910:	07 c0       	rjmp	.+14     	; 0x1c920 <__udivmodhi4_ep>

0001c912 <__udivmodhi4_loop>:
   1c912:	aa 1f       	adc	r26, r26
   1c914:	bb 1f       	adc	r27, r27
   1c916:	a6 17       	cp	r26, r22
   1c918:	b7 07       	cpc	r27, r23
   1c91a:	10 f0       	brcs	.+4      	; 0x1c920 <__udivmodhi4_ep>
   1c91c:	a6 1b       	sub	r26, r22
   1c91e:	b7 0b       	sbc	r27, r23

0001c920 <__udivmodhi4_ep>:
   1c920:	88 1f       	adc	r24, r24
   1c922:	99 1f       	adc	r25, r25
   1c924:	5a 95       	dec	r21
   1c926:	a9 f7       	brne	.-22     	; 0x1c912 <__udivmodhi4_loop>
   1c928:	80 95       	com	r24
   1c92a:	90 95       	com	r25
   1c92c:	bc 01       	movw	r22, r24
   1c92e:	cd 01       	movw	r24, r26
   1c930:	08 95       	ret

0001c932 <__divmodhi4>:
   1c932:	97 fb       	bst	r25, 7
   1c934:	07 2e       	mov	r0, r23
   1c936:	16 f4       	brtc	.+4      	; 0x1c93c <__divmodhi4+0xa>
   1c938:	00 94       	com	r0
   1c93a:	06 d0       	rcall	.+12     	; 0x1c948 <__divmodhi4_neg1>
   1c93c:	77 fd       	sbrc	r23, 7
   1c93e:	08 d0       	rcall	.+16     	; 0x1c950 <__divmodhi4_neg2>
   1c940:	e4 df       	rcall	.-56     	; 0x1c90a <__udivmodhi4>
   1c942:	07 fc       	sbrc	r0, 7
   1c944:	05 d0       	rcall	.+10     	; 0x1c950 <__divmodhi4_neg2>
   1c946:	3e f4       	brtc	.+14     	; 0x1c956 <__divmodhi4_exit>

0001c948 <__divmodhi4_neg1>:
   1c948:	90 95       	com	r25
   1c94a:	81 95       	neg	r24
   1c94c:	9f 4f       	sbci	r25, 0xFF	; 255
   1c94e:	08 95       	ret

0001c950 <__divmodhi4_neg2>:
   1c950:	70 95       	com	r23
   1c952:	61 95       	neg	r22
   1c954:	7f 4f       	sbci	r23, 0xFF	; 255

0001c956 <__divmodhi4_exit>:
   1c956:	08 95       	ret

0001c958 <__udivmodsi4>:
   1c958:	a1 e2       	ldi	r26, 0x21	; 33
   1c95a:	1a 2e       	mov	r1, r26
   1c95c:	aa 1b       	sub	r26, r26
   1c95e:	bb 1b       	sub	r27, r27
   1c960:	fd 01       	movw	r30, r26
   1c962:	0d c0       	rjmp	.+26     	; 0x1c97e <__udivmodsi4_ep>

0001c964 <__udivmodsi4_loop>:
   1c964:	aa 1f       	adc	r26, r26
   1c966:	bb 1f       	adc	r27, r27
   1c968:	ee 1f       	adc	r30, r30
   1c96a:	ff 1f       	adc	r31, r31
   1c96c:	a2 17       	cp	r26, r18
   1c96e:	b3 07       	cpc	r27, r19
   1c970:	e4 07       	cpc	r30, r20
   1c972:	f5 07       	cpc	r31, r21
   1c974:	20 f0       	brcs	.+8      	; 0x1c97e <__udivmodsi4_ep>
   1c976:	a2 1b       	sub	r26, r18
   1c978:	b3 0b       	sbc	r27, r19
   1c97a:	e4 0b       	sbc	r30, r20
   1c97c:	f5 0b       	sbc	r31, r21

0001c97e <__udivmodsi4_ep>:
   1c97e:	66 1f       	adc	r22, r22
   1c980:	77 1f       	adc	r23, r23
   1c982:	88 1f       	adc	r24, r24
   1c984:	99 1f       	adc	r25, r25
   1c986:	1a 94       	dec	r1
   1c988:	69 f7       	brne	.-38     	; 0x1c964 <__udivmodsi4_loop>
   1c98a:	60 95       	com	r22
   1c98c:	70 95       	com	r23
   1c98e:	80 95       	com	r24
   1c990:	90 95       	com	r25
   1c992:	9b 01       	movw	r18, r22
   1c994:	ac 01       	movw	r20, r24
   1c996:	bd 01       	movw	r22, r26
   1c998:	cf 01       	movw	r24, r30
   1c99a:	08 95       	ret

0001c99c <__divmodsi4>:
   1c99c:	05 2e       	mov	r0, r21
   1c99e:	97 fb       	bst	r25, 7
   1c9a0:	16 f4       	brtc	.+4      	; 0x1c9a6 <__divmodsi4+0xa>
   1c9a2:	00 94       	com	r0
   1c9a4:	0f d0       	rcall	.+30     	; 0x1c9c4 <__negsi2>
   1c9a6:	57 fd       	sbrc	r21, 7
   1c9a8:	05 d0       	rcall	.+10     	; 0x1c9b4 <__divmodsi4_neg2>
   1c9aa:	d6 df       	rcall	.-84     	; 0x1c958 <__udivmodsi4>
   1c9ac:	07 fc       	sbrc	r0, 7
   1c9ae:	02 d0       	rcall	.+4      	; 0x1c9b4 <__divmodsi4_neg2>
   1c9b0:	46 f4       	brtc	.+16     	; 0x1c9c2 <__divmodsi4_exit>
   1c9b2:	08 c0       	rjmp	.+16     	; 0x1c9c4 <__negsi2>

0001c9b4 <__divmodsi4_neg2>:
   1c9b4:	50 95       	com	r21
   1c9b6:	40 95       	com	r20
   1c9b8:	30 95       	com	r19
   1c9ba:	21 95       	neg	r18
   1c9bc:	3f 4f       	sbci	r19, 0xFF	; 255
   1c9be:	4f 4f       	sbci	r20, 0xFF	; 255
   1c9c0:	5f 4f       	sbci	r21, 0xFF	; 255

0001c9c2 <__divmodsi4_exit>:
   1c9c2:	08 95       	ret

0001c9c4 <__negsi2>:
   1c9c4:	90 95       	com	r25
   1c9c6:	80 95       	com	r24
   1c9c8:	70 95       	com	r23
   1c9ca:	61 95       	neg	r22
   1c9cc:	7f 4f       	sbci	r23, 0xFF	; 255
   1c9ce:	8f 4f       	sbci	r24, 0xFF	; 255
   1c9d0:	9f 4f       	sbci	r25, 0xFF	; 255
   1c9d2:	08 95       	ret

0001c9d4 <__tablejump2__>:
   1c9d4:	ee 0f       	add	r30, r30
   1c9d6:	ff 1f       	adc	r31, r31
   1c9d8:	00 24       	eor	r0, r0
   1c9da:	00 1c       	adc	r0, r0
   1c9dc:	0b be       	out	0x3b, r0	; 59
   1c9de:	07 90       	elpm	r0, Z+
   1c9e0:	f6 91       	elpm	r31, Z
   1c9e2:	e0 2d       	mov	r30, r0
   1c9e4:	09 94       	ijmp

0001c9e6 <__mulhisi3>:
   1c9e6:	05 d0       	rcall	.+10     	; 0x1c9f2 <__umulhisi3>
   1c9e8:	33 23       	and	r19, r19
   1c9ea:	12 f4       	brpl	.+4      	; 0x1c9f0 <__mulhisi3+0xa>
   1c9ec:	8a 1b       	sub	r24, r26
   1c9ee:	9b 0b       	sbc	r25, r27
   1c9f0:	10 c0       	rjmp	.+32     	; 0x1ca12 <__usmulhisi3_tail>

0001c9f2 <__umulhisi3>:
   1c9f2:	a2 9f       	mul	r26, r18
   1c9f4:	b0 01       	movw	r22, r0
   1c9f6:	b3 9f       	mul	r27, r19
   1c9f8:	c0 01       	movw	r24, r0
   1c9fa:	a3 9f       	mul	r26, r19
   1c9fc:	70 0d       	add	r23, r0
   1c9fe:	81 1d       	adc	r24, r1
   1ca00:	11 24       	eor	r1, r1
   1ca02:	91 1d       	adc	r25, r1
   1ca04:	b2 9f       	mul	r27, r18
   1ca06:	70 0d       	add	r23, r0
   1ca08:	81 1d       	adc	r24, r1
   1ca0a:	11 24       	eor	r1, r1
   1ca0c:	91 1d       	adc	r25, r1
   1ca0e:	08 95       	ret

0001ca10 <__usmulhisi3>:
   1ca10:	f0 df       	rcall	.-32     	; 0x1c9f2 <__umulhisi3>

0001ca12 <__usmulhisi3_tail>:
   1ca12:	b7 ff       	sbrs	r27, 7
   1ca14:	08 95       	ret
   1ca16:	82 1b       	sub	r24, r18
   1ca18:	93 0b       	sbc	r25, r19
   1ca1a:	08 95       	ret

0001ca1c <__muluhisi3>:
   1ca1c:	ea df       	rcall	.-44     	; 0x1c9f2 <__umulhisi3>
   1ca1e:	a5 9f       	mul	r26, r21
   1ca20:	90 0d       	add	r25, r0
   1ca22:	b4 9f       	mul	r27, r20
   1ca24:	90 0d       	add	r25, r0
   1ca26:	a4 9f       	mul	r26, r20
   1ca28:	80 0d       	add	r24, r0
   1ca2a:	91 1d       	adc	r25, r1
   1ca2c:	11 24       	eor	r1, r1
   1ca2e:	08 95       	ret

0001ca30 <__mulshisi3>:
   1ca30:	b7 ff       	sbrs	r27, 7
   1ca32:	f4 cf       	rjmp	.-24     	; 0x1ca1c <__muluhisi3>

0001ca34 <__mulohisi3>:
   1ca34:	f3 df       	rcall	.-26     	; 0x1ca1c <__muluhisi3>
   1ca36:	82 1b       	sub	r24, r18
   1ca38:	93 0b       	sbc	r25, r19
   1ca3a:	08 95       	ret

0001ca3c <__negdi2>:
   1ca3c:	60 95       	com	r22
   1ca3e:	70 95       	com	r23
   1ca40:	80 95       	com	r24
   1ca42:	90 95       	com	r25
   1ca44:	30 95       	com	r19
   1ca46:	40 95       	com	r20
   1ca48:	50 95       	com	r21
   1ca4a:	21 95       	neg	r18
   1ca4c:	3f 4f       	sbci	r19, 0xFF	; 255
   1ca4e:	4f 4f       	sbci	r20, 0xFF	; 255
   1ca50:	5f 4f       	sbci	r21, 0xFF	; 255
   1ca52:	6f 4f       	sbci	r22, 0xFF	; 255
   1ca54:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca56:	8f 4f       	sbci	r24, 0xFF	; 255
   1ca58:	9f 4f       	sbci	r25, 0xFF	; 255
   1ca5a:	08 95       	ret

0001ca5c <__prologue_saves__>:
   1ca5c:	2f 92       	push	r2
   1ca5e:	3f 92       	push	r3
   1ca60:	4f 92       	push	r4
   1ca62:	5f 92       	push	r5
   1ca64:	6f 92       	push	r6
   1ca66:	7f 92       	push	r7
   1ca68:	8f 92       	push	r8
   1ca6a:	9f 92       	push	r9
   1ca6c:	af 92       	push	r10
   1ca6e:	bf 92       	push	r11
   1ca70:	cf 92       	push	r12
   1ca72:	df 92       	push	r13
   1ca74:	ef 92       	push	r14
   1ca76:	ff 92       	push	r15
   1ca78:	0f 93       	push	r16
   1ca7a:	1f 93       	push	r17
   1ca7c:	cf 93       	push	r28
   1ca7e:	df 93       	push	r29
   1ca80:	cd b7       	in	r28, 0x3d	; 61
   1ca82:	de b7       	in	r29, 0x3e	; 62
   1ca84:	ca 1b       	sub	r28, r26
   1ca86:	db 0b       	sbc	r29, r27
   1ca88:	0f b6       	in	r0, 0x3f	; 63
   1ca8a:	f8 94       	cli
   1ca8c:	de bf       	out	0x3e, r29	; 62
   1ca8e:	0f be       	out	0x3f, r0	; 63
   1ca90:	cd bf       	out	0x3d, r28	; 61
   1ca92:	09 94       	ijmp

0001ca94 <__epilogue_restores__>:
   1ca94:	2a 88       	ldd	r2, Y+18	; 0x12
   1ca96:	39 88       	ldd	r3, Y+17	; 0x11
   1ca98:	48 88       	ldd	r4, Y+16	; 0x10
   1ca9a:	5f 84       	ldd	r5, Y+15	; 0x0f
   1ca9c:	6e 84       	ldd	r6, Y+14	; 0x0e
   1ca9e:	7d 84       	ldd	r7, Y+13	; 0x0d
   1caa0:	8c 84       	ldd	r8, Y+12	; 0x0c
   1caa2:	9b 84       	ldd	r9, Y+11	; 0x0b
   1caa4:	aa 84       	ldd	r10, Y+10	; 0x0a
   1caa6:	b9 84       	ldd	r11, Y+9	; 0x09
   1caa8:	c8 84       	ldd	r12, Y+8	; 0x08
   1caaa:	df 80       	ldd	r13, Y+7	; 0x07
   1caac:	ee 80       	ldd	r14, Y+6	; 0x06
   1caae:	fd 80       	ldd	r15, Y+5	; 0x05
   1cab0:	0c 81       	ldd	r16, Y+4	; 0x04
   1cab2:	1b 81       	ldd	r17, Y+3	; 0x03
   1cab4:	aa 81       	ldd	r26, Y+2	; 0x02
   1cab6:	b9 81       	ldd	r27, Y+1	; 0x01
   1cab8:	ce 0f       	add	r28, r30
   1caba:	d1 1d       	adc	r29, r1
   1cabc:	0f b6       	in	r0, 0x3f	; 63
   1cabe:	f8 94       	cli
   1cac0:	de bf       	out	0x3e, r29	; 62
   1cac2:	0f be       	out	0x3f, r0	; 63
   1cac4:	cd bf       	out	0x3d, r28	; 61
   1cac6:	ed 01       	movw	r28, r26
   1cac8:	08 95       	ret

0001caca <__xload_1>:
   1caca:	57 fd       	sbrc	r21, 7
   1cacc:	03 c0       	rjmp	.+6      	; 0x1cad4 <__xload_1+0xa>
   1cace:	5b bf       	out	0x3b, r21	; 59
   1cad0:	67 91       	elpm	r22, Z+
   1cad2:	08 95       	ret
   1cad4:	60 81       	ld	r22, Z
   1cad6:	08 95       	ret

0001cad8 <__cmpdi2_s8>:
   1cad8:	00 24       	eor	r0, r0
   1cada:	a7 fd       	sbrc	r26, 7
   1cadc:	00 94       	com	r0
   1cade:	2a 17       	cp	r18, r26
   1cae0:	30 05       	cpc	r19, r0
   1cae2:	40 05       	cpc	r20, r0
   1cae4:	50 05       	cpc	r21, r0
   1cae6:	60 05       	cpc	r22, r0
   1cae8:	70 05       	cpc	r23, r0
   1caea:	80 05       	cpc	r24, r0
   1caec:	90 05       	cpc	r25, r0
   1caee:	08 95       	ret

0001caf0 <__subsf3>:
   1caf0:	50 58       	subi	r21, 0x80	; 128

0001caf2 <__addsf3>:
   1caf2:	bb 27       	eor	r27, r27
   1caf4:	aa 27       	eor	r26, r26
   1caf6:	0e d0       	rcall	.+28     	; 0x1cb14 <__addsf3x>
   1caf8:	75 c1       	rjmp	.+746    	; 0x1cde4 <__fp_round>
   1cafa:	66 d1       	rcall	.+716    	; 0x1cdc8 <__fp_pscA>
   1cafc:	30 f0       	brcs	.+12     	; 0x1cb0a <__addsf3+0x18>
   1cafe:	6b d1       	rcall	.+726    	; 0x1cdd6 <__fp_pscB>
   1cb00:	20 f0       	brcs	.+8      	; 0x1cb0a <__addsf3+0x18>
   1cb02:	31 f4       	brne	.+12     	; 0x1cb10 <__addsf3+0x1e>
   1cb04:	9f 3f       	cpi	r25, 0xFF	; 255
   1cb06:	11 f4       	brne	.+4      	; 0x1cb0c <__addsf3+0x1a>
   1cb08:	1e f4       	brtc	.+6      	; 0x1cb10 <__addsf3+0x1e>
   1cb0a:	5b c1       	rjmp	.+694    	; 0x1cdc2 <__fp_nan>
   1cb0c:	0e f4       	brtc	.+2      	; 0x1cb10 <__addsf3+0x1e>
   1cb0e:	e0 95       	com	r30
   1cb10:	e7 fb       	bst	r30, 7
   1cb12:	51 c1       	rjmp	.+674    	; 0x1cdb6 <__fp_inf>

0001cb14 <__addsf3x>:
   1cb14:	e9 2f       	mov	r30, r25
   1cb16:	77 d1       	rcall	.+750    	; 0x1ce06 <__fp_split3>
   1cb18:	80 f3       	brcs	.-32     	; 0x1cafa <__addsf3+0x8>
   1cb1a:	ba 17       	cp	r27, r26
   1cb1c:	62 07       	cpc	r22, r18
   1cb1e:	73 07       	cpc	r23, r19
   1cb20:	84 07       	cpc	r24, r20
   1cb22:	95 07       	cpc	r25, r21
   1cb24:	18 f0       	brcs	.+6      	; 0x1cb2c <__addsf3x+0x18>
   1cb26:	71 f4       	brne	.+28     	; 0x1cb44 <__addsf3x+0x30>
   1cb28:	9e f5       	brtc	.+102    	; 0x1cb90 <__addsf3x+0x7c>
   1cb2a:	8f c1       	rjmp	.+798    	; 0x1ce4a <__fp_zero>
   1cb2c:	0e f4       	brtc	.+2      	; 0x1cb30 <__addsf3x+0x1c>
   1cb2e:	e0 95       	com	r30
   1cb30:	0b 2e       	mov	r0, r27
   1cb32:	ba 2f       	mov	r27, r26
   1cb34:	a0 2d       	mov	r26, r0
   1cb36:	0b 01       	movw	r0, r22
   1cb38:	b9 01       	movw	r22, r18
   1cb3a:	90 01       	movw	r18, r0
   1cb3c:	0c 01       	movw	r0, r24
   1cb3e:	ca 01       	movw	r24, r20
   1cb40:	a0 01       	movw	r20, r0
   1cb42:	11 24       	eor	r1, r1
   1cb44:	ff 27       	eor	r31, r31
   1cb46:	59 1b       	sub	r21, r25
   1cb48:	99 f0       	breq	.+38     	; 0x1cb70 <__addsf3x+0x5c>
   1cb4a:	59 3f       	cpi	r21, 0xF9	; 249
   1cb4c:	50 f4       	brcc	.+20     	; 0x1cb62 <__addsf3x+0x4e>
   1cb4e:	50 3e       	cpi	r21, 0xE0	; 224
   1cb50:	68 f1       	brcs	.+90     	; 0x1cbac <__addsf3x+0x98>
   1cb52:	1a 16       	cp	r1, r26
   1cb54:	f0 40       	sbci	r31, 0x00	; 0
   1cb56:	a2 2f       	mov	r26, r18
   1cb58:	23 2f       	mov	r18, r19
   1cb5a:	34 2f       	mov	r19, r20
   1cb5c:	44 27       	eor	r20, r20
   1cb5e:	58 5f       	subi	r21, 0xF8	; 248
   1cb60:	f3 cf       	rjmp	.-26     	; 0x1cb48 <__addsf3x+0x34>
   1cb62:	46 95       	lsr	r20
   1cb64:	37 95       	ror	r19
   1cb66:	27 95       	ror	r18
   1cb68:	a7 95       	ror	r26
   1cb6a:	f0 40       	sbci	r31, 0x00	; 0
   1cb6c:	53 95       	inc	r21
   1cb6e:	c9 f7       	brne	.-14     	; 0x1cb62 <__addsf3x+0x4e>
   1cb70:	7e f4       	brtc	.+30     	; 0x1cb90 <__addsf3x+0x7c>
   1cb72:	1f 16       	cp	r1, r31
   1cb74:	ba 0b       	sbc	r27, r26
   1cb76:	62 0b       	sbc	r22, r18
   1cb78:	73 0b       	sbc	r23, r19
   1cb7a:	84 0b       	sbc	r24, r20
   1cb7c:	ba f0       	brmi	.+46     	; 0x1cbac <__addsf3x+0x98>
   1cb7e:	91 50       	subi	r25, 0x01	; 1
   1cb80:	a1 f0       	breq	.+40     	; 0x1cbaa <__addsf3x+0x96>
   1cb82:	ff 0f       	add	r31, r31
   1cb84:	bb 1f       	adc	r27, r27
   1cb86:	66 1f       	adc	r22, r22
   1cb88:	77 1f       	adc	r23, r23
   1cb8a:	88 1f       	adc	r24, r24
   1cb8c:	c2 f7       	brpl	.-16     	; 0x1cb7e <__addsf3x+0x6a>
   1cb8e:	0e c0       	rjmp	.+28     	; 0x1cbac <__addsf3x+0x98>
   1cb90:	ba 0f       	add	r27, r26
   1cb92:	62 1f       	adc	r22, r18
   1cb94:	73 1f       	adc	r23, r19
   1cb96:	84 1f       	adc	r24, r20
   1cb98:	48 f4       	brcc	.+18     	; 0x1cbac <__addsf3x+0x98>
   1cb9a:	87 95       	ror	r24
   1cb9c:	77 95       	ror	r23
   1cb9e:	67 95       	ror	r22
   1cba0:	b7 95       	ror	r27
   1cba2:	f7 95       	ror	r31
   1cba4:	9e 3f       	cpi	r25, 0xFE	; 254
   1cba6:	08 f0       	brcs	.+2      	; 0x1cbaa <__addsf3x+0x96>
   1cba8:	b3 cf       	rjmp	.-154    	; 0x1cb10 <__addsf3+0x1e>
   1cbaa:	93 95       	inc	r25
   1cbac:	88 0f       	add	r24, r24
   1cbae:	08 f0       	brcs	.+2      	; 0x1cbb2 <__addsf3x+0x9e>
   1cbb0:	99 27       	eor	r25, r25
   1cbb2:	ee 0f       	add	r30, r30
   1cbb4:	97 95       	ror	r25
   1cbb6:	87 95       	ror	r24
   1cbb8:	08 95       	ret

0001cbba <__cmpsf2>:
   1cbba:	d9 d0       	rcall	.+434    	; 0x1cd6e <__fp_cmp>
   1cbbc:	08 f4       	brcc	.+2      	; 0x1cbc0 <__cmpsf2+0x6>
   1cbbe:	81 e0       	ldi	r24, 0x01	; 1
   1cbc0:	08 95       	ret

0001cbc2 <__divsf3>:
   1cbc2:	0c d0       	rcall	.+24     	; 0x1cbdc <__divsf3x>
   1cbc4:	0f c1       	rjmp	.+542    	; 0x1cde4 <__fp_round>
   1cbc6:	07 d1       	rcall	.+526    	; 0x1cdd6 <__fp_pscB>
   1cbc8:	40 f0       	brcs	.+16     	; 0x1cbda <__divsf3+0x18>
   1cbca:	fe d0       	rcall	.+508    	; 0x1cdc8 <__fp_pscA>
   1cbcc:	30 f0       	brcs	.+12     	; 0x1cbda <__divsf3+0x18>
   1cbce:	21 f4       	brne	.+8      	; 0x1cbd8 <__divsf3+0x16>
   1cbd0:	5f 3f       	cpi	r21, 0xFF	; 255
   1cbd2:	19 f0       	breq	.+6      	; 0x1cbda <__divsf3+0x18>
   1cbd4:	f0 c0       	rjmp	.+480    	; 0x1cdb6 <__fp_inf>
   1cbd6:	51 11       	cpse	r21, r1
   1cbd8:	39 c1       	rjmp	.+626    	; 0x1ce4c <__fp_szero>
   1cbda:	f3 c0       	rjmp	.+486    	; 0x1cdc2 <__fp_nan>

0001cbdc <__divsf3x>:
   1cbdc:	14 d1       	rcall	.+552    	; 0x1ce06 <__fp_split3>
   1cbde:	98 f3       	brcs	.-26     	; 0x1cbc6 <__divsf3+0x4>

0001cbe0 <__divsf3_pse>:
   1cbe0:	99 23       	and	r25, r25
   1cbe2:	c9 f3       	breq	.-14     	; 0x1cbd6 <__divsf3+0x14>
   1cbe4:	55 23       	and	r21, r21
   1cbe6:	b1 f3       	breq	.-20     	; 0x1cbd4 <__divsf3+0x12>
   1cbe8:	95 1b       	sub	r25, r21
   1cbea:	55 0b       	sbc	r21, r21
   1cbec:	bb 27       	eor	r27, r27
   1cbee:	aa 27       	eor	r26, r26
   1cbf0:	62 17       	cp	r22, r18
   1cbf2:	73 07       	cpc	r23, r19
   1cbf4:	84 07       	cpc	r24, r20
   1cbf6:	38 f0       	brcs	.+14     	; 0x1cc06 <__divsf3_pse+0x26>
   1cbf8:	9f 5f       	subi	r25, 0xFF	; 255
   1cbfa:	5f 4f       	sbci	r21, 0xFF	; 255
   1cbfc:	22 0f       	add	r18, r18
   1cbfe:	33 1f       	adc	r19, r19
   1cc00:	44 1f       	adc	r20, r20
   1cc02:	aa 1f       	adc	r26, r26
   1cc04:	a9 f3       	breq	.-22     	; 0x1cbf0 <__divsf3_pse+0x10>
   1cc06:	33 d0       	rcall	.+102    	; 0x1cc6e <__divsf3_pse+0x8e>
   1cc08:	0e 2e       	mov	r0, r30
   1cc0a:	3a f0       	brmi	.+14     	; 0x1cc1a <__divsf3_pse+0x3a>
   1cc0c:	e0 e8       	ldi	r30, 0x80	; 128
   1cc0e:	30 d0       	rcall	.+96     	; 0x1cc70 <__divsf3_pse+0x90>
   1cc10:	91 50       	subi	r25, 0x01	; 1
   1cc12:	50 40       	sbci	r21, 0x00	; 0
   1cc14:	e6 95       	lsr	r30
   1cc16:	00 1c       	adc	r0, r0
   1cc18:	ca f7       	brpl	.-14     	; 0x1cc0c <__divsf3_pse+0x2c>
   1cc1a:	29 d0       	rcall	.+82     	; 0x1cc6e <__divsf3_pse+0x8e>
   1cc1c:	fe 2f       	mov	r31, r30
   1cc1e:	27 d0       	rcall	.+78     	; 0x1cc6e <__divsf3_pse+0x8e>
   1cc20:	66 0f       	add	r22, r22
   1cc22:	77 1f       	adc	r23, r23
   1cc24:	88 1f       	adc	r24, r24
   1cc26:	bb 1f       	adc	r27, r27
   1cc28:	26 17       	cp	r18, r22
   1cc2a:	37 07       	cpc	r19, r23
   1cc2c:	48 07       	cpc	r20, r24
   1cc2e:	ab 07       	cpc	r26, r27
   1cc30:	b0 e8       	ldi	r27, 0x80	; 128
   1cc32:	09 f0       	breq	.+2      	; 0x1cc36 <__divsf3_pse+0x56>
   1cc34:	bb 0b       	sbc	r27, r27
   1cc36:	80 2d       	mov	r24, r0
   1cc38:	bf 01       	movw	r22, r30
   1cc3a:	ff 27       	eor	r31, r31
   1cc3c:	93 58       	subi	r25, 0x83	; 131
   1cc3e:	5f 4f       	sbci	r21, 0xFF	; 255
   1cc40:	2a f0       	brmi	.+10     	; 0x1cc4c <__divsf3_pse+0x6c>
   1cc42:	9e 3f       	cpi	r25, 0xFE	; 254
   1cc44:	51 05       	cpc	r21, r1
   1cc46:	68 f0       	brcs	.+26     	; 0x1cc62 <__divsf3_pse+0x82>
   1cc48:	b6 c0       	rjmp	.+364    	; 0x1cdb6 <__fp_inf>
   1cc4a:	00 c1       	rjmp	.+512    	; 0x1ce4c <__fp_szero>
   1cc4c:	5f 3f       	cpi	r21, 0xFF	; 255
   1cc4e:	ec f3       	brlt	.-6      	; 0x1cc4a <__divsf3_pse+0x6a>
   1cc50:	98 3e       	cpi	r25, 0xE8	; 232
   1cc52:	dc f3       	brlt	.-10     	; 0x1cc4a <__divsf3_pse+0x6a>
   1cc54:	86 95       	lsr	r24
   1cc56:	77 95       	ror	r23
   1cc58:	67 95       	ror	r22
   1cc5a:	b7 95       	ror	r27
   1cc5c:	f7 95       	ror	r31
   1cc5e:	9f 5f       	subi	r25, 0xFF	; 255
   1cc60:	c9 f7       	brne	.-14     	; 0x1cc54 <__divsf3_pse+0x74>
   1cc62:	88 0f       	add	r24, r24
   1cc64:	91 1d       	adc	r25, r1
   1cc66:	96 95       	lsr	r25
   1cc68:	87 95       	ror	r24
   1cc6a:	97 f9       	bld	r25, 7
   1cc6c:	08 95       	ret
   1cc6e:	e1 e0       	ldi	r30, 0x01	; 1
   1cc70:	66 0f       	add	r22, r22
   1cc72:	77 1f       	adc	r23, r23
   1cc74:	88 1f       	adc	r24, r24
   1cc76:	bb 1f       	adc	r27, r27
   1cc78:	62 17       	cp	r22, r18
   1cc7a:	73 07       	cpc	r23, r19
   1cc7c:	84 07       	cpc	r24, r20
   1cc7e:	ba 07       	cpc	r27, r26
   1cc80:	20 f0       	brcs	.+8      	; 0x1cc8a <__divsf3_pse+0xaa>
   1cc82:	62 1b       	sub	r22, r18
   1cc84:	73 0b       	sbc	r23, r19
   1cc86:	84 0b       	sbc	r24, r20
   1cc88:	ba 0b       	sbc	r27, r26
   1cc8a:	ee 1f       	adc	r30, r30
   1cc8c:	88 f7       	brcc	.-30     	; 0x1cc70 <__divsf3_pse+0x90>
   1cc8e:	e0 95       	com	r30
   1cc90:	08 95       	ret

0001cc92 <__fixsfsi>:
   1cc92:	04 d0       	rcall	.+8      	; 0x1cc9c <__fixunssfsi>
   1cc94:	68 94       	set
   1cc96:	b1 11       	cpse	r27, r1
   1cc98:	d9 c0       	rjmp	.+434    	; 0x1ce4c <__fp_szero>
   1cc9a:	08 95       	ret

0001cc9c <__fixunssfsi>:
   1cc9c:	bc d0       	rcall	.+376    	; 0x1ce16 <__fp_splitA>
   1cc9e:	88 f0       	brcs	.+34     	; 0x1ccc2 <__fixunssfsi+0x26>
   1cca0:	9f 57       	subi	r25, 0x7F	; 127
   1cca2:	90 f0       	brcs	.+36     	; 0x1ccc8 <__fixunssfsi+0x2c>
   1cca4:	b9 2f       	mov	r27, r25
   1cca6:	99 27       	eor	r25, r25
   1cca8:	b7 51       	subi	r27, 0x17	; 23
   1ccaa:	a0 f0       	brcs	.+40     	; 0x1ccd4 <__fixunssfsi+0x38>
   1ccac:	d1 f0       	breq	.+52     	; 0x1cce2 <__fixunssfsi+0x46>
   1ccae:	66 0f       	add	r22, r22
   1ccb0:	77 1f       	adc	r23, r23
   1ccb2:	88 1f       	adc	r24, r24
   1ccb4:	99 1f       	adc	r25, r25
   1ccb6:	1a f0       	brmi	.+6      	; 0x1ccbe <__fixunssfsi+0x22>
   1ccb8:	ba 95       	dec	r27
   1ccba:	c9 f7       	brne	.-14     	; 0x1ccae <__fixunssfsi+0x12>
   1ccbc:	12 c0       	rjmp	.+36     	; 0x1cce2 <__fixunssfsi+0x46>
   1ccbe:	b1 30       	cpi	r27, 0x01	; 1
   1ccc0:	81 f0       	breq	.+32     	; 0x1cce2 <__fixunssfsi+0x46>
   1ccc2:	c3 d0       	rcall	.+390    	; 0x1ce4a <__fp_zero>
   1ccc4:	b1 e0       	ldi	r27, 0x01	; 1
   1ccc6:	08 95       	ret
   1ccc8:	c0 c0       	rjmp	.+384    	; 0x1ce4a <__fp_zero>
   1ccca:	67 2f       	mov	r22, r23
   1cccc:	78 2f       	mov	r23, r24
   1ccce:	88 27       	eor	r24, r24
   1ccd0:	b8 5f       	subi	r27, 0xF8	; 248
   1ccd2:	39 f0       	breq	.+14     	; 0x1cce2 <__fixunssfsi+0x46>
   1ccd4:	b9 3f       	cpi	r27, 0xF9	; 249
   1ccd6:	cc f3       	brlt	.-14     	; 0x1ccca <__fixunssfsi+0x2e>
   1ccd8:	86 95       	lsr	r24
   1ccda:	77 95       	ror	r23
   1ccdc:	67 95       	ror	r22
   1ccde:	b3 95       	inc	r27
   1cce0:	d9 f7       	brne	.-10     	; 0x1ccd8 <__fixunssfsi+0x3c>
   1cce2:	3e f4       	brtc	.+14     	; 0x1ccf2 <__fixunssfsi+0x56>
   1cce4:	90 95       	com	r25
   1cce6:	80 95       	com	r24
   1cce8:	70 95       	com	r23
   1ccea:	61 95       	neg	r22
   1ccec:	7f 4f       	sbci	r23, 0xFF	; 255
   1ccee:	8f 4f       	sbci	r24, 0xFF	; 255
   1ccf0:	9f 4f       	sbci	r25, 0xFF	; 255
   1ccf2:	08 95       	ret

0001ccf4 <__floatunsisf>:
   1ccf4:	e8 94       	clt
   1ccf6:	09 c0       	rjmp	.+18     	; 0x1cd0a <__floatsisf+0x12>

0001ccf8 <__floatsisf>:
   1ccf8:	97 fb       	bst	r25, 7
   1ccfa:	3e f4       	brtc	.+14     	; 0x1cd0a <__floatsisf+0x12>
   1ccfc:	90 95       	com	r25
   1ccfe:	80 95       	com	r24
   1cd00:	70 95       	com	r23
   1cd02:	61 95       	neg	r22
   1cd04:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd06:	8f 4f       	sbci	r24, 0xFF	; 255
   1cd08:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd0a:	99 23       	and	r25, r25
   1cd0c:	a9 f0       	breq	.+42     	; 0x1cd38 <__floatsisf+0x40>
   1cd0e:	f9 2f       	mov	r31, r25
   1cd10:	96 e9       	ldi	r25, 0x96	; 150
   1cd12:	bb 27       	eor	r27, r27
   1cd14:	93 95       	inc	r25
   1cd16:	f6 95       	lsr	r31
   1cd18:	87 95       	ror	r24
   1cd1a:	77 95       	ror	r23
   1cd1c:	67 95       	ror	r22
   1cd1e:	b7 95       	ror	r27
   1cd20:	f1 11       	cpse	r31, r1
   1cd22:	f8 cf       	rjmp	.-16     	; 0x1cd14 <__floatsisf+0x1c>
   1cd24:	fa f4       	brpl	.+62     	; 0x1cd64 <__floatsisf+0x6c>
   1cd26:	bb 0f       	add	r27, r27
   1cd28:	11 f4       	brne	.+4      	; 0x1cd2e <__floatsisf+0x36>
   1cd2a:	60 ff       	sbrs	r22, 0
   1cd2c:	1b c0       	rjmp	.+54     	; 0x1cd64 <__floatsisf+0x6c>
   1cd2e:	6f 5f       	subi	r22, 0xFF	; 255
   1cd30:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd32:	8f 4f       	sbci	r24, 0xFF	; 255
   1cd34:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd36:	16 c0       	rjmp	.+44     	; 0x1cd64 <__floatsisf+0x6c>
   1cd38:	88 23       	and	r24, r24
   1cd3a:	11 f0       	breq	.+4      	; 0x1cd40 <__floatsisf+0x48>
   1cd3c:	96 e9       	ldi	r25, 0x96	; 150
   1cd3e:	11 c0       	rjmp	.+34     	; 0x1cd62 <__floatsisf+0x6a>
   1cd40:	77 23       	and	r23, r23
   1cd42:	21 f0       	breq	.+8      	; 0x1cd4c <__floatsisf+0x54>
   1cd44:	9e e8       	ldi	r25, 0x8E	; 142
   1cd46:	87 2f       	mov	r24, r23
   1cd48:	76 2f       	mov	r23, r22
   1cd4a:	05 c0       	rjmp	.+10     	; 0x1cd56 <__floatsisf+0x5e>
   1cd4c:	66 23       	and	r22, r22
   1cd4e:	71 f0       	breq	.+28     	; 0x1cd6c <__floatsisf+0x74>
   1cd50:	96 e8       	ldi	r25, 0x86	; 134
   1cd52:	86 2f       	mov	r24, r22
   1cd54:	70 e0       	ldi	r23, 0x00	; 0
   1cd56:	60 e0       	ldi	r22, 0x00	; 0
   1cd58:	2a f0       	brmi	.+10     	; 0x1cd64 <__floatsisf+0x6c>
   1cd5a:	9a 95       	dec	r25
   1cd5c:	66 0f       	add	r22, r22
   1cd5e:	77 1f       	adc	r23, r23
   1cd60:	88 1f       	adc	r24, r24
   1cd62:	da f7       	brpl	.-10     	; 0x1cd5a <__floatsisf+0x62>
   1cd64:	88 0f       	add	r24, r24
   1cd66:	96 95       	lsr	r25
   1cd68:	87 95       	ror	r24
   1cd6a:	97 f9       	bld	r25, 7
   1cd6c:	08 95       	ret

0001cd6e <__fp_cmp>:
   1cd6e:	99 0f       	add	r25, r25
   1cd70:	00 08       	sbc	r0, r0
   1cd72:	55 0f       	add	r21, r21
   1cd74:	aa 0b       	sbc	r26, r26
   1cd76:	e0 e8       	ldi	r30, 0x80	; 128
   1cd78:	fe ef       	ldi	r31, 0xFE	; 254
   1cd7a:	16 16       	cp	r1, r22
   1cd7c:	17 06       	cpc	r1, r23
   1cd7e:	e8 07       	cpc	r30, r24
   1cd80:	f9 07       	cpc	r31, r25
   1cd82:	c0 f0       	brcs	.+48     	; 0x1cdb4 <__fp_cmp+0x46>
   1cd84:	12 16       	cp	r1, r18
   1cd86:	13 06       	cpc	r1, r19
   1cd88:	e4 07       	cpc	r30, r20
   1cd8a:	f5 07       	cpc	r31, r21
   1cd8c:	98 f0       	brcs	.+38     	; 0x1cdb4 <__fp_cmp+0x46>
   1cd8e:	62 1b       	sub	r22, r18
   1cd90:	73 0b       	sbc	r23, r19
   1cd92:	84 0b       	sbc	r24, r20
   1cd94:	95 0b       	sbc	r25, r21
   1cd96:	39 f4       	brne	.+14     	; 0x1cda6 <__fp_cmp+0x38>
   1cd98:	0a 26       	eor	r0, r26
   1cd9a:	61 f0       	breq	.+24     	; 0x1cdb4 <__fp_cmp+0x46>
   1cd9c:	23 2b       	or	r18, r19
   1cd9e:	24 2b       	or	r18, r20
   1cda0:	25 2b       	or	r18, r21
   1cda2:	21 f4       	brne	.+8      	; 0x1cdac <__fp_cmp+0x3e>
   1cda4:	08 95       	ret
   1cda6:	0a 26       	eor	r0, r26
   1cda8:	09 f4       	brne	.+2      	; 0x1cdac <__fp_cmp+0x3e>
   1cdaa:	a1 40       	sbci	r26, 0x01	; 1
   1cdac:	a6 95       	lsr	r26
   1cdae:	8f ef       	ldi	r24, 0xFF	; 255
   1cdb0:	81 1d       	adc	r24, r1
   1cdb2:	81 1d       	adc	r24, r1
   1cdb4:	08 95       	ret

0001cdb6 <__fp_inf>:
   1cdb6:	97 f9       	bld	r25, 7
   1cdb8:	9f 67       	ori	r25, 0x7F	; 127
   1cdba:	80 e8       	ldi	r24, 0x80	; 128
   1cdbc:	70 e0       	ldi	r23, 0x00	; 0
   1cdbe:	60 e0       	ldi	r22, 0x00	; 0
   1cdc0:	08 95       	ret

0001cdc2 <__fp_nan>:
   1cdc2:	9f ef       	ldi	r25, 0xFF	; 255
   1cdc4:	80 ec       	ldi	r24, 0xC0	; 192
   1cdc6:	08 95       	ret

0001cdc8 <__fp_pscA>:
   1cdc8:	00 24       	eor	r0, r0
   1cdca:	0a 94       	dec	r0
   1cdcc:	16 16       	cp	r1, r22
   1cdce:	17 06       	cpc	r1, r23
   1cdd0:	18 06       	cpc	r1, r24
   1cdd2:	09 06       	cpc	r0, r25
   1cdd4:	08 95       	ret

0001cdd6 <__fp_pscB>:
   1cdd6:	00 24       	eor	r0, r0
   1cdd8:	0a 94       	dec	r0
   1cdda:	12 16       	cp	r1, r18
   1cddc:	13 06       	cpc	r1, r19
   1cdde:	14 06       	cpc	r1, r20
   1cde0:	05 06       	cpc	r0, r21
   1cde2:	08 95       	ret

0001cde4 <__fp_round>:
   1cde4:	09 2e       	mov	r0, r25
   1cde6:	03 94       	inc	r0
   1cde8:	00 0c       	add	r0, r0
   1cdea:	11 f4       	brne	.+4      	; 0x1cdf0 <__fp_round+0xc>
   1cdec:	88 23       	and	r24, r24
   1cdee:	52 f0       	brmi	.+20     	; 0x1ce04 <__fp_round+0x20>
   1cdf0:	bb 0f       	add	r27, r27
   1cdf2:	40 f4       	brcc	.+16     	; 0x1ce04 <__fp_round+0x20>
   1cdf4:	bf 2b       	or	r27, r31
   1cdf6:	11 f4       	brne	.+4      	; 0x1cdfc <__fp_round+0x18>
   1cdf8:	60 ff       	sbrs	r22, 0
   1cdfa:	04 c0       	rjmp	.+8      	; 0x1ce04 <__fp_round+0x20>
   1cdfc:	6f 5f       	subi	r22, 0xFF	; 255
   1cdfe:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce00:	8f 4f       	sbci	r24, 0xFF	; 255
   1ce02:	9f 4f       	sbci	r25, 0xFF	; 255
   1ce04:	08 95       	ret

0001ce06 <__fp_split3>:
   1ce06:	57 fd       	sbrc	r21, 7
   1ce08:	90 58       	subi	r25, 0x80	; 128
   1ce0a:	44 0f       	add	r20, r20
   1ce0c:	55 1f       	adc	r21, r21
   1ce0e:	59 f0       	breq	.+22     	; 0x1ce26 <__fp_splitA+0x10>
   1ce10:	5f 3f       	cpi	r21, 0xFF	; 255
   1ce12:	71 f0       	breq	.+28     	; 0x1ce30 <__fp_splitA+0x1a>
   1ce14:	47 95       	ror	r20

0001ce16 <__fp_splitA>:
   1ce16:	88 0f       	add	r24, r24
   1ce18:	97 fb       	bst	r25, 7
   1ce1a:	99 1f       	adc	r25, r25
   1ce1c:	61 f0       	breq	.+24     	; 0x1ce36 <__fp_splitA+0x20>
   1ce1e:	9f 3f       	cpi	r25, 0xFF	; 255
   1ce20:	79 f0       	breq	.+30     	; 0x1ce40 <__fp_splitA+0x2a>
   1ce22:	87 95       	ror	r24
   1ce24:	08 95       	ret
   1ce26:	12 16       	cp	r1, r18
   1ce28:	13 06       	cpc	r1, r19
   1ce2a:	14 06       	cpc	r1, r20
   1ce2c:	55 1f       	adc	r21, r21
   1ce2e:	f2 cf       	rjmp	.-28     	; 0x1ce14 <__fp_split3+0xe>
   1ce30:	46 95       	lsr	r20
   1ce32:	f1 df       	rcall	.-30     	; 0x1ce16 <__fp_splitA>
   1ce34:	08 c0       	rjmp	.+16     	; 0x1ce46 <__fp_splitA+0x30>
   1ce36:	16 16       	cp	r1, r22
   1ce38:	17 06       	cpc	r1, r23
   1ce3a:	18 06       	cpc	r1, r24
   1ce3c:	99 1f       	adc	r25, r25
   1ce3e:	f1 cf       	rjmp	.-30     	; 0x1ce22 <__fp_splitA+0xc>
   1ce40:	86 95       	lsr	r24
   1ce42:	71 05       	cpc	r23, r1
   1ce44:	61 05       	cpc	r22, r1
   1ce46:	08 94       	sec
   1ce48:	08 95       	ret

0001ce4a <__fp_zero>:
   1ce4a:	e8 94       	clt

0001ce4c <__fp_szero>:
   1ce4c:	bb 27       	eor	r27, r27
   1ce4e:	66 27       	eor	r22, r22
   1ce50:	77 27       	eor	r23, r23
   1ce52:	cb 01       	movw	r24, r22
   1ce54:	97 f9       	bld	r25, 7
   1ce56:	08 95       	ret

0001ce58 <__gesf2>:
   1ce58:	8a df       	rcall	.-236    	; 0x1cd6e <__fp_cmp>
   1ce5a:	08 f4       	brcc	.+2      	; 0x1ce5e <__gesf2+0x6>
   1ce5c:	8f ef       	ldi	r24, 0xFF	; 255
   1ce5e:	08 95       	ret

0001ce60 <__mulsf3>:
   1ce60:	0b d0       	rcall	.+22     	; 0x1ce78 <__mulsf3x>
   1ce62:	c0 cf       	rjmp	.-128    	; 0x1cde4 <__fp_round>
   1ce64:	b1 df       	rcall	.-158    	; 0x1cdc8 <__fp_pscA>
   1ce66:	28 f0       	brcs	.+10     	; 0x1ce72 <__mulsf3+0x12>
   1ce68:	b6 df       	rcall	.-148    	; 0x1cdd6 <__fp_pscB>
   1ce6a:	18 f0       	brcs	.+6      	; 0x1ce72 <__mulsf3+0x12>
   1ce6c:	95 23       	and	r25, r21
   1ce6e:	09 f0       	breq	.+2      	; 0x1ce72 <__mulsf3+0x12>
   1ce70:	a2 cf       	rjmp	.-188    	; 0x1cdb6 <__fp_inf>
   1ce72:	a7 cf       	rjmp	.-178    	; 0x1cdc2 <__fp_nan>
   1ce74:	11 24       	eor	r1, r1
   1ce76:	ea cf       	rjmp	.-44     	; 0x1ce4c <__fp_szero>

0001ce78 <__mulsf3x>:
   1ce78:	c6 df       	rcall	.-116    	; 0x1ce06 <__fp_split3>
   1ce7a:	a0 f3       	brcs	.-24     	; 0x1ce64 <__mulsf3+0x4>

0001ce7c <__mulsf3_pse>:
   1ce7c:	95 9f       	mul	r25, r21
   1ce7e:	d1 f3       	breq	.-12     	; 0x1ce74 <__mulsf3+0x14>
   1ce80:	95 0f       	add	r25, r21
   1ce82:	50 e0       	ldi	r21, 0x00	; 0
   1ce84:	55 1f       	adc	r21, r21
   1ce86:	62 9f       	mul	r22, r18
   1ce88:	f0 01       	movw	r30, r0
   1ce8a:	72 9f       	mul	r23, r18
   1ce8c:	bb 27       	eor	r27, r27
   1ce8e:	f0 0d       	add	r31, r0
   1ce90:	b1 1d       	adc	r27, r1
   1ce92:	63 9f       	mul	r22, r19
   1ce94:	aa 27       	eor	r26, r26
   1ce96:	f0 0d       	add	r31, r0
   1ce98:	b1 1d       	adc	r27, r1
   1ce9a:	aa 1f       	adc	r26, r26
   1ce9c:	64 9f       	mul	r22, r20
   1ce9e:	66 27       	eor	r22, r22
   1cea0:	b0 0d       	add	r27, r0
   1cea2:	a1 1d       	adc	r26, r1
   1cea4:	66 1f       	adc	r22, r22
   1cea6:	82 9f       	mul	r24, r18
   1cea8:	22 27       	eor	r18, r18
   1ceaa:	b0 0d       	add	r27, r0
   1ceac:	a1 1d       	adc	r26, r1
   1ceae:	62 1f       	adc	r22, r18
   1ceb0:	73 9f       	mul	r23, r19
   1ceb2:	b0 0d       	add	r27, r0
   1ceb4:	a1 1d       	adc	r26, r1
   1ceb6:	62 1f       	adc	r22, r18
   1ceb8:	83 9f       	mul	r24, r19
   1ceba:	a0 0d       	add	r26, r0
   1cebc:	61 1d       	adc	r22, r1
   1cebe:	22 1f       	adc	r18, r18
   1cec0:	74 9f       	mul	r23, r20
   1cec2:	33 27       	eor	r19, r19
   1cec4:	a0 0d       	add	r26, r0
   1cec6:	61 1d       	adc	r22, r1
   1cec8:	23 1f       	adc	r18, r19
   1ceca:	84 9f       	mul	r24, r20
   1cecc:	60 0d       	add	r22, r0
   1cece:	21 1d       	adc	r18, r1
   1ced0:	82 2f       	mov	r24, r18
   1ced2:	76 2f       	mov	r23, r22
   1ced4:	6a 2f       	mov	r22, r26
   1ced6:	11 24       	eor	r1, r1
   1ced8:	9f 57       	subi	r25, 0x7F	; 127
   1ceda:	50 40       	sbci	r21, 0x00	; 0
   1cedc:	8a f0       	brmi	.+34     	; 0x1cf00 <__mulsf3_pse+0x84>
   1cede:	e1 f0       	breq	.+56     	; 0x1cf18 <__mulsf3_pse+0x9c>
   1cee0:	88 23       	and	r24, r24
   1cee2:	4a f0       	brmi	.+18     	; 0x1cef6 <__mulsf3_pse+0x7a>
   1cee4:	ee 0f       	add	r30, r30
   1cee6:	ff 1f       	adc	r31, r31
   1cee8:	bb 1f       	adc	r27, r27
   1ceea:	66 1f       	adc	r22, r22
   1ceec:	77 1f       	adc	r23, r23
   1ceee:	88 1f       	adc	r24, r24
   1cef0:	91 50       	subi	r25, 0x01	; 1
   1cef2:	50 40       	sbci	r21, 0x00	; 0
   1cef4:	a9 f7       	brne	.-22     	; 0x1cee0 <__mulsf3_pse+0x64>
   1cef6:	9e 3f       	cpi	r25, 0xFE	; 254
   1cef8:	51 05       	cpc	r21, r1
   1cefa:	70 f0       	brcs	.+28     	; 0x1cf18 <__mulsf3_pse+0x9c>
   1cefc:	5c cf       	rjmp	.-328    	; 0x1cdb6 <__fp_inf>
   1cefe:	a6 cf       	rjmp	.-180    	; 0x1ce4c <__fp_szero>
   1cf00:	5f 3f       	cpi	r21, 0xFF	; 255
   1cf02:	ec f3       	brlt	.-6      	; 0x1cefe <__mulsf3_pse+0x82>
   1cf04:	98 3e       	cpi	r25, 0xE8	; 232
   1cf06:	dc f3       	brlt	.-10     	; 0x1cefe <__mulsf3_pse+0x82>
   1cf08:	86 95       	lsr	r24
   1cf0a:	77 95       	ror	r23
   1cf0c:	67 95       	ror	r22
   1cf0e:	b7 95       	ror	r27
   1cf10:	f7 95       	ror	r31
   1cf12:	e7 95       	ror	r30
   1cf14:	9f 5f       	subi	r25, 0xFF	; 255
   1cf16:	c1 f7       	brne	.-16     	; 0x1cf08 <__mulsf3_pse+0x8c>
   1cf18:	fe 2b       	or	r31, r30
   1cf1a:	88 0f       	add	r24, r24
   1cf1c:	91 1d       	adc	r25, r1
   1cf1e:	96 95       	lsr	r25
   1cf20:	87 95       	ror	r24
   1cf22:	97 f9       	bld	r25, 7
   1cf24:	08 95       	ret

0001cf26 <round>:
   1cf26:	77 df       	rcall	.-274    	; 0x1ce16 <__fp_splitA>
   1cf28:	e0 f0       	brcs	.+56     	; 0x1cf62 <round+0x3c>
   1cf2a:	9e 37       	cpi	r25, 0x7E	; 126
   1cf2c:	d8 f0       	brcs	.+54     	; 0x1cf64 <round+0x3e>
   1cf2e:	96 39       	cpi	r25, 0x96	; 150
   1cf30:	b8 f4       	brcc	.+46     	; 0x1cf60 <round+0x3a>
   1cf32:	9e 38       	cpi	r25, 0x8E	; 142
   1cf34:	48 f4       	brcc	.+18     	; 0x1cf48 <round+0x22>
   1cf36:	67 2f       	mov	r22, r23
   1cf38:	78 2f       	mov	r23, r24
   1cf3a:	88 27       	eor	r24, r24
   1cf3c:	98 5f       	subi	r25, 0xF8	; 248
   1cf3e:	f9 cf       	rjmp	.-14     	; 0x1cf32 <round+0xc>
   1cf40:	86 95       	lsr	r24
   1cf42:	77 95       	ror	r23
   1cf44:	67 95       	ror	r22
   1cf46:	93 95       	inc	r25
   1cf48:	95 39       	cpi	r25, 0x95	; 149
   1cf4a:	d0 f3       	brcs	.-12     	; 0x1cf40 <round+0x1a>
   1cf4c:	b6 2f       	mov	r27, r22
   1cf4e:	b1 70       	andi	r27, 0x01	; 1
   1cf50:	6b 0f       	add	r22, r27
   1cf52:	71 1d       	adc	r23, r1
   1cf54:	81 1d       	adc	r24, r1
   1cf56:	20 f4       	brcc	.+8      	; 0x1cf60 <round+0x3a>
   1cf58:	87 95       	ror	r24
   1cf5a:	77 95       	ror	r23
   1cf5c:	67 95       	ror	r22
   1cf5e:	93 95       	inc	r25
   1cf60:	02 c0       	rjmp	.+4      	; 0x1cf66 <__fp_mintl>
   1cf62:	1c c0       	rjmp	.+56     	; 0x1cf9c <__fp_mpack>
   1cf64:	73 cf       	rjmp	.-282    	; 0x1ce4c <__fp_szero>

0001cf66 <__fp_mintl>:
   1cf66:	88 23       	and	r24, r24
   1cf68:	71 f4       	brne	.+28     	; 0x1cf86 <__fp_mintl+0x20>
   1cf6a:	77 23       	and	r23, r23
   1cf6c:	21 f0       	breq	.+8      	; 0x1cf76 <__fp_mintl+0x10>
   1cf6e:	98 50       	subi	r25, 0x08	; 8
   1cf70:	87 2b       	or	r24, r23
   1cf72:	76 2f       	mov	r23, r22
   1cf74:	07 c0       	rjmp	.+14     	; 0x1cf84 <__fp_mintl+0x1e>
   1cf76:	66 23       	and	r22, r22
   1cf78:	11 f4       	brne	.+4      	; 0x1cf7e <__fp_mintl+0x18>
   1cf7a:	99 27       	eor	r25, r25
   1cf7c:	0d c0       	rjmp	.+26     	; 0x1cf98 <__fp_mintl+0x32>
   1cf7e:	90 51       	subi	r25, 0x10	; 16
   1cf80:	86 2b       	or	r24, r22
   1cf82:	70 e0       	ldi	r23, 0x00	; 0
   1cf84:	60 e0       	ldi	r22, 0x00	; 0
   1cf86:	2a f0       	brmi	.+10     	; 0x1cf92 <__fp_mintl+0x2c>
   1cf88:	9a 95       	dec	r25
   1cf8a:	66 0f       	add	r22, r22
   1cf8c:	77 1f       	adc	r23, r23
   1cf8e:	88 1f       	adc	r24, r24
   1cf90:	da f7       	brpl	.-10     	; 0x1cf88 <__fp_mintl+0x22>
   1cf92:	88 0f       	add	r24, r24
   1cf94:	96 95       	lsr	r25
   1cf96:	87 95       	ror	r24
   1cf98:	97 f9       	bld	r25, 7
   1cf9a:	08 95       	ret

0001cf9c <__fp_mpack>:
   1cf9c:	9f 3f       	cpi	r25, 0xFF	; 255
   1cf9e:	31 f0       	breq	.+12     	; 0x1cfac <__fp_mpack_finite+0xc>

0001cfa0 <__fp_mpack_finite>:
   1cfa0:	91 50       	subi	r25, 0x01	; 1
   1cfa2:	20 f4       	brcc	.+8      	; 0x1cfac <__fp_mpack_finite+0xc>
   1cfa4:	87 95       	ror	r24
   1cfa6:	77 95       	ror	r23
   1cfa8:	67 95       	ror	r22
   1cfaa:	b7 95       	ror	r27
   1cfac:	88 0f       	add	r24, r24
   1cfae:	91 1d       	adc	r25, r1
   1cfb0:	96 95       	lsr	r25
   1cfb2:	87 95       	ror	r24
   1cfb4:	97 f9       	bld	r25, 7
   1cfb6:	08 95       	ret

0001cfb8 <calloc>:
   1cfb8:	0f 93       	push	r16
   1cfba:	1f 93       	push	r17
   1cfbc:	cf 93       	push	r28
   1cfbe:	df 93       	push	r29
   1cfc0:	86 9f       	mul	r24, r22
   1cfc2:	80 01       	movw	r16, r0
   1cfc4:	87 9f       	mul	r24, r23
   1cfc6:	10 0d       	add	r17, r0
   1cfc8:	96 9f       	mul	r25, r22
   1cfca:	10 0d       	add	r17, r0
   1cfcc:	11 24       	eor	r1, r1
   1cfce:	c8 01       	movw	r24, r16
   1cfd0:	0d d0       	rcall	.+26     	; 0x1cfec <malloc>
   1cfd2:	ec 01       	movw	r28, r24
   1cfd4:	00 97       	sbiw	r24, 0x00	; 0
   1cfd6:	21 f0       	breq	.+8      	; 0x1cfe0 <calloc+0x28>
   1cfd8:	a8 01       	movw	r20, r16
   1cfda:	60 e0       	ldi	r22, 0x00	; 0
   1cfdc:	70 e0       	ldi	r23, 0x00	; 0
   1cfde:	0a d2       	rcall	.+1044   	; 0x1d3f4 <memset>
   1cfe0:	ce 01       	movw	r24, r28
   1cfe2:	df 91       	pop	r29
   1cfe4:	cf 91       	pop	r28
   1cfe6:	1f 91       	pop	r17
   1cfe8:	0f 91       	pop	r16
   1cfea:	08 95       	ret

0001cfec <malloc>:
   1cfec:	0f 93       	push	r16
   1cfee:	1f 93       	push	r17
   1cff0:	cf 93       	push	r28
   1cff2:	df 93       	push	r29
   1cff4:	82 30       	cpi	r24, 0x02	; 2
   1cff6:	91 05       	cpc	r25, r1
   1cff8:	10 f4       	brcc	.+4      	; 0x1cffe <malloc+0x12>
   1cffa:	82 e0       	ldi	r24, 0x02	; 2
   1cffc:	90 e0       	ldi	r25, 0x00	; 0
   1cffe:	e0 91 a6 20 	lds	r30, 0x20A6	; 0x8020a6 <__flp>
   1d002:	f0 91 a7 20 	lds	r31, 0x20A7	; 0x8020a7 <__flp+0x1>
   1d006:	20 e0       	ldi	r18, 0x00	; 0
   1d008:	30 e0       	ldi	r19, 0x00	; 0
   1d00a:	a0 e0       	ldi	r26, 0x00	; 0
   1d00c:	b0 e0       	ldi	r27, 0x00	; 0
   1d00e:	30 97       	sbiw	r30, 0x00	; 0
   1d010:	19 f1       	breq	.+70     	; 0x1d058 <malloc+0x6c>
   1d012:	40 81       	ld	r20, Z
   1d014:	51 81       	ldd	r21, Z+1	; 0x01
   1d016:	02 81       	ldd	r16, Z+2	; 0x02
   1d018:	13 81       	ldd	r17, Z+3	; 0x03
   1d01a:	48 17       	cp	r20, r24
   1d01c:	59 07       	cpc	r21, r25
   1d01e:	c8 f0       	brcs	.+50     	; 0x1d052 <malloc+0x66>
   1d020:	84 17       	cp	r24, r20
   1d022:	95 07       	cpc	r25, r21
   1d024:	69 f4       	brne	.+26     	; 0x1d040 <malloc+0x54>
   1d026:	10 97       	sbiw	r26, 0x00	; 0
   1d028:	31 f0       	breq	.+12     	; 0x1d036 <malloc+0x4a>
   1d02a:	12 96       	adiw	r26, 0x02	; 2
   1d02c:	0c 93       	st	X, r16
   1d02e:	12 97       	sbiw	r26, 0x02	; 2
   1d030:	13 96       	adiw	r26, 0x03	; 3
   1d032:	1c 93       	st	X, r17
   1d034:	27 c0       	rjmp	.+78     	; 0x1d084 <malloc+0x98>
   1d036:	00 93 a6 20 	sts	0x20A6, r16	; 0x8020a6 <__flp>
   1d03a:	10 93 a7 20 	sts	0x20A7, r17	; 0x8020a7 <__flp+0x1>
   1d03e:	22 c0       	rjmp	.+68     	; 0x1d084 <malloc+0x98>
   1d040:	21 15       	cp	r18, r1
   1d042:	31 05       	cpc	r19, r1
   1d044:	19 f0       	breq	.+6      	; 0x1d04c <malloc+0x60>
   1d046:	42 17       	cp	r20, r18
   1d048:	53 07       	cpc	r21, r19
   1d04a:	18 f4       	brcc	.+6      	; 0x1d052 <malloc+0x66>
   1d04c:	9a 01       	movw	r18, r20
   1d04e:	bd 01       	movw	r22, r26
   1d050:	ef 01       	movw	r28, r30
   1d052:	df 01       	movw	r26, r30
   1d054:	f8 01       	movw	r30, r16
   1d056:	db cf       	rjmp	.-74     	; 0x1d00e <malloc+0x22>
   1d058:	21 15       	cp	r18, r1
   1d05a:	31 05       	cpc	r19, r1
   1d05c:	f9 f0       	breq	.+62     	; 0x1d09c <malloc+0xb0>
   1d05e:	28 1b       	sub	r18, r24
   1d060:	39 0b       	sbc	r19, r25
   1d062:	24 30       	cpi	r18, 0x04	; 4
   1d064:	31 05       	cpc	r19, r1
   1d066:	80 f4       	brcc	.+32     	; 0x1d088 <malloc+0x9c>
   1d068:	8a 81       	ldd	r24, Y+2	; 0x02
   1d06a:	9b 81       	ldd	r25, Y+3	; 0x03
   1d06c:	61 15       	cp	r22, r1
   1d06e:	71 05       	cpc	r23, r1
   1d070:	21 f0       	breq	.+8      	; 0x1d07a <malloc+0x8e>
   1d072:	fb 01       	movw	r30, r22
   1d074:	93 83       	std	Z+3, r25	; 0x03
   1d076:	82 83       	std	Z+2, r24	; 0x02
   1d078:	04 c0       	rjmp	.+8      	; 0x1d082 <malloc+0x96>
   1d07a:	90 93 a7 20 	sts	0x20A7, r25	; 0x8020a7 <__flp+0x1>
   1d07e:	80 93 a6 20 	sts	0x20A6, r24	; 0x8020a6 <__flp>
   1d082:	fe 01       	movw	r30, r28
   1d084:	32 96       	adiw	r30, 0x02	; 2
   1d086:	44 c0       	rjmp	.+136    	; 0x1d110 <malloc+0x124>
   1d088:	fe 01       	movw	r30, r28
   1d08a:	e2 0f       	add	r30, r18
   1d08c:	f3 1f       	adc	r31, r19
   1d08e:	81 93       	st	Z+, r24
   1d090:	91 93       	st	Z+, r25
   1d092:	22 50       	subi	r18, 0x02	; 2
   1d094:	31 09       	sbc	r19, r1
   1d096:	39 83       	std	Y+1, r19	; 0x01
   1d098:	28 83       	st	Y, r18
   1d09a:	3a c0       	rjmp	.+116    	; 0x1d110 <malloc+0x124>
   1d09c:	20 91 a4 20 	lds	r18, 0x20A4	; 0x8020a4 <__brkval>
   1d0a0:	30 91 a5 20 	lds	r19, 0x20A5	; 0x8020a5 <__brkval+0x1>
   1d0a4:	23 2b       	or	r18, r19
   1d0a6:	41 f4       	brne	.+16     	; 0x1d0b8 <malloc+0xcc>
   1d0a8:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__malloc_heap_start>
   1d0ac:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__malloc_heap_start+0x1>
   1d0b0:	30 93 a5 20 	sts	0x20A5, r19	; 0x8020a5 <__brkval+0x1>
   1d0b4:	20 93 a4 20 	sts	0x20A4, r18	; 0x8020a4 <__brkval>
   1d0b8:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <__malloc_heap_end>
   1d0bc:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <__malloc_heap_end+0x1>
   1d0c0:	21 15       	cp	r18, r1
   1d0c2:	31 05       	cpc	r19, r1
   1d0c4:	41 f4       	brne	.+16     	; 0x1d0d6 <malloc+0xea>
   1d0c6:	2d b7       	in	r18, 0x3d	; 61
   1d0c8:	3e b7       	in	r19, 0x3e	; 62
   1d0ca:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <__malloc_margin>
   1d0ce:	50 91 5a 02 	lds	r21, 0x025A	; 0x80025a <__malloc_margin+0x1>
   1d0d2:	24 1b       	sub	r18, r20
   1d0d4:	35 0b       	sbc	r19, r21
   1d0d6:	e0 91 a4 20 	lds	r30, 0x20A4	; 0x8020a4 <__brkval>
   1d0da:	f0 91 a5 20 	lds	r31, 0x20A5	; 0x8020a5 <__brkval+0x1>
   1d0de:	e2 17       	cp	r30, r18
   1d0e0:	f3 07       	cpc	r31, r19
   1d0e2:	a0 f4       	brcc	.+40     	; 0x1d10c <malloc+0x120>
   1d0e4:	2e 1b       	sub	r18, r30
   1d0e6:	3f 0b       	sbc	r19, r31
   1d0e8:	28 17       	cp	r18, r24
   1d0ea:	39 07       	cpc	r19, r25
   1d0ec:	78 f0       	brcs	.+30     	; 0x1d10c <malloc+0x120>
   1d0ee:	ac 01       	movw	r20, r24
   1d0f0:	4e 5f       	subi	r20, 0xFE	; 254
   1d0f2:	5f 4f       	sbci	r21, 0xFF	; 255
   1d0f4:	24 17       	cp	r18, r20
   1d0f6:	35 07       	cpc	r19, r21
   1d0f8:	48 f0       	brcs	.+18     	; 0x1d10c <malloc+0x120>
   1d0fa:	4e 0f       	add	r20, r30
   1d0fc:	5f 1f       	adc	r21, r31
   1d0fe:	50 93 a5 20 	sts	0x20A5, r21	; 0x8020a5 <__brkval+0x1>
   1d102:	40 93 a4 20 	sts	0x20A4, r20	; 0x8020a4 <__brkval>
   1d106:	81 93       	st	Z+, r24
   1d108:	91 93       	st	Z+, r25
   1d10a:	02 c0       	rjmp	.+4      	; 0x1d110 <malloc+0x124>
   1d10c:	e0 e0       	ldi	r30, 0x00	; 0
   1d10e:	f0 e0       	ldi	r31, 0x00	; 0
   1d110:	cf 01       	movw	r24, r30
   1d112:	df 91       	pop	r29
   1d114:	cf 91       	pop	r28
   1d116:	1f 91       	pop	r17
   1d118:	0f 91       	pop	r16
   1d11a:	08 95       	ret

0001d11c <free>:
   1d11c:	cf 93       	push	r28
   1d11e:	df 93       	push	r29
   1d120:	00 97       	sbiw	r24, 0x00	; 0
   1d122:	09 f4       	brne	.+2      	; 0x1d126 <free+0xa>
   1d124:	81 c0       	rjmp	.+258    	; 0x1d228 <free+0x10c>
   1d126:	fc 01       	movw	r30, r24
   1d128:	32 97       	sbiw	r30, 0x02	; 2
   1d12a:	13 82       	std	Z+3, r1	; 0x03
   1d12c:	12 82       	std	Z+2, r1	; 0x02
   1d12e:	a0 91 a6 20 	lds	r26, 0x20A6	; 0x8020a6 <__flp>
   1d132:	b0 91 a7 20 	lds	r27, 0x20A7	; 0x8020a7 <__flp+0x1>
   1d136:	10 97       	sbiw	r26, 0x00	; 0
   1d138:	81 f4       	brne	.+32     	; 0x1d15a <free+0x3e>
   1d13a:	20 81       	ld	r18, Z
   1d13c:	31 81       	ldd	r19, Z+1	; 0x01
   1d13e:	82 0f       	add	r24, r18
   1d140:	93 1f       	adc	r25, r19
   1d142:	20 91 a4 20 	lds	r18, 0x20A4	; 0x8020a4 <__brkval>
   1d146:	30 91 a5 20 	lds	r19, 0x20A5	; 0x8020a5 <__brkval+0x1>
   1d14a:	28 17       	cp	r18, r24
   1d14c:	39 07       	cpc	r19, r25
   1d14e:	51 f5       	brne	.+84     	; 0x1d1a4 <free+0x88>
   1d150:	f0 93 a5 20 	sts	0x20A5, r31	; 0x8020a5 <__brkval+0x1>
   1d154:	e0 93 a4 20 	sts	0x20A4, r30	; 0x8020a4 <__brkval>
   1d158:	67 c0       	rjmp	.+206    	; 0x1d228 <free+0x10c>
   1d15a:	ed 01       	movw	r28, r26
   1d15c:	20 e0       	ldi	r18, 0x00	; 0
   1d15e:	30 e0       	ldi	r19, 0x00	; 0
   1d160:	ce 17       	cp	r28, r30
   1d162:	df 07       	cpc	r29, r31
   1d164:	40 f4       	brcc	.+16     	; 0x1d176 <free+0x5a>
   1d166:	4a 81       	ldd	r20, Y+2	; 0x02
   1d168:	5b 81       	ldd	r21, Y+3	; 0x03
   1d16a:	9e 01       	movw	r18, r28
   1d16c:	41 15       	cp	r20, r1
   1d16e:	51 05       	cpc	r21, r1
   1d170:	f1 f0       	breq	.+60     	; 0x1d1ae <free+0x92>
   1d172:	ea 01       	movw	r28, r20
   1d174:	f5 cf       	rjmp	.-22     	; 0x1d160 <free+0x44>
   1d176:	d3 83       	std	Z+3, r29	; 0x03
   1d178:	c2 83       	std	Z+2, r28	; 0x02
   1d17a:	40 81       	ld	r20, Z
   1d17c:	51 81       	ldd	r21, Z+1	; 0x01
   1d17e:	84 0f       	add	r24, r20
   1d180:	95 1f       	adc	r25, r21
   1d182:	c8 17       	cp	r28, r24
   1d184:	d9 07       	cpc	r29, r25
   1d186:	59 f4       	brne	.+22     	; 0x1d19e <free+0x82>
   1d188:	88 81       	ld	r24, Y
   1d18a:	99 81       	ldd	r25, Y+1	; 0x01
   1d18c:	84 0f       	add	r24, r20
   1d18e:	95 1f       	adc	r25, r21
   1d190:	02 96       	adiw	r24, 0x02	; 2
   1d192:	91 83       	std	Z+1, r25	; 0x01
   1d194:	80 83       	st	Z, r24
   1d196:	8a 81       	ldd	r24, Y+2	; 0x02
   1d198:	9b 81       	ldd	r25, Y+3	; 0x03
   1d19a:	93 83       	std	Z+3, r25	; 0x03
   1d19c:	82 83       	std	Z+2, r24	; 0x02
   1d19e:	21 15       	cp	r18, r1
   1d1a0:	31 05       	cpc	r19, r1
   1d1a2:	29 f4       	brne	.+10     	; 0x1d1ae <free+0x92>
   1d1a4:	f0 93 a7 20 	sts	0x20A7, r31	; 0x8020a7 <__flp+0x1>
   1d1a8:	e0 93 a6 20 	sts	0x20A6, r30	; 0x8020a6 <__flp>
   1d1ac:	3d c0       	rjmp	.+122    	; 0x1d228 <free+0x10c>
   1d1ae:	e9 01       	movw	r28, r18
   1d1b0:	fb 83       	std	Y+3, r31	; 0x03
   1d1b2:	ea 83       	std	Y+2, r30	; 0x02
   1d1b4:	49 91       	ld	r20, Y+
   1d1b6:	59 91       	ld	r21, Y+
   1d1b8:	c4 0f       	add	r28, r20
   1d1ba:	d5 1f       	adc	r29, r21
   1d1bc:	ec 17       	cp	r30, r28
   1d1be:	fd 07       	cpc	r31, r29
   1d1c0:	61 f4       	brne	.+24     	; 0x1d1da <free+0xbe>
   1d1c2:	80 81       	ld	r24, Z
   1d1c4:	91 81       	ldd	r25, Z+1	; 0x01
   1d1c6:	84 0f       	add	r24, r20
   1d1c8:	95 1f       	adc	r25, r21
   1d1ca:	02 96       	adiw	r24, 0x02	; 2
   1d1cc:	e9 01       	movw	r28, r18
   1d1ce:	99 83       	std	Y+1, r25	; 0x01
   1d1d0:	88 83       	st	Y, r24
   1d1d2:	82 81       	ldd	r24, Z+2	; 0x02
   1d1d4:	93 81       	ldd	r25, Z+3	; 0x03
   1d1d6:	9b 83       	std	Y+3, r25	; 0x03
   1d1d8:	8a 83       	std	Y+2, r24	; 0x02
   1d1da:	e0 e0       	ldi	r30, 0x00	; 0
   1d1dc:	f0 e0       	ldi	r31, 0x00	; 0
   1d1de:	12 96       	adiw	r26, 0x02	; 2
   1d1e0:	8d 91       	ld	r24, X+
   1d1e2:	9c 91       	ld	r25, X
   1d1e4:	13 97       	sbiw	r26, 0x03	; 3
   1d1e6:	00 97       	sbiw	r24, 0x00	; 0
   1d1e8:	19 f0       	breq	.+6      	; 0x1d1f0 <free+0xd4>
   1d1ea:	fd 01       	movw	r30, r26
   1d1ec:	dc 01       	movw	r26, r24
   1d1ee:	f7 cf       	rjmp	.-18     	; 0x1d1de <free+0xc2>
   1d1f0:	8d 91       	ld	r24, X+
   1d1f2:	9c 91       	ld	r25, X
   1d1f4:	11 97       	sbiw	r26, 0x01	; 1
   1d1f6:	9d 01       	movw	r18, r26
   1d1f8:	2e 5f       	subi	r18, 0xFE	; 254
   1d1fa:	3f 4f       	sbci	r19, 0xFF	; 255
   1d1fc:	82 0f       	add	r24, r18
   1d1fe:	93 1f       	adc	r25, r19
   1d200:	20 91 a4 20 	lds	r18, 0x20A4	; 0x8020a4 <__brkval>
   1d204:	30 91 a5 20 	lds	r19, 0x20A5	; 0x8020a5 <__brkval+0x1>
   1d208:	28 17       	cp	r18, r24
   1d20a:	39 07       	cpc	r19, r25
   1d20c:	69 f4       	brne	.+26     	; 0x1d228 <free+0x10c>
   1d20e:	30 97       	sbiw	r30, 0x00	; 0
   1d210:	29 f4       	brne	.+10     	; 0x1d21c <free+0x100>
   1d212:	10 92 a7 20 	sts	0x20A7, r1	; 0x8020a7 <__flp+0x1>
   1d216:	10 92 a6 20 	sts	0x20A6, r1	; 0x8020a6 <__flp>
   1d21a:	02 c0       	rjmp	.+4      	; 0x1d220 <free+0x104>
   1d21c:	13 82       	std	Z+3, r1	; 0x03
   1d21e:	12 82       	std	Z+2, r1	; 0x02
   1d220:	b0 93 a5 20 	sts	0x20A5, r27	; 0x8020a5 <__brkval+0x1>
   1d224:	a0 93 a4 20 	sts	0x20A4, r26	; 0x8020a4 <__brkval>
   1d228:	df 91       	pop	r29
   1d22a:	cf 91       	pop	r28
   1d22c:	08 95       	ret

0001d22e <__ftoa_engine>:
   1d22e:	28 30       	cpi	r18, 0x08	; 8
   1d230:	08 f0       	brcs	.+2      	; 0x1d234 <__ftoa_engine+0x6>
   1d232:	27 e0       	ldi	r18, 0x07	; 7
   1d234:	33 27       	eor	r19, r19
   1d236:	da 01       	movw	r26, r20
   1d238:	99 0f       	add	r25, r25
   1d23a:	31 1d       	adc	r19, r1
   1d23c:	87 fd       	sbrc	r24, 7
   1d23e:	91 60       	ori	r25, 0x01	; 1
   1d240:	00 96       	adiw	r24, 0x00	; 0
   1d242:	61 05       	cpc	r22, r1
   1d244:	71 05       	cpc	r23, r1
   1d246:	39 f4       	brne	.+14     	; 0x1d256 <__ftoa_engine+0x28>
   1d248:	32 60       	ori	r19, 0x02	; 2
   1d24a:	2e 5f       	subi	r18, 0xFE	; 254
   1d24c:	3d 93       	st	X+, r19
   1d24e:	30 e3       	ldi	r19, 0x30	; 48
   1d250:	2a 95       	dec	r18
   1d252:	e1 f7       	brne	.-8      	; 0x1d24c <__ftoa_engine+0x1e>
   1d254:	08 95       	ret
   1d256:	9f 3f       	cpi	r25, 0xFF	; 255
   1d258:	30 f0       	brcs	.+12     	; 0x1d266 <__ftoa_engine+0x38>
   1d25a:	80 38       	cpi	r24, 0x80	; 128
   1d25c:	71 05       	cpc	r23, r1
   1d25e:	61 05       	cpc	r22, r1
   1d260:	09 f0       	breq	.+2      	; 0x1d264 <__ftoa_engine+0x36>
   1d262:	3c 5f       	subi	r19, 0xFC	; 252
   1d264:	3c 5f       	subi	r19, 0xFC	; 252
   1d266:	3d 93       	st	X+, r19
   1d268:	91 30       	cpi	r25, 0x01	; 1
   1d26a:	08 f0       	brcs	.+2      	; 0x1d26e <__ftoa_engine+0x40>
   1d26c:	80 68       	ori	r24, 0x80	; 128
   1d26e:	91 1d       	adc	r25, r1
   1d270:	df 93       	push	r29
   1d272:	cf 93       	push	r28
   1d274:	1f 93       	push	r17
   1d276:	0f 93       	push	r16
   1d278:	ff 92       	push	r15
   1d27a:	ef 92       	push	r14
   1d27c:	19 2f       	mov	r17, r25
   1d27e:	98 7f       	andi	r25, 0xF8	; 248
   1d280:	96 95       	lsr	r25
   1d282:	e9 2f       	mov	r30, r25
   1d284:	96 95       	lsr	r25
   1d286:	96 95       	lsr	r25
   1d288:	e9 0f       	add	r30, r25
   1d28a:	ff 27       	eor	r31, r31
   1d28c:	e8 5c       	subi	r30, 0xC8	; 200
   1d28e:	fd 4f       	sbci	r31, 0xFD	; 253
   1d290:	99 27       	eor	r25, r25
   1d292:	33 27       	eor	r19, r19
   1d294:	ee 24       	eor	r14, r14
   1d296:	ff 24       	eor	r15, r15
   1d298:	a7 01       	movw	r20, r14
   1d29a:	e7 01       	movw	r28, r14
   1d29c:	05 90       	lpm	r0, Z+
   1d29e:	08 94       	sec
   1d2a0:	07 94       	ror	r0
   1d2a2:	28 f4       	brcc	.+10     	; 0x1d2ae <__ftoa_engine+0x80>
   1d2a4:	36 0f       	add	r19, r22
   1d2a6:	e7 1e       	adc	r14, r23
   1d2a8:	f8 1e       	adc	r15, r24
   1d2aa:	49 1f       	adc	r20, r25
   1d2ac:	51 1d       	adc	r21, r1
   1d2ae:	66 0f       	add	r22, r22
   1d2b0:	77 1f       	adc	r23, r23
   1d2b2:	88 1f       	adc	r24, r24
   1d2b4:	99 1f       	adc	r25, r25
   1d2b6:	06 94       	lsr	r0
   1d2b8:	a1 f7       	brne	.-24     	; 0x1d2a2 <__ftoa_engine+0x74>
   1d2ba:	05 90       	lpm	r0, Z+
   1d2bc:	07 94       	ror	r0
   1d2be:	28 f4       	brcc	.+10     	; 0x1d2ca <__ftoa_engine+0x9c>
   1d2c0:	e7 0e       	add	r14, r23
   1d2c2:	f8 1e       	adc	r15, r24
   1d2c4:	49 1f       	adc	r20, r25
   1d2c6:	56 1f       	adc	r21, r22
   1d2c8:	c1 1d       	adc	r28, r1
   1d2ca:	77 0f       	add	r23, r23
   1d2cc:	88 1f       	adc	r24, r24
   1d2ce:	99 1f       	adc	r25, r25
   1d2d0:	66 1f       	adc	r22, r22
   1d2d2:	06 94       	lsr	r0
   1d2d4:	a1 f7       	brne	.-24     	; 0x1d2be <__ftoa_engine+0x90>
   1d2d6:	05 90       	lpm	r0, Z+
   1d2d8:	07 94       	ror	r0
   1d2da:	28 f4       	brcc	.+10     	; 0x1d2e6 <__ftoa_engine+0xb8>
   1d2dc:	f8 0e       	add	r15, r24
   1d2de:	49 1f       	adc	r20, r25
   1d2e0:	56 1f       	adc	r21, r22
   1d2e2:	c7 1f       	adc	r28, r23
   1d2e4:	d1 1d       	adc	r29, r1
   1d2e6:	88 0f       	add	r24, r24
   1d2e8:	99 1f       	adc	r25, r25
   1d2ea:	66 1f       	adc	r22, r22
   1d2ec:	77 1f       	adc	r23, r23
   1d2ee:	06 94       	lsr	r0
   1d2f0:	a1 f7       	brne	.-24     	; 0x1d2da <__ftoa_engine+0xac>
   1d2f2:	05 90       	lpm	r0, Z+
   1d2f4:	07 94       	ror	r0
   1d2f6:	20 f4       	brcc	.+8      	; 0x1d300 <__ftoa_engine+0xd2>
   1d2f8:	49 0f       	add	r20, r25
   1d2fa:	56 1f       	adc	r21, r22
   1d2fc:	c7 1f       	adc	r28, r23
   1d2fe:	d8 1f       	adc	r29, r24
   1d300:	99 0f       	add	r25, r25
   1d302:	66 1f       	adc	r22, r22
   1d304:	77 1f       	adc	r23, r23
   1d306:	88 1f       	adc	r24, r24
   1d308:	06 94       	lsr	r0
   1d30a:	a9 f7       	brne	.-22     	; 0x1d2f6 <__ftoa_engine+0xc8>
   1d30c:	84 91       	lpm	r24, Z
   1d30e:	10 95       	com	r17
   1d310:	17 70       	andi	r17, 0x07	; 7
   1d312:	41 f0       	breq	.+16     	; 0x1d324 <__ftoa_engine+0xf6>
   1d314:	d6 95       	lsr	r29
   1d316:	c7 95       	ror	r28
   1d318:	57 95       	ror	r21
   1d31a:	47 95       	ror	r20
   1d31c:	f7 94       	ror	r15
   1d31e:	e7 94       	ror	r14
   1d320:	1a 95       	dec	r17
   1d322:	c1 f7       	brne	.-16     	; 0x1d314 <__ftoa_engine+0xe6>
   1d324:	ee ed       	ldi	r30, 0xDE	; 222
   1d326:	f1 e0       	ldi	r31, 0x01	; 1
   1d328:	68 94       	set
   1d32a:	15 90       	lpm	r1, Z+
   1d32c:	15 91       	lpm	r17, Z+
   1d32e:	35 91       	lpm	r19, Z+
   1d330:	65 91       	lpm	r22, Z+
   1d332:	95 91       	lpm	r25, Z+
   1d334:	05 90       	lpm	r0, Z+
   1d336:	7f e2       	ldi	r23, 0x2F	; 47
   1d338:	73 95       	inc	r23
   1d33a:	e1 18       	sub	r14, r1
   1d33c:	f1 0a       	sbc	r15, r17
   1d33e:	43 0b       	sbc	r20, r19
   1d340:	56 0b       	sbc	r21, r22
   1d342:	c9 0b       	sbc	r28, r25
   1d344:	d0 09       	sbc	r29, r0
   1d346:	c0 f7       	brcc	.-16     	; 0x1d338 <__ftoa_engine+0x10a>
   1d348:	e1 0c       	add	r14, r1
   1d34a:	f1 1e       	adc	r15, r17
   1d34c:	43 1f       	adc	r20, r19
   1d34e:	56 1f       	adc	r21, r22
   1d350:	c9 1f       	adc	r28, r25
   1d352:	d0 1d       	adc	r29, r0
   1d354:	7e f4       	brtc	.+30     	; 0x1d374 <__ftoa_engine+0x146>
   1d356:	70 33       	cpi	r23, 0x30	; 48
   1d358:	11 f4       	brne	.+4      	; 0x1d35e <__ftoa_engine+0x130>
   1d35a:	8a 95       	dec	r24
   1d35c:	e6 cf       	rjmp	.-52     	; 0x1d32a <__ftoa_engine+0xfc>
   1d35e:	e8 94       	clt
   1d360:	01 50       	subi	r16, 0x01	; 1
   1d362:	30 f0       	brcs	.+12     	; 0x1d370 <__ftoa_engine+0x142>
   1d364:	08 0f       	add	r16, r24
   1d366:	0a f4       	brpl	.+2      	; 0x1d36a <__ftoa_engine+0x13c>
   1d368:	00 27       	eor	r16, r16
   1d36a:	02 17       	cp	r16, r18
   1d36c:	08 f4       	brcc	.+2      	; 0x1d370 <__ftoa_engine+0x142>
   1d36e:	20 2f       	mov	r18, r16
   1d370:	23 95       	inc	r18
   1d372:	02 2f       	mov	r16, r18
   1d374:	7a 33       	cpi	r23, 0x3A	; 58
   1d376:	28 f0       	brcs	.+10     	; 0x1d382 <__ftoa_engine+0x154>
   1d378:	79 e3       	ldi	r23, 0x39	; 57
   1d37a:	7d 93       	st	X+, r23
   1d37c:	2a 95       	dec	r18
   1d37e:	e9 f7       	brne	.-6      	; 0x1d37a <__ftoa_engine+0x14c>
   1d380:	10 c0       	rjmp	.+32     	; 0x1d3a2 <__ftoa_engine+0x174>
   1d382:	7d 93       	st	X+, r23
   1d384:	2a 95       	dec	r18
   1d386:	89 f6       	brne	.-94     	; 0x1d32a <__ftoa_engine+0xfc>
   1d388:	06 94       	lsr	r0
   1d38a:	97 95       	ror	r25
   1d38c:	67 95       	ror	r22
   1d38e:	37 95       	ror	r19
   1d390:	17 95       	ror	r17
   1d392:	17 94       	ror	r1
   1d394:	e1 18       	sub	r14, r1
   1d396:	f1 0a       	sbc	r15, r17
   1d398:	43 0b       	sbc	r20, r19
   1d39a:	56 0b       	sbc	r21, r22
   1d39c:	c9 0b       	sbc	r28, r25
   1d39e:	d0 09       	sbc	r29, r0
   1d3a0:	98 f0       	brcs	.+38     	; 0x1d3c8 <__ftoa_engine+0x19a>
   1d3a2:	23 95       	inc	r18
   1d3a4:	7e 91       	ld	r23, -X
   1d3a6:	73 95       	inc	r23
   1d3a8:	7a 33       	cpi	r23, 0x3A	; 58
   1d3aa:	08 f0       	brcs	.+2      	; 0x1d3ae <__ftoa_engine+0x180>
   1d3ac:	70 e3       	ldi	r23, 0x30	; 48
   1d3ae:	7c 93       	st	X, r23
   1d3b0:	20 13       	cpse	r18, r16
   1d3b2:	b8 f7       	brcc	.-18     	; 0x1d3a2 <__ftoa_engine+0x174>
   1d3b4:	7e 91       	ld	r23, -X
   1d3b6:	70 61       	ori	r23, 0x10	; 16
   1d3b8:	7d 93       	st	X+, r23
   1d3ba:	30 f0       	brcs	.+12     	; 0x1d3c8 <__ftoa_engine+0x19a>
   1d3bc:	83 95       	inc	r24
   1d3be:	71 e3       	ldi	r23, 0x31	; 49
   1d3c0:	7d 93       	st	X+, r23
   1d3c2:	70 e3       	ldi	r23, 0x30	; 48
   1d3c4:	2a 95       	dec	r18
   1d3c6:	e1 f7       	brne	.-8      	; 0x1d3c0 <__ftoa_engine+0x192>
   1d3c8:	11 24       	eor	r1, r1
   1d3ca:	ef 90       	pop	r14
   1d3cc:	ff 90       	pop	r15
   1d3ce:	0f 91       	pop	r16
   1d3d0:	1f 91       	pop	r17
   1d3d2:	cf 91       	pop	r28
   1d3d4:	df 91       	pop	r29
   1d3d6:	99 27       	eor	r25, r25
   1d3d8:	87 fd       	sbrc	r24, 7
   1d3da:	90 95       	com	r25
   1d3dc:	08 95       	ret

0001d3de <strnlen_P>:
   1d3de:	fc 01       	movw	r30, r24
   1d3e0:	05 90       	lpm	r0, Z+
   1d3e2:	61 50       	subi	r22, 0x01	; 1
   1d3e4:	70 40       	sbci	r23, 0x00	; 0
   1d3e6:	01 10       	cpse	r0, r1
   1d3e8:	d8 f7       	brcc	.-10     	; 0x1d3e0 <strnlen_P+0x2>
   1d3ea:	80 95       	com	r24
   1d3ec:	90 95       	com	r25
   1d3ee:	8e 0f       	add	r24, r30
   1d3f0:	9f 1f       	adc	r25, r31
   1d3f2:	08 95       	ret

0001d3f4 <memset>:
   1d3f4:	dc 01       	movw	r26, r24
   1d3f6:	01 c0       	rjmp	.+2      	; 0x1d3fa <memset+0x6>
   1d3f8:	6d 93       	st	X+, r22
   1d3fa:	41 50       	subi	r20, 0x01	; 1
   1d3fc:	50 40       	sbci	r21, 0x00	; 0
   1d3fe:	e0 f7       	brcc	.-8      	; 0x1d3f8 <memset+0x4>
   1d400:	08 95       	ret

0001d402 <strnlen>:
   1d402:	fc 01       	movw	r30, r24
   1d404:	61 50       	subi	r22, 0x01	; 1
   1d406:	70 40       	sbci	r23, 0x00	; 0
   1d408:	01 90       	ld	r0, Z+
   1d40a:	01 10       	cpse	r0, r1
   1d40c:	d8 f7       	brcc	.-10     	; 0x1d404 <strnlen+0x2>
   1d40e:	80 95       	com	r24
   1d410:	90 95       	com	r25
   1d412:	8e 0f       	add	r24, r30
   1d414:	9f 1f       	adc	r25, r31
   1d416:	08 95       	ret

0001d418 <__ultoa_invert>:
   1d418:	fa 01       	movw	r30, r20
   1d41a:	aa 27       	eor	r26, r26
   1d41c:	28 30       	cpi	r18, 0x08	; 8
   1d41e:	51 f1       	breq	.+84     	; 0x1d474 <__ultoa_invert+0x5c>
   1d420:	20 31       	cpi	r18, 0x10	; 16
   1d422:	81 f1       	breq	.+96     	; 0x1d484 <__ultoa_invert+0x6c>
   1d424:	e8 94       	clt
   1d426:	6f 93       	push	r22
   1d428:	6e 7f       	andi	r22, 0xFE	; 254
   1d42a:	6e 5f       	subi	r22, 0xFE	; 254
   1d42c:	7f 4f       	sbci	r23, 0xFF	; 255
   1d42e:	8f 4f       	sbci	r24, 0xFF	; 255
   1d430:	9f 4f       	sbci	r25, 0xFF	; 255
   1d432:	af 4f       	sbci	r26, 0xFF	; 255
   1d434:	b1 e0       	ldi	r27, 0x01	; 1
   1d436:	3e d0       	rcall	.+124    	; 0x1d4b4 <__ultoa_invert+0x9c>
   1d438:	b4 e0       	ldi	r27, 0x04	; 4
   1d43a:	3c d0       	rcall	.+120    	; 0x1d4b4 <__ultoa_invert+0x9c>
   1d43c:	67 0f       	add	r22, r23
   1d43e:	78 1f       	adc	r23, r24
   1d440:	89 1f       	adc	r24, r25
   1d442:	9a 1f       	adc	r25, r26
   1d444:	a1 1d       	adc	r26, r1
   1d446:	68 0f       	add	r22, r24
   1d448:	79 1f       	adc	r23, r25
   1d44a:	8a 1f       	adc	r24, r26
   1d44c:	91 1d       	adc	r25, r1
   1d44e:	a1 1d       	adc	r26, r1
   1d450:	6a 0f       	add	r22, r26
   1d452:	71 1d       	adc	r23, r1
   1d454:	81 1d       	adc	r24, r1
   1d456:	91 1d       	adc	r25, r1
   1d458:	a1 1d       	adc	r26, r1
   1d45a:	20 d0       	rcall	.+64     	; 0x1d49c <__ultoa_invert+0x84>
   1d45c:	09 f4       	brne	.+2      	; 0x1d460 <__ultoa_invert+0x48>
   1d45e:	68 94       	set
   1d460:	3f 91       	pop	r19
   1d462:	2a e0       	ldi	r18, 0x0A	; 10
   1d464:	26 9f       	mul	r18, r22
   1d466:	11 24       	eor	r1, r1
   1d468:	30 19       	sub	r19, r0
   1d46a:	30 5d       	subi	r19, 0xD0	; 208
   1d46c:	31 93       	st	Z+, r19
   1d46e:	de f6       	brtc	.-74     	; 0x1d426 <__ultoa_invert+0xe>
   1d470:	cf 01       	movw	r24, r30
   1d472:	08 95       	ret
   1d474:	46 2f       	mov	r20, r22
   1d476:	47 70       	andi	r20, 0x07	; 7
   1d478:	40 5d       	subi	r20, 0xD0	; 208
   1d47a:	41 93       	st	Z+, r20
   1d47c:	b3 e0       	ldi	r27, 0x03	; 3
   1d47e:	0f d0       	rcall	.+30     	; 0x1d49e <__ultoa_invert+0x86>
   1d480:	c9 f7       	brne	.-14     	; 0x1d474 <__ultoa_invert+0x5c>
   1d482:	f6 cf       	rjmp	.-20     	; 0x1d470 <__ultoa_invert+0x58>
   1d484:	46 2f       	mov	r20, r22
   1d486:	4f 70       	andi	r20, 0x0F	; 15
   1d488:	40 5d       	subi	r20, 0xD0	; 208
   1d48a:	4a 33       	cpi	r20, 0x3A	; 58
   1d48c:	18 f0       	brcs	.+6      	; 0x1d494 <__ultoa_invert+0x7c>
   1d48e:	49 5d       	subi	r20, 0xD9	; 217
   1d490:	31 fd       	sbrc	r19, 1
   1d492:	40 52       	subi	r20, 0x20	; 32
   1d494:	41 93       	st	Z+, r20
   1d496:	02 d0       	rcall	.+4      	; 0x1d49c <__ultoa_invert+0x84>
   1d498:	a9 f7       	brne	.-22     	; 0x1d484 <__ultoa_invert+0x6c>
   1d49a:	ea cf       	rjmp	.-44     	; 0x1d470 <__ultoa_invert+0x58>
   1d49c:	b4 e0       	ldi	r27, 0x04	; 4
   1d49e:	a6 95       	lsr	r26
   1d4a0:	97 95       	ror	r25
   1d4a2:	87 95       	ror	r24
   1d4a4:	77 95       	ror	r23
   1d4a6:	67 95       	ror	r22
   1d4a8:	ba 95       	dec	r27
   1d4aa:	c9 f7       	brne	.-14     	; 0x1d49e <__ultoa_invert+0x86>
   1d4ac:	00 97       	sbiw	r24, 0x00	; 0
   1d4ae:	61 05       	cpc	r22, r1
   1d4b0:	71 05       	cpc	r23, r1
   1d4b2:	08 95       	ret
   1d4b4:	9b 01       	movw	r18, r22
   1d4b6:	ac 01       	movw	r20, r24
   1d4b8:	0a 2e       	mov	r0, r26
   1d4ba:	06 94       	lsr	r0
   1d4bc:	57 95       	ror	r21
   1d4be:	47 95       	ror	r20
   1d4c0:	37 95       	ror	r19
   1d4c2:	27 95       	ror	r18
   1d4c4:	ba 95       	dec	r27
   1d4c6:	c9 f7       	brne	.-14     	; 0x1d4ba <__ultoa_invert+0xa2>
   1d4c8:	62 0f       	add	r22, r18
   1d4ca:	73 1f       	adc	r23, r19
   1d4cc:	84 1f       	adc	r24, r20
   1d4ce:	95 1f       	adc	r25, r21
   1d4d0:	a0 1d       	adc	r26, r0
   1d4d2:	08 95       	ret

0001d4d4 <_exit>:
   1d4d4:	f8 94       	cli

0001d4d6 <__stop_program>:
   1d4d6:	ff cf       	rjmp	.-2      	; 0x1d4d6 <__stop_program>
