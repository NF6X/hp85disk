
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001656  00800100  0001d568  0001d5fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008e2  00801756  00801756  0001ec52  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001ec52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001ec64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001730  00000000  00000000  0001eca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002934c  00000000  00000000  000203d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000617f  00000000  00000000  00049720  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000125a3  00000000  00000000  0004f89f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005158  00000000  00000000  00061e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004b09  00000000  00000000  00066f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00024710  00000000  00000000  0006baa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001778  00000000  00000000  000901b5  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
00801756 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001c2 l     O .text	0000001e __c.3622
000001e0 l     O .text	0000001d __c.3617
00801756 l     O .bss	00000001 error_flag
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006c9e l     F .text	0000002a IS_Leap
00800388 l     O .data	00000018 __days
008017ce l     O .bss	00000016 t.3676
008017e4 l     O .bss	00000002 p.3677
008017b0 l     O .bss	00000008 ts.3755
008017b8 l     O .bss	00000016 t.3688
008003a0 l     O .data	0000001a __days_sum
00000719 l     O .text	00000012 __c.3795
00000708 l     O .text	00000011 __c.3797
000006f7 l     O .text	00000011 __c.3799
000006e5 l     O .text	00000012 __c.3801
000006d4 l     O .text	00000011 __c.3803
000006bd l     O .text	00000017 __c.3805
0000072b l     O .text	00000021 __c.3774
0000074c l     O .text	0000001d __c.3649
00801806 l     O .bss	00000020 buf.3654
008017e6 l     O .bss	00000020 buf.3666
000006ab l     O .text	00000012 __c.3851
00000696 l     O .text	00000015 __c.3853
0000067f l     O .text	00000017 __c.3855
00000665 l     O .text	0000001a __c.3857
00000641 l     O .text	00000024 __c.3859
0000062f l     O .text	00000012 __c.3866
0000061e l     O .text	00000011 __c.3868
0000060d l     O .text	00000011 __c.3870
000005fb l     O .text	00000012 __c.3872
000005ea l     O .text	00000011 __c.3874
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000d348 l     F .text	00000004 xchg_spi
0000d34c l     F .text	0000000c deselect
0000d358 l     F .text	00000046 rcvr_datablock
0000d3c2 l     F .text	00000044 select
00000769 l     O .text	00000010 __c.3617
0000d406 l     F .text	00000086 send_cmd
0000d48c l     F .text	0000004e xmit_datablock
0080182b l     O .bss	00000001 CardType
0080182d l     O .bss	00000001 Timer1
0080182c l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800ba6 l     O .data	00000014 CSWTCH.97
00000bde l     O .text	00000018 __c.3594
00000bc6 l     O .text	00000018 __c.3601
0000ec40 l     F .text	0000001a _fprintf_putc
00801938 l     O .bss	0000002e _dp
00801838 l     O .bss	00000100 _de
00000bb2 l     O .text	00000008 __c.3917
00000bae l     O .text	00000004 __c.3919
00000bba l     O .text	0000000c __c.3672
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000e84 l     O .text	00000010 __c.3618
00000dbe l     O .text	000000c6 __c.3620
00000d1b l     O .text	0000000c __c.3687
00000d0b l     O .text	00000010 __c.3689
00000cfe l     O .text	0000000d __c.3691
00000cee l     O .text	00000010 __c.3693
00000ce1 l     O .text	0000000d __c.3695
00000cc5 l     O .text	0000000f __c.3700
00000cd4 l     O .text	0000000d __c.3697
00000cb2 l     O .text	00000013 __c.3704
00800180 l     O .data	00000002 _pagesize
00000cab l     O .text	00000007 __c.3714
00000ca9 l     O .text	00000002 __c.3716
00000d34 l     O .text	00000010 __c.3669
00000d32 l     O .text	00000002 __c.3674
00000d27 l     O .text	0000000b __c.3676
00000c97 l     O .text	00000012 __c.3728
00000c93 l     O .text	00000004 __c.3730
00000c79 l     O .text	0000001a __c.3735
00000c58 l     O .text	00000021 __c.3748
00000c42 l     O .text	00000016 __c.3750
00000c34 l     O .text	0000000e __c.3752
00000c01 l     O .text	00000023 __c.3760
00000c24 l     O .text	00000010 __c.3757
00000bf6 l     O .text	0000000b __c.3764
00000dad l     O .text	00000011 __c.3636
00000d95 l     O .text	00000018 __c.3640
00000d84 l     O .text	00000011 __c.3647
00000d78 l     O .text	0000000c __c.3651
00000d74 l     O .text	00000004 __c.3653
00000d63 l     O .text	00000011 __c.3655
00000d55 l     O .text	0000000e __c.3657
00000d44 l     O .text	00000011 __c.3659
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000122c l     O .text	00000011 __c.4245
00001219 l     O .text	00000013 __c.4257
000011f3 l     O .text	00000026 __c.4262
000011d8 l     O .text	0000001b __c.4264
000011b1 l     O .text	00000027 __c.4269
00001196 l     O .text	0000001b __c.4271
00001168 l     O .text	0000002e __c.4287
00001063 l     O .text	0000002f __c.4318
00001092 l     O .text	0000003c __c.4314
0000110a l     O .text	0000003f __c.4308
000010ce l     O .text	0000003c __c.4310
00001149 l     O .text	0000001f __c.4303
00001050 l     O .text	00000013 __c.4323
00001029 l     O .text	00000009 __c.4365
00001023 l     O .text	00000006 __c.4367
00001018 l     O .text	0000000b __c.4371
0000100d l     O .text	0000000b __c.4373
00001002 l     O .text	0000000b __c.4375
00001032 l     O .text	0000001e __c.4339
00000fe9 l     O .text	00000019 __c.4391
00000fbc l     O .text	0000002d __c.4394
00000f95 l     O .text	00000027 __c.4398
00000f7b l     O .text	0000001a __c.4408
00000f4d l     O .text	0000002e __c.4410
00000f33 l     O .text	0000001a __c.4415
00000f0b l     O .text	00000028 __c.4423
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000014df l     O .text	00000012 __c.4253
000014ce l     O .text	00000011 __c.4255
000014b5 l     O .text	00000019 __c.4257
0000149b l     O .text	0000001a __c.4303
00001470 l     O .text	0000002b __c.4305
00001459 l     O .text	00000017 __c.4307
0000144d l     O .text	0000000c __c.4309
00001447 l     O .text	00000006 __c.4313
00001435 l     O .text	00000012 __c.4315
0000142e l     O .text	00000007 __c.4320
00001423 l     O .text	0000000b __c.4322
0000141c l     O .text	00000007 __c.4324
0000140f l     O .text	0000000d __c.4326
000013fe l     O .text	00000011 __c.4328
000013dd l     O .text	00000021 __c.4355
000013c3 l     O .text	0000001a __c.4357
000013ab l     O .text	00000018 __c.4362
00001393 l     O .text	00000018 __c.4364
0000138c l     O .text	00000007 __c.4366
00001385 l     O .text	00000007 __c.4368
0000137e l     O .text	00000007 __c.4370
00001372 l     O .text	0000000c __c.4372
00001365 l     O .text	0000000d __c.4374
0000135e l     O .text	00000007 __c.4376
0000133d l     O .text	00000021 __c.4378
000012ea l     O .text	00000007 __c.4398
000012d9 l     O .text	00000011 __c.4400
000012c7 l     O .text	00000012 __c.4402
000012b3 l     O .text	00000014 __c.4404
000012a3 l     O .text	00000010 __c.4406
00001297 l     O .text	0000000c __c.4408
00001286 l     O .text	00000011 __c.4413
00001274 l     O .text	00000012 __c.4415
0000124e l     O .text	00000026 __c.4417
0000123d l     O .text	00000011 __c.4422
00001336 l     O .text	00000007 __c.4383
00001334 l     O .text	00000002 __c.4385
00001322 l     O .text	00000012 __c.4387
00001311 l     O .text	00000011 __c.4389
000012fd l     O .text	00000014 __c.4391
000012f1 l     O .text	0000000c __c.4393
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002098 l     O .text	00000015 __c.4472
0000208c l     O .text	0000000c __c.4483
00002088 l     O .text	00000004 __c.4493
00001d52 l     O .text	00000012 __c.4639
00001d34 l     O .text	00000002 __c.4648
00001d36 l     O .text	00000009 __c.4646
00001d3f l     O .text	0000000a __c.4644
00001d49 l     O .text	00000009 __c.4642
00001d32 l     O .text	00000002 __c.4653
00001d12 l     O .text	00000020 __c.4662
00001c97 l     O .text	00000002 __c.4677
00001ccc l     O .text	0000000a __c.4671
00001cad l     O .text	0000001f __c.4673
00001c99 l     O .text	00000014 __c.4675
00001d09 l     O .text	00000009 __c.4665
00001cea l     O .text	0000001f __c.4667
00001cd6 l     O .text	00000014 __c.4669
00001c95 l     O .text	00000002 __c.4682
00001c70 l     O .text	00000025 __c.4721
00001c37 l     O .text	00000039 __c.4723
00001c02 l     O .text	00000035 __c.4725
00001bcd l     O .text	00000035 __c.4727
00001b95 l     O .text	00000038 __c.4729
00001b6a l     O .text	0000002b __c.4731
00001b46 l     O .text	00000024 __c.4752
00001b24 l     O .text	00000022 __c.4760
0080197e l     O .bss	00000002 stack_ind
00801974 l     O .bss	0000000a stack_p
00001afc l     O .text	00000028 __c.4796
00001ad4 l     O .text	00000028 __c.4802
000019b1 l     O .text	0000001a __c.4856
000019a9 l     O .text	00000008 __c.4858
000019cb l     O .text	00000022 __c.4854
000019f5 l     O .text	0000001a __c.4850
000019ed l     O .text	00000008 __c.4852
00001a0f l     O .text	00000022 __c.4848
00001999 l     O .text	00000010 __c.4866
000017b4 l     O .text	000001e5 __c.4868
000017ab l     O .text	00000009 __c.4872
000017a3 l     O .text	00000008 __c.4918
00001791 l     O .text	00000012 __c.4920
0000176e l     O .text	00000023 __c.4922
0000174f l     O .text	0000001f __c.4924
0000166e l     O .text	00000015 __c.4955
00001659 l     O .text	00000015 __c.4957
00001647 l     O .text	00000012 __c.4959
00001ab9 l     O .text	0000001b __c.4818
00001a83 l     O .text	00000036 __c.4824
00001a4c l     O .text	00000037 __c.4826
00001a31 l     O .text	0000001b __c.4828
0000207b l     O .text	0000000d __c.4514
00001dca l     O .text	00000022 __c.4625
00001dec l     O .text	00000030 __c.4622
00001e1c l     O .text	0000002f __c.4613
00001e4b l     O .text	00000030 __c.4610
00001e7b l     O .text	0000002e __c.4601
00001ea9 l     O .text	0000002e __c.4593
0000205d l     O .text	0000001e __c.4516
0000203b l     O .text	00000022 __c.4519
00002019 l     O .text	00000022 __c.4530
00001fef l     O .text	0000002a __c.4534
00001fbe l     O .text	00000031 __c.4537
00001f91 l     O .text	0000002d __c.4547
00001f63 l     O .text	0000002e __c.4555
00001f35 l     O .text	0000002e __c.4558
00001f03 l     O .text	00000032 __c.4566
00001ed7 l     O .text	0000002c __c.4583
00001da8 l     O .text	00000022 __c.4629
00001d8b l     O .text	0000001d __c.4631
00001d64 l     O .text	00000027 __c.4633
00001637 l     O .text	00000010 __c.4964
00001635 l     O .text	00000002 __c.4969
00001729 l     O .text	00000026 __c.4935
00001701 l     O .text	00000028 __c.4937
000016d7 l     O .text	0000002a __c.4941
000016ac l     O .text	0000002b __c.4945
00001683 l     O .text	00000029 __c.4947
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008019a0 l     O .bss	00000005 B.4258
0080198d l     O .bss	00000013 B.4262
00801980 l     O .bss	0000000d B.4266
0000274d l     O .text	00000005 __c.4369
00002742 l     O .text	0000000b __c.4371
0000272e l     O .text	00000014 __c.4381
00002713 l     O .text	0000001b __c.4383
00002702 l     O .text	00000011 __c.4391
000026df l     O .text	00000023 __c.4393
000026c2 l     O .text	0000001d __c.4395
000026a3 l     O .text	0000001f __c.4397
0000268b l     O .text	00000018 __c.4402
00002671 l     O .text	0000001a __c.4407
0000264b l     O .text	00000026 __c.4416
00002632 l     O .text	00000019 __c.4418
00002536 l     O .text	00000025 __c.4440
0000255b l     O .text	0000001a __c.4438
00002575 l     O .text	00000016 __c.4436
0000258b l     O .text	0000000e __c.4434
00002599 l     O .text	0000001c __c.4432
000025b5 l     O .text	0000001d __c.4430
0000261c l     O .text	00000016 __c.4420
00002603 l     O .text	00000019 __c.4423
000025eb l     O .text	00000018 __c.4425
000025d2 l     O .text	00000019 __c.4428
00002515 l     O .text	00000021 __c.4442
000024ff l     O .text	00000016 __c.4444
000024e2 l     O .text	0000001d __c.4446
000024c6 l     O .text	0000001c __c.4448
000024b5 l     O .text	00000011 __c.4450
00002497 l     O .text	0000001e __c.4452
00002478 l     O .text	0000001f __c.4454
0000245d l     O .text	0000001b __c.4456
00002444 l     O .text	00000019 __c.4458
0000242d l     O .text	00000017 __c.4460
0000240a l     O .text	00000023 __c.4462
000023ea l     O .text	00000020 __c.4464
000023b2 l     O .text	00000038 __c.4467
0000226f l     O .text	00000020 __c.4500
0000225b l     O .text	00000014 __c.4502
000027f2 l     O .text	00000029 __c.4330
000027a5 l     O .text	00000026 __c.4338
000027cb l     O .text	00000014 __c.4336
000027df l     O .text	00000013 __c.4332
0000277d l     O .text	00000028 __c.4342
00002752 l     O .text	0000002b __c.4344
00002241 l     O .text	0000001a __c.4509
0000222e l     O .text	00000013 __c.4511
000028fb l     O .text	00000013 __c.4272
00002222 l     O .text	0000000c __c.4525
0000220f l     O .text	00000013 __c.4532
00002200 l     O .text	0000000f __c.4534
0000239f l     O .text	00000013 __c.4476
00002386 l     O .text	00000019 __c.4478
00002361 l     O .text	00000025 __c.4481
00002344 l     O .text	0000001d __c.4484
00002326 l     O .text	0000001e __c.4486
000022ff l     O .text	00000027 __c.4488
000022eb l     O .text	00000014 __c.4490
000022cb l     O .text	00000020 __c.4492
0000228f l     O .text	0000003c __c.4495
000021dd l     O .text	00000023 __c.4548
000028b7 l     O .text	00000028 __c.4305
00002899 l     O .text	0000001e __c.4307
00002868 l     O .text	00000019 __c.4311
00002881 l     O .text	00000018 __c.4309
00002843 l     O .text	00000025 __c.4316
0000281b l     O .text	00000028 __c.4318
000028df l     O .text	0000001c __c.4288
000021c7 l     O .text	00000016 __c.4553
000021b1 l     O .text	00000016 __c.4555
0000219c l     O .text	00000015 __c.4557
0000218d l     O .text	0000000f __c.4559
00002179 l     O .text	00000014 __c.4561
00002145 l     O .text	00000034 __c.4563
00002111 l     O .text	00000034 __c.4565
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008019f2 l     O .bss	00000002 lcd_display_time
00004b56 l     O .text	0000003b __c.4471
00004b39 l     O .text	0000001d __c.4473
00004b29 l     O .text	00000010 __c.4475
00004b02 l     O .text	00000027 __c.4477
00004ae8 l     O .text	0000001a __c.4479
00004ace l     O .text	0000001a __c.4481
00004acc l     O .text	00000002 __c.4483
00004ab6 l     O .text	00000016 __c.4497
00004a9c l     O .text	0000001a __c.4503
00004a7e l     O .text	0000001e __c.4509
00004a68 l     O .text	00000016 __c.4511
00004a62 l     O .text	00000006 __c.4513
00004a5c l     O .text	00000006 __c.4515
00004a42 l     O .text	0000001a __c.4517
00004a3c l     O .text	00000006 __c.4524
00004a36 l     O .text	00000006 __c.4526
00004a12 l     O .text	00000024 __c.4533
00004958 l     O .text	000000ba __c.4535
0001c46a l     F .text	000003ac user_task.part.1
00004955 l     O .text	00000003 __c.4548
00004940 l     O .text	00000015 __c.4550
00004937 l     O .text	00000009 __c.4552
00004922 l     O .text	00000015 __c.4557
0000491e l     O .text	00000004 __c.4565
0000490e l     O .text	00000010 __c.4567
000048fd l     O .text	00000011 __c.4569
000048e4 l     O .text	00000019 __c.4571
000048d7 l     O .text	0000000d __c.4573
000048c6 l     O .text	00000011 __c.4581
000048c0 l     O .text	00000006 __c.4583
000048b9 l     O .text	00000007 __c.4591
000048a8 l     O .text	00000011 __c.4593
00004881 l     O .text	00000027 __c.4595
00004862 l     O .text	0000001f __c.4597
00004845 l     O .text	0000001d __c.4599
00004835 l     O .text	00000010 __c.4601
0000480e l     O .text	00000027 __c.4603
000047f4 l     O .text	0000001a __c.4605
000047da l     O .text	0000001a __c.4607
000047c4 l     O .text	00000016 __c.4609
000047ae l     O .text	00000016 __c.4611
0000479c l     O .text	00000012 __c.4613
0000478d l     O .text	0000000f __c.4615
0000475f l     O .text	0000002e __c.4617
00004747 l     O .text	00000018 __c.4619
00004736 l     O .text	00000011 __c.4621
00004720 l     O .text	00000016 __c.4623
0000470b l     O .text	00000015 __c.4625
000046f9 l     O .text	00000012 __c.4627
000046e1 l     O .text	00000018 __c.4629
000046cc l     O .text	00000015 __c.4631
000046b6 l     O .text	00000016 __c.4633
000046a0 l     O .text	00000016 __c.4635
0000469a l     O .text	00000006 __c.4637
00004680 l     O .text	0000001a __c.4639
0000466c l     O .text	00000014 __c.4641
00000000 l    df *ABS*	00000000 i2c.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000429 l     O .text	00000018 __c.3593
00000410 l     O .text	00000019 __c.3595
000003fa l     O .text	00000016 __c.3597
000003de l     O .text	0000001c __c.3640
0080175d l     O .bss	00000001 i2c_init_status
000003c7 l     O .text	00000017 __c.3646
00005b20 l     F .text	00000014 i2c_next
000003c1 l     O .text	00000006 __c.3696
000003b3 l     O .text	0000000e __c.3698
000003a9 l     O .text	0000000a __c.3700
0000039d l     O .text	0000000c __c.3702
0000038b l     O .text	00000012 __c.3704
00000379 l     O .text	00000012 __c.3706
00000366 l     O .text	00000013 __c.3708
00000364 l     O .text	00000002 __c.3710
00000351 l     O .text	00000013 __c.3715
0000033d l     O .text	00000014 __c.3717
00000333 l     O .text	0000000a __c.3719
00000331 l     O .text	00000002 __c.3721
00000000 l    df *ABS*	00000000 parsing.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000051e l     O .text	00000020 __c.3586
000004f8 l     O .text	00000026 __c.3629
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007c12 l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00008f0c l     F .text	0000002a ld_dword
00008f36 l     F .text	0000000c st_dword
00008f42 l     F .text	00000012 mem_set
00008f54 l     F .text	0000001e mem_cmp
00008f72 l     F .text	00000050 clst2sect
00008fc2 l     F .text	00000078 clmt_clust
0000903a l     F .text	0000001e sum_sfn
0080046b l     O .data	00000080 ExCvt
00009058 l     F .text	00000058 get_ldnumber
00801826 l     O .bss	00000001 CurrVol
000090b0 l     F .text	00000058 validate
00009108 l     F .text	00000254 get_fileinfo
0000935c l     F .text	00000016 mem_cpy.part.0
00009372 l     F .text	0000002a ld_clust.isra.3
0000939c l     F .text	0000001a st_clust.isra.4
000093b6 l     F .text	000000a6 sync_window.part.5
0000945c l     F .text	000000e4 sync_fs
00009540 l     F .text	00000150 dir_clear
00009690 l     F .text	00000076 move_window
00009706 l     F .text	00000080 check_fs
00009786 l     F .text	000004b4 mount_volume
00801829 l     O .bss	00000002 FatFs
00801827 l     O .bss	00000002 Fsid
00009c3a l     F .text	000001f2 put_fat
00009e2c l     F .text	00000168 get_fat.isra.9
00009f94 l     F .text	00000182 dir_sdi
0000a116 l     F .text	0000024c create_chain
0000a362 l     F .text	00000122 remove_chain
0000a484 l     F .text	000001d0 dir_next
0000a654 l     F .text	00000072 dir_alloc
0000a6c6 l     F .text	00000192 dir_read
008004eb l     O .data	0000000d LfnOfs
0000a858 l     F .text	00000090 dir_remove
0000a8e8 l     F .text	0000021c dir_find
0000ab04 l     F .text	0000031c dir_register
0000ae20 l     F .text	00000478 follow_path
00000000 l    df *ABS*	00000000 ffunicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008007a6 l     O .data	00000100 uc437
008004f8 l     O .data	000000bc cvt2.1843
008005b4 l     O .data	000001f2 cvt1.1842
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000ddb6 l     F .text	00000048 mmc_task
00000827 l     O .text	0000001c __c.3594
0000081a l     O .text	0000000d __c.3622
0000080a l     O .text	00000010 __c.3636
0080182e l     O .bss	00000002 mmc_init_flag
000007ea l     O .text	00000020 __c.3638
000007d7 l     O .text	00000013 __c.3640
000007cb l     O .text	0000000c __c.3642
000007ba l     O .text	00000011 __c.3644
0000079c l     O .text	0000001e __c.3647
00000787 l     O .text	00000015 __c.3649
00000779 l     O .text	0000000e __c.3651
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000a9c l     O .text	00000007 __c.3596
008008ca l     O .data	00000008 CSWTCH.25
00000a8b l     O .text	00000011 __c.3632
00000a6c l     O .text	0000001f __c.3634
00000a4e l     O .text	0000001e __c.3636
00000a2f l     O .text	0000001f __c.3638
00000a11 l     O .text	0000001e __c.3640
000009f3 l     O .text	0000001e __c.3642
000009d4 l     O .text	0000001f __c.3644
000009b5 l     O .text	0000001f __c.3646
00000996 l     O .text	0000001f __c.3648
00000977 l     O .text	0000001f __c.3650
00000958 l     O .text	0000001f __c.3652
00000938 l     O .text	00000020 __c.3654
0000091a l     O .text	0000001e __c.3656
000008f5 l     O .text	00000025 __c.3658
000008cf l     O .text	00000026 __c.3660
00000882 l     O .text	0000004d __c.3662
00000867 l     O .text	0000001b __c.3668
00000845 l     O .text	00000022 __c.3670
00000843 l     O .text	00000002 __c.3672
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000b31 l     O .text	0000007d __c.3587
00000b21 l     O .text	00000010 __c.3589
00000ae1 l     O .text	0000000e __c.3624
00000ab8 l     O .text	00000029 __c.3628
00000aa3 l     O .text	00000015 __c.3630
00000b11 l     O .text	00000010 __c.3607
00000afd l     O .text	00000014 __c.3609
00000aef l     O .text	0000000e __c.3611
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001625 l     O .text	00000010 __c.4438
000014fe l     O .text	00000127 __c.4440
000014f1 l     O .text	0000000d __c.4448
00000000 l    df *ABS*	00000000 drives_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000020ed l     O .text	00000007 __c.3641
000020f4 l     O .text	0000001d __c.3637
000020cf l     O .text	0000001e __c.3643
000020ad l     O .text	00000022 __c.3648
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000164dc l     F .text	000000ac amigo_overflow_check
000030c9 l     O .text	00000019 __c.4195
00016588 l     F .text	000000e8 amigo_chs_to_logical
00003076 l     O .text	0000002b __c.4188
00003149 l     O .text	00000018 __c.4165
0000312b l     O .text	0000001e __c.4171
00003111 l     O .text	0000001a __c.4173
000030fc l     O .text	00000015 __c.4179
000030e2 l     O .text	0000001a __c.4181
000030a1 l     O .text	00000028 __c.4218
00003066 l     O .text	00000010 __c.4229
00003051 l     O .text	00000015 __c.4233
0000303f l     O .text	00000012 __c.4239
00003025 l     O .text	0000001a __c.4245
00003013 l     O .text	00000012 __c.4252
00002ff4 l     O .text	0000001f __c.4254
00002fd4 l     O .text	00000020 __c.4256
00002fba l     O .text	0000001a __c.4263
00002fad l     O .text	0000000d __c.4265
00002f9e l     O .text	0000000f __c.4278
00002f37 l     O .text	00000067 __c.4285
00002ed0 l     O .text	00000067 __c.4287
00002e69 l     O .text	00000067 __c.4289
00002e04 l     O .text	00000065 __c.4291
00002db4 l     O .text	00000050 __c.4296
00002d64 l     O .text	00000050 __c.4298
00002d14 l     O .text	00000050 __c.4300
00002cc3 l     O .text	00000051 __c.4302
00002c91 l     O .text	00000032 __c.4314
00002c6f l     O .text	00000022 __c.4316
00002c4e l     O .text	00000021 __c.4318
00002c2d l     O .text	00000021 __c.4320
00002bfe l     O .text	0000002f __c.4322
00002bde l     O .text	00000020 __c.4325
00002bca l     O .text	00000014 __c.4328
00002bb6 l     O .text	00000014 __c.4331
00002b8d l     O .text	00000029 __c.4333
00002b6c l     O .text	00000021 __c.4335
00002b5c l     O .text	00000010 __c.4338
00002b3a l     O .text	00000022 __c.4340
00002b1e l     O .text	0000001c __c.4342
00002af5 l     O .text	00000029 __c.4344
00002ad5 l     O .text	00000020 __c.4346
00002aaa l     O .text	0000002b __c.4348
00002a8b l     O .text	0000001f __c.4350
00002a7b l     O .text	00000010 __c.4353
00002a49 l     O .text	00000032 __c.4358
00002a29 l     O .text	00000020 __c.4362
00002a08 l     O .text	00000021 __c.4365
000029e9 l     O .text	0000001f __c.4368
000029c7 l     O .text	00000022 __c.4371
000029ab l     O .text	0000001c __c.4374
0000298b l     O .text	00000020 __c.4377
00002962 l     O .text	00000029 __c.4382
00002937 l     O .text	0000002b __c.4385
0000290e l     O .text	00000029 __c.4388
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000319e l     O .text	00000021 __c.4137
000031cd l     O .text	00000015 __c.4129
000031bf l     O .text	0000000e __c.4131
00003204 l     O .text	00000022 __c.4119
000031ee l     O .text	00000016 __c.4121
000031e2 l     O .text	0000000c __c.4123
00003197 l     O .text	00000007 __c.4143
0000317b l     O .text	0000001c __c.4148
00003161 l     O .text	0000001a __c.4150
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000465c l     O .text	00000010 __c.3845
00004498 l     O .text	000001c4 __c.3847
00004431 l     O .text	00000029 __c.3868
00004419 l     O .text	00000018 __c.3873
000043f4 l     O .text	00000025 __c.3885
000043db l     O .text	00000019 __c.3891
000043ba l     O .text	00000021 __c.3898
0000437e l     O .text	0000003c __c.3907
00004341 l     O .text	0000003d __c.3916
008019d2 l     O .bss	00000020 _lif_ctime_buf.4019
008019b2 l     O .bss	00000020 _timestr.4024
0000433c l     O .text	00000005 __c.4039
00004322 l     O .text	0000001a __c.4041
00004305 l     O .text	0000001d __c.4043
000042e8 l     O .text	0000001d __c.4045
000042cb l     O .text	0000001d __c.4047
000042ae l     O .text	0000001d __c.4049
00004291 l     O .text	0000001d __c.4051
00004274 l     O .text	0000001d __c.4053
00004257 l     O .text	0000001d __c.4055
0000423a l     O .text	0000001d __c.4057
00004220 l     O .text	0000001a __c.4059
00004204 l     O .text	0000001c __c.4061
000041e7 l     O .text	0000001d __c.4063
000041ca l     O .text	0000001d __c.4065
000041ae l     O .text	0000001c __c.4067
00004192 l     O .text	0000001c __c.4069
00004178 l     O .text	0000001a __c.4071
0000415e l     O .text	0000001a __c.4073
00004142 l     O .text	0000001c __c.4075
00004126 l     O .text	0000001c __c.4077
00004109 l     O .text	0000001d __c.4079
000040ec l     O .text	0000001d __c.4081
000040cf l     O .text	0000001d __c.4083
000040b3 l     O .text	0000001c __c.4085
00004099 l     O .text	0000001a __c.4087
00004097 l     O .text	00000002 __c.4089
00004078 l     O .text	0000001f __c.4096
0000403f l     O .text	00000039 __c.4098
00004027 l     O .text	00000018 __c.4100
00003fee l     O .text	00000039 __c.4102
00003fb5 l     O .text	00000039 __c.4104
00003f90 l     O .text	00000025 __c.4106
00003f61 l     O .text	0000002f __c.4108
00003f35 l     O .text	0000002c __c.4110
00003f14 l     O .text	00000021 __c.4116
00003ed0 l     O .text	00000044 __c.4118
00003e8f l     O .text	00000041 __c.4120
00003e61 l     O .text	0000002e __c.4122
00003e16 l     O .text	0000004b __c.4124
00003dcb l     O .text	0000004b __c.4126
00003da0 l     O .text	0000002b __c.4128
00003d74 l     O .text	0000002c __c.4130
00003cb1 l     O .text	0000003a __c.4185
00003c91 l     O .text	00000020 __c.4194
00003c44 l     O .text	0000004d __c.4219
00003d1f l     O .text	00000055 __c.4146
00003d12 l     O .text	0000000d __c.4148
00003d05 l     O .text	0000000d __c.4156
00003cf8 l     O .text	0000000d __c.4161
00003ceb l     O .text	0000000d __c.4166
00003c0c l     O .text	00000038 __c.4231
00003be3 l     O .text	00000029 __c.4233
00003b92 l     O .text	00000051 __c.4236
00003b53 l     O .text	0000003f __c.4249
00003b1d l     O .text	00000036 __c.4251
00003aea l     O .text	00000033 __c.4253
00003ab7 l     O .text	00000033 __c.4255
00003aa0 l     O .text	00000017 __c.4265
00003a60 l     O .text	00000040 __c.4267
00003a14 l     O .text	0000004c __c.4270
000039e4 l     O .text	00000030 __c.4272
000039e2 l     O .text	00000002 __c.4275
000039d6 l     O .text	0000000c __c.4277
000039c9 l     O .text	0000000d __c.4279
000039b8 l     O .text	00000011 __c.4281
000039a5 l     O .text	00000013 __c.4283
00003992 l     O .text	00000013 __c.4285
0000397f l     O .text	00000013 __c.4287
00003958 l     O .text	00000027 __c.4294
00003933 l     O .text	00000025 __c.4296
000038fa l     O .text	00000039 __c.4310
000038d6 l     O .text	00000024 __c.4327
000038c8 l     O .text	0000000e __c.4344
000038ba l     O .text	0000000e __c.4349
000038ac l     O .text	0000000e __c.4351
00003879 l     O .text	00000033 __c.4365
0000384b l     O .text	0000002e __c.4367
0000381c l     O .text	0000002f __c.4369
000037ec l     O .text	00000030 __c.4371
000037bd l     O .text	0000002f __c.4373
0000378d l     O .text	00000030 __c.4375
00003766 l     O .text	00000027 __c.4377
0000374f l     O .text	00000017 __c.4379
00003738 l     O .text	00000017 __c.4381
0000371f l     O .text	00000019 __c.4383
00003706 l     O .text	00000019 __c.4385
000036f8 l     O .text	0000000e __c.4387
000036e0 l     O .text	00000018 __c.4411
000036c9 l     O .text	00000017 __c.4413
00003691 l     O .text	00000038 __c.4415
00003681 l     O .text	00000010 __c.4417
000035c0 l     O .text	0000000e __c.4428
000035ce l     O .text	00000028 __c.4426
0000364c l     O .text	00000035 __c.4421
000035f6 l     O .text	00000056 __c.4423
00003598 l     O .text	00000028 __c.4436
0000358a l     O .text	0000000e __c.4439
00003572 l     O .text	00000018 __c.4456
0000355f l     O .text	00000013 __c.4458
00003551 l     O .text	0000000e __c.4460
00003543 l     O .text	0000000e __c.4465
00003523 l     O .text	00000020 __c.4482
00003508 l     O .text	0000001b __c.4484
000034ec l     O .text	0000001c __c.4486
000034bd l     O .text	0000002f __c.4488
000034aa l     O .text	00000013 __c.4490
0000347a l     O .text	00000030 __c.4492
0000346c l     O .text	0000000e __c.4494
0000345e l     O .text	0000000e __c.4499
00003439 l     O .text	00000025 __c.4507
00003419 l     O .text	00000020 __c.4509
000033fa l     O .text	0000001f __c.4511
000033d2 l     O .text	00000028 __c.4513
000033c3 l     O .text	0000000f __c.4515
0000339b l     O .text	00000028 __c.4524
00003374 l     O .text	00000027 __c.4526
0000334d l     O .text	00000027 __c.4528
00003317 l     O .text	00000036 __c.4530
000032ee l     O .text	00000029 __c.4532
000032d7 l     O .text	00000017 __c.4534
000032ae l     O .text	00000029 __c.4547
00003289 l     O .text	00000025 __c.4549
00003266 l     O .text	00000023 __c.4551
00003246 l     O .text	00000020 __c.4553
00003226 l     O .text	00000020 __c.4555
00004477 l     O .text	00000021 __c.3860
0000445a l     O .text	0000001d __c.3862
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000307 l     O .text	0000000d __c.3604
000002f4 l     O .text	00000013 __c.3606
000002e1 l     O .text	00000013 __c.3608
000002c3 l     O .text	0000001e __c.3610
000002a5 l     O .text	0000001e __c.3612
00000287 l     O .text	0000001e __c.3614
00000269 l     O .text	0000001e __c.3616
00000255 l     O .text	00000014 __c.3618
0000023a l     O .text	0000001b __c.3633
00000222 l     O .text	00000018 __c.3639
000001fd l     O .text	00000025 __c.3648
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801759 l     O .bss	00000004 SPI0_Speed_value
00000314 l     O .text	0000001d __c.3602
00801757 l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004de l     O .text	0000001a __c.3601
000004c2 l     O .text	0000001c __c.3609
000004a9 l     O .text	00000019 __c.3611
00000498 l     O .text	00000011 __c.3619
00000488 l     O .text	00000010 __c.3625
00000474 l     O .text	00000014 __c.3631
0000045f l     O .text	00000015 __c.3633
00000441 l     O .text	0000001e __c.3643
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000068a0 l     F .text	0000007c clock_settime.part.2
000005cd l     O .text	0000001d __c.3599
000005c3 l     O .text	0000000a __c.3619
0080178c l     O .bss	00000020 _ts_to_str
00801784 l     O .bss	00000008 __clock_elapsed
000005b5 l     O .text	0000000e __c.3633
000005aa l     O .text	0000000b __c.3635
008017ac l     O .bss	00000002 timers_configured
008017ae l     O .bss	00000002 timers_enabled
00000596 l     O .text	00000014 __c.3655
00000583 l     O .text	00000013 __c.3657
00000577 l     O .text	0000000c __c.3659
0000055f l     O .text	00000018 __c.3661
0000054e l     O .text	00000011 __c.3663
0000053e l     O .text	00000010 __c.3665
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000eee l     O .text	0000001d __c.3744
00801966 l     O .bss	00000001 _ppr_reg
00000edb l     O .text	00000013 __c.3762
00000eca l     O .text	00000011 __c.3776
00000ebd l     O .text	0000000d __c.3785
00000eaf l     O .text	0000000e __c.3794
00000ea2 l     O .text	0000000d __c.3801
00000e94 l     O .text	0000000e __c.3807
00000000 l    df *ABS*	00000000 _clear_bss.o
00004bc2 l       .text	00000000 .do_clear_bss_start
00004bc0 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ffsystem.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 vector.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001cc34 l       .text	00000000 __udivmodqi4_ep
0001cc2c l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001cc54 l       .text	00000000 __udivmodhi4_ep
0001cc46 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001cc7c l       .text	00000000 __divmodhi4_neg1
0001cc84 l       .text	00000000 __divmodhi4_neg2
0001cc8a l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001ccb2 l       .text	00000000 __udivmodsi4_ep
0001cc98 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001cce8 l       .text	00000000 __divmodsi4_neg2
0001ccf6 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001d566 l       .text	00000000 __stop_program
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 --library=m
00015c12 g     F .text	0000004a SS80_Selected_Device_Clear
0001cd1a g       .text	00000002 .hidden __usmulhisi3
0000ec66 g     F .text	0000000c putchar
000118ca g     F .text	00000024 SS80_is_MTA
0000673c g     F .text	000000ea clock_gettime
00005df6 g     F .text	000000d4 i2c_display_task_errors
0000618e g     F .text	00000084 rtc_init
00011c16 g     F .text	000000a8 GPIB_COMMANDS
00004bd0  w      .text	00000000 __vector_22
00010d1e g     F .text	00000054 gpib_unread
00004db4 g     F .text	0000000a set_error
00014df6 g     F .text	00000034 SS80_test_extended_status
00006242  w    F .text	00000016 strcpy
000079f0 g     F .text	00000008 asctime
00006cc8 g     F .text	00000020 tm_mon_to_ascii
00801a88 g     O .bss	00000235 Fatfs
0000ed9a g     F .text	0000004a mctime
00004bd0  w      .text	00000000 __vector_28
0000dd16 g     F .text	0000001a mmc_fast
00005fce g     F .text	0000008c rtc_write
000059ee g     F .text	00000058 i2c_fn
00015d04 g     F .text	00000218 SS80_Transparent_State
00801967 g     O .bss	00000001 gpib_unread_f
00004c9e g     F .text	00000004 spi_RX_buffer
0001235c g     F .text	00000042 gpib_help
00015a6e g     F .text	0000009a SS80_Report
0000f8ca g     F .text	0000006a free_file_descriptor
0000ea5a g     F .text	00000096 fatfs_putc
0001cdfa g       .text	0000001e .hidden __umulhisi3
008001b8 g     O .data	0000000c cfgfile
00004bd0  w      .text	00000000 __vector_1
00011d84 g     F .text	00000184 GPIB
0000e5ea g     F .text	0000002a fatfs_help
00006992 g     F .text	00000016 delete_all_timers
000055d0 g     F .text	0000000c SPI0_TXRX_Byte
0001d2c8 g       .text	00000000 __fp_mpack_finite
0000f410 g     F .text	00000086 utime
00801a58 g     O .bss	00000008 __clock
0001c162 g     F .text	0000007c lcd_time
00012dd0 g     F .text	00000052 find_device
0000781e g     F .text	00000128 set_dst
0000f12e g     F .text	00000096 fdevopen
000118ee g     F .text	00000024 SS80_is_MSA
00004c3a g     F .text	00000060 spi_end
0001884e g     F .text	000000d6 lif_dir2str
0001d24e g     F .text	00000040 round
0001315e g     F .text	00000172 alloc_device
00004fb0 g     F .text	0000006a safefree
000137d4 g     F .text	00000024 mount_usage
00011f08 g     F .text	00000130 GPIB_TALK
00004bd0  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001ceea g     F .text	00000004 __divsf3
0001cd9e g       .text	00000036 .hidden __epilogue_restores__
00005384 g     F .text	00000018 uart_rx_count
00014740 g     F .text	0000003a lif_dir_count
00801ce7 g     O .bss	00000009 gpib_timer
00012038 g     F .text	000000f6 GPIB_SECONDARY_ADDRESS
00000000 g       *ABS*	00000000 __TEXT_REGION_ORIGIN__
00018bd0 g     F .text	0000000e lif_vol_clear
00006826 g     F .text	0000007a clock_task
000110ca g     F .text	00000284 gpib_trace_display
0001bb54 g     F .text	000000fe lif_rename_file
00013b50 g     F .text	00000804 Read_Config
00012d50 g     F .text	00000026 find_type
0001d10c g     F .text	00000022 __fp_round
00012d76 g     F .text	00000020 count_drive_types
00006ce8 g     F .text	00000042 Days_Per_Month
00006b82 g     F .text	00000028 execute_timers
0000ffe2 g     F .text	00000176 ls_info
00004bd0  w      .text	00000000 __vector_34
0000dcd0 g     F .text	0000001a mmc_spi_begin
0001cfba g     F .text	0000000a __fixsfsi
00006a9c g     F .text	0000000c clock_elapsed_begin
000062aa  w    F .text	00000032 reverse
0000d624 g     F .text	00000006 mmc_disk_status
0001d12e g     F .text	00000044 __fp_split3
00010b08 g     F .text	00000014 gpib_timeout_set
0001cc3e g       .text	00000028 .hidden __udivmodhi4
00004c36 g     F .text	00000004 chip_select_init
00006a2a g     F .text	00000072 ts_to_str
00008f00 g     F .text	0000000c atol
00007d72 g     F .text	000000aa p_ntoa
0000dfa6 g     F .text	000000d8 tm_to_fat
00004df6 g     F .text	00000122 PrintFree
00016fd0 g     F .text	000000b8 amigo_cmd_dsj
0000d39e g     F .text	00000024 wait_ready
000001c2 g       .text	00000000 __trampolines_start
00013362 g     F .text	00000112 hpdir_set_device
0001d096 g     F .text	00000048 __fp_cmp
000116a6 g     F .text	00000166 gpib_write_str
008002f0 g     O .data	00000005 _backlight
00801cc5 g     O .bss	00000002 errno
00015ce2 g     F .text	00000022 SS80_Cancel
0001d568 g       .text	00000000 _etext
0000d7d4 g     F .text	00000488 mmc_disk_ioctl
00006432 g     F .text	00000028 MATCH
00800125 g     O .data	00000010 __WDay
00019694 g     F .text	000000b8 lif_writedirindex
0000548e g     F .text	000000ce SPI0_Speed
00005928 g     F .text	000000c6 i2c_task_run
00006aa8 g     F .text	0000007c clock_elapsed_end
0000d218 g     F .text	000000c4 ff_wtoupper
0001ce18 g     F .text	0000000a __subsf3
0001b716 g     F .text	00000312 lif_add_lif_file
00801cf0 g     O .bss	00000002 lastcmd
00004bd0  w      .text	00000000 __vector_24
00013360 g     F .text	00000002 set_Config_Defaults
00005f60 g     F .text	00000062 i2c_rtc_read
0000641e g     F .text	00000014 skipspaces
0000be2c g     F .text	0000026c f_getcwd
00004bd0  w      .text	00000000 __vector_12
00010744 g     F .text	00000032 gpib_timer_init
000107a6 g     F .text	0000002c ppr_init
0000ec72 g     F .text	00000068 fgets
0000539c g     F .text	0000004c uart_get_tail
00004f6c g     F .text	00000044 safemalloc
0001ba28 g     F .text	0000012c lif_del_file
00007be0 g     F .text	00000032 _putc_buffer_fn
0001a94e g     F .text	00000172 lif_ascii_string_to_e010
0000dd9c g     F .text	0000001a mmc_ins_status
0080030a g     O .data	00000002 _cmd2
00018b66 g     F .text	0000004e lif_lifbcd2timestr
00801cf2 g     O .bss	00000200 gpib_iobuff
00018024 g     F .text	00000028 V2B_MSB
00018a06 g     F .text	00000084 lif_time2lifbcd
00012dc8 g     F .text	00000008 find_free
000058c6 g     F .text	00000024 i2c_done
00019140 g     F .text	0000036a lif_check_dir
00004bd0 g       .text	00000000 __bad_interrupt
00005074 g     F .text	00000090 delayms
00014542 g     F .text	00000102 drives_tests
00015bde g     F .text	00000018 SS80_Channel_Independent_Clear
0000ff08 g     F .text	000000da cat
00008d70 g     F .text	00000028 snprintf_P
000170d8 g     F .text	00000132 amigo_todo_op
00015c5c g     F .text	00000086 SS80_Amigo_Clear
0000f0a4 g     F .text	0000008a perror
0001c3ea g     F .text	00000024 gpib_user_task
0001ebbe g       *ABS*	00000000 __data_load_end
0000d2e8 g     F .text	0000000c disk_initialize
008019a5 g     O .bss	0000000d plot
00010ab6 g     F .text	00000006 gpib_timer_elapsed_end
000181a2 g     F .text	0000002a lif_free
0000ed0a g     F .text	0000002e puts
0000fcdc g     F .text	000001bc copy
00006c8e g     F .text	00000010 clock_settime
000181cc g     F .text	0000003e lif_stralloc
00006212  w    F .text	00000016 islower
00004dc8 g     F .text	0000002e freeRam
000166ec g     F .text	0000001c amigo_request_logical_address
00005a46 g     F .text	0000001c i2c_send_stop
0000cd0c g     F .text	0000022a f_rename
00004bd0  w      .text	00000000 __vector_6
00010a98 g     F .text	0000001e gpib_timer_reset
00019990 g     F .text	000005d4 lif_create_volume
0001d314 g     F .text	00000130 malloc
00004cc2 g     F .text	00000040 spi_init
0000fc9a g     F .text	00000042 posix_help
00004bd0  w      .text	00000000 __vector_31
00010808 g     F .text	00000046 dbf_open
0001c0b4 g     F .text	000000ae copyright
0000bd76 g     F .text	000000b6 f_chdir
0001cee2 g       .text	00000000 __lesf2
00004c06 g     F .text	00000030 chip_deselect
00017fae g     F .text	00000076 PRINTER_COMMANDS
00006b24 g     F .text	00000036 clock_clear
00007a1a g     F .text	000000ee initialize_clock
0000dd9a g     F .text	00000002 mmc_power_off
00014354 g     F .text	00000044 display_mounts
0000dfa0 g     F .text	00000006 mmc_wp_status
0000e954 g     F .text	00000106 fatfs_getc
00801ef2 g     O .bss	00000001 listening_last
0000d2dc g     F .text	0000000c disk_status
00800102 g     O .data	00000002 __malloc_heap_start
000001c2 g       .text	00000000 __trampolines_end
00006c64 g     F .text	0000002a clock_getres
0080177e g     O .bss	00000004 i2c_task
0001aac0 g     F .text	00000210 lif_add_ascii_file_as_e010_wrapper
0000843e  w    F .text	00000038 strlen_X
000189f0 g     F .text	00000016 lif_BCD2BIN
0001820a g     F .text	00000054 lif_open
00007b08 g     F .text	000000d8 display_clock
000107d2 g     F .text	0000001a ppr_bit_set
00004bd0  w      .text	00000000 __vector_3
0001079e g     F .text	00000008 ppr_reg
0001155a g     F .text	00000008 gpib_decode
00005104 g     F .text	00000022 uart_rx_flush
0000efb2 g     F .text	00000004 rmdir
0000691c g     F .text	00000076 set_timers
00801a7c g     O .bss	0000000c dst
0000f028 g     F .text	0000007c readdir
0001d172 g     F .text	0000000e __fp_zero
0000c6f0 g     F .text	0000002a f_closedir
0001c22c g     F .text	00000148 lcd_setup
0000d334 g     F .text	00000014 disk_ioctl
0001bd60 g     F .text	00000340 lif_tests
00008302 g     F .text	00000084 _puts_pad
00004ca2 g     F .text	00000020 spi_TX
008019f4 g     O .bss	00000001 debug_input
00018bde g     F .text	0000038c lif_dump_vol
0001212e g     F .text	0000004c listen_cleanup
00018a8a g     F .text	000000a0 lif_lifbcd2time
00018924 g     F .text	000000be lif_str2dir
000138b4 g     F .text	000000f2 display_mount
0000565e g     F .text	0000002c SPI0_TXRX
0080030c g     O .data	00000015 _line1
0001cee2 g       .text	00000000 __nesf2
00013474 g     F .text	00000040 hpdir_set_parameters
00005eca g     F .text	0000000e BINtoBCD
0000f4f6 g     F .text	000000d0 lseek
00004bd0  w      .text	00000000 __vector_23
0001d568 g       *ABS*	00000000 __data_load_start
00801832 g     O .bss	00000004 _mmc_clock
00004b92 g       .text	00000000 __dtors_end
000137f8 g     F .text	0000002c index_address
000119c6 g     F .text	00000012 gpib_init_devices
0000634e  w    F .text	00000050 strncasecmp
00802038 g       .bss	00000000 __bss_end
0001847e g     F .text	00000056 lif_chars
0001cd26 g       .text	00000014 .hidden __muluhisi3
000125e2 g     F .text	0000006a print_tok_str
00004bd0  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
000134b4 g     F .text	000002f6 format_drives
00004bd0  w      .text	00000000 __vector_25
00802034 g     O .bss	00000002 __brkval
00006ee6 g     F .text	0000002a gmtime_r
0000ee3e g     F .text	00000052 chmod
00006baa g     F .text	000000ba init_timers
0001195a g     F .text	00000024 AMIGO_is_MSA
000194f6 g     F .text	000000d0 lif_checkdirindex
0000c9de g     F .text	0000014e f_unlink
00010d7e g     F .text	00000020 gpib_control_pin_read
00010936 g     F .text	000000ae dbf_open_read
00005eea g     F .text	00000076 i2c_rtc_write
0000dd98 g     F .text	00000002 mmc_power_on
00008e36 g     F .text	000000bc strtol
00010a92 g     F .text	00000006 gpib_timer_elapsed_begin
00005126 g     F .text	00000134 uart_ubr
0000d188 g     F .text	00000066 ff_uni2oem
000056e0 g     F .text	0000009e i2c_check_op
0001a898 g     F .text	000000b6 lif_e010_pad_sector
000180f4 g     F .text	00000042 lif_help
0000650a g     F .text	000000b8 split_args
0000ef36 g     F .text	0000003e rename
000108fc g     F .text	0000003a dbf_close
00017c08 g     F .text	000000be receive_plot_flush
0001cf04 g     F .text	000000dc __divsf3x
00004bd0  w      .text	00000000 __vector_11
00801ef3 g     O .bss	00000001 spoll
0000ede4 g     F .text	0000001c basename
00014e2a g     F .text	000000c6 SS80_display_extended_status
00017abc g     F .text	00000130 AMIGO_COMMANDS
000185bc g     F .text	0000007a lif_fixname
0000d6ec g     F .text	000000e8 mmc_disk_write
00004b92  w      .text	00000000 __init
0001d2e0 g     F .text	00000034 calloc
0001b4a6 g     F .text	00000270 lif_extract_lif_as_lif
000066c8 g     F .text	00000026 install_timers_isr
00010776 g     F .text	00000014 reverse_8bits
00014ff2 g     F .text	000000e0 SS80_describe
00005420 g     F .text	0000002c uart_getchar
00007e1c g     F .text	0000020e p_ftoa
0000f7b6 g     F .text	000000dc write
000184d4 g     F .text	00000074 lif_B2S
0001d180 g       .text	00000000 __gtsf2
0000fc5a g     F .text	00000040 fprintf
00011026 g     F .text	000000a4 gpib_decode_header
0001134e g     F .text	0000020c gpib_read_byte
000124e6 g     F .text	0000003e tok_index
00015bf6 g     F .text	0000001c SS80_Universal_Device_Clear
0001acd0 g     F .text	00000278 lif_add_ascii_file_as_e010
000066ee g     F .text	0000004e __vector_13
00006284  w    F .text	00000026 strcat
008019f7 g     O .bss	00000057 uarts
00004dbe g     F .text	0000000a clear_error
0001d1a4 g       .text	00000000 __mulsf3_pse
00004bd0  w      .text	00000000 __vector_17
00004d92 g     F .text	00000022 spi_TXRX
0001d0ea g     F .text	00000006 __fp_nan
00012e22 g     F .text	0000018a set_active_device
00004bd0  w      .text	00000000 __vector_19
00006648 g     F .text	0000007c get_value
00005636 g     F .text	00000028 SPI0_TX
00018548 g     F .text	0000003a lif_checkname
0000ee00 g     F .text	0000003e chdir
00004bd0  w      .text	00000000 __vector_7
00016d4c g     F .text	000000b6 amigo_buffered_read_execute
0000ddfe g     F .text	000001a2 mmc_init
0000e614 g     F .text	000001a6 fatfs_ls
0001d0de g     F .text	0000000c __fp_inf
00008d98 g     F .text	00000028 sprintf_P
0001cde2 g       .text	00000018 .hidden __cmpdi2_s8
0000f1c4 g     F .text	00000088 fat_time_to_unix
0000f5c6 g     F .text	0000004e fseek
00801cbd g     O .bss	00000004 AccSize
00018bb4 g     F .text	0000000c lif_image_clear
0000dd42 g     F .text	0000000e mmc_set_ms_timeout
000066c4 g     F .text	00000004 enable_system_task
0000dd36 g     F .text	00000006 mmc_spi_RX_buffer
000058ea g     F .text	00000024 i2c_task_done
00007006 g     F .text	00000058 is_dst
0000525a g     F .text	0000008e uart_init
00014b2e g     F .text	00000078 SS80ControllerPack
00013b3e g     F .text	00000012 verify_devices
00801efc g     O .bss	00000084 Devices
00004bb8 g       .text	00000010 .hidden __do_clear_bss
0000555c g     F .text	00000074 SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
0001a224 g     F .text	00000200 lif_open_volume
0000fe98 g     F .text	00000070 testpage
00017ebc g     F .text	000000f2 printer_buffer
0000bd44 g     F .text	00000032 f_close
0001d1a0 g     F .text	000000d2 __mulsf3x
00017bec g     F .text	0000001c printer_init
0000dcf2 g     F .text	0000001a mmc_slow
000063de g     F .text	00000020 sep
00800100 g     O .data	00000002 __malloc_heap_end
0001078a g     F .text	00000014 ppr_set
00016b02 g     F .text	00000130 amigo_format
0000f614 g     F .text	000000da read
0001974c g     F .text	00000030 lif_writedirEOF
0000dcea g     F .text	00000008 mmc_spi_end
0001d020 g       .text	00000000 __floatsisf
00017088 g     F .text	00000050 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
0001977c g     F .text	00000214 lif_updatefree
0000568a g     F .text	0000002a SPI0_RX
0000b680 g     F .text	00000296 f_read
008019f5 g     O .bss	00000002 rtc_ok
00010bc8 g     F .text	00000024 gpib_tx_init
000118a6 g     F .text	00000024 SS80_is_MLA
000052e8 g     F .text	00000048 uart_rx_interrupt
0000544c g     F .text	00000006 uart0_getchar
00004bd0  w      .text	00000000 __vector_27
00010cb2 g     F .text	0000006c gpib_disable_PPR
0000e0ce g     F .text	000000e0 fatfs_scan_files
00004bd4 g     F .text	00000032 chip_select
00801756 g       .data	00000000 __data_end
000108c2 g     F .text	0000003a dbf_lseek
00016308 g     F .text	000001d4 SS80_COMMANDS
0000639e g     F .text	00000040 stralloc
0000c71a g     F .text	00000088 f_readdir
00801ef4 g     O .bss	00000002 current
00015124 g     F .text	0000004e SS80_Check_Volume
0000dc98 g     F .text	00000038 mmc_install_timer
00007d3c g     F .text	00000036 pch
00008dfa g     F .text	0000003c atodigit
0001cc08 g       .text	0000001e .hidden __mulsi3
00006258  w    F .text	0000002c strncpy
0000ef74 g     F .text	0000003e unlink
0000f78c g     F .text	0000002a sync
00015b46 g     F .text	00000098 SS80_init
0001cee2 g       .text	00000000 __eqsf2
0000f9a6 g     F .text	0000008a new_file_descriptor
00006310  w    F .text	0000003e strcasecmp
0001cd46 g       .text	00000020 .hidden __negdi2
000180b4 g     F .text	00000040 B2V_LSB
0000e4e4 g     F .text	00000106 fatfs_filinfo_list
0000cf36 g     F .text	0000009a f_chmod
00801a60 g     O .bss	00000018 timer_irq
0000590e g     F .text	0000001a i2c_send_start
00012d96 g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001cc66 g       .text	00000026 .hidden __divmodhi4
00014ba6 g     F .text	00000198 SS80UnitPack
000109e4 g     F .text	000000ae dbf_open_write
00004bd0  w      .text	00000000 __vector_5
0000dc5c g     F .text	0000003c mmc_disk_timerproc
00801a4e g     O .bss	0000000a i2c
00007712 g     F .text	0000010c find_dst
00800182 g     O .data	00000034 gpib_tokens
00004bd0  w      .text	00000000 __vector_33
00012524 g     F .text	0000003e tok_name
00011562 g     F .text	00000144 gpib_read_str
0001a424 g     F .text	000003aa lif_dir
00016e02 g     F .text	000001ce amigo_buffered_write
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00014ef0 g     F .text	00000102 SS80_send_status
0001cd08 g       .text	00000012 .hidden __tablejump2__
000119d8 g     F .text	00000124 gpib_trace_task
00800135 g     O .data	00000001 Stat
0000f380 g     F .text	00000090 unix_time_to_fat
00004b92 g       .text	00000000 __ctors_start
0000d4da g     F .text	0000014a mmc_disk_initialize
00801a78 g     O .bss	00000004 __tzone
0000e07e g     F .text	00000026 get_fattime
00800321 g     O .data	00000002 _cmd1
0000f6ee g     F .text	00000038 fread
00018bc0 g     F .text	00000010 lif_dir_clear
0001691e g     F .text	00000052 amigo_increment
0001217a g     F .text	00000122 GPIB_LISTEN
008001b6 g     O .data	00000002 debuglevel
00801836 g     O .bss	00000002 _mmc_timeout
00004b9e g       .text	0000001a .hidden __do_copy_data
0080027c g     O .data	00000074 faults
0000fb6e g     F .text	000000d4 posix_fopen_modes_to_open
00018076 g     F .text	0000003e B2V_MSB
00801782 g     O .bss	00000002 i2c_callback
000189e2 g     F .text	0000000e lif_BIN2BCD
0001d28e g     F .text	00000036 __fp_mintl
0001cee2 g     F .text	00000008 __cmpsf2
0001cdd4 g       .text	0000000e .hidden __xload_1
00010b8c g     F .text	0000003c gpib_rx_init
00006f68 g     F .text	0000005c gettimeofday
0001d0fe g     F .text	0000000e __fp_pscB
0001d13e g       .text	00000000 __fp_splitA
00018b2a g     F .text	0000003c lif_ctime_gmt
00018312 g     F .text	000000a6 lif_read
0000fc42 g     F .text	00000018 fopen
00801756 g       .bss	00000000 __bss_start
00007946 g     F .text	000000aa asctime_r
000070f6 g     F .text	00000008 localtime
0001d556 g     F .text	0000000e memset
0001720a g     F .text	00000108 amigo_todo
00013300 g     F .text	00000032 push_state
000076d0 g     F .text	00000042 setdate
0001c89a g     F .text	0000036e main
008002f5 g     O .data	00000015 _line2
0001235a g     F .text	00000002 talk_cleanup
00006100 g     F .text	0000008e rtc_run
000139a6 g     F .text	00000198 verify_device
0000f4c0 g     F .text	00000036 ftell
00801ef6 g     O .bss	00000001 talking
0000bc44 g     F .text	00000100 f_sync
0080196a g     O .bss	00000002 AMIGOs
0001cee2 g       .text	00000000 __ltsf2
0000548a g     F .text	00000004 uart_keyhit
000132d0 g     F .text	00000030 init_Devices
00004bd0  w      .text	00000000 __vector_4
000194aa g     F .text	0000004c lif_close_volume
0000dd0c g     F .text	0000000a mmc_spi_init
00800100 g       *ABS*	00000000 __DATA_REGION_ORIGIN__
000195c6 g     F .text	000000ce lif_readdirindex
0001733a g     F .text	000005cc Amigo_Command
0000f996 g     F .text	00000010 fclose
0000ec5a g     F .text	0000000c getchar
0001686c g     F .text	000000b2 amigo_send_status
00016670 g     F .text	0000007c amigo_init
00800136 g     O .data	0000004a sys_errlist
00006fc4 g     F .text	00000042 time
0000efec g     F .text	0000003c opendir
0001d2c4 g     F .text	0000001c __fp_mpack
00012fac g     F .text	000000f0 SS80_Set_Defaults
00005fc2 g     F .text	0000000c i2c_rtc_init
00006f44 g     F .text	00000024 settimezone
0000b298 g     F .text	00000078 f_mount
0000e1cc g     F .text	00000318 fatfs_status
00011936 g     F .text	00000024 AMIGO_is_MTA
0001ccf8 g       .text	00000010 .hidden __negsi2
0000c60e g     F .text	000000e2 f_opendir
000137aa g     F .text	0000002a drives_help
00015b08 g     F .text	0000003e Clear_Common
0001c40e g     F .text	0000005c help
00010c46 g     F .text	0000006c gpib_enable_PPR
00014398 g     F .text	000001aa mount
000169c6 g     F .text	0000013c amigo_verify
0001d188 g     F .text	00000004 __mulsf3
000065c2 g     F .text	00000086 get_token
00016708 g     F .text	000000ba amigo_request_status
00012698 g     F .text	000001a8 display_Addresses
0000f496 g     F .text	0000002a fileno_to_fatfs
0000d1ee g     F .text	0000002a ff_oem2uni
000062f6  w    F .text	0000001a strcmp
00010bec g     F .text	0000005a gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
00010abc g     F .text	0000004c gpib_timer_task
0000501a g     F .text	0000005a delayus
00013332 g     F .text	0000002e pop_state
00004bd0  w      .text	00000000 __vector_9
0000ee90 g     F .text	0000004a getcwd
00004bd0  w      .text	00000000 __vector_2
0000645a g     F .text	00000028 MATCHI
00017312 g     F .text	00000028 amigo_check_unit
0001ce3c g     F .text	000000cc __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000c098 g     F .text	00000576 f_lseek
0000eaf0 g     F .text	000000ac fgetc
00801ef7 g     O .bss	00000001 secondary
00008d24 g     F .text	0000004c vsnprintf_P
000079f8 g     F .text	00000022 ctime_gm
0001d180 g     F .text	00000008 __gesf2
00014644 g     F .text	000000fc hpdir_init
000167c2 g     F .text	000000aa amigo_send_logical_address
000150d2 g     F .text	00000052 SS80_Check_Unit
0001180c g     F .text	0000009a gpib_file_init
0080010a g     O .data	00000001 _cs_pin
00013824 g     F .text	00000090 umount
00801968 g     O .bss	00000002 gpib_log_fp
00004bd0  w      .text	00000000 __vector_21
00004bd0  w      .text	00000000 __vector_15
0000802a g     F .text	000002d8 p_etoa
0001264c g     F .text	0000004c print_tok
0080175e g     O .bss	00000020 i2c_task_op
00015f90 g     F .text	000002c4 SS80_locate_and_read
000057fc g     F .text	000000ca i2c_init
0001239e g     F .text	00000148 gpib_tests
0001309c g     F .text	000000c2 free_device
00801cc1 g     O .bss	00000002 AccDirs
0000d182 g     F .text	00000006 ff_memfree
00801972 g     O .bss	00000002 PRINTERp
0001d0f0 g     F .text	0000000e __fp_pscA
0001cc26 g       .text	00000018 .hidden __udivmodqi4
00801ef8 g     O .bss	00000001 listening
00011afc g     F .text	0000011a gpib_error_test
0080196e g     O .bss	00000002 SS80s
0000c7a2 g     F .text	0000007c f_stat
00010b1c g     F .text	00000070 gpib_bus_init
000056b4 g     F .text	0000002c i2c_timer
0000eb9c g     F .text	000000a4 fputc
00004bd0  w      .text	00000000 __vector_29
00005476 g     F .text	00000014 uart0_putchar
00008dc0 g     F .text	0000003a printf_P
0001cd3e g       .text	00000008 .hidden __mulohisi3
00016254 g     F .text	000000b4 SS80_Execute_State
0000748e g     F .text	00000008 timegm
00015172 g     F .text	000004ee SS80_Command_State
00006f26 g     F .text	0000001e gettimezone
00802038 g       .comment	00000000 __heap_start
000063fe g     F .text	00000020 trim_tail
00010db6 g     F .text	00000270 gpib_write_byte
00017cc6 g     F .text	000000b0 printer_close
000057a8 g     F .text	00000054 i2c_task_op_add
00018f6a g     F .text	000001d6 lif_check_volume
0000705e g     F .text	00000098 localtime_r
008001c4 g     O .data	000000b8 tokens
00801cc3 g     O .bss	00000002 AccFiles
0000605a g     F .text	000000a6 rtc_read
00004b92 g       .text	00000000 __dtors_start
00004b92 g       .text	00000000 __ctors_end
0001ccd0 g       .text	00000028 .hidden __divmodsi4
00010d72 g     F .text	0000000c gpib_bus_read
0000f24c g     F .text	00000134 stat
000040ff  w      *ABS*	00000000 __stack
0000f726 g     F .text	00000066 syncfs
00018136 g     F .text	0000006c lif_calloc
0000f892 g     F .text	00000038 fwrite
00011cbe g     F .text	000000c6 Send_Identify
00801830 g     O .bss	00000002 _mmc_pre
0000dd3c g     F .text	00000006 mmc_spi_TXRX
00801756 g       .data	00000000 _edata
0000cfd0 g     F .text	000000b2 f_utime
00012840 g     F .text	00000510 display_Config
0001cd1c g       .text	0000000a .hidden __usmulhisi3_tail
00802038 g       .comment	00000000 _end
000182a8 g     F .text	0000006a lif_seek_msg
00004d02 g     F .text	00000090 spi_begin
00017d76 g     F .text	00000146 printer_open
0000b916 g     F .text	0000032e f_write
00004bd0  w      .text	00000000 __vector_8
0001a7ce g     F .text	000000ca lif_find_file
00005b34 g     F .text	000001d4 __vector_26
00007c2a g     F .text	00000112 bin2num
0001cf08 g       .text	00000000 __divsf3_pse
00800106 g     O .data	00000004 _spi_clock
00008386 g     F .text	000000b8 _puts_pad_X
0080196c g     O .bss	00000002 AMIGOp
0000dd30 g     F .text	00000006 mmc_spi_TX_buffer
0000b310 g     F .text	00000370 f_open
00018636 g     F .text	0000011c lif_vol2str
0000d314 g     F .text	00000020 disk_write
00010158 g     F .text	00000210 ls
0001d564  w      .text	00000000 .hidden exit
0001229c g     F .text	000000be gpib_task
00005a62 g     F .text	000000be i2c_task_next_op
0001d01c g     F .text	0000007a __floatunsisf
00016c32 g     F .text	0000011a amigo_buffered_read_command
000069a8 g     F .text	00000082 subtract_timespec
0001cc66 g       .text	00000000 .hidden _div
00005d08 g     F .text	000000ee i2c_print_error
00017906 g     F .text	000001b6 Amigo_Execute
000062dc  w    F .text	0000001a strupper
00802036 g     O .bss	00000002 __flp
00012562 g     F .text	00000080 print_tok_val
0001cc8c g       .text	00000044 .hidden __udivmodsi4
000119a2 g     F .text	00000024 PRINTER_is_MTA
00019f64 g     F .text	000002c0 lif_newdir
0001477a g     F .text	000003b4 hpdir_find_drive
0001197e g     F .text	00000024 PRINTER_is_MLA
00008ef2 g     F .text	0000000e atoi
00006d2a g     F .text	000001bc time_to_tm
0000e0a4 g     F .text	0000002a put_rc
0000ed38 g     F .text	00000038 fileno
0080010b g     O .data	0000001a __Month
000055dc g     F .text	0000005a SPI0_Init
0000cb2c g     F .text	000001e0 f_mkdir
0001cfc4 g     F .text	00000058 __fixunssfsi
00801f80 g     O .bss	000000b4 hpdir
00007496 g     F .text	0000023a setdate_r
00006482 g     F .text	00000054 MATCHARGS
00004c9a g     F .text	00000004 spi_TX_buffer
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001d564 g       .text	00000000 .hidden _exit
000183b8 g     F .text	000000c6 lif_write
00018582 g     F .text	0000003a lif_S2B
0001c816 g     F .text	00000014 user_task
00801ef9 g     O .bss	00000001 talking_last
0001084e g     F .text	0000003a dbf_read
00005ed8 g     F .text	00000012 BCDtoBIN
0001c374 g     F .text	00000076 i2c_lcd_task
000070fe g     F .text	00000390 normalize
00006f10 g     F .text	00000016 gmtime
00004bd0  w      .text	00000000 __vector_14
0000e82c g     F .text	00000128 fatfs_tests
0001bc52 g     F .text	0000010e lif_create_image
0000d2f4 g     F .text	00000020 disk_read
0000fa30 g     F .text	0000013e open
00006228  w    F .text	0000001a toupper
0001574a g     F .text	00000324 SS80_locate_and_write
0001c0a0 g     F .text	00000014 lcd_task
00008476 g     F .text	000008ae _printf_fn
00004bd0  w      .text	00000000 __vector_10
000107ec g     F .text	0000001c ppr_bit_clr
00801cc7 g     O .bss	00000020 __iob
0000d082 g     F .text	000000fa f_getlabel
00018752 g     F .text	000000fc lif_str2vol
0000c81e g     F .text	000001c0 f_getfree
0000ecda g     F .text	00000030 fputs
00004bd0  w      .text	00000000 __vector_16
000064d6 g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
00004f18 g     F .text	00000054 safecalloc
0001c82a g     F .text	00000070 update_drive_counts
0000ed70 g     F .text	0000002a fileno_to_stream
00015660 g     F .text	000000ea SS80_cmd_seek
0000efb6 g     F .text	00000036 closedir
00004bd0  w      .text	00000000 __vector_18
0000577e g     F .text	0000002a i2c_task_init
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00014d3e g     F .text	000000b8 SS80VolumePack
0000d62a g     F .text	000000c2 mmc_disk_read
0000e7ba g     F .text	00000072 mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
0001825e g     F .text	0000004a lif_stat
000053e8 g     F .text	00000006 uart_rx_byte
00015f1c g     F .text	00000074 SS80_error_return
00800104 g     O .data	00000002 __malloc_margin
00005330 g     F .text	00000054 __vector_20
0000eeda g     F .text	0000005c mkdir
0001c1de g     F .text	0000004e lcd_backlight
00005452 g     F .text	00000024 uart_putchar
00010368 g     F .text	000003dc posix_tests
00801efa g     O .bss	00000002 gpib_unread_data
0000f934 g     F .text	00000062 close
0001ce1a g       .text	00000000 __addsf3
0001cd66 g       .text	00000038 .hidden __prologue_saves__
00011912 g     F .text	00000024 AMIGO_is_MLA
0000dd50 g     F .text	00000048 mmc_test_timeout
0001af48 g     F .text	0000055e lif_extract_e010_as_ascii
00016970 g     F .text	00000056 amigo_seek
00010d9e g     F .text	00000018 gpib_handshake_pin_read
00006b5a g     F .text	00000028 enable_timers
0000e1ae g     F .text	0000001e fatfs_fstype
0001804c g     F .text	0000002a V2B_LSB
00010888 g     F .text	0000003a dbf_write
00801970 g     O .bss	00000002 SS80p
0000d17c g     F .text	00000006 ff_memalloc
0001d444 g     F .text	00000112 free
0001d174 g       .text	00000000 __fp_szero
000053ee g     F .text	00000032 uart_tx_byte
0001cd3a g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c9 25 	jmp	0x4b92	; 0x4b92 <__ctors_end>
       4:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
       8:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
       c:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      10:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      14:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      18:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      1c:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      20:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      24:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      28:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      2c:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      30:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      34:	0c 94 77 33 	jmp	0x66ee	; 0x66ee <__vector_13>
      38:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      3c:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      40:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      44:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      48:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      4c:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      50:	0c 94 98 29 	jmp	0x5330	; 0x5330 <__vector_20>
      54:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      58:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      5c:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      60:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      64:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      68:	0c 94 9a 2d 	jmp	0x5b34	; 0x5b34 <__vector_26>
      6c:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      70:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      74:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      78:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      7c:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      80:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      84:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      88:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__bad_interrupt>
      8c:	a7 43       	sbci	r26, 0x37	; 55
      8e:	f7 44       	sbci	r31, 0x47	; 71
      90:	df 43       	sbci	r29, 0x3F	; 63
      92:	ca 44       	sbci	r28, 0x4A	; 74
      94:	ca 44       	sbci	r28, 0x4A	; 74
      96:	f7 44       	sbci	r31, 0x47	; 71
      98:	f7 44       	sbci	r31, 0x47	; 71
      9a:	f7 44       	sbci	r31, 0x47	; 71
      9c:	f7 44       	sbci	r31, 0x47	; 71
      9e:	f7 44       	sbci	r31, 0x47	; 71
      a0:	f7 44       	sbci	r31, 0x47	; 71
      a2:	f7 44       	sbci	r31, 0x47	; 71
      a4:	f7 44       	sbci	r31, 0x47	; 71
      a6:	a7 43       	sbci	r26, 0x37	; 55
      a8:	a4 43       	sbci	r26, 0x34	; 52
      aa:	f7 44       	sbci	r31, 0x47	; 71
      ac:	f7 44       	sbci	r31, 0x47	; 71
      ae:	ed 44       	sbci	r30, 0x4D	; 77
      b0:	f7 44       	sbci	r31, 0x47	; 71
      b2:	d9 43       	sbci	r29, 0x39	; 57
      b4:	f7 44       	sbci	r31, 0x47	; 71
      b6:	f7 44       	sbci	r31, 0x47	; 71
      b8:	a7 43       	sbci	r26, 0x37	; 55
      ba:	f7 44       	sbci	r31, 0x47	; 71
      bc:	f7 44       	sbci	r31, 0x47	; 71
      be:	f7 44       	sbci	r31, 0x47	; 71
      c0:	f7 44       	sbci	r31, 0x47	; 71
      c2:	f7 44       	sbci	r31, 0x47	; 71
      c4:	f7 44       	sbci	r31, 0x47	; 71
      c6:	f7 44       	sbci	r31, 0x47	; 71
      c8:	f7 44       	sbci	r31, 0x47	; 71
      ca:	f7 44       	sbci	r31, 0x47	; 71
      cc:	a7 43       	sbci	r26, 0x37	; 55
      ce:	f2 44       	sbci	r31, 0x42	; 66
      d0:	df 43       	sbci	r29, 0x3F	; 63
      d2:	ca 44       	sbci	r28, 0x4A	; 74
      d4:	ca 44       	sbci	r28, 0x4A	; 74
      d6:	f7 44       	sbci	r31, 0x47	; 71
      d8:	f7 44       	sbci	r31, 0x47	; 71
      da:	f7 44       	sbci	r31, 0x47	; 71
      dc:	f7 44       	sbci	r31, 0x47	; 71
      de:	f7 44       	sbci	r31, 0x47	; 71
      e0:	f7 44       	sbci	r31, 0x47	; 71
      e2:	f7 44       	sbci	r31, 0x47	; 71
      e4:	f7 44       	sbci	r31, 0x47	; 71
      e6:	a7 43       	sbci	r26, 0x37	; 55
      e8:	a4 43       	sbci	r26, 0x34	; 52
      ea:	f7 44       	sbci	r31, 0x47	; 71
      ec:	f7 44       	sbci	r31, 0x47	; 71
      ee:	e8 44       	sbci	r30, 0x48	; 72
      f0:	f7 44       	sbci	r31, 0x47	; 71
      f2:	d9 43       	sbci	r29, 0x39	; 57
      f4:	f7 44       	sbci	r31, 0x47	; 71
      f6:	f7 44       	sbci	r31, 0x47	; 71
      f8:	a7 43       	sbci	r26, 0x37	; 55
      fa:	1c 45       	sbci	r17, 0x5C	; 92
      fc:	5d 46       	sbci	r21, 0x6D	; 109
      fe:	0f 45       	sbci	r16, 0x5F	; 95
     100:	77 45       	sbci	r23, 0x57	; 87
     102:	5b 45       	sbci	r21, 0x5B	; 91
     104:	5d 46       	sbci	r21, 0x6D	; 109
     106:	5d 46       	sbci	r21, 0x6D	; 109
     108:	5d 46       	sbci	r21, 0x6D	; 109
     10a:	5d 46       	sbci	r21, 0x6D	; 109
     10c:	5d 46       	sbci	r21, 0x6D	; 109
     10e:	5d 46       	sbci	r21, 0x6D	; 109
     110:	5d 46       	sbci	r21, 0x6D	; 109
     112:	5d 46       	sbci	r21, 0x6D	; 109
     114:	29 45       	sbci	r18, 0x59	; 89
     116:	3d 45       	sbci	r19, 0x5D	; 93
     118:	5d 46       	sbci	r21, 0x6D	; 109
     11a:	5d 46       	sbci	r21, 0x6D	; 109
     11c:	03 46       	sbci	r16, 0x63	; 99
     11e:	5d 46       	sbci	r21, 0x6D	; 109
     120:	0b 45       	sbci	r16, 0x5B	; 91
     122:	5d 46       	sbci	r21, 0x6D	; 109
     124:	5d 46       	sbci	r21, 0x6D	; 109
     126:	3d 45       	sbci	r19, 0x5D	; 93
     128:	5d 46       	sbci	r21, 0x6D	; 109
     12a:	5d 46       	sbci	r21, 0x6D	; 109
     12c:	5d 46       	sbci	r21, 0x6D	; 109
     12e:	5d 46       	sbci	r21, 0x6D	; 109
     130:	5d 46       	sbci	r21, 0x6D	; 109
     132:	5d 46       	sbci	r21, 0x6D	; 109
     134:	5d 46       	sbci	r21, 0x6D	; 109
     136:	5d 46       	sbci	r21, 0x6D	; 109
     138:	5d 46       	sbci	r21, 0x6D	; 109
     13a:	1c 45       	sbci	r17, 0x5C	; 92
     13c:	ab 45       	sbci	r26, 0x5B	; 91
     13e:	0f 45       	sbci	r16, 0x5F	; 95
     140:	77 45       	sbci	r23, 0x57	; 87
     142:	5b 45       	sbci	r21, 0x5B	; 91
     144:	5d 46       	sbci	r21, 0x6D	; 109
     146:	5d 46       	sbci	r21, 0x6D	; 109
     148:	5d 46       	sbci	r21, 0x6D	; 109
     14a:	5d 46       	sbci	r21, 0x6D	; 109
     14c:	5d 46       	sbci	r21, 0x6D	; 109
     14e:	5d 46       	sbci	r21, 0x6D	; 109
     150:	5d 46       	sbci	r21, 0x6D	; 109
     152:	5d 46       	sbci	r21, 0x6D	; 109
     154:	29 45       	sbci	r18, 0x59	; 89
     156:	3d 45       	sbci	r19, 0x5D	; 93
     158:	5d 46       	sbci	r21, 0x6D	; 109
     15a:	5d 46       	sbci	r21, 0x6D	; 109
     15c:	ab 45       	sbci	r26, 0x5B	; 91
     15e:	5d 46       	sbci	r21, 0x6D	; 109
     160:	0b 45       	sbci	r16, 0x5B	; 91
     162:	5d 46       	sbci	r21, 0x6D	; 109
     164:	5d 46       	sbci	r21, 0x6D	; 109
     166:	3d 45       	sbci	r19, 0x5D	; 93
     168:	3c 69       	ori	r19, 0x9C	; 156
     16a:	46 69       	ori	r20, 0x96	; 150
     16c:	4e 69       	ori	r20, 0x9E	; 158
     16e:	51 69       	ori	r21, 0x91	; 145
     170:	54 69       	ori	r21, 0x94	; 148
     172:	57 69       	ori	r21, 0x97	; 151
     174:	5a 69       	ori	r21, 0x9A	; 154
     176:	5d 69       	ori	r21, 0x9D	; 157
     178:	60 69       	ori	r22, 0x90	; 144
     17a:	3b 87       	std	Y+11, r19	; 0x0b
     17c:	43 87       	std	Z+11, r20	; 0x0b
     17e:	74 87       	std	Z+12, r23	; 0x0c
     180:	8d 87       	std	Y+13, r24	; 0x0d
     182:	a9 87       	std	Y+9, r26	; 0x09
     184:	b6 87       	std	Z+14, r27	; 0x0e
     186:	d2 87       	std	Z+10, r29	; 0x0a
     188:	fc 87       	std	Y+12, r31	; 0x0c
     18a:	df 87       	std	Y+15, r29	; 0x0f
     18c:	98 9e       	mul	r9, r24
     18e:	68 9f       	mul	r22, r24
     190:	a4 9f       	mul	r26, r20
     192:	d7 9f       	mul	r29, r23
     194:	e7 9f       	mul	r30, r23
     196:	04 a0       	ldd	r0, Z+36	; 0x24
     198:	64 a0       	ldd	r6, Z+36	; 0x24
     19a:	4f a1       	ldd	r20, Y+39	; 0x27
     19c:	4f a1       	ldd	r20, Y+39	; 0x27
     19e:	4f a1       	ldd	r20, Y+39	; 0x27
     1a0:	98 a0       	ldd	r9, Y+32	; 0x20
     1a2:	c4 a0       	ldd	r12, Z+36	; 0x24
     1a4:	07 a1       	ldd	r16, Z+39	; 0x27
     1a6:	1e a1       	ldd	r17, Y+38	; 0x26
     1a8:	31 9f       	mul	r19, r17
     1aa:	44 9f       	mul	r20, r20
     1ac:	56 bd       	out	0x26, r21	; 38
     1ae:	15 bd       	out	0x25, r17	; 37
     1b0:	15 bd       	out	0x25, r17	; 37
     1b2:	15 bd       	out	0x25, r17	; 37
     1b4:	15 bd       	out	0x25, r17	; 37
     1b6:	d9 bc       	out	0x29, r13	; 41
     1b8:	e0 bc       	out	0x20, r14	; 32
     1ba:	e7 bc       	out	0x27, r14	; 39
     1bc:	f7 bc       	out	0x27, r15	; 39
     1be:	05 bd       	out	0x25, r16	; 37
     1c0:	fe bc       	out	0x2e, r15	; 46

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3617>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3648>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     21d:	25 75 29 0a 00                                      %u)..

00000222 <__c.3639>:
     222:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     232:	61 69 6c 65 64 21 0a 00                             ailed!..

0000023a <__c.3633>:
     23a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     24a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000255 <__c.3618>:
     255:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     265:	35 75 0a 00                                         5u..

00000269 <__c.3616>:
     269:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     279:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000287 <__c.3614>:
     287:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     297:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002a5 <__c.3612>:
     2a5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2b5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002c3 <__c.3610>:
     2c3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2d3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002e1 <__c.3608>:
     2e1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     2f1:	75 0a 00                                            u..

000002f4 <__c.3606>:
     2f4:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     304:	75 0a 00                                            u..

00000307 <__c.3604>:
     307:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000314 <__c.3602>:
     314:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     324:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000331 <__c.3721>:
     331:	0a 00                                               ..

00000333 <__c.3719>:
     333:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033d <__c.3717>:
     33d:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34d:	25 64 0a 00                                         %d..

00000351 <__c.3715>:
     351:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     361:	64 0a 00                                            d..

00000364 <__c.3710>:
     364:	0a 00                                               ..

00000366 <__c.3708>:
     366:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     376:	4b 0a 00                                            K..

00000379 <__c.3706>:
     379:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     389:	0a 00                                               ..

0000038b <__c.3704>:
     38b:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39b:	0a 00                                               ..

0000039d <__c.3702>:
     39d:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003a9 <__c.3700>:
     3a9:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b3 <__c.3698>:
     3b3:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c1 <__c.3696>:
     3c1:	20 20 25 73 0a 00                                     %s..

000003c7 <__c.3646>:
     3c7:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d7:	61 69 6c 65 64 0a 00                                ailed..

000003de <__c.3640>:
     3de:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3ee:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fa <__c.3597>:
     3fa:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40a:	3d 3d 20 30 0a 00                                   == 0..

00000410 <__c.3595>:
     410:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     420:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

00000429 <__c.3593>:
     429:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     439:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000441 <__c.3643>:
     441:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     451:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

0000045f <__c.3633>:
     45f:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     46f:	72 6f 72 0a 00                                      ror..

00000474 <__c.3631>:
     474:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     484:	6f 72 0a 00                                         or..

00000488 <__c.3625>:
     488:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000498 <__c.3619>:
     498:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004a9 <__c.3611>:
     4a9:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4b9:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c2 <__c.3609>:
     4c2:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d2:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004de <__c.3601>:
     4de:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4ee:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004f8 <__c.3629>:
     4f8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     508:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     518:	74 20 25 64 0a 00                                   t %d..

0000051e <__c.3586>:
     51e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000053e <__c.3665>:
     53e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000054e <__c.3663>:
     54e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000055f <__c.3661>:
     55f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     56f:	66 61 69 6c 65 64 0a 00                             failed..

00000577 <__c.3659>:
     577:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000583 <__c.3657>:
     583:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     593:	64 0a 00                                            d..

00000596 <__c.3655>:
     596:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a6:	65 64 0a 00                                         ed..

000005aa <__c.3635>:
     5aa:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b5 <__c.3633>:
     5b5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c3 <__c.3619>:
     5c3:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cd <__c.3599>:
     5cd:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5dd:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ea <__c.3874>:
     5ea:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fb <__c.3872>:
     5fb:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60b:	0a 00                                               ..

0000060d <__c.3870>:
     60d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000061e <__c.3868>:
     61e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000062f <__c.3866>:
     62f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     63f:	0a 00                                               ..

00000641 <__c.3859>:
     641:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     651:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     661:	6d 65 0a 00                                         me..

00000665 <__c.3857>:
     665:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     675:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000067f <__c.3855>:
     67f:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     68f:	61 69 6c 65 64 0a 00                                ailed..

00000696 <__c.3853>:
     696:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a6:	6e 69 74 0a 00                                      nit..

000006ab <__c.3851>:
     6ab:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bb:	0a 00                                               ..

000006bd <__c.3805>:
     6bd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cd:	61 69 6c 65 64 0a 00                                ailed..

000006d4 <__c.3803>:
     6d4:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e5 <__c.3801>:
     6e5:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f5:	0a 00                                               ..

000006f7 <__c.3799>:
     6f7:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000708 <__c.3797>:
     708:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000719 <__c.3795>:
     719:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     729:	0a 00                                               ..

0000072b <__c.3774>:
     72b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074c <__c.3649>:
     74c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000769 <__c.3617>:
     769:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000779 <__c.3651>:
     779:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000787 <__c.3649>:
     787:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     797:	25 6c 64 0a 00                                      %ld..

0000079c <__c.3647>:
     79c:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ac:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ba <__c.3644>:
     7ba:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cb <__c.3642>:
     7cb:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d7 <__c.3640>:
     7d7:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e7:	64 0a 00                                            d..

000007ea <__c.3638>:
     7ea:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fa:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080a <__c.3636>:
     80a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081a <__c.3622>:
     81a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000827 <__c.3594>:
     827:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     837:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000843 <__c.3672>:
     843:	0a 00                                               ..

00000845 <__c.3670>:
     845:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     855:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     865:	73 00                                               s.

00000867 <__c.3668>:
     867:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     877:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000882 <__c.3662>:
     882:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     892:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008cf <__c.3660>:
     8cf:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 61 74     fatfs_status fat
     8df:	66 73 5f 73 63 61 6e 5f 66 69 6c 65 73 20 66 61     fs_scan_files fa
     8ef:	69 6c 65 64 0a 00                                   iled..

000008f5 <__c.3658>:
     8f5:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     905:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     915:	30 34 58 0a 00                                      04X..

0000091a <__c.3656>:
     91a:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92a:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000938 <__c.3654>:
     938:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     948:	65 74 6c 61 62 65 6c 20 66 61 69 6c 65 64 0a 00     etlabel failed..

00000958 <__c.3652>:
     958:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     968:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000977 <__c.3650>:
     977:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     987:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000996 <__c.3648>:
     996:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     9a6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009b5 <__c.3646>:
     9b5:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9c5:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009d4 <__c.3644>:
     9d4:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9e4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009f3 <__c.3642>:
     9f3:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     a03:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a11 <__c.3640>:
     a11:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a21:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a2f <__c.3638>:
     a2f:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a3f:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a4e <__c.3636>:
     a4e:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a5e:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a6c <__c.3634>:
     a6c:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     a7c:	65 74 66 72 65 65 20 66 61 69 6c 65 64 0a 00        etfree failed..

00000a8b <__c.3632>:
     a8b:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a9c <__c.3596>:
     a9c:	72 63 3d 25 75 0a 00                                rc=%u..

00000aa3 <__c.3630>:
     aa3:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     ab3:	72 65 65 0a 00                                      ree..

00000ab8 <__c.3628>:
     ab8:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     ac8:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     ad8:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000ae1 <__c.3624>:
     ae1:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aef <__c.3611>:
     aef:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000afd <__c.3609>:
     afd:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     b0d:	73 74 0a 00                                         st..

00000b11 <__c.3607>:
     b11:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000b21 <__c.3589>:
     b21:	66 61 74 66 73 20 20 20 20 20 68 65 6c 70 0a 00     fatfs     help..

00000b31 <__c.3587>:
     b31:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b41:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b51:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b61:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b71:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b81:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b91:	20 6c 73 20 64 69 72 65 63 74 6f 72 79 0a 66 61      ls directory.fa
     ba1:	74 66 73 20 73 74 61 74 75 73 0a 0a 00              tfs status...

00000bae <__c.3919>:
     bae:	25 73 0a 00                                         %s..

00000bb2 <__c.3917>:
     bb2:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000bba <__c.3672>:
     bba:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000bc6 <__c.3601>:
     bc6:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     bd6:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bde <__c.3594>:
     bde:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     bee:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bf6 <__c.3764>:
     bf6:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000c01 <__c.3760>:
     c01:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     c11:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     c21:	68 0a 00                                            h..

00000c24 <__c.3757>:
     c24:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c34 <__c.3752>:
     c34:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c42 <__c.3750>:
     c42:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c52:	5b 25 73 5d 0a 00                                   [%s]..

00000c58 <__c.3748>:
     c58:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c68:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c79 <__c.3735>:
     c79:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c89:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c93 <__c.3730>:
     c93:	25 73 0a 00                                         %s..

00000c97 <__c.3728>:
     c97:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     ca7:	0a 00                                               ..

00000ca9 <__c.3716>:
     ca9:	0d 00                                               ..

00000cab <__c.3714>:
     cab:	4d 6f 72 65 2e 2e 00                                More...

00000cb2 <__c.3704>:
     cb2:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     cc2:	2e 0a 00                                            ...

00000cc5 <__c.3700>:
     cc5:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000cd4 <__c.3697>:
     cd4:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000ce1 <__c.3695>:
     ce1:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000cee <__c.3693>:
     cee:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cfe <__c.3691>:
     cfe:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000d0b <__c.3689>:
     d0b:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d1b <__c.3687>:
     d1b:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d27 <__c.3676>:
     d27:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d32 <__c.3674>:
     d32:	0a 00                                               ..

00000d34 <__c.3669>:
     d34:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d44 <__c.3659>:
     d44:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d55 <__c.3657>:
     d55:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d63 <__c.3655>:
     d63:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d74 <__c.3653>:
     d74:	25 73 0a 00                                         %s..

00000d78 <__c.3651>:
     d78:	70 77 64 20 46 41 49 4c 45 44 0a 00                 pwd FAILED..

00000d84 <__c.3647>:
     d84:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d95 <__c.3640>:
     d95:	6c 73 3a 20 6e 75 6c 6c 20 61 72 67 75 6d 65 6e     ls: null argumen
     da5:	74 20 23 20 25 64 0a 00                             t # %d..

00000dad <__c.3636>:
     dad:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000dbe <__c.3620>:
     dbe:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     dce:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     dde:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     dee:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dfe:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     e0e:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     e1e:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     e2e:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e3e:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e4e:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e5e:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e6e:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e7e:	6e 65 77 0a 0a 00                                   new...

00000e84 <__c.3618>:
     e84:	70 6f 73 69 78 20 20 20 20 20 68 65 6c 70 0a 00     posix     help..

00000e94 <__c.3807>:
     e94:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000ea2 <__c.3801>:
     ea2:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000eaf <__c.3794>:
     eaf:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000ebd <__c.3785>:
     ebd:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000eca <__c.3776>:
     eca:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000edb <__c.3762>:
     edb:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     eeb:	5d 0a 00                                            ]..

00000eee <__c.3744>:
     eee:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     efe:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000f0b <__c.4423>:
     f0b:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f1b:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f2b:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f33 <__c.4415>:
     f33:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f43:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f4d <__c.4410>:
     f4d:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f5d:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     f6d:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000f7b <__c.4408>:
     f7b:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f8b:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f95 <__c.4398>:
     f95:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     fa5:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     fb5:	28 25 64 29 5d 0a 00                                (%d)]..

00000fbc <__c.4394>:
     fbc:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     fcc:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     fdc:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fe9 <__c.4391>:
     fe9:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     ff9:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00001002 <__c.4375>:
    1002:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

0000100d <__c.4373>:
    100d:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00001018 <__c.4371>:
    1018:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00001023 <__c.4367>:
    1023:	20 20 20 20 20 00                                        .

00001029 <__c.4365>:
    1029:	25 30 32 58 20 25 63 20 00                          %02X %c .

00001032 <__c.4339>:
    1032:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    1042:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

00001050 <__c.4323>:
    1050:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    1060:	3e 0a 00                                            >..

00001063 <__c.4318>:
    1063:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    1073:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    1083:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

00001092 <__c.4314>:
    1092:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10a2:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10b2:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10c2:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010ce <__c.4310>:
    10ce:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10de:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10ee:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10fe:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

0000110a <__c.4308>:
    110a:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    111a:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    112a:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    113a:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001149 <__c.4303>:
    1149:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1159:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

00001168 <__c.4287>:
    1168:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    1178:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1188:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001196 <__c.4271>:
    1196:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    11a6:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011b1 <__c.4269>:
    11b1:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11c1:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    11d1:	72 61 6e 67 65 0a 00                                range..

000011d8 <__c.4264>:
    11d8:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    11e8:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011f3 <__c.4262>:
    11f3:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    1203:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1213:	61 6e 67 65 0a 00                                   ange..

00001219 <__c.4257>:
    1219:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1229:	5d 0a 00                                            ]..

0000122c <__c.4245>:
    122c:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

0000123d <__c.4422>:
    123d:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

0000124e <__c.4417>:
    124e:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    125e:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    126e:	32 58 48 5d 0a 00                                   2XH]..

00001274 <__c.4415>:
    1274:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1284:	0a 00                                               ..

00001286 <__c.4413>:
    1286:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001297 <__c.4408>:
    1297:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

000012a3 <__c.4406>:
    12a3:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

000012b3 <__c.4404>:
    12b3:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12c3:	52 5d 0a 00                                         R]..

000012c7 <__c.4402>:
    12c7:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    12d7:	0a 00                                               ..

000012d9 <__c.4400>:
    12d9:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

000012ea <__c.4398>:
    12ea:	5b 55 4e 54 5d 0a 00                                [UNT]..

000012f1 <__c.4393>:
    12f1:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012fd <__c.4391>:
    12fd:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    130d:	52 5d 0a 00                                         R]..

00001311 <__c.4389>:
    1311:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

00001322 <__c.4387>:
    1322:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    1332:	0a 00                                               ..

00001334 <__c.4385>:
    1334:	0a 00                                               ..

00001336 <__c.4383>:
    1336:	5b 55 4e 4c 5d 0a 00                                [UNL]..

0000133d <__c.4378>:
    133d:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    134d:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

0000135e <__c.4376>:
    135e:	5b 44 43 4c 5d 0a 00                                [DCL]..

00001365 <__c.4374>:
    1365:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

00001372 <__c.4372>:
    1372:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000137e <__c.4370>:
    137e:	5b 53 44 43 5d 0a 00                                [SDC]..

00001385 <__c.4368>:
    1385:	5b 53 50 44 5d 0a 00                                [SPD]..

0000138c <__c.4366>:
    138c:	5b 53 50 45 5d 0a 00                                [SPE]..

00001393 <__c.4364>:
    1393:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    13a3:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013ab <__c.4362>:
    13ab:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13bb:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013c3 <__c.4357>:
    13c3:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13d3:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

000013dd <__c.4355>:
    13dd:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13ed:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013fe <__c.4328>:
    13fe:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

0000140f <__c.4326>:
    140f:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

0000141c <__c.4324>:
    141c:	3c 42 55 53 3e 0a 00                                <BUS>..

00001423 <__c.4322>:
    1423:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

0000142e <__c.4320>:
    142e:	3c 49 46 43 3e 0a 00                                <IFC>..

00001435 <__c.4315>:
    1435:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    1445:	0a 00                                               ..

00001447 <__c.4313>:
    1447:	44 6f 6e 65 0a 00                                   Done..

0000144d <__c.4309>:
    144d:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001459 <__c.4307>:
    1459:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1469:	20 65 78 69 74 0a 00                                 exit..

00001470 <__c.4305>:
    1470:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1480:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1490:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

0000149b <__c.4303>:
    149b:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    14ab:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014b5 <__c.4257>:
    14b5:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14c5:	6f 74 65 63 74 65 64 0a 00                          otected..

000014ce <__c.4255>:
    14ce:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

000014df <__c.4253>:
    14df:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    14ef:	0a 00                                               ..

000014f1 <__c.4448>:
    14f1:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014fe <__c.4440>:
    14fe:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    150e:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    151e:	69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64 65     ib debug N.   de
    152e:	62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70 6f     bug message repo
    153e:	72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73 6b     rting see hpdisk
    154e:	2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c 73     .cfg for details
    155e:	0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70     .gpib elapsed.gp
    156e:	69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74     ib elapsed_reset
    157e:	0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20 70     .gpib ifc.gpib p
    158e:	6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78 74     lot filename.txt
    159e:	0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f 0a     .gpib plot_echo.
    15ae:	67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20 74     gpib task.gpib t
    15be:	72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74 78     race filename.tx
    15ce:	74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70 6c     t [BUS].   Displ
    15de:	61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20 47     ay activity of G
    15ee:	50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67 20     PIB bus and log 
    15fe:	69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63 6c     it.   BUS - incl
    160e:	75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73 74     ude handshake st
    161e:	61 74 65 73 0a 0a 00                                ates...

00001625 <__c.4438>:
    1625:	67 70 69 62 20 20 20 20 20 20 68 65 6c 70 0a 00     gpib      help..

00001635 <__c.4969>:
    1635:	0a 00                                               ..

00001637 <__c.4964>:
    1637:	4d 6f 75 6e 74 65 64 20 64 72 69 76 65 73 0a 00     Mounted drives..

00001647 <__c.4959>:
    1647:	50 52 49 4e 54 45 52 20 25 2d 38 73 20 25 32 64     PRINTER %-8s %2d
    1657:	0a 00                                               ..

00001659 <__c.4957>:
    1659:	41 4d 49 47 4f 20 20 20 25 2d 38 73 20 25 32 64     AMIGO   %-8s %2d
    1669:	20 25 73 0a 00                                       %s..

0000166e <__c.4955>:
    166e:	53 53 38 30 20 20 20 20 25 2d 38 73 20 25 32 64     SS80    %-8s %2d
    167e:	20 25 73 0a 00                                       %s..

00001683 <__c.4947>:
    1683:	45 78 70 65 63 74 65 64 20 41 4d 49 47 4f 20 6f     Expected AMIGO o
    1693:	72 20 53 53 38 30 20 6f 72 20 43 53 38 30 20 66     r SS80 or CS80 f
    16a3:	6f 72 20 5b 25 73 5d 0a 00                          or [%s]..

000016ac <__c.4945>:
    16ac:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    16bc:	74 65 20 41 4d 49 47 4f 20 73 74 72 75 63 74 75     te AMIGO structu
    16cc:	72 65 20 66 6f 72 20 25 73 0a 00                    re for %s..

000016d7 <__c.4941>:
    16d7:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    16e7:	74 65 20 53 53 38 30 20 73 74 72 75 63 74 75 72     te SS80 structur
    16f7:	65 20 66 6f 72 20 25 73 0a 00                       e for %s..

00001701 <__c.4937>:
    1701:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    1711:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    1721:	72 2e 69 6e 69 21 0a 00                             r.ini!..

00001729 <__c.4935>:
    1729:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    1739:	74 65 20 50 52 49 4e 54 45 52 20 73 74 72 75 63     te PRINTER struc
    1749:	74 75 72 65 0a 00                                   ture..

0000174f <__c.4924>:
    174f:	75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73 3a 5b     umount address:[
    175f:	25 64 5d 20 4e 4f 54 20 66 6f 75 6e 64 0a 00        %d] NOT found..

0000176e <__c.4922>:
    176e:	20 20 2d 20 61 64 64 72 65 73 73 20 69 73 20 74       - address is t
    177e:	68 65 20 64 65 76 69 63 65 20 61 64 64 72 65 73     he device addres
    178e:	73 0a 00                                            s..

00001791 <__c.4920>:
    1791:	20 20 75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73       umount address
    17a1:	0a 00                                               ..

000017a3 <__c.4918>:
    17a3:	55 73 61 67 65 3a 0a 00                             Usage:..

000017ab <__c.4872>:
    17ab:	55 73 61 67 65 3a 20 0a 00                          Usage: ..

000017b4 <__c.4868>:
    17b4:	6d 6f 75 6e 74 0a 20 20 20 20 20 64 69 73 70 6c     mount.     displ
    17c4:	61 79 73 20 61 20 6c 69 73 74 20 6f 66 20 6d 6f     ays a list of mo
    17d4:	75 6e 74 65 64 20 64 72 69 76 65 73 20 6f 6e 65     unted drives one
    17e4:	20 70 65 72 20 6c 69 6e 65 0a 6d 6f 75 6e 74 20      per line.mount 
    17f4:	41 4d 49 47 4f 7c 53 53 38 30 20 6d 6f 64 65 6c     AMIGO|SS80 model
    1804:	20 61 64 64 72 65 73 73 20 66 69 6c 65 0a 20 20      address file.  
    1814:	20 20 20 45 78 61 6d 70 6c 65 3a 20 6d 6f 75 6e        Example: moun
    1824:	74 20 39 31 32 31 20 20 36 20 2f 61 6d 69 67 6f     t 9121  6 /amigo
    1834:	36 2e 6c 69 66 0a 20 20 20 20 20 45 78 61 6d 70     6.lif.     Examp
    1844:	6c 65 3a 20 6d 6f 75 6e 74 20 39 31 33 34 44 20     le: mount 9134D 
    1854:	32 20 2f 61 6d 69 67 6f 32 2e 6c 69 66 0a 20 20     2 /amigo2.lif.  
    1864:	20 20 20 4e 6f 74 65 3a 20 64 72 69 76 65 20 6d        Note: drive m
    1874:	6f 64 65 6c 20 6d 75 73 74 20 65 78 69 73 74 20     odel must exist 
    1884:	69 6e 20 68 70 64 69 72 2e 69 6e 69 20 5b 64 72     in hpdir.ini [dr
    1894:	69 76 65 69 6e 66 6f 5d 20 73 65 63 74 69 6f 6e     iveinfo] section
    18a4:	0a 6d 6f 75 6e 74 20 50 52 49 4e 54 45 52 20 61     .mount PRINTER a
    18b4:	64 64 72 65 73 73 0a 20 20 20 20 20 45 78 61 6d     ddress.     Exam
    18c4:	70 6c 65 3a 20 6d 6f 75 6e 74 20 50 52 49 4e 54     ple: mount PRINT
    18d4:	45 52 20 35 0a 75 6d 6f 75 6e 74 20 61 64 64 72     ER 5.umount addr
    18e4:	65 73 73 0a 20 20 20 20 20 45 78 61 6d 70 6c 65     ess.     Example
    18f4:	3a 20 75 6d 6f 75 6e 74 20 36 0a 0a 61 64 64 72     : umount 6..addr
    1904:	65 73 73 65 73 0a 20 20 20 44 69 73 70 6c 61 79     esses.   Display
    1914:	20 61 6c 6c 20 64 65 76 69 63 65 20 47 50 49 42      all device GPIB
    1924:	20 62 75 73 20 61 64 64 72 65 73 73 65 73 20 61      bus addresses a
    1934:	6e 64 20 50 50 52 20 76 61 6c 75 65 73 0a 63 6f     nd PPR values.co
    1944:	6e 66 69 67 20 5b 2d 76 5d 0a 20 20 20 44 69 73     nfig [-v].   Dis
    1954:	70 6c 61 79 20 63 75 72 72 65 6e 74 20 64 72 69     play current dri
    1964:	76 65 73 20 63 6f 6e 66 69 67 75 72 61 74 69 6f     ves configuratio
    1974:	6e 0a 20 20 20 2d 76 20 56 65 72 62 6f 73 65 20     n.   -v Verbose 
    1984:	2d 20 73 68 6f 77 20 66 75 6c 6c 20 64 65 74 61     - show full deta
    1994:	69 6c 0a 0a 00                                      il...

00001999 <__c.4866>:
    1999:	64 72 69 76 65 73 20 20 20 20 68 65 6c 70 0a 00     drives    help..

000019a9 <__c.4858>:
    19a9:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

000019b1 <__c.4856>:
    19b1:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    19c1:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

000019cb <__c.4854>:
    19cb:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    19db:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    19eb:	0a 00                                               ..

000019ed <__c.4852>:
    19ed:	53 53 38 30 2d 25 64 00                             SS80-%d.

000019f5 <__c.4850>:
    19f5:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1a05:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001a0f <__c.4848>:
    1a0f:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1a1f:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1a2f:	0a 00                                               ..

00001a31 <__c.4828>:
    1a31:	44 65 76 69 63 65 20 65 72 72 6f 72 73 20 2d 20     Device errors - 
    1a41:	72 65 6d 6f 76 69 6e 67 3a 20 00                    removing: .

00001a4c <__c.4826>:
    1a4c:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1a5c:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1a6c:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1a7c:	6f 20 32 35 36 0a 00                                o 256..

00001a83 <__c.4824>:
    1a83:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1a93:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1aa3:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1ab3:	20 32 35 36 0a 00                                    256..

00001ab9 <__c.4818>:
    1ab9:	41 64 64 72 65 73 73 20 28 25 64 29 20 6f 75 74     Address (%d) out
    1ac9:	20 6f 66 20 72 61 6e 67 65 0a 00                     of range..

00001ad4 <__c.4802>:
    1ad4:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    1ae4:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    1af4:	72 2e 69 6e 69 21 0a 00                             r.ini!..

00001afc <__c.4796>:
    1afc:	68 70 64 69 72 20 69 6e 76 61 6c 69 64 20 74 79     hpdir invalid ty
    1b0c:	70 65 20 2d 20 4e 4f 54 20 41 4d 49 47 4f 20 6f     pe - NOT AMIGO o
    1b1c:	66 20 53 53 38 30 0a 00                             f SS80..

00001b24 <__c.4760>:
    1b24:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1b34:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1b44:	0a 00                                               ..

00001b46 <__c.4752>:
    1b46:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1b56:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1b66:	6c 6c 0a 00                                         ll..

00001b6a <__c.4731>:
    1b6a:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1b7a:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1b8a:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001b95 <__c.4729>:
    1b95:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1ba5:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1bb5:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1bc5:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001bcd <__c.4727>:
    1bcd:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1bdd:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1bed:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1bfd:	3a 25 73 0a 00                                      :%s..

00001c02 <__c.4725>:
    1c02:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c12:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1c22:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1c32:	55 4c 4c 0a 00                                      ULL..

00001c37 <__c.4723>:
    1c37:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c47:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1c57:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1c67:	66 20 72 61 6e 67 65 0a 00                          f range..

00001c70 <__c.4721>:
    1c70:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c80:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1c90:	6e 67 65 0a 00                                      nge..

00001c95 <__c.4682>:
    1c95:	0a 00                                               ..

00001c97 <__c.4677>:
    1c97:	0a 00                                               ..

00001c99 <__c.4675>:
    1c99:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1ca9:	6c 64 0a 00                                         ld..

00001cad <__c.4673>:
    1cad:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1cbd:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001ccc <__c.4671>:
    1ccc:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001cd6 <__c.4669>:
    1cd6:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1ce6:	6c 64 0a 00                                         ld..

00001cea <__c.4667>:
    1cea:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1cfa:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001d09 <__c.4665>:
    1d09:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001d12 <__c.4662>:
    1d12:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1d22:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001d32 <__c.4653>:
    1d32:	0a 00                                               ..

00001d34 <__c.4648>:
    1d34:	0a 00                                               ..

00001d36 <__c.4646>:
    1d36:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001d3f <__c.4644>:
    1d3f:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001d49 <__c.4642>:
    1d49:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001d52 <__c.4639>:
    1d52:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1d62:	0a 00                                               ..

00001d64 <__c.4633>:
    1d64:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1d74:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1d84:	2a 2a 2a 2a 2a 0a 00                                *****..

00001d8b <__c.4631>:
    1d8b:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1d9b:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001da8 <__c.4629>:
    1da8:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1db8:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1dc8:	0a 00                                               ..

00001dca <__c.4625>:
    1dca:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1dda:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1dea:	0a 00                                               ..

00001dec <__c.4622>:
    1dec:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1dfc:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1e0c:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001e1c <__c.4613>:
    1e1c:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1e2c:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1e3c:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001e4b <__c.4610>:
    1e4b:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1e5b:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1e6b:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001e7b <__c.4601>:
    1e7b:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1e8b:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1e9b:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001ea9 <__c.4593>:
    1ea9:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1eb9:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1ec9:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001ed7 <__c.4583>:
    1ed7:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1ee7:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1ef7:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001f03 <__c.4566>:
    1f03:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f13:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1f23:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1f33:	0a 00                                               ..

00001f35 <__c.4558>:
    1f35:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f45:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1f55:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f63 <__c.4555>:
    1f63:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f73:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1f83:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f91 <__c.4547>:
    1f91:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1fa1:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1fb1:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001fbe <__c.4537>:
    1fbe:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1fce:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1fde:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001fef <__c.4534>:
    1fef:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1fff:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    200f:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00002019 <__c.4530>:
    2019:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    2029:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2039:	0a 00                                               ..

0000203b <__c.4519>:
    203b:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    204b:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    205b:	0a 00                                               ..

0000205d <__c.4516>:
    205d:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    206d:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

0000207b <__c.4514>:
    207b:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00002088 <__c.4493>:
    2088:	25 73 0a 00                                         %s..

0000208c <__c.4483>:
    208c:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00002098 <__c.4472>:
    2098:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    20a8:	6c 64 29 0a 00                                      ld)..

000020ad <__c.3648>:
    20ad:	4d 6f 64 65 6c 3a 20 25 73 20 4e 4f 54 20 66 6f     Model: %s NOT fo
    20bd:	75 6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69     und in hpdir.ini
    20cd:	0a 00                                               ..

000020cf <__c.3643>:
    20cf:	4d 6f 64 65 6c 3a 20 25 73 20 66 6f 75 6e 64 20     Model: %s found 
    20df:	69 6e 20 68 70 64 69 72 2e 69 6e 69 0a 00           in hpdir.ini..

000020ed <__c.3641>:
    20ed:	25 73 20 25 73 0a 00                                %s %s..

000020f4 <__c.3637>:
    20f4:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    2104:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00002111 <__c.4565>:
    2111:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    2121:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    2131:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    2141:	48 5d 0a 00                                         H]..

00002145 <__c.4563>:
    2145:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    2155:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    2165:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    2175:	48 5d 0a 00                                         H]..

00002179 <__c.4561>:
    2179:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2189:	74 5d 0a 00                                         t]..

0000218d <__c.4559>:
    218d:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

0000219c <__c.4557>:
    219c:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    21ac:	74 65 5d 0a 00                                      te]..

000021b1 <__c.4555>:
    21b1:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    21c1:	61 74 65 5d 0a 00                                   ate]..

000021c7 <__c.4553>:
    21c7:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    21d7:	61 74 65 5d 0a 00                                   ate]..

000021dd <__c.4548>:
    21dd:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    21ed:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    21fd:	5d 0a 00                                            ]..

00002200 <__c.4534>:
    2200:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

0000220f <__c.4532>:
    220f:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    221f:	5d 0a 00                                            ]..

00002222 <__c.4525>:
    2222:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

0000222e <__c.4511>:
    222e:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    223e:	5d 0a 00                                            ]..

00002241 <__c.4509>:
    2241:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    2251:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

0000225b <__c.4502>:
    225b:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    226b:	48 5d 0a 00                                         H]..

0000226f <__c.4500>:
    226f:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    227f:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

0000228f <__c.4495>:
    228f:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    229f:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    22af:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    22bf:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

000022cb <__c.4492>:
    22cb:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    22db:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000022eb <__c.4490>:
    22eb:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    22fb:	29 5d 0a 00                                         )]..

000022ff <__c.4488>:
    22ff:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    230f:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    231f:	28 25 64 29 5d 0a 00                                (%d)]..

00002326 <__c.4486>:
    2326:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    2336:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00002344 <__c.4484>:
    2344:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    2354:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002361 <__c.4481>:
    2361:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2371:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2381:	44 4f 5d 0a 00                                      DO]..

00002386 <__c.4478>:
    2386:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2396:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

0000239f <__c.4476>:
    239f:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    23af:	5d 0a 00                                            ]..

000023b2 <__c.4467>:
    23b2:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    23c2:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    23d2:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    23e2:	43 6f 64 65 73 5d 0a 00                             Codes]..

000023ea <__c.4464>:
    23ea:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    23fa:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

0000240a <__c.4462>:
    240a:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    241a:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    242a:	5d 0a 00                                            ]..

0000242d <__c.4460>:
    242d:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    243d:	61 74 75 73 5d 0a 00                                atus]..

00002444 <__c.4458>:
    2444:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    2454:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

0000245d <__c.4456>:
    245d:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    246d:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00002478 <__c.4454>:
    2478:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    2488:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00002497 <__c.4452>:
    2497:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    24a7:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

000024b5 <__c.4450>:
    24b5:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000024c6 <__c.4448>:
    24c6:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    24d6:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

000024e2 <__c.4446>:
    24e2:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    24f2:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

000024ff <__c.4444>:
    24ff:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    250f:	2d 4f 50 5d 0a 00                                   -OP]..

00002515 <__c.4442>:
    2515:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2525:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00002536 <__c.4440>:
    2536:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    2546:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    2556:	44 4f 5d 0a 00                                      DO]..

0000255b <__c.4438>:
    255b:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    256b:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

00002575 <__c.4436>:
    2575:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    2585:	2d 4f 50 5d 0a 00                                   -OP]..

0000258b <__c.4434>:
    258b:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00002599 <__c.4432>:
    2599:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    25a9:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

000025b5 <__c.4430>:
    25b5:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    25c5:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

000025d2 <__c.4428>:
    25d2:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25e2:	20 57 72 69 74 65 5d 0a 00                           Write]..

000025eb <__c.4425>:
    25eb:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25fb:	20 52 65 61 64 5d 0a 00                              Read]..

00002603 <__c.4423>:
    2603:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    2613:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

0000261c <__c.4420>:
    261c:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    262c:	25 64 29 5d 0a 00                                   %d)]..

00002632 <__c.4418>:
    2632:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2642:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

0000264b <__c.4416>:
    264b:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    265b:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    266b:	52 4f 52 5d 0a 00                                   ROR]..

00002671 <__c.4407>:
    2671:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2681:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

0000268b <__c.4402>:
    268b:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    269b:	76 61 6c 69 64 5d 0a 00                             valid]..

000026a3 <__c.4397>:
    26a3:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    26b3:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

000026c2 <__c.4395>:
    26c2:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    26d2:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000026df <__c.4393>:
    26df:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    26ef:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    26ff:	5d 0a 00                                            ]..

00002702 <__c.4391>:
    2702:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002713 <__c.4383>:
    2713:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2723:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

0000272e <__c.4381>:
    272e:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    273e:	73 5d 0a 00                                         s]..

00002742 <__c.4371>:
    2742:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

0000274d <__c.4369>:
    274d:	25 73 3a 0a 00                                      %s:..

00002752 <__c.4344>:
    2752:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2762:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2772:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

0000277d <__c.4342>:
    277d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    278d:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    279d:	49 4e 49 53 48 5d 0a 00                             INISH]..

000027a5 <__c.4338>:
    27a5:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    27b5:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    27c5:	58 48 29 5d 0a 00                                   XH)]..

000027cb <__c.4336>:
    27cb:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    27db:	72 5d 0a 00                                         r]..

000027df <__c.4332>:
    27df:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    27ef:	5d 0a 00                                            ]..

000027f2 <__c.4330>:
    27f2:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2802:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    2812:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

0000281b <__c.4318>:
    281b:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    282b:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    283b:	62 79 74 65 73 5d 0a 00                             bytes]..

00002843 <__c.4316>:
    2843:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2853:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    2863:	53 48 5d 0a 00                                      SH]..

00002868 <__c.4311>:
    2868:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    2878:	20 45 72 72 6f 72 5d 0a 00                           Error]..

00002881 <__c.4309>:
    2881:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2891:	45 72 72 6f 72 5d 0a 00                             Error]..

00002899 <__c.4307>:
    2899:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    28a9:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

000028b7 <__c.4305>:
    28b7:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    28c7:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    28d7:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000028df <__c.4288>:
    28df:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    28ef:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

000028fb <__c.4272>:
    28fb:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    290b:	5d 0a 00                                            ]..

0000290e <__c.4388>:
    290e:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    291e:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    292e:	64 64 72 65 73 73 5d 0a 00                          ddress]..

00002937 <__c.4385>:
    2937:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    2947:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    2957:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002962 <__c.4382>:
    2962:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2972:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2982:	66 66 65 72 65 64 5d 0a 00                          ffered]..

0000298b <__c.4377>:
    298b:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    299b:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000029ab <__c.4374>:
    29ab:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    29bb:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

000029c7 <__c.4371>:
    29c7:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    29d7:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    29e7:	0a 00                                               ..

000029e9 <__c.4368>:
    29e9:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    29f9:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002a08 <__c.4365>:
    2a08:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2a18:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002a29 <__c.4362>:
    2a29:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2a39:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002a49 <__c.4358>:
    2a49:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2a59:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2a69:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2a79:	0a 00                                               ..

00002a7b <__c.4353>:
    2a7b:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002a8b <__c.4350>:
    2a8b:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2a9b:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002aaa <__c.4348>:
    2aaa:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2aba:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2aca:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002ad5 <__c.4346>:
    2ad5:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2ae5:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002af5 <__c.4344>:
    2af5:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2b05:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2b15:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002b1e <__c.4342>:
    2b1e:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2b2e:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002b3a <__c.4340>:
    2b3a:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2b4a:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2b5a:	0a 00                                               ..

00002b5c <__c.4338>:
    2b5c:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002b6c <__c.4335>:
    2b6c:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2b7c:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002b8d <__c.4333>:
    2b8d:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2b9d:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2bad:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002bb6 <__c.4331>:
    2bb6:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2bc6:	36 5d 0a 00                                         6]..

00002bca <__c.4328>:
    2bca:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2bda:	35 5d 0a 00                                         5]..

00002bde <__c.4325>:
    2bde:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2bee:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002bfe <__c.4322>:
    2bfe:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2c0e:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2c1e:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002c2d <__c.4320>:
    2c2d:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2c3d:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002c4e <__c.4318>:
    2c4e:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2c5e:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002c6f <__c.4316>:
    2c6f:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2c7f:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2c8f:	0a 00                                               ..

00002c91 <__c.4314>:
    2c91:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2ca1:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2cb1:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2cc1:	0a 00                                               ..

00002cc3 <__c.4302>:
    2cc3:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2cd3:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2ce3:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2cf3:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2d03:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002d14 <__c.4300>:
    2d14:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2d24:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d34:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2d44:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2d54:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002d64 <__c.4298>:
    2d64:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2d74:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d84:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2d94:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2da4:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002db4 <__c.4296>:
    2db4:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2dc4:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2dd4:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2de4:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2df4:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002e04 <__c.4291>:
    2e04:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2e14:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2e24:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2e34:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2e44:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2e54:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2e64:	58 48 5d 0a 00                                      XH]..

00002e69 <__c.4289>:
    2e69:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2e79:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e89:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2e99:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2ea9:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2eb9:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2ec9:	30 32 58 48 5d 0a 00                                02XH]..

00002ed0 <__c.4287>:
    2ed0:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2ee0:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2ef0:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2f00:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2f10:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2f20:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2f30:	30 32 58 48 5d 0a 00                                02XH]..

00002f37 <__c.4285>:
    2f37:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2f47:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2f57:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2f67:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2f77:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2f87:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2f97:	30 32 58 48 5d 0a 00                                02XH]..

00002f9e <__c.4278>:
    2f9e:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002fad <__c.4265>:
    2fad:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002fba <__c.4263>:
    2fba:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2fca:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002fd4 <__c.4256>:
    2fd4:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    2fe4:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

00002ff4 <__c.4254>:
    2ff4:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    3004:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00003013 <__c.4252>:
    3013:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    3023:	0a 00                                               ..

00003025 <__c.4245>:
    3025:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    3035:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000303f <__c.4239>:
    303f:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    304f:	0a 00                                               ..

00003051 <__c.4233>:
    3051:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    3061:	6e 65 5d 0a 00                                      ne]..

00003066 <__c.4229>:
    3066:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00003076 <__c.4188>:
    3076:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    3086:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    3096:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

000030a1 <__c.4218>:
    30a1:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    30b1:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    30c1:	25 30 34 58 48 5d 0a 00                             %04XH]..

000030c9 <__c.4195>:
    30c9:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    30d9:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

000030e2 <__c.4181>:
    30e2:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    30f2:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000030fc <__c.4179>:
    30fc:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    310c:	75 73 5d 0a 00                                      us]..

00003111 <__c.4173>:
    3111:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    3121:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000312b <__c.4171>:
    312b:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    313b:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00003149 <__c.4165>:
    3149:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    3159:	74 61 74 75 73 5d 0a 00                             tatus]..

00003161 <__c.4150>:
    3161:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    3171:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

0000317b <__c.4148>:
    317b:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    318b:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00003197 <__c.4143>:
    3197:	25 30 38 6c 64 0d 00                                %08ld..

0000319e <__c.4137>:
    319e:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    31ae:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

000031bf <__c.4131>:
    31bf:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

000031cd <__c.4129>:
    31cd:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    31dd:	69 74 65 0a 00                                      ite..

000031e2 <__c.4123>:
    31e2:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000031ee <__c.4121>:
    31ee:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    31fe:	6f 3a 25 73 0a 00                                   o:%s..

00003204 <__c.4119>:
    3204:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    3214:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    3224:	74 00                                               t.

00003226 <__c.4555>:
    3226:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    3236:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00003246 <__c.4553>:
    3246:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3256:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00003266 <__c.4551>:
    3266:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3276:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    3286:	30 0a 00                                            0..

00003289 <__c.4549>:
    3289:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3299:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    32a9:	70 74 79 0a 00                                      pty..

000032ae <__c.4547>:
    32ae:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32be:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    32ce:	73 20 65 6d 70 74 79 0a 00                          s empty..

000032d7 <__c.4534>:
    32d7:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    32e7:	20 25 31 30 73 0a 00                                 %10s..

000032ee <__c.4532>:
    32ee:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    32fe:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    330e:	74 20 66 6f 75 6e 64 0a 00                          t found..

00003317 <__c.4530>:
    3317:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3327:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    3337:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    3347:	74 65 72 73 0a 00                                   ters..

0000334d <__c.4528>:
    334d:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    335d:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    336d:	65 6d 70 74 79 0a 00                                empty..

00003374 <__c.4526>:
    3374:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3384:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    3394:	65 6d 70 74 79 0a 00                                empty..

0000339b <__c.4524>:
    339b:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33ab:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    33bb:	20 65 6d 70 74 79 0a 00                              empty..

000033c3 <__c.4515>:
    33c3:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

000033d2 <__c.4513>:
    33d2:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    33e2:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    33f2:	20 66 6f 75 6e 64 0a 00                              found..

000033fa <__c.4511>:
    33fa:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    340a:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

00003419 <__c.4509>:
    3419:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3429:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

00003439 <__c.4507>:
    3439:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3449:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    3459:	70 74 79 0a 00                                      pty..

0000345e <__c.4499>:
    345e:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000346c <__c.4494>:
    346c:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000347a <__c.4492>:
    347a:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    348a:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    349a:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000034aa <__c.4490>:
    34aa:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    34ba:	73 0a 00                                            s..

000034bd <__c.4488>:
    34bd:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34cd:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    34dd:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000034ec <__c.4486>:
    34ec:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    34fc:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

00003508 <__c.4484>:
    3508:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    3518:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003523 <__c.4482>:
    3523:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3533:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003543 <__c.4465>:
    3543:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003551 <__c.4460>:
    3551:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000355f <__c.4458>:
    355f:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    356f:	73 0a 00                                            s..

00003572 <__c.4456>:
    3572:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3582:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000358a <__c.4439>:
    358a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003598 <__c.4436>:
    3598:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    35a8:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    35b8:	20 65 72 72 6f 72 0a 00                              error..

000035c0 <__c.4428>:
    35c0:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035ce <__c.4426>:
    35ce:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    35de:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    35ee:	20 65 72 72 6f 72 0a 00                              error..

000035f6 <__c.4423>:
    35f6:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3606:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    3616:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    3626:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3636:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    3646:	30 32 58 48 0a 00                                   02XH..

0000364c <__c.4421>:
    364c:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    365c:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    366c:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    367c:	20 25 64 0a 00                                       %d..

00003681 <__c.4417>:
    3681:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003691 <__c.4415>:
    3691:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    36a1:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    36b1:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    36c1:	30 78 45 30 31 33 0a 00                             0xE013..

000036c9 <__c.4413>:
    36c9:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    36d9:	6e 64 3a 25 73 0a 00                                nd:%s..

000036e0 <__c.4411>:
    36e0:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    36f0:	75 6e 64 3a 25 73 0a 00                             und:%s..

000036f8 <__c.4387>:
    36f8:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003706 <__c.4385>:
    3706:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    3716:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000371f <__c.4383>:
    371f:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    372f:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003738 <__c.4381>:
    3738:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    3748:	20 20 25 34 64 0a 00                                  %4d..

0000374f <__c.4379>:
    374f:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    375f:	20 20 20 25 73 0a 00                                   %s..

00003766 <__c.4377>:
    3766:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3776:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3786:	77 72 69 74 65 0a 00                                write..

0000378d <__c.4375>:
    378d:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    379d:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    37ad:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000037bd <__c.4373>:
    37bd:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    37cd:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    37dd:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000037ec <__c.4371>:
    37ec:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    37fc:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    380c:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

0000381c <__c.4369>:
    381c:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    382c:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    383c:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

0000384b <__c.4367>:
    384b:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    385b:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    386b:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003879 <__c.4365>:
    3879:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3889:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3899:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    38a9:	79 0a 00                                            y..

000038ac <__c.4351>:
    38ac:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000038ba <__c.4349>:
    38ba:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000038c8 <__c.4344>:
    38c8:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000038d6 <__c.4327>:
    38d6:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    38e6:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    38f6:	25 64 0a 00                                         %d..

000038fa <__c.4310>:
    38fa:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    390a:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    391a:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    392a:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

00003933 <__c.4296>:
    3933:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3943:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3953:	62 69 67 0a 00                                      big..

00003958 <__c.4294>:
    3958:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3968:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3978:	63 74 65 72 73 0a 00                                cters..

0000397f <__c.4287>:
    397f:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    398f:	73 0a 00                                            s..

00003992 <__c.4285>:
    3992:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    39a2:	73 0a 00                                            s..

000039a5 <__c.4283>:
    39a5:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    39b5:	73 0a 00                                            s..

000039b8 <__c.4281>:
    39b8:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

000039c9 <__c.4279>:
    39c9:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000039d6 <__c.4277>:
    39d6:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000039e2 <__c.4275>:
    39e2:	0a 00                                               ..

000039e4 <__c.4272>:
    39e4:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    39f4:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    3a04:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003a14 <__c.4270>:
    3a14:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a24:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3a34:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3a44:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3a54:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003a60 <__c.4267>:
    3a60:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3a70:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3a80:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3a90:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003aa0 <__c.4265>:
    3aa0:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3ab0:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003ab7 <__c.4255>:
    3ab7:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3ac7:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3ad7:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3ae7:	64 0a 00                                            d..

00003aea <__c.4253>:
    3aea:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3afa:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3b0a:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3b1a:	64 0a 00                                            d..

00003b1d <__c.4251>:
    3b1d:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b2d:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3b3d:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3b4d:	69 6c 65 64 0a 00                                   iled..

00003b53 <__c.4249>:
    3b53:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b63:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3b73:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3b83:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003b92 <__c.4236>:
    3b92:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3ba2:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3bb2:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3bc2:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3bd2:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003be3 <__c.4233>:
    3be3:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3bf3:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c03:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003c0c <__c.4231>:
    3c0c:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3c1c:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c2c:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3c3c:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003c44 <__c.4219>:
    3c44:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3c54:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3c64:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3c74:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3c84:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003c91 <__c.4194>:
    3c91:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3ca1:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003cb1 <__c.4185>:
    3cb1:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3cc1:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3cd1:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3ce1:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003ceb <__c.4166>:
    3ceb:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003cf8 <__c.4161>:
    3cf8:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003d05 <__c.4156>:
    3d05:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003d12 <__c.4148>:
    3d12:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003d1f <__c.4146>:
    3d1f:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3d2f:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3d3f:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3d4f:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3d5f:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3d6f:	25 6c 64 0a 00                                      %ld..

00003d74 <__c.4130>:
    3d74:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d84:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3d94:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003da0 <__c.4128>:
    3da0:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3db0:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3dc0:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003dcb <__c.4126>:
    3dcb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ddb:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3deb:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3dfb:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3e0b:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003e16 <__c.4124>:
    3e16:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e26:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3e36:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3e46:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3e56:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003e61 <__c.4122>:
    3e61:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e71:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3e81:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003e8f <__c.4120>:
    3e8f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e9f:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3eaf:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3ebf:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003ed0 <__c.4118>:
    3ed0:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ee0:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3ef0:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3f00:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3f10:	58 68 0a 00                                         Xh..

00003f14 <__c.4116>:
    3f14:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f24:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003f35 <__c.4110>:
    3f35:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f45:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3f55:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003f61 <__c.4108>:
    3f61:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f71:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3f81:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003f90 <__c.4106>:
    3f90:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fa0:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3fb0:	25 6c 64 0a 00                                      %ld..

00003fb5 <__c.4104>:
    3fb5:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fc5:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3fd5:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3fe5:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003fee <__c.4102>:
    3fee:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3ffe:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    400e:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    401e:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00004027 <__c.4100>:
    4027:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    4037:	58 48 20 3e 20 31 0a 00                             XH > 1..

0000403f <__c.4098>:
    403f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    404f:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    405f:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    406f:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00004078 <__c.4096>:
    4078:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4088:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00004097 <__c.4089>:
    4097:	0a 00                                               ..

00004099 <__c.4087>:
    4099:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    40a9:	20 20 20 20 20 20 25 73 0a 00                             %s..

000040b3 <__c.4085>:
    40b3:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    40c3:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

000040cf <__c.4083>:
    40cf:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    40df:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040ec <__c.4081>:
    40ec:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    40fc:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004109 <__c.4079>:
    4109:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    4119:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004126 <__c.4077>:
    4126:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    4136:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00004142 <__c.4075>:
    4142:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    4152:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000415e <__c.4073>:
    415e:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    416e:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004178 <__c.4071>:
    4178:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    4188:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004192 <__c.4069>:
    4192:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    41a2:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000041ae <__c.4067>:
    41ae:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    41be:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000041ca <__c.4065>:
    41ca:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    41da:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041e7 <__c.4063>:
    41e7:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    41f7:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004204 <__c.4061>:
    4204:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    4214:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004220 <__c.4059>:
    4220:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    4230:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000423a <__c.4057>:
    423a:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    424a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004257 <__c.4055>:
    4257:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    4267:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004274 <__c.4053>:
    4274:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    4284:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004291 <__c.4051>:
    4291:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    42a1:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042ae <__c.4049>:
    42ae:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    42be:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

000042cb <__c.4047>:
    42cb:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    42db:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042e8 <__c.4045>:
    42e8:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    42f8:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004305 <__c.4043>:
    4305:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    4315:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004322 <__c.4041>:
    4322:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4332:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000433c <__c.4039>:
    433c:	0a 25 73 0a 00                                      .%s..

00004341 <__c.3916>:
    4341:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4351:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4361:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4371:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

0000437e <__c.3907>:
    437e:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    438e:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    439e:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    43ae:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

000043ba <__c.3898>:
    43ba:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    43ca:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

000043db <__c.3891>:
    43db:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    43eb:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000043f4 <__c.3885>:
    43f4:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    4404:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    4414:	25 73 5d 0a 00                                      %s]..

00004419 <__c.3873>:
    4419:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    4429:	6f 69 6e 74 65 72 0a 00                             ointer..

00004431 <__c.3868>:
    4431:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    4441:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4451:	20 6d 65 6d 6f 72 79 0a 00                           memory..

0000445a <__c.3862>:
    445a:	74 64 30 32 6c 69 66 20 73 75 70 70 6f 72 74 20     td02lif support 
    446a:	6e 6f 74 20 65 6e 61 62 6c 65 64 0a 00              not enabled..

00004477 <__c.3860>:
    4477:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    4487:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004498 <__c.3847>:
    4498:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    44a8:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    44b8:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    44c8:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    44d8:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    44e8:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    44f8:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    4508:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    4518:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    4528:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    4538:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    4548:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    4558:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4568:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4578:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    4588:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4598:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    45a8:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    45b8:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    45c8:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    45d8:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    45e8:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    45f8:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    4608:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    4618:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    4628:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    4638:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    4648:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    4658:	67 0a 0a 00                                         g...

0000465c <__c.3845>:
    465c:	6c 69 66 20 20 20 20 20 20 20 68 65 6c 70 0a 00     lif       help..

0000466c <__c.4641>:
    466c:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    467c:	53 4b 0a 00                                         SK..

00004680 <__c.4639>:
    4680:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4690:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000469a <__c.4637>:
    469a:	25 2d 31 36 73 00                                   %-16s.

000046a0 <__c.4635>:
    46a0:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    46b0:	30 34 78 48 0a 00                                   04xH..

000046b6 <__c.4633>:
    46b6:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    46c6:	64 6f 6e 65 0a 00                                   done..

000046cc <__c.4631>:
    46cc:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    46dc:	6f 6e 65 0a 00                                      one..

000046e1 <__c.4629>:
    46e1:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    46f1:	61 6c 69 7a 65 64 0a 00                             alized..

000046f9 <__c.4627>:
    46f9:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    4709:	0a 00                                               ..

0000470b <__c.4625>:
    470b:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    471b:	7a 65 64 0a 00                                      zed..

00004720 <__c.4623>:
    4720:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    4730:	69 7a 65 64 0a 00                                   ized..

00004736 <__c.4621>:
    4736:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

00004747 <__c.4619>:
    4747:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    4757:	20 73 74 61 72 74 0a 00                              start..

0000475f <__c.4617>:
    475f:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    476f:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    477f:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

0000478d <__c.4615>:
    478d:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

0000479c <__c.4613>:
    479c:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    47ac:	0a 00                                               ..

000047ae <__c.4611>:
    47ae:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    47be:	20 62 75 73 0a 00                                    bus..

000047c4 <__c.4609>:
    47c4:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    47d4:	20 62 75 73 0a 00                                    bus..

000047da <__c.4607>:
    47da:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    47ea:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000047f4 <__c.4605>:
    47f4:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4804:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

0000480e <__c.4603>:
    480e:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    481e:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    482e:	35 64 69 73 6b 0a 00                                5disk..

00004835 <__c.4601>:
    4835:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004845 <__c.4599>:
    4845:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4855:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004862 <__c.4597>:
    4862:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4872:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004881 <__c.4595>:
    4881:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    4891:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    48a1:	3a 20 25 6c 64 0a 00                                : %ld..

000048a8 <__c.4593>:
    48a8:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

000048b9 <__c.4591>:
    48b9:	53 74 61 72 74 0a 00                                Start..

000048c0 <__c.4583>:
    48c0:	25 2d 31 36 73 00                                   %-16s.

000048c6 <__c.4581>:
    48c6:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

000048d7 <__c.4573>:
    48d7:	20 20 20 20 20 20 20 5b 25 73 5d 0a 00                     [%s]..

000048e4 <__c.4571>:
    48e4:	20 20 20 20 41 72 67 75 6d 65 6e 74 20 63 6f 75         Argument cou
    48f4:	6e 74 20 3d 20 25 64 0a 00                          nt = %d..

000048fd <__c.4569>:
    48fd:	49 6e 76 61 6c 69 64 20 43 6f 6d 6d 61 6e 64 0a     Invalid Command.
	...

0000490e <__c.4567>:
    490e:	43 6f 6d 6d 61 6e 64 20 46 41 49 4c 45 44 0a 00     Command FAILED..

0000491e <__c.4565>:
    491e:	4f 4b 0a 00                                         OK..

00004922 <__c.4557>:
    4922:	49 6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 3a     Input debugging:
    4932:	20 25 73 0a 00                                       %s..

00004937 <__c.4552>:
    4937:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

00004940 <__c.4550>:
    4940:	41 72 67 75 6d 65 6e 74 20 63 6f 75 6e 74 20 3d     Argument count =
    4950:	20 25 64 0a 00                                       %d..

00004955 <__c.4548>:
    4955:	0a 3e 00                                            .>.

00004958 <__c.4535>:
    4958:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    4968:	42 42 0a 64 69 72 20 20 20 20 20 20 20 64 69 72     BB.dir       dir
    4978:	65 63 74 6f 72 69 65 73 20 6c 69 73 74 0a 69 6e     ectories list.in
    4988:	70 75 74 20 20 20 2d 20 74 6f 67 67 6c 65 20 69     put   - toggle i
    4998:	6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 0a 6d     nput debugging.m
    49a8:	65 6d 20 20 20 20 20 2d 20 64 69 73 70 6c 61 79     em     - display
    49b8:	20 66 72 65 65 20 6d 65 6d 6f 72 79 0a 72 65 73      free memory.res
    49c8:	65 74 20 20 20 2d 20 72 65 73 65 74 20 65 6d 75     et   - reset emu
    49d8:	6c 61 74 6f 72 0a 73 65 74 64 61 74 65 20 2d 20     lator.setdate - 
    49e8:	73 65 74 20 64 61 74 65 0a 74 69 6d 65 20 20 20     set date.time   
    49f8:	20 2d 20 64 69 73 70 6c 61 79 20 63 75 72 72 65      - display curre
    4a08:	6e 74 20 74 69 6d 65 0a 0a 00                       nt time...

00004a12 <__c.4533>:
    4a12:	68 65 6c 70 20 20 20 20 20 2d 20 64 69 73 70 6c     help     - displ
    4a22:	61 79 73 20 74 68 69 73 20 68 65 6c 70 20 6d 65     ays this help me
    4a32:	6e 75 0a 00                                         nu..

00004a36 <__c.4526>:
    4a36:	25 2d 31 36 73 00                                   %-16s.

00004a3c <__c.4524>:
    4a3c:	25 2d 31 36 73 00                                   %-16s.

00004a42 <__c.4517>:
    4a42:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4a52:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004a5c <__c.4515>:
    4a5c:	25 2d 31 36 73 00                                   %-16s.

00004a62 <__c.4513>:
    4a62:	25 2d 31 36 73 00                                   %-16s.

00004a68 <__c.4511>:
    4a68:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    4a78:	69 6c 65 64 0a 00                                   iled..

00004a7e <__c.4509>:
    4a7e:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4a8e:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004a9c <__c.4503>:
    4a9c:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4aac:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004ab6 <__c.4497>:
    4ab6:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    4ac6:	3a 25 30 32 64 00                                   :%02d.

00004acc <__c.4483>:
    4acc:	0a 00                                               ..

00004ace <__c.4481>:
    4ace:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4ade:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004ae8 <__c.4479>:
    4ae8:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4af8:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004b02 <__c.4477>:
    4b02:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4b12:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4b22:	35 64 69 73 6b 0a 00                                5disk..

00004b29 <__c.4475>:
    4b29:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004b39 <__c.4473>:
    4b39:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4b49:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004b56 <__c.4471>:
    4b56:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4b66:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 20 77 69     vice Emulator wi
    4b76:	74 68 20 62 75 69 6c 74 20 69 6e 20 4c 49 46 20     th built in LIF 
    4b86:	75 74 69 6c 69 74 69 65 73 0a 00 00                 utilities...

00004b92 <__ctors_end>:
    4b92:	11 24       	eor	r1, r1
    4b94:	1f be       	out	0x3f, r1	; 63
    4b96:	cf ef       	ldi	r28, 0xFF	; 255
    4b98:	d0 e4       	ldi	r29, 0x40	; 64
    4b9a:	de bf       	out	0x3e, r29	; 62
    4b9c:	cd bf       	out	0x3d, r28	; 61

00004b9e <__do_copy_data>:
    4b9e:	17 e1       	ldi	r17, 0x17	; 23
    4ba0:	a0 e0       	ldi	r26, 0x00	; 0
    4ba2:	b1 e0       	ldi	r27, 0x01	; 1
    4ba4:	e8 e6       	ldi	r30, 0x68	; 104
    4ba6:	f5 ed       	ldi	r31, 0xD5	; 213
    4ba8:	01 e0       	ldi	r16, 0x01	; 1
    4baa:	0b bf       	out	0x3b, r16	; 59
    4bac:	02 c0       	rjmp	.+4      	; 0x4bb2 <__do_copy_data+0x14>
    4bae:	07 90       	elpm	r0, Z+
    4bb0:	0d 92       	st	X+, r0
    4bb2:	a6 35       	cpi	r26, 0x56	; 86
    4bb4:	b1 07       	cpc	r27, r17
    4bb6:	d9 f7       	brne	.-10     	; 0x4bae <__do_copy_data+0x10>

00004bb8 <__do_clear_bss>:
    4bb8:	20 e2       	ldi	r18, 0x20	; 32
    4bba:	a6 e5       	ldi	r26, 0x56	; 86
    4bbc:	b7 e1       	ldi	r27, 0x17	; 23
    4bbe:	01 c0       	rjmp	.+2      	; 0x4bc2 <.do_clear_bss_start>

00004bc0 <.do_clear_bss_loop>:
    4bc0:	1d 92       	st	X+, r1

00004bc2 <.do_clear_bss_start>:
    4bc2:	a8 33       	cpi	r26, 0x38	; 56
    4bc4:	b2 07       	cpc	r27, r18
    4bc6:	e1 f7       	brne	.-8      	; 0x4bc0 <.do_clear_bss_loop>
    4bc8:	0e 94 4d e4 	call	0x1c89a	; 0x1c89a <main>
    4bcc:	0c 94 b2 ea 	jmp	0x1d564	; 0x1d564 <_exit>

00004bd0 <__bad_interrupt>:
    4bd0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004bd4 <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    4bd4:	e8 2f       	mov	r30, r24
    4bd6:	e6 95       	lsr	r30
    4bd8:	e6 95       	lsr	r30
    4bda:	e6 95       	lsr	r30
    4bdc:	93 e0       	ldi	r25, 0x03	; 3
    4bde:	e9 9f       	mul	r30, r25
    4be0:	f0 01       	movw	r30, r0
    4be2:	11 24       	eor	r1, r1
    4be4:	32 a1       	ldd	r19, Z+34	; 0x22
    4be6:	28 2f       	mov	r18, r24
    4be8:	27 70       	andi	r18, 0x07	; 7
    4bea:	81 e0       	ldi	r24, 0x01	; 1
    4bec:	90 e0       	ldi	r25, 0x00	; 0
    4bee:	01 c0       	rjmp	.+2      	; 0x4bf2 <chip_select+0x1e>
    4bf0:	88 0f       	add	r24, r24
    4bf2:	2a 95       	dec	r18
    4bf4:	ea f7       	brpl	.-6      	; 0x4bf0 <chip_select+0x1c>
    4bf6:	98 2f       	mov	r25, r24
    4bf8:	90 95       	com	r25
    4bfa:	93 23       	and	r25, r19
    4bfc:	92 a3       	std	Z+34, r25	; 0x22
    4bfe:	91 a1       	ldd	r25, Z+33	; 0x21
    4c00:	89 2b       	or	r24, r25
    4c02:	81 a3       	std	Z+33, r24	; 0x21
    4c04:	08 95       	ret

00004c06 <chip_deselect>:
    4c06:	e8 2f       	mov	r30, r24
    4c08:	e6 95       	lsr	r30
    4c0a:	e6 95       	lsr	r30
    4c0c:	e6 95       	lsr	r30
    4c0e:	93 e0       	ldi	r25, 0x03	; 3
    4c10:	e9 9f       	mul	r30, r25
    4c12:	f0 01       	movw	r30, r0
    4c14:	11 24       	eor	r1, r1
    4c16:	32 a1       	ldd	r19, Z+34	; 0x22
    4c18:	28 2f       	mov	r18, r24
    4c1a:	27 70       	andi	r18, 0x07	; 7
    4c1c:	81 e0       	ldi	r24, 0x01	; 1
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	01 c0       	rjmp	.+2      	; 0x4c24 <chip_deselect+0x1e>
    4c22:	88 0f       	add	r24, r24
    4c24:	2a 95       	dec	r18
    4c26:	ea f7       	brpl	.-6      	; 0x4c22 <chip_deselect+0x1c>
    4c28:	93 2f       	mov	r25, r19
    4c2a:	98 2b       	or	r25, r24
    4c2c:	92 a3       	std	Z+34, r25	; 0x22
    4c2e:	91 a1       	ldd	r25, Z+33	; 0x21
    4c30:	89 2b       	or	r24, r25
    4c32:	81 a3       	std	Z+33, r24	; 0x21
    4c34:	08 95       	ret

00004c36 <chip_select_init>:
    4c36:	e7 cf       	rjmp	.-50     	; 0x4c06 <chip_deselect>
    4c38:	08 95       	ret

00004c3a <spi_end>:
    4c3a:	cf 93       	push	r28
    4c3c:	ad b7       	in	r26, 0x3d	; 61
    4c3e:	be b7       	in	r27, 0x3e	; 62
    4c40:	17 97       	sbiw	r26, 0x07	; 7
    4c42:	0f b6       	in	r0, 0x3f	; 63
    4c44:	f8 94       	cli
    4c46:	be bf       	out	0x3e, r27	; 62
    4c48:	0f be       	out	0x3f, r0	; 63
    4c4a:	ad bf       	out	0x3d, r26	; 61
    4c4c:	c8 2f       	mov	r28, r24
    4c4e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4c52:	8c 17       	cp	r24, r28
    4c54:	99 f0       	breq	.+38     	; 0x4c7c <spi_end+0x42>
    4c56:	8f 3f       	cpi	r24, 0xFF	; 255
    4c58:	89 f0       	breq	.+34     	; 0x4c7c <spi_end+0x42>
    4c5a:	2c 2f       	mov	r18, r28
    4c5c:	30 e0       	ldi	r19, 0x00	; 0
    4c5e:	ed b7       	in	r30, 0x3d	; 61
    4c60:	fe b7       	in	r31, 0x3e	; 62
    4c62:	37 83       	std	Z+7, r19	; 0x07
    4c64:	26 83       	std	Z+6, r18	; 0x06
    4c66:	90 e0       	ldi	r25, 0x00	; 0
    4c68:	95 83       	std	Z+5, r25	; 0x05
    4c6a:	84 83       	std	Z+4, r24	; 0x04
    4c6c:	82 ec       	ldi	r24, 0xC2	; 194
    4c6e:	91 e0       	ldi	r25, 0x01	; 1
    4c70:	a0 e0       	ldi	r26, 0x00	; 0
    4c72:	81 83       	std	Z+1, r24	; 0x01
    4c74:	92 83       	std	Z+2, r25	; 0x02
    4c76:	a3 83       	std	Z+3, r26	; 0x03
    4c78:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    4c7c:	8c 2f       	mov	r24, r28
    4c7e:	c3 df       	rcall	.-122    	; 0x4c06 <chip_deselect>
    4c80:	8f ef       	ldi	r24, 0xFF	; 255
    4c82:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4c86:	ad b7       	in	r26, 0x3d	; 61
    4c88:	be b7       	in	r27, 0x3e	; 62
    4c8a:	17 96       	adiw	r26, 0x07	; 7
    4c8c:	0f b6       	in	r0, 0x3f	; 63
    4c8e:	f8 94       	cli
    4c90:	be bf       	out	0x3e, r27	; 62
    4c92:	0f be       	out	0x3f, r0	; 63
    4c94:	ad bf       	out	0x3d, r26	; 61
    4c96:	cf 91       	pop	r28
    4c98:	08 95       	ret

00004c9a <spi_TX_buffer>:
    4c9a:	cd c4       	rjmp	.+2458   	; 0x5636 <SPI0_TX>
    4c9c:	08 95       	ret

00004c9e <spi_RX_buffer>:
    4c9e:	f5 c4       	rjmp	.+2538   	; 0x568a <SPI0_RX>
    4ca0:	08 95       	ret

00004ca2 <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    4ca2:	a1 e0       	ldi	r26, 0x01	; 1
    4ca4:	b0 e0       	ldi	r27, 0x00	; 0
    4ca6:	e7 e5       	ldi	r30, 0x57	; 87
    4ca8:	f6 e2       	ldi	r31, 0x26	; 38
    4caa:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    4cae:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    4cb0:	61 e0       	ldi	r22, 0x01	; 1
    4cb2:	70 e0       	ldi	r23, 0x00	; 0
    4cb4:	ce 01       	movw	r24, r28
    4cb6:	01 96       	adiw	r24, 0x01	; 1
    4cb8:	be d4       	rcall	.+2428   	; 0x5636 <SPI0_TX>
#endif
}
    4cba:	21 96       	adiw	r28, 0x01	; 1
    4cbc:	e2 e0       	ldi	r30, 0x02	; 2
    4cbe:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00004cc2 <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    4cc2:	cf 92       	push	r12
    4cc4:	df 92       	push	r13
    4cc6:	ef 92       	push	r14
    4cc8:	ff 92       	push	r15
    4cca:	6b 01       	movw	r12, r22
    4ccc:	7c 01       	movw	r14, r24
    4cce:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    4cd0:	9a df       	rcall	.-204    	; 0x4c06 <chip_deselect>
    _cs_pin = 0xff;
    4cd2:	8f ef       	ldi	r24, 0xFF	; 255
    4cd4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    4cd8:	c7 01       	movw	r24, r14
    4cda:	b6 01       	movw	r22, r12
    4cdc:	7f d4       	rcall	.+2302   	; 0x55dc <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    4cde:	80 e0       	ldi	r24, 0x00	; 0
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    4ce2:	3c d4       	rcall	.+2168   	; 0x555c <SPI0_Mode>
    4ce4:	8f ef       	ldi	r24, 0xFF	; 255
    4ce6:	dd df       	rcall	.-70     	; 0x4ca2 <spi_TX>
    _spi_clock = clock;
    4ce8:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4cec:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4cf0:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4cf4:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    4cf8:	ff 90       	pop	r15
    4cfa:	ef 90       	pop	r14
    4cfc:	df 90       	pop	r13
    4cfe:	cf 90       	pop	r12
    4d00:	08 95       	ret

00004d02 <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    4d02:	cf 92       	push	r12
    4d04:	df 92       	push	r13
    4d06:	ef 92       	push	r14
    4d08:	ff 92       	push	r15
    4d0a:	cf 93       	push	r28
    4d0c:	df 93       	push	r29
    4d0e:	ad b7       	in	r26, 0x3d	; 61
    4d10:	be b7       	in	r27, 0x3e	; 62
    4d12:	17 97       	sbiw	r26, 0x07	; 7
    4d14:	0f b6       	in	r0, 0x3f	; 63
    4d16:	f8 94       	cli
    4d18:	be bf       	out	0x3e, r27	; 62
    4d1a:	0f be       	out	0x3f, r0	; 63
    4d1c:	ad bf       	out	0x3d, r26	; 61
    4d1e:	6b 01       	movw	r12, r22
    4d20:	7c 01       	movw	r14, r24
    4d22:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    4d24:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4d28:	8f 3f       	cpi	r24, 0xFF	; 255
    4d2a:	79 f0       	breq	.+30     	; 0x4d4a <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    4d2c:	ed b7       	in	r30, 0x3d	; 61
    4d2e:	fe b7       	in	r31, 0x3e	; 62
    4d30:	46 83       	std	Z+6, r20	; 0x06
    4d32:	d7 83       	std	Z+7, r29	; 0x07
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	95 83       	std	Z+5, r25	; 0x05
    4d38:	84 83       	std	Z+4, r24	; 0x04
    4d3a:	80 ee       	ldi	r24, 0xE0	; 224
    4d3c:	91 e0       	ldi	r25, 0x01	; 1
    4d3e:	a0 e0       	ldi	r26, 0x00	; 0
    4d40:	81 83       	std	Z+1, r24	; 0x01
    4d42:	92 83       	std	Z+2, r25	; 0x02
    4d44:	a3 83       	std	Z+3, r26	; 0x03
    4d46:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    4d4a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4d4e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    4d52:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    4d56:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    4d5a:	8c 15       	cp	r24, r12
    4d5c:	9d 05       	cpc	r25, r13
    4d5e:	ae 05       	cpc	r26, r14
    4d60:	bf 05       	cpc	r27, r15
    4d62:	21 f0       	breq	.+8      	; 0x4d6c <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    4d64:	ae 01       	movw	r20, r28
    4d66:	c7 01       	movw	r24, r14
    4d68:	b6 01       	movw	r22, r12
    4d6a:	ab df       	rcall	.-170    	; 0x4cc2 <spi_init>
    }

    chip_select(pin);
    4d6c:	8c 2f       	mov	r24, r28
    4d6e:	32 df       	rcall	.-412    	; 0x4bd4 <chip_select>
    _cs_pin = pin;
    4d70:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    4d74:	ad b7       	in	r26, 0x3d	; 61
    4d76:	be b7       	in	r27, 0x3e	; 62
    4d78:	17 96       	adiw	r26, 0x07	; 7
    4d7a:	0f b6       	in	r0, 0x3f	; 63
    4d7c:	f8 94       	cli
    4d7e:	be bf       	out	0x3e, r27	; 62
    4d80:	0f be       	out	0x3f, r0	; 63
    4d82:	ad bf       	out	0x3d, r26	; 61
    4d84:	df 91       	pop	r29
    4d86:	cf 91       	pop	r28
    4d88:	ff 90       	pop	r15
    4d8a:	ef 90       	pop	r14
    4d8c:	df 90       	pop	r13
    4d8e:	cf 90       	pop	r12
    4d90:	08 95       	ret

00004d92 <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    4d92:	a1 e0       	ldi	r26, 0x01	; 1
    4d94:	b0 e0       	ldi	r27, 0x00	; 0
    4d96:	ef ec       	ldi	r30, 0xCF	; 207
    4d98:	f6 e2       	ldi	r31, 0x26	; 38
    4d9a:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    4d9e:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    4da0:	61 e0       	ldi	r22, 0x01	; 1
    4da2:	70 e0       	ldi	r23, 0x00	; 0
    4da4:	ce 01       	movw	r24, r28
    4da6:	01 96       	adiw	r24, 0x01	; 1
    4da8:	5a d4       	rcall	.+2228   	; 0x565e <SPI0_TXRX>
#endif
    return(data);
}
    4daa:	89 81       	ldd	r24, Y+1	; 0x01
    4dac:	21 96       	adiw	r28, 0x01	; 1
    4dae:	e2 e0       	ldi	r30, 0x02	; 2
    4db0:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00004db4 <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    4db4:	80 93 56 17 	sts	0x1756, r24	; 0x801756 <__data_end>
    GPIO_PIN_HI(LED2);
    4db8:	2c 9a       	sbi	0x05, 4	; 5
    4dba:	24 9a       	sbi	0x04, 4	; 4
    4dbc:	08 95       	ret

00004dbe <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4dbe:	10 92 56 17 	sts	0x1756, r1	; 0x801756 <__data_end>
    GPIO_PIN_LOW(LED2);
    4dc2:	2c 98       	cbi	0x05, 4	; 5
    4dc4:	24 9a       	sbi	0x04, 4	; 4
    4dc6:	08 95       	ret

00004dc8 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4dc8:	a2 e0       	ldi	r26, 0x02	; 2
    4dca:	b0 e0       	ldi	r27, 0x00	; 0
    4dcc:	ea ee       	ldi	r30, 0xEA	; 234
    4dce:	f6 e2       	ldi	r31, 0x26	; 38
    4dd0:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4dd4:	20 91 34 20 	lds	r18, 0x2034	; 0x802034 <__brkval>
    4dd8:	30 91 35 20 	lds	r19, 0x2035	; 0x802035 <__brkval+0x1>
    4ddc:	21 15       	cp	r18, r1
    4dde:	31 05       	cpc	r19, r1
    4de0:	11 f4       	brne	.+4      	; 0x4de6 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4de2:	28 e3       	ldi	r18, 0x38	; 56
    4de4:	30 e2       	ldi	r19, 0x20	; 32

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4de6:	ce 01       	movw	r24, r28
    4de8:	01 96       	adiw	r24, 0x01	; 1
    4dea:	82 1b       	sub	r24, r18
    4dec:	93 0b       	sbc	r25, r19
    4dee:	22 96       	adiw	r28, 0x02	; 2
    4df0:	e2 e0       	ldi	r30, 0x02	; 2
    4df2:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00004df6 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4df6:	a9 e0       	ldi	r26, 0x09	; 9
    4df8:	b0 e0       	ldi	r27, 0x00	; 0
    4dfa:	e1 e0       	ldi	r30, 0x01	; 1
    4dfc:	f7 e2       	ldi	r31, 0x27	; 39
    4dfe:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4e02:	e2 df       	rcall	.-60     	; 0x4dc8 <freeRam>
    4e04:	99 87       	std	Y+9, r25	; 0x09
    4e06:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    4e08:	ed b7       	in	r30, 0x3d	; 61
    4e0a:	fe b7       	in	r31, 0x3e	; 62
    4e0c:	95 83       	std	Z+5, r25	; 0x05
    4e0e:	84 83       	std	Z+4, r24	; 0x04
    4e10:	87 e0       	ldi	r24, 0x07	; 7
    4e12:	93 e0       	ldi	r25, 0x03	; 3
    4e14:	a0 e0       	ldi	r26, 0x00	; 0
    4e16:	81 83       	std	Z+1, r24	; 0x01
    4e18:	92 83       	std	Z+2, r25	; 0x02
    4e1a:	a3 83       	std	Z+3, r26	; 0x03
    4e1c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4e20:	8f ef       	ldi	r24, 0xFF	; 255
    4e22:	90 e4       	ldi	r25, 0x40	; 64
    4e24:	ed b7       	in	r30, 0x3d	; 61
    4e26:	fe b7       	in	r31, 0x3e	; 62
    4e28:	95 83       	std	Z+5, r25	; 0x05
    4e2a:	84 83       	std	Z+4, r24	; 0x04
    4e2c:	84 ef       	ldi	r24, 0xF4	; 244
    4e2e:	92 e0       	ldi	r25, 0x02	; 2
    4e30:	a0 e0       	ldi	r26, 0x00	; 0
    4e32:	81 83       	std	Z+1, r24	; 0x01
    4e34:	92 83       	std	Z+2, r25	; 0x02
    4e36:	a3 83       	std	Z+3, r26	; 0x03
    4e38:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4e3c:	ce 01       	movw	r24, r28
    4e3e:	08 96       	adiw	r24, 0x08	; 8
    4e40:	ed b7       	in	r30, 0x3d	; 61
    4e42:	fe b7       	in	r31, 0x3e	; 62
    4e44:	95 83       	std	Z+5, r25	; 0x05
    4e46:	84 83       	std	Z+4, r24	; 0x04
    4e48:	81 ee       	ldi	r24, 0xE1	; 225
    4e4a:	92 e0       	ldi	r25, 0x02	; 2
    4e4c:	a0 e0       	ldi	r26, 0x00	; 0
    4e4e:	81 83       	std	Z+1, r24	; 0x01
    4e50:	92 83       	std	Z+2, r25	; 0x02
    4e52:	a3 83       	std	Z+3, r26	; 0x03
    4e54:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4e58:	88 e3       	ldi	r24, 0x38	; 56
    4e5a:	90 e2       	ldi	r25, 0x20	; 32
    4e5c:	ed b7       	in	r30, 0x3d	; 61
    4e5e:	fe b7       	in	r31, 0x3e	; 62
    4e60:	97 83       	std	Z+7, r25	; 0x07
    4e62:	86 83       	std	Z+6, r24	; 0x06
    4e64:	86 e5       	ldi	r24, 0x56	; 86
    4e66:	97 e1       	ldi	r25, 0x17	; 23
    4e68:	95 83       	std	Z+5, r25	; 0x05
    4e6a:	84 83       	std	Z+4, r24	; 0x04
    4e6c:	83 ec       	ldi	r24, 0xC3	; 195
    4e6e:	92 e0       	ldi	r25, 0x02	; 2
    4e70:	a0 e0       	ldi	r26, 0x00	; 0
    4e72:	81 83       	std	Z+1, r24	; 0x01
    4e74:	92 83       	std	Z+2, r25	; 0x02
    4e76:	a3 83       	std	Z+3, r26	; 0x03
    4e78:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4e7c:	86 e5       	ldi	r24, 0x56	; 86
    4e7e:	97 e1       	ldi	r25, 0x17	; 23
    4e80:	ed b7       	in	r30, 0x3d	; 61
    4e82:	fe b7       	in	r31, 0x3e	; 62
    4e84:	97 83       	std	Z+7, r25	; 0x07
    4e86:	86 83       	std	Z+6, r24	; 0x06
    4e88:	80 e0       	ldi	r24, 0x00	; 0
    4e8a:	91 e0       	ldi	r25, 0x01	; 1
    4e8c:	95 83       	std	Z+5, r25	; 0x05
    4e8e:	84 83       	std	Z+4, r24	; 0x04
    4e90:	85 ea       	ldi	r24, 0xA5	; 165
    4e92:	92 e0       	ldi	r25, 0x02	; 2
    4e94:	a0 e0       	ldi	r26, 0x00	; 0
    4e96:	81 83       	std	Z+1, r24	; 0x01
    4e98:	92 83       	std	Z+2, r25	; 0x02
    4e9a:	a3 83       	std	Z+3, r26	; 0x03
    4e9c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4ea0:	80 e0       	ldi	r24, 0x00	; 0
    4ea2:	90 e0       	ldi	r25, 0x00	; 0
    4ea4:	ed b7       	in	r30, 0x3d	; 61
    4ea6:	fe b7       	in	r31, 0x3e	; 62
    4ea8:	97 83       	std	Z+7, r25	; 0x07
    4eaa:	86 83       	std	Z+6, r24	; 0x06
    4eac:	88 e3       	ldi	r24, 0x38	; 56
    4eae:	90 e2       	ldi	r25, 0x20	; 32
    4eb0:	95 83       	std	Z+5, r25	; 0x05
    4eb2:	84 83       	std	Z+4, r24	; 0x04
    4eb4:	87 e8       	ldi	r24, 0x87	; 135
    4eb6:	92 e0       	ldi	r25, 0x02	; 2
    4eb8:	a0 e0       	ldi	r26, 0x00	; 0
    4eba:	81 83       	std	Z+1, r24	; 0x01
    4ebc:	92 83       	std	Z+2, r25	; 0x02
    4ebe:	a3 83       	std	Z+3, r26	; 0x03
    4ec0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4ec4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4ec8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4ecc:	ed b7       	in	r30, 0x3d	; 61
    4ece:	fe b7       	in	r31, 0x3e	; 62
    4ed0:	97 83       	std	Z+7, r25	; 0x07
    4ed2:	86 83       	std	Z+6, r24	; 0x06
    4ed4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4ed8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4edc:	95 83       	std	Z+5, r25	; 0x05
    4ede:	84 83       	std	Z+4, r24	; 0x04
    4ee0:	89 e6       	ldi	r24, 0x69	; 105
    4ee2:	92 e0       	ldi	r25, 0x02	; 2
    4ee4:	a0 e0       	ldi	r26, 0x00	; 0
    4ee6:	81 83       	std	Z+1, r24	; 0x01
    4ee8:	92 83       	std	Z+2, r25	; 0x02
    4eea:	a3 83       	std	Z+3, r26	; 0x03
    4eec:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4ef0:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <__brkval>
    4ef4:	90 91 35 20 	lds	r25, 0x2035	; 0x802035 <__brkval+0x1>
    4ef8:	ed b7       	in	r30, 0x3d	; 61
    4efa:	fe b7       	in	r31, 0x3e	; 62
    4efc:	95 83       	std	Z+5, r25	; 0x05
    4efe:	84 83       	std	Z+4, r24	; 0x04
    4f00:	85 e5       	ldi	r24, 0x55	; 85
    4f02:	92 e0       	ldi	r25, 0x02	; 2
    4f04:	a0 e0       	ldi	r26, 0x00	; 0
    4f06:	81 83       	std	Z+1, r24	; 0x01
    4f08:	92 83       	std	Z+2, r25	; 0x02
    4f0a:	a3 83       	std	Z+3, r26	; 0x03
    4f0c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

}
    4f10:	29 96       	adiw	r28, 0x09	; 9
    4f12:	e2 e0       	ldi	r30, 0x02	; 2
    4f14:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00004f18 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4f18:	ef 92       	push	r14
    4f1a:	ff 92       	push	r15
    4f1c:	0f 93       	push	r16
    4f1e:	1f 93       	push	r17
    4f20:	cf 93       	push	r28
    4f22:	df 93       	push	r29
    4f24:	ad b7       	in	r26, 0x3d	; 61
    4f26:	be b7       	in	r27, 0x3e	; 62
    4f28:	17 97       	sbiw	r26, 0x07	; 7
    4f2a:	0f b6       	in	r0, 0x3f	; 63
    4f2c:	f8 94       	cli
    4f2e:	be bf       	out	0x3e, r27	; 62
    4f30:	0f be       	out	0x3f, r0	; 63
    4f32:	ad bf       	out	0x3d, r26	; 61
    4f34:	8c 01       	movw	r16, r24
    4f36:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4f38:	0e 94 70 e9 	call	0x1d2e0	; 0x1d2e0 <calloc>
    4f3c:	ec 01       	movw	r28, r24
    if(!p)
    4f3e:	89 2b       	or	r24, r25
    4f40:	71 f4       	brne	.+28     	; 0x4f5e <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4f42:	ed b7       	in	r30, 0x3d	; 61
    4f44:	fe b7       	in	r31, 0x3e	; 62
    4f46:	f7 82       	std	Z+7, r15	; 0x07
    4f48:	e6 82       	std	Z+6, r14	; 0x06
    4f4a:	15 83       	std	Z+5, r17	; 0x05
    4f4c:	04 83       	std	Z+4, r16	; 0x04
    4f4e:	8a e3       	ldi	r24, 0x3A	; 58
    4f50:	92 e0       	ldi	r25, 0x02	; 2
    4f52:	a0 e0       	ldi	r26, 0x00	; 0
    4f54:	81 83       	std	Z+1, r24	; 0x01
    4f56:	92 83       	std	Z+2, r25	; 0x02
    4f58:	a3 83       	std	Z+3, r26	; 0x03
    4f5a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    }
    return(p);
}
    4f5e:	ce 01       	movw	r24, r28
    4f60:	cd b7       	in	r28, 0x3d	; 61
    4f62:	de b7       	in	r29, 0x3e	; 62
    4f64:	27 96       	adiw	r28, 0x07	; 7
    4f66:	e6 e0       	ldi	r30, 0x06	; 6
    4f68:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

00004f6c <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4f6c:	0f 93       	push	r16
    4f6e:	1f 93       	push	r17
    4f70:	cf 93       	push	r28
    4f72:	df 93       	push	r29
    4f74:	00 d0       	rcall	.+0      	; 0x4f76 <safemalloc+0xa>
    4f76:	00 d0       	rcall	.+0      	; 0x4f78 <safemalloc+0xc>
    4f78:	1f 92       	push	r1
    4f7a:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4f7c:	61 e0       	ldi	r22, 0x01	; 1
    4f7e:	70 e0       	ldi	r23, 0x00	; 0
    4f80:	0e 94 70 e9 	call	0x1d2e0	; 0x1d2e0 <calloc>
    4f84:	ec 01       	movw	r28, r24
    if(!p)
    4f86:	89 2b       	or	r24, r25
    4f88:	61 f4       	brne	.+24     	; 0x4fa2 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    4f8a:	ed b7       	in	r30, 0x3d	; 61
    4f8c:	fe b7       	in	r31, 0x3e	; 62
    4f8e:	15 83       	std	Z+5, r17	; 0x05
    4f90:	04 83       	std	Z+4, r16	; 0x04
    4f92:	82 e2       	ldi	r24, 0x22	; 34
    4f94:	92 e0       	ldi	r25, 0x02	; 2
    4f96:	a0 e0       	ldi	r26, 0x00	; 0
    4f98:	81 83       	std	Z+1, r24	; 0x01
    4f9a:	92 83       	std	Z+2, r25	; 0x02
    4f9c:	a3 83       	std	Z+3, r26	; 0x03
    4f9e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    }
    return(p);
}
    4fa2:	ce 01       	movw	r24, r28
    4fa4:	cd b7       	in	r28, 0x3d	; 61
    4fa6:	de b7       	in	r29, 0x3e	; 62
    4fa8:	25 96       	adiw	r28, 0x05	; 5
    4faa:	e4 e0       	ldi	r30, 0x04	; 4
    4fac:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

00004fb0 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    4fb0:	ad b7       	in	r26, 0x3d	; 61
    4fb2:	be b7       	in	r27, 0x3e	; 62
    4fb4:	17 97       	sbiw	r26, 0x07	; 7
    4fb6:	0f b6       	in	r0, 0x3f	; 63
    4fb8:	f8 94       	cli
    4fba:	be bf       	out	0x3e, r27	; 62
    4fbc:	0f be       	out	0x3f, r0	; 63
    4fbe:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    4fc0:	00 97       	sbiw	r24, 0x00	; 0
    4fc2:	11 f1       	breq	.+68     	; 0x5008 <safefree+0x58>
        return;

    if(__brkval)
    4fc4:	20 91 34 20 	lds	r18, 0x2034	; 0x802034 <__brkval>
    4fc8:	30 91 35 20 	lds	r19, 0x2035	; 0x802035 <__brkval+0x1>
    4fcc:	21 15       	cp	r18, r1
    4fce:	31 05       	cpc	r19, r1
    4fd0:	11 f4       	brne	.+4      	; 0x4fd6 <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4fd2:	28 e3       	ldi	r18, 0x38	; 56
    4fd4:	30 e2       	ldi	r19, 0x20	; 32

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    4fd6:	40 e2       	ldi	r20, 0x20	; 32
    4fd8:	88 33       	cpi	r24, 0x38	; 56
    4fda:	94 07       	cpc	r25, r20
    4fdc:	30 f0       	brcs	.+12     	; 0x4fea <safefree+0x3a>
    4fde:	28 17       	cp	r18, r24
    4fe0:	39 07       	cpc	r19, r25
    4fe2:	18 f0       	brcs	.+6      	; 0x4fea <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    4fe4:	0e 94 22 ea 	call	0x1d444	; 0x1d444 <free>
        return;
    4fe8:	0f c0       	rjmp	.+30     	; 0x5008 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    4fea:	ed b7       	in	r30, 0x3d	; 61
    4fec:	fe b7       	in	r31, 0x3e	; 62
    4fee:	37 83       	std	Z+7, r19	; 0x07
    4ff0:	26 83       	std	Z+6, r18	; 0x06
    4ff2:	95 83       	std	Z+5, r25	; 0x05
    4ff4:	84 83       	std	Z+4, r24	; 0x04
    4ff6:	8d ef       	ldi	r24, 0xFD	; 253
    4ff8:	91 e0       	ldi	r25, 0x01	; 1
    4ffa:	a0 e0       	ldi	r26, 0x00	; 0
    4ffc:	81 83       	std	Z+1, r24	; 0x01
    4ffe:	92 83       	std	Z+2, r25	; 0x02
    5000:	a3 83       	std	Z+3, r26	; 0x03
    5002:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    PrintFree();
    5006:	f7 de       	rcall	.-530    	; 0x4df6 <PrintFree>
}
    5008:	ad b7       	in	r26, 0x3d	; 61
    500a:	be b7       	in	r27, 0x3e	; 62
    500c:	17 96       	adiw	r26, 0x07	; 7
    500e:	0f b6       	in	r0, 0x3f	; 63
    5010:	f8 94       	cli
    5012:	be bf       	out	0x3e, r27	; 62
    5014:	0f be       	out	0x3f, r0	; 63
    5016:	ad bf       	out	0x3d, r26	; 61
    5018:	08 95       	ret

0000501a <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    501a:	64 36       	cpi	r22, 0x64	; 100
    501c:	71 05       	cpc	r23, r1
    501e:	81 05       	cpc	r24, r1
    5020:	91 05       	cpc	r25, r1
    5022:	58 f0       	brcs	.+22     	; 0x503a <delayus+0x20>
    {
        us -= 100U;
    5024:	64 56       	subi	r22, 0x64	; 100
    5026:	71 09       	sbc	r23, r1
    5028:	81 09       	sbc	r24, r1
    502a:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    502c:	e3 ef       	ldi	r30, 0xF3	; 243
    502e:	f1 e0       	ldi	r31, 0x01	; 1
    5030:	31 97       	sbiw	r30, 0x01	; 1
    5032:	f1 f7       	brne	.-4      	; 0x5030 <delayus+0x16>
    5034:	00 c0       	rjmp	.+0      	; 0x5036 <delayus+0x1c>
    5036:	00 00       	nop
    5038:	f0 cf       	rjmp	.-32     	; 0x501a <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    503a:	6a 30       	cpi	r22, 0x0A	; 10
    503c:	71 05       	cpc	r23, r1
    503e:	81 05       	cpc	r24, r1
    5040:	91 05       	cpc	r25, r1
    5042:	48 f0       	brcs	.+18     	; 0x5056 <delayus+0x3c>
    {
        us -= 10U;
    5044:	6a 50       	subi	r22, 0x0A	; 10
    5046:	71 09       	sbc	r23, r1
    5048:	81 09       	sbc	r24, r1
    504a:	91 09       	sbc	r25, r1
    504c:	f2 e4       	ldi	r31, 0x42	; 66
    504e:	fa 95       	dec	r31
    5050:	f1 f7       	brne	.-4      	; 0x504e <delayus+0x34>
    5052:	00 c0       	rjmp	.+0      	; 0x5054 <delayus+0x3a>
    5054:	f2 cf       	rjmp	.-28     	; 0x503a <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    5056:	61 15       	cp	r22, r1
    5058:	71 05       	cpc	r23, r1
    505a:	81 05       	cpc	r24, r1
    505c:	91 05       	cpc	r25, r1
    505e:	49 f0       	breq	.+18     	; 0x5072 <delayus+0x58>
    {
        --us;
    5060:	61 50       	subi	r22, 0x01	; 1
    5062:	71 09       	sbc	r23, r1
    5064:	81 09       	sbc	r24, r1
    5066:	91 09       	sbc	r25, r1
    5068:	26 e0       	ldi	r18, 0x06	; 6
    506a:	2a 95       	dec	r18
    506c:	f1 f7       	brne	.-4      	; 0x506a <delayus+0x50>
    506e:	00 c0       	rjmp	.+0      	; 0x5070 <delayus+0x56>
    5070:	f2 cf       	rjmp	.-28     	; 0x5056 <delayus+0x3c>
        _delay_us(1);
    }
}
    5072:	08 95       	ret

00005074 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    5074:	61 15       	cp	r22, r1
    5076:	71 05       	cpc	r23, r1
    5078:	81 05       	cpc	r24, r1
    507a:	91 05       	cpc	r25, r1
    507c:	09 f4       	brne	.+2      	; 0x5080 <delayms+0xc>
    507e:	41 c0       	rjmp	.+130    	; 0x5102 <delayms+0x8e>
    5080:	e3 ef       	ldi	r30, 0xF3	; 243
    5082:	f1 e0       	ldi	r31, 0x01	; 1
    5084:	31 97       	sbiw	r30, 0x01	; 1
    5086:	f1 f7       	brne	.-4      	; 0x5084 <delayms+0x10>
    5088:	00 c0       	rjmp	.+0      	; 0x508a <delayms+0x16>
    508a:	00 00       	nop
    508c:	e3 ef       	ldi	r30, 0xF3	; 243
    508e:	f1 e0       	ldi	r31, 0x01	; 1
    5090:	31 97       	sbiw	r30, 0x01	; 1
    5092:	f1 f7       	brne	.-4      	; 0x5090 <delayms+0x1c>
    5094:	00 c0       	rjmp	.+0      	; 0x5096 <delayms+0x22>
    5096:	00 00       	nop
    5098:	e3 ef       	ldi	r30, 0xF3	; 243
    509a:	f1 e0       	ldi	r31, 0x01	; 1
    509c:	31 97       	sbiw	r30, 0x01	; 1
    509e:	f1 f7       	brne	.-4      	; 0x509c <delayms+0x28>
    50a0:	00 c0       	rjmp	.+0      	; 0x50a2 <delayms+0x2e>
    50a2:	00 00       	nop
    50a4:	e3 ef       	ldi	r30, 0xF3	; 243
    50a6:	f1 e0       	ldi	r31, 0x01	; 1
    50a8:	31 97       	sbiw	r30, 0x01	; 1
    50aa:	f1 f7       	brne	.-4      	; 0x50a8 <delayms+0x34>
    50ac:	00 c0       	rjmp	.+0      	; 0x50ae <delayms+0x3a>
    50ae:	00 00       	nop
    50b0:	e3 ef       	ldi	r30, 0xF3	; 243
    50b2:	f1 e0       	ldi	r31, 0x01	; 1
    50b4:	31 97       	sbiw	r30, 0x01	; 1
    50b6:	f1 f7       	brne	.-4      	; 0x50b4 <delayms+0x40>
    50b8:	00 c0       	rjmp	.+0      	; 0x50ba <delayms+0x46>
    50ba:	00 00       	nop
    50bc:	e3 ef       	ldi	r30, 0xF3	; 243
    50be:	f1 e0       	ldi	r31, 0x01	; 1
    50c0:	31 97       	sbiw	r30, 0x01	; 1
    50c2:	f1 f7       	brne	.-4      	; 0x50c0 <delayms+0x4c>
    50c4:	00 c0       	rjmp	.+0      	; 0x50c6 <delayms+0x52>
    50c6:	00 00       	nop
    50c8:	e3 ef       	ldi	r30, 0xF3	; 243
    50ca:	f1 e0       	ldi	r31, 0x01	; 1
    50cc:	31 97       	sbiw	r30, 0x01	; 1
    50ce:	f1 f7       	brne	.-4      	; 0x50cc <delayms+0x58>
    50d0:	00 c0       	rjmp	.+0      	; 0x50d2 <delayms+0x5e>
    50d2:	00 00       	nop
    50d4:	e3 ef       	ldi	r30, 0xF3	; 243
    50d6:	f1 e0       	ldi	r31, 0x01	; 1
    50d8:	31 97       	sbiw	r30, 0x01	; 1
    50da:	f1 f7       	brne	.-4      	; 0x50d8 <delayms+0x64>
    50dc:	00 c0       	rjmp	.+0      	; 0x50de <delayms+0x6a>
    50de:	00 00       	nop
    50e0:	e3 ef       	ldi	r30, 0xF3	; 243
    50e2:	f1 e0       	ldi	r31, 0x01	; 1
    50e4:	31 97       	sbiw	r30, 0x01	; 1
    50e6:	f1 f7       	brne	.-4      	; 0x50e4 <delayms+0x70>
    50e8:	00 c0       	rjmp	.+0      	; 0x50ea <delayms+0x76>
    50ea:	00 00       	nop
    50ec:	e3 ef       	ldi	r30, 0xF3	; 243
    50ee:	f1 e0       	ldi	r31, 0x01	; 1
    50f0:	31 97       	sbiw	r30, 0x01	; 1
    50f2:	f1 f7       	brne	.-4      	; 0x50f0 <delayms+0x7c>
    50f4:	00 c0       	rjmp	.+0      	; 0x50f6 <delayms+0x82>
    50f6:	00 00       	nop
    50f8:	61 50       	subi	r22, 0x01	; 1
    50fa:	71 09       	sbc	r23, r1
    50fc:	81 09       	sbc	r24, r1
    50fe:	91 09       	sbc	r25, r1
    5100:	b9 cf       	rjmp	.-142    	; 0x5074 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    5102:	08 95       	ret

00005104 <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    5104:	81 11       	cpse	r24, r1
    5106:	0e c0       	rjmp	.+28     	; 0x5124 <uart_rx_flush+0x20>
    5108:	f8 94       	cli
    510a:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <uarts+0x4>
    510e:	10 92 fa 19 	sts	0x19FA, r1	; 0x8019fa <uarts+0x3>
    5112:	10 92 f7 19 	sts	0x19F7, r1	; 0x8019f7 <uarts>
    5116:	10 92 f8 19 	sts	0x19F8, r1	; 0x8019f8 <uarts+0x1>
    511a:	10 92 f9 19 	sts	0x19F9, r1	; 0x8019f9 <uarts+0x2>
    511e:	10 92 fc 19 	sts	0x19FC, r1	; 0x8019fc <uarts+0x5>
    5122:	78 94       	sei
    5124:	08 95       	ret

00005126 <uart_ubr>:
    5126:	4f 92       	push	r4
    5128:	5f 92       	push	r5
    512a:	6f 92       	push	r6
    512c:	7f 92       	push	r7
    512e:	8f 92       	push	r8
    5130:	9f 92       	push	r9
    5132:	af 92       	push	r10
    5134:	bf 92       	push	r11
    5136:	cf 92       	push	r12
    5138:	df 92       	push	r13
    513a:	ef 92       	push	r14
    513c:	ff 92       	push	r15
    513e:	cf 93       	push	r28
    5140:	df 93       	push	r29
    5142:	5a 01       	movw	r10, r20
    5144:	e9 01       	movw	r28, r18
    5146:	0e 94 0e e8 	call	0x1d01c	; 0x1d01c <__floatunsisf>
    514a:	2b 01       	movw	r4, r22
    514c:	3c 01       	movw	r6, r24
    514e:	20 e0       	ldi	r18, 0x00	; 0
    5150:	30 e0       	ldi	r19, 0x00	; 0
    5152:	40 e0       	ldi	r20, 0x00	; 0
    5154:	51 e4       	ldi	r21, 0x41	; 65
    5156:	0e 94 c4 e8 	call	0x1d188	; 0x1d188 <__mulsf3>
    515a:	9b 01       	movw	r18, r22
    515c:	ac 01       	movw	r20, r24
    515e:	60 e8       	ldi	r22, 0x80	; 128
    5160:	76 e9       	ldi	r23, 0x96	; 150
    5162:	88 e9       	ldi	r24, 0x98	; 152
    5164:	9b e4       	ldi	r25, 0x4B	; 75
    5166:	0e 94 75 e7 	call	0x1ceea	; 0x1ceea <__divsf3>
    516a:	20 e0       	ldi	r18, 0x00	; 0
    516c:	30 e0       	ldi	r19, 0x00	; 0
    516e:	40 e8       	ldi	r20, 0x80	; 128
    5170:	5f e3       	ldi	r21, 0x3F	; 63
    5172:	0e 94 0c e7 	call	0x1ce18	; 0x1ce18 <__subsf3>
    5176:	0e 94 27 e9 	call	0x1d24e	; 0x1d24e <round>
    517a:	0e 94 e2 e7 	call	0x1cfc4	; 0x1cfc4 <__fixunssfsi>
    517e:	6b 01       	movw	r12, r22
    5180:	7c 01       	movw	r14, r24
    5182:	c1 14       	cp	r12, r1
    5184:	80 e1       	ldi	r24, 0x10	; 16
    5186:	d8 06       	cpc	r13, r24
    5188:	e1 04       	cpc	r14, r1
    518a:	f1 04       	cpc	r15, r1
    518c:	58 f4       	brcc	.+22     	; 0x51a4 <uart_ubr+0x7e>
    518e:	81 e0       	ldi	r24, 0x01	; 1
    5190:	90 e0       	ldi	r25, 0x00	; 0
    5192:	f5 01       	movw	r30, r10
    5194:	91 83       	std	Z+1, r25	; 0x01
    5196:	80 83       	st	Z, r24
    5198:	81 2c       	mov	r8, r1
    519a:	91 2c       	mov	r9, r1
    519c:	a1 2c       	mov	r10, r1
    519e:	21 e4       	ldi	r18, 0x41	; 65
    51a0:	b2 2e       	mov	r11, r18
    51a2:	31 c0       	rjmp	.+98     	; 0x5206 <uart_ubr+0xe0>
    51a4:	f5 01       	movw	r30, r10
    51a6:	11 82       	std	Z+1, r1	; 0x01
    51a8:	10 82       	st	Z, r1
    51aa:	20 e0       	ldi	r18, 0x00	; 0
    51ac:	30 e0       	ldi	r19, 0x00	; 0
    51ae:	40 e8       	ldi	r20, 0x80	; 128
    51b0:	51 e4       	ldi	r21, 0x41	; 65
    51b2:	c3 01       	movw	r24, r6
    51b4:	b2 01       	movw	r22, r4
    51b6:	0e 94 c4 e8 	call	0x1d188	; 0x1d188 <__mulsf3>
    51ba:	9b 01       	movw	r18, r22
    51bc:	ac 01       	movw	r20, r24
    51be:	60 e8       	ldi	r22, 0x80	; 128
    51c0:	76 e9       	ldi	r23, 0x96	; 150
    51c2:	88 e9       	ldi	r24, 0x98	; 152
    51c4:	9b e4       	ldi	r25, 0x4B	; 75
    51c6:	0e 94 75 e7 	call	0x1ceea	; 0x1ceea <__divsf3>
    51ca:	20 e0       	ldi	r18, 0x00	; 0
    51cc:	30 e0       	ldi	r19, 0x00	; 0
    51ce:	40 e8       	ldi	r20, 0x80	; 128
    51d0:	5f e3       	ldi	r21, 0x3F	; 63
    51d2:	0e 94 0c e7 	call	0x1ce18	; 0x1ce18 <__subsf3>
    51d6:	0e 94 27 e9 	call	0x1d24e	; 0x1d24e <round>
    51da:	0e 94 e2 e7 	call	0x1cfc4	; 0x1cfc4 <__fixunssfsi>
    51de:	6b 01       	movw	r12, r22
    51e0:	7c 01       	movw	r14, r24
    51e2:	81 2c       	mov	r8, r1
    51e4:	91 2c       	mov	r9, r1
    51e6:	90 e8       	ldi	r25, 0x80	; 128
    51e8:	a9 2e       	mov	r10, r25
    51ea:	91 e4       	ldi	r25, 0x41	; 65
    51ec:	b9 2e       	mov	r11, r25
    51ee:	c1 14       	cp	r12, r1
    51f0:	f0 e1       	ldi	r31, 0x10	; 16
    51f2:	df 06       	cpc	r13, r31
    51f4:	e1 04       	cpc	r14, r1
    51f6:	f1 04       	cpc	r15, r1
    51f8:	30 f0       	brcs	.+12     	; 0x5206 <uart_ubr+0xe0>
    51fa:	cc 24       	eor	r12, r12
    51fc:	ca 94       	dec	r12
    51fe:	8f e0       	ldi	r24, 0x0F	; 15
    5200:	d8 2e       	mov	r13, r24
    5202:	e1 2c       	mov	r14, r1
    5204:	f1 2c       	mov	r15, r1
    5206:	c7 01       	movw	r24, r14
    5208:	b6 01       	movw	r22, r12
    520a:	6f 5f       	subi	r22, 0xFF	; 255
    520c:	7f 4f       	sbci	r23, 0xFF	; 255
    520e:	8f 4f       	sbci	r24, 0xFF	; 255
    5210:	9f 4f       	sbci	r25, 0xFF	; 255
    5212:	0e 94 0e e8 	call	0x1d01c	; 0x1d01c <__floatunsisf>
    5216:	a5 01       	movw	r20, r10
    5218:	94 01       	movw	r18, r8
    521a:	0e 94 c4 e8 	call	0x1d188	; 0x1d188 <__mulsf3>
    521e:	9b 01       	movw	r18, r22
    5220:	ac 01       	movw	r20, r24
    5222:	60 e8       	ldi	r22, 0x80	; 128
    5224:	76 e9       	ldi	r23, 0x96	; 150
    5226:	88 e9       	ldi	r24, 0x98	; 152
    5228:	9b e4       	ldi	r25, 0x4B	; 75
    522a:	0e 94 75 e7 	call	0x1ceea	; 0x1ceea <__divsf3>
    522e:	0e 94 e2 e7 	call	0x1cfc4	; 0x1cfc4 <__fixunssfsi>
    5232:	68 83       	st	Y, r22
    5234:	79 83       	std	Y+1, r23	; 0x01
    5236:	8a 83       	std	Y+2, r24	; 0x02
    5238:	9b 83       	std	Y+3, r25	; 0x03
    523a:	c6 01       	movw	r24, r12
    523c:	df 91       	pop	r29
    523e:	cf 91       	pop	r28
    5240:	ff 90       	pop	r15
    5242:	ef 90       	pop	r14
    5244:	df 90       	pop	r13
    5246:	cf 90       	pop	r12
    5248:	bf 90       	pop	r11
    524a:	af 90       	pop	r10
    524c:	9f 90       	pop	r9
    524e:	8f 90       	pop	r8
    5250:	7f 90       	pop	r7
    5252:	6f 90       	pop	r6
    5254:	5f 90       	pop	r5
    5256:	4f 90       	pop	r4
    5258:	08 95       	ret

0000525a <uart_init>:
    525a:	a6 e0       	ldi	r26, 0x06	; 6
    525c:	b0 e0       	ldi	r27, 0x00	; 0
    525e:	e3 e3       	ldi	r30, 0x33	; 51
    5260:	f9 e2       	ldi	r31, 0x29	; 41
    5262:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    5266:	1e 82       	std	Y+6, r1	; 0x06
    5268:	1d 82       	std	Y+5, r1	; 0x05
    526a:	81 11       	cpse	r24, r1
    526c:	36 c0       	rjmp	.+108    	; 0x52da <uart_init+0x80>
    526e:	cb 01       	movw	r24, r22
    5270:	ba 01       	movw	r22, r20
    5272:	9e 01       	movw	r18, r28
    5274:	2f 5f       	subi	r18, 0xFF	; 255
    5276:	3f 4f       	sbci	r19, 0xFF	; 255
    5278:	ae 01       	movw	r20, r28
    527a:	4b 5f       	subi	r20, 0xFB	; 251
    527c:	5f 4f       	sbci	r21, 0xFF	; 255
    527e:	53 df       	rcall	.-346    	; 0x5126 <uart_ubr>
    5280:	f8 94       	cli
    5282:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <uarts+0x4>
    5286:	10 92 fa 19 	sts	0x19FA, r1	; 0x8019fa <uarts+0x3>
    528a:	10 92 f7 19 	sts	0x19F7, r1	; 0x8019f7 <uarts>
    528e:	10 92 f8 19 	sts	0x19F8, r1	; 0x8019f8 <uarts+0x1>
    5292:	10 92 f9 19 	sts	0x19F9, r1	; 0x8019f9 <uarts+0x2>
    5296:	10 92 fc 19 	sts	0x19FC, r1	; 0x8019fc <uarts+0x5>
    529a:	78 94       	sei
    529c:	f8 94       	cli
    529e:	58 9a       	sbi	0x0b, 0	; 11
    52a0:	59 9a       	sbi	0x0b, 1	; 11
    52a2:	50 98       	cbi	0x0a, 0	; 10
    52a4:	51 9a       	sbi	0x0a, 1	; 10
    52a6:	28 e9       	ldi	r18, 0x98	; 152
    52a8:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    52ac:	2d 81       	ldd	r18, Y+5	; 0x05
    52ae:	3e 81       	ldd	r19, Y+6	; 0x06
    52b0:	23 2b       	or	r18, r19
    52b2:	19 f0       	breq	.+6      	; 0x52ba <uart_init+0x60>
    52b4:	22 e0       	ldi	r18, 0x02	; 2
    52b6:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    52ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    52be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    52c2:	78 94       	sei
    52c4:	66 e2       	ldi	r22, 0x26	; 38
    52c6:	7a e2       	ldi	r23, 0x2A	; 42
    52c8:	8b e3       	ldi	r24, 0x3B	; 59
    52ca:	9a e2       	ldi	r25, 0x2A	; 42
    52cc:	0e 94 97 78 	call	0xf12e	; 0xf12e <fdevopen>
    52d0:	69 81       	ldd	r22, Y+1	; 0x01
    52d2:	7a 81       	ldd	r23, Y+2	; 0x02
    52d4:	8b 81       	ldd	r24, Y+3	; 0x03
    52d6:	9c 81       	ldd	r25, Y+4	; 0x04
    52d8:	03 c0       	rjmp	.+6      	; 0x52e0 <uart_init+0x86>
    52da:	60 e0       	ldi	r22, 0x00	; 0
    52dc:	70 e0       	ldi	r23, 0x00	; 0
    52de:	cb 01       	movw	r24, r22
    52e0:	26 96       	adiw	r28, 0x06	; 6
    52e2:	e2 e0       	ldi	r30, 0x02	; 2
    52e4:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

000052e8 <uart_rx_interrupt>:
    52e8:	cf 93       	push	r28
    52ea:	df 93       	push	r29
    52ec:	27 e5       	ldi	r18, 0x57	; 87
    52ee:	82 9f       	mul	r24, r18
    52f0:	c0 01       	movw	r24, r0
    52f2:	11 24       	eor	r1, r1
    52f4:	fc 01       	movw	r30, r24
    52f6:	e9 50       	subi	r30, 0x09	; 9
    52f8:	f6 4e       	sbci	r31, 0xE6	; 230
    52fa:	83 81       	ldd	r24, Z+3	; 0x03
    52fc:	94 81       	ldd	r25, Z+4	; 0x04
    52fe:	80 35       	cpi	r24, 0x50	; 80
    5300:	91 05       	cpc	r25, r1
    5302:	84 f4       	brge	.+32     	; 0x5324 <uart_rx_interrupt+0x3c>
    5304:	30 81       	ld	r19, Z
    5306:	21 e0       	ldi	r18, 0x01	; 1
    5308:	23 0f       	add	r18, r19
    530a:	20 83       	st	Z, r18
    530c:	ef 01       	movw	r28, r30
    530e:	c3 0f       	add	r28, r19
    5310:	d1 1d       	adc	r29, r1
    5312:	6f 77       	andi	r22, 0x7F	; 127
    5314:	6e 83       	std	Y+6, r22	; 0x06
    5316:	01 96       	adiw	r24, 0x01	; 1
    5318:	94 83       	std	Z+4, r25	; 0x04
    531a:	83 83       	std	Z+3, r24	; 0x03
    531c:	20 35       	cpi	r18, 0x50	; 80
    531e:	28 f0       	brcs	.+10     	; 0x532a <uart_rx_interrupt+0x42>
    5320:	10 82       	st	Z, r1
    5322:	03 c0       	rjmp	.+6      	; 0x532a <uart_rx_interrupt+0x42>
    5324:	85 81       	ldd	r24, Z+5	; 0x05
    5326:	81 60       	ori	r24, 0x01	; 1
    5328:	85 83       	std	Z+5, r24	; 0x05
    532a:	df 91       	pop	r29
    532c:	cf 91       	pop	r28
    532e:	08 95       	ret

00005330 <__vector_20>:
    5330:	1f 92       	push	r1
    5332:	0f 92       	push	r0
    5334:	0f b6       	in	r0, 0x3f	; 63
    5336:	0f 92       	push	r0
    5338:	11 24       	eor	r1, r1
    533a:	0b b6       	in	r0, 0x3b	; 59
    533c:	0f 92       	push	r0
    533e:	2f 93       	push	r18
    5340:	3f 93       	push	r19
    5342:	4f 93       	push	r20
    5344:	5f 93       	push	r21
    5346:	6f 93       	push	r22
    5348:	7f 93       	push	r23
    534a:	8f 93       	push	r24
    534c:	9f 93       	push	r25
    534e:	af 93       	push	r26
    5350:	bf 93       	push	r27
    5352:	ef 93       	push	r30
    5354:	ff 93       	push	r31
    5356:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    535a:	80 e0       	ldi	r24, 0x00	; 0
    535c:	c5 df       	rcall	.-118    	; 0x52e8 <uart_rx_interrupt>
    535e:	ff 91       	pop	r31
    5360:	ef 91       	pop	r30
    5362:	bf 91       	pop	r27
    5364:	af 91       	pop	r26
    5366:	9f 91       	pop	r25
    5368:	8f 91       	pop	r24
    536a:	7f 91       	pop	r23
    536c:	6f 91       	pop	r22
    536e:	5f 91       	pop	r21
    5370:	4f 91       	pop	r20
    5372:	3f 91       	pop	r19
    5374:	2f 91       	pop	r18
    5376:	0f 90       	pop	r0
    5378:	0b be       	out	0x3b, r0	; 59
    537a:	0f 90       	pop	r0
    537c:	0f be       	out	0x3f, r0	; 63
    537e:	0f 90       	pop	r0
    5380:	1f 90       	pop	r1
    5382:	18 95       	reti

00005384 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5384:	81 11       	cpse	r24, r1
    5386:	07 c0       	rjmp	.+14     	; 0x5396 <uart_rx_count+0x12>
        return(EOF);

    cli();
    5388:	f8 94       	cli

    count = uarts[uart].rx_count;
    538a:	80 91 fa 19 	lds	r24, 0x19FA	; 0x8019fa <uarts+0x3>
    538e:	90 91 fb 19 	lds	r25, 0x19FB	; 0x8019fb <uarts+0x4>

    sei();
    5392:	78 94       	sei

    return (count );
    5394:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    5396:	8f ef       	ldi	r24, 0xFF	; 255
    5398:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    539a:	08 95       	ret

0000539c <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    539c:	81 11       	cpse	r24, r1
    539e:	21 c0       	rjmp	.+66     	; 0x53e2 <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    53a0:	80 e0       	ldi	r24, 0x00	; 0
    53a2:	f0 df       	rcall	.-32     	; 0x5384 <uart_rx_count>
    53a4:	18 16       	cp	r1, r24
    53a6:	19 06       	cpc	r1, r25
    53a8:	dc f7       	brge	.-10     	; 0x53a0 <uart_get_tail+0x4>
        ;

    cli();
    53aa:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    53ac:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <uarts+0x1>
    53b0:	91 e0       	ldi	r25, 0x01	; 1
    53b2:	9e 0f       	add	r25, r30
    53b4:	90 93 f8 19 	sts	0x19F8, r25	; 0x8019f8 <uarts+0x1>
    53b8:	f0 e0       	ldi	r31, 0x00	; 0
    53ba:	e9 50       	subi	r30, 0x09	; 9
    53bc:	f6 4e       	sbci	r31, 0xE6	; 230
    53be:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    53c0:	90 35       	cpi	r25, 0x50	; 80
    53c2:	10 f0       	brcs	.+4      	; 0x53c8 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    53c4:	10 92 f8 19 	sts	0x19F8, r1	; 0x8019f8 <uarts+0x1>
    uarts[uart].rx_count--;
    53c8:	20 91 fa 19 	lds	r18, 0x19FA	; 0x8019fa <uarts+0x3>
    53cc:	30 91 fb 19 	lds	r19, 0x19FB	; 0x8019fb <uarts+0x4>
    53d0:	21 50       	subi	r18, 0x01	; 1
    53d2:	31 09       	sbc	r19, r1
    53d4:	30 93 fb 19 	sts	0x19FB, r19	; 0x8019fb <uarts+0x4>
    53d8:	20 93 fa 19 	sts	0x19FA, r18	; 0x8019fa <uarts+0x3>
    sei();
    53dc:	78 94       	sei

    return (c & 0xff);
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    53e2:	8f ef       	ldi	r24, 0xFF	; 255
    53e4:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    53e6:	08 95       	ret

000053e8 <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    53e8:	d9 df       	rcall	.-78     	; 0x539c <uart_get_tail>
}
    53ea:	99 27       	eor	r25, r25
    53ec:	08 95       	ret

000053ee <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    53ee:	61 11       	cpse	r22, r1
    53f0:	09 c0       	rjmp	.+18     	; 0x5404 <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    53f2:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    53f6:	25 ff       	sbrs	r18, 5
    53f8:	fc cf       	rjmp	.-8      	; 0x53f2 <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    53fa:	28 2f       	mov	r18, r24
    53fc:	2f 77       	andi	r18, 0x7F	; 127
    53fe:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    5402:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    5404:	61 30       	cpi	r22, 0x01	; 1
    5406:	49 f4       	brne	.+18     	; 0x541a <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    5408:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    540c:	25 ff       	sbrs	r18, 5
    540e:	fc cf       	rjmp	.-8      	; 0x5408 <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    5410:	28 2f       	mov	r18, r24
    5412:	2f 77       	andi	r18, 0x7F	; 127
    5414:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5418:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    541a:	8f ef       	ldi	r24, 0xFF	; 255
    541c:	9f ef       	ldi	r25, 0xFF	; 255
}
    541e:	08 95       	ret

00005420 <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    5420:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    5422:	81 11       	cpse	r24, r1
    5424:	0f c0       	rjmp	.+30     	; 0x5444 <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    5426:	e0 df       	rcall	.-64     	; 0x53e8 <uart_rx_byte>
    5428:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    542a:	60 e0       	ldi	r22, 0x00	; 0
    542c:	90 e0       	ldi	r25, 0x00	; 0
    542e:	df df       	rcall	.-66     	; 0x53ee <uart_tx_byte>
    if(c == '\r')
    5430:	cd 30       	cpi	r28, 0x0D	; 13
    5432:	29 f4       	brne	.+10     	; 0x543e <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    5434:	60 e0       	ldi	r22, 0x00	; 0
    5436:	8a e0       	ldi	r24, 0x0A	; 10
    5438:	90 e0       	ldi	r25, 0x00	; 0
    543a:	d9 df       	rcall	.-78     	; 0x53ee <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    543c:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    543e:	8c 2f       	mov	r24, r28
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	02 c0       	rjmp	.+4      	; 0x5448 <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    5444:	8f ef       	ldi	r24, 0xFF	; 255
    5446:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    5448:	cf 91       	pop	r28
    544a:	08 95       	ret

0000544c <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    544c:	80 e0       	ldi	r24, 0x00	; 0
    544e:	e8 cf       	rjmp	.-48     	; 0x5420 <uart_getchar>
}
    5450:	08 95       	ret

00005452 <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    5452:	1f 93       	push	r17
    5454:	cf 93       	push	r28
    5456:	df 93       	push	r29
    5458:	ec 01       	movw	r28, r24
    545a:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    545c:	c8 df       	rcall	.-112    	; 0x53ee <uart_tx_byte>

    if( c == '\n' )
    545e:	ca 30       	cpi	r28, 0x0A	; 10
    5460:	d1 05       	cpc	r29, r1
    5462:	21 f4       	brne	.+8      	; 0x546c <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    5464:	61 2f       	mov	r22, r17
    5466:	8d e0       	ldi	r24, 0x0D	; 13
    5468:	90 e0       	ldi	r25, 0x00	; 0
    546a:	c1 df       	rcall	.-126    	; 0x53ee <uart_tx_byte>

    return(c);
}
    546c:	ce 01       	movw	r24, r28
    546e:	df 91       	pop	r29
    5470:	cf 91       	pop	r28
    5472:	1f 91       	pop	r17
    5474:	08 95       	ret

00005476 <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    5476:	cf 93       	push	r28
    5478:	df 93       	push	r29
    547a:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    547c:	60 e0       	ldi	r22, 0x00	; 0
    547e:	70 e0       	ldi	r23, 0x00	; 0
    5480:	e8 df       	rcall	.-48     	; 0x5452 <uart_putchar>
    return(c);
}
    5482:	ce 01       	movw	r24, r28
    5484:	df 91       	pop	r29
    5486:	cf 91       	pop	r28
    5488:	08 95       	ret

0000548a <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    548a:	7c cf       	rjmp	.-264    	; 0x5384 <uart_rx_count>
}
    548c:	08 95       	ret

0000548e <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    548e:	cf 92       	push	r12
    5490:	df 92       	push	r13
    5492:	ef 92       	push	r14
    5494:	ff 92       	push	r15
    5496:	6b 01       	movw	r12, r22
    5498:	7c 01       	movw	r14, r24
    549a:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <SPI0_Speed_value>
    549e:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <SPI0_Speed_value+0x1>
    54a2:	a0 91 5b 17 	lds	r26, 0x175B	; 0x80175b <SPI0_Speed_value+0x2>
    54a6:	b0 91 5c 17 	lds	r27, 0x175C	; 0x80175c <SPI0_Speed_value+0x3>
    54aa:	8c 15       	cp	r24, r12
    54ac:	9d 05       	cpc	r25, r13
    54ae:	ae 05       	cpc	r26, r14
    54b0:	bf 05       	cpc	r27, r15
    54b2:	09 f4       	brne	.+2      	; 0x54b6 <SPI0_Speed+0x28>
    54b4:	4e c0       	rjmp	.+156    	; 0x5552 <SPI0_Speed+0xc4>
    54b6:	60 e0       	ldi	r22, 0x00	; 0
    54b8:	7d e2       	ldi	r23, 0x2D	; 45
    54ba:	81 e3       	ldi	r24, 0x31	; 49
    54bc:	91 e0       	ldi	r25, 0x01	; 1
    54be:	a7 01       	movw	r20, r14
    54c0:	96 01       	movw	r18, r12
    54c2:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__udivmodsi4>
    54c6:	20 38       	cpi	r18, 0x80	; 128
    54c8:	31 05       	cpc	r19, r1
    54ca:	41 05       	cpc	r20, r1
    54cc:	51 05       	cpc	r21, r1
    54ce:	28 f4       	brcc	.+10     	; 0x54da <SPI0_Speed+0x4c>
    54d0:	20 34       	cpi	r18, 0x40	; 64
    54d2:	31 05       	cpc	r19, r1
    54d4:	41 05       	cpc	r20, r1
    54d6:	51 05       	cpc	r21, r1
    54d8:	30 f0       	brcs	.+12     	; 0x54e6 <SPI0_Speed+0x58>
    54da:	8d b5       	in	r24, 0x2d	; 45
    54dc:	8e 7f       	andi	r24, 0xFE	; 254
    54de:	8d bd       	out	0x2d, r24	; 45
    54e0:	8c b5       	in	r24, 0x2c	; 44
    54e2:	82 60       	ori	r24, 0x02	; 2
    54e4:	1b c0       	rjmp	.+54     	; 0x551c <SPI0_Speed+0x8e>
    54e6:	8d b5       	in	r24, 0x2d	; 45
    54e8:	20 32       	cpi	r18, 0x20	; 32
    54ea:	31 05       	cpc	r19, r1
    54ec:	41 05       	cpc	r20, r1
    54ee:	51 05       	cpc	r21, r1
    54f0:	28 f0       	brcs	.+10     	; 0x54fc <SPI0_Speed+0x6e>
    54f2:	81 60       	ori	r24, 0x01	; 1
    54f4:	8d bd       	out	0x2d, r24	; 45
    54f6:	8c b5       	in	r24, 0x2c	; 44
    54f8:	82 60       	ori	r24, 0x02	; 2
    54fa:	1f c0       	rjmp	.+62     	; 0x553a <SPI0_Speed+0xac>
    54fc:	20 31       	cpi	r18, 0x10	; 16
    54fe:	31 05       	cpc	r19, r1
    5500:	41 05       	cpc	r20, r1
    5502:	51 05       	cpc	r21, r1
    5504:	10 f0       	brcs	.+4      	; 0x550a <SPI0_Speed+0x7c>
    5506:	8e 7f       	andi	r24, 0xFE	; 254
    5508:	06 c0       	rjmp	.+12     	; 0x5516 <SPI0_Speed+0x88>
    550a:	28 30       	cpi	r18, 0x08	; 8
    550c:	31 05       	cpc	r19, r1
    550e:	41 05       	cpc	r20, r1
    5510:	51 05       	cpc	r21, r1
    5512:	40 f0       	brcs	.+16     	; 0x5524 <SPI0_Speed+0x96>
    5514:	81 60       	ori	r24, 0x01	; 1
    5516:	8d bd       	out	0x2d, r24	; 45
    5518:	8c b5       	in	r24, 0x2c	; 44
    551a:	8d 7f       	andi	r24, 0xFD	; 253
    551c:	8c bd       	out	0x2c, r24	; 44
    551e:	8c b5       	in	r24, 0x2c	; 44
    5520:	81 60       	ori	r24, 0x01	; 1
    5522:	0e c0       	rjmp	.+28     	; 0x5540 <SPI0_Speed+0xb2>
    5524:	24 30       	cpi	r18, 0x04	; 4
    5526:	31 05       	cpc	r19, r1
    5528:	41 05       	cpc	r20, r1
    552a:	51 05       	cpc	r21, r1
    552c:	10 f0       	brcs	.+4      	; 0x5532 <SPI0_Speed+0xa4>
    552e:	8e 7f       	andi	r24, 0xFE	; 254
    5530:	01 c0       	rjmp	.+2      	; 0x5534 <SPI0_Speed+0xa6>
    5532:	81 60       	ori	r24, 0x01	; 1
    5534:	8d bd       	out	0x2d, r24	; 45
    5536:	8c b5       	in	r24, 0x2c	; 44
    5538:	8d 7f       	andi	r24, 0xFD	; 253
    553a:	8c bd       	out	0x2c, r24	; 44
    553c:	8c b5       	in	r24, 0x2c	; 44
    553e:	8e 7f       	andi	r24, 0xFE	; 254
    5540:	8c bd       	out	0x2c, r24	; 44
    5542:	c0 92 59 17 	sts	0x1759, r12	; 0x801759 <SPI0_Speed_value>
    5546:	d0 92 5a 17 	sts	0x175A, r13	; 0x80175a <SPI0_Speed_value+0x1>
    554a:	e0 92 5b 17 	sts	0x175B, r14	; 0x80175b <SPI0_Speed_value+0x2>
    554e:	f0 92 5c 17 	sts	0x175C, r15	; 0x80175c <SPI0_Speed_value+0x3>
    5552:	ff 90       	pop	r15
    5554:	ef 90       	pop	r14
    5556:	df 90       	pop	r13
    5558:	cf 90       	pop	r12
    555a:	08 95       	ret

0000555c <SPI0_Mode>:
    555c:	cf 93       	push	r28
    555e:	df 93       	push	r29
    5560:	00 d0       	rcall	.+0      	; 0x5562 <SPI0_Mode+0x6>
    5562:	00 d0       	rcall	.+0      	; 0x5564 <SPI0_Mode+0x8>
    5564:	1f 92       	push	r1
    5566:	ec 01       	movw	r28, r24
    5568:	81 30       	cpi	r24, 0x01	; 1
    556a:	91 05       	cpc	r25, r1
    556c:	71 f0       	breq	.+28     	; 0x558a <SPI0_Mode+0x2e>
    556e:	2c f4       	brge	.+10     	; 0x557a <SPI0_Mode+0x1e>
    5570:	89 2b       	or	r24, r25
    5572:	c1 f4       	brne	.+48     	; 0x55a4 <SPI0_Mode+0x48>
    5574:	8c b5       	in	r24, 0x2c	; 44
    5576:	87 7f       	andi	r24, 0xF7	; 247
    5578:	11 c0       	rjmp	.+34     	; 0x559c <SPI0_Mode+0x40>
    557a:	82 30       	cpi	r24, 0x02	; 2
    557c:	91 05       	cpc	r25, r1
    557e:	61 f0       	breq	.+24     	; 0x5598 <SPI0_Mode+0x3c>
    5580:	03 97       	sbiw	r24, 0x03	; 3
    5582:	81 f4       	brne	.+32     	; 0x55a4 <SPI0_Mode+0x48>
    5584:	8c b5       	in	r24, 0x2c	; 44
    5586:	88 60       	ori	r24, 0x08	; 8
    5588:	02 c0       	rjmp	.+4      	; 0x558e <SPI0_Mode+0x32>
    558a:	8c b5       	in	r24, 0x2c	; 44
    558c:	87 7f       	andi	r24, 0xF7	; 247
    558e:	8c bd       	out	0x2c, r24	; 44
    5590:	8c b5       	in	r24, 0x2c	; 44
    5592:	84 60       	ori	r24, 0x04	; 4
    5594:	8c bd       	out	0x2c, r24	; 44
    5596:	12 c0       	rjmp	.+36     	; 0x55bc <SPI0_Mode+0x60>
    5598:	8c b5       	in	r24, 0x2c	; 44
    559a:	88 60       	ori	r24, 0x08	; 8
    559c:	8c bd       	out	0x2c, r24	; 44
    559e:	8c b5       	in	r24, 0x2c	; 44
    55a0:	8b 7f       	andi	r24, 0xFB	; 251
    55a2:	f8 cf       	rjmp	.-16     	; 0x5594 <SPI0_Mode+0x38>
    55a4:	ed b7       	in	r30, 0x3d	; 61
    55a6:	fe b7       	in	r31, 0x3e	; 62
    55a8:	d5 83       	std	Z+5, r29	; 0x05
    55aa:	c4 83       	std	Z+4, r28	; 0x04
    55ac:	84 e1       	ldi	r24, 0x14	; 20
    55ae:	93 e0       	ldi	r25, 0x03	; 3
    55b0:	a0 e0       	ldi	r26, 0x00	; 0
    55b2:	81 83       	std	Z+1, r24	; 0x01
    55b4:	92 83       	std	Z+2, r25	; 0x02
    55b6:	a3 83       	std	Z+3, r26	; 0x03
    55b8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    55bc:	d0 93 58 17 	sts	0x1758, r29	; 0x801758 <SPI0_Mode_value+0x1>
    55c0:	c0 93 57 17 	sts	0x1757, r28	; 0x801757 <SPI0_Mode_value>
    55c4:	cd b7       	in	r28, 0x3d	; 61
    55c6:	de b7       	in	r29, 0x3e	; 62
    55c8:	25 96       	adiw	r28, 0x05	; 5
    55ca:	e2 e0       	ldi	r30, 0x02	; 2
    55cc:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

000055d0 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    55d0:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    55d2:	0d b4       	in	r0, 0x2d	; 45
    55d4:	07 fe       	sbrs	r0, 7
    55d6:	fd cf       	rjmp	.-6      	; 0x55d2 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    55d8:	8e b5       	in	r24, 0x2e	; 46
}
    55da:	08 95       	ret

000055dc <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    55dc:	cf 92       	push	r12
    55de:	df 92       	push	r13
    55e0:	ef 92       	push	r14
    55e2:	ff 92       	push	r15
    55e4:	cf 93       	push	r28
    55e6:	df 93       	push	r29
    55e8:	1f 92       	push	r1
    55ea:	cd b7       	in	r28, 0x3d	; 61
    55ec:	de b7       	in	r29, 0x3e	; 62
    55ee:	6b 01       	movw	r12, r22
    55f0:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    55f2:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    55f4:	2f 9a       	sbi	0x05, 7	; 5
    55f6:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    55f8:	2d 9a       	sbi	0x05, 5	; 5
    55fa:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    55fc:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    55fe:	2c 98       	cbi	0x05, 4	; 5
    5600:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    5602:	8c b5       	in	r24, 0x2c	; 44
    5604:	80 61       	ori	r24, 0x10	; 16
    5606:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    5608:	8c b5       	in	r24, 0x2c	; 44
    560a:	80 64       	ori	r24, 0x40	; 64
    560c:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    560e:	8d b5       	in	r24, 0x2d	; 45
    5610:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    5612:	8e b5       	in	r24, 0x2e	; 46
    5614:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    5616:	80 e0       	ldi	r24, 0x00	; 0
    5618:	90 e0       	ldi	r25, 0x00	; 0
    561a:	a0 df       	rcall	.-192    	; 0x555c <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    561c:	c7 01       	movw	r24, r14
    561e:	b6 01       	movw	r22, r12
    5620:	36 df       	rcall	.-404    	; 0x548e <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    5622:	8f ef       	ldi	r24, 0xFF	; 255
    5624:	d5 df       	rcall	.-86     	; 0x55d0 <SPI0_TXRX_Byte>
    5626:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    5628:	df 91       	pop	r29
    562a:	cf 91       	pop	r28
    562c:	ff 90       	pop	r15
    562e:	ef 90       	pop	r14
    5630:	df 90       	pop	r13
    5632:	cf 90       	pop	r12
    5634:	08 95       	ret

00005636 <SPI0_TX>:
    5636:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    5638:	1f 93       	push	r17
    563a:	cf 93       	push	r28
    563c:	df 93       	push	r29
    563e:	8c 01       	movw	r16, r24
    5640:	eb 01       	movw	r28, r22

    while(count > 0)
    5642:	1c 16       	cp	r1, r28
    5644:	1d 06       	cpc	r1, r29
    5646:	34 f4       	brge	.+12     	; 0x5654 <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    5648:	f8 01       	movw	r30, r16
    564a:	81 91       	ld	r24, Z+
    564c:	8f 01       	movw	r16, r30
    564e:	c0 df       	rcall	.-128    	; 0x55d0 <SPI0_TXRX_Byte>
        ++data;
        --count;
    5650:	21 97       	sbiw	r28, 0x01	; 1
    5652:	f7 cf       	rjmp	.-18     	; 0x5642 <SPI0_TX+0xc>
    }
}
    5654:	df 91       	pop	r29
    5656:	cf 91       	pop	r28
    5658:	1f 91       	pop	r17
    565a:	0f 91       	pop	r16
    565c:	08 95       	ret

0000565e <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    565e:	0f 93       	push	r16
    5660:	1f 93       	push	r17
    5662:	cf 93       	push	r28
    5664:	df 93       	push	r29
    5666:	8c 01       	movw	r16, r24
    5668:	eb 01       	movw	r28, r22

    while(count > 0)
    566a:	1c 16       	cp	r1, r28
    566c:	1d 06       	cpc	r1, r29
    566e:	44 f4       	brge	.+16     	; 0x5680 <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    5670:	f8 01       	movw	r30, r16
    5672:	80 81       	ld	r24, Z
    5674:	ad df       	rcall	.-166    	; 0x55d0 <SPI0_TXRX_Byte>
    5676:	f8 01       	movw	r30, r16
    5678:	81 93       	st	Z+, r24
    567a:	8f 01       	movw	r16, r30
        ++data;
        --count;
    567c:	21 97       	sbiw	r28, 0x01	; 1
    567e:	f5 cf       	rjmp	.-22     	; 0x566a <SPI0_TXRX+0xc>
    }
}
    5680:	df 91       	pop	r29
    5682:	cf 91       	pop	r28
    5684:	1f 91       	pop	r17
    5686:	0f 91       	pop	r16
    5688:	08 95       	ret

0000568a <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    568a:	0f 93       	push	r16
    568c:	1f 93       	push	r17
    568e:	cf 93       	push	r28
    5690:	df 93       	push	r29
    5692:	8c 01       	movw	r16, r24
    5694:	eb 01       	movw	r28, r22

    while(count > 0)
    5696:	1c 16       	cp	r1, r28
    5698:	1d 06       	cpc	r1, r29
    569a:	3c f4       	brge	.+14     	; 0x56aa <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    569c:	8f ef       	ldi	r24, 0xFF	; 255
    569e:	98 df       	rcall	.-208    	; 0x55d0 <SPI0_TXRX_Byte>
    56a0:	f8 01       	movw	r30, r16
    56a2:	81 93       	st	Z+, r24
    56a4:	8f 01       	movw	r16, r30
        ++data;
        --count;
    56a6:	21 97       	sbiw	r28, 0x01	; 1
    56a8:	f6 cf       	rjmp	.-20     	; 0x5696 <SPI0_RX+0xc>
    }
}
    56aa:	df 91       	pop	r29
    56ac:	cf 91       	pop	r28
    56ae:	1f 91       	pop	r17
    56b0:	0f 91       	pop	r16
    56b2:	08 95       	ret

000056b4 <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    56b4:	2f b7       	in	r18, 0x3f	; 63
    56b6:	80 91 4f 1a 	lds	r24, 0x1A4F	; 0x801a4f <i2c+0x1>
    56ba:	81 11       	cpse	r24, r1
    56bc:	04 c0       	rjmp	.+8      	; 0x56c6 <i2c_timer+0x12>
    56be:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <i2c+0x2>
    56c2:	81 11       	cpse	r24, r1
    56c4:	0b c0       	rjmp	.+22     	; 0x56dc <i2c_timer+0x28>
    56c6:	80 91 52 1a 	lds	r24, 0x1A52	; 0x801a52 <i2c+0x4>
    56ca:	90 91 53 1a 	lds	r25, 0x1A53	; 0x801a53 <i2c+0x5>
    56ce:	00 97       	sbiw	r24, 0x00	; 0
    56d0:	29 f0       	breq	.+10     	; 0x56dc <i2c_timer+0x28>
    56d2:	01 97       	sbiw	r24, 0x01	; 1
    56d4:	90 93 53 1a 	sts	0x1A53, r25	; 0x801a53 <i2c+0x5>
    56d8:	80 93 52 1a 	sts	0x1A52, r24	; 0x801a52 <i2c+0x4>
    56dc:	2f bf       	out	0x3f, r18	; 63
    56de:	08 95       	ret

000056e0 <i2c_check_op>:
    56e0:	ad b7       	in	r26, 0x3d	; 61
    56e2:	be b7       	in	r27, 0x3e	; 62
    56e4:	17 97       	sbiw	r26, 0x07	; 7
    56e6:	0f b6       	in	r0, 0x3f	; 63
    56e8:	f8 94       	cli
    56ea:	be bf       	out	0x3e, r27	; 62
    56ec:	0f be       	out	0x3f, r0	; 63
    56ee:	ad bf       	out	0x3d, r26	; 61
    56f0:	28 2f       	mov	r18, r24
    56f2:	08 2e       	mov	r0, r24
    56f4:	00 0c       	add	r0, r0
    56f6:	33 0b       	sbc	r19, r19
    56f8:	80 31       	cpi	r24, 0x10	; 16
    56fa:	88 f0       	brcs	.+34     	; 0x571e <i2c_check_op+0x3e>
    56fc:	80 e1       	ldi	r24, 0x10	; 16
    56fe:	90 e0       	ldi	r25, 0x00	; 0
    5700:	ed b7       	in	r30, 0x3d	; 61
    5702:	fe b7       	in	r31, 0x3e	; 62
    5704:	97 83       	std	Z+7, r25	; 0x07
    5706:	86 83       	std	Z+6, r24	; 0x06
    5708:	35 83       	std	Z+5, r19	; 0x05
    570a:	24 83       	std	Z+4, r18	; 0x04
    570c:	89 e2       	ldi	r24, 0x29	; 41
    570e:	94 e0       	ldi	r25, 0x04	; 4
    5710:	a0 e0       	ldi	r26, 0x00	; 0
    5712:	81 83       	std	Z+1, r24	; 0x01
    5714:	92 83       	std	Z+2, r25	; 0x02
    5716:	a3 83       	std	Z+3, r26	; 0x03
    5718:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    571c:	24 c0       	rjmp	.+72     	; 0x5766 <i2c_check_op+0x86>
    571e:	f9 01       	movw	r30, r18
    5720:	ee 0f       	add	r30, r30
    5722:	ff 1f       	adc	r31, r31
    5724:	e2 5a       	subi	r30, 0xA2	; 162
    5726:	f8 4e       	sbci	r31, 0xE8	; 232
    5728:	01 90       	ld	r0, Z+
    572a:	f0 81       	ld	r31, Z
    572c:	e0 2d       	mov	r30, r0
    572e:	30 97       	sbiw	r30, 0x00	; 0
    5730:	d1 f0       	breq	.+52     	; 0x5766 <i2c_check_op+0x86>
    5732:	80 85       	ldd	r24, Z+8	; 0x08
    5734:	91 85       	ldd	r25, Z+9	; 0x09
    5736:	89 2b       	or	r24, r25
    5738:	39 f4       	brne	.+14     	; 0x5748 <i2c_check_op+0x68>
    573a:	ed b7       	in	r30, 0x3d	; 61
    573c:	fe b7       	in	r31, 0x3e	; 62
    573e:	35 83       	std	Z+5, r19	; 0x05
    5740:	24 83       	std	Z+4, r18	; 0x04
    5742:	80 e1       	ldi	r24, 0x10	; 16
    5744:	94 e0       	ldi	r25, 0x04	; 4
    5746:	09 c0       	rjmp	.+18     	; 0x575a <i2c_check_op+0x7a>
    5748:	86 81       	ldd	r24, Z+6	; 0x06
    574a:	81 11       	cpse	r24, r1
    574c:	0e c0       	rjmp	.+28     	; 0x576a <i2c_check_op+0x8a>
    574e:	ed b7       	in	r30, 0x3d	; 61
    5750:	fe b7       	in	r31, 0x3e	; 62
    5752:	35 83       	std	Z+5, r19	; 0x05
    5754:	24 83       	std	Z+4, r18	; 0x04
    5756:	8a ef       	ldi	r24, 0xFA	; 250
    5758:	93 e0       	ldi	r25, 0x03	; 3
    575a:	a0 e0       	ldi	r26, 0x00	; 0
    575c:	81 83       	std	Z+1, r24	; 0x01
    575e:	92 83       	std	Z+2, r25	; 0x02
    5760:	a3 83       	std	Z+3, r26	; 0x03
    5762:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    5766:	80 e0       	ldi	r24, 0x00	; 0
    5768:	01 c0       	rjmp	.+2      	; 0x576c <i2c_check_op+0x8c>
    576a:	81 e0       	ldi	r24, 0x01	; 1
    576c:	ad b7       	in	r26, 0x3d	; 61
    576e:	be b7       	in	r27, 0x3e	; 62
    5770:	17 96       	adiw	r26, 0x07	; 7
    5772:	0f b6       	in	r0, 0x3f	; 63
    5774:	f8 94       	cli
    5776:	be bf       	out	0x3e, r27	; 62
    5778:	0f be       	out	0x3f, r0	; 63
    577a:	ad bf       	out	0x3d, r26	; 61
    577c:	08 95       	ret

0000577e <i2c_task_init>:
    577e:	8f b7       	in	r24, 0x3f	; 63
    5780:	f8 94       	cli
    5782:	ee e5       	ldi	r30, 0x5E	; 94
    5784:	f7 e1       	ldi	r31, 0x17	; 23
    5786:	11 92       	st	Z+, r1
    5788:	11 92       	st	Z+, r1
    578a:	97 e1       	ldi	r25, 0x17	; 23
    578c:	ee 37       	cpi	r30, 0x7E	; 126
    578e:	f9 07       	cpc	r31, r25
    5790:	d1 f7       	brne	.-12     	; 0x5786 <i2c_task_init+0x8>
    5792:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
    5796:	91 e0       	ldi	r25, 0x01	; 1
    5798:	90 93 80 17 	sts	0x1780, r25	; 0x801780 <i2c_task+0x2>
    579c:	10 92 7f 17 	sts	0x177F, r1	; 0x80177f <i2c_task+0x1>
    57a0:	10 92 81 17 	sts	0x1781, r1	; 0x801781 <i2c_task+0x3>
    57a4:	8f bf       	out	0x3f, r24	; 63
    57a6:	08 95       	ret

000057a8 <i2c_task_op_add>:
    57a8:	ef 92       	push	r14
    57aa:	ff 92       	push	r15
    57ac:	0f 93       	push	r16
    57ae:	1f 93       	push	r17
    57b0:	cf 93       	push	r28
    57b2:	df 93       	push	r29
    57b4:	d8 2f       	mov	r29, r24
    57b6:	c6 2f       	mov	r28, r22
    57b8:	7a 01       	movw	r14, r20
    57ba:	02 2f       	mov	r16, r18
    57bc:	1f b7       	in	r17, 0x3f	; 63
    57be:	6a e0       	ldi	r22, 0x0A	; 10
    57c0:	70 e0       	ldi	r23, 0x00	; 0
    57c2:	81 e0       	ldi	r24, 0x01	; 1
    57c4:	90 e0       	ldi	r25, 0x00	; 0
    57c6:	a8 db       	rcall	.-2224   	; 0x4f18 <safecalloc>
    57c8:	fc 01       	movw	r30, r24
    57ca:	89 2b       	or	r24, r25
    57cc:	89 f0       	breq	.+34     	; 0x57f0 <i2c_task_op_add+0x48>
    57ce:	f8 94       	cli
    57d0:	11 82       	std	Z+1, r1	; 0x01
    57d2:	12 82       	std	Z+2, r1	; 0x02
    57d4:	dd 0f       	add	r29, r29
    57d6:	c1 70       	andi	r28, 0x01	; 1
    57d8:	cd 2b       	or	r28, r29
    57da:	c0 83       	st	Z, r28
    57dc:	8a e0       	ldi	r24, 0x0A	; 10
    57de:	90 e0       	ldi	r25, 0x00	; 0
    57e0:	95 83       	std	Z+5, r25	; 0x05
    57e2:	84 83       	std	Z+4, r24	; 0x04
    57e4:	13 82       	std	Z+3, r1	; 0x03
    57e6:	06 83       	std	Z+6, r16	; 0x06
    57e8:	17 82       	std	Z+7, r1	; 0x07
    57ea:	f1 86       	std	Z+9, r15	; 0x09
    57ec:	e0 86       	std	Z+8, r14	; 0x08
    57ee:	1f bf       	out	0x3f, r17	; 63
    57f0:	cf 01       	movw	r24, r30
    57f2:	cd b7       	in	r28, 0x3d	; 61
    57f4:	de b7       	in	r29, 0x3e	; 62
    57f6:	e6 e0       	ldi	r30, 0x06	; 6
    57f8:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

000057fc <i2c_init>:
    57fc:	cf 93       	push	r28
    57fe:	00 d0       	rcall	.+0      	; 0x5800 <i2c_init+0x4>
    5800:	1f 92       	push	r1
    5802:	9b 01       	movw	r18, r22
    5804:	ac 01       	movw	r20, r24
    5806:	cf b7       	in	r28, 0x3f	; 63
    5808:	60 e0       	ldi	r22, 0x00	; 0
    580a:	7d e2       	ldi	r23, 0x2D	; 45
    580c:	81 e3       	ldi	r24, 0x31	; 49
    580e:	91 e0       	ldi	r25, 0x01	; 1
    5810:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__udivmodsi4>
    5814:	da 01       	movw	r26, r20
    5816:	c9 01       	movw	r24, r18
    5818:	40 97       	sbiw	r24, 0x10	; 16
    581a:	a1 09       	sbc	r26, r1
    581c:	b1 09       	sbc	r27, r1
    581e:	ac 01       	movw	r20, r24
    5820:	bd 01       	movw	r22, r26
    5822:	76 95       	lsr	r23
    5824:	67 95       	ror	r22
    5826:	57 95       	ror	r21
    5828:	47 95       	ror	r20
    582a:	ca 01       	movw	r24, r20
    582c:	88 27       	eor	r24, r24
    582e:	89 2b       	or	r24, r25
    5830:	59 f0       	breq	.+22     	; 0x5848 <i2c_init+0x4c>
    5832:	8e ed       	ldi	r24, 0xDE	; 222
    5834:	93 e0       	ldi	r25, 0x03	; 3
    5836:	a0 e0       	ldi	r26, 0x00	; 0
    5838:	ed b7       	in	r30, 0x3d	; 61
    583a:	fe b7       	in	r31, 0x3e	; 62
    583c:	81 83       	std	Z+1, r24	; 0x01
    583e:	92 83       	std	Z+2, r25	; 0x02
    5840:	a3 83       	std	Z+3, r26	; 0x03
    5842:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    5846:	3a c0       	rjmp	.+116    	; 0x58bc <i2c_init+0xc0>
    5848:	f8 94       	cli
    584a:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    584e:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
    5852:	81 e0       	ldi	r24, 0x01	; 1
    5854:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
    5858:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
    585c:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>
    5860:	40 9a       	sbi	0x08, 0	; 8
    5862:	41 9a       	sbi	0x08, 1	; 8
    5864:	84 e8       	ldi	r24, 0x84	; 132
    5866:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    586a:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    586e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5872:	8c 7f       	andi	r24, 0xFC	; 252
    5874:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5878:	80 91 5d 17 	lds	r24, 0x175D	; 0x80175d <i2c_init_status>
    587c:	81 11       	cpse	r24, r1
    587e:	1d c0       	rjmp	.+58     	; 0x58ba <i2c_init+0xbe>
    5880:	ee e5       	ldi	r30, 0x5E	; 94
    5882:	f7 e1       	ldi	r31, 0x17	; 23
    5884:	11 92       	st	Z+, r1
    5886:	11 92       	st	Z+, r1
    5888:	27 e1       	ldi	r18, 0x17	; 23
    588a:	ee 37       	cpi	r30, 0x7E	; 126
    588c:	f2 07       	cpc	r31, r18
    588e:	d1 f7       	brne	.-12     	; 0x5884 <i2c_init+0x88>
    5890:	61 e0       	ldi	r22, 0x01	; 1
    5892:	70 e0       	ldi	r23, 0x00	; 0
    5894:	8a e5       	ldi	r24, 0x5A	; 90
    5896:	9b e2       	ldi	r25, 0x2B	; 43
    5898:	0e 94 8e 34 	call	0x691c	; 0x691c <set_timers>
    589c:	01 96       	adiw	r24, 0x01	; 1
    589e:	51 f4       	brne	.+20     	; 0x58b4 <i2c_init+0xb8>
    58a0:	87 ec       	ldi	r24, 0xC7	; 199
    58a2:	93 e0       	ldi	r25, 0x03	; 3
    58a4:	a0 e0       	ldi	r26, 0x00	; 0
    58a6:	ed b7       	in	r30, 0x3d	; 61
    58a8:	fe b7       	in	r31, 0x3e	; 62
    58aa:	81 83       	std	Z+1, r24	; 0x01
    58ac:	92 83       	std	Z+2, r25	; 0x02
    58ae:	a3 83       	std	Z+3, r26	; 0x03
    58b0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    58b4:	81 e0       	ldi	r24, 0x01	; 1
    58b6:	80 93 5d 17 	sts	0x175D, r24	; 0x80175d <i2c_init_status>
    58ba:	cf bf       	out	0x3f, r28	; 63
    58bc:	0f 90       	pop	r0
    58be:	0f 90       	pop	r0
    58c0:	0f 90       	pop	r0
    58c2:	cf 91       	pop	r28
    58c4:	08 95       	ret

000058c6 <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    58c6:	61 e0       	ldi	r22, 0x01	; 1
    58c8:	70 e0       	ldi	r23, 0x00	; 0
    58ca:	80 e0       	ldi	r24, 0x00	; 0
    58cc:	90 e0       	ldi	r25, 0x00	; 0
    58ce:	a5 db       	rcall	.-2230   	; 0x501a <delayus>
	if(!i2c.enable || i2c.done )
    58d0:	80 91 4f 1a 	lds	r24, 0x1A4F	; 0x801a4f <i2c+0x1>
    58d4:	88 23       	and	r24, r24
    58d6:	39 f0       	breq	.+14     	; 0x58e6 <i2c_done+0x20>
		return(1);
    58d8:	81 e0       	ldi	r24, 0x01	; 1
    58da:	90 91 50 1a 	lds	r25, 0x1A50	; 0x801a50 <i2c+0x2>
    58de:	91 11       	cpse	r25, r1
    58e0:	03 c0       	rjmp	.+6      	; 0x58e8 <i2c_done+0x22>
    58e2:	80 e0       	ldi	r24, 0x00	; 0
    58e4:	08 95       	ret
    58e6:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    58e8:	08 95       	ret

000058ea <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    58ea:	61 e0       	ldi	r22, 0x01	; 1
    58ec:	70 e0       	ldi	r23, 0x00	; 0
    58ee:	80 e0       	ldi	r24, 0x00	; 0
    58f0:	90 e0       	ldi	r25, 0x00	; 0
    58f2:	93 db       	rcall	.-2266   	; 0x501a <delayus>
	if(!i2c_task.enable || i2c_task.done )
    58f4:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <i2c_task>
    58f8:	88 23       	and	r24, r24
    58fa:	39 f0       	breq	.+14     	; 0x590a <i2c_task_done+0x20>
		return(1);
    58fc:	81 e0       	ldi	r24, 0x01	; 1
    58fe:	90 91 80 17 	lds	r25, 0x1780	; 0x801780 <i2c_task+0x2>
    5902:	91 11       	cpse	r25, r1
    5904:	03 c0       	rjmp	.+6      	; 0x590c <i2c_task_done+0x22>
    5906:	80 e0       	ldi	r24, 0x00	; 0
    5908:	08 95       	ret
    590a:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    590c:	08 95       	ret

0000590e <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    590e:	ee e4       	ldi	r30, 0x4E	; 78
    5910:	fa e1       	ldi	r31, 0x1A	; 26
    5912:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    5914:	81 e0       	ldi	r24, 0x01	; 1
    5916:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    5918:	8a e0       	ldi	r24, 0x0A	; 10
    591a:	90 e0       	ldi	r25, 0x00	; 0
    591c:	95 83       	std	Z+5, r25	; 0x05
    591e:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5920:	85 ea       	ldi	r24, 0xA5	; 165
    5922:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5926:	08 95       	ret

00005928 <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    5928:	ef 92       	push	r14
    592a:	ff 92       	push	r15
    592c:	0f 93       	push	r16
    592e:	1f 93       	push	r17
    5930:	cf 93       	push	r28
    5932:	df 93       	push	r29
	uint8_t sreg = SREG;
    5934:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    5936:	f8 94       	cli
	i2c_task.done = 0;
    5938:	10 92 80 17 	sts	0x1780, r1	; 0x801780 <i2c_task+0x2>
	i2c_task.error = 0;
    593c:	10 92 81 17 	sts	0x1781, r1	; 0x801781 <i2c_task+0x3>
	i2c_task.ind = 0;
    5940:	10 92 7f 17 	sts	0x177F, r1	; 0x80177f <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    5944:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    5946:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    5948:	ee 24       	eor	r14, r14
    594a:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    594c:	0a e0       	ldi	r16, 0x0A	; 10
    594e:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    5950:	8c 2f       	mov	r24, r28
    5952:	c6 de       	rcall	.-628    	; 0x56e0 <i2c_check_op>
    5954:	88 23       	and	r24, r24
    5956:	d1 f0       	breq	.+52     	; 0x598c <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    5958:	ec 2f       	mov	r30, r28
    595a:	ee 0f       	add	r30, r30
    595c:	ff 0b       	sbc	r31, r31
    595e:	e2 5a       	subi	r30, 0xA2	; 162
    5960:	f8 4e       	sbci	r31, 0xE8	; 232
    5962:	01 90       	ld	r0, Z+
    5964:	f0 81       	ld	r31, Z
    5966:	e0 2d       	mov	r30, r0
		o->enable = 1;
    5968:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    596a:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    596c:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    596e:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    5970:	15 83       	std	Z+5, r17	; 0x05
    5972:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    5974:	d1 11       	cpse	r29, r1
    5976:	07 c0       	rjmp	.+14     	; 0x5986 <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    5978:	8a e0       	ldi	r24, 0x0A	; 10
    597a:	ae e4       	ldi	r26, 0x4E	; 78
    597c:	ba e1       	ldi	r27, 0x1A	; 26
    597e:	01 90       	ld	r0, Z+
    5980:	0d 92       	st	X+, r0
    5982:	8a 95       	dec	r24
    5984:	e1 f7       	brne	.-8      	; 0x597e <i2c_task_run+0x56>
    5986:	cf 5f       	subi	r28, 0xFF	; 255
    5988:	d1 e0       	ldi	r29, 0x01	; 1
    598a:	e2 cf       	rjmp	.-60     	; 0x5950 <i2c_task_run+0x28>
		}
	}

	if(run)
    598c:	dd 23       	and	r29, r29
    598e:	91 f0       	breq	.+36     	; 0x59b4 <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    5990:	81 e3       	ldi	r24, 0x31	; 49
    5992:	9d e2       	ldi	r25, 0x2D	; 45
    5994:	90 93 83 17 	sts	0x1783, r25	; 0x801783 <i2c_callback+0x1>
    5998:	80 93 82 17 	sts	0x1782, r24	; 0x801782 <i2c_callback>

		i2c_task.enable = 1;
    599c:	81 e0       	ldi	r24, 0x01	; 1
    599e:	80 93 7e 17 	sts	0x177E, r24	; 0x80177e <i2c_task>
		i2c_task.done = 0;
    59a2:	10 92 80 17 	sts	0x1780, r1	; 0x801780 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    59a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    59aa:	8c 7f       	andi	r24, 0xFC	; 252
    59ac:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    59b0:	ae df       	rcall	.-164    	; 0x590e <i2c_send_start>
    59b2:	15 c0       	rjmp	.+42     	; 0x59de <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    59b4:	10 92 83 17 	sts	0x1783, r1	; 0x801783 <i2c_callback+0x1>
    59b8:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    59bc:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
		i2c_task.done = 1;
    59c0:	81 e0       	ldi	r24, 0x01	; 1
    59c2:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    59c6:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
        i2c.enable = 0;
    59ca:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    59ce:	84 e8       	ldi	r24, 0x84	; 132
    59d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    59d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    59d8:	8c 7f       	andi	r24, 0xFC	; 252
    59da:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    59de:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    59e2:	ff be       	out	0x3f, r15	; 63

}
    59e4:	cd b7       	in	r28, 0x3d	; 61
    59e6:	de b7       	in	r29, 0x3e	; 62
    59e8:	e6 e0       	ldi	r30, 0x06	; 6
    59ea:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

000059ee <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    59ee:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    59f0:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    59f2:	10 92 83 17 	sts	0x1783, r1	; 0x801783 <i2c_callback+0x1>
    59f6:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <i2c_callback>

	i2c.enable = 1; // Enabled
    59fa:	31 e0       	ldi	r19, 0x01	; 1
    59fc:	30 93 4f 1a 	sts	0x1A4F, r19	; 0x801a4f <i2c+0x1>
	i2c.done = 0;
    5a00:	10 92 50 1a 	sts	0x1A50, r1	; 0x801a50 <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    5a04:	88 0f       	add	r24, r24
    5a06:	61 70       	andi	r22, 0x01	; 1
    5a08:	68 2b       	or	r22, r24
    5a0a:	60 93 4e 1a 	sts	0x1A4E, r22	; 0x801a4e <i2c>
	i2c.flags = 0;
    5a0e:	10 92 51 1a 	sts	0x1A51, r1	; 0x801a51 <i2c+0x3>
    i2c.len = len;
    5a12:	20 93 54 1a 	sts	0x1A54, r18	; 0x801a54 <i2c+0x6>
    i2c.ind = 0;
    5a16:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <i2c+0x7>
    i2c.buf = buf;
    5a1a:	50 93 57 1a 	sts	0x1A57, r21	; 0x801a57 <i2c+0x9>
    5a1e:	40 93 56 1a 	sts	0x1A56, r20	; 0x801a56 <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5a22:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a26:	8c 7f       	andi	r24, 0xFC	; 252
    5a28:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    5a2c:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    5a30:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    5a32:	6d df       	rcall	.-294    	; 0x590e <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    5a34:	48 df       	rcall	.-368    	; 0x58c6 <i2c_done>
    5a36:	88 23       	and	r24, r24
    5a38:	e9 f3       	breq	.-6      	; 0x5a34 <i2c_fn+0x46>
    5a3a:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    5a3c:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <i2c+0x3>
    5a40:	91 11       	cpse	r25, r1
    5a42:	80 e0       	ldi	r24, 0x00	; 0
    5a44:	08 95       	ret

00005a46 <i2c_send_stop>:
}
    5a46:	ee e4       	ldi	r30, 0x4E	; 78
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    5a48:	fa e1       	ldi	r31, 0x1A	; 26
    5a4a:	81 e0       	ldi	r24, 0x01	; 1
    5a4c:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    5a4e:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    5a50:	84 e9       	ldi	r24, 0x94	; 148
    5a52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    5a56:	6a e0       	ldi	r22, 0x0A	; 10
    5a58:	70 e0       	ldi	r23, 0x00	; 0
    5a5a:	80 e0       	ldi	r24, 0x00	; 0
    5a5c:	90 e0       	ldi	r25, 0x00	; 0
    5a5e:	dd ca       	rjmp	.-2630   	; 0x501a <delayus>
    5a60:	08 95       	ret

00005a62 <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    5a62:	cf 93       	push	r28
    5a64:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    5a66:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <i2c_task>
    5a6a:	88 23       	and	r24, r24
    5a6c:	09 f4       	brne	.+2      	; 0x5a70 <i2c_task_next_op+0xe>
    5a6e:	46 c0       	rjmp	.+140    	; 0x5afc <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    5a70:	80 91 7f 17 	lds	r24, 0x177F	; 0x80177f <i2c_task+0x1>
    5a74:	35 de       	rcall	.-918    	; 0x56e0 <i2c_check_op>
    5a76:	88 23       	and	r24, r24
    5a78:	b1 f0       	breq	.+44     	; 0x5aa6 <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    5a7a:	e0 91 7f 17 	lds	r30, 0x177F	; 0x80177f <i2c_task+0x1>
    5a7e:	ee 0f       	add	r30, r30
    5a80:	ff 0b       	sbc	r31, r31
    5a82:	e2 5a       	subi	r30, 0xA2	; 162
    5a84:	f8 4e       	sbci	r31, 0xE8	; 232
    5a86:	c0 81       	ld	r28, Z
    5a88:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    5a8a:	8a e0       	ldi	r24, 0x0A	; 10
    5a8c:	ee e4       	ldi	r30, 0x4E	; 78
    5a8e:	fa e1       	ldi	r31, 0x1A	; 26
    5a90:	de 01       	movw	r26, r28
    5a92:	01 90       	ld	r0, Z+
    5a94:	0d 92       	st	X+, r0
    5a96:	8a 95       	dec	r24
    5a98:	e1 f7       	brne	.-8      	; 0x5a92 <i2c_task_next_op+0x30>
			if(o->flags)
    5a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    5a9c:	88 23       	and	r24, r24
    5a9e:	19 f0       	breq	.+6      	; 0x5aa6 <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    5aa0:	81 e0       	ldi	r24, 0x01	; 1
    5aa2:	80 93 81 17 	sts	0x1781, r24	; 0x801781 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5aa6:	80 91 7f 17 	lds	r24, 0x177F	; 0x80177f <i2c_task+0x1>
    5aaa:	8f 5f       	subi	r24, 0xFF	; 255
    5aac:	19 de       	rcall	.-974    	; 0x56e0 <i2c_check_op>
    5aae:	88 23       	and	r24, r24
    5ab0:	29 f1       	breq	.+74     	; 0x5afc <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5ab2:	e0 91 7f 17 	lds	r30, 0x177F	; 0x80177f <i2c_task+0x1>
    5ab6:	ef 5f       	subi	r30, 0xFF	; 255
    5ab8:	e0 93 7f 17 	sts	0x177F, r30	; 0x80177f <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    5abc:	ee 0f       	add	r30, r30
    5abe:	ff 0b       	sbc	r31, r31
    5ac0:	e2 5a       	subi	r30, 0xA2	; 162
    5ac2:	f8 4e       	sbci	r31, 0xE8	; 232
    5ac4:	01 90       	ld	r0, Z+
    5ac6:	f0 81       	ld	r31, Z
    5ac8:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5aca:	81 81       	ldd	r24, Z+1	; 0x01
    5acc:	81 30       	cpi	r24, 0x01	; 1
    5ace:	19 f0       	breq	.+6      	; 0x5ad6 <i2c_task_next_op+0x74>
    5ad0:	82 81       	ldd	r24, Z+2	; 0x02
    5ad2:	81 11       	cpse	r24, r1
    5ad4:	13 c0       	rjmp	.+38     	; 0x5afc <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5ad6:	8a e0       	ldi	r24, 0x0A	; 10
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	95 83       	std	Z+5, r25	; 0x05
    5adc:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    5ade:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    5ae0:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    5ae2:	81 e0       	ldi	r24, 0x01	; 1
    5ae4:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5ae6:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5ae8:	8a e0       	ldi	r24, 0x0A	; 10
    5aea:	ae e4       	ldi	r26, 0x4E	; 78
    5aec:	ba e1       	ldi	r27, 0x1A	; 26
    5aee:	01 90       	ld	r0, Z+
    5af0:	0d 92       	st	X+, r0
    5af2:	8a 95       	dec	r24

				i2c_send_start();
    5af4:	e1 f7       	brne	.-8      	; 0x5aee <i2c_task_next_op+0x8c>
    5af6:	0b df       	rcall	.-490    	; 0x590e <i2c_send_start>

				return(1);
    5af8:	81 e0       	ldi	r24, 0x01	; 1
    5afa:	0f c0       	rjmp	.+30     	; 0x5b1a <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    5afc:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
	i2c_task.done = 1;
    5b00:	81 e0       	ldi	r24, 0x01	; 1
    5b02:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    5b06:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
	i2c.enable = 0;
    5b0a:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
	i2c.flags = 0;
    5b0e:	10 92 51 1a 	sts	0x1A51, r1	; 0x801a51 <i2c+0x3>
	i2c.ind = 0;
    5b12:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <i2c+0x7>

	i2c_send_stop();
    5b16:	97 df       	rcall	.-210    	; 0x5a46 <i2c_send_stop>

	return(0);
    5b18:	80 e0       	ldi	r24, 0x00	; 0
}
    5b1a:	df 91       	pop	r29
    5b1c:	cf 91       	pop	r28
    5b1e:	08 95       	ret

00005b20 <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    5b20:	e0 91 82 17 	lds	r30, 0x1782	; 0x801782 <i2c_callback>
    5b24:	f0 91 83 17 	lds	r31, 0x1783	; 0x801783 <i2c_callback+0x1>
    5b28:	30 97       	sbiw	r30, 0x00	; 0
    5b2a:	11 f0       	breq	.+4      	; 0x5b30 <i2c_next+0x10>
	    i2c_callback();
    5b2c:	09 95       	icall
    5b2e:	08 95       	ret
	else
		i2c_send_stop();
    5b30:	8a cf       	rjmp	.-236    	; 0x5a46 <i2c_send_stop>
    5b32:	08 95       	ret

00005b34 <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    5b34:	1f 92       	push	r1
    5b36:	0f 92       	push	r0
    5b38:	0f b6       	in	r0, 0x3f	; 63
    5b3a:	0f 92       	push	r0
    5b3c:	11 24       	eor	r1, r1
    5b3e:	0b b6       	in	r0, 0x3b	; 59
    5b40:	0f 92       	push	r0
    5b42:	2f 93       	push	r18
    5b44:	3f 93       	push	r19
    5b46:	4f 93       	push	r20
    5b48:	5f 93       	push	r21
    5b4a:	6f 93       	push	r22
    5b4c:	7f 93       	push	r23
    5b4e:	8f 93       	push	r24
    5b50:	9f 93       	push	r25
    5b52:	af 93       	push	r26
    5b54:	bf 93       	push	r27
    5b56:	ef 93       	push	r30
    5b58:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    5b5a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    5b5e:	90 91 4f 1a 	lds	r25, 0x1A4F	; 0x801a4f <i2c+0x1>
    5b62:	99 23       	and	r25, r25
    5b64:	09 f1       	breq	.+66     	; 0x5ba8 <__vector_26+0x74>
    5b66:	90 91 50 1a 	lds	r25, 0x1A50	; 0x801a50 <i2c+0x2>
    5b6a:	91 11       	cpse	r25, r1
    5b6c:	1d c0       	rjmp	.+58     	; 0x5ba8 <__vector_26+0x74>
    5b6e:	20 91 56 1a 	lds	r18, 0x1A56	; 0x801a56 <i2c+0x8>
    5b72:	30 91 57 1a 	lds	r19, 0x1A57	; 0x801a57 <i2c+0x9>
    5b76:	21 15       	cp	r18, r1
    5b78:	31 05       	cpc	r19, r1
    5b7a:	b1 f0       	breq	.+44     	; 0x5ba8 <__vector_26+0x74>
    5b7c:	90 91 54 1a 	lds	r25, 0x1A54	; 0x801a54 <i2c+0x6>
    5b80:	99 23       	and	r25, r25
    5b82:	91 f0       	breq	.+36     	; 0x5ba8 <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    5b84:	40 91 52 1a 	lds	r20, 0x1A52	; 0x801a52 <i2c+0x4>
    5b88:	50 91 53 1a 	lds	r21, 0x1A53	; 0x801a53 <i2c+0x5>
    5b8c:	45 2b       	or	r20, r21
    5b8e:	71 f4       	brne	.+28     	; 0x5bac <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    5b90:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <i2c+0x3>
    5b94:	81 60       	ori	r24, 0x01	; 1
    5b96:	80 93 51 1a 	sts	0x1A51, r24	; 0x801a51 <i2c+0x3>
		i2c_task.enable = 0;
    5b9a:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
		i2c_task.done = 1;
    5b9e:	81 e0       	ldi	r24, 0x01	; 1
    5ba0:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>
		i2c_task.error = 1;
    5ba4:	80 93 81 17 	sts	0x1781, r24	; 0x801781 <i2c_task+0x3>
		i2c_send_stop();
    5ba8:	4e df       	rcall	.-356    	; 0x5a46 <i2c_send_stop>
		return;
    5baa:	9b c0       	rjmp	.+310    	; 0x5ce2 <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    5bac:	88 7f       	andi	r24, 0xF8	; 248
    5bae:	80 33       	cpi	r24, 0x30	; 48
    5bb0:	09 f4       	brne	.+2      	; 0x5bb4 <__vector_26+0x80>
    5bb2:	83 c0       	rjmp	.+262    	; 0x5cba <__vector_26+0x186>
    5bb4:	70 f4       	brcc	.+28     	; 0x5bd2 <__vector_26+0x9e>
    5bb6:	88 31       	cpi	r24, 0x18	; 24
    5bb8:	09 f1       	breq	.+66     	; 0x5bfc <__vector_26+0xc8>
    5bba:	28 f4       	brcc	.+10     	; 0x5bc6 <__vector_26+0x92>
    5bbc:	88 30       	cpi	r24, 0x08	; 8
    5bbe:	c9 f0       	breq	.+50     	; 0x5bf2 <__vector_26+0xbe>
    5bc0:	80 31       	cpi	r24, 0x10	; 16
    5bc2:	b9 f0       	breq	.+46     	; 0x5bf2 <__vector_26+0xbe>
    5bc4:	83 c0       	rjmp	.+262    	; 0x5ccc <__vector_26+0x198>
    5bc6:	80 32       	cpi	r24, 0x20	; 32
    5bc8:	09 f4       	brne	.+2      	; 0x5bcc <__vector_26+0x98>
    5bca:	65 c0       	rjmp	.+202    	; 0x5c96 <__vector_26+0x162>
    5bcc:	88 32       	cpi	r24, 0x28	; 40
    5bce:	b1 f0       	breq	.+44     	; 0x5bfc <__vector_26+0xc8>
    5bd0:	7d c0       	rjmp	.+250    	; 0x5ccc <__vector_26+0x198>
    5bd2:	88 34       	cpi	r24, 0x48	; 72
    5bd4:	09 f4       	brne	.+2      	; 0x5bd8 <__vector_26+0xa4>
    5bd6:	68 c0       	rjmp	.+208    	; 0x5ca8 <__vector_26+0x174>
    5bd8:	38 f4       	brcc	.+14     	; 0x5be8 <__vector_26+0xb4>
    5bda:	88 33       	cpi	r24, 0x38	; 56
    5bdc:	09 f4       	brne	.+2      	; 0x5be0 <__vector_26+0xac>
    5bde:	57 c0       	rjmp	.+174    	; 0x5c8e <__vector_26+0x15a>
    5be0:	80 34       	cpi	r24, 0x40	; 64
    5be2:	09 f4       	brne	.+2      	; 0x5be6 <__vector_26+0xb2>
    5be4:	42 c0       	rjmp	.+132    	; 0x5c6a <__vector_26+0x136>
    5be6:	72 c0       	rjmp	.+228    	; 0x5ccc <__vector_26+0x198>
    5be8:	80 35       	cpi	r24, 0x50	; 80
    5bea:	79 f1       	breq	.+94     	; 0x5c4a <__vector_26+0x116>
    5bec:	88 35       	cpi	r24, 0x58	; 88
    5bee:	b9 f0       	breq	.+46     	; 0x5c1e <__vector_26+0xea>
    5bf0:	6d c0       	rjmp	.+218    	; 0x5ccc <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    5bf2:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <i2c+0x7>
			TWDR = i2c.address;
    5bf6:	80 91 4e 1a 	lds	r24, 0x1A4E	; 0x801a4e <i2c>
    5bfa:	0e c0       	rjmp	.+28     	; 0x5c18 <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    5bfc:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x7>
    5c00:	89 17       	cp	r24, r25
    5c02:	ec f4       	brge	.+58     	; 0x5c3e <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    5c04:	91 e0       	ldi	r25, 0x01	; 1
    5c06:	98 0f       	add	r25, r24
    5c08:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <i2c+0x7>
    5c0c:	f9 01       	movw	r30, r18
    5c0e:	e8 0f       	add	r30, r24
    5c10:	f1 1d       	adc	r31, r1
    5c12:	87 fd       	sbrc	r24, 7
    5c14:	fa 95       	dec	r31
    5c16:	80 81       	ld	r24, Z
    5c18:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5c1c:	36 c0       	rjmp	.+108    	; 0x5c8a <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    5c1e:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x7>
    5c22:	89 17       	cp	r24, r25
    5c24:	64 f4       	brge	.+24     	; 0x5c3e <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    5c26:	91 e0       	ldi	r25, 0x01	; 1
    5c28:	98 0f       	add	r25, r24
    5c2a:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <i2c+0x7>
    5c2e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5c32:	f9 01       	movw	r30, r18
    5c34:	e8 0f       	add	r30, r24
    5c36:	f1 1d       	adc	r31, r1
    5c38:	87 fd       	sbrc	r24, 7
    5c3a:	fa 95       	dec	r31
    5c3c:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    5c3e:	81 e0       	ldi	r24, 0x01	; 1
    5c40:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
				i2c.enable = 0;
    5c44:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
    5c48:	4b c0       	rjmp	.+150    	; 0x5ce0 <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    5c4a:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x7>
    5c4e:	89 17       	cp	r24, r25
    5c50:	64 f4       	brge	.+24     	; 0x5c6a <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    5c52:	91 e0       	ldi	r25, 0x01	; 1
    5c54:	98 0f       	add	r25, r24
    5c56:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <i2c+0x7>
    5c5a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5c5e:	f9 01       	movw	r30, r18
    5c60:	e8 0f       	add	r30, r24
    5c62:	f1 1d       	adc	r31, r1
    5c64:	87 fd       	sbrc	r24, 7
    5c66:	fa 95       	dec	r31
    5c68:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    5c6a:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x7>
    5c6e:	08 2e       	mov	r0, r24
    5c70:	00 0c       	add	r0, r0
    5c72:	99 0b       	sbc	r25, r25
    5c74:	01 96       	adiw	r24, 0x01	; 1
    5c76:	20 91 54 1a 	lds	r18, 0x1A54	; 0x801a54 <i2c+0x6>
    5c7a:	02 2e       	mov	r0, r18
    5c7c:	00 0c       	add	r0, r0
    5c7e:	33 0b       	sbc	r19, r19
    5c80:	82 17       	cp	r24, r18
    5c82:	93 07       	cpc	r25, r19
    5c84:	14 f4       	brge	.+4      	; 0x5c8a <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5c86:	85 ec       	ldi	r24, 0xC5	; 197
    5c88:	03 c0       	rjmp	.+6      	; 0x5c90 <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5c8a:	85 e8       	ldi	r24, 0x85	; 133
    5c8c:	01 c0       	rjmp	.+2      	; 0x5c90 <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5c8e:	85 ea       	ldi	r24, 0xA5	; 165
    5c90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    5c94:	26 c0       	rjmp	.+76     	; 0x5ce2 <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    5c96:	81 e0       	ldi	r24, 0x01	; 1
    5c98:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
			i2c.enable = 0;
    5c9c:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    5ca0:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <i2c+0x3>
    5ca4:	88 60       	ori	r24, 0x08	; 8
    5ca6:	1a c0       	rjmp	.+52     	; 0x5cdc <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5ca8:	81 e0       	ldi	r24, 0x01	; 1
    5caa:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
			i2c.enable = 0;
    5cae:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5cb2:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <i2c+0x3>
    5cb6:	80 61       	ori	r24, 0x10	; 16
    5cb8:	11 c0       	rjmp	.+34     	; 0x5cdc <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5cba:	81 e0       	ldi	r24, 0x01	; 1
    5cbc:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
			i2c.enable = 0;
    5cc0:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    5cc4:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <i2c+0x3>
    5cc8:	80 62       	ori	r24, 0x20	; 32
    5cca:	08 c0       	rjmp	.+16     	; 0x5cdc <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    5ccc:	81 e0       	ldi	r24, 0x01	; 1
    5cce:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
			i2c.enable = 0;
    5cd2:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5cd6:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <i2c+0x3>
    5cda:	80 64       	ori	r24, 0x40	; 64
    5cdc:	80 93 51 1a 	sts	0x1A51, r24	; 0x801a51 <i2c+0x3>
			i2c_next();
    5ce0:	1f df       	rcall	.-450    	; 0x5b20 <i2c_next>
			break;
	}
}
    5ce2:	ff 91       	pop	r31
    5ce4:	ef 91       	pop	r30
    5ce6:	bf 91       	pop	r27
    5ce8:	af 91       	pop	r26
    5cea:	9f 91       	pop	r25
    5cec:	8f 91       	pop	r24
    5cee:	7f 91       	pop	r23
    5cf0:	6f 91       	pop	r22
    5cf2:	5f 91       	pop	r21
    5cf4:	4f 91       	pop	r20
    5cf6:	3f 91       	pop	r19
    5cf8:	2f 91       	pop	r18
    5cfa:	0f 90       	pop	r0
    5cfc:	0b be       	out	0x3b, r0	; 59
    5cfe:	0f 90       	pop	r0
    5d00:	0f be       	out	0x3f, r0	; 63
    5d02:	0f 90       	pop	r0
    5d04:	1f 90       	pop	r1
    5d06:	18 95       	reti

00005d08 <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    5d08:	cf 93       	push	r28
    5d0a:	00 d0       	rcall	.+0      	; 0x5d0c <i2c_print_error+0x4>
    5d0c:	00 d0       	rcall	.+0      	; 0x5d0e <i2c_print_error+0x6>
    5d0e:	1f 92       	push	r1
    int flags = o->flags;
    5d10:	fc 01       	movw	r30, r24
    5d12:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    5d14:	cc 23       	and	r28, r28
    5d16:	09 f4       	brne	.+2      	; 0x5d1a <i2c_print_error+0x12>
    5d18:	67 c0       	rjmp	.+206    	; 0x5de8 <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    5d1a:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <i2c+0x2>
    5d1e:	81 11       	cpse	r24, r1
    5d20:	03 c0       	rjmp	.+6      	; 0x5d28 <i2c_print_error+0x20>
    5d22:	88 e2       	ldi	r24, 0x28	; 40
    5d24:	93 e0       	ldi	r25, 0x03	; 3
    5d26:	02 c0       	rjmp	.+4      	; 0x5d2c <i2c_print_error+0x24>
    5d28:	83 e2       	ldi	r24, 0x23	; 35
    5d2a:	93 e0       	ldi	r25, 0x03	; 3
    5d2c:	ed b7       	in	r30, 0x3d	; 61
    5d2e:	fe b7       	in	r31, 0x3e	; 62
    5d30:	95 83       	std	Z+5, r25	; 0x05
    5d32:	84 83       	std	Z+4, r24	; 0x04
    5d34:	81 ec       	ldi	r24, 0xC1	; 193
    5d36:	93 e0       	ldi	r25, 0x03	; 3
    5d38:	a0 e0       	ldi	r26, 0x00	; 0
    5d3a:	81 83       	std	Z+1, r24	; 0x01
    5d3c:	92 83       	std	Z+2, r25	; 0x02
    5d3e:	a3 83       	std	Z+3, r26	; 0x03
    5d40:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    5d44:	c0 ff       	sbrs	r28, 0
    5d46:	0a c0       	rjmp	.+20     	; 0x5d5c <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    5d48:	83 eb       	ldi	r24, 0xB3	; 179
    5d4a:	93 e0       	ldi	r25, 0x03	; 3
    5d4c:	a0 e0       	ldi	r26, 0x00	; 0
    5d4e:	ed b7       	in	r30, 0x3d	; 61
    5d50:	fe b7       	in	r31, 0x3e	; 62
    5d52:	81 83       	std	Z+1, r24	; 0x01
    5d54:	92 83       	std	Z+2, r25	; 0x02
    5d56:	a3 83       	std	Z+3, r26	; 0x03
    5d58:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
		if(flags & I2C_OP_LEN)
    5d5c:	c1 ff       	sbrs	r28, 1
    5d5e:	0a c0       	rjmp	.+20     	; 0x5d74 <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    5d60:	89 ea       	ldi	r24, 0xA9	; 169
    5d62:	93 e0       	ldi	r25, 0x03	; 3
    5d64:	a0 e0       	ldi	r26, 0x00	; 0
    5d66:	ed b7       	in	r30, 0x3d	; 61
    5d68:	fe b7       	in	r31, 0x3e	; 62
    5d6a:	81 83       	std	Z+1, r24	; 0x01
    5d6c:	92 83       	std	Z+2, r25	; 0x02
    5d6e:	a3 83       	std	Z+3, r26	; 0x03
    5d70:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
		if(flags & I2C_OP_ERROR)
    5d74:	c2 ff       	sbrs	r28, 2
    5d76:	0a c0       	rjmp	.+20     	; 0x5d8c <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    5d78:	8d e9       	ldi	r24, 0x9D	; 157
    5d7a:	93 e0       	ldi	r25, 0x03	; 3
    5d7c:	a0 e0       	ldi	r26, 0x00	; 0
    5d7e:	ed b7       	in	r30, 0x3d	; 61
    5d80:	fe b7       	in	r31, 0x3e	; 62
    5d82:	81 83       	std	Z+1, r24	; 0x01
    5d84:	92 83       	std	Z+2, r25	; 0x02
    5d86:	a3 83       	std	Z+3, r26	; 0x03
    5d88:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    5d8c:	c4 ff       	sbrs	r28, 4
    5d8e:	0a c0       	rjmp	.+20     	; 0x5da4 <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    5d90:	8b e8       	ldi	r24, 0x8B	; 139
    5d92:	93 e0       	ldi	r25, 0x03	; 3
    5d94:	a0 e0       	ldi	r26, 0x00	; 0
    5d96:	ed b7       	in	r30, 0x3d	; 61
    5d98:	fe b7       	in	r31, 0x3e	; 62
    5d9a:	81 83       	std	Z+1, r24	; 0x01
    5d9c:	92 83       	std	Z+2, r25	; 0x02
    5d9e:	a3 83       	std	Z+3, r26	; 0x03
    5da0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5da4:	c3 ff       	sbrs	r28, 3
    5da6:	0a c0       	rjmp	.+20     	; 0x5dbc <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5da8:	89 e7       	ldi	r24, 0x79	; 121
    5daa:	93 e0       	ldi	r25, 0x03	; 3
    5dac:	a0 e0       	ldi	r26, 0x00	; 0
    5dae:	ed b7       	in	r30, 0x3d	; 61
    5db0:	fe b7       	in	r31, 0x3e	; 62
    5db2:	81 83       	std	Z+1, r24	; 0x01
    5db4:	92 83       	std	Z+2, r25	; 0x02
    5db6:	a3 83       	std	Z+3, r26	; 0x03
    5db8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5dbc:	c5 ff       	sbrs	r28, 5
    5dbe:	0a c0       	rjmp	.+20     	; 0x5dd4 <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5dc0:	86 e6       	ldi	r24, 0x66	; 102
    5dc2:	93 e0       	ldi	r25, 0x03	; 3
    5dc4:	a0 e0       	ldi	r26, 0x00	; 0
    5dc6:	ed b7       	in	r30, 0x3d	; 61
    5dc8:	fe b7       	in	r31, 0x3e	; 62
    5dca:	81 83       	std	Z+1, r24	; 0x01
    5dcc:	92 83       	std	Z+2, r25	; 0x02
    5dce:	a3 83       	std	Z+3, r26	; 0x03
    5dd0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
		printf("\n");
    5dd4:	84 e6       	ldi	r24, 0x64	; 100
    5dd6:	93 e0       	ldi	r25, 0x03	; 3
    5dd8:	a0 e0       	ldi	r26, 0x00	; 0
    5dda:	ed b7       	in	r30, 0x3d	; 61
    5ddc:	fe b7       	in	r31, 0x3e	; 62
    5dde:	81 83       	std	Z+1, r24	; 0x01
    5de0:	92 83       	std	Z+2, r25	; 0x02
    5de2:	a3 83       	std	Z+3, r26	; 0x03
    5de4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
	}
}
    5de8:	0f 90       	pop	r0
    5dea:	0f 90       	pop	r0
    5dec:	0f 90       	pop	r0
    5dee:	0f 90       	pop	r0
    5df0:	0f 90       	pop	r0
    5df2:	cf 91       	pop	r28
    5df4:	08 95       	ret

00005df6 <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5df6:	6f 92       	push	r6
    5df8:	7f 92       	push	r7
    5dfa:	8f 92       	push	r8
    5dfc:	af 92       	push	r10
    5dfe:	bf 92       	push	r11
    5e00:	cf 92       	push	r12
    5e02:	df 92       	push	r13
    5e04:	ef 92       	push	r14
    5e06:	0f 93       	push	r16
    5e08:	1f 93       	push	r17
    5e0a:	cf 93       	push	r28
    5e0c:	df 93       	push	r29
    5e0e:	00 d0       	rcall	.+0      	; 0x5e10 <i2c_display_task_errors+0x1a>
    5e10:	00 d0       	rcall	.+0      	; 0x5e12 <i2c_display_task_errors+0x1c>
    5e12:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5e14:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <i2c_task+0x2>
    5e18:	90 e0       	ldi	r25, 0x00	; 0
    5e1a:	ed b7       	in	r30, 0x3d	; 61
    5e1c:	fe b7       	in	r31, 0x3e	; 62
    5e1e:	95 83       	std	Z+5, r25	; 0x05
    5e20:	84 83       	std	Z+4, r24	; 0x04
    5e22:	81 e5       	ldi	r24, 0x51	; 81
    5e24:	93 e0       	ldi	r25, 0x03	; 3
    5e26:	a0 e0       	ldi	r26, 0x00	; 0
    5e28:	81 83       	std	Z+1, r24	; 0x01
    5e2a:	92 83       	std	Z+2, r25	; 0x02
    5e2c:	a3 83       	std	Z+3, r26	; 0x03
    5e2e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5e32:	80 91 81 17 	lds	r24, 0x1781	; 0x801781 <i2c_task+0x3>
    5e36:	90 e0       	ldi	r25, 0x00	; 0
    5e38:	ed b7       	in	r30, 0x3d	; 61
    5e3a:	fe b7       	in	r31, 0x3e	; 62
    5e3c:	95 83       	std	Z+5, r25	; 0x05
    5e3e:	84 83       	std	Z+4, r24	; 0x04
    5e40:	8d e3       	ldi	r24, 0x3D	; 61
    5e42:	93 e0       	ldi	r25, 0x03	; 3
    5e44:	a0 e0       	ldi	r26, 0x00	; 0
    5e46:	81 83       	std	Z+1, r24	; 0x01
    5e48:	92 83       	std	Z+2, r25	; 0x02
    5e4a:	a3 83       	std	Z+3, r26	; 0x03
    5e4c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    5e50:	ce e5       	ldi	r28, 0x5E	; 94
    5e52:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5e54:	00 e0       	ldi	r16, 0x00	; 0
    5e56:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    5e58:	83 e3       	ldi	r24, 0x33	; 51
    5e5a:	93 e0       	ldi	r25, 0x03	; 3
    5e5c:	6c 01       	movw	r12, r24
    5e5e:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    5e60:	81 e3       	ldi	r24, 0x31	; 49
    5e62:	93 e0       	ldi	r25, 0x03	; 3
    5e64:	3c 01       	movw	r6, r24
    5e66:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5e68:	30 2f       	mov	r19, r16
    5e6a:	21 2f       	mov	r18, r17
    5e6c:	5e 01       	movw	r10, r28
    5e6e:	0f 5f       	subi	r16, 0xFF	; 255
    5e70:	1f 4f       	sbci	r17, 0xFF	; 255
    5e72:	88 81       	ld	r24, Y
    5e74:	99 81       	ldd	r25, Y+1	; 0x01
    5e76:	89 2b       	or	r24, r25
    5e78:	b1 f0       	breq	.+44     	; 0x5ea6 <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5e7a:	ed b7       	in	r30, 0x3d	; 61
    5e7c:	fe b7       	in	r31, 0x3e	; 62
    5e7e:	34 83       	std	Z+4, r19	; 0x04
    5e80:	25 83       	std	Z+5, r18	; 0x05
    5e82:	c1 82       	std	Z+1, r12	; 0x01
    5e84:	d2 82       	std	Z+2, r13	; 0x02
    5e86:	e3 82       	std	Z+3, r14	; 0x03
    5e88:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    5e8c:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5e8e:	f5 01       	movw	r30, r10
    5e90:	80 81       	ld	r24, Z
    5e92:	91 81       	ldd	r25, Z+1	; 0x01
    5e94:	39 df       	rcall	.-398    	; 0x5d08 <i2c_print_error>
		printf("\n");
    5e96:	ed b7       	in	r30, 0x3d	; 61
    5e98:	fe b7       	in	r31, 0x3e	; 62
    5e9a:	61 82       	std	Z+1, r6	; 0x01
    5e9c:	72 82       	std	Z+2, r7	; 0x02
    5e9e:	83 82       	std	Z+3, r8	; 0x03
    5ea0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    5ea4:	e1 cf       	rjmp	.-62     	; 0x5e68 <i2c_display_task_errors+0x72>
	}
}
    5ea6:	0f 90       	pop	r0
    5ea8:	0f 90       	pop	r0
    5eaa:	0f 90       	pop	r0
    5eac:	0f 90       	pop	r0
    5eae:	0f 90       	pop	r0
    5eb0:	df 91       	pop	r29
    5eb2:	cf 91       	pop	r28
    5eb4:	1f 91       	pop	r17
    5eb6:	0f 91       	pop	r16
    5eb8:	ef 90       	pop	r14
    5eba:	df 90       	pop	r13
    5ebc:	cf 90       	pop	r12
    5ebe:	bf 90       	pop	r11
    5ec0:	af 90       	pop	r10
    5ec2:	8f 90       	pop	r8
    5ec4:	7f 90       	pop	r7
    5ec6:	6f 90       	pop	r6
    5ec8:	08 95       	ret

00005eca <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5eca:	6a e0       	ldi	r22, 0x0A	; 10
    5ecc:	0e 94 13 e6 	call	0x1cc26	; 0x1cc26 <__udivmodqi4>
    5ed0:	82 95       	swap	r24
    5ed2:	80 7f       	andi	r24, 0xF0	; 240
    5ed4:	89 2b       	or	r24, r25
    5ed6:	08 95       	ret

00005ed8 <BCDtoBIN>:
    5ed8:	98 2f       	mov	r25, r24
    5eda:	92 95       	swap	r25
    5edc:	9f 70       	andi	r25, 0x0F	; 15
    5ede:	8f 70       	andi	r24, 0x0F	; 15
    5ee0:	2a e0       	ldi	r18, 0x0A	; 10
    5ee2:	92 9f       	mul	r25, r18
    5ee4:	80 0d       	add	r24, r0
    5ee6:	11 24       	eor	r1, r1
    5ee8:	08 95       	ret

00005eea <i2c_rtc_write>:
    5eea:	ac e0       	ldi	r26, 0x0C	; 12
    5eec:	b0 e0       	ldi	r27, 0x00	; 0
    5eee:	eb e7       	ldi	r30, 0x7B	; 123
    5ef0:	ff e2       	ldi	r31, 0x2F	; 47
    5ef2:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
    5ef6:	9f ef       	ldi	r25, 0xFF	; 255
    5ef8:	92 0f       	add	r25, r18
    5efa:	98 30       	cpi	r25, 0x08	; 8
    5efc:	50 f5       	brcc	.+84     	; 0x5f52 <i2c_rtc_write+0x68>
    5efe:	6c 83       	std	Y+4, r22	; 0x04
    5f00:	90 e0       	ldi	r25, 0x00	; 0
    5f02:	02 2f       	mov	r16, r18
    5f04:	10 e0       	ldi	r17, 0x00	; 0
    5f06:	69 2f       	mov	r22, r25
    5f08:	09 2e       	mov	r0, r25
    5f0a:	00 0c       	add	r0, r0
    5f0c:	77 0b       	sbc	r23, r23
    5f0e:	60 17       	cp	r22, r16
    5f10:	71 07       	cpc	r23, r17
    5f12:	6c f4       	brge	.+26     	; 0x5f2e <i2c_rtc_write+0x44>
    5f14:	a5 e0       	ldi	r26, 0x05	; 5
    5f16:	b0 e0       	ldi	r27, 0x00	; 0
    5f18:	ac 0f       	add	r26, r28
    5f1a:	bd 1f       	adc	r27, r29
    5f1c:	a6 0f       	add	r26, r22
    5f1e:	b7 1f       	adc	r27, r23
    5f20:	64 0f       	add	r22, r20
    5f22:	75 1f       	adc	r23, r21
    5f24:	fb 01       	movw	r30, r22
    5f26:	30 81       	ld	r19, Z
    5f28:	3c 93       	st	X, r19
    5f2a:	9f 5f       	subi	r25, 0xFF	; 255
    5f2c:	ec cf       	rjmp	.-40     	; 0x5f06 <i2c_rtc_write+0x1c>
    5f2e:	2f 5f       	subi	r18, 0xFF	; 255
    5f30:	ae 01       	movw	r20, r28
    5f32:	4c 5f       	subi	r20, 0xFC	; 252
    5f34:	5f 4f       	sbci	r21, 0xFF	; 255
    5f36:	60 e0       	ldi	r22, 0x00	; 0
    5f38:	5a dd       	rcall	.-1356   	; 0x59ee <i2c_fn>
    5f3a:	81 11       	cpse	r24, r1
    5f3c:	0c c0       	rjmp	.+24     	; 0x5f56 <i2c_rtc_write+0x6c>
    5f3e:	8e ed       	ldi	r24, 0xDE	; 222
    5f40:	94 e0       	ldi	r25, 0x04	; 4
    5f42:	a0 e0       	ldi	r26, 0x00	; 0
    5f44:	ed b7       	in	r30, 0x3d	; 61
    5f46:	fe b7       	in	r31, 0x3e	; 62
    5f48:	81 83       	std	Z+1, r24	; 0x01
    5f4a:	92 83       	std	Z+2, r25	; 0x02
    5f4c:	a3 83       	std	Z+3, r26	; 0x03
    5f4e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    5f52:	80 e0       	ldi	r24, 0x00	; 0
    5f54:	01 c0       	rjmp	.+2      	; 0x5f58 <i2c_rtc_write+0x6e>
    5f56:	81 e0       	ldi	r24, 0x01	; 1
    5f58:	2c 96       	adiw	r28, 0x0c	; 12
    5f5a:	e4 e0       	ldi	r30, 0x04	; 4
    5f5c:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

00005f60 <i2c_rtc_read>:
    5f60:	a4 e0       	ldi	r26, 0x04	; 4
    5f62:	b0 e0       	ldi	r27, 0x00	; 0
    5f64:	e6 eb       	ldi	r30, 0xB6	; 182
    5f66:	ff e2       	ldi	r31, 0x2F	; 47
    5f68:	0c 94 bf e6 	jmp	0x1cd7e	; 0x1cd7e <__prologue_saves__+0x18>
    5f6c:	6c 83       	std	Y+4, r22	; 0x04
    5f6e:	9f ef       	ldi	r25, 0xFF	; 255
    5f70:	92 0f       	add	r25, r18
    5f72:	98 30       	cpi	r25, 0x08	; 8
    5f74:	f8 f4       	brcc	.+62     	; 0x5fb4 <i2c_rtc_read+0x54>
    5f76:	02 2f       	mov	r16, r18
    5f78:	7a 01       	movw	r14, r20
    5f7a:	18 2f       	mov	r17, r24
    5f7c:	21 e0       	ldi	r18, 0x01	; 1
    5f7e:	ae 01       	movw	r20, r28
    5f80:	4c 5f       	subi	r20, 0xFC	; 252
    5f82:	5f 4f       	sbci	r21, 0xFF	; 255
    5f84:	60 e0       	ldi	r22, 0x00	; 0
    5f86:	33 dd       	rcall	.-1434   	; 0x59ee <i2c_fn>
    5f88:	81 11       	cpse	r24, r1
    5f8a:	03 c0       	rjmp	.+6      	; 0x5f92 <i2c_rtc_read+0x32>
    5f8c:	82 ec       	ldi	r24, 0xC2	; 194
    5f8e:	94 e0       	ldi	r25, 0x04	; 4
    5f90:	09 c0       	rjmp	.+18     	; 0x5fa4 <i2c_rtc_read+0x44>
    5f92:	20 2f       	mov	r18, r16
    5f94:	a7 01       	movw	r20, r14
    5f96:	61 e0       	ldi	r22, 0x01	; 1
    5f98:	81 2f       	mov	r24, r17
    5f9a:	29 dd       	rcall	.-1454   	; 0x59ee <i2c_fn>
    5f9c:	81 11       	cpse	r24, r1
    5f9e:	0c c0       	rjmp	.+24     	; 0x5fb8 <i2c_rtc_read+0x58>
    5fa0:	89 ea       	ldi	r24, 0xA9	; 169
    5fa2:	94 e0       	ldi	r25, 0x04	; 4
    5fa4:	a0 e0       	ldi	r26, 0x00	; 0
    5fa6:	ed b7       	in	r30, 0x3d	; 61
    5fa8:	fe b7       	in	r31, 0x3e	; 62
    5faa:	81 83       	std	Z+1, r24	; 0x01
    5fac:	92 83       	std	Z+2, r25	; 0x02
    5fae:	a3 83       	std	Z+3, r26	; 0x03
    5fb0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    5fb4:	80 e0       	ldi	r24, 0x00	; 0
    5fb6:	01 c0       	rjmp	.+2      	; 0x5fba <i2c_rtc_read+0x5a>
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	24 96       	adiw	r28, 0x04	; 4
    5fbc:	e6 e0       	ldi	r30, 0x06	; 6
    5fbe:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

00005fc2 <i2c_rtc_init>:
    5fc2:	60 ea       	ldi	r22, 0xA0	; 160
    5fc4:	76 e8       	ldi	r23, 0x86	; 134
    5fc6:	81 e0       	ldi	r24, 0x01	; 1
    5fc8:	90 e0       	ldi	r25, 0x00	; 0
    5fca:	18 cc       	rjmp	.-2000   	; 0x57fc <i2c_init>
    5fcc:	08 95       	ret

00005fce <rtc_write>:
    5fce:	ab e0       	ldi	r26, 0x0B	; 11
    5fd0:	b0 e0       	ldi	r27, 0x00	; 0
    5fd2:	ed ee       	ldi	r30, 0xED	; 237
    5fd4:	ff e2       	ldi	r31, 0x2F	; 47
    5fd6:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
    5fda:	8c 01       	movw	r16, r24
    5fdc:	fc 01       	movw	r30, r24
    5fde:	80 81       	ld	r24, Z
    5fe0:	74 df       	rcall	.-280    	; 0x5eca <BINtoBCD>
    5fe2:	8f 77       	andi	r24, 0x7F	; 127
    5fe4:	8c 83       	std	Y+4, r24	; 0x04
    5fe6:	f8 01       	movw	r30, r16
    5fe8:	82 81       	ldd	r24, Z+2	; 0x02
    5fea:	6f df       	rcall	.-290    	; 0x5eca <BINtoBCD>
    5fec:	8f 77       	andi	r24, 0x7F	; 127
    5fee:	8d 83       	std	Y+5, r24	; 0x05
    5ff0:	f8 01       	movw	r30, r16
    5ff2:	84 81       	ldd	r24, Z+4	; 0x04
    5ff4:	6a df       	rcall	.-300    	; 0x5eca <BINtoBCD>
    5ff6:	8f 73       	andi	r24, 0x3F	; 63
    5ff8:	8e 83       	std	Y+6, r24	; 0x06
    5ffa:	f8 01       	movw	r30, r16
    5ffc:	84 85       	ldd	r24, Z+12	; 0x0c
    5ffe:	87 70       	andi	r24, 0x07	; 7
    6000:	8f 5f       	subi	r24, 0xFF	; 255
    6002:	8f 83       	std	Y+7, r24	; 0x07
    6004:	86 81       	ldd	r24, Z+6	; 0x06
    6006:	61 df       	rcall	.-318    	; 0x5eca <BINtoBCD>
    6008:	8f 73       	andi	r24, 0x3F	; 63
    600a:	88 87       	std	Y+8, r24	; 0x08
    600c:	f8 01       	movw	r30, r16
    600e:	80 85       	ldd	r24, Z+8	; 0x08
    6010:	8f 5f       	subi	r24, 0xFF	; 255
    6012:	5b df       	rcall	.-330    	; 0x5eca <BINtoBCD>
    6014:	8f 71       	andi	r24, 0x1F	; 31
    6016:	89 87       	std	Y+9, r24	; 0x09
    6018:	f8 01       	movw	r30, r16
    601a:	82 85       	ldd	r24, Z+10	; 0x0a
    601c:	84 56       	subi	r24, 0x64	; 100
    601e:	55 df       	rcall	.-342    	; 0x5eca <BINtoBCD>
    6020:	8a 87       	std	Y+10, r24	; 0x0a
    6022:	83 e9       	ldi	r24, 0x93	; 147
    6024:	8b 87       	std	Y+11, r24	; 0x0b
    6026:	28 e0       	ldi	r18, 0x08	; 8
    6028:	ae 01       	movw	r20, r28
    602a:	4c 5f       	subi	r20, 0xFC	; 252
    602c:	5f 4f       	sbci	r21, 0xFF	; 255
    602e:	60 e0       	ldi	r22, 0x00	; 0
    6030:	88 e6       	ldi	r24, 0x68	; 104
    6032:	5b df       	rcall	.-330    	; 0x5eea <i2c_rtc_write>
    6034:	81 11       	cpse	r24, r1
    6036:	0c c0       	rjmp	.+24     	; 0x6050 <rtc_write+0x82>
    6038:	88 e9       	ldi	r24, 0x98	; 152
    603a:	94 e0       	ldi	r25, 0x04	; 4
    603c:	a0 e0       	ldi	r26, 0x00	; 0
    603e:	ed b7       	in	r30, 0x3d	; 61
    6040:	fe b7       	in	r31, 0x3e	; 62
    6042:	81 83       	std	Z+1, r24	; 0x01
    6044:	92 83       	std	Z+2, r25	; 0x02
    6046:	a3 83       	std	Z+3, r26	; 0x03
    6048:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    604c:	80 e0       	ldi	r24, 0x00	; 0
    604e:	01 c0       	rjmp	.+2      	; 0x6052 <rtc_write+0x84>
    6050:	81 e0       	ldi	r24, 0x01	; 1
    6052:	2b 96       	adiw	r28, 0x0b	; 11
    6054:	e4 e0       	ldi	r30, 0x04	; 4
    6056:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

0000605a <rtc_read>:
    605a:	ab e0       	ldi	r26, 0x0B	; 11
    605c:	b0 e0       	ldi	r27, 0x00	; 0
    605e:	e3 e3       	ldi	r30, 0x33	; 51
    6060:	f0 e3       	ldi	r31, 0x30	; 48
    6062:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
    6066:	8c 01       	movw	r16, r24
    6068:	28 e0       	ldi	r18, 0x08	; 8
    606a:	ae 01       	movw	r20, r28
    606c:	4c 5f       	subi	r20, 0xFC	; 252
    606e:	5f 4f       	sbci	r21, 0xFF	; 255
    6070:	60 e0       	ldi	r22, 0x00	; 0
    6072:	88 e6       	ldi	r24, 0x68	; 104
    6074:	75 df       	rcall	.-278    	; 0x5f60 <i2c_rtc_read>
    6076:	81 11       	cpse	r24, r1
    6078:	0c c0       	rjmp	.+24     	; 0x6092 <rtc_read+0x38>
    607a:	88 e8       	ldi	r24, 0x88	; 136
    607c:	94 e0       	ldi	r25, 0x04	; 4
    607e:	a0 e0       	ldi	r26, 0x00	; 0
    6080:	ed b7       	in	r30, 0x3d	; 61
    6082:	fe b7       	in	r31, 0x3e	; 62
    6084:	81 83       	std	Z+1, r24	; 0x01
    6086:	92 83       	std	Z+2, r25	; 0x02
    6088:	a3 83       	std	Z+3, r26	; 0x03
    608a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    608e:	80 e0       	ldi	r24, 0x00	; 0
    6090:	33 c0       	rjmp	.+102    	; 0x60f8 <rtc_read+0x9e>
    6092:	8c 81       	ldd	r24, Y+4	; 0x04
    6094:	8f 77       	andi	r24, 0x7F	; 127
    6096:	20 df       	rcall	.-448    	; 0x5ed8 <BCDtoBIN>
    6098:	90 e0       	ldi	r25, 0x00	; 0
    609a:	f8 01       	movw	r30, r16
    609c:	91 83       	std	Z+1, r25	; 0x01
    609e:	80 83       	st	Z, r24
    60a0:	8d 81       	ldd	r24, Y+5	; 0x05
    60a2:	8f 77       	andi	r24, 0x7F	; 127
    60a4:	19 df       	rcall	.-462    	; 0x5ed8 <BCDtoBIN>
    60a6:	90 e0       	ldi	r25, 0x00	; 0
    60a8:	f8 01       	movw	r30, r16
    60aa:	93 83       	std	Z+3, r25	; 0x03
    60ac:	82 83       	std	Z+2, r24	; 0x02
    60ae:	8e 81       	ldd	r24, Y+6	; 0x06
    60b0:	8f 73       	andi	r24, 0x3F	; 63
    60b2:	12 df       	rcall	.-476    	; 0x5ed8 <BCDtoBIN>
    60b4:	90 e0       	ldi	r25, 0x00	; 0
    60b6:	f8 01       	movw	r30, r16
    60b8:	95 83       	std	Z+5, r25	; 0x05
    60ba:	84 83       	std	Z+4, r24	; 0x04
    60bc:	8f 81       	ldd	r24, Y+7	; 0x07
    60be:	87 70       	andi	r24, 0x07	; 7
    60c0:	90 e0       	ldi	r25, 0x00	; 0
    60c2:	01 97       	sbiw	r24, 0x01	; 1
    60c4:	95 87       	std	Z+13, r25	; 0x0d
    60c6:	84 87       	std	Z+12, r24	; 0x0c
    60c8:	88 85       	ldd	r24, Y+8	; 0x08
    60ca:	8f 73       	andi	r24, 0x3F	; 63
    60cc:	05 df       	rcall	.-502    	; 0x5ed8 <BCDtoBIN>
    60ce:	90 e0       	ldi	r25, 0x00	; 0
    60d0:	f8 01       	movw	r30, r16
    60d2:	97 83       	std	Z+7, r25	; 0x07
    60d4:	86 83       	std	Z+6, r24	; 0x06
    60d6:	89 85       	ldd	r24, Y+9	; 0x09
    60d8:	8f 71       	andi	r24, 0x1F	; 31
    60da:	fe de       	rcall	.-516    	; 0x5ed8 <BCDtoBIN>
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	01 97       	sbiw	r24, 0x01	; 1
    60e0:	f8 01       	movw	r30, r16
    60e2:	91 87       	std	Z+9, r25	; 0x09
    60e4:	80 87       	std	Z+8, r24	; 0x08
    60e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    60e8:	f7 de       	rcall	.-530    	; 0x5ed8 <BCDtoBIN>
    60ea:	90 e0       	ldi	r25, 0x00	; 0
    60ec:	8c 59       	subi	r24, 0x9C	; 156
    60ee:	9f 4f       	sbci	r25, 0xFF	; 255
    60f0:	f8 01       	movw	r30, r16
    60f2:	93 87       	std	Z+11, r25	; 0x0b
    60f4:	82 87       	std	Z+10, r24	; 0x0a
    60f6:	81 e0       	ldi	r24, 0x01	; 1
    60f8:	2b 96       	adiw	r28, 0x0b	; 11
    60fa:	e4 e0       	ldi	r30, 0x04	; 4
    60fc:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

00006100 <rtc_run>:
    6100:	a4 e0       	ldi	r26, 0x04	; 4
    6102:	b0 e0       	ldi	r27, 0x00	; 0
    6104:	e6 e8       	ldi	r30, 0x86	; 134
    6106:	f0 e3       	ldi	r31, 0x30	; 48
    6108:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
    610c:	8c 01       	movw	r16, r24
    610e:	21 e0       	ldi	r18, 0x01	; 1
    6110:	ae 01       	movw	r20, r28
    6112:	4c 5f       	subi	r20, 0xFC	; 252
    6114:	5f 4f       	sbci	r21, 0xFF	; 255
    6116:	60 e0       	ldi	r22, 0x00	; 0
    6118:	88 e6       	ldi	r24, 0x68	; 104
    611a:	22 df       	rcall	.-444    	; 0x5f60 <i2c_rtc_read>
    611c:	81 11       	cpse	r24, r1
    611e:	03 c0       	rjmp	.+6      	; 0x6126 <rtc_run+0x26>
    6120:	84 e7       	ldi	r24, 0x74	; 116
    6122:	94 e0       	ldi	r25, 0x04	; 4
    6124:	24 c0       	rjmp	.+72     	; 0x616e <rtc_run+0x6e>
    6126:	8c 81       	ldd	r24, Y+4	; 0x04
    6128:	0f 3f       	cpi	r16, 0xFF	; 255
    612a:	ff ef       	ldi	r31, 0xFF	; 255
    612c:	1f 07       	cpc	r17, r31
    612e:	59 f4       	brne	.+22     	; 0x6146 <rtc_run+0x46>
    6130:	08 2e       	mov	r0, r24
    6132:	00 0c       	add	r0, r0
    6134:	99 0b       	sbc	r25, r25
    6136:	80 95       	com	r24
    6138:	90 95       	com	r25
    613a:	89 2f       	mov	r24, r25
    613c:	88 1f       	adc	r24, r24
    613e:	88 27       	eor	r24, r24
    6140:	88 1f       	adc	r24, r24
    6142:	90 e0       	ldi	r25, 0x00	; 0
    6144:	20 c0       	rjmp	.+64     	; 0x6186 <rtc_run+0x86>
    6146:	8f 77       	andi	r24, 0x7F	; 127
    6148:	01 15       	cp	r16, r1
    614a:	11 05       	cpc	r17, r1
    614c:	11 f4       	brne	.+4      	; 0x6152 <rtc_run+0x52>
    614e:	90 e8       	ldi	r25, 0x80	; 128
    6150:	01 c0       	rjmp	.+2      	; 0x6154 <rtc_run+0x54>
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	89 2b       	or	r24, r25
    6156:	8c 83       	std	Y+4, r24	; 0x04
    6158:	21 e0       	ldi	r18, 0x01	; 1
    615a:	ae 01       	movw	r20, r28
    615c:	4c 5f       	subi	r20, 0xFC	; 252
    615e:	5f 4f       	sbci	r21, 0xFF	; 255
    6160:	60 e0       	ldi	r22, 0x00	; 0
    6162:	88 e6       	ldi	r24, 0x68	; 104
    6164:	c2 de       	rcall	.-636    	; 0x5eea <i2c_rtc_write>
    6166:	81 11       	cpse	r24, r1
    6168:	0d c0       	rjmp	.+26     	; 0x6184 <rtc_run+0x84>
    616a:	8f e5       	ldi	r24, 0x5F	; 95
    616c:	94 e0       	ldi	r25, 0x04	; 4
    616e:	a0 e0       	ldi	r26, 0x00	; 0
    6170:	ed b7       	in	r30, 0x3d	; 61
    6172:	fe b7       	in	r31, 0x3e	; 62
    6174:	81 83       	std	Z+1, r24	; 0x01
    6176:	92 83       	std	Z+2, r25	; 0x02
    6178:	a3 83       	std	Z+3, r26	; 0x03
    617a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    617e:	8f ef       	ldi	r24, 0xFF	; 255
    6180:	9f ef       	ldi	r25, 0xFF	; 255
    6182:	01 c0       	rjmp	.+2      	; 0x6186 <rtc_run+0x86>
    6184:	c8 01       	movw	r24, r16
    6186:	24 96       	adiw	r28, 0x04	; 4
    6188:	e4 e0       	ldi	r30, 0x04	; 4
    618a:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

0000618e <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    618e:	a7 e0       	ldi	r26, 0x07	; 7
    6190:	b0 e0       	ldi	r27, 0x00	; 0
    6192:	ed ec       	ldi	r30, 0xCD	; 205
    6194:	f0 e3       	ldi	r31, 0x30	; 48
    6196:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
    619a:	8c 01       	movw	r16, r24
    619c:	4c 83       	std	Y+4, r20	; 0x04
    619e:	5d 83       	std	Y+5, r21	; 0x05
    61a0:	6e 83       	std	Y+6, r22	; 0x06
    61a2:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    61a4:	0e df       	rcall	.-484    	; 0x5fc2 <i2c_rtc_init>

    if(!force)
    61a6:	01 15       	cp	r16, r1
    61a8:	11 05       	cpc	r17, r1
    61aa:	39 f4       	brne	.+14     	; 0x61ba <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    61ac:	8f ef       	ldi	r24, 0xFF	; 255
    61ae:	9f ef       	ldi	r25, 0xFF	; 255
    61b0:	a7 df       	rcall	.-178    	; 0x6100 <rtc_run>
        if(state < 0)
    61b2:	87 fd       	sbrc	r24, 7
    61b4:	16 c0       	rjmp	.+44     	; 0x61e2 <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    61b6:	81 11       	cpse	r24, r1
    61b8:	22 c0       	rjmp	.+68     	; 0x61fe <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    61ba:	80 e0       	ldi	r24, 0x00	; 0
    61bc:	90 e0       	ldi	r25, 0x00	; 0
    61be:	a0 df       	rcall	.-192    	; 0x6100 <rtc_run>
    61c0:	97 fd       	sbrc	r25, 7
    61c2:	0f c0       	rjmp	.+30     	; 0x61e2 <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    61c4:	ce 01       	movw	r24, r28
    61c6:	04 96       	adiw	r24, 0x04	; 4
    61c8:	a3 d6       	rcall	.+3398   	; 0x6f10 <gmtime>
    61ca:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    61cc:	81 f4       	brne	.+32     	; 0x61ee <rtc_init+0x60>
    61ce:	81 e4       	ldi	r24, 0x41	; 65
        {
            printf("rtc_init  write epoch failed\n");
    61d0:	94 e0       	ldi	r25, 0x04	; 4
    61d2:	a0 e0       	ldi	r26, 0x00	; 0
    61d4:	ed b7       	in	r30, 0x3d	; 61
    61d6:	fe b7       	in	r31, 0x3e	; 62
    61d8:	81 83       	std	Z+1, r24	; 0x01
    61da:	92 83       	std	Z+2, r25	; 0x02
    61dc:	a3 83       	std	Z+3, r26	; 0x03
    61de:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    61e2:	10 92 f6 19 	sts	0x19F6, r1	; 0x8019f6 <rtc_ok+0x1>
            rtc_ok = 0;
    61e6:	10 92 f5 19 	sts	0x19F5, r1	; 0x8019f5 <rtc_ok>
            return 0;
    61ea:	80 e0       	ldi	r24, 0x00	; 0
    61ec:	0e c0       	rjmp	.+28     	; 0x620a <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    61ee:	ef de       	rcall	.-546    	; 0x5fce <rtc_write>
    61f0:	88 23       	and	r24, r24
    61f2:	69 f3       	breq	.-38     	; 0x61ce <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    61f4:	81 e0       	ldi	r24, 0x01	; 1
    61f6:	90 e0       	ldi	r25, 0x00	; 0
    61f8:	83 df       	rcall	.-250    	; 0x6100 <rtc_run>
    61fa:	97 fd       	sbrc	r25, 7
    61fc:	f2 cf       	rjmp	.-28     	; 0x61e2 <rtc_init+0x54>
    61fe:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    6200:	90 e0       	ldi	r25, 0x00	; 0
    6202:	90 93 f6 19 	sts	0x19F6, r25	; 0x8019f6 <rtc_ok+0x1>
    6206:	80 93 f5 19 	sts	0x19F5, r24	; 0x8019f5 <rtc_ok>
    620a:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    620c:	e4 e0       	ldi	r30, 0x04	; 4
    620e:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

00006212 <islower>:
    6212:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    6214:	21 56       	subi	r18, 0x61	; 97
    6216:	31 09       	sbc	r19, r1
    6218:	81 e0       	ldi	r24, 0x01	; 1
    621a:	90 e0       	ldi	r25, 0x00	; 0
    621c:	2a 31       	cpi	r18, 0x1A	; 26
    621e:	31 05       	cpc	r19, r1
    6220:	10 f0       	brcs	.+4      	; 0x6226 <islower+0x14>
    6222:	80 e0       	ldi	r24, 0x00	; 0
    6224:	90 e0       	ldi	r25, 0x00	; 0
    6226:	08 95       	ret

00006228 <toupper>:
    6228:	cf 93       	push	r28
    622a:	df 93       	push	r29
    622c:	ec 01       	movw	r28, r24
    622e:	f1 df       	rcall	.-30     	; 0x6212 <islower>
    6230:	89 2b       	or	r24, r25
    6232:	19 f0       	breq	.+6      	; 0x623a <toupper+0x12>
    6234:	ce 01       	movw	r24, r28
    6236:	80 97       	sbiw	r24, 0x20	; 32
    6238:	01 c0       	rjmp	.+2      	; 0x623c <toupper+0x14>
    623a:	ce 01       	movw	r24, r28
    623c:	df 91       	pop	r29
    623e:	cf 91       	pop	r28
    6240:	08 95       	ret

00006242 <strcpy>:
    6242:	fc 01       	movw	r30, r24
    6244:	db 01       	movw	r26, r22
    6246:	2d 91       	ld	r18, X+
    6248:	bd 01       	movw	r22, r26
    624a:	01 96       	adiw	r24, 0x01	; 1
    624c:	22 23       	and	r18, r18
    624e:	11 f0       	breq	.+4      	; 0x6254 <strcpy+0x12>
    6250:	20 83       	st	Z, r18
    6252:	f7 cf       	rjmp	.-18     	; 0x6242 <strcpy>
    6254:	10 82       	st	Z, r1
    6256:	08 95       	ret

00006258 <strncpy>:
    6258:	db 01       	movw	r26, r22
    625a:	fc 01       	movw	r30, r24
    625c:	2d 91       	ld	r18, X+
    625e:	21 11       	cpse	r18, r1
    6260:	03 c0       	rjmp	.+6      	; 0x6268 <strncpy+0x10>
    6262:	4e 0f       	add	r20, r30
    6264:	5f 1f       	adc	r21, r31
    6266:	08 c0       	rjmp	.+16     	; 0x6278 <strncpy+0x20>
    6268:	41 15       	cp	r20, r1
    626a:	51 05       	cpc	r21, r1
    626c:	21 f0       	breq	.+8      	; 0x6276 <strncpy+0x1e>
    626e:	21 93       	st	Z+, r18
    6270:	41 50       	subi	r20, 0x01	; 1
    6272:	51 09       	sbc	r21, r1
    6274:	f3 cf       	rjmp	.-26     	; 0x625c <strncpy+0x4>
    6276:	08 95       	ret
    6278:	4e 17       	cp	r20, r30
    627a:	5f 07       	cpc	r21, r31
    627c:	11 f0       	breq	.+4      	; 0x6282 <strncpy+0x2a>
    627e:	11 92       	st	Z+, r1
    6280:	fb cf       	rjmp	.-10     	; 0x6278 <strncpy+0x20>
    6282:	08 95       	ret

00006284 <strcat>:
    6284:	cf 93       	push	r28
    6286:	df 93       	push	r29
    6288:	d8 2f       	mov	r29, r24
    628a:	c9 2f       	mov	r28, r25
    628c:	28 2f       	mov	r18, r24
    628e:	39 2f       	mov	r19, r25
    6290:	c9 01       	movw	r24, r18
    6292:	2f 5f       	subi	r18, 0xFF	; 255
    6294:	3f 4f       	sbci	r19, 0xFF	; 255
    6296:	fc 01       	movw	r30, r24
    6298:	40 81       	ld	r20, Z
    629a:	41 11       	cpse	r20, r1
    629c:	f9 cf       	rjmp	.-14     	; 0x6290 <strcat+0xc>
    629e:	d1 df       	rcall	.-94     	; 0x6242 <strcpy>
    62a0:	8d 2f       	mov	r24, r29
    62a2:	9c 2f       	mov	r25, r28
    62a4:	df 91       	pop	r29
    62a6:	cf 91       	pop	r28
    62a8:	08 95       	ret

000062aa <reverse>:
    62aa:	fc 01       	movw	r30, r24
    62ac:	01 90       	ld	r0, Z+
    62ae:	00 20       	and	r0, r0
    62b0:	e9 f7       	brne	.-6      	; 0x62ac <reverse+0x2>
    62b2:	31 97       	sbiw	r30, 0x01	; 1
    62b4:	e8 1b       	sub	r30, r24
    62b6:	f9 0b       	sbc	r31, r25
    62b8:	af 01       	movw	r20, r30
    62ba:	55 95       	asr	r21
    62bc:	47 95       	ror	r20
    62be:	e8 0f       	add	r30, r24
    62c0:	f9 1f       	adc	r31, r25
    62c2:	dc 01       	movw	r26, r24
    62c4:	9d 01       	movw	r18, r26
    62c6:	28 1b       	sub	r18, r24
    62c8:	39 0b       	sbc	r19, r25
    62ca:	24 17       	cp	r18, r20
    62cc:	35 07       	cpc	r19, r21
    62ce:	2c f4       	brge	.+10     	; 0x62da <reverse+0x30>
    62d0:	22 91       	ld	r18, -Z
    62d2:	3c 91       	ld	r19, X
    62d4:	30 83       	st	Z, r19
    62d6:	2d 93       	st	X+, r18
    62d8:	f5 cf       	rjmp	.-22     	; 0x62c4 <reverse+0x1a>
    62da:	08 95       	ret

000062dc <strupper>:
    62dc:	cf 93       	push	r28
    62de:	df 93       	push	r29
    62e0:	ec 01       	movw	r28, r24
    62e2:	88 81       	ld	r24, Y
    62e4:	88 23       	and	r24, r24
    62e6:	21 f0       	breq	.+8      	; 0x62f0 <strupper+0x14>
    62e8:	90 e0       	ldi	r25, 0x00	; 0
    62ea:	9e df       	rcall	.-196    	; 0x6228 <toupper>
    62ec:	89 93       	st	Y+, r24
    62ee:	f9 cf       	rjmp	.-14     	; 0x62e2 <strupper+0x6>
    62f0:	df 91       	pop	r29
    62f2:	cf 91       	pop	r28
    62f4:	08 95       	ret

000062f6 <strcmp>:
    62f6:	dc 01       	movw	r26, r24
    62f8:	fb 01       	movw	r30, r22
    62fa:	2d 91       	ld	r18, X+
    62fc:	41 91       	ld	r20, Z+
    62fe:	50 e0       	ldi	r21, 0x00	; 0
    6300:	30 e0       	ldi	r19, 0x00	; 0
    6302:	c9 01       	movw	r24, r18
    6304:	84 1b       	sub	r24, r20
    6306:	95 0b       	sbc	r25, r21
    6308:	11 f4       	brne	.+4      	; 0x630e <strcmp+0x18>
    630a:	45 2b       	or	r20, r21
    630c:	b1 f7       	brne	.-20     	; 0x62fa <strcmp+0x4>
    630e:	08 95       	ret

00006310 <strcasecmp>:
    6310:	ef 92       	push	r14
    6312:	ff 92       	push	r15
    6314:	0f 93       	push	r16
    6316:	1f 93       	push	r17
    6318:	cf 93       	push	r28
    631a:	df 93       	push	r29
    631c:	7c 01       	movw	r14, r24
    631e:	8b 01       	movw	r16, r22
    6320:	f7 01       	movw	r30, r14
    6322:	81 91       	ld	r24, Z+
    6324:	7f 01       	movw	r14, r30
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	7f df       	rcall	.-258    	; 0x6228 <toupper>
    632a:	ec 01       	movw	r28, r24
    632c:	f8 01       	movw	r30, r16
    632e:	81 91       	ld	r24, Z+
    6330:	8f 01       	movw	r16, r30
    6332:	90 e0       	ldi	r25, 0x00	; 0
    6334:	79 df       	rcall	.-270    	; 0x6228 <toupper>
    6336:	9c 01       	movw	r18, r24
    6338:	ce 01       	movw	r24, r28
    633a:	82 1b       	sub	r24, r18
    633c:	93 0b       	sbc	r25, r19
    633e:	11 f4       	brne	.+4      	; 0x6344 <strcasecmp+0x34>
    6340:	23 2b       	or	r18, r19
    6342:	71 f7       	brne	.-36     	; 0x6320 <strcasecmp+0x10>
    6344:	cd b7       	in	r28, 0x3d	; 61
    6346:	de b7       	in	r29, 0x3e	; 62
    6348:	e6 e0       	ldi	r30, 0x06	; 6
    634a:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

0000634e <strncasecmp>:
    634e:	a0 e0       	ldi	r26, 0x00	; 0
    6350:	b0 e0       	ldi	r27, 0x00	; 0
    6352:	ed ea       	ldi	r30, 0xAD	; 173
    6354:	f1 e3       	ldi	r31, 0x31	; 49
    6356:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    635a:	8c 01       	movw	r16, r24
    635c:	7b 01       	movw	r14, r22
    635e:	6c 01       	movw	r12, r24
    6360:	c4 0e       	add	r12, r20
    6362:	d5 1e       	adc	r13, r21
    6364:	0c 15       	cp	r16, r12
    6366:	1d 05       	cpc	r17, r13
    6368:	99 f0       	breq	.+38     	; 0x6390 <strncasecmp+0x42>
    636a:	f8 01       	movw	r30, r16
    636c:	81 91       	ld	r24, Z+
    636e:	8f 01       	movw	r16, r30
    6370:	90 e0       	ldi	r25, 0x00	; 0
    6372:	5a df       	rcall	.-332    	; 0x6228 <toupper>
    6374:	ec 01       	movw	r28, r24
    6376:	f7 01       	movw	r30, r14
    6378:	81 91       	ld	r24, Z+
    637a:	7f 01       	movw	r14, r30
    637c:	90 e0       	ldi	r25, 0x00	; 0
    637e:	54 df       	rcall	.-344    	; 0x6228 <toupper>
    6380:	9c 01       	movw	r18, r24
    6382:	ce 01       	movw	r24, r28
    6384:	82 1b       	sub	r24, r18
    6386:	93 0b       	sbc	r25, r19
    6388:	29 f4       	brne	.+10     	; 0x6394 <strncasecmp+0x46>
    638a:	23 2b       	or	r18, r19
    638c:	59 f7       	brne	.-42     	; 0x6364 <strncasecmp+0x16>
    638e:	02 c0       	rjmp	.+4      	; 0x6394 <strncasecmp+0x46>
    6390:	80 e0       	ldi	r24, 0x00	; 0
    6392:	90 e0       	ldi	r25, 0x00	; 0
    6394:	cd b7       	in	r28, 0x3d	; 61
    6396:	de b7       	in	r29, 0x3e	; 62
    6398:	e8 e0       	ldi	r30, 0x08	; 8
    639a:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0000639e <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    639e:	0f 93       	push	r16
    63a0:	1f 93       	push	r17
    63a2:	cf 93       	push	r28
    63a4:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    63a6:	00 97       	sbiw	r24, 0x00	; 0
    63a8:	99 f0       	breq	.+38     	; 0x63d0 <stralloc+0x32>
    63aa:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    63ac:	fc 01       	movw	r30, r24
    63ae:	01 90       	ld	r0, Z+
    63b0:	00 20       	and	r0, r0
    63b2:	e9 f7       	brne	.-6      	; 0x63ae <stralloc+0x10>
    63b4:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    63b6:	61 e0       	ldi	r22, 0x01	; 1
    63b8:	70 e0       	ldi	r23, 0x00	; 0
    63ba:	8c 1b       	sub	r24, r28
    63bc:	9d 0b       	sbc	r25, r29
    63be:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <safecalloc>
    63c2:	8c 01       	movw	r16, r24
    if(!ptr)
    63c4:	00 97       	sbiw	r24, 0x00	; 0
    63c6:	21 f0       	breq	.+8      	; 0x63d0 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    63c8:	be 01       	movw	r22, r28
    63ca:	3b df       	rcall	.-394    	; 0x6242 <strcpy>
    return(ptr);
    63cc:	c8 01       	movw	r24, r16
    63ce:	02 c0       	rjmp	.+4      	; 0x63d4 <stralloc+0x36>
    63d0:	80 e0       	ldi	r24, 0x00	; 0
    63d2:	90 e0       	ldi	r25, 0x00	; 0
}
    63d4:	df 91       	pop	r29
    63d6:	cf 91       	pop	r28
    63d8:	1f 91       	pop	r17
    63da:	0f 91       	pop	r16
    63dc:	08 95       	ret

000063de <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    63de:	00 d0       	rcall	.+0      	; 0x63e0 <sep+0x2>
    63e0:	1f 92       	push	r1
    63e2:	8e e1       	ldi	r24, 0x1E	; 30
    63e4:	95 e0       	ldi	r25, 0x05	; 5
    63e6:	a0 e0       	ldi	r26, 0x00	; 0
    63e8:	ed b7       	in	r30, 0x3d	; 61
    63ea:	fe b7       	in	r31, 0x3e	; 62
    63ec:	81 83       	std	Z+1, r24	; 0x01
    63ee:	92 83       	std	Z+2, r25	; 0x02
    63f0:	a3 83       	std	Z+3, r26	; 0x03
    63f2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    63f6:	0f 90       	pop	r0
    63f8:	0f 90       	pop	r0
    63fa:	0f 90       	pop	r0
    63fc:	08 95       	ret

000063fe <trim_tail>:
    63fe:	00 97       	sbiw	r24, 0x00	; 0
    6400:	69 f0       	breq	.+26     	; 0x641c <trim_tail+0x1e>
    6402:	fc 01       	movw	r30, r24
    6404:	01 90       	ld	r0, Z+
    6406:	00 20       	and	r0, r0
    6408:	e9 f7       	brne	.-6      	; 0x6404 <trim_tail+0x6>
    640a:	31 97       	sbiw	r30, 0x01	; 1
    640c:	e8 17       	cp	r30, r24
    640e:	f9 07       	cpc	r31, r25
    6410:	29 f0       	breq	.+10     	; 0x641c <trim_tail+0x1e>
    6412:	22 91       	ld	r18, -Z
    6414:	21 32       	cpi	r18, 0x21	; 33
    6416:	10 f4       	brcc	.+4      	; 0x641c <trim_tail+0x1e>
    6418:	10 82       	st	Z, r1
    641a:	f8 cf       	rjmp	.-16     	; 0x640c <trim_tail+0xe>
    641c:	08 95       	ret

0000641e <skipspaces>:
    641e:	00 97       	sbiw	r24, 0x00	; 0
    6420:	39 f0       	breq	.+14     	; 0x6430 <skipspaces+0x12>
    6422:	fc 01       	movw	r30, r24
    6424:	cf 01       	movw	r24, r30
    6426:	21 91       	ld	r18, Z+
    6428:	20 32       	cpi	r18, 0x20	; 32
    642a:	e1 f3       	breq	.-8      	; 0x6424 <skipspaces+0x6>
    642c:	29 30       	cpi	r18, 0x09	; 9
    642e:	d1 f3       	breq	.-12     	; 0x6424 <skipspaces+0x6>
    6430:	08 95       	ret

00006432 <MATCH>:
    6432:	cf 93       	push	r28
    6434:	df 93       	push	r29
    6436:	fb 01       	movw	r30, r22
    6438:	01 90       	ld	r0, Z+
    643a:	00 20       	and	r0, r0
    643c:	e9 f7       	brne	.-6      	; 0x6438 <MATCH+0x6>
    643e:	31 97       	sbiw	r30, 0x01	; 1
    6440:	ef 01       	movw	r28, r30
    6442:	c6 1b       	sub	r28, r22
    6444:	d7 0b       	sbc	r29, r23
    6446:	57 df       	rcall	.-338    	; 0x62f6 <strcmp>
    6448:	89 2b       	or	r24, r25
    644a:	11 f4       	brne	.+4      	; 0x6450 <MATCH+0x1e>
    644c:	ce 01       	movw	r24, r28
    644e:	02 c0       	rjmp	.+4      	; 0x6454 <MATCH+0x22>
    6450:	80 e0       	ldi	r24, 0x00	; 0
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	df 91       	pop	r29
    6456:	cf 91       	pop	r28
    6458:	08 95       	ret

0000645a <MATCHI>:
    645a:	cf 93       	push	r28
    645c:	df 93       	push	r29
    645e:	fb 01       	movw	r30, r22
    6460:	01 90       	ld	r0, Z+
    6462:	00 20       	and	r0, r0
    6464:	e9 f7       	brne	.-6      	; 0x6460 <MATCHI+0x6>
    6466:	31 97       	sbiw	r30, 0x01	; 1
    6468:	ef 01       	movw	r28, r30
    646a:	c6 1b       	sub	r28, r22
    646c:	d7 0b       	sbc	r29, r23
    646e:	50 df       	rcall	.-352    	; 0x6310 <strcasecmp>
    6470:	89 2b       	or	r24, r25
    6472:	11 f4       	brne	.+4      	; 0x6478 <MATCHI+0x1e>
    6474:	ce 01       	movw	r24, r28
    6476:	02 c0       	rjmp	.+4      	; 0x647c <MATCHI+0x22>
    6478:	80 e0       	ldi	r24, 0x00	; 0
    647a:	90 e0       	ldi	r25, 0x00	; 0
    647c:	df 91       	pop	r29
    647e:	cf 91       	pop	r28
    6480:	08 95       	ret

00006482 <MATCHARGS>:
    6482:	a9 e0       	ldi	r26, 0x09	; 9
    6484:	b0 e0       	ldi	r27, 0x00	; 0
    6486:	e7 e4       	ldi	r30, 0x47	; 71
    6488:	f2 e3       	ldi	r31, 0x32	; 50
    648a:	0c 94 bf e6 	jmp	0x1cd7e	; 0x1cd7e <__prologue_saves__+0x18>
    648e:	eb 01       	movw	r28, r22
    6490:	8a 01       	movw	r16, r20
    6492:	79 01       	movw	r14, r18
    6494:	e2 df       	rcall	.-60     	; 0x645a <MATCHI>
    6496:	00 97       	sbiw	r24, 0x00	; 0
    6498:	c1 f0       	breq	.+48     	; 0x64ca <MATCHARGS+0x48>
    649a:	e0 16       	cp	r14, r16
    649c:	f1 06       	cpc	r15, r17
    649e:	9c f4       	brge	.+38     	; 0x64c6 <MATCHARGS+0x44>
    64a0:	ed b7       	in	r30, 0x3d	; 61
    64a2:	fe b7       	in	r31, 0x3e	; 62
    64a4:	f1 86       	std	Z+9, r15	; 0x09
    64a6:	e0 86       	std	Z+8, r14	; 0x08
    64a8:	17 83       	std	Z+7, r17	; 0x07
    64aa:	06 83       	std	Z+6, r16	; 0x06
    64ac:	d5 83       	std	Z+5, r29	; 0x05
    64ae:	c4 83       	std	Z+4, r28	; 0x04
    64b0:	88 ef       	ldi	r24, 0xF8	; 248
    64b2:	94 e0       	ldi	r25, 0x04	; 4
    64b4:	a0 e0       	ldi	r26, 0x00	; 0
    64b6:	81 83       	std	Z+1, r24	; 0x01
    64b8:	92 83       	std	Z+2, r25	; 0x02
    64ba:	a3 83       	std	Z+3, r26	; 0x03
    64bc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    64c0:	80 e0       	ldi	r24, 0x00	; 0
    64c2:	90 e0       	ldi	r25, 0x00	; 0
    64c4:	02 c0       	rjmp	.+4      	; 0x64ca <MATCHARGS+0x48>
    64c6:	81 e0       	ldi	r24, 0x01	; 1
    64c8:	90 e0       	ldi	r25, 0x00	; 0
    64ca:	cd b7       	in	r28, 0x3d	; 61
    64cc:	de b7       	in	r29, 0x3e	; 62
    64ce:	29 96       	adiw	r28, 0x09	; 9
    64d0:	e6 e0       	ldi	r30, 0x06	; 6
    64d2:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

000064d6 <MATCHI_LEN>:
    64d6:	cf 93       	push	r28
    64d8:	df 93       	push	r29
    64da:	00 97       	sbiw	r24, 0x00	; 0
    64dc:	89 f0       	breq	.+34     	; 0x6500 <MATCHI_LEN+0x2a>
    64de:	61 15       	cp	r22, r1
    64e0:	71 05       	cpc	r23, r1
    64e2:	71 f0       	breq	.+28     	; 0x6500 <MATCHI_LEN+0x2a>
    64e4:	eb 01       	movw	r28, r22
    64e6:	09 90       	ld	r0, Y+
    64e8:	00 20       	and	r0, r0
    64ea:	e9 f7       	brne	.-6      	; 0x64e6 <MATCHI_LEN+0x10>
    64ec:	21 97       	sbiw	r28, 0x01	; 1
    64ee:	c6 1b       	sub	r28, r22
    64f0:	d7 0b       	sbc	r29, r23
    64f2:	31 f0       	breq	.+12     	; 0x6500 <MATCHI_LEN+0x2a>
    64f4:	ae 01       	movw	r20, r28
    64f6:	2b df       	rcall	.-426    	; 0x634e <strncasecmp>
    64f8:	89 2b       	or	r24, r25
    64fa:	11 f4       	brne	.+4      	; 0x6500 <MATCHI_LEN+0x2a>
    64fc:	ce 01       	movw	r24, r28
    64fe:	02 c0       	rjmp	.+4      	; 0x6504 <MATCHI_LEN+0x2e>
    6500:	80 e0       	ldi	r24, 0x00	; 0
    6502:	90 e0       	ldi	r25, 0x00	; 0
    6504:	df 91       	pop	r29
    6506:	cf 91       	pop	r28
    6508:	08 95       	ret

0000650a <split_args>:
    650a:	a0 e0       	ldi	r26, 0x00	; 0
    650c:	b0 e0       	ldi	r27, 0x00	; 0
    650e:	eb e8       	ldi	r30, 0x8B	; 139
    6510:	f2 e3       	ldi	r31, 0x32	; 50
    6512:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    6516:	dc 01       	movw	r26, r24
    6518:	6a 01       	movw	r12, r20
    651a:	8b 01       	movw	r16, r22
    651c:	fb 01       	movw	r30, r22
    651e:	80 e0       	ldi	r24, 0x00	; 0
    6520:	90 e0       	ldi	r25, 0x00	; 0
    6522:	8c 15       	cp	r24, r12
    6524:	9d 05       	cpc	r25, r13
    6526:	24 f4       	brge	.+8      	; 0x6530 <split_args+0x26>
    6528:	11 92       	st	Z+, r1
    652a:	11 92       	st	Z+, r1
    652c:	01 96       	adiw	r24, 0x01	; 1
    652e:	f9 cf       	rjmp	.-14     	; 0x6522 <split_args+0x18>
    6530:	c1 14       	cp	r12, r1
    6532:	d1 04       	cpc	r13, r1
    6534:	d9 f1       	breq	.+118    	; 0x65ac <split_args+0xa2>
    6536:	10 97       	sbiw	r26, 0x00	; 0
    6538:	c9 f1       	breq	.+114    	; 0x65ac <split_args+0xa2>
    653a:	ee 24       	eor	r14, r14
    653c:	e3 94       	inc	r14
    653e:	f1 2c       	mov	r15, r1
    6540:	c0 e0       	ldi	r28, 0x00	; 0
    6542:	d0 e0       	ldi	r29, 0x00	; 0
    6544:	8c 91       	ld	r24, X
    6546:	88 23       	and	r24, r24
    6548:	b1 f1       	breq	.+108    	; 0x65b6 <split_args+0xac>
    654a:	cc 15       	cp	r28, r12
    654c:	dd 05       	cpc	r29, r13
    654e:	9c f5       	brge	.+102    	; 0x65b6 <split_args+0xac>
    6550:	cd 01       	movw	r24, r26
    6552:	65 df       	rcall	.-310    	; 0x641e <skipspaces>
    6554:	dc 01       	movw	r26, r24
    6556:	2c 91       	ld	r18, X
    6558:	22 23       	and	r18, r18
    655a:	69 f1       	breq	.+90     	; 0x65b6 <split_args+0xac>
    655c:	22 32       	cpi	r18, 0x22	; 34
    655e:	79 f4       	brne	.+30     	; 0x657e <split_args+0x74>
    6560:	fc 01       	movw	r30, r24
    6562:	31 96       	adiw	r30, 0x01	; 1
    6564:	d8 01       	movw	r26, r16
    6566:	ed 93       	st	X+, r30
    6568:	fc 93       	st	X, r31
    656a:	df 01       	movw	r26, r30
    656c:	80 81       	ld	r24, Z
    656e:	31 96       	adiw	r30, 0x01	; 1
    6570:	88 23       	and	r24, r24
    6572:	a9 f0       	breq	.+42     	; 0x659e <split_args+0x94>
    6574:	82 32       	cpi	r24, 0x22	; 34
    6576:	c9 f7       	brne	.-14     	; 0x656a <split_args+0x60>
    6578:	1c 92       	st	X, r1
    657a:	df 01       	movw	r26, r30
    657c:	10 c0       	rjmp	.+32     	; 0x659e <split_args+0x94>
    657e:	f8 01       	movw	r30, r16
    6580:	91 83       	std	Z+1, r25	; 0x01
    6582:	80 83       	st	Z, r24
    6584:	fc 01       	movw	r30, r24
    6586:	2e 2f       	mov	r18, r30
    6588:	9f 2f       	mov	r25, r31
    658a:	81 91       	ld	r24, Z+
    658c:	3f ed       	ldi	r19, 0xDF	; 223
    658e:	38 0f       	add	r19, r24
    6590:	3e 35       	cpi	r19, 0x5E	; 94
    6592:	c8 f3       	brcs	.-14     	; 0x6586 <split_args+0x7c>
    6594:	88 23       	and	r24, r24
    6596:	69 f0       	breq	.+26     	; 0x65b2 <split_args+0xa8>
    6598:	a2 2f       	mov	r26, r18
    659a:	b9 2f       	mov	r27, r25
    659c:	1d 92       	st	X+, r1
    659e:	21 96       	adiw	r28, 0x01	; 1
    65a0:	ff ef       	ldi	r31, 0xFF	; 255
    65a2:	ef 1a       	sub	r14, r31
    65a4:	ff 0a       	sbc	r15, r31
    65a6:	0e 5f       	subi	r16, 0xFE	; 254
    65a8:	1f 4f       	sbci	r17, 0xFF	; 255
    65aa:	cc cf       	rjmp	.-104    	; 0x6544 <split_args+0x3a>
    65ac:	80 e0       	ldi	r24, 0x00	; 0
    65ae:	90 e0       	ldi	r25, 0x00	; 0
    65b0:	03 c0       	rjmp	.+6      	; 0x65b8 <split_args+0xae>
    65b2:	c7 01       	movw	r24, r14
    65b4:	01 c0       	rjmp	.+2      	; 0x65b8 <split_args+0xae>
    65b6:	ce 01       	movw	r24, r28
    65b8:	cd b7       	in	r28, 0x3d	; 61
    65ba:	de b7       	in	r29, 0x3e	; 62
    65bc:	e8 e0       	ldi	r30, 0x08	; 8
    65be:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

000065c2 <get_token>:
    65c2:	ef 92       	push	r14
    65c4:	ff 92       	push	r15
    65c6:	0f 93       	push	r16
    65c8:	1f 93       	push	r17
    65ca:	cf 93       	push	r28
    65cc:	df 93       	push	r29
    65ce:	eb 01       	movw	r28, r22
    65d0:	8a 01       	movw	r16, r20
    65d2:	18 82       	st	Y, r1
    65d4:	00 97       	sbiw	r24, 0x00	; 0
    65d6:	89 f1       	breq	.+98     	; 0x663a <get_token+0x78>
    65d8:	fc 01       	movw	r30, r24
    65da:	20 81       	ld	r18, Z
    65dc:	22 23       	and	r18, r18
    65de:	79 f1       	breq	.+94     	; 0x663e <get_token+0x7c>
    65e0:	1e df       	rcall	.-452    	; 0x641e <skipspaces>
    65e2:	7c 01       	movw	r14, r24
    65e4:	0c df       	rcall	.-488    	; 0x63fe <trim_tail>
    65e6:	f7 01       	movw	r30, r14
    65e8:	cf 01       	movw	r24, r30
    65ea:	21 91       	ld	r18, Z+
    65ec:	21 32       	cpi	r18, 0x21	; 33
    65ee:	e0 f0       	brcs	.+56     	; 0x6628 <get_token+0x66>
    65f0:	10 16       	cp	r1, r16
    65f2:	11 06       	cpc	r1, r17
    65f4:	cc f4       	brge	.+50     	; 0x6628 <get_token+0x66>
    65f6:	22 32       	cpi	r18, 0x22	; 34
    65f8:	79 f4       	brne	.+30     	; 0x6618 <get_token+0x56>
    65fa:	fc 01       	movw	r30, r24
    65fc:	31 96       	adiw	r30, 0x01	; 1
    65fe:	0c 0f       	add	r16, r28
    6600:	1d 1f       	adc	r17, r29
    6602:	cf 01       	movw	r24, r30
    6604:	21 91       	ld	r18, Z+
    6606:	22 23       	and	r18, r18
    6608:	79 f0       	breq	.+30     	; 0x6628 <get_token+0x66>
    660a:	22 32       	cpi	r18, 0x22	; 34
    660c:	59 f0       	breq	.+22     	; 0x6624 <get_token+0x62>
    660e:	c0 17       	cp	r28, r16
    6610:	d1 07       	cpc	r29, r17
    6612:	51 f0       	breq	.+20     	; 0x6628 <get_token+0x66>
    6614:	29 93       	st	Y+, r18
    6616:	f5 cf       	rjmp	.-22     	; 0x6602 <get_token+0x40>
    6618:	2c 32       	cpi	r18, 0x2C	; 44
    661a:	31 f0       	breq	.+12     	; 0x6628 <get_token+0x66>
    661c:	29 93       	st	Y+, r18
    661e:	01 50       	subi	r16, 0x01	; 1
    6620:	11 09       	sbc	r17, r1
    6622:	e2 cf       	rjmp	.-60     	; 0x65e8 <get_token+0x26>
    6624:	cf 01       	movw	r24, r30
    6626:	18 82       	st	Y, r1
    6628:	fa de       	rcall	.-524    	; 0x641e <skipspaces>
    662a:	fc 01       	movw	r30, r24
    662c:	80 81       	ld	r24, Z
    662e:	8c 32       	cpi	r24, 0x2C	; 44
    6630:	09 f4       	brne	.+2      	; 0x6634 <get_token+0x72>
    6632:	31 96       	adiw	r30, 0x01	; 1
    6634:	18 82       	st	Y, r1
    6636:	cf 01       	movw	r24, r30
    6638:	02 c0       	rjmp	.+4      	; 0x663e <get_token+0x7c>
    663a:	80 e0       	ldi	r24, 0x00	; 0
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	cd b7       	in	r28, 0x3d	; 61
    6640:	de b7       	in	r29, 0x3e	; 62
    6642:	e6 e0       	ldi	r30, 0x06	; 6
    6644:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

00006648 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    6648:	a2 e0       	ldi	r26, 0x02	; 2
    664a:	b0 e0       	ldi	r27, 0x00	; 0
    664c:	ea e2       	ldi	r30, 0x2A	; 42
    664e:	f3 e3       	ldi	r31, 0x33	; 51
    6650:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    6654:	00 97       	sbiw	r24, 0x00	; 0
    6656:	79 f1       	breq	.+94     	; 0x66b6 <get_value+0x6e>
    6658:	fc 01       	movw	r30, r24
    665a:	20 81       	ld	r18, Z
    665c:	22 23       	and	r18, r18
    665e:	59 f1       	breq	.+86     	; 0x66b6 <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    6660:	de de       	rcall	.-580    	; 0x641e <skipspaces>
    6662:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    6664:	6f e2       	ldi	r22, 0x2F	; 47
    6666:	73 e0       	ldi	r23, 0x03	; 3
    6668:	36 df       	rcall	.-404    	; 0x64d6 <MATCHI_LEN>
    666a:	00 97       	sbiw	r24, 0x00	; 0
    666c:	29 f0       	breq	.+10     	; 0x6678 <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    666e:	08 0f       	add	r16, r24
    6670:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    6672:	40 e1       	ldi	r20, 0x10	; 16
    6674:	50 e0       	ldi	r21, 0x00	; 0
    6676:	18 c0       	rjmp	.+48     	; 0x66a8 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    6678:	62 e3       	ldi	r22, 0x32	; 50
    667a:	73 e0       	ldi	r23, 0x03	; 3
    667c:	c8 01       	movw	r24, r16
    667e:	2b df       	rcall	.-426    	; 0x64d6 <MATCHI_LEN>
    6680:	00 97       	sbiw	r24, 0x00	; 0
    6682:	29 f0       	breq	.+10     	; 0x668e <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    6684:	08 0f       	add	r16, r24
    6686:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6688:	48 e0       	ldi	r20, 0x08	; 8
    668a:	50 e0       	ldi	r21, 0x00	; 0
    668c:	0d c0       	rjmp	.+26     	; 0x66a8 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    668e:	65 e3       	ldi	r22, 0x35	; 53
    6690:	73 e0       	ldi	r23, 0x03	; 3
    6692:	c8 01       	movw	r24, r16
    6694:	20 df       	rcall	.-448    	; 0x64d6 <MATCHI_LEN>
    6696:	00 97       	sbiw	r24, 0x00	; 0
    6698:	29 f0       	breq	.+10     	; 0x66a4 <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    669a:	08 0f       	add	r16, r24
    669c:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    669e:	42 e0       	ldi	r20, 0x02	; 2
    66a0:	50 e0       	ldi	r21, 0x00	; 0
    66a2:	02 c0       	rjmp	.+4      	; 0x66a8 <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    66a4:	4a e0       	ldi	r20, 0x0A	; 10
    66a6:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    66a8:	be 01       	movw	r22, r28
    66aa:	6f 5f       	subi	r22, 0xFF	; 255
    66ac:	7f 4f       	sbci	r23, 0xFF	; 255
    66ae:	c8 01       	movw	r24, r16
    66b0:	0e 94 1b 47 	call	0x8e36	; 0x8e36 <strtol>
    66b4:	03 c0       	rjmp	.+6      	; 0x66bc <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    66b6:	60 e0       	ldi	r22, 0x00	; 0
    66b8:	70 e0       	ldi	r23, 0x00	; 0
    66ba:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    66bc:	22 96       	adiw	r28, 0x02	; 2
    66be:	e4 e0       	ldi	r30, 0x04	; 4
    66c0:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

000066c4 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    66c4:	78 94       	sei
    66c6:	08 95       	ret

000066c8 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    66c8:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    66ca:	89 e0       	ldi	r24, 0x09	; 9
    66cc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    66d0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    66d4:	8f e1       	ldi	r24, 0x1F	; 31
    66d6:	9e e4       	ldi	r25, 0x4E	; 78
    66d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    66dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    66e0:	ef e6       	ldi	r30, 0x6F	; 111
    66e2:	f0 e0       	ldi	r31, 0x00	; 0
    66e4:	80 81       	ld	r24, Z
    66e6:	82 60       	ori	r24, 0x02	; 2
    66e8:	80 83       	st	Z, r24
    sei();
    66ea:	78 94       	sei
    66ec:	08 95       	ret

000066ee <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    66ee:	1f 92       	push	r1
    66f0:	0f 92       	push	r0
    66f2:	0f b6       	in	r0, 0x3f	; 63
    66f4:	0f 92       	push	r0
    66f6:	11 24       	eor	r1, r1
    66f8:	0b b6       	in	r0, 0x3b	; 59
    66fa:	0f 92       	push	r0
    66fc:	2f 93       	push	r18
    66fe:	3f 93       	push	r19
    6700:	4f 93       	push	r20
    6702:	5f 93       	push	r21
    6704:	6f 93       	push	r22
    6706:	7f 93       	push	r23
    6708:	8f 93       	push	r24
    670a:	9f 93       	push	r25
    670c:	af 93       	push	r26
    670e:	bf 93       	push	r27
    6710:	ef 93       	push	r30
    6712:	ff 93       	push	r31
    execute_timers();
    6714:	36 d2       	rcall	.+1132   	; 0x6b82 <execute_timers>
}
    6716:	ff 91       	pop	r31
    6718:	ef 91       	pop	r30
    671a:	bf 91       	pop	r27
    671c:	af 91       	pop	r26
    671e:	9f 91       	pop	r25
    6720:	8f 91       	pop	r24
    6722:	7f 91       	pop	r23
    6724:	6f 91       	pop	r22
    6726:	5f 91       	pop	r21
    6728:	4f 91       	pop	r20
    672a:	3f 91       	pop	r19
    672c:	2f 91       	pop	r18
    672e:	0f 90       	pop	r0
    6730:	0b be       	out	0x3b, r0	; 59
    6732:	0f 90       	pop	r0
    6734:	0f be       	out	0x3f, r0	; 63
    6736:	0f 90       	pop	r0
    6738:	1f 90       	pop	r1
    673a:	18 95       	reti

0000673c <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    673c:	0f 93       	push	r16
    673e:	1f 93       	push	r17
    6740:	cf 93       	push	r28
    6742:	df 93       	push	r29
    6744:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    6746:	f8 94       	cli

    count1 = TCNT1;
    6748:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    674c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6750:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <__clock>
    6754:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <__clock+0x1>
    6758:	a0 91 5a 1a 	lds	r26, 0x1A5A	; 0x801a5a <__clock+0x2>
    675c:	b0 91 5b 1a 	lds	r27, 0x1A5B	; 0x801a5b <__clock+0x3>
    6760:	80 83       	st	Z, r24
    6762:	91 83       	std	Z+1, r25	; 0x01
    6764:	a2 83       	std	Z+2, r26	; 0x02
    6766:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6768:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    676c:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    6770:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    6774:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    6778:	84 83       	std	Z+4, r24	; 0x04
    677a:	95 83       	std	Z+5, r25	; 0x05
    677c:	a6 83       	std	Z+6, r26	; 0x06
    677e:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6780:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6784:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6788:	b1 9b       	sbis	0x16, 1	; 22
    678a:	03 c0       	rjmp	.+6      	; 0x6792 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    678c:	c0 e0       	ldi	r28, 0x00	; 0
    678e:	d0 e0       	ldi	r29, 0x00	; 0
    6790:	3f c0       	rjmp	.+126    	; 0x6810 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6792:	82 17       	cp	r24, r18
    6794:	93 07       	cpc	r25, r19
    6796:	d0 f1       	brcs	.+116    	; 0x680c <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6798:	c0 e0       	ldi	r28, 0x00	; 0
    679a:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    679c:	40 e0       	ldi	r20, 0x00	; 0
    679e:	50 e0       	ldi	r21, 0x00	; 0
    67a0:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    67a2:	9a 01       	movw	r18, r20
    67a4:	ab 01       	movw	r20, r22
    67a6:	28 0f       	add	r18, r24
    67a8:	39 1f       	adc	r19, r25
    67aa:	41 1d       	adc	r20, r1
    67ac:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    67ae:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    67b0:	a2 e3       	ldi	r26, 0x32	; 50
    67b2:	b0 e0       	ldi	r27, 0x00	; 0
    67b4:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__muluhisi3>
    67b8:	04 81       	ldd	r16, Z+4	; 0x04
    67ba:	15 81       	ldd	r17, Z+5	; 0x05
    67bc:	26 81       	ldd	r18, Z+6	; 0x06
    67be:	37 81       	ldd	r19, Z+7	; 0x07
    67c0:	dc 01       	movw	r26, r24
    67c2:	cb 01       	movw	r24, r22
    67c4:	80 0f       	add	r24, r16
    67c6:	91 1f       	adc	r25, r17
    67c8:	a2 1f       	adc	r26, r18
    67ca:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    67cc:	81 15       	cp	r24, r1
    67ce:	2a ec       	ldi	r18, 0xCA	; 202
    67d0:	92 07       	cpc	r25, r18
    67d2:	2a e9       	ldi	r18, 0x9A	; 154
    67d4:	a2 07       	cpc	r26, r18
    67d6:	2b e3       	ldi	r18, 0x3B	; 59
    67d8:	b2 07       	cpc	r27, r18
    67da:	2c f4       	brge	.+10     	; 0x67e6 <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    67dc:	84 83       	std	Z+4, r24	; 0x04
    67de:	95 83       	std	Z+5, r25	; 0x05
    67e0:	a6 83       	std	Z+6, r26	; 0x06
    67e2:	b7 83       	std	Z+7, r27	; 0x07
    67e4:	1a c0       	rjmp	.+52     	; 0x681a <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    67e6:	9a 5c       	subi	r25, 0xCA	; 202
    67e8:	aa 49       	sbci	r26, 0x9A	; 154
    67ea:	bb 43       	sbci	r27, 0x3B	; 59
    67ec:	84 83       	std	Z+4, r24	; 0x04
    67ee:	95 83       	std	Z+5, r25	; 0x05
    67f0:	a6 83       	std	Z+6, r26	; 0x06
    67f2:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    67f4:	80 81       	ld	r24, Z
    67f6:	91 81       	ldd	r25, Z+1	; 0x01
    67f8:	a2 81       	ldd	r26, Z+2	; 0x02
    67fa:	b3 81       	ldd	r27, Z+3	; 0x03
    67fc:	01 96       	adiw	r24, 0x01	; 1
    67fe:	a1 1d       	adc	r26, r1
    6800:	b1 1d       	adc	r27, r1
    6802:	80 83       	st	Z, r24
    6804:	91 83       	std	Z+1, r25	; 0x01
    6806:	a2 83       	std	Z+2, r26	; 0x02
    6808:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    680a:	07 c0       	rjmp	.+14     	; 0x681a <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    680c:	cf ef       	ldi	r28, 0xFF	; 255
    680e:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6810:	40 e2       	ldi	r20, 0x20	; 32
    6812:	5e e4       	ldi	r21, 0x4E	; 78
    6814:	60 e0       	ldi	r22, 0x00	; 0
    6816:	70 e0       	ldi	r23, 0x00	; 0
    6818:	c4 cf       	rjmp	.-120    	; 0x67a2 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    681a:	ce 01       	movw	r24, r28
    681c:	df 91       	pop	r29
    681e:	cf 91       	pop	r28
    6820:	1f 91       	pop	r17
    6822:	0f 91       	pop	r16
    6824:	08 95       	ret

00006826 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6826:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    682a:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    682e:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    6832:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    6836:	80 5c       	subi	r24, 0xC0	; 192
    6838:	9d 4b       	sbci	r25, 0xBD	; 189
    683a:	a0 4f       	sbci	r26, 0xF0	; 240
    683c:	bf 4f       	sbci	r27, 0xFF	; 255
    683e:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <__clock+0x4>
    6842:	90 93 5d 1a 	sts	0x1A5D, r25	; 0x801a5d <__clock+0x5>
    6846:	a0 93 5e 1a 	sts	0x1A5E, r26	; 0x801a5e <__clock+0x6>
    684a:	b0 93 5f 1a 	sts	0x1A5F, r27	; 0x801a5f <__clock+0x7>
    684e:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    6852:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    6856:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    685a:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    685e:	81 15       	cp	r24, r1
    6860:	9a 4c       	sbci	r25, 0xCA	; 202
    6862:	aa 49       	sbci	r26, 0x9A	; 154
    6864:	bb 43       	sbci	r27, 0x3B	; 59
    6866:	dc f0       	brlt	.+54     	; 0x689e <clock_task+0x78>
    6868:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <__clock>
    686c:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <__clock+0x1>
    6870:	a0 91 5a 1a 	lds	r26, 0x1A5A	; 0x801a5a <__clock+0x2>
    6874:	b0 91 5b 1a 	lds	r27, 0x1A5B	; 0x801a5b <__clock+0x3>
    6878:	01 96       	adiw	r24, 0x01	; 1
    687a:	a1 1d       	adc	r26, r1
    687c:	b1 1d       	adc	r27, r1
    687e:	80 93 58 1a 	sts	0x1A58, r24	; 0x801a58 <__clock>
    6882:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <__clock+0x1>
    6886:	a0 93 5a 1a 	sts	0x1A5A, r26	; 0x801a5a <__clock+0x2>
    688a:	b0 93 5b 1a 	sts	0x1A5B, r27	; 0x801a5b <__clock+0x3>
    688e:	10 92 5c 1a 	sts	0x1A5C, r1	; 0x801a5c <__clock+0x4>
    6892:	10 92 5d 1a 	sts	0x1A5D, r1	; 0x801a5d <__clock+0x5>
    6896:	10 92 5e 1a 	sts	0x1A5E, r1	; 0x801a5e <__clock+0x6>
    689a:	10 92 5f 1a 	sts	0x1A5F, r1	; 0x801a5f <__clock+0x7>
    689e:	08 95       	ret

000068a0 <clock_settime.part.2>:
    68a0:	fc 01       	movw	r30, r24
    68a2:	84 81       	ldd	r24, Z+4	; 0x04
    68a4:	95 81       	ldd	r25, Z+5	; 0x05
    68a6:	a6 81       	ldd	r26, Z+6	; 0x06
    68a8:	b7 81       	ldd	r27, Z+7	; 0x07
    68aa:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <__clock+0x4>
    68ae:	90 93 5d 1a 	sts	0x1A5D, r25	; 0x801a5d <__clock+0x5>
    68b2:	a0 93 5e 1a 	sts	0x1A5E, r26	; 0x801a5e <__clock+0x6>
    68b6:	b0 93 5f 1a 	sts	0x1A5F, r27	; 0x801a5f <__clock+0x7>
    68ba:	80 81       	ld	r24, Z
    68bc:	91 81       	ldd	r25, Z+1	; 0x01
    68be:	a2 81       	ldd	r26, Z+2	; 0x02
    68c0:	b3 81       	ldd	r27, Z+3	; 0x03
    68c2:	80 93 58 1a 	sts	0x1A58, r24	; 0x801a58 <__clock>
    68c6:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <__clock+0x1>
    68ca:	a0 93 5a 1a 	sts	0x1A5A, r26	; 0x801a5a <__clock+0x2>
    68ce:	b0 93 5b 1a 	sts	0x1A5B, r27	; 0x801a5b <__clock+0x3>
    68d2:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    68d6:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    68da:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    68de:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    68e2:	44 81       	ldd	r20, Z+4	; 0x04
    68e4:	55 81       	ldd	r21, Z+5	; 0x05
    68e6:	66 81       	ldd	r22, Z+6	; 0x06
    68e8:	77 81       	ldd	r23, Z+7	; 0x07
    68ea:	48 17       	cp	r20, r24
    68ec:	59 07       	cpc	r21, r25
    68ee:	6a 07       	cpc	r22, r26
    68f0:	7b 07       	cpc	r23, r27
    68f2:	b9 f6       	brne	.-82     	; 0x68a2 <clock_settime.part.2+0x2>
    68f4:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <__clock>
    68f8:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <__clock+0x1>
    68fc:	a0 91 5a 1a 	lds	r26, 0x1A5A	; 0x801a5a <__clock+0x2>
    6900:	b0 91 5b 1a 	lds	r27, 0x1A5B	; 0x801a5b <__clock+0x3>
    6904:	40 81       	ld	r20, Z
    6906:	51 81       	ldd	r21, Z+1	; 0x01
    6908:	62 81       	ldd	r22, Z+2	; 0x02
    690a:	73 81       	ldd	r23, Z+3	; 0x03
    690c:	48 17       	cp	r20, r24
    690e:	59 07       	cpc	r21, r25
    6910:	6a 07       	cpc	r22, r26
    6912:	7b 07       	cpc	r23, r27
    6914:	31 f6       	brne	.-116    	; 0x68a2 <clock_settime.part.2+0x2>
    6916:	80 e0       	ldi	r24, 0x00	; 0
    6918:	90 e0       	ldi	r25, 0x00	; 0
    691a:	08 95       	ret

0000691c <set_timers>:
    691c:	00 d0       	rcall	.+0      	; 0x691e <set_timers+0x2>
    691e:	1f 92       	push	r1
    6920:	00 97       	sbiw	r24, 0x00	; 0
    6922:	79 f1       	breq	.+94     	; 0x6982 <set_timers+0x66>
    6924:	e0 e6       	ldi	r30, 0x60	; 96
    6926:	fa e1       	ldi	r31, 0x1A	; 26
    6928:	4f ef       	ldi	r20, 0xFF	; 255
    692a:	5f ef       	ldi	r21, 0xFF	; 255
    692c:	20 e0       	ldi	r18, 0x00	; 0
    692e:	30 e0       	ldi	r19, 0x00	; 0
    6930:	60 81       	ld	r22, Z
    6932:	71 81       	ldd	r23, Z+1	; 0x01
    6934:	86 17       	cp	r24, r22
    6936:	97 07       	cpc	r25, r23
    6938:	79 f0       	breq	.+30     	; 0x6958 <set_timers+0x3c>
    693a:	67 2b       	or	r22, r23
    693c:	71 f4       	brne	.+28     	; 0x695a <set_timers+0x3e>
    693e:	f9 01       	movw	r30, r18
    6940:	ee 0f       	add	r30, r30
    6942:	ff 1f       	adc	r31, r31
    6944:	e2 0f       	add	r30, r18
    6946:	f3 1f       	adc	r31, r19
    6948:	e0 5a       	subi	r30, 0xA0	; 160
    694a:	f5 4e       	sbci	r31, 0xE5	; 229
    694c:	91 83       	std	Z+1, r25	; 0x01
    694e:	80 83       	st	Z, r24
    6950:	81 e0       	ldi	r24, 0x01	; 1
    6952:	82 83       	std	Z+2, r24	; 0x02
    6954:	c9 01       	movw	r24, r18
    6956:	19 c0       	rjmp	.+50     	; 0x698a <set_timers+0x6e>
    6958:	a9 01       	movw	r20, r18
    695a:	2f 5f       	subi	r18, 0xFF	; 255
    695c:	3f 4f       	sbci	r19, 0xFF	; 255
    695e:	33 96       	adiw	r30, 0x03	; 3
    6960:	28 30       	cpi	r18, 0x08	; 8
    6962:	31 05       	cpc	r19, r1
    6964:	29 f7       	brne	.-54     	; 0x6930 <set_timers+0x14>
    6966:	4f 3f       	cpi	r20, 0xFF	; 255
    6968:	8f ef       	ldi	r24, 0xFF	; 255
    696a:	58 07       	cpc	r21, r24
    696c:	69 f4       	brne	.+26     	; 0x6988 <set_timers+0x6c>
    696e:	8d ec       	ldi	r24, 0xCD	; 205
    6970:	95 e0       	ldi	r25, 0x05	; 5
    6972:	a0 e0       	ldi	r26, 0x00	; 0
    6974:	ed b7       	in	r30, 0x3d	; 61
    6976:	fe b7       	in	r31, 0x3e	; 62
    6978:	81 83       	std	Z+1, r24	; 0x01
    697a:	92 83       	std	Z+2, r25	; 0x02
    697c:	a3 83       	std	Z+3, r26	; 0x03
    697e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    6982:	8f ef       	ldi	r24, 0xFF	; 255
    6984:	9f ef       	ldi	r25, 0xFF	; 255
    6986:	01 c0       	rjmp	.+2      	; 0x698a <set_timers+0x6e>
    6988:	ca 01       	movw	r24, r20
    698a:	0f 90       	pop	r0
    698c:	0f 90       	pop	r0
    698e:	0f 90       	pop	r0
    6990:	08 95       	ret

00006992 <delete_all_timers>:
    6992:	e0 e6       	ldi	r30, 0x60	; 96
    6994:	fa e1       	ldi	r31, 0x1A	; 26
    6996:	12 82       	std	Z+2, r1	; 0x02
    6998:	11 82       	std	Z+1, r1	; 0x01
    699a:	10 82       	st	Z, r1
    699c:	33 96       	adiw	r30, 0x03	; 3
    699e:	8a e1       	ldi	r24, 0x1A	; 26
    69a0:	e8 37       	cpi	r30, 0x78	; 120
    69a2:	f8 07       	cpc	r31, r24
    69a4:	c1 f7       	brne	.-16     	; 0x6996 <delete_all_timers+0x4>
    69a6:	08 95       	ret

000069a8 <subtract_timespec>:
    69a8:	0f 93       	push	r16
    69aa:	1f 93       	push	r17
    69ac:	cf 93       	push	r28
    69ae:	df 93       	push	r29
    69b0:	fc 01       	movw	r30, r24
    69b2:	84 81       	ldd	r24, Z+4	; 0x04
    69b4:	95 81       	ldd	r25, Z+5	; 0x05
    69b6:	a6 81       	ldd	r26, Z+6	; 0x06
    69b8:	b7 81       	ldd	r27, Z+7	; 0x07
    69ba:	eb 01       	movw	r28, r22
    69bc:	0c 81       	ldd	r16, Y+4	; 0x04
    69be:	1d 81       	ldd	r17, Y+5	; 0x05
    69c0:	2e 81       	ldd	r18, Y+6	; 0x06
    69c2:	3f 81       	ldd	r19, Y+7	; 0x07
    69c4:	80 1b       	sub	r24, r16
    69c6:	91 0b       	sbc	r25, r17
    69c8:	a2 0b       	sbc	r26, r18
    69ca:	b3 0b       	sbc	r27, r19
    69cc:	b7 fd       	sbrc	r27, 7
    69ce:	05 c0       	rjmp	.+10     	; 0x69da <subtract_timespec+0x32>
    69d0:	84 83       	std	Z+4, r24	; 0x04
    69d2:	95 83       	std	Z+5, r25	; 0x05
    69d4:	a6 83       	std	Z+6, r26	; 0x06
    69d6:	b7 83       	std	Z+7, r27	; 0x07
    69d8:	12 c0       	rjmp	.+36     	; 0x69fe <subtract_timespec+0x56>
    69da:	96 53       	subi	r25, 0x36	; 54
    69dc:	a5 46       	sbci	r26, 0x65	; 101
    69de:	b4 4c       	sbci	r27, 0xC4	; 196
    69e0:	84 83       	std	Z+4, r24	; 0x04
    69e2:	95 83       	std	Z+5, r25	; 0x05
    69e4:	a6 83       	std	Z+6, r26	; 0x06
    69e6:	b7 83       	std	Z+7, r27	; 0x07
    69e8:	80 81       	ld	r24, Z
    69ea:	91 81       	ldd	r25, Z+1	; 0x01
    69ec:	a2 81       	ldd	r26, Z+2	; 0x02
    69ee:	b3 81       	ldd	r27, Z+3	; 0x03
    69f0:	01 97       	sbiw	r24, 0x01	; 1
    69f2:	a1 09       	sbc	r26, r1
    69f4:	b1 09       	sbc	r27, r1
    69f6:	80 83       	st	Z, r24
    69f8:	91 83       	std	Z+1, r25	; 0x01
    69fa:	a2 83       	std	Z+2, r26	; 0x02
    69fc:	b3 83       	std	Z+3, r27	; 0x03
    69fe:	80 81       	ld	r24, Z
    6a00:	91 81       	ldd	r25, Z+1	; 0x01
    6a02:	a2 81       	ldd	r26, Z+2	; 0x02
    6a04:	b3 81       	ldd	r27, Z+3	; 0x03
    6a06:	eb 01       	movw	r28, r22
    6a08:	48 81       	ld	r20, Y
    6a0a:	59 81       	ldd	r21, Y+1	; 0x01
    6a0c:	6a 81       	ldd	r22, Y+2	; 0x02
    6a0e:	7b 81       	ldd	r23, Y+3	; 0x03
    6a10:	84 1b       	sub	r24, r20
    6a12:	95 0b       	sbc	r25, r21
    6a14:	a6 0b       	sbc	r26, r22
    6a16:	b7 0b       	sbc	r27, r23
    6a18:	80 83       	st	Z, r24
    6a1a:	91 83       	std	Z+1, r25	; 0x01
    6a1c:	a2 83       	std	Z+2, r26	; 0x02
    6a1e:	b3 83       	std	Z+3, r27	; 0x03
    6a20:	df 91       	pop	r29
    6a22:	cf 91       	pop	r28
    6a24:	1f 91       	pop	r17
    6a26:	0f 91       	pop	r16
    6a28:	08 95       	ret

00006a2a <ts_to_str>:
    6a2a:	ad b7       	in	r26, 0x3d	; 61
    6a2c:	be b7       	in	r27, 0x3e	; 62
    6a2e:	1f 97       	sbiw	r26, 0x0f	; 15
    6a30:	0f b6       	in	r0, 0x3f	; 63
    6a32:	f8 94       	cli
    6a34:	be bf       	out	0x3e, r27	; 62
    6a36:	0f be       	out	0x3f, r0	; 63
    6a38:	ad bf       	out	0x3d, r26	; 61
    6a3a:	fc 01       	movw	r30, r24
    6a3c:	44 81       	ldd	r20, Z+4	; 0x04
    6a3e:	55 81       	ldd	r21, Z+5	; 0x05
    6a40:	66 81       	ldd	r22, Z+6	; 0x06
    6a42:	77 81       	ldd	r23, Z+7	; 0x07
    6a44:	ed b7       	in	r30, 0x3d	; 61
    6a46:	fe b7       	in	r31, 0x3e	; 62
    6a48:	44 87       	std	Z+12, r20	; 0x0c
    6a4a:	55 87       	std	Z+13, r21	; 0x0d
    6a4c:	66 87       	std	Z+14, r22	; 0x0e
    6a4e:	77 87       	std	Z+15, r23	; 0x0f
    6a50:	fc 01       	movw	r30, r24
    6a52:	80 81       	ld	r24, Z
    6a54:	91 81       	ldd	r25, Z+1	; 0x01
    6a56:	a2 81       	ldd	r26, Z+2	; 0x02
    6a58:	b3 81       	ldd	r27, Z+3	; 0x03
    6a5a:	ed b7       	in	r30, 0x3d	; 61
    6a5c:	fe b7       	in	r31, 0x3e	; 62
    6a5e:	80 87       	std	Z+8, r24	; 0x08
    6a60:	91 87       	std	Z+9, r25	; 0x09
    6a62:	a2 87       	std	Z+10, r26	; 0x0a
    6a64:	b3 87       	std	Z+11, r27	; 0x0b
    6a66:	83 ec       	ldi	r24, 0xC3	; 195
    6a68:	95 e0       	ldi	r25, 0x05	; 5
    6a6a:	a0 e0       	ldi	r26, 0x00	; 0
    6a6c:	85 83       	std	Z+5, r24	; 0x05
    6a6e:	96 83       	std	Z+6, r25	; 0x06
    6a70:	a7 83       	std	Z+7, r26	; 0x07
    6a72:	8f e1       	ldi	r24, 0x1F	; 31
    6a74:	90 e0       	ldi	r25, 0x00	; 0
    6a76:	94 83       	std	Z+4, r25	; 0x04
    6a78:	83 83       	std	Z+3, r24	; 0x03
    6a7a:	8c e8       	ldi	r24, 0x8C	; 140
    6a7c:	97 e1       	ldi	r25, 0x17	; 23
    6a7e:	92 83       	std	Z+2, r25	; 0x02
    6a80:	81 83       	std	Z+1, r24	; 0x01
    6a82:	0e 94 b8 46 	call	0x8d70	; 0x8d70 <snprintf_P>
    6a86:	8c e8       	ldi	r24, 0x8C	; 140
    6a88:	97 e1       	ldi	r25, 0x17	; 23
    6a8a:	ad b7       	in	r26, 0x3d	; 61
    6a8c:	be b7       	in	r27, 0x3e	; 62
    6a8e:	1f 96       	adiw	r26, 0x0f	; 15
    6a90:	0f b6       	in	r0, 0x3f	; 63
    6a92:	f8 94       	cli
    6a94:	be bf       	out	0x3e, r27	; 62
    6a96:	0f be       	out	0x3f, r0	; 63
    6a98:	ad bf       	out	0x3d, r26	; 61
    6a9a:	08 95       	ret

00006a9c <clock_elapsed_begin>:
    6a9c:	64 e8       	ldi	r22, 0x84	; 132
    6a9e:	77 e1       	ldi	r23, 0x17	; 23
    6aa0:	80 e0       	ldi	r24, 0x00	; 0
    6aa2:	90 e0       	ldi	r25, 0x00	; 0
    6aa4:	4b ce       	rjmp	.-874    	; 0x673c <clock_gettime>
    6aa6:	08 95       	ret

00006aa8 <clock_elapsed_end>:
    6aa8:	af e0       	ldi	r26, 0x0F	; 15
    6aaa:	b0 e0       	ldi	r27, 0x00	; 0
    6aac:	ea e5       	ldi	r30, 0x5A	; 90
    6aae:	f5 e3       	ldi	r31, 0x35	; 53
    6ab0:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
    6ab4:	8c 01       	movw	r16, r24
    6ab6:	be 01       	movw	r22, r28
    6ab8:	68 5f       	subi	r22, 0xF8	; 248
    6aba:	7f 4f       	sbci	r23, 0xFF	; 255
    6abc:	80 e0       	ldi	r24, 0x00	; 0
    6abe:	90 e0       	ldi	r25, 0x00	; 0
    6ac0:	3d de       	rcall	.-902    	; 0x673c <clock_gettime>
    6ac2:	64 e8       	ldi	r22, 0x84	; 132
    6ac4:	77 e1       	ldi	r23, 0x17	; 23
    6ac6:	ce 01       	movw	r24, r28
    6ac8:	08 96       	adiw	r24, 0x08	; 8
    6aca:	6e df       	rcall	.-292    	; 0x69a8 <subtract_timespec>
    6acc:	01 15       	cp	r16, r1
    6ace:	11 05       	cpc	r17, r1
    6ad0:	b1 f0       	breq	.+44     	; 0x6afe <clock_elapsed_end+0x56>
    6ad2:	f8 01       	movw	r30, r16
    6ad4:	80 81       	ld	r24, Z
    6ad6:	88 23       	and	r24, r24
    6ad8:	91 f0       	breq	.+36     	; 0x6afe <clock_elapsed_end+0x56>
    6ada:	ce 01       	movw	r24, r28
    6adc:	08 96       	adiw	r24, 0x08	; 8
    6ade:	a5 df       	rcall	.-182    	; 0x6a2a <ts_to_str>
    6ae0:	ed b7       	in	r30, 0x3d	; 61
    6ae2:	fe b7       	in	r31, 0x3e	; 62
    6ae4:	97 83       	std	Z+7, r25	; 0x07
    6ae6:	86 83       	std	Z+6, r24	; 0x06
    6ae8:	15 83       	std	Z+5, r17	; 0x05
    6aea:	04 83       	std	Z+4, r16	; 0x04
    6aec:	85 eb       	ldi	r24, 0xB5	; 181
    6aee:	95 e0       	ldi	r25, 0x05	; 5
    6af0:	a0 e0       	ldi	r26, 0x00	; 0
    6af2:	81 83       	std	Z+1, r24	; 0x01
    6af4:	92 83       	std	Z+2, r25	; 0x02
    6af6:	a3 83       	std	Z+3, r26	; 0x03
    6af8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    6afc:	0f c0       	rjmp	.+30     	; 0x6b1c <clock_elapsed_end+0x74>
    6afe:	ce 01       	movw	r24, r28
    6b00:	08 96       	adiw	r24, 0x08	; 8
    6b02:	93 df       	rcall	.-218    	; 0x6a2a <ts_to_str>
    6b04:	ed b7       	in	r30, 0x3d	; 61
    6b06:	fe b7       	in	r31, 0x3e	; 62
    6b08:	95 83       	std	Z+5, r25	; 0x05
    6b0a:	84 83       	std	Z+4, r24	; 0x04
    6b0c:	8a ea       	ldi	r24, 0xAA	; 170
    6b0e:	95 e0       	ldi	r25, 0x05	; 5
    6b10:	a0 e0       	ldi	r26, 0x00	; 0
    6b12:	81 83       	std	Z+1, r24	; 0x01
    6b14:	92 83       	std	Z+2, r25	; 0x02
    6b16:	a3 83       	std	Z+3, r26	; 0x03
    6b18:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    6b1c:	2f 96       	adiw	r28, 0x0f	; 15
    6b1e:	e4 e0       	ldi	r30, 0x04	; 4
    6b20:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

00006b24 <clock_clear>:
    6b24:	a8 e0       	ldi	r26, 0x08	; 8
    6b26:	b0 e0       	ldi	r27, 0x00	; 0
    6b28:	e8 e9       	ldi	r30, 0x98	; 152
    6b2a:	f5 e3       	ldi	r31, 0x35	; 53
    6b2c:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    6b30:	1d 82       	std	Y+5, r1	; 0x05
    6b32:	1e 82       	std	Y+6, r1	; 0x06
    6b34:	1f 82       	std	Y+7, r1	; 0x07
    6b36:	18 86       	std	Y+8, r1	; 0x08
    6b38:	19 82       	std	Y+1, r1	; 0x01
    6b3a:	1a 82       	std	Y+2, r1	; 0x02
    6b3c:	1b 82       	std	Y+3, r1	; 0x03
    6b3e:	1c 82       	std	Y+4, r1	; 0x04
    6b40:	ce 01       	movw	r24, r28
    6b42:	01 96       	adiw	r24, 0x01	; 1
    6b44:	ad de       	rcall	.-678    	; 0x68a0 <clock_settime.part.2>
    6b46:	e8 e7       	ldi	r30, 0x78	; 120
    6b48:	fa e1       	ldi	r31, 0x1A	; 26
    6b4a:	11 82       	std	Z+1, r1	; 0x01
    6b4c:	10 82       	st	Z, r1
    6b4e:	13 82       	std	Z+3, r1	; 0x03
    6b50:	12 82       	std	Z+2, r1	; 0x02
    6b52:	28 96       	adiw	r28, 0x08	; 8
    6b54:	e2 e0       	ldi	r30, 0x02	; 2
    6b56:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00006b5a <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6b5a:	80 91 ac 17 	lds	r24, 0x17AC	; 0x8017ac <timers_configured>
    6b5e:	90 91 ad 17 	lds	r25, 0x17AD	; 0x8017ad <timers_configured+0x1>
    6b62:	89 2b       	or	r24, r25
    6b64:	69 f0       	breq	.+26     	; 0x6b80 <enable_timers+0x26>
    6b66:	80 91 ae 17 	lds	r24, 0x17AE	; 0x8017ae <timers_enabled>
    6b6a:	90 91 af 17 	lds	r25, 0x17AF	; 0x8017af <timers_enabled+0x1>
    6b6e:	89 2b       	or	r24, r25
    6b70:	39 f4       	brne	.+14     	; 0x6b80 <enable_timers+0x26>
    {
        enable_system_task();
    6b72:	a8 dd       	rcall	.-1200   	; 0x66c4 <enable_system_task>
        timers_enabled = 1;
    6b74:	81 e0       	ldi	r24, 0x01	; 1
    6b76:	90 e0       	ldi	r25, 0x00	; 0
    6b78:	90 93 af 17 	sts	0x17AF, r25	; 0x8017af <timers_enabled+0x1>
    6b7c:	80 93 ae 17 	sts	0x17AE, r24	; 0x8017ae <timers_enabled>
    6b80:	08 95       	ret

00006b82 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6b82:	cf 93       	push	r28
    6b84:	df 93       	push	r29
    6b86:	c0 e6       	ldi	r28, 0x60	; 96
    6b88:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    6b8c:	88 23       	and	r24, r24
    6b8e:	29 f0       	breq	.+10     	; 0x6b9a <execute_timers+0x18>
    6b90:	e8 81       	ld	r30, Y
    6b92:	f9 81       	ldd	r31, Y+1	; 0x01
    6b94:	30 97       	sbiw	r30, 0x00	; 0
    6b96:	09 f0       	breq	.+2      	; 0x6b9a <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6b98:	09 95       	icall
    6b9a:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6b9c:	8a e1       	ldi	r24, 0x1A	; 26
    6b9e:	c8 37       	cpi	r28, 0x78	; 120
    6ba0:	d8 07       	cpc	r29, r24
    6ba2:	99 f7       	brne	.-26     	; 0x6b8a <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6ba4:	df 91       	pop	r29
    6ba6:	cf 91       	pop	r28
    6ba8:	08 95       	ret

00006baa <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6baa:	00 d0       	rcall	.+0      	; 0x6bac <init_timers+0x2>
    6bac:	1f 92       	push	r1
    printf("Timers init called\n");
    6bae:	86 e9       	ldi	r24, 0x96	; 150
    6bb0:	95 e0       	ldi	r25, 0x05	; 5
    6bb2:	a0 e0       	ldi	r26, 0x00	; 0
    6bb4:	ed b7       	in	r30, 0x3d	; 61
    6bb6:	fe b7       	in	r31, 0x3e	; 62
    6bb8:	81 83       	std	Z+1, r24	; 0x01
    6bba:	92 83       	std	Z+2, r25	; 0x02
    6bbc:	a3 83       	std	Z+3, r26	; 0x03
    6bbe:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    if(!timers_configured)
    6bc2:	80 91 ac 17 	lds	r24, 0x17AC	; 0x8017ac <timers_configured>
    6bc6:	90 91 ad 17 	lds	r25, 0x17AD	; 0x8017ad <timers_configured+0x1>
    6bca:	89 2b       	or	r24, r25
    6bcc:	a9 f4       	brne	.+42     	; 0x6bf8 <init_timers+0x4e>
    {
        install_timers_isr();
    6bce:	7c dd       	rcall	.-1288   	; 0x66c8 <install_timers_isr>
        timers_configured = 1;
    6bd0:	81 e0       	ldi	r24, 0x01	; 1
    6bd2:	90 e0       	ldi	r25, 0x00	; 0
    6bd4:	90 93 ad 17 	sts	0x17AD, r25	; 0x8017ad <timers_configured+0x1>
    6bd8:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <timers_configured>
        timers_enabled = 0;
    6bdc:	10 92 af 17 	sts	0x17AF, r1	; 0x8017af <timers_enabled+0x1>
    6be0:	10 92 ae 17 	sts	0x17AE, r1	; 0x8017ae <timers_enabled>
        printf("Timers configured\n");
    6be4:	83 e8       	ldi	r24, 0x83	; 131
    6be6:	95 e0       	ldi	r25, 0x05	; 5
    6be8:	a0 e0       	ldi	r26, 0x00	; 0
    6bea:	ed b7       	in	r30, 0x3d	; 61
    6bec:	fe b7       	in	r31, 0x3e	; 62
    6bee:	81 83       	std	Z+1, r24	; 0x01
    6bf0:	92 83       	std	Z+2, r25	; 0x02
    6bf2:	a3 83       	std	Z+3, r26	; 0x03
    6bf4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    }

    delete_all_timers();

    clock_clear();
    6bf8:	cc de       	rcall	.-616    	; 0x6992 <delete_all_timers>
    6bfa:	94 df       	rcall	.-216    	; 0x6b24 <clock_clear>
    printf("Clock Init\n");
    6bfc:	87 e7       	ldi	r24, 0x77	; 119
    6bfe:	95 e0       	ldi	r25, 0x05	; 5
    6c00:	a0 e0       	ldi	r26, 0x00	; 0
    6c02:	ed b7       	in	r30, 0x3d	; 61
    6c04:	fe b7       	in	r31, 0x3e	; 62
    6c06:	81 83       	std	Z+1, r24	; 0x01
    6c08:	92 83       	std	Z+2, r25	; 0x02
    6c0a:	a3 83       	std	Z+3, r26	; 0x03
    6c0c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6c10:	61 e0       	ldi	r22, 0x01	; 1
    6c12:	70 e0       	ldi	r23, 0x00	; 0
    6c14:	83 e1       	ldi	r24, 0x13	; 19
    6c16:	94 e3       	ldi	r25, 0x34	; 52
    6c18:	81 de       	rcall	.-766    	; 0x691c <set_timers>
    6c1a:	01 96       	adiw	r24, 0x01	; 1
    6c1c:	51 f4       	brne	.+20     	; 0x6c32 <init_timers+0x88>
        printf("Clock task init failed\n");
    6c1e:	8f e5       	ldi	r24, 0x5F	; 95
    6c20:	95 e0       	ldi	r25, 0x05	; 5
    6c22:	a0 e0       	ldi	r26, 0x00	; 0
    6c24:	ed b7       	in	r30, 0x3d	; 61
    6c26:	fe b7       	in	r31, 0x3e	; 62
    6c28:	81 83       	std	Z+1, r24	; 0x01
    6c2a:	92 83       	std	Z+2, r25	; 0x02
    6c2c:	a3 83       	std	Z+3, r26	; 0x03
    6c2e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("Clock Installed\n");
    6c32:	8e e4       	ldi	r24, 0x4E	; 78
    6c34:	95 e0       	ldi	r25, 0x05	; 5
    6c36:	a0 e0       	ldi	r26, 0x00	; 0
    6c38:	ed b7       	in	r30, 0x3d	; 61
    6c3a:	fe b7       	in	r31, 0x3e	; 62
    6c3c:	81 83       	std	Z+1, r24	; 0x01
    6c3e:	92 83       	std	Z+2, r25	; 0x02
    6c40:	a3 83       	std	Z+3, r26	; 0x03
    6c42:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    enable_timers();
    6c46:	89 df       	rcall	.-238    	; 0x6b5a <enable_timers>

    printf("Timers enabled\n");
    6c48:	8e e3       	ldi	r24, 0x3E	; 62
    6c4a:	95 e0       	ldi	r25, 0x05	; 5
    6c4c:	a0 e0       	ldi	r26, 0x00	; 0
    6c4e:	ed b7       	in	r30, 0x3d	; 61
    6c50:	fe b7       	in	r31, 0x3e	; 62
    6c52:	81 83       	std	Z+1, r24	; 0x01
    6c54:	92 83       	std	Z+2, r25	; 0x02
    6c56:	a3 83       	std	Z+3, r26	; 0x03
    6c58:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
}
    6c5c:	0f 90       	pop	r0
    6c5e:	0f 90       	pop	r0
    6c60:	0f 90       	pop	r0
    6c62:	08 95       	ret

00006c64 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6c64:	89 2b       	or	r24, r25
    6c66:	81 f4       	brne	.+32     	; 0x6c88 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6c68:	fb 01       	movw	r30, r22
    6c6a:	10 82       	st	Z, r1
    6c6c:	11 82       	std	Z+1, r1	; 0x01
    6c6e:	12 82       	std	Z+2, r1	; 0x02
    6c70:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6c72:	80 e4       	ldi	r24, 0x40	; 64
    6c74:	92 e4       	ldi	r25, 0x42	; 66
    6c76:	af e0       	ldi	r26, 0x0F	; 15
    6c78:	b0 e0       	ldi	r27, 0x00	; 0
    6c7a:	84 83       	std	Z+4, r24	; 0x04
    6c7c:	95 83       	std	Z+5, r25	; 0x05
    6c7e:	a6 83       	std	Z+6, r26	; 0x06
    6c80:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6c82:	80 e0       	ldi	r24, 0x00	; 0
    6c84:	90 e0       	ldi	r25, 0x00	; 0
    6c86:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6c88:	8f ef       	ldi	r24, 0xFF	; 255
    6c8a:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6c8c:	08 95       	ret

00006c8e <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6c8e:	89 2b       	or	r24, r25
    6c90:	19 f4       	brne	.+6      	; 0x6c98 <clock_settime+0xa>
    6c92:	cb 01       	movw	r24, r22
    6c94:	05 ce       	rjmp	.-1014   	; 0x68a0 <clock_settime.part.2>
    6c96:	08 95       	ret
        return(-1);
    6c98:	8f ef       	ldi	r24, 0xFF	; 255
    6c9a:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6c9c:	08 95       	ret

00006c9e <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6c9e:	9c 01       	movw	r18, r24
    6ca0:	83 70       	andi	r24, 0x03	; 3
    6ca2:	99 27       	eor	r25, r25
    6ca4:	00 97       	sbiw	r24, 0x00	; 0
    6ca6:	69 f4       	brne	.+26     	; 0x6cc2 <IS_Leap+0x24>
    6ca8:	2c 36       	cpi	r18, 0x6C	; 108
    6caa:	47 e0       	ldi	r20, 0x07	; 7
    6cac:	34 07       	cpc	r19, r20
    6cae:	59 f0       	breq	.+22     	; 0x6cc6 <IS_Leap+0x28>
    6cb0:	51 e0       	ldi	r21, 0x01	; 1
    6cb2:	40 e0       	ldi	r20, 0x00	; 0
    6cb4:	24 33       	cpi	r18, 0x34	; 52
    6cb6:	38 40       	sbci	r19, 0x08	; 8
    6cb8:	09 f4       	brne	.+2      	; 0x6cbc <IS_Leap+0x1e>
    6cba:	50 e0       	ldi	r21, 0x00	; 0
    6cbc:	85 2f       	mov	r24, r21
    6cbe:	94 2f       	mov	r25, r20
    6cc0:	08 95       	ret
    6cc2:	80 e0       	ldi	r24, 0x00	; 0
    6cc4:	90 e0       	ldi	r25, 0x00	; 0
    6cc6:	08 95       	ret

00006cc8 <tm_mon_to_ascii>:
    6cc8:	8c 30       	cpi	r24, 0x0C	; 12
    6cca:	91 05       	cpc	r25, r1
    6ccc:	40 f4       	brcc	.+16     	; 0x6cde <tm_mon_to_ascii+0x16>
    6cce:	88 0f       	add	r24, r24
    6cd0:	99 1f       	adc	r25, r25
    6cd2:	fc 01       	movw	r30, r24
    6cd4:	e5 5f       	subi	r30, 0xF5	; 245
    6cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    6cd8:	80 81       	ld	r24, Z
    6cda:	91 81       	ldd	r25, Z+1	; 0x01
    6cdc:	08 95       	ret
    6cde:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6ce2:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6ce6:	08 95       	ret

00006ce8 <Days_Per_Month>:
    6ce8:	cf 93       	push	r28
    6cea:	df 93       	push	r29
    6cec:	8c 30       	cpi	r24, 0x0C	; 12
    6cee:	91 05       	cpc	r25, r1
    6cf0:	24 f0       	brlt	.+8      	; 0x6cfa <Days_Per_Month+0x12>
    6cf2:	6f 5f       	subi	r22, 0xFF	; 255
    6cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    6cf6:	0c 97       	sbiw	r24, 0x0c	; 12
    6cf8:	f9 cf       	rjmp	.-14     	; 0x6cec <Days_Per_Month+0x4>
    6cfa:	97 ff       	sbrs	r25, 7
    6cfc:	04 c0       	rjmp	.+8      	; 0x6d06 <Days_Per_Month+0x1e>
    6cfe:	61 50       	subi	r22, 0x01	; 1
    6d00:	71 09       	sbc	r23, r1
    6d02:	0c 96       	adiw	r24, 0x0c	; 12
    6d04:	fa cf       	rjmp	.-12     	; 0x6cfa <Days_Per_Month+0x12>
    6d06:	fc 01       	movw	r30, r24
    6d08:	ee 0f       	add	r30, r30
    6d0a:	ff 1f       	adc	r31, r31
    6d0c:	e8 57       	subi	r30, 0x78	; 120
    6d0e:	fc 4f       	sbci	r31, 0xFC	; 252
    6d10:	c0 81       	ld	r28, Z
    6d12:	d1 81       	ldd	r29, Z+1	; 0x01
    6d14:	01 97       	sbiw	r24, 0x01	; 1
    6d16:	29 f4       	brne	.+10     	; 0x6d22 <Days_Per_Month+0x3a>
    6d18:	cb 01       	movw	r24, r22
    6d1a:	c1 df       	rcall	.-126    	; 0x6c9e <IS_Leap>
    6d1c:	89 2b       	or	r24, r25
    6d1e:	09 f0       	breq	.+2      	; 0x6d22 <Days_Per_Month+0x3a>
    6d20:	21 96       	adiw	r28, 0x01	; 1
    6d22:	ce 01       	movw	r24, r28
    6d24:	df 91       	pop	r29
    6d26:	cf 91       	pop	r28
    6d28:	08 95       	ret

00006d2a <time_to_tm>:
    6d2a:	a0 e0       	ldi	r26, 0x00	; 0
    6d2c:	b0 e0       	ldi	r27, 0x00	; 0
    6d2e:	eb e9       	ldi	r30, 0x9B	; 155
    6d30:	f6 e3       	ldi	r31, 0x36	; 54
    6d32:	0c 94 b5 e6 	jmp	0x1cd6a	; 0x1cd6a <__prologue_saves__+0x4>
    6d36:	e8 01       	movw	r28, r16
    6d38:	e6 e1       	ldi	r30, 0x16	; 22
    6d3a:	d8 01       	movw	r26, r16
    6d3c:	1d 92       	st	X+, r1
    6d3e:	ea 95       	dec	r30
    6d40:	e9 f7       	brne	.-6      	; 0x6d3c <time_to_tm+0x12>
    6d42:	61 15       	cp	r22, r1
    6d44:	bd e5       	ldi	r27, 0x5D	; 93
    6d46:	7b 07       	cpc	r23, r27
    6d48:	bd ef       	ldi	r27, 0xFD	; 253
    6d4a:	8b 07       	cpc	r24, r27
    6d4c:	bf ef       	ldi	r27, 0xFF	; 255
    6d4e:	9b 07       	cpc	r25, r27
    6d50:	08 f0       	brcs	.+2      	; 0x6d54 <time_to_tm+0x2a>
    6d52:	c0 c0       	rjmp	.+384    	; 0x6ed4 <time_to_tm+0x1aa>
    6d54:	6b 01       	movw	r12, r22
    6d56:	7c 01       	movw	r14, r24
    6d58:	c2 1a       	sub	r12, r18
    6d5a:	d3 0a       	sbc	r13, r19
    6d5c:	e4 0a       	sbc	r14, r20
    6d5e:	f5 0a       	sbc	r15, r21
    6d60:	46 01       	movw	r8, r12
    6d62:	57 01       	movw	r10, r14
    6d64:	e0 e8       	ldi	r30, 0x80	; 128
    6d66:	ce 16       	cp	r12, r30
    6d68:	ee ea       	ldi	r30, 0xAE	; 174
    6d6a:	de 06       	cpc	r13, r30
    6d6c:	ee ef       	ldi	r30, 0xFE	; 254
    6d6e:	ee 06       	cpc	r14, r30
    6d70:	ef ef       	ldi	r30, 0xFF	; 255
    6d72:	fe 06       	cpc	r15, r30
    6d74:	50 f0       	brcs	.+20     	; 0x6d8a <time_to_tm+0x60>
    6d76:	80 e8       	ldi	r24, 0x80	; 128
    6d78:	88 0e       	add	r8, r24
    6d7a:	81 e5       	ldi	r24, 0x51	; 81
    6d7c:	98 1e       	adc	r9, r24
    6d7e:	81 e0       	ldi	r24, 0x01	; 1
    6d80:	a8 1e       	adc	r10, r24
    6d82:	b1 1c       	adc	r11, r1
    6d84:	01 e0       	ldi	r16, 0x01	; 1
    6d86:	10 e0       	ldi	r17, 0x00	; 0
    6d88:	02 c0       	rjmp	.+4      	; 0x6d8e <time_to_tm+0x64>
    6d8a:	00 e0       	ldi	r16, 0x00	; 0
    6d8c:	10 e0       	ldi	r17, 0x00	; 0
    6d8e:	8c e3       	ldi	r24, 0x3C	; 60
    6d90:	48 2e       	mov	r4, r24
    6d92:	51 2c       	mov	r5, r1
    6d94:	61 2c       	mov	r6, r1
    6d96:	71 2c       	mov	r7, r1
    6d98:	c5 01       	movw	r24, r10
    6d9a:	b4 01       	movw	r22, r8
    6d9c:	a3 01       	movw	r20, r6
    6d9e:	92 01       	movw	r18, r4
    6da0:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__udivmodsi4>
    6da4:	79 83       	std	Y+1, r23	; 0x01
    6da6:	68 83       	st	Y, r22
    6da8:	ca 01       	movw	r24, r20
    6daa:	b9 01       	movw	r22, r18
    6dac:	a3 01       	movw	r20, r6
    6dae:	92 01       	movw	r18, r4
    6db0:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__udivmodsi4>
    6db4:	7b 83       	std	Y+3, r23	; 0x03
    6db6:	6a 83       	std	Y+2, r22	; 0x02
    6db8:	c5 01       	movw	r24, r10
    6dba:	b4 01       	movw	r22, r8
    6dbc:	20 e1       	ldi	r18, 0x10	; 16
    6dbe:	3e e0       	ldi	r19, 0x0E	; 14
    6dc0:	40 e0       	ldi	r20, 0x00	; 0
    6dc2:	50 e0       	ldi	r21, 0x00	; 0
    6dc4:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__udivmodsi4>
    6dc8:	ca 01       	movw	r24, r20
    6dca:	b9 01       	movw	r22, r18
    6dcc:	28 e1       	ldi	r18, 0x18	; 24
    6dce:	30 e0       	ldi	r19, 0x00	; 0
    6dd0:	40 e0       	ldi	r20, 0x00	; 0
    6dd2:	50 e0       	ldi	r21, 0x00	; 0
    6dd4:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__udivmodsi4>
    6dd8:	7d 83       	std	Y+5, r23	; 0x05
    6dda:	6c 83       	std	Y+4, r22	; 0x04
    6ddc:	01 15       	cp	r16, r1
    6dde:	11 05       	cpc	r17, r1
    6de0:	89 f0       	breq	.+34     	; 0x6e04 <time_to_tm+0xda>
    6de2:	85 e4       	ldi	r24, 0x45	; 69
    6de4:	90 e0       	ldi	r25, 0x00	; 0
    6de6:	9b 87       	std	Y+11, r25	; 0x0b
    6de8:	8a 87       	std	Y+10, r24	; 0x0a
    6dea:	8b e0       	ldi	r24, 0x0B	; 11
    6dec:	90 e0       	ldi	r25, 0x00	; 0
    6dee:	99 87       	std	Y+9, r25	; 0x09
    6df0:	88 87       	std	Y+8, r24	; 0x08
    6df2:	8f e1       	ldi	r24, 0x1F	; 31
    6df4:	90 e0       	ldi	r25, 0x00	; 0
    6df6:	9f 83       	std	Y+7, r25	; 0x07
    6df8:	8e 83       	std	Y+6, r24	; 0x06
    6dfa:	83 e0       	ldi	r24, 0x03	; 3
    6dfc:	90 e0       	ldi	r25, 0x00	; 0
    6dfe:	9d 87       	std	Y+13, r25	; 0x0d
    6e00:	8c 87       	std	Y+12, r24	; 0x0c
    6e02:	65 c0       	rjmp	.+202    	; 0x6ece <time_to_tm+0x1a4>
    6e04:	c5 01       	movw	r24, r10
    6e06:	b4 01       	movw	r22, r8
    6e08:	20 e8       	ldi	r18, 0x80	; 128
    6e0a:	31 e5       	ldi	r19, 0x51	; 81
    6e0c:	41 e0       	ldi	r20, 0x01	; 1
    6e0e:	50 e0       	ldi	r21, 0x00	; 0
    6e10:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__udivmodsi4>
    6e14:	49 01       	movw	r8, r18
    6e16:	5a 01       	movw	r10, r20
    6e18:	ca 01       	movw	r24, r20
    6e1a:	b9 01       	movw	r22, r18
    6e1c:	6c 5f       	subi	r22, 0xFC	; 252
    6e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    6e20:	8f 4f       	sbci	r24, 0xFF	; 255
    6e22:	9f 4f       	sbci	r25, 0xFF	; 255
    6e24:	27 e0       	ldi	r18, 0x07	; 7
    6e26:	30 e0       	ldi	r19, 0x00	; 0
    6e28:	40 e0       	ldi	r20, 0x00	; 0
    6e2a:	50 e0       	ldi	r21, 0x00	; 0
    6e2c:	0e 94 68 e6 	call	0x1ccd0	; 0x1ccd0 <__divmodsi4>
    6e30:	7d 87       	std	Y+13, r23	; 0x0d
    6e32:	6c 87       	std	Y+12, r22	; 0x0c
    6e34:	02 eb       	ldi	r16, 0xB2	; 178
    6e36:	17 e0       	ldi	r17, 0x07	; 7
    6e38:	c8 01       	movw	r24, r16
    6e3a:	31 df       	rcall	.-414    	; 0x6c9e <IS_Leap>
    6e3c:	00 97       	sbiw	r24, 0x00	; 0
    6e3e:	19 f4       	brne	.+6      	; 0x6e46 <time_to_tm+0x11c>
    6e40:	4d e6       	ldi	r20, 0x6D	; 109
    6e42:	51 e0       	ldi	r21, 0x01	; 1
    6e44:	02 c0       	rjmp	.+4      	; 0x6e4a <time_to_tm+0x120>
    6e46:	4e e6       	ldi	r20, 0x6E	; 110
    6e48:	51 e0       	ldi	r21, 0x01	; 1
    6e4a:	05 2e       	mov	r0, r21
    6e4c:	00 0c       	add	r0, r0
    6e4e:	66 0b       	sbc	r22, r22
    6e50:	77 0b       	sbc	r23, r23
    6e52:	84 16       	cp	r8, r20
    6e54:	95 06       	cpc	r9, r21
    6e56:	a6 06       	cpc	r10, r22
    6e58:	b7 06       	cpc	r11, r23
    6e5a:	3c f0       	brlt	.+14     	; 0x6e6a <time_to_tm+0x140>
    6e5c:	0f 5f       	subi	r16, 0xFF	; 255
    6e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    6e60:	84 1a       	sub	r8, r20
    6e62:	95 0a       	sbc	r9, r21
    6e64:	a6 0a       	sbc	r10, r22
    6e66:	b7 0a       	sbc	r11, r23
    6e68:	e7 cf       	rjmp	.-50     	; 0x6e38 <time_to_tm+0x10e>
    6e6a:	0c 56       	subi	r16, 0x6C	; 108
    6e6c:	17 40       	sbci	r17, 0x07	; 7
    6e6e:	1b 87       	std	Y+11, r17	; 0x0b
    6e70:	0a 87       	std	Y+10, r16	; 0x0a
    6e72:	9f 86       	std	Y+15, r9	; 0x0f
    6e74:	8e 86       	std	Y+14, r8	; 0x0e
    6e76:	e8 e8       	ldi	r30, 0x88	; 136
    6e78:	f3 e0       	ldi	r31, 0x03	; 3
    6e7a:	20 e0       	ldi	r18, 0x00	; 0
    6e7c:	30 e0       	ldi	r19, 0x00	; 0
    6e7e:	18 14       	cp	r1, r8
    6e80:	19 04       	cpc	r1, r9
    6e82:	1a 04       	cpc	r1, r10
    6e84:	1b 04       	cpc	r1, r11
    6e86:	e4 f4       	brge	.+56     	; 0x6ec0 <time_to_tm+0x196>
    6e88:	2c 30       	cpi	r18, 0x0C	; 12
    6e8a:	31 05       	cpc	r19, r1
    6e8c:	c9 f0       	breq	.+50     	; 0x6ec0 <time_to_tm+0x196>
    6e8e:	41 91       	ld	r20, Z+
    6e90:	51 91       	ld	r21, Z+
    6e92:	21 30       	cpi	r18, 0x01	; 1
    6e94:	31 05       	cpc	r19, r1
    6e96:	21 f4       	brne	.+8      	; 0x6ea0 <time_to_tm+0x176>
    6e98:	00 97       	sbiw	r24, 0x00	; 0
    6e9a:	11 f0       	breq	.+4      	; 0x6ea0 <time_to_tm+0x176>
    6e9c:	4f 5f       	subi	r20, 0xFF	; 255
    6e9e:	5f 4f       	sbci	r21, 0xFF	; 255
    6ea0:	05 2e       	mov	r0, r21
    6ea2:	00 0c       	add	r0, r0
    6ea4:	66 0b       	sbc	r22, r22
    6ea6:	77 0b       	sbc	r23, r23
    6ea8:	84 16       	cp	r8, r20
    6eaa:	95 06       	cpc	r9, r21
    6eac:	a6 06       	cpc	r10, r22
    6eae:	b7 06       	cpc	r11, r23
    6eb0:	3c f0       	brlt	.+14     	; 0x6ec0 <time_to_tm+0x196>
    6eb2:	84 1a       	sub	r8, r20
    6eb4:	95 0a       	sbc	r9, r21
    6eb6:	a6 0a       	sbc	r10, r22
    6eb8:	b7 0a       	sbc	r11, r23
    6eba:	2f 5f       	subi	r18, 0xFF	; 255
    6ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    6ebe:	df cf       	rjmp	.-66     	; 0x6e7e <time_to_tm+0x154>
    6ec0:	39 87       	std	Y+9, r19	; 0x09
    6ec2:	28 87       	std	Y+8, r18	; 0x08
    6ec4:	af ef       	ldi	r26, 0xFF	; 255
    6ec6:	8a 1a       	sub	r8, r26
    6ec8:	9a 0a       	sbc	r9, r26
    6eca:	9f 82       	std	Y+7, r9	; 0x07
    6ecc:	8e 82       	std	Y+6, r8	; 0x06
    6ece:	b6 01       	movw	r22, r12
    6ed0:	c7 01       	movw	r24, r14
    6ed2:	04 c0       	rjmp	.+8      	; 0x6edc <time_to_tm+0x1b2>
    6ed4:	6f ef       	ldi	r22, 0xFF	; 255
    6ed6:	7f ef       	ldi	r23, 0xFF	; 255
    6ed8:	8f ef       	ldi	r24, 0xFF	; 255
    6eda:	9f ef       	ldi	r25, 0xFF	; 255
    6edc:	cd b7       	in	r28, 0x3d	; 61
    6ede:	de b7       	in	r29, 0x3e	; 62
    6ee0:	e0 e1       	ldi	r30, 0x10	; 16
    6ee2:	0c 94 d1 e6 	jmp	0x1cda2	; 0x1cda2 <__epilogue_restores__+0x4>

00006ee6 <gmtime_r>:
    6ee6:	0f 93       	push	r16
    6ee8:	1f 93       	push	r17
    6eea:	cf 93       	push	r28
    6eec:	df 93       	push	r29
    6eee:	eb 01       	movw	r28, r22
    6ef0:	fc 01       	movw	r30, r24
    6ef2:	60 81       	ld	r22, Z
    6ef4:	71 81       	ldd	r23, Z+1	; 0x01
    6ef6:	82 81       	ldd	r24, Z+2	; 0x02
    6ef8:	93 81       	ldd	r25, Z+3	; 0x03
    6efa:	8e 01       	movw	r16, r28
    6efc:	20 e0       	ldi	r18, 0x00	; 0
    6efe:	30 e0       	ldi	r19, 0x00	; 0
    6f00:	a9 01       	movw	r20, r18
    6f02:	13 df       	rcall	.-474    	; 0x6d2a <time_to_tm>
    6f04:	ce 01       	movw	r24, r28
    6f06:	df 91       	pop	r29
    6f08:	cf 91       	pop	r28
    6f0a:	1f 91       	pop	r17
    6f0c:	0f 91       	pop	r16
    6f0e:	08 95       	ret

00006f10 <gmtime>:
    6f10:	2e ec       	ldi	r18, 0xCE	; 206
    6f12:	37 e1       	ldi	r19, 0x17	; 23
    6f14:	30 93 e5 17 	sts	0x17E5, r19	; 0x8017e5 <p.3677+0x1>
    6f18:	20 93 e4 17 	sts	0x17E4, r18	; 0x8017e4 <p.3677>
    6f1c:	b9 01       	movw	r22, r18
    6f1e:	e3 df       	rcall	.-58     	; 0x6ee6 <gmtime_r>
    6f20:	8e ec       	ldi	r24, 0xCE	; 206
    6f22:	97 e1       	ldi	r25, 0x17	; 23
    6f24:	08 95       	ret

00006f26 <gettimezone>:
    6f26:	e8 e7       	ldi	r30, 0x78	; 120
    6f28:	fa e1       	ldi	r31, 0x1A	; 26
    6f2a:	20 81       	ld	r18, Z
    6f2c:	31 81       	ldd	r19, Z+1	; 0x01
    6f2e:	dc 01       	movw	r26, r24
    6f30:	2d 93       	st	X+, r18
    6f32:	3c 93       	st	X, r19
    6f34:	22 81       	ldd	r18, Z+2	; 0x02
    6f36:	33 81       	ldd	r19, Z+3	; 0x03
    6f38:	fc 01       	movw	r30, r24
    6f3a:	33 83       	std	Z+3, r19	; 0x03
    6f3c:	22 83       	std	Z+2, r18	; 0x02
    6f3e:	80 e0       	ldi	r24, 0x00	; 0
    6f40:	90 e0       	ldi	r25, 0x00	; 0
    6f42:	08 95       	ret

00006f44 <settimezone>:
    6f44:	cf 93       	push	r28
    6f46:	df 93       	push	r29
    6f48:	ec 01       	movw	r28, r24
    6f4a:	28 81       	ld	r18, Y
    6f4c:	39 81       	ldd	r19, Y+1	; 0x01
    6f4e:	e8 e7       	ldi	r30, 0x78	; 120
    6f50:	fa e1       	ldi	r31, 0x1A	; 26
    6f52:	31 83       	std	Z+1, r19	; 0x01
    6f54:	20 83       	st	Z, r18
    6f56:	8a 81       	ldd	r24, Y+2	; 0x02
    6f58:	9b 81       	ldd	r25, Y+3	; 0x03
    6f5a:	93 83       	std	Z+3, r25	; 0x03
    6f5c:	82 83       	std	Z+2, r24	; 0x02
    6f5e:	80 e0       	ldi	r24, 0x00	; 0
    6f60:	90 e0       	ldi	r25, 0x00	; 0
    6f62:	df 91       	pop	r29
    6f64:	cf 91       	pop	r28
    6f66:	08 95       	ret

00006f68 <gettimeofday>:
    6f68:	a8 e0       	ldi	r26, 0x08	; 8
    6f6a:	b0 e0       	ldi	r27, 0x00	; 0
    6f6c:	ea eb       	ldi	r30, 0xBA	; 186
    6f6e:	f7 e3       	ldi	r31, 0x37	; 55
    6f70:	0c 94 bf e6 	jmp	0x1cd7e	; 0x1cd7e <__prologue_saves__+0x18>
    6f74:	8c 01       	movw	r16, r24
    6f76:	7b 01       	movw	r14, r22
    6f78:	be 01       	movw	r22, r28
    6f7a:	6f 5f       	subi	r22, 0xFF	; 255
    6f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    6f7e:	80 e0       	ldi	r24, 0x00	; 0
    6f80:	90 e0       	ldi	r25, 0x00	; 0
    6f82:	dc db       	rcall	.-2120   	; 0x673c <clock_gettime>
    6f84:	89 81       	ldd	r24, Y+1	; 0x01
    6f86:	9a 81       	ldd	r25, Y+2	; 0x02
    6f88:	ab 81       	ldd	r26, Y+3	; 0x03
    6f8a:	bc 81       	ldd	r27, Y+4	; 0x04
    6f8c:	f8 01       	movw	r30, r16
    6f8e:	80 83       	st	Z, r24
    6f90:	91 83       	std	Z+1, r25	; 0x01
    6f92:	a2 83       	std	Z+2, r26	; 0x02
    6f94:	b3 83       	std	Z+3, r27	; 0x03
    6f96:	6d 81       	ldd	r22, Y+5	; 0x05
    6f98:	7e 81       	ldd	r23, Y+6	; 0x06
    6f9a:	8f 81       	ldd	r24, Y+7	; 0x07
    6f9c:	98 85       	ldd	r25, Y+8	; 0x08
    6f9e:	28 ee       	ldi	r18, 0xE8	; 232
    6fa0:	33 e0       	ldi	r19, 0x03	; 3
    6fa2:	40 e0       	ldi	r20, 0x00	; 0
    6fa4:	50 e0       	ldi	r21, 0x00	; 0
    6fa6:	0e 94 68 e6 	call	0x1ccd0	; 0x1ccd0 <__divmodsi4>
    6faa:	f8 01       	movw	r30, r16
    6fac:	24 83       	std	Z+4, r18	; 0x04
    6fae:	35 83       	std	Z+5, r19	; 0x05
    6fb0:	46 83       	std	Z+6, r20	; 0x06
    6fb2:	57 83       	std	Z+7, r21	; 0x07
    6fb4:	c7 01       	movw	r24, r14
    6fb6:	b7 df       	rcall	.-146    	; 0x6f26 <gettimezone>
    6fb8:	80 e0       	ldi	r24, 0x00	; 0
    6fba:	90 e0       	ldi	r25, 0x00	; 0
    6fbc:	28 96       	adiw	r28, 0x08	; 8
    6fbe:	e6 e0       	ldi	r30, 0x06	; 6
    6fc0:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

00006fc4 <time>:
    6fc4:	cf 93       	push	r28
    6fc6:	df 93       	push	r29
    6fc8:	ec 01       	movw	r28, r24
    6fca:	60 eb       	ldi	r22, 0xB0	; 176
    6fcc:	77 e1       	ldi	r23, 0x17	; 23
    6fce:	80 e0       	ldi	r24, 0x00	; 0
    6fd0:	90 e0       	ldi	r25, 0x00	; 0
    6fd2:	b4 db       	rcall	.-2200   	; 0x673c <clock_gettime>
    6fd4:	20 97       	sbiw	r28, 0x00	; 0
    6fd6:	61 f0       	breq	.+24     	; 0x6ff0 <time+0x2c>
    6fd8:	80 91 b0 17 	lds	r24, 0x17B0	; 0x8017b0 <ts.3755>
    6fdc:	90 91 b1 17 	lds	r25, 0x17B1	; 0x8017b1 <ts.3755+0x1>
    6fe0:	a0 91 b2 17 	lds	r26, 0x17B2	; 0x8017b2 <ts.3755+0x2>
    6fe4:	b0 91 b3 17 	lds	r27, 0x17B3	; 0x8017b3 <ts.3755+0x3>
    6fe8:	88 83       	st	Y, r24
    6fea:	99 83       	std	Y+1, r25	; 0x01
    6fec:	aa 83       	std	Y+2, r26	; 0x02
    6fee:	bb 83       	std	Y+3, r27	; 0x03
    6ff0:	60 91 b0 17 	lds	r22, 0x17B0	; 0x8017b0 <ts.3755>
    6ff4:	70 91 b1 17 	lds	r23, 0x17B1	; 0x8017b1 <ts.3755+0x1>
    6ff8:	80 91 b2 17 	lds	r24, 0x17B2	; 0x8017b2 <ts.3755+0x2>
    6ffc:	90 91 b3 17 	lds	r25, 0x17B3	; 0x8017b3 <ts.3755+0x3>
    7000:	df 91       	pop	r29
    7002:	cf 91       	pop	r28
    7004:	08 95       	ret

00007006 <is_dst>:
    7006:	cf 92       	push	r12
    7008:	df 92       	push	r13
    700a:	ef 92       	push	r14
    700c:	ff 92       	push	r15
    700e:	6b 01       	movw	r12, r22
    7010:	7c 01       	movw	r14, r24
    7012:	05 d4       	rcall	.+2058   	; 0x781e <set_dst>
    7014:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <dst>
    7018:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <dst+0x1>
    701c:	a0 91 7e 1a 	lds	r26, 0x1A7E	; 0x801a7e <dst+0x2>
    7020:	b0 91 7f 1a 	lds	r27, 0x1A7F	; 0x801a7f <dst+0x3>
    7024:	c8 16       	cp	r12, r24
    7026:	d9 06       	cpc	r13, r25
    7028:	ea 06       	cpc	r14, r26
    702a:	fb 06       	cpc	r15, r27
    702c:	88 f0       	brcs	.+34     	; 0x7050 <is_dst+0x4a>
    702e:	81 e0       	ldi	r24, 0x01	; 1
    7030:	90 e0       	ldi	r25, 0x00	; 0
    7032:	40 91 80 1a 	lds	r20, 0x1A80	; 0x801a80 <dst+0x4>
    7036:	50 91 81 1a 	lds	r21, 0x1A81	; 0x801a81 <dst+0x5>
    703a:	60 91 82 1a 	lds	r22, 0x1A82	; 0x801a82 <dst+0x6>
    703e:	70 91 83 1a 	lds	r23, 0x1A83	; 0x801a83 <dst+0x7>
    7042:	4c 15       	cp	r20, r12
    7044:	5d 05       	cpc	r21, r13
    7046:	6e 05       	cpc	r22, r14
    7048:	7f 05       	cpc	r23, r15
    704a:	20 f4       	brcc	.+8      	; 0x7054 <is_dst+0x4e>
    704c:	80 e0       	ldi	r24, 0x00	; 0
    704e:	02 c0       	rjmp	.+4      	; 0x7054 <is_dst+0x4e>
    7050:	80 e0       	ldi	r24, 0x00	; 0
    7052:	90 e0       	ldi	r25, 0x00	; 0
    7054:	ff 90       	pop	r15
    7056:	ef 90       	pop	r14
    7058:	df 90       	pop	r13
    705a:	cf 90       	pop	r12
    705c:	08 95       	ret

0000705e <localtime_r>:
    705e:	4f 92       	push	r4
    7060:	5f 92       	push	r5
    7062:	6f 92       	push	r6
    7064:	7f 92       	push	r7
    7066:	af 92       	push	r10
    7068:	bf 92       	push	r11
    706a:	cf 92       	push	r12
    706c:	df 92       	push	r13
    706e:	ef 92       	push	r14
    7070:	ff 92       	push	r15
    7072:	0f 93       	push	r16
    7074:	1f 93       	push	r17
    7076:	cf 93       	push	r28
    7078:	df 93       	push	r29
    707a:	00 d0       	rcall	.+0      	; 0x707c <localtime_r+0x1e>
    707c:	00 d0       	rcall	.+0      	; 0x707e <localtime_r+0x20>
    707e:	cd b7       	in	r28, 0x3d	; 61
    7080:	de b7       	in	r29, 0x3e	; 62
    7082:	5b 01       	movw	r10, r22
    7084:	fc 01       	movw	r30, r24
    7086:	40 80       	ld	r4, Z
    7088:	51 80       	ldd	r5, Z+1	; 0x01
    708a:	62 80       	ldd	r6, Z+2	; 0x02
    708c:	73 80       	ldd	r7, Z+3	; 0x03
    708e:	ce 01       	movw	r24, r28
    7090:	01 96       	adiw	r24, 0x01	; 1
    7092:	49 df       	rcall	.-366    	; 0x6f26 <gettimezone>
    7094:	a9 81       	ldd	r26, Y+1	; 0x01
    7096:	ba 81       	ldd	r27, Y+2	; 0x02
    7098:	2c e3       	ldi	r18, 0x3C	; 60
    709a:	30 e0       	ldi	r19, 0x00	; 0
    709c:	0e 94 8d e6 	call	0x1cd1a	; 0x1cd1a <__usmulhisi3>
    70a0:	6b 01       	movw	r12, r22
    70a2:	7c 01       	movw	r14, r24
    70a4:	c3 01       	movw	r24, r6
    70a6:	b2 01       	movw	r22, r4
    70a8:	6c 19       	sub	r22, r12
    70aa:	7d 09       	sbc	r23, r13
    70ac:	8e 09       	sbc	r24, r14
    70ae:	9f 09       	sbc	r25, r15
    70b0:	aa df       	rcall	.-172    	; 0x7006 <is_dst>
    70b2:	89 2b       	or	r24, r25
    70b4:	31 f0       	breq	.+12     	; 0x70c2 <localtime_r+0x64>
    70b6:	f0 e1       	ldi	r31, 0x10	; 16
    70b8:	cf 1a       	sub	r12, r31
    70ba:	fe e0       	ldi	r31, 0x0E	; 14
    70bc:	df 0a       	sbc	r13, r31
    70be:	e1 08       	sbc	r14, r1
    70c0:	f1 08       	sbc	r15, r1
    70c2:	85 01       	movw	r16, r10
    70c4:	a7 01       	movw	r20, r14
    70c6:	96 01       	movw	r18, r12
    70c8:	c3 01       	movw	r24, r6
    70ca:	b2 01       	movw	r22, r4
    70cc:	2e de       	rcall	.-932    	; 0x6d2a <time_to_tm>
    70ce:	c5 01       	movw	r24, r10
    70d0:	0f 90       	pop	r0
    70d2:	0f 90       	pop	r0
    70d4:	0f 90       	pop	r0
    70d6:	0f 90       	pop	r0
    70d8:	df 91       	pop	r29
    70da:	cf 91       	pop	r28
    70dc:	1f 91       	pop	r17
    70de:	0f 91       	pop	r16
    70e0:	ff 90       	pop	r15
    70e2:	ef 90       	pop	r14
    70e4:	df 90       	pop	r13
    70e6:	cf 90       	pop	r12
    70e8:	bf 90       	pop	r11
    70ea:	af 90       	pop	r10
    70ec:	7f 90       	pop	r7
    70ee:	6f 90       	pop	r6
    70f0:	5f 90       	pop	r5
    70f2:	4f 90       	pop	r4
    70f4:	08 95       	ret

000070f6 <localtime>:
    70f6:	68 eb       	ldi	r22, 0xB8	; 184
    70f8:	77 e1       	ldi	r23, 0x17	; 23
    70fa:	b1 cf       	rjmp	.-158    	; 0x705e <localtime_r>
    70fc:	08 95       	ret

000070fe <normalize>:
    70fe:	aa e0       	ldi	r26, 0x0A	; 10
    7100:	b0 e0       	ldi	r27, 0x00	; 0
    7102:	e5 e8       	ldi	r30, 0x85	; 133
    7104:	f8 e3       	ldi	r31, 0x38	; 56
    7106:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    710a:	7c 01       	movw	r14, r24
    710c:	7a 87       	std	Y+10, r23	; 0x0a
    710e:	69 87       	std	Y+9, r22	; 0x09
    7110:	f7 01       	movw	r30, r14
    7112:	80 81       	ld	r24, Z
    7114:	91 81       	ldd	r25, Z+1	; 0x01
    7116:	8c 33       	cpi	r24, 0x3C	; 60
    7118:	91 05       	cpc	r25, r1
    711a:	5c f0       	brlt	.+22     	; 0x7132 <normalize+0x34>
    711c:	f7 01       	movw	r30, r14
    711e:	22 81       	ldd	r18, Z+2	; 0x02
    7120:	33 81       	ldd	r19, Z+3	; 0x03
    7122:	2f 5f       	subi	r18, 0xFF	; 255
    7124:	3f 4f       	sbci	r19, 0xFF	; 255
    7126:	33 83       	std	Z+3, r19	; 0x03
    7128:	22 83       	std	Z+2, r18	; 0x02
    712a:	cc 97       	sbiw	r24, 0x3c	; 60
    712c:	91 83       	std	Z+1, r25	; 0x01
    712e:	80 83       	st	Z, r24
    7130:	ef cf       	rjmp	.-34     	; 0x7110 <normalize+0x12>
    7132:	f7 01       	movw	r30, r14
    7134:	01 90       	ld	r0, Z+
    7136:	f0 81       	ld	r31, Z
    7138:	e0 2d       	mov	r30, r0
    713a:	fe 83       	std	Y+6, r31	; 0x06
    713c:	ed 83       	std	Y+5, r30	; 0x05
    713e:	f7 ff       	sbrs	r31, 7
    7140:	0d c0       	rjmp	.+26     	; 0x715c <normalize+0x5e>
    7142:	f7 01       	movw	r30, r14
    7144:	82 81       	ldd	r24, Z+2	; 0x02
    7146:	93 81       	ldd	r25, Z+3	; 0x03
    7148:	01 97       	sbiw	r24, 0x01	; 1
    714a:	93 83       	std	Z+3, r25	; 0x03
    714c:	82 83       	std	Z+2, r24	; 0x02
    714e:	6d 81       	ldd	r22, Y+5	; 0x05
    7150:	7e 81       	ldd	r23, Y+6	; 0x06
    7152:	64 5c       	subi	r22, 0xC4	; 196
    7154:	7f 4f       	sbci	r23, 0xFF	; 255
    7156:	71 83       	std	Z+1, r23	; 0x01
    7158:	60 83       	st	Z, r22
    715a:	eb cf       	rjmp	.-42     	; 0x7132 <normalize+0x34>
    715c:	f7 01       	movw	r30, r14
    715e:	82 81       	ldd	r24, Z+2	; 0x02
    7160:	93 81       	ldd	r25, Z+3	; 0x03
    7162:	8c 33       	cpi	r24, 0x3C	; 60
    7164:	91 05       	cpc	r25, r1
    7166:	5c f0       	brlt	.+22     	; 0x717e <normalize+0x80>
    7168:	f7 01       	movw	r30, r14
    716a:	24 81       	ldd	r18, Z+4	; 0x04
    716c:	35 81       	ldd	r19, Z+5	; 0x05
    716e:	2f 5f       	subi	r18, 0xFF	; 255
    7170:	3f 4f       	sbci	r19, 0xFF	; 255
    7172:	35 83       	std	Z+5, r19	; 0x05
    7174:	24 83       	std	Z+4, r18	; 0x04
    7176:	cc 97       	sbiw	r24, 0x3c	; 60
    7178:	93 83       	std	Z+3, r25	; 0x03
    717a:	82 83       	std	Z+2, r24	; 0x02
    717c:	ef cf       	rjmp	.-34     	; 0x715c <normalize+0x5e>
    717e:	f7 01       	movw	r30, r14
    7180:	22 80       	ldd	r2, Z+2	; 0x02
    7182:	33 80       	ldd	r3, Z+3	; 0x03
    7184:	37 fe       	sbrs	r3, 7
    7186:	0d c0       	rjmp	.+26     	; 0x71a2 <normalize+0xa4>
    7188:	f7 01       	movw	r30, r14
    718a:	84 81       	ldd	r24, Z+4	; 0x04
    718c:	95 81       	ldd	r25, Z+5	; 0x05
    718e:	01 97       	sbiw	r24, 0x01	; 1
    7190:	95 83       	std	Z+5, r25	; 0x05
    7192:	84 83       	std	Z+4, r24	; 0x04
    7194:	fc e3       	ldi	r31, 0x3C	; 60
    7196:	2f 0e       	add	r2, r31
    7198:	31 1c       	adc	r3, r1
    719a:	f7 01       	movw	r30, r14
    719c:	33 82       	std	Z+3, r3	; 0x03
    719e:	22 82       	std	Z+2, r2	; 0x02
    71a0:	ee cf       	rjmp	.-36     	; 0x717e <normalize+0x80>
    71a2:	f7 01       	movw	r30, r14
    71a4:	84 81       	ldd	r24, Z+4	; 0x04
    71a6:	95 81       	ldd	r25, Z+5	; 0x05
    71a8:	88 31       	cpi	r24, 0x18	; 24
    71aa:	91 05       	cpc	r25, r1
    71ac:	5c f0       	brlt	.+22     	; 0x71c4 <normalize+0xc6>
    71ae:	f7 01       	movw	r30, r14
    71b0:	26 81       	ldd	r18, Z+6	; 0x06
    71b2:	37 81       	ldd	r19, Z+7	; 0x07
    71b4:	2f 5f       	subi	r18, 0xFF	; 255
    71b6:	3f 4f       	sbci	r19, 0xFF	; 255
    71b8:	37 83       	std	Z+7, r19	; 0x07
    71ba:	26 83       	std	Z+6, r18	; 0x06
    71bc:	48 97       	sbiw	r24, 0x18	; 24
    71be:	95 83       	std	Z+5, r25	; 0x05
    71c0:	84 83       	std	Z+4, r24	; 0x04
    71c2:	ef cf       	rjmp	.-34     	; 0x71a2 <normalize+0xa4>
    71c4:	f7 01       	movw	r30, r14
    71c6:	04 81       	ldd	r16, Z+4	; 0x04
    71c8:	15 81       	ldd	r17, Z+5	; 0x05
    71ca:	17 ff       	sbrs	r17, 7
    71cc:	0b c0       	rjmp	.+22     	; 0x71e4 <normalize+0xe6>
    71ce:	f7 01       	movw	r30, r14
    71d0:	86 81       	ldd	r24, Z+6	; 0x06
    71d2:	97 81       	ldd	r25, Z+7	; 0x07
    71d4:	01 97       	sbiw	r24, 0x01	; 1
    71d6:	97 83       	std	Z+7, r25	; 0x07
    71d8:	86 83       	std	Z+6, r24	; 0x06
    71da:	08 5e       	subi	r16, 0xE8	; 232
    71dc:	1f 4f       	sbci	r17, 0xFF	; 255
    71de:	15 83       	std	Z+5, r17	; 0x05
    71e0:	04 83       	std	Z+4, r16	; 0x04
    71e2:	f0 cf       	rjmp	.-32     	; 0x71c4 <normalize+0xc6>
    71e4:	f7 01       	movw	r30, r14
    71e6:	80 85       	ldd	r24, Z+8	; 0x08
    71e8:	91 85       	ldd	r25, Z+9	; 0x09
    71ea:	8c 30       	cpi	r24, 0x0C	; 12
    71ec:	91 05       	cpc	r25, r1
    71ee:	5c f0       	brlt	.+22     	; 0x7206 <normalize+0x108>
    71f0:	f7 01       	movw	r30, r14
    71f2:	22 85       	ldd	r18, Z+10	; 0x0a
    71f4:	33 85       	ldd	r19, Z+11	; 0x0b
    71f6:	2f 5f       	subi	r18, 0xFF	; 255
    71f8:	3f 4f       	sbci	r19, 0xFF	; 255
    71fa:	33 87       	std	Z+11, r19	; 0x0b
    71fc:	22 87       	std	Z+10, r18	; 0x0a
    71fe:	0c 97       	sbiw	r24, 0x0c	; 12
    7200:	91 87       	std	Z+9, r25	; 0x09
    7202:	80 87       	std	Z+8, r24	; 0x08
    7204:	ef cf       	rjmp	.-34     	; 0x71e4 <normalize+0xe6>
    7206:	f7 01       	movw	r30, r14
    7208:	80 85       	ldd	r24, Z+8	; 0x08
    720a:	91 85       	ldd	r25, Z+9	; 0x09
    720c:	97 ff       	sbrs	r25, 7
    720e:	2d c0       	rjmp	.+90     	; 0x726a <normalize+0x16c>
    7210:	f7 01       	movw	r30, r14
    7212:	22 85       	ldd	r18, Z+10	; 0x0a
    7214:	33 85       	ldd	r19, Z+11	; 0x0b
    7216:	21 50       	subi	r18, 0x01	; 1
    7218:	31 09       	sbc	r19, r1
    721a:	33 87       	std	Z+11, r19	; 0x0b
    721c:	22 87       	std	Z+10, r18	; 0x0a
    721e:	0c 96       	adiw	r24, 0x0c	; 12
    7220:	91 87       	std	Z+9, r25	; 0x09
    7222:	80 87       	std	Z+8, r24	; 0x08
    7224:	f0 cf       	rjmp	.-32     	; 0x7206 <normalize+0x108>
    7226:	f7 01       	movw	r30, r14
    7228:	c6 80       	ldd	r12, Z+6	; 0x06
    722a:	d7 80       	ldd	r13, Z+7	; 0x07
    722c:	a0 84       	ldd	r10, Z+8	; 0x08
    722e:	b1 84       	ldd	r11, Z+9	; 0x09
    7230:	b4 01       	movw	r22, r8
    7232:	c5 01       	movw	r24, r10
    7234:	59 dd       	rcall	.-1358   	; 0x6ce8 <Days_Per_Month>
    7236:	8c 15       	cp	r24, r12
    7238:	9d 05       	cpc	r25, r13
    723a:	84 f5       	brge	.+96     	; 0x729c <normalize+0x19e>
    723c:	c8 1a       	sub	r12, r24
    723e:	d9 0a       	sbc	r13, r25
    7240:	f7 01       	movw	r30, r14
    7242:	d7 82       	std	Z+7, r13	; 0x07
    7244:	c6 82       	std	Z+6, r12	; 0x06
    7246:	c5 01       	movw	r24, r10
    7248:	01 96       	adiw	r24, 0x01	; 1
    724a:	91 87       	std	Z+9, r25	; 0x09
    724c:	80 87       	std	Z+8, r24	; 0x08
    724e:	0c 97       	sbiw	r24, 0x0c	; 12
    7250:	54 f3       	brlt	.-44     	; 0x7226 <normalize+0x128>
    7252:	fb e0       	ldi	r31, 0x0B	; 11
    7254:	af 1a       	sub	r10, r31
    7256:	b1 08       	sbc	r11, r1
    7258:	f7 01       	movw	r30, r14
    725a:	b1 86       	std	Z+9, r11	; 0x09
    725c:	a0 86       	std	Z+8, r10	; 0x08
    725e:	ff ef       	ldi	r31, 0xFF	; 255
    7260:	8f 1a       	sub	r8, r31
    7262:	9f 0a       	sbc	r9, r31
    7264:	f7 01       	movw	r30, r14
    7266:	93 86       	std	Z+11, r9	; 0x0b
    7268:	82 86       	std	Z+10, r8	; 0x0a
    726a:	f7 01       	movw	r30, r14
    726c:	82 84       	ldd	r8, Z+10	; 0x0a
    726e:	93 84       	ldd	r9, Z+11	; 0x0b
    7270:	da cf       	rjmp	.-76     	; 0x7226 <normalize+0x128>
    7272:	f7 01       	movw	r30, r14
    7274:	80 85       	ldd	r24, Z+8	; 0x08
    7276:	91 85       	ldd	r25, Z+9	; 0x09
    7278:	9c 01       	movw	r18, r24
    727a:	21 50       	subi	r18, 0x01	; 1
    727c:	31 09       	sbc	r19, r1
    727e:	37 fd       	sbrc	r19, 7
    7280:	16 c0       	rjmp	.+44     	; 0x72ae <normalize+0x1b0>
    7282:	31 87       	std	Z+9, r19	; 0x09
    7284:	20 87       	std	Z+8, r18	; 0x08
    7286:	f7 01       	movw	r30, r14
    7288:	62 85       	ldd	r22, Z+10	; 0x0a
    728a:	73 85       	ldd	r23, Z+11	; 0x0b
    728c:	80 85       	ldd	r24, Z+8	; 0x08
    728e:	91 85       	ldd	r25, Z+9	; 0x09
    7290:	2b dd       	rcall	.-1450   	; 0x6ce8 <Days_Per_Month>
    7292:	88 0d       	add	r24, r8
    7294:	99 1d       	adc	r25, r9
    7296:	f7 01       	movw	r30, r14
    7298:	97 83       	std	Z+7, r25	; 0x07
    729a:	86 83       	std	Z+6, r24	; 0x06
    729c:	f7 01       	movw	r30, r14
    729e:	86 80       	ldd	r8, Z+6	; 0x06
    72a0:	97 80       	ldd	r9, Z+7	; 0x07
    72a2:	a2 84       	ldd	r10, Z+10	; 0x0a
    72a4:	b3 84       	ldd	r11, Z+11	; 0x0b
    72a6:	18 14       	cp	r1, r8
    72a8:	19 04       	cpc	r1, r9
    72aa:	1c f7       	brge	.-58     	; 0x7272 <normalize+0x174>
    72ac:	0b c0       	rjmp	.+22     	; 0x72c4 <normalize+0x1c6>
    72ae:	0b 96       	adiw	r24, 0x0b	; 11
    72b0:	f7 01       	movw	r30, r14
    72b2:	91 87       	std	Z+9, r25	; 0x09
    72b4:	80 87       	std	Z+8, r24	; 0x08
    72b6:	f1 e0       	ldi	r31, 0x01	; 1
    72b8:	af 1a       	sub	r10, r31
    72ba:	b1 08       	sbc	r11, r1
    72bc:	f7 01       	movw	r30, r14
    72be:	b3 86       	std	Z+11, r11	; 0x0b
    72c0:	a2 86       	std	Z+10, r10	; 0x0a
    72c2:	e1 cf       	rjmp	.-62     	; 0x7286 <normalize+0x188>
    72c4:	a5 01       	movw	r20, r10
    72c6:	44 59       	subi	r20, 0x94	; 148
    72c8:	58 4f       	sbci	r21, 0xF8	; 248
    72ca:	58 87       	std	Y+8, r21	; 0x08
    72cc:	4f 83       	std	Y+7, r20	; 0x07
    72ce:	35 01       	movw	r6, r10
    72d0:	56 e4       	ldi	r21, 0x46	; 70
    72d2:	65 1a       	sub	r6, r21
    72d4:	71 08       	sbc	r7, r1
    72d6:	89 e8       	ldi	r24, 0x89	; 137
    72d8:	68 16       	cp	r6, r24
    72da:	71 04       	cpc	r7, r1
    72dc:	08 f0       	brcs	.+2      	; 0x72e0 <normalize+0x1e2>
    72de:	9b c0       	rjmp	.+310    	; 0x7416 <normalize+0x318>
    72e0:	c0 84       	ldd	r12, Z+8	; 0x08
    72e2:	d1 84       	ldd	r13, Z+9	; 0x09
    72e4:	9c e0       	ldi	r25, 0x0C	; 12
    72e6:	c9 16       	cp	r12, r25
    72e8:	d1 04       	cpc	r13, r1
    72ea:	08 f0       	brcs	.+2      	; 0x72ee <normalize+0x1f0>
    72ec:	94 c0       	rjmp	.+296    	; 0x7416 <normalize+0x318>
    72ee:	24 01       	movw	r4, r8
    72f0:	e1 e0       	ldi	r30, 0x01	; 1
    72f2:	4e 1a       	sub	r4, r30
    72f4:	51 08       	sbc	r5, r1
    72f6:	6f 81       	ldd	r22, Y+7	; 0x07
    72f8:	78 85       	ldd	r23, Y+8	; 0x08
    72fa:	c6 01       	movw	r24, r12
    72fc:	f5 dc       	rcall	.-1558   	; 0x6ce8 <Days_Per_Month>
    72fe:	48 16       	cp	r4, r24
    7300:	59 06       	cpc	r5, r25
    7302:	0c f0       	brlt	.+2      	; 0x7306 <normalize+0x208>
    7304:	88 c0       	rjmp	.+272    	; 0x7416 <normalize+0x318>
    7306:	08 31       	cpi	r16, 0x18	; 24
    7308:	11 05       	cpc	r17, r1
    730a:	0c f0       	brlt	.+2      	; 0x730e <normalize+0x210>
    730c:	84 c0       	rjmp	.+264    	; 0x7416 <normalize+0x318>
    730e:	fc e3       	ldi	r31, 0x3C	; 60
    7310:	2f 16       	cp	r2, r31
    7312:	31 04       	cpc	r3, r1
    7314:	0c f0       	brlt	.+2      	; 0x7318 <normalize+0x21a>
    7316:	7f c0       	rjmp	.+254    	; 0x7416 <normalize+0x318>
    7318:	4d 81       	ldd	r20, Y+5	; 0x05
    731a:	5e 81       	ldd	r21, Y+6	; 0x06
    731c:	4c 33       	cpi	r20, 0x3C	; 60
    731e:	51 05       	cpc	r21, r1
    7320:	0c f0       	brlt	.+2      	; 0x7324 <normalize+0x226>
    7322:	79 c0       	rjmp	.+242    	; 0x7416 <normalize+0x318>
    7324:	2d e6       	ldi	r18, 0x6D	; 109
    7326:	31 e0       	ldi	r19, 0x01	; 1
    7328:	d3 01       	movw	r26, r6
    732a:	0e 94 8d e6 	call	0x1cd1a	; 0x1cd1a <__usmulhisi3>
    732e:	f6 01       	movw	r30, r12
    7330:	ee 0f       	add	r30, r30
    7332:	ff 1f       	adc	r31, r31
    7334:	e0 56       	subi	r30, 0x60	; 96
    7336:	fc 4f       	sbci	r31, 0xFC	; 252
    7338:	20 81       	ld	r18, Z
    733a:	31 81       	ldd	r19, Z+1	; 0x01
    733c:	dc 01       	movw	r26, r24
    733e:	cb 01       	movw	r24, r22
    7340:	82 0f       	add	r24, r18
    7342:	93 1f       	adc	r25, r19
    7344:	a1 1d       	adc	r26, r1
    7346:	b1 1d       	adc	r27, r1
    7348:	05 2c       	mov	r0, r5
    734a:	00 0c       	add	r0, r0
    734c:	66 08       	sbc	r6, r6
    734e:	77 08       	sbc	r7, r7
    7350:	48 0e       	add	r4, r24
    7352:	59 1e       	adc	r5, r25
    7354:	6a 1e       	adc	r6, r26
    7356:	7b 1e       	adc	r7, r27
    7358:	1a 14       	cp	r1, r10
    735a:	1b 04       	cpc	r1, r11
    735c:	1c f4       	brge	.+6      	; 0x7364 <normalize+0x266>
    735e:	51 e0       	ldi	r21, 0x01	; 1
    7360:	a5 1a       	sub	r10, r21
    7362:	b1 08       	sbc	r11, r1
    7364:	45 01       	movw	r8, r10
    7366:	95 94       	asr	r9
    7368:	87 94       	ror	r8
    736a:	95 94       	asr	r9
    736c:	87 94       	ror	r8
    736e:	88 ec       	ldi	r24, 0xC8	; 200
    7370:	a8 16       	cp	r10, r24
    7372:	b1 04       	cpc	r11, r1
    7374:	1c f0       	brlt	.+6      	; 0x737c <normalize+0x27e>
    7376:	91 e0       	ldi	r25, 0x01	; 1
    7378:	89 1a       	sub	r8, r25
    737a:	91 08       	sbc	r9, r1
    737c:	09 2c       	mov	r0, r9
    737e:	00 0c       	add	r0, r0
    7380:	aa 08       	sbc	r10, r10
    7382:	bb 08       	sbc	r11, r11
    7384:	84 0c       	add	r8, r4
    7386:	95 1c       	adc	r9, r5
    7388:	a6 1c       	adc	r10, r6
    738a:	b7 1c       	adc	r11, r7
    738c:	24 01       	movw	r4, r8
    738e:	35 01       	movw	r6, r10
    7390:	e1 e1       	ldi	r30, 0x11	; 17
    7392:	4e 1a       	sub	r4, r30
    7394:	51 08       	sbc	r5, r1
    7396:	61 08       	sbc	r6, r1
    7398:	71 08       	sbc	r7, r1
    739a:	f2 e0       	ldi	r31, 0x02	; 2
    739c:	cf 16       	cp	r12, r31
    739e:	d1 04       	cpc	r13, r1
    73a0:	64 f0       	brlt	.+24     	; 0x73ba <normalize+0x2bc>
    73a2:	8f 81       	ldd	r24, Y+7	; 0x07
    73a4:	98 85       	ldd	r25, Y+8	; 0x08
    73a6:	7b dc       	rcall	.-1802   	; 0x6c9e <IS_Leap>
    73a8:	89 2b       	or	r24, r25
    73aa:	39 f0       	breq	.+14     	; 0x73ba <normalize+0x2bc>
    73ac:	24 01       	movw	r4, r8
    73ae:	35 01       	movw	r6, r10
    73b0:	40 e1       	ldi	r20, 0x10	; 16
    73b2:	44 1a       	sub	r4, r20
    73b4:	51 08       	sbc	r5, r1
    73b6:	61 08       	sbc	r6, r1
    73b8:	71 08       	sbc	r7, r1
    73ba:	a8 e1       	ldi	r26, 0x18	; 24
    73bc:	b0 e0       	ldi	r27, 0x00	; 0
    73be:	a3 01       	movw	r20, r6
    73c0:	92 01       	movw	r18, r4
    73c2:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__muluhisi3>
    73c6:	01 2e       	mov	r0, r17
    73c8:	00 0c       	add	r0, r0
    73ca:	22 0b       	sbc	r18, r18
    73cc:	33 0b       	sbc	r19, r19
    73ce:	a9 01       	movw	r20, r18
    73d0:	98 01       	movw	r18, r16
    73d2:	26 0f       	add	r18, r22
    73d4:	37 1f       	adc	r19, r23
    73d6:	48 1f       	adc	r20, r24
    73d8:	59 1f       	adc	r21, r25
    73da:	ac e3       	ldi	r26, 0x3C	; 60
    73dc:	b0 e0       	ldi	r27, 0x00	; 0
    73de:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__muluhisi3>
    73e2:	81 01       	movw	r16, r2
    73e4:	03 2c       	mov	r0, r3
    73e6:	00 0c       	add	r0, r0
    73e8:	22 0b       	sbc	r18, r18
    73ea:	33 0b       	sbc	r19, r19
    73ec:	a9 01       	movw	r20, r18
    73ee:	98 01       	movw	r18, r16
    73f0:	26 0f       	add	r18, r22
    73f2:	37 1f       	adc	r19, r23
    73f4:	48 1f       	adc	r20, r24
    73f6:	59 1f       	adc	r21, r25
    73f8:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__muluhisi3>
    73fc:	ed 81       	ldd	r30, Y+5	; 0x05
    73fe:	fe 81       	ldd	r31, Y+6	; 0x06
    7400:	8f 01       	movw	r16, r30
    7402:	ff 0f       	add	r31, r31
    7404:	22 0b       	sbc	r18, r18
    7406:	33 0b       	sbc	r19, r19
    7408:	48 01       	movw	r8, r16
    740a:	59 01       	movw	r10, r18
    740c:	86 0e       	add	r8, r22
    740e:	97 1e       	adc	r9, r23
    7410:	a8 1e       	adc	r10, r24
    7412:	b9 1e       	adc	r11, r25
    7414:	04 c0       	rjmp	.+8      	; 0x741e <normalize+0x320>
    7416:	88 24       	eor	r8, r8
    7418:	8a 94       	dec	r8
    741a:	98 2c       	mov	r9, r8
    741c:	54 01       	movw	r10, r8
    741e:	49 85       	ldd	r20, Y+9	; 0x09
    7420:	5a 85       	ldd	r21, Y+10	; 0x0a
    7422:	45 2b       	or	r20, r21
    7424:	e9 f0       	breq	.+58     	; 0x7460 <normalize+0x362>
    7426:	ce 01       	movw	r24, r28
    7428:	01 96       	adiw	r24, 0x01	; 1
    742a:	7d dd       	rcall	.-1286   	; 0x6f26 <gettimezone>
    742c:	a9 81       	ldd	r26, Y+1	; 0x01
    742e:	ba 81       	ldd	r27, Y+2	; 0x02
    7430:	2c e3       	ldi	r18, 0x3C	; 60
    7432:	30 e0       	ldi	r19, 0x00	; 0
    7434:	0e 94 8d e6 	call	0x1cd1a	; 0x1cd1a <__usmulhisi3>
    7438:	2b 01       	movw	r4, r22
    743a:	3c 01       	movw	r6, r24
    743c:	c5 01       	movw	r24, r10
    743e:	b4 01       	movw	r22, r8
    7440:	e2 dd       	rcall	.-1084   	; 0x7006 <is_dst>
    7442:	89 2b       	or	r24, r25
    7444:	51 f0       	breq	.+20     	; 0x745a <normalize+0x35c>
    7446:	50 e1       	ldi	r21, 0x10	; 16
    7448:	45 1a       	sub	r4, r21
    744a:	5e e0       	ldi	r21, 0x0E	; 14
    744c:	55 0a       	sbc	r5, r21
    744e:	61 08       	sbc	r6, r1
    7450:	71 08       	sbc	r7, r1
    7452:	cc 24       	eor	r12, r12
    7454:	c3 94       	inc	r12
    7456:	d1 2c       	mov	r13, r1
    7458:	08 c0       	rjmp	.+16     	; 0x746a <normalize+0x36c>
    745a:	c1 2c       	mov	r12, r1
    745c:	d1 2c       	mov	r13, r1
    745e:	05 c0       	rjmp	.+10     	; 0x746a <normalize+0x36c>
    7460:	c1 2c       	mov	r12, r1
    7462:	d1 2c       	mov	r13, r1
    7464:	41 2c       	mov	r4, r1
    7466:	51 2c       	mov	r5, r1
    7468:	32 01       	movw	r6, r4
    746a:	87 01       	movw	r16, r14
    746c:	a3 01       	movw	r20, r6
    746e:	92 01       	movw	r18, r4
    7470:	c5 01       	movw	r24, r10
    7472:	b4 01       	movw	r22, r8
    7474:	5a dc       	rcall	.-1868   	; 0x6d2a <time_to_tm>
    7476:	c1 14       	cp	r12, r1
    7478:	d1 04       	cpc	r13, r1
    747a:	29 f0       	breq	.+10     	; 0x7486 <normalize+0x388>
    747c:	21 e0       	ldi	r18, 0x01	; 1
    747e:	30 e0       	ldi	r19, 0x00	; 0
    7480:	f7 01       	movw	r30, r14
    7482:	31 8b       	std	Z+17, r19	; 0x11
    7484:	20 8b       	std	Z+16, r18	; 0x10
    7486:	2a 96       	adiw	r28, 0x0a	; 10
    7488:	e2 e1       	ldi	r30, 0x12	; 18
    748a:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0000748e <timegm>:
    748e:	60 e0       	ldi	r22, 0x00	; 0
    7490:	70 e0       	ldi	r23, 0x00	; 0
    7492:	35 ce       	rjmp	.-918    	; 0x70fe <normalize>
    7494:	08 95       	ret

00007496 <setdate_r>:
    7496:	cf 92       	push	r12
    7498:	df 92       	push	r13
    749a:	ef 92       	push	r14
    749c:	ff 92       	push	r15
    749e:	cf 93       	push	r28
    74a0:	df 93       	push	r29
    74a2:	cd b7       	in	r28, 0x3d	; 61
    74a4:	de b7       	in	r29, 0x3e	; 62
    74a6:	a5 97       	sbiw	r28, 0x25	; 37
    74a8:	0f b6       	in	r0, 0x3f	; 63
    74aa:	f8 94       	cli
    74ac:	de bf       	out	0x3e, r29	; 62
    74ae:	0f be       	out	0x3f, r0	; 63
    74b0:	cd bf       	out	0x3d, r28	; 61
    74b2:	9d a3       	std	Y+37, r25	; 0x25
    74b4:	8c a3       	std	Y+36, r24	; 0x24
    74b6:	1f 82       	std	Y+7, r1	; 0x07
    74b8:	1e 82       	std	Y+6, r1	; 0x06
    74ba:	19 86       	std	Y+9, r1	; 0x09
    74bc:	18 86       	std	Y+8, r1	; 0x08
    74be:	1b 86       	std	Y+11, r1	; 0x0b
    74c0:	1a 86       	std	Y+10, r1	; 0x0a
    74c2:	1d 86       	std	Y+13, r1	; 0x0d
    74c4:	1c 86       	std	Y+12, r1	; 0x0c
    74c6:	1f 86       	std	Y+15, r1	; 0x0f
    74c8:	1e 86       	std	Y+14, r1	; 0x0e
    74ca:	19 8a       	std	Y+17, r1	; 0x11
    74cc:	18 8a       	std	Y+16, r1	; 0x10
    74ce:	8c a1       	ldd	r24, Y+36	; 0x24
    74d0:	9d a1       	ldd	r25, Y+37	; 0x25
    74d2:	fc 01       	movw	r30, r24
    74d4:	20 81       	ld	r18, Z
    74d6:	20 32       	cpi	r18, 0x20	; 32
    74d8:	21 f4       	brne	.+8      	; 0x74e2 <setdate_r+0x4c>
    74da:	01 96       	adiw	r24, 0x01	; 1
    74dc:	9d a3       	std	Y+37, r25	; 0x25
    74de:	8c a3       	std	Y+36, r24	; 0x24
    74e0:	f6 cf       	rjmp	.-20     	; 0x74ce <setdate_r+0x38>
    74e2:	4a e0       	ldi	r20, 0x0A	; 10
    74e4:	50 e0       	ldi	r21, 0x00	; 0
    74e6:	be 01       	movw	r22, r28
    74e8:	6c 5d       	subi	r22, 0xDC	; 220
    74ea:	7f 4f       	sbci	r23, 0xFF	; 255
    74ec:	0e 94 1b 47 	call	0x8e36	; 0x8e36 <strtol>
    74f0:	79 8b       	std	Y+17, r23	; 0x11
    74f2:	68 8b       	std	Y+16, r22	; 0x10
    74f4:	8c a1       	ldd	r24, Y+36	; 0x24
    74f6:	9d a1       	ldd	r25, Y+37	; 0x25
    74f8:	fc 01       	movw	r30, r24
    74fa:	20 81       	ld	r18, Z
    74fc:	20 32       	cpi	r18, 0x20	; 32
    74fe:	21 f4       	brne	.+8      	; 0x7508 <setdate_r+0x72>
    7500:	01 96       	adiw	r24, 0x01	; 1
    7502:	9d a3       	std	Y+37, r25	; 0x25
    7504:	8c a3       	std	Y+36, r24	; 0x24
    7506:	f6 cf       	rjmp	.-20     	; 0x74f4 <setdate_r+0x5e>
    7508:	4a e0       	ldi	r20, 0x0A	; 10
    750a:	50 e0       	ldi	r21, 0x00	; 0
    750c:	be 01       	movw	r22, r28
    750e:	6c 5d       	subi	r22, 0xDC	; 220
    7510:	7f 4f       	sbci	r23, 0xFF	; 255
    7512:	0e 94 1b 47 	call	0x8e36	; 0x8e36 <strtol>
    7516:	7f 87       	std	Y+15, r23	; 0x0f
    7518:	6e 87       	std	Y+14, r22	; 0x0e
    751a:	8c a1       	ldd	r24, Y+36	; 0x24
    751c:	9d a1       	ldd	r25, Y+37	; 0x25
    751e:	fc 01       	movw	r30, r24
    7520:	20 81       	ld	r18, Z
    7522:	20 32       	cpi	r18, 0x20	; 32
    7524:	21 f4       	brne	.+8      	; 0x752e <setdate_r+0x98>
    7526:	01 96       	adiw	r24, 0x01	; 1
    7528:	9d a3       	std	Y+37, r25	; 0x25
    752a:	8c a3       	std	Y+36, r24	; 0x24
    752c:	f6 cf       	rjmp	.-20     	; 0x751a <setdate_r+0x84>
    752e:	4a e0       	ldi	r20, 0x0A	; 10
    7530:	50 e0       	ldi	r21, 0x00	; 0
    7532:	be 01       	movw	r22, r28
    7534:	6c 5d       	subi	r22, 0xDC	; 220
    7536:	7f 4f       	sbci	r23, 0xFF	; 255
    7538:	0e 94 1b 47 	call	0x8e36	; 0x8e36 <strtol>
    753c:	7d 87       	std	Y+13, r23	; 0x0d
    753e:	6c 87       	std	Y+12, r22	; 0x0c
    7540:	8c a1       	ldd	r24, Y+36	; 0x24
    7542:	9d a1       	ldd	r25, Y+37	; 0x25
    7544:	fc 01       	movw	r30, r24
    7546:	20 81       	ld	r18, Z
    7548:	20 32       	cpi	r18, 0x20	; 32
    754a:	21 f4       	brne	.+8      	; 0x7554 <setdate_r+0xbe>
    754c:	01 96       	adiw	r24, 0x01	; 1
    754e:	9d a3       	std	Y+37, r25	; 0x25
    7550:	8c a3       	std	Y+36, r24	; 0x24
    7552:	f6 cf       	rjmp	.-20     	; 0x7540 <setdate_r+0xaa>
    7554:	4a e0       	ldi	r20, 0x0A	; 10
    7556:	50 e0       	ldi	r21, 0x00	; 0
    7558:	be 01       	movw	r22, r28
    755a:	6c 5d       	subi	r22, 0xDC	; 220
    755c:	7f 4f       	sbci	r23, 0xFF	; 255
    755e:	0e 94 1b 47 	call	0x8e36	; 0x8e36 <strtol>
    7562:	7b 87       	std	Y+11, r23	; 0x0b
    7564:	6a 87       	std	Y+10, r22	; 0x0a
    7566:	ec a1       	ldd	r30, Y+36	; 0x24
    7568:	fd a1       	ldd	r31, Y+37	; 0x25
    756a:	80 81       	ld	r24, Z
    756c:	88 23       	and	r24, r24
    756e:	39 f0       	breq	.+14     	; 0x757e <setdate_r+0xe8>
    7570:	80 32       	cpi	r24, 0x20	; 32
    7572:	11 f0       	breq	.+4      	; 0x7578 <setdate_r+0xe2>
    7574:	8a 33       	cpi	r24, 0x3A	; 58
    7576:	19 f4       	brne	.+6      	; 0x757e <setdate_r+0xe8>
    7578:	31 96       	adiw	r30, 0x01	; 1
    757a:	fd a3       	std	Y+37, r31	; 0x25
    757c:	ec a3       	std	Y+36, r30	; 0x24
    757e:	4a e0       	ldi	r20, 0x0A	; 10
    7580:	50 e0       	ldi	r21, 0x00	; 0
    7582:	be 01       	movw	r22, r28
    7584:	6c 5d       	subi	r22, 0xDC	; 220
    7586:	7f 4f       	sbci	r23, 0xFF	; 255
    7588:	8c a1       	ldd	r24, Y+36	; 0x24
    758a:	9d a1       	ldd	r25, Y+37	; 0x25
    758c:	0e 94 1b 47 	call	0x8e36	; 0x8e36 <strtol>
    7590:	79 87       	std	Y+9, r23	; 0x09
    7592:	68 87       	std	Y+8, r22	; 0x08
    7594:	ec a1       	ldd	r30, Y+36	; 0x24
    7596:	fd a1       	ldd	r31, Y+37	; 0x25
    7598:	80 81       	ld	r24, Z
    759a:	88 23       	and	r24, r24
    759c:	39 f0       	breq	.+14     	; 0x75ac <setdate_r+0x116>
    759e:	80 32       	cpi	r24, 0x20	; 32
    75a0:	11 f0       	breq	.+4      	; 0x75a6 <setdate_r+0x110>
    75a2:	8a 33       	cpi	r24, 0x3A	; 58
    75a4:	19 f4       	brne	.+6      	; 0x75ac <setdate_r+0x116>
    75a6:	31 96       	adiw	r30, 0x01	; 1
    75a8:	fd a3       	std	Y+37, r31	; 0x25
    75aa:	ec a3       	std	Y+36, r30	; 0x24
    75ac:	4a e0       	ldi	r20, 0x0A	; 10
    75ae:	50 e0       	ldi	r21, 0x00	; 0
    75b0:	be 01       	movw	r22, r28
    75b2:	6c 5d       	subi	r22, 0xDC	; 220
    75b4:	7f 4f       	sbci	r23, 0xFF	; 255
    75b6:	8c a1       	ldd	r24, Y+36	; 0x24
    75b8:	9d a1       	ldd	r25, Y+37	; 0x25
    75ba:	0e 94 1b 47 	call	0x8e36	; 0x8e36 <strtol>
    75be:	7f 83       	std	Y+7, r23	; 0x07
    75c0:	6e 83       	std	Y+6, r22	; 0x06
    75c2:	2e 85       	ldd	r18, Y+14	; 0x0e
    75c4:	3f 85       	ldd	r19, Y+15	; 0x0f
    75c6:	21 50       	subi	r18, 0x01	; 1
    75c8:	31 09       	sbc	r19, r1
    75ca:	3f 87       	std	Y+15, r19	; 0x0f
    75cc:	2e 87       	std	Y+14, r18	; 0x0e
    75ce:	88 89       	ldd	r24, Y+16	; 0x10
    75d0:	99 89       	ldd	r25, Y+17	; 0x11
    75d2:	ac 01       	movw	r20, r24
    75d4:	42 5b       	subi	r20, 0xB2	; 178
    75d6:	57 40       	sbci	r21, 0x07	; 7
    75d8:	45 34       	cpi	r20, 0x45	; 69
    75da:	51 05       	cpc	r21, r1
    75dc:	38 f0       	brcs	.+14     	; 0x75ec <setdate_r+0x156>
    75de:	ed b7       	in	r30, 0x3d	; 61
    75e0:	fe b7       	in	r31, 0x3e	; 62
    75e2:	95 83       	std	Z+5, r25	; 0x05
    75e4:	84 83       	std	Z+4, r24	; 0x04
    75e6:	89 e1       	ldi	r24, 0x19	; 25
    75e8:	97 e0       	ldi	r25, 0x07	; 7
    75ea:	34 c0       	rjmp	.+104    	; 0x7654 <setdate_r+0x1be>
    75ec:	8c 56       	subi	r24, 0x6C	; 108
    75ee:	97 40       	sbci	r25, 0x07	; 7
    75f0:	99 8b       	std	Y+17, r25	; 0x11
    75f2:	88 8b       	std	Y+16, r24	; 0x10
    75f4:	2c 30       	cpi	r18, 0x0C	; 12
    75f6:	31 05       	cpc	r19, r1
    75f8:	38 f0       	brcs	.+14     	; 0x7608 <setdate_r+0x172>
    75fa:	ed b7       	in	r30, 0x3d	; 61
    75fc:	fe b7       	in	r31, 0x3e	; 62
    75fe:	95 83       	std	Z+5, r25	; 0x05
    7600:	84 83       	std	Z+4, r24	; 0x04
    7602:	88 e0       	ldi	r24, 0x08	; 8
    7604:	97 e0       	ldi	r25, 0x07	; 7
    7606:	26 c0       	rjmp	.+76     	; 0x7654 <setdate_r+0x1be>
    7608:	8c 85       	ldd	r24, Y+12	; 0x0c
    760a:	9d 85       	ldd	r25, Y+13	; 0x0d
    760c:	9c 01       	movw	r18, r24
    760e:	21 50       	subi	r18, 0x01	; 1
    7610:	31 09       	sbc	r19, r1
    7612:	2f 31       	cpi	r18, 0x1F	; 31
    7614:	31 05       	cpc	r19, r1
    7616:	38 f0       	brcs	.+14     	; 0x7626 <setdate_r+0x190>
    7618:	ed b7       	in	r30, 0x3d	; 61
    761a:	fe b7       	in	r31, 0x3e	; 62
    761c:	95 83       	std	Z+5, r25	; 0x05
    761e:	84 83       	std	Z+4, r24	; 0x04
    7620:	87 ef       	ldi	r24, 0xF7	; 247
    7622:	96 e0       	ldi	r25, 0x06	; 6
    7624:	17 c0       	rjmp	.+46     	; 0x7654 <setdate_r+0x1be>
    7626:	8a 85       	ldd	r24, Y+10	; 0x0a
    7628:	9b 85       	ldd	r25, Y+11	; 0x0b
    762a:	88 31       	cpi	r24, 0x18	; 24
    762c:	91 05       	cpc	r25, r1
    762e:	38 f0       	brcs	.+14     	; 0x763e <setdate_r+0x1a8>
    7630:	ed b7       	in	r30, 0x3d	; 61
    7632:	fe b7       	in	r31, 0x3e	; 62
    7634:	95 83       	std	Z+5, r25	; 0x05
    7636:	84 83       	std	Z+4, r24	; 0x04
    7638:	85 ee       	ldi	r24, 0xE5	; 229
    763a:	96 e0       	ldi	r25, 0x06	; 6
    763c:	0b c0       	rjmp	.+22     	; 0x7654 <setdate_r+0x1be>
    763e:	88 85       	ldd	r24, Y+8	; 0x08
    7640:	99 85       	ldd	r25, Y+9	; 0x09
    7642:	8c 33       	cpi	r24, 0x3C	; 60
    7644:	91 05       	cpc	r25, r1
    7646:	68 f0       	brcs	.+26     	; 0x7662 <setdate_r+0x1cc>
    7648:	ed b7       	in	r30, 0x3d	; 61
    764a:	fe b7       	in	r31, 0x3e	; 62
    764c:	95 83       	std	Z+5, r25	; 0x05
    764e:	84 83       	std	Z+4, r24	; 0x04
    7650:	84 ed       	ldi	r24, 0xD4	; 212
    7652:	96 e0       	ldi	r25, 0x06	; 6
    7654:	a0 e0       	ldi	r26, 0x00	; 0
    7656:	81 83       	std	Z+1, r24	; 0x01
    7658:	92 83       	std	Z+2, r25	; 0x02
    765a:	a3 83       	std	Z+3, r26	; 0x03
    765c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    7660:	25 c0       	rjmp	.+74     	; 0x76ac <setdate_r+0x216>
    7662:	ce 01       	movw	r24, r28
    7664:	06 96       	adiw	r24, 0x06	; 6
    7666:	13 df       	rcall	.-474    	; 0x748e <timegm>
    7668:	6b 01       	movw	r12, r22
    766a:	7c 01       	movw	r14, r24
    766c:	6c 8f       	std	Y+28, r22	; 0x1c
    766e:	7d 8f       	std	Y+29, r23	; 0x1d
    7670:	8e 8f       	std	Y+30, r24	; 0x1e
    7672:	9f 8f       	std	Y+31, r25	; 0x1f
    7674:	18 a2       	std	Y+32, r1	; 0x20
    7676:	19 a2       	std	Y+33, r1	; 0x21
    7678:	1a a2       	std	Y+34, r1	; 0x22
    767a:	1b a2       	std	Y+35, r1	; 0x23
    767c:	be 01       	movw	r22, r28
    767e:	64 5e       	subi	r22, 0xE4	; 228
    7680:	7f 4f       	sbci	r23, 0xFF	; 255
    7682:	80 e0       	ldi	r24, 0x00	; 0
    7684:	90 e0       	ldi	r25, 0x00	; 0
    7686:	03 db       	rcall	.-2554   	; 0x6c8e <clock_settime>
    7688:	b7 01       	movw	r22, r14
    768a:	a6 01       	movw	r20, r12
    768c:	81 e0       	ldi	r24, 0x01	; 1
    768e:	90 e0       	ldi	r25, 0x00	; 0
    7690:	0e 94 c7 30 	call	0x618e	; 0x618e <rtc_init>
    7694:	81 11       	cpse	r24, r1
    7696:	0d c0       	rjmp	.+26     	; 0x76b2 <setdate_r+0x21c>
    7698:	8d eb       	ldi	r24, 0xBD	; 189
    769a:	96 e0       	ldi	r25, 0x06	; 6
    769c:	a0 e0       	ldi	r26, 0x00	; 0
    769e:	ed b7       	in	r30, 0x3d	; 61
    76a0:	fe b7       	in	r31, 0x3e	; 62
    76a2:	81 83       	std	Z+1, r24	; 0x01
    76a4:	92 83       	std	Z+2, r25	; 0x02
    76a6:	a3 83       	std	Z+3, r26	; 0x03
    76a8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    76ac:	8f ef       	ldi	r24, 0xFF	; 255
    76ae:	9f ef       	ldi	r25, 0xFF	; 255
    76b0:	02 c0       	rjmp	.+4      	; 0x76b6 <setdate_r+0x220>
    76b2:	80 e0       	ldi	r24, 0x00	; 0
    76b4:	90 e0       	ldi	r25, 0x00	; 0
    76b6:	a5 96       	adiw	r28, 0x25	; 37
    76b8:	0f b6       	in	r0, 0x3f	; 63
    76ba:	f8 94       	cli
    76bc:	de bf       	out	0x3e, r29	; 62
    76be:	0f be       	out	0x3f, r0	; 63
    76c0:	cd bf       	out	0x3d, r28	; 61
    76c2:	df 91       	pop	r29
    76c4:	cf 91       	pop	r28
    76c6:	ff 90       	pop	r15
    76c8:	ef 90       	pop	r14
    76ca:	df 90       	pop	r13
    76cc:	cf 90       	pop	r12
    76ce:	08 95       	ret

000076d0 <setdate>:
    76d0:	ab e2       	ldi	r26, 0x2B	; 43
    76d2:	b0 e0       	ldi	r27, 0x00	; 0
    76d4:	ee e6       	ldi	r30, 0x6E	; 110
    76d6:	fb e3       	ldi	r31, 0x3B	; 59
    76d8:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    76dc:	8b e2       	ldi	r24, 0x2B	; 43
    76de:	97 e0       	ldi	r25, 0x07	; 7
    76e0:	a0 e0       	ldi	r26, 0x00	; 0
    76e2:	ed b7       	in	r30, 0x3d	; 61
    76e4:	fe b7       	in	r31, 0x3e	; 62
    76e6:	81 83       	std	Z+1, r24	; 0x01
    76e8:	92 83       	std	Z+2, r25	; 0x02
    76ea:	a3 83       	std	Z+3, r26	; 0x03
    76ec:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    76f0:	40 91 c7 1c 	lds	r20, 0x1CC7	; 0x801cc7 <__iob>
    76f4:	50 91 c8 1c 	lds	r21, 0x1CC8	; 0x801cc8 <__iob+0x1>
    76f8:	66 e2       	ldi	r22, 0x26	; 38
    76fa:	70 e0       	ldi	r23, 0x00	; 0
    76fc:	ce 01       	movw	r24, r28
    76fe:	04 96       	adiw	r24, 0x04	; 4
    7700:	0e 94 39 76 	call	0xec72	; 0xec72 <fgets>
    7704:	ce 01       	movw	r24, r28
    7706:	04 96       	adiw	r24, 0x04	; 4
    7708:	c6 de       	rcall	.-628    	; 0x7496 <setdate_r>
    770a:	ab 96       	adiw	r28, 0x2b	; 43
    770c:	e2 e0       	ldi	r30, 0x02	; 2
    770e:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00007712 <find_dst>:
    7712:	a8 e2       	ldi	r26, 0x28	; 40
    7714:	b0 e0       	ldi	r27, 0x00	; 0
    7716:	ef e8       	ldi	r30, 0x8F	; 143
    7718:	fb e3       	ldi	r31, 0x3B	; 59
    771a:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    771e:	3c 01       	movw	r6, r24
    7720:	1a 01       	movw	r2, r20
    7722:	2b 01       	movw	r4, r22
    7724:	49 01       	movw	r8, r18
    7726:	1c a3       	std	Y+36, r17	; 0x24
    7728:	0b a3       	std	Y+35, r16	; 0x23
    772a:	de a2       	std	Y+38, r13	; 0x26
    772c:	cd a2       	std	Y+37, r12	; 0x25
    772e:	b8 a6       	std	Y+40, r11	; 0x28
    7730:	af a2       	std	Y+39, r10	; 0x27
    7732:	be 01       	movw	r22, r28
    7734:	61 5e       	subi	r22, 0xE1	; 225
    7736:	7f 4f       	sbci	r23, 0xFF	; 255
    7738:	ce 01       	movw	r24, r28
    773a:	47 96       	adiw	r24, 0x17	; 23
    773c:	15 dc       	rcall	.-2006   	; 0x6f68 <gettimeofday>
    773e:	af 8d       	ldd	r26, Y+31	; 0x1f
    7740:	b8 a1       	ldd	r27, Y+32	; 0x20
    7742:	2c e3       	ldi	r18, 0x3C	; 60
    7744:	30 e0       	ldi	r19, 0x00	; 0
    7746:	0e 94 8d e6 	call	0x1cd1a	; 0x1cd1a <__usmulhisi3>
    774a:	5b 01       	movw	r10, r22
    774c:	6c 01       	movw	r12, r24
    774e:	61 14       	cp	r6, r1
    7750:	71 04       	cpc	r7, r1
    7752:	31 f0       	breq	.+12     	; 0x7760 <find_dst+0x4e>
    7754:	20 e1       	ldi	r18, 0x10	; 16
    7756:	a2 1a       	sub	r10, r18
    7758:	2e e0       	ldi	r18, 0x0E	; 14
    775a:	b2 0a       	sbc	r11, r18
    775c:	c1 08       	sbc	r12, r1
    775e:	d1 08       	sbc	r13, r1
    7760:	81 14       	cp	r8, r1
    7762:	91 04       	cpc	r9, r1
    7764:	39 f0       	breq	.+14     	; 0x7774 <find_dst+0x62>
    7766:	4c e6       	ldi	r20, 0x6C	; 108
    7768:	84 1a       	sub	r8, r20
    776a:	47 e0       	ldi	r20, 0x07	; 7
    776c:	94 0a       	sbc	r9, r20
    776e:	9c 86       	std	Y+12, r9	; 0x0c
    7770:	8b 86       	std	Y+11, r8	; 0x0b
    7772:	11 c0       	rjmp	.+34     	; 0x7796 <find_dst+0x84>
    7774:	21 14       	cp	r2, r1
    7776:	31 04       	cpc	r3, r1
    7778:	41 04       	cpc	r4, r1
    777a:	51 04       	cpc	r5, r1
    777c:	21 f4       	brne	.+8      	; 0x7786 <find_dst+0x74>
    777e:	2f 88       	ldd	r2, Y+23	; 0x17
    7780:	38 8c       	ldd	r3, Y+24	; 0x18
    7782:	49 8c       	ldd	r4, Y+25	; 0x19
    7784:	5a 8c       	ldd	r5, Y+26	; 0x1a
    7786:	8e 01       	movw	r16, r28
    7788:	0f 5f       	subi	r16, 0xFF	; 255
    778a:	1f 4f       	sbci	r17, 0xFF	; 255
    778c:	a6 01       	movw	r20, r12
    778e:	95 01       	movw	r18, r10
    7790:	c2 01       	movw	r24, r4
    7792:	b1 01       	movw	r22, r2
    7794:	ca da       	rcall	.-2668   	; 0x6d2a <time_to_tm>
    7796:	8b a1       	ldd	r24, Y+35	; 0x23
    7798:	9c a1       	ldd	r25, Y+36	; 0x24
    779a:	01 97       	sbiw	r24, 0x01	; 1
    779c:	9a 87       	std	Y+10, r25	; 0x0a
    779e:	89 87       	std	Y+9, r24	; 0x09
    77a0:	81 e0       	ldi	r24, 0x01	; 1
    77a2:	90 e0       	ldi	r25, 0x00	; 0
    77a4:	98 87       	std	Y+8, r25	; 0x08
    77a6:	8f 83       	std	Y+7, r24	; 0x07
    77a8:	8f a1       	ldd	r24, Y+39	; 0x27
    77aa:	98 a5       	ldd	r25, Y+40	; 0x28
    77ac:	9e 83       	std	Y+6, r25	; 0x06
    77ae:	8d 83       	std	Y+5, r24	; 0x05
    77b0:	1c 82       	std	Y+4, r1	; 0x04
    77b2:	1b 82       	std	Y+3, r1	; 0x03
    77b4:	1a 82       	std	Y+2, r1	; 0x02
    77b6:	19 82       	std	Y+1, r1	; 0x01
    77b8:	ce 01       	movw	r24, r28
    77ba:	01 96       	adiw	r24, 0x01	; 1
    77bc:	68 de       	rcall	.-816    	; 0x748e <timegm>
    77be:	45 01       	movw	r8, r10
    77c0:	56 01       	movw	r10, r12
    77c2:	86 0e       	add	r8, r22
    77c4:	97 1e       	adc	r9, r23
    77c6:	a8 1e       	adc	r10, r24
    77c8:	b9 1e       	adc	r11, r25
    77ca:	8e 01       	movw	r16, r28
    77cc:	0f 5f       	subi	r16, 0xFF	; 255
    77ce:	1f 4f       	sbci	r17, 0xFF	; 255
    77d0:	20 e0       	ldi	r18, 0x00	; 0
    77d2:	30 e0       	ldi	r19, 0x00	; 0
    77d4:	a9 01       	movw	r20, r18
    77d6:	c5 01       	movw	r24, r10
    77d8:	b4 01       	movw	r22, r8
    77da:	a7 da       	rcall	.-2738   	; 0x6d2a <time_to_tm>
    77dc:	2d 85       	ldd	r18, Y+13	; 0x0d
    77de:	3e 85       	ldd	r19, Y+14	; 0x0e
    77e0:	e7 e0       	ldi	r30, 0x07	; 7
    77e2:	f0 e0       	ldi	r31, 0x00	; 0
    77e4:	c9 01       	movw	r24, r18
    77e6:	bf 01       	movw	r22, r30
    77e8:	0e 94 33 e6 	call	0x1cc66	; 0x1cc66 <__divmodhi4>
    77ec:	4d a1       	ldd	r20, Y+37	; 0x25
    77ee:	5e a1       	ldd	r21, Y+38	; 0x26
    77f0:	48 17       	cp	r20, r24
    77f2:	59 07       	cpc	r21, r25
    77f4:	21 f4       	brne	.+8      	; 0x77fe <find_dst+0xec>
    77f6:	51 e0       	ldi	r21, 0x01	; 1
    77f8:	e5 1a       	sub	r14, r21
    77fa:	f1 08       	sbc	r15, r1
    77fc:	51 f0       	breq	.+20     	; 0x7812 <find_dst+0x100>
    77fe:	80 e8       	ldi	r24, 0x80	; 128
    7800:	88 0e       	add	r8, r24
    7802:	81 e5       	ldi	r24, 0x51	; 81
    7804:	98 1e       	adc	r9, r24
    7806:	81 e0       	ldi	r24, 0x01	; 1
    7808:	a8 1e       	adc	r10, r24
    780a:	b1 1c       	adc	r11, r1
    780c:	2f 5f       	subi	r18, 0xFF	; 255
    780e:	3f 4f       	sbci	r19, 0xFF	; 255
    7810:	e9 cf       	rjmp	.-46     	; 0x77e4 <find_dst+0xd2>
    7812:	c5 01       	movw	r24, r10
    7814:	b4 01       	movw	r22, r8
    7816:	a8 96       	adiw	r28, 0x28	; 40
    7818:	e2 e1       	ldi	r30, 0x12	; 18
    781a:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0000781e <set_dst>:
    781e:	4f 92       	push	r4
    7820:	5f 92       	push	r5
    7822:	6f 92       	push	r6
    7824:	7f 92       	push	r7
    7826:	af 92       	push	r10
    7828:	bf 92       	push	r11
    782a:	cf 92       	push	r12
    782c:	df 92       	push	r13
    782e:	ef 92       	push	r14
    7830:	ff 92       	push	r15
    7832:	0f 93       	push	r16
    7834:	1f 93       	push	r17
    7836:	cf 93       	push	r28
    7838:	df 93       	push	r29
    783a:	cd b7       	in	r28, 0x3d	; 61
    783c:	de b7       	in	r29, 0x3e	; 62
    783e:	2c 97       	sbiw	r28, 0x0c	; 12
    7840:	0f b6       	in	r0, 0x3f	; 63
    7842:	f8 94       	cli
    7844:	de bf       	out	0x3e, r29	; 62
    7846:	0f be       	out	0x3f, r0	; 63
    7848:	cd bf       	out	0x3d, r28	; 61
    784a:	2b 01       	movw	r4, r22
    784c:	3c 01       	movw	r6, r24
    784e:	67 2b       	or	r22, r23
    7850:	68 2b       	or	r22, r24
    7852:	69 2b       	or	r22, r25
    7854:	51 f4       	brne	.+20     	; 0x786a <set_dst+0x4c>
    7856:	be 01       	movw	r22, r28
    7858:	67 5f       	subi	r22, 0xF7	; 247
    785a:	7f 4f       	sbci	r23, 0xFF	; 255
    785c:	ce 01       	movw	r24, r28
    785e:	01 96       	adiw	r24, 0x01	; 1
    7860:	83 db       	rcall	.-2298   	; 0x6f68 <gettimeofday>
    7862:	49 80       	ldd	r4, Y+1	; 0x01
    7864:	5a 80       	ldd	r5, Y+2	; 0x02
    7866:	6b 80       	ldd	r6, Y+3	; 0x03
    7868:	7c 80       	ldd	r7, Y+4	; 0x04
    786a:	80 91 84 1a 	lds	r24, 0x1A84	; 0x801a84 <dst+0x8>
    786e:	90 91 85 1a 	lds	r25, 0x1A85	; 0x801a85 <dst+0x9>
    7872:	a0 91 86 1a 	lds	r26, 0x1A86	; 0x801a86 <dst+0xa>
    7876:	b0 91 87 1a 	lds	r27, 0x1A87	; 0x801a87 <dst+0xb>
    787a:	84 15       	cp	r24, r4
    787c:	95 05       	cpc	r25, r5
    787e:	a6 05       	cpc	r26, r6
    7880:	b7 05       	cpc	r27, r7
    7882:	50 f0       	brcs	.+20     	; 0x7898 <set_dst+0x7a>
    7884:	84 19       	sub	r24, r4
    7886:	95 09       	sbc	r25, r5
    7888:	a6 09       	sbc	r26, r6
    788a:	b7 09       	sbc	r27, r7
    788c:	80 38       	cpi	r24, 0x80	; 128
    788e:	91 45       	sbci	r25, 0x51	; 81
    7890:	a1 40       	sbci	r26, 0x01	; 1
    7892:	b1 05       	cpc	r27, r1
    7894:	70 f4       	brcc	.+28     	; 0x78b2 <set_dst+0x94>
    7896:	42 c0       	rjmp	.+132    	; 0x791c <set_dst+0xfe>
    7898:	a3 01       	movw	r20, r6
    789a:	92 01       	movw	r18, r4
    789c:	28 1b       	sub	r18, r24
    789e:	39 0b       	sbc	r19, r25
    78a0:	4a 0b       	sbc	r20, r26
    78a2:	5b 0b       	sbc	r21, r27
    78a4:	da 01       	movw	r26, r20
    78a6:	c9 01       	movw	r24, r18
    78a8:	80 38       	cpi	r24, 0x80	; 128
    78aa:	91 45       	sbci	r25, 0x51	; 81
    78ac:	a1 40       	sbci	r26, 0x01	; 1
    78ae:	b1 05       	cpc	r27, r1
    78b0:	a8 f1       	brcs	.+106    	; 0x791c <set_dst+0xfe>
    78b2:	40 92 84 1a 	sts	0x1A84, r4	; 0x801a84 <dst+0x8>
    78b6:	50 92 85 1a 	sts	0x1A85, r5	; 0x801a85 <dst+0x9>
    78ba:	60 92 86 1a 	sts	0x1A86, r6	; 0x801a86 <dst+0xa>
    78be:	70 92 87 1a 	sts	0x1A87, r7	; 0x801a87 <dst+0xb>
    78c2:	82 e0       	ldi	r24, 0x02	; 2
    78c4:	a8 2e       	mov	r10, r24
    78c6:	b1 2c       	mov	r11, r1
    78c8:	c1 2c       	mov	r12, r1
    78ca:	d1 2c       	mov	r13, r1
    78cc:	92 e0       	ldi	r25, 0x02	; 2
    78ce:	e9 2e       	mov	r14, r25
    78d0:	f1 2c       	mov	r15, r1
    78d2:	03 e0       	ldi	r16, 0x03	; 3
    78d4:	10 e0       	ldi	r17, 0x00	; 0
    78d6:	20 e0       	ldi	r18, 0x00	; 0
    78d8:	30 e0       	ldi	r19, 0x00	; 0
    78da:	b3 01       	movw	r22, r6
    78dc:	a2 01       	movw	r20, r4
    78de:	80 e0       	ldi	r24, 0x00	; 0
    78e0:	90 e0       	ldi	r25, 0x00	; 0
    78e2:	17 df       	rcall	.-466    	; 0x7712 <find_dst>
    78e4:	60 93 7c 1a 	sts	0x1A7C, r22	; 0x801a7c <dst>
    78e8:	70 93 7d 1a 	sts	0x1A7D, r23	; 0x801a7d <dst+0x1>
    78ec:	80 93 7e 1a 	sts	0x1A7E, r24	; 0x801a7e <dst+0x2>
    78f0:	90 93 7f 1a 	sts	0x1A7F, r25	; 0x801a7f <dst+0x3>
    78f4:	ee 24       	eor	r14, r14
    78f6:	e3 94       	inc	r14
    78f8:	f1 2c       	mov	r15, r1
    78fa:	0b e0       	ldi	r16, 0x0B	; 11
    78fc:	10 e0       	ldi	r17, 0x00	; 0
    78fe:	20 e0       	ldi	r18, 0x00	; 0
    7900:	30 e0       	ldi	r19, 0x00	; 0
    7902:	b3 01       	movw	r22, r6
    7904:	a2 01       	movw	r20, r4
    7906:	81 e0       	ldi	r24, 0x01	; 1
    7908:	90 e0       	ldi	r25, 0x00	; 0
    790a:	03 df       	rcall	.-506    	; 0x7712 <find_dst>
    790c:	60 93 80 1a 	sts	0x1A80, r22	; 0x801a80 <dst+0x4>
    7910:	70 93 81 1a 	sts	0x1A81, r23	; 0x801a81 <dst+0x5>
    7914:	80 93 82 1a 	sts	0x1A82, r24	; 0x801a82 <dst+0x6>
    7918:	90 93 83 1a 	sts	0x1A83, r25	; 0x801a83 <dst+0x7>
    791c:	2c 96       	adiw	r28, 0x0c	; 12
    791e:	0f b6       	in	r0, 0x3f	; 63
    7920:	f8 94       	cli
    7922:	de bf       	out	0x3e, r29	; 62
    7924:	0f be       	out	0x3f, r0	; 63
    7926:	cd bf       	out	0x3d, r28	; 61
    7928:	df 91       	pop	r29
    792a:	cf 91       	pop	r28
    792c:	1f 91       	pop	r17
    792e:	0f 91       	pop	r16
    7930:	ff 90       	pop	r15
    7932:	ef 90       	pop	r14
    7934:	df 90       	pop	r13
    7936:	cf 90       	pop	r12
    7938:	bf 90       	pop	r11
    793a:	af 90       	pop	r10
    793c:	7f 90       	pop	r7
    793e:	6f 90       	pop	r6
    7940:	5f 90       	pop	r5
    7942:	4f 90       	pop	r4
    7944:	08 95       	ret

00007946 <asctime_r>:
    7946:	a5 e1       	ldi	r26, 0x15	; 21
    7948:	b0 e0       	ldi	r27, 0x00	; 0
    794a:	e9 ea       	ldi	r30, 0xA9	; 169
    794c:	fc e3       	ldi	r31, 0x3C	; 60
    794e:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
    7952:	ec 01       	movw	r28, r24
    7954:	8b 01       	movw	r16, r22
    7956:	60 e0       	ldi	r22, 0x00	; 0
    7958:	70 e0       	ldi	r23, 0x00	; 0
    795a:	d1 db       	rcall	.-2142   	; 0x70fe <normalize>
    795c:	80 e2       	ldi	r24, 0x20	; 32
    795e:	f8 01       	movw	r30, r16
    7960:	11 92       	st	Z+, r1
    7962:	8a 95       	dec	r24
    7964:	e9 f7       	brne	.-6      	; 0x7960 <asctime_r+0x1a>
    7966:	8a 85       	ldd	r24, Y+10	; 0x0a
    7968:	9b 85       	ldd	r25, Y+11	; 0x0b
    796a:	84 59       	subi	r24, 0x94	; 148
    796c:	98 4f       	sbci	r25, 0xF8	; 248
    796e:	ed b7       	in	r30, 0x3d	; 61
    7970:	fe b7       	in	r31, 0x3e	; 62
    7972:	95 8b       	std	Z+21, r25	; 0x15
    7974:	84 8b       	std	Z+20, r24	; 0x14
    7976:	88 81       	ld	r24, Y
    7978:	99 81       	ldd	r25, Y+1	; 0x01
    797a:	93 8b       	std	Z+19, r25	; 0x13
    797c:	82 8b       	std	Z+18, r24	; 0x12
    797e:	8a 81       	ldd	r24, Y+2	; 0x02
    7980:	9b 81       	ldd	r25, Y+3	; 0x03
    7982:	91 8b       	std	Z+17, r25	; 0x11
    7984:	80 8b       	std	Z+16, r24	; 0x10
    7986:	8c 81       	ldd	r24, Y+4	; 0x04
    7988:	9d 81       	ldd	r25, Y+5	; 0x05
    798a:	97 87       	std	Z+15, r25	; 0x0f
    798c:	86 87       	std	Z+14, r24	; 0x0e
    798e:	8e 81       	ldd	r24, Y+6	; 0x06
    7990:	9f 81       	ldd	r25, Y+7	; 0x07
    7992:	95 87       	std	Z+13, r25	; 0x0d
    7994:	84 87       	std	Z+12, r24	; 0x0c
    7996:	e8 85       	ldd	r30, Y+8	; 0x08
    7998:	f9 85       	ldd	r31, Y+9	; 0x09
    799a:	ee 0f       	add	r30, r30
    799c:	ff 1f       	adc	r31, r31
    799e:	e5 5f       	subi	r30, 0xF5	; 245
    79a0:	fe 4f       	sbci	r31, 0xFE	; 254
    79a2:	80 81       	ld	r24, Z
    79a4:	91 81       	ldd	r25, Z+1	; 0x01
    79a6:	ed b7       	in	r30, 0x3d	; 61
    79a8:	fe b7       	in	r31, 0x3e	; 62
    79aa:	93 87       	std	Z+11, r25	; 0x0b
    79ac:	82 87       	std	Z+10, r24	; 0x0a
    79ae:	ec 85       	ldd	r30, Y+12	; 0x0c
    79b0:	fd 85       	ldd	r31, Y+13	; 0x0d
    79b2:	ee 0f       	add	r30, r30
    79b4:	ff 1f       	adc	r31, r31
    79b6:	eb 5d       	subi	r30, 0xDB	; 219
    79b8:	fe 4f       	sbci	r31, 0xFE	; 254
    79ba:	80 81       	ld	r24, Z
    79bc:	91 81       	ldd	r25, Z+1	; 0x01
    79be:	ed b7       	in	r30, 0x3d	; 61
    79c0:	fe b7       	in	r31, 0x3e	; 62
    79c2:	91 87       	std	Z+9, r25	; 0x09
    79c4:	80 87       	std	Z+8, r24	; 0x08
    79c6:	8c e4       	ldi	r24, 0x4C	; 76
    79c8:	97 e0       	ldi	r25, 0x07	; 7
    79ca:	a0 e0       	ldi	r26, 0x00	; 0
    79cc:	85 83       	std	Z+5, r24	; 0x05
    79ce:	96 83       	std	Z+6, r25	; 0x06
    79d0:	a7 83       	std	Z+7, r26	; 0x07
    79d2:	80 e2       	ldi	r24, 0x20	; 32
    79d4:	90 e0       	ldi	r25, 0x00	; 0
    79d6:	94 83       	std	Z+4, r25	; 0x04
    79d8:	83 83       	std	Z+3, r24	; 0x03
    79da:	12 83       	std	Z+2, r17	; 0x02
    79dc:	01 83       	std	Z+1, r16	; 0x01
    79de:	0e 94 b8 46 	call	0x8d70	; 0x8d70 <snprintf_P>
    79e2:	c8 01       	movw	r24, r16
    79e4:	cd b7       	in	r28, 0x3d	; 61
    79e6:	de b7       	in	r29, 0x3e	; 62
    79e8:	65 96       	adiw	r28, 0x15	; 21
    79ea:	e4 e0       	ldi	r30, 0x04	; 4
    79ec:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

000079f0 <asctime>:
    79f0:	66 e0       	ldi	r22, 0x06	; 6
    79f2:	78 e1       	ldi	r23, 0x18	; 24
    79f4:	a8 cf       	rjmp	.-176    	; 0x7946 <asctime_r>
    79f6:	08 95       	ret

000079f8 <ctime_gm>:
    79f8:	a6 e1       	ldi	r26, 0x16	; 22
    79fa:	b0 e0       	ldi	r27, 0x00	; 0
    79fc:	e2 e0       	ldi	r30, 0x02	; 2
    79fe:	fd e3       	ldi	r31, 0x3D	; 61
    7a00:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    7a04:	be 01       	movw	r22, r28
    7a06:	6f 5f       	subi	r22, 0xFF	; 255
    7a08:	7f 4f       	sbci	r23, 0xFF	; 255
    7a0a:	6d da       	rcall	.-2854   	; 0x6ee6 <gmtime_r>
    7a0c:	66 ee       	ldi	r22, 0xE6	; 230
    7a0e:	77 e1       	ldi	r23, 0x17	; 23
    7a10:	9a df       	rcall	.-204    	; 0x7946 <asctime_r>
    7a12:	66 96       	adiw	r28, 0x16	; 22
    7a14:	e2 e0       	ldi	r30, 0x02	; 2
    7a16:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00007a1a <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7a1a:	a5 e2       	ldi	r26, 0x25	; 37
    7a1c:	b0 e0       	ldi	r27, 0x00	; 0
    7a1e:	e3 e1       	ldi	r30, 0x13	; 19
    7a20:	fd e3       	ldi	r31, 0x3D	; 61
    7a22:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    7a26:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7a28:	40 e0       	ldi	r20, 0x00	; 0
    7a2a:	50 e0       	ldi	r21, 0x00	; 0
    7a2c:	ba 01       	movw	r22, r20
    7a2e:	80 e0       	ldi	r24, 0x00	; 0
    7a30:	90 e0       	ldi	r25, 0x00	; 0
    7a32:	0e 94 c7 30 	call	0x618e	; 0x618e <rtc_init>
    7a36:	81 11       	cpse	r24, r1
    7a38:	27 c0       	rjmp	.+78     	; 0x7a88 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7a3a:	8b ea       	ldi	r24, 0xAB	; 171
    7a3c:	96 e0       	ldi	r25, 0x06	; 6
    7a3e:	a0 e0       	ldi	r26, 0x00	; 0
    7a40:	ed b7       	in	r30, 0x3d	; 61
    7a42:	fe b7       	in	r31, 0x3e	; 62
    7a44:	81 83       	std	Z+1, r24	; 0x01
    7a46:	92 83       	std	Z+2, r25	; 0x02
    7a48:	a3 83       	std	Z+3, r26	; 0x03
    7a4a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        printf("attempting rtc init\n");
    7a4e:	86 e9       	ldi	r24, 0x96	; 150
    7a50:	96 e0       	ldi	r25, 0x06	; 6
    7a52:	a0 e0       	ldi	r26, 0x00	; 0
    7a54:	ed b7       	in	r30, 0x3d	; 61
    7a56:	fe b7       	in	r31, 0x3e	; 62
    7a58:	81 83       	std	Z+1, r24	; 0x01
    7a5a:	92 83       	std	Z+2, r25	; 0x02
    7a5c:	a3 83       	std	Z+3, r26	; 0x03
    7a5e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7a62:	40 e0       	ldi	r20, 0x00	; 0
    7a64:	50 e0       	ldi	r21, 0x00	; 0
    7a66:	ba 01       	movw	r22, r20
    7a68:	81 e0       	ldi	r24, 0x01	; 1
    7a6a:	90 e0       	ldi	r25, 0x00	; 0
    7a6c:	0e 94 c7 30 	call	0x618e	; 0x618e <rtc_init>
    7a70:	81 11       	cpse	r24, r1
    7a72:	0a c0       	rjmp	.+20     	; 0x7a88 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7a74:	8f e7       	ldi	r24, 0x7F	; 127
    7a76:	96 e0       	ldi	r25, 0x06	; 6
    7a78:	a0 e0       	ldi	r26, 0x00	; 0
    7a7a:	ed b7       	in	r30, 0x3d	; 61
    7a7c:	fe b7       	in	r31, 0x3e	; 62
    7a7e:	81 83       	std	Z+1, r24	; 0x01
    7a80:	92 83       	std	Z+2, r25	; 0x02
    7a82:	a3 83       	std	Z+3, r26	; 0x03
    7a84:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        }
    }

    if(rtc_read(&tc))
    7a88:	ce 01       	movw	r24, r28
    7a8a:	04 96       	adiw	r24, 0x04	; 4
    7a8c:	0e 94 2d 30 	call	0x605a	; 0x605a <rtc_read>
    7a90:	88 23       	and	r24, r24
    7a92:	51 f0       	breq	.+20     	; 0x7aa8 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7a94:	ce 01       	movw	r24, r28
    7a96:	04 96       	adiw	r24, 0x04	; 4
    7a98:	fa dc       	rcall	.-1548   	; 0x748e <timegm>
    7a9a:	6b 01       	movw	r12, r22
    7a9c:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    7a9e:	67 2b       	or	r22, r23
    7aa0:	68 2b       	or	r22, r24
    7aa2:	69 2b       	or	r22, r25
    7aa4:	c1 f4       	brne	.+48     	; 0x7ad6 <initialize_clock+0xbc>
    7aa6:	0a c0       	rjmp	.+20     	; 0x7abc <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7aa8:	85 e6       	ldi	r24, 0x65	; 101
    7aaa:	96 e0       	ldi	r25, 0x06	; 6
    7aac:	a0 e0       	ldi	r26, 0x00	; 0
    7aae:	ed b7       	in	r30, 0x3d	; 61
    7ab0:	fe b7       	in	r31, 0x3e	; 62
    7ab2:	81 83       	std	Z+1, r24	; 0x01
    7ab4:	92 83       	std	Z+2, r25	; 0x02
    7ab6:	a3 83       	std	Z+3, r26	; 0x03
    7ab8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7abc:	81 e4       	ldi	r24, 0x41	; 65
    7abe:	96 e0       	ldi	r25, 0x06	; 6
    7ac0:	a0 e0       	ldi	r26, 0x00	; 0
    7ac2:	ed b7       	in	r30, 0x3d	; 61
    7ac4:	fe b7       	in	r31, 0x3e	; 62
    7ac6:	81 83       	std	Z+1, r24	; 0x01
    7ac8:	92 83       	std	Z+2, r25	; 0x02
    7aca:	a3 83       	std	Z+3, r26	; 0x03
    7acc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    7ad0:	c1 2c       	mov	r12, r1
    7ad2:	d1 2c       	mov	r13, r1
    7ad4:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7ad6:	1b a3       	std	Y+35, r17	; 0x23
    7ad8:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7ada:	1d a2       	std	Y+37, r1	; 0x25
    7adc:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7ade:	ce 01       	movw	r24, r28
    7ae0:	82 96       	adiw	r24, 0x22	; 34
    7ae2:	30 da       	rcall	.-2976   	; 0x6f44 <settimezone>

    ts.tv_sec = seconds;
    7ae4:	ca 8e       	std	Y+26, r12	; 0x1a
    7ae6:	db 8e       	std	Y+27, r13	; 0x1b
    7ae8:	ec 8e       	std	Y+28, r14	; 0x1c
    7aea:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7aec:	1e 8e       	std	Y+30, r1	; 0x1e
    7aee:	1f 8e       	std	Y+31, r1	; 0x1f
    7af0:	18 a2       	std	Y+32, r1	; 0x20
    7af2:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7af4:	be 01       	movw	r22, r28
    7af6:	66 5e       	subi	r22, 0xE6	; 230
    7af8:	7f 4f       	sbci	r23, 0xFF	; 255
    7afa:	80 e0       	ldi	r24, 0x00	; 0
    7afc:	90 e0       	ldi	r25, 0x00	; 0
    7afe:	c7 d8       	rcall	.-3698   	; 0x6c8e <clock_settime>
}
    7b00:	a5 96       	adiw	r28, 0x25	; 37
    7b02:	e8 e0       	ldi	r30, 0x08	; 8
    7b04:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

00007b08 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7b08:	a9 e2       	ldi	r26, 0x29	; 41
    7b0a:	b0 e0       	ldi	r27, 0x00	; 0
    7b0c:	ea e8       	ldi	r30, 0x8A	; 138
    7b0e:	fd e3       	ldi	r31, 0x3D	; 61
    7b10:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7b14:	ce 01       	movw	r24, r28
    7b16:	08 96       	adiw	r24, 0x08	; 8
    7b18:	0e 94 2d 30 	call	0x605a	; 0x605a <rtc_read>
    7b1c:	88 23       	and	r24, r24
    7b1e:	29 f1       	breq	.+74     	; 0x7b6a <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7b20:	ce 01       	movw	r24, r28
    7b22:	08 96       	adiw	r24, 0x08	; 8
    7b24:	b4 dc       	rcall	.-1688   	; 0x748e <timegm>
    7b26:	6e a3       	std	Y+38, r22	; 0x26
    7b28:	7f a3       	std	Y+39, r23	; 0x27
    7b2a:	88 a7       	std	Y+40, r24	; 0x28
    7b2c:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7b2e:	ed b7       	in	r30, 0x3d	; 61
    7b30:	fe b7       	in	r31, 0x3e	; 62
    7b32:	64 83       	std	Z+4, r22	; 0x04
    7b34:	75 83       	std	Z+5, r23	; 0x05
    7b36:	86 83       	std	Z+6, r24	; 0x06
    7b38:	97 83       	std	Z+7, r25	; 0x07
    7b3a:	8f e2       	ldi	r24, 0x2F	; 47
    7b3c:	96 e0       	ldi	r25, 0x06	; 6
    7b3e:	a0 e0       	ldi	r26, 0x00	; 0
    7b40:	81 83       	std	Z+1, r24	; 0x01
    7b42:	92 83       	std	Z+2, r25	; 0x02
    7b44:	a3 83       	std	Z+3, r26	; 0x03
    7b46:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7b4a:	ce 01       	movw	r24, r28
    7b4c:	08 96       	adiw	r24, 0x08	; 8
    7b4e:	50 df       	rcall	.-352    	; 0x79f0 <asctime>
    7b50:	ed b7       	in	r30, 0x3d	; 61
    7b52:	fe b7       	in	r31, 0x3e	; 62
    7b54:	95 83       	std	Z+5, r25	; 0x05
    7b56:	84 83       	std	Z+4, r24	; 0x04
    7b58:	8e e1       	ldi	r24, 0x1E	; 30
    7b5a:	96 e0       	ldi	r25, 0x06	; 6
    7b5c:	a0 e0       	ldi	r26, 0x00	; 0
    7b5e:	81 83       	std	Z+1, r24	; 0x01
    7b60:	92 83       	std	Z+2, r25	; 0x02
    7b62:	a3 83       	std	Z+3, r26	; 0x03
    7b64:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    7b68:	0a c0       	rjmp	.+20     	; 0x7b7e <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7b6a:	8d e0       	ldi	r24, 0x0D	; 13
    7b6c:	96 e0       	ldi	r25, 0x06	; 6
    7b6e:	a0 e0       	ldi	r26, 0x00	; 0
    7b70:	ed b7       	in	r30, 0x3d	; 61
    7b72:	fe b7       	in	r31, 0x3e	; 62
    7b74:	81 83       	std	Z+1, r24	; 0x01
    7b76:	92 83       	std	Z+2, r25	; 0x02
    7b78:	a3 83       	std	Z+3, r26	; 0x03
    7b7a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7b7e:	be 01       	movw	r22, r28
    7b80:	62 5e       	subi	r22, 0xE2	; 226
    7b82:	7f 4f       	sbci	r23, 0xFF	; 255
    7b84:	80 e0       	ldi	r24, 0x00	; 0
    7b86:	90 e0       	ldi	r25, 0x00	; 0
    7b88:	0e 94 9e 33 	call	0x673c	; 0x673c <clock_gettime>
    seconds = ts.tv_sec;
    7b8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7b8e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7b90:	a8 a1       	ldd	r26, Y+32	; 0x20
    7b92:	b9 a1       	ldd	r27, Y+33	; 0x21
    7b94:	8e a3       	std	Y+38, r24	; 0x26
    7b96:	9f a3       	std	Y+39, r25	; 0x27
    7b98:	a8 a7       	std	Y+40, r26	; 0x28
    7b9a:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7b9c:	ed b7       	in	r30, 0x3d	; 61
    7b9e:	fe b7       	in	r31, 0x3e	; 62
    7ba0:	84 83       	std	Z+4, r24	; 0x04
    7ba2:	95 83       	std	Z+5, r25	; 0x05
    7ba4:	a6 83       	std	Z+6, r26	; 0x06
    7ba6:	b7 83       	std	Z+7, r27	; 0x07
    7ba8:	8b ef       	ldi	r24, 0xFB	; 251
    7baa:	95 e0       	ldi	r25, 0x05	; 5
    7bac:	a0 e0       	ldi	r26, 0x00	; 0
    7bae:	81 83       	std	Z+1, r24	; 0x01
    7bb0:	92 83       	std	Z+2, r25	; 0x02
    7bb2:	a3 83       	std	Z+3, r26	; 0x03
    7bb4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7bb8:	ce 01       	movw	r24, r28
    7bba:	86 96       	adiw	r24, 0x26	; 38
    7bbc:	a9 d9       	rcall	.-3246   	; 0x6f10 <gmtime>
    7bbe:	18 df       	rcall	.-464    	; 0x79f0 <asctime>
    7bc0:	ed b7       	in	r30, 0x3d	; 61
    7bc2:	fe b7       	in	r31, 0x3e	; 62
    7bc4:	95 83       	std	Z+5, r25	; 0x05
    7bc6:	84 83       	std	Z+4, r24	; 0x04
    7bc8:	8a ee       	ldi	r24, 0xEA	; 234
    7bca:	95 e0       	ldi	r25, 0x05	; 5
    7bcc:	a0 e0       	ldi	r26, 0x00	; 0
    7bce:	81 83       	std	Z+1, r24	; 0x01
    7bd0:	92 83       	std	Z+2, r25	; 0x02
    7bd2:	a3 83       	std	Z+3, r26	; 0x03
    7bd4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
}
    7bd8:	a9 96       	adiw	r28, 0x29	; 41
    7bda:	e2 e0       	ldi	r30, 0x02	; 2
    7bdc:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00007be0 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7be0:	fc 01       	movw	r30, r24
    7be2:	84 81       	ldd	r24, Z+4	; 0x04
    7be4:	95 81       	ldd	r25, Z+5	; 0x05
    7be6:	00 97       	sbiw	r24, 0x00	; 0
    7be8:	79 f0       	breq	.+30     	; 0x7c08 <_putc_buffer_fn+0x28>
    7bea:	66 23       	and	r22, r22
    7bec:	69 f0       	breq	.+26     	; 0x7c08 <_putc_buffer_fn+0x28>
    7bee:	01 97       	sbiw	r24, 0x01	; 1
    7bf0:	95 83       	std	Z+5, r25	; 0x05
    7bf2:	84 83       	std	Z+4, r24	; 0x04
    7bf4:	86 81       	ldd	r24, Z+6	; 0x06
    7bf6:	97 81       	ldd	r25, Z+7	; 0x07
    7bf8:	01 96       	adiw	r24, 0x01	; 1
    7bfa:	97 83       	std	Z+7, r25	; 0x07
    7bfc:	86 83       	std	Z+6, r24	; 0x06
    7bfe:	a2 81       	ldd	r26, Z+2	; 0x02
    7c00:	b3 81       	ldd	r27, Z+3	; 0x03
    7c02:	6d 93       	st	X+, r22
    7c04:	b3 83       	std	Z+3, r27	; 0x03
    7c06:	a2 83       	std	Z+2, r26	; 0x02
    7c08:	02 80       	ldd	r0, Z+2	; 0x02
    7c0a:	f3 81       	ldd	r31, Z+3	; 0x03
    7c0c:	e0 2d       	mov	r30, r0
    7c0e:	10 82       	st	Z, r1
    7c10:	08 95       	ret

00007c12 <_putc_fn>:
    7c12:	fc 01       	movw	r30, r24
    7c14:	26 81       	ldd	r18, Z+6	; 0x06
    7c16:	37 81       	ldd	r19, Z+7	; 0x07
    7c18:	2f 5f       	subi	r18, 0xFF	; 255
    7c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    7c1c:	37 83       	std	Z+7, r19	; 0x07
    7c1e:	26 83       	std	Z+6, r18	; 0x06
    7c20:	86 2f       	mov	r24, r22
    7c22:	90 e0       	ldi	r25, 0x00	; 0
    7c24:	0c 94 33 76 	jmp	0xec66	; 0xec66 <putchar>
    7c28:	08 95       	ret

00007c2a <bin2num>:
    7c2a:	a0 e0       	ldi	r26, 0x00	; 0
    7c2c:	b0 e0       	ldi	r27, 0x00	; 0
    7c2e:	eb e1       	ldi	r30, 0x1B	; 27
    7c30:	fe e3       	ldi	r31, 0x3E	; 62
    7c32:	0c 94 ba e6 	jmp	0x1cd74	; 0x1cd74 <__prologue_saves__+0xe>
    7c36:	ea 01       	movw	r28, r20
    7c38:	53 e0       	ldi	r21, 0x03	; 3
    7c3a:	ee 0c       	add	r14, r14
    7c3c:	ff 1c       	adc	r15, r15
    7c3e:	5a 95       	dec	r21
    7c40:	e1 f7       	brne	.-8      	; 0x7c3a <bin2num+0x10>
    7c42:	fc 01       	movw	r30, r24
    7c44:	af 01       	movw	r20, r30
    7c46:	48 1b       	sub	r20, r24
    7c48:	59 0b       	sbc	r21, r25
    7c4a:	c4 17       	cp	r28, r20
    7c4c:	d5 07       	cpc	r29, r21
    7c4e:	14 f0       	brlt	.+4      	; 0x7c54 <bin2num+0x2a>
    7c50:	11 92       	st	Z+, r1
    7c52:	f8 cf       	rjmp	.-16     	; 0x7c44 <bin2num+0x1a>
    7c54:	41 e0       	ldi	r20, 0x01	; 1
    7c56:	e4 1a       	sub	r14, r20
    7c58:	f1 08       	sbc	r15, r1
    7c5a:	5b 01       	movw	r10, r22
    7c5c:	42 e0       	ldi	r20, 0x02	; 2
    7c5e:	a4 1a       	sub	r10, r20
    7c60:	b1 08       	sbc	r11, r1
    7c62:	f7 fc       	sbrc	r15, 7
    7c64:	3b c0       	rjmp	.+118    	; 0x7cdc <bin2num+0xb2>
    7c66:	f7 01       	movw	r30, r14
    7c68:	43 e0       	ldi	r20, 0x03	; 3
    7c6a:	f5 95       	asr	r31
    7c6c:	e7 95       	ror	r30
    7c6e:	4a 95       	dec	r20
    7c70:	e1 f7       	brne	.-8      	; 0x7c6a <bin2num+0x40>
    7c72:	e0 0f       	add	r30, r16
    7c74:	f1 1f       	adc	r31, r17
    7c76:	40 81       	ld	r20, Z
    7c78:	50 e0       	ldi	r21, 0x00	; 0
    7c7a:	f7 01       	movw	r30, r14
    7c7c:	e7 70       	andi	r30, 0x07	; 7
    7c7e:	ff 27       	eor	r31, r31
    7c80:	02 c0       	rjmp	.+4      	; 0x7c86 <bin2num+0x5c>
    7c82:	55 95       	asr	r21
    7c84:	47 95       	ror	r20
    7c86:	ea 95       	dec	r30
    7c88:	e2 f7       	brpl	.-8      	; 0x7c82 <bin2num+0x58>
    7c8a:	41 70       	andi	r20, 0x01	; 1
    7c8c:	55 27       	eor	r21, r21
    7c8e:	dc 01       	movw	r26, r24
    7c90:	e0 e0       	ldi	r30, 0x00	; 0
    7c92:	f0 e0       	ldi	r31, 0x00	; 0
    7c94:	ec 17       	cp	r30, r28
    7c96:	fd 07       	cpc	r31, r29
    7c98:	ec f4       	brge	.+58     	; 0x7cd4 <bin2num+0xaa>
    7c9a:	ea 15       	cp	r30, r10
    7c9c:	fb 05       	cpc	r31, r11
    7c9e:	4c f0       	brlt	.+18     	; 0x7cb2 <bin2num+0x88>
    7ca0:	dc 01       	movw	r26, r24
    7ca2:	ae 0f       	add	r26, r30
    7ca4:	bf 1f       	adc	r27, r31
    7ca6:	1c 92       	st	X, r1
    7ca8:	41 e0       	ldi	r20, 0x01	; 1
    7caa:	e4 1a       	sub	r14, r20
    7cac:	f1 08       	sbc	r15, r1
    7cae:	ef 01       	movw	r28, r30
    7cb0:	d8 cf       	rjmp	.-80     	; 0x7c62 <bin2num+0x38>
    7cb2:	9c 90       	ld	r9, X
    7cb4:	99 0c       	add	r9, r9
    7cb6:	94 2a       	or	r9, r20
    7cb8:	49 2d       	mov	r20, r9
    7cba:	50 e0       	ldi	r21, 0x00	; 0
    7cbc:	42 17       	cp	r20, r18
    7cbe:	53 07       	cpc	r21, r19
    7cc0:	24 f0       	brlt	.+8      	; 0x7cca <bin2num+0xa0>
    7cc2:	92 1a       	sub	r9, r18
    7cc4:	41 e0       	ldi	r20, 0x01	; 1
    7cc6:	50 e0       	ldi	r21, 0x00	; 0
    7cc8:	02 c0       	rjmp	.+4      	; 0x7cce <bin2num+0xa4>
    7cca:	40 e0       	ldi	r20, 0x00	; 0
    7ccc:	50 e0       	ldi	r21, 0x00	; 0
    7cce:	9d 92       	st	X+, r9
    7cd0:	31 96       	adiw	r30, 0x01	; 1
    7cd2:	e0 cf       	rjmp	.-64     	; 0x7c94 <bin2num+0x6a>
    7cd4:	41 15       	cp	r20, r1
    7cd6:	51 05       	cpc	r21, r1
    7cd8:	01 f7       	brne	.-64     	; 0x7c9a <bin2num+0x70>
    7cda:	e2 cf       	rjmp	.-60     	; 0x7ca0 <bin2num+0x76>
    7cdc:	fc 01       	movw	r30, r24
    7cde:	9f 01       	movw	r18, r30
    7ce0:	28 1b       	sub	r18, r24
    7ce2:	39 0b       	sbc	r19, r25
    7ce4:	2c 17       	cp	r18, r28
    7ce6:	3d 07       	cpc	r19, r29
    7ce8:	4c f4       	brge	.+18     	; 0x7cfc <bin2num+0xd2>
    7cea:	20 81       	ld	r18, Z
    7cec:	2a 30       	cpi	r18, 0x0A	; 10
    7cee:	10 f4       	brcc	.+4      	; 0x7cf4 <bin2num+0xca>
    7cf0:	20 5d       	subi	r18, 0xD0	; 208
    7cf2:	01 c0       	rjmp	.+2      	; 0x7cf6 <bin2num+0xcc>
    7cf4:	29 5a       	subi	r18, 0xA9	; 169
    7cf6:	20 83       	st	Z, r18
    7cf8:	31 96       	adiw	r30, 0x01	; 1
    7cfa:	f1 cf       	rjmp	.-30     	; 0x7cde <bin2num+0xb4>
    7cfc:	9e 01       	movw	r18, r28
    7cfe:	d7 ff       	sbrs	r29, 7
    7d00:	02 c0       	rjmp	.+4      	; 0x7d06 <bin2num+0xdc>
    7d02:	20 e0       	ldi	r18, 0x00	; 0
    7d04:	30 e0       	ldi	r19, 0x00	; 0
    7d06:	c1 14       	cp	r12, r1
    7d08:	d1 04       	cpc	r13, r1
    7d0a:	61 f0       	breq	.+24     	; 0x7d24 <bin2num+0xfa>
    7d0c:	61 50       	subi	r22, 0x01	; 1
    7d0e:	71 09       	sbc	r23, r1
    7d10:	26 17       	cp	r18, r22
    7d12:	37 07       	cpc	r19, r23
    7d14:	3c f4       	brge	.+14     	; 0x7d24 <bin2num+0xfa>
    7d16:	fc 01       	movw	r30, r24
    7d18:	e2 0f       	add	r30, r18
    7d1a:	f3 1f       	adc	r31, r19
    7d1c:	c0 82       	st	Z, r12
    7d1e:	21 96       	adiw	r28, 0x01	; 1
    7d20:	2f 5f       	subi	r18, 0xFF	; 255
    7d22:	3f 4f       	sbci	r19, 0xFF	; 255
    7d24:	fc 01       	movw	r30, r24
    7d26:	e2 0f       	add	r30, r18
    7d28:	f3 1f       	adc	r31, r19
    7d2a:	10 82       	st	Z, r1
    7d2c:	0e 94 55 31 	call	0x62aa	; 0x62aa <reverse>
    7d30:	ce 01       	movw	r24, r28
    7d32:	cd b7       	in	r28, 0x3d	; 61
    7d34:	de b7       	in	r29, 0x3e	; 62
    7d36:	eb e0       	ldi	r30, 0x0B	; 11
    7d38:	0c 94 d6 e6 	jmp	0x1cdac	; 0x1cdac <__epilogue_restores__+0xe>

00007d3c <pch>:
    7d3c:	fc 01       	movw	r30, r24
    7d3e:	22 81       	ldd	r18, Z+2	; 0x02
    7d40:	33 81       	ldd	r19, Z+3	; 0x03
    7d42:	44 81       	ldd	r20, Z+4	; 0x04
    7d44:	55 81       	ldd	r21, Z+5	; 0x05
    7d46:	80 81       	ld	r24, Z
    7d48:	91 81       	ldd	r25, Z+1	; 0x01
    7d4a:	24 17       	cp	r18, r20
    7d4c:	35 07       	cpc	r19, r21
    7d4e:	54 f4       	brge	.+20     	; 0x7d64 <pch+0x28>
    7d50:	a9 01       	movw	r20, r18
    7d52:	4f 5f       	subi	r20, 0xFF	; 255
    7d54:	5f 4f       	sbci	r21, 0xFF	; 255
    7d56:	53 83       	std	Z+3, r21	; 0x03
    7d58:	42 83       	std	Z+2, r20	; 0x02
    7d5a:	dc 01       	movw	r26, r24
    7d5c:	a2 0f       	add	r26, r18
    7d5e:	b3 1f       	adc	r27, r19
    7d60:	6c 93       	st	X, r22
    7d62:	04 c0       	rjmp	.+8      	; 0x7d6c <pch+0x30>
    7d64:	dc 01       	movw	r26, r24
    7d66:	a2 0f       	add	r26, r18
    7d68:	b3 1f       	adc	r27, r19
    7d6a:	1c 92       	st	X, r1
    7d6c:	82 81       	ldd	r24, Z+2	; 0x02
    7d6e:	93 81       	ldd	r25, Z+3	; 0x03
    7d70:	08 95       	ret

00007d72 <p_ntoa>:
    7d72:	af 92       	push	r10
    7d74:	cf 92       	push	r12
    7d76:	df 92       	push	r13
    7d78:	ef 92       	push	r14
    7d7a:	ff 92       	push	r15
    7d7c:	0f 93       	push	r16
    7d7e:	1f 93       	push	r17
    7d80:	cf 93       	push	r28
    7d82:	df 93       	push	r29
    7d84:	dc 01       	movw	r26, r24
    7d86:	eb 01       	movw	r28, r22
    7d88:	fa 01       	movw	r30, r20
    7d8a:	b9 01       	movw	r22, r18
    7d8c:	98 01       	movw	r18, r16
    7d8e:	a6 01       	movw	r20, r12
    7d90:	9a 2d       	mov	r25, r10
    7d92:	a5 fa       	bst	r10, 5
    7d94:	cc 24       	eor	r12, r12
    7d96:	c0 f8       	bld	r12, 0
    7d98:	a6 fc       	sbrc	r10, 6
    7d9a:	07 c0       	rjmp	.+14     	; 0x7daa <p_ntoa+0x38>
    7d9c:	a2 fc       	sbrc	r10, 2
    7d9e:	08 c0       	rjmp	.+16     	; 0x7db0 <p_ntoa+0x3e>
    7da0:	a4 fe       	sbrs	r10, 4
    7da2:	09 c0       	rjmp	.+18     	; 0x7db6 <p_ntoa+0x44>
    7da4:	00 e2       	ldi	r16, 0x20	; 32
    7da6:	10 e0       	ldi	r17, 0x00	; 0
    7da8:	08 c0       	rjmp	.+16     	; 0x7dba <p_ntoa+0x48>
    7daa:	0d e2       	ldi	r16, 0x2D	; 45
    7dac:	10 e0       	ldi	r17, 0x00	; 0
    7dae:	05 c0       	rjmp	.+10     	; 0x7dba <p_ntoa+0x48>
    7db0:	0b e2       	ldi	r16, 0x2B	; 43
    7db2:	10 e0       	ldi	r17, 0x00	; 0
    7db4:	02 c0       	rjmp	.+4      	; 0x7dba <p_ntoa+0x48>
    7db6:	00 e0       	ldi	r16, 0x00	; 0
    7db8:	10 e0       	ldi	r17, 0x00	; 0
    7dba:	95 ff       	sbrs	r25, 5
    7dbc:	04 c0       	rjmp	.+8      	; 0x7dc6 <p_ntoa+0x54>
    7dbe:	89 2f       	mov	r24, r25
    7dc0:	8a 70       	andi	r24, 0x0A	; 10
    7dc2:	09 f0       	breq	.+2      	; 0x7dc6 <p_ntoa+0x54>
    7dc4:	c1 2c       	mov	r12, r1
    7dc6:	c0 fa       	bst	r12, 0
    7dc8:	95 f9       	bld	r25, 5
    7dca:	89 2f       	mov	r24, r25
    7dcc:	82 70       	andi	r24, 0x02	; 2
    7dce:	c8 2e       	mov	r12, r24
    7dd0:	91 fd       	sbrc	r25, 1
    7dd2:	02 c0       	rjmp	.+4      	; 0x7dd8 <p_ntoa+0x66>
    7dd4:	40 e0       	ldi	r20, 0x00	; 0
    7dd6:	50 e0       	ldi	r21, 0x00	; 0
    7dd8:	89 2f       	mov	r24, r25
    7dda:	83 70       	andi	r24, 0x03	; 3
    7ddc:	11 f4       	brne	.+4      	; 0x7de2 <p_ntoa+0x70>
    7dde:	41 e0       	ldi	r20, 0x01	; 1
    7de0:	50 e0       	ldi	r21, 0x00	; 0
    7de2:	90 ff       	sbrs	r25, 0
    7de4:	0c c0       	rjmp	.+24     	; 0x7dfe <p_ntoa+0x8c>
    7de6:	95 fd       	sbrc	r25, 5
    7de8:	05 c0       	rjmp	.+10     	; 0x7df4 <p_ntoa+0x82>
    7dea:	c1 10       	cpse	r12, r1
    7dec:	08 c0       	rjmp	.+16     	; 0x7dfe <p_ntoa+0x8c>
    7dee:	41 e0       	ldi	r20, 0x01	; 1
    7df0:	50 e0       	ldi	r21, 0x00	; 0
    7df2:	05 c0       	rjmp	.+10     	; 0x7dfe <p_ntoa+0x8c>
    7df4:	94 75       	andi	r25, 0x54	; 84
    7df6:	a7 01       	movw	r20, r14
    7df8:	11 f0       	breq	.+4      	; 0x7dfe <p_ntoa+0x8c>
    7dfa:	41 50       	subi	r20, 0x01	; 1
    7dfc:	51 09       	sbc	r21, r1
    7dfe:	68 01       	movw	r12, r16
    7e00:	7e 01       	movw	r14, r28
    7e02:	8d 01       	movw	r16, r26
    7e04:	cf 01       	movw	r24, r30
    7e06:	11 df       	rcall	.-478    	; 0x7c2a <bin2num>
    7e08:	df 91       	pop	r29
    7e0a:	cf 91       	pop	r28
    7e0c:	1f 91       	pop	r17
    7e0e:	0f 91       	pop	r16
    7e10:	ff 90       	pop	r15
    7e12:	ef 90       	pop	r14
    7e14:	df 90       	pop	r13
    7e16:	cf 90       	pop	r12
    7e18:	af 90       	pop	r10
    7e1a:	08 95       	ret

00007e1c <p_ftoa>:
    7e1c:	aa e0       	ldi	r26, 0x0A	; 10
    7e1e:	b0 e0       	ldi	r27, 0x00	; 0
    7e20:	e4 e1       	ldi	r30, 0x14	; 20
    7e22:	ff e3       	ldi	r31, 0x3F	; 63
    7e24:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    7e28:	4b 01       	movw	r8, r22
    7e2a:	5c 01       	movw	r10, r24
    7e2c:	1a 01       	movw	r2, r20
    7e2e:	28 01       	movw	r4, r16
    7e30:	c6 fa       	bst	r12, 6
    7e32:	11 27       	eor	r17, r17
    7e34:	10 f9       	bld	r17, 0
    7e36:	5a 83       	std	Y+2, r21	; 0x02
    7e38:	49 83       	std	Y+1, r20	; 0x01
    7e3a:	1c 82       	std	Y+4, r1	; 0x04
    7e3c:	1b 82       	std	Y+3, r1	; 0x03
    7e3e:	21 50       	subi	r18, 0x01	; 1
    7e40:	31 09       	sbc	r19, r1
    7e42:	3e 83       	std	Y+6, r19	; 0x06
    7e44:	2d 83       	std	Y+5, r18	; 0x05
    7e46:	fa 01       	movw	r30, r20
    7e48:	10 82       	st	Z, r1
    7e4a:	20 e0       	ldi	r18, 0x00	; 0
    7e4c:	30 e0       	ldi	r19, 0x00	; 0
    7e4e:	a9 01       	movw	r20, r18
    7e50:	0e 94 71 e7 	call	0x1cee2	; 0x1cee2 <__cmpsf2>
    7e54:	87 ff       	sbrs	r24, 7
    7e56:	05 c0       	rjmp	.+10     	; 0x7e62 <p_ftoa+0x46>
    7e58:	b7 fa       	bst	r11, 7
    7e5a:	b0 94       	com	r11
    7e5c:	b7 f8       	bld	r11, 7
    7e5e:	b0 94       	com	r11
    7e60:	11 e0       	ldi	r17, 0x01	; 1
    7e62:	10 fb       	bst	r17, 0
    7e64:	c6 f8       	bld	r12, 6
    7e66:	c6 fe       	sbrs	r12, 6
    7e68:	02 c0       	rjmp	.+4      	; 0x7e6e <p_ftoa+0x52>
    7e6a:	6d e2       	ldi	r22, 0x2D	; 45
    7e6c:	07 c0       	rjmp	.+14     	; 0x7e7c <p_ftoa+0x60>
    7e6e:	c2 fe       	sbrs	r12, 2
    7e70:	02 c0       	rjmp	.+4      	; 0x7e76 <p_ftoa+0x5a>
    7e72:	6b e2       	ldi	r22, 0x2B	; 43
    7e74:	03 c0       	rjmp	.+6      	; 0x7e7c <p_ftoa+0x60>
    7e76:	c4 fe       	sbrs	r12, 4
    7e78:	04 c0       	rjmp	.+8      	; 0x7e82 <p_ftoa+0x66>
    7e7a:	60 e2       	ldi	r22, 0x20	; 32
    7e7c:	ce 01       	movw	r24, r28
    7e7e:	01 96       	adiw	r24, 0x01	; 1
    7e80:	5d df       	rcall	.-326    	; 0x7d3c <pch>
    7e82:	37 01       	movw	r6, r14
    7e84:	f7 fe       	sbrs	r15, 7
    7e86:	02 c0       	rjmp	.+4      	; 0x7e8c <p_ftoa+0x70>
    7e88:	61 2c       	mov	r6, r1
    7e8a:	71 2c       	mov	r7, r1
    7e8c:	20 e0       	ldi	r18, 0x00	; 0
    7e8e:	30 e0       	ldi	r19, 0x00	; 0
    7e90:	a9 01       	movw	r20, r18
    7e92:	c5 01       	movw	r24, r10
    7e94:	b4 01       	movw	r22, r8
    7e96:	0e 94 71 e7 	call	0x1cee2	; 0x1cee2 <__cmpsf2>
    7e9a:	88 23       	and	r24, r24
    7e9c:	d1 f1       	breq	.+116    	; 0x7f12 <p_ftoa+0xf6>
    7e9e:	c1 fe       	sbrs	r12, 1
    7ea0:	11 c0       	rjmp	.+34     	; 0x7ec4 <p_ftoa+0xa8>
    7ea2:	83 01       	movw	r16, r6
    7ea4:	60 e0       	ldi	r22, 0x00	; 0
    7ea6:	70 e0       	ldi	r23, 0x00	; 0
    7ea8:	80 e0       	ldi	r24, 0x00	; 0
    7eaa:	9f e3       	ldi	r25, 0x3F	; 63
    7eac:	01 15       	cp	r16, r1
    7eae:	11 05       	cpc	r17, r1
    7eb0:	69 f0       	breq	.+26     	; 0x7ecc <p_ftoa+0xb0>
    7eb2:	20 e0       	ldi	r18, 0x00	; 0
    7eb4:	30 e0       	ldi	r19, 0x00	; 0
    7eb6:	40 e2       	ldi	r20, 0x20	; 32
    7eb8:	51 e4       	ldi	r21, 0x41	; 65
    7eba:	0e 94 75 e7 	call	0x1ceea	; 0x1ceea <__divsf3>
    7ebe:	01 50       	subi	r16, 0x01	; 1
    7ec0:	11 09       	sbc	r17, r1
    7ec2:	f4 cf       	rjmp	.-24     	; 0x7eac <p_ftoa+0x90>
    7ec4:	60 e0       	ldi	r22, 0x00	; 0
    7ec6:	70 e0       	ldi	r23, 0x00	; 0
    7ec8:	80 e0       	ldi	r24, 0x00	; 0
    7eca:	9f e3       	ldi	r25, 0x3F	; 63
    7ecc:	9b 01       	movw	r18, r22
    7ece:	ac 01       	movw	r20, r24
    7ed0:	c5 01       	movw	r24, r10
    7ed2:	b4 01       	movw	r22, r8
    7ed4:	0e 94 0d e7 	call	0x1ce1a	; 0x1ce1a <__addsf3>
    7ed8:	4b 01       	movw	r8, r22
    7eda:	5c 01       	movw	r10, r24
    7edc:	ee 24       	eor	r14, r14
    7ede:	e3 94       	inc	r14
    7ee0:	f1 2c       	mov	r15, r1
    7ee2:	20 e0       	ldi	r18, 0x00	; 0
    7ee4:	30 e0       	ldi	r19, 0x00	; 0
    7ee6:	40 e2       	ldi	r20, 0x20	; 32
    7ee8:	51 e4       	ldi	r21, 0x41	; 65
    7eea:	c5 01       	movw	r24, r10
    7eec:	b4 01       	movw	r22, r8
    7eee:	0e 94 c0 e8 	call	0x1d180	; 0x1d180 <__gesf2>
    7ef2:	87 fd       	sbrc	r24, 7
    7ef4:	11 c0       	rjmp	.+34     	; 0x7f18 <p_ftoa+0xfc>
    7ef6:	ff ef       	ldi	r31, 0xFF	; 255
    7ef8:	ef 1a       	sub	r14, r31
    7efa:	ff 0a       	sbc	r15, r31
    7efc:	20 e0       	ldi	r18, 0x00	; 0
    7efe:	30 e0       	ldi	r19, 0x00	; 0
    7f00:	40 e2       	ldi	r20, 0x20	; 32
    7f02:	51 e4       	ldi	r21, 0x41	; 65
    7f04:	c5 01       	movw	r24, r10
    7f06:	b4 01       	movw	r22, r8
    7f08:	0e 94 75 e7 	call	0x1ceea	; 0x1ceea <__divsf3>
    7f0c:	4b 01       	movw	r8, r22
    7f0e:	5c 01       	movw	r10, r24
    7f10:	e8 cf       	rjmp	.-48     	; 0x7ee2 <p_ftoa+0xc6>
    7f12:	ee 24       	eor	r14, r14
    7f14:	e3 94       	inc	r14
    7f16:	f1 2c       	mov	r15, r1
    7f18:	8c 2d       	mov	r24, r12
    7f1a:	88 72       	andi	r24, 0x28	; 40
    7f1c:	80 32       	cpi	r24, 0x20	; 32
    7f1e:	c1 f4       	brne	.+48     	; 0x7f50 <p_ftoa+0x134>
    7f20:	82 01       	movw	r16, r4
    7f22:	0e 19       	sub	r16, r14
    7f24:	1f 09       	sbc	r17, r15
    7f26:	8b 81       	ldd	r24, Y+3	; 0x03
    7f28:	9c 81       	ldd	r25, Y+4	; 0x04
    7f2a:	08 1b       	sub	r16, r24
    7f2c:	19 0b       	sbc	r17, r25
    7f2e:	c1 fe       	sbrs	r12, 1
    7f30:	07 c0       	rjmp	.+14     	; 0x7f40 <p_ftoa+0x124>
    7f32:	61 14       	cp	r6, r1
    7f34:	71 04       	cpc	r7, r1
    7f36:	21 f0       	breq	.+8      	; 0x7f40 <p_ftoa+0x124>
    7f38:	06 19       	sub	r16, r6
    7f3a:	17 09       	sbc	r17, r7
    7f3c:	01 50       	subi	r16, 0x01	; 1
    7f3e:	11 09       	sbc	r17, r1
    7f40:	10 16       	cp	r1, r16
    7f42:	11 06       	cpc	r1, r17
    7f44:	2c f4       	brge	.+10     	; 0x7f50 <p_ftoa+0x134>
    7f46:	60 e3       	ldi	r22, 0x30	; 48
    7f48:	ce 01       	movw	r24, r28
    7f4a:	01 96       	adiw	r24, 0x01	; 1
    7f4c:	f7 de       	rcall	.-530    	; 0x7d3c <pch>
    7f4e:	f6 cf       	rjmp	.-20     	; 0x7f3c <p_ftoa+0x120>
    7f50:	c5 01       	movw	r24, r10
    7f52:	b4 01       	movw	r22, r8
    7f54:	0e 94 dd e7 	call	0x1cfba	; 0x1cfba <__fixsfsi>
    7f58:	6f 83       	std	Y+7, r22	; 0x07
    7f5a:	78 87       	std	Y+8, r23	; 0x08
    7f5c:	89 87       	std	Y+9, r24	; 0x09
    7f5e:	9a 87       	std	Y+10, r25	; 0x0a
    7f60:	6f 81       	ldd	r22, Y+7	; 0x07
    7f62:	60 5d       	subi	r22, 0xD0	; 208
    7f64:	ce 01       	movw	r24, r28
    7f66:	01 96       	adiw	r24, 0x01	; 1
    7f68:	e9 de       	rcall	.-558    	; 0x7d3c <pch>
    7f6a:	2f 81       	ldd	r18, Y+7	; 0x07
    7f6c:	38 85       	ldd	r19, Y+8	; 0x08
    7f6e:	b9 01       	movw	r22, r18
    7f70:	33 0f       	add	r19, r19
    7f72:	88 0b       	sbc	r24, r24
    7f74:	99 0b       	sbc	r25, r25
    7f76:	0e 94 10 e8 	call	0x1d020	; 0x1d020 <__floatsisf>
    7f7a:	9b 01       	movw	r18, r22
    7f7c:	ac 01       	movw	r20, r24
    7f7e:	c5 01       	movw	r24, r10
    7f80:	b4 01       	movw	r22, r8
    7f82:	0e 94 0c e7 	call	0x1ce18	; 0x1ce18 <__subsf3>
    7f86:	31 e0       	ldi	r19, 0x01	; 1
    7f88:	e3 1a       	sub	r14, r19
    7f8a:	f1 08       	sbc	r15, r1
    7f8c:	20 e0       	ldi	r18, 0x00	; 0
    7f8e:	30 e0       	ldi	r19, 0x00	; 0
    7f90:	40 e2       	ldi	r20, 0x20	; 32
    7f92:	51 e4       	ldi	r21, 0x41	; 65
    7f94:	0e 94 c4 e8 	call	0x1d188	; 0x1d188 <__mulsf3>
    7f98:	4b 01       	movw	r8, r22
    7f9a:	5c 01       	movw	r10, r24
    7f9c:	e1 14       	cp	r14, r1
    7f9e:	f1 04       	cpc	r15, r1
    7fa0:	b9 f6       	brne	.-82     	; 0x7f50 <p_ftoa+0x134>
    7fa2:	c1 fc       	sbrc	r12, 1
    7fa4:	10 c0       	rjmp	.+32     	; 0x7fc6 <p_ftoa+0x1aa>
    7fa6:	60 e0       	ldi	r22, 0x00	; 0
    7fa8:	ce 01       	movw	r24, r28
    7faa:	01 96       	adiw	r24, 0x01	; 1
    7fac:	c7 de       	rcall	.-626    	; 0x7d3c <pch>
    7fae:	f1 01       	movw	r30, r2
    7fb0:	01 90       	ld	r0, Z+
    7fb2:	00 20       	and	r0, r0
    7fb4:	e9 f7       	brne	.-6      	; 0x7fb0 <p_ftoa+0x194>
    7fb6:	31 97       	sbiw	r30, 0x01	; 1
    7fb8:	cf 01       	movw	r24, r30
    7fba:	82 19       	sub	r24, r2
    7fbc:	93 09       	sbc	r25, r3
    7fbe:	2a 96       	adiw	r28, 0x0a	; 10
    7fc0:	e2 e1       	ldi	r30, 0x12	; 18
    7fc2:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>
    7fc6:	61 14       	cp	r6, r1
    7fc8:	71 04       	cpc	r7, r1
    7fca:	69 f3       	breq	.-38     	; 0x7fa6 <p_ftoa+0x18a>
    7fcc:	6e e2       	ldi	r22, 0x2E	; 46
    7fce:	ce 01       	movw	r24, r28
    7fd0:	01 96       	adiw	r24, 0x01	; 1
    7fd2:	b4 de       	rcall	.-664    	; 0x7d3c <pch>
    7fd4:	c5 01       	movw	r24, r10
    7fd6:	b4 01       	movw	r22, r8
    7fd8:	0e 94 dd e7 	call	0x1cfba	; 0x1cfba <__fixsfsi>
    7fdc:	6b 01       	movw	r12, r22
    7fde:	7c 01       	movw	r14, r24
    7fe0:	07 2e       	mov	r0, r23
    7fe2:	00 0c       	add	r0, r0
    7fe4:	88 0b       	sbc	r24, r24
    7fe6:	99 0b       	sbc	r25, r25
    7fe8:	0e 94 10 e8 	call	0x1d020	; 0x1d020 <__floatsisf>
    7fec:	9b 01       	movw	r18, r22
    7fee:	ac 01       	movw	r20, r24
    7ff0:	c5 01       	movw	r24, r10
    7ff2:	b4 01       	movw	r22, r8
    7ff4:	0e 94 0c e7 	call	0x1ce18	; 0x1ce18 <__subsf3>
    7ff8:	4b 01       	movw	r8, r22
    7ffa:	5c 01       	movw	r10, r24
    7ffc:	b6 01       	movw	r22, r12
    7ffe:	60 5d       	subi	r22, 0xD0	; 208
    8000:	7f 4f       	sbci	r23, 0xFF	; 255
    8002:	ce 01       	movw	r24, r28
    8004:	01 96       	adiw	r24, 0x01	; 1
    8006:	9a de       	rcall	.-716    	; 0x7d3c <pch>
    8008:	81 e0       	ldi	r24, 0x01	; 1
    800a:	68 1a       	sub	r6, r24
    800c:	71 08       	sbc	r7, r1
    800e:	20 e0       	ldi	r18, 0x00	; 0
    8010:	30 e0       	ldi	r19, 0x00	; 0
    8012:	40 e2       	ldi	r20, 0x20	; 32
    8014:	51 e4       	ldi	r21, 0x41	; 65
    8016:	c5 01       	movw	r24, r10
    8018:	b4 01       	movw	r22, r8
    801a:	0e 94 c4 e8 	call	0x1d188	; 0x1d188 <__mulsf3>
    801e:	4b 01       	movw	r8, r22
    8020:	5c 01       	movw	r10, r24
    8022:	61 14       	cp	r6, r1
    8024:	71 04       	cpc	r7, r1
    8026:	b1 f6       	brne	.-84     	; 0x7fd4 <p_ftoa+0x1b8>
    8028:	be cf       	rjmp	.-132    	; 0x7fa6 <p_ftoa+0x18a>

0000802a <p_etoa>:
    802a:	a3 e1       	ldi	r26, 0x13	; 19
    802c:	b0 e0       	ldi	r27, 0x00	; 0
    802e:	eb e1       	ldi	r30, 0x1B	; 27
    8030:	f0 e4       	ldi	r31, 0x40	; 64
    8032:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    8036:	4b 01       	movw	r8, r22
    8038:	5c 01       	movw	r10, r24
    803a:	59 8b       	std	Y+17, r21	; 0x11
    803c:	48 8b       	std	Y+16, r20	; 0x10
    803e:	1b 8b       	std	Y+19, r17	; 0x13
    8040:	0a 8b       	std	Y+18, r16	; 0x12
    8042:	3c 2c       	mov	r3, r12
    8044:	c6 fa       	bst	r12, 6
    8046:	11 27       	eor	r17, r17
    8048:	10 f9       	bld	r17, 0
    804a:	59 87       	std	Y+9, r21	; 0x09
    804c:	48 87       	std	Y+8, r20	; 0x08
    804e:	1b 86       	std	Y+11, r1	; 0x0b
    8050:	1a 86       	std	Y+10, r1	; 0x0a
    8052:	21 50       	subi	r18, 0x01	; 1
    8054:	31 09       	sbc	r19, r1
    8056:	3d 87       	std	Y+13, r19	; 0x0d
    8058:	2c 87       	std	Y+12, r18	; 0x0c
    805a:	fa 01       	movw	r30, r20
    805c:	10 82       	st	Z, r1
    805e:	20 e0       	ldi	r18, 0x00	; 0
    8060:	30 e0       	ldi	r19, 0x00	; 0
    8062:	a9 01       	movw	r20, r18
    8064:	0e 94 71 e7 	call	0x1cee2	; 0x1cee2 <__cmpsf2>
    8068:	87 ff       	sbrs	r24, 7
    806a:	05 c0       	rjmp	.+10     	; 0x8076 <p_etoa+0x4c>
    806c:	b7 fa       	bst	r11, 7
    806e:	b0 94       	com	r11
    8070:	b7 f8       	bld	r11, 7
    8072:	b0 94       	com	r11
    8074:	11 e0       	ldi	r17, 0x01	; 1
    8076:	10 fb       	bst	r17, 0
    8078:	36 f8       	bld	r3, 6
    807a:	36 fe       	sbrs	r3, 6
    807c:	02 c0       	rjmp	.+4      	; 0x8082 <p_etoa+0x58>
    807e:	6d e2       	ldi	r22, 0x2D	; 45
    8080:	07 c0       	rjmp	.+14     	; 0x8090 <p_etoa+0x66>
    8082:	32 fe       	sbrs	r3, 2
    8084:	02 c0       	rjmp	.+4      	; 0x808a <p_etoa+0x60>
    8086:	6b e2       	ldi	r22, 0x2B	; 43
    8088:	03 c0       	rjmp	.+6      	; 0x8090 <p_etoa+0x66>
    808a:	34 fe       	sbrs	r3, 4
    808c:	04 c0       	rjmp	.+8      	; 0x8096 <p_etoa+0x6c>
    808e:	60 e2       	ldi	r22, 0x20	; 32
    8090:	ce 01       	movw	r24, r28
    8092:	08 96       	adiw	r24, 0x08	; 8
    8094:	53 de       	rcall	.-858    	; 0x7d3c <pch>
    8096:	37 01       	movw	r6, r14
    8098:	f7 fe       	sbrs	r15, 7
    809a:	02 c0       	rjmp	.+4      	; 0x80a0 <p_etoa+0x76>
    809c:	61 2c       	mov	r6, r1
    809e:	71 2c       	mov	r7, r1
    80a0:	1f 86       	std	Y+15, r1	; 0x0f
    80a2:	1e 86       	std	Y+14, r1	; 0x0e
    80a4:	20 e0       	ldi	r18, 0x00	; 0
    80a6:	30 e0       	ldi	r19, 0x00	; 0
    80a8:	a9 01       	movw	r20, r18
    80aa:	c5 01       	movw	r24, r10
    80ac:	b4 01       	movw	r22, r8
    80ae:	0e 94 71 e7 	call	0x1cee2	; 0x1cee2 <__cmpsf2>
    80b2:	f3 2d       	mov	r31, r3
    80b4:	f2 70       	andi	r31, 0x02	; 2
    80b6:	2f 2e       	mov	r2, r31
    80b8:	88 23       	and	r24, r24
    80ba:	09 f4       	brne	.+2      	; 0x80be <p_etoa+0x94>
    80bc:	70 c0       	rjmp	.+224    	; 0x819e <p_etoa+0x174>
    80be:	ff 23       	and	r31, r31
    80c0:	b1 f0       	breq	.+44     	; 0x80ee <p_etoa+0xc4>
    80c2:	83 01       	movw	r16, r6
    80c4:	c1 2c       	mov	r12, r1
    80c6:	d1 2c       	mov	r13, r1
    80c8:	e1 2c       	mov	r14, r1
    80ca:	2f e3       	ldi	r18, 0x3F	; 63
    80cc:	f2 2e       	mov	r15, r18
    80ce:	01 15       	cp	r16, r1
    80d0:	11 05       	cpc	r17, r1
    80d2:	91 f0       	breq	.+36     	; 0x80f8 <p_etoa+0xce>
    80d4:	20 e0       	ldi	r18, 0x00	; 0
    80d6:	30 e0       	ldi	r19, 0x00	; 0
    80d8:	40 e2       	ldi	r20, 0x20	; 32
    80da:	51 e4       	ldi	r21, 0x41	; 65
    80dc:	c7 01       	movw	r24, r14
    80de:	b6 01       	movw	r22, r12
    80e0:	0e 94 75 e7 	call	0x1ceea	; 0x1ceea <__divsf3>
    80e4:	6b 01       	movw	r12, r22
    80e6:	7c 01       	movw	r14, r24
    80e8:	01 50       	subi	r16, 0x01	; 1
    80ea:	11 09       	sbc	r17, r1
    80ec:	f0 cf       	rjmp	.-32     	; 0x80ce <p_etoa+0xa4>
    80ee:	c1 2c       	mov	r12, r1
    80f0:	d1 2c       	mov	r13, r1
    80f2:	e1 2c       	mov	r14, r1
    80f4:	9f e3       	ldi	r25, 0x3F	; 63
    80f6:	f9 2e       	mov	r15, r25
    80f8:	41 2c       	mov	r4, r1
    80fa:	51 2c       	mov	r5, r1
    80fc:	82 01       	movw	r16, r4
    80fe:	01 50       	subi	r16, 0x01	; 1
    8100:	11 09       	sbc	r17, r1
    8102:	20 e0       	ldi	r18, 0x00	; 0
    8104:	30 e0       	ldi	r19, 0x00	; 0
    8106:	40 e8       	ldi	r20, 0x80	; 128
    8108:	5f e3       	ldi	r21, 0x3F	; 63
    810a:	c5 01       	movw	r24, r10
    810c:	b4 01       	movw	r22, r8
    810e:	0e 94 71 e7 	call	0x1cee2	; 0x1cee2 <__cmpsf2>
    8112:	87 ff       	sbrs	r24, 7
    8114:	0c c0       	rjmp	.+24     	; 0x812e <p_etoa+0x104>
    8116:	20 e0       	ldi	r18, 0x00	; 0
    8118:	30 e0       	ldi	r19, 0x00	; 0
    811a:	40 e2       	ldi	r20, 0x20	; 32
    811c:	51 e4       	ldi	r21, 0x41	; 65
    811e:	c5 01       	movw	r24, r10
    8120:	b4 01       	movw	r22, r8
    8122:	0e 94 c4 e8 	call	0x1d188	; 0x1d188 <__mulsf3>
    8126:	4b 01       	movw	r8, r22
    8128:	5c 01       	movw	r10, r24
    812a:	28 01       	movw	r4, r16
    812c:	e7 cf       	rjmp	.-50     	; 0x80fc <p_etoa+0xd2>
    812e:	82 01       	movw	r16, r4
    8130:	0f 5f       	subi	r16, 0xFF	; 255
    8132:	1f 4f       	sbci	r17, 0xFF	; 255
    8134:	20 e0       	ldi	r18, 0x00	; 0
    8136:	30 e0       	ldi	r19, 0x00	; 0
    8138:	40 e2       	ldi	r20, 0x20	; 32
    813a:	51 e4       	ldi	r21, 0x41	; 65
    813c:	c5 01       	movw	r24, r10
    813e:	b4 01       	movw	r22, r8
    8140:	0e 94 c0 e8 	call	0x1d180	; 0x1d180 <__gesf2>
    8144:	87 fd       	sbrc	r24, 7
    8146:	0c c0       	rjmp	.+24     	; 0x8160 <p_etoa+0x136>
    8148:	20 e0       	ldi	r18, 0x00	; 0
    814a:	30 e0       	ldi	r19, 0x00	; 0
    814c:	40 e2       	ldi	r20, 0x20	; 32
    814e:	51 e4       	ldi	r21, 0x41	; 65
    8150:	c5 01       	movw	r24, r10
    8152:	b4 01       	movw	r22, r8
    8154:	0e 94 75 e7 	call	0x1ceea	; 0x1ceea <__divsf3>
    8158:	4b 01       	movw	r8, r22
    815a:	5c 01       	movw	r10, r24
    815c:	28 01       	movw	r4, r16
    815e:	e7 cf       	rjmp	.-50     	; 0x812e <p_etoa+0x104>
    8160:	a7 01       	movw	r20, r14
    8162:	96 01       	movw	r18, r12
    8164:	c5 01       	movw	r24, r10
    8166:	b4 01       	movw	r22, r8
    8168:	0e 94 0d e7 	call	0x1ce1a	; 0x1ce1a <__addsf3>
    816c:	4b 01       	movw	r8, r22
    816e:	5c 01       	movw	r10, r24
    8170:	82 01       	movw	r16, r4
    8172:	2f ef       	ldi	r18, 0xFF	; 255
    8174:	42 1a       	sub	r4, r18
    8176:	52 0a       	sbc	r5, r18
    8178:	20 e0       	ldi	r18, 0x00	; 0
    817a:	30 e0       	ldi	r19, 0x00	; 0
    817c:	40 e2       	ldi	r20, 0x20	; 32
    817e:	51 e4       	ldi	r21, 0x41	; 65
    8180:	0e 94 c0 e8 	call	0x1d180	; 0x1d180 <__gesf2>
    8184:	87 fd       	sbrc	r24, 7
    8186:	09 c0       	rjmp	.+18     	; 0x819a <p_etoa+0x170>
    8188:	20 e0       	ldi	r18, 0x00	; 0
    818a:	30 e0       	ldi	r19, 0x00	; 0
    818c:	40 e2       	ldi	r20, 0x20	; 32
    818e:	51 e4       	ldi	r21, 0x41	; 65
    8190:	c5 01       	movw	r24, r10
    8192:	b4 01       	movw	r22, r8
    8194:	0e 94 75 e7 	call	0x1ceea	; 0x1ceea <__divsf3>
    8198:	e9 cf       	rjmp	.-46     	; 0x816c <p_etoa+0x142>
    819a:	0e 87       	std	Y+14, r16	; 0x0e
    819c:	1f 87       	std	Y+15, r17	; 0x0f
    819e:	85 e6       	ldi	r24, 0x65	; 101
    81a0:	89 83       	std	Y+1, r24	; 0x01
    81a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    81a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    81a6:	97 ff       	sbrs	r25, 7
    81a8:	08 c0       	rjmp	.+16     	; 0x81ba <p_etoa+0x190>
    81aa:	91 95       	neg	r25
    81ac:	81 95       	neg	r24
    81ae:	91 09       	sbc	r25, r1
    81b0:	9f 87       	std	Y+15, r25	; 0x0f
    81b2:	8e 87       	std	Y+14, r24	; 0x0e
    81b4:	8d e2       	ldi	r24, 0x2D	; 45
    81b6:	90 e0       	ldi	r25, 0x00	; 0
    81b8:	02 c0       	rjmp	.+4      	; 0x81be <p_etoa+0x194>
    81ba:	8b e2       	ldi	r24, 0x2B	; 43
    81bc:	90 e0       	ldi	r25, 0x00	; 0
    81be:	6c 01       	movw	r12, r24
    81c0:	82 e0       	ldi	r24, 0x02	; 2
    81c2:	e8 2e       	mov	r14, r24
    81c4:	f1 2c       	mov	r15, r1
    81c6:	8e 01       	movw	r16, r28
    81c8:	02 5f       	subi	r16, 0xF2	; 242
    81ca:	1f 4f       	sbci	r17, 0xFF	; 255
    81cc:	2a e0       	ldi	r18, 0x0A	; 10
    81ce:	30 e0       	ldi	r19, 0x00	; 0
    81d0:	42 e0       	ldi	r20, 0x02	; 2
    81d2:	50 e0       	ldi	r21, 0x00	; 0
    81d4:	65 e0       	ldi	r22, 0x05	; 5
    81d6:	70 e0       	ldi	r23, 0x00	; 0
    81d8:	ce 01       	movw	r24, r28
    81da:	02 96       	adiw	r24, 0x02	; 2
    81dc:	26 dd       	rcall	.-1460   	; 0x7c2a <bin2num>
    81de:	9c 01       	movw	r18, r24
    81e0:	93 2d       	mov	r25, r3
    81e2:	98 72       	andi	r25, 0x28	; 40
    81e4:	90 32       	cpi	r25, 0x20	; 32
    81e6:	71 f0       	breq	.+28     	; 0x8204 <p_etoa+0x1da>
    81e8:	c5 01       	movw	r24, r10
    81ea:	b4 01       	movw	r22, r8
    81ec:	0e 94 dd e7 	call	0x1cfba	; 0x1cfba <__fixsfsi>
    81f0:	6b 01       	movw	r12, r22
    81f2:	7c 01       	movw	r14, r24
    81f4:	60 e3       	ldi	r22, 0x30	; 48
    81f6:	6c 0d       	add	r22, r12
    81f8:	ce 01       	movw	r24, r28
    81fa:	08 96       	adiw	r24, 0x08	; 8
    81fc:	9f dd       	rcall	.-1218   	; 0x7d3c <pch>
    81fe:	21 10       	cpse	r2, r1
    8200:	20 c0       	rjmp	.+64     	; 0x8242 <p_etoa+0x218>
    8202:	63 c0       	rjmp	.+198    	; 0x82ca <p_etoa+0x2a0>
    8204:	8a 85       	ldd	r24, Y+10	; 0x0a
    8206:	9b 85       	ldd	r25, Y+11	; 0x0b
    8208:	0a 89       	ldd	r16, Y+18	; 0x12
    820a:	1b 89       	ldd	r17, Y+19	; 0x13
    820c:	08 1b       	sub	r16, r24
    820e:	19 0b       	sbc	r17, r25
    8210:	22 20       	and	r2, r2
    8212:	41 f0       	breq	.+16     	; 0x8224 <p_etoa+0x1fa>
    8214:	61 14       	cp	r6, r1
    8216:	71 04       	cpc	r7, r1
    8218:	29 f0       	breq	.+10     	; 0x8224 <p_etoa+0x1fa>
    821a:	06 19       	sub	r16, r6
    821c:	17 09       	sbc	r17, r7
    821e:	06 50       	subi	r16, 0x06	; 6
    8220:	11 09       	sbc	r17, r1
    8222:	02 c0       	rjmp	.+4      	; 0x8228 <p_etoa+0x1fe>
    8224:	05 50       	subi	r16, 0x05	; 5
    8226:	11 09       	sbc	r17, r1
    8228:	24 30       	cpi	r18, 0x04	; 4
    822a:	31 05       	cpc	r19, r1
    822c:	14 f0       	brlt	.+4      	; 0x8232 <p_etoa+0x208>
    822e:	01 50       	subi	r16, 0x01	; 1
    8230:	11 09       	sbc	r17, r1
    8232:	10 16       	cp	r1, r16
    8234:	11 06       	cpc	r1, r17
    8236:	c4 f6       	brge	.-80     	; 0x81e8 <p_etoa+0x1be>
    8238:	60 e3       	ldi	r22, 0x30	; 48
    823a:	ce 01       	movw	r24, r28
    823c:	08 96       	adiw	r24, 0x08	; 8
    823e:	7e dd       	rcall	.-1284   	; 0x7d3c <pch>
    8240:	f6 cf       	rjmp	.-20     	; 0x822e <p_etoa+0x204>
    8242:	61 14       	cp	r6, r1
    8244:	71 04       	cpc	r7, r1
    8246:	09 f4       	brne	.+2      	; 0x824a <p_etoa+0x220>
    8248:	40 c0       	rjmp	.+128    	; 0x82ca <p_etoa+0x2a0>
    824a:	b6 01       	movw	r22, r12
    824c:	dd 0c       	add	r13, r13
    824e:	88 0b       	sbc	r24, r24
    8250:	99 0b       	sbc	r25, r25
    8252:	0e 94 10 e8 	call	0x1d020	; 0x1d020 <__floatsisf>
    8256:	9b 01       	movw	r18, r22
    8258:	ac 01       	movw	r20, r24
    825a:	c5 01       	movw	r24, r10
    825c:	b4 01       	movw	r22, r8
    825e:	0e 94 0c e7 	call	0x1ce18	; 0x1ce18 <__subsf3>
    8262:	20 e0       	ldi	r18, 0x00	; 0
    8264:	30 e0       	ldi	r19, 0x00	; 0
    8266:	40 e2       	ldi	r20, 0x20	; 32
    8268:	51 e4       	ldi	r21, 0x41	; 65
    826a:	0e 94 c4 e8 	call	0x1d188	; 0x1d188 <__mulsf3>
    826e:	4b 01       	movw	r8, r22
    8270:	5c 01       	movw	r10, r24
    8272:	6e e2       	ldi	r22, 0x2E	; 46
    8274:	ce 01       	movw	r24, r28
    8276:	08 96       	adiw	r24, 0x08	; 8
    8278:	61 dd       	rcall	.-1342   	; 0x7d3c <pch>
    827a:	c5 01       	movw	r24, r10
    827c:	b4 01       	movw	r22, r8
    827e:	0e 94 dd e7 	call	0x1cfba	; 0x1cfba <__fixsfsi>
    8282:	6b 01       	movw	r12, r22
    8284:	7c 01       	movw	r14, r24
    8286:	07 2e       	mov	r0, r23
    8288:	00 0c       	add	r0, r0
    828a:	88 0b       	sbc	r24, r24
    828c:	99 0b       	sbc	r25, r25
    828e:	0e 94 10 e8 	call	0x1d020	; 0x1d020 <__floatsisf>
    8292:	9b 01       	movw	r18, r22
    8294:	ac 01       	movw	r20, r24
    8296:	c5 01       	movw	r24, r10
    8298:	b4 01       	movw	r22, r8
    829a:	0e 94 0c e7 	call	0x1ce18	; 0x1ce18 <__subsf3>
    829e:	4b 01       	movw	r8, r22
    82a0:	5c 01       	movw	r10, r24
    82a2:	b6 01       	movw	r22, r12
    82a4:	60 5d       	subi	r22, 0xD0	; 208
    82a6:	7f 4f       	sbci	r23, 0xFF	; 255
    82a8:	ce 01       	movw	r24, r28
    82aa:	08 96       	adiw	r24, 0x08	; 8
    82ac:	47 dd       	rcall	.-1394   	; 0x7d3c <pch>
    82ae:	20 e0       	ldi	r18, 0x00	; 0
    82b0:	30 e0       	ldi	r19, 0x00	; 0
    82b2:	40 e2       	ldi	r20, 0x20	; 32
    82b4:	51 e4       	ldi	r21, 0x41	; 65
    82b6:	c5 01       	movw	r24, r10
    82b8:	b4 01       	movw	r22, r8
    82ba:	0e 94 c4 e8 	call	0x1d188	; 0x1d188 <__mulsf3>
    82be:	4b 01       	movw	r8, r22
    82c0:	5c 01       	movw	r10, r24
    82c2:	31 e0       	ldi	r19, 0x01	; 1
    82c4:	63 1a       	sub	r6, r19
    82c6:	71 08       	sbc	r7, r1
    82c8:	c1 f6       	brne	.-80     	; 0x827a <p_etoa+0x250>
    82ca:	8e 01       	movw	r16, r28
    82cc:	0f 5f       	subi	r16, 0xFF	; 255
    82ce:	1f 4f       	sbci	r17, 0xFF	; 255
    82d0:	f8 01       	movw	r30, r16
    82d2:	61 91       	ld	r22, Z+
    82d4:	8f 01       	movw	r16, r30
    82d6:	ce 01       	movw	r24, r28
    82d8:	08 96       	adiw	r24, 0x08	; 8
    82da:	66 23       	and	r22, r22
    82dc:	11 f0       	breq	.+4      	; 0x82e2 <p_etoa+0x2b8>
    82de:	2e dd       	rcall	.-1444   	; 0x7d3c <pch>
    82e0:	f7 cf       	rjmp	.-18     	; 0x82d0 <p_etoa+0x2a6>
    82e2:	2c dd       	rcall	.-1448   	; 0x7d3c <pch>
    82e4:	e8 89       	ldd	r30, Y+16	; 0x10
    82e6:	f9 89       	ldd	r31, Y+17	; 0x11
    82e8:	01 90       	ld	r0, Z+
    82ea:	00 20       	and	r0, r0
    82ec:	e9 f7       	brne	.-6      	; 0x82e8 <p_etoa+0x2be>
    82ee:	cf 01       	movw	r24, r30
    82f0:	01 97       	sbiw	r24, 0x01	; 1
    82f2:	28 89       	ldd	r18, Y+16	; 0x10
    82f4:	39 89       	ldd	r19, Y+17	; 0x11
    82f6:	82 1b       	sub	r24, r18
    82f8:	93 0b       	sbc	r25, r19
    82fa:	63 96       	adiw	r28, 0x13	; 19
    82fc:	e2 e1       	ldi	r30, 0x12	; 18
    82fe:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

00008302 <_puts_pad>:
    8302:	a0 e0       	ldi	r26, 0x00	; 0
    8304:	b0 e0       	ldi	r27, 0x00	; 0
    8306:	e7 e8       	ldi	r30, 0x87	; 135
    8308:	f1 e4       	ldi	r31, 0x41	; 65
    830a:	0c 94 b9 e6 	jmp	0x1cd72	; 0x1cd72 <__prologue_saves__+0xc>
    830e:	6c 01       	movw	r12, r24
    8310:	4b 01       	movw	r8, r22
    8312:	79 01       	movw	r14, r18
    8314:	24 17       	cp	r18, r20
    8316:	35 07       	cpc	r19, r21
    8318:	24 f4       	brge	.+8      	; 0x8322 <_puts_pad+0x20>
    831a:	ea 01       	movw	r28, r20
    831c:	c2 1b       	sub	r28, r18
    831e:	d3 0b       	sbc	r29, r19
    8320:	02 c0       	rjmp	.+4      	; 0x8326 <_puts_pad+0x24>
    8322:	c0 e0       	ldi	r28, 0x00	; 0
    8324:	d0 e0       	ldi	r29, 0x00	; 0
    8326:	01 15       	cp	r16, r1
    8328:	11 05       	cpc	r17, r1
    832a:	49 f4       	brne	.+18     	; 0x833e <_puts_pad+0x3c>
    832c:	21 97       	sbiw	r28, 0x01	; 1
    832e:	38 f0       	brcs	.+14     	; 0x833e <_puts_pad+0x3c>
    8330:	d6 01       	movw	r26, r12
    8332:	ed 91       	ld	r30, X+
    8334:	fc 91       	ld	r31, X
    8336:	60 e2       	ldi	r22, 0x20	; 32
    8338:	c6 01       	movw	r24, r12
    833a:	09 95       	icall
    833c:	f7 cf       	rjmp	.-18     	; 0x832c <_puts_pad+0x2a>
    833e:	54 01       	movw	r10, r8
    8340:	f5 01       	movw	r30, r10
    8342:	61 91       	ld	r22, Z+
    8344:	5f 01       	movw	r10, r30
    8346:	66 23       	and	r22, r22
    8348:	61 f0       	breq	.+24     	; 0x8362 <_puts_pad+0x60>
    834a:	e1 14       	cp	r14, r1
    834c:	f1 04       	cpc	r15, r1
    834e:	49 f0       	breq	.+18     	; 0x8362 <_puts_pad+0x60>
    8350:	d6 01       	movw	r26, r12
    8352:	ed 91       	ld	r30, X+
    8354:	fc 91       	ld	r31, X
    8356:	c6 01       	movw	r24, r12
    8358:	09 95       	icall
    835a:	b1 e0       	ldi	r27, 0x01	; 1
    835c:	eb 1a       	sub	r14, r27
    835e:	f1 08       	sbc	r15, r1
    8360:	ef cf       	rjmp	.-34     	; 0x8340 <_puts_pad+0x3e>
    8362:	01 15       	cp	r16, r1
    8364:	11 05       	cpc	r17, r1
    8366:	51 f0       	breq	.+20     	; 0x837c <_puts_pad+0x7a>
    8368:	20 97       	sbiw	r28, 0x00	; 0
    836a:	41 f0       	breq	.+16     	; 0x837c <_puts_pad+0x7a>
    836c:	d6 01       	movw	r26, r12
    836e:	ed 91       	ld	r30, X+
    8370:	fc 91       	ld	r31, X
    8372:	60 e2       	ldi	r22, 0x20	; 32
    8374:	c6 01       	movw	r24, r12
    8376:	09 95       	icall
    8378:	21 97       	sbiw	r28, 0x01	; 1
    837a:	f6 cf       	rjmp	.-20     	; 0x8368 <_puts_pad+0x66>
    837c:	cd b7       	in	r28, 0x3d	; 61
    837e:	de b7       	in	r29, 0x3e	; 62
    8380:	ec e0       	ldi	r30, 0x0C	; 12
    8382:	0c 94 d5 e6 	jmp	0x1cdaa	; 0x1cdaa <__epilogue_restores__+0xc>

00008386 <_puts_pad_X>:
    8386:	2f 92       	push	r2
    8388:	3f 92       	push	r3
    838a:	4f 92       	push	r4
    838c:	6f 92       	push	r6
    838e:	7f 92       	push	r7
    8390:	8f 92       	push	r8
    8392:	cf 92       	push	r12
    8394:	df 92       	push	r13
    8396:	ef 92       	push	r14
    8398:	ff 92       	push	r15
    839a:	0f 93       	push	r16
    839c:	1f 93       	push	r17
    839e:	cf 93       	push	r28
    83a0:	df 93       	push	r29
    83a2:	6c 01       	movw	r12, r24
    83a4:	3a 01       	movw	r6, r20
    83a6:	86 2e       	mov	r8, r22
    83a8:	02 17       	cp	r16, r18
    83aa:	13 07       	cpc	r17, r19
    83ac:	24 f4       	brge	.+8      	; 0x83b6 <_puts_pad_X+0x30>
    83ae:	e9 01       	movw	r28, r18
    83b0:	c0 1b       	sub	r28, r16
    83b2:	d1 0b       	sbc	r29, r17
    83b4:	02 c0       	rjmp	.+4      	; 0x83ba <_puts_pad_X+0x34>
    83b6:	c0 e0       	ldi	r28, 0x00	; 0
    83b8:	d0 e0       	ldi	r29, 0x00	; 0
    83ba:	e1 14       	cp	r14, r1
    83bc:	f1 04       	cpc	r15, r1
    83be:	49 f4       	brne	.+18     	; 0x83d2 <_puts_pad_X+0x4c>
    83c0:	21 97       	sbiw	r28, 0x01	; 1
    83c2:	38 f0       	brcs	.+14     	; 0x83d2 <_puts_pad_X+0x4c>
    83c4:	d6 01       	movw	r26, r12
    83c6:	ed 91       	ld	r30, X+
    83c8:	fc 91       	ld	r31, X
    83ca:	60 e2       	ldi	r22, 0x20	; 32
    83cc:	c6 01       	movw	r24, r12
    83ce:	09 95       	icall
    83d0:	f7 cf       	rjmp	.-18     	; 0x83c0 <_puts_pad_X+0x3a>
    83d2:	13 01       	movw	r2, r6
    83d4:	48 2c       	mov	r4, r8
    83d6:	20 0e       	add	r2, r16
    83d8:	31 1e       	adc	r3, r17
    83da:	41 1c       	adc	r4, r1
    83dc:	17 fd       	sbrc	r17, 7
    83de:	4a 94       	dec	r4
    83e0:	f3 01       	movw	r30, r6
    83e2:	58 2d       	mov	r21, r8
    83e4:	0e 94 ea e6 	call	0x1cdd4	; 0x1cdd4 <__xload_1>
    83e8:	66 23       	and	r22, r22
    83ea:	71 f0       	breq	.+28     	; 0x8408 <_puts_pad_X+0x82>
    83ec:	62 14       	cp	r6, r2
    83ee:	73 04       	cpc	r7, r3
    83f0:	84 04       	cpc	r8, r4
    83f2:	51 f0       	breq	.+20     	; 0x8408 <_puts_pad_X+0x82>
    83f4:	d6 01       	movw	r26, r12
    83f6:	ed 91       	ld	r30, X+
    83f8:	fc 91       	ld	r31, X
    83fa:	c6 01       	movw	r24, r12
    83fc:	09 95       	icall
    83fe:	bf ef       	ldi	r27, 0xFF	; 255
    8400:	6b 1a       	sub	r6, r27
    8402:	7b 0a       	sbc	r7, r27
    8404:	8b 0a       	sbc	r8, r27
    8406:	ec cf       	rjmp	.-40     	; 0x83e0 <_puts_pad_X+0x5a>
    8408:	ef 28       	or	r14, r15
    840a:	51 f0       	breq	.+20     	; 0x8420 <_puts_pad_X+0x9a>
    840c:	20 97       	sbiw	r28, 0x00	; 0
    840e:	41 f0       	breq	.+16     	; 0x8420 <_puts_pad_X+0x9a>
    8410:	d6 01       	movw	r26, r12
    8412:	ed 91       	ld	r30, X+
    8414:	fc 91       	ld	r31, X
    8416:	60 e2       	ldi	r22, 0x20	; 32
    8418:	c6 01       	movw	r24, r12
    841a:	09 95       	icall
    841c:	21 97       	sbiw	r28, 0x01	; 1
    841e:	f6 cf       	rjmp	.-20     	; 0x840c <_puts_pad_X+0x86>
    8420:	df 91       	pop	r29
    8422:	cf 91       	pop	r28
    8424:	1f 91       	pop	r17
    8426:	0f 91       	pop	r16
    8428:	ff 90       	pop	r15
    842a:	ef 90       	pop	r14
    842c:	df 90       	pop	r13
    842e:	cf 90       	pop	r12
    8430:	8f 90       	pop	r8
    8432:	7f 90       	pop	r7
    8434:	6f 90       	pop	r6
    8436:	4f 90       	pop	r4
    8438:	3f 90       	pop	r3
    843a:	2f 90       	pop	r2
    843c:	08 95       	ret

0000843e <strlen_X>:
    843e:	cf 92       	push	r12
    8440:	df 92       	push	r13
    8442:	ef 92       	push	r14
    8444:	9b 01       	movw	r18, r22
    8446:	48 2f       	mov	r20, r24
    8448:	80 e0       	ldi	r24, 0x00	; 0
    844a:	90 e0       	ldi	r25, 0x00	; 0
    844c:	2f 5f       	subi	r18, 0xFF	; 255
    844e:	3f 4f       	sbci	r19, 0xFF	; 255
    8450:	4f 4f       	sbci	r20, 0xFF	; 255
    8452:	69 01       	movw	r12, r18
    8454:	e4 2e       	mov	r14, r20
    8456:	51 e0       	ldi	r21, 0x01	; 1
    8458:	c5 1a       	sub	r12, r21
    845a:	d1 08       	sbc	r13, r1
    845c:	e1 08       	sbc	r14, r1
    845e:	f6 01       	movw	r30, r12
    8460:	5e 2d       	mov	r21, r14
    8462:	0e 94 ea e6 	call	0x1cdd4	; 0x1cdd4 <__xload_1>
    8466:	66 23       	and	r22, r22
    8468:	11 f0       	breq	.+4      	; 0x846e <strlen_X+0x30>
    846a:	01 96       	adiw	r24, 0x01	; 1
    846c:	ef cf       	rjmp	.-34     	; 0x844c <strlen_X+0xe>
    846e:	ef 90       	pop	r14
    8470:	df 90       	pop	r13
    8472:	cf 90       	pop	r12
    8474:	08 95       	ret

00008476 <_printf_fn>:
    8476:	ae e6       	ldi	r26, 0x6E	; 110
    8478:	b0 e0       	ldi	r27, 0x00	; 0
    847a:	e1 e4       	ldi	r30, 0x41	; 65
    847c:	f2 e4       	ldi	r31, 0x42	; 66
    847e:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    8482:	a5 96       	adiw	r28, 0x25	; 37
    8484:	9f af       	std	Y+63, r25	; 0x3f
    8486:	8e af       	std	Y+62, r24	; 0x3e
    8488:	a5 97       	sbiw	r28, 0x25	; 37
    848a:	6a 01       	movw	r12, r20
    848c:	e6 2e       	mov	r14, r22
    848e:	19 01       	movw	r2, r18
    8490:	a9 96       	adiw	r28, 0x29	; 41
    8492:	1c ae       	std	Y+60, r1	; 0x3c
    8494:	1d ae       	std	Y+61, r1	; 0x3d
    8496:	1e ae       	std	Y+62, r1	; 0x3e
    8498:	1f ae       	std	Y+63, r1	; 0x3f
    849a:	a9 97       	sbiw	r28, 0x29	; 41
    849c:	8a e1       	ldi	r24, 0x1A	; 26
    849e:	94 e0       	ldi	r25, 0x04	; 4
    84a0:	9c 01       	movw	r18, r24
    84a2:	40 e8       	ldi	r20, 0x80	; 128
    84a4:	ae 96       	adiw	r28, 0x2e	; 46
    84a6:	2d af       	std	Y+61, r18	; 0x3d
    84a8:	3e af       	std	Y+62, r19	; 0x3e
    84aa:	4f af       	std	Y+63, r20	; 0x3f
    84ac:	ae 97       	sbiw	r28, 0x2e	; 46
    84ae:	ae 01       	movw	r20, r28
    84b0:	4f 5a       	subi	r20, 0xAF	; 175
    84b2:	5f 4f       	sbci	r21, 0xFF	; 255
    84b4:	67 96       	adiw	r28, 0x17	; 23
    84b6:	5f af       	std	Y+63, r21	; 0x3f
    84b8:	4e af       	std	Y+62, r20	; 0x3e
    84ba:	67 97       	sbiw	r28, 0x17	; 23
    84bc:	ce 01       	movw	r24, r28
    84be:	8d 5b       	subi	r24, 0xBD	; 189
    84c0:	9f 4f       	sbci	r25, 0xFF	; 255
    84c2:	69 96       	adiw	r28, 0x19	; 25
    84c4:	9f af       	std	Y+63, r25	; 0x3f
    84c6:	8e af       	std	Y+62, r24	; 0x3e
    84c8:	69 97       	sbiw	r28, 0x19	; 25
    84ca:	de 01       	movw	r26, r28
    84cc:	a5 5b       	subi	r26, 0xB5	; 181
    84ce:	bf 4f       	sbci	r27, 0xFF	; 255
    84d0:	6b 96       	adiw	r28, 0x1b	; 27
    84d2:	bf af       	std	Y+63, r27	; 0x3f
    84d4:	ae af       	std	Y+62, r26	; 0x3e
    84d6:	6b 97       	sbiw	r28, 0x1b	; 27
    84d8:	fe 01       	movw	r30, r28
    84da:	ed 5a       	subi	r30, 0xAD	; 173
    84dc:	ff 4f       	sbci	r31, 0xFF	; 255
    84de:	6d 96       	adiw	r28, 0x1d	; 29
    84e0:	ff af       	std	Y+63, r31	; 0x3f
    84e2:	ee af       	std	Y+62, r30	; 0x3e
    84e4:	6d 97       	sbiw	r28, 0x1d	; 29
    84e6:	f6 01       	movw	r30, r12
    84e8:	5e 2d       	mov	r21, r14
    84ea:	0e 94 ea e6 	call	0x1cdd4	; 0x1cdd4 <__xload_1>
    84ee:	66 23       	and	r22, r22
    84f0:	09 f4       	brne	.+2      	; 0x84f4 <_printf_fn+0x7e>
    84f2:	13 c4       	rjmp	.+2086   	; 0x8d1a <_printf_fn+0x8a4>
    84f4:	ae 2d       	mov	r26, r14
    84f6:	c6 01       	movw	r24, r12
    84f8:	01 96       	adiw	r24, 0x01	; 1
    84fa:	a1 1d       	adc	r26, r1
    84fc:	3c 01       	movw	r6, r24
    84fe:	8a 2e       	mov	r8, r26
    8500:	65 32       	cpi	r22, 0x25	; 37
    8502:	51 f0       	breq	.+20     	; 0x8518 <_printf_fn+0xa2>
    8504:	a5 96       	adiw	r28, 0x25	; 37
    8506:	ae ad       	ldd	r26, Y+62	; 0x3e
    8508:	bf ad       	ldd	r27, Y+63	; 0x3f
    850a:	a5 97       	sbiw	r28, 0x25	; 37
    850c:	ed 91       	ld	r30, X+
    850e:	fc 91       	ld	r31, X
    8510:	11 97       	sbiw	r26, 0x01	; 1
    8512:	cd 01       	movw	r24, r26
    8514:	09 95       	icall
    8516:	d5 c3       	rjmp	.+1962   	; 0x8cc2 <_printf_fn+0x84c>
    8518:	91 2c       	mov	r9, r1
    851a:	f3 01       	movw	r30, r6
    851c:	58 2d       	mov	r21, r8
    851e:	0e 94 ea e6 	call	0x1cdd4	; 0x1cdd4 <__xload_1>
    8522:	63 32       	cpi	r22, 0x23	; 35
    8524:	19 f4       	brne	.+6      	; 0x852c <_printf_fn+0xb6>
    8526:	68 94       	set
    8528:	97 f8       	bld	r9, 7
    852a:	04 c0       	rjmp	.+8      	; 0x8534 <_printf_fn+0xbe>
    852c:	6b 32       	cpi	r22, 0x2B	; 43
    852e:	39 f4       	brne	.+14     	; 0x853e <_printf_fn+0xc8>
    8530:	68 94       	set
    8532:	92 f8       	bld	r9, 2
    8534:	bf ef       	ldi	r27, 0xFF	; 255
    8536:	6b 1a       	sub	r6, r27
    8538:	7b 0a       	sbc	r7, r27
    853a:	8b 0a       	sbc	r8, r27
    853c:	ee cf       	rjmp	.-36     	; 0x851a <_printf_fn+0xa4>
    853e:	6d 32       	cpi	r22, 0x2D	; 45
    8540:	a9 f4       	brne	.+42     	; 0x856c <_printf_fn+0xf6>
    8542:	93 fc       	sbrc	r9, 3
    8544:	05 c0       	rjmp	.+10     	; 0x8550 <_printf_fn+0xda>
    8546:	6d 32       	cpi	r22, 0x2D	; 45
    8548:	19 f4       	brne	.+6      	; 0x8550 <_printf_fn+0xda>
    854a:	68 94       	set
    854c:	93 f8       	bld	r9, 3
    854e:	f2 cf       	rjmp	.-28     	; 0x8534 <_printf_fn+0xbe>
    8550:	94 fc       	sbrc	r9, 4
    8552:	05 c0       	rjmp	.+10     	; 0x855e <_printf_fn+0xe8>
    8554:	60 32       	cpi	r22, 0x20	; 32
    8556:	19 f4       	brne	.+6      	; 0x855e <_printf_fn+0xe8>
    8558:	68 94       	set
    855a:	94 f8       	bld	r9, 4
    855c:	eb cf       	rjmp	.-42     	; 0x8534 <_printf_fn+0xbe>
    855e:	95 fc       	sbrc	r9, 5
    8560:	e9 cf       	rjmp	.-46     	; 0x8534 <_printf_fn+0xbe>
    8562:	60 33       	cpi	r22, 0x30	; 48
    8564:	39 f7       	brne	.-50     	; 0x8534 <_printf_fn+0xbe>
    8566:	68 94       	set
    8568:	95 f8       	bld	r9, 5
    856a:	e4 cf       	rjmp	.-56     	; 0x8534 <_printf_fn+0xbe>
    856c:	86 2f       	mov	r24, r22
    856e:	8f 7e       	andi	r24, 0xEF	; 239
    8570:	80 32       	cpi	r24, 0x20	; 32
    8572:	39 f3       	breq	.-50     	; 0x8542 <_printf_fn+0xcc>
    8574:	70 e0       	ldi	r23, 0x00	; 0
    8576:	60 53       	subi	r22, 0x30	; 48
    8578:	71 09       	sbc	r23, r1
    857a:	6f 96       	adiw	r28, 0x1f	; 31
    857c:	1f ae       	std	Y+63, r1	; 0x3f
    857e:	1e ae       	std	Y+62, r1	; 0x3e
    8580:	6f 97       	sbiw	r28, 0x1f	; 31
    8582:	6a 30       	cpi	r22, 0x0A	; 10
    8584:	71 05       	cpc	r23, r1
    8586:	10 f5       	brcc	.+68     	; 0x85cc <_printf_fn+0x156>
    8588:	2a e0       	ldi	r18, 0x0A	; 10
    858a:	f3 01       	movw	r30, r6
    858c:	58 2d       	mov	r21, r8
    858e:	0e 94 ea e6 	call	0x1cdd4	; 0x1cdd4 <__xload_1>
    8592:	70 e0       	ldi	r23, 0x00	; 0
    8594:	cb 01       	movw	r24, r22
    8596:	c0 97       	sbiw	r24, 0x30	; 48
    8598:	0a 97       	sbiw	r24, 0x0a	; 10
    859a:	b0 f4       	brcc	.+44     	; 0x85c8 <_printf_fn+0x152>
    859c:	ef ef       	ldi	r30, 0xFF	; 255
    859e:	6e 1a       	sub	r6, r30
    85a0:	7e 0a       	sbc	r7, r30
    85a2:	8e 0a       	sbc	r8, r30
    85a4:	6f 96       	adiw	r28, 0x1f	; 31
    85a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    85a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    85aa:	6f 97       	sbiw	r28, 0x1f	; 31
    85ac:	24 9f       	mul	r18, r20
    85ae:	c0 01       	movw	r24, r0
    85b0:	25 9f       	mul	r18, r21
    85b2:	90 0d       	add	r25, r0
    85b4:	11 24       	eor	r1, r1
    85b6:	68 0f       	add	r22, r24
    85b8:	79 1f       	adc	r23, r25
    85ba:	cb 01       	movw	r24, r22
    85bc:	c0 97       	sbiw	r24, 0x30	; 48
    85be:	6f 96       	adiw	r28, 0x1f	; 31
    85c0:	9f af       	std	Y+63, r25	; 0x3f
    85c2:	8e af       	std	Y+62, r24	; 0x3e
    85c4:	6f 97       	sbiw	r28, 0x1f	; 31
    85c6:	e1 cf       	rjmp	.-62     	; 0x858a <_printf_fn+0x114>
    85c8:	68 94       	set
    85ca:	90 f8       	bld	r9, 0
    85cc:	f3 01       	movw	r30, r6
    85ce:	58 2d       	mov	r21, r8
    85d0:	0e 94 ea e6 	call	0x1cdd4	; 0x1cdd4 <__xload_1>
    85d4:	6e 32       	cpi	r22, 0x2E	; 46
    85d6:	61 f5       	brne	.+88     	; 0x8630 <_printf_fn+0x1ba>
    85d8:	9f ef       	ldi	r25, 0xFF	; 255
    85da:	69 1a       	sub	r6, r25
    85dc:	79 0a       	sbc	r7, r25
    85de:	89 0a       	sbc	r8, r25
    85e0:	a1 96       	adiw	r28, 0x21	; 33
    85e2:	1f ae       	std	Y+63, r1	; 0x3f
    85e4:	1e ae       	std	Y+62, r1	; 0x3e
    85e6:	a1 97       	sbiw	r28, 0x21	; 33
    85e8:	2a e0       	ldi	r18, 0x0A	; 10
    85ea:	f3 01       	movw	r30, r6
    85ec:	58 2d       	mov	r21, r8
    85ee:	0e 94 ea e6 	call	0x1cdd4	; 0x1cdd4 <__xload_1>
    85f2:	70 e0       	ldi	r23, 0x00	; 0
    85f4:	cb 01       	movw	r24, r22
    85f6:	c0 97       	sbiw	r24, 0x30	; 48
    85f8:	0a 97       	sbiw	r24, 0x0a	; 10
    85fa:	b8 f4       	brcc	.+46     	; 0x862a <_printf_fn+0x1b4>
    85fc:	af ef       	ldi	r26, 0xFF	; 255
    85fe:	6a 1a       	sub	r6, r26
    8600:	7a 0a       	sbc	r7, r26
    8602:	8a 0a       	sbc	r8, r26
    8604:	a1 96       	adiw	r28, 0x21	; 33
    8606:	ee ad       	ldd	r30, Y+62	; 0x3e
    8608:	ff ad       	ldd	r31, Y+63	; 0x3f
    860a:	a1 97       	sbiw	r28, 0x21	; 33
    860c:	2e 9f       	mul	r18, r30
    860e:	c0 01       	movw	r24, r0
    8610:	2f 9f       	mul	r18, r31
    8612:	90 0d       	add	r25, r0
    8614:	11 24       	eor	r1, r1
    8616:	68 0f       	add	r22, r24
    8618:	79 1f       	adc	r23, r25
    861a:	ab 01       	movw	r20, r22
    861c:	40 53       	subi	r20, 0x30	; 48
    861e:	51 09       	sbc	r21, r1
    8620:	a1 96       	adiw	r28, 0x21	; 33
    8622:	5f af       	std	Y+63, r21	; 0x3f
    8624:	4e af       	std	Y+62, r20	; 0x3e
    8626:	a1 97       	sbiw	r28, 0x21	; 33
    8628:	e0 cf       	rjmp	.-64     	; 0x85ea <_printf_fn+0x174>
    862a:	68 94       	set
    862c:	91 f8       	bld	r9, 1
    862e:	04 c0       	rjmp	.+8      	; 0x8638 <_printf_fn+0x1c2>
    8630:	a1 96       	adiw	r28, 0x21	; 33
    8632:	1f ae       	std	Y+63, r1	; 0x3f
    8634:	1e ae       	std	Y+62, r1	; 0x3e
    8636:	a1 97       	sbiw	r28, 0x21	; 33
    8638:	f3 01       	movw	r30, r6
    863a:	58 2d       	mov	r21, r8
    863c:	0e 94 ea e6 	call	0x1cdd4	; 0x1cdd4 <__xload_1>
    8640:	69 34       	cpi	r22, 0x49	; 73
    8642:	91 f5       	brne	.+100    	; 0x86a8 <_printf_fn+0x232>
    8644:	5f ef       	ldi	r21, 0xFF	; 255
    8646:	65 1a       	sub	r6, r21
    8648:	75 0a       	sbc	r7, r21
    864a:	85 0a       	sbc	r8, r21
    864c:	41 2c       	mov	r4, r1
    864e:	51 2c       	mov	r5, r1
    8650:	2a e0       	ldi	r18, 0x0A	; 10
    8652:	f3 01       	movw	r30, r6
    8654:	58 2d       	mov	r21, r8
    8656:	0e 94 ea e6 	call	0x1cdd4	; 0x1cdd4 <__xload_1>
    865a:	70 e0       	ldi	r23, 0x00	; 0
    865c:	cb 01       	movw	r24, r22
    865e:	c0 97       	sbiw	r24, 0x30	; 48
    8660:	0a 97       	sbiw	r24, 0x0a	; 10
    8662:	80 f4       	brcc	.+32     	; 0x8684 <_printf_fn+0x20e>
    8664:	8f ef       	ldi	r24, 0xFF	; 255
    8666:	68 1a       	sub	r6, r24
    8668:	78 0a       	sbc	r7, r24
    866a:	88 0a       	sbc	r8, r24
    866c:	24 9d       	mul	r18, r4
    866e:	c0 01       	movw	r24, r0
    8670:	25 9d       	mul	r18, r5
    8672:	90 0d       	add	r25, r0
    8674:	11 24       	eor	r1, r1
    8676:	68 0f       	add	r22, r24
    8678:	79 1f       	adc	r23, r25
    867a:	2b 01       	movw	r4, r22
    867c:	90 e3       	ldi	r25, 0x30	; 48
    867e:	49 1a       	sub	r4, r25
    8680:	51 08       	sbc	r5, r1
    8682:	e7 cf       	rjmp	.-50     	; 0x8652 <_printf_fn+0x1dc>
    8684:	41 14       	cp	r4, r1
    8686:	51 04       	cpc	r5, r1
    8688:	09 f4       	brne	.+2      	; 0x868c <_printf_fn+0x216>
    868a:	40 c0       	rjmp	.+128    	; 0x870c <_printf_fn+0x296>
    868c:	c2 01       	movw	r24, r4
    868e:	87 70       	andi	r24, 0x07	; 7
    8690:	99 27       	eor	r25, r25
    8692:	89 2b       	or	r24, r25
    8694:	c9 f5       	brne	.+114    	; 0x8708 <_printf_fn+0x292>
    8696:	63 e0       	ldi	r22, 0x03	; 3
    8698:	55 94       	asr	r5
    869a:	47 94       	ror	r4
    869c:	6a 95       	dec	r22
    869e:	e1 f7       	brne	.-8      	; 0x8698 <_printf_fn+0x222>
    86a0:	41 14       	cp	r4, r1
    86a2:	51 04       	cpc	r5, r1
    86a4:	99 f1       	breq	.+102    	; 0x870c <_printf_fn+0x296>
    86a6:	21 c0       	rjmp	.+66     	; 0x86ea <_printf_fn+0x274>
    86a8:	68 36       	cpi	r22, 0x68	; 104
    86aa:	29 f4       	brne	.+10     	; 0x86b6 <_printf_fn+0x240>
    86ac:	af ef       	ldi	r26, 0xFF	; 255
    86ae:	6a 1a       	sub	r6, r26
    86b0:	7a 0a       	sbc	r7, r26
    86b2:	8a 0a       	sbc	r8, r26
    86b4:	09 c3       	rjmp	.+1554   	; 0x8cc8 <_printf_fn+0x852>
    86b6:	6c 36       	cpi	r22, 0x6C	; 108
    86b8:	09 f0       	breq	.+2      	; 0x86bc <_printf_fn+0x246>
    86ba:	06 c3       	rjmp	.+1548   	; 0x8cc8 <_printf_fn+0x852>
    86bc:	a8 2d       	mov	r26, r8
    86be:	c3 01       	movw	r24, r6
    86c0:	01 96       	adiw	r24, 0x01	; 1
    86c2:	a1 1d       	adc	r26, r1
    86c4:	fc 01       	movw	r30, r24
    86c6:	5a 2f       	mov	r21, r26
    86c8:	0e 94 ea e6 	call	0x1cdd4	; 0x1cdd4 <__xload_1>
    86cc:	6c 36       	cpi	r22, 0x6C	; 108
    86ce:	31 f0       	breq	.+12     	; 0x86dc <_printf_fn+0x266>
    86d0:	3c 01       	movw	r6, r24
    86d2:	8a 2e       	mov	r8, r26
    86d4:	54 e0       	ldi	r21, 0x04	; 4
    86d6:	45 2e       	mov	r4, r21
    86d8:	51 2c       	mov	r5, r1
    86da:	07 c0       	rjmp	.+14     	; 0x86ea <_printf_fn+0x274>
    86dc:	b2 e0       	ldi	r27, 0x02	; 2
    86de:	6b 0e       	add	r6, r27
    86e0:	71 1c       	adc	r7, r1
    86e2:	81 1c       	adc	r8, r1
    86e4:	48 e0       	ldi	r20, 0x08	; 8
    86e6:	44 2e       	mov	r4, r20
    86e8:	51 2c       	mov	r5, r1
    86ea:	f3 01       	movw	r30, r6
    86ec:	58 2d       	mov	r21, r8
    86ee:	0e 94 ea e6 	call	0x1cdd4	; 0x1cdd4 <__xload_1>
    86f2:	e6 2f       	mov	r30, r22
    86f4:	f0 e0       	ldi	r31, 0x00	; 0
    86f6:	a3 96       	adiw	r28, 0x23	; 35
    86f8:	ff af       	std	Y+63, r31	; 0x3f
    86fa:	ee af       	std	Y+62, r30	; 0x3e
    86fc:	a3 97       	sbiw	r28, 0x23	; 35
    86fe:	e4 36       	cpi	r30, 0x64	; 100
    8700:	f1 05       	cpc	r31, r1
    8702:	09 f4       	brne	.+2      	; 0x8706 <_printf_fn+0x290>
    8704:	e5 c2       	rjmp	.+1482   	; 0x8cd0 <_printf_fn+0x85a>
    8706:	06 c0       	rjmp	.+12     	; 0x8714 <_printf_fn+0x29e>
    8708:	41 2c       	mov	r4, r1
    870a:	51 2c       	mov	r5, r1
    870c:	a3 96       	adiw	r28, 0x23	; 35
    870e:	1f ae       	std	Y+63, r1	; 0x3f
    8710:	1e ae       	std	Y+62, r1	; 0x3e
    8712:	a3 97       	sbiw	r28, 0x23	; 35
    8714:	31 e0       	ldi	r19, 0x01	; 1
    8716:	20 e0       	ldi	r18, 0x00	; 0
    8718:	a3 96       	adiw	r28, 0x23	; 35
    871a:	4e ad       	ldd	r20, Y+62	; 0x3e
    871c:	5f ad       	ldd	r21, Y+63	; 0x3f
    871e:	a3 97       	sbiw	r28, 0x23	; 35
    8720:	44 34       	cpi	r20, 0x44	; 68
    8722:	51 05       	cpc	r21, r1
    8724:	09 f0       	breq	.+2      	; 0x8728 <_printf_fn+0x2b2>
    8726:	30 e0       	ldi	r19, 0x00	; 0
    8728:	83 2f       	mov	r24, r19
    872a:	92 2f       	mov	r25, r18
    872c:	a3 96       	adiw	r28, 0x23	; 35
    872e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8730:	ff ad       	ldd	r31, Y+63	; 0x3f
    8732:	a3 97       	sbiw	r28, 0x23	; 35
    8734:	e2 54       	subi	r30, 0x42	; 66
    8736:	f1 09       	sbc	r31, r1
    8738:	e7 33       	cpi	r30, 0x37	; 55
    873a:	f1 05       	cpc	r31, r1
    873c:	08 f0       	brcs	.+2      	; 0x8740 <_printf_fn+0x2ca>
    873e:	57 c1       	rjmp	.+686    	; 0x89ee <_printf_fn+0x578>
    8740:	ea 5b       	subi	r30, 0xBA	; 186
    8742:	ff 4f       	sbci	r31, 0xFF	; 255
    8744:	0c 94 84 e6 	jmp	0x1cd08	; 0x1cd08 <__tablejump2__>
    8748:	32 e0       	ldi	r19, 0x02	; 2
    874a:	43 2e       	mov	r4, r19
    874c:	51 2c       	mov	r5, r1
    874e:	29 2d       	mov	r18, r9
    8750:	28 72       	andi	r18, 0x28	; 40
    8752:	28 32       	cpi	r18, 0x28	; 40
    8754:	11 f4       	brne	.+4      	; 0x875a <_printf_fn+0x2e4>
    8756:	e8 94       	clt
    8758:	95 f8       	bld	r9, 5
    875a:	29 2d       	mov	r18, r9
    875c:	22 72       	andi	r18, 0x22	; 34
    875e:	22 32       	cpi	r18, 0x22	; 34
    8760:	11 f4       	brne	.+4      	; 0x8766 <_printf_fn+0x2f0>
    8762:	e8 94       	clt
    8764:	95 f8       	bld	r9, 5
    8766:	29 2d       	mov	r18, r9
    8768:	21 72       	andi	r18, 0x21	; 33
    876a:	21 32       	cpi	r18, 0x21	; 33
    876c:	79 f4       	brne	.+30     	; 0x878c <_printf_fn+0x316>
    876e:	a1 96       	adiw	r28, 0x21	; 33
    8770:	ae ad       	ldd	r26, Y+62	; 0x3e
    8772:	bf ad       	ldd	r27, Y+63	; 0x3f
    8774:	a1 97       	sbiw	r28, 0x21	; 33
    8776:	6f 96       	adiw	r28, 0x1f	; 31
    8778:	ee ad       	ldd	r30, Y+62	; 0x3e
    877a:	ff ad       	ldd	r31, Y+63	; 0x3f
    877c:	6f 97       	sbiw	r28, 0x1f	; 31
    877e:	ae 17       	cp	r26, r30
    8780:	bf 07       	cpc	r27, r31
    8782:	24 f4       	brge	.+8      	; 0x878c <_printf_fn+0x316>
    8784:	a1 96       	adiw	r28, 0x21	; 33
    8786:	ff af       	std	Y+63, r31	; 0x3f
    8788:	ee af       	std	Y+62, r30	; 0x3e
    878a:	a1 97       	sbiw	r28, 0x21	; 33
    878c:	29 2d       	mov	r18, r9
    878e:	23 72       	andi	r18, 0x23	; 35
    8790:	23 32       	cpi	r18, 0x23	; 35
    8792:	79 f4       	brne	.+30     	; 0x87b2 <_printf_fn+0x33c>
    8794:	a1 96       	adiw	r28, 0x21	; 33
    8796:	2e ad       	ldd	r18, Y+62	; 0x3e
    8798:	3f ad       	ldd	r19, Y+63	; 0x3f
    879a:	a1 97       	sbiw	r28, 0x21	; 33
    879c:	6f 96       	adiw	r28, 0x1f	; 31
    879e:	4e ad       	ldd	r20, Y+62	; 0x3e
    87a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    87a2:	6f 97       	sbiw	r28, 0x1f	; 31
    87a4:	24 17       	cp	r18, r20
    87a6:	35 07       	cpc	r19, r21
    87a8:	24 f4       	brge	.+8      	; 0x87b2 <_printf_fn+0x33c>
    87aa:	a1 96       	adiw	r28, 0x21	; 33
    87ac:	5f af       	std	Y+63, r21	; 0x3f
    87ae:	4e af       	std	Y+62, r20	; 0x3e
    87b0:	a1 97       	sbiw	r28, 0x21	; 33
    87b2:	e8 94       	clt
    87b4:	94 f8       	bld	r9, 4
    87b6:	e8 94       	clt
    87b8:	92 f8       	bld	r9, 2
    87ba:	e8 94       	clt
    87bc:	96 f8       	bld	r9, 6
    87be:	52 e0       	ldi	r21, 0x02	; 2
    87c0:	45 16       	cp	r4, r21
    87c2:	51 04       	cpc	r5, r1
    87c4:	f9 f4       	brne	.+62     	; 0x8804 <_printf_fn+0x38e>
    87c6:	51 01       	movw	r10, r2
    87c8:	82 e0       	ldi	r24, 0x02	; 2
    87ca:	a8 0e       	add	r10, r24
    87cc:	b1 1c       	adc	r11, r1
    87ce:	d1 01       	movw	r26, r2
    87d0:	8d 91       	ld	r24, X+
    87d2:	9c 91       	ld	r25, X
    87d4:	65 96       	adiw	r28, 0x15	; 21
    87d6:	9f af       	std	Y+63, r25	; 0x3f
    87d8:	8e af       	std	Y+62, r24	; 0x3e
    87da:	65 97       	sbiw	r28, 0x15	; 21
    87dc:	a3 96       	adiw	r28, 0x23	; 35
    87de:	ee ad       	ldd	r30, Y+62	; 0x3e
    87e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    87e2:	a3 97       	sbiw	r28, 0x23	; 35
    87e4:	e4 34       	cpi	r30, 0x44	; 68
    87e6:	f1 05       	cpc	r31, r1
    87e8:	09 f0       	breq	.+2      	; 0x87ec <_printf_fn+0x376>
    87ea:	ac c0       	rjmp	.+344    	; 0x8944 <_printf_fn+0x4ce>
    87ec:	97 ff       	sbrs	r25, 7
    87ee:	a7 c0       	rjmp	.+334    	; 0x893e <_printf_fn+0x4c8>
    87f0:	68 94       	set
    87f2:	96 f8       	bld	r9, 6
    87f4:	91 95       	neg	r25
    87f6:	81 95       	neg	r24
    87f8:	91 09       	sbc	r25, r1
    87fa:	65 96       	adiw	r28, 0x15	; 21
    87fc:	9f af       	std	Y+63, r25	; 0x3f
    87fe:	8e af       	std	Y+62, r24	; 0x3e
    8800:	65 97       	sbiw	r28, 0x15	; 21
    8802:	9d c0       	rjmp	.+314    	; 0x893e <_printf_fn+0x4c8>
    8804:	f4 e0       	ldi	r31, 0x04	; 4
    8806:	4f 16       	cp	r4, r31
    8808:	51 04       	cpc	r5, r1
    880a:	59 f5       	brne	.+86     	; 0x8862 <_printf_fn+0x3ec>
    880c:	51 01       	movw	r10, r2
    880e:	24 e0       	ldi	r18, 0x04	; 4
    8810:	a2 0e       	add	r10, r18
    8812:	b1 1c       	adc	r11, r1
    8814:	f1 01       	movw	r30, r2
    8816:	80 81       	ld	r24, Z
    8818:	91 81       	ldd	r25, Z+1	; 0x01
    881a:	a2 81       	ldd	r26, Z+2	; 0x02
    881c:	b3 81       	ldd	r27, Z+3	; 0x03
    881e:	2f 96       	adiw	r28, 0x0f	; 15
    8820:	8c af       	std	Y+60, r24	; 0x3c
    8822:	9d af       	std	Y+61, r25	; 0x3d
    8824:	ae af       	std	Y+62, r26	; 0x3e
    8826:	bf af       	std	Y+63, r27	; 0x3f
    8828:	2f 97       	sbiw	r28, 0x0f	; 15
    882a:	a3 96       	adiw	r28, 0x23	; 35
    882c:	2e ad       	ldd	r18, Y+62	; 0x3e
    882e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8830:	a3 97       	sbiw	r28, 0x23	; 35
    8832:	24 34       	cpi	r18, 0x44	; 68
    8834:	31 05       	cpc	r19, r1
    8836:	09 f0       	breq	.+2      	; 0x883a <_printf_fn+0x3c4>
    8838:	8f c0       	rjmp	.+286    	; 0x8958 <_printf_fn+0x4e2>
    883a:	b7 ff       	sbrs	r27, 7
    883c:	8a c0       	rjmp	.+276    	; 0x8952 <_printf_fn+0x4dc>
    883e:	68 94       	set
    8840:	96 f8       	bld	r9, 6
    8842:	b0 95       	com	r27
    8844:	a0 95       	com	r26
    8846:	90 95       	com	r25
    8848:	81 95       	neg	r24
    884a:	9f 4f       	sbci	r25, 0xFF	; 255
    884c:	af 4f       	sbci	r26, 0xFF	; 255
    884e:	bf 4f       	sbci	r27, 0xFF	; 255
    8850:	2f 96       	adiw	r28, 0x0f	; 15
    8852:	8c af       	std	Y+60, r24	; 0x3c
    8854:	9d af       	std	Y+61, r25	; 0x3d
    8856:	ae af       	std	Y+62, r26	; 0x3e
    8858:	bf af       	std	Y+63, r27	; 0x3f
    885a:	2f 97       	sbiw	r28, 0x0f	; 15
    885c:	7a c0       	rjmp	.+244    	; 0x8952 <_printf_fn+0x4dc>
    885e:	81 e0       	ldi	r24, 0x01	; 1
    8860:	90 e0       	ldi	r25, 0x00	; 0
    8862:	51 01       	movw	r10, r2
    8864:	38 e0       	ldi	r19, 0x08	; 8
    8866:	43 16       	cp	r4, r19
    8868:	51 04       	cpc	r5, r1
    886a:	09 f0       	breq	.+2      	; 0x886e <_printf_fn+0x3f8>
    886c:	7c c0       	rjmp	.+248    	; 0x8966 <_printf_fn+0x4f0>
    886e:	48 e0       	ldi	r20, 0x08	; 8
    8870:	a4 0e       	add	r10, r20
    8872:	b1 1c       	adc	r11, r1
    8874:	d1 01       	movw	r26, r2
    8876:	fc 90       	ld	r15, X
    8878:	f1 01       	movw	r30, r2
    887a:	01 81       	ldd	r16, Z+1	; 0x01
    887c:	12 81       	ldd	r17, Z+2	; 0x02
    887e:	f3 81       	ldd	r31, Z+3	; 0x03
    8880:	aa 96       	adiw	r28, 0x2a	; 42
    8882:	ff af       	std	Y+63, r31	; 0x3f
    8884:	aa 97       	sbiw	r28, 0x2a	; 42
    8886:	f1 01       	movw	r30, r2
    8888:	f4 81       	ldd	r31, Z+4	; 0x04
    888a:	ab 96       	adiw	r28, 0x2b	; 43
    888c:	ff af       	std	Y+63, r31	; 0x3f
    888e:	ab 97       	sbiw	r28, 0x2b	; 43
    8890:	f1 01       	movw	r30, r2
    8892:	b5 81       	ldd	r27, Z+5	; 0x05
    8894:	f6 81       	ldd	r31, Z+6	; 0x06
    8896:	af 96       	adiw	r28, 0x2f	; 47
    8898:	ff af       	std	Y+63, r31	; 0x3f
    889a:	af 97       	sbiw	r28, 0x2f	; 47
    889c:	f1 01       	movw	r30, r2
    889e:	37 80       	ldd	r3, Z+7	; 0x07
    88a0:	24 96       	adiw	r28, 0x04	; 4
    88a2:	ff ae       	std	Y+63, r15	; 0x3f
    88a4:	24 97       	sbiw	r28, 0x04	; 4
    88a6:	25 96       	adiw	r28, 0x05	; 5
    88a8:	0f af       	std	Y+63, r16	; 0x3f
    88aa:	25 97       	sbiw	r28, 0x05	; 5
    88ac:	26 96       	adiw	r28, 0x06	; 6
    88ae:	1f af       	std	Y+63, r17	; 0x3f
    88b0:	26 97       	sbiw	r28, 0x06	; 6
    88b2:	aa 96       	adiw	r28, 0x2a	; 42
    88b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    88b6:	aa 97       	sbiw	r28, 0x2a	; 42
    88b8:	27 96       	adiw	r28, 0x07	; 7
    88ba:	ff af       	std	Y+63, r31	; 0x3f
    88bc:	27 97       	sbiw	r28, 0x07	; 7
    88be:	ab 96       	adiw	r28, 0x2b	; 43
    88c0:	ef ad       	ldd	r30, Y+63	; 0x3f
    88c2:	ab 97       	sbiw	r28, 0x2b	; 43
    88c4:	28 96       	adiw	r28, 0x08	; 8
    88c6:	ef af       	std	Y+63, r30	; 0x3f
    88c8:	28 97       	sbiw	r28, 0x08	; 8
    88ca:	29 96       	adiw	r28, 0x09	; 9
    88cc:	bf af       	std	Y+63, r27	; 0x3f
    88ce:	29 97       	sbiw	r28, 0x09	; 9
    88d0:	af 96       	adiw	r28, 0x2f	; 47
    88d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    88d4:	af 97       	sbiw	r28, 0x2f	; 47
    88d6:	2a 96       	adiw	r28, 0x0a	; 10
    88d8:	ff af       	std	Y+63, r31	; 0x3f
    88da:	2a 97       	sbiw	r28, 0x0a	; 10
    88dc:	2b 96       	adiw	r28, 0x0b	; 11
    88de:	3f ae       	std	Y+63, r3	; 0x3f
    88e0:	2b 97       	sbiw	r28, 0x0b	; 11
    88e2:	89 2b       	or	r24, r25
    88e4:	09 f4       	brne	.+2      	; 0x88e8 <_printf_fn+0x472>
    88e6:	4a c0       	rjmp	.+148    	; 0x897c <_printf_fn+0x506>
    88e8:	2f 2d       	mov	r18, r15
    88ea:	30 2f       	mov	r19, r16
    88ec:	41 2f       	mov	r20, r17
    88ee:	aa 96       	adiw	r28, 0x2a	; 42
    88f0:	5f ad       	ldd	r21, Y+63	; 0x3f
    88f2:	aa 97       	sbiw	r28, 0x2a	; 42
    88f4:	6e 2f       	mov	r22, r30
    88f6:	7b 2f       	mov	r23, r27
    88f8:	8f 2f       	mov	r24, r31
    88fa:	93 2d       	mov	r25, r3
    88fc:	a0 e0       	ldi	r26, 0x00	; 0
    88fe:	0e 94 f1 e6 	call	0x1cde2	; 0x1cde2 <__cmpdi2_s8>
    8902:	e4 f5       	brge	.+120    	; 0x897c <_printf_fn+0x506>
    8904:	68 94       	set
    8906:	96 f8       	bld	r9, 6
    8908:	0e 94 a3 e6 	call	0x1cd46	; 0x1cd46 <__negdi2>
    890c:	24 96       	adiw	r28, 0x04	; 4
    890e:	2f af       	std	Y+63, r18	; 0x3f
    8910:	24 97       	sbiw	r28, 0x04	; 4
    8912:	25 96       	adiw	r28, 0x05	; 5
    8914:	3f af       	std	Y+63, r19	; 0x3f
    8916:	25 97       	sbiw	r28, 0x05	; 5
    8918:	26 96       	adiw	r28, 0x06	; 6
    891a:	4f af       	std	Y+63, r20	; 0x3f
    891c:	26 97       	sbiw	r28, 0x06	; 6
    891e:	27 96       	adiw	r28, 0x07	; 7
    8920:	5f af       	std	Y+63, r21	; 0x3f
    8922:	27 97       	sbiw	r28, 0x07	; 7
    8924:	28 96       	adiw	r28, 0x08	; 8
    8926:	6f af       	std	Y+63, r22	; 0x3f
    8928:	28 97       	sbiw	r28, 0x08	; 8
    892a:	29 96       	adiw	r28, 0x09	; 9
    892c:	7f af       	std	Y+63, r23	; 0x3f
    892e:	29 97       	sbiw	r28, 0x09	; 9
    8930:	2a 96       	adiw	r28, 0x0a	; 10
    8932:	8f af       	std	Y+63, r24	; 0x3f
    8934:	2a 97       	sbiw	r28, 0x0a	; 10
    8936:	2b 96       	adiw	r28, 0x0b	; 11
    8938:	9f af       	std	Y+63, r25	; 0x3f
    893a:	2b 97       	sbiw	r28, 0x0b	; 11
    893c:	1f c0       	rjmp	.+62     	; 0x897c <_printf_fn+0x506>
    893e:	22 e0       	ldi	r18, 0x02	; 2
    8940:	42 2e       	mov	r4, r18
    8942:	51 2c       	mov	r5, r1
    8944:	6c 96       	adiw	r28, 0x1c	; 28
    8946:	8f ad       	ldd	r24, Y+63	; 0x3f
    8948:	6c 97       	sbiw	r28, 0x1c	; 28
    894a:	6d 96       	adiw	r28, 0x1d	; 29
    894c:	9f ad       	ldd	r25, Y+63	; 0x3f
    894e:	6d 97       	sbiw	r28, 0x1d	; 29
    8950:	1b c0       	rjmp	.+54     	; 0x8988 <_printf_fn+0x512>
    8952:	94 e0       	ldi	r25, 0x04	; 4
    8954:	49 2e       	mov	r4, r25
    8956:	51 2c       	mov	r5, r1
    8958:	6a 96       	adiw	r28, 0x1a	; 26
    895a:	8f ad       	ldd	r24, Y+63	; 0x3f
    895c:	6a 97       	sbiw	r28, 0x1a	; 26
    895e:	6b 96       	adiw	r28, 0x1b	; 27
    8960:	9f ad       	ldd	r25, Y+63	; 0x3f
    8962:	6b 97       	sbiw	r28, 0x1b	; 27
    8964:	11 c0       	rjmp	.+34     	; 0x8988 <_printf_fn+0x512>
    8966:	66 96       	adiw	r28, 0x16	; 22
    8968:	8f ad       	ldd	r24, Y+63	; 0x3f
    896a:	66 97       	sbiw	r28, 0x16	; 22
    896c:	67 96       	adiw	r28, 0x17	; 23
    896e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8970:	67 97       	sbiw	r28, 0x17	; 23
    8972:	a3 96       	adiw	r28, 0x23	; 35
    8974:	1f ae       	std	Y+63, r1	; 0x3f
    8976:	1e ae       	std	Y+62, r1	; 0x3e
    8978:	a3 97       	sbiw	r28, 0x23	; 35
    897a:	06 c0       	rjmp	.+12     	; 0x8988 <_printf_fn+0x512>
    897c:	68 96       	adiw	r28, 0x18	; 24
    897e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8980:	68 97       	sbiw	r28, 0x18	; 24
    8982:	69 96       	adiw	r28, 0x19	; 25
    8984:	9f ad       	ldd	r25, Y+63	; 0x3f
    8986:	69 97       	sbiw	r28, 0x19	; 25
    8988:	2f ef       	ldi	r18, 0xFF	; 255
    898a:	62 1a       	sub	r6, r18
    898c:	72 0a       	sbc	r7, r18
    898e:	82 0a       	sbc	r8, r18
    8990:	15 01       	movw	r2, r10
    8992:	33 c0       	rjmp	.+102    	; 0x89fa <_printf_fn+0x584>
    8994:	91 fc       	sbrc	r9, 1
    8996:	08 c0       	rjmp	.+16     	; 0x89a8 <_printf_fn+0x532>
    8998:	68 94       	set
    899a:	91 f8       	bld	r9, 1
    899c:	46 e0       	ldi	r20, 0x06	; 6
    899e:	50 e0       	ldi	r21, 0x00	; 0
    89a0:	a1 96       	adiw	r28, 0x21	; 33
    89a2:	5f af       	std	Y+63, r21	; 0x3f
    89a4:	4e af       	std	Y+62, r20	; 0x3e
    89a6:	a1 97       	sbiw	r28, 0x21	; 33
    89a8:	d1 01       	movw	r26, r2
    89aa:	8d 91       	ld	r24, X+
    89ac:	9d 91       	ld	r25, X+
    89ae:	0d 90       	ld	r0, X+
    89b0:	bc 91       	ld	r27, X
    89b2:	a0 2d       	mov	r26, r0
    89b4:	a9 96       	adiw	r28, 0x29	; 41
    89b6:	8c af       	std	Y+60, r24	; 0x3c
    89b8:	9d af       	std	Y+61, r25	; 0x3d
    89ba:	ae af       	std	Y+62, r26	; 0x3e
    89bc:	bf af       	std	Y+63, r27	; 0x3f
    89be:	a9 97       	sbiw	r28, 0x29	; 41
    89c0:	bf ef       	ldi	r27, 0xFF	; 255
    89c2:	6b 1a       	sub	r6, r27
    89c4:	7b 0a       	sbc	r7, r27
    89c6:	8b 0a       	sbc	r8, r27
    89c8:	f1 01       	movw	r30, r2
    89ca:	34 96       	adiw	r30, 0x04	; 4
    89cc:	1f 01       	movw	r2, r30
    89ce:	0f c0       	rjmp	.+30     	; 0x89ee <_printf_fn+0x578>
    89d0:	ff ef       	ldi	r31, 0xFF	; 255
    89d2:	6f 1a       	sub	r6, r31
    89d4:	7f 0a       	sbc	r7, r31
    89d6:	8f 0a       	sbc	r8, r31
    89d8:	c5 c0       	rjmp	.+394    	; 0x8b64 <_printf_fn+0x6ee>
    89da:	2f ef       	ldi	r18, 0xFF	; 255
    89dc:	62 1a       	sub	r6, r18
    89de:	72 0a       	sbc	r7, r18
    89e0:	82 0a       	sbc	r8, r18
    89e2:	11 c1       	rjmp	.+546    	; 0x8c06 <_printf_fn+0x790>
    89e4:	3f ef       	ldi	r19, 0xFF	; 255
    89e6:	63 1a       	sub	r6, r19
    89e8:	73 0a       	sbc	r7, r19
    89ea:	83 0a       	sbc	r8, r19
    89ec:	c8 c0       	rjmp	.+400    	; 0x8b7e <_printf_fn+0x708>
    89ee:	66 96       	adiw	r28, 0x16	; 22
    89f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    89f2:	66 97       	sbiw	r28, 0x16	; 22
    89f4:	67 96       	adiw	r28, 0x17	; 23
    89f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    89f8:	67 97       	sbiw	r28, 0x17	; 23
    89fa:	a3 96       	adiw	r28, 0x23	; 35
    89fc:	ee ad       	ldd	r30, Y+62	; 0x3e
    89fe:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a00:	a3 97       	sbiw	r28, 0x23	; 35
    8a02:	e2 54       	subi	r30, 0x42	; 66
    8a04:	f1 09       	sbc	r31, r1
    8a06:	e7 33       	cpi	r30, 0x37	; 55
    8a08:	f1 05       	cpc	r31, r1
    8a0a:	08 f0       	brcs	.+2      	; 0x8a0e <_printf_fn+0x598>
    8a0c:	56 c1       	rjmp	.+684    	; 0x8cba <_printf_fn+0x844>
    8a0e:	e3 58       	subi	r30, 0x83	; 131
    8a10:	ff 4f       	sbci	r31, 0xFF	; 255
    8a12:	0c 94 84 e6 	jmp	0x1cd08	; 0x1cd08 <__tablejump2__>
    8a16:	e8 94       	clt
    8a18:	94 f8       	bld	r9, 4
    8a1a:	e8 94       	clt
    8a1c:	92 f8       	bld	r9, 2
    8a1e:	a9 2c       	mov	r10, r9
    8a20:	b1 2c       	mov	r11, r1
    8a22:	a1 96       	adiw	r28, 0x21	; 33
    8a24:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a26:	df ac       	ldd	r13, Y+63	; 0x3f
    8a28:	a1 97       	sbiw	r28, 0x21	; 33
    8a2a:	6f 96       	adiw	r28, 0x1f	; 31
    8a2c:	ee ac       	ldd	r14, Y+62	; 0x3e
    8a2e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8a30:	6f 97       	sbiw	r28, 0x1f	; 31
    8a32:	0a e0       	ldi	r16, 0x0A	; 10
    8a34:	10 e0       	ldi	r17, 0x00	; 0
    8a36:	19 c0       	rjmp	.+50     	; 0x8a6a <_printf_fn+0x5f4>
    8a38:	a9 2c       	mov	r10, r9
    8a3a:	b1 2c       	mov	r11, r1
    8a3c:	a1 96       	adiw	r28, 0x21	; 33
    8a3e:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a40:	df ac       	ldd	r13, Y+63	; 0x3f
    8a42:	a1 97       	sbiw	r28, 0x21	; 33
    8a44:	6f 96       	adiw	r28, 0x1f	; 31
    8a46:	ee ac       	ldd	r14, Y+62	; 0x3e
    8a48:	ff ac       	ldd	r15, Y+63	; 0x3f
    8a4a:	6f 97       	sbiw	r28, 0x1f	; 31
    8a4c:	02 e0       	ldi	r16, 0x02	; 2
    8a4e:	10 e0       	ldi	r17, 0x00	; 0
    8a50:	0c c0       	rjmp	.+24     	; 0x8a6a <_printf_fn+0x5f4>
    8a52:	a9 2c       	mov	r10, r9
    8a54:	b1 2c       	mov	r11, r1
    8a56:	a1 96       	adiw	r28, 0x21	; 33
    8a58:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a5a:	df ac       	ldd	r13, Y+63	; 0x3f
    8a5c:	a1 97       	sbiw	r28, 0x21	; 33
    8a5e:	6f 96       	adiw	r28, 0x1f	; 31
    8a60:	ee ac       	ldd	r14, Y+62	; 0x3e
    8a62:	ff ac       	ldd	r15, Y+63	; 0x3f
    8a64:	6f 97       	sbiw	r28, 0x1f	; 31
    8a66:	08 e0       	ldi	r16, 0x08	; 8
    8a68:	10 e0       	ldi	r17, 0x00	; 0
    8a6a:	22 e4       	ldi	r18, 0x42	; 66
    8a6c:	30 e0       	ldi	r19, 0x00	; 0
    8a6e:	ae 01       	movw	r20, r28
    8a70:	4f 5f       	subi	r20, 0xFF	; 255
    8a72:	5f 4f       	sbci	r21, 0xFF	; 255
    8a74:	b2 01       	movw	r22, r4
    8a76:	7d d9       	rcall	.-3334   	; 0x7d72 <p_ntoa>
    8a78:	34 c0       	rjmp	.+104    	; 0x8ae2 <_printf_fn+0x66c>
    8a7a:	a9 2c       	mov	r10, r9
    8a7c:	b1 2c       	mov	r11, r1
    8a7e:	a1 96       	adiw	r28, 0x21	; 33
    8a80:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a82:	df ac       	ldd	r13, Y+63	; 0x3f
    8a84:	a1 97       	sbiw	r28, 0x21	; 33
    8a86:	6f 96       	adiw	r28, 0x1f	; 31
    8a88:	ee ac       	ldd	r14, Y+62	; 0x3e
    8a8a:	ff ac       	ldd	r15, Y+63	; 0x3f
    8a8c:	6f 97       	sbiw	r28, 0x1f	; 31
    8a8e:	00 e1       	ldi	r16, 0x10	; 16
    8a90:	10 e0       	ldi	r17, 0x00	; 0
    8a92:	22 e4       	ldi	r18, 0x42	; 66
    8a94:	30 e0       	ldi	r19, 0x00	; 0
    8a96:	ae 01       	movw	r20, r28
    8a98:	4f 5f       	subi	r20, 0xFF	; 255
    8a9a:	5f 4f       	sbci	r21, 0xFF	; 255
    8a9c:	b2 01       	movw	r22, r4
    8a9e:	69 d9       	rcall	.-3374   	; 0x7d72 <p_ntoa>
    8aa0:	6c 01       	movw	r12, r24
    8aa2:	a3 96       	adiw	r28, 0x23	; 35
    8aa4:	6e ad       	ldd	r22, Y+62	; 0x3e
    8aa6:	7f ad       	ldd	r23, Y+63	; 0x3f
    8aa8:	a3 97       	sbiw	r28, 0x23	; 35
    8aaa:	67 7f       	andi	r22, 0xF7	; 247
    8aac:	60 35       	cpi	r22, 0x50	; 80
    8aae:	71 05       	cpc	r23, r1
    8ab0:	09 f0       	breq	.+2      	; 0x8ab4 <_printf_fn+0x63e>
    8ab2:	3f c0       	rjmp	.+126    	; 0x8b32 <_printf_fn+0x6bc>
    8ab4:	3a c0       	rjmp	.+116    	; 0x8b2a <_printf_fn+0x6b4>
    8ab6:	c9 2c       	mov	r12, r9
    8ab8:	d1 2c       	mov	r13, r1
    8aba:	a1 96       	adiw	r28, 0x21	; 33
    8abc:	ee ac       	ldd	r14, Y+62	; 0x3e
    8abe:	ff ac       	ldd	r15, Y+63	; 0x3f
    8ac0:	a1 97       	sbiw	r28, 0x21	; 33
    8ac2:	6f 96       	adiw	r28, 0x1f	; 31
    8ac4:	0e ad       	ldd	r16, Y+62	; 0x3e
    8ac6:	1f ad       	ldd	r17, Y+63	; 0x3f
    8ac8:	6f 97       	sbiw	r28, 0x1f	; 31
    8aca:	22 e4       	ldi	r18, 0x42	; 66
    8acc:	30 e0       	ldi	r19, 0x00	; 0
    8ace:	ae 01       	movw	r20, r28
    8ad0:	4f 5f       	subi	r20, 0xFF	; 255
    8ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    8ad4:	a9 96       	adiw	r28, 0x29	; 41
    8ad6:	6c ad       	ldd	r22, Y+60	; 0x3c
    8ad8:	7d ad       	ldd	r23, Y+61	; 0x3d
    8ada:	8e ad       	ldd	r24, Y+62	; 0x3e
    8adc:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ade:	a9 97       	sbiw	r28, 0x29	; 41
    8ae0:	9d d9       	rcall	.-3270   	; 0x7e1c <p_ftoa>
    8ae2:	93 fa       	bst	r9, 3
    8ae4:	00 27       	eor	r16, r16
    8ae6:	00 f9       	bld	r16, 0
    8ae8:	10 e0       	ldi	r17, 0x00	; 0
    8aea:	9c 01       	movw	r18, r24
    8aec:	27 c0       	rjmp	.+78     	; 0x8b3c <_printf_fn+0x6c6>
    8aee:	c9 2c       	mov	r12, r9
    8af0:	d1 2c       	mov	r13, r1
    8af2:	a1 96       	adiw	r28, 0x21	; 33
    8af4:	ee ac       	ldd	r14, Y+62	; 0x3e
    8af6:	ff ac       	ldd	r15, Y+63	; 0x3f
    8af8:	a1 97       	sbiw	r28, 0x21	; 33
    8afa:	6f 96       	adiw	r28, 0x1f	; 31
    8afc:	0e ad       	ldd	r16, Y+62	; 0x3e
    8afe:	1f ad       	ldd	r17, Y+63	; 0x3f
    8b00:	6f 97       	sbiw	r28, 0x1f	; 31
    8b02:	22 e4       	ldi	r18, 0x42	; 66
    8b04:	30 e0       	ldi	r19, 0x00	; 0
    8b06:	ae 01       	movw	r20, r28
    8b08:	4f 5f       	subi	r20, 0xFF	; 255
    8b0a:	5f 4f       	sbci	r21, 0xFF	; 255
    8b0c:	a9 96       	adiw	r28, 0x29	; 41
    8b0e:	6c ad       	ldd	r22, Y+60	; 0x3c
    8b10:	7d ad       	ldd	r23, Y+61	; 0x3d
    8b12:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b14:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b16:	a9 97       	sbiw	r28, 0x29	; 41
    8b18:	88 da       	rcall	.-2800   	; 0x802a <p_etoa>
    8b1a:	6c 01       	movw	r12, r24
    8b1c:	a3 96       	adiw	r28, 0x23	; 35
    8b1e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8b20:	5f ad       	ldd	r21, Y+63	; 0x3f
    8b22:	a3 97       	sbiw	r28, 0x23	; 35
    8b24:	45 34       	cpi	r20, 0x45	; 69
    8b26:	51 05       	cpc	r21, r1
    8b28:	21 f4       	brne	.+8      	; 0x8b32 <_printf_fn+0x6bc>
    8b2a:	ce 01       	movw	r24, r28
    8b2c:	01 96       	adiw	r24, 0x01	; 1
    8b2e:	0e 94 6e 31 	call	0x62dc	; 0x62dc <strupper>
    8b32:	93 fa       	bst	r9, 3
    8b34:	00 27       	eor	r16, r16
    8b36:	00 f9       	bld	r16, 0
    8b38:	10 e0       	ldi	r17, 0x00	; 0
    8b3a:	96 01       	movw	r18, r12
    8b3c:	6f 96       	adiw	r28, 0x1f	; 31
    8b3e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8b40:	5f ad       	ldd	r21, Y+63	; 0x3f
    8b42:	6f 97       	sbiw	r28, 0x1f	; 31
    8b44:	be 01       	movw	r22, r28
    8b46:	6f 5f       	subi	r22, 0xFF	; 255
    8b48:	7f 4f       	sbci	r23, 0xFF	; 255
    8b4a:	a5 96       	adiw	r28, 0x25	; 37
    8b4c:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b50:	a5 97       	sbiw	r28, 0x25	; 37
    8b52:	d7 db       	rcall	.-2130   	; 0x8302 <_puts_pad>
    8b54:	b6 c0       	rjmp	.+364    	; 0x8cc2 <_printf_fn+0x84c>
    8b56:	a3 96       	adiw	r28, 0x23	; 35
    8b58:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b5c:	a3 97       	sbiw	r28, 0x23	; 35
    8b5e:	83 37       	cpi	r24, 0x73	; 115
    8b60:	91 05       	cpc	r25, r1
    8b62:	69 f4       	brne	.+26     	; 0x8b7e <_printf_fn+0x708>
    8b64:	61 01       	movw	r12, r2
    8b66:	92 e0       	ldi	r25, 0x02	; 2
    8b68:	c9 0e       	add	r12, r25
    8b6a:	d1 1c       	adc	r13, r1
    8b6c:	d1 01       	movw	r26, r2
    8b6e:	6d 91       	ld	r22, X+
    8b70:	7c 91       	ld	r23, X
    8b72:	61 15       	cp	r22, r1
    8b74:	71 05       	cpc	r23, r1
    8b76:	91 f4       	brne	.+36     	; 0x8b9c <_printf_fn+0x726>
    8b78:	6a e1       	ldi	r22, 0x1A	; 26
    8b7a:	74 e0       	ldi	r23, 0x04	; 4
    8b7c:	0f c0       	rjmp	.+30     	; 0x8b9c <_printf_fn+0x726>
    8b7e:	61 01       	movw	r12, r2
    8b80:	b2 e0       	ldi	r27, 0x02	; 2
    8b82:	cb 0e       	add	r12, r27
    8b84:	d1 1c       	adc	r13, r1
    8b86:	f1 01       	movw	r30, r2
    8b88:	80 81       	ld	r24, Z
    8b8a:	60 96       	adiw	r28, 0x10	; 16
    8b8c:	8f af       	std	Y+63, r24	; 0x3f
    8b8e:	60 97       	sbiw	r28, 0x10	; 16
    8b90:	61 96       	adiw	r28, 0x11	; 17
    8b92:	1f ae       	std	Y+63, r1	; 0x3f
    8b94:	61 97       	sbiw	r28, 0x11	; 17
    8b96:	be 01       	movw	r22, r28
    8b98:	61 5b       	subi	r22, 0xB1	; 177
    8b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    8b9c:	fb 01       	movw	r30, r22
    8b9e:	01 90       	ld	r0, Z+
    8ba0:	00 20       	and	r0, r0
    8ba2:	e9 f7       	brne	.-6      	; 0x8b9e <_printf_fn+0x728>
    8ba4:	31 97       	sbiw	r30, 0x01	; 1
    8ba6:	e6 1b       	sub	r30, r22
    8ba8:	f7 0b       	sbc	r31, r23
    8baa:	a1 96       	adiw	r28, 0x21	; 33
    8bac:	2e ad       	ldd	r18, Y+62	; 0x3e
    8bae:	3f ad       	ldd	r19, Y+63	; 0x3f
    8bb0:	a1 97       	sbiw	r28, 0x21	; 33
    8bb2:	23 2b       	or	r18, r19
    8bb4:	21 f4       	brne	.+8      	; 0x8bbe <_printf_fn+0x748>
    8bb6:	a1 96       	adiw	r28, 0x21	; 33
    8bb8:	ff af       	std	Y+63, r31	; 0x3f
    8bba:	ee af       	std	Y+62, r30	; 0x3e
    8bbc:	a1 97       	sbiw	r28, 0x21	; 33
    8bbe:	6f 96       	adiw	r28, 0x1f	; 31
    8bc0:	4e ad       	ldd	r20, Y+62	; 0x3e
    8bc2:	5f ad       	ldd	r21, Y+63	; 0x3f
    8bc4:	6f 97       	sbiw	r28, 0x1f	; 31
    8bc6:	a1 96       	adiw	r28, 0x21	; 33
    8bc8:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bca:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bcc:	a1 97       	sbiw	r28, 0x21	; 33
    8bce:	48 17       	cp	r20, r24
    8bd0:	59 07       	cpc	r21, r25
    8bd2:	3c f4       	brge	.+14     	; 0x8be2 <_printf_fn+0x76c>
    8bd4:	41 15       	cp	r20, r1
    8bd6:	51 05       	cpc	r21, r1
    8bd8:	21 f0       	breq	.+8      	; 0x8be2 <_printf_fn+0x76c>
    8bda:	a1 96       	adiw	r28, 0x21	; 33
    8bdc:	5f af       	std	Y+63, r21	; 0x3f
    8bde:	4e af       	std	Y+62, r20	; 0x3e
    8be0:	a1 97       	sbiw	r28, 0x21	; 33
    8be2:	93 fa       	bst	r9, 3
    8be4:	00 27       	eor	r16, r16
    8be6:	00 f9       	bld	r16, 0
    8be8:	10 e0       	ldi	r17, 0x00	; 0
    8bea:	a1 96       	adiw	r28, 0x21	; 33
    8bec:	2e ad       	ldd	r18, Y+62	; 0x3e
    8bee:	3f ad       	ldd	r19, Y+63	; 0x3f
    8bf0:	a1 97       	sbiw	r28, 0x21	; 33
    8bf2:	6f 96       	adiw	r28, 0x1f	; 31
    8bf4:	4e ad       	ldd	r20, Y+62	; 0x3e
    8bf6:	5f ad       	ldd	r21, Y+63	; 0x3f
    8bf8:	6f 97       	sbiw	r28, 0x1f	; 31
    8bfa:	a5 96       	adiw	r28, 0x25	; 37
    8bfc:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bfe:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c00:	a5 97       	sbiw	r28, 0x25	; 37
    8c02:	7f db       	rcall	.-2306   	; 0x8302 <_puts_pad>
    8c04:	45 c0       	rjmp	.+138    	; 0x8c90 <_printf_fn+0x81a>
    8c06:	61 01       	movw	r12, r2
    8c08:	92 e0       	ldi	r25, 0x02	; 2
    8c0a:	c9 0e       	add	r12, r25
    8c0c:	d1 1c       	adc	r13, r1
    8c0e:	d1 01       	movw	r26, r2
    8c10:	2d 90       	ld	r2, X+
    8c12:	3c 90       	ld	r3, X
    8c14:	41 2c       	mov	r4, r1
    8c16:	21 14       	cp	r2, r1
    8c18:	31 04       	cpc	r3, r1
    8c1a:	41 04       	cpc	r4, r1
    8c1c:	29 f4       	brne	.+10     	; 0x8c28 <_printf_fn+0x7b2>
    8c1e:	ae 96       	adiw	r28, 0x2e	; 46
    8c20:	2d ac       	ldd	r2, Y+61	; 0x3d
    8c22:	3e ac       	ldd	r3, Y+62	; 0x3e
    8c24:	4f ac       	ldd	r4, Y+63	; 0x3f
    8c26:	ae 97       	sbiw	r28, 0x2e	; 46
    8c28:	84 2d       	mov	r24, r4
    8c2a:	b1 01       	movw	r22, r2
    8c2c:	08 dc       	rcall	.-2032   	; 0x843e <strlen_X>
    8c2e:	a1 96       	adiw	r28, 0x21	; 33
    8c30:	ee ad       	ldd	r30, Y+62	; 0x3e
    8c32:	ff ad       	ldd	r31, Y+63	; 0x3f
    8c34:	a1 97       	sbiw	r28, 0x21	; 33
    8c36:	ef 2b       	or	r30, r31
    8c38:	31 f4       	brne	.+12     	; 0x8c46 <_printf_fn+0x7d0>
    8c3a:	a0 96       	adiw	r28, 0x20	; 32
    8c3c:	8f af       	std	Y+63, r24	; 0x3f
    8c3e:	a0 97       	sbiw	r28, 0x20	; 32
    8c40:	a1 96       	adiw	r28, 0x21	; 33
    8c42:	9f af       	std	Y+63, r25	; 0x3f
    8c44:	a1 97       	sbiw	r28, 0x21	; 33
    8c46:	6f 96       	adiw	r28, 0x1f	; 31
    8c48:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c4a:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c4c:	6f 97       	sbiw	r28, 0x1f	; 31
    8c4e:	a1 96       	adiw	r28, 0x21	; 33
    8c50:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c52:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c54:	a1 97       	sbiw	r28, 0x21	; 33
    8c56:	24 17       	cp	r18, r20
    8c58:	35 07       	cpc	r19, r21
    8c5a:	3c f4       	brge	.+14     	; 0x8c6a <_printf_fn+0x7f4>
    8c5c:	21 15       	cp	r18, r1
    8c5e:	31 05       	cpc	r19, r1
    8c60:	21 f0       	breq	.+8      	; 0x8c6a <_printf_fn+0x7f4>
    8c62:	a1 96       	adiw	r28, 0x21	; 33
    8c64:	3f af       	std	Y+63, r19	; 0x3f
    8c66:	2e af       	std	Y+62, r18	; 0x3e
    8c68:	a1 97       	sbiw	r28, 0x21	; 33
    8c6a:	93 fa       	bst	r9, 3
    8c6c:	ee 24       	eor	r14, r14
    8c6e:	e0 f8       	bld	r14, 0
    8c70:	f1 2c       	mov	r15, r1
    8c72:	a1 96       	adiw	r28, 0x21	; 33
    8c74:	0e ad       	ldd	r16, Y+62	; 0x3e
    8c76:	1f ad       	ldd	r17, Y+63	; 0x3f
    8c78:	a1 97       	sbiw	r28, 0x21	; 33
    8c7a:	6f 96       	adiw	r28, 0x1f	; 31
    8c7c:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c7e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c80:	6f 97       	sbiw	r28, 0x1f	; 31
    8c82:	64 2d       	mov	r22, r4
    8c84:	a1 01       	movw	r20, r2
    8c86:	a5 96       	adiw	r28, 0x25	; 37
    8c88:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c8c:	a5 97       	sbiw	r28, 0x25	; 37
    8c8e:	7b db       	rcall	.-2314   	; 0x8386 <_puts_pad_X>
    8c90:	16 01       	movw	r2, r12
    8c92:	17 c0       	rjmp	.+46     	; 0x8cc2 <_printf_fn+0x84c>
    8c94:	f6 01       	movw	r30, r12
    8c96:	5e 2d       	mov	r21, r14
    8c98:	0e 94 ea e6 	call	0x1cdd4	; 0x1cdd4 <__xload_1>
    8c9c:	66 23       	and	r22, r22
    8c9e:	89 f0       	breq	.+34     	; 0x8cc2 <_printf_fn+0x84c>
    8ca0:	5f ef       	ldi	r21, 0xFF	; 255
    8ca2:	c5 1a       	sub	r12, r21
    8ca4:	d5 0a       	sbc	r13, r21
    8ca6:	e5 0a       	sbc	r14, r21
    8ca8:	a5 96       	adiw	r28, 0x25	; 37
    8caa:	ae ad       	ldd	r26, Y+62	; 0x3e
    8cac:	bf ad       	ldd	r27, Y+63	; 0x3f
    8cae:	a5 97       	sbiw	r28, 0x25	; 37
    8cb0:	ed 91       	ld	r30, X+
    8cb2:	fc 91       	ld	r31, X
    8cb4:	11 97       	sbiw	r26, 0x01	; 1
    8cb6:	cd 01       	movw	r24, r26
    8cb8:	09 95       	icall
    8cba:	6c 14       	cp	r6, r12
    8cbc:	7d 04       	cpc	r7, r13
    8cbe:	8e 04       	cpc	r8, r14
    8cc0:	48 f7       	brcc	.-46     	; 0x8c94 <_printf_fn+0x81e>
    8cc2:	e8 2c       	mov	r14, r8
    8cc4:	63 01       	movw	r12, r6
    8cc6:	0f cc       	rjmp	.-2018   	; 0x84e6 <_printf_fn+0x70>
    8cc8:	82 e0       	ldi	r24, 0x02	; 2
    8cca:	48 2e       	mov	r4, r24
    8ccc:	51 2c       	mov	r5, r1
    8cce:	0d cd       	rjmp	.-1510   	; 0x86ea <_printf_fn+0x274>
    8cd0:	f2 e0       	ldi	r31, 0x02	; 2
    8cd2:	4f 16       	cp	r4, r31
    8cd4:	51 04       	cpc	r5, r1
    8cd6:	61 f4       	brne	.+24     	; 0x8cf0 <_printf_fn+0x87a>
    8cd8:	51 01       	movw	r10, r2
    8cda:	b2 e0       	ldi	r27, 0x02	; 2
    8cdc:	ab 0e       	add	r10, r27
    8cde:	b1 1c       	adc	r11, r1
    8ce0:	f1 01       	movw	r30, r2
    8ce2:	80 81       	ld	r24, Z
    8ce4:	91 81       	ldd	r25, Z+1	; 0x01
    8ce6:	65 96       	adiw	r28, 0x15	; 21
    8ce8:	9f af       	std	Y+63, r25	; 0x3f
    8cea:	8e af       	std	Y+62, r24	; 0x3e
    8cec:	65 97       	sbiw	r28, 0x15	; 21
    8cee:	7e cd       	rjmp	.-1284   	; 0x87ec <_printf_fn+0x376>
    8cf0:	f4 e0       	ldi	r31, 0x04	; 4
    8cf2:	4f 16       	cp	r4, r31
    8cf4:	51 04       	cpc	r5, r1
    8cf6:	09 f0       	breq	.+2      	; 0x8cfa <_printf_fn+0x884>
    8cf8:	b2 cd       	rjmp	.-1180   	; 0x885e <_printf_fn+0x3e8>
    8cfa:	51 01       	movw	r10, r2
    8cfc:	24 e0       	ldi	r18, 0x04	; 4
    8cfe:	a2 0e       	add	r10, r18
    8d00:	b1 1c       	adc	r11, r1
    8d02:	f1 01       	movw	r30, r2
    8d04:	80 81       	ld	r24, Z
    8d06:	91 81       	ldd	r25, Z+1	; 0x01
    8d08:	a2 81       	ldd	r26, Z+2	; 0x02
    8d0a:	b3 81       	ldd	r27, Z+3	; 0x03
    8d0c:	2f 96       	adiw	r28, 0x0f	; 15
    8d0e:	8c af       	std	Y+60, r24	; 0x3c
    8d10:	9d af       	std	Y+61, r25	; 0x3d
    8d12:	ae af       	std	Y+62, r26	; 0x3e
    8d14:	bf af       	std	Y+63, r27	; 0x3f
    8d16:	2f 97       	sbiw	r28, 0x0f	; 15
    8d18:	90 cd       	rjmp	.-1248   	; 0x883a <_printf_fn+0x3c4>
    8d1a:	c2 59       	subi	r28, 0x92	; 146
    8d1c:	df 4f       	sbci	r29, 0xFF	; 255
    8d1e:	e2 e1       	ldi	r30, 0x12	; 18
    8d20:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

00008d24 <vsnprintf_P>:
    8d24:	a8 e0       	ldi	r26, 0x08	; 8
    8d26:	b0 e0       	ldi	r27, 0x00	; 0
    8d28:	e8 e9       	ldi	r30, 0x98	; 152
    8d2a:	f6 e4       	ldi	r31, 0x46	; 70
    8d2c:	0c 94 bf e6 	jmp	0x1cd7e	; 0x1cd7e <__prologue_saves__+0x18>
    8d30:	7c 01       	movw	r14, r24
    8d32:	cb 01       	movw	r24, r22
    8d34:	64 2f       	mov	r22, r20
    8d36:	a9 01       	movw	r20, r18
    8d38:	98 01       	movw	r18, r16
    8d3a:	f7 01       	movw	r30, r14
    8d3c:	10 82       	st	Z, r1
    8d3e:	e0 ef       	ldi	r30, 0xF0	; 240
    8d40:	fd e3       	ldi	r31, 0x3D	; 61
    8d42:	fa 83       	std	Y+2, r31	; 0x02
    8d44:	e9 83       	std	Y+1, r30	; 0x01
    8d46:	9e 83       	std	Y+6, r25	; 0x06
    8d48:	8d 83       	std	Y+5, r24	; 0x05
    8d4a:	18 86       	std	Y+8, r1	; 0x08
    8d4c:	1f 82       	std	Y+7, r1	; 0x07
    8d4e:	fc 82       	std	Y+4, r15	; 0x04
    8d50:	eb 82       	std	Y+3, r14	; 0x03
    8d52:	ce 01       	movw	r24, r28
    8d54:	01 96       	adiw	r24, 0x01	; 1
    8d56:	8f db       	rcall	.-2274   	; 0x8476 <_printf_fn>
    8d58:	f7 01       	movw	r30, r14
    8d5a:	01 90       	ld	r0, Z+
    8d5c:	00 20       	and	r0, r0
    8d5e:	e9 f7       	brne	.-6      	; 0x8d5a <vsnprintf_P+0x36>
    8d60:	cf 01       	movw	r24, r30
    8d62:	01 97       	sbiw	r24, 0x01	; 1
    8d64:	8e 19       	sub	r24, r14
    8d66:	9f 09       	sbc	r25, r15
    8d68:	28 96       	adiw	r28, 0x08	; 8
    8d6a:	e6 e0       	ldi	r30, 0x06	; 6
    8d6c:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

00008d70 <snprintf_P>:
    8d70:	a0 e0       	ldi	r26, 0x00	; 0
    8d72:	b0 e0       	ldi	r27, 0x00	; 0
    8d74:	ee eb       	ldi	r30, 0xBE	; 190
    8d76:	f6 e4       	ldi	r31, 0x46	; 70
    8d78:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
    8d7c:	8e 01       	movw	r16, r28
    8d7e:	02 5f       	subi	r16, 0xF2	; 242
    8d80:	1f 4f       	sbci	r17, 0xFF	; 255
    8d82:	2b 85       	ldd	r18, Y+11	; 0x0b
    8d84:	3c 85       	ldd	r19, Y+12	; 0x0c
    8d86:	4d 85       	ldd	r20, Y+13	; 0x0d
    8d88:	69 85       	ldd	r22, Y+9	; 0x09
    8d8a:	7a 85       	ldd	r23, Y+10	; 0x0a
    8d8c:	8f 81       	ldd	r24, Y+7	; 0x07
    8d8e:	98 85       	ldd	r25, Y+8	; 0x08
    8d90:	c9 df       	rcall	.-110    	; 0x8d24 <vsnprintf_P>
    8d92:	e4 e0       	ldi	r30, 0x04	; 4
    8d94:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

00008d98 <sprintf_P>:
    8d98:	a0 e0       	ldi	r26, 0x00	; 0
    8d9a:	b0 e0       	ldi	r27, 0x00	; 0
    8d9c:	e2 ed       	ldi	r30, 0xD2	; 210
    8d9e:	f6 e4       	ldi	r31, 0x46	; 70
    8da0:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
    8da4:	8e 01       	movw	r16, r28
    8da6:	04 5f       	subi	r16, 0xF4	; 244
    8da8:	1f 4f       	sbci	r17, 0xFF	; 255
    8daa:	29 85       	ldd	r18, Y+9	; 0x09
    8dac:	3a 85       	ldd	r19, Y+10	; 0x0a
    8dae:	4b 85       	ldd	r20, Y+11	; 0x0b
    8db0:	60 e0       	ldi	r22, 0x00	; 0
    8db2:	74 e0       	ldi	r23, 0x04	; 4
    8db4:	8f 81       	ldd	r24, Y+7	; 0x07
    8db6:	98 85       	ldd	r25, Y+8	; 0x08
    8db8:	b5 df       	rcall	.-150    	; 0x8d24 <vsnprintf_P>
    8dba:	e4 e0       	ldi	r30, 0x04	; 4
    8dbc:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

00008dc0 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8dc0:	a8 e0       	ldi	r26, 0x08	; 8
    8dc2:	b0 e0       	ldi	r27, 0x00	; 0
    8dc4:	e6 ee       	ldi	r30, 0xE6	; 230
    8dc6:	f6 e4       	ldi	r31, 0x46	; 70
    8dc8:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    8dcc:	9e 01       	movw	r18, r28
    8dce:	23 5f       	subi	r18, 0xF3	; 243
    8dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    8dd2:	f9 01       	movw	r30, r18
    8dd4:	41 91       	ld	r20, Z+
    8dd6:	51 91       	ld	r21, Z+
    8dd8:	61 91       	ld	r22, Z+
    8dda:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8ddc:	89 e0       	ldi	r24, 0x09	; 9
    8dde:	9e e3       	ldi	r25, 0x3E	; 62
    8de0:	9a 83       	std	Y+2, r25	; 0x02
    8de2:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8de4:	18 86       	std	Y+8, r1	; 0x08
    8de6:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8de8:	ce 01       	movw	r24, r28
    8dea:	01 96       	adiw	r24, 0x01	; 1
    8dec:	44 db       	rcall	.-2424   	; 0x8476 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8dee:	8f 81       	ldd	r24, Y+7	; 0x07
    8df0:	98 85       	ldd	r25, Y+8	; 0x08
    8df2:	28 96       	adiw	r28, 0x08	; 8
    8df4:	e2 e0       	ldi	r30, 0x02	; 2
    8df6:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00008dfa <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8dfa:	9c 01       	movw	r18, r24
    8dfc:	20 53       	subi	r18, 0x30	; 48
    8dfe:	31 09       	sbc	r19, r1
    8e00:	2a 30       	cpi	r18, 0x0A	; 10
    8e02:	31 05       	cpc	r19, r1
    8e04:	10 f4       	brcc	.+4      	; 0x8e0a <atodigit+0x10>
    8e06:	c9 01       	movw	r24, r18
    8e08:	10 c0       	rjmp	.+32     	; 0x8e2a <atodigit+0x30>
    8e0a:	9c 01       	movw	r18, r24
    8e0c:	21 54       	subi	r18, 0x41	; 65
    8e0e:	31 09       	sbc	r19, r1
    8e10:	26 30       	cpi	r18, 0x06	; 6
    8e12:	31 05       	cpc	r19, r1
    8e14:	10 f4       	brcc	.+4      	; 0x8e1a <atodigit+0x20>
    8e16:	c7 97       	sbiw	r24, 0x37	; 55
    8e18:	08 c0       	rjmp	.+16     	; 0x8e2a <atodigit+0x30>
    8e1a:	9c 01       	movw	r18, r24
    8e1c:	21 56       	subi	r18, 0x61	; 97
    8e1e:	31 09       	sbc	r19, r1
    8e20:	26 30       	cpi	r18, 0x06	; 6
    8e22:	31 05       	cpc	r19, r1
    8e24:	28 f4       	brcc	.+10     	; 0x8e30 <atodigit+0x36>
    8e26:	87 55       	subi	r24, 0x57	; 87
    8e28:	91 09       	sbc	r25, r1
    8e2a:	86 17       	cp	r24, r22
    8e2c:	97 07       	cpc	r25, r23
    8e2e:	14 f0       	brlt	.+4      	; 0x8e34 <atodigit+0x3a>
    8e30:	8f ef       	ldi	r24, 0xFF	; 255
    8e32:	9f ef       	ldi	r25, 0xFF	; 255
    8e34:	08 95       	ret

00008e36 <strtol>:
    8e36:	a0 e0       	ldi	r26, 0x00	; 0
    8e38:	b0 e0       	ldi	r27, 0x00	; 0
    8e3a:	e1 e2       	ldi	r30, 0x21	; 33
    8e3c:	f7 e4       	ldi	r31, 0x47	; 71
    8e3e:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    8e42:	2b 01       	movw	r4, r22
    8e44:	8a 01       	movw	r16, r20
    8e46:	ec 01       	movw	r28, r24
    8e48:	28 81       	ld	r18, Y
    8e4a:	01 96       	adiw	r24, 0x01	; 1
    8e4c:	20 32       	cpi	r18, 0x20	; 32
    8e4e:	d9 f3       	breq	.-10     	; 0x8e46 <strtol+0x10>
    8e50:	29 30       	cpi	r18, 0x09	; 9
    8e52:	c9 f3       	breq	.-14     	; 0x8e46 <strtol+0x10>
    8e54:	2d 32       	cpi	r18, 0x2D	; 45
    8e56:	29 f4       	brne	.+10     	; 0x8e62 <strtol+0x2c>
    8e58:	ec 01       	movw	r28, r24
    8e5a:	66 24       	eor	r6, r6
    8e5c:	63 94       	inc	r6
    8e5e:	71 2c       	mov	r7, r1
    8e60:	05 c0       	rjmp	.+10     	; 0x8e6c <strtol+0x36>
    8e62:	2b 32       	cpi	r18, 0x2B	; 43
    8e64:	09 f4       	brne	.+2      	; 0x8e68 <strtol+0x32>
    8e66:	ec 01       	movw	r28, r24
    8e68:	61 2c       	mov	r6, r1
    8e6a:	71 2c       	mov	r7, r1
    8e6c:	9e 01       	movw	r18, r28
    8e6e:	2f 5f       	subi	r18, 0xFF	; 255
    8e70:	3f 4f       	sbci	r19, 0xFF	; 255
    8e72:	88 81       	ld	r24, Y
    8e74:	80 33       	cpi	r24, 0x30	; 48
    8e76:	11 f4       	brne	.+4      	; 0x8e7c <strtol+0x46>
    8e78:	e9 01       	movw	r28, r18
    8e7a:	f8 cf       	rjmp	.-16     	; 0x8e6c <strtol+0x36>
    8e7c:	c1 2c       	mov	r12, r1
    8e7e:	d1 2c       	mov	r13, r1
    8e80:	76 01       	movw	r14, r12
    8e82:	48 01       	movw	r8, r16
    8e84:	01 2e       	mov	r0, r17
    8e86:	00 0c       	add	r0, r0
    8e88:	aa 08       	sbc	r10, r10
    8e8a:	bb 08       	sbc	r11, r11
    8e8c:	3c 2e       	mov	r3, r28
    8e8e:	2d 2e       	mov	r2, r29
    8e90:	89 91       	ld	r24, Y+
    8e92:	88 23       	and	r24, r24
    8e94:	31 f0       	breq	.+12     	; 0x8ea2 <strtol+0x6c>
    8e96:	b8 01       	movw	r22, r16
    8e98:	90 e0       	ldi	r25, 0x00	; 0
    8e9a:	af df       	rcall	.-162    	; 0x8dfa <atodigit>
    8e9c:	fc 01       	movw	r30, r24
    8e9e:	97 ff       	sbrs	r25, 7
    8ea0:	0c c0       	rjmp	.+24     	; 0x8eba <strtol+0x84>
    8ea2:	61 14       	cp	r6, r1
    8ea4:	71 04       	cpc	r7, r1
    8ea6:	c1 f0       	breq	.+48     	; 0x8ed8 <strtol+0xa2>
    8ea8:	f0 94       	com	r15
    8eaa:	e0 94       	com	r14
    8eac:	d0 94       	com	r13
    8eae:	c0 94       	com	r12
    8eb0:	c1 1c       	adc	r12, r1
    8eb2:	d1 1c       	adc	r13, r1
    8eb4:	e1 1c       	adc	r14, r1
    8eb6:	f1 1c       	adc	r15, r1
    8eb8:	0f c0       	rjmp	.+30     	; 0x8ed8 <strtol+0xa2>
    8eba:	a5 01       	movw	r20, r10
    8ebc:	94 01       	movw	r18, r8
    8ebe:	c7 01       	movw	r24, r14
    8ec0:	b6 01       	movw	r22, r12
    8ec2:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <__mulsi3>
    8ec6:	6f 01       	movw	r12, r30
    8ec8:	ff 0f       	add	r31, r31
    8eca:	ee 08       	sbc	r14, r14
    8ecc:	ff 08       	sbc	r15, r15
    8ece:	c6 0e       	add	r12, r22
    8ed0:	d7 1e       	adc	r13, r23
    8ed2:	e8 1e       	adc	r14, r24
    8ed4:	f9 1e       	adc	r15, r25
    8ed6:	da cf       	rjmp	.-76     	; 0x8e8c <strtol+0x56>
    8ed8:	41 14       	cp	r4, r1
    8eda:	51 04       	cpc	r5, r1
    8edc:	19 f0       	breq	.+6      	; 0x8ee4 <strtol+0xae>
    8ede:	f2 01       	movw	r30, r4
    8ee0:	30 82       	st	Z, r3
    8ee2:	21 82       	std	Z+1, r2	; 0x01
    8ee4:	c7 01       	movw	r24, r14
    8ee6:	b6 01       	movw	r22, r12
    8ee8:	cd b7       	in	r28, 0x3d	; 61
    8eea:	de b7       	in	r29, 0x3e	; 62
    8eec:	e2 e1       	ldi	r30, 0x12	; 18
    8eee:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

00008ef2 <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8ef2:	4a e0       	ldi	r20, 0x0A	; 10
    8ef4:	50 e0       	ldi	r21, 0x00	; 0
    8ef6:	60 e0       	ldi	r22, 0x00	; 0
    8ef8:	70 e0       	ldi	r23, 0x00	; 0
    8efa:	9d df       	rcall	.-198    	; 0x8e36 <strtol>
    return((int)num);
}
    8efc:	cb 01       	movw	r24, r22
    8efe:	08 95       	ret

00008f00 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8f00:	4a e0       	ldi	r20, 0x0A	; 10
    8f02:	50 e0       	ldi	r21, 0x00	; 0
    8f04:	60 e0       	ldi	r22, 0x00	; 0
    8f06:	70 e0       	ldi	r23, 0x00	; 0
    8f08:	96 cf       	rjmp	.-212    	; 0x8e36 <strtol>
    return(num);
}
    8f0a:	08 95       	ret

00008f0c <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8f0c:	fc 01       	movw	r30, r24
    8f0e:	62 81       	ldd	r22, Z+2	; 0x02
    8f10:	73 81       	ldd	r23, Z+3	; 0x03
    8f12:	cb 01       	movw	r24, r22
    8f14:	a0 e0       	ldi	r26, 0x00	; 0
    8f16:	b0 e0       	ldi	r27, 0x00	; 0
    8f18:	ba 2f       	mov	r27, r26
    8f1a:	a9 2f       	mov	r26, r25
    8f1c:	98 2f       	mov	r25, r24
    8f1e:	88 27       	eor	r24, r24
    8f20:	21 81       	ldd	r18, Z+1	; 0x01
    8f22:	82 2b       	or	r24, r18
    8f24:	ba 2f       	mov	r27, r26
    8f26:	a9 2f       	mov	r26, r25
    8f28:	98 2f       	mov	r25, r24
    8f2a:	88 27       	eor	r24, r24
    8f2c:	20 81       	ld	r18, Z
    8f2e:	bc 01       	movw	r22, r24
    8f30:	cd 01       	movw	r24, r26
    8f32:	62 2b       	or	r22, r18
    8f34:	08 95       	ret

00008f36 <st_dword>:
    8f36:	fc 01       	movw	r30, r24
    8f38:	40 83       	st	Z, r20
    8f3a:	51 83       	std	Z+1, r21	; 0x01
    8f3c:	62 83       	std	Z+2, r22	; 0x02
    8f3e:	73 83       	std	Z+3, r23	; 0x03
    8f40:	08 95       	ret

00008f42 <mem_set>:
    8f42:	48 0f       	add	r20, r24
    8f44:	59 1f       	adc	r21, r25
    8f46:	fc 01       	movw	r30, r24
    8f48:	61 93       	st	Z+, r22
    8f4a:	cf 01       	movw	r24, r30
    8f4c:	e4 17       	cp	r30, r20
    8f4e:	f5 07       	cpc	r31, r21
    8f50:	d1 f7       	brne	.-12     	; 0x8f46 <mem_set+0x4>
    8f52:	08 95       	ret

00008f54 <mem_cmp>:
    8f54:	dc 01       	movw	r26, r24
    8f56:	fb 01       	movw	r30, r22
    8f58:	2d 91       	ld	r18, X+
    8f5a:	81 91       	ld	r24, Z+
    8f5c:	30 e0       	ldi	r19, 0x00	; 0
    8f5e:	b9 01       	movw	r22, r18
    8f60:	68 1b       	sub	r22, r24
    8f62:	71 09       	sbc	r23, r1
    8f64:	cb 01       	movw	r24, r22
    8f66:	41 50       	subi	r20, 0x01	; 1
    8f68:	51 09       	sbc	r21, r1
    8f6a:	11 f0       	breq	.+4      	; 0x8f70 <mem_cmp+0x1c>
    8f6c:	00 97       	sbiw	r24, 0x00	; 0
    8f6e:	a1 f3       	breq	.-24     	; 0x8f58 <mem_cmp+0x4>
    8f70:	08 95       	ret

00008f72 <clst2sect>:
    8f72:	0f 93       	push	r16
    8f74:	1f 93       	push	r17
    8f76:	fc 01       	movw	r30, r24
    8f78:	9a 01       	movw	r18, r20
    8f7a:	ab 01       	movw	r20, r22
    8f7c:	22 50       	subi	r18, 0x02	; 2
    8f7e:	31 09       	sbc	r19, r1
    8f80:	41 09       	sbc	r20, r1
    8f82:	51 09       	sbc	r21, r1
    8f84:	81 8d       	ldd	r24, Z+25	; 0x19
    8f86:	92 8d       	ldd	r25, Z+26	; 0x1a
    8f88:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8f8a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8f8c:	02 97       	sbiw	r24, 0x02	; 2
    8f8e:	a1 09       	sbc	r26, r1
    8f90:	b1 09       	sbc	r27, r1
    8f92:	28 17       	cp	r18, r24
    8f94:	39 07       	cpc	r19, r25
    8f96:	4a 07       	cpc	r20, r26
    8f98:	5b 07       	cpc	r21, r27
    8f9a:	68 f4       	brcc	.+26     	; 0x8fb6 <clst2sect+0x44>
    8f9c:	a1 85       	ldd	r26, Z+9	; 0x09
    8f9e:	b2 85       	ldd	r27, Z+10	; 0x0a
    8fa0:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__muluhisi3>
    8fa4:	05 a5       	ldd	r16, Z+45	; 0x2d
    8fa6:	16 a5       	ldd	r17, Z+46	; 0x2e
    8fa8:	27 a5       	ldd	r18, Z+47	; 0x2f
    8faa:	30 a9       	ldd	r19, Z+48	; 0x30
    8fac:	60 0f       	add	r22, r16
    8fae:	71 1f       	adc	r23, r17
    8fb0:	82 1f       	adc	r24, r18
    8fb2:	93 1f       	adc	r25, r19
    8fb4:	03 c0       	rjmp	.+6      	; 0x8fbc <clst2sect+0x4a>
    8fb6:	60 e0       	ldi	r22, 0x00	; 0
    8fb8:	70 e0       	ldi	r23, 0x00	; 0
    8fba:	cb 01       	movw	r24, r22
    8fbc:	1f 91       	pop	r17
    8fbe:	0f 91       	pop	r16
    8fc0:	08 95       	ret

00008fc2 <clmt_clust>:
    8fc2:	cf 93       	push	r28
    8fc4:	df 93       	push	r29
    8fc6:	fc 01       	movw	r30, r24
    8fc8:	c2 a1       	ldd	r28, Z+34	; 0x22
    8fca:	d3 a1       	ldd	r29, Z+35	; 0x23
    8fcc:	24 96       	adiw	r28, 0x04	; 4
    8fce:	cb 01       	movw	r24, r22
    8fd0:	ba 01       	movw	r22, r20
    8fd2:	29 e0       	ldi	r18, 0x09	; 9
    8fd4:	96 95       	lsr	r25
    8fd6:	87 95       	ror	r24
    8fd8:	77 95       	ror	r23
    8fda:	67 95       	ror	r22
    8fdc:	2a 95       	dec	r18
    8fde:	d1 f7       	brne	.-12     	; 0x8fd4 <clmt_clust+0x12>
    8fe0:	01 90       	ld	r0, Z+
    8fe2:	f0 81       	ld	r31, Z
    8fe4:	e0 2d       	mov	r30, r0
    8fe6:	21 85       	ldd	r18, Z+9	; 0x09
    8fe8:	32 85       	ldd	r19, Z+10	; 0x0a
    8fea:	40 e0       	ldi	r20, 0x00	; 0
    8fec:	50 e0       	ldi	r21, 0x00	; 0
    8fee:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__udivmodsi4>
    8ff2:	88 81       	ld	r24, Y
    8ff4:	99 81       	ldd	r25, Y+1	; 0x01
    8ff6:	aa 81       	ldd	r26, Y+2	; 0x02
    8ff8:	bb 81       	ldd	r27, Y+3	; 0x03
    8ffa:	00 97       	sbiw	r24, 0x00	; 0
    8ffc:	a1 05       	cpc	r26, r1
    8ffe:	b1 05       	cpc	r27, r1
    9000:	b1 f0       	breq	.+44     	; 0x902e <clmt_clust+0x6c>
    9002:	28 17       	cp	r18, r24
    9004:	39 07       	cpc	r19, r25
    9006:	4a 07       	cpc	r20, r26
    9008:	5b 07       	cpc	r21, r27
    900a:	30 f0       	brcs	.+12     	; 0x9018 <clmt_clust+0x56>
    900c:	28 1b       	sub	r18, r24
    900e:	39 0b       	sbc	r19, r25
    9010:	4a 0b       	sbc	r20, r26
    9012:	5b 0b       	sbc	r21, r27
    9014:	28 96       	adiw	r28, 0x08	; 8
    9016:	ed cf       	rjmp	.-38     	; 0x8ff2 <clmt_clust+0x30>
    9018:	8c 81       	ldd	r24, Y+4	; 0x04
    901a:	9d 81       	ldd	r25, Y+5	; 0x05
    901c:	ae 81       	ldd	r26, Y+6	; 0x06
    901e:	bf 81       	ldd	r27, Y+7	; 0x07
    9020:	bc 01       	movw	r22, r24
    9022:	cd 01       	movw	r24, r26
    9024:	62 0f       	add	r22, r18
    9026:	73 1f       	adc	r23, r19
    9028:	84 1f       	adc	r24, r20
    902a:	95 1f       	adc	r25, r21
    902c:	03 c0       	rjmp	.+6      	; 0x9034 <clmt_clust+0x72>
    902e:	60 e0       	ldi	r22, 0x00	; 0
    9030:	70 e0       	ldi	r23, 0x00	; 0
    9032:	cb 01       	movw	r24, r22
    9034:	df 91       	pop	r29
    9036:	cf 91       	pop	r28
    9038:	08 95       	ret

0000903a <sum_sfn>:
    903a:	fc 01       	movw	r30, r24
    903c:	9c 01       	movw	r18, r24
    903e:	25 5f       	subi	r18, 0xF5	; 245
    9040:	3f 4f       	sbci	r19, 0xFF	; 255
    9042:	80 e0       	ldi	r24, 0x00	; 0
    9044:	98 2f       	mov	r25, r24
    9046:	90 fb       	bst	r25, 0
    9048:	97 95       	ror	r25
    904a:	97 f9       	bld	r25, 7
    904c:	81 91       	ld	r24, Z+
    904e:	89 0f       	add	r24, r25
    9050:	e2 17       	cp	r30, r18
    9052:	f3 07       	cpc	r31, r19
    9054:	b9 f7       	brne	.-18     	; 0x9044 <sum_sfn+0xa>
    9056:	08 95       	ret

00009058 <get_ldnumber>:
    9058:	cf 93       	push	r28
    905a:	df 93       	push	r29
    905c:	dc 01       	movw	r26, r24
    905e:	ed 91       	ld	r30, X+
    9060:	fc 91       	ld	r31, X
    9062:	11 97       	sbiw	r26, 0x01	; 1
    9064:	30 97       	sbiw	r30, 0x00	; 0
    9066:	f9 f0       	breq	.+62     	; 0x90a6 <get_ldnumber+0x4e>
    9068:	9f 01       	movw	r18, r30
    906a:	2f 5f       	subi	r18, 0xFF	; 255
    906c:	3f 4f       	sbci	r19, 0xFF	; 255
    906e:	e9 01       	movw	r28, r18
    9070:	21 97       	sbiw	r28, 0x01	; 1
    9072:	88 81       	ld	r24, Y
    9074:	80 32       	cpi	r24, 0x20	; 32
    9076:	18 f0       	brcs	.+6      	; 0x907e <get_ldnumber+0x26>
    9078:	8a 33       	cpi	r24, 0x3A	; 58
    907a:	b9 f7       	brne	.-18     	; 0x906a <get_ldnumber+0x12>
    907c:	04 c0       	rjmp	.+8      	; 0x9086 <get_ldnumber+0x2e>
    907e:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <CurrVol>
    9082:	90 e0       	ldi	r25, 0x00	; 0
    9084:	12 c0       	rjmp	.+36     	; 0x90aa <get_ldnumber+0x52>
    9086:	90 81       	ld	r25, Z
    9088:	80 ed       	ldi	r24, 0xD0	; 208
    908a:	89 0f       	add	r24, r25
    908c:	8a 30       	cpi	r24, 0x0A	; 10
    908e:	58 f4       	brcc	.+22     	; 0x90a6 <get_ldnumber+0x4e>
    9090:	32 96       	adiw	r30, 0x02	; 2
    9092:	2e 17       	cp	r18, r30
    9094:	3f 07       	cpc	r19, r31
    9096:	39 f4       	brne	.+14     	; 0x90a6 <get_ldnumber+0x4e>
    9098:	90 33       	cpi	r25, 0x30	; 48
    909a:	29 f4       	brne	.+10     	; 0x90a6 <get_ldnumber+0x4e>
    909c:	2d 93       	st	X+, r18
    909e:	3c 93       	st	X, r19
    90a0:	80 e0       	ldi	r24, 0x00	; 0
    90a2:	90 e0       	ldi	r25, 0x00	; 0
    90a4:	02 c0       	rjmp	.+4      	; 0x90aa <get_ldnumber+0x52>
    90a6:	8f ef       	ldi	r24, 0xFF	; 255
    90a8:	9f ef       	ldi	r25, 0xFF	; 255
    90aa:	df 91       	pop	r29
    90ac:	cf 91       	pop	r28
    90ae:	08 95       	ret

000090b0 <validate>:
    90b0:	0f 93       	push	r16
    90b2:	1f 93       	push	r17
    90b4:	cf 93       	push	r28
    90b6:	df 93       	push	r29
    90b8:	ec 01       	movw	r28, r24
    90ba:	8b 01       	movw	r16, r22
    90bc:	89 2b       	or	r24, r25
    90be:	f9 f0       	breq	.+62     	; 0x90fe <validate+0x4e>
    90c0:	e8 81       	ld	r30, Y
    90c2:	f9 81       	ldd	r31, Y+1	; 0x01
    90c4:	30 97       	sbiw	r30, 0x00	; 0
    90c6:	d9 f0       	breq	.+54     	; 0x90fe <validate+0x4e>
    90c8:	80 81       	ld	r24, Z
    90ca:	88 23       	and	r24, r24
    90cc:	c1 f0       	breq	.+48     	; 0x90fe <validate+0x4e>
    90ce:	2a 81       	ldd	r18, Y+2	; 0x02
    90d0:	3b 81       	ldd	r19, Y+3	; 0x03
    90d2:	85 81       	ldd	r24, Z+5	; 0x05
    90d4:	96 81       	ldd	r25, Z+6	; 0x06
    90d6:	28 17       	cp	r18, r24
    90d8:	39 07       	cpc	r19, r25
    90da:	89 f4       	brne	.+34     	; 0x90fe <validate+0x4e>
    90dc:	81 81       	ldd	r24, Z+1	; 0x01
    90de:	0e 94 6e 69 	call	0xd2dc	; 0xd2dc <disk_status>
    90e2:	80 fd       	sbrc	r24, 0
    90e4:	0c c0       	rjmp	.+24     	; 0x90fe <validate+0x4e>
    90e6:	28 81       	ld	r18, Y
    90e8:	39 81       	ldd	r19, Y+1	; 0x01
    90ea:	80 e0       	ldi	r24, 0x00	; 0
    90ec:	90 e0       	ldi	r25, 0x00	; 0
    90ee:	f8 01       	movw	r30, r16
    90f0:	31 83       	std	Z+1, r19	; 0x01
    90f2:	20 83       	st	Z, r18
    90f4:	df 91       	pop	r29
    90f6:	cf 91       	pop	r28
    90f8:	1f 91       	pop	r17
    90fa:	0f 91       	pop	r16
    90fc:	08 95       	ret
    90fe:	89 e0       	ldi	r24, 0x09	; 9
    9100:	90 e0       	ldi	r25, 0x00	; 0
    9102:	20 e0       	ldi	r18, 0x00	; 0
    9104:	30 e0       	ldi	r19, 0x00	; 0
    9106:	f3 cf       	rjmp	.-26     	; 0x90ee <validate+0x3e>

00009108 <get_fileinfo>:
    9108:	a8 e0       	ldi	r26, 0x08	; 8
    910a:	b0 e0       	ldi	r27, 0x00	; 0
    910c:	ea e8       	ldi	r30, 0x8A	; 138
    910e:	f8 e4       	ldi	r31, 0x48	; 72
    9110:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    9114:	fc 01       	movw	r30, r24
    9116:	01 90       	ld	r0, Z+
    9118:	f0 81       	ld	r31, Z
    911a:	e0 2d       	mov	r30, r0
    911c:	f8 87       	std	Y+8, r31	; 0x08
    911e:	ef 83       	std	Y+7, r30	; 0x07
    9120:	fb 01       	movw	r30, r22
    9122:	16 8a       	std	Z+22, r1	; 0x16
    9124:	fc 01       	movw	r30, r24
    9126:	06 89       	ldd	r16, Z+22	; 0x16
    9128:	17 89       	ldd	r17, Z+23	; 0x17
    912a:	20 8d       	ldd	r18, Z+24	; 0x18
    912c:	31 8d       	ldd	r19, Z+25	; 0x19
    912e:	01 15       	cp	r16, r1
    9130:	11 05       	cpc	r17, r1
    9132:	21 05       	cpc	r18, r1
    9134:	31 05       	cpc	r19, r1
    9136:	09 f4       	brne	.+2      	; 0x913a <get_fileinfo+0x32>
    9138:	0d c1       	rjmp	.+538    	; 0x9354 <get_fileinfo+0x24c>
    913a:	7e 83       	std	Y+6, r23	; 0x06
    913c:	6d 83       	std	Y+5, r22	; 0x05
    913e:	7c 01       	movw	r14, r24
    9140:	80 a5       	ldd	r24, Z+40	; 0x28
    9142:	91 a5       	ldd	r25, Z+41	; 0x29
    9144:	a2 a5       	ldd	r26, Z+42	; 0x2a
    9146:	b3 a5       	ldd	r27, Z+43	; 0x2b
    9148:	8f 3f       	cpi	r24, 0xFF	; 255
    914a:	9f 4f       	sbci	r25, 0xFF	; 255
    914c:	af 4f       	sbci	r26, 0xFF	; 255
    914e:	bf 4f       	sbci	r27, 0xFF	; 255
    9150:	09 f4       	brne	.+2      	; 0x9154 <get_fileinfo+0x4c>
    9152:	6c c0       	rjmp	.+216    	; 0x922c <get_fileinfo+0x124>
    9154:	a1 2c       	mov	r10, r1
    9156:	b1 2c       	mov	r11, r1
    9158:	c1 2c       	mov	r12, r1
    915a:	d1 2c       	mov	r13, r1
    915c:	00 e0       	ldi	r16, 0x00	; 0
    915e:	10 e0       	ldi	r17, 0x00	; 0
    9160:	66 24       	eor	r6, r6
    9162:	6a 94       	dec	r6
    9164:	71 2c       	mov	r7, r1
    9166:	ef 81       	ldd	r30, Y+7	; 0x07
    9168:	f8 85       	ldd	r31, Y+8	; 0x08
    916a:	83 85       	ldd	r24, Z+11	; 0x0b
    916c:	94 85       	ldd	r25, Z+12	; 0x0c
    916e:	fc 01       	movw	r30, r24
    9170:	ea 0d       	add	r30, r10
    9172:	fb 1d       	adc	r31, r11
    9174:	80 81       	ld	r24, Z
    9176:	91 81       	ldd	r25, Z+1	; 0x01
    9178:	00 97       	sbiw	r24, 0x00	; 0
    917a:	09 f4       	brne	.+2      	; 0x917e <get_fileinfo+0x76>
    917c:	4d c0       	rjmp	.+154    	; 0x9218 <get_fileinfo+0x110>
    917e:	c1 14       	cp	r12, r1
    9180:	d1 04       	cpc	r13, r1
    9182:	29 f4       	brne	.+10     	; 0x918e <get_fileinfo+0x86>
    9184:	9c 01       	movw	r18, r24
    9186:	38 5d       	subi	r19, 0xD8	; 216
    9188:	21 15       	cp	r18, r1
    918a:	38 40       	sbci	r19, 0x08	; 8
    918c:	f0 f1       	brcs	.+124    	; 0x920a <get_fileinfo+0x102>
    918e:	43 01       	movw	r8, r6
    9190:	80 1a       	sub	r8, r16
    9192:	91 0a       	sbc	r9, r17
    9194:	a6 01       	movw	r20, r12
    9196:	60 e0       	ldi	r22, 0x00	; 0
    9198:	70 e0       	ldi	r23, 0x00	; 0
    919a:	2a 01       	movw	r4, r20
    919c:	33 24       	eor	r3, r3
    919e:	22 24       	eor	r2, r2
    91a0:	a0 e0       	ldi	r26, 0x00	; 0
    91a2:	b0 e0       	ldi	r27, 0x00	; 0
    91a4:	28 2a       	or	r2, r24
    91a6:	39 2a       	or	r3, r25
    91a8:	4a 2a       	or	r4, r26
    91aa:	5b 2a       	or	r5, r27
    91ac:	c2 01       	movw	r24, r4
    91ae:	b1 01       	movw	r22, r2
    91b0:	45 eb       	ldi	r20, 0xB5	; 181
    91b2:	51 e0       	ldi	r21, 0x01	; 1
    91b4:	0e 94 c4 68 	call	0xd188	; 0xd188 <ff_uni2oem>
    91b8:	8f 3f       	cpi	r24, 0xFF	; 255
    91ba:	91 05       	cpc	r25, r1
    91bc:	89 f0       	breq	.+34     	; 0x91e0 <get_fileinfo+0xd8>
    91be:	80 f0       	brcs	.+32     	; 0x91e0 <get_fileinfo+0xd8>
    91c0:	22 e0       	ldi	r18, 0x02	; 2
    91c2:	82 16       	cp	r8, r18
    91c4:	91 04       	cpc	r9, r1
    91c6:	c0 f0       	brcs	.+48     	; 0x91f8 <get_fileinfo+0xf0>
    91c8:	ed 81       	ldd	r30, Y+5	; 0x05
    91ca:	fe 81       	ldd	r31, Y+6	; 0x06
    91cc:	e0 0f       	add	r30, r16
    91ce:	f1 1f       	adc	r31, r17
    91d0:	96 8b       	std	Z+22, r25	; 0x16
    91d2:	ed 81       	ldd	r30, Y+5	; 0x05
    91d4:	fe 81       	ldd	r31, Y+6	; 0x06
    91d6:	e0 0f       	add	r30, r16
    91d8:	f1 1f       	adc	r31, r17
    91da:	87 8b       	std	Z+23, r24	; 0x17
    91dc:	82 e0       	ldi	r24, 0x02	; 2
    91de:	0d c0       	rjmp	.+26     	; 0x91fa <get_fileinfo+0xf2>
    91e0:	00 97       	sbiw	r24, 0x00	; 0
    91e2:	51 f0       	breq	.+20     	; 0x91f8 <get_fileinfo+0xf0>
    91e4:	81 14       	cp	r8, r1
    91e6:	91 04       	cpc	r9, r1
    91e8:	39 f0       	breq	.+14     	; 0x91f8 <get_fileinfo+0xf0>
    91ea:	ed 81       	ldd	r30, Y+5	; 0x05
    91ec:	fe 81       	ldd	r31, Y+6	; 0x06
    91ee:	e0 0f       	add	r30, r16
    91f0:	f1 1f       	adc	r31, r17
    91f2:	86 8b       	std	Z+22, r24	; 0x16
    91f4:	81 e0       	ldi	r24, 0x01	; 1
    91f6:	01 c0       	rjmp	.+2      	; 0x91fa <get_fileinfo+0xf2>
    91f8:	80 e0       	ldi	r24, 0x00	; 0
    91fa:	28 2f       	mov	r18, r24
    91fc:	30 e0       	ldi	r19, 0x00	; 0
    91fe:	88 23       	and	r24, r24
    9200:	49 f0       	breq	.+18     	; 0x9214 <get_fileinfo+0x10c>
    9202:	02 0f       	add	r16, r18
    9204:	13 1f       	adc	r17, r19
    9206:	80 e0       	ldi	r24, 0x00	; 0
    9208:	90 e0       	ldi	r25, 0x00	; 0
    920a:	32 e0       	ldi	r19, 0x02	; 2
    920c:	a3 0e       	add	r10, r19
    920e:	b1 1c       	adc	r11, r1
    9210:	6c 01       	movw	r12, r24
    9212:	a9 cf       	rjmp	.-174    	; 0x9166 <get_fileinfo+0x5e>
    9214:	00 e0       	ldi	r16, 0x00	; 0
    9216:	10 e0       	ldi	r17, 0x00	; 0
    9218:	c1 14       	cp	r12, r1
    921a:	d1 04       	cpc	r13, r1
    921c:	11 f0       	breq	.+4      	; 0x9222 <get_fileinfo+0x11a>
    921e:	00 e0       	ldi	r16, 0x00	; 0
    9220:	10 e0       	ldi	r17, 0x00	; 0
    9222:	ed 81       	ldd	r30, Y+5	; 0x05
    9224:	fe 81       	ldd	r31, Y+6	; 0x06
    9226:	e0 0f       	add	r30, r16
    9228:	f1 1f       	adc	r31, r17
    922a:	16 8a       	std	Z+22, r1	; 0x16
    922c:	80 e0       	ldi	r24, 0x00	; 0
    922e:	90 e0       	ldi	r25, 0x00	; 0
    9230:	20 e0       	ldi	r18, 0x00	; 0
    9232:	30 e0       	ldi	r19, 0x00	; 0
    9234:	6e e2       	ldi	r22, 0x2E	; 46
    9236:	a9 01       	movw	r20, r18
    9238:	4f 5f       	subi	r20, 0xFF	; 255
    923a:	5f 4f       	sbci	r21, 0xFF	; 255
    923c:	f7 01       	movw	r30, r14
    923e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    9240:	b3 8d       	ldd	r27, Z+27	; 0x1b
    9242:	fd 01       	movw	r30, r26
    9244:	e2 0f       	add	r30, r18
    9246:	f3 1f       	adc	r31, r19
    9248:	20 81       	ld	r18, Z
    924a:	30 e0       	ldi	r19, 0x00	; 0
    924c:	20 32       	cpi	r18, 0x20	; 32
    924e:	31 05       	cpc	r19, r1
    9250:	b9 f0       	breq	.+46     	; 0x9280 <get_fileinfo+0x178>
    9252:	25 30       	cpi	r18, 0x05	; 5
    9254:	31 05       	cpc	r19, r1
    9256:	11 f4       	brne	.+4      	; 0x925c <get_fileinfo+0x154>
    9258:	25 ee       	ldi	r18, 0xE5	; 229
    925a:	30 e0       	ldi	r19, 0x00	; 0
    925c:	49 30       	cpi	r20, 0x09	; 9
    925e:	51 05       	cpc	r21, r1
    9260:	49 f4       	brne	.+18     	; 0x9274 <get_fileinfo+0x16c>
    9262:	8c 30       	cpi	r24, 0x0C	; 12
    9264:	91 05       	cpc	r25, r1
    9266:	30 f4       	brcc	.+12     	; 0x9274 <get_fileinfo+0x16c>
    9268:	ed 81       	ldd	r30, Y+5	; 0x05
    926a:	fe 81       	ldd	r31, Y+6	; 0x06
    926c:	e8 0f       	add	r30, r24
    926e:	f9 1f       	adc	r31, r25
    9270:	61 87       	std	Z+9, r22	; 0x09
    9272:	01 96       	adiw	r24, 0x01	; 1
    9274:	ed 81       	ldd	r30, Y+5	; 0x05
    9276:	fe 81       	ldd	r31, Y+6	; 0x06
    9278:	e8 0f       	add	r30, r24
    927a:	f9 1f       	adc	r31, r25
    927c:	21 87       	std	Z+9, r18	; 0x09
    927e:	01 96       	adiw	r24, 0x01	; 1
    9280:	9a 01       	movw	r18, r20
    9282:	4b 30       	cpi	r20, 0x0B	; 11
    9284:	51 05       	cpc	r21, r1
    9286:	b9 f6       	brne	.-82     	; 0x9236 <get_fileinfo+0x12e>
    9288:	ed 81       	ldd	r30, Y+5	; 0x05
    928a:	fe 81       	ldd	r31, Y+6	; 0x06
    928c:	e8 0f       	add	r30, r24
    928e:	f9 1f       	adc	r31, r25
    9290:	11 86       	std	Z+9, r1	; 0x09
    9292:	ed 81       	ldd	r30, Y+5	; 0x05
    9294:	fe 81       	ldd	r31, Y+6	; 0x06
    9296:	26 89       	ldd	r18, Z+22	; 0x16
    9298:	21 11       	cpse	r18, r1
    929a:	3a c0       	rjmp	.+116    	; 0x9310 <get_fileinfo+0x208>
    929c:	89 2b       	or	r24, r25
    929e:	31 f0       	breq	.+12     	; 0x92ac <get_fileinfo+0x1a4>
    92a0:	df 01       	movw	r26, r30
    92a2:	19 96       	adiw	r26, 0x09	; 9
    92a4:	58 e0       	ldi	r21, 0x08	; 8
    92a6:	20 e0       	ldi	r18, 0x00	; 0
    92a8:	30 e0       	ldi	r19, 0x00	; 0
    92aa:	16 c0       	rjmp	.+44     	; 0x92d8 <get_fileinfo+0x1d0>
    92ac:	8f e3       	ldi	r24, 0x3F	; 63
    92ae:	ed 81       	ldd	r30, Y+5	; 0x05
    92b0:	fe 81       	ldd	r31, Y+6	; 0x06
    92b2:	86 8b       	std	Z+22, r24	; 0x16
    92b4:	21 e0       	ldi	r18, 0x01	; 1
    92b6:	30 e0       	ldi	r19, 0x00	; 0
    92b8:	1c c0       	rjmp	.+56     	; 0x92f2 <get_fileinfo+0x1ea>
    92ba:	90 e0       	ldi	r25, 0x00	; 0
    92bc:	8e 32       	cpi	r24, 0x2E	; 46
    92be:	91 05       	cpc	r25, r1
    92c0:	09 f4       	brne	.+2      	; 0x92c4 <get_fileinfo+0x1bc>
    92c2:	50 e1       	ldi	r21, 0x10	; 16
    92c4:	bc 01       	movw	r22, r24
    92c6:	61 54       	subi	r22, 0x41	; 65
    92c8:	71 09       	sbc	r23, r1
    92ca:	6a 31       	cpi	r22, 0x1A	; 26
    92cc:	71 05       	cpc	r23, r1
    92ce:	40 f0       	brcs	.+16     	; 0x92e0 <get_fileinfo+0x1d8>
    92d0:	fd 01       	movw	r30, r26
    92d2:	84 87       	std	Z+12, r24	; 0x0c
    92d4:	2f 5f       	subi	r18, 0xFF	; 255
    92d6:	3f 4f       	sbci	r19, 0xFF	; 255
    92d8:	8d 91       	ld	r24, X+
    92da:	81 11       	cpse	r24, r1
    92dc:	ee cf       	rjmp	.-36     	; 0x92ba <get_fileinfo+0x1b2>
    92de:	09 c0       	rjmp	.+18     	; 0x92f2 <get_fileinfo+0x1ea>
    92e0:	f7 01       	movw	r30, r14
    92e2:	62 8d       	ldd	r22, Z+26	; 0x1a
    92e4:	73 8d       	ldd	r23, Z+27	; 0x1b
    92e6:	fb 01       	movw	r30, r22
    92e8:	44 85       	ldd	r20, Z+12	; 0x0c
    92ea:	45 23       	and	r20, r21
    92ec:	89 f3       	breq	.-30     	; 0x92d0 <get_fileinfo+0x1c8>
    92ee:	80 96       	adiw	r24, 0x20	; 32
    92f0:	ef cf       	rjmp	.-34     	; 0x92d0 <get_fileinfo+0x1c8>
    92f2:	ed 81       	ldd	r30, Y+5	; 0x05
    92f4:	fe 81       	ldd	r31, Y+6	; 0x06
    92f6:	e2 0f       	add	r30, r18
    92f8:	f3 1f       	adc	r31, r19
    92fa:	16 8a       	std	Z+22, r1	; 0x16
    92fc:	f7 01       	movw	r30, r14
    92fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    9300:	93 8d       	ldd	r25, Z+27	; 0x1b
    9302:	fc 01       	movw	r30, r24
    9304:	84 85       	ldd	r24, Z+12	; 0x0c
    9306:	81 11       	cpse	r24, r1
    9308:	03 c0       	rjmp	.+6      	; 0x9310 <get_fileinfo+0x208>
    930a:	ed 81       	ldd	r30, Y+5	; 0x05
    930c:	fe 81       	ldd	r31, Y+6	; 0x06
    930e:	11 86       	std	Z+9, r1	; 0x09
    9310:	f7 01       	movw	r30, r14
    9312:	82 8d       	ldd	r24, Z+26	; 0x1a
    9314:	93 8d       	ldd	r25, Z+27	; 0x1b
    9316:	fc 01       	movw	r30, r24
    9318:	83 85       	ldd	r24, Z+11	; 0x0b
    931a:	ed 81       	ldd	r30, Y+5	; 0x05
    931c:	fe 81       	ldd	r31, Y+6	; 0x06
    931e:	80 87       	std	Z+8, r24	; 0x08
    9320:	f7 01       	movw	r30, r14
    9322:	02 8d       	ldd	r16, Z+26	; 0x1a
    9324:	13 8d       	ldd	r17, Z+27	; 0x1b
    9326:	c8 01       	movw	r24, r16
    9328:	4c 96       	adiw	r24, 0x1c	; 28
    932a:	f0 dd       	rcall	.-1056   	; 0x8f0c <ld_dword>
    932c:	ed 81       	ldd	r30, Y+5	; 0x05
    932e:	fe 81       	ldd	r31, Y+6	; 0x06
    9330:	60 83       	st	Z, r22
    9332:	71 83       	std	Z+1, r23	; 0x01
    9334:	82 83       	std	Z+2, r24	; 0x02
    9336:	93 83       	std	Z+3, r25	; 0x03
    9338:	f8 01       	movw	r30, r16
    933a:	86 89       	ldd	r24, Z+22	; 0x16
    933c:	97 89       	ldd	r25, Z+23	; 0x17
    933e:	ed 81       	ldd	r30, Y+5	; 0x05
    9340:	fe 81       	ldd	r31, Y+6	; 0x06
    9342:	97 83       	std	Z+7, r25	; 0x07
    9344:	86 83       	std	Z+6, r24	; 0x06
    9346:	f8 01       	movw	r30, r16
    9348:	80 8d       	ldd	r24, Z+24	; 0x18
    934a:	91 8d       	ldd	r25, Z+25	; 0x19
    934c:	ed 81       	ldd	r30, Y+5	; 0x05
    934e:	fe 81       	ldd	r31, Y+6	; 0x06
    9350:	95 83       	std	Z+5, r25	; 0x05
    9352:	84 83       	std	Z+4, r24	; 0x04
    9354:	28 96       	adiw	r28, 0x08	; 8
    9356:	e2 e1       	ldi	r30, 0x12	; 18
    9358:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0000935c <mem_cpy.part.0>:
    935c:	fb 01       	movw	r30, r22
    935e:	48 0f       	add	r20, r24
    9360:	59 1f       	adc	r21, r25
    9362:	21 91       	ld	r18, Z+
    9364:	dc 01       	movw	r26, r24
    9366:	2d 93       	st	X+, r18
    9368:	cd 01       	movw	r24, r26
    936a:	a4 17       	cp	r26, r20
    936c:	b5 07       	cpc	r27, r21
    936e:	c9 f7       	brne	.-14     	; 0x9362 <mem_cpy.part.0+0x6>
    9370:	08 95       	ret

00009372 <ld_clust.isra.3>:
    9372:	fb 01       	movw	r30, r22
    9374:	42 8d       	ldd	r20, Z+26	; 0x1a
    9376:	53 8d       	ldd	r21, Z+27	; 0x1b
    9378:	60 e0       	ldi	r22, 0x00	; 0
    937a:	70 e0       	ldi	r23, 0x00	; 0
    937c:	83 30       	cpi	r24, 0x03	; 3
    937e:	59 f4       	brne	.+22     	; 0x9396 <ld_clust.isra.3+0x24>
    9380:	84 89       	ldd	r24, Z+20	; 0x14
    9382:	95 89       	ldd	r25, Z+21	; 0x15
    9384:	a0 e0       	ldi	r26, 0x00	; 0
    9386:	b0 e0       	ldi	r27, 0x00	; 0
    9388:	dc 01       	movw	r26, r24
    938a:	99 27       	eor	r25, r25
    938c:	88 27       	eor	r24, r24
    938e:	48 2b       	or	r20, r24
    9390:	59 2b       	or	r21, r25
    9392:	6a 2b       	or	r22, r26
    9394:	7b 2b       	or	r23, r27
    9396:	cb 01       	movw	r24, r22
    9398:	ba 01       	movw	r22, r20
    939a:	08 95       	ret

0000939c <st_clust.isra.4>:
    939c:	fb 01       	movw	r30, r22
    939e:	22 8f       	std	Z+26, r18	; 0x1a
    93a0:	33 8f       	std	Z+27, r19	; 0x1b
    93a2:	dc 01       	movw	r26, r24
    93a4:	8c 91       	ld	r24, X
    93a6:	83 30       	cpi	r24, 0x03	; 3
    93a8:	29 f4       	brne	.+10     	; 0x93b4 <st_clust.isra.4+0x18>
    93aa:	ca 01       	movw	r24, r20
    93ac:	aa 27       	eor	r26, r26
    93ae:	bb 27       	eor	r27, r27
    93b0:	84 8b       	std	Z+20, r24	; 0x14
    93b2:	95 8b       	std	Z+21, r25	; 0x15
    93b4:	08 95       	ret

000093b6 <sync_window.part.5>:
    93b6:	8f 92       	push	r8
    93b8:	9f 92       	push	r9
    93ba:	af 92       	push	r10
    93bc:	bf 92       	push	r11
    93be:	ef 92       	push	r14
    93c0:	ff 92       	push	r15
    93c2:	0f 93       	push	r16
    93c4:	1f 93       	push	r17
    93c6:	cf 93       	push	r28
    93c8:	df 93       	push	r29
    93ca:	ec 01       	movw	r28, r24
    93cc:	7c 01       	movw	r14, r24
    93ce:	45 e3       	ldi	r20, 0x35	; 53
    93d0:	e4 0e       	add	r14, r20
    93d2:	f1 1c       	adc	r15, r1
    93d4:	29 a9       	ldd	r18, Y+49	; 0x31
    93d6:	3a a9       	ldd	r19, Y+50	; 0x32
    93d8:	4b a9       	ldd	r20, Y+51	; 0x33
    93da:	5c a9       	ldd	r21, Y+52	; 0x34
    93dc:	01 e0       	ldi	r16, 0x01	; 1
    93de:	10 e0       	ldi	r17, 0x00	; 0
    93e0:	b7 01       	movw	r22, r14
    93e2:	89 81       	ldd	r24, Y+1	; 0x01
    93e4:	0e 94 8a 69 	call	0xd314	; 0xd314 <disk_write>
    93e8:	89 2b       	or	r24, r25
    93ea:	41 f5       	brne	.+80     	; 0x943c <sync_window.part.5+0x86>
    93ec:	1b 82       	std	Y+3, r1	; 0x03
    93ee:	09 a9       	ldd	r16, Y+49	; 0x31
    93f0:	1a a9       	ldd	r17, Y+50	; 0x32
    93f2:	2b a9       	ldd	r18, Y+51	; 0x33
    93f4:	3c a9       	ldd	r19, Y+52	; 0x34
    93f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    93f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    93fa:	af 8d       	ldd	r26, Y+31	; 0x1f
    93fc:	b8 a1       	ldd	r27, Y+32	; 0x20
    93fe:	8d a0       	ldd	r8, Y+37	; 0x25
    9400:	9e a0       	ldd	r9, Y+38	; 0x26
    9402:	af a0       	ldd	r10, Y+39	; 0x27
    9404:	b8 a4       	ldd	r11, Y+40	; 0x28
    9406:	b9 01       	movw	r22, r18
    9408:	a8 01       	movw	r20, r16
    940a:	48 19       	sub	r20, r8
    940c:	59 09       	sbc	r21, r9
    940e:	6a 09       	sbc	r22, r10
    9410:	7b 09       	sbc	r23, r11
    9412:	48 17       	cp	r20, r24
    9414:	59 07       	cpc	r21, r25
    9416:	6a 07       	cpc	r22, r26
    9418:	7b 07       	cpc	r23, r27
    941a:	98 f4       	brcc	.+38     	; 0x9442 <sync_window.part.5+0x8c>
    941c:	6a 81       	ldd	r22, Y+2	; 0x02
    941e:	62 30       	cpi	r22, 0x02	; 2
    9420:	81 f4       	brne	.+32     	; 0x9442 <sync_window.part.5+0x8c>
    9422:	a9 01       	movw	r20, r18
    9424:	98 01       	movw	r18, r16
    9426:	28 0f       	add	r18, r24
    9428:	39 1f       	adc	r19, r25
    942a:	4a 1f       	adc	r20, r26
    942c:	5b 1f       	adc	r21, r27
    942e:	01 e0       	ldi	r16, 0x01	; 1
    9430:	10 e0       	ldi	r17, 0x00	; 0
    9432:	b7 01       	movw	r22, r14
    9434:	89 81       	ldd	r24, Y+1	; 0x01
    9436:	0e 94 8a 69 	call	0xd314	; 0xd314 <disk_write>
    943a:	03 c0       	rjmp	.+6      	; 0x9442 <sync_window.part.5+0x8c>
    943c:	81 e0       	ldi	r24, 0x01	; 1
    943e:	90 e0       	ldi	r25, 0x00	; 0
    9440:	02 c0       	rjmp	.+4      	; 0x9446 <sync_window.part.5+0x90>
    9442:	80 e0       	ldi	r24, 0x00	; 0
    9444:	90 e0       	ldi	r25, 0x00	; 0
    9446:	df 91       	pop	r29
    9448:	cf 91       	pop	r28
    944a:	1f 91       	pop	r17
    944c:	0f 91       	pop	r16
    944e:	ff 90       	pop	r15
    9450:	ef 90       	pop	r14
    9452:	bf 90       	pop	r11
    9454:	af 90       	pop	r10
    9456:	9f 90       	pop	r9
    9458:	8f 90       	pop	r8
    945a:	08 95       	ret

0000945c <sync_fs>:
    945c:	ef 92       	push	r14
    945e:	ff 92       	push	r15
    9460:	0f 93       	push	r16
    9462:	1f 93       	push	r17
    9464:	cf 93       	push	r28
    9466:	df 93       	push	r29
    9468:	ec 01       	movw	r28, r24
    946a:	8b 81       	ldd	r24, Y+3	; 0x03
    946c:	81 11       	cpse	r24, r1
    946e:	05 c0       	rjmp	.+10     	; 0x947a <sync_fs+0x1e>
    9470:	88 81       	ld	r24, Y
    9472:	83 30       	cpi	r24, 0x03	; 3
    9474:	09 f0       	breq	.+2      	; 0x9478 <sync_fs+0x1c>
    9476:	52 c0       	rjmp	.+164    	; 0x951c <sync_fs+0xc0>
    9478:	06 c0       	rjmp	.+12     	; 0x9486 <sync_fs+0x2a>
    947a:	ce 01       	movw	r24, r28
    947c:	9c df       	rcall	.-200    	; 0x93b6 <sync_window.part.5>
    947e:	00 97       	sbiw	r24, 0x00	; 0
    9480:	09 f0       	breq	.+2      	; 0x9484 <sync_fs+0x28>
    9482:	59 c0       	rjmp	.+178    	; 0x9536 <sync_fs+0xda>
    9484:	f5 cf       	rjmp	.-22     	; 0x9470 <sync_fs+0x14>
    9486:	8c 81       	ldd	r24, Y+4	; 0x04
    9488:	81 30       	cpi	r24, 0x01	; 1
    948a:	09 f0       	breq	.+2      	; 0x948e <sync_fs+0x32>
    948c:	47 c0       	rjmp	.+142    	; 0x951c <sync_fs+0xc0>
    948e:	40 e0       	ldi	r20, 0x00	; 0
    9490:	52 e0       	ldi	r21, 0x02	; 2
    9492:	60 e0       	ldi	r22, 0x00	; 0
    9494:	70 e0       	ldi	r23, 0x00	; 0
    9496:	7e 01       	movw	r14, r28
    9498:	85 e3       	ldi	r24, 0x35	; 53
    949a:	e8 0e       	add	r14, r24
    949c:	f1 1c       	adc	r15, r1
    949e:	c7 01       	movw	r24, r14
    94a0:	50 dd       	rcall	.-1376   	; 0x8f42 <mem_set>
    94a2:	85 e5       	ldi	r24, 0x55	; 85
    94a4:	fe 01       	movw	r30, r28
    94a6:	ed 5c       	subi	r30, 0xCD	; 205
    94a8:	fd 4f       	sbci	r31, 0xFD	; 253
    94aa:	80 83       	st	Z, r24
    94ac:	8a ea       	ldi	r24, 0xAA	; 170
    94ae:	31 96       	adiw	r30, 0x01	; 1
    94b0:	80 83       	st	Z, r24
    94b2:	82 e5       	ldi	r24, 0x52	; 82
    94b4:	8d ab       	std	Y+53, r24	; 0x35
    94b6:	8e ab       	std	Y+54, r24	; 0x36
    94b8:	81 e6       	ldi	r24, 0x61	; 97
    94ba:	8f ab       	std	Y+55, r24	; 0x37
    94bc:	91 e4       	ldi	r25, 0x41	; 65
    94be:	98 af       	std	Y+56, r25	; 0x38
    94c0:	22 e7       	ldi	r18, 0x72	; 114
    94c2:	7b 97       	sbiw	r30, 0x1b	; 27
    94c4:	20 83       	st	Z, r18
    94c6:	31 96       	adiw	r30, 0x01	; 1
    94c8:	20 83       	st	Z, r18
    94ca:	31 96       	adiw	r30, 0x01	; 1
    94cc:	90 83       	st	Z, r25
    94ce:	31 96       	adiw	r30, 0x01	; 1
    94d0:	80 83       	st	Z, r24
    94d2:	49 89       	ldd	r20, Y+17	; 0x11
    94d4:	5a 89       	ldd	r21, Y+18	; 0x12
    94d6:	6b 89       	ldd	r22, Y+19	; 0x13
    94d8:	7c 89       	ldd	r23, Y+20	; 0x14
    94da:	ce 01       	movw	r24, r28
    94dc:	83 5e       	subi	r24, 0xE3	; 227
    94de:	9d 4f       	sbci	r25, 0xFD	; 253
    94e0:	2a dd       	rcall	.-1452   	; 0x8f36 <st_dword>
    94e2:	4d 85       	ldd	r20, Y+13	; 0x0d
    94e4:	5e 85       	ldd	r21, Y+14	; 0x0e
    94e6:	6f 85       	ldd	r22, Y+15	; 0x0f
    94e8:	78 89       	ldd	r23, Y+16	; 0x10
    94ea:	ce 01       	movw	r24, r28
    94ec:	8f 5d       	subi	r24, 0xDF	; 223
    94ee:	9d 4f       	sbci	r25, 0xFD	; 253
    94f0:	22 dd       	rcall	.-1468   	; 0x8f36 <st_dword>
    94f2:	89 a1       	ldd	r24, Y+33	; 0x21
    94f4:	9a a1       	ldd	r25, Y+34	; 0x22
    94f6:	ab a1       	ldd	r26, Y+35	; 0x23
    94f8:	bc a1       	ldd	r27, Y+36	; 0x24
    94fa:	9c 01       	movw	r18, r24
    94fc:	ad 01       	movw	r20, r26
    94fe:	2f 5f       	subi	r18, 0xFF	; 255
    9500:	3f 4f       	sbci	r19, 0xFF	; 255
    9502:	4f 4f       	sbci	r20, 0xFF	; 255
    9504:	5f 4f       	sbci	r21, 0xFF	; 255
    9506:	29 ab       	std	Y+49, r18	; 0x31
    9508:	3a ab       	std	Y+50, r19	; 0x32
    950a:	4b ab       	std	Y+51, r20	; 0x33
    950c:	5c ab       	std	Y+52, r21	; 0x34
    950e:	01 e0       	ldi	r16, 0x01	; 1
    9510:	10 e0       	ldi	r17, 0x00	; 0
    9512:	b7 01       	movw	r22, r14
    9514:	89 81       	ldd	r24, Y+1	; 0x01
    9516:	0e 94 8a 69 	call	0xd314	; 0xd314 <disk_write>
    951a:	1c 82       	std	Y+4, r1	; 0x04
    951c:	40 e0       	ldi	r20, 0x00	; 0
    951e:	50 e0       	ldi	r21, 0x00	; 0
    9520:	60 e0       	ldi	r22, 0x00	; 0
    9522:	89 81       	ldd	r24, Y+1	; 0x01
    9524:	0e 94 9a 69 	call	0xd334	; 0xd334 <disk_ioctl>
    9528:	31 e0       	ldi	r19, 0x01	; 1
    952a:	20 e0       	ldi	r18, 0x00	; 0
    952c:	89 2b       	or	r24, r25
    952e:	09 f4       	brne	.+2      	; 0x9532 <sync_fs+0xd6>
    9530:	30 e0       	ldi	r19, 0x00	; 0
    9532:	83 2f       	mov	r24, r19
    9534:	92 2f       	mov	r25, r18
    9536:	cd b7       	in	r28, 0x3d	; 61
    9538:	de b7       	in	r29, 0x3e	; 62
    953a:	e6 e0       	ldi	r30, 0x06	; 6
    953c:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

00009540 <dir_clear>:
    9540:	4f 92       	push	r4
    9542:	5f 92       	push	r5
    9544:	6f 92       	push	r6
    9546:	7f 92       	push	r7
    9548:	af 92       	push	r10
    954a:	bf 92       	push	r11
    954c:	cf 92       	push	r12
    954e:	df 92       	push	r13
    9550:	ef 92       	push	r14
    9552:	ff 92       	push	r15
    9554:	0f 93       	push	r16
    9556:	1f 93       	push	r17
    9558:	cf 93       	push	r28
    955a:	df 93       	push	r29
    955c:	ec 01       	movw	r28, r24
    955e:	6a 01       	movw	r12, r20
    9560:	7b 01       	movw	r14, r22
    9562:	8b 81       	ldd	r24, Y+3	; 0x03
    9564:	81 11       	cpse	r24, r1
    9566:	28 c0       	rjmp	.+80     	; 0x95b8 <dir_clear+0x78>
    9568:	b7 01       	movw	r22, r14
    956a:	a6 01       	movw	r20, r12
    956c:	ce 01       	movw	r24, r28
    956e:	01 dd       	rcall	.-1534   	; 0x8f72 <clst2sect>
    9570:	2b 01       	movw	r4, r22
    9572:	3c 01       	movw	r6, r24
    9574:	69 ab       	std	Y+49, r22	; 0x31
    9576:	7a ab       	std	Y+50, r23	; 0x32
    9578:	8b ab       	std	Y+51, r24	; 0x33
    957a:	9c ab       	std	Y+52, r25	; 0x34
    957c:	5e 01       	movw	r10, r28
    957e:	25 e3       	ldi	r18, 0x35	; 53
    9580:	a2 0e       	add	r10, r18
    9582:	b1 1c       	adc	r11, r1
    9584:	40 e0       	ldi	r20, 0x00	; 0
    9586:	52 e0       	ldi	r21, 0x02	; 2
    9588:	60 e0       	ldi	r22, 0x00	; 0
    958a:	70 e0       	ldi	r23, 0x00	; 0
    958c:	c5 01       	movw	r24, r10
    958e:	d9 dc       	rcall	.-1614   	; 0x8f42 <mem_set>
    9590:	09 85       	ldd	r16, Y+9	; 0x09
    9592:	1a 85       	ldd	r17, Y+10	; 0x0a
    9594:	c8 01       	movw	r24, r16
    9596:	a0 e0       	ldi	r26, 0x00	; 0
    9598:	b0 e0       	ldi	r27, 0x00	; 0
    959a:	39 e0       	ldi	r19, 0x09	; 9
    959c:	88 0f       	add	r24, r24
    959e:	99 1f       	adc	r25, r25
    95a0:	aa 1f       	adc	r26, r26
    95a2:	bb 1f       	adc	r27, r27
    95a4:	3a 95       	dec	r19
    95a6:	d1 f7       	brne	.-12     	; 0x959c <dir_clear+0x5c>
    95a8:	81 15       	cp	r24, r1
    95aa:	90 48       	sbci	r25, 0x80	; 128
    95ac:	a1 05       	cpc	r26, r1
    95ae:	b1 05       	cpc	r27, r1
    95b0:	50 f0       	brcs	.+20     	; 0x95c6 <dir_clear+0x86>
    95b2:	00 e0       	ldi	r16, 0x00	; 0
    95b4:	10 e8       	ldi	r17, 0x80	; 128
    95b6:	14 c0       	rjmp	.+40     	; 0x95e0 <dir_clear+0xa0>
    95b8:	ce 01       	movw	r24, r28
    95ba:	fd de       	rcall	.-518    	; 0x93b6 <sync_window.part.5>
    95bc:	89 2b       	or	r24, r25
    95be:	a1 f2       	breq	.-88     	; 0x9568 <dir_clear+0x28>
    95c0:	81 e0       	ldi	r24, 0x01	; 1
    95c2:	90 e0       	ldi	r25, 0x00	; 0
    95c4:	56 c0       	rjmp	.+172    	; 0x9672 <dir_clear+0x132>
    95c6:	10 2f       	mov	r17, r16
    95c8:	00 27       	eor	r16, r16
    95ca:	11 0f       	add	r17, r17
    95cc:	09 c0       	rjmp	.+18     	; 0x95e0 <dir_clear+0xa0>
    95ce:	c8 01       	movw	r24, r16
    95d0:	0e 94 be 68 	call	0xd17c	; 0xd17c <ff_memalloc>
    95d4:	6c 01       	movw	r12, r24
    95d6:	00 97       	sbiw	r24, 0x00	; 0
    95d8:	09 f0       	breq	.+2      	; 0x95dc <dir_clear+0x9c>
    95da:	40 c0       	rjmp	.+128    	; 0x965c <dir_clear+0x11c>
    95dc:	16 95       	lsr	r17
    95de:	07 95       	ror	r16
    95e0:	01 30       	cpi	r16, 0x01	; 1
    95e2:	82 e0       	ldi	r24, 0x02	; 2
    95e4:	18 07       	cpc	r17, r24
    95e6:	98 f7       	brcc	.-26     	; 0x95ce <dir_clear+0x8e>
    95e8:	e1 2c       	mov	r14, r1
    95ea:	f1 2c       	mov	r15, r1
    95ec:	11 c0       	rjmp	.+34     	; 0x9610 <dir_clear+0xd0>
    95ee:	01 e0       	ldi	r16, 0x01	; 1
    95f0:	10 e0       	ldi	r17, 0x00	; 0
    95f2:	a3 01       	movw	r20, r6
    95f4:	92 01       	movw	r18, r4
    95f6:	2e 0d       	add	r18, r14
    95f8:	3f 1d       	adc	r19, r15
    95fa:	41 1d       	adc	r20, r1
    95fc:	51 1d       	adc	r21, r1
    95fe:	b5 01       	movw	r22, r10
    9600:	89 81       	ldd	r24, Y+1	; 0x01
    9602:	0e 94 8a 69 	call	0xd314	; 0xd314 <disk_write>
    9606:	89 2b       	or	r24, r25
    9608:	01 f5       	brne	.+64     	; 0x964a <dir_clear+0x10a>
    960a:	2f ef       	ldi	r18, 0xFF	; 255
    960c:	e2 1a       	sub	r14, r18
    960e:	f2 0a       	sbc	r15, r18
    9610:	89 85       	ldd	r24, Y+9	; 0x09
    9612:	9a 85       	ldd	r25, Y+10	; 0x0a
    9614:	e8 16       	cp	r14, r24
    9616:	f9 06       	cpc	r15, r25
    9618:	50 f3       	brcs	.-44     	; 0x95ee <dir_clear+0xae>
    961a:	17 c0       	rjmp	.+46     	; 0x964a <dir_clear+0x10a>
    961c:	85 01       	movw	r16, r10
    961e:	a3 01       	movw	r20, r6
    9620:	92 01       	movw	r18, r4
    9622:	2e 0d       	add	r18, r14
    9624:	3f 1d       	adc	r19, r15
    9626:	41 1d       	adc	r20, r1
    9628:	51 1d       	adc	r21, r1
    962a:	b6 01       	movw	r22, r12
    962c:	89 81       	ldd	r24, Y+1	; 0x01
    962e:	0e 94 8a 69 	call	0xd314	; 0xd314 <disk_write>
    9632:	89 2b       	or	r24, r25
    9634:	39 f4       	brne	.+14     	; 0x9644 <dir_clear+0x104>
    9636:	ea 0c       	add	r14, r10
    9638:	fb 1c       	adc	r15, r11
    963a:	89 85       	ldd	r24, Y+9	; 0x09
    963c:	9a 85       	ldd	r25, Y+10	; 0x0a
    963e:	e8 16       	cp	r14, r24
    9640:	f9 06       	cpc	r15, r25
    9642:	60 f3       	brcs	.-40     	; 0x961c <dir_clear+0xdc>
    9644:	c6 01       	movw	r24, r12
    9646:	0e 94 c1 68 	call	0xd182	; 0xd182 <ff_memfree>
    964a:	81 e0       	ldi	r24, 0x01	; 1
    964c:	90 e0       	ldi	r25, 0x00	; 0
    964e:	29 85       	ldd	r18, Y+9	; 0x09
    9650:	3a 85       	ldd	r19, Y+10	; 0x0a
    9652:	2e 15       	cp	r18, r14
    9654:	3f 05       	cpc	r19, r15
    9656:	69 f4       	brne	.+26     	; 0x9672 <dir_clear+0x132>
    9658:	80 e0       	ldi	r24, 0x00	; 0
    965a:	0b c0       	rjmp	.+22     	; 0x9672 <dir_clear+0x132>
    965c:	a8 01       	movw	r20, r16
    965e:	60 e0       	ldi	r22, 0x00	; 0
    9660:	70 e0       	ldi	r23, 0x00	; 0
    9662:	6f dc       	rcall	.-1826   	; 0x8f42 <mem_set>
    9664:	58 01       	movw	r10, r16
    9666:	ab 2c       	mov	r10, r11
    9668:	bb 24       	eor	r11, r11
    966a:	a6 94       	lsr	r10
    966c:	e1 2c       	mov	r14, r1
    966e:	f1 2c       	mov	r15, r1
    9670:	e4 cf       	rjmp	.-56     	; 0x963a <dir_clear+0xfa>
    9672:	df 91       	pop	r29
    9674:	cf 91       	pop	r28
    9676:	1f 91       	pop	r17
    9678:	0f 91       	pop	r16
    967a:	ff 90       	pop	r15
    967c:	ef 90       	pop	r14
    967e:	df 90       	pop	r13
    9680:	cf 90       	pop	r12
    9682:	bf 90       	pop	r11
    9684:	af 90       	pop	r10
    9686:	7f 90       	pop	r7
    9688:	6f 90       	pop	r6
    968a:	5f 90       	pop	r5
    968c:	4f 90       	pop	r4
    968e:	08 95       	ret

00009690 <move_window>:
    9690:	a0 e0       	ldi	r26, 0x00	; 0
    9692:	b0 e0       	ldi	r27, 0x00	; 0
    9694:	ee e4       	ldi	r30, 0x4E	; 78
    9696:	fb e4       	ldi	r31, 0x4B	; 75
    9698:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    969c:	ec 01       	movw	r28, r24
    969e:	6a 01       	movw	r12, r20
    96a0:	7b 01       	movw	r14, r22
    96a2:	89 a9       	ldd	r24, Y+49	; 0x31
    96a4:	9a a9       	ldd	r25, Y+50	; 0x32
    96a6:	ab a9       	ldd	r26, Y+51	; 0x33
    96a8:	bc a9       	ldd	r27, Y+52	; 0x34
    96aa:	84 17       	cp	r24, r20
    96ac:	95 07       	cpc	r25, r21
    96ae:	a6 07       	cpc	r26, r22
    96b0:	b7 07       	cpc	r27, r23
    96b2:	11 f1       	breq	.+68     	; 0x96f8 <move_window+0x68>
    96b4:	8b 81       	ldd	r24, Y+3	; 0x03
    96b6:	81 11       	cpse	r24, r1
    96b8:	13 c0       	rjmp	.+38     	; 0x96e0 <move_window+0x50>
    96ba:	01 e0       	ldi	r16, 0x01	; 1
    96bc:	10 e0       	ldi	r17, 0x00	; 0
    96be:	a7 01       	movw	r20, r14
    96c0:	96 01       	movw	r18, r12
    96c2:	be 01       	movw	r22, r28
    96c4:	6b 5c       	subi	r22, 0xCB	; 203
    96c6:	7f 4f       	sbci	r23, 0xFF	; 255
    96c8:	89 81       	ldd	r24, Y+1	; 0x01
    96ca:	0e 94 7a 69 	call	0xd2f4	; 0xd2f4 <disk_read>
    96ce:	89 2b       	or	r24, r25
    96d0:	61 f0       	breq	.+24     	; 0x96ea <move_window+0x5a>
    96d2:	81 e0       	ldi	r24, 0x01	; 1
    96d4:	90 e0       	ldi	r25, 0x00	; 0
    96d6:	cc 24       	eor	r12, r12
    96d8:	ca 94       	dec	r12
    96da:	dc 2c       	mov	r13, r12
    96dc:	76 01       	movw	r14, r12
    96de:	07 c0       	rjmp	.+14     	; 0x96ee <move_window+0x5e>
    96e0:	ce 01       	movw	r24, r28
    96e2:	69 de       	rcall	.-814    	; 0x93b6 <sync_window.part.5>
    96e4:	00 97       	sbiw	r24, 0x00	; 0
    96e6:	51 f4       	brne	.+20     	; 0x96fc <move_window+0x6c>
    96e8:	e8 cf       	rjmp	.-48     	; 0x96ba <move_window+0x2a>
    96ea:	80 e0       	ldi	r24, 0x00	; 0
    96ec:	90 e0       	ldi	r25, 0x00	; 0
    96ee:	c9 aa       	std	Y+49, r12	; 0x31
    96f0:	da aa       	std	Y+50, r13	; 0x32
    96f2:	eb aa       	std	Y+51, r14	; 0x33
    96f4:	fc aa       	std	Y+52, r15	; 0x34
    96f6:	02 c0       	rjmp	.+4      	; 0x96fc <move_window+0x6c>
    96f8:	80 e0       	ldi	r24, 0x00	; 0
    96fa:	90 e0       	ldi	r25, 0x00	; 0
    96fc:	cd b7       	in	r28, 0x3d	; 61
    96fe:	de b7       	in	r29, 0x3e	; 62
    9700:	e8 e0       	ldi	r30, 0x08	; 8
    9702:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

00009706 <check_fs>:
    9706:	cf 93       	push	r28
    9708:	df 93       	push	r29
    970a:	ec 01       	movw	r28, r24
    970c:	1b 82       	std	Y+3, r1	; 0x03
    970e:	8f ef       	ldi	r24, 0xFF	; 255
    9710:	9f ef       	ldi	r25, 0xFF	; 255
    9712:	dc 01       	movw	r26, r24
    9714:	89 ab       	std	Y+49, r24	; 0x31
    9716:	9a ab       	std	Y+50, r25	; 0x32
    9718:	ab ab       	std	Y+51, r26	; 0x33
    971a:	bc ab       	std	Y+52, r27	; 0x34
    971c:	ce 01       	movw	r24, r28
    971e:	b8 df       	rcall	.-144    	; 0x9690 <move_window>
    9720:	89 2b       	or	r24, r25
    9722:	19 f5       	brne	.+70     	; 0x976a <check_fs+0x64>
    9724:	fe 01       	movw	r30, r28
    9726:	ed 5c       	subi	r30, 0xCD	; 205
    9728:	fd 4f       	sbci	r31, 0xFD	; 253
    972a:	80 81       	ld	r24, Z
    972c:	91 81       	ldd	r25, Z+1	; 0x01
    972e:	85 35       	cpi	r24, 0x55	; 85
    9730:	9a 4a       	sbci	r25, 0xAA	; 170
    9732:	f1 f4       	brne	.+60     	; 0x9770 <check_fs+0x6a>
    9734:	8d a9       	ldd	r24, Y+53	; 0x35
    9736:	8b 3e       	cpi	r24, 0xEB	; 235
    9738:	19 f0       	breq	.+6      	; 0x9740 <check_fs+0x3a>
    973a:	88 5e       	subi	r24, 0xE8	; 232
    973c:	82 30       	cpi	r24, 0x02	; 2
    973e:	f0 f4       	brcc	.+60     	; 0x977c <check_fs+0x76>
    9740:	43 e0       	ldi	r20, 0x03	; 3
    9742:	50 e0       	ldi	r21, 0x00	; 0
    9744:	66 ec       	ldi	r22, 0xC6	; 198
    9746:	78 e0       	ldi	r23, 0x08	; 8
    9748:	ce 01       	movw	r24, r28
    974a:	85 59       	subi	r24, 0x95	; 149
    974c:	9f 4f       	sbci	r25, 0xFF	; 255
    974e:	02 dc       	rcall	.-2044   	; 0x8f54 <mem_cmp>
    9750:	89 2b       	or	r24, r25
    9752:	89 f0       	breq	.+34     	; 0x9776 <check_fs+0x70>
    9754:	45 e0       	ldi	r20, 0x05	; 5
    9756:	50 e0       	ldi	r21, 0x00	; 0
    9758:	61 e2       	ldi	r22, 0x21	; 33
    975a:	74 e0       	ldi	r23, 0x04	; 4
    975c:	ce 01       	movw	r24, r28
    975e:	89 57       	subi	r24, 0x79	; 121
    9760:	9f 4f       	sbci	r25, 0xFF	; 255
    9762:	f8 db       	rcall	.-2064   	; 0x8f54 <mem_cmp>
    9764:	89 2b       	or	r24, r25
    9766:	51 f4       	brne	.+20     	; 0x977c <check_fs+0x76>
    9768:	06 c0       	rjmp	.+12     	; 0x9776 <check_fs+0x70>
    976a:	84 e0       	ldi	r24, 0x04	; 4
    976c:	90 e0       	ldi	r25, 0x00	; 0
    976e:	08 c0       	rjmp	.+16     	; 0x9780 <check_fs+0x7a>
    9770:	83 e0       	ldi	r24, 0x03	; 3
    9772:	90 e0       	ldi	r25, 0x00	; 0
    9774:	05 c0       	rjmp	.+10     	; 0x9780 <check_fs+0x7a>
    9776:	80 e0       	ldi	r24, 0x00	; 0
    9778:	90 e0       	ldi	r25, 0x00	; 0
    977a:	02 c0       	rjmp	.+4      	; 0x9780 <check_fs+0x7a>
    977c:	82 e0       	ldi	r24, 0x02	; 2
    977e:	90 e0       	ldi	r25, 0x00	; 0
    9780:	df 91       	pop	r29
    9782:	cf 91       	pop	r28
    9784:	08 95       	ret

00009786 <mount_volume>:
    9786:	a0 e2       	ldi	r26, 0x20	; 32
    9788:	b0 e0       	ldi	r27, 0x00	; 0
    978a:	e9 ec       	ldi	r30, 0xC9	; 201
    978c:	fb e4       	ldi	r31, 0x4B	; 75
    978e:	0c 94 b5 e6 	jmp	0x1cd6a	; 0x1cd6a <__prologue_saves__+0x4>
    9792:	5b 01       	movw	r10, r22
    9794:	f4 2e       	mov	r15, r20
    9796:	db 01       	movw	r26, r22
    9798:	1d 92       	st	X+, r1
    979a:	1c 92       	st	X, r1
    979c:	5d dc       	rcall	.-1862   	; 0x9058 <get_ldnumber>
    979e:	6c 01       	movw	r12, r24
    97a0:	97 fd       	sbrc	r25, 7
    97a2:	39 c2       	rjmp	.+1138   	; 0x9c16 <mount_volume+0x490>
    97a4:	fc 01       	movw	r30, r24
    97a6:	ee 0f       	add	r30, r30
    97a8:	ff 1f       	adc	r31, r31
    97aa:	e7 5d       	subi	r30, 0xD7	; 215
    97ac:	f7 4e       	sbci	r31, 0xE7	; 231
    97ae:	00 81       	ld	r16, Z
    97b0:	11 81       	ldd	r17, Z+1	; 0x01
    97b2:	01 15       	cp	r16, r1
    97b4:	11 05       	cpc	r17, r1
    97b6:	09 f4       	brne	.+2      	; 0x97ba <mount_volume+0x34>
    97b8:	31 c2       	rjmp	.+1122   	; 0x9c1c <mount_volume+0x496>
    97ba:	f5 01       	movw	r30, r10
    97bc:	11 83       	std	Z+1, r17	; 0x01
    97be:	00 83       	st	Z, r16
    97c0:	ff 2d       	mov	r31, r15
    97c2:	fe 7f       	andi	r31, 0xFE	; 254
    97c4:	ff 2e       	mov	r15, r31
    97c6:	d8 01       	movw	r26, r16
    97c8:	8c 91       	ld	r24, X
    97ca:	88 23       	and	r24, r24
    97cc:	71 f0       	breq	.+28     	; 0x97ea <mount_volume+0x64>
    97ce:	f8 01       	movw	r30, r16
    97d0:	81 81       	ldd	r24, Z+1	; 0x01
    97d2:	0e 94 6e 69 	call	0xd2dc	; 0xd2dc <disk_status>
    97d6:	80 fd       	sbrc	r24, 0
    97d8:	08 c0       	rjmp	.+16     	; 0x97ea <mount_volume+0x64>
    97da:	ff 20       	and	r15, r15
    97dc:	09 f4       	brne	.+2      	; 0x97e0 <mount_volume+0x5a>
    97de:	21 c2       	rjmp	.+1090   	; 0x9c22 <mount_volume+0x49c>
    97e0:	82 ff       	sbrs	r24, 2
    97e2:	1f c2       	rjmp	.+1086   	; 0x9c22 <mount_volume+0x49c>
    97e4:	8a e0       	ldi	r24, 0x0A	; 10
    97e6:	90 e0       	ldi	r25, 0x00	; 0
    97e8:	24 c2       	rjmp	.+1096   	; 0x9c32 <mount_volume+0x4ac>
    97ea:	d8 01       	movw	r26, r16
    97ec:	1c 92       	st	X, r1
    97ee:	f8 01       	movw	r30, r16
    97f0:	c1 82       	std	Z+1, r12	; 0x01
    97f2:	8c 2d       	mov	r24, r12
    97f4:	0e 94 74 69 	call	0xd2e8	; 0xd2e8 <disk_initialize>
    97f8:	80 fd       	sbrc	r24, 0
    97fa:	16 c2       	rjmp	.+1068   	; 0x9c28 <mount_volume+0x4a2>
    97fc:	ff 20       	and	r15, r15
    97fe:	11 f0       	breq	.+4      	; 0x9804 <mount_volume+0x7e>
    9800:	82 fd       	sbrc	r24, 2
    9802:	f0 cf       	rjmp	.-32     	; 0x97e4 <mount_volume+0x5e>
    9804:	40 e0       	ldi	r20, 0x00	; 0
    9806:	50 e0       	ldi	r21, 0x00	; 0
    9808:	ba 01       	movw	r22, r20
    980a:	c8 01       	movw	r24, r16
    980c:	7c df       	rcall	.-264    	; 0x9706 <check_fs>
    980e:	82 30       	cpi	r24, 0x02	; 2
    9810:	91 05       	cpc	r25, r1
    9812:	b9 f5       	brne	.+110    	; 0x9882 <mount_volume+0xfc>
    9814:	68 01       	movw	r12, r16
    9816:	f5 e0       	ldi	r31, 0x05	; 5
    9818:	cf 1a       	sub	r12, r31
    981a:	fe ef       	ldi	r31, 0xFE	; 254
    981c:	df 0a       	sbc	r13, r31
    981e:	9e 01       	movw	r18, r28
    9820:	2f 5f       	subi	r18, 0xFF	; 255
    9822:	3f 4f       	sbci	r19, 0xFF	; 255
    9824:	79 01       	movw	r14, r18
    9826:	48 01       	movw	r8, r16
    9828:	35 ec       	ldi	r19, 0xC5	; 197
    982a:	83 1a       	sub	r8, r19
    982c:	3d ef       	ldi	r19, 0xFD	; 253
    982e:	93 0a       	sbc	r9, r19
    9830:	57 01       	movw	r10, r14
    9832:	c6 01       	movw	r24, r12
    9834:	6b db       	rcall	.-2346   	; 0x8f0c <ld_dword>
    9836:	d5 01       	movw	r26, r10
    9838:	6d 93       	st	X+, r22
    983a:	7d 93       	st	X+, r23
    983c:	8d 93       	st	X+, r24
    983e:	9d 93       	st	X+, r25
    9840:	5d 01       	movw	r10, r26
    9842:	b0 e1       	ldi	r27, 0x10	; 16
    9844:	cb 0e       	add	r12, r27
    9846:	d1 1c       	adc	r13, r1
    9848:	c8 14       	cp	r12, r8
    984a:	d9 04       	cpc	r13, r9
    984c:	91 f7       	brne	.-28     	; 0x9832 <mount_volume+0xac>
    984e:	6e 01       	movw	r12, r28
    9850:	e1 e1       	ldi	r30, 0x11	; 17
    9852:	ce 0e       	add	r12, r30
    9854:	d1 1c       	adc	r13, r1
    9856:	d7 01       	movw	r26, r14
    9858:	4d 91       	ld	r20, X+
    985a:	5d 91       	ld	r21, X+
    985c:	6d 91       	ld	r22, X+
    985e:	7d 91       	ld	r23, X+
    9860:	7d 01       	movw	r14, r26
    9862:	41 15       	cp	r20, r1
    9864:	51 05       	cpc	r21, r1
    9866:	61 05       	cpc	r22, r1
    9868:	71 05       	cpc	r23, r1
    986a:	31 f0       	breq	.+12     	; 0x9878 <mount_volume+0xf2>
    986c:	c8 01       	movw	r24, r16
    986e:	4b df       	rcall	.-362    	; 0x9706 <check_fs>
    9870:	82 30       	cpi	r24, 0x02	; 2
    9872:	91 05       	cpc	r25, r1
    9874:	18 f4       	brcc	.+6      	; 0x987c <mount_volume+0xf6>
    9876:	05 c0       	rjmp	.+10     	; 0x9882 <mount_volume+0xfc>
    9878:	83 e0       	ldi	r24, 0x03	; 3
    987a:	90 e0       	ldi	r25, 0x00	; 0
    987c:	ce 14       	cp	r12, r14
    987e:	df 04       	cpc	r13, r15
    9880:	51 f7       	brne	.-44     	; 0x9856 <mount_volume+0xd0>
    9882:	84 30       	cpi	r24, 0x04	; 4
    9884:	91 05       	cpc	r25, r1
    9886:	09 f4       	brne	.+2      	; 0x988a <mount_volume+0x104>
    9888:	d2 c1       	rjmp	.+932    	; 0x9c2e <mount_volume+0x4a8>
    988a:	02 97       	sbiw	r24, 0x02	; 2
    988c:	18 f0       	brcs	.+6      	; 0x9894 <mount_volume+0x10e>
    988e:	8d e0       	ldi	r24, 0x0D	; 13
    9890:	90 e0       	ldi	r25, 0x00	; 0
    9892:	cf c1       	rjmp	.+926    	; 0x9c32 <mount_volume+0x4ac>
    9894:	f8 01       	movw	r30, r16
    9896:	e0 5c       	subi	r30, 0xC0	; 192
    9898:	ff 4f       	sbci	r31, 0xFF	; 255
    989a:	80 81       	ld	r24, Z
    989c:	91 81       	ldd	r25, Z+1	; 0x01
    989e:	81 15       	cp	r24, r1
    98a0:	92 40       	sbci	r25, 0x02	; 2
    98a2:	a9 f7       	brne	.-22     	; 0x988e <mount_volume+0x108>
    98a4:	3b 96       	adiw	r30, 0x0b	; 11
    98a6:	40 80       	ld	r4, Z
    98a8:	51 80       	ldd	r5, Z+1	; 0x01
    98aa:	41 14       	cp	r4, r1
    98ac:	51 04       	cpc	r5, r1
    98ae:	19 f0       	breq	.+6      	; 0x98b6 <mount_volume+0x130>
    98b0:	61 2c       	mov	r6, r1
    98b2:	71 2c       	mov	r7, r1
    98b4:	06 c0       	rjmp	.+12     	; 0x98c2 <mount_volume+0x13c>
    98b6:	c8 01       	movw	r24, r16
    98b8:	87 5a       	subi	r24, 0xA7	; 167
    98ba:	9f 4f       	sbci	r25, 0xFF	; 255
    98bc:	27 db       	rcall	.-2482   	; 0x8f0c <ld_dword>
    98be:	2b 01       	movw	r4, r22
    98c0:	3c 01       	movw	r6, r24
    98c2:	f8 01       	movw	r30, r16
    98c4:	21 a9       	ldd	r18, Z+49	; 0x31
    98c6:	32 a9       	ldd	r19, Z+50	; 0x32
    98c8:	43 a9       	ldd	r20, Z+51	; 0x33
    98ca:	54 a9       	ldd	r21, Z+52	; 0x34
    98cc:	29 8b       	std	Y+17, r18	; 0x11
    98ce:	3a 8b       	std	Y+18, r19	; 0x12
    98d0:	4b 8b       	std	Y+19, r20	; 0x13
    98d2:	5c 8b       	std	Y+20, r21	; 0x14
    98d4:	45 8e       	std	Z+29, r4	; 0x1d
    98d6:	56 8e       	std	Z+30, r5	; 0x1e
    98d8:	67 8e       	std	Z+31, r6	; 0x1f
    98da:	70 a2       	std	Z+32, r7	; 0x20
    98dc:	eb 5b       	subi	r30, 0xBB	; 187
    98de:	ff 4f       	sbci	r31, 0xFF	; 255
    98e0:	a0 80       	ld	r10, Z
    98e2:	f8 01       	movw	r30, r16
    98e4:	a2 82       	std	Z+2, r10	; 0x02
    98e6:	8f ef       	ldi	r24, 0xFF	; 255
    98e8:	8a 0d       	add	r24, r10
    98ea:	82 30       	cpi	r24, 0x02	; 2
    98ec:	80 f6       	brcc	.-96     	; 0x988e <mount_volume+0x108>
    98ee:	ee 5b       	subi	r30, 0xBE	; 190
    98f0:	ff 4f       	sbci	r31, 0xFF	; 255
    98f2:	b0 80       	ld	r11, Z
    98f4:	8b 2d       	mov	r24, r11
    98f6:	90 e0       	ldi	r25, 0x00	; 0
    98f8:	f8 01       	movw	r30, r16
    98fa:	92 87       	std	Z+10, r25	; 0x0a
    98fc:	81 87       	std	Z+9, r24	; 0x09
    98fe:	00 97       	sbiw	r24, 0x00	; 0
    9900:	31 f2       	breq	.-116    	; 0x988e <mount_volume+0x108>
    9902:	9c 01       	movw	r18, r24
    9904:	21 50       	subi	r18, 0x01	; 1
    9906:	31 09       	sbc	r19, r1
    9908:	82 23       	and	r24, r18
    990a:	93 23       	and	r25, r19
    990c:	89 2b       	or	r24, r25
    990e:	09 f0       	breq	.+2      	; 0x9912 <mount_volume+0x18c>
    9910:	be cf       	rjmp	.-132    	; 0x988e <mount_volume+0x108>
    9912:	ea 5b       	subi	r30, 0xBA	; 186
    9914:	ff 4f       	sbci	r31, 0xFF	; 255
    9916:	80 80       	ld	r8, Z
    9918:	91 80       	ldd	r9, Z+1	; 0x01
    991a:	f8 01       	movw	r30, r16
    991c:	90 86       	std	Z+8, r9	; 0x08
    991e:	87 82       	std	Z+7, r8	; 0x07
    9920:	c4 01       	movw	r24, r8
    9922:	8f 70       	andi	r24, 0x0F	; 15
    9924:	99 27       	eor	r25, r25
    9926:	89 2b       	or	r24, r25
    9928:	09 f0       	breq	.+2      	; 0x992c <mount_volume+0x1a6>
    992a:	b1 cf       	rjmp	.-158    	; 0x988e <mount_volume+0x108>
    992c:	e8 5b       	subi	r30, 0xB8	; 184
    992e:	ff 4f       	sbci	r31, 0xFF	; 255
    9930:	80 81       	ld	r24, Z
    9932:	91 81       	ldd	r25, Z+1	; 0x01
    9934:	6c 01       	movw	r12, r24
    9936:	e1 2c       	mov	r14, r1
    9938:	f1 2c       	mov	r15, r1
    993a:	89 2b       	or	r24, r25
    993c:	31 f4       	brne	.+12     	; 0x994a <mount_volume+0x1c4>
    993e:	c8 01       	movw	r24, r16
    9940:	8b 5a       	subi	r24, 0xAB	; 171
    9942:	9f 4f       	sbci	r25, 0xFF	; 255
    9944:	e3 da       	rcall	.-2618   	; 0x8f0c <ld_dword>
    9946:	6b 01       	movw	r12, r22
    9948:	7c 01       	movw	r14, r24
    994a:	f8 01       	movw	r30, r16
    994c:	ed 5b       	subi	r30, 0xBD	; 189
    994e:	ff 4f       	sbci	r31, 0xFF	; 255
    9950:	01 90       	ld	r0, Z+
    9952:	f0 81       	ld	r31, Z
    9954:	e0 2d       	mov	r30, r0
    9956:	30 97       	sbiw	r30, 0x00	; 0
    9958:	09 f4       	brne	.+2      	; 0x995c <mount_volume+0x1d6>
    995a:	99 cf       	rjmp	.-206    	; 0x988e <mount_volume+0x108>
    995c:	aa 2d       	mov	r26, r10
    995e:	b0 e0       	ldi	r27, 0x00	; 0
    9960:	a3 01       	movw	r20, r6
    9962:	92 01       	movw	r18, r4
    9964:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__muluhisi3>
    9968:	69 8f       	std	Y+25, r22	; 0x19
    996a:	7a 8f       	std	Y+26, r23	; 0x1a
    996c:	8b 8f       	std	Y+27, r24	; 0x1b
    996e:	9c 8f       	std	Y+28, r25	; 0x1c
    9970:	9f 01       	movw	r18, r30
    9972:	40 e0       	ldi	r20, 0x00	; 0
    9974:	50 e0       	ldi	r21, 0x00	; 0
    9976:	2d 8f       	std	Y+29, r18	; 0x1d
    9978:	3e 8f       	std	Y+30, r19	; 0x1e
    997a:	4f 8f       	std	Y+31, r20	; 0x1f
    997c:	58 a3       	std	Y+32, r21	; 0x20
    997e:	c4 01       	movw	r24, r8
    9980:	f4 e0       	ldi	r31, 0x04	; 4
    9982:	96 95       	lsr	r25
    9984:	87 95       	ror	r24
    9986:	fa 95       	dec	r31
    9988:	e1 f7       	brne	.-8      	; 0x9982 <mount_volume+0x1fc>
    998a:	28 0f       	add	r18, r24
    998c:	39 1f       	adc	r19, r25
    998e:	41 1d       	adc	r20, r1
    9990:	51 1d       	adc	r21, r1
    9992:	da 01       	movw	r26, r20
    9994:	c9 01       	movw	r24, r18
    9996:	29 8d       	ldd	r18, Y+25	; 0x19
    9998:	3a 8d       	ldd	r19, Y+26	; 0x1a
    999a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    999c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    999e:	28 0f       	add	r18, r24
    99a0:	39 1f       	adc	r19, r25
    99a2:	4a 1f       	adc	r20, r26
    99a4:	5b 1f       	adc	r21, r27
    99a6:	2d 8b       	std	Y+21, r18	; 0x15
    99a8:	3e 8b       	std	Y+22, r19	; 0x16
    99aa:	4f 8b       	std	Y+23, r20	; 0x17
    99ac:	58 8f       	std	Y+24, r21	; 0x18
    99ae:	c2 16       	cp	r12, r18
    99b0:	d3 06       	cpc	r13, r19
    99b2:	e4 06       	cpc	r14, r20
    99b4:	f5 06       	cpc	r15, r21
    99b6:	08 f4       	brcc	.+2      	; 0x99ba <mount_volume+0x234>
    99b8:	6a cf       	rjmp	.-300    	; 0x988e <mount_volume+0x108>
    99ba:	c7 01       	movw	r24, r14
    99bc:	b6 01       	movw	r22, r12
    99be:	62 1b       	sub	r22, r18
    99c0:	73 0b       	sbc	r23, r19
    99c2:	84 0b       	sbc	r24, r20
    99c4:	95 0b       	sbc	r25, r21
    99c6:	2b 2d       	mov	r18, r11
    99c8:	30 e0       	ldi	r19, 0x00	; 0
    99ca:	40 e0       	ldi	r20, 0x00	; 0
    99cc:	50 e0       	ldi	r21, 0x00	; 0
    99ce:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__udivmodsi4>
    99d2:	da 01       	movw	r26, r20
    99d4:	c9 01       	movw	r24, r18
    99d6:	01 97       	sbiw	r24, 0x01	; 1
    99d8:	a1 09       	sbc	r26, r1
    99da:	b1 09       	sbc	r27, r1
    99dc:	85 3f       	cpi	r24, 0xF5	; 245
    99de:	9f 4f       	sbci	r25, 0xFF	; 255
    99e0:	af 4f       	sbci	r26, 0xFF	; 255
    99e2:	bf 40       	sbci	r27, 0x0F	; 15
    99e4:	08 f0       	brcs	.+2      	; 0x99e8 <mount_volume+0x262>
    99e6:	53 cf       	rjmp	.-346    	; 0x988e <mount_volume+0x108>
    99e8:	26 3f       	cpi	r18, 0xF6	; 246
    99ea:	8f ef       	ldi	r24, 0xFF	; 255
    99ec:	38 07       	cpc	r19, r24
    99ee:	41 05       	cpc	r20, r1
    99f0:	51 05       	cpc	r21, r1
    99f2:	50 f4       	brcc	.+20     	; 0x9a08 <mount_volume+0x282>
    99f4:	26 3f       	cpi	r18, 0xF6	; 246
    99f6:	9f e0       	ldi	r25, 0x0F	; 15
    99f8:	39 07       	cpc	r19, r25
    99fa:	41 05       	cpc	r20, r1
    99fc:	51 05       	cpc	r21, r1
    99fe:	40 f4       	brcc	.+16     	; 0x9a10 <mount_volume+0x28a>
    9a00:	aa 24       	eor	r10, r10
    9a02:	a3 94       	inc	r10
    9a04:	b1 2c       	mov	r11, r1
    9a06:	07 c0       	rjmp	.+14     	; 0x9a16 <mount_volume+0x290>
    9a08:	73 e0       	ldi	r23, 0x03	; 3
    9a0a:	a7 2e       	mov	r10, r23
    9a0c:	b1 2c       	mov	r11, r1
    9a0e:	03 c0       	rjmp	.+6      	; 0x9a16 <mount_volume+0x290>
    9a10:	62 e0       	ldi	r22, 0x02	; 2
    9a12:	a6 2e       	mov	r10, r22
    9a14:	b1 2c       	mov	r11, r1
    9a16:	69 01       	movw	r12, r18
    9a18:	7a 01       	movw	r14, r20
    9a1a:	a2 e0       	ldi	r26, 0x02	; 2
    9a1c:	ca 0e       	add	r12, r26
    9a1e:	d1 1c       	adc	r13, r1
    9a20:	e1 1c       	adc	r14, r1
    9a22:	f1 1c       	adc	r15, r1
    9a24:	f8 01       	movw	r30, r16
    9a26:	c1 8e       	std	Z+25, r12	; 0x19
    9a28:	d2 8e       	std	Z+26, r13	; 0x1a
    9a2a:	e3 8e       	std	Z+27, r14	; 0x1b
    9a2c:	f4 8e       	std	Z+28, r15	; 0x1c
    9a2e:	29 89       	ldd	r18, Y+17	; 0x11
    9a30:	3a 89       	ldd	r19, Y+18	; 0x12
    9a32:	4b 89       	ldd	r20, Y+19	; 0x13
    9a34:	5c 89       	ldd	r21, Y+20	; 0x14
    9a36:	21 a3       	std	Z+33, r18	; 0x21
    9a38:	32 a3       	std	Z+34, r19	; 0x22
    9a3a:	43 a3       	std	Z+35, r20	; 0x23
    9a3c:	54 a3       	std	Z+36, r21	; 0x24
    9a3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9a40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9a42:	af 8d       	ldd	r26, Y+31	; 0x1f
    9a44:	b8 a1       	ldd	r27, Y+32	; 0x20
    9a46:	28 0f       	add	r18, r24
    9a48:	39 1f       	adc	r19, r25
    9a4a:	4a 1f       	adc	r20, r26
    9a4c:	5b 1f       	adc	r21, r27
    9a4e:	2d 8f       	std	Y+29, r18	; 0x1d
    9a50:	3e 8f       	std	Y+30, r19	; 0x1e
    9a52:	4f 8f       	std	Y+31, r20	; 0x1f
    9a54:	58 a3       	std	Y+32, r21	; 0x20
    9a56:	25 a3       	std	Z+37, r18	; 0x25
    9a58:	36 a3       	std	Z+38, r19	; 0x26
    9a5a:	47 a3       	std	Z+39, r20	; 0x27
    9a5c:	50 a7       	std	Z+40, r21	; 0x28
    9a5e:	49 89       	ldd	r20, Y+17	; 0x11
    9a60:	5a 89       	ldd	r21, Y+18	; 0x12
    9a62:	6b 89       	ldd	r22, Y+19	; 0x13
    9a64:	7c 89       	ldd	r23, Y+20	; 0x14
    9a66:	8d 89       	ldd	r24, Y+21	; 0x15
    9a68:	9e 89       	ldd	r25, Y+22	; 0x16
    9a6a:	af 89       	ldd	r26, Y+23	; 0x17
    9a6c:	b8 8d       	ldd	r27, Y+24	; 0x18
    9a6e:	48 0f       	add	r20, r24
    9a70:	59 1f       	adc	r21, r25
    9a72:	6a 1f       	adc	r22, r26
    9a74:	7b 1f       	adc	r23, r27
    9a76:	45 a7       	std	Z+45, r20	; 0x2d
    9a78:	56 a7       	std	Z+46, r21	; 0x2e
    9a7a:	67 a7       	std	Z+47, r22	; 0x2f
    9a7c:	70 ab       	std	Z+48, r23	; 0x30
    9a7e:	f3 e0       	ldi	r31, 0x03	; 3
    9a80:	af 16       	cp	r10, r31
    9a82:	b1 04       	cpc	r11, r1
    9a84:	e9 f4       	brne	.+58     	; 0x9ac0 <mount_volume+0x33a>
    9a86:	f8 01       	movw	r30, r16
    9a88:	e1 5a       	subi	r30, 0xA1	; 161
    9a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    9a8c:	80 81       	ld	r24, Z
    9a8e:	91 81       	ldd	r25, Z+1	; 0x01
    9a90:	89 2b       	or	r24, r25
    9a92:	09 f0       	breq	.+2      	; 0x9a96 <mount_volume+0x310>
    9a94:	fc ce       	rjmp	.-520    	; 0x988e <mount_volume+0x108>
    9a96:	81 14       	cp	r8, r1
    9a98:	91 04       	cpc	r9, r1
    9a9a:	09 f0       	breq	.+2      	; 0x9a9e <mount_volume+0x318>
    9a9c:	f8 ce       	rjmp	.-528    	; 0x988e <mount_volume+0x108>
    9a9e:	c8 01       	movw	r24, r16
    9aa0:	8f 59       	subi	r24, 0x9F	; 159
    9aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    9aa4:	33 da       	rcall	.-2970   	; 0x8f0c <ld_dword>
    9aa6:	f8 01       	movw	r30, r16
    9aa8:	61 a7       	std	Z+41, r22	; 0x29
    9aaa:	72 a7       	std	Z+42, r23	; 0x2a
    9aac:	83 a7       	std	Z+43, r24	; 0x2b
    9aae:	94 a7       	std	Z+44, r25	; 0x2c
    9ab0:	42 e0       	ldi	r20, 0x02	; 2
    9ab2:	cc 0c       	add	r12, r12
    9ab4:	dd 1c       	adc	r13, r13
    9ab6:	ee 1c       	adc	r14, r14
    9ab8:	ff 1c       	adc	r15, r15
    9aba:	4a 95       	dec	r20
    9abc:	d1 f7       	brne	.-12     	; 0x9ab2 <mount_volume+0x32c>
    9abe:	33 c0       	rjmp	.+102    	; 0x9b26 <mount_volume+0x3a0>
    9ac0:	81 14       	cp	r8, r1
    9ac2:	91 04       	cpc	r9, r1
    9ac4:	09 f4       	brne	.+2      	; 0x9ac8 <mount_volume+0x342>
    9ac6:	e3 ce       	rjmp	.-570    	; 0x988e <mount_volume+0x108>
    9ac8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9aca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9acc:	af 8d       	ldd	r26, Y+31	; 0x1f
    9ace:	b8 a1       	ldd	r27, Y+32	; 0x20
    9ad0:	29 8d       	ldd	r18, Y+25	; 0x19
    9ad2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9ad4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9ad6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9ad8:	82 0f       	add	r24, r18
    9ada:	93 1f       	adc	r25, r19
    9adc:	a4 1f       	adc	r26, r20
    9ade:	b5 1f       	adc	r27, r21
    9ae0:	f8 01       	movw	r30, r16
    9ae2:	81 a7       	std	Z+41, r24	; 0x29
    9ae4:	92 a7       	std	Z+42, r25	; 0x2a
    9ae6:	a3 a7       	std	Z+43, r26	; 0x2b
    9ae8:	b4 a7       	std	Z+44, r27	; 0x2c
    9aea:	f2 e0       	ldi	r31, 0x02	; 2
    9aec:	af 16       	cp	r10, r31
    9aee:	b1 04       	cpc	r11, r1
    9af0:	29 f4       	brne	.+10     	; 0x9afc <mount_volume+0x376>
    9af2:	cc 0c       	add	r12, r12
    9af4:	dd 1c       	adc	r13, r13
    9af6:	ee 1c       	adc	r14, r14
    9af8:	ff 1c       	adc	r15, r15
    9afa:	15 c0       	rjmp	.+42     	; 0x9b26 <mount_volume+0x3a0>
    9afc:	a3 e0       	ldi	r26, 0x03	; 3
    9afe:	b0 e0       	ldi	r27, 0x00	; 0
    9b00:	a7 01       	movw	r20, r14
    9b02:	96 01       	movw	r18, r12
    9b04:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__muluhisi3>
    9b08:	dc 01       	movw	r26, r24
    9b0a:	cb 01       	movw	r24, r22
    9b0c:	b6 95       	lsr	r27
    9b0e:	a7 95       	ror	r26
    9b10:	97 95       	ror	r25
    9b12:	87 95       	ror	r24
    9b14:	21 e0       	ldi	r18, 0x01	; 1
    9b16:	c2 22       	and	r12, r18
    9b18:	dd 24       	eor	r13, r13
    9b1a:	ee 24       	eor	r14, r14
    9b1c:	ff 24       	eor	r15, r15
    9b1e:	c8 0e       	add	r12, r24
    9b20:	d9 1e       	adc	r13, r25
    9b22:	ea 1e       	adc	r14, r26
    9b24:	fb 1e       	adc	r15, r27
    9b26:	3f ef       	ldi	r19, 0xFF	; 255
    9b28:	c3 0e       	add	r12, r19
    9b2a:	31 e0       	ldi	r19, 0x01	; 1
    9b2c:	d3 1e       	adc	r13, r19
    9b2e:	e1 1c       	adc	r14, r1
    9b30:	f1 1c       	adc	r15, r1
    9b32:	89 e0       	ldi	r24, 0x09	; 9
    9b34:	f6 94       	lsr	r15
    9b36:	e7 94       	ror	r14
    9b38:	d7 94       	ror	r13
    9b3a:	c7 94       	ror	r12
    9b3c:	8a 95       	dec	r24
    9b3e:	d1 f7       	brne	.-12     	; 0x9b34 <mount_volume+0x3ae>
    9b40:	4c 14       	cp	r4, r12
    9b42:	5d 04       	cpc	r5, r13
    9b44:	6e 04       	cpc	r6, r14
    9b46:	7f 04       	cpc	r7, r15
    9b48:	08 f4       	brcc	.+2      	; 0x9b4c <mount_volume+0x3c6>
    9b4a:	a1 ce       	rjmp	.-702    	; 0x988e <mount_volume+0x108>
    9b4c:	8f ef       	ldi	r24, 0xFF	; 255
    9b4e:	9f ef       	ldi	r25, 0xFF	; 255
    9b50:	dc 01       	movw	r26, r24
    9b52:	f8 01       	movw	r30, r16
    9b54:	81 8b       	std	Z+17, r24	; 0x11
    9b56:	92 8b       	std	Z+18, r25	; 0x12
    9b58:	a3 8b       	std	Z+19, r26	; 0x13
    9b5a:	b4 8b       	std	Z+20, r27	; 0x14
    9b5c:	85 87       	std	Z+13, r24	; 0x0d
    9b5e:	96 87       	std	Z+14, r25	; 0x0e
    9b60:	a7 87       	std	Z+15, r26	; 0x0f
    9b62:	b0 8b       	std	Z+16, r27	; 0x10
    9b64:	80 e8       	ldi	r24, 0x80	; 128
    9b66:	84 83       	std	Z+4, r24	; 0x04
    9b68:	f3 e0       	ldi	r31, 0x03	; 3
    9b6a:	af 16       	cp	r10, r31
    9b6c:	b1 04       	cpc	r11, r1
    9b6e:	09 f0       	breq	.+2      	; 0x9b72 <mount_volume+0x3ec>
    9b70:	3f c0       	rjmp	.+126    	; 0x9bf0 <mount_volume+0x46a>
    9b72:	f8 01       	movw	r30, r16
    9b74:	eb 59       	subi	r30, 0x9B	; 155
    9b76:	ff 4f       	sbci	r31, 0xFF	; 255
    9b78:	80 81       	ld	r24, Z
    9b7a:	91 81       	ldd	r25, Z+1	; 0x01
    9b7c:	01 97       	sbiw	r24, 0x01	; 1
    9b7e:	c1 f5       	brne	.+112    	; 0x9bf0 <mount_volume+0x46a>
    9b80:	49 89       	ldd	r20, Y+17	; 0x11
    9b82:	5a 89       	ldd	r21, Y+18	; 0x12
    9b84:	6b 89       	ldd	r22, Y+19	; 0x13
    9b86:	7c 89       	ldd	r23, Y+20	; 0x14
    9b88:	4f 5f       	subi	r20, 0xFF	; 255
    9b8a:	5f 4f       	sbci	r21, 0xFF	; 255
    9b8c:	6f 4f       	sbci	r22, 0xFF	; 255
    9b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    9b90:	c8 01       	movw	r24, r16
    9b92:	7e dd       	rcall	.-1284   	; 0x9690 <move_window>
    9b94:	89 2b       	or	r24, r25
    9b96:	61 f5       	brne	.+88     	; 0x9bf0 <mount_volume+0x46a>
    9b98:	f8 01       	movw	r30, r16
    9b9a:	14 82       	std	Z+4, r1	; 0x04
    9b9c:	ed 5c       	subi	r30, 0xCD	; 205
    9b9e:	fd 4f       	sbci	r31, 0xFD	; 253
    9ba0:	80 81       	ld	r24, Z
    9ba2:	91 81       	ldd	r25, Z+1	; 0x01
    9ba4:	85 35       	cpi	r24, 0x55	; 85
    9ba6:	9a 4a       	sbci	r25, 0xAA	; 170
    9ba8:	19 f5       	brne	.+70     	; 0x9bf0 <mount_volume+0x46a>
    9baa:	c8 01       	movw	r24, r16
    9bac:	c5 96       	adiw	r24, 0x35	; 53
    9bae:	ae d9       	rcall	.-3236   	; 0x8f0c <ld_dword>
    9bb0:	62 35       	cpi	r22, 0x52	; 82
    9bb2:	72 45       	sbci	r23, 0x52	; 82
    9bb4:	81 46       	sbci	r24, 0x61	; 97
    9bb6:	91 44       	sbci	r25, 0x41	; 65
    9bb8:	d9 f4       	brne	.+54     	; 0x9bf0 <mount_volume+0x46a>
    9bba:	c8 01       	movw	r24, r16
    9bbc:	87 5e       	subi	r24, 0xE7	; 231
    9bbe:	9d 4f       	sbci	r25, 0xFD	; 253
    9bc0:	a5 d9       	rcall	.-3254   	; 0x8f0c <ld_dword>
    9bc2:	62 37       	cpi	r22, 0x72	; 114
    9bc4:	72 47       	sbci	r23, 0x72	; 114
    9bc6:	81 44       	sbci	r24, 0x41	; 65
    9bc8:	91 46       	sbci	r25, 0x61	; 97
    9bca:	91 f4       	brne	.+36     	; 0x9bf0 <mount_volume+0x46a>
    9bcc:	c8 01       	movw	r24, r16
    9bce:	83 5e       	subi	r24, 0xE3	; 227
    9bd0:	9d 4f       	sbci	r25, 0xFD	; 253
    9bd2:	9c d9       	rcall	.-3272   	; 0x8f0c <ld_dword>
    9bd4:	f8 01       	movw	r30, r16
    9bd6:	61 8b       	std	Z+17, r22	; 0x11
    9bd8:	72 8b       	std	Z+18, r23	; 0x12
    9bda:	83 8b       	std	Z+19, r24	; 0x13
    9bdc:	94 8b       	std	Z+20, r25	; 0x14
    9bde:	c8 01       	movw	r24, r16
    9be0:	8f 5d       	subi	r24, 0xDF	; 223
    9be2:	9d 4f       	sbci	r25, 0xFD	; 253
    9be4:	93 d9       	rcall	.-3290   	; 0x8f0c <ld_dword>
    9be6:	f8 01       	movw	r30, r16
    9be8:	65 87       	std	Z+13, r22	; 0x0d
    9bea:	76 87       	std	Z+14, r23	; 0x0e
    9bec:	87 87       	std	Z+15, r24	; 0x0f
    9bee:	90 8b       	std	Z+16, r25	; 0x10
    9bf0:	d8 01       	movw	r26, r16
    9bf2:	ac 92       	st	X, r10
    9bf4:	80 91 27 18 	lds	r24, 0x1827	; 0x801827 <Fsid>
    9bf8:	90 91 28 18 	lds	r25, 0x1828	; 0x801828 <Fsid+0x1>
    9bfc:	01 96       	adiw	r24, 0x01	; 1
    9bfe:	90 93 28 18 	sts	0x1828, r25	; 0x801828 <Fsid+0x1>
    9c02:	80 93 27 18 	sts	0x1827, r24	; 0x801827 <Fsid>
    9c06:	f8 01       	movw	r30, r16
    9c08:	96 83       	std	Z+6, r25	; 0x06
    9c0a:	85 83       	std	Z+5, r24	; 0x05
    9c0c:	15 8a       	std	Z+21, r1	; 0x15
    9c0e:	16 8a       	std	Z+22, r1	; 0x16
    9c10:	17 8a       	std	Z+23, r1	; 0x17
    9c12:	10 8e       	std	Z+24, r1	; 0x18
    9c14:	06 c0       	rjmp	.+12     	; 0x9c22 <mount_volume+0x49c>
    9c16:	8b e0       	ldi	r24, 0x0B	; 11
    9c18:	90 e0       	ldi	r25, 0x00	; 0
    9c1a:	0b c0       	rjmp	.+22     	; 0x9c32 <mount_volume+0x4ac>
    9c1c:	8c e0       	ldi	r24, 0x0C	; 12
    9c1e:	90 e0       	ldi	r25, 0x00	; 0
    9c20:	08 c0       	rjmp	.+16     	; 0x9c32 <mount_volume+0x4ac>
    9c22:	80 e0       	ldi	r24, 0x00	; 0
    9c24:	90 e0       	ldi	r25, 0x00	; 0
    9c26:	05 c0       	rjmp	.+10     	; 0x9c32 <mount_volume+0x4ac>
    9c28:	83 e0       	ldi	r24, 0x03	; 3
    9c2a:	90 e0       	ldi	r25, 0x00	; 0
    9c2c:	02 c0       	rjmp	.+4      	; 0x9c32 <mount_volume+0x4ac>
    9c2e:	81 e0       	ldi	r24, 0x01	; 1
    9c30:	90 e0       	ldi	r25, 0x00	; 0
    9c32:	a0 96       	adiw	r28, 0x20	; 32
    9c34:	e0 e1       	ldi	r30, 0x10	; 16
    9c36:	0c 94 d1 e6 	jmp	0x1cda2	; 0x1cda2 <__epilogue_restores__+0x4>

00009c3a <put_fat>:
    9c3a:	a6 e0       	ldi	r26, 0x06	; 6
    9c3c:	b0 e0       	ldi	r27, 0x00	; 0
    9c3e:	e3 e2       	ldi	r30, 0x23	; 35
    9c40:	fe e4       	ldi	r31, 0x4E	; 78
    9c42:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    9c46:	42 30       	cpi	r20, 0x02	; 2
    9c48:	51 05       	cpc	r21, r1
    9c4a:	61 05       	cpc	r22, r1
    9c4c:	71 05       	cpc	r23, r1
    9c4e:	08 f4       	brcc	.+2      	; 0x9c52 <put_fat+0x18>
    9c50:	e5 c0       	rjmp	.+458    	; 0x9e1c <put_fat+0x1e2>
    9c52:	fc 01       	movw	r30, r24
    9c54:	c1 8c       	ldd	r12, Z+25	; 0x19
    9c56:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9c58:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9c5a:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9c5c:	4c 15       	cp	r20, r12
    9c5e:	5d 05       	cpc	r21, r13
    9c60:	6e 05       	cpc	r22, r14
    9c62:	7f 05       	cpc	r23, r15
    9c64:	08 f0       	brcs	.+2      	; 0x9c68 <put_fat+0x2e>
    9c66:	da c0       	rjmp	.+436    	; 0x9e1c <put_fat+0x1e2>
    9c68:	28 01       	movw	r4, r16
    9c6a:	39 01       	movw	r6, r18
    9c6c:	6a 01       	movw	r12, r20
    9c6e:	7b 01       	movw	r14, r22
    9c70:	9e 83       	std	Y+6, r25	; 0x06
    9c72:	8d 83       	std	Y+5, r24	; 0x05
    9c74:	80 81       	ld	r24, Z
    9c76:	82 30       	cpi	r24, 0x02	; 2
    9c78:	09 f4       	brne	.+2      	; 0x9c7c <put_fat+0x42>
    9c7a:	73 c0       	rjmp	.+230    	; 0x9d62 <put_fat+0x128>
    9c7c:	83 30       	cpi	r24, 0x03	; 3
    9c7e:	09 f4       	brne	.+2      	; 0x9c82 <put_fat+0x48>
    9c80:	92 c0       	rjmp	.+292    	; 0x9da6 <put_fat+0x16c>
    9c82:	81 30       	cpi	r24, 0x01	; 1
    9c84:	09 f0       	breq	.+2      	; 0x9c88 <put_fat+0x4e>
    9c86:	ca c0       	rjmp	.+404    	; 0x9e1c <put_fat+0x1e2>
    9c88:	4a 01       	movw	r8, r20
    9c8a:	96 94       	lsr	r9
    9c8c:	87 94       	ror	r8
    9c8e:	84 0e       	add	r8, r20
    9c90:	95 1e       	adc	r9, r21
    9c92:	c4 01       	movw	r24, r8
    9c94:	89 2f       	mov	r24, r25
    9c96:	99 27       	eor	r25, r25
    9c98:	86 95       	lsr	r24
    9c9a:	45 a1       	ldd	r20, Z+37	; 0x25
    9c9c:	56 a1       	ldd	r21, Z+38	; 0x26
    9c9e:	67 a1       	ldd	r22, Z+39	; 0x27
    9ca0:	70 a5       	ldd	r23, Z+40	; 0x28
    9ca2:	48 0f       	add	r20, r24
    9ca4:	59 1f       	adc	r21, r25
    9ca6:	61 1d       	adc	r22, r1
    9ca8:	71 1d       	adc	r23, r1
    9caa:	cf 01       	movw	r24, r30
    9cac:	f1 dc       	rcall	.-1566   	; 0x9690 <move_window>
    9cae:	5c 01       	movw	r10, r24
    9cb0:	89 2b       	or	r24, r25
    9cb2:	09 f0       	breq	.+2      	; 0x9cb6 <put_fat+0x7c>
    9cb4:	b6 c0       	rjmp	.+364    	; 0x9e22 <put_fat+0x1e8>
    9cb6:	2d 80       	ldd	r2, Y+5	; 0x05
    9cb8:	3e 80       	ldd	r3, Y+6	; 0x06
    9cba:	f5 e3       	ldi	r31, 0x35	; 53
    9cbc:	2f 0e       	add	r2, r31
    9cbe:	31 1c       	adc	r3, r1
    9cc0:	84 01       	movw	r16, r8
    9cc2:	0f 5f       	subi	r16, 0xFF	; 255
    9cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    9cc6:	21 e0       	ldi	r18, 0x01	; 1
    9cc8:	92 22       	and	r9, r18
    9cca:	f1 01       	movw	r30, r2
    9ccc:	e8 0d       	add	r30, r8
    9cce:	f9 1d       	adc	r31, r9
    9cd0:	d7 01       	movw	r26, r14
    9cd2:	c6 01       	movw	r24, r12
    9cd4:	81 70       	andi	r24, 0x01	; 1
    9cd6:	99 27       	eor	r25, r25
    9cd8:	aa 27       	eor	r26, r26
    9cda:	bb 27       	eor	r27, r27
    9cdc:	89 83       	std	Y+1, r24	; 0x01
    9cde:	9a 83       	std	Y+2, r25	; 0x02
    9ce0:	ab 83       	std	Y+3, r26	; 0x03
    9ce2:	bc 83       	std	Y+4, r27	; 0x04
    9ce4:	c0 fe       	sbrs	r12, 0
    9ce6:	09 c0       	rjmp	.+18     	; 0x9cfa <put_fat+0xc0>
    9ce8:	80 81       	ld	r24, Z
    9cea:	28 2f       	mov	r18, r24
    9cec:	2f 70       	andi	r18, 0x0F	; 15
    9cee:	a0 e1       	ldi	r26, 0x10	; 16
    9cf0:	4a 9e       	mul	r4, r26
    9cf2:	c0 01       	movw	r24, r0
    9cf4:	11 24       	eor	r1, r1
    9cf6:	82 2b       	or	r24, r18
    9cf8:	01 c0       	rjmp	.+2      	; 0x9cfc <put_fat+0xc2>
    9cfa:	84 2d       	mov	r24, r4
    9cfc:	80 83       	st	Z, r24
    9cfe:	81 e0       	ldi	r24, 0x01	; 1
    9d00:	ed 81       	ldd	r30, Y+5	; 0x05
    9d02:	fe 81       	ldd	r31, Y+6	; 0x06
    9d04:	83 83       	std	Z+3, r24	; 0x03
    9d06:	45 a1       	ldd	r20, Z+37	; 0x25
    9d08:	56 a1       	ldd	r21, Z+38	; 0x26
    9d0a:	67 a1       	ldd	r22, Z+39	; 0x27
    9d0c:	70 a5       	ldd	r23, Z+40	; 0x28
    9d0e:	c8 01       	movw	r24, r16
    9d10:	89 2f       	mov	r24, r25
    9d12:	99 27       	eor	r25, r25
    9d14:	86 95       	lsr	r24
    9d16:	48 0f       	add	r20, r24
    9d18:	59 1f       	adc	r21, r25
    9d1a:	61 1d       	adc	r22, r1
    9d1c:	71 1d       	adc	r23, r1
    9d1e:	cf 01       	movw	r24, r30
    9d20:	b7 dc       	rcall	.-1682   	; 0x9690 <move_window>
    9d22:	5c 01       	movw	r10, r24
    9d24:	89 2b       	or	r24, r25
    9d26:	09 f0       	breq	.+2      	; 0x9d2a <put_fat+0xf0>
    9d28:	7c c0       	rjmp	.+248    	; 0x9e22 <put_fat+0x1e8>
    9d2a:	11 70       	andi	r17, 0x01	; 1
    9d2c:	f1 01       	movw	r30, r2
    9d2e:	e0 0f       	add	r30, r16
    9d30:	f1 1f       	adc	r31, r17
    9d32:	89 81       	ldd	r24, Y+1	; 0x01
    9d34:	9a 81       	ldd	r25, Y+2	; 0x02
    9d36:	ab 81       	ldd	r26, Y+3	; 0x03
    9d38:	bc 81       	ldd	r27, Y+4	; 0x04
    9d3a:	89 2b       	or	r24, r25
    9d3c:	8a 2b       	or	r24, r26
    9d3e:	8b 2b       	or	r24, r27
    9d40:	41 f0       	breq	.+16     	; 0x9d52 <put_fat+0x118>
    9d42:	54 e0       	ldi	r21, 0x04	; 4
    9d44:	76 94       	lsr	r7
    9d46:	67 94       	ror	r6
    9d48:	57 94       	ror	r5
    9d4a:	47 94       	ror	r4
    9d4c:	5a 95       	dec	r21
    9d4e:	d1 f7       	brne	.-12     	; 0x9d44 <put_fat+0x10a>
    9d50:	06 c0       	rjmp	.+12     	; 0x9d5e <put_fat+0x124>
    9d52:	00 81       	ld	r16, Z
    9d54:	00 7f       	andi	r16, 0xF0	; 240
    9d56:	85 2d       	mov	r24, r5
    9d58:	8f 70       	andi	r24, 0x0F	; 15
    9d5a:	40 2e       	mov	r4, r16
    9d5c:	48 2a       	or	r4, r24
    9d5e:	40 82       	st	Z, r4
    9d60:	58 c0       	rjmp	.+176    	; 0x9e12 <put_fat+0x1d8>
    9d62:	77 27       	eor	r23, r23
    9d64:	6f 2d       	mov	r22, r15
    9d66:	5e 2d       	mov	r21, r14
    9d68:	4d 2d       	mov	r20, r13
    9d6a:	ed 81       	ldd	r30, Y+5	; 0x05
    9d6c:	fe 81       	ldd	r31, Y+6	; 0x06
    9d6e:	85 a1       	ldd	r24, Z+37	; 0x25
    9d70:	96 a1       	ldd	r25, Z+38	; 0x26
    9d72:	a7 a1       	ldd	r26, Z+39	; 0x27
    9d74:	b0 a5       	ldd	r27, Z+40	; 0x28
    9d76:	48 0f       	add	r20, r24
    9d78:	59 1f       	adc	r21, r25
    9d7a:	6a 1f       	adc	r22, r26
    9d7c:	7b 1f       	adc	r23, r27
    9d7e:	cf 01       	movw	r24, r30
    9d80:	87 dc       	rcall	.-1778   	; 0x9690 <move_window>
    9d82:	5c 01       	movw	r10, r24
    9d84:	89 2b       	or	r24, r25
    9d86:	09 f0       	breq	.+2      	; 0x9d8a <put_fat+0x150>
    9d88:	4c c0       	rjmp	.+152    	; 0x9e22 <put_fat+0x1e8>
    9d8a:	ed 81       	ldd	r30, Y+5	; 0x05
    9d8c:	fe 81       	ldd	r31, Y+6	; 0x06
    9d8e:	f5 96       	adiw	r30, 0x35	; 53
    9d90:	cc 0c       	add	r12, r12
    9d92:	dd 1c       	adc	r13, r13
    9d94:	e8 94       	clt
    9d96:	c0 f8       	bld	r12, 0
    9d98:	21 e0       	ldi	r18, 0x01	; 1
    9d9a:	d2 22       	and	r13, r18
    9d9c:	ec 0d       	add	r30, r12
    9d9e:	fd 1d       	adc	r31, r13
    9da0:	40 82       	st	Z, r4
    9da2:	51 82       	std	Z+1, r5	; 0x01
    9da4:	36 c0       	rjmp	.+108    	; 0x9e12 <put_fat+0x1d8>
    9da6:	ed 81       	ldd	r30, Y+5	; 0x05
    9da8:	fe 81       	ldd	r31, Y+6	; 0x06
    9daa:	85 a1       	ldd	r24, Z+37	; 0x25
    9dac:	96 a1       	ldd	r25, Z+38	; 0x26
    9dae:	a7 a1       	ldd	r26, Z+39	; 0x27
    9db0:	b0 a5       	ldd	r27, Z+40	; 0x28
    9db2:	27 e0       	ldi	r18, 0x07	; 7
    9db4:	76 95       	lsr	r23
    9db6:	67 95       	ror	r22
    9db8:	57 95       	ror	r21
    9dba:	47 95       	ror	r20
    9dbc:	2a 95       	dec	r18
    9dbe:	d1 f7       	brne	.-12     	; 0x9db4 <put_fat+0x17a>
    9dc0:	48 0f       	add	r20, r24
    9dc2:	59 1f       	adc	r21, r25
    9dc4:	6a 1f       	adc	r22, r26
    9dc6:	7b 1f       	adc	r23, r27
    9dc8:	cf 01       	movw	r24, r30
    9dca:	62 dc       	rcall	.-1852   	; 0x9690 <move_window>
    9dcc:	5c 01       	movw	r10, r24
    9dce:	89 2b       	or	r24, r25
    9dd0:	41 f5       	brne	.+80     	; 0x9e22 <put_fat+0x1e8>
    9dd2:	4d 81       	ldd	r20, Y+5	; 0x05
    9dd4:	5e 81       	ldd	r21, Y+6	; 0x06
    9dd6:	4b 5c       	subi	r20, 0xCB	; 203
    9dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    9dda:	cc 0c       	add	r12, r12
    9ddc:	dd 1c       	adc	r13, r13
    9dde:	cc 0c       	add	r12, r12
    9de0:	dd 1c       	adc	r13, r13
    9de2:	fc ef       	ldi	r31, 0xFC	; 252
    9de4:	cf 22       	and	r12, r31
    9de6:	f1 e0       	ldi	r31, 0x01	; 1
    9de8:	df 22       	and	r13, r31
    9dea:	c4 0e       	add	r12, r20
    9dec:	d5 1e       	adc	r13, r21
    9dee:	c6 01       	movw	r24, r12
    9df0:	8d d8       	rcall	.-3814   	; 0x8f0c <ld_dword>
    9df2:	2f e0       	ldi	r18, 0x0F	; 15
    9df4:	72 22       	and	r7, r18
    9df6:	dc 01       	movw	r26, r24
    9df8:	cb 01       	movw	r24, r22
    9dfa:	88 27       	eor	r24, r24
    9dfc:	99 27       	eor	r25, r25
    9dfe:	aa 27       	eor	r26, r26
    9e00:	b0 7f       	andi	r27, 0xF0	; 240
    9e02:	b3 01       	movw	r22, r6
    9e04:	a2 01       	movw	r20, r4
    9e06:	48 2b       	or	r20, r24
    9e08:	59 2b       	or	r21, r25
    9e0a:	6a 2b       	or	r22, r26
    9e0c:	7b 2b       	or	r23, r27
    9e0e:	c6 01       	movw	r24, r12
    9e10:	92 d8       	rcall	.-3804   	; 0x8f36 <st_dword>
    9e12:	81 e0       	ldi	r24, 0x01	; 1
    9e14:	ed 81       	ldd	r30, Y+5	; 0x05
    9e16:	fe 81       	ldd	r31, Y+6	; 0x06
    9e18:	83 83       	std	Z+3, r24	; 0x03
    9e1a:	03 c0       	rjmp	.+6      	; 0x9e22 <put_fat+0x1e8>
    9e1c:	82 e0       	ldi	r24, 0x02	; 2
    9e1e:	a8 2e       	mov	r10, r24
    9e20:	b1 2c       	mov	r11, r1
    9e22:	c5 01       	movw	r24, r10
    9e24:	26 96       	adiw	r28, 0x06	; 6
    9e26:	e2 e1       	ldi	r30, 0x12	; 18
    9e28:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

00009e2c <get_fat.isra.9>:
    9e2c:	a0 e0       	ldi	r26, 0x00	; 0
    9e2e:	b0 e0       	ldi	r27, 0x00	; 0
    9e30:	ec e1       	ldi	r30, 0x1C	; 28
    9e32:	ff e4       	ldi	r31, 0x4F	; 79
    9e34:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__+0x10>
    9e38:	42 30       	cpi	r20, 0x02	; 2
    9e3a:	51 05       	cpc	r21, r1
    9e3c:	61 05       	cpc	r22, r1
    9e3e:	71 05       	cpc	r23, r1
    9e40:	08 f4       	brcc	.+2      	; 0x9e44 <get_fat.isra.9+0x18>
    9e42:	9f c0       	rjmp	.+318    	; 0x9f82 <get_fat.isra.9+0x156>
    9e44:	fc 01       	movw	r30, r24
    9e46:	01 8d       	ldd	r16, Z+25	; 0x19
    9e48:	12 8d       	ldd	r17, Z+26	; 0x1a
    9e4a:	23 8d       	ldd	r18, Z+27	; 0x1b
    9e4c:	34 8d       	ldd	r19, Z+28	; 0x1c
    9e4e:	40 17       	cp	r20, r16
    9e50:	51 07       	cpc	r21, r17
    9e52:	62 07       	cpc	r22, r18
    9e54:	73 07       	cpc	r23, r19
    9e56:	08 f0       	brcs	.+2      	; 0x9e5a <get_fat.isra.9+0x2e>
    9e58:	94 c0       	rjmp	.+296    	; 0x9f82 <get_fat.isra.9+0x156>
    9e5a:	6a 01       	movw	r12, r20
    9e5c:	7b 01       	movw	r14, r22
    9e5e:	8c 01       	movw	r16, r24
    9e60:	80 81       	ld	r24, Z
    9e62:	82 30       	cpi	r24, 0x02	; 2
    9e64:	09 f4       	brne	.+2      	; 0x9e68 <get_fat.isra.9+0x3c>
    9e66:	4b c0       	rjmp	.+150    	; 0x9efe <get_fat.isra.9+0xd2>
    9e68:	83 30       	cpi	r24, 0x03	; 3
    9e6a:	09 f4       	brne	.+2      	; 0x9e6e <get_fat.isra.9+0x42>
    9e6c:	67 c0       	rjmp	.+206    	; 0x9f3c <get_fat.isra.9+0x110>
    9e6e:	81 30       	cpi	r24, 0x01	; 1
    9e70:	09 f0       	breq	.+2      	; 0x9e74 <get_fat.isra.9+0x48>
    9e72:	87 c0       	rjmp	.+270    	; 0x9f82 <get_fat.isra.9+0x156>
    9e74:	ea 01       	movw	r28, r20
    9e76:	d6 95       	lsr	r29
    9e78:	c7 95       	ror	r28
    9e7a:	cc 0d       	add	r28, r12
    9e7c:	dd 1d       	adc	r29, r13
    9e7e:	ce 01       	movw	r24, r28
    9e80:	89 2f       	mov	r24, r25
    9e82:	99 27       	eor	r25, r25
    9e84:	86 95       	lsr	r24
    9e86:	45 a1       	ldd	r20, Z+37	; 0x25
    9e88:	56 a1       	ldd	r21, Z+38	; 0x26
    9e8a:	67 a1       	ldd	r22, Z+39	; 0x27
    9e8c:	70 a5       	ldd	r23, Z+40	; 0x28
    9e8e:	48 0f       	add	r20, r24
    9e90:	59 1f       	adc	r21, r25
    9e92:	61 1d       	adc	r22, r1
    9e94:	71 1d       	adc	r23, r1
    9e96:	cf 01       	movw	r24, r30
    9e98:	fb db       	rcall	.-2058   	; 0x9690 <move_window>
    9e9a:	89 2b       	or	r24, r25
    9e9c:	21 f0       	breq	.+8      	; 0x9ea6 <get_fat.isra.9+0x7a>
    9e9e:	6f ef       	ldi	r22, 0xFF	; 255
    9ea0:	7f ef       	ldi	r23, 0xFF	; 255
    9ea2:	cb 01       	movw	r24, r22
    9ea4:	72 c0       	rjmp	.+228    	; 0x9f8a <get_fat.isra.9+0x15e>
    9ea6:	5e 01       	movw	r10, r28
    9ea8:	ff ef       	ldi	r31, 0xFF	; 255
    9eaa:	af 1a       	sub	r10, r31
    9eac:	bf 0a       	sbc	r11, r31
    9eae:	d1 70       	andi	r29, 0x01	; 1
    9eb0:	c0 0f       	add	r28, r16
    9eb2:	d1 1f       	adc	r29, r17
    9eb4:	cd a9       	ldd	r28, Y+53	; 0x35
    9eb6:	c5 01       	movw	r24, r10
    9eb8:	89 2f       	mov	r24, r25
    9eba:	99 27       	eor	r25, r25
    9ebc:	86 95       	lsr	r24
    9ebe:	f8 01       	movw	r30, r16
    9ec0:	45 a1       	ldd	r20, Z+37	; 0x25
    9ec2:	56 a1       	ldd	r21, Z+38	; 0x26
    9ec4:	67 a1       	ldd	r22, Z+39	; 0x27
    9ec6:	70 a5       	ldd	r23, Z+40	; 0x28
    9ec8:	48 0f       	add	r20, r24
    9eca:	59 1f       	adc	r21, r25
    9ecc:	61 1d       	adc	r22, r1
    9ece:	71 1d       	adc	r23, r1
    9ed0:	c8 01       	movw	r24, r16
    9ed2:	de db       	rcall	.-2116   	; 0x9690 <move_window>
    9ed4:	89 2b       	or	r24, r25
    9ed6:	19 f7       	brne	.-58     	; 0x9e9e <get_fat.isra.9+0x72>
    9ed8:	f1 e0       	ldi	r31, 0x01	; 1
    9eda:	bf 22       	and	r11, r31
    9edc:	f8 01       	movw	r30, r16
    9ede:	ea 0d       	add	r30, r10
    9ee0:	fb 1d       	adc	r31, r11
    9ee2:	85 a9       	ldd	r24, Z+53	; 0x35
    9ee4:	6c 2f       	mov	r22, r28
    9ee6:	70 e0       	ldi	r23, 0x00	; 0
    9ee8:	78 2b       	or	r23, r24
    9eea:	c0 fe       	sbrs	r12, 0
    9eec:	06 c0       	rjmp	.+12     	; 0x9efa <get_fat.isra.9+0xce>
    9eee:	54 e0       	ldi	r21, 0x04	; 4
    9ef0:	76 95       	lsr	r23
    9ef2:	67 95       	ror	r22
    9ef4:	5a 95       	dec	r21
    9ef6:	e1 f7       	brne	.-8      	; 0x9ef0 <get_fat.isra.9+0xc4>
    9ef8:	1e c0       	rjmp	.+60     	; 0x9f36 <get_fat.isra.9+0x10a>
    9efa:	7f 70       	andi	r23, 0x0F	; 15
    9efc:	1c c0       	rjmp	.+56     	; 0x9f36 <get_fat.isra.9+0x10a>
    9efe:	77 27       	eor	r23, r23
    9f00:	6f 2d       	mov	r22, r15
    9f02:	5e 2d       	mov	r21, r14
    9f04:	4d 2d       	mov	r20, r13
    9f06:	85 a1       	ldd	r24, Z+37	; 0x25
    9f08:	96 a1       	ldd	r25, Z+38	; 0x26
    9f0a:	a7 a1       	ldd	r26, Z+39	; 0x27
    9f0c:	b0 a5       	ldd	r27, Z+40	; 0x28
    9f0e:	48 0f       	add	r20, r24
    9f10:	59 1f       	adc	r21, r25
    9f12:	6a 1f       	adc	r22, r26
    9f14:	7b 1f       	adc	r23, r27
    9f16:	cf 01       	movw	r24, r30
    9f18:	bb db       	rcall	.-2186   	; 0x9690 <move_window>
    9f1a:	89 2b       	or	r24, r25
    9f1c:	09 f0       	breq	.+2      	; 0x9f20 <get_fat.isra.9+0xf4>
    9f1e:	bf cf       	rjmp	.-130    	; 0x9e9e <get_fat.isra.9+0x72>
    9f20:	cc 0c       	add	r12, r12
    9f22:	dd 1c       	adc	r13, r13
    9f24:	e8 94       	clt
    9f26:	c0 f8       	bld	r12, 0
    9f28:	f1 e0       	ldi	r31, 0x01	; 1
    9f2a:	df 22       	and	r13, r31
    9f2c:	f8 01       	movw	r30, r16
    9f2e:	ec 0d       	add	r30, r12
    9f30:	fd 1d       	adc	r31, r13
    9f32:	65 a9       	ldd	r22, Z+53	; 0x35
    9f34:	76 a9       	ldd	r23, Z+54	; 0x36
    9f36:	80 e0       	ldi	r24, 0x00	; 0
    9f38:	90 e0       	ldi	r25, 0x00	; 0
    9f3a:	27 c0       	rjmp	.+78     	; 0x9f8a <get_fat.isra.9+0x15e>
    9f3c:	85 a1       	ldd	r24, Z+37	; 0x25
    9f3e:	96 a1       	ldd	r25, Z+38	; 0x26
    9f40:	a7 a1       	ldd	r26, Z+39	; 0x27
    9f42:	b0 a5       	ldd	r27, Z+40	; 0x28
    9f44:	27 e0       	ldi	r18, 0x07	; 7
    9f46:	76 95       	lsr	r23
    9f48:	67 95       	ror	r22
    9f4a:	57 95       	ror	r21
    9f4c:	47 95       	ror	r20
    9f4e:	2a 95       	dec	r18
    9f50:	d1 f7       	brne	.-12     	; 0x9f46 <get_fat.isra.9+0x11a>
    9f52:	48 0f       	add	r20, r24
    9f54:	59 1f       	adc	r21, r25
    9f56:	6a 1f       	adc	r22, r26
    9f58:	7b 1f       	adc	r23, r27
    9f5a:	cf 01       	movw	r24, r30
    9f5c:	99 db       	rcall	.-2254   	; 0x9690 <move_window>
    9f5e:	89 2b       	or	r24, r25
    9f60:	09 f0       	breq	.+2      	; 0x9f64 <get_fat.isra.9+0x138>
    9f62:	9d cf       	rjmp	.-198    	; 0x9e9e <get_fat.isra.9+0x72>
    9f64:	0b 5c       	subi	r16, 0xCB	; 203
    9f66:	1f 4f       	sbci	r17, 0xFF	; 255
    9f68:	cc 0c       	add	r12, r12
    9f6a:	dd 1c       	adc	r13, r13
    9f6c:	cc 0c       	add	r12, r12
    9f6e:	dd 1c       	adc	r13, r13
    9f70:	c6 01       	movw	r24, r12
    9f72:	8c 7f       	andi	r24, 0xFC	; 252
    9f74:	91 70       	andi	r25, 0x01	; 1
    9f76:	80 0f       	add	r24, r16
    9f78:	91 1f       	adc	r25, r17
    9f7a:	0e 94 86 47 	call	0x8f0c	; 0x8f0c <ld_dword>
    9f7e:	9f 70       	andi	r25, 0x0F	; 15
    9f80:	04 c0       	rjmp	.+8      	; 0x9f8a <get_fat.isra.9+0x15e>
    9f82:	61 e0       	ldi	r22, 0x01	; 1
    9f84:	70 e0       	ldi	r23, 0x00	; 0
    9f86:	80 e0       	ldi	r24, 0x00	; 0
    9f88:	90 e0       	ldi	r25, 0x00	; 0
    9f8a:	cd b7       	in	r28, 0x3d	; 61
    9f8c:	de b7       	in	r29, 0x3e	; 62
    9f8e:	ea e0       	ldi	r30, 0x0A	; 10
    9f90:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__+0x10>

00009f94 <dir_sdi>:
    9f94:	a0 e0       	ldi	r26, 0x00	; 0
    9f96:	b0 e0       	ldi	r27, 0x00	; 0
    9f98:	e0 ed       	ldi	r30, 0xD0	; 208
    9f9a:	ff e4       	ldi	r31, 0x4F	; 79
    9f9c:	0c 94 b5 e6 	jmp	0x1cd6a	; 0x1cd6a <__prologue_saves__+0x4>
    9fa0:	ec 01       	movw	r28, r24
    9fa2:	6a 01       	movw	r12, r20
    9fa4:	7b 01       	movw	r14, r22
    9fa6:	41 15       	cp	r20, r1
    9fa8:	51 05       	cpc	r21, r1
    9faa:	80 e2       	ldi	r24, 0x20	; 32
    9fac:	68 07       	cpc	r22, r24
    9fae:	71 05       	cpc	r23, r1
    9fb0:	18 f0       	brcs	.+6      	; 0x9fb8 <dir_sdi+0x24>
    9fb2:	82 e0       	ldi	r24, 0x02	; 2
    9fb4:	90 e0       	ldi	r25, 0x00	; 0
    9fb6:	aa c0       	rjmp	.+340    	; 0xa10c <dir_sdi+0x178>
    9fb8:	db 01       	movw	r26, r22
    9fba:	ca 01       	movw	r24, r20
    9fbc:	8f 71       	andi	r24, 0x1F	; 31
    9fbe:	99 27       	eor	r25, r25
    9fc0:	aa 27       	eor	r26, r26
    9fc2:	bb 27       	eor	r27, r27
    9fc4:	89 2b       	or	r24, r25
    9fc6:	8a 2b       	or	r24, r26
    9fc8:	8b 2b       	or	r24, r27
    9fca:	99 f7       	brne	.-26     	; 0x9fb2 <dir_sdi+0x1e>
    9fcc:	08 81       	ld	r16, Y
    9fce:	19 81       	ldd	r17, Y+1	; 0x01
    9fd0:	4e 87       	std	Y+14, r20	; 0x0e
    9fd2:	5f 87       	std	Y+15, r21	; 0x0f
    9fd4:	68 8b       	std	Y+16, r22	; 0x10
    9fd6:	79 8b       	std	Y+17, r23	; 0x11
    9fd8:	8e 80       	ldd	r8, Y+6	; 0x06
    9fda:	9f 80       	ldd	r9, Y+7	; 0x07
    9fdc:	a8 84       	ldd	r10, Y+8	; 0x08
    9fde:	b9 84       	ldd	r11, Y+9	; 0x09
    9fe0:	81 14       	cp	r8, r1
    9fe2:	91 04       	cpc	r9, r1
    9fe4:	a1 04       	cpc	r10, r1
    9fe6:	b1 04       	cpc	r11, r1
    9fe8:	51 f5       	brne	.+84     	; 0xa03e <dir_sdi+0xaa>
    9fea:	f8 01       	movw	r30, r16
    9fec:	80 81       	ld	r24, Z
    9fee:	83 30       	cpi	r24, 0x03	; 3
    9ff0:	40 f0       	brcs	.+16     	; 0xa002 <dir_sdi+0x6e>
    9ff2:	81 a5       	ldd	r24, Z+41	; 0x29
    9ff4:	92 a5       	ldd	r25, Z+42	; 0x2a
    9ff6:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9ff8:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9ffa:	00 97       	sbiw	r24, 0x00	; 0
    9ffc:	a1 05       	cpc	r26, r1
    9ffe:	b1 05       	cpc	r27, r1
    a000:	e1 f4       	brne	.+56     	; 0xa03a <dir_sdi+0xa6>
    a002:	f8 01       	movw	r30, r16
    a004:	87 81       	ldd	r24, Z+7	; 0x07
    a006:	90 85       	ldd	r25, Z+8	; 0x08
    a008:	a0 e0       	ldi	r26, 0x00	; 0
    a00a:	b0 e0       	ldi	r27, 0x00	; 0
    a00c:	b7 01       	movw	r22, r14
    a00e:	a6 01       	movw	r20, r12
    a010:	25 e0       	ldi	r18, 0x05	; 5
    a012:	76 95       	lsr	r23
    a014:	67 95       	ror	r22
    a016:	57 95       	ror	r21
    a018:	47 95       	ror	r20
    a01a:	2a 95       	dec	r18
    a01c:	d1 f7       	brne	.-12     	; 0xa012 <dir_sdi+0x7e>
    a01e:	48 17       	cp	r20, r24
    a020:	59 07       	cpc	r21, r25
    a022:	6a 07       	cpc	r22, r26
    a024:	7b 07       	cpc	r23, r27
    a026:	28 f6       	brcc	.-118    	; 0x9fb2 <dir_sdi+0x1e>
    a028:	81 a5       	ldd	r24, Z+41	; 0x29
    a02a:	92 a5       	ldd	r25, Z+42	; 0x2a
    a02c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a02e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a030:	8e 8b       	std	Y+22, r24	; 0x16
    a032:	9f 8b       	std	Y+23, r25	; 0x17
    a034:	a8 8f       	std	Y+24, r26	; 0x18
    a036:	b9 8f       	std	Y+25, r27	; 0x19
    a038:	3e c0       	rjmp	.+124    	; 0xa0b6 <dir_sdi+0x122>
    a03a:	4c 01       	movw	r8, r24
    a03c:	5d 01       	movw	r10, r26
    a03e:	f8 01       	movw	r30, r16
    a040:	41 84       	ldd	r4, Z+9	; 0x09
    a042:	52 84       	ldd	r5, Z+10	; 0x0a
    a044:	61 2c       	mov	r6, r1
    a046:	71 2c       	mov	r7, r1
    a048:	39 e0       	ldi	r19, 0x09	; 9
    a04a:	44 0c       	add	r4, r4
    a04c:	55 1c       	adc	r5, r5
    a04e:	66 1c       	adc	r6, r6
    a050:	77 1c       	adc	r7, r7
    a052:	3a 95       	dec	r19
    a054:	d1 f7       	brne	.-12     	; 0xa04a <dir_sdi+0xb6>
    a056:	b5 01       	movw	r22, r10
    a058:	a4 01       	movw	r20, r8
    a05a:	c4 14       	cp	r12, r4
    a05c:	d5 04       	cpc	r13, r5
    a05e:	e6 04       	cpc	r14, r6
    a060:	f7 04       	cpc	r15, r7
    a062:	10 f1       	brcs	.+68     	; 0xa0a8 <dir_sdi+0x114>
    a064:	88 81       	ld	r24, Y
    a066:	99 81       	ldd	r25, Y+1	; 0x01
    a068:	e1 de       	rcall	.-574    	; 0x9e2c <get_fat.isra.9>
    a06a:	4b 01       	movw	r8, r22
    a06c:	5c 01       	movw	r10, r24
    a06e:	6f 3f       	cpi	r22, 0xFF	; 255
    a070:	7f 4f       	sbci	r23, 0xFF	; 255
    a072:	8f 4f       	sbci	r24, 0xFF	; 255
    a074:	9f 4f       	sbci	r25, 0xFF	; 255
    a076:	09 f4       	brne	.+2      	; 0xa07a <dir_sdi+0xe6>
    a078:	47 c0       	rjmp	.+142    	; 0xa108 <dir_sdi+0x174>
    a07a:	82 e0       	ldi	r24, 0x02	; 2
    a07c:	88 16       	cp	r8, r24
    a07e:	91 04       	cpc	r9, r1
    a080:	a1 04       	cpc	r10, r1
    a082:	b1 04       	cpc	r11, r1
    a084:	08 f4       	brcc	.+2      	; 0xa088 <dir_sdi+0xf4>
    a086:	95 cf       	rjmp	.-214    	; 0x9fb2 <dir_sdi+0x1e>
    a088:	f8 01       	movw	r30, r16
    a08a:	81 8d       	ldd	r24, Z+25	; 0x19
    a08c:	92 8d       	ldd	r25, Z+26	; 0x1a
    a08e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a090:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a092:	88 16       	cp	r8, r24
    a094:	99 06       	cpc	r9, r25
    a096:	aa 06       	cpc	r10, r26
    a098:	bb 06       	cpc	r11, r27
    a09a:	08 f0       	brcs	.+2      	; 0xa09e <dir_sdi+0x10a>
    a09c:	8a cf       	rjmp	.-236    	; 0x9fb2 <dir_sdi+0x1e>
    a09e:	c4 18       	sub	r12, r4
    a0a0:	d5 08       	sbc	r13, r5
    a0a2:	e6 08       	sbc	r14, r6
    a0a4:	f7 08       	sbc	r15, r7
    a0a6:	d7 cf       	rjmp	.-82     	; 0xa056 <dir_sdi+0xc2>
    a0a8:	c8 01       	movw	r24, r16
    a0aa:	0e 94 b9 47 	call	0x8f72	; 0x8f72 <clst2sect>
    a0ae:	6e 8b       	std	Y+22, r22	; 0x16
    a0b0:	7f 8b       	std	Y+23, r23	; 0x17
    a0b2:	88 8f       	std	Y+24, r24	; 0x18
    a0b4:	99 8f       	std	Y+25, r25	; 0x19
    a0b6:	8a 8a       	std	Y+18, r8	; 0x12
    a0b8:	9b 8a       	std	Y+19, r9	; 0x13
    a0ba:	ac 8a       	std	Y+20, r10	; 0x14
    a0bc:	bd 8a       	std	Y+21, r11	; 0x15
    a0be:	8e 89       	ldd	r24, Y+22	; 0x16
    a0c0:	9f 89       	ldd	r25, Y+23	; 0x17
    a0c2:	a8 8d       	ldd	r26, Y+24	; 0x18
    a0c4:	b9 8d       	ldd	r27, Y+25	; 0x19
    a0c6:	00 97       	sbiw	r24, 0x00	; 0
    a0c8:	a1 05       	cpc	r26, r1
    a0ca:	b1 05       	cpc	r27, r1
    a0cc:	09 f4       	brne	.+2      	; 0xa0d0 <dir_sdi+0x13c>
    a0ce:	71 cf       	rjmp	.-286    	; 0x9fb2 <dir_sdi+0x1e>
    a0d0:	b7 01       	movw	r22, r14
    a0d2:	a6 01       	movw	r20, r12
    a0d4:	29 e0       	ldi	r18, 0x09	; 9
    a0d6:	76 95       	lsr	r23
    a0d8:	67 95       	ror	r22
    a0da:	57 95       	ror	r21
    a0dc:	47 95       	ror	r20
    a0de:	2a 95       	dec	r18
    a0e0:	d1 f7       	brne	.-12     	; 0xa0d6 <dir_sdi+0x142>
    a0e2:	84 0f       	add	r24, r20
    a0e4:	95 1f       	adc	r25, r21
    a0e6:	a6 1f       	adc	r26, r22
    a0e8:	b7 1f       	adc	r27, r23
    a0ea:	8e 8b       	std	Y+22, r24	; 0x16
    a0ec:	9f 8b       	std	Y+23, r25	; 0x17
    a0ee:	a8 8f       	std	Y+24, r26	; 0x18
    a0f0:	b9 8f       	std	Y+25, r27	; 0x19
    a0f2:	0b 5c       	subi	r16, 0xCB	; 203
    a0f4:	1f 4f       	sbci	r17, 0xFF	; 255
    a0f6:	f1 e0       	ldi	r31, 0x01	; 1
    a0f8:	df 22       	and	r13, r31
    a0fa:	c0 0e       	add	r12, r16
    a0fc:	d1 1e       	adc	r13, r17
    a0fe:	db 8e       	std	Y+27, r13	; 0x1b
    a100:	ca 8e       	std	Y+26, r12	; 0x1a
    a102:	80 e0       	ldi	r24, 0x00	; 0
    a104:	90 e0       	ldi	r25, 0x00	; 0
    a106:	02 c0       	rjmp	.+4      	; 0xa10c <dir_sdi+0x178>
    a108:	81 e0       	ldi	r24, 0x01	; 1
    a10a:	90 e0       	ldi	r25, 0x00	; 0
    a10c:	cd b7       	in	r28, 0x3d	; 61
    a10e:	de b7       	in	r29, 0x3e	; 62
    a110:	e0 e1       	ldi	r30, 0x10	; 16
    a112:	0c 94 d1 e6 	jmp	0x1cda2	; 0x1cda2 <__epilogue_restores__+0x4>

0000a116 <create_chain>:
    a116:	a0 e0       	ldi	r26, 0x00	; 0
    a118:	b0 e0       	ldi	r27, 0x00	; 0
    a11a:	e1 e9       	ldi	r30, 0x91	; 145
    a11c:	f0 e5       	ldi	r31, 0x50	; 80
    a11e:	0c 94 b5 e6 	jmp	0x1cd6a	; 0x1cd6a <__prologue_saves__+0x4>
    a122:	8c 01       	movw	r16, r24
    a124:	2a 01       	movw	r4, r20
    a126:	3b 01       	movw	r6, r22
    a128:	fc 01       	movw	r30, r24
    a12a:	c0 81       	ld	r28, Z
    a12c:	d1 81       	ldd	r29, Z+1	; 0x01
    a12e:	41 15       	cp	r20, r1
    a130:	51 05       	cpc	r21, r1
    a132:	61 05       	cpc	r22, r1
    a134:	71 05       	cpc	r23, r1
    a136:	99 f4       	brne	.+38     	; 0xa15e <create_chain+0x48>
    a138:	8d 84       	ldd	r8, Y+13	; 0x0d
    a13a:	9e 84       	ldd	r9, Y+14	; 0x0e
    a13c:	af 84       	ldd	r10, Y+15	; 0x0f
    a13e:	b8 88       	ldd	r11, Y+16	; 0x10
    a140:	81 14       	cp	r8, r1
    a142:	91 04       	cpc	r9, r1
    a144:	a1 04       	cpc	r10, r1
    a146:	b1 04       	cpc	r11, r1
    a148:	51 f1       	breq	.+84     	; 0xa19e <create_chain+0x88>
    a14a:	89 8d       	ldd	r24, Y+25	; 0x19
    a14c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a14e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a150:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a152:	88 16       	cp	r8, r24
    a154:	99 06       	cpc	r9, r25
    a156:	aa 06       	cpc	r10, r26
    a158:	bb 06       	cpc	r11, r27
    a15a:	28 f1       	brcs	.+74     	; 0xa1a6 <create_chain+0x90>
    a15c:	20 c0       	rjmp	.+64     	; 0xa19e <create_chain+0x88>
    a15e:	ce 01       	movw	r24, r28
    a160:	65 de       	rcall	.-822    	; 0x9e2c <get_fat.isra.9>
    a162:	62 30       	cpi	r22, 0x02	; 2
    a164:	71 05       	cpc	r23, r1
    a166:	81 05       	cpc	r24, r1
    a168:	91 05       	cpc	r25, r1
    a16a:	08 f4       	brcc	.+2      	; 0xa16e <create_chain+0x58>
    a16c:	ea c0       	rjmp	.+468    	; 0xa342 <create_chain+0x22c>
    a16e:	6f 3f       	cpi	r22, 0xFF	; 255
    a170:	ff ef       	ldi	r31, 0xFF	; 255
    a172:	7f 07       	cpc	r23, r31
    a174:	8f 07       	cpc	r24, r31
    a176:	9f 07       	cpc	r25, r31
    a178:	29 f4       	brne	.+10     	; 0xa184 <create_chain+0x6e>
    a17a:	4f ef       	ldi	r20, 0xFF	; 255
    a17c:	3f ef       	ldi	r19, 0xFF	; 255
    a17e:	2f ef       	ldi	r18, 0xFF	; 255
    a180:	9f ef       	ldi	r25, 0xFF	; 255
    a182:	e7 c0       	rjmp	.+462    	; 0xa352 <create_chain+0x23c>
    a184:	c9 8c       	ldd	r12, Y+25	; 0x19
    a186:	da 8c       	ldd	r13, Y+26	; 0x1a
    a188:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a18a:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a18c:	6c 15       	cp	r22, r12
    a18e:	7d 05       	cpc	r23, r13
    a190:	8e 05       	cpc	r24, r14
    a192:	9f 05       	cpc	r25, r15
    a194:	08 f4       	brcc	.+2      	; 0xa198 <create_chain+0x82>
    a196:	da c0       	rjmp	.+436    	; 0xa34c <create_chain+0x236>
    a198:	53 01       	movw	r10, r6
    a19a:	42 01       	movw	r8, r4
    a19c:	04 c0       	rjmp	.+8      	; 0xa1a6 <create_chain+0x90>
    a19e:	81 2c       	mov	r8, r1
    a1a0:	91 2c       	mov	r9, r1
    a1a2:	54 01       	movw	r10, r8
    a1a4:	83 94       	inc	r8
    a1a6:	89 89       	ldd	r24, Y+17	; 0x11
    a1a8:	9a 89       	ldd	r25, Y+18	; 0x12
    a1aa:	ab 89       	ldd	r26, Y+19	; 0x13
    a1ac:	bc 89       	ldd	r27, Y+20	; 0x14
    a1ae:	89 2b       	or	r24, r25
    a1b0:	8a 2b       	or	r24, r26
    a1b2:	8b 2b       	or	r24, r27
    a1b4:	11 f4       	brne	.+4      	; 0xa1ba <create_chain+0xa4>
    a1b6:	40 e0       	ldi	r20, 0x00	; 0
    a1b8:	c5 c0       	rjmp	.+394    	; 0xa344 <create_chain+0x22e>
    a1ba:	84 14       	cp	r8, r4
    a1bc:	95 04       	cpc	r9, r5
    a1be:	a6 04       	cpc	r10, r6
    a1c0:	b7 04       	cpc	r11, r7
    a1c2:	09 f0       	breq	.+2      	; 0xa1c6 <create_chain+0xb0>
    a1c4:	46 c0       	rjmp	.+140    	; 0xa252 <create_chain+0x13c>
    a1c6:	75 01       	movw	r14, r10
    a1c8:	64 01       	movw	r12, r8
    a1ca:	2f ef       	ldi	r18, 0xFF	; 255
    a1cc:	c2 1a       	sub	r12, r18
    a1ce:	d2 0a       	sbc	r13, r18
    a1d0:	e2 0a       	sbc	r14, r18
    a1d2:	f2 0a       	sbc	r15, r18
    a1d4:	89 8d       	ldd	r24, Y+25	; 0x19
    a1d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a1d8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a1da:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a1dc:	c8 16       	cp	r12, r24
    a1de:	d9 06       	cpc	r13, r25
    a1e0:	ea 06       	cpc	r14, r26
    a1e2:	fb 06       	cpc	r15, r27
    a1e4:	28 f0       	brcs	.+10     	; 0xa1f0 <create_chain+0xda>
    a1e6:	92 e0       	ldi	r25, 0x02	; 2
    a1e8:	c9 2e       	mov	r12, r25
    a1ea:	d1 2c       	mov	r13, r1
    a1ec:	e1 2c       	mov	r14, r1
    a1ee:	f1 2c       	mov	r15, r1
    a1f0:	b7 01       	movw	r22, r14
    a1f2:	a6 01       	movw	r20, r12
    a1f4:	f8 01       	movw	r30, r16
    a1f6:	80 81       	ld	r24, Z
    a1f8:	91 81       	ldd	r25, Z+1	; 0x01
    a1fa:	18 de       	rcall	.-976    	; 0x9e2c <get_fat.isra.9>
    a1fc:	61 30       	cpi	r22, 0x01	; 1
    a1fe:	71 05       	cpc	r23, r1
    a200:	81 05       	cpc	r24, r1
    a202:	91 05       	cpc	r25, r1
    a204:	09 f4       	brne	.+2      	; 0xa208 <create_chain+0xf2>
    a206:	9d c0       	rjmp	.+314    	; 0xa342 <create_chain+0x22c>
    a208:	6f 3f       	cpi	r22, 0xFF	; 255
    a20a:	ff ef       	ldi	r31, 0xFF	; 255
    a20c:	7f 07       	cpc	r23, r31
    a20e:	8f 07       	cpc	r24, r31
    a210:	9f 07       	cpc	r25, r31
    a212:	09 f4       	brne	.+2      	; 0xa216 <create_chain+0x100>
    a214:	b2 cf       	rjmp	.-156    	; 0xa17a <create_chain+0x64>
    a216:	67 2b       	or	r22, r23
    a218:	68 2b       	or	r22, r24
    a21a:	69 2b       	or	r22, r25
    a21c:	a9 f0       	breq	.+42     	; 0xa248 <create_chain+0x132>
    a21e:	8d 85       	ldd	r24, Y+13	; 0x0d
    a220:	9e 85       	ldd	r25, Y+14	; 0x0e
    a222:	af 85       	ldd	r26, Y+15	; 0x0f
    a224:	b8 89       	ldd	r27, Y+16	; 0x10
    a226:	82 30       	cpi	r24, 0x02	; 2
    a228:	91 05       	cpc	r25, r1
    a22a:	a1 05       	cpc	r26, r1
    a22c:	b1 05       	cpc	r27, r1
    a22e:	88 f0       	brcs	.+34     	; 0xa252 <create_chain+0x13c>
    a230:	49 8d       	ldd	r20, Y+25	; 0x19
    a232:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a234:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a236:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a238:	84 17       	cp	r24, r20
    a23a:	95 07       	cpc	r25, r21
    a23c:	a6 07       	cpc	r26, r22
    a23e:	b7 07       	cpc	r27, r23
    a240:	40 f4       	brcc	.+16     	; 0xa252 <create_chain+0x13c>
    a242:	4c 01       	movw	r8, r24
    a244:	5d 01       	movw	r10, r26
    a246:	05 c0       	rjmp	.+10     	; 0xa252 <create_chain+0x13c>
    a248:	c1 14       	cp	r12, r1
    a24a:	d1 04       	cpc	r13, r1
    a24c:	e1 04       	cpc	r14, r1
    a24e:	f1 04       	cpc	r15, r1
    a250:	c9 f5       	brne	.+114    	; 0xa2c4 <create_chain+0x1ae>
    a252:	75 01       	movw	r14, r10
    a254:	64 01       	movw	r12, r8
    a256:	2f ef       	ldi	r18, 0xFF	; 255
    a258:	c2 1a       	sub	r12, r18
    a25a:	d2 0a       	sbc	r13, r18
    a25c:	e2 0a       	sbc	r14, r18
    a25e:	f2 0a       	sbc	r15, r18
    a260:	89 8d       	ldd	r24, Y+25	; 0x19
    a262:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a264:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a266:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a268:	c8 16       	cp	r12, r24
    a26a:	d9 06       	cpc	r13, r25
    a26c:	ea 06       	cpc	r14, r26
    a26e:	fb 06       	cpc	r15, r27
    a270:	60 f0       	brcs	.+24     	; 0xa28a <create_chain+0x174>
    a272:	82 e0       	ldi	r24, 0x02	; 2
    a274:	88 16       	cp	r8, r24
    a276:	91 04       	cpc	r9, r1
    a278:	a1 04       	cpc	r10, r1
    a27a:	b1 04       	cpc	r11, r1
    a27c:	08 f4       	brcc	.+2      	; 0xa280 <create_chain+0x16a>
    a27e:	9b cf       	rjmp	.-202    	; 0xa1b6 <create_chain+0xa0>
    a280:	82 e0       	ldi	r24, 0x02	; 2
    a282:	c8 2e       	mov	r12, r24
    a284:	d1 2c       	mov	r13, r1
    a286:	e1 2c       	mov	r14, r1
    a288:	f1 2c       	mov	r15, r1
    a28a:	b7 01       	movw	r22, r14
    a28c:	a6 01       	movw	r20, r12
    a28e:	f8 01       	movw	r30, r16
    a290:	80 81       	ld	r24, Z
    a292:	91 81       	ldd	r25, Z+1	; 0x01
    a294:	cb dd       	rcall	.-1130   	; 0x9e2c <get_fat.isra.9>
    a296:	61 15       	cp	r22, r1
    a298:	71 05       	cpc	r23, r1
    a29a:	81 05       	cpc	r24, r1
    a29c:	91 05       	cpc	r25, r1
    a29e:	91 f0       	breq	.+36     	; 0xa2c4 <create_chain+0x1ae>
    a2a0:	61 30       	cpi	r22, 0x01	; 1
    a2a2:	71 05       	cpc	r23, r1
    a2a4:	81 05       	cpc	r24, r1
    a2a6:	91 05       	cpc	r25, r1
    a2a8:	09 f4       	brne	.+2      	; 0xa2ac <create_chain+0x196>
    a2aa:	4b c0       	rjmp	.+150    	; 0xa342 <create_chain+0x22c>
    a2ac:	6f 3f       	cpi	r22, 0xFF	; 255
    a2ae:	7f 4f       	sbci	r23, 0xFF	; 255
    a2b0:	8f 4f       	sbci	r24, 0xFF	; 255
    a2b2:	9f 4f       	sbci	r25, 0xFF	; 255
    a2b4:	09 f4       	brne	.+2      	; 0xa2b8 <create_chain+0x1a2>
    a2b6:	61 cf       	rjmp	.-318    	; 0xa17a <create_chain+0x64>
    a2b8:	c8 14       	cp	r12, r8
    a2ba:	d9 04       	cpc	r13, r9
    a2bc:	ea 04       	cpc	r14, r10
    a2be:	fb 04       	cpc	r15, r11
    a2c0:	51 f6       	brne	.-108    	; 0xa256 <create_chain+0x140>
    a2c2:	79 cf       	rjmp	.-270    	; 0xa1b6 <create_chain+0xa0>
    a2c4:	0f ef       	ldi	r16, 0xFF	; 255
    a2c6:	1f ef       	ldi	r17, 0xFF	; 255
    a2c8:	98 01       	movw	r18, r16
    a2ca:	b7 01       	movw	r22, r14
    a2cc:	a6 01       	movw	r20, r12
    a2ce:	ce 01       	movw	r24, r28
    a2d0:	b4 dc       	rcall	.-1688   	; 0x9c3a <put_fat>
    a2d2:	00 97       	sbiw	r24, 0x00	; 0
    a2d4:	99 f5       	brne	.+102    	; 0xa33c <create_chain+0x226>
    a2d6:	41 14       	cp	r4, r1
    a2d8:	51 04       	cpc	r5, r1
    a2da:	61 04       	cpc	r6, r1
    a2dc:	71 04       	cpc	r7, r1
    a2de:	e9 f4       	brne	.+58     	; 0xa31a <create_chain+0x204>
    a2e0:	cd 86       	std	Y+13, r12	; 0x0d
    a2e2:	de 86       	std	Y+14, r13	; 0x0e
    a2e4:	ef 86       	std	Y+15, r14	; 0x0f
    a2e6:	f8 8a       	std	Y+16, r15	; 0x10
    a2e8:	89 89       	ldd	r24, Y+17	; 0x11
    a2ea:	9a 89       	ldd	r25, Y+18	; 0x12
    a2ec:	ab 89       	ldd	r26, Y+19	; 0x13
    a2ee:	bc 89       	ldd	r27, Y+20	; 0x14
    a2f0:	49 8d       	ldd	r20, Y+25	; 0x19
    a2f2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a2f4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a2f6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a2f8:	42 50       	subi	r20, 0x02	; 2
    a2fa:	51 09       	sbc	r21, r1
    a2fc:	61 09       	sbc	r22, r1
    a2fe:	71 09       	sbc	r23, r1
    a300:	48 17       	cp	r20, r24
    a302:	59 07       	cpc	r21, r25
    a304:	6a 07       	cpc	r22, r26
    a306:	7b 07       	cpc	r23, r27
    a308:	88 f0       	brcs	.+34     	; 0xa32c <create_chain+0x216>
    a30a:	01 97       	sbiw	r24, 0x01	; 1
    a30c:	a1 09       	sbc	r26, r1
    a30e:	b1 09       	sbc	r27, r1
    a310:	89 8b       	std	Y+17, r24	; 0x11
    a312:	9a 8b       	std	Y+18, r25	; 0x12
    a314:	ab 8b       	std	Y+19, r26	; 0x13
    a316:	bc 8b       	std	Y+20, r27	; 0x14
    a318:	09 c0       	rjmp	.+18     	; 0xa32c <create_chain+0x216>
    a31a:	97 01       	movw	r18, r14
    a31c:	86 01       	movw	r16, r12
    a31e:	b3 01       	movw	r22, r6
    a320:	a2 01       	movw	r20, r4
    a322:	ce 01       	movw	r24, r28
    a324:	8a dc       	rcall	.-1772   	; 0x9c3a <put_fat>
    a326:	00 97       	sbiw	r24, 0x00	; 0
    a328:	d9 f2       	breq	.-74     	; 0xa2e0 <create_chain+0x1ca>
    a32a:	08 c0       	rjmp	.+16     	; 0xa33c <create_chain+0x226>
    a32c:	8c 81       	ldd	r24, Y+4	; 0x04
    a32e:	81 60       	ori	r24, 0x01	; 1
    a330:	8c 83       	std	Y+4, r24	; 0x04
    a332:	4c 2d       	mov	r20, r12
    a334:	3d 2d       	mov	r19, r13
    a336:	2e 2d       	mov	r18, r14
    a338:	9f 2d       	mov	r25, r15
    a33a:	0b c0       	rjmp	.+22     	; 0xa352 <create_chain+0x23c>
    a33c:	01 97       	sbiw	r24, 0x01	; 1
    a33e:	09 f4       	brne	.+2      	; 0xa342 <create_chain+0x22c>
    a340:	1c cf       	rjmp	.-456    	; 0xa17a <create_chain+0x64>
    a342:	41 e0       	ldi	r20, 0x01	; 1
    a344:	30 e0       	ldi	r19, 0x00	; 0
    a346:	20 e0       	ldi	r18, 0x00	; 0
    a348:	90 e0       	ldi	r25, 0x00	; 0
    a34a:	03 c0       	rjmp	.+6      	; 0xa352 <create_chain+0x23c>
    a34c:	46 2f       	mov	r20, r22
    a34e:	37 2f       	mov	r19, r23
    a350:	28 2f       	mov	r18, r24
    a352:	64 2f       	mov	r22, r20
    a354:	73 2f       	mov	r23, r19
    a356:	82 2f       	mov	r24, r18
    a358:	cd b7       	in	r28, 0x3d	; 61
    a35a:	de b7       	in	r29, 0x3e	; 62
    a35c:	e0 e1       	ldi	r30, 0x10	; 16
    a35e:	0c 94 d1 e6 	jmp	0x1cda2	; 0x1cda2 <__epilogue_restores__+0x4>

0000a362 <remove_chain>:
    a362:	4f 92       	push	r4
    a364:	5f 92       	push	r5
    a366:	6f 92       	push	r6
    a368:	7f 92       	push	r7
    a36a:	af 92       	push	r10
    a36c:	bf 92       	push	r11
    a36e:	cf 92       	push	r12
    a370:	df 92       	push	r13
    a372:	ef 92       	push	r14
    a374:	ff 92       	push	r15
    a376:	0f 93       	push	r16
    a378:	1f 93       	push	r17
    a37a:	cf 93       	push	r28
    a37c:	df 93       	push	r29
    a37e:	5c 01       	movw	r10, r24
    a380:	6a 01       	movw	r12, r20
    a382:	7b 01       	movw	r14, r22
    a384:	b9 01       	movw	r22, r18
    a386:	a8 01       	movw	r20, r16
    a388:	22 e0       	ldi	r18, 0x02	; 2
    a38a:	c2 16       	cp	r12, r18
    a38c:	d1 04       	cpc	r13, r1
    a38e:	e1 04       	cpc	r14, r1
    a390:	f1 04       	cpc	r15, r1
    a392:	10 f4       	brcc	.+4      	; 0xa398 <remove_chain+0x36>
    a394:	22 e0       	ldi	r18, 0x02	; 2
    a396:	27 c0       	rjmp	.+78     	; 0xa3e6 <remove_chain+0x84>
    a398:	fc 01       	movw	r30, r24
    a39a:	c0 81       	ld	r28, Z
    a39c:	d1 81       	ldd	r29, Z+1	; 0x01
    a39e:	89 8d       	ldd	r24, Y+25	; 0x19
    a3a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a3a2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a3a4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a3a6:	c8 16       	cp	r12, r24
    a3a8:	d9 06       	cpc	r13, r25
    a3aa:	ea 06       	cpc	r14, r26
    a3ac:	fb 06       	cpc	r15, r27
    a3ae:	90 f7       	brcc	.-28     	; 0xa394 <remove_chain+0x32>
    a3b0:	41 15       	cp	r20, r1
    a3b2:	51 05       	cpc	r21, r1
    a3b4:	61 05       	cpc	r22, r1
    a3b6:	71 05       	cpc	r23, r1
    a3b8:	41 f0       	breq	.+16     	; 0xa3ca <remove_chain+0x68>
    a3ba:	0f ef       	ldi	r16, 0xFF	; 255
    a3bc:	1f ef       	ldi	r17, 0xFF	; 255
    a3be:	98 01       	movw	r18, r16
    a3c0:	ce 01       	movw	r24, r28
    a3c2:	3b dc       	rcall	.-1930   	; 0x9c3a <put_fat>
    a3c4:	00 97       	sbiw	r24, 0x00	; 0
    a3c6:	09 f0       	breq	.+2      	; 0xa3ca <remove_chain+0x68>
    a3c8:	4c c0       	rjmp	.+152    	; 0xa462 <remove_chain+0x100>
    a3ca:	b7 01       	movw	r22, r14
    a3cc:	a6 01       	movw	r20, r12
    a3ce:	f5 01       	movw	r30, r10
    a3d0:	80 81       	ld	r24, Z
    a3d2:	91 81       	ldd	r25, Z+1	; 0x01
    a3d4:	2b dd       	rcall	.-1450   	; 0x9e2c <get_fat.isra.9>
    a3d6:	2b 01       	movw	r4, r22
    a3d8:	3c 01       	movw	r6, r24
    a3da:	61 15       	cp	r22, r1
    a3dc:	71 05       	cpc	r23, r1
    a3de:	81 05       	cpc	r24, r1
    a3e0:	91 05       	cpc	r25, r1
    a3e2:	19 f4       	brne	.+6      	; 0xa3ea <remove_chain+0x88>
    a3e4:	20 e0       	ldi	r18, 0x00	; 0
    a3e6:	90 e0       	ldi	r25, 0x00	; 0
    a3e8:	3d c0       	rjmp	.+122    	; 0xa464 <remove_chain+0x102>
    a3ea:	61 30       	cpi	r22, 0x01	; 1
    a3ec:	71 05       	cpc	r23, r1
    a3ee:	81 05       	cpc	r24, r1
    a3f0:	91 05       	cpc	r25, r1
    a3f2:	81 f2       	breq	.-96     	; 0xa394 <remove_chain+0x32>
    a3f4:	6f 3f       	cpi	r22, 0xFF	; 255
    a3f6:	7f 4f       	sbci	r23, 0xFF	; 255
    a3f8:	8f 4f       	sbci	r24, 0xFF	; 255
    a3fa:	9f 4f       	sbci	r25, 0xFF	; 255
    a3fc:	81 f1       	breq	.+96     	; 0xa45e <remove_chain+0xfc>
    a3fe:	00 e0       	ldi	r16, 0x00	; 0
    a400:	10 e0       	ldi	r17, 0x00	; 0
    a402:	98 01       	movw	r18, r16
    a404:	b7 01       	movw	r22, r14
    a406:	a6 01       	movw	r20, r12
    a408:	ce 01       	movw	r24, r28
    a40a:	17 dc       	rcall	.-2002   	; 0x9c3a <put_fat>
    a40c:	00 97       	sbiw	r24, 0x00	; 0
    a40e:	49 f5       	brne	.+82     	; 0xa462 <remove_chain+0x100>
    a410:	89 89       	ldd	r24, Y+17	; 0x11
    a412:	9a 89       	ldd	r25, Y+18	; 0x12
    a414:	ab 89       	ldd	r26, Y+19	; 0x13
    a416:	bc 89       	ldd	r27, Y+20	; 0x14
    a418:	49 8d       	ldd	r20, Y+25	; 0x19
    a41a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a41c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a41e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a420:	6a 01       	movw	r12, r20
    a422:	7b 01       	movw	r14, r22
    a424:	e2 e0       	ldi	r30, 0x02	; 2
    a426:	ce 1a       	sub	r12, r30
    a428:	d1 08       	sbc	r13, r1
    a42a:	e1 08       	sbc	r14, r1
    a42c:	f1 08       	sbc	r15, r1
    a42e:	8c 15       	cp	r24, r12
    a430:	9d 05       	cpc	r25, r13
    a432:	ae 05       	cpc	r26, r14
    a434:	bf 05       	cpc	r27, r15
    a436:	50 f4       	brcc	.+20     	; 0xa44c <remove_chain+0xea>
    a438:	01 96       	adiw	r24, 0x01	; 1
    a43a:	a1 1d       	adc	r26, r1
    a43c:	b1 1d       	adc	r27, r1
    a43e:	89 8b       	std	Y+17, r24	; 0x11
    a440:	9a 8b       	std	Y+18, r25	; 0x12
    a442:	ab 8b       	std	Y+19, r26	; 0x13
    a444:	bc 8b       	std	Y+20, r27	; 0x14
    a446:	8c 81       	ldd	r24, Y+4	; 0x04
    a448:	81 60       	ori	r24, 0x01	; 1
    a44a:	8c 83       	std	Y+4, r24	; 0x04
    a44c:	73 01       	movw	r14, r6
    a44e:	62 01       	movw	r12, r4
    a450:	44 16       	cp	r4, r20
    a452:	55 06       	cpc	r5, r21
    a454:	66 06       	cpc	r6, r22
    a456:	77 06       	cpc	r7, r23
    a458:	08 f4       	brcc	.+2      	; 0xa45c <remove_chain+0xfa>
    a45a:	b7 cf       	rjmp	.-146    	; 0xa3ca <remove_chain+0x68>
    a45c:	c3 cf       	rjmp	.-122    	; 0xa3e4 <remove_chain+0x82>
    a45e:	21 e0       	ldi	r18, 0x01	; 1
    a460:	c2 cf       	rjmp	.-124    	; 0xa3e6 <remove_chain+0x84>
    a462:	28 2f       	mov	r18, r24
    a464:	82 2f       	mov	r24, r18
    a466:	df 91       	pop	r29
    a468:	cf 91       	pop	r28
    a46a:	1f 91       	pop	r17
    a46c:	0f 91       	pop	r16
    a46e:	ff 90       	pop	r15
    a470:	ef 90       	pop	r14
    a472:	df 90       	pop	r13
    a474:	cf 90       	pop	r12
    a476:	bf 90       	pop	r11
    a478:	af 90       	pop	r10
    a47a:	7f 90       	pop	r7
    a47c:	6f 90       	pop	r6
    a47e:	5f 90       	pop	r5
    a480:	4f 90       	pop	r4
    a482:	08 95       	ret

0000a484 <dir_next>:
    a484:	4f 92       	push	r4
    a486:	5f 92       	push	r5
    a488:	6f 92       	push	r6
    a48a:	7f 92       	push	r7
    a48c:	af 92       	push	r10
    a48e:	bf 92       	push	r11
    a490:	cf 92       	push	r12
    a492:	df 92       	push	r13
    a494:	ef 92       	push	r14
    a496:	ff 92       	push	r15
    a498:	0f 93       	push	r16
    a49a:	1f 93       	push	r17
    a49c:	cf 93       	push	r28
    a49e:	df 93       	push	r29
    a4a0:	ec 01       	movw	r28, r24
    a4a2:	08 81       	ld	r16, Y
    a4a4:	19 81       	ldd	r17, Y+1	; 0x01
    a4a6:	ce 84       	ldd	r12, Y+14	; 0x0e
    a4a8:	df 84       	ldd	r13, Y+15	; 0x0f
    a4aa:	e8 88       	ldd	r14, Y+16	; 0x10
    a4ac:	f9 88       	ldd	r15, Y+17	; 0x11
    a4ae:	80 e2       	ldi	r24, 0x20	; 32
    a4b0:	c8 0e       	add	r12, r24
    a4b2:	d1 1c       	adc	r13, r1
    a4b4:	e1 1c       	adc	r14, r1
    a4b6:	f1 1c       	adc	r15, r1
    a4b8:	c1 14       	cp	r12, r1
    a4ba:	d1 04       	cpc	r13, r1
    a4bc:	e0 e2       	ldi	r30, 0x20	; 32
    a4be:	ee 06       	cpc	r14, r30
    a4c0:	f1 04       	cpc	r15, r1
    a4c2:	20 f0       	brcs	.+8      	; 0xa4cc <dir_next+0x48>
    a4c4:	1e 8a       	std	Y+22, r1	; 0x16
    a4c6:	1f 8a       	std	Y+23, r1	; 0x17
    a4c8:	18 8e       	std	Y+24, r1	; 0x18
    a4ca:	19 8e       	std	Y+25, r1	; 0x19
    a4cc:	8e 89       	ldd	r24, Y+22	; 0x16
    a4ce:	9f 89       	ldd	r25, Y+23	; 0x17
    a4d0:	a8 8d       	ldd	r26, Y+24	; 0x18
    a4d2:	b9 8d       	ldd	r27, Y+25	; 0x19
    a4d4:	00 97       	sbiw	r24, 0x00	; 0
    a4d6:	a1 05       	cpc	r26, r1
    a4d8:	b1 05       	cpc	r27, r1
    a4da:	09 f4       	brne	.+2      	; 0xa4de <dir_next+0x5a>
    a4dc:	a7 c0       	rjmp	.+334    	; 0xa62c <dir_next+0x1a8>
    a4de:	5b 01       	movw	r10, r22
    a4e0:	b7 01       	movw	r22, r14
    a4e2:	a6 01       	movw	r20, r12
    a4e4:	51 70       	andi	r21, 0x01	; 1
    a4e6:	66 27       	eor	r22, r22
    a4e8:	77 27       	eor	r23, r23
    a4ea:	45 2b       	or	r20, r21
    a4ec:	46 2b       	or	r20, r22
    a4ee:	47 2b       	or	r20, r23
    a4f0:	09 f0       	breq	.+2      	; 0xa4f4 <dir_next+0x70>
    a4f2:	8d c0       	rjmp	.+282    	; 0xa60e <dir_next+0x18a>
    a4f4:	01 96       	adiw	r24, 0x01	; 1
    a4f6:	a1 1d       	adc	r26, r1
    a4f8:	b1 1d       	adc	r27, r1
    a4fa:	8e 8b       	std	Y+22, r24	; 0x16
    a4fc:	9f 8b       	std	Y+23, r25	; 0x17
    a4fe:	a8 8f       	std	Y+24, r26	; 0x18
    a500:	b9 8f       	std	Y+25, r27	; 0x19
    a502:	4a 89       	ldd	r20, Y+18	; 0x12
    a504:	5b 89       	ldd	r21, Y+19	; 0x13
    a506:	6c 89       	ldd	r22, Y+20	; 0x14
    a508:	7d 89       	ldd	r23, Y+21	; 0x15
    a50a:	f8 01       	movw	r30, r16
    a50c:	41 15       	cp	r20, r1
    a50e:	51 05       	cpc	r21, r1
    a510:	61 05       	cpc	r22, r1
    a512:	71 05       	cpc	r23, r1
    a514:	c1 f4       	brne	.+48     	; 0xa546 <dir_next+0xc2>
    a516:	87 81       	ldd	r24, Z+7	; 0x07
    a518:	90 85       	ldd	r25, Z+8	; 0x08
    a51a:	a0 e0       	ldi	r26, 0x00	; 0
    a51c:	b0 e0       	ldi	r27, 0x00	; 0
    a51e:	b7 01       	movw	r22, r14
    a520:	a6 01       	movw	r20, r12
    a522:	35 e0       	ldi	r19, 0x05	; 5
    a524:	76 95       	lsr	r23
    a526:	67 95       	ror	r22
    a528:	57 95       	ror	r21
    a52a:	47 95       	ror	r20
    a52c:	3a 95       	dec	r19
    a52e:	d1 f7       	brne	.-12     	; 0xa524 <dir_next+0xa0>
    a530:	48 17       	cp	r20, r24
    a532:	59 07       	cpc	r21, r25
    a534:	6a 07       	cpc	r22, r26
    a536:	7b 07       	cpc	r23, r27
    a538:	08 f4       	brcc	.+2      	; 0xa53c <dir_next+0xb8>
    a53a:	69 c0       	rjmp	.+210    	; 0xa60e <dir_next+0x18a>
    a53c:	1e 8a       	std	Y+22, r1	; 0x16
    a53e:	1f 8a       	std	Y+23, r1	; 0x17
    a540:	18 8e       	std	Y+24, r1	; 0x18
    a542:	19 8e       	std	Y+25, r1	; 0x19
    a544:	73 c0       	rjmp	.+230    	; 0xa62c <dir_next+0x1a8>
    a546:	81 85       	ldd	r24, Z+9	; 0x09
    a548:	92 85       	ldd	r25, Z+10	; 0x0a
    a54a:	01 97       	sbiw	r24, 0x01	; 1
    a54c:	a0 e0       	ldi	r26, 0x00	; 0
    a54e:	b0 e0       	ldi	r27, 0x00	; 0
    a550:	26 01       	movw	r4, r12
    a552:	37 01       	movw	r6, r14
    a554:	29 e0       	ldi	r18, 0x09	; 9
    a556:	76 94       	lsr	r7
    a558:	67 94       	ror	r6
    a55a:	57 94       	ror	r5
    a55c:	47 94       	ror	r4
    a55e:	2a 95       	dec	r18
    a560:	d1 f7       	brne	.-12     	; 0xa556 <dir_next+0xd2>
    a562:	84 21       	and	r24, r4
    a564:	95 21       	and	r25, r5
    a566:	a6 21       	and	r26, r6
    a568:	b7 21       	and	r27, r7
    a56a:	89 2b       	or	r24, r25
    a56c:	8a 2b       	or	r24, r26
    a56e:	8b 2b       	or	r24, r27
    a570:	09 f0       	breq	.+2      	; 0xa574 <dir_next+0xf0>
    a572:	4d c0       	rjmp	.+154    	; 0xa60e <dir_next+0x18a>
    a574:	c8 01       	movw	r24, r16
    a576:	5a dc       	rcall	.-1868   	; 0x9e2c <get_fat.isra.9>
    a578:	2b 01       	movw	r4, r22
    a57a:	3c 01       	movw	r6, r24
    a57c:	62 30       	cpi	r22, 0x02	; 2
    a57e:	71 05       	cpc	r23, r1
    a580:	81 05       	cpc	r24, r1
    a582:	91 05       	cpc	r25, r1
    a584:	18 f4       	brcc	.+6      	; 0xa58c <dir_next+0x108>
    a586:	82 e0       	ldi	r24, 0x02	; 2
    a588:	90 e0       	ldi	r25, 0x00	; 0
    a58a:	55 c0       	rjmp	.+170    	; 0xa636 <dir_next+0x1b2>
    a58c:	8f ef       	ldi	r24, 0xFF	; 255
    a58e:	48 16       	cp	r4, r24
    a590:	58 06       	cpc	r5, r24
    a592:	68 06       	cpc	r6, r24
    a594:	78 06       	cpc	r7, r24
    a596:	19 f4       	brne	.+6      	; 0xa59e <dir_next+0x11a>
    a598:	81 e0       	ldi	r24, 0x01	; 1
    a59a:	90 e0       	ldi	r25, 0x00	; 0
    a59c:	4c c0       	rjmp	.+152    	; 0xa636 <dir_next+0x1b2>
    a59e:	f8 01       	movw	r30, r16
    a5a0:	81 8d       	ldd	r24, Z+25	; 0x19
    a5a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    a5a4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a5a6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a5a8:	48 16       	cp	r4, r24
    a5aa:	59 06       	cpc	r5, r25
    a5ac:	6a 06       	cpc	r6, r26
    a5ae:	7b 06       	cpc	r7, r27
    a5b0:	08 f1       	brcs	.+66     	; 0xa5f4 <dir_next+0x170>
    a5b2:	ab 28       	or	r10, r11
    a5b4:	19 f2       	breq	.-122    	; 0xa53c <dir_next+0xb8>
    a5b6:	4a 89       	ldd	r20, Y+18	; 0x12
    a5b8:	5b 89       	ldd	r21, Y+19	; 0x13
    a5ba:	6c 89       	ldd	r22, Y+20	; 0x14
    a5bc:	7d 89       	ldd	r23, Y+21	; 0x15
    a5be:	ce 01       	movw	r24, r28
    a5c0:	aa dd       	rcall	.-1196   	; 0xa116 <create_chain>
    a5c2:	2b 01       	movw	r4, r22
    a5c4:	3c 01       	movw	r6, r24
    a5c6:	61 15       	cp	r22, r1
    a5c8:	71 05       	cpc	r23, r1
    a5ca:	81 05       	cpc	r24, r1
    a5cc:	91 05       	cpc	r25, r1
    a5ce:	89 f1       	breq	.+98     	; 0xa632 <dir_next+0x1ae>
    a5d0:	61 30       	cpi	r22, 0x01	; 1
    a5d2:	71 05       	cpc	r23, r1
    a5d4:	81 05       	cpc	r24, r1
    a5d6:	91 05       	cpc	r25, r1
    a5d8:	b1 f2       	breq	.-84     	; 0xa586 <dir_next+0x102>
    a5da:	8f ef       	ldi	r24, 0xFF	; 255
    a5dc:	48 16       	cp	r4, r24
    a5de:	58 06       	cpc	r5, r24
    a5e0:	68 06       	cpc	r6, r24
    a5e2:	78 06       	cpc	r7, r24
    a5e4:	c9 f2       	breq	.-78     	; 0xa598 <dir_next+0x114>
    a5e6:	b3 01       	movw	r22, r6
    a5e8:	a2 01       	movw	r20, r4
    a5ea:	c8 01       	movw	r24, r16
    a5ec:	0e 94 a0 4a 	call	0x9540	; 0x9540 <dir_clear>
    a5f0:	89 2b       	or	r24, r25
    a5f2:	91 f6       	brne	.-92     	; 0xa598 <dir_next+0x114>
    a5f4:	4a 8a       	std	Y+18, r4	; 0x12
    a5f6:	5b 8a       	std	Y+19, r5	; 0x13
    a5f8:	6c 8a       	std	Y+20, r6	; 0x14
    a5fa:	7d 8a       	std	Y+21, r7	; 0x15
    a5fc:	b3 01       	movw	r22, r6
    a5fe:	a2 01       	movw	r20, r4
    a600:	c8 01       	movw	r24, r16
    a602:	0e 94 b9 47 	call	0x8f72	; 0x8f72 <clst2sect>
    a606:	6e 8b       	std	Y+22, r22	; 0x16
    a608:	7f 8b       	std	Y+23, r23	; 0x17
    a60a:	88 8f       	std	Y+24, r24	; 0x18
    a60c:	99 8f       	std	Y+25, r25	; 0x19
    a60e:	ce 86       	std	Y+14, r12	; 0x0e
    a610:	df 86       	std	Y+15, r13	; 0x0f
    a612:	e8 8a       	std	Y+16, r14	; 0x10
    a614:	f9 8a       	std	Y+17, r15	; 0x11
    a616:	0b 5c       	subi	r16, 0xCB	; 203
    a618:	1f 4f       	sbci	r17, 0xFF	; 255
    a61a:	e1 e0       	ldi	r30, 0x01	; 1
    a61c:	de 22       	and	r13, r30
    a61e:	c0 0e       	add	r12, r16
    a620:	d1 1e       	adc	r13, r17
    a622:	db 8e       	std	Y+27, r13	; 0x1b
    a624:	ca 8e       	std	Y+26, r12	; 0x1a
    a626:	80 e0       	ldi	r24, 0x00	; 0
    a628:	90 e0       	ldi	r25, 0x00	; 0
    a62a:	05 c0       	rjmp	.+10     	; 0xa636 <dir_next+0x1b2>
    a62c:	84 e0       	ldi	r24, 0x04	; 4
    a62e:	90 e0       	ldi	r25, 0x00	; 0
    a630:	02 c0       	rjmp	.+4      	; 0xa636 <dir_next+0x1b2>
    a632:	87 e0       	ldi	r24, 0x07	; 7
    a634:	90 e0       	ldi	r25, 0x00	; 0
    a636:	df 91       	pop	r29
    a638:	cf 91       	pop	r28
    a63a:	1f 91       	pop	r17
    a63c:	0f 91       	pop	r16
    a63e:	ff 90       	pop	r15
    a640:	ef 90       	pop	r14
    a642:	df 90       	pop	r13
    a644:	cf 90       	pop	r12
    a646:	bf 90       	pop	r11
    a648:	af 90       	pop	r10
    a64a:	7f 90       	pop	r7
    a64c:	6f 90       	pop	r6
    a64e:	5f 90       	pop	r5
    a650:	4f 90       	pop	r4
    a652:	08 95       	ret

0000a654 <dir_alloc>:
    a654:	a0 e0       	ldi	r26, 0x00	; 0
    a656:	b0 e0       	ldi	r27, 0x00	; 0
    a658:	e0 e3       	ldi	r30, 0x30	; 48
    a65a:	f3 e5       	ldi	r31, 0x53	; 83
    a65c:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    a660:	ec 01       	movw	r28, r24
    a662:	6b 01       	movw	r12, r22
    a664:	e8 80       	ld	r14, Y
    a666:	f9 80       	ldd	r15, Y+1	; 0x01
    a668:	40 e0       	ldi	r20, 0x00	; 0
    a66a:	50 e0       	ldi	r21, 0x00	; 0
    a66c:	ba 01       	movw	r22, r20
    a66e:	92 dc       	rcall	.-1756   	; 0x9f94 <dir_sdi>
    a670:	00 97       	sbiw	r24, 0x00	; 0
    a672:	f9 f4       	brne	.+62     	; 0xa6b2 <dir_alloc+0x5e>
    a674:	00 e0       	ldi	r16, 0x00	; 0
    a676:	10 e0       	ldi	r17, 0x00	; 0
    a678:	4e 89       	ldd	r20, Y+22	; 0x16
    a67a:	5f 89       	ldd	r21, Y+23	; 0x17
    a67c:	68 8d       	ldd	r22, Y+24	; 0x18
    a67e:	79 8d       	ldd	r23, Y+25	; 0x19
    a680:	c7 01       	movw	r24, r14
    a682:	06 d8       	rcall	.-4084   	; 0x9690 <move_window>
    a684:	00 97       	sbiw	r24, 0x00	; 0
    a686:	a9 f4       	brne	.+42     	; 0xa6b2 <dir_alloc+0x5e>
    a688:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a68a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a68c:	20 81       	ld	r18, Z
    a68e:	25 3e       	cpi	r18, 0xE5	; 229
    a690:	11 f0       	breq	.+4      	; 0xa696 <dir_alloc+0x42>
    a692:	21 11       	cpse	r18, r1
    a694:	06 c0       	rjmp	.+12     	; 0xa6a2 <dir_alloc+0x4e>
    a696:	0f 5f       	subi	r16, 0xFF	; 255
    a698:	1f 4f       	sbci	r17, 0xFF	; 255
    a69a:	0c 15       	cp	r16, r12
    a69c:	1d 05       	cpc	r17, r13
    a69e:	19 f4       	brne	.+6      	; 0xa6a6 <dir_alloc+0x52>
    a6a0:	0d c0       	rjmp	.+26     	; 0xa6bc <dir_alloc+0x68>
    a6a2:	00 e0       	ldi	r16, 0x00	; 0
    a6a4:	10 e0       	ldi	r17, 0x00	; 0
    a6a6:	61 e0       	ldi	r22, 0x01	; 1
    a6a8:	70 e0       	ldi	r23, 0x00	; 0
    a6aa:	ce 01       	movw	r24, r28
    a6ac:	eb de       	rcall	.-554    	; 0xa484 <dir_next>
    a6ae:	00 97       	sbiw	r24, 0x00	; 0
    a6b0:	19 f3       	breq	.-58     	; 0xa678 <dir_alloc+0x24>
    a6b2:	84 30       	cpi	r24, 0x04	; 4
    a6b4:	91 05       	cpc	r25, r1
    a6b6:	11 f4       	brne	.+4      	; 0xa6bc <dir_alloc+0x68>
    a6b8:	87 e0       	ldi	r24, 0x07	; 7
    a6ba:	90 e0       	ldi	r25, 0x00	; 0
    a6bc:	cd b7       	in	r28, 0x3d	; 61
    a6be:	de b7       	in	r29, 0x3e	; 62
    a6c0:	e8 e0       	ldi	r30, 0x08	; 8
    a6c2:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0000a6c6 <dir_read>:
    a6c6:	a0 e0       	ldi	r26, 0x00	; 0
    a6c8:	b0 e0       	ldi	r27, 0x00	; 0
    a6ca:	e9 e6       	ldi	r30, 0x69	; 105
    a6cc:	f3 e5       	ldi	r31, 0x53	; 83
    a6ce:	0c 94 b9 e6 	jmp	0x1cd72	; 0x1cd72 <__prologue_saves__+0xc>
    a6d2:	ec 01       	movw	r28, r24
    a6d4:	7b 01       	movw	r14, r22
    a6d6:	a8 80       	ld	r10, Y
    a6d8:	b9 80       	ldd	r11, Y+1	; 0x01
    a6da:	dd 24       	eor	r13, r13
    a6dc:	da 94       	dec	r13
    a6de:	1f ef       	ldi	r17, 0xFF	; 255
    a6e0:	84 e0       	ldi	r24, 0x04	; 4
    a6e2:	90 e0       	ldi	r25, 0x00	; 0
    a6e4:	fd e0       	ldi	r31, 0x0D	; 13
    a6e6:	cf 2e       	mov	r12, r31
    a6e8:	4e 89       	ldd	r20, Y+22	; 0x16
    a6ea:	5f 89       	ldd	r21, Y+23	; 0x17
    a6ec:	68 8d       	ldd	r22, Y+24	; 0x18
    a6ee:	79 8d       	ldd	r23, Y+25	; 0x19
    a6f0:	41 15       	cp	r20, r1
    a6f2:	51 05       	cpc	r21, r1
    a6f4:	61 05       	cpc	r22, r1
    a6f6:	71 05       	cpc	r23, r1
    a6f8:	09 f4       	brne	.+2      	; 0xa6fc <dir_read+0x36>
    a6fa:	9a c0       	rjmp	.+308    	; 0xa830 <dir_read+0x16a>
    a6fc:	c5 01       	movw	r24, r10
    a6fe:	0e 94 48 4b 	call	0x9690	; 0x9690 <move_window>
    a702:	00 97       	sbiw	r24, 0x00	; 0
    a704:	09 f0       	breq	.+2      	; 0xa708 <dir_read+0x42>
    a706:	96 c0       	rjmp	.+300    	; 0xa834 <dir_read+0x16e>
    a708:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a70a:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a70c:	f4 01       	movw	r30, r8
    a70e:	00 81       	ld	r16, Z
    a710:	00 23       	and	r16, r16
    a712:	09 f4       	brne	.+2      	; 0xa716 <dir_read+0x50>
    a714:	97 c0       	rjmp	.+302    	; 0xa844 <dir_read+0x17e>
    a716:	83 85       	ldd	r24, Z+11	; 0x0b
    a718:	8f 73       	andi	r24, 0x3F	; 63
    a71a:	8c 83       	std	Y+4, r24	; 0x04
    a71c:	05 3e       	cpi	r16, 0xE5	; 229
    a71e:	09 f4       	brne	.+2      	; 0xa722 <dir_read+0x5c>
    a720:	7e c0       	rjmp	.+252    	; 0xa81e <dir_read+0x158>
    a722:	0e 32       	cpi	r16, 0x2E	; 46
    a724:	09 f4       	brne	.+2      	; 0xa728 <dir_read+0x62>
    a726:	7b c0       	rjmp	.+246    	; 0xa81e <dir_read+0x158>
    a728:	21 e0       	ldi	r18, 0x01	; 1
    a72a:	30 e0       	ldi	r19, 0x00	; 0
    a72c:	98 2f       	mov	r25, r24
    a72e:	9f 71       	andi	r25, 0x1F	; 31
    a730:	98 30       	cpi	r25, 0x08	; 8
    a732:	11 f0       	breq	.+4      	; 0xa738 <dir_read+0x72>
    a734:	20 e0       	ldi	r18, 0x00	; 0
    a736:	30 e0       	ldi	r19, 0x00	; 0
    a738:	2e 15       	cp	r18, r14
    a73a:	3f 05       	cpc	r19, r15
    a73c:	09 f0       	breq	.+2      	; 0xa740 <dir_read+0x7a>
    a73e:	6f c0       	rjmp	.+222    	; 0xa81e <dir_read+0x158>
    a740:	8f 30       	cpi	r24, 0x0F	; 15
    a742:	09 f0       	breq	.+2      	; 0xa746 <dir_read+0x80>
    a744:	5c c0       	rjmp	.+184    	; 0xa7fe <dir_read+0x138>
    a746:	06 ff       	sbrs	r16, 6
    a748:	0c c0       	rjmp	.+24     	; 0xa762 <dir_read+0x9c>
    a74a:	f4 01       	movw	r30, r8
    a74c:	85 85       	ldd	r24, Z+13	; 0x0d
    a74e:	0f 7b       	andi	r16, 0xBF	; 191
    a750:	4e 85       	ldd	r20, Y+14	; 0x0e
    a752:	5f 85       	ldd	r21, Y+15	; 0x0f
    a754:	68 89       	ldd	r22, Y+16	; 0x10
    a756:	79 89       	ldd	r23, Y+17	; 0x11
    a758:	48 a7       	std	Y+40, r20	; 0x28
    a75a:	59 a7       	std	Y+41, r21	; 0x29
    a75c:	6a a7       	std	Y+42, r22	; 0x2a
    a75e:	7b a7       	std	Y+43, r23	; 0x2b
    a760:	03 c0       	rjmp	.+6      	; 0xa768 <dir_read+0xa2>
    a762:	10 13       	cpse	r17, r16
    a764:	5c c0       	rjmp	.+184    	; 0xa81e <dir_read+0x158>
    a766:	8d 2d       	mov	r24, r13
    a768:	f4 01       	movw	r30, r8
    a76a:	d5 84       	ldd	r13, Z+13	; 0x0d
    a76c:	d8 12       	cpse	r13, r24
    a76e:	56 c0       	rjmp	.+172    	; 0xa81c <dir_read+0x156>
    a770:	82 8d       	ldd	r24, Z+26	; 0x1a
    a772:	93 8d       	ldd	r25, Z+27	; 0x1b
    a774:	89 2b       	or	r24, r25
    a776:	09 f0       	breq	.+2      	; 0xa77a <dir_read+0xb4>
    a778:	52 c0       	rjmp	.+164    	; 0xa81e <dir_read+0x158>
    a77a:	f5 01       	movw	r30, r10
    a77c:	63 85       	ldd	r22, Z+11	; 0x0b
    a77e:	74 85       	ldd	r23, Z+12	; 0x0c
    a780:	f4 01       	movw	r30, r8
    a782:	80 81       	ld	r24, Z
    a784:	90 e0       	ldi	r25, 0x00	; 0
    a786:	8f 7b       	andi	r24, 0xBF	; 191
    a788:	01 97       	sbiw	r24, 0x01	; 1
    a78a:	c8 9e       	mul	r12, r24
    a78c:	90 01       	movw	r18, r0
    a78e:	c9 9e       	mul	r12, r25
    a790:	30 0d       	add	r19, r0
    a792:	11 24       	eor	r1, r1
    a794:	ab ee       	ldi	r26, 0xEB	; 235
    a796:	b4 e0       	ldi	r27, 0x04	; 4
    a798:	81 e0       	ldi	r24, 0x01	; 1
    a79a:	90 e0       	ldi	r25, 0x00	; 0
    a79c:	4d 91       	ld	r20, X+
    a79e:	f4 01       	movw	r30, r8
    a7a0:	e4 0f       	add	r30, r20
    a7a2:	f1 1d       	adc	r31, r1
    a7a4:	40 81       	ld	r20, Z
    a7a6:	51 81       	ldd	r21, Z+1	; 0x01
    a7a8:	00 97       	sbiw	r24, 0x00	; 0
    a7aa:	81 f0       	breq	.+32     	; 0xa7cc <dir_read+0x106>
    a7ac:	2f 3f       	cpi	r18, 0xFF	; 255
    a7ae:	31 05       	cpc	r19, r1
    a7b0:	09 f0       	breq	.+2      	; 0xa7b4 <dir_read+0xee>
    a7b2:	a8 f5       	brcc	.+106    	; 0xa81e <dir_read+0x158>
    a7b4:	c9 01       	movw	r24, r18
    a7b6:	88 0f       	add	r24, r24
    a7b8:	99 1f       	adc	r25, r25
    a7ba:	86 0f       	add	r24, r22
    a7bc:	97 1f       	adc	r25, r23
    a7be:	fc 01       	movw	r30, r24
    a7c0:	51 83       	std	Z+1, r21	; 0x01
    a7c2:	40 83       	st	Z, r20
    a7c4:	ca 01       	movw	r24, r20
    a7c6:	2f 5f       	subi	r18, 0xFF	; 255
    a7c8:	3f 4f       	sbci	r19, 0xFF	; 255
    a7ca:	03 c0       	rjmp	.+6      	; 0xa7d2 <dir_read+0x10c>
    a7cc:	4f 3f       	cpi	r20, 0xFF	; 255
    a7ce:	5f 4f       	sbci	r21, 0xFF	; 255
    a7d0:	31 f5       	brne	.+76     	; 0xa81e <dir_read+0x158>
    a7d2:	44 e0       	ldi	r20, 0x04	; 4
    a7d4:	a8 3f       	cpi	r26, 0xF8	; 248
    a7d6:	b4 07       	cpc	r27, r20
    a7d8:	09 f7       	brne	.-62     	; 0xa79c <dir_read+0xd6>
    a7da:	f4 01       	movw	r30, r8
    a7dc:	40 81       	ld	r20, Z
    a7de:	46 ff       	sbrs	r20, 6
    a7e0:	2e c0       	rjmp	.+92     	; 0xa83e <dir_read+0x178>
    a7e2:	89 2b       	or	r24, r25
    a7e4:	61 f1       	breq	.+88     	; 0xa83e <dir_read+0x178>
    a7e6:	2f 3f       	cpi	r18, 0xFF	; 255
    a7e8:	31 05       	cpc	r19, r1
    a7ea:	09 f0       	breq	.+2      	; 0xa7ee <dir_read+0x128>
    a7ec:	c0 f4       	brcc	.+48     	; 0xa81e <dir_read+0x158>
    a7ee:	22 0f       	add	r18, r18
    a7f0:	33 1f       	adc	r19, r19
    a7f2:	fb 01       	movw	r30, r22
    a7f4:	e2 0f       	add	r30, r18
    a7f6:	f3 1f       	adc	r31, r19
    a7f8:	11 82       	std	Z+1, r1	; 0x01
    a7fa:	10 82       	st	Z, r1
    a7fc:	20 c0       	rjmp	.+64     	; 0xa83e <dir_read+0x178>
    a7fe:	11 11       	cpse	r17, r1
    a800:	05 c0       	rjmp	.+10     	; 0xa80c <dir_read+0x146>
    a802:	c4 01       	movw	r24, r8
    a804:	0e 94 1d 48 	call	0x903a	; 0x903a <sum_sfn>
    a808:	d8 16       	cp	r13, r24
    a80a:	f9 f0       	breq	.+62     	; 0xa84a <dir_read+0x184>
    a80c:	8f ef       	ldi	r24, 0xFF	; 255
    a80e:	9f ef       	ldi	r25, 0xFF	; 255
    a810:	dc 01       	movw	r26, r24
    a812:	88 a7       	std	Y+40, r24	; 0x28
    a814:	99 a7       	std	Y+41, r25	; 0x29
    a816:	aa a7       	std	Y+42, r26	; 0x2a
    a818:	bb a7       	std	Y+43, r27	; 0x2b
    a81a:	17 c0       	rjmp	.+46     	; 0xa84a <dir_read+0x184>
    a81c:	d8 2e       	mov	r13, r24
    a81e:	1f ef       	ldi	r17, 0xFF	; 255
    a820:	60 e0       	ldi	r22, 0x00	; 0
    a822:	70 e0       	ldi	r23, 0x00	; 0
    a824:	ce 01       	movw	r24, r28
    a826:	2e de       	rcall	.-932    	; 0xa484 <dir_next>
    a828:	00 97       	sbiw	r24, 0x00	; 0
    a82a:	09 f4       	brne	.+2      	; 0xa82e <dir_read+0x168>
    a82c:	5d cf       	rjmp	.-326    	; 0xa6e8 <dir_read+0x22>
    a82e:	02 c0       	rjmp	.+4      	; 0xa834 <dir_read+0x16e>
    a830:	00 97       	sbiw	r24, 0x00	; 0
    a832:	59 f0       	breq	.+22     	; 0xa84a <dir_read+0x184>
    a834:	1e 8a       	std	Y+22, r1	; 0x16
    a836:	1f 8a       	std	Y+23, r1	; 0x17
    a838:	18 8e       	std	Y+24, r1	; 0x18
    a83a:	19 8e       	std	Y+25, r1	; 0x19
    a83c:	08 c0       	rjmp	.+16     	; 0xa84e <dir_read+0x188>
    a83e:	1f ef       	ldi	r17, 0xFF	; 255
    a840:	10 0f       	add	r17, r16
    a842:	ee cf       	rjmp	.-36     	; 0xa820 <dir_read+0x15a>
    a844:	84 e0       	ldi	r24, 0x04	; 4
    a846:	90 e0       	ldi	r25, 0x00	; 0
    a848:	f5 cf       	rjmp	.-22     	; 0xa834 <dir_read+0x16e>
    a84a:	80 e0       	ldi	r24, 0x00	; 0
    a84c:	90 e0       	ldi	r25, 0x00	; 0
    a84e:	cd b7       	in	r28, 0x3d	; 61
    a850:	de b7       	in	r29, 0x3e	; 62
    a852:	ec e0       	ldi	r30, 0x0C	; 12
    a854:	0c 94 d5 e6 	jmp	0x1cdaa	; 0x1cdaa <__epilogue_restores__+0xc>

0000a858 <dir_remove>:
    a858:	a0 e0       	ldi	r26, 0x00	; 0
    a85a:	b0 e0       	ldi	r27, 0x00	; 0
    a85c:	e2 e3       	ldi	r30, 0x32	; 50
    a85e:	f4 e5       	ldi	r31, 0x54	; 84
    a860:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__+0x10>
    a864:	ec 01       	movw	r28, r24
    a866:	08 81       	ld	r16, Y
    a868:	19 81       	ldd	r17, Y+1	; 0x01
    a86a:	ce 84       	ldd	r12, Y+14	; 0x0e
    a86c:	df 84       	ldd	r13, Y+15	; 0x0f
    a86e:	e8 88       	ldd	r14, Y+16	; 0x10
    a870:	f9 88       	ldd	r15, Y+17	; 0x11
    a872:	48 a5       	ldd	r20, Y+40	; 0x28
    a874:	59 a5       	ldd	r21, Y+41	; 0x29
    a876:	6a a5       	ldd	r22, Y+42	; 0x2a
    a878:	7b a5       	ldd	r23, Y+43	; 0x2b
    a87a:	4f 3f       	cpi	r20, 0xFF	; 255
    a87c:	8f ef       	ldi	r24, 0xFF	; 255
    a87e:	58 07       	cpc	r21, r24
    a880:	68 07       	cpc	r22, r24
    a882:	78 07       	cpc	r23, r24
    a884:	29 f4       	brne	.+10     	; 0xa890 <dir_remove+0x38>
    a886:	85 ee       	ldi	r24, 0xE5	; 229
    a888:	b8 2e       	mov	r11, r24
    a88a:	aa 24       	eor	r10, r10
    a88c:	a3 94       	inc	r10
    a88e:	19 c0       	rjmp	.+50     	; 0xa8c2 <dir_remove+0x6a>
    a890:	ce 01       	movw	r24, r28
    a892:	80 db       	rcall	.-2304   	; 0x9f94 <dir_sdi>
    a894:	00 97       	sbiw	r24, 0x00	; 0
    a896:	19 f5       	brne	.+70     	; 0xa8de <dir_remove+0x86>
    a898:	f6 cf       	rjmp	.-20     	; 0xa886 <dir_remove+0x2e>
    a89a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a89c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a89e:	b0 82       	st	Z, r11
    a8a0:	f8 01       	movw	r30, r16
    a8a2:	a3 82       	std	Z+3, r10	; 0x03
    a8a4:	4e 85       	ldd	r20, Y+14	; 0x0e
    a8a6:	5f 85       	ldd	r21, Y+15	; 0x0f
    a8a8:	68 89       	ldd	r22, Y+16	; 0x10
    a8aa:	79 89       	ldd	r23, Y+17	; 0x11
    a8ac:	4c 15       	cp	r20, r12
    a8ae:	5d 05       	cpc	r21, r13
    a8b0:	6e 05       	cpc	r22, r14
    a8b2:	7f 05       	cpc	r23, r15
    a8b4:	a0 f4       	brcc	.+40     	; 0xa8de <dir_remove+0x86>
    a8b6:	60 e0       	ldi	r22, 0x00	; 0
    a8b8:	70 e0       	ldi	r23, 0x00	; 0
    a8ba:	ce 01       	movw	r24, r28
    a8bc:	e3 dd       	rcall	.-1082   	; 0xa484 <dir_next>
    a8be:	00 97       	sbiw	r24, 0x00	; 0
    a8c0:	49 f4       	brne	.+18     	; 0xa8d4 <dir_remove+0x7c>
    a8c2:	4e 89       	ldd	r20, Y+22	; 0x16
    a8c4:	5f 89       	ldd	r21, Y+23	; 0x17
    a8c6:	68 8d       	ldd	r22, Y+24	; 0x18
    a8c8:	79 8d       	ldd	r23, Y+25	; 0x19
    a8ca:	c8 01       	movw	r24, r16
    a8cc:	0e 94 48 4b 	call	0x9690	; 0x9690 <move_window>
    a8d0:	00 97       	sbiw	r24, 0x00	; 0
    a8d2:	19 f3       	breq	.-58     	; 0xa89a <dir_remove+0x42>
    a8d4:	84 30       	cpi	r24, 0x04	; 4
    a8d6:	91 05       	cpc	r25, r1
    a8d8:	11 f4       	brne	.+4      	; 0xa8de <dir_remove+0x86>
    a8da:	82 e0       	ldi	r24, 0x02	; 2
    a8dc:	90 e0       	ldi	r25, 0x00	; 0
    a8de:	cd b7       	in	r28, 0x3d	; 61
    a8e0:	de b7       	in	r29, 0x3e	; 62
    a8e2:	ea e0       	ldi	r30, 0x0A	; 10
    a8e4:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__+0x10>

0000a8e8 <dir_find>:
    a8e8:	ac e0       	ldi	r26, 0x0C	; 12
    a8ea:	b0 e0       	ldi	r27, 0x00	; 0
    a8ec:	ea e7       	ldi	r30, 0x7A	; 122
    a8ee:	f4 e5       	ldi	r31, 0x54	; 84
    a8f0:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    a8f4:	9c 87       	std	Y+12, r25	; 0x0c
    a8f6:	8b 87       	std	Y+11, r24	; 0x0b
    a8f8:	fc 01       	movw	r30, r24
    a8fa:	01 90       	ld	r0, Z+
    a8fc:	f0 81       	ld	r31, Z
    a8fe:	e0 2d       	mov	r30, r0
    a900:	fc 83       	std	Y+4, r31	; 0x04
    a902:	eb 83       	std	Y+3, r30	; 0x03
    a904:	40 e0       	ldi	r20, 0x00	; 0
    a906:	50 e0       	ldi	r21, 0x00	; 0
    a908:	ba 01       	movw	r22, r20
    a90a:	44 db       	rcall	.-2424   	; 0x9f94 <dir_sdi>
    a90c:	00 97       	sbiw	r24, 0x00	; 0
    a90e:	09 f0       	breq	.+2      	; 0xa912 <dir_find+0x2a>
    a910:	e7 c0       	rjmp	.+462    	; 0xaae0 <dir_find+0x1f8>
    a912:	8f ef       	ldi	r24, 0xFF	; 255
    a914:	9f ef       	ldi	r25, 0xFF	; 255
    a916:	dc 01       	movw	r26, r24
    a918:	eb 85       	ldd	r30, Y+11	; 0x0b
    a91a:	fc 85       	ldd	r31, Y+12	; 0x0c
    a91c:	80 a7       	std	Z+40, r24	; 0x28
    a91e:	91 a7       	std	Z+41, r25	; 0x29
    a920:	a2 a7       	std	Z+42, r26	; 0x2a
    a922:	b3 a7       	std	Z+43, r27	; 0x2b
    a924:	0f ef       	ldi	r16, 0xFF	; 255
    a926:	1f ef       	ldi	r17, 0xFF	; 255
    a928:	44 24       	eor	r4, r4
    a92a:	4a 94       	dec	r4
    a92c:	54 2c       	mov	r5, r4
    a92e:	32 01       	movw	r6, r4
    a930:	7c 96       	adiw	r30, 0x1c	; 28
    a932:	fa 87       	std	Y+10, r31	; 0x0a
    a934:	e9 87       	std	Y+9, r30	; 0x09
    a936:	eb 85       	ldd	r30, Y+11	; 0x0b
    a938:	fc 85       	ldd	r31, Y+12	; 0x0c
    a93a:	46 89       	ldd	r20, Z+22	; 0x16
    a93c:	57 89       	ldd	r21, Z+23	; 0x17
    a93e:	60 8d       	ldd	r22, Z+24	; 0x18
    a940:	71 8d       	ldd	r23, Z+25	; 0x19
    a942:	8b 81       	ldd	r24, Y+3	; 0x03
    a944:	9c 81       	ldd	r25, Y+4	; 0x04
    a946:	0e 94 48 4b 	call	0x9690	; 0x9690 <move_window>
    a94a:	00 97       	sbiw	r24, 0x00	; 0
    a94c:	09 f0       	breq	.+2      	; 0xa950 <dir_find+0x68>
    a94e:	c8 c0       	rjmp	.+400    	; 0xaae0 <dir_find+0x1f8>
    a950:	eb 85       	ldd	r30, Y+11	; 0x0b
    a952:	fc 85       	ldd	r31, Y+12	; 0x0c
    a954:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a956:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a958:	f7 01       	movw	r30, r14
    a95a:	d0 80       	ld	r13, Z
    a95c:	dd 20       	and	r13, r13
    a95e:	09 f4       	brne	.+2      	; 0xa962 <dir_find+0x7a>
    a960:	c1 c0       	rjmp	.+386    	; 0xaae4 <dir_find+0x1fc>
    a962:	93 85       	ldd	r25, Z+11	; 0x0b
    a964:	89 2f       	mov	r24, r25
    a966:	8f 73       	andi	r24, 0x3F	; 63
    a968:	eb 85       	ldd	r30, Y+11	; 0x0b
    a96a:	fc 85       	ldd	r31, Y+12	; 0x0c
    a96c:	84 83       	std	Z+4, r24	; 0x04
    a96e:	f5 ee       	ldi	r31, 0xE5	; 229
    a970:	df 16       	cp	r13, r31
    a972:	09 f4       	brne	.+2      	; 0xa976 <dir_find+0x8e>
    a974:	a6 c0       	rjmp	.+332    	; 0xaac2 <dir_find+0x1da>
    a976:	93 ff       	sbrs	r25, 3
    a978:	04 c0       	rjmp	.+8      	; 0xa982 <dir_find+0x9a>
    a97a:	8f 30       	cpi	r24, 0x0F	; 15
    a97c:	09 f0       	breq	.+2      	; 0xa980 <dir_find+0x98>
    a97e:	a1 c0       	rjmp	.+322    	; 0xaac2 <dir_find+0x1da>
    a980:	03 c0       	rjmp	.+6      	; 0xa988 <dir_find+0xa0>
    a982:	8f 30       	cpi	r24, 0x0F	; 15
    a984:	09 f0       	breq	.+2      	; 0xa988 <dir_find+0xa0>
    a986:	88 c0       	rjmp	.+272    	; 0xaa98 <dir_find+0x1b0>
    a988:	eb 85       	ldd	r30, Y+11	; 0x0b
    a98a:	fc 85       	ldd	r31, Y+12	; 0x0c
    a98c:	87 a1       	ldd	r24, Z+39	; 0x27
    a98e:	86 fd       	sbrc	r24, 6
    a990:	9f c0       	rjmp	.+318    	; 0xaad0 <dir_find+0x1e8>
    a992:	d6 fe       	sbrs	r13, 6
    a994:	10 c0       	rjmp	.+32     	; 0xa9b6 <dir_find+0xce>
    a996:	f7 01       	movw	r30, r14
    a998:	05 85       	ldd	r16, Z+13	; 0x0d
    a99a:	fd 2d       	mov	r31, r13
    a99c:	ff 7b       	andi	r31, 0xBF	; 191
    a99e:	df 2e       	mov	r13, r31
    a9a0:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9a2:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9a4:	86 85       	ldd	r24, Z+14	; 0x0e
    a9a6:	97 85       	ldd	r25, Z+15	; 0x0f
    a9a8:	a0 89       	ldd	r26, Z+16	; 0x10
    a9aa:	b1 89       	ldd	r27, Z+17	; 0x11
    a9ac:	80 a7       	std	Z+40, r24	; 0x28
    a9ae:	91 a7       	std	Z+41, r25	; 0x29
    a9b0:	a2 a7       	std	Z+42, r26	; 0x2a
    a9b2:	b3 a7       	std	Z+43, r27	; 0x2b
    a9b4:	02 c0       	rjmp	.+4      	; 0xa9ba <dir_find+0xd2>
    a9b6:	1d 11       	cpse	r17, r13
    a9b8:	8a c0       	rjmp	.+276    	; 0xaace <dir_find+0x1e6>
    a9ba:	f7 01       	movw	r30, r14
    a9bc:	c5 84       	ldd	r12, Z+13	; 0x0d
    a9be:	c0 12       	cpse	r12, r16
    a9c0:	86 c0       	rjmp	.+268    	; 0xaace <dir_find+0x1e6>
    a9c2:	82 8d       	ldd	r24, Z+26	; 0x1a
    a9c4:	93 8d       	ldd	r25, Z+27	; 0x1b
    a9c6:	89 2b       	or	r24, r25
    a9c8:	09 f0       	breq	.+2      	; 0xa9cc <dir_find+0xe4>
    a9ca:	91 c0       	rjmp	.+290    	; 0xaaee <dir_find+0x206>
    a9cc:	eb 81       	ldd	r30, Y+3	; 0x03
    a9ce:	fc 81       	ldd	r31, Y+4	; 0x04
    a9d0:	03 84       	ldd	r0, Z+11	; 0x0b
    a9d2:	f4 85       	ldd	r31, Z+12	; 0x0c
    a9d4:	e0 2d       	mov	r30, r0
    a9d6:	fe 83       	std	Y+6, r31	; 0x06
    a9d8:	ed 83       	std	Y+5, r30	; 0x05
    a9da:	f7 01       	movw	r30, r14
    a9dc:	80 81       	ld	r24, Z
    a9de:	8f 73       	andi	r24, 0x3F	; 63
    a9e0:	90 e0       	ldi	r25, 0x00	; 0
    a9e2:	01 97       	sbiw	r24, 0x01	; 1
    a9e4:	fd e0       	ldi	r31, 0x0D	; 13
    a9e6:	f8 9f       	mul	r31, r24
    a9e8:	80 01       	movw	r16, r0
    a9ea:	f9 9f       	mul	r31, r25
    a9ec:	10 0d       	add	r17, r0
    a9ee:	11 24       	eor	r1, r1
    a9f0:	2b ee       	ldi	r18, 0xEB	; 235
    a9f2:	34 e0       	ldi	r19, 0x04	; 4
    a9f4:	3a 83       	std	Y+2, r19	; 0x02
    a9f6:	29 83       	std	Y+1, r18	; 0x01
    a9f8:	81 e0       	ldi	r24, 0x01	; 1
    a9fa:	90 e0       	ldi	r25, 0x00	; 0
    a9fc:	e9 81       	ldd	r30, Y+1	; 0x01
    a9fe:	fa 81       	ldd	r31, Y+2	; 0x02
    aa00:	21 91       	ld	r18, Z+
    aa02:	fa 83       	std	Y+2, r31	; 0x02
    aa04:	e9 83       	std	Y+1, r30	; 0x01
    aa06:	f7 01       	movw	r30, r14
    aa08:	e2 0f       	add	r30, r18
    aa0a:	f1 1d       	adc	r31, r1
    aa0c:	20 80       	ld	r2, Z
    aa0e:	31 80       	ldd	r3, Z+1	; 0x01
    aa10:	00 97       	sbiw	r24, 0x00	; 0
    aa12:	39 f1       	breq	.+78     	; 0xaa62 <dir_find+0x17a>
    aa14:	0f 3f       	cpi	r16, 0xFF	; 255
    aa16:	11 05       	cpc	r17, r1
    aa18:	11 f0       	breq	.+4      	; 0xaa1e <dir_find+0x136>
    aa1a:	08 f0       	brcs	.+2      	; 0xaa1e <dir_find+0x136>
    aa1c:	68 c0       	rjmp	.+208    	; 0xaaee <dir_find+0x206>
    aa1e:	b1 01       	movw	r22, r2
    aa20:	80 e0       	ldi	r24, 0x00	; 0
    aa22:	90 e0       	ldi	r25, 0x00	; 0
    aa24:	0e 94 0c 69 	call	0xd218	; 0xd218 <ff_wtoupper>
    aa28:	4b 01       	movw	r8, r22
    aa2a:	5c 01       	movw	r10, r24
    aa2c:	98 01       	movw	r18, r16
    aa2e:	2f 5f       	subi	r18, 0xFF	; 255
    aa30:	3f 4f       	sbci	r19, 0xFF	; 255
    aa32:	38 87       	std	Y+8, r19	; 0x08
    aa34:	2f 83       	std	Y+7, r18	; 0x07
    aa36:	00 0f       	add	r16, r16
    aa38:	11 1f       	adc	r17, r17
    aa3a:	ed 81       	ldd	r30, Y+5	; 0x05
    aa3c:	fe 81       	ldd	r31, Y+6	; 0x06
    aa3e:	e0 0f       	add	r30, r16
    aa40:	f1 1f       	adc	r31, r17
    aa42:	60 81       	ld	r22, Z
    aa44:	71 81       	ldd	r23, Z+1	; 0x01
    aa46:	80 e0       	ldi	r24, 0x00	; 0
    aa48:	90 e0       	ldi	r25, 0x00	; 0
    aa4a:	0e 94 0c 69 	call	0xd218	; 0xd218 <ff_wtoupper>
    aa4e:	86 16       	cp	r8, r22
    aa50:	97 06       	cpc	r9, r23
    aa52:	a8 06       	cpc	r10, r24
    aa54:	b9 06       	cpc	r11, r25
    aa56:	09 f0       	breq	.+2      	; 0xaa5a <dir_find+0x172>
    aa58:	4a c0       	rjmp	.+148    	; 0xaaee <dir_find+0x206>
    aa5a:	c1 01       	movw	r24, r2
    aa5c:	0f 81       	ldd	r16, Y+7	; 0x07
    aa5e:	18 85       	ldd	r17, Y+8	; 0x08
    aa60:	05 c0       	rjmp	.+10     	; 0xaa6c <dir_find+0x184>
    aa62:	3f ef       	ldi	r19, 0xFF	; 255
    aa64:	23 16       	cp	r2, r19
    aa66:	33 06       	cpc	r3, r19
    aa68:	09 f0       	breq	.+2      	; 0xaa6c <dir_find+0x184>
    aa6a:	41 c0       	rjmp	.+130    	; 0xaaee <dir_find+0x206>
    aa6c:	e9 81       	ldd	r30, Y+1	; 0x01
    aa6e:	fa 81       	ldd	r31, Y+2	; 0x02
    aa70:	e8 5f       	subi	r30, 0xF8	; 248
    aa72:	f4 40       	sbci	r31, 0x04	; 4
    aa74:	19 f6       	brne	.-122    	; 0xa9fc <dir_find+0x114>
    aa76:	f7 01       	movw	r30, r14
    aa78:	20 81       	ld	r18, Z
    aa7a:	26 ff       	sbrs	r18, 6
    aa7c:	3a c0       	rjmp	.+116    	; 0xaaf2 <dir_find+0x20a>
    aa7e:	89 2b       	or	r24, r25
    aa80:	c1 f1       	breq	.+112    	; 0xaaf2 <dir_find+0x20a>
    aa82:	00 0f       	add	r16, r16
    aa84:	11 1f       	adc	r17, r17
    aa86:	ed 81       	ldd	r30, Y+5	; 0x05
    aa88:	fe 81       	ldd	r31, Y+6	; 0x06
    aa8a:	e0 0f       	add	r30, r16
    aa8c:	f1 1f       	adc	r31, r17
    aa8e:	80 81       	ld	r24, Z
    aa90:	91 81       	ldd	r25, Z+1	; 0x01
    aa92:	89 2b       	or	r24, r25
    aa94:	71 f1       	breq	.+92     	; 0xaaf2 <dir_find+0x20a>
    aa96:	2b c0       	rjmp	.+86     	; 0xaaee <dir_find+0x206>
    aa98:	11 11       	cpse	r17, r1
    aa9a:	05 c0       	rjmp	.+10     	; 0xaaa6 <dir_find+0x1be>
    aa9c:	c7 01       	movw	r24, r14
    aa9e:	0e 94 1d 48 	call	0x903a	; 0x903a <sum_sfn>
    aaa2:	08 17       	cp	r16, r24
    aaa4:	09 f1       	breq	.+66     	; 0xaae8 <dir_find+0x200>
    aaa6:	eb 85       	ldd	r30, Y+11	; 0x0b
    aaa8:	fc 85       	ldd	r31, Y+12	; 0x0c
    aaaa:	87 a1       	ldd	r24, Z+39	; 0x27
    aaac:	80 fd       	sbrc	r24, 0
    aaae:	09 c0       	rjmp	.+18     	; 0xaac2 <dir_find+0x1da>
    aab0:	4b e0       	ldi	r20, 0x0B	; 11
    aab2:	50 e0       	ldi	r21, 0x00	; 0
    aab4:	69 85       	ldd	r22, Y+9	; 0x09
    aab6:	7a 85       	ldd	r23, Y+10	; 0x0a
    aab8:	c7 01       	movw	r24, r14
    aaba:	0e 94 aa 47 	call	0x8f54	; 0x8f54 <mem_cmp>
    aabe:	89 2b       	or	r24, r25
    aac0:	99 f0       	breq	.+38     	; 0xaae8 <dir_find+0x200>
    aac2:	eb 85       	ldd	r30, Y+11	; 0x0b
    aac4:	fc 85       	ldd	r31, Y+12	; 0x0c
    aac6:	40 a6       	std	Z+40, r4	; 0x28
    aac8:	51 a6       	std	Z+41, r5	; 0x29
    aaca:	62 a6       	std	Z+42, r6	; 0x2a
    aacc:	73 a6       	std	Z+43, r7	; 0x2b
    aace:	1f ef       	ldi	r17, 0xFF	; 255
    aad0:	60 e0       	ldi	r22, 0x00	; 0
    aad2:	70 e0       	ldi	r23, 0x00	; 0
    aad4:	8b 85       	ldd	r24, Y+11	; 0x0b
    aad6:	9c 85       	ldd	r25, Y+12	; 0x0c
    aad8:	d5 dc       	rcall	.-1622   	; 0xa484 <dir_next>
    aada:	00 97       	sbiw	r24, 0x00	; 0
    aadc:	09 f4       	brne	.+2      	; 0xaae0 <dir_find+0x1f8>
    aade:	2b cf       	rjmp	.-426    	; 0xa936 <dir_find+0x4e>
    aae0:	28 2f       	mov	r18, r24
    aae2:	0b c0       	rjmp	.+22     	; 0xaafa <dir_find+0x212>
    aae4:	24 e0       	ldi	r18, 0x04	; 4
    aae6:	01 c0       	rjmp	.+2      	; 0xaaea <dir_find+0x202>
    aae8:	20 e0       	ldi	r18, 0x00	; 0
    aaea:	90 e0       	ldi	r25, 0x00	; 0
    aaec:	06 c0       	rjmp	.+12     	; 0xaafa <dir_find+0x212>
    aaee:	0c 2d       	mov	r16, r12
    aaf0:	ee cf       	rjmp	.-36     	; 0xaace <dir_find+0x1e6>
    aaf2:	1f ef       	ldi	r17, 0xFF	; 255
    aaf4:	1d 0d       	add	r17, r13
    aaf6:	0c 2d       	mov	r16, r12
    aaf8:	eb cf       	rjmp	.-42     	; 0xaad0 <dir_find+0x1e8>
    aafa:	82 2f       	mov	r24, r18
    aafc:	2c 96       	adiw	r28, 0x0c	; 12
    aafe:	e2 e1       	ldi	r30, 0x12	; 18
    ab00:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0000ab04 <dir_register>:
    ab04:	a6 e1       	ldi	r26, 0x16	; 22
    ab06:	b0 e0       	ldi	r27, 0x00	; 0
    ab08:	e8 e8       	ldi	r30, 0x88	; 136
    ab0a:	f5 e5       	ldi	r31, 0x55	; 85
    ab0c:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    ab10:	fc 01       	movw	r30, r24
    ab12:	27 a1       	ldd	r18, Z+39	; 0x27
    ab14:	20 7a       	andi	r18, 0xA0	; 160
    ab16:	09 f0       	breq	.+2      	; 0xab1a <dir_register+0x16>
    ab18:	53 c1       	rjmp	.+678    	; 0xadc0 <dir_register+0x2bc>
    ab1a:	c0 80       	ld	r12, Z
    ab1c:	d1 80       	ldd	r13, Z+1	; 0x01
    ab1e:	f6 01       	movw	r30, r12
    ab20:	a3 85       	ldd	r26, Z+11	; 0x0b
    ab22:	b4 85       	ldd	r27, Z+12	; 0x0c
    ab24:	81 2c       	mov	r8, r1
    ab26:	91 2c       	mov	r9, r1
    ab28:	2d 91       	ld	r18, X+
    ab2a:	3d 91       	ld	r19, X+
    ab2c:	23 2b       	or	r18, r19
    ab2e:	21 f0       	breq	.+8      	; 0xab38 <dir_register+0x34>
    ab30:	ff ef       	ldi	r31, 0xFF	; 255
    ab32:	8f 1a       	sub	r8, r31
    ab34:	9f 0a       	sbc	r9, r31
    ab36:	f8 cf       	rjmp	.-16     	; 0xab28 <dir_register+0x24>
    ab38:	8c 01       	movw	r16, r24
    ab3a:	5c 01       	movw	r10, r24
    ab3c:	2c e1       	ldi	r18, 0x1C	; 28
    ab3e:	a2 0e       	add	r10, r18
    ab40:	b1 1c       	adc	r11, r1
    ab42:	4c e0       	ldi	r20, 0x0C	; 12
    ab44:	50 e0       	ldi	r21, 0x00	; 0
    ab46:	b5 01       	movw	r22, r10
    ab48:	ce 01       	movw	r24, r28
    ab4a:	01 96       	adiw	r24, 0x01	; 1
    ab4c:	0e 94 ae 49 	call	0x935c	; 0x935c <mem_cpy.part.0>
    ab50:	8c 85       	ldd	r24, Y+12	; 0x0c
    ab52:	80 ff       	sbrs	r24, 0
    ab54:	94 c0       	rjmp	.+296    	; 0xac7e <dir_register+0x17a>
    ab56:	80 e4       	ldi	r24, 0x40	; 64
    ab58:	f8 01       	movw	r30, r16
    ab5a:	87 a3       	std	Z+39, r24	; 0x27
    ab5c:	41 2c       	mov	r4, r1
    ab5e:	51 2c       	mov	r5, r1
    ab60:	32 01       	movw	r6, r4
    ab62:	43 94       	inc	r4
    ab64:	72 01       	movw	r14, r4
    ab66:	f6 01       	movw	r30, r12
    ab68:	23 84       	ldd	r2, Z+11	; 0x0b
    ab6a:	34 84       	ldd	r3, Z+12	; 0x0c
    ab6c:	4b e0       	ldi	r20, 0x0B	; 11
    ab6e:	50 e0       	ldi	r21, 0x00	; 0
    ab70:	be 01       	movw	r22, r28
    ab72:	6f 5f       	subi	r22, 0xFF	; 255
    ab74:	7f 4f       	sbci	r23, 0xFF	; 255
    ab76:	c5 01       	movw	r24, r10
    ab78:	0e 94 ae 49 	call	0x935c	; 0x935c <mem_cpy.part.0>
    ab7c:	f6 e0       	ldi	r31, 0x06	; 6
    ab7e:	4f 16       	cp	r4, r31
    ab80:	51 04       	cpc	r5, r1
    ab82:	18 f1       	brcs	.+70     	; 0xabca <dir_register+0xc6>
    ab84:	f1 01       	movw	r30, r2
    ab86:	b3 01       	movw	r22, r6
    ab88:	a2 01       	movw	r20, r4
    ab8a:	81 91       	ld	r24, Z+
    ab8c:	91 91       	ld	r25, Z+
    ab8e:	00 97       	sbiw	r24, 0x00	; 0
    ab90:	d9 f0       	breq	.+54     	; 0xabc8 <dir_register+0xc4>
    ab92:	20 e1       	ldi	r18, 0x10	; 16
    ab94:	30 e0       	ldi	r19, 0x00	; 0
    ab96:	44 0f       	add	r20, r20
    ab98:	55 1f       	adc	r21, r21
    ab9a:	66 1f       	adc	r22, r22
    ab9c:	77 1f       	adc	r23, r23
    ab9e:	dc 01       	movw	r26, r24
    aba0:	a1 70       	andi	r26, 0x01	; 1
    aba2:	bb 27       	eor	r27, r27
    aba4:	4a 0f       	add	r20, r26
    aba6:	5b 1f       	adc	r21, r27
    aba8:	61 1d       	adc	r22, r1
    abaa:	71 1d       	adc	r23, r1
    abac:	96 95       	lsr	r25
    abae:	87 95       	ror	r24
    abb0:	60 ff       	sbrs	r22, 0
    abb2:	06 c0       	rjmp	.+12     	; 0xabc0 <dir_register+0xbc>
    abb4:	a1 e2       	ldi	r26, 0x21	; 33
    abb6:	4a 27       	eor	r20, r26
    abb8:	a0 e1       	ldi	r26, 0x10	; 16
    abba:	5a 27       	eor	r21, r26
    abbc:	a1 e0       	ldi	r26, 0x01	; 1
    abbe:	6a 27       	eor	r22, r26
    abc0:	21 50       	subi	r18, 0x01	; 1
    abc2:	31 09       	sbc	r19, r1
    abc4:	41 f7       	brne	.-48     	; 0xab96 <dir_register+0x92>
    abc6:	e1 cf       	rjmp	.-62     	; 0xab8a <dir_register+0x86>
    abc8:	7a 01       	movw	r14, r20
    abca:	fe 01       	movw	r30, r28
    abcc:	75 96       	adiw	r30, 0x15	; 21
    abce:	27 e0       	ldi	r18, 0x07	; 7
    abd0:	30 e0       	ldi	r19, 0x00	; 0
    abd2:	9e 2d       	mov	r25, r14
    abd4:	9f 70       	andi	r25, 0x0F	; 15
    abd6:	80 e3       	ldi	r24, 0x30	; 48
    abd8:	89 0f       	add	r24, r25
    abda:	8a 33       	cpi	r24, 0x3A	; 58
    abdc:	10 f0       	brcs	.+4      	; 0xabe2 <dir_register+0xde>
    abde:	87 e3       	ldi	r24, 0x37	; 55
    abe0:	89 0f       	add	r24, r25
    abe2:	21 50       	subi	r18, 0x01	; 1
    abe4:	31 09       	sbc	r19, r1
    abe6:	82 93       	st	-Z, r24
    abe8:	a4 e0       	ldi	r26, 0x04	; 4
    abea:	f6 94       	lsr	r15
    abec:	e7 94       	ror	r14
    abee:	aa 95       	dec	r26
    abf0:	e1 f7       	brne	.-8      	; 0xabea <dir_register+0xe6>
    abf2:	e1 14       	cp	r14, r1
    abf4:	f1 04       	cpc	r15, r1
    abf6:	69 f7       	brne	.-38     	; 0xabd2 <dir_register+0xce>
    abf8:	ed e0       	ldi	r30, 0x0D	; 13
    abfa:	f0 e0       	ldi	r31, 0x00	; 0
    abfc:	ec 0f       	add	r30, r28
    abfe:	fd 1f       	adc	r31, r29
    ac00:	e2 0f       	add	r30, r18
    ac02:	f3 1f       	adc	r31, r19
    ac04:	4e e7       	ldi	r20, 0x7E	; 126
    ac06:	40 83       	st	Z, r20
    ac08:	f5 01       	movw	r30, r10
    ac0a:	80 e0       	ldi	r24, 0x00	; 0
    ac0c:	90 e0       	ldi	r25, 0x00	; 0
    ac0e:	28 17       	cp	r18, r24
    ac10:	39 07       	cpc	r19, r25
    ac12:	29 f0       	breq	.+10     	; 0xac1e <dir_register+0x11a>
    ac14:	41 91       	ld	r20, Z+
    ac16:	40 32       	cpi	r20, 0x20	; 32
    ac18:	11 f0       	breq	.+4      	; 0xac1e <dir_register+0x11a>
    ac1a:	01 96       	adiw	r24, 0x01	; 1
    ac1c:	f8 cf       	rjmp	.-16     	; 0xac0e <dir_register+0x10a>
    ac1e:	f5 01       	movw	r30, r10
    ac20:	e8 0f       	add	r30, r24
    ac22:	f9 1f       	adc	r31, r25
    ac24:	28 30       	cpi	r18, 0x08	; 8
    ac26:	31 05       	cpc	r19, r1
    ac28:	50 f4       	brcc	.+20     	; 0xac3e <dir_register+0x13a>
    ac2a:	ad e0       	ldi	r26, 0x0D	; 13
    ac2c:	b0 e0       	ldi	r27, 0x00	; 0
    ac2e:	ac 0f       	add	r26, r28
    ac30:	bd 1f       	adc	r27, r29
    ac32:	a2 0f       	add	r26, r18
    ac34:	b3 1f       	adc	r27, r19
    ac36:	8c 91       	ld	r24, X
    ac38:	2f 5f       	subi	r18, 0xFF	; 255
    ac3a:	3f 4f       	sbci	r19, 0xFF	; 255
    ac3c:	01 c0       	rjmp	.+2      	; 0xac40 <dir_register+0x13c>
    ac3e:	80 e2       	ldi	r24, 0x20	; 32
    ac40:	81 93       	st	Z+, r24
    ac42:	cf 01       	movw	r24, r30
    ac44:	8a 19       	sub	r24, r10
    ac46:	9b 09       	sbc	r25, r11
    ac48:	08 97       	sbiw	r24, 0x08	; 8
    ac4a:	60 f3       	brcs	.-40     	; 0xac24 <dir_register+0x120>
    ac4c:	c8 01       	movw	r24, r16
    ac4e:	4c de       	rcall	.-872    	; 0xa8e8 <dir_find>
    ac50:	00 97       	sbiw	r24, 0x00	; 0
    ac52:	71 f4       	brne	.+28     	; 0xac70 <dir_register+0x16c>
    ac54:	8f ef       	ldi	r24, 0xFF	; 255
    ac56:	48 1a       	sub	r4, r24
    ac58:	58 0a       	sbc	r5, r24
    ac5a:	68 0a       	sbc	r6, r24
    ac5c:	78 0a       	sbc	r7, r24
    ac5e:	94 e6       	ldi	r25, 0x64	; 100
    ac60:	49 16       	cp	r4, r25
    ac62:	51 04       	cpc	r5, r1
    ac64:	61 04       	cpc	r6, r1
    ac66:	71 04       	cpc	r7, r1
    ac68:	09 f0       	breq	.+2      	; 0xac6c <dir_register+0x168>
    ac6a:	7c cf       	rjmp	.-264    	; 0xab64 <dir_register+0x60>
    ac6c:	27 e0       	ldi	r18, 0x07	; 7
    ac6e:	a9 c0       	rjmp	.+338    	; 0xadc2 <dir_register+0x2be>
    ac70:	84 30       	cpi	r24, 0x04	; 4
    ac72:	91 05       	cpc	r25, r1
    ac74:	09 f0       	breq	.+2      	; 0xac78 <dir_register+0x174>
    ac76:	ce c0       	rjmp	.+412    	; 0xae14 <dir_register+0x310>
    ac78:	8c 85       	ldd	r24, Y+12	; 0x0c
    ac7a:	f8 01       	movw	r30, r16
    ac7c:	87 a3       	std	Z+39, r24	; 0x27
    ac7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    ac80:	81 ff       	sbrs	r24, 1
    ac82:	0b c0       	rjmp	.+22     	; 0xac9a <dir_register+0x196>
    ac84:	c4 01       	movw	r24, r8
    ac86:	0c 96       	adiw	r24, 0x0c	; 12
    ac88:	6d e0       	ldi	r22, 0x0D	; 13
    ac8a:	70 e0       	ldi	r23, 0x00	; 0
    ac8c:	0e 94 1f e6 	call	0x1cc3e	; 0x1cc3e <__udivmodhi4>
    ac90:	7b 01       	movw	r14, r22
    ac92:	ff ef       	ldi	r31, 0xFF	; 255
    ac94:	ef 1a       	sub	r14, r31
    ac96:	ff 0a       	sbc	r15, r31
    ac98:	03 c0       	rjmp	.+6      	; 0xaca0 <dir_register+0x19c>
    ac9a:	ee 24       	eor	r14, r14
    ac9c:	e3 94       	inc	r14
    ac9e:	f1 2c       	mov	r15, r1
    aca0:	b7 01       	movw	r22, r14
    aca2:	c8 01       	movw	r24, r16
    aca4:	d7 dc       	rcall	.-1618   	; 0xa654 <dir_alloc>
    aca6:	00 97       	sbiw	r24, 0x00	; 0
    aca8:	09 f0       	breq	.+2      	; 0xacac <dir_register+0x1a8>
    acaa:	b4 c0       	rjmp	.+360    	; 0xae14 <dir_register+0x310>
    acac:	21 e0       	ldi	r18, 0x01	; 1
    acae:	e2 1a       	sub	r14, r18
    acb0:	f1 08       	sbc	r15, r1
    acb2:	09 f4       	brne	.+2      	; 0xacb6 <dir_register+0x1b2>
    acb4:	88 c0       	rjmp	.+272    	; 0xadc6 <dir_register+0x2c2>
    acb6:	f8 01       	movw	r30, r16
    acb8:	46 85       	ldd	r20, Z+14	; 0x0e
    acba:	57 85       	ldd	r21, Z+15	; 0x0f
    acbc:	60 89       	ldd	r22, Z+16	; 0x10
    acbe:	71 89       	ldd	r23, Z+17	; 0x11
    acc0:	c7 01       	movw	r24, r14
    acc2:	e5 e0       	ldi	r30, 0x05	; 5
    acc4:	88 0f       	add	r24, r24
    acc6:	99 1f       	adc	r25, r25
    acc8:	ea 95       	dec	r30
    acca:	e1 f7       	brne	.-8      	; 0xacc4 <dir_register+0x1c0>
    accc:	48 1b       	sub	r20, r24
    acce:	59 0b       	sbc	r21, r25
    acd0:	61 09       	sbc	r22, r1
    acd2:	71 09       	sbc	r23, r1
    acd4:	c8 01       	movw	r24, r16
    acd6:	5e d9       	rcall	.-3396   	; 0x9f94 <dir_sdi>
    acd8:	00 97       	sbiw	r24, 0x00	; 0
    acda:	09 f0       	breq	.+2      	; 0xacde <dir_register+0x1da>
    acdc:	9b c0       	rjmp	.+310    	; 0xae14 <dir_register+0x310>
    acde:	c5 01       	movw	r24, r10
    ace0:	0e 94 1d 48 	call	0x903a	; 0x903a <sum_sfn>
    ace4:	68 2e       	mov	r6, r24
    ace6:	5f e0       	ldi	r21, 0x0F	; 15
    ace8:	35 2e       	mov	r3, r21
    acea:	6d e0       	ldi	r22, 0x0D	; 13
    acec:	46 2e       	mov	r4, r22
    acee:	78 ef       	ldi	r23, 0xF8	; 248
    acf0:	87 2e       	mov	r8, r23
    acf2:	74 e0       	ldi	r23, 0x04	; 4
    acf4:	97 2e       	mov	r9, r23
    acf6:	55 24       	eor	r5, r5
    acf8:	53 94       	inc	r5
    acfa:	f8 01       	movw	r30, r16
    acfc:	46 89       	ldd	r20, Z+22	; 0x16
    acfe:	57 89       	ldd	r21, Z+23	; 0x17
    ad00:	60 8d       	ldd	r22, Z+24	; 0x18
    ad02:	71 8d       	ldd	r23, Z+25	; 0x19
    ad04:	c6 01       	movw	r24, r12
    ad06:	0e 94 48 4b 	call	0x9690	; 0x9690 <move_window>
    ad0a:	00 97       	sbiw	r24, 0x00	; 0
    ad0c:	09 f0       	breq	.+2      	; 0xad10 <dir_register+0x20c>
    ad0e:	82 c0       	rjmp	.+260    	; 0xae14 <dir_register+0x310>
    ad10:	f6 01       	movw	r30, r12
    ad12:	63 85       	ldd	r22, Z+11	; 0x0b
    ad14:	74 85       	ldd	r23, Z+12	; 0x0c
    ad16:	f8 01       	movw	r30, r16
    ad18:	02 8c       	ldd	r0, Z+26	; 0x1a
    ad1a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    ad1c:	e0 2d       	mov	r30, r0
    ad1e:	fe 8b       	std	Y+22, r31	; 0x16
    ad20:	ed 8b       	std	Y+21, r30	; 0x15
    ad22:	7e 2c       	mov	r7, r14
    ad24:	65 86       	std	Z+13, r6	; 0x0d
    ad26:	33 86       	std	Z+11, r3	; 0x0b
    ad28:	14 86       	std	Z+12, r1	; 0x0c
    ad2a:	12 8e       	std	Z+26, r1	; 0x1a
    ad2c:	13 8e       	std	Z+27, r1	; 0x1b
    ad2e:	97 01       	movw	r18, r14
    ad30:	33 27       	eor	r19, r19
    ad32:	21 50       	subi	r18, 0x01	; 1
    ad34:	31 09       	sbc	r19, r1
    ad36:	42 9e       	mul	r4, r18
    ad38:	c0 01       	movw	r24, r0
    ad3a:	43 9e       	mul	r4, r19
    ad3c:	90 0d       	add	r25, r0
    ad3e:	11 24       	eor	r1, r1
    ad40:	ab ee       	ldi	r26, 0xEB	; 235
    ad42:	b4 e0       	ldi	r27, 0x04	; 4
    ad44:	20 e0       	ldi	r18, 0x00	; 0
    ad46:	30 e0       	ldi	r19, 0x00	; 0
    ad48:	2f 3f       	cpi	r18, 0xFF	; 255
    ad4a:	ff ef       	ldi	r31, 0xFF	; 255
    ad4c:	3f 07       	cpc	r19, r31
    ad4e:	49 f0       	breq	.+18     	; 0xad62 <dir_register+0x25e>
    ad50:	9c 01       	movw	r18, r24
    ad52:	22 0f       	add	r18, r18
    ad54:	33 1f       	adc	r19, r19
    ad56:	26 0f       	add	r18, r22
    ad58:	37 1f       	adc	r19, r23
    ad5a:	f9 01       	movw	r30, r18
    ad5c:	20 81       	ld	r18, Z
    ad5e:	31 81       	ldd	r19, Z+1	; 0x01
    ad60:	01 96       	adiw	r24, 0x01	; 1
    ad62:	4d 91       	ld	r20, X+
    ad64:	ed 89       	ldd	r30, Y+21	; 0x15
    ad66:	fe 89       	ldd	r31, Y+22	; 0x16
    ad68:	e4 0f       	add	r30, r20
    ad6a:	f1 1d       	adc	r31, r1
    ad6c:	20 83       	st	Z, r18
    ad6e:	31 83       	std	Z+1, r19	; 0x01
    ad70:	21 15       	cp	r18, r1
    ad72:	31 05       	cpc	r19, r1
    ad74:	11 f4       	brne	.+4      	; 0xad7a <dir_register+0x276>
    ad76:	2f ef       	ldi	r18, 0xFF	; 255
    ad78:	3f ef       	ldi	r19, 0xFF	; 255
    ad7a:	8a 16       	cp	r8, r26
    ad7c:	9b 06       	cpc	r9, r27
    ad7e:	21 f7       	brne	.-56     	; 0xad48 <dir_register+0x244>
    ad80:	2f 3f       	cpi	r18, 0xFF	; 255
    ad82:	3f 4f       	sbci	r19, 0xFF	; 255
    ad84:	49 f0       	breq	.+18     	; 0xad98 <dir_register+0x294>
    ad86:	88 0f       	add	r24, r24
    ad88:	99 1f       	adc	r25, r25
    ad8a:	db 01       	movw	r26, r22
    ad8c:	a8 0f       	add	r26, r24
    ad8e:	b9 1f       	adc	r27, r25
    ad90:	8d 91       	ld	r24, X+
    ad92:	9c 91       	ld	r25, X
    ad94:	89 2b       	or	r24, r25
    ad96:	19 f4       	brne	.+6      	; 0xad9e <dir_register+0x29a>
    ad98:	27 2d       	mov	r18, r7
    ad9a:	20 64       	ori	r18, 0x40	; 64
    ad9c:	72 2e       	mov	r7, r18
    ad9e:	ed 89       	ldd	r30, Y+21	; 0x15
    ada0:	fe 89       	ldd	r31, Y+22	; 0x16
    ada2:	70 82       	st	Z, r7
    ada4:	f6 01       	movw	r30, r12
    ada6:	53 82       	std	Z+3, r5	; 0x03
    ada8:	60 e0       	ldi	r22, 0x00	; 0
    adaa:	70 e0       	ldi	r23, 0x00	; 0
    adac:	c8 01       	movw	r24, r16
    adae:	6a db       	rcall	.-2348   	; 0xa484 <dir_next>
    adb0:	00 97       	sbiw	r24, 0x00	; 0
    adb2:	81 f5       	brne	.+96     	; 0xae14 <dir_register+0x310>
    adb4:	f1 e0       	ldi	r31, 0x01	; 1
    adb6:	ef 1a       	sub	r14, r31
    adb8:	f1 08       	sbc	r15, r1
    adba:	09 f0       	breq	.+2      	; 0xadbe <dir_register+0x2ba>
    adbc:	9e cf       	rjmp	.-196    	; 0xacfa <dir_register+0x1f6>
    adbe:	03 c0       	rjmp	.+6      	; 0xadc6 <dir_register+0x2c2>
    adc0:	26 e0       	ldi	r18, 0x06	; 6
    adc2:	90 e0       	ldi	r25, 0x00	; 0
    adc4:	28 c0       	rjmp	.+80     	; 0xae16 <dir_register+0x312>
    adc6:	f8 01       	movw	r30, r16
    adc8:	46 89       	ldd	r20, Z+22	; 0x16
    adca:	57 89       	ldd	r21, Z+23	; 0x17
    adcc:	60 8d       	ldd	r22, Z+24	; 0x18
    adce:	71 8d       	ldd	r23, Z+25	; 0x19
    add0:	c6 01       	movw	r24, r12
    add2:	0e 94 48 4b 	call	0x9690	; 0x9690 <move_window>
    add6:	00 97       	sbiw	r24, 0x00	; 0
    add8:	e9 f4       	brne	.+58     	; 0xae14 <dir_register+0x310>
    adda:	40 e2       	ldi	r20, 0x20	; 32
    addc:	50 e0       	ldi	r21, 0x00	; 0
    adde:	60 e0       	ldi	r22, 0x00	; 0
    ade0:	70 e0       	ldi	r23, 0x00	; 0
    ade2:	f8 01       	movw	r30, r16
    ade4:	82 8d       	ldd	r24, Z+26	; 0x1a
    ade6:	93 8d       	ldd	r25, Z+27	; 0x1b
    ade8:	0e 94 a1 47 	call	0x8f42	; 0x8f42 <mem_set>
    adec:	4b e0       	ldi	r20, 0x0B	; 11
    adee:	50 e0       	ldi	r21, 0x00	; 0
    adf0:	b5 01       	movw	r22, r10
    adf2:	f8 01       	movw	r30, r16
    adf4:	82 8d       	ldd	r24, Z+26	; 0x1a
    adf6:	93 8d       	ldd	r25, Z+27	; 0x1b
    adf8:	0e 94 ae 49 	call	0x935c	; 0x935c <mem_cpy.part.0>
    adfc:	f8 01       	movw	r30, r16
    adfe:	22 8d       	ldd	r18, Z+26	; 0x1a
    ae00:	33 8d       	ldd	r19, Z+27	; 0x1b
    ae02:	87 a1       	ldd	r24, Z+39	; 0x27
    ae04:	88 71       	andi	r24, 0x18	; 24
    ae06:	f9 01       	movw	r30, r18
    ae08:	84 87       	std	Z+12, r24	; 0x0c
    ae0a:	81 e0       	ldi	r24, 0x01	; 1
    ae0c:	f6 01       	movw	r30, r12
    ae0e:	83 83       	std	Z+3, r24	; 0x03
    ae10:	20 e0       	ldi	r18, 0x00	; 0
    ae12:	d7 cf       	rjmp	.-82     	; 0xadc2 <dir_register+0x2be>
    ae14:	28 2f       	mov	r18, r24
    ae16:	82 2f       	mov	r24, r18
    ae18:	66 96       	adiw	r28, 0x16	; 22
    ae1a:	e2 e1       	ldi	r30, 0x12	; 18
    ae1c:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0000ae20 <follow_path>:
    ae20:	a8 e0       	ldi	r26, 0x08	; 8
    ae22:	b0 e0       	ldi	r27, 0x00	; 0
    ae24:	e6 e1       	ldi	r30, 0x16	; 22
    ae26:	f7 e5       	ldi	r31, 0x57	; 87
    ae28:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    ae2c:	8c 01       	movw	r16, r24
    ae2e:	78 87       	std	Y+8, r23	; 0x08
    ae30:	6f 83       	std	Y+7, r22	; 0x07
    ae32:	dc 01       	movw	r26, r24
    ae34:	0d 90       	ld	r0, X+
    ae36:	bc 91       	ld	r27, X
    ae38:	a0 2d       	mov	r26, r0
    ae3a:	ba 83       	std	Y+2, r27	; 0x02
    ae3c:	a9 83       	std	Y+1, r26	; 0x01
    ae3e:	fb 01       	movw	r30, r22
    ae40:	80 81       	ld	r24, Z
    ae42:	8f 32       	cpi	r24, 0x2F	; 47
    ae44:	11 f0       	breq	.+4      	; 0xae4a <follow_path+0x2a>
    ae46:	8c 35       	cpi	r24, 0x5C	; 92
    ae48:	19 f4       	brne	.+6      	; 0xae50 <follow_path+0x30>
    ae4a:	2f 81       	ldd	r18, Y+7	; 0x07
    ae4c:	38 85       	ldd	r19, Y+8	; 0x08
    ae4e:	0c c0       	rjmp	.+24     	; 0xae68 <follow_path+0x48>
    ae50:	e9 81       	ldd	r30, Y+1	; 0x01
    ae52:	fa 81       	ldd	r31, Y+2	; 0x02
    ae54:	85 89       	ldd	r24, Z+21	; 0x15
    ae56:	96 89       	ldd	r25, Z+22	; 0x16
    ae58:	a7 89       	ldd	r26, Z+23	; 0x17
    ae5a:	b0 8d       	ldd	r27, Z+24	; 0x18
    ae5c:	f8 01       	movw	r30, r16
    ae5e:	86 83       	std	Z+6, r24	; 0x06
    ae60:	97 83       	std	Z+7, r25	; 0x07
    ae62:	a0 87       	std	Z+8, r26	; 0x08
    ae64:	b1 87       	std	Z+9, r27	; 0x09
    ae66:	0f c0       	rjmp	.+30     	; 0xae86 <follow_path+0x66>
    ae68:	38 87       	std	Y+8, r19	; 0x08
    ae6a:	2f 83       	std	Y+7, r18	; 0x07
    ae6c:	d9 01       	movw	r26, r18
    ae6e:	8c 91       	ld	r24, X
    ae70:	2f 5f       	subi	r18, 0xFF	; 255
    ae72:	3f 4f       	sbci	r19, 0xFF	; 255
    ae74:	8f 32       	cpi	r24, 0x2F	; 47
    ae76:	c1 f3       	breq	.-16     	; 0xae68 <follow_path+0x48>
    ae78:	8c 35       	cpi	r24, 0x5C	; 92
    ae7a:	b1 f3       	breq	.-20     	; 0xae68 <follow_path+0x48>
    ae7c:	f8 01       	movw	r30, r16
    ae7e:	16 82       	std	Z+6, r1	; 0x06
    ae80:	17 82       	std	Z+7, r1	; 0x07
    ae82:	10 86       	std	Z+8, r1	; 0x08
    ae84:	11 86       	std	Z+9, r1	; 0x09
    ae86:	af 81       	ldd	r26, Y+7	; 0x07
    ae88:	b8 85       	ldd	r27, Y+8	; 0x08
    ae8a:	8c 91       	ld	r24, X
    ae8c:	80 32       	cpi	r24, 0x20	; 32
    ae8e:	58 f0       	brcs	.+22     	; 0xaea6 <follow_path+0x86>
    ae90:	f8 01       	movw	r30, r16
    ae92:	7c 96       	adiw	r30, 0x1c	; 28
    ae94:	fc 83       	std	Y+4, r31	; 0x04
    ae96:	eb 83       	std	Y+3, r30	; 0x03
    ae98:	29 81       	ldd	r18, Y+1	; 0x01
    ae9a:	3a 81       	ldd	r19, Y+2	; 0x02
    ae9c:	2b 5c       	subi	r18, 0xCB	; 203
    ae9e:	3f 4f       	sbci	r19, 0xFF	; 255
    aea0:	3e 83       	std	Y+6, r19	; 0x06
    aea2:	2d 83       	std	Y+5, r18	; 0x05
    aea4:	76 c0       	rjmp	.+236    	; 0xaf92 <follow_path+0x172>
    aea6:	80 e8       	ldi	r24, 0x80	; 128
    aea8:	f8 01       	movw	r30, r16
    aeaa:	87 a3       	std	Z+39, r24	; 0x27
    aeac:	40 e0       	ldi	r20, 0x00	; 0
    aeae:	50 e0       	ldi	r21, 0x00	; 0
    aeb0:	ba 01       	movw	r22, r20
    aeb2:	c8 01       	movw	r24, r16
    aeb4:	6f d8       	rcall	.-3874   	; 0x9f94 <dir_sdi>
    aeb6:	ec c1       	rjmp	.+984    	; 0xb290 <follow_path+0x470>
    aeb8:	65 eb       	ldi	r22, 0xB5	; 181
    aeba:	71 e0       	ldi	r23, 0x01	; 1
    aebc:	0e 94 f7 68 	call	0xd1ee	; 0xd1ee <ff_oem2uni>
    aec0:	00 97       	sbiw	r24, 0x00	; 0
    aec2:	09 f4       	brne	.+2      	; 0xaec6 <follow_path+0xa6>
    aec4:	b8 c1       	rjmp	.+880    	; 0xb236 <follow_path+0x416>
    aec6:	80 32       	cpi	r24, 0x20	; 32
    aec8:	91 05       	cpc	r25, r1
    aeca:	30 f1       	brcs	.+76     	; 0xaf18 <follow_path+0xf8>
    aecc:	8f 32       	cpi	r24, 0x2F	; 47
    aece:	91 05       	cpc	r25, r1
    aed0:	09 f4       	brne	.+2      	; 0xaed4 <follow_path+0xb4>
    aed2:	6b c0       	rjmp	.+214    	; 0xafaa <follow_path+0x18a>
    aed4:	8c 35       	cpi	r24, 0x5C	; 92
    aed6:	91 05       	cpc	r25, r1
    aed8:	09 f4       	brne	.+2      	; 0xaedc <follow_path+0xbc>
    aeda:	67 c0       	rjmp	.+206    	; 0xafaa <follow_path+0x18a>
    aedc:	80 38       	cpi	r24, 0x80	; 128
    aede:	91 05       	cpc	r25, r1
    aee0:	28 f4       	brcc	.+10     	; 0xaeec <follow_path+0xcc>
    aee2:	e7 e2       	ldi	r30, 0x27	; 39
    aee4:	f4 e0       	ldi	r31, 0x04	; 4
    aee6:	21 91       	ld	r18, Z+
    aee8:	21 11       	cpse	r18, r1
    aeea:	61 c0       	rjmp	.+194    	; 0xafae <follow_path+0x18e>
    aeec:	ef 81       	ldd	r30, Y+7	; 0x07
    aeee:	f8 85       	ldd	r31, Y+8	; 0x08
    aef0:	ef 3f       	cpi	r30, 0xFF	; 255
    aef2:	f1 05       	cpc	r31, r1
    aef4:	09 f4       	brne	.+2      	; 0xaef8 <follow_path+0xd8>
    aef6:	9f c1       	rjmp	.+830    	; 0xb236 <follow_path+0x416>
    aef8:	31 96       	adiw	r30, 0x01	; 1
    aefa:	f8 87       	std	Y+8, r31	; 0x08
    aefc:	ef 83       	std	Y+7, r30	; 0x07
    aefe:	d6 01       	movw	r26, r12
    af00:	8d 93       	st	X+, r24
    af02:	9d 93       	st	X+, r25
    af04:	6d 01       	movw	r12, r26
    af06:	bf ef       	ldi	r27, 0xFF	; 255
    af08:	eb 1a       	sub	r14, r27
    af0a:	fb 0a       	sbc	r15, r27
    af0c:	f7 01       	movw	r30, r14
    af0e:	31 97       	sbiw	r30, 0x01	; 1
    af10:	80 81       	ld	r24, Z
    af12:	90 e0       	ldi	r25, 0x00	; 0
    af14:	00 97       	sbiw	r24, 0x00	; 0
    af16:	81 f6       	brne	.-96     	; 0xaeb8 <follow_path+0x98>
    af18:	74 e0       	ldi	r23, 0x04	; 4
    af1a:	37 2e       	mov	r3, r23
    af1c:	2f 81       	ldd	r18, Y+7	; 0x07
    af1e:	38 85       	ldd	r19, Y+8	; 0x08
    af20:	22 0f       	add	r18, r18
    af22:	33 1f       	adc	r19, r19
    af24:	8f 81       	ldd	r24, Y+7	; 0x07
    af26:	98 85       	ldd	r25, Y+8	; 0x08
    af28:	01 97       	sbiw	r24, 0x01	; 1
    af2a:	09 f0       	breq	.+2      	; 0xaf2e <follow_path+0x10e>
    af2c:	51 c0       	rjmp	.+162    	; 0xafd0 <follow_path+0x1b0>
    af2e:	d5 01       	movw	r26, r10
    af30:	8d 91       	ld	r24, X+
    af32:	9c 91       	ld	r25, X
    af34:	8e 97       	sbiw	r24, 0x2e	; 46
    af36:	09 f0       	breq	.+2      	; 0xaf3a <follow_path+0x11a>
    af38:	57 c0       	rjmp	.+174    	; 0xafe8 <follow_path+0x1c8>
    af3a:	f9 01       	movw	r30, r18
    af3c:	ea 0d       	add	r30, r10
    af3e:	fb 1d       	adc	r31, r11
    af40:	11 82       	std	Z+1, r1	; 0x01
    af42:	10 82       	st	Z, r1
    af44:	f8 01       	movw	r30, r16
    af46:	7c 96       	adiw	r30, 0x1c	; 28
    af48:	80 e0       	ldi	r24, 0x00	; 0
    af4a:	90 e0       	ldi	r25, 0x00	; 0
    af4c:	2f 81       	ldd	r18, Y+7	; 0x07
    af4e:	38 85       	ldd	r19, Y+8	; 0x08
    af50:	82 17       	cp	r24, r18
    af52:	93 07       	cpc	r25, r19
    af54:	08 f0       	brcs	.+2      	; 0xaf58 <follow_path+0x138>
    af56:	4c c0       	rjmp	.+152    	; 0xaff0 <follow_path+0x1d0>
    af58:	2e e2       	ldi	r18, 0x2E	; 46
    af5a:	21 93       	st	Z+, r18
    af5c:	01 96       	adiw	r24, 0x01	; 1
    af5e:	8b 30       	cpi	r24, 0x0B	; 11
    af60:	91 05       	cpc	r25, r1
    af62:	a1 f7       	brne	.-24     	; 0xaf4c <follow_path+0x12c>
    af64:	83 2d       	mov	r24, r3
    af66:	80 62       	ori	r24, 0x20	; 32
    af68:	f8 01       	movw	r30, r16
    af6a:	87 a3       	std	Z+39, r24	; 0x27
    af6c:	c8 01       	movw	r24, r16
    af6e:	bc dc       	rcall	.-1672   	; 0xa8e8 <dir_find>
    af70:	f8 01       	movw	r30, r16
    af72:	27 a1       	ldd	r18, Z+39	; 0x27
    af74:	00 97       	sbiw	r24, 0x00	; 0
    af76:	09 f4       	brne	.+2      	; 0xaf7a <follow_path+0x15a>
    af78:	6a c1       	rjmp	.+724    	; 0xb24e <follow_path+0x42e>
    af7a:	84 30       	cpi	r24, 0x04	; 4
    af7c:	91 05       	cpc	r25, r1
    af7e:	09 f0       	breq	.+2      	; 0xaf82 <follow_path+0x162>
    af80:	87 c1       	rjmp	.+782    	; 0xb290 <follow_path+0x470>
    af82:	32 2f       	mov	r19, r18
    af84:	34 70       	andi	r19, 0x04	; 4
    af86:	25 ff       	sbrs	r18, 5
    af88:	5f c1       	rjmp	.+702    	; 0xb248 <follow_path+0x428>
    af8a:	31 11       	cpse	r19, r1
    af8c:	57 c1       	rjmp	.+686    	; 0xb23c <follow_path+0x41c>
    af8e:	f8 86       	std	Y+8, r15	; 0x08
    af90:	ef 82       	std	Y+7, r14	; 0x07
    af92:	d8 01       	movw	r26, r16
    af94:	ed 91       	ld	r30, X+
    af96:	fc 91       	ld	r31, X
    af98:	a3 84       	ldd	r10, Z+11	; 0x0b
    af9a:	b4 84       	ldd	r11, Z+12	; 0x0c
    af9c:	45 01       	movw	r8, r10
    af9e:	65 01       	movw	r12, r10
    afa0:	ef 80       	ldd	r14, Y+7	; 0x07
    afa2:	f8 84       	ldd	r15, Y+8	; 0x08
    afa4:	18 86       	std	Y+8, r1	; 0x08
    afa6:	1f 82       	std	Y+7, r1	; 0x07
    afa8:	ae cf       	rjmp	.-164    	; 0xaf06 <follow_path+0xe6>
    afaa:	97 01       	movw	r18, r14
    afac:	06 c0       	rjmp	.+12     	; 0xafba <follow_path+0x19a>
    afae:	30 e0       	ldi	r19, 0x00	; 0
    afb0:	82 17       	cp	r24, r18
    afb2:	93 07       	cpc	r25, r19
    afb4:	09 f0       	breq	.+2      	; 0xafb8 <follow_path+0x198>
    afb6:	97 cf       	rjmp	.-210    	; 0xaee6 <follow_path+0xc6>
    afb8:	3e c1       	rjmp	.+636    	; 0xb236 <follow_path+0x416>
    afba:	79 01       	movw	r14, r18
    afbc:	f9 01       	movw	r30, r18
    afbe:	80 81       	ld	r24, Z
    afc0:	2f 5f       	subi	r18, 0xFF	; 255
    afc2:	3f 4f       	sbci	r19, 0xFF	; 255
    afc4:	8f 32       	cpi	r24, 0x2F	; 47
    afc6:	c9 f3       	breq	.-14     	; 0xafba <follow_path+0x19a>
    afc8:	8c 35       	cpi	r24, 0x5C	; 92
    afca:	b9 f3       	breq	.-18     	; 0xafba <follow_path+0x19a>
    afcc:	31 2c       	mov	r3, r1
    afce:	a6 cf       	rjmp	.-180    	; 0xaf1c <follow_path+0xfc>
    afd0:	ef 81       	ldd	r30, Y+7	; 0x07
    afd2:	f8 85       	ldd	r31, Y+8	; 0x08
    afd4:	32 97       	sbiw	r30, 0x02	; 2
    afd6:	41 f4       	brne	.+16     	; 0xafe8 <follow_path+0x1c8>
    afd8:	f5 01       	movw	r30, r10
    afda:	82 81       	ldd	r24, Z+2	; 0x02
    afdc:	93 81       	ldd	r25, Z+3	; 0x03
    afde:	8e 97       	sbiw	r24, 0x2e	; 46
    afe0:	19 f4       	brne	.+6      	; 0xafe8 <follow_path+0x1c8>
    afe2:	80 81       	ld	r24, Z
    afe4:	91 81       	ldd	r25, Z+1	; 0x01
    afe6:	a6 cf       	rjmp	.-180    	; 0xaf34 <follow_path+0x114>
    afe8:	f9 01       	movw	r30, r18
    afea:	ea 0d       	add	r30, r10
    afec:	fb 1d       	adc	r31, r11
    afee:	0d c0       	rjmp	.+26     	; 0xb00a <follow_path+0x1ea>
    aff0:	20 e2       	ldi	r18, 0x20	; 32
    aff2:	b3 cf       	rjmp	.-154    	; 0xaf5a <follow_path+0x13a>
    aff4:	92 91       	ld	r25, -Z
    aff6:	82 91       	ld	r24, -Z
    aff8:	80 32       	cpi	r24, 0x20	; 32
    affa:	91 05       	cpc	r25, r1
    affc:	59 f4       	brne	.+22     	; 0xb014 <follow_path+0x1f4>
    affe:	2f 81       	ldd	r18, Y+7	; 0x07
    b000:	38 85       	ldd	r19, Y+8	; 0x08
    b002:	21 50       	subi	r18, 0x01	; 1
    b004:	31 09       	sbc	r19, r1
    b006:	38 87       	std	Y+8, r19	; 0x08
    b008:	2f 83       	std	Y+7, r18	; 0x07
    b00a:	8f 81       	ldd	r24, Y+7	; 0x07
    b00c:	98 85       	ldd	r25, Y+8	; 0x08
    b00e:	89 2b       	or	r24, r25
    b010:	89 f7       	brne	.-30     	; 0xaff4 <follow_path+0x1d4>
    b012:	02 c0       	rjmp	.+4      	; 0xb018 <follow_path+0x1f8>
    b014:	8e 97       	sbiw	r24, 0x2e	; 46
    b016:	99 f3       	breq	.-26     	; 0xaffe <follow_path+0x1de>
    b018:	ef 81       	ldd	r30, Y+7	; 0x07
    b01a:	f8 85       	ldd	r31, Y+8	; 0x08
    b01c:	ee 0f       	add	r30, r30
    b01e:	ff 1f       	adc	r31, r31
    b020:	ea 0d       	add	r30, r10
    b022:	fb 1d       	adc	r31, r11
    b024:	11 82       	std	Z+1, r1	; 0x01
    b026:	10 82       	st	Z, r1
    b028:	af 81       	ldd	r26, Y+7	; 0x07
    b02a:	b8 85       	ldd	r27, Y+8	; 0x08
    b02c:	ab 2b       	or	r26, r27
    b02e:	09 f4       	brne	.+2      	; 0xb032 <follow_path+0x212>
    b030:	02 c1       	rjmp	.+516    	; 0xb236 <follow_path+0x416>
    b032:	61 2c       	mov	r6, r1
    b034:	71 2c       	mov	r7, r1
    b036:	d4 01       	movw	r26, r8
    b038:	8d 91       	ld	r24, X+
    b03a:	9d 91       	ld	r25, X+
    b03c:	4d 01       	movw	r8, r26
    b03e:	80 32       	cpi	r24, 0x20	; 32
    b040:	91 05       	cpc	r25, r1
    b042:	21 f4       	brne	.+8      	; 0xb04c <follow_path+0x22c>
    b044:	bf ef       	ldi	r27, 0xFF	; 255
    b046:	6b 1a       	sub	r6, r27
    b048:	7b 0a       	sbc	r7, r27
    b04a:	f5 cf       	rjmp	.-22     	; 0xb036 <follow_path+0x216>
    b04c:	61 14       	cp	r6, r1
    b04e:	71 04       	cpc	r7, r1
    b050:	11 f4       	brne	.+4      	; 0xb056 <follow_path+0x236>
    b052:	8e 97       	sbiw	r24, 0x2e	; 46
    b054:	61 f4       	brne	.+24     	; 0xb06e <follow_path+0x24e>
    b056:	b3 2d       	mov	r27, r3
    b058:	b3 60       	ori	r27, 0x03	; 3
    b05a:	3b 2e       	mov	r3, r27
    b05c:	08 c0       	rjmp	.+16     	; 0xb06e <follow_path+0x24e>
    b05e:	2f 81       	ldd	r18, Y+7	; 0x07
    b060:	38 85       	ldd	r19, Y+8	; 0x08
    b062:	21 50       	subi	r18, 0x01	; 1
    b064:	31 09       	sbc	r19, r1
    b066:	38 87       	std	Y+8, r19	; 0x08
    b068:	2f 83       	std	Y+7, r18	; 0x07
    b06a:	23 2b       	or	r18, r19
    b06c:	21 f0       	breq	.+8      	; 0xb076 <follow_path+0x256>
    b06e:	92 91       	ld	r25, -Z
    b070:	82 91       	ld	r24, -Z
    b072:	8e 97       	sbiw	r24, 0x2e	; 46
    b074:	a1 f7       	brne	.-24     	; 0xb05e <follow_path+0x23e>
    b076:	4b e0       	ldi	r20, 0x0B	; 11
    b078:	50 e0       	ldi	r21, 0x00	; 0
    b07a:	60 e2       	ldi	r22, 0x20	; 32
    b07c:	70 e0       	ldi	r23, 0x00	; 0
    b07e:	8b 81       	ldd	r24, Y+3	; 0x03
    b080:	9c 81       	ldd	r25, Y+4	; 0x04
    b082:	0e 94 a1 47 	call	0x8f42	; 0x8f42 <mem_set>
    b086:	48 e0       	ldi	r20, 0x08	; 8
    b088:	84 2e       	mov	r8, r20
    b08a:	91 2c       	mov	r9, r1
    b08c:	c1 2c       	mov	r12, r1
    b08e:	d1 2c       	mov	r13, r1
    b090:	21 2c       	mov	r2, r1
    b092:	23 01       	movw	r4, r6
    b094:	3f ef       	ldi	r19, 0xFF	; 255
    b096:	43 1a       	sub	r4, r19
    b098:	53 0a       	sbc	r5, r19
    b09a:	66 0c       	add	r6, r6
    b09c:	77 1c       	adc	r7, r7
    b09e:	f5 01       	movw	r30, r10
    b0a0:	e6 0d       	add	r30, r6
    b0a2:	f7 1d       	adc	r31, r7
    b0a4:	80 81       	ld	r24, Z
    b0a6:	91 81       	ldd	r25, Z+1	; 0x01
    b0a8:	00 97       	sbiw	r24, 0x00	; 0
    b0aa:	09 f4       	brne	.+2      	; 0xb0ae <follow_path+0x28e>
    b0ac:	9e c0       	rjmp	.+316    	; 0xb1ea <follow_path+0x3ca>
    b0ae:	80 32       	cpi	r24, 0x20	; 32
    b0b0:	91 05       	cpc	r25, r1
    b0b2:	41 f0       	breq	.+16     	; 0xb0c4 <follow_path+0x2a4>
    b0b4:	8e 32       	cpi	r24, 0x2E	; 46
    b0b6:	91 05       	cpc	r25, r1
    b0b8:	51 f4       	brne	.+20     	; 0xb0ce <follow_path+0x2ae>
    b0ba:	8f 81       	ldd	r24, Y+7	; 0x07
    b0bc:	98 85       	ldd	r25, Y+8	; 0x08
    b0be:	84 15       	cp	r24, r4
    b0c0:	95 05       	cpc	r25, r5
    b0c2:	71 f0       	breq	.+28     	; 0xb0e0 <follow_path+0x2c0>
    b0c4:	93 2d       	mov	r25, r3
    b0c6:	93 60       	ori	r25, 0x03	; 3
    b0c8:	39 2e       	mov	r3, r25
    b0ca:	32 01       	movw	r6, r4
    b0cc:	e2 cf       	rjmp	.-60     	; 0xb092 <follow_path+0x272>
    b0ce:	c8 14       	cp	r12, r8
    b0d0:	d9 04       	cpc	r13, r9
    b0d2:	50 f4       	brcc	.+20     	; 0xb0e8 <follow_path+0x2c8>
    b0d4:	af 81       	ldd	r26, Y+7	; 0x07
    b0d6:	b8 85       	ldd	r27, Y+8	; 0x08
    b0d8:	a4 15       	cp	r26, r4
    b0da:	b5 05       	cpc	r27, r5
    b0dc:	49 f5       	brne	.+82     	; 0xb130 <follow_path+0x310>
    b0de:	d2 c0       	rjmp	.+420    	; 0xb284 <follow_path+0x464>
    b0e0:	c8 14       	cp	r12, r8
    b0e2:	d9 04       	cpc	r13, r9
    b0e4:	08 f4       	brcc	.+2      	; 0xb0e8 <follow_path+0x2c8>
    b0e6:	ce c0       	rjmp	.+412    	; 0xb284 <follow_path+0x464>
    b0e8:	bb e0       	ldi	r27, 0x0B	; 11
    b0ea:	8b 16       	cp	r8, r27
    b0ec:	91 04       	cpc	r9, r1
    b0ee:	39 f4       	brne	.+14     	; 0xb0fe <follow_path+0x2de>
    b0f0:	e3 2d       	mov	r30, r3
    b0f2:	e3 60       	ori	r30, 0x03	; 3
    b0f4:	3e 2e       	mov	r3, r30
    b0f6:	2b e0       	ldi	r18, 0x0B	; 11
    b0f8:	82 2e       	mov	r8, r18
    b0fa:	91 2c       	mov	r9, r1
    b0fc:	76 c0       	rjmp	.+236    	; 0xb1ea <follow_path+0x3ca>
    b0fe:	2f 81       	ldd	r18, Y+7	; 0x07
    b100:	38 85       	ldd	r19, Y+8	; 0x08
    b102:	24 15       	cp	r18, r4
    b104:	35 05       	cpc	r19, r5
    b106:	49 f0       	breq	.+18     	; 0xb11a <follow_path+0x2fa>
    b108:	33 2d       	mov	r19, r3
    b10a:	33 60       	ori	r19, 0x03	; 3
    b10c:	33 2e       	mov	r3, r19
    b10e:	8f 81       	ldd	r24, Y+7	; 0x07
    b110:	98 85       	ldd	r25, Y+8	; 0x08
    b112:	84 15       	cp	r24, r4
    b114:	95 05       	cpc	r25, r5
    b116:	08 f4       	brcc	.+2      	; 0xb11a <follow_path+0x2fa>
    b118:	68 c0       	rjmp	.+208    	; 0xb1ea <follow_path+0x3ca>
    b11a:	22 0c       	add	r2, r2
    b11c:	22 0c       	add	r2, r2
    b11e:	4f 80       	ldd	r4, Y+7	; 0x07
    b120:	58 84       	ldd	r5, Y+8	; 0x08
    b122:	8b e0       	ldi	r24, 0x0B	; 11
    b124:	88 2e       	mov	r8, r24
    b126:	91 2c       	mov	r9, r1
    b128:	98 e0       	ldi	r25, 0x08	; 8
    b12a:	c9 2e       	mov	r12, r25
    b12c:	d1 2c       	mov	r13, r1
    b12e:	cd cf       	rjmp	.-102    	; 0xb0ca <follow_path+0x2aa>
    b130:	80 38       	cpi	r24, 0x80	; 128
    b132:	91 05       	cpc	r25, r1
    b134:	70 f1       	brcs	.+92     	; 0xb192 <follow_path+0x372>
    b136:	a3 2d       	mov	r26, r3
    b138:	a2 60       	ori	r26, 0x02	; 2
    b13a:	7a 2e       	mov	r7, r26
    b13c:	bc 01       	movw	r22, r24
    b13e:	80 e0       	ldi	r24, 0x00	; 0
    b140:	90 e0       	ldi	r25, 0x00	; 0
    b142:	45 eb       	ldi	r20, 0xB5	; 181
    b144:	51 e0       	ldi	r21, 0x01	; 1
    b146:	0e 94 c4 68 	call	0xd188	; 0xd188 <ff_uni2oem>
    b14a:	87 ff       	sbrs	r24, 7
    b14c:	08 c0       	rjmp	.+16     	; 0xb15e <follow_path+0x33e>
    b14e:	8f 77       	andi	r24, 0x7F	; 127
    b150:	99 27       	eor	r25, r25
    b152:	fc 01       	movw	r30, r24
    b154:	e5 59       	subi	r30, 0x95	; 149
    b156:	fb 4f       	sbci	r31, 0xFB	; 251
    b158:	80 81       	ld	r24, Z
    b15a:	90 e0       	ldi	r25, 0x00	; 0
    b15c:	17 c0       	rjmp	.+46     	; 0xb18c <follow_path+0x36c>
    b15e:	8f 3f       	cpi	r24, 0xFF	; 255
    b160:	91 05       	cpc	r25, r1
    b162:	a1 f0       	breq	.+40     	; 0xb18c <follow_path+0x36c>
    b164:	98 f0       	brcs	.+38     	; 0xb18c <follow_path+0x36c>
    b166:	94 01       	movw	r18, r8
    b168:	21 50       	subi	r18, 0x01	; 1
    b16a:	31 09       	sbc	r19, r1
    b16c:	c2 16       	cp	r12, r18
    b16e:	d3 06       	cpc	r13, r19
    b170:	28 f0       	brcs	.+10     	; 0xb17c <follow_path+0x35c>
    b172:	b3 2d       	mov	r27, r3
    b174:	b3 60       	ori	r27, 0x03	; 3
    b176:	3b 2e       	mov	r3, r27
    b178:	64 01       	movw	r12, r8
    b17a:	a7 cf       	rjmp	.-178    	; 0xb0ca <follow_path+0x2aa>
    b17c:	f8 01       	movw	r30, r16
    b17e:	ec 0d       	add	r30, r12
    b180:	fd 1d       	adc	r31, r13
    b182:	94 8f       	std	Z+28, r25	; 0x1c
    b184:	f6 01       	movw	r30, r12
    b186:	31 96       	adiw	r30, 0x01	; 1
    b188:	6f 01       	movw	r12, r30
    b18a:	26 c0       	rjmp	.+76     	; 0xb1d8 <follow_path+0x3b8>
    b18c:	00 97       	sbiw	r24, 0x00	; 0
    b18e:	59 f0       	breq	.+22     	; 0xb1a6 <follow_path+0x386>
    b190:	01 c0       	rjmp	.+2      	; 0xb194 <follow_path+0x374>
    b192:	73 2c       	mov	r7, r3
    b194:	e0 e3       	ldi	r30, 0x30	; 48
    b196:	f4 e0       	ldi	r31, 0x04	; 4
    b198:	21 91       	ld	r18, Z+
    b19a:	22 23       	and	r18, r18
    b19c:	51 f0       	breq	.+20     	; 0xb1b2 <follow_path+0x392>
    b19e:	30 e0       	ldi	r19, 0x00	; 0
    b1a0:	82 17       	cp	r24, r18
    b1a2:	93 07       	cpc	r25, r19
    b1a4:	c9 f7       	brne	.-14     	; 0xb198 <follow_path+0x378>
    b1a6:	f7 2d       	mov	r31, r7
    b1a8:	f3 60       	ori	r31, 0x03	; 3
    b1aa:	7f 2e       	mov	r7, r31
    b1ac:	8f e5       	ldi	r24, 0x5F	; 95
    b1ae:	90 e0       	ldi	r25, 0x00	; 0
    b1b0:	13 c0       	rjmp	.+38     	; 0xb1d8 <follow_path+0x3b8>
    b1b2:	9c 01       	movw	r18, r24
    b1b4:	21 54       	subi	r18, 0x41	; 65
    b1b6:	31 09       	sbc	r19, r1
    b1b8:	2a 31       	cpi	r18, 0x1A	; 26
    b1ba:	31 05       	cpc	r19, r1
    b1bc:	18 f4       	brcc	.+6      	; 0xb1c4 <follow_path+0x3a4>
    b1be:	22 2d       	mov	r18, r2
    b1c0:	22 60       	ori	r18, 0x02	; 2
    b1c2:	22 2e       	mov	r2, r18
    b1c4:	9c 01       	movw	r18, r24
    b1c6:	21 56       	subi	r18, 0x61	; 97
    b1c8:	31 09       	sbc	r19, r1
    b1ca:	2a 31       	cpi	r18, 0x1A	; 26
    b1cc:	31 05       	cpc	r19, r1
    b1ce:	20 f4       	brcc	.+8      	; 0xb1d8 <follow_path+0x3b8>
    b1d0:	32 2d       	mov	r19, r2
    b1d2:	31 60       	ori	r19, 0x01	; 1
    b1d4:	23 2e       	mov	r2, r19
    b1d6:	80 97       	sbiw	r24, 0x20	; 32
    b1d8:	f8 01       	movw	r30, r16
    b1da:	ec 0d       	add	r30, r12
    b1dc:	fd 1d       	adc	r31, r13
    b1de:	84 8f       	std	Z+28, r24	; 0x1c
    b1e0:	c6 01       	movw	r24, r12
    b1e2:	01 96       	adiw	r24, 0x01	; 1
    b1e4:	6c 01       	movw	r12, r24
    b1e6:	37 2c       	mov	r3, r7
    b1e8:	70 cf       	rjmp	.-288    	; 0xb0ca <follow_path+0x2aa>
    b1ea:	f8 01       	movw	r30, r16
    b1ec:	84 8d       	ldd	r24, Z+28	; 0x1c
    b1ee:	85 3e       	cpi	r24, 0xE5	; 229
    b1f0:	11 f4       	brne	.+4      	; 0xb1f6 <follow_path+0x3d6>
    b1f2:	25 e0       	ldi	r18, 0x05	; 5
    b1f4:	24 8f       	std	Z+28, r18	; 0x1c
    b1f6:	38 e0       	ldi	r19, 0x08	; 8
    b1f8:	83 16       	cp	r8, r19
    b1fa:	91 04       	cpc	r9, r1
    b1fc:	11 f4       	brne	.+4      	; 0xb202 <follow_path+0x3e2>
    b1fe:	22 0c       	add	r2, r2
    b200:	22 0c       	add	r2, r2
    b202:	82 2d       	mov	r24, r2
    b204:	8c 70       	andi	r24, 0x0C	; 12
    b206:	8c 30       	cpi	r24, 0x0C	; 12
    b208:	21 f0       	breq	.+8      	; 0xb212 <follow_path+0x3f2>
    b20a:	82 2d       	mov	r24, r2
    b20c:	83 70       	andi	r24, 0x03	; 3
    b20e:	83 30       	cpi	r24, 0x03	; 3
    b210:	19 f4       	brne	.+6      	; 0xb218 <follow_path+0x3f8>
    b212:	83 2d       	mov	r24, r3
    b214:	82 60       	ori	r24, 0x02	; 2
    b216:	38 2e       	mov	r3, r24
    b218:	31 fc       	sbrc	r3, 1
    b21a:	0a c0       	rjmp	.+20     	; 0xb230 <follow_path+0x410>
    b21c:	20 fe       	sbrs	r2, 0
    b21e:	03 c0       	rjmp	.+6      	; 0xb226 <follow_path+0x406>
    b220:	93 2d       	mov	r25, r3
    b222:	90 61       	ori	r25, 0x10	; 16
    b224:	39 2e       	mov	r3, r25
    b226:	22 fe       	sbrs	r2, 2
    b228:	03 c0       	rjmp	.+6      	; 0xb230 <follow_path+0x410>
    b22a:	a3 2d       	mov	r26, r3
    b22c:	a8 60       	ori	r26, 0x08	; 8
    b22e:	3a 2e       	mov	r3, r26
    b230:	f8 01       	movw	r30, r16
    b232:	37 a2       	std	Z+39, r3	; 0x27
    b234:	9b ce       	rjmp	.-714    	; 0xaf6c <follow_path+0x14c>
    b236:	86 e0       	ldi	r24, 0x06	; 6
    b238:	90 e0       	ldi	r25, 0x00	; 0
    b23a:	2a c0       	rjmp	.+84     	; 0xb290 <follow_path+0x470>
    b23c:	80 e8       	ldi	r24, 0x80	; 128
    b23e:	f8 01       	movw	r30, r16
    b240:	87 a3       	std	Z+39, r24	; 0x27
    b242:	80 e0       	ldi	r24, 0x00	; 0
    b244:	90 e0       	ldi	r25, 0x00	; 0
    b246:	24 c0       	rjmp	.+72     	; 0xb290 <follow_path+0x470>
    b248:	33 23       	and	r19, r19
    b24a:	c9 f0       	breq	.+50     	; 0xb27e <follow_path+0x45e>
    b24c:	21 c0       	rjmp	.+66     	; 0xb290 <follow_path+0x470>
    b24e:	22 fd       	sbrc	r18, 2
    b250:	1f c0       	rjmp	.+62     	; 0xb290 <follow_path+0x470>
    b252:	f8 01       	movw	r30, r16
    b254:	84 81       	ldd	r24, Z+4	; 0x04
    b256:	84 ff       	sbrs	r24, 4
    b258:	12 c0       	rjmp	.+36     	; 0xb27e <follow_path+0x45e>
    b25a:	66 85       	ldd	r22, Z+14	; 0x0e
    b25c:	77 85       	ldd	r23, Z+15	; 0x0f
    b25e:	71 70       	andi	r23, 0x01	; 1
    b260:	2d 81       	ldd	r18, Y+5	; 0x05
    b262:	3e 81       	ldd	r19, Y+6	; 0x06
    b264:	62 0f       	add	r22, r18
    b266:	73 1f       	adc	r23, r19
    b268:	a9 81       	ldd	r26, Y+1	; 0x01
    b26a:	ba 81       	ldd	r27, Y+2	; 0x02
    b26c:	8c 91       	ld	r24, X
    b26e:	0e 94 b9 49 	call	0x9372	; 0x9372 <ld_clust.isra.3>
    b272:	f8 01       	movw	r30, r16
    b274:	66 83       	std	Z+6, r22	; 0x06
    b276:	77 83       	std	Z+7, r23	; 0x07
    b278:	80 87       	std	Z+8, r24	; 0x08
    b27a:	91 87       	std	Z+9, r25	; 0x09
    b27c:	88 ce       	rjmp	.-752    	; 0xaf8e <follow_path+0x16e>
    b27e:	85 e0       	ldi	r24, 0x05	; 5
    b280:	90 e0       	ldi	r25, 0x00	; 0
    b282:	06 c0       	rjmp	.+12     	; 0xb290 <follow_path+0x470>
    b284:	fb e0       	ldi	r31, 0x0B	; 11
    b286:	8f 16       	cp	r8, r31
    b288:	91 04       	cpc	r9, r1
    b28a:	09 f0       	breq	.+2      	; 0xb28e <follow_path+0x46e>
    b28c:	46 cf       	rjmp	.-372    	; 0xb11a <follow_path+0x2fa>
    b28e:	30 cf       	rjmp	.-416    	; 0xb0f0 <follow_path+0x2d0>
    b290:	28 96       	adiw	r28, 0x08	; 8
    b292:	e2 e1       	ldi	r30, 0x12	; 18
    b294:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0000b298 <f_mount>:
    b298:	a6 e0       	ldi	r26, 0x06	; 6
    b29a:	b0 e0       	ldi	r27, 0x00	; 0
    b29c:	e2 e5       	ldi	r30, 0x52	; 82
    b29e:	f9 e5       	ldi	r31, 0x59	; 89
    b2a0:	0c 94 c2 e6 	jmp	0x1cd84	; 0x1cd84 <__prologue_saves__+0x1e>
    b2a4:	9c 83       	std	Y+4, r25	; 0x04
    b2a6:	8b 83       	std	Y+3, r24	; 0x03
    b2a8:	7e 83       	std	Y+6, r23	; 0x06
    b2aa:	6d 83       	std	Y+5, r22	; 0x05
    b2ac:	14 2f       	mov	r17, r20
    b2ae:	7a 83       	std	Y+2, r23	; 0x02
    b2b0:	69 83       	std	Y+1, r22	; 0x01
    b2b2:	ce 01       	movw	r24, r28
    b2b4:	01 96       	adiw	r24, 0x01	; 1
    b2b6:	0e 94 2c 48 	call	0x9058	; 0x9058 <get_ldnumber>
    b2ba:	97 fd       	sbrc	r25, 7
    b2bc:	20 c0       	rjmp	.+64     	; 0xb2fe <f_mount+0x66>
    b2be:	88 0f       	add	r24, r24
    b2c0:	99 1f       	adc	r25, r25
    b2c2:	fc 01       	movw	r30, r24
    b2c4:	e7 5d       	subi	r30, 0xD7	; 215
    b2c6:	f7 4e       	sbci	r31, 0xE7	; 231
    b2c8:	01 90       	ld	r0, Z+
    b2ca:	f0 81       	ld	r31, Z
    b2cc:	e0 2d       	mov	r30, r0
    b2ce:	30 97       	sbiw	r30, 0x00	; 0
    b2d0:	09 f0       	breq	.+2      	; 0xb2d4 <f_mount+0x3c>
    b2d2:	10 82       	st	Z, r1
    b2d4:	eb 81       	ldd	r30, Y+3	; 0x03
    b2d6:	fc 81       	ldd	r31, Y+4	; 0x04
    b2d8:	30 97       	sbiw	r30, 0x00	; 0
    b2da:	09 f0       	breq	.+2      	; 0xb2de <f_mount+0x46>
    b2dc:	10 82       	st	Z, r1
    b2de:	dc 01       	movw	r26, r24
    b2e0:	a7 5d       	subi	r26, 0xD7	; 215
    b2e2:	b7 4e       	sbci	r27, 0xE7	; 231
    b2e4:	ed 93       	st	X+, r30
    b2e6:	fc 93       	st	X, r31
    b2e8:	11 23       	and	r17, r17
    b2ea:	61 f0       	breq	.+24     	; 0xb304 <f_mount+0x6c>
    b2ec:	40 e0       	ldi	r20, 0x00	; 0
    b2ee:	be 01       	movw	r22, r28
    b2f0:	6d 5f       	subi	r22, 0xFD	; 253
    b2f2:	7f 4f       	sbci	r23, 0xFF	; 255
    b2f4:	ce 01       	movw	r24, r28
    b2f6:	05 96       	adiw	r24, 0x05	; 5
    b2f8:	0e 94 c3 4b 	call	0x9786	; 0x9786 <mount_volume>
    b2fc:	05 c0       	rjmp	.+10     	; 0xb308 <f_mount+0x70>
    b2fe:	8b e0       	ldi	r24, 0x0B	; 11
    b300:	90 e0       	ldi	r25, 0x00	; 0
    b302:	02 c0       	rjmp	.+4      	; 0xb308 <f_mount+0x70>
    b304:	80 e0       	ldi	r24, 0x00	; 0
    b306:	90 e0       	ldi	r25, 0x00	; 0
    b308:	26 96       	adiw	r28, 0x06	; 6
    b30a:	e3 e0       	ldi	r30, 0x03	; 3
    b30c:	0c 94 de e6 	jmp	0x1cdbc	; 0x1cdbc <__epilogue_restores__+0x1e>

0000b310 <f_open>:
    b310:	a6 e3       	ldi	r26, 0x36	; 54
    b312:	b0 e0       	ldi	r27, 0x00	; 0
    b314:	ee e8       	ldi	r30, 0x8E	; 142
    b316:	f9 e5       	ldi	r31, 0x59	; 89
    b318:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    b31c:	7a ab       	std	Y+50, r23	; 0x32
    b31e:	69 ab       	std	Y+49, r22	; 0x31
    b320:	00 97       	sbiw	r24, 0x00	; 0
    b322:	09 f4       	brne	.+2      	; 0xb326 <f_open+0x16>
    b324:	93 c1       	rjmp	.+806    	; 0xb64c <f_open+0x33c>
    b326:	74 2e       	mov	r7, r20
    b328:	7c 01       	movw	r14, r24
    b32a:	24 2f       	mov	r18, r20
    b32c:	2f 73       	andi	r18, 0x3F	; 63
    b32e:	32 2e       	mov	r3, r18
    b330:	42 2f       	mov	r20, r18
    b332:	be 01       	movw	r22, r28
    b334:	61 5d       	subi	r22, 0xD1	; 209
    b336:	7f 4f       	sbci	r23, 0xFF	; 255
    b338:	ce 01       	movw	r24, r28
    b33a:	c1 96       	adiw	r24, 0x31	; 49
    b33c:	0e 94 c3 4b 	call	0x9786	; 0x9786 <mount_volume>
    b340:	00 97       	sbiw	r24, 0x00	; 0
    b342:	09 f0       	breq	.+2      	; 0xb346 <f_open+0x36>
    b344:	7d c1       	rjmp	.+762    	; 0xb640 <f_open+0x330>
    b346:	8f a5       	ldd	r24, Y+47	; 0x2f
    b348:	98 a9       	ldd	r25, Y+48	; 0x30
    b34a:	9a 83       	std	Y+2, r25	; 0x02
    b34c:	89 83       	std	Y+1, r24	; 0x01
    b34e:	80 e0       	ldi	r24, 0x00	; 0
    b350:	92 e0       	ldi	r25, 0x02	; 2
    b352:	0e 94 be 68 	call	0xd17c	; 0xd17c <ff_memalloc>
    b356:	5c 01       	movw	r10, r24
    b358:	00 97       	sbiw	r24, 0x00	; 0
    b35a:	09 f4       	brne	.+2      	; 0xb35e <f_open+0x4e>
    b35c:	79 c1       	rjmp	.+754    	; 0xb650 <f_open+0x340>
    b35e:	ef a5       	ldd	r30, Y+47	; 0x2f
    b360:	f8 a9       	ldd	r31, Y+48	; 0x30
    b362:	94 87       	std	Z+12, r25	; 0x0c
    b364:	83 87       	std	Z+11, r24	; 0x0b
    b366:	69 a9       	ldd	r22, Y+49	; 0x31
    b368:	7a a9       	ldd	r23, Y+50	; 0x32
    b36a:	ce 01       	movw	r24, r28
    b36c:	01 96       	adiw	r24, 0x01	; 1
    b36e:	58 dd       	rcall	.-1360   	; 0xae20 <follow_path>
    b370:	8c 01       	movw	r16, r24
    b372:	89 2b       	or	r24, r25
    b374:	29 f4       	brne	.+10     	; 0xb380 <f_open+0x70>
    b376:	88 a5       	ldd	r24, Y+40	; 0x28
    b378:	87 ff       	sbrs	r24, 7
    b37a:	02 c0       	rjmp	.+4      	; 0xb380 <f_open+0x70>
    b37c:	06 e0       	ldi	r16, 0x06	; 6
    b37e:	10 e0       	ldi	r17, 0x00	; 0
    b380:	87 2d       	mov	r24, r7
    b382:	8c 71       	andi	r24, 0x1C	; 28
    b384:	09 f4       	brne	.+2      	; 0xb388 <f_open+0x78>
    b386:	75 c0       	rjmp	.+234    	; 0xb472 <f_open+0x162>
    b388:	01 15       	cp	r16, r1
    b38a:	11 05       	cpc	r17, r1
    b38c:	79 f0       	breq	.+30     	; 0xb3ac <f_open+0x9c>
    b38e:	04 30       	cpi	r16, 0x04	; 4
    b390:	11 05       	cpc	r17, r1
    b392:	09 f0       	breq	.+2      	; 0xb396 <f_open+0x86>
    b394:	6d c1       	rjmp	.+730    	; 0xb670 <f_open+0x360>
    b396:	ce 01       	movw	r24, r28
    b398:	01 96       	adiw	r24, 0x01	; 1
    b39a:	b4 db       	rcall	.-2200   	; 0xab04 <dir_register>
    b39c:	8c 01       	movw	r16, r24
    b39e:	89 2b       	or	r24, r25
    b3a0:	09 f0       	breq	.+2      	; 0xb3a4 <f_open+0x94>
    b3a2:	66 c1       	rjmp	.+716    	; 0xb670 <f_open+0x360>
    b3a4:	33 2d       	mov	r19, r3
    b3a6:	38 60       	ori	r19, 0x08	; 8
    b3a8:	33 2e       	mov	r3, r19
    b3aa:	06 c0       	rjmp	.+12     	; 0xb3b8 <f_open+0xa8>
    b3ac:	8d 81       	ldd	r24, Y+5	; 0x05
    b3ae:	81 71       	andi	r24, 0x11	; 17
    b3b0:	09 f0       	breq	.+2      	; 0xb3b4 <f_open+0xa4>
    b3b2:	5c c1       	rjmp	.+696    	; 0xb66c <f_open+0x35c>
    b3b4:	72 fc       	sbrc	r7, 2
    b3b6:	51 c1       	rjmp	.+674    	; 0xb65a <f_open+0x34a>
    b3b8:	33 fe       	sbrs	r3, 3
    b3ba:	6b c0       	rjmp	.+214    	; 0xb492 <f_open+0x182>
    b3bc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b3be:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b3c0:	ef a5       	ldd	r30, Y+47	; 0x2f
    b3c2:	f8 a9       	ldd	r31, Y+48	; 0x30
    b3c4:	b8 01       	movw	r22, r16
    b3c6:	80 81       	ld	r24, Z
    b3c8:	0e 94 b9 49 	call	0x9372	; 0x9372 <ld_clust.isra.3>
    b3cc:	2b 01       	movw	r4, r22
    b3ce:	3c 01       	movw	r6, r24
    b3d0:	0e 94 3f 70 	call	0xe07e	; 0xe07e <get_fattime>
    b3d4:	ab 01       	movw	r20, r22
    b3d6:	bc 01       	movw	r22, r24
    b3d8:	c8 01       	movw	r24, r16
    b3da:	0e 96       	adiw	r24, 0x0e	; 14
    b3dc:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <st_dword>
    b3e0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b3e2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b3e4:	80 e2       	ldi	r24, 0x20	; 32
    b3e6:	83 87       	std	Z+11, r24	; 0x0b
    b3e8:	af a5       	ldd	r26, Y+47	; 0x2f
    b3ea:	b8 a9       	ldd	r27, Y+48	; 0x30
    b3ec:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b3ee:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b3f0:	12 8e       	std	Z+26, r1	; 0x1a
    b3f2:	13 8e       	std	Z+27, r1	; 0x1b
    b3f4:	8c 91       	ld	r24, X
    b3f6:	83 30       	cpi	r24, 0x03	; 3
    b3f8:	11 f4       	brne	.+4      	; 0xb3fe <f_open+0xee>
    b3fa:	14 8a       	std	Z+20, r1	; 0x14
    b3fc:	15 8a       	std	Z+21, r1	; 0x15
    b3fe:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b400:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b402:	14 8e       	std	Z+28, r1	; 0x1c
    b404:	15 8e       	std	Z+29, r1	; 0x1d
    b406:	16 8e       	std	Z+30, r1	; 0x1e
    b408:	17 8e       	std	Z+31, r1	; 0x1f
    b40a:	81 e0       	ldi	r24, 0x01	; 1
    b40c:	fd 01       	movw	r30, r26
    b40e:	83 83       	std	Z+3, r24	; 0x03
    b410:	41 14       	cp	r4, r1
    b412:	51 04       	cpc	r5, r1
    b414:	61 04       	cpc	r6, r1
    b416:	71 04       	cpc	r7, r1
    b418:	c9 f1       	breq	.+114    	; 0xb48c <f_open+0x17c>
    b41a:	21 a9       	ldd	r18, Z+49	; 0x31
    b41c:	32 a9       	ldd	r19, Z+50	; 0x32
    b41e:	43 a9       	ldd	r20, Z+51	; 0x33
    b420:	54 a9       	ldd	r21, Z+52	; 0x34
    b422:	2b ab       	std	Y+51, r18	; 0x33
    b424:	3c ab       	std	Y+52, r19	; 0x34
    b426:	4d ab       	std	Y+53, r20	; 0x35
    b428:	5e ab       	std	Y+54, r21	; 0x36
    b42a:	00 e0       	ldi	r16, 0x00	; 0
    b42c:	10 e0       	ldi	r17, 0x00	; 0
    b42e:	98 01       	movw	r18, r16
    b430:	b3 01       	movw	r22, r6
    b432:	a2 01       	movw	r20, r4
    b434:	ce 01       	movw	r24, r28
    b436:	01 96       	adiw	r24, 0x01	; 1
    b438:	0e 94 b1 51 	call	0xa362	; 0xa362 <remove_chain>
    b43c:	8c 01       	movw	r16, r24
    b43e:	89 2b       	or	r24, r25
    b440:	09 f0       	breq	.+2      	; 0xb444 <f_open+0x134>
    b442:	16 c1       	rjmp	.+556    	; 0xb670 <f_open+0x360>
    b444:	4b a9       	ldd	r20, Y+51	; 0x33
    b446:	5c a9       	ldd	r21, Y+52	; 0x34
    b448:	6d a9       	ldd	r22, Y+53	; 0x35
    b44a:	7e a9       	ldd	r23, Y+54	; 0x36
    b44c:	8f a5       	ldd	r24, Y+47	; 0x2f
    b44e:	98 a9       	ldd	r25, Y+48	; 0x30
    b450:	0e 94 48 4b 	call	0x9690	; 0x9690 <move_window>
    b454:	8c 01       	movw	r16, r24
    b456:	ef a5       	ldd	r30, Y+47	; 0x2f
    b458:	f8 a9       	ldd	r31, Y+48	; 0x30
    b45a:	21 e0       	ldi	r18, 0x01	; 1
    b45c:	42 1a       	sub	r4, r18
    b45e:	51 08       	sbc	r5, r1
    b460:	61 08       	sbc	r6, r1
    b462:	71 08       	sbc	r7, r1
    b464:	45 86       	std	Z+13, r4	; 0x0d
    b466:	56 86       	std	Z+14, r5	; 0x0e
    b468:	67 86       	std	Z+15, r6	; 0x0f
    b46a:	70 8a       	std	Z+16, r7	; 0x10
    b46c:	89 2b       	or	r24, r25
    b46e:	61 f0       	breq	.+24     	; 0xb488 <f_open+0x178>
    b470:	ff c0       	rjmp	.+510    	; 0xb670 <f_open+0x360>
    b472:	01 15       	cp	r16, r1
    b474:	11 05       	cpc	r17, r1
    b476:	09 f0       	breq	.+2      	; 0xb47a <f_open+0x16a>
    b478:	fb c0       	rjmp	.+502    	; 0xb670 <f_open+0x360>
    b47a:	8d 81       	ldd	r24, Y+5	; 0x05
    b47c:	84 fd       	sbrc	r24, 4
    b47e:	f3 c0       	rjmp	.+486    	; 0xb666 <f_open+0x356>
    b480:	71 fe       	sbrs	r7, 1
    b482:	02 c0       	rjmp	.+4      	; 0xb488 <f_open+0x178>
    b484:	80 fd       	sbrc	r24, 0
    b486:	f2 c0       	rjmp	.+484    	; 0xb66c <f_open+0x35c>
    b488:	33 fe       	sbrs	r3, 3
    b48a:	03 c0       	rjmp	.+6      	; 0xb492 <f_open+0x182>
    b48c:	33 2d       	mov	r19, r3
    b48e:	30 64       	ori	r19, 0x40	; 64
    b490:	33 2e       	mov	r3, r19
    b492:	0f a5       	ldd	r16, Y+47	; 0x2f
    b494:	18 a9       	ldd	r17, Y+48	; 0x30
    b496:	f8 01       	movw	r30, r16
    b498:	81 a9       	ldd	r24, Z+49	; 0x31
    b49a:	92 a9       	ldd	r25, Z+50	; 0x32
    b49c:	a3 a9       	ldd	r26, Z+51	; 0x33
    b49e:	b4 a9       	ldd	r27, Z+52	; 0x34
    b4a0:	f7 01       	movw	r30, r14
    b4a2:	84 8f       	std	Z+28, r24	; 0x1c
    b4a4:	95 8f       	std	Z+29, r25	; 0x1d
    b4a6:	a6 8f       	std	Z+30, r26	; 0x1e
    b4a8:	b7 8f       	std	Z+31, r27	; 0x1f
    b4aa:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b4ac:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b4ae:	71 a2       	std	Z+33, r7	; 0x21
    b4b0:	60 a2       	std	Z+32, r6	; 0x20
    b4b2:	b3 01       	movw	r22, r6
    b4b4:	f8 01       	movw	r30, r16
    b4b6:	80 81       	ld	r24, Z
    b4b8:	0e 94 b9 49 	call	0x9372	; 0x9372 <ld_clust.isra.3>
    b4bc:	f7 01       	movw	r30, r14
    b4be:	66 83       	std	Z+6, r22	; 0x06
    b4c0:	77 83       	std	Z+7, r23	; 0x07
    b4c2:	80 87       	std	Z+8, r24	; 0x08
    b4c4:	91 87       	std	Z+9, r25	; 0x09
    b4c6:	c3 01       	movw	r24, r6
    b4c8:	4c 96       	adiw	r24, 0x1c	; 28
    b4ca:	0e 94 86 47 	call	0x8f0c	; 0x8f0c <ld_dword>
    b4ce:	f7 01       	movw	r30, r14
    b4d0:	62 87       	std	Z+10, r22	; 0x0a
    b4d2:	73 87       	std	Z+11, r23	; 0x0b
    b4d4:	84 87       	std	Z+12, r24	; 0x0c
    b4d6:	95 87       	std	Z+13, r25	; 0x0d
    b4d8:	13 a2       	std	Z+35, r1	; 0x23
    b4da:	12 a2       	std	Z+34, r1	; 0x22
    b4dc:	11 83       	std	Z+1, r17	; 0x01
    b4de:	00 83       	st	Z, r16
    b4e0:	f8 01       	movw	r30, r16
    b4e2:	85 81       	ldd	r24, Z+5	; 0x05
    b4e4:	96 81       	ldd	r25, Z+6	; 0x06
    b4e6:	f7 01       	movw	r30, r14
    b4e8:	93 83       	std	Z+3, r25	; 0x03
    b4ea:	82 83       	std	Z+2, r24	; 0x02
    b4ec:	36 86       	std	Z+14, r3	; 0x0e
    b4ee:	17 86       	std	Z+15, r1	; 0x0f
    b4f0:	10 8e       	std	Z+24, r1	; 0x18
    b4f2:	11 8e       	std	Z+25, r1	; 0x19
    b4f4:	12 8e       	std	Z+26, r1	; 0x1a
    b4f6:	13 8e       	std	Z+27, r1	; 0x1b
    b4f8:	10 8a       	std	Z+16, r1	; 0x10
    b4fa:	11 8a       	std	Z+17, r1	; 0x11
    b4fc:	12 8a       	std	Z+18, r1	; 0x12
    b4fe:	13 8a       	std	Z+19, r1	; 0x13
    b500:	67 01       	movw	r12, r14
    b502:	f4 e2       	ldi	r31, 0x24	; 36
    b504:	cf 0e       	add	r12, r31
    b506:	d1 1c       	adc	r13, r1
    b508:	40 e0       	ldi	r20, 0x00	; 0
    b50a:	52 e0       	ldi	r21, 0x02	; 2
    b50c:	60 e0       	ldi	r22, 0x00	; 0
    b50e:	70 e0       	ldi	r23, 0x00	; 0
    b510:	c6 01       	movw	r24, r12
    b512:	0e 94 a1 47 	call	0x8f42	; 0x8f42 <mem_set>
    b516:	35 fc       	sbrc	r3, 5
    b518:	03 c0       	rjmp	.+6      	; 0xb520 <f_open+0x210>
    b51a:	00 e0       	ldi	r16, 0x00	; 0
    b51c:	10 e0       	ldi	r17, 0x00	; 0
    b51e:	89 c0       	rjmp	.+274    	; 0xb632 <f_open+0x322>
    b520:	f7 01       	movw	r30, r14
    b522:	62 84       	ldd	r6, Z+10	; 0x0a
    b524:	73 84       	ldd	r7, Z+11	; 0x0b
    b526:	84 84       	ldd	r8, Z+12	; 0x0c
    b528:	95 84       	ldd	r9, Z+13	; 0x0d
    b52a:	61 14       	cp	r6, r1
    b52c:	71 04       	cpc	r7, r1
    b52e:	81 04       	cpc	r8, r1
    b530:	91 04       	cpc	r9, r1
    b532:	99 f3       	breq	.-26     	; 0xb51a <f_open+0x20a>
    b534:	60 8a       	std	Z+16, r6	; 0x10
    b536:	71 8a       	std	Z+17, r7	; 0x11
    b538:	82 8a       	std	Z+18, r8	; 0x12
    b53a:	93 8a       	std	Z+19, r9	; 0x13
    b53c:	ef a5       	ldd	r30, Y+47	; 0x2f
    b53e:	f8 a9       	ldd	r31, Y+48	; 0x30
    b540:	21 84       	ldd	r2, Z+9	; 0x09
    b542:	32 84       	ldd	r3, Z+10	; 0x0a
    b544:	c1 01       	movw	r24, r2
    b546:	a0 e0       	ldi	r26, 0x00	; 0
    b548:	b0 e0       	ldi	r27, 0x00	; 0
    b54a:	1c 01       	movw	r2, r24
    b54c:	2d 01       	movw	r4, r26
    b54e:	59 e0       	ldi	r21, 0x09	; 9
    b550:	22 0c       	add	r2, r2
    b552:	33 1c       	adc	r3, r3
    b554:	44 1c       	adc	r4, r4
    b556:	55 1c       	adc	r5, r5
    b558:	5a 95       	dec	r21
    b55a:	d1 f7       	brne	.-12     	; 0xb550 <f_open+0x240>
    b55c:	f7 01       	movw	r30, r14
    b55e:	46 81       	ldd	r20, Z+6	; 0x06
    b560:	57 81       	ldd	r21, Z+7	; 0x07
    b562:	60 85       	ldd	r22, Z+8	; 0x08
    b564:	71 85       	ldd	r23, Z+9	; 0x09
    b566:	26 14       	cp	r2, r6
    b568:	37 04       	cpc	r3, r7
    b56a:	48 04       	cpc	r4, r8
    b56c:	59 04       	cpc	r5, r9
    b56e:	f0 f4       	brcc	.+60     	; 0xb5ac <f_open+0x29c>
    b570:	f7 01       	movw	r30, r14
    b572:	80 81       	ld	r24, Z
    b574:	91 81       	ldd	r25, Z+1	; 0x01
    b576:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <get_fat.isra.9>
    b57a:	ab 01       	movw	r20, r22
    b57c:	bc 01       	movw	r22, r24
    b57e:	d4 01       	movw	r26, r8
    b580:	c3 01       	movw	r24, r6
    b582:	82 19       	sub	r24, r2
    b584:	93 09       	sbc	r25, r3
    b586:	a4 09       	sbc	r26, r4
    b588:	b5 09       	sbc	r27, r5
    b58a:	3c 01       	movw	r6, r24
    b58c:	4d 01       	movw	r8, r26
    b58e:	42 30       	cpi	r20, 0x02	; 2
    b590:	51 05       	cpc	r21, r1
    b592:	61 05       	cpc	r22, r1
    b594:	71 05       	cpc	r23, r1
    b596:	08 f4       	brcc	.+2      	; 0xb59a <f_open+0x28a>
    b598:	63 c0       	rjmp	.+198    	; 0xb660 <f_open+0x350>
    b59a:	4f 3f       	cpi	r20, 0xFF	; 255
    b59c:	ff ef       	ldi	r31, 0xFF	; 255
    b59e:	5f 07       	cpc	r21, r31
    b5a0:	6f 07       	cpc	r22, r31
    b5a2:	7f 07       	cpc	r23, r31
    b5a4:	01 f7       	brne	.-64     	; 0xb566 <f_open+0x256>
    b5a6:	01 e0       	ldi	r16, 0x01	; 1
    b5a8:	10 e0       	ldi	r17, 0x00	; 0
    b5aa:	02 c0       	rjmp	.+4      	; 0xb5b0 <f_open+0x2a0>
    b5ac:	00 e0       	ldi	r16, 0x00	; 0
    b5ae:	10 e0       	ldi	r17, 0x00	; 0
    b5b0:	f7 01       	movw	r30, r14
    b5b2:	44 8b       	std	Z+20, r20	; 0x14
    b5b4:	55 8b       	std	Z+21, r21	; 0x15
    b5b6:	66 8b       	std	Z+22, r22	; 0x16
    b5b8:	77 8b       	std	Z+23, r23	; 0x17
    b5ba:	01 15       	cp	r16, r1
    b5bc:	11 05       	cpc	r17, r1
    b5be:	c9 f5       	brne	.+114    	; 0xb632 <f_open+0x322>
    b5c0:	d4 01       	movw	r26, r8
    b5c2:	c3 01       	movw	r24, r6
    b5c4:	91 70       	andi	r25, 0x01	; 1
    b5c6:	aa 27       	eor	r26, r26
    b5c8:	bb 27       	eor	r27, r27
    b5ca:	89 2b       	or	r24, r25
    b5cc:	8a 2b       	or	r24, r26
    b5ce:	8b 2b       	or	r24, r27
    b5d0:	09 f4       	brne	.+2      	; 0xb5d4 <f_open+0x2c4>
    b5d2:	a3 cf       	rjmp	.-186    	; 0xb51a <f_open+0x20a>
    b5d4:	4f a4       	ldd	r4, Y+47	; 0x2f
    b5d6:	58 a8       	ldd	r5, Y+48	; 0x30
    b5d8:	c2 01       	movw	r24, r4
    b5da:	0e 94 b9 47 	call	0x8f72	; 0x8f72 <clst2sect>
    b5de:	61 15       	cp	r22, r1
    b5e0:	71 05       	cpc	r23, r1
    b5e2:	81 05       	cpc	r24, r1
    b5e4:	91 05       	cpc	r25, r1
    b5e6:	19 f1       	breq	.+70     	; 0xb62e <f_open+0x31e>
    b5e8:	94 01       	movw	r18, r8
    b5ea:	83 01       	movw	r16, r6
    b5ec:	49 e0       	ldi	r20, 0x09	; 9
    b5ee:	36 95       	lsr	r19
    b5f0:	27 95       	ror	r18
    b5f2:	17 95       	ror	r17
    b5f4:	07 95       	ror	r16
    b5f6:	4a 95       	dec	r20
    b5f8:	d1 f7       	brne	.-12     	; 0xb5ee <f_open+0x2de>
    b5fa:	a9 01       	movw	r20, r18
    b5fc:	98 01       	movw	r18, r16
    b5fe:	26 0f       	add	r18, r22
    b600:	37 1f       	adc	r19, r23
    b602:	48 1f       	adc	r20, r24
    b604:	59 1f       	adc	r21, r25
    b606:	f7 01       	movw	r30, r14
    b608:	20 8f       	std	Z+24, r18	; 0x18
    b60a:	31 8f       	std	Z+25, r19	; 0x19
    b60c:	42 8f       	std	Z+26, r20	; 0x1a
    b60e:	53 8f       	std	Z+27, r21	; 0x1b
    b610:	01 e0       	ldi	r16, 0x01	; 1
    b612:	10 e0       	ldi	r17, 0x00	; 0
    b614:	b6 01       	movw	r22, r12
    b616:	f2 01       	movw	r30, r4
    b618:	81 81       	ldd	r24, Z+1	; 0x01
    b61a:	0e 94 7a 69 	call	0xd2f4	; 0xd2f4 <disk_read>
    b61e:	31 e0       	ldi	r19, 0x01	; 1
    b620:	20 e0       	ldi	r18, 0x00	; 0
    b622:	89 2b       	or	r24, r25
    b624:	09 f4       	brne	.+2      	; 0xb628 <f_open+0x318>
    b626:	30 e0       	ldi	r19, 0x00	; 0
    b628:	03 2f       	mov	r16, r19
    b62a:	12 2f       	mov	r17, r18
    b62c:	02 c0       	rjmp	.+4      	; 0xb632 <f_open+0x322>
    b62e:	02 e0       	ldi	r16, 0x02	; 2
    b630:	10 e0       	ldi	r17, 0x00	; 0
    b632:	c5 01       	movw	r24, r10
    b634:	0e 94 c1 68 	call	0xd182	; 0xd182 <ff_memfree>
    b638:	01 15       	cp	r16, r1
    b63a:	11 05       	cpc	r17, r1
    b63c:	59 f0       	breq	.+22     	; 0xb654 <f_open+0x344>
    b63e:	01 c0       	rjmp	.+2      	; 0xb642 <f_open+0x332>
    b640:	8c 01       	movw	r16, r24
    b642:	f7 01       	movw	r30, r14
    b644:	11 82       	std	Z+1, r1	; 0x01
    b646:	10 82       	st	Z, r1
    b648:	c8 01       	movw	r24, r16
    b64a:	16 c0       	rjmp	.+44     	; 0xb678 <f_open+0x368>
    b64c:	89 e0       	ldi	r24, 0x09	; 9
    b64e:	03 c0       	rjmp	.+6      	; 0xb656 <f_open+0x346>
    b650:	81 e1       	ldi	r24, 0x11	; 17
    b652:	01 c0       	rjmp	.+2      	; 0xb656 <f_open+0x346>
    b654:	80 e0       	ldi	r24, 0x00	; 0
    b656:	90 e0       	ldi	r25, 0x00	; 0
    b658:	0f c0       	rjmp	.+30     	; 0xb678 <f_open+0x368>
    b65a:	08 e0       	ldi	r16, 0x08	; 8
    b65c:	10 e0       	ldi	r17, 0x00	; 0
    b65e:	08 c0       	rjmp	.+16     	; 0xb670 <f_open+0x360>
    b660:	02 e0       	ldi	r16, 0x02	; 2
    b662:	10 e0       	ldi	r17, 0x00	; 0
    b664:	a5 cf       	rjmp	.-182    	; 0xb5b0 <f_open+0x2a0>
    b666:	04 e0       	ldi	r16, 0x04	; 4
    b668:	10 e0       	ldi	r17, 0x00	; 0
    b66a:	02 c0       	rjmp	.+4      	; 0xb670 <f_open+0x360>
    b66c:	07 e0       	ldi	r16, 0x07	; 7
    b66e:	10 e0       	ldi	r17, 0x00	; 0
    b670:	c5 01       	movw	r24, r10
    b672:	0e 94 c1 68 	call	0xd182	; 0xd182 <ff_memfree>
    b676:	e5 cf       	rjmp	.-54     	; 0xb642 <f_open+0x332>
    b678:	e6 96       	adiw	r28, 0x36	; 54
    b67a:	e2 e1       	ldi	r30, 0x12	; 18
    b67c:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0000b680 <f_read>:
    b680:	a6 e0       	ldi	r26, 0x06	; 6
    b682:	b0 e0       	ldi	r27, 0x00	; 0
    b684:	e6 e4       	ldi	r30, 0x46	; 70
    b686:	fb e5       	ldi	r31, 0x5B	; 91
    b688:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    b68c:	7c 01       	movw	r14, r24
    b68e:	4b 01       	movw	r8, r22
    b690:	5a 01       	movw	r10, r20
    b692:	3e 83       	std	Y+6, r19	; 0x06
    b694:	2d 83       	std	Y+5, r18	; 0x05
    b696:	f9 01       	movw	r30, r18
    b698:	11 82       	std	Z+1, r1	; 0x01
    b69a:	10 82       	st	Z, r1
    b69c:	be 01       	movw	r22, r28
    b69e:	6f 5f       	subi	r22, 0xFF	; 255
    b6a0:	7f 4f       	sbci	r23, 0xFF	; 255
    b6a2:	0e 94 58 48 	call	0x90b0	; 0x90b0 <validate>
    b6a6:	00 97       	sbiw	r24, 0x00	; 0
    b6a8:	09 f0       	breq	.+2      	; 0xb6ac <f_read+0x2c>
    b6aa:	31 c1       	rjmp	.+610    	; 0xb90e <f_read+0x28e>
    b6ac:	f7 01       	movw	r30, r14
    b6ae:	87 85       	ldd	r24, Z+15	; 0x0f
    b6b0:	90 e0       	ldi	r25, 0x00	; 0
    b6b2:	00 97       	sbiw	r24, 0x00	; 0
    b6b4:	09 f0       	breq	.+2      	; 0xb6b8 <f_read+0x38>
    b6b6:	2b c1       	rjmp	.+598    	; 0xb90e <f_read+0x28e>
    b6b8:	86 85       	ldd	r24, Z+14	; 0x0e
    b6ba:	80 ff       	sbrs	r24, 0
    b6bc:	26 c1       	rjmp	.+588    	; 0xb90a <f_read+0x28a>
    b6be:	82 85       	ldd	r24, Z+10	; 0x0a
    b6c0:	93 85       	ldd	r25, Z+11	; 0x0b
    b6c2:	a4 85       	ldd	r26, Z+12	; 0x0c
    b6c4:	b5 85       	ldd	r27, Z+13	; 0x0d
    b6c6:	40 89       	ldd	r20, Z+16	; 0x10
    b6c8:	51 89       	ldd	r21, Z+17	; 0x11
    b6ca:	62 89       	ldd	r22, Z+18	; 0x12
    b6cc:	73 89       	ldd	r23, Z+19	; 0x13
    b6ce:	84 1b       	sub	r24, r20
    b6d0:	95 0b       	sbc	r25, r21
    b6d2:	a6 0b       	sbc	r26, r22
    b6d4:	b7 0b       	sbc	r27, r23
    b6d6:	a5 01       	movw	r20, r10
    b6d8:	60 e0       	ldi	r22, 0x00	; 0
    b6da:	70 e0       	ldi	r23, 0x00	; 0
    b6dc:	84 17       	cp	r24, r20
    b6de:	95 07       	cpc	r25, r21
    b6e0:	a6 07       	cpc	r26, r22
    b6e2:	b7 07       	cpc	r27, r23
    b6e4:	08 f4       	brcc	.+2      	; 0xb6e8 <f_read+0x68>
    b6e6:	5c 01       	movw	r10, r24
    b6e8:	17 01       	movw	r2, r14
    b6ea:	f4 e2       	ldi	r31, 0x24	; 36
    b6ec:	2f 0e       	add	r2, r31
    b6ee:	31 1c       	adc	r3, r1
    b6f0:	a1 14       	cp	r10, r1
    b6f2:	b1 04       	cpc	r11, r1
    b6f4:	09 f4       	brne	.+2      	; 0xb6f8 <f_read+0x78>
    b6f6:	07 c1       	rjmp	.+526    	; 0xb906 <f_read+0x286>
    b6f8:	f7 01       	movw	r30, r14
    b6fa:	40 89       	ldd	r20, Z+16	; 0x10
    b6fc:	51 89       	ldd	r21, Z+17	; 0x11
    b6fe:	62 89       	ldd	r22, Z+18	; 0x12
    b700:	73 89       	ldd	r23, Z+19	; 0x13
    b702:	db 01       	movw	r26, r22
    b704:	ca 01       	movw	r24, r20
    b706:	91 70       	andi	r25, 0x01	; 1
    b708:	aa 27       	eor	r26, r26
    b70a:	bb 27       	eor	r27, r27
    b70c:	89 2b       	or	r24, r25
    b70e:	8a 2b       	or	r24, r26
    b710:	8b 2b       	or	r24, r27
    b712:	09 f0       	breq	.+2      	; 0xb716 <f_read+0x96>
    b714:	cb c0       	rjmp	.+406    	; 0xb8ac <f_read+0x22c>
    b716:	e9 81       	ldd	r30, Y+1	; 0x01
    b718:	fa 81       	ldd	r31, Y+2	; 0x02
    b71a:	01 85       	ldd	r16, Z+9	; 0x09
    b71c:	12 85       	ldd	r17, Z+10	; 0x0a
    b71e:	01 50       	subi	r16, 0x01	; 1
    b720:	11 09       	sbc	r17, r1
    b722:	db 01       	movw	r26, r22
    b724:	ca 01       	movw	r24, r20
    b726:	e9 e0       	ldi	r30, 0x09	; 9
    b728:	b6 95       	lsr	r27
    b72a:	a7 95       	ror	r26
    b72c:	97 95       	ror	r25
    b72e:	87 95       	ror	r24
    b730:	ea 95       	dec	r30
    b732:	d1 f7       	brne	.-12     	; 0xb728 <f_read+0xa8>
    b734:	08 23       	and	r16, r24
    b736:	19 23       	and	r17, r25
    b738:	01 15       	cp	r16, r1
    b73a:	11 05       	cpc	r17, r1
    b73c:	91 f5       	brne	.+100    	; 0xb7a2 <f_read+0x122>
    b73e:	f7 01       	movw	r30, r14
    b740:	41 15       	cp	r20, r1
    b742:	51 05       	cpc	r21, r1
    b744:	61 05       	cpc	r22, r1
    b746:	71 05       	cpc	r23, r1
    b748:	29 f4       	brne	.+10     	; 0xb754 <f_read+0xd4>
    b74a:	66 81       	ldd	r22, Z+6	; 0x06
    b74c:	77 81       	ldd	r23, Z+7	; 0x07
    b74e:	80 85       	ldd	r24, Z+8	; 0x08
    b750:	91 85       	ldd	r25, Z+9	; 0x09
    b752:	11 c0       	rjmp	.+34     	; 0xb776 <f_read+0xf6>
    b754:	82 a1       	ldd	r24, Z+34	; 0x22
    b756:	93 a1       	ldd	r25, Z+35	; 0x23
    b758:	89 2b       	or	r24, r25
    b75a:	21 f0       	breq	.+8      	; 0xb764 <f_read+0xe4>
    b75c:	c7 01       	movw	r24, r14
    b75e:	0e 94 e1 47 	call	0x8fc2	; 0x8fc2 <clmt_clust>
    b762:	09 c0       	rjmp	.+18     	; 0xb776 <f_read+0xf6>
    b764:	f7 01       	movw	r30, r14
    b766:	44 89       	ldd	r20, Z+20	; 0x14
    b768:	55 89       	ldd	r21, Z+21	; 0x15
    b76a:	66 89       	ldd	r22, Z+22	; 0x16
    b76c:	77 89       	ldd	r23, Z+23	; 0x17
    b76e:	80 81       	ld	r24, Z
    b770:	91 81       	ldd	r25, Z+1	; 0x01
    b772:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <get_fat.isra.9>
    b776:	62 30       	cpi	r22, 0x02	; 2
    b778:	71 05       	cpc	r23, r1
    b77a:	81 05       	cpc	r24, r1
    b77c:	91 05       	cpc	r25, r1
    b77e:	10 f4       	brcc	.+4      	; 0xb784 <f_read+0x104>
    b780:	82 e0       	ldi	r24, 0x02	; 2
    b782:	07 c0       	rjmp	.+14     	; 0xb792 <f_read+0x112>
    b784:	6f 3f       	cpi	r22, 0xFF	; 255
    b786:	ff ef       	ldi	r31, 0xFF	; 255
    b788:	7f 07       	cpc	r23, r31
    b78a:	8f 07       	cpc	r24, r31
    b78c:	9f 07       	cpc	r25, r31
    b78e:	21 f4       	brne	.+8      	; 0xb798 <f_read+0x118>
    b790:	81 e0       	ldi	r24, 0x01	; 1
    b792:	f7 01       	movw	r30, r14
    b794:	87 87       	std	Z+15, r24	; 0x0f
    b796:	ba c0       	rjmp	.+372    	; 0xb90c <f_read+0x28c>
    b798:	f7 01       	movw	r30, r14
    b79a:	64 8b       	std	Z+20, r22	; 0x14
    b79c:	75 8b       	std	Z+21, r23	; 0x15
    b79e:	86 8b       	std	Z+22, r24	; 0x16
    b7a0:	97 8b       	std	Z+23, r25	; 0x17
    b7a2:	89 81       	ldd	r24, Y+1	; 0x01
    b7a4:	9a 81       	ldd	r25, Y+2	; 0x02
    b7a6:	9c 83       	std	Y+4, r25	; 0x04
    b7a8:	8b 83       	std	Y+3, r24	; 0x03
    b7aa:	f7 01       	movw	r30, r14
    b7ac:	44 89       	ldd	r20, Z+20	; 0x14
    b7ae:	55 89       	ldd	r21, Z+21	; 0x15
    b7b0:	66 89       	ldd	r22, Z+22	; 0x16
    b7b2:	77 89       	ldd	r23, Z+23	; 0x17
    b7b4:	0e 94 b9 47 	call	0x8f72	; 0x8f72 <clst2sect>
    b7b8:	61 15       	cp	r22, r1
    b7ba:	71 05       	cpc	r23, r1
    b7bc:	81 05       	cpc	r24, r1
    b7be:	91 05       	cpc	r25, r1
    b7c0:	f9 f2       	breq	.-66     	; 0xb780 <f_read+0x100>
    b7c2:	2b 01       	movw	r4, r22
    b7c4:	3c 01       	movw	r6, r24
    b7c6:	40 0e       	add	r4, r16
    b7c8:	51 1e       	adc	r5, r17
    b7ca:	61 1c       	adc	r6, r1
    b7cc:	71 1c       	adc	r7, r1
    b7ce:	65 01       	movw	r12, r10
    b7d0:	cd 2c       	mov	r12, r13
    b7d2:	dd 24       	eor	r13, r13
    b7d4:	c6 94       	lsr	r12
    b7d6:	c1 14       	cp	r12, r1
    b7d8:	d1 04       	cpc	r13, r1
    b7da:	d1 f1       	breq	.+116    	; 0xb850 <f_read+0x1d0>
    b7dc:	eb 81       	ldd	r30, Y+3	; 0x03
    b7de:	fc 81       	ldd	r31, Y+4	; 0x04
    b7e0:	81 85       	ldd	r24, Z+9	; 0x09
    b7e2:	92 85       	ldd	r25, Z+10	; 0x0a
    b7e4:	98 01       	movw	r18, r16
    b7e6:	2c 0d       	add	r18, r12
    b7e8:	3d 1d       	adc	r19, r13
    b7ea:	82 17       	cp	r24, r18
    b7ec:	93 07       	cpc	r25, r19
    b7ee:	18 f4       	brcc	.+6      	; 0xb7f6 <f_read+0x176>
    b7f0:	6c 01       	movw	r12, r24
    b7f2:	c0 1a       	sub	r12, r16
    b7f4:	d1 0a       	sbc	r13, r17
    b7f6:	86 01       	movw	r16, r12
    b7f8:	a3 01       	movw	r20, r6
    b7fa:	92 01       	movw	r18, r4
    b7fc:	b4 01       	movw	r22, r8
    b7fe:	eb 81       	ldd	r30, Y+3	; 0x03
    b800:	fc 81       	ldd	r31, Y+4	; 0x04
    b802:	81 81       	ldd	r24, Z+1	; 0x01
    b804:	0e 94 7a 69 	call	0xd2f4	; 0xd2f4 <disk_read>
    b808:	89 2b       	or	r24, r25
    b80a:	11 f6       	brne	.-124    	; 0xb790 <f_read+0x110>
    b80c:	f7 01       	movw	r30, r14
    b80e:	86 85       	ldd	r24, Z+14	; 0x0e
    b810:	87 ff       	sbrs	r24, 7
    b812:	1a c0       	rjmp	.+52     	; 0xb848 <f_read+0x1c8>
    b814:	80 8d       	ldd	r24, Z+24	; 0x18
    b816:	91 8d       	ldd	r25, Z+25	; 0x19
    b818:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b81a:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b81c:	84 19       	sub	r24, r4
    b81e:	95 09       	sbc	r25, r5
    b820:	a6 09       	sbc	r26, r6
    b822:	b7 09       	sbc	r27, r7
    b824:	a6 01       	movw	r20, r12
    b826:	60 e0       	ldi	r22, 0x00	; 0
    b828:	70 e0       	ldi	r23, 0x00	; 0
    b82a:	84 17       	cp	r24, r20
    b82c:	95 07       	cpc	r25, r21
    b82e:	a6 07       	cpc	r26, r22
    b830:	b7 07       	cpc	r27, r23
    b832:	50 f4       	brcc	.+20     	; 0xb848 <f_read+0x1c8>
    b834:	98 2f       	mov	r25, r24
    b836:	88 27       	eor	r24, r24
    b838:	99 0f       	add	r25, r25
    b83a:	40 e0       	ldi	r20, 0x00	; 0
    b83c:	52 e0       	ldi	r21, 0x02	; 2
    b83e:	b1 01       	movw	r22, r2
    b840:	88 0d       	add	r24, r8
    b842:	99 1d       	adc	r25, r9
    b844:	0e 94 ae 49 	call	0x935c	; 0x935c <mem_cpy.part.0>
    b848:	dc 2c       	mov	r13, r12
    b84a:	cc 24       	eor	r12, r12
    b84c:	dd 0c       	add	r13, r13
    b84e:	41 c0       	rjmp	.+130    	; 0xb8d2 <f_read+0x252>
    b850:	f7 01       	movw	r30, r14
    b852:	20 8d       	ldd	r18, Z+24	; 0x18
    b854:	31 8d       	ldd	r19, Z+25	; 0x19
    b856:	42 8d       	ldd	r20, Z+26	; 0x1a
    b858:	53 8d       	ldd	r21, Z+27	; 0x1b
    b85a:	42 16       	cp	r4, r18
    b85c:	53 06       	cpc	r5, r19
    b85e:	64 06       	cpc	r6, r20
    b860:	75 06       	cpc	r7, r21
    b862:	f9 f0       	breq	.+62     	; 0xb8a2 <f_read+0x222>
    b864:	86 85       	ldd	r24, Z+14	; 0x0e
    b866:	87 ff       	sbrs	r24, 7
    b868:	0f c0       	rjmp	.+30     	; 0xb888 <f_read+0x208>
    b86a:	01 e0       	ldi	r16, 0x01	; 1
    b86c:	10 e0       	ldi	r17, 0x00	; 0
    b86e:	b1 01       	movw	r22, r2
    b870:	eb 81       	ldd	r30, Y+3	; 0x03
    b872:	fc 81       	ldd	r31, Y+4	; 0x04
    b874:	81 81       	ldd	r24, Z+1	; 0x01
    b876:	0e 94 8a 69 	call	0xd314	; 0xd314 <disk_write>
    b87a:	89 2b       	or	r24, r25
    b87c:	09 f0       	breq	.+2      	; 0xb880 <f_read+0x200>
    b87e:	88 cf       	rjmp	.-240    	; 0xb790 <f_read+0x110>
    b880:	f7 01       	movw	r30, r14
    b882:	86 85       	ldd	r24, Z+14	; 0x0e
    b884:	8f 77       	andi	r24, 0x7F	; 127
    b886:	86 87       	std	Z+14, r24	; 0x0e
    b888:	e9 81       	ldd	r30, Y+1	; 0x01
    b88a:	fa 81       	ldd	r31, Y+2	; 0x02
    b88c:	01 e0       	ldi	r16, 0x01	; 1
    b88e:	10 e0       	ldi	r17, 0x00	; 0
    b890:	a3 01       	movw	r20, r6
    b892:	92 01       	movw	r18, r4
    b894:	b1 01       	movw	r22, r2
    b896:	81 81       	ldd	r24, Z+1	; 0x01
    b898:	0e 94 7a 69 	call	0xd2f4	; 0xd2f4 <disk_read>
    b89c:	89 2b       	or	r24, r25
    b89e:	09 f0       	breq	.+2      	; 0xb8a2 <f_read+0x222>
    b8a0:	77 cf       	rjmp	.-274    	; 0xb790 <f_read+0x110>
    b8a2:	f7 01       	movw	r30, r14
    b8a4:	40 8e       	std	Z+24, r4	; 0x18
    b8a6:	51 8e       	std	Z+25, r5	; 0x19
    b8a8:	62 8e       	std	Z+26, r6	; 0x1a
    b8aa:	73 8e       	std	Z+27, r7	; 0x1b
    b8ac:	f7 01       	movw	r30, r14
    b8ae:	60 89       	ldd	r22, Z+16	; 0x10
    b8b0:	71 89       	ldd	r23, Z+17	; 0x11
    b8b2:	71 70       	andi	r23, 0x01	; 1
    b8b4:	80 e0       	ldi	r24, 0x00	; 0
    b8b6:	92 e0       	ldi	r25, 0x02	; 2
    b8b8:	86 1b       	sub	r24, r22
    b8ba:	97 0b       	sbc	r25, r23
    b8bc:	65 01       	movw	r12, r10
    b8be:	8a 15       	cp	r24, r10
    b8c0:	9b 05       	cpc	r25, r11
    b8c2:	08 f4       	brcc	.+2      	; 0xb8c6 <f_read+0x246>
    b8c4:	6c 01       	movw	r12, r24
    b8c6:	62 0d       	add	r22, r2
    b8c8:	73 1d       	adc	r23, r3
    b8ca:	a6 01       	movw	r20, r12
    b8cc:	c4 01       	movw	r24, r8
    b8ce:	0e 94 ae 49 	call	0x935c	; 0x935c <mem_cpy.part.0>
    b8d2:	ac 18       	sub	r10, r12
    b8d4:	bd 08       	sbc	r11, r13
    b8d6:	ed 81       	ldd	r30, Y+5	; 0x05
    b8d8:	fe 81       	ldd	r31, Y+6	; 0x06
    b8da:	80 81       	ld	r24, Z
    b8dc:	91 81       	ldd	r25, Z+1	; 0x01
    b8de:	8c 0d       	add	r24, r12
    b8e0:	9d 1d       	adc	r25, r13
    b8e2:	91 83       	std	Z+1, r25	; 0x01
    b8e4:	80 83       	st	Z, r24
    b8e6:	8c 0c       	add	r8, r12
    b8e8:	9d 1c       	adc	r9, r13
    b8ea:	f7 01       	movw	r30, r14
    b8ec:	80 89       	ldd	r24, Z+16	; 0x10
    b8ee:	91 89       	ldd	r25, Z+17	; 0x11
    b8f0:	a2 89       	ldd	r26, Z+18	; 0x12
    b8f2:	b3 89       	ldd	r27, Z+19	; 0x13
    b8f4:	8c 0d       	add	r24, r12
    b8f6:	9d 1d       	adc	r25, r13
    b8f8:	a1 1d       	adc	r26, r1
    b8fa:	b1 1d       	adc	r27, r1
    b8fc:	80 8b       	std	Z+16, r24	; 0x10
    b8fe:	91 8b       	std	Z+17, r25	; 0x11
    b900:	a2 8b       	std	Z+18, r26	; 0x12
    b902:	b3 8b       	std	Z+19, r27	; 0x13
    b904:	f5 ce       	rjmp	.-534    	; 0xb6f0 <f_read+0x70>
    b906:	80 e0       	ldi	r24, 0x00	; 0
    b908:	01 c0       	rjmp	.+2      	; 0xb90c <f_read+0x28c>
    b90a:	87 e0       	ldi	r24, 0x07	; 7
    b90c:	90 e0       	ldi	r25, 0x00	; 0
    b90e:	26 96       	adiw	r28, 0x06	; 6
    b910:	e2 e1       	ldi	r30, 0x12	; 18
    b912:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0000b916 <f_write>:
    b916:	a8 e0       	ldi	r26, 0x08	; 8
    b918:	b0 e0       	ldi	r27, 0x00	; 0
    b91a:	e1 e9       	ldi	r30, 0x91	; 145
    b91c:	fc e5       	ldi	r31, 0x5C	; 92
    b91e:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    b922:	7c 01       	movw	r14, r24
    b924:	3b 01       	movw	r6, r22
    b926:	5a 01       	movw	r10, r20
    b928:	38 87       	std	Y+8, r19	; 0x08
    b92a:	2f 83       	std	Y+7, r18	; 0x07
    b92c:	f9 01       	movw	r30, r18
    b92e:	11 82       	std	Z+1, r1	; 0x01
    b930:	10 82       	st	Z, r1
    b932:	be 01       	movw	r22, r28
    b934:	6f 5f       	subi	r22, 0xFF	; 255
    b936:	7f 4f       	sbci	r23, 0xFF	; 255
    b938:	0e 94 58 48 	call	0x90b0	; 0x90b0 <validate>
    b93c:	00 97       	sbiw	r24, 0x00	; 0
    b93e:	09 f0       	breq	.+2      	; 0xb942 <f_write+0x2c>
    b940:	7d c1       	rjmp	.+762    	; 0xbc3c <f_write+0x326>
    b942:	f7 01       	movw	r30, r14
    b944:	87 85       	ldd	r24, Z+15	; 0x0f
    b946:	90 e0       	ldi	r25, 0x00	; 0
    b948:	00 97       	sbiw	r24, 0x00	; 0
    b94a:	09 f0       	breq	.+2      	; 0xb94e <f_write+0x38>
    b94c:	77 c1       	rjmp	.+750    	; 0xbc3c <f_write+0x326>
    b94e:	86 85       	ldd	r24, Z+14	; 0x0e
    b950:	81 ff       	sbrs	r24, 1
    b952:	72 c1       	rjmp	.+740    	; 0xbc38 <f_write+0x322>
    b954:	80 89       	ldd	r24, Z+16	; 0x10
    b956:	91 89       	ldd	r25, Z+17	; 0x11
    b958:	a2 89       	ldd	r26, Z+18	; 0x12
    b95a:	b3 89       	ldd	r27, Z+19	; 0x13
    b95c:	ac 01       	movw	r20, r24
    b95e:	bd 01       	movw	r22, r26
    b960:	4a 0d       	add	r20, r10
    b962:	5b 1d       	adc	r21, r11
    b964:	61 1d       	adc	r22, r1
    b966:	71 1d       	adc	r23, r1
    b968:	48 17       	cp	r20, r24
    b96a:	59 07       	cpc	r21, r25
    b96c:	6a 07       	cpc	r22, r26
    b96e:	7b 07       	cpc	r23, r27
    b970:	18 f4       	brcc	.+6      	; 0xb978 <f_write+0x62>
    b972:	5c 01       	movw	r10, r24
    b974:	a0 94       	com	r10
    b976:	b0 94       	com	r11
    b978:	97 01       	movw	r18, r14
    b97a:	2c 5d       	subi	r18, 0xDC	; 220
    b97c:	3f 4f       	sbci	r19, 0xFF	; 255
    b97e:	3e 83       	std	Y+6, r19	; 0x06
    b980:	2d 83       	std	Y+5, r18	; 0x05
    b982:	a1 14       	cp	r10, r1
    b984:	b1 04       	cpc	r11, r1
    b986:	09 f4       	brne	.+2      	; 0xb98a <f_write+0x74>
    b988:	4d c0       	rjmp	.+154    	; 0xba24 <f_write+0x10e>
    b98a:	f7 01       	movw	r30, r14
    b98c:	40 89       	ldd	r20, Z+16	; 0x10
    b98e:	51 89       	ldd	r21, Z+17	; 0x11
    b990:	62 89       	ldd	r22, Z+18	; 0x12
    b992:	73 89       	ldd	r23, Z+19	; 0x13
    b994:	db 01       	movw	r26, r22
    b996:	ca 01       	movw	r24, r20
    b998:	91 70       	andi	r25, 0x01	; 1
    b99a:	aa 27       	eor	r26, r26
    b99c:	bb 27       	eor	r27, r27
    b99e:	89 2b       	or	r24, r25
    b9a0:	8a 2b       	or	r24, r26
    b9a2:	8b 2b       	or	r24, r27
    b9a4:	09 f0       	breq	.+2      	; 0xb9a8 <f_write+0x92>
    b9a6:	05 c1       	rjmp	.+522    	; 0xbbb2 <f_write+0x29c>
    b9a8:	e9 81       	ldd	r30, Y+1	; 0x01
    b9aa:	fa 81       	ldd	r31, Y+2	; 0x02
    b9ac:	81 84       	ldd	r8, Z+9	; 0x09
    b9ae:	92 84       	ldd	r9, Z+10	; 0x0a
    b9b0:	f1 e0       	ldi	r31, 0x01	; 1
    b9b2:	8f 1a       	sub	r8, r31
    b9b4:	91 08       	sbc	r9, r1
    b9b6:	db 01       	movw	r26, r22
    b9b8:	ca 01       	movw	r24, r20
    b9ba:	e9 e0       	ldi	r30, 0x09	; 9
    b9bc:	b6 95       	lsr	r27
    b9be:	a7 95       	ror	r26
    b9c0:	97 95       	ror	r25
    b9c2:	87 95       	ror	r24
    b9c4:	ea 95       	dec	r30
    b9c6:	d1 f7       	brne	.-12     	; 0xb9bc <f_write+0xa6>
    b9c8:	88 22       	and	r8, r24
    b9ca:	99 22       	and	r9, r25
    b9cc:	81 14       	cp	r8, r1
    b9ce:	91 04       	cpc	r9, r1
    b9d0:	09 f0       	breq	.+2      	; 0xb9d4 <f_write+0xbe>
    b9d2:	51 c0       	rjmp	.+162    	; 0xba76 <f_write+0x160>
    b9d4:	f7 01       	movw	r30, r14
    b9d6:	41 15       	cp	r20, r1
    b9d8:	51 05       	cpc	r21, r1
    b9da:	61 05       	cpc	r22, r1
    b9dc:	71 05       	cpc	r23, r1
    b9de:	69 f4       	brne	.+26     	; 0xb9fa <f_write+0xe4>
    b9e0:	66 81       	ldd	r22, Z+6	; 0x06
    b9e2:	77 81       	ldd	r23, Z+7	; 0x07
    b9e4:	80 85       	ldd	r24, Z+8	; 0x08
    b9e6:	91 85       	ldd	r25, Z+9	; 0x09
    b9e8:	61 15       	cp	r22, r1
    b9ea:	71 05       	cpc	r23, r1
    b9ec:	81 05       	cpc	r24, r1
    b9ee:	91 05       	cpc	r25, r1
    b9f0:	f9 f4       	brne	.+62     	; 0xba30 <f_write+0x11a>
    b9f2:	40 e0       	ldi	r20, 0x00	; 0
    b9f4:	50 e0       	ldi	r21, 0x00	; 0
    b9f6:	ba 01       	movw	r22, r20
    b9f8:	0d c0       	rjmp	.+26     	; 0xba14 <f_write+0xfe>
    b9fa:	82 a1       	ldd	r24, Z+34	; 0x22
    b9fc:	93 a1       	ldd	r25, Z+35	; 0x23
    b9fe:	89 2b       	or	r24, r25
    ba00:	21 f0       	breq	.+8      	; 0xba0a <f_write+0xf4>
    ba02:	c7 01       	movw	r24, r14
    ba04:	0e 94 e1 47 	call	0x8fc2	; 0x8fc2 <clmt_clust>
    ba08:	08 c0       	rjmp	.+16     	; 0xba1a <f_write+0x104>
    ba0a:	f7 01       	movw	r30, r14
    ba0c:	44 89       	ldd	r20, Z+20	; 0x14
    ba0e:	55 89       	ldd	r21, Z+21	; 0x15
    ba10:	66 89       	ldd	r22, Z+22	; 0x16
    ba12:	77 89       	ldd	r23, Z+23	; 0x17
    ba14:	c7 01       	movw	r24, r14
    ba16:	0e 94 8b 50 	call	0xa116	; 0xa116 <create_chain>
    ba1a:	61 15       	cp	r22, r1
    ba1c:	71 05       	cpc	r23, r1
    ba1e:	81 05       	cpc	r24, r1
    ba20:	91 05       	cpc	r25, r1
    ba22:	31 f4       	brne	.+12     	; 0xba30 <f_write+0x11a>
    ba24:	f7 01       	movw	r30, r14
    ba26:	86 85       	ldd	r24, Z+14	; 0x0e
    ba28:	80 64       	ori	r24, 0x40	; 64
    ba2a:	86 87       	std	Z+14, r24	; 0x0e
    ba2c:	80 e0       	ldi	r24, 0x00	; 0
    ba2e:	05 c1       	rjmp	.+522    	; 0xbc3a <f_write+0x324>
    ba30:	61 30       	cpi	r22, 0x01	; 1
    ba32:	71 05       	cpc	r23, r1
    ba34:	81 05       	cpc	r24, r1
    ba36:	91 05       	cpc	r25, r1
    ba38:	11 f4       	brne	.+4      	; 0xba3e <f_write+0x128>
    ba3a:	82 e0       	ldi	r24, 0x02	; 2
    ba3c:	07 c0       	rjmp	.+14     	; 0xba4c <f_write+0x136>
    ba3e:	6f 3f       	cpi	r22, 0xFF	; 255
    ba40:	ff ef       	ldi	r31, 0xFF	; 255
    ba42:	7f 07       	cpc	r23, r31
    ba44:	8f 07       	cpc	r24, r31
    ba46:	9f 07       	cpc	r25, r31
    ba48:	21 f4       	brne	.+8      	; 0xba52 <f_write+0x13c>
    ba4a:	81 e0       	ldi	r24, 0x01	; 1
    ba4c:	f7 01       	movw	r30, r14
    ba4e:	87 87       	std	Z+15, r24	; 0x0f
    ba50:	f4 c0       	rjmp	.+488    	; 0xbc3a <f_write+0x324>
    ba52:	f7 01       	movw	r30, r14
    ba54:	64 8b       	std	Z+20, r22	; 0x14
    ba56:	75 8b       	std	Z+21, r23	; 0x15
    ba58:	86 8b       	std	Z+22, r24	; 0x16
    ba5a:	97 8b       	std	Z+23, r25	; 0x17
    ba5c:	06 81       	ldd	r16, Z+6	; 0x06
    ba5e:	17 81       	ldd	r17, Z+7	; 0x07
    ba60:	20 85       	ldd	r18, Z+8	; 0x08
    ba62:	31 85       	ldd	r19, Z+9	; 0x09
    ba64:	01 15       	cp	r16, r1
    ba66:	11 05       	cpc	r17, r1
    ba68:	21 05       	cpc	r18, r1
    ba6a:	31 05       	cpc	r19, r1
    ba6c:	21 f4       	brne	.+8      	; 0xba76 <f_write+0x160>
    ba6e:	66 83       	std	Z+6, r22	; 0x06
    ba70:	77 83       	std	Z+7, r23	; 0x07
    ba72:	80 87       	std	Z+8, r24	; 0x08
    ba74:	91 87       	std	Z+9, r25	; 0x09
    ba76:	f7 01       	movw	r30, r14
    ba78:	86 85       	ldd	r24, Z+14	; 0x0e
    ba7a:	87 ff       	sbrs	r24, 7
    ba7c:	13 c0       	rjmp	.+38     	; 0xbaa4 <f_write+0x18e>
    ba7e:	20 8d       	ldd	r18, Z+24	; 0x18
    ba80:	31 8d       	ldd	r19, Z+25	; 0x19
    ba82:	42 8d       	ldd	r20, Z+26	; 0x1a
    ba84:	53 8d       	ldd	r21, Z+27	; 0x1b
    ba86:	e9 81       	ldd	r30, Y+1	; 0x01
    ba88:	fa 81       	ldd	r31, Y+2	; 0x02
    ba8a:	01 e0       	ldi	r16, 0x01	; 1
    ba8c:	10 e0       	ldi	r17, 0x00	; 0
    ba8e:	6d 81       	ldd	r22, Y+5	; 0x05
    ba90:	7e 81       	ldd	r23, Y+6	; 0x06
    ba92:	81 81       	ldd	r24, Z+1	; 0x01
    ba94:	0e 94 8a 69 	call	0xd314	; 0xd314 <disk_write>
    ba98:	89 2b       	or	r24, r25
    ba9a:	b9 f6       	brne	.-82     	; 0xba4a <f_write+0x134>
    ba9c:	f7 01       	movw	r30, r14
    ba9e:	86 85       	ldd	r24, Z+14	; 0x0e
    baa0:	8f 77       	andi	r24, 0x7F	; 127
    baa2:	86 87       	std	Z+14, r24	; 0x0e
    baa4:	29 81       	ldd	r18, Y+1	; 0x01
    baa6:	3a 81       	ldd	r19, Y+2	; 0x02
    baa8:	3c 83       	std	Y+4, r19	; 0x04
    baaa:	2b 83       	std	Y+3, r18	; 0x03
    baac:	f7 01       	movw	r30, r14
    baae:	44 89       	ldd	r20, Z+20	; 0x14
    bab0:	55 89       	ldd	r21, Z+21	; 0x15
    bab2:	66 89       	ldd	r22, Z+22	; 0x16
    bab4:	77 89       	ldd	r23, Z+23	; 0x17
    bab6:	c9 01       	movw	r24, r18
    bab8:	0e 94 b9 47 	call	0x8f72	; 0x8f72 <clst2sect>
    babc:	61 15       	cp	r22, r1
    babe:	71 05       	cpc	r23, r1
    bac0:	81 05       	cpc	r24, r1
    bac2:	91 05       	cpc	r25, r1
    bac4:	09 f4       	brne	.+2      	; 0xbac8 <f_write+0x1b2>
    bac6:	b9 cf       	rjmp	.-142    	; 0xba3a <f_write+0x124>
    bac8:	1b 01       	movw	r2, r22
    baca:	2c 01       	movw	r4, r24
    bacc:	28 0c       	add	r2, r8
    bace:	39 1c       	adc	r3, r9
    bad0:	41 1c       	adc	r4, r1
    bad2:	51 1c       	adc	r5, r1
    bad4:	65 01       	movw	r12, r10
    bad6:	cd 2c       	mov	r12, r13
    bad8:	dd 24       	eor	r13, r13
    bada:	c6 94       	lsr	r12
    badc:	c1 14       	cp	r12, r1
    bade:	d1 04       	cpc	r13, r1
    bae0:	f1 f1       	breq	.+124    	; 0xbb5e <f_write+0x248>
    bae2:	eb 81       	ldd	r30, Y+3	; 0x03
    bae4:	fc 81       	ldd	r31, Y+4	; 0x04
    bae6:	81 85       	ldd	r24, Z+9	; 0x09
    bae8:	92 85       	ldd	r25, Z+10	; 0x0a
    baea:	94 01       	movw	r18, r8
    baec:	2c 0d       	add	r18, r12
    baee:	3d 1d       	adc	r19, r13
    baf0:	82 17       	cp	r24, r18
    baf2:	93 07       	cpc	r25, r19
    baf4:	18 f4       	brcc	.+6      	; 0xbafc <f_write+0x1e6>
    baf6:	6c 01       	movw	r12, r24
    baf8:	c8 18       	sub	r12, r8
    bafa:	d9 08       	sbc	r13, r9
    bafc:	86 01       	movw	r16, r12
    bafe:	a2 01       	movw	r20, r4
    bb00:	91 01       	movw	r18, r2
    bb02:	b3 01       	movw	r22, r6
    bb04:	eb 81       	ldd	r30, Y+3	; 0x03
    bb06:	fc 81       	ldd	r31, Y+4	; 0x04
    bb08:	81 81       	ldd	r24, Z+1	; 0x01
    bb0a:	0e 94 8a 69 	call	0xd314	; 0xd314 <disk_write>
    bb0e:	89 2b       	or	r24, r25
    bb10:	09 f0       	breq	.+2      	; 0xbb14 <f_write+0x1fe>
    bb12:	9b cf       	rjmp	.-202    	; 0xba4a <f_write+0x134>
    bb14:	f7 01       	movw	r30, r14
    bb16:	80 8d       	ldd	r24, Z+24	; 0x18
    bb18:	91 8d       	ldd	r25, Z+25	; 0x19
    bb1a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bb1c:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bb1e:	82 19       	sub	r24, r2
    bb20:	93 09       	sbc	r25, r3
    bb22:	a4 09       	sbc	r26, r4
    bb24:	b5 09       	sbc	r27, r5
    bb26:	a6 01       	movw	r20, r12
    bb28:	60 e0       	ldi	r22, 0x00	; 0
    bb2a:	70 e0       	ldi	r23, 0x00	; 0
    bb2c:	84 17       	cp	r24, r20
    bb2e:	95 07       	cpc	r25, r21
    bb30:	a6 07       	cpc	r26, r22
    bb32:	b7 07       	cpc	r27, r23
    bb34:	80 f4       	brcc	.+32     	; 0xbb56 <f_write+0x240>
    bb36:	98 2f       	mov	r25, r24
    bb38:	88 27       	eor	r24, r24
    bb3a:	99 0f       	add	r25, r25
    bb3c:	b3 01       	movw	r22, r6
    bb3e:	68 0f       	add	r22, r24
    bb40:	79 1f       	adc	r23, r25
    bb42:	40 e0       	ldi	r20, 0x00	; 0
    bb44:	52 e0       	ldi	r21, 0x02	; 2
    bb46:	8d 81       	ldd	r24, Y+5	; 0x05
    bb48:	9e 81       	ldd	r25, Y+6	; 0x06
    bb4a:	0e 94 ae 49 	call	0x935c	; 0x935c <mem_cpy.part.0>
    bb4e:	f7 01       	movw	r30, r14
    bb50:	86 85       	ldd	r24, Z+14	; 0x0e
    bb52:	8f 77       	andi	r24, 0x7F	; 127
    bb54:	86 87       	std	Z+14, r24	; 0x0e
    bb56:	dc 2c       	mov	r13, r12
    bb58:	cc 24       	eor	r12, r12
    bb5a:	dd 0c       	add	r13, r13
    bb5c:	43 c0       	rjmp	.+134    	; 0xbbe4 <f_write+0x2ce>
    bb5e:	f7 01       	movw	r30, r14
    bb60:	80 8d       	ldd	r24, Z+24	; 0x18
    bb62:	91 8d       	ldd	r25, Z+25	; 0x19
    bb64:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bb66:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bb68:	28 16       	cp	r2, r24
    bb6a:	39 06       	cpc	r3, r25
    bb6c:	4a 06       	cpc	r4, r26
    bb6e:	5b 06       	cpc	r5, r27
    bb70:	d9 f0       	breq	.+54     	; 0xbba8 <f_write+0x292>
    bb72:	40 89       	ldd	r20, Z+16	; 0x10
    bb74:	51 89       	ldd	r21, Z+17	; 0x11
    bb76:	62 89       	ldd	r22, Z+18	; 0x12
    bb78:	73 89       	ldd	r23, Z+19	; 0x13
    bb7a:	82 85       	ldd	r24, Z+10	; 0x0a
    bb7c:	93 85       	ldd	r25, Z+11	; 0x0b
    bb7e:	a4 85       	ldd	r26, Z+12	; 0x0c
    bb80:	b5 85       	ldd	r27, Z+13	; 0x0d
    bb82:	48 17       	cp	r20, r24
    bb84:	59 07       	cpc	r21, r25
    bb86:	6a 07       	cpc	r22, r26
    bb88:	7b 07       	cpc	r23, r27
    bb8a:	70 f4       	brcc	.+28     	; 0xbba8 <f_write+0x292>
    bb8c:	01 e0       	ldi	r16, 0x01	; 1
    bb8e:	10 e0       	ldi	r17, 0x00	; 0
    bb90:	a2 01       	movw	r20, r4
    bb92:	91 01       	movw	r18, r2
    bb94:	6d 81       	ldd	r22, Y+5	; 0x05
    bb96:	7e 81       	ldd	r23, Y+6	; 0x06
    bb98:	eb 81       	ldd	r30, Y+3	; 0x03
    bb9a:	fc 81       	ldd	r31, Y+4	; 0x04
    bb9c:	81 81       	ldd	r24, Z+1	; 0x01
    bb9e:	0e 94 7a 69 	call	0xd2f4	; 0xd2f4 <disk_read>
    bba2:	89 2b       	or	r24, r25
    bba4:	09 f0       	breq	.+2      	; 0xbba8 <f_write+0x292>
    bba6:	51 cf       	rjmp	.-350    	; 0xba4a <f_write+0x134>
    bba8:	f7 01       	movw	r30, r14
    bbaa:	20 8e       	std	Z+24, r2	; 0x18
    bbac:	31 8e       	std	Z+25, r3	; 0x19
    bbae:	42 8e       	std	Z+26, r4	; 0x1a
    bbb0:	53 8e       	std	Z+27, r5	; 0x1b
    bbb2:	f7 01       	movw	r30, r14
    bbb4:	80 89       	ldd	r24, Z+16	; 0x10
    bbb6:	91 89       	ldd	r25, Z+17	; 0x11
    bbb8:	91 70       	andi	r25, 0x01	; 1
    bbba:	20 e0       	ldi	r18, 0x00	; 0
    bbbc:	32 e0       	ldi	r19, 0x02	; 2
    bbbe:	28 1b       	sub	r18, r24
    bbc0:	39 0b       	sbc	r19, r25
    bbc2:	65 01       	movw	r12, r10
    bbc4:	2a 15       	cp	r18, r10
    bbc6:	3b 05       	cpc	r19, r11
    bbc8:	08 f4       	brcc	.+2      	; 0xbbcc <f_write+0x2b6>
    bbca:	69 01       	movw	r12, r18
    bbcc:	a6 01       	movw	r20, r12
    bbce:	b3 01       	movw	r22, r6
    bbd0:	2d 81       	ldd	r18, Y+5	; 0x05
    bbd2:	3e 81       	ldd	r19, Y+6	; 0x06
    bbd4:	82 0f       	add	r24, r18
    bbd6:	93 1f       	adc	r25, r19
    bbd8:	0e 94 ae 49 	call	0x935c	; 0x935c <mem_cpy.part.0>
    bbdc:	f7 01       	movw	r30, r14
    bbde:	86 85       	ldd	r24, Z+14	; 0x0e
    bbe0:	80 68       	ori	r24, 0x80	; 128
    bbe2:	86 87       	std	Z+14, r24	; 0x0e
    bbe4:	ac 18       	sub	r10, r12
    bbe6:	bd 08       	sbc	r11, r13
    bbe8:	ef 81       	ldd	r30, Y+7	; 0x07
    bbea:	f8 85       	ldd	r31, Y+8	; 0x08
    bbec:	80 81       	ld	r24, Z
    bbee:	91 81       	ldd	r25, Z+1	; 0x01
    bbf0:	8c 0d       	add	r24, r12
    bbf2:	9d 1d       	adc	r25, r13
    bbf4:	91 83       	std	Z+1, r25	; 0x01
    bbf6:	80 83       	st	Z, r24
    bbf8:	6c 0c       	add	r6, r12
    bbfa:	7d 1c       	adc	r7, r13
    bbfc:	f7 01       	movw	r30, r14
    bbfe:	80 89       	ldd	r24, Z+16	; 0x10
    bc00:	91 89       	ldd	r25, Z+17	; 0x11
    bc02:	a2 89       	ldd	r26, Z+18	; 0x12
    bc04:	b3 89       	ldd	r27, Z+19	; 0x13
    bc06:	8c 0d       	add	r24, r12
    bc08:	9d 1d       	adc	r25, r13
    bc0a:	a1 1d       	adc	r26, r1
    bc0c:	b1 1d       	adc	r27, r1
    bc0e:	80 8b       	std	Z+16, r24	; 0x10
    bc10:	91 8b       	std	Z+17, r25	; 0x11
    bc12:	a2 8b       	std	Z+18, r26	; 0x12
    bc14:	b3 8b       	std	Z+19, r27	; 0x13
    bc16:	42 85       	ldd	r20, Z+10	; 0x0a
    bc18:	53 85       	ldd	r21, Z+11	; 0x0b
    bc1a:	64 85       	ldd	r22, Z+12	; 0x0c
    bc1c:	75 85       	ldd	r23, Z+13	; 0x0d
    bc1e:	48 17       	cp	r20, r24
    bc20:	59 07       	cpc	r21, r25
    bc22:	6a 07       	cpc	r22, r26
    bc24:	7b 07       	cpc	r23, r27
    bc26:	10 f4       	brcc	.+4      	; 0xbc2c <f_write+0x316>
    bc28:	ac 01       	movw	r20, r24
    bc2a:	bd 01       	movw	r22, r26
    bc2c:	f7 01       	movw	r30, r14
    bc2e:	42 87       	std	Z+10, r20	; 0x0a
    bc30:	53 87       	std	Z+11, r21	; 0x0b
    bc32:	64 87       	std	Z+12, r22	; 0x0c
    bc34:	75 87       	std	Z+13, r23	; 0x0d
    bc36:	a5 ce       	rjmp	.-694    	; 0xb982 <f_write+0x6c>
    bc38:	87 e0       	ldi	r24, 0x07	; 7
    bc3a:	90 e0       	ldi	r25, 0x00	; 0
    bc3c:	28 96       	adiw	r28, 0x08	; 8
    bc3e:	e2 e1       	ldi	r30, 0x12	; 18
    bc40:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0000bc44 <f_sync>:
    bc44:	8f 92       	push	r8
    bc46:	9f 92       	push	r9
    bc48:	af 92       	push	r10
    bc4a:	bf 92       	push	r11
    bc4c:	ef 92       	push	r14
    bc4e:	ff 92       	push	r15
    bc50:	0f 93       	push	r16
    bc52:	1f 93       	push	r17
    bc54:	cf 93       	push	r28
    bc56:	df 93       	push	r29
    bc58:	00 d0       	rcall	.+0      	; 0xbc5a <f_sync+0x16>
    bc5a:	cd b7       	in	r28, 0x3d	; 61
    bc5c:	de b7       	in	r29, 0x3e	; 62
    bc5e:	7c 01       	movw	r14, r24
    bc60:	be 01       	movw	r22, r28
    bc62:	6f 5f       	subi	r22, 0xFF	; 255
    bc64:	7f 4f       	sbci	r23, 0xFF	; 255
    bc66:	0e 94 58 48 	call	0x90b0	; 0x90b0 <validate>
    bc6a:	00 97       	sbiw	r24, 0x00	; 0
    bc6c:	09 f0       	breq	.+2      	; 0xbc70 <f_sync+0x2c>
    bc6e:	5d c0       	rjmp	.+186    	; 0xbd2a <f_sync+0xe6>
    bc70:	f7 01       	movw	r30, r14
    bc72:	86 85       	ldd	r24, Z+14	; 0x0e
    bc74:	86 ff       	sbrs	r24, 6
    bc76:	55 c0       	rjmp	.+170    	; 0xbd22 <f_sync+0xde>
    bc78:	87 ff       	sbrs	r24, 7
    bc7a:	15 c0       	rjmp	.+42     	; 0xbca6 <f_sync+0x62>
    bc7c:	20 8d       	ldd	r18, Z+24	; 0x18
    bc7e:	31 8d       	ldd	r19, Z+25	; 0x19
    bc80:	42 8d       	ldd	r20, Z+26	; 0x1a
    bc82:	53 8d       	ldd	r21, Z+27	; 0x1b
    bc84:	e9 81       	ldd	r30, Y+1	; 0x01
    bc86:	fa 81       	ldd	r31, Y+2	; 0x02
    bc88:	01 e0       	ldi	r16, 0x01	; 1
    bc8a:	10 e0       	ldi	r17, 0x00	; 0
    bc8c:	b7 01       	movw	r22, r14
    bc8e:	6c 5d       	subi	r22, 0xDC	; 220
    bc90:	7f 4f       	sbci	r23, 0xFF	; 255
    bc92:	81 81       	ldd	r24, Z+1	; 0x01
    bc94:	0e 94 8a 69 	call	0xd314	; 0xd314 <disk_write>
    bc98:	89 2b       	or	r24, r25
    bc9a:	09 f0       	breq	.+2      	; 0xbc9e <f_sync+0x5a>
    bc9c:	44 c0       	rjmp	.+136    	; 0xbd26 <f_sync+0xe2>
    bc9e:	f7 01       	movw	r30, r14
    bca0:	86 85       	ldd	r24, Z+14	; 0x0e
    bca2:	8f 77       	andi	r24, 0x7F	; 127
    bca4:	86 87       	std	Z+14, r24	; 0x0e
    bca6:	0e 94 3f 70 	call	0xe07e	; 0xe07e <get_fattime>
    bcaa:	4b 01       	movw	r8, r22
    bcac:	5c 01       	movw	r10, r24
    bcae:	f7 01       	movw	r30, r14
    bcb0:	44 8d       	ldd	r20, Z+28	; 0x1c
    bcb2:	55 8d       	ldd	r21, Z+29	; 0x1d
    bcb4:	66 8d       	ldd	r22, Z+30	; 0x1e
    bcb6:	77 8d       	ldd	r23, Z+31	; 0x1f
    bcb8:	89 81       	ldd	r24, Y+1	; 0x01
    bcba:	9a 81       	ldd	r25, Y+2	; 0x02
    bcbc:	0e 94 48 4b 	call	0x9690	; 0x9690 <move_window>
    bcc0:	00 97       	sbiw	r24, 0x00	; 0
    bcc2:	99 f5       	brne	.+102    	; 0xbd2a <f_sync+0xe6>
    bcc4:	f7 01       	movw	r30, r14
    bcc6:	00 a1       	ldd	r16, Z+32	; 0x20
    bcc8:	11 a1       	ldd	r17, Z+33	; 0x21
    bcca:	f8 01       	movw	r30, r16
    bccc:	83 85       	ldd	r24, Z+11	; 0x0b
    bcce:	80 62       	ori	r24, 0x20	; 32
    bcd0:	83 87       	std	Z+11, r24	; 0x0b
    bcd2:	f7 01       	movw	r30, r14
    bcd4:	26 81       	ldd	r18, Z+6	; 0x06
    bcd6:	37 81       	ldd	r19, Z+7	; 0x07
    bcd8:	40 85       	ldd	r20, Z+8	; 0x08
    bcda:	51 85       	ldd	r21, Z+9	; 0x09
    bcdc:	b8 01       	movw	r22, r16
    bcde:	80 81       	ld	r24, Z
    bce0:	91 81       	ldd	r25, Z+1	; 0x01
    bce2:	0e 94 ce 49 	call	0x939c	; 0x939c <st_clust.isra.4>
    bce6:	f7 01       	movw	r30, r14
    bce8:	42 85       	ldd	r20, Z+10	; 0x0a
    bcea:	53 85       	ldd	r21, Z+11	; 0x0b
    bcec:	64 85       	ldd	r22, Z+12	; 0x0c
    bcee:	75 85       	ldd	r23, Z+13	; 0x0d
    bcf0:	c8 01       	movw	r24, r16
    bcf2:	4c 96       	adiw	r24, 0x1c	; 28
    bcf4:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <st_dword>
    bcf8:	b5 01       	movw	r22, r10
    bcfa:	a4 01       	movw	r20, r8
    bcfc:	c8 01       	movw	r24, r16
    bcfe:	46 96       	adiw	r24, 0x16	; 22
    bd00:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <st_dword>
    bd04:	f8 01       	movw	r30, r16
    bd06:	12 8a       	std	Z+18, r1	; 0x12
    bd08:	13 8a       	std	Z+19, r1	; 0x13
    bd0a:	89 81       	ldd	r24, Y+1	; 0x01
    bd0c:	9a 81       	ldd	r25, Y+2	; 0x02
    bd0e:	21 e0       	ldi	r18, 0x01	; 1
    bd10:	fc 01       	movw	r30, r24
    bd12:	23 83       	std	Z+3, r18	; 0x03
    bd14:	0e 94 2e 4a 	call	0x945c	; 0x945c <sync_fs>
    bd18:	f7 01       	movw	r30, r14
    bd1a:	26 85       	ldd	r18, Z+14	; 0x0e
    bd1c:	2f 7b       	andi	r18, 0xBF	; 191
    bd1e:	26 87       	std	Z+14, r18	; 0x0e
    bd20:	04 c0       	rjmp	.+8      	; 0xbd2a <f_sync+0xe6>
    bd22:	80 e0       	ldi	r24, 0x00	; 0
    bd24:	01 c0       	rjmp	.+2      	; 0xbd28 <f_sync+0xe4>
    bd26:	81 e0       	ldi	r24, 0x01	; 1
    bd28:	90 e0       	ldi	r25, 0x00	; 0
    bd2a:	0f 90       	pop	r0
    bd2c:	0f 90       	pop	r0
    bd2e:	df 91       	pop	r29
    bd30:	cf 91       	pop	r28
    bd32:	1f 91       	pop	r17
    bd34:	0f 91       	pop	r16
    bd36:	ff 90       	pop	r15
    bd38:	ef 90       	pop	r14
    bd3a:	bf 90       	pop	r11
    bd3c:	af 90       	pop	r10
    bd3e:	9f 90       	pop	r9
    bd40:	8f 90       	pop	r8
    bd42:	08 95       	ret

0000bd44 <f_close>:
    bd44:	a2 e0       	ldi	r26, 0x02	; 2
    bd46:	b0 e0       	ldi	r27, 0x00	; 0
    bd48:	e8 ea       	ldi	r30, 0xA8	; 168
    bd4a:	fe e5       	ldi	r31, 0x5E	; 94
    bd4c:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
    bd50:	8c 01       	movw	r16, r24
    bd52:	78 df       	rcall	.-272    	; 0xbc44 <f_sync>
    bd54:	00 97       	sbiw	r24, 0x00	; 0
    bd56:	59 f4       	brne	.+22     	; 0xbd6e <f_close+0x2a>
    bd58:	be 01       	movw	r22, r28
    bd5a:	6f 5f       	subi	r22, 0xFF	; 255
    bd5c:	7f 4f       	sbci	r23, 0xFF	; 255
    bd5e:	c8 01       	movw	r24, r16
    bd60:	0e 94 58 48 	call	0x90b0	; 0x90b0 <validate>
    bd64:	00 97       	sbiw	r24, 0x00	; 0
    bd66:	19 f4       	brne	.+6      	; 0xbd6e <f_close+0x2a>
    bd68:	f8 01       	movw	r30, r16
    bd6a:	11 82       	std	Z+1, r1	; 0x01
    bd6c:	10 82       	st	Z, r1
    bd6e:	22 96       	adiw	r28, 0x02	; 2
    bd70:	e4 e0       	ldi	r30, 0x04	; 4
    bd72:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

0000bd76 <f_chdir>:
    bd76:	a2 e3       	ldi	r26, 0x32	; 50
    bd78:	b0 e0       	ldi	r27, 0x00	; 0
    bd7a:	e1 ec       	ldi	r30, 0xC1	; 193
    bd7c:	fe e5       	ldi	r31, 0x5E	; 94
    bd7e:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    bd82:	9a ab       	std	Y+50, r25	; 0x32
    bd84:	89 ab       	std	Y+49, r24	; 0x31
    bd86:	40 e0       	ldi	r20, 0x00	; 0
    bd88:	be 01       	movw	r22, r28
    bd8a:	61 5d       	subi	r22, 0xD1	; 209
    bd8c:	7f 4f       	sbci	r23, 0xFF	; 255
    bd8e:	ce 01       	movw	r24, r28
    bd90:	c1 96       	adiw	r24, 0x31	; 49
    bd92:	0e 94 c3 4b 	call	0x9786	; 0x9786 <mount_volume>
    bd96:	00 97       	sbiw	r24, 0x00	; 0
    bd98:	09 f0       	breq	.+2      	; 0xbd9c <f_chdir+0x26>
    bd9a:	44 c0       	rjmp	.+136    	; 0xbe24 <f_chdir+0xae>
    bd9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    bd9e:	98 a9       	ldd	r25, Y+48	; 0x30
    bda0:	9a 83       	std	Y+2, r25	; 0x02
    bda2:	89 83       	std	Y+1, r24	; 0x01
    bda4:	80 e0       	ldi	r24, 0x00	; 0
    bda6:	92 e0       	ldi	r25, 0x02	; 2
    bda8:	0e 94 be 68 	call	0xd17c	; 0xd17c <ff_memalloc>
    bdac:	7c 01       	movw	r14, r24
    bdae:	00 97       	sbiw	r24, 0x00	; 0
    bdb0:	a9 f1       	breq	.+106    	; 0xbe1c <f_chdir+0xa6>
    bdb2:	ef a5       	ldd	r30, Y+47	; 0x2f
    bdb4:	f8 a9       	ldd	r31, Y+48	; 0x30
    bdb6:	94 87       	std	Z+12, r25	; 0x0c
    bdb8:	83 87       	std	Z+11, r24	; 0x0b
    bdba:	69 a9       	ldd	r22, Y+49	; 0x31
    bdbc:	7a a9       	ldd	r23, Y+50	; 0x32
    bdbe:	ce 01       	movw	r24, r28
    bdc0:	01 96       	adiw	r24, 0x01	; 1
    bdc2:	2e d8       	rcall	.-4004   	; 0xae20 <follow_path>
    bdc4:	8c 01       	movw	r16, r24
    bdc6:	89 2b       	or	r24, r25
    bdc8:	09 f5       	brne	.+66     	; 0xbe0c <f_chdir+0x96>
    bdca:	88 a5       	ldd	r24, Y+40	; 0x28
    bdcc:	87 ff       	sbrs	r24, 7
    bdce:	0b c0       	rjmp	.+22     	; 0xbde6 <f_chdir+0x70>
    bdd0:	ef a5       	ldd	r30, Y+47	; 0x2f
    bdd2:	f8 a9       	ldd	r31, Y+48	; 0x30
    bdd4:	8f 81       	ldd	r24, Y+7	; 0x07
    bdd6:	98 85       	ldd	r25, Y+8	; 0x08
    bdd8:	a9 85       	ldd	r26, Y+9	; 0x09
    bdda:	ba 85       	ldd	r27, Y+10	; 0x0a
    bddc:	85 8b       	std	Z+21, r24	; 0x15
    bdde:	96 8b       	std	Z+22, r25	; 0x16
    bde0:	a7 8b       	std	Z+23, r26	; 0x17
    bde2:	b0 8f       	std	Z+24, r27	; 0x18
    bde4:	13 c0       	rjmp	.+38     	; 0xbe0c <f_chdir+0x96>
    bde6:	8d 81       	ldd	r24, Y+5	; 0x05
    bde8:	84 ff       	sbrs	r24, 4
    bdea:	0e c0       	rjmp	.+28     	; 0xbe08 <f_chdir+0x92>
    bdec:	cf a4       	ldd	r12, Y+47	; 0x2f
    bdee:	d8 a8       	ldd	r13, Y+48	; 0x30
    bdf0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bdf2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bdf4:	f6 01       	movw	r30, r12
    bdf6:	80 81       	ld	r24, Z
    bdf8:	0e 94 b9 49 	call	0x9372	; 0x9372 <ld_clust.isra.3>
    bdfc:	f6 01       	movw	r30, r12
    bdfe:	65 8b       	std	Z+21, r22	; 0x15
    be00:	76 8b       	std	Z+22, r23	; 0x16
    be02:	87 8b       	std	Z+23, r24	; 0x17
    be04:	90 8f       	std	Z+24, r25	; 0x18
    be06:	02 c0       	rjmp	.+4      	; 0xbe0c <f_chdir+0x96>
    be08:	05 e0       	ldi	r16, 0x05	; 5
    be0a:	10 e0       	ldi	r17, 0x00	; 0
    be0c:	c7 01       	movw	r24, r14
    be0e:	0e 94 c1 68 	call	0xd182	; 0xd182 <ff_memfree>
    be12:	04 30       	cpi	r16, 0x04	; 4
    be14:	11 05       	cpc	r17, r1
    be16:	29 f4       	brne	.+10     	; 0xbe22 <f_chdir+0xac>
    be18:	85 e0       	ldi	r24, 0x05	; 5
    be1a:	01 c0       	rjmp	.+2      	; 0xbe1e <f_chdir+0xa8>
    be1c:	81 e1       	ldi	r24, 0x11	; 17
    be1e:	90 e0       	ldi	r25, 0x00	; 0
    be20:	01 c0       	rjmp	.+2      	; 0xbe24 <f_chdir+0xae>
    be22:	c8 01       	movw	r24, r16
    be24:	e2 96       	adiw	r28, 0x32	; 50
    be26:	e8 e0       	ldi	r30, 0x08	; 8
    be28:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0000be2c <f_getcwd>:
    be2c:	a8 e4       	ldi	r26, 0x48	; 72
    be2e:	b1 e0       	ldi	r27, 0x01	; 1
    be30:	ec e1       	ldi	r30, 0x1C	; 28
    be32:	ff e5       	ldi	r31, 0x5F	; 95
    be34:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    be38:	c9 5b       	subi	r28, 0xB9	; 185
    be3a:	de 4f       	sbci	r29, 0xFE	; 254
    be3c:	99 83       	std	Y+1, r25	; 0x01
    be3e:	88 83       	st	Y, r24
    be40:	c7 54       	subi	r28, 0x47	; 71
    be42:	d1 40       	sbci	r29, 0x01	; 1
    be44:	4b 01       	movw	r8, r22
    be46:	7c 01       	movw	r14, r24
    be48:	fc 01       	movw	r30, r24
    be4a:	10 82       	st	Z, r1
    be4c:	40 e0       	ldi	r20, 0x00	; 0
    be4e:	be 01       	movw	r22, r28
    be50:	6b 5b       	subi	r22, 0xBB	; 187
    be52:	7e 4f       	sbci	r23, 0xFE	; 254
    be54:	ce 01       	movw	r24, r28
    be56:	89 5b       	subi	r24, 0xB9	; 185
    be58:	9e 4f       	sbci	r25, 0xFE	; 254
    be5a:	0e 94 c3 4b 	call	0x9786	; 0x9786 <mount_volume>
    be5e:	1c 01       	movw	r2, r24
    be60:	89 2b       	or	r24, r25
    be62:	09 f0       	breq	.+2      	; 0xbe66 <f_getcwd+0x3a>
    be64:	03 c1       	rjmp	.+518    	; 0xc06c <f_getcwd+0x240>
    be66:	cb 5b       	subi	r28, 0xBB	; 187
    be68:	de 4f       	sbci	r29, 0xFE	; 254
    be6a:	88 81       	ld	r24, Y
    be6c:	99 81       	ldd	r25, Y+1	; 0x01
    be6e:	c5 54       	subi	r28, 0x45	; 69
    be70:	d1 40       	sbci	r29, 0x01	; 1
    be72:	c9 5e       	subi	r28, 0xE9	; 233
    be74:	de 4f       	sbci	r29, 0xFE	; 254
    be76:	99 83       	std	Y+1, r25	; 0x01
    be78:	88 83       	st	Y, r24
    be7a:	c7 51       	subi	r28, 0x17	; 23
    be7c:	d1 40       	sbci	r29, 0x01	; 1
    be7e:	80 e0       	ldi	r24, 0x00	; 0
    be80:	92 e0       	ldi	r25, 0x02	; 2
    be82:	0e 94 be 68 	call	0xd17c	; 0xd17c <ff_memalloc>
    be86:	5c 01       	movw	r10, r24
    be88:	00 97       	sbiw	r24, 0x00	; 0
    be8a:	09 f4       	brne	.+2      	; 0xbe8e <f_getcwd+0x62>
    be8c:	f3 c0       	rjmp	.+486    	; 0xc074 <f_getcwd+0x248>
    be8e:	cb 5b       	subi	r28, 0xBB	; 187
    be90:	de 4f       	sbci	r29, 0xFE	; 254
    be92:	e8 81       	ld	r30, Y
    be94:	f9 81       	ldd	r31, Y+1	; 0x01
    be96:	c5 54       	subi	r28, 0x45	; 69
    be98:	d1 40       	sbci	r29, 0x01	; 1
    be9a:	94 87       	std	Z+12, r25	; 0x0c
    be9c:	83 87       	std	Z+11, r24	; 0x0b
    be9e:	85 89       	ldd	r24, Z+21	; 0x15
    bea0:	96 89       	ldd	r25, Z+22	; 0x16
    bea2:	a7 89       	ldd	r26, Z+23	; 0x17
    bea4:	b0 8d       	ldd	r27, Z+24	; 0x18
    bea6:	c3 5e       	subi	r28, 0xE3	; 227
    bea8:	de 4f       	sbci	r29, 0xFE	; 254
    beaa:	88 83       	st	Y, r24
    beac:	99 83       	std	Y+1, r25	; 0x01
    beae:	aa 83       	std	Y+2, r26	; 0x02
    beb0:	bb 83       	std	Y+3, r27	; 0x03
    beb2:	cd 51       	subi	r28, 0x1D	; 29
    beb4:	d1 40       	sbci	r29, 0x01	; 1
    beb6:	84 01       	movw	r16, r8
    beb8:	ce 01       	movw	r24, r28
    beba:	01 96       	adiw	r24, 0x01	; 1
    bebc:	6c 01       	movw	r12, r24
    bebe:	c3 5e       	subi	r28, 0xE3	; 227
    bec0:	de 4f       	sbci	r29, 0xFE	; 254
    bec2:	48 80       	ld	r4, Y
    bec4:	59 80       	ldd	r5, Y+1	; 0x01
    bec6:	6a 80       	ldd	r6, Y+2	; 0x02
    bec8:	7b 80       	ldd	r7, Y+3	; 0x03
    beca:	cd 51       	subi	r28, 0x1D	; 29
    becc:	d1 40       	sbci	r29, 0x01	; 1
    bece:	41 14       	cp	r4, r1
    bed0:	51 04       	cpc	r5, r1
    bed2:	61 04       	cpc	r6, r1
    bed4:	71 04       	cpc	r7, r1
    bed6:	09 f4       	brne	.+2      	; 0xbeda <f_getcwd+0xae>
    bed8:	a3 c0       	rjmp	.+326    	; 0xc020 <f_getcwd+0x1f4>
    beda:	40 e2       	ldi	r20, 0x20	; 32
    bedc:	50 e0       	ldi	r21, 0x00	; 0
    bede:	60 e0       	ldi	r22, 0x00	; 0
    bee0:	70 e0       	ldi	r23, 0x00	; 0
    bee2:	ce 01       	movw	r24, r28
    bee4:	89 5e       	subi	r24, 0xE9	; 233
    bee6:	9e 4f       	sbci	r25, 0xFE	; 254
    bee8:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <dir_sdi>
    beec:	00 97       	sbiw	r24, 0x00	; 0
    beee:	09 f0       	breq	.+2      	; 0xbef2 <f_getcwd+0xc6>
    bef0:	c6 c0       	rjmp	.+396    	; 0xc07e <f_getcwd+0x252>
    bef2:	c3 5d       	subi	r28, 0xD3	; 211
    bef4:	de 4f       	sbci	r29, 0xFE	; 254
    bef6:	48 81       	ld	r20, Y
    bef8:	59 81       	ldd	r21, Y+1	; 0x01
    befa:	6a 81       	ldd	r22, Y+2	; 0x02
    befc:	7b 81       	ldd	r23, Y+3	; 0x03
    befe:	cd 52       	subi	r28, 0x2D	; 45
    bf00:	d1 40       	sbci	r29, 0x01	; 1
    bf02:	cb 5b       	subi	r28, 0xBB	; 187
    bf04:	de 4f       	sbci	r29, 0xFE	; 254
    bf06:	88 81       	ld	r24, Y
    bf08:	99 81       	ldd	r25, Y+1	; 0x01
    bf0a:	c5 54       	subi	r28, 0x45	; 69
    bf0c:	d1 40       	sbci	r29, 0x01	; 1
    bf0e:	0e 94 48 4b 	call	0x9690	; 0x9690 <move_window>
    bf12:	00 97       	sbiw	r24, 0x00	; 0
    bf14:	09 f0       	breq	.+2      	; 0xbf18 <f_getcwd+0xec>
    bf16:	b3 c0       	rjmp	.+358    	; 0xc07e <f_getcwd+0x252>
    bf18:	cf 5c       	subi	r28, 0xCF	; 207
    bf1a:	de 4f       	sbci	r29, 0xFE	; 254
    bf1c:	68 81       	ld	r22, Y
    bf1e:	79 81       	ldd	r23, Y+1	; 0x01
    bf20:	c1 53       	subi	r28, 0x31	; 49
    bf22:	d1 40       	sbci	r29, 0x01	; 1
    bf24:	cb 5b       	subi	r28, 0xBB	; 187
    bf26:	de 4f       	sbci	r29, 0xFE	; 254
    bf28:	e8 81       	ld	r30, Y
    bf2a:	f9 81       	ldd	r31, Y+1	; 0x01
    bf2c:	c5 54       	subi	r28, 0x45	; 69
    bf2e:	d1 40       	sbci	r29, 0x01	; 1
    bf30:	80 81       	ld	r24, Z
    bf32:	0e 94 b9 49 	call	0x9372	; 0x9372 <ld_clust.isra.3>
    bf36:	c3 5e       	subi	r28, 0xE3	; 227
    bf38:	de 4f       	sbci	r29, 0xFE	; 254
    bf3a:	68 83       	st	Y, r22
    bf3c:	79 83       	std	Y+1, r23	; 0x01
    bf3e:	8a 83       	std	Y+2, r24	; 0x02
    bf40:	9b 83       	std	Y+3, r25	; 0x03
    bf42:	cd 51       	subi	r28, 0x1D	; 29
    bf44:	d1 40       	sbci	r29, 0x01	; 1
    bf46:	40 e0       	ldi	r20, 0x00	; 0
    bf48:	50 e0       	ldi	r21, 0x00	; 0
    bf4a:	ba 01       	movw	r22, r20
    bf4c:	ce 01       	movw	r24, r28
    bf4e:	89 5e       	subi	r24, 0xE9	; 233
    bf50:	9e 4f       	sbci	r25, 0xFE	; 254
    bf52:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <dir_sdi>
    bf56:	00 97       	sbiw	r24, 0x00	; 0
    bf58:	09 f0       	breq	.+2      	; 0xbf5c <f_getcwd+0x130>
    bf5a:	91 c0       	rjmp	.+290    	; 0xc07e <f_getcwd+0x252>
    bf5c:	60 e0       	ldi	r22, 0x00	; 0
    bf5e:	70 e0       	ldi	r23, 0x00	; 0
    bf60:	ce 01       	movw	r24, r28
    bf62:	89 5e       	subi	r24, 0xE9	; 233
    bf64:	9e 4f       	sbci	r25, 0xFE	; 254
    bf66:	0e 94 63 53 	call	0xa6c6	; 0xa6c6 <dir_read>
    bf6a:	00 97       	sbiw	r24, 0x00	; 0
    bf6c:	09 f0       	breq	.+2      	; 0xbf70 <f_getcwd+0x144>
    bf6e:	89 c0       	rjmp	.+274    	; 0xc082 <f_getcwd+0x256>
    bf70:	cf 5c       	subi	r28, 0xCF	; 207
    bf72:	de 4f       	sbci	r29, 0xFE	; 254
    bf74:	68 81       	ld	r22, Y
    bf76:	79 81       	ldd	r23, Y+1	; 0x01
    bf78:	c1 53       	subi	r28, 0x31	; 49
    bf7a:	d1 40       	sbci	r29, 0x01	; 1
    bf7c:	cb 5b       	subi	r28, 0xBB	; 187
    bf7e:	de 4f       	sbci	r29, 0xFE	; 254
    bf80:	e8 81       	ld	r30, Y
    bf82:	f9 81       	ldd	r31, Y+1	; 0x01
    bf84:	c5 54       	subi	r28, 0x45	; 69
    bf86:	d1 40       	sbci	r29, 0x01	; 1
    bf88:	80 81       	ld	r24, Z
    bf8a:	0e 94 b9 49 	call	0x9372	; 0x9372 <ld_clust.isra.3>
    bf8e:	46 16       	cp	r4, r22
    bf90:	57 06       	cpc	r5, r23
    bf92:	68 06       	cpc	r6, r24
    bf94:	79 06       	cpc	r7, r25
    bf96:	41 f4       	brne	.+16     	; 0xbfa8 <f_getcwd+0x17c>
    bf98:	b6 01       	movw	r22, r12
    bf9a:	ce 01       	movw	r24, r28
    bf9c:	89 5e       	subi	r24, 0xE9	; 233
    bf9e:	9e 4f       	sbci	r25, 0xFE	; 254
    bfa0:	0e 94 84 48 	call	0x9108	; 0x9108 <get_fileinfo>
    bfa4:	f6 01       	movw	r30, r12
    bfa6:	0a c0       	rjmp	.+20     	; 0xbfbc <f_getcwd+0x190>
    bfa8:	60 e0       	ldi	r22, 0x00	; 0
    bfaa:	70 e0       	ldi	r23, 0x00	; 0
    bfac:	ce 01       	movw	r24, r28
    bfae:	89 5e       	subi	r24, 0xE9	; 233
    bfb0:	9e 4f       	sbci	r25, 0xFE	; 254
    bfb2:	0e 94 42 52 	call	0xa484	; 0xa484 <dir_next>
    bfb6:	00 97       	sbiw	r24, 0x00	; 0
    bfb8:	89 f2       	breq	.-94     	; 0xbf5c <f_getcwd+0x130>
    bfba:	63 c0       	rjmp	.+198    	; 0xc082 <f_getcwd+0x256>
    bfbc:	cf 01       	movw	r24, r30
    bfbe:	8c 19       	sub	r24, r12
    bfc0:	9d 09       	sbc	r25, r13
    bfc2:	31 96       	adiw	r30, 0x01	; 1
    bfc4:	25 89       	ldd	r18, Z+21	; 0x15
    bfc6:	21 11       	cpse	r18, r1
    bfc8:	f9 cf       	rjmp	.-14     	; 0xbfbc <f_getcwd+0x190>
    bfca:	9c 01       	movw	r18, r24
    bfcc:	2f 5f       	subi	r18, 0xFF	; 255
    bfce:	3f 4f       	sbci	r19, 0xFF	; 255
    bfd0:	02 17       	cp	r16, r18
    bfd2:	13 07       	cpc	r17, r19
    bfd4:	08 f4       	brcc	.+2      	; 0xbfd8 <f_getcwd+0x1ac>
    bfd6:	51 c0       	rjmp	.+162    	; 0xc07a <f_getcwd+0x24e>
    bfd8:	f6 01       	movw	r30, r12
    bfda:	e8 0f       	add	r30, r24
    bfdc:	f9 1f       	adc	r31, r25
    bfde:	98 01       	movw	r18, r16
    bfe0:	ce 16       	cp	r12, r30
    bfe2:	df 06       	cpc	r13, r31
    bfe4:	71 f0       	breq	.+28     	; 0xc002 <f_getcwd+0x1d6>
    bfe6:	21 50       	subi	r18, 0x01	; 1
    bfe8:	31 09       	sbc	r19, r1
    bfea:	45 89       	ldd	r20, Z+21	; 0x15
    bfec:	c9 5b       	subi	r28, 0xB9	; 185
    bfee:	de 4f       	sbci	r29, 0xFE	; 254
    bff0:	a8 81       	ld	r26, Y
    bff2:	b9 81       	ldd	r27, Y+1	; 0x01
    bff4:	c7 54       	subi	r28, 0x47	; 71
    bff6:	d1 40       	sbci	r29, 0x01	; 1
    bff8:	a2 0f       	add	r26, r18
    bffa:	b3 1f       	adc	r27, r19
    bffc:	4c 93       	st	X, r20
    bffe:	31 97       	sbiw	r30, 0x01	; 1
    c000:	ef cf       	rjmp	.-34     	; 0xbfe0 <f_getcwd+0x1b4>
    c002:	80 95       	com	r24
    c004:	90 95       	com	r25
    c006:	08 0f       	add	r16, r24
    c008:	19 1f       	adc	r17, r25
    c00a:	c9 5b       	subi	r28, 0xB9	; 185
    c00c:	de 4f       	sbci	r29, 0xFE	; 254
    c00e:	e8 81       	ld	r30, Y
    c010:	f9 81       	ldd	r31, Y+1	; 0x01
    c012:	c7 54       	subi	r28, 0x47	; 71
    c014:	d1 40       	sbci	r29, 0x01	; 1
    c016:	e0 0f       	add	r30, r16
    c018:	f1 1f       	adc	r31, r17
    c01a:	9f e2       	ldi	r25, 0x2F	; 47
    c01c:	90 83       	st	Z, r25
    c01e:	4f cf       	rjmp	.-354    	; 0xbebe <f_getcwd+0x92>
    c020:	08 15       	cp	r16, r8
    c022:	19 05       	cpc	r17, r9
    c024:	61 f4       	brne	.+24     	; 0xc03e <f_getcwd+0x212>
    c026:	01 50       	subi	r16, 0x01	; 1
    c028:	11 09       	sbc	r17, r1
    c02a:	c9 5b       	subi	r28, 0xB9	; 185
    c02c:	de 4f       	sbci	r29, 0xFE	; 254
    c02e:	e8 81       	ld	r30, Y
    c030:	f9 81       	ldd	r31, Y+1	; 0x01
    c032:	c7 54       	subi	r28, 0x47	; 71
    c034:	d1 40       	sbci	r29, 0x01	; 1
    c036:	e0 0f       	add	r30, r16
    c038:	f1 1f       	adc	r31, r17
    c03a:	8f e2       	ldi	r24, 0x2F	; 47
    c03c:	80 83       	st	Z, r24
    c03e:	ef ef       	ldi	r30, 0xFF	; 255
    c040:	ee 1a       	sub	r14, r30
    c042:	fe 0a       	sbc	r15, r30
    c044:	c9 5b       	subi	r28, 0xB9	; 185
    c046:	de 4f       	sbci	r29, 0xFE	; 254
    c048:	e8 81       	ld	r30, Y
    c04a:	f9 81       	ldd	r31, Y+1	; 0x01
    c04c:	c7 54       	subi	r28, 0x47	; 71
    c04e:	d1 40       	sbci	r29, 0x01	; 1
    c050:	e0 0f       	add	r30, r16
    c052:	f1 1f       	adc	r31, r17
    c054:	80 81       	ld	r24, Z
    c056:	f7 01       	movw	r30, r14
    c058:	31 97       	sbiw	r30, 0x01	; 1
    c05a:	80 83       	st	Z, r24
    c05c:	0f 5f       	subi	r16, 0xFF	; 255
    c05e:	1f 4f       	sbci	r17, 0xFF	; 255
    c060:	08 15       	cp	r16, r8
    c062:	19 05       	cpc	r17, r9
    c064:	60 f3       	brcs	.-40     	; 0xc03e <f_getcwd+0x212>
    c066:	c5 01       	movw	r24, r10
    c068:	0e 94 c1 68 	call	0xd182	; 0xd182 <ff_memfree>
    c06c:	f7 01       	movw	r30, r14
    c06e:	10 82       	st	Z, r1
    c070:	c1 01       	movw	r24, r2
    c072:	0d c0       	rjmp	.+26     	; 0xc08e <f_getcwd+0x262>
    c074:	81 e1       	ldi	r24, 0x11	; 17
    c076:	90 e0       	ldi	r25, 0x00	; 0
    c078:	0a c0       	rjmp	.+20     	; 0xc08e <f_getcwd+0x262>
    c07a:	81 e1       	ldi	r24, 0x11	; 17
    c07c:	90 e0       	ldi	r25, 0x00	; 0
    c07e:	1c 01       	movw	r2, r24
    c080:	f2 cf       	rjmp	.-28     	; 0xc066 <f_getcwd+0x23a>
    c082:	84 30       	cpi	r24, 0x04	; 4
    c084:	91 05       	cpc	r25, r1
    c086:	d9 f7       	brne	.-10     	; 0xc07e <f_getcwd+0x252>
    c088:	82 e0       	ldi	r24, 0x02	; 2
    c08a:	90 e0       	ldi	r25, 0x00	; 0
    c08c:	f8 cf       	rjmp	.-16     	; 0xc07e <f_getcwd+0x252>
    c08e:	c8 5b       	subi	r28, 0xB8	; 184
    c090:	de 4f       	sbci	r29, 0xFE	; 254
    c092:	e2 e1       	ldi	r30, 0x12	; 18
    c094:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0000c098 <f_lseek>:
    c098:	aa e0       	ldi	r26, 0x0A	; 10
    c09a:	b0 e0       	ldi	r27, 0x00	; 0
    c09c:	e2 e5       	ldi	r30, 0x52	; 82
    c09e:	f0 e6       	ldi	r31, 0x60	; 96
    c0a0:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    c0a4:	1c 01       	movw	r2, r24
    c0a6:	6a 01       	movw	r12, r20
    c0a8:	7b 01       	movw	r14, r22
    c0aa:	be 01       	movw	r22, r28
    c0ac:	6f 5f       	subi	r22, 0xFF	; 255
    c0ae:	7f 4f       	sbci	r23, 0xFF	; 255
    c0b0:	0e 94 58 48 	call	0x90b0	; 0x90b0 <validate>
    c0b4:	00 97       	sbiw	r24, 0x00	; 0
    c0b6:	09 f0       	breq	.+2      	; 0xc0ba <f_lseek+0x22>
    c0b8:	a6 c2       	rjmp	.+1356   	; 0xc606 <f_lseek+0x56e>
    c0ba:	f1 01       	movw	r30, r2
    c0bc:	87 85       	ldd	r24, Z+15	; 0x0f
    c0be:	90 e0       	ldi	r25, 0x00	; 0
    c0c0:	00 97       	sbiw	r24, 0x00	; 0
    c0c2:	09 f0       	breq	.+2      	; 0xc0c6 <f_lseek+0x2e>
    c0c4:	a0 c2       	rjmp	.+1344   	; 0xc606 <f_lseek+0x56e>
    c0c6:	22 a1       	ldd	r18, Z+34	; 0x22
    c0c8:	33 a1       	ldd	r19, Z+35	; 0x23
    c0ca:	21 15       	cp	r18, r1
    c0cc:	31 05       	cpc	r19, r1
    c0ce:	09 f4       	brne	.+2      	; 0xc0d2 <f_lseek+0x3a>
    c0d0:	2d c1       	rjmp	.+602    	; 0xc32c <f_lseek+0x294>
    c0d2:	ff ef       	ldi	r31, 0xFF	; 255
    c0d4:	cf 16       	cp	r12, r31
    c0d6:	df 06       	cpc	r13, r31
    c0d8:	ef 06       	cpc	r14, r31
    c0da:	ff 06       	cpc	r15, r31
    c0dc:	09 f0       	breq	.+2      	; 0xc0e0 <f_lseek+0x48>
    c0de:	9a c0       	rjmp	.+308    	; 0xc214 <f_lseek+0x17c>
    c0e0:	89 01       	movw	r16, r18
    c0e2:	0c 5f       	subi	r16, 0xFC	; 252
    c0e4:	1f 4f       	sbci	r17, 0xFF	; 255
    c0e6:	d9 01       	movw	r26, r18
    c0e8:	4d 91       	ld	r20, X+
    c0ea:	5d 91       	ld	r21, X+
    c0ec:	6d 91       	ld	r22, X+
    c0ee:	7c 91       	ld	r23, X
    c0f0:	4f 83       	std	Y+7, r20	; 0x07
    c0f2:	58 87       	std	Y+8, r21	; 0x08
    c0f4:	69 87       	std	Y+9, r22	; 0x09
    c0f6:	7a 87       	std	Y+10, r23	; 0x0a
    c0f8:	f1 01       	movw	r30, r2
    c0fa:	86 80       	ldd	r8, Z+6	; 0x06
    c0fc:	97 80       	ldd	r9, Z+7	; 0x07
    c0fe:	a0 84       	ldd	r10, Z+8	; 0x08
    c100:	b1 84       	ldd	r11, Z+9	; 0x09
    c102:	52 e0       	ldi	r21, 0x02	; 2
    c104:	c5 2e       	mov	r12, r21
    c106:	d1 2c       	mov	r13, r1
    c108:	e1 2c       	mov	r14, r1
    c10a:	f1 2c       	mov	r15, r1
    c10c:	81 14       	cp	r8, r1
    c10e:	91 04       	cpc	r9, r1
    c110:	a1 04       	cpc	r10, r1
    c112:	b1 04       	cpc	r11, r1
    c114:	09 f4       	brne	.+2      	; 0xc118 <f_lseek+0x80>
    c116:	65 c0       	rjmp	.+202    	; 0xc1e2 <f_lseek+0x14a>
    c118:	24 01       	movw	r4, r8
    c11a:	35 01       	movw	r6, r10
    c11c:	1b 82       	std	Y+3, r1	; 0x03
    c11e:	1c 82       	std	Y+4, r1	; 0x04
    c120:	1d 82       	std	Y+5, r1	; 0x05
    c122:	1e 82       	std	Y+6, r1	; 0x06
    c124:	2b 81       	ldd	r18, Y+3	; 0x03
    c126:	3c 81       	ldd	r19, Y+4	; 0x04
    c128:	4d 81       	ldd	r20, Y+5	; 0x05
    c12a:	5e 81       	ldd	r21, Y+6	; 0x06
    c12c:	2f 5f       	subi	r18, 0xFF	; 255
    c12e:	3f 4f       	sbci	r19, 0xFF	; 255
    c130:	4f 4f       	sbci	r20, 0xFF	; 255
    c132:	5f 4f       	sbci	r21, 0xFF	; 255
    c134:	2b 83       	std	Y+3, r18	; 0x03
    c136:	3c 83       	std	Y+4, r19	; 0x04
    c138:	4d 83       	std	Y+5, r20	; 0x05
    c13a:	5e 83       	std	Y+6, r21	; 0x06
    c13c:	b3 01       	movw	r22, r6
    c13e:	a2 01       	movw	r20, r4
    c140:	d1 01       	movw	r26, r2
    c142:	8d 91       	ld	r24, X+
    c144:	9c 91       	ld	r25, X
    c146:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <get_fat.isra.9>
    c14a:	62 30       	cpi	r22, 0x02	; 2
    c14c:	71 05       	cpc	r23, r1
    c14e:	81 05       	cpc	r24, r1
    c150:	91 05       	cpc	r25, r1
    c152:	10 f4       	brcc	.+4      	; 0xc158 <f_lseek+0xc0>
    c154:	82 e0       	ldi	r24, 0x02	; 2
    c156:	07 c0       	rjmp	.+14     	; 0xc166 <f_lseek+0xce>
    c158:	6f 3f       	cpi	r22, 0xFF	; 255
    c15a:	ff ef       	ldi	r31, 0xFF	; 255
    c15c:	7f 07       	cpc	r23, r31
    c15e:	8f 07       	cpc	r24, r31
    c160:	9f 07       	cpc	r25, r31
    c162:	29 f4       	brne	.+10     	; 0xc16e <f_lseek+0xd6>
    c164:	81 e0       	ldi	r24, 0x01	; 1
    c166:	f1 01       	movw	r30, r2
    c168:	87 87       	std	Z+15, r24	; 0x0f
    c16a:	90 e0       	ldi	r25, 0x00	; 0
    c16c:	4c c2       	rjmp	.+1176   	; 0xc606 <f_lseek+0x56e>
    c16e:	a3 01       	movw	r20, r6
    c170:	92 01       	movw	r18, r4
    c172:	2f 5f       	subi	r18, 0xFF	; 255
    c174:	3f 4f       	sbci	r19, 0xFF	; 255
    c176:	4f 4f       	sbci	r20, 0xFF	; 255
    c178:	5f 4f       	sbci	r21, 0xFF	; 255
    c17a:	2b 01       	movw	r4, r22
    c17c:	3c 01       	movw	r6, r24
    c17e:	62 17       	cp	r22, r18
    c180:	73 07       	cpc	r23, r19
    c182:	84 07       	cpc	r24, r20
    c184:	95 07       	cpc	r25, r21
    c186:	71 f2       	breq	.-100    	; 0xc124 <f_lseek+0x8c>
    c188:	f2 e0       	ldi	r31, 0x02	; 2
    c18a:	cf 0e       	add	r12, r31
    c18c:	d1 1c       	adc	r13, r1
    c18e:	e1 1c       	adc	r14, r1
    c190:	f1 1c       	adc	r15, r1
    c192:	2f 81       	ldd	r18, Y+7	; 0x07
    c194:	38 85       	ldd	r19, Y+8	; 0x08
    c196:	49 85       	ldd	r20, Y+9	; 0x09
    c198:	5a 85       	ldd	r21, Y+10	; 0x0a
    c19a:	2c 15       	cp	r18, r12
    c19c:	3d 05       	cpc	r19, r13
    c19e:	4e 05       	cpc	r20, r14
    c1a0:	5f 05       	cpc	r21, r15
    c1a2:	88 f0       	brcs	.+34     	; 0xc1c6 <f_lseek+0x12e>
    c1a4:	2b 81       	ldd	r18, Y+3	; 0x03
    c1a6:	3c 81       	ldd	r19, Y+4	; 0x04
    c1a8:	4d 81       	ldd	r20, Y+5	; 0x05
    c1aa:	5e 81       	ldd	r21, Y+6	; 0x06
    c1ac:	d8 01       	movw	r26, r16
    c1ae:	2d 93       	st	X+, r18
    c1b0:	3d 93       	st	X+, r19
    c1b2:	4d 93       	st	X+, r20
    c1b4:	5c 93       	st	X, r21
    c1b6:	13 97       	sbiw	r26, 0x03	; 3
    c1b8:	f8 01       	movw	r30, r16
    c1ba:	84 82       	std	Z+4, r8	; 0x04
    c1bc:	95 82       	std	Z+5, r9	; 0x05
    c1be:	a6 82       	std	Z+6, r10	; 0x06
    c1c0:	b7 82       	std	Z+7, r11	; 0x07
    c1c2:	08 5f       	subi	r16, 0xF8	; 248
    c1c4:	1f 4f       	sbci	r17, 0xFF	; 255
    c1c6:	e9 81       	ldd	r30, Y+1	; 0x01
    c1c8:	fa 81       	ldd	r31, Y+2	; 0x02
    c1ca:	81 8c       	ldd	r8, Z+25	; 0x19
    c1cc:	92 8c       	ldd	r9, Z+26	; 0x1a
    c1ce:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c1d0:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c1d2:	68 15       	cp	r22, r8
    c1d4:	79 05       	cpc	r23, r9
    c1d6:	8a 05       	cpc	r24, r10
    c1d8:	9b 05       	cpc	r25, r11
    c1da:	18 f4       	brcc	.+6      	; 0xc1e2 <f_lseek+0x14a>
    c1dc:	4b 01       	movw	r8, r22
    c1de:	5c 01       	movw	r10, r24
    c1e0:	9b cf       	rjmp	.-202    	; 0xc118 <f_lseek+0x80>
    c1e2:	f1 01       	movw	r30, r2
    c1e4:	a2 a1       	ldd	r26, Z+34	; 0x22
    c1e6:	b3 a1       	ldd	r27, Z+35	; 0x23
    c1e8:	cd 92       	st	X+, r12
    c1ea:	dd 92       	st	X+, r13
    c1ec:	ed 92       	st	X+, r14
    c1ee:	fc 92       	st	X, r15
    c1f0:	13 97       	sbiw	r26, 0x03	; 3
    c1f2:	2f 81       	ldd	r18, Y+7	; 0x07
    c1f4:	38 85       	ldd	r19, Y+8	; 0x08
    c1f6:	49 85       	ldd	r20, Y+9	; 0x09
    c1f8:	5a 85       	ldd	r21, Y+10	; 0x0a
    c1fa:	2c 15       	cp	r18, r12
    c1fc:	3d 05       	cpc	r19, r13
    c1fe:	4e 05       	cpc	r20, r14
    c200:	5f 05       	cpc	r21, r15
    c202:	08 f4       	brcc	.+2      	; 0xc206 <f_lseek+0x16e>
    c204:	f7 c1       	rjmp	.+1006   	; 0xc5f4 <f_lseek+0x55c>
    c206:	d8 01       	movw	r26, r16
    c208:	1d 92       	st	X+, r1
    c20a:	1d 92       	st	X+, r1
    c20c:	1d 92       	st	X+, r1
    c20e:	1c 92       	st	X, r1
    c210:	13 97       	sbiw	r26, 0x03	; 3
    c212:	ee c1       	rjmp	.+988    	; 0xc5f0 <f_lseek+0x558>
    c214:	f1 01       	movw	r30, r2
    c216:	82 85       	ldd	r24, Z+10	; 0x0a
    c218:	93 85       	ldd	r25, Z+11	; 0x0b
    c21a:	a4 85       	ldd	r26, Z+12	; 0x0c
    c21c:	b5 85       	ldd	r27, Z+13	; 0x0d
    c21e:	46 01       	movw	r8, r12
    c220:	57 01       	movw	r10, r14
    c222:	8c 15       	cp	r24, r12
    c224:	9d 05       	cpc	r25, r13
    c226:	ae 05       	cpc	r26, r14
    c228:	bf 05       	cpc	r27, r15
    c22a:	10 f4       	brcc	.+4      	; 0xc230 <f_lseek+0x198>
    c22c:	4c 01       	movw	r8, r24
    c22e:	5d 01       	movw	r10, r26
    c230:	f1 01       	movw	r30, r2
    c232:	80 8a       	std	Z+16, r8	; 0x10
    c234:	91 8a       	std	Z+17, r9	; 0x11
    c236:	a2 8a       	std	Z+18, r10	; 0x12
    c238:	b3 8a       	std	Z+19, r11	; 0x13
    c23a:	81 14       	cp	r8, r1
    c23c:	91 04       	cpc	r9, r1
    c23e:	a1 04       	cpc	r10, r1
    c240:	b1 04       	cpc	r11, r1
    c242:	09 f4       	brne	.+2      	; 0xc246 <f_lseek+0x1ae>
    c244:	d5 c1       	rjmp	.+938    	; 0xc5f0 <f_lseek+0x558>
    c246:	24 01       	movw	r4, r8
    c248:	35 01       	movw	r6, r10
    c24a:	f1 e0       	ldi	r31, 0x01	; 1
    c24c:	4f 1a       	sub	r4, r31
    c24e:	51 08       	sbc	r5, r1
    c250:	61 08       	sbc	r6, r1
    c252:	71 08       	sbc	r7, r1
    c254:	b3 01       	movw	r22, r6
    c256:	a2 01       	movw	r20, r4
    c258:	c1 01       	movw	r24, r2
    c25a:	0e 94 e1 47 	call	0x8fc2	; 0x8fc2 <clmt_clust>
    c25e:	ab 01       	movw	r20, r22
    c260:	bc 01       	movw	r22, r24
    c262:	f1 01       	movw	r30, r2
    c264:	44 8b       	std	Z+20, r20	; 0x14
    c266:	55 8b       	std	Z+21, r21	; 0x15
    c268:	66 8b       	std	Z+22, r22	; 0x16
    c26a:	77 8b       	std	Z+23, r23	; 0x17
    c26c:	e9 80       	ldd	r14, Y+1	; 0x01
    c26e:	fa 80       	ldd	r15, Y+2	; 0x02
    c270:	c7 01       	movw	r24, r14
    c272:	0e 94 b9 47 	call	0x8f72	; 0x8f72 <clst2sect>
    c276:	61 15       	cp	r22, r1
    c278:	71 05       	cpc	r23, r1
    c27a:	81 05       	cpc	r24, r1
    c27c:	91 05       	cpc	r25, r1
    c27e:	09 f4       	brne	.+2      	; 0xc282 <f_lseek+0x1ea>
    c280:	69 cf       	rjmp	.-302    	; 0xc154 <f_lseek+0xbc>
    c282:	95 01       	movw	r18, r10
    c284:	84 01       	movw	r16, r8
    c286:	11 70       	andi	r17, 0x01	; 1
    c288:	22 27       	eor	r18, r18
    c28a:	33 27       	eor	r19, r19
    c28c:	01 15       	cp	r16, r1
    c28e:	11 05       	cpc	r17, r1
    c290:	21 05       	cpc	r18, r1
    c292:	31 05       	cpc	r19, r1
    c294:	09 f4       	brne	.+2      	; 0xc298 <f_lseek+0x200>
    c296:	ac c1       	rjmp	.+856    	; 0xc5f0 <f_lseek+0x558>
    c298:	f7 01       	movw	r30, r14
    c29a:	81 84       	ldd	r8, Z+9	; 0x09
    c29c:	92 84       	ldd	r9, Z+10	; 0x0a
    c29e:	f1 e0       	ldi	r31, 0x01	; 1
    c2a0:	8f 1a       	sub	r8, r31
    c2a2:	91 08       	sbc	r9, r1
    c2a4:	a1 2c       	mov	r10, r1
    c2a6:	b1 2c       	mov	r11, r1
    c2a8:	49 e0       	ldi	r20, 0x09	; 9
    c2aa:	76 94       	lsr	r7
    c2ac:	67 94       	ror	r6
    c2ae:	57 94       	ror	r5
    c2b0:	47 94       	ror	r4
    c2b2:	4a 95       	dec	r20
    c2b4:	d1 f7       	brne	.-12     	; 0xc2aa <f_lseek+0x212>
    c2b6:	48 20       	and	r4, r8
    c2b8:	59 20       	and	r5, r9
    c2ba:	6a 20       	and	r6, r10
    c2bc:	7b 20       	and	r7, r11
    c2be:	53 01       	movw	r10, r6
    c2c0:	42 01       	movw	r8, r4
    c2c2:	86 0e       	add	r8, r22
    c2c4:	97 1e       	adc	r9, r23
    c2c6:	a8 1e       	adc	r10, r24
    c2c8:	b9 1e       	adc	r11, r25
    c2ca:	f1 01       	movw	r30, r2
    c2cc:	20 8d       	ldd	r18, Z+24	; 0x18
    c2ce:	31 8d       	ldd	r19, Z+25	; 0x19
    c2d0:	42 8d       	ldd	r20, Z+26	; 0x1a
    c2d2:	53 8d       	ldd	r21, Z+27	; 0x1b
    c2d4:	82 16       	cp	r8, r18
    c2d6:	93 06       	cpc	r9, r19
    c2d8:	a4 06       	cpc	r10, r20
    c2da:	b5 06       	cpc	r11, r21
    c2dc:	09 f4       	brne	.+2      	; 0xc2e0 <f_lseek+0x248>
    c2de:	88 c1       	rjmp	.+784    	; 0xc5f0 <f_lseek+0x558>
    c2e0:	86 85       	ldd	r24, Z+14	; 0x0e
    c2e2:	b1 01       	movw	r22, r2
    c2e4:	6c 5d       	subi	r22, 0xDC	; 220
    c2e6:	7f 4f       	sbci	r23, 0xFF	; 255
    c2e8:	6b 01       	movw	r12, r22
    c2ea:	87 ff       	sbrs	r24, 7
    c2ec:	0d c0       	rjmp	.+26     	; 0xc308 <f_lseek+0x270>
    c2ee:	01 e0       	ldi	r16, 0x01	; 1
    c2f0:	10 e0       	ldi	r17, 0x00	; 0
    c2f2:	f7 01       	movw	r30, r14
    c2f4:	81 81       	ldd	r24, Z+1	; 0x01
    c2f6:	0e 94 8a 69 	call	0xd314	; 0xd314 <disk_write>
    c2fa:	89 2b       	or	r24, r25
    c2fc:	09 f0       	breq	.+2      	; 0xc300 <f_lseek+0x268>
    c2fe:	32 cf       	rjmp	.-412    	; 0xc164 <f_lseek+0xcc>
    c300:	f1 01       	movw	r30, r2
    c302:	86 85       	ldd	r24, Z+14	; 0x0e
    c304:	8f 77       	andi	r24, 0x7F	; 127
    c306:	86 87       	std	Z+14, r24	; 0x0e
    c308:	e9 81       	ldd	r30, Y+1	; 0x01
    c30a:	fa 81       	ldd	r31, Y+2	; 0x02
    c30c:	01 e0       	ldi	r16, 0x01	; 1
    c30e:	10 e0       	ldi	r17, 0x00	; 0
    c310:	a5 01       	movw	r20, r10
    c312:	94 01       	movw	r18, r8
    c314:	b6 01       	movw	r22, r12
    c316:	81 81       	ldd	r24, Z+1	; 0x01
    c318:	ed d7       	rcall	.+4058   	; 0xd2f4 <disk_read>
    c31a:	89 2b       	or	r24, r25
    c31c:	09 f0       	breq	.+2      	; 0xc320 <f_lseek+0x288>
    c31e:	22 cf       	rjmp	.-444    	; 0xc164 <f_lseek+0xcc>
    c320:	f1 01       	movw	r30, r2
    c322:	80 8e       	std	Z+24, r8	; 0x18
    c324:	91 8e       	std	Z+25, r9	; 0x19
    c326:	a2 8e       	std	Z+26, r10	; 0x1a
    c328:	b3 8e       	std	Z+27, r11	; 0x1b
    c32a:	62 c1       	rjmp	.+708    	; 0xc5f0 <f_lseek+0x558>
    c32c:	f1 01       	movw	r30, r2
    c32e:	82 85       	ldd	r24, Z+10	; 0x0a
    c330:	93 85       	ldd	r25, Z+11	; 0x0b
    c332:	a4 85       	ldd	r26, Z+12	; 0x0c
    c334:	b5 85       	ldd	r27, Z+13	; 0x0d
    c336:	8c 15       	cp	r24, r12
    c338:	9d 05       	cpc	r25, r13
    c33a:	ae 05       	cpc	r26, r14
    c33c:	bf 05       	cpc	r27, r15
    c33e:	28 f4       	brcc	.+10     	; 0xc34a <f_lseek+0x2b2>
    c340:	26 85       	ldd	r18, Z+14	; 0x0e
    c342:	21 fd       	sbrc	r18, 1
    c344:	02 c0       	rjmp	.+4      	; 0xc34a <f_lseek+0x2b2>
    c346:	6c 01       	movw	r12, r24
    c348:	7d 01       	movw	r14, r26
    c34a:	f1 01       	movw	r30, r2
    c34c:	40 88       	ldd	r4, Z+16	; 0x10
    c34e:	51 88       	ldd	r5, Z+17	; 0x11
    c350:	62 88       	ldd	r6, Z+18	; 0x12
    c352:	73 88       	ldd	r7, Z+19	; 0x13
    c354:	10 8a       	std	Z+16, r1	; 0x10
    c356:	11 8a       	std	Z+17, r1	; 0x11
    c358:	12 8a       	std	Z+18, r1	; 0x12
    c35a:	13 8a       	std	Z+19, r1	; 0x13
    c35c:	c1 14       	cp	r12, r1
    c35e:	d1 04       	cpc	r13, r1
    c360:	e1 04       	cpc	r14, r1
    c362:	f1 04       	cpc	r15, r1
    c364:	09 f4       	brne	.+2      	; 0xc368 <f_lseek+0x2d0>
    c366:	48 c1       	rjmp	.+656    	; 0xc5f8 <f_lseek+0x560>
    c368:	e9 81       	ldd	r30, Y+1	; 0x01
    c36a:	fa 81       	ldd	r31, Y+2	; 0x02
    c36c:	81 84       	ldd	r8, Z+9	; 0x09
    c36e:	92 84       	ldd	r9, Z+10	; 0x0a
    c370:	a1 2c       	mov	r10, r1
    c372:	b1 2c       	mov	r11, r1
    c374:	39 e0       	ldi	r19, 0x09	; 9
    c376:	88 0c       	add	r8, r8
    c378:	99 1c       	adc	r9, r9
    c37a:	aa 1c       	adc	r10, r10
    c37c:	bb 1c       	adc	r11, r11
    c37e:	3a 95       	dec	r19
    c380:	d1 f7       	brne	.-12     	; 0xc376 <f_lseek+0x2de>
    c382:	41 14       	cp	r4, r1
    c384:	51 04       	cpc	r5, r1
    c386:	61 04       	cpc	r6, r1
    c388:	71 04       	cpc	r7, r1
    c38a:	d9 f1       	breq	.+118    	; 0xc402 <f_lseek+0x36a>
    c38c:	f1 e0       	ldi	r31, 0x01	; 1
    c38e:	4f 1a       	sub	r4, r31
    c390:	51 08       	sbc	r5, r1
    c392:	61 08       	sbc	r6, r1
    c394:	71 08       	sbc	r7, r1
    c396:	c7 01       	movw	r24, r14
    c398:	b6 01       	movw	r22, r12
    c39a:	61 50       	subi	r22, 0x01	; 1
    c39c:	71 09       	sbc	r23, r1
    c39e:	81 09       	sbc	r24, r1
    c3a0:	91 09       	sbc	r25, r1
    c3a2:	a5 01       	movw	r20, r10
    c3a4:	94 01       	movw	r18, r8
    c3a6:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__udivmodsi4>
    c3aa:	2b 83       	std	Y+3, r18	; 0x03
    c3ac:	3c 83       	std	Y+4, r19	; 0x04
    c3ae:	4d 83       	std	Y+5, r20	; 0x05
    c3b0:	5e 83       	std	Y+6, r21	; 0x06
    c3b2:	c3 01       	movw	r24, r6
    c3b4:	b2 01       	movw	r22, r4
    c3b6:	a5 01       	movw	r20, r10
    c3b8:	94 01       	movw	r18, r8
    c3ba:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__udivmodsi4>
    c3be:	6b 81       	ldd	r22, Y+3	; 0x03
    c3c0:	7c 81       	ldd	r23, Y+4	; 0x04
    c3c2:	8d 81       	ldd	r24, Y+5	; 0x05
    c3c4:	9e 81       	ldd	r25, Y+6	; 0x06
    c3c6:	62 17       	cp	r22, r18
    c3c8:	73 07       	cpc	r23, r19
    c3ca:	84 07       	cpc	r24, r20
    c3cc:	95 07       	cpc	r25, r21
    c3ce:	c8 f0       	brcs	.+50     	; 0xc402 <f_lseek+0x36a>
    c3d0:	88 27       	eor	r24, r24
    c3d2:	99 27       	eor	r25, r25
    c3d4:	dc 01       	movw	r26, r24
    c3d6:	88 19       	sub	r24, r8
    c3d8:	99 09       	sbc	r25, r9
    c3da:	aa 09       	sbc	r26, r10
    c3dc:	bb 09       	sbc	r27, r11
    c3de:	48 22       	and	r4, r24
    c3e0:	59 22       	and	r5, r25
    c3e2:	6a 22       	and	r6, r26
    c3e4:	7b 22       	and	r7, r27
    c3e6:	f1 01       	movw	r30, r2
    c3e8:	40 8a       	std	Z+16, r4	; 0x10
    c3ea:	51 8a       	std	Z+17, r5	; 0x11
    c3ec:	62 8a       	std	Z+18, r6	; 0x12
    c3ee:	73 8a       	std	Z+19, r7	; 0x13
    c3f0:	c4 18       	sub	r12, r4
    c3f2:	d5 08       	sbc	r13, r5
    c3f4:	e6 08       	sbc	r14, r6
    c3f6:	f7 08       	sbc	r15, r7
    c3f8:	44 89       	ldd	r20, Z+20	; 0x14
    c3fa:	55 89       	ldd	r21, Z+21	; 0x15
    c3fc:	66 89       	ldd	r22, Z+22	; 0x16
    c3fe:	77 89       	ldd	r23, Z+23	; 0x17
    c400:	29 c0       	rjmp	.+82     	; 0xc454 <f_lseek+0x3bc>
    c402:	f1 01       	movw	r30, r2
    c404:	46 81       	ldd	r20, Z+6	; 0x06
    c406:	57 81       	ldd	r21, Z+7	; 0x07
    c408:	60 85       	ldd	r22, Z+8	; 0x08
    c40a:	71 85       	ldd	r23, Z+9	; 0x09
    c40c:	41 15       	cp	r20, r1
    c40e:	51 05       	cpc	r21, r1
    c410:	61 05       	cpc	r22, r1
    c412:	71 05       	cpc	r23, r1
    c414:	d1 f4       	brne	.+52     	; 0xc44a <f_lseek+0x3b2>
    c416:	40 e0       	ldi	r20, 0x00	; 0
    c418:	50 e0       	ldi	r21, 0x00	; 0
    c41a:	ba 01       	movw	r22, r20
    c41c:	c1 01       	movw	r24, r2
    c41e:	0e 94 8b 50 	call	0xa116	; 0xa116 <create_chain>
    c422:	ab 01       	movw	r20, r22
    c424:	bc 01       	movw	r22, r24
    c426:	41 30       	cpi	r20, 0x01	; 1
    c428:	51 05       	cpc	r21, r1
    c42a:	61 05       	cpc	r22, r1
    c42c:	71 05       	cpc	r23, r1
    c42e:	09 f4       	brne	.+2      	; 0xc432 <f_lseek+0x39a>
    c430:	91 ce       	rjmp	.-734    	; 0xc154 <f_lseek+0xbc>
    c432:	4f 3f       	cpi	r20, 0xFF	; 255
    c434:	ff ef       	ldi	r31, 0xFF	; 255
    c436:	5f 07       	cpc	r21, r31
    c438:	6f 07       	cpc	r22, r31
    c43a:	7f 07       	cpc	r23, r31
    c43c:	09 f4       	brne	.+2      	; 0xc440 <f_lseek+0x3a8>
    c43e:	92 ce       	rjmp	.-732    	; 0xc164 <f_lseek+0xcc>
    c440:	f1 01       	movw	r30, r2
    c442:	46 83       	std	Z+6, r20	; 0x06
    c444:	57 83       	std	Z+7, r21	; 0x07
    c446:	60 87       	std	Z+8, r22	; 0x08
    c448:	71 87       	std	Z+9, r23	; 0x09
    c44a:	f1 01       	movw	r30, r2
    c44c:	44 8b       	std	Z+20, r20	; 0x14
    c44e:	55 8b       	std	Z+21, r21	; 0x15
    c450:	66 8b       	std	Z+22, r22	; 0x16
    c452:	77 8b       	std	Z+23, r23	; 0x17
    c454:	41 15       	cp	r20, r1
    c456:	51 05       	cpc	r21, r1
    c458:	61 05       	cpc	r22, r1
    c45a:	71 05       	cpc	r23, r1
    c45c:	09 f0       	breq	.+2      	; 0xc460 <f_lseek+0x3c8>
    c45e:	40 c0       	rjmp	.+128    	; 0xc4e0 <f_lseek+0x448>
    c460:	c1 2c       	mov	r12, r1
    c462:	d1 2c       	mov	r13, r1
    c464:	76 01       	movw	r14, r12
    c466:	79 c0       	rjmp	.+242    	; 0xc55a <f_lseek+0x4c2>
    c468:	c8 18       	sub	r12, r8
    c46a:	d9 08       	sbc	r13, r9
    c46c:	ea 08       	sbc	r14, r10
    c46e:	fb 08       	sbc	r15, r11
    c470:	f1 01       	movw	r30, r2
    c472:	80 89       	ldd	r24, Z+16	; 0x10
    c474:	91 89       	ldd	r25, Z+17	; 0x11
    c476:	a2 89       	ldd	r26, Z+18	; 0x12
    c478:	b3 89       	ldd	r27, Z+19	; 0x13
    c47a:	88 0d       	add	r24, r8
    c47c:	99 1d       	adc	r25, r9
    c47e:	aa 1d       	adc	r26, r10
    c480:	bb 1d       	adc	r27, r11
    c482:	80 8b       	std	Z+16, r24	; 0x10
    c484:	91 8b       	std	Z+17, r25	; 0x11
    c486:	a2 8b       	std	Z+18, r26	; 0x12
    c488:	b3 8b       	std	Z+19, r27	; 0x13
    c48a:	86 85       	ldd	r24, Z+14	; 0x0e
    c48c:	81 ff       	sbrs	r24, 1
    c48e:	2f c0       	rjmp	.+94     	; 0xc4ee <f_lseek+0x456>
    c490:	c1 01       	movw	r24, r2
    c492:	0e 94 8b 50 	call	0xa116	; 0xa116 <create_chain>
    c496:	ab 01       	movw	r20, r22
    c498:	bc 01       	movw	r22, r24
    c49a:	41 15       	cp	r20, r1
    c49c:	51 05       	cpc	r21, r1
    c49e:	61 05       	cpc	r22, r1
    c4a0:	71 05       	cpc	r23, r1
    c4a2:	61 f1       	breq	.+88     	; 0xc4fc <f_lseek+0x464>
    c4a4:	4f 3f       	cpi	r20, 0xFF	; 255
    c4a6:	bf ef       	ldi	r27, 0xFF	; 255
    c4a8:	5b 07       	cpc	r21, r27
    c4aa:	6b 07       	cpc	r22, r27
    c4ac:	7b 07       	cpc	r23, r27
    c4ae:	09 f4       	brne	.+2      	; 0xc4b2 <f_lseek+0x41a>
    c4b0:	59 ce       	rjmp	.-846    	; 0xc164 <f_lseek+0xcc>
    c4b2:	42 30       	cpi	r20, 0x02	; 2
    c4b4:	51 05       	cpc	r21, r1
    c4b6:	61 05       	cpc	r22, r1
    c4b8:	71 05       	cpc	r23, r1
    c4ba:	08 f4       	brcc	.+2      	; 0xc4be <f_lseek+0x426>
    c4bc:	4b ce       	rjmp	.-874    	; 0xc154 <f_lseek+0xbc>
    c4be:	e9 81       	ldd	r30, Y+1	; 0x01
    c4c0:	fa 81       	ldd	r31, Y+2	; 0x02
    c4c2:	81 8d       	ldd	r24, Z+25	; 0x19
    c4c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    c4c6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c4c8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c4ca:	48 17       	cp	r20, r24
    c4cc:	59 07       	cpc	r21, r25
    c4ce:	6a 07       	cpc	r22, r26
    c4d0:	7b 07       	cpc	r23, r27
    c4d2:	08 f0       	brcs	.+2      	; 0xc4d6 <f_lseek+0x43e>
    c4d4:	3f ce       	rjmp	.-898    	; 0xc154 <f_lseek+0xbc>
    c4d6:	f1 01       	movw	r30, r2
    c4d8:	44 8b       	std	Z+20, r20	; 0x14
    c4da:	55 8b       	std	Z+21, r21	; 0x15
    c4dc:	66 8b       	std	Z+22, r22	; 0x16
    c4de:	77 8b       	std	Z+23, r23	; 0x17
    c4e0:	8c 14       	cp	r8, r12
    c4e2:	9d 04       	cpc	r9, r13
    c4e4:	ae 04       	cpc	r10, r14
    c4e6:	bf 04       	cpc	r11, r15
    c4e8:	08 f4       	brcc	.+2      	; 0xc4ec <f_lseek+0x454>
    c4ea:	be cf       	rjmp	.-132    	; 0xc468 <f_lseek+0x3d0>
    c4ec:	0a c0       	rjmp	.+20     	; 0xc502 <f_lseek+0x46a>
    c4ee:	80 81       	ld	r24, Z
    c4f0:	91 81       	ldd	r25, Z+1	; 0x01
    c4f2:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <get_fat.isra.9>
    c4f6:	ab 01       	movw	r20, r22
    c4f8:	bc 01       	movw	r22, r24
    c4fa:	d4 cf       	rjmp	.-88     	; 0xc4a4 <f_lseek+0x40c>
    c4fc:	c1 2c       	mov	r12, r1
    c4fe:	d1 2c       	mov	r13, r1
    c500:	76 01       	movw	r14, r12
    c502:	f1 01       	movw	r30, r2
    c504:	80 89       	ldd	r24, Z+16	; 0x10
    c506:	91 89       	ldd	r25, Z+17	; 0x11
    c508:	a2 89       	ldd	r26, Z+18	; 0x12
    c50a:	b3 89       	ldd	r27, Z+19	; 0x13
    c50c:	8c 0d       	add	r24, r12
    c50e:	9d 1d       	adc	r25, r13
    c510:	ae 1d       	adc	r26, r14
    c512:	bf 1d       	adc	r27, r15
    c514:	80 8b       	std	Z+16, r24	; 0x10
    c516:	91 8b       	std	Z+17, r25	; 0x11
    c518:	a2 8b       	std	Z+18, r26	; 0x12
    c51a:	b3 8b       	std	Z+19, r27	; 0x13
    c51c:	d7 01       	movw	r26, r14
    c51e:	c6 01       	movw	r24, r12
    c520:	91 70       	andi	r25, 0x01	; 1
    c522:	aa 27       	eor	r26, r26
    c524:	bb 27       	eor	r27, r27
    c526:	89 2b       	or	r24, r25
    c528:	8a 2b       	or	r24, r26
    c52a:	8b 2b       	or	r24, r27
    c52c:	09 f4       	brne	.+2      	; 0xc530 <f_lseek+0x498>
    c52e:	98 cf       	rjmp	.-208    	; 0xc460 <f_lseek+0x3c8>
    c530:	89 81       	ldd	r24, Y+1	; 0x01
    c532:	9a 81       	ldd	r25, Y+2	; 0x02
    c534:	0e 94 b9 47 	call	0x8f72	; 0x8f72 <clst2sect>
    c538:	61 15       	cp	r22, r1
    c53a:	71 05       	cpc	r23, r1
    c53c:	81 05       	cpc	r24, r1
    c53e:	91 05       	cpc	r25, r1
    c540:	09 f4       	brne	.+2      	; 0xc544 <f_lseek+0x4ac>
    c542:	08 ce       	rjmp	.-1008   	; 0xc154 <f_lseek+0xbc>
    c544:	29 e0       	ldi	r18, 0x09	; 9
    c546:	f6 94       	lsr	r15
    c548:	e7 94       	ror	r14
    c54a:	d7 94       	ror	r13
    c54c:	c7 94       	ror	r12
    c54e:	2a 95       	dec	r18
    c550:	d1 f7       	brne	.-12     	; 0xc546 <f_lseek+0x4ae>
    c552:	c6 0e       	add	r12, r22
    c554:	d7 1e       	adc	r13, r23
    c556:	e8 1e       	adc	r14, r24
    c558:	f9 1e       	adc	r15, r25
    c55a:	f1 01       	movw	r30, r2
    c55c:	80 89       	ldd	r24, Z+16	; 0x10
    c55e:	91 89       	ldd	r25, Z+17	; 0x11
    c560:	a2 89       	ldd	r26, Z+18	; 0x12
    c562:	b3 89       	ldd	r27, Z+19	; 0x13
    c564:	42 85       	ldd	r20, Z+10	; 0x0a
    c566:	53 85       	ldd	r21, Z+11	; 0x0b
    c568:	64 85       	ldd	r22, Z+12	; 0x0c
    c56a:	75 85       	ldd	r23, Z+13	; 0x0d
    c56c:	48 17       	cp	r20, r24
    c56e:	59 07       	cpc	r21, r25
    c570:	6a 07       	cpc	r22, r26
    c572:	7b 07       	cpc	r23, r27
    c574:	38 f4       	brcc	.+14     	; 0xc584 <f_lseek+0x4ec>
    c576:	82 87       	std	Z+10, r24	; 0x0a
    c578:	93 87       	std	Z+11, r25	; 0x0b
    c57a:	a4 87       	std	Z+12, r26	; 0x0c
    c57c:	b5 87       	std	Z+13, r27	; 0x0d
    c57e:	26 85       	ldd	r18, Z+14	; 0x0e
    c580:	20 64       	ori	r18, 0x40	; 64
    c582:	26 87       	std	Z+14, r18	; 0x0e
    c584:	91 70       	andi	r25, 0x01	; 1
    c586:	aa 27       	eor	r26, r26
    c588:	bb 27       	eor	r27, r27
    c58a:	89 2b       	or	r24, r25
    c58c:	8a 2b       	or	r24, r26
    c58e:	8b 2b       	or	r24, r27
    c590:	79 f1       	breq	.+94     	; 0xc5f0 <f_lseek+0x558>
    c592:	f1 01       	movw	r30, r2
    c594:	20 8d       	ldd	r18, Z+24	; 0x18
    c596:	31 8d       	ldd	r19, Z+25	; 0x19
    c598:	42 8d       	ldd	r20, Z+26	; 0x1a
    c59a:	53 8d       	ldd	r21, Z+27	; 0x1b
    c59c:	2c 15       	cp	r18, r12
    c59e:	3d 05       	cpc	r19, r13
    c5a0:	4e 05       	cpc	r20, r14
    c5a2:	5f 05       	cpc	r21, r15
    c5a4:	29 f1       	breq	.+74     	; 0xc5f0 <f_lseek+0x558>
    c5a6:	86 85       	ldd	r24, Z+14	; 0x0e
    c5a8:	b1 01       	movw	r22, r2
    c5aa:	6c 5d       	subi	r22, 0xDC	; 220
    c5ac:	7f 4f       	sbci	r23, 0xFF	; 255
    c5ae:	5b 01       	movw	r10, r22
    c5b0:	87 ff       	sbrs	r24, 7
    c5b2:	0d c0       	rjmp	.+26     	; 0xc5ce <f_lseek+0x536>
    c5b4:	e9 81       	ldd	r30, Y+1	; 0x01
    c5b6:	fa 81       	ldd	r31, Y+2	; 0x02
    c5b8:	01 e0       	ldi	r16, 0x01	; 1
    c5ba:	10 e0       	ldi	r17, 0x00	; 0
    c5bc:	81 81       	ldd	r24, Z+1	; 0x01
    c5be:	aa d6       	rcall	.+3412   	; 0xd314 <disk_write>
    c5c0:	89 2b       	or	r24, r25
    c5c2:	09 f0       	breq	.+2      	; 0xc5c6 <f_lseek+0x52e>
    c5c4:	cf cd       	rjmp	.-1122   	; 0xc164 <f_lseek+0xcc>
    c5c6:	f1 01       	movw	r30, r2
    c5c8:	86 85       	ldd	r24, Z+14	; 0x0e
    c5ca:	8f 77       	andi	r24, 0x7F	; 127
    c5cc:	86 87       	std	Z+14, r24	; 0x0e
    c5ce:	e9 81       	ldd	r30, Y+1	; 0x01
    c5d0:	fa 81       	ldd	r31, Y+2	; 0x02
    c5d2:	01 e0       	ldi	r16, 0x01	; 1
    c5d4:	10 e0       	ldi	r17, 0x00	; 0
    c5d6:	a7 01       	movw	r20, r14
    c5d8:	96 01       	movw	r18, r12
    c5da:	b5 01       	movw	r22, r10
    c5dc:	81 81       	ldd	r24, Z+1	; 0x01
    c5de:	8a d6       	rcall	.+3348   	; 0xd2f4 <disk_read>
    c5e0:	89 2b       	or	r24, r25
    c5e2:	09 f0       	breq	.+2      	; 0xc5e6 <f_lseek+0x54e>
    c5e4:	bf cd       	rjmp	.-1154   	; 0xc164 <f_lseek+0xcc>
    c5e6:	f1 01       	movw	r30, r2
    c5e8:	c0 8e       	std	Z+24, r12	; 0x18
    c5ea:	d1 8e       	std	Z+25, r13	; 0x19
    c5ec:	e2 8e       	std	Z+26, r14	; 0x1a
    c5ee:	f3 8e       	std	Z+27, r15	; 0x1b
    c5f0:	80 e0       	ldi	r24, 0x00	; 0
    c5f2:	bb cd       	rjmp	.-1162   	; 0xc16a <f_lseek+0xd2>
    c5f4:	81 e1       	ldi	r24, 0x11	; 17
    c5f6:	b9 cd       	rjmp	.-1166   	; 0xc16a <f_lseek+0xd2>
    c5f8:	80 e0       	ldi	r24, 0x00	; 0
    c5fa:	90 e0       	ldi	r25, 0x00	; 0
    c5fc:	dc 01       	movw	r26, r24
    c5fe:	c1 2c       	mov	r12, r1
    c600:	d1 2c       	mov	r13, r1
    c602:	76 01       	movw	r14, r12
    c604:	bf cf       	rjmp	.-130    	; 0xc584 <f_lseek+0x4ec>
    c606:	2a 96       	adiw	r28, 0x0a	; 10
    c608:	e2 e1       	ldi	r30, 0x12	; 18
    c60a:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0000c60e <f_opendir>:
    c60e:	a4 e0       	ldi	r26, 0x04	; 4
    c610:	b0 e0       	ldi	r27, 0x00	; 0
    c612:	ed e0       	ldi	r30, 0x0D	; 13
    c614:	f3 e6       	ldi	r31, 0x63	; 99
    c616:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    c61a:	7c 83       	std	Y+4, r23	; 0x04
    c61c:	6b 83       	std	Y+3, r22	; 0x03
    c61e:	00 97       	sbiw	r24, 0x00	; 0
    c620:	09 f4       	brne	.+2      	; 0xc624 <f_opendir+0x16>
    c622:	48 c0       	rjmp	.+144    	; 0xc6b4 <f_opendir+0xa6>
    c624:	8c 01       	movw	r16, r24
    c626:	40 e0       	ldi	r20, 0x00	; 0
    c628:	be 01       	movw	r22, r28
    c62a:	6f 5f       	subi	r22, 0xFF	; 255
    c62c:	7f 4f       	sbci	r23, 0xFF	; 255
    c62e:	ce 01       	movw	r24, r28
    c630:	03 96       	adiw	r24, 0x03	; 3
    c632:	0e 94 c3 4b 	call	0x9786	; 0x9786 <mount_volume>
    c636:	7c 01       	movw	r14, r24
    c638:	89 2b       	or	r24, r25
    c63a:	b9 f5       	brne	.+110    	; 0xc6aa <f_opendir+0x9c>
    c63c:	89 81       	ldd	r24, Y+1	; 0x01
    c63e:	9a 81       	ldd	r25, Y+2	; 0x02
    c640:	f8 01       	movw	r30, r16
    c642:	91 83       	std	Z+1, r25	; 0x01
    c644:	80 83       	st	Z, r24
    c646:	80 e0       	ldi	r24, 0x00	; 0
    c648:	92 e0       	ldi	r25, 0x02	; 2
    c64a:	98 d5       	rcall	.+2864   	; 0xd17c <ff_memalloc>
    c64c:	6c 01       	movw	r12, r24
    c64e:	00 97       	sbiw	r24, 0x00	; 0
    c650:	99 f1       	breq	.+102    	; 0xc6b8 <f_opendir+0xaa>
    c652:	e9 81       	ldd	r30, Y+1	; 0x01
    c654:	fa 81       	ldd	r31, Y+2	; 0x02
    c656:	94 87       	std	Z+12, r25	; 0x0c
    c658:	83 87       	std	Z+11, r24	; 0x0b
    c65a:	6b 81       	ldd	r22, Y+3	; 0x03
    c65c:	7c 81       	ldd	r23, Y+4	; 0x04
    c65e:	c8 01       	movw	r24, r16
    c660:	0e 94 10 57 	call	0xae20	; 0xae20 <follow_path>
    c664:	7c 01       	movw	r14, r24
    c666:	89 2b       	or	r24, r25
    c668:	b9 f4       	brne	.+46     	; 0xc698 <f_opendir+0x8a>
    c66a:	f8 01       	movw	r30, r16
    c66c:	87 a1       	ldd	r24, Z+39	; 0x27
    c66e:	87 fd       	sbrc	r24, 7
    c670:	28 c0       	rjmp	.+80     	; 0xc6c2 <f_opendir+0xb4>
    c672:	84 81       	ldd	r24, Z+4	; 0x04
    c674:	84 ff       	sbrs	r24, 4
    c676:	0d c0       	rjmp	.+26     	; 0xc692 <f_opendir+0x84>
    c678:	62 8d       	ldd	r22, Z+26	; 0x1a
    c67a:	73 8d       	ldd	r23, Z+27	; 0x1b
    c67c:	e9 81       	ldd	r30, Y+1	; 0x01
    c67e:	fa 81       	ldd	r31, Y+2	; 0x02
    c680:	80 81       	ld	r24, Z
    c682:	0e 94 b9 49 	call	0x9372	; 0x9372 <ld_clust.isra.3>
    c686:	f8 01       	movw	r30, r16
    c688:	66 83       	std	Z+6, r22	; 0x06
    c68a:	77 83       	std	Z+7, r23	; 0x07
    c68c:	80 87       	std	Z+8, r24	; 0x08
    c68e:	91 87       	std	Z+9, r25	; 0x09
    c690:	18 c0       	rjmp	.+48     	; 0xc6c2 <f_opendir+0xb4>
    c692:	95 e0       	ldi	r25, 0x05	; 5
    c694:	e9 2e       	mov	r14, r25
    c696:	f1 2c       	mov	r15, r1
    c698:	c6 01       	movw	r24, r12
    c69a:	73 d5       	rcall	.+2790   	; 0xd182 <ff_memfree>
    c69c:	f4 e0       	ldi	r31, 0x04	; 4
    c69e:	ef 16       	cp	r14, r31
    c6a0:	f1 04       	cpc	r15, r1
    c6a2:	f1 f0       	breq	.+60     	; 0xc6e0 <f_opendir+0xd2>
    c6a4:	e1 14       	cp	r14, r1
    c6a6:	f1 04       	cpc	r15, r1
    c6a8:	49 f0       	breq	.+18     	; 0xc6bc <f_opendir+0xae>
    c6aa:	f8 01       	movw	r30, r16
    c6ac:	11 82       	std	Z+1, r1	; 0x01
    c6ae:	10 82       	st	Z, r1
    c6b0:	c7 01       	movw	r24, r14
    c6b2:	1a c0       	rjmp	.+52     	; 0xc6e8 <f_opendir+0xda>
    c6b4:	89 e0       	ldi	r24, 0x09	; 9
    c6b6:	03 c0       	rjmp	.+6      	; 0xc6be <f_opendir+0xb0>
    c6b8:	81 e1       	ldi	r24, 0x11	; 17
    c6ba:	01 c0       	rjmp	.+2      	; 0xc6be <f_opendir+0xb0>
    c6bc:	80 e0       	ldi	r24, 0x00	; 0
    c6be:	90 e0       	ldi	r25, 0x00	; 0
    c6c0:	13 c0       	rjmp	.+38     	; 0xc6e8 <f_opendir+0xda>
    c6c2:	e9 81       	ldd	r30, Y+1	; 0x01
    c6c4:	fa 81       	ldd	r31, Y+2	; 0x02
    c6c6:	85 81       	ldd	r24, Z+5	; 0x05
    c6c8:	96 81       	ldd	r25, Z+6	; 0x06
    c6ca:	f8 01       	movw	r30, r16
    c6cc:	93 83       	std	Z+3, r25	; 0x03
    c6ce:	82 83       	std	Z+2, r24	; 0x02
    c6d0:	40 e0       	ldi	r20, 0x00	; 0
    c6d2:	50 e0       	ldi	r21, 0x00	; 0
    c6d4:	ba 01       	movw	r22, r20
    c6d6:	c8 01       	movw	r24, r16
    c6d8:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <dir_sdi>
    c6dc:	7c 01       	movw	r14, r24
    c6de:	dc cf       	rjmp	.-72     	; 0xc698 <f_opendir+0x8a>
    c6e0:	85 e0       	ldi	r24, 0x05	; 5
    c6e2:	e8 2e       	mov	r14, r24
    c6e4:	f1 2c       	mov	r15, r1
    c6e6:	e1 cf       	rjmp	.-62     	; 0xc6aa <f_opendir+0x9c>
    c6e8:	24 96       	adiw	r28, 0x04	; 4
    c6ea:	e8 e0       	ldi	r30, 0x08	; 8
    c6ec:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0000c6f0 <f_closedir>:
    c6f0:	a2 e0       	ldi	r26, 0x02	; 2
    c6f2:	b0 e0       	ldi	r27, 0x00	; 0
    c6f4:	ee e7       	ldi	r30, 0x7E	; 126
    c6f6:	f3 e6       	ldi	r31, 0x63	; 99
    c6f8:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
    c6fc:	8c 01       	movw	r16, r24
    c6fe:	be 01       	movw	r22, r28
    c700:	6f 5f       	subi	r22, 0xFF	; 255
    c702:	7f 4f       	sbci	r23, 0xFF	; 255
    c704:	0e 94 58 48 	call	0x90b0	; 0x90b0 <validate>
    c708:	00 97       	sbiw	r24, 0x00	; 0
    c70a:	19 f4       	brne	.+6      	; 0xc712 <f_closedir+0x22>
    c70c:	f8 01       	movw	r30, r16
    c70e:	11 82       	std	Z+1, r1	; 0x01
    c710:	10 82       	st	Z, r1
    c712:	22 96       	adiw	r28, 0x02	; 2
    c714:	e4 e0       	ldi	r30, 0x04	; 4
    c716:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

0000c71a <f_readdir>:
    c71a:	a2 e0       	ldi	r26, 0x02	; 2
    c71c:	b0 e0       	ldi	r27, 0x00	; 0
    c71e:	e3 e9       	ldi	r30, 0x93	; 147
    c720:	f3 e6       	ldi	r31, 0x63	; 99
    c722:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__+0x10>
    c726:	7c 01       	movw	r14, r24
    c728:	5b 01       	movw	r10, r22
    c72a:	be 01       	movw	r22, r28
    c72c:	6f 5f       	subi	r22, 0xFF	; 255
    c72e:	7f 4f       	sbci	r23, 0xFF	; 255
    c730:	0e 94 58 48 	call	0x90b0	; 0x90b0 <validate>
    c734:	00 97       	sbiw	r24, 0x00	; 0
    c736:	89 f5       	brne	.+98     	; 0xc79a <f_readdir+0x80>
    c738:	a1 14       	cp	r10, r1
    c73a:	b1 04       	cpc	r11, r1
    c73c:	39 f4       	brne	.+14     	; 0xc74c <f_readdir+0x32>
    c73e:	40 e0       	ldi	r20, 0x00	; 0
    c740:	50 e0       	ldi	r21, 0x00	; 0
    c742:	ba 01       	movw	r22, r20
    c744:	c7 01       	movw	r24, r14
    c746:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <dir_sdi>
    c74a:	27 c0       	rjmp	.+78     	; 0xc79a <f_readdir+0x80>
    c74c:	80 e0       	ldi	r24, 0x00	; 0
    c74e:	92 e0       	ldi	r25, 0x02	; 2
    c750:	15 d5       	rcall	.+2602   	; 0xd17c <ff_memalloc>
    c752:	6c 01       	movw	r12, r24
    c754:	00 97       	sbiw	r24, 0x00	; 0
    c756:	f9 f0       	breq	.+62     	; 0xc796 <f_readdir+0x7c>
    c758:	e9 81       	ldd	r30, Y+1	; 0x01
    c75a:	fa 81       	ldd	r31, Y+2	; 0x02
    c75c:	94 87       	std	Z+12, r25	; 0x0c
    c75e:	83 87       	std	Z+11, r24	; 0x0b
    c760:	60 e0       	ldi	r22, 0x00	; 0
    c762:	70 e0       	ldi	r23, 0x00	; 0
    c764:	c7 01       	movw	r24, r14
    c766:	0e 94 63 53 	call	0xa6c6	; 0xa6c6 <dir_read>
    c76a:	8c 01       	movw	r16, r24
    c76c:	8b 7f       	andi	r24, 0xFB	; 251
    c76e:	89 2b       	or	r24, r25
    c770:	71 f4       	brne	.+28     	; 0xc78e <f_readdir+0x74>
    c772:	b5 01       	movw	r22, r10
    c774:	c7 01       	movw	r24, r14
    c776:	0e 94 84 48 	call	0x9108	; 0x9108 <get_fileinfo>
    c77a:	60 e0       	ldi	r22, 0x00	; 0
    c77c:	70 e0       	ldi	r23, 0x00	; 0
    c77e:	c7 01       	movw	r24, r14
    c780:	0e 94 42 52 	call	0xa484	; 0xa484 <dir_next>
    c784:	8c 01       	movw	r16, r24
    c786:	04 97       	sbiw	r24, 0x04	; 4
    c788:	11 f4       	brne	.+4      	; 0xc78e <f_readdir+0x74>
    c78a:	00 e0       	ldi	r16, 0x00	; 0
    c78c:	10 e0       	ldi	r17, 0x00	; 0
    c78e:	c6 01       	movw	r24, r12
    c790:	f8 d4       	rcall	.+2544   	; 0xd182 <ff_memfree>
    c792:	c8 01       	movw	r24, r16
    c794:	02 c0       	rjmp	.+4      	; 0xc79a <f_readdir+0x80>
    c796:	81 e1       	ldi	r24, 0x11	; 17
    c798:	90 e0       	ldi	r25, 0x00	; 0
    c79a:	22 96       	adiw	r28, 0x02	; 2
    c79c:	ea e0       	ldi	r30, 0x0A	; 10
    c79e:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__+0x10>

0000c7a2 <f_stat>:
    c7a2:	a0 e3       	ldi	r26, 0x30	; 48
    c7a4:	b0 e0       	ldi	r27, 0x00	; 0
    c7a6:	e7 ed       	ldi	r30, 0xD7	; 215
    c7a8:	f3 e6       	ldi	r31, 0x63	; 99
    c7aa:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    c7ae:	98 ab       	std	Y+48, r25	; 0x30
    c7b0:	8f a7       	std	Y+47, r24	; 0x2f
    c7b2:	6b 01       	movw	r12, r22
    c7b4:	40 e0       	ldi	r20, 0x00	; 0
    c7b6:	be 01       	movw	r22, r28
    c7b8:	6f 5f       	subi	r22, 0xFF	; 255
    c7ba:	7f 4f       	sbci	r23, 0xFF	; 255
    c7bc:	ce 01       	movw	r24, r28
    c7be:	8f 96       	adiw	r24, 0x2f	; 47
    c7c0:	0e 94 c3 4b 	call	0x9786	; 0x9786 <mount_volume>
    c7c4:	00 97       	sbiw	r24, 0x00	; 0
    c7c6:	39 f5       	brne	.+78     	; 0xc816 <f_stat+0x74>
    c7c8:	80 e0       	ldi	r24, 0x00	; 0
    c7ca:	92 e0       	ldi	r25, 0x02	; 2
    c7cc:	d7 d4       	rcall	.+2478   	; 0xd17c <ff_memalloc>
    c7ce:	7c 01       	movw	r14, r24
    c7d0:	00 97       	sbiw	r24, 0x00	; 0
    c7d2:	f9 f0       	breq	.+62     	; 0xc812 <f_stat+0x70>
    c7d4:	e9 81       	ldd	r30, Y+1	; 0x01
    c7d6:	fa 81       	ldd	r31, Y+2	; 0x02
    c7d8:	94 87       	std	Z+12, r25	; 0x0c
    c7da:	83 87       	std	Z+11, r24	; 0x0b
    c7dc:	6f a5       	ldd	r22, Y+47	; 0x2f
    c7de:	78 a9       	ldd	r23, Y+48	; 0x30
    c7e0:	ce 01       	movw	r24, r28
    c7e2:	01 96       	adiw	r24, 0x01	; 1
    c7e4:	0e 94 10 57 	call	0xae20	; 0xae20 <follow_path>
    c7e8:	8c 01       	movw	r16, r24
    c7ea:	89 2b       	or	r24, r25
    c7ec:	71 f4       	brne	.+28     	; 0xc80a <f_stat+0x68>
    c7ee:	88 a5       	ldd	r24, Y+40	; 0x28
    c7f0:	87 fd       	sbrc	r24, 7
    c7f2:	09 c0       	rjmp	.+18     	; 0xc806 <f_stat+0x64>
    c7f4:	c1 14       	cp	r12, r1
    c7f6:	d1 04       	cpc	r13, r1
    c7f8:	41 f0       	breq	.+16     	; 0xc80a <f_stat+0x68>
    c7fa:	b6 01       	movw	r22, r12
    c7fc:	ce 01       	movw	r24, r28
    c7fe:	01 96       	adiw	r24, 0x01	; 1
    c800:	0e 94 84 48 	call	0x9108	; 0x9108 <get_fileinfo>
    c804:	02 c0       	rjmp	.+4      	; 0xc80a <f_stat+0x68>
    c806:	06 e0       	ldi	r16, 0x06	; 6
    c808:	10 e0       	ldi	r17, 0x00	; 0
    c80a:	c7 01       	movw	r24, r14
    c80c:	ba d4       	rcall	.+2420   	; 0xd182 <ff_memfree>
    c80e:	c8 01       	movw	r24, r16
    c810:	02 c0       	rjmp	.+4      	; 0xc816 <f_stat+0x74>
    c812:	81 e1       	ldi	r24, 0x11	; 17
    c814:	90 e0       	ldi	r25, 0x00	; 0
    c816:	e0 96       	adiw	r28, 0x30	; 48
    c818:	e8 e0       	ldi	r30, 0x08	; 8
    c81a:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0000c81e <f_getfree>:
    c81e:	aa e0       	ldi	r26, 0x0A	; 10
    c820:	b0 e0       	ldi	r27, 0x00	; 0
    c822:	e5 e1       	ldi	r30, 0x15	; 21
    c824:	f4 e6       	ldi	r31, 0x64	; 100
    c826:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
    c82a:	9c 83       	std	Y+4, r25	; 0x04
    c82c:	8b 83       	std	Y+3, r24	; 0x03
    c82e:	7e 83       	std	Y+6, r23	; 0x06
    c830:	6d 83       	std	Y+5, r22	; 0x05
    c832:	7a 01       	movw	r14, r20
    c834:	40 e0       	ldi	r20, 0x00	; 0
    c836:	be 01       	movw	r22, r28
    c838:	6f 5f       	subi	r22, 0xFF	; 255
    c83a:	7f 4f       	sbci	r23, 0xFF	; 255
    c83c:	ce 01       	movw	r24, r28
    c83e:	03 96       	adiw	r24, 0x03	; 3
    c840:	0e 94 c3 4b 	call	0x9786	; 0x9786 <mount_volume>
    c844:	8c 01       	movw	r16, r24
    c846:	89 2b       	or	r24, r25
    c848:	09 f0       	breq	.+2      	; 0xc84c <f_getfree+0x2e>
    c84a:	c4 c0       	rjmp	.+392    	; 0xc9d4 <f_getfree+0x1b6>
    c84c:	69 80       	ldd	r6, Y+1	; 0x01
    c84e:	7a 80       	ldd	r7, Y+2	; 0x02
    c850:	d7 01       	movw	r26, r14
    c852:	6d 92       	st	X+, r6
    c854:	7c 92       	st	X, r7
    c856:	f3 01       	movw	r30, r6
    c858:	81 89       	ldd	r24, Z+17	; 0x11
    c85a:	92 89       	ldd	r25, Z+18	; 0x12
    c85c:	a3 89       	ldd	r26, Z+19	; 0x13
    c85e:	b4 89       	ldd	r27, Z+20	; 0x14
    c860:	81 8c       	ldd	r8, Z+25	; 0x19
    c862:	92 8c       	ldd	r9, Z+26	; 0x1a
    c864:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c866:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c868:	b5 01       	movw	r22, r10
    c86a:	a4 01       	movw	r20, r8
    c86c:	42 50       	subi	r20, 0x02	; 2
    c86e:	51 09       	sbc	r21, r1
    c870:	61 09       	sbc	r22, r1
    c872:	71 09       	sbc	r23, r1
    c874:	48 17       	cp	r20, r24
    c876:	59 07       	cpc	r21, r25
    c878:	6a 07       	cpc	r22, r26
    c87a:	7b 07       	cpc	r23, r27
    c87c:	38 f0       	brcs	.+14     	; 0xc88c <f_getfree+0x6e>
    c87e:	ed 81       	ldd	r30, Y+5	; 0x05
    c880:	fe 81       	ldd	r31, Y+6	; 0x06
    c882:	80 83       	st	Z, r24
    c884:	91 83       	std	Z+1, r25	; 0x01
    c886:	a2 83       	std	Z+2, r26	; 0x02
    c888:	b3 83       	std	Z+3, r27	; 0x03
    c88a:	a4 c0       	rjmp	.+328    	; 0xc9d4 <f_getfree+0x1b6>
    c88c:	80 81       	ld	r24, Z
    c88e:	81 30       	cpi	r24, 0x01	; 1
    c890:	a1 f5       	brne	.+104    	; 0xc8fa <f_getfree+0xdc>
    c892:	82 e0       	ldi	r24, 0x02	; 2
    c894:	88 2e       	mov	r8, r24
    c896:	91 2c       	mov	r9, r1
    c898:	a1 2c       	mov	r10, r1
    c89a:	b1 2c       	mov	r11, r1
    c89c:	c1 2c       	mov	r12, r1
    c89e:	d1 2c       	mov	r13, r1
    c8a0:	76 01       	movw	r14, r12
    c8a2:	b5 01       	movw	r22, r10
    c8a4:	a4 01       	movw	r20, r8
    c8a6:	c3 01       	movw	r24, r6
    c8a8:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <get_fat.isra.9>
    c8ac:	6f 3f       	cpi	r22, 0xFF	; 255
    c8ae:	bf ef       	ldi	r27, 0xFF	; 255
    c8b0:	7b 07       	cpc	r23, r27
    c8b2:	8b 07       	cpc	r24, r27
    c8b4:	9b 07       	cpc	r25, r27
    c8b6:	09 f4       	brne	.+2      	; 0xc8ba <f_getfree+0x9c>
    c8b8:	76 c0       	rjmp	.+236    	; 0xc9a6 <f_getfree+0x188>
    c8ba:	61 30       	cpi	r22, 0x01	; 1
    c8bc:	71 05       	cpc	r23, r1
    c8be:	81 05       	cpc	r24, r1
    c8c0:	91 05       	cpc	r25, r1
    c8c2:	09 f4       	brne	.+2      	; 0xc8c6 <f_getfree+0xa8>
    c8c4:	73 c0       	rjmp	.+230    	; 0xc9ac <f_getfree+0x18e>
    c8c6:	67 2b       	or	r22, r23
    c8c8:	68 2b       	or	r22, r24
    c8ca:	69 2b       	or	r22, r25
    c8cc:	29 f4       	brne	.+10     	; 0xc8d8 <f_getfree+0xba>
    c8ce:	ef ef       	ldi	r30, 0xFF	; 255
    c8d0:	ce 1a       	sub	r12, r30
    c8d2:	de 0a       	sbc	r13, r30
    c8d4:	ee 0a       	sbc	r14, r30
    c8d6:	fe 0a       	sbc	r15, r30
    c8d8:	ff ef       	ldi	r31, 0xFF	; 255
    c8da:	8f 1a       	sub	r8, r31
    c8dc:	9f 0a       	sbc	r9, r31
    c8de:	af 0a       	sbc	r10, r31
    c8e0:	bf 0a       	sbc	r11, r31
    c8e2:	e9 81       	ldd	r30, Y+1	; 0x01
    c8e4:	fa 81       	ldd	r31, Y+2	; 0x02
    c8e6:	81 8d       	ldd	r24, Z+25	; 0x19
    c8e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    c8ea:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c8ec:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c8ee:	88 16       	cp	r8, r24
    c8f0:	99 06       	cpc	r9, r25
    c8f2:	aa 06       	cpc	r10, r26
    c8f4:	bb 06       	cpc	r11, r27
    c8f6:	a8 f2       	brcs	.-86     	; 0xc8a2 <f_getfree+0x84>
    c8f8:	5d c0       	rjmp	.+186    	; 0xc9b4 <f_getfree+0x196>
    c8fa:	f3 01       	movw	r30, r6
    c8fc:	45 a0       	ldd	r4, Z+37	; 0x25
    c8fe:	56 a0       	ldd	r5, Z+38	; 0x26
    c900:	67 a0       	ldd	r6, Z+39	; 0x27
    c902:	70 a4       	ldd	r7, Z+40	; 0x28
    c904:	21 2c       	mov	r2, r1
    c906:	31 2c       	mov	r3, r1
    c908:	c1 2c       	mov	r12, r1
    c90a:	d1 2c       	mov	r13, r1
    c90c:	76 01       	movw	r14, r12
    c90e:	21 14       	cp	r2, r1
    c910:	31 04       	cpc	r3, r1
    c912:	b1 f4       	brne	.+44     	; 0xc940 <f_getfree+0x122>
    c914:	d3 01       	movw	r26, r6
    c916:	c2 01       	movw	r24, r4
    c918:	01 96       	adiw	r24, 0x01	; 1
    c91a:	a1 1d       	adc	r26, r1
    c91c:	b1 1d       	adc	r27, r1
    c91e:	8f 83       	std	Y+7, r24	; 0x07
    c920:	98 87       	std	Y+8, r25	; 0x08
    c922:	a9 87       	std	Y+9, r26	; 0x09
    c924:	ba 87       	std	Y+10, r27	; 0x0a
    c926:	b3 01       	movw	r22, r6
    c928:	a2 01       	movw	r20, r4
    c92a:	89 81       	ldd	r24, Y+1	; 0x01
    c92c:	9a 81       	ldd	r25, Y+2	; 0x02
    c92e:	0e 94 48 4b 	call	0x9690	; 0x9690 <move_window>
    c932:	00 97       	sbiw	r24, 0x00	; 0
    c934:	09 f0       	breq	.+2      	; 0xc938 <f_getfree+0x11a>
    c936:	3d c0       	rjmp	.+122    	; 0xc9b2 <f_getfree+0x194>
    c938:	4f 80       	ldd	r4, Y+7	; 0x07
    c93a:	58 84       	ldd	r5, Y+8	; 0x08
    c93c:	69 84       	ldd	r6, Y+9	; 0x09
    c93e:	7a 84       	ldd	r7, Y+10	; 0x0a
    c940:	e9 81       	ldd	r30, Y+1	; 0x01
    c942:	fa 81       	ldd	r31, Y+2	; 0x02
    c944:	80 81       	ld	r24, Z
    c946:	82 30       	cpi	r24, 0x02	; 2
    c948:	79 f4       	brne	.+30     	; 0xc968 <f_getfree+0x14a>
    c94a:	e2 0d       	add	r30, r2
    c94c:	f3 1d       	adc	r31, r3
    c94e:	85 a9       	ldd	r24, Z+53	; 0x35
    c950:	96 a9       	ldd	r25, Z+54	; 0x36
    c952:	89 2b       	or	r24, r25
    c954:	29 f4       	brne	.+10     	; 0xc960 <f_getfree+0x142>
    c956:	9f ef       	ldi	r25, 0xFF	; 255
    c958:	c9 1a       	sub	r12, r25
    c95a:	d9 0a       	sbc	r13, r25
    c95c:	e9 0a       	sbc	r14, r25
    c95e:	f9 0a       	sbc	r15, r25
    c960:	a2 e0       	ldi	r26, 0x02	; 2
    c962:	2a 0e       	add	r2, r26
    c964:	31 1c       	adc	r3, r1
    c966:	15 c0       	rjmp	.+42     	; 0xc992 <f_getfree+0x174>
    c968:	cf 01       	movw	r24, r30
    c96a:	c5 96       	adiw	r24, 0x35	; 53
    c96c:	82 0d       	add	r24, r2
    c96e:	93 1d       	adc	r25, r3
    c970:	0e 94 86 47 	call	0x8f0c	; 0x8f0c <ld_dword>
    c974:	dc 01       	movw	r26, r24
    c976:	cb 01       	movw	r24, r22
    c978:	bf 70       	andi	r27, 0x0F	; 15
    c97a:	89 2b       	or	r24, r25
    c97c:	8a 2b       	or	r24, r26
    c97e:	8b 2b       	or	r24, r27
    c980:	29 f4       	brne	.+10     	; 0xc98c <f_getfree+0x16e>
    c982:	bf ef       	ldi	r27, 0xFF	; 255
    c984:	cb 1a       	sub	r12, r27
    c986:	db 0a       	sbc	r13, r27
    c988:	eb 0a       	sbc	r14, r27
    c98a:	fb 0a       	sbc	r15, r27
    c98c:	e4 e0       	ldi	r30, 0x04	; 4
    c98e:	2e 0e       	add	r2, r30
    c990:	31 1c       	adc	r3, r1
    c992:	f1 e0       	ldi	r31, 0x01	; 1
    c994:	3f 22       	and	r3, r31
    c996:	21 e0       	ldi	r18, 0x01	; 1
    c998:	82 1a       	sub	r8, r18
    c99a:	91 08       	sbc	r9, r1
    c99c:	a1 08       	sbc	r10, r1
    c99e:	b1 08       	sbc	r11, r1
    c9a0:	09 f0       	breq	.+2      	; 0xc9a4 <f_getfree+0x186>
    c9a2:	b5 cf       	rjmp	.-150    	; 0xc90e <f_getfree+0xf0>
    c9a4:	07 c0       	rjmp	.+14     	; 0xc9b4 <f_getfree+0x196>
    c9a6:	01 e0       	ldi	r16, 0x01	; 1
    c9a8:	10 e0       	ldi	r17, 0x00	; 0
    c9aa:	04 c0       	rjmp	.+8      	; 0xc9b4 <f_getfree+0x196>
    c9ac:	02 e0       	ldi	r16, 0x02	; 2
    c9ae:	10 e0       	ldi	r17, 0x00	; 0
    c9b0:	01 c0       	rjmp	.+2      	; 0xc9b4 <f_getfree+0x196>
    c9b2:	8c 01       	movw	r16, r24
    c9b4:	ad 81       	ldd	r26, Y+5	; 0x05
    c9b6:	be 81       	ldd	r27, Y+6	; 0x06
    c9b8:	cd 92       	st	X+, r12
    c9ba:	dd 92       	st	X+, r13
    c9bc:	ed 92       	st	X+, r14
    c9be:	fc 92       	st	X, r15
    c9c0:	13 97       	sbiw	r26, 0x03	; 3
    c9c2:	e9 81       	ldd	r30, Y+1	; 0x01
    c9c4:	fa 81       	ldd	r31, Y+2	; 0x02
    c9c6:	c1 8a       	std	Z+17, r12	; 0x11
    c9c8:	d2 8a       	std	Z+18, r13	; 0x12
    c9ca:	e3 8a       	std	Z+19, r14	; 0x13
    c9cc:	f4 8a       	std	Z+20, r15	; 0x14
    c9ce:	84 81       	ldd	r24, Z+4	; 0x04
    c9d0:	81 60       	ori	r24, 0x01	; 1
    c9d2:	84 83       	std	Z+4, r24	; 0x04
    c9d4:	c8 01       	movw	r24, r16
    c9d6:	2a 96       	adiw	r28, 0x0a	; 10
    c9d8:	e2 e1       	ldi	r30, 0x12	; 18
    c9da:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0000c9de <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c9de:	a0 e6       	ldi	r26, 0x60	; 96
    c9e0:	b0 e0       	ldi	r27, 0x00	; 0
    c9e2:	e5 ef       	ldi	r30, 0xF5	; 245
    c9e4:	f4 e6       	ldi	r31, 0x64	; 100
    c9e6:	0c 94 ba e6 	jmp	0x1cd74	; 0x1cd74 <__prologue_saves__+0xe>
    c9ea:	a1 96       	adiw	r28, 0x21	; 33
    c9ec:	9f af       	std	Y+63, r25	; 0x3f
    c9ee:	8e af       	std	Y+62, r24	; 0x3e
    c9f0:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    c9f2:	42 e0       	ldi	r20, 0x02	; 2
    c9f4:	be 01       	movw	r22, r28
    c9f6:	63 5a       	subi	r22, 0xA3	; 163
    c9f8:	7f 4f       	sbci	r23, 0xFF	; 255
    c9fa:	ce 01       	movw	r24, r28
    c9fc:	81 5a       	subi	r24, 0xA1	; 161
    c9fe:	9f 4f       	sbci	r25, 0xFF	; 255
    ca00:	0e 94 c3 4b 	call	0x9786	; 0x9786 <mount_volume>
	if (res == FR_OK) {
    ca04:	00 97       	sbiw	r24, 0x00	; 0
    ca06:	09 f0       	breq	.+2      	; 0xca0a <f_unlink+0x2c>
    ca08:	8c c0       	rjmp	.+280    	; 0xcb22 <f_unlink+0x144>
		dj.obj.fs = fs;
    ca0a:	6f 96       	adiw	r28, 0x1f	; 31
    ca0c:	8e ad       	ldd	r24, Y+62	; 0x3e
    ca0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    ca10:	6f 97       	sbiw	r28, 0x1f	; 31
    ca12:	98 ab       	std	Y+48, r25	; 0x30
    ca14:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    ca16:	80 e0       	ldi	r24, 0x00	; 0
    ca18:	92 e0       	ldi	r25, 0x02	; 2
    ca1a:	b0 d3       	rcall	.+1888   	; 0xd17c <ff_memalloc>
    ca1c:	5c 01       	movw	r10, r24
    ca1e:	00 97       	sbiw	r24, 0x00	; 0
    ca20:	09 f4       	brne	.+2      	; 0xca24 <f_unlink+0x46>
    ca22:	49 c0       	rjmp	.+146    	; 0xcab6 <f_unlink+0xd8>
    ca24:	6f 96       	adiw	r28, 0x1f	; 31
    ca26:	ee ad       	ldd	r30, Y+62	; 0x3e
    ca28:	ff ad       	ldd	r31, Y+63	; 0x3f
    ca2a:	6f 97       	sbiw	r28, 0x1f	; 31
    ca2c:	94 87       	std	Z+12, r25	; 0x0c
    ca2e:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    ca30:	a1 96       	adiw	r28, 0x21	; 33
    ca32:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca34:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca36:	a1 97       	sbiw	r28, 0x21	; 33
    ca38:	ce 01       	movw	r24, r28
    ca3a:	8f 96       	adiw	r24, 0x2f	; 47
    ca3c:	0e 94 10 57 	call	0xae20	; 0xae20 <follow_path>
    ca40:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    ca42:	89 2b       	or	r24, r25
    ca44:	a1 f5       	brne	.+104    	; 0xcaae <f_unlink+0xd0>
    ca46:	67 96       	adiw	r28, 0x17	; 23
    ca48:	8f ad       	ldd	r24, Y+63	; 0x3f
    ca4a:	67 97       	sbiw	r28, 0x17	; 23
    ca4c:	85 fd       	sbrc	r24, 5
    ca4e:	36 c0       	rjmp	.+108    	; 0xcabc <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    ca50:	87 fd       	sbrc	r24, 7
    ca52:	34 c0       	rjmp	.+104    	; 0xcabc <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    ca54:	9b a8       	ldd	r9, Y+51	; 0x33
    ca56:	90 fc       	sbrc	r9, 0
    ca58:	40 c0       	rjmp	.+128    	; 0xcada <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    ca5a:	6f 96       	adiw	r28, 0x1f	; 31
    ca5c:	0e ad       	ldd	r16, Y+62	; 0x3e
    ca5e:	1f ad       	ldd	r17, Y+63	; 0x3f
    ca60:	6f 97       	sbiw	r28, 0x1f	; 31
    ca62:	2b 96       	adiw	r28, 0x0b	; 11
    ca64:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca66:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca68:	2b 97       	sbiw	r28, 0x0b	; 11
    ca6a:	f8 01       	movw	r30, r16
    ca6c:	80 81       	ld	r24, Z
    ca6e:	0e 94 b9 49 	call	0x9372	; 0x9372 <ld_clust.isra.3>
    ca72:	6b 01       	movw	r12, r22
    ca74:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    ca76:	94 fe       	sbrs	r9, 4
    ca78:	33 c0       	rjmp	.+102    	; 0xcae0 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    ca7a:	f8 01       	movw	r30, r16
    ca7c:	85 89       	ldd	r24, Z+21	; 0x15
    ca7e:	96 89       	ldd	r25, Z+22	; 0x16
    ca80:	a7 89       	ldd	r26, Z+23	; 0x17
    ca82:	b0 8d       	ldd	r27, Z+24	; 0x18
    ca84:	c8 16       	cp	r12, r24
    ca86:	d9 06       	cpc	r13, r25
    ca88:	ea 06       	cpc	r14, r26
    ca8a:	fb 06       	cpc	r15, r27
    ca8c:	31 f1       	breq	.+76     	; 0xcada <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    ca8e:	1a 83       	std	Y+2, r17	; 0x02
    ca90:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    ca92:	cf 82       	std	Y+7, r12	; 0x07
    ca94:	d8 86       	std	Y+8, r13	; 0x08
    ca96:	e9 86       	std	Y+9, r14	; 0x09
    ca98:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    ca9a:	40 e0       	ldi	r20, 0x00	; 0
    ca9c:	50 e0       	ldi	r21, 0x00	; 0
    ca9e:	ba 01       	movw	r22, r20
    caa0:	ce 01       	movw	r24, r28
    caa2:	01 96       	adiw	r24, 0x01	; 1
    caa4:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <dir_sdi>
    caa8:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    caaa:	89 2b       	or	r24, r25
    caac:	51 f0       	breq	.+20     	; 0xcac2 <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    caae:	c5 01       	movw	r24, r10
    cab0:	68 d3       	rcall	.+1744   	; 0xd182 <ff_memfree>
    cab2:	c8 01       	movw	r24, r16
    cab4:	36 c0       	rjmp	.+108    	; 0xcb22 <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cab6:	81 e1       	ldi	r24, 0x11	; 17
    cab8:	90 e0       	ldi	r25, 0x00	; 0
    caba:	33 c0       	rjmp	.+102    	; 0xcb22 <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    cabc:	06 e0       	ldi	r16, 0x06	; 6
    cabe:	10 e0       	ldi	r17, 0x00	; 0
    cac0:	f6 cf       	rjmp	.-20     	; 0xcaae <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    cac2:	60 e0       	ldi	r22, 0x00	; 0
    cac4:	70 e0       	ldi	r23, 0x00	; 0
    cac6:	ce 01       	movw	r24, r28
    cac8:	01 96       	adiw	r24, 0x01	; 1
    caca:	0e 94 63 53 	call	0xa6c6	; 0xa6c6 <dir_read>
    cace:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cad0:	00 97       	sbiw	r24, 0x00	; 0
    cad2:	19 f0       	breq	.+6      	; 0xcada <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cad4:	04 97       	sbiw	r24, 0x04	; 4
    cad6:	21 f0       	breq	.+8      	; 0xcae0 <f_unlink+0x102>
    cad8:	ea cf       	rjmp	.-44     	; 0xcaae <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    cada:	07 e0       	ldi	r16, 0x07	; 7
    cadc:	10 e0       	ldi	r17, 0x00	; 0
    cade:	e7 cf       	rjmp	.-50     	; 0xcaae <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    cae0:	ce 01       	movw	r24, r28
    cae2:	8f 96       	adiw	r24, 0x2f	; 47
    cae4:	0e 94 2c 54 	call	0xa858	; 0xa858 <dir_remove>
    cae8:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    caea:	89 2b       	or	r24, r25
    caec:	01 f7       	brne	.-64     	; 0xcaae <f_unlink+0xd0>
    caee:	c1 14       	cp	r12, r1
    caf0:	d1 04       	cpc	r13, r1
    caf2:	e1 04       	cpc	r14, r1
    caf4:	f1 04       	cpc	r15, r1
    caf6:	41 f4       	brne	.+16     	; 0xcb08 <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    caf8:	6f 96       	adiw	r28, 0x1f	; 31
    cafa:	8e ad       	ldd	r24, Y+62	; 0x3e
    cafc:	9f ad       	ldd	r25, Y+63	; 0x3f
    cafe:	6f 97       	sbiw	r28, 0x1f	; 31
    cb00:	0e 94 2e 4a 	call	0x945c	; 0x945c <sync_fs>
    cb04:	8c 01       	movw	r16, r24
    cb06:	d3 cf       	rjmp	.-90     	; 0xcaae <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cb08:	00 e0       	ldi	r16, 0x00	; 0
    cb0a:	10 e0       	ldi	r17, 0x00	; 0
    cb0c:	98 01       	movw	r18, r16
    cb0e:	b7 01       	movw	r22, r14
    cb10:	a6 01       	movw	r20, r12
    cb12:	ce 01       	movw	r24, r28
    cb14:	8f 96       	adiw	r24, 0x2f	; 47
    cb16:	0e 94 b1 51 	call	0xa362	; 0xa362 <remove_chain>
    cb1a:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cb1c:	89 2b       	or	r24, r25
    cb1e:	39 f6       	brne	.-114    	; 0xcaae <f_unlink+0xd0>
    cb20:	eb cf       	rjmp	.-42     	; 0xcaf8 <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cb22:	c0 5a       	subi	r28, 0xA0	; 160
    cb24:	df 4f       	sbci	r29, 0xFF	; 255
    cb26:	eb e0       	ldi	r30, 0x0B	; 11
    cb28:	0c 94 d6 e6 	jmp	0x1cdac	; 0x1cdac <__epilogue_restores__+0xe>

0000cb2c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cb2c:	a0 e4       	ldi	r26, 0x40	; 64
    cb2e:	b0 e0       	ldi	r27, 0x00	; 0
    cb30:	ec e9       	ldi	r30, 0x9C	; 156
    cb32:	f5 e6       	ldi	r31, 0x65	; 101
    cb34:	0c 94 b5 e6 	jmp	0x1cd6a	; 0x1cd6a <__prologue_saves__+0x4>
    cb38:	21 96       	adiw	r28, 0x01	; 1
    cb3a:	9f af       	std	Y+63, r25	; 0x3f
    cb3c:	8e af       	std	Y+62, r24	; 0x3e
    cb3e:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cb40:	42 e0       	ldi	r20, 0x02	; 2
    cb42:	be 01       	movw	r22, r28
    cb44:	63 5c       	subi	r22, 0xC3	; 195
    cb46:	7f 4f       	sbci	r23, 0xFF	; 255
    cb48:	ce 01       	movw	r24, r28
    cb4a:	cf 96       	adiw	r24, 0x3f	; 63
    cb4c:	0e 94 c3 4b 	call	0x9786	; 0x9786 <mount_volume>
	if (res == FR_OK) {
    cb50:	00 97       	sbiw	r24, 0x00	; 0
    cb52:	09 f0       	breq	.+2      	; 0xcb56 <f_mkdir+0x2a>
    cb54:	d6 c0       	rjmp	.+428    	; 0xcd02 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cb56:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb58:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb5a:	9a 83       	std	Y+2, r25	; 0x02
    cb5c:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cb5e:	80 e0       	ldi	r24, 0x00	; 0
    cb60:	92 e0       	ldi	r25, 0x02	; 2
    cb62:	0c d3       	rcall	.+1560   	; 0xd17c <ff_memalloc>
    cb64:	6c 01       	movw	r12, r24
    cb66:	00 97       	sbiw	r24, 0x00	; 0
    cb68:	e9 f0       	breq	.+58     	; 0xcba4 <f_mkdir+0x78>
    cb6a:	ed ad       	ldd	r30, Y+61	; 0x3d
    cb6c:	fe ad       	ldd	r31, Y+62	; 0x3e
    cb6e:	94 87       	std	Z+12, r25	; 0x0c
    cb70:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cb72:	21 96       	adiw	r28, 0x01	; 1
    cb74:	6e ad       	ldd	r22, Y+62	; 0x3e
    cb76:	7f ad       	ldd	r23, Y+63	; 0x3f
    cb78:	21 97       	sbiw	r28, 0x01	; 1
    cb7a:	ce 01       	movw	r24, r28
    cb7c:	01 96       	adiw	r24, 0x01	; 1
    cb7e:	0e 94 10 57 	call	0xae20	; 0xae20 <follow_path>
    cb82:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cb84:	89 2b       	or	r24, r25
    cb86:	89 f0       	breq	.+34     	; 0xcbaa <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cb88:	84 e0       	ldi	r24, 0x04	; 4
    cb8a:	e8 16       	cp	r14, r24
    cb8c:	f1 04       	cpc	r15, r1
    cb8e:	31 f4       	brne	.+12     	; 0xcb9c <f_mkdir+0x70>
    cb90:	88 a5       	ldd	r24, Y+40	; 0x28
    cb92:	85 ff       	sbrs	r24, 5
    cb94:	0e c0       	rjmp	.+28     	; 0xcbb2 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    cb96:	26 e0       	ldi	r18, 0x06	; 6
    cb98:	e2 2e       	mov	r14, r18
    cb9a:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    cb9c:	c6 01       	movw	r24, r12
    cb9e:	f1 d2       	rcall	.+1506   	; 0xd182 <ff_memfree>
    cba0:	c7 01       	movw	r24, r14
    cba2:	af c0       	rjmp	.+350    	; 0xcd02 <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cba4:	81 e1       	ldi	r24, 0x11	; 17
    cba6:	90 e0       	ldi	r25, 0x00	; 0
    cba8:	ac c0       	rjmp	.+344    	; 0xcd02 <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cbaa:	38 e0       	ldi	r19, 0x08	; 8
    cbac:	e3 2e       	mov	r14, r19
    cbae:	f1 2c       	mov	r15, r1
    cbb0:	f5 cf       	rjmp	.-22     	; 0xcb9c <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    cbb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    cbb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    cbb6:	98 ab       	std	Y+48, r25	; 0x30
    cbb8:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cbba:	40 e0       	ldi	r20, 0x00	; 0
    cbbc:	50 e0       	ldi	r21, 0x00	; 0
    cbbe:	ba 01       	movw	r22, r20
    cbc0:	ce 01       	movw	r24, r28
    cbc2:	8f 96       	adiw	r24, 0x2f	; 47
    cbc4:	0e 94 8b 50 	call	0xa116	; 0xa116 <create_chain>
    cbc8:	4b 01       	movw	r8, r22
    cbca:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cbcc:	67 2b       	or	r22, r23
    cbce:	68 2b       	or	r22, r24
    cbd0:	69 2b       	or	r22, r25
    cbd2:	09 f1       	breq	.+66     	; 0xcc16 <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cbd4:	e1 e0       	ldi	r30, 0x01	; 1
    cbd6:	8e 16       	cp	r8, r30
    cbd8:	91 04       	cpc	r9, r1
    cbda:	a1 04       	cpc	r10, r1
    cbdc:	b1 04       	cpc	r11, r1
    cbde:	61 f0       	breq	.+24     	; 0xcbf8 <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    cbe0:	ff ef       	ldi	r31, 0xFF	; 255
    cbe2:	8f 16       	cp	r8, r31
    cbe4:	9f 06       	cpc	r9, r31
    cbe6:	af 06       	cpc	r10, r31
    cbe8:	bf 06       	cpc	r11, r31
    cbea:	d9 f4       	brne	.+54     	; 0xcc22 <f_mkdir+0xf6>
			tm = GET_FATTIME();
    cbec:	0e 94 3f 70 	call	0xe07e	; 0xe07e <get_fattime>
    cbf0:	ee 24       	eor	r14, r14
    cbf2:	e3 94       	inc	r14
    cbf4:	f1 2c       	mov	r15, r1
    cbf6:	05 c0       	rjmp	.+10     	; 0xcc02 <f_mkdir+0xd6>
    cbf8:	0e 94 3f 70 	call	0xe07e	; 0xe07e <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cbfc:	92 e0       	ldi	r25, 0x02	; 2
    cbfe:	e9 2e       	mov	r14, r25
    cc00:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    cc02:	00 e0       	ldi	r16, 0x00	; 0
    cc04:	10 e0       	ldi	r17, 0x00	; 0
    cc06:	98 01       	movw	r18, r16
    cc08:	b5 01       	movw	r22, r10
    cc0a:	a4 01       	movw	r20, r8
    cc0c:	ce 01       	movw	r24, r28
    cc0e:	8f 96       	adiw	r24, 0x2f	; 47
    cc10:	0e 94 b1 51 	call	0xa362	; 0xa362 <remove_chain>
    cc14:	c3 cf       	rjmp	.-122    	; 0xcb9c <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cc16:	0e 94 3f 70 	call	0xe07e	; 0xe07e <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cc1a:	87 e0       	ldi	r24, 0x07	; 7
    cc1c:	e8 2e       	mov	r14, r24
    cc1e:	f1 2c       	mov	r15, r1
    cc20:	f0 cf       	rjmp	.-32     	; 0xcc02 <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cc22:	0e 94 3f 70 	call	0xe07e	; 0xe07e <get_fattime>
    cc26:	2b 01       	movw	r4, r22
    cc28:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    cc2a:	b5 01       	movw	r22, r10
    cc2c:	a4 01       	movw	r20, r8
    cc2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc30:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc32:	0e 94 a0 4a 	call	0x9540	; 0x9540 <dir_clear>
    cc36:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    cc38:	89 2b       	or	r24, r25
    cc3a:	19 f7       	brne	.-58     	; 0xcc02 <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    cc3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc40:	4b e0       	ldi	r20, 0x0B	; 11
    cc42:	50 e0       	ldi	r21, 0x00	; 0
    cc44:	60 e2       	ldi	r22, 0x20	; 32
    cc46:	70 e0       	ldi	r23, 0x00	; 0
    cc48:	c5 96       	adiw	r24, 0x35	; 53
    cc4a:	0e 94 a1 47 	call	0x8f42	; 0x8f42 <mem_set>
						fs->win[DIR_Name] = '.';
    cc4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc50:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc52:	1e e2       	ldi	r17, 0x2E	; 46
    cc54:	fc 01       	movw	r30, r24
    cc56:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    cc58:	e0 5c       	subi	r30, 0xC0	; 192
    cc5a:	ff 4f       	sbci	r31, 0xFF	; 255
    cc5c:	20 e1       	ldi	r18, 0x10	; 16
    cc5e:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    cc60:	b3 01       	movw	r22, r6
    cc62:	a2 01       	movw	r20, r4
    cc64:	85 5b       	subi	r24, 0xB5	; 181
    cc66:	9f 4f       	sbci	r25, 0xFF	; 255
    cc68:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <st_dword>
						st_clust(fs, fs->win, dcl);
    cc6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc70:	bc 01       	movw	r22, r24
    cc72:	6b 5c       	subi	r22, 0xCB	; 203
    cc74:	7f 4f       	sbci	r23, 0xFF	; 255
    cc76:	a5 01       	movw	r20, r10
    cc78:	94 01       	movw	r18, r8
    cc7a:	0e 94 ce 49 	call	0x939c	; 0x939c <st_clust.isra.4>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cc7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc80:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc82:	bc 01       	movw	r22, r24
    cc84:	6b 5c       	subi	r22, 0xCB	; 203
    cc86:	7f 4f       	sbci	r23, 0xFF	; 255
    cc88:	40 e2       	ldi	r20, 0x20	; 32
    cc8a:	50 e0       	ldi	r21, 0x00	; 0
    cc8c:	8b 5a       	subi	r24, 0xAB	; 171
    cc8e:	9f 4f       	sbci	r25, 0xFF	; 255
    cc90:	0e 94 ae 49 	call	0x935c	; 0x935c <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cc94:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc96:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc98:	fc 01       	movw	r30, r24
    cc9a:	ea 5a       	subi	r30, 0xAA	; 170
    cc9c:	ff 4f       	sbci	r31, 0xFF	; 255
    cc9e:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    cca0:	2f 81       	ldd	r18, Y+7	; 0x07
    cca2:	38 85       	ldd	r19, Y+8	; 0x08
    cca4:	49 85       	ldd	r20, Y+9	; 0x09
    cca6:	5a 85       	ldd	r21, Y+10	; 0x0a
    cca8:	bc 01       	movw	r22, r24
    ccaa:	6b 5a       	subi	r22, 0xAB	; 171
    ccac:	7f 4f       	sbci	r23, 0xFF	; 255
    ccae:	0e 94 ce 49 	call	0x939c	; 0x939c <st_clust.isra.4>
						fs->wflag = 1;
    ccb2:	ed ad       	ldd	r30, Y+61	; 0x3d
    ccb4:	fe ad       	ldd	r31, Y+62	; 0x3e
    ccb6:	81 e0       	ldi	r24, 0x01	; 1
    ccb8:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    ccba:	ce 01       	movw	r24, r28
    ccbc:	01 96       	adiw	r24, 0x01	; 1
    ccbe:	0e 94 82 55 	call	0xab04	; 0xab04 <dir_register>
    ccc2:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    ccc4:	89 2b       	or	r24, r25
    ccc6:	09 f0       	breq	.+2      	; 0xccca <f_mkdir+0x19e>
    ccc8:	9c cf       	rjmp	.-200    	; 0xcc02 <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    ccca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cccc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ccce:	b3 01       	movw	r22, r6
    ccd0:	a2 01       	movw	r20, r4
    ccd2:	46 96       	adiw	r24, 0x16	; 22
    ccd4:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    ccd8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    ccda:	7c 8d       	ldd	r23, Y+28	; 0x1c
    ccdc:	a5 01       	movw	r20, r10
    ccde:	94 01       	movw	r18, r8
    cce0:	8d ad       	ldd	r24, Y+61	; 0x3d
    cce2:	9e ad       	ldd	r25, Y+62	; 0x3e
    cce4:	0e 94 ce 49 	call	0x939c	; 0x939c <st_clust.isra.4>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    cce8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ccea:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ccec:	80 e1       	ldi	r24, 0x10	; 16
    ccee:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    ccf0:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccf2:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccf4:	21 e0       	ldi	r18, 0x01	; 1
    ccf6:	fc 01       	movw	r30, r24
    ccf8:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    ccfa:	0e 94 2e 4a 	call	0x945c	; 0x945c <sync_fs>
    ccfe:	7c 01       	movw	r14, r24
    cd00:	4d cf       	rjmp	.-358    	; 0xcb9c <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cd02:	c0 5c       	subi	r28, 0xC0	; 192
    cd04:	df 4f       	sbci	r29, 0xFF	; 255
    cd06:	e0 e1       	ldi	r30, 0x10	; 16
    cd08:	0c 94 d1 e6 	jmp	0x1cda2	; 0x1cda2 <__epilogue_restores__+0x4>

0000cd0c <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cd0c:	a2 e8       	ldi	r26, 0x82	; 130
    cd0e:	b0 e0       	ldi	r27, 0x00	; 0
    cd10:	ec e8       	ldi	r30, 0x8C	; 140
    cd12:	f6 e6       	ldi	r31, 0x66	; 102
    cd14:	0c 94 bc e6 	jmp	0x1cd78	; 0x1cd78 <__prologue_saves__+0x12>
    cd18:	c1 58       	subi	r28, 0x81	; 129
    cd1a:	df 4f       	sbci	r29, 0xFF	; 255
    cd1c:	99 83       	std	Y+1, r25	; 0x01
    cd1e:	88 83       	st	Y, r24
    cd20:	cf 57       	subi	r28, 0x7F	; 127
    cd22:	d0 40       	sbci	r29, 0x00	; 0
    cd24:	cf 57       	subi	r28, 0x7F	; 127
    cd26:	df 4f       	sbci	r29, 0xFF	; 255
    cd28:	79 83       	std	Y+1, r23	; 0x01
    cd2a:	68 83       	st	Y, r22
    cd2c:	c1 58       	subi	r28, 0x81	; 129
    cd2e:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    cd30:	ce 01       	movw	r24, r28
    cd32:	8f 57       	subi	r24, 0x7F	; 127
    cd34:	9f 4f       	sbci	r25, 0xFF	; 255
    cd36:	0e 94 2c 48 	call	0x9058	; 0x9058 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    cd3a:	42 e0       	ldi	r20, 0x02	; 2
    cd3c:	be 01       	movw	r22, r28
    cd3e:	63 58       	subi	r22, 0x83	; 131
    cd40:	7f 4f       	sbci	r23, 0xFF	; 255
    cd42:	ce 01       	movw	r24, r28
    cd44:	81 58       	subi	r24, 0x81	; 129
    cd46:	9f 4f       	sbci	r25, 0xFF	; 255
    cd48:	0e 94 c3 4b 	call	0x9786	; 0x9786 <mount_volume>
	if (res == FR_OK) {
    cd4c:	00 97       	sbiw	r24, 0x00	; 0
    cd4e:	09 f0       	breq	.+2      	; 0xcd52 <f_rename+0x46>
    cd50:	ed c0       	rjmp	.+474    	; 0xcf2c <f_rename+0x220>
		djo.obj.fs = fs;
    cd52:	ef 96       	adiw	r28, 0x3f	; 63
    cd54:	8e ad       	ldd	r24, Y+62	; 0x3e
    cd56:	9f ad       	ldd	r25, Y+63	; 0x3f
    cd58:	ef 97       	sbiw	r28, 0x3f	; 63
    cd5a:	98 ab       	std	Y+48, r25	; 0x30
    cd5c:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cd5e:	80 e0       	ldi	r24, 0x00	; 0
    cd60:	92 e0       	ldi	r25, 0x02	; 2
    cd62:	0c d2       	rcall	.+1048   	; 0xd17c <ff_memalloc>
    cd64:	6c 01       	movw	r12, r24
    cd66:	00 97       	sbiw	r24, 0x00	; 0
    cd68:	f1 f0       	breq	.+60     	; 0xcda6 <f_rename+0x9a>
    cd6a:	ef 96       	adiw	r28, 0x3f	; 63
    cd6c:	ee ad       	ldd	r30, Y+62	; 0x3e
    cd6e:	ff ad       	ldd	r31, Y+63	; 0x3f
    cd70:	ef 97       	sbiw	r28, 0x3f	; 63
    cd72:	94 87       	std	Z+12, r25	; 0x0c
    cd74:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    cd76:	c1 58       	subi	r28, 0x81	; 129
    cd78:	df 4f       	sbci	r29, 0xFF	; 255
    cd7a:	68 81       	ld	r22, Y
    cd7c:	79 81       	ldd	r23, Y+1	; 0x01
    cd7e:	cf 57       	subi	r28, 0x7F	; 127
    cd80:	d0 40       	sbci	r29, 0x00	; 0
    cd82:	ce 01       	movw	r24, r28
    cd84:	8f 96       	adiw	r24, 0x2f	; 47
    cd86:	0e 94 10 57 	call	0xae20	; 0xae20 <follow_path>
    cd8a:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    cd8c:	89 2b       	or	r24, r25
    cd8e:	39 f4       	brne	.+14     	; 0xcd9e <f_rename+0x92>
    cd90:	67 96       	adiw	r28, 0x17	; 23
    cd92:	8f ad       	ldd	r24, Y+63	; 0x3f
    cd94:	67 97       	sbiw	r28, 0x17	; 23
    cd96:	80 7a       	andi	r24, 0xA0	; 160
    cd98:	49 f0       	breq	.+18     	; 0xcdac <f_rename+0xa0>
    cd9a:	06 e0       	ldi	r16, 0x06	; 6
    cd9c:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    cd9e:	c6 01       	movw	r24, r12
    cda0:	f0 d1       	rcall	.+992    	; 0xd182 <ff_memfree>
    cda2:	c8 01       	movw	r24, r16
    cda4:	c3 c0       	rjmp	.+390    	; 0xcf2c <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    cda6:	81 e1       	ldi	r24, 0x11	; 17
    cda8:	90 e0       	ldi	r25, 0x00	; 0
    cdaa:	c0 c0       	rjmp	.+384    	; 0xcf2c <f_rename+0x220>
    cdac:	2b 96       	adiw	r28, 0x0b	; 11
    cdae:	6e ad       	ldd	r22, Y+62	; 0x3e
    cdb0:	7f ad       	ldd	r23, Y+63	; 0x3f
    cdb2:	2b 97       	sbiw	r28, 0x0b	; 11
    cdb4:	40 e2       	ldi	r20, 0x20	; 32
    cdb6:	50 e0       	ldi	r21, 0x00	; 0
    cdb8:	ce 01       	movw	r24, r28
    cdba:	83 5a       	subi	r24, 0xA3	; 163
    cdbc:	9f 4f       	sbci	r25, 0xFF	; 255
    cdbe:	0e 94 ae 49 	call	0x935c	; 0x935c <mem_cpy.part.0>
    cdc2:	4e e2       	ldi	r20, 0x2E	; 46
    cdc4:	50 e0       	ldi	r21, 0x00	; 0
    cdc6:	be 01       	movw	r22, r28
    cdc8:	61 5d       	subi	r22, 0xD1	; 209
    cdca:	7f 4f       	sbci	r23, 0xFF	; 255
    cdcc:	ce 01       	movw	r24, r28
    cdce:	01 96       	adiw	r24, 0x01	; 1
    cdd0:	0e 94 ae 49 	call	0x935c	; 0x935c <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    cdd4:	cf 57       	subi	r28, 0x7F	; 127
    cdd6:	df 4f       	sbci	r29, 0xFF	; 255
    cdd8:	68 81       	ld	r22, Y
    cdda:	79 81       	ldd	r23, Y+1	; 0x01
    cddc:	c1 58       	subi	r28, 0x81	; 129
    cdde:	d0 40       	sbci	r29, 0x00	; 0
    cde0:	ce 01       	movw	r24, r28
    cde2:	01 96       	adiw	r24, 0x01	; 1
    cde4:	0e 94 10 57 	call	0xae20	; 0xae20 <follow_path>
    cde8:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    cdea:	89 2b       	or	r24, r25
    cdec:	f9 f4       	brne	.+62     	; 0xce2c <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    cdee:	4f 81       	ldd	r20, Y+7	; 0x07
    cdf0:	58 85       	ldd	r21, Y+8	; 0x08
    cdf2:	69 85       	ldd	r22, Y+9	; 0x09
    cdf4:	7a 85       	ldd	r23, Y+10	; 0x0a
    cdf6:	8d a9       	ldd	r24, Y+53	; 0x35
    cdf8:	9e a9       	ldd	r25, Y+54	; 0x36
    cdfa:	af a9       	ldd	r26, Y+55	; 0x37
    cdfc:	b8 ad       	ldd	r27, Y+56	; 0x38
    cdfe:	48 17       	cp	r20, r24
    ce00:	59 07       	cpc	r21, r25
    ce02:	6a 07       	cpc	r22, r26
    ce04:	7b 07       	cpc	r23, r27
    ce06:	09 f0       	breq	.+2      	; 0xce0a <f_rename+0xfe>
    ce08:	8b c0       	rjmp	.+278    	; 0xcf20 <f_rename+0x214>
    ce0a:	4f 85       	ldd	r20, Y+15	; 0x0f
    ce0c:	58 89       	ldd	r21, Y+16	; 0x10
    ce0e:	69 89       	ldd	r22, Y+17	; 0x11
    ce10:	7a 89       	ldd	r23, Y+18	; 0x12
    ce12:	21 96       	adiw	r28, 0x01	; 1
    ce14:	8c ad       	ldd	r24, Y+60	; 0x3c
    ce16:	9d ad       	ldd	r25, Y+61	; 0x3d
    ce18:	ae ad       	ldd	r26, Y+62	; 0x3e
    ce1a:	bf ad       	ldd	r27, Y+63	; 0x3f
    ce1c:	21 97       	sbiw	r28, 0x01	; 1
    ce1e:	48 17       	cp	r20, r24
    ce20:	59 07       	cpc	r21, r25
    ce22:	6a 07       	cpc	r22, r26
    ce24:	7b 07       	cpc	r23, r27
    ce26:	09 f0       	breq	.+2      	; 0xce2a <f_rename+0x11e>
    ce28:	7b c0       	rjmp	.+246    	; 0xcf20 <f_rename+0x214>
    ce2a:	04 c0       	rjmp	.+8      	; 0xce34 <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    ce2c:	04 30       	cpi	r16, 0x04	; 4
    ce2e:	11 05       	cpc	r17, r1
    ce30:	09 f0       	breq	.+2      	; 0xce34 <f_rename+0x128>
    ce32:	b5 cf       	rjmp	.-150    	; 0xcd9e <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    ce34:	ce 01       	movw	r24, r28
    ce36:	01 96       	adiw	r24, 0x01	; 1
    ce38:	0e 94 82 55 	call	0xab04	; 0xab04 <dir_register>
    ce3c:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    ce3e:	89 2b       	or	r24, r25
    ce40:	09 f0       	breq	.+2      	; 0xce44 <f_rename+0x138>
    ce42:	ad cf       	rjmp	.-166    	; 0xcd9e <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    ce44:	0b 8d       	ldd	r16, Y+27	; 0x1b
    ce46:	1c 8d       	ldd	r17, Y+28	; 0x1c
    ce48:	6d e5       	ldi	r22, 0x5D	; 93
    ce4a:	70 e0       	ldi	r23, 0x00	; 0
    ce4c:	6c 0f       	add	r22, r28
    ce4e:	7d 1f       	adc	r23, r29
    ce50:	63 5f       	subi	r22, 0xF3	; 243
    ce52:	7f 4f       	sbci	r23, 0xFF	; 255
    ce54:	43 e1       	ldi	r20, 0x13	; 19
    ce56:	50 e0       	ldi	r21, 0x00	; 0
    ce58:	c8 01       	movw	r24, r16
    ce5a:	0d 96       	adiw	r24, 0x0d	; 13
    ce5c:	0e 94 ae 49 	call	0x935c	; 0x935c <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    ce60:	a9 96       	adiw	r28, 0x29	; 41
    ce62:	8f ad       	ldd	r24, Y+63	; 0x3f
    ce64:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    ce66:	84 ff       	sbrs	r24, 4
    ce68:	80 62       	ori	r24, 0x20	; 32
    ce6a:	f8 01       	movw	r30, r16
    ce6c:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    ce6e:	ef 96       	adiw	r28, 0x3f	; 63
    ce70:	ee ac       	ldd	r14, Y+62	; 0x3e
    ce72:	ff ac       	ldd	r15, Y+63	; 0x3f
    ce74:	ef 97       	sbiw	r28, 0x3f	; 63
    ce76:	bb 24       	eor	r11, r11
    ce78:	b3 94       	inc	r11
    ce7a:	f7 01       	movw	r30, r14
    ce7c:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    ce7e:	f8 01       	movw	r30, r16
    ce80:	83 85       	ldd	r24, Z+11	; 0x0b
    ce82:	84 ff       	sbrs	r24, 4
    ce84:	3d c0       	rjmp	.+122    	; 0xcf00 <f_rename+0x1f4>
    ce86:	4d a9       	ldd	r20, Y+53	; 0x35
    ce88:	5e a9       	ldd	r21, Y+54	; 0x36
    ce8a:	6f a9       	ldd	r22, Y+55	; 0x37
    ce8c:	78 ad       	ldd	r23, Y+56	; 0x38
    ce8e:	8f 81       	ldd	r24, Y+7	; 0x07
    ce90:	98 85       	ldd	r25, Y+8	; 0x08
    ce92:	a9 85       	ldd	r26, Y+9	; 0x09
    ce94:	ba 85       	ldd	r27, Y+10	; 0x0a
    ce96:	48 17       	cp	r20, r24
    ce98:	59 07       	cpc	r21, r25
    ce9a:	6a 07       	cpc	r22, r26
    ce9c:	7b 07       	cpc	r23, r27
    ce9e:	81 f1       	breq	.+96     	; 0xcf00 <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    cea0:	b8 01       	movw	r22, r16
    cea2:	f7 01       	movw	r30, r14
    cea4:	80 81       	ld	r24, Z
    cea6:	0e 94 b9 49 	call	0x9372	; 0x9372 <ld_clust.isra.3>
    ceaa:	ab 01       	movw	r20, r22
    ceac:	bc 01       	movw	r22, r24
    ceae:	c7 01       	movw	r24, r14
    ceb0:	0e 94 b9 47 	call	0x8f72	; 0x8f72 <clst2sect>
    ceb4:	ab 01       	movw	r20, r22
    ceb6:	bc 01       	movw	r22, r24
							if (sect == 0) {
    ceb8:	41 15       	cp	r20, r1
    ceba:	51 05       	cpc	r21, r1
    cebc:	61 05       	cpc	r22, r1
    cebe:	71 05       	cpc	r23, r1
    cec0:	91 f1       	breq	.+100    	; 0xcf26 <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    cec2:	c7 01       	movw	r24, r14
    cec4:	0e 94 48 4b 	call	0x9690	; 0x9690 <move_window>
    cec8:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    ceca:	89 2b       	or	r24, r25
    cecc:	09 f0       	breq	.+2      	; 0xced0 <f_rename+0x1c4>
    cece:	67 cf       	rjmp	.-306    	; 0xcd9e <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    ced0:	ef 96       	adiw	r28, 0x3f	; 63
    ced2:	8e ad       	ldd	r24, Y+62	; 0x3e
    ced4:	9f ad       	ldd	r25, Y+63	; 0x3f
    ced6:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    ced8:	fc 01       	movw	r30, r24
    ceda:	ea 5a       	subi	r30, 0xAA	; 170
    cedc:	ff 4f       	sbci	r31, 0xFF	; 255
    cede:	20 81       	ld	r18, Z
    cee0:	2e 32       	cpi	r18, 0x2E	; 46
    cee2:	71 f4       	brne	.+28     	; 0xcf00 <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    cee4:	2f 81       	ldd	r18, Y+7	; 0x07
    cee6:	38 85       	ldd	r19, Y+8	; 0x08
    cee8:	49 85       	ldd	r20, Y+9	; 0x09
    ceea:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    ceec:	bc 01       	movw	r22, r24
    ceee:	6b 5a       	subi	r22, 0xAB	; 171
    cef0:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    cef2:	0e 94 ce 49 	call	0x939c	; 0x939c <st_clust.isra.4>
									fs->wflag = 1;
    cef6:	ef 96       	adiw	r28, 0x3f	; 63
    cef8:	ee ad       	ldd	r30, Y+62	; 0x3e
    cefa:	ff ad       	ldd	r31, Y+63	; 0x3f
    cefc:	ef 97       	sbiw	r28, 0x3f	; 63
    cefe:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cf00:	ce 01       	movw	r24, r28
    cf02:	8f 96       	adiw	r24, 0x2f	; 47
    cf04:	0e 94 2c 54 	call	0xa858	; 0xa858 <dir_remove>
    cf08:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    cf0a:	89 2b       	or	r24, r25
    cf0c:	09 f0       	breq	.+2      	; 0xcf10 <f_rename+0x204>
    cf0e:	47 cf       	rjmp	.-370    	; 0xcd9e <f_rename+0x92>
					res = sync_fs(fs);
    cf10:	ef 96       	adiw	r28, 0x3f	; 63
    cf12:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf14:	9f ad       	ldd	r25, Y+63	; 0x3f
    cf16:	ef 97       	sbiw	r28, 0x3f	; 63
    cf18:	0e 94 2e 4a 	call	0x945c	; 0x945c <sync_fs>
    cf1c:	8c 01       	movw	r16, r24
    cf1e:	3f cf       	rjmp	.-386    	; 0xcd9e <f_rename+0x92>
    cf20:	08 e0       	ldi	r16, 0x08	; 8
    cf22:	10 e0       	ldi	r17, 0x00	; 0
    cf24:	3c cf       	rjmp	.-392    	; 0xcd9e <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cf26:	02 e0       	ldi	r16, 0x02	; 2
    cf28:	10 e0       	ldi	r17, 0x00	; 0
    cf2a:	39 cf       	rjmp	.-398    	; 0xcd9e <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cf2c:	ce 57       	subi	r28, 0x7E	; 126
    cf2e:	df 4f       	sbci	r29, 0xFF	; 255
    cf30:	e9 e0       	ldi	r30, 0x09	; 9
    cf32:	0c 94 d8 e6 	jmp	0x1cdb0	; 0x1cdb0 <__epilogue_restores__+0x12>

0000cf36 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cf36:	a2 e3       	ldi	r26, 0x32	; 50
    cf38:	b0 e0       	ldi	r27, 0x00	; 0
    cf3a:	e1 ea       	ldi	r30, 0xA1	; 161
    cf3c:	f7 e6       	ldi	r31, 0x67	; 103
    cf3e:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    cf42:	9a ab       	std	Y+50, r25	; 0x32
    cf44:	89 ab       	std	Y+49, r24	; 0x31
    cf46:	e6 2e       	mov	r14, r22
    cf48:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cf4a:	42 e0       	ldi	r20, 0x02	; 2
    cf4c:	be 01       	movw	r22, r28
    cf4e:	61 5d       	subi	r22, 0xD1	; 209
    cf50:	7f 4f       	sbci	r23, 0xFF	; 255
    cf52:	ce 01       	movw	r24, r28
    cf54:	c1 96       	adiw	r24, 0x31	; 49
    cf56:	0e 94 c3 4b 	call	0x9786	; 0x9786 <mount_volume>
	if (res == FR_OK) {
    cf5a:	00 97       	sbiw	r24, 0x00	; 0
    cf5c:	a9 f5       	brne	.+106    	; 0xcfc8 <f_chmod+0x92>
		dj.obj.fs = fs;
    cf5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    cf60:	98 a9       	ldd	r25, Y+48	; 0x30
    cf62:	9a 83       	std	Y+2, r25	; 0x02
    cf64:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cf66:	80 e0       	ldi	r24, 0x00	; 0
    cf68:	92 e0       	ldi	r25, 0x02	; 2
    cf6a:	08 d1       	rcall	.+528    	; 0xd17c <ff_memalloc>
    cf6c:	6c 01       	movw	r12, r24
    cf6e:	00 97       	sbiw	r24, 0x00	; 0
    cf70:	b1 f0       	breq	.+44     	; 0xcf9e <f_chmod+0x68>
    cf72:	ef a5       	ldd	r30, Y+47	; 0x2f
    cf74:	f8 a9       	ldd	r31, Y+48	; 0x30
    cf76:	94 87       	std	Z+12, r25	; 0x0c
    cf78:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cf7a:	69 a9       	ldd	r22, Y+49	; 0x31
    cf7c:	7a a9       	ldd	r23, Y+50	; 0x32
    cf7e:	ce 01       	movw	r24, r28
    cf80:	01 96       	adiw	r24, 0x01	; 1
    cf82:	0e 94 10 57 	call	0xae20	; 0xae20 <follow_path>
    cf86:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cf88:	89 2b       	or	r24, r25
    cf8a:	29 f4       	brne	.+10     	; 0xcf96 <f_chmod+0x60>
    cf8c:	88 a5       	ldd	r24, Y+40	; 0x28
    cf8e:	80 7a       	andi	r24, 0xA0	; 160
    cf90:	49 f0       	breq	.+18     	; 0xcfa4 <f_chmod+0x6e>
    cf92:	06 e0       	ldi	r16, 0x06	; 6
    cf94:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cf96:	c6 01       	movw	r24, r12
    cf98:	f4 d0       	rcall	.+488    	; 0xd182 <ff_memfree>
    cf9a:	c8 01       	movw	r24, r16
    cf9c:	15 c0       	rjmp	.+42     	; 0xcfc8 <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cf9e:	81 e1       	ldi	r24, 0x11	; 17
    cfa0:	90 e0       	ldi	r25, 0x00	; 0
    cfa2:	12 c0       	rjmp	.+36     	; 0xcfc8 <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    cfa4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cfa6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cfa8:	83 85       	ldd	r24, Z+11	; 0x0b
    cfaa:	6e 2d       	mov	r22, r14
    cfac:	68 27       	eor	r22, r24
    cfae:	6f 21       	and	r22, r15
    cfb0:	67 72       	andi	r22, 0x27	; 39
    cfb2:	68 27       	eor	r22, r24
    cfb4:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    cfb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    cfb8:	98 a9       	ldd	r25, Y+48	; 0x30
    cfba:	21 e0       	ldi	r18, 0x01	; 1
    cfbc:	fc 01       	movw	r30, r24
    cfbe:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cfc0:	0e 94 2e 4a 	call	0x945c	; 0x945c <sync_fs>
    cfc4:	8c 01       	movw	r16, r24
    cfc6:	e7 cf       	rjmp	.-50     	; 0xcf96 <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cfc8:	e2 96       	adiw	r28, 0x32	; 50
    cfca:	e8 e0       	ldi	r30, 0x08	; 8
    cfcc:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0000cfd0 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    cfd0:	a2 e3       	ldi	r26, 0x32	; 50
    cfd2:	b0 e0       	ldi	r27, 0x00	; 0
    cfd4:	ee ee       	ldi	r30, 0xEE	; 238
    cfd6:	f7 e6       	ldi	r31, 0x67	; 103
    cfd8:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    cfdc:	9a ab       	std	Y+50, r25	; 0x32
    cfde:	89 ab       	std	Y+49, r24	; 0x31
    cfe0:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cfe2:	42 e0       	ldi	r20, 0x02	; 2
    cfe4:	be 01       	movw	r22, r28
    cfe6:	61 5d       	subi	r22, 0xD1	; 209
    cfe8:	7f 4f       	sbci	r23, 0xFF	; 255
    cfea:	ce 01       	movw	r24, r28
    cfec:	c1 96       	adiw	r24, 0x31	; 49
    cfee:	0e 94 c3 4b 	call	0x9786	; 0x9786 <mount_volume>
	if (res == FR_OK) {
    cff2:	00 97       	sbiw	r24, 0x00	; 0
    cff4:	09 f0       	breq	.+2      	; 0xcff8 <f_utime+0x28>
    cff6:	41 c0       	rjmp	.+130    	; 0xd07a <f_utime+0xaa>
		dj.obj.fs = fs;
    cff8:	8f a5       	ldd	r24, Y+47	; 0x2f
    cffa:	98 a9       	ldd	r25, Y+48	; 0x30
    cffc:	9a 83       	std	Y+2, r25	; 0x02
    cffe:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d000:	80 e0       	ldi	r24, 0x00	; 0
    d002:	92 e0       	ldi	r25, 0x02	; 2
    d004:	bb d0       	rcall	.+374    	; 0xd17c <ff_memalloc>
    d006:	7c 01       	movw	r14, r24
    d008:	00 97       	sbiw	r24, 0x00	; 0
    d00a:	b1 f0       	breq	.+44     	; 0xd038 <f_utime+0x68>
    d00c:	ef a5       	ldd	r30, Y+47	; 0x2f
    d00e:	f8 a9       	ldd	r31, Y+48	; 0x30
    d010:	94 87       	std	Z+12, r25	; 0x0c
    d012:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d014:	69 a9       	ldd	r22, Y+49	; 0x31
    d016:	7a a9       	ldd	r23, Y+50	; 0x32
    d018:	ce 01       	movw	r24, r28
    d01a:	01 96       	adiw	r24, 0x01	; 1
    d01c:	0e 94 10 57 	call	0xae20	; 0xae20 <follow_path>
    d020:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d022:	89 2b       	or	r24, r25
    d024:	29 f4       	brne	.+10     	; 0xd030 <f_utime+0x60>
    d026:	88 a5       	ldd	r24, Y+40	; 0x28
    d028:	80 7a       	andi	r24, 0xA0	; 160
    d02a:	49 f0       	breq	.+18     	; 0xd03e <f_utime+0x6e>
    d02c:	06 e0       	ldi	r16, 0x06	; 6
    d02e:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d030:	c7 01       	movw	r24, r14
    d032:	a7 d0       	rcall	.+334    	; 0xd182 <ff_memfree>
    d034:	c8 01       	movw	r24, r16
    d036:	21 c0       	rjmp	.+66     	; 0xd07a <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d038:	81 e1       	ldi	r24, 0x11	; 17
    d03a:	90 e0       	ldi	r25, 0x00	; 0
    d03c:	1e c0       	rjmp	.+60     	; 0xd07a <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d03e:	f6 01       	movw	r30, r12
    d040:	44 81       	ldd	r20, Z+4	; 0x04
    d042:	55 81       	ldd	r21, Z+5	; 0x05
    d044:	60 e0       	ldi	r22, 0x00	; 0
    d046:	70 e0       	ldi	r23, 0x00	; 0
    d048:	ba 01       	movw	r22, r20
    d04a:	55 27       	eor	r21, r21
    d04c:	44 27       	eor	r20, r20
    d04e:	86 81       	ldd	r24, Z+6	; 0x06
    d050:	97 81       	ldd	r25, Z+7	; 0x07
    d052:	a0 e0       	ldi	r26, 0x00	; 0
    d054:	b0 e0       	ldi	r27, 0x00	; 0
    d056:	48 2b       	or	r20, r24
    d058:	59 2b       	or	r21, r25
    d05a:	6a 2b       	or	r22, r26
    d05c:	7b 2b       	or	r23, r27
    d05e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d060:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d062:	46 96       	adiw	r24, 0x16	; 22
    d064:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <st_dword>
				fs->wflag = 1;
    d068:	8f a5       	ldd	r24, Y+47	; 0x2f
    d06a:	98 a9       	ldd	r25, Y+48	; 0x30
    d06c:	21 e0       	ldi	r18, 0x01	; 1
    d06e:	fc 01       	movw	r30, r24
    d070:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d072:	0e 94 2e 4a 	call	0x945c	; 0x945c <sync_fs>
    d076:	8c 01       	movw	r16, r24
    d078:	db cf       	rjmp	.-74     	; 0xd030 <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d07a:	e2 96       	adiw	r28, 0x32	; 50
    d07c:	e8 e0       	ldi	r30, 0x08	; 8
    d07e:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0000d082 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d082:	a2 e3       	ldi	r26, 0x32	; 50
    d084:	b0 e0       	ldi	r27, 0x00	; 0
    d086:	e7 e4       	ldi	r30, 0x47	; 71
    d088:	f8 e6       	ldi	r31, 0x68	; 104
    d08a:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    d08e:	9a ab       	std	Y+50, r25	; 0x32
    d090:	89 ab       	std	Y+49, r24	; 0x31
    d092:	7b 01       	movw	r14, r22
    d094:	6a 01       	movw	r12, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d096:	40 e0       	ldi	r20, 0x00	; 0
    d098:	be 01       	movw	r22, r28
    d09a:	61 5d       	subi	r22, 0xD1	; 209
    d09c:	7f 4f       	sbci	r23, 0xFF	; 255
    d09e:	ce 01       	movw	r24, r28
    d0a0:	c1 96       	adiw	r24, 0x31	; 49
    d0a2:	0e 94 c3 4b 	call	0x9786	; 0x9786 <mount_volume>
    d0a6:	8c 01       	movw	r16, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d0a8:	89 2b       	or	r24, r25
    d0aa:	09 f0       	breq	.+2      	; 0xd0ae <f_getlabel+0x2c>
    d0ac:	62 c0       	rjmp	.+196    	; 0xd172 <f_getlabel+0xf0>
    d0ae:	e1 14       	cp	r14, r1
    d0b0:	f1 04       	cpc	r15, r1
    d0b2:	a1 f1       	breq	.+104    	; 0xd11c <f_getlabel+0x9a>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d0b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    d0b6:	98 a9       	ldd	r25, Y+48	; 0x30
    d0b8:	9a 83       	std	Y+2, r25	; 0x02
    d0ba:	89 83       	std	Y+1, r24	; 0x01
    d0bc:	1f 82       	std	Y+7, r1	; 0x07
    d0be:	18 86       	std	Y+8, r1	; 0x08
    d0c0:	19 86       	std	Y+9, r1	; 0x09
    d0c2:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d0c4:	40 e0       	ldi	r20, 0x00	; 0
    d0c6:	50 e0       	ldi	r21, 0x00	; 0
    d0c8:	ba 01       	movw	r22, r20
    d0ca:	ce 01       	movw	r24, r28
    d0cc:	01 96       	adiw	r24, 0x01	; 1
    d0ce:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <dir_sdi>
		if (res == FR_OK) {
    d0d2:	00 97       	sbiw	r24, 0x00	; 0
    d0d4:	f1 f4       	brne	.+60     	; 0xd112 <f_getlabel+0x90>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d0d6:	61 e0       	ldi	r22, 0x01	; 1
    d0d8:	70 e0       	ldi	r23, 0x00	; 0
    d0da:	ce 01       	movw	r24, r28
    d0dc:	01 96       	adiw	r24, 0x01	; 1
    d0de:	0e 94 63 53 	call	0xa6c6	; 0xa6c6 <dir_read>
		 	if (res == FR_OK) {
    d0e2:	00 97       	sbiw	r24, 0x00	; 0
    d0e4:	b1 f4       	brne	.+44     	; 0xd112 <f_getlabel+0x90>
    d0e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d0e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d0ea:	f7 01       	movw	r30, r14
    d0ec:	3b 96       	adiw	r30, 0x0b	; 11
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d0ee:	a7 01       	movw	r20, r14
    d0f0:	dc 01       	movw	r26, r24
    d0f2:	2d 91       	ld	r18, X+
    d0f4:	cd 01       	movw	r24, r26
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
						if (wc == 0) { di = 0; break; }
						di += wc;
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
    d0f6:	da 01       	movw	r26, r20
    d0f8:	2d 93       	st	X+, r18
    d0fa:	ad 01       	movw	r20, r26
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d0fc:	ae 17       	cp	r26, r30
    d0fe:	bf 07       	cpc	r27, r31
    d100:	b9 f7       	brne	.-18     	; 0xd0f0 <f_getlabel+0x6e>
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d102:	10 82       	st	Z, r1
						if (di == 0) break;
    d104:	ee 16       	cp	r14, r30
    d106:	ff 06       	cpc	r15, r31
    d108:	49 f0       	breq	.+18     	; 0xd11c <f_getlabel+0x9a>
					} while (label[--di] == ' ');
    d10a:	82 91       	ld	r24, -Z
    d10c:	80 32       	cpi	r24, 0x20	; 32
    d10e:	c9 f3       	breq	.-14     	; 0xd102 <f_getlabel+0x80>
    d110:	05 c0       	rjmp	.+10     	; 0xd11c <f_getlabel+0x9a>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d112:	84 30       	cpi	r24, 0x04	; 4
    d114:	91 05       	cpc	r25, r1
    d116:	61 f5       	brne	.+88     	; 0xd170 <f_getlabel+0xee>
			label[0] = 0;
    d118:	f7 01       	movw	r30, r14
    d11a:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d11c:	c1 14       	cp	r12, r1
    d11e:	d1 04       	cpc	r13, r1
    d120:	41 f1       	breq	.+80     	; 0xd172 <f_getlabel+0xf0>
		res = move_window(fs, fs->volbase);
    d122:	8f a5       	ldd	r24, Y+47	; 0x2f
    d124:	98 a9       	ldd	r25, Y+48	; 0x30
    d126:	fc 01       	movw	r30, r24
    d128:	41 a1       	ldd	r20, Z+33	; 0x21
    d12a:	52 a1       	ldd	r21, Z+34	; 0x22
    d12c:	63 a1       	ldd	r22, Z+35	; 0x23
    d12e:	74 a1       	ldd	r23, Z+36	; 0x24
    d130:	0e 94 48 4b 	call	0x9690	; 0x9690 <move_window>
    d134:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    d136:	89 2b       	or	r24, r25
    d138:	e1 f4       	brne	.+56     	; 0xd172 <f_getlabel+0xf0>
			switch (fs->fs_type) {
    d13a:	ef a5       	ldd	r30, Y+47	; 0x2f
    d13c:	f8 a9       	ldd	r31, Y+48	; 0x30
    d13e:	80 81       	ld	r24, Z
    d140:	83 30       	cpi	r24, 0x03	; 3
    d142:	29 f0       	breq	.+10     	; 0xd14e <f_getlabel+0xcc>
    d144:	84 30       	cpi	r24, 0x04	; 4
    d146:	31 f0       	breq	.+12     	; 0xd154 <f_getlabel+0xd2>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d148:	87 e2       	ldi	r24, 0x27	; 39
    d14a:	90 e0       	ldi	r25, 0x00	; 0
    d14c:	05 c0       	rjmp	.+10     	; 0xd158 <f_getlabel+0xd6>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d14e:	83 e4       	ldi	r24, 0x43	; 67
    d150:	90 e0       	ldi	r25, 0x00	; 0
    d152:	02 c0       	rjmp	.+4      	; 0xd158 <f_getlabel+0xd6>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d154:	84 e6       	ldi	r24, 0x64	; 100
    d156:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d158:	f5 96       	adiw	r30, 0x35	; 53
    d15a:	8e 0f       	add	r24, r30
    d15c:	9f 1f       	adc	r25, r31
    d15e:	0e 94 86 47 	call	0x8f0c	; 0x8f0c <ld_dword>
    d162:	d6 01       	movw	r26, r12
    d164:	6d 93       	st	X+, r22
    d166:	7d 93       	st	X+, r23
    d168:	8d 93       	st	X+, r24
    d16a:	9c 93       	st	X, r25
    d16c:	13 97       	sbiw	r26, 0x03	; 3
    d16e:	01 c0       	rjmp	.+2      	; 0xd172 <f_getlabel+0xf0>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d170:	8c 01       	movw	r16, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d172:	c8 01       	movw	r24, r16
    d174:	e2 96       	adiw	r28, 0x32	; 50
    d176:	e8 e0       	ldi	r30, 0x08	; 8
    d178:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0000d17c <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d17c:	0c 94 b6 27 	jmp	0x4f6c	; 0x4f6c <safemalloc>
}
    d180:	08 95       	ret

0000d182 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d182:	0c 94 d8 27 	jmp	0x4fb0	; 0x4fb0 <safefree>
    d186:	08 95       	ret

0000d188 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d188:	cf 92       	push	r12
    d18a:	df 92       	push	r13
    d18c:	ef 92       	push	r14
    d18e:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d190:	60 38       	cpi	r22, 0x80	; 128
    d192:	71 05       	cpc	r23, r1
    d194:	81 05       	cpc	r24, r1
    d196:	91 05       	cpc	r25, r1
    d198:	10 f4       	brcc	.+4      	; 0xd19e <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d19a:	cb 01       	movw	r24, r22
    d19c:	23 c0       	rjmp	.+70     	; 0xd1e4 <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d19e:	61 15       	cp	r22, r1
    d1a0:	71 05       	cpc	r23, r1
    d1a2:	21 e0       	ldi	r18, 0x01	; 1
    d1a4:	82 07       	cpc	r24, r18
    d1a6:	91 05       	cpc	r25, r1
    d1a8:	d8 f4       	brcc	.+54     	; 0xd1e0 <ff_uni2oem+0x58>
    d1aa:	45 3b       	cpi	r20, 0xB5	; 181
    d1ac:	51 40       	sbci	r21, 0x01	; 1
    d1ae:	c1 f4       	brne	.+48     	; 0xd1e0 <ff_uni2oem+0x58>
    d1b0:	e6 ea       	ldi	r30, 0xA6	; 166
    d1b2:	f7 e0       	ldi	r31, 0x07	; 7
    d1b4:	20 e0       	ldi	r18, 0x00	; 0
    d1b6:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d1b8:	c1 90       	ld	r12, Z+
    d1ba:	d1 90       	ld	r13, Z+
    d1bc:	e1 2c       	mov	r14, r1
    d1be:	f1 2c       	mov	r15, r1
    d1c0:	6c 15       	cp	r22, r12
    d1c2:	7d 05       	cpc	r23, r13
    d1c4:	8e 05       	cpc	r24, r14
    d1c6:	9f 05       	cpc	r25, r15
    d1c8:	29 f0       	breq	.+10     	; 0xd1d4 <ff_uni2oem+0x4c>
    d1ca:	2f 5f       	subi	r18, 0xFF	; 255
    d1cc:	3f 4f       	sbci	r19, 0xFF	; 255
    d1ce:	20 38       	cpi	r18, 0x80	; 128
    d1d0:	31 05       	cpc	r19, r1
    d1d2:	91 f7       	brne	.-28     	; 0xd1b8 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d1d4:	b9 01       	movw	r22, r18
    d1d6:	60 58       	subi	r22, 0x80	; 128
    d1d8:	7f 4f       	sbci	r23, 0xFF	; 255
    d1da:	cb 01       	movw	r24, r22
    d1dc:	99 27       	eor	r25, r25
    d1de:	02 c0       	rjmp	.+4      	; 0xd1e4 <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d1e0:	80 e0       	ldi	r24, 0x00	; 0
    d1e2:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d1e4:	ff 90       	pop	r15
    d1e6:	ef 90       	pop	r14
    d1e8:	df 90       	pop	r13
    d1ea:	cf 90       	pop	r12
    d1ec:	08 95       	ret

0000d1ee <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d1ee:	80 38       	cpi	r24, 0x80	; 128
    d1f0:	91 05       	cpc	r25, r1
    d1f2:	88 f0       	brcs	.+34     	; 0xd216 <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d1f4:	65 3b       	cpi	r22, 0xB5	; 181
    d1f6:	71 40       	sbci	r23, 0x01	; 1
    d1f8:	61 f4       	brne	.+24     	; 0xd212 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d1fa:	8f 3f       	cpi	r24, 0xFF	; 255
    d1fc:	91 05       	cpc	r25, r1
    d1fe:	09 f0       	breq	.+2      	; 0xd202 <ff_oem2uni+0x14>
    d200:	40 f4       	brcc	.+16     	; 0xd212 <ff_oem2uni+0x24>
    d202:	88 0f       	add	r24, r24
    d204:	99 1f       	adc	r25, r25
    d206:	fc 01       	movw	r30, r24
    d208:	ea 55       	subi	r30, 0x5A	; 90
    d20a:	f9 4f       	sbci	r31, 0xF9	; 249
    d20c:	80 81       	ld	r24, Z
    d20e:	91 81       	ldd	r25, Z+1	; 0x01
    d210:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d212:	80 e0       	ldi	r24, 0x00	; 0
    d214:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d216:	08 95       	ret

0000d218 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d218:	61 15       	cp	r22, r1
    d21a:	71 05       	cpc	r23, r1
    d21c:	21 e0       	ldi	r18, 0x01	; 1
    d21e:	82 07       	cpc	r24, r18
    d220:	91 05       	cpc	r25, r1
    d222:	08 f0       	brcs	.+2      	; 0xd226 <ff_wtoupper+0xe>
    d224:	5a c0       	rjmp	.+180    	; 0xd2da <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d226:	61 15       	cp	r22, r1
    d228:	80 e1       	ldi	r24, 0x10	; 16
    d22a:	78 07       	cpc	r23, r24
    d22c:	18 f0       	brcs	.+6      	; 0xd234 <ff_wtoupper+0x1c>
    d22e:	a8 ef       	ldi	r26, 0xF8	; 248
    d230:	b4 e0       	ldi	r27, 0x04	; 4
    d232:	02 c0       	rjmp	.+4      	; 0xd238 <ff_wtoupper+0x20>
    d234:	a4 eb       	ldi	r26, 0xB4	; 180
    d236:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d238:	2d 91       	ld	r18, X+
    d23a:	3c 91       	ld	r19, X
    d23c:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d23e:	21 15       	cp	r18, r1
    d240:	31 05       	cpc	r19, r1
    d242:	09 f4       	brne	.+2      	; 0xd246 <ff_wtoupper+0x2e>
    d244:	48 c0       	rjmp	.+144    	; 0xd2d6 <ff_wtoupper+0xbe>
    d246:	62 17       	cp	r22, r18
    d248:	73 07       	cpc	r23, r19
    d24a:	08 f4       	brcc	.+2      	; 0xd24e <ff_wtoupper+0x36>
    d24c:	44 c0       	rjmp	.+136    	; 0xd2d6 <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d24e:	14 96       	adiw	r26, 0x04	; 4
    d250:	fd 01       	movw	r30, r26
    d252:	32 97       	sbiw	r30, 0x02	; 2
    d254:	80 81       	ld	r24, Z
    d256:	91 81       	ldd	r25, Z+1	; 0x01
    d258:	e9 2f       	mov	r30, r25
    d25a:	ff 27       	eor	r31, r31
    d25c:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d25e:	a9 01       	movw	r20, r18
    d260:	48 0f       	add	r20, r24
    d262:	59 1f       	adc	r21, r25
    d264:	64 17       	cp	r22, r20
    d266:	75 07       	cpc	r23, r21
    d268:	70 f5       	brcc	.+92     	; 0xd2c6 <ff_wtoupper+0xae>
				switch (cmd) {
    d26a:	e9 30       	cpi	r30, 0x09	; 9
    d26c:	f1 05       	cpc	r31, r1
    d26e:	98 f5       	brcc	.+102    	; 0xd2d6 <ff_wtoupper+0xbe>
    d270:	ec 54       	subi	r30, 0x4C	; 76
    d272:	ff 4f       	sbci	r31, 0xFF	; 255
    d274:	0c 94 84 e6 	jmp	0x1cd08	; 0x1cd08 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d278:	62 1b       	sub	r22, r18
    d27a:	73 0b       	sbc	r23, r19
    d27c:	fb 01       	movw	r30, r22
    d27e:	ee 0f       	add	r30, r30
    d280:	ff 1f       	adc	r31, r31
    d282:	ea 0f       	add	r30, r26
    d284:	fb 1f       	adc	r31, r27
    d286:	60 81       	ld	r22, Z
    d288:	71 81       	ldd	r23, Z+1	; 0x01
    d28a:	25 c0       	rjmp	.+74     	; 0xd2d6 <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d28c:	cb 01       	movw	r24, r22
    d28e:	82 1b       	sub	r24, r18
    d290:	93 0b       	sbc	r25, r19
    d292:	81 70       	andi	r24, 0x01	; 1
    d294:	99 27       	eor	r25, r25
    d296:	68 1b       	sub	r22, r24
    d298:	79 0b       	sbc	r23, r25
    d29a:	1d c0       	rjmp	.+58     	; 0xd2d6 <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d29c:	60 51       	subi	r22, 0x10	; 16
    d29e:	71 09       	sbc	r23, r1
    d2a0:	1a c0       	rjmp	.+52     	; 0xd2d6 <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d2a2:	60 52       	subi	r22, 0x20	; 32
    d2a4:	71 09       	sbc	r23, r1
    d2a6:	17 c0       	rjmp	.+46     	; 0xd2d6 <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d2a8:	60 53       	subi	r22, 0x30	; 48
    d2aa:	71 09       	sbc	r23, r1
    d2ac:	14 c0       	rjmp	.+40     	; 0xd2d6 <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d2ae:	6a 51       	subi	r22, 0x1A	; 26
    d2b0:	71 09       	sbc	r23, r1
    d2b2:	11 c0       	rjmp	.+34     	; 0xd2d6 <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d2b4:	68 5f       	subi	r22, 0xF8	; 248
    d2b6:	7f 4f       	sbci	r23, 0xFF	; 255
    d2b8:	0e c0       	rjmp	.+28     	; 0xd2d6 <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d2ba:	60 55       	subi	r22, 0x50	; 80
    d2bc:	71 09       	sbc	r23, r1
    d2be:	0b c0       	rjmp	.+22     	; 0xd2d6 <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d2c0:	60 56       	subi	r22, 0x60	; 96
    d2c2:	7c 41       	sbci	r23, 0x1C	; 28
    d2c4:	08 c0       	rjmp	.+16     	; 0xd2d6 <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d2c6:	ef 2b       	or	r30, r31
    d2c8:	09 f0       	breq	.+2      	; 0xd2cc <ff_wtoupper+0xb4>
    d2ca:	b6 cf       	rjmp	.-148    	; 0xd238 <ff_wtoupper+0x20>
    d2cc:	88 0f       	add	r24, r24
    d2ce:	99 1f       	adc	r25, r25
    d2d0:	a8 0f       	add	r26, r24
    d2d2:	b9 1f       	adc	r27, r25
    d2d4:	b1 cf       	rjmp	.-158    	; 0xd238 <ff_wtoupper+0x20>
		}
		uni = uc;
    d2d6:	80 e0       	ldi	r24, 0x00	; 0
    d2d8:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d2da:	08 95       	ret

0000d2dc <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d2dc:	81 11       	cpse	r24, r1
    d2de:	02 c0       	rjmp	.+4      	; 0xd2e4 <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d2e0:	a1 c1       	rjmp	.+834    	; 0xd624 <mmc_disk_status>
    d2e2:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d2e4:	81 e0       	ldi	r24, 0x01	; 1
}
    d2e6:	08 95       	ret

0000d2e8 <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d2e8:	81 11       	cpse	r24, r1
    d2ea:	02 c0       	rjmp	.+4      	; 0xd2f0 <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d2ec:	f6 c0       	rjmp	.+492    	; 0xd4da <mmc_disk_initialize>
    d2ee:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d2f0:	81 e0       	ldi	r24, 0x01	; 1
}
    d2f2:	08 95       	ret

0000d2f4 <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d2f4:	0f 93       	push	r16
    d2f6:	1f 93       	push	r17
    d2f8:	fb 01       	movw	r30, r22
    switch (pdrv)
    d2fa:	81 11       	cpse	r24, r1
    d2fc:	06 c0       	rjmp	.+12     	; 0xd30a <disk_read+0x16>
    d2fe:	ba 01       	movw	r22, r20
    d300:	a9 01       	movw	r20, r18
    d302:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d304:	98 01       	movw	r18, r16
    d306:	91 d1       	rcall	.+802    	; 0xd62a <mmc_disk_read>
    d308:	02 c0       	rjmp	.+4      	; 0xd30e <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d30a:	84 e0       	ldi	r24, 0x04	; 4
    d30c:	90 e0       	ldi	r25, 0x00	; 0
}
    d30e:	1f 91       	pop	r17
    d310:	0f 91       	pop	r16
    d312:	08 95       	ret

0000d314 <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d314:	0f 93       	push	r16
    d316:	1f 93       	push	r17
    d318:	fb 01       	movw	r30, r22
    switch (pdrv)
    d31a:	81 11       	cpse	r24, r1
    d31c:	06 c0       	rjmp	.+12     	; 0xd32a <disk_write+0x16>
    d31e:	ba 01       	movw	r22, r20
    d320:	a9 01       	movw	r20, r18
    d322:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d324:	98 01       	movw	r18, r16
    d326:	e2 d1       	rcall	.+964    	; 0xd6ec <mmc_disk_write>
    d328:	02 c0       	rjmp	.+4      	; 0xd32e <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d32a:	84 e0       	ldi	r24, 0x04	; 4
    d32c:	90 e0       	ldi	r25, 0x00	; 0
}
    d32e:	1f 91       	pop	r17
    d330:	0f 91       	pop	r16
    d332:	08 95       	ret

0000d334 <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d334:	96 2f       	mov	r25, r22
    switch (pdrv)
    d336:	81 11       	cpse	r24, r1
    d338:	04 c0       	rjmp	.+8      	; 0xd342 <disk_ioctl+0xe>
    d33a:	ba 01       	movw	r22, r20
    d33c:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d33e:	4a c2       	rjmp	.+1172   	; 0xd7d4 <mmc_disk_ioctl>
    d340:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d342:	84 e0       	ldi	r24, 0x04	; 4
    d344:	90 e0       	ldi	r25, 0x00	; 0
}
    d346:	08 95       	ret

0000d348 <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d348:	f9 c4       	rjmp	.+2546   	; 0xdd3c <mmc_spi_TXRX>
    return dat;
}
    d34a:	08 95       	ret

0000d34c <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d34c:	ce d4       	rcall	.+2460   	; 0xdcea <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d34e:	8f ef       	ldi	r24, 0xFF	; 255
    d350:	fb df       	rcall	.-10     	; 0xd348 <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d352:	8f ef       	ldi	r24, 0xFF	; 255
    d354:	f9 cf       	rjmp	.-14     	; 0xd348 <xchg_spi>
    d356:	08 95       	ret

0000d358 <rcvr_datablock>:
    d358:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d35a:	1f 93       	push	r17
    d35c:	cf 93       	push	r28
    d35e:	df 93       	push	r29
    d360:	ec 01       	movw	r28, r24
    d362:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d364:	88 ee       	ldi	r24, 0xE8	; 232
    d366:	93 e0       	ldi	r25, 0x03	; 3
    d368:	ec d4       	rcall	.+2520   	; 0xdd42 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d36a:	8f ef       	ldi	r24, 0xFF	; 255
    d36c:	e7 d4       	rcall	.+2510   	; 0xdd3c <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d36e:	8f 3f       	cpi	r24, 0xFF	; 255
    d370:	31 f4       	brne	.+12     	; 0xd37e <rcvr_datablock+0x26>
    d372:	ee d4       	rcall	.+2524   	; 0xdd50 <mmc_test_timeout>
    d374:	89 2b       	or	r24, r25
    d376:	c9 f3       	breq	.-14     	; 0xd36a <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d378:	80 e0       	ldi	r24, 0x00	; 0
    d37a:	90 e0       	ldi	r25, 0x00	; 0
    d37c:	0b c0       	rjmp	.+22     	; 0xd394 <rcvr_datablock+0x3c>
    d37e:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d380:	d9 f7       	brne	.-10     	; 0xd378 <rcvr_datablock+0x20>
    d382:	b8 01       	movw	r22, r16
    d384:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d386:	d7 d4       	rcall	.+2478   	; 0xdd36 <mmc_spi_RX_buffer>
    d388:	8f ef       	ldi	r24, 0xFF	; 255
    d38a:	de df       	rcall	.-68     	; 0xd348 <xchg_spi>
    xchg_spi(0xFF);
    d38c:	8f ef       	ldi	r24, 0xFF	; 255
    d38e:	dc df       	rcall	.-72     	; 0xd348 <xchg_spi>
    d390:	81 e0       	ldi	r24, 0x01	; 1
    d392:	90 e0       	ldi	r25, 0x00	; 0
    d394:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d396:	cf 91       	pop	r28
    d398:	1f 91       	pop	r17
    d39a:	0f 91       	pop	r16
    d39c:	08 95       	ret

0000d39e <wait_ready>:
    d39e:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d3a0:	d0 d4       	rcall	.+2464   	; 0xdd42 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d3a2:	8f ef       	ldi	r24, 0xFF	; 255
    d3a4:	cb d4       	rcall	.+2454   	; 0xdd3c <mmc_spi_TXRX>
    d3a6:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d3a8:	8f 3f       	cpi	r24, 0xFF	; 255
    d3aa:	19 f0       	breq	.+6      	; 0xd3b2 <wait_ready+0x14>
    d3ac:	d1 d4       	rcall	.+2466   	; 0xdd50 <mmc_test_timeout>
    d3ae:	89 2b       	or	r24, r25
    d3b0:	c1 f3       	breq	.-16     	; 0xd3a2 <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d3b2:	81 e0       	ldi	r24, 0x01	; 1
    d3b4:	90 e0       	ldi	r25, 0x00	; 0
    d3b6:	cf 3f       	cpi	r28, 0xFF	; 255
    d3b8:	11 f0       	breq	.+4      	; 0xd3be <wait_ready+0x20>
    d3ba:	80 e0       	ldi	r24, 0x00	; 0
    d3bc:	90 e0       	ldi	r25, 0x00	; 0
}
    d3be:	cf 91       	pop	r28
    d3c0:	08 95       	ret

0000d3c2 <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d3c2:	cf 93       	push	r28
    d3c4:	df 93       	push	r29
    d3c6:	00 d0       	rcall	.+0      	; 0xd3c8 <select+0x6>
    d3c8:	1f 92       	push	r1
    CS_LOW();
    d3ca:	82 d4       	rcall	.+2308   	; 0xdcd0 <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d3cc:	8f ef       	ldi	r24, 0xFF	; 255
    d3ce:	bc df       	rcall	.-136    	; 0xd348 <xchg_spi>

    if (wait_ready(1000))
    d3d0:	88 ee       	ldi	r24, 0xE8	; 232
    d3d2:	93 e0       	ldi	r25, 0x03	; 3
    d3d4:	e4 df       	rcall	.-56     	; 0xd39e <wait_ready>
    d3d6:	ec 01       	movw	r28, r24
    d3d8:	89 2b       	or	r24, r25
    d3da:	61 f4       	brne	.+24     	; 0xd3f4 <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d3dc:	89 e6       	ldi	r24, 0x69	; 105
    d3de:	97 e0       	ldi	r25, 0x07	; 7
    d3e0:	a0 e0       	ldi	r26, 0x00	; 0
    d3e2:	ed b7       	in	r30, 0x3d	; 61
    d3e4:	fe b7       	in	r31, 0x3e	; 62
    d3e6:	81 83       	std	Z+1, r24	; 0x01
    d3e8:	92 83       	std	Z+2, r25	; 0x02
    d3ea:	a3 83       	std	Z+3, r26	; 0x03
    d3ec:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    deselect();
    d3f0:	ad df       	rcall	.-166    	; 0xd34c <deselect>
    d3f2:	02 c0       	rjmp	.+4      	; 0xd3f8 <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d3f4:	c1 e0       	ldi	r28, 0x01	; 1
    d3f6:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d3f8:	ce 01       	movw	r24, r28
    d3fa:	cd b7       	in	r28, 0x3d	; 61
    d3fc:	de b7       	in	r29, 0x3e	; 62
    d3fe:	23 96       	adiw	r28, 0x03	; 3
    d400:	e2 e0       	ldi	r30, 0x02	; 2
    d402:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

0000d406 <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d406:	ff 92       	push	r15
    d408:	0f 93       	push	r16
    d40a:	1f 93       	push	r17
    d40c:	cf 93       	push	r28
    d40e:	df 93       	push	r29
    d410:	c8 2f       	mov	r28, r24
    d412:	d4 2f       	mov	r29, r20
    d414:	15 2f       	mov	r17, r21
    d416:	06 2f       	mov	r16, r22
    d418:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d41a:	87 ff       	sbrs	r24, 7
    d41c:	08 c0       	rjmp	.+16     	; 0xd42e <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d41e:	40 e0       	ldi	r20, 0x00	; 0
    d420:	50 e0       	ldi	r21, 0x00	; 0
    d422:	ba 01       	movw	r22, r20
    d424:	87 e3       	ldi	r24, 0x37	; 55
    d426:	ef df       	rcall	.-34     	; 0xd406 <send_cmd>
        if (res > 1) return res;
    d428:	82 30       	cpi	r24, 0x02	; 2
    d42a:	58 f5       	brcc	.+86     	; 0xd482 <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d42c:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d42e:	cc 30       	cpi	r28, 0x0C	; 12
    d430:	71 f4       	brne	.+28     	; 0xd44e <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d432:	8c 2f       	mov	r24, r28
    d434:	80 64       	ori	r24, 0x40	; 64
    d436:	88 df       	rcall	.-240    	; 0xd348 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d438:	8f 2d       	mov	r24, r15
    d43a:	86 df       	rcall	.-244    	; 0xd348 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d43c:	80 2f       	mov	r24, r16
    d43e:	84 df       	rcall	.-248    	; 0xd348 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d440:	81 2f       	mov	r24, r17
    d442:	82 df       	rcall	.-252    	; 0xd348 <xchg_spi>
    d444:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d446:	80 df       	rcall	.-256    	; 0xd348 <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d448:	cc 23       	and	r28, r28
    d44a:	c9 f0       	breq	.+50     	; 0xd47e <send_cmd+0x78>
    d44c:	06 c0       	rjmp	.+12     	; 0xd45a <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d44e:	7e df       	rcall	.-260    	; 0xd34c <deselect>
    d450:	b8 df       	rcall	.-144    	; 0xd3c2 <select>
        if (!select()) return 0xFF;
    d452:	89 2b       	or	r24, r25
    d454:	71 f7       	brne	.-36     	; 0xd432 <send_cmd+0x2c>
    d456:	8f ef       	ldi	r24, 0xFF	; 255
    d458:	14 c0       	rjmp	.+40     	; 0xd482 <send_cmd+0x7c>
    d45a:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d45c:	11 f4       	brne	.+4      	; 0xd462 <send_cmd+0x5c>
    d45e:	87 e8       	ldi	r24, 0x87	; 135
    d460:	01 c0       	rjmp	.+2      	; 0xd464 <send_cmd+0x5e>

    xchg_spi(n);
    d462:	81 e0       	ldi	r24, 0x01	; 1
    d464:	71 df       	rcall	.-286    	; 0xd348 <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d466:	cc 30       	cpi	r28, 0x0C	; 12
    d468:	11 f4       	brne	.+4      	; 0xd46e <send_cmd+0x68>
    d46a:	8f ef       	ldi	r24, 0xFF	; 255
    d46c:	6d df       	rcall	.-294    	; 0xd348 <xchg_spi>
    d46e:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d470:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d472:	64 d4       	rcall	.+2248   	; 0xdd3c <mmc_spi_TXRX>
    d474:	87 ff       	sbrs	r24, 7
    d476:	05 c0       	rjmp	.+10     	; 0xd482 <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d478:	c1 50       	subi	r28, 0x01	; 1
    d47a:	d1 f7       	brne	.-12     	; 0xd470 <send_cmd+0x6a>
    d47c:	02 c0       	rjmp	.+4      	; 0xd482 <send_cmd+0x7c>
    d47e:	85 e9       	ldi	r24, 0x95	; 149
    d480:	f5 cf       	rjmp	.-22     	; 0xd46c <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d482:	cd b7       	in	r28, 0x3d	; 61
    d484:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d486:	e5 e0       	ldi	r30, 0x05	; 5
    d488:	0c 94 dc e6 	jmp	0x1cdb8	; 0x1cdb8 <__epilogue_restores__+0x1a>

0000d48c <xmit_datablock>:
    d48c:	0f 93       	push	r16
    d48e:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d490:	cf 93       	push	r28
    d492:	8c 01       	movw	r16, r24
    d494:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d496:	88 ee       	ldi	r24, 0xE8	; 232
    d498:	93 e0       	ldi	r25, 0x03	; 3
    d49a:	81 df       	rcall	.-254    	; 0xd39e <wait_ready>
    d49c:	00 97       	sbiw	r24, 0x00	; 0
    d49e:	c9 f0       	breq	.+50     	; 0xd4d2 <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d4a0:	8c 2f       	mov	r24, r28
    d4a2:	52 df       	rcall	.-348    	; 0xd348 <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d4a4:	cd 3f       	cpi	r28, 0xFD	; 253
    d4a6:	99 f0       	breq	.+38     	; 0xd4ce <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d4a8:	60 e0       	ldi	r22, 0x00	; 0
    d4aa:	72 e0       	ldi	r23, 0x02	; 2
    d4ac:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d4ae:	40 d4       	rcall	.+2176   	; 0xdd30 <mmc_spi_TX_buffer>
    d4b0:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d4b2:	4a df       	rcall	.-364    	; 0xd348 <xchg_spi>
    d4b4:	8f ef       	ldi	r24, 0xFF	; 255
    d4b6:	48 df       	rcall	.-368    	; 0xd348 <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d4b8:	8f ef       	ldi	r24, 0xFF	; 255
    d4ba:	40 d4       	rcall	.+2176   	; 0xdd3c <mmc_spi_TXRX>
    d4bc:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d4be:	31 e0       	ldi	r19, 0x01	; 1
    d4c0:	20 e0       	ldi	r18, 0x00	; 0
    d4c2:	85 30       	cpi	r24, 0x05	; 5
    d4c4:	09 f0       	breq	.+2      	; 0xd4c8 <xmit_datablock+0x3c>
    d4c6:	30 e0       	ldi	r19, 0x00	; 0
    d4c8:	83 2f       	mov	r24, r19
    d4ca:	92 2f       	mov	r25, r18
    d4cc:	02 c0       	rjmp	.+4      	; 0xd4d2 <xmit_datablock+0x46>
    d4ce:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d4d0:	90 e0       	ldi	r25, 0x00	; 0
    d4d2:	cf 91       	pop	r28
}
    d4d4:	1f 91       	pop	r17
    d4d6:	0f 91       	pop	r16
    d4d8:	08 95       	ret

0000d4da <mmc_disk_initialize>:
    d4da:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d4dc:	b0 e0       	ldi	r27, 0x00	; 0
    d4de:	e3 e7       	ldi	r30, 0x73	; 115
    d4e0:	fa e6       	ldi	r31, 0x6A	; 106
    d4e2:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d4e6:	59 d4       	rcall	.+2226   	; 0xdd9a <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d4e8:	64 e6       	ldi	r22, 0x64	; 100
    d4ea:	70 e0       	ldi	r23, 0x00	; 0
    d4ec:	80 e0       	ldi	r24, 0x00	; 0
    d4ee:	90 e0       	ldi	r25, 0x00	; 0
    d4f0:	0e 94 3a 28 	call	0x5074	; 0x5074 <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d4f4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d4f8:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d4fa:	8e c0       	rjmp	.+284    	; 0xd618 <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d4fc:	4d d4       	rcall	.+2202   	; 0xdd98 <mmc_power_on>
    d4fe:	f9 d3       	rcall	.+2034   	; 0xdcf2 <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d500:	1a e0       	ldi	r17, 0x0A	; 10
    d502:	8f ef       	ldi	r24, 0xFF	; 255
    d504:	21 df       	rcall	.-446    	; 0xd348 <xchg_spi>
    d506:	11 50       	subi	r17, 0x01	; 1
    d508:	e1 f7       	brne	.-8      	; 0xd502 <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d50a:	40 e0       	ldi	r20, 0x00	; 0
    d50c:	50 e0       	ldi	r21, 0x00	; 0
    d50e:	ba 01       	movw	r22, r20
    d510:	80 e0       	ldi	r24, 0x00	; 0
    d512:	79 df       	rcall	.-270    	; 0xd406 <send_cmd>
    d514:	81 30       	cpi	r24, 0x01	; 1
    d516:	09 f0       	breq	.+2      	; 0xd51a <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d518:	6f c0       	rjmp	.+222    	; 0xd5f8 <mmc_disk_initialize+0x11e>
    d51a:	80 ed       	ldi	r24, 0xD0	; 208
    d51c:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d51e:	11 d4       	rcall	.+2082   	; 0xdd42 <mmc_set_ms_timeout>
    d520:	4a ea       	ldi	r20, 0xAA	; 170
    d522:	51 e0       	ldi	r21, 0x01	; 1
    d524:	60 e0       	ldi	r22, 0x00	; 0
    d526:	70 e0       	ldi	r23, 0x00	; 0
    d528:	88 e0       	ldi	r24, 0x08	; 8
    d52a:	6d df       	rcall	.-294    	; 0xd406 <send_cmd>
    d52c:	81 30       	cpi	r24, 0x01	; 1
    d52e:	09 f0       	breq	.+2      	; 0xd532 <mmc_disk_initialize+0x58>
    d530:	3d c0       	rjmp	.+122    	; 0xd5ac <mmc_disk_initialize+0xd2>
    d532:	8e 01       	movw	r16, r28
    d534:	0f 5f       	subi	r16, 0xFF	; 255
    d536:	1f 4f       	sbci	r17, 0xFF	; 255
    d538:	6e 01       	movw	r12, r28
    d53a:	85 e0       	ldi	r24, 0x05	; 5
    d53c:	c8 0e       	add	r12, r24
    d53e:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d540:	78 01       	movw	r14, r16
    d542:	8f ef       	ldi	r24, 0xFF	; 255
    d544:	fb d3       	rcall	.+2038   	; 0xdd3c <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d546:	f7 01       	movw	r30, r14
    d548:	81 93       	st	Z+, r24
    d54a:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d54c:	ce 16       	cp	r12, r30
    d54e:	df 06       	cpc	r13, r31
    d550:	c1 f7       	brne	.-16     	; 0xd542 <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d552:	8b 81       	ldd	r24, Y+3	; 0x03
    d554:	81 30       	cpi	r24, 0x01	; 1
    d556:	09 f0       	breq	.+2      	; 0xd55a <mmc_disk_initialize+0x80>
    d558:	4f c0       	rjmp	.+158    	; 0xd5f8 <mmc_disk_initialize+0x11e>
    d55a:	8c 81       	ldd	r24, Y+4	; 0x04
    d55c:	8a 3a       	cpi	r24, 0xAA	; 170
    d55e:	09 f0       	breq	.+2      	; 0xd562 <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d560:	4b c0       	rjmp	.+150    	; 0xd5f8 <mmc_disk_initialize+0x11e>
    d562:	f6 d3       	rcall	.+2028   	; 0xdd50 <mmc_test_timeout>
    d564:	89 2b       	or	r24, r25
    d566:	29 f0       	breq	.+10     	; 0xd572 <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d568:	f3 d3       	rcall	.+2022   	; 0xdd50 <mmc_test_timeout>
    d56a:	89 2b       	or	r24, r25
    d56c:	09 f0       	breq	.+2      	; 0xd570 <mmc_disk_initialize+0x96>
    d56e:	44 c0       	rjmp	.+136    	; 0xd5f8 <mmc_disk_initialize+0x11e>
    d570:	09 c0       	rjmp	.+18     	; 0xd584 <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d572:	40 e0       	ldi	r20, 0x00	; 0
    d574:	50 e0       	ldi	r21, 0x00	; 0
    d576:	60 e0       	ldi	r22, 0x00	; 0
    d578:	70 e4       	ldi	r23, 0x40	; 64
    d57a:	89 ea       	ldi	r24, 0xA9	; 169
    d57c:	44 df       	rcall	.-376    	; 0xd406 <send_cmd>
    d57e:	81 11       	cpse	r24, r1
    d580:	f0 cf       	rjmp	.-32     	; 0xd562 <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d582:	f2 cf       	rjmp	.-28     	; 0xd568 <mmc_disk_initialize+0x8e>
    d584:	40 e0       	ldi	r20, 0x00	; 0
    d586:	50 e0       	ldi	r21, 0x00	; 0
    d588:	ba 01       	movw	r22, r20
    d58a:	8a e3       	ldi	r24, 0x3A	; 58
    d58c:	3c df       	rcall	.-392    	; 0xd406 <send_cmd>
    d58e:	81 11       	cpse	r24, r1
    d590:	33 c0       	rjmp	.+102    	; 0xd5f8 <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d592:	8f ef       	ldi	r24, 0xFF	; 255
    d594:	d3 d3       	rcall	.+1958   	; 0xdd3c <mmc_spi_TXRX>
    d596:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d598:	81 93       	st	Z+, r24
    d59a:	8f 01       	movw	r16, r30
    d59c:	ce 16       	cp	r12, r30
    d59e:	df 06       	cpc	r13, r31
    d5a0:	c1 f7       	brne	.-16     	; 0xd592 <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d5a2:	89 81       	ldd	r24, Y+1	; 0x01
    d5a4:	86 fd       	sbrc	r24, 6
    d5a6:	2a c0       	rjmp	.+84     	; 0xd5fc <mmc_disk_initialize+0x122>
    d5a8:	14 e0       	ldi	r17, 0x04	; 4
    d5aa:	29 c0       	rjmp	.+82     	; 0xd5fe <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d5ac:	80 ed       	ldi	r24, 0xD0	; 208
    d5ae:	97 e0       	ldi	r25, 0x07	; 7
    d5b0:	c8 d3       	rcall	.+1936   	; 0xdd42 <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d5b2:	40 e0       	ldi	r20, 0x00	; 0
    d5b4:	50 e0       	ldi	r21, 0x00	; 0
    d5b6:	ba 01       	movw	r22, r20
    d5b8:	89 ea       	ldi	r24, 0xA9	; 169
    d5ba:	25 df       	rcall	.-438    	; 0xd406 <send_cmd>
    d5bc:	82 30       	cpi	r24, 0x02	; 2
    d5be:	18 f0       	brcs	.+6      	; 0xd5c6 <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d5c0:	11 e0       	ldi	r17, 0x01	; 1
    d5c2:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d5c4:	02 c0       	rjmp	.+4      	; 0xd5ca <mmc_disk_initialize+0xf0>
    d5c6:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d5c8:	09 ea       	ldi	r16, 0xA9	; 169
    d5ca:	c2 d3       	rcall	.+1924   	; 0xdd50 <mmc_test_timeout>
    d5cc:	89 2b       	or	r24, r25
    d5ce:	21 f0       	breq	.+8      	; 0xd5d8 <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d5d0:	bf d3       	rcall	.+1918   	; 0xdd50 <mmc_test_timeout>
    d5d2:	89 2b       	or	r24, r25
    d5d4:	89 f4       	brne	.+34     	; 0xd5f8 <mmc_disk_initialize+0x11e>
    d5d6:	08 c0       	rjmp	.+16     	; 0xd5e8 <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d5d8:	40 e0       	ldi	r20, 0x00	; 0
    d5da:	50 e0       	ldi	r21, 0x00	; 0
    d5dc:	ba 01       	movw	r22, r20
    d5de:	80 2f       	mov	r24, r16
    d5e0:	12 df       	rcall	.-476    	; 0xd406 <send_cmd>
    d5e2:	81 11       	cpse	r24, r1
    d5e4:	f2 cf       	rjmp	.-28     	; 0xd5ca <mmc_disk_initialize+0xf0>
    d5e6:	f4 cf       	rjmp	.-24     	; 0xd5d0 <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d5e8:	40 e0       	ldi	r20, 0x00	; 0
    d5ea:	52 e0       	ldi	r21, 0x02	; 2
    d5ec:	60 e0       	ldi	r22, 0x00	; 0
    d5ee:	70 e0       	ldi	r23, 0x00	; 0
    d5f0:	80 e1       	ldi	r24, 0x10	; 16
    d5f2:	09 df       	rcall	.-494    	; 0xd406 <send_cmd>
    d5f4:	88 23       	and	r24, r24
                ty = 0;
    d5f6:	19 f0       	breq	.+6      	; 0xd5fe <mmc_disk_initialize+0x124>
    d5f8:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d5fa:	01 c0       	rjmp	.+2      	; 0xd5fe <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d5fc:	1c e0       	ldi	r17, 0x0C	; 12
    d5fe:	10 93 2b 18 	sts	0x182B, r17	; 0x80182b <CardType>
    deselect();
    d602:	a4 de       	rcall	.-696    	; 0xd34c <deselect>

    if (ty)                                       /* Initialization succeded */
    d604:	11 23       	and	r17, r17
    d606:	39 f0       	breq	.+14     	; 0xd616 <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d608:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d60c:	8e 7f       	andi	r24, 0xFE	; 254
    d60e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d612:	81 d3       	rcall	.+1794   	; 0xdd16 <mmc_fast>
    d614:	01 c0       	rjmp	.+2      	; 0xd618 <mmc_disk_initialize+0x13e>
    d616:	c1 d3       	rcall	.+1922   	; 0xdd9a <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d618:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d61c:	24 96       	adiw	r28, 0x04	; 4
    d61e:	e8 e0       	ldi	r30, 0x08	; 8
}
    d620:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0000d624 <mmc_disk_status>:
    d624:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d628:	08 95       	ret

0000d62a <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d62a:	8f 92       	push	r8
    d62c:	9f 92       	push	r9
    d62e:	af 92       	push	r10
    d630:	bf 92       	push	r11
    d632:	ef 92       	push	r14
    d634:	ff 92       	push	r15
    d636:	1f 93       	push	r17
    d638:	cf 93       	push	r28
    d63a:	df 93       	push	r29
    d63c:	7c 01       	movw	r14, r24
    d63e:	4a 01       	movw	r8, r20
    d640:	5b 01       	movw	r10, r22
    d642:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d644:	20 97       	sbiw	r28, 0x00	; 0
    d646:	19 f4       	brne	.+6      	; 0xd64e <mmc_disk_read+0x24>
    {
        deselect();
    d648:	81 de       	rcall	.-766    	; 0xd34c <deselect>
        return RES_PARERR;
    d64a:	84 e0       	ldi	r24, 0x04	; 4
    d64c:	0d c0       	rjmp	.+26     	; 0xd668 <mmc_disk_read+0x3e>
    }

	if( Stat )
    d64e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d652:	88 23       	and	r24, r24
    d654:	19 f0       	breq	.+6      	; 0xd65c <mmc_disk_read+0x32>
		set_error(1);
    d656:	81 e0       	ldi	r24, 0x01	; 1
    d658:	0e 94 da 26 	call	0x4db4	; 0x4db4 <set_error>

    if (Stat & STA_NOINIT)
    d65c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d660:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d662:	04 c0       	rjmp	.+8      	; 0xd66c <mmc_disk_read+0x42>
    d664:	73 de       	rcall	.-794    	; 0xd34c <deselect>
        return RES_NOTRDY;
    d666:	83 e0       	ldi	r24, 0x03	; 3
    d668:	90 e0       	ldi	r25, 0x00	; 0
    d66a:	36 c0       	rjmp	.+108    	; 0xd6d8 <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d66c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d670:	81 fd       	sbrc	r24, 1
    d672:	f8 cf       	rjmp	.-16     	; 0xd664 <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d674:	46 9a       	sbi	0x08, 6	; 8
    d676:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d678:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
    d67c:	83 fd       	sbrc	r24, 3
    d67e:	07 c0       	rjmp	.+14     	; 0xd68e <mmc_disk_read+0x64>
    d680:	89 e0       	ldi	r24, 0x09	; 9
    d682:	88 0c       	add	r8, r8
    d684:	99 1c       	adc	r9, r9
    d686:	aa 1c       	adc	r10, r10
    d688:	bb 1c       	adc	r11, r11
    d68a:	8a 95       	dec	r24
    d68c:	d1 f7       	brne	.-12     	; 0xd682 <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d68e:	c2 30       	cpi	r28, 0x02	; 2
    d690:	d1 05       	cpc	r29, r1
    d692:	10 f4       	brcc	.+4      	; 0xd698 <mmc_disk_read+0x6e>
    d694:	11 e1       	ldi	r17, 0x11	; 17
    d696:	01 c0       	rjmp	.+2      	; 0xd69a <mmc_disk_read+0x70>
    d698:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d69a:	b5 01       	movw	r22, r10
    d69c:	a4 01       	movw	r20, r8
    d69e:	81 2f       	mov	r24, r17
    d6a0:	b2 de       	rcall	.-668    	; 0xd406 <send_cmd>
    d6a2:	81 11       	cpse	r24, r1
    d6a4:	11 c0       	rjmp	.+34     	; 0xd6c8 <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d6a6:	60 e0       	ldi	r22, 0x00	; 0
    d6a8:	72 e0       	ldi	r23, 0x02	; 2
    d6aa:	c7 01       	movw	r24, r14
    d6ac:	55 de       	rcall	.-854    	; 0xd358 <rcvr_datablock>
    d6ae:	89 2b       	or	r24, r25
    d6b0:	21 f0       	breq	.+8      	; 0xd6ba <mmc_disk_read+0x90>
                break;
            buff += 512;
    d6b2:	8e ef       	ldi	r24, 0xFE	; 254
    d6b4:	f8 1a       	sub	r15, r24
        } while (--count);
    d6b6:	21 97       	sbiw	r28, 0x01	; 1
    d6b8:	b1 f7       	brne	.-20     	; 0xd6a6 <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d6ba:	12 31       	cpi	r17, 0x12	; 18
    d6bc:	29 f4       	brne	.+10     	; 0xd6c8 <mmc_disk_read+0x9e>
    d6be:	40 e0       	ldi	r20, 0x00	; 0
    d6c0:	50 e0       	ldi	r21, 0x00	; 0
    d6c2:	ba 01       	movw	r22, r20
    d6c4:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d6c6:	9f de       	rcall	.-706    	; 0xd406 <send_cmd>
    d6c8:	41 de       	rcall	.-894    	; 0xd34c <deselect>
    GPIO_PIN_LOW(LED1);
    d6ca:	46 98       	cbi	0x08, 6	; 8
    d6cc:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d6ce:	81 e0       	ldi	r24, 0x01	; 1
    d6d0:	90 e0       	ldi	r25, 0x00	; 0
    d6d2:	cd 2b       	or	r28, r29
    d6d4:	09 f4       	brne	.+2      	; 0xd6d8 <mmc_disk_read+0xae>
    d6d6:	80 e0       	ldi	r24, 0x00	; 0
}
    d6d8:	df 91       	pop	r29
    d6da:	cf 91       	pop	r28
    d6dc:	1f 91       	pop	r17
    d6de:	ff 90       	pop	r15
    d6e0:	ef 90       	pop	r14
    d6e2:	bf 90       	pop	r11
    d6e4:	af 90       	pop	r10
    d6e6:	9f 90       	pop	r9
    d6e8:	8f 90       	pop	r8
    d6ea:	08 95       	ret

0000d6ec <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d6ec:	a0 e0       	ldi	r26, 0x00	; 0
    d6ee:	b0 e0       	ldi	r27, 0x00	; 0
    d6f0:	ec e7       	ldi	r30, 0x7C	; 124
    d6f2:	fb e6       	ldi	r31, 0x6B	; 107
    d6f4:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    d6f8:	8c 01       	movw	r16, r24
    d6fa:	6a 01       	movw	r12, r20
    d6fc:	7b 01       	movw	r14, r22
    d6fe:	e9 01       	movw	r28, r18
    if (!count)
    d700:	20 97       	sbiw	r28, 0x00	; 0
    d702:	19 f4       	brne	.+6      	; 0xd70a <mmc_disk_write+0x1e>
    {
        deselect();
    d704:	23 de       	rcall	.-954    	; 0xd34c <deselect>
        return RES_PARERR;
    d706:	84 e0       	ldi	r24, 0x04	; 4
    d708:	18 c0       	rjmp	.+48     	; 0xd73a <mmc_disk_write+0x4e>
    }

	if( Stat )
    d70a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d70e:	88 23       	and	r24, r24
    d710:	19 f0       	breq	.+6      	; 0xd718 <mmc_disk_write+0x2c>
		set_error(1);
    d712:	81 e0       	ldi	r24, 0x01	; 1
    d714:	0e 94 da 26 	call	0x4db4	; 0x4db4 <set_error>

    if (Stat & STA_NOINIT)
    d718:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d71c:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d71e:	03 c0       	rjmp	.+6      	; 0xd726 <mmc_disk_write+0x3a>
    d720:	15 de       	rcall	.-982    	; 0xd34c <deselect>
        return RES_NOTRDY;
    d722:	83 e0       	ldi	r24, 0x03	; 3
    d724:	0a c0       	rjmp	.+20     	; 0xd73a <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d726:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d72a:	81 fd       	sbrc	r24, 1
    d72c:	f9 cf       	rjmp	.-14     	; 0xd720 <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d72e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d732:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d734:	04 c0       	rjmp	.+8      	; 0xd73e <mmc_disk_write+0x52>
    d736:	0a de       	rcall	.-1004   	; 0xd34c <deselect>
        return RES_WRPRT;
    d738:	82 e0       	ldi	r24, 0x02	; 2
    d73a:	90 e0       	ldi	r25, 0x00	; 0
    d73c:	46 c0       	rjmp	.+140    	; 0xd7ca <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d73e:	46 9a       	sbi	0x08, 6	; 8
    d740:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d742:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
    d746:	83 fd       	sbrc	r24, 3
    d748:	07 c0       	rjmp	.+14     	; 0xd758 <mmc_disk_write+0x6c>
    d74a:	99 e0       	ldi	r25, 0x09	; 9
    d74c:	cc 0c       	add	r12, r12
    d74e:	dd 1c       	adc	r13, r13
    d750:	ee 1c       	adc	r14, r14
    d752:	ff 1c       	adc	r15, r15
    d754:	9a 95       	dec	r25
    d756:	d1 f7       	brne	.-12     	; 0xd74c <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d758:	c1 30       	cpi	r28, 0x01	; 1
    d75a:	d1 05       	cpc	r29, r1
    d75c:	89 f4       	brne	.+34     	; 0xd780 <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d75e:	b7 01       	movw	r22, r14
    d760:	a6 01       	movw	r20, r12
    d762:	88 e1       	ldi	r24, 0x18	; 24
    d764:	50 de       	rcall	.-864    	; 0xd406 <send_cmd>
    d766:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d768:	26 c0       	rjmp	.+76     	; 0xd7b6 <mmc_disk_write+0xca>
    d76a:	6e ef       	ldi	r22, 0xFE	; 254
    d76c:	c8 01       	movw	r24, r16
    d76e:	8e de       	rcall	.-740    	; 0xd48c <xmit_datablock>
    d770:	31 e0       	ldi	r19, 0x01	; 1
    d772:	20 e0       	ldi	r18, 0x00	; 0
    d774:	89 2b       	or	r24, r25
    d776:	09 f0       	breq	.+2      	; 0xd77a <mmc_disk_write+0x8e>
    d778:	30 e0       	ldi	r19, 0x00	; 0
    d77a:	c3 2f       	mov	r28, r19
    d77c:	d2 2f       	mov	r29, r18
    d77e:	1d c0       	rjmp	.+58     	; 0xd7ba <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d780:	86 70       	andi	r24, 0x06	; 6
    d782:	29 f0       	breq	.+10     	; 0xd78e <mmc_disk_write+0xa2>
    d784:	ae 01       	movw	r20, r28
    d786:	60 e0       	ldi	r22, 0x00	; 0
    d788:	70 e0       	ldi	r23, 0x00	; 0
    d78a:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d78c:	3c de       	rcall	.-904    	; 0xd406 <send_cmd>
    d78e:	b7 01       	movw	r22, r14
    d790:	a6 01       	movw	r20, r12
    d792:	89 e1       	ldi	r24, 0x19	; 25
    d794:	38 de       	rcall	.-912    	; 0xd406 <send_cmd>
    d796:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d798:	10 c0       	rjmp	.+32     	; 0xd7ba <mmc_disk_write+0xce>
    d79a:	6c ef       	ldi	r22, 0xFC	; 252
    d79c:	c8 01       	movw	r24, r16
    d79e:	76 de       	rcall	.-788    	; 0xd48c <xmit_datablock>
    d7a0:	89 2b       	or	r24, r25
                buff += 512;
    d7a2:	19 f0       	breq	.+6      	; 0xd7aa <mmc_disk_write+0xbe>
            } while (--count);
    d7a4:	1e 5f       	subi	r17, 0xFE	; 254
    d7a6:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d7a8:	c1 f7       	brne	.-16     	; 0xd79a <mmc_disk_write+0xae>
    d7aa:	6d ef       	ldi	r22, 0xFD	; 253
    d7ac:	80 e0       	ldi	r24, 0x00	; 0
    d7ae:	90 e0       	ldi	r25, 0x00	; 0
    d7b0:	6d de       	rcall	.-806    	; 0xd48c <xmit_datablock>
    d7b2:	89 2b       	or	r24, r25
                count = 1;
    d7b4:	11 f4       	brne	.+4      	; 0xd7ba <mmc_disk_write+0xce>
    d7b6:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d7b8:	d0 e0       	ldi	r29, 0x00	; 0
    d7ba:	c8 dd       	rcall	.-1136   	; 0xd34c <deselect>
    GPIO_PIN_LOW(LED1);
    d7bc:	46 98       	cbi	0x08, 6	; 8
    d7be:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d7c0:	81 e0       	ldi	r24, 0x01	; 1
    d7c2:	90 e0       	ldi	r25, 0x00	; 0
    d7c4:	cd 2b       	or	r28, r29
    d7c6:	09 f4       	brne	.+2      	; 0xd7ca <mmc_disk_write+0xde>
    d7c8:	80 e0       	ldi	r24, 0x00	; 0
}
    d7ca:	cd b7       	in	r28, 0x3d	; 61
    d7cc:	de b7       	in	r29, 0x3e	; 62
    d7ce:	e8 e0       	ldi	r30, 0x08	; 8
    d7d0:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0000d7d4 <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d7d4:	a0 e1       	ldi	r26, 0x10	; 16
    d7d6:	b0 e0       	ldi	r27, 0x00	; 0
    d7d8:	e0 ef       	ldi	r30, 0xF0	; 240
    d7da:	fb e6       	ldi	r31, 0x6B	; 107
    d7dc:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d7e0:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d7e4:	90 fd       	sbrc	r25, 0
    d7e6:	31 c2       	rjmp	.+1122   	; 0xdc4a <mmc_disk_ioctl+0x476>
    d7e8:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d7ea:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d7ee:	91 ff       	sbrs	r25, 1
    d7f0:	02 c0       	rjmp	.+4      	; 0xd7f6 <mmc_disk_ioctl+0x22>
    {
        deselect();
    d7f2:	ac dd       	rcall	.-1192   	; 0xd34c <deselect>
    d7f4:	2a c2       	rjmp	.+1108   	; 0xdc4a <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d7f6:	83 33       	cpi	r24, 0x33	; 51
    d7f8:	09 f4       	brne	.+2      	; 0xd7fc <mmc_disk_ioctl+0x28>
    d7fa:	01 c1       	rjmp	.+514    	; 0xd9fe <mmc_disk_ioctl+0x22a>
    d7fc:	a0 f4       	brcc	.+40     	; 0xd826 <mmc_disk_ioctl+0x52>
    d7fe:	83 30       	cpi	r24, 0x03	; 3
    d800:	09 f4       	brne	.+2      	; 0xd804 <mmc_disk_ioctl+0x30>
    d802:	85 c0       	rjmp	.+266    	; 0xd90e <mmc_disk_ioctl+0x13a>
    d804:	28 f4       	brcc	.+10     	; 0xd810 <mmc_disk_ioctl+0x3c>
    d806:	88 23       	and	r24, r24
    d808:	11 f1       	breq	.+68     	; 0xd84e <mmc_disk_ioctl+0x7a>
    d80a:	81 30       	cpi	r24, 0x01	; 1
    d80c:	11 f1       	breq	.+68     	; 0xd852 <mmc_disk_ioctl+0x7e>
    d80e:	1f c2       	rjmp	.+1086   	; 0xdc4e <mmc_disk_ioctl+0x47a>
    d810:	87 30       	cpi	r24, 0x07	; 7
    d812:	09 f4       	brne	.+2      	; 0xd816 <mmc_disk_ioctl+0x42>
    d814:	2a c1       	rjmp	.+596    	; 0xda6a <mmc_disk_ioctl+0x296>
    d816:	82 33       	cpi	r24, 0x32	; 50
    d818:	09 f0       	breq	.+2      	; 0xd81c <mmc_disk_ioctl+0x48>
    d81a:	19 c2       	rjmp	.+1074   	; 0xdc4e <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d81c:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
    d820:	fb 01       	movw	r30, r22
    d822:	80 83       	st	Z, r24
    d824:	28 c1       	rjmp	.+592    	; 0xda76 <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d826:	86 33       	cpi	r24, 0x36	; 54
    d828:	09 f4       	brne	.+2      	; 0xd82c <mmc_disk_ioctl+0x58>
    d82a:	0c c1       	rjmp	.+536    	; 0xda44 <mmc_disk_ioctl+0x270>
    d82c:	38 f4       	brcc	.+14     	; 0xd83c <mmc_disk_ioctl+0x68>
    d82e:	84 33       	cpi	r24, 0x34	; 52
    d830:	09 f4       	brne	.+2      	; 0xd834 <mmc_disk_ioctl+0x60>
    d832:	ea c0       	rjmp	.+468    	; 0xda08 <mmc_disk_ioctl+0x234>
    d834:	85 33       	cpi	r24, 0x35	; 53
    d836:	09 f4       	brne	.+2      	; 0xd83a <mmc_disk_ioctl+0x66>
    d838:	f1 c0       	rjmp	.+482    	; 0xda1c <mmc_disk_ioctl+0x248>
    d83a:	09 c2       	rjmp	.+1042   	; 0xdc4e <mmc_disk_ioctl+0x47a>
    d83c:	88 33       	cpi	r24, 0x38	; 56
    d83e:	09 f4       	brne	.+2      	; 0xd842 <mmc_disk_ioctl+0x6e>
    d840:	74 c1       	rjmp	.+744    	; 0xdb2a <mmc_disk_ioctl+0x356>
    d842:	08 f4       	brcc	.+2      	; 0xd846 <mmc_disk_ioctl+0x72>
    d844:	1a c1       	rjmp	.+564    	; 0xda7a <mmc_disk_ioctl+0x2a6>
    d846:	89 33       	cpi	r24, 0x39	; 57
    d848:	09 f4       	brne	.+2      	; 0xd84c <mmc_disk_ioctl+0x78>
    d84a:	bc c1       	rjmp	.+888    	; 0xdbc4 <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d84c:	00 c2       	rjmp	.+1024   	; 0xdc4e <mmc_disk_ioctl+0x47a>
    d84e:	b9 dd       	rcall	.-1166   	; 0xd3c2 <select>
    d850:	06 c1       	rjmp	.+524    	; 0xda5e <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d852:	40 e0       	ldi	r20, 0x00	; 0
    d854:	50 e0       	ldi	r21, 0x00	; 0
    d856:	ba 01       	movw	r22, r20
    d858:	89 e0       	ldi	r24, 0x09	; 9
    d85a:	d5 dd       	rcall	.-1110   	; 0xd406 <send_cmd>
    d85c:	81 11       	cpse	r24, r1
    d85e:	f1 c1       	rjmp	.+994    	; 0xdc42 <mmc_disk_ioctl+0x46e>
    d860:	60 e1       	ldi	r22, 0x10	; 16
    d862:	70 e0       	ldi	r23, 0x00	; 0
    d864:	ce 01       	movw	r24, r28
    d866:	01 96       	adiw	r24, 0x01	; 1
    d868:	77 dd       	rcall	.-1298   	; 0xd358 <rcvr_datablock>
    d86a:	89 2b       	or	r24, r25
    d86c:	09 f4       	brne	.+2      	; 0xd870 <mmc_disk_ioctl+0x9c>
    d86e:	e9 c1       	rjmp	.+978    	; 0xdc42 <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d870:	99 81       	ldd	r25, Y+1	; 0x01
    d872:	92 95       	swap	r25
    d874:	96 95       	lsr	r25
    d876:	96 95       	lsr	r25
    d878:	93 70       	andi	r25, 0x03	; 3
    d87a:	29 85       	ldd	r18, Y+9	; 0x09
    d87c:	4a 85       	ldd	r20, Y+10	; 0x0a
    d87e:	88 85       	ldd	r24, Y+8	; 0x08
    d880:	91 30       	cpi	r25, 0x01	; 1
    d882:	d9 f4       	brne	.+54     	; 0xd8ba <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d884:	30 e0       	ldi	r19, 0x00	; 0
    d886:	32 2f       	mov	r19, r18
    d888:	22 27       	eor	r18, r18
    d88a:	24 0f       	add	r18, r20
    d88c:	31 1d       	adc	r19, r1
    d88e:	8f 73       	andi	r24, 0x3F	; 63
    d890:	90 e0       	ldi	r25, 0x00	; 0
    d892:	a0 e0       	ldi	r26, 0x00	; 0
    d894:	b0 e0       	ldi	r27, 0x00	; 0
    d896:	dc 01       	movw	r26, r24
    d898:	99 27       	eor	r25, r25
    d89a:	88 27       	eor	r24, r24
    d89c:	01 96       	adiw	r24, 0x01	; 1
    d89e:	a1 1d       	adc	r26, r1
    d8a0:	b1 1d       	adc	r27, r1
    d8a2:	82 0f       	add	r24, r18
    d8a4:	93 1f       	adc	r25, r19
    d8a6:	a1 1d       	adc	r26, r1
    d8a8:	b1 1d       	adc	r27, r1
    d8aa:	fa e0       	ldi	r31, 0x0A	; 10
    d8ac:	88 0f       	add	r24, r24
    d8ae:	99 1f       	adc	r25, r25
    d8b0:	aa 1f       	adc	r26, r26
    d8b2:	bb 1f       	adc	r27, r27
    d8b4:	fa 95       	dec	r31
    d8b6:	d1 f7       	brne	.-12     	; 0xd8ac <mmc_disk_ioctl+0xd8>
    d8b8:	9b c0       	rjmp	.+310    	; 0xd9f0 <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d8ba:	22 95       	swap	r18
    d8bc:	26 95       	lsr	r18
    d8be:	26 95       	lsr	r18
    d8c0:	23 70       	andi	r18, 0x03	; 3
    d8c2:	f4 e0       	ldi	r31, 0x04	; 4
    d8c4:	8f 9f       	mul	r24, r31
    d8c6:	c0 01       	movw	r24, r0
    d8c8:	11 24       	eor	r1, r1
    d8ca:	82 0f       	add	r24, r18
    d8cc:	91 1d       	adc	r25, r1
    d8ce:	01 96       	adiw	r24, 0x01	; 1
    d8d0:	2f 81       	ldd	r18, Y+7	; 0x07
    d8d2:	23 70       	andi	r18, 0x03	; 3
    d8d4:	30 e0       	ldi	r19, 0x00	; 0
    d8d6:	32 2f       	mov	r19, r18
    d8d8:	22 27       	eor	r18, r18
    d8da:	33 0f       	add	r19, r19
    d8dc:	33 0f       	add	r19, r19
    d8de:	82 0f       	add	r24, r18
    d8e0:	93 1f       	adc	r25, r19
    d8e2:	a0 e0       	ldi	r26, 0x00	; 0
    d8e4:	b0 e0       	ldi	r27, 0x00	; 0
    d8e6:	2e 81       	ldd	r18, Y+6	; 0x06
    d8e8:	32 2f       	mov	r19, r18
    d8ea:	3f 70       	andi	r19, 0x0F	; 15
    d8ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    d8ee:	22 1f       	adc	r18, r18
    d8f0:	22 27       	eor	r18, r18
    d8f2:	22 1f       	adc	r18, r18
    d8f4:	23 0f       	add	r18, r19
    d8f6:	43 70       	andi	r20, 0x03	; 3
    d8f8:	44 0f       	add	r20, r20
    d8fa:	42 0f       	add	r20, r18
    d8fc:	47 50       	subi	r20, 0x07	; 7
    d8fe:	04 c0       	rjmp	.+8      	; 0xd908 <mmc_disk_ioctl+0x134>
    d900:	88 0f       	add	r24, r24
    d902:	99 1f       	adc	r25, r25
    d904:	aa 1f       	adc	r26, r26
    d906:	bb 1f       	adc	r27, r27
    d908:	4a 95       	dec	r20
    d90a:	d2 f7       	brpl	.-12     	; 0xd900 <mmc_disk_ioctl+0x12c>
    d90c:	71 c0       	rjmp	.+226    	; 0xd9f0 <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d90e:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d912:	40 e0       	ldi	r20, 0x00	; 0
    d914:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d916:	ba 01       	movw	r22, r20
    d918:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d91a:	24 c0       	rjmp	.+72     	; 0xd964 <mmc_disk_ioctl+0x190>
    d91c:	8d e8       	ldi	r24, 0x8D	; 141
    d91e:	73 dd       	rcall	.-1306   	; 0xd406 <send_cmd>
    d920:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d922:	8f c1       	rjmp	.+798    	; 0xdc42 <mmc_disk_ioctl+0x46e>
    d924:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d926:	10 dd       	rcall	.-1504   	; 0xd348 <xchg_spi>
    d928:	60 e1       	ldi	r22, 0x10	; 16
    d92a:	70 e0       	ldi	r23, 0x00	; 0
    d92c:	ce 01       	movw	r24, r28
    d92e:	01 96       	adiw	r24, 0x01	; 1
    d930:	13 dd       	rcall	.-1498   	; 0xd358 <rcvr_datablock>
    d932:	89 2b       	or	r24, r25
    d934:	09 f4       	brne	.+2      	; 0xd938 <mmc_disk_ioctl+0x164>
    d936:	85 c1       	rjmp	.+778    	; 0xdc42 <mmc_disk_ioctl+0x46e>
    d938:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d93a:	f5 2e       	mov	r15, r21
    d93c:	8f ef       	ldi	r24, 0xFF	; 255
    d93e:	04 dd       	rcall	.-1528   	; 0xd348 <xchg_spi>
    d940:	fa 94       	dec	r15
    d942:	f1 10       	cpse	r15, r1
    d944:	fb cf       	rjmp	.-10     	; 0xd93c <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d946:	2b 85       	ldd	r18, Y+11	; 0x0b
    d948:	22 95       	swap	r18
    d94a:	2f 70       	andi	r18, 0x0F	; 15
    d94c:	80 e1       	ldi	r24, 0x10	; 16
    d94e:	90 e0       	ldi	r25, 0x00	; 0
    d950:	a0 e0       	ldi	r26, 0x00	; 0
    d952:	b0 e0       	ldi	r27, 0x00	; 0
    d954:	04 c0       	rjmp	.+8      	; 0xd95e <mmc_disk_ioctl+0x18a>
    d956:	88 0f       	add	r24, r24
    d958:	99 1f       	adc	r25, r25
    d95a:	aa 1f       	adc	r26, r26
    d95c:	bb 1f       	adc	r27, r27
    d95e:	2a 95       	dec	r18
    d960:	d2 f7       	brpl	.-12     	; 0xd956 <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d962:	46 c0       	rjmp	.+140    	; 0xd9f0 <mmc_disk_ioctl+0x21c>
    d964:	89 e0       	ldi	r24, 0x09	; 9
    d966:	4f dd       	rcall	.-1378   	; 0xd406 <send_cmd>
    d968:	81 11       	cpse	r24, r1
    d96a:	6b c1       	rjmp	.+726    	; 0xdc42 <mmc_disk_ioctl+0x46e>
    d96c:	60 e1       	ldi	r22, 0x10	; 16
    d96e:	70 e0       	ldi	r23, 0x00	; 0
    d970:	ce 01       	movw	r24, r28
    d972:	01 96       	adiw	r24, 0x01	; 1
    d974:	f1 dc       	rcall	.-1566   	; 0xd358 <rcvr_datablock>
    d976:	89 2b       	or	r24, r25
    d978:	09 f4       	brne	.+2      	; 0xd97c <mmc_disk_ioctl+0x1a8>
    d97a:	63 c1       	rjmp	.+710    	; 0xdc42 <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    d97c:	90 91 2b 18 	lds	r25, 0x182B	; 0x80182b <CardType>
    d980:	2b 85       	ldd	r18, Y+11	; 0x0b
    d982:	8c 85       	ldd	r24, Y+12	; 0x0c
    d984:	91 ff       	sbrs	r25, 1
    d986:	16 c0       	rjmp	.+44     	; 0xd9b4 <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    d988:	2f 73       	andi	r18, 0x3F	; 63
    d98a:	88 1f       	adc	r24, r24
    d98c:	88 27       	eor	r24, r24
    d98e:	88 1f       	adc	r24, r24
    d990:	90 e0       	ldi	r25, 0x00	; 0
    d992:	01 96       	adiw	r24, 0x01	; 1
    d994:	82 0f       	add	r24, r18
    d996:	91 1d       	adc	r25, r1
    d998:	82 0f       	add	r24, r18
    d99a:	91 1d       	adc	r25, r1
    d99c:	2e 85       	ldd	r18, Y+14	; 0x0e
    d99e:	22 95       	swap	r18
    d9a0:	26 95       	lsr	r18
    d9a2:	26 95       	lsr	r18
    d9a4:	23 70       	andi	r18, 0x03	; 3
    d9a6:	21 50       	subi	r18, 0x01	; 1
    d9a8:	02 c0       	rjmp	.+4      	; 0xd9ae <mmc_disk_ioctl+0x1da>
    d9aa:	88 0f       	add	r24, r24
    d9ac:	99 1f       	adc	r25, r25
    d9ae:	2a 95       	dec	r18
    d9b0:	e2 f7       	brpl	.-8      	; 0xd9aa <mmc_disk_ioctl+0x1d6>
    d9b2:	1c c0       	rjmp	.+56     	; 0xd9ec <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    d9b4:	38 2f       	mov	r19, r24
    d9b6:	33 70       	andi	r19, 0x03	; 3
    d9b8:	82 95       	swap	r24
    d9ba:	86 95       	lsr	r24
    d9bc:	87 70       	andi	r24, 0x07	; 7
    d9be:	90 e0       	ldi	r25, 0x00	; 0
    d9c0:	f8 e0       	ldi	r31, 0x08	; 8
    d9c2:	3f 9f       	mul	r19, r31
    d9c4:	80 0d       	add	r24, r0
    d9c6:	91 1d       	adc	r25, r1
    d9c8:	11 24       	eor	r1, r1
    d9ca:	01 96       	adiw	r24, 0x01	; 1
    d9cc:	2c 77       	andi	r18, 0x7C	; 124
    d9ce:	30 e0       	ldi	r19, 0x00	; 0
    d9d0:	35 95       	asr	r19
    d9d2:	27 95       	ror	r18
    d9d4:	35 95       	asr	r19
    d9d6:	27 95       	ror	r18
    d9d8:	2f 5f       	subi	r18, 0xFF	; 255
    d9da:	3f 4f       	sbci	r19, 0xFF	; 255
    d9dc:	82 9f       	mul	r24, r18
    d9de:	a0 01       	movw	r20, r0
    d9e0:	83 9f       	mul	r24, r19
    d9e2:	50 0d       	add	r21, r0
    d9e4:	92 9f       	mul	r25, r18
    d9e6:	50 0d       	add	r21, r0
    d9e8:	11 24       	eor	r1, r1
    d9ea:	ca 01       	movw	r24, r20
    d9ec:	a0 e0       	ldi	r26, 0x00	; 0
    d9ee:	b0 e0       	ldi	r27, 0x00	; 0
    d9f0:	f8 01       	movw	r30, r16
    d9f2:	80 83       	st	Z, r24
    d9f4:	91 83       	std	Z+1, r25	; 0x01
    d9f6:	a2 83       	std	Z+2, r26	; 0x02
    d9f8:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    d9fa:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    d9fc:	23 c1       	rjmp	.+582    	; 0xdc44 <mmc_disk_ioctl+0x470>
    d9fe:	40 e0       	ldi	r20, 0x00	; 0
    da00:	50 e0       	ldi	r21, 0x00	; 0
    da02:	ba 01       	movw	r22, r20
    da04:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    da06:	04 c0       	rjmp	.+8      	; 0xda10 <mmc_disk_ioctl+0x23c>
    da08:	40 e0       	ldi	r20, 0x00	; 0
    da0a:	50 e0       	ldi	r21, 0x00	; 0
    da0c:	ba 01       	movw	r22, r20
    da0e:	8a e0       	ldi	r24, 0x0A	; 10
    da10:	fa dc       	rcall	.-1548   	; 0xd406 <send_cmd>
    da12:	81 11       	cpse	r24, r1
    da14:	16 c1       	rjmp	.+556    	; 0xdc42 <mmc_disk_ioctl+0x46e>
    da16:	60 e1       	ldi	r22, 0x10	; 16
    da18:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    da1a:	1f c0       	rjmp	.+62     	; 0xda5a <mmc_disk_ioctl+0x286>
    da1c:	40 e0       	ldi	r20, 0x00	; 0
    da1e:	50 e0       	ldi	r21, 0x00	; 0
    da20:	ba 01       	movw	r22, r20
    da22:	8a e3       	ldi	r24, 0x3A	; 58
    da24:	f0 dc       	rcall	.-1568   	; 0xd406 <send_cmd>
    da26:	81 11       	cpse	r24, r1
    da28:	0c c1       	rjmp	.+536    	; 0xdc42 <mmc_disk_ioctl+0x46e>
    da2a:	78 01       	movw	r14, r16
    da2c:	f4 e0       	ldi	r31, 0x04	; 4
    da2e:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    da30:	f1 1c       	adc	r15, r1
    da32:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    da34:	83 d1       	rcall	.+774    	; 0xdd3c <mmc_spi_TXRX>
    da36:	f8 01       	movw	r30, r16
    da38:	81 93       	st	Z+, r24
    da3a:	8f 01       	movw	r16, r30
    da3c:	ee 15       	cp	r30, r14
    da3e:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    da40:	c1 f7       	brne	.-16     	; 0xda32 <mmc_disk_ioctl+0x25e>
    da42:	db cf       	rjmp	.-74     	; 0xd9fa <mmc_disk_ioctl+0x226>
    da44:	40 e0       	ldi	r20, 0x00	; 0
    da46:	50 e0       	ldi	r21, 0x00	; 0
    da48:	ba 01       	movw	r22, r20
    da4a:	8d e8       	ldi	r24, 0x8D	; 141
    da4c:	dc dc       	rcall	.-1608   	; 0xd406 <send_cmd>
            {
                xchg_spi(0xFF);
    da4e:	81 11       	cpse	r24, r1
    da50:	f8 c0       	rjmp	.+496    	; 0xdc42 <mmc_disk_ioctl+0x46e>
    da52:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    da54:	79 dc       	rcall	.-1806   	; 0xd348 <xchg_spi>
    da56:	60 e4       	ldi	r22, 0x40	; 64
    da58:	70 e0       	ldi	r23, 0x00	; 0
    da5a:	c8 01       	movw	r24, r16
    da5c:	7d dc       	rcall	.-1798   	; 0xd358 <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    da5e:	01 e0       	ldi	r16, 0x01	; 1
    da60:	10 e0       	ldi	r17, 0x00	; 0
    da62:	89 2b       	or	r24, r25
    da64:	09 f4       	brne	.+2      	; 0xda68 <mmc_disk_ioctl+0x294>
    da66:	ef c0       	rjmp	.+478    	; 0xdc46 <mmc_disk_ioctl+0x472>
    da68:	ea c0       	rjmp	.+468    	; 0xdc3e <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    da6a:	97 d1       	rcall	.+814    	; 0xdd9a <mmc_power_off>
    da6c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    da70:	81 60       	ori	r24, 0x01	; 1
    da72:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    da76:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    da78:	eb c0       	rjmp	.+470    	; 0xdc50 <mmc_disk_ioctl+0x47c>
    da7a:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    da7c:	43 81       	ldd	r20, Z+3	; 0x03
    da7e:	54 81       	ldd	r21, Z+4	; 0x04
    da80:	65 81       	ldd	r22, Z+5	; 0x05
    da82:	76 81       	ldd	r23, Z+6	; 0x06
    da84:	39 e0       	ldi	r19, 0x09	; 9
    da86:	44 0f       	add	r20, r20
    da88:	55 1f       	adc	r21, r21
    da8a:	66 1f       	adc	r22, r22
    da8c:	77 1f       	adc	r23, r23
    da8e:	3a 95       	dec	r19
    da90:	d1 f7       	brne	.-12     	; 0xda86 <mmc_disk_ioctl+0x2b2>
    da92:	70 68       	ori	r23, 0x80	; 128
    da94:	80 81       	ld	r24, Z
    da96:	90 e0       	ldi	r25, 0x00	; 0
    da98:	a0 e0       	ldi	r26, 0x00	; 0
    da9a:	b0 e0       	ldi	r27, 0x00	; 0
    da9c:	2c e1       	ldi	r18, 0x1C	; 28
    da9e:	88 0f       	add	r24, r24
    daa0:	99 1f       	adc	r25, r25
    daa2:	aa 1f       	adc	r26, r26
    daa4:	bb 1f       	adc	r27, r27
    daa6:	2a 95       	dec	r18
    daa8:	d1 f7       	brne	.-12     	; 0xda9e <mmc_disk_ioctl+0x2ca>
    daaa:	48 2b       	or	r20, r24
    daac:	59 2b       	or	r21, r25
    daae:	6a 2b       	or	r22, r26
    dab0:	7b 2b       	or	r23, r27
    dab2:	81 81       	ldd	r24, Z+1	; 0x01
    dab4:	92 81       	ldd	r25, Z+2	; 0x02
    dab6:	01 97       	sbiw	r24, 0x01	; 1
    dab8:	91 70       	andi	r25, 0x01	; 1
    daba:	a0 e0       	ldi	r26, 0x00	; 0
    dabc:	b0 e0       	ldi	r27, 0x00	; 0
    dabe:	48 2b       	or	r20, r24
    dac0:	59 2b       	or	r21, r25
    dac2:	6a 2b       	or	r22, r26
    dac4:	7b 2b       	or	r23, r27
    dac6:	80 e3       	ldi	r24, 0x30	; 48
    dac8:	9e dc       	rcall	.-1732   	; 0xd406 <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    daca:	81 11       	cpse	r24, r1
    dacc:	ba c0       	rjmp	.+372    	; 0xdc42 <mmc_disk_ioctl+0x46e>
    dace:	88 ee       	ldi	r24, 0xE8	; 232
    dad0:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dad2:	37 d1       	rcall	.+622    	; 0xdd42 <mmc_set_ms_timeout>
    dad4:	8f ef       	ldi	r24, 0xFF	; 255
    dad6:	32 d1       	rcall	.+612    	; 0xdd3c <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    dad8:	8f 3f       	cpi	r24, 0xFF	; 255
    dada:	21 f4       	brne	.+8      	; 0xdae4 <mmc_disk_ioctl+0x310>
    dadc:	39 d1       	rcall	.+626    	; 0xdd50 <mmc_test_timeout>
    dade:	89 2b       	or	r24, r25
    dae0:	c9 f3       	breq	.-14     	; 0xdad4 <mmc_disk_ioctl+0x300>
    dae2:	af c0       	rjmp	.+350    	; 0xdc42 <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    dae4:	8e 3f       	cpi	r24, 0xFE	; 254
    dae6:	09 f0       	breq	.+2      	; 0xdaea <mmc_disk_ioctl+0x316>
    dae8:	ac c0       	rjmp	.+344    	; 0xdc42 <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    daea:	f8 01       	movw	r30, r16
    daec:	e7 80       	ldd	r14, Z+7	; 0x07
    daee:	f0 84       	ldd	r15, Z+8	; 0x08
    daf0:	c1 80       	ldd	r12, Z+1	; 0x01
    daf2:	d2 80       	ldd	r13, Z+2	; 0x02
    daf4:	ce 0c       	add	r12, r14
    daf6:	df 1c       	adc	r13, r15
    daf8:	ce 14       	cp	r12, r14
    dafa:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dafc:	31 f0       	breq	.+12     	; 0xdb0a <mmc_disk_ioctl+0x336>
    dafe:	8f ef       	ldi	r24, 0xFF	; 255
    db00:	1d d1       	rcall	.+570    	; 0xdd3c <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    db02:	f7 01       	movw	r30, r14
    db04:	81 93       	st	Z+, r24
    db06:	7f 01       	movw	r14, r30
    db08:	f7 cf       	rjmp	.-18     	; 0xdaf8 <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    db0a:	f8 01       	movw	r30, r16
    db0c:	81 81       	ldd	r24, Z+1	; 0x01
    db0e:	92 81       	ldd	r25, Z+2	; 0x02
    db10:	02 e0       	ldi	r16, 0x02	; 2
    db12:	12 e0       	ldi	r17, 0x02	; 2
    db14:	08 1b       	sub	r16, r24
    db16:	19 0b       	sbc	r17, r25
    db18:	01 15       	cp	r16, r1
    db1a:	11 05       	cpc	r17, r1
    db1c:	09 f4       	brne	.+2      	; 0xdb20 <mmc_disk_ioctl+0x34c>
    db1e:	6d cf       	rjmp	.-294    	; 0xd9fa <mmc_disk_ioctl+0x226>
    db20:	8f ef       	ldi	r24, 0xFF	; 255
    db22:	12 dc       	rcall	.-2012   	; 0xd348 <xchg_spi>
    db24:	01 50       	subi	r16, 0x01	; 1
    db26:	11 09       	sbc	r17, r1
    db28:	f7 cf       	rjmp	.-18     	; 0xdb18 <mmc_disk_ioctl+0x344>
    db2a:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    db2c:	43 81       	ldd	r20, Z+3	; 0x03
    db2e:	54 81       	ldd	r21, Z+4	; 0x04
    db30:	65 81       	ldd	r22, Z+5	; 0x05
    db32:	76 81       	ldd	r23, Z+6	; 0x06
    db34:	39 e0       	ldi	r19, 0x09	; 9
    db36:	44 0f       	add	r20, r20
    db38:	55 1f       	adc	r21, r21
    db3a:	66 1f       	adc	r22, r22
    db3c:	77 1f       	adc	r23, r23
    db3e:	3a 95       	dec	r19
    db40:	d1 f7       	brne	.-12     	; 0xdb36 <mmc_disk_ioctl+0x362>
    db42:	70 68       	ori	r23, 0x80	; 128
    db44:	80 81       	ld	r24, Z
    db46:	90 e0       	ldi	r25, 0x00	; 0
    db48:	a0 e0       	ldi	r26, 0x00	; 0
    db4a:	b0 e0       	ldi	r27, 0x00	; 0
    db4c:	2c e1       	ldi	r18, 0x1C	; 28
    db4e:	88 0f       	add	r24, r24
    db50:	99 1f       	adc	r25, r25
    db52:	aa 1f       	adc	r26, r26
    db54:	bb 1f       	adc	r27, r27
    db56:	2a 95       	dec	r18
    db58:	d1 f7       	brne	.-12     	; 0xdb4e <mmc_disk_ioctl+0x37a>
    db5a:	48 2b       	or	r20, r24
    db5c:	59 2b       	or	r21, r25
    db5e:	6a 2b       	or	r22, r26
    db60:	7b 2b       	or	r23, r27
    db62:	81 81       	ldd	r24, Z+1	; 0x01
    db64:	92 81       	ldd	r25, Z+2	; 0x02
    db66:	01 97       	sbiw	r24, 0x01	; 1
    db68:	91 70       	andi	r25, 0x01	; 1
    db6a:	a0 e0       	ldi	r26, 0x00	; 0
    db6c:	b0 e0       	ldi	r27, 0x00	; 0
    db6e:	48 2b       	or	r20, r24
    db70:	59 2b       	or	r21, r25
    db72:	6a 2b       	or	r22, r26
    db74:	7b 2b       	or	r23, r27
    db76:	81 e3       	ldi	r24, 0x31	; 49
    db78:	46 dc       	rcall	.-1908   	; 0xd406 <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    db7a:	81 11       	cpse	r24, r1
    db7c:	62 c0       	rjmp	.+196    	; 0xdc42 <mmc_disk_ioctl+0x46e>
    db7e:	8f ef       	ldi	r24, 0xFF	; 255
    db80:	e3 db       	rcall	.-2106   	; 0xd348 <xchg_spi>
    db82:	8e ef       	ldi	r24, 0xFE	; 254
    db84:	e1 db       	rcall	.-2110   	; 0xd348 <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    db86:	f8 01       	movw	r30, r16
    db88:	e7 80       	ldd	r14, Z+7	; 0x07
    db8a:	f0 84       	ldd	r15, Z+8	; 0x08
    db8c:	c1 80       	ldd	r12, Z+1	; 0x01
    db8e:	d2 80       	ldd	r13, Z+2	; 0x02
    db90:	ce 0c       	add	r12, r14
    db92:	df 1c       	adc	r13, r15
    db94:	ec 14       	cp	r14, r12
    db96:	fd 04       	cpc	r15, r13
    db98:	29 f0       	breq	.+10     	; 0xdba4 <mmc_disk_ioctl+0x3d0>
    db9a:	f7 01       	movw	r30, r14
    db9c:	81 91       	ld	r24, Z+
    db9e:	7f 01       	movw	r14, r30
    dba0:	d3 db       	rcall	.-2138   	; 0xd348 <xchg_spi>
    dba2:	f8 cf       	rjmp	.-16     	; 0xdb94 <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    dba4:	f8 01       	movw	r30, r16
    dba6:	81 81       	ldd	r24, Z+1	; 0x01
    dba8:	92 81       	ldd	r25, Z+2	; 0x02
    dbaa:	02 e0       	ldi	r16, 0x02	; 2
    dbac:	12 e0       	ldi	r17, 0x02	; 2
    dbae:	08 1b       	sub	r16, r24
    dbb0:	19 0b       	sbc	r17, r25
    dbb2:	8f ef       	ldi	r24, 0xFF	; 255
    dbb4:	01 15       	cp	r16, r1
    dbb6:	11 05       	cpc	r17, r1
    dbb8:	09 f4       	brne	.+2      	; 0xdbbc <mmc_disk_ioctl+0x3e8>
    dbba:	3b c0       	rjmp	.+118    	; 0xdc32 <mmc_disk_ioctl+0x45e>
    dbbc:	c5 db       	rcall	.-2166   	; 0xd348 <xchg_spi>
    dbbe:	01 50       	subi	r16, 0x01	; 1
    dbc0:	11 09       	sbc	r17, r1
    dbc2:	f7 cf       	rjmp	.-18     	; 0xdbb2 <mmc_disk_ioctl+0x3de>
    dbc4:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    dbc6:	43 81       	ldd	r20, Z+3	; 0x03
    dbc8:	54 81       	ldd	r21, Z+4	; 0x04
    dbca:	65 81       	ldd	r22, Z+5	; 0x05
    dbcc:	76 81       	ldd	r23, Z+6	; 0x06
    dbce:	89 e0       	ldi	r24, 0x09	; 9
    dbd0:	44 0f       	add	r20, r20
    dbd2:	55 1f       	adc	r21, r21
    dbd4:	66 1f       	adc	r22, r22
    dbd6:	77 1f       	adc	r23, r23
    dbd8:	8a 95       	dec	r24
    dbda:	d1 f7       	brne	.-12     	; 0xdbd0 <mmc_disk_ioctl+0x3fc>
    dbdc:	74 68       	ori	r23, 0x84	; 132
    dbde:	80 81       	ld	r24, Z
    dbe0:	90 e0       	ldi	r25, 0x00	; 0
    dbe2:	a0 e0       	ldi	r26, 0x00	; 0
    dbe4:	b0 e0       	ldi	r27, 0x00	; 0
    dbe6:	2c e1       	ldi	r18, 0x1C	; 28
    dbe8:	88 0f       	add	r24, r24
    dbea:	99 1f       	adc	r25, r25
    dbec:	aa 1f       	adc	r26, r26
    dbee:	bb 1f       	adc	r27, r27
    dbf0:	2a 95       	dec	r18
    dbf2:	d1 f7       	brne	.-12     	; 0xdbe8 <mmc_disk_ioctl+0x414>
    dbf4:	48 2b       	or	r20, r24
    dbf6:	59 2b       	or	r21, r25
    dbf8:	6a 2b       	or	r22, r26
    dbfa:	7b 2b       	or	r23, r27
    dbfc:	82 81       	ldd	r24, Z+2	; 0x02
    dbfe:	90 e0       	ldi	r25, 0x00	; 0
    dc00:	a0 e0       	ldi	r26, 0x00	; 0
    dc02:	b0 e0       	ldi	r27, 0x00	; 0
    dc04:	48 2b       	or	r20, r24
    dc06:	59 2b       	or	r21, r25
    dc08:	6a 2b       	or	r22, r26
    dc0a:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    dc0c:	81 e3       	ldi	r24, 0x31	; 49
    dc0e:	fb db       	rcall	.-2058   	; 0xd406 <send_cmd>
    dc10:	81 11       	cpse	r24, r1
    dc12:	17 c0       	rjmp	.+46     	; 0xdc42 <mmc_disk_ioctl+0x46e>
    dc14:	8f ef       	ldi	r24, 0xFF	; 255
    dc16:	98 db       	rcall	.-2256   	; 0xd348 <xchg_spi>
                xchg_spi(sdi->ndata);
    dc18:	8e ef       	ldi	r24, 0xFE	; 254
    dc1a:	96 db       	rcall	.-2260   	; 0xd348 <xchg_spi>
    dc1c:	f8 01       	movw	r30, r16
    dc1e:	81 81       	ldd	r24, Z+1	; 0x01
    dc20:	93 db       	rcall	.-2266   	; 0xd348 <xchg_spi>
    dc22:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    dc24:	12 e0       	ldi	r17, 0x02	; 2
    dc26:	8f ef       	ldi	r24, 0xFF	; 255
    dc28:	8f db       	rcall	.-2274   	; 0xd348 <xchg_spi>
    dc2a:	01 50       	subi	r16, 0x01	; 1
    dc2c:	11 09       	sbc	r17, r1
    dc2e:	d9 f7       	brne	.-10     	; 0xdc26 <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dc30:	8f ef       	ldi	r24, 0xFF	; 255
    dc32:	84 d0       	rcall	.+264    	; 0xdd3c <mmc_spi_TXRX>
    dc34:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    dc36:	01 e0       	ldi	r16, 0x01	; 1
    dc38:	10 e0       	ldi	r17, 0x00	; 0
    dc3a:	85 30       	cpi	r24, 0x05	; 5
    dc3c:	21 f4       	brne	.+8      	; 0xdc46 <mmc_disk_ioctl+0x472>
    dc3e:	00 e0       	ldi	r16, 0x00	; 0
    dc40:	02 c0       	rjmp	.+4      	; 0xdc46 <mmc_disk_ioctl+0x472>
    dc42:	01 e0       	ldi	r16, 0x01	; 1
    dc44:	10 e0       	ldi	r17, 0x00	; 0
    dc46:	82 db       	rcall	.-2300   	; 0xd34c <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    dc48:	04 c0       	rjmp	.+8      	; 0xdc52 <mmc_disk_ioctl+0x47e>
    dc4a:	03 e0       	ldi	r16, 0x03	; 3
            break;
    dc4c:	01 c0       	rjmp	.+2      	; 0xdc50 <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    dc4e:	04 e0       	ldi	r16, 0x04	; 4
    dc50:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    dc52:	c8 01       	movw	r24, r16
    dc54:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    dc56:	e8 e0       	ldi	r30, 0x08	; 8
    dc58:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0000dc5c <mmc_disk_timerproc>:
    dc5c:	cf 93       	push	r28
    dc5e:	80 91 2d 18 	lds	r24, 0x182D	; 0x80182d <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    dc62:	88 23       	and	r24, r24
    dc64:	19 f0       	breq	.+6      	; 0xdc6c <mmc_disk_timerproc+0x10>
    dc66:	81 50       	subi	r24, 0x01	; 1
    dc68:	80 93 2d 18 	sts	0x182D, r24	; 0x80182d <Timer1>
    n = Timer2;
    dc6c:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <Timer2>
    if (n) Timer2 = --n;
    dc70:	88 23       	and	r24, r24
    dc72:	19 f0       	breq	.+6      	; 0xdc7a <mmc_disk_timerproc+0x1e>
    dc74:	81 50       	subi	r24, 0x01	; 1
    dc76:	80 93 2c 18 	sts	0x182C, r24	; 0x80182c <Timer2>

    s = Stat;
    dc7a:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    dc7e:	8e d0       	rcall	.+284    	; 0xdd9c <mmc_ins_status>
    dc80:	89 2b       	or	r24, r25
    dc82:	11 f0       	breq	.+4      	; 0xdc88 <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    dc84:	cd 7f       	andi	r28, 0xFD	; 253
    dc86:	04 c0       	rjmp	.+8      	; 0xdc90 <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    dc88:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    dc8a:	81 e0       	ldi	r24, 0x01	; 1
    dc8c:	0e 94 da 26 	call	0x4db4	; 0x4db4 <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    dc90:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    dc94:	cf 91       	pop	r28
    dc96:	08 95       	ret

0000dc98 <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    dc98:	00 d0       	rcall	.+0      	; 0xdc9a <mmc_install_timer+0x2>
    dc9a:	1f 92       	push	r1
    dc9c:	10 92 37 18 	sts	0x1837, r1	; 0x801837 <_mmc_timeout+0x1>
    dca0:	10 92 36 18 	sts	0x1836, r1	; 0x801836 <_mmc_timeout>
    dca4:	61 e0       	ldi	r22, 0x01	; 1
    dca6:	70 e0       	ldi	r23, 0x00	; 0
    dca8:	8b ed       	ldi	r24, 0xDB	; 219
    dcaa:	9e e6       	ldi	r25, 0x6E	; 110
    dcac:	0e 94 8e 34 	call	0x691c	; 0x691c <set_timers>
    dcb0:	01 96       	adiw	r24, 0x01	; 1
    dcb2:	51 f4       	brne	.+20     	; 0xdcc8 <mmc_install_timer+0x30>
    dcb4:	87 e2       	ldi	r24, 0x27	; 39
    dcb6:	98 e0       	ldi	r25, 0x08	; 8
    dcb8:	a0 e0       	ldi	r26, 0x00	; 0
    dcba:	ed b7       	in	r30, 0x3d	; 61
    dcbc:	fe b7       	in	r31, 0x3e	; 62
    dcbe:	81 83       	std	Z+1, r24	; 0x01
    dcc0:	92 83       	std	Z+2, r25	; 0x02
    dcc2:	a3 83       	std	Z+3, r26	; 0x03
    dcc4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    dcc8:	0f 90       	pop	r0
    dcca:	0f 90       	pop	r0
    dccc:	0f 90       	pop	r0
    dcce:	08 95       	ret

0000dcd0 <mmc_spi_begin>:
    dcd0:	60 91 32 18 	lds	r22, 0x1832	; 0x801832 <_mmc_clock>
    dcd4:	70 91 33 18 	lds	r23, 0x1833	; 0x801833 <_mmc_clock+0x1>
    dcd8:	80 91 34 18 	lds	r24, 0x1834	; 0x801834 <_mmc_clock+0x2>
    dcdc:	90 91 35 18 	lds	r25, 0x1835	; 0x801835 <_mmc_clock+0x3>
    dce0:	4b e0       	ldi	r20, 0x0B	; 11
    dce2:	50 e0       	ldi	r21, 0x00	; 0
    dce4:	0c 94 81 26 	jmp	0x4d02	; 0x4d02 <spi_begin>
    dce8:	08 95       	ret

0000dcea <mmc_spi_end>:
    dcea:	8b e0       	ldi	r24, 0x0B	; 11
    dcec:	0c 94 1d 26 	jmp	0x4c3a	; 0x4c3a <spi_end>
    dcf0:	08 95       	ret

0000dcf2 <mmc_slow>:
    dcf2:	80 e2       	ldi	r24, 0x20	; 32
    dcf4:	91 ea       	ldi	r25, 0xA1	; 161
    dcf6:	a7 e0       	ldi	r26, 0x07	; 7
    dcf8:	b0 e0       	ldi	r27, 0x00	; 0
    dcfa:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <_mmc_clock>
    dcfe:	90 93 33 18 	sts	0x1833, r25	; 0x801833 <_mmc_clock+0x1>
    dd02:	a0 93 34 18 	sts	0x1834, r26	; 0x801834 <_mmc_clock+0x2>
    dd06:	b0 93 35 18 	sts	0x1835, r27	; 0x801835 <_mmc_clock+0x3>
    dd0a:	08 95       	ret

0000dd0c <mmc_spi_init>:
    dd0c:	8b e0       	ldi	r24, 0x0B	; 11
    dd0e:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <chip_select_init>
    dd12:	ef cf       	rjmp	.-34     	; 0xdcf2 <mmc_slow>
    dd14:	08 95       	ret

0000dd16 <mmc_fast>:
    dd16:	80 ea       	ldi	r24, 0xA0	; 160
    dd18:	95 e2       	ldi	r25, 0x25	; 37
    dd1a:	a6 e2       	ldi	r26, 0x26	; 38
    dd1c:	b0 e0       	ldi	r27, 0x00	; 0
    dd1e:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <_mmc_clock>
    dd22:	90 93 33 18 	sts	0x1833, r25	; 0x801833 <_mmc_clock+0x1>
    dd26:	a0 93 34 18 	sts	0x1834, r26	; 0x801834 <_mmc_clock+0x2>
    dd2a:	b0 93 35 18 	sts	0x1835, r27	; 0x801835 <_mmc_clock+0x3>
    dd2e:	08 95       	ret

0000dd30 <mmc_spi_TX_buffer>:
    dd30:	0c 94 4d 26 	jmp	0x4c9a	; 0x4c9a <spi_TX_buffer>
    dd34:	08 95       	ret

0000dd36 <mmc_spi_RX_buffer>:
    dd36:	0c 94 4f 26 	jmp	0x4c9e	; 0x4c9e <spi_RX_buffer>
    dd3a:	08 95       	ret

0000dd3c <mmc_spi_TXRX>:
    dd3c:	0c 94 c9 26 	jmp	0x4d92	; 0x4d92 <spi_TXRX>
    dd40:	08 95       	ret

0000dd42 <mmc_set_ms_timeout>:
    dd42:	f8 94       	cli
    dd44:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <_mmc_timeout+0x1>
    dd48:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <_mmc_timeout>
    dd4c:	78 94       	sei
    dd4e:	08 95       	ret

0000dd50 <mmc_test_timeout>:
    dd50:	00 d0       	rcall	.+0      	; 0xdd52 <mmc_test_timeout+0x2>
    dd52:	1f 92       	push	r1
    dd54:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dd58:	81 fd       	sbrc	r24, 1
    dd5a:	15 c0       	rjmp	.+42     	; 0xdd86 <mmc_test_timeout+0x36>
    dd5c:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <_mmc_timeout>
    dd60:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <_mmc_timeout+0x1>
    dd64:	89 2b       	or	r24, r25
    dd66:	91 f4       	brne	.+36     	; 0xdd8c <mmc_test_timeout+0x3c>
    dd68:	8a e1       	ldi	r24, 0x1A	; 26
    dd6a:	98 e0       	ldi	r25, 0x08	; 8
    dd6c:	a0 e0       	ldi	r26, 0x00	; 0
    dd6e:	ed b7       	in	r30, 0x3d	; 61
    dd70:	fe b7       	in	r31, 0x3e	; 62
    dd72:	81 83       	std	Z+1, r24	; 0x01
    dd74:	92 83       	std	Z+2, r25	; 0x02
    dd76:	a3 83       	std	Z+3, r26	; 0x03
    dd78:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    dd7c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dd80:	83 60       	ori	r24, 0x03	; 3
    dd82:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    dd86:	81 e0       	ldi	r24, 0x01	; 1
    dd88:	90 e0       	ldi	r25, 0x00	; 0
    dd8a:	02 c0       	rjmp	.+4      	; 0xdd90 <mmc_test_timeout+0x40>
    dd8c:	80 e0       	ldi	r24, 0x00	; 0
    dd8e:	90 e0       	ldi	r25, 0x00	; 0
    dd90:	0f 90       	pop	r0
    dd92:	0f 90       	pop	r0
    dd94:	0f 90       	pop	r0
    dd96:	08 95       	ret

0000dd98 <mmc_power_on>:
    dd98:	08 95       	ret

0000dd9a <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    dd9a:	08 95       	ret

0000dd9c <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    dd9c:	3f 98       	cbi	0x07, 7	; 7
    dd9e:	86 b1       	in	r24, 0x06	; 6
    dda0:	08 2e       	mov	r0, r24
    dda2:	00 0c       	add	r0, r0
    dda4:	99 0b       	sbc	r25, r25
    dda6:	80 95       	com	r24
    dda8:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    ddaa:	89 2f       	mov	r24, r25
    ddac:	88 1f       	adc	r24, r24
    ddae:	88 27       	eor	r24, r24
    ddb0:	88 1f       	adc	r24, r24
    ddb2:	90 e0       	ldi	r25, 0x00	; 0
    ddb4:	08 95       	ret

0000ddb6 <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    ddb6:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <_mmc_timeout>
    ddba:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <_mmc_timeout+0x1>
    ddbe:	00 97       	sbiw	r24, 0x00	; 0
    ddc0:	29 f0       	breq	.+10     	; 0xddcc <mmc_task+0x16>
        _mmc_timeout--;
    ddc2:	01 97       	sbiw	r24, 0x01	; 1
    ddc4:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <_mmc_timeout+0x1>
    ddc8:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    ddcc:	80 91 30 18 	lds	r24, 0x1830	; 0x801830 <_mmc_pre>
    ddd0:	90 91 31 18 	lds	r25, 0x1831	; 0x801831 <_mmc_pre+0x1>
    ddd4:	8a 30       	cpi	r24, 0x0A	; 10
    ddd6:	91 05       	cpc	r25, r1
    ddd8:	30 f4       	brcc	.+12     	; 0xdde6 <mmc_task+0x30>
    ddda:	01 96       	adiw	r24, 0x01	; 1
    dddc:	90 93 31 18 	sts	0x1831, r25	; 0x801831 <_mmc_pre+0x1>
    dde0:	80 93 30 18 	sts	0x1830, r24	; 0x801830 <_mmc_pre>
    dde4:	08 95       	ret
        return;

    _mmc_pre = 0;
    dde6:	10 92 31 18 	sts	0x1831, r1	; 0x801831 <_mmc_pre+0x1>
    ddea:	10 92 30 18 	sts	0x1830, r1	; 0x801830 <_mmc_pre>

	if(!mmc_ins_status())
    ddee:	d6 df       	rcall	.-84     	; 0xdd9c <mmc_ins_status>
    ddf0:	89 2b       	or	r24, r25
    ddf2:	19 f4       	brne	.+6      	; 0xddfa <mmc_task+0x44>
		set_error(1);
    ddf4:	81 e0       	ldi	r24, 0x01	; 1
    ddf6:	0e 94 da 26 	call	0x4db4	; 0x4db4 <set_error>

    mmc_disk_timerproc();
    ddfa:	30 cf       	rjmp	.-416    	; 0xdc5c <mmc_disk_timerproc>
    ddfc:	08 95       	ret

0000ddfe <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    ddfe:	ac e0       	ldi	r26, 0x0C	; 12
    de00:	b1 e0       	ldi	r27, 0x01	; 1
    de02:	e5 e0       	ldi	r30, 0x05	; 5
    de04:	ff e6       	ldi	r31, 0x6F	; 111
    de06:	0c 94 bf e6 	jmp	0x1cd7e	; 0x1cd7e <__prologue_saves__+0x18>
    de0a:	7c 01       	movw	r14, r24
    int rc;

    char buff[MAX_NAME_LEN+1];

    Stat = 0;
    de0c:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    de10:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    de14:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    de16:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    de18:	79 df       	rcall	.-270    	; 0xdd0c <mmc_spi_init>

    if( verbose)
    de1a:	e1 14       	cp	r14, r1
    de1c:	f1 04       	cpc	r15, r1
    de1e:	51 f0       	breq	.+20     	; 0xde34 <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    de20:	8a e0       	ldi	r24, 0x0A	; 10
    de22:	98 e0       	ldi	r25, 0x08	; 8
    de24:	a0 e0       	ldi	r26, 0x00	; 0
    de26:	ed b7       	in	r30, 0x3d	; 61
    de28:	fe b7       	in	r31, 0x3e	; 62
    de2a:	81 83       	std	Z+1, r24	; 0x01
    de2c:	92 83       	std	Z+2, r25	; 0x02
    de2e:	a3 83       	std	Z+3, r26	; 0x03
    de30:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    de34:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <mmc_init_flag>
    de38:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <mmc_init_flag+0x1>
    de3c:	89 2b       	or	r24, r25
        mmc_install_timer();
    de3e:	09 f4       	brne	.+2      	; 0xde42 <mmc_init+0x44>

	if(!mmc_ins_status())
    de40:	2b df       	rcall	.-426    	; 0xdc98 <mmc_install_timer>
    de42:	ac df       	rcall	.-168    	; 0xdd9c <mmc_ins_status>
    de44:	89 2b       	or	r24, r25
    de46:	61 f4       	brne	.+24     	; 0xde60 <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    de48:	8a ee       	ldi	r24, 0xEA	; 234
    de4a:	97 e0       	ldi	r25, 0x07	; 7
    de4c:	a0 e0       	ldi	r26, 0x00	; 0
    de4e:	ed b7       	in	r30, 0x3d	; 61
    de50:	fe b7       	in	r31, 0x3e	; 62
    de52:	81 83       	std	Z+1, r24	; 0x01
    de54:	92 83       	std	Z+2, r25	; 0x02
    de56:	a3 83       	std	Z+3, r26	; 0x03
    de58:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
		return(RES_NOTRDY);	
    de5c:	83 e0       	ldi	r24, 0x03	; 3
    de5e:	9a c0       	rjmp	.+308    	; 0xdf94 <mmc_init+0x196>
	}


    if( verbose)
    de60:	e1 14       	cp	r14, r1
    de62:	f1 04       	cpc	r15, r1
    de64:	11 f1       	breq	.+68     	; 0xdeaa <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    de66:	87 ed       	ldi	r24, 0xD7	; 215
    de68:	97 e0       	ldi	r25, 0x07	; 7
    de6a:	a0 e0       	ldi	r26, 0x00	; 0
    de6c:	ed b7       	in	r30, 0x3d	; 61
    de6e:	fe b7       	in	r31, 0x3e	; 62
    de70:	81 83       	std	Z+1, r24	; 0x01
    de72:	92 83       	std	Z+2, r25	; 0x02
    de74:	a3 83       	std	Z+3, r26	; 0x03
    de76:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    de7a:	8b ec       	ldi	r24, 0xCB	; 203
    de7c:	97 e0       	ldi	r25, 0x07	; 7
    de7e:	a0 e0       	ldi	r26, 0x00	; 0
    de80:	ed b7       	in	r30, 0x3d	; 61
    de82:	fe b7       	in	r31, 0x3e	; 62
    de84:	81 83       	std	Z+1, r24	; 0x01
    de86:	92 83       	std	Z+2, r25	; 0x02
    de88:	a3 83       	std	Z+3, r26	; 0x03
    de8a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    de8e:	85 eb       	ldi	r24, 0xB5	; 181
    de90:	91 e0       	ldi	r25, 0x01	; 1
    de92:	ed b7       	in	r30, 0x3d	; 61
    de94:	fe b7       	in	r31, 0x3e	; 62
    de96:	95 83       	std	Z+5, r25	; 0x05
    de98:	84 83       	std	Z+4, r24	; 0x04
    de9a:	8a eb       	ldi	r24, 0xBA	; 186
    de9c:	97 e0       	ldi	r25, 0x07	; 7
    de9e:	a0 e0       	ldi	r26, 0x00	; 0
    dea0:	81 83       	std	Z+1, r24	; 0x01
    dea2:	92 83       	std	Z+2, r25	; 0x02
    dea4:	a3 83       	std	Z+3, r26	; 0x03
    dea6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    deaa:	80 e0       	ldi	r24, 0x00	; 0
    deac:	1d da       	rcall	.-3014   	; 0xd2e8 <disk_initialize>
    deae:	08 2f       	mov	r16, r24
    deb0:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    deb2:	01 15       	cp	r16, r1
    deb4:	11 05       	cpc	r17, r1
        put_rc(rc);
    deb6:	19 f0       	breq	.+6      	; 0xdebe <mmc_init+0xc0>
    deb8:	c8 01       	movw	r24, r16
    deba:	f4 d0       	rcall	.+488    	; 0xe0a4 <put_rc>
    debc:	0e c0       	rjmp	.+28     	; 0xdeda <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    debe:	40 e0       	ldi	r20, 0x00	; 0
    dec0:	66 ea       	ldi	r22, 0xA6	; 166
    dec2:	78 e0       	ldi	r23, 0x08	; 8
    dec4:	88 e8       	ldi	r24, 0x88	; 136
    dec6:	9a e1       	ldi	r25, 0x1A	; 26
    dec8:	0e 94 4c 59 	call	0xb298	; 0xb298 <f_mount>
    decc:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    dece:	89 2b       	or	r24, r25
    ded0:	21 f4       	brne	.+8      	; 0xdeda <mmc_init+0xdc>
    ded2:	e1 14       	cp	r14, r1
    ded4:	f1 04       	cpc	r15, r1
    ded6:	09 f4       	brne	.+2      	; 0xdeda <mmc_init+0xdc>
        put_rc( rc );
    ded8:	4f c0       	rjmp	.+158    	; 0xdf78 <mmc_init+0x17a>
    deda:	c8 01       	movw	r24, r16
    dedc:	e3 d0       	rcall	.+454    	; 0xe0a4 <put_rc>

    if (verbose )
    dede:	e1 14       	cp	r14, r1
    dee0:	f1 04       	cpc	r15, r1
    dee2:	09 f4       	brne	.+2      	; 0xdee6 <mmc_init+0xe8>
    dee4:	49 c0       	rjmp	.+146    	; 0xdf78 <mmc_init+0x17a>
    {
        DWORD blksize = 0;
    dee6:	c7 5f       	subi	r28, 0xF7	; 247
    dee8:	de 4f       	sbci	r29, 0xFE	; 254
    deea:	18 82       	st	Y, r1
    deec:	19 82       	std	Y+1, r1	; 0x01
    deee:	1a 82       	std	Y+2, r1	; 0x02
    def0:	1b 82       	std	Y+3, r1	; 0x03
    def2:	c9 50       	subi	r28, 0x09	; 9
    def4:	d1 40       	sbci	r29, 0x01	; 1
        if(rc == RES_OK)
    def6:	01 15       	cp	r16, r1
    def8:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    defa:	a1 f5       	brne	.+104    	; 0xdf64 <mmc_init+0x166>
    defc:	ae 01       	movw	r20, r28
    defe:	47 5f       	subi	r20, 0xF7	; 247
    df00:	5e 4f       	sbci	r21, 0xFE	; 254
    df02:	63 e0       	ldi	r22, 0x03	; 3
    df04:	80 e0       	ldi	r24, 0x00	; 0
    df06:	16 da       	rcall	.-3028   	; 0xd334 <disk_ioctl>
            if( rc != RES_OK)
    df08:	8c 01       	movw	r16, r24
    df0a:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    df0c:	61 f0       	breq	.+24     	; 0xdf26 <mmc_init+0x128>
    df0e:	ca d0       	rcall	.+404    	; 0xe0a4 <put_rc>
                printf("MMC Block Size - read failed\n");
    df10:	8c e9       	ldi	r24, 0x9C	; 156
    df12:	97 e0       	ldi	r25, 0x07	; 7
    df14:	a0 e0       	ldi	r26, 0x00	; 0
    df16:	ed b7       	in	r30, 0x3d	; 61
    df18:	fe b7       	in	r31, 0x3e	; 62
    df1a:	81 83       	std	Z+1, r24	; 0x01
    df1c:	92 83       	std	Z+2, r25	; 0x02
    df1e:	a3 83       	std	Z+3, r26	; 0x03
    df20:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    df24:	1f c0       	rjmp	.+62     	; 0xdf64 <mmc_init+0x166>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    df26:	c7 5f       	subi	r28, 0xF7	; 247
    df28:	de 4f       	sbci	r29, 0xFE	; 254
    df2a:	88 81       	ld	r24, Y
    df2c:	99 81       	ldd	r25, Y+1	; 0x01
    df2e:	aa 81       	ldd	r26, Y+2	; 0x02
    df30:	bb 81       	ldd	r27, Y+3	; 0x03
    df32:	c9 50       	subi	r28, 0x09	; 9
    df34:	d1 40       	sbci	r29, 0x01	; 1
    df36:	ed b7       	in	r30, 0x3d	; 61
    df38:	fe b7       	in	r31, 0x3e	; 62
    df3a:	84 83       	std	Z+4, r24	; 0x04
    df3c:	95 83       	std	Z+5, r25	; 0x05
    df3e:	a6 83       	std	Z+6, r26	; 0x06
    df40:	b7 83       	std	Z+7, r27	; 0x07
    df42:	87 e8       	ldi	r24, 0x87	; 135
    df44:	97 e0       	ldi	r25, 0x07	; 7
    df46:	a0 e0       	ldi	r26, 0x00	; 0
    df48:	81 83       	std	Z+1, r24	; 0x01
    df4a:	92 83       	std	Z+2, r25	; 0x02
    df4c:	a3 83       	std	Z+3, r26	; 0x03
    df4e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            }
            if( rc == RES_OK)
            {
                strcpy(buff,"/");
    df52:	66 ea       	ldi	r22, 0xA6	; 166
    df54:	78 e0       	ldi	r23, 0x08	; 8
    df56:	ce 01       	movw	r24, r28
    df58:	08 96       	adiw	r24, 0x08	; 8
    df5a:	0e 94 21 31 	call	0x6242	; 0x6242 <strcpy>
                fatfs_status(buff);
    df5e:	ce 01       	movw	r24, r28
    df60:	08 96       	adiw	r24, 0x08	; 8
    df62:	34 d1       	rcall	.+616    	; 0xe1cc <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    df64:	89 e7       	ldi	r24, 0x79	; 121
    df66:	97 e0       	ldi	r25, 0x07	; 7
    df68:	a0 e0       	ldi	r26, 0x00	; 0
    df6a:	ed b7       	in	r30, 0x3d	; 61
    df6c:	fe b7       	in	r31, 0x3e	; 62
    df6e:	81 83       	std	Z+1, r24	; 0x01
    df70:	92 83       	std	Z+2, r25	; 0x02
    df72:	a3 83       	std	Z+3, r26	; 0x03
    df74:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    }
    mmc_init_flag = 1;
    df78:	81 e0       	ldi	r24, 0x01	; 1
    df7a:	90 e0       	ldi	r25, 0x00	; 0
    df7c:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <mmc_init_flag+0x1>
    df80:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <mmc_init_flag>

	if(rc != RES_OK)
    df84:	01 15       	cp	r16, r1
    df86:	11 05       	cpc	r17, r1
    df88:	21 f0       	breq	.+8      	; 0xdf92 <mmc_init+0x194>
		set_error(1);
    df8a:	0e 94 da 26 	call	0x4db4	; 0x4db4 <set_error>
    df8e:	c8 01       	movw	r24, r16
    df90:	02 c0       	rjmp	.+4      	; 0xdf96 <mmc_init+0x198>
    df92:	80 e0       	ldi	r24, 0x00	; 0
    df94:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    df96:	c4 5f       	subi	r28, 0xF4	; 244
    df98:	de 4f       	sbci	r29, 0xFE	; 254
    df9a:	e6 e0       	ldi	r30, 0x06	; 6
    df9c:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

0000dfa0 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    dfa0:	80 e0       	ldi	r24, 0x00	; 0
    dfa2:	90 e0       	ldi	r25, 0x00	; 0
    dfa4:	08 95       	ret

0000dfa6 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    dfa6:	0f 93       	push	r16
    dfa8:	1f 93       	push	r17
    dfaa:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    dfac:	46 81       	ldd	r20, Z+6	; 0x06
    dfae:	57 81       	ldd	r21, Z+7	; 0x07
    dfb0:	05 2e       	mov	r0, r21
    dfb2:	00 0c       	add	r0, r0
    dfb4:	66 0b       	sbc	r22, r22
    dfb6:	77 0b       	sbc	r23, r23
    dfb8:	ba 01       	movw	r22, r20
    dfba:	55 27       	eor	r21, r21
    dfbc:	44 27       	eor	r20, r20
    dfbe:	84 81       	ldd	r24, Z+4	; 0x04
    dfc0:	95 81       	ldd	r25, Z+5	; 0x05
    dfc2:	09 2e       	mov	r0, r25
    dfc4:	00 0c       	add	r0, r0
    dfc6:	aa 0b       	sbc	r26, r26
    dfc8:	bb 0b       	sbc	r27, r27
    dfca:	2b e0       	ldi	r18, 0x0B	; 11
    dfcc:	88 0f       	add	r24, r24
    dfce:	99 1f       	adc	r25, r25
    dfd0:	aa 1f       	adc	r26, r26
    dfd2:	bb 1f       	adc	r27, r27
    dfd4:	2a 95       	dec	r18
    dfd6:	d1 f7       	brne	.-12     	; 0xdfcc <tm_to_fat+0x26>
    dfd8:	48 2b       	or	r20, r24
    dfda:	59 2b       	or	r21, r25
    dfdc:	6a 2b       	or	r22, r26
    dfde:	7b 2b       	or	r23, r27
    dfe0:	82 81       	ldd	r24, Z+2	; 0x02
    dfe2:	93 81       	ldd	r25, Z+3	; 0x03
    dfe4:	09 2e       	mov	r0, r25
    dfe6:	00 0c       	add	r0, r0
    dfe8:	aa 0b       	sbc	r26, r26
    dfea:	bb 0b       	sbc	r27, r27
    dfec:	35 e0       	ldi	r19, 0x05	; 5
    dfee:	88 0f       	add	r24, r24
    dff0:	99 1f       	adc	r25, r25
    dff2:	aa 1f       	adc	r26, r26
    dff4:	bb 1f       	adc	r27, r27
    dff6:	3a 95       	dec	r19
    dff8:	d1 f7       	brne	.-12     	; 0xdfee <tm_to_fat+0x48>
    dffa:	48 2b       	or	r20, r24
    dffc:	59 2b       	or	r21, r25
    dffe:	6a 2b       	or	r22, r26
    e000:	7b 2b       	or	r23, r27
    e002:	80 81       	ld	r24, Z
    e004:	91 81       	ldd	r25, Z+1	; 0x01
    e006:	09 2e       	mov	r0, r25
    e008:	00 0c       	add	r0, r0
    e00a:	aa 0b       	sbc	r26, r26
    e00c:	bb 0b       	sbc	r27, r27
    e00e:	b6 95       	lsr	r27
    e010:	a7 95       	ror	r26
    e012:	97 95       	ror	r25
    e014:	87 95       	ror	r24
    e016:	84 2b       	or	r24, r20
    e018:	95 2b       	or	r25, r21
    e01a:	a6 2b       	or	r26, r22
    e01c:	b7 2b       	or	r27, r23
    e01e:	02 85       	ldd	r16, Z+10	; 0x0a
    e020:	13 85       	ldd	r17, Z+11	; 0x0b
    e022:	00 55       	subi	r16, 0x50	; 80
    e024:	11 09       	sbc	r17, r1
    e026:	01 2e       	mov	r0, r17
    e028:	00 0c       	add	r0, r0
    e02a:	22 0b       	sbc	r18, r18
    e02c:	33 0b       	sbc	r19, r19
    e02e:	49 e1       	ldi	r20, 0x19	; 25
    e030:	00 0f       	add	r16, r16
    e032:	11 1f       	adc	r17, r17
    e034:	22 1f       	adc	r18, r18
    e036:	33 1f       	adc	r19, r19
    e038:	4a 95       	dec	r20
    e03a:	d1 f7       	brne	.-12     	; 0xe030 <tm_to_fat+0x8a>
    e03c:	ac 01       	movw	r20, r24
    e03e:	bd 01       	movw	r22, r26
    e040:	40 2b       	or	r20, r16
    e042:	51 2b       	or	r21, r17
    e044:	62 2b       	or	r22, r18
    e046:	73 2b       	or	r23, r19
    e048:	80 85       	ldd	r24, Z+8	; 0x08
    e04a:	91 85       	ldd	r25, Z+9	; 0x09
    e04c:	09 2e       	mov	r0, r25
    e04e:	00 0c       	add	r0, r0
    e050:	aa 0b       	sbc	r26, r26
    e052:	bb 0b       	sbc	r27, r27
    e054:	01 96       	adiw	r24, 0x01	; 1
    e056:	a1 1d       	adc	r26, r1
    e058:	b1 1d       	adc	r27, r1
    e05a:	e5 e1       	ldi	r30, 0x15	; 21
    e05c:	88 0f       	add	r24, r24
    e05e:	99 1f       	adc	r25, r25
    e060:	aa 1f       	adc	r26, r26
    e062:	bb 1f       	adc	r27, r27
    e064:	ea 95       	dec	r30
    e066:	d1 f7       	brne	.-12     	; 0xe05c <tm_to_fat+0xb6>
    e068:	8a 01       	movw	r16, r20
    e06a:	9b 01       	movw	r18, r22
    e06c:	08 2b       	or	r16, r24
    e06e:	19 2b       	or	r17, r25
    e070:	2a 2b       	or	r18, r26
    e072:	3b 2b       	or	r19, r27
    e074:	c9 01       	movw	r24, r18
    e076:	b8 01       	movw	r22, r16
}
    e078:	1f 91       	pop	r17
    e07a:	0f 91       	pop	r16
    e07c:	08 95       	ret

0000e07e <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e07e:	a4 e0       	ldi	r26, 0x04	; 4
    e080:	b0 e0       	ldi	r27, 0x00	; 0
    e082:	e5 e4       	ldi	r30, 0x45	; 69
    e084:	f0 e7       	ldi	r31, 0x70	; 112
    e086:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e08a:	ce 01       	movw	r24, r28
    e08c:	01 96       	adiw	r24, 0x01	; 1
    e08e:	0e 94 e2 37 	call	0x6fc4	; 0x6fc4 <time>
    return( tm_to_fat(localtime(&t)));
    e092:	ce 01       	movw	r24, r28
    e094:	01 96       	adiw	r24, 0x01	; 1
    e096:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <localtime>
    e09a:	85 df       	rcall	.-246    	; 0xdfa6 <tm_to_fat>
}
    e09c:	24 96       	adiw	r28, 0x04	; 4
    e09e:	e2 e0       	ldi	r30, 0x02	; 2
    e0a0:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

0000e0a4 <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    e0a4:	00 d0       	rcall	.+0      	; 0xe0a6 <put_rc+0x2>
    e0a6:	00 d0       	rcall	.+0      	; 0xe0a8 <put_rc+0x4>
    e0a8:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e0aa:	ed b7       	in	r30, 0x3d	; 61
    e0ac:	fe b7       	in	r31, 0x3e	; 62
    e0ae:	95 83       	std	Z+5, r25	; 0x05
    e0b0:	84 83       	std	Z+4, r24	; 0x04
    e0b2:	8c e9       	ldi	r24, 0x9C	; 156
    e0b4:	9a e0       	ldi	r25, 0x0A	; 10
    e0b6:	a0 e0       	ldi	r26, 0x00	; 0
    e0b8:	81 83       	std	Z+1, r24	; 0x01
    e0ba:	92 83       	std	Z+2, r25	; 0x02
    e0bc:	a3 83       	std	Z+3, r26	; 0x03
    e0be:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
}
    e0c2:	0f 90       	pop	r0
    e0c4:	0f 90       	pop	r0
    e0c6:	0f 90       	pop	r0
    e0c8:	0f 90       	pop	r0
    e0ca:	0f 90       	pop	r0
    e0cc:	08 95       	ret

0000e0ce <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e0ce:	a4 e4       	ldi	r26, 0x44	; 68
    e0d0:	b1 e0       	ldi	r27, 0x01	; 1
    e0d2:	ed e6       	ldi	r30, 0x6D	; 109
    e0d4:	f0 e7       	ldi	r31, 0x70	; 112
    e0d6:	0c 94 be e6 	jmp	0x1cd7c	; 0x1cd7c <__prologue_saves__+0x16>
    e0da:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e0dc:	bc 01       	movw	r22, r24
    e0de:	ce 01       	movw	r24, r28
    e0e0:	89 5e       	subi	r24, 0xE9	; 233
    e0e2:	9e 4f       	sbci	r25, 0xFE	; 254
    e0e4:	0e 94 07 63 	call	0xc60e	; 0xc60e <f_opendir>
    if (fr == FR_OK)
    e0e8:	00 97       	sbiw	r24, 0x00	; 0
    e0ea:	09 f0       	breq	.+2      	; 0xe0ee <fatfs_scan_files+0x20>
    e0ec:	5b c0       	rjmp	.+182    	; 0xe1a4 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e0ee:	8f e2       	ldi	r24, 0x2F	; 47
    e0f0:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    e0f2:	be 01       	movw	r22, r28
    e0f4:	6f 5f       	subi	r22, 0xFF	; 255
    e0f6:	7f 4f       	sbci	r23, 0xFF	; 255
    e0f8:	ce 01       	movw	r24, r28
    e0fa:	89 5e       	subi	r24, 0xE9	; 233
    e0fc:	9e 4f       	sbci	r25, 0xFE	; 254
    e0fe:	0e 94 8d 63 	call	0xc71a	; 0xc71a <f_readdir>
    e102:	00 97       	sbiw	r24, 0x00	; 0
    e104:	09 f0       	breq	.+2      	; 0xe108 <fatfs_scan_files+0x3a>
    e106:	4e c0       	rjmp	.+156    	; 0xe1a4 <fatfs_scan_files+0xd6>
    e108:	2f 89       	ldd	r18, Y+23	; 0x17
    e10a:	22 23       	and	r18, r18
    e10c:	09 f4       	brne	.+2      	; 0xe110 <fatfs_scan_files+0x42>
    e10e:	4a c0       	rjmp	.+148    	; 0xe1a4 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    e110:	89 85       	ldd	r24, Y+9	; 0x09
    e112:	84 ff       	sbrs	r24, 4
    e114:	25 c0       	rjmp	.+74     	; 0xe160 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    e116:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <AccDirs>
    e11a:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <AccDirs+0x1>
    e11e:	01 96       	adiw	r24, 0x01	; 1
    e120:	90 93 c2 1c 	sts	0x1CC2, r25	; 0x801cc2 <AccDirs+0x1>
    e124:	80 93 c1 1c 	sts	0x1CC1, r24	; 0x801cc1 <AccDirs>
                i = strlen(path);
    e128:	f8 01       	movw	r30, r16
    e12a:	01 90       	ld	r0, Z+
    e12c:	00 20       	and	r0, r0
    e12e:	e9 f7       	brne	.-6      	; 0xe12a <fatfs_scan_files+0x5c>
    e130:	31 97       	sbiw	r30, 0x01	; 1
    e132:	e0 1b       	sub	r30, r16
    e134:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e136:	78 01       	movw	r14, r16
    e138:	ee 0e       	add	r14, r30
    e13a:	ff 1e       	adc	r15, r31
    e13c:	d7 01       	movw	r26, r14
    e13e:	dc 92       	st	X, r13
    e140:	cf 01       	movw	r24, r30
    e142:	01 96       	adiw	r24, 0x01	; 1
    e144:	be 01       	movw	r22, r28
    e146:	69 5e       	subi	r22, 0xE9	; 233
    e148:	7f 4f       	sbci	r23, 0xFF	; 255
    e14a:	80 0f       	add	r24, r16
    e14c:	91 1f       	adc	r25, r17
    e14e:	0e 94 21 31 	call	0x6242	; 0x6242 <strcpy>
                fr = fatfs_scan_files(path);
    e152:	c8 01       	movw	r24, r16
    e154:	bc df       	rcall	.-136    	; 0xe0ce <fatfs_scan_files>
                path[i] = 0;
    e156:	f7 01       	movw	r30, r14
    e158:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e15a:	00 97       	sbiw	r24, 0x00	; 0
    e15c:	51 f2       	breq	.-108    	; 0xe0f2 <fatfs_scan_files+0x24>
    e15e:	22 c0       	rjmp	.+68     	; 0xe1a4 <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e160:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <AccFiles>
    e164:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <AccFiles+0x1>
    e168:	01 96       	adiw	r24, 0x01	; 1
    e16a:	90 93 c4 1c 	sts	0x1CC4, r25	; 0x801cc4 <AccFiles+0x1>
    e16e:	80 93 c3 1c 	sts	0x1CC3, r24	; 0x801cc3 <AccFiles>
                AccSize += info.fsize;
    e172:	40 91 bd 1c 	lds	r20, 0x1CBD	; 0x801cbd <AccSize>
    e176:	50 91 be 1c 	lds	r21, 0x1CBE	; 0x801cbe <AccSize+0x1>
    e17a:	60 91 bf 1c 	lds	r22, 0x1CBF	; 0x801cbf <AccSize+0x2>
    e17e:	70 91 c0 1c 	lds	r23, 0x1CC0	; 0x801cc0 <AccSize+0x3>
    e182:	89 81       	ldd	r24, Y+1	; 0x01
    e184:	9a 81       	ldd	r25, Y+2	; 0x02
    e186:	ab 81       	ldd	r26, Y+3	; 0x03
    e188:	bc 81       	ldd	r27, Y+4	; 0x04
    e18a:	84 0f       	add	r24, r20
    e18c:	95 1f       	adc	r25, r21
    e18e:	a6 1f       	adc	r26, r22
    e190:	b7 1f       	adc	r27, r23
    e192:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <AccSize>
    e196:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <AccSize+0x1>
    e19a:	a0 93 bf 1c 	sts	0x1CBF, r26	; 0x801cbf <AccSize+0x2>
    e19e:	b0 93 c0 1c 	sts	0x1CC0, r27	; 0x801cc0 <AccSize+0x3>
    e1a2:	a7 cf       	rjmp	.-178    	; 0xe0f2 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e1a4:	cc 5b       	subi	r28, 0xBC	; 188
    e1a6:	de 4f       	sbci	r29, 0xFE	; 254
    e1a8:	e7 e0       	ldi	r30, 0x07	; 7
    e1aa:	0c 94 da e6 	jmp	0x1cdb4	; 0x1cdb4 <__epilogue_restores__+0x16>

0000e1ae <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e1ae:	01 97       	sbiw	r24, 0x01	; 1
    e1b0:	84 30       	cpi	r24, 0x04	; 4
    e1b2:	91 05       	cpc	r25, r1
    e1b4:	40 f4       	brcc	.+16     	; 0xe1c6 <fatfs_fstype+0x18>
    e1b6:	88 0f       	add	r24, r24
    e1b8:	99 1f       	adc	r25, r25
    e1ba:	fc 01       	movw	r30, r24
    e1bc:	e6 53       	subi	r30, 0x36	; 54
    e1be:	f7 4f       	sbci	r31, 0xF7	; 247
    e1c0:	80 81       	ld	r24, Z
    e1c2:	91 81       	ldd	r25, Z+1	; 0x01
    e1c4:	08 95       	ret
    char *ptr;
    switch(type)
    e1c6:	88 ea       	ldi	r24, 0xA8	; 168
    e1c8:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e1ca:	08 95       	ret

0000e1cc <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  1 on success 0 on error
MEMSPACE
int fatfs_status(char *ptr)
{
    e1cc:	a7 e3       	ldi	r26, 0x37	; 55
    e1ce:	b0 e0       	ldi	r27, 0x00	; 0
    e1d0:	ec ee       	ldi	r30, 0xEC	; 236
    e1d2:	f0 e7       	ldi	r31, 0x70	; 112
    e1d4:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    e1d8:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e1da:	fc 01       	movw	r30, r24
    e1dc:	21 91       	ld	r18, Z+
    e1de:	cf 01       	movw	r24, r30
    e1e0:	20 32       	cpi	r18, 0x20	; 32
    e1e2:	d1 f3       	breq	.-12     	; 0xe1d8 <fatfs_status+0xc>
    e1e4:	29 30       	cpi	r18, 0x09	; 9
    e1e6:	c1 f3       	breq	.-16     	; 0xe1d8 <fatfs_status+0xc>
        ++ptr;

    printf("fatfs status:%s\n",ptr);
    e1e8:	ed b7       	in	r30, 0x3d	; 61
    e1ea:	fe b7       	in	r31, 0x3e	; 62
    e1ec:	e4 82       	std	Z+4, r14	; 0x04
    e1ee:	f5 82       	std	Z+5, r15	; 0x05
    e1f0:	8b e8       	ldi	r24, 0x8B	; 139
    e1f2:	9a e0       	ldi	r25, 0x0A	; 10
    e1f4:	a0 e0       	ldi	r26, 0x00	; 0
    e1f6:	81 83       	std	Z+1, r24	; 0x01
    e1f8:	92 83       	std	Z+2, r25	; 0x02
    e1fa:	a3 83       	std	Z+3, r26	; 0x03
    e1fc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e200:	ae 01       	movw	r20, r28
    e202:	4a 5c       	subi	r20, 0xCA	; 202
    e204:	5f 4f       	sbci	r21, 0xFF	; 255
    e206:	be 01       	movw	r22, r28
    e208:	6e 5c       	subi	r22, 0xCE	; 206
    e20a:	7f 4f       	sbci	r23, 0xFF	; 255
    e20c:	c7 01       	movw	r24, r14
    e20e:	0e 94 0f 64 	call	0xc81e	; 0xc81e <f_getfree>
    if (res)
    e212:	89 2b       	or	r24, r25
    e214:	19 f0       	breq	.+6      	; 0xe21c <fatfs_status+0x50>
    {
        printf("fatfs_status f_getfree failed\n");
    e216:	8c e6       	ldi	r24, 0x6C	; 108
    e218:	9a e0       	ldi	r25, 0x0A	; 10
    e21a:	c0 c0       	rjmp	.+384    	; 0xe39c <fatfs_status+0x1d0>
        return(0);
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e21c:	ee a9       	ldd	r30, Y+54	; 0x36
    e21e:	ff a9       	ldd	r31, Y+55	; 0x37
    e220:	80 81       	ld	r24, Z
    e222:	90 e0       	ldi	r25, 0x00	; 0
    e224:	c4 df       	rcall	.-120    	; 0xe1ae <fatfs_fstype>
    e226:	ed b7       	in	r30, 0x3d	; 61
    e228:	fe b7       	in	r31, 0x3e	; 62
    e22a:	95 83       	std	Z+5, r25	; 0x05
    e22c:	84 83       	std	Z+4, r24	; 0x04
    e22e:	8e e4       	ldi	r24, 0x4E	; 78
    e230:	9a e0       	ldi	r25, 0x0A	; 10
    e232:	a0 e0       	ldi	r26, 0x00	; 0
    e234:	81 83       	std	Z+1, r24	; 0x01
    e236:	92 83       	std	Z+2, r25	; 0x02
    e238:	a3 83       	std	Z+3, r26	; 0x03
    e23a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e23e:	ee a9       	ldd	r30, Y+54	; 0x36
    e240:	ff a9       	ldd	r31, Y+55	; 0x37
    e242:	81 85       	ldd	r24, Z+9	; 0x09
    e244:	92 85       	ldd	r25, Z+10	; 0x0a
    e246:	a0 e0       	ldi	r26, 0x00	; 0
    e248:	b0 e0       	ldi	r27, 0x00	; 0
    e24a:	39 e0       	ldi	r19, 0x09	; 9
    e24c:	88 0f       	add	r24, r24
    e24e:	99 1f       	adc	r25, r25
    e250:	aa 1f       	adc	r26, r26
    e252:	bb 1f       	adc	r27, r27
    e254:	3a 95       	dec	r19
    e256:	d1 f7       	brne	.-12     	; 0xe24c <fatfs_status+0x80>
    e258:	ed b7       	in	r30, 0x3d	; 61
    e25a:	fe b7       	in	r31, 0x3e	; 62
    e25c:	84 83       	std	Z+4, r24	; 0x04
    e25e:	95 83       	std	Z+5, r25	; 0x05
    e260:	a6 83       	std	Z+6, r26	; 0x06
    e262:	b7 83       	std	Z+7, r27	; 0x07
    e264:	8f e2       	ldi	r24, 0x2F	; 47
    e266:	9a e0       	ldi	r25, 0x0A	; 10
    e268:	a0 e0       	ldi	r26, 0x00	; 0
    e26a:	81 83       	std	Z+1, r24	; 0x01
    e26c:	92 83       	std	Z+2, r25	; 0x02
    e26e:	a3 83       	std	Z+3, r26	; 0x03
    e270:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e274:	ee a9       	ldd	r30, Y+54	; 0x36
    e276:	ff a9       	ldd	r31, Y+55	; 0x37
    e278:	82 81       	ldd	r24, Z+2	; 0x02
    e27a:	90 e0       	ldi	r25, 0x00	; 0
    e27c:	ed b7       	in	r30, 0x3d	; 61
    e27e:	fe b7       	in	r31, 0x3e	; 62
    e280:	95 83       	std	Z+5, r25	; 0x05
    e282:	84 83       	std	Z+4, r24	; 0x04
    e284:	81 e1       	ldi	r24, 0x11	; 17
    e286:	9a e0       	ldi	r25, 0x0A	; 10
    e288:	a0 e0       	ldi	r26, 0x00	; 0
    e28a:	81 83       	std	Z+1, r24	; 0x01
    e28c:	92 83       	std	Z+2, r25	; 0x02
    e28e:	a3 83       	std	Z+3, r26	; 0x03
    e290:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e294:	ee a9       	ldd	r30, Y+54	; 0x36
    e296:	ff a9       	ldd	r31, Y+55	; 0x37
    e298:	87 81       	ldd	r24, Z+7	; 0x07
    e29a:	90 85       	ldd	r25, Z+8	; 0x08
    e29c:	ed b7       	in	r30, 0x3d	; 61
    e29e:	fe b7       	in	r31, 0x3e	; 62
    e2a0:	95 83       	std	Z+5, r25	; 0x05
    e2a2:	84 83       	std	Z+4, r24	; 0x04
    e2a4:	83 ef       	ldi	r24, 0xF3	; 243
    e2a6:	99 e0       	ldi	r25, 0x09	; 9
    e2a8:	a0 e0       	ldi	r26, 0x00	; 0
    e2aa:	81 83       	std	Z+1, r24	; 0x01
    e2ac:	92 83       	std	Z+2, r25	; 0x02
    e2ae:	a3 83       	std	Z+3, r26	; 0x03
    e2b0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e2b4:	ee a9       	ldd	r30, Y+54	; 0x36
    e2b6:	ff a9       	ldd	r31, Y+55	; 0x37
    e2b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    e2ba:	96 8d       	ldd	r25, Z+30	; 0x1e
    e2bc:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e2be:	b0 a1       	ldd	r27, Z+32	; 0x20
    e2c0:	ed b7       	in	r30, 0x3d	; 61
    e2c2:	fe b7       	in	r31, 0x3e	; 62
    e2c4:	84 83       	std	Z+4, r24	; 0x04
    e2c6:	95 83       	std	Z+5, r25	; 0x05
    e2c8:	a6 83       	std	Z+6, r26	; 0x06
    e2ca:	b7 83       	std	Z+7, r27	; 0x07
    e2cc:	84 ed       	ldi	r24, 0xD4	; 212
    e2ce:	99 e0       	ldi	r25, 0x09	; 9
    e2d0:	a0 e0       	ldi	r26, 0x00	; 0
    e2d2:	81 83       	std	Z+1, r24	; 0x01
    e2d4:	92 83       	std	Z+2, r25	; 0x02
    e2d6:	a3 83       	std	Z+3, r26	; 0x03
    e2d8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e2dc:	ee a9       	ldd	r30, Y+54	; 0x36
    e2de:	ff a9       	ldd	r31, Y+55	; 0x37
    e2e0:	81 8d       	ldd	r24, Z+25	; 0x19
    e2e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    e2e4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e2e6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e2e8:	02 97       	sbiw	r24, 0x02	; 2
    e2ea:	a1 09       	sbc	r26, r1
    e2ec:	b1 09       	sbc	r27, r1
    e2ee:	ed b7       	in	r30, 0x3d	; 61
    e2f0:	fe b7       	in	r31, 0x3e	; 62
    e2f2:	84 83       	std	Z+4, r24	; 0x04
    e2f4:	95 83       	std	Z+5, r25	; 0x05
    e2f6:	a6 83       	std	Z+6, r26	; 0x06
    e2f8:	b7 83       	std	Z+7, r27	; 0x07
    e2fa:	85 eb       	ldi	r24, 0xB5	; 181
    e2fc:	99 e0       	ldi	r25, 0x09	; 9
    e2fe:	a0 e0       	ldi	r26, 0x00	; 0
    e300:	81 83       	std	Z+1, r24	; 0x01
    e302:	92 83       	std	Z+2, r25	; 0x02
    e304:	a3 83       	std	Z+3, r26	; 0x03
    e306:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e30a:	ee a9       	ldd	r30, Y+54	; 0x36
    e30c:	ff a9       	ldd	r31, Y+55	; 0x37
    e30e:	85 a1       	ldd	r24, Z+37	; 0x25
    e310:	96 a1       	ldd	r25, Z+38	; 0x26
    e312:	a7 a1       	ldd	r26, Z+39	; 0x27
    e314:	b0 a5       	ldd	r27, Z+40	; 0x28
    e316:	ed b7       	in	r30, 0x3d	; 61
    e318:	fe b7       	in	r31, 0x3e	; 62
    e31a:	84 83       	std	Z+4, r24	; 0x04
    e31c:	95 83       	std	Z+5, r25	; 0x05
    e31e:	a6 83       	std	Z+6, r26	; 0x06
    e320:	b7 83       	std	Z+7, r27	; 0x07
    e322:	86 e9       	ldi	r24, 0x96	; 150
    e324:	99 e0       	ldi	r25, 0x09	; 9
    e326:	a0 e0       	ldi	r26, 0x00	; 0
    e328:	81 83       	std	Z+1, r24	; 0x01
    e32a:	92 83       	std	Z+2, r25	; 0x02
    e32c:	a3 83       	std	Z+3, r26	; 0x03
    e32e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e332:	ee a9       	ldd	r30, Y+54	; 0x36
    e334:	ff a9       	ldd	r31, Y+55	; 0x37
    e336:	81 a5       	ldd	r24, Z+41	; 0x29
    e338:	92 a5       	ldd	r25, Z+42	; 0x2a
    e33a:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e33c:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e33e:	ed b7       	in	r30, 0x3d	; 61
    e340:	fe b7       	in	r31, 0x3e	; 62
    e342:	84 83       	std	Z+4, r24	; 0x04
    e344:	95 83       	std	Z+5, r25	; 0x05
    e346:	a6 83       	std	Z+6, r26	; 0x06
    e348:	b7 83       	std	Z+7, r27	; 0x07
    e34a:	87 e7       	ldi	r24, 0x77	; 119
    e34c:	99 e0       	ldi	r25, 0x09	; 9
    e34e:	a0 e0       	ldi	r26, 0x00	; 0
    e350:	81 83       	std	Z+1, r24	; 0x01
    e352:	92 83       	std	Z+2, r25	; 0x02
    e354:	a3 83       	std	Z+3, r26	; 0x03
    e356:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e35a:	ee a9       	ldd	r30, Y+54	; 0x36
    e35c:	ff a9       	ldd	r31, Y+55	; 0x37
    e35e:	85 a5       	ldd	r24, Z+45	; 0x2d
    e360:	96 a5       	ldd	r25, Z+46	; 0x2e
    e362:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e364:	b0 a9       	ldd	r27, Z+48	; 0x30
    e366:	ed b7       	in	r30, 0x3d	; 61
    e368:	fe b7       	in	r31, 0x3e	; 62
    e36a:	84 83       	std	Z+4, r24	; 0x04
    e36c:	95 83       	std	Z+5, r25	; 0x05
    e36e:	a6 83       	std	Z+6, r26	; 0x06
    e370:	b7 83       	std	Z+7, r27	; 0x07
    e372:	88 e5       	ldi	r24, 0x58	; 88
    e374:	99 e0       	ldi	r25, 0x09	; 9
    e376:	a0 e0       	ldi	r26, 0x00	; 0
    e378:	81 83       	std	Z+1, r24	; 0x01
    e37a:	92 83       	std	Z+2, r25	; 0x02
    e37c:	a3 83       	std	Z+3, r26	; 0x03
    e37e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e382:	ae 01       	movw	r20, r28
    e384:	42 5d       	subi	r20, 0xD2	; 210
    e386:	5f 4f       	sbci	r21, 0xFF	; 255
    e388:	be 01       	movw	r22, r28
    e38a:	6c 5e       	subi	r22, 0xEC	; 236
    e38c:	7f 4f       	sbci	r23, 0xFF	; 255
    e38e:	c7 01       	movw	r24, r14
    e390:	0e 94 41 68 	call	0xd082	; 0xd082 <f_getlabel>
    if (res)
    e394:	89 2b       	or	r24, r25
    e396:	69 f0       	breq	.+26     	; 0xe3b2 <fatfs_status+0x1e6>
    {
        printf("fatfs_status f_getlabel failed\n");
    e398:	88 e3       	ldi	r24, 0x38	; 56
    e39a:	99 e0       	ldi	r25, 0x09	; 9
    e39c:	a0 e0       	ldi	r26, 0x00	; 0
    e39e:	ed b7       	in	r30, 0x3d	; 61
    e3a0:	fe b7       	in	r31, 0x3e	; 62
    e3a2:	81 83       	std	Z+1, r24	; 0x01
    e3a4:	92 83       	std	Z+2, r25	; 0x02
    e3a6:	a3 83       	std	Z+3, r26	; 0x03
    e3a8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        return(0);
    e3ac:	80 e0       	ldi	r24, 0x00	; 0
    e3ae:	90 e0       	ldi	r25, 0x00	; 0
    e3b0:	95 c0       	rjmp	.+298    	; 0xe4dc <fatfs_status+0x310>
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e3b2:	8c 89       	ldd	r24, Y+20	; 0x14
    e3b4:	81 11       	cpse	r24, r1
    e3b6:	03 c0       	rjmp	.+6      	; 0xe3be <fatfs_status+0x1f2>
    e3b8:	80 eb       	ldi	r24, 0xB0	; 176
    e3ba:	98 e0       	ldi	r25, 0x08	; 8
    e3bc:	02 c0       	rjmp	.+4      	; 0xe3c2 <fatfs_status+0x1f6>
    e3be:	ce 01       	movw	r24, r28
    e3c0:	44 96       	adiw	r24, 0x14	; 20
    e3c2:	ed b7       	in	r30, 0x3d	; 61
    e3c4:	fe b7       	in	r31, 0x3e	; 62
    e3c6:	95 83       	std	Z+5, r25	; 0x05
    e3c8:	84 83       	std	Z+4, r24	; 0x04
    e3ca:	8a e1       	ldi	r24, 0x1A	; 26
    e3cc:	99 e0       	ldi	r25, 0x09	; 9
    e3ce:	a0 e0       	ldi	r26, 0x00	; 0
    e3d0:	81 83       	std	Z+1, r24	; 0x01
    e3d2:	92 83       	std	Z+2, r25	; 0x02
    e3d4:	a3 83       	std	Z+3, r26	; 0x03
    e3d6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e3da:	8e a5       	ldd	r24, Y+46	; 0x2e
    e3dc:	9f a5       	ldd	r25, Y+47	; 0x2f
    e3de:	a8 a9       	ldd	r26, Y+48	; 0x30
    e3e0:	b9 a9       	ldd	r27, Y+49	; 0x31
    e3e2:	ed b7       	in	r30, 0x3d	; 61
    e3e4:	fe b7       	in	r31, 0x3e	; 62
    e3e6:	97 83       	std	Z+7, r25	; 0x07
    e3e8:	86 83       	std	Z+6, r24	; 0x06
    e3ea:	b5 83       	std	Z+5, r27	; 0x05
    e3ec:	a4 83       	std	Z+4, r26	; 0x04
    e3ee:	85 ef       	ldi	r24, 0xF5	; 245
    e3f0:	98 e0       	ldi	r25, 0x08	; 8
    e3f2:	a0 e0       	ldi	r26, 0x00	; 0
    e3f4:	81 83       	std	Z+1, r24	; 0x01
    e3f6:	92 83       	std	Z+2, r25	; 0x02
    e3f8:	a3 83       	std	Z+3, r26	; 0x03
    e3fa:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e3fe:	10 92 c2 1c 	sts	0x1CC2, r1	; 0x801cc2 <AccDirs+0x1>
    e402:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <AccDirs>
    e406:	10 92 c4 1c 	sts	0x1CC4, r1	; 0x801cc4 <AccFiles+0x1>
    e40a:	10 92 c3 1c 	sts	0x1CC3, r1	; 0x801cc3 <AccFiles>
    e40e:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <AccSize>
    e412:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <AccSize+0x1>
    e416:	10 92 bf 1c 	sts	0x1CBF, r1	; 0x801cbf <AccSize+0x2>
    e41a:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e41e:	c7 01       	movw	r24, r14
    e420:	56 de       	rcall	.-852    	; 0xe0ce <fatfs_scan_files>
    if (res)
    e422:	89 2b       	or	r24, r25
    e424:	19 f0       	breq	.+6      	; 0xe42c <fatfs_status+0x260>
    {
        printf("fatfs_status fatfs_scan_files failed\n");
    e426:	8f ec       	ldi	r24, 0xCF	; 207
    e428:	98 e0       	ldi	r25, 0x08	; 8
    e42a:	b8 cf       	rjmp	.-144    	; 0xe39c <fatfs_status+0x1d0>
        return(0);
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e42c:	0e a9       	ldd	r16, Y+54	; 0x36
    e42e:	1f a9       	ldd	r17, Y+55	; 0x37
    e430:	f8 01       	movw	r30, r16
    e432:	c1 84       	ldd	r12, Z+9	; 0x09
    e434:	d2 84       	ldd	r13, Z+10	; 0x0a
    e436:	e1 2c       	mov	r14, r1
    e438:	f1 2c       	mov	r15, r1
    e43a:	6a a9       	ldd	r22, Y+50	; 0x32
    e43c:	7b a9       	ldd	r23, Y+51	; 0x33
    e43e:	8c a9       	ldd	r24, Y+52	; 0x34
    e440:	9d a9       	ldd	r25, Y+53	; 0x35
    e442:	a7 01       	movw	r20, r14
    e444:	96 01       	movw	r18, r12
    e446:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <__mulsi3>
    e44a:	22 e0       	ldi	r18, 0x02	; 2
    e44c:	30 e0       	ldi	r19, 0x00	; 0
    e44e:	40 e0       	ldi	r20, 0x00	; 0
    e450:	50 e0       	ldi	r21, 0x00	; 0
    e452:	0e 94 68 e6 	call	0x1ccd0	; 0x1ccd0 <__divmodsi4>
    e456:	ed b7       	in	r30, 0x3d	; 61
    e458:	fe b7       	in	r31, 0x3e	; 62
    e45a:	20 8b       	std	Z+16, r18	; 0x10
    e45c:	31 8b       	std	Z+17, r19	; 0x11
    e45e:	42 8b       	std	Z+18, r20	; 0x12
    e460:	53 8b       	std	Z+19, r21	; 0x13
    e462:	f8 01       	movw	r30, r16
    e464:	81 8d       	ldd	r24, Z+25	; 0x19
    e466:	92 8d       	ldd	r25, Z+26	; 0x1a
    e468:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e46a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e46c:	9c 01       	movw	r18, r24
    e46e:	ad 01       	movw	r20, r26
    e470:	22 50       	subi	r18, 0x02	; 2
    e472:	31 09       	sbc	r19, r1
    e474:	41 09       	sbc	r20, r1
    e476:	51 09       	sbc	r21, r1
    e478:	c7 01       	movw	r24, r14
    e47a:	b6 01       	movw	r22, r12
    e47c:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <__mulsi3>
    e480:	dc 01       	movw	r26, r24
    e482:	cb 01       	movw	r24, r22
    e484:	b6 95       	lsr	r27
    e486:	a7 95       	ror	r26
    e488:	97 95       	ror	r25
    e48a:	87 95       	ror	r24
    e48c:	ed b7       	in	r30, 0x3d	; 61
    e48e:	fe b7       	in	r31, 0x3e	; 62
    e490:	84 87       	std	Z+12, r24	; 0x0c
    e492:	95 87       	std	Z+13, r25	; 0x0d
    e494:	a6 87       	std	Z+14, r26	; 0x0e
    e496:	b7 87       	std	Z+15, r27	; 0x0f
    e498:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <AccDirs>
    e49c:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <AccDirs+0x1>
    e4a0:	93 87       	std	Z+11, r25	; 0x0b
    e4a2:	82 87       	std	Z+10, r24	; 0x0a
    e4a4:	80 91 bd 1c 	lds	r24, 0x1CBD	; 0x801cbd <AccSize>
    e4a8:	90 91 be 1c 	lds	r25, 0x1CBE	; 0x801cbe <AccSize+0x1>
    e4ac:	a0 91 bf 1c 	lds	r26, 0x1CBF	; 0x801cbf <AccSize+0x2>
    e4b0:	b0 91 c0 1c 	lds	r27, 0x1CC0	; 0x801cc0 <AccSize+0x3>
    e4b4:	86 83       	std	Z+6, r24	; 0x06
    e4b6:	97 83       	std	Z+7, r25	; 0x07
    e4b8:	a0 87       	std	Z+8, r26	; 0x08
    e4ba:	b1 87       	std	Z+9, r27	; 0x09
    e4bc:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <AccFiles>
    e4c0:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <AccFiles+0x1>
    e4c4:	95 83       	std	Z+5, r25	; 0x05
    e4c6:	84 83       	std	Z+4, r24	; 0x04
    e4c8:	82 e8       	ldi	r24, 0x82	; 130
    e4ca:	98 e0       	ldi	r25, 0x08	; 8
    e4cc:	a0 e0       	ldi	r26, 0x00	; 0
    e4ce:	81 83       	std	Z+1, r24	; 0x01
    e4d0:	92 83       	std	Z+2, r25	; 0x02
    e4d2:	a3 83       	std	Z+3, r26	; 0x03
    e4d4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );
	return(1);
    e4d8:	81 e0       	ldi	r24, 0x01	; 1
    e4da:	90 e0       	ldi	r25, 0x00	; 0
}
    e4dc:	e7 96       	adiw	r28, 0x37	; 55
    e4de:	e8 e0       	ldi	r30, 0x08	; 8
    e4e0:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0000e4e4 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e4e4:	ab e1       	ldi	r26, 0x1B	; 27
    e4e6:	b0 e0       	ldi	r27, 0x00	; 0
    e4e8:	e8 e7       	ldi	r30, 0x78	; 120
    e4ea:	f2 e7       	ldi	r31, 0x72	; 114
    e4ec:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    e4f0:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e4f2:	fc 01       	movw	r30, r24
    e4f4:	86 89       	ldd	r24, Z+22	; 0x16
    e4f6:	81 11       	cpse	r24, r1
    e4f8:	03 c0       	rjmp	.+6      	; 0xe500 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e4fa:	87 e6       	ldi	r24, 0x67	; 103
    e4fc:	98 e0       	ldi	r25, 0x08	; 8
    e4fe:	69 c0       	rjmp	.+210    	; 0xe5d2 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e500:	fd 01       	movw	r30, r26
    e502:	80 85       	ldd	r24, Z+8	; 0x08
    e504:	84 fd       	sbrc	r24, 4
    e506:	02 c0       	rjmp	.+4      	; 0xe50c <fatfs_filinfo_list+0x28>
    e508:	9d e2       	ldi	r25, 0x2D	; 45
    e50a:	01 c0       	rjmp	.+2      	; 0xe50e <fatfs_filinfo_list+0x2a>
    e50c:	94 e4       	ldi	r25, 0x44	; 68
    e50e:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e510:	80 fd       	sbrc	r24, 0
    e512:	02 c0       	rjmp	.+4      	; 0xe518 <fatfs_filinfo_list+0x34>
    e514:	9d e2       	ldi	r25, 0x2D	; 45
    e516:	01 c0       	rjmp	.+2      	; 0xe51a <fatfs_filinfo_list+0x36>
    e518:	92 e5       	ldi	r25, 0x52	; 82
    e51a:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e51c:	81 fd       	sbrc	r24, 1
    e51e:	02 c0       	rjmp	.+4      	; 0xe524 <fatfs_filinfo_list+0x40>
    e520:	9d e2       	ldi	r25, 0x2D	; 45
    e522:	01 c0       	rjmp	.+2      	; 0xe526 <fatfs_filinfo_list+0x42>
    e524:	98 e4       	ldi	r25, 0x48	; 72
    e526:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e528:	82 fd       	sbrc	r24, 2
    e52a:	02 c0       	rjmp	.+4      	; 0xe530 <fatfs_filinfo_list+0x4c>
    e52c:	9d e2       	ldi	r25, 0x2D	; 45
    e52e:	01 c0       	rjmp	.+2      	; 0xe532 <fatfs_filinfo_list+0x4e>
    e530:	93 e5       	ldi	r25, 0x53	; 83
    e532:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e534:	85 fd       	sbrc	r24, 5
    e536:	02 c0       	rjmp	.+4      	; 0xe53c <fatfs_filinfo_list+0x58>
    e538:	8d e2       	ldi	r24, 0x2D	; 45
    e53a:	01 c0       	rjmp	.+2      	; 0xe53e <fatfs_filinfo_list+0x5a>
    e53c:	81 e4       	ldi	r24, 0x41	; 65
    e53e:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e540:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e542:	fd 01       	movw	r30, r26
    e544:	24 81       	ldd	r18, Z+4	; 0x04
    e546:	35 81       	ldd	r19, Z+5	; 0x05
    e548:	46 81       	ldd	r20, Z+6	; 0x06
    e54a:	57 81       	ldd	r21, Z+7	; 0x07
    e54c:	cd 01       	movw	r24, r26
    e54e:	46 96       	adiw	r24, 0x16	; 22
    e550:	ed b7       	in	r30, 0x3d	; 61
    e552:	fe b7       	in	r31, 0x3e	; 62
    e554:	95 8b       	std	Z+21, r25	; 0x15
    e556:	84 8b       	std	Z+20, r24	; 0x14
    e558:	8d 91       	ld	r24, X+
    e55a:	9d 91       	ld	r25, X+
    e55c:	0d 90       	ld	r0, X+
    e55e:	bc 91       	ld	r27, X
    e560:	a0 2d       	mov	r26, r0
    e562:	80 8b       	std	Z+16, r24	; 0x10
    e564:	91 8b       	std	Z+17, r25	; 0x11
    e566:	a2 8b       	std	Z+18, r26	; 0x12
    e568:	b3 8b       	std	Z+19, r27	; 0x13
    e56a:	ca 01       	movw	r24, r20
    e56c:	45 e0       	ldi	r20, 0x05	; 5
    e56e:	96 95       	lsr	r25
    e570:	87 95       	ror	r24
    e572:	4a 95       	dec	r20
    e574:	e1 f7       	brne	.-8      	; 0xe56e <fatfs_filinfo_list+0x8a>
    e576:	8f 73       	andi	r24, 0x3F	; 63
    e578:	99 27       	eor	r25, r25
    e57a:	97 87       	std	Z+15, r25	; 0x0f
    e57c:	86 87       	std	Z+14, r24	; 0x0e
    e57e:	85 2f       	mov	r24, r21
    e580:	86 95       	lsr	r24
    e582:	86 95       	lsr	r24
    e584:	86 95       	lsr	r24
    e586:	84 87       	std	Z+12, r24	; 0x0c
    e588:	15 86       	std	Z+13, r1	; 0x0d
    e58a:	c9 01       	movw	r24, r18
    e58c:	8f 71       	andi	r24, 0x1F	; 31
    e58e:	99 27       	eor	r25, r25
    e590:	93 87       	std	Z+11, r25	; 0x0b
    e592:	82 87       	std	Z+10, r24	; 0x0a
    e594:	c9 01       	movw	r24, r18
    e596:	55 e0       	ldi	r21, 0x05	; 5
    e598:	96 95       	lsr	r25
    e59a:	87 95       	ror	r24
    e59c:	5a 95       	dec	r21
    e59e:	e1 f7       	brne	.-8      	; 0xe598 <fatfs_filinfo_list+0xb4>
    e5a0:	8f 70       	andi	r24, 0x0F	; 15
    e5a2:	99 27       	eor	r25, r25
    e5a4:	91 87       	std	Z+9, r25	; 0x09
    e5a6:	80 87       	std	Z+8, r24	; 0x08
    e5a8:	23 2f       	mov	r18, r19
    e5aa:	33 27       	eor	r19, r19
    e5ac:	26 95       	lsr	r18
    e5ae:	24 54       	subi	r18, 0x44	; 68
    e5b0:	38 4f       	sbci	r19, 0xF8	; 248
    e5b2:	37 83       	std	Z+7, r19	; 0x07
    e5b4:	26 83       	std	Z+6, r18	; 0x06
    e5b6:	ce 01       	movw	r24, r28
    e5b8:	46 96       	adiw	r24, 0x16	; 22
    e5ba:	95 83       	std	Z+5, r25	; 0x05
    e5bc:	84 83       	std	Z+4, r24	; 0x04
    e5be:	85 e4       	ldi	r24, 0x45	; 69
    e5c0:	98 e0       	ldi	r25, 0x08	; 8
    e5c2:	a0 e0       	ldi	r26, 0x00	; 0
    e5c4:	81 83       	std	Z+1, r24	; 0x01
    e5c6:	92 83       	std	Z+2, r25	; 0x02
    e5c8:	a3 83       	std	Z+3, r26	; 0x03
    e5ca:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e5ce:	83 e4       	ldi	r24, 0x43	; 67
    e5d0:	98 e0       	ldi	r25, 0x08	; 8
    e5d2:	a0 e0       	ldi	r26, 0x00	; 0
    e5d4:	ed b7       	in	r30, 0x3d	; 61
    e5d6:	fe b7       	in	r31, 0x3e	; 62
    e5d8:	81 83       	std	Z+1, r24	; 0x01
    e5da:	92 83       	std	Z+2, r25	; 0x02
    e5dc:	a3 83       	std	Z+3, r26	; 0x03
    e5de:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
}
    e5e2:	6b 96       	adiw	r28, 0x1b	; 27
    e5e4:	e2 e0       	ldi	r30, 0x02	; 2
    e5e6:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

0000e5ea <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e5ea:	00 d0       	rcall	.+0      	; 0xe5ec <fatfs_help+0x2>
    e5ec:	1f 92       	push	r1
    if(full)
    e5ee:	89 2b       	or	r24, r25
    e5f0:	19 f0       	breq	.+6      	; 0xe5f8 <fatfs_help+0xe>
    {
        printf(
    e5f2:	81 e3       	ldi	r24, 0x31	; 49
    e5f4:	9b e0       	ldi	r25, 0x0B	; 11
    e5f6:	02 c0       	rjmp	.+4      	; 0xe5fc <fatfs_help+0x12>
            "\n"
            );
    }
	else
	{
		printf("fatfs     help\n");
    e5f8:	81 e2       	ldi	r24, 0x21	; 33
    e5fa:	9b e0       	ldi	r25, 0x0B	; 11
    e5fc:	a0 e0       	ldi	r26, 0x00	; 0
    e5fe:	ed b7       	in	r30, 0x3d	; 61
    e600:	fe b7       	in	r31, 0x3e	; 62
    e602:	81 83       	std	Z+1, r24	; 0x01
    e604:	92 83       	std	Z+2, r25	; 0x02
    e606:	a3 83       	std	Z+3, r26	; 0x03
    e608:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
	}

}
    e60c:	0f 90       	pop	r0
    e60e:	0f 90       	pop	r0
    e610:	0f 90       	pop	r0
    e612:	08 95       	ret

0000e614 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  1 on success or 0 on error
MEMSPACE
int fatfs_ls(char *name)
{
    e614:	a6 e5       	ldi	r26, 0x56	; 86
    e616:	b2 e0       	ldi	r27, 0x02	; 2
    e618:	e0 e1       	ldi	r30, 0x10	; 16
    e61a:	f3 e7       	ldi	r31, 0x73	; 115
    e61c:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__+0x10>
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[MAX_NAME_LEN+1];

	memset(buff,0,sizeof(buff)-1);
    e620:	8e 01       	movw	r16, r28
    e622:	0e 5d       	subi	r16, 0xDE	; 222
    e624:	1e 4f       	sbci	r17, 0xFE	; 254
    e626:	20 e0       	ldi	r18, 0x00	; 0
    e628:	31 e0       	ldi	r19, 0x01	; 1
    e62a:	f8 01       	movw	r30, r16
    e62c:	a9 01       	movw	r20, r18
    e62e:	11 92       	st	Z+, r1
    e630:	41 50       	subi	r20, 0x01	; 1
    e632:	50 40       	sbci	r21, 0x00	; 0
    e634:	e1 f7       	brne	.-8      	; 0xe62e <fatfs_ls+0x1a>

    if(!name || !*name)
    e636:	00 97       	sbiw	r24, 0x00	; 0
    e638:	21 f0       	breq	.+8      	; 0xe642 <fatfs_ls+0x2e>
    e63a:	fc 01       	movw	r30, r24
    e63c:	20 81       	ld	r18, Z
    e63e:	21 11       	cpse	r18, r1
    e640:	03 c0       	rjmp	.+6      	; 0xe648 <fatfs_ls+0x34>
    {
        strcpy(buff,".");
    e642:	68 ef       	ldi	r22, 0xF8	; 248
    e644:	72 e1       	ldi	r23, 0x12	; 18
    e646:	01 c0       	rjmp	.+2      	; 0xe64a <fatfs_ls+0x36>
    }
    else
    {
        strcpy(buff,name);
    e648:	bc 01       	movw	r22, r24
    e64a:	c8 01       	movw	r24, r16
    e64c:	0e 94 21 31 	call	0x6242	; 0x6242 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e650:	ed b7       	in	r30, 0x3d	; 61
    e652:	fe b7       	in	r31, 0x3e	; 62
    e654:	15 83       	std	Z+5, r17	; 0x05
    e656:	04 83       	std	Z+4, r16	; 0x04
    e658:	81 ee       	ldi	r24, 0xE1	; 225
    e65a:	9a e0       	ldi	r25, 0x0A	; 10
    e65c:	a0 e0       	ldi	r26, 0x00	; 0
    e65e:	81 83       	std	Z+1, r24	; 0x01
    e660:	92 83       	std	Z+2, r25	; 0x02
    e662:	a3 83       	std	Z+3, r26	; 0x03
    e664:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    res = f_opendir(&dirs, buff);
    e668:	b8 01       	movw	r22, r16
    e66a:	ce 01       	movw	r24, r28
    e66c:	8d 5d       	subi	r24, 0xDD	; 221
    e66e:	9d 4f       	sbci	r25, 0xFD	; 253
    e670:	0e 94 07 63 	call	0xc60e	; 0xc60e <f_opendir>
    if (res != FR_OK) 
    e674:	89 2b       	or	r24, r25
    e676:	09 f0       	breq	.+2      	; 0xe67a <fatfs_ls+0x66>
    e678:	96 c0       	rjmp	.+300    	; 0xe7a6 <fatfs_ls+0x192>
	{ 
		return(0); 
	}
    p1 = s1 = s2 = 0;
    e67a:	cf 5a       	subi	r28, 0xAF	; 175
    e67c:	dd 4f       	sbci	r29, 0xFD	; 253
    e67e:	18 82       	st	Y, r1
    e680:	19 82       	std	Y+1, r1	; 0x01
    e682:	1a 82       	std	Y+2, r1	; 0x02
    e684:	1b 82       	std	Y+3, r1	; 0x03
    e686:	c1 55       	subi	r28, 0x51	; 81
    e688:	d2 40       	sbci	r29, 0x02	; 2
    e68a:	a1 2c       	mov	r10, r1
    e68c:	b1 2c       	mov	r11, r1
    e68e:	c1 2c       	mov	r12, r1
    e690:	d1 2c       	mov	r13, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e692:	be 01       	movw	r22, r28
    e694:	64 5f       	subi	r22, 0xF4	; 244
    e696:	7f 4f       	sbci	r23, 0xFF	; 255
    e698:	ce 01       	movw	r24, r28
    e69a:	8d 5d       	subi	r24, 0xDD	; 221
    e69c:	9d 4f       	sbci	r25, 0xFD	; 253
    e69e:	0e 94 8d 63 	call	0xc71a	; 0xc71a <f_readdir>
    e6a2:	7c 01       	movw	r14, r24
        if (res != FR_OK) 
    e6a4:	89 2b       	or	r24, r25
    e6a6:	49 f5       	brne	.+82     	; 0xe6fa <fatfs_ls+0xe6>
			break;
		if(!fno.fname[0]) 
    e6a8:	8a a1       	ldd	r24, Y+34	; 0x22
    e6aa:	88 23       	and	r24, r24
    e6ac:	31 f1       	breq	.+76     	; 0xe6fa <fatfs_ls+0xe6>
			break;
        if (fno.fattrib & AM_DIR)
    e6ae:	8c 89       	ldd	r24, Y+20	; 0x14
    e6b0:	84 ff       	sbrs	r24, 4
    e6b2:	04 c0       	rjmp	.+8      	; 0xe6bc <fatfs_ls+0xa8>
        {
            s2++;
    e6b4:	ff ef       	ldi	r31, 0xFF	; 255
    e6b6:	af 1a       	sub	r10, r31
    e6b8:	bf 0a       	sbc	r11, r31
    e6ba:	1b c0       	rjmp	.+54     	; 0xe6f2 <fatfs_ls+0xde>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e6bc:	4f ef       	ldi	r20, 0xFF	; 255
    e6be:	c4 1a       	sub	r12, r20
    e6c0:	d4 0a       	sbc	r13, r20
    e6c2:	4c 85       	ldd	r20, Y+12	; 0x0c
    e6c4:	5d 85       	ldd	r21, Y+13	; 0x0d
    e6c6:	6e 85       	ldd	r22, Y+14	; 0x0e
    e6c8:	7f 85       	ldd	r23, Y+15	; 0x0f
    e6ca:	cf 5a       	subi	r28, 0xAF	; 175
    e6cc:	dd 4f       	sbci	r29, 0xFD	; 253
    e6ce:	88 81       	ld	r24, Y
    e6d0:	99 81       	ldd	r25, Y+1	; 0x01
    e6d2:	aa 81       	ldd	r26, Y+2	; 0x02
    e6d4:	bb 81       	ldd	r27, Y+3	; 0x03
    e6d6:	c1 55       	subi	r28, 0x51	; 81
    e6d8:	d2 40       	sbci	r29, 0x02	; 2
    e6da:	84 0f       	add	r24, r20
    e6dc:	95 1f       	adc	r25, r21
    e6de:	a6 1f       	adc	r26, r22
    e6e0:	b7 1f       	adc	r27, r23
    e6e2:	cf 5a       	subi	r28, 0xAF	; 175
    e6e4:	dd 4f       	sbci	r29, 0xFD	; 253
    e6e6:	88 83       	st	Y, r24
    e6e8:	99 83       	std	Y+1, r25	; 0x01
    e6ea:	aa 83       	std	Y+2, r26	; 0x02
    e6ec:	bb 83       	std	Y+3, r27	; 0x03
    e6ee:	c1 55       	subi	r28, 0x51	; 81
    e6f0:	d2 40       	sbci	r29, 0x02	; 2
        }
        fatfs_filinfo_list(&fno);
    e6f2:	ce 01       	movw	r24, r28
    e6f4:	0c 96       	adiw	r24, 0x0c	; 12
    e6f6:	f6 de       	rcall	.-532    	; 0xe4e4 <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e6f8:	cc cf       	rjmp	.-104    	; 0xe692 <fatfs_ls+0x7e>
	f_closedir(&dirs);
    e6fa:	ce 01       	movw	r24, r28
    e6fc:	8d 5d       	subi	r24, 0xDD	; 221
    e6fe:	9d 4f       	sbci	r25, 0xFD	; 253
    e700:	0e 94 78 63 	call	0xc6f0	; 0xc6f0 <f_closedir>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e704:	ed b7       	in	r30, 0x3d	; 61
    e706:	fe b7       	in	r31, 0x3e	; 62
    e708:	b3 86       	std	Z+11, r11	; 0x0b
    e70a:	a2 86       	std	Z+10, r10	; 0x0a
    e70c:	cf 5a       	subi	r28, 0xAF	; 175
    e70e:	dd 4f       	sbci	r29, 0xFD	; 253
    e710:	88 81       	ld	r24, Y
    e712:	99 81       	ldd	r25, Y+1	; 0x01
    e714:	aa 81       	ldd	r26, Y+2	; 0x02
    e716:	bb 81       	ldd	r27, Y+3	; 0x03
    e718:	c1 55       	subi	r28, 0x51	; 81
    e71a:	d2 40       	sbci	r29, 0x02	; 2
    e71c:	86 83       	std	Z+6, r24	; 0x06
    e71e:	97 83       	std	Z+7, r25	; 0x07
    e720:	a0 87       	std	Z+8, r26	; 0x08
    e722:	b1 87       	std	Z+9, r27	; 0x09
    e724:	d5 82       	std	Z+5, r13	; 0x05
    e726:	c4 82       	std	Z+4, r12	; 0x04
    e728:	88 eb       	ldi	r24, 0xB8	; 184
    e72a:	9a e0       	ldi	r25, 0x0A	; 10
    e72c:	a0 e0       	ldi	r26, 0x00	; 0
    e72e:	81 83       	std	Z+1, r24	; 0x01
    e730:	92 83       	std	Z+2, r25	; 0x02
    e732:	a3 83       	std	Z+3, r26	; 0x03
    e734:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e738:	ae 01       	movw	r20, r28
    e73a:	4b 5a       	subi	r20, 0xAB	; 171
    e73c:	5d 4f       	sbci	r21, 0xFD	; 253
    e73e:	be 01       	movw	r22, r28
    e740:	6f 5a       	subi	r22, 0xAF	; 175
    e742:	7d 4f       	sbci	r23, 0xFD	; 253
    e744:	c8 01       	movw	r24, r16
    e746:	0e 94 0f 64 	call	0xc81e	; 0xc81e <f_getfree>
    e74a:	89 2b       	or	r24, r25
    e74c:	31 f5       	brne	.+76     	; 0xe79a <fatfs_ls+0x186>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e74e:	cb 5a       	subi	r28, 0xAB	; 171
    e750:	dd 4f       	sbci	r29, 0xFD	; 253
    e752:	e8 81       	ld	r30, Y
    e754:	f9 81       	ldd	r31, Y+1	; 0x01
    e756:	c5 55       	subi	r28, 0x55	; 85
    e758:	d2 40       	sbci	r29, 0x02	; 2
    e75a:	a1 85       	ldd	r26, Z+9	; 0x09
    e75c:	b2 85       	ldd	r27, Z+10	; 0x0a
    e75e:	cf 5a       	subi	r28, 0xAF	; 175
    e760:	dd 4f       	sbci	r29, 0xFD	; 253
    e762:	28 81       	ld	r18, Y
    e764:	39 81       	ldd	r19, Y+1	; 0x01
    e766:	4a 81       	ldd	r20, Y+2	; 0x02
    e768:	5b 81       	ldd	r21, Y+3	; 0x03
    e76a:	c1 55       	subi	r28, 0x51	; 81
    e76c:	d2 40       	sbci	r29, 0x02	; 2
    e76e:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__muluhisi3>
    e772:	22 e0       	ldi	r18, 0x02	; 2
    e774:	30 e0       	ldi	r19, 0x00	; 0
    e776:	40 e0       	ldi	r20, 0x00	; 0
    e778:	50 e0       	ldi	r21, 0x00	; 0
    e77a:	0e 94 68 e6 	call	0x1ccd0	; 0x1ccd0 <__divmodsi4>
    e77e:	ed b7       	in	r30, 0x3d	; 61
    e780:	fe b7       	in	r31, 0x3e	; 62
    e782:	24 83       	std	Z+4, r18	; 0x04
    e784:	35 83       	std	Z+5, r19	; 0x05
    e786:	46 83       	std	Z+6, r20	; 0x06
    e788:	57 83       	std	Z+7, r21	; 0x07
    e78a:	83 ea       	ldi	r24, 0xA3	; 163
    e78c:	9a e0       	ldi	r25, 0x0A	; 10
    e78e:	a0 e0       	ldi	r26, 0x00	; 0
    e790:	81 83       	std	Z+1, r24	; 0x01
    e792:	92 83       	std	Z+2, r25	; 0x02
    e794:	a3 83       	std	Z+3, r26	; 0x03
    e796:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
	if(res)
    e79a:	e1 14       	cp	r14, r1
    e79c:	f1 04       	cpc	r15, r1
    e79e:	31 f4       	brne	.+12     	; 0xe7ac <fatfs_ls+0x198>
		return(-1);
	return(1);
    e7a0:	81 e0       	ldi	r24, 0x01	; 1
    e7a2:	90 e0       	ldi	r25, 0x00	; 0
    e7a4:	05 c0       	rjmp	.+10     	; 0xe7b0 <fatfs_ls+0x19c>
    printf("Listing:[%s]\n",buff);

    res = f_opendir(&dirs, buff);
    if (res != FR_OK) 
	{ 
		return(0); 
    e7a6:	80 e0       	ldi	r24, 0x00	; 0
    e7a8:	90 e0       	ldi	r25, 0x00	; 0
    e7aa:	02 c0       	rjmp	.+4      	; 0xe7b0 <fatfs_ls+0x19c>
	f_closedir(&dirs);
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
	if(res)
		return(-1);
    e7ac:	8f ef       	ldi	r24, 0xFF	; 255
    e7ae:	9f ef       	ldi	r25, 0xFF	; 255
	return(1);
}
    e7b0:	ca 5a       	subi	r28, 0xAA	; 170
    e7b2:	dd 4f       	sbci	r29, 0xFD	; 253
    e7b4:	ea e0       	ldi	r30, 0x0A	; 10
    e7b6:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__+0x10>

0000e7ba <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e7ba:	a4 e0       	ldi	r26, 0x04	; 4
    e7bc:	b1 e0       	ldi	r27, 0x01	; 1
    e7be:	e3 ee       	ldi	r30, 0xE3	; 227
    e7c0:	f3 e7       	ldi	r31, 0x73	; 115
    e7c2:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    char buff[MAX_NAME_LEN+1];

    sep();
    e7c6:	0e 94 ef 31 	call	0x63de	; 0x63de <sep>
    printf("START MMC TEST\n");
    e7ca:	81 e1       	ldi	r24, 0x11	; 17
    e7cc:	9b e0       	ldi	r25, 0x0B	; 11
    e7ce:	a0 e0       	ldi	r26, 0x00	; 0
    e7d0:	ed b7       	in	r30, 0x3d	; 61
    e7d2:	fe b7       	in	r31, 0x3e	; 62
    e7d4:	81 83       	std	Z+1, r24	; 0x01
    e7d6:	92 83       	std	Z+2, r25	; 0x02
    e7d8:	a3 83       	std	Z+3, r26	; 0x03
    e7da:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    strcpy(buff,"/");
    e7de:	66 ea       	ldi	r22, 0xA6	; 166
    e7e0:	78 e0       	ldi	r23, 0x08	; 8
    e7e2:	ce 01       	movw	r24, r28
    e7e4:	04 96       	adiw	r24, 0x04	; 4
    e7e6:	0e 94 21 31 	call	0x6242	; 0x6242 <strcpy>
    fatfs_status(buff);
    e7ea:	ce 01       	movw	r24, r28
    e7ec:	04 96       	adiw	r24, 0x04	; 4
    e7ee:	ee dc       	rcall	.-1572   	; 0xe1cc <fatfs_status>
    printf("MMC Directory List\n");
    e7f0:	8d ef       	ldi	r24, 0xFD	; 253
    e7f2:	9a e0       	ldi	r25, 0x0A	; 10
    e7f4:	a0 e0       	ldi	r26, 0x00	; 0
    e7f6:	ed b7       	in	r30, 0x3d	; 61
    e7f8:	fe b7       	in	r31, 0x3e	; 62
    e7fa:	81 83       	std	Z+1, r24	; 0x01
    e7fc:	92 83       	std	Z+2, r25	; 0x02
    e7fe:	a3 83       	std	Z+3, r26	; 0x03
    e800:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    fatfs_ls("/");
    e804:	86 ea       	ldi	r24, 0xA6	; 166
    e806:	98 e0       	ldi	r25, 0x08	; 8
    e808:	05 df       	rcall	.-502    	; 0xe614 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e80a:	8f ee       	ldi	r24, 0xEF	; 239
    e80c:	9a e0       	ldi	r25, 0x0A	; 10
    e80e:	a0 e0       	ldi	r26, 0x00	; 0
    e810:	ed b7       	in	r30, 0x3d	; 61
    e812:	fe b7       	in	r31, 0x3e	; 62
    e814:	81 83       	std	Z+1, r24	; 0x01
    e816:	92 83       	std	Z+2, r25	; 0x02
    e818:	a3 83       	std	Z+3, r26	; 0x03
    e81a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    sep();
    e81e:	0e 94 ef 31 	call	0x63de	; 0x63de <sep>
}
    e822:	cc 5f       	subi	r28, 0xFC	; 252
    e824:	de 4f       	sbci	r29, 0xFE	; 254
    e826:	e2 e0       	ldi	r30, 0x02	; 2
    e828:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

0000e82c <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e82c:	a4 e0       	ldi	r26, 0x04	; 4
    e82e:	b1 e0       	ldi	r27, 0x01	; 1
    e830:	ec e1       	ldi	r30, 0x1C	; 28
    e832:	f4 e7       	ldi	r31, 0x74	; 116
    e834:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    int ind;

    char buff[MAX_NAME_LEN+1];

    ind = 0;
    ptr = argv[ind];
    e838:	fb 01       	movw	r30, r22
    e83a:	20 81       	ld	r18, Z
    e83c:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e83e:	21 15       	cp	r18, r1
    e840:	31 05       	cpc	r19, r1
    e842:	19 f4       	brne	.+6      	; 0xe84a <fatfs_tests+0x1e>
        return(0);
    e844:	80 e0       	ldi	r24, 0x00	; 0
    e846:	90 e0       	ldi	r25, 0x00	; 0
    e848:	80 c0       	rjmp	.+256    	; 0xe94a <fatfs_tests+0x11e>
    e84a:	8b 01       	movw	r16, r22
    e84c:	6c 01       	movw	r12, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    e84e:	62 ed       	ldi	r22, 0xD2	; 210
    e850:	78 e0       	ldi	r23, 0x08	; 8
    e852:	c9 01       	movw	r24, r18
    e854:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
    e858:	89 2b       	or	r24, r25
    e85a:	a1 f3       	breq	.-24     	; 0xe844 <fatfs_tests+0x18>
    {
        ptr = argv[++ind];
    e85c:	f8 01       	movw	r30, r16
    e85e:	e2 80       	ldd	r14, Z+2	; 0x02
    e860:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCHI(ptr,"help") )
    e862:	e1 14       	cp	r14, r1
    e864:	f1 04       	cpc	r15, r1
    e866:	59 f4       	brne	.+22     	; 0xe87e <fatfs_tests+0x52>
MEMSPACE
void fatfs_help( int full)
{
    if(full)
    {
        printf(
    e868:	81 e3       	ldi	r24, 0x31	; 49
    e86a:	9b e0       	ldi	r25, 0x0B	; 11
    e86c:	a0 e0       	ldi	r26, 0x00	; 0
    e86e:	ed b7       	in	r30, 0x3d	; 61
    e870:	fe b7       	in	r31, 0x3e	; 62
    e872:	81 83       	std	Z+1, r24	; 0x01
    e874:	92 83       	std	Z+2, r25	; 0x02
    e876:	a3 83       	std	Z+3, r26	; 0x03
    e878:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    e87c:	40 c0       	rjmp	.+128    	; 0xe8fe <fatfs_tests+0xd2>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    {
        ptr = argv[++ind];
        if ( !ptr || MATCHI(ptr,"help") )
    e87e:	64 e7       	ldi	r22, 0x74	; 116
    e880:	76 e1       	ldi	r23, 0x16	; 22
    e882:	c7 01       	movw	r24, r14
    e884:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
    e888:	89 2b       	or	r24, r25
    e88a:	71 f7       	brne	.-36     	; 0xe868 <fatfs_tests+0x3c>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e88c:	68 ed       	ldi	r22, 0xD8	; 216
    e88e:	78 e0       	ldi	r23, 0x08	; 8
    e890:	c7 01       	movw	r24, r14
    e892:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
    e896:	89 2b       	or	r24, r25
    e898:	31 f0       	breq	.+12     	; 0xe8a6 <fatfs_tests+0x7a>
    e89a:	0c 5f       	subi	r16, 0xFC	; 252
    e89c:	1f 4f       	sbci	r17, 0xFF	; 255
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e89e:	82 e0       	ldi	r24, 0x02	; 2
    e8a0:	e8 2e       	mov	r14, r24
    e8a2:	f1 2c       	mov	r15, r1
    e8a4:	12 c0       	rjmp	.+36     	; 0xe8ca <fatfs_tests+0x9e>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e8a6:	68 ed       	ldi	r22, 0xD8	; 216
    e8a8:	7b e0       	ldi	r23, 0x0B	; 11
    e8aa:	c7 01       	movw	r24, r14
    e8ac:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
    e8b0:	89 2b       	or	r24, r25
    e8b2:	99 f7       	brne	.-26     	; 0xe89a <fatfs_tests+0x6e>
    e8b4:	19 c0       	rjmp	.+50     	; 0xe8e8 <fatfs_tests+0xbc>
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
    e8b6:	f8 01       	movw	r30, r16
    e8b8:	81 91       	ld	r24, Z+
    e8ba:	91 91       	ld	r25, Z+
    e8bc:	8f 01       	movw	r16, r30
    e8be:	aa de       	rcall	.-684    	; 0xe614 <fatfs_ls>
    e8c0:	89 2b       	or	r24, r25
    e8c2:	79 f0       	breq	.+30     	; 0xe8e2 <fatfs_tests+0xb6>

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
    e8c4:	ff ef       	ldi	r31, 0xFF	; 255
    e8c6:	ef 1a       	sub	r14, r31
    e8c8:	ff 0a       	sbc	r15, r31
    e8ca:	ec 14       	cp	r14, r12
    e8cc:	fd 04       	cpc	r15, r13
    e8ce:	9c f3       	brlt	.-26     	; 0xe8b6 <fatfs_tests+0x8a>
			{
				return(-1);
			}
            ++args;
        }
        if(!args)
    e8d0:	82 e0       	ldi	r24, 0x02	; 2
    e8d2:	e8 16       	cp	r14, r24
    e8d4:	f1 04       	cpc	r15, r1
    e8d6:	99 f4       	brne	.+38     	; 0xe8fe <fatfs_tests+0xd2>
        {
            if(fatfs_ls("") == 0)
    e8d8:	80 e2       	ldi	r24, 0x20	; 32
    e8da:	9c e0       	ldi	r25, 0x0C	; 12
    e8dc:	9b de       	rcall	.-714    	; 0xe614 <fatfs_ls>
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    {
        strcpy(buff,"/");
        if(fatfs_status(buff)== 0)
    e8de:	89 2b       	or	r24, r25
    e8e0:	71 f4       	brne	.+28     	; 0xe8fe <fatfs_tests+0xd2>
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
			{
				return(-1);
    e8e2:	8f ef       	ldi	r24, 0xFF	; 255
    e8e4:	9f ef       	ldi	r25, 0xFF	; 255
    e8e6:	31 c0       	rjmp	.+98     	; 0xe94a <fatfs_tests+0x11e>
			}
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e8e8:	96 01       	movw	r18, r12
    e8ea:	41 e0       	ldi	r20, 0x01	; 1
    e8ec:	50 e0       	ldi	r21, 0x00	; 0
    e8ee:	6b ed       	ldi	r22, 0xDB	; 219
    e8f0:	78 e0       	ldi	r23, 0x08	; 8
    e8f2:	c7 01       	movw	r24, r14
    e8f4:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
    e8f8:	89 2b       	or	r24, r25
    {
        mmc_test();
    e8fa:	21 f0       	breq	.+8      	; 0xe904 <fatfs_tests+0xd8>
    e8fc:	5e df       	rcall	.-324    	; 0xe7ba <mmc_test>
        return(1);
    e8fe:	81 e0       	ldi	r24, 0x01	; 1
    e900:	90 e0       	ldi	r25, 0x00	; 0
    e902:	23 c0       	rjmp	.+70     	; 0xe94a <fatfs_tests+0x11e>
    }

    else if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e904:	96 01       	movw	r18, r12
    e906:	41 e0       	ldi	r20, 0x01	; 1
    e908:	50 e0       	ldi	r21, 0x00	; 0
    e90a:	64 ee       	ldi	r22, 0xE4	; 228
    e90c:	78 e0       	ldi	r23, 0x08	; 8
    e90e:	c7 01       	movw	r24, r14
    e910:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
    e914:	89 2b       	or	r24, r25
    {
        mmc_init(1);
    e916:	21 f0       	breq	.+8      	; 0xe920 <fatfs_tests+0xf4>
    e918:	81 e0       	ldi	r24, 0x01	; 1
    e91a:	90 e0       	ldi	r25, 0x00	; 0
    e91c:	70 da       	rcall	.-2848   	; 0xddfe <mmc_init>
    e91e:	ef cf       	rjmp	.-34     	; 0xe8fe <fatfs_tests+0xd2>
        return(1);
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e920:	96 01       	movw	r18, r12
    e922:	42 e0       	ldi	r20, 0x02	; 2
    e924:	50 e0       	ldi	r21, 0x00	; 0
    e926:	6d ee       	ldi	r22, 0xED	; 237
    e928:	78 e0       	ldi	r23, 0x08	; 8
    e92a:	c7 01       	movw	r24, r14
    e92c:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
    e930:	89 2b       	or	r24, r25
    e932:	09 f4       	brne	.+2      	; 0xe936 <fatfs_tests+0x10a>
    e934:	87 cf       	rjmp	.-242    	; 0xe844 <fatfs_tests+0x18>
    {
        strcpy(buff,"/");
    e936:	66 ea       	ldi	r22, 0xA6	; 166
    e938:	78 e0       	ldi	r23, 0x08	; 8
    e93a:	ce 01       	movw	r24, r28
    e93c:	04 96       	adiw	r24, 0x04	; 4
    e93e:	0e 94 21 31 	call	0x6242	; 0x6242 <strcpy>
        if(fatfs_status(buff)== 0)
    e942:	ce 01       	movw	r24, r28
    e944:	04 96       	adiw	r24, 0x04	; 4
    e946:	42 dc       	rcall	.-1916   	; 0xe1cc <fatfs_status>
    e948:	ca cf       	rjmp	.-108    	; 0xe8de <fatfs_tests+0xb2>
        return(1);
    }
#endif

    return(0);
}
    e94a:	cc 5f       	subi	r28, 0xFC	; 252
    e94c:	de 4f       	sbci	r29, 0xFE	; 254
    e94e:	e8 e0       	ldi	r30, 0x08	; 8
    e950:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0000e954 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e954:	8f 92       	push	r8
    e956:	9f 92       	push	r9
    e958:	af 92       	push	r10
    e95a:	bf 92       	push	r11
    e95c:	ef 92       	push	r14
    e95e:	ff 92       	push	r15
    e960:	0f 93       	push	r16
    e962:	1f 93       	push	r17
    e964:	cf 93       	push	r28
    e966:	df 93       	push	r29
    e968:	00 d0       	rcall	.+0      	; 0xe96a <fatfs_getc+0x16>
    e96a:	1f 92       	push	r1
    e96c:	cd b7       	in	r28, 0x3d	; 61
    e96e:	de b7       	in	r29, 0x3e	; 62
    e970:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    e974:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    e978:	00 97       	sbiw	r24, 0x00	; 0
    e97a:	39 f4       	brne	.+14     	; 0xe98a <fatfs_getc+0x36>
    e97c:	89 e0       	ldi	r24, 0x09	; 9
    e97e:	90 e0       	ldi	r25, 0x00	; 0
    e980:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    e984:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    e988:	2f c0       	rjmp	.+94     	; 0xe9e8 <fatfs_getc+0x94>
    e98a:	fc 01       	movw	r30, r24
    e98c:	e4 84       	ldd	r14, Z+12	; 0x0c
    e98e:	f5 84       	ldd	r15, Z+13	; 0x0d
    e990:	e1 14       	cp	r14, r1
    e992:	f1 04       	cpc	r15, r1
    e994:	99 f3       	breq	.-26     	; 0xe97c <fatfs_getc+0x28>
    e996:	8c 01       	movw	r16, r24
    e998:	9e 01       	movw	r18, r28
    e99a:	2f 5f       	subi	r18, 0xFF	; 255
    e99c:	3f 4f       	sbci	r19, 0xFF	; 255
    e99e:	41 e0       	ldi	r20, 0x01	; 1
    e9a0:	50 e0       	ldi	r21, 0x00	; 0
    e9a2:	be 01       	movw	r22, r28
    e9a4:	6d 5f       	subi	r22, 0xFD	; 253
    e9a6:	7f 4f       	sbci	r23, 0xFF	; 255
    e9a8:	c7 01       	movw	r24, r14
    e9aa:	0e 94 40 5b 	call	0xb680	; 0xb680 <f_read>
    e9ae:	00 97       	sbiw	r24, 0x00	; 0
    e9b0:	31 f4       	brne	.+12     	; 0xe9be <fatfs_getc+0x6a>
    e9b2:	29 81       	ldd	r18, Y+1	; 0x01
    e9b4:	3a 81       	ldd	r19, Y+2	; 0x02
    e9b6:	21 30       	cpi	r18, 0x01	; 1
    e9b8:	31 05       	cpc	r19, r1
    e9ba:	c9 f0       	breq	.+50     	; 0xe9ee <fatfs_getc+0x9a>
    e9bc:	03 c0       	rjmp	.+6      	; 0xe9c4 <fatfs_getc+0x70>
    e9be:	84 31       	cpi	r24, 0x14	; 20
    e9c0:	91 05       	cpc	r25, r1
    e9c2:	40 f4       	brcc	.+16     	; 0xe9d4 <fatfs_getc+0x80>
    e9c4:	fc 01       	movw	r30, r24
    e9c6:	ea 55       	subi	r30, 0x5A	; 90
    e9c8:	f4 4f       	sbci	r31, 0xF4	; 244
    e9ca:	80 81       	ld	r24, Z
    e9cc:	08 2e       	mov	r0, r24
    e9ce:	00 0c       	add	r0, r0
    e9d0:	99 0b       	sbc	r25, r25
    e9d2:	02 c0       	rjmp	.+4      	; 0xe9d8 <fatfs_getc+0x84>
    e9d4:	83 e2       	ldi	r24, 0x23	; 35
    e9d6:	90 e0       	ldi	r25, 0x00	; 0
    e9d8:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    e9dc:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    e9e0:	f8 01       	movw	r30, r16
    e9e2:	83 81       	ldd	r24, Z+3	; 0x03
    e9e4:	80 62       	ori	r24, 0x20	; 32
    e9e6:	83 83       	std	Z+3, r24	; 0x03
    e9e8:	8f ef       	ldi	r24, 0xFF	; 255
    e9ea:	9f ef       	ldi	r25, 0xFF	; 255
    e9ec:	28 c0       	rjmp	.+80     	; 0xea3e <fatfs_getc+0xea>
    e9ee:	8b 81       	ldd	r24, Y+3	; 0x03
    e9f0:	8d 30       	cpi	r24, 0x0D	; 13
    e9f2:	01 f5       	brne	.+64     	; 0xea34 <fatfs_getc+0xe0>
    e9f4:	f7 01       	movw	r30, r14
    e9f6:	80 88       	ldd	r8, Z+16	; 0x10
    e9f8:	91 88       	ldd	r9, Z+17	; 0x11
    e9fa:	a2 88       	ldd	r10, Z+18	; 0x12
    e9fc:	b3 88       	ldd	r11, Z+19	; 0x13
    e9fe:	9e 01       	movw	r18, r28
    ea00:	2f 5f       	subi	r18, 0xFF	; 255
    ea02:	3f 4f       	sbci	r19, 0xFF	; 255
    ea04:	41 e0       	ldi	r20, 0x01	; 1
    ea06:	50 e0       	ldi	r21, 0x00	; 0
    ea08:	be 01       	movw	r22, r28
    ea0a:	6d 5f       	subi	r22, 0xFD	; 253
    ea0c:	7f 4f       	sbci	r23, 0xFF	; 255
    ea0e:	c7 01       	movw	r24, r14
    ea10:	0e 94 40 5b 	call	0xb680	; 0xb680 <f_read>
    ea14:	89 2b       	or	r24, r25
    ea16:	89 f4       	brne	.+34     	; 0xea3a <fatfs_getc+0xe6>
    ea18:	89 81       	ldd	r24, Y+1	; 0x01
    ea1a:	9a 81       	ldd	r25, Y+2	; 0x02
    ea1c:	01 97       	sbiw	r24, 0x01	; 1
    ea1e:	69 f4       	brne	.+26     	; 0xea3a <fatfs_getc+0xe6>
    ea20:	8b 81       	ldd	r24, Y+3	; 0x03
    ea22:	8a 30       	cpi	r24, 0x0A	; 10
    ea24:	31 f0       	breq	.+12     	; 0xea32 <fatfs_getc+0xde>
    ea26:	b5 01       	movw	r22, r10
    ea28:	a4 01       	movw	r20, r8
    ea2a:	c7 01       	movw	r24, r14
    ea2c:	0e 94 4c 60 	call	0xc098	; 0xc098 <f_lseek>
    ea30:	04 c0       	rjmp	.+8      	; 0xea3a <fatfs_getc+0xe6>
    ea32:	8b 83       	std	Y+3, r24	; 0x03
    ea34:	8b 81       	ldd	r24, Y+3	; 0x03
    ea36:	90 e0       	ldi	r25, 0x00	; 0
    ea38:	02 c0       	rjmp	.+4      	; 0xea3e <fatfs_getc+0xea>
    ea3a:	8a e0       	ldi	r24, 0x0A	; 10
    ea3c:	90 e0       	ldi	r25, 0x00	; 0
    ea3e:	0f 90       	pop	r0
    ea40:	0f 90       	pop	r0
    ea42:	0f 90       	pop	r0
    ea44:	df 91       	pop	r29
    ea46:	cf 91       	pop	r28
    ea48:	1f 91       	pop	r17
    ea4a:	0f 91       	pop	r16
    ea4c:	ff 90       	pop	r15
    ea4e:	ef 90       	pop	r14
    ea50:	bf 90       	pop	r11
    ea52:	af 90       	pop	r10
    ea54:	9f 90       	pop	r9
    ea56:	8f 90       	pop	r8
    ea58:	08 95       	ret

0000ea5a <fatfs_putc>:
    ea5a:	a3 e0       	ldi	r26, 0x03	; 3
    ea5c:	b0 e0       	ldi	r27, 0x00	; 0
    ea5e:	e3 e3       	ldi	r30, 0x33	; 51
    ea60:	f5 e7       	ldi	r31, 0x75	; 117
    ea62:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
    ea66:	8b 83       	std	Y+3, r24	; 0x03
    ea68:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ea6c:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ea70:	61 15       	cp	r22, r1
    ea72:	71 05       	cpc	r23, r1
    ea74:	39 f4       	brne	.+14     	; 0xea84 <fatfs_putc+0x2a>
    ea76:	89 e0       	ldi	r24, 0x09	; 9
    ea78:	90 e0       	ldi	r25, 0x00	; 0
    ea7a:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ea7e:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ea82:	2d c0       	rjmp	.+90     	; 0xeade <fatfs_putc+0x84>
    ea84:	fb 01       	movw	r30, r22
    ea86:	84 85       	ldd	r24, Z+12	; 0x0c
    ea88:	95 85       	ldd	r25, Z+13	; 0x0d
    ea8a:	00 97       	sbiw	r24, 0x00	; 0
    ea8c:	a1 f3       	breq	.-24     	; 0xea76 <fatfs_putc+0x1c>
    ea8e:	8b 01       	movw	r16, r22
    ea90:	9e 01       	movw	r18, r28
    ea92:	2f 5f       	subi	r18, 0xFF	; 255
    ea94:	3f 4f       	sbci	r19, 0xFF	; 255
    ea96:	41 e0       	ldi	r20, 0x01	; 1
    ea98:	50 e0       	ldi	r21, 0x00	; 0
    ea9a:	be 01       	movw	r22, r28
    ea9c:	6d 5f       	subi	r22, 0xFD	; 253
    ea9e:	7f 4f       	sbci	r23, 0xFF	; 255
    eaa0:	0e 94 8b 5c 	call	0xb916	; 0xb916 <f_write>
    eaa4:	00 97       	sbiw	r24, 0x00	; 0
    eaa6:	31 f4       	brne	.+12     	; 0xeab4 <fatfs_putc+0x5a>
    eaa8:	29 81       	ldd	r18, Y+1	; 0x01
    eaaa:	3a 81       	ldd	r19, Y+2	; 0x02
    eaac:	21 30       	cpi	r18, 0x01	; 1
    eaae:	31 05       	cpc	r19, r1
    eab0:	c9 f0       	breq	.+50     	; 0xeae4 <fatfs_putc+0x8a>
    eab2:	03 c0       	rjmp	.+6      	; 0xeaba <fatfs_putc+0x60>
    eab4:	84 31       	cpi	r24, 0x14	; 20
    eab6:	91 05       	cpc	r25, r1
    eab8:	40 f4       	brcc	.+16     	; 0xeaca <fatfs_putc+0x70>
    eaba:	fc 01       	movw	r30, r24
    eabc:	ea 55       	subi	r30, 0x5A	; 90
    eabe:	f4 4f       	sbci	r31, 0xF4	; 244
    eac0:	80 81       	ld	r24, Z
    eac2:	08 2e       	mov	r0, r24
    eac4:	00 0c       	add	r0, r0
    eac6:	99 0b       	sbc	r25, r25
    eac8:	02 c0       	rjmp	.+4      	; 0xeace <fatfs_putc+0x74>
    eaca:	83 e2       	ldi	r24, 0x23	; 35
    eacc:	90 e0       	ldi	r25, 0x00	; 0
    eace:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ead2:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ead6:	f8 01       	movw	r30, r16
    ead8:	83 81       	ldd	r24, Z+3	; 0x03
    eada:	80 62       	ori	r24, 0x20	; 32
    eadc:	83 83       	std	Z+3, r24	; 0x03
    eade:	8f ef       	ldi	r24, 0xFF	; 255
    eae0:	9f ef       	ldi	r25, 0xFF	; 255
    eae2:	02 c0       	rjmp	.+4      	; 0xeae8 <fatfs_putc+0x8e>
    eae4:	8b 81       	ldd	r24, Y+3	; 0x03
    eae6:	90 e0       	ldi	r25, 0x00	; 0
    eae8:	23 96       	adiw	r28, 0x03	; 3
    eaea:	e4 e0       	ldi	r30, 0x04	; 4
    eaec:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

0000eaf0 <fgetc>:
    eaf0:	cf 93       	push	r28
    eaf2:	df 93       	push	r29
    eaf4:	00 d0       	rcall	.+0      	; 0xeaf6 <fgetc+0x6>
    eaf6:	1f 92       	push	r1
    eaf8:	ec 01       	movw	r28, r24
    eafa:	00 97       	sbiw	r24, 0x00	; 0
    eafc:	39 f4       	brne	.+14     	; 0xeb0c <fgetc+0x1c>
    eafe:	89 e0       	ldi	r24, 0x09	; 9
    eb00:	90 e0       	ldi	r25, 0x00	; 0
    eb02:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    eb06:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    eb0a:	40 c0       	rjmp	.+128    	; 0xeb8c <fgetc+0x9c>
    eb0c:	2b 81       	ldd	r18, Y+3	; 0x03
    eb0e:	20 ff       	sbrs	r18, 0
    eb10:	3d c0       	rjmp	.+122    	; 0xeb8c <fgetc+0x9c>
    eb12:	26 ff       	sbrs	r18, 6
    eb14:	0a c0       	rjmp	.+20     	; 0xeb2a <fgetc+0x3a>
    eb16:	2f 7b       	andi	r18, 0xBF	; 191
    eb18:	2b 83       	std	Y+3, r18	; 0x03
    eb1a:	8e 81       	ldd	r24, Y+6	; 0x06
    eb1c:	9f 81       	ldd	r25, Y+7	; 0x07
    eb1e:	01 96       	adiw	r24, 0x01	; 1
    eb20:	9f 83       	std	Y+7, r25	; 0x07
    eb22:	8e 83       	std	Y+6, r24	; 0x06
    eb24:	8a 81       	ldd	r24, Y+2	; 0x02
    eb26:	90 e0       	ldi	r25, 0x00	; 0
    eb28:	33 c0       	rjmp	.+102    	; 0xeb90 <fgetc+0xa0>
    eb2a:	22 ff       	sbrs	r18, 2
    eb2c:	0d c0       	rjmp	.+26     	; 0xeb48 <fgetc+0x58>
    eb2e:	e8 81       	ld	r30, Y
    eb30:	f9 81       	ldd	r31, Y+1	; 0x01
    eb32:	80 81       	ld	r24, Z
    eb34:	90 e0       	ldi	r25, 0x00	; 0
    eb36:	00 97       	sbiw	r24, 0x00	; 0
    eb38:	19 f4       	brne	.+6      	; 0xeb40 <fgetc+0x50>
    eb3a:	20 62       	ori	r18, 0x20	; 32
    eb3c:	2b 83       	std	Y+3, r18	; 0x03
    eb3e:	26 c0       	rjmp	.+76     	; 0xeb8c <fgetc+0x9c>
    eb40:	31 96       	adiw	r30, 0x01	; 1
    eb42:	f9 83       	std	Y+1, r31	; 0x01
    eb44:	e8 83       	st	Y, r30
    eb46:	1b c0       	rjmp	.+54     	; 0xeb7e <fgetc+0x8e>
    eb48:	ea 85       	ldd	r30, Y+10	; 0x0a
    eb4a:	fb 85       	ldd	r31, Y+11	; 0x0b
    eb4c:	30 97       	sbiw	r30, 0x00	; 0
    eb4e:	59 f4       	brne	.+22     	; 0xeb66 <fgetc+0x76>
    eb50:	8e ed       	ldi	r24, 0xDE	; 222
    eb52:	9b e0       	ldi	r25, 0x0B	; 11
    eb54:	a0 e0       	ldi	r26, 0x00	; 0
    eb56:	ed b7       	in	r30, 0x3d	; 61
    eb58:	fe b7       	in	r31, 0x3e	; 62
    eb5a:	81 83       	std	Z+1, r24	; 0x01
    eb5c:	92 83       	std	Z+2, r25	; 0x02
    eb5e:	a3 83       	std	Z+3, r26	; 0x03
    eb60:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    eb64:	13 c0       	rjmp	.+38     	; 0xeb8c <fgetc+0x9c>
    eb66:	09 95       	icall
    eb68:	97 ff       	sbrs	r25, 7
    eb6a:	09 c0       	rjmp	.+18     	; 0xeb7e <fgetc+0x8e>
    eb6c:	2b 81       	ldd	r18, Y+3	; 0x03
    eb6e:	02 96       	adiw	r24, 0x02	; 2
    eb70:	11 f0       	breq	.+4      	; 0xeb76 <fgetc+0x86>
    eb72:	80 e2       	ldi	r24, 0x20	; 32
    eb74:	01 c0       	rjmp	.+2      	; 0xeb78 <fgetc+0x88>
    eb76:	80 e1       	ldi	r24, 0x10	; 16
    eb78:	82 2b       	or	r24, r18
    eb7a:	8b 83       	std	Y+3, r24	; 0x03
    eb7c:	07 c0       	rjmp	.+14     	; 0xeb8c <fgetc+0x9c>
    eb7e:	2e 81       	ldd	r18, Y+6	; 0x06
    eb80:	3f 81       	ldd	r19, Y+7	; 0x07
    eb82:	2f 5f       	subi	r18, 0xFF	; 255
    eb84:	3f 4f       	sbci	r19, 0xFF	; 255
    eb86:	3f 83       	std	Y+7, r19	; 0x07
    eb88:	2e 83       	std	Y+6, r18	; 0x06
    eb8a:	02 c0       	rjmp	.+4      	; 0xeb90 <fgetc+0xa0>
    eb8c:	8f ef       	ldi	r24, 0xFF	; 255
    eb8e:	9f ef       	ldi	r25, 0xFF	; 255
    eb90:	cd b7       	in	r28, 0x3d	; 61
    eb92:	de b7       	in	r29, 0x3e	; 62
    eb94:	23 96       	adiw	r28, 0x03	; 3
    eb96:	e2 e0       	ldi	r30, 0x02	; 2
    eb98:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

0000eb9c <fputc>:
    eb9c:	cf 93       	push	r28
    eb9e:	df 93       	push	r29
    eba0:	00 d0       	rcall	.+0      	; 0xeba2 <fputc+0x6>
    eba2:	1f 92       	push	r1
    eba4:	eb 01       	movw	r28, r22
    eba6:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ebaa:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ebae:	20 91 c9 1c 	lds	r18, 0x1CC9	; 0x801cc9 <__iob+0x2>
    ebb2:	30 91 ca 1c 	lds	r19, 0x1CCA	; 0x801cca <__iob+0x3>
    ebb6:	62 17       	cp	r22, r18
    ebb8:	73 07       	cpc	r23, r19
    ebba:	49 f0       	breq	.+18     	; 0xebce <fputc+0x32>
    ebbc:	20 91 cb 1c 	lds	r18, 0x1CCB	; 0x801ccb <__iob+0x4>
    ebc0:	30 91 cc 1c 	lds	r19, 0x1CCC	; 0x801ccc <__iob+0x5>
    ebc4:	62 17       	cp	r22, r18
    ebc6:	73 07       	cpc	r23, r19
    ebc8:	11 f0       	breq	.+4      	; 0xebce <fputc+0x32>
    ebca:	47 df       	rcall	.-370    	; 0xea5a <fatfs_putc>
    ebcc:	33 c0       	rjmp	.+102    	; 0xec34 <fputc+0x98>
    ebce:	2b 81       	ldd	r18, Y+3	; 0x03
    ebd0:	21 ff       	sbrs	r18, 1
    ebd2:	2e c0       	rjmp	.+92     	; 0xec30 <fputc+0x94>
    ebd4:	22 ff       	sbrs	r18, 2
    ebd6:	10 c0       	rjmp	.+32     	; 0xebf8 <fputc+0x5c>
    ebd8:	4e 81       	ldd	r20, Y+6	; 0x06
    ebda:	5f 81       	ldd	r21, Y+7	; 0x07
    ebdc:	2c 81       	ldd	r18, Y+4	; 0x04
    ebde:	3d 81       	ldd	r19, Y+5	; 0x05
    ebe0:	42 17       	cp	r20, r18
    ebe2:	53 07       	cpc	r21, r19
    ebe4:	f4 f4       	brge	.+60     	; 0xec22 <fputc+0x86>
    ebe6:	e8 81       	ld	r30, Y
    ebe8:	f9 81       	ldd	r31, Y+1	; 0x01
    ebea:	9f 01       	movw	r18, r30
    ebec:	2f 5f       	subi	r18, 0xFF	; 255
    ebee:	3f 4f       	sbci	r19, 0xFF	; 255
    ebf0:	39 83       	std	Y+1, r19	; 0x01
    ebf2:	28 83       	st	Y, r18
    ebf4:	80 83       	st	Z, r24
    ebf6:	15 c0       	rjmp	.+42     	; 0xec22 <fputc+0x86>
    ebf8:	e8 85       	ldd	r30, Y+8	; 0x08
    ebfa:	f9 85       	ldd	r31, Y+9	; 0x09
    ebfc:	30 97       	sbiw	r30, 0x00	; 0
    ebfe:	59 f4       	brne	.+22     	; 0xec16 <fputc+0x7a>
    ec00:	86 ec       	ldi	r24, 0xC6	; 198
    ec02:	9b e0       	ldi	r25, 0x0B	; 11
    ec04:	a0 e0       	ldi	r26, 0x00	; 0
    ec06:	ed b7       	in	r30, 0x3d	; 61
    ec08:	fe b7       	in	r31, 0x3e	; 62
    ec0a:	81 83       	std	Z+1, r24	; 0x01
    ec0c:	92 83       	std	Z+2, r25	; 0x02
    ec0e:	a3 83       	std	Z+3, r26	; 0x03
    ec10:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    ec14:	0d c0       	rjmp	.+26     	; 0xec30 <fputc+0x94>
    ec16:	be 01       	movw	r22, r28
    ec18:	09 95       	icall
    ec1a:	8f 3f       	cpi	r24, 0xFF	; 255
    ec1c:	ff ef       	ldi	r31, 0xFF	; 255
    ec1e:	9f 07       	cpc	r25, r31
    ec20:	39 f0       	breq	.+14     	; 0xec30 <fputc+0x94>
    ec22:	2e 81       	ldd	r18, Y+6	; 0x06
    ec24:	3f 81       	ldd	r19, Y+7	; 0x07
    ec26:	2f 5f       	subi	r18, 0xFF	; 255
    ec28:	3f 4f       	sbci	r19, 0xFF	; 255
    ec2a:	3f 83       	std	Y+7, r19	; 0x07
    ec2c:	2e 83       	std	Y+6, r18	; 0x06
    ec2e:	02 c0       	rjmp	.+4      	; 0xec34 <fputc+0x98>
    ec30:	8f ef       	ldi	r24, 0xFF	; 255
    ec32:	9f ef       	ldi	r25, 0xFF	; 255
    ec34:	cd b7       	in	r28, 0x3d	; 61
    ec36:	de b7       	in	r29, 0x3e	; 62
    ec38:	23 96       	adiw	r28, 0x03	; 3
    ec3a:	e2 e0       	ldi	r30, 0x02	; 2
    ec3c:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

0000ec40 <_fprintf_putc>:
    ec40:	fc 01       	movw	r30, r24
    ec42:	86 2f       	mov	r24, r22
    ec44:	26 81       	ldd	r18, Z+6	; 0x06
    ec46:	37 81       	ldd	r19, Z+7	; 0x07
    ec48:	2f 5f       	subi	r18, 0xFF	; 255
    ec4a:	3f 4f       	sbci	r19, 0xFF	; 255
    ec4c:	37 83       	std	Z+7, r19	; 0x07
    ec4e:	26 83       	std	Z+6, r18	; 0x06
    ec50:	62 81       	ldd	r22, Z+2	; 0x02
    ec52:	73 81       	ldd	r23, Z+3	; 0x03
    ec54:	90 e0       	ldi	r25, 0x00	; 0
    ec56:	a2 cf       	rjmp	.-188    	; 0xeb9c <fputc>
    ec58:	08 95       	ret

0000ec5a <getchar>:
    ec5a:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <__iob>
    ec5e:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <__iob+0x1>
    ec62:	46 cf       	rjmp	.-372    	; 0xeaf0 <fgetc>
    ec64:	08 95       	ret

0000ec66 <putchar>:
    ec66:	60 91 c9 1c 	lds	r22, 0x1CC9	; 0x801cc9 <__iob+0x2>
    ec6a:	70 91 ca 1c 	lds	r23, 0x1CCA	; 0x801cca <__iob+0x3>
    ec6e:	96 cf       	rjmp	.-212    	; 0xeb9c <fputc>
    ec70:	08 95       	ret

0000ec72 <fgets>:
    ec72:	a0 e0       	ldi	r26, 0x00	; 0
    ec74:	b0 e0       	ldi	r27, 0x00	; 0
    ec76:	ef e3       	ldi	r30, 0x3F	; 63
    ec78:	f6 e7       	ldi	r31, 0x76	; 118
    ec7a:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    ec7e:	7c 01       	movw	r14, r24
    ec80:	6a 01       	movw	r12, r20
    ec82:	8b 01       	movw	r16, r22
    ec84:	c0 e0       	ldi	r28, 0x00	; 0
    ec86:	d0 e0       	ldi	r29, 0x00	; 0
    ec88:	01 15       	cp	r16, r1
    ec8a:	11 05       	cpc	r17, r1
    ec8c:	41 f0       	breq	.+16     	; 0xec9e <fgets+0x2c>
    ec8e:	c6 01       	movw	r24, r12
    ec90:	2f df       	rcall	.-418    	; 0xeaf0 <fgetc>
    ec92:	8f 3f       	cpi	r24, 0xFF	; 255
    ec94:	2f ef       	ldi	r18, 0xFF	; 255
    ec96:	92 07       	cpc	r25, r18
    ec98:	39 f4       	brne	.+14     	; 0xeca8 <fgets+0x36>
    ec9a:	20 97       	sbiw	r28, 0x00	; 0
    ec9c:	b9 f0       	breq	.+46     	; 0xeccc <fgets+0x5a>
    ec9e:	ce 0d       	add	r28, r14
    eca0:	df 1d       	adc	r29, r15
    eca2:	18 82       	st	Y, r1
    eca4:	c7 01       	movw	r24, r14
    eca6:	14 c0       	rjmp	.+40     	; 0xecd0 <fgets+0x5e>
    eca8:	8a 30       	cpi	r24, 0x0A	; 10
    ecaa:	91 05       	cpc	r25, r1
    ecac:	c1 f3       	breq	.-16     	; 0xec9e <fgets+0x2c>
    ecae:	88 30       	cpi	r24, 0x08	; 8
    ecb0:	91 05       	cpc	r25, r1
    ecb2:	21 f4       	brne	.+8      	; 0xecbc <fgets+0x4a>
    ecb4:	20 97       	sbiw	r28, 0x00	; 0
    ecb6:	39 f0       	breq	.+14     	; 0xecc6 <fgets+0x54>
    ecb8:	21 97       	sbiw	r28, 0x01	; 1
    ecba:	05 c0       	rjmp	.+10     	; 0xecc6 <fgets+0x54>
    ecbc:	f7 01       	movw	r30, r14
    ecbe:	ec 0f       	add	r30, r28
    ecc0:	fd 1f       	adc	r31, r29
    ecc2:	80 83       	st	Z, r24
    ecc4:	21 96       	adiw	r28, 0x01	; 1
    ecc6:	01 50       	subi	r16, 0x01	; 1
    ecc8:	11 09       	sbc	r17, r1
    ecca:	de cf       	rjmp	.-68     	; 0xec88 <fgets+0x16>
    eccc:	80 e0       	ldi	r24, 0x00	; 0
    ecce:	90 e0       	ldi	r25, 0x00	; 0
    ecd0:	cd b7       	in	r28, 0x3d	; 61
    ecd2:	de b7       	in	r29, 0x3e	; 62
    ecd4:	e8 e0       	ldi	r30, 0x08	; 8
    ecd6:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0000ecda <fputs>:
    ecda:	0f 93       	push	r16
    ecdc:	1f 93       	push	r17
    ecde:	cf 93       	push	r28
    ece0:	df 93       	push	r29
    ece2:	8b 01       	movw	r16, r22
    ece4:	ec 01       	movw	r28, r24
    ece6:	89 91       	ld	r24, Y+
    ece8:	88 23       	and	r24, r24
    ecea:	41 f0       	breq	.+16     	; 0xecfc <fputs+0x22>
    ecec:	b8 01       	movw	r22, r16
    ecee:	90 e0       	ldi	r25, 0x00	; 0
    ecf0:	55 df       	rcall	.-342    	; 0xeb9c <fputc>
    ecf2:	8f 3f       	cpi	r24, 0xFF	; 255
    ecf4:	2f ef       	ldi	r18, 0xFF	; 255
    ecf6:	92 07       	cpc	r25, r18
    ecf8:	b1 f7       	brne	.-20     	; 0xece6 <fputs+0xc>
    ecfa:	02 c0       	rjmp	.+4      	; 0xed00 <fputs+0x26>
    ecfc:	80 e0       	ldi	r24, 0x00	; 0
    ecfe:	90 e0       	ldi	r25, 0x00	; 0
    ed00:	df 91       	pop	r29
    ed02:	cf 91       	pop	r28
    ed04:	1f 91       	pop	r17
    ed06:	0f 91       	pop	r16
    ed08:	08 95       	ret

0000ed0a <puts>:
    ed0a:	cf 93       	push	r28
    ed0c:	df 93       	push	r29
    ed0e:	ec 01       	movw	r28, r24
    ed10:	89 91       	ld	r24, Y+
    ed12:	60 91 c9 1c 	lds	r22, 0x1CC9	; 0x801cc9 <__iob+0x2>
    ed16:	70 91 ca 1c 	lds	r23, 0x1CCA	; 0x801cca <__iob+0x3>
    ed1a:	88 23       	and	r24, r24
    ed1c:	39 f0       	breq	.+14     	; 0xed2c <puts+0x22>
    ed1e:	90 e0       	ldi	r25, 0x00	; 0
    ed20:	3d df       	rcall	.-390    	; 0xeb9c <fputc>
    ed22:	8f 3f       	cpi	r24, 0xFF	; 255
    ed24:	2f ef       	ldi	r18, 0xFF	; 255
    ed26:	92 07       	cpc	r25, r18
    ed28:	99 f7       	brne	.-26     	; 0xed10 <puts+0x6>
    ed2a:	03 c0       	rjmp	.+6      	; 0xed32 <puts+0x28>
    ed2c:	8a e0       	ldi	r24, 0x0A	; 10
    ed2e:	90 e0       	ldi	r25, 0x00	; 0
    ed30:	35 df       	rcall	.-406    	; 0xeb9c <fputc>
    ed32:	df 91       	pop	r29
    ed34:	cf 91       	pop	r28
    ed36:	08 95       	ret

0000ed38 <fileno>:
    ed38:	00 97       	sbiw	r24, 0x00	; 0
    ed3a:	39 f4       	brne	.+14     	; 0xed4a <fileno+0x12>
    ed3c:	89 e0       	ldi	r24, 0x09	; 9
    ed3e:	90 e0       	ldi	r25, 0x00	; 0
    ed40:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ed44:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ed48:	0e c0       	rjmp	.+28     	; 0xed66 <fileno+0x2e>
    ed4a:	e7 ec       	ldi	r30, 0xC7	; 199
    ed4c:	fc e1       	ldi	r31, 0x1C	; 28
    ed4e:	20 e0       	ldi	r18, 0x00	; 0
    ed50:	30 e0       	ldi	r19, 0x00	; 0
    ed52:	41 91       	ld	r20, Z+
    ed54:	51 91       	ld	r21, Z+
    ed56:	84 17       	cp	r24, r20
    ed58:	95 07       	cpc	r25, r21
    ed5a:	41 f0       	breq	.+16     	; 0xed6c <fileno+0x34>
    ed5c:	2f 5f       	subi	r18, 0xFF	; 255
    ed5e:	3f 4f       	sbci	r19, 0xFF	; 255
    ed60:	20 31       	cpi	r18, 0x10	; 16
    ed62:	31 05       	cpc	r19, r1
    ed64:	b1 f7       	brne	.-20     	; 0xed52 <fileno+0x1a>
    ed66:	8f ef       	ldi	r24, 0xFF	; 255
    ed68:	9f ef       	ldi	r25, 0xFF	; 255
    ed6a:	08 95       	ret
    ed6c:	c9 01       	movw	r24, r18
    ed6e:	08 95       	ret

0000ed70 <fileno_to_stream>:
    ed70:	80 31       	cpi	r24, 0x10	; 16
    ed72:	91 05       	cpc	r25, r1
    ed74:	48 f4       	brcc	.+18     	; 0xed88 <fileno_to_stream+0x18>
    ed76:	88 0f       	add	r24, r24
    ed78:	99 1f       	adc	r25, r25
    ed7a:	fc 01       	movw	r30, r24
    ed7c:	e9 53       	subi	r30, 0x39	; 57
    ed7e:	f3 4e       	sbci	r31, 0xE3	; 227
    ed80:	80 81       	ld	r24, Z
    ed82:	91 81       	ldd	r25, Z+1	; 0x01
    ed84:	00 97       	sbiw	r24, 0x00	; 0
    ed86:	41 f4       	brne	.+16     	; 0xed98 <fileno_to_stream+0x28>
    ed88:	89 e0       	ldi	r24, 0x09	; 9
    ed8a:	90 e0       	ldi	r25, 0x00	; 0
    ed8c:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ed90:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ed94:	80 e0       	ldi	r24, 0x00	; 0
    ed96:	90 e0       	ldi	r25, 0x00	; 0
    ed98:	08 95       	ret

0000ed9a <mctime>:
    ed9a:	a4 e0       	ldi	r26, 0x04	; 4
    ed9c:	b0 e0       	ldi	r27, 0x00	; 0
    ed9e:	e3 ed       	ldi	r30, 0xD3	; 211
    eda0:	f6 e7       	ldi	r31, 0x76	; 118
    eda2:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    eda6:	69 83       	std	Y+1, r22	; 0x01
    eda8:	7a 83       	std	Y+2, r23	; 0x02
    edaa:	8b 83       	std	Y+3, r24	; 0x03
    edac:	9c 83       	std	Y+4, r25	; 0x04
    edae:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    edb2:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    edb6:	ce 01       	movw	r24, r28
    edb8:	01 96       	adiw	r24, 0x01	; 1
    edba:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <ctime_gm>
    edbe:	fc 01       	movw	r30, r24
    edc0:	01 90       	ld	r0, Z+
    edc2:	00 20       	and	r0, r0
    edc4:	e9 f7       	brne	.-6      	; 0xedc0 <mctime+0x26>
    edc6:	31 97       	sbiw	r30, 0x01	; 1
    edc8:	e8 1b       	sub	r30, r24
    edca:	f9 0b       	sbc	r31, r25
    edcc:	39 f0       	breq	.+14     	; 0xeddc <mctime+0x42>
    edce:	31 97       	sbiw	r30, 0x01	; 1
    edd0:	e8 0f       	add	r30, r24
    edd2:	f9 1f       	adc	r31, r25
    edd4:	20 81       	ld	r18, Z
    edd6:	2a 30       	cpi	r18, 0x0A	; 10
    edd8:	09 f4       	brne	.+2      	; 0xeddc <mctime+0x42>
    edda:	10 82       	st	Z, r1
    eddc:	24 96       	adiw	r28, 0x04	; 4
    edde:	e2 e0       	ldi	r30, 0x02	; 2
    ede0:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

0000ede4 <basename>:
    ede4:	00 97       	sbiw	r24, 0x00	; 0
    ede6:	49 f0       	breq	.+18     	; 0xedfa <basename+0x16>
    ede8:	fc 01       	movw	r30, r24
    edea:	21 91       	ld	r18, Z+
    edec:	22 23       	and	r18, r18
    edee:	21 f0       	breq	.+8      	; 0xedf8 <basename+0x14>
    edf0:	2f 32       	cpi	r18, 0x2F	; 47
    edf2:	d9 f7       	brne	.-10     	; 0xedea <basename+0x6>
    edf4:	cf 01       	movw	r24, r30
    edf6:	f9 cf       	rjmp	.-14     	; 0xedea <basename+0x6>
    edf8:	08 95       	ret
    edfa:	80 e2       	ldi	r24, 0x20	; 32
    edfc:	9c e0       	ldi	r25, 0x0C	; 12
    edfe:	08 95       	ret

0000ee00 <chdir>:
    ee00:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ee04:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ee08:	0e 94 bb 5e 	call	0xbd76	; 0xbd76 <f_chdir>
    ee0c:	00 97       	sbiw	r24, 0x00	; 0
    ee0e:	a1 f0       	breq	.+40     	; 0xee38 <chdir+0x38>
    ee10:	84 31       	cpi	r24, 0x14	; 20
    ee12:	91 05       	cpc	r25, r1
    ee14:	40 f4       	brcc	.+16     	; 0xee26 <chdir+0x26>
    ee16:	fc 01       	movw	r30, r24
    ee18:	ea 55       	subi	r30, 0x5A	; 90
    ee1a:	f4 4f       	sbci	r31, 0xF4	; 244
    ee1c:	80 81       	ld	r24, Z
    ee1e:	08 2e       	mov	r0, r24
    ee20:	00 0c       	add	r0, r0
    ee22:	99 0b       	sbc	r25, r25
    ee24:	02 c0       	rjmp	.+4      	; 0xee2a <chdir+0x2a>
    ee26:	83 e2       	ldi	r24, 0x23	; 35
    ee28:	90 e0       	ldi	r25, 0x00	; 0
    ee2a:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ee2e:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ee32:	8f ef       	ldi	r24, 0xFF	; 255
    ee34:	9f ef       	ldi	r25, 0xFF	; 255
    ee36:	08 95       	ret
    ee38:	80 e0       	ldi	r24, 0x00	; 0
    ee3a:	90 e0       	ldi	r25, 0x00	; 0
    ee3c:	08 95       	ret

0000ee3e <chmod>:
    ee3e:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ee42:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ee46:	42 79       	andi	r20, 0x92	; 146
    ee48:	55 27       	eor	r21, r21
    ee4a:	66 27       	eor	r22, r22
    ee4c:	77 27       	eor	r23, r23
    ee4e:	45 2b       	or	r20, r21
    ee50:	46 2b       	or	r20, r22
    ee52:	47 2b       	or	r20, r23
    ee54:	19 f0       	breq	.+6      	; 0xee5c <chmod+0x1e>
    ee56:	80 e0       	ldi	r24, 0x00	; 0
    ee58:	90 e0       	ldi	r25, 0x00	; 0
    ee5a:	08 95       	ret
    ee5c:	41 e0       	ldi	r20, 0x01	; 1
    ee5e:	61 e0       	ldi	r22, 0x01	; 1
    ee60:	0e 94 9b 67 	call	0xcf36	; 0xcf36 <f_chmod>
    ee64:	00 97       	sbiw	r24, 0x00	; 0
    ee66:	b9 f3       	breq	.-18     	; 0xee56 <chmod+0x18>
    ee68:	84 31       	cpi	r24, 0x14	; 20
    ee6a:	91 05       	cpc	r25, r1
    ee6c:	40 f4       	brcc	.+16     	; 0xee7e <chmod+0x40>
    ee6e:	fc 01       	movw	r30, r24
    ee70:	ea 55       	subi	r30, 0x5A	; 90
    ee72:	f4 4f       	sbci	r31, 0xF4	; 244
    ee74:	80 81       	ld	r24, Z
    ee76:	08 2e       	mov	r0, r24
    ee78:	00 0c       	add	r0, r0
    ee7a:	99 0b       	sbc	r25, r25
    ee7c:	02 c0       	rjmp	.+4      	; 0xee82 <chmod+0x44>
    ee7e:	83 e2       	ldi	r24, 0x23	; 35
    ee80:	90 e0       	ldi	r25, 0x00	; 0
    ee82:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ee86:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ee8a:	8f ef       	ldi	r24, 0xFF	; 255
    ee8c:	9f ef       	ldi	r25, 0xFF	; 255
    ee8e:	08 95       	ret

0000ee90 <getcwd>:
    ee90:	cf 93       	push	r28
    ee92:	df 93       	push	r29
    ee94:	d8 2f       	mov	r29, r24
    ee96:	c9 2f       	mov	r28, r25
    ee98:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ee9c:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    eea0:	0e 94 16 5f 	call	0xbe2c	; 0xbe2c <f_getcwd>
    eea4:	00 97       	sbiw	r24, 0x00	; 0
    eea6:	a1 f0       	breq	.+40     	; 0xeed0 <getcwd+0x40>
    eea8:	84 31       	cpi	r24, 0x14	; 20
    eeaa:	91 05       	cpc	r25, r1
    eeac:	40 f4       	brcc	.+16     	; 0xeebe <getcwd+0x2e>
    eeae:	fc 01       	movw	r30, r24
    eeb0:	ea 55       	subi	r30, 0x5A	; 90
    eeb2:	f4 4f       	sbci	r31, 0xF4	; 244
    eeb4:	80 81       	ld	r24, Z
    eeb6:	08 2e       	mov	r0, r24
    eeb8:	00 0c       	add	r0, r0
    eeba:	99 0b       	sbc	r25, r25
    eebc:	02 c0       	rjmp	.+4      	; 0xeec2 <getcwd+0x32>
    eebe:	83 e2       	ldi	r24, 0x23	; 35
    eec0:	90 e0       	ldi	r25, 0x00	; 0
    eec2:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    eec6:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    eeca:	80 e0       	ldi	r24, 0x00	; 0
    eecc:	90 e0       	ldi	r25, 0x00	; 0
    eece:	02 c0       	rjmp	.+4      	; 0xeed4 <getcwd+0x44>
    eed0:	8d 2f       	mov	r24, r29
    eed2:	9c 2f       	mov	r25, r28
    eed4:	df 91       	pop	r29
    eed6:	cf 91       	pop	r28
    eed8:	08 95       	ret

0000eeda <mkdir>:
    eeda:	cf 93       	push	r28
    eedc:	df 93       	push	r29
    eede:	ec 01       	movw	r28, r24
    eee0:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    eee4:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    eee8:	41 15       	cp	r20, r1
    eeea:	51 05       	cpc	r21, r1
    eeec:	61 05       	cpc	r22, r1
    eeee:	71 05       	cpc	r23, r1
    eef0:	41 f4       	brne	.+16     	; 0xef02 <mkdir+0x28>
    eef2:	ce 01       	movw	r24, r28
    eef4:	0e 94 96 65 	call	0xcb2c	; 0xcb2c <f_mkdir>
    eef8:	00 97       	sbiw	r24, 0x00	; 0
    eefa:	39 f4       	brne	.+14     	; 0xef0a <mkdir+0x30>
    eefc:	80 e0       	ldi	r24, 0x00	; 0
    eefe:	90 e0       	ldi	r25, 0x00	; 0
    ef00:	17 c0       	rjmp	.+46     	; 0xef30 <mkdir+0x56>
    ef02:	9d df       	rcall	.-198    	; 0xee3e <chmod>
    ef04:	89 2b       	or	r24, r25
    ef06:	a9 f3       	breq	.-22     	; 0xeef2 <mkdir+0x18>
    ef08:	11 c0       	rjmp	.+34     	; 0xef2c <mkdir+0x52>
    ef0a:	84 31       	cpi	r24, 0x14	; 20
    ef0c:	91 05       	cpc	r25, r1
    ef0e:	40 f4       	brcc	.+16     	; 0xef20 <mkdir+0x46>
    ef10:	fc 01       	movw	r30, r24
    ef12:	ea 55       	subi	r30, 0x5A	; 90
    ef14:	f4 4f       	sbci	r31, 0xF4	; 244
    ef16:	80 81       	ld	r24, Z
    ef18:	08 2e       	mov	r0, r24
    ef1a:	00 0c       	add	r0, r0
    ef1c:	99 0b       	sbc	r25, r25
    ef1e:	02 c0       	rjmp	.+4      	; 0xef24 <mkdir+0x4a>
    ef20:	83 e2       	ldi	r24, 0x23	; 35
    ef22:	90 e0       	ldi	r25, 0x00	; 0
    ef24:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ef28:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ef2c:	8f ef       	ldi	r24, 0xFF	; 255
    ef2e:	9f ef       	ldi	r25, 0xFF	; 255
    ef30:	df 91       	pop	r29
    ef32:	cf 91       	pop	r28
    ef34:	08 95       	ret

0000ef36 <rename>:
    ef36:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ef3a:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ef3e:	0e 94 86 66 	call	0xcd0c	; 0xcd0c <f_rename>
    ef42:	00 97       	sbiw	r24, 0x00	; 0
    ef44:	a1 f0       	breq	.+40     	; 0xef6e <rename+0x38>
    ef46:	84 31       	cpi	r24, 0x14	; 20
    ef48:	91 05       	cpc	r25, r1
    ef4a:	40 f4       	brcc	.+16     	; 0xef5c <rename+0x26>
    ef4c:	fc 01       	movw	r30, r24
    ef4e:	ea 55       	subi	r30, 0x5A	; 90
    ef50:	f4 4f       	sbci	r31, 0xF4	; 244
    ef52:	80 81       	ld	r24, Z
    ef54:	08 2e       	mov	r0, r24
    ef56:	00 0c       	add	r0, r0
    ef58:	99 0b       	sbc	r25, r25
    ef5a:	02 c0       	rjmp	.+4      	; 0xef60 <rename+0x2a>
    ef5c:	83 e2       	ldi	r24, 0x23	; 35
    ef5e:	90 e0       	ldi	r25, 0x00	; 0
    ef60:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ef64:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ef68:	8f ef       	ldi	r24, 0xFF	; 255
    ef6a:	9f ef       	ldi	r25, 0xFF	; 255
    ef6c:	08 95       	ret
    ef6e:	80 e0       	ldi	r24, 0x00	; 0
    ef70:	90 e0       	ldi	r25, 0x00	; 0
    ef72:	08 95       	ret

0000ef74 <unlink>:
    ef74:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ef78:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ef7c:	0e 94 ef 64 	call	0xc9de	; 0xc9de <f_unlink>
    ef80:	00 97       	sbiw	r24, 0x00	; 0
    ef82:	a1 f0       	breq	.+40     	; 0xefac <unlink+0x38>
    ef84:	84 31       	cpi	r24, 0x14	; 20
    ef86:	91 05       	cpc	r25, r1
    ef88:	40 f4       	brcc	.+16     	; 0xef9a <unlink+0x26>
    ef8a:	fc 01       	movw	r30, r24
    ef8c:	ea 55       	subi	r30, 0x5A	; 90
    ef8e:	f4 4f       	sbci	r31, 0xF4	; 244
    ef90:	80 81       	ld	r24, Z
    ef92:	08 2e       	mov	r0, r24
    ef94:	00 0c       	add	r0, r0
    ef96:	99 0b       	sbc	r25, r25
    ef98:	02 c0       	rjmp	.+4      	; 0xef9e <unlink+0x2a>
    ef9a:	83 e2       	ldi	r24, 0x23	; 35
    ef9c:	90 e0       	ldi	r25, 0x00	; 0
    ef9e:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    efa2:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    efa6:	8f ef       	ldi	r24, 0xFF	; 255
    efa8:	9f ef       	ldi	r25, 0xFF	; 255
    efaa:	08 95       	ret
    efac:	80 e0       	ldi	r24, 0x00	; 0
    efae:	90 e0       	ldi	r25, 0x00	; 0
    efb0:	08 95       	ret

0000efb2 <rmdir>:
    efb2:	e0 cf       	rjmp	.-64     	; 0xef74 <unlink>
    efb4:	08 95       	ret

0000efb6 <closedir>:
    efb6:	0e 94 78 63 	call	0xc6f0	; 0xc6f0 <f_closedir>
    efba:	00 97       	sbiw	r24, 0x00	; 0
    efbc:	a1 f0       	breq	.+40     	; 0xefe6 <closedir+0x30>
    efbe:	84 31       	cpi	r24, 0x14	; 20
    efc0:	91 05       	cpc	r25, r1
    efc2:	40 f4       	brcc	.+16     	; 0xefd4 <closedir+0x1e>
    efc4:	fc 01       	movw	r30, r24
    efc6:	ea 55       	subi	r30, 0x5A	; 90
    efc8:	f4 4f       	sbci	r31, 0xF4	; 244
    efca:	80 81       	ld	r24, Z
    efcc:	08 2e       	mov	r0, r24
    efce:	00 0c       	add	r0, r0
    efd0:	99 0b       	sbc	r25, r25
    efd2:	02 c0       	rjmp	.+4      	; 0xefd8 <closedir+0x22>
    efd4:	83 e2       	ldi	r24, 0x23	; 35
    efd6:	90 e0       	ldi	r25, 0x00	; 0
    efd8:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    efdc:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    efe0:	8f ef       	ldi	r24, 0xFF	; 255
    efe2:	9f ef       	ldi	r25, 0xFF	; 255
    efe4:	08 95       	ret
    efe6:	80 e0       	ldi	r24, 0x00	; 0
    efe8:	90 e0       	ldi	r25, 0x00	; 0
    efea:	08 95       	ret

0000efec <opendir>:
    efec:	bc 01       	movw	r22, r24
    efee:	88 e3       	ldi	r24, 0x38	; 56
    eff0:	99 e1       	ldi	r25, 0x19	; 25
    eff2:	0e 94 07 63 	call	0xc60e	; 0xc60e <f_opendir>
    eff6:	00 97       	sbiw	r24, 0x00	; 0
    eff8:	a1 f0       	breq	.+40     	; 0xf022 <opendir+0x36>
    effa:	84 31       	cpi	r24, 0x14	; 20
    effc:	91 05       	cpc	r25, r1
    effe:	40 f4       	brcc	.+16     	; 0xf010 <opendir+0x24>
    f000:	fc 01       	movw	r30, r24
    f002:	ea 55       	subi	r30, 0x5A	; 90
    f004:	f4 4f       	sbci	r31, 0xF4	; 244
    f006:	80 81       	ld	r24, Z
    f008:	08 2e       	mov	r0, r24
    f00a:	00 0c       	add	r0, r0
    f00c:	99 0b       	sbc	r25, r25
    f00e:	02 c0       	rjmp	.+4      	; 0xf014 <opendir+0x28>
    f010:	83 e2       	ldi	r24, 0x23	; 35
    f012:	90 e0       	ldi	r25, 0x00	; 0
    f014:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f018:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f01c:	80 e0       	ldi	r24, 0x00	; 0
    f01e:	90 e0       	ldi	r25, 0x00	; 0
    f020:	08 95       	ret
    f022:	88 e3       	ldi	r24, 0x38	; 56
    f024:	99 e1       	ldi	r25, 0x19	; 25
    f026:	08 95       	ret

0000f028 <readdir>:
    f028:	a6 e1       	ldi	r26, 0x16	; 22
    f02a:	b1 e0       	ldi	r27, 0x01	; 1
    f02c:	ea e1       	ldi	r30, 0x1A	; 26
    f02e:	f8 e7       	ldi	r31, 0x78	; 120
    f030:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
    f034:	10 92 38 18 	sts	0x1838, r1	; 0x801838 <_de>
    f038:	be 01       	movw	r22, r28
    f03a:	6f 5f       	subi	r22, 0xFF	; 255
    f03c:	7f 4f       	sbci	r23, 0xFF	; 255
    f03e:	0e 94 8d 63 	call	0xc71a	; 0xc71a <f_readdir>
    f042:	00 97       	sbiw	r24, 0x00	; 0
    f044:	a1 f0       	breq	.+40     	; 0xf06e <readdir+0x46>
    f046:	84 31       	cpi	r24, 0x14	; 20
    f048:	91 05       	cpc	r25, r1
    f04a:	40 f4       	brcc	.+16     	; 0xf05c <readdir+0x34>
    f04c:	fc 01       	movw	r30, r24
    f04e:	ea 55       	subi	r30, 0x5A	; 90
    f050:	f4 4f       	sbci	r31, 0xF4	; 244
    f052:	80 81       	ld	r24, Z
    f054:	08 2e       	mov	r0, r24
    f056:	00 0c       	add	r0, r0
    f058:	99 0b       	sbc	r25, r25
    f05a:	02 c0       	rjmp	.+4      	; 0xf060 <readdir+0x38>
    f05c:	83 e2       	ldi	r24, 0x23	; 35
    f05e:	90 e0       	ldi	r25, 0x00	; 0
    f060:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f064:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f068:	80 e0       	ldi	r24, 0x00	; 0
    f06a:	90 e0       	ldi	r25, 0x00	; 0
    f06c:	16 c0       	rjmp	.+44     	; 0xf09a <readdir+0x72>
    f06e:	be 01       	movw	r22, r28
    f070:	69 5e       	subi	r22, 0xE9	; 233
    f072:	7f 4f       	sbci	r23, 0xFF	; 255
    f074:	fb 01       	movw	r30, r22
    f076:	01 90       	ld	r0, Z+
    f078:	00 20       	and	r0, r0
    f07a:	e9 f7       	brne	.-6      	; 0xf076 <readdir+0x4e>
    f07c:	31 97       	sbiw	r30, 0x01	; 1
    f07e:	8f 01       	movw	r16, r30
    f080:	06 1b       	sub	r16, r22
    f082:	17 0b       	sbc	r17, r23
    f084:	a8 01       	movw	r20, r16
    f086:	88 e3       	ldi	r24, 0x38	; 56
    f088:	98 e1       	ldi	r25, 0x18	; 24
    f08a:	0e 94 2c 31 	call	0x6258	; 0x6258 <strncpy>
    f08e:	f8 01       	movw	r30, r16
    f090:	e8 5c       	subi	r30, 0xC8	; 200
    f092:	f7 4e       	sbci	r31, 0xE7	; 231
    f094:	10 82       	st	Z, r1
    f096:	88 e3       	ldi	r24, 0x38	; 56
    f098:	98 e1       	ldi	r25, 0x18	; 24
    f09a:	ca 5e       	subi	r28, 0xEA	; 234
    f09c:	de 4f       	sbci	r29, 0xFE	; 254
    f09e:	e4 e0       	ldi	r30, 0x04	; 4
    f0a0:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

0000f0a4 <perror>:
    f0a4:	ad b7       	in	r26, 0x3d	; 61
    f0a6:	be b7       	in	r27, 0x3e	; 62
    f0a8:	17 97       	sbiw	r26, 0x07	; 7
    f0aa:	0f b6       	in	r0, 0x3f	; 63
    f0ac:	f8 94       	cli
    f0ae:	be bf       	out	0x3e, r27	; 62
    f0b0:	0f be       	out	0x3f, r0	; 63
    f0b2:	ad bf       	out	0x3d, r26	; 61
    f0b4:	20 91 c5 1c 	lds	r18, 0x1CC5	; 0x801cc5 <errno>
    f0b8:	30 91 c6 1c 	lds	r19, 0x1CC6	; 0x801cc6 <errno+0x1>
    f0bc:	23 32       	cpi	r18, 0x23	; 35
    f0be:	31 05       	cpc	r19, r1
    f0c0:	40 f4       	brcc	.+16     	; 0xf0d2 <perror+0x2e>
    f0c2:	22 0f       	add	r18, r18
    f0c4:	33 1f       	adc	r19, r19
    f0c6:	f9 01       	movw	r30, r18
    f0c8:	ea 5c       	subi	r30, 0xCA	; 202
    f0ca:	fe 4f       	sbci	r31, 0xFE	; 254
    f0cc:	20 81       	ld	r18, Z
    f0ce:	31 81       	ldd	r19, Z+1	; 0x01
    f0d0:	04 c0       	rjmp	.+8      	; 0xf0da <perror+0x36>
    f0d2:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    f0d6:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    f0da:	00 97       	sbiw	r24, 0x00	; 0
    f0dc:	99 f0       	breq	.+38     	; 0xf104 <perror+0x60>
    f0de:	fc 01       	movw	r30, r24
    f0e0:	40 81       	ld	r20, Z
    f0e2:	44 23       	and	r20, r20
    f0e4:	79 f0       	breq	.+30     	; 0xf104 <perror+0x60>
    f0e6:	ed b7       	in	r30, 0x3d	; 61
    f0e8:	fe b7       	in	r31, 0x3e	; 62
    f0ea:	37 83       	std	Z+7, r19	; 0x07
    f0ec:	26 83       	std	Z+6, r18	; 0x06
    f0ee:	95 83       	std	Z+5, r25	; 0x05
    f0f0:	84 83       	std	Z+4, r24	; 0x04
    f0f2:	82 eb       	ldi	r24, 0xB2	; 178
    f0f4:	9b e0       	ldi	r25, 0x0B	; 11
    f0f6:	a0 e0       	ldi	r26, 0x00	; 0
    f0f8:	81 83       	std	Z+1, r24	; 0x01
    f0fa:	92 83       	std	Z+2, r25	; 0x02
    f0fc:	a3 83       	std	Z+3, r26	; 0x03
    f0fe:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    f102:	0c c0       	rjmp	.+24     	; 0xf11c <perror+0x78>
    f104:	ed b7       	in	r30, 0x3d	; 61
    f106:	fe b7       	in	r31, 0x3e	; 62
    f108:	35 83       	std	Z+5, r19	; 0x05
    f10a:	24 83       	std	Z+4, r18	; 0x04
    f10c:	8e ea       	ldi	r24, 0xAE	; 174
    f10e:	9b e0       	ldi	r25, 0x0B	; 11
    f110:	a0 e0       	ldi	r26, 0x00	; 0
    f112:	81 83       	std	Z+1, r24	; 0x01
    f114:	92 83       	std	Z+2, r25	; 0x02
    f116:	a3 83       	std	Z+3, r26	; 0x03
    f118:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    f11c:	ad b7       	in	r26, 0x3d	; 61
    f11e:	be b7       	in	r27, 0x3e	; 62
    f120:	17 96       	adiw	r26, 0x07	; 7
    f122:	0f b6       	in	r0, 0x3f	; 63
    f124:	f8 94       	cli
    f126:	be bf       	out	0x3e, r27	; 62
    f128:	0f be       	out	0x3f, r0	; 63
    f12a:	ad bf       	out	0x3d, r26	; 61
    f12c:	08 95       	ret

0000f12e <fdevopen>:
    f12e:	0f 93       	push	r16
    f130:	1f 93       	push	r17
    f132:	cf 93       	push	r28
    f134:	df 93       	push	r29
    f136:	00 97       	sbiw	r24, 0x00	; 0
    f138:	31 f4       	brne	.+12     	; 0xf146 <fdevopen+0x18>
    f13a:	61 15       	cp	r22, r1
    f13c:	71 05       	cpc	r23, r1
    f13e:	19 f4       	brne	.+6      	; 0xf146 <fdevopen+0x18>
    f140:	80 e0       	ldi	r24, 0x00	; 0
    f142:	90 e0       	ldi	r25, 0x00	; 0
    f144:	3a c0       	rjmp	.+116    	; 0xf1ba <fdevopen+0x8c>
    f146:	8b 01       	movw	r16, r22
    f148:	ec 01       	movw	r28, r24
    f14a:	6e e0       	ldi	r22, 0x0E	; 14
    f14c:	70 e0       	ldi	r23, 0x00	; 0
    f14e:	81 e0       	ldi	r24, 0x01	; 1
    f150:	90 e0       	ldi	r25, 0x00	; 0
    f152:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <safecalloc>
    f156:	fc 01       	movw	r30, r24
    f158:	89 2b       	or	r24, r25
    f15a:	91 f3       	breq	.-28     	; 0xf140 <fdevopen+0x12>
    f15c:	80 e8       	ldi	r24, 0x80	; 128
    f15e:	83 83       	std	Z+3, r24	; 0x03
    f160:	01 15       	cp	r16, r1
    f162:	11 05       	cpc	r17, r1
    f164:	71 f0       	breq	.+28     	; 0xf182 <fdevopen+0x54>
    f166:	13 87       	std	Z+11, r17	; 0x0b
    f168:	02 87       	std	Z+10, r16	; 0x0a
    f16a:	81 e8       	ldi	r24, 0x81	; 129
    f16c:	83 83       	std	Z+3, r24	; 0x03
    f16e:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <__iob>
    f172:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <__iob+0x1>
    f176:	89 2b       	or	r24, r25
    f178:	21 f4       	brne	.+8      	; 0xf182 <fdevopen+0x54>
    f17a:	f0 93 c8 1c 	sts	0x1CC8, r31	; 0x801cc8 <__iob+0x1>
    f17e:	e0 93 c7 1c 	sts	0x1CC7, r30	; 0x801cc7 <__iob>
    f182:	20 97       	sbiw	r28, 0x00	; 0
    f184:	c9 f0       	breq	.+50     	; 0xf1b8 <fdevopen+0x8a>
    f186:	d1 87       	std	Z+9, r29	; 0x09
    f188:	c0 87       	std	Z+8, r28	; 0x08
    f18a:	83 81       	ldd	r24, Z+3	; 0x03
    f18c:	82 60       	ori	r24, 0x02	; 2
    f18e:	83 83       	std	Z+3, r24	; 0x03
    f190:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
    f194:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
    f198:	89 2b       	or	r24, r25
    f19a:	21 f4       	brne	.+8      	; 0xf1a4 <fdevopen+0x76>
    f19c:	f0 93 ca 1c 	sts	0x1CCA, r31	; 0x801cca <__iob+0x3>
    f1a0:	e0 93 c9 1c 	sts	0x1CC9, r30	; 0x801cc9 <__iob+0x2>
    f1a4:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob+0x4>
    f1a8:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x5>
    f1ac:	89 2b       	or	r24, r25
    f1ae:	21 f4       	brne	.+8      	; 0xf1b8 <fdevopen+0x8a>
    f1b0:	f0 93 cc 1c 	sts	0x1CCC, r31	; 0x801ccc <__iob+0x5>
    f1b4:	e0 93 cb 1c 	sts	0x1CCB, r30	; 0x801ccb <__iob+0x4>
    f1b8:	cf 01       	movw	r24, r30
    f1ba:	df 91       	pop	r29
    f1bc:	cf 91       	pop	r28
    f1be:	1f 91       	pop	r17
    f1c0:	0f 91       	pop	r16
    f1c2:	08 95       	ret

0000f1c4 <fat_time_to_unix>:
    f1c4:	a6 e1       	ldi	r26, 0x16	; 22
    f1c6:	b0 e0       	ldi	r27, 0x00	; 0
    f1c8:	e8 ee       	ldi	r30, 0xE8	; 232
    f1ca:	f8 e7       	ldi	r31, 0x78	; 120
    f1cc:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    f1d0:	fe 01       	movw	r30, r28
    f1d2:	31 96       	adiw	r30, 0x01	; 1
    f1d4:	26 e1       	ldi	r18, 0x16	; 22
    f1d6:	df 01       	movw	r26, r30
    f1d8:	1d 92       	st	X+, r1
    f1da:	2a 95       	dec	r18
    f1dc:	e9 f7       	brne	.-6      	; 0xf1d8 <fat_time_to_unix+0x14>
    f1de:	9b 01       	movw	r18, r22
    f1e0:	22 0f       	add	r18, r18
    f1e2:	33 1f       	adc	r19, r19
    f1e4:	2e 73       	andi	r18, 0x3E	; 62
    f1e6:	33 27       	eor	r19, r19
    f1e8:	3a 83       	std	Y+2, r19	; 0x02
    f1ea:	29 83       	std	Y+1, r18	; 0x01
    f1ec:	9b 01       	movw	r18, r22
    f1ee:	55 e0       	ldi	r21, 0x05	; 5
    f1f0:	36 95       	lsr	r19
    f1f2:	27 95       	ror	r18
    f1f4:	5a 95       	dec	r21
    f1f6:	e1 f7       	brne	.-8      	; 0xf1f0 <fat_time_to_unix+0x2c>
    f1f8:	2f 73       	andi	r18, 0x3F	; 63
    f1fa:	33 27       	eor	r19, r19
    f1fc:	3c 83       	std	Y+4, r19	; 0x04
    f1fe:	2b 83       	std	Y+3, r18	; 0x03
    f200:	27 2f       	mov	r18, r23
    f202:	26 95       	lsr	r18
    f204:	26 95       	lsr	r18
    f206:	26 95       	lsr	r18
    f208:	2d 83       	std	Y+5, r18	; 0x05
    f20a:	1e 82       	std	Y+6, r1	; 0x06
    f20c:	9c 01       	movw	r18, r24
    f20e:	2f 71       	andi	r18, 0x1F	; 31
    f210:	33 27       	eor	r19, r19
    f212:	38 87       	std	Y+8, r19	; 0x08
    f214:	2f 83       	std	Y+7, r18	; 0x07
    f216:	9c 01       	movw	r18, r24
    f218:	65 e0       	ldi	r22, 0x05	; 5
    f21a:	36 95       	lsr	r19
    f21c:	27 95       	ror	r18
    f21e:	6a 95       	dec	r22
    f220:	e1 f7       	brne	.-8      	; 0xf21a <fat_time_to_unix+0x56>
    f222:	2f 70       	andi	r18, 0x0F	; 15
    f224:	33 27       	eor	r19, r19
    f226:	21 50       	subi	r18, 0x01	; 1
    f228:	31 09       	sbc	r19, r1
    f22a:	3a 87       	std	Y+10, r19	; 0x0a
    f22c:	29 87       	std	Y+9, r18	; 0x09
    f22e:	9c 01       	movw	r18, r24
    f230:	23 2f       	mov	r18, r19
    f232:	33 27       	eor	r19, r19
    f234:	26 95       	lsr	r18
    f236:	20 5b       	subi	r18, 0xB0	; 176
    f238:	3f 4f       	sbci	r19, 0xFF	; 255
    f23a:	3c 87       	std	Y+12, r19	; 0x0c
    f23c:	2b 87       	std	Y+11, r18	; 0x0b
    f23e:	cf 01       	movw	r24, r30
    f240:	0e 94 47 3a 	call	0x748e	; 0x748e <timegm>
    f244:	66 96       	adiw	r28, 0x16	; 22
    f246:	e2 e0       	ldi	r30, 0x02	; 2
    f248:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

0000f24c <stat>:
    f24c:	a6 e1       	ldi	r26, 0x16	; 22
    f24e:	b1 e0       	ldi	r27, 0x01	; 1
    f250:	ec e2       	ldi	r30, 0x2C	; 44
    f252:	f9 e7       	ldi	r31, 0x79	; 121
    f254:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
    f258:	6c 01       	movw	r12, r24
    f25a:	8b 01       	movw	r16, r22
    f25c:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f260:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    f264:	6c ef       	ldi	r22, 0xFC	; 252
    f266:	78 e0       	ldi	r23, 0x08	; 8
    f268:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
    f26c:	89 2b       	or	r24, r25
    f26e:	01 f1       	breq	.+64     	; 0xf2b0 <stat+0x64>
    f270:	f8 01       	movw	r30, r16
    f272:	14 a2       	std	Z+36, r1	; 0x24
    f274:	15 a2       	std	Z+37, r1	; 0x25
    f276:	16 a2       	std	Z+38, r1	; 0x26
    f278:	17 a2       	std	Z+39, r1	; 0x27
    f27a:	10 a6       	std	Z+40, r1	; 0x28
    f27c:	11 a6       	std	Z+41, r1	; 0x29
    f27e:	12 a6       	std	Z+42, r1	; 0x2a
    f280:	13 a6       	std	Z+43, r1	; 0x2b
    f282:	14 a6       	std	Z+44, r1	; 0x2c
    f284:	15 a6       	std	Z+45, r1	; 0x2d
    f286:	16 a6       	std	Z+46, r1	; 0x2e
    f288:	17 a6       	std	Z+47, r1	; 0x2f
    f28a:	11 8a       	std	Z+17, r1	; 0x11
    f28c:	10 8a       	std	Z+16, r1	; 0x10
    f28e:	13 8a       	std	Z+19, r1	; 0x13
    f290:	12 8a       	std	Z+18, r1	; 0x12
    f292:	10 8e       	std	Z+24, r1	; 0x18
    f294:	11 8e       	std	Z+25, r1	; 0x19
    f296:	12 8e       	std	Z+26, r1	; 0x1a
    f298:	13 8e       	std	Z+27, r1	; 0x1b
    f29a:	80 e0       	ldi	r24, 0x00	; 0
    f29c:	90 e4       	ldi	r25, 0x40	; 64
    f29e:	a0 e0       	ldi	r26, 0x00	; 0
    f2a0:	b0 e0       	ldi	r27, 0x00	; 0
    f2a2:	80 87       	std	Z+8, r24	; 0x08
    f2a4:	91 87       	std	Z+9, r25	; 0x09
    f2a6:	a2 87       	std	Z+10, r26	; 0x0a
    f2a8:	b3 87       	std	Z+11, r27	; 0x0b
    f2aa:	e1 2c       	mov	r14, r1
    f2ac:	f1 2c       	mov	r15, r1
    f2ae:	62 c0       	rjmp	.+196    	; 0xf374 <stat+0x128>
    f2b0:	66 ea       	ldi	r22, 0xA6	; 166
    f2b2:	78 e0       	ldi	r23, 0x08	; 8
    f2b4:	c6 01       	movw	r24, r12
    f2b6:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
    f2ba:	89 2b       	or	r24, r25
    f2bc:	c9 f6       	brne	.-78     	; 0xf270 <stat+0x24>
    f2be:	68 ef       	ldi	r22, 0xF8	; 248
    f2c0:	72 e1       	ldi	r23, 0x12	; 18
    f2c2:	c6 01       	movw	r24, r12
    f2c4:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
    f2c8:	7c 01       	movw	r14, r24
    f2ca:	89 2b       	or	r24, r25
    f2cc:	89 f6       	brne	.-94     	; 0xf270 <stat+0x24>
    f2ce:	be 01       	movw	r22, r28
    f2d0:	6f 5f       	subi	r22, 0xFF	; 255
    f2d2:	7f 4f       	sbci	r23, 0xFF	; 255
    f2d4:	c6 01       	movw	r24, r12
    f2d6:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <f_stat>
    f2da:	00 97       	sbiw	r24, 0x00	; 0
    f2dc:	a9 f0       	breq	.+42     	; 0xf308 <stat+0xbc>
    f2de:	84 31       	cpi	r24, 0x14	; 20
    f2e0:	91 05       	cpc	r25, r1
    f2e2:	40 f4       	brcc	.+16     	; 0xf2f4 <stat+0xa8>
    f2e4:	fc 01       	movw	r30, r24
    f2e6:	ea 55       	subi	r30, 0x5A	; 90
    f2e8:	f4 4f       	sbci	r31, 0xF4	; 244
    f2ea:	80 81       	ld	r24, Z
    f2ec:	08 2e       	mov	r0, r24
    f2ee:	00 0c       	add	r0, r0
    f2f0:	99 0b       	sbc	r25, r25
    f2f2:	02 c0       	rjmp	.+4      	; 0xf2f8 <stat+0xac>
    f2f4:	83 e2       	ldi	r24, 0x23	; 35
    f2f6:	90 e0       	ldi	r25, 0x00	; 0
    f2f8:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f2fc:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f300:	ee 24       	eor	r14, r14
    f302:	ea 94       	dec	r14
    f304:	fe 2c       	mov	r15, r14
    f306:	36 c0       	rjmp	.+108    	; 0xf374 <stat+0x128>
    f308:	89 81       	ldd	r24, Y+1	; 0x01
    f30a:	9a 81       	ldd	r25, Y+2	; 0x02
    f30c:	ab 81       	ldd	r26, Y+3	; 0x03
    f30e:	bc 81       	ldd	r27, Y+4	; 0x04
    f310:	f8 01       	movw	r30, r16
    f312:	80 8f       	std	Z+24, r24	; 0x18
    f314:	91 8f       	std	Z+25, r25	; 0x19
    f316:	a2 8f       	std	Z+26, r26	; 0x1a
    f318:	b3 8f       	std	Z+27, r27	; 0x1b
    f31a:	6f 81       	ldd	r22, Y+7	; 0x07
    f31c:	78 85       	ldd	r23, Y+8	; 0x08
    f31e:	8d 81       	ldd	r24, Y+5	; 0x05
    f320:	9e 81       	ldd	r25, Y+6	; 0x06
    f322:	50 df       	rcall	.-352    	; 0xf1c4 <fat_time_to_unix>
    f324:	f8 01       	movw	r30, r16
    f326:	64 a3       	std	Z+36, r22	; 0x24
    f328:	75 a3       	std	Z+37, r23	; 0x25
    f32a:	86 a3       	std	Z+38, r24	; 0x26
    f32c:	97 a3       	std	Z+39, r25	; 0x27
    f32e:	60 a7       	std	Z+40, r22	; 0x28
    f330:	71 a7       	std	Z+41, r23	; 0x29
    f332:	82 a7       	std	Z+42, r24	; 0x2a
    f334:	93 a7       	std	Z+43, r25	; 0x2b
    f336:	64 a7       	std	Z+44, r22	; 0x2c
    f338:	75 a7       	std	Z+45, r23	; 0x2d
    f33a:	86 a7       	std	Z+46, r24	; 0x2e
    f33c:	97 a7       	std	Z+47, r25	; 0x2f
    f33e:	29 85       	ldd	r18, Y+9	; 0x09
    f340:	20 fd       	sbrc	r18, 0
    f342:	03 c0       	rjmp	.+6      	; 0xf34a <stat+0xfe>
    f344:	8f ef       	ldi	r24, 0xFF	; 255
    f346:	91 e0       	ldi	r25, 0x01	; 1
    f348:	02 c0       	rjmp	.+4      	; 0xf34e <stat+0x102>
    f34a:	8d e6       	ldi	r24, 0x6D	; 109
    f34c:	91 e0       	ldi	r25, 0x01	; 1
    f34e:	48 ee       	ldi	r20, 0xE8	; 232
    f350:	53 e0       	ldi	r21, 0x03	; 3
    f352:	f8 01       	movw	r30, r16
    f354:	51 8b       	std	Z+17, r21	; 0x11
    f356:	40 8b       	std	Z+16, r20	; 0x10
    f358:	53 8b       	std	Z+19, r21	; 0x13
    f35a:	42 8b       	std	Z+18, r20	; 0x12
    f35c:	24 ff       	sbrs	r18, 4
    f35e:	02 c0       	rjmp	.+4      	; 0xf364 <stat+0x118>
    f360:	90 64       	ori	r25, 0x40	; 64
    f362:	01 c0       	rjmp	.+2      	; 0xf366 <stat+0x11a>
    f364:	90 68       	ori	r25, 0x80	; 128
    f366:	a0 e0       	ldi	r26, 0x00	; 0
    f368:	b0 e0       	ldi	r27, 0x00	; 0
    f36a:	f8 01       	movw	r30, r16
    f36c:	80 87       	std	Z+8, r24	; 0x08
    f36e:	91 87       	std	Z+9, r25	; 0x09
    f370:	a2 87       	std	Z+10, r26	; 0x0a
    f372:	b3 87       	std	Z+11, r27	; 0x0b
    f374:	c7 01       	movw	r24, r14
    f376:	ca 5e       	subi	r28, 0xEA	; 234
    f378:	de 4f       	sbci	r29, 0xFE	; 254
    f37a:	e8 e0       	ldi	r30, 0x08	; 8
    f37c:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0000f380 <unix_time_to_fat>:
    f380:	a4 e0       	ldi	r26, 0x04	; 4
    f382:	b0 e0       	ldi	r27, 0x00	; 0
    f384:	e6 ec       	ldi	r30, 0xC6	; 198
    f386:	f9 e7       	ldi	r31, 0x79	; 121
    f388:	0c 94 bf e6 	jmp	0x1cd7e	; 0x1cd7e <__prologue_saves__+0x18>
    f38c:	69 83       	std	Y+1, r22	; 0x01
    f38e:	7a 83       	std	Y+2, r23	; 0x02
    f390:	8b 83       	std	Y+3, r24	; 0x03
    f392:	9c 83       	std	Y+4, r25	; 0x04
    f394:	7a 01       	movw	r14, r20
    f396:	89 01       	movw	r16, r18
    f398:	ce 01       	movw	r24, r28
    f39a:	01 96       	adiw	r24, 0x01	; 1
    f39c:	0e 94 88 37 	call	0x6f10	; 0x6f10 <gmtime>
    f3a0:	fc 01       	movw	r30, r24
    f3a2:	22 85       	ldd	r18, Z+10	; 0x0a
    f3a4:	33 85       	ldd	r19, Z+11	; 0x0b
    f3a6:	20 55       	subi	r18, 0x50	; 80
    f3a8:	31 09       	sbc	r19, r1
    f3aa:	c9 01       	movw	r24, r18
    f3ac:	98 2f       	mov	r25, r24
    f3ae:	88 27       	eor	r24, r24
    f3b0:	99 0f       	add	r25, r25
    f3b2:	20 85       	ldd	r18, Z+8	; 0x08
    f3b4:	31 85       	ldd	r19, Z+9	; 0x09
    f3b6:	2f 5f       	subi	r18, 0xFF	; 255
    f3b8:	3f 4f       	sbci	r19, 0xFF	; 255
    f3ba:	45 e0       	ldi	r20, 0x05	; 5
    f3bc:	22 0f       	add	r18, r18
    f3be:	33 1f       	adc	r19, r19
    f3c0:	4a 95       	dec	r20
    f3c2:	e1 f7       	brne	.-8      	; 0xf3bc <unix_time_to_fat+0x3c>
    f3c4:	28 2b       	or	r18, r24
    f3c6:	39 2b       	or	r19, r25
    f3c8:	86 81       	ldd	r24, Z+6	; 0x06
    f3ca:	97 81       	ldd	r25, Z+7	; 0x07
    f3cc:	28 2b       	or	r18, r24
    f3ce:	39 2b       	or	r19, r25
    f3d0:	d7 01       	movw	r26, r14
    f3d2:	2d 93       	st	X+, r18
    f3d4:	3c 93       	st	X, r19
    f3d6:	84 81       	ldd	r24, Z+4	; 0x04
    f3d8:	20 e0       	ldi	r18, 0x00	; 0
    f3da:	30 e0       	ldi	r19, 0x00	; 0
    f3dc:	38 2f       	mov	r19, r24
    f3de:	33 0f       	add	r19, r19
    f3e0:	33 0f       	add	r19, r19
    f3e2:	33 0f       	add	r19, r19
    f3e4:	82 81       	ldd	r24, Z+2	; 0x02
    f3e6:	93 81       	ldd	r25, Z+3	; 0x03
    f3e8:	55 e0       	ldi	r21, 0x05	; 5
    f3ea:	88 0f       	add	r24, r24
    f3ec:	99 1f       	adc	r25, r25
    f3ee:	5a 95       	dec	r21
    f3f0:	e1 f7       	brne	.-8      	; 0xf3ea <unix_time_to_fat+0x6a>
    f3f2:	82 2b       	or	r24, r18
    f3f4:	93 2b       	or	r25, r19
    f3f6:	20 81       	ld	r18, Z
    f3f8:	31 81       	ldd	r19, Z+1	; 0x01
    f3fa:	36 95       	lsr	r19
    f3fc:	27 95       	ror	r18
    f3fe:	82 2b       	or	r24, r18
    f400:	93 2b       	or	r25, r19
    f402:	f8 01       	movw	r30, r16
    f404:	91 83       	std	Z+1, r25	; 0x01
    f406:	80 83       	st	Z, r24
    f408:	24 96       	adiw	r28, 0x04	; 4
    f40a:	e6 e0       	ldi	r30, 0x06	; 6
    f40c:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

0000f410 <utime>:
    f410:	aa e1       	ldi	r26, 0x1A	; 26
    f412:	b1 e0       	ldi	r27, 0x01	; 1
    f414:	ee e0       	ldi	r30, 0x0E	; 14
    f416:	fa e7       	ldi	r31, 0x7A	; 122
    f418:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
    f41c:	8c 01       	movw	r16, r24
    f41e:	61 15       	cp	r22, r1
    f420:	71 05       	cpc	r23, r1
    f422:	31 f0       	breq	.+12     	; 0xf430 <utime+0x20>
    f424:	fb 01       	movw	r30, r22
    f426:	64 81       	ldd	r22, Z+4	; 0x04
    f428:	75 81       	ldd	r23, Z+5	; 0x05
    f42a:	86 81       	ldd	r24, Z+6	; 0x06
    f42c:	97 81       	ldd	r25, Z+7	; 0x07
    f42e:	04 c0       	rjmp	.+8      	; 0xf438 <utime+0x28>
    f430:	80 e0       	ldi	r24, 0x00	; 0
    f432:	90 e0       	ldi	r25, 0x00	; 0
    f434:	0e 94 e2 37 	call	0x6fc4	; 0x6fc4 <time>
    f438:	9e 01       	movw	r18, r28
    f43a:	29 5e       	subi	r18, 0xE9	; 233
    f43c:	3e 4f       	sbci	r19, 0xFE	; 254
    f43e:	ae 01       	movw	r20, r28
    f440:	47 5e       	subi	r20, 0xE7	; 231
    f442:	5e 4f       	sbci	r21, 0xFE	; 254
    f444:	9d df       	rcall	.-198    	; 0xf380 <unix_time_to_fat>
    f446:	c7 5e       	subi	r28, 0xE7	; 231
    f448:	de 4f       	sbci	r29, 0xFE	; 254
    f44a:	88 81       	ld	r24, Y
    f44c:	99 81       	ldd	r25, Y+1	; 0x01
    f44e:	c9 51       	subi	r28, 0x19	; 25
    f450:	d1 40       	sbci	r29, 0x01	; 1
    f452:	9e 83       	std	Y+6, r25	; 0x06
    f454:	8d 83       	std	Y+5, r24	; 0x05
    f456:	c9 5e       	subi	r28, 0xE9	; 233
    f458:	de 4f       	sbci	r29, 0xFE	; 254
    f45a:	88 81       	ld	r24, Y
    f45c:	99 81       	ldd	r25, Y+1	; 0x01
    f45e:	c7 51       	subi	r28, 0x17	; 23
    f460:	d1 40       	sbci	r29, 0x01	; 1
    f462:	98 87       	std	Y+8, r25	; 0x08
    f464:	8f 83       	std	Y+7, r24	; 0x07
    f466:	be 01       	movw	r22, r28
    f468:	6f 5f       	subi	r22, 0xFF	; 255
    f46a:	7f 4f       	sbci	r23, 0xFF	; 255
    f46c:	c8 01       	movw	r24, r16
    f46e:	0e 94 e8 67 	call	0xcfd0	; 0xcfd0 <f_utime>
    f472:	84 31       	cpi	r24, 0x14	; 20
    f474:	91 05       	cpc	r25, r1
    f476:	40 f4       	brcc	.+16     	; 0xf488 <utime+0x78>
    f478:	fc 01       	movw	r30, r24
    f47a:	ea 55       	subi	r30, 0x5A	; 90
    f47c:	f4 4f       	sbci	r31, 0xF4	; 244
    f47e:	80 81       	ld	r24, Z
    f480:	08 2e       	mov	r0, r24
    f482:	00 0c       	add	r0, r0
    f484:	99 0b       	sbc	r25, r25
    f486:	02 c0       	rjmp	.+4      	; 0xf48c <utime+0x7c>
    f488:	83 e2       	ldi	r24, 0x23	; 35
    f48a:	90 e0       	ldi	r25, 0x00	; 0
    f48c:	c6 5e       	subi	r28, 0xE6	; 230
    f48e:	de 4f       	sbci	r29, 0xFE	; 254
    f490:	e4 e0       	ldi	r30, 0x04	; 4
    f492:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

0000f496 <fileno_to_fatfs>:
    f496:	83 30       	cpi	r24, 0x03	; 3
    f498:	91 05       	cpc	r25, r1
    f49a:	48 f4       	brcc	.+18     	; 0xf4ae <fileno_to_fatfs+0x18>
    f49c:	89 e0       	ldi	r24, 0x09	; 9
    f49e:	90 e0       	ldi	r25, 0x00	; 0
    f4a0:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f4a4:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f4a8:	80 e0       	ldi	r24, 0x00	; 0
    f4aa:	90 e0       	ldi	r25, 0x00	; 0
    f4ac:	08 95       	ret
    f4ae:	60 dc       	rcall	.-1856   	; 0xed70 <fileno_to_stream>
    f4b0:	00 97       	sbiw	r24, 0x00	; 0
    f4b2:	d1 f3       	breq	.-12     	; 0xf4a8 <fileno_to_fatfs+0x12>
    f4b4:	fc 01       	movw	r30, r24
    f4b6:	84 85       	ldd	r24, Z+12	; 0x0c
    f4b8:	95 85       	ldd	r25, Z+13	; 0x0d
    f4ba:	00 97       	sbiw	r24, 0x00	; 0
    f4bc:	79 f3       	breq	.-34     	; 0xf49c <fileno_to_fatfs+0x6>
    f4be:	08 95       	ret

0000f4c0 <ftell>:
    f4c0:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f4c4:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    f4c8:	37 dc       	rcall	.-1938   	; 0xed38 <fileno>
    f4ca:	83 30       	cpi	r24, 0x03	; 3
    f4cc:	91 05       	cpc	r25, r1
    f4ce:	48 f0       	brcs	.+18     	; 0xf4e2 <ftell+0x22>
    f4d0:	e2 df       	rcall	.-60     	; 0xf496 <fileno_to_fatfs>
    f4d2:	00 97       	sbiw	r24, 0x00	; 0
    f4d4:	51 f4       	brne	.+20     	; 0xf4ea <ftell+0x2a>
    f4d6:	89 e0       	ldi	r24, 0x09	; 9
    f4d8:	90 e0       	ldi	r25, 0x00	; 0
    f4da:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f4de:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f4e2:	6f ef       	ldi	r22, 0xFF	; 255
    f4e4:	7f ef       	ldi	r23, 0xFF	; 255
    f4e6:	cb 01       	movw	r24, r22
    f4e8:	08 95       	ret
    f4ea:	fc 01       	movw	r30, r24
    f4ec:	60 89       	ldd	r22, Z+16	; 0x10
    f4ee:	71 89       	ldd	r23, Z+17	; 0x11
    f4f0:	82 89       	ldd	r24, Z+18	; 0x12
    f4f2:	93 89       	ldd	r25, Z+19	; 0x13
    f4f4:	08 95       	ret

0000f4f6 <lseek>:
    f4f6:	a3 e0       	ldi	r26, 0x03	; 3
    f4f8:	b0 e0       	ldi	r27, 0x00	; 0
    f4fa:	e1 e8       	ldi	r30, 0x81	; 129
    f4fc:	fa e7       	ldi	r31, 0x7A	; 122
    f4fe:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__+0x10>
    f502:	5c 01       	movw	r10, r24
    f504:	6a 01       	movw	r12, r20
    f506:	7b 01       	movw	r14, r22
    f508:	89 01       	movw	r16, r18
    f50a:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f50e:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    f512:	c1 df       	rcall	.-126    	; 0xf496 <fileno_to_fatfs>
    f514:	ec 01       	movw	r28, r24
    f516:	89 2b       	or	r24, r25
    f518:	19 f4       	brne	.+6      	; 0xf520 <lseek+0x2a>
    f51a:	88 e1       	ldi	r24, 0x18	; 24
    f51c:	90 e0       	ldi	r25, 0x00	; 0
    f51e:	26 c0       	rjmp	.+76     	; 0xf56c <lseek+0x76>
    f520:	83 e0       	ldi	r24, 0x03	; 3
    f522:	a8 16       	cp	r10, r24
    f524:	b1 04       	cpc	r11, r1
    f526:	d0 f1       	brcs	.+116    	; 0xf59c <lseek+0xa6>
    f528:	c5 01       	movw	r24, r10
    f52a:	22 dc       	rcall	.-1980   	; 0xed70 <fileno_to_stream>
    f52c:	fc 01       	movw	r30, r24
    f52e:	93 81       	ldd	r25, Z+3	; 0x03
    f530:	90 64       	ori	r25, 0x40	; 64
    f532:	93 83       	std	Z+3, r25	; 0x03
    f534:	02 30       	cpi	r16, 0x02	; 2
    f536:	11 05       	cpc	r17, r1
    f538:	a9 f5       	brne	.+106    	; 0xf5a4 <lseek+0xae>
    f53a:	8a 85       	ldd	r24, Y+10	; 0x0a
    f53c:	9b 85       	ldd	r25, Y+11	; 0x0b
    f53e:	ac 85       	ldd	r26, Y+12	; 0x0c
    f540:	bd 85       	ldd	r27, Y+13	; 0x0d
    f542:	c8 0e       	add	r12, r24
    f544:	d9 1e       	adc	r13, r25
    f546:	ea 1e       	adc	r14, r26
    f548:	fb 1e       	adc	r15, r27
    f54a:	b7 01       	movw	r22, r14
    f54c:	a6 01       	movw	r20, r12
    f54e:	ce 01       	movw	r24, r28
    f550:	0e 94 4c 60 	call	0xc098	; 0xc098 <f_lseek>
    f554:	00 97       	sbiw	r24, 0x00	; 0
    f556:	79 f0       	breq	.+30     	; 0xf576 <lseek+0x80>
    f558:	84 31       	cpi	r24, 0x14	; 20
    f55a:	91 05       	cpc	r25, r1
    f55c:	58 f5       	brcc	.+86     	; 0xf5b4 <lseek+0xbe>
    f55e:	fc 01       	movw	r30, r24
    f560:	ea 55       	subi	r30, 0x5A	; 90
    f562:	f4 4f       	sbci	r31, 0xF4	; 244
    f564:	80 81       	ld	r24, Z
    f566:	08 2e       	mov	r0, r24
    f568:	00 0c       	add	r0, r0
    f56a:	99 0b       	sbc	r25, r25
    f56c:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f570:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f574:	13 c0       	rjmp	.+38     	; 0xf59c <lseek+0xa6>
    f576:	68 89       	ldd	r22, Y+16	; 0x10
    f578:	79 89       	ldd	r23, Y+17	; 0x11
    f57a:	8a 89       	ldd	r24, Y+18	; 0x12
    f57c:	9b 89       	ldd	r25, Y+19	; 0x13
    f57e:	c6 16       	cp	r12, r22
    f580:	d7 06       	cpc	r13, r23
    f582:	e8 06       	cpc	r14, r24
    f584:	f9 06       	cpc	r15, r25
    f586:	c9 f0       	breq	.+50     	; 0xf5ba <lseek+0xc4>
    f588:	8a eb       	ldi	r24, 0xBA	; 186
    f58a:	9b e0       	ldi	r25, 0x0B	; 11
    f58c:	a0 e0       	ldi	r26, 0x00	; 0
    f58e:	ed b7       	in	r30, 0x3d	; 61
    f590:	fe b7       	in	r31, 0x3e	; 62
    f592:	81 83       	std	Z+1, r24	; 0x01
    f594:	92 83       	std	Z+2, r25	; 0x02
    f596:	a3 83       	std	Z+3, r26	; 0x03
    f598:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    f59c:	6f ef       	ldi	r22, 0xFF	; 255
    f59e:	7f ef       	ldi	r23, 0xFF	; 255
    f5a0:	cb 01       	movw	r24, r22
    f5a2:	0b c0       	rjmp	.+22     	; 0xf5ba <lseek+0xc4>
    f5a4:	01 30       	cpi	r16, 0x01	; 1
    f5a6:	11 05       	cpc	r17, r1
    f5a8:	81 f6       	brne	.-96     	; 0xf54a <lseek+0x54>
    f5aa:	88 89       	ldd	r24, Y+16	; 0x10
    f5ac:	99 89       	ldd	r25, Y+17	; 0x11
    f5ae:	aa 89       	ldd	r26, Y+18	; 0x12
    f5b0:	bb 89       	ldd	r27, Y+19	; 0x13
    f5b2:	c7 cf       	rjmp	.-114    	; 0xf542 <lseek+0x4c>
    f5b4:	83 e2       	ldi	r24, 0x23	; 35
    f5b6:	90 e0       	ldi	r25, 0x00	; 0
    f5b8:	d9 cf       	rjmp	.-78     	; 0xf56c <lseek+0x76>
    f5ba:	cd b7       	in	r28, 0x3d	; 61
    f5bc:	de b7       	in	r29, 0x3e	; 62
    f5be:	23 96       	adiw	r28, 0x03	; 3
    f5c0:	ea e0       	ldi	r30, 0x0A	; 10
    f5c2:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__+0x10>

0000f5c6 <fseek>:
    f5c6:	cf 92       	push	r12
    f5c8:	df 92       	push	r13
    f5ca:	ef 92       	push	r14
    f5cc:	ff 92       	push	r15
    f5ce:	cf 93       	push	r28
    f5d0:	df 93       	push	r29
    f5d2:	6a 01       	movw	r12, r20
    f5d4:	7b 01       	movw	r14, r22
    f5d6:	e9 01       	movw	r28, r18
    f5d8:	af db       	rcall	.-2210   	; 0xed38 <fileno>
    f5da:	97 fd       	sbrc	r25, 7
    f5dc:	12 c0       	rjmp	.+36     	; 0xf602 <fseek+0x3c>
    f5de:	9e 01       	movw	r18, r28
    f5e0:	b7 01       	movw	r22, r14
    f5e2:	a6 01       	movw	r20, r12
    f5e4:	88 df       	rcall	.-240    	; 0xf4f6 <lseek>
    f5e6:	21 e0       	ldi	r18, 0x01	; 1
    f5e8:	30 e0       	ldi	r19, 0x00	; 0
    f5ea:	6f 3f       	cpi	r22, 0xFF	; 255
    f5ec:	7f 4f       	sbci	r23, 0xFF	; 255
    f5ee:	8f 4f       	sbci	r24, 0xFF	; 255
    f5f0:	9f 4f       	sbci	r25, 0xFF	; 255
    f5f2:	11 f0       	breq	.+4      	; 0xf5f8 <fseek+0x32>
    f5f4:	20 e0       	ldi	r18, 0x00	; 0
    f5f6:	30 e0       	ldi	r19, 0x00	; 0
    f5f8:	88 27       	eor	r24, r24
    f5fa:	99 27       	eor	r25, r25
    f5fc:	82 1b       	sub	r24, r18
    f5fe:	93 0b       	sbc	r25, r19
    f600:	02 c0       	rjmp	.+4      	; 0xf606 <fseek+0x40>
    f602:	8f ef       	ldi	r24, 0xFF	; 255
    f604:	9f ef       	ldi	r25, 0xFF	; 255
    f606:	df 91       	pop	r29
    f608:	cf 91       	pop	r28
    f60a:	ff 90       	pop	r15
    f60c:	ef 90       	pop	r14
    f60e:	df 90       	pop	r13
    f610:	cf 90       	pop	r12
    f612:	08 95       	ret

0000f614 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f614:	a2 e0       	ldi	r26, 0x02	; 2
    f616:	b0 e0       	ldi	r27, 0x00	; 0
    f618:	e0 e1       	ldi	r30, 0x10	; 16
    f61a:	fb e7       	ldi	r31, 0x7B	; 123
    f61c:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__+0x10>
    f620:	5c 01       	movw	r10, r24
    f622:	8b 01       	movw	r16, r22
    f624:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f626:	fb 01       	movw	r30, r22
    f628:	10 82       	st	Z, r1

    errno = 0;
    f62a:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f62e:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f632:	9e db       	rcall	.-2244   	; 0xed70 <fileno_to_stream>
    f634:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f636:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <__iob>
    f63a:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <__iob+0x1>
    f63e:	e8 16       	cp	r14, r24
    f640:	f9 06       	cpc	r15, r25
    f642:	c9 f4       	brne	.+50     	; 0xf676 <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f644:	f7 01       	movw	r30, r14
    f646:	83 81       	ldd	r24, Z+3	; 0x03
    f648:	80 64       	ori	r24, 0x40	; 64
    f64a:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f64c:	1a 82       	std	Y+2, r1	; 0x02
    f64e:	19 82       	std	Y+1, r1	; 0x01
    f650:	c0 0e       	add	r12, r16
    f652:	d1 1e       	adc	r13, r17
        while(count--)
    f654:	0c 15       	cp	r16, r12
    f656:	1d 05       	cpc	r17, r13
    f658:	09 f4       	brne	.+2      	; 0xf65c <read+0x48>
    f65a:	3d c0       	rjmp	.+122    	; 0xf6d6 <read+0xc2>
        {
            ret = fgetc(stream);
    f65c:	c7 01       	movw	r24, r14
    f65e:	48 da       	rcall	.-2928   	; 0xeaf0 <fgetc>
            if(ret < 0)
    f660:	97 fd       	sbrc	r25, 7
    f662:	39 c0       	rjmp	.+114    	; 0xf6d6 <read+0xc2>
                break;

            *ptr++ = ret;
    f664:	f8 01       	movw	r30, r16
    f666:	81 93       	st	Z+, r24
    f668:	8f 01       	movw	r16, r30
            ++size;
    f66a:	89 81       	ldd	r24, Y+1	; 0x01
    f66c:	9a 81       	ldd	r25, Y+2	; 0x02
    f66e:	01 96       	adiw	r24, 0x01	; 1
    f670:	9a 83       	std	Y+2, r25	; 0x02
    f672:	89 83       	std	Y+1, r24	; 0x01
    f674:	ef cf       	rjmp	.-34     	; 0xf654 <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f676:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
    f67a:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
    f67e:	e8 16       	cp	r14, r24
    f680:	f9 06       	cpc	r15, r25
    f682:	71 f1       	breq	.+92     	; 0xf6e0 <read+0xcc>
    f684:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob+0x4>
    f688:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x5>
    f68c:	e8 16       	cp	r14, r24
    f68e:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f690:	39 f1       	breq	.+78     	; 0xf6e0 <read+0xcc>
    f692:	c5 01       	movw	r24, r10
    f694:	00 df       	rcall	.-512    	; 0xf496 <fileno_to_fatfs>
    if ( fh == NULL )
    f696:	00 97       	sbiw	r24, 0x00	; 0
    f698:	19 f4       	brne	.+6      	; 0xf6a0 <read+0x8c>
    {
        errno = EBADF;
    f69a:	89 e0       	ldi	r24, 0x09	; 9
    f69c:	90 e0       	ldi	r25, 0x00	; 0
    f69e:	16 c0       	rjmp	.+44     	; 0xf6cc <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f6a0:	9e 01       	movw	r18, r28
    f6a2:	2f 5f       	subi	r18, 0xFF	; 255
    f6a4:	3f 4f       	sbci	r19, 0xFF	; 255
    f6a6:	a6 01       	movw	r20, r12
    f6a8:	b8 01       	movw	r22, r16
    f6aa:	0e 94 40 5b 	call	0xb680	; 0xb680 <f_read>
    if(res != FR_OK)
    f6ae:	00 97       	sbiw	r24, 0x00	; 0
    f6b0:	91 f0       	breq	.+36     	; 0xf6d6 <read+0xc2>
    f6b2:	84 31       	cpi	r24, 0x14	; 20
    f6b4:	91 05       	cpc	r25, r1
    f6b6:	40 f4       	brcc	.+16     	; 0xf6c8 <read+0xb4>
    f6b8:	fc 01       	movw	r30, r24
    f6ba:	ea 55       	subi	r30, 0x5A	; 90
    f6bc:	f4 4f       	sbci	r31, 0xF4	; 244
    f6be:	80 81       	ld	r24, Z
    f6c0:	08 2e       	mov	r0, r24
    f6c2:	00 0c       	add	r0, r0
    f6c4:	99 0b       	sbc	r25, r25
    f6c6:	02 c0       	rjmp	.+4      	; 0xf6cc <read+0xb8>
    f6c8:	83 e2       	ldi	r24, 0x23	; 35
    f6ca:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f6cc:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f6d0:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f6d4:	05 c0       	rjmp	.+10     	; 0xf6e0 <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f6d6:	69 81       	ldd	r22, Y+1	; 0x01
    f6d8:	7a 81       	ldd	r23, Y+2	; 0x02
    f6da:	80 e0       	ldi	r24, 0x00	; 0
    f6dc:	90 e0       	ldi	r25, 0x00	; 0
    f6de:	03 c0       	rjmp	.+6      	; 0xf6e6 <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f6e0:	6f ef       	ldi	r22, 0xFF	; 255
    f6e2:	7f ef       	ldi	r23, 0xFF	; 255
    f6e4:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f6e6:	22 96       	adiw	r28, 0x02	; 2
    f6e8:	ea e0       	ldi	r30, 0x0A	; 10
    f6ea:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__+0x10>

0000f6ee <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f6ee:	0f 93       	push	r16
    f6f0:	1f 93       	push	r17
    f6f2:	cf 93       	push	r28
    f6f4:	df 93       	push	r29
    f6f6:	ec 01       	movw	r28, r24
    f6f8:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f6fa:	64 9f       	mul	r22, r20
    f6fc:	80 01       	movw	r16, r0
    f6fe:	65 9f       	mul	r22, r21
    f700:	10 0d       	add	r17, r0
    f702:	74 9f       	mul	r23, r20
    f704:	10 0d       	add	r17, r0
    f706:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f708:	17 db       	rcall	.-2514   	; 0xed38 <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f70a:	a8 01       	movw	r20, r16
    f70c:	be 01       	movw	r22, r28
    f70e:	82 df       	rcall	.-252    	; 0xf614 <read>
    if(ret < 0)
    f710:	97 fd       	sbrc	r25, 7
    f712:	02 c0       	rjmp	.+4      	; 0xf718 <fread+0x2a>
        return(0);

    return((size_t) ret);
    f714:	cb 01       	movw	r24, r22
    f716:	02 c0       	rjmp	.+4      	; 0xf71c <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f718:	80 e0       	ldi	r24, 0x00	; 0
    f71a:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f71c:	df 91       	pop	r29
    f71e:	cf 91       	pop	r28
    f720:	1f 91       	pop	r17
    f722:	0f 91       	pop	r16
    f724:	08 95       	ret

0000f726 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f726:	cf 93       	push	r28
    f728:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f72a:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f72e:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f732:	83 30       	cpi	r24, 0x03	; 3
    f734:	91 05       	cpc	r25, r1
    f736:	18 f4       	brcc	.+6      	; 0xf73e <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f738:	89 e0       	ldi	r24, 0x09	; 9
    f73a:	90 e0       	ldi	r25, 0x00	; 0
    f73c:	18 c0       	rjmp	.+48     	; 0xf76e <syncfs+0x48>
    f73e:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f740:	17 db       	rcall	.-2514   	; 0xed70 <fileno_to_stream>
    f742:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f744:	93 81       	ldd	r25, Z+3	; 0x03
    f746:	90 64       	ori	r25, 0x40	; 64
    f748:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f74a:	ce 01       	movw	r24, r28
    f74c:	a4 de       	rcall	.-696    	; 0xf496 <fileno_to_fatfs>
    if(fh == NULL)
    f74e:	00 97       	sbiw	r24, 0x00	; 0
    f750:	99 f3       	breq	.-26     	; 0xf738 <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f752:	0e 94 22 5e 	call	0xbc44	; 0xbc44 <f_sync>
    if (res != FR_OK)
    f756:	00 97       	sbiw	r24, 0x00	; 0
    f758:	a1 f0       	breq	.+40     	; 0xf782 <syncfs+0x5c>
    f75a:	84 31       	cpi	r24, 0x14	; 20
    f75c:	91 05       	cpc	r25, r1
    f75e:	70 f4       	brcc	.+28     	; 0xf77c <syncfs+0x56>
    f760:	fc 01       	movw	r30, r24
    f762:	ea 55       	subi	r30, 0x5A	; 90
    f764:	f4 4f       	sbci	r31, 0xF4	; 244
    f766:	80 81       	ld	r24, Z
    f768:	08 2e       	mov	r0, r24
    f76a:	00 0c       	add	r0, r0
    f76c:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f76e:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f772:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
        return(-1);
    f776:	8f ef       	ldi	r24, 0xFF	; 255
    f778:	9f ef       	ldi	r25, 0xFF	; 255
    f77a:	05 c0       	rjmp	.+10     	; 0xf786 <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f77c:	83 e2       	ldi	r24, 0x23	; 35
    f77e:	90 e0       	ldi	r25, 0x00	; 0
    f780:	f6 cf       	rjmp	.-20     	; 0xf76e <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f782:	80 e0       	ldi	r24, 0x00	; 0
    f784:	90 e0       	ldi	r25, 0x00	; 0
}
    f786:	df 91       	pop	r29
    f788:	cf 91       	pop	r28
    f78a:	08 95       	ret

0000f78c <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f78c:	cf 93       	push	r28
    f78e:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f790:	c0 e0       	ldi	r28, 0x00	; 0
    f792:	d0 e0       	ldi	r29, 0x00	; 0
    f794:	21 96       	adiw	r28, 0x01	; 1
    f796:	c0 31       	cpi	r28, 0x10	; 16
    f798:	d1 05       	cpc	r29, r1
    f79a:	51 f0       	breq	.+20     	; 0xf7b0 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f79c:	c3 30       	cpi	r28, 0x03	; 3
    f79e:	d1 05       	cpc	r29, r1
    f7a0:	cc f3       	brlt	.-14     	; 0xf794 <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f7a2:	ce 01       	movw	r24, r28
    f7a4:	78 de       	rcall	.-784    	; 0xf496 <fileno_to_fatfs>
        if(fh == NULL)
    f7a6:	89 2b       	or	r24, r25
    f7a8:	a9 f3       	breq	.-22     	; 0xf794 <sync+0x8>
            continue;

        (void ) syncfs(i);
    f7aa:	ce 01       	movw	r24, r28
    f7ac:	bc df       	rcall	.-136    	; 0xf726 <syncfs>
    f7ae:	f2 cf       	rjmp	.-28     	; 0xf794 <sync+0x8>
    }
}
    f7b0:	df 91       	pop	r29
    f7b2:	cf 91       	pop	r28
    f7b4:	08 95       	ret

0000f7b6 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f7b6:	a2 e0       	ldi	r26, 0x02	; 2
    f7b8:	b0 e0       	ldi	r27, 0x00	; 0
    f7ba:	e1 ee       	ldi	r30, 0xE1	; 225
    f7bc:	fb e7       	ldi	r31, 0x7B	; 123
    f7be:	0c 94 b9 e6 	jmp	0x1cd72	; 0x1cd72 <__prologue_saves__+0xc>
    f7c2:	8c 01       	movw	r16, r24
    f7c4:	b6 2e       	mov	r11, r22
    f7c6:	f7 2e       	mov	r15, r23
    f7c8:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f7ca:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f7ce:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f7d2:	ce da       	rcall	.-2660   	; 0xed70 <fileno_to_stream>
    f7d4:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f7d6:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
    f7da:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
    f7de:	c8 16       	cp	r12, r24
    f7e0:	d9 06       	cpc	r13, r25
    f7e2:	39 f0       	breq	.+14     	; 0xf7f2 <write+0x3c>
    f7e4:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob+0x4>
    f7e8:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x5>
    f7ec:	c8 16       	cp	r12, r24
    f7ee:	d9 06       	cpc	r13, r25
    f7f0:	d1 f4       	brne	.+52     	; 0xf826 <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f7f2:	1a 82       	std	Y+2, r1	; 0x02
    f7f4:	19 82       	std	Y+1, r1	; 0x01
    f7f6:	0b 2d       	mov	r16, r11
    f7f8:	1f 2d       	mov	r17, r15
    f7fa:	78 01       	movw	r14, r16
    f7fc:	e8 0c       	add	r14, r8
    f7fe:	f9 1c       	adc	r15, r9
        while(count--)
    f800:	0e 15       	cp	r16, r14
    f802:	1f 05       	cpc	r17, r15
    f804:	d1 f1       	breq	.+116    	; 0xf87a <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f806:	f8 01       	movw	r30, r16
    f808:	a1 90       	ld	r10, Z+
    f80a:	8f 01       	movw	r16, r30
    f80c:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f80e:	b6 01       	movw	r22, r12
    f810:	c5 01       	movw	r24, r10
    f812:	c4 d9       	rcall	.-3192   	; 0xeb9c <fputc>
            if(c != ret)
    f814:	a8 16       	cp	r10, r24
    f816:	b9 06       	cpc	r11, r25
    f818:	81 f5       	brne	.+96     	; 0xf87a <write+0xc4>
                break;

            ++size;
    f81a:	89 81       	ldd	r24, Y+1	; 0x01
    f81c:	9a 81       	ldd	r25, Y+2	; 0x02
    f81e:	01 96       	adiw	r24, 0x01	; 1
    f820:	9a 83       	std	Y+2, r25	; 0x02
    f822:	89 83       	std	Y+1, r24	; 0x01
    f824:	ed cf       	rjmp	.-38     	; 0xf800 <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f826:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <__iob>
    f82a:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <__iob+0x1>
    f82e:	c8 16       	cp	r12, r24
    f830:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f832:	41 f1       	breq	.+80     	; 0xf884 <write+0xce>
    f834:	c8 01       	movw	r24, r16
    f836:	2f de       	rcall	.-930    	; 0xf496 <fileno_to_fatfs>
    if ( fh == NULL )
    f838:	00 97       	sbiw	r24, 0x00	; 0
    f83a:	19 f4       	brne	.+6      	; 0xf842 <write+0x8c>
    {
        errno = EBADF;
    f83c:	89 e0       	ldi	r24, 0x09	; 9
    f83e:	90 e0       	ldi	r25, 0x00	; 0
    f840:	17 c0       	rjmp	.+46     	; 0xf870 <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f842:	9e 01       	movw	r18, r28
    f844:	2f 5f       	subi	r18, 0xFF	; 255
    f846:	3f 4f       	sbci	r19, 0xFF	; 255
    f848:	a4 01       	movw	r20, r8
    f84a:	6b 2d       	mov	r22, r11
    f84c:	7f 2d       	mov	r23, r15
    f84e:	0e 94 8b 5c 	call	0xb916	; 0xb916 <f_write>
    if(res != FR_OK)
    f852:	00 97       	sbiw	r24, 0x00	; 0
    f854:	91 f0       	breq	.+36     	; 0xf87a <write+0xc4>
    f856:	84 31       	cpi	r24, 0x14	; 20
    f858:	91 05       	cpc	r25, r1
    f85a:	40 f4       	brcc	.+16     	; 0xf86c <write+0xb6>
    f85c:	fc 01       	movw	r30, r24
    f85e:	ea 55       	subi	r30, 0x5A	; 90
    f860:	f4 4f       	sbci	r31, 0xF4	; 244
    f862:	80 81       	ld	r24, Z
    f864:	08 2e       	mov	r0, r24
    f866:	00 0c       	add	r0, r0
    f868:	99 0b       	sbc	r25, r25
    f86a:	02 c0       	rjmp	.+4      	; 0xf870 <write+0xba>
    f86c:	83 e2       	ldi	r24, 0x23	; 35
    f86e:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f870:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f874:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f878:	05 c0       	rjmp	.+10     	; 0xf884 <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f87a:	69 81       	ldd	r22, Y+1	; 0x01
    f87c:	7a 81       	ldd	r23, Y+2	; 0x02
    f87e:	80 e0       	ldi	r24, 0x00	; 0
    f880:	90 e0       	ldi	r25, 0x00	; 0
    f882:	03 c0       	rjmp	.+6      	; 0xf88a <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f884:	6f ef       	ldi	r22, 0xFF	; 255
    f886:	7f ef       	ldi	r23, 0xFF	; 255
    f888:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f88a:	22 96       	adiw	r28, 0x02	; 2
    f88c:	ec e0       	ldi	r30, 0x0C	; 12
    f88e:	0c 94 d5 e6 	jmp	0x1cdaa	; 0x1cdaa <__epilogue_restores__+0xc>

0000f892 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f892:	0f 93       	push	r16
    f894:	1f 93       	push	r17
    f896:	cf 93       	push	r28
    f898:	df 93       	push	r29
    f89a:	ec 01       	movw	r28, r24
    f89c:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f89e:	64 9f       	mul	r22, r20
    f8a0:	80 01       	movw	r16, r0
    f8a2:	65 9f       	mul	r22, r21
    f8a4:	10 0d       	add	r17, r0
    f8a6:	74 9f       	mul	r23, r20
    f8a8:	10 0d       	add	r17, r0
    f8aa:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f8ac:	45 da       	rcall	.-2934   	; 0xed38 <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f8ae:	a8 01       	movw	r20, r16
    f8b0:	be 01       	movw	r22, r28
    f8b2:	81 df       	rcall	.-254    	; 0xf7b6 <write>

    if(ret < 0)
    f8b4:	97 fd       	sbrc	r25, 7
    f8b6:	02 c0       	rjmp	.+4      	; 0xf8bc <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f8b8:	cb 01       	movw	r24, r22
    f8ba:	02 c0       	rjmp	.+4      	; 0xf8c0 <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f8bc:	80 e0       	ldi	r24, 0x00	; 0
    f8be:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f8c0:	df 91       	pop	r29
    f8c2:	cf 91       	pop	r28
    f8c4:	1f 91       	pop	r17
    f8c6:	0f 91       	pop	r16
    f8c8:	08 95       	ret

0000f8ca <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f8ca:	0f 93       	push	r16
    f8cc:	1f 93       	push	r17
    f8ce:	cf 93       	push	r28
    f8d0:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f8d2:	83 30       	cpi	r24, 0x03	; 3
    f8d4:	91 05       	cpc	r25, r1
    f8d6:	48 f4       	brcc	.+18     	; 0xf8ea <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f8d8:	89 e0       	ldi	r24, 0x09	; 9
    f8da:	90 e0       	ldi	r25, 0x00	; 0
    f8dc:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f8e0:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
        return(-1);
    f8e4:	8f ef       	ldi	r24, 0xFF	; 255
    f8e6:	9f ef       	ldi	r25, 0xFF	; 255
    f8e8:	20 c0       	rjmp	.+64     	; 0xf92a <free_file_descriptor+0x60>
    f8ea:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f8ec:	41 da       	rcall	.-2942   	; 0xed70 <fileno_to_stream>
    f8ee:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f8f0:	89 2b       	or	r24, r25
    f8f2:	c1 f3       	breq	.-16     	; 0xf8e4 <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f8f4:	f8 01       	movw	r30, r16
    f8f6:	84 85       	ldd	r24, Z+12	; 0x0c
    f8f8:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f8fa:	00 97       	sbiw	r24, 0x00	; 0
    f8fc:	11 f0       	breq	.+4      	; 0xf902 <free_file_descriptor+0x38>
    {
        safefree(fh);
    f8fe:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f902:	f8 01       	movw	r30, r16
    f904:	80 81       	ld	r24, Z
    f906:	91 81       	ldd	r25, Z+1	; 0x01
    f908:	00 97       	sbiw	r24, 0x00	; 0
    f90a:	21 f0       	breq	.+8      	; 0xf914 <free_file_descriptor+0x4a>
    f90c:	23 81       	ldd	r18, Z+3	; 0x03
    f90e:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f910:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safefree>
    }

    __iob[fileno]  = NULL;
    f914:	fe 01       	movw	r30, r28
    f916:	ee 0f       	add	r30, r30
    f918:	ff 1f       	adc	r31, r31
    f91a:	e9 53       	subi	r30, 0x39	; 57
    f91c:	f3 4e       	sbci	r31, 0xE3	; 227
    f91e:	11 82       	std	Z+1, r1	; 0x01
    f920:	10 82       	st	Z, r1
    safefree(stream);
    f922:	c8 01       	movw	r24, r16
    f924:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safefree>
    return(fileno);
    f928:	ce 01       	movw	r24, r28
}
    f92a:	df 91       	pop	r29
    f92c:	cf 91       	pop	r28
    f92e:	1f 91       	pop	r17
    f930:	0f 91       	pop	r16
    f932:	08 95       	ret

0000f934 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f934:	0f 93       	push	r16
    f936:	1f 93       	push	r17
    f938:	cf 93       	push	r28
    f93a:	df 93       	push	r29
    f93c:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f93e:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f942:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f946:	14 da       	rcall	.-3032   	; 0xed70 <fileno_to_stream>
    if(stream == NULL)
    f948:	89 2b       	or	r24, r25
    f94a:	d9 f0       	breq	.+54     	; 0xf982 <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f94c:	c8 01       	movw	r24, r16
    f94e:	a3 dd       	rcall	.-1210   	; 0xf496 <fileno_to_fatfs>
    if(fh == NULL)
    f950:	00 97       	sbiw	r24, 0x00	; 0
    f952:	b9 f0       	breq	.+46     	; 0xf982 <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f954:	0e 94 a2 5e 	call	0xbd44	; 0xbd44 <f_close>
    free_file_descriptor(fileno);
    f958:	ec 01       	movw	r28, r24
    f95a:	c8 01       	movw	r24, r16
    f95c:	b6 df       	rcall	.-148    	; 0xf8ca <free_file_descriptor>
    if (res != FR_OK)
    f95e:	20 97       	sbiw	r28, 0x00	; 0
    f960:	99 f0       	breq	.+38     	; 0xf988 <close+0x54>
    f962:	c4 31       	cpi	r28, 0x14	; 20
    f964:	d1 05       	cpc	r29, r1
    f966:	38 f4       	brcc	.+14     	; 0xf976 <close+0x42>
    f968:	ca 55       	subi	r28, 0x5A	; 90
    f96a:	d4 4f       	sbci	r29, 0xF4	; 244
    f96c:	88 81       	ld	r24, Y
    f96e:	08 2e       	mov	r0, r24
    f970:	00 0c       	add	r0, r0
    f972:	99 0b       	sbc	r25, r25
    f974:	02 c0       	rjmp	.+4      	; 0xf97a <close+0x46>
    f976:	83 e2       	ldi	r24, 0x23	; 35
    f978:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f97a:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f97e:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
        return(-1);
    f982:	8f ef       	ldi	r24, 0xFF	; 255
    f984:	9f ef       	ldi	r25, 0xFF	; 255
    f986:	02 c0       	rjmp	.+4      	; 0xf98c <close+0x58>
    }
    return(0);
    f988:	80 e0       	ldi	r24, 0x00	; 0
    f98a:	90 e0       	ldi	r25, 0x00	; 0
}
    f98c:	df 91       	pop	r29
    f98e:	cf 91       	pop	r28
    f990:	1f 91       	pop	r17
    f992:	0f 91       	pop	r16
    f994:	08 95       	ret

0000f996 <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    f996:	d0 d9       	rcall	.-3168   	; 0xed38 <fileno>
    if(fn < 0)
    f998:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    f99a:	02 c0       	rjmp	.+4      	; 0xf9a0 <fclose+0xa>
    f99c:	cb cf       	rjmp	.-106    	; 0xf934 <close>
    f99e:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    f9a0:	8f ef       	ldi	r24, 0xFF	; 255
    f9a2:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    f9a4:	08 95       	ret

0000f9a6 <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    f9a6:	0f 93       	push	r16
    f9a8:	1f 93       	push	r17
    f9aa:	cf 93       	push	r28
    f9ac:	df 93       	push	r29
    f9ae:	e7 ec       	ldi	r30, 0xC7	; 199
    f9b0:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f9b2:	c0 e0       	ldi	r28, 0x00	; 0
    f9b4:	d0 e0       	ldi	r29, 0x00	; 0
    f9b6:	21 96       	adiw	r28, 0x01	; 1
    f9b8:	c0 31       	cpi	r28, 0x10	; 16
    f9ba:	d1 05       	cpc	r29, r1
    f9bc:	49 f0       	breq	.+18     	; 0xf9d0 <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f9be:	c3 30       	cpi	r28, 0x03	; 3
    f9c0:	d1 05       	cpc	r29, r1
    f9c2:	24 f0       	brlt	.+8      	; 0xf9cc <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    f9c4:	82 81       	ldd	r24, Z+2	; 0x02
    f9c6:	93 81       	ldd	r25, Z+3	; 0x03
    f9c8:	89 2b       	or	r24, r25
    f9ca:	59 f0       	breq	.+22     	; 0xf9e2 <new_file_descriptor+0x3c>
    f9cc:	32 96       	adiw	r30, 0x02	; 2
    f9ce:	f3 cf       	rjmp	.-26     	; 0xf9b6 <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    f9d0:	87 e1       	ldi	r24, 0x17	; 23
    f9d2:	90 e0       	ldi	r25, 0x00	; 0
    f9d4:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f9d8:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    return(-1);
    f9dc:	8f ef       	ldi	r24, 0xFF	; 255
    f9de:	9f ef       	ldi	r25, 0xFF	; 255
    f9e0:	22 c0       	rjmp	.+68     	; 0xfa26 <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    f9e2:	61 e0       	ldi	r22, 0x01	; 1
    f9e4:	70 e0       	ldi	r23, 0x00	; 0
    f9e6:	8e e0       	ldi	r24, 0x0E	; 14
    f9e8:	90 e0       	ldi	r25, 0x00	; 0
    f9ea:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <safecalloc>
    f9ee:	8c 01       	movw	r16, r24
            if(stream == NULL)
    f9f0:	89 2b       	or	r24, r25
    f9f2:	59 f0       	breq	.+22     	; 0xfa0a <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    f9f4:	61 e0       	ldi	r22, 0x01	; 1
    f9f6:	70 e0       	ldi	r23, 0x00	; 0
    f9f8:	84 e2       	ldi	r24, 0x24	; 36
    f9fa:	92 e0       	ldi	r25, 0x02	; 2
    f9fc:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <safecalloc>
            if(fh == NULL)
    fa00:	00 97       	sbiw	r24, 0x00	; 0
    fa02:	31 f4       	brne	.+12     	; 0xfa10 <new_file_descriptor+0x6a>
            {
                safefree(stream);
    fa04:	c8 01       	movw	r24, r16
    fa06:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safefree>
                errno = ENOMEM;
    fa0a:	8c e0       	ldi	r24, 0x0C	; 12
    fa0c:	90 e0       	ldi	r25, 0x00	; 0
    fa0e:	e2 cf       	rjmp	.-60     	; 0xf9d4 <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    fa10:	fe 01       	movw	r30, r28
    fa12:	ee 0f       	add	r30, r30
    fa14:	ff 1f       	adc	r31, r31
    fa16:	e9 53       	subi	r30, 0x39	; 57
    fa18:	f3 4e       	sbci	r31, 0xE3	; 227
    fa1a:	11 83       	std	Z+1, r17	; 0x01
    fa1c:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    fa1e:	f8 01       	movw	r30, r16
    fa20:	95 87       	std	Z+13, r25	; 0x0d
    fa22:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    fa24:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    fa26:	df 91       	pop	r29
    fa28:	cf 91       	pop	r28
    fa2a:	1f 91       	pop	r17
    fa2c:	0f 91       	pop	r16
    fa2e:	08 95       	ret

0000fa30 <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    fa30:	a0 e0       	ldi	r26, 0x00	; 0
    fa32:	b0 e0       	ldi	r27, 0x00	; 0
    fa34:	ee e1       	ldi	r30, 0x1E	; 30
    fa36:	fd e7       	ldi	r31, 0x7D	; 125
    fa38:	0c 94 b7 e6 	jmp	0x1cd6e	; 0x1cd6e <__prologue_saves__+0x8>
    fa3c:	5c 01       	movw	r10, r24
    fa3e:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fa40:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    fa44:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    fa48:	7b 01       	movw	r14, r22
    fa4a:	83 e0       	ldi	r24, 0x03	; 3
    fa4c:	e8 22       	and	r14, r24
    fa4e:	ff 24       	eor	r15, r15
    fa50:	e2 e0       	ldi	r30, 0x02	; 2
    fa52:	ee 16       	cp	r14, r30
    fa54:	f1 04       	cpc	r15, r1
    fa56:	31 f0       	breq	.+12     	; 0xfa64 <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    fa58:	e1 14       	cp	r14, r1
    fa5a:	f1 04       	cpc	r15, r1
    fa5c:	31 f0       	breq	.+12     	; 0xfa6a <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    fa5e:	02 e0       	ldi	r16, 0x02	; 2
    fa60:	10 e0       	ldi	r17, 0x00	; 0
    fa62:	05 c0       	rjmp	.+10     	; 0xfa6e <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    fa64:	03 e0       	ldi	r16, 0x03	; 3
    fa66:	10 e0       	ldi	r17, 0x00	; 0
    fa68:	02 c0       	rjmp	.+4      	; 0xfa6e <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    fa6a:	01 e0       	ldi	r16, 0x01	; 1
    fa6c:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    fa6e:	c6 fe       	sbrs	r12, 6
    fa70:	05 c0       	rjmp	.+10     	; 0xfa7c <open+0x4c>
    {
        if(flags & O_TRUNC)
    fa72:	d1 fe       	sbrs	r13, 1
    fa74:	02 c0       	rjmp	.+4      	; 0xfa7a <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    fa76:	08 60       	ori	r16, 0x08	; 8
    fa78:	01 c0       	rjmp	.+2      	; 0xfa7c <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    fa7a:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    fa7c:	94 df       	rcall	.-216    	; 0xf9a6 <new_file_descriptor>
    fa7e:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fa80:	77 d9       	rcall	.-3346   	; 0xed70 <fileno_to_stream>
    fa82:	ec 01       	movw	r28, r24
    fa84:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    fa86:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fa88:	09 f4       	brne	.+2      	; 0xfa8c <open+0x5c>
    fa8a:	48 c0       	rjmp	.+144    	; 0xfb1c <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fa8c:	04 dd       	rcall	.-1528   	; 0xf496 <fileno_to_fatfs>
    fa8e:	4c 01       	movw	r8, r24
    fa90:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    fa92:	59 f4       	brne	.+22     	; 0xfaaa <open+0x7a>
    {
        free_file_descriptor(fileno);
    fa94:	c3 01       	movw	r24, r6
    fa96:	19 df       	rcall	.-462    	; 0xf8ca <free_file_descriptor>
    fa98:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    fa9a:	90 e0       	ldi	r25, 0x00	; 0
    fa9c:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    faa0:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    faa4:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    faa6:	9f ef       	ldi	r25, 0xFF	; 255
    faa8:	5d c0       	rjmp	.+186    	; 0xfb64 <open+0x134>
    faaa:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    faac:	b5 01       	movw	r22, r10
    faae:	0e 94 88 59 	call	0xb310	; 0xb310 <f_open>
    fab2:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    fab4:	91 f0       	breq	.+36     	; 0xfada <open+0xaa>
    fab6:	84 31       	cpi	r24, 0x14	; 20
    fab8:	91 05       	cpc	r25, r1
    faba:	40 f4       	brcc	.+16     	; 0xfacc <open+0x9c>
    fabc:	fc 01       	movw	r30, r24
    fabe:	ea 55       	subi	r30, 0x5A	; 90
    fac0:	f4 4f       	sbci	r31, 0xF4	; 244
    fac2:	80 81       	ld	r24, Z
    fac4:	08 2e       	mov	r0, r24
    fac6:	00 0c       	add	r0, r0
    fac8:	99 0b       	sbc	r25, r25
    faca:	02 c0       	rjmp	.+4      	; 0xfad0 <open+0xa0>
    facc:	83 e2       	ldi	r24, 0x23	; 35
    face:	90 e0       	ldi	r25, 0x00	; 0
    fad0:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    fad4:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    fad8:	20 c0       	rjmp	.+64     	; 0xfb1a <open+0xea>
    fada:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    fadc:	21 c0       	rjmp	.+66     	; 0xfb20 <open+0xf0>
    fade:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    fae0:	42 85       	ldd	r20, Z+10	; 0x0a
    fae2:	53 85       	ldd	r21, Z+11	; 0x0b
    fae4:	64 85       	ldd	r22, Z+12	; 0x0c
    fae6:	75 85       	ldd	r23, Z+13	; 0x0d
    fae8:	c4 01       	movw	r24, r8
    faea:	0e 94 4c 60 	call	0xc098	; 0xc098 <f_lseek>
    faee:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    faf0:	b9 f0       	breq	.+46     	; 0xfb20 <open+0xf0>
    faf2:	84 31       	cpi	r24, 0x14	; 20
    faf4:	91 05       	cpc	r25, r1
    faf6:	40 f4       	brcc	.+16     	; 0xfb08 <open+0xd8>
    faf8:	fc 01       	movw	r30, r24
    fafa:	ea 55       	subi	r30, 0x5A	; 90
    fafc:	f4 4f       	sbci	r31, 0xF4	; 244
    fafe:	80 81       	ld	r24, Z
    fb00:	08 2e       	mov	r0, r24
    fb02:	00 0c       	add	r0, r0
    fb04:	99 0b       	sbc	r25, r25
    fb06:	02 c0       	rjmp	.+4      	; 0xfb0c <open+0xdc>
    fb08:	83 e2       	ldi	r24, 0x23	; 35
    fb0a:	90 e0       	ldi	r25, 0x00	; 0
    fb0c:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    fb10:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    fb14:	c4 01       	movw	r24, r8
            f_close(fh);
    fb16:	0e 94 a2 5e 	call	0xbd44	; 0xbd44 <f_close>
            free_file_descriptor(fileno);
    fb1a:	c3 01       	movw	r24, r6
    fb1c:	d6 de       	rcall	.-596    	; 0xf8ca <free_file_descriptor>
    fb1e:	c2 cf       	rjmp	.-124    	; 0xfaa4 <open+0x74>
    fb20:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    fb22:	ef 16       	cp	r14, r31
    fb24:	f1 04       	cpc	r15, r1
    fb26:	51 f4       	brne	.+20     	; 0xfb3c <open+0x10c>
    fb28:	8d e2       	ldi	r24, 0x2D	; 45
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fb2a:	95 e7       	ldi	r25, 0x75	; 117
    fb2c:	99 87       	std	Y+9, r25	; 0x09
    fb2e:	88 87       	std	Y+8, r24	; 0x08
    fb30:	8a ea       	ldi	r24, 0xAA	; 170
        stream->get = fatfs_getc;
    fb32:	94 e7       	ldi	r25, 0x74	; 116
    fb34:	9b 87       	std	Y+11, r25	; 0x0b
    fb36:	8a 87       	std	Y+10, r24	; 0x0a
    fb38:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    fb3a:	12 c0       	rjmp	.+36     	; 0xfb60 <open+0x130>
    fb3c:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    fb3e:	f1 04       	cpc	r15, r1
    fb40:	41 f4       	brne	.+16     	; 0xfb52 <open+0x122>
    fb42:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    fb44:	18 86       	std	Y+8, r1	; 0x08
    fb46:	8a ea       	ldi	r24, 0xAA	; 170
        stream->get = fatfs_getc;
    fb48:	94 e7       	ldi	r25, 0x74	; 116
    fb4a:	9b 87       	std	Y+11, r25	; 0x0b
    fb4c:	8a 87       	std	Y+10, r24	; 0x0a
    fb4e:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    fb50:	07 c0       	rjmp	.+14     	; 0xfb60 <open+0x130>
    fb52:	8d e2       	ldi	r24, 0x2D	; 45
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fb54:	95 e7       	ldi	r25, 0x75	; 117
    fb56:	99 87       	std	Y+9, r25	; 0x09
    fb58:	88 87       	std	Y+8, r24	; 0x08
    fb5a:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    fb5c:	1a 86       	std	Y+10, r1	; 0x0a
    fb5e:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    fb60:	8b 83       	std	Y+3, r24	; 0x03
    fb62:	c3 01       	movw	r24, r6
    }

    return(fileno);
    fb64:	cd b7       	in	r28, 0x3d	; 61
}
    fb66:	de b7       	in	r29, 0x3e	; 62
    fb68:	ee e0       	ldi	r30, 0x0E	; 14
    fb6a:	0c 94 d3 e6 	jmp	0x1cda6	; 0x1cda6 <__epilogue_restores__+0x8>

0000fb6e <posix_fopen_modes_to_open>:
    fb6e:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    fb70:	df 93       	push	r29
    fb72:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    fb74:	62 e4       	ldi	r22, 0x42	; 66
    fb76:	73 e0       	ldi	r23, 0x03	; 3
    fb78:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <strcmp>
    fb7c:	00 97       	sbiw	r24, 0x00	; 0
    fb7e:	09 f4       	brne	.+2      	; 0xfb82 <posix_fopen_modes_to_open+0x14>
    fb80:	5d c0       	rjmp	.+186    	; 0xfc3c <posix_fopen_modes_to_open+0xce>
    fb82:	6e ef       	ldi	r22, 0xFE	; 254
    fb84:	78 e0       	ldi	r23, 0x08	; 8
    fb86:	ce 01       	movw	r24, r28
    fb88:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <strcmp>
    fb8c:	00 97       	sbiw	r24, 0x00	; 0
    fb8e:	09 f4       	brne	.+2      	; 0xfb92 <posix_fopen_modes_to_open+0x24>
    fb90:	55 c0       	rjmp	.+170    	; 0xfc3c <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    fb92:	61 e0       	ldi	r22, 0x01	; 1
    fb94:	79 e0       	ldi	r23, 0x09	; 9
    fb96:	ce 01       	movw	r24, r28
    fb98:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <strcmp>
    fb9c:	89 2b       	or	r24, r25
    fb9e:	09 f4       	brne	.+2      	; 0xfba2 <posix_fopen_modes_to_open+0x34>
    fba0:	42 c0       	rjmp	.+132    	; 0xfc26 <posix_fopen_modes_to_open+0xb8>
    fba2:	64 e0       	ldi	r22, 0x04	; 4
    fba4:	79 e0       	ldi	r23, 0x09	; 9
    fba6:	ce 01       	movw	r24, r28
    fba8:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <strcmp>
    fbac:	89 2b       	or	r24, r25
    fbae:	d9 f1       	breq	.+118    	; 0xfc26 <posix_fopen_modes_to_open+0xb8>
    fbb0:	68 e0       	ldi	r22, 0x08	; 8
    fbb2:	79 e0       	ldi	r23, 0x09	; 9
    fbb4:	ce 01       	movw	r24, r28
    fbb6:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <strcmp>
    fbba:	89 2b       	or	r24, r25
    fbbc:	a1 f1       	breq	.+104    	; 0xfc26 <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    fbbe:	6d eb       	ldi	r22, 0xBD	; 189
    fbc0:	7a e0       	ldi	r23, 0x0A	; 10
    fbc2:	ce 01       	movw	r24, r28
    fbc4:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <strcmp>
    fbc8:	89 2b       	or	r24, r25
    fbca:	81 f1       	breq	.+96     	; 0xfc2c <posix_fopen_modes_to_open+0xbe>
    fbcc:	6c e0       	ldi	r22, 0x0C	; 12
    fbce:	79 e0       	ldi	r23, 0x09	; 9
    fbd0:	ce 01       	movw	r24, r28
    fbd2:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <strcmp>
    fbd6:	89 2b       	or	r24, r25
    fbd8:	49 f1       	breq	.+82     	; 0xfc2c <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    fbda:	6f e0       	ldi	r22, 0x0F	; 15
    fbdc:	79 e0       	ldi	r23, 0x09	; 9
    fbde:	ce 01       	movw	r24, r28
    fbe0:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <strcmp>
    fbe4:	89 2b       	or	r24, r25
    fbe6:	29 f1       	breq	.+74     	; 0xfc32 <posix_fopen_modes_to_open+0xc4>
    fbe8:	62 e1       	ldi	r22, 0x12	; 18
    fbea:	79 e0       	ldi	r23, 0x09	; 9
    fbec:	ce 01       	movw	r24, r28
    fbee:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <strcmp>
    fbf2:	89 2b       	or	r24, r25
    fbf4:	f1 f0       	breq	.+60     	; 0xfc32 <posix_fopen_modes_to_open+0xc4>
    fbf6:	66 e1       	ldi	r22, 0x16	; 22
    fbf8:	79 e0       	ldi	r23, 0x09	; 9
    fbfa:	ce 01       	movw	r24, r28
    fbfc:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <strcmp>
    fc00:	89 2b       	or	r24, r25
    fc02:	b9 f0       	breq	.+46     	; 0xfc32 <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    fc04:	69 e2       	ldi	r22, 0x29	; 41
    fc06:	73 e1       	ldi	r23, 0x13	; 19
    fc08:	ce 01       	movw	r24, r28
    fc0a:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <strcmp>
    fc0e:	89 2b       	or	r24, r25
    fc10:	99 f0       	breq	.+38     	; 0xfc38 <posix_fopen_modes_to_open+0xca>
    fc12:	6a e1       	ldi	r22, 0x1A	; 26
    fc14:	79 e0       	ldi	r23, 0x09	; 9
    fc16:	ce 01       	movw	r24, r28
    fc18:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <strcmp>
    fc1c:	89 2b       	or	r24, r25
    fc1e:	61 f0       	breq	.+24     	; 0xfc38 <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    fc20:	8f ef       	ldi	r24, 0xFF	; 255
    fc22:	9f ef       	ldi	r25, 0xFF	; 255
    fc24:	0b c0       	rjmp	.+22     	; 0xfc3c <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    fc26:	82 e0       	ldi	r24, 0x02	; 2
    fc28:	92 e0       	ldi	r25, 0x02	; 2
    fc2a:	08 c0       	rjmp	.+16     	; 0xfc3c <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    fc2c:	81 e4       	ldi	r24, 0x41	; 65
    fc2e:	92 e0       	ldi	r25, 0x02	; 2
    fc30:	05 c0       	rjmp	.+10     	; 0xfc3c <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    fc32:	82 e4       	ldi	r24, 0x42	; 66
    fc34:	92 e0       	ldi	r25, 0x02	; 2
    fc36:	02 c0       	rjmp	.+4      	; 0xfc3c <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    fc38:	81 e4       	ldi	r24, 0x41	; 65
    fc3a:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    fc3c:	df 91       	pop	r29
    fc3e:	cf 91       	pop	r28
    fc40:	08 95       	ret

0000fc42 <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    fc42:	cf 93       	push	r28
    fc44:	df 93       	push	r29
    fc46:	ec 01       	movw	r28, r24
    fc48:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    fc4a:	91 df       	rcall	.-222    	; 0xfb6e <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    fc4c:	bc 01       	movw	r22, r24
    fc4e:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    fc50:	ef de       	rcall	.-546    	; 0xfa30 <open>
    fc52:	8e d8       	rcall	.-3812   	; 0xed70 <fileno_to_stream>
}
    fc54:	df 91       	pop	r29
    fc56:	cf 91       	pop	r28
    fc58:	08 95       	ret

0000fc5a <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    fc5a:	a8 e0       	ldi	r26, 0x08	; 8
    fc5c:	b0 e0       	ldi	r27, 0x00	; 0
    fc5e:	e3 e3       	ldi	r30, 0x33	; 51
    fc60:	fe e7       	ldi	r31, 0x7E	; 126
    fc62:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    fc66:	80 e2       	ldi	r24, 0x20	; 32
    fc68:	96 e7       	ldi	r25, 0x76	; 118
    fc6a:	9a 83       	std	Y+2, r25	; 0x02
    fc6c:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    fc6e:	18 86       	std	Y+8, r1	; 0x08
    fc70:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    fc72:	8d 85       	ldd	r24, Y+13	; 0x0d
    fc74:	9e 85       	ldd	r25, Y+14	; 0x0e
    fc76:	9c 83       	std	Y+4, r25	; 0x04
    fc78:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    fc7a:	4f 85       	ldd	r20, Y+15	; 0x0f
    fc7c:	58 89       	ldd	r21, Y+16	; 0x10
    fc7e:	60 e8       	ldi	r22, 0x80	; 128
    fc80:	9e 01       	movw	r18, r28
    fc82:	2f 5e       	subi	r18, 0xEF	; 239
    fc84:	3f 4f       	sbci	r19, 0xFF	; 255
    fc86:	ce 01       	movw	r24, r28
    fc88:	01 96       	adiw	r24, 0x01	; 1
    fc8a:	0e 94 3b 42 	call	0x8476	; 0x8476 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    fc8e:	8f 81       	ldd	r24, Y+7	; 0x07
    fc90:	98 85       	ldd	r25, Y+8	; 0x08
    fc92:	28 96       	adiw	r28, 0x08	; 8
    fc94:	e2 e0       	ldi	r30, 0x02	; 2
    fc96:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

0000fc9a <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    fc9a:	cf 93       	push	r28
    fc9c:	df 93       	push	r29
    fc9e:	00 d0       	rcall	.+0      	; 0xfca0 <posix_help+0x6>
    fca0:	1f 92       	push	r1
    fca2:	ec 01       	movw	r28, r24
    fca4:	84 e8       	ldi	r24, 0x84	; 132
    fca6:	9e e0       	ldi	r25, 0x0E	; 14
    fca8:	a0 e0       	ldi	r26, 0x00	; 0
    fcaa:	ed b7       	in	r30, 0x3d	; 61
    fcac:	fe b7       	in	r31, 0x3e	; 62
    fcae:	81 83       	std	Z+1, r24	; 0x01
    fcb0:	92 83       	std	Z+2, r25	; 0x02
    fcb2:	a3 83       	std	Z+3, r26	; 0x03
    fcb4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    fcb8:	cd 2b       	or	r28, r29
    fcba:	51 f0       	breq	.+20     	; 0xfcd0 <posix_help+0x36>
    fcbc:	8e eb       	ldi	r24, 0xBE	; 190
    fcbe:	9d e0       	ldi	r25, 0x0D	; 13
    fcc0:	a0 e0       	ldi	r26, 0x00	; 0
    fcc2:	ed b7       	in	r30, 0x3d	; 61
    fcc4:	fe b7       	in	r31, 0x3e	; 62
    fcc6:	81 83       	std	Z+1, r24	; 0x01
    fcc8:	92 83       	std	Z+2, r25	; 0x02
    fcca:	a3 83       	std	Z+3, r26	; 0x03
    fccc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    fcd0:	cd b7       	in	r28, 0x3d	; 61
    fcd2:	de b7       	in	r29, 0x3e	; 62
    fcd4:	23 96       	adiw	r28, 0x03	; 3
    fcd6:	e2 e0       	ldi	r30, 0x02	; 2
    fcd8:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

0000fcdc <copy>:
    fcdc:	4f 92       	push	r4
    fcde:	5f 92       	push	r5
    fce0:	6f 92       	push	r6
    fce2:	8f 92       	push	r8
    fce4:	9f 92       	push	r9
    fce6:	af 92       	push	r10
    fce8:	bf 92       	push	r11
    fcea:	cf 92       	push	r12
    fcec:	df 92       	push	r13
    fcee:	ef 92       	push	r14
    fcf0:	ff 92       	push	r15
    fcf2:	0f 93       	push	r16
    fcf4:	1f 93       	push	r17
    fcf6:	cf 93       	push	r28
    fcf8:	df 93       	push	r29
    fcfa:	ad b7       	in	r26, 0x3d	; 61
    fcfc:	be b7       	in	r27, 0x3e	; 62
    fcfe:	17 97       	sbiw	r26, 0x07	; 7
    fd00:	0f b6       	in	r0, 0x3f	; 63
    fd02:	f8 94       	cli
    fd04:	be bf       	out	0x3e, r27	; 62
    fd06:	0f be       	out	0x3f, r0	; 63
    fd08:	ad bf       	out	0x3d, r26	; 61
    fd0a:	8c 01       	movw	r16, r24
    fd0c:	eb 01       	movw	r28, r22
    fd0e:	ed b7       	in	r30, 0x3d	; 61
    fd10:	fe b7       	in	r31, 0x3e	; 62
    fd12:	95 83       	std	Z+5, r25	; 0x05
    fd14:	84 83       	std	Z+4, r24	; 0x04
    fd16:	8b e1       	ldi	r24, 0x1B	; 27
    fd18:	9d e0       	ldi	r25, 0x0D	; 13
    fd1a:	a0 e0       	ldi	r26, 0x00	; 0
    fd1c:	81 83       	std	Z+1, r24	; 0x01
    fd1e:	92 83       	std	Z+2, r25	; 0x02
    fd20:	a3 83       	std	Z+3, r26	; 0x03
    fd22:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    fd26:	6e ef       	ldi	r22, 0xFE	; 254
    fd28:	78 e0       	ldi	r23, 0x08	; 8
    fd2a:	c8 01       	movw	r24, r16
    fd2c:	8a df       	rcall	.-236    	; 0xfc42 <fopen>
    fd2e:	7c 01       	movw	r14, r24
    fd30:	ed b7       	in	r30, 0x3d	; 61
    fd32:	fe b7       	in	r31, 0x3e	; 62
    fd34:	89 2b       	or	r24, r25
    fd36:	59 f4       	brne	.+22     	; 0xfd4e <copy+0x72>
    fd38:	15 83       	std	Z+5, r17	; 0x05
    fd3a:	04 83       	std	Z+4, r16	; 0x04
    fd3c:	8b e0       	ldi	r24, 0x0B	; 11
    fd3e:	9d e0       	ldi	r25, 0x0D	; 13
    fd40:	a0 e0       	ldi	r26, 0x00	; 0
    fd42:	81 83       	std	Z+1, r24	; 0x01
    fd44:	92 83       	std	Z+2, r25	; 0x02
    fd46:	a3 83       	std	Z+3, r26	; 0x03
    fd48:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    fd4c:	20 c0       	rjmp	.+64     	; 0xfd8e <copy+0xb2>
    fd4e:	d5 83       	std	Z+5, r29	; 0x05
    fd50:	c4 83       	std	Z+4, r28	; 0x04
    fd52:	8e ef       	ldi	r24, 0xFE	; 254
    fd54:	9c e0       	ldi	r25, 0x0C	; 12
    fd56:	a0 e0       	ldi	r26, 0x00	; 0
    fd58:	81 83       	std	Z+1, r24	; 0x01
    fd5a:	92 83       	std	Z+2, r25	; 0x02
    fd5c:	a3 83       	std	Z+3, r26	; 0x03
    fd5e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    fd62:	6c e0       	ldi	r22, 0x0C	; 12
    fd64:	79 e0       	ldi	r23, 0x09	; 9
    fd66:	ce 01       	movw	r24, r28
    fd68:	6c df       	rcall	.-296    	; 0xfc42 <fopen>
    fd6a:	8c 01       	movw	r16, r24
    fd6c:	89 2b       	or	r24, r25
    fd6e:	a1 f4       	brne	.+40     	; 0xfd98 <copy+0xbc>
    fd70:	ed b7       	in	r30, 0x3d	; 61
    fd72:	fe b7       	in	r31, 0x3e	; 62
    fd74:	d5 83       	std	Z+5, r29	; 0x05
    fd76:	c4 83       	std	Z+4, r28	; 0x04
    fd78:	8e ee       	ldi	r24, 0xEE	; 238
    fd7a:	9c e0       	ldi	r25, 0x0C	; 12
    fd7c:	a0 e0       	ldi	r26, 0x00	; 0
    fd7e:	81 83       	std	Z+1, r24	; 0x01
    fd80:	92 83       	std	Z+2, r25	; 0x02
    fd82:	a3 83       	std	Z+3, r26	; 0x03
    fd84:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    fd88:	80 e0       	ldi	r24, 0x00	; 0
    fd8a:	90 e0       	ldi	r25, 0x00	; 0
    fd8c:	04 de       	rcall	.-1016   	; 0xf996 <fclose>
    fd8e:	6f ef       	ldi	r22, 0xFF	; 255
    fd90:	7f ef       	ldi	r23, 0xFF	; 255
    fd92:	8f ef       	ldi	r24, 0xFF	; 255
    fd94:	9f ef       	ldi	r25, 0xFF	; 255
    fd96:	68 c0       	rjmp	.+208    	; 0xfe68 <copy+0x18c>
    fd98:	61 e0       	ldi	r22, 0x01	; 1
    fd9a:	70 e0       	ldi	r23, 0x00	; 0
    fd9c:	80 e0       	ldi	r24, 0x00	; 0
    fd9e:	92 e0       	ldi	r25, 0x02	; 2
    fda0:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <safecalloc>
    fda4:	6c 01       	movw	r12, r24
    fda6:	89 2b       	or	r24, r25
    fda8:	21 f4       	brne	.+8      	; 0xfdb2 <copy+0xd6>
    fdaa:	c7 01       	movw	r24, r14
    fdac:	f4 dd       	rcall	.-1048   	; 0xf996 <fclose>
    fdae:	c8 01       	movw	r24, r16
    fdb0:	ed cf       	rjmp	.-38     	; 0xfd8c <copy+0xb0>
    fdb2:	81 ee       	ldi	r24, 0xE1	; 225
    fdb4:	9c e0       	ldi	r25, 0x0C	; 12
    fdb6:	a0 e0       	ldi	r26, 0x00	; 0
    fdb8:	ed b7       	in	r30, 0x3d	; 61
    fdba:	fe b7       	in	r31, 0x3e	; 62
    fdbc:	81 83       	std	Z+1, r24	; 0x01
    fdbe:	92 83       	std	Z+2, r25	; 0x02
    fdc0:	a3 83       	std	Z+3, r26	; 0x03
    fdc2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    fdc6:	81 2c       	mov	r8, r1
    fdc8:	91 2c       	mov	r9, r1
    fdca:	54 01       	movw	r10, r8
    fdcc:	85 ec       	ldi	r24, 0xC5	; 197
    fdce:	9c e0       	ldi	r25, 0x0C	; 12
    fdd0:	2c 01       	movw	r4, r24
    fdd2:	61 2c       	mov	r6, r1
    fdd4:	97 01       	movw	r18, r14
    fdd6:	40 e0       	ldi	r20, 0x00	; 0
    fdd8:	52 e0       	ldi	r21, 0x02	; 2
    fdda:	61 e0       	ldi	r22, 0x01	; 1
    fddc:	70 e0       	ldi	r23, 0x00	; 0
    fdde:	c6 01       	movw	r24, r12
    fde0:	86 dc       	rcall	.-1780   	; 0xf6ee <fread>
    fde2:	ec 01       	movw	r28, r24
    fde4:	18 16       	cp	r1, r24
    fde6:	19 06       	cpc	r1, r25
    fde8:	44 f5       	brge	.+80     	; 0xfe3a <copy+0x15e>
    fdea:	98 01       	movw	r18, r16
    fdec:	ae 01       	movw	r20, r28
    fdee:	61 e0       	ldi	r22, 0x01	; 1
    fdf0:	70 e0       	ldi	r23, 0x00	; 0
    fdf2:	c6 01       	movw	r24, r12
    fdf4:	4e dd       	rcall	.-1380   	; 0xf892 <fwrite>
    fdf6:	8c 17       	cp	r24, r28
    fdf8:	9d 07       	cpc	r25, r29
    fdfa:	5c f4       	brge	.+22     	; 0xfe12 <copy+0x136>
    fdfc:	84 ed       	ldi	r24, 0xD4	; 212
    fdfe:	9c e0       	ldi	r25, 0x0C	; 12
    fe00:	a0 e0       	ldi	r26, 0x00	; 0
    fe02:	ed b7       	in	r30, 0x3d	; 61
    fe04:	fe b7       	in	r31, 0x3e	; 62
    fe06:	81 83       	std	Z+1, r24	; 0x01
    fe08:	92 83       	std	Z+2, r25	; 0x02
    fe0a:	a3 83       	std	Z+3, r26	; 0x03
    fe0c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    fe10:	14 c0       	rjmp	.+40     	; 0xfe3a <copy+0x15e>
    fe12:	ce 01       	movw	r24, r28
    fe14:	dd 0f       	add	r29, r29
    fe16:	aa 0b       	sbc	r26, r26
    fe18:	bb 0b       	sbc	r27, r27
    fe1a:	88 0e       	add	r8, r24
    fe1c:	99 1e       	adc	r9, r25
    fe1e:	aa 1e       	adc	r10, r26
    fe20:	bb 1e       	adc	r11, r27
    fe22:	ed b7       	in	r30, 0x3d	; 61
    fe24:	fe b7       	in	r31, 0x3e	; 62
    fe26:	84 82       	std	Z+4, r8	; 0x04
    fe28:	95 82       	std	Z+5, r9	; 0x05
    fe2a:	a6 82       	std	Z+6, r10	; 0x06
    fe2c:	b7 82       	std	Z+7, r11	; 0x07
    fe2e:	41 82       	std	Z+1, r4	; 0x01
    fe30:	52 82       	std	Z+2, r5	; 0x02
    fe32:	63 82       	std	Z+3, r6	; 0x03
    fe34:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    fe38:	cd cf       	rjmp	.-102    	; 0xfdd4 <copy+0xf8>
    fe3a:	ed b7       	in	r30, 0x3d	; 61
    fe3c:	fe b7       	in	r31, 0x3e	; 62
    fe3e:	84 82       	std	Z+4, r8	; 0x04
    fe40:	95 82       	std	Z+5, r9	; 0x05
    fe42:	a6 82       	std	Z+6, r10	; 0x06
    fe44:	b7 82       	std	Z+7, r11	; 0x07
    fe46:	82 eb       	ldi	r24, 0xB2	; 178
    fe48:	9c e0       	ldi	r25, 0x0C	; 12
    fe4a:	a0 e0       	ldi	r26, 0x00	; 0
    fe4c:	81 83       	std	Z+1, r24	; 0x01
    fe4e:	92 83       	std	Z+2, r25	; 0x02
    fe50:	a3 83       	std	Z+3, r26	; 0x03
    fe52:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    fe56:	c6 01       	movw	r24, r12
    fe58:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safefree>
    fe5c:	c7 01       	movw	r24, r14
    fe5e:	9b dd       	rcall	.-1226   	; 0xf996 <fclose>
    fe60:	c8 01       	movw	r24, r16
    fe62:	99 dd       	rcall	.-1230   	; 0xf996 <fclose>
    fe64:	b4 01       	movw	r22, r8
    fe66:	c5 01       	movw	r24, r10
    fe68:	ad b7       	in	r26, 0x3d	; 61
    fe6a:	be b7       	in	r27, 0x3e	; 62
    fe6c:	17 96       	adiw	r26, 0x07	; 7
    fe6e:	0f b6       	in	r0, 0x3f	; 63
    fe70:	f8 94       	cli
    fe72:	be bf       	out	0x3e, r27	; 62
    fe74:	0f be       	out	0x3f, r0	; 63
    fe76:	ad bf       	out	0x3d, r26	; 61
    fe78:	df 91       	pop	r29
    fe7a:	cf 91       	pop	r28
    fe7c:	1f 91       	pop	r17
    fe7e:	0f 91       	pop	r16
    fe80:	ff 90       	pop	r15
    fe82:	ef 90       	pop	r14
    fe84:	df 90       	pop	r13
    fe86:	cf 90       	pop	r12
    fe88:	bf 90       	pop	r11
    fe8a:	af 90       	pop	r10
    fe8c:	9f 90       	pop	r9
    fe8e:	8f 90       	pop	r8
    fe90:	6f 90       	pop	r6
    fe92:	5f 90       	pop	r5
    fe94:	4f 90       	pop	r4
    fe96:	08 95       	ret

0000fe98 <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    fe98:	cf 93       	push	r28
    fe9a:	df 93       	push	r29
    fe9c:	00 d0       	rcall	.+0      	; 0xfe9e <testpage+0x6>
    fe9e:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    fea0:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    fea4:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    fea8:	82 17       	cp	r24, r18
    feaa:	93 07       	cpc	r25, r19
    feac:	3c f1       	brlt	.+78     	; 0xfefc <testpage+0x64>
    {
        printf("More..");
    feae:	8b ea       	ldi	r24, 0xAB	; 171
    feb0:	9c e0       	ldi	r25, 0x0C	; 12
    feb2:	a0 e0       	ldi	r26, 0x00	; 0
    feb4:	ed b7       	in	r30, 0x3d	; 61
    feb6:	fe b7       	in	r31, 0x3e	; 62
    feb8:	81 83       	std	Z+1, r24	; 0x01
    feba:	92 83       	std	Z+2, r25	; 0x02
    febc:	a3 83       	std	Z+3, r26	; 0x03
    febe:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    fec2:	0e 94 2d 76 	call	0xec5a	; 0xec5a <getchar>
    fec6:	ec 01       	movw	r28, r24
        printf("\r");
    fec8:	89 ea       	ldi	r24, 0xA9	; 169
    feca:	9c e0       	ldi	r25, 0x0C	; 12
    fecc:	a0 e0       	ldi	r26, 0x00	; 0
    fece:	ed b7       	in	r30, 0x3d	; 61
    fed0:	fe b7       	in	r31, 0x3e	; 62
    fed2:	81 83       	std	Z+1, r24	; 0x01
    fed4:	92 83       	std	Z+2, r25	; 0x02
    fed6:	a3 83       	std	Z+3, r26	; 0x03
    fed8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        if(c == 'q')
    fedc:	c1 37       	cpi	r28, 0x71	; 113
    fede:	d1 05       	cpc	r29, r1
    fee0:	41 f0       	breq	.+16     	; 0xfef2 <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    fee2:	2a 97       	sbiw	r28, 0x0a	; 10
    fee4:	49 f4       	brne	.+18     	; 0xfef8 <testpage+0x60>
            return(_pagesize-1);                  // single line
    fee6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    feea:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    feee:	01 97       	sbiw	r24, 0x01	; 1
    fef0:	05 c0       	rjmp	.+10     	; 0xfefc <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    fef2:	8f ef       	ldi	r24, 0xFF	; 255
    fef4:	9f ef       	ldi	r25, 0xFF	; 255
    fef6:	02 c0       	rjmp	.+4      	; 0xfefc <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    fef8:	80 e0       	ldi	r24, 0x00	; 0
    fefa:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    fefc:	cd b7       	in	r28, 0x3d	; 61
    fefe:	de b7       	in	r29, 0x3e	; 62
    ff00:	23 96       	adiw	r28, 0x03	; 3
    ff02:	e2 e0       	ldi	r30, 0x02	; 2
    ff04:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

0000ff08 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  number of characters in file or -1 on error
MEMSPACE
long cat(char *name, int dopage)
{
    ff08:	a7 e0       	ldi	r26, 0x07	; 7
    ff0a:	b1 e0       	ldi	r27, 0x01	; 1
    ff0c:	ea e8       	ldi	r30, 0x8A	; 138
    ff0e:	ff e7       	ldi	r31, 0x7F	; 127
    ff10:	0c 94 b9 e6 	jmp	0x1cd72	; 0x1cd72 <__prologue_saves__+0xc>
    ff14:	8c 01       	movw	r16, r24
    ff16:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    ff18:	6e ef       	ldi	r22, 0xFE	; 254
    ff1a:	78 e0       	ldi	r23, 0x08	; 8
    ff1c:	92 de       	rcall	.-732    	; 0xfc42 <fopen>
    ff1e:	7c 01       	movw	r14, r24
    if (!fp)
    ff20:	89 2b       	or	r24, r25
    ff22:	41 f0       	breq	.+16     	; 0xff34 <cat+0x2c>
    ff24:	c1 2c       	mov	r12, r1
    ff26:	d1 2c       	mov	r13, r1
    ff28:	a1 2c       	mov	r10, r1
    ff2a:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    ff2c:	8e 01       	movw	r16, r28
    ff2e:	08 5f       	subi	r16, 0xF8	; 248
    ff30:	1f 4f       	sbci	r17, 0xFF	; 255
    ff32:	23 c0       	rjmp	.+70     	; 0xff7a <cat+0x72>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    ff34:	ed b7       	in	r30, 0x3d	; 61
    ff36:	fe b7       	in	r31, 0x3e	; 62
    ff38:	15 83       	std	Z+5, r17	; 0x05
    ff3a:	04 83       	std	Z+4, r16	; 0x04
    ff3c:	84 e3       	ldi	r24, 0x34	; 52
    ff3e:	9d e0       	ldi	r25, 0x0D	; 13
    ff40:	a0 e0       	ldi	r26, 0x00	; 0
    ff42:	81 83       	std	Z+1, r24	; 0x01
    ff44:	92 83       	std	Z+2, r25	; 0x02
    ff46:	a3 83       	std	Z+3, r26	; 0x03
    ff48:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        return(-1);
    ff4c:	cc 24       	eor	r12, r12
    ff4e:	ca 94       	dec	r12
    ff50:	dc 2c       	mov	r13, r12
    ff52:	76 01       	movw	r14, r12
    ff54:	3f c0       	rjmp	.+126    	; 0xffd4 <cat+0xcc>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    ff56:	c8 01       	movw	r24, r16
    ff58:	0e 94 ff 31 	call	0x63fe	; 0x63fe <trim_tail>
        size += strlen(line);
    ff5c:	f8 01       	movw	r30, r16
    ff5e:	01 90       	ld	r0, Z+
    ff60:	00 20       	and	r0, r0
    ff62:	e9 f7       	brne	.-6      	; 0xff5e <cat+0x56>
    ff64:	31 97       	sbiw	r30, 0x01	; 1
    ff66:	e0 1b       	sub	r30, r16
    ff68:	f1 0b       	sbc	r31, r17
    ff6a:	ce 0e       	add	r12, r30
    ff6c:	df 1e       	adc	r13, r31
        puts(line);
    ff6e:	c8 01       	movw	r24, r16
    ff70:	0e 94 85 76 	call	0xed0a	; 0xed0a <puts>
        if(dopage)
    ff74:	81 14       	cp	r8, r1
    ff76:	91 04       	cpc	r9, r1
    ff78:	49 f4       	brne	.+18     	; 0xff8c <cat+0x84>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    ff7a:	a7 01       	movw	r20, r14
    ff7c:	6e ef       	ldi	r22, 0xFE	; 254
    ff7e:	70 e0       	ldi	r23, 0x00	; 0
    ff80:	c8 01       	movw	r24, r16
    ff82:	0e 94 39 76 	call	0xec72	; 0xec72 <fgets>
    ff86:	89 2b       	or	r24, r25
    ff88:	31 f7       	brne	.-52     	; 0xff56 <cat+0x4e>
    ff8a:	06 c0       	rjmp	.+12     	; 0xff98 <cat+0x90>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    ff8c:	c5 01       	movw	r24, r10
    ff8e:	01 96       	adiw	r24, 0x01	; 1
    ff90:	83 df       	rcall	.-250    	; 0xfe98 <testpage>
    ff92:	5c 01       	movw	r10, r24
            if(count < 0)
    ff94:	97 ff       	sbrs	r25, 7
    ff96:	f1 cf       	rjmp	.-30     	; 0xff7a <cat+0x72>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    ff98:	82 e3       	ldi	r24, 0x32	; 50
    ff9a:	9d e0       	ldi	r25, 0x0D	; 13
    ff9c:	a0 e0       	ldi	r26, 0x00	; 0
    ff9e:	ed b7       	in	r30, 0x3d	; 61
    ffa0:	fe b7       	in	r31, 0x3e	; 62
    ffa2:	81 83       	std	Z+1, r24	; 0x01
    ffa4:	92 83       	std	Z+2, r25	; 0x02
    ffa6:	a3 83       	std	Z+3, r26	; 0x03
    ffa8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    fclose(fp);
    ffac:	c7 01       	movw	r24, r14
    ffae:	f3 dc       	rcall	.-1562   	; 0xf996 <fclose>
    printf("%ld bytes\n", (long)size);
    ffb0:	0d 2c       	mov	r0, r13
    ffb2:	00 0c       	add	r0, r0
    ffb4:	ee 08       	sbc	r14, r14
    ffb6:	ff 08       	sbc	r15, r15
    ffb8:	ed b7       	in	r30, 0x3d	; 61
    ffba:	fe b7       	in	r31, 0x3e	; 62
    ffbc:	c4 82       	std	Z+4, r12	; 0x04
    ffbe:	d5 82       	std	Z+5, r13	; 0x05
    ffc0:	e6 82       	std	Z+6, r14	; 0x06
    ffc2:	f7 82       	std	Z+7, r15	; 0x07
    ffc4:	87 e2       	ldi	r24, 0x27	; 39
    ffc6:	9d e0       	ldi	r25, 0x0D	; 13
    ffc8:	a0 e0       	ldi	r26, 0x00	; 0
    ffca:	81 83       	std	Z+1, r24	; 0x01
    ffcc:	92 83       	std	Z+2, r25	; 0x02
    ffce:	a3 83       	std	Z+3, r26	; 0x03
    ffd0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    return(size);
}
    ffd4:	c7 01       	movw	r24, r14
    ffd6:	b6 01       	movw	r22, r12
    ffd8:	c9 5f       	subi	r28, 0xF9	; 249
    ffda:	de 4f       	sbci	r29, 0xFE	; 254
    ffdc:	ec e0       	ldi	r30, 0x0C	; 12
    ffde:	0c 94 d5 e6 	jmp	0x1cdaa	; 0x1cdaa <__epilogue_restores__+0xc>

0000ffe2 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    ffe2:	4f 92       	push	r4
    ffe4:	5f 92       	push	r5
    ffe6:	6f 92       	push	r6
    ffe8:	7f 92       	push	r7
    ffea:	af 92       	push	r10
    ffec:	bf 92       	push	r11
    ffee:	cf 92       	push	r12
    fff0:	df 92       	push	r13
    fff2:	ef 92       	push	r14
    fff4:	ff 92       	push	r15
    fff6:	0f 93       	push	r16
    fff8:	1f 93       	push	r17
    fffa:	cf 93       	push	r28
    fffc:	df 93       	push	r29
    fffe:	cd b7       	in	r28, 0x3d	; 61
   10000:	de b7       	in	r29, 0x3e	; 62
   10002:	c9 54       	subi	r28, 0x49	; 73
   10004:	d1 09       	sbc	r29, r1
   10006:	0f b6       	in	r0, 0x3f	; 63
   10008:	f8 94       	cli
   1000a:	de bf       	out	0x3e, r29	; 62
   1000c:	0f be       	out	0x3f, r0	; 63
   1000e:	cd bf       	out	0x3d, r28	; 61
   10010:	8c 01       	movw	r16, r24
   10012:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
   10014:	be 01       	movw	r22, r28
   10016:	62 5f       	subi	r22, 0xF2	; 242
   10018:	7f 4f       	sbci	r23, 0xFF	; 255
   1001a:	18 d9       	rcall	.-3536   	; 0xf24c <stat>
   1001c:	01 96       	adiw	r24, 0x01	; 1
   1001e:	79 f4       	brne	.+30     	; 0x1003e <__EEPROM_REGION_LENGTH__+0x3e>
    {
        printf("can not stat: %s\n", name);
   10020:	ed b7       	in	r30, 0x3d	; 61
   10022:	fe b7       	in	r31, 0x3e	; 62
   10024:	15 83       	std	Z+5, r17	; 0x05
   10026:	04 83       	std	Z+4, r16	; 0x04
   10028:	87 e9       	ldi	r24, 0x97	; 151
   1002a:	9c e0       	ldi	r25, 0x0C	; 12
   1002c:	a0 e0       	ldi	r26, 0x00	; 0
   1002e:	81 83       	std	Z+1, r24	; 0x01
   10030:	92 83       	std	Z+2, r25	; 0x02
   10032:	a3 83       	std	Z+3, r26	; 0x03
   10034:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        return(0);
   10038:	80 e0       	ldi	r24, 0x00	; 0
   1003a:	90 e0       	ldi	r25, 0x00	; 0
   1003c:	77 c0       	rjmp	.+238    	; 0x1012c <__EEPROM_REGION_LENGTH__+0x12c>
    }

    if(!verbose)
   1003e:	ef 28       	or	r14, r15
   10040:	81 f4       	brne	.+32     	; 0x10062 <__EEPROM_REGION_LENGTH__+0x62>
    {
        printf("%s\n",basename(name));
   10042:	c8 01       	movw	r24, r16
   10044:	0e 94 f2 76 	call	0xede4	; 0xede4 <basename>
   10048:	ed b7       	in	r30, 0x3d	; 61
   1004a:	fe b7       	in	r31, 0x3e	; 62
   1004c:	95 83       	std	Z+5, r25	; 0x05
   1004e:	84 83       	std	Z+4, r24	; 0x04
   10050:	83 e9       	ldi	r24, 0x93	; 147
   10052:	9c e0       	ldi	r25, 0x0C	; 12
   10054:	a0 e0       	ldi	r26, 0x00	; 0
   10056:	81 83       	std	Z+1, r24	; 0x01
   10058:	92 83       	std	Z+2, r25	; 0x02
   1005a:	a3 83       	std	Z+3, r26	; 0x03
   1005c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   10060:	63 c0       	rjmp	.+198    	; 0x10128 <__EEPROM_REGION_LENGTH__+0x128>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   10062:	4e 88       	ldd	r4, Y+22	; 0x16
   10064:	5f 88       	ldd	r5, Y+23	; 0x17
   10066:	68 8c       	ldd	r6, Y+24	; 0x18
   10068:	79 8c       	ldd	r7, Y+25	; 0x19
   1006a:	d3 01       	movw	r26, r6
   1006c:	c2 01       	movw	r24, r4
   1006e:	88 27       	eor	r24, r24
   10070:	90 7f       	andi	r25, 0xF0	; 240
   10072:	aa 27       	eor	r26, r26
   10074:	bb 27       	eor	r27, r27
   10076:	81 15       	cp	r24, r1
   10078:	90 44       	sbci	r25, 0x40	; 64
   1007a:	a1 05       	cpc	r26, r1
   1007c:	b1 05       	cpc	r27, r1
   1007e:	11 f4       	brne	.+4      	; 0x10084 <__EEPROM_REGION_LENGTH__+0x84>
        *p++ = 'd';
   10080:	84 e6       	ldi	r24, 0x64	; 100
   10082:	01 c0       	rjmp	.+2      	; 0x10086 <__EEPROM_REGION_LENGTH__+0x86>
    else
        *p++ = '-';
   10084:	8d e2       	ldi	r24, 0x2D	; 45
   10086:	8e af       	std	Y+62, r24	; 0x3e
   10088:	fe 01       	movw	r30, r28
   1008a:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   1008c:	e1 2c       	mov	r14, r1
   1008e:	ff 24       	eor	r15, r15
   10090:	f3 94       	inc	r15
   10092:	20 e0       	ldi	r18, 0x00	; 0
   10094:	30 e0       	ldi	r19, 0x00	; 0
   10096:	be 2e       	mov	r11, r30
   10098:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   1009a:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   1009c:	53 e0       	ldi	r21, 0x03	; 3
   1009e:	c5 2e       	mov	r12, r21
   100a0:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
   100a2:	c7 01       	movw	r24, r14
   100a4:	a0 e0       	ldi	r26, 0x00	; 0
   100a6:	b0 e0       	ldi	r27, 0x00	; 0
   100a8:	84 21       	and	r24, r4
   100aa:	95 21       	and	r25, r5
   100ac:	a6 21       	and	r26, r6
   100ae:	b7 21       	and	r27, r7
   100b0:	89 2b       	or	r24, r25
   100b2:	8a 2b       	or	r24, r26
   100b4:	8b 2b       	or	r24, r27
   100b6:	51 f0       	breq	.+20     	; 0x100cc <__EEPROM_REGION_LENGTH__+0xcc>
            *p++ = cm[ i % 3];
   100b8:	c9 01       	movw	r24, r18
   100ba:	b6 01       	movw	r22, r12
   100bc:	0e 94 33 e6 	call	0x1cc66	; 0x1cc66 <__divmodhi4>
   100c0:	dc 01       	movw	r26, r24
   100c2:	a6 54       	subi	r26, 0x46	; 70
   100c4:	b4 4f       	sbci	r27, 0xF4	; 244
   100c6:	8c 91       	ld	r24, X
   100c8:	81 83       	std	Z+1, r24	; 0x01
   100ca:	01 c0       	rjmp	.+2      	; 0x100ce <__EEPROM_REGION_LENGTH__+0xce>
        else
            *p++ = '-';
   100cc:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   100ce:	f6 94       	lsr	r15
   100d0:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   100d2:	2f 5f       	subi	r18, 0xFF	; 255
   100d4:	3f 4f       	sbci	r19, 0xFF	; 255
   100d6:	31 96       	adiw	r30, 0x01	; 1
   100d8:	29 30       	cpi	r18, 0x09	; 9
   100da:	31 05       	cpc	r19, r1
   100dc:	11 f7       	brne	.-60     	; 0x100a2 <__EEPROM_REGION_LENGTH__+0xa2>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   100de:	29 96       	adiw	r28, 0x09	; 9
   100e0:	1f ae       	std	Y+63, r1	; 0x3f
   100e2:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
   100e4:	4e a0       	ldd	r4, Y+38	; 0x26
   100e6:	5f a0       	ldd	r5, Y+39	; 0x27
   100e8:	68 a4       	ldd	r6, Y+40	; 0x28
   100ea:	79 a4       	ldd	r7, Y+41	; 0x29
   100ec:	6e a9       	ldd	r22, Y+54	; 0x36
   100ee:	7f a9       	ldd	r23, Y+55	; 0x37
   100f0:	88 ad       	ldd	r24, Y+56	; 0x38
   100f2:	99 ad       	ldd	r25, Y+57	; 0x39
   100f4:	0e 94 cd 76 	call	0xed9a	; 0xed9a <mctime>
   100f8:	7c 01       	movw	r14, r24
   100fa:	c8 01       	movw	r24, r16
   100fc:	0e 94 f2 76 	call	0xede4	; 0xede4 <basename>
   10100:	ed b7       	in	r30, 0x3d	; 61
   10102:	fe b7       	in	r31, 0x3e	; 62
   10104:	95 87       	std	Z+13, r25	; 0x0d
   10106:	84 87       	std	Z+12, r24	; 0x0c
   10108:	f3 86       	std	Z+11, r15	; 0x0b
   1010a:	e2 86       	std	Z+10, r14	; 0x0a
   1010c:	46 82       	std	Z+6, r4	; 0x06
   1010e:	57 82       	std	Z+7, r5	; 0x07
   10110:	60 86       	std	Z+8, r6	; 0x08
   10112:	71 86       	std	Z+9, r7	; 0x09
   10114:	b4 82       	std	Z+4, r11	; 0x04
   10116:	a5 82       	std	Z+5, r10	; 0x05
   10118:	89 e7       	ldi	r24, 0x79	; 121
   1011a:	9c e0       	ldi	r25, 0x0C	; 12
   1011c:	a0 e0       	ldi	r26, 0x00	; 0
   1011e:	81 83       	std	Z+1, r24	; 0x01
   10120:	92 83       	std	Z+2, r25	; 0x02
   10122:	a3 83       	std	Z+3, r26	; 0x03
   10124:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   10128:	81 e0       	ldi	r24, 0x01	; 1
   1012a:	90 e0       	ldi	r25, 0x00	; 0
}
   1012c:	c7 5b       	subi	r28, 0xB7	; 183
   1012e:	df 4f       	sbci	r29, 0xFF	; 255
   10130:	0f b6       	in	r0, 0x3f	; 63
   10132:	f8 94       	cli
   10134:	de bf       	out	0x3e, r29	; 62
   10136:	0f be       	out	0x3f, r0	; 63
   10138:	cd bf       	out	0x3d, r28	; 61
   1013a:	df 91       	pop	r29
   1013c:	cf 91       	pop	r28
   1013e:	1f 91       	pop	r17
   10140:	0f 91       	pop	r16
   10142:	ff 90       	pop	r15
   10144:	ef 90       	pop	r14
   10146:	df 90       	pop	r13
   10148:	cf 90       	pop	r12
   1014a:	bf 90       	pop	r11
   1014c:	af 90       	pop	r10
   1014e:	7f 90       	pop	r7
   10150:	6f 90       	pop	r6
   10152:	5f 90       	pop	r5
   10154:	4f 90       	pop	r4
   10156:	08 95       	ret

00010158 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files or -1 on error
MEMSPACE
int ls(char *name, int verbose)
{
   10158:	2f 92       	push	r2
   1015a:	3f 92       	push	r3
   1015c:	4f 92       	push	r4
   1015e:	5f 92       	push	r5
   10160:	6f 92       	push	r6
   10162:	8f 92       	push	r8
   10164:	9f 92       	push	r9
   10166:	af 92       	push	r10
   10168:	bf 92       	push	r11
   1016a:	cf 92       	push	r12
   1016c:	df 92       	push	r13
   1016e:	ef 92       	push	r14
   10170:	ff 92       	push	r15
   10172:	0f 93       	push	r16
   10174:	1f 93       	push	r17
   10176:	cf 93       	push	r28
   10178:	df 93       	push	r29
   1017a:	cd b7       	in	r28, 0x3d	; 61
   1017c:	de b7       	in	r29, 0x3e	; 62
   1017e:	c8 53       	subi	r28, 0x38	; 56
   10180:	d1 40       	sbci	r29, 0x01	; 1
   10182:	0f b6       	in	r0, 0x3f	; 63
   10184:	f8 94       	cli
   10186:	de bf       	out	0x3e, r29	; 62
   10188:	0f be       	out	0x3f, r0	; 63
   1018a:	cd bf       	out	0x3d, r28	; 61
   1018c:	7c 01       	movw	r14, r24
   1018e:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   10190:	1e 82       	std	Y+6, r1	; 0x06
   10192:	8e 01       	movw	r16, r28
   10194:	0a 5f       	subi	r16, 0xFA	; 250
   10196:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   10198:	00 97       	sbiw	r24, 0x00	; 0
   1019a:	51 f4       	brne	.+20     	; 0x101b0 <ls+0x58>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   1019c:	6f ef       	ldi	r22, 0xFF	; 255
   1019e:	70 e0       	ldi	r23, 0x00	; 0
   101a0:	c8 01       	movw	r24, r16
   101a2:	0e 94 48 77 	call	0xee90	; 0xee90 <getcwd>
   101a6:	89 2b       	or	r24, r25
   101a8:	91 f4       	brne	.+36     	; 0x101ce <ls+0x76>
        {
            printf("ls: Can't get current directory\n");
   101aa:	88 e5       	ldi	r24, 0x58	; 88
   101ac:	9c e0       	ldi	r25, 0x0C	; 12
   101ae:	6a c0       	rjmp	.+212    	; 0x10284 <ls+0x12c>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   101b0:	fc 01       	movw	r30, r24
   101b2:	80 81       	ld	r24, Z
   101b4:	88 23       	and	r24, r24
   101b6:	91 f3       	breq	.-28     	; 0x1019c <ls+0x44>
   101b8:	68 ef       	ldi	r22, 0xF8	; 248
   101ba:	72 e1       	ldi	r23, 0x12	; 18
   101bc:	c7 01       	movw	r24, r14
   101be:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
   101c2:	89 2b       	or	r24, r25
   101c4:	59 f7       	brne	.-42     	; 0x1019c <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   101c6:	b7 01       	movw	r22, r14
   101c8:	c8 01       	movw	r24, r16
   101ca:	0e 94 21 31 	call	0x6242	; 0x6242 <strcpy>
    }
    len = strlen(fullpath);
   101ce:	f8 01       	movw	r30, r16
   101d0:	01 90       	ld	r0, Z+
   101d2:	00 20       	and	r0, r0
   101d4:	e9 f7       	brne	.-6      	; 0x101d0 <ls+0x78>
   101d6:	31 97       	sbiw	r30, 0x01	; 1
   101d8:	1f 01       	movw	r2, r30
   101da:	20 1a       	sub	r2, r16
   101dc:	31 0a       	sbc	r3, r17


    if (stat(fullpath, &st))
   101de:	be 01       	movw	r22, r28
   101e0:	69 5f       	subi	r22, 0xF9	; 249
   101e2:	7e 4f       	sbci	r23, 0xFE	; 254
   101e4:	c8 01       	movw	r24, r16
   101e6:	32 d8       	rcall	.-3996   	; 0xf24c <stat>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   101e8:	ed b7       	in	r30, 0x3d	; 61
   101ea:	fe b7       	in	r31, 0x3e	; 62
   101ec:	15 83       	std	Z+5, r17	; 0x05
   101ee:	04 83       	std	Z+4, r16	; 0x04
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);


    if (stat(fullpath, &st))
   101f0:	89 2b       	or	r24, r25
   101f2:	59 f0       	breq	.+22     	; 0x1020a <ls+0xb2>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   101f4:	82 e4       	ldi	r24, 0x42	; 66
   101f6:	9c e0       	ldi	r25, 0x0C	; 12
   101f8:	a0 e0       	ldi	r26, 0x00	; 0
   101fa:	81 83       	std	Z+1, r24	; 0x01
   101fc:	92 83       	std	Z+2, r25	; 0x02
   101fe:	a3 83       	std	Z+3, r26	; 0x03
   10200:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        return(-1);
   10204:	8f ef       	ldi	r24, 0xFF	; 255
   10206:	9f ef       	ldi	r25, 0xFF	; 255
   10208:	96 c0       	rjmp	.+300    	; 0x10336 <ls+0x1de>
    }
    printf("Listing:[%s]\n",fullpath);
   1020a:	84 e3       	ldi	r24, 0x34	; 52
   1020c:	9c e0       	ldi	r25, 0x0C	; 12
   1020e:	a0 e0       	ldi	r26, 0x00	; 0
   10210:	81 83       	std	Z+1, r24	; 0x01
   10212:	92 83       	std	Z+2, r25	; 0x02
   10214:	a3 83       	std	Z+3, r26	; 0x03
   10216:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    switch (st.st_mode & S_IFMT)
   1021a:	c1 5f       	subi	r28, 0xF1	; 241
   1021c:	de 4f       	sbci	r29, 0xFE	; 254
   1021e:	88 81       	ld	r24, Y
   10220:	99 81       	ldd	r25, Y+1	; 0x01
   10222:	aa 81       	ldd	r26, Y+2	; 0x02
   10224:	bb 81       	ldd	r27, Y+3	; 0x03
   10226:	cf 50       	subi	r28, 0x0F	; 15
   10228:	d1 40       	sbci	r29, 0x01	; 1
   1022a:	88 27       	eor	r24, r24
   1022c:	90 7f       	andi	r25, 0xF0	; 240
   1022e:	aa 27       	eor	r26, r26
   10230:	bb 27       	eor	r27, r27
   10232:	81 15       	cp	r24, r1
   10234:	f0 e4       	ldi	r31, 0x40	; 64
   10236:	9f 07       	cpc	r25, r31
   10238:	a1 05       	cpc	r26, r1
   1023a:	b1 05       	cpc	r27, r1
   1023c:	59 f0       	breq	.+22     	; 0x10254 <ls+0xfc>
   1023e:	81 15       	cp	r24, r1
   10240:	90 48       	sbci	r25, 0x80	; 128
   10242:	a1 05       	cpc	r26, r1
   10244:	b1 05       	cpc	r27, r1
   10246:	09 f0       	breq	.+2      	; 0x1024a <ls+0xf2>
   10248:	67 c0       	rjmp	.+206    	; 0x10318 <ls+0x1c0>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   1024a:	b4 01       	movw	r22, r8
   1024c:	c8 01       	movw	r24, r16
   1024e:	c9 de       	rcall	.-622    	; 0xffe2 <ls_info>
   10250:	7c 01       	movw	r14, r24
            break;
   10252:	64 c0       	rjmp	.+200    	; 0x1031c <ls+0x1c4>
        case S_IFDIR:
            dirp = opendir(fullpath);
   10254:	c8 01       	movw	r24, r16
   10256:	0e 94 f6 77 	call	0xefec	; 0xefec <opendir>
   1025a:	5c 01       	movw	r10, r24
            if(!dirp)
   1025c:	89 2b       	or	r24, r25
   1025e:	81 f0       	breq	.+32     	; 0x10280 <ls+0x128>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   10260:	e1 2c       	mov	r14, r1
   10262:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   10264:	c8 01       	movw	r24, r16
   10266:	82 0d       	add	r24, r2
   10268:	93 1d       	adc	r25, r3
   1026a:	c9 5c       	subi	r28, 0xC9	; 201
   1026c:	de 4f       	sbci	r29, 0xFE	; 254
   1026e:	99 83       	std	Y+1, r25	; 0x01
   10270:	88 83       	st	Y, r24
   10272:	c7 53       	subi	r28, 0x37	; 55
   10274:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   10276:	81 e0       	ldi	r24, 0x01	; 1
   10278:	9c e0       	ldi	r25, 0x0C	; 12
   1027a:	2c 01       	movw	r4, r24
   1027c:	61 2c       	mov	r6, r1
   1027e:	25 c0       	rjmp	.+74     	; 0x102ca <ls+0x172>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   10280:	84 e2       	ldi	r24, 0x24	; 36
   10282:	9c e0       	ldi	r25, 0x0C	; 12
   10284:	a0 e0       	ldi	r26, 0x00	; 0
   10286:	ed b7       	in	r30, 0x3d	; 61
   10288:	fe b7       	in	r31, 0x3e	; 62
   1028a:	81 83       	std	Z+1, r24	; 0x01
   1028c:	92 83       	std	Z+2, r25	; 0x02
   1028e:	a3 83       	std	Z+3, r26	; 0x03
   10290:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   10294:	b7 cf       	rjmp	.-146    	; 0x10204 <ls+0xac>
                return(-1);
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   10296:	f6 01       	movw	r30, r12
   10298:	80 81       	ld	r24, Z
   1029a:	88 23       	and	r24, r24
   1029c:	e1 f0       	breq	.+56     	; 0x102d6 <ls+0x17e>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   1029e:	f6 01       	movw	r30, r12
   102a0:	01 90       	ld	r0, Z+
   102a2:	00 20       	and	r0, r0
   102a4:	e9 f7       	brne	.-6      	; 0x102a0 <ls+0x148>
   102a6:	31 97       	sbiw	r30, 0x01	; 1
   102a8:	ec 19       	sub	r30, r12
   102aa:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   102ac:	e2 0d       	add	r30, r2
   102ae:	f3 1d       	adc	r31, r3
   102b0:	ef 3f       	cpi	r30, 0xFF	; 255
   102b2:	f1 05       	cpc	r31, r1
   102b4:	a1 f0       	breq	.+40     	; 0x102de <ls+0x186>
   102b6:	9c f0       	brlt	.+38     	; 0x102de <ls+0x186>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   102b8:	ed b7       	in	r30, 0x3d	; 61
   102ba:	fe b7       	in	r31, 0x3e	; 62
   102bc:	d5 82       	std	Z+5, r13	; 0x05
   102be:	c4 82       	std	Z+4, r12	; 0x04
   102c0:	41 82       	std	Z+1, r4	; 0x01
   102c2:	52 82       	std	Z+2, r5	; 0x02
   102c4:	63 82       	std	Z+3, r6	; 0x03
   102c6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(-1);
            }
            while ( (de = readdir(dirp)) )
   102ca:	c5 01       	movw	r24, r10
   102cc:	0e 94 14 78 	call	0xf028	; 0xf028 <readdir>
   102d0:	6c 01       	movw	r12, r24
   102d2:	89 2b       	or	r24, r25
   102d4:	01 f7       	brne	.-64     	; 0x10296 <ls+0x13e>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   102d6:	c5 01       	movw	r24, r10
   102d8:	0e 94 db 77 	call	0xefb6	; 0xefb6 <closedir>
            break;
   102dc:	1f c0       	rjmp	.+62     	; 0x1031c <ls+0x1c4>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   102de:	66 ea       	ldi	r22, 0xA6	; 166
   102e0:	78 e0       	ldi	r23, 0x08	; 8
   102e2:	c8 01       	movw	r24, r16
   102e4:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
   102e8:	89 2b       	or	r24, r25
   102ea:	29 f4       	brne	.+10     	; 0x102f6 <ls+0x19e>
                {
                    strcat(fullpath,"/");
   102ec:	66 ea       	ldi	r22, 0xA6	; 166
   102ee:	78 e0       	ldi	r23, 0x08	; 8
   102f0:	c8 01       	movw	r24, r16
   102f2:	0e 94 42 31 	call	0x6284	; 0x6284 <strcat>
                }
                strcat(fullpath,de->d_name);
   102f6:	b6 01       	movw	r22, r12
   102f8:	c8 01       	movw	r24, r16
   102fa:	0e 94 42 31 	call	0x6284	; 0x6284 <strcat>
                files +=ls_info(fullpath,verbose);
   102fe:	b4 01       	movw	r22, r8
   10300:	c8 01       	movw	r24, r16
   10302:	6f de       	rcall	.-802    	; 0xffe2 <ls_info>
   10304:	e8 0e       	add	r14, r24
   10306:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   10308:	c9 5c       	subi	r28, 0xC9	; 201
   1030a:	de 4f       	sbci	r29, 0xFE	; 254
   1030c:	e8 81       	ld	r30, Y
   1030e:	f9 81       	ldd	r31, Y+1	; 0x01
   10310:	c7 53       	subi	r28, 0x37	; 55
   10312:	d1 40       	sbci	r29, 0x01	; 1
   10314:	10 82       	st	Z, r1
   10316:	d9 cf       	rjmp	.-78     	; 0x102ca <ls+0x172>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   10318:	e1 2c       	mov	r14, r1
   1031a:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   1031c:	ed b7       	in	r30, 0x3d	; 61
   1031e:	fe b7       	in	r31, 0x3e	; 62
   10320:	f5 82       	std	Z+5, r15	; 0x05
   10322:	e4 82       	std	Z+4, r14	; 0x04
   10324:	86 ef       	ldi	r24, 0xF6	; 246
   10326:	9b e0       	ldi	r25, 0x0B	; 11
   10328:	a0 e0       	ldi	r26, 0x00	; 0
   1032a:	81 83       	std	Z+1, r24	; 0x01
   1032c:	92 83       	std	Z+2, r25	; 0x02
   1032e:	a3 83       	std	Z+3, r26	; 0x03
   10330:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    return(files);
   10334:	c7 01       	movw	r24, r14
}
   10336:	c8 5c       	subi	r28, 0xC8	; 200
   10338:	de 4f       	sbci	r29, 0xFE	; 254
   1033a:	0f b6       	in	r0, 0x3f	; 63
   1033c:	f8 94       	cli
   1033e:	de bf       	out	0x3e, r29	; 62
   10340:	0f be       	out	0x3f, r0	; 63
   10342:	cd bf       	out	0x3d, r28	; 61
   10344:	df 91       	pop	r29
   10346:	cf 91       	pop	r28
   10348:	1f 91       	pop	r17
   1034a:	0f 91       	pop	r16
   1034c:	ff 90       	pop	r15
   1034e:	ef 90       	pop	r14
   10350:	df 90       	pop	r13
   10352:	cf 90       	pop	r12
   10354:	bf 90       	pop	r11
   10356:	af 90       	pop	r10
   10358:	9f 90       	pop	r9
   1035a:	8f 90       	pop	r8
   1035c:	6f 90       	pop	r6
   1035e:	5f 90       	pop	r5
   10360:	4f 90       	pop	r4
   10362:	3f 90       	pop	r3
   10364:	2f 90       	pop	r2
   10366:	08 95       	ret

00010368 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   10368:	a7 e0       	ldi	r26, 0x07	; 7
   1036a:	b1 e0       	ldi	r27, 0x01	; 1
   1036c:	ea eb       	ldi	r30, 0xBA	; 186
   1036e:	f1 e8       	ldi	r31, 0x81	; 129
   10370:	0c 94 b5 e6 	jmp	0x1cd6a	; 0x1cd6a <__prologue_saves__+0x4>
    char *ptr;
    int ind = 0;

	if(argc < 1)
   10374:	18 16       	cp	r1, r24
   10376:	19 06       	cpc	r1, r25
   10378:	1c f0       	brlt	.+6      	; 0x10380 <posix_tests+0x18>
		return(0);
   1037a:	80 e0       	ldi	r24, 0x00	; 0
   1037c:	90 e0       	ldi	r25, 0x00	; 0
   1037e:	dd c1       	rjmp	.+954    	; 0x1073a <posix_tests+0x3d2>

    ptr = argv[ind++];
   10380:	fb 01       	movw	r30, r22
   10382:	c0 80       	ld	r12, Z
   10384:	d1 80       	ldd	r13, Z+1	; 0x01
	printf("argv[%d]=%s\n",(int)i, argv[i]);
}
#endif


    if(!ptr)
   10386:	c1 14       	cp	r12, r1
   10388:	d1 04       	cpc	r13, r1
   1038a:	b9 f3       	breq	.-18     	; 0x1037a <posix_tests+0x12>
   1038c:	4b 01       	movw	r8, r22
   1038e:	3c 01       	movw	r6, r24
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
   10390:	6e eb       	ldi	r22, 0xBE	; 190
   10392:	7b e0       	ldi	r23, 0x0B	; 11
   10394:	c6 01       	movw	r24, r12
   10396:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
   1039a:	89 2b       	or	r24, r25
   1039c:	a1 f0       	breq	.+40     	; 0x103c6 <posix_tests+0x5e>
    {
        ptr = argv[ind++];
   1039e:	f4 01       	movw	r30, r8
   103a0:	c2 80       	ldd	r12, Z+2	; 0x02
   103a2:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   103a4:	c1 14       	cp	r12, r1
   103a6:	d1 04       	cpc	r13, r1
   103a8:	21 f4       	brne	.+8      	; 0x103b2 <posix_tests+0x4a>
        {
            posix_help(1);
   103aa:	81 e0       	ldi	r24, 0x01	; 1
   103ac:	90 e0       	ldi	r25, 0x00	; 0
   103ae:	75 dc       	rcall	.-1814   	; 0xfc9a <posix_help>
   103b0:	45 c1       	rjmp	.+650    	; 0x1063c <posix_tests+0x2d4>
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   103b2:	64 e7       	ldi	r22, 0x74	; 116
   103b4:	76 e1       	ldi	r23, 0x16	; 22
   103b6:	c6 01       	movw	r24, r12
   103b8:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
   103bc:	89 2b       	or	r24, r25
   103be:	a9 f7       	brne	.-22     	; 0x103aa <posix_tests+0x42>
    if(!ptr)
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   103c0:	02 e0       	ldi	r16, 0x02	; 2
   103c2:	10 e0       	ldi	r17, 0x00	; 0
   103c4:	02 c0       	rjmp	.+4      	; 0x103ca <posix_tests+0x62>
    int ind = 0;

	if(argc < 1)
		return(0);

    ptr = argv[ind++];
   103c6:	01 e0       	ldi	r16, 0x01	; 1
   103c8:	10 e0       	ldi	r17, 0x00	; 0
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   103ca:	78 01       	movw	r14, r16
   103cc:	ff ef       	ldi	r31, 0xFF	; 255
   103ce:	ef 1a       	sub	r14, r31
   103d0:	ff 0a       	sbc	r15, r31
   103d2:	93 01       	movw	r18, r6
   103d4:	a7 01       	movw	r20, r14
   103d6:	64 ec       	ldi	r22, 0xC4	; 196
   103d8:	7b e0       	ldi	r23, 0x0B	; 11
   103da:	c6 01       	movw	r24, r12
   103dc:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   103e0:	89 2b       	or	r24, r25
   103e2:	99 f1       	breq	.+102    	; 0x1044a <posix_tests+0xe2>
   103e4:	78 01       	movw	r14, r16
   103e6:	ee 0c       	add	r14, r14
   103e8:	ff 1c       	adc	r15, r15
   103ea:	e8 0c       	add	r14, r8
   103ec:	f9 1c       	adc	r15, r9
   103ee:	57 01       	movw	r10, r14
   103f0:	47 01       	movw	r8, r14
   103f2:	68 01       	movw	r12, r16
   103f4:	41 2c       	mov	r4, r1
   103f6:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   103f8:	c6 14       	cp	r12, r6
   103fa:	d7 04       	cpc	r13, r7
   103fc:	14 f5       	brge	.+68     	; 0x10442 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   103fe:	68 ec       	ldi	r22, 0xC8	; 200
   10400:	7b e0       	ldi	r23, 0x0B	; 11
   10402:	f4 01       	movw	r30, r8
   10404:	81 91       	ld	r24, Z+
   10406:	91 91       	ld	r25, Z+
   10408:	4f 01       	movw	r8, r30
   1040a:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
   1040e:	89 2b       	or	r24, r25
   10410:	19 f0       	breq	.+6      	; 0x10418 <posix_tests+0xb0>
                page = 1;
   10412:	44 24       	eor	r4, r4
   10414:	43 94       	inc	r4
   10416:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10418:	ff ef       	ldi	r31, 0xFF	; 255
   1041a:	cf 1a       	sub	r12, r31
   1041c:	df 0a       	sbc	r13, r31
   1041e:	ec cf       	rjmp	.-40     	; 0x103f8 <posix_tests+0x90>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10420:	68 ec       	ldi	r22, 0xC8	; 200
   10422:	7b e0       	ldi	r23, 0x0B	; 11
   10424:	f5 01       	movw	r30, r10
   10426:	81 91       	ld	r24, Z+
   10428:	91 91       	ld	r25, Z+
   1042a:	5f 01       	movw	r10, r30
   1042c:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
   10430:	89 2b       	or	r24, r25
   10432:	29 f4       	brne	.+10     	; 0x1043e <posix_tests+0xd6>
			{
				// displays its own errors
                cat(argv[ind], page);
   10434:	b2 01       	movw	r22, r4
   10436:	f7 01       	movw	r30, r14
   10438:	80 81       	ld	r24, Z
   1043a:	91 81       	ldd	r25, Z+1	; 0x01
   1043c:	65 dd       	rcall	.-1334   	; 0xff08 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   1043e:	0f 5f       	subi	r16, 0xFF	; 255
   10440:	1f 4f       	sbci	r17, 0xFF	; 255
   10442:	06 15       	cp	r16, r6
   10444:	17 05       	cpc	r17, r7
   10446:	64 f3       	brlt	.-40     	; 0x10420 <posix_tests+0xb8>
   10448:	f9 c0       	rjmp	.+498    	; 0x1063c <posix_tests+0x2d4>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   1044a:	58 01       	movw	r10, r16
   1044c:	f2 e0       	ldi	r31, 0x02	; 2
   1044e:	af 0e       	add	r10, r31
   10450:	b1 1c       	adc	r11, r1
   10452:	93 01       	movw	r18, r6
   10454:	a5 01       	movw	r20, r10
   10456:	6b ec       	ldi	r22, 0xCB	; 203
   10458:	7b e0       	ldi	r23, 0x0B	; 11
   1045a:	c6 01       	movw	r24, r12
   1045c:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   10460:	89 2b       	or	r24, r25
   10462:	69 f0       	breq	.+26     	; 0x1047e <posix_tests+0x116>
    {
		if( copy(argv[ind],argv[ind+1]) < 0)
   10464:	f8 01       	movw	r30, r16
   10466:	ee 0f       	add	r30, r30
   10468:	ff 1f       	adc	r31, r31
   1046a:	e8 0d       	add	r30, r8
   1046c:	f9 1d       	adc	r31, r9
   1046e:	62 81       	ldd	r22, Z+2	; 0x02
   10470:	73 81       	ldd	r23, Z+3	; 0x03
   10472:	80 81       	ld	r24, Z
   10474:	91 81       	ldd	r25, Z+1	; 0x01
   10476:	32 dc       	rcall	.-1948   	; 0xfcdc <copy>
   10478:	97 ff       	sbrs	r25, 7
   1047a:	e0 c0       	rjmp	.+448    	; 0x1063c <posix_tests+0x2d4>
   1047c:	5c c1       	rjmp	.+696    	; 0x10736 <posix_tests+0x3ce>
			return(-1);
        return(1);
    }

    else if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   1047e:	93 01       	movw	r18, r6
   10480:	a7 01       	movw	r20, r14
   10482:	60 ed       	ldi	r22, 0xD0	; 208
   10484:	7b e0       	ldi	r23, 0x0B	; 11
   10486:	c6 01       	movw	r24, r12
   10488:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   1048c:	89 2b       	or	r24, r25
   1048e:	b9 f0       	breq	.+46     	; 0x104be <posix_tests+0x156>
    {
        if ( chdir(argv[ind]) != 0)
   10490:	78 01       	movw	r14, r16
   10492:	ee 0c       	add	r14, r14
   10494:	ff 1c       	adc	r15, r15
   10496:	e8 0c       	add	r14, r8
   10498:	f9 1c       	adc	r15, r9
   1049a:	f7 01       	movw	r30, r14
   1049c:	80 81       	ld	r24, Z
   1049e:	91 81       	ldd	r25, Z+1	; 0x01
   104a0:	0e 94 00 77 	call	0xee00	; 0xee00 <chdir>
   104a4:	89 2b       	or	r24, r25
   104a6:	09 f4       	brne	.+2      	; 0x104aa <posix_tests+0x142>
   104a8:	c9 c0       	rjmp	.+402    	; 0x1063c <posix_tests+0x2d4>
		{
            printf("chdir %s failed\n", argv[ind]);
   104aa:	f7 01       	movw	r30, r14
   104ac:	80 81       	ld	r24, Z
   104ae:	91 81       	ldd	r25, Z+1	; 0x01
   104b0:	ed b7       	in	r30, 0x3d	; 61
   104b2:	fe b7       	in	r31, 0x3e	; 62
   104b4:	95 83       	std	Z+5, r25	; 0x05
   104b6:	84 83       	std	Z+4, r24	; 0x04
   104b8:	8d ea       	ldi	r24, 0xAD	; 173
   104ba:	9d e0       	ldi	r25, 0x0D	; 13
   104bc:	36 c1       	rjmp	.+620    	; 0x1072a <posix_tests+0x3c2>
			return(-1);
        return(1);
    }
#endif

    else if (MATCHI(ptr,"ls") )
   104be:	68 ed       	ldi	r22, 0xD8	; 216
   104c0:	78 e0       	ldi	r23, 0x08	; 8
   104c2:	c6 01       	movw	r24, r12
   104c4:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   104c8:	89 2b       	or	r24, r25
   104ca:	09 f4       	brne	.+2      	; 0x104ce <posix_tests+0x166>
   104cc:	40 c0       	rjmp	.+128    	; 0x1054e <posix_tests+0x1e6>
   104ce:	78 01       	movw	r14, r16
   104d0:	ee 0c       	add	r14, r14
   104d2:	ff 1c       	adc	r15, r15
   104d4:	e8 0c       	add	r14, r8
   104d6:	f9 1c       	adc	r15, r9
   104d8:	c1 2c       	mov	r12, r1
   104da:	d1 2c       	mov	r13, r1
        int args = 0;
        for(i=ind;i<argc;++i)
        {
			if(!argv[i])
			{
				printf("ls: null argument # %d\n", i);
   104dc:	85 e9       	ldi	r24, 0x95	; 149
   104de:	9d e0       	ldi	r25, 0x0D	; 13
   104e0:	4c 01       	movw	r8, r24
   104e2:	a1 2c       	mov	r10, r1

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   104e4:	06 15       	cp	r16, r6
   104e6:	17 05       	cpc	r17, r7
   104e8:	34 f5       	brge	.+76     	; 0x10536 <posix_tests+0x1ce>
        {
			if(!argv[i])
   104ea:	f7 01       	movw	r30, r14
   104ec:	80 81       	ld	r24, Z
   104ee:	91 81       	ldd	r25, Z+1	; 0x01
   104f0:	00 97       	sbiw	r24, 0x00	; 0
   104f2:	51 f4       	brne	.+20     	; 0x10508 <posix_tests+0x1a0>
			{
				printf("ls: null argument # %d\n", i);
   104f4:	ed b7       	in	r30, 0x3d	; 61
   104f6:	fe b7       	in	r31, 0x3e	; 62
   104f8:	15 83       	std	Z+5, r17	; 0x05
   104fa:	04 83       	std	Z+4, r16	; 0x04
   104fc:	81 82       	std	Z+1, r8	; 0x01
   104fe:	92 82       	std	Z+2, r9	; 0x02
   10500:	a3 82       	std	Z+3, r10	; 0x03
   10502:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
				continue;
   10506:	11 c0       	rjmp	.+34     	; 0x1052a <posix_tests+0x1c2>
			}
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
   10508:	63 ed       	ldi	r22, 0xD3	; 211
   1050a:	7b e0       	ldi	r23, 0x0B	; 11
   1050c:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
   10510:	89 2b       	or	r24, r25
   10512:	59 f4       	brne	.+22     	; 0x1052a <posix_tests+0x1c2>
				continue;
			if( ls(argv[i],1) < 0)
   10514:	61 e0       	ldi	r22, 0x01	; 1
   10516:	70 e0       	ldi	r23, 0x00	; 0
   10518:	f7 01       	movw	r30, r14
   1051a:	80 81       	ld	r24, Z
   1051c:	91 81       	ldd	r25, Z+1	; 0x01
   1051e:	1c de       	rcall	.-968    	; 0x10158 <ls>
   10520:	97 fd       	sbrc	r25, 7
   10522:	09 c1       	rjmp	.+530    	; 0x10736 <posix_tests+0x3ce>
			{
				return(-1);
			};
            ++args;
   10524:	ff ef       	ldi	r31, 0xFF	; 255
   10526:	cf 1a       	sub	r12, r31
   10528:	df 0a       	sbc	r13, r31

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   1052a:	0f 5f       	subi	r16, 0xFF	; 255
   1052c:	1f 4f       	sbci	r17, 0xFF	; 255
   1052e:	82 e0       	ldi	r24, 0x02	; 2
   10530:	e8 0e       	add	r14, r24
   10532:	f1 1c       	adc	r15, r1
   10534:	d7 cf       	rjmp	.-82     	; 0x104e4 <posix_tests+0x17c>
			{
				return(-1);
			};
            ++args;
        }
        if(!args)
   10536:	c1 14       	cp	r12, r1
   10538:	d1 04       	cpc	r13, r1
   1053a:	09 f0       	breq	.+2      	; 0x1053e <posix_tests+0x1d6>
   1053c:	7f c0       	rjmp	.+254    	; 0x1063c <posix_tests+0x2d4>
        {
            if( ls("",1) < 0)
   1053e:	61 e0       	ldi	r22, 0x01	; 1
   10540:	70 e0       	ldi	r23, 0x00	; 0
   10542:	80 e2       	ldi	r24, 0x20	; 32
   10544:	9c e0       	ldi	r25, 0x0C	; 12
   10546:	08 de       	rcall	.-1008   	; 0x10158 <ls>
   10548:	97 ff       	sbrs	r25, 7
   1054a:	78 c0       	rjmp	.+240    	; 0x1063c <posix_tests+0x2d4>
   1054c:	f4 c0       	rjmp	.+488    	; 0x10736 <posix_tests+0x3ce>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   1054e:	93 01       	movw	r18, r6
   10550:	a7 01       	movw	r20, r14
   10552:	66 ed       	ldi	r22, 0xD6	; 214
   10554:	7b e0       	ldi	r23, 0x0B	; 11
   10556:	c6 01       	movw	r24, r12
   10558:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   1055c:	89 2b       	or	r24, r25
   1055e:	79 f1       	breq	.+94     	; 0x105be <posix_tests+0x256>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10560:	e6 14       	cp	r14, r6
   10562:	f7 04       	cpc	r15, r7
   10564:	7c f4       	brge	.+30     	; 0x10584 <posix_tests+0x21c>
        {
            mode = strtol(argv[ind+1],NULL,8);
   10566:	ee 0c       	add	r14, r14
   10568:	ff 1c       	adc	r15, r15
   1056a:	f4 01       	movw	r30, r8
   1056c:	ee 0d       	add	r30, r14
   1056e:	ff 1d       	adc	r31, r15
   10570:	48 e0       	ldi	r20, 0x08	; 8
   10572:	50 e0       	ldi	r21, 0x00	; 0
   10574:	60 e0       	ldi	r22, 0x00	; 0
   10576:	70 e0       	ldi	r23, 0x00	; 0
   10578:	80 81       	ld	r24, Z
   1057a:	91 81       	ldd	r25, Z+1	; 0x01
   1057c:	0e 94 1b 47 	call	0x8e36	; 0x8e36 <strtol>
   10580:	ab 01       	movw	r20, r22
   10582:	02 c0       	rjmp	.+4      	; 0x10588 <posix_tests+0x220>
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10584:	4f ef       	ldi	r20, 0xFF	; 255
   10586:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   10588:	78 01       	movw	r14, r16
   1058a:	ee 0c       	add	r14, r14
   1058c:	ff 1c       	adc	r15, r15
   1058e:	e8 0c       	add	r14, r8
   10590:	f9 1c       	adc	r15, r9
   10592:	05 2e       	mov	r0, r21
   10594:	00 0c       	add	r0, r0
   10596:	66 0b       	sbc	r22, r22
   10598:	77 0b       	sbc	r23, r23
   1059a:	f7 01       	movw	r30, r14
   1059c:	80 81       	ld	r24, Z
   1059e:	91 81       	ldd	r25, Z+1	; 0x01
   105a0:	0e 94 6d 77 	call	0xeeda	; 0xeeda <mkdir>
   105a4:	89 2b       	or	r24, r25
   105a6:	09 f4       	brne	.+2      	; 0x105aa <posix_tests+0x242>
   105a8:	49 c0       	rjmp	.+146    	; 0x1063c <posix_tests+0x2d4>
        {
            printf("mkdir %s failed\n", argv[ind]);
   105aa:	f7 01       	movw	r30, r14
   105ac:	80 81       	ld	r24, Z
   105ae:	91 81       	ldd	r25, Z+1	; 0x01
   105b0:	ed b7       	in	r30, 0x3d	; 61
   105b2:	fe b7       	in	r31, 0x3e	; 62
   105b4:	95 83       	std	Z+5, r25	; 0x05
   105b6:	84 83       	std	Z+4, r24	; 0x04
   105b8:	84 e8       	ldi	r24, 0x84	; 132
   105ba:	9d e0       	ldi	r25, 0x0D	; 13
   105bc:	b6 c0       	rjmp	.+364    	; 0x1072a <posix_tests+0x3c2>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"page", (ind + 1), argc))
   105be:	93 01       	movw	r18, r6
   105c0:	a7 01       	movw	r20, r14
   105c2:	6c ed       	ldi	r22, 0xDC	; 220
   105c4:	7b e0       	ldi	r23, 0x0B	; 11
   105c6:	c6 01       	movw	r24, r12
   105c8:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   105cc:	89 2b       	or	r24, r25
   105ce:	71 f0       	breq	.+28     	; 0x105ec <posix_tests+0x284>
    {
        setpage(atoi(argv[ind]));
   105d0:	00 0f       	add	r16, r16
   105d2:	11 1f       	adc	r17, r17
   105d4:	f4 01       	movw	r30, r8
   105d6:	e0 0f       	add	r30, r16
   105d8:	f1 1f       	adc	r31, r17
   105da:	80 81       	ld	r24, Z
   105dc:	91 81       	ldd	r25, Z+1	; 0x01
   105de:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   105e2:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   105e6:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   105ea:	28 c0       	rjmp	.+80     	; 0x1063c <posix_tests+0x2d4>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    else if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   105ec:	93 01       	movw	r18, r6
   105ee:	a8 01       	movw	r20, r16
   105f0:	61 ee       	ldi	r22, 0xE1	; 225
   105f2:	7b e0       	ldi	r23, 0x0B	; 11
   105f4:	c6 01       	movw	r24, r12
   105f6:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   105fa:	89 2b       	or	r24, r25
   105fc:	11 f1       	breq	.+68     	; 0x10642 <posix_tests+0x2da>
    {
        char path[256];
		char *ptr = getcwd(path, sizeof(path)-2);
   105fe:	6e ef       	ldi	r22, 0xFE	; 254
   10600:	70 e0       	ldi	r23, 0x00	; 0
   10602:	ce 01       	movw	r24, r28
   10604:	08 96       	adiw	r24, 0x08	; 8
   10606:	0e 94 48 77 	call	0xee90	; 0xee90 <getcwd>
		if(ptr == NULL)
   1060a:	00 97       	sbiw	r24, 0x00	; 0
   1060c:	59 f4       	brne	.+22     	; 0x10624 <posix_tests+0x2bc>
		{
			printf("pwd FAILED\n");
   1060e:	88 e7       	ldi	r24, 0x78	; 120
   10610:	9d e0       	ldi	r25, 0x0D	; 13
   10612:	a0 e0       	ldi	r26, 0x00	; 0
   10614:	ed b7       	in	r30, 0x3d	; 61
   10616:	fe b7       	in	r31, 0x3e	; 62
   10618:	81 83       	std	Z+1, r24	; 0x01
   1061a:	92 83       	std	Z+2, r25	; 0x02
   1061c:	a3 83       	std	Z+3, r26	; 0x03
   1061e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   10622:	89 c0       	rjmp	.+274    	; 0x10736 <posix_tests+0x3ce>
			return(-1);
		}
        printf("%s\n", ptr);
   10624:	ed b7       	in	r30, 0x3d	; 61
   10626:	fe b7       	in	r31, 0x3e	; 62
   10628:	95 83       	std	Z+5, r25	; 0x05
   1062a:	84 83       	std	Z+4, r24	; 0x04
   1062c:	84 e7       	ldi	r24, 0x74	; 116
   1062e:	9d e0       	ldi	r25, 0x0D	; 13
   10630:	a0 e0       	ldi	r26, 0x00	; 0
   10632:	81 83       	std	Z+1, r24	; 0x01
   10634:	92 83       	std	Z+2, r25	; 0x02
   10636:	a3 83       	std	Z+3, r26	; 0x03
   10638:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        return(1);
   1063c:	81 e0       	ldi	r24, 0x01	; 1
   1063e:	90 e0       	ldi	r25, 0x00	; 0
   10640:	7c c0       	rjmp	.+248    	; 0x1073a <posix_tests+0x3d2>
    }

    else if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   10642:	93 01       	movw	r18, r6
   10644:	a5 01       	movw	r20, r10
   10646:	65 ee       	ldi	r22, 0xE5	; 229
   10648:	7b e0       	ldi	r23, 0x0B	; 11
   1064a:	c6 01       	movw	r24, r12
   1064c:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   10650:	89 2b       	or	r24, r25
   10652:	59 f1       	breq	.+86     	; 0x106aa <posix_tests+0x342>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   10654:	00 0f       	add	r16, r16
   10656:	11 1f       	adc	r17, r17
   10658:	64 01       	movw	r12, r8
   1065a:	c0 0e       	add	r12, r16
   1065c:	d1 1e       	adc	r13, r17
   1065e:	0e 5f       	subi	r16, 0xFE	; 254
   10660:	1f 4f       	sbci	r17, 0xFF	; 255
   10662:	74 01       	movw	r14, r8
   10664:	e0 0e       	add	r14, r16
   10666:	f1 1e       	adc	r15, r17
   10668:	f7 01       	movw	r30, r14
   1066a:	60 81       	ld	r22, Z
   1066c:	71 81       	ldd	r23, Z+1	; 0x01
   1066e:	f6 01       	movw	r30, r12
   10670:	80 81       	ld	r24, Z
   10672:	91 81       	ldd	r25, Z+1	; 0x01
   10674:	0e 94 9b 77 	call	0xef36	; 0xef36 <rename>
   10678:	89 2b       	or	r24, r25
   1067a:	01 f3       	breq	.-64     	; 0x1063c <posix_tests+0x2d4>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   1067c:	f7 01       	movw	r30, r14
   1067e:	80 81       	ld	r24, Z
   10680:	91 81       	ldd	r25, Z+1	; 0x01
   10682:	ed b7       	in	r30, 0x3d	; 61
   10684:	fe b7       	in	r31, 0x3e	; 62
   10686:	97 83       	std	Z+7, r25	; 0x07
   10688:	86 83       	std	Z+6, r24	; 0x06
   1068a:	f6 01       	movw	r30, r12
   1068c:	80 81       	ld	r24, Z
   1068e:	91 81       	ldd	r25, Z+1	; 0x01
   10690:	ed b7       	in	r30, 0x3d	; 61
   10692:	fe b7       	in	r31, 0x3e	; 62
   10694:	95 83       	std	Z+5, r25	; 0x05
   10696:	84 83       	std	Z+4, r24	; 0x04
   10698:	83 e6       	ldi	r24, 0x63	; 99
   1069a:	9d e0       	ldi	r25, 0x0D	; 13
   1069c:	a0 e0       	ldi	r26, 0x00	; 0
   1069e:	81 83       	std	Z+1, r24	; 0x01
   106a0:	92 83       	std	Z+2, r25	; 0x02
   106a2:	a3 83       	std	Z+3, r26	; 0x03
   106a4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   106a8:	46 c0       	rjmp	.+140    	; 0x10736 <posix_tests+0x3ce>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   106aa:	93 01       	movw	r18, r6
   106ac:	a7 01       	movw	r20, r14
   106ae:	6c ee       	ldi	r22, 0xEC	; 236
   106b0:	7b e0       	ldi	r23, 0x0B	; 11
   106b2:	c6 01       	movw	r24, r12
   106b4:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   106b8:	89 2b       	or	r24, r25
   106ba:	b9 f0       	breq	.+46     	; 0x106ea <posix_tests+0x382>
    {
        if ( unlink(argv[ind]) != 0)
   106bc:	78 01       	movw	r14, r16
   106be:	ee 0c       	add	r14, r14
   106c0:	ff 1c       	adc	r15, r15
   106c2:	e8 0c       	add	r14, r8
   106c4:	f9 1c       	adc	r15, r9
   106c6:	f7 01       	movw	r30, r14
   106c8:	80 81       	ld	r24, Z
   106ca:	91 81       	ldd	r25, Z+1	; 0x01
   106cc:	0e 94 ba 77 	call	0xef74	; 0xef74 <unlink>
   106d0:	89 2b       	or	r24, r25
   106d2:	09 f4       	brne	.+2      	; 0x106d6 <posix_tests+0x36e>
   106d4:	b3 cf       	rjmp	.-154    	; 0x1063c <posix_tests+0x2d4>
        {
            printf("rm %s failed\n", argv[ind]);
   106d6:	f7 01       	movw	r30, r14
   106d8:	80 81       	ld	r24, Z
   106da:	91 81       	ldd	r25, Z+1	; 0x01
   106dc:	ed b7       	in	r30, 0x3d	; 61
   106de:	fe b7       	in	r31, 0x3e	; 62
   106e0:	95 83       	std	Z+5, r25	; 0x05
   106e2:	84 83       	std	Z+4, r24	; 0x04
   106e4:	85 e5       	ldi	r24, 0x55	; 85
   106e6:	9d e0       	ldi	r25, 0x0D	; 13
   106e8:	20 c0       	rjmp	.+64     	; 0x1072a <posix_tests+0x3c2>
        dump_stat(&p);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   106ea:	93 01       	movw	r18, r6
   106ec:	a7 01       	movw	r20, r14
   106ee:	6f ee       	ldi	r22, 0xEF	; 239
   106f0:	7b e0       	ldi	r23, 0x0B	; 11
   106f2:	c6 01       	movw	r24, r12
   106f4:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   106f8:	89 2b       	or	r24, r25
   106fa:	09 f4       	brne	.+2      	; 0x106fe <posix_tests+0x396>
   106fc:	3e ce       	rjmp	.-900    	; 0x1037a <posix_tests+0x12>
    {
        if ( rmdir(argv[ind]) != 0)
   106fe:	78 01       	movw	r14, r16
   10700:	ee 0c       	add	r14, r14
   10702:	ff 1c       	adc	r15, r15
   10704:	e8 0c       	add	r14, r8
   10706:	f9 1c       	adc	r15, r9
   10708:	f7 01       	movw	r30, r14
   1070a:	80 81       	ld	r24, Z
   1070c:	91 81       	ldd	r25, Z+1	; 0x01
   1070e:	0e 94 d9 77 	call	0xefb2	; 0xefb2 <rmdir>
   10712:	89 2b       	or	r24, r25
   10714:	09 f4       	brne	.+2      	; 0x10718 <posix_tests+0x3b0>
   10716:	92 cf       	rjmp	.-220    	; 0x1063c <posix_tests+0x2d4>
        {
            printf("rmdir %s failed\n", argv[ind]);
   10718:	f7 01       	movw	r30, r14
   1071a:	80 81       	ld	r24, Z
   1071c:	91 81       	ldd	r25, Z+1	; 0x01
   1071e:	ed b7       	in	r30, 0x3d	; 61
   10720:	fe b7       	in	r31, 0x3e	; 62
   10722:	95 83       	std	Z+5, r25	; 0x05
   10724:	84 83       	std	Z+4, r24	; 0x04
   10726:	84 e4       	ldi	r24, 0x44	; 68
   10728:	9d e0       	ldi	r25, 0x0D	; 13
   1072a:	a0 e0       	ldi	r26, 0x00	; 0
   1072c:	81 83       	std	Z+1, r24	; 0x01
   1072e:	92 83       	std	Z+2, r25	; 0x02
   10730:	a3 83       	std	Z+3, r26	; 0x03
   10732:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            return(-1);
   10736:	8f ef       	ldi	r24, 0xFF	; 255
   10738:	9f ef       	ldi	r25, 0xFF	; 255
        return(1);
    }
#endif

    return(0);
}
   1073a:	c9 5f       	subi	r28, 0xF9	; 249
   1073c:	de 4f       	sbci	r29, 0xFE	; 254
   1073e:	e0 e1       	ldi	r30, 0x10	; 16
   10740:	0c 94 d1 e6 	jmp	0x1cda2	; 0x1cda2 <__epilogue_restores__+0x4>

00010744 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   10744:	00 d0       	rcall	.+0      	; 0x10746 <gpib_timer_init+0x2>
   10746:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   10748:	61 e0       	ldi	r22, 0x01	; 1
   1074a:	70 e0       	ldi	r23, 0x00	; 0
   1074c:	8e e5       	ldi	r24, 0x5E	; 94
   1074e:	95 e8       	ldi	r25, 0x85	; 133
   10750:	0e 94 8e 34 	call	0x691c	; 0x691c <set_timers>
   10754:	01 96       	adiw	r24, 0x01	; 1
   10756:	51 f4       	brne	.+20     	; 0x1076c <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   10758:	8e ee       	ldi	r24, 0xEE	; 238
   1075a:	9e e0       	ldi	r25, 0x0E	; 14
   1075c:	a0 e0       	ldi	r26, 0x00	; 0
   1075e:	ed b7       	in	r30, 0x3d	; 61
   10760:	fe b7       	in	r31, 0x3e	; 62
   10762:	81 83       	std	Z+1, r24	; 0x01
   10764:	92 83       	std	Z+2, r25	; 0x02
   10766:	a3 83       	std	Z+3, r26	; 0x03
   10768:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    gpib_timer_reset();
   1076c:	95 d1       	rcall	.+810    	; 0x10a98 <gpib_timer_reset>
}
   1076e:	0f 90       	pop	r0
   10770:	0f 90       	pop	r0
   10772:	0f 90       	pop	r0
   10774:	08 95       	ret

00010776 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10776:	28 2f       	mov	r18, r24
   10778:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   1077a:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   1077c:	88 0f       	add	r24, r24
        if(mask & 1)
   1077e:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10780:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10782:	26 95       	lsr	r18
   10784:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10786:	d1 f7       	brne	.-12     	; 0x1077c <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   10788:	08 95       	ret

0001078a <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   1078a:	f5 df       	rcall	.-22     	; 0x10776 <reverse_8bits>
   1078c:	80 93 66 19 	sts	0x1966, r24	; 0x801966 <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   10790:	0e 94 e8 2a 	call	0x55d0	; 0x55d0 <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   10794:	2a 9a       	sbi	0x05, 2	; 5
   10796:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   10798:	2a 98       	cbi	0x05, 2	; 5
   1079a:	22 9a       	sbi	0x04, 2	; 4
   1079c:	08 95       	ret

0001079e <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   1079e:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <_ppr_reg>
   107a2:	e9 cf       	rjmp	.-46     	; 0x10776 <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   107a4:	08 95       	ret

000107a6 <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   107a6:	00 d0       	rcall	.+0      	; 0x107a8 <ppr_init+0x2>
   107a8:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   107aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   107ae:	81 ff       	sbrs	r24, 1
   107b0:	0a c0       	rjmp	.+20     	; 0x107c6 <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   107b2:	8b ed       	ldi	r24, 0xDB	; 219
   107b4:	9e e0       	ldi	r25, 0x0E	; 14
   107b6:	a0 e0       	ldi	r26, 0x00	; 0
   107b8:	ed b7       	in	r30, 0x3d	; 61
   107ba:	fe b7       	in	r31, 0x3e	; 62
   107bc:	81 83       	std	Z+1, r24	; 0x01
   107be:	92 83       	std	Z+2, r25	; 0x02
   107c0:	a3 83       	std	Z+3, r26	; 0x03
   107c2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
    ppr_set(0);
   107c6:	80 e0       	ldi	r24, 0x00	; 0
   107c8:	e0 df       	rcall	.-64     	; 0x1078a <ppr_set>
}
   107ca:	0f 90       	pop	r0
   107cc:	0f 90       	pop	r0
   107ce:	0f 90       	pop	r0
   107d0:	08 95       	ret

000107d2 <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   107d2:	21 e0       	ldi	r18, 0x01	; 1
   107d4:	30 e0       	ldi	r19, 0x00	; 0
   107d6:	01 c0       	rjmp	.+2      	; 0x107da <ppr_bit_set+0x8>
   107d8:	22 0f       	add	r18, r18
   107da:	8a 95       	dec	r24
   107dc:	ea f7       	brpl	.-6      	; 0x107d8 <ppr_bit_set+0x6>
   107de:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <_ppr_reg>
   107e2:	82 2b       	or	r24, r18
   107e4:	80 93 66 19 	sts	0x1966, r24	; 0x801966 <_ppr_reg>
    ppr_set(_ppr_reg);
   107e8:	d0 cf       	rjmp	.-96     	; 0x1078a <ppr_set>
   107ea:	08 95       	ret

000107ec <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   107ec:	21 e0       	ldi	r18, 0x01	; 1
   107ee:	30 e0       	ldi	r19, 0x00	; 0
   107f0:	01 c0       	rjmp	.+2      	; 0x107f4 <ppr_bit_clr+0x8>
   107f2:	22 0f       	add	r18, r18
   107f4:	8a 95       	dec	r24
   107f6:	ea f7       	brpl	.-6      	; 0x107f2 <ppr_bit_clr+0x6>
   107f8:	20 95       	com	r18
   107fa:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <_ppr_reg>
   107fe:	82 23       	and	r24, r18
   10800:	80 93 66 19 	sts	0x1966, r24	; 0x801966 <_ppr_reg>
    ppr_set(_ppr_reg);
   10804:	c2 cf       	rjmp	.-124    	; 0x1078a <ppr_set>
   10806:	08 95       	ret

00010808 <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   10808:	0f 93       	push	r16
   1080a:	1f 93       	push	r17
   1080c:	cf 93       	push	r28
   1080e:	df 93       	push	r29
   10810:	00 d0       	rcall	.+0      	; 0x10812 <dbf_open+0xa>
   10812:	00 d0       	rcall	.+0      	; 0x10814 <dbf_open+0xc>
   10814:	1f 92       	push	r1
   10816:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   10818:	0e 94 88 59 	call	0xb310	; 0xb310 <f_open>
   1081c:	ec 01       	movw	r28, r24
    if(rc)
   1081e:	89 2b       	or	r24, r25
   10820:	79 f0       	breq	.+30     	; 0x10840 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   10822:	ed b7       	in	r30, 0x3d	; 61
   10824:	fe b7       	in	r31, 0x3e	; 62
   10826:	15 83       	std	Z+5, r17	; 0x05
   10828:	04 83       	std	Z+4, r16	; 0x04
   1082a:	8a ec       	ldi	r24, 0xCA	; 202
   1082c:	9e e0       	ldi	r25, 0x0E	; 14
   1082e:	a0 e0       	ldi	r26, 0x00	; 0
   10830:	81 83       	std	Z+1, r24	; 0x01
   10832:	92 83       	std	Z+2, r25	; 0x02
   10834:	a3 83       	std	Z+3, r26	; 0x03
   10836:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        put_rc(rc);
   1083a:	ce 01       	movw	r24, r28
   1083c:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <put_rc>
        return (rc);
    }
    return(0);
}
   10840:	ce 01       	movw	r24, r28
   10842:	cd b7       	in	r28, 0x3d	; 61
   10844:	de b7       	in	r29, 0x3e	; 62
   10846:	25 96       	adiw	r28, 0x05	; 5
   10848:	e4 e0       	ldi	r30, 0x04	; 4
   1084a:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

0001084e <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   1084e:	cf 93       	push	r28
   10850:	df 93       	push	r29
   10852:	00 d0       	rcall	.+0      	; 0x10854 <dbf_read+0x6>
   10854:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   10856:	0e 94 40 5b 	call	0xb680	; 0xb680 <f_read>
   1085a:	ec 01       	movw	r28, r24
    if(rc)
   1085c:	89 2b       	or	r24, r25
   1085e:	69 f0       	breq	.+26     	; 0x1087a <dbf_read+0x2c>
    {
        printf("Read error: ");
   10860:	8d eb       	ldi	r24, 0xBD	; 189
   10862:	9e e0       	ldi	r25, 0x0E	; 14
   10864:	a0 e0       	ldi	r26, 0x00	; 0
   10866:	ed b7       	in	r30, 0x3d	; 61
   10868:	fe b7       	in	r31, 0x3e	; 62
   1086a:	81 83       	std	Z+1, r24	; 0x01
   1086c:	92 83       	std	Z+2, r25	; 0x02
   1086e:	a3 83       	std	Z+3, r26	; 0x03
   10870:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        put_rc(rc);
   10874:	ce 01       	movw	r24, r28
   10876:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <put_rc>
        return (rc);
    }
    return(0);
}
   1087a:	ce 01       	movw	r24, r28
   1087c:	cd b7       	in	r28, 0x3d	; 61
   1087e:	de b7       	in	r29, 0x3e	; 62
   10880:	23 96       	adiw	r28, 0x03	; 3
   10882:	e2 e0       	ldi	r30, 0x02	; 2
   10884:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00010888 <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   10888:	cf 93       	push	r28
   1088a:	df 93       	push	r29
   1088c:	00 d0       	rcall	.+0      	; 0x1088e <dbf_write+0x6>
   1088e:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   10890:	0e 94 8b 5c 	call	0xb916	; 0xb916 <f_write>
   10894:	ec 01       	movw	r28, r24
    if(rc)
   10896:	89 2b       	or	r24, r25
   10898:	69 f0       	breq	.+26     	; 0x108b4 <dbf_write+0x2c>
    {
        printf("Write error: ");
   1089a:	8f ea       	ldi	r24, 0xAF	; 175
   1089c:	9e e0       	ldi	r25, 0x0E	; 14
   1089e:	a0 e0       	ldi	r26, 0x00	; 0
   108a0:	ed b7       	in	r30, 0x3d	; 61
   108a2:	fe b7       	in	r31, 0x3e	; 62
   108a4:	81 83       	std	Z+1, r24	; 0x01
   108a6:	92 83       	std	Z+2, r25	; 0x02
   108a8:	a3 83       	std	Z+3, r26	; 0x03
   108aa:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        put_rc(rc);
   108ae:	ce 01       	movw	r24, r28
   108b0:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <put_rc>
        return (rc);
    }
    return(0);
}
   108b4:	ce 01       	movw	r24, r28
   108b6:	cd b7       	in	r28, 0x3d	; 61
   108b8:	de b7       	in	r29, 0x3e	; 62
   108ba:	23 96       	adiw	r28, 0x03	; 3
   108bc:	e2 e0       	ldi	r30, 0x02	; 2
   108be:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

000108c2 <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   108c2:	cf 93       	push	r28
   108c4:	df 93       	push	r29
   108c6:	00 d0       	rcall	.+0      	; 0x108c8 <dbf_lseek+0x6>
   108c8:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   108ca:	0e 94 4c 60 	call	0xc098	; 0xc098 <f_lseek>
   108ce:	ec 01       	movw	r28, r24
    if(rc)
   108d0:	89 2b       	or	r24, r25
   108d2:	69 f0       	breq	.+26     	; 0x108ee <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   108d4:	82 ea       	ldi	r24, 0xA2	; 162
   108d6:	9e e0       	ldi	r25, 0x0E	; 14
   108d8:	a0 e0       	ldi	r26, 0x00	; 0
   108da:	ed b7       	in	r30, 0x3d	; 61
   108dc:	fe b7       	in	r31, 0x3e	; 62
   108de:	81 83       	std	Z+1, r24	; 0x01
   108e0:	92 83       	std	Z+2, r25	; 0x02
   108e2:	a3 83       	std	Z+3, r26	; 0x03
   108e4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        put_rc(rc);
   108e8:	ce 01       	movw	r24, r28
   108ea:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <put_rc>
        return (rc);
    }
    return(0);
}
   108ee:	ce 01       	movw	r24, r28
   108f0:	cd b7       	in	r28, 0x3d	; 61
   108f2:	de b7       	in	r29, 0x3e	; 62
   108f4:	23 96       	adiw	r28, 0x03	; 3
   108f6:	e2 e0       	ldi	r30, 0x02	; 2
   108f8:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

000108fc <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   108fc:	cf 93       	push	r28
   108fe:	df 93       	push	r29
   10900:	00 d0       	rcall	.+0      	; 0x10902 <dbf_close+0x6>
   10902:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   10904:	0e 94 a2 5e 	call	0xbd44	; 0xbd44 <f_close>
   10908:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   1090a:	89 2b       	or	r24, r25
   1090c:	69 f0       	breq	.+26     	; 0x10928 <dbf_close+0x2c>
    {
        printf("Close error: ");
   1090e:	84 e9       	ldi	r24, 0x94	; 148
   10910:	9e e0       	ldi	r25, 0x0E	; 14
   10912:	a0 e0       	ldi	r26, 0x00	; 0
   10914:	ed b7       	in	r30, 0x3d	; 61
   10916:	fe b7       	in	r31, 0x3e	; 62
   10918:	81 83       	std	Z+1, r24	; 0x01
   1091a:	92 83       	std	Z+2, r25	; 0x02
   1091c:	a3 83       	std	Z+3, r26	; 0x03
   1091e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        put_rc(rc);
   10922:	ce 01       	movw	r24, r28
   10924:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <put_rc>
        return (rc);
    }
    return(0);
}
   10928:	ce 01       	movw	r24, r28
   1092a:	cd b7       	in	r28, 0x3d	; 61
   1092c:	de b7       	in	r29, 0x3e	; 62
   1092e:	23 96       	adiw	r28, 0x03	; 3
   10930:	e2 e0       	ldi	r30, 0x02	; 2
   10932:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00010936 <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10936:	a6 e2       	ldi	r26, 0x26	; 38
   10938:	b2 e0       	ldi	r27, 0x02	; 2
   1093a:	e1 ea       	ldi	r30, 0xA1	; 161
   1093c:	f4 e8       	ldi	r31, 0x84	; 132
   1093e:	0c 94 b9 e6 	jmp	0x1cd72	; 0x1cd72 <__prologue_saves__+0xc>
   10942:	4a 01       	movw	r8, r20
   10944:	5b 01       	movw	r10, r22
   10946:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10948:	cb 5d       	subi	r28, 0xDB	; 219
   1094a:	dd 4f       	sbci	r29, 0xFD	; 253
   1094c:	19 82       	std	Y+1, r1	; 0x01
   1094e:	18 82       	st	Y, r1
   10950:	c5 52       	subi	r28, 0x25	; 37
   10952:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10954:	43 e0       	ldi	r20, 0x03	; 3
   10956:	bc 01       	movw	r22, r24
   10958:	ce 01       	movw	r24, r28
   1095a:	01 96       	adiw	r24, 0x01	; 1
   1095c:	55 df       	rcall	.-342    	; 0x10808 <dbf_open>
    if( rc != FR_OK)
   1095e:	89 2b       	or	r24, r25
   10960:	19 f0       	breq	.+6      	; 0x10968 <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   10962:	81 e1       	ldi	r24, 0x11	; 17
   10964:	90 e0       	ldi	r25, 0x00	; 0
   10966:	2f c0       	rjmp	.+94     	; 0x109c6 <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10968:	b5 01       	movw	r22, r10
   1096a:	a4 01       	movw	r20, r8
   1096c:	ce 01       	movw	r24, r28
   1096e:	01 96       	adiw	r24, 0x01	; 1
   10970:	a8 df       	rcall	.-176    	; 0x108c2 <dbf_lseek>
    if( rc != FR_OK)
   10972:	89 2b       	or	r24, r25
   10974:	59 f0       	breq	.+22     	; 0x1098c <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   10976:	85 e0       	ldi	r24, 0x05	; 5
   10978:	90 e0       	ldi	r25, 0x00	; 0
   1097a:	f7 01       	movw	r30, r14
   1097c:	91 83       	std	Z+1, r25	; 0x01
   1097e:	80 83       	st	Z, r24
        dbf_close(&fp);
   10980:	ce 01       	movw	r24, r28
   10982:	01 96       	adiw	r24, 0x01	; 1
   10984:	bb df       	rcall	.-138    	; 0x108fc <dbf_close>
        return( -1 );
   10986:	8f ef       	ldi	r24, 0xFF	; 255
   10988:	9f ef       	ldi	r25, 0xFF	; 255
   1098a:	27 c0       	rjmp	.+78     	; 0x109da <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   1098c:	9e 01       	movw	r18, r28
   1098e:	2b 5d       	subi	r18, 0xDB	; 219
   10990:	3d 4f       	sbci	r19, 0xFD	; 253
   10992:	a8 01       	movw	r20, r16
   10994:	b6 01       	movw	r22, r12
   10996:	ce 01       	movw	r24, r28
   10998:	01 96       	adiw	r24, 0x01	; 1
   1099a:	59 df       	rcall	.-334    	; 0x1084e <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   1099c:	89 2b       	or	r24, r25
   1099e:	49 f4       	brne	.+18     	; 0x109b2 <dbf_open_read+0x7c>
   109a0:	cb 5d       	subi	r28, 0xDB	; 219
   109a2:	dd 4f       	sbci	r29, 0xFD	; 253
   109a4:	88 81       	ld	r24, Y
   109a6:	99 81       	ldd	r25, Y+1	; 0x01
   109a8:	c5 52       	subi	r28, 0x25	; 37
   109aa:	d2 40       	sbci	r29, 0x02	; 2
   109ac:	08 17       	cp	r16, r24
   109ae:	19 07       	cpc	r17, r25
   109b0:	19 f0       	breq	.+6      	; 0x109b8 <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   109b2:	81 e0       	ldi	r24, 0x01	; 1
   109b4:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   109b6:	e1 cf       	rjmp	.-62     	; 0x1097a <dbf_open_read+0x44>
   109b8:	ce 01       	movw	r24, r28
   109ba:	01 96       	adiw	r24, 0x01	; 1
   109bc:	9f df       	rcall	.-194    	; 0x108fc <dbf_close>
    if( rc != FR_OK)
   109be:	89 2b       	or	r24, r25
   109c0:	31 f0       	breq	.+12     	; 0x109ce <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   109c2:	80 e1       	ldi	r24, 0x10	; 16
   109c4:	90 e0       	ldi	r25, 0x00	; 0
   109c6:	f7 01       	movw	r30, r14
   109c8:	91 83       	std	Z+1, r25	; 0x01
   109ca:	80 83       	st	Z, r24
   109cc:	dc cf       	rjmp	.-72     	; 0x10986 <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   109ce:	cb 5d       	subi	r28, 0xDB	; 219
   109d0:	dd 4f       	sbci	r29, 0xFD	; 253
   109d2:	88 81       	ld	r24, Y
   109d4:	99 81       	ldd	r25, Y+1	; 0x01
   109d6:	c5 52       	subi	r28, 0x25	; 37
   109d8:	d2 40       	sbci	r29, 0x02	; 2
}
   109da:	ca 5d       	subi	r28, 0xDA	; 218
   109dc:	dd 4f       	sbci	r29, 0xFD	; 253
   109de:	ec e0       	ldi	r30, 0x0C	; 12
   109e0:	0c 94 d5 e6 	jmp	0x1cdaa	; 0x1cdaa <__epilogue_restores__+0xc>

000109e4 <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   109e4:	a6 e2       	ldi	r26, 0x26	; 38
   109e6:	b2 e0       	ldi	r27, 0x02	; 2
   109e8:	e8 ef       	ldi	r30, 0xF8	; 248
   109ea:	f4 e8       	ldi	r31, 0x84	; 132
   109ec:	0c 94 b9 e6 	jmp	0x1cd72	; 0x1cd72 <__prologue_saves__+0xc>
   109f0:	4a 01       	movw	r8, r20
   109f2:	5b 01       	movw	r10, r22
   109f4:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   109f6:	cb 5d       	subi	r28, 0xDB	; 219
   109f8:	dd 4f       	sbci	r29, 0xFD	; 253
   109fa:	19 82       	std	Y+1, r1	; 0x01
   109fc:	18 82       	st	Y, r1
   109fe:	c5 52       	subi	r28, 0x25	; 37
   10a00:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10a02:	43 e0       	ldi	r20, 0x03	; 3
   10a04:	bc 01       	movw	r22, r24
   10a06:	ce 01       	movw	r24, r28
   10a08:	01 96       	adiw	r24, 0x01	; 1
   10a0a:	fe de       	rcall	.-516    	; 0x10808 <dbf_open>
    if( rc != FR_OK)
   10a0c:	89 2b       	or	r24, r25
   10a0e:	19 f0       	breq	.+6      	; 0x10a16 <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   10a10:	82 e1       	ldi	r24, 0x12	; 18
   10a12:	90 e0       	ldi	r25, 0x00	; 0
   10a14:	2f c0       	rjmp	.+94     	; 0x10a74 <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10a16:	b5 01       	movw	r22, r10
   10a18:	a4 01       	movw	r20, r8
   10a1a:	ce 01       	movw	r24, r28
   10a1c:	01 96       	adiw	r24, 0x01	; 1
   10a1e:	51 df       	rcall	.-350    	; 0x108c2 <dbf_lseek>
    if( rc != FR_OK)
   10a20:	89 2b       	or	r24, r25
   10a22:	59 f0       	breq	.+22     	; 0x10a3a <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   10a24:	86 e0       	ldi	r24, 0x06	; 6
   10a26:	90 e0       	ldi	r25, 0x00	; 0
   10a28:	f7 01       	movw	r30, r14
   10a2a:	91 83       	std	Z+1, r25	; 0x01
   10a2c:	80 83       	st	Z, r24
        dbf_close(&fp);
   10a2e:	ce 01       	movw	r24, r28
   10a30:	01 96       	adiw	r24, 0x01	; 1
   10a32:	64 df       	rcall	.-312    	; 0x108fc <dbf_close>
        return( -1 );
   10a34:	8f ef       	ldi	r24, 0xFF	; 255
   10a36:	9f ef       	ldi	r25, 0xFF	; 255
   10a38:	27 c0       	rjmp	.+78     	; 0x10a88 <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   10a3a:	9e 01       	movw	r18, r28
   10a3c:	2b 5d       	subi	r18, 0xDB	; 219
   10a3e:	3d 4f       	sbci	r19, 0xFD	; 253
   10a40:	a8 01       	movw	r20, r16
   10a42:	b6 01       	movw	r22, r12
   10a44:	ce 01       	movw	r24, r28
   10a46:	01 96       	adiw	r24, 0x01	; 1
   10a48:	1f df       	rcall	.-450    	; 0x10888 <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   10a4a:	89 2b       	or	r24, r25
   10a4c:	49 f4       	brne	.+18     	; 0x10a60 <dbf_open_write+0x7c>
   10a4e:	cb 5d       	subi	r28, 0xDB	; 219
   10a50:	dd 4f       	sbci	r29, 0xFD	; 253
   10a52:	88 81       	ld	r24, Y
   10a54:	99 81       	ldd	r25, Y+1	; 0x01
   10a56:	c5 52       	subi	r28, 0x25	; 37
   10a58:	d2 40       	sbci	r29, 0x02	; 2
   10a5a:	08 17       	cp	r16, r24
   10a5c:	19 07       	cpc	r17, r25
   10a5e:	19 f0       	breq	.+6      	; 0x10a66 <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   10a60:	82 e0       	ldi	r24, 0x02	; 2
   10a62:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10a64:	e1 cf       	rjmp	.-62     	; 0x10a28 <dbf_open_write+0x44>
   10a66:	ce 01       	movw	r24, r28
   10a68:	01 96       	adiw	r24, 0x01	; 1
   10a6a:	48 df       	rcall	.-368    	; 0x108fc <dbf_close>
    if( rc != FR_OK)
   10a6c:	89 2b       	or	r24, r25
   10a6e:	31 f0       	breq	.+12     	; 0x10a7c <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10a70:	80 e1       	ldi	r24, 0x10	; 16
   10a72:	90 e0       	ldi	r25, 0x00	; 0
   10a74:	f7 01       	movw	r30, r14
   10a76:	91 83       	std	Z+1, r25	; 0x01
   10a78:	80 83       	st	Z, r24
   10a7a:	dc cf       	rjmp	.-72     	; 0x10a34 <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   10a7c:	cb 5d       	subi	r28, 0xDB	; 219
   10a7e:	dd 4f       	sbci	r29, 0xFD	; 253
   10a80:	88 81       	ld	r24, Y
   10a82:	99 81       	ldd	r25, Y+1	; 0x01
   10a84:	c5 52       	subi	r28, 0x25	; 37
   10a86:	d2 40       	sbci	r29, 0x02	; 2
}
   10a88:	ca 5d       	subi	r28, 0xDA	; 218
   10a8a:	dd 4f       	sbci	r29, 0xFD	; 253
   10a8c:	ec e0       	ldi	r30, 0x0C	; 12
   10a8e:	0c 94 d5 e6 	jmp	0x1cdaa	; 0x1cdaa <__epilogue_restores__+0xc>

00010a92 <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   10a92:	0c 94 4e 35 	jmp	0x6a9c	; 0x6a9c <clock_elapsed_begin>
   10a96:	08 95       	ret

00010a98 <gpib_timer_reset>:
   10a98:	f8 94       	cli
   10a9a:	e7 ee       	ldi	r30, 0xE7	; 231
   10a9c:	fc e1       	ldi	r31, 0x1C	; 28
   10a9e:	10 82       	st	Z, r1
   10aa0:	11 82       	std	Z+1, r1	; 0x01
   10aa2:	12 82       	std	Z+2, r1	; 0x02
   10aa4:	13 82       	std	Z+3, r1	; 0x03
   10aa6:	14 82       	std	Z+4, r1	; 0x04
   10aa8:	15 82       	std	Z+5, r1	; 0x05
   10aaa:	16 82       	std	Z+6, r1	; 0x06
   10aac:	17 82       	std	Z+7, r1	; 0x07
   10aae:	81 e0       	ldi	r24, 0x01	; 1
   10ab0:	80 87       	std	Z+8, r24	; 0x08
   10ab2:	78 94       	sei
   10ab4:	08 95       	ret

00010ab6 <gpib_timer_elapsed_end>:
   10ab6:	0c 94 54 35 	jmp	0x6aa8	; 0x6aa8 <clock_elapsed_end>
   10aba:	08 95       	ret

00010abc <gpib_timer_task>:
   10abc:	f8 94       	cli
   10abe:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_timer+0x4>
   10ac2:	90 91 ec 1c 	lds	r25, 0x1CEC	; 0x801cec <gpib_timer+0x5>
   10ac6:	a0 91 ed 1c 	lds	r26, 0x1CED	; 0x801ced <gpib_timer+0x6>
   10aca:	b0 91 ee 1c 	lds	r27, 0x1CEE	; 0x801cee <gpib_timer+0x7>
   10ace:	89 2b       	or	r24, r25
   10ad0:	8a 2b       	or	r24, r26
   10ad2:	8b 2b       	or	r24, r27
   10ad4:	a1 f0       	breq	.+40     	; 0x10afe <gpib_timer_task+0x42>
   10ad6:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_timer+0x4>
   10ada:	90 91 ec 1c 	lds	r25, 0x1CEC	; 0x801cec <gpib_timer+0x5>
   10ade:	a0 91 ed 1c 	lds	r26, 0x1CED	; 0x801ced <gpib_timer+0x6>
   10ae2:	b0 91 ee 1c 	lds	r27, 0x1CEE	; 0x801cee <gpib_timer+0x7>
   10ae6:	01 97       	sbiw	r24, 0x01	; 1
   10ae8:	a1 09       	sbc	r26, r1
   10aea:	b1 09       	sbc	r27, r1
   10aec:	80 93 eb 1c 	sts	0x1CEB, r24	; 0x801ceb <gpib_timer+0x4>
   10af0:	90 93 ec 1c 	sts	0x1CEC, r25	; 0x801cec <gpib_timer+0x5>
   10af4:	a0 93 ed 1c 	sts	0x1CED, r26	; 0x801ced <gpib_timer+0x6>
   10af8:	b0 93 ee 1c 	sts	0x1CEE, r27	; 0x801cee <gpib_timer+0x7>
   10afc:	03 c0       	rjmp	.+6      	; 0x10b04 <gpib_timer_task+0x48>
   10afe:	81 e0       	ldi	r24, 0x01	; 1
   10b00:	80 93 ef 1c 	sts	0x1CEF, r24	; 0x801cef <gpib_timer+0x8>
   10b04:	78 94       	sei
   10b06:	08 95       	ret

00010b08 <gpib_timeout_set>:
   10b08:	f8 94       	cli
   10b0a:	e7 ee       	ldi	r30, 0xE7	; 231
   10b0c:	fc e1       	ldi	r31, 0x1C	; 28
   10b0e:	64 83       	std	Z+4, r22	; 0x04
   10b10:	75 83       	std	Z+5, r23	; 0x05
   10b12:	86 83       	std	Z+6, r24	; 0x06
   10b14:	97 83       	std	Z+7, r25	; 0x07
   10b16:	10 86       	std	Z+8, r1	; 0x08
   10b18:	78 94       	sei
   10b1a:	08 95       	ret

00010b1c <gpib_bus_init>:
   10b1c:	00 d0       	rcall	.+0      	; 0x10b1e <gpib_bus_init+0x2>
   10b1e:	1f 92       	push	r1
   10b20:	8f b7       	in	r24, 0x3f	; 63
   10b22:	f8 94       	cli
   10b24:	10 92 67 19 	sts	0x1967, r1	; 0x801967 <gpib_unread_f>
   10b28:	11 b8       	out	0x01, r1	; 1
   10b2a:	9f ef       	ldi	r25, 0xFF	; 255
   10b2c:	92 b9       	out	0x02, r25	; 2
   10b2e:	21 98       	cbi	0x04, 1	; 4
   10b30:	29 9a       	sbi	0x05, 1	; 5
   10b32:	52 98       	cbi	0x0a, 2	; 10
   10b34:	5a 9a       	sbi	0x0b, 2	; 11
   10b36:	53 98       	cbi	0x0a, 3	; 10
   10b38:	5b 9a       	sbi	0x0b, 3	; 11
   10b3a:	56 98       	cbi	0x0a, 6	; 10
   10b3c:	5e 9a       	sbi	0x0b, 6	; 11
   10b3e:	54 98       	cbi	0x0a, 4	; 10
   10b40:	5c 9a       	sbi	0x0b, 4	; 11
   10b42:	57 98       	cbi	0x0a, 7	; 10
   10b44:	5f 9a       	sbi	0x0b, 7	; 11
   10b46:	55 98       	cbi	0x0a, 5	; 10
   10b48:	5d 9a       	sbi	0x0b, 5	; 11
   10b4a:	20 98       	cbi	0x04, 0	; 4
   10b4c:	28 9a       	sbi	0x05, 0	; 5
   10b4e:	45 98       	cbi	0x08, 5	; 8
   10b50:	3d 9a       	sbi	0x07, 5	; 7
   10b52:	44 9a       	sbi	0x08, 4	; 8
   10b54:	3c 9a       	sbi	0x07, 4	; 7
   10b56:	43 98       	cbi	0x08, 3	; 8
   10b58:	3b 9a       	sbi	0x07, 3	; 7
   10b5a:	42 98       	cbi	0x08, 2	; 8
   10b5c:	3a 9a       	sbi	0x07, 2	; 7
   10b5e:	9d e0       	ldi	r25, 0x0D	; 13
   10b60:	9a 95       	dec	r25
   10b62:	f1 f7       	brne	.-4      	; 0x10b60 <gpib_bus_init+0x44>
   10b64:	00 00       	nop
   10b66:	8f bf       	out	0x3f, r24	; 63
   10b68:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b6c:	82 ff       	sbrs	r24, 2
   10b6e:	0a c0       	rjmp	.+20     	; 0x10b84 <gpib_bus_init+0x68>
   10b70:	8c e2       	ldi	r24, 0x2C	; 44
   10b72:	92 e1       	ldi	r25, 0x12	; 18
   10b74:	a0 e0       	ldi	r26, 0x00	; 0
   10b76:	ed b7       	in	r30, 0x3d	; 61
   10b78:	fe b7       	in	r31, 0x3e	; 62
   10b7a:	81 83       	std	Z+1, r24	; 0x01
   10b7c:	92 83       	std	Z+2, r25	; 0x02
   10b7e:	a3 83       	std	Z+3, r26	; 0x03
   10b80:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   10b84:	0f 90       	pop	r0
   10b86:	0f 90       	pop	r0
   10b88:	0f 90       	pop	r0
   10b8a:	08 95       	ret

00010b8c <gpib_rx_init>:
   10b8c:	9f b7       	in	r25, 0x3f	; 63
   10b8e:	f8 94       	cli
   10b90:	11 b8       	out	0x01, r1	; 1
   10b92:	2f ef       	ldi	r18, 0xFF	; 255
   10b94:	22 b9       	out	0x02, r18	; 2
   10b96:	21 98       	cbi	0x04, 1	; 4
   10b98:	29 9a       	sbi	0x05, 1	; 5
   10b9a:	20 98       	cbi	0x04, 0	; 4
   10b9c:	28 9a       	sbi	0x05, 0	; 5
   10b9e:	4e 9b       	sbis	0x09, 6	; 9
   10ba0:	09 c0       	rjmp	.+18     	; 0x10bb4 <gpib_rx_init+0x28>
   10ba2:	81 11       	cpse	r24, r1
   10ba4:	07 c0       	rjmp	.+14     	; 0x10bb4 <gpib_rx_init+0x28>
   10ba6:	52 98       	cbi	0x0a, 2	; 10
   10ba8:	5a 9a       	sbi	0x0b, 2	; 11
   10baa:	53 98       	cbi	0x0a, 3	; 10
   10bac:	5b 9a       	sbi	0x0b, 3	; 11
   10bae:	42 98       	cbi	0x08, 2	; 8
   10bb0:	3a 9a       	sbi	0x07, 2	; 7
   10bb2:	08 c0       	rjmp	.+16     	; 0x10bc4 <gpib_rx_init+0x38>
   10bb4:	42 98       	cbi	0x08, 2	; 8
   10bb6:	3a 9a       	sbi	0x07, 2	; 7
   10bb8:	5b 98       	cbi	0x0b, 3	; 11
   10bba:	53 9a       	sbi	0x0a, 3	; 10
   10bbc:	5a 98       	cbi	0x0b, 2	; 11
   10bbe:	52 9a       	sbi	0x0a, 2	; 10
   10bc0:	88 23       	and	r24, r24
   10bc2:	89 f3       	breq	.-30     	; 0x10ba6 <gpib_rx_init+0x1a>
   10bc4:	9f bf       	out	0x3f, r25	; 63
   10bc6:	08 95       	ret

00010bc8 <gpib_tx_init>:
   10bc8:	9f b7       	in	r25, 0x3f	; 63
   10bca:	f8 94       	cli
   10bcc:	11 b8       	out	0x01, r1	; 1
   10bce:	8f ef       	ldi	r24, 0xFF	; 255
   10bd0:	82 b9       	out	0x02, r24	; 2
   10bd2:	21 98       	cbi	0x04, 1	; 4
   10bd4:	29 9a       	sbi	0x05, 1	; 5
   10bd6:	52 98       	cbi	0x0a, 2	; 10
   10bd8:	5a 9a       	sbi	0x0b, 2	; 11
   10bda:	53 98       	cbi	0x0a, 3	; 10
   10bdc:	5b 9a       	sbi	0x0b, 3	; 11
   10bde:	20 98       	cbi	0x04, 0	; 4
   10be0:	28 9a       	sbi	0x05, 0	; 5
   10be2:	42 9a       	sbi	0x08, 2	; 8
   10be4:	3a 9a       	sbi	0x07, 2	; 7
   10be6:	81 b9       	out	0x01, r24	; 1
   10be8:	9f bf       	out	0x3f, r25	; 63
   10bea:	08 95       	ret

00010bec <gpib_state_init>:
   10bec:	00 d0       	rcall	.+0      	; 0x10bee <gpib_state_init+0x2>
   10bee:	1f 92       	push	r1
   10bf0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10bf4:	82 ff       	sbrs	r24, 2
   10bf6:	0a c0       	rjmp	.+20     	; 0x10c0c <gpib_state_init+0x20>
   10bf8:	89 e1       	ldi	r24, 0x19	; 25
   10bfa:	92 e1       	ldi	r25, 0x12	; 18
   10bfc:	a0 e0       	ldi	r26, 0x00	; 0
   10bfe:	ed b7       	in	r30, 0x3d	; 61
   10c00:	fe b7       	in	r31, 0x3e	; 62
   10c02:	81 83       	std	Z+1, r24	; 0x01
   10c04:	92 83       	std	Z+2, r25	; 0x02
   10c06:	a3 83       	std	Z+3, r26	; 0x03
   10c08:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   10c0c:	cc dd       	rcall	.-1128   	; 0x107a6 <ppr_init>
   10c0e:	0e 94 97 90 	call	0x1212e	; 0x1212e <listen_cleanup>
   10c12:	0e 94 ad 91 	call	0x1235a	; 0x1235a <talk_cleanup>
   10c16:	10 92 f3 1e 	sts	0x1EF3, r1	; 0x801ef3 <spoll>
   10c1a:	10 92 f6 1e 	sts	0x1EF6, r1	; 0x801ef6 <talking>
   10c1e:	10 92 f9 1e 	sts	0x1EF9, r1	; 0x801ef9 <talking_last>
   10c22:	10 92 f8 1e 	sts	0x1EF8, r1	; 0x801ef8 <listening>
   10c26:	10 92 f2 1e 	sts	0x1EF2, r1	; 0x801ef2 <listening_last>
   10c2a:	10 92 f1 1c 	sts	0x1CF1, r1	; 0x801cf1 <lastcmd+0x1>
   10c2e:	10 92 f0 1c 	sts	0x1CF0, r1	; 0x801cf0 <lastcmd>
   10c32:	10 92 f5 1e 	sts	0x1EF5, r1	; 0x801ef5 <current+0x1>
   10c36:	10 92 f4 1e 	sts	0x1EF4, r1	; 0x801ef4 <current>
   10c3a:	10 92 f7 1e 	sts	0x1EF7, r1	; 0x801ef7 <secondary>
   10c3e:	0f 90       	pop	r0
   10c40:	0f 90       	pop	r0
   10c42:	0f 90       	pop	r0
   10c44:	08 95       	ret

00010c46 <gpib_enable_PPR>:
   10c46:	cf 93       	push	r28
   10c48:	df 93       	push	r29
   10c4a:	ad b7       	in	r26, 0x3d	; 61
   10c4c:	be b7       	in	r27, 0x3e	; 62
   10c4e:	17 97       	sbiw	r26, 0x07	; 7
   10c50:	0f b6       	in	r0, 0x3f	; 63
   10c52:	f8 94       	cli
   10c54:	be bf       	out	0x3e, r27	; 62
   10c56:	0f be       	out	0x3f, r0	; 63
   10c58:	ad bf       	out	0x3d, r26	; 61
   10c5a:	ec 01       	movw	r28, r24
   10c5c:	88 30       	cpi	r24, 0x08	; 8
   10c5e:	91 05       	cpc	r25, r1
   10c60:	68 f0       	brcs	.+26     	; 0x10c7c <gpib_enable_PPR+0x36>
   10c62:	ed b7       	in	r30, 0x3d	; 61
   10c64:	fe b7       	in	r31, 0x3e	; 62
   10c66:	95 83       	std	Z+5, r25	; 0x05
   10c68:	84 83       	std	Z+4, r24	; 0x04
   10c6a:	83 ef       	ldi	r24, 0xF3	; 243
   10c6c:	91 e1       	ldi	r25, 0x11	; 17
   10c6e:	a0 e0       	ldi	r26, 0x00	; 0
   10c70:	81 83       	std	Z+1, r24	; 0x01
   10c72:	92 83       	std	Z+2, r25	; 0x02
   10c74:	a3 83       	std	Z+3, r26	; 0x03
   10c76:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   10c7a:	15 c0       	rjmp	.+42     	; 0x10ca6 <gpib_enable_PPR+0x60>
   10c7c:	aa dd       	rcall	.-1196   	; 0x107d2 <ppr_bit_set>
   10c7e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c82:	81 ff       	sbrs	r24, 1
   10c84:	10 c0       	rjmp	.+32     	; 0x10ca6 <gpib_enable_PPR+0x60>
   10c86:	8b dd       	rcall	.-1258   	; 0x1079e <ppr_reg>
   10c88:	90 e0       	ldi	r25, 0x00	; 0
   10c8a:	ed b7       	in	r30, 0x3d	; 61
   10c8c:	fe b7       	in	r31, 0x3e	; 62
   10c8e:	97 83       	std	Z+7, r25	; 0x07
   10c90:	86 83       	std	Z+6, r24	; 0x06
   10c92:	d5 83       	std	Z+5, r29	; 0x05
   10c94:	c4 83       	std	Z+4, r28	; 0x04
   10c96:	88 ed       	ldi	r24, 0xD8	; 216
   10c98:	91 e1       	ldi	r25, 0x11	; 17
   10c9a:	a0 e0       	ldi	r26, 0x00	; 0
   10c9c:	81 83       	std	Z+1, r24	; 0x01
   10c9e:	92 83       	std	Z+2, r25	; 0x02
   10ca0:	a3 83       	std	Z+3, r26	; 0x03
   10ca2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   10ca6:	cd b7       	in	r28, 0x3d	; 61
   10ca8:	de b7       	in	r29, 0x3e	; 62
   10caa:	27 96       	adiw	r28, 0x07	; 7
   10cac:	e2 e0       	ldi	r30, 0x02	; 2
   10cae:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00010cb2 <gpib_disable_PPR>:
   10cb2:	cf 93       	push	r28
   10cb4:	df 93       	push	r29
   10cb6:	ad b7       	in	r26, 0x3d	; 61
   10cb8:	be b7       	in	r27, 0x3e	; 62
   10cba:	17 97       	sbiw	r26, 0x07	; 7
   10cbc:	0f b6       	in	r0, 0x3f	; 63
   10cbe:	f8 94       	cli
   10cc0:	be bf       	out	0x3e, r27	; 62
   10cc2:	0f be       	out	0x3f, r0	; 63
   10cc4:	ad bf       	out	0x3d, r26	; 61
   10cc6:	ec 01       	movw	r28, r24
   10cc8:	88 30       	cpi	r24, 0x08	; 8
   10cca:	91 05       	cpc	r25, r1
   10ccc:	68 f0       	brcs	.+26     	; 0x10ce8 <gpib_disable_PPR+0x36>
   10cce:	ed b7       	in	r30, 0x3d	; 61
   10cd0:	fe b7       	in	r31, 0x3e	; 62
   10cd2:	95 83       	std	Z+5, r25	; 0x05
   10cd4:	84 83       	std	Z+4, r24	; 0x04
   10cd6:	81 eb       	ldi	r24, 0xB1	; 177
   10cd8:	91 e1       	ldi	r25, 0x11	; 17
   10cda:	a0 e0       	ldi	r26, 0x00	; 0
   10cdc:	81 83       	std	Z+1, r24	; 0x01
   10cde:	92 83       	std	Z+2, r25	; 0x02
   10ce0:	a3 83       	std	Z+3, r26	; 0x03
   10ce2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   10ce6:	15 c0       	rjmp	.+42     	; 0x10d12 <gpib_disable_PPR+0x60>
   10ce8:	81 dd       	rcall	.-1278   	; 0x107ec <ppr_bit_clr>
   10cea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10cee:	81 ff       	sbrs	r24, 1
   10cf0:	10 c0       	rjmp	.+32     	; 0x10d12 <gpib_disable_PPR+0x60>
   10cf2:	55 dd       	rcall	.-1366   	; 0x1079e <ppr_reg>
   10cf4:	90 e0       	ldi	r25, 0x00	; 0
   10cf6:	ed b7       	in	r30, 0x3d	; 61
   10cf8:	fe b7       	in	r31, 0x3e	; 62
   10cfa:	97 83       	std	Z+7, r25	; 0x07
   10cfc:	86 83       	std	Z+6, r24	; 0x06
   10cfe:	d5 83       	std	Z+5, r29	; 0x05
   10d00:	c4 83       	std	Z+4, r28	; 0x04
   10d02:	86 e9       	ldi	r24, 0x96	; 150
   10d04:	91 e1       	ldi	r25, 0x11	; 17
   10d06:	a0 e0       	ldi	r26, 0x00	; 0
   10d08:	81 83       	std	Z+1, r24	; 0x01
   10d0a:	92 83       	std	Z+2, r25	; 0x02
   10d0c:	a3 83       	std	Z+3, r26	; 0x03
   10d0e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   10d12:	cd b7       	in	r28, 0x3d	; 61
   10d14:	de b7       	in	r29, 0x3e	; 62
   10d16:	27 96       	adiw	r28, 0x07	; 7
   10d18:	e2 e0       	ldi	r30, 0x02	; 2
   10d1a:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00010d1e <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   10d1e:	cf 93       	push	r28
   10d20:	df 93       	push	r29
   10d22:	00 d0       	rcall	.+0      	; 0x10d24 <gpib_unread+0x6>
   10d24:	1f 92       	push	r1
   10d26:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   10d28:	80 91 67 19 	lds	r24, 0x1967	; 0x801967 <gpib_unread_f>
   10d2c:	81 11       	cpse	r24, r1
   10d2e:	08 c0       	rjmp	.+16     	; 0x10d40 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10d30:	d0 93 fb 1e 	sts	0x1EFB, r29	; 0x801efb <gpib_unread_data+0x1>
   10d34:	c0 93 fa 1e 	sts	0x1EFA, r28	; 0x801efa <gpib_unread_data>
        gpib_unread_f = 1;
   10d38:	81 e0       	ldi	r24, 0x01	; 1
   10d3a:	80 93 67 19 	sts	0x1967, r24	; 0x801967 <gpib_unread_f>
   10d3e:	12 c0       	rjmp	.+36     	; 0x10d64 <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10d40:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d44:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10d48:	85 70       	andi	r24, 0x05	; 5
   10d4a:	99 27       	eor	r25, r25
   10d4c:	89 2b       	or	r24, r25
   10d4e:	51 f0       	breq	.+20     	; 0x10d64 <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10d50:	88 e6       	ldi	r24, 0x68	; 104
   10d52:	91 e1       	ldi	r25, 0x11	; 17
   10d54:	a0 e0       	ldi	r26, 0x00	; 0
   10d56:	ed b7       	in	r30, 0x3d	; 61
   10d58:	fe b7       	in	r31, 0x3e	; 62
   10d5a:	81 83       	std	Z+1, r24	; 0x01
   10d5c:	92 83       	std	Z+2, r25	; 0x02
   10d5e:	a3 83       	std	Z+3, r26	; 0x03
   10d60:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    }
    return(ch);
}
   10d64:	ce 01       	movw	r24, r28
   10d66:	cd b7       	in	r28, 0x3d	; 61
   10d68:	de b7       	in	r29, 0x3e	; 62
   10d6a:	23 96       	adiw	r28, 0x03	; 3
   10d6c:	e2 e0       	ldi	r30, 0x02	; 2
   10d6e:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00010d72 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10d72:	11 b8       	out	0x01, r1	; 1
   10d74:	80 b1       	in	r24, 0x00	; 0
   10d76:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10d78:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10d7a:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10d7c:	08 95       	ret

00010d7e <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10d7e:	4e 99       	sbic	0x09, 6	; 9
   10d80:	03 c0       	rjmp	.+6      	; 0x10d88 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10d82:	80 e0       	ldi	r24, 0x00	; 0
   10d84:	94 e0       	ldi	r25, 0x04	; 4
   10d86:	02 c0       	rjmp	.+4      	; 0x10d8c <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10d88:	80 e0       	ldi	r24, 0x00	; 0
   10d8a:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10d8c:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10d8e:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10d90:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10d92:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10d94:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10d96:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10d98:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10d9a:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10d9c:	08 95       	ret

00010d9e <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10d9e:	19 99       	sbic	0x03, 1	; 3
   10da0:	03 c0       	rjmp	.+6      	; 0x10da8 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10da2:	80 e0       	ldi	r24, 0x00	; 0
   10da4:	90 e2       	ldi	r25, 0x20	; 32
   10da6:	02 c0       	rjmp	.+4      	; 0x10dac <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10da8:	80 e0       	ldi	r24, 0x00	; 0
   10daa:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10dac:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10dae:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10db0:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10db2:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10db4:	08 95       	ret

00010db6 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10db6:	2f 92       	push	r2
   10db8:	3f 92       	push	r3
   10dba:	4f 92       	push	r4
   10dbc:	6f 92       	push	r6
   10dbe:	7f 92       	push	r7
   10dc0:	8f 92       	push	r8
   10dc2:	af 92       	push	r10
   10dc4:	bf 92       	push	r11
   10dc6:	cf 92       	push	r12
   10dc8:	df 92       	push	r13
   10dca:	ef 92       	push	r14
   10dcc:	1f 93       	push	r17
   10dce:	cf 93       	push	r28
   10dd0:	df 93       	push	r29
   10dd2:	cd b7       	in	r28, 0x3d	; 61
   10dd4:	de b7       	in	r29, 0x3e	; 62
   10dd6:	2a 97       	sbiw	r28, 0x0a	; 10
   10dd8:	0f b6       	in	r0, 0x3f	; 63
   10dda:	f8 94       	cli
   10ddc:	de bf       	out	0x3e, r29	; 62
   10dde:	0f be       	out	0x3f, r0	; 63
   10de0:	cd bf       	out	0x3d, r28	; 61
   10de2:	9a 87       	std	Y+10, r25	; 0x0a
   10de4:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10de6:	64 ef       	ldi	r22, 0xF4	; 244
   10de8:	71 e0       	ldi	r23, 0x01	; 1
   10dea:	80 e0       	ldi	r24, 0x00	; 0
   10dec:	90 e0       	ldi	r25, 0x00	; 0
   10dee:	8c de       	rcall	.-744    	; 0x10b08 <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10df0:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10df2:	83 e6       	ldi	r24, 0x63	; 99
   10df4:	90 e1       	ldi	r25, 0x10	; 16
   10df6:	6c 01       	movw	r12, r24
   10df8:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10dfa:	82 e9       	ldi	r24, 0x92	; 146
   10dfc:	90 e1       	ldi	r25, 0x10	; 16
   10dfe:	3c 01       	movw	r6, r24
   10e00:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10e02:	aa 24       	eor	r10, r10
   10e04:	a3 94       	inc	r10
   10e06:	b1 2c       	mov	r11, r1
   10e08:	8a e0       	ldi	r24, 0x0A	; 10
   10e0a:	91 e1       	ldi	r25, 0x11	; 17
   10e0c:	1c 01       	movw	r2, r24
   10e0e:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10e10:	8e ec       	ldi	r24, 0xCE	; 206
   10e12:	90 e1       	ldi	r25, 0x10	; 16
   10e14:	9c 01       	movw	r18, r24
   10e16:	40 e0       	ldi	r20, 0x00	; 0
   10e18:	2e 83       	std	Y+6, r18	; 0x06
   10e1a:	3f 83       	std	Y+7, r19	; 0x07
   10e1c:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10e1e:	80 e0       	ldi	r24, 0x00	; 0
   10e20:	0e 94 45 2a 	call	0x548a	; 0x548a <uart_keyhit>
   10e24:	89 2b       	or	r24, r25
   10e26:	09 f0       	breq	.+2      	; 0x10e2a <gpib_write_byte+0x74>
   10e28:	e7 c0       	rjmp	.+462    	; 0x10ff8 <gpib_write_byte+0x242>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10e2a:	4c 99       	sbic	0x09, 4	; 9
   10e2c:	19 c0       	rjmp	.+50     	; 0x10e60 <gpib_write_byte+0xaa>
        {
            ch |= IFC_FLAG;
   10e2e:	89 85       	ldd	r24, Y+9	; 0x09
   10e30:	9a 85       	ldd	r25, Y+10	; 0x0a
   10e32:	90 61       	ori	r25, 0x10	; 16
   10e34:	9a 87       	std	Y+10, r25	; 0x0a
            gpib_bus_init();
   10e36:	89 87       	std	Y+9, r24	; 0x09
   10e38:	71 de       	rcall	.-798    	; 0x10b1c <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10e3a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10e3e:	80 ff       	sbrs	r24, 0
   10e40:	db c0       	rjmp	.+438    	; 0x10ff8 <gpib_write_byte+0x242>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10e42:	81 2f       	mov	r24, r17
   10e44:	90 e0       	ldi	r25, 0x00	; 0
   10e46:	ed b7       	in	r30, 0x3d	; 61
   10e48:	fe b7       	in	r31, 0x3e	; 62
   10e4a:	95 83       	std	Z+5, r25	; 0x05
   10e4c:	84 83       	std	Z+4, r24	; 0x04
   10e4e:	89 e4       	ldi	r24, 0x49	; 73
   10e50:	91 e1       	ldi	r25, 0x11	; 17
   10e52:	a0 e0       	ldi	r26, 0x00	; 0
   10e54:	81 83       	std	Z+1, r24	; 0x01
   10e56:	92 83       	std	Z+2, r25	; 0x02
   10e58:	a3 83       	std	Z+3, r26	; 0x03
   10e5a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   10e5e:	cc c0       	rjmp	.+408    	; 0x10ff8 <gpib_write_byte+0x242>
            break;
        }

        switch(tx_state)
   10e60:	81 2f       	mov	r24, r17
   10e62:	90 e0       	ldi	r25, 0x00	; 0
   10e64:	89 30       	cpi	r24, 0x09	; 9
   10e66:	91 05       	cpc	r25, r1
   10e68:	08 f0       	brcs	.+2      	; 0x10e6c <gpib_write_byte+0xb6>
   10e6a:	be c0       	rjmp	.+380    	; 0x10fe8 <gpib_write_byte+0x232>
   10e6c:	fc 01       	movw	r30, r24
   10e6e:	e3 54       	subi	r30, 0x43	; 67
   10e70:	ff 4f       	sbci	r31, 0xFF	; 255
   10e72:	0c 94 84 e6 	jmp	0x1cd08	; 0x1cd08 <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init();
   10e76:	a8 de       	rcall	.-688    	; 0x10bc8 <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10e78:	21 98       	cbi	0x04, 1	; 4
   10e7a:	29 9a       	sbi	0x05, 1	; 5
   10e7c:	fd e0       	ldi	r31, 0x0D	; 13
   10e7e:	fa 95       	dec	r31
   10e80:	f1 f7       	brne	.-4      	; 0x10e7e <gpib_write_byte+0xc8>
   10e82:	00 00       	nop
   10e84:	06 c0       	rjmp	.+12     	; 0x10e92 <gpib_write_byte+0xdc>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10e86:	4a 9b       	sbis	0x09, 2	; 9
   10e88:	02 c0       	rjmp	.+4      	; 0x10e8e <gpib_write_byte+0xd8>
   10e8a:	4b 99       	sbic	0x09, 3	; 9
   10e8c:	17 c0       	rjmp	.+46     	; 0x10ebc <gpib_write_byte+0x106>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10e8e:	4e 9b       	sbis	0x09, 6	; 9
   10e90:	07 c0       	rjmp	.+14     	; 0x10ea0 <gpib_write_byte+0xea>
					{
						gpib_timeout_set(HTIMEOUT);
   10e92:	64 ef       	ldi	r22, 0xF4	; 244
   10e94:	71 e0       	ldi	r23, 0x01	; 1
   10e96:	80 e0       	ldi	r24, 0x00	; 0
   10e98:	90 e0       	ldi	r25, 0x00	; 0
   10e9a:	36 de       	rcall	.-916    	; 0x10b08 <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10e9c:	12 e0       	ldi	r17, 0x02	; 2
   10e9e:	bf cf       	rjmp	.-130    	; 0x10e1e <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10ea0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ea4:	80 ff       	sbrs	r24, 0
   10ea6:	bb cf       	rjmp	.-138    	; 0x10e1e <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10ea8:	ed b7       	in	r30, 0x3d	; 61
   10eaa:	fe b7       	in	r31, 0x3e	; 62
   10eac:	b5 82       	std	Z+5, r11	; 0x05
   10eae:	a4 82       	std	Z+4, r10	; 0x04
   10eb0:	21 82       	std	Z+1, r2	; 0x01
   10eb2:	32 82       	std	Z+2, r3	; 0x02
   10eb4:	43 82       	std	Z+3, r4	; 0x03
   10eb6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   10eba:	b1 cf       	rjmp	.-158    	; 0x10e1e <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10ebc:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   10ec0:	88 23       	and	r24, r24
   10ec2:	09 f4       	brne	.+2      	; 0x10ec6 <gpib_write_byte+0x110>
   10ec4:	ac cf       	rjmp	.-168    	; 0x10e1e <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10ec6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10eca:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10ece:	85 70       	andi	r24, 0x05	; 5
   10ed0:	99 27       	eor	r25, r25
   10ed2:	89 2b       	or	r24, r25
   10ed4:	c1 f1       	breq	.+112    	; 0x10f46 <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10ed6:	2e 81       	ldd	r18, Y+6	; 0x06
   10ed8:	3f 81       	ldd	r19, Y+7	; 0x07
   10eda:	48 85       	ldd	r20, Y+8	; 0x08
   10edc:	ed b7       	in	r30, 0x3d	; 61
   10ede:	fe b7       	in	r31, 0x3e	; 62
   10ee0:	21 83       	std	Z+1, r18	; 0x01
   10ee2:	32 83       	std	Z+2, r19	; 0x02
   10ee4:	43 83       	std	Z+3, r20	; 0x03
   10ee6:	2d c0       	rjmp	.+90     	; 0x10f42 <gpib_write_byte+0x18c>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   10ee8:	89 85       	ldd	r24, Y+9	; 0x09
   10eea:	9a 85       	ldd	r25, Y+10	; 0x0a
   10eec:	90 ff       	sbrs	r25, 0
   10eee:	03 c0       	rjmp	.+6      	; 0x10ef6 <gpib_write_byte+0x140>
                    GPIB_IO_LOW(EOI);
   10ef0:	28 98       	cbi	0x05, 0	; 5
   10ef2:	20 9a       	sbi	0x04, 0	; 4
   10ef4:	02 c0       	rjmp	.+4      	; 0x10efa <gpib_write_byte+0x144>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10ef6:	20 98       	cbi	0x04, 0	; 4
   10ef8:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10efa:	8f ef       	ldi	r24, 0xFF	; 255
   10efc:	81 b9       	out	0x01, r24	; 1
   10efe:	89 85       	ldd	r24, Y+9	; 0x09
   10f00:	80 95       	com	r24
   10f02:	82 b9       	out	0x02, r24	; 2
   10f04:	9d e0       	ldi	r25, 0x0D	; 13
   10f06:	9a 95       	dec	r25
   10f08:	f1 f7       	brne	.-4      	; 0x10f06 <gpib_write_byte+0x150>
   10f0a:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10f0c:	64 ef       	ldi	r22, 0xF4	; 244
   10f0e:	71 e0       	ldi	r23, 0x01	; 1
   10f10:	80 e0       	ldi	r24, 0x00	; 0
   10f12:	90 e0       	ldi	r25, 0x00	; 0
   10f14:	f9 dd       	rcall	.-1038   	; 0x10b08 <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   10f16:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10f18:	82 cf       	rjmp	.-252    	; 0x10e1e <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   10f1a:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   10f1c:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f1e:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   10f22:	88 23       	and	r24, r24
   10f24:	09 f4       	brne	.+2      	; 0x10f28 <gpib_write_byte+0x172>
   10f26:	7b cf       	rjmp	.-266    	; 0x10e1e <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10f28:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f2c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10f30:	85 70       	andi	r24, 0x05	; 5
   10f32:	99 27       	eor	r25, r25
   10f34:	89 2b       	or	r24, r25
   10f36:	39 f0       	breq	.+14     	; 0x10f46 <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10f38:	ed b7       	in	r30, 0x3d	; 61
   10f3a:	fe b7       	in	r31, 0x3e	; 62
   10f3c:	61 82       	std	Z+1, r6	; 0x01
   10f3e:	72 82       	std	Z+2, r7	; 0x02
   10f40:	83 82       	std	Z+3, r8	; 0x03
   10f42:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
                    ch |= TIMEOUT_FLAG;
   10f46:	29 85       	ldd	r18, Y+9	; 0x09
   10f48:	3a 85       	ldd	r19, Y+10	; 0x0a
   10f4a:	30 64       	ori	r19, 0x40	; 64
   10f4c:	3a 87       	std	Y+10, r19	; 0x0a
   10f4e:	29 87       	std	Y+9, r18	; 0x09
   10f50:	51 c0       	rjmp	.+162    	; 0x10ff4 <gpib_write_byte+0x23e>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10f52:	29 98       	cbi	0x05, 1	; 5
   10f54:	21 9a       	sbi	0x04, 1	; 4
   10f56:	3d e0       	ldi	r19, 0x0D	; 13
   10f58:	3a 95       	dec	r19
   10f5a:	f1 f7       	brne	.-4      	; 0x10f58 <gpib_write_byte+0x1a2>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   10f5c:	00 00       	nop
   10f5e:	64 ef       	ldi	r22, 0xF4	; 244
   10f60:	71 e0       	ldi	r23, 0x01	; 1
   10f62:	80 e0       	ldi	r24, 0x00	; 0
   10f64:	90 e0       	ldi	r25, 0x00	; 0
   10f66:	d0 dd       	rcall	.-1120   	; 0x10b08 <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10f68:	15 e0       	ldi	r17, 0x05	; 5
                break;
   10f6a:	59 cf       	rjmp	.-334    	; 0x10e1e <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   10f6c:	4b 99       	sbic	0x09, 3	; 9
   10f6e:	40 c0       	rjmp	.+128    	; 0x10ff0 <gpib_write_byte+0x23a>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f70:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10f74:	88 23       	and	r24, r24
   10f76:	09 f4       	brne	.+2      	; 0x10f7a <gpib_write_byte+0x1c4>
   10f78:	52 cf       	rjmp	.-348    	; 0x10e1e <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   10f7a:	89 85       	ldd	r24, Y+9	; 0x09
   10f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
   10f7e:	90 64       	ori	r25, 0x40	; 64
   10f80:	9a 87       	std	Y+10, r25	; 0x0a
   10f82:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10f84:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f88:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10f8c:	85 70       	andi	r24, 0x05	; 5
   10f8e:	99 27       	eor	r25, r25
   10f90:	89 2b       	or	r24, r25
   10f92:	81 f1       	breq	.+96     	; 0x10ff4 <gpib_write_byte+0x23e>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10f94:	ed b7       	in	r30, 0x3d	; 61
   10f96:	fe b7       	in	r31, 0x3e	; 62
   10f98:	c1 82       	std	Z+1, r12	; 0x01
   10f9a:	d2 82       	std	Z+2, r13	; 0x02
   10f9c:	e3 82       	std	Z+3, r14	; 0x03
   10f9e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   10fa2:	28 c0       	rjmp	.+80     	; 0x10ff4 <gpib_write_byte+0x23e>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10fa4:	21 98       	cbi	0x04, 1	; 4
   10fa6:	29 9a       	sbi	0x05, 1	; 5
   10fa8:	fd e0       	ldi	r31, 0x0D	; 13
   10faa:	fa 95       	dec	r31
   10fac:	f1 f7       	brne	.-4      	; 0x10faa <gpib_write_byte+0x1f4>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   10fae:	00 00       	nop
   10fb0:	64 ef       	ldi	r22, 0xF4	; 244
   10fb2:	71 e0       	ldi	r23, 0x01	; 1
   10fb4:	80 e0       	ldi	r24, 0x00	; 0
   10fb6:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   10fb8:	a7 dd       	rcall	.-1202   	; 0x10b08 <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   10fba:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   10fbc:	30 cf       	rjmp	.-416    	; 0x10e1e <gpib_write_byte+0x68>
   10fbe:	81 e0       	ldi	r24, 0x01	; 1
   10fc0:	e5 dd       	rcall	.-1078   	; 0x10b8c <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10fc2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10fc6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10fca:	85 70       	andi	r24, 0x05	; 5
   10fcc:	99 27       	eor	r25, r25
   10fce:	89 2b       	or	r24, r25
   10fd0:	99 f0       	breq	.+38     	; 0x10ff8 <gpib_write_byte+0x242>
                    printf("<GPIB TX TIMEOUT>\n");
   10fd2:	80 e5       	ldi	r24, 0x50	; 80
   10fd4:	90 e1       	ldi	r25, 0x10	; 16
   10fd6:	a0 e0       	ldi	r26, 0x00	; 0
   10fd8:	ed b7       	in	r30, 0x3d	; 61
   10fda:	fe b7       	in	r31, 0x3e	; 62
   10fdc:	81 83       	std	Z+1, r24	; 0x01
   10fde:	92 83       	std	Z+2, r25	; 0x02
   10fe0:	a3 83       	std	Z+3, r26	; 0x03
   10fe2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   10fe6:	08 c0       	rjmp	.+16     	; 0x10ff8 <gpib_write_byte+0x242>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   10fe8:	19 30       	cpi	r17, 0x09	; 9
   10fea:	09 f0       	breq	.+2      	; 0x10fee <gpib_write_byte+0x238>
   10fec:	18 cf       	rjmp	.-464    	; 0x10e1e <gpib_write_byte+0x68>
   10fee:	04 c0       	rjmp	.+8      	; 0x10ff8 <gpib_write_byte+0x242>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10ff0:	16 e0       	ldi	r17, 0x06	; 6
   10ff2:	15 cf       	rjmp	.-470    	; 0x10e1e <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10ff4:	18 e0       	ldi	r17, 0x08	; 8
   10ff6:	13 cf       	rjmp	.-474    	; 0x10e1e <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10ff8:	89 85       	ldd	r24, Y+9	; 0x09
   10ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
   10ffc:	2a 96       	adiw	r28, 0x0a	; 10
   10ffe:	0f b6       	in	r0, 0x3f	; 63
   11000:	f8 94       	cli
   11002:	de bf       	out	0x3e, r29	; 62
   11004:	0f be       	out	0x3f, r0	; 63
   11006:	cd bf       	out	0x3d, r28	; 61
   11008:	df 91       	pop	r29
   1100a:	cf 91       	pop	r28
   1100c:	1f 91       	pop	r17
   1100e:	ef 90       	pop	r14
   11010:	df 90       	pop	r13
   11012:	cf 90       	pop	r12
   11014:	bf 90       	pop	r11
   11016:	af 90       	pop	r10
   11018:	8f 90       	pop	r8
   1101a:	7f 90       	pop	r7
   1101c:	6f 90       	pop	r6
   1101e:	4f 90       	pop	r4
   11020:	3f 90       	pop	r3
   11022:	2f 90       	pop	r2
   11024:	08 95       	ret

00011026 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   11026:	cf 93       	push	r28
   11028:	df 93       	push	r29
   1102a:	ec 01       	movw	r28, r24
    if(fo == NULL)
   1102c:	89 2b       	or	r24, r25
   1102e:	21 f4       	brne	.+8      	; 0x11038 <gpib_decode_header+0x12>
        fo = stdout;
   11030:	c0 91 c9 1c 	lds	r28, 0x1CC9	; 0x801cc9 <__iob+0x2>
   11034:	d0 91 ca 1c 	lds	r29, 0x1CCA	; 0x801cca <__iob+0x3>

    fprintf(fo,"==============================\n");
   11038:	be 01       	movw	r22, r28
   1103a:	81 e0       	ldi	r24, 0x01	; 1
   1103c:	9c e0       	ldi	r25, 0x0C	; 12
   1103e:	0e 94 6d 76 	call	0xecda	; 0xecda <fputs>
    fprintf(fo,"GPIB bus state\n");
   11042:	be 01       	movw	r22, r28
   11044:	81 e2       	ldi	r24, 0x21	; 33
   11046:	9c e0       	ldi	r25, 0x0C	; 12
   11048:	0e 94 6d 76 	call	0xecda	; 0xecda <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   1104c:	be 01       	movw	r22, r28
   1104e:	81 e3       	ldi	r24, 0x31	; 49
   11050:	9c e0       	ldi	r25, 0x0C	; 12
   11052:	0e 94 6d 76 	call	0xecda	; 0xecda <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   11056:	be 01       	movw	r22, r28
   11058:	85 e4       	ldi	r24, 0x45	; 69
   1105a:	9c e0       	ldi	r25, 0x0C	; 12
   1105c:	0e 94 6d 76 	call	0xecda	; 0xecda <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   11060:	be 01       	movw	r22, r28
   11062:	88 e6       	ldi	r24, 0x68	; 104
   11064:	9c e0       	ldi	r25, 0x0C	; 12
   11066:	0e 94 6d 76 	call	0xecda	; 0xecda <fputs>
    fprintf(fo,"     A = ATN\n");
   1106a:	be 01       	movw	r22, r28
   1106c:	82 e9       	ldi	r24, 0x92	; 146
   1106e:	9c e0       	ldi	r25, 0x0C	; 12
   11070:	0e 94 6d 76 	call	0xecda	; 0xecda <fputs>
    fprintf(fo,"      E = EOI\n");
   11074:	be 01       	movw	r22, r28
   11076:	80 ea       	ldi	r24, 0xA0	; 160
   11078:	9c e0       	ldi	r25, 0x0C	; 12
   1107a:	0e 94 6d 76 	call	0xecda	; 0xecda <fputs>
    fprintf(fo,"       S = SRQ\n");
   1107e:	be 01       	movw	r22, r28
   11080:	8f ea       	ldi	r24, 0xAF	; 175
   11082:	9c e0       	ldi	r25, 0x0C	; 12
   11084:	0e 94 6d 76 	call	0xecda	; 0xecda <fputs>
    fprintf(fo,"        R = REN\n");
   11088:	be 01       	movw	r22, r28
   1108a:	8f eb       	ldi	r24, 0xBF	; 191
   1108c:	9c e0       	ldi	r25, 0x0C	; 12
   1108e:	0e 94 6d 76 	call	0xecda	; 0xecda <fputs>
    fprintf(fo,"         I = IFC\n");
   11092:	be 01       	movw	r22, r28
   11094:	80 ed       	ldi	r24, 0xD0	; 208
   11096:	9c e0       	ldi	r25, 0x0C	; 12
   11098:	0e 94 6d 76 	call	0xecda	; 0xecda <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   1109c:	be 01       	movw	r22, r28
   1109e:	82 ee       	ldi	r24, 0xE2	; 226
   110a0:	9c e0       	ldi	r25, 0x0C	; 12
   110a2:	0e 94 6d 76 	call	0xecda	; 0xecda <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   110a6:	be 01       	movw	r22, r28
   110a8:	84 e0       	ldi	r24, 0x04	; 4
   110aa:	9d e0       	ldi	r25, 0x0D	; 13
   110ac:	0e 94 6d 76 	call	0xecda	; 0xecda <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   110b0:	be 01       	movw	r22, r28
   110b2:	8c e1       	ldi	r24, 0x1C	; 28
   110b4:	9d e0       	ldi	r25, 0x0D	; 13
   110b6:	0e 94 6d 76 	call	0xecda	; 0xecda <fputs>
    fprintf(fo,"              GPIB commands\n");
   110ba:	be 01       	movw	r22, r28
   110bc:	87 e3       	ldi	r24, 0x37	; 55
   110be:	9d e0       	ldi	r25, 0x0D	; 13
   110c0:	0e 94 6d 76 	call	0xecda	; 0xecda <fputs>
}
   110c4:	df 91       	pop	r29
   110c6:	cf 91       	pop	r28
   110c8:	08 95       	ret

000110ca <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   110ca:	a9 e8       	ldi	r26, 0x89	; 137
   110cc:	b0 e0       	ldi	r27, 0x00	; 0
   110ce:	eb e6       	ldi	r30, 0x6B	; 107
   110d0:	f8 e8       	ldi	r31, 0x88	; 136
   110d2:	0c 94 b9 e6 	jmp	0x1cd72	; 0x1cd72 <__prologue_saves__+0xc>
   110d6:	8c 01       	movw	r16, r24
   110d8:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   110da:	1a 86       	std	Y+10, r1	; 0x0a
   110dc:	4c 01       	movw	r8, r24
   110de:	88 24       	eor	r8, r8
   110e0:	44 e0       	ldi	r20, 0x04	; 4
   110e2:	94 22       	and	r9, r20
   110e4:	ce 01       	movw	r24, r28
   110e6:	0a 96       	adiw	r24, 0x0a	; 10
   110e8:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   110ea:	62 30       	cpi	r22, 0x02	; 2
   110ec:	71 05       	cpc	r23, r1
   110ee:	e8 f4       	brcc	.+58     	; 0x1112a <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   110f0:	81 14       	cp	r8, r1
   110f2:	91 04       	cpc	r9, r1
   110f4:	29 f4       	brne	.+10     	; 0x11100 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   110f6:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   110f8:	90 ee       	ldi	r25, 0xE0	; 224
   110fa:	90 0f       	add	r25, r16
   110fc:	9f 35       	cpi	r25, 0x5F	; 95
   110fe:	08 f0       	brcs	.+2      	; 0x11102 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   11100:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11102:	90 e0       	ldi	r25, 0x00	; 0
   11104:	ed b7       	in	r30, 0x3d	; 61
   11106:	fe b7       	in	r31, 0x3e	; 62
   11108:	91 87       	std	Z+9, r25	; 0x09
   1110a:	80 87       	std	Z+8, r24	; 0x08
   1110c:	c8 01       	movw	r24, r16
   1110e:	99 27       	eor	r25, r25
   11110:	97 83       	std	Z+7, r25	; 0x07
   11112:	86 83       	std	Z+6, r24	; 0x06
   11114:	89 e2       	ldi	r24, 0x29	; 41
   11116:	90 e1       	ldi	r25, 0x10	; 16
   11118:	a0 e0       	ldi	r26, 0x00	; 0
   1111a:	83 83       	std	Z+3, r24	; 0x03
   1111c:	94 83       	std	Z+4, r25	; 0x04
   1111e:	a5 83       	std	Z+5, r26	; 0x05
   11120:	f2 82       	std	Z+2, r15	; 0x02
   11122:	e1 82       	std	Z+1, r14	; 0x01
   11124:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <sprintf_P>
   11128:	0c c0       	rjmp	.+24     	; 0x11142 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   1112a:	83 e2       	ldi	r24, 0x23	; 35
   1112c:	90 e1       	ldi	r25, 0x10	; 16
   1112e:	a0 e0       	ldi	r26, 0x00	; 0
   11130:	ed b7       	in	r30, 0x3d	; 61
   11132:	fe b7       	in	r31, 0x3e	; 62
   11134:	83 83       	std	Z+3, r24	; 0x03
   11136:	94 83       	std	Z+4, r25	; 0x04
   11138:	a5 83       	std	Z+5, r26	; 0x05
   1113a:	f2 82       	std	Z+2, r15	; 0x02
   1113c:	e1 82       	std	Z+1, r14	; 0x01
   1113e:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <sprintf_P>
    }

    tmp = str + strlen(str);
   11142:	f7 01       	movw	r30, r14
   11144:	01 90       	ld	r0, Z+
   11146:	00 20       	and	r0, r0
   11148:	e9 f7       	brne	.-6      	; 0x11144 <gpib_trace_display+0x7a>
   1114a:	31 97       	sbiw	r30, 0x01	; 1
   1114c:	cf 01       	movw	r24, r30
   1114e:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   11150:	81 14       	cp	r8, r1
   11152:	91 04       	cpc	r9, r1
   11154:	11 f0       	breq	.+4      	; 0x1115a <gpib_trace_display+0x90>
        *tmp++ = 'A';
   11156:	21 e4       	ldi	r18, 0x41	; 65
   11158:	01 c0       	rjmp	.+2      	; 0x1115c <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   1115a:	2d e2       	ldi	r18, 0x2D	; 45
   1115c:	20 83       	st	Z, r18
   1115e:	dc 01       	movw	r26, r24
   11160:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   11162:	10 ff       	sbrs	r17, 0
   11164:	02 c0       	rjmp	.+4      	; 0x1116a <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   11166:	25 e4       	ldi	r18, 0x45	; 69
   11168:	01 c0       	rjmp	.+2      	; 0x1116c <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   1116a:	2d e2       	ldi	r18, 0x2D	; 45
   1116c:	fc 01       	movw	r30, r24
   1116e:	20 83       	st	Z, r18
   11170:	fd 01       	movw	r30, r26
   11172:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   11174:	11 ff       	sbrs	r17, 1
   11176:	02 c0       	rjmp	.+4      	; 0x1117c <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   11178:	83 e5       	ldi	r24, 0x53	; 83
   1117a:	01 c0       	rjmp	.+2      	; 0x1117e <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   1117c:	8d e2       	ldi	r24, 0x2D	; 45
   1117e:	8c 93       	st	X, r24
   11180:	df 01       	movw	r26, r30
   11182:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   11184:	13 ff       	sbrs	r17, 3
   11186:	02 c0       	rjmp	.+4      	; 0x1118c <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   11188:	82 e5       	ldi	r24, 0x52	; 82
   1118a:	01 c0       	rjmp	.+2      	; 0x1118e <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   1118c:	8d e2       	ldi	r24, 0x2D	; 45
   1118e:	80 83       	st	Z, r24
   11190:	fd 01       	movw	r30, r26
   11192:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   11194:	14 ff       	sbrs	r17, 4
   11196:	02 c0       	rjmp	.+4      	; 0x1119c <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   11198:	89 e4       	ldi	r24, 0x49	; 73
   1119a:	01 c0       	rjmp	.+2      	; 0x1119e <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   1119c:	8d e2       	ldi	r24, 0x2D	; 45
   1119e:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   111a0:	a1 14       	cp	r10, r1
   111a2:	b1 04       	cpc	r11, r1
   111a4:	d1 f4       	brne	.+52     	; 0x111da <gpib_trace_display+0x110>
   111a6:	df 01       	movw	r26, r30
   111a8:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   111aa:	15 ff       	sbrs	r17, 5
   111ac:	02 c0       	rjmp	.+4      	; 0x111b2 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   111ae:	80 e5       	ldi	r24, 0x50	; 80
   111b0:	01 c0       	rjmp	.+2      	; 0x111b4 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   111b2:	8d e2       	ldi	r24, 0x2D	; 45
   111b4:	80 83       	st	Z, r24
   111b6:	fd 01       	movw	r30, r26
   111b8:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   111ba:	16 ff       	sbrs	r17, 6
   111bc:	02 c0       	rjmp	.+4      	; 0x111c2 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   111be:	84 e5       	ldi	r24, 0x54	; 84
   111c0:	01 c0       	rjmp	.+2      	; 0x111c4 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   111c2:	8d e2       	ldi	r24, 0x2D	; 45
   111c4:	8c 93       	st	X, r24
   111c6:	cf 01       	movw	r24, r30
   111c8:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   111ca:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   111cc:	17 ff       	sbrs	r17, 7
   111ce:	02 c0       	rjmp	.+4      	; 0x111d4 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   111d0:	82 e4       	ldi	r24, 0x42	; 66
   111d2:	01 c0       	rjmp	.+2      	; 0x111d6 <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   111d4:	8d e2       	ldi	r24, 0x2D	; 45
   111d6:	80 83       	st	Z, r24
   111d8:	08 c0       	rjmp	.+16     	; 0x111ea <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   111da:	8d e2       	ldi	r24, 0x2D	; 45
   111dc:	80 83       	st	Z, r24
        *tmp++ = '-';
   111de:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   111e0:	6f 01       	movw	r12, r30
   111e2:	43 e0       	ldi	r20, 0x03	; 3
   111e4:	c4 0e       	add	r12, r20
   111e6:	d1 1c       	adc	r13, r1
   111e8:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   111ea:	f6 01       	movw	r30, r12
   111ec:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   111ee:	f1 e0       	ldi	r31, 0x01	; 1
   111f0:	af 1a       	sub	r10, r31
   111f2:	b1 08       	sbc	r11, r1
   111f4:	42 e0       	ldi	r20, 0x02	; 2
   111f6:	a4 16       	cp	r10, r20
   111f8:	b1 04       	cpc	r11, r1
   111fa:	f0 f4       	brcc	.+60     	; 0x11238 <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   111fc:	15 ff       	sbrs	r17, 5
   111fe:	03 c0       	rjmp	.+6      	; 0x11206 <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   11200:	64 e5       	ldi	r22, 0x54	; 84
   11202:	7d e0       	ldi	r23, 0x0D	; 13
   11204:	02 c0       	rjmp	.+4      	; 0x1120a <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   11206:	65 e6       	ldi	r22, 0x65	; 101
   11208:	74 e0       	ldi	r23, 0x04	; 4
   1120a:	c7 01       	movw	r24, r14
   1120c:	0e 94 42 31 	call	0x6284	; 0x6284 <strcat>
        if(status & NRFD_FLAG)
   11210:	16 ff       	sbrs	r17, 6
   11212:	03 c0       	rjmp	.+6      	; 0x1121a <gpib_trace_display+0x150>
            strcat(str," NRFD");
   11214:	6a e5       	ldi	r22, 0x5A	; 90
   11216:	7d e0       	ldi	r23, 0x0D	; 13
   11218:	02 c0       	rjmp	.+4      	; 0x1121e <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   1121a:	65 e6       	ldi	r22, 0x65	; 101
   1121c:	74 e0       	ldi	r23, 0x04	; 4
   1121e:	c7 01       	movw	r24, r14
   11220:	0e 94 42 31 	call	0x6284	; 0x6284 <strcat>
        if(status & NDAC_FLAG)
   11224:	17 ff       	sbrs	r17, 7
   11226:	03 c0       	rjmp	.+6      	; 0x1122e <gpib_trace_display+0x164>
            strcat(str," NDAC");
   11228:	60 e6       	ldi	r22, 0x60	; 96
   1122a:	7d e0       	ldi	r23, 0x0D	; 13
   1122c:	02 c0       	rjmp	.+4      	; 0x11232 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   1122e:	65 e6       	ldi	r22, 0x65	; 101
   11230:	74 e0       	ldi	r23, 0x04	; 4
   11232:	c7 01       	movw	r24, r14
   11234:	0e 94 42 31 	call	0x6284	; 0x6284 <strcat>
    }

    if( (status & ATN_FLAG) )
   11238:	81 14       	cp	r8, r1
   1123a:	91 04       	cpc	r9, r1
   1123c:	09 f4       	brne	.+2      	; 0x11240 <gpib_trace_display+0x176>
   1123e:	5a c0       	rjmp	.+180    	; 0x112f4 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   11240:	c8 01       	movw	r24, r16
   11242:	8f 77       	andi	r24, 0x7F	; 127
   11244:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   11246:	9c 01       	movw	r18, r24
   11248:	20 52       	subi	r18, 0x20	; 32
   1124a:	31 09       	sbc	r19, r1
   1124c:	2f 31       	cpi	r18, 0x1F	; 31
   1124e:	31 05       	cpc	r19, r1
   11250:	48 f4       	brcc	.+18     	; 0x11264 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   11252:	0f 71       	andi	r16, 0x1F	; 31
   11254:	11 27       	eor	r17, r17
   11256:	ed b7       	in	r30, 0x3d	; 61
   11258:	fe b7       	in	r31, 0x3e	; 62
   1125a:	17 83       	std	Z+7, r17	; 0x07
   1125c:	06 83       	std	Z+6, r16	; 0x06
   1125e:	88 e1       	ldi	r24, 0x18	; 24
   11260:	90 e1       	ldi	r25, 0x10	; 16
   11262:	0e c0       	rjmp	.+28     	; 0x11280 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   11264:	9c 01       	movw	r18, r24
   11266:	20 54       	subi	r18, 0x40	; 64
   11268:	31 09       	sbc	r19, r1
   1126a:	2f 30       	cpi	r18, 0x0F	; 15
   1126c:	31 05       	cpc	r19, r1
   1126e:	88 f4       	brcc	.+34     	; 0x11292 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   11270:	0f 71       	andi	r16, 0x1F	; 31
   11272:	11 27       	eor	r17, r17
   11274:	ed b7       	in	r30, 0x3d	; 61
   11276:	fe b7       	in	r31, 0x3e	; 62
   11278:	17 83       	std	Z+7, r17	; 0x07
   1127a:	06 83       	std	Z+6, r16	; 0x06
   1127c:	8d e0       	ldi	r24, 0x0D	; 13
   1127e:	90 e1       	ldi	r25, 0x10	; 16
   11280:	a0 e0       	ldi	r26, 0x00	; 0
   11282:	83 83       	std	Z+3, r24	; 0x03
   11284:	94 83       	std	Z+4, r25	; 0x04
   11286:	a5 83       	std	Z+5, r26	; 0x05
   11288:	d2 82       	std	Z+2, r13	; 0x02
   1128a:	c1 82       	std	Z+1, r12	; 0x01
   1128c:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <sprintf_P>
   11290:	31 c0       	rjmp	.+98     	; 0x112f4 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   11292:	9c 01       	movw	r18, r24
   11294:	20 56       	subi	r18, 0x60	; 96
   11296:	31 09       	sbc	r19, r1
   11298:	20 31       	cpi	r18, 0x10	; 16
   1129a:	31 05       	cpc	r19, r1
   1129c:	28 f0       	brcs	.+10     	; 0x112a8 <gpib_trace_display+0x1de>
   1129e:	e2 e8       	ldi	r30, 0x82	; 130
   112a0:	f1 e0       	ldi	r31, 0x01	; 1
   112a2:	00 e0       	ldi	r16, 0x00	; 0
   112a4:	10 e0       	ldi	r17, 0x00	; 0
   112a6:	0b c0       	rjmp	.+22     	; 0x112be <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   112a8:	0f 71       	andi	r16, 0x1F	; 31
   112aa:	11 27       	eor	r17, r17
   112ac:	ed b7       	in	r30, 0x3d	; 61
   112ae:	fe b7       	in	r31, 0x3e	; 62
   112b0:	17 83       	std	Z+7, r17	; 0x07
   112b2:	06 83       	std	Z+6, r16	; 0x06
   112b4:	82 e0       	ldi	r24, 0x02	; 2
   112b6:	90 e1       	ldi	r25, 0x10	; 16
   112b8:	e3 cf       	rjmp	.-58     	; 0x11280 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   112ba:	0f 5f       	subi	r16, 0xFF	; 255
   112bc:	1f 4f       	sbci	r17, 0xFF	; 255
   112be:	20 81       	ld	r18, Z
   112c0:	31 81       	ldd	r19, Z+1	; 0x01
   112c2:	2f 3f       	cpi	r18, 0xFF	; 255
   112c4:	4f ef       	ldi	r20, 0xFF	; 255
   112c6:	34 07       	cpc	r19, r20
   112c8:	a9 f0       	breq	.+42     	; 0x112f4 <gpib_trace_display+0x22a>
   112ca:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   112cc:	82 17       	cp	r24, r18
   112ce:	93 07       	cpc	r25, r19
   112d0:	a1 f7       	brne	.-24     	; 0x112ba <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   112d2:	69 e6       	ldi	r22, 0x69	; 105
   112d4:	74 e0       	ldi	r23, 0x04	; 4
   112d6:	c6 01       	movw	r24, r12
   112d8:	0e 94 42 31 	call	0x6284	; 0x6284 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   112dc:	f8 01       	movw	r30, r16
   112de:	ee 0f       	add	r30, r30
   112e0:	ff 1f       	adc	r31, r31
   112e2:	ee 0f       	add	r30, r30
   112e4:	ff 1f       	adc	r31, r31
   112e6:	ee 57       	subi	r30, 0x7E	; 126
   112e8:	fe 4f       	sbci	r31, 0xFE	; 254
   112ea:	62 81       	ldd	r22, Z+2	; 0x02
   112ec:	73 81       	ldd	r23, Z+3	; 0x03
   112ee:	c6 01       	movw	r24, r12
   112f0:	0e 94 42 31 	call	0x6284	; 0x6284 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   112f4:	20 91 68 19 	lds	r18, 0x1968	; 0x801968 <gpib_log_fp>
   112f8:	30 91 69 19 	lds	r19, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   112fc:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
   11300:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
   11304:	23 2b       	or	r18, r19
   11306:	21 f4       	brne	.+8      	; 0x11310 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   11308:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   1130c:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11310:	20 91 68 19 	lds	r18, 0x1968	; 0x801968 <gpib_log_fp>
   11314:	30 91 69 19 	lds	r19, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   11318:	82 17       	cp	r24, r18
   1131a:	93 07       	cpc	r25, r19
   1131c:	19 f0       	breq	.+6      	; 0x11324 <gpib_trace_display+0x25a>
        puts(str);
   1131e:	c7 01       	movw	r24, r14
   11320:	0e 94 85 76 	call	0xed0a	; 0xed0a <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   11324:	ed b7       	in	r30, 0x3d	; 61
   11326:	fe b7       	in	r31, 0x3e	; 62
   11328:	f6 82       	std	Z+6, r15	; 0x06
   1132a:	e5 82       	std	Z+5, r14	; 0x05
   1132c:	86 e6       	ldi	r24, 0x66	; 102
   1132e:	9d e0       	ldi	r25, 0x0D	; 13
   11330:	94 83       	std	Z+4, r25	; 0x04
   11332:	83 83       	std	Z+3, r24	; 0x03
   11334:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <gpib_log_fp>
   11338:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   1133c:	92 83       	std	Z+2, r25	; 0x02
   1133e:	81 83       	std	Z+1, r24	; 0x01
   11340:	0e 94 2d 7e 	call	0xfc5a	; 0xfc5a <fprintf>
}
   11344:	c7 57       	subi	r28, 0x77	; 119
   11346:	df 4f       	sbci	r29, 0xFF	; 255
   11348:	ec e0       	ldi	r30, 0x0C	; 12
   1134a:	0c 94 d5 e6 	jmp	0x1cdaa	; 0x1cdaa <__epilogue_restores__+0xc>

0001134e <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   1134e:	af 92       	push	r10
   11350:	bf 92       	push	r11
   11352:	cf 92       	push	r12
   11354:	df 92       	push	r13
   11356:	ef 92       	push	r14
   11358:	ff 92       	push	r15
   1135a:	0f 93       	push	r16
   1135c:	1f 93       	push	r17
   1135e:	cf 93       	push	r28
   11360:	00 d0       	rcall	.+0      	; 0x11362 <gpib_read_byte+0x14>
   11362:	00 d0       	rcall	.+0      	; 0x11364 <gpib_read_byte+0x16>
   11364:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   11366:	20 91 67 19 	lds	r18, 0x1967	; 0x801967 <gpib_unread_f>
   1136a:	22 23       	and	r18, r18
   1136c:	39 f0       	breq	.+14     	; 0x1137c <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   1136e:	10 92 67 19 	sts	0x1967, r1	; 0x801967 <gpib_unread_f>
        return(gpib_unread_data);
   11372:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <gpib_unread_data>
   11376:	90 91 fb 1e 	lds	r25, 0x1EFB	; 0x801efb <gpib_unread_data+0x1>
   1137a:	e0 c0       	rjmp	.+448    	; 0x1153c <gpib_read_byte+0x1ee>
   1137c:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   1137e:	81 e0       	ldi	r24, 0x01	; 1
   11380:	05 dc       	rcall	.-2038   	; 0x10b8c <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   11382:	c1 14       	cp	r12, r1
   11384:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   11386:	51 f0       	breq	.+20     	; 0x1139c <gpib_read_byte+0x4e>
   11388:	fa dc       	rcall	.-1548   	; 0x10d7e <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   1138a:	7c 01       	movw	r14, r24
   1138c:	08 dd       	rcall	.-1520   	; 0x10d9e <gpib_handshake_pin_read>
   1138e:	e8 2a       	or	r14, r24
   11390:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   11392:	62 e0       	ldi	r22, 0x02	; 2
   11394:	70 e0       	ldi	r23, 0x00	; 0
   11396:	c7 01       	movw	r24, r14
   11398:	98 de       	rcall	.-720    	; 0x110ca <gpib_trace_display>
   1139a:	02 c0       	rjmp	.+4      	; 0x113a0 <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   1139c:	e1 2c       	mov	r14, r1
   1139e:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   113a0:	64 ef       	ldi	r22, 0xF4	; 244
   113a2:	71 e0       	ldi	r23, 0x01	; 1
   113a4:	80 e0       	ldi	r24, 0x00	; 0
   113a6:	90 e0       	ldi	r25, 0x00	; 0
   113a8:	af db       	rcall	.-2210   	; 0x10b08 <gpib_timeout_set>
    rx_state = GPIB_RX_START;
   113aa:	c0 e0       	ldi	r28, 0x00	; 0
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   113ac:	00 e0       	ldi	r16, 0x00	; 0
   113ae:	10 e0       	ldi	r17, 0x00	; 0
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   113b0:	0e 94 f5 e1 	call	0x1c3ea	; 0x1c3ea <gpib_user_task>

        if(uart_keyhit(0))
   113b4:	80 e0       	ldi	r24, 0x00	; 0
   113b6:	0e 94 45 2a 	call	0x548a	; 0x548a <uart_keyhit>
   113ba:	89 2b       	or	r24, r25
   113bc:	09 f0       	breq	.+2      	; 0x113c0 <gpib_read_byte+0x72>
   113be:	9c c0       	rjmp	.+312    	; 0x114f8 <gpib_read_byte+0x1aa>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   113c0:	4c 99       	sbic	0x09, 4	; 9
   113c2:	15 c0       	rjmp	.+42     	; 0x113ee <gpib_read_byte+0xa0>
        {
            ch |= IFC_FLAG;
   113c4:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   113c6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113ca:	80 ff       	sbrs	r24, 0
   113cc:	0e c0       	rjmp	.+28     	; 0x113ea <gpib_read_byte+0x9c>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   113ce:	8c 2f       	mov	r24, r28
   113d0:	90 e0       	ldi	r25, 0x00	; 0
   113d2:	ed b7       	in	r30, 0x3d	; 61
   113d4:	fe b7       	in	r31, 0x3e	; 62
   113d6:	95 83       	std	Z+5, r25	; 0x05
   113d8:	84 83       	std	Z+4, r24	; 0x04
   113da:	82 e3       	ldi	r24, 0x32	; 50
   113dc:	90 e1       	ldi	r25, 0x10	; 16
   113de:	a0 e0       	ldi	r26, 0x00	; 0
   113e0:	81 83       	std	Z+1, r24	; 0x01
   113e2:	92 83       	std	Z+2, r25	; 0x02
   113e4:	a3 83       	std	Z+3, r26	; 0x03
   113e6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            gpib_bus_init();
   113ea:	98 db       	rcall	.-2256   	; 0x10b1c <gpib_bus_init>
   113ec:	85 c0       	rjmp	.+266    	; 0x114f8 <gpib_read_byte+0x1aa>
            break;
        }

        switch(rx_state)
   113ee:	c2 30       	cpi	r28, 0x02	; 2
   113f0:	31 f1       	breq	.+76     	; 0x1143e <gpib_read_byte+0xf0>
   113f2:	28 f4       	brcc	.+10     	; 0x113fe <gpib_read_byte+0xb0>
   113f4:	cc 23       	and	r28, r28
   113f6:	69 f0       	breq	.+26     	; 0x11412 <gpib_read_byte+0xc4>
   113f8:	c1 30       	cpi	r28, 0x01	; 1
   113fa:	c9 f0       	breq	.+50     	; 0x1142e <gpib_read_byte+0xe0>
   113fc:	63 c0       	rjmp	.+198    	; 0x114c4 <gpib_read_byte+0x176>
   113fe:	c5 30       	cpi	r28, 0x05	; 5
   11400:	09 f4       	brne	.+2      	; 0x11404 <gpib_read_byte+0xb6>
   11402:	54 c0       	rjmp	.+168    	; 0x114ac <gpib_read_byte+0x15e>
   11404:	c7 30       	cpi	r28, 0x07	; 7
   11406:	09 f4       	brne	.+2      	; 0x1140a <gpib_read_byte+0xbc>
   11408:	58 c0       	rjmp	.+176    	; 0x114ba <gpib_read_byte+0x16c>
   1140a:	c4 30       	cpi	r28, 0x04	; 4
   1140c:	09 f0       	breq	.+2      	; 0x11410 <gpib_read_byte+0xc2>
   1140e:	5a c0       	rjmp	.+180    	; 0x114c4 <gpib_read_byte+0x176>
   11410:	3e c0       	rjmp	.+124    	; 0x1148e <gpib_read_byte+0x140>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   11412:	19 9b       	sbis	0x03, 1	; 3
   11414:	43 c0       	rjmp	.+134    	; 0x1149c <gpib_read_byte+0x14e>
   11416:	fd e0       	ldi	r31, 0x0D	; 13
   11418:	fa 95       	dec	r31
   1141a:	f1 f7       	brne	.-4      	; 0x11418 <gpib_read_byte+0xca>
   1141c:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   1141e:	52 98       	cbi	0x0a, 2	; 10
   11420:	5a 9a       	sbi	0x0b, 2	; 11
   11422:	8d e0       	ldi	r24, 0x0D	; 13
   11424:	8a 95       	dec	r24
   11426:	f1 f7       	brne	.-4      	; 0x11424 <gpib_read_byte+0xd6>
   11428:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   1142a:	c1 e0       	ldi	r28, 0x01	; 1
   1142c:	37 c0       	rjmp	.+110    	; 0x1149c <gpib_read_byte+0x14e>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   1142e:	19 99       	sbic	0x03, 1	; 3
   11430:	80 c0       	rjmp	.+256    	; 0x11532 <gpib_read_byte+0x1e4>
   11432:	ed e0       	ldi	r30, 0x0D	; 13
   11434:	ea 95       	dec	r30
   11436:	f1 f7       	brne	.-4      	; 0x11434 <gpib_read_byte+0xe6>
   11438:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   1143a:	c2 e0       	ldi	r28, 0x02	; 2
   1143c:	7a c0       	rjmp	.+244    	; 0x11532 <gpib_read_byte+0x1e4>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   1143e:	5a 98       	cbi	0x0b, 2	; 11
   11440:	52 9a       	sbi	0x0a, 2	; 10
   11442:	fd e0       	ldi	r31, 0x0D	; 13
   11444:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   11446:	f1 f7       	brne	.-4      	; 0x11444 <gpib_read_byte+0xf6>
   11448:	00 00       	nop
   1144a:	93 dc       	rcall	.-1754   	; 0x10d72 <gpib_bus_read>
   1144c:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   1144e:	b1 2c       	mov	r11, r1
   11450:	96 dc       	rcall	.-1748   	; 0x10d7e <gpib_control_pin_read>
   11452:	7c 01       	movw	r14, r24
   11454:	08 2b       	or	r16, r24
                ch |= control_last;
   11456:	19 2b       	or	r17, r25
   11458:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   1145a:	1b 29       	or	r17, r11
   1145c:	c1 14       	cp	r12, r1
   1145e:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   11460:	49 f0       	breq	.+18     	; 0x11474 <gpib_read_byte+0x126>
   11462:	9d dc       	rcall	.-1734   	; 0x10d9e <gpib_handshake_pin_read>
   11464:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   11466:	f9 2a       	or	r15, r25
   11468:	61 e0       	ldi	r22, 0x01	; 1
   1146a:	70 e0       	ldi	r23, 0x00	; 0
   1146c:	c5 01       	movw	r24, r10
   1146e:	8e 29       	or	r24, r14
   11470:	9f 29       	or	r25, r15
   11472:	2b de       	rcall	.-938    	; 0x110ca <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   11474:	53 98       	cbi	0x0a, 3	; 10
   11476:	5b 9a       	sbi	0x0b, 3	; 11
   11478:	8d e0       	ldi	r24, 0x0D	; 13
   1147a:	8a 95       	dec	r24
   1147c:	f1 f7       	brne	.-4      	; 0x1147a <gpib_read_byte+0x12c>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   1147e:	00 00       	nop
   11480:	64 ef       	ldi	r22, 0xF4	; 244
   11482:	71 e0       	ldi	r23, 0x01	; 1
   11484:	80 e0       	ldi	r24, 0x00	; 0
   11486:	90 e0       	ldi	r25, 0x00	; 0
   11488:	3f db       	rcall	.-2434   	; 0x10b08 <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1148a:	c4 e0       	ldi	r28, 0x04	; 4
   1148c:	52 c0       	rjmp	.+164    	; 0x11532 <gpib_read_byte+0x1e4>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   1148e:	19 9b       	sbis	0x03, 1	; 3
   11490:	05 c0       	rjmp	.+10     	; 0x1149c <gpib_read_byte+0x14e>
   11492:	ed e0       	ldi	r30, 0x0D	; 13
   11494:	ea 95       	dec	r30
   11496:	f1 f7       	brne	.-4      	; 0x11494 <gpib_read_byte+0x146>
   11498:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   1149a:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1149c:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   114a0:	88 23       	and	r24, r24
   114a2:	09 f4       	brne	.+2      	; 0x114a6 <gpib_read_byte+0x158>
   114a4:	46 c0       	rjmp	.+140    	; 0x11532 <gpib_read_byte+0x1e4>
                {
                    ch |= TIMEOUT_FLAG;
   114a6:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   114a8:	c7 e0       	ldi	r28, 0x07	; 7
   114aa:	43 c0       	rjmp	.+134    	; 0x11532 <gpib_read_byte+0x1e4>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   114ac:	5b 98       	cbi	0x0b, 3	; 11
   114ae:	53 9a       	sbi	0x0a, 3	; 10
   114b0:	fd e0       	ldi	r31, 0x0D	; 13
   114b2:	fa 95       	dec	r31
   114b4:	f1 f7       	brne	.-4      	; 0x114b2 <gpib_read_byte+0x164>
   114b6:	00 00       	nop
   114b8:	09 c0       	rjmp	.+18     	; 0x114cc <gpib_read_byte+0x17e>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   114ba:	5a 98       	cbi	0x0b, 2	; 11
   114bc:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   114be:	5b 98       	cbi	0x0b, 3	; 11
   114c0:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   114c2:	04 c0       	rjmp	.+8      	; 0x114cc <gpib_read_byte+0x17e>
   114c4:	c1 14       	cp	r12, r1
   114c6:	d1 04       	cpc	r13, r1
   114c8:	91 f0       	breq	.+36     	; 0x114ee <gpib_read_byte+0x1a0>
   114ca:	04 c0       	rjmp	.+8      	; 0x114d4 <gpib_read_byte+0x186>
   114cc:	c1 14       	cp	r12, r1
   114ce:	d1 04       	cpc	r13, r1
   114d0:	99 f0       	breq	.+38     	; 0x114f8 <gpib_read_byte+0x1aa>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   114d2:	c8 e0       	ldi	r28, 0x08	; 8
   114d4:	54 dc       	rcall	.-1880   	; 0x10d7e <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   114d6:	5c 01       	movw	r10, r24
   114d8:	62 dc       	rcall	.-1852   	; 0x10d9e <gpib_handshake_pin_read>
   114da:	a8 2a       	or	r10, r24
   114dc:	b9 2a       	or	r11, r25
            if(control_last != control)
   114de:	ae 14       	cp	r10, r14
   114e0:	bf 04       	cpc	r11, r15
   114e2:	31 f0       	breq	.+12     	; 0x114f0 <gpib_read_byte+0x1a2>
            {
                gpib_trace_display(control, TRACE_BUS);
   114e4:	62 e0       	ldi	r22, 0x02	; 2
   114e6:	70 e0       	ldi	r23, 0x00	; 0
   114e8:	c5 01       	movw	r24, r10
   114ea:	ef dd       	rcall	.-1058   	; 0x110ca <gpib_trace_display>
   114ec:	01 c0       	rjmp	.+2      	; 0x114f0 <gpib_read_byte+0x1a2>
   114ee:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   114f0:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   114f2:	11 f0       	breq	.+4      	; 0x114f8 <gpib_read_byte+0x1aa>
   114f4:	75 01       	movw	r14, r10
   114f6:	5c cf       	rjmp	.-328    	; 0x113b0 <gpib_read_byte+0x62>
   114f8:	80 91 f4 1e 	lds	r24, 0x1EF4	; 0x801ef4 <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   114fc:	90 91 f5 1e 	lds	r25, 0x1EF5	; 0x801ef5 <current+0x1>
   11500:	90 93 f1 1c 	sts	0x1CF1, r25	; 0x801cf1 <lastcmd+0x1>
   11504:	80 93 f0 1c 	sts	0x1CF0, r24	; 0x801cf0 <lastcmd>
   11508:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   1150a:	88 27       	eor	r24, r24
   1150c:	90 7d       	andi	r25, 0xD0	; 208
   1150e:	89 2b       	or	r24, r25
   11510:	11 f4       	brne	.+4      	; 0x11516 <gpib_read_byte+0x1c8>
   11512:	12 fd       	sbrc	r17, 2
   11514:	05 c0       	rjmp	.+10     	; 0x11520 <gpib_read_byte+0x1d2>
   11516:	10 92 f5 1e 	sts	0x1EF5, r1	; 0x801ef5 <current+0x1>
        current = 0;
   1151a:	10 92 f4 1e 	sts	0x1EF4, r1	; 0x801ef4 <current>
   1151e:	07 c0       	rjmp	.+14     	; 0x1152e <gpib_read_byte+0x1e0>
   11520:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   11522:	8f 77       	andi	r24, 0x7F	; 127
   11524:	99 27       	eor	r25, r25
   11526:	90 93 f5 1e 	sts	0x1EF5, r25	; 0x801ef5 <current+0x1>
   1152a:	80 93 f4 1e 	sts	0x1EF4, r24	; 0x801ef4 <current>
   1152e:	c8 01       	movw	r24, r16
   11530:	05 c0       	rjmp	.+10     	; 0x1153c <gpib_read_byte+0x1ee>
   11532:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11534:	d1 04       	cpc	r13, r1
   11536:	09 f4       	brne	.+2      	; 0x1153a <gpib_read_byte+0x1ec>
   11538:	3b cf       	rjmp	.-394    	; 0x113b0 <gpib_read_byte+0x62>
   1153a:	cc cf       	rjmp	.-104    	; 0x114d4 <gpib_read_byte+0x186>
   1153c:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   1153e:	0f 90       	pop	r0
   11540:	0f 90       	pop	r0
   11542:	0f 90       	pop	r0
   11544:	0f 90       	pop	r0
   11546:	cf 91       	pop	r28
   11548:	1f 91       	pop	r17
   1154a:	0f 91       	pop	r16
   1154c:	ff 90       	pop	r15
   1154e:	ef 90       	pop	r14
   11550:	df 90       	pop	r13
   11552:	cf 90       	pop	r12
   11554:	bf 90       	pop	r11
   11556:	af 90       	pop	r10
   11558:	08 95       	ret

0001155a <gpib_decode>:
   1155a:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   1155c:	70 e0       	ldi	r23, 0x00	; 0
   1155e:	b5 cd       	rjmp	.-1174   	; 0x110ca <gpib_trace_display>
   11560:	08 95       	ret

00011562 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11562:	a7 e0       	ldi	r26, 0x07	; 7
   11564:	b0 e0       	ldi	r27, 0x00	; 0
   11566:	e7 eb       	ldi	r30, 0xB7	; 183
   11568:	fa e8       	ldi	r31, 0x8A	; 138
   1156a:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__+0x10>
   1156e:	5b 01       	movw	r10, r22
   11570:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11572:	fa 01       	movw	r30, r20
   11574:	20 81       	ld	r18, Z
   11576:	31 81       	ldd	r19, Z+1	; 0x01
   11578:	22 27       	eor	r18, r18
   1157a:	31 83       	std	Z+1, r19	; 0x01
   1157c:	20 83       	st	Z, r18

    if(!size)
   1157e:	67 2b       	or	r22, r23
   11580:	21 f0       	breq	.+8      	; 0x1158a <gpib_read_str+0x28>
   11582:	7c 01       	movw	r14, r24
   11584:	00 e0       	ldi	r16, 0x00	; 0
   11586:	10 e0       	ldi	r17, 0x00	; 0
   11588:	28 c0       	rjmp	.+80     	; 0x115da <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1158a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1158e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11592:	81 72       	andi	r24, 0x21	; 33
   11594:	91 70       	andi	r25, 0x01	; 1
   11596:	89 2b       	or	r24, r25
   11598:	09 f4       	brne	.+2      	; 0x1159c <gpib_read_str+0x3a>
   1159a:	7c c0       	rjmp	.+248    	; 0x11694 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   1159c:	89 ee       	ldi	r24, 0xE9	; 233
   1159e:	9f e0       	ldi	r25, 0x0F	; 15
   115a0:	a0 e0       	ldi	r26, 0x00	; 0
   115a2:	ed b7       	in	r30, 0x3d	; 61
   115a4:	fe b7       	in	r31, 0x3e	; 62
   115a6:	81 83       	std	Z+1, r24	; 0x01
   115a8:	92 83       	std	Z+2, r25	; 0x02
   115aa:	a3 83       	std	Z+3, r26	; 0x03
   115ac:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   115b0:	71 c0       	rjmp	.+226    	; 0x11694 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   115b2:	8c 27       	eor	r24, r28
   115b4:	9d 27       	eor	r25, r29
   115b6:	92 fd       	sbrc	r25, 2
   115b8:	2e c0       	rjmp	.+92     	; 0x11616 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   115ba:	ce 01       	movw	r24, r28
   115bc:	88 27       	eor	r24, r24
   115be:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   115c0:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   115c2:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   115c4:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   115c6:	f7 01       	movw	r30, r14
   115c8:	20 83       	st	Z, r18
        ++ind;
   115ca:	0f 5f       	subi	r16, 0xFF	; 255
   115cc:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   115ce:	89 2b       	or	r24, r25
   115d0:	09 f4       	brne	.+2      	; 0x115d4 <gpib_read_str+0x72>
   115d2:	3c c0       	rjmp	.+120    	; 0x1164c <gpib_read_str+0xea>
   115d4:	ff ef       	ldi	r31, 0xFF	; 255
   115d6:	ef 1a       	sub	r14, r31
   115d8:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   115da:	0a 15       	cp	r16, r10
   115dc:	1b 05       	cpc	r17, r11
   115de:	0c f0       	brlt	.+2      	; 0x115e2 <gpib_read_str+0x80>
   115e0:	3f c0       	rjmp	.+126    	; 0x11660 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   115e2:	80 e0       	ldi	r24, 0x00	; 0
   115e4:	90 e0       	ldi	r25, 0x00	; 0
   115e6:	b3 de       	rcall	.-666    	; 0x1134e <gpib_read_byte>
   115e8:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   115ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   115ee:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   115f2:	90 ff       	sbrs	r25, 0
   115f4:	02 c0       	rjmp	.+4      	; 0x115fa <gpib_read_str+0x98>
            gpib_decode(val);
   115f6:	ce 01       	movw	r24, r28
   115f8:	b0 df       	rcall	.-160    	; 0x1155a <gpib_decode>
#endif
        if(val & ERROR_MASK)
   115fa:	9e 01       	movw	r18, r28
   115fc:	22 27       	eor	r18, r18
   115fe:	30 7d       	andi	r19, 0xD0	; 208
   11600:	f6 01       	movw	r30, r12
   11602:	80 81       	ld	r24, Z
   11604:	91 81       	ldd	r25, Z+1	; 0x01
   11606:	21 15       	cp	r18, r1
   11608:	31 05       	cpc	r19, r1
   1160a:	99 f2       	breq	.-90     	; 0x115b2 <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   1160c:	82 2b       	or	r24, r18
   1160e:	93 2b       	or	r25, r19
   11610:	91 83       	std	Z+1, r25	; 0x01
   11612:	80 83       	st	Z, r24
            break;
   11614:	28 c0       	rjmp	.+80     	; 0x11666 <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11616:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1161a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1161e:	81 72       	andi	r24, 0x21	; 33
   11620:	91 70       	andi	r25, 0x01	; 1
   11622:	89 2b       	or	r24, r25
   11624:	81 f0       	breq	.+32     	; 0x11646 <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   11626:	ce 01       	movw	r24, r28
   11628:	99 27       	eor	r25, r25
   1162a:	ed b7       	in	r30, 0x3d	; 61
   1162c:	fe b7       	in	r31, 0x3e	; 62
   1162e:	97 83       	std	Z+7, r25	; 0x07
   11630:	86 83       	std	Z+6, r24	; 0x06
   11632:	15 83       	std	Z+5, r17	; 0x05
   11634:	04 83       	std	Z+4, r16	; 0x04
   11636:	8c eb       	ldi	r24, 0xBC	; 188
   11638:	9f e0       	ldi	r25, 0x0F	; 15
   1163a:	a0 e0       	ldi	r26, 0x00	; 0
   1163c:	81 83       	std	Z+1, r24	; 0x01
   1163e:	92 83       	std	Z+2, r25	; 0x02
   11640:	a3 83       	std	Z+3, r26	; 0x03
   11642:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            gpib_unread(val);
   11646:	ce 01       	movw	r24, r28
   11648:	6a db       	rcall	.-2348   	; 0x10d1e <gpib_unread>
            break;
   1164a:	0d c0       	rjmp	.+26     	; 0x11666 <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1164c:	d0 ff       	sbrs	r29, 0
   1164e:	c2 cf       	rjmp	.-124    	; 0x115d4 <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   11650:	f6 01       	movw	r30, r12
   11652:	80 81       	ld	r24, Z
   11654:	91 81       	ldd	r25, Z+1	; 0x01
   11656:	90 fd       	sbrc	r25, 0
   11658:	1f c0       	rjmp	.+62     	; 0x11698 <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   1165a:	91 60       	ori	r25, 0x01	; 1
   1165c:	91 83       	std	Z+1, r25	; 0x01
   1165e:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   11660:	0a 15       	cp	r16, r10
   11662:	1b 05       	cpc	r17, r11
   11664:	c9 f0       	breq	.+50     	; 0x11698 <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   11666:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1166a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1166e:	81 72       	andi	r24, 0x21	; 33
   11670:	99 27       	eor	r25, r25
   11672:	89 2b       	or	r24, r25
   11674:	89 f0       	breq	.+34     	; 0x11698 <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   11676:	ed b7       	in	r30, 0x3d	; 61
   11678:	fe b7       	in	r31, 0x3e	; 62
   1167a:	b7 82       	std	Z+7, r11	; 0x07
   1167c:	a6 82       	std	Z+6, r10	; 0x06
   1167e:	15 83       	std	Z+5, r17	; 0x05
   11680:	04 83       	std	Z+4, r16	; 0x04
   11682:	85 e9       	ldi	r24, 0x95	; 149
   11684:	9f e0       	ldi	r25, 0x0F	; 15
   11686:	a0 e0       	ldi	r26, 0x00	; 0
   11688:	81 83       	std	Z+1, r24	; 0x01
   1168a:	92 83       	std	Z+2, r25	; 0x02
   1168c:	a3 83       	std	Z+3, r26	; 0x03
   1168e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   11692:	02 c0       	rjmp	.+4      	; 0x11698 <gpib_read_str+0x136>
   11694:	00 e0       	ldi	r16, 0x00	; 0
   11696:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   11698:	c8 01       	movw	r24, r16
   1169a:	cd b7       	in	r28, 0x3d	; 61
   1169c:	de b7       	in	r29, 0x3e	; 62
   1169e:	27 96       	adiw	r28, 0x07	; 7
   116a0:	ea e0       	ldi	r30, 0x0A	; 10
   116a2:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__+0x10>

000116a6 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   116a6:	a7 e0       	ldi	r26, 0x07	; 7
   116a8:	b0 e0       	ldi	r27, 0x00	; 0
   116aa:	e9 e5       	ldi	r30, 0x59	; 89
   116ac:	fb e8       	ldi	r31, 0x8B	; 139
   116ae:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__+0x10>
   116b2:	d8 2f       	mov	r29, r24
   116b4:	c9 2f       	mov	r28, r25
   116b6:	7b 01       	movw	r14, r22
   116b8:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   116ba:	fa 01       	movw	r30, r20
   116bc:	80 81       	ld	r24, Z
   116be:	91 81       	ldd	r25, Z+1	; 0x01
   116c0:	88 27       	eor	r24, r24
   116c2:	91 83       	std	Z+1, r25	; 0x01
   116c4:	80 83       	st	Z, r24

    if(!size)
   116c6:	67 2b       	or	r22, r23
   116c8:	91 f4       	brne	.+36     	; 0x116ee <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   116ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   116ce:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   116d2:	81 72       	andi	r24, 0x21	; 33
   116d4:	91 70       	andi	r25, 0x01	; 1
   116d6:	89 2b       	or	r24, r25
   116d8:	51 f0       	breq	.+20     	; 0x116ee <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   116da:	8b e7       	ldi	r24, 0x7B	; 123
   116dc:	9f e0       	ldi	r25, 0x0F	; 15
   116de:	a0 e0       	ldi	r26, 0x00	; 0
   116e0:	ed b7       	in	r30, 0x3d	; 61
   116e2:	fe b7       	in	r31, 0x3e	; 62
   116e4:	81 83       	std	Z+1, r24	; 0x01
   116e6:	92 83       	std	Z+2, r25	; 0x02
   116e8:	a3 83       	std	Z+3, r26	; 0x03
   116ea:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   116ee:	80 e0       	ldi	r24, 0x00	; 0
   116f0:	4d da       	rcall	.-2918   	; 0x10b8c <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   116f2:	4e 9b       	sbis	0x09, 6	; 9
   116f4:	06 c0       	rjmp	.+12     	; 0x11702 <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   116f6:	64 ef       	ldi	r22, 0xF4	; 244
   116f8:	71 e0       	ldi	r23, 0x01	; 1
   116fa:	80 e0       	ldi	r24, 0x00	; 0
   116fc:	90 e0       	ldi	r25, 0x00	; 0
   116fe:	04 da       	rcall	.-3064   	; 0x10b08 <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   11700:	18 c0       	rjmp	.+48     	; 0x11732 <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   11702:	64 ef       	ldi	r22, 0xF4	; 244
   11704:	71 e0       	ldi	r23, 0x01	; 1
   11706:	80 e0       	ldi	r24, 0x00	; 0
   11708:	90 e0       	ldi	r25, 0x00	; 0
   1170a:	fe d9       	rcall	.-3076   	; 0x10b08 <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   1170c:	4e 99       	sbic	0x09, 6	; 9
   1170e:	f3 cf       	rjmp	.-26     	; 0x116f6 <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11710:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   11714:	88 23       	and	r24, r24
			{
				gpib_rx_init(1);
   11716:	d1 f3       	breq	.-12     	; 0x1170c <gpib_write_str+0x66>
   11718:	81 e0       	ldi	r24, 0x01	; 1
   1171a:	38 da       	rcall	.-2960   	; 0x10b8c <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1171c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11720:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11724:	85 70       	andi	r24, 0x05	; 5
   11726:	99 27       	eor	r25, r25
   11728:	89 2b       	or	r24, r25
   1172a:	d9 f0       	breq	.+54     	; 0x11762 <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   1172c:	8d e4       	ldi	r24, 0x4D	; 77
   1172e:	9f e0       	ldi	r25, 0x0F	; 15
   11730:	10 c0       	rjmp	.+32     	; 0x11752 <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   11732:	19 99       	sbic	0x03, 1	; 3
   11734:	1f c0       	rjmp	.+62     	; 0x11774 <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11736:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   1173a:	88 23       	and	r24, r24
   1173c:	d1 f3       	breq	.-12     	; 0x11732 <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1173e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11742:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11746:	85 70       	andi	r24, 0x05	; 5
   11748:	99 27       	eor	r25, r25
   1174a:	89 2b       	or	r24, r25
   1174c:	51 f0       	breq	.+20     	; 0x11762 <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   1174e:	83 e3       	ldi	r24, 0x33	; 51
   11750:	9f e0       	ldi	r25, 0x0F	; 15
   11752:	a0 e0       	ldi	r26, 0x00	; 0
   11754:	ed b7       	in	r30, 0x3d	; 61
   11756:	fe b7       	in	r31, 0x3e	; 62
   11758:	81 83       	std	Z+1, r24	; 0x01
   1175a:	92 83       	std	Z+2, r25	; 0x02
   1175c:	a3 83       	std	Z+3, r26	; 0x03
   1175e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   11762:	f8 01       	movw	r30, r16
   11764:	80 81       	ld	r24, Z
   11766:	91 81       	ldd	r25, Z+1	; 0x01
   11768:	90 6c       	ori	r25, 0xC0	; 192
   1176a:	91 83       	std	Z+1, r25	; 0x01
   1176c:	80 83       	st	Z, r24
			return(ind);
   1176e:	c0 e0       	ldi	r28, 0x00	; 0
   11770:	d0 e0       	ldi	r29, 0x00	; 0
   11772:	45 c0       	rjmp	.+138    	; 0x117fe <gpib_write_str+0x158>
   11774:	cd 2e       	mov	r12, r29
   11776:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   11778:	c0 e0       	ldi	r28, 0x00	; 0
   1177a:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   1177c:	ce 15       	cp	r28, r14
   1177e:	df 05       	cpc	r29, r15
   11780:	1c f5       	brge	.+70     	; 0x117c8 <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11782:	21 96       	adiw	r28, 0x01	; 1
   11784:	f6 01       	movw	r30, r12
   11786:	81 91       	ld	r24, Z+
   11788:	6f 01       	movw	r12, r30
   1178a:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   1178c:	f8 01       	movw	r30, r16
   1178e:	20 81       	ld	r18, Z
   11790:	31 81       	ldd	r19, Z+1	; 0x01
   11792:	30 ff       	sbrs	r19, 0
   11794:	04 c0       	rjmp	.+8      	; 0x1179e <gpib_write_str+0xf8>
   11796:	ec 16       	cp	r14, r28
   11798:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   1179a:	09 f4       	brne	.+2      	; 0x1179e <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   1179c:	91 60       	ori	r25, 0x01	; 1
   1179e:	0b db       	rcall	.-2538   	; 0x10db6 <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   117a0:	5c 01       	movw	r10, r24
   117a2:	aa 24       	eor	r10, r10
   117a4:	f0 ed       	ldi	r31, 0xD0	; 208
   117a6:	bf 22       	and	r11, r31
   117a8:	f8 01       	movw	r30, r16
   117aa:	20 81       	ld	r18, Z
   117ac:	31 81       	ldd	r19, Z+1	; 0x01
   117ae:	2a 29       	or	r18, r10
   117b0:	3b 29       	or	r19, r11
   117b2:	31 83       	std	Z+1, r19	; 0x01
   117b4:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   117b6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   117ba:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   117be:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   117c0:	cc de       	rcall	.-616    	; 0x1155a <gpib_decode>
   117c2:	a1 14       	cp	r10, r1
   117c4:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   117c6:	d1 f2       	breq	.-76     	; 0x1177c <gpib_write_str+0xd6>
   117c8:	81 e0       	ldi	r24, 0x01	; 1
   117ca:	e0 d9       	rcall	.-3136   	; 0x10b8c <gpib_rx_init>

    if ( ind != size )
   117cc:	ce 15       	cp	r28, r14
   117ce:	df 05       	cpc	r29, r15
   117d0:	b1 f0       	breq	.+44     	; 0x117fe <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   117d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117d6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117da:	81 72       	andi	r24, 0x21	; 33
   117dc:	91 70       	andi	r25, 0x01	; 1
   117de:	89 2b       	or	r24, r25
   117e0:	71 f0       	breq	.+28     	; 0x117fe <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   117e2:	ed b7       	in	r30, 0x3d	; 61
   117e4:	fe b7       	in	r31, 0x3e	; 62
   117e6:	f7 82       	std	Z+7, r15	; 0x07
   117e8:	e6 82       	std	Z+6, r14	; 0x06
   117ea:	d5 83       	std	Z+5, r29	; 0x05
   117ec:	c4 83       	std	Z+4, r28	; 0x04
   117ee:	8b e0       	ldi	r24, 0x0B	; 11
   117f0:	9f e0       	ldi	r25, 0x0F	; 15
   117f2:	a0 e0       	ldi	r26, 0x00	; 0
   117f4:	81 83       	std	Z+1, r24	; 0x01
   117f6:	92 83       	std	Z+2, r25	; 0x02
   117f8:	a3 83       	std	Z+3, r26	; 0x03
   117fa:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    }
    return(ind);
}
   117fe:	ce 01       	movw	r24, r28
   11800:	cd b7       	in	r28, 0x3d	; 61
   11802:	de b7       	in	r29, 0x3e	; 62
   11804:	27 96       	adiw	r28, 0x07	; 7
   11806:	ea e0       	ldi	r30, 0x0A	; 10
   11808:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__+0x10>

0001180c <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   1180c:	ad b7       	in	r26, 0x3d	; 61
   1180e:	be b7       	in	r27, 0x3e	; 62
   11810:	17 97       	sbiw	r26, 0x07	; 7
   11812:	0f b6       	in	r0, 0x3f	; 63
   11814:	f8 94       	cli
   11816:	be bf       	out	0x3e, r27	; 62
   11818:	0f be       	out	0x3f, r0	; 63
   1181a:	ad bf       	out	0x3d, r26	; 61
   1181c:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   11820:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   11824:	88 eb       	ldi	r24, 0xB8	; 184
   11826:	91 e0       	ldi	r25, 0x01	; 1
   11828:	0e 94 a8 9d 	call	0x13b50	; 0x13b50 <Read_Config>
   1182c:	18 16       	cp	r1, r24
   1182e:	19 06       	cpc	r1, r25
   11830:	8c f4       	brge	.+34     	; 0x11854 <gpib_file_init+0x48>
   11832:	ed b7       	in	r30, 0x3d	; 61
   11834:	fe b7       	in	r31, 0x3e	; 62
   11836:	97 83       	std	Z+7, r25	; 0x07
   11838:	86 83       	std	Z+6, r24	; 0x06
   1183a:	88 eb       	ldi	r24, 0xB8	; 184
   1183c:	91 e0       	ldi	r25, 0x01	; 1
   1183e:	95 83       	std	Z+5, r25	; 0x05
   11840:	84 83       	std	Z+4, r24	; 0x04
   11842:	8f ed       	ldi	r24, 0xDF	; 223
   11844:	94 e1       	ldi	r25, 0x14	; 20
   11846:	a0 e0       	ldi	r26, 0x00	; 0
   11848:	81 83       	std	Z+1, r24	; 0x01
   1184a:	92 83       	std	Z+2, r25	; 0x02
   1184c:	a3 83       	std	Z+3, r26	; 0x03
   1184e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   11852:	10 c0       	rjmp	.+32     	; 0x11874 <gpib_file_init+0x68>
   11854:	89 2b       	or	r24, r25
   11856:	71 f0       	breq	.+28     	; 0x11874 <gpib_file_init+0x68>
   11858:	88 eb       	ldi	r24, 0xB8	; 184
   1185a:	91 e0       	ldi	r25, 0x01	; 1
   1185c:	ed b7       	in	r30, 0x3d	; 61
   1185e:	fe b7       	in	r31, 0x3e	; 62
   11860:	95 83       	std	Z+5, r25	; 0x05
   11862:	84 83       	std	Z+4, r24	; 0x04
   11864:	8e ec       	ldi	r24, 0xCE	; 206
   11866:	94 e1       	ldi	r25, 0x14	; 20
   11868:	a0 e0       	ldi	r26, 0x00	; 0
   1186a:	81 83       	std	Z+1, r24	; 0x01
   1186c:	92 83       	std	Z+2, r25	; 0x02
   1186e:	a3 83       	std	Z+3, r26	; 0x03
   11870:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   11874:	0e 94 b0 99 	call	0x13360	; 0x13360 <set_Config_Defaults>
   11878:	0e 94 d0 6f 	call	0xdfa0	; 0xdfa0 <mmc_wp_status>
   1187c:	89 2b       	or	r24, r25
   1187e:	51 f0       	breq	.+20     	; 0x11894 <gpib_file_init+0x88>
   11880:	85 eb       	ldi	r24, 0xB5	; 181
   11882:	94 e1       	ldi	r25, 0x14	; 20
   11884:	a0 e0       	ldi	r26, 0x00	; 0
   11886:	ed b7       	in	r30, 0x3d	; 61
   11888:	fe b7       	in	r31, 0x3e	; 62
   1188a:	81 83       	std	Z+1, r24	; 0x01
   1188c:	92 83       	std	Z+2, r25	; 0x02
   1188e:	a3 83       	std	Z+3, r26	; 0x03
   11890:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   11894:	ad b7       	in	r26, 0x3d	; 61
   11896:	be b7       	in	r27, 0x3e	; 62
   11898:	17 96       	adiw	r26, 0x07	; 7
   1189a:	0f b6       	in	r0, 0x3f	; 63
   1189c:	f8 94       	cli
   1189e:	be bf       	out	0x3e, r27	; 62
   118a0:	0f be       	out	0x3f, r0	; 63
   118a2:	ad bf       	out	0x3d, r26	; 61
   118a4:	08 95       	ret

000118a6 <SS80_is_MLA>:
   118a6:	40 e2       	ldi	r20, 0x20	; 32
   118a8:	50 e0       	ldi	r21, 0x00	; 0
   118aa:	bc 01       	movw	r22, r24
   118ac:	83 e0       	ldi	r24, 0x03	; 3
   118ae:	90 e0       	ldi	r25, 0x00	; 0
   118b0:	0e 94 e8 96 	call	0x12dd0	; 0x12dd0 <find_device>
   118b4:	8f 3f       	cpi	r24, 0xFF	; 255
   118b6:	31 f0       	breq	.+12     	; 0x118c4 <SS80_is_MLA+0x1e>
   118b8:	0e 94 11 97 	call	0x12e22	; 0x12e22 <set_active_device>
   118bc:	08 2e       	mov	r0, r24
   118be:	00 0c       	add	r0, r0
   118c0:	99 0b       	sbc	r25, r25
   118c2:	08 95       	ret
   118c4:	80 e0       	ldi	r24, 0x00	; 0
   118c6:	90 e0       	ldi	r25, 0x00	; 0
   118c8:	08 95       	ret

000118ca <SS80_is_MTA>:
   118ca:	40 e4       	ldi	r20, 0x40	; 64
   118cc:	50 e0       	ldi	r21, 0x00	; 0
   118ce:	bc 01       	movw	r22, r24
   118d0:	83 e0       	ldi	r24, 0x03	; 3
   118d2:	90 e0       	ldi	r25, 0x00	; 0
   118d4:	0e 94 e8 96 	call	0x12dd0	; 0x12dd0 <find_device>
   118d8:	8f 3f       	cpi	r24, 0xFF	; 255
   118da:	31 f0       	breq	.+12     	; 0x118e8 <SS80_is_MTA+0x1e>
   118dc:	0e 94 11 97 	call	0x12e22	; 0x12e22 <set_active_device>
   118e0:	08 2e       	mov	r0, r24
   118e2:	00 0c       	add	r0, r0
   118e4:	99 0b       	sbc	r25, r25
   118e6:	08 95       	ret
   118e8:	80 e0       	ldi	r24, 0x00	; 0
   118ea:	90 e0       	ldi	r25, 0x00	; 0
   118ec:	08 95       	ret

000118ee <SS80_is_MSA>:
   118ee:	40 e6       	ldi	r20, 0x60	; 96
   118f0:	50 e0       	ldi	r21, 0x00	; 0
   118f2:	bc 01       	movw	r22, r24
   118f4:	83 e0       	ldi	r24, 0x03	; 3
   118f6:	90 e0       	ldi	r25, 0x00	; 0
   118f8:	0e 94 e8 96 	call	0x12dd0	; 0x12dd0 <find_device>
   118fc:	8f 3f       	cpi	r24, 0xFF	; 255
   118fe:	31 f0       	breq	.+12     	; 0x1190c <SS80_is_MSA+0x1e>
   11900:	0e 94 11 97 	call	0x12e22	; 0x12e22 <set_active_device>
   11904:	08 2e       	mov	r0, r24
   11906:	00 0c       	add	r0, r0
   11908:	99 0b       	sbc	r25, r25
   1190a:	08 95       	ret
   1190c:	80 e0       	ldi	r24, 0x00	; 0
   1190e:	90 e0       	ldi	r25, 0x00	; 0
   11910:	08 95       	ret

00011912 <AMIGO_is_MLA>:
   11912:	40 e2       	ldi	r20, 0x20	; 32
   11914:	50 e0       	ldi	r21, 0x00	; 0
   11916:	bc 01       	movw	r22, r24
   11918:	81 e0       	ldi	r24, 0x01	; 1
   1191a:	90 e0       	ldi	r25, 0x00	; 0
   1191c:	0e 94 e8 96 	call	0x12dd0	; 0x12dd0 <find_device>
   11920:	8f 3f       	cpi	r24, 0xFF	; 255
   11922:	31 f0       	breq	.+12     	; 0x11930 <AMIGO_is_MLA+0x1e>
   11924:	0e 94 11 97 	call	0x12e22	; 0x12e22 <set_active_device>
   11928:	08 2e       	mov	r0, r24
   1192a:	00 0c       	add	r0, r0
   1192c:	99 0b       	sbc	r25, r25
   1192e:	08 95       	ret
   11930:	80 e0       	ldi	r24, 0x00	; 0
   11932:	90 e0       	ldi	r25, 0x00	; 0
   11934:	08 95       	ret

00011936 <AMIGO_is_MTA>:
   11936:	40 e4       	ldi	r20, 0x40	; 64
   11938:	50 e0       	ldi	r21, 0x00	; 0
   1193a:	bc 01       	movw	r22, r24
   1193c:	81 e0       	ldi	r24, 0x01	; 1
   1193e:	90 e0       	ldi	r25, 0x00	; 0
   11940:	0e 94 e8 96 	call	0x12dd0	; 0x12dd0 <find_device>
   11944:	8f 3f       	cpi	r24, 0xFF	; 255
   11946:	31 f0       	breq	.+12     	; 0x11954 <AMIGO_is_MTA+0x1e>
   11948:	0e 94 11 97 	call	0x12e22	; 0x12e22 <set_active_device>
   1194c:	08 2e       	mov	r0, r24
   1194e:	00 0c       	add	r0, r0
   11950:	99 0b       	sbc	r25, r25
   11952:	08 95       	ret
   11954:	80 e0       	ldi	r24, 0x00	; 0
   11956:	90 e0       	ldi	r25, 0x00	; 0
   11958:	08 95       	ret

0001195a <AMIGO_is_MSA>:
   1195a:	40 e6       	ldi	r20, 0x60	; 96
   1195c:	50 e0       	ldi	r21, 0x00	; 0
   1195e:	bc 01       	movw	r22, r24
   11960:	81 e0       	ldi	r24, 0x01	; 1
   11962:	90 e0       	ldi	r25, 0x00	; 0
   11964:	0e 94 e8 96 	call	0x12dd0	; 0x12dd0 <find_device>
   11968:	8f 3f       	cpi	r24, 0xFF	; 255
   1196a:	31 f0       	breq	.+12     	; 0x11978 <AMIGO_is_MSA+0x1e>
   1196c:	0e 94 11 97 	call	0x12e22	; 0x12e22 <set_active_device>
   11970:	08 2e       	mov	r0, r24
   11972:	00 0c       	add	r0, r0
   11974:	99 0b       	sbc	r25, r25
   11976:	08 95       	ret
   11978:	80 e0       	ldi	r24, 0x00	; 0
   1197a:	90 e0       	ldi	r25, 0x00	; 0
   1197c:	08 95       	ret

0001197e <PRINTER_is_MLA>:
   1197e:	40 e2       	ldi	r20, 0x20	; 32
   11980:	50 e0       	ldi	r21, 0x00	; 0
   11982:	bc 01       	movw	r22, r24
   11984:	84 e0       	ldi	r24, 0x04	; 4
   11986:	90 e0       	ldi	r25, 0x00	; 0
   11988:	0e 94 e8 96 	call	0x12dd0	; 0x12dd0 <find_device>
   1198c:	8f 3f       	cpi	r24, 0xFF	; 255
   1198e:	31 f0       	breq	.+12     	; 0x1199c <PRINTER_is_MLA+0x1e>
   11990:	0e 94 11 97 	call	0x12e22	; 0x12e22 <set_active_device>
   11994:	08 2e       	mov	r0, r24
   11996:	00 0c       	add	r0, r0
   11998:	99 0b       	sbc	r25, r25
   1199a:	08 95       	ret
   1199c:	80 e0       	ldi	r24, 0x00	; 0
   1199e:	90 e0       	ldi	r25, 0x00	; 0
   119a0:	08 95       	ret

000119a2 <PRINTER_is_MTA>:
   119a2:	40 e4       	ldi	r20, 0x40	; 64
   119a4:	50 e0       	ldi	r21, 0x00	; 0
   119a6:	bc 01       	movw	r22, r24
   119a8:	84 e0       	ldi	r24, 0x04	; 4
   119aa:	90 e0       	ldi	r25, 0x00	; 0
   119ac:	0e 94 e8 96 	call	0x12dd0	; 0x12dd0 <find_device>
   119b0:	8f 3f       	cpi	r24, 0xFF	; 255
   119b2:	31 f0       	breq	.+12     	; 0x119c0 <PRINTER_is_MTA+0x1e>
   119b4:	0e 94 11 97 	call	0x12e22	; 0x12e22 <set_active_device>
   119b8:	08 2e       	mov	r0, r24
   119ba:	00 0c       	add	r0, r0
   119bc:	99 0b       	sbc	r25, r25
   119be:	08 95       	ret
   119c0:	80 e0       	ldi	r24, 0x00	; 0
   119c2:	90 e0       	ldi	r25, 0x00	; 0
   119c4:	08 95       	ret

000119c6 <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   119c6:	aa d8       	rcall	.-3756   	; 0x10b1c <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   119c8:	11 d9       	rcall	.-3550   	; 0x10bec <gpib_state_init>
   119ca:	0e 94 a3 ad 	call	0x15b46	; 0x15b46 <SS80_init>

    SS80_init();                                  // SS80 state init
   119ce:	0e 94 38 b3 	call	0x16670	; 0x16670 <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   119d2:	0c 94 63 be 	jmp	0x17cc6	; 0x17cc6 <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   119d6:	08 95       	ret

000119d8 <gpib_trace_task>:
   119d8:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   119da:	1f 93       	push	r17
   119dc:	cf 93       	push	r28
   119de:	df 93       	push	r29
   119e0:	00 d0       	rcall	.+0      	; 0x119e2 <gpib_trace_task+0xa>
   119e2:	00 d0       	rcall	.+0      	; 0x119e4 <gpib_trace_task+0xc>
   119e4:	1f 92       	push	r1
   119e6:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   119e8:	00 97       	sbiw	r24, 0x00	; 0
   119ea:	09 f4       	brne	.+2      	; 0x119ee <gpib_trace_task+0x16>
   119ec:	44 c0       	rjmp	.+136    	; 0x11a76 <gpib_trace_task+0x9e>
   119ee:	fc 01       	movw	r30, r24
   119f0:	20 81       	ld	r18, Z
   119f2:	22 23       	and	r18, r18
   119f4:	09 f4       	brne	.+2      	; 0x119f8 <gpib_trace_task+0x20>
   119f6:	3f c0       	rjmp	.+126    	; 0x11a76 <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   119f8:	0e 94 0f 32 	call	0x641e	; 0x641e <skipspaces>
   119fc:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   119fe:	ed b7       	in	r30, 0x3d	; 61
   11a00:	fe b7       	in	r31, 0x3e	; 62
   11a02:	95 83       	std	Z+5, r25	; 0x05
   11a04:	84 83       	std	Z+4, r24	; 0x04
   11a06:	8b e9       	ldi	r24, 0x9B	; 155
   11a08:	94 e1       	ldi	r25, 0x14	; 20
   11a0a:	a0 e0       	ldi	r26, 0x00	; 0
   11a0c:	81 83       	std	Z+1, r24	; 0x01
   11a0e:	92 83       	std	Z+2, r25	; 0x02
   11a10:	a3 83       	std	Z+3, r26	; 0x03
   11a12:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        if(detail)
   11a16:	20 97       	sbiw	r28, 0x00	; 0
   11a18:	51 f0       	breq	.+20     	; 0x11a2e <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11a1a:	80 e7       	ldi	r24, 0x70	; 112
   11a1c:	94 e1       	ldi	r25, 0x14	; 20
   11a1e:	a0 e0       	ldi	r26, 0x00	; 0
   11a20:	ed b7       	in	r30, 0x3d	; 61
   11a22:	fe b7       	in	r31, 0x3e	; 62
   11a24:	81 83       	std	Z+1, r24	; 0x01
   11a26:	92 83       	std	Z+2, r25	; 0x02
   11a28:	a3 83       	std	Z+3, r26	; 0x03
   11a2a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        printf("Press ANY key to exit\n");
   11a2e:	89 e5       	ldi	r24, 0x59	; 89
   11a30:	94 e1       	ldi	r25, 0x14	; 20
   11a32:	a0 e0       	ldi	r26, 0x00	; 0
   11a34:	ed b7       	in	r30, 0x3d	; 61
   11a36:	fe b7       	in	r31, 0x3e	; 62
   11a38:	81 83       	std	Z+1, r24	; 0x01
   11a3a:	92 83       	std	Z+2, r25	; 0x02
   11a3c:	a3 83       	std	Z+3, r26	; 0x03
   11a3e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11a42:	6c e0       	ldi	r22, 0x0C	; 12
   11a44:	79 e0       	ldi	r23, 0x09	; 9
   11a46:	c8 01       	movw	r24, r16
   11a48:	0e 94 21 7e 	call	0xfc42	; 0xfc42 <fopen>
   11a4c:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   11a50:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11a54:	89 2b       	or	r24, r25
   11a56:	b9 f4       	brne	.+46     	; 0x11a86 <gpib_trace_task+0xae>
        {
            perror("open failed");
   11a58:	8a e9       	ldi	r24, 0x9A	; 154
   11a5a:	9d e0       	ldi	r25, 0x0D	; 13
   11a5c:	0e 94 52 78 	call	0xf0a4	; 0xf0a4 <perror>
            printf("exiting...\n");
   11a60:	8d e4       	ldi	r24, 0x4D	; 77
   11a62:	94 e1       	ldi	r25, 0x14	; 20
   11a64:	a0 e0       	ldi	r26, 0x00	; 0
   11a66:	ed b7       	in	r30, 0x3d	; 61
   11a68:	fe b7       	in	r31, 0x3e	; 62
   11a6a:	81 83       	std	Z+1, r24	; 0x01
   11a6c:	92 83       	std	Z+2, r25	; 0x02
   11a6e:	a3 83       	std	Z+3, r26	; 0x03
   11a70:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            return;
   11a74:	3d c0       	rjmp	.+122    	; 0x11af0 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   11a76:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
   11a7a:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
   11a7e:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   11a82:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   11a86:	9f df       	rcall	.-194    	; 0x119c6 <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   11a88:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <gpib_log_fp>
   11a8c:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   11a90:	ca da       	rcall	.-2668   	; 0x11026 <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11a92:	80 e0       	ldi	r24, 0x00	; 0
   11a94:	0e 94 45 2a 	call	0x548a	; 0x548a <uart_keyhit>
   11a98:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   11a9a:	31 f4       	brne	.+12     	; 0x11aa8 <gpib_trace_task+0xd0>
   11a9c:	ce 01       	movw	r24, r28
        if(!detail)
   11a9e:	57 dc       	rcall	.-1874   	; 0x1134e <gpib_read_byte>
   11aa0:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   11aa2:	b9 f7       	brne	.-18     	; 0x11a92 <gpib_trace_task+0xba>
   11aa4:	5a dd       	rcall	.-1356   	; 0x1155a <gpib_decode>
   11aa6:	f5 cf       	rjmp	.-22     	; 0x11a92 <gpib_trace_task+0xba>
    }

    printf("Done\n");
   11aa8:	87 e4       	ldi	r24, 0x47	; 71
   11aaa:	94 e1       	ldi	r25, 0x14	; 20
   11aac:	a0 e0       	ldi	r26, 0x00	; 0
   11aae:	ed b7       	in	r30, 0x3d	; 61
   11ab0:	fe b7       	in	r31, 0x3e	; 62
   11ab2:	81 83       	std	Z+1, r24	; 0x01
   11ab4:	92 83       	std	Z+2, r25	; 0x02
   11ab6:	a3 83       	std	Z+3, r26	; 0x03
   11ab8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    if(gpib_log_fp)
   11abc:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <gpib_log_fp>
   11ac0:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   11ac4:	00 97       	sbiw	r24, 0x00	; 0
   11ac6:	a1 f0       	breq	.+40     	; 0x11af0 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   11ac8:	0e 94 cb 7c 	call	0xf996	; 0xf996 <fclose>
        printf("Capturing Closed\n");
   11acc:	85 e3       	ldi	r24, 0x35	; 53
   11ace:	94 e1       	ldi	r25, 0x14	; 20
   11ad0:	a0 e0       	ldi	r26, 0x00	; 0
   11ad2:	ed b7       	in	r30, 0x3d	; 61
   11ad4:	fe b7       	in	r31, 0x3e	; 62
   11ad6:	81 83       	std	Z+1, r24	; 0x01
   11ad8:	92 83       	std	Z+2, r25	; 0x02
   11ada:	a3 83       	std	Z+3, r26	; 0x03
   11adc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        gpib_log_fp = stdout;
   11ae0:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
   11ae4:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
   11ae8:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   11aec:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>
    }
}
   11af0:	cd b7       	in	r28, 0x3d	; 61
   11af2:	de b7       	in	r29, 0x3e	; 62
   11af4:	25 96       	adiw	r28, 0x05	; 5
   11af6:	e4 e0       	ldi	r30, 0x04	; 4
   11af8:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

00011afc <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11afc:	ef 92       	push	r14
   11afe:	ff 92       	push	r15
   11b00:	0f 93       	push	r16
   11b02:	1f 93       	push	r17
   11b04:	cf 93       	push	r28
   11b06:	df 93       	push	r29
   11b08:	00 d0       	rcall	.+0      	; 0x11b0a <gpib_error_test+0xe>
   11b0a:	1f 92       	push	r1
   11b0c:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11b0e:	ec 01       	movw	r28, r24
   11b10:	cc 27       	eor	r28, r28
   11b12:	d0 7d       	andi	r29, 0xD0	; 208
   11b14:	20 97       	sbiw	r28, 0x00	; 0
   11b16:	61 f0       	breq	.+24     	; 0x11b30 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11b18:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11b1c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b20:	8d 72       	andi	r24, 0x2D	; 45
   11b22:	99 27       	eor	r25, r25
   11b24:	87 01       	movw	r16, r14
   11b26:	00 27       	eor	r16, r16
   11b28:	10 71       	andi	r17, 0x10	; 16
   11b2a:	89 2b       	or	r24, r25
   11b2c:	59 f4       	brne	.+22     	; 0x11b44 <gpib_error_test+0x48>
   11b2e:	17 c0       	rjmp	.+46     	; 0x11b5e <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11b30:	80 e0       	ldi	r24, 0x00	; 0
   11b32:	0e 94 45 2a 	call	0x548a	; 0x548a <uart_keyhit>
   11b36:	89 2b       	or	r24, r25
   11b38:	79 f7       	brne	.-34     	; 0x11b18 <gpib_error_test+0x1c>
   11b3a:	0e 94 ce 6e 	call	0xdd9c	; 0xdd9c <mmc_ins_status>
   11b3e:	01 97       	sbiw	r24, 0x01	; 1
   11b40:	59 f7       	brne	.-42     	; 0x11b18 <gpib_error_test+0x1c>
   11b42:	62 c0       	rjmp	.+196    	; 0x11c08 <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11b44:	01 15       	cp	r16, r1
   11b46:	11 05       	cpc	r17, r1
   11b48:	51 f0       	breq	.+20     	; 0x11b5e <gpib_error_test+0x62>
                printf("<IFC>\n");
   11b4a:	8e e2       	ldi	r24, 0x2E	; 46
   11b4c:	94 e1       	ldi	r25, 0x14	; 20
   11b4e:	a0 e0       	ldi	r26, 0x00	; 0
   11b50:	ed b7       	in	r30, 0x3d	; 61
   11b52:	fe b7       	in	r31, 0x3e	; 62
   11b54:	81 83       	std	Z+1, r24	; 0x01
   11b56:	92 83       	std	Z+2, r25	; 0x02
   11b58:	a3 83       	std	Z+3, r26	; 0x03
   11b5a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11b5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11b62:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b66:	8d 72       	andi	r24, 0x2D	; 45
   11b68:	99 27       	eor	r25, r25
   11b6a:	89 2b       	or	r24, r25
   11b6c:	c1 f0       	breq	.+48     	; 0x11b9e <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11b6e:	f6 fe       	sbrs	r15, 6
   11b70:	0a c0       	rjmp	.+20     	; 0x11b86 <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11b72:	83 e2       	ldi	r24, 0x23	; 35
   11b74:	94 e1       	ldi	r25, 0x14	; 20
   11b76:	a0 e0       	ldi	r26, 0x00	; 0
   11b78:	ed b7       	in	r30, 0x3d	; 61
   11b7a:	fe b7       	in	r31, 0x3e	; 62
   11b7c:	81 83       	std	Z+1, r24	; 0x01
   11b7e:	92 83       	std	Z+2, r25	; 0x02
   11b80:	a3 83       	std	Z+3, r26	; 0x03
   11b82:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            if(val & BUS_ERROR_FLAG)
   11b86:	d7 ff       	sbrs	r29, 7
   11b88:	0a c0       	rjmp	.+20     	; 0x11b9e <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11b8a:	8c e1       	ldi	r24, 0x1C	; 28
   11b8c:	94 e1       	ldi	r25, 0x14	; 20
   11b8e:	a0 e0       	ldi	r26, 0x00	; 0
   11b90:	ed b7       	in	r30, 0x3d	; 61
   11b92:	fe b7       	in	r31, 0x3e	; 62
   11b94:	81 83       	std	Z+1, r24	; 0x01
   11b96:	92 83       	std	Z+2, r25	; 0x02
   11b98:	a3 83       	std	Z+3, r26	; 0x03
   11b9a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        }

        if(uart_keyhit(0))
   11b9e:	80 e0       	ldi	r24, 0x00	; 0
   11ba0:	0e 94 45 2a 	call	0x548a	; 0x548a <uart_keyhit>
   11ba4:	89 2b       	or	r24, r25
   11ba6:	51 f0       	breq	.+20     	; 0x11bbc <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11ba8:	8f e0       	ldi	r24, 0x0F	; 15
   11baa:	94 e1       	ldi	r25, 0x14	; 20
   11bac:	a0 e0       	ldi	r26, 0x00	; 0
   11bae:	ed b7       	in	r30, 0x3d	; 61
   11bb0:	fe b7       	in	r31, 0x3e	; 62
   11bb2:	81 83       	std	Z+1, r24	; 0x01
   11bb4:	92 83       	std	Z+2, r25	; 0x02
   11bb6:	a3 83       	std	Z+3, r26	; 0x03
   11bb8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

        if( mmc_ins_status() != 1 )
   11bbc:	0e 94 ce 6e 	call	0xdd9c	; 0xdd9c <mmc_ins_status>
   11bc0:	01 97       	sbiw	r24, 0x01	; 1
   11bc2:	51 f0       	breq	.+20     	; 0x11bd8 <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11bc4:	8e ef       	ldi	r24, 0xFE	; 254
   11bc6:	93 e1       	ldi	r25, 0x13	; 19
   11bc8:	a0 e0       	ldi	r26, 0x00	; 0
   11bca:	ed b7       	in	r30, 0x3d	; 61
   11bcc:	fe b7       	in	r31, 0x3e	; 62
   11bce:	81 83       	std	Z+1, r24	; 0x01
   11bd0:	92 83       	std	Z+2, r25	; 0x02
   11bd2:	a3 83       	std	Z+3, r26	; 0x03
   11bd4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

        if(val & IFC_FLAG)
   11bd8:	01 15       	cp	r16, r1
   11bda:	11 05       	cpc	r17, r1
   11bdc:	09 f0       	breq	.+2      	; 0x11be0 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   11bde:	f3 de       	rcall	.-538    	; 0x119c6 <gpib_init_devices>
        }

        if(uart_keyhit(0))
   11be0:	80 e0       	ldi	r24, 0x00	; 0
   11be2:	0e 94 45 2a 	call	0x548a	; 0x548a <uart_keyhit>
   11be6:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   11be8:	11 f0       	breq	.+4      	; 0x11bee <gpib_error_test+0xf2>
   11bea:	ed de       	rcall	.-550    	; 0x119c6 <gpib_init_devices>
   11bec:	0b c0       	rjmp	.+22     	; 0x11c04 <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11bee:	0e 94 ce 6e 	call	0xdd9c	; 0xdd9c <mmc_ins_status>
   11bf2:	01 97       	sbiw	r24, 0x01	; 1
   11bf4:	39 f4       	brne	.+14     	; 0x11c04 <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11bf6:	01 15       	cp	r16, r1
   11bf8:	11 05       	cpc	r17, r1
   11bfa:	31 f0       	breq	.+12     	; 0x11c08 <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   11bfc:	54 98       	cbi	0x0a, 4	; 10
   11bfe:	4c 9b       	sbis	0x09, 4	; 9
   11c00:	fd cf       	rjmp	.-6      	; 0x11bfc <gpib_error_test+0x100>
   11c02:	02 c0       	rjmp	.+4      	; 0x11c08 <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11c04:	c1 e0       	ldi	r28, 0x01	; 1
   11c06:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   11c08:	ce 01       	movw	r24, r28
   11c0a:	cd b7       	in	r28, 0x3d	; 61
   11c0c:	de b7       	in	r29, 0x3e	; 62
   11c0e:	23 96       	adiw	r28, 0x03	; 3
   11c10:	e6 e0       	ldi	r30, 0x06	; 6
   11c12:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

00011c16 <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11c16:	1f 93       	push	r17
   11c18:	cf 93       	push	r28
   11c1a:	df 93       	push	r29
   11c1c:	ec 01       	movw	r28, r24
   11c1e:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11c20:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11c24:	8f 35       	cpi	r24, 0x5F	; 95
   11c26:	91 f0       	breq	.+36     	; 0x11c4c <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11c28:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11c2c:	90 e0       	ldi	r25, 0x00	; 0
   11c2e:	71 de       	rcall	.-798    	; 0x11912 <AMIGO_is_MLA>
   11c30:	89 2b       	or	r24, r25
   11c32:	c9 f4       	brne	.+50     	; 0x11c66 <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11c34:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11c38:	90 e0       	ldi	r25, 0x00	; 0
   11c3a:	35 de       	rcall	.-918    	; 0x118a6 <SS80_is_MLA>
   11c3c:	89 2b       	or	r24, r25
   11c3e:	11 f5       	brne	.+68     	; 0x11c84 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11c40:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11c44:	90 e0       	ldi	r25, 0x00	; 0
   11c46:	9b de       	rcall	.-714    	; 0x1197e <PRINTER_is_MLA>
   11c48:	89 2b       	or	r24, r25
   11c4a:	59 f5       	brne	.+86     	; 0x11ca2 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11c4c:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11c50:	8f 33       	cpi	r24, 0x3F	; 63
   11c52:	19 f4       	brne	.+6      	; 0x11c5a <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11c54:	80 e0       	ldi	r24, 0x00	; 0
   11c56:	90 e0       	ldi	r25, 0x00	; 0
   11c58:	2e c0       	rjmp	.+92     	; 0x11cb6 <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11c5a:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11c5e:	90 e0       	ldi	r25, 0x00	; 0
   11c60:	6a de       	rcall	.-812    	; 0x11936 <AMIGO_is_MTA>
   11c62:	89 2b       	or	r24, r25
   11c64:	49 f0       	breq	.+18     	; 0x11c78 <GPIB_COMMANDS+0x62>
        {
            if(unread)
   11c66:	11 23       	and	r17, r17
   11c68:	11 f0       	breq	.+4      	; 0x11c6e <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   11c6a:	ce 01       	movw	r24, r28
   11c6c:	58 d8       	rcall	.-3920   	; 0x10d1e <gpib_unread>
   11c6e:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <secondary>
            status = AMIGO_COMMANDS(secondary);
   11c72:	0e 94 5e bd 	call	0x17abc	; 0x17abc <AMIGO_COMMANDS>
   11c76:	1d c0       	rjmp	.+58     	; 0x11cb2 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11c78:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11c7c:	90 e0       	ldi	r25, 0x00	; 0
   11c7e:	25 de       	rcall	.-950    	; 0x118ca <SS80_is_MTA>
   11c80:	89 2b       	or	r24, r25
   11c82:	49 f0       	breq	.+18     	; 0x11c96 <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11c84:	11 23       	and	r17, r17
   11c86:	11 f0       	breq	.+4      	; 0x11c8c <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   11c88:	ce 01       	movw	r24, r28
   11c8a:	49 d8       	rcall	.-3950   	; 0x10d1e <gpib_unread>
   11c8c:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <secondary>
            status = SS80_COMMANDS(secondary);
   11c90:	0e 94 84 b1 	call	0x16308	; 0x16308 <SS80_COMMANDS>
   11c94:	0e c0       	rjmp	.+28     	; 0x11cb2 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11c96:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11c9a:	90 e0       	ldi	r25, 0x00	; 0
   11c9c:	82 de       	rcall	.-764    	; 0x119a2 <PRINTER_is_MTA>
   11c9e:	89 2b       	or	r24, r25
   11ca0:	c9 f2       	breq	.-78     	; 0x11c54 <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11ca2:	11 23       	and	r17, r17
   11ca4:	11 f0       	breq	.+4      	; 0x11caa <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   11ca6:	ce 01       	movw	r24, r28
   11ca8:	3a d8       	rcall	.-3980   	; 0x10d1e <gpib_unread>
   11caa:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <secondary>
            status = PRINTER_COMMANDS(secondary);
   11cae:	0e 94 d7 bf 	call	0x17fae	; 0x17fae <PRINTER_COMMANDS>
   11cb2:	10 92 f7 1e 	sts	0x1EF7, r1	; 0x801ef7 <secondary>
            secondary = 0;
   11cb6:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11cb8:	cf 91       	pop	r28
   11cba:	1f 91       	pop	r17
   11cbc:	08 95       	ret

00011cbe <Send_Identify>:
   11cbe:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11cc0:	df 92       	push	r13
   11cc2:	ff 92       	push	r15
   11cc4:	0f 93       	push	r16
   11cc6:	1f 93       	push	r17
   11cc8:	cf 93       	push	r28
   11cca:	df 93       	push	r29
   11ccc:	cd b7       	in	r28, 0x3d	; 61
   11cce:	de b7       	in	r29, 0x3e	; 62
   11cd0:	2b 97       	sbiw	r28, 0x0b	; 11
   11cd2:	0f b6       	in	r0, 0x3f	; 63
   11cd4:	f8 94       	cli
   11cd6:	de bf       	out	0x3e, r29	; 62
   11cd8:	0f be       	out	0x3f, r0	; 63
   11cda:	cd bf       	out	0x3d, r28	; 61
   11cdc:	f8 2e       	mov	r15, r24
   11cde:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11ce0:	80 e0       	ldi	r24, 0x00	; 0
   11ce2:	91 e0       	ldi	r25, 0x01	; 1
   11ce4:	9b 87       	std	Y+11, r25	; 0x0b
   11ce6:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11ce8:	8b 01       	movw	r16, r22
   11cea:	20 e0       	ldi	r18, 0x00	; 0
   11cec:	30 e0       	ldi	r19, 0x00	; 0
   11cee:	42 e0       	ldi	r20, 0x02	; 2
   11cf0:	50 e0       	ldi	r21, 0x00	; 0
   11cf2:	60 e0       	ldi	r22, 0x00	; 0
   11cf4:	70 e0       	ldi	r23, 0x00	; 0
   11cf6:	ce 01       	movw	r24, r28
   11cf8:	08 96       	adiw	r24, 0x08	; 8
   11cfa:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11cfe:	ae 01       	movw	r20, r28
   11d00:	46 5f       	subi	r20, 0xF6	; 246
   11d02:	5f 4f       	sbci	r21, 0xFF	; 255
   11d04:	62 e0       	ldi	r22, 0x02	; 2
   11d06:	70 e0       	ldi	r23, 0x00	; 0
   11d08:	ce 01       	movw	r24, r28
   11d0a:	08 96       	adiw	r24, 0x08	; 8
   11d0c:	cc dc       	rcall	.-1640   	; 0x116a6 <gpib_write_str>
   11d0e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11d12:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d16:	02 97       	sbiw	r24, 0x02	; 2
   11d18:	79 f0       	breq	.+30     	; 0x11d38 <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d1a:	25 72       	andi	r18, 0x25	; 37
   11d1c:	33 27       	eor	r19, r19
   11d1e:	23 2b       	or	r18, r19
   11d20:	f9 f0       	breq	.+62     	; 0x11d60 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11d22:	ed b7       	in	r30, 0x3d	; 61
   11d24:	fe b7       	in	r31, 0x3e	; 62
   11d26:	d7 82       	std	Z+7, r13	; 0x07
   11d28:	c6 82       	std	Z+6, r12	; 0x06
   11d2a:	8f 2d       	mov	r24, r15
   11d2c:	90 e0       	ldi	r25, 0x00	; 0
   11d2e:	95 83       	std	Z+5, r25	; 0x05
   11d30:	84 83       	std	Z+4, r24	; 0x04
   11d32:	8d ed       	ldi	r24, 0xDD	; 221
   11d34:	93 e1       	ldi	r25, 0x13	; 19
   11d36:	0e c0       	rjmp	.+28     	; 0x11d54 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d38:	24 72       	andi	r18, 0x24	; 36
   11d3a:	33 27       	eor	r19, r19
   11d3c:	23 2b       	or	r18, r19
   11d3e:	81 f0       	breq	.+32     	; 0x11d60 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11d40:	ed b7       	in	r30, 0x3d	; 61
   11d42:	fe b7       	in	r31, 0x3e	; 62
   11d44:	d7 82       	std	Z+7, r13	; 0x07
   11d46:	c6 82       	std	Z+6, r12	; 0x06
   11d48:	8f 2d       	mov	r24, r15
   11d4a:	90 e0       	ldi	r25, 0x00	; 0
   11d4c:	95 83       	std	Z+5, r25	; 0x05
   11d4e:	84 83       	std	Z+4, r24	; 0x04
   11d50:	83 ec       	ldi	r24, 0xC3	; 195
   11d52:	93 e1       	ldi	r25, 0x13	; 19
   11d54:	a0 e0       	ldi	r26, 0x00	; 0
   11d56:	81 83       	std	Z+1, r24	; 0x01
   11d58:	92 83       	std	Z+2, r25	; 0x02
   11d5a:	a3 83       	std	Z+3, r26	; 0x03
   11d5c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
    return (status & ERROR_MASK);
   11d60:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d62:	9b 85       	ldd	r25, Y+11	; 0x0b
   11d64:	88 27       	eor	r24, r24
   11d66:	90 7d       	andi	r25, 0xD0	; 208
}
   11d68:	2b 96       	adiw	r28, 0x0b	; 11
   11d6a:	0f b6       	in	r0, 0x3f	; 63
   11d6c:	f8 94       	cli
   11d6e:	de bf       	out	0x3e, r29	; 62
   11d70:	0f be       	out	0x3f, r0	; 63
   11d72:	cd bf       	out	0x3d, r28	; 61
   11d74:	df 91       	pop	r29
   11d76:	cf 91       	pop	r28
   11d78:	1f 91       	pop	r17
   11d7a:	0f 91       	pop	r16
   11d7c:	ff 90       	pop	r15
   11d7e:	df 90       	pop	r13
   11d80:	cf 90       	pop	r12
   11d82:	08 95       	ret

00011d84 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11d84:	00 d0       	rcall	.+0      	; 0x11d86 <GPIB+0x2>
   11d86:	00 d0       	rcall	.+0      	; 0x11d88 <GPIB+0x4>
   11d88:	1f 92       	push	r1
   11d8a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11d8e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11d92:	85 30       	cpi	r24, 0x05	; 5
   11d94:	89 f4       	brne	.+34     	; 0x11db8 <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11d96:	27 71       	andi	r18, 0x17	; 23
   11d98:	33 27       	eor	r19, r19
   11d9a:	23 2b       	or	r18, r19
   11d9c:	51 f0       	breq	.+20     	; 0x11db2 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11d9e:	8b ea       	ldi	r24, 0xAB	; 171
   11da0:	93 e1       	ldi	r25, 0x13	; 19
   11da2:	a0 e0       	ldi	r26, 0x00	; 0
   11da4:	ed b7       	in	r30, 0x3d	; 61
   11da6:	fe b7       	in	r31, 0x3e	; 62
   11da8:	81 83       	std	Z+1, r24	; 0x01
   11daa:	92 83       	std	Z+2, r25	; 0x02
   11dac:	a3 83       	std	Z+3, r26	; 0x03
   11dae:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        spoll = 0;
   11db2:	10 92 f3 1e 	sts	0x1EF3, r1	; 0x801ef3 <spoll>
   11db6:	a0 c0       	rjmp	.+320    	; 0x11ef8 <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11db8:	85 31       	cpi	r24, 0x15	; 21
   11dba:	39 f4       	brne	.+14     	; 0x11dca <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11dbc:	27 71       	andi	r18, 0x17	; 23
   11dbe:	33 27       	eor	r19, r19
   11dc0:	23 2b       	or	r18, r19
   11dc2:	b9 f3       	breq	.-18     	; 0x11db2 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11dc4:	83 e9       	ldi	r24, 0x93	; 147
   11dc6:	93 e1       	ldi	r25, 0x13	; 19
   11dc8:	ec cf       	rjmp	.-40     	; 0x11da2 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11dca:	88 31       	cpi	r24, 0x18	; 24
   11dcc:	d9 f4       	brne	.+54     	; 0x11e04 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11dce:	26 70       	andi	r18, 0x06	; 6
   11dd0:	33 27       	eor	r19, r19
   11dd2:	23 2b       	or	r18, r19
   11dd4:	51 f0       	breq	.+20     	; 0x11dea <GPIB+0x66>
            printf("[SPE]\n");
   11dd6:	8c e8       	ldi	r24, 0x8C	; 140
   11dd8:	93 e1       	ldi	r25, 0x13	; 19
   11dda:	a0 e0       	ldi	r26, 0x00	; 0
   11ddc:	ed b7       	in	r30, 0x3d	; 61
   11dde:	fe b7       	in	r31, 0x3e	; 62
   11de0:	81 83       	std	Z+1, r24	; 0x01
   11de2:	92 83       	std	Z+2, r25	; 0x02
   11de4:	a3 83       	std	Z+3, r26	; 0x03
   11de6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
        spoll = 1;
   11dea:	81 e0       	ldi	r24, 0x01	; 1
   11dec:	80 93 f3 1e 	sts	0x1EF3, r24	; 0x801ef3 <spoll>
        if(SS80_is_MTA(talking))
   11df0:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11df4:	90 e0       	ldi	r25, 0x00	; 0
   11df6:	69 dd       	rcall	.-1326   	; 0x118ca <SS80_is_MTA>
   11df8:	89 2b       	or	r24, r25
   11dfa:	09 f4       	brne	.+2      	; 0x11dfe <GPIB+0x7a>
   11dfc:	7d c0       	rjmp	.+250    	; 0x11ef8 <GPIB+0x174>
        {
            return( SS80_Report() );
   11dfe:	0e 94 37 ad 	call	0x15a6e	; 0x15a6e <SS80_Report>
   11e02:	7c c0       	rjmp	.+248    	; 0x11efc <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11e04:	89 31       	cpi	r24, 0x19	; 25
   11e06:	39 f4       	brne	.+14     	; 0x11e16 <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11e08:	26 70       	andi	r18, 0x06	; 6
   11e0a:	33 27       	eor	r19, r19
   11e0c:	23 2b       	or	r18, r19
   11e0e:	89 f2       	breq	.-94     	; 0x11db2 <GPIB+0x2e>
            printf("[SPD]\n");
   11e10:	85 e8       	ldi	r24, 0x85	; 133
   11e12:	93 e1       	ldi	r25, 0x13	; 19
   11e14:	c6 cf       	rjmp	.-116    	; 0x11da2 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11e16:	84 30       	cpi	r24, 0x04	; 4
   11e18:	09 f0       	breq	.+2      	; 0x11e1c <GPIB+0x98>
   11e1a:	48 c0       	rjmp	.+144    	; 0x11eac <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11e1c:	22 ff       	sbrs	r18, 2
   11e1e:	0a c0       	rjmp	.+20     	; 0x11e34 <GPIB+0xb0>
            printf("[SDC]\n");
   11e20:	8e e7       	ldi	r24, 0x7E	; 126
   11e22:	93 e1       	ldi	r25, 0x13	; 19
   11e24:	a0 e0       	ldi	r26, 0x00	; 0
   11e26:	ed b7       	in	r30, 0x3d	; 61
   11e28:	fe b7       	in	r31, 0x3e	; 62
   11e2a:	81 83       	std	Z+1, r24	; 0x01
   11e2c:	92 83       	std	Z+2, r25	; 0x02
   11e2e:	a3 83       	std	Z+3, r26	; 0x03
   11e30:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11e34:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11e38:	90 e0       	ldi	r25, 0x00	; 0
   11e3a:	35 dd       	rcall	.-1430   	; 0x118a6 <SS80_is_MLA>
   11e3c:	89 2b       	or	r24, r25
   11e3e:	d9 f0       	breq	.+54     	; 0x11e76 <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e40:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e44:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e48:	84 72       	andi	r24, 0x24	; 36
   11e4a:	99 27       	eor	r25, r25
   11e4c:	89 2b       	or	r24, r25
   11e4e:	51 f0       	breq	.+20     	; 0x11e64 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11e50:	82 e7       	ldi	r24, 0x72	; 114
   11e52:	93 e1       	ldi	r25, 0x13	; 19
   11e54:	a0 e0       	ldi	r26, 0x00	; 0
   11e56:	ed b7       	in	r30, 0x3d	; 61
   11e58:	fe b7       	in	r31, 0x3e	; 62
   11e5a:	81 83       	std	Z+1, r24	; 0x01
   11e5c:	92 83       	std	Z+2, r25	; 0x02
   11e5e:	a3 83       	std	Z+3, r26	; 0x03
   11e60:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11e64:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   11e68:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   11e6c:	85 81       	ldd	r24, Z+5	; 0x05
   11e6e:	90 e0       	ldi	r25, 0x00	; 0
   11e70:	0e 94 09 ae 	call	0x15c12	; 0x15c12 <SS80_Selected_Device_Clear>
   11e74:	43 c0       	rjmp	.+134    	; 0x11efc <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11e76:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11e7a:	90 e0       	ldi	r25, 0x00	; 0
   11e7c:	4a dd       	rcall	.-1388   	; 0x11912 <AMIGO_is_MLA>
   11e7e:	89 2b       	or	r24, r25
   11e80:	d9 f1       	breq	.+118    	; 0x11ef8 <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e82:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e86:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e8a:	84 72       	andi	r24, 0x24	; 36
   11e8c:	99 27       	eor	r25, r25
   11e8e:	89 2b       	or	r24, r25
   11e90:	51 f0       	breq	.+20     	; 0x11ea6 <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11e92:	85 e6       	ldi	r24, 0x65	; 101
   11e94:	93 e1       	ldi	r25, 0x13	; 19
   11e96:	a0 e0       	ldi	r26, 0x00	; 0
   11e98:	ed b7       	in	r30, 0x3d	; 61
   11e9a:	fe b7       	in	r31, 0x3e	; 62
   11e9c:	81 83       	std	Z+1, r24	; 0x01
   11e9e:	92 83       	std	Z+2, r25	; 0x02
   11ea0:	a3 83       	std	Z+3, r26	; 0x03
   11ea2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
            return( amigo_cmd_clear() );
   11ea6:	0e 94 44 b8 	call	0x17088	; 0x17088 <amigo_cmd_clear>
   11eaa:	28 c0       	rjmp	.+80     	; 0x11efc <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11eac:	84 31       	cpi	r24, 0x14	; 20
   11eae:	99 f4       	brne	.+38     	; 0x11ed6 <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11eb0:	22 ff       	sbrs	r18, 2
   11eb2:	0a c0       	rjmp	.+20     	; 0x11ec8 <GPIB+0x144>
            printf("[DCL]\n");
   11eb4:	8e e5       	ldi	r24, 0x5E	; 94
   11eb6:	93 e1       	ldi	r25, 0x13	; 19
   11eb8:	a0 e0       	ldi	r26, 0x00	; 0
   11eba:	ed b7       	in	r30, 0x3d	; 61
   11ebc:	fe b7       	in	r31, 0x3e	; 62
   11ebe:	81 83       	std	Z+1, r24	; 0x01
   11ec0:	92 83       	std	Z+2, r25	; 0x02
   11ec2:	a3 83       	std	Z+3, r26	; 0x03
   11ec4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11ec8:	0e 94 fb ad 	call	0x15bf6	; 0x15bf6 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11ecc:	0e 94 44 b8 	call	0x17088	; 0x17088 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11ed0:	0e 94 63 be 	call	0x17cc6	; 0x17cc6 <printer_close>
   11ed4:	11 c0       	rjmp	.+34     	; 0x11ef8 <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11ed6:	25 71       	andi	r18, 0x15	; 21
   11ed8:	33 27       	eor	r19, r19
   11eda:	23 2b       	or	r18, r19
   11edc:	69 f0       	breq	.+26     	; 0x11ef8 <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11ede:	90 e0       	ldi	r25, 0x00	; 0
   11ee0:	ed b7       	in	r30, 0x3d	; 61
   11ee2:	fe b7       	in	r31, 0x3e	; 62
   11ee4:	95 83       	std	Z+5, r25	; 0x05
   11ee6:	84 83       	std	Z+4, r24	; 0x04
   11ee8:	8d e3       	ldi	r24, 0x3D	; 61
   11eea:	93 e1       	ldi	r25, 0x13	; 19
   11eec:	a0 e0       	ldi	r26, 0x00	; 0
   11eee:	81 83       	std	Z+1, r24	; 0x01
   11ef0:	92 83       	std	Z+2, r25	; 0x02
   11ef2:	a3 83       	std	Z+3, r26	; 0x03
   11ef4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    return(0);
   11ef8:	80 e0       	ldi	r24, 0x00	; 0
   11efa:	90 e0       	ldi	r25, 0x00	; 0
}
   11efc:	0f 90       	pop	r0
   11efe:	0f 90       	pop	r0
   11f00:	0f 90       	pop	r0
   11f02:	0f 90       	pop	r0
   11f04:	0f 90       	pop	r0
   11f06:	08 95       	ret

00011f08 <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11f08:	cf 93       	push	r28
   11f0a:	df 93       	push	r29
   11f0c:	00 d0       	rcall	.+0      	; 0x11f0e <GPIB_TALK+0x6>
   11f0e:	00 d0       	rcall	.+0      	; 0x11f10 <GPIB_TALK+0x8>
   11f10:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11f12:	90 91 f6 1e 	lds	r25, 0x1EF6	; 0x801ef6 <talking>
   11f16:	90 93 f9 1e 	sts	0x1EF9, r25	; 0x801ef9 <talking_last>
    talking = ch;
   11f1a:	80 93 f6 1e 	sts	0x1EF6, r24	; 0x801ef6 <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11f1e:	8f 35       	cpi	r24, 0x5F	; 95
   11f20:	79 f4       	brne	.+30     	; 0x11f40 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f22:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f26:	82 ff       	sbrs	r24, 2
   11f28:	7f c0       	rjmp	.+254    	; 0x12028 <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11f2a:	8a ee       	ldi	r24, 0xEA	; 234
   11f2c:	92 e1       	ldi	r25, 0x12	; 18
   11f2e:	a0 e0       	ldi	r26, 0x00	; 0
   11f30:	ed b7       	in	r30, 0x3d	; 61
   11f32:	fe b7       	in	r31, 0x3e	; 62
   11f34:	81 83       	std	Z+1, r24	; 0x01
   11f36:	92 83       	std	Z+2, r25	; 0x02
   11f38:	a3 83       	std	Z+3, r26	; 0x03
   11f3a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   11f3e:	74 c0       	rjmp	.+232    	; 0x12028 <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11f40:	c8 2f       	mov	r28, r24
   11f42:	d0 e0       	ldi	r29, 0x00	; 0
   11f44:	ce 01       	movw	r24, r28
   11f46:	c1 dc       	rcall	.-1662   	; 0x118ca <SS80_is_MTA>
   11f48:	89 2b       	or	r24, r25
   11f4a:	e1 f0       	breq	.+56     	; 0x11f84 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f4c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f50:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f54:	84 72       	andi	r24, 0x24	; 36
   11f56:	99 27       	eor	r25, r25
   11f58:	89 2b       	or	r24, r25
   11f5a:	61 f0       	breq	.+24     	; 0x11f74 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11f5c:	ed b7       	in	r30, 0x3d	; 61
   11f5e:	fe b7       	in	r31, 0x3e	; 62
   11f60:	d5 83       	std	Z+5, r29	; 0x05
   11f62:	c4 83       	std	Z+4, r28	; 0x04
   11f64:	89 ed       	ldi	r24, 0xD9	; 217
   11f66:	92 e1       	ldi	r25, 0x12	; 18
   11f68:	a0 e0       	ldi	r26, 0x00	; 0
   11f6a:	81 83       	std	Z+1, r24	; 0x01
   11f6c:	92 83       	std	Z+2, r25	; 0x02
   11f6e:	a3 83       	std	Z+3, r26	; 0x03
   11f70:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif

        if (spoll)
   11f74:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <spoll>
   11f78:	88 23       	and	r24, r24
   11f7a:	09 f4       	brne	.+2      	; 0x11f7e <GPIB_TALK+0x76>
   11f7c:	55 c0       	rjmp	.+170    	; 0x12028 <GPIB_TALK+0x120>
        {
            SS80_Report();
   11f7e:	0e 94 37 ad 	call	0x15a6e	; 0x15a6e <SS80_Report>
   11f82:	52 c0       	rjmp	.+164    	; 0x12028 <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11f84:	ce 01       	movw	r24, r28
   11f86:	d7 dc       	rcall	.-1618   	; 0x11936 <AMIGO_is_MTA>
   11f88:	89 2b       	or	r24, r25
   11f8a:	81 f0       	breq	.+32     	; 0x11fac <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f8c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f90:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f94:	84 72       	andi	r24, 0x24	; 36
   11f96:	99 27       	eor	r25, r25
   11f98:	89 2b       	or	r24, r25
   11f9a:	09 f4       	brne	.+2      	; 0x11f9e <GPIB_TALK+0x96>
   11f9c:	45 c0       	rjmp	.+138    	; 0x12028 <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11f9e:	ed b7       	in	r30, 0x3d	; 61
   11fa0:	fe b7       	in	r31, 0x3e	; 62
   11fa2:	d5 83       	std	Z+5, r29	; 0x05
   11fa4:	c4 83       	std	Z+4, r28	; 0x04
   11fa6:	87 ec       	ldi	r24, 0xC7	; 199
   11fa8:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11faa:	38 c0       	rjmp	.+112    	; 0x1201c <GPIB_TALK+0x114>
   11fac:	ce 01       	movw	r24, r28
   11fae:	f9 dc       	rcall	.-1550   	; 0x119a2 <PRINTER_is_MTA>
   11fb0:	89 2b       	or	r24, r25
   11fb2:	79 f0       	breq	.+30     	; 0x11fd2 <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11fb4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11fb8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fbc:	84 72       	andi	r24, 0x24	; 36
   11fbe:	99 27       	eor	r25, r25
   11fc0:	89 2b       	or	r24, r25
   11fc2:	91 f1       	breq	.+100    	; 0x12028 <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   11fc4:	ed b7       	in	r30, 0x3d	; 61
   11fc6:	fe b7       	in	r31, 0x3e	; 62
   11fc8:	d5 83       	std	Z+5, r29	; 0x05
   11fca:	c4 83       	std	Z+4, r28	; 0x04
   11fcc:	83 eb       	ldi	r24, 0xB3	; 179
   11fce:	92 e1       	ldi	r25, 0x12	; 18
   11fd0:	25 c0       	rjmp	.+74     	; 0x1201c <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   11fd2:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11fd6:	90 e0       	ldi	r25, 0x00	; 0
   11fd8:	d2 dc       	rcall	.-1628   	; 0x1197e <PRINTER_is_MLA>
   11fda:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11fde:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fe2:	89 2b       	or	r24, r25
   11fe4:	99 f0       	breq	.+38     	; 0x1200c <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11fe6:	24 72       	andi	r18, 0x24	; 36
   11fe8:	33 27       	eor	r19, r19
   11fea:	23 2b       	or	r18, r19
   11fec:	51 f0       	breq	.+20     	; 0x12002 <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   11fee:	83 ea       	ldi	r24, 0xA3	; 163
   11ff0:	92 e1       	ldi	r25, 0x12	; 18
   11ff2:	a0 e0       	ldi	r26, 0x00	; 0
   11ff4:	ed b7       	in	r30, 0x3d	; 61
   11ff6:	fe b7       	in	r31, 0x3e	; 62
   11ff8:	81 83       	std	Z+1, r24	; 0x01
   11ffa:	92 83       	std	Z+2, r25	; 0x02
   11ffc:	a3 83       	std	Z+3, r26	; 0x03
   11ffe:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        printer_open(NULL);
   12002:	80 e0       	ldi	r24, 0x00	; 0
   12004:	90 e0       	ldi	r25, 0x00	; 0
   12006:	0e 94 bb be 	call	0x17d76	; 0x17d76 <printer_open>
   1200a:	0e c0       	rjmp	.+28     	; 0x12028 <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   1200c:	22 ff       	sbrs	r18, 2
   1200e:	0c c0       	rjmp	.+24     	; 0x12028 <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   12010:	ed b7       	in	r30, 0x3d	; 61
   12012:	fe b7       	in	r31, 0x3e	; 62
   12014:	d5 83       	std	Z+5, r29	; 0x05
   12016:	c4 83       	std	Z+4, r28	; 0x04
   12018:	87 e9       	ldi	r24, 0x97	; 151
   1201a:	92 e1       	ldi	r25, 0x12	; 18
   1201c:	a0 e0       	ldi	r26, 0x00	; 0
   1201e:	81 83       	std	Z+1, r24	; 0x01
   12020:	92 83       	std	Z+2, r25	; 0x02
   12022:	a3 83       	std	Z+3, r26	; 0x03
   12024:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   12028:	80 e0       	ldi	r24, 0x00	; 0
   1202a:	90 e0       	ldi	r25, 0x00	; 0
   1202c:	cd b7       	in	r28, 0x3d	; 61
   1202e:	de b7       	in	r29, 0x3e	; 62
   12030:	25 96       	adiw	r28, 0x05	; 5
   12032:	e2 e0       	ldi	r30, 0x02	; 2
   12034:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00012038 <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   12038:	a9 e0       	ldi	r26, 0x09	; 9
   1203a:	b0 e0       	ldi	r27, 0x00	; 0
   1203c:	e2 e2       	ldi	r30, 0x22	; 34
   1203e:	f0 e9       	ldi	r31, 0x90	; 144
   12040:	0c 94 c2 e6 	jmp	0x1cd84	; 0x1cd84 <__prologue_saves__+0x1e>
   12044:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   12046:	c8 2f       	mov	r28, r24
   12048:	d0 e0       	ldi	r29, 0x00	; 0
   1204a:	ce 01       	movw	r24, r28
   1204c:	50 dc       	rcall	.-1888   	; 0x118ee <SS80_is_MSA>
   1204e:	89 2b       	or	r24, r25
   12050:	09 f1       	breq	.+66     	; 0x12094 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12052:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12056:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1205a:	84 72       	andi	r24, 0x24	; 36
   1205c:	99 27       	eor	r25, r25
   1205e:	89 2b       	or	r24, r25
   12060:	61 f0       	breq	.+24     	; 0x1207a <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   12062:	ed b7       	in	r30, 0x3d	; 61
   12064:	fe b7       	in	r31, 0x3e	; 62
   12066:	d5 83       	std	Z+5, r29	; 0x05
   12068:	c4 83       	std	Z+4, r28	; 0x04
   1206a:	86 e8       	ldi	r24, 0x86	; 134
   1206c:	92 e1       	ldi	r25, 0x12	; 18
   1206e:	a0 e0       	ldi	r26, 0x00	; 0
   12070:	81 83       	std	Z+1, r24	; 0x01
   12072:	92 83       	std	Z+2, r25	; 0x02
   12074:	a3 83       	std	Z+3, r26	; 0x03
   12076:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   1207a:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   1207e:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   12082:	81 81       	ldd	r24, Z+1	; 0x01
   12084:	90 e0       	ldi	r25, 0x00	; 0
   12086:	0e 94 59 86 	call	0x10cb2	; 0x10cb2 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   1208a:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   1208e:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   12092:	25 c0       	rjmp	.+74     	; 0x120de <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   12094:	ce 01       	movw	r24, r28
   12096:	61 dc       	rcall	.-1854   	; 0x1195a <AMIGO_is_MSA>
   12098:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1209c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   120a0:	89 2b       	or	r24, r25
   120a2:	11 f1       	breq	.+68     	; 0x120e8 <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120a4:	c9 01       	movw	r24, r18
   120a6:	84 72       	andi	r24, 0x24	; 36
   120a8:	99 27       	eor	r25, r25
   120aa:	89 2b       	or	r24, r25
   120ac:	61 f0       	breq	.+24     	; 0x120c6 <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   120ae:	ed b7       	in	r30, 0x3d	; 61
   120b0:	fe b7       	in	r31, 0x3e	; 62
   120b2:	d5 83       	std	Z+5, r29	; 0x05
   120b4:	c4 83       	std	Z+4, r28	; 0x04
   120b6:	84 e7       	ldi	r24, 0x74	; 116
   120b8:	92 e1       	ldi	r25, 0x12	; 18
   120ba:	a0 e0       	ldi	r26, 0x00	; 0
   120bc:	81 83       	std	Z+1, r24	; 0x01
   120be:	92 83       	std	Z+2, r25	; 0x02
   120c0:	a3 83       	std	Z+3, r26	; 0x03
   120c2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   120c6:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   120ca:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   120ce:	81 81       	ldd	r24, Z+1	; 0x01
   120d0:	90 e0       	ldi	r25, 0x00	; 0
   120d2:	0e 94 59 86 	call	0x10cb2	; 0x10cb2 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   120d6:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   120da:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   120de:	66 81       	ldd	r22, Z+6	; 0x06
   120e0:	77 81       	ldd	r23, Z+7	; 0x07
   120e2:	81 2f       	mov	r24, r17
   120e4:	ec dd       	rcall	.-1064   	; 0x11cbe <Send_Identify>
   120e6:	1d c0       	rjmp	.+58     	; 0x12122 <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120e8:	c9 01       	movw	r24, r18
   120ea:	84 72       	andi	r24, 0x24	; 36
   120ec:	99 27       	eor	r25, r25
   120ee:	00 97       	sbiw	r24, 0x00	; 0
   120f0:	c1 f0       	breq	.+48     	; 0x12122 <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   120f2:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   120f6:	90 e0       	ldi	r25, 0x00	; 0
   120f8:	ed b7       	in	r30, 0x3d	; 61
   120fa:	fe b7       	in	r31, 0x3e	; 62
   120fc:	91 87       	std	Z+9, r25	; 0x09
   120fe:	80 87       	std	Z+8, r24	; 0x08
   12100:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   12104:	90 e0       	ldi	r25, 0x00	; 0
   12106:	97 83       	std	Z+7, r25	; 0x07
   12108:	86 83       	std	Z+6, r24	; 0x06
   1210a:	d5 83       	std	Z+5, r29	; 0x05
   1210c:	c4 83       	std	Z+4, r28	; 0x04
   1210e:	8e e4       	ldi	r24, 0x4E	; 78
   12110:	92 e1       	ldi	r25, 0x12	; 18
   12112:	a0 e0       	ldi	r26, 0x00	; 0
   12114:	81 83       	std	Z+1, r24	; 0x01
   12116:	92 83       	std	Z+2, r25	; 0x02
   12118:	a3 83       	std	Z+3, r26	; 0x03
   1211a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   1211e:	80 e0       	ldi	r24, 0x00	; 0
   12120:	90 e0       	ldi	r25, 0x00	; 0
}
   12122:	cd b7       	in	r28, 0x3d	; 61
   12124:	de b7       	in	r29, 0x3e	; 62
   12126:	29 96       	adiw	r28, 0x09	; 9
   12128:	e3 e0       	ldi	r30, 0x03	; 3
   1212a:	0c 94 de e6 	jmp	0x1cdbc	; 0x1cdbc <__epilogue_restores__+0x1e>

0001212e <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   1212e:	00 d0       	rcall	.+0      	; 0x12130 <listen_cleanup+0x2>
   12130:	1f 92       	push	r1
    if(listening_last)
   12132:	60 91 f2 1e 	lds	r22, 0x1EF2	; 0x801ef2 <listening_last>
   12136:	66 23       	and	r22, r22
   12138:	e1 f0       	breq	.+56     	; 0x12172 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   1213a:	70 e0       	ldi	r23, 0x00	; 0
   1213c:	40 e2       	ldi	r20, 0x20	; 32
   1213e:	50 e0       	ldi	r21, 0x00	; 0
   12140:	84 e0       	ldi	r24, 0x04	; 4
   12142:	90 e0       	ldi	r25, 0x00	; 0
   12144:	45 d6       	rcall	.+3210   	; 0x12dd0 <find_device>
        if(index == -1)
   12146:	8f 3f       	cpi	r24, 0xFF	; 255
   12148:	a1 f0       	breq	.+40     	; 0x12172 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1214a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1214e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12152:	84 72       	andi	r24, 0x24	; 36
   12154:	99 27       	eor	r25, r25
   12156:	89 2b       	or	r24, r25
   12158:	51 f0       	breq	.+20     	; 0x1216e <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   1215a:	8d e3       	ldi	r24, 0x3D	; 61
   1215c:	92 e1       	ldi	r25, 0x12	; 18
   1215e:	a0 e0       	ldi	r26, 0x00	; 0
   12160:	ed b7       	in	r30, 0x3d	; 61
   12162:	fe b7       	in	r31, 0x3e	; 62
   12164:	81 83       	std	Z+1, r24	; 0x01
   12166:	92 83       	std	Z+2, r25	; 0x02
   12168:	a3 83       	std	Z+3, r26	; 0x03
   1216a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        printer_close();
   1216e:	0e 94 63 be 	call	0x17cc6	; 0x17cc6 <printer_close>
    }
}
   12172:	0f 90       	pop	r0
   12174:	0f 90       	pop	r0
   12176:	0f 90       	pop	r0
   12178:	08 95       	ret

0001217a <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   1217a:	cf 93       	push	r28
   1217c:	df 93       	push	r29
   1217e:	00 d0       	rcall	.+0      	; 0x12180 <GPIB_LISTEN+0x6>
   12180:	00 d0       	rcall	.+0      	; 0x12182 <GPIB_LISTEN+0x8>
   12182:	1f 92       	push	r1
   12184:	c8 2f       	mov	r28, r24
    listening_last = listening;
   12186:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1218a:	80 93 f2 1e 	sts	0x1EF2, r24	; 0x801ef2 <listening_last>
    listening = ch;
   1218e:	c0 93 f8 1e 	sts	0x1EF8, r28	; 0x801ef8 <listening>

    listen_cleanup();
   12192:	cd df       	rcall	.-102    	; 0x1212e <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   12194:	cf 33       	cpi	r28, 0x3F	; 63
   12196:	19 f5       	brne	.+70     	; 0x121de <GPIB_LISTEN+0x64>
    {
        listening = 0;
   12198:	10 92 f8 1e 	sts	0x1EF8, r1	; 0x801ef8 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   1219c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   121a0:	82 ff       	sbrs	r24, 2
   121a2:	74 c0       	rjmp	.+232    	; 0x1228c <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   121a4:	86 e3       	ldi	r24, 0x36	; 54
   121a6:	93 e1       	ldi	r25, 0x13	; 19
   121a8:	a0 e0       	ldi	r26, 0x00	; 0
   121aa:	ed b7       	in	r30, 0x3d	; 61
   121ac:	fe b7       	in	r31, 0x3e	; 62
   121ae:	81 83       	std	Z+1, r24	; 0x01
   121b0:	92 83       	std	Z+2, r25	; 0x02
   121b2:	a3 83       	std	Z+3, r26	; 0x03
   121b4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   121b8:	80 91 f0 1c 	lds	r24, 0x1CF0	; 0x801cf0 <lastcmd>
   121bc:	90 91 f1 1c 	lds	r25, 0x1CF1	; 0x801cf1 <lastcmd+0x1>
   121c0:	8f 35       	cpi	r24, 0x5F	; 95
   121c2:	91 05       	cpc	r25, r1
   121c4:	09 f0       	breq	.+2      	; 0x121c8 <GPIB_LISTEN+0x4e>
   121c6:	62 c0       	rjmp	.+196    	; 0x1228c <GPIB_LISTEN+0x112>
                printf("\n");
   121c8:	84 e3       	ldi	r24, 0x34	; 52
   121ca:	93 e1       	ldi	r25, 0x13	; 19
   121cc:	a0 e0       	ldi	r26, 0x00	; 0
   121ce:	ed b7       	in	r30, 0x3d	; 61
   121d0:	fe b7       	in	r31, 0x3e	; 62
   121d2:	81 83       	std	Z+1, r24	; 0x01
   121d4:	92 83       	std	Z+2, r25	; 0x02
   121d6:	a3 83       	std	Z+3, r26	; 0x03
   121d8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   121dc:	57 c0       	rjmp	.+174    	; 0x1228c <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   121de:	d0 e0       	ldi	r29, 0x00	; 0
   121e0:	ce 01       	movw	r24, r28
   121e2:	97 db       	rcall	.-2258   	; 0x11912 <AMIGO_is_MLA>
   121e4:	89 2b       	or	r24, r25
   121e6:	81 f0       	breq	.+32     	; 0x12208 <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   121e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   121ec:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   121f0:	84 72       	andi	r24, 0x24	; 36
   121f2:	99 27       	eor	r25, r25
   121f4:	89 2b       	or	r24, r25
   121f6:	09 f4       	brne	.+2      	; 0x121fa <GPIB_LISTEN+0x80>
   121f8:	49 c0       	rjmp	.+146    	; 0x1228c <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   121fa:	ed b7       	in	r30, 0x3d	; 61
   121fc:	fe b7       	in	r31, 0x3e	; 62
   121fe:	d5 83       	std	Z+5, r29	; 0x05
   12200:	c4 83       	std	Z+4, r28	; 0x04
   12202:	82 e2       	ldi	r24, 0x22	; 34
   12204:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   12206:	3c c0       	rjmp	.+120    	; 0x12280 <GPIB_LISTEN+0x106>
   12208:	ce 01       	movw	r24, r28
   1220a:	4d db       	rcall	.-2406   	; 0x118a6 <SS80_is_MLA>
   1220c:	89 2b       	or	r24, r25
   1220e:	79 f0       	breq	.+30     	; 0x1222e <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12210:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12214:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12218:	84 72       	andi	r24, 0x24	; 36
   1221a:	99 27       	eor	r25, r25
   1221c:	89 2b       	or	r24, r25
   1221e:	b1 f1       	breq	.+108    	; 0x1228c <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   12220:	ed b7       	in	r30, 0x3d	; 61
   12222:	fe b7       	in	r31, 0x3e	; 62
   12224:	d5 83       	std	Z+5, r29	; 0x05
   12226:	c4 83       	std	Z+4, r28	; 0x04
   12228:	81 e1       	ldi	r24, 0x11	; 17
   1222a:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   1222c:	29 c0       	rjmp	.+82     	; 0x12280 <GPIB_LISTEN+0x106>
   1222e:	ce 01       	movw	r24, r28
   12230:	a6 db       	rcall	.-2228   	; 0x1197e <PRINTER_is_MLA>
   12232:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12236:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1223a:	89 2b       	or	r24, r25
   1223c:	c9 f0       	breq	.+50     	; 0x12270 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1223e:	24 72       	andi	r18, 0x24	; 36
   12240:	33 27       	eor	r19, r19
   12242:	23 2b       	or	r18, r19
   12244:	61 f0       	breq	.+24     	; 0x1225e <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   12246:	ed b7       	in	r30, 0x3d	; 61
   12248:	fe b7       	in	r31, 0x3e	; 62
   1224a:	d5 83       	std	Z+5, r29	; 0x05
   1224c:	c4 83       	std	Z+4, r28	; 0x04
   1224e:	8d ef       	ldi	r24, 0xFD	; 253
   12250:	92 e1       	ldi	r25, 0x12	; 18
   12252:	a0 e0       	ldi	r26, 0x00	; 0
   12254:	81 83       	std	Z+1, r24	; 0x01
   12256:	92 83       	std	Z+2, r25	; 0x02
   12258:	a3 83       	std	Z+3, r26	; 0x03
   1225a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
        if(talking != UNT)
   1225e:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   12262:	8f 35       	cpi	r24, 0x5F	; 95
   12264:	99 f0       	breq	.+38     	; 0x1228c <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
// FIXME use printer structure to permit multiple printers
            printer_open(NULL);
   12266:	80 e0       	ldi	r24, 0x00	; 0
   12268:	90 e0       	ldi	r25, 0x00	; 0
   1226a:	0e 94 bb be 	call	0x17d76	; 0x17d76 <printer_open>
   1226e:	0e c0       	rjmp	.+28     	; 0x1228c <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12270:	22 ff       	sbrs	r18, 2
   12272:	0c c0       	rjmp	.+24     	; 0x1228c <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   12274:	ed b7       	in	r30, 0x3d	; 61
   12276:	fe b7       	in	r31, 0x3e	; 62
   12278:	d5 83       	std	Z+5, r29	; 0x05
   1227a:	c4 83       	std	Z+4, r28	; 0x04
   1227c:	81 ef       	ldi	r24, 0xF1	; 241
   1227e:	92 e1       	ldi	r25, 0x12	; 18
   12280:	a0 e0       	ldi	r26, 0x00	; 0
   12282:	81 83       	std	Z+1, r24	; 0x01
   12284:	92 83       	std	Z+2, r25	; 0x02
   12286:	a3 83       	std	Z+3, r26	; 0x03
   12288:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   1228c:	80 e0       	ldi	r24, 0x00	; 0
   1228e:	90 e0       	ldi	r25, 0x00	; 0
   12290:	cd b7       	in	r28, 0x3d	; 61
   12292:	de b7       	in	r29, 0x3e	; 62
   12294:	25 96       	adiw	r28, 0x05	; 5
   12296:	e2 e0       	ldi	r30, 0x02	; 2
   12298:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

0001229c <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   1229c:	cf 93       	push	r28
   1229e:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   122a0:	92 db       	rcall	.-2268   	; 0x119c6 <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   122a2:	10 92 69 19 	sts	0x1969, r1	; 0x801969 <gpib_log_fp+0x1>
   122a6:	10 92 68 19 	sts	0x1968, r1	; 0x801968 <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   122aa:	80 e0       	ldi	r24, 0x00	; 0
   122ac:	90 e0       	ldi	r25, 0x00	; 0
   122ae:	4f d8       	rcall	.-3938   	; 0x1134e <gpib_read_byte>
   122b0:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   122b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   122b6:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   122b8:	02 c0       	rjmp	.+4      	; 0x122be <gpib_task+0x22>
   122ba:	ce 01       	movw	r24, r28
   122bc:	4e d9       	rcall	.-3428   	; 0x1155a <gpib_decode>
#endif
        status = gpib_error_test(val);
   122be:	ce 01       	movw	r24, r28
   122c0:	1d dc       	rcall	.-1990   	; 0x11afc <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   122c2:	9c 01       	movw	r18, r24
   122c4:	23 70       	andi	r18, 0x03	; 3
   122c6:	33 27       	eor	r19, r19
   122c8:	23 2b       	or	r18, r19
   122ca:	09 f0       	breq	.+2      	; 0x122ce <gpib_task+0x32>
   122cc:	43 c0       	rjmp	.+134    	; 0x12354 <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   122ce:	89 2b       	or	r24, r25
   122d0:	61 f7       	brne	.-40     	; 0x122aa <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   122d2:	d2 ff       	sbrs	r29, 2
   122d4:	26 c0       	rjmp	.+76     	; 0x12322 <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   122d6:	8c 2f       	mov	r24, r28
   122d8:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   122da:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   122dc:	10 f4       	brcc	.+4      	; 0x122e2 <gpib_task+0x46>
   122de:	52 dd       	rcall	.-1372   	; 0x11d84 <GPIB>
                continue;
   122e0:	e4 cf       	rjmp	.-56     	; 0x122aa <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   122e2:	90 ee       	ldi	r25, 0xE0	; 224
   122e4:	98 0f       	add	r25, r24
   122e6:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   122e8:	10 f4       	brcc	.+4      	; 0x122ee <gpib_task+0x52>
   122ea:	47 df       	rcall	.-370    	; 0x1217a <GPIB_LISTEN>
                continue;
   122ec:	de cf       	rjmp	.-68     	; 0x122aa <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   122ee:	90 ec       	ldi	r25, 0xC0	; 192
   122f0:	98 0f       	add	r25, r24
   122f2:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   122f4:	10 f4       	brcc	.+4      	; 0x122fa <gpib_task+0x5e>
   122f6:	08 de       	rcall	.-1008   	; 0x11f08 <GPIB_TALK>
                continue;
   122f8:	d8 cf       	rjmp	.-80     	; 0x122aa <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   122fa:	90 91 f8 1e 	lds	r25, 0x1EF8	; 0x801ef8 <listening>
   122fe:	99 23       	and	r25, r25
   12300:	59 f0       	breq	.+22     	; 0x12318 <gpib_task+0x7c>
   12302:	20 91 f0 1c 	lds	r18, 0x1CF0	; 0x801cf0 <lastcmd>
   12306:	30 91 f1 1c 	lds	r19, 0x1CF1	; 0x801cf1 <lastcmd+0x1>
   1230a:	2f 35       	cpi	r18, 0x5F	; 95
   1230c:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   1230e:	21 f4       	brne	.+8      	; 0x12318 <gpib_task+0x7c>
   12310:	10 92 f7 1e 	sts	0x1EF7, r1	; 0x801ef7 <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   12314:	91 de       	rcall	.-734    	; 0x12038 <GPIB_SECONDARY_ADDRESS>
                continue;
   12316:	c9 cf       	rjmp	.-110    	; 0x122aa <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   12318:	80 93 f7 1e 	sts	0x1EF7, r24	; 0x801ef7 <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   1231c:	60 e0       	ldi	r22, 0x00	; 0
   1231e:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   12320:	12 c0       	rjmp	.+36     	; 0x12346 <gpib_task+0xaa>
   12322:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   12326:	90 e0       	ldi	r25, 0x00	; 0
   12328:	2a db       	rcall	.-2476   	; 0x1197e <PRINTER_is_MLA>
   1232a:	89 2b       	or	r24, r25
   1232c:	29 f0       	breq	.+10     	; 0x12338 <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   1232e:	ce 01       	movw	r24, r28
   12330:	99 27       	eor	r25, r25
   12332:	0e 94 5e bf 	call	0x17ebc	; 0x17ebc <printer_buffer>
                continue;
   12336:	b9 cf       	rjmp	.-142    	; 0x122aa <gpib_task+0xe>
            }

            if(!secondary)
   12338:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <secondary>
   1233c:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   1233e:	09 f4       	brne	.+2      	; 0x12342 <gpib_task+0xa6>
   12340:	b4 cf       	rjmp	.-152    	; 0x122aa <gpib_task+0xe>
   12342:	61 e0       	ldi	r22, 0x01	; 1
   12344:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   12346:	67 dc       	rcall	.-1842   	; 0x11c16 <GPIB_COMMANDS>
   12348:	d9 db       	rcall	.-2126   	; 0x11afc <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   1234a:	83 70       	andi	r24, 0x03	; 3
   1234c:	99 27       	eor	r25, r25
   1234e:	89 2b       	or	r24, r25
   12350:	09 f4       	brne	.+2      	; 0x12354 <gpib_task+0xb8>
   12352:	ab cf       	rjmp	.-170    	; 0x122aa <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   12354:	df 91       	pop	r29
   12356:	cf 91       	pop	r28
   12358:	08 95       	ret

0001235a <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   1235a:	08 95       	ret

0001235c <gpib_help>:
/// @brief
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void
void gpib_help(int full)
{
   1235c:	cf 93       	push	r28
   1235e:	df 93       	push	r29
   12360:	00 d0       	rcall	.+0      	; 0x12362 <gpib_help+0x6>
   12362:	1f 92       	push	r1
   12364:	ec 01       	movw	r28, r24
    printf("gpib      help\n");
   12366:	85 e2       	ldi	r24, 0x25	; 37
   12368:	96 e1       	ldi	r25, 0x16	; 22
   1236a:	a0 e0       	ldi	r26, 0x00	; 0
   1236c:	ed b7       	in	r30, 0x3d	; 61
   1236e:	fe b7       	in	r31, 0x3e	; 62
   12370:	81 83       	std	Z+1, r24	; 0x01
   12372:	92 83       	std	Z+2, r25	; 0x02
   12374:	a3 83       	std	Z+3, r26	; 0x03
   12376:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    if(full)
   1237a:	cd 2b       	or	r28, r29
   1237c:	51 f0       	breq	.+20     	; 0x12392 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   1237e:	8e ef       	ldi	r24, 0xFE	; 254
   12380:	94 e1       	ldi	r25, 0x14	; 20
   12382:	a0 e0       	ldi	r26, 0x00	; 0
   12384:	ed b7       	in	r30, 0x3d	; 61
   12386:	fe b7       	in	r31, 0x3e	; 62
   12388:	81 83       	std	Z+1, r24	; 0x01
   1238a:	92 83       	std	Z+2, r25	; 0x02
   1238c:	a3 83       	std	Z+3, r26	; 0x03
   1238e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            "gpib ppr_set XX\n"
            "\n"
#endif
            );
	}
}
   12392:	cd b7       	in	r28, 0x3d	; 61
   12394:	de b7       	in	r29, 0x3e	; 62
   12396:	23 96       	adiw	r28, 0x03	; 3
   12398:	e2 e0       	ldi	r30, 0x02	; 2
   1239a:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

0001239e <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   1239e:	a5 e0       	ldi	r26, 0x05	; 5
   123a0:	b0 e0       	ldi	r27, 0x00	; 0
   123a2:	e5 ed       	ldi	r30, 0xD5	; 213
   123a4:	f1 e9       	ldi	r31, 0x91	; 145
   123a6:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   123aa:	fb 01       	movw	r30, r22
   123ac:	00 81       	ld	r16, Z
   123ae:	11 81       	ldd	r17, Z+1	; 0x01

    if(!ptr)
   123b0:	01 15       	cp	r16, r1
   123b2:	11 05       	cpc	r17, r1
   123b4:	19 f4       	brne	.+6      	; 0x123bc <gpib_tests+0x1e>
        return(0);
   123b6:	80 e0       	ldi	r24, 0x00	; 0
   123b8:	90 e0       	ldi	r25, 0x00	; 0
   123ba:	8f c0       	rjmp	.+286    	; 0x124da <gpib_tests+0x13c>
   123bc:	7b 01       	movw	r14, r22
   123be:	6c 01       	movw	r12, r24

    if( MATCH(ptr,"gpib") )
   123c0:	66 ea       	ldi	r22, 0xA6	; 166
   123c2:	7d e0       	ldi	r23, 0x0D	; 13
   123c4:	c8 01       	movw	r24, r16
   123c6:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
   123ca:	89 2b       	or	r24, r25
   123cc:	a1 f0       	breq	.+40     	; 0x123f6 <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   123ce:	f7 01       	movw	r30, r14
   123d0:	02 81       	ldd	r16, Z+2	; 0x02
   123d2:	13 81       	ldd	r17, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   123d4:	01 15       	cp	r16, r1
   123d6:	11 05       	cpc	r17, r1
   123d8:	21 f4       	brne	.+8      	; 0x123e2 <gpib_tests+0x44>
        {
            gpib_help(1);
   123da:	81 e0       	ldi	r24, 0x01	; 1
   123dc:	90 e0       	ldi	r25, 0x00	; 0
   123de:	be df       	rcall	.-132    	; 0x1235c <gpib_help>
   123e0:	7a c0       	rjmp	.+244    	; 0x124d6 <gpib_tests+0x138>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   123e2:	64 e7       	ldi	r22, 0x74	; 116
   123e4:	76 e1       	ldi	r23, 0x16	; 22
   123e6:	c8 01       	movw	r24, r16
   123e8:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
   123ec:	89 2b       	or	r24, r25
   123ee:	a9 f7       	brne	.-22     	; 0x123da <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   123f0:	c2 e0       	ldi	r28, 0x02	; 2
   123f2:	d0 e0       	ldi	r29, 0x00	; 0
   123f4:	02 c0       	rjmp	.+4      	; 0x123fa <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   123f6:	c1 e0       	ldi	r28, 0x01	; 1
   123f8:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   123fa:	6b ea       	ldi	r22, 0xAB	; 171
   123fc:	7d e0       	ldi	r23, 0x0D	; 13
   123fe:	c8 01       	movw	r24, r16
   12400:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   12404:	89 2b       	or	r24, r25
   12406:	29 f1       	breq	.+74     	; 0x12452 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   12408:	fe 01       	movw	r30, r28
   1240a:	ee 0f       	add	r30, r30
   1240c:	ff 1f       	adc	r31, r31
   1240e:	ee 0d       	add	r30, r14
   12410:	ff 1d       	adc	r31, r15
        if(*ptr == '=')
   12412:	01 90       	ld	r0, Z+
   12414:	f0 81       	ld	r31, Z
   12416:	e0 2d       	mov	r30, r0
   12418:	80 81       	ld	r24, Z
   1241a:	8d 33       	cpi	r24, 0x3D	; 61
   1241c:	09 f4       	brne	.+2      	; 0x12420 <gpib_tests+0x82>
            ++ind;
   1241e:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   12420:	cc 0f       	add	r28, r28
   12422:	dd 1f       	adc	r29, r29
   12424:	ce 0d       	add	r28, r14
   12426:	df 1d       	adc	r29, r15
   12428:	88 81       	ld	r24, Y
   1242a:	99 81       	ldd	r25, Y+1	; 0x01
   1242c:	0e 94 24 33 	call	0x6648	; 0x6648 <get_value>
   12430:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   12434:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   12438:	ed b7       	in	r30, 0x3d	; 61
   1243a:	fe b7       	in	r31, 0x3e	; 62
   1243c:	75 83       	std	Z+5, r23	; 0x05
   1243e:	64 83       	std	Z+4, r22	; 0x04
   12440:	81 ef       	ldi	r24, 0xF1	; 241
   12442:	94 e1       	ldi	r25, 0x14	; 20
   12444:	a0 e0       	ldi	r26, 0x00	; 0
   12446:	81 83       	std	Z+1, r24	; 0x01
   12448:	92 83       	std	Z+2, r25	; 0x02
   1244a:	a3 83       	std	Z+3, r26	; 0x03
   1244c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12450:	42 c0       	rjmp	.+132    	; 0x124d6 <gpib_tests+0x138>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   12452:	61 eb       	ldi	r22, 0xB1	; 177
   12454:	7d e0       	ldi	r23, 0x0D	; 13
   12456:	c8 01       	movw	r24, r16
   12458:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1245c:	89 2b       	or	r24, r25
   1245e:	19 f0       	breq	.+6      	; 0x12466 <gpib_tests+0xc8>
    {
        gpib_timer_elapsed_begin();
   12460:	0e 94 49 85 	call	0x10a92	; 0x10a92 <gpib_timer_elapsed_begin>
   12464:	38 c0       	rjmp	.+112    	; 0x124d6 <gpib_tests+0x138>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   12466:	6f eb       	ldi	r22, 0xBF	; 191
   12468:	7d e0       	ldi	r23, 0x0D	; 13
   1246a:	c8 01       	movw	r24, r16
   1246c:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   12470:	89 2b       	or	r24, r25
   12472:	29 f0       	breq	.+10     	; 0x1247e <gpib_tests+0xe0>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12474:	87 ec       	ldi	r24, 0xC7	; 199
   12476:	9d e0       	ldi	r25, 0x0D	; 13
   12478:	0e 94 5b 85 	call	0x10ab6	; 0x10ab6 <gpib_timer_elapsed_end>
   1247c:	2c c0       	rjmp	.+88     	; 0x124d6 <gpib_tests+0x138>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   1247e:	65 ed       	ldi	r22, 0xD5	; 213
   12480:	7d e0       	ldi	r23, 0x0D	; 13
   12482:	c8 01       	movw	r24, r16
   12484:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   12488:	89 2b       	or	r24, r25
    {
        gpib_task();
   1248a:	11 f0       	breq	.+4      	; 0x12490 <gpib_tests+0xf2>
   1248c:	07 df       	rcall	.-498    	; 0x1229c <gpib_task>
   1248e:	23 c0       	rjmp	.+70     	; 0x124d6 <gpib_tests+0x138>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   12490:	21 96       	adiw	r28, 0x01	; 1
   12492:	96 01       	movw	r18, r12
   12494:	ae 01       	movw	r20, r28
   12496:	6a ed       	ldi	r22, 0xDA	; 218
   12498:	7d e0       	ldi	r23, 0x0D	; 13
   1249a:	c8 01       	movw	r24, r16
   1249c:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   124a0:	89 2b       	or	r24, r25
   124a2:	09 f4       	brne	.+2      	; 0x124a6 <gpib_tests+0x108>
   124a4:	88 cf       	rjmp	.-240    	; 0x123b6 <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   124a6:	cc 0f       	add	r28, r28
   124a8:	dd 1f       	adc	r29, r29
   124aa:	ce 0d       	add	r28, r14
   124ac:	df 1d       	adc	r29, r15
   124ae:	88 81       	ld	r24, Y
   124b0:	99 81       	ldd	r25, Y+1	; 0x01
   124b2:	00 97       	sbiw	r24, 0x00	; 0
   124b4:	51 f0       	breq	.+20     	; 0x124ca <gpib_tests+0x12c>
   124b6:	60 ee       	ldi	r22, 0xE0	; 224
   124b8:	7d e0       	ldi	r23, 0x0D	; 13
   124ba:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   124be:	61 e0       	ldi	r22, 0x01	; 1
   124c0:	70 e0       	ldi	r23, 0x00	; 0
   124c2:	89 2b       	or	r24, r25
   124c4:	21 f4       	brne	.+8      	; 0x124ce <gpib_tests+0x130>
   124c6:	60 e0       	ldi	r22, 0x00	; 0
   124c8:	02 c0       	rjmp	.+4      	; 0x124ce <gpib_tests+0x130>
   124ca:	60 e0       	ldi	r22, 0x00	; 0
   124cc:	70 e0       	ldi	r23, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   124ce:	22 97       	sbiw	r28, 0x02	; 2
   124d0:	88 81       	ld	r24, Y
   124d2:	99 81       	ldd	r25, Y+1	; 0x01
   124d4:	81 da       	rcall	.-2814   	; 0x119d8 <gpib_trace_task>
        return(1);
   124d6:	81 e0       	ldi	r24, 0x01	; 1
   124d8:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   124da:	cd b7       	in	r28, 0x3d	; 61
   124dc:	de b7       	in	r29, 0x3e	; 62
   124de:	25 96       	adiw	r28, 0x05	; 5
   124e0:	e8 e0       	ldi	r30, 0x08	; 8
   124e2:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

000124e6 <tok_index>:

	if(index_ppr(ppr) == -1)
		return(1);
	printf("WARNING PPR (%d) already in use\n", (int)ppr);
	return(0);
}
   124e6:	0f 93       	push	r16
   124e8:	1f 93       	push	r17
   124ea:	cf 93       	push	r28
   124ec:	8c 01       	movw	r16, r24
   124ee:	c0 e0       	ldi	r28, 0x00	; 0
   124f0:	24 e0       	ldi	r18, 0x04	; 4
   124f2:	c2 02       	muls	r28, r18
   124f4:	f0 01       	movw	r30, r0
   124f6:	11 24       	eor	r1, r1
   124f8:	ec 53       	subi	r30, 0x3C	; 60
   124fa:	fe 4f       	sbci	r31, 0xFE	; 254
   124fc:	82 81       	ldd	r24, Z+2	; 0x02
   124fe:	93 81       	ldd	r25, Z+3	; 0x03
   12500:	01 96       	adiw	r24, 0x01	; 1
   12502:	49 f0       	breq	.+18     	; 0x12516 <tok_index+0x30>
   12504:	60 81       	ld	r22, Z
   12506:	71 81       	ldd	r23, Z+1	; 0x01
   12508:	c8 01       	movw	r24, r16
   1250a:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1250e:	89 2b       	or	r24, r25
   12510:	21 f4       	brne	.+8      	; 0x1251a <tok_index+0x34>
   12512:	cf 5f       	subi	r28, 0xFF	; 255
   12514:	ed cf       	rjmp	.-38     	; 0x124f0 <tok_index+0xa>
   12516:	8f ef       	ldi	r24, 0xFF	; 255
   12518:	01 c0       	rjmp	.+2      	; 0x1251c <tok_index+0x36>
   1251a:	8c 2f       	mov	r24, r28
   1251c:	cf 91       	pop	r28
   1251e:	1f 91       	pop	r17
   12520:	0f 91       	pop	r16
   12522:	08 95       	ret

00012524 <tok_name>:
   12524:	e4 ec       	ldi	r30, 0xC4	; 196
   12526:	f1 e0       	ldi	r31, 0x01	; 1
   12528:	20 e0       	ldi	r18, 0x00	; 0
   1252a:	30 e0       	ldi	r19, 0x00	; 0
   1252c:	90 e0       	ldi	r25, 0x00	; 0
   1252e:	42 81       	ldd	r20, Z+2	; 0x02
   12530:	53 81       	ldd	r21, Z+3	; 0x03
   12532:	4f 3f       	cpi	r20, 0xFF	; 255
   12534:	6f ef       	ldi	r22, 0xFF	; 255
   12536:	56 07       	cpc	r21, r22
   12538:	89 f0       	breq	.+34     	; 0x1255c <tok_name+0x38>
   1253a:	34 96       	adiw	r30, 0x04	; 4
   1253c:	48 17       	cp	r20, r24
   1253e:	59 07       	cpc	r21, r25
   12540:	51 f4       	brne	.+20     	; 0x12556 <tok_name+0x32>
   12542:	22 0f       	add	r18, r18
   12544:	33 1f       	adc	r19, r19
   12546:	22 0f       	add	r18, r18
   12548:	33 1f       	adc	r19, r19
   1254a:	f9 01       	movw	r30, r18
   1254c:	ec 53       	subi	r30, 0x3C	; 60
   1254e:	fe 4f       	sbci	r31, 0xFE	; 254
   12550:	80 81       	ld	r24, Z
   12552:	91 81       	ldd	r25, Z+1	; 0x01
   12554:	08 95       	ret
   12556:	2f 5f       	subi	r18, 0xFF	; 255
   12558:	3f 4f       	sbci	r19, 0xFF	; 255
   1255a:	e9 cf       	rjmp	.-46     	; 0x1252e <tok_name+0xa>
   1255c:	80 e2       	ldi	r24, 0x20	; 32
   1255e:	9c e0       	ldi	r25, 0x0C	; 12
   12560:	08 95       	ret

00012562 <print_tok_val>:
   12562:	cf 92       	push	r12
   12564:	df 92       	push	r13
   12566:	ef 92       	push	r14
   12568:	ff 92       	push	r15
   1256a:	0f 93       	push	r16
   1256c:	1f 93       	push	r17
   1256e:	cf 93       	push	r28
   12570:	ad b7       	in	r26, 0x3d	; 61
   12572:	be b7       	in	r27, 0x3e	; 62
   12574:	1d 97       	sbiw	r26, 0x0d	; 13
   12576:	0f b6       	in	r0, 0x3f	; 63
   12578:	f8 94       	cli
   1257a:	be bf       	out	0x3e, r27	; 62
   1257c:	0f be       	out	0x3f, r0	; 63
   1257e:	ad bf       	out	0x3d, r26	; 61
   12580:	c6 2f       	mov	r28, r22
   12582:	69 01       	movw	r12, r18
   12584:	7a 01       	movw	r14, r20
   12586:	ce df       	rcall	.-100    	; 0x12524 <tok_name>
   12588:	8c 01       	movw	r16, r24
   1258a:	cc 23       	and	r28, r28
   1258c:	31 f0       	breq	.+12     	; 0x1259a <print_tok_val+0x38>
   1258e:	80 e2       	ldi	r24, 0x20	; 32
   12590:	90 e0       	ldi	r25, 0x00	; 0
   12592:	0e 94 33 76 	call	0xec66	; 0xec66 <putchar>
   12596:	c1 50       	subi	r28, 0x01	; 1
   12598:	f8 cf       	rjmp	.-16     	; 0x1258a <print_tok_val+0x28>
   1259a:	ed b7       	in	r30, 0x3d	; 61
   1259c:	fe b7       	in	r31, 0x3e	; 62
   1259e:	c2 86       	std	Z+10, r12	; 0x0a
   125a0:	d3 86       	std	Z+11, r13	; 0x0b
   125a2:	e4 86       	std	Z+12, r14	; 0x0c
   125a4:	f5 86       	std	Z+13, r15	; 0x0d
   125a6:	c6 82       	std	Z+6, r12	; 0x06
   125a8:	d7 82       	std	Z+7, r13	; 0x07
   125aa:	e0 86       	std	Z+8, r14	; 0x08
   125ac:	f1 86       	std	Z+9, r15	; 0x09
   125ae:	15 83       	std	Z+5, r17	; 0x05
   125b0:	04 83       	std	Z+4, r16	; 0x04
   125b2:	88 e9       	ldi	r24, 0x98	; 152
   125b4:	90 e2       	ldi	r25, 0x20	; 32
   125b6:	a0 e0       	ldi	r26, 0x00	; 0
   125b8:	81 83       	std	Z+1, r24	; 0x01
   125ba:	92 83       	std	Z+2, r25	; 0x02
   125bc:	a3 83       	std	Z+3, r26	; 0x03
   125be:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   125c2:	ad b7       	in	r26, 0x3d	; 61
   125c4:	be b7       	in	r27, 0x3e	; 62
   125c6:	1d 96       	adiw	r26, 0x0d	; 13
   125c8:	0f b6       	in	r0, 0x3f	; 63
   125ca:	f8 94       	cli
   125cc:	be bf       	out	0x3e, r27	; 62
   125ce:	0f be       	out	0x3f, r0	; 63
   125d0:	ad bf       	out	0x3d, r26	; 61
   125d2:	cf 91       	pop	r28
   125d4:	1f 91       	pop	r17
   125d6:	0f 91       	pop	r16
   125d8:	ff 90       	pop	r15
   125da:	ef 90       	pop	r14
   125dc:	df 90       	pop	r13
   125de:	cf 90       	pop	r12
   125e0:	08 95       	ret

000125e2 <print_tok_str>:
   125e2:	ef 92       	push	r14
   125e4:	ff 92       	push	r15
   125e6:	0f 93       	push	r16
   125e8:	1f 93       	push	r17
   125ea:	cf 93       	push	r28
   125ec:	ad b7       	in	r26, 0x3d	; 61
   125ee:	be b7       	in	r27, 0x3e	; 62
   125f0:	17 97       	sbiw	r26, 0x07	; 7
   125f2:	0f b6       	in	r0, 0x3f	; 63
   125f4:	f8 94       	cli
   125f6:	be bf       	out	0x3e, r27	; 62
   125f8:	0f be       	out	0x3f, r0	; 63
   125fa:	ad bf       	out	0x3d, r26	; 61
   125fc:	c6 2f       	mov	r28, r22
   125fe:	7a 01       	movw	r14, r20
   12600:	91 df       	rcall	.-222    	; 0x12524 <tok_name>
   12602:	8c 01       	movw	r16, r24
   12604:	cc 23       	and	r28, r28
   12606:	31 f0       	breq	.+12     	; 0x12614 <print_tok_str+0x32>
   12608:	80 e2       	ldi	r24, 0x20	; 32
   1260a:	90 e0       	ldi	r25, 0x00	; 0
   1260c:	0e 94 33 76 	call	0xec66	; 0xec66 <putchar>
   12610:	c1 50       	subi	r28, 0x01	; 1
   12612:	f8 cf       	rjmp	.-16     	; 0x12604 <print_tok_str+0x22>
   12614:	ed b7       	in	r30, 0x3d	; 61
   12616:	fe b7       	in	r31, 0x3e	; 62
   12618:	f7 82       	std	Z+7, r15	; 0x07
   1261a:	e6 82       	std	Z+6, r14	; 0x06
   1261c:	15 83       	std	Z+5, r17	; 0x05
   1261e:	04 83       	std	Z+4, r16	; 0x04
   12620:	8c e8       	ldi	r24, 0x8C	; 140
   12622:	90 e2       	ldi	r25, 0x20	; 32
   12624:	a0 e0       	ldi	r26, 0x00	; 0
   12626:	81 83       	std	Z+1, r24	; 0x01
   12628:	92 83       	std	Z+2, r25	; 0x02
   1262a:	a3 83       	std	Z+3, r26	; 0x03
   1262c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12630:	ad b7       	in	r26, 0x3d	; 61
   12632:	be b7       	in	r27, 0x3e	; 62
   12634:	17 96       	adiw	r26, 0x07	; 7
   12636:	0f b6       	in	r0, 0x3f	; 63
   12638:	f8 94       	cli
   1263a:	be bf       	out	0x3e, r27	; 62
   1263c:	0f be       	out	0x3f, r0	; 63
   1263e:	ad bf       	out	0x3d, r26	; 61
   12640:	cf 91       	pop	r28
   12642:	1f 91       	pop	r17
   12644:	0f 91       	pop	r16
   12646:	ff 90       	pop	r15
   12648:	ef 90       	pop	r14
   1264a:	08 95       	ret

0001264c <print_tok>:
   1264c:	0f 93       	push	r16
   1264e:	1f 93       	push	r17
   12650:	cf 93       	push	r28
   12652:	00 d0       	rcall	.+0      	; 0x12654 <print_tok+0x8>
   12654:	00 d0       	rcall	.+0      	; 0x12656 <print_tok+0xa>
   12656:	1f 92       	push	r1
   12658:	c6 2f       	mov	r28, r22
   1265a:	64 df       	rcall	.-312    	; 0x12524 <tok_name>
   1265c:	8c 01       	movw	r16, r24
   1265e:	cc 23       	and	r28, r28
   12660:	31 f0       	breq	.+12     	; 0x1266e <print_tok+0x22>
   12662:	80 e2       	ldi	r24, 0x20	; 32
   12664:	90 e0       	ldi	r25, 0x00	; 0
   12666:	0e 94 33 76 	call	0xec66	; 0xec66 <putchar>
   1266a:	c1 50       	subi	r28, 0x01	; 1
   1266c:	f8 cf       	rjmp	.-16     	; 0x1265e <print_tok+0x12>
   1266e:	ed b7       	in	r30, 0x3d	; 61
   12670:	fe b7       	in	r31, 0x3e	; 62
   12672:	15 83       	std	Z+5, r17	; 0x05
   12674:	04 83       	std	Z+4, r16	; 0x04
   12676:	88 e8       	ldi	r24, 0x88	; 136
   12678:	90 e2       	ldi	r25, 0x20	; 32
   1267a:	a0 e0       	ldi	r26, 0x00	; 0
   1267c:	81 83       	std	Z+1, r24	; 0x01
   1267e:	92 83       	std	Z+2, r25	; 0x02
   12680:	a3 83       	std	Z+3, r26	; 0x03
   12682:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12686:	0f 90       	pop	r0
   12688:	0f 90       	pop	r0
   1268a:	0f 90       	pop	r0
   1268c:	0f 90       	pop	r0
   1268e:	0f 90       	pop	r0
   12690:	cf 91       	pop	r28
   12692:	1f 91       	pop	r17
   12694:	0f 91       	pop	r16
   12696:	08 95       	ret

00012698 <display_Addresses>:
   12698:	2f 92       	push	r2
   1269a:	3f 92       	push	r3
   1269c:	4f 92       	push	r4
   1269e:	6f 92       	push	r6
   126a0:	7f 92       	push	r7
   126a2:	8f 92       	push	r8
   126a4:	cf 92       	push	r12
   126a6:	df 92       	push	r13
   126a8:	ef 92       	push	r14
   126aa:	0f 93       	push	r16
   126ac:	1f 93       	push	r17
   126ae:	cf 93       	push	r28
   126b0:	df 93       	push	r29
   126b2:	cd b7       	in	r28, 0x3d	; 61
   126b4:	de b7       	in	r29, 0x3e	; 62
   126b6:	2a 97       	sbiw	r28, 0x0a	; 10
   126b8:	0f b6       	in	r0, 0x3f	; 63
   126ba:	f8 94       	cli
   126bc:	de bf       	out	0x3e, r29	; 62
   126be:	0f be       	out	0x3f, r0	; 63
   126c0:	cd bf       	out	0x3d, r28	; 61
   126c2:	82 e5       	ldi	r24, 0x52	; 82
   126c4:	9d e1       	ldi	r25, 0x1D	; 29
   126c6:	a0 e0       	ldi	r26, 0x00	; 0
   126c8:	ed b7       	in	r30, 0x3d	; 61
   126ca:	fe b7       	in	r31, 0x3e	; 62
   126cc:	81 83       	std	Z+1, r24	; 0x01
   126ce:	92 83       	std	Z+2, r25	; 0x02
   126d0:	a3 83       	std	Z+3, r26	; 0x03
   126d2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   126d6:	0c ef       	ldi	r16, 0xFC	; 252
   126d8:	1e e1       	ldi	r17, 0x1E	; 30
   126da:	84 e3       	ldi	r24, 0x34	; 52
   126dc:	9d e1       	ldi	r25, 0x1D	; 29
   126de:	6c 01       	movw	r12, r24
   126e0:	e1 2c       	mov	r14, r1
   126e2:	86 e3       	ldi	r24, 0x36	; 54
   126e4:	9d e1       	ldi	r25, 0x1D	; 29
   126e6:	3c 01       	movw	r6, r24
   126e8:	81 2c       	mov	r8, r1
   126ea:	8f e3       	ldi	r24, 0x3F	; 63
   126ec:	9d e1       	ldi	r25, 0x1D	; 29
   126ee:	1c 01       	movw	r2, r24
   126f0:	41 2c       	mov	r4, r1
   126f2:	89 e4       	ldi	r24, 0x49	; 73
   126f4:	9d e1       	ldi	r25, 0x1D	; 29
   126f6:	9c 01       	movw	r18, r24
   126f8:	40 e0       	ldi	r20, 0x00	; 0
   126fa:	2e 83       	std	Y+6, r18	; 0x06
   126fc:	3f 83       	std	Y+7, r19	; 0x07
   126fe:	48 87       	std	Y+8, r20	; 0x08
   12700:	f8 01       	movw	r30, r16
   12702:	80 81       	ld	r24, Z
   12704:	88 23       	and	r24, r24
   12706:	09 f4       	brne	.+2      	; 0x1270a <display_Addresses+0x72>
   12708:	76 c0       	rjmp	.+236    	; 0x127f6 <display_Addresses+0x15e>
   1270a:	83 30       	cpi	r24, 0x03	; 3
   1270c:	21 f0       	breq	.+8      	; 0x12716 <display_Addresses+0x7e>
   1270e:	81 30       	cpi	r24, 0x01	; 1
   12710:	09 f0       	breq	.+2      	; 0x12714 <display_Addresses+0x7c>
   12712:	57 c0       	rjmp	.+174    	; 0x127c2 <display_Addresses+0x12a>
   12714:	1f c0       	rjmp	.+62     	; 0x12754 <display_Addresses+0xbc>
   12716:	f8 01       	movw	r30, r16
   12718:	87 81       	ldd	r24, Z+7	; 0x07
   1271a:	90 85       	ldd	r25, Z+8	; 0x08
   1271c:	90 93 71 19 	sts	0x1971, r25	; 0x801971 <SS80p+0x1>
   12720:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <SS80p>
   12724:	fc 01       	movw	r30, r24
   12726:	84 81       	ldd	r24, Z+4	; 0x04
   12728:	95 81       	ldd	r25, Z+5	; 0x05
   1272a:	ed b7       	in	r30, 0x3d	; 61
   1272c:	fe b7       	in	r31, 0x3e	; 62
   1272e:	95 83       	std	Z+5, r25	; 0x05
   12730:	84 83       	std	Z+4, r24	; 0x04
   12732:	2e 81       	ldd	r18, Y+6	; 0x06
   12734:	3f 81       	ldd	r19, Y+7	; 0x07
   12736:	48 85       	ldd	r20, Y+8	; 0x08
   12738:	21 83       	std	Z+1, r18	; 0x01
   1273a:	32 83       	std	Z+2, r19	; 0x02
   1273c:	43 83       	std	Z+3, r20	; 0x03
   1273e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12742:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   12746:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1274a:	42 81       	ldd	r20, Z+2	; 0x02
   1274c:	53 81       	ldd	r21, Z+3	; 0x03
   1274e:	64 e0       	ldi	r22, 0x04	; 4
   12750:	82 e1       	ldi	r24, 0x12	; 18
   12752:	47 df       	rcall	.-370    	; 0x125e2 <print_tok_str>
   12754:	f8 01       	movw	r30, r16
   12756:	80 81       	ld	r24, Z
   12758:	81 30       	cpi	r24, 0x01	; 1
   1275a:	d9 f4       	brne	.+54     	; 0x12792 <display_Addresses+0xfa>
   1275c:	87 81       	ldd	r24, Z+7	; 0x07
   1275e:	90 85       	ldd	r25, Z+8	; 0x08
   12760:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <AMIGOp+0x1>
   12764:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <AMIGOp>
   12768:	fc 01       	movw	r30, r24
   1276a:	84 81       	ldd	r24, Z+4	; 0x04
   1276c:	95 81       	ldd	r25, Z+5	; 0x05
   1276e:	ed b7       	in	r30, 0x3d	; 61
   12770:	fe b7       	in	r31, 0x3e	; 62
   12772:	95 83       	std	Z+5, r25	; 0x05
   12774:	84 83       	std	Z+4, r24	; 0x04
   12776:	21 82       	std	Z+1, r2	; 0x01
   12778:	32 82       	std	Z+2, r3	; 0x02
   1277a:	43 82       	std	Z+3, r4	; 0x03
   1277c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12780:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   12784:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   12788:	42 81       	ldd	r20, Z+2	; 0x02
   1278a:	53 81       	ldd	r21, Z+3	; 0x03
   1278c:	64 e0       	ldi	r22, 0x04	; 4
   1278e:	82 e1       	ldi	r24, 0x12	; 18
   12790:	28 df       	rcall	.-432    	; 0x125e2 <print_tok_str>
   12792:	f8 01       	movw	r30, r16
   12794:	21 81       	ldd	r18, Z+1	; 0x01
   12796:	30 e0       	ldi	r19, 0x00	; 0
   12798:	40 e0       	ldi	r20, 0x00	; 0
   1279a:	50 e0       	ldi	r21, 0x00	; 0
   1279c:	64 e0       	ldi	r22, 0x04	; 4
   1279e:	81 e0       	ldi	r24, 0x01	; 1
   127a0:	e0 de       	rcall	.-576    	; 0x12562 <print_tok_val>
   127a2:	f8 01       	movw	r30, r16
   127a4:	22 81       	ldd	r18, Z+2	; 0x02
   127a6:	30 e0       	ldi	r19, 0x00	; 0
   127a8:	40 e0       	ldi	r20, 0x00	; 0
   127aa:	50 e0       	ldi	r21, 0x00	; 0
   127ac:	64 e0       	ldi	r22, 0x04	; 4
   127ae:	8f e1       	ldi	r24, 0x1F	; 31
   127b0:	d8 de       	rcall	.-592    	; 0x12562 <print_tok_val>
   127b2:	f8 01       	movw	r30, r16
   127b4:	23 81       	ldd	r18, Z+3	; 0x03
   127b6:	34 81       	ldd	r19, Z+4	; 0x04
   127b8:	45 81       	ldd	r20, Z+5	; 0x05
   127ba:	56 81       	ldd	r21, Z+6	; 0x06
   127bc:	64 e0       	ldi	r22, 0x04	; 4
   127be:	83 e0       	ldi	r24, 0x03	; 3
   127c0:	d0 de       	rcall	.-608    	; 0x12562 <print_tok_val>
   127c2:	f8 01       	movw	r30, r16
   127c4:	80 81       	ld	r24, Z
   127c6:	84 30       	cpi	r24, 0x04	; 4
   127c8:	79 f4       	brne	.+30     	; 0x127e8 <display_Addresses+0x150>
   127ca:	ed b7       	in	r30, 0x3d	; 61
   127cc:	fe b7       	in	r31, 0x3e	; 62
   127ce:	61 82       	std	Z+1, r6	; 0x01
   127d0:	72 82       	std	Z+2, r7	; 0x02
   127d2:	83 82       	std	Z+3, r8	; 0x03
   127d4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   127d8:	f8 01       	movw	r30, r16
   127da:	21 81       	ldd	r18, Z+1	; 0x01
   127dc:	30 e0       	ldi	r19, 0x00	; 0
   127de:	40 e0       	ldi	r20, 0x00	; 0
   127e0:	50 e0       	ldi	r21, 0x00	; 0
   127e2:	64 e0       	ldi	r22, 0x04	; 4
   127e4:	81 e0       	ldi	r24, 0x01	; 1
   127e6:	bd de       	rcall	.-646    	; 0x12562 <print_tok_val>
   127e8:	ed b7       	in	r30, 0x3d	; 61
   127ea:	fe b7       	in	r31, 0x3e	; 62
   127ec:	c1 82       	std	Z+1, r12	; 0x01
   127ee:	d2 82       	std	Z+2, r13	; 0x02
   127f0:	e3 82       	std	Z+3, r14	; 0x03
   127f2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   127f6:	05 5f       	subi	r16, 0xF5	; 245
   127f8:	1f 4f       	sbci	r17, 0xFF	; 255
   127fa:	ff e1       	ldi	r31, 0x1F	; 31
   127fc:	00 38       	cpi	r16, 0x80	; 128
   127fe:	1f 07       	cpc	r17, r31
   12800:	09 f0       	breq	.+2      	; 0x12804 <display_Addresses+0x16c>
   12802:	7e cf       	rjmp	.-260    	; 0x12700 <display_Addresses+0x68>
   12804:	82 e3       	ldi	r24, 0x32	; 50
   12806:	9d e1       	ldi	r25, 0x1D	; 29
   12808:	a0 e0       	ldi	r26, 0x00	; 0
   1280a:	ed b7       	in	r30, 0x3d	; 61
   1280c:	fe b7       	in	r31, 0x3e	; 62
   1280e:	81 83       	std	Z+1, r24	; 0x01
   12810:	92 83       	std	Z+2, r25	; 0x02
   12812:	a3 83       	std	Z+3, r26	; 0x03
   12814:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12818:	2a 96       	adiw	r28, 0x0a	; 10
   1281a:	0f b6       	in	r0, 0x3f	; 63
   1281c:	f8 94       	cli
   1281e:	de bf       	out	0x3e, r29	; 62
   12820:	0f be       	out	0x3f, r0	; 63
   12822:	cd bf       	out	0x3d, r28	; 61
   12824:	df 91       	pop	r29
   12826:	cf 91       	pop	r28
   12828:	1f 91       	pop	r17
   1282a:	0f 91       	pop	r16
   1282c:	ef 90       	pop	r14
   1282e:	df 90       	pop	r13
   12830:	cf 90       	pop	r12
   12832:	8f 90       	pop	r8
   12834:	7f 90       	pop	r7
   12836:	6f 90       	pop	r6
   12838:	4f 90       	pop	r4
   1283a:	3f 90       	pop	r3
   1283c:	2f 90       	pop	r2
   1283e:	08 95       	ret

00012840 <display_Config>:
   12840:	2f 92       	push	r2
   12842:	3f 92       	push	r3
   12844:	4f 92       	push	r4
   12846:	6f 92       	push	r6
   12848:	7f 92       	push	r7
   1284a:	8f 92       	push	r8
   1284c:	af 92       	push	r10
   1284e:	bf 92       	push	r11
   12850:	cf 92       	push	r12
   12852:	df 92       	push	r13
   12854:	ef 92       	push	r14
   12856:	0f 93       	push	r16
   12858:	1f 93       	push	r17
   1285a:	cf 93       	push	r28
   1285c:	df 93       	push	r29
   1285e:	cd b7       	in	r28, 0x3d	; 61
   12860:	de b7       	in	r29, 0x3e	; 62
   12862:	62 97       	sbiw	r28, 0x12	; 18
   12864:	0f b6       	in	r0, 0x3f	; 63
   12866:	f8 94       	cli
   12868:	de bf       	out	0x3e, r29	; 62
   1286a:	0f be       	out	0x3f, r0	; 63
   1286c:	cd bf       	out	0x3d, r28	; 61
   1286e:	5c 01       	movw	r10, r24
   12870:	82 e1       	ldi	r24, 0x12	; 18
   12872:	9d e1       	ldi	r25, 0x1D	; 29
   12874:	a0 e0       	ldi	r26, 0x00	; 0
   12876:	ed b7       	in	r30, 0x3d	; 61
   12878:	fe b7       	in	r31, 0x3e	; 62
   1287a:	81 83       	std	Z+1, r24	; 0x01
   1287c:	92 83       	std	Z+2, r25	; 0x02
   1287e:	a3 83       	std	Z+3, r26	; 0x03
   12880:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12884:	0c ef       	ldi	r16, 0xFC	; 252
   12886:	1e e1       	ldi	r17, 0x1E	; 30
   12888:	87 e9       	ldi	r24, 0x97	; 151
   1288a:	9c e1       	ldi	r25, 0x1C	; 28
   1288c:	9c 01       	movw	r18, r24
   1288e:	40 e0       	ldi	r20, 0x00	; 0
   12890:	28 87       	std	Y+8, r18	; 0x08
   12892:	39 87       	std	Y+9, r19	; 0x09
   12894:	4a 87       	std	Y+10, r20	; 0x0a
   12896:	8c ec       	ldi	r24, 0xCC	; 204
   12898:	9c e1       	ldi	r25, 0x1C	; 28
   1289a:	6c 01       	movw	r12, r24
   1289c:	e1 2c       	mov	r14, r1
   1289e:	8d ea       	ldi	r24, 0xAD	; 173
   128a0:	9c e1       	ldi	r25, 0x1C	; 28
   128a2:	3c 01       	movw	r6, r24
   128a4:	81 2c       	mov	r8, r1
   128a6:	89 e9       	ldi	r24, 0x99	; 153
   128a8:	9c e1       	ldi	r25, 0x1C	; 28
   128aa:	1c 01       	movw	r2, r24
   128ac:	41 2c       	mov	r4, r1
   128ae:	89 e0       	ldi	r24, 0x09	; 9
   128b0:	9d e1       	ldi	r25, 0x1D	; 29
   128b2:	9c 01       	movw	r18, r24
   128b4:	40 e0       	ldi	r20, 0x00	; 0
   128b6:	2b 87       	std	Y+11, r18	; 0x0b
   128b8:	3c 87       	std	Y+12, r19	; 0x0c
   128ba:	4d 87       	std	Y+13, r20	; 0x0d
   128bc:	8a ee       	ldi	r24, 0xEA	; 234
   128be:	9c e1       	ldi	r25, 0x1C	; 28
   128c0:	9c 01       	movw	r18, r24
   128c2:	40 e0       	ldi	r20, 0x00	; 0
   128c4:	2e 87       	std	Y+14, r18	; 0x0e
   128c6:	3f 87       	std	Y+15, r19	; 0x0f
   128c8:	48 8b       	std	Y+16, r20	; 0x10
   128ca:	f8 01       	movw	r30, r16
   128cc:	80 81       	ld	r24, Z
   128ce:	88 23       	and	r24, r24
   128d0:	09 f4       	brne	.+2      	; 0x128d4 <display_Config+0x94>
   128d2:	16 c2       	rjmp	.+1068   	; 0x12d00 <display_Config+0x4c0>
   128d4:	83 30       	cpi	r24, 0x03	; 3
   128d6:	09 f0       	breq	.+2      	; 0x128da <display_Config+0x9a>
   128d8:	3f c1       	rjmp	.+638    	; 0x12b58 <display_Config+0x318>
   128da:	27 81       	ldd	r18, Z+7	; 0x07
   128dc:	30 85       	ldd	r19, Z+8	; 0x08
   128de:	3a 8b       	std	Y+18, r19	; 0x12
   128e0:	29 8b       	std	Y+17, r18	; 0x11
   128e2:	f9 01       	movw	r30, r18
   128e4:	84 81       	ldd	r24, Z+4	; 0x04
   128e6:	95 81       	ldd	r25, Z+5	; 0x05
   128e8:	ed b7       	in	r30, 0x3d	; 61
   128ea:	fe b7       	in	r31, 0x3e	; 62
   128ec:	95 83       	std	Z+5, r25	; 0x05
   128ee:	84 83       	std	Z+4, r24	; 0x04
   128f0:	2b 85       	ldd	r18, Y+11	; 0x0b
   128f2:	3c 85       	ldd	r19, Y+12	; 0x0c
   128f4:	4d 85       	ldd	r20, Y+13	; 0x0d
   128f6:	21 83       	std	Z+1, r18	; 0x01
   128f8:	32 83       	std	Z+2, r19	; 0x02
   128fa:	43 83       	std	Z+3, r20	; 0x03
   128fc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12900:	e9 89       	ldd	r30, Y+17	; 0x11
   12902:	fa 89       	ldd	r31, Y+18	; 0x12
   12904:	80 81       	ld	r24, Z
   12906:	90 e0       	ldi	r25, 0x00	; 0
   12908:	ed b7       	in	r30, 0x3d	; 61
   1290a:	fe b7       	in	r31, 0x3e	; 62
   1290c:	95 83       	std	Z+5, r25	; 0x05
   1290e:	84 83       	std	Z+4, r24	; 0x04
   12910:	2e 85       	ldd	r18, Y+14	; 0x0e
   12912:	3f 85       	ldd	r19, Y+15	; 0x0f
   12914:	48 89       	ldd	r20, Y+16	; 0x10
   12916:	21 83       	std	Z+1, r18	; 0x01
   12918:	32 83       	std	Z+2, r19	; 0x02
   1291a:	43 83       	std	Z+3, r20	; 0x03
   1291c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12920:	64 e0       	ldi	r22, 0x04	; 4
   12922:	89 e0       	ldi	r24, 0x09	; 9
   12924:	93 de       	rcall	.-730    	; 0x1264c <print_tok>
   12926:	e9 89       	ldd	r30, Y+17	; 0x11
   12928:	fa 89       	ldd	r31, Y+18	; 0x12
   1292a:	20 81       	ld	r18, Z
   1292c:	30 e0       	ldi	r19, 0x00	; 0
   1292e:	40 e0       	ldi	r20, 0x00	; 0
   12930:	50 e0       	ldi	r21, 0x00	; 0
   12932:	68 e0       	ldi	r22, 0x08	; 8
   12934:	81 e0       	ldi	r24, 0x01	; 1
   12936:	15 de       	rcall	.-982    	; 0x12562 <print_tok_val>
   12938:	e9 89       	ldd	r30, Y+17	; 0x11
   1293a:	fa 89       	ldd	r31, Y+18	; 0x12
   1293c:	21 81       	ldd	r18, Z+1	; 0x01
   1293e:	30 e0       	ldi	r19, 0x00	; 0
   12940:	40 e0       	ldi	r20, 0x00	; 0
   12942:	50 e0       	ldi	r21, 0x00	; 0
   12944:	68 e0       	ldi	r22, 0x08	; 8
   12946:	8f e1       	ldi	r24, 0x1F	; 31
   12948:	0c de       	rcall	.-1000   	; 0x12562 <print_tok_val>
   1294a:	e9 89       	ldd	r30, Y+17	; 0x11
   1294c:	fa 89       	ldd	r31, Y+18	; 0x12
   1294e:	42 81       	ldd	r20, Z+2	; 0x02
   12950:	53 81       	ldd	r21, Z+3	; 0x03
   12952:	68 e0       	ldi	r22, 0x08	; 8
   12954:	82 e1       	ldi	r24, 0x12	; 18
   12956:	45 de       	rcall	.-886    	; 0x125e2 <print_tok_str>
   12958:	64 e0       	ldi	r22, 0x04	; 4
   1295a:	81 e1       	ldi	r24, 0x11	; 17
   1295c:	77 de       	rcall	.-786    	; 0x1264c <print_tok>
   1295e:	64 e0       	ldi	r22, 0x04	; 4
   12960:	85 e1       	ldi	r24, 0x15	; 21
   12962:	74 de       	rcall	.-792    	; 0x1264c <print_tok>
   12964:	e9 89       	ldd	r30, Y+17	; 0x11
   12966:	fa 89       	ldd	r31, Y+18	; 0x12
   12968:	26 81       	ldd	r18, Z+6	; 0x06
   1296a:	37 81       	ldd	r19, Z+7	; 0x07
   1296c:	40 e0       	ldi	r20, 0x00	; 0
   1296e:	50 e0       	ldi	r21, 0x00	; 0
   12970:	68 e0       	ldi	r22, 0x08	; 8
   12972:	87 e1       	ldi	r24, 0x17	; 23
   12974:	f6 dd       	rcall	.-1044   	; 0x12562 <print_tok_val>
   12976:	64 e0       	ldi	r22, 0x04	; 4
   12978:	81 e1       	ldi	r24, 0x11	; 17
   1297a:	68 de       	rcall	.-816    	; 0x1264c <print_tok>
   1297c:	a1 14       	cp	r10, r1
   1297e:	b1 04       	cpc	r11, r1
   12980:	09 f1       	breq	.+66     	; 0x129c4 <display_Config+0x184>
   12982:	64 e0       	ldi	r22, 0x04	; 4
   12984:	8b e0       	ldi	r24, 0x0B	; 11
   12986:	62 de       	rcall	.-828    	; 0x1264c <print_tok>
   12988:	e9 89       	ldd	r30, Y+17	; 0x11
   1298a:	fa 89       	ldd	r31, Y+18	; 0x12
   1298c:	20 85       	ldd	r18, Z+8	; 0x08
   1298e:	31 85       	ldd	r19, Z+9	; 0x09
   12990:	40 e0       	ldi	r20, 0x00	; 0
   12992:	50 e0       	ldi	r21, 0x00	; 0
   12994:	68 e0       	ldi	r22, 0x08	; 8
   12996:	88 e2       	ldi	r24, 0x28	; 40
   12998:	e4 dd       	rcall	.-1080   	; 0x12562 <print_tok_val>
   1299a:	e9 89       	ldd	r30, Y+17	; 0x11
   1299c:	fa 89       	ldd	r31, Y+18	; 0x12
   1299e:	22 85       	ldd	r18, Z+10	; 0x0a
   129a0:	33 85       	ldd	r19, Z+11	; 0x0b
   129a2:	40 e0       	ldi	r20, 0x00	; 0
   129a4:	50 e0       	ldi	r21, 0x00	; 0
   129a6:	68 e0       	ldi	r22, 0x08	; 8
   129a8:	85 e2       	ldi	r24, 0x25	; 37
   129aa:	db dd       	rcall	.-1098   	; 0x12562 <print_tok_val>
   129ac:	e9 89       	ldd	r30, Y+17	; 0x11
   129ae:	fa 89       	ldd	r31, Y+18	; 0x12
   129b0:	24 85       	ldd	r18, Z+12	; 0x0c
   129b2:	30 e0       	ldi	r19, 0x00	; 0
   129b4:	40 e0       	ldi	r20, 0x00	; 0
   129b6:	50 e0       	ldi	r21, 0x00	; 0
   129b8:	68 e0       	ldi	r22, 0x08	; 8
   129ba:	86 e2       	ldi	r24, 0x26	; 38
   129bc:	d2 dd       	rcall	.-1116   	; 0x12562 <print_tok_val>
   129be:	64 e0       	ldi	r22, 0x04	; 4
   129c0:	81 e1       	ldi	r24, 0x11	; 17
   129c2:	44 de       	rcall	.-888    	; 0x1264c <print_tok>
   129c4:	64 e0       	ldi	r22, 0x04	; 4
   129c6:	87 e2       	ldi	r24, 0x27	; 39
   129c8:	41 de       	rcall	.-894    	; 0x1264c <print_tok>
   129ca:	a1 14       	cp	r10, r1
   129cc:	b1 04       	cpc	r11, r1
   129ce:	49 f0       	breq	.+18     	; 0x129e2 <display_Config+0x1a2>
   129d0:	e9 89       	ldd	r30, Y+17	; 0x11
   129d2:	fa 89       	ldd	r31, Y+18	; 0x12
   129d4:	25 85       	ldd	r18, Z+13	; 0x0d
   129d6:	30 e0       	ldi	r19, 0x00	; 0
   129d8:	40 e0       	ldi	r20, 0x00	; 0
   129da:	50 e0       	ldi	r21, 0x00	; 0
   129dc:	68 e0       	ldi	r22, 0x08	; 8
   129de:	89 e2       	ldi	r24, 0x29	; 41
   129e0:	c0 dd       	rcall	.-1152   	; 0x12562 <print_tok_val>
   129e2:	e9 89       	ldd	r30, Y+17	; 0x11
   129e4:	fa 89       	ldd	r31, Y+18	; 0x12
   129e6:	26 85       	ldd	r18, Z+14	; 0x0e
   129e8:	37 85       	ldd	r19, Z+15	; 0x0f
   129ea:	40 89       	ldd	r20, Z+16	; 0x10
   129ec:	51 89       	ldd	r21, Z+17	; 0x11
   129ee:	68 e0       	ldi	r22, 0x08	; 8
   129f0:	8f e0       	ldi	r24, 0x0F	; 15
   129f2:	b7 dd       	rcall	.-1170   	; 0x12562 <print_tok_val>
   129f4:	a1 14       	cp	r10, r1
   129f6:	b1 04       	cpc	r11, r1
   129f8:	09 f4       	brne	.+2      	; 0x129fc <display_Config+0x1bc>
   129fa:	5a c0       	rjmp	.+180    	; 0x12ab0 <display_Config+0x270>
   129fc:	e9 89       	ldd	r30, Y+17	; 0x11
   129fe:	fa 89       	ldd	r31, Y+18	; 0x12
   12a00:	22 89       	ldd	r18, Z+18	; 0x12
   12a02:	33 89       	ldd	r19, Z+19	; 0x13
   12a04:	40 e0       	ldi	r20, 0x00	; 0
   12a06:	50 e0       	ldi	r21, 0x00	; 0
   12a08:	68 e0       	ldi	r22, 0x08	; 8
   12a0a:	87 e0       	ldi	r24, 0x07	; 7
   12a0c:	aa dd       	rcall	.-1196   	; 0x12562 <print_tok_val>
   12a0e:	e9 89       	ldd	r30, Y+17	; 0x11
   12a10:	fa 89       	ldd	r31, Y+18	; 0x12
   12a12:	24 89       	ldd	r18, Z+20	; 0x14
   12a14:	30 e0       	ldi	r19, 0x00	; 0
   12a16:	40 e0       	ldi	r20, 0x00	; 0
   12a18:	50 e0       	ldi	r21, 0x00	; 0
   12a1a:	68 e0       	ldi	r22, 0x08	; 8
   12a1c:	85 e0       	ldi	r24, 0x05	; 5
   12a1e:	a1 dd       	rcall	.-1214   	; 0x12562 <print_tok_val>
   12a20:	e9 89       	ldd	r30, Y+17	; 0x11
   12a22:	fa 89       	ldd	r31, Y+18	; 0x12
   12a24:	25 89       	ldd	r18, Z+21	; 0x15
   12a26:	30 e0       	ldi	r19, 0x00	; 0
   12a28:	40 e0       	ldi	r20, 0x00	; 0
   12a2a:	50 e0       	ldi	r21, 0x00	; 0
   12a2c:	68 e0       	ldi	r22, 0x08	; 8
   12a2e:	86 e0       	ldi	r24, 0x06	; 6
   12a30:	98 dd       	rcall	.-1232   	; 0x12562 <print_tok_val>
   12a32:	e9 89       	ldd	r30, Y+17	; 0x11
   12a34:	fa 89       	ldd	r31, Y+18	; 0x12
   12a36:	26 89       	ldd	r18, Z+22	; 0x16
   12a38:	37 89       	ldd	r19, Z+23	; 0x17
   12a3a:	40 e0       	ldi	r20, 0x00	; 0
   12a3c:	50 e0       	ldi	r21, 0x00	; 0
   12a3e:	68 e0       	ldi	r22, 0x08	; 8
   12a40:	84 e0       	ldi	r24, 0x04	; 4
   12a42:	8f dd       	rcall	.-1250   	; 0x12562 <print_tok_val>
   12a44:	e9 89       	ldd	r30, Y+17	; 0x11
   12a46:	fa 89       	ldd	r31, Y+18	; 0x12
   12a48:	20 8d       	ldd	r18, Z+24	; 0x18
   12a4a:	31 8d       	ldd	r19, Z+25	; 0x19
   12a4c:	40 e0       	ldi	r20, 0x00	; 0
   12a4e:	50 e0       	ldi	r21, 0x00	; 0
   12a50:	68 e0       	ldi	r22, 0x08	; 8
   12a52:	8a e0       	ldi	r24, 0x0A	; 10
   12a54:	86 dd       	rcall	.-1268   	; 0x12562 <print_tok_val>
   12a56:	e9 89       	ldd	r30, Y+17	; 0x11
   12a58:	fa 89       	ldd	r31, Y+18	; 0x12
   12a5a:	22 8d       	ldd	r18, Z+26	; 0x1a
   12a5c:	33 8d       	ldd	r19, Z+27	; 0x1b
   12a5e:	40 e0       	ldi	r20, 0x00	; 0
   12a60:	50 e0       	ldi	r21, 0x00	; 0
   12a62:	68 e0       	ldi	r22, 0x08	; 8
   12a64:	8e e1       	ldi	r24, 0x1E	; 30
   12a66:	7d dd       	rcall	.-1286   	; 0x12562 <print_tok_val>
   12a68:	e9 89       	ldd	r30, Y+17	; 0x11
   12a6a:	fa 89       	ldd	r31, Y+18	; 0x12
   12a6c:	24 8d       	ldd	r18, Z+28	; 0x1c
   12a6e:	35 8d       	ldd	r19, Z+29	; 0x1d
   12a70:	40 e0       	ldi	r20, 0x00	; 0
   12a72:	50 e0       	ldi	r21, 0x00	; 0
   12a74:	68 e0       	ldi	r22, 0x08	; 8
   12a76:	80 e0       	ldi	r24, 0x00	; 0
   12a78:	74 dd       	rcall	.-1304   	; 0x12562 <print_tok_val>
   12a7a:	e9 89       	ldd	r30, Y+17	; 0x11
   12a7c:	fa 89       	ldd	r31, Y+18	; 0x12
   12a7e:	26 8d       	ldd	r18, Z+30	; 0x1e
   12a80:	30 e0       	ldi	r19, 0x00	; 0
   12a82:	40 e0       	ldi	r20, 0x00	; 0
   12a84:	50 e0       	ldi	r21, 0x00	; 0
   12a86:	68 e0       	ldi	r22, 0x08	; 8
   12a88:	8c e1       	ldi	r24, 0x1C	; 28
   12a8a:	6b dd       	rcall	.-1322   	; 0x12562 <print_tok_val>
   12a8c:	e9 89       	ldd	r30, Y+17	; 0x11
   12a8e:	fa 89       	ldd	r31, Y+18	; 0x12
   12a90:	27 8d       	ldd	r18, Z+31	; 0x1f
   12a92:	30 e0       	ldi	r19, 0x00	; 0
   12a94:	40 e0       	ldi	r20, 0x00	; 0
   12a96:	50 e0       	ldi	r21, 0x00	; 0
   12a98:	68 e0       	ldi	r22, 0x08	; 8
   12a9a:	83 e1       	ldi	r24, 0x13	; 19
   12a9c:	62 dd       	rcall	.-1340   	; 0x12562 <print_tok_val>
   12a9e:	e9 89       	ldd	r30, Y+17	; 0x11
   12aa0:	fa 89       	ldd	r31, Y+18	; 0x12
   12aa2:	20 a1       	ldd	r18, Z+32	; 0x20
   12aa4:	30 e0       	ldi	r19, 0x00	; 0
   12aa6:	40 e0       	ldi	r20, 0x00	; 0
   12aa8:	50 e0       	ldi	r21, 0x00	; 0
   12aaa:	68 e0       	ldi	r22, 0x08	; 8
   12aac:	81 e2       	ldi	r24, 0x21	; 33
   12aae:	59 dd       	rcall	.-1358   	; 0x12562 <print_tok_val>
   12ab0:	64 e0       	ldi	r22, 0x04	; 4
   12ab2:	81 e1       	ldi	r24, 0x11	; 17
   12ab4:	cb dd       	rcall	.-1130   	; 0x1264c <print_tok>
   12ab6:	a1 14       	cp	r10, r1
   12ab8:	b1 04       	cpc	r11, r1
   12aba:	99 f1       	breq	.+102    	; 0x12b22 <display_Config+0x2e2>
   12abc:	64 e0       	ldi	r22, 0x04	; 4
   12abe:	8a e2       	ldi	r24, 0x2A	; 42
   12ac0:	c5 dd       	rcall	.-1142   	; 0x1264c <print_tok>
   12ac2:	e9 89       	ldd	r30, Y+17	; 0x11
   12ac4:	fa 89       	ldd	r31, Y+18	; 0x12
   12ac6:	21 a1       	ldd	r18, Z+33	; 0x21
   12ac8:	32 a1       	ldd	r19, Z+34	; 0x22
   12aca:	43 a1       	ldd	r20, Z+35	; 0x23
   12acc:	54 a1       	ldd	r21, Z+36	; 0x24
   12ace:	68 e0       	ldi	r22, 0x08	; 8
   12ad0:	8a e1       	ldi	r24, 0x1A	; 26
   12ad2:	47 dd       	rcall	.-1394   	; 0x12562 <print_tok_val>
   12ad4:	e9 89       	ldd	r30, Y+17	; 0x11
   12ad6:	fa 89       	ldd	r31, Y+18	; 0x12
   12ad8:	25 a1       	ldd	r18, Z+37	; 0x25
   12ada:	30 e0       	ldi	r19, 0x00	; 0
   12adc:	40 e0       	ldi	r20, 0x00	; 0
   12ade:	50 e0       	ldi	r21, 0x00	; 0
   12ae0:	68 e0       	ldi	r22, 0x08	; 8
   12ae2:	8b e1       	ldi	r24, 0x1B	; 27
   12ae4:	3e dd       	rcall	.-1412   	; 0x12562 <print_tok_val>
   12ae6:	e9 89       	ldd	r30, Y+17	; 0x11
   12ae8:	fa 89       	ldd	r31, Y+18	; 0x12
   12aea:	26 a1       	ldd	r18, Z+38	; 0x26
   12aec:	37 a1       	ldd	r19, Z+39	; 0x27
   12aee:	40 e0       	ldi	r20, 0x00	; 0
   12af0:	50 e0       	ldi	r21, 0x00	; 0
   12af2:	68 e0       	ldi	r22, 0x08	; 8
   12af4:	8d e1       	ldi	r24, 0x1D	; 29
   12af6:	35 dd       	rcall	.-1430   	; 0x12562 <print_tok_val>
   12af8:	e9 89       	ldd	r30, Y+17	; 0x11
   12afa:	fa 89       	ldd	r31, Y+18	; 0x12
   12afc:	20 a5       	ldd	r18, Z+40	; 0x28
   12afe:	31 a5       	ldd	r19, Z+41	; 0x29
   12b00:	42 a5       	ldd	r20, Z+42	; 0x2a
   12b02:	53 a5       	ldd	r21, Z+43	; 0x2b
   12b04:	68 e0       	ldi	r22, 0x08	; 8
   12b06:	89 e1       	ldi	r24, 0x19	; 25
   12b08:	2c dd       	rcall	.-1448   	; 0x12562 <print_tok_val>
   12b0a:	e9 89       	ldd	r30, Y+17	; 0x11
   12b0c:	fa 89       	ldd	r31, Y+18	; 0x12
   12b0e:	24 a5       	ldd	r18, Z+44	; 0x2c
   12b10:	30 e0       	ldi	r19, 0x00	; 0
   12b12:	40 e0       	ldi	r20, 0x00	; 0
   12b14:	50 e0       	ldi	r21, 0x00	; 0
   12b16:	68 e0       	ldi	r22, 0x08	; 8
   12b18:	88 e1       	ldi	r24, 0x18	; 24
   12b1a:	23 dd       	rcall	.-1466   	; 0x12562 <print_tok_val>
   12b1c:	64 e0       	ldi	r22, 0x04	; 4
   12b1e:	81 e1       	ldi	r24, 0x11	; 17
   12b20:	95 dd       	rcall	.-1238   	; 0x1264c <print_tok>
   12b22:	e9 89       	ldd	r30, Y+17	; 0x11
   12b24:	fa 89       	ldd	r31, Y+18	; 0x12
   12b26:	80 a5       	ldd	r24, Z+40	; 0x28
   12b28:	91 a5       	ldd	r25, Z+41	; 0x29
   12b2a:	a2 a5       	ldd	r26, Z+42	; 0x2a
   12b2c:	b3 a5       	ldd	r27, Z+43	; 0x2b
   12b2e:	01 96       	adiw	r24, 0x01	; 1
   12b30:	a1 1d       	adc	r26, r1
   12b32:	b1 1d       	adc	r27, r1
   12b34:	ed b7       	in	r30, 0x3d	; 61
   12b36:	fe b7       	in	r31, 0x3e	; 62
   12b38:	84 83       	std	Z+4, r24	; 0x04
   12b3a:	95 83       	std	Z+5, r25	; 0x05
   12b3c:	a6 83       	std	Z+6, r26	; 0x06
   12b3e:	b7 83       	std	Z+7, r27	; 0x07
   12b40:	26 ed       	ldi	r18, 0xD6	; 214
   12b42:	3c e1       	ldi	r19, 0x1C	; 28
   12b44:	c9 01       	movw	r24, r18
   12b46:	a0 e0       	ldi	r26, 0x00	; 0
   12b48:	81 83       	std	Z+1, r24	; 0x01
   12b4a:	92 83       	std	Z+2, r25	; 0x02
   12b4c:	a3 83       	std	Z+3, r26	; 0x03
   12b4e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12b52:	60 e0       	ldi	r22, 0x00	; 0
   12b54:	81 e1       	ldi	r24, 0x11	; 17
   12b56:	7a dd       	rcall	.-1292   	; 0x1264c <print_tok>
   12b58:	f8 01       	movw	r30, r16
   12b5a:	80 81       	ld	r24, Z
   12b5c:	81 30       	cpi	r24, 0x01	; 1
   12b5e:	09 f0       	breq	.+2      	; 0x12b62 <display_Config+0x322>
   12b60:	a8 c0       	rjmp	.+336    	; 0x12cb2 <display_Config+0x472>
   12b62:	27 81       	ldd	r18, Z+7	; 0x07
   12b64:	30 85       	ldd	r19, Z+8	; 0x08
   12b66:	3a 8b       	std	Y+18, r19	; 0x12
   12b68:	29 8b       	std	Y+17, r18	; 0x11
   12b6a:	f9 01       	movw	r30, r18
   12b6c:	84 81       	ldd	r24, Z+4	; 0x04
   12b6e:	95 81       	ldd	r25, Z+5	; 0x05
   12b70:	ed b7       	in	r30, 0x3d	; 61
   12b72:	fe b7       	in	r31, 0x3e	; 62
   12b74:	95 83       	std	Z+5, r25	; 0x05
   12b76:	84 83       	std	Z+4, r24	; 0x04
   12b78:	c1 82       	std	Z+1, r12	; 0x01
   12b7a:	d2 82       	std	Z+2, r13	; 0x02
   12b7c:	e3 82       	std	Z+3, r14	; 0x03
   12b7e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12b82:	e9 89       	ldd	r30, Y+17	; 0x11
   12b84:	fa 89       	ldd	r31, Y+18	; 0x12
   12b86:	80 81       	ld	r24, Z
   12b88:	90 e0       	ldi	r25, 0x00	; 0
   12b8a:	ed b7       	in	r30, 0x3d	; 61
   12b8c:	fe b7       	in	r31, 0x3e	; 62
   12b8e:	95 83       	std	Z+5, r25	; 0x05
   12b90:	84 83       	std	Z+4, r24	; 0x04
   12b92:	61 82       	std	Z+1, r6	; 0x01
   12b94:	72 82       	std	Z+2, r7	; 0x02
   12b96:	83 82       	std	Z+3, r8	; 0x03
   12b98:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12b9c:	64 e0       	ldi	r22, 0x04	; 4
   12b9e:	85 e1       	ldi	r24, 0x15	; 21
   12ba0:	55 dd       	rcall	.-1366   	; 0x1264c <print_tok>
   12ba2:	e9 89       	ldd	r30, Y+17	; 0x11
   12ba4:	fa 89       	ldd	r31, Y+18	; 0x12
   12ba6:	20 81       	ld	r18, Z
   12ba8:	30 e0       	ldi	r19, 0x00	; 0
   12baa:	40 e0       	ldi	r20, 0x00	; 0
   12bac:	50 e0       	ldi	r21, 0x00	; 0
   12bae:	68 e0       	ldi	r22, 0x08	; 8
   12bb0:	81 e0       	ldi	r24, 0x01	; 1
   12bb2:	d7 dc       	rcall	.-1618   	; 0x12562 <print_tok_val>
   12bb4:	e9 89       	ldd	r30, Y+17	; 0x11
   12bb6:	fa 89       	ldd	r31, Y+18	; 0x12
   12bb8:	21 81       	ldd	r18, Z+1	; 0x01
   12bba:	30 e0       	ldi	r19, 0x00	; 0
   12bbc:	40 e0       	ldi	r20, 0x00	; 0
   12bbe:	50 e0       	ldi	r21, 0x00	; 0
   12bc0:	68 e0       	ldi	r22, 0x08	; 8
   12bc2:	8f e1       	ldi	r24, 0x1F	; 31
   12bc4:	ce dc       	rcall	.-1636   	; 0x12562 <print_tok_val>
   12bc6:	e9 89       	ldd	r30, Y+17	; 0x11
   12bc8:	fa 89       	ldd	r31, Y+18	; 0x12
   12bca:	42 81       	ldd	r20, Z+2	; 0x02
   12bcc:	53 81       	ldd	r21, Z+3	; 0x03
   12bce:	68 e0       	ldi	r22, 0x08	; 8
   12bd0:	82 e1       	ldi	r24, 0x12	; 18
   12bd2:	07 dd       	rcall	.-1522   	; 0x125e2 <print_tok_str>
   12bd4:	64 e0       	ldi	r22, 0x04	; 4
   12bd6:	81 e1       	ldi	r24, 0x11	; 17
   12bd8:	39 dd       	rcall	.-1422   	; 0x1264c <print_tok>
   12bda:	64 e0       	ldi	r22, 0x04	; 4
   12bdc:	89 e0       	ldi	r24, 0x09	; 9
   12bde:	36 dd       	rcall	.-1428   	; 0x1264c <print_tok>
   12be0:	e9 89       	ldd	r30, Y+17	; 0x11
   12be2:	fa 89       	ldd	r31, Y+18	; 0x12
   12be4:	26 81       	ldd	r18, Z+6	; 0x06
   12be6:	37 81       	ldd	r19, Z+7	; 0x07
   12be8:	40 e0       	ldi	r20, 0x00	; 0
   12bea:	50 e0       	ldi	r21, 0x00	; 0
   12bec:	68 e0       	ldi	r22, 0x08	; 8
   12bee:	87 e1       	ldi	r24, 0x17	; 23
   12bf0:	b8 dc       	rcall	.-1680   	; 0x12562 <print_tok_val>
   12bf2:	64 e0       	ldi	r22, 0x04	; 4
   12bf4:	81 e1       	ldi	r24, 0x11	; 17
   12bf6:	2a dd       	rcall	.-1452   	; 0x1264c <print_tok>
   12bf8:	a1 14       	cp	r10, r1
   12bfa:	b1 04       	cpc	r11, r1
   12bfc:	91 f1       	breq	.+100    	; 0x12c62 <display_Config+0x422>
   12bfe:	64 e0       	ldi	r22, 0x04	; 4
   12c00:	84 e1       	ldi	r24, 0x14	; 20
   12c02:	24 dd       	rcall	.-1464   	; 0x1264c <print_tok>
   12c04:	e9 89       	ldd	r30, Y+17	; 0x11
   12c06:	fa 89       	ldd	r31, Y+18	; 0x12
   12c08:	20 85       	ldd	r18, Z+8	; 0x08
   12c0a:	31 85       	ldd	r19, Z+9	; 0x09
   12c0c:	03 2e       	mov	r0, r19
   12c0e:	00 0c       	add	r0, r0
   12c10:	44 0b       	sbc	r20, r20
   12c12:	55 0b       	sbc	r21, r21
   12c14:	68 e0       	ldi	r22, 0x08	; 8
   12c16:	88 e0       	ldi	r24, 0x08	; 8
   12c18:	a4 dc       	rcall	.-1720   	; 0x12562 <print_tok_val>
   12c1a:	e9 89       	ldd	r30, Y+17	; 0x11
   12c1c:	fa 89       	ldd	r31, Y+18	; 0x12
   12c1e:	22 85       	ldd	r18, Z+10	; 0x0a
   12c20:	33 85       	ldd	r19, Z+11	; 0x0b
   12c22:	03 2e       	mov	r0, r19
   12c24:	00 0c       	add	r0, r0
   12c26:	44 0b       	sbc	r20, r20
   12c28:	55 0b       	sbc	r21, r21
   12c2a:	68 e0       	ldi	r22, 0x08	; 8
   12c2c:	82 e2       	ldi	r24, 0x22	; 34
   12c2e:	99 dc       	rcall	.-1742   	; 0x12562 <print_tok_val>
   12c30:	e9 89       	ldd	r30, Y+17	; 0x11
   12c32:	fa 89       	ldd	r31, Y+18	; 0x12
   12c34:	24 85       	ldd	r18, Z+12	; 0x0c
   12c36:	35 85       	ldd	r19, Z+13	; 0x0d
   12c38:	03 2e       	mov	r0, r19
   12c3a:	00 0c       	add	r0, r0
   12c3c:	44 0b       	sbc	r20, r20
   12c3e:	55 0b       	sbc	r21, r21
   12c40:	68 e0       	ldi	r22, 0x08	; 8
   12c42:	86 e1       	ldi	r24, 0x16	; 22
   12c44:	8e dc       	rcall	.-1764   	; 0x12562 <print_tok_val>
   12c46:	e9 89       	ldd	r30, Y+17	; 0x11
   12c48:	fa 89       	ldd	r31, Y+18	; 0x12
   12c4a:	26 85       	ldd	r18, Z+14	; 0x0e
   12c4c:	37 85       	ldd	r19, Z+15	; 0x0f
   12c4e:	03 2e       	mov	r0, r19
   12c50:	00 0c       	add	r0, r0
   12c52:	44 0b       	sbc	r20, r20
   12c54:	55 0b       	sbc	r21, r21
   12c56:	68 e0       	ldi	r22, 0x08	; 8
   12c58:	8d e0       	ldi	r24, 0x0D	; 13
   12c5a:	83 dc       	rcall	.-1786   	; 0x12562 <print_tok_val>
   12c5c:	64 e0       	ldi	r22, 0x04	; 4
   12c5e:	81 e1       	ldi	r24, 0x11	; 17
   12c60:	f5 dc       	rcall	.-1558   	; 0x1264c <print_tok>
   12c62:	e9 89       	ldd	r30, Y+17	; 0x11
   12c64:	fa 89       	ldd	r31, Y+18	; 0x12
   12c66:	46 85       	ldd	r20, Z+14	; 0x0e
   12c68:	57 85       	ldd	r21, Z+15	; 0x0f
   12c6a:	22 85       	ldd	r18, Z+10	; 0x0a
   12c6c:	33 85       	ldd	r19, Z+11	; 0x0b
   12c6e:	42 9f       	mul	r20, r18
   12c70:	c0 01       	movw	r24, r0
   12c72:	43 9f       	mul	r20, r19
   12c74:	90 0d       	add	r25, r0
   12c76:	52 9f       	mul	r21, r18
   12c78:	90 0d       	add	r25, r0
   12c7a:	11 24       	eor	r1, r1
   12c7c:	44 85       	ldd	r20, Z+12	; 0x0c
   12c7e:	55 85       	ldd	r21, Z+13	; 0x0d
   12c80:	84 9f       	mul	r24, r20
   12c82:	90 01       	movw	r18, r0
   12c84:	85 9f       	mul	r24, r21
   12c86:	30 0d       	add	r19, r0
   12c88:	94 9f       	mul	r25, r20
   12c8a:	30 0d       	add	r19, r0
   12c8c:	11 24       	eor	r1, r1
   12c8e:	c9 01       	movw	r24, r18
   12c90:	33 0f       	add	r19, r19
   12c92:	aa 0b       	sbc	r26, r26
   12c94:	bb 0b       	sbc	r27, r27
   12c96:	ed b7       	in	r30, 0x3d	; 61
   12c98:	fe b7       	in	r31, 0x3e	; 62
   12c9a:	84 83       	std	Z+4, r24	; 0x04
   12c9c:	95 83       	std	Z+5, r25	; 0x05
   12c9e:	a6 83       	std	Z+6, r26	; 0x06
   12ca0:	b7 83       	std	Z+7, r27	; 0x07
   12ca2:	21 82       	std	Z+1, r2	; 0x01
   12ca4:	32 82       	std	Z+2, r3	; 0x02
   12ca6:	43 82       	std	Z+3, r4	; 0x03
   12ca8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12cac:	60 e0       	ldi	r22, 0x00	; 0
   12cae:	81 e1       	ldi	r24, 0x11	; 17
   12cb0:	cd dc       	rcall	.-1638   	; 0x1264c <print_tok>
   12cb2:	f8 01       	movw	r30, r16
   12cb4:	80 81       	ld	r24, Z
   12cb6:	84 30       	cpi	r24, 0x04	; 4
   12cb8:	c9 f4       	brne	.+50     	; 0x12cec <display_Config+0x4ac>
   12cba:	27 81       	ldd	r18, Z+7	; 0x07
   12cbc:	30 85       	ldd	r19, Z+8	; 0x08
   12cbe:	3a 8b       	std	Y+18, r19	; 0x12
   12cc0:	29 8b       	std	Y+17, r18	; 0x11
   12cc2:	60 e0       	ldi	r22, 0x00	; 0
   12cc4:	80 e2       	ldi	r24, 0x20	; 32
   12cc6:	c2 dc       	rcall	.-1660   	; 0x1264c <print_tok>
   12cc8:	64 e0       	ldi	r22, 0x04	; 4
   12cca:	89 e0       	ldi	r24, 0x09	; 9
   12ccc:	bf dc       	rcall	.-1666   	; 0x1264c <print_tok>
   12cce:	e9 89       	ldd	r30, Y+17	; 0x11
   12cd0:	fa 89       	ldd	r31, Y+18	; 0x12
   12cd2:	20 81       	ld	r18, Z
   12cd4:	30 e0       	ldi	r19, 0x00	; 0
   12cd6:	40 e0       	ldi	r20, 0x00	; 0
   12cd8:	50 e0       	ldi	r21, 0x00	; 0
   12cda:	68 e0       	ldi	r22, 0x08	; 8
   12cdc:	81 e0       	ldi	r24, 0x01	; 1
   12cde:	41 dc       	rcall	.-1918   	; 0x12562 <print_tok_val>
   12ce0:	64 e0       	ldi	r22, 0x04	; 4
   12ce2:	81 e1       	ldi	r24, 0x11	; 17
   12ce4:	b3 dc       	rcall	.-1690   	; 0x1264c <print_tok>
   12ce6:	60 e0       	ldi	r22, 0x00	; 0
   12ce8:	81 e1       	ldi	r24, 0x11	; 17
   12cea:	b0 dc       	rcall	.-1696   	; 0x1264c <print_tok>
   12cec:	28 85       	ldd	r18, Y+8	; 0x08
   12cee:	39 85       	ldd	r19, Y+9	; 0x09
   12cf0:	4a 85       	ldd	r20, Y+10	; 0x0a
   12cf2:	ed b7       	in	r30, 0x3d	; 61
   12cf4:	fe b7       	in	r31, 0x3e	; 62
   12cf6:	21 83       	std	Z+1, r18	; 0x01
   12cf8:	32 83       	std	Z+2, r19	; 0x02
   12cfa:	43 83       	std	Z+3, r20	; 0x03
   12cfc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12d00:	05 5f       	subi	r16, 0xF5	; 245
   12d02:	1f 4f       	sbci	r17, 0xFF	; 255
   12d04:	20 e8       	ldi	r18, 0x80	; 128
   12d06:	3f e1       	ldi	r19, 0x1F	; 31
   12d08:	20 17       	cp	r18, r16
   12d0a:	31 07       	cpc	r19, r17
   12d0c:	09 f0       	breq	.+2      	; 0x12d10 <display_Config+0x4d0>
   12d0e:	dd cd       	rjmp	.-1094   	; 0x128ca <display_Config+0x8a>
   12d10:	85 e9       	ldi	r24, 0x95	; 149
   12d12:	9c e1       	ldi	r25, 0x1C	; 28
   12d14:	a0 e0       	ldi	r26, 0x00	; 0
   12d16:	ed b7       	in	r30, 0x3d	; 61
   12d18:	fe b7       	in	r31, 0x3e	; 62
   12d1a:	81 83       	std	Z+1, r24	; 0x01
   12d1c:	92 83       	std	Z+2, r25	; 0x02
   12d1e:	a3 83       	std	Z+3, r26	; 0x03
   12d20:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12d24:	62 96       	adiw	r28, 0x12	; 18
   12d26:	0f b6       	in	r0, 0x3f	; 63
   12d28:	f8 94       	cli
   12d2a:	de bf       	out	0x3e, r29	; 62
   12d2c:	0f be       	out	0x3f, r0	; 63
   12d2e:	cd bf       	out	0x3d, r28	; 61
   12d30:	df 91       	pop	r29
   12d32:	cf 91       	pop	r28
   12d34:	1f 91       	pop	r17
   12d36:	0f 91       	pop	r16
   12d38:	ef 90       	pop	r14
   12d3a:	df 90       	pop	r13
   12d3c:	cf 90       	pop	r12
   12d3e:	bf 90       	pop	r11
   12d40:	af 90       	pop	r10
   12d42:	8f 90       	pop	r8
   12d44:	7f 90       	pop	r7
   12d46:	6f 90       	pop	r6
   12d48:	4f 90       	pop	r4
   12d4a:	3f 90       	pop	r3
   12d4c:	2f 90       	pop	r2
   12d4e:	08 95       	ret

00012d50 <find_type>:
   12d50:	ec ef       	ldi	r30, 0xFC	; 252
   12d52:	fe e1       	ldi	r31, 0x1E	; 30
   12d54:	20 e0       	ldi	r18, 0x00	; 0
   12d56:	30 e0       	ldi	r19, 0x00	; 0
   12d58:	40 81       	ld	r20, Z
   12d5a:	50 e0       	ldi	r21, 0x00	; 0
   12d5c:	48 17       	cp	r20, r24
   12d5e:	59 07       	cpc	r21, r25
   12d60:	11 f4       	brne	.+4      	; 0x12d66 <find_type+0x16>
   12d62:	82 2f       	mov	r24, r18
   12d64:	08 95       	ret
   12d66:	2f 5f       	subi	r18, 0xFF	; 255
   12d68:	3f 4f       	sbci	r19, 0xFF	; 255
   12d6a:	3b 96       	adiw	r30, 0x0b	; 11
   12d6c:	2c 30       	cpi	r18, 0x0C	; 12
   12d6e:	31 05       	cpc	r19, r1
   12d70:	99 f7       	brne	.-26     	; 0x12d58 <find_type+0x8>
   12d72:	8f ef       	ldi	r24, 0xFF	; 255
   12d74:	08 95       	ret

00012d76 <count_drive_types>:
   12d76:	ec ef       	ldi	r30, 0xFC	; 252
   12d78:	fe e1       	ldi	r31, 0x1E	; 30
   12d7a:	20 e0       	ldi	r18, 0x00	; 0
   12d7c:	30 e0       	ldi	r19, 0x00	; 0
   12d7e:	90 81       	ld	r25, Z
   12d80:	98 13       	cpse	r25, r24
   12d82:	02 c0       	rjmp	.+4      	; 0x12d88 <count_drive_types+0x12>
   12d84:	2f 5f       	subi	r18, 0xFF	; 255
   12d86:	3f 4f       	sbci	r19, 0xFF	; 255
   12d88:	3b 96       	adiw	r30, 0x0b	; 11
   12d8a:	9f e1       	ldi	r25, 0x1F	; 31
   12d8c:	e0 38       	cpi	r30, 0x80	; 128
   12d8e:	f9 07       	cpc	r31, r25
   12d90:	b1 f7       	brne	.-20     	; 0x12d7e <count_drive_types+0x8>
   12d92:	82 2f       	mov	r24, r18
   12d94:	08 95       	ret

00012d96 <type_to_str>:
   12d96:	00 97       	sbiw	r24, 0x00	; 0
   12d98:	59 f0       	breq	.+22     	; 0x12db0 <type_to_str+0x1a>
   12d9a:	81 30       	cpi	r24, 0x01	; 1
   12d9c:	91 05       	cpc	r25, r1
   12d9e:	59 f0       	breq	.+22     	; 0x12db6 <type_to_str+0x20>
   12da0:	83 30       	cpi	r24, 0x03	; 3
   12da2:	91 05       	cpc	r25, r1
   12da4:	59 f0       	breq	.+22     	; 0x12dbc <type_to_str+0x26>
   12da6:	04 97       	sbiw	r24, 0x04	; 4
   12da8:	61 f0       	breq	.+24     	; 0x12dc2 <type_to_str+0x2c>
   12daa:	8e e0       	ldi	r24, 0x0E	; 14
   12dac:	9e e0       	ldi	r25, 0x0E	; 14
   12dae:	08 95       	ret
   12db0:	84 ee       	ldi	r24, 0xE4	; 228
   12db2:	9d e0       	ldi	r25, 0x0D	; 13
   12db4:	08 95       	ret
   12db6:	8c ee       	ldi	r24, 0xEC	; 236
   12db8:	9d e0       	ldi	r25, 0x0D	; 13
   12dba:	08 95       	ret
   12dbc:	84 e0       	ldi	r24, 0x04	; 4
   12dbe:	9e e0       	ldi	r25, 0x0E	; 14
   12dc0:	08 95       	ret
   12dc2:	87 ef       	ldi	r24, 0xF7	; 247
   12dc4:	9d e0       	ldi	r25, 0x0D	; 13
   12dc6:	08 95       	ret

00012dc8 <find_free>:
   12dc8:	80 e0       	ldi	r24, 0x00	; 0
   12dca:	90 e0       	ldi	r25, 0x00	; 0
   12dcc:	c1 cf       	rjmp	.-126    	; 0x12d50 <find_type>
   12dce:	08 95       	ret

00012dd0 <find_device>:
   12dd0:	9b 01       	movw	r18, r22
   12dd2:	20 52       	subi	r18, 0x20	; 32
   12dd4:	31 09       	sbc	r19, r1
   12dd6:	2f 35       	cpi	r18, 0x5F	; 95
   12dd8:	31 05       	cpc	r19, r1
   12dda:	08 f5       	brcc	.+66     	; 0x12e1e <find_device+0x4e>
   12ddc:	64 17       	cp	r22, r20
   12dde:	75 07       	cpc	r23, r21
   12de0:	f4 f0       	brlt	.+60     	; 0x12e1e <find_device+0x4e>
   12de2:	9a 01       	movw	r18, r20
   12de4:	22 5e       	subi	r18, 0xE2	; 226
   12de6:	3f 4f       	sbci	r19, 0xFF	; 255
   12de8:	26 17       	cp	r18, r22
   12dea:	37 07       	cpc	r19, r23
   12dec:	c4 f0       	brlt	.+48     	; 0x12e1e <find_device+0x4e>
   12dee:	64 1b       	sub	r22, r20
   12df0:	75 0b       	sbc	r23, r21
   12df2:	ec ef       	ldi	r30, 0xFC	; 252
   12df4:	fe e1       	ldi	r31, 0x1E	; 30
   12df6:	20 e0       	ldi	r18, 0x00	; 0
   12df8:	30 e0       	ldi	r19, 0x00	; 0
   12dfa:	40 81       	ld	r20, Z
   12dfc:	50 e0       	ldi	r21, 0x00	; 0
   12dfe:	48 17       	cp	r20, r24
   12e00:	59 07       	cpc	r21, r25
   12e02:	39 f4       	brne	.+14     	; 0x12e12 <find_device+0x42>
   12e04:	41 81       	ldd	r20, Z+1	; 0x01
   12e06:	50 e0       	ldi	r21, 0x00	; 0
   12e08:	64 17       	cp	r22, r20
   12e0a:	75 07       	cpc	r23, r21
   12e0c:	11 f4       	brne	.+4      	; 0x12e12 <find_device+0x42>
   12e0e:	82 2f       	mov	r24, r18
   12e10:	08 95       	ret
   12e12:	2f 5f       	subi	r18, 0xFF	; 255
   12e14:	3f 4f       	sbci	r19, 0xFF	; 255
   12e16:	3b 96       	adiw	r30, 0x0b	; 11
   12e18:	2c 30       	cpi	r18, 0x0C	; 12
   12e1a:	31 05       	cpc	r19, r1
   12e1c:	71 f7       	brne	.-36     	; 0x12dfa <find_device+0x2a>
   12e1e:	8f ef       	ldi	r24, 0xFF	; 255
   12e20:	08 95       	ret

00012e22 <set_active_device>:
   12e22:	a9 e0       	ldi	r26, 0x09	; 9
   12e24:	b0 e0       	ldi	r27, 0x00	; 0
   12e26:	e7 e1       	ldi	r30, 0x17	; 23
   12e28:	f7 e9       	ldi	r31, 0x97	; 151
   12e2a:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
   12e2e:	8f 3f       	cpi	r24, 0xFF	; 255
   12e30:	09 f4       	brne	.+2      	; 0x12e34 <set_active_device+0x12>
   12e32:	b5 c0       	rjmp	.+362    	; 0x12f9e <set_active_device+0x17c>
   12e34:	e8 2f       	mov	r30, r24
   12e36:	8c 30       	cpi	r24, 0x0C	; 12
   12e38:	a0 f0       	brcs	.+40     	; 0x12e62 <set_active_device+0x40>
   12e3a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12e3e:	80 ff       	sbrs	r24, 0
   12e40:	ae c0       	rjmp	.+348    	; 0x12f9e <set_active_device+0x17c>
   12e42:	0e 2e       	mov	r0, r30
   12e44:	00 0c       	add	r0, r0
   12e46:	ff 0b       	sbc	r31, r31
   12e48:	cd b7       	in	r28, 0x3d	; 61
   12e4a:	de b7       	in	r29, 0x3e	; 62
   12e4c:	fd 83       	std	Y+5, r31	; 0x05
   12e4e:	ec 83       	std	Y+4, r30	; 0x04
   12e50:	80 e7       	ldi	r24, 0x70	; 112
   12e52:	9c e1       	ldi	r25, 0x1C	; 28
   12e54:	a0 e0       	ldi	r26, 0x00	; 0
   12e56:	89 83       	std	Y+1, r24	; 0x01
   12e58:	9a 83       	std	Y+2, r25	; 0x02
   12e5a:	ab 83       	std	Y+3, r26	; 0x03
   12e5c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12e60:	9e c0       	rjmp	.+316    	; 0x12f9e <set_active_device+0x17c>
   12e62:	08 2f       	mov	r16, r24
   12e64:	88 0f       	add	r24, r24
   12e66:	11 0b       	sbc	r17, r17
   12e68:	8b e0       	ldi	r24, 0x0B	; 11
   12e6a:	e8 02       	muls	r30, r24
   12e6c:	f0 01       	movw	r30, r0
   12e6e:	11 24       	eor	r1, r1
   12e70:	e4 50       	subi	r30, 0x04	; 4
   12e72:	f1 4e       	sbci	r31, 0xE1	; 225
   12e74:	81 81       	ldd	r24, Z+1	; 0x01
   12e76:	8f 31       	cpi	r24, 0x1F	; 31
   12e78:	a0 f0       	brcs	.+40     	; 0x12ea2 <set_active_device+0x80>
   12e7a:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   12e7e:	90 ff       	sbrs	r25, 0
   12e80:	8e c0       	rjmp	.+284    	; 0x12f9e <set_active_device+0x17c>
   12e82:	90 e0       	ldi	r25, 0x00	; 0
   12e84:	cd b7       	in	r28, 0x3d	; 61
   12e86:	de b7       	in	r29, 0x3e	; 62
   12e88:	9f 83       	std	Y+7, r25	; 0x07
   12e8a:	8e 83       	std	Y+6, r24	; 0x06
   12e8c:	1d 83       	std	Y+5, r17	; 0x05
   12e8e:	0c 83       	std	Y+4, r16	; 0x04
   12e90:	87 e3       	ldi	r24, 0x37	; 55
   12e92:	9c e1       	ldi	r25, 0x1C	; 28
   12e94:	a0 e0       	ldi	r26, 0x00	; 0
   12e96:	89 83       	std	Y+1, r24	; 0x01
   12e98:	9a 83       	std	Y+2, r25	; 0x02
   12e9a:	ab 83       	std	Y+3, r26	; 0x03
   12e9c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12ea0:	7e c0       	rjmp	.+252    	; 0x12f9e <set_active_device+0x17c>
   12ea2:	20 81       	ld	r18, Z
   12ea4:	c2 2f       	mov	r28, r18
   12ea6:	d0 e0       	ldi	r29, 0x00	; 0
   12ea8:	87 81       	ldd	r24, Z+7	; 0x07
   12eaa:	90 85       	ldd	r25, Z+8	; 0x08
   12eac:	00 97       	sbiw	r24, 0x00	; 0
   12eae:	89 f4       	brne	.+34     	; 0x12ed2 <set_active_device+0xb0>
   12eb0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12eb4:	80 ff       	sbrs	r24, 0
   12eb6:	73 c0       	rjmp	.+230    	; 0x12f9e <set_active_device+0x17c>
   12eb8:	ce 01       	movw	r24, r28
   12eba:	6d df       	rcall	.-294    	; 0x12d96 <type_to_str>
   12ebc:	ed b7       	in	r30, 0x3d	; 61
   12ebe:	fe b7       	in	r31, 0x3e	; 62
   12ec0:	91 87       	std	Z+9, r25	; 0x09
   12ec2:	80 87       	std	Z+8, r24	; 0x08
   12ec4:	d7 83       	std	Z+7, r29	; 0x07
   12ec6:	c6 83       	std	Z+6, r28	; 0x06
   12ec8:	15 83       	std	Z+5, r17	; 0x05
   12eca:	04 83       	std	Z+4, r16	; 0x04
   12ecc:	82 e0       	ldi	r24, 0x02	; 2
   12ece:	9c e1       	ldi	r25, 0x1C	; 28
   12ed0:	5e c0       	rjmp	.+188    	; 0x12f8e <set_active_device+0x16c>
   12ed2:	20 97       	sbiw	r28, 0x00	; 0
   12ed4:	91 f4       	brne	.+36     	; 0x12efa <set_active_device+0xd8>
   12ed6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12eda:	80 ff       	sbrs	r24, 0
   12edc:	60 c0       	rjmp	.+192    	; 0x12f9e <set_active_device+0x17c>
   12ede:	80 e0       	ldi	r24, 0x00	; 0
   12ee0:	90 e0       	ldi	r25, 0x00	; 0
   12ee2:	59 df       	rcall	.-334    	; 0x12d96 <type_to_str>
   12ee4:	ed b7       	in	r30, 0x3d	; 61
   12ee6:	fe b7       	in	r31, 0x3e	; 62
   12ee8:	91 87       	std	Z+9, r25	; 0x09
   12eea:	80 87       	std	Z+8, r24	; 0x08
   12eec:	17 82       	std	Z+7, r1	; 0x07
   12eee:	16 82       	std	Z+6, r1	; 0x06
   12ef0:	15 83       	std	Z+5, r17	; 0x05
   12ef2:	04 83       	std	Z+4, r16	; 0x04
   12ef4:	8d ec       	ldi	r24, 0xCD	; 205
   12ef6:	9b e1       	ldi	r25, 0x1B	; 27
   12ef8:	4a c0       	rjmp	.+148    	; 0x12f8e <set_active_device+0x16c>
   12efa:	c4 30       	cpi	r28, 0x04	; 4
   12efc:	d1 05       	cpc	r29, r1
   12efe:	29 f4       	brne	.+10     	; 0x12f0a <set_active_device+0xe8>
   12f00:	90 93 73 19 	sts	0x1973, r25	; 0x801973 <PRINTERp+0x1>
   12f04:	80 93 72 19 	sts	0x1972, r24	; 0x801972 <PRINTERp>
   12f08:	30 c0       	rjmp	.+96     	; 0x12f6a <set_active_device+0x148>
   12f0a:	2d 7f       	andi	r18, 0xFD	; 253
   12f0c:	21 30       	cpi	r18, 0x01	; 1
   12f0e:	79 f5       	brne	.+94     	; 0x12f6e <set_active_device+0x14c>
   12f10:	21 85       	ldd	r18, Z+9	; 0x09
   12f12:	32 85       	ldd	r19, Z+10	; 0x0a
   12f14:	21 15       	cp	r18, r1
   12f16:	31 05       	cpc	r19, r1
   12f18:	89 f4       	brne	.+34     	; 0x12f3c <set_active_device+0x11a>
   12f1a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12f1e:	80 ff       	sbrs	r24, 0
   12f20:	3e c0       	rjmp	.+124    	; 0x12f9e <set_active_device+0x17c>
   12f22:	ce 01       	movw	r24, r28
   12f24:	38 df       	rcall	.-400    	; 0x12d96 <type_to_str>
   12f26:	ed b7       	in	r30, 0x3d	; 61
   12f28:	fe b7       	in	r31, 0x3e	; 62
   12f2a:	91 87       	std	Z+9, r25	; 0x09
   12f2c:	80 87       	std	Z+8, r24	; 0x08
   12f2e:	d7 83       	std	Z+7, r29	; 0x07
   12f30:	c6 83       	std	Z+6, r28	; 0x06
   12f32:	15 83       	std	Z+5, r17	; 0x05
   12f34:	04 83       	std	Z+4, r16	; 0x04
   12f36:	85 e9       	ldi	r24, 0x95	; 149
   12f38:	9b e1       	ldi	r25, 0x1B	; 27
   12f3a:	29 c0       	rjmp	.+82     	; 0x12f8e <set_active_device+0x16c>
   12f3c:	c1 30       	cpi	r28, 0x01	; 1
   12f3e:	d1 05       	cpc	r29, r1
   12f40:	49 f4       	brne	.+18     	; 0x12f54 <set_active_device+0x132>
   12f42:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <AMIGOp+0x1>
   12f46:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <AMIGOp>
   12f4a:	30 93 6b 19 	sts	0x196B, r19	; 0x80196b <AMIGOs+0x1>
   12f4e:	20 93 6a 19 	sts	0x196A, r18	; 0x80196a <AMIGOs>
   12f52:	0b c0       	rjmp	.+22     	; 0x12f6a <set_active_device+0x148>
   12f54:	c3 30       	cpi	r28, 0x03	; 3
   12f56:	d1 05       	cpc	r29, r1
   12f58:	51 f4       	brne	.+20     	; 0x12f6e <set_active_device+0x14c>
   12f5a:	90 93 71 19 	sts	0x1971, r25	; 0x801971 <SS80p+0x1>
   12f5e:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <SS80p>
   12f62:	30 93 6f 19 	sts	0x196F, r19	; 0x80196f <SS80s+0x1>
   12f66:	20 93 6e 19 	sts	0x196E, r18	; 0x80196e <SS80s>
   12f6a:	81 e0       	ldi	r24, 0x01	; 1
   12f6c:	19 c0       	rjmp	.+50     	; 0x12fa0 <set_active_device+0x17e>
   12f6e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12f72:	80 ff       	sbrs	r24, 0
   12f74:	14 c0       	rjmp	.+40     	; 0x12f9e <set_active_device+0x17c>
   12f76:	ce 01       	movw	r24, r28
   12f78:	0e df       	rcall	.-484    	; 0x12d96 <type_to_str>
   12f7a:	ed b7       	in	r30, 0x3d	; 61
   12f7c:	fe b7       	in	r31, 0x3e	; 62
   12f7e:	91 87       	std	Z+9, r25	; 0x09
   12f80:	80 87       	std	Z+8, r24	; 0x08
   12f82:	d7 83       	std	Z+7, r29	; 0x07
   12f84:	c6 83       	std	Z+6, r28	; 0x06
   12f86:	15 83       	std	Z+5, r17	; 0x05
   12f88:	04 83       	std	Z+4, r16	; 0x04
   12f8a:	8a e6       	ldi	r24, 0x6A	; 106
   12f8c:	9b e1       	ldi	r25, 0x1B	; 27
   12f8e:	a0 e0       	ldi	r26, 0x00	; 0
   12f90:	cd b7       	in	r28, 0x3d	; 61
   12f92:	de b7       	in	r29, 0x3e	; 62
   12f94:	89 83       	std	Y+1, r24	; 0x01
   12f96:	9a 83       	std	Y+2, r25	; 0x02
   12f98:	ab 83       	std	Y+3, r26	; 0x03
   12f9a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   12f9e:	80 e0       	ldi	r24, 0x00	; 0
   12fa0:	cd b7       	in	r28, 0x3d	; 61
   12fa2:	de b7       	in	r29, 0x3e	; 62
   12fa4:	29 96       	adiw	r28, 0x09	; 9
   12fa6:	e4 e0       	ldi	r30, 0x04	; 4
   12fa8:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

00012fac <SS80_Set_Defaults>:
   12fac:	0f 93       	push	r16
   12fae:	1f 93       	push	r17
   12fb0:	cf 93       	push	r28
   12fb2:	df 93       	push	r29
   12fb4:	18 2f       	mov	r17, r24
   12fb6:	82 e0       	ldi	r24, 0x02	; 2
   12fb8:	90 e0       	ldi	r25, 0x00	; 0
   12fba:	ca de       	rcall	.-620    	; 0x12d50 <find_type>
   12fbc:	87 fd       	sbrc	r24, 7
   12fbe:	69 c0       	rjmp	.+210    	; 0x13092 <SS80_Set_Defaults+0xe6>
   12fc0:	2b e0       	ldi	r18, 0x0B	; 11
   12fc2:	12 03       	mulsu	r17, r18
   12fc4:	e0 01       	movw	r28, r0
   12fc6:	11 24       	eor	r1, r1
   12fc8:	c4 50       	subi	r28, 0x04	; 4
   12fca:	d1 4e       	sbci	r29, 0xE1	; 225
   12fcc:	0f 80       	ldd	r0, Y+7	; 0x07
   12fce:	d8 85       	ldd	r29, Y+8	; 0x08
   12fd0:	c0 2d       	mov	r28, r0
   12fd2:	38 2f       	mov	r19, r24
   12fd4:	32 03       	mulsu	r19, r18
   12fd6:	f0 01       	movw	r30, r0
   12fd8:	11 24       	eor	r1, r1
   12fda:	e4 50       	subi	r30, 0x04	; 4
   12fdc:	f1 4e       	sbci	r31, 0xE1	; 225
   12fde:	07 81       	ldd	r16, Z+7	; 0x07
   12fe0:	10 85       	ldd	r17, Z+8	; 0x08
   12fe2:	f8 01       	movw	r30, r16
   12fe4:	80 81       	ld	r24, Z
   12fe6:	88 83       	st	Y, r24
   12fe8:	81 81       	ldd	r24, Z+1	; 0x01
   12fea:	89 83       	std	Y+1, r24	; 0x01
   12fec:	82 81       	ldd	r24, Z+2	; 0x02
   12fee:	93 81       	ldd	r25, Z+3	; 0x03
   12ff0:	0e 94 cf 31 	call	0x639e	; 0x639e <stralloc>
   12ff4:	9b 83       	std	Y+3, r25	; 0x03
   12ff6:	8a 83       	std	Y+2, r24	; 0x02
   12ff8:	f8 01       	movw	r30, r16
   12ffa:	86 81       	ldd	r24, Z+6	; 0x06
   12ffc:	97 81       	ldd	r25, Z+7	; 0x07
   12ffe:	9f 83       	std	Y+7, r25	; 0x07
   13000:	8e 83       	std	Y+6, r24	; 0x06
   13002:	80 85       	ldd	r24, Z+8	; 0x08
   13004:	91 85       	ldd	r25, Z+9	; 0x09
   13006:	99 87       	std	Y+9, r25	; 0x09
   13008:	88 87       	std	Y+8, r24	; 0x08
   1300a:	82 85       	ldd	r24, Z+10	; 0x0a
   1300c:	93 85       	ldd	r25, Z+11	; 0x0b
   1300e:	9b 87       	std	Y+11, r25	; 0x0b
   13010:	8a 87       	std	Y+10, r24	; 0x0a
   13012:	84 85       	ldd	r24, Z+12	; 0x0c
   13014:	8c 87       	std	Y+12, r24	; 0x0c
   13016:	85 85       	ldd	r24, Z+13	; 0x0d
   13018:	8d 87       	std	Y+13, r24	; 0x0d
   1301a:	86 85       	ldd	r24, Z+14	; 0x0e
   1301c:	97 85       	ldd	r25, Z+15	; 0x0f
   1301e:	a0 89       	ldd	r26, Z+16	; 0x10
   13020:	b1 89       	ldd	r27, Z+17	; 0x11
   13022:	8e 87       	std	Y+14, r24	; 0x0e
   13024:	9f 87       	std	Y+15, r25	; 0x0f
   13026:	a8 8b       	std	Y+16, r26	; 0x10
   13028:	b9 8b       	std	Y+17, r27	; 0x11
   1302a:	82 89       	ldd	r24, Z+18	; 0x12
   1302c:	93 89       	ldd	r25, Z+19	; 0x13
   1302e:	9b 8b       	std	Y+19, r25	; 0x13
   13030:	8a 8b       	std	Y+18, r24	; 0x12
   13032:	84 89       	ldd	r24, Z+20	; 0x14
   13034:	8c 8b       	std	Y+20, r24	; 0x14
   13036:	85 89       	ldd	r24, Z+21	; 0x15
   13038:	8d 8b       	std	Y+21, r24	; 0x15
   1303a:	86 89       	ldd	r24, Z+22	; 0x16
   1303c:	97 89       	ldd	r25, Z+23	; 0x17
   1303e:	9f 8b       	std	Y+23, r25	; 0x17
   13040:	8e 8b       	std	Y+22, r24	; 0x16
   13042:	80 8d       	ldd	r24, Z+24	; 0x18
   13044:	91 8d       	ldd	r25, Z+25	; 0x19
   13046:	99 8f       	std	Y+25, r25	; 0x19
   13048:	88 8f       	std	Y+24, r24	; 0x18
   1304a:	82 8d       	ldd	r24, Z+26	; 0x1a
   1304c:	93 8d       	ldd	r25, Z+27	; 0x1b
   1304e:	9b 8f       	std	Y+27, r25	; 0x1b
   13050:	8a 8f       	std	Y+26, r24	; 0x1a
   13052:	84 8d       	ldd	r24, Z+28	; 0x1c
   13054:	95 8d       	ldd	r25, Z+29	; 0x1d
   13056:	9d 8f       	std	Y+29, r25	; 0x1d
   13058:	8c 8f       	std	Y+28, r24	; 0x1c
   1305a:	86 8d       	ldd	r24, Z+30	; 0x1e
   1305c:	8e 8f       	std	Y+30, r24	; 0x1e
   1305e:	87 8d       	ldd	r24, Z+31	; 0x1f
   13060:	8f 8f       	std	Y+31, r24	; 0x1f
   13062:	81 a1       	ldd	r24, Z+33	; 0x21
   13064:	92 a1       	ldd	r25, Z+34	; 0x22
   13066:	a3 a1       	ldd	r26, Z+35	; 0x23
   13068:	b4 a1       	ldd	r27, Z+36	; 0x24
   1306a:	89 a3       	std	Y+33, r24	; 0x21
   1306c:	9a a3       	std	Y+34, r25	; 0x22
   1306e:	ab a3       	std	Y+35, r26	; 0x23
   13070:	bc a3       	std	Y+36, r27	; 0x24
   13072:	85 a1       	ldd	r24, Z+37	; 0x25
   13074:	8d a3       	std	Y+37, r24	; 0x25
   13076:	86 a1       	ldd	r24, Z+38	; 0x26
   13078:	97 a1       	ldd	r25, Z+39	; 0x27
   1307a:	9f a3       	std	Y+39, r25	; 0x27
   1307c:	8e a3       	std	Y+38, r24	; 0x26
   1307e:	80 a5       	ldd	r24, Z+40	; 0x28
   13080:	91 a5       	ldd	r25, Z+41	; 0x29
   13082:	a2 a5       	ldd	r26, Z+42	; 0x2a
   13084:	b3 a5       	ldd	r27, Z+43	; 0x2b
   13086:	88 a7       	std	Y+40, r24	; 0x28
   13088:	99 a7       	std	Y+41, r25	; 0x29
   1308a:	aa a7       	std	Y+42, r26	; 0x2a
   1308c:	bb a7       	std	Y+43, r27	; 0x2b
   1308e:	84 a5       	ldd	r24, Z+44	; 0x2c
   13090:	8c a7       	std	Y+44, r24	; 0x2c
   13092:	df 91       	pop	r29
   13094:	cf 91       	pop	r28
   13096:	1f 91       	pop	r17
   13098:	0f 91       	pop	r16
   1309a:	08 95       	ret

0001309c <free_device>:
   1309c:	0f 93       	push	r16
   1309e:	1f 93       	push	r17
   130a0:	cf 93       	push	r28
   130a2:	df 93       	push	r29
   130a4:	8c 30       	cpi	r24, 0x0C	; 12
   130a6:	08 f0       	brcs	.+2      	; 0x130aa <free_device+0xe>
   130a8:	55 c0       	rjmp	.+170    	; 0x13154 <free_device+0xb8>
   130aa:	08 2f       	mov	r16, r24
   130ac:	08 2e       	mov	r0, r24
   130ae:	00 0c       	add	r0, r0
   130b0:	11 0b       	sbc	r17, r17
   130b2:	9b e0       	ldi	r25, 0x0B	; 11
   130b4:	89 02       	muls	r24, r25
   130b6:	f0 01       	movw	r30, r0
   130b8:	11 24       	eor	r1, r1
   130ba:	e4 50       	subi	r30, 0x04	; 4
   130bc:	f1 4e       	sbci	r31, 0xE1	; 225
   130be:	80 81       	ld	r24, Z
   130c0:	83 30       	cpi	r24, 0x03	; 3
   130c2:	51 f4       	brne	.+20     	; 0x130d8 <free_device+0x3c>
   130c4:	c7 81       	ldd	r28, Z+7	; 0x07
   130c6:	d0 85       	ldd	r29, Z+8	; 0x08
   130c8:	8a 81       	ldd	r24, Y+2	; 0x02
   130ca:	9b 81       	ldd	r25, Y+3	; 0x03
   130cc:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safefree>
   130d0:	8c 81       	ldd	r24, Y+4	; 0x04
   130d2:	9d 81       	ldd	r25, Y+5	; 0x05
   130d4:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safefree>
   130d8:	8b e0       	ldi	r24, 0x0B	; 11
   130da:	80 9f       	mul	r24, r16
   130dc:	f0 01       	movw	r30, r0
   130de:	81 9f       	mul	r24, r17
   130e0:	f0 0d       	add	r31, r0
   130e2:	11 24       	eor	r1, r1
   130e4:	e4 50       	subi	r30, 0x04	; 4
   130e6:	f1 4e       	sbci	r31, 0xE1	; 225
   130e8:	80 81       	ld	r24, Z
   130ea:	81 30       	cpi	r24, 0x01	; 1
   130ec:	51 f4       	brne	.+20     	; 0x13102 <free_device+0x66>
   130ee:	c7 81       	ldd	r28, Z+7	; 0x07
   130f0:	d0 85       	ldd	r29, Z+8	; 0x08
   130f2:	8a 81       	ldd	r24, Y+2	; 0x02
   130f4:	9b 81       	ldd	r25, Y+3	; 0x03
   130f6:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safefree>
   130fa:	8c 81       	ldd	r24, Y+4	; 0x04
   130fc:	9d 81       	ldd	r25, Y+5	; 0x05
   130fe:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safefree>
   13102:	8b e0       	ldi	r24, 0x0B	; 11
   13104:	80 9f       	mul	r24, r16
   13106:	f0 01       	movw	r30, r0
   13108:	81 9f       	mul	r24, r17
   1310a:	f0 0d       	add	r31, r0
   1310c:	11 24       	eor	r1, r1
   1310e:	e4 50       	subi	r30, 0x04	; 4
   13110:	f1 4e       	sbci	r31, 0xE1	; 225
   13112:	80 81       	ld	r24, Z
   13114:	84 30       	cpi	r24, 0x04	; 4
   13116:	11 f4       	brne	.+4      	; 0x1311c <free_device+0x80>
   13118:	0e 94 63 be 	call	0x17cc6	; 0x17cc6 <printer_close>
   1311c:	8b e0       	ldi	r24, 0x0B	; 11
   1311e:	80 9f       	mul	r24, r16
   13120:	e0 01       	movw	r28, r0
   13122:	81 9f       	mul	r24, r17
   13124:	d0 0d       	add	r29, r0
   13126:	11 24       	eor	r1, r1
   13128:	c4 50       	subi	r28, 0x04	; 4
   1312a:	d1 4e       	sbci	r29, 0xE1	; 225
   1312c:	8f 81       	ldd	r24, Y+7	; 0x07
   1312e:	98 85       	ldd	r25, Y+8	; 0x08
   13130:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safefree>
   13134:	89 85       	ldd	r24, Y+9	; 0x09
   13136:	9a 85       	ldd	r25, Y+10	; 0x0a
   13138:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safefree>
   1313c:	18 82       	st	Y, r1
   1313e:	19 82       	std	Y+1, r1	; 0x01
   13140:	8f ef       	ldi	r24, 0xFF	; 255
   13142:	8a 83       	std	Y+2, r24	; 0x02
   13144:	1b 82       	std	Y+3, r1	; 0x03
   13146:	1c 82       	std	Y+4, r1	; 0x04
   13148:	1d 82       	std	Y+5, r1	; 0x05
   1314a:	1e 82       	std	Y+6, r1	; 0x06
   1314c:	18 86       	std	Y+8, r1	; 0x08
   1314e:	1f 82       	std	Y+7, r1	; 0x07
   13150:	1a 86       	std	Y+10, r1	; 0x0a
   13152:	19 86       	std	Y+9, r1	; 0x09
   13154:	df 91       	pop	r29
   13156:	cf 91       	pop	r28
   13158:	1f 91       	pop	r17
   1315a:	0f 91       	pop	r16
   1315c:	08 95       	ret

0001315e <alloc_device>:
   1315e:	0f 93       	push	r16
   13160:	1f 93       	push	r17
   13162:	cf 93       	push	r28
   13164:	ad b7       	in	r26, 0x3d	; 61
   13166:	be b7       	in	r27, 0x3e	; 62
   13168:	17 97       	sbiw	r26, 0x07	; 7
   1316a:	0f b6       	in	r0, 0x3f	; 63
   1316c:	f8 94       	cli
   1316e:	be bf       	out	0x3e, r27	; 62
   13170:	0f be       	out	0x3f, r0	; 63
   13172:	ad bf       	out	0x3d, r26	; 61
   13174:	8c 01       	movw	r16, r24
   13176:	28 de       	rcall	.-944    	; 0x12dc8 <find_free>
   13178:	c8 2f       	mov	r28, r24
   1317a:	8f 3f       	cpi	r24, 0xFF	; 255
   1317c:	89 f4       	brne	.+34     	; 0x131a0 <alloc_device+0x42>
   1317e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13182:	80 ff       	sbrs	r24, 0
   13184:	98 c0       	rjmp	.+304    	; 0x132b6 <alloc_device+0x158>
   13186:	ed b7       	in	r30, 0x3d	; 61
   13188:	fe b7       	in	r31, 0x3e	; 62
   1318a:	15 83       	std	Z+5, r17	; 0x05
   1318c:	04 83       	std	Z+4, r16	; 0x04
   1318e:	86 e4       	ldi	r24, 0x46	; 70
   13190:	9b e1       	ldi	r25, 0x1B	; 27
   13192:	a0 e0       	ldi	r26, 0x00	; 0
   13194:	81 83       	std	Z+1, r24	; 0x01
   13196:	92 83       	std	Z+2, r25	; 0x02
   13198:	a3 83       	std	Z+3, r26	; 0x03
   1319a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1319e:	8b c0       	rjmp	.+278    	; 0x132b6 <alloc_device+0x158>
   131a0:	02 30       	cpi	r16, 0x02	; 2
   131a2:	11 05       	cpc	r17, r1
   131a4:	c1 f1       	breq	.+112    	; 0x13216 <alloc_device+0xb8>
   131a6:	dc f4       	brge	.+54     	; 0x131de <alloc_device+0x80>
   131a8:	01 30       	cpi	r16, 0x01	; 1
   131aa:	11 05       	cpc	r17, r1
   131ac:	09 f0       	breq	.+2      	; 0x131b0 <alloc_device+0x52>
   131ae:	6e c0       	rjmp	.+220    	; 0x1328c <alloc_device+0x12e>
   131b0:	fb e0       	ldi	r31, 0x0B	; 11
   131b2:	8f 02       	muls	r24, r31
   131b4:	80 01       	movw	r16, r0
   131b6:	11 24       	eor	r1, r1
   131b8:	04 50       	subi	r16, 0x04	; 4
   131ba:	11 4e       	sbci	r17, 0xE1	; 225
   131bc:	81 e0       	ldi	r24, 0x01	; 1
   131be:	f8 01       	movw	r30, r16
   131c0:	80 83       	st	Z, r24
   131c2:	61 e0       	ldi	r22, 0x01	; 1
   131c4:	70 e0       	ldi	r23, 0x00	; 0
   131c6:	87 e1       	ldi	r24, 0x17	; 23
   131c8:	90 e0       	ldi	r25, 0x00	; 0
   131ca:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <safecalloc>
   131ce:	f8 01       	movw	r30, r16
   131d0:	90 87       	std	Z+8, r25	; 0x08
   131d2:	87 83       	std	Z+7, r24	; 0x07
   131d4:	61 e0       	ldi	r22, 0x01	; 1
   131d6:	70 e0       	ldi	r23, 0x00	; 0
   131d8:	88 e1       	ldi	r24, 0x18	; 24
   131da:	90 e0       	ldi	r25, 0x00	; 0
   131dc:	51 c0       	rjmp	.+162    	; 0x13280 <alloc_device+0x122>
   131de:	03 30       	cpi	r16, 0x03	; 3
   131e0:	11 05       	cpc	r17, r1
   131e2:	81 f1       	breq	.+96     	; 0x13244 <alloc_device+0xe6>
   131e4:	04 30       	cpi	r16, 0x04	; 4
   131e6:	11 05       	cpc	r17, r1
   131e8:	09 f0       	breq	.+2      	; 0x131ec <alloc_device+0x8e>
   131ea:	50 c0       	rjmp	.+160    	; 0x1328c <alloc_device+0x12e>
   131ec:	fb e0       	ldi	r31, 0x0B	; 11
   131ee:	8f 02       	muls	r24, r31
   131f0:	80 01       	movw	r16, r0
   131f2:	11 24       	eor	r1, r1
   131f4:	04 50       	subi	r16, 0x04	; 4
   131f6:	11 4e       	sbci	r17, 0xE1	; 225
   131f8:	84 e0       	ldi	r24, 0x04	; 4
   131fa:	f8 01       	movw	r30, r16
   131fc:	80 83       	st	Z, r24
   131fe:	61 e0       	ldi	r22, 0x01	; 1
   13200:	70 e0       	ldi	r23, 0x00	; 0
   13202:	8d e0       	ldi	r24, 0x0D	; 13
   13204:	90 e0       	ldi	r25, 0x00	; 0
   13206:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <safecalloc>
   1320a:	f8 01       	movw	r30, r16
   1320c:	90 87       	std	Z+8, r25	; 0x08
   1320e:	87 83       	std	Z+7, r24	; 0x07
   13210:	12 86       	std	Z+10, r1	; 0x0a
   13212:	11 86       	std	Z+9, r1	; 0x09
   13214:	50 c0       	rjmp	.+160    	; 0x132b6 <alloc_device+0x158>
   13216:	fb e0       	ldi	r31, 0x0B	; 11
   13218:	8f 02       	muls	r24, r31
   1321a:	80 01       	movw	r16, r0
   1321c:	11 24       	eor	r1, r1
   1321e:	04 50       	subi	r16, 0x04	; 4
   13220:	11 4e       	sbci	r17, 0xE1	; 225
   13222:	82 e0       	ldi	r24, 0x02	; 2
   13224:	f8 01       	movw	r30, r16
   13226:	80 83       	st	Z, r24
   13228:	61 e0       	ldi	r22, 0x01	; 1
   1322a:	70 e0       	ldi	r23, 0x00	; 0
   1322c:	84 e3       	ldi	r24, 0x34	; 52
   1322e:	90 e0       	ldi	r25, 0x00	; 0
   13230:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <safecalloc>
   13234:	f8 01       	movw	r30, r16
   13236:	90 87       	std	Z+8, r25	; 0x08
   13238:	87 83       	std	Z+7, r24	; 0x07
   1323a:	61 e0       	ldi	r22, 0x01	; 1
   1323c:	70 e0       	ldi	r23, 0x00	; 0
   1323e:	86 e1       	ldi	r24, 0x16	; 22
   13240:	90 e0       	ldi	r25, 0x00	; 0
   13242:	1e c0       	rjmp	.+60     	; 0x13280 <alloc_device+0x122>
   13244:	fb e0       	ldi	r31, 0x0B	; 11
   13246:	8f 02       	muls	r24, r31
   13248:	80 01       	movw	r16, r0
   1324a:	11 24       	eor	r1, r1
   1324c:	04 50       	subi	r16, 0x04	; 4
   1324e:	11 4e       	sbci	r17, 0xE1	; 225
   13250:	83 e0       	ldi	r24, 0x03	; 3
   13252:	f8 01       	movw	r30, r16
   13254:	80 83       	st	Z, r24
   13256:	61 e0       	ldi	r22, 0x01	; 1
   13258:	70 e0       	ldi	r23, 0x00	; 0
   1325a:	84 e3       	ldi	r24, 0x34	; 52
   1325c:	90 e0       	ldi	r25, 0x00	; 0
   1325e:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <safecalloc>
   13262:	f8 01       	movw	r30, r16
   13264:	90 87       	std	Z+8, r25	; 0x08
   13266:	87 83       	std	Z+7, r24	; 0x07
   13268:	61 e0       	ldi	r22, 0x01	; 1
   1326a:	70 e0       	ldi	r23, 0x00	; 0
   1326c:	86 e1       	ldi	r24, 0x16	; 22
   1326e:	90 e0       	ldi	r25, 0x00	; 0
   13270:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <safecalloc>
   13274:	f8 01       	movw	r30, r16
   13276:	92 87       	std	Z+10, r25	; 0x0a
   13278:	81 87       	std	Z+9, r24	; 0x09
   1327a:	8c 2f       	mov	r24, r28
   1327c:	97 de       	rcall	.-722    	; 0x12fac <SS80_Set_Defaults>
   1327e:	1b c0       	rjmp	.+54     	; 0x132b6 <alloc_device+0x158>
   13280:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <safecalloc>
   13284:	f8 01       	movw	r30, r16
   13286:	92 87       	std	Z+10, r25	; 0x0a
   13288:	81 87       	std	Z+9, r24	; 0x09
   1328a:	15 c0       	rjmp	.+42     	; 0x132b6 <alloc_device+0x158>
   1328c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13290:	80 ff       	sbrs	r24, 0
   13292:	10 c0       	rjmp	.+32     	; 0x132b4 <alloc_device+0x156>
   13294:	c8 01       	movw	r24, r16
   13296:	7f dd       	rcall	.-1282   	; 0x12d96 <type_to_str>
   13298:	ed b7       	in	r30, 0x3d	; 61
   1329a:	fe b7       	in	r31, 0x3e	; 62
   1329c:	97 83       	std	Z+7, r25	; 0x07
   1329e:	86 83       	std	Z+6, r24	; 0x06
   132a0:	15 83       	std	Z+5, r17	; 0x05
   132a2:	04 83       	std	Z+4, r16	; 0x04
   132a4:	84 e2       	ldi	r24, 0x24	; 36
   132a6:	9b e1       	ldi	r25, 0x1B	; 27
   132a8:	a0 e0       	ldi	r26, 0x00	; 0
   132aa:	81 83       	std	Z+1, r24	; 0x01
   132ac:	92 83       	std	Z+2, r25	; 0x02
   132ae:	a3 83       	std	Z+3, r26	; 0x03
   132b0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   132b4:	cf ef       	ldi	r28, 0xFF	; 255
   132b6:	8c 2f       	mov	r24, r28
   132b8:	ad b7       	in	r26, 0x3d	; 61
   132ba:	be b7       	in	r27, 0x3e	; 62
   132bc:	17 96       	adiw	r26, 0x07	; 7
   132be:	0f b6       	in	r0, 0x3f	; 63
   132c0:	f8 94       	cli
   132c2:	be bf       	out	0x3e, r27	; 62
   132c4:	0f be       	out	0x3f, r0	; 63
   132c6:	ad bf       	out	0x3d, r26	; 61
   132c8:	cf 91       	pop	r28
   132ca:	1f 91       	pop	r17
   132cc:	0f 91       	pop	r16
   132ce:	08 95       	ret

000132d0 <init_Devices>:
   132d0:	10 92 7f 19 	sts	0x197F, r1	; 0x80197f <stack_ind+0x1>
   132d4:	10 92 7e 19 	sts	0x197E, r1	; 0x80197e <stack_ind>
   132d8:	ec ef       	ldi	r30, 0xFC	; 252
   132da:	fe e1       	ldi	r31, 0x1E	; 30
   132dc:	8f ef       	ldi	r24, 0xFF	; 255
   132de:	10 82       	st	Z, r1
   132e0:	11 82       	std	Z+1, r1	; 0x01
   132e2:	82 83       	std	Z+2, r24	; 0x02
   132e4:	13 82       	std	Z+3, r1	; 0x03
   132e6:	14 82       	std	Z+4, r1	; 0x04
   132e8:	15 82       	std	Z+5, r1	; 0x05
   132ea:	16 82       	std	Z+6, r1	; 0x06
   132ec:	10 86       	std	Z+8, r1	; 0x08
   132ee:	17 82       	std	Z+7, r1	; 0x07
   132f0:	12 86       	std	Z+10, r1	; 0x0a
   132f2:	11 86       	std	Z+9, r1	; 0x09
   132f4:	3b 96       	adiw	r30, 0x0b	; 11
   132f6:	9f e1       	ldi	r25, 0x1F	; 31
   132f8:	e0 38       	cpi	r30, 0x80	; 128
   132fa:	f9 07       	cpc	r31, r25
   132fc:	81 f7       	brne	.-32     	; 0x132de <init_Devices+0xe>
   132fe:	08 95       	ret

00013300 <push_state>:
   13300:	20 91 7e 19 	lds	r18, 0x197E	; 0x80197e <stack_ind>
   13304:	30 91 7f 19 	lds	r19, 0x197F	; 0x80197f <stack_ind+0x1>
   13308:	25 30       	cpi	r18, 0x05	; 5
   1330a:	31 05       	cpc	r19, r1
   1330c:	7c f4       	brge	.+30     	; 0x1332c <push_state+0x2c>
   1330e:	a9 01       	movw	r20, r18
   13310:	4f 5f       	subi	r20, 0xFF	; 255
   13312:	5f 4f       	sbci	r21, 0xFF	; 255
   13314:	50 93 7f 19 	sts	0x197F, r21	; 0x80197f <stack_ind+0x1>
   13318:	40 93 7e 19 	sts	0x197E, r20	; 0x80197e <stack_ind>
   1331c:	22 0f       	add	r18, r18
   1331e:	33 1f       	adc	r19, r19
   13320:	f9 01       	movw	r30, r18
   13322:	ec 58       	subi	r30, 0x8C	; 140
   13324:	f6 4e       	sbci	r31, 0xE6	; 230
   13326:	80 83       	st	Z, r24
   13328:	91 83       	std	Z+1, r25	; 0x01
   1332a:	08 95       	ret
   1332c:	80 e0       	ldi	r24, 0x00	; 0
   1332e:	90 e0       	ldi	r25, 0x00	; 0
   13330:	08 95       	ret

00013332 <pop_state>:
   13332:	80 91 7e 19 	lds	r24, 0x197E	; 0x80197e <stack_ind>
   13336:	90 91 7f 19 	lds	r25, 0x197F	; 0x80197f <stack_ind+0x1>
   1333a:	18 16       	cp	r1, r24
   1333c:	19 06       	cpc	r1, r25
   1333e:	6c f4       	brge	.+26     	; 0x1335a <pop_state+0x28>
   13340:	01 97       	sbiw	r24, 0x01	; 1
   13342:	90 93 7f 19 	sts	0x197F, r25	; 0x80197f <stack_ind+0x1>
   13346:	80 93 7e 19 	sts	0x197E, r24	; 0x80197e <stack_ind>
   1334a:	88 0f       	add	r24, r24
   1334c:	99 1f       	adc	r25, r25
   1334e:	fc 01       	movw	r30, r24
   13350:	ec 58       	subi	r30, 0x8C	; 140
   13352:	f6 4e       	sbci	r31, 0xE6	; 230
   13354:	80 81       	ld	r24, Z
   13356:	91 81       	ldd	r25, Z+1	; 0x01
   13358:	08 95       	ret
   1335a:	80 e0       	ldi	r24, 0x00	; 0
   1335c:	90 e0       	ldi	r25, 0x00	; 0
   1335e:	08 95       	ret

00013360 <set_Config_Defaults>:
   13360:	08 95       	ret

00013362 <hpdir_set_device>:
   13362:	cf 93       	push	r28
   13364:	df 93       	push	r29
   13366:	00 d0       	rcall	.+0      	; 0x13368 <hpdir_set_device+0x6>
   13368:	1f 92       	push	r1
   1336a:	2b e0       	ldi	r18, 0x0B	; 11
   1336c:	82 02       	muls	r24, r18
   1336e:	c0 01       	movw	r24, r0
   13370:	11 24       	eor	r1, r1
   13372:	fc 01       	movw	r30, r24
   13374:	e4 50       	subi	r30, 0x04	; 4
   13376:	f1 4e       	sbci	r31, 0xE1	; 225
   13378:	80 81       	ld	r24, Z
   1337a:	83 30       	cpi	r24, 0x03	; 3
   1337c:	a1 f5       	brne	.+104    	; 0x133e6 <hpdir_set_device+0x84>
   1337e:	c7 81       	ldd	r28, Z+7	; 0x07
   13380:	d0 85       	ldd	r29, Z+8	; 0x08
   13382:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <hpdir+0x80>
   13386:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <hpdir+0x81>
   1338a:	9f 83       	std	Y+7, r25	; 0x07
   1338c:	8e 83       	std	Y+6, r24	; 0x06
   1338e:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <hpdir+0x8c>
   13392:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <hpdir+0x8d>
   13396:	a0 91 0e 20 	lds	r26, 0x200E	; 0x80200e <hpdir+0x8e>
   1339a:	b0 91 0f 20 	lds	r27, 0x200F	; 0x80200f <hpdir+0x8f>
   1339e:	8e 87       	std	Y+14, r24	; 0x0e
   133a0:	9f 87       	std	Y+15, r25	; 0x0f
   133a2:	a8 8b       	std	Y+16, r26	; 0x10
   133a4:	b9 8b       	std	Y+17, r27	; 0x11
   133a6:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <hpdir+0xa0>
   133aa:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <hpdir+0xa1>
   133ae:	9b 8b       	std	Y+19, r25	; 0x13
   133b0:	8a 8b       	std	Y+18, r24	; 0x12
   133b2:	19 a2       	std	Y+33, r1	; 0x21
   133b4:	1a a2       	std	Y+34, r1	; 0x22
   133b6:	1b a2       	std	Y+35, r1	; 0x23
   133b8:	1c a2       	std	Y+36, r1	; 0x24
   133ba:	1d a2       	std	Y+37, r1	; 0x25
   133bc:	1f a2       	std	Y+39, r1	; 0x27
   133be:	1e a2       	std	Y+38, r1	; 0x26
   133c0:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <hpdir+0xac>
   133c4:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <hpdir+0xad>
   133c8:	a0 91 2e 20 	lds	r26, 0x202E	; 0x80202e <hpdir+0xae>
   133cc:	b0 91 2f 20 	lds	r27, 0x202F	; 0x80202f <hpdir+0xaf>
   133d0:	ac 01       	movw	r20, r24
   133d2:	bd 01       	movw	r22, r26
   133d4:	41 50       	subi	r20, 0x01	; 1
   133d6:	51 09       	sbc	r21, r1
   133d8:	61 09       	sbc	r22, r1
   133da:	71 09       	sbc	r23, r1
   133dc:	48 a7       	std	Y+40, r20	; 0x28
   133de:	59 a7       	std	Y+41, r21	; 0x29
   133e0:	6a a7       	std	Y+42, r22	; 0x2a
   133e2:	7b a7       	std	Y+43, r23	; 0x2b
   133e4:	2a c0       	rjmp	.+84     	; 0x1343a <hpdir_set_device+0xd8>
   133e6:	81 30       	cpi	r24, 0x01	; 1
   133e8:	a1 f5       	brne	.+104    	; 0x13452 <hpdir_set_device+0xf0>
   133ea:	c7 81       	ldd	r28, Z+7	; 0x07
   133ec:	d0 85       	ldd	r29, Z+8	; 0x08
   133ee:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <hpdir+0x80>
   133f2:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <hpdir+0x81>
   133f6:	9f 83       	std	Y+7, r25	; 0x07
   133f8:	8e 83       	std	Y+6, r24	; 0x06
   133fa:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <hpdir+0xa0>
   133fe:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <hpdir+0xa1>
   13402:	99 87       	std	Y+9, r25	; 0x09
   13404:	88 87       	std	Y+8, r24	; 0x08
   13406:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <hpdir+0x9c>
   1340a:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <hpdir+0x9d>
   1340e:	9b 87       	std	Y+11, r25	; 0x0b
   13410:	8a 87       	std	Y+10, r24	; 0x0a
   13412:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <hpdir+0x98>
   13416:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <hpdir+0x99>
   1341a:	9d 87       	std	Y+13, r25	; 0x0d
   1341c:	8c 87       	std	Y+12, r24	; 0x0c
   1341e:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <hpdir+0x94>
   13422:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <hpdir+0x95>
   13426:	9f 87       	std	Y+15, r25	; 0x0f
   13428:	8e 87       	std	Y+14, r24	; 0x0e
   1342a:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <hpdir+0xac>
   1342e:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <hpdir+0xad>
   13432:	a0 91 2e 20 	lds	r26, 0x202E	; 0x80202e <hpdir+0xae>
   13436:	b0 91 2f 20 	lds	r27, 0x202F	; 0x80202f <hpdir+0xaf>
   1343a:	83 83       	std	Z+3, r24	; 0x03
   1343c:	94 83       	std	Z+4, r25	; 0x04
   1343e:	a5 83       	std	Z+5, r26	; 0x05
   13440:	b6 83       	std	Z+6, r27	; 0x06
   13442:	80 e8       	ldi	r24, 0x80	; 128
   13444:	9f e1       	ldi	r25, 0x1F	; 31
   13446:	0e 94 cf 31 	call	0x639e	; 0x639e <stralloc>
   1344a:	9d 83       	std	Y+5, r25	; 0x05
   1344c:	8c 83       	std	Y+4, r24	; 0x04
   1344e:	81 e0       	ldi	r24, 0x01	; 1
   13450:	0b c0       	rjmp	.+22     	; 0x13468 <hpdir_set_device+0x106>
   13452:	8c ef       	ldi	r24, 0xFC	; 252
   13454:	9a e1       	ldi	r25, 0x1A	; 26
   13456:	a0 e0       	ldi	r26, 0x00	; 0
   13458:	ed b7       	in	r30, 0x3d	; 61
   1345a:	fe b7       	in	r31, 0x3e	; 62
   1345c:	81 83       	std	Z+1, r24	; 0x01
   1345e:	92 83       	std	Z+2, r25	; 0x02
   13460:	a3 83       	std	Z+3, r26	; 0x03
   13462:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   13466:	80 e0       	ldi	r24, 0x00	; 0
   13468:	cd b7       	in	r28, 0x3d	; 61
   1346a:	de b7       	in	r29, 0x3e	; 62
   1346c:	23 96       	adiw	r28, 0x03	; 3
   1346e:	e2 e0       	ldi	r30, 0x02	; 2
   13470:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00013474 <hpdir_set_parameters>:
   13474:	cf 93       	push	r28
   13476:	00 d0       	rcall	.+0      	; 0x13478 <hpdir_set_parameters+0x4>
   13478:	1f 92       	push	r1
   1347a:	c8 2f       	mov	r28, r24
   1347c:	cb 01       	movw	r24, r22
   1347e:	41 e0       	ldi	r20, 0x01	; 1
   13480:	50 e0       	ldi	r21, 0x00	; 0
   13482:	60 e0       	ldi	r22, 0x00	; 0
   13484:	70 e0       	ldi	r23, 0x00	; 0
   13486:	0e 94 bd a3 	call	0x1477a	; 0x1477a <hpdir_find_drive>
   1348a:	89 2b       	or	r24, r25
   1348c:	19 f0       	breq	.+6      	; 0x13494 <hpdir_set_parameters+0x20>
   1348e:	8c 2f       	mov	r24, r28
   13490:	68 df       	rcall	.-304    	; 0x13362 <hpdir_set_device>
   13492:	0b c0       	rjmp	.+22     	; 0x134aa <hpdir_set_parameters+0x36>
   13494:	84 ed       	ldi	r24, 0xD4	; 212
   13496:	9a e1       	ldi	r25, 0x1A	; 26
   13498:	a0 e0       	ldi	r26, 0x00	; 0
   1349a:	ed b7       	in	r30, 0x3d	; 61
   1349c:	fe b7       	in	r31, 0x3e	; 62
   1349e:	81 83       	std	Z+1, r24	; 0x01
   134a0:	92 83       	std	Z+2, r25	; 0x02
   134a2:	a3 83       	std	Z+3, r26	; 0x03
   134a4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   134a8:	80 e0       	ldi	r24, 0x00	; 0
   134aa:	0f 90       	pop	r0
   134ac:	0f 90       	pop	r0
   134ae:	0f 90       	pop	r0
   134b0:	cf 91       	pop	r28
   134b2:	08 95       	ret

000134b4 <format_drives>:
   134b4:	2f 92       	push	r2
   134b6:	3f 92       	push	r3
   134b8:	4f 92       	push	r4
   134ba:	5f 92       	push	r5
   134bc:	6f 92       	push	r6
   134be:	7f 92       	push	r7
   134c0:	8f 92       	push	r8
   134c2:	af 92       	push	r10
   134c4:	bf 92       	push	r11
   134c6:	cf 92       	push	r12
   134c8:	df 92       	push	r13
   134ca:	ef 92       	push	r14
   134cc:	ff 92       	push	r15
   134ce:	0f 93       	push	r16
   134d0:	1f 93       	push	r17
   134d2:	cf 93       	push	r28
   134d4:	df 93       	push	r29
   134d6:	cd b7       	in	r28, 0x3d	; 61
   134d8:	de b7       	in	r29, 0x3e	; 62
   134da:	ce 56       	subi	r28, 0x6E	; 110
   134dc:	d1 09       	sbc	r29, r1
   134de:	0f b6       	in	r0, 0x3f	; 63
   134e0:	f8 94       	cli
   134e2:	de bf       	out	0x3e, r29	; 62
   134e4:	0f be       	out	0x3f, r0	; 63
   134e6:	cd bf       	out	0x3d, r28	; 61
   134e8:	8c ef       	ldi	r24, 0xFC	; 252
   134ea:	c8 2e       	mov	r12, r24
   134ec:	8e e1       	ldi	r24, 0x1E	; 30
   134ee:	d8 2e       	mov	r13, r24
   134f0:	a0 96       	adiw	r28, 0x20	; 32
   134f2:	1f ae       	std	Y+63, r1	; 0x3f
   134f4:	1e ae       	std	Y+62, r1	; 0x3e
   134f6:	a0 97       	sbiw	r28, 0x20	; 32
   134f8:	6e 96       	adiw	r28, 0x1e	; 30
   134fa:	1f ae       	std	Y+63, r1	; 0x3f
   134fc:	1e ae       	std	Y+62, r1	; 0x3e
   134fe:	6e 97       	sbiw	r28, 0x1e	; 30
   13500:	6c 96       	adiw	r28, 0x1c	; 28
   13502:	1f ae       	std	Y+63, r1	; 0x3f
   13504:	1e ae       	std	Y+62, r1	; 0x3e
   13506:	6c 97       	sbiw	r28, 0x1c	; 28
   13508:	81 eb       	ldi	r24, 0xB1	; 177
   1350a:	99 e1       	ldi	r25, 0x19	; 25
   1350c:	9c 01       	movw	r18, r24
   1350e:	40 e0       	ldi	r20, 0x00	; 0
   13510:	a3 96       	adiw	r28, 0x23	; 35
   13512:	2d af       	std	Y+61, r18	; 0x3d
   13514:	3e af       	std	Y+62, r19	; 0x3e
   13516:	4f af       	std	Y+63, r20	; 0x3f
   13518:	a3 97       	sbiw	r28, 0x23	; 35
   1351a:	89 ea       	ldi	r24, 0xA9	; 169
   1351c:	99 e1       	ldi	r25, 0x19	; 25
   1351e:	9c 01       	movw	r18, r24
   13520:	40 e0       	ldi	r20, 0x00	; 0
   13522:	a6 96       	adiw	r28, 0x26	; 38
   13524:	2d af       	std	Y+61, r18	; 0x3d
   13526:	3e af       	std	Y+62, r19	; 0x3e
   13528:	4f af       	std	Y+63, r20	; 0x3f
   1352a:	a6 97       	sbiw	r28, 0x26	; 38
   1352c:	8b ec       	ldi	r24, 0xCB	; 203
   1352e:	99 e1       	ldi	r25, 0x19	; 25
   13530:	9c 01       	movw	r18, r24
   13532:	40 e0       	ldi	r20, 0x00	; 0
   13534:	a9 96       	adiw	r28, 0x29	; 41
   13536:	2d af       	std	Y+61, r18	; 0x3d
   13538:	3e af       	std	Y+62, r19	; 0x3e
   1353a:	4f af       	std	Y+63, r20	; 0x3f
   1353c:	a9 97       	sbiw	r28, 0x29	; 41
   1353e:	85 ef       	ldi	r24, 0xF5	; 245
   13540:	99 e1       	ldi	r25, 0x19	; 25
   13542:	9c 01       	movw	r18, r24
   13544:	40 e0       	ldi	r20, 0x00	; 0
   13546:	ac 96       	adiw	r28, 0x2c	; 44
   13548:	2d af       	std	Y+61, r18	; 0x3d
   1354a:	3e af       	std	Y+62, r19	; 0x3e
   1354c:	4f af       	std	Y+63, r20	; 0x3f
   1354e:	ac 97       	sbiw	r28, 0x2c	; 44
   13550:	8d ee       	ldi	r24, 0xED	; 237
   13552:	99 e1       	ldi	r25, 0x19	; 25
   13554:	9c 01       	movw	r18, r24
   13556:	40 e0       	ldi	r20, 0x00	; 0
   13558:	af 96       	adiw	r28, 0x2f	; 47
   1355a:	2d af       	std	Y+61, r18	; 0x3d
   1355c:	3e af       	std	Y+62, r19	; 0x3e
   1355e:	4f af       	std	Y+63, r20	; 0x3f
   13560:	af 97       	sbiw	r28, 0x2f	; 47
   13562:	8f e0       	ldi	r24, 0x0F	; 15
   13564:	9a e1       	ldi	r25, 0x1A	; 26
   13566:	3c 01       	movw	r6, r24
   13568:	81 2c       	mov	r8, r1
   1356a:	f6 01       	movw	r30, r12
   1356c:	80 81       	ld	r24, Z
   1356e:	88 23       	and	r24, r24
   13570:	09 f4       	brne	.+2      	; 0x13574 <format_drives+0xc0>
   13572:	f1 c0       	rjmp	.+482    	; 0x13756 <format_drives+0x2a2>
   13574:	83 30       	cpi	r24, 0x03	; 3
   13576:	09 f0       	breq	.+2      	; 0x1357a <format_drives+0xc6>
   13578:	71 c0       	rjmp	.+226    	; 0x1365c <format_drives+0x1a8>
   1357a:	a7 80       	ldd	r10, Z+7	; 0x07
   1357c:	b0 84       	ldd	r11, Z+8	; 0x08
   1357e:	be 01       	movw	r22, r28
   13580:	66 5f       	subi	r22, 0xF6	; 246
   13582:	7f 4f       	sbci	r23, 0xFF	; 255
   13584:	f5 01       	movw	r30, r10
   13586:	82 81       	ldd	r24, Z+2	; 0x02
   13588:	93 81       	ldd	r25, Z+3	; 0x03
   1358a:	0e 94 26 79 	call	0xf24c	; 0xf24c <stat>
   1358e:	01 96       	adiw	r24, 0x01	; 1
   13590:	09 f0       	breq	.+2      	; 0x13594 <format_drives+0xe0>
   13592:	64 c0       	rjmp	.+200    	; 0x1365c <format_drives+0x1a8>
   13594:	f5 01       	movw	r30, r10
   13596:	82 89       	ldd	r24, Z+18	; 0x12
   13598:	93 89       	ldd	r25, Z+19	; 0x13
   1359a:	81 15       	cp	r24, r1
   1359c:	91 40       	sbci	r25, 0x01	; 1
   1359e:	31 f0       	breq	.+12     	; 0x135ac <format_drives+0xf8>
   135a0:	ed b7       	in	r30, 0x3d	; 61
   135a2:	fe b7       	in	r31, 0x3e	; 62
   135a4:	61 82       	std	Z+1, r6	; 0x01
   135a6:	72 82       	std	Z+2, r7	; 0x02
   135a8:	83 82       	std	Z+3, r8	; 0x03
   135aa:	7a c0       	rjmp	.+244    	; 0x136a0 <format_drives+0x1ec>
   135ac:	f6 01       	movw	r30, r12
   135ae:	23 80       	ldd	r2, Z+3	; 0x03
   135b0:	34 80       	ldd	r3, Z+4	; 0x04
   135b2:	45 80       	ldd	r4, Z+5	; 0x05
   135b4:	56 80       	ldd	r5, Z+6	; 0x06
   135b6:	ed b7       	in	r30, 0x3d	; 61
   135b8:	fe b7       	in	r31, 0x3e	; 62
   135ba:	26 82       	std	Z+6, r2	; 0x06
   135bc:	37 82       	std	Z+7, r3	; 0x07
   135be:	40 86       	std	Z+8, r4	; 0x08
   135c0:	51 86       	std	Z+9, r5	; 0x09
   135c2:	f5 01       	movw	r30, r10
   135c4:	82 81       	ldd	r24, Z+2	; 0x02
   135c6:	93 81       	ldd	r25, Z+3	; 0x03
   135c8:	ed b7       	in	r30, 0x3d	; 61
   135ca:	fe b7       	in	r31, 0x3e	; 62
   135cc:	95 83       	std	Z+5, r25	; 0x05
   135ce:	84 83       	std	Z+4, r24	; 0x04
   135d0:	ac 96       	adiw	r28, 0x2c	; 44
   135d2:	2d ad       	ldd	r18, Y+61	; 0x3d
   135d4:	3e ad       	ldd	r19, Y+62	; 0x3e
   135d6:	4f ad       	ldd	r20, Y+63	; 0x3f
   135d8:	ac 97       	sbiw	r28, 0x2c	; 44
   135da:	21 83       	std	Z+1, r18	; 0x01
   135dc:	32 83       	std	Z+2, r19	; 0x02
   135de:	43 83       	std	Z+3, r20	; 0x03
   135e0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   135e4:	6e 96       	adiw	r28, 0x1e	; 30
   135e6:	2e ad       	ldd	r18, Y+62	; 0x3e
   135e8:	3f ad       	ldd	r19, Y+63	; 0x3f
   135ea:	6e 97       	sbiw	r28, 0x1e	; 30
   135ec:	ed b7       	in	r30, 0x3d	; 61
   135ee:	fe b7       	in	r31, 0x3e	; 62
   135f0:	37 83       	std	Z+7, r19	; 0x07
   135f2:	26 83       	std	Z+6, r18	; 0x06
   135f4:	af 96       	adiw	r28, 0x2f	; 47
   135f6:	8d ad       	ldd	r24, Y+61	; 0x3d
   135f8:	9e ad       	ldd	r25, Y+62	; 0x3e
   135fa:	af ad       	ldd	r26, Y+63	; 0x3f
   135fc:	af 97       	sbiw	r28, 0x2f	; 47
   135fe:	83 83       	std	Z+3, r24	; 0x03
   13600:	94 83       	std	Z+4, r25	; 0x04
   13602:	a5 83       	std	Z+5, r26	; 0x05
   13604:	2a e3       	ldi	r18, 0x3A	; 58
   13606:	30 e0       	ldi	r19, 0x00	; 0
   13608:	2c 0f       	add	r18, r28
   1360a:	3d 1f       	adc	r19, r29
   1360c:	32 83       	std	Z+2, r19	; 0x02
   1360e:	21 83       	std	Z+1, r18	; 0x01
   13610:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <sprintf_P>
   13614:	f5 01       	movw	r30, r10
   13616:	a2 80       	ldd	r10, Z+2	; 0x02
   13618:	b3 80       	ldd	r11, Z+3	; 0x03
   1361a:	c2 01       	movw	r24, r4
   1361c:	b1 01       	movw	r22, r2
   1361e:	0e 94 a0 a3 	call	0x14740	; 0x14740 <lif_dir_count>
   13622:	9b 01       	movw	r18, r22
   13624:	ac 01       	movw	r20, r24
   13626:	82 01       	movw	r16, r4
   13628:	71 01       	movw	r14, r2
   1362a:	be 01       	movw	r22, r28
   1362c:	66 5c       	subi	r22, 0xC6	; 198
   1362e:	7f 4f       	sbci	r23, 0xFF	; 255
   13630:	c5 01       	movw	r24, r10
   13632:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <lif_create_image>
   13636:	6c 96       	adiw	r28, 0x1c	; 28
   13638:	2e ad       	ldd	r18, Y+62	; 0x3e
   1363a:	3f ad       	ldd	r19, Y+63	; 0x3f
   1363c:	6c 97       	sbiw	r28, 0x1c	; 28
   1363e:	2f 5f       	subi	r18, 0xFF	; 255
   13640:	3f 4f       	sbci	r19, 0xFF	; 255
   13642:	6c 96       	adiw	r28, 0x1c	; 28
   13644:	3f af       	std	Y+63, r19	; 0x3f
   13646:	2e af       	std	Y+62, r18	; 0x3e
   13648:	6c 97       	sbiw	r28, 0x1c	; 28
   1364a:	6e 96       	adiw	r28, 0x1e	; 30
   1364c:	8e ad       	ldd	r24, Y+62	; 0x3e
   1364e:	9f ad       	ldd	r25, Y+63	; 0x3f
   13650:	6e 97       	sbiw	r28, 0x1e	; 30
   13652:	01 96       	adiw	r24, 0x01	; 1
   13654:	6e 96       	adiw	r28, 0x1e	; 30
   13656:	9f af       	std	Y+63, r25	; 0x3f
   13658:	8e af       	std	Y+62, r24	; 0x3e
   1365a:	6e 97       	sbiw	r28, 0x1e	; 30
   1365c:	f6 01       	movw	r30, r12
   1365e:	80 81       	ld	r24, Z
   13660:	81 30       	cpi	r24, 0x01	; 1
   13662:	09 f0       	breq	.+2      	; 0x13666 <format_drives+0x1b2>
   13664:	78 c0       	rjmp	.+240    	; 0x13756 <format_drives+0x2a2>
   13666:	a7 80       	ldd	r10, Z+7	; 0x07
   13668:	b0 84       	ldd	r11, Z+8	; 0x08
   1366a:	be 01       	movw	r22, r28
   1366c:	66 5f       	subi	r22, 0xF6	; 246
   1366e:	7f 4f       	sbci	r23, 0xFF	; 255
   13670:	f5 01       	movw	r30, r10
   13672:	82 81       	ldd	r24, Z+2	; 0x02
   13674:	93 81       	ldd	r25, Z+3	; 0x03
   13676:	0e 94 26 79 	call	0xf24c	; 0xf24c <stat>
   1367a:	01 96       	adiw	r24, 0x01	; 1
   1367c:	09 f0       	breq	.+2      	; 0x13680 <format_drives+0x1cc>
   1367e:	6b c0       	rjmp	.+214    	; 0x13756 <format_drives+0x2a2>
   13680:	f5 01       	movw	r30, r10
   13682:	80 85       	ldd	r24, Z+8	; 0x08
   13684:	91 85       	ldd	r25, Z+9	; 0x09
   13686:	81 15       	cp	r24, r1
   13688:	91 40       	sbci	r25, 0x01	; 1
   1368a:	69 f0       	breq	.+26     	; 0x136a6 <format_drives+0x1f2>
   1368c:	a9 96       	adiw	r28, 0x29	; 41
   1368e:	2d ad       	ldd	r18, Y+61	; 0x3d
   13690:	3e ad       	ldd	r19, Y+62	; 0x3e
   13692:	4f ad       	ldd	r20, Y+63	; 0x3f
   13694:	a9 97       	sbiw	r28, 0x29	; 41
   13696:	ed b7       	in	r30, 0x3d	; 61
   13698:	fe b7       	in	r31, 0x3e	; 62
   1369a:	21 83       	std	Z+1, r18	; 0x01
   1369c:	32 83       	std	Z+2, r19	; 0x02
   1369e:	43 83       	std	Z+3, r20	; 0x03
   136a0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   136a4:	58 c0       	rjmp	.+176    	; 0x13756 <format_drives+0x2a2>
   136a6:	f6 01       	movw	r30, r12
   136a8:	23 80       	ldd	r2, Z+3	; 0x03
   136aa:	34 80       	ldd	r3, Z+4	; 0x04
   136ac:	45 80       	ldd	r4, Z+5	; 0x05
   136ae:	56 80       	ldd	r5, Z+6	; 0x06
   136b0:	ed b7       	in	r30, 0x3d	; 61
   136b2:	fe b7       	in	r31, 0x3e	; 62
   136b4:	26 82       	std	Z+6, r2	; 0x06
   136b6:	37 82       	std	Z+7, r3	; 0x07
   136b8:	40 86       	std	Z+8, r4	; 0x08
   136ba:	51 86       	std	Z+9, r5	; 0x09
   136bc:	f5 01       	movw	r30, r10
   136be:	82 81       	ldd	r24, Z+2	; 0x02
   136c0:	93 81       	ldd	r25, Z+3	; 0x03
   136c2:	ed b7       	in	r30, 0x3d	; 61
   136c4:	fe b7       	in	r31, 0x3e	; 62
   136c6:	95 83       	std	Z+5, r25	; 0x05
   136c8:	84 83       	std	Z+4, r24	; 0x04
   136ca:	a3 96       	adiw	r28, 0x23	; 35
   136cc:	2d ad       	ldd	r18, Y+61	; 0x3d
   136ce:	3e ad       	ldd	r19, Y+62	; 0x3e
   136d0:	4f ad       	ldd	r20, Y+63	; 0x3f
   136d2:	a3 97       	sbiw	r28, 0x23	; 35
   136d4:	21 83       	std	Z+1, r18	; 0x01
   136d6:	32 83       	std	Z+2, r19	; 0x02
   136d8:	43 83       	std	Z+3, r20	; 0x03
   136da:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   136de:	a0 96       	adiw	r28, 0x20	; 32
   136e0:	2e ad       	ldd	r18, Y+62	; 0x3e
   136e2:	3f ad       	ldd	r19, Y+63	; 0x3f
   136e4:	a0 97       	sbiw	r28, 0x20	; 32
   136e6:	ed b7       	in	r30, 0x3d	; 61
   136e8:	fe b7       	in	r31, 0x3e	; 62
   136ea:	37 83       	std	Z+7, r19	; 0x07
   136ec:	26 83       	std	Z+6, r18	; 0x06
   136ee:	a6 96       	adiw	r28, 0x26	; 38
   136f0:	8d ad       	ldd	r24, Y+61	; 0x3d
   136f2:	9e ad       	ldd	r25, Y+62	; 0x3e
   136f4:	af ad       	ldd	r26, Y+63	; 0x3f
   136f6:	a6 97       	sbiw	r28, 0x26	; 38
   136f8:	83 83       	std	Z+3, r24	; 0x03
   136fa:	94 83       	std	Z+4, r25	; 0x04
   136fc:	a5 83       	std	Z+5, r26	; 0x05
   136fe:	2a e3       	ldi	r18, 0x3A	; 58
   13700:	30 e0       	ldi	r19, 0x00	; 0
   13702:	2c 0f       	add	r18, r28
   13704:	3d 1f       	adc	r19, r29
   13706:	32 83       	std	Z+2, r19	; 0x02
   13708:	21 83       	std	Z+1, r18	; 0x01
   1370a:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <sprintf_P>
   1370e:	f5 01       	movw	r30, r10
   13710:	a2 80       	ldd	r10, Z+2	; 0x02
   13712:	b3 80       	ldd	r11, Z+3	; 0x03
   13714:	c2 01       	movw	r24, r4
   13716:	b1 01       	movw	r22, r2
   13718:	0e 94 a0 a3 	call	0x14740	; 0x14740 <lif_dir_count>
   1371c:	9b 01       	movw	r18, r22
   1371e:	ac 01       	movw	r20, r24
   13720:	82 01       	movw	r16, r4
   13722:	71 01       	movw	r14, r2
   13724:	be 01       	movw	r22, r28
   13726:	66 5c       	subi	r22, 0xC6	; 198
   13728:	7f 4f       	sbci	r23, 0xFF	; 255
   1372a:	c5 01       	movw	r24, r10
   1372c:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <lif_create_image>
   13730:	6c 96       	adiw	r28, 0x1c	; 28
   13732:	2e ad       	ldd	r18, Y+62	; 0x3e
   13734:	3f ad       	ldd	r19, Y+63	; 0x3f
   13736:	6c 97       	sbiw	r28, 0x1c	; 28
   13738:	2f 5f       	subi	r18, 0xFF	; 255
   1373a:	3f 4f       	sbci	r19, 0xFF	; 255
   1373c:	6c 96       	adiw	r28, 0x1c	; 28
   1373e:	3f af       	std	Y+63, r19	; 0x3f
   13740:	2e af       	std	Y+62, r18	; 0x3e
   13742:	6c 97       	sbiw	r28, 0x1c	; 28
   13744:	a0 96       	adiw	r28, 0x20	; 32
   13746:	8e ad       	ldd	r24, Y+62	; 0x3e
   13748:	9f ad       	ldd	r25, Y+63	; 0x3f
   1374a:	a0 97       	sbiw	r28, 0x20	; 32
   1374c:	01 96       	adiw	r24, 0x01	; 1
   1374e:	a0 96       	adiw	r28, 0x20	; 32
   13750:	9f af       	std	Y+63, r25	; 0x3f
   13752:	8e af       	std	Y+62, r24	; 0x3e
   13754:	a0 97       	sbiw	r28, 0x20	; 32
   13756:	9b e0       	ldi	r25, 0x0B	; 11
   13758:	c9 0e       	add	r12, r25
   1375a:	d1 1c       	adc	r13, r1
   1375c:	a0 e8       	ldi	r26, 0x80	; 128
   1375e:	ca 16       	cp	r12, r26
   13760:	af e1       	ldi	r26, 0x1F	; 31
   13762:	da 06       	cpc	r13, r26
   13764:	09 f0       	breq	.+2      	; 0x13768 <format_drives+0x2b4>
   13766:	01 cf       	rjmp	.-510    	; 0x1356a <format_drives+0xb6>
   13768:	6c 96       	adiw	r28, 0x1c	; 28
   1376a:	ee ad       	ldd	r30, Y+62	; 0x3e
   1376c:	ff ad       	ldd	r31, Y+63	; 0x3f
   1376e:	6c 97       	sbiw	r28, 0x1c	; 28
   13770:	ef 2b       	or	r30, r31
   13772:	11 f0       	breq	.+4      	; 0x13778 <format_drives+0x2c4>
   13774:	0e 94 ef 31 	call	0x63de	; 0x63de <sep>
   13778:	c2 59       	subi	r28, 0x92	; 146
   1377a:	df 4f       	sbci	r29, 0xFF	; 255
   1377c:	0f b6       	in	r0, 0x3f	; 63
   1377e:	f8 94       	cli
   13780:	de bf       	out	0x3e, r29	; 62
   13782:	0f be       	out	0x3f, r0	; 63
   13784:	cd bf       	out	0x3d, r28	; 61
   13786:	df 91       	pop	r29
   13788:	cf 91       	pop	r28
   1378a:	1f 91       	pop	r17
   1378c:	0f 91       	pop	r16
   1378e:	ff 90       	pop	r15
   13790:	ef 90       	pop	r14
   13792:	df 90       	pop	r13
   13794:	cf 90       	pop	r12
   13796:	bf 90       	pop	r11
   13798:	af 90       	pop	r10
   1379a:	8f 90       	pop	r8
   1379c:	7f 90       	pop	r7
   1379e:	6f 90       	pop	r6
   137a0:	5f 90       	pop	r5
   137a2:	4f 90       	pop	r4
   137a4:	3f 90       	pop	r3
   137a6:	2f 90       	pop	r2
   137a8:	08 95       	ret

000137aa <drives_help>:
   137aa:	00 d0       	rcall	.+0      	; 0x137ac <drives_help+0x2>
   137ac:	1f 92       	push	r1
   137ae:	81 11       	cpse	r24, r1
   137b0:	03 c0       	rjmp	.+6      	; 0x137b8 <drives_help+0xe>
   137b2:	89 e9       	ldi	r24, 0x99	; 153
   137b4:	99 e1       	ldi	r25, 0x19	; 25
   137b6:	02 c0       	rjmp	.+4      	; 0x137bc <drives_help+0x12>
   137b8:	84 eb       	ldi	r24, 0xB4	; 180
   137ba:	97 e1       	ldi	r25, 0x17	; 23
   137bc:	a0 e0       	ldi	r26, 0x00	; 0
   137be:	ed b7       	in	r30, 0x3d	; 61
   137c0:	fe b7       	in	r31, 0x3e	; 62
   137c2:	81 83       	std	Z+1, r24	; 0x01
   137c4:	92 83       	std	Z+2, r25	; 0x02
   137c6:	a3 83       	std	Z+3, r26	; 0x03
   137c8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   137cc:	0f 90       	pop	r0
   137ce:	0f 90       	pop	r0
   137d0:	0f 90       	pop	r0
   137d2:	08 95       	ret

000137d4 <mount_usage>:
   137d4:	00 d0       	rcall	.+0      	; 0x137d6 <mount_usage+0x2>
   137d6:	1f 92       	push	r1
   137d8:	8b ea       	ldi	r24, 0xAB	; 171
   137da:	97 e1       	ldi	r25, 0x17	; 23
   137dc:	a0 e0       	ldi	r26, 0x00	; 0
   137de:	ed b7       	in	r30, 0x3d	; 61
   137e0:	fe b7       	in	r31, 0x3e	; 62
   137e2:	81 83       	std	Z+1, r24	; 0x01
   137e4:	92 83       	std	Z+2, r25	; 0x02
   137e6:	a3 83       	std	Z+3, r26	; 0x03
   137e8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   137ec:	81 e0       	ldi	r24, 0x01	; 1
   137ee:	dd df       	rcall	.-70     	; 0x137aa <drives_help>
   137f0:	0f 90       	pop	r0
   137f2:	0f 90       	pop	r0
   137f4:	0f 90       	pop	r0
   137f6:	08 95       	ret

000137f8 <index_address>:
   137f8:	ec ef       	ldi	r30, 0xFC	; 252
   137fa:	fe e1       	ldi	r31, 0x1E	; 30
   137fc:	90 e0       	ldi	r25, 0x00	; 0
   137fe:	28 2f       	mov	r18, r24
   13800:	88 0f       	add	r24, r24
   13802:	33 0b       	sbc	r19, r19
   13804:	80 81       	ld	r24, Z
   13806:	88 23       	and	r24, r24
   13808:	29 f0       	breq	.+10     	; 0x13814 <index_address+0x1c>
   1380a:	41 81       	ldd	r20, Z+1	; 0x01
   1380c:	50 e0       	ldi	r21, 0x00	; 0
   1380e:	42 17       	cp	r20, r18
   13810:	53 07       	cpc	r21, r19
   13812:	31 f0       	breq	.+12     	; 0x13820 <index_address+0x28>
   13814:	9f 5f       	subi	r25, 0xFF	; 255
   13816:	3b 96       	adiw	r30, 0x0b	; 11
   13818:	9c 30       	cpi	r25, 0x0C	; 12
   1381a:	a1 f7       	brne	.-24     	; 0x13804 <index_address+0xc>
   1381c:	8f ef       	ldi	r24, 0xFF	; 255
   1381e:	08 95       	ret
   13820:	89 2f       	mov	r24, r25
   13822:	08 95       	ret

00013824 <umount>:

/// ===============================================
/// @brief umount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t umount(int argc, char *argv[])
{
   13824:	cf 93       	push	r28
   13826:	df 93       	push	r29
   13828:	00 d0       	rcall	.+0      	; 0x1382a <umount+0x6>
   1382a:	00 d0       	rcall	.+0      	; 0x1382c <umount+0x8>
   1382c:	1f 92       	push	r1
   1382e:	eb 01       	movw	r28, r22

	int8_t address;
	int8_t index;

	if(argc != 2)
   13830:	02 97       	sbiw	r24, 0x02	; 2
   13832:	f1 f0       	breq	.+60     	; 0x13870 <umount+0x4c>
	{
		printf("Usage:\n");
   13834:	83 ea       	ldi	r24, 0xA3	; 163
   13836:	97 e1       	ldi	r25, 0x17	; 23
   13838:	a0 e0       	ldi	r26, 0x00	; 0
   1383a:	ed b7       	in	r30, 0x3d	; 61
   1383c:	fe b7       	in	r31, 0x3e	; 62
   1383e:	81 83       	std	Z+1, r24	; 0x01
   13840:	92 83       	std	Z+2, r25	; 0x02
   13842:	a3 83       	std	Z+3, r26	; 0x03
   13844:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
		printf("  umount address\n");
   13848:	81 e9       	ldi	r24, 0x91	; 145
   1384a:	97 e1       	ldi	r25, 0x17	; 23
   1384c:	a0 e0       	ldi	r26, 0x00	; 0
   1384e:	ed b7       	in	r30, 0x3d	; 61
   13850:	fe b7       	in	r31, 0x3e	; 62
   13852:	81 83       	std	Z+1, r24	; 0x01
   13854:	92 83       	std	Z+2, r25	; 0x02
   13856:	a3 83       	std	Z+3, r26	; 0x03
   13858:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
		printf("  - address is the device address\n");
   1385c:	8e e6       	ldi	r24, 0x6E	; 110
   1385e:	97 e1       	ldi	r25, 0x17	; 23
   13860:	a0 e0       	ldi	r26, 0x00	; 0
   13862:	ed b7       	in	r30, 0x3d	; 61
   13864:	fe b7       	in	r31, 0x3e	; 62
   13866:	81 83       	std	Z+1, r24	; 0x01
   13868:	92 83       	std	Z+2, r25	; 0x02
   1386a:	a3 83       	std	Z+3, r26	; 0x03
   1386c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
	}
	address = atoi(argv[1]);
   13870:	8a 81       	ldd	r24, Y+2	; 0x02
   13872:	9b 81       	ldd	r25, Y+3	; 0x03
   13874:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <atoi>
   13878:	d8 2f       	mov	r29, r24
	index = index_address(address);
   1387a:	be df       	rcall	.-132    	; 0x137f8 <index_address>
   1387c:	c8 2f       	mov	r28, r24
	if(index == -1)
   1387e:	8f 3f       	cpi	r24, 0xFF	; 255
   13880:	89 f4       	brne	.+34     	; 0x138a4 <umount+0x80>
	{
		printf("umount address:[%d] NOT found\n", address);
   13882:	8d 2f       	mov	r24, r29
   13884:	dd 0f       	add	r29, r29
   13886:	99 0b       	sbc	r25, r25
   13888:	ed b7       	in	r30, 0x3d	; 61
   1388a:	fe b7       	in	r31, 0x3e	; 62
   1388c:	95 83       	std	Z+5, r25	; 0x05
   1388e:	84 83       	std	Z+4, r24	; 0x04
   13890:	8f e4       	ldi	r24, 0x4F	; 79
   13892:	97 e1       	ldi	r25, 0x17	; 23
   13894:	a0 e0       	ldi	r26, 0x00	; 0
   13896:	81 83       	std	Z+1, r24	; 0x01
   13898:	92 83       	std	Z+2, r25	; 0x02
   1389a:	a3 83       	std	Z+3, r26	; 0x03
   1389c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
		return(-1);
   138a0:	8f ef       	ldi	r24, 0xFF	; 255
	}
	free_device(index);
   138a2:	02 c0       	rjmp	.+4      	; 0x138a8 <umount+0x84>
   138a4:	fb db       	rcall	.-2058   	; 0x1309c <free_device>
	return(index);
   138a6:	8c 2f       	mov	r24, r28
}
   138a8:	cd b7       	in	r28, 0x3d	; 61
   138aa:	de b7       	in	r29, 0x3e	; 62
   138ac:	25 96       	adiw	r28, 0x05	; 5
   138ae:	e2 e0       	ldi	r30, 0x02	; 2
   138b0:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

000138b4 <display_mount>:
	return(1);
}


void display_mount(int8_t index )
{
   138b4:	a9 e0       	ldi	r26, 0x09	; 9
   138b6:	b0 e0       	ldi	r27, 0x00	; 0
   138b8:	e0 e6       	ldi	r30, 0x60	; 96
   138ba:	fc e9       	ldi	r31, 0x9C	; 156
   138bc:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

	if(Devices[index].TYPE == NO_TYPE)
   138c0:	08 2f       	mov	r16, r24
   138c2:	08 2e       	mov	r0, r24
   138c4:	00 0c       	add	r0, r0
   138c6:	11 0b       	sbc	r17, r17
   138c8:	9b e0       	ldi	r25, 0x0B	; 11
   138ca:	89 02       	muls	r24, r25
   138cc:	f0 01       	movw	r30, r0
   138ce:	11 24       	eor	r1, r1
   138d0:	e4 50       	subi	r30, 0x04	; 4
   138d2:	f1 4e       	sbci	r31, 0xE1	; 225
   138d4:	80 81       	ld	r24, Z
   138d6:	88 23       	and	r24, r24
   138d8:	09 f4       	brne	.+2      	; 0x138dc <display_mount+0x28>
   138da:	5f c0       	rjmp	.+190    	; 0x1399a <display_mount+0xe6>
		return;

	if(Devices[index].TYPE == SS80_TYPE)
   138dc:	83 30       	cpi	r24, 0x03	; 3
   138de:	c9 f4       	brne	.+50     	; 0x13912 <display_mount+0x5e>
	{
		SS80p= (SS80DiskType *)Devices[index].dev;
   138e0:	07 80       	ldd	r0, Z+7	; 0x07
   138e2:	f0 85       	ldd	r31, Z+8	; 0x08
   138e4:	e0 2d       	mov	r30, r0

		printf("SS80    %-8s %2d %s\n", SS80p->HEADER.model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   138e6:	82 81       	ldd	r24, Z+2	; 0x02
   138e8:	93 81       	ldd	r25, Z+3	; 0x03
   138ea:	cd b7       	in	r28, 0x3d	; 61
   138ec:	de b7       	in	r29, 0x3e	; 62
   138ee:	99 87       	std	Y+9, r25	; 0x09
   138f0:	88 87       	std	Y+8, r24	; 0x08
   138f2:	80 81       	ld	r24, Z
   138f4:	90 e0       	ldi	r25, 0x00	; 0
   138f6:	9f 83       	std	Y+7, r25	; 0x07
   138f8:	8e 83       	std	Y+6, r24	; 0x06
   138fa:	84 81       	ldd	r24, Z+4	; 0x04
   138fc:	95 81       	ldd	r25, Z+5	; 0x05
   138fe:	9d 83       	std	Y+5, r25	; 0x05
   13900:	8c 83       	std	Y+4, r24	; 0x04
   13902:	8e e6       	ldi	r24, 0x6E	; 110
   13904:	96 e1       	ldi	r25, 0x16	; 22
   13906:	a0 e0       	ldi	r26, 0x00	; 0
   13908:	89 83       	std	Y+1, r24	; 0x01
   1390a:	9a 83       	std	Y+2, r25	; 0x02
   1390c:	ab 83       	std	Y+3, r26	; 0x03
   1390e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE )
   13912:	8b e0       	ldi	r24, 0x0B	; 11
   13914:	80 9f       	mul	r24, r16
   13916:	f0 01       	movw	r30, r0
   13918:	81 9f       	mul	r24, r17
   1391a:	f0 0d       	add	r31, r0
   1391c:	11 24       	eor	r1, r1
   1391e:	e4 50       	subi	r30, 0x04	; 4
   13920:	f1 4e       	sbci	r31, 0xE1	; 225
   13922:	80 81       	ld	r24, Z
   13924:	81 30       	cpi	r24, 0x01	; 1
   13926:	c9 f4       	brne	.+50     	; 0x1395a <display_mount+0xa6>
	{
		AMIGOp = (AMIGODiskType *)Devices[index].dev;
   13928:	07 80       	ldd	r0, Z+7	; 0x07
   1392a:	f0 85       	ldd	r31, Z+8	; 0x08
   1392c:	e0 2d       	mov	r30, r0
		printf("AMIGO   %-8s %2d %s\n", AMIGOp->HEADER.model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   1392e:	82 81       	ldd	r24, Z+2	; 0x02
   13930:	93 81       	ldd	r25, Z+3	; 0x03
   13932:	cd b7       	in	r28, 0x3d	; 61
   13934:	de b7       	in	r29, 0x3e	; 62
   13936:	99 87       	std	Y+9, r25	; 0x09
   13938:	88 87       	std	Y+8, r24	; 0x08
   1393a:	80 81       	ld	r24, Z
   1393c:	90 e0       	ldi	r25, 0x00	; 0
   1393e:	9f 83       	std	Y+7, r25	; 0x07
   13940:	8e 83       	std	Y+6, r24	; 0x06
   13942:	84 81       	ldd	r24, Z+4	; 0x04
   13944:	95 81       	ldd	r25, Z+5	; 0x05
   13946:	9d 83       	std	Y+5, r25	; 0x05
   13948:	8c 83       	std	Y+4, r24	; 0x04
   1394a:	89 e5       	ldi	r24, 0x59	; 89
   1394c:	96 e1       	ldi	r25, 0x16	; 22
   1394e:	a0 e0       	ldi	r26, 0x00	; 0
   13950:	89 83       	std	Y+1, r24	; 0x01
   13952:	9a 83       	std	Y+2, r25	; 0x02
   13954:	ab 83       	std	Y+3, r26	; 0x03
   13956:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
	}
#endif                                    // #ifdef AMIGO

	if(Devices[index].TYPE == PRINTER_TYPE )
   1395a:	8b e0       	ldi	r24, 0x0B	; 11
   1395c:	80 9f       	mul	r24, r16
   1395e:	f0 01       	movw	r30, r0
   13960:	81 9f       	mul	r24, r17
   13962:	f0 0d       	add	r31, r0
   13964:	11 24       	eor	r1, r1
   13966:	e4 50       	subi	r30, 0x04	; 4
   13968:	f1 4e       	sbci	r31, 0xE1	; 225
   1396a:	80 81       	ld	r24, Z
   1396c:	84 30       	cpi	r24, 0x04	; 4
   1396e:	a9 f4       	brne	.+42     	; 0x1399a <display_mount+0xe6>
	{
            PRINTERp= (PRINTERDeviceType *)Devices[index].dev;
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
   13970:	07 80       	ldd	r0, Z+7	; 0x07
   13972:	f0 85       	ldd	r31, Z+8	; 0x08
   13974:	e0 2d       	mov	r30, r0
   13976:	80 81       	ld	r24, Z
   13978:	90 e0       	ldi	r25, 0x00	; 0
   1397a:	cd b7       	in	r28, 0x3d	; 61
   1397c:	de b7       	in	r29, 0x3e	; 62
   1397e:	9f 83       	std	Y+7, r25	; 0x07
   13980:	8e 83       	std	Y+6, r24	; 0x06
   13982:	89 e6       	ldi	r24, 0x69	; 105
   13984:	94 e0       	ldi	r25, 0x04	; 4
   13986:	9d 83       	std	Y+5, r25	; 0x05
   13988:	8c 83       	std	Y+4, r24	; 0x04
   1398a:	87 e4       	ldi	r24, 0x47	; 71
   1398c:	96 e1       	ldi	r25, 0x16	; 22
   1398e:	a0 e0       	ldi	r26, 0x00	; 0
   13990:	89 83       	std	Y+1, r24	; 0x01
   13992:	9a 83       	std	Y+2, r25	; 0x02
   13994:	ab 83       	std	Y+3, r26	; 0x03
   13996:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
	}
}
   1399a:	cd b7       	in	r28, 0x3d	; 61
   1399c:	de b7       	in	r29, 0x3e	; 62
   1399e:	29 96       	adiw	r28, 0x09	; 9
   139a0:	e4 e0       	ldi	r30, 0x04	; 4
   139a2:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

000139a6 <verify_device>:

/// ===============================================
/// @brief Verify a device and delete it is there are any errors
/// @return  1 = OK 0 = ERROR
int8_t verify_device(int8_t index)
{
   139a6:	a5 e0       	ldi	r26, 0x05	; 5
   139a8:	b0 e0       	ldi	r27, 0x00	; 0
   139aa:	e9 ed       	ldi	r30, 0xD9	; 217
   139ac:	fc e9       	ldi	r31, 0x9C	; 156
   139ae:	0c 94 be e6 	jmp	0x1cd7c	; 0x1cd7c <__prologue_saves__+0x16>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    if(Devices[index].TYPE == NO_TYPE)
   139b2:	e8 2e       	mov	r14, r24
   139b4:	08 2e       	mov	r0, r24
   139b6:	00 0c       	add	r0, r0
   139b8:	ff 08       	sbc	r15, r15
   139ba:	9b e0       	ldi	r25, 0x0B	; 11
   139bc:	89 02       	muls	r24, r25
   139be:	f0 01       	movw	r30, r0
   139c0:	11 24       	eor	r1, r1
   139c2:	e4 50       	subi	r30, 0x04	; 4
   139c4:	f1 4e       	sbci	r31, 0xE1	; 225
   139c6:	10 81       	ld	r17, Z
   139c8:	11 23       	and	r17, r17
   139ca:	09 f1       	breq	.+66     	; 0x13a0e <verify_device+0x68>
   139cc:	d8 2e       	mov	r13, r24
        return(ret);

	address = Devices[index].ADDRESS;
   139ce:	81 81       	ldd	r24, Z+1	; 0x01
    type = Devices[index].TYPE;
	ppr = Devices[index].PPR;
   139d0:	02 81       	ldd	r16, Z+2	; 0x02

	if(address < 0 || address > 31)
   139d2:	80 32       	cpi	r24, 0x20	; 32
   139d4:	78 f0       	brcs	.+30     	; 0x139f4 <verify_device+0x4e>
	{
		printf("Address (%d) out of range\n", (int) address);
   139d6:	90 e0       	ldi	r25, 0x00	; 0
   139d8:	ed b7       	in	r30, 0x3d	; 61
   139da:	fe b7       	in	r31, 0x3e	; 62
   139dc:	95 83       	std	Z+5, r25	; 0x05
   139de:	84 83       	std	Z+4, r24	; 0x04
   139e0:	89 eb       	ldi	r24, 0xB9	; 185
   139e2:	9a e1       	ldi	r25, 0x1A	; 26
   139e4:	a0 e0       	ldi	r26, 0x00	; 0
   139e6:	81 83       	std	Z+1, r24	; 0x01
   139e8:	92 83       	std	Z+2, r25	; 0x02
   139ea:	a3 83       	std	Z+3, r26	; 0x03
   139ec:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
		ret = 0;
   139f0:	80 e0       	ldi	r24, 0x00	; 0
   139f2:	01 c0       	rjmp	.+2      	; 0x139f6 <verify_device+0x50>
int8_t verify_device(int8_t index)
{
    long sectors;
	int8_t type;
	int address,ppr;
	int8_t ret = 1;	
   139f4:	81 e0       	ldi	r24, 0x01	; 1
	}
	addr_bits |= addr_mask;

	
	// Printers do not use PPR
	if(type == PRINTER_TYPE)
   139f6:	14 30       	cpi	r17, 0x04	; 4
   139f8:	61 f4       	brne	.+24     	; 0x13a12 <verify_device+0x6c>
	{
		Devices[index].PPR = 0xff;
   139fa:	8b e0       	ldi	r24, 0x0B	; 11
   139fc:	8e 9d       	mul	r24, r14
   139fe:	f0 01       	movw	r30, r0
   13a00:	8f 9d       	mul	r24, r15
   13a02:	f0 0d       	add	r31, r0
   13a04:	11 24       	eor	r1, r1
   13a06:	e4 50       	subi	r30, 0x04	; 4
   13a08:	f1 4e       	sbci	r31, 0xE1	; 225
   13a0a:	8f ef       	ldi	r24, 0xFF	; 255
   13a0c:	82 83       	std	Z+2, r24	; 0x02
		return(1);
   13a0e:	81 e0       	ldi	r24, 0x01	; 1
   13a10:	90 c0       	rjmp	.+288    	; 0x13b32 <verify_device+0x18c>
	}
	if(type == SS80_TYPE || AMIGO_TYPE)
	{
		if(ppr < 0 || ppr > 7)
   13a12:	08 30       	cpi	r16, 0x08	; 8
   13a14:	08 f0       	brcs	.+2      	; 0x13a18 <verify_device+0x72>
		{
			ret = 0;
   13a16:	80 e0       	ldi	r24, 0x00	; 0
			printf("PPR (%d) duplicated\n", (int) ppr);
			ret = 0;
		}
		ppr_bits |= ppr_mask;
	}
    if(type == SS80_TYPE)
   13a18:	13 30       	cpi	r17, 0x03	; 3
   13a1a:	79 f5       	brne	.+94     	; 0x13a7a <verify_device+0xd4>
    {
        SS80p= (SS80DiskType *)Devices[index].dev;
   13a1c:	9b e0       	ldi	r25, 0x0B	; 11
   13a1e:	9e 9d       	mul	r25, r14
   13a20:	f0 01       	movw	r30, r0
   13a22:	9f 9d       	mul	r25, r15
   13a24:	f0 0d       	add	r31, r0
   13a26:	11 24       	eor	r1, r1
   13a28:	e4 50       	subi	r30, 0x04	; 4
   13a2a:	f1 4e       	sbci	r31, 0xE1	; 225
   13a2c:	c7 81       	ldd	r28, Z+7	; 0x07
   13a2e:	d0 85       	ldd	r29, Z+8	; 0x08
        if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13a30:	2a 89       	ldd	r18, Y+18	; 0x12
   13a32:	3b 89       	ldd	r19, Y+19	; 0x13
   13a34:	21 15       	cp	r18, r1
   13a36:	31 40       	sbci	r19, 0x01	; 1
   13a38:	79 f0       	breq	.+30     	; 0x13a58 <verify_device+0xb2>
        {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
            printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13a3a:	8c 81       	ldd	r24, Y+4	; 0x04
   13a3c:	9d 81       	ldd	r25, Y+5	; 0x05
   13a3e:	ed b7       	in	r30, 0x3d	; 61
   13a40:	fe b7       	in	r31, 0x3e	; 62
   13a42:	95 83       	std	Z+5, r25	; 0x05
   13a44:	84 83       	std	Z+4, r24	; 0x04
   13a46:	83 e8       	ldi	r24, 0x83	; 131
   13a48:	9a e1       	ldi	r25, 0x1A	; 26
   13a4a:	a0 e0       	ldi	r26, 0x00	; 0
   13a4c:	81 83       	std	Z+1, r24	; 0x01
   13a4e:	92 83       	std	Z+2, r25	; 0x02
   13a50:	a3 83       	std	Z+3, r26	; 0x03
   13a52:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
			ret = 0;
   13a56:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
        Devices[index].BLOCKS = sectors;
   13a58:	9b e0       	ldi	r25, 0x0B	; 11
   13a5a:	9e 9d       	mul	r25, r14
   13a5c:	f0 01       	movw	r30, r0
   13a5e:	9f 9d       	mul	r25, r15
   13a60:	f0 0d       	add	r31, r0
   13a62:	11 24       	eor	r1, r1
   13a64:	e4 50       	subi	r30, 0x04	; 4
   13a66:	f1 4e       	sbci	r31, 0xE1	; 225
   13a68:	48 a5       	ldd	r20, Y+40	; 0x28
   13a6a:	59 a5       	ldd	r21, Y+41	; 0x29
   13a6c:	6a a5       	ldd	r22, Y+42	; 0x2a
   13a6e:	7b a5       	ldd	r23, Y+43	; 0x2b
   13a70:	4f 5f       	subi	r20, 0xFF	; 255
   13a72:	5f 4f       	sbci	r21, 0xFF	; 255
   13a74:	6f 4f       	sbci	r22, 0xFF	; 255
   13a76:	7f 4f       	sbci	r23, 0xFF	; 255
   13a78:	47 c0       	rjmp	.+142    	; 0x13b08 <verify_device+0x162>
    }                                         // SS80_TYPE

#ifdef AMIGO
    if(type == AMIGO_TYPE )
   13a7a:	11 30       	cpi	r17, 0x01	; 1
   13a7c:	09 f0       	breq	.+2      	; 0x13a80 <verify_device+0xda>
   13a7e:	48 c0       	rjmp	.+144    	; 0x13b10 <verify_device+0x16a>
    {
        AMIGOp = (AMIGODiskType *)Devices[index].dev;
   13a80:	9b e0       	ldi	r25, 0x0B	; 11
   13a82:	9e 9d       	mul	r25, r14
   13a84:	f0 01       	movw	r30, r0
   13a86:	9f 9d       	mul	r25, r15
   13a88:	f0 0d       	add	r31, r0
   13a8a:	11 24       	eor	r1, r1
   13a8c:	e4 50       	subi	r30, 0x04	; 4
   13a8e:	f1 4e       	sbci	r31, 0xE1	; 225
   13a90:	c7 81       	ldd	r28, Z+7	; 0x07
   13a92:	d0 85       	ldd	r29, Z+8	; 0x08
        if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13a94:	28 85       	ldd	r18, Y+8	; 0x08
   13a96:	39 85       	ldd	r19, Y+9	; 0x09
   13a98:	21 15       	cp	r18, r1
   13a9a:	31 40       	sbci	r19, 0x01	; 1
   13a9c:	a9 f0       	breq	.+42     	; 0x13ac8 <verify_device+0x122>
        {
            AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   13a9e:	80 e0       	ldi	r24, 0x00	; 0
   13aa0:	91 e0       	ldi	r25, 0x01	; 1
   13aa2:	99 87       	std	Y+9, r25	; 0x09
   13aa4:	88 87       	std	Y+8, r24	; 0x08
            printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13aa6:	80 91 04 00 	lds	r24, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
   13aaa:	90 91 05 00 	lds	r25, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
   13aae:	ed b7       	in	r30, 0x3d	; 61
   13ab0:	fe b7       	in	r31, 0x3e	; 62
   13ab2:	95 83       	std	Z+5, r25	; 0x05
   13ab4:	84 83       	std	Z+4, r24	; 0x04
   13ab6:	8c e4       	ldi	r24, 0x4C	; 76
   13ab8:	9a e1       	ldi	r25, 0x1A	; 26
   13aba:	a0 e0       	ldi	r26, 0x00	; 0
   13abc:	81 83       	std	Z+1, r24	; 0x01
   13abe:	92 83       	std	Z+2, r25	; 0x02
   13ac0:	a3 83       	std	Z+3, r26	; 0x03
   13ac2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
			ret = 0;
   13ac6:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
            * AMIGOp->GEOMETRY.HEADS
            * AMIGOp->GEOMETRY.CYLINDERS;
        Devices[index].BLOCKS = sectors;
   13ac8:	9b e0       	ldi	r25, 0x0B	; 11
   13aca:	9e 9d       	mul	r25, r14
   13acc:	f0 01       	movw	r30, r0
   13ace:	9f 9d       	mul	r25, r15
   13ad0:	f0 0d       	add	r31, r0
   13ad2:	11 24       	eor	r1, r1
   13ad4:	e4 50       	subi	r30, 0x04	; 4
   13ad6:	f1 4e       	sbci	r31, 0xE1	; 225
   13ad8:	4a 85       	ldd	r20, Y+10	; 0x0a
   13ada:	5b 85       	ldd	r21, Y+11	; 0x0b
   13adc:	2c 85       	ldd	r18, Y+12	; 0x0c
   13ade:	3d 85       	ldd	r19, Y+13	; 0x0d
   13ae0:	42 9f       	mul	r20, r18
   13ae2:	b0 01       	movw	r22, r0
   13ae4:	43 9f       	mul	r20, r19
   13ae6:	70 0d       	add	r23, r0
   13ae8:	52 9f       	mul	r21, r18
   13aea:	70 0d       	add	r23, r0
   13aec:	11 24       	eor	r1, r1
   13aee:	2e 85       	ldd	r18, Y+14	; 0x0e
   13af0:	3f 85       	ldd	r19, Y+15	; 0x0f
   13af2:	62 9f       	mul	r22, r18
   13af4:	a0 01       	movw	r20, r0
   13af6:	63 9f       	mul	r22, r19
   13af8:	50 0d       	add	r21, r0
   13afa:	72 9f       	mul	r23, r18
   13afc:	50 0d       	add	r21, r0
   13afe:	11 24       	eor	r1, r1
   13b00:	05 2e       	mov	r0, r21
   13b02:	00 0c       	add	r0, r0
   13b04:	66 0b       	sbc	r22, r22
   13b06:	77 0b       	sbc	r23, r23
   13b08:	43 83       	std	Z+3, r20	; 0x03
   13b0a:	54 83       	std	Z+4, r21	; 0x04
   13b0c:	65 83       	std	Z+5, r22	; 0x05
   13b0e:	76 83       	std	Z+6, r23	; 0x06
    }
#endif                                    // #ifdef AMIGO
	if(!ret)
   13b10:	81 11       	cpse	r24, r1
   13b12:	7d cf       	rjmp	.-262    	; 0x13a0e <verify_device+0x68>
	{
		printf("Device errors - removing: ");
   13b14:	81 e3       	ldi	r24, 0x31	; 49
   13b16:	9a e1       	ldi	r25, 0x1A	; 26
   13b18:	a0 e0       	ldi	r26, 0x00	; 0
   13b1a:	ed b7       	in	r30, 0x3d	; 61
   13b1c:	fe b7       	in	r31, 0x3e	; 62
   13b1e:	81 83       	std	Z+1, r24	; 0x01
   13b20:	92 83       	std	Z+2, r25	; 0x02
   13b22:	a3 83       	std	Z+3, r26	; 0x03
   13b24:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
		display_mount(index);	
   13b28:	8d 2d       	mov	r24, r13
   13b2a:	c4 de       	rcall	.-632    	; 0x138b4 <display_mount>
		free_device(index);
   13b2c:	8d 2d       	mov	r24, r13
   13b2e:	b6 da       	rcall	.-2708   	; 0x1309c <free_device>
   13b30:	80 e0       	ldi	r24, 0x00	; 0
	}
	return(ret);
}
   13b32:	cd b7       	in	r28, 0x3d	; 61
   13b34:	de b7       	in	r29, 0x3e	; 62
   13b36:	25 96       	adiw	r28, 0x05	; 5
   13b38:	e7 e0       	ldi	r30, 0x07	; 7
   13b3a:	0c 94 da e6 	jmp	0x1cdb4	; 0x1cdb4 <__epilogue_restores__+0x16>

00013b3e <verify_devices>:

/// ===============================================
/// @brief Post process and Verify all devices
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
   13b3e:	cf 93       	push	r28
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13b40:	c0 e0       	ldi	r28, 0x00	; 0
		verify_device(i);
   13b42:	8c 2f       	mov	r24, r28
   13b44:	30 df       	rcall	.-416    	; 0x139a6 <verify_device>
   13b46:	cf 5f       	subi	r28, 0xFF	; 255
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13b48:	cc 30       	cpi	r28, 0x0C	; 12
   13b4a:	d9 f7       	brne	.-10     	; 0x13b42 <verify_devices+0x4>
		verify_device(i);

}
   13b4c:	cf 91       	pop	r28
   13b4e:	08 95       	ret

00013b50 <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   13b50:	ae e1       	ldi	r26, 0x1E	; 30
   13b52:	b1 e0       	ldi	r27, 0x01	; 1
   13b54:	ee ea       	ldi	r30, 0xAE	; 174
   13b56:	fd e9       	ldi	r31, 0x9D	; 157
   13b58:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
   13b5c:	8c 01       	movw	r16, r24
	int8_t address;

    char str[128];
    char token[128];

    init_Devices();
   13b5e:	b8 db       	rcall	.-2192   	; 0x132d0 <init_Devices>

    printf("Reading: %s\n", name);
   13b60:	ed b7       	in	r30, 0x3d	; 61
   13b62:	fe b7       	in	r31, 0x3e	; 62
   13b64:	15 83       	std	Z+5, r17	; 0x05
   13b66:	04 83       	std	Z+4, r16	; 0x04
   13b68:	8b e7       	ldi	r24, 0x7B	; 123
   13b6a:	90 e2       	ldi	r25, 0x20	; 32
   13b6c:	a0 e0       	ldi	r26, 0x00	; 0
   13b6e:	81 83       	std	Z+1, r24	; 0x01
   13b70:	92 83       	std	Z+2, r25	; 0x02
   13b72:	a3 83       	std	Z+3, r26	; 0x03
   13b74:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    cfg = fopen(name, "rb");
   13b78:	6e ef       	ldi	r22, 0xFE	; 254
   13b7a:	78 e0       	ldi	r23, 0x08	; 8
   13b7c:	c8 01       	movw	r24, r16
   13b7e:	0e 94 21 7e 	call	0xfc42	; 0xfc42 <fopen>
   13b82:	c5 5f       	subi	r28, 0xF5	; 245
   13b84:	de 4f       	sbci	r29, 0xFE	; 254
   13b86:	99 83       	std	Y+1, r25	; 0x01
   13b88:	88 83       	st	Y, r24
   13b8a:	cb 50       	subi	r28, 0x0B	; 11
   13b8c:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   13b8e:	89 2b       	or	r24, r25
   13b90:	09 f4       	brne	.+2      	; 0x13b94 <Read_Config+0x44>
   13b92:	58 c0       	rjmp	.+176    	; 0x13c44 <Read_Config+0xf4>
   13b94:	21 2c       	mov	r2, r1
   13b96:	31 2c       	mov	r3, r1
   13b98:	c8 5f       	subi	r28, 0xF8	; 248
   13b9a:	de 4f       	sbci	r29, 0xFE	; 254
   13b9c:	18 82       	st	Y, r1
   13b9e:	c8 50       	subi	r28, 0x08	; 8
   13ba0:	d1 40       	sbci	r29, 0x01	; 1
   13ba2:	41 2c       	mov	r4, r1
   13ba4:	51 2c       	mov	r5, r1
   13ba6:	e1 2c       	mov	r14, r1
   13ba8:	f1 2c       	mov	r15, r1
   13baa:	c7 5f       	subi	r28, 0xF7	; 247
   13bac:	de 4f       	sbci	r29, 0xFE	; 254
   13bae:	19 82       	std	Y+1, r1	; 0x01
   13bb0:	18 82       	st	Y, r1
   13bb2:	c9 50       	subi	r28, 0x09	; 9
   13bb4:	d1 40       	sbci	r29, 0x01	; 1
   13bb6:	c1 2c       	mov	r12, r1
   13bb8:	d1 2c       	mov	r13, r1
   13bba:	61 2c       	mov	r6, r1
   13bbc:	71 2c       	mov	r7, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13bbe:	8a ec       	ldi	r24, 0xCA	; 202
   13bc0:	9d e1       	ldi	r25, 0x1D	; 29
   13bc2:	9c 01       	movw	r18, r24
   13bc4:	40 e0       	ldi	r20, 0x00	; 0
   13bc6:	c3 5f       	subi	r28, 0xF3	; 243
   13bc8:	de 4f       	sbci	r29, 0xFE	; 254
   13bca:	28 83       	st	Y, r18
   13bcc:	39 83       	std	Y+1, r19	; 0x01
   13bce:	4a 83       	std	Y+2, r20	; 0x02
   13bd0:	cd 50       	subi	r28, 0x0D	; 13
   13bd2:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13bd4:	8c ee       	ldi	r24, 0xEC	; 236
   13bd6:	9d e1       	ldi	r25, 0x1D	; 29
   13bd8:	9c 01       	movw	r18, r24
   13bda:	40 e0       	ldi	r20, 0x00	; 0
   13bdc:	c0 5f       	subi	r28, 0xF0	; 240
   13bde:	de 4f       	sbci	r29, 0xFE	; 254
   13be0:	28 83       	st	Y, r18
   13be2:	39 83       	std	Y+1, r19	; 0x01
   13be4:	4a 83       	std	Y+2, r20	; 0x02
   13be6:	c0 51       	subi	r28, 0x10	; 16
   13be8:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13bea:	8c e1       	ldi	r24, 0x1C	; 28
   13bec:	9e e1       	ldi	r25, 0x1E	; 30
   13bee:	9c 01       	movw	r18, r24
   13bf0:	40 e0       	ldi	r20, 0x00	; 0
   13bf2:	cd 5e       	subi	r28, 0xED	; 237
   13bf4:	de 4f       	sbci	r29, 0xFE	; 254
   13bf6:	28 83       	st	Y, r18
   13bf8:	39 83       	std	Y+1, r19	; 0x01
   13bfa:	4a 83       	std	Y+2, r20	; 0x02
   13bfc:	c3 51       	subi	r28, 0x13	; 19
   13bfe:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13c00:	8b e4       	ldi	r24, 0x4B	; 75
   13c02:	9e e1       	ldi	r25, 0x1E	; 30
   13c04:	9c 01       	movw	r18, r24
   13c06:	40 e0       	ldi	r20, 0x00	; 0
   13c08:	ca 5e       	subi	r28, 0xEA	; 234
   13c0a:	de 4f       	sbci	r29, 0xFE	; 254
   13c0c:	28 83       	st	Y, r18
   13c0e:	39 83       	std	Y+1, r19	; 0x01
   13c10:	4a 83       	std	Y+2, r20	; 0x02
   13c12:	c6 51       	subi	r28, 0x16	; 22
   13c14:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13c16:	8b e7       	ldi	r24, 0x7B	; 123
   13c18:	9e e1       	ldi	r25, 0x1E	; 30
   13c1a:	9c 01       	movw	r18, r24
   13c1c:	40 e0       	ldi	r20, 0x00	; 0
   13c1e:	c7 5e       	subi	r28, 0xE7	; 231
   13c20:	de 4f       	sbci	r29, 0xFE	; 254
   13c22:	28 83       	st	Y, r18
   13c24:	39 83       	std	Y+1, r19	; 0x01
   13c26:	4a 83       	std	Y+2, r20	; 0x02
   13c28:	c9 51       	subi	r28, 0x19	; 25
   13c2a:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13c2c:	89 ea       	ldi	r24, 0xA9	; 169
   13c2e:	9e e1       	ldi	r25, 0x1E	; 30
   13c30:	9c 01       	movw	r18, r24
   13c32:	40 e0       	ldi	r20, 0x00	; 0
   13c34:	c4 5e       	subi	r28, 0xE4	; 228
   13c36:	de 4f       	sbci	r29, 0xFE	; 254
   13c38:	28 83       	st	Y, r18
   13c3a:	39 83       	std	Y+1, r19	; 0x01
   13c3c:	4a 83       	std	Y+2, r20	; 0x02
   13c3e:	cc 51       	subi	r28, 0x1C	; 28
   13c40:	d1 40       	sbci	r29, 0x01	; 1
   13c42:	26 c0       	rjmp	.+76     	; 0x13c90 <Read_Config+0x140>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   13c44:	86 e3       	ldi	r24, 0x36	; 54
   13c46:	9e e0       	ldi	r25, 0x0E	; 14
   13c48:	0e 94 52 78 	call	0xf0a4	; 0xf0a4 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   13c4c:	ed b7       	in	r30, 0x3d	; 61
   13c4e:	fe b7       	in	r31, 0x3e	; 62
   13c50:	15 83       	std	Z+5, r17	; 0x05
   13c52:	04 83       	std	Z+4, r16	; 0x04
   13c54:	8d e5       	ldi	r24, 0x5D	; 93
   13c56:	90 e2       	ldi	r25, 0x20	; 32
   13c58:	a0 e0       	ldi	r26, 0x00	; 0
   13c5a:	81 83       	std	Z+1, r24	; 0x01
   13c5c:	92 83       	std	Z+2, r25	; 0x02
   13c5e:	a3 83       	std	Z+3, r26	; 0x03
   13c60:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        set_Config_Defaults();
        return(errors);
   13c64:	81 e0       	ldi	r24, 0x01	; 1
   13c66:	90 e0       	ldi	r25, 0x00	; 0
   13c68:	70 c3       	rjmp	.+1760   	; 0x1434a <Read_Config+0x7fa>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13c6a:	ff ef       	ldi	r31, 0xFF	; 255
   13c6c:	2f 1a       	sub	r2, r31
   13c6e:	3f 0a       	sbc	r3, r31

        ptr = get_token(str, token, sizeof(token)-2);
   13c70:	4e e7       	ldi	r20, 0x7E	; 126
   13c72:	50 e0       	ldi	r21, 0x00	; 0
   13c74:	9e 01       	movw	r18, r28
   13c76:	28 5f       	subi	r18, 0xF8	; 248
   13c78:	3f 4f       	sbci	r19, 0xFF	; 255
   13c7a:	49 01       	movw	r8, r18
   13c7c:	b9 01       	movw	r22, r18
   13c7e:	ce 01       	movw	r24, r28
   13c80:	88 57       	subi	r24, 0x78	; 120
   13c82:	9f 4f       	sbci	r25, 0xFF	; 255
   13c84:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>
   13c88:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13c8a:	88 85       	ldd	r24, Y+8	; 0x08
   13c8c:	81 11       	cpse	r24, r1
   13c8e:	10 c0       	rjmp	.+32     	; 0x13cb0 <Read_Config+0x160>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13c90:	c5 5f       	subi	r28, 0xF5	; 245
   13c92:	de 4f       	sbci	r29, 0xFE	; 254
   13c94:	48 81       	ld	r20, Y
   13c96:	59 81       	ldd	r21, Y+1	; 0x01
   13c98:	cb 50       	subi	r28, 0x0B	; 11
   13c9a:	d1 40       	sbci	r29, 0x01	; 1
   13c9c:	6e e7       	ldi	r22, 0x7E	; 126
   13c9e:	70 e0       	ldi	r23, 0x00	; 0
   13ca0:	ce 01       	movw	r24, r28
   13ca2:	88 57       	subi	r24, 0x78	; 120
   13ca4:	9f 4f       	sbci	r25, 0xFF	; 255
   13ca6:	0e 94 39 76 	call	0xec72	; 0xec72 <fgets>
   13caa:	89 2b       	or	r24, r25
   13cac:	f1 f6       	brne	.-68     	; 0x13c6a <Read_Config+0x11a>
   13cae:	0d c3       	rjmp	.+1562   	; 0x142ca <Read_Config+0x77a>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13cb0:	83 32       	cpi	r24, 0x23	; 35
   13cb2:	71 f3       	breq	.-36     	; 0x13c90 <Read_Config+0x140>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   13cb4:	c4 01       	movw	r24, r8
   13cb6:	0e 94 73 92 	call	0x124e6	; 0x124e6 <tok_index>
   13cba:	8f 3f       	cpi	r24, 0xFF	; 255
   13cbc:	49 f4       	brne	.+18     	; 0x13cd0 <Read_Config+0x180>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   13cbe:	ed b7       	in	r30, 0x3d	; 61
   13cc0:	fe b7       	in	r31, 0x3e	; 62
   13cc2:	37 82       	std	Z+7, r3	; 0x07
   13cc4:	26 82       	std	Z+6, r2	; 0x06
   13cc6:	95 82       	std	Z+5, r9	; 0x05
   13cc8:	84 82       	std	Z+4, r8	; 0x04
   13cca:	8b e3       	ldi	r24, 0x3B	; 59
   13ccc:	90 e2       	ldi	r25, 0x20	; 32
   13cce:	c4 c0       	rjmp	.+392    	; 0x13e58 <Read_Config+0x308>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   13cd0:	24 e0       	ldi	r18, 0x04	; 4
   13cd2:	82 02       	muls	r24, r18
   13cd4:	f0 01       	movw	r30, r0
   13cd6:	11 24       	eor	r1, r1
   13cd8:	ec 53       	subi	r30, 0x3C	; 60
   13cda:	fe 4f       	sbci	r31, 0xFE	; 254
   13cdc:	02 81       	ldd	r16, Z+2	; 0x02
   13cde:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13ce0:	4e e7       	ldi	r20, 0x7E	; 126
   13ce2:	50 e0       	ldi	r21, 0x00	; 0
   13ce4:	b4 01       	movw	r22, r8
   13ce6:	c5 01       	movw	r24, r10
   13ce8:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>
   13cec:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   13cee:	69 e4       	ldi	r22, 0x49	; 73
   13cf0:	7e e0       	ldi	r23, 0x0E	; 14
   13cf2:	c4 01       	movw	r24, r8
   13cf4:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
   13cf8:	89 2b       	or	r24, r25
   13cfa:	39 f0       	breq	.+14     	; 0x13d0a <Read_Config+0x1ba>
            ptr = get_token(ptr, token, sizeof(token)-2);
   13cfc:	4e e7       	ldi	r20, 0x7E	; 126
   13cfe:	50 e0       	ldi	r21, 0x00	; 0
   13d00:	b4 01       	movw	r22, r8
   13d02:	c5 01       	movw	r24, r10
   13d04:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>
   13d08:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   13d0a:	c4 01       	movw	r24, r8
   13d0c:	0e 94 24 33 	call	0x6648	; 0x6648 <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13d10:	01 31       	cpi	r16, 0x11	; 17
   13d12:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   13d14:	19 f4       	brne	.+6      	; 0x13d1c <Read_Config+0x1cc>
   13d16:	0d db       	rcall	.-2534   	; 0x13332 <pop_state>
   13d18:	3c 01       	movw	r6, r24
            continue;
   13d1a:	ba cf       	rjmp	.-140    	; 0x13c90 <Read_Config+0x140>
        }

        switch(state)
   13d1c:	30 e1       	ldi	r19, 0x10	; 16
   13d1e:	63 16       	cp	r6, r19
   13d20:	71 04       	cpc	r7, r1
   13d22:	08 f0       	brcs	.+2      	; 0x13d26 <Read_Config+0x1d6>
   13d24:	bc c2       	rjmp	.+1400   	; 0x1429e <Read_Config+0x74e>
   13d26:	f3 01       	movw	r30, r6
   13d28:	ea 53       	subi	r30, 0x3A	; 58
   13d2a:	ff 4f       	sbci	r31, 0xFF	; 255
   13d2c:	0c 94 84 e6 	jmp	0x1cd08	; 0x1cd08 <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13d30:	0e 30       	cpi	r16, 0x0E	; 14
   13d32:	11 05       	cpc	r17, r1
   13d34:	09 f4       	brne	.+2      	; 0x13d38 <Read_Config+0x1e8>
   13d36:	83 c0       	rjmp	.+262    	; 0x13e3e <Read_Config+0x2ee>
   13d38:	44 f4       	brge	.+16     	; 0x13d4a <Read_Config+0x1fa>
   13d3a:	02 30       	cpi	r16, 0x02	; 2
   13d3c:	11 05       	cpc	r17, r1
   13d3e:	09 f4       	brne	.+2      	; 0x13d42 <Read_Config+0x1f2>
   13d40:	42 c0       	rjmp	.+132    	; 0x13dc6 <Read_Config+0x276>
   13d42:	0c 30       	cpi	r16, 0x0C	; 12
   13d44:	11 05       	cpc	r17, r1
   13d46:	19 f1       	breq	.+70     	; 0x13d8e <Read_Config+0x23e>
   13d48:	7f c0       	rjmp	.+254    	; 0x13e48 <Read_Config+0x2f8>
   13d4a:	03 32       	cpi	r16, 0x23	; 35
   13d4c:	11 05       	cpc	r17, r1
   13d4e:	f9 f0       	breq	.+62     	; 0x13d8e <Read_Config+0x23e>
   13d50:	04 32       	cpi	r16, 0x24	; 36
   13d52:	11 05       	cpc	r17, r1
   13d54:	29 f0       	breq	.+10     	; 0x13d60 <Read_Config+0x210>
   13d56:	00 32       	cpi	r16, 0x20	; 32
   13d58:	11 05       	cpc	r17, r1
   13d5a:	09 f0       	breq	.+2      	; 0x13d5e <Read_Config+0x20e>
   13d5c:	75 c0       	rjmp	.+234    	; 0x13e48 <Read_Config+0x2f8>
   13d5e:	4f c0       	rjmp	.+158    	; 0x13dfe <Read_Config+0x2ae>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   13d60:	80 e0       	ldi	r24, 0x00	; 0
   13d62:	90 e0       	ldi	r25, 0x00	; 0
   13d64:	cd da       	rcall	.-2662   	; 0x13300 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13d66:	82 e0       	ldi	r24, 0x02	; 2
   13d68:	90 e0       	ldi	r25, 0x00	; 0
   13d6a:	f9 d9       	rcall	.-3086   	; 0x1315e <alloc_device>
   13d6c:	c8 5f       	subi	r28, 0xF8	; 248
   13d6e:	de 4f       	sbci	r29, 0xFE	; 254
   13d70:	88 83       	st	Y, r24
   13d72:	c8 50       	subi	r28, 0x08	; 8
   13d74:	d1 40       	sbci	r29, 0x01	; 1
   13d76:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13d78:	09 f4       	brne	.+2      	; 0x13d7c <Read_Config+0x22c>
   13d7a:	8a cf       	rjmp	.-236    	; 0x13c90 <Read_Config+0x140>
   13d7c:	4b e0       	ldi	r20, 0x0B	; 11
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13d7e:	84 02       	muls	r24, r20
   13d80:	f0 01       	movw	r30, r0
   13d82:	11 24       	eor	r1, r1
   13d84:	e4 50       	subi	r30, 0x04	; 4
   13d86:	f1 4e       	sbci	r31, 0xE1	; 225
   13d88:	e7 80       	ldd	r14, Z+7	; 0x07
   13d8a:	f0 84       	ldd	r15, Z+8	; 0x08
   13d8c:	18 c0       	rjmp	.+48     	; 0x13dbe <Read_Config+0x26e>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13d8e:	80 e0       	ldi	r24, 0x00	; 0
   13d90:	90 e0       	ldi	r25, 0x00	; 0
   13d92:	b6 da       	rcall	.-2708   	; 0x13300 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   13d94:	83 e0       	ldi	r24, 0x03	; 3
   13d96:	90 e0       	ldi	r25, 0x00	; 0
   13d98:	e2 d9       	rcall	.-3132   	; 0x1315e <alloc_device>
   13d9a:	c8 5f       	subi	r28, 0xF8	; 248
   13d9c:	de 4f       	sbci	r29, 0xFE	; 254
   13d9e:	88 83       	st	Y, r24
   13da0:	c8 50       	subi	r28, 0x08	; 8
   13da2:	d1 40       	sbci	r29, 0x01	; 1
   13da4:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13da6:	09 f4       	brne	.+2      	; 0x13daa <Read_Config+0x25a>
   13da8:	73 cf       	rjmp	.-282    	; 0x13c90 <Read_Config+0x140>
   13daa:	9b e0       	ldi	r25, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13dac:	89 02       	muls	r24, r25
   13dae:	f0 01       	movw	r30, r0
   13db0:	11 24       	eor	r1, r1
   13db2:	e4 50       	subi	r30, 0x04	; 4
   13db4:	f1 4e       	sbci	r31, 0xE1	; 225
   13db6:	e7 80       	ldd	r14, Z+7	; 0x07
   13db8:	f0 84       	ldd	r15, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
   13dba:	b4 01       	movw	r22, r8
   13dbc:	5b db       	rcall	.-2378   	; 0x13474 <hpdir_set_parameters>
   13dbe:	66 24       	eor	r6, r6
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   13dc0:	63 94       	inc	r6
   13dc2:	71 2c       	mov	r7, r1
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   13dc4:	65 cf       	rjmp	.-310    	; 0x13c90 <Read_Config+0x140>
   13dc6:	80 e0       	ldi	r24, 0x00	; 0
   13dc8:	90 e0       	ldi	r25, 0x00	; 0
   13dca:	9a da       	rcall	.-2764   	; 0x13300 <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   13dcc:	81 e0       	ldi	r24, 0x01	; 1
   13dce:	90 e0       	ldi	r25, 0x00	; 0
   13dd0:	c6 d9       	rcall	.-3188   	; 0x1315e <alloc_device>
   13dd2:	c8 5f       	subi	r28, 0xF8	; 248
   13dd4:	de 4f       	sbci	r29, 0xFE	; 254
   13dd6:	88 83       	st	Y, r24
   13dd8:	c8 50       	subi	r28, 0x08	; 8
   13dda:	d1 40       	sbci	r29, 0x01	; 1
   13ddc:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13dde:	09 f4       	brne	.+2      	; 0x13de2 <Read_Config+0x292>
   13de0:	57 cf       	rjmp	.-338    	; 0x13c90 <Read_Config+0x140>
   13de2:	ab e0       	ldi	r26, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13de4:	8a 02       	muls	r24, r26
   13de6:	f0 01       	movw	r30, r0
   13de8:	11 24       	eor	r1, r1
   13dea:	e4 50       	subi	r30, 0x04	; 4
   13dec:	f1 4e       	sbci	r31, 0xE1	; 225
   13dee:	47 80       	ldd	r4, Z+7	; 0x07
   13df0:	50 84       	ldd	r5, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
   13df2:	b4 01       	movw	r22, r8
   13df4:	3f db       	rcall	.-2434   	; 0x13474 <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   13df6:	aa e0       	ldi	r26, 0x0A	; 10
   13df8:	6a 2e       	mov	r6, r26
   13dfa:	71 2c       	mov	r7, r1
   13dfc:	49 cf       	rjmp	.-366    	; 0x13c90 <Read_Config+0x140>
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   13dfe:	80 e0       	ldi	r24, 0x00	; 0
   13e00:	90 e0       	ldi	r25, 0x00	; 0
   13e02:	7e da       	rcall	.-2820   	; 0x13300 <push_state>
   13e04:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   13e06:	90 e0       	ldi	r25, 0x00	; 0
   13e08:	aa d9       	rcall	.-3244   	; 0x1315e <alloc_device>
   13e0a:	c8 5f       	subi	r28, 0xF8	; 248
   13e0c:	de 4f       	sbci	r29, 0xFE	; 254
   13e0e:	88 83       	st	Y, r24
   13e10:	c8 50       	subi	r28, 0x08	; 8
   13e12:	d1 40       	sbci	r29, 0x01	; 1
   13e14:	8f 3f       	cpi	r24, 0xFF	; 255
   13e16:	09 f4       	brne	.+2      	; 0x13e1a <Read_Config+0x2ca>
                        if(index == -1)
   13e18:	3b cf       	rjmp	.-394    	; 0x13c90 <Read_Config+0x140>
   13e1a:	bb e0       	ldi	r27, 0x0B	; 11
   13e1c:	8b 02       	muls	r24, r27
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13e1e:	f0 01       	movw	r30, r0
   13e20:	11 24       	eor	r1, r1
   13e22:	e4 50       	subi	r30, 0x04	; 4
   13e24:	f1 4e       	sbci	r31, 0xE1	; 225
   13e26:	27 81       	ldd	r18, Z+7	; 0x07
   13e28:	30 85       	ldd	r19, Z+8	; 0x08
   13e2a:	c7 5f       	subi	r28, 0xF7	; 247
   13e2c:	de 4f       	sbci	r29, 0xFE	; 254
   13e2e:	39 83       	std	Y+1, r19	; 0x01
   13e30:	28 83       	st	Y, r18
   13e32:	c9 50       	subi	r28, 0x09	; 9
   13e34:	d1 40       	sbci	r29, 0x01	; 1
   13e36:	fe e0       	ldi	r31, 0x0E	; 14
   13e38:	6f 2e       	mov	r6, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   13e3a:	71 2c       	mov	r7, r1
   13e3c:	29 cf       	rjmp	.-430    	; 0x13c90 <Read_Config+0x140>
   13e3e:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   13e42:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   13e46:	24 cf       	rjmp	.-440    	; 0x13c90 <Read_Config+0x140>
   13e48:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13e4a:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   13e4c:	37 82       	std	Z+7, r3	; 0x07
   13e4e:	26 82       	std	Z+6, r2	; 0x06
   13e50:	b5 82       	std	Z+5, r11	; 0x05
   13e52:	a4 82       	std	Z+4, r10	; 0x04
   13e54:	89 e1       	ldi	r24, 0x19	; 25
   13e56:	90 e2       	ldi	r25, 0x20	; 32
   13e58:	a0 e0       	ldi	r26, 0x00	; 0
   13e5a:	81 83       	std	Z+1, r24	; 0x01
   13e5c:	92 83       	std	Z+2, r25	; 0x02
   13e5e:	a3 83       	std	Z+3, r26	; 0x03
   13e60:	2e c2       	rjmp	.+1116   	; 0x142be <Read_Config+0x76e>
   13e62:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   13e64:	11 05       	cpc	r17, r1
   13e66:	39 f4       	brne	.+14     	; 0x13e76 <Read_Config+0x326>
   13e68:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   13e6a:	90 e0       	ldi	r25, 0x00	; 0
   13e6c:	49 da       	rcall	.-2926   	; 0x13300 <push_state>
   13e6e:	ef e0       	ldi	r30, 0x0F	; 15
   13e70:	6e 2e       	mov	r6, r30
                    state = PRINTER_CONFIG;
   13e72:	71 2c       	mov	r7, r1
   13e74:	0d cf       	rjmp	.-486    	; 0x13c90 <Read_Config+0x140>
   13e76:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   13e78:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   13e7a:	37 82       	std	Z+7, r3	; 0x07
   13e7c:	26 82       	std	Z+6, r2	; 0x06
   13e7e:	b5 82       	std	Z+5, r11	; 0x05
   13e80:	a4 82       	std	Z+4, r10	; 0x04
   13e82:	8f ee       	ldi	r24, 0xEF	; 239
   13e84:	9f e1       	ldi	r25, 0x1F	; 31
   13e86:	e8 cf       	rjmp	.-48     	; 0x13e58 <Read_Config+0x308>
   13e88:	01 30       	cpi	r16, 0x01	; 1
   13e8a:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   13e8c:	c1 f4       	brne	.+48     	; 0x13ebe <Read_Config+0x36e>
   13e8e:	c8 5f       	subi	r28, 0xF8	; 248
   13e90:	de 4f       	sbci	r29, 0xFE	; 254
                {
					address = val.b;
                    Devices[index].ADDRESS = address;
   13e92:	28 81       	ld	r18, Y
   13e94:	c8 50       	subi	r28, 0x08	; 8
   13e96:	d1 40       	sbci	r29, 0x01	; 1
   13e98:	3b e0       	ldi	r19, 0x0B	; 11
   13e9a:	23 02       	muls	r18, r19
   13e9c:	f0 01       	movw	r30, r0
   13e9e:	11 24       	eor	r1, r1
   13ea0:	e4 50       	subi	r30, 0x04	; 4
   13ea2:	f1 4e       	sbci	r31, 0xE1	; 225
   13ea4:	61 83       	std	Z+1, r22	; 0x01
   13ea6:	c7 5f       	subi	r28, 0xF7	; 247
   13ea8:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = address;
   13eaa:	a8 81       	ld	r26, Y
   13eac:	b9 81       	ldd	r27, Y+1	; 0x01
   13eae:	c9 50       	subi	r28, 0x09	; 9
   13eb0:	d1 40       	sbci	r29, 0x01	; 1
   13eb2:	6c 93       	st	X, r22
   13eb4:	8f ef       	ldi	r24, 0xFF	; 255
   13eb6:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   13eb8:	fd 01       	movw	r30, r26
   13eba:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   13ebc:	e9 ce       	rjmp	.-558    	; 0x13c90 <Read_Config+0x140>
   13ebe:	ed b7       	in	r30, 0x3d	; 61
   13ec0:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   13ec2:	37 82       	std	Z+7, r3	; 0x07
   13ec4:	26 82       	std	Z+6, r2	; 0x06
   13ec6:	b5 82       	std	Z+5, r11	; 0x05
   13ec8:	a4 82       	std	Z+4, r10	; 0x04
   13eca:	8e eb       	ldi	r24, 0xBE	; 190
   13ecc:	9f e1       	ldi	r25, 0x1F	; 31
   13ece:	c4 cf       	rjmp	.-120    	; 0x13e58 <Read_Config+0x308>
   13ed0:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13ed2:	11 05       	cpc	r17, r1
   13ed4:	d9 f0       	breq	.+54     	; 0x13f0c <Read_Config+0x3bc>
   13ed6:	6c f4       	brge	.+26     	; 0x13ef2 <Read_Config+0x3a2>
   13ed8:	09 30       	cpi	r16, 0x09	; 9
   13eda:	11 05       	cpc	r17, r1
   13edc:	f1 f0       	breq	.+60     	; 0x13f1a <Read_Config+0x3ca>
   13ede:	0b 30       	cpi	r16, 0x0B	; 11
   13ee0:	11 05       	cpc	r17, r1
   13ee2:	49 f5       	brne	.+82     	; 0x13f36 <Read_Config+0x3e6>
   13ee4:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   13ee6:	90 e0       	ldi	r25, 0x00	; 0
   13ee8:	0b da       	rcall	.-3050   	; 0x13300 <push_state>
   13eea:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   13eec:	65 2e       	mov	r6, r21
   13eee:	71 2c       	mov	r7, r1
   13ef0:	cf ce       	rjmp	.-610    	; 0x13c90 <Read_Config+0x140>
                        break;
   13ef2:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13ef4:	11 05       	cpc	r17, r1
   13ef6:	c1 f0       	breq	.+48     	; 0x13f28 <Read_Config+0x3d8>
   13ef8:	0a 32       	cpi	r16, 0x2A	; 42
   13efa:	11 05       	cpc	r17, r1
   13efc:	e1 f4       	brne	.+56     	; 0x13f36 <Read_Config+0x3e6>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   13efe:	81 e0       	ldi	r24, 0x01	; 1
   13f00:	90 e0       	ldi	r25, 0x00	; 0
   13f02:	fe d9       	rcall	.-3076   	; 0x13300 <push_state>
                        state = SS80_VOLUME;
   13f04:	36 e0       	ldi	r19, 0x06	; 6
   13f06:	63 2e       	mov	r6, r19
   13f08:	71 2c       	mov	r7, r1
                        break;
   13f0a:	c2 ce       	rjmp	.-636    	; 0x13c90 <Read_Config+0x140>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13f0c:	81 e0       	ldi	r24, 0x01	; 1
   13f0e:	90 e0       	ldi	r25, 0x00	; 0
   13f10:	f7 d9       	rcall	.-3090   	; 0x13300 <push_state>
                        state = SS80_HEADER;
   13f12:	72 e0       	ldi	r23, 0x02	; 2
   13f14:	67 2e       	mov	r6, r23
   13f16:	71 2c       	mov	r7, r1
                        break;
   13f18:	bb ce       	rjmp	.-650    	; 0x13c90 <Read_Config+0x140>
                    case TOK_CONFIG:
                        push_state(state);
   13f1a:	81 e0       	ldi	r24, 0x01	; 1
   13f1c:	90 e0       	ldi	r25, 0x00	; 0
   13f1e:	f0 d9       	rcall	.-3104   	; 0x13300 <push_state>
   13f20:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   13f22:	66 2e       	mov	r6, r22
   13f24:	71 2c       	mov	r7, r1
   13f26:	b4 ce       	rjmp	.-664    	; 0x13c90 <Read_Config+0x140>
                        break;
   13f28:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   13f2a:	90 e0       	ldi	r25, 0x00	; 0
   13f2c:	e9 d9       	rcall	.-3118   	; 0x13300 <push_state>
   13f2e:	45 e0       	ldi	r20, 0x05	; 5
   13f30:	64 2e       	mov	r6, r20
                        state = SS80_UNIT;
   13f32:	71 2c       	mov	r7, r1
   13f34:	ad ce       	rjmp	.-678    	; 0x13c90 <Read_Config+0x140>
   13f36:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13f38:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   13f3a:	37 82       	std	Z+7, r3	; 0x07
   13f3c:	26 82       	std	Z+6, r2	; 0x06
   13f3e:	b5 82       	std	Z+5, r11	; 0x05
   13f40:	a4 82       	std	Z+4, r10	; 0x04
   13f42:	81 e9       	ldi	r24, 0x91	; 145
   13f44:	9f e1       	ldi	r25, 0x1F	; 31
   13f46:	88 cf       	rjmp	.-240    	; 0x13e58 <Read_Config+0x308>
   13f48:	02 31       	cpi	r16, 0x12	; 18
   13f4a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   13f4c:	11 f1       	breq	.+68     	; 0x13f92 <Read_Config+0x442>
   13f4e:	0f 31       	cpi	r16, 0x1F	; 31
   13f50:	11 05       	cpc	r17, r1
   13f52:	89 f0       	breq	.+34     	; 0x13f76 <Read_Config+0x426>
   13f54:	01 30       	cpi	r16, 0x01	; 1
   13f56:	11 05       	cpc	r17, r1
   13f58:	09 f5       	brne	.+66     	; 0x13f9c <Read_Config+0x44c>
   13f5a:	c8 5f       	subi	r28, 0xF8	; 248
   13f5c:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_ADDRESS:
						address = val.b;
                        Devices[index].ADDRESS = address;
   13f5e:	28 81       	ld	r18, Y
   13f60:	c8 50       	subi	r28, 0x08	; 8
   13f62:	d1 40       	sbci	r29, 0x01	; 1
   13f64:	3b e0       	ldi	r19, 0x0B	; 11
   13f66:	23 02       	muls	r18, r19
   13f68:	f0 01       	movw	r30, r0
   13f6a:	11 24       	eor	r1, r1
   13f6c:	e4 50       	subi	r30, 0x04	; 4
   13f6e:	f1 4e       	sbci	r31, 0xE1	; 225
   13f70:	61 83       	std	Z+1, r22	; 0x01
   13f72:	d7 01       	movw	r26, r14
   13f74:	33 c1       	rjmp	.+614    	; 0x141dc <Read_Config+0x68c>
                        SS80p->HEADER.ADDRESS  = address;
   13f76:	c8 5f       	subi	r28, 0xF8	; 248
   13f78:	de 4f       	sbci	r29, 0xFE	; 254
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   13f7a:	b8 81       	ld	r27, Y
   13f7c:	c8 50       	subi	r28, 0x08	; 8
   13f7e:	d1 40       	sbci	r29, 0x01	; 1
   13f80:	2b e0       	ldi	r18, 0x0B	; 11
   13f82:	b2 02       	muls	r27, r18
   13f84:	f0 01       	movw	r30, r0
   13f86:	11 24       	eor	r1, r1
   13f88:	e4 50       	subi	r30, 0x04	; 4
   13f8a:	f1 4e       	sbci	r31, 0xE1	; 225
   13f8c:	62 83       	std	Z+2, r22	; 0x02
   13f8e:	f7 01       	movw	r30, r14
   13f90:	27 c1       	rjmp	.+590    	; 0x141e0 <Read_Config+0x690>
                        SS80p->HEADER.PPR = ppr;
   13f92:	c4 01       	movw	r24, r8
   13f94:	0e 94 cf 31 	call	0x639e	; 0x639e <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   13f98:	f7 01       	movw	r30, r14
   13f9a:	28 c1       	rjmp	.+592    	; 0x141ec <Read_Config+0x69c>
   13f9c:	ed b7       	in	r30, 0x3d	; 61
   13f9e:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13fa0:	37 82       	std	Z+7, r3	; 0x07
   13fa2:	26 82       	std	Z+6, r2	; 0x06
   13fa4:	b5 82       	std	Z+5, r11	; 0x05
   13fa6:	a4 82       	std	Z+4, r10	; 0x04
   13fa8:	83 e6       	ldi	r24, 0x63	; 99
   13faa:	9f e1       	ldi	r25, 0x1F	; 31
   13fac:	55 cf       	rjmp	.-342    	; 0x13e58 <Read_Config+0x308>
   13fae:	07 31       	cpi	r16, 0x17	; 23
   13fb0:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   13fb2:	21 f4       	brne	.+8      	; 0x13fbc <Read_Config+0x46c>
   13fb4:	96 2f       	mov	r25, r22
   13fb6:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   13fb8:	f7 01       	movw	r30, r14
   13fba:	2f c1       	rjmp	.+606    	; 0x1421a <Read_Config+0x6ca>
   13fbc:	ed b7       	in	r30, 0x3d	; 61
   13fbe:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13fc0:	37 82       	std	Z+7, r3	; 0x07
   13fc2:	26 82       	std	Z+6, r2	; 0x06
   13fc4:	b5 82       	std	Z+5, r11	; 0x05
   13fc6:	a4 82       	std	Z+4, r10	; 0x04
   13fc8:	85 e3       	ldi	r24, 0x35	; 53
   13fca:	9f e1       	ldi	r25, 0x1F	; 31
   13fcc:	45 cf       	rjmp	.-374    	; 0x13e58 <Read_Config+0x308>
   13fce:	06 32       	cpi	r16, 0x26	; 38
   13fd0:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   13fd2:	71 f0       	breq	.+28     	; 0x13ff0 <Read_Config+0x4a0>
   13fd4:	08 32       	cpi	r16, 0x28	; 40
   13fd6:	11 05       	cpc	r17, r1
   13fd8:	39 f0       	breq	.+14     	; 0x13fe8 <Read_Config+0x498>
   13fda:	05 32       	cpi	r16, 0x25	; 37
   13fdc:	11 05       	cpc	r17, r1
   13fde:	59 f4       	brne	.+22     	; 0x13ff6 <Read_Config+0x4a6>
   13fe0:	96 2f       	mov	r25, r22
   13fe2:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   13fe4:	f7 01       	movw	r30, r14
   13fe6:	42 c1       	rjmp	.+644    	; 0x1426c <Read_Config+0x71c>
   13fe8:	96 2f       	mov	r25, r22
   13fea:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   13fec:	f7 01       	movw	r30, r14
   13fee:	3b c1       	rjmp	.+630    	; 0x14266 <Read_Config+0x716>
   13ff0:	f7 01       	movw	r30, r14
   13ff2:	64 87       	std	Z+12, r22	; 0x0c
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   13ff4:	4d ce       	rjmp	.-870    	; 0x13c90 <Read_Config+0x140>
   13ff6:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13ff8:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   13ffa:	37 82       	std	Z+7, r3	; 0x07
   13ffc:	26 82       	std	Z+6, r2	; 0x06
   13ffe:	b5 82       	std	Z+5, r11	; 0x05
   14000:	a4 82       	std	Z+4, r10	; 0x04
   14002:	83 e0       	ldi	r24, 0x03	; 3
   14004:	9f e1       	ldi	r25, 0x1F	; 31
   14006:	28 cf       	rjmp	.-432    	; 0x13e58 <Read_Config+0x308>
   14008:	0a 30       	cpi	r16, 0x0A	; 10
   1400a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1400c:	09 f4       	brne	.+2      	; 0x14010 <Read_Config+0x4c0>
   1400e:	45 c0       	rjmp	.+138    	; 0x1409a <Read_Config+0x54a>
   14010:	d4 f4       	brge	.+52     	; 0x14046 <Read_Config+0x4f6>
   14012:	05 30       	cpi	r16, 0x05	; 5
   14014:	11 05       	cpc	r17, r1
   14016:	d1 f1       	breq	.+116    	; 0x1408c <Read_Config+0x53c>
   14018:	64 f4       	brge	.+24     	; 0x14032 <Read_Config+0x4e2>
   1401a:	01 15       	cp	r16, r1
   1401c:	11 05       	cpc	r17, r1
   1401e:	09 f4       	brne	.+2      	; 0x14022 <Read_Config+0x4d2>
   14020:	40 c0       	rjmp	.+128    	; 0x140a2 <Read_Config+0x552>
   14022:	04 30       	cpi	r16, 0x04	; 4
   14024:	11 05       	cpc	r17, r1
   14026:	09 f0       	breq	.+2      	; 0x1402a <Read_Config+0x4da>
   14028:	46 c0       	rjmp	.+140    	; 0x140b6 <Read_Config+0x566>
   1402a:	f7 01       	movw	r30, r14
   1402c:	66 8b       	std	Z+22, r22	; 0x16
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   1402e:	77 8b       	std	Z+23, r23	; 0x17
   14030:	2f ce       	rjmp	.-930    	; 0x13c90 <Read_Config+0x140>
   14032:	06 30       	cpi	r16, 0x06	; 6
                        break;
   14034:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   14036:	71 f1       	breq	.+92     	; 0x14094 <Read_Config+0x544>
   14038:	07 30       	cpi	r16, 0x07	; 7
   1403a:	11 05       	cpc	r17, r1
   1403c:	e1 f5       	brne	.+120    	; 0x140b6 <Read_Config+0x566>
   1403e:	f7 01       	movw	r30, r14
   14040:	62 8b       	std	Z+18, r22	; 0x12
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   14042:	73 8b       	std	Z+19, r23	; 0x13
   14044:	25 ce       	rjmp	.-950    	; 0x13c90 <Read_Config+0x140>
   14046:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   14048:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1404a:	79 f1       	breq	.+94     	; 0x140aa <Read_Config+0x55a>
   1404c:	4c f4       	brge	.+18     	; 0x14060 <Read_Config+0x510>
   1404e:	0f 30       	cpi	r16, 0x0F	; 15
   14050:	11 05       	cpc	r17, r1
   14052:	b1 f0       	breq	.+44     	; 0x14080 <Read_Config+0x530>
   14054:	03 31       	cpi	r16, 0x13	; 19
   14056:	11 05       	cpc	r17, r1
   14058:	71 f5       	brne	.+92     	; 0x140b6 <Read_Config+0x566>
   1405a:	f7 01       	movw	r30, r14
   1405c:	67 8f       	std	Z+31, r22	; 0x1f
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   1405e:	18 ce       	rjmp	.-976    	; 0x13c90 <Read_Config+0x140>
   14060:	01 32       	cpi	r16, 0x21	; 33
                        break;
   14062:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   14064:	29 f1       	breq	.+74     	; 0x140b0 <Read_Config+0x560>
   14066:	09 32       	cpi	r16, 0x29	; 41
   14068:	11 05       	cpc	r17, r1
   1406a:	39 f0       	breq	.+14     	; 0x1407a <Read_Config+0x52a>
   1406c:	0e 31       	cpi	r16, 0x1E	; 30
   1406e:	11 05       	cpc	r17, r1
   14070:	11 f5       	brne	.+68     	; 0x140b6 <Read_Config+0x566>
   14072:	f7 01       	movw	r30, r14
   14074:	62 8f       	std	Z+26, r22	; 0x1a
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   14076:	73 8f       	std	Z+27, r23	; 0x1b
   14078:	0b ce       	rjmp	.-1002   	; 0x13c90 <Read_Config+0x140>
   1407a:	f7 01       	movw	r30, r14
                        break;
   1407c:	65 87       	std	Z+13, r22	; 0x0d

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   1407e:	08 ce       	rjmp	.-1008   	; 0x13c90 <Read_Config+0x140>
   14080:	f7 01       	movw	r30, r14
                        break;
   14082:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   14084:	77 87       	std	Z+15, r23	; 0x0f
   14086:	80 8b       	std	Z+16, r24	; 0x10
   14088:	91 8b       	std	Z+17, r25	; 0x11
   1408a:	02 ce       	rjmp	.-1020   	; 0x13c90 <Read_Config+0x140>
   1408c:	61 70       	andi	r22, 0x01	; 1
                        break;
   1408e:	f7 01       	movw	r30, r14
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   14090:	64 8b       	std	Z+20, r22	; 0x14
   14092:	fe cd       	rjmp	.-1028   	; 0x13c90 <Read_Config+0x140>
   14094:	f7 01       	movw	r30, r14
                        break;
   14096:	65 8b       	std	Z+21, r22	; 0x15
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   14098:	fb cd       	rjmp	.-1034   	; 0x13c90 <Read_Config+0x140>
   1409a:	f7 01       	movw	r30, r14
                        break;
   1409c:	60 8f       	std	Z+24, r22	; 0x18
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   1409e:	71 8f       	std	Z+25, r23	; 0x19
   140a0:	f7 cd       	rjmp	.-1042   	; 0x13c90 <Read_Config+0x140>
   140a2:	f7 01       	movw	r30, r14
                        break;
   140a4:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   140a6:	75 8f       	std	Z+29, r23	; 0x1d
   140a8:	f3 cd       	rjmp	.-1050   	; 0x13c90 <Read_Config+0x140>
   140aa:	f7 01       	movw	r30, r14
                        break;
   140ac:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   140ae:	f0 cd       	rjmp	.-1056   	; 0x13c90 <Read_Config+0x140>
   140b0:	f7 01       	movw	r30, r14
                        break;
   140b2:	60 a3       	std	Z+32, r22	; 0x20
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   140b4:	ed cd       	rjmp	.-1062   	; 0x13c90 <Read_Config+0x140>
   140b6:	ed b7       	in	r30, 0x3d	; 61
                        break;
   140b8:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   140ba:	37 82       	std	Z+7, r3	; 0x07
   140bc:	26 82       	std	Z+6, r2	; 0x06
   140be:	b5 82       	std	Z+5, r11	; 0x05
   140c0:	a4 82       	std	Z+4, r10	; 0x04
   140c2:	87 ed       	ldi	r24, 0xD7	; 215
   140c4:	9e e1       	ldi	r25, 0x1E	; 30
   140c6:	c8 ce       	rjmp	.-624    	; 0x13e58 <Read_Config+0x308>
   140c8:	0a 31       	cpi	r16, 0x1A	; 26
   140ca:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   140cc:	b9 f0       	breq	.+46     	; 0x140fc <Read_Config+0x5ac>
   140ce:	64 f4       	brge	.+24     	; 0x140e8 <Read_Config+0x598>
   140d0:	08 31       	cpi	r16, 0x18	; 24
   140d2:	11 05       	cpc	r17, r1
   140d4:	e1 f0       	breq	.+56     	; 0x1410e <Read_Config+0x5be>
   140d6:	09 31       	cpi	r16, 0x19	; 25
   140d8:	11 05       	cpc	r17, r1
   140da:	e1 f4       	brne	.+56     	; 0x14114 <Read_Config+0x5c4>
   140dc:	f7 01       	movw	r30, r14
   140de:	60 a7       	std	Z+40, r22	; 0x28
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   140e0:	71 a7       	std	Z+41, r23	; 0x29
   140e2:	82 a7       	std	Z+42, r24	; 0x2a
   140e4:	93 a7       	std	Z+43, r25	; 0x2b
   140e6:	d4 cd       	rjmp	.-1112   	; 0x13c90 <Read_Config+0x140>
   140e8:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   140ea:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   140ec:	69 f0       	breq	.+26     	; 0x14108 <Read_Config+0x5b8>
   140ee:	0d 31       	cpi	r16, 0x1D	; 29
   140f0:	11 05       	cpc	r17, r1
   140f2:	81 f4       	brne	.+32     	; 0x14114 <Read_Config+0x5c4>
   140f4:	f7 01       	movw	r30, r14
   140f6:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   140f8:	77 a3       	std	Z+39, r23	; 0x27
   140fa:	ca cd       	rjmp	.-1132   	; 0x13c90 <Read_Config+0x140>
   140fc:	f7 01       	movw	r30, r14
                        break;
   140fe:	61 a3       	std	Z+33, r22	; 0x21

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   14100:	72 a3       	std	Z+34, r23	; 0x22
   14102:	83 a3       	std	Z+35, r24	; 0x23
   14104:	94 a3       	std	Z+36, r25	; 0x24
   14106:	c4 cd       	rjmp	.-1144   	; 0x13c90 <Read_Config+0x140>
   14108:	f7 01       	movw	r30, r14
                        break;
   1410a:	65 a3       	std	Z+37, r22	; 0x25
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   1410c:	c1 cd       	rjmp	.-1150   	; 0x13c90 <Read_Config+0x140>
   1410e:	f7 01       	movw	r30, r14
                        break;
   14110:	64 a7       	std	Z+44, r22	; 0x2c
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   14112:	be cd       	rjmp	.-1156   	; 0x13c90 <Read_Config+0x140>
   14114:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14116:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   14118:	37 82       	std	Z+7, r3	; 0x07
   1411a:	26 82       	std	Z+6, r2	; 0x06
   1411c:	b5 82       	std	Z+5, r11	; 0x05
   1411e:	a4 82       	std	Z+4, r10	; 0x04
   14120:	c4 5e       	subi	r28, 0xE4	; 228
   14122:	de 4f       	sbci	r29, 0xFE	; 254
   14124:	28 81       	ld	r18, Y
   14126:	39 81       	ldd	r19, Y+1	; 0x01
   14128:	4a 81       	ldd	r20, Y+2	; 0x02
   1412a:	cc 51       	subi	r28, 0x1C	; 28
   1412c:	d1 40       	sbci	r29, 0x01	; 1
   1412e:	c4 c0       	rjmp	.+392    	; 0x142b8 <Read_Config+0x768>
   14130:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   14132:	11 05       	cpc	r17, r1
   14134:	a1 f0       	breq	.+40     	; 0x1415e <Read_Config+0x60e>
   14136:	05 31       	cpi	r16, 0x15	; 21
   14138:	11 05       	cpc	r17, r1
   1413a:	51 f0       	breq	.+20     	; 0x14150 <Read_Config+0x600>
   1413c:	09 30       	cpi	r16, 0x09	; 9
   1413e:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   14140:	a9 f4       	brne	.+42     	; 0x1416c <Read_Config+0x61c>
   14142:	8a e0       	ldi	r24, 0x0A	; 10
   14144:	90 e0       	ldi	r25, 0x00	; 0
   14146:	dc d8       	rcall	.-3656   	; 0x13300 <push_state>
                        state = AMIGO_CONFIG;
   14148:	9c e0       	ldi	r25, 0x0C	; 12
   1414a:	69 2e       	mov	r6, r25
   1414c:	71 2c       	mov	r7, r1
                        break;
   1414e:	a0 cd       	rjmp	.-1216   	; 0x13c90 <Read_Config+0x140>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   14150:	8a e0       	ldi	r24, 0x0A	; 10
   14152:	90 e0       	ldi	r25, 0x00	; 0
   14154:	d5 d8       	rcall	.-3670   	; 0x13300 <push_state>
   14156:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   14158:	62 2e       	mov	r6, r18
   1415a:	71 2c       	mov	r7, r1
   1415c:	99 cd       	rjmp	.-1230   	; 0x13c90 <Read_Config+0x140>
                        break;
   1415e:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   14160:	90 e0       	ldi	r25, 0x00	; 0
   14162:	ce d8       	rcall	.-3684   	; 0x13300 <push_state>
   14164:	8d e0       	ldi	r24, 0x0D	; 13
   14166:	68 2e       	mov	r6, r24
                        state = AMIGO_GEOMETRY;
   14168:	71 2c       	mov	r7, r1
   1416a:	92 cd       	rjmp	.-1244   	; 0x13c90 <Read_Config+0x140>
   1416c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1416e:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   14170:	37 82       	std	Z+7, r3	; 0x07
   14172:	26 82       	std	Z+6, r2	; 0x06
   14174:	b5 82       	std	Z+5, r11	; 0x05
   14176:	a4 82       	std	Z+4, r10	; 0x04
   14178:	c7 5e       	subi	r28, 0xE7	; 231
   1417a:	de 4f       	sbci	r29, 0xFE	; 254
   1417c:	28 81       	ld	r18, Y
   1417e:	39 81       	ldd	r19, Y+1	; 0x01
   14180:	4a 81       	ldd	r20, Y+2	; 0x02
   14182:	c9 51       	subi	r28, 0x19	; 25
   14184:	d1 40       	sbci	r29, 0x01	; 1
   14186:	98 c0       	rjmp	.+304    	; 0x142b8 <Read_Config+0x768>
   14188:	00 31       	cpi	r16, 0x10	; 16
   1418a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   1418c:	09 f4       	brne	.+2      	; 0x14190 <Read_Config+0x640>
   1418e:	80 cd       	rjmp	.-1280   	; 0x13c90 <Read_Config+0x140>
   14190:	8c f4       	brge	.+34     	; 0x141b4 <Read_Config+0x664>
   14192:	01 30       	cpi	r16, 0x01	; 1
   14194:	11 05       	cpc	r17, r1
   14196:	69 f5       	brne	.+90     	; 0x141f2 <Read_Config+0x6a2>
   14198:	c8 5f       	subi	r28, 0xF8	; 248
   1419a:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
   1419c:	28 81       	ld	r18, Y
   1419e:	c8 50       	subi	r28, 0x08	; 8
   141a0:	d1 40       	sbci	r29, 0x01	; 1
   141a2:	3b e0       	ldi	r19, 0x0B	; 11
   141a4:	23 02       	muls	r18, r19
   141a6:	f0 01       	movw	r30, r0
   141a8:	11 24       	eor	r1, r1
   141aa:	e4 50       	subi	r30, 0x04	; 4
   141ac:	f1 4e       	sbci	r31, 0xE1	; 225
   141ae:	61 83       	std	Z+1, r22	; 0x01
   141b0:	d2 01       	movw	r26, r4
   141b2:	14 c0       	rjmp	.+40     	; 0x141dc <Read_Config+0x68c>
                        AMIGOp->HEADER.ADDRESS = address;
   141b4:	02 31       	cpi	r16, 0x12	; 18
   141b6:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   141b8:	a9 f0       	breq	.+42     	; 0x141e4 <Read_Config+0x694>
   141ba:	0f 31       	cpi	r16, 0x1F	; 31
   141bc:	11 05       	cpc	r17, r1
   141be:	c9 f4       	brne	.+50     	; 0x141f2 <Read_Config+0x6a2>
   141c0:	c8 5f       	subi	r28, 0xF8	; 248
   141c2:	de 4f       	sbci	r29, 0xFE	; 254
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   141c4:	b8 81       	ld	r27, Y
   141c6:	c8 50       	subi	r28, 0x08	; 8
   141c8:	d1 40       	sbci	r29, 0x01	; 1
   141ca:	2b e0       	ldi	r18, 0x0B	; 11
   141cc:	b2 02       	muls	r27, r18
   141ce:	f0 01       	movw	r30, r0
   141d0:	11 24       	eor	r1, r1
   141d2:	e4 50       	subi	r30, 0x04	; 4
   141d4:	f1 4e       	sbci	r31, 0xE1	; 225
   141d6:	62 83       	std	Z+2, r22	; 0x02
   141d8:	f2 01       	movw	r30, r4
   141da:	02 c0       	rjmp	.+4      	; 0x141e0 <Read_Config+0x690>
                        AMIGOp->HEADER.PPR = ppr;
   141dc:	6c 93       	st	X, r22
   141de:	58 cd       	rjmp	.-1360   	; 0x13c90 <Read_Config+0x140>
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
   141e0:	61 83       	std	Z+1, r22	; 0x01
                        break;
   141e2:	56 cd       	rjmp	.-1364   	; 0x13c90 <Read_Config+0x140>
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
                        AMIGOp->HEADER.PPR = ppr;
   141e4:	c4 01       	movw	r24, r8
                        break;
   141e6:	0e 94 cf 31 	call	0x639e	; 0x639e <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   141ea:	f2 01       	movw	r30, r4
   141ec:	93 83       	std	Z+3, r25	; 0x03
   141ee:	82 83       	std	Z+2, r24	; 0x02
   141f0:	4f cd       	rjmp	.-1378   	; 0x13c90 <Read_Config+0x140>
   141f2:	ed b7       	in	r30, 0x3d	; 61
                        break;
   141f4:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   141f6:	37 82       	std	Z+7, r3	; 0x07
   141f8:	26 82       	std	Z+6, r2	; 0x06
   141fa:	b5 82       	std	Z+5, r11	; 0x05
   141fc:	a4 82       	std	Z+4, r10	; 0x04
   141fe:	ca 5e       	subi	r28, 0xEA	; 234
   14200:	de 4f       	sbci	r29, 0xFE	; 254
   14202:	28 81       	ld	r18, Y
   14204:	39 81       	ldd	r19, Y+1	; 0x01
   14206:	4a 81       	ldd	r20, Y+2	; 0x02
   14208:	c6 51       	subi	r28, 0x16	; 22
   1420a:	d1 40       	sbci	r29, 0x01	; 1
   1420c:	55 c0       	rjmp	.+170    	; 0x142b8 <Read_Config+0x768>
   1420e:	07 31       	cpi	r16, 0x17	; 23
   14210:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   14212:	31 f4       	brne	.+12     	; 0x14220 <Read_Config+0x6d0>
   14214:	96 2f       	mov	r25, r22
   14216:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   14218:	f2 01       	movw	r30, r4
   1421a:	96 83       	std	Z+6, r25	; 0x06
   1421c:	87 83       	std	Z+7, r24	; 0x07
   1421e:	38 cd       	rjmp	.-1424   	; 0x13c90 <Read_Config+0x140>
   14220:	ed b7       	in	r30, 0x3d	; 61
   14222:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   14224:	37 82       	std	Z+7, r3	; 0x07
   14226:	26 82       	std	Z+6, r2	; 0x06
   14228:	b5 82       	std	Z+5, r11	; 0x05
   1422a:	a4 82       	std	Z+4, r10	; 0x04
   1422c:	cd 5e       	subi	r28, 0xED	; 237
   1422e:	de 4f       	sbci	r29, 0xFE	; 254
   14230:	28 81       	ld	r18, Y
   14232:	39 81       	ldd	r19, Y+1	; 0x01
   14234:	4a 81       	ldd	r20, Y+2	; 0x02
   14236:	c3 51       	subi	r28, 0x13	; 19
   14238:	d1 40       	sbci	r29, 0x01	; 1
   1423a:	3e c0       	rjmp	.+124    	; 0x142b8 <Read_Config+0x768>
   1423c:	0d 30       	cpi	r16, 0x0D	; 13
   1423e:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   14240:	e1 f0       	breq	.+56     	; 0x1427a <Read_Config+0x72a>
   14242:	3c f4       	brge	.+14     	; 0x14252 <Read_Config+0x702>
   14244:	08 30       	cpi	r16, 0x08	; 8
   14246:	11 05       	cpc	r17, r1
   14248:	e1 f4       	brne	.+56     	; 0x14282 <Read_Config+0x732>
   1424a:	96 2f       	mov	r25, r22
   1424c:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   1424e:	f2 01       	movw	r30, r4
   14250:	0a c0       	rjmp	.+20     	; 0x14266 <Read_Config+0x716>
   14252:	06 31       	cpi	r16, 0x16	; 22
   14254:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   14256:	69 f0       	breq	.+26     	; 0x14272 <Read_Config+0x722>
   14258:	02 32       	cpi	r16, 0x22	; 34
   1425a:	11 05       	cpc	r17, r1
   1425c:	91 f4       	brne	.+36     	; 0x14282 <Read_Config+0x732>
   1425e:	96 2f       	mov	r25, r22
   14260:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   14262:	f2 01       	movw	r30, r4
   14264:	03 c0       	rjmp	.+6      	; 0x1426c <Read_Config+0x71c>
   14266:	90 87       	std	Z+8, r25	; 0x08
   14268:	81 87       	std	Z+9, r24	; 0x09

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   1426a:	12 cd       	rjmp	.-1500   	; 0x13c90 <Read_Config+0x140>
   1426c:	92 87       	std	Z+10, r25	; 0x0a
                        break;
   1426e:	83 87       	std	Z+11, r24	; 0x0b
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   14270:	0f cd       	rjmp	.-1506   	; 0x13c90 <Read_Config+0x140>
   14272:	f2 01       	movw	r30, r4
                        break;
   14274:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   14276:	75 87       	std	Z+13, r23	; 0x0d
   14278:	0b cd       	rjmp	.-1514   	; 0x13c90 <Read_Config+0x140>
   1427a:	f2 01       	movw	r30, r4
                        break;
   1427c:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   1427e:	77 87       	std	Z+15, r23	; 0x0f
   14280:	07 cd       	rjmp	.-1522   	; 0x13c90 <Read_Config+0x140>
   14282:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14284:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   14286:	37 82       	std	Z+7, r3	; 0x07
   14288:	26 82       	std	Z+6, r2	; 0x06
   1428a:	b5 82       	std	Z+5, r11	; 0x05
   1428c:	a4 82       	std	Z+4, r10	; 0x04
   1428e:	c0 5f       	subi	r28, 0xF0	; 240
   14290:	de 4f       	sbci	r29, 0xFE	; 254
   14292:	28 81       	ld	r18, Y
   14294:	39 81       	ldd	r19, Y+1	; 0x01
   14296:	4a 81       	ldd	r20, Y+2	; 0x02
   14298:	c0 51       	subi	r28, 0x10	; 16
   1429a:	d1 40       	sbci	r29, 0x01	; 1
   1429c:	0d c0       	rjmp	.+26     	; 0x142b8 <Read_Config+0x768>
   1429e:	ed b7       	in	r30, 0x3d	; 61
   142a0:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   142a2:	37 82       	std	Z+7, r3	; 0x07
   142a4:	26 82       	std	Z+6, r2	; 0x06
   142a6:	b5 82       	std	Z+5, r11	; 0x05
   142a8:	a4 82       	std	Z+4, r10	; 0x04
   142aa:	c3 5f       	subi	r28, 0xF3	; 243
   142ac:	de 4f       	sbci	r29, 0xFE	; 254
   142ae:	28 81       	ld	r18, Y
   142b0:	39 81       	ldd	r19, Y+1	; 0x01
   142b2:	4a 81       	ldd	r20, Y+2	; 0x02
   142b4:	cd 50       	subi	r28, 0x0D	; 13
   142b6:	d1 40       	sbci	r29, 0x01	; 1
   142b8:	21 83       	std	Z+1, r18	; 0x01
   142ba:	32 83       	std	Z+2, r19	; 0x02
   142bc:	43 83       	std	Z+3, r20	; 0x03
   142be:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   142c2:	ff ef       	ldi	r31, 0xFF	; 255
   142c4:	cf 1a       	sub	r12, r31
                ++errors;
   142c6:	df 0a       	sbc	r13, r31
   142c8:	e3 cc       	rjmp	.-1594   	; 0x13c90 <Read_Config+0x140>
   142ca:	61 14       	cp	r6, r1
                break;
   142cc:	71 04       	cpc	r7, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   142ce:	79 f0       	breq	.+30     	; 0x142ee <Read_Config+0x79e>
   142d0:	ed b7       	in	r30, 0x3d	; 61
   142d2:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   142d4:	35 82       	std	Z+5, r3	; 0x05
   142d6:	24 82       	std	Z+4, r2	; 0x04
   142d8:	88 ea       	ldi	r24, 0xA8	; 168
   142da:	9d e1       	ldi	r25, 0x1D	; 29
   142dc:	a0 e0       	ldi	r26, 0x00	; 0
   142de:	81 83       	std	Z+1, r24	; 0x01
   142e0:	92 83       	std	Z+2, r25	; 0x02
   142e2:	a3 83       	std	Z+3, r26	; 0x03
   142e4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   142e8:	ff ef       	ldi	r31, 0xFF	; 255
   142ea:	cf 1a       	sub	r12, r31
        ++errors;
   142ec:	df 0a       	sbc	r13, r31
   142ee:	ed b7       	in	r30, 0x3d	; 61
   142f0:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   142f2:	35 82       	std	Z+5, r3	; 0x05
   142f4:	24 82       	std	Z+4, r2	; 0x04
   142f6:	8b e8       	ldi	r24, 0x8B	; 139
   142f8:	9d e1       	ldi	r25, 0x1D	; 29
   142fa:	a0 e0       	ldi	r26, 0x00	; 0
   142fc:	81 83       	std	Z+1, r24	; 0x01
   142fe:	92 83       	std	Z+2, r25	; 0x02
   14300:	a3 83       	std	Z+3, r26	; 0x03
   14302:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   14306:	c1 14       	cp	r12, r1
   14308:	d1 04       	cpc	r13, r1
    if(errors)
   1430a:	61 f0       	breq	.+24     	; 0x14324 <Read_Config+0x7d4>
   1430c:	ed b7       	in	r30, 0x3d	; 61
   1430e:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   14310:	d5 82       	std	Z+5, r13	; 0x05
   14312:	c4 82       	std	Z+4, r12	; 0x04
   14314:	84 e6       	ldi	r24, 0x64	; 100
   14316:	9d e1       	ldi	r25, 0x1D	; 29
   14318:	a0 e0       	ldi	r26, 0x00	; 0
   1431a:	81 83       	std	Z+1, r24	; 0x01
   1431c:	92 83       	std	Z+2, r25	; 0x02
   1431e:	a3 83       	std	Z+3, r26	; 0x03
   14320:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   14324:	c5 5f       	subi	r28, 0xF5	; 245
   14326:	de 4f       	sbci	r29, 0xFE	; 254

    if(fclose(cfg) == EOF)
   14328:	88 81       	ld	r24, Y
   1432a:	99 81       	ldd	r25, Y+1	; 0x01
   1432c:	cb 50       	subi	r28, 0x0B	; 11
   1432e:	d1 40       	sbci	r29, 0x01	; 1
   14330:	0e 94 cb 7c 	call	0xf996	; 0xf996 <fclose>
   14334:	01 96       	adiw	r24, 0x01	; 1
   14336:	39 f4       	brne	.+14     	; 0x14346 <Read_Config+0x7f6>
   14338:	8b e4       	ldi	r24, 0x4B	; 75
    {
        perror("Read_Config - close error");
   1433a:	9e e0       	ldi	r25, 0x0E	; 14
   1433c:	0e 94 52 78 	call	0xf0a4	; 0xf0a4 <perror>
   14340:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   14342:	c2 1a       	sub	r12, r18
   14344:	d2 0a       	sbc	r13, r18
   14346:	fb db       	rcall	.-2058   	; 0x13b3e <verify_devices>
    }

// Post process and fixup any devices
    verify_devices();
   14348:	c6 01       	movw	r24, r12
   1434a:	c2 5e       	subi	r28, 0xE2	; 226

    return(errors);
   1434c:	de 4f       	sbci	r29, 0xFE	; 254
}
   1434e:	e2 e1       	ldi	r30, 0x12	; 18
   14350:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

00014354 <display_mounts>:
   14354:	cf 93       	push	r28
   14356:	00 d0       	rcall	.+0      	; 0x14358 <display_mounts+0x4>
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
	}
}

void display_mounts()
{
   14358:	1f 92       	push	r1
	int8_t i;
	printf("Mounted drives\n");
   1435a:	87 e3       	ldi	r24, 0x37	; 55
   1435c:	96 e1       	ldi	r25, 0x16	; 22
   1435e:	a0 e0       	ldi	r26, 0x00	; 0
   14360:	ed b7       	in	r30, 0x3d	; 61
   14362:	fe b7       	in	r31, 0x3e	; 62
   14364:	81 83       	std	Z+1, r24	; 0x01
   14366:	92 83       	std	Z+2, r25	; 0x02
   14368:	a3 83       	std	Z+3, r26	; 0x03
   1436a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
	for(i=0;i<MAX_DEVICES;++i)
   1436e:	c0 e0       	ldi	r28, 0x00	; 0
		display_mount(i);
   14370:	8c 2f       	mov	r24, r28
   14372:	a0 da       	rcall	.-2752   	; 0x138b4 <display_mount>
   14374:	cf 5f       	subi	r28, 0xFF	; 255

void display_mounts()
{
	int8_t i;
	printf("Mounted drives\n");
	for(i=0;i<MAX_DEVICES;++i)
   14376:	cc 30       	cpi	r28, 0x0C	; 12
   14378:	d9 f7       	brne	.-10     	; 0x14370 <display_mounts+0x1c>
		display_mount(i);
    printf("\n");
   1437a:	85 e3       	ldi	r24, 0x35	; 53
   1437c:	96 e1       	ldi	r25, 0x16	; 22
   1437e:	a0 e0       	ldi	r26, 0x00	; 0
   14380:	ed b7       	in	r30, 0x3d	; 61
   14382:	fe b7       	in	r31, 0x3e	; 62
   14384:	81 83       	std	Z+1, r24	; 0x01
   14386:	92 83       	std	Z+2, r25	; 0x02
   14388:	a3 83       	std	Z+3, r26	; 0x03
   1438a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
}
   1438e:	0f 90       	pop	r0
   14390:	0f 90       	pop	r0
   14392:	0f 90       	pop	r0
   14394:	cf 91       	pop	r28
   14396:	08 95       	ret

00014398 <mount>:

/// ===============================================
/// @brief mount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t mount(int argc, char *argv[])
{
   14398:	a5 e0       	ldi	r26, 0x05	; 5
   1439a:	b0 e0       	ldi	r27, 0x00	; 0
   1439c:	e2 ed       	ldi	r30, 0xD2	; 210
   1439e:	f1 ea       	ldi	r31, 0xA1	; 161
   143a0:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
   143a4:	eb 01       	movw	r28, r22
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);

	}
#endif
	if(argc == 1)
   143a6:	81 30       	cpi	r24, 0x01	; 1
   143a8:	91 05       	cpc	r25, r1
   143aa:	11 f4       	brne	.+4      	; 0x143b0 <mount+0x18>
	{
		display_mounts();
   143ac:	d3 df       	rcall	.-90     	; 0x14354 <display_mounts>
   143ae:	c2 c0       	rjmp	.+388    	; 0x14534 <mount+0x19c>
		return(1);
	}
	else if(argc == 3)
   143b0:	83 30       	cpi	r24, 0x03	; 3
   143b2:	91 05       	cpc	r25, r1
   143b4:	61 f5       	brne	.+88     	; 0x1440e <mount+0x76>
	{
			if(MATCHI(argv[1], "PRINTER"))
   143b6:	65 e6       	ldi	r22, 0x65	; 101
   143b8:	7e e0       	ldi	r23, 0x0E	; 14
   143ba:	8a 81       	ldd	r24, Y+2	; 0x02
   143bc:	9b 81       	ldd	r25, Y+3	; 0x03
   143be:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   143c2:	89 2b       	or	r24, r25
   143c4:	09 f4       	brne	.+2      	; 0x143c8 <mount+0x30>
   143c6:	b6 c0       	rjmp	.+364    	; 0x14534 <mount+0x19c>
			{
				// FIXME - do we want to have separtate address and ppr ?
				int8_t address = atoi(argv[2]) & 0xff;
   143c8:	8c 81       	ldd	r24, Y+4	; 0x04
   143ca:	9d 81       	ldd	r25, Y+5	; 0x05
   143cc:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <atoi>
   143d0:	c8 2f       	mov	r28, r24
				index = alloc_device(PRINTER_TYPE);
   143d2:	84 e0       	ldi	r24, 0x04	; 4
   143d4:	90 e0       	ldi	r25, 0x00	; 0
   143d6:	0e 94 af 98 	call	0x1315e	; 0x1315e <alloc_device>
				if(index < 0)
   143da:	87 ff       	sbrs	r24, 7
   143dc:	0b c0       	rjmp	.+22     	; 0x143f4 <mount+0x5c>
				{
					printf("Could not allocate PRINTER structure\n");
   143de:	89 e2       	ldi	r24, 0x29	; 41
   143e0:	97 e1       	ldi	r25, 0x17	; 23
   143e2:	a0 e0       	ldi	r26, 0x00	; 0
   143e4:	ed b7       	in	r30, 0x3d	; 61
   143e6:	fe b7       	in	r31, 0x3e	; 62
   143e8:	81 83       	std	Z+1, r24	; 0x01
   143ea:	92 83       	std	Z+2, r25	; 0x02
   143ec:	a3 83       	std	Z+3, r26	; 0x03
   143ee:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   143f2:	9e c0       	rjmp	.+316    	; 0x14530 <mount+0x198>
					return(0);
				}
				PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   143f4:	9b e0       	ldi	r25, 0x0B	; 11
   143f6:	89 02       	muls	r24, r25
   143f8:	f0 01       	movw	r30, r0
   143fa:	11 24       	eor	r1, r1
   143fc:	e4 50       	subi	r30, 0x04	; 4
   143fe:	f1 4e       	sbci	r31, 0xE1	; 225
				PRINTERp->HEADER.ADDRESS  = address;
   14400:	a7 81       	ldd	r26, Z+7	; 0x07
   14402:	b0 85       	ldd	r27, Z+8	; 0x08
   14404:	cc 93       	st	X, r28
				Devices[index].ADDRESS = address;
   14406:	c1 83       	std	Z+1, r28	; 0x01
				Devices[index].PPR = 0xff;
   14408:	9f ef       	ldi	r25, 0xFF	; 255
   1440a:	92 83       	std	Z+2, r25	; 0x02
   1440c:	80 c0       	rjmp	.+256    	; 0x1450e <mount+0x176>
				return( verify_device(index) );
			}
	}
	else if(argc == 4)
   1440e:	04 97       	sbiw	r24, 0x04	; 4
   14410:	09 f0       	breq	.+2      	; 0x14414 <mount+0x7c>
   14412:	8d c0       	rjmp	.+282    	; 0x1452e <mount+0x196>
		/*
		argv[1] = 9121
		argv[2] = 2
		argv[3] = amigo2.lif
		*/
		if(!hpdir_find_drive(argv[1],0,0) )
   14414:	40 e0       	ldi	r20, 0x00	; 0
   14416:	50 e0       	ldi	r21, 0x00	; 0
   14418:	60 e0       	ldi	r22, 0x00	; 0
   1441a:	70 e0       	ldi	r23, 0x00	; 0
   1441c:	8a 81       	ldd	r24, Y+2	; 0x02
   1441e:	9b 81       	ldd	r25, Y+3	; 0x03
   14420:	ac d1       	rcall	.+856    	; 0x1477a <hpdir_find_drive>
   14422:	89 2b       	or	r24, r25
   14424:	59 f4       	brne	.+22     	; 0x1443c <mount+0xa4>
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
   14426:	81 e0       	ldi	r24, 0x01	; 1
   14428:	97 e1       	ldi	r25, 0x17	; 23
   1442a:	a0 e0       	ldi	r26, 0x00	; 0
   1442c:	ed b7       	in	r30, 0x3d	; 61
   1442e:	fe b7       	in	r31, 0x3e	; 62
   14430:	81 83       	std	Z+1, r24	; 0x01
   14432:	92 83       	std	Z+2, r25	; 0x02
   14434:	a3 83       	std	Z+3, r26	; 0x03
   14436:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1443a:	37 c0       	rjmp	.+110    	; 0x144aa <mount+0x112>
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   1443c:	6d e6       	ldi	r22, 0x6D	; 109
   1443e:	7e e0       	ldi	r23, 0x0E	; 14
   14440:	80 ee       	ldi	r24, 0xE0	; 224
   14442:	9f e1       	ldi	r25, 0x1F	; 31
   14444:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   14448:	89 2b       	or	r24, r25
   1444a:	a9 f0       	breq	.+42     	; 0x14476 <mount+0xde>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   1444c:	8c 81       	ldd	r24, Y+4	; 0x04
   1444e:	9d 81       	ldd	r25, Y+5	; 0x05
   14450:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <atoi>
   14454:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(SS80_TYPE);
   14456:	83 e0       	ldi	r24, 0x03	; 3
   14458:	90 e0       	ldi	r25, 0x00	; 0
   1445a:	0e 94 af 98 	call	0x1315e	; 0x1315e <alloc_device>
   1445e:	f8 2e       	mov	r15, r24
			if(index < 0)
   14460:	87 ff       	sbrs	r24, 7
   14462:	12 c0       	rjmp	.+36     	; 0x14488 <mount+0xf0>
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
   14464:	8c 81       	ldd	r24, Y+4	; 0x04
   14466:	9d 81       	ldd	r25, Y+5	; 0x05
   14468:	ed b7       	in	r30, 0x3d	; 61
   1446a:	fe b7       	in	r31, 0x3e	; 62
   1446c:	95 83       	std	Z+5, r25	; 0x05
   1446e:	84 83       	std	Z+4, r24	; 0x04
   14470:	87 ed       	ldi	r24, 0xD7	; 215
   14472:	96 e1       	ldi	r25, 0x16	; 22
   14474:	38 c0       	rjmp	.+112    	; 0x144e6 <mount+0x14e>
		if(!hpdir_find_drive(argv[1],0,0) )
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   14476:	62 e7       	ldi	r22, 0x72	; 114
   14478:	7e e0       	ldi	r23, 0x0E	; 14
   1447a:	80 ee       	ldi	r24, 0xE0	; 224
   1447c:	9f e1       	ldi	r25, 0x1F	; 31
   1447e:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   14482:	89 2b       	or	r24, r25
   14484:	19 f7       	brne	.-58     	; 0x1444c <mount+0xb4>
   14486:	13 c0       	rjmp	.+38     	; 0x144ae <mount+0x116>
			if(index < 0)
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
				return(0);
			}
			SS80p = (SS80DiskType *) Devices[index].dev;
   14488:	ff 2d       	mov	r31, r15
   1448a:	8b e0       	ldi	r24, 0x0B	; 11
   1448c:	f8 02       	muls	r31, r24
   1448e:	80 01       	movw	r16, r0
   14490:	11 24       	eor	r1, r1
   14492:	04 50       	subi	r16, 0x04	; 4
   14494:	11 4e       	sbci	r17, 0xE1	; 225
   14496:	f8 01       	movw	r30, r16
   14498:	c7 80       	ldd	r12, Z+7	; 0x07
   1449a:	d0 84       	ldd	r13, Z+8	; 0x08
			if( !hpdir_set_parameters(index, argv[1] ) )
   1449c:	6a 81       	ldd	r22, Y+2	; 0x02
   1449e:	7b 81       	ldd	r23, Y+3	; 0x03
   144a0:	8f 2d       	mov	r24, r15
   144a2:	0e 94 3a 9a 	call	0x13474	; 0x13474 <hpdir_set_parameters>
   144a6:	81 11       	cpse	r24, r1
   144a8:	25 c0       	rjmp	.+74     	; 0x144f4 <mount+0x15c>
				return(-1);
   144aa:	8f ef       	ldi	r24, 0xFF	; 255
   144ac:	44 c0       	rjmp	.+136    	; 0x14536 <mount+0x19e>
			Devices[index].ADDRESS = address;
			Devices[index].PPR = ppr;
			return( verify_device(index) );
		}
#ifdef AMIGO
		else if(MATCH(hpdir.TYPE, "AMIGO"))
   144ae:	67 e7       	ldi	r22, 0x77	; 119
   144b0:	7e e0       	ldi	r23, 0x0E	; 14
   144b2:	80 ee       	ldi	r24, 0xE0	; 224
   144b4:	9f e1       	ldi	r25, 0x1F	; 31
   144b6:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
   144ba:	89 2b       	or	r24, r25
   144bc:	51 f1       	breq	.+84     	; 0x14512 <mount+0x17a>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   144be:	8c 81       	ldd	r24, Y+4	; 0x04
   144c0:	9d 81       	ldd	r25, Y+5	; 0x05
   144c2:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <atoi>
   144c6:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(AMIGO_TYPE);
   144c8:	81 e0       	ldi	r24, 0x01	; 1
   144ca:	90 e0       	ldi	r25, 0x00	; 0
   144cc:	0e 94 af 98 	call	0x1315e	; 0x1315e <alloc_device>
   144d0:	f8 2e       	mov	r15, r24
			if(index < 0)
   144d2:	87 ff       	sbrs	r24, 7
   144d4:	d9 cf       	rjmp	.-78     	; 0x14488 <mount+0xf0>
			{
				printf("Could not allocate AMIGO structure for %s\n",argv[2]);
   144d6:	8c 81       	ldd	r24, Y+4	; 0x04
   144d8:	9d 81       	ldd	r25, Y+5	; 0x05
   144da:	ed b7       	in	r30, 0x3d	; 61
   144dc:	fe b7       	in	r31, 0x3e	; 62
   144de:	95 83       	std	Z+5, r25	; 0x05
   144e0:	84 83       	std	Z+4, r24	; 0x04
   144e2:	8c ea       	ldi	r24, 0xAC	; 172
   144e4:	96 e1       	ldi	r25, 0x16	; 22
   144e6:	a0 e0       	ldi	r26, 0x00	; 0
   144e8:	81 83       	std	Z+1, r24	; 0x01
   144ea:	92 83       	std	Z+2, r25	; 0x02
   144ec:	a3 83       	std	Z+3, r26	; 0x03
   144ee:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   144f2:	1e c0       	rjmp	.+60     	; 0x14530 <mount+0x198>
				return(0);
			}
			AMIGOp = (AMIGODiskType *) Devices[index].dev;
			if( !hpdir_set_parameters(index, argv[1] ) )
				return(-1);
			AMIGOp->HEADER.NAME = stralloc(argv[3]);
   144f4:	8e 81       	ldd	r24, Y+6	; 0x06
   144f6:	9f 81       	ldd	r25, Y+7	; 0x07
   144f8:	0e 94 cf 31 	call	0x639e	; 0x639e <stralloc>
   144fc:	f6 01       	movw	r30, r12
   144fe:	93 83       	std	Z+3, r25	; 0x03
   14500:	82 83       	std	Z+2, r24	; 0x02
			AMIGOp->HEADER.ADDRESS  = address;
   14502:	e0 82       	st	Z, r14
			AMIGOp->HEADER.PPR = ppr;
   14504:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].ADDRESS = address;
   14506:	f8 01       	movw	r30, r16
   14508:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].PPR = ppr;
			return( verify_device(index) );
   1450a:	e2 82       	std	Z+2, r14	; 0x02
   1450c:	8f 2d       	mov	r24, r15
   1450e:	4b da       	rcall	.-2922   	; 0x139a6 <verify_device>
   14510:	12 c0       	rjmp	.+36     	; 0x14536 <mount+0x19e>
		}
#endif
		else
		{
			printf("Expected AMIGO or SS80 or CS80 for [%s]\n",argv[1]);
   14512:	8a 81       	ldd	r24, Y+2	; 0x02
   14514:	9b 81       	ldd	r25, Y+3	; 0x03
   14516:	ed b7       	in	r30, 0x3d	; 61
   14518:	fe b7       	in	r31, 0x3e	; 62
   1451a:	95 83       	std	Z+5, r25	; 0x05
   1451c:	84 83       	std	Z+4, r24	; 0x04
   1451e:	83 e8       	ldi	r24, 0x83	; 131
   14520:	96 e1       	ldi	r25, 0x16	; 22
   14522:	a0 e0       	ldi	r26, 0x00	; 0
   14524:	81 83       	std	Z+1, r24	; 0x01
   14526:	92 83       	std	Z+2, r25	; 0x02
   14528:	a3 83       	std	Z+3, r26	; 0x03
   1452a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
			return(0);
		}
	}
	else 
	{
		mount_usage();
   1452e:	52 d9       	rcall	.-3420   	; 0x137d4 <mount_usage>
		return(0);
   14530:	80 e0       	ldi	r24, 0x00	; 0
   14532:	01 c0       	rjmp	.+2      	; 0x14536 <mount+0x19e>
	}
	return(1);
   14534:	81 e0       	ldi	r24, 0x01	; 1
}
   14536:	cd b7       	in	r28, 0x3d	; 61
   14538:	de b7       	in	r29, 0x3e	; 62
   1453a:	25 96       	adiw	r28, 0x05	; 5
   1453c:	e8 e0       	ldi	r30, 0x08	; 8
   1453e:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

00014542 <drives_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int drives_tests(int argc, char * argv[])
{
   14542:	ef 92       	push	r14
   14544:	ff 92       	push	r15
   14546:	0f 93       	push	r16
   14548:	1f 93       	push	r17
   1454a:	cf 93       	push	r28
   1454c:	df 93       	push	r29
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1454e:	fb 01       	movw	r30, r22
   14550:	00 81       	ld	r16, Z
   14552:	11 81       	ldd	r17, Z+1	; 0x01

    if(!ptr)
   14554:	01 15       	cp	r16, r1
   14556:	11 05       	cpc	r17, r1
   14558:	19 f4       	brne	.+6      	; 0x14560 <drives_tests+0x1e>
        return(0);
   1455a:	80 e0       	ldi	r24, 0x00	; 0
   1455c:	90 e0       	ldi	r25, 0x00	; 0
   1455e:	6d c0       	rjmp	.+218    	; 0x1463a <drives_tests+0xf8>
   14560:	eb 01       	movw	r28, r22
   14562:	7c 01       	movw	r14, r24

    if (MATCHI(ptr,"drives") && MATCHI(argv[ind], "help"))
   14564:	6d e7       	ldi	r22, 0x7D	; 125
   14566:	7e e0       	ldi	r23, 0x0E	; 14
   14568:	c8 01       	movw	r24, r16
   1456a:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1456e:	89 2b       	or	r24, r25
   14570:	59 f0       	breq	.+22     	; 0x14588 <drives_tests+0x46>
   14572:	64 e7       	ldi	r22, 0x74	; 116
   14574:	76 e1       	ldi	r23, 0x16	; 22
   14576:	8a 81       	ldd	r24, Y+2	; 0x02
   14578:	9b 81       	ldd	r25, Y+3	; 0x03
   1457a:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1457e:	89 2b       	or	r24, r25
   14580:	19 f0       	breq	.+6      	; 0x14588 <drives_tests+0x46>
	{
		drives_help(1);
   14582:	81 e0       	ldi	r24, 0x01	; 1
   14584:	12 d9       	rcall	.-3548   	; 0x137aa <drives_help>
   14586:	57 c0       	rjmp	.+174    	; 0x14636 <drives_tests+0xf4>
		return(1);
	}

    if (MATCHI(ptr,"mount") )
   14588:	65 e8       	ldi	r22, 0x85	; 133
   1458a:	7e e0       	ldi	r23, 0x0E	; 14
   1458c:	c8 01       	movw	r24, r16
   1458e:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   14592:	89 2b       	or	r24, r25
   14594:	59 f0       	breq	.+22     	; 0x145ac <drives_tests+0x6a>
    {
		if(!mount(argc, argv))
   14596:	be 01       	movw	r22, r28
   14598:	c7 01       	movw	r24, r14
   1459a:	fe de       	rcall	.-516    	; 0x14398 <mount>
   1459c:	81 11       	cpse	r24, r1
   1459e:	03 c0       	rjmp	.+6      	; 0x145a6 <drives_tests+0x64>
			return(-1);
   145a0:	8f ef       	ldi	r24, 0xFF	; 255
   145a2:	9f ef       	ldi	r25, 0xFF	; 255
   145a4:	4a c0       	rjmp	.+148    	; 0x1463a <drives_tests+0xf8>
#ifdef LCD_SUPPORT
    extern void update_drive_counts();
    update_drive_counts();
   145a6:	0e 94 15 e4 	call	0x1c82a	; 0x1c82a <update_drive_counts>
   145aa:	45 c0       	rjmp	.+138    	; 0x14636 <drives_tests+0xf4>
#endif

		return(1);
    }
    if (MATCHI(ptr,"umount") )
   145ac:	64 e8       	ldi	r22, 0x84	; 132
   145ae:	7e e0       	ldi	r23, 0x0E	; 14
   145b0:	c8 01       	movw	r24, r16
   145b2:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   145b6:	89 2b       	or	r24, r25
   145b8:	21 f0       	breq	.+8      	; 0x145c2 <drives_tests+0x80>
    {
		if(!umount(argc, argv))
   145ba:	be 01       	movw	r22, r28
   145bc:	c7 01       	movw	r24, r14
   145be:	32 d9       	rcall	.-3484   	; 0x13824 <umount>
   145c0:	ed cf       	rjmp	.-38     	; 0x1459c <drives_tests+0x5a>
    update_drive_counts();
#endif
		return(1);
	}

    if (MATCHI(ptr,"addresses") )
   145c2:	6b e8       	ldi	r22, 0x8B	; 139
   145c4:	7e e0       	ldi	r23, 0x0E	; 14
   145c6:	c8 01       	movw	r24, r16
   145c8:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   145cc:	89 2b       	or	r24, r25
   145ce:	b1 f0       	breq	.+44     	; 0x145fc <drives_tests+0xba>
    {
        ptr = argv[ind];
   145d0:	8a 81       	ldd	r24, Y+2	; 0x02
   145d2:	9b 81       	ldd	r25, Y+3	; 0x03
        if(ptr && *ptr && MATCH(ptr,"-v"))
   145d4:	00 97       	sbiw	r24, 0x00	; 0
   145d6:	69 f0       	breq	.+26     	; 0x145f2 <drives_tests+0xb0>
   145d8:	fc 01       	movw	r30, r24
   145da:	20 81       	ld	r18, Z
   145dc:	22 23       	and	r18, r18
   145de:	49 f0       	breq	.+18     	; 0x145f2 <drives_tests+0xb0>
   145e0:	65 e9       	ldi	r22, 0x95	; 149
   145e2:	7e e0       	ldi	r23, 0x0E	; 14
   145e4:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
   145e8:	89 2b       	or	r24, r25
   145ea:	19 f0       	breq	.+6      	; 0x145f2 <drives_tests+0xb0>
            display_Addresses(1);
   145ec:	81 e0       	ldi	r24, 0x01	; 1
   145ee:	90 e0       	ldi	r25, 0x00	; 0
   145f0:	02 c0       	rjmp	.+4      	; 0x145f6 <drives_tests+0xb4>
        else
            display_Addresses(0);
   145f2:	80 e0       	ldi	r24, 0x00	; 0
   145f4:	90 e0       	ldi	r25, 0x00	; 0
   145f6:	0e 94 4c 93 	call	0x12698	; 0x12698 <display_Addresses>
   145fa:	1d c0       	rjmp	.+58     	; 0x14636 <drives_tests+0xf4>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   145fc:	68 e9       	ldi	r22, 0x98	; 152
   145fe:	7e e0       	ldi	r23, 0x0E	; 14
   14600:	c8 01       	movw	r24, r16
   14602:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   14606:	89 2b       	or	r24, r25
   14608:	09 f4       	brne	.+2      	; 0x1460c <drives_tests+0xca>
   1460a:	a7 cf       	rjmp	.-178    	; 0x1455a <drives_tests+0x18>
    {
        ptr = argv[ind];
   1460c:	8a 81       	ldd	r24, Y+2	; 0x02
   1460e:	9b 81       	ldd	r25, Y+3	; 0x03
        if(ptr && *ptr && MATCH(ptr,"-v"))
   14610:	00 97       	sbiw	r24, 0x00	; 0
   14612:	69 f0       	breq	.+26     	; 0x1462e <drives_tests+0xec>
   14614:	fc 01       	movw	r30, r24
   14616:	20 81       	ld	r18, Z
   14618:	22 23       	and	r18, r18
   1461a:	49 f0       	breq	.+18     	; 0x1462e <drives_tests+0xec>
   1461c:	65 e9       	ldi	r22, 0x95	; 149
   1461e:	7e e0       	ldi	r23, 0x0E	; 14
   14620:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
   14624:	89 2b       	or	r24, r25
   14626:	19 f0       	breq	.+6      	; 0x1462e <drives_tests+0xec>
            display_Config(1);
   14628:	81 e0       	ldi	r24, 0x01	; 1
   1462a:	90 e0       	ldi	r25, 0x00	; 0
   1462c:	02 c0       	rjmp	.+4      	; 0x14632 <drives_tests+0xf0>
        else
            display_Config(0);
   1462e:	80 e0       	ldi	r24, 0x00	; 0
   14630:	90 e0       	ldi	r25, 0x00	; 0
   14632:	0e 94 20 94 	call	0x12840	; 0x12840 <display_Config>
        return(1);
   14636:	81 e0       	ldi	r24, 0x01	; 1
   14638:	90 e0       	ldi	r25, 0x00	; 0
    }
	return(0);
}
   1463a:	cd b7       	in	r28, 0x3d	; 61
   1463c:	de b7       	in	r29, 0x3e	; 62
   1463e:	e6 e0       	ldi	r30, 0x06	; 6
   14640:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

00014644 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   14644:	8f e1       	ldi	r24, 0x1F	; 31
   14646:	e0 e8       	ldi	r30, 0x80	; 128
   14648:	ff e1       	ldi	r31, 0x1F	; 31
   1464a:	df 01       	movw	r26, r30
   1464c:	98 2f       	mov	r25, r24
   1464e:	1d 92       	st	X+, r1
   14650:	9a 95       	dec	r25
   14652:	e9 f7       	brne	.-6      	; 0x1464e <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   14654:	9f e3       	ldi	r25, 0x3F	; 63
   14656:	e0 ea       	ldi	r30, 0xA0	; 160
   14658:	ff e1       	ldi	r31, 0x1F	; 31
   1465a:	df 01       	movw	r26, r30
   1465c:	1d 92       	st	X+, r1
   1465e:	9a 95       	dec	r25
   14660:	e9 f7       	brne	.-6      	; 0x1465c <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   14662:	e0 ee       	ldi	r30, 0xE0	; 224
   14664:	ff e1       	ldi	r31, 0x1F	; 31
   14666:	df 01       	movw	r26, r30
   14668:	1d 92       	st	X+, r1
   1466a:	8a 95       	dec	r24
   1466c:	e9 f7       	brne	.-6      	; 0x14668 <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   1466e:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <hpdir+0x80>
   14672:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <hpdir+0x81>
   14676:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <hpdir+0x82>
   1467a:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   1467e:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <hpdir+0x84>
   14682:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <hpdir+0x85>
   14686:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <hpdir+0x86>
   1468a:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   1468e:	10 92 08 20 	sts	0x2008, r1	; 0x802008 <hpdir+0x88>
   14692:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <hpdir+0x89>
   14696:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <hpdir+0x8a>
   1469a:	10 92 0b 20 	sts	0x200B, r1	; 0x80200b <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   1469e:	10 92 0c 20 	sts	0x200C, r1	; 0x80200c <hpdir+0x8c>
   146a2:	10 92 0d 20 	sts	0x200D, r1	; 0x80200d <hpdir+0x8d>
   146a6:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <hpdir+0x8e>
   146aa:	10 92 0f 20 	sts	0x200F, r1	; 0x80200f <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   146ae:	81 e0       	ldi	r24, 0x01	; 1
   146b0:	90 e8       	ldi	r25, 0x80	; 128
   146b2:	a0 e0       	ldi	r26, 0x00	; 0
   146b4:	b0 e0       	ldi	r27, 0x00	; 0
   146b6:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <hpdir+0x90>
   146ba:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <hpdir+0x91>
   146be:	a0 93 12 20 	sts	0x2012, r26	; 0x802012 <hpdir+0x92>
   146c2:	b0 93 13 20 	sts	0x2013, r27	; 0x802013 <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   146c6:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <hpdir+0x94>
   146ca:	10 92 15 20 	sts	0x2015, r1	; 0x802015 <hpdir+0x95>
   146ce:	10 92 16 20 	sts	0x2016, r1	; 0x802016 <hpdir+0x96>
   146d2:	10 92 17 20 	sts	0x2017, r1	; 0x802017 <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   146d6:	10 92 18 20 	sts	0x2018, r1	; 0x802018 <hpdir+0x98>
   146da:	10 92 19 20 	sts	0x2019, r1	; 0x802019 <hpdir+0x99>
   146de:	10 92 1a 20 	sts	0x201A, r1	; 0x80201a <hpdir+0x9a>
   146e2:	10 92 1b 20 	sts	0x201B, r1	; 0x80201b <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   146e6:	10 92 1c 20 	sts	0x201C, r1	; 0x80201c <hpdir+0x9c>
   146ea:	10 92 1d 20 	sts	0x201D, r1	; 0x80201d <hpdir+0x9d>
   146ee:	10 92 1e 20 	sts	0x201E, r1	; 0x80201e <hpdir+0x9e>
   146f2:	10 92 1f 20 	sts	0x201F, r1	; 0x80201f <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   146f6:	10 92 20 20 	sts	0x2020, r1	; 0x802020 <hpdir+0xa0>
   146fa:	10 92 21 20 	sts	0x2021, r1	; 0x802021 <hpdir+0xa1>
   146fe:	10 92 22 20 	sts	0x2022, r1	; 0x802022 <hpdir+0xa2>
   14702:	10 92 23 20 	sts	0x2023, r1	; 0x802023 <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   14706:	10 92 24 20 	sts	0x2024, r1	; 0x802024 <hpdir+0xa4>
   1470a:	10 92 25 20 	sts	0x2025, r1	; 0x802025 <hpdir+0xa5>
   1470e:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <hpdir+0xa6>
   14712:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   14716:	81 e0       	ldi	r24, 0x01	; 1
   14718:	90 e0       	ldi	r25, 0x00	; 0
   1471a:	a0 e0       	ldi	r26, 0x00	; 0
   1471c:	b0 e0       	ldi	r27, 0x00	; 0
   1471e:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <hpdir+0xa8>
   14722:	90 93 29 20 	sts	0x2029, r25	; 0x802029 <hpdir+0xa9>
   14726:	a0 93 2a 20 	sts	0x202A, r26	; 0x80202a <hpdir+0xaa>
   1472a:	b0 93 2b 20 	sts	0x202B, r27	; 0x80202b <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   1472e:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <hpdir+0xac>
   14732:	10 92 2d 20 	sts	0x202D, r1	; 0x80202d <hpdir+0xad>
   14736:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <hpdir+0xae>
   1473a:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <hpdir+0xaf>
   1473e:	08 95       	ret

00014740 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   14740:	20 e0       	ldi	r18, 0x00	; 0
   14742:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   14744:	61 15       	cp	r22, r1
   14746:	71 05       	cpc	r23, r1
   14748:	81 05       	cpc	r24, r1
   1474a:	91 05       	cpc	r25, r1
   1474c:	39 f0       	breq	.+14     	; 0x1475c <lif_dir_count+0x1c>
    {
        scale++;
   1474e:	2f 5f       	subi	r18, 0xFF	; 255
   14750:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   14752:	95 95       	asr	r25
   14754:	87 95       	ror	r24
   14756:	77 95       	ror	r23
   14758:	67 95       	ror	r22
   1475a:	f4 cf       	rjmp	.-24     	; 0x14744 <lif_dir_count+0x4>
    }
    scale>>=1;
   1475c:	35 95       	asr	r19
   1475e:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   14760:	61 e0       	ldi	r22, 0x01	; 1
   14762:	70 e0       	ldi	r23, 0x00	; 0
   14764:	80 e0       	ldi	r24, 0x00	; 0
   14766:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   14768:	21 50       	subi	r18, 0x01	; 1
   1476a:	31 09       	sbc	r19, r1
   1476c:	28 f0       	brcs	.+10     	; 0x14778 <lif_dir_count+0x38>
        num <<=1;
   1476e:	66 0f       	add	r22, r22
   14770:	77 1f       	adc	r23, r23
   14772:	88 1f       	adc	r24, r24
   14774:	99 1f       	adc	r25, r25
   14776:	f8 cf       	rjmp	.-16     	; 0x14768 <lif_dir_count+0x28>
    return(num);
}
   14778:	08 95       	ret

0001477a <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   1477a:	2f 92       	push	r2
   1477c:	3f 92       	push	r3
   1477e:	4f 92       	push	r4
   14780:	5f 92       	push	r5
   14782:	6f 92       	push	r6
   14784:	8f 92       	push	r8
   14786:	9f 92       	push	r9
   14788:	af 92       	push	r10
   1478a:	bf 92       	push	r11
   1478c:	cf 92       	push	r12
   1478e:	df 92       	push	r13
   14790:	ef 92       	push	r14
   14792:	ff 92       	push	r15
   14794:	0f 93       	push	r16
   14796:	1f 93       	push	r17
   14798:	cf 93       	push	r28
   1479a:	df 93       	push	r29
   1479c:	cd b7       	in	r28, 0x3d	; 61
   1479e:	de b7       	in	r29, 0x3e	; 62
   147a0:	c9 58       	subi	r28, 0x89	; 137
   147a2:	d1 40       	sbci	r29, 0x01	; 1
   147a4:	0f b6       	in	r0, 0x3f	; 63
   147a6:	f8 94       	cli
   147a8:	de bf       	out	0x3e, r29	; 62
   147aa:	0f be       	out	0x3f, r0	; 63
   147ac:	cd bf       	out	0x3d, r28	; 61
   147ae:	6c 01       	movw	r12, r24
   147b0:	c8 57       	subi	r28, 0x78	; 120
   147b2:	de 4f       	sbci	r29, 0xFE	; 254
   147b4:	79 83       	std	Y+1, r23	; 0x01
   147b6:	68 83       	st	Y, r22
   147b8:	c8 58       	subi	r28, 0x88	; 136
   147ba:	d1 40       	sbci	r29, 0x01	; 1
   147bc:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   147be:	42 df       	rcall	.-380    	; 0x14644 <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   147c0:	6e ef       	ldi	r22, 0xFE	; 254
   147c2:	78 e0       	ldi	r23, 0x08	; 8
   147c4:	8e e5       	ldi	r24, 0x5E	; 94
   147c6:	90 e1       	ldi	r25, 0x10	; 16
   147c8:	0e 94 21 7e 	call	0xfc42	; 0xfc42 <fopen>
   147cc:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   147ce:	89 2b       	or	r24, r25
   147d0:	49 f4       	brne	.+18     	; 0x147e4 <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   147d2:	6e ef       	ldi	r22, 0xFE	; 254
   147d4:	78 e0       	ldi	r23, 0x08	; 8
   147d6:	8d e5       	ldi	r24, 0x5D	; 93
   147d8:	90 e1       	ldi	r25, 0x10	; 16
   147da:	0e 94 21 7e 	call	0xfc42	; 0xfc42 <fopen>
   147de:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   147e0:	89 2b       	or	r24, r25
   147e2:	51 f0       	breq	.+20     	; 0x147f8 <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   147e4:	21 2c       	mov	r2, r1
   147e6:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   147e8:	8e 01       	movw	r16, r28
   147ea:	08 5f       	subi	r16, 0xF8	; 248
   147ec:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   147ee:	8d ee       	ldi	r24, 0xED	; 237
   147f0:	90 e2       	ldi	r25, 0x20	; 32
   147f2:	2c 01       	movw	r4, r24
   147f4:	61 2c       	mov	r6, r1
   147f6:	1e c0       	rjmp	.+60     	; 0x14834 <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   147f8:	ab 28       	or	r10, r11
   147fa:	09 f4       	brne	.+2      	; 0x147fe <hpdir_find_drive+0x84>
   147fc:	79 c1       	rjmp	.+754    	; 0x14af0 <hpdir_find_drive+0x376>
            printf("Error: hpdir.ini not found!\n");
   147fe:	84 ef       	ldi	r24, 0xF4	; 244
   14800:	90 e2       	ldi	r25, 0x20	; 32
   14802:	a0 e0       	ldi	r26, 0x00	; 0
   14804:	ed b7       	in	r30, 0x3d	; 61
   14806:	fe b7       	in	r31, 0x3e	; 62
   14808:	81 83       	std	Z+1, r24	; 0x01
   1480a:	92 83       	std	Z+2, r25	; 0x02
   1480c:	a3 83       	std	Z+3, r26	; 0x03
   1480e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   14812:	6e c1       	rjmp	.+732    	; 0x14af0 <hpdir_find_drive+0x376>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   14814:	ce 01       	movw	r24, r28
   14816:	08 96       	adiw	r24, 0x08	; 8
   14818:	0e 94 ff 31 	call	0x63fe	; 0x63fe <trim_tail>
        ptr = skipspaces(ptr);
   1481c:	ce 01       	movw	r24, r28
   1481e:	08 96       	adiw	r24, 0x08	; 8
   14820:	0e 94 0f 32 	call	0x641e	; 0x641e <skipspaces>

        len = strlen(ptr);
   14824:	fc 01       	movw	r30, r24
   14826:	01 90       	ld	r0, Z+
   14828:	00 20       	and	r0, r0
   1482a:	e9 f7       	brne	.-6      	; 0x14826 <hpdir_find_drive+0xac>
   1482c:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   1482e:	8e 17       	cp	r24, r30
   14830:	9f 07       	cpc	r25, r31
   14832:	51 f4       	brne	.+20     	; 0x14848 <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14834:	a7 01       	movw	r20, r14
   14836:	6e ef       	ldi	r22, 0xFE	; 254
   14838:	70 e0       	ldi	r23, 0x00	; 0
   1483a:	ce 01       	movw	r24, r28
   1483c:	08 96       	adiw	r24, 0x08	; 8
   1483e:	0e 94 39 76 	call	0xec72	; 0xec72 <fgets>
   14842:	89 2b       	or	r24, r25
   14844:	39 f7       	brne	.-50     	; 0x14814 <hpdir_find_drive+0x9a>
   14846:	0c c0       	rjmp	.+24     	; 0x14860 <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14848:	fc 01       	movw	r30, r24
   1484a:	20 81       	ld	r18, Z
   1484c:	2b 33       	cpi	r18, 0x3B	; 59
   1484e:	91 f3       	breq	.-28     	; 0x14834 <hpdir_find_drive+0xba>
   14850:	23 32       	cpi	r18, 0x23	; 35
   14852:	81 f3       	breq	.-32     	; 0x14834 <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   14854:	2b 35       	cpi	r18, 0x5B	; 91
   14856:	39 f4       	brne	.+14     	; 0x14866 <hpdir_find_drive+0xec>
   14858:	f1 e0       	ldi	r31, 0x01	; 1
   1485a:	2f 16       	cp	r2, r31
   1485c:	31 04       	cpc	r3, r1
   1485e:	19 f4       	brne	.+6      	; 0x14866 <hpdir_find_drive+0xec>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   14860:	00 e0       	ldi	r16, 0x00	; 0
   14862:	10 e0       	ldi	r17, 0x00	; 0
   14864:	32 c1       	rjmp	.+612    	; 0x14aca <hpdir_find_drive+0x350>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14866:	4e e7       	ldi	r20, 0x7E	; 126
   14868:	50 e0       	ldi	r21, 0x00	; 0
   1486a:	b8 01       	movw	r22, r16
   1486c:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>
   14870:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   14872:	68 e6       	ldi	r22, 0x68	; 104
   14874:	70 e1       	ldi	r23, 0x10	; 16
   14876:	c8 01       	movw	r24, r16
   14878:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1487c:	89 2b       	or	r24, r25
   1487e:	21 f0       	breq	.+8      	; 0x14888 <hpdir_find_drive+0x10e>
        {
            driveinfo = 1;
   14880:	22 24       	eor	r2, r2
   14882:	23 94       	inc	r2
   14884:	31 2c       	mov	r3, r1
   14886:	d6 cf       	rjmp	.-84     	; 0x14834 <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   14888:	21 e0       	ldi	r18, 0x01	; 1
   1488a:	22 16       	cp	r2, r18
   1488c:	31 04       	cpc	r3, r1
   1488e:	91 f6       	brne	.-92     	; 0x14834 <hpdir_find_drive+0xba>
            continue;

        if(list)
   14890:	c8 57       	subi	r28, 0x78	; 120
   14892:	de 4f       	sbci	r29, 0xFE	; 254
   14894:	88 81       	ld	r24, Y
   14896:	99 81       	ldd	r25, Y+1	; 0x01
   14898:	c8 58       	subi	r28, 0x88	; 136
   1489a:	d1 40       	sbci	r29, 0x01	; 1
   1489c:	89 2b       	or	r24, r25
   1489e:	61 f0       	breq	.+24     	; 0x148b8 <hpdir_find_drive+0x13e>
        {
            printf("%s %s\n", token, ptr);
   148a0:	ed b7       	in	r30, 0x3d	; 61
   148a2:	fe b7       	in	r31, 0x3e	; 62
   148a4:	97 82       	std	Z+7, r9	; 0x07
   148a6:	86 82       	std	Z+6, r8	; 0x06
   148a8:	15 83       	std	Z+5, r17	; 0x05
   148aa:	04 83       	std	Z+4, r16	; 0x04
   148ac:	41 82       	std	Z+1, r4	; 0x01
   148ae:	52 82       	std	Z+2, r5	; 0x02
   148b0:	63 82       	std	Z+3, r6	; 0x03
   148b2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            continue;
   148b6:	be cf       	rjmp	.-132    	; 0x14834 <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   148b8:	b8 01       	movw	r22, r16
   148ba:	c6 01       	movw	r24, r12
   148bc:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   148c0:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   148c2:	f1 f2       	breq	.-68     	; 0x14880 <hpdir_find_drive+0x106>
   148c4:	bf de       	rcall	.-642    	; 0x14644 <hpdir_init>

        if(verbose)
   148c6:	a1 14       	cp	r10, r1
   148c8:	b1 04       	cpc	r11, r1
   148ca:	61 f0       	breq	.+24     	; 0x148e4 <hpdir_find_drive+0x16a>
            printf("Model: %s found in hpdir.ini\n", model);
   148cc:	ed b7       	in	r30, 0x3d	; 61
   148ce:	fe b7       	in	r31, 0x3e	; 62
   148d0:	d5 82       	std	Z+5, r13	; 0x05
   148d2:	c4 82       	std	Z+4, r12	; 0x04
   148d4:	8f ec       	ldi	r24, 0xCF	; 207
   148d6:	90 e2       	ldi	r25, 0x20	; 32
   148d8:	a0 e0       	ldi	r26, 0x00	; 0
   148da:	81 83       	std	Z+1, r24	; 0x01
   148dc:	92 83       	std	Z+2, r25	; 0x02
   148de:	a3 83       	std	Z+3, r26	; 0x03
   148e0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   148e4:	4e e1       	ldi	r20, 0x1E	; 30
   148e6:	50 e0       	ldi	r21, 0x00	; 0
   148e8:	b8 01       	movw	r22, r16
   148ea:	80 e8       	ldi	r24, 0x80	; 128
   148ec:	9f e1       	ldi	r25, 0x1F	; 31
   148ee:	0e 94 2c 31 	call	0x6258	; 0x6258 <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   148f2:	4e e7       	ldi	r20, 0x7E	; 126
   148f4:	50 e0       	ldi	r21, 0x00	; 0
   148f6:	b8 01       	movw	r22, r16
   148f8:	c4 01       	movw	r24, r8
   148fa:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   148fe:	4e e3       	ldi	r20, 0x3E	; 62
   14900:	50 e0       	ldi	r21, 0x00	; 0
   14902:	60 ea       	ldi	r22, 0xA0	; 160
   14904:	7f e1       	ldi	r23, 0x1F	; 31
   14906:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   1490a:	4e e1       	ldi	r20, 0x1E	; 30
   1490c:	50 e0       	ldi	r21, 0x00	; 0
   1490e:	60 ee       	ldi	r22, 0xE0	; 224
   14910:	7f e1       	ldi	r23, 0x1F	; 31
   14912:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14916:	4e e7       	ldi	r20, 0x7E	; 126
   14918:	50 e0       	ldi	r21, 0x00	; 0
   1491a:	b8 01       	movw	r22, r16
   1491c:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>
   14920:	4c 01       	movw	r8, r24
        hpdir.ID = get_value(token);
   14922:	c8 01       	movw	r24, r16
   14924:	0e 94 24 33 	call	0x6648	; 0x6648 <get_value>
   14928:	60 93 00 20 	sts	0x2000, r22	; 0x802000 <hpdir+0x80>
   1492c:	70 93 01 20 	sts	0x2001, r23	; 0x802001 <hpdir+0x81>
   14930:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <hpdir+0x82>
   14934:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14938:	4e e7       	ldi	r20, 0x7E	; 126
   1493a:	50 e0       	ldi	r21, 0x00	; 0
   1493c:	b8 01       	movw	r22, r16
   1493e:	c4 01       	movw	r24, r8
   14940:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>
   14944:	4c 01       	movw	r8, r24
        hpdir.mask_stat2 = get_value(token);
   14946:	c8 01       	movw	r24, r16
   14948:	0e 94 24 33 	call	0x6648	; 0x6648 <get_value>
   1494c:	60 93 04 20 	sts	0x2004, r22	; 0x802004 <hpdir+0x84>
   14950:	70 93 05 20 	sts	0x2005, r23	; 0x802005 <hpdir+0x85>
   14954:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <hpdir+0x86>
   14958:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1495c:	4e e7       	ldi	r20, 0x7E	; 126
   1495e:	50 e0       	ldi	r21, 0x00	; 0
   14960:	b8 01       	movw	r22, r16
   14962:	c4 01       	movw	r24, r8
   14964:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>
   14968:	4c 01       	movw	r8, r24
        hpdir.id_stat2 = get_value(token);
   1496a:	c8 01       	movw	r24, r16
   1496c:	0e 94 24 33 	call	0x6648	; 0x6648 <get_value>
   14970:	60 93 08 20 	sts	0x2008, r22	; 0x802008 <hpdir+0x88>
   14974:	70 93 09 20 	sts	0x2009, r23	; 0x802009 <hpdir+0x89>
   14978:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <hpdir+0x8a>
   1497c:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14980:	4e e7       	ldi	r20, 0x7E	; 126
   14982:	50 e0       	ldi	r21, 0x00	; 0
   14984:	b8 01       	movw	r22, r16
   14986:	c4 01       	movw	r24, r8
   14988:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>
   1498c:	4c 01       	movw	r8, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   1498e:	c8 01       	movw	r24, r16
   14990:	0e 94 24 33 	call	0x6648	; 0x6648 <get_value>
   14994:	60 93 0c 20 	sts	0x200C, r22	; 0x80200c <hpdir+0x8c>
   14998:	70 93 0d 20 	sts	0x200D, r23	; 0x80200d <hpdir+0x8d>
   1499c:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <hpdir+0x8e>
   149a0:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   149a4:	4e e7       	ldi	r20, 0x7E	; 126
   149a6:	50 e0       	ldi	r21, 0x00	; 0
   149a8:	b8 01       	movw	r22, r16
   149aa:	c4 01       	movw	r24, r8
   149ac:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>
   149b0:	4c 01       	movw	r8, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   149b2:	c8 01       	movw	r24, r16
   149b4:	0e 94 24 33 	call	0x6648	; 0x6648 <get_value>
   149b8:	60 93 10 20 	sts	0x2010, r22	; 0x802010 <hpdir+0x90>
   149bc:	70 93 11 20 	sts	0x2011, r23	; 0x802011 <hpdir+0x91>
   149c0:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <hpdir+0x92>
   149c4:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   149c8:	4e e7       	ldi	r20, 0x7E	; 126
   149ca:	50 e0       	ldi	r21, 0x00	; 0
   149cc:	b8 01       	movw	r22, r16
   149ce:	c4 01       	movw	r24, r8
   149d0:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>
   149d4:	4c 01       	movw	r8, r24
        hpdir.CYLINDERS = get_value(token);
   149d6:	c8 01       	movw	r24, r16
   149d8:	0e 94 24 33 	call	0x6648	; 0x6648 <get_value>
   149dc:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <hpdir+0x94>
   149e0:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <hpdir+0x95>
   149e4:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <hpdir+0x96>
   149e8:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   149ec:	4e e7       	ldi	r20, 0x7E	; 126
   149ee:	50 e0       	ldi	r21, 0x00	; 0
   149f0:	b8 01       	movw	r22, r16
   149f2:	c4 01       	movw	r24, r8
   149f4:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>
   149f8:	4c 01       	movw	r8, r24
        hpdir.HEADS = get_value(token);
   149fa:	c8 01       	movw	r24, r16
   149fc:	0e 94 24 33 	call	0x6648	; 0x6648 <get_value>
   14a00:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <hpdir+0x98>
   14a04:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <hpdir+0x99>
   14a08:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <hpdir+0x9a>
   14a0c:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a10:	4e e7       	ldi	r20, 0x7E	; 126
   14a12:	50 e0       	ldi	r21, 0x00	; 0
   14a14:	b8 01       	movw	r22, r16
   14a16:	c4 01       	movw	r24, r8
   14a18:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>
   14a1c:	4c 01       	movw	r8, r24
        hpdir.SECTORS = get_value(token);
   14a1e:	c8 01       	movw	r24, r16
   14a20:	0e 94 24 33 	call	0x6648	; 0x6648 <get_value>
   14a24:	60 93 1c 20 	sts	0x201C, r22	; 0x80201c <hpdir+0x9c>
   14a28:	70 93 1d 20 	sts	0x201D, r23	; 0x80201d <hpdir+0x9d>
   14a2c:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <hpdir+0x9e>
   14a30:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a34:	4e e7       	ldi	r20, 0x7E	; 126
   14a36:	50 e0       	ldi	r21, 0x00	; 0
   14a38:	b8 01       	movw	r22, r16
   14a3a:	c4 01       	movw	r24, r8
   14a3c:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>
   14a40:	4c 01       	movw	r8, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   14a42:	c8 01       	movw	r24, r16
   14a44:	0e 94 24 33 	call	0x6648	; 0x6648 <get_value>
   14a48:	60 93 20 20 	sts	0x2020, r22	; 0x802020 <hpdir+0xa0>
   14a4c:	70 93 21 20 	sts	0x2021, r23	; 0x802021 <hpdir+0xa1>
   14a50:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <hpdir+0xa2>
   14a54:	90 93 23 20 	sts	0x2023, r25	; 0x802023 <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a58:	4e e7       	ldi	r20, 0x7E	; 126
   14a5a:	50 e0       	ldi	r21, 0x00	; 0
   14a5c:	b8 01       	movw	r22, r16
   14a5e:	c4 01       	movw	r24, r8
   14a60:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <get_token>
        hpdir.INTERLEAVE = get_value(token);
   14a64:	c8 01       	movw	r24, r16
   14a66:	0e 94 24 33 	call	0x6648	; 0x6648 <get_value>
   14a6a:	60 93 24 20 	sts	0x2024, r22	; 0x802024 <hpdir+0xa4>
   14a6e:	70 93 25 20 	sts	0x2025, r23	; 0x802025 <hpdir+0xa5>
   14a72:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <hpdir+0xa6>
   14a76:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14a7a:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <hpdir+0x94>
   14a7e:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <hpdir+0x95>
   14a82:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <hpdir+0x96>
   14a86:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <hpdir+0x97>
   14a8a:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <hpdir+0x98>
   14a8e:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <hpdir+0x99>
   14a92:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <hpdir+0x9a>
   14a96:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <hpdir+0x9b>
   14a9a:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <__mulsi3>
   14a9e:	9b 01       	movw	r18, r22
   14aa0:	ac 01       	movw	r20, r24
   14aa2:	60 91 1c 20 	lds	r22, 0x201C	; 0x80201c <hpdir+0x9c>
   14aa6:	70 91 1d 20 	lds	r23, 0x201D	; 0x80201d <hpdir+0x9d>
   14aaa:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <hpdir+0x9e>
   14aae:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <hpdir+0x9f>
   14ab2:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <__mulsi3>
   14ab6:	60 93 2c 20 	sts	0x202C, r22	; 0x80202c <hpdir+0xac>
   14aba:	70 93 2d 20 	sts	0x202D, r23	; 0x80202d <hpdir+0xad>
   14abe:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <hpdir+0xae>
   14ac2:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   14ac6:	01 e0       	ldi	r16, 0x01	; 1
   14ac8:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   14aca:	c7 01       	movw	r24, r14
   14acc:	0e 94 cb 7c 	call	0xf996	; 0xf996 <fclose>
	if(verbose && !found)
   14ad0:	ab 28       	or	r10, r11
   14ad2:	81 f0       	breq	.+32     	; 0x14af4 <hpdir_find_drive+0x37a>
   14ad4:	01 2b       	or	r16, r17
   14ad6:	81 f4       	brne	.+32     	; 0x14af8 <hpdir_find_drive+0x37e>
		printf("Model: %s NOT found in hpdir.ini\n", model);
   14ad8:	ed b7       	in	r30, 0x3d	; 61
   14ada:	fe b7       	in	r31, 0x3e	; 62
   14adc:	d5 82       	std	Z+5, r13	; 0x05
   14ade:	c4 82       	std	Z+4, r12	; 0x04
   14ae0:	8d ea       	ldi	r24, 0xAD	; 173
   14ae2:	90 e2       	ldi	r25, 0x20	; 32
   14ae4:	a0 e0       	ldi	r26, 0x00	; 0
   14ae6:	81 83       	std	Z+1, r24	; 0x01
   14ae8:	92 83       	std	Z+2, r25	; 0x02
   14aea:	a3 83       	std	Z+3, r26	; 0x03
   14aec:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   14af0:	80 e0       	ldi	r24, 0x00	; 0
   14af2:	03 c0       	rjmp	.+6      	; 0x14afa <hpdir_find_drive+0x380>
   14af4:	c8 01       	movw	r24, r16
   14af6:	02 c0       	rjmp	.+4      	; 0x14afc <hpdir_find_drive+0x382>
   14af8:	81 e0       	ldi	r24, 0x01	; 1
   14afa:	90 e0       	ldi	r25, 0x00	; 0
    }                                             // while
    fclose(cfg);
	if(verbose && !found)
		printf("Model: %s NOT found in hpdir.ini\n", model);
    return(found);
}
   14afc:	c7 57       	subi	r28, 0x77	; 119
   14afe:	de 4f       	sbci	r29, 0xFE	; 254
   14b00:	0f b6       	in	r0, 0x3f	; 63
   14b02:	f8 94       	cli
   14b04:	de bf       	out	0x3e, r29	; 62
   14b06:	0f be       	out	0x3f, r0	; 63
   14b08:	cd bf       	out	0x3d, r28	; 61
   14b0a:	df 91       	pop	r29
   14b0c:	cf 91       	pop	r28
   14b0e:	1f 91       	pop	r17
   14b10:	0f 91       	pop	r16
   14b12:	ff 90       	pop	r15
   14b14:	ef 90       	pop	r14
   14b16:	df 90       	pop	r13
   14b18:	cf 90       	pop	r12
   14b1a:	bf 90       	pop	r11
   14b1c:	af 90       	pop	r10
   14b1e:	9f 90       	pop	r9
   14b20:	8f 90       	pop	r8
   14b22:	6f 90       	pop	r6
   14b24:	5f 90       	pop	r5
   14b26:	4f 90       	pop	r4
   14b28:	3f 90       	pop	r3
   14b2a:	2f 90       	pop	r2
   14b2c:	08 95       	ret

00014b2e <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   14b2e:	0f 93       	push	r16
   14b30:	1f 93       	push	r17
   14b32:	25 e0       	ldi	r18, 0x05	; 5
   14b34:	30 e0       	ldi	r19, 0x00	; 0
   14b36:	fc 01       	movw	r30, r24
   14b38:	31 83       	std	Z+1, r19	; 0x01
   14b3a:	20 83       	st	Z, r18
   14b3c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14b40:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14b44:	00 85       	ldd	r16, Z+8	; 0x08
   14b46:	11 85       	ldd	r17, Z+9	; 0x09
   14b48:	20 e0       	ldi	r18, 0x00	; 0
   14b4a:	30 e0       	ldi	r19, 0x00	; 0
   14b4c:	42 e0       	ldi	r20, 0x02	; 2
   14b4e:	50 e0       	ldi	r21, 0x00	; 0
   14b50:	60 e0       	ldi	r22, 0x00	; 0
   14b52:	70 e0       	ldi	r23, 0x00	; 0
   14b54:	80 ea       	ldi	r24, 0xA0	; 160
   14b56:	99 e1       	ldi	r25, 0x19	; 25
   14b58:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14b5c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14b60:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14b64:	02 85       	ldd	r16, Z+10	; 0x0a
   14b66:	13 85       	ldd	r17, Z+11	; 0x0b
   14b68:	20 e0       	ldi	r18, 0x00	; 0
   14b6a:	30 e0       	ldi	r19, 0x00	; 0
   14b6c:	42 e0       	ldi	r20, 0x02	; 2
   14b6e:	50 e0       	ldi	r21, 0x00	; 0
   14b70:	61 e0       	ldi	r22, 0x01	; 1
   14b72:	70 e0       	ldi	r23, 0x00	; 0
   14b74:	80 ea       	ldi	r24, 0xA0	; 160
   14b76:	99 e1       	ldi	r25, 0x19	; 25
   14b78:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14b7c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14b80:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14b84:	04 85       	ldd	r16, Z+12	; 0x0c
   14b86:	10 e0       	ldi	r17, 0x00	; 0
   14b88:	20 e0       	ldi	r18, 0x00	; 0
   14b8a:	30 e0       	ldi	r19, 0x00	; 0
   14b8c:	41 e0       	ldi	r20, 0x01	; 1
   14b8e:	50 e0       	ldi	r21, 0x00	; 0
   14b90:	64 e0       	ldi	r22, 0x04	; 4
   14b92:	70 e0       	ldi	r23, 0x00	; 0
   14b94:	80 ea       	ldi	r24, 0xA0	; 160
   14b96:	99 e1       	ldi	r25, 0x19	; 25
   14b98:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14b9c:	80 ea       	ldi	r24, 0xA0	; 160
   14b9e:	99 e1       	ldi	r25, 0x19	; 25
   14ba0:	1f 91       	pop	r17
   14ba2:	0f 91       	pop	r16
   14ba4:	08 95       	ret

00014ba6 <SS80UnitPack>:
   14ba6:	0f 93       	push	r16
   14ba8:	1f 93       	push	r17
   14baa:	23 e1       	ldi	r18, 0x13	; 19
   14bac:	30 e0       	ldi	r19, 0x00	; 0
   14bae:	fc 01       	movw	r30, r24
   14bb0:	31 83       	std	Z+1, r19	; 0x01
   14bb2:	20 83       	st	Z, r18
   14bb4:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14bb8:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14bbc:	05 85       	ldd	r16, Z+13	; 0x0d
   14bbe:	10 e0       	ldi	r17, 0x00	; 0
   14bc0:	20 e0       	ldi	r18, 0x00	; 0
   14bc2:	30 e0       	ldi	r19, 0x00	; 0
   14bc4:	41 e0       	ldi	r20, 0x01	; 1
   14bc6:	50 e0       	ldi	r21, 0x00	; 0
   14bc8:	60 e0       	ldi	r22, 0x00	; 0
   14bca:	70 e0       	ldi	r23, 0x00	; 0
   14bcc:	8d e8       	ldi	r24, 0x8D	; 141
   14bce:	99 e1       	ldi	r25, 0x19	; 25
   14bd0:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14bd4:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14bd8:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14bdc:	06 85       	ldd	r16, Z+14	; 0x0e
   14bde:	17 85       	ldd	r17, Z+15	; 0x0f
   14be0:	20 89       	ldd	r18, Z+16	; 0x10
   14be2:	31 89       	ldd	r19, Z+17	; 0x11
   14be4:	43 e0       	ldi	r20, 0x03	; 3
   14be6:	50 e0       	ldi	r21, 0x00	; 0
   14be8:	61 e0       	ldi	r22, 0x01	; 1
   14bea:	70 e0       	ldi	r23, 0x00	; 0
   14bec:	8d e8       	ldi	r24, 0x8D	; 141
   14bee:	99 e1       	ldi	r25, 0x19	; 25
   14bf0:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14bf4:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14bf8:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14bfc:	02 89       	ldd	r16, Z+18	; 0x12
   14bfe:	13 89       	ldd	r17, Z+19	; 0x13
   14c00:	20 e0       	ldi	r18, 0x00	; 0
   14c02:	30 e0       	ldi	r19, 0x00	; 0
   14c04:	42 e0       	ldi	r20, 0x02	; 2
   14c06:	50 e0       	ldi	r21, 0x00	; 0
   14c08:	64 e0       	ldi	r22, 0x04	; 4
   14c0a:	70 e0       	ldi	r23, 0x00	; 0
   14c0c:	8d e8       	ldi	r24, 0x8D	; 141
   14c0e:	99 e1       	ldi	r25, 0x19	; 25
   14c10:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14c14:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14c18:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14c1c:	04 89       	ldd	r16, Z+20	; 0x14
   14c1e:	10 e0       	ldi	r17, 0x00	; 0
   14c20:	20 e0       	ldi	r18, 0x00	; 0
   14c22:	30 e0       	ldi	r19, 0x00	; 0
   14c24:	41 e0       	ldi	r20, 0x01	; 1
   14c26:	50 e0       	ldi	r21, 0x00	; 0
   14c28:	66 e0       	ldi	r22, 0x06	; 6
   14c2a:	70 e0       	ldi	r23, 0x00	; 0
   14c2c:	8d e8       	ldi	r24, 0x8D	; 141
   14c2e:	99 e1       	ldi	r25, 0x19	; 25
   14c30:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14c34:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14c38:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14c3c:	05 89       	ldd	r16, Z+21	; 0x15
   14c3e:	10 e0       	ldi	r17, 0x00	; 0
   14c40:	20 e0       	ldi	r18, 0x00	; 0
   14c42:	30 e0       	ldi	r19, 0x00	; 0
   14c44:	41 e0       	ldi	r20, 0x01	; 1
   14c46:	50 e0       	ldi	r21, 0x00	; 0
   14c48:	67 e0       	ldi	r22, 0x07	; 7
   14c4a:	70 e0       	ldi	r23, 0x00	; 0
   14c4c:	8d e8       	ldi	r24, 0x8D	; 141
   14c4e:	99 e1       	ldi	r25, 0x19	; 25
   14c50:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14c54:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14c58:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14c5c:	06 89       	ldd	r16, Z+22	; 0x16
   14c5e:	17 89       	ldd	r17, Z+23	; 0x17
   14c60:	20 e0       	ldi	r18, 0x00	; 0
   14c62:	30 e0       	ldi	r19, 0x00	; 0
   14c64:	42 e0       	ldi	r20, 0x02	; 2
   14c66:	50 e0       	ldi	r21, 0x00	; 0
   14c68:	68 e0       	ldi	r22, 0x08	; 8
   14c6a:	70 e0       	ldi	r23, 0x00	; 0
   14c6c:	8d e8       	ldi	r24, 0x8D	; 141
   14c6e:	99 e1       	ldi	r25, 0x19	; 25
   14c70:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14c74:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14c78:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14c7c:	00 8d       	ldd	r16, Z+24	; 0x18
   14c7e:	11 8d       	ldd	r17, Z+25	; 0x19
   14c80:	20 e0       	ldi	r18, 0x00	; 0
   14c82:	30 e0       	ldi	r19, 0x00	; 0
   14c84:	42 e0       	ldi	r20, 0x02	; 2
   14c86:	50 e0       	ldi	r21, 0x00	; 0
   14c88:	6a e0       	ldi	r22, 0x0A	; 10
   14c8a:	70 e0       	ldi	r23, 0x00	; 0
   14c8c:	8d e8       	ldi	r24, 0x8D	; 141
   14c8e:	99 e1       	ldi	r25, 0x19	; 25
   14c90:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14c94:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14c98:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14c9c:	02 8d       	ldd	r16, Z+26	; 0x1a
   14c9e:	13 8d       	ldd	r17, Z+27	; 0x1b
   14ca0:	20 e0       	ldi	r18, 0x00	; 0
   14ca2:	30 e0       	ldi	r19, 0x00	; 0
   14ca4:	42 e0       	ldi	r20, 0x02	; 2
   14ca6:	50 e0       	ldi	r21, 0x00	; 0
   14ca8:	6c e0       	ldi	r22, 0x0C	; 12
   14caa:	70 e0       	ldi	r23, 0x00	; 0
   14cac:	8d e8       	ldi	r24, 0x8D	; 141
   14cae:	99 e1       	ldi	r25, 0x19	; 25
   14cb0:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14cb4:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14cb8:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14cbc:	04 8d       	ldd	r16, Z+28	; 0x1c
   14cbe:	15 8d       	ldd	r17, Z+29	; 0x1d
   14cc0:	20 e0       	ldi	r18, 0x00	; 0
   14cc2:	30 e0       	ldi	r19, 0x00	; 0
   14cc4:	42 e0       	ldi	r20, 0x02	; 2
   14cc6:	50 e0       	ldi	r21, 0x00	; 0
   14cc8:	6e e0       	ldi	r22, 0x0E	; 14
   14cca:	70 e0       	ldi	r23, 0x00	; 0
   14ccc:	8d e8       	ldi	r24, 0x8D	; 141
   14cce:	99 e1       	ldi	r25, 0x19	; 25
   14cd0:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14cd4:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14cd8:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14cdc:	06 8d       	ldd	r16, Z+30	; 0x1e
   14cde:	10 e0       	ldi	r17, 0x00	; 0
   14ce0:	20 e0       	ldi	r18, 0x00	; 0
   14ce2:	30 e0       	ldi	r19, 0x00	; 0
   14ce4:	41 e0       	ldi	r20, 0x01	; 1
   14ce6:	50 e0       	ldi	r21, 0x00	; 0
   14ce8:	60 e1       	ldi	r22, 0x10	; 16
   14cea:	70 e0       	ldi	r23, 0x00	; 0
   14cec:	8d e8       	ldi	r24, 0x8D	; 141
   14cee:	99 e1       	ldi	r25, 0x19	; 25
   14cf0:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14cf4:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14cf8:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14cfc:	07 8d       	ldd	r16, Z+31	; 0x1f
   14cfe:	10 e0       	ldi	r17, 0x00	; 0
   14d00:	20 e0       	ldi	r18, 0x00	; 0
   14d02:	30 e0       	ldi	r19, 0x00	; 0
   14d04:	41 e0       	ldi	r20, 0x01	; 1
   14d06:	50 e0       	ldi	r21, 0x00	; 0
   14d08:	61 e1       	ldi	r22, 0x11	; 17
   14d0a:	70 e0       	ldi	r23, 0x00	; 0
   14d0c:	8d e8       	ldi	r24, 0x8D	; 141
   14d0e:	99 e1       	ldi	r25, 0x19	; 25
   14d10:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14d14:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14d18:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14d1c:	00 a1       	ldd	r16, Z+32	; 0x20
   14d1e:	10 e0       	ldi	r17, 0x00	; 0
   14d20:	20 e0       	ldi	r18, 0x00	; 0
   14d22:	30 e0       	ldi	r19, 0x00	; 0
   14d24:	41 e0       	ldi	r20, 0x01	; 1
   14d26:	50 e0       	ldi	r21, 0x00	; 0
   14d28:	62 e1       	ldi	r22, 0x12	; 18
   14d2a:	70 e0       	ldi	r23, 0x00	; 0
   14d2c:	8d e8       	ldi	r24, 0x8D	; 141
   14d2e:	99 e1       	ldi	r25, 0x19	; 25
   14d30:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14d34:	8d e8       	ldi	r24, 0x8D	; 141
   14d36:	99 e1       	ldi	r25, 0x19	; 25
   14d38:	1f 91       	pop	r17
   14d3a:	0f 91       	pop	r16
   14d3c:	08 95       	ret

00014d3e <SS80VolumePack>:
   14d3e:	0f 93       	push	r16
   14d40:	1f 93       	push	r17
   14d42:	2d e0       	ldi	r18, 0x0D	; 13
   14d44:	30 e0       	ldi	r19, 0x00	; 0
   14d46:	fc 01       	movw	r30, r24
   14d48:	31 83       	std	Z+1, r19	; 0x01
   14d4a:	20 83       	st	Z, r18
   14d4c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14d50:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14d54:	01 a1       	ldd	r16, Z+33	; 0x21
   14d56:	12 a1       	ldd	r17, Z+34	; 0x22
   14d58:	23 a1       	ldd	r18, Z+35	; 0x23
   14d5a:	34 a1       	ldd	r19, Z+36	; 0x24
   14d5c:	43 e0       	ldi	r20, 0x03	; 3
   14d5e:	50 e0       	ldi	r21, 0x00	; 0
   14d60:	60 e0       	ldi	r22, 0x00	; 0
   14d62:	70 e0       	ldi	r23, 0x00	; 0
   14d64:	80 e8       	ldi	r24, 0x80	; 128
   14d66:	99 e1       	ldi	r25, 0x19	; 25
   14d68:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14d6c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14d70:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14d74:	05 a1       	ldd	r16, Z+37	; 0x25
   14d76:	10 e0       	ldi	r17, 0x00	; 0
   14d78:	20 e0       	ldi	r18, 0x00	; 0
   14d7a:	30 e0       	ldi	r19, 0x00	; 0
   14d7c:	41 e0       	ldi	r20, 0x01	; 1
   14d7e:	50 e0       	ldi	r21, 0x00	; 0
   14d80:	63 e0       	ldi	r22, 0x03	; 3
   14d82:	70 e0       	ldi	r23, 0x00	; 0
   14d84:	80 e8       	ldi	r24, 0x80	; 128
   14d86:	99 e1       	ldi	r25, 0x19	; 25
   14d88:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14d8c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14d90:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14d94:	06 a1       	ldd	r16, Z+38	; 0x26
   14d96:	17 a1       	ldd	r17, Z+39	; 0x27
   14d98:	20 e0       	ldi	r18, 0x00	; 0
   14d9a:	30 e0       	ldi	r19, 0x00	; 0
   14d9c:	42 e0       	ldi	r20, 0x02	; 2
   14d9e:	50 e0       	ldi	r21, 0x00	; 0
   14da0:	64 e0       	ldi	r22, 0x04	; 4
   14da2:	70 e0       	ldi	r23, 0x00	; 0
   14da4:	80 e8       	ldi	r24, 0x80	; 128
   14da6:	99 e1       	ldi	r25, 0x19	; 25
   14da8:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14dac:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14db0:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14db4:	00 a5       	ldd	r16, Z+40	; 0x28
   14db6:	11 a5       	ldd	r17, Z+41	; 0x29
   14db8:	22 a5       	ldd	r18, Z+42	; 0x2a
   14dba:	33 a5       	ldd	r19, Z+43	; 0x2b
   14dbc:	46 e0       	ldi	r20, 0x06	; 6
   14dbe:	50 e0       	ldi	r21, 0x00	; 0
   14dc0:	66 e0       	ldi	r22, 0x06	; 6
   14dc2:	70 e0       	ldi	r23, 0x00	; 0
   14dc4:	80 e8       	ldi	r24, 0x80	; 128
   14dc6:	99 e1       	ldi	r25, 0x19	; 25
   14dc8:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14dcc:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14dd0:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14dd4:	04 a5       	ldd	r16, Z+44	; 0x2c
   14dd6:	10 e0       	ldi	r17, 0x00	; 0
   14dd8:	20 e0       	ldi	r18, 0x00	; 0
   14dda:	30 e0       	ldi	r19, 0x00	; 0
   14ddc:	41 e0       	ldi	r20, 0x01	; 1
   14dde:	50 e0       	ldi	r21, 0x00	; 0
   14de0:	6c e0       	ldi	r22, 0x0C	; 12
   14de2:	70 e0       	ldi	r23, 0x00	; 0
   14de4:	80 e8       	ldi	r24, 0x80	; 128
   14de6:	99 e1       	ldi	r25, 0x19	; 25
   14de8:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14dec:	80 e8       	ldi	r24, 0x80	; 128
   14dee:	99 e1       	ldi	r25, 0x19	; 25
   14df0:	1f 91       	pop	r17
   14df2:	0f 91       	pop	r16
   14df4:	08 95       	ret

00014df6 <SS80_test_extended_status>:
   14df6:	9b 01       	movw	r18, r22
   14df8:	43 e0       	ldi	r20, 0x03	; 3
   14dfa:	35 95       	asr	r19
   14dfc:	27 95       	ror	r18
   14dfe:	4a 95       	dec	r20
   14e00:	e1 f7       	brne	.-8      	; 0x14dfa <SS80_test_extended_status+0x4>
   14e02:	82 0f       	add	r24, r18
   14e04:	93 1f       	adc	r25, r19
   14e06:	67 70       	andi	r22, 0x07	; 7
   14e08:	77 27       	eor	r23, r23
   14e0a:	20 e8       	ldi	r18, 0x80	; 128
   14e0c:	30 e0       	ldi	r19, 0x00	; 0
   14e0e:	02 c0       	rjmp	.+4      	; 0x14e14 <SS80_test_extended_status+0x1e>
   14e10:	35 95       	asr	r19
   14e12:	27 95       	ror	r18
   14e14:	6a 95       	dec	r22
   14e16:	e2 f7       	brpl	.-8      	; 0x14e10 <SS80_test_extended_status+0x1a>
   14e18:	fc 01       	movw	r30, r24
   14e1a:	80 81       	ld	r24, Z
   14e1c:	28 23       	and	r18, r24
   14e1e:	81 e0       	ldi	r24, 0x01	; 1
   14e20:	90 e0       	ldi	r25, 0x00	; 0
   14e22:	11 f4       	brne	.+4      	; 0x14e28 <SS80_test_extended_status+0x32>
   14e24:	80 e0       	ldi	r24, 0x00	; 0
   14e26:	90 e0       	ldi	r25, 0x00	; 0
   14e28:	08 95       	ret

00014e2a <SS80_display_extended_status>:
   14e2a:	6f 92       	push	r6
   14e2c:	7f 92       	push	r7
   14e2e:	8f 92       	push	r8
   14e30:	ef 92       	push	r14
   14e32:	ff 92       	push	r15
   14e34:	0f 93       	push	r16
   14e36:	1f 93       	push	r17
   14e38:	cf 93       	push	r28
   14e3a:	df 93       	push	r29
   14e3c:	ad b7       	in	r26, 0x3d	; 61
   14e3e:	be b7       	in	r27, 0x3e	; 62
   14e40:	17 97       	sbiw	r26, 0x07	; 7
   14e42:	0f b6       	in	r0, 0x3f	; 63
   14e44:	f8 94       	cli
   14e46:	be bf       	out	0x3e, r27	; 62
   14e48:	0f be       	out	0x3f, r0	; 63
   14e4a:	ad bf       	out	0x3d, r26	; 61
   14e4c:	fc 01       	movw	r30, r24
   14e4e:	ac 01       	movw	r20, r24
   14e50:	48 5f       	subi	r20, 0xF8	; 248
   14e52:	5f 4f       	sbci	r21, 0xFF	; 255
   14e54:	20 e0       	ldi	r18, 0x00	; 0
   14e56:	30 e0       	ldi	r19, 0x00	; 0
   14e58:	a1 91       	ld	r26, Z+
   14e5a:	aa 23       	and	r26, r26
   14e5c:	11 f0       	breq	.+4      	; 0x14e62 <SS80_display_extended_status+0x38>
   14e5e:	21 e0       	ldi	r18, 0x01	; 1
   14e60:	30 e0       	ldi	r19, 0x00	; 0
   14e62:	e4 17       	cp	r30, r20
   14e64:	f5 07       	cpc	r31, r21
   14e66:	c1 f7       	brne	.-16     	; 0x14e58 <SS80_display_extended_status+0x2e>
   14e68:	23 2b       	or	r18, r19
   14e6a:	81 f1       	breq	.+96     	; 0x14ecc <SS80_display_extended_status+0xa2>
   14e6c:	ec 01       	movw	r28, r24
   14e6e:	ed b7       	in	r30, 0x3d	; 61
   14e70:	fe b7       	in	r31, 0x3e	; 62
   14e72:	75 83       	std	Z+5, r23	; 0x05
   14e74:	64 83       	std	Z+4, r22	; 0x04
   14e76:	8d e4       	ldi	r24, 0x4D	; 77
   14e78:	97 e2       	ldi	r25, 0x27	; 39
   14e7a:	a0 e0       	ldi	r26, 0x00	; 0
   14e7c:	81 83       	std	Z+1, r24	; 0x01
   14e7e:	92 83       	std	Z+2, r25	; 0x02
   14e80:	a3 83       	std	Z+3, r26	; 0x03
   14e82:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   14e86:	0c e7       	ldi	r16, 0x7C	; 124
   14e88:	12 e0       	ldi	r17, 0x02	; 2
   14e8a:	82 e4       	ldi	r24, 0x42	; 66
   14e8c:	97 e2       	ldi	r25, 0x27	; 39
   14e8e:	3c 01       	movw	r6, r24
   14e90:	81 2c       	mov	r8, r1
   14e92:	f8 01       	movw	r30, r16
   14e94:	e0 80       	ld	r14, Z
   14e96:	f1 80       	ldd	r15, Z+1	; 0x01
   14e98:	ff ef       	ldi	r31, 0xFF	; 255
   14e9a:	ef 16       	cp	r14, r31
   14e9c:	ff 06       	cpc	r15, r31
   14e9e:	b1 f0       	breq	.+44     	; 0x14ecc <SS80_display_extended_status+0xa2>
   14ea0:	b7 01       	movw	r22, r14
   14ea2:	ce 01       	movw	r24, r28
   14ea4:	a8 df       	rcall	.-176    	; 0x14df6 <SS80_test_extended_status>
   14ea6:	89 2b       	or	r24, r25
   14ea8:	71 f0       	breq	.+28     	; 0x14ec6 <SS80_display_extended_status+0x9c>
   14eaa:	f8 01       	movw	r30, r16
   14eac:	82 81       	ldd	r24, Z+2	; 0x02
   14eae:	93 81       	ldd	r25, Z+3	; 0x03
   14eb0:	ed b7       	in	r30, 0x3d	; 61
   14eb2:	fe b7       	in	r31, 0x3e	; 62
   14eb4:	97 83       	std	Z+7, r25	; 0x07
   14eb6:	86 83       	std	Z+6, r24	; 0x06
   14eb8:	f5 82       	std	Z+5, r15	; 0x05
   14eba:	e4 82       	std	Z+4, r14	; 0x04
   14ebc:	61 82       	std	Z+1, r6	; 0x01
   14ebe:	72 82       	std	Z+2, r7	; 0x02
   14ec0:	83 82       	std	Z+3, r8	; 0x03
   14ec2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   14ec6:	0c 5f       	subi	r16, 0xFC	; 252
   14ec8:	1f 4f       	sbci	r17, 0xFF	; 255
   14eca:	e3 cf       	rjmp	.-58     	; 0x14e92 <SS80_display_extended_status+0x68>
   14ecc:	ad b7       	in	r26, 0x3d	; 61
   14ece:	be b7       	in	r27, 0x3e	; 62
   14ed0:	17 96       	adiw	r26, 0x07	; 7
   14ed2:	0f b6       	in	r0, 0x3f	; 63
   14ed4:	f8 94       	cli
   14ed6:	be bf       	out	0x3e, r27	; 62
   14ed8:	0f be       	out	0x3f, r0	; 63
   14eda:	ad bf       	out	0x3d, r26	; 61
   14edc:	df 91       	pop	r29
   14ede:	cf 91       	pop	r28
   14ee0:	1f 91       	pop	r17
   14ee2:	0f 91       	pop	r16
   14ee4:	ff 90       	pop	r15
   14ee6:	ef 90       	pop	r14
   14ee8:	8f 90       	pop	r8
   14eea:	7f 90       	pop	r7
   14eec:	6f 90       	pop	r6
   14eee:	08 95       	ret

00014ef0 <SS80_send_status>:
   14ef0:	a9 e1       	ldi	r26, 0x19	; 25
   14ef2:	b0 e0       	ldi	r27, 0x00	; 0
   14ef4:	ee e7       	ldi	r30, 0x7E	; 126
   14ef6:	f7 ea       	ldi	r31, 0xA7	; 167
   14ef8:	0c 94 bf e6 	jmp	0x1cd7e	; 0x1cd7e <__prologue_saves__+0x18>
   14efc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f00:	85 ff       	sbrs	r24, 5
   14f02:	0a c0       	rjmp	.+20     	; 0x14f18 <SS80_send_status+0x28>
   14f04:	8e e2       	ldi	r24, 0x2E	; 46
   14f06:	97 e2       	ldi	r25, 0x27	; 39
   14f08:	a0 e0       	ldi	r26, 0x00	; 0
   14f0a:	ed b7       	in	r30, 0x3d	; 61
   14f0c:	fe b7       	in	r31, 0x3e	; 62
   14f0e:	81 83       	std	Z+1, r24	; 0x01
   14f10:	92 83       	std	Z+2, r25	; 0x02
   14f12:	a3 83       	std	Z+3, r26	; 0x03
   14f14:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   14f18:	ce 01       	movw	r24, r28
   14f1a:	04 96       	adiw	r24, 0x04	; 4
   14f1c:	7c 01       	movw	r14, r24
   14f1e:	84 e1       	ldi	r24, 0x14	; 20
   14f20:	f7 01       	movw	r30, r14
   14f22:	11 92       	st	Z+, r1
   14f24:	8a 95       	dec	r24
   14f26:	e9 f7       	brne	.-6      	; 0x14f22 <SS80_send_status+0x32>
   14f28:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   14f2c:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   14f30:	86 81       	ldd	r24, Z+6	; 0x06
   14f32:	20 e1       	ldi	r18, 0x10	; 16
   14f34:	82 9f       	mul	r24, r18
   14f36:	c0 01       	movw	r24, r0
   14f38:	11 24       	eor	r1, r1
   14f3a:	95 81       	ldd	r25, Z+5	; 0x05
   14f3c:	9f 70       	andi	r25, 0x0F	; 15
   14f3e:	89 2b       	or	r24, r25
   14f40:	8c 83       	std	Y+4, r24	; 0x04
   14f42:	8f ef       	ldi	r24, 0xFF	; 255
   14f44:	8d 83       	std	Y+5, r24	; 0x05
   14f46:	83 81       	ldd	r24, Z+3	; 0x03
   14f48:	86 ff       	sbrs	r24, 6
   14f4a:	02 c0       	rjmp	.+4      	; 0x14f50 <SS80_send_status+0x60>
   14f4c:	92 e0       	ldi	r25, 0x02	; 2
   14f4e:	9e 83       	std	Y+6, r25	; 0x06
   14f50:	82 ff       	sbrs	r24, 2
   14f52:	03 c0       	rjmp	.+6      	; 0x14f5a <SS80_send_status+0x6a>
   14f54:	9e 81       	ldd	r25, Y+6	; 0x06
   14f56:	91 60       	ori	r25, 0x01	; 1
   14f58:	9e 83       	std	Y+6, r25	; 0x06
   14f5a:	80 ff       	sbrs	r24, 0
   14f5c:	02 c0       	rjmp	.+4      	; 0x14f62 <SS80_send_status+0x72>
   14f5e:	82 e0       	ldi	r24, 0x02	; 2
   14f60:	88 87       	std	Y+8, r24	; 0x08
   14f62:	83 81       	ldd	r24, Z+3	; 0x03
   14f64:	81 ff       	sbrs	r24, 1
   14f66:	03 c0       	rjmp	.+6      	; 0x14f6e <SS80_send_status+0x7e>
   14f68:	88 85       	ldd	r24, Y+8	; 0x08
   14f6a:	82 60       	ori	r24, 0x02	; 2
   14f6c:	88 87       	std	Y+8, r24	; 0x08
   14f6e:	83 81       	ldd	r24, Z+3	; 0x03
   14f70:	83 ff       	sbrs	r24, 3
   14f72:	02 c0       	rjmp	.+4      	; 0x14f78 <SS80_send_status+0x88>
   14f74:	88 e0       	ldi	r24, 0x08	; 8
   14f76:	8a 87       	std	Y+10, r24	; 0x0a
   14f78:	83 81       	ldd	r24, Z+3	; 0x03
   14f7a:	94 81       	ldd	r25, Z+4	; 0x04
   14f7c:	89 2b       	or	r24, r25
   14f7e:	59 f4       	brne	.+22     	; 0x14f96 <SS80_send_status+0xa6>
   14f80:	07 81       	ldd	r16, Z+7	; 0x07
   14f82:	10 85       	ldd	r17, Z+8	; 0x08
   14f84:	21 85       	ldd	r18, Z+9	; 0x09
   14f86:	32 85       	ldd	r19, Z+10	; 0x0a
   14f88:	46 e0       	ldi	r20, 0x06	; 6
   14f8a:	50 e0       	ldi	r21, 0x00	; 0
   14f8c:	6a e0       	ldi	r22, 0x0A	; 10
   14f8e:	70 e0       	ldi	r23, 0x00	; 0
   14f90:	c7 01       	movw	r24, r14
   14f92:	0e 94 12 c0 	call	0x18024	; 0x18024 <V2B_MSB>
   14f96:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   14f9a:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   14f9e:	83 81       	ldd	r24, Z+3	; 0x03
   14fa0:	94 81       	ldd	r25, Z+4	; 0x04
   14fa2:	89 2b       	or	r24, r25
   14fa4:	11 f0       	breq	.+4      	; 0x14faa <SS80_send_status+0xba>
   14fa6:	81 e0       	ldi	r24, 0x01	; 1
   14fa8:	82 83       	std	Z+2, r24	; 0x02
   14faa:	80 e0       	ldi	r24, 0x00	; 0
   14fac:	91 e0       	ldi	r25, 0x01	; 1
   14fae:	99 8f       	std	Y+25, r25	; 0x19
   14fb0:	88 8f       	std	Y+24, r24	; 0x18
   14fb2:	ae 01       	movw	r20, r28
   14fb4:	48 5e       	subi	r20, 0xE8	; 232
   14fb6:	5f 4f       	sbci	r21, 0xFF	; 255
   14fb8:	64 e1       	ldi	r22, 0x14	; 20
   14fba:	70 e0       	ldi	r23, 0x00	; 0
   14fbc:	c7 01       	movw	r24, r14
   14fbe:	0e 94 53 8b 	call	0x116a6	; 0x116a6 <gpib_write_str>
   14fc2:	44 97       	sbiw	r24, 0x14	; 20
   14fc4:	71 f0       	breq	.+28     	; 0x14fe2 <SS80_send_status+0xf2>
   14fc6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14fca:	80 ff       	sbrs	r24, 0
   14fcc:	0a c0       	rjmp	.+20     	; 0x14fe2 <SS80_send_status+0xf2>
   14fce:	83 e1       	ldi	r24, 0x13	; 19
   14fd0:	97 e2       	ldi	r25, 0x27	; 39
   14fd2:	a0 e0       	ldi	r26, 0x00	; 0
   14fd4:	ed b7       	in	r30, 0x3d	; 61
   14fd6:	fe b7       	in	r31, 0x3e	; 62
   14fd8:	81 83       	std	Z+1, r24	; 0x01
   14fda:	92 83       	std	Z+2, r25	; 0x02
   14fdc:	a3 83       	std	Z+3, r26	; 0x03
   14fde:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   14fe2:	88 8d       	ldd	r24, Y+24	; 0x18
   14fe4:	99 8d       	ldd	r25, Y+25	; 0x19
   14fe6:	88 27       	eor	r24, r24
   14fe8:	90 7d       	andi	r25, 0xD0	; 208
   14fea:	69 96       	adiw	r28, 0x19	; 25
   14fec:	e6 e0       	ldi	r30, 0x06	; 6
   14fee:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

00014ff2 <SS80_describe>:
   14ff2:	a7 e0       	ldi	r26, 0x07	; 7
   14ff4:	b0 e0       	ldi	r27, 0x00	; 0
   14ff6:	ef ef       	ldi	r30, 0xFF	; 255
   14ff8:	f7 ea       	ldi	r31, 0xA7	; 167
   14ffa:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
   14ffe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15002:	85 ff       	sbrs	r24, 5
   15004:	0a c0       	rjmp	.+20     	; 0x1501a <SS80_describe+0x28>
   15006:	82 e0       	ldi	r24, 0x02	; 2
   15008:	97 e2       	ldi	r25, 0x27	; 39
   1500a:	a0 e0       	ldi	r26, 0x00	; 0
   1500c:	ed b7       	in	r30, 0x3d	; 61
   1500e:	fe b7       	in	r31, 0x3e	; 62
   15010:	81 83       	std	Z+1, r24	; 0x01
   15012:	92 83       	std	Z+2, r25	; 0x02
   15014:	a3 83       	std	Z+3, r26	; 0x03
   15016:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1501a:	1f 82       	std	Y+7, r1	; 0x07
   1501c:	1e 82       	std	Y+6, r1	; 0x06
   1501e:	ce 01       	movw	r24, r28
   15020:	04 96       	adiw	r24, 0x04	; 4
   15022:	85 dd       	rcall	.-1270   	; 0x14b2e <SS80ControllerPack>
   15024:	6c 81       	ldd	r22, Y+4	; 0x04
   15026:	7d 81       	ldd	r23, Y+5	; 0x05
   15028:	ae 01       	movw	r20, r28
   1502a:	4a 5f       	subi	r20, 0xFA	; 250
   1502c:	5f 4f       	sbci	r21, 0xFF	; 255
   1502e:	0e 94 53 8b 	call	0x116a6	; 0x116a6 <gpib_write_str>
   15032:	2c 81       	ldd	r18, Y+4	; 0x04
   15034:	3d 81       	ldd	r19, Y+5	; 0x05
   15036:	82 17       	cp	r24, r18
   15038:	93 07       	cpc	r25, r19
   1503a:	39 f0       	breq	.+14     	; 0x1504a <SS80_describe+0x58>
   1503c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15040:	80 ff       	sbrs	r24, 0
   15042:	3c c0       	rjmp	.+120    	; 0x150bc <SS80_describe+0xca>
   15044:	8f ed       	ldi	r24, 0xDF	; 223
   15046:	96 e2       	ldi	r25, 0x26	; 38
   15048:	31 c0       	rjmp	.+98     	; 0x150ac <SS80_describe+0xba>
   1504a:	1f 82       	std	Y+7, r1	; 0x07
   1504c:	1e 82       	std	Y+6, r1	; 0x06
   1504e:	ce 01       	movw	r24, r28
   15050:	04 96       	adiw	r24, 0x04	; 4
   15052:	a9 dd       	rcall	.-1198   	; 0x14ba6 <SS80UnitPack>
   15054:	6c 81       	ldd	r22, Y+4	; 0x04
   15056:	7d 81       	ldd	r23, Y+5	; 0x05
   15058:	ae 01       	movw	r20, r28
   1505a:	4a 5f       	subi	r20, 0xFA	; 250
   1505c:	5f 4f       	sbci	r21, 0xFF	; 255
   1505e:	0e 94 53 8b 	call	0x116a6	; 0x116a6 <gpib_write_str>
   15062:	2c 81       	ldd	r18, Y+4	; 0x04
   15064:	3d 81       	ldd	r19, Y+5	; 0x05
   15066:	82 17       	cp	r24, r18
   15068:	93 07       	cpc	r25, r19
   1506a:	39 f0       	breq	.+14     	; 0x1507a <SS80_describe+0x88>
   1506c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15070:	80 ff       	sbrs	r24, 0
   15072:	24 c0       	rjmp	.+72     	; 0x150bc <SS80_describe+0xca>
   15074:	82 ec       	ldi	r24, 0xC2	; 194
   15076:	96 e2       	ldi	r25, 0x26	; 38
   15078:	19 c0       	rjmp	.+50     	; 0x150ac <SS80_describe+0xba>
   1507a:	80 e0       	ldi	r24, 0x00	; 0
   1507c:	91 e0       	ldi	r25, 0x01	; 1
   1507e:	9f 83       	std	Y+7, r25	; 0x07
   15080:	8e 83       	std	Y+6, r24	; 0x06
   15082:	ce 01       	movw	r24, r28
   15084:	04 96       	adiw	r24, 0x04	; 4
   15086:	5b de       	rcall	.-842    	; 0x14d3e <SS80VolumePack>
   15088:	6c 81       	ldd	r22, Y+4	; 0x04
   1508a:	7d 81       	ldd	r23, Y+5	; 0x05
   1508c:	ae 01       	movw	r20, r28
   1508e:	4a 5f       	subi	r20, 0xFA	; 250
   15090:	5f 4f       	sbci	r21, 0xFF	; 255
   15092:	0e 94 53 8b 	call	0x116a6	; 0x116a6 <gpib_write_str>
   15096:	2c 81       	ldd	r18, Y+4	; 0x04
   15098:	3d 81       	ldd	r19, Y+5	; 0x05
   1509a:	82 17       	cp	r24, r18
   1509c:	93 07       	cpc	r25, r19
   1509e:	99 f0       	breq	.+38     	; 0x150c6 <SS80_describe+0xd4>
   150a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150a4:	80 ff       	sbrs	r24, 0
   150a6:	0a c0       	rjmp	.+20     	; 0x150bc <SS80_describe+0xca>
   150a8:	83 ea       	ldi	r24, 0xA3	; 163
   150aa:	96 e2       	ldi	r25, 0x26	; 38
   150ac:	a0 e0       	ldi	r26, 0x00	; 0
   150ae:	ed b7       	in	r30, 0x3d	; 61
   150b0:	fe b7       	in	r31, 0x3e	; 62
   150b2:	81 83       	std	Z+1, r24	; 0x01
   150b4:	92 83       	std	Z+2, r25	; 0x02
   150b6:	a3 83       	std	Z+3, r26	; 0x03
   150b8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   150bc:	8e 81       	ldd	r24, Y+6	; 0x06
   150be:	9f 81       	ldd	r25, Y+7	; 0x07
   150c0:	88 27       	eor	r24, r24
   150c2:	90 7d       	andi	r25, 0xD0	; 208
   150c4:	02 c0       	rjmp	.+4      	; 0x150ca <SS80_describe+0xd8>
   150c6:	80 e0       	ldi	r24, 0x00	; 0
   150c8:	90 e0       	ldi	r25, 0x00	; 0
   150ca:	27 96       	adiw	r28, 0x07	; 7
   150cc:	e2 e0       	ldi	r30, 0x02	; 2
   150ce:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

000150d2 <SS80_Check_Unit>:
   150d2:	00 d0       	rcall	.+0      	; 0x150d4 <SS80_Check_Unit+0x2>
   150d4:	00 d0       	rcall	.+0      	; 0x150d6 <SS80_Check_Unit+0x4>
   150d6:	1f 92       	push	r1
   150d8:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   150dc:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   150e0:	88 23       	and	r24, r24
   150e2:	c9 f0       	breq	.+50     	; 0x15116 <SS80_Check_Unit+0x44>
   150e4:	8f 30       	cpi	r24, 0x0F	; 15
   150e6:	b9 f0       	breq	.+46     	; 0x15116 <SS80_Check_Unit+0x44>
   150e8:	23 81       	ldd	r18, Z+3	; 0x03
   150ea:	34 81       	ldd	r19, Z+4	; 0x04
   150ec:	20 64       	ori	r18, 0x40	; 64
   150ee:	34 83       	std	Z+4, r19	; 0x04
   150f0:	23 83       	std	Z+3, r18	; 0x03
   150f2:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   150f6:	90 ff       	sbrs	r25, 0
   150f8:	0f c0       	rjmp	.+30     	; 0x15118 <SS80_Check_Unit+0x46>
   150fa:	90 e0       	ldi	r25, 0x00	; 0
   150fc:	ed b7       	in	r30, 0x3d	; 61
   150fe:	fe b7       	in	r31, 0x3e	; 62
   15100:	95 83       	std	Z+5, r25	; 0x05
   15102:	84 83       	std	Z+4, r24	; 0x04
   15104:	8b e8       	ldi	r24, 0x8B	; 139
   15106:	96 e2       	ldi	r25, 0x26	; 38
   15108:	a0 e0       	ldi	r26, 0x00	; 0
   1510a:	81 83       	std	Z+1, r24	; 0x01
   1510c:	92 83       	std	Z+2, r25	; 0x02
   1510e:	a3 83       	std	Z+3, r26	; 0x03
   15110:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15114:	01 c0       	rjmp	.+2      	; 0x15118 <SS80_Check_Unit+0x46>
   15116:	85 83       	std	Z+5, r24	; 0x05
   15118:	0f 90       	pop	r0
   1511a:	0f 90       	pop	r0
   1511c:	0f 90       	pop	r0
   1511e:	0f 90       	pop	r0
   15120:	0f 90       	pop	r0
   15122:	08 95       	ret

00015124 <SS80_Check_Volume>:
   15124:	00 d0       	rcall	.+0      	; 0x15126 <SS80_Check_Volume+0x2>
   15126:	00 d0       	rcall	.+0      	; 0x15128 <SS80_Check_Volume+0x4>
   15128:	1f 92       	push	r1
   1512a:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   1512e:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15132:	88 23       	and	r24, r24
   15134:	b9 f0       	breq	.+46     	; 0x15164 <SS80_Check_Volume+0x40>
   15136:	23 81       	ldd	r18, Z+3	; 0x03
   15138:	34 81       	ldd	r19, Z+4	; 0x04
   1513a:	20 64       	ori	r18, 0x40	; 64
   1513c:	34 83       	std	Z+4, r19	; 0x04
   1513e:	23 83       	std	Z+3, r18	; 0x03
   15140:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   15144:	90 ff       	sbrs	r25, 0
   15146:	0f c0       	rjmp	.+30     	; 0x15166 <SS80_Check_Volume+0x42>
   15148:	90 e0       	ldi	r25, 0x00	; 0
   1514a:	ed b7       	in	r30, 0x3d	; 61
   1514c:	fe b7       	in	r31, 0x3e	; 62
   1514e:	95 83       	std	Z+5, r25	; 0x05
   15150:	84 83       	std	Z+4, r24	; 0x04
   15152:	81 e7       	ldi	r24, 0x71	; 113
   15154:	96 e2       	ldi	r25, 0x26	; 38
   15156:	a0 e0       	ldi	r26, 0x00	; 0
   15158:	81 83       	std	Z+1, r24	; 0x01
   1515a:	92 83       	std	Z+2, r25	; 0x02
   1515c:	a3 83       	std	Z+3, r26	; 0x03
   1515e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15162:	01 c0       	rjmp	.+2      	; 0x15166 <SS80_Check_Volume+0x42>
   15164:	16 82       	std	Z+6, r1	; 0x06
   15166:	0f 90       	pop	r0
   15168:	0f 90       	pop	r0
   1516a:	0f 90       	pop	r0
   1516c:	0f 90       	pop	r0
   1516e:	0f 90       	pop	r0
   15170:	08 95       	ret

00015172 <SS80_Command_State>:
   15172:	2f 92       	push	r2
   15174:	3f 92       	push	r3
   15176:	4f 92       	push	r4
   15178:	6f 92       	push	r6
   1517a:	7f 92       	push	r7
   1517c:	8f 92       	push	r8
   1517e:	af 92       	push	r10
   15180:	bf 92       	push	r11
   15182:	cf 92       	push	r12
   15184:	ef 92       	push	r14
   15186:	ff 92       	push	r15
   15188:	0f 93       	push	r16
   1518a:	1f 93       	push	r17
   1518c:	cf 93       	push	r28
   1518e:	df 93       	push	r29
   15190:	cd b7       	in	r28, 0x3d	; 61
   15192:	de b7       	in	r29, 0x3e	; 62
   15194:	66 97       	sbiw	r28, 0x16	; 22
   15196:	0f b6       	in	r0, 0x3f	; 63
   15198:	f8 94       	cli
   1519a:	de bf       	out	0x3e, r29	; 62
   1519c:	0f be       	out	0x3f, r0	; 63
   1519e:	cd bf       	out	0x3d, r28	; 61
   151a0:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   151a4:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   151a8:	81 81       	ldd	r24, Z+1	; 0x01
   151aa:	90 e0       	ldi	r25, 0x00	; 0
   151ac:	0e 94 59 86 	call	0x10cb2	; 0x10cb2 <gpib_disable_PPR>
   151b0:	80 e0       	ldi	r24, 0x00	; 0
   151b2:	91 e0       	ldi	r25, 0x01	; 1
   151b4:	99 87       	std	Y+9, r25	; 0x09
   151b6:	88 87       	std	Y+8, r24	; 0x08
   151b8:	ae 01       	movw	r20, r28
   151ba:	48 5f       	subi	r20, 0xF8	; 248
   151bc:	5f 4f       	sbci	r21, 0xFF	; 255
   151be:	60 e0       	ldi	r22, 0x00	; 0
   151c0:	72 e0       	ldi	r23, 0x02	; 2
   151c2:	82 ef       	ldi	r24, 0xF2	; 242
   151c4:	9c e1       	ldi	r25, 0x1C	; 28
   151c6:	0e 94 b1 8a 	call	0x11562	; 0x11562 <gpib_read_str>
   151ca:	9b 87       	std	Y+11, r25	; 0x0b
   151cc:	8a 87       	std	Y+10, r24	; 0x0a
   151ce:	88 85       	ldd	r24, Y+8	; 0x08
   151d0:	99 85       	ldd	r25, Y+9	; 0x09
   151d2:	9c 01       	movw	r18, r24
   151d4:	22 27       	eor	r18, r18
   151d6:	30 7d       	andi	r19, 0xD0	; 208
   151d8:	23 2b       	or	r18, r19
   151da:	79 f0       	breq	.+30     	; 0x151fa <SS80_Command_State+0x88>
   151dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   151e0:	80 ff       	sbrs	r24, 0
   151e2:	21 c2       	rjmp	.+1090   	; 0x15626 <SS80_Command_State+0x4b4>
   151e4:	8b e4       	ldi	r24, 0x4B	; 75
   151e6:	96 e2       	ldi	r25, 0x26	; 38
   151e8:	a0 e0       	ldi	r26, 0x00	; 0
   151ea:	ed b7       	in	r30, 0x3d	; 61
   151ec:	fe b7       	in	r31, 0x3e	; 62
   151ee:	81 83       	std	Z+1, r24	; 0x01
   151f0:	92 83       	std	Z+2, r25	; 0x02
   151f2:	a3 83       	std	Z+3, r26	; 0x03
   151f4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   151f8:	16 c2       	rjmp	.+1068   	; 0x15626 <SS80_Command_State+0x4b4>
   151fa:	2a 85       	ldd	r18, Y+10	; 0x0a
   151fc:	3b 85       	ldd	r19, Y+11	; 0x0b
   151fe:	23 2b       	or	r18, r19
   15200:	09 f4       	brne	.+2      	; 0x15204 <SS80_Command_State+0x92>
   15202:	16 c2       	rjmp	.+1068   	; 0x15630 <SS80_Command_State+0x4be>
   15204:	90 fd       	sbrc	r25, 0
   15206:	0e c0       	rjmp	.+28     	; 0x15224 <SS80_Command_State+0xb2>
   15208:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1520c:	80 ff       	sbrs	r24, 0
   1520e:	0a c0       	rjmp	.+20     	; 0x15224 <SS80_Command_State+0xb2>
   15210:	82 e3       	ldi	r24, 0x32	; 50
   15212:	96 e2       	ldi	r25, 0x26	; 38
   15214:	a0 e0       	ldi	r26, 0x00	; 0
   15216:	ed b7       	in	r30, 0x3d	; 61
   15218:	fe b7       	in	r31, 0x3e	; 62
   1521a:	81 83       	std	Z+1, r24	; 0x01
   1521c:	92 83       	std	Z+2, r25	; 0x02
   1521e:	a3 83       	std	Z+3, r26	; 0x03
   15220:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15224:	e1 2c       	mov	r14, r1
   15226:	f1 2c       	mov	r15, r1
   15228:	86 e3       	ldi	r24, 0x36	; 54
   1522a:	95 e2       	ldi	r25, 0x25	; 37
   1522c:	9c 01       	movw	r18, r24
   1522e:	40 e0       	ldi	r20, 0x00	; 0
   15230:	2e 87       	std	Y+14, r18	; 0x0e
   15232:	3f 87       	std	Y+15, r19	; 0x0f
   15234:	48 8b       	std	Y+16, r20	; 0x10
   15236:	8b e5       	ldi	r24, 0x5B	; 91
   15238:	95 e2       	ldi	r25, 0x25	; 37
   1523a:	9c 01       	movw	r18, r24
   1523c:	40 e0       	ldi	r20, 0x00	; 0
   1523e:	29 8b       	std	Y+17, r18	; 0x11
   15240:	3a 8b       	std	Y+18, r19	; 0x12
   15242:	4b 8b       	std	Y+19, r20	; 0x13
   15244:	85 e7       	ldi	r24, 0x75	; 117
   15246:	95 e2       	ldi	r25, 0x25	; 37
   15248:	9c 01       	movw	r18, r24
   1524a:	40 e0       	ldi	r20, 0x00	; 0
   1524c:	2c 8b       	std	Y+20, r18	; 0x14
   1524e:	3d 8b       	std	Y+21, r19	; 0x15
   15250:	4e 8b       	std	Y+22, r20	; 0x16
   15252:	8b e8       	ldi	r24, 0x8B	; 139
   15254:	95 e2       	ldi	r25, 0x25	; 37
   15256:	3c 01       	movw	r6, r24
   15258:	81 2c       	mov	r8, r1
   1525a:	89 e9       	ldi	r24, 0x99	; 153
   1525c:	95 e2       	ldi	r25, 0x25	; 37
   1525e:	5c 01       	movw	r10, r24
   15260:	c1 2c       	mov	r12, r1
   15262:	85 eb       	ldi	r24, 0xB5	; 181
   15264:	95 e2       	ldi	r25, 0x25	; 37
   15266:	1c 01       	movw	r2, r24
   15268:	41 2c       	mov	r4, r1
   1526a:	2a 85       	ldd	r18, Y+10	; 0x0a
   1526c:	3b 85       	ldd	r19, Y+11	; 0x0b
   1526e:	87 01       	movw	r16, r14
   15270:	e2 16       	cp	r14, r18
   15272:	f3 06       	cpc	r15, r19
   15274:	0c f0       	brlt	.+2      	; 0x15278 <SS80_Command_State+0x106>
   15276:	b6 c1       	rjmp	.+876    	; 0x155e4 <SS80_Command_State+0x472>
   15278:	0f 5f       	subi	r16, 0xFF	; 255
   1527a:	1f 4f       	sbci	r17, 0xFF	; 255
   1527c:	f7 01       	movw	r30, r14
   1527e:	ee 50       	subi	r30, 0x0E	; 14
   15280:	f3 4e       	sbci	r31, 0xE3	; 227
   15282:	80 81       	ld	r24, Z
   15284:	28 2f       	mov	r18, r24
   15286:	30 e0       	ldi	r19, 0x00	; 0
   15288:	a9 01       	movw	r20, r18
   1528a:	40 52       	subi	r20, 0x20	; 32
   1528c:	51 09       	sbc	r21, r1
   1528e:	40 31       	cpi	r20, 0x10	; 16
   15290:	51 05       	cpc	r21, r1
   15292:	98 f4       	brcc	.+38     	; 0x152ba <SS80_Command_State+0x148>
   15294:	80 52       	subi	r24, 0x20	; 32
   15296:	1d df       	rcall	.-454    	; 0x150d2 <SS80_Check_Unit>
   15298:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1529c:	85 ff       	sbrs	r24, 5
   1529e:	a0 c1       	rjmp	.+832    	; 0x155e0 <SS80_Command_State+0x46e>
   152a0:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   152a4:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   152a8:	85 81       	ldd	r24, Z+5	; 0x05
   152aa:	90 e0       	ldi	r25, 0x00	; 0
   152ac:	ed b7       	in	r30, 0x3d	; 61
   152ae:	fe b7       	in	r31, 0x3e	; 62
   152b0:	95 83       	std	Z+5, r25	; 0x05
   152b2:	84 83       	std	Z+4, r24	; 0x04
   152b4:	8c e1       	ldi	r24, 0x1C	; 28
   152b6:	96 e2       	ldi	r25, 0x26	; 38
   152b8:	19 c0       	rjmp	.+50     	; 0x152ec <SS80_Command_State+0x17a>
   152ba:	a9 01       	movw	r20, r18
   152bc:	40 54       	subi	r20, 0x40	; 64
   152be:	51 09       	sbc	r21, r1
   152c0:	40 31       	cpi	r20, 0x10	; 16
   152c2:	51 05       	cpc	r21, r1
   152c4:	d0 f4       	brcc	.+52     	; 0x152fa <SS80_Command_State+0x188>
   152c6:	80 54       	subi	r24, 0x40	; 64
   152c8:	2d df       	rcall	.-422    	; 0x15124 <SS80_Check_Volume>
   152ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152ce:	85 ff       	sbrs	r24, 5
   152d0:	87 c1       	rjmp	.+782    	; 0x155e0 <SS80_Command_State+0x46e>
   152d2:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   152d6:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   152da:	86 81       	ldd	r24, Z+6	; 0x06
   152dc:	90 e0       	ldi	r25, 0x00	; 0
   152de:	ed b7       	in	r30, 0x3d	; 61
   152e0:	fe b7       	in	r31, 0x3e	; 62
   152e2:	95 83       	std	Z+5, r25	; 0x05
   152e4:	84 83       	std	Z+4, r24	; 0x04
   152e6:	23 e0       	ldi	r18, 0x03	; 3
   152e8:	36 e2       	ldi	r19, 0x26	; 38
   152ea:	c9 01       	movw	r24, r18
   152ec:	a0 e0       	ldi	r26, 0x00	; 0
   152ee:	81 83       	std	Z+1, r24	; 0x01
   152f0:	92 83       	std	Z+2, r25	; 0x02
   152f2:	a3 83       	std	Z+3, r26	; 0x03
   152f4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   152f8:	73 c1       	rjmp	.+742    	; 0x155e0 <SS80_Command_State+0x46e>
   152fa:	21 15       	cp	r18, r1
   152fc:	31 05       	cpc	r19, r1
   152fe:	79 f4       	brne	.+30     	; 0x1531e <SS80_Command_State+0x1ac>
   15300:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15304:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15308:	81 e0       	ldi	r24, 0x01	; 1
   1530a:	90 e0       	ldi	r25, 0x00	; 0
   1530c:	91 83       	std	Z+1, r25	; 0x01
   1530e:	80 83       	st	Z, r24
   15310:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15314:	85 ff       	sbrs	r24, 5
   15316:	66 c1       	rjmp	.+716    	; 0x155e4 <SS80_Command_State+0x472>
   15318:	8b ee       	ldi	r24, 0xEB	; 235
   1531a:	95 e2       	ldi	r25, 0x25	; 37
   1531c:	0f c0       	rjmp	.+30     	; 0x1533c <SS80_Command_State+0x1ca>
   1531e:	22 30       	cpi	r18, 0x02	; 2
   15320:	31 05       	cpc	r19, r1
   15322:	a9 f4       	brne	.+42     	; 0x1534e <SS80_Command_State+0x1dc>
   15324:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15328:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   1532c:	31 83       	std	Z+1, r19	; 0x01
   1532e:	20 83       	st	Z, r18
   15330:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15334:	85 ff       	sbrs	r24, 5
   15336:	56 c1       	rjmp	.+684    	; 0x155e4 <SS80_Command_State+0x472>
   15338:	82 ed       	ldi	r24, 0xD2	; 210
   1533a:	95 e2       	ldi	r25, 0x25	; 37
   1533c:	a0 e0       	ldi	r26, 0x00	; 0
   1533e:	ed b7       	in	r30, 0x3d	; 61
   15340:	fe b7       	in	r31, 0x3e	; 62
   15342:	81 83       	std	Z+1, r24	; 0x01
   15344:	92 83       	std	Z+2, r25	; 0x02
   15346:	a3 83       	std	Z+3, r26	; 0x03
   15348:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1534c:	4b c1       	rjmp	.+662    	; 0x155e4 <SS80_Command_State+0x472>
   1534e:	20 31       	cpi	r18, 0x10	; 16
   15350:	31 05       	cpc	r19, r1
   15352:	b1 f5       	brne	.+108    	; 0x153c0 <SS80_Command_State+0x24e>
   15354:	20 91 6e 19 	lds	r18, 0x196E	; 0x80196e <SS80s>
   15358:	30 91 6f 19 	lds	r19, 0x196F	; 0x80196f <SS80s+0x1>
   1535c:	3d 87       	std	Y+13, r19	; 0x0d
   1535e:	2c 87       	std	Y+12, r18	; 0x0c
   15360:	46 e0       	ldi	r20, 0x06	; 6
   15362:	50 e0       	ldi	r21, 0x00	; 0
   15364:	b8 01       	movw	r22, r16
   15366:	82 ef       	ldi	r24, 0xF2	; 242
   15368:	9c e1       	ldi	r25, 0x1C	; 28
   1536a:	0e 94 3b c0 	call	0x18076	; 0x18076 <B2V_MSB>
   1536e:	ec 85       	ldd	r30, Y+12	; 0x0c
   15370:	fd 85       	ldd	r31, Y+13	; 0x0d
   15372:	67 83       	std	Z+7, r22	; 0x07
   15374:	70 87       	std	Z+8, r23	; 0x08
   15376:	81 87       	std	Z+9, r24	; 0x09
   15378:	92 87       	std	Z+10, r25	; 0x0a
   1537a:	87 01       	movw	r16, r14
   1537c:	09 5f       	subi	r16, 0xF9	; 249
   1537e:	1f 4f       	sbci	r17, 0xFF	; 255
   15380:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15384:	85 ff       	sbrs	r24, 5
   15386:	2c c1       	rjmp	.+600    	; 0x155e0 <SS80_Command_State+0x46e>
   15388:	20 91 6e 19 	lds	r18, 0x196E	; 0x80196e <SS80s>
   1538c:	30 91 6f 19 	lds	r19, 0x196F	; 0x80196f <SS80s+0x1>
   15390:	80 91 70 19 	lds	r24, 0x1970	; 0x801970 <SS80p>
   15394:	90 91 71 19 	lds	r25, 0x1971	; 0x801971 <SS80p+0x1>
   15398:	fc 01       	movw	r30, r24
   1539a:	a2 89       	ldd	r26, Z+18	; 0x12
   1539c:	b3 89       	ldd	r27, Z+19	; 0x13
   1539e:	f9 01       	movw	r30, r18
   153a0:	27 81       	ldd	r18, Z+7	; 0x07
   153a2:	30 85       	ldd	r19, Z+8	; 0x08
   153a4:	41 85       	ldd	r20, Z+9	; 0x09
   153a6:	52 85       	ldd	r21, Z+10	; 0x0a
   153a8:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__muluhisi3>
   153ac:	ed b7       	in	r30, 0x3d	; 61
   153ae:	fe b7       	in	r31, 0x3e	; 62
   153b0:	64 83       	std	Z+4, r22	; 0x04
   153b2:	75 83       	std	Z+5, r23	; 0x05
   153b4:	86 83       	std	Z+6, r24	; 0x06
   153b6:	97 83       	std	Z+7, r25	; 0x07
   153b8:	21 82       	std	Z+1, r2	; 0x01
   153ba:	32 82       	std	Z+2, r3	; 0x02
   153bc:	43 82       	std	Z+3, r4	; 0x03
   153be:	2e c0       	rjmp	.+92     	; 0x1541c <SS80_Command_State+0x2aa>
   153c0:	28 31       	cpi	r18, 0x18	; 24
   153c2:	31 05       	cpc	r19, r1
   153c4:	71 f5       	brne	.+92     	; 0x15422 <SS80_Command_State+0x2b0>
   153c6:	20 91 6e 19 	lds	r18, 0x196E	; 0x80196e <SS80s>
   153ca:	30 91 6f 19 	lds	r19, 0x196F	; 0x80196f <SS80s+0x1>
   153ce:	3d 87       	std	Y+13, r19	; 0x0d
   153d0:	2c 87       	std	Y+12, r18	; 0x0c
   153d2:	44 e0       	ldi	r20, 0x04	; 4
   153d4:	50 e0       	ldi	r21, 0x00	; 0
   153d6:	b8 01       	movw	r22, r16
   153d8:	82 ef       	ldi	r24, 0xF2	; 242
   153da:	9c e1       	ldi	r25, 0x1C	; 28
   153dc:	0e 94 3b c0 	call	0x18076	; 0x18076 <B2V_MSB>
   153e0:	ec 85       	ldd	r30, Y+12	; 0x0c
   153e2:	fd 85       	ldd	r31, Y+13	; 0x0d
   153e4:	63 87       	std	Z+11, r22	; 0x0b
   153e6:	74 87       	std	Z+12, r23	; 0x0c
   153e8:	85 87       	std	Z+13, r24	; 0x0d
   153ea:	96 87       	std	Z+14, r25	; 0x0e
   153ec:	87 01       	movw	r16, r14
   153ee:	0b 5f       	subi	r16, 0xFB	; 251
   153f0:	1f 4f       	sbci	r17, 0xFF	; 255
   153f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153f6:	85 ff       	sbrs	r24, 5
   153f8:	f3 c0       	rjmp	.+486    	; 0x155e0 <SS80_Command_State+0x46e>
   153fa:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   153fe:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15402:	83 85       	ldd	r24, Z+11	; 0x0b
   15404:	94 85       	ldd	r25, Z+12	; 0x0c
   15406:	a5 85       	ldd	r26, Z+13	; 0x0d
   15408:	b6 85       	ldd	r27, Z+14	; 0x0e
   1540a:	ed b7       	in	r30, 0x3d	; 61
   1540c:	fe b7       	in	r31, 0x3e	; 62
   1540e:	84 83       	std	Z+4, r24	; 0x04
   15410:	95 83       	std	Z+5, r25	; 0x05
   15412:	a6 83       	std	Z+6, r26	; 0x06
   15414:	b7 83       	std	Z+7, r27	; 0x07
   15416:	a1 82       	std	Z+1, r10	; 0x01
   15418:	b2 82       	std	Z+2, r11	; 0x02
   1541a:	c3 82       	std	Z+3, r12	; 0x03
   1541c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15420:	df c0       	rjmp	.+446    	; 0x155e0 <SS80_Command_State+0x46e>
   15422:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15426:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1542a:	24 33       	cpi	r18, 0x34	; 52
   1542c:	31 05       	cpc	r19, r1
   1542e:	41 f4       	brne	.+16     	; 0x15440 <SS80_Command_State+0x2ce>
   15430:	85 ff       	sbrs	r24, 5
   15432:	d6 c0       	rjmp	.+428    	; 0x155e0 <SS80_Command_State+0x46e>
   15434:	ed b7       	in	r30, 0x3d	; 61
   15436:	fe b7       	in	r31, 0x3e	; 62
   15438:	61 82       	std	Z+1, r6	; 0x01
   1543a:	72 82       	std	Z+2, r7	; 0x02
   1543c:	83 82       	std	Z+3, r8	; 0x03
   1543e:	2b c0       	rjmp	.+86     	; 0x15496 <SS80_Command_State+0x324>
   15440:	29 33       	cpi	r18, 0x39	; 57
   15442:	31 05       	cpc	r19, r1
   15444:	49 f4       	brne	.+18     	; 0x15458 <SS80_Command_State+0x2e6>
   15446:	87 01       	movw	r16, r14
   15448:	0d 5f       	subi	r16, 0xFD	; 253
   1544a:	1f 4f       	sbci	r17, 0xFF	; 255
   1544c:	85 ff       	sbrs	r24, 5
   1544e:	c8 c0       	rjmp	.+400    	; 0x155e0 <SS80_Command_State+0x46e>
   15450:	2c 89       	ldd	r18, Y+20	; 0x14
   15452:	3d 89       	ldd	r19, Y+21	; 0x15
   15454:	4e 89       	ldd	r20, Y+22	; 0x16
   15456:	1a c0       	rjmp	.+52     	; 0x1548c <SS80_Command_State+0x31a>
   15458:	2b 33       	cpi	r18, 0x3B	; 59
   1545a:	31 05       	cpc	r19, r1
   1545c:	49 f4       	brne	.+18     	; 0x15470 <SS80_Command_State+0x2fe>
   1545e:	87 01       	movw	r16, r14
   15460:	0e 5f       	subi	r16, 0xFE	; 254
   15462:	1f 4f       	sbci	r17, 0xFF	; 255
   15464:	85 ff       	sbrs	r24, 5
   15466:	bc c0       	rjmp	.+376    	; 0x155e0 <SS80_Command_State+0x46e>
   15468:	29 89       	ldd	r18, Y+17	; 0x11
   1546a:	3a 89       	ldd	r19, Y+18	; 0x12
   1546c:	4b 89       	ldd	r20, Y+19	; 0x13
   1546e:	0e c0       	rjmp	.+28     	; 0x1548c <SS80_Command_State+0x31a>
   15470:	28 34       	cpi	r18, 0x48	; 72
   15472:	31 05       	cpc	r19, r1
   15474:	99 f4       	brne	.+38     	; 0x1549c <SS80_Command_State+0x32a>
   15476:	87 01       	movw	r16, r14
   15478:	0e 5f       	subi	r16, 0xFE	; 254
   1547a:	1f 4f       	sbci	r17, 0xFF	; 255
   1547c:	80 73       	andi	r24, 0x30	; 48
   1547e:	99 27       	eor	r25, r25
   15480:	89 2b       	or	r24, r25
   15482:	09 f4       	brne	.+2      	; 0x15486 <SS80_Command_State+0x314>
   15484:	ad c0       	rjmp	.+346    	; 0x155e0 <SS80_Command_State+0x46e>
   15486:	2e 85       	ldd	r18, Y+14	; 0x0e
   15488:	3f 85       	ldd	r19, Y+15	; 0x0f
   1548a:	48 89       	ldd	r20, Y+16	; 0x10
   1548c:	ed b7       	in	r30, 0x3d	; 61
   1548e:	fe b7       	in	r31, 0x3e	; 62
   15490:	21 83       	std	Z+1, r18	; 0x01
   15492:	32 83       	std	Z+2, r19	; 0x02
   15494:	43 83       	std	Z+3, r20	; 0x03
   15496:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1549a:	a2 c0       	rjmp	.+324    	; 0x155e0 <SS80_Command_State+0x46e>
   1549c:	24 30       	cpi	r18, 0x04	; 4
   1549e:	31 05       	cpc	r19, r1
   154a0:	41 f4       	brne	.+16     	; 0x154b2 <SS80_Command_State+0x340>
   154a2:	80 73       	andi	r24, 0x30	; 48
   154a4:	99 27       	eor	r25, r25
   154a6:	89 2b       	or	r24, r25
   154a8:	09 f4       	brne	.+2      	; 0x154ac <SS80_Command_State+0x33a>
   154aa:	9c c0       	rjmp	.+312    	; 0x155e4 <SS80_Command_State+0x472>
   154ac:	85 e1       	ldi	r24, 0x15	; 21
   154ae:	95 e2       	ldi	r25, 0x25	; 37
   154b0:	45 cf       	rjmp	.-374    	; 0x1533c <SS80_Command_State+0x1ca>
   154b2:	2e 30       	cpi	r18, 0x0E	; 14
   154b4:	31 05       	cpc	r19, r1
   154b6:	29 f4       	brne	.+10     	; 0x154c2 <SS80_Command_State+0x350>
   154b8:	85 ff       	sbrs	r24, 5
   154ba:	94 c0       	rjmp	.+296    	; 0x155e4 <SS80_Command_State+0x472>
   154bc:	8f ef       	ldi	r24, 0xFF	; 255
   154be:	94 e2       	ldi	r25, 0x24	; 36
   154c0:	3d cf       	rjmp	.-390    	; 0x1533c <SS80_Command_State+0x1ca>
   154c2:	2f 30       	cpi	r18, 0x0F	; 15
   154c4:	31 05       	cpc	r19, r1
   154c6:	29 f4       	brne	.+10     	; 0x154d2 <SS80_Command_State+0x360>
   154c8:	85 ff       	sbrs	r24, 5
   154ca:	8c c0       	rjmp	.+280    	; 0x155e4 <SS80_Command_State+0x472>
   154cc:	82 ee       	ldi	r24, 0xE2	; 226
   154ce:	94 e2       	ldi	r25, 0x24	; 36
   154d0:	35 cf       	rjmp	.-406    	; 0x1533c <SS80_Command_State+0x1ca>
   154d2:	21 33       	cpi	r18, 0x31	; 49
   154d4:	31 05       	cpc	r19, r1
   154d6:	59 f4       	brne	.+22     	; 0x154ee <SS80_Command_State+0x37c>
   154d8:	87 01       	movw	r16, r14
   154da:	0d 5f       	subi	r16, 0xFD	; 253
   154dc:	1f 4f       	sbci	r17, 0xFF	; 255
   154de:	80 73       	andi	r24, 0x30	; 48
   154e0:	99 27       	eor	r25, r25
   154e2:	89 2b       	or	r24, r25
   154e4:	09 f4       	brne	.+2      	; 0x154e8 <SS80_Command_State+0x376>
   154e6:	7e c0       	rjmp	.+252    	; 0x155e4 <SS80_Command_State+0x472>
   154e8:	86 ec       	ldi	r24, 0xC6	; 198
   154ea:	94 e2       	ldi	r25, 0x24	; 36
   154ec:	27 cf       	rjmp	.-434    	; 0x1533c <SS80_Command_State+0x1ca>
   154ee:	25 33       	cpi	r18, 0x35	; 53
   154f0:	31 05       	cpc	r19, r1
   154f2:	69 f4       	brne	.+26     	; 0x1550e <SS80_Command_State+0x39c>
   154f4:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   154f8:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   154fc:	24 e0       	ldi	r18, 0x04	; 4
   154fe:	30 e0       	ldi	r19, 0x00	; 0
   15500:	31 83       	std	Z+1, r19	; 0x01
   15502:	20 83       	st	Z, r18
   15504:	85 ff       	sbrs	r24, 5
   15506:	6e c0       	rjmp	.+220    	; 0x155e4 <SS80_Command_State+0x472>
   15508:	85 eb       	ldi	r24, 0xB5	; 181
   1550a:	94 e2       	ldi	r25, 0x24	; 36
   1550c:	17 cf       	rjmp	.-466    	; 0x1533c <SS80_Command_State+0x1ca>
   1550e:	27 33       	cpi	r18, 0x37	; 55
   15510:	31 05       	cpc	r19, r1
   15512:	59 f4       	brne	.+22     	; 0x1552a <SS80_Command_State+0x3b8>
   15514:	87 01       	movw	r16, r14
   15516:	0d 5f       	subi	r16, 0xFD	; 253
   15518:	1f 4f       	sbci	r17, 0xFF	; 255
   1551a:	80 73       	andi	r24, 0x30	; 48
   1551c:	99 27       	eor	r25, r25
   1551e:	89 2b       	or	r24, r25
   15520:	09 f4       	brne	.+2      	; 0x15524 <SS80_Command_State+0x3b2>
   15522:	60 c0       	rjmp	.+192    	; 0x155e4 <SS80_Command_State+0x472>
   15524:	87 e9       	ldi	r24, 0x97	; 151
   15526:	94 e2       	ldi	r25, 0x24	; 36
   15528:	09 cf       	rjmp	.-494    	; 0x1533c <SS80_Command_State+0x1ca>
   1552a:	2e 33       	cpi	r18, 0x3E	; 62
   1552c:	31 05       	cpc	r19, r1
   1552e:	c1 f4       	brne	.+48     	; 0x15560 <SS80_Command_State+0x3ee>
   15530:	80 73       	andi	r24, 0x30	; 48
   15532:	99 27       	eor	r25, r25
   15534:	89 2b       	or	r24, r25
   15536:	81 f0       	breq	.+32     	; 0x15558 <SS80_Command_State+0x3e6>
   15538:	88 e7       	ldi	r24, 0x78	; 120
   1553a:	94 e2       	ldi	r25, 0x24	; 36
   1553c:	a0 e0       	ldi	r26, 0x00	; 0
   1553e:	ed b7       	in	r30, 0x3d	; 61
   15540:	fe b7       	in	r31, 0x3e	; 62
   15542:	81 83       	std	Z+1, r24	; 0x01
   15544:	92 83       	std	Z+2, r25	; 0x02
   15546:	a3 83       	std	Z+3, r26	; 0x03
   15548:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1554c:	64 e7       	ldi	r22, 0x74	; 116
   1554e:	70 e1       	ldi	r23, 0x10	; 16
   15550:	c8 01       	movw	r24, r16
   15552:	8e 50       	subi	r24, 0x0E	; 14
   15554:	93 4e       	sbci	r25, 0xE3	; 227
   15556:	69 dc       	rcall	.-1838   	; 0x14e2a <SS80_display_extended_status>
   15558:	87 01       	movw	r16, r14
   1555a:	07 5f       	subi	r16, 0xF7	; 247
   1555c:	1f 4f       	sbci	r17, 0xFF	; 255
   1555e:	42 c0       	rjmp	.+132    	; 0x155e4 <SS80_Command_State+0x472>
   15560:	2c 34       	cpi	r18, 0x4C	; 76
   15562:	31 05       	cpc	r19, r1
   15564:	39 f4       	brne	.+14     	; 0x15574 <SS80_Command_State+0x402>
   15566:	80 73       	andi	r24, 0x30	; 48
   15568:	99 27       	eor	r25, r25
   1556a:	89 2b       	or	r24, r25
   1556c:	d9 f1       	breq	.+118    	; 0x155e4 <SS80_Command_State+0x472>
   1556e:	8d e5       	ldi	r24, 0x5D	; 93
   15570:	94 e2       	ldi	r25, 0x24	; 36
   15572:	e4 ce       	rjmp	.-568    	; 0x1533c <SS80_Command_State+0x1ca>
   15574:	2d 34       	cpi	r18, 0x4D	; 77
   15576:	31 05       	cpc	r19, r1
   15578:	39 f4       	brne	.+14     	; 0x15588 <SS80_Command_State+0x416>
   1557a:	80 73       	andi	r24, 0x30	; 48
   1557c:	99 27       	eor	r25, r25
   1557e:	89 2b       	or	r24, r25
   15580:	89 f1       	breq	.+98     	; 0x155e4 <SS80_Command_State+0x472>
   15582:	84 e4       	ldi	r24, 0x44	; 68
   15584:	94 e2       	ldi	r25, 0x24	; 36
   15586:	da ce       	rjmp	.-588    	; 0x1533c <SS80_Command_State+0x1ca>
   15588:	2d 30       	cpi	r18, 0x0D	; 13
   1558a:	31 05       	cpc	r19, r1
   1558c:	69 f4       	brne	.+26     	; 0x155a8 <SS80_Command_State+0x436>
   1558e:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15592:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15596:	23 e0       	ldi	r18, 0x03	; 3
   15598:	30 e0       	ldi	r19, 0x00	; 0
   1559a:	31 83       	std	Z+1, r19	; 0x01
   1559c:	20 83       	st	Z, r18
   1559e:	85 ff       	sbrs	r24, 5
   155a0:	21 c0       	rjmp	.+66     	; 0x155e4 <SS80_Command_State+0x472>
   155a2:	8d e2       	ldi	r24, 0x2D	; 45
   155a4:	94 e2       	ldi	r25, 0x24	; 36
   155a6:	ca ce       	rjmp	.-620    	; 0x1533c <SS80_Command_State+0x1ca>
   155a8:	23 33       	cpi	r18, 0x33	; 51
   155aa:	31 05       	cpc	r19, r1
   155ac:	51 f4       	brne	.+20     	; 0x155c2 <SS80_Command_State+0x450>
   155ae:	87 01       	movw	r16, r14
   155b0:	0c 5f       	subi	r16, 0xFC	; 252
   155b2:	1f 4f       	sbci	r17, 0xFF	; 255
   155b4:	80 73       	andi	r24, 0x30	; 48
   155b6:	99 27       	eor	r25, r25
   155b8:	89 2b       	or	r24, r25
   155ba:	a1 f0       	breq	.+40     	; 0x155e4 <SS80_Command_State+0x472>
   155bc:	8a e0       	ldi	r24, 0x0A	; 10
   155be:	94 e2       	ldi	r25, 0x24	; 36
   155c0:	bd ce       	rjmp	.-646    	; 0x1533c <SS80_Command_State+0x1ca>
   155c2:	80 ff       	sbrs	r24, 0
   155c4:	28 c0       	rjmp	.+80     	; 0x15616 <SS80_Command_State+0x4a4>
   155c6:	ed b7       	in	r30, 0x3d	; 61
   155c8:	fe b7       	in	r31, 0x3e	; 62
   155ca:	35 83       	std	Z+5, r19	; 0x05
   155cc:	24 83       	std	Z+4, r18	; 0x04
   155ce:	8a ee       	ldi	r24, 0xEA	; 234
   155d0:	93 e2       	ldi	r25, 0x23	; 35
   155d2:	a0 e0       	ldi	r26, 0x00	; 0
   155d4:	81 83       	std	Z+1, r24	; 0x01
   155d6:	92 83       	std	Z+2, r25	; 0x02
   155d8:	a3 83       	std	Z+3, r26	; 0x03
   155da:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   155de:	02 c0       	rjmp	.+4      	; 0x155e4 <SS80_Command_State+0x472>
   155e0:	78 01       	movw	r14, r16
   155e2:	43 ce       	rjmp	.-890    	; 0x1526a <SS80_Command_State+0xf8>
   155e4:	8a 85       	ldd	r24, Y+10	; 0x0a
   155e6:	9b 85       	ldd	r25, Y+11	; 0x0b
   155e8:	08 17       	cp	r16, r24
   155ea:	19 07       	cpc	r17, r25
   155ec:	a1 f0       	breq	.+40     	; 0x15616 <SS80_Command_State+0x4a4>
   155ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   155f2:	80 ff       	sbrs	r24, 0
   155f4:	10 c0       	rjmp	.+32     	; 0x15616 <SS80_Command_State+0x4a4>
   155f6:	2a 85       	ldd	r18, Y+10	; 0x0a
   155f8:	3b 85       	ldd	r19, Y+11	; 0x0b
   155fa:	ed b7       	in	r30, 0x3d	; 61
   155fc:	fe b7       	in	r31, 0x3e	; 62
   155fe:	37 83       	std	Z+7, r19	; 0x07
   15600:	26 83       	std	Z+6, r18	; 0x06
   15602:	15 83       	std	Z+5, r17	; 0x05
   15604:	04 83       	std	Z+4, r16	; 0x04
   15606:	82 eb       	ldi	r24, 0xB2	; 178
   15608:	93 e2       	ldi	r25, 0x23	; 35
   1560a:	a0 e0       	ldi	r26, 0x00	; 0
   1560c:	81 83       	std	Z+1, r24	; 0x01
   1560e:	92 83       	std	Z+2, r25	; 0x02
   15610:	a3 83       	std	Z+3, r26	; 0x03
   15612:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15616:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   1561a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1561e:	81 81       	ldd	r24, Z+1	; 0x01
   15620:	90 e0       	ldi	r25, 0x00	; 0
   15622:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   15626:	88 85       	ldd	r24, Y+8	; 0x08
   15628:	99 85       	ldd	r25, Y+9	; 0x09
   1562a:	88 27       	eor	r24, r24
   1562c:	90 7d       	andi	r25, 0xD0	; 208
   1562e:	02 c0       	rjmp	.+4      	; 0x15634 <SS80_Command_State+0x4c2>
   15630:	80 e0       	ldi	r24, 0x00	; 0
   15632:	90 e0       	ldi	r25, 0x00	; 0
   15634:	66 96       	adiw	r28, 0x16	; 22
   15636:	0f b6       	in	r0, 0x3f	; 63
   15638:	f8 94       	cli
   1563a:	de bf       	out	0x3e, r29	; 62
   1563c:	0f be       	out	0x3f, r0	; 63
   1563e:	cd bf       	out	0x3d, r28	; 61
   15640:	df 91       	pop	r29
   15642:	cf 91       	pop	r28
   15644:	1f 91       	pop	r17
   15646:	0f 91       	pop	r16
   15648:	ff 90       	pop	r15
   1564a:	ef 90       	pop	r14
   1564c:	cf 90       	pop	r12
   1564e:	bf 90       	pop	r11
   15650:	af 90       	pop	r10
   15652:	8f 90       	pop	r8
   15654:	7f 90       	pop	r7
   15656:	6f 90       	pop	r6
   15658:	4f 90       	pop	r4
   1565a:	3f 90       	pop	r3
   1565c:	2f 90       	pop	r2
   1565e:	08 95       	ret

00015660 <SS80_cmd_seek>:
   15660:	a7 e0       	ldi	r26, 0x07	; 7
   15662:	b0 e0       	ldi	r27, 0x00	; 0
   15664:	e6 e3       	ldi	r30, 0x36	; 54
   15666:	fb ea       	ldi	r31, 0xAB	; 171
   15668:	0c 94 b5 e6 	jmp	0x1cd6a	; 0x1cd6a <__prologue_saves__+0x4>
   1566c:	c0 91 6e 19 	lds	r28, 0x196E	; 0x80196e <SS80s>
   15670:	d0 91 6f 19 	lds	r29, 0x196F	; 0x80196f <SS80s+0x1>
   15674:	8f 80       	ldd	r8, Y+7	; 0x07
   15676:	98 84       	ldd	r9, Y+8	; 0x08
   15678:	a9 84       	ldd	r10, Y+9	; 0x09
   1567a:	ba 84       	ldd	r11, Y+10	; 0x0a
   1567c:	00 91 70 19 	lds	r16, 0x1970	; 0x801970 <SS80p>
   15680:	10 91 71 19 	lds	r17, 0x1971	; 0x801971 <SS80p+0x1>
   15684:	f8 01       	movw	r30, r16
   15686:	c2 88       	ldd	r12, Z+18	; 0x12
   15688:	d3 88       	ldd	r13, Z+19	; 0x13
   1568a:	e1 2c       	mov	r14, r1
   1568c:	f1 2c       	mov	r15, r1
   1568e:	6b 85       	ldd	r22, Y+11	; 0x0b
   15690:	7c 85       	ldd	r23, Y+12	; 0x0c
   15692:	8d 85       	ldd	r24, Y+13	; 0x0d
   15694:	9e 85       	ldd	r25, Y+14	; 0x0e
   15696:	a7 01       	movw	r20, r14
   15698:	96 01       	movw	r18, r12
   1569a:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__udivmodsi4>
   1569e:	da 01       	movw	r26, r20
   156a0:	c9 01       	movw	r24, r18
   156a2:	88 0d       	add	r24, r8
   156a4:	99 1d       	adc	r25, r9
   156a6:	aa 1d       	adc	r26, r10
   156a8:	bb 1d       	adc	r27, r11
   156aa:	f8 01       	movw	r30, r16
   156ac:	40 a4       	ldd	r4, Z+40	; 0x28
   156ae:	51 a4       	ldd	r5, Z+41	; 0x29
   156b0:	62 a4       	ldd	r6, Z+42	; 0x2a
   156b2:	73 a4       	ldd	r7, Z+43	; 0x2b
   156b4:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   156b8:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   156bc:	48 16       	cp	r4, r24
   156be:	59 06       	cpc	r5, r25
   156c0:	6a 06       	cpc	r6, r26
   156c2:	7b 06       	cpc	r7, r27
   156c4:	f0 f4       	brcc	.+60     	; 0x15702 <SS80_cmd_seek+0xa2>
   156c6:	81 e0       	ldi	r24, 0x01	; 1
   156c8:	8a 83       	std	Y+2, r24	; 0x02
   156ca:	8b 81       	ldd	r24, Y+3	; 0x03
   156cc:	9c 81       	ldd	r25, Y+4	; 0x04
   156ce:	84 60       	ori	r24, 0x04	; 4
   156d0:	9c 83       	std	Y+4, r25	; 0x04
   156d2:	8b 83       	std	Y+3, r24	; 0x03
   156d4:	40 ff       	sbrs	r20, 0
   156d6:	31 c0       	rjmp	.+98     	; 0x1573a <SS80_cmd_seek+0xda>
   156d8:	a2 89       	ldd	r26, Z+18	; 0x12
   156da:	b3 89       	ldd	r27, Z+19	; 0x13
   156dc:	a5 01       	movw	r20, r10
   156de:	94 01       	movw	r18, r8
   156e0:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__muluhisi3>
   156e4:	ed b7       	in	r30, 0x3d	; 61
   156e6:	fe b7       	in	r31, 0x3e	; 62
   156e8:	64 83       	std	Z+4, r22	; 0x04
   156ea:	75 83       	std	Z+5, r23	; 0x05
   156ec:	86 83       	std	Z+6, r24	; 0x06
   156ee:	97 83       	std	Z+7, r25	; 0x07
   156f0:	8f e6       	ldi	r24, 0x6F	; 111
   156f2:	92 e2       	ldi	r25, 0x22	; 34
   156f4:	a0 e0       	ldi	r26, 0x00	; 0
   156f6:	81 83       	std	Z+1, r24	; 0x01
   156f8:	92 83       	std	Z+2, r25	; 0x02
   156fa:	a3 83       	std	Z+3, r26	; 0x03
   156fc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15700:	1c c0       	rjmp	.+56     	; 0x1573a <SS80_cmd_seek+0xda>
   15702:	ca 01       	movw	r24, r20
   15704:	80 72       	andi	r24, 0x20	; 32
   15706:	99 27       	eor	r25, r25
   15708:	45 ff       	sbrs	r20, 5
   1570a:	19 c0       	rjmp	.+50     	; 0x1573e <SS80_cmd_seek+0xde>
   1570c:	a5 01       	movw	r20, r10
   1570e:	94 01       	movw	r18, r8
   15710:	c7 01       	movw	r24, r14
   15712:	b6 01       	movw	r22, r12
   15714:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <__mulsi3>
   15718:	ed b7       	in	r30, 0x3d	; 61
   1571a:	fe b7       	in	r31, 0x3e	; 62
   1571c:	64 83       	std	Z+4, r22	; 0x04
   1571e:	75 83       	std	Z+5, r23	; 0x05
   15720:	86 83       	std	Z+6, r24	; 0x06
   15722:	97 83       	std	Z+7, r25	; 0x07
   15724:	8b e5       	ldi	r24, 0x5B	; 91
   15726:	92 e2       	ldi	r25, 0x22	; 34
   15728:	a0 e0       	ldi	r26, 0x00	; 0
   1572a:	81 83       	std	Z+1, r24	; 0x01
   1572c:	92 83       	std	Z+2, r25	; 0x02
   1572e:	a3 83       	std	Z+3, r26	; 0x03
   15730:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15734:	80 e0       	ldi	r24, 0x00	; 0
   15736:	90 e0       	ldi	r25, 0x00	; 0
   15738:	02 c0       	rjmp	.+4      	; 0x1573e <SS80_cmd_seek+0xde>
   1573a:	81 e0       	ldi	r24, 0x01	; 1
   1573c:	90 e0       	ldi	r25, 0x00	; 0
   1573e:	cd b7       	in	r28, 0x3d	; 61
   15740:	de b7       	in	r29, 0x3e	; 62
   15742:	27 96       	adiw	r28, 0x07	; 7
   15744:	e0 e1       	ldi	r30, 0x10	; 16
   15746:	0c 94 d1 e6 	jmp	0x1cda2	; 0x1cda2 <__epilogue_restores__+0x4>

0001574a <SS80_locate_and_write>:
   1574a:	a3 e1       	ldi	r26, 0x13	; 19
   1574c:	b0 e0       	ldi	r27, 0x00	; 0
   1574e:	eb ea       	ldi	r30, 0xAB	; 171
   15750:	fb ea       	ldi	r31, 0xAB	; 171
   15752:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
   15756:	00 91 6e 19 	lds	r16, 0x196E	; 0x80196e <SS80s>
   1575a:	10 91 6f 19 	lds	r17, 0x196F	; 0x80196f <SS80s+0x1>
   1575e:	80 91 70 19 	lds	r24, 0x1970	; 0x801970 <SS80p>
   15762:	90 91 71 19 	lds	r25, 0x1971	; 0x801971 <SS80p+0x1>
   15766:	fc 01       	movw	r30, r24
   15768:	a2 89       	ldd	r26, Z+18	; 0x12
   1576a:	b3 89       	ldd	r27, Z+19	; 0x13
   1576c:	f8 01       	movw	r30, r16
   1576e:	27 81       	ldd	r18, Z+7	; 0x07
   15770:	30 85       	ldd	r19, Z+8	; 0x08
   15772:	41 85       	ldd	r20, Z+9	; 0x09
   15774:	52 85       	ldd	r21, Z+10	; 0x0a
   15776:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__muluhisi3>
   1577a:	4b 01       	movw	r8, r22
   1577c:	5c 01       	movw	r10, r24
   1577e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15782:	85 ff       	sbrs	r24, 5
   15784:	16 c0       	rjmp	.+44     	; 0x157b2 <SS80_locate_and_write+0x68>
   15786:	83 85       	ldd	r24, Z+11	; 0x0b
   15788:	94 85       	ldd	r25, Z+12	; 0x0c
   1578a:	a5 85       	ldd	r26, Z+13	; 0x0d
   1578c:	b6 85       	ldd	r27, Z+14	; 0x0e
   1578e:	ed b7       	in	r30, 0x3d	; 61
   15790:	fe b7       	in	r31, 0x3e	; 62
   15792:	80 87       	std	Z+8, r24	; 0x08
   15794:	91 87       	std	Z+9, r25	; 0x09
   15796:	a2 87       	std	Z+10, r26	; 0x0a
   15798:	b3 87       	std	Z+11, r27	; 0x0b
   1579a:	84 82       	std	Z+4, r8	; 0x04
   1579c:	95 82       	std	Z+5, r9	; 0x05
   1579e:	a6 82       	std	Z+6, r10	; 0x06
   157a0:	b7 82       	std	Z+7, r11	; 0x07
   157a2:	82 ef       	ldi	r24, 0xF2	; 242
   157a4:	97 e2       	ldi	r25, 0x27	; 39
   157a6:	a0 e0       	ldi	r26, 0x00	; 0
   157a8:	81 83       	std	Z+1, r24	; 0x01
   157aa:	92 83       	std	Z+2, r25	; 0x02
   157ac:	a3 83       	std	Z+3, r26	; 0x03
   157ae:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   157b2:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   157b6:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   157ba:	12 82       	std	Z+2, r1	; 0x02
   157bc:	54 98       	cbi	0x0a, 4	; 10
   157be:	4c 99       	sbic	0x09, 4	; 9
   157c0:	03 c0       	rjmp	.+6      	; 0x157c8 <SS80_locate_and_write+0x7e>
   157c2:	80 e0       	ldi	r24, 0x00	; 0
   157c4:	90 e1       	ldi	r25, 0x10	; 16
   157c6:	4f c1       	rjmp	.+670    	; 0x15a66 <SS80_locate_and_write+0x31c>
   157c8:	4b df       	rcall	.-362    	; 0x15660 <SS80_cmd_seek>
   157ca:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   157ce:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   157d2:	89 2b       	or	r24, r25
   157d4:	41 f0       	breq	.+16     	; 0x157e6 <SS80_locate_and_write+0x9c>
   157d6:	83 81       	ldd	r24, Z+3	; 0x03
   157d8:	94 81       	ldd	r25, Z+4	; 0x04
   157da:	82 60       	ori	r24, 0x02	; 2
   157dc:	94 83       	std	Z+4, r25	; 0x04
   157de:	83 83       	std	Z+3, r24	; 0x03
   157e0:	01 e0       	ldi	r16, 0x01	; 1
   157e2:	10 e0       	ldi	r17, 0x00	; 0
   157e4:	02 c0       	rjmp	.+4      	; 0x157ea <SS80_locate_and_write+0xa0>
   157e6:	00 e0       	ldi	r16, 0x00	; 0
   157e8:	10 e0       	ldi	r17, 0x00	; 0
   157ea:	23 84       	ldd	r2, Z+11	; 0x0b
   157ec:	34 84       	ldd	r3, Z+12	; 0x0c
   157ee:	1d 86       	std	Y+13, r1	; 0x0d
   157f0:	1c 86       	std	Y+12, r1	; 0x0c
   157f2:	41 2c       	mov	r4, r1
   157f4:	51 2c       	mov	r5, r1
   157f6:	32 01       	movw	r6, r4
   157f8:	85 ea       	ldi	r24, 0xA5	; 165
   157fa:	97 e2       	ldi	r25, 0x27	; 39
   157fc:	9c 01       	movw	r18, r24
   157fe:	40 e0       	ldi	r20, 0x00	; 0
   15800:	2e 87       	std	Y+14, r18	; 0x0e
   15802:	3f 87       	std	Y+15, r19	; 0x0f
   15804:	48 8b       	std	Y+16, r20	; 0x10
   15806:	8b ec       	ldi	r24, 0xCB	; 203
   15808:	97 e2       	ldi	r25, 0x27	; 39
   1580a:	9c 01       	movw	r18, r24
   1580c:	40 e0       	ldi	r20, 0x00	; 0
   1580e:	29 8b       	std	Y+17, r18	; 0x11
   15810:	3a 8b       	std	Y+18, r19	; 0x12
   15812:	4b 8b       	std	Y+19, r20	; 0x13
   15814:	12 14       	cp	r1, r2
   15816:	13 04       	cpc	r1, r3
   15818:	0c f0       	brlt	.+2      	; 0x1581c <SS80_locate_and_write+0xd2>
   1581a:	f5 c0       	rjmp	.+490    	; 0x15a06 <SS80_locate_and_write+0x2bc>
   1581c:	54 98       	cbi	0x0a, 4	; 10
   1581e:	4c 9b       	sbis	0x09, 4	; 9
   15820:	d0 cf       	rjmp	.-96     	; 0x157c2 <SS80_locate_and_write+0x78>
   15822:	71 01       	movw	r14, r2
   15824:	31 e0       	ldi	r19, 0x01	; 1
   15826:	23 16       	cp	r2, r19
   15828:	33 06       	cpc	r3, r19
   1582a:	1c f0       	brlt	.+6      	; 0x15832 <SS80_locate_and_write+0xe8>
   1582c:	e1 2c       	mov	r14, r1
   1582e:	ff 24       	eor	r15, r15
   15830:	f3 94       	inc	r15
   15832:	e2 ef       	ldi	r30, 0xF2	; 242
   15834:	fc e1       	ldi	r31, 0x1C	; 28
   15836:	20 e0       	ldi	r18, 0x00	; 0
   15838:	32 e0       	ldi	r19, 0x02	; 2
   1583a:	11 92       	st	Z+, r1
   1583c:	21 50       	subi	r18, 0x01	; 1
   1583e:	30 40       	sbci	r19, 0x00	; 0
   15840:	e1 f7       	brne	.-8      	; 0x1583a <SS80_locate_and_write+0xf0>
   15842:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15846:	87 fd       	sbrc	r24, 7
   15848:	0e 94 49 85 	call	0x10a92	; 0x10a92 <gpib_timer_elapsed_begin>
   1584c:	ae 01       	movw	r20, r28
   1584e:	44 5f       	subi	r20, 0xF4	; 244
   15850:	5f 4f       	sbci	r21, 0xFF	; 255
   15852:	b7 01       	movw	r22, r14
   15854:	82 ef       	ldi	r24, 0xF2	; 242
   15856:	9c e1       	ldi	r25, 0x1C	; 28
   15858:	0e 94 b1 8a 	call	0x11562	; 0x11562 <gpib_read_str>
   1585c:	6c 01       	movw	r12, r24
   1585e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15862:	87 ff       	sbrs	r24, 7
   15864:	04 c0       	rjmp	.+8      	; 0x1586e <SS80_locate_and_write+0x124>
   15866:	80 e9       	ldi	r24, 0x90	; 144
   15868:	90 e1       	ldi	r25, 0x10	; 16
   1586a:	0e 94 5b 85 	call	0x10ab6	; 0x10ab6 <gpib_timer_elapsed_end>
   1586e:	ce 14       	cp	r12, r14
   15870:	df 04       	cpc	r13, r15
   15872:	39 f1       	breq	.+78     	; 0x158c2 <SS80_locate_and_write+0x178>
   15874:	8c 85       	ldd	r24, Y+12	; 0x0c
   15876:	9d 85       	ldd	r25, Y+13	; 0x0d
   15878:	9c 01       	movw	r18, r24
   1587a:	22 27       	eor	r18, r18
   1587c:	30 7d       	andi	r19, 0xD0	; 208
   1587e:	23 2b       	or	r18, r19
   15880:	d1 f0       	breq	.+52     	; 0x158b6 <SS80_locate_and_write+0x16c>
   15882:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15886:	80 ff       	sbrs	r24, 0
   15888:	0a c0       	rjmp	.+20     	; 0x1589e <SS80_locate_and_write+0x154>
   1588a:	8f ed       	ldi	r24, 0xDF	; 223
   1588c:	97 e2       	ldi	r25, 0x27	; 39
   1588e:	a0 e0       	ldi	r26, 0x00	; 0
   15890:	ed b7       	in	r30, 0x3d	; 61
   15892:	fe b7       	in	r31, 0x3e	; 62
   15894:	81 83       	std	Z+1, r24	; 0x01
   15896:	92 83       	std	Z+2, r25	; 0x02
   15898:	a3 83       	std	Z+3, r26	; 0x03
   1589a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1589e:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   158a2:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   158a6:	83 81       	ldd	r24, Z+3	; 0x03
   158a8:	94 81       	ldd	r25, Z+4	; 0x04
   158aa:	82 60       	ori	r24, 0x02	; 2
   158ac:	94 83       	std	Z+4, r25	; 0x04
   158ae:	83 83       	std	Z+3, r24	; 0x03
   158b0:	81 e0       	ldi	r24, 0x01	; 1
   158b2:	82 83       	std	Z+2, r24	; 0x02
   158b4:	99 c0       	rjmp	.+306    	; 0x159e8 <SS80_locate_and_write+0x29e>
   158b6:	c1 14       	cp	r12, r1
   158b8:	d1 04       	cpc	r13, r1
   158ba:	09 f0       	breq	.+2      	; 0x158be <SS80_locate_and_write+0x174>
   158bc:	d0 c0       	rjmp	.+416    	; 0x15a5e <SS80_locate_and_write+0x314>
   158be:	90 fd       	sbrc	r25, 0
   158c0:	93 c0       	rjmp	.+294    	; 0x159e8 <SS80_locate_and_write+0x29e>
   158c2:	01 15       	cp	r16, r1
   158c4:	11 05       	cpc	r17, r1
   158c6:	09 f0       	breq	.+2      	; 0x158ca <SS80_locate_and_write+0x180>
   158c8:	84 c0       	rjmp	.+264    	; 0x159d2 <SS80_locate_and_write+0x288>
   158ca:	c1 14       	cp	r12, r1
   158cc:	d1 04       	cpc	r13, r1
   158ce:	09 f4       	brne	.+2      	; 0x158d2 <SS80_locate_and_write+0x188>
   158d0:	82 c0       	rjmp	.+260    	; 0x159d6 <SS80_locate_and_write+0x28c>
   158d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158d6:	86 fd       	sbrc	r24, 6
   158d8:	0e 94 49 85 	call	0x10a92	; 0x10a92 <gpib_timer_elapsed_begin>
   158dc:	e0 90 6e 19 	lds	r14, 0x196E	; 0x80196e <SS80s>
   158e0:	f0 90 6f 19 	lds	r15, 0x196F	; 0x80196f <SS80s+0x1>
   158e4:	f3 e0       	ldi	r31, 0x03	; 3
   158e6:	ef 0e       	add	r14, r31
   158e8:	f1 1c       	adc	r15, r1
   158ea:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   158ee:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   158f2:	86 01       	movw	r16, r12
   158f4:	22 ef       	ldi	r18, 0xF2	; 242
   158f6:	3c e1       	ldi	r19, 0x1C	; 28
   158f8:	b5 01       	movw	r22, r10
   158fa:	a4 01       	movw	r20, r8
   158fc:	82 81       	ldd	r24, Z+2	; 0x02
   158fe:	93 81       	ldd	r25, Z+3	; 0x03
   15900:	0e 94 f2 84 	call	0x109e4	; 0x109e4 <dbf_open_write>
   15904:	7c 01       	movw	r14, r24
   15906:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1590a:	86 ff       	sbrs	r24, 6
   1590c:	04 c0       	rjmp	.+8      	; 0x15916 <SS80_locate_and_write+0x1cc>
   1590e:	8b e9       	ldi	r24, 0x9B	; 155
   15910:	90 e1       	ldi	r25, 0x10	; 16
   15912:	0e 94 5b 85 	call	0x10ab6	; 0x10ab6 <gpib_timer_elapsed_end>
   15916:	ce 14       	cp	r12, r14
   15918:	df 04       	cpc	r13, r15
   1591a:	39 f1       	breq	.+78     	; 0x1596a <SS80_locate_and_write+0x220>
   1591c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15920:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15924:	83 81       	ldd	r24, Z+3	; 0x03
   15926:	94 81       	ldd	r25, Z+4	; 0x04
   15928:	82 60       	ori	r24, 0x02	; 2
   1592a:	94 83       	std	Z+4, r25	; 0x04
   1592c:	83 83       	std	Z+3, r24	; 0x03
   1592e:	0e 94 d0 6f 	call	0xdfa0	; 0xdfa0 <mmc_wp_status>
   15932:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15936:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   1593a:	89 2b       	or	r24, r25
   1593c:	29 f0       	breq	.+10     	; 0x15948 <SS80_locate_and_write+0x1fe>
   1593e:	83 81       	ldd	r24, Z+3	; 0x03
   15940:	94 81       	ldd	r25, Z+4	; 0x04
   15942:	88 60       	ori	r24, 0x08	; 8
   15944:	94 83       	std	Z+4, r25	; 0x04
   15946:	83 83       	std	Z+3, r24	; 0x03
   15948:	21 e0       	ldi	r18, 0x01	; 1
   1594a:	22 83       	std	Z+2, r18	; 0x02
   1594c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15950:	80 ff       	sbrs	r24, 0
   15952:	27 c0       	rjmp	.+78     	; 0x159a2 <SS80_locate_and_write+0x258>
   15954:	89 89       	ldd	r24, Y+17	; 0x11
   15956:	9a 89       	ldd	r25, Y+18	; 0x12
   15958:	ab 89       	ldd	r26, Y+19	; 0x13
   1595a:	ed b7       	in	r30, 0x3d	; 61
   1595c:	fe b7       	in	r31, 0x3e	; 62
   1595e:	81 83       	std	Z+1, r24	; 0x01
   15960:	92 83       	std	Z+2, r25	; 0x02
   15962:	a3 83       	std	Z+3, r26	; 0x03
   15964:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15968:	1c c0       	rjmp	.+56     	; 0x159a2 <SS80_locate_and_write+0x258>
   1596a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1596e:	85 ff       	sbrs	r24, 5
   15970:	0c c0       	rjmp	.+24     	; 0x1598a <SS80_locate_and_write+0x240>
   15972:	ed b7       	in	r30, 0x3d	; 61
   15974:	fe b7       	in	r31, 0x3e	; 62
   15976:	d5 82       	std	Z+5, r13	; 0x05
   15978:	c4 82       	std	Z+4, r12	; 0x04
   1597a:	2e 85       	ldd	r18, Y+14	; 0x0e
   1597c:	3f 85       	ldd	r19, Y+15	; 0x0f
   1597e:	48 89       	ldd	r20, Y+16	; 0x10
   15980:	21 83       	std	Z+1, r18	; 0x01
   15982:	32 83       	std	Z+2, r19	; 0x02
   15984:	43 83       	std	Z+3, r20	; 0x03
   15986:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1598a:	c6 01       	movw	r24, r12
   1598c:	0d 2c       	mov	r0, r13
   1598e:	00 0c       	add	r0, r0
   15990:	aa 0b       	sbc	r26, r26
   15992:	bb 0b       	sbc	r27, r27
   15994:	88 0e       	add	r8, r24
   15996:	99 1e       	adc	r9, r25
   15998:	aa 1e       	adc	r10, r26
   1599a:	bb 1e       	adc	r11, r27
   1599c:	00 e0       	ldi	r16, 0x00	; 0
   1599e:	10 e0       	ldi	r17, 0x00	; 0
   159a0:	05 c0       	rjmp	.+10     	; 0x159ac <SS80_locate_and_write+0x262>
   159a2:	ec 14       	cp	r14, r12
   159a4:	fd 04       	cpc	r15, r13
   159a6:	64 f0       	brlt	.+24     	; 0x159c0 <SS80_locate_and_write+0x276>
   159a8:	01 e0       	ldi	r16, 0x01	; 1
   159aa:	10 e0       	ldi	r17, 0x00	; 0
   159ac:	c7 01       	movw	r24, r14
   159ae:	0f 2c       	mov	r0, r15
   159b0:	00 0c       	add	r0, r0
   159b2:	aa 0b       	sbc	r26, r26
   159b4:	bb 0b       	sbc	r27, r27
   159b6:	48 0e       	add	r4, r24
   159b8:	59 1e       	adc	r5, r25
   159ba:	6a 1e       	adc	r6, r26
   159bc:	7b 1e       	adc	r7, r27
   159be:	0b c0       	rjmp	.+22     	; 0x159d6 <SS80_locate_and_write+0x28c>
   159c0:	c6 01       	movw	r24, r12
   159c2:	0d 2c       	mov	r0, r13
   159c4:	00 0c       	add	r0, r0
   159c6:	aa 0b       	sbc	r26, r26
   159c8:	bb 0b       	sbc	r27, r27
   159ca:	48 0e       	add	r4, r24
   159cc:	59 1e       	adc	r5, r25
   159ce:	6a 1e       	adc	r6, r26
   159d0:	7b 1e       	adc	r7, r27
   159d2:	01 e0       	ldi	r16, 0x01	; 1
   159d4:	10 e0       	ldi	r17, 0x00	; 0
   159d6:	2c 18       	sub	r2, r12
   159d8:	3d 08       	sbc	r3, r13
   159da:	8c 85       	ldd	r24, Y+12	; 0x0c
   159dc:	9d 85       	ldd	r25, Y+13	; 0x0d
   159de:	90 ff       	sbrs	r25, 0
   159e0:	19 cf       	rjmp	.-462    	; 0x15814 <SS80_locate_and_write+0xca>
   159e2:	12 14       	cp	r1, r2
   159e4:	13 04       	cpc	r1, r3
   159e6:	7c f4       	brge	.+30     	; 0x15a06 <SS80_locate_and_write+0x2bc>
   159e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159ec:	80 ff       	sbrs	r24, 0
   159ee:	1d c0       	rjmp	.+58     	; 0x15a2a <SS80_locate_and_write+0x2e0>
   159f0:	8d e7       	ldi	r24, 0x7D	; 125
   159f2:	97 e2       	ldi	r25, 0x27	; 39
   159f4:	a0 e0       	ldi	r26, 0x00	; 0
   159f6:	ed b7       	in	r30, 0x3d	; 61
   159f8:	fe b7       	in	r31, 0x3e	; 62
   159fa:	81 83       	std	Z+1, r24	; 0x01
   159fc:	92 83       	std	Z+2, r25	; 0x02
   159fe:	a3 83       	std	Z+3, r26	; 0x03
   15a00:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15a04:	12 c0       	rjmp	.+36     	; 0x15a2a <SS80_locate_and_write+0x2e0>
   15a06:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a0a:	85 ff       	sbrs	r24, 5
   15a0c:	0e c0       	rjmp	.+28     	; 0x15a2a <SS80_locate_and_write+0x2e0>
   15a0e:	ed b7       	in	r30, 0x3d	; 61
   15a10:	fe b7       	in	r31, 0x3e	; 62
   15a12:	44 82       	std	Z+4, r4	; 0x04
   15a14:	55 82       	std	Z+5, r5	; 0x05
   15a16:	66 82       	std	Z+6, r6	; 0x06
   15a18:	77 82       	std	Z+7, r7	; 0x07
   15a1a:	82 e5       	ldi	r24, 0x52	; 82
   15a1c:	97 e2       	ldi	r25, 0x27	; 39
   15a1e:	a0 e0       	ldi	r26, 0x00	; 0
   15a20:	81 83       	std	Z+1, r24	; 0x01
   15a22:	92 83       	std	Z+2, r25	; 0x02
   15a24:	a3 83       	std	Z+3, r26	; 0x03
   15a26:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15a2a:	00 91 6e 19 	lds	r16, 0x196E	; 0x80196e <SS80s>
   15a2e:	10 91 6f 19 	lds	r17, 0x196F	; 0x80196f <SS80s+0x1>
   15a32:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15a36:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15a3a:	22 89       	ldd	r18, Z+18	; 0x12
   15a3c:	33 89       	ldd	r19, Z+19	; 0x13
   15a3e:	40 e0       	ldi	r20, 0x00	; 0
   15a40:	50 e0       	ldi	r21, 0x00	; 0
   15a42:	c5 01       	movw	r24, r10
   15a44:	b4 01       	movw	r22, r8
   15a46:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__udivmodsi4>
   15a4a:	f8 01       	movw	r30, r16
   15a4c:	27 83       	std	Z+7, r18	; 0x07
   15a4e:	30 87       	std	Z+8, r19	; 0x08
   15a50:	41 87       	std	Z+9, r20	; 0x09
   15a52:	52 87       	std	Z+10, r21	; 0x0a
   15a54:	8c 85       	ldd	r24, Y+12	; 0x0c
   15a56:	9d 85       	ldd	r25, Y+13	; 0x0d
   15a58:	88 27       	eor	r24, r24
   15a5a:	90 7d       	andi	r25, 0xD0	; 208
   15a5c:	04 c0       	rjmp	.+8      	; 0x15a66 <SS80_locate_and_write+0x31c>
   15a5e:	01 2b       	or	r16, r17
   15a60:	09 f4       	brne	.+2      	; 0x15a64 <SS80_locate_and_write+0x31a>
   15a62:	37 cf       	rjmp	.-402    	; 0x158d2 <SS80_locate_and_write+0x188>
   15a64:	b6 cf       	rjmp	.-148    	; 0x159d2 <SS80_locate_and_write+0x288>
   15a66:	63 96       	adiw	r28, 0x13	; 19
   15a68:	e2 e1       	ldi	r30, 0x12	; 18
   15a6a:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

00015a6e <SS80_Report>:
   15a6e:	a8 e0       	ldi	r26, 0x08	; 8
   15a70:	b0 e0       	ldi	r27, 0x00	; 0
   15a72:	ed e3       	ldi	r30, 0x3D	; 61
   15a74:	fd ea       	ldi	r31, 0xAD	; 173
   15a76:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
   15a7a:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15a7e:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15a82:	82 81       	ldd	r24, Z+2	; 0x02
   15a84:	88 87       	std	Y+8, r24	; 0x08
   15a86:	80 e0       	ldi	r24, 0x00	; 0
   15a88:	91 e0       	ldi	r25, 0x01	; 1
   15a8a:	9f 83       	std	Y+7, r25	; 0x07
   15a8c:	8e 83       	std	Y+6, r24	; 0x06
   15a8e:	ae 01       	movw	r20, r28
   15a90:	4a 5f       	subi	r20, 0xFA	; 250
   15a92:	5f 4f       	sbci	r21, 0xFF	; 255
   15a94:	61 e0       	ldi	r22, 0x01	; 1
   15a96:	70 e0       	ldi	r23, 0x00	; 0
   15a98:	ce 01       	movw	r24, r28
   15a9a:	08 96       	adiw	r24, 0x08	; 8
   15a9c:	0e 94 53 8b 	call	0x116a6	; 0x116a6 <gpib_write_str>
   15aa0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15aa4:	01 97       	sbiw	r24, 0x01	; 1
   15aa6:	89 f0       	breq	.+34     	; 0x15aca <SS80_Report+0x5c>
   15aa8:	20 ff       	sbrs	r18, 0
   15aaa:	0a c0       	rjmp	.+20     	; 0x15ac0 <SS80_Report+0x52>
   15aac:	81 e4       	ldi	r24, 0x41	; 65
   15aae:	92 e2       	ldi	r25, 0x22	; 34
   15ab0:	a0 e0       	ldi	r26, 0x00	; 0
   15ab2:	ed b7       	in	r30, 0x3d	; 61
   15ab4:	fe b7       	in	r31, 0x3e	; 62
   15ab6:	81 83       	std	Z+1, r24	; 0x01
   15ab8:	92 83       	std	Z+2, r25	; 0x02
   15aba:	a3 83       	std	Z+3, r26	; 0x03
   15abc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15ac0:	8e 81       	ldd	r24, Y+6	; 0x06
   15ac2:	9f 81       	ldd	r25, Y+7	; 0x07
   15ac4:	88 27       	eor	r24, r24
   15ac6:	90 7d       	andi	r25, 0xD0	; 208
   15ac8:	1b c0       	rjmp	.+54     	; 0x15b00 <SS80_Report+0x92>
   15aca:	25 ff       	sbrs	r18, 5
   15acc:	12 c0       	rjmp	.+36     	; 0x15af2 <SS80_Report+0x84>
   15ace:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15ad2:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15ad6:	82 81       	ldd	r24, Z+2	; 0x02
   15ad8:	90 e0       	ldi	r25, 0x00	; 0
   15ada:	ed b7       	in	r30, 0x3d	; 61
   15adc:	fe b7       	in	r31, 0x3e	; 62
   15ade:	95 83       	std	Z+5, r25	; 0x05
   15ae0:	84 83       	std	Z+4, r24	; 0x04
   15ae2:	8e e2       	ldi	r24, 0x2E	; 46
   15ae4:	92 e2       	ldi	r25, 0x22	; 34
   15ae6:	a0 e0       	ldi	r26, 0x00	; 0
   15ae8:	81 83       	std	Z+1, r24	; 0x01
   15aea:	92 83       	std	Z+2, r25	; 0x02
   15aec:	a3 83       	std	Z+3, r26	; 0x03
   15aee:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15af2:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15af6:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15afa:	12 82       	std	Z+2, r1	; 0x02
   15afc:	80 e0       	ldi	r24, 0x00	; 0
   15afe:	90 e0       	ldi	r25, 0x00	; 0
   15b00:	28 96       	adiw	r28, 0x08	; 8
   15b02:	e2 e0       	ldi	r30, 0x02	; 2
   15b04:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00015b08 <Clear_Common>:
   15b08:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15b0c:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15b10:	25 81       	ldd	r18, Z+5	; 0x05
   15b12:	30 e0       	ldi	r19, 0x00	; 0
   15b14:	28 17       	cp	r18, r24
   15b16:	39 07       	cpc	r19, r25
   15b18:	19 f0       	breq	.+6      	; 0x15b20 <Clear_Common+0x18>
   15b1a:	0f 97       	sbiw	r24, 0x0f	; 15
   15b1c:	99 f4       	brne	.+38     	; 0x15b44 <Clear_Common+0x3c>
   15b1e:	03 c0       	rjmp	.+6      	; 0x15b26 <Clear_Common+0x1e>
   15b20:	2f 30       	cpi	r18, 0x0F	; 15
   15b22:	31 05       	cpc	r19, r1
   15b24:	09 f4       	brne	.+2      	; 0x15b28 <Clear_Common+0x20>
   15b26:	15 82       	std	Z+5, r1	; 0x05
   15b28:	16 82       	std	Z+6, r1	; 0x06
   15b2a:	17 82       	std	Z+7, r1	; 0x07
   15b2c:	10 86       	std	Z+8, r1	; 0x08
   15b2e:	11 86       	std	Z+9, r1	; 0x09
   15b30:	12 86       	std	Z+10, r1	; 0x0a
   15b32:	13 86       	std	Z+11, r1	; 0x0b
   15b34:	14 86       	std	Z+12, r1	; 0x0c
   15b36:	15 86       	std	Z+13, r1	; 0x0d
   15b38:	16 86       	std	Z+14, r1	; 0x0e
   15b3a:	11 82       	std	Z+1, r1	; 0x01
   15b3c:	10 82       	st	Z, r1
   15b3e:	14 82       	std	Z+4, r1	; 0x04
   15b40:	13 82       	std	Z+3, r1	; 0x03
   15b42:	12 82       	std	Z+2, r1	; 0x02
   15b44:	08 95       	ret

00015b46 <SS80_init>:
   15b46:	cf 92       	push	r12
   15b48:	df 92       	push	r13
   15b4a:	ef 92       	push	r14
   15b4c:	0f 93       	push	r16
   15b4e:	1f 93       	push	r17
   15b50:	cf 93       	push	r28
   15b52:	df 93       	push	r29
   15b54:	00 d0       	rcall	.+0      	; 0x15b56 <SS80_init+0x10>
   15b56:	00 d0       	rcall	.+0      	; 0x15b58 <SS80_init+0x12>
   15b58:	1f 92       	push	r1
   15b5a:	05 e7       	ldi	r16, 0x75	; 117
   15b5c:	1f e1       	ldi	r17, 0x1F	; 31
   15b5e:	cb e0       	ldi	r28, 0x0B	; 11
   15b60:	d2 e0       	ldi	r29, 0x02	; 2
   15b62:	8b ef       	ldi	r24, 0xFB	; 251
   15b64:	98 e2       	ldi	r25, 0x28	; 40
   15b66:	6c 01       	movw	r12, r24
   15b68:	e1 2c       	mov	r14, r1
   15b6a:	f8 01       	movw	r30, r16
   15b6c:	80 81       	ld	r24, Z
   15b6e:	83 30       	cpi	r24, 0x03	; 3
   15b70:	29 f5       	brne	.+74     	; 0x15bbc <SS80_init+0x76>
   15b72:	8c 2f       	mov	r24, r28
   15b74:	0e 94 11 97 	call	0x12e22	; 0x12e22 <set_active_device>
   15b78:	88 23       	and	r24, r24
   15b7a:	01 f1       	breq	.+64     	; 0x15bbc <SS80_init+0x76>
   15b7c:	8f e0       	ldi	r24, 0x0F	; 15
   15b7e:	90 e0       	ldi	r25, 0x00	; 0
   15b80:	c3 df       	rcall	.-122    	; 0x15b08 <Clear_Common>
   15b82:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15b86:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15b8a:	d2 83       	std	Z+2, r29	; 0x02
   15b8c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b90:	85 ff       	sbrs	r24, 5
   15b92:	0c c0       	rjmp	.+24     	; 0x15bac <SS80_init+0x66>
   15b94:	f8 01       	movw	r30, r16
   15b96:	81 81       	ldd	r24, Z+1	; 0x01
   15b98:	90 e0       	ldi	r25, 0x00	; 0
   15b9a:	ed b7       	in	r30, 0x3d	; 61
   15b9c:	fe b7       	in	r31, 0x3e	; 62
   15b9e:	95 83       	std	Z+5, r25	; 0x05
   15ba0:	84 83       	std	Z+4, r24	; 0x04
   15ba2:	c1 82       	std	Z+1, r12	; 0x01
   15ba4:	d2 82       	std	Z+2, r13	; 0x02
   15ba6:	e3 82       	std	Z+3, r14	; 0x03
   15ba8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15bac:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15bb0:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15bb4:	81 81       	ldd	r24, Z+1	; 0x01
   15bb6:	90 e0       	ldi	r25, 0x00	; 0
   15bb8:	0e 94 59 86 	call	0x10cb2	; 0x10cb2 <gpib_disable_PPR>
   15bbc:	0b 50       	subi	r16, 0x0B	; 11
   15bbe:	11 09       	sbc	r17, r1
   15bc0:	c1 50       	subi	r28, 0x01	; 1
   15bc2:	98 f6       	brcc	.-90     	; 0x15b6a <SS80_init+0x24>
   15bc4:	0f 90       	pop	r0
   15bc6:	0f 90       	pop	r0
   15bc8:	0f 90       	pop	r0
   15bca:	0f 90       	pop	r0
   15bcc:	0f 90       	pop	r0
   15bce:	df 91       	pop	r29
   15bd0:	cf 91       	pop	r28
   15bd2:	1f 91       	pop	r17
   15bd4:	0f 91       	pop	r16
   15bd6:	ef 90       	pop	r14
   15bd8:	df 90       	pop	r13
   15bda:	cf 90       	pop	r12
   15bdc:	08 95       	ret

00015bde <SS80_Channel_Independent_Clear>:
   15bde:	94 df       	rcall	.-216    	; 0x15b08 <Clear_Common>
   15be0:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15be4:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15be8:	81 81       	ldd	r24, Z+1	; 0x01
   15bea:	90 e0       	ldi	r25, 0x00	; 0
   15bec:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   15bf0:	80 e0       	ldi	r24, 0x00	; 0
   15bf2:	90 e0       	ldi	r25, 0x00	; 0
   15bf4:	08 95       	ret

00015bf6 <SS80_Universal_Device_Clear>:
   15bf6:	8f e0       	ldi	r24, 0x0F	; 15
   15bf8:	90 e0       	ldi	r25, 0x00	; 0
   15bfa:	86 df       	rcall	.-244    	; 0x15b08 <Clear_Common>
   15bfc:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15c00:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15c04:	81 81       	ldd	r24, Z+1	; 0x01
   15c06:	90 e0       	ldi	r25, 0x00	; 0
   15c08:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   15c0c:	80 e0       	ldi	r24, 0x00	; 0
   15c0e:	90 e0       	ldi	r25, 0x00	; 0
   15c10:	08 95       	ret

00015c12 <SS80_Selected_Device_Clear>:
   15c12:	cf 93       	push	r28
   15c14:	df 93       	push	r29
   15c16:	00 d0       	rcall	.+0      	; 0x15c18 <SS80_Selected_Device_Clear+0x6>
   15c18:	1f 92       	push	r1
   15c1a:	ec 01       	movw	r28, r24
   15c1c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c20:	85 ff       	sbrs	r24, 5
   15c22:	0a c0       	rjmp	.+20     	; 0x15c38 <SS80_Selected_Device_Clear+0x26>
   15c24:	82 e2       	ldi	r24, 0x22	; 34
   15c26:	92 e2       	ldi	r25, 0x22	; 34
   15c28:	a0 e0       	ldi	r26, 0x00	; 0
   15c2a:	ed b7       	in	r30, 0x3d	; 61
   15c2c:	fe b7       	in	r31, 0x3e	; 62
   15c2e:	81 83       	std	Z+1, r24	; 0x01
   15c30:	92 83       	std	Z+2, r25	; 0x02
   15c32:	a3 83       	std	Z+3, r26	; 0x03
   15c34:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15c38:	ce 01       	movw	r24, r28
   15c3a:	66 df       	rcall	.-308    	; 0x15b08 <Clear_Common>
   15c3c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15c40:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15c44:	81 81       	ldd	r24, Z+1	; 0x01
   15c46:	90 e0       	ldi	r25, 0x00	; 0
   15c48:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   15c4c:	80 e0       	ldi	r24, 0x00	; 0
   15c4e:	90 e0       	ldi	r25, 0x00	; 0
   15c50:	cd b7       	in	r28, 0x3d	; 61
   15c52:	de b7       	in	r29, 0x3e	; 62
   15c54:	23 96       	adiw	r28, 0x03	; 3
   15c56:	e2 e0       	ldi	r30, 0x02	; 2
   15c58:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00015c5c <SS80_Amigo_Clear>:
   15c5c:	a6 e0       	ldi	r26, 0x06	; 6
   15c5e:	b0 e0       	ldi	r27, 0x00	; 0
   15c60:	e4 e3       	ldi	r30, 0x34	; 52
   15c62:	fe ea       	ldi	r31, 0xAE	; 174
   15c64:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
   15c68:	1d 82       	std	Y+5, r1	; 0x05
   15c6a:	1c 82       	std	Y+4, r1	; 0x04
   15c6c:	ae 01       	movw	r20, r28
   15c6e:	4c 5f       	subi	r20, 0xFC	; 252
   15c70:	5f 4f       	sbci	r21, 0xFF	; 255
   15c72:	61 e0       	ldi	r22, 0x01	; 1
   15c74:	70 e0       	ldi	r23, 0x00	; 0
   15c76:	ce 01       	movw	r24, r28
   15c78:	06 96       	adiw	r24, 0x06	; 6
   15c7a:	0e 94 b1 8a 	call	0x11562	; 0x11562 <gpib_read_str>
   15c7e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15c82:	01 97       	sbiw	r24, 0x01	; 1
   15c84:	89 f0       	breq	.+34     	; 0x15ca8 <SS80_Amigo_Clear+0x4c>
   15c86:	20 ff       	sbrs	r18, 0
   15c88:	0a c0       	rjmp	.+20     	; 0x15c9e <SS80_Amigo_Clear+0x42>
   15c8a:	8f e0       	ldi	r24, 0x0F	; 15
   15c8c:	92 e2       	ldi	r25, 0x22	; 34
   15c8e:	a0 e0       	ldi	r26, 0x00	; 0
   15c90:	ed b7       	in	r30, 0x3d	; 61
   15c92:	fe b7       	in	r31, 0x3e	; 62
   15c94:	81 83       	std	Z+1, r24	; 0x01
   15c96:	92 83       	std	Z+2, r25	; 0x02
   15c98:	a3 83       	std	Z+3, r26	; 0x03
   15c9a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15c9e:	8c 81       	ldd	r24, Y+4	; 0x04
   15ca0:	9d 81       	ldd	r25, Y+5	; 0x05
   15ca2:	88 27       	eor	r24, r24
   15ca4:	90 7d       	andi	r25, 0xD0	; 208
   15ca6:	19 c0       	rjmp	.+50     	; 0x15cda <SS80_Amigo_Clear+0x7e>
   15ca8:	25 ff       	sbrs	r18, 5
   15caa:	0a c0       	rjmp	.+20     	; 0x15cc0 <SS80_Amigo_Clear+0x64>
   15cac:	80 e0       	ldi	r24, 0x00	; 0
   15cae:	92 e2       	ldi	r25, 0x22	; 34
   15cb0:	a0 e0       	ldi	r26, 0x00	; 0
   15cb2:	ed b7       	in	r30, 0x3d	; 61
   15cb4:	fe b7       	in	r31, 0x3e	; 62
   15cb6:	81 83       	std	Z+1, r24	; 0x01
   15cb8:	92 83       	std	Z+2, r25	; 0x02
   15cba:	a3 83       	std	Z+3, r26	; 0x03
   15cbc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15cc0:	8f e0       	ldi	r24, 0x0F	; 15
   15cc2:	90 e0       	ldi	r25, 0x00	; 0
   15cc4:	21 df       	rcall	.-446    	; 0x15b08 <Clear_Common>
   15cc6:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15cca:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15cce:	81 81       	ldd	r24, Z+1	; 0x01
   15cd0:	90 e0       	ldi	r25, 0x00	; 0
   15cd2:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   15cd6:	80 e0       	ldi	r24, 0x00	; 0
   15cd8:	90 e0       	ldi	r25, 0x00	; 0
   15cda:	26 96       	adiw	r28, 0x06	; 6
   15cdc:	e2 e0       	ldi	r30, 0x02	; 2
   15cde:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00015ce2 <SS80_Cancel>:
   15ce2:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15ce6:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15cea:	11 82       	std	Z+1, r1	; 0x01
   15cec:	10 82       	st	Z, r1
   15cee:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15cf2:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15cf6:	81 81       	ldd	r24, Z+1	; 0x01
   15cf8:	90 e0       	ldi	r25, 0x00	; 0
   15cfa:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   15cfe:	80 e0       	ldi	r24, 0x00	; 0
   15d00:	90 e0       	ldi	r25, 0x00	; 0
   15d02:	08 95       	ret

00015d04 <SS80_Transparent_State>:
   15d04:	a9 e0       	ldi	r26, 0x09	; 9
   15d06:	b0 e0       	ldi	r27, 0x00	; 0
   15d08:	e8 e8       	ldi	r30, 0x88	; 136
   15d0a:	fe ea       	ldi	r31, 0xAE	; 174
   15d0c:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__+0x10>
   15d10:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15d14:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15d18:	81 81       	ldd	r24, Z+1	; 0x01
   15d1a:	90 e0       	ldi	r25, 0x00	; 0
   15d1c:	0e 94 59 86 	call	0x10cb2	; 0x10cb2 <gpib_disable_PPR>
   15d20:	80 e0       	ldi	r24, 0x00	; 0
   15d22:	91 e0       	ldi	r25, 0x01	; 1
   15d24:	99 87       	std	Y+9, r25	; 0x09
   15d26:	88 87       	std	Y+8, r24	; 0x08
   15d28:	ae 01       	movw	r20, r28
   15d2a:	48 5f       	subi	r20, 0xF8	; 248
   15d2c:	5f 4f       	sbci	r21, 0xFF	; 255
   15d2e:	60 e0       	ldi	r22, 0x00	; 0
   15d30:	72 e0       	ldi	r23, 0x02	; 2
   15d32:	82 ef       	ldi	r24, 0xF2	; 242
   15d34:	9c e1       	ldi	r25, 0x1C	; 28
   15d36:	0e 94 b1 8a 	call	0x11562	; 0x11562 <gpib_read_str>
   15d3a:	7c 01       	movw	r14, r24
   15d3c:	88 85       	ldd	r24, Y+8	; 0x08
   15d3e:	99 85       	ldd	r25, Y+9	; 0x09
   15d40:	9c 01       	movw	r18, r24
   15d42:	22 27       	eor	r18, r18
   15d44:	30 7d       	andi	r19, 0xD0	; 208
   15d46:	23 2b       	or	r18, r19
   15d48:	79 f0       	breq	.+30     	; 0x15d68 <SS80_Transparent_State+0x64>
   15d4a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d4e:	80 ff       	sbrs	r24, 0
   15d50:	da c0       	rjmp	.+436    	; 0x15f06 <SS80_Transparent_State+0x202>
   15d52:	8f e9       	ldi	r24, 0x9F	; 159
   15d54:	93 e2       	ldi	r25, 0x23	; 35
   15d56:	a0 e0       	ldi	r26, 0x00	; 0
   15d58:	ed b7       	in	r30, 0x3d	; 61
   15d5a:	fe b7       	in	r31, 0x3e	; 62
   15d5c:	81 83       	std	Z+1, r24	; 0x01
   15d5e:	92 83       	std	Z+2, r25	; 0x02
   15d60:	a3 83       	std	Z+3, r26	; 0x03
   15d62:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15d66:	cf c0       	rjmp	.+414    	; 0x15f06 <SS80_Transparent_State+0x202>
   15d68:	e1 14       	cp	r14, r1
   15d6a:	f1 04       	cpc	r15, r1
   15d6c:	09 f4       	brne	.+2      	; 0x15d70 <SS80_Transparent_State+0x6c>
   15d6e:	d0 c0       	rjmp	.+416    	; 0x15f10 <SS80_Transparent_State+0x20c>
   15d70:	90 fd       	sbrc	r25, 0
   15d72:	0e c0       	rjmp	.+28     	; 0x15d90 <SS80_Transparent_State+0x8c>
   15d74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d78:	80 ff       	sbrs	r24, 0
   15d7a:	0a c0       	rjmp	.+20     	; 0x15d90 <SS80_Transparent_State+0x8c>
   15d7c:	86 e8       	ldi	r24, 0x86	; 134
   15d7e:	93 e2       	ldi	r25, 0x23	; 35
   15d80:	a0 e0       	ldi	r26, 0x00	; 0
   15d82:	ed b7       	in	r30, 0x3d	; 61
   15d84:	fe b7       	in	r31, 0x3e	; 62
   15d86:	81 83       	std	Z+1, r24	; 0x01
   15d88:	92 83       	std	Z+2, r25	; 0x02
   15d8a:	a3 83       	std	Z+3, r26	; 0x03
   15d8c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15d90:	82 ef       	ldi	r24, 0xF2	; 242
   15d92:	a8 2e       	mov	r10, r24
   15d94:	8c e1       	ldi	r24, 0x1C	; 28
   15d96:	b8 2e       	mov	r11, r24
   15d98:	00 e0       	ldi	r16, 0x00	; 0
   15d9a:	10 e0       	ldi	r17, 0x00	; 0
   15d9c:	0e 15       	cp	r16, r14
   15d9e:	1f 05       	cpc	r17, r15
   15da0:	0c f0       	brlt	.+2      	; 0x15da4 <SS80_Transparent_State+0xa0>
   15da2:	9c c0       	rjmp	.+312    	; 0x15edc <SS80_Transparent_State+0x1d8>
   15da4:	68 01       	movw	r12, r16
   15da6:	ff ef       	ldi	r31, 0xFF	; 255
   15da8:	cf 1a       	sub	r12, r31
   15daa:	df 0a       	sbc	r13, r31
   15dac:	f5 01       	movw	r30, r10
   15dae:	81 91       	ld	r24, Z+
   15db0:	5f 01       	movw	r10, r30
   15db2:	28 2f       	mov	r18, r24
   15db4:	30 e0       	ldi	r19, 0x00	; 0
   15db6:	a9 01       	movw	r20, r18
   15db8:	40 52       	subi	r20, 0x20	; 32
   15dba:	51 09       	sbc	r21, r1
   15dbc:	40 31       	cpi	r20, 0x10	; 16
   15dbe:	51 05       	cpc	r21, r1
   15dc0:	20 f4       	brcc	.+8      	; 0x15dca <SS80_Transparent_State+0xc6>
   15dc2:	80 52       	subi	r24, 0x20	; 32
   15dc4:	86 d9       	rcall	.-3316   	; 0x150d2 <SS80_Check_Unit>
   15dc6:	86 01       	movw	r16, r12
   15dc8:	e9 cf       	rjmp	.-46     	; 0x15d9c <SS80_Transparent_State+0x98>
   15dca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15dce:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15dd2:	21 30       	cpi	r18, 0x01	; 1
   15dd4:	31 05       	cpc	r19, r1
   15dd6:	c9 f4       	brne	.+50     	; 0x15e0a <SS80_Transparent_State+0x106>
   15dd8:	0e 5f       	subi	r16, 0xFE	; 254
   15dda:	1f 4f       	sbci	r17, 0xFF	; 255
   15ddc:	80 73       	andi	r24, 0x30	; 48
   15dde:	99 27       	eor	r25, r25
   15de0:	89 2b       	or	r24, r25
   15de2:	51 f0       	breq	.+20     	; 0x15df8 <SS80_Transparent_State+0xf4>
   15de4:	81 e6       	ldi	r24, 0x61	; 97
   15de6:	93 e2       	ldi	r25, 0x23	; 35
   15de8:	a0 e0       	ldi	r26, 0x00	; 0
   15dea:	ed b7       	in	r30, 0x3d	; 61
   15dec:	fe b7       	in	r31, 0x3e	; 62
   15dee:	81 83       	std	Z+1, r24	; 0x01
   15df0:	92 83       	std	Z+2, r25	; 0x02
   15df2:	a3 83       	std	Z+3, r26	; 0x03
   15df4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15df8:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15dfc:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15e00:	81 81       	ldd	r24, Z+1	; 0x01
   15e02:	90 e0       	ldi	r25, 0x00	; 0
   15e04:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   15e08:	69 c0       	rjmp	.+210    	; 0x15edc <SS80_Transparent_State+0x1d8>
   15e0a:	22 30       	cpi	r18, 0x02	; 2
   15e0c:	31 05       	cpc	r19, r1
   15e0e:	51 f4       	brne	.+20     	; 0x15e24 <SS80_Transparent_State+0x120>
   15e10:	0b 5f       	subi	r16, 0xFB	; 251
   15e12:	1f 4f       	sbci	r17, 0xFF	; 255
   15e14:	80 73       	andi	r24, 0x30	; 48
   15e16:	99 27       	eor	r25, r25
   15e18:	89 2b       	or	r24, r25
   15e1a:	09 f4       	brne	.+2      	; 0x15e1e <SS80_Transparent_State+0x11a>
   15e1c:	5f c0       	rjmp	.+190    	; 0x15edc <SS80_Transparent_State+0x1d8>
   15e1e:	84 e4       	ldi	r24, 0x44	; 68
   15e20:	93 e2       	ldi	r25, 0x23	; 35
   15e22:	0c c0       	rjmp	.+24     	; 0x15e3c <SS80_Transparent_State+0x138>
   15e24:	23 30       	cpi	r18, 0x03	; 3
   15e26:	31 05       	cpc	r19, r1
   15e28:	91 f4       	brne	.+36     	; 0x15e4e <SS80_Transparent_State+0x14a>
   15e2a:	0b 5f       	subi	r16, 0xFB	; 251
   15e2c:	1f 4f       	sbci	r17, 0xFF	; 255
   15e2e:	80 73       	andi	r24, 0x30	; 48
   15e30:	99 27       	eor	r25, r25
   15e32:	89 2b       	or	r24, r25
   15e34:	09 f4       	brne	.+2      	; 0x15e38 <SS80_Transparent_State+0x134>
   15e36:	52 c0       	rjmp	.+164    	; 0x15edc <SS80_Transparent_State+0x1d8>
   15e38:	86 e2       	ldi	r24, 0x26	; 38
   15e3a:	93 e2       	ldi	r25, 0x23	; 35
   15e3c:	a0 e0       	ldi	r26, 0x00	; 0
   15e3e:	ed b7       	in	r30, 0x3d	; 61
   15e40:	fe b7       	in	r31, 0x3e	; 62
   15e42:	81 83       	std	Z+1, r24	; 0x01
   15e44:	92 83       	std	Z+2, r25	; 0x02
   15e46:	a3 83       	std	Z+3, r26	; 0x03
   15e48:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15e4c:	47 c0       	rjmp	.+142    	; 0x15edc <SS80_Transparent_State+0x1d8>
   15e4e:	28 30       	cpi	r18, 0x08	; 8
   15e50:	31 05       	cpc	r19, r1
   15e52:	e1 f4       	brne	.+56     	; 0x15e8c <SS80_Transparent_State+0x188>
   15e54:	85 ff       	sbrs	r24, 5
   15e56:	12 c0       	rjmp	.+36     	; 0x15e7c <SS80_Transparent_State+0x178>
   15e58:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15e5c:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15e60:	85 81       	ldd	r24, Z+5	; 0x05
   15e62:	90 e0       	ldi	r25, 0x00	; 0
   15e64:	ed b7       	in	r30, 0x3d	; 61
   15e66:	fe b7       	in	r31, 0x3e	; 62
   15e68:	95 83       	std	Z+5, r25	; 0x05
   15e6a:	84 83       	std	Z+4, r24	; 0x04
   15e6c:	8f ef       	ldi	r24, 0xFF	; 255
   15e6e:	92 e2       	ldi	r25, 0x22	; 34
   15e70:	a0 e0       	ldi	r26, 0x00	; 0
   15e72:	81 83       	std	Z+1, r24	; 0x01
   15e74:	92 83       	std	Z+2, r25	; 0x02
   15e76:	a3 83       	std	Z+3, r26	; 0x03
   15e78:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15e7c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15e80:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15e84:	85 81       	ldd	r24, Z+5	; 0x05
   15e86:	90 e0       	ldi	r25, 0x00	; 0
   15e88:	aa de       	rcall	.-684    	; 0x15bde <SS80_Channel_Independent_Clear>
   15e8a:	44 c0       	rjmp	.+136    	; 0x15f14 <SS80_Transparent_State+0x210>
   15e8c:	29 30       	cpi	r18, 0x09	; 9
   15e8e:	31 05       	cpc	r19, r1
   15e90:	b1 f4       	brne	.+44     	; 0x15ebe <SS80_Transparent_State+0x1ba>
   15e92:	85 ff       	sbrs	r24, 5
   15e94:	12 c0       	rjmp	.+36     	; 0x15eba <SS80_Transparent_State+0x1b6>
   15e96:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15e9a:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15e9e:	85 81       	ldd	r24, Z+5	; 0x05
   15ea0:	90 e0       	ldi	r25, 0x00	; 0
   15ea2:	ed b7       	in	r30, 0x3d	; 61
   15ea4:	fe b7       	in	r31, 0x3e	; 62
   15ea6:	95 83       	std	Z+5, r25	; 0x05
   15ea8:	84 83       	std	Z+4, r24	; 0x04
   15eaa:	8b ee       	ldi	r24, 0xEB	; 235
   15eac:	92 e2       	ldi	r25, 0x22	; 34
   15eae:	a0 e0       	ldi	r26, 0x00	; 0
   15eb0:	81 83       	std	Z+1, r24	; 0x01
   15eb2:	92 83       	std	Z+2, r25	; 0x02
   15eb4:	a3 83       	std	Z+3, r26	; 0x03
   15eb6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15eba:	13 df       	rcall	.-474    	; 0x15ce2 <SS80_Cancel>
   15ebc:	2b c0       	rjmp	.+86     	; 0x15f14 <SS80_Transparent_State+0x210>
   15ebe:	80 ff       	sbrs	r24, 0
   15ec0:	22 c0       	rjmp	.+68     	; 0x15f06 <SS80_Transparent_State+0x202>
   15ec2:	ed b7       	in	r30, 0x3d	; 61
   15ec4:	fe b7       	in	r31, 0x3e	; 62
   15ec6:	35 83       	std	Z+5, r19	; 0x05
   15ec8:	24 83       	std	Z+4, r18	; 0x04
   15eca:	8b ec       	ldi	r24, 0xCB	; 203
   15ecc:	92 e2       	ldi	r25, 0x22	; 34
   15ece:	a0 e0       	ldi	r26, 0x00	; 0
   15ed0:	81 83       	std	Z+1, r24	; 0x01
   15ed2:	92 83       	std	Z+2, r25	; 0x02
   15ed4:	a3 83       	std	Z+3, r26	; 0x03
   15ed6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15eda:	86 01       	movw	r16, r12
   15edc:	0e 15       	cp	r16, r14
   15ede:	1f 05       	cpc	r17, r15
   15ee0:	91 f0       	breq	.+36     	; 0x15f06 <SS80_Transparent_State+0x202>
   15ee2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ee6:	80 ff       	sbrs	r24, 0
   15ee8:	0e c0       	rjmp	.+28     	; 0x15f06 <SS80_Transparent_State+0x202>
   15eea:	ed b7       	in	r30, 0x3d	; 61
   15eec:	fe b7       	in	r31, 0x3e	; 62
   15eee:	f7 82       	std	Z+7, r15	; 0x07
   15ef0:	e6 82       	std	Z+6, r14	; 0x06
   15ef2:	15 83       	std	Z+5, r17	; 0x05
   15ef4:	04 83       	std	Z+4, r16	; 0x04
   15ef6:	8f e8       	ldi	r24, 0x8F	; 143
   15ef8:	92 e2       	ldi	r25, 0x22	; 34
   15efa:	a0 e0       	ldi	r26, 0x00	; 0
   15efc:	81 83       	std	Z+1, r24	; 0x01
   15efe:	92 83       	std	Z+2, r25	; 0x02
   15f00:	a3 83       	std	Z+3, r26	; 0x03
   15f02:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   15f06:	88 85       	ldd	r24, Y+8	; 0x08
   15f08:	99 85       	ldd	r25, Y+9	; 0x09
   15f0a:	88 27       	eor	r24, r24
   15f0c:	90 7d       	andi	r25, 0xD0	; 208
   15f0e:	02 c0       	rjmp	.+4      	; 0x15f14 <SS80_Transparent_State+0x210>
   15f10:	80 e0       	ldi	r24, 0x00	; 0
   15f12:	90 e0       	ldi	r25, 0x00	; 0
   15f14:	29 96       	adiw	r28, 0x09	; 9
   15f16:	ea e0       	ldi	r30, 0x0A	; 10
   15f18:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__+0x10>

00015f1c <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   15f1c:	a6 e0       	ldi	r26, 0x06	; 6
   15f1e:	b0 e0       	ldi	r27, 0x00	; 0
   15f20:	e4 e9       	ldi	r30, 0x94	; 148
   15f22:	ff ea       	ldi	r31, 0xAF	; 175
   15f24:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   15f28:	80 e0       	ldi	r24, 0x00	; 0
   15f2a:	91 e0       	ldi	r25, 0x01	; 1
   15f2c:	9d 83       	std	Y+5, r25	; 0x05
   15f2e:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   15f30:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15f34:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15f38:	81 e0       	ldi	r24, 0x01	; 1
   15f3a:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   15f3c:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   15f3e:	ae 01       	movw	r20, r28
   15f40:	4c 5f       	subi	r20, 0xFC	; 252
   15f42:	5f 4f       	sbci	r21, 0xFF	; 255
   15f44:	61 e0       	ldi	r22, 0x01	; 1
   15f46:	70 e0       	ldi	r23, 0x00	; 0
   15f48:	ce 01       	movw	r24, r28
   15f4a:	06 96       	adiw	r24, 0x06	; 6
   15f4c:	0e 94 53 8b 	call	0x116a6	; 0x116a6 <gpib_write_str>
   15f50:	01 97       	sbiw	r24, 0x01	; 1
   15f52:	99 f0       	breq	.+38     	; 0x15f7a <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   15f54:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f58:	80 ff       	sbrs	r24, 0
   15f5a:	0a c0       	rjmp	.+20     	; 0x15f70 <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   15f5c:	8d ed       	ldi	r24, 0xDD	; 221
   15f5e:	91 e2       	ldi	r25, 0x21	; 33
   15f60:	a0 e0       	ldi	r26, 0x00	; 0
   15f62:	ed b7       	in	r30, 0x3d	; 61
   15f64:	fe b7       	in	r31, 0x3e	; 62
   15f66:	81 83       	std	Z+1, r24	; 0x01
   15f68:	92 83       	std	Z+2, r25	; 0x02
   15f6a:	a3 83       	std	Z+3, r26	; 0x03
   15f6c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        return(status & ERROR_MASK);
   15f70:	8c 81       	ldd	r24, Y+4	; 0x04
   15f72:	9d 81       	ldd	r25, Y+5	; 0x05
   15f74:	88 27       	eor	r24, r24
   15f76:	90 7d       	andi	r25, 0xD0	; 208
   15f78:	07 c0       	rjmp	.+14     	; 0x15f88 <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   15f7a:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15f7e:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15f82:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   15f84:	80 e0       	ldi	r24, 0x00	; 0
   15f86:	90 e0       	ldi	r25, 0x00	; 0
}
   15f88:	26 96       	adiw	r28, 0x06	; 6
   15f8a:	e2 e0       	ldi	r30, 0x02	; 2
   15f8c:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00015f90 <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   15f90:	a7 e1       	ldi	r26, 0x17	; 23
   15f92:	b0 e0       	ldi	r27, 0x00	; 0
   15f94:	ee ec       	ldi	r30, 0xCE	; 206
   15f96:	ff ea       	ldi	r31, 0xAF	; 175
   15f98:	0c 94 b4 e6 	jmp	0x1cd68	; 0x1cd68 <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   15f9c:	60 91 6e 19 	lds	r22, 0x196E	; 0x80196e <SS80s>
   15fa0:	70 91 6f 19 	lds	r23, 0x196F	; 0x80196f <SS80s+0x1>
   15fa4:	fb 01       	movw	r30, r22
   15fa6:	27 81       	ldd	r18, Z+7	; 0x07
   15fa8:	30 85       	ldd	r19, Z+8	; 0x08
   15faa:	41 85       	ldd	r20, Z+9	; 0x09
   15fac:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15fae:	80 91 70 19 	lds	r24, 0x1970	; 0x801970 <SS80p>
   15fb2:	90 91 71 19 	lds	r25, 0x1971	; 0x801971 <SS80p+0x1>
   15fb6:	fc 01       	movw	r30, r24
   15fb8:	a2 89       	ldd	r26, Z+18	; 0x12
   15fba:	b3 89       	ldd	r27, Z+19	; 0x13
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   15fbc:	fb 01       	movw	r30, r22
   15fbe:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   15fc0:	1d 86       	std	Y+13, r1	; 0x0d
   15fc2:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   15fc4:	54 98       	cbi	0x0a, 4	; 10
   15fc6:	4c 99       	sbic	0x09, 4	; 9
   15fc8:	03 c0       	rjmp	.+6      	; 0x15fd0 <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   15fca:	80 e0       	ldi	r24, 0x00	; 0
   15fcc:	90 e1       	ldi	r25, 0x10	; 16
   15fce:	3e c1       	rjmp	.+636    	; 0x1624c <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15fd0:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__muluhisi3>
   15fd4:	4b 01       	movw	r8, r22
   15fd6:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15fd8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15fdc:	85 ff       	sbrs	r24, 5
   15fde:	1a c0       	rjmp	.+52     	; 0x16014 <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   15fe0:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15fe4:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15fe8:	83 85       	ldd	r24, Z+11	; 0x0b
   15fea:	94 85       	ldd	r25, Z+12	; 0x0c
   15fec:	a5 85       	ldd	r26, Z+13	; 0x0d
   15fee:	b6 85       	ldd	r27, Z+14	; 0x0e
   15ff0:	ed b7       	in	r30, 0x3d	; 61
   15ff2:	fe b7       	in	r31, 0x3e	; 62
   15ff4:	80 87       	std	Z+8, r24	; 0x08
   15ff6:	91 87       	std	Z+9, r25	; 0x09
   15ff8:	a2 87       	std	Z+10, r26	; 0x0a
   15ffa:	b3 87       	std	Z+11, r27	; 0x0b
   15ffc:	84 82       	std	Z+4, r8	; 0x04
   15ffe:	95 82       	std	Z+5, r9	; 0x05
   16000:	a6 82       	std	Z+6, r10	; 0x06
   16002:	b7 82       	std	Z+7, r11	; 0x07
   16004:	87 eb       	ldi	r24, 0xB7	; 183
   16006:	98 e2       	ldi	r25, 0x28	; 40
   16008:	a0 e0       	ldi	r26, 0x00	; 0
   1600a:	81 83       	std	Z+1, r24	; 0x01
   1600c:	92 83       	std	Z+2, r25	; 0x02
   1600e:	a3 83       	std	Z+3, r26	; 0x03
   16010:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   16014:	25 db       	rcall	.-2486   	; 0x15660 <SS80_cmd_seek>
   16016:	89 2b       	or	r24, r25
   16018:	09 f0       	breq	.+2      	; 0x1601c <SS80_locate_and_read+0x8c>
   1601a:	ae c0       	rjmp	.+348    	; 0x16178 <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   1601c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   16020:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   16024:	43 84       	ldd	r4, Z+11	; 0x0b
   16026:	54 84       	ldd	r5, Z+12	; 0x0c
   16028:	65 84       	ldd	r6, Z+13	; 0x0d
   1602a:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   1602c:	1e 86       	std	Y+14, r1	; 0x0e
   1602e:	1f 86       	std	Y+15, r1	; 0x0f
   16030:	18 8a       	std	Y+16, r1	; 0x10
   16032:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   16034:	89 e9       	ldi	r24, 0x99	; 153
   16036:	98 e2       	ldi	r25, 0x28	; 40
   16038:	9c 01       	movw	r18, r24
   1603a:	40 e0       	ldi	r20, 0x00	; 0
   1603c:	2a 8b       	std	Y+18, r18	; 0x12
   1603e:	3b 8b       	std	Y+19, r19	; 0x13
   16040:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   16042:	33 24       	eor	r3, r3
   16044:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   16046:	88 e6       	ldi	r24, 0x68	; 104
   16048:	98 e2       	ldi	r25, 0x28	; 40
   1604a:	9c 01       	movw	r18, r24
   1604c:	40 e0       	ldi	r20, 0x00	; 0
   1604e:	2d 8b       	std	Y+21, r18	; 0x15
   16050:	3e 8b       	std	Y+22, r19	; 0x16
   16052:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   16054:	34 c0       	rjmp	.+104    	; 0x160be <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16056:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16058:	0e 94 49 85 	call	0x10a92	; 0x10a92 <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   1605c:	ae 01       	movw	r20, r28
   1605e:	44 5f       	subi	r20, 0xF4	; 244
   16060:	5f 4f       	sbci	r21, 0xFF	; 255
   16062:	b6 01       	movw	r22, r12
   16064:	82 ef       	ldi	r24, 0xF2	; 242
   16066:	9c e1       	ldi	r25, 0x1C	; 28
   16068:	0e 94 53 8b 	call	0x116a6	; 0x116a6 <gpib_write_str>
   1606c:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   1606e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16072:	87 ff       	sbrs	r24, 7
   16074:	04 c0       	rjmp	.+8      	; 0x1607e <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   16076:	81 eb       	ldi	r24, 0xB1	; 177
   16078:	90 e1       	ldi	r25, 0x10	; 16
   1607a:	0e 94 5b 85 	call	0x10ab6	; 0x10ab6 <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   1607e:	c0 16       	cp	r12, r16
   16080:	d1 06       	cpc	r13, r17
   16082:	09 f0       	breq	.+2      	; 0x16086 <SS80_locate_and_read+0xf6>
   16084:	82 c0       	rjmp	.+260    	; 0x1618a <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   16086:	0d 2c       	mov	r0, r13
   16088:	00 0c       	add	r0, r0
   1608a:	ee 08       	sbc	r14, r14
   1608c:	ff 08       	sbc	r15, r15
   1608e:	8c 0c       	add	r8, r12
   16090:	9d 1c       	adc	r9, r13
   16092:	ae 1c       	adc	r10, r14
   16094:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   16096:	01 2e       	mov	r0, r17
   16098:	00 0c       	add	r0, r0
   1609a:	22 0b       	sbc	r18, r18
   1609c:	33 0b       	sbc	r19, r19
   1609e:	8e 85       	ldd	r24, Y+14	; 0x0e
   160a0:	9f 85       	ldd	r25, Y+15	; 0x0f
   160a2:	a8 89       	ldd	r26, Y+16	; 0x10
   160a4:	b9 89       	ldd	r27, Y+17	; 0x11
   160a6:	80 0f       	add	r24, r16
   160a8:	91 1f       	adc	r25, r17
   160aa:	a2 1f       	adc	r26, r18
   160ac:	b3 1f       	adc	r27, r19
   160ae:	8e 87       	std	Y+14, r24	; 0x0e
   160b0:	9f 87       	std	Y+15, r25	; 0x0f
   160b2:	a8 8b       	std	Y+16, r26	; 0x10
   160b4:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   160b6:	40 1a       	sub	r4, r16
   160b8:	51 0a       	sbc	r5, r17
   160ba:	62 0a       	sbc	r6, r18
   160bc:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   160be:	41 14       	cp	r4, r1
   160c0:	51 04       	cpc	r5, r1
   160c2:	61 04       	cpc	r6, r1
   160c4:	71 04       	cpc	r7, r1
   160c6:	09 f4       	brne	.+2      	; 0x160ca <SS80_locate_and_read+0x13a>
   160c8:	92 c0       	rjmp	.+292    	; 0x161ee <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   160ca:	54 98       	cbi	0x0a, 4	; 10
   160cc:	4c 9b       	sbis	0x09, 4	; 9
   160ce:	7d cf       	rjmp	.-262    	; 0x15fca <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   160d0:	31 e0       	ldi	r19, 0x01	; 1
   160d2:	43 16       	cp	r4, r19
   160d4:	53 06       	cpc	r5, r19
   160d6:	61 04       	cpc	r6, r1
   160d8:	71 04       	cpc	r7, r1
   160da:	08 f4       	brcc	.+2      	; 0x160de <SS80_locate_and_read+0x14e>
   160dc:	4f c0       	rjmp	.+158    	; 0x1617c <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   160de:	1d 86       	std	Y+13, r1	; 0x0d
   160e0:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   160e2:	c1 2c       	mov	r12, r1
   160e4:	dd 24       	eor	r13, r13
   160e6:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   160e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   160ec:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   160ee:	0e 94 49 85 	call	0x10a92	; 0x10a92 <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   160f2:	e0 90 6e 19 	lds	r14, 0x196E	; 0x80196e <SS80s>
   160f6:	f0 90 6f 19 	lds	r15, 0x196F	; 0x80196f <SS80s+0x1>
   160fa:	43 e0       	ldi	r20, 0x03	; 3
   160fc:	e4 0e       	add	r14, r20
   160fe:	f1 1c       	adc	r15, r1
   16100:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   16104:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   16108:	86 01       	movw	r16, r12
   1610a:	22 ef       	ldi	r18, 0xF2	; 242
   1610c:	3c e1       	ldi	r19, 0x1C	; 28
   1610e:	b5 01       	movw	r22, r10
   16110:	a4 01       	movw	r20, r8
   16112:	82 81       	ldd	r24, Z+2	; 0x02
   16114:	93 81       	ldd	r25, Z+3	; 0x03
   16116:	0e 94 9b 84 	call	0x10936	; 0x10936 <dbf_open_read>
   1611a:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   1611c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16120:	86 ff       	sbrs	r24, 6
   16122:	04 c0       	rjmp	.+8      	; 0x1612c <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   16124:	86 ea       	ldi	r24, 0xA6	; 166
   16126:	90 e1       	ldi	r25, 0x10	; 16
   16128:	0e 94 5b 85 	call	0x10ab6	; 0x10ab6 <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1612c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16130:	85 ff       	sbrs	r24, 5
   16132:	0c c0       	rjmp	.+24     	; 0x1614c <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   16134:	ed b7       	in	r30, 0x3d	; 61
   16136:	fe b7       	in	r31, 0x3e	; 62
   16138:	15 83       	std	Z+5, r17	; 0x05
   1613a:	04 83       	std	Z+4, r16	; 0x04
   1613c:	2a 89       	ldd	r18, Y+18	; 0x12
   1613e:	3b 89       	ldd	r19, Y+19	; 0x13
   16140:	4c 89       	ldd	r20, Y+20	; 0x14
   16142:	21 83       	std	Z+1, r18	; 0x01
   16144:	32 83       	std	Z+2, r19	; 0x02
   16146:	43 83       	std	Z+3, r20	; 0x03
   16148:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1614c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   16150:	17 ff       	sbrs	r17, 7
   16152:	81 cf       	rjmp	.-254    	; 0x16056 <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   16154:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   16158:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   1615c:	91 e0       	ldi	r25, 0x01	; 1
   1615e:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   16160:	80 ff       	sbrs	r24, 0
   16162:	0a c0       	rjmp	.+20     	; 0x16178 <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   16164:	81 e8       	ldi	r24, 0x81	; 129
   16166:	98 e2       	ldi	r25, 0x28	; 40
   16168:	a0 e0       	ldi	r26, 0x00	; 0
   1616a:	ed b7       	in	r30, 0x3d	; 61
   1616c:	fe b7       	in	r31, 0x3e	; 62
   1616e:	81 83       	std	Z+1, r24	; 0x01
   16170:	92 83       	std	Z+2, r25	; 0x02
   16172:	a3 83       	std	Z+3, r26	; 0x03
   16174:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            return( SS80_error_return() );
   16178:	d1 de       	rcall	.-606    	; 0x15f1c <SS80_error_return>
   1617a:	68 c0       	rjmp	.+208    	; 0x1624c <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   1617c:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   1617e:	8c 85       	ldd	r24, Y+12	; 0x0c
   16180:	9d 85       	ldd	r25, Y+13	; 0x0d
   16182:	91 60       	ori	r25, 0x01	; 1
   16184:	9d 87       	std	Y+13, r25	; 0x0d
   16186:	8c 87       	std	Y+12, r24	; 0x0c
   16188:	af cf       	rjmp	.-162    	; 0x160e8 <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   1618a:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   1618e:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   16192:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   16194:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16198:	80 ff       	sbrs	r24, 0
   1619a:	0a c0       	rjmp	.+20     	; 0x161b0 <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   1619c:	2d 89       	ldd	r18, Y+21	; 0x15
   1619e:	3e 89       	ldd	r19, Y+22	; 0x16
   161a0:	4f 89       	ldd	r20, Y+23	; 0x17
   161a2:	ed b7       	in	r30, 0x3d	; 61
   161a4:	fe b7       	in	r31, 0x3e	; 62
   161a6:	21 83       	std	Z+1, r18	; 0x01
   161a8:	32 83       	std	Z+2, r19	; 0x02
   161aa:	43 83       	std	Z+3, r20	; 0x03
   161ac:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            if(status & ERROR_MASK)
   161b0:	8c 85       	ldd	r24, Y+12	; 0x0c
   161b2:	9d 85       	ldd	r25, Y+13	; 0x0d
   161b4:	88 27       	eor	r24, r24
   161b6:	90 7d       	andi	r25, 0xD0	; 208
   161b8:	89 2b       	or	r24, r25
   161ba:	09 f4       	brne	.+2      	; 0x161be <SS80_locate_and_read+0x22e>
   161bc:	64 cf       	rjmp	.-312    	; 0x16086 <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   161be:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   161c2:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   161c6:	83 81       	ldd	r24, Z+3	; 0x03
   161c8:	94 81       	ldd	r25, Z+4	; 0x04
   161ca:	80 62       	ori	r24, 0x20	; 32
   161cc:	94 83       	std	Z+4, r25	; 0x04
   161ce:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   161d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161d4:	80 ff       	sbrs	r24, 0
   161d6:	21 c0       	rjmp	.+66     	; 0x1621a <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   161d8:	83 e4       	ldi	r24, 0x43	; 67
   161da:	98 e2       	ldi	r25, 0x28	; 40
   161dc:	a0 e0       	ldi	r26, 0x00	; 0
   161de:	ed b7       	in	r30, 0x3d	; 61
   161e0:	fe b7       	in	r31, 0x3e	; 62
   161e2:	81 83       	std	Z+1, r24	; 0x01
   161e4:	92 83       	std	Z+2, r25	; 0x02
   161e6:	a3 83       	std	Z+3, r26	; 0x03
   161e8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   161ec:	16 c0       	rjmp	.+44     	; 0x1621a <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   161ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161f2:	85 ff       	sbrs	r24, 5
   161f4:	12 c0       	rjmp	.+36     	; 0x1621a <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   161f6:	8e 85       	ldd	r24, Y+14	; 0x0e
   161f8:	9f 85       	ldd	r25, Y+15	; 0x0f
   161fa:	a8 89       	ldd	r26, Y+16	; 0x10
   161fc:	b9 89       	ldd	r27, Y+17	; 0x11
   161fe:	ed b7       	in	r30, 0x3d	; 61
   16200:	fe b7       	in	r31, 0x3e	; 62
   16202:	84 83       	std	Z+4, r24	; 0x04
   16204:	95 83       	std	Z+5, r25	; 0x05
   16206:	a6 83       	std	Z+6, r26	; 0x06
   16208:	b7 83       	std	Z+7, r27	; 0x07
   1620a:	8b e1       	ldi	r24, 0x1B	; 27
   1620c:	98 e2       	ldi	r25, 0x28	; 40
   1620e:	a0 e0       	ldi	r26, 0x00	; 0
   16210:	81 83       	std	Z+1, r24	; 0x01
   16212:	92 83       	std	Z+2, r25	; 0x02
   16214:	a3 83       	std	Z+3, r26	; 0x03
   16216:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   1621a:	00 91 6e 19 	lds	r16, 0x196E	; 0x80196e <SS80s>
   1621e:	10 91 6f 19 	lds	r17, 0x196F	; 0x80196f <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   16222:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   16226:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   1622a:	22 89       	ldd	r18, Z+18	; 0x12
   1622c:	33 89       	ldd	r19, Z+19	; 0x13
   1622e:	40 e0       	ldi	r20, 0x00	; 0
   16230:	50 e0       	ldi	r21, 0x00	; 0
   16232:	c5 01       	movw	r24, r10
   16234:	b4 01       	movw	r22, r8
   16236:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__udivmodsi4>
   1623a:	f8 01       	movw	r30, r16
   1623c:	27 83       	std	Z+7, r18	; 0x07
   1623e:	30 87       	std	Z+8, r19	; 0x08
   16240:	41 87       	std	Z+9, r20	; 0x09
   16242:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   16244:	8c 85       	ldd	r24, Y+12	; 0x0c
   16246:	9d 85       	ldd	r25, Y+13	; 0x0d
   16248:	88 27       	eor	r24, r24
   1624a:	90 7d       	andi	r25, 0xD0	; 208
}
   1624c:	67 96       	adiw	r28, 0x17	; 23
   1624e:	e1 e1       	ldi	r30, 0x11	; 17
   16250:	0c 94 d0 e6 	jmp	0x1cda0	; 0x1cda0 <__epilogue_restores__+0x2>

00016254 <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   16254:	cf 93       	push	r28
   16256:	df 93       	push	r29
   16258:	00 d0       	rcall	.+0      	; 0x1625a <SS80_Execute_State+0x6>
   1625a:	00 d0       	rcall	.+0      	; 0x1625c <SS80_Execute_State+0x8>
   1625c:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   1625e:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   16262:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   16266:	81 81       	ldd	r24, Z+1	; 0x01
   16268:	90 e0       	ldi	r25, 0x00	; 0
   1626a:	0e 94 59 86 	call	0x10cb2	; 0x10cb2 <gpib_disable_PPR>
    switch(SS80s->estate)
   1626e:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   16272:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   16276:	80 81       	ld	r24, Z
   16278:	91 81       	ldd	r25, Z+1	; 0x01
   1627a:	82 30       	cpi	r24, 0x02	; 2
   1627c:	91 05       	cpc	r25, r1
   1627e:	89 f0       	breq	.+34     	; 0x162a2 <SS80_Execute_State+0x4e>
   16280:	3c f4       	brge	.+14     	; 0x16290 <SS80_Execute_State+0x3c>
   16282:	00 97       	sbiw	r24, 0x00	; 0
   16284:	81 f1       	breq	.+96     	; 0x162e6 <SS80_Execute_State+0x92>
   16286:	81 30       	cpi	r24, 0x01	; 1
   16288:	91 05       	cpc	r25, r1
   1628a:	b9 f4       	brne	.+46     	; 0x162ba <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   1628c:	81 de       	rcall	.-766    	; 0x15f90 <SS80_locate_and_read>
   1628e:	0d c0       	rjmp	.+26     	; 0x162aa <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   16290:	83 30       	cpi	r24, 0x03	; 3
   16292:	91 05       	cpc	r25, r1
   16294:	41 f0       	breq	.+16     	; 0x162a6 <SS80_Execute_State+0x52>
   16296:	84 30       	cpi	r24, 0x04	; 4
   16298:	91 05       	cpc	r25, r1
   1629a:	79 f4       	brne	.+30     	; 0x162ba <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   1629c:	0e 94 f9 a7 	call	0x14ff2	; 0x14ff2 <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   162a0:	04 c0       	rjmp	.+8      	; 0x162aa <SS80_Execute_State+0x56>
   162a2:	53 da       	rcall	.-2906   	; 0x1574a <SS80_locate_and_write>
   162a4:	02 c0       	rjmp	.+4      	; 0x162aa <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   162a6:	0e 94 78 a7 	call	0x14ef0	; 0x14ef0 <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   162aa:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   162ac:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   162b0:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   162b4:	11 82       	std	Z+1, r1	; 0x01
   162b6:	10 82       	st	Z, r1
            break;
   162b8:	18 c0       	rjmp	.+48     	; 0x162ea <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   162ba:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   162be:	20 ff       	sbrs	r18, 0
   162c0:	0c c0       	rjmp	.+24     	; 0x162da <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   162c2:	ed b7       	in	r30, 0x3d	; 61
   162c4:	fe b7       	in	r31, 0x3e	; 62
   162c6:	95 83       	std	Z+5, r25	; 0x05
   162c8:	84 83       	std	Z+4, r24	; 0x04
   162ca:	8f ed       	ldi	r24, 0xDF	; 223
   162cc:	98 e2       	ldi	r25, 0x28	; 40
   162ce:	a0 e0       	ldi	r26, 0x00	; 0
   162d0:	81 83       	std	Z+1, r24	; 0x01
   162d2:	92 83       	std	Z+2, r25	; 0x02
   162d4:	a3 83       	std	Z+3, r26	; 0x03
   162d6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            SS80s->estate = EXEC_IDLE;
   162da:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   162de:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   162e2:	11 82       	std	Z+1, r1	; 0x01
   162e4:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   162e6:	c0 e0       	ldi	r28, 0x00	; 0
   162e8:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   162ea:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   162ee:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   162f2:	81 81       	ldd	r24, Z+1	; 0x01
   162f4:	90 e0       	ldi	r25, 0x00	; 0
   162f6:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
    return(ret);
}
   162fa:	ce 01       	movw	r24, r28
   162fc:	cd b7       	in	r28, 0x3d	; 61
   162fe:	de b7       	in	r29, 0x3e	; 62
   16300:	25 96       	adiw	r28, 0x05	; 5
   16302:	e2 e0       	ldi	r30, 0x02	; 2
   16304:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00016308 <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   16308:	a9 e0       	ldi	r26, 0x09	; 9
   1630a:	b0 e0       	ldi	r27, 0x00	; 0
   1630c:	ea e8       	ldi	r30, 0x8A	; 138
   1630e:	f1 eb       	ldi	r31, 0xB1	; 177
   16310:	0c 94 c2 e6 	jmp	0x1cd84	; 0x1cd84 <__prologue_saves__+0x1e>
   16314:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   16316:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   1631a:	90 e0       	ldi	r25, 0x00	; 0
   1631c:	0e 94 65 8c 	call	0x118ca	; 0x118ca <SS80_is_MTA>
   16320:	89 2b       	or	r24, r25
   16322:	19 f0       	breq	.+6      	; 0x1632a <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   16324:	15 36       	cpi	r17, 0x65	; 101
   16326:	19 f5       	brne	.+70     	; 0x1636e <SS80_COMMANDS+0x66>
   16328:	09 c0       	rjmp	.+18     	; 0x1633c <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   1632a:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1632e:	90 e0       	ldi	r25, 0x00	; 0
   16330:	0e 94 53 8c 	call	0x118a6	; 0x118a6 <SS80_is_MLA>
   16334:	ec 01       	movw	r28, r24
   16336:	89 2b       	or	r24, r25
   16338:	a9 f7       	brne	.-22     	; 0x16324 <SS80_COMMANDS+0x1c>
   1633a:	ad c0       	rjmp	.+346    	; 0x16496 <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   1633c:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   16340:	90 e0       	ldi	r25, 0x00	; 0
   16342:	0e 94 53 8c 	call	0x118a6	; 0x118a6 <SS80_is_MLA>
   16346:	89 2b       	or	r24, r25
   16348:	09 f4       	brne	.+2      	; 0x1634c <SS80_COMMANDS+0x44>
   1634a:	a2 c0       	rjmp	.+324    	; 0x16490 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1634c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16350:	85 ff       	sbrs	r24, 5
   16352:	0a c0       	rjmp	.+20     	; 0x16368 <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   16354:	87 ec       	ldi	r24, 0xC7	; 199
   16356:	91 e2       	ldi	r25, 0x21	; 33
   16358:	a0 e0       	ldi	r26, 0x00	; 0
   1635a:	ed b7       	in	r30, 0x3d	; 61
   1635c:	fe b7       	in	r31, 0x3e	; 62
   1635e:	81 83       	std	Z+1, r24	; 0x01
   16360:	92 83       	std	Z+2, r25	; 0x02
   16362:	a3 83       	std	Z+3, r26	; 0x03
   16364:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
                return ( SS80_Command_State() );
   16368:	0e 94 b9 a8 	call	0x15172	; 0x15172 <SS80_Command_State>
   1636c:	73 c0       	rjmp	.+230    	; 0x16454 <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   1636e:	1e 36       	cpi	r17, 0x6E	; 110
   16370:	01 f5       	brne	.+64     	; 0x163b2 <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   16372:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   16376:	90 e0       	ldi	r25, 0x00	; 0
   16378:	0e 94 53 8c 	call	0x118a6	; 0x118a6 <SS80_is_MLA>
   1637c:	89 2b       	or	r24, r25
   1637e:	79 f0       	breq	.+30     	; 0x1639e <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16380:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16384:	85 ff       	sbrs	r24, 5
   16386:	13 c0       	rjmp	.+38     	; 0x163ae <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   16388:	81 eb       	ldi	r24, 0xB1	; 177
   1638a:	91 e2       	ldi	r25, 0x21	; 33
   1638c:	a0 e0       	ldi	r26, 0x00	; 0
   1638e:	ed b7       	in	r30, 0x3d	; 61
   16390:	fe b7       	in	r31, 0x3e	; 62
   16392:	81 83       	std	Z+1, r24	; 0x01
   16394:	92 83       	std	Z+2, r25	; 0x02
   16396:	a3 83       	std	Z+3, r26	; 0x03
   16398:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1639c:	08 c0       	rjmp	.+16     	; 0x163ae <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   1639e:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   163a2:	90 e0       	ldi	r25, 0x00	; 0
   163a4:	0e 94 65 8c 	call	0x118ca	; 0x118ca <SS80_is_MTA>
   163a8:	89 2b       	or	r24, r25
   163aa:	51 f7       	brne	.-44     	; 0x16380 <SS80_COMMANDS+0x78>
   163ac:	71 c0       	rjmp	.+226    	; 0x16490 <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   163ae:	52 df       	rcall	.-348    	; 0x16254 <SS80_Execute_State>
   163b0:	51 c0       	rjmp	.+162    	; 0x16454 <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   163b2:	10 37       	cpi	r17, 0x70	; 112
   163b4:	b9 f5       	brne	.+110    	; 0x16424 <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   163b6:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   163ba:	90 e0       	ldi	r25, 0x00	; 0
   163bc:	0e 94 65 8c 	call	0x118ca	; 0x118ca <SS80_is_MTA>
   163c0:	89 2b       	or	r24, r25
   163c2:	81 f0       	breq	.+32     	; 0x163e4 <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   163c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163c8:	85 ff       	sbrs	r24, 5
   163ca:	0a c0       	rjmp	.+20     	; 0x163e0 <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   163cc:	8c e9       	ldi	r24, 0x9C	; 156
   163ce:	91 e2       	ldi	r25, 0x21	; 33
   163d0:	a0 e0       	ldi	r26, 0x00	; 0
   163d2:	ed b7       	in	r30, 0x3d	; 61
   163d4:	fe b7       	in	r31, 0x3e	; 62
   163d6:	81 83       	std	Z+1, r24	; 0x01
   163d8:	92 83       	std	Z+2, r25	; 0x02
   163da:	a3 83       	std	Z+3, r26	; 0x03
   163dc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
                return( SS80_Report() );
   163e0:	46 db       	rcall	.-2420   	; 0x15a6e <SS80_Report>
   163e2:	38 c0       	rjmp	.+112    	; 0x16454 <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   163e4:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   163e8:	90 e0       	ldi	r25, 0x00	; 0
   163ea:	0e 94 53 8c 	call	0x118a6	; 0x118a6 <SS80_is_MLA>
   163ee:	89 2b       	or	r24, r25
   163f0:	09 f4       	brne	.+2      	; 0x163f4 <SS80_COMMANDS+0xec>
   163f2:	4e c0       	rjmp	.+156    	; 0x16490 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   163f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163f8:	85 ff       	sbrs	r24, 5
   163fa:	0a c0       	rjmp	.+20     	; 0x16410 <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   163fc:	8d e8       	ldi	r24, 0x8D	; 141
   163fe:	91 e2       	ldi	r25, 0x21	; 33
   16400:	a0 e0       	ldi	r26, 0x00	; 0
   16402:	ed b7       	in	r30, 0x3d	; 61
   16404:	fe b7       	in	r31, 0x3e	; 62
   16406:	81 83       	std	Z+1, r24	; 0x01
   16408:	92 83       	std	Z+2, r25	; 0x02
   1640a:	a3 83       	std	Z+3, r26	; 0x03
   1640c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   16410:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   16414:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   16418:	81 81       	ldd	r24, Z+1	; 0x01
   1641a:	90 e0       	ldi	r25, 0x00	; 0
   1641c:	0e 94 59 86 	call	0x10cb2	; 0x10cb2 <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   16420:	1d dc       	rcall	.-1990   	; 0x15c5c <SS80_Amigo_Clear>
   16422:	18 c0       	rjmp	.+48     	; 0x16454 <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   16424:	12 37       	cpi	r17, 0x72	; 114
   16426:	c1 f4       	brne	.+48     	; 0x16458 <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   16428:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1642c:	90 e0       	ldi	r25, 0x00	; 0
   1642e:	0e 94 53 8c 	call	0x118a6	; 0x118a6 <SS80_is_MLA>
   16432:	89 2b       	or	r24, r25
   16434:	89 f0       	breq	.+34     	; 0x16458 <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16436:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1643a:	85 ff       	sbrs	r24, 5
   1643c:	0a c0       	rjmp	.+20     	; 0x16452 <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   1643e:	89 e7       	ldi	r24, 0x79	; 121
   16440:	91 e2       	ldi	r25, 0x21	; 33
   16442:	a0 e0       	ldi	r26, 0x00	; 0
   16444:	ed b7       	in	r30, 0x3d	; 61
   16446:	fe b7       	in	r31, 0x3e	; 62
   16448:	81 83       	std	Z+1, r24	; 0x01
   1644a:	92 83       	std	Z+2, r25	; 0x02
   1644c:	a3 83       	std	Z+3, r26	; 0x03
   1644e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
                return( SS80_Transparent_State() );
   16452:	58 dc       	rcall	.-1872   	; 0x15d04 <SS80_Transparent_State>
   16454:	ec 01       	movw	r28, r24
   16456:	3b c0       	rjmp	.+118    	; 0x164ce <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   16458:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1645c:	80 ff       	sbrs	r24, 0
   1645e:	18 c0       	rjmp	.+48     	; 0x16490 <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   16460:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   16464:	90 e0       	ldi	r25, 0x00	; 0
   16466:	ed b7       	in	r30, 0x3d	; 61
   16468:	fe b7       	in	r31, 0x3e	; 62
   1646a:	91 87       	std	Z+9, r25	; 0x09
   1646c:	80 87       	std	Z+8, r24	; 0x08
   1646e:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   16472:	90 e0       	ldi	r25, 0x00	; 0
   16474:	97 83       	std	Z+7, r25	; 0x07
   16476:	86 83       	std	Z+6, r24	; 0x06
   16478:	81 2f       	mov	r24, r17
   1647a:	90 e0       	ldi	r25, 0x00	; 0
   1647c:	95 83       	std	Z+5, r25	; 0x05
   1647e:	84 83       	std	Z+4, r24	; 0x04
   16480:	85 e4       	ldi	r24, 0x45	; 69
   16482:	91 e2       	ldi	r25, 0x21	; 33
   16484:	a0 e0       	ldi	r26, 0x00	; 0
   16486:	81 83       	std	Z+1, r24	; 0x01
   16488:	92 83       	std	Z+2, r25	; 0x02
   1648a:	a3 83       	std	Z+3, r26	; 0x03
   1648c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   16490:	c0 e0       	ldi	r28, 0x00	; 0
   16492:	d0 e0       	ldi	r29, 0x00	; 0
   16494:	1c c0       	rjmp	.+56     	; 0x164ce <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   16496:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1649a:	80 ff       	sbrs	r24, 0
   1649c:	f9 cf       	rjmp	.-14     	; 0x16490 <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   1649e:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   164a2:	90 e0       	ldi	r25, 0x00	; 0
   164a4:	ed b7       	in	r30, 0x3d	; 61
   164a6:	fe b7       	in	r31, 0x3e	; 62
   164a8:	91 87       	std	Z+9, r25	; 0x09
   164aa:	80 87       	std	Z+8, r24	; 0x08
   164ac:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   164b0:	90 e0       	ldi	r25, 0x00	; 0
   164b2:	97 83       	std	Z+7, r25	; 0x07
   164b4:	86 83       	std	Z+6, r24	; 0x06
   164b6:	81 2f       	mov	r24, r17
   164b8:	90 e0       	ldi	r25, 0x00	; 0
   164ba:	95 83       	std	Z+5, r25	; 0x05
   164bc:	84 83       	std	Z+4, r24	; 0x04
   164be:	81 e1       	ldi	r24, 0x11	; 17
   164c0:	91 e2       	ldi	r25, 0x21	; 33
   164c2:	a0 e0       	ldi	r26, 0x00	; 0
   164c4:	81 83       	std	Z+1, r24	; 0x01
   164c6:	92 83       	std	Z+2, r25	; 0x02
   164c8:	a3 83       	std	Z+3, r26	; 0x03
   164ca:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   164ce:	ce 01       	movw	r24, r28
   164d0:	cd b7       	in	r28, 0x3d	; 61
   164d2:	de b7       	in	r29, 0x3e	; 62
   164d4:	29 96       	adiw	r28, 0x09	; 9
   164d6:	e3 e0       	ldi	r30, 0x03	; 3
   164d8:	0c 94 de e6 	jmp	0x1cdbc	; 0x1cdbc <__epilogue_restores__+0x1e>

000164dc <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   164dc:	cf 92       	push	r12
   164de:	df 92       	push	r13
   164e0:	ef 92       	push	r14
   164e2:	0f 93       	push	r16
   164e4:	1f 93       	push	r17
   164e6:	cf 93       	push	r28
   164e8:	df 93       	push	r29
   164ea:	00 d0       	rcall	.+0      	; 0x164ec <amigo_overflow_check+0x10>
   164ec:	00 d0       	rcall	.+0      	; 0x164ee <amigo_overflow_check+0x12>
   164ee:	1f 92       	push	r1
   164f0:	ec 01       	movw	r28, r24
   164f2:	8b 01       	movw	r16, r22
   164f4:	80 e0       	ldi	r24, 0x00	; 0
   164f6:	90 e0       	ldi	r25, 0x00	; 0
   164f8:	29 ec       	ldi	r18, 0xC9	; 201
   164fa:	30 e3       	ldi	r19, 0x30	; 48
   164fc:	69 01       	movw	r12, r18
   164fe:	e1 2c       	mov	r14, r1
   16500:	2d 81       	ldd	r18, Y+5	; 0x05
   16502:	30 e0       	ldi	r19, 0x00	; 0
   16504:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16508:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   1650c:	42 85       	ldd	r20, Z+10	; 0x0a
   1650e:	53 85       	ldd	r21, Z+11	; 0x0b
   16510:	24 17       	cp	r18, r20
   16512:	35 07       	cpc	r19, r21
   16514:	64 f1       	brlt	.+88     	; 0x1656e <amigo_overflow_check+0x92>
   16516:	1d 82       	std	Y+5, r1	; 0x05
   16518:	2c 81       	ldd	r18, Y+4	; 0x04
   1651a:	2f 5f       	subi	r18, 0xFF	; 255
   1651c:	2c 83       	std	Y+4, r18	; 0x04
   1651e:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16522:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16526:	2c 81       	ldd	r18, Y+4	; 0x04
   16528:	30 e0       	ldi	r19, 0x00	; 0
   1652a:	44 85       	ldd	r20, Z+12	; 0x0c
   1652c:	55 85       	ldd	r21, Z+13	; 0x0d
   1652e:	24 17       	cp	r18, r20
   16530:	35 07       	cpc	r19, r21
   16532:	34 f3       	brlt	.-52     	; 0x16500 <amigo_overflow_check+0x24>
   16534:	1c 82       	std	Y+4, r1	; 0x04
   16536:	2b 81       	ldd	r18, Y+3	; 0x03
   16538:	2f 5f       	subi	r18, 0xFF	; 255
   1653a:	2b 83       	std	Y+3, r18	; 0x03
   1653c:	30 e0       	ldi	r19, 0x00	; 0
   1653e:	46 85       	ldd	r20, Z+14	; 0x0e
   16540:	57 85       	ldd	r21, Z+15	; 0x0f
   16542:	24 17       	cp	r18, r20
   16544:	35 07       	cpc	r19, r21
   16546:	5c f3       	brlt	.-42     	; 0x1651e <amigo_overflow_check+0x42>
   16548:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1654c:	80 ff       	sbrs	r24, 0
   1654e:	0c c0       	rjmp	.+24     	; 0x16568 <amigo_overflow_check+0x8c>
   16550:	01 15       	cp	r16, r1
   16552:	11 05       	cpc	r17, r1
   16554:	49 f0       	breq	.+18     	; 0x16568 <amigo_overflow_check+0x8c>
   16556:	ed b7       	in	r30, 0x3d	; 61
   16558:	fe b7       	in	r31, 0x3e	; 62
   1655a:	15 83       	std	Z+5, r17	; 0x05
   1655c:	04 83       	std	Z+4, r16	; 0x04
   1655e:	c1 82       	std	Z+1, r12	; 0x01
   16560:	d2 82       	std	Z+2, r13	; 0x02
   16562:	e3 82       	std	Z+3, r14	; 0x03
   16564:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   16568:	81 e0       	ldi	r24, 0x01	; 1
   1656a:	90 e0       	ldi	r25, 0x00	; 0
   1656c:	d8 cf       	rjmp	.-80     	; 0x1651e <amigo_overflow_check+0x42>
   1656e:	0f 90       	pop	r0
   16570:	0f 90       	pop	r0
   16572:	0f 90       	pop	r0
   16574:	0f 90       	pop	r0
   16576:	0f 90       	pop	r0
   16578:	df 91       	pop	r29
   1657a:	cf 91       	pop	r28
   1657c:	1f 91       	pop	r17
   1657e:	0f 91       	pop	r16
   16580:	ef 90       	pop	r14
   16582:	df 90       	pop	r13
   16584:	cf 90       	pop	r12
   16586:	08 95       	ret

00016588 <amigo_chs_to_logical>:
   16588:	a1 e1       	ldi	r26, 0x11	; 17
   1658a:	b0 e0       	ldi	r27, 0x00	; 0
   1658c:	ea ec       	ldi	r30, 0xCA	; 202
   1658e:	f2 eb       	ldi	r31, 0xB2	; 178
   16590:	0c 94 b7 e6 	jmp	0x1cd6e	; 0x1cd6e <__prologue_saves__+0x8>
   16594:	8b 01       	movw	r16, r22
   16596:	60 91 6c 19 	lds	r22, 0x196C	; 0x80196c <AMIGOp>
   1659a:	70 91 6d 19 	lds	r23, 0x196D	; 0x80196d <AMIGOp+0x1>
   1659e:	fb 01       	movw	r30, r22
   165a0:	42 85       	ldd	r20, Z+10	; 0x0a
   165a2:	53 85       	ldd	r21, Z+11	; 0x0b
   165a4:	fc 01       	movw	r30, r24
   165a6:	c4 81       	ldd	r28, Z+4	; 0x04
   165a8:	d0 e0       	ldi	r29, 0x00	; 0
   165aa:	4c 9f       	mul	r20, r28
   165ac:	90 01       	movw	r18, r0
   165ae:	4d 9f       	mul	r20, r29
   165b0:	30 0d       	add	r19, r0
   165b2:	5c 9f       	mul	r21, r28
   165b4:	30 0d       	add	r19, r0
   165b6:	11 24       	eor	r1, r1
   165b8:	49 01       	movw	r8, r18
   165ba:	33 0f       	add	r19, r19
   165bc:	aa 08       	sbc	r10, r10
   165be:	bb 08       	sbc	r11, r11
   165c0:	63 80       	ldd	r6, Z+3	; 0x03
   165c2:	71 2c       	mov	r7, r1
   165c4:	fb 01       	movw	r30, r22
   165c6:	e4 84       	ldd	r14, Z+12	; 0x0c
   165c8:	f5 84       	ldd	r15, Z+13	; 0x0d
   165ca:	4e 9d       	mul	r20, r14
   165cc:	d0 01       	movw	r26, r0
   165ce:	4f 9d       	mul	r20, r15
   165d0:	b0 0d       	add	r27, r0
   165d2:	5e 9d       	mul	r21, r14
   165d4:	b0 0d       	add	r27, r0
   165d6:	11 24       	eor	r1, r1
   165d8:	a6 9d       	mul	r26, r6
   165da:	90 01       	movw	r18, r0
   165dc:	a7 9d       	mul	r26, r7
   165de:	30 0d       	add	r19, r0
   165e0:	b6 9d       	mul	r27, r6
   165e2:	30 0d       	add	r19, r0
   165e4:	11 24       	eor	r1, r1
   165e6:	69 01       	movw	r12, r18
   165e8:	33 0f       	add	r19, r19
   165ea:	ee 08       	sbc	r14, r14
   165ec:	ff 08       	sbc	r15, r15
   165ee:	8c 0c       	add	r8, r12
   165f0:	9d 1c       	adc	r9, r13
   165f2:	ae 1c       	adc	r10, r14
   165f4:	bf 1c       	adc	r11, r15
   165f6:	fc 01       	movw	r30, r24
   165f8:	f5 80       	ldd	r15, Z+5	; 0x05
   165fa:	a5 01       	movw	r20, r10
   165fc:	94 01       	movw	r18, r8
   165fe:	2f 0d       	add	r18, r15
   16600:	31 1d       	adc	r19, r1
   16602:	41 1d       	adc	r20, r1
   16604:	51 1d       	adc	r21, r1
   16606:	fb 01       	movw	r30, r22
   16608:	a0 85       	ldd	r26, Z+8	; 0x08
   1660a:	b1 85       	ldd	r27, Z+9	; 0x09
   1660c:	0e 94 9d e6 	call	0x1cd3a	; 0x1cd3a <__mulshisi3>
   16610:	4b 01       	movw	r8, r22
   16612:	5c 01       	movw	r10, r24
   16614:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16618:	85 ff       	sbrs	r24, 5
   1661a:	22 c0       	rjmp	.+68     	; 0x16660 <amigo_chs_to_logical+0xd8>
   1661c:	8f 2d       	mov	r24, r15
   1661e:	90 e0       	ldi	r25, 0x00	; 0
   16620:	ed b7       	in	r30, 0x3d	; 61
   16622:	fe b7       	in	r31, 0x3e	; 62
   16624:	91 8b       	std	Z+17, r25	; 0x11
   16626:	80 8b       	std	Z+16, r24	; 0x10
   16628:	d7 87       	std	Z+15, r29	; 0x0f
   1662a:	c6 87       	std	Z+14, r28	; 0x0e
   1662c:	75 86       	std	Z+13, r7	; 0x0d
   1662e:	64 86       	std	Z+12, r6	; 0x0c
   16630:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16634:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16638:	81 81       	ldd	r24, Z+1	; 0x01
   1663a:	90 e0       	ldi	r25, 0x00	; 0
   1663c:	ed b7       	in	r30, 0x3d	; 61
   1663e:	fe b7       	in	r31, 0x3e	; 62
   16640:	93 87       	std	Z+11, r25	; 0x0b
   16642:	82 87       	std	Z+10, r24	; 0x0a
   16644:	86 82       	std	Z+6, r8	; 0x06
   16646:	97 82       	std	Z+7, r9	; 0x07
   16648:	a0 86       	std	Z+8, r10	; 0x08
   1664a:	b1 86       	std	Z+9, r11	; 0x09
   1664c:	15 83       	std	Z+5, r17	; 0x05
   1664e:	04 83       	std	Z+4, r16	; 0x04
   16650:	86 e7       	ldi	r24, 0x76	; 118
   16652:	90 e3       	ldi	r25, 0x30	; 48
   16654:	a0 e0       	ldi	r26, 0x00	; 0
   16656:	81 83       	std	Z+1, r24	; 0x01
   16658:	92 83       	std	Z+2, r25	; 0x02
   1665a:	a3 83       	std	Z+3, r26	; 0x03
   1665c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   16660:	c5 01       	movw	r24, r10
   16662:	b4 01       	movw	r22, r8
   16664:	cd b7       	in	r28, 0x3d	; 61
   16666:	de b7       	in	r29, 0x3e	; 62
   16668:	61 96       	adiw	r28, 0x11	; 17
   1666a:	ee e0       	ldi	r30, 0x0E	; 14
   1666c:	0c 94 d3 e6 	jmp	0x1cda6	; 0x1cda6 <__epilogue_restores__+0x8>

00016670 <amigo_init>:
   16670:	ff 92       	push	r15
   16672:	0f 93       	push	r16
   16674:	1f 93       	push	r17
   16676:	cf 93       	push	r28
   16678:	df 93       	push	r29
   1667a:	05 e7       	ldi	r16, 0x75	; 117
   1667c:	1f e1       	ldi	r17, 0x1F	; 31
   1667e:	cb e0       	ldi	r28, 0x0B	; 11
   16680:	d4 e0       	ldi	r29, 0x04	; 4
   16682:	82 e0       	ldi	r24, 0x02	; 2
   16684:	f8 2e       	mov	r15, r24
   16686:	d8 01       	movw	r26, r16
   16688:	8c 91       	ld	r24, X
   1668a:	81 30       	cpi	r24, 0x01	; 1
   1668c:	31 f5       	brne	.+76     	; 0x166da <amigo_init+0x6a>
   1668e:	8c 2f       	mov	r24, r28
   16690:	0e 94 11 97 	call	0x12e22	; 0x12e22 <set_active_device>
   16694:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16698:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1669c:	10 82       	st	Z, r1
   1669e:	9f 01       	movw	r18, r30
   166a0:	27 5f       	subi	r18, 0xF7	; 247
   166a2:	3f 4f       	sbci	r19, 0xFF	; 255
   166a4:	d9 01       	movw	r26, r18
   166a6:	8d 2f       	mov	r24, r29
   166a8:	1d 92       	st	X+, r1
   166aa:	8a 95       	dec	r24
   166ac:	e9 f7       	brne	.-6      	; 0x166a8 <amigo_init+0x38>
   166ae:	2c 5f       	subi	r18, 0xFC	; 252
   166b0:	3f 4f       	sbci	r19, 0xFF	; 255
   166b2:	d9 01       	movw	r26, r18
   166b4:	8d 2f       	mov	r24, r29
   166b6:	1d 92       	st	X+, r1
   166b8:	8a 95       	dec	r24
   166ba:	e9 f7       	brne	.-6      	; 0x166b6 <amigo_init+0x46>
   166bc:	11 82       	std	Z+1, r1	; 0x01
   166be:	15 82       	std	Z+5, r1	; 0x05
   166c0:	14 82       	std	Z+4, r1	; 0x04
   166c2:	13 82       	std	Z+3, r1	; 0x03
   166c4:	f6 82       	std	Z+6, r15	; 0x06
   166c6:	10 86       	std	Z+8, r1	; 0x08
   166c8:	17 82       	std	Z+7, r1	; 0x07
   166ca:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   166ce:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   166d2:	81 81       	ldd	r24, Z+1	; 0x01
   166d4:	90 e0       	ldi	r25, 0x00	; 0
   166d6:	0e 94 59 86 	call	0x10cb2	; 0x10cb2 <gpib_disable_PPR>
   166da:	0b 50       	subi	r16, 0x0B	; 11
   166dc:	11 09       	sbc	r17, r1
   166de:	c1 50       	subi	r28, 0x01	; 1
   166e0:	90 f6       	brcc	.-92     	; 0x16686 <amigo_init+0x16>
   166e2:	cd b7       	in	r28, 0x3d	; 61
   166e4:	de b7       	in	r29, 0x3e	; 62
   166e6:	e5 e0       	ldi	r30, 0x05	; 5
   166e8:	0c 94 dc e6 	jmp	0x1cdb8	; 0x1cdb8 <__epilogue_restores__+0x1a>

000166ec <amigo_request_logical_address>:
   166ec:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   166f0:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   166f4:	15 86       	std	Z+13, r1	; 0x0d
   166f6:	83 81       	ldd	r24, Z+3	; 0x03
   166f8:	86 87       	std	Z+14, r24	; 0x0e
   166fa:	84 81       	ldd	r24, Z+4	; 0x04
   166fc:	87 87       	std	Z+15, r24	; 0x0f
   166fe:	85 81       	ldd	r24, Z+5	; 0x05
   16700:	80 8b       	std	Z+16, r24	; 0x10
   16702:	80 e0       	ldi	r24, 0x00	; 0
   16704:	90 e0       	ldi	r25, 0x00	; 0
   16706:	08 95       	ret

00016708 <amigo_request_status>:
   16708:	00 d0       	rcall	.+0      	; 0x1670a <amigo_request_status+0x2>
   1670a:	1f 92       	push	r1
   1670c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16710:	85 ff       	sbrs	r24, 5
   16712:	0a c0       	rjmp	.+20     	; 0x16728 <amigo_request_status+0x20>
   16714:	89 e4       	ldi	r24, 0x49	; 73
   16716:	91 e3       	ldi	r25, 0x31	; 49
   16718:	a0 e0       	ldi	r26, 0x00	; 0
   1671a:	ed b7       	in	r30, 0x3d	; 61
   1671c:	fe b7       	in	r31, 0x3e	; 62
   1671e:	81 83       	std	Z+1, r24	; 0x01
   16720:	92 83       	std	Z+2, r25	; 0x02
   16722:	a3 83       	std	Z+3, r26	; 0x03
   16724:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   16728:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   1672c:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16730:	11 86       	std	Z+9, r1	; 0x09
   16732:	81 81       	ldd	r24, Z+1	; 0x01
   16734:	82 87       	std	Z+10, r24	; 0x0a
   16736:	8d e0       	ldi	r24, 0x0D	; 13
   16738:	83 87       	std	Z+11, r24	; 0x0b
   1673a:	14 86       	std	Z+12, r1	; 0x0c
   1673c:	0e 94 d0 6f 	call	0xdfa0	; 0xdfa0 <mmc_wp_status>
   16740:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16744:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16748:	89 2b       	or	r24, r25
   1674a:	19 f0       	breq	.+6      	; 0x16752 <amigo_request_status+0x4a>
   1674c:	84 85       	ldd	r24, Z+12	; 0x0c
   1674e:	80 66       	ori	r24, 0x60	; 96
   16750:	84 87       	std	Z+12, r24	; 0x0c
   16752:	86 81       	ldd	r24, Z+6	; 0x06
   16754:	82 30       	cpi	r24, 0x02	; 2
   16756:	31 f4       	brne	.+12     	; 0x16764 <amigo_request_status+0x5c>
   16758:	83 e1       	ldi	r24, 0x13	; 19
   1675a:	81 87       	std	Z+9, r24	; 0x09
   1675c:	84 85       	ldd	r24, Z+12	; 0x0c
   1675e:	88 60       	ori	r24, 0x08	; 8
   16760:	84 87       	std	Z+12, r24	; 0x0c
   16762:	21 c0       	rjmp	.+66     	; 0x167a6 <amigo_request_status+0x9e>
   16764:	27 81       	ldd	r18, Z+7	; 0x07
   16766:	30 85       	ldd	r19, Z+8	; 0x08
   16768:	21 15       	cp	r18, r1
   1676a:	31 05       	cpc	r19, r1
   1676c:	11 f4       	brne	.+4      	; 0x16772 <amigo_request_status+0x6a>
   1676e:	81 30       	cpi	r24, 0x01	; 1
   16770:	d1 f4       	brne	.+52     	; 0x167a6 <amigo_request_status+0x9e>
   16772:	26 fd       	sbrc	r18, 6
   16774:	0c c0       	rjmp	.+24     	; 0x1678e <amigo_request_status+0x86>
   16776:	25 ff       	sbrs	r18, 5
   16778:	03 c0       	rjmp	.+6      	; 0x16780 <amigo_request_status+0x78>
   1677a:	8a e0       	ldi	r24, 0x0A	; 10
   1677c:	81 87       	std	Z+9, r24	; 0x09
   1677e:	0d c0       	rjmp	.+26     	; 0x1679a <amigo_request_status+0x92>
   16780:	84 85       	ldd	r24, Z+12	; 0x0c
   16782:	24 ff       	sbrs	r18, 4
   16784:	02 c0       	rjmp	.+4      	; 0x1678a <amigo_request_status+0x82>
   16786:	83 60       	ori	r24, 0x03	; 3
   16788:	07 c0       	rjmp	.+14     	; 0x16798 <amigo_request_status+0x90>
   1678a:	21 ff       	sbrs	r18, 1
   1678c:	02 c0       	rjmp	.+4      	; 0x16792 <amigo_request_status+0x8a>
   1678e:	83 e1       	ldi	r24, 0x13	; 19
   16790:	f5 cf       	rjmp	.-22     	; 0x1677c <amigo_request_status+0x74>
   16792:	22 ff       	sbrs	r18, 2
   16794:	02 c0       	rjmp	.+4      	; 0x1679a <amigo_request_status+0x92>
   16796:	84 60       	ori	r24, 0x04	; 4
   16798:	84 87       	std	Z+12, r24	; 0x0c
   1679a:	84 85       	ldd	r24, Z+12	; 0x0c
   1679c:	80 61       	ori	r24, 0x10	; 16
   1679e:	84 87       	std	Z+12, r24	; 0x0c
   167a0:	83 85       	ldd	r24, Z+11	; 0x0b
   167a2:	80 68       	ori	r24, 0x80	; 128
   167a4:	83 87       	std	Z+11, r24	; 0x0b
   167a6:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   167aa:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   167ae:	81 81       	ldd	r24, Z+1	; 0x01
   167b0:	90 e0       	ldi	r25, 0x00	; 0
   167b2:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   167b6:	80 e0       	ldi	r24, 0x00	; 0
   167b8:	90 e0       	ldi	r25, 0x00	; 0
   167ba:	0f 90       	pop	r0
   167bc:	0f 90       	pop	r0
   167be:	0f 90       	pop	r0
   167c0:	08 95       	ret

000167c2 <amigo_send_logical_address>:
   167c2:	a5 e0       	ldi	r26, 0x05	; 5
   167c4:	b0 e0       	ldi	r27, 0x00	; 0
   167c6:	e7 ee       	ldi	r30, 0xE7	; 231
   167c8:	f3 eb       	ldi	r31, 0xB3	; 179
   167ca:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
   167ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167d2:	85 ff       	sbrs	r24, 5
   167d4:	0a c0       	rjmp	.+20     	; 0x167ea <amigo_send_logical_address+0x28>
   167d6:	8b e2       	ldi	r24, 0x2B	; 43
   167d8:	91 e3       	ldi	r25, 0x31	; 49
   167da:	a0 e0       	ldi	r26, 0x00	; 0
   167dc:	ed b7       	in	r30, 0x3d	; 61
   167de:	fe b7       	in	r31, 0x3e	; 62
   167e0:	81 83       	std	Z+1, r24	; 0x01
   167e2:	92 83       	std	Z+2, r25	; 0x02
   167e4:	a3 83       	std	Z+3, r26	; 0x03
   167e6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   167ea:	80 e0       	ldi	r24, 0x00	; 0
   167ec:	91 e0       	ldi	r25, 0x01	; 1
   167ee:	9d 83       	std	Y+5, r25	; 0x05
   167f0:	8c 83       	std	Y+4, r24	; 0x04
   167f2:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   167f6:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   167fa:	ae 01       	movw	r20, r28
   167fc:	4c 5f       	subi	r20, 0xFC	; 252
   167fe:	5f 4f       	sbci	r21, 0xFF	; 255
   16800:	64 e0       	ldi	r22, 0x04	; 4
   16802:	70 e0       	ldi	r23, 0x00	; 0
   16804:	0d 96       	adiw	r24, 0x0d	; 13
   16806:	0e 94 53 8b 	call	0x116a6	; 0x116a6 <gpib_write_str>
   1680a:	2c 81       	ldd	r18, Y+4	; 0x04
   1680c:	3d 81       	ldd	r19, Y+5	; 0x05
   1680e:	22 27       	eor	r18, r18
   16810:	30 7d       	andi	r19, 0xD0	; 208
   16812:	23 2b       	or	r18, r19
   16814:	11 f4       	brne	.+4      	; 0x1681a <amigo_send_logical_address+0x58>
   16816:	04 97       	sbiw	r24, 0x04	; 4
   16818:	c9 f0       	breq	.+50     	; 0x1684c <amigo_send_logical_address+0x8a>
   1681a:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   1681e:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16822:	87 81       	ldd	r24, Z+7	; 0x07
   16824:	90 85       	ldd	r25, Z+8	; 0x08
   16826:	80 62       	ori	r24, 0x20	; 32
   16828:	90 87       	std	Z+8, r25	; 0x08
   1682a:	87 83       	std	Z+7, r24	; 0x07
   1682c:	81 e0       	ldi	r24, 0x01	; 1
   1682e:	86 83       	std	Z+6, r24	; 0x06
   16830:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16834:	80 ff       	sbrs	r24, 0
   16836:	0a c0       	rjmp	.+20     	; 0x1684c <amigo_send_logical_address+0x8a>
   16838:	81 e1       	ldi	r24, 0x11	; 17
   1683a:	91 e3       	ldi	r25, 0x31	; 49
   1683c:	a0 e0       	ldi	r26, 0x00	; 0
   1683e:	ed b7       	in	r30, 0x3d	; 61
   16840:	fe b7       	in	r31, 0x3e	; 62
   16842:	81 83       	std	Z+1, r24	; 0x01
   16844:	92 83       	std	Z+2, r25	; 0x02
   16846:	a3 83       	std	Z+3, r26	; 0x03
   16848:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1684c:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16850:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16854:	81 81       	ldd	r24, Z+1	; 0x01
   16856:	90 e0       	ldi	r25, 0x00	; 0
   16858:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   1685c:	8c 81       	ldd	r24, Y+4	; 0x04
   1685e:	9d 81       	ldd	r25, Y+5	; 0x05
   16860:	88 27       	eor	r24, r24
   16862:	90 7d       	andi	r25, 0xD0	; 208
   16864:	25 96       	adiw	r28, 0x05	; 5
   16866:	e2 e0       	ldi	r30, 0x02	; 2
   16868:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

0001686c <amigo_send_status>:
   1686c:	a5 e0       	ldi	r26, 0x05	; 5
   1686e:	b0 e0       	ldi	r27, 0x00	; 0
   16870:	ec e3       	ldi	r30, 0x3C	; 60
   16872:	f4 eb       	ldi	r31, 0xB4	; 180
   16874:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
   16878:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1687c:	85 ff       	sbrs	r24, 5
   1687e:	0a c0       	rjmp	.+20     	; 0x16894 <amigo_send_status+0x28>
   16880:	8c ef       	ldi	r24, 0xFC	; 252
   16882:	90 e3       	ldi	r25, 0x30	; 48
   16884:	a0 e0       	ldi	r26, 0x00	; 0
   16886:	ed b7       	in	r30, 0x3d	; 61
   16888:	fe b7       	in	r31, 0x3e	; 62
   1688a:	81 83       	std	Z+1, r24	; 0x01
   1688c:	92 83       	std	Z+2, r25	; 0x02
   1688e:	a3 83       	std	Z+3, r26	; 0x03
   16890:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   16894:	80 e0       	ldi	r24, 0x00	; 0
   16896:	91 e0       	ldi	r25, 0x01	; 1
   16898:	9d 83       	std	Y+5, r25	; 0x05
   1689a:	8c 83       	std	Y+4, r24	; 0x04
   1689c:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   168a0:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   168a4:	ae 01       	movw	r20, r28
   168a6:	4c 5f       	subi	r20, 0xFC	; 252
   168a8:	5f 4f       	sbci	r21, 0xFF	; 255
   168aa:	64 e0       	ldi	r22, 0x04	; 4
   168ac:	70 e0       	ldi	r23, 0x00	; 0
   168ae:	09 96       	adiw	r24, 0x09	; 9
   168b0:	0e 94 53 8b 	call	0x116a6	; 0x116a6 <gpib_write_str>
   168b4:	2c 81       	ldd	r18, Y+4	; 0x04
   168b6:	3d 81       	ldd	r19, Y+5	; 0x05
   168b8:	22 27       	eor	r18, r18
   168ba:	30 7d       	andi	r19, 0xD0	; 208
   168bc:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   168c0:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   168c4:	23 2b       	or	r18, r19
   168c6:	11 f4       	brne	.+4      	; 0x168cc <amigo_send_status+0x60>
   168c8:	04 97       	sbiw	r24, 0x04	; 4
   168ca:	b1 f0       	breq	.+44     	; 0x168f8 <amigo_send_status+0x8c>
   168cc:	87 81       	ldd	r24, Z+7	; 0x07
   168ce:	90 85       	ldd	r25, Z+8	; 0x08
   168d0:	80 62       	ori	r24, 0x20	; 32
   168d2:	90 87       	std	Z+8, r25	; 0x08
   168d4:	87 83       	std	Z+7, r24	; 0x07
   168d6:	81 e0       	ldi	r24, 0x01	; 1
   168d8:	86 83       	std	Z+6, r24	; 0x06
   168da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168de:	80 ff       	sbrs	r24, 0
   168e0:	0e c0       	rjmp	.+28     	; 0x168fe <amigo_send_status+0x92>
   168e2:	82 ee       	ldi	r24, 0xE2	; 226
   168e4:	90 e3       	ldi	r25, 0x30	; 48
   168e6:	a0 e0       	ldi	r26, 0x00	; 0
   168e8:	ed b7       	in	r30, 0x3d	; 61
   168ea:	fe b7       	in	r31, 0x3e	; 62
   168ec:	81 83       	std	Z+1, r24	; 0x01
   168ee:	92 83       	std	Z+2, r25	; 0x02
   168f0:	a3 83       	std	Z+3, r26	; 0x03
   168f2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   168f6:	03 c0       	rjmp	.+6      	; 0x168fe <amigo_send_status+0x92>
   168f8:	10 86       	std	Z+8, r1	; 0x08
   168fa:	17 82       	std	Z+7, r1	; 0x07
   168fc:	16 82       	std	Z+6, r1	; 0x06
   168fe:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16902:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16906:	81 81       	ldd	r24, Z+1	; 0x01
   16908:	90 e0       	ldi	r25, 0x00	; 0
   1690a:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   1690e:	8c 81       	ldd	r24, Y+4	; 0x04
   16910:	9d 81       	ldd	r25, Y+5	; 0x05
   16912:	88 27       	eor	r24, r24
   16914:	90 7d       	andi	r25, 0xD0	; 208
   16916:	25 96       	adiw	r28, 0x05	; 5
   16918:	e2 e0       	ldi	r30, 0x02	; 2
   1691a:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

0001691e <amigo_increment>:
   1691e:	a1 e1       	ldi	r26, 0x11	; 17
   16920:	b0 e0       	ldi	r27, 0x00	; 0
   16922:	e5 e9       	ldi	r30, 0x95	; 149
   16924:	f4 eb       	ldi	r31, 0xB4	; 180
   16926:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
   1692a:	bc 01       	movw	r22, r24
   1692c:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16930:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16934:	91 e1       	ldi	r25, 0x11	; 17
   16936:	de 01       	movw	r26, r28
   16938:	11 96       	adiw	r26, 0x01	; 1
   1693a:	01 90       	ld	r0, Z+
   1693c:	0d 92       	st	X+, r0
   1693e:	9a 95       	dec	r25
   16940:	e1 f7       	brne	.-8      	; 0x1693a <amigo_increment+0x1c>
   16942:	9e 81       	ldd	r25, Y+6	; 0x06
   16944:	9f 5f       	subi	r25, 0xFF	; 255
   16946:	9e 83       	std	Y+6, r25	; 0x06
   16948:	ce 01       	movw	r24, r28
   1694a:	01 96       	adiw	r24, 0x01	; 1
   1694c:	c7 dd       	rcall	.-1138   	; 0x164dc <amigo_overflow_check>
   1694e:	00 97       	sbiw	r24, 0x00	; 0
   16950:	59 f4       	brne	.+22     	; 0x16968 <amigo_increment+0x4a>
   16952:	a0 91 6a 19 	lds	r26, 0x196A	; 0x80196a <AMIGOs>
   16956:	b0 91 6b 19 	lds	r27, 0x196B	; 0x80196b <AMIGOs+0x1>
   1695a:	21 e1       	ldi	r18, 0x11	; 17
   1695c:	fe 01       	movw	r30, r28
   1695e:	31 96       	adiw	r30, 0x01	; 1
   16960:	01 90       	ld	r0, Z+
   16962:	0d 92       	st	X+, r0
   16964:	2a 95       	dec	r18
   16966:	e1 f7       	brne	.-8      	; 0x16960 <amigo_increment+0x42>
   16968:	61 96       	adiw	r28, 0x11	; 17
   1696a:	e2 e0       	ldi	r30, 0x02	; 2
   1696c:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00016970 <amigo_seek>:
   16970:	0f 93       	push	r16
   16972:	1f 93       	push	r17
   16974:	cf 93       	push	r28
   16976:	df 93       	push	r29
   16978:	ec 01       	movw	r28, r24
   1697a:	6d e8       	ldi	r22, 0x8D	; 141
   1697c:	75 e1       	ldi	r23, 0x15	; 21
   1697e:	ae dd       	rcall	.-1188   	; 0x164dc <amigo_overflow_check>
   16980:	8c 01       	movw	r16, r24
   16982:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16986:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1698a:	89 2b       	or	r24, r25
   1698c:	41 f0       	breq	.+16     	; 0x1699e <amigo_seek+0x2e>
   1698e:	81 e0       	ldi	r24, 0x01	; 1
   16990:	86 83       	std	Z+6, r24	; 0x06
   16992:	87 81       	ldd	r24, Z+7	; 0x07
   16994:	90 85       	ldd	r25, Z+8	; 0x08
   16996:	84 60       	ori	r24, 0x04	; 4
   16998:	90 87       	std	Z+8, r25	; 0x08
   1699a:	87 83       	std	Z+7, r24	; 0x07
   1699c:	06 c0       	rjmp	.+12     	; 0x169aa <amigo_seek+0x3a>
   1699e:	8d 81       	ldd	r24, Y+5	; 0x05
   169a0:	85 83       	std	Z+5, r24	; 0x05
   169a2:	8c 81       	ldd	r24, Y+4	; 0x04
   169a4:	84 83       	std	Z+4, r24	; 0x04
   169a6:	8b 81       	ldd	r24, Y+3	; 0x03
   169a8:	83 83       	std	Z+3, r24	; 0x03
   169aa:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   169ae:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   169b2:	81 81       	ldd	r24, Z+1	; 0x01
   169b4:	90 e0       	ldi	r25, 0x00	; 0
   169b6:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   169ba:	c8 01       	movw	r24, r16
   169bc:	df 91       	pop	r29
   169be:	cf 91       	pop	r28
   169c0:	1f 91       	pop	r17
   169c2:	0f 91       	pop	r16
   169c4:	08 95       	ret

000169c6 <amigo_verify>:
   169c6:	8f 92       	push	r8
   169c8:	9f 92       	push	r9
   169ca:	af 92       	push	r10
   169cc:	bf 92       	push	r11
   169ce:	ef 92       	push	r14
   169d0:	ff 92       	push	r15
   169d2:	0f 93       	push	r16
   169d4:	1f 93       	push	r17
   169d6:	cf 93       	push	r28
   169d8:	df 93       	push	r29
   169da:	ad b7       	in	r26, 0x3d	; 61
   169dc:	be b7       	in	r27, 0x3e	; 62
   169de:	19 97       	sbiw	r26, 0x09	; 9
   169e0:	0f b6       	in	r0, 0x3f	; 63
   169e2:	f8 94       	cli
   169e4:	be bf       	out	0x3e, r27	; 62
   169e6:	0f be       	out	0x3f, r0	; 63
   169e8:	ad bf       	out	0x3d, r26	; 61
   169ea:	7c 01       	movw	r14, r24
   169ec:	62 e9       	ldi	r22, 0x92	; 146
   169ee:	75 e1       	ldi	r23, 0x15	; 21
   169f0:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   169f4:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   169f8:	c7 dd       	rcall	.-1138   	; 0x16588 <amigo_chs_to_logical>
   169fa:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   169fe:	25 ff       	sbrs	r18, 5
   16a00:	10 c0       	rjmp	.+32     	; 0x16a22 <amigo_verify+0x5c>
   16a02:	ed b7       	in	r30, 0x3d	; 61
   16a04:	fe b7       	in	r31, 0x3e	; 62
   16a06:	e0 86       	std	Z+8, r14	; 0x08
   16a08:	f1 86       	std	Z+9, r15	; 0x09
   16a0a:	64 83       	std	Z+4, r22	; 0x04
   16a0c:	75 83       	std	Z+5, r23	; 0x05
   16a0e:	86 83       	std	Z+6, r24	; 0x06
   16a10:	97 83       	std	Z+7, r25	; 0x07
   16a12:	81 ea       	ldi	r24, 0xA1	; 161
   16a14:	90 e3       	ldi	r25, 0x30	; 48
   16a16:	a0 e0       	ldi	r26, 0x00	; 0
   16a18:	81 83       	std	Z+1, r24	; 0x01
   16a1a:	92 83       	std	Z+2, r25	; 0x02
   16a1c:	a3 83       	std	Z+3, r26	; 0x03
   16a1e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   16a22:	e7 01       	movw	r28, r14
   16a24:	20 97       	sbiw	r28, 0x00	; 0
   16a26:	09 f4       	brne	.+2      	; 0x16a2a <amigo_verify+0x64>
   16a28:	4b c0       	rjmp	.+150    	; 0x16ac0 <amigo_verify+0xfa>
   16a2a:	6f e9       	ldi	r22, 0x9F	; 159
   16a2c:	75 e1       	ldi	r23, 0x15	; 21
   16a2e:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16a32:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   16a36:	a8 dd       	rcall	.-1200   	; 0x16588 <amigo_chs_to_logical>
   16a38:	4b 01       	movw	r8, r22
   16a3a:	5c 01       	movw	r10, r24
   16a3c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a40:	86 fd       	sbrc	r24, 6
   16a42:	0e 94 49 85 	call	0x10a92	; 0x10a92 <gpib_timer_elapsed_begin>
   16a46:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16a4a:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16a4e:	e0 90 6a 19 	lds	r14, 0x196A	; 0x80196a <AMIGOs>
   16a52:	f0 90 6b 19 	lds	r15, 0x196B	; 0x80196b <AMIGOs+0x1>
   16a56:	87 e0       	ldi	r24, 0x07	; 7
   16a58:	e8 0e       	add	r14, r24
   16a5a:	f1 1c       	adc	r15, r1
   16a5c:	00 85       	ldd	r16, Z+8	; 0x08
   16a5e:	11 85       	ldd	r17, Z+9	; 0x09
   16a60:	22 ef       	ldi	r18, 0xF2	; 242
   16a62:	3c e1       	ldi	r19, 0x1C	; 28
   16a64:	b5 01       	movw	r22, r10
   16a66:	a4 01       	movw	r20, r8
   16a68:	82 81       	ldd	r24, Z+2	; 0x02
   16a6a:	93 81       	ldd	r25, Z+3	; 0x03
   16a6c:	0e 94 9b 84 	call	0x10936	; 0x10936 <dbf_open_read>
   16a70:	7c 01       	movw	r14, r24
   16a72:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a76:	86 ff       	sbrs	r24, 6
   16a78:	04 c0       	rjmp	.+8      	; 0x16a82 <amigo_verify+0xbc>
   16a7a:	86 ea       	ldi	r24, 0xA6	; 166
   16a7c:	90 e1       	ldi	r25, 0x10	; 16
   16a7e:	0e 94 5b 85 	call	0x10ab6	; 0x10ab6 <gpib_timer_elapsed_end>
   16a82:	20 91 6a 19 	lds	r18, 0x196A	; 0x80196a <AMIGOs>
   16a86:	30 91 6b 19 	lds	r19, 0x196B	; 0x80196b <AMIGOs+0x1>
   16a8a:	f9 01       	movw	r30, r18
   16a8c:	87 81       	ldd	r24, Z+7	; 0x07
   16a8e:	90 85       	ldd	r25, Z+8	; 0x08
   16a90:	89 2b       	or	r24, r25
   16a92:	21 f0       	breq	.+8      	; 0x16a9c <amigo_verify+0xd6>
   16a94:	81 e0       	ldi	r24, 0x01	; 1
   16a96:	f9 01       	movw	r30, r18
   16a98:	86 83       	std	Z+6, r24	; 0x06
   16a9a:	15 c0       	rjmp	.+42     	; 0x16ac6 <amigo_verify+0x100>
   16a9c:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <AMIGOp>
   16aa0:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <AMIGOp+0x1>
   16aa4:	fc 01       	movw	r30, r24
   16aa6:	80 85       	ldd	r24, Z+8	; 0x08
   16aa8:	91 85       	ldd	r25, Z+9	; 0x09
   16aaa:	e8 16       	cp	r14, r24
   16aac:	f9 06       	cpc	r15, r25
   16aae:	91 f7       	brne	.-28     	; 0x16a94 <amigo_verify+0xce>
   16ab0:	87 ea       	ldi	r24, 0xA7	; 167
   16ab2:	95 e1       	ldi	r25, 0x15	; 21
   16ab4:	34 df       	rcall	.-408    	; 0x1691e <amigo_increment>
   16ab6:	21 97       	sbiw	r28, 0x01	; 1
   16ab8:	89 2b       	or	r24, r25
   16aba:	09 f4       	brne	.+2      	; 0x16abe <amigo_verify+0xf8>
   16abc:	b3 cf       	rjmp	.-154    	; 0x16a24 <amigo_verify+0x5e>
   16abe:	03 c0       	rjmp	.+6      	; 0x16ac6 <amigo_verify+0x100>
   16ac0:	c0 e0       	ldi	r28, 0x00	; 0
   16ac2:	d0 e0       	ldi	r29, 0x00	; 0
   16ac4:	02 c0       	rjmp	.+4      	; 0x16aca <amigo_verify+0x104>
   16ac6:	c1 e0       	ldi	r28, 0x01	; 1
   16ac8:	d0 e0       	ldi	r29, 0x00	; 0
   16aca:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16ace:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16ad2:	81 81       	ldd	r24, Z+1	; 0x01
   16ad4:	90 e0       	ldi	r25, 0x00	; 0
   16ad6:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   16ada:	ce 01       	movw	r24, r28
   16adc:	ad b7       	in	r26, 0x3d	; 61
   16ade:	be b7       	in	r27, 0x3e	; 62
   16ae0:	19 96       	adiw	r26, 0x09	; 9
   16ae2:	0f b6       	in	r0, 0x3f	; 63
   16ae4:	f8 94       	cli
   16ae6:	be bf       	out	0x3e, r27	; 62
   16ae8:	0f be       	out	0x3f, r0	; 63
   16aea:	ad bf       	out	0x3d, r26	; 61
   16aec:	df 91       	pop	r29
   16aee:	cf 91       	pop	r28
   16af0:	1f 91       	pop	r17
   16af2:	0f 91       	pop	r16
   16af4:	ff 90       	pop	r15
   16af6:	ef 90       	pop	r14
   16af8:	bf 90       	pop	r11
   16afa:	af 90       	pop	r10
   16afc:	9f 90       	pop	r9
   16afe:	8f 90       	pop	r8
   16b00:	08 95       	ret

00016b02 <amigo_format>:
   16b02:	ef 92       	push	r14
   16b04:	ff 92       	push	r15
   16b06:	0f 93       	push	r16
   16b08:	1f 93       	push	r17
   16b0a:	cf 93       	push	r28
   16b0c:	df 93       	push	r29
   16b0e:	00 d0       	rcall	.+0      	; 0x16b10 <amigo_format+0xe>
   16b10:	1f 92       	push	r1
   16b12:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16b16:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16b1a:	15 82       	std	Z+5, r1	; 0x05
   16b1c:	14 82       	std	Z+4, r1	; 0x04
   16b1e:	13 82       	std	Z+3, r1	; 0x03
   16b20:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16b24:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16b28:	40 85       	ldd	r20, Z+8	; 0x08
   16b2a:	51 85       	ldd	r21, Z+9	; 0x09
   16b2c:	68 2f       	mov	r22, r24
   16b2e:	70 e0       	ldi	r23, 0x00	; 0
   16b30:	82 ef       	ldi	r24, 0xF2	; 242
   16b32:	9c e1       	ldi	r25, 0x1C	; 28
   16b34:	0e 94 ab ea 	call	0x1d556	; 0x1d556 <memset>
   16b38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b3c:	85 ff       	sbrs	r24, 5
   16b3e:	0a c0       	rjmp	.+20     	; 0x16b54 <amigo_format+0x52>
   16b40:	86 e6       	ldi	r24, 0x66	; 102
   16b42:	90 e3       	ldi	r25, 0x30	; 48
   16b44:	a0 e0       	ldi	r26, 0x00	; 0
   16b46:	ed b7       	in	r30, 0x3d	; 61
   16b48:	fe b7       	in	r31, 0x3e	; 62
   16b4a:	81 83       	std	Z+1, r24	; 0x01
   16b4c:	92 83       	std	Z+2, r25	; 0x02
   16b4e:	a3 83       	std	Z+3, r26	; 0x03
   16b50:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   16b54:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b58:	86 fd       	sbrc	r24, 6
   16b5a:	0e 94 49 85 	call	0x10a92	; 0x10a92 <gpib_timer_elapsed_begin>
   16b5e:	6e ea       	ldi	r22, 0xAE	; 174
   16b60:	75 e1       	ldi	r23, 0x15	; 21
   16b62:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16b66:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   16b6a:	0e dd       	rcall	.-1508   	; 0x16588 <amigo_chs_to_logical>
   16b6c:	ab 01       	movw	r20, r22
   16b6e:	bc 01       	movw	r22, r24
   16b70:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16b74:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16b78:	e0 90 6a 19 	lds	r14, 0x196A	; 0x80196a <AMIGOs>
   16b7c:	f0 90 6b 19 	lds	r15, 0x196B	; 0x80196b <AMIGOs+0x1>
   16b80:	87 e0       	ldi	r24, 0x07	; 7
   16b82:	e8 0e       	add	r14, r24
   16b84:	f1 1c       	adc	r15, r1
   16b86:	00 85       	ldd	r16, Z+8	; 0x08
   16b88:	11 85       	ldd	r17, Z+9	; 0x09
   16b8a:	22 ef       	ldi	r18, 0xF2	; 242
   16b8c:	3c e1       	ldi	r19, 0x1C	; 28
   16b8e:	82 81       	ldd	r24, Z+2	; 0x02
   16b90:	93 81       	ldd	r25, Z+3	; 0x03
   16b92:	0e 94 f2 84 	call	0x109e4	; 0x109e4 <dbf_open_write>
   16b96:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16b9a:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16b9e:	27 81       	ldd	r18, Z+7	; 0x07
   16ba0:	30 85       	ldd	r19, Z+8	; 0x08
   16ba2:	21 15       	cp	r18, r1
   16ba4:	31 05       	cpc	r19, r1
   16ba6:	49 f4       	brne	.+18     	; 0x16bba <amigo_format+0xb8>
   16ba8:	c0 91 6c 19 	lds	r28, 0x196C	; 0x80196c <AMIGOp>
   16bac:	d0 91 6d 19 	lds	r29, 0x196D	; 0x80196d <AMIGOp+0x1>
   16bb0:	48 85       	ldd	r20, Y+8	; 0x08
   16bb2:	59 85       	ldd	r21, Y+9	; 0x09
   16bb4:	84 17       	cp	r24, r20
   16bb6:	95 07       	cpc	r25, r21
   16bb8:	41 f0       	breq	.+16     	; 0x16bca <amigo_format+0xc8>
   16bba:	22 60       	ori	r18, 0x02	; 2
   16bbc:	30 87       	std	Z+8, r19	; 0x08
   16bbe:	27 83       	std	Z+7, r18	; 0x07
   16bc0:	81 e0       	ldi	r24, 0x01	; 1
   16bc2:	86 83       	std	Z+6, r24	; 0x06
   16bc4:	c1 e0       	ldi	r28, 0x01	; 1
   16bc6:	d0 e0       	ldi	r29, 0x00	; 0
   16bc8:	0f c0       	rjmp	.+30     	; 0x16be8 <amigo_format+0xe6>
   16bca:	80 e0       	ldi	r24, 0x00	; 0
   16bcc:	90 e0       	ldi	r25, 0x00	; 0
   16bce:	a7 de       	rcall	.-690    	; 0x1691e <amigo_increment>
   16bd0:	89 2b       	or	r24, r25
   16bd2:	29 f2       	breq	.-118    	; 0x16b5e <amigo_format+0x5c>
   16bd4:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16bd8:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16bdc:	15 82       	std	Z+5, r1	; 0x05
   16bde:	14 82       	std	Z+4, r1	; 0x04
   16be0:	13 82       	std	Z+3, r1	; 0x03
   16be2:	16 82       	std	Z+6, r1	; 0x06
   16be4:	c0 e0       	ldi	r28, 0x00	; 0
   16be6:	d0 e0       	ldi	r29, 0x00	; 0
   16be8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16bec:	86 ff       	sbrs	r24, 6
   16bee:	04 c0       	rjmp	.+8      	; 0x16bf8 <amigo_format+0xf6>
   16bf0:	8e ea       	ldi	r24, 0xAE	; 174
   16bf2:	95 e1       	ldi	r25, 0x15	; 21
   16bf4:	0e 94 5b 85 	call	0x10ab6	; 0x10ab6 <gpib_timer_elapsed_end>
   16bf8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16bfc:	85 ff       	sbrs	r24, 5
   16bfe:	0a c0       	rjmp	.+20     	; 0x16c14 <amigo_format+0x112>
   16c00:	81 e5       	ldi	r24, 0x51	; 81
   16c02:	90 e3       	ldi	r25, 0x30	; 48
   16c04:	a0 e0       	ldi	r26, 0x00	; 0
   16c06:	ed b7       	in	r30, 0x3d	; 61
   16c08:	fe b7       	in	r31, 0x3e	; 62
   16c0a:	81 83       	std	Z+1, r24	; 0x01
   16c0c:	92 83       	std	Z+2, r25	; 0x02
   16c0e:	a3 83       	std	Z+3, r26	; 0x03
   16c10:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   16c14:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16c18:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16c1c:	81 81       	ldd	r24, Z+1	; 0x01
   16c1e:	90 e0       	ldi	r25, 0x00	; 0
   16c20:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   16c24:	ce 01       	movw	r24, r28
   16c26:	cd b7       	in	r28, 0x3d	; 61
   16c28:	de b7       	in	r29, 0x3e	; 62
   16c2a:	23 96       	adiw	r28, 0x03	; 3
   16c2c:	e6 e0       	ldi	r30, 0x06	; 6
   16c2e:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

00016c32 <amigo_buffered_read_command>:
   16c32:	8f 92       	push	r8
   16c34:	9f 92       	push	r9
   16c36:	af 92       	push	r10
   16c38:	bf 92       	push	r11
   16c3a:	ef 92       	push	r14
   16c3c:	ff 92       	push	r15
   16c3e:	0f 93       	push	r16
   16c40:	1f 93       	push	r17
   16c42:	cf 93       	push	r28
   16c44:	df 93       	push	r29
   16c46:	00 d0       	rcall	.+0      	; 0x16c48 <amigo_buffered_read_command+0x16>
   16c48:	00 d0       	rcall	.+0      	; 0x16c4a <amigo_buffered_read_command+0x18>
   16c4a:	1f 92       	push	r1
   16c4c:	65 eb       	ldi	r22, 0xB5	; 181
   16c4e:	75 e1       	ldi	r23, 0x15	; 21
   16c50:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16c54:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   16c58:	97 dc       	rcall	.-1746   	; 0x16588 <amigo_chs_to_logical>
   16c5a:	4b 01       	movw	r8, r22
   16c5c:	5c 01       	movw	r10, r24
   16c5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c62:	85 ff       	sbrs	r24, 5
   16c64:	12 c0       	rjmp	.+36     	; 0x16c8a <amigo_buffered_read_command+0x58>
   16c66:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16c6a:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16c6e:	80 81       	ld	r24, Z
   16c70:	90 e0       	ldi	r25, 0x00	; 0
   16c72:	ed b7       	in	r30, 0x3d	; 61
   16c74:	fe b7       	in	r31, 0x3e	; 62
   16c76:	95 83       	std	Z+5, r25	; 0x05
   16c78:	84 83       	std	Z+4, r24	; 0x04
   16c7a:	8f e3       	ldi	r24, 0x3F	; 63
   16c7c:	90 e3       	ldi	r25, 0x30	; 48
   16c7e:	a0 e0       	ldi	r26, 0x00	; 0
   16c80:	81 83       	std	Z+1, r24	; 0x01
   16c82:	92 83       	std	Z+2, r25	; 0x02
   16c84:	a3 83       	std	Z+3, r26	; 0x03
   16c86:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   16c8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c8e:	86 fd       	sbrc	r24, 6
   16c90:	0e 94 49 85 	call	0x10a92	; 0x10a92 <gpib_timer_elapsed_begin>
   16c94:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16c98:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16c9c:	e0 90 6a 19 	lds	r14, 0x196A	; 0x80196a <AMIGOs>
   16ca0:	f0 90 6b 19 	lds	r15, 0x196B	; 0x80196b <AMIGOs+0x1>
   16ca4:	87 e0       	ldi	r24, 0x07	; 7
   16ca6:	e8 0e       	add	r14, r24
   16ca8:	f1 1c       	adc	r15, r1
   16caa:	00 85       	ldd	r16, Z+8	; 0x08
   16cac:	11 85       	ldd	r17, Z+9	; 0x09
   16cae:	22 ef       	ldi	r18, 0xF2	; 242
   16cb0:	3c e1       	ldi	r19, 0x1C	; 28
   16cb2:	b5 01       	movw	r22, r10
   16cb4:	a4 01       	movw	r20, r8
   16cb6:	82 81       	ldd	r24, Z+2	; 0x02
   16cb8:	93 81       	ldd	r25, Z+3	; 0x03
   16cba:	0e 94 9b 84 	call	0x10936	; 0x10936 <dbf_open_read>
   16cbe:	7c 01       	movw	r14, r24
   16cc0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16cc4:	86 ff       	sbrs	r24, 6
   16cc6:	04 c0       	rjmp	.+8      	; 0x16cd0 <amigo_buffered_read_command+0x9e>
   16cc8:	86 ea       	ldi	r24, 0xA6	; 166
   16cca:	90 e1       	ldi	r25, 0x10	; 16
   16ccc:	0e 94 5b 85 	call	0x10ab6	; 0x10ab6 <gpib_timer_elapsed_end>
   16cd0:	c0 91 6a 19 	lds	r28, 0x196A	; 0x80196a <AMIGOs>
   16cd4:	d0 91 6b 19 	lds	r29, 0x196B	; 0x80196b <AMIGOs+0x1>
   16cd8:	8f 81       	ldd	r24, Y+7	; 0x07
   16cda:	98 85       	ldd	r25, Y+8	; 0x08
   16cdc:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16ce0:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16ce4:	89 2b       	or	r24, r25
   16ce6:	29 f4       	brne	.+10     	; 0x16cf2 <amigo_buffered_read_command+0xc0>
   16ce8:	80 85       	ldd	r24, Z+8	; 0x08
   16cea:	91 85       	ldd	r25, Z+9	; 0x09
   16cec:	e8 16       	cp	r14, r24
   16cee:	f9 06       	cpc	r15, r25
   16cf0:	19 f0       	breq	.+6      	; 0x16cf8 <amigo_buffered_read_command+0xc6>
   16cf2:	81 e0       	ldi	r24, 0x01	; 1
   16cf4:	8e 83       	std	Y+6, r24	; 0x06
   16cf6:	14 c0       	rjmp	.+40     	; 0x16d20 <amigo_buffered_read_command+0xee>
   16cf8:	85 eb       	ldi	r24, 0xB5	; 181
   16cfa:	95 e1       	ldi	r25, 0x15	; 21
   16cfc:	10 de       	rcall	.-992    	; 0x1691e <amigo_increment>
   16cfe:	89 2b       	or	r24, r25
   16d00:	59 f0       	breq	.+22     	; 0x16d18 <amigo_buffered_read_command+0xe6>
   16d02:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16d06:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16d0a:	81 e0       	ldi	r24, 0x01	; 1
   16d0c:	86 83       	std	Z+6, r24	; 0x06
   16d0e:	87 81       	ldd	r24, Z+7	; 0x07
   16d10:	90 85       	ldd	r25, Z+8	; 0x08
   16d12:	84 60       	ori	r24, 0x04	; 4
   16d14:	90 87       	std	Z+8, r25	; 0x08
   16d16:	87 83       	std	Z+7, r24	; 0x07
   16d18:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16d1c:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16d20:	81 81       	ldd	r24, Z+1	; 0x01
   16d22:	90 e0       	ldi	r25, 0x00	; 0
   16d24:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   16d28:	80 e0       	ldi	r24, 0x00	; 0
   16d2a:	90 e0       	ldi	r25, 0x00	; 0
   16d2c:	0f 90       	pop	r0
   16d2e:	0f 90       	pop	r0
   16d30:	0f 90       	pop	r0
   16d32:	0f 90       	pop	r0
   16d34:	0f 90       	pop	r0
   16d36:	df 91       	pop	r29
   16d38:	cf 91       	pop	r28
   16d3a:	1f 91       	pop	r17
   16d3c:	0f 91       	pop	r16
   16d3e:	ff 90       	pop	r15
   16d40:	ef 90       	pop	r14
   16d42:	bf 90       	pop	r11
   16d44:	af 90       	pop	r10
   16d46:	9f 90       	pop	r9
   16d48:	8f 90       	pop	r8
   16d4a:	08 95       	ret

00016d4c <amigo_buffered_read_execute>:
   16d4c:	a5 e0       	ldi	r26, 0x05	; 5
   16d4e:	b0 e0       	ldi	r27, 0x00	; 0
   16d50:	ec ea       	ldi	r30, 0xAC	; 172
   16d52:	f6 eb       	ldi	r31, 0xB6	; 182
   16d54:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
   16d58:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d5c:	87 fd       	sbrc	r24, 7
   16d5e:	0e 94 49 85 	call	0x10a92	; 0x10a92 <gpib_timer_elapsed_begin>
   16d62:	80 e0       	ldi	r24, 0x00	; 0
   16d64:	91 e0       	ldi	r25, 0x01	; 1
   16d66:	9d 83       	std	Y+5, r25	; 0x05
   16d68:	8c 83       	std	Y+4, r24	; 0x04
   16d6a:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16d6e:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16d72:	60 85       	ldd	r22, Z+8	; 0x08
   16d74:	71 85       	ldd	r23, Z+9	; 0x09
   16d76:	ae 01       	movw	r20, r28
   16d78:	4c 5f       	subi	r20, 0xFC	; 252
   16d7a:	5f 4f       	sbci	r21, 0xFF	; 255
   16d7c:	82 ef       	ldi	r24, 0xF2	; 242
   16d7e:	9c e1       	ldi	r25, 0x1C	; 28
   16d80:	0e 94 53 8b 	call	0x116a6	; 0x116a6 <gpib_write_str>
   16d84:	8c 01       	movw	r16, r24
   16d86:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d8a:	87 ff       	sbrs	r24, 7
   16d8c:	04 c0       	rjmp	.+8      	; 0x16d96 <amigo_buffered_read_execute+0x4a>
   16d8e:	81 eb       	ldi	r24, 0xB1	; 177
   16d90:	90 e1       	ldi	r25, 0x10	; 16
   16d92:	0e 94 5b 85 	call	0x10ab6	; 0x10ab6 <gpib_timer_elapsed_end>
   16d96:	8c 81       	ldd	r24, Y+4	; 0x04
   16d98:	9d 81       	ldd	r25, Y+5	; 0x05
   16d9a:	88 27       	eor	r24, r24
   16d9c:	90 7d       	andi	r25, 0xD0	; 208
   16d9e:	89 2b       	or	r24, r25
   16da0:	49 f4       	brne	.+18     	; 0x16db4 <amigo_buffered_read_execute+0x68>
   16da2:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16da6:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16daa:	80 85       	ldd	r24, Z+8	; 0x08
   16dac:	91 85       	ldd	r25, Z+9	; 0x09
   16dae:	08 17       	cp	r16, r24
   16db0:	19 07       	cpc	r17, r25
   16db2:	c9 f0       	breq	.+50     	; 0x16de6 <amigo_buffered_read_execute+0x9a>
   16db4:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16db8:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16dbc:	81 e0       	ldi	r24, 0x01	; 1
   16dbe:	86 83       	std	Z+6, r24	; 0x06
   16dc0:	87 81       	ldd	r24, Z+7	; 0x07
   16dc2:	90 85       	ldd	r25, Z+8	; 0x08
   16dc4:	80 62       	ori	r24, 0x20	; 32
   16dc6:	90 87       	std	Z+8, r25	; 0x08
   16dc8:	87 83       	std	Z+7, r24	; 0x07
   16dca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16dce:	80 ff       	sbrs	r24, 0
   16dd0:	0a c0       	rjmp	.+20     	; 0x16de6 <amigo_buffered_read_execute+0x9a>
   16dd2:	85 e2       	ldi	r24, 0x25	; 37
   16dd4:	90 e3       	ldi	r25, 0x30	; 48
   16dd6:	a0 e0       	ldi	r26, 0x00	; 0
   16dd8:	ed b7       	in	r30, 0x3d	; 61
   16dda:	fe b7       	in	r31, 0x3e	; 62
   16ddc:	81 83       	std	Z+1, r24	; 0x01
   16dde:	92 83       	std	Z+2, r25	; 0x02
   16de0:	a3 83       	std	Z+3, r26	; 0x03
   16de2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   16de6:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16dea:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16dee:	81 81       	ldd	r24, Z+1	; 0x01
   16df0:	90 e0       	ldi	r25, 0x00	; 0
   16df2:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   16df6:	8c 81       	ldd	r24, Y+4	; 0x04
   16df8:	9d 81       	ldd	r25, Y+5	; 0x05
   16dfa:	25 96       	adiw	r28, 0x05	; 5
   16dfc:	e4 e0       	ldi	r30, 0x04	; 4
   16dfe:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

00016e02 <amigo_buffered_write>:
   16e02:	8f 92       	push	r8
   16e04:	9f 92       	push	r9
   16e06:	af 92       	push	r10
   16e08:	bf 92       	push	r11
   16e0a:	ef 92       	push	r14
   16e0c:	ff 92       	push	r15
   16e0e:	0f 93       	push	r16
   16e10:	1f 93       	push	r17
   16e12:	cf 93       	push	r28
   16e14:	df 93       	push	r29
   16e16:	cd b7       	in	r28, 0x3d	; 61
   16e18:	de b7       	in	r29, 0x3e	; 62
   16e1a:	27 97       	sbiw	r28, 0x07	; 7
   16e1c:	0f b6       	in	r0, 0x3f	; 63
   16e1e:	f8 94       	cli
   16e20:	de bf       	out	0x3e, r29	; 62
   16e22:	0f be       	out	0x3f, r0	; 63
   16e24:	cd bf       	out	0x3d, r28	; 61
   16e26:	63 ec       	ldi	r22, 0xC3	; 195
   16e28:	75 e1       	ldi	r23, 0x15	; 21
   16e2a:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16e2e:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   16e32:	aa db       	rcall	.-2220   	; 0x16588 <amigo_chs_to_logical>
   16e34:	4b 01       	movw	r8, r22
   16e36:	5c 01       	movw	r10, r24
   16e38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e3c:	87 fd       	sbrc	r24, 7
   16e3e:	0e 94 49 85 	call	0x10a92	; 0x10a92 <gpib_timer_elapsed_begin>
   16e42:	1f 82       	std	Y+7, r1	; 0x07
   16e44:	1e 82       	std	Y+6, r1	; 0x06
   16e46:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16e4a:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16e4e:	60 85       	ldd	r22, Z+8	; 0x08
   16e50:	71 85       	ldd	r23, Z+9	; 0x09
   16e52:	ae 01       	movw	r20, r28
   16e54:	4a 5f       	subi	r20, 0xFA	; 250
   16e56:	5f 4f       	sbci	r21, 0xFF	; 255
   16e58:	82 ef       	ldi	r24, 0xF2	; 242
   16e5a:	9c e1       	ldi	r25, 0x1C	; 28
   16e5c:	0e 94 b1 8a 	call	0x11562	; 0x11562 <gpib_read_str>
   16e60:	7c 01       	movw	r14, r24
   16e62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e66:	85 ff       	sbrs	r24, 5
   16e68:	12 c0       	rjmp	.+36     	; 0x16e8e <amigo_buffered_write+0x8c>
   16e6a:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16e6e:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16e72:	80 81       	ld	r24, Z
   16e74:	90 e0       	ldi	r25, 0x00	; 0
   16e76:	ed b7       	in	r30, 0x3d	; 61
   16e78:	fe b7       	in	r31, 0x3e	; 62
   16e7a:	95 83       	std	Z+5, r25	; 0x05
   16e7c:	84 83       	std	Z+4, r24	; 0x04
   16e7e:	83 e1       	ldi	r24, 0x13	; 19
   16e80:	90 e3       	ldi	r25, 0x30	; 48
   16e82:	a0 e0       	ldi	r26, 0x00	; 0
   16e84:	81 83       	std	Z+1, r24	; 0x01
   16e86:	92 83       	std	Z+2, r25	; 0x02
   16e88:	a3 83       	std	Z+3, r26	; 0x03
   16e8a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   16e8e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e92:	87 ff       	sbrs	r24, 7
   16e94:	04 c0       	rjmp	.+8      	; 0x16e9e <amigo_buffered_write+0x9c>
   16e96:	82 ed       	ldi	r24, 0xD2	; 210
   16e98:	95 e1       	ldi	r25, 0x15	; 21
   16e9a:	0e 94 5b 85 	call	0x10ab6	; 0x10ab6 <gpib_timer_elapsed_end>
   16e9e:	8e 81       	ldd	r24, Y+6	; 0x06
   16ea0:	9f 81       	ldd	r25, Y+7	; 0x07
   16ea2:	88 27       	eor	r24, r24
   16ea4:	90 7d       	andi	r25, 0xD0	; 208
   16ea6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16eaa:	89 2b       	or	r24, r25
   16eac:	49 f4       	brne	.+18     	; 0x16ec0 <amigo_buffered_write+0xbe>
   16eae:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16eb2:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16eb6:	80 85       	ldd	r24, Z+8	; 0x08
   16eb8:	91 85       	ldd	r25, Z+9	; 0x09
   16eba:	e8 16       	cp	r14, r24
   16ebc:	f9 06       	cpc	r15, r25
   16ebe:	c1 f0       	breq	.+48     	; 0x16ef0 <amigo_buffered_write+0xee>
   16ec0:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16ec4:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16ec8:	81 e0       	ldi	r24, 0x01	; 1
   16eca:	86 83       	std	Z+6, r24	; 0x06
   16ecc:	87 81       	ldd	r24, Z+7	; 0x07
   16ece:	90 85       	ldd	r25, Z+8	; 0x08
   16ed0:	80 62       	ori	r24, 0x20	; 32
   16ed2:	90 87       	std	Z+8, r25	; 0x08
   16ed4:	87 83       	std	Z+7, r24	; 0x07
   16ed6:	20 ff       	sbrs	r18, 0
   16ed8:	5e c0       	rjmp	.+188    	; 0x16f96 <amigo_buffered_write+0x194>
   16eda:	84 ef       	ldi	r24, 0xF4	; 244
   16edc:	9f e2       	ldi	r25, 0x2F	; 47
   16ede:	a0 e0       	ldi	r26, 0x00	; 0
   16ee0:	ed b7       	in	r30, 0x3d	; 61
   16ee2:	fe b7       	in	r31, 0x3e	; 62
   16ee4:	81 83       	std	Z+1, r24	; 0x01
   16ee6:	92 83       	std	Z+2, r25	; 0x02
   16ee8:	a3 83       	std	Z+3, r26	; 0x03
   16eea:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   16eee:	53 c0       	rjmp	.+166    	; 0x16f96 <amigo_buffered_write+0x194>
   16ef0:	26 fd       	sbrc	r18, 6
   16ef2:	0e 94 49 85 	call	0x10a92	; 0x10a92 <gpib_timer_elapsed_begin>
   16ef6:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16efa:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16efe:	e0 90 6a 19 	lds	r14, 0x196A	; 0x80196a <AMIGOs>
   16f02:	f0 90 6b 19 	lds	r15, 0x196B	; 0x80196b <AMIGOs+0x1>
   16f06:	87 e0       	ldi	r24, 0x07	; 7
   16f08:	e8 0e       	add	r14, r24
   16f0a:	f1 1c       	adc	r15, r1
   16f0c:	00 85       	ldd	r16, Z+8	; 0x08
   16f0e:	11 85       	ldd	r17, Z+9	; 0x09
   16f10:	22 ef       	ldi	r18, 0xF2	; 242
   16f12:	3c e1       	ldi	r19, 0x1C	; 28
   16f14:	b5 01       	movw	r22, r10
   16f16:	a4 01       	movw	r20, r8
   16f18:	82 81       	ldd	r24, Z+2	; 0x02
   16f1a:	93 81       	ldd	r25, Z+3	; 0x03
   16f1c:	0e 94 f2 84 	call	0x109e4	; 0x109e4 <dbf_open_write>
   16f20:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f24:	86 ff       	sbrs	r24, 6
   16f26:	04 c0       	rjmp	.+8      	; 0x16f30 <amigo_buffered_write+0x12e>
   16f28:	8b e9       	ldi	r24, 0x9B	; 155
   16f2a:	90 e1       	ldi	r25, 0x10	; 16
   16f2c:	0e 94 5b 85 	call	0x10ab6	; 0x10ab6 <gpib_timer_elapsed_end>
   16f30:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16f34:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16f38:	87 81       	ldd	r24, Z+7	; 0x07
   16f3a:	90 85       	ldd	r25, Z+8	; 0x08
   16f3c:	89 2b       	or	r24, r25
   16f3e:	d9 f0       	breq	.+54     	; 0x16f76 <amigo_buffered_write+0x174>
   16f40:	81 e0       	ldi	r24, 0x01	; 1
   16f42:	86 83       	std	Z+6, r24	; 0x06
   16f44:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f48:	80 ff       	sbrs	r24, 0
   16f4a:	0a c0       	rjmp	.+20     	; 0x16f60 <amigo_buffered_write+0x15e>
   16f4c:	84 ed       	ldi	r24, 0xD4	; 212
   16f4e:	9f e2       	ldi	r25, 0x2F	; 47
   16f50:	a0 e0       	ldi	r26, 0x00	; 0
   16f52:	ed b7       	in	r30, 0x3d	; 61
   16f54:	fe b7       	in	r31, 0x3e	; 62
   16f56:	81 83       	std	Z+1, r24	; 0x01
   16f58:	92 83       	std	Z+2, r25	; 0x02
   16f5a:	a3 83       	std	Z+3, r26	; 0x03
   16f5c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   16f60:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16f64:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16f68:	81 81       	ldd	r24, Z+1	; 0x01
   16f6a:	90 e0       	ldi	r25, 0x00	; 0
   16f6c:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   16f70:	80 e0       	ldi	r24, 0x00	; 0
   16f72:	90 e0       	ldi	r25, 0x00	; 0
   16f74:	1c c0       	rjmp	.+56     	; 0x16fae <amigo_buffered_write+0x1ac>
   16f76:	83 ec       	ldi	r24, 0xC3	; 195
   16f78:	95 e1       	ldi	r25, 0x15	; 21
   16f7a:	d1 dc       	rcall	.-1630   	; 0x1691e <amigo_increment>
   16f7c:	89 2b       	or	r24, r25
   16f7e:	59 f0       	breq	.+22     	; 0x16f96 <amigo_buffered_write+0x194>
   16f80:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16f84:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16f88:	81 e0       	ldi	r24, 0x01	; 1
   16f8a:	86 83       	std	Z+6, r24	; 0x06
   16f8c:	87 81       	ldd	r24, Z+7	; 0x07
   16f8e:	90 85       	ldd	r25, Z+8	; 0x08
   16f90:	84 60       	ori	r24, 0x04	; 4
   16f92:	90 87       	std	Z+8, r25	; 0x08
   16f94:	87 83       	std	Z+7, r24	; 0x07
   16f96:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16f9a:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16f9e:	81 81       	ldd	r24, Z+1	; 0x01
   16fa0:	90 e0       	ldi	r25, 0x00	; 0
   16fa2:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   16fa6:	8e 81       	ldd	r24, Y+6	; 0x06
   16fa8:	9f 81       	ldd	r25, Y+7	; 0x07
   16faa:	88 27       	eor	r24, r24
   16fac:	90 7d       	andi	r25, 0xD0	; 208
   16fae:	27 96       	adiw	r28, 0x07	; 7
   16fb0:	0f b6       	in	r0, 0x3f	; 63
   16fb2:	f8 94       	cli
   16fb4:	de bf       	out	0x3e, r29	; 62
   16fb6:	0f be       	out	0x3f, r0	; 63
   16fb8:	cd bf       	out	0x3d, r28	; 61
   16fba:	df 91       	pop	r29
   16fbc:	cf 91       	pop	r28
   16fbe:	1f 91       	pop	r17
   16fc0:	0f 91       	pop	r16
   16fc2:	ff 90       	pop	r15
   16fc4:	ef 90       	pop	r14
   16fc6:	bf 90       	pop	r11
   16fc8:	af 90       	pop	r10
   16fca:	9f 90       	pop	r9
   16fcc:	8f 90       	pop	r8
   16fce:	08 95       	ret

00016fd0 <amigo_cmd_dsj>:
   16fd0:	a8 e0       	ldi	r26, 0x08	; 8
   16fd2:	b0 e0       	ldi	r27, 0x00	; 0
   16fd4:	ee ee       	ldi	r30, 0xEE	; 238
   16fd6:	f7 eb       	ldi	r31, 0xB7	; 183
   16fd8:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
   16fdc:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16fe0:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16fe4:	86 81       	ldd	r24, Z+6	; 0x06
   16fe6:	88 87       	std	Y+8, r24	; 0x08
   16fe8:	80 e0       	ldi	r24, 0x00	; 0
   16fea:	91 e0       	ldi	r25, 0x01	; 1
   16fec:	9f 83       	std	Y+7, r25	; 0x07
   16fee:	8e 83       	std	Y+6, r24	; 0x06
   16ff0:	ae 01       	movw	r20, r28
   16ff2:	4a 5f       	subi	r20, 0xFA	; 250
   16ff4:	5f 4f       	sbci	r21, 0xFF	; 255
   16ff6:	61 e0       	ldi	r22, 0x01	; 1
   16ff8:	70 e0       	ldi	r23, 0x00	; 0
   16ffa:	ce 01       	movw	r24, r28
   16ffc:	08 96       	adiw	r24, 0x08	; 8
   16ffe:	0e 94 53 8b 	call	0x116a6	; 0x116a6 <gpib_write_str>
   17002:	2e 81       	ldd	r18, Y+6	; 0x06
   17004:	3f 81       	ldd	r19, Y+7	; 0x07
   17006:	22 27       	eor	r18, r18
   17008:	30 7d       	andi	r19, 0xD0	; 208
   1700a:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   1700e:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17012:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   17016:	23 2b       	or	r18, r19
   17018:	11 f4       	brne	.+4      	; 0x1701e <amigo_cmd_dsj+0x4e>
   1701a:	01 97       	sbiw	r24, 0x01	; 1
   1701c:	c1 f0       	breq	.+48     	; 0x1704e <amigo_cmd_dsj+0x7e>
   1701e:	81 e0       	ldi	r24, 0x01	; 1
   17020:	86 83       	std	Z+6, r24	; 0x06
   17022:	87 81       	ldd	r24, Z+7	; 0x07
   17024:	90 85       	ldd	r25, Z+8	; 0x08
   17026:	80 62       	ori	r24, 0x20	; 32
   17028:	90 87       	std	Z+8, r25	; 0x08
   1702a:	87 83       	std	Z+7, r24	; 0x07
   1702c:	40 ff       	sbrs	r20, 0
   1702e:	0a c0       	rjmp	.+20     	; 0x17044 <amigo_cmd_dsj+0x74>
   17030:	8a eb       	ldi	r24, 0xBA	; 186
   17032:	9f e2       	ldi	r25, 0x2F	; 47
   17034:	a0 e0       	ldi	r26, 0x00	; 0
   17036:	ed b7       	in	r30, 0x3d	; 61
   17038:	fe b7       	in	r31, 0x3e	; 62
   1703a:	81 83       	std	Z+1, r24	; 0x01
   1703c:	92 83       	std	Z+2, r25	; 0x02
   1703e:	a3 83       	std	Z+3, r26	; 0x03
   17040:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   17044:	8e 81       	ldd	r24, Y+6	; 0x06
   17046:	9f 81       	ldd	r25, Y+7	; 0x07
   17048:	88 27       	eor	r24, r24
   1704a:	90 7d       	andi	r25, 0xD0	; 208
   1704c:	19 c0       	rjmp	.+50     	; 0x17080 <amigo_cmd_dsj+0xb0>
   1704e:	45 ff       	sbrs	r20, 5
   17050:	0e c0       	rjmp	.+28     	; 0x1706e <amigo_cmd_dsj+0x9e>
   17052:	86 81       	ldd	r24, Z+6	; 0x06
   17054:	90 e0       	ldi	r25, 0x00	; 0
   17056:	ed b7       	in	r30, 0x3d	; 61
   17058:	fe b7       	in	r31, 0x3e	; 62
   1705a:	95 83       	std	Z+5, r25	; 0x05
   1705c:	84 83       	std	Z+4, r24	; 0x04
   1705e:	8d ea       	ldi	r24, 0xAD	; 173
   17060:	9f e2       	ldi	r25, 0x2F	; 47
   17062:	a0 e0       	ldi	r26, 0x00	; 0
   17064:	81 83       	std	Z+1, r24	; 0x01
   17066:	92 83       	std	Z+2, r25	; 0x02
   17068:	a3 83       	std	Z+3, r26	; 0x03
   1706a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1706e:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17072:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17076:	16 82       	std	Z+6, r1	; 0x06
   17078:	10 86       	std	Z+8, r1	; 0x08
   1707a:	17 82       	std	Z+7, r1	; 0x07
   1707c:	80 e0       	ldi	r24, 0x00	; 0
   1707e:	90 e0       	ldi	r25, 0x00	; 0
   17080:	28 96       	adiw	r28, 0x08	; 8
   17082:	e2 e0       	ldi	r30, 0x02	; 2
   17084:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00017088 <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   17088:	00 d0       	rcall	.+0      	; 0x1708a <amigo_cmd_clear+0x2>
   1708a:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1708c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17090:	85 ff       	sbrs	r24, 5
   17092:	0a c0       	rjmp	.+20     	; 0x170a8 <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   17094:	8e e9       	ldi	r24, 0x9E	; 158
   17096:	9f e2       	ldi	r25, 0x2F	; 47
   17098:	a0 e0       	ldi	r26, 0x00	; 0
   1709a:	ed b7       	in	r30, 0x3d	; 61
   1709c:	fe b7       	in	r31, 0x3e	; 62
   1709e:	81 83       	std	Z+1, r24	; 0x01
   170a0:	92 83       	std	Z+2, r25	; 0x02
   170a2:	a3 83       	std	Z+3, r26	; 0x03
   170a4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
    AMIGOs->sector = 0;
   170a8:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   170ac:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   170b0:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   170b2:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   170b4:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   170b6:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   170b8:	10 86       	std	Z+8, r1	; 0x08
   170ba:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   170bc:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   170c0:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   170c4:	81 81       	ldd	r24, Z+1	; 0x01
   170c6:	90 e0       	ldi	r25, 0x00	; 0
   170c8:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
    return(0);
}
   170cc:	80 e0       	ldi	r24, 0x00	; 0
   170ce:	90 e0       	ldi	r25, 0x00	; 0
   170d0:	0f 90       	pop	r0
   170d2:	0f 90       	pop	r0
   170d4:	0f 90       	pop	r0
   170d6:	08 95       	ret

000170d8 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   170d8:	af e0       	ldi	r26, 0x0F	; 15
   170da:	b0 e0       	ldi	r27, 0x00	; 0
   170dc:	e2 e7       	ldi	r30, 0x72	; 114
   170de:	f8 eb       	ldi	r31, 0xB8	; 184
   170e0:	0c 94 bf e6 	jmp	0x1cd7e	; 0x1cd7e <__prologue_saves__+0x18>
   170e4:	c8 2f       	mov	r28, r24
   170e6:	e6 2e       	mov	r14, r22
   170e8:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   170ea:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   170ee:	90 e0       	ldi	r25, 0x00	; 0
   170f0:	0e 94 89 8c 	call	0x11912	; 0x11912 <AMIGO_is_MLA>
   170f4:	20 91 f6 1e 	lds	r18, 0x1EF6	; 0x801ef6 <talking>
   170f8:	f1 2c       	mov	r15, r1
   170fa:	d0 e0       	ldi	r29, 0x00	; 0
   170fc:	89 2b       	or	r24, r25
   170fe:	f1 f0       	breq	.+60     	; 0x1713c <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17100:	82 2f       	mov	r24, r18
   17102:	90 e0       	ldi	r25, 0x00	; 0
   17104:	ed b7       	in	r30, 0x3d	; 61
   17106:	fe b7       	in	r31, 0x3e	; 62
   17108:	97 87       	std	Z+15, r25	; 0x0f
   1710a:	86 87       	std	Z+14, r24	; 0x0e
   1710c:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17110:	90 e0       	ldi	r25, 0x00	; 0
   17112:	95 87       	std	Z+13, r25	; 0x0d
   17114:	84 87       	std	Z+12, r24	; 0x0c
   17116:	13 87       	std	Z+11, r17	; 0x0b
   17118:	02 87       	std	Z+10, r16	; 0x0a
   1711a:	f1 86       	std	Z+9, r15	; 0x09
   1711c:	e0 86       	std	Z+8, r14	; 0x08
   1711e:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17122:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17126:	80 81       	ld	r24, Z
   17128:	90 e0       	ldi	r25, 0x00	; 0
   1712a:	ed b7       	in	r30, 0x3d	; 61
   1712c:	fe b7       	in	r31, 0x3e	; 62
   1712e:	97 83       	std	Z+7, r25	; 0x07
   17130:	86 83       	std	Z+6, r24	; 0x06
   17132:	d5 83       	std	Z+5, r29	; 0x05
   17134:	c4 83       	std	Z+4, r28	; 0x04
   17136:	87 e3       	ldi	r24, 0x37	; 55
   17138:	9f e2       	ldi	r25, 0x2F	; 47
   1713a:	51 c0       	rjmp	.+162    	; 0x171de <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   1713c:	82 2f       	mov	r24, r18
   1713e:	90 e0       	ldi	r25, 0x00	; 0
   17140:	0e 94 9b 8c 	call	0x11936	; 0x11936 <AMIGO_is_MTA>
   17144:	20 91 f8 1e 	lds	r18, 0x1EF8	; 0x801ef8 <listening>
   17148:	30 91 f6 1e 	lds	r19, 0x1EF6	; 0x801ef6 <talking>
   1714c:	a0 91 6a 19 	lds	r26, 0x196A	; 0x80196a <AMIGOs>
   17150:	b0 91 6b 19 	lds	r27, 0x196B	; 0x80196b <AMIGOs+0x1>
   17154:	89 2b       	or	r24, r25
   17156:	b1 f0       	breq	.+44     	; 0x17184 <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17158:	83 2f       	mov	r24, r19
   1715a:	90 e0       	ldi	r25, 0x00	; 0
   1715c:	ed b7       	in	r30, 0x3d	; 61
   1715e:	fe b7       	in	r31, 0x3e	; 62
   17160:	97 87       	std	Z+15, r25	; 0x0f
   17162:	86 87       	std	Z+14, r24	; 0x0e
   17164:	30 e0       	ldi	r19, 0x00	; 0
   17166:	35 87       	std	Z+13, r19	; 0x0d
   17168:	24 87       	std	Z+12, r18	; 0x0c
   1716a:	13 87       	std	Z+11, r17	; 0x0b
   1716c:	02 87       	std	Z+10, r16	; 0x0a
   1716e:	f1 86       	std	Z+9, r15	; 0x09
   17170:	e0 86       	std	Z+8, r14	; 0x08
   17172:	8c 91       	ld	r24, X
   17174:	90 e0       	ldi	r25, 0x00	; 0
   17176:	97 83       	std	Z+7, r25	; 0x07
   17178:	86 83       	std	Z+6, r24	; 0x06
   1717a:	d5 83       	std	Z+5, r29	; 0x05
   1717c:	c4 83       	std	Z+4, r28	; 0x04
   1717e:	80 ed       	ldi	r24, 0xD0	; 208
   17180:	9e e2       	ldi	r25, 0x2E	; 46
   17182:	2d c0       	rjmp	.+90     	; 0x171de <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   17184:	3f 35       	cpi	r19, 0x5F	; 95
   17186:	b1 f4       	brne	.+44     	; 0x171b4 <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17188:	8f e5       	ldi	r24, 0x5F	; 95
   1718a:	90 e0       	ldi	r25, 0x00	; 0
   1718c:	ed b7       	in	r30, 0x3d	; 61
   1718e:	fe b7       	in	r31, 0x3e	; 62
   17190:	97 87       	std	Z+15, r25	; 0x0f
   17192:	86 87       	std	Z+14, r24	; 0x0e
   17194:	30 e0       	ldi	r19, 0x00	; 0
   17196:	35 87       	std	Z+13, r19	; 0x0d
   17198:	24 87       	std	Z+12, r18	; 0x0c
   1719a:	13 87       	std	Z+11, r17	; 0x0b
   1719c:	02 87       	std	Z+10, r16	; 0x0a
   1719e:	f1 86       	std	Z+9, r15	; 0x09
   171a0:	e0 86       	std	Z+8, r14	; 0x08
   171a2:	8c 91       	ld	r24, X
   171a4:	90 e0       	ldi	r25, 0x00	; 0
   171a6:	97 83       	std	Z+7, r25	; 0x07
   171a8:	86 83       	std	Z+6, r24	; 0x06
   171aa:	d5 83       	std	Z+5, r29	; 0x05
   171ac:	c4 83       	std	Z+4, r28	; 0x04
   171ae:	89 e6       	ldi	r24, 0x69	; 105
   171b0:	9e e2       	ldi	r25, 0x2E	; 46
   171b2:	15 c0       	rjmp	.+42     	; 0x171de <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   171b4:	83 2f       	mov	r24, r19
   171b6:	90 e0       	ldi	r25, 0x00	; 0
   171b8:	ed b7       	in	r30, 0x3d	; 61
   171ba:	fe b7       	in	r31, 0x3e	; 62
   171bc:	97 87       	std	Z+15, r25	; 0x0f
   171be:	86 87       	std	Z+14, r24	; 0x0e
   171c0:	30 e0       	ldi	r19, 0x00	; 0
   171c2:	35 87       	std	Z+13, r19	; 0x0d
   171c4:	24 87       	std	Z+12, r18	; 0x0c
   171c6:	13 87       	std	Z+11, r17	; 0x0b
   171c8:	02 87       	std	Z+10, r16	; 0x0a
   171ca:	f1 86       	std	Z+9, r15	; 0x09
   171cc:	e0 86       	std	Z+8, r14	; 0x08
   171ce:	8c 91       	ld	r24, X
   171d0:	90 e0       	ldi	r25, 0x00	; 0
   171d2:	97 83       	std	Z+7, r25	; 0x07
   171d4:	86 83       	std	Z+6, r24	; 0x06
   171d6:	d5 83       	std	Z+5, r29	; 0x05
   171d8:	c4 83       	std	Z+4, r28	; 0x04
   171da:	84 e0       	ldi	r24, 0x04	; 4
   171dc:	9e e2       	ldi	r25, 0x2E	; 46
   171de:	a0 e0       	ldi	r26, 0x00	; 0
   171e0:	81 83       	std	Z+1, r24	; 0x01
   171e2:	92 83       	std	Z+2, r25	; 0x02
   171e4:	a3 83       	std	Z+3, r26	; 0x03
   171e6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   171ea:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   171ee:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   171f2:	81 81       	ldd	r24, Z+1	; 0x01
   171f4:	90 e0       	ldi	r25, 0x00	; 0
   171f6:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
    return(0);
}
   171fa:	80 e0       	ldi	r24, 0x00	; 0
   171fc:	90 e0       	ldi	r25, 0x00	; 0
   171fe:	cd b7       	in	r28, 0x3d	; 61
   17200:	de b7       	in	r29, 0x3e	; 62
   17202:	2f 96       	adiw	r28, 0x0f	; 15
   17204:	e6 e0       	ldi	r30, 0x06	; 6
   17206:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

0001720a <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   1720a:	ab e0       	ldi	r26, 0x0B	; 11
   1720c:	b0 e0       	ldi	r27, 0x00	; 0
   1720e:	eb e0       	ldi	r30, 0x0B	; 11
   17210:	f9 eb       	ldi	r31, 0xB9	; 185
   17212:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
   17216:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   17218:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1721c:	90 e0       	ldi	r25, 0x00	; 0
   1721e:	0e 94 89 8c 	call	0x11912	; 0x11912 <AMIGO_is_MLA>
   17222:	20 91 f6 1e 	lds	r18, 0x1EF6	; 0x801ef6 <talking>
   17226:	d0 e0       	ldi	r29, 0x00	; 0
   17228:	89 2b       	or	r24, r25
   1722a:	d1 f0       	breq	.+52     	; 0x17260 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1722c:	82 2f       	mov	r24, r18
   1722e:	90 e0       	ldi	r25, 0x00	; 0
   17230:	ed b7       	in	r30, 0x3d	; 61
   17232:	fe b7       	in	r31, 0x3e	; 62
   17234:	93 87       	std	Z+11, r25	; 0x0b
   17236:	82 87       	std	Z+10, r24	; 0x0a
   17238:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1723c:	90 e0       	ldi	r25, 0x00	; 0
   1723e:	91 87       	std	Z+9, r25	; 0x09
   17240:	80 87       	std	Z+8, r24	; 0x08
   17242:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17246:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1724a:	80 81       	ld	r24, Z
   1724c:	90 e0       	ldi	r25, 0x00	; 0
   1724e:	ed b7       	in	r30, 0x3d	; 61
   17250:	fe b7       	in	r31, 0x3e	; 62
   17252:	97 83       	std	Z+7, r25	; 0x07
   17254:	86 83       	std	Z+6, r24	; 0x06
   17256:	d5 83       	std	Z+5, r29	; 0x05
   17258:	c4 83       	std	Z+4, r28	; 0x04
   1725a:	84 eb       	ldi	r24, 0xB4	; 180
   1725c:	9d e2       	ldi	r25, 0x2D	; 45
   1725e:	43 c0       	rjmp	.+134    	; 0x172e6 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   17260:	82 2f       	mov	r24, r18
   17262:	90 e0       	ldi	r25, 0x00	; 0
   17264:	0e 94 9b 8c 	call	0x11936	; 0x11936 <AMIGO_is_MTA>
   17268:	20 91 f8 1e 	lds	r18, 0x1EF8	; 0x801ef8 <listening>
   1726c:	40 91 f6 1e 	lds	r20, 0x1EF6	; 0x801ef6 <talking>
   17270:	a0 91 6a 19 	lds	r26, 0x196A	; 0x80196a <AMIGOs>
   17274:	b0 91 6b 19 	lds	r27, 0x196B	; 0x80196b <AMIGOs+0x1>
   17278:	89 2b       	or	r24, r25
   1727a:	89 f0       	breq	.+34     	; 0x1729e <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1727c:	50 e0       	ldi	r21, 0x00	; 0
   1727e:	ed b7       	in	r30, 0x3d	; 61
   17280:	fe b7       	in	r31, 0x3e	; 62
   17282:	53 87       	std	Z+11, r21	; 0x0b
   17284:	42 87       	std	Z+10, r20	; 0x0a
   17286:	30 e0       	ldi	r19, 0x00	; 0
   17288:	31 87       	std	Z+9, r19	; 0x09
   1728a:	20 87       	std	Z+8, r18	; 0x08
   1728c:	8c 91       	ld	r24, X
   1728e:	90 e0       	ldi	r25, 0x00	; 0
   17290:	97 83       	std	Z+7, r25	; 0x07
   17292:	86 83       	std	Z+6, r24	; 0x06
   17294:	d5 83       	std	Z+5, r29	; 0x05
   17296:	c4 83       	std	Z+4, r28	; 0x04
   17298:	84 e6       	ldi	r24, 0x64	; 100
   1729a:	9d e2       	ldi	r25, 0x2D	; 45
   1729c:	24 c0       	rjmp	.+72     	; 0x172e6 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   1729e:	4f 35       	cpi	r20, 0x5F	; 95
   172a0:	91 f4       	brne	.+36     	; 0x172c6 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   172a2:	8f e5       	ldi	r24, 0x5F	; 95
   172a4:	90 e0       	ldi	r25, 0x00	; 0
   172a6:	ed b7       	in	r30, 0x3d	; 61
   172a8:	fe b7       	in	r31, 0x3e	; 62
   172aa:	93 87       	std	Z+11, r25	; 0x0b
   172ac:	82 87       	std	Z+10, r24	; 0x0a
   172ae:	30 e0       	ldi	r19, 0x00	; 0
   172b0:	31 87       	std	Z+9, r19	; 0x09
   172b2:	20 87       	std	Z+8, r18	; 0x08
   172b4:	8c 91       	ld	r24, X
   172b6:	90 e0       	ldi	r25, 0x00	; 0
   172b8:	97 83       	std	Z+7, r25	; 0x07
   172ba:	86 83       	std	Z+6, r24	; 0x06
   172bc:	d5 83       	std	Z+5, r29	; 0x05
   172be:	c4 83       	std	Z+4, r28	; 0x04
   172c0:	84 e1       	ldi	r24, 0x14	; 20
   172c2:	9d e2       	ldi	r25, 0x2D	; 45
   172c4:	10 c0       	rjmp	.+32     	; 0x172e6 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   172c6:	50 e0       	ldi	r21, 0x00	; 0
   172c8:	ed b7       	in	r30, 0x3d	; 61
   172ca:	fe b7       	in	r31, 0x3e	; 62
   172cc:	53 87       	std	Z+11, r21	; 0x0b
   172ce:	42 87       	std	Z+10, r20	; 0x0a
   172d0:	30 e0       	ldi	r19, 0x00	; 0
   172d2:	31 87       	std	Z+9, r19	; 0x09
   172d4:	20 87       	std	Z+8, r18	; 0x08
   172d6:	8c 91       	ld	r24, X
   172d8:	90 e0       	ldi	r25, 0x00	; 0
   172da:	97 83       	std	Z+7, r25	; 0x07
   172dc:	86 83       	std	Z+6, r24	; 0x06
   172de:	d5 83       	std	Z+5, r29	; 0x05
   172e0:	c4 83       	std	Z+4, r28	; 0x04
   172e2:	83 ec       	ldi	r24, 0xC3	; 195
   172e4:	9c e2       	ldi	r25, 0x2C	; 44
   172e6:	a0 e0       	ldi	r26, 0x00	; 0
   172e8:	81 83       	std	Z+1, r24	; 0x01
   172ea:	92 83       	std	Z+2, r25	; 0x02
   172ec:	a3 83       	std	Z+3, r26	; 0x03
   172ee:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   172f2:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   172f6:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   172fa:	81 81       	ldd	r24, Z+1	; 0x01
   172fc:	90 e0       	ldi	r25, 0x00	; 0
   172fe:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
    return(0);
}
   17302:	80 e0       	ldi	r24, 0x00	; 0
   17304:	90 e0       	ldi	r25, 0x00	; 0
   17306:	cd b7       	in	r28, 0x3d	; 61
   17308:	de b7       	in	r29, 0x3e	; 62
   1730a:	2b 96       	adiw	r28, 0x0b	; 11
   1730c:	e2 e0       	ldi	r30, 0x02	; 2
   1730e:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00017312 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   17312:	8f 30       	cpi	r24, 0x0F	; 15
   17314:	29 f0       	breq	.+10     	; 0x17320 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   17316:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   1731a:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1731e:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   17320:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17324:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17328:	81 81       	ldd	r24, Z+1	; 0x01
   1732a:	88 23       	and	r24, r24
   1732c:	29 f0       	breq	.+10     	; 0x17338 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   1732e:	87 81       	ldd	r24, Z+7	; 0x07
   17330:	90 85       	ldd	r25, Z+8	; 0x08
   17332:	80 64       	ori	r24, 0x40	; 64
   17334:	90 87       	std	Z+8, r25	; 0x08
   17336:	87 83       	std	Z+7, r24	; 0x07
   17338:	08 95       	ret

0001733a <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   1733a:	ac e1       	ldi	r26, 0x1C	; 28
   1733c:	b0 e0       	ldi	r27, 0x00	; 0
   1733e:	e3 ea       	ldi	r30, 0xA3	; 163
   17340:	f9 eb       	ldi	r31, 0xB9	; 185
   17342:	0c 94 bf e6 	jmp	0x1cd7e	; 0x1cd7e <__prologue_saves__+0x18>
   17346:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17348:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1734c:	85 ff       	sbrs	r24, 5
   1734e:	16 c0       	rjmp	.+44     	; 0x1737c <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   17350:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17354:	90 e0       	ldi	r25, 0x00	; 0
   17356:	ed b7       	in	r30, 0x3d	; 61
   17358:	fe b7       	in	r31, 0x3e	; 62
   1735a:	91 87       	std	Z+9, r25	; 0x09
   1735c:	80 87       	std	Z+8, r24	; 0x08
   1735e:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17362:	90 e0       	ldi	r25, 0x00	; 0
   17364:	97 83       	std	Z+7, r25	; 0x07
   17366:	86 83       	std	Z+6, r24	; 0x06
   17368:	f5 82       	std	Z+5, r15	; 0x05
   1736a:	e4 82       	std	Z+4, r14	; 0x04
   1736c:	81 e9       	ldi	r24, 0x91	; 145
   1736e:	9c e2       	ldi	r25, 0x2C	; 44
   17370:	a0 e0       	ldi	r26, 0x00	; 0
   17372:	81 83       	std	Z+1, r24	; 0x01
   17374:	92 83       	std	Z+2, r25	; 0x02
   17376:	a3 83       	std	Z+3, r26	; 0x03
   17378:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   1737c:	fe e7       	ldi	r31, 0x7E	; 126
   1737e:	ef 16       	cp	r14, r31
   17380:	f1 04       	cpc	r15, r1
   17382:	f1 f5       	brne	.+124    	; 0x17400 <Amigo_Command+0xc6>
   17384:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17388:	90 e0       	ldi	r25, 0x00	; 0
   1738a:	0e 94 9b 8c 	call	0x11936	; 0x11936 <AMIGO_is_MTA>
   1738e:	89 2b       	or	r24, r25
   17390:	09 f4       	brne	.+2      	; 0x17394 <Amigo_Command+0x5a>
   17392:	86 c0       	rjmp	.+268    	; 0x174a0 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17394:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   17398:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   1739c:	81 81       	ldd	r24, Z+1	; 0x01
   1739e:	90 e0       	ldi	r25, 0x00	; 0
   173a0:	0e 94 59 86 	call	0x10cb2	; 0x10cb2 <gpib_disable_PPR>
        status = EOI_FLAG;
   173a4:	80 e0       	ldi	r24, 0x00	; 0
   173a6:	91 e0       	ldi	r25, 0x01	; 1
   173a8:	9c 8f       	std	Y+28, r25	; 0x1c
   173aa:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   173ac:	ae 01       	movw	r20, r28
   173ae:	45 5e       	subi	r20, 0xE5	; 229
   173b0:	5f 4f       	sbci	r21, 0xFF	; 255
   173b2:	60 e0       	ldi	r22, 0x00	; 0
   173b4:	72 e0       	ldi	r23, 0x02	; 2
   173b6:	82 ef       	ldi	r24, 0xF2	; 242
   173b8:	9c e1       	ldi	r25, 0x1C	; 28
   173ba:	0e 94 53 8b 	call	0x116a6	; 0x116a6 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   173be:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   173c2:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   173c6:	81 81       	ldd	r24, Z+1	; 0x01
   173c8:	90 e0       	ldi	r25, 0x00	; 0
   173ca:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   173ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
   173d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
   173d2:	88 27       	eor	r24, r24
   173d4:	90 7d       	andi	r25, 0xD0	; 208
   173d6:	89 2b       	or	r24, r25
   173d8:	09 f4       	brne	.+2      	; 0x173dc <Amigo_Command+0xa2>
   173da:	89 c2       	rjmp	.+1298   	; 0x178ee <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   173dc:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   173e0:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   173e4:	81 e0       	ldi	r24, 0x01	; 1
   173e6:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   173e8:	87 81       	ldd	r24, Z+7	; 0x07
   173ea:	90 85       	ldd	r25, Z+8	; 0x08
   173ec:	80 62       	ori	r24, 0x20	; 32
   173ee:	90 87       	std	Z+8, r25	; 0x08
   173f0:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   173f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173f6:	80 ff       	sbrs	r24, 0
   173f8:	7a c2       	rjmp	.+1268   	; 0x178ee <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   173fa:	8f e6       	ldi	r24, 0x6F	; 111
   173fc:	9c e2       	ldi	r25, 0x2C	; 44
   173fe:	8e c0       	rjmp	.+284    	; 0x1751c <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   17400:	ff e7       	ldi	r31, 0x7F	; 127
   17402:	ef 16       	cp	r14, r31
   17404:	f1 04       	cpc	r15, r1
   17406:	09 f0       	breq	.+2      	; 0x1740a <Amigo_Command+0xd0>
   17408:	4b c0       	rjmp	.+150    	; 0x174a0 <Amigo_Command+0x166>
   1740a:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1740e:	90 e0       	ldi	r25, 0x00	; 0
   17410:	0e 94 89 8c 	call	0x11912	; 0x11912 <AMIGO_is_MLA>
   17414:	89 2b       	or	r24, r25
   17416:	09 f4       	brne	.+2      	; 0x1741a <Amigo_Command+0xe0>
   17418:	43 c0       	rjmp	.+134    	; 0x174a0 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1741a:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   1741e:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   17422:	81 81       	ldd	r24, Z+1	; 0x01
   17424:	90 e0       	ldi	r25, 0x00	; 0
   17426:	0e 94 59 86 	call	0x10cb2	; 0x10cb2 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   1742a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1742e:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   17430:	0e 94 49 85 	call	0x10a92	; 0x10a92 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   17434:	80 e0       	ldi	r24, 0x00	; 0
   17436:	91 e0       	ldi	r25, 0x01	; 1
   17438:	9c 8f       	std	Y+28, r25	; 0x1c
   1743a:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1743c:	ae 01       	movw	r20, r28
   1743e:	45 5e       	subi	r20, 0xE5	; 229
   17440:	5f 4f       	sbci	r21, 0xFF	; 255
   17442:	60 e0       	ldi	r22, 0x00	; 0
   17444:	72 e0       	ldi	r23, 0x02	; 2
   17446:	82 ef       	ldi	r24, 0xF2	; 242
   17448:	9c e1       	ldi	r25, 0x1C	; 28
   1744a:	0e 94 b1 8a 	call	0x11562	; 0x11562 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   1744e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17452:	87 ff       	sbrs	r24, 7
   17454:	04 c0       	rjmp	.+8      	; 0x1745e <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   17456:	82 ed       	ldi	r24, 0xD2	; 210
   17458:	95 e1       	ldi	r25, 0x15	; 21
   1745a:	0e 94 5b 85 	call	0x10ab6	; 0x10ab6 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1745e:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   17462:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   17466:	81 81       	ldd	r24, Z+1	; 0x01
   17468:	90 e0       	ldi	r25, 0x00	; 0
   1746a:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   1746e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17470:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17472:	88 27       	eor	r24, r24
   17474:	90 7d       	andi	r25, 0xD0	; 208
   17476:	89 2b       	or	r24, r25
   17478:	09 f4       	brne	.+2      	; 0x1747c <Amigo_Command+0x142>
   1747a:	39 c2       	rjmp	.+1138   	; 0x178ee <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   1747c:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17480:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17484:	81 e0       	ldi	r24, 0x01	; 1
   17486:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17488:	87 81       	ldd	r24, Z+7	; 0x07
   1748a:	90 85       	ldd	r25, Z+8	; 0x08
   1748c:	80 62       	ori	r24, 0x20	; 32
   1748e:	90 87       	std	Z+8, r25	; 0x08
   17490:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   17492:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17496:	80 ff       	sbrs	r24, 0
   17498:	2a c2       	rjmp	.+1108   	; 0x178ee <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   1749a:	8e e4       	ldi	r24, 0x4E	; 78
   1749c:	9c e2       	ldi	r25, 0x2C	; 44
   1749e:	3e c0       	rjmp	.+124    	; 0x1751c <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   174a0:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   174a4:	90 e0       	ldi	r25, 0x00	; 0
   174a6:	0e 94 89 8c 	call	0x11912	; 0x11912 <AMIGO_is_MLA>
   174aa:	89 2b       	or	r24, r25
   174ac:	19 f4       	brne	.+6      	; 0x174b4 <Amigo_Command+0x17a>
        return(0);
   174ae:	80 e0       	ldi	r24, 0x00	; 0
   174b0:	90 e0       	ldi	r25, 0x00	; 0
   174b2:	25 c2       	rjmp	.+1098   	; 0x178fe <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   174b4:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   174b8:	90 e0       	ldi	r25, 0x00	; 0
   174ba:	0e 94 9b 8c 	call	0x11936	; 0x11936 <AMIGO_is_MTA>
   174be:	89 2b       	or	r24, r25
   174c0:	b1 f7       	brne	.-20     	; 0x174ae <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   174c2:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   174c6:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   174ca:	81 81       	ldd	r24, Z+1	; 0x01
   174cc:	90 e0       	ldi	r25, 0x00	; 0
   174ce:	0e 94 59 86 	call	0x10cb2	; 0x10cb2 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   174d2:	80 e0       	ldi	r24, 0x00	; 0
   174d4:	91 e0       	ldi	r25, 0x01	; 1
   174d6:	9c 8f       	std	Y+28, r25	; 0x1c
   174d8:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   174da:	ae 01       	movw	r20, r28
   174dc:	45 5e       	subi	r20, 0xE5	; 229
   174de:	5f 4f       	sbci	r21, 0xFF	; 255
   174e0:	60 e0       	ldi	r22, 0x00	; 0
   174e2:	72 e0       	ldi	r23, 0x02	; 2
   174e4:	82 ef       	ldi	r24, 0xF2	; 242
   174e6:	9c e1       	ldi	r25, 0x1C	; 28
   174e8:	0e 94 b1 8a 	call	0x11562	; 0x11562 <gpib_read_str>
   174ec:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   174ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
   174f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
   174f2:	88 27       	eor	r24, r24
   174f4:	90 7d       	andi	r25, 0xD0	; 208
   174f6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   174fa:	89 2b       	or	r24, r25
   174fc:	c1 f0       	breq	.+48     	; 0x1752e <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   174fe:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17502:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17506:	81 e0       	ldi	r24, 0x01	; 1
   17508:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   1750a:	87 81       	ldd	r24, Z+7	; 0x07
   1750c:	90 85       	ldd	r25, Z+8	; 0x08
   1750e:	80 62       	ori	r24, 0x20	; 32
   17510:	90 87       	std	Z+8, r25	; 0x08
   17512:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   17514:	20 ff       	sbrs	r18, 0
   17516:	eb c1       	rjmp	.+982    	; 0x178ee <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   17518:	8d e2       	ldi	r24, 0x2D	; 45
   1751a:	9c e2       	ldi	r25, 0x2C	; 44
   1751c:	a0 e0       	ldi	r26, 0x00	; 0
   1751e:	ed b7       	in	r30, 0x3d	; 61
   17520:	fe b7       	in	r31, 0x3e	; 62
   17522:	81 83       	std	Z+1, r24	; 0x01
   17524:	92 83       	std	Z+2, r25	; 0x02
   17526:	a3 83       	std	Z+3, r26	; 0x03
   17528:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1752c:	e0 c1       	rjmp	.+960    	; 0x178ee <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1752e:	25 ff       	sbrs	r18, 5
   17530:	0e c0       	rjmp	.+28     	; 0x1754e <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   17532:	ed b7       	in	r30, 0x3d	; 61
   17534:	fe b7       	in	r31, 0x3e	; 62
   17536:	17 83       	std	Z+7, r17	; 0x07
   17538:	06 83       	std	Z+6, r16	; 0x06
   1753a:	f5 82       	std	Z+5, r15	; 0x05
   1753c:	e4 82       	std	Z+4, r14	; 0x04
   1753e:	8e ef       	ldi	r24, 0xFE	; 254
   17540:	9b e2       	ldi	r25, 0x2B	; 43
   17542:	a0 e0       	ldi	r26, 0x00	; 0
   17544:	81 83       	std	Z+1, r24	; 0x01
   17546:	92 83       	std	Z+2, r25	; 0x02
   17548:	a3 83       	std	Z+3, r26	; 0x03
   1754a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            secondary, len);
#endif
    if(!len)
   1754e:	01 15       	cp	r16, r1
   17550:	11 05       	cpc	r17, r1
   17552:	61 f4       	brne	.+24     	; 0x1756c <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   17554:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17558:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1755c:	81 e0       	ldi	r24, 0x01	; 1
   1755e:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17560:	87 81       	ldd	r24, Z+7	; 0x07
   17562:	90 85       	ldd	r25, Z+8	; 0x08
   17564:	80 62       	ori	r24, 0x20	; 32
   17566:	90 87       	std	Z+8, r25	; 0x08
   17568:	87 83       	std	Z+7, r24	; 0x07
   1756a:	c1 c1       	rjmp	.+898    	; 0x178ee <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   1756c:	60 91 f2 1c 	lds	r22, 0x1CF2	; 0x801cf2 <gpib_iobuff>

    if (secondary == 0x68)
   17570:	f8 e6       	ldi	r31, 0x68	; 104
   17572:	ef 16       	cp	r14, r31
   17574:	f1 04       	cpc	r15, r1
   17576:	09 f0       	breq	.+2      	; 0x1757a <Amigo_Command+0x240>
   17578:	28 c1       	rjmp	.+592    	; 0x177ca <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   1757a:	61 11       	cpse	r22, r1
   1757c:	2e c0       	rjmp	.+92     	; 0x175da <Amigo_Command+0x2a0>
   1757e:	02 30       	cpi	r16, 0x02	; 2
   17580:	11 05       	cpc	r17, r1
   17582:	09 f0       	breq	.+2      	; 0x17586 <Amigo_Command+0x24c>
   17584:	b9 c1       	rjmp	.+882    	; 0x178f8 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17586:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1758a:	85 ff       	sbrs	r24, 5
   1758c:	0a c0       	rjmp	.+20     	; 0x175a2 <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   1758e:	8e ed       	ldi	r24, 0xDE	; 222
   17590:	9b e2       	ldi	r25, 0x2B	; 43
   17592:	a0 e0       	ldi	r26, 0x00	; 0
   17594:	ed b7       	in	r30, 0x3d	; 61
   17596:	fe b7       	in	r31, 0x3e	; 62
   17598:	81 83       	std	Z+1, r24	; 0x01
   1759a:	92 83       	std	Z+2, r25	; 0x02
   1759c:	a3 83       	std	Z+3, r26	; 0x03
   1759e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   175a2:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   175a6:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   175aa:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   175ac:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   175ae:	10 86       	std	Z+8, r1	; 0x08
   175b0:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   175b2:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   175b4:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   175b8:	98 2f       	mov	r25, r24
   175ba:	92 95       	swap	r25
   175bc:	96 95       	lsr	r25
   175be:	96 95       	lsr	r25
   175c0:	93 70       	andi	r25, 0x03	; 3
   175c2:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   175c4:	8f 73       	andi	r24, 0x3F	; 63
   175c6:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   175c8:	ce 01       	movw	r24, r28
   175ca:	0a 96       	adiw	r24, 0x0a	; 10
   175cc:	d1 d9       	rcall	.-3166   	; 0x16970 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   175ce:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   175d2:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   175d6:	85 e0       	ldi	r24, 0x05	; 5
   175d8:	19 c1       	rjmp	.+562    	; 0x1780c <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   175da:	62 30       	cpi	r22, 0x02	; 2
   175dc:	09 f0       	breq	.+2      	; 0x175e0 <Amigo_Command+0x2a6>
   175de:	3f c0       	rjmp	.+126    	; 0x1765e <Amigo_Command+0x324>
   175e0:	05 30       	cpi	r16, 0x05	; 5
   175e2:	11 05       	cpc	r17, r1
   175e4:	d1 f4       	brne	.+52     	; 0x1761a <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   175ea:	85 ff       	sbrs	r24, 5
   175ec:	0a c0       	rjmp	.+20     	; 0x17602 <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   175ee:	8a ec       	ldi	r24, 0xCA	; 202
   175f0:	9b e2       	ldi	r25, 0x2B	; 43
   175f2:	a0 e0       	ldi	r26, 0x00	; 0
   175f4:	ed b7       	in	r30, 0x3d	; 61
   175f6:	fe b7       	in	r31, 0x3e	; 62
   175f8:	81 83       	std	Z+1, r24	; 0x01
   175fa:	92 83       	std	Z+2, r25	; 0x02
   175fc:	a3 83       	std	Z+3, r26	; 0x03
   175fe:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17602:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   17606:	85 de       	rcall	.-758    	; 0x17312 <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   17608:	80 91 f4 1c 	lds	r24, 0x1CF4	; 0x801cf4 <gpib_iobuff+0x2>
   1760c:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   1760e:	80 91 f5 1c 	lds	r24, 0x1CF5	; 0x801cf5 <gpib_iobuff+0x3>
   17612:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   17614:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <gpib_iobuff+0x4>
   17618:	1d c0       	rjmp	.+58     	; 0x17654 <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   1761a:	06 30       	cpi	r16, 0x06	; 6
   1761c:	11 05       	cpc	r17, r1
   1761e:	09 f0       	breq	.+2      	; 0x17622 <Amigo_Command+0x2e8>
   17620:	6b c1       	rjmp	.+726    	; 0x178f8 <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17622:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17626:	85 ff       	sbrs	r24, 5
   17628:	0a c0       	rjmp	.+20     	; 0x1763e <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   1762a:	86 eb       	ldi	r24, 0xB6	; 182
   1762c:	9b e2       	ldi	r25, 0x2B	; 43
   1762e:	a0 e0       	ldi	r26, 0x00	; 0
   17630:	ed b7       	in	r30, 0x3d	; 61
   17632:	fe b7       	in	r31, 0x3e	; 62
   17634:	81 83       	std	Z+1, r24	; 0x01
   17636:	92 83       	std	Z+2, r25	; 0x02
   17638:	a3 83       	std	Z+3, r26	; 0x03
   1763a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1763e:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   17642:	67 de       	rcall	.-818    	; 0x17312 <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   17644:	80 91 f5 1c 	lds	r24, 0x1CF5	; 0x801cf5 <gpib_iobuff+0x3>
   17648:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   1764a:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <gpib_iobuff+0x4>
   1764e:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   17650:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   17654:	8f 87       	std	Y+15, r24	; 0x0f
   17656:	ce 01       	movw	r24, r28
   17658:	0a 96       	adiw	r24, 0x0a	; 10
   1765a:	8a d9       	rcall	.-3308   	; 0x16970 <amigo_seek>
   1765c:	d8 c0       	rjmp	.+432    	; 0x1780e <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   1765e:	63 30       	cpi	r22, 0x03	; 3
   17660:	e9 f4       	brne	.+58     	; 0x1769c <Amigo_Command+0x362>
   17662:	02 30       	cpi	r16, 0x02	; 2
   17664:	11 05       	cpc	r17, r1
   17666:	09 f0       	breq	.+2      	; 0x1766a <Amigo_Command+0x330>
   17668:	47 c1       	rjmp	.+654    	; 0x178f8 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1766a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1766e:	85 ff       	sbrs	r24, 5
   17670:	0a c0       	rjmp	.+20     	; 0x17686 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   17672:	8d e8       	ldi	r24, 0x8D	; 141
   17674:	9b e2       	ldi	r25, 0x2B	; 43
   17676:	a0 e0       	ldi	r26, 0x00	; 0
   17678:	ed b7       	in	r30, 0x3d	; 61
   1767a:	fe b7       	in	r31, 0x3e	; 62
   1767c:	81 83       	std	Z+1, r24	; 0x01
   1767e:	92 83       	std	Z+2, r25	; 0x02
   17680:	a3 83       	std	Z+3, r26	; 0x03
   17682:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17686:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
            amigo_request_status();
   1768a:	43 de       	rcall	.-890    	; 0x17312 <amigo_check_unit>
   1768c:	3d d8       	rcall	.-3974   	; 0x16708 <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   1768e:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17692:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17696:	83 e0       	ldi	r24, 0x03	; 3
   17698:	80 83       	st	Z, r24
   1769a:	29 c1       	rjmp	.+594    	; 0x178ee <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   1769c:	65 30       	cpi	r22, 0x05	; 5
   1769e:	d9 f4       	brne	.+54     	; 0x176d6 <Amigo_Command+0x39c>
   176a0:	02 30       	cpi	r16, 0x02	; 2
   176a2:	11 05       	cpc	r17, r1
   176a4:	09 f0       	breq	.+2      	; 0x176a8 <Amigo_Command+0x36e>
   176a6:	28 c1       	rjmp	.+592    	; 0x178f8 <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   176a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176ac:	85 ff       	sbrs	r24, 5
   176ae:	0a c0       	rjmp	.+20     	; 0x176c4 <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   176b0:	8c e6       	ldi	r24, 0x6C	; 108
   176b2:	9b e2       	ldi	r25, 0x2B	; 43
   176b4:	a0 e0       	ldi	r26, 0x00	; 0
   176b6:	ed b7       	in	r30, 0x3d	; 61
   176b8:	fe b7       	in	r31, 0x3e	; 62
   176ba:	81 83       	std	Z+1, r24	; 0x01
   176bc:	92 83       	std	Z+2, r25	; 0x02
   176be:	a3 83       	std	Z+3, r26	; 0x03
   176c0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   176c4:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   176c8:	24 de       	rcall	.-952    	; 0x17312 <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   176ca:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   176ce:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   176d2:	86 e0       	ldi	r24, 0x06	; 6
   176d4:	e7 c0       	rjmp	.+462    	; 0x178a4 <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   176d6:	67 30       	cpi	r22, 0x07	; 7
   176d8:	f9 f4       	brne	.+62     	; 0x17718 <Amigo_Command+0x3de>
   176da:	04 30       	cpi	r16, 0x04	; 4
   176dc:	11 05       	cpc	r17, r1
   176de:	09 f0       	breq	.+2      	; 0x176e2 <Amigo_Command+0x3a8>
   176e0:	0b c1       	rjmp	.+534    	; 0x178f8 <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   176e2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176e6:	85 ff       	sbrs	r24, 5
   176e8:	0a c0       	rjmp	.+20     	; 0x176fe <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   176ea:	8c e5       	ldi	r24, 0x5C	; 92
   176ec:	9b e2       	ldi	r25, 0x2B	; 43
   176ee:	a0 e0       	ldi	r26, 0x00	; 0
   176f0:	ed b7       	in	r30, 0x3d	; 61
   176f2:	fe b7       	in	r31, 0x3e	; 62
   176f4:	81 83       	std	Z+1, r24	; 0x01
   176f6:	92 83       	std	Z+2, r25	; 0x02
   176f8:	a3 83       	std	Z+3, r26	; 0x03
   176fa:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   176fe:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   17702:	07 de       	rcall	.-1010   	; 0x17312 <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   17704:	80 91 f4 1c 	lds	r24, 0x1CF4	; 0x801cf4 <gpib_iobuff+0x2>
   17708:	90 e0       	ldi	r25, 0x00	; 0
   1770a:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   1770c:	88 27       	eor	r24, r24
   1770e:	20 91 f5 1c 	lds	r18, 0x1CF5	; 0x801cf5 <gpib_iobuff+0x3>
   17712:	82 2b       	or	r24, r18
   17714:	58 d9       	rcall	.-3408   	; 0x169c6 <amigo_verify>
   17716:	f3 c0       	rjmp	.+486    	; 0x178fe <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   17718:	68 30       	cpi	r22, 0x08	; 8
   1771a:	d9 f4       	brne	.+54     	; 0x17752 <Amigo_Command+0x418>
   1771c:	02 30       	cpi	r16, 0x02	; 2
   1771e:	11 05       	cpc	r17, r1
   17720:	09 f0       	breq	.+2      	; 0x17724 <Amigo_Command+0x3ea>
   17722:	ea c0       	rjmp	.+468    	; 0x178f8 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17724:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17728:	85 ff       	sbrs	r24, 5
   1772a:	0a c0       	rjmp	.+20     	; 0x17740 <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   1772c:	8a e3       	ldi	r24, 0x3A	; 58
   1772e:	9b e2       	ldi	r25, 0x2B	; 43
   17730:	a0 e0       	ldi	r26, 0x00	; 0
   17732:	ed b7       	in	r30, 0x3d	; 61
   17734:	fe b7       	in	r31, 0x3e	; 62
   17736:	81 83       	std	Z+1, r24	; 0x01
   17738:	92 83       	std	Z+2, r25	; 0x02
   1773a:	a3 83       	std	Z+3, r26	; 0x03
   1773c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17740:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   17744:	e6 dd       	rcall	.-1076   	; 0x17312 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   17746:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   1774a:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1774e:	88 e0       	ldi	r24, 0x08	; 8
   17750:	5d c0       	rjmp	.+186    	; 0x1780c <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   17752:	86 2f       	mov	r24, r22
   17754:	8f 7d       	andi	r24, 0xDF	; 223
   17756:	8b 30       	cpi	r24, 0x0B	; 11
   17758:	d9 f4       	brne	.+54     	; 0x17790 <Amigo_Command+0x456>
   1775a:	02 30       	cpi	r16, 0x02	; 2
   1775c:	11 05       	cpc	r17, r1
   1775e:	09 f0       	breq	.+2      	; 0x17762 <Amigo_Command+0x428>
   17760:	cb c0       	rjmp	.+406    	; 0x178f8 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17762:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17766:	85 ff       	sbrs	r24, 5
   17768:	0a c0       	rjmp	.+20     	; 0x1777e <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   1776a:	8e e1       	ldi	r24, 0x1E	; 30
   1776c:	9b e2       	ldi	r25, 0x2B	; 43
   1776e:	a0 e0       	ldi	r26, 0x00	; 0
   17770:	ed b7       	in	r30, 0x3d	; 61
   17772:	fe b7       	in	r31, 0x3e	; 62
   17774:	81 83       	std	Z+1, r24	; 0x01
   17776:	92 83       	std	Z+2, r25	; 0x02
   17778:	a3 83       	std	Z+3, r26	; 0x03
   1777a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1777e:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   17782:	c7 dd       	rcall	.-1138   	; 0x17312 <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   17784:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17788:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1778c:	8a e0       	ldi	r24, 0x0A	; 10
   1778e:	3e c0       	rjmp	.+124    	; 0x1780c <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   17790:	64 31       	cpi	r22, 0x14	; 20
   17792:	09 f0       	breq	.+2      	; 0x17796 <Amigo_Command+0x45c>
   17794:	b1 c0       	rjmp	.+354    	; 0x178f8 <Amigo_Command+0x5be>
   17796:	02 30       	cpi	r16, 0x02	; 2
   17798:	11 05       	cpc	r17, r1
   1779a:	09 f0       	breq	.+2      	; 0x1779e <Amigo_Command+0x464>
   1779c:	ad c0       	rjmp	.+346    	; 0x178f8 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1779e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177a2:	85 ff       	sbrs	r24, 5
   177a4:	0a c0       	rjmp	.+20     	; 0x177ba <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   177a6:	85 ef       	ldi	r24, 0xF5	; 245
   177a8:	9a e2       	ldi	r25, 0x2A	; 42
   177aa:	a0 e0       	ldi	r26, 0x00	; 0
   177ac:	ed b7       	in	r30, 0x3d	; 61
   177ae:	fe b7       	in	r31, 0x3e	; 62
   177b0:	81 83       	std	Z+1, r24	; 0x01
   177b2:	92 83       	std	Z+2, r25	; 0x02
   177b4:	a3 83       	std	Z+3, r26	; 0x03
   177b6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
            amigo_request_logical_address();
   177ba:	0e 94 76 b3 	call	0x166ec	; 0x166ec <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   177be:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   177c2:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   177c6:	84 e0       	ldi	r24, 0x04	; 4
   177c8:	21 c0       	rjmp	.+66     	; 0x1780c <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   177ca:	f9 e6       	ldi	r31, 0x69	; 105
   177cc:	ef 16       	cp	r14, r31
   177ce:	f1 04       	cpc	r15, r1
   177d0:	39 f5       	brne	.+78     	; 0x17820 <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   177d2:	68 30       	cpi	r22, 0x08	; 8
   177d4:	09 f0       	breq	.+2      	; 0x177d8 <Amigo_Command+0x49e>
   177d6:	90 c0       	rjmp	.+288    	; 0x178f8 <Amigo_Command+0x5be>
   177d8:	02 30       	cpi	r16, 0x02	; 2
   177da:	11 05       	cpc	r17, r1
   177dc:	09 f0       	breq	.+2      	; 0x177e0 <Amigo_Command+0x4a6>
   177de:	8c c0       	rjmp	.+280    	; 0x178f8 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   177e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177e4:	85 ff       	sbrs	r24, 5
   177e6:	0a c0       	rjmp	.+20     	; 0x177fc <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   177e8:	85 ed       	ldi	r24, 0xD5	; 213
   177ea:	9a e2       	ldi	r25, 0x2A	; 42
   177ec:	a0 e0       	ldi	r26, 0x00	; 0
   177ee:	ed b7       	in	r30, 0x3d	; 61
   177f0:	fe b7       	in	r31, 0x3e	; 62
   177f2:	81 83       	std	Z+1, r24	; 0x01
   177f4:	92 83       	std	Z+2, r25	; 0x02
   177f6:	a3 83       	std	Z+3, r26	; 0x03
   177f8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   177fc:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   17800:	88 dd       	rcall	.-1264   	; 0x17312 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17802:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17806:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1780a:	89 e0       	ldi	r24, 0x09	; 9
   1780c:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1780e:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   17812:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   17816:	81 81       	ldd	r24, Z+1	; 0x01
   17818:	90 e0       	ldi	r25, 0x00	; 0
   1781a:	0e 94 23 86 	call	0x10c46	; 0x10c46 <gpib_enable_PPR>
   1781e:	67 c0       	rjmp	.+206    	; 0x178ee <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17820:	fa e6       	ldi	r31, 0x6A	; 106
   17822:	ef 16       	cp	r14, r31
   17824:	f1 04       	cpc	r15, r1
   17826:	09 f0       	breq	.+2      	; 0x1782a <Amigo_Command+0x4f0>
   17828:	40 c0       	rjmp	.+128    	; 0x178aa <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   1782a:	68 30       	cpi	r22, 0x08	; 8
   1782c:	f1 f4       	brne	.+60     	; 0x1786a <Amigo_Command+0x530>
   1782e:	02 30       	cpi	r16, 0x02	; 2
   17830:	11 05       	cpc	r17, r1
   17832:	09 f0       	breq	.+2      	; 0x17836 <Amigo_Command+0x4fc>
   17834:	61 c0       	rjmp	.+194    	; 0x178f8 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17836:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1783a:	85 ff       	sbrs	r24, 5
   1783c:	0a c0       	rjmp	.+20     	; 0x17852 <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   1783e:	8a ea       	ldi	r24, 0xAA	; 170
   17840:	9a e2       	ldi	r25, 0x2A	; 42
   17842:	a0 e0       	ldi	r26, 0x00	; 0
   17844:	ed b7       	in	r30, 0x3d	; 61
   17846:	fe b7       	in	r31, 0x3e	; 62
   17848:	81 83       	std	Z+1, r24	; 0x01
   1784a:	92 83       	std	Z+2, r25	; 0x02
   1784c:	a3 83       	std	Z+3, r26	; 0x03
   1784e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17852:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   17856:	5d dd       	rcall	.-1350   	; 0x17312 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   17858:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   1785c:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17860:	82 e0       	ldi	r24, 0x02	; 2
   17862:	80 83       	st	Z, r24
            amigo_request_status();
   17864:	0e 94 84 b3 	call	0x16708	; 0x16708 <amigo_request_status>
   17868:	42 c0       	rjmp	.+132    	; 0x178ee <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   1786a:	65 30       	cpi	r22, 0x05	; 5
   1786c:	09 f0       	breq	.+2      	; 0x17870 <Amigo_Command+0x536>
   1786e:	44 c0       	rjmp	.+136    	; 0x178f8 <Amigo_Command+0x5be>
   17870:	02 30       	cpi	r16, 0x02	; 2
   17872:	11 05       	cpc	r17, r1
   17874:	09 f0       	breq	.+2      	; 0x17878 <Amigo_Command+0x53e>
   17876:	40 c0       	rjmp	.+128    	; 0x178f8 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17878:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1787c:	85 ff       	sbrs	r24, 5
   1787e:	0a c0       	rjmp	.+20     	; 0x17894 <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   17880:	8b e8       	ldi	r24, 0x8B	; 139
   17882:	9a e2       	ldi	r25, 0x2A	; 42
   17884:	a0 e0       	ldi	r26, 0x00	; 0
   17886:	ed b7       	in	r30, 0x3d	; 61
   17888:	fe b7       	in	r31, 0x3e	; 62
   1788a:	81 83       	std	Z+1, r24	; 0x01
   1788c:	92 83       	std	Z+2, r25	; 0x02
   1788e:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17890:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   17894:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   17898:	3c dd       	rcall	.-1416   	; 0x17312 <amigo_check_unit>
   1789a:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   1789e:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   178a2:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   178a4:	80 83       	st	Z, r24
   178a6:	c5 d9       	rcall	.-3190   	; 0x16c32 <amigo_buffered_read_command>
   178a8:	2a c0       	rjmp	.+84     	; 0x178fe <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   178aa:	fc e6       	ldi	r31, 0x6C	; 108
   178ac:	ef 16       	cp	r14, r31
   178ae:	f1 04       	cpc	r15, r1
   178b0:	d1 f4       	brne	.+52     	; 0x178e6 <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   178b2:	68 31       	cpi	r22, 0x18	; 24
   178b4:	09 f5       	brne	.+66     	; 0x178f8 <Amigo_Command+0x5be>
   178b6:	05 30       	cpi	r16, 0x05	; 5
   178b8:	11 05       	cpc	r17, r1
   178ba:	f1 f4       	brne	.+60     	; 0x178f8 <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   178bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   178c0:	85 ff       	sbrs	r24, 5
   178c2:	0a c0       	rjmp	.+20     	; 0x178d8 <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   178c4:	8b e7       	ldi	r24, 0x7B	; 123
   178c6:	9a e2       	ldi	r25, 0x2A	; 42
   178c8:	a0 e0       	ldi	r26, 0x00	; 0
   178ca:	ed b7       	in	r30, 0x3d	; 61
   178cc:	fe b7       	in	r31, 0x3e	; 62
   178ce:	81 83       	std	Z+1, r24	; 0x01
   178d0:	92 83       	std	Z+2, r25	; 0x02
   178d2:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   178d4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   178d8:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   178dc:	1a dd       	rcall	.-1484   	; 0x17312 <amigo_check_unit>
   178de:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <gpib_iobuff+0x4>
   178e2:	0f d9       	rcall	.-3554   	; 0x16b02 <amigo_format>
   178e4:	04 c0       	rjmp	.+8      	; 0x178ee <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   178e6:	f0 e7       	ldi	r31, 0x70	; 112
   178e8:	ef 16       	cp	r14, r31
   178ea:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   178ec:	29 f4       	brne	.+10     	; 0x178f8 <Amigo_Command+0x5be>
   178ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
   178f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
   178f2:	88 27       	eor	r24, r24
   178f4:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   178f6:	03 c0       	rjmp	.+6      	; 0x178fe <Amigo_Command+0x5c4>
   178f8:	a8 01       	movw	r20, r16
   178fa:	8e 2d       	mov	r24, r14
   178fc:	ed db       	rcall	.-2086   	; 0x170d8 <amigo_todo_op>
}
   178fe:	6c 96       	adiw	r28, 0x1c	; 28
   17900:	e6 e0       	ldi	r30, 0x06	; 6
   17902:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

00017906 <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   17906:	a9 e0       	ldi	r26, 0x09	; 9
   17908:	b0 e0       	ldi	r27, 0x00	; 0
   1790a:	e9 e8       	ldi	r30, 0x89	; 137
   1790c:	fc eb       	ldi	r31, 0xBC	; 188
   1790e:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
   17912:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17914:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17918:	85 ff       	sbrs	r24, 5
   1791a:	16 c0       	rjmp	.+44     	; 0x17948 <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   1791c:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17920:	90 e0       	ldi	r25, 0x00	; 0
   17922:	ed b7       	in	r30, 0x3d	; 61
   17924:	fe b7       	in	r31, 0x3e	; 62
   17926:	91 87       	std	Z+9, r25	; 0x09
   17928:	80 87       	std	Z+8, r24	; 0x08
   1792a:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1792e:	90 e0       	ldi	r25, 0x00	; 0
   17930:	97 83       	std	Z+7, r25	; 0x07
   17932:	86 83       	std	Z+6, r24	; 0x06
   17934:	d5 83       	std	Z+5, r29	; 0x05
   17936:	c4 83       	std	Z+4, r28	; 0x04
   17938:	89 e4       	ldi	r24, 0x49	; 73
   1793a:	9a e2       	ldi	r25, 0x2A	; 42
   1793c:	a0 e0       	ldi	r26, 0x00	; 0
   1793e:	81 83       	std	Z+1, r24	; 0x01
   17940:	92 83       	std	Z+2, r25	; 0x02
   17942:	a3 83       	std	Z+3, r26	; 0x03
   17944:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17948:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   1794c:	8f 35       	cpi	r24, 0x5F	; 95
   1794e:	09 f4       	brne	.+2      	; 0x17952 <Amigo_Execute+0x4c>
   17950:	ad c0       	rjmp	.+346    	; 0x17aac <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17952:	90 e0       	ldi	r25, 0x00	; 0
   17954:	0e 94 9b 8c 	call	0x11936	; 0x11936 <AMIGO_is_MTA>
   17958:	89 2b       	or	r24, r25
   1795a:	39 f0       	breq	.+14     	; 0x1796a <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   1795c:	ce 01       	movw	r24, r28
   1795e:	87 7f       	andi	r24, 0xF7	; 247
   17960:	80 36       	cpi	r24, 0x60	; 96
   17962:	91 05       	cpc	r25, r1
   17964:	09 f0       	breq	.+2      	; 0x17968 <Amigo_Execute+0x62>
   17966:	a2 c0       	rjmp	.+324    	; 0x17aac <Amigo_Execute+0x1a6>
   17968:	08 c0       	rjmp	.+16     	; 0x1797a <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   1796a:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1796e:	90 e0       	ldi	r25, 0x00	; 0
   17970:	0e 94 89 8c 	call	0x11912	; 0x11912 <AMIGO_is_MLA>
   17974:	89 2b       	or	r24, r25
   17976:	91 f7       	brne	.-28     	; 0x1795c <Amigo_Execute+0x56>
   17978:	99 c0       	rjmp	.+306    	; 0x17aac <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1797a:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   1797e:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   17982:	81 81       	ldd	r24, Z+1	; 0x01
   17984:	90 e0       	ldi	r25, 0x00	; 0
   17986:	0e 94 59 86 	call	0x10cb2	; 0x10cb2 <gpib_disable_PPR>

    if(secondary == 0x60)
   1798a:	c0 36       	cpi	r28, 0x60	; 96
   1798c:	d1 05       	cpc	r29, r1
   1798e:	09 f0       	breq	.+2      	; 0x17992 <Amigo_Execute+0x8c>
   17990:	4e c0       	rjmp	.+156    	; 0x17a2e <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   17992:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17996:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1799a:	e0 81       	ld	r30, Z
   1799c:	8e 2f       	mov	r24, r30
   1799e:	90 e0       	ldi	r25, 0x00	; 0
   179a0:	8b 30       	cpi	r24, 0x0B	; 11
   179a2:	91 05       	cpc	r25, r1
   179a4:	08 f0       	brcs	.+2      	; 0x179a8 <Amigo_Execute+0xa2>
   179a6:	41 c0       	rjmp	.+130    	; 0x17a2a <Amigo_Execute+0x124>
   179a8:	fc 01       	movw	r30, r24
   179aa:	ea 52       	subi	r30, 0x2A	; 42
   179ac:	ff 4f       	sbci	r31, 0xFF	; 255
   179ae:	0c 94 84 e6 	jmp	0x1cd08	; 0x1cd08 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179b6:	85 ff       	sbrs	r24, 5
   179b8:	18 c0       	rjmp	.+48     	; 0x179ea <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   179ba:	89 e2       	ldi	r24, 0x29	; 41
   179bc:	9a e2       	ldi	r25, 0x2A	; 42
   179be:	0d c0       	rjmp	.+26     	; 0x179da <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179c4:	85 ff       	sbrs	r24, 5
   179c6:	11 c0       	rjmp	.+34     	; 0x179ea <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   179c8:	88 e0       	ldi	r24, 0x08	; 8
   179ca:	9a e2       	ldi	r25, 0x2A	; 42
   179cc:	06 c0       	rjmp	.+12     	; 0x179da <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179d2:	85 ff       	sbrs	r24, 5
   179d4:	0a c0       	rjmp	.+20     	; 0x179ea <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   179d6:	89 ee       	ldi	r24, 0xE9	; 233
   179d8:	99 e2       	ldi	r25, 0x29	; 41
   179da:	a0 e0       	ldi	r26, 0x00	; 0
   179dc:	ed b7       	in	r30, 0x3d	; 61
   179de:	fe b7       	in	r31, 0x3e	; 62
   179e0:	81 83       	std	Z+1, r24	; 0x01
   179e2:	92 83       	std	Z+2, r25	; 0x02
   179e4:	a3 83       	std	Z+3, r26	; 0x03
   179e6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   179ea:	b0 d9       	rcall	.-3232   	; 0x16d4c <amigo_buffered_read_execute>
   179ec:	61 c0       	rjmp	.+194    	; 0x17ab0 <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179f2:	85 ff       	sbrs	r24, 5
   179f4:	18 c0       	rjmp	.+48     	; 0x17a26 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   179f6:	87 ec       	ldi	r24, 0xC7	; 199
   179f8:	99 e2       	ldi	r25, 0x29	; 41
   179fa:	0d c0       	rjmp	.+26     	; 0x17a16 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a00:	85 ff       	sbrs	r24, 5
   17a02:	11 c0       	rjmp	.+34     	; 0x17a26 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   17a04:	8b ea       	ldi	r24, 0xAB	; 171
   17a06:	99 e2       	ldi	r25, 0x29	; 41
   17a08:	06 c0       	rjmp	.+12     	; 0x17a16 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a0a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a0e:	85 ff       	sbrs	r24, 5
   17a10:	0a c0       	rjmp	.+20     	; 0x17a26 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   17a12:	8b e8       	ldi	r24, 0x8B	; 139
   17a14:	99 e2       	ldi	r25, 0x29	; 41
   17a16:	a0 e0       	ldi	r26, 0x00	; 0
   17a18:	ed b7       	in	r30, 0x3d	; 61
   17a1a:	fe b7       	in	r31, 0x3e	; 62
   17a1c:	81 83       	std	Z+1, r24	; 0x01
   17a1e:	92 83       	std	Z+2, r25	; 0x02
   17a20:	a3 83       	std	Z+3, r26	; 0x03
   17a22:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
                return ( amigo_buffered_write() );
   17a26:	ed d9       	rcall	.-3110   	; 0x16e02 <amigo_buffered_write>
   17a28:	43 c0       	rjmp	.+134    	; 0x17ab0 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17a2a:	80 e6       	ldi	r24, 0x60	; 96
   17a2c:	3d c0       	rjmp	.+122    	; 0x17aa8 <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17a2e:	c8 36       	cpi	r28, 0x68	; 104
   17a30:	d1 05       	cpc	r29, r1
   17a32:	e1 f5       	brne	.+120    	; 0x17aac <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   17a34:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17a38:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17a3c:	80 81       	ld	r24, Z
   17a3e:	82 30       	cpi	r24, 0x02	; 2
   17a40:	81 f0       	breq	.+32     	; 0x17a62 <Amigo_Execute+0x15c>
   17a42:	18 f4       	brcc	.+6      	; 0x17a4a <Amigo_Execute+0x144>
   17a44:	88 23       	and	r24, r24
   17a46:	91 f1       	breq	.+100    	; 0x17aac <Amigo_Execute+0x1a6>
   17a48:	2e c0       	rjmp	.+92     	; 0x17aa6 <Amigo_Execute+0x1a0>
   17a4a:	83 30       	cpi	r24, 0x03	; 3
   17a4c:	19 f0       	breq	.+6      	; 0x17a54 <Amigo_Execute+0x14e>
   17a4e:	84 30       	cpi	r24, 0x04	; 4
   17a50:	c9 f0       	breq	.+50     	; 0x17a84 <Amigo_Execute+0x17e>
   17a52:	29 c0       	rjmp	.+82     	; 0x17aa6 <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a54:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a58:	85 ff       	sbrs	r24, 5
   17a5a:	11 c0       	rjmp	.+34     	; 0x17a7e <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17a5c:	82 e6       	ldi	r24, 0x62	; 98
   17a5e:	99 e2       	ldi	r25, 0x29	; 41
   17a60:	06 c0       	rjmp	.+12     	; 0x17a6e <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a66:	85 ff       	sbrs	r24, 5
   17a68:	0a c0       	rjmp	.+20     	; 0x17a7e <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17a6a:	87 e3       	ldi	r24, 0x37	; 55
   17a6c:	99 e2       	ldi	r25, 0x29	; 41
   17a6e:	a0 e0       	ldi	r26, 0x00	; 0
   17a70:	ed b7       	in	r30, 0x3d	; 61
   17a72:	fe b7       	in	r31, 0x3e	; 62
   17a74:	81 83       	std	Z+1, r24	; 0x01
   17a76:	92 83       	std	Z+2, r25	; 0x02
   17a78:	a3 83       	std	Z+3, r26	; 0x03
   17a7a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
                return ( amigo_send_status() );
   17a7e:	0e 94 36 b4 	call	0x1686c	; 0x1686c <amigo_send_status>
   17a82:	16 c0       	rjmp	.+44     	; 0x17ab0 <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a84:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a88:	85 ff       	sbrs	r24, 5
   17a8a:	0a c0       	rjmp	.+20     	; 0x17aa0 <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   17a8c:	8e e0       	ldi	r24, 0x0E	; 14
   17a8e:	99 e2       	ldi	r25, 0x29	; 41
   17a90:	a0 e0       	ldi	r26, 0x00	; 0
   17a92:	ed b7       	in	r30, 0x3d	; 61
   17a94:	fe b7       	in	r31, 0x3e	; 62
   17a96:	81 83       	std	Z+1, r24	; 0x01
   17a98:	92 83       	std	Z+2, r25	; 0x02
   17a9a:	a3 83       	std	Z+3, r26	; 0x03
   17a9c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   17aa0:	0e 94 e1 b3 	call	0x167c2	; 0x167c2 <amigo_send_logical_address>
   17aa4:	05 c0       	rjmp	.+10     	; 0x17ab0 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17aa6:	88 e6       	ldi	r24, 0x68	; 104
   17aa8:	b0 db       	rcall	.-2208   	; 0x1720a <amigo_todo>
   17aaa:	02 c0       	rjmp	.+4      	; 0x17ab0 <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17aac:	80 e0       	ldi	r24, 0x00	; 0
   17aae:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17ab0:	cd b7       	in	r28, 0x3d	; 61
   17ab2:	de b7       	in	r29, 0x3e	; 62
   17ab4:	29 96       	adiw	r28, 0x09	; 9
   17ab6:	e2 e0       	ldi	r30, 0x02	; 2
   17ab8:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00017abc <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17abc:	cf 93       	push	r28
   17abe:	df 93       	push	r29
   17ac0:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17ac2:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17ac6:	90 e0       	ldi	r25, 0x00	; 0
   17ac8:	0e 94 9b 8c 	call	0x11936	; 0x11936 <AMIGO_is_MTA>
   17acc:	89 2b       	or	r24, r25
   17ace:	51 f0       	breq	.+20     	; 0x17ae4 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17ad0:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17ad4:	8f 35       	cpi	r24, 0x5F	; 95
   17ad6:	71 f4       	brne	.+28     	; 0x17af4 <AMIGO_COMMANDS+0x38>
   17ad8:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17adc:	90 e0       	ldi	r25, 0x00	; 0
   17ade:	0e 94 89 8c 	call	0x11912	; 0x11912 <AMIGO_is_MLA>
   17ae2:	08 c0       	rjmp	.+16     	; 0x17af4 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17ae4:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17ae8:	90 e0       	ldi	r25, 0x00	; 0
   17aea:	0e 94 89 8c 	call	0x11912	; 0x11912 <AMIGO_is_MLA>
   17aee:	89 2b       	or	r24, r25
   17af0:	79 f7       	brne	.-34     	; 0x17ad0 <AMIGO_COMMANDS+0x14>
   17af2:	76 c0       	rjmp	.+236    	; 0x17be0 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17af4:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17af8:	81 11       	cpse	r24, r1
   17afa:	05 c0       	rjmp	.+10     	; 0x17b06 <AMIGO_COMMANDS+0x4a>
   17afc:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17b00:	90 e0       	ldi	r25, 0x00	; 0
   17b02:	0e 94 9b 8c 	call	0x11936	; 0x11936 <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17b06:	c0 36       	cpi	r28, 0x60	; 96
   17b08:	99 f4       	brne	.+38     	; 0x17b30 <AMIGO_COMMANDS+0x74>
   17b0a:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17b0e:	90 e0       	ldi	r25, 0x00	; 0
   17b10:	0e 94 9b 8c 	call	0x11936	; 0x11936 <AMIGO_is_MTA>
   17b14:	89 2b       	or	r24, r25
   17b16:	19 f0       	breq	.+6      	; 0x17b1e <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17b18:	80 e6       	ldi	r24, 0x60	; 96
   17b1a:	90 e0       	ldi	r25, 0x00	; 0
   17b1c:	14 c0       	rjmp	.+40     	; 0x17b46 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17b1e:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17b22:	90 e0       	ldi	r25, 0x00	; 0
   17b24:	0e 94 89 8c 	call	0x11912	; 0x11912 <AMIGO_is_MLA>
   17b28:	89 2b       	or	r24, r25
   17b2a:	09 f4       	brne	.+2      	; 0x17b2e <AMIGO_COMMANDS+0x72>
   17b2c:	59 c0       	rjmp	.+178    	; 0x17be0 <AMIGO_COMMANDS+0x124>
   17b2e:	f4 cf       	rjmp	.-24     	; 0x17b18 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17b30:	c8 36       	cpi	r28, 0x68	; 104
   17b32:	c1 f4       	brne	.+48     	; 0x17b64 <AMIGO_COMMANDS+0xa8>
   17b34:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17b38:	90 e0       	ldi	r25, 0x00	; 0
   17b3a:	0e 94 9b 8c 	call	0x11936	; 0x11936 <AMIGO_is_MTA>
   17b3e:	89 2b       	or	r24, r25
   17b40:	21 f0       	breq	.+8      	; 0x17b4a <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17b42:	88 e6       	ldi	r24, 0x68	; 104
   17b44:	90 e0       	ldi	r25, 0x00	; 0
   17b46:	df de       	rcall	.-578    	; 0x17906 <Amigo_Execute>
   17b48:	0b c0       	rjmp	.+22     	; 0x17b60 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   17b4a:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17b4e:	90 e0       	ldi	r25, 0x00	; 0
   17b50:	0e 94 89 8c 	call	0x11912	; 0x11912 <AMIGO_is_MLA>
   17b54:	89 2b       	or	r24, r25
   17b56:	09 f4       	brne	.+2      	; 0x17b5a <AMIGO_COMMANDS+0x9e>
   17b58:	43 c0       	rjmp	.+134    	; 0x17be0 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17b5a:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17b5c:	90 e0       	ldi	r25, 0x00	; 0
   17b5e:	ed db       	rcall	.-2086   	; 0x1733a <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17b60:	ec 01       	movw	r28, r24
   17b62:	40 c0       	rjmp	.+128    	; 0x17be4 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   17b64:	c9 36       	cpi	r28, 0x69	; 105
   17b66:	51 f4       	brne	.+20     	; 0x17b7c <AMIGO_COMMANDS+0xc0>
   17b68:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17b6c:	90 e0       	ldi	r25, 0x00	; 0
   17b6e:	0e 94 89 8c 	call	0x11912	; 0x11912 <AMIGO_is_MLA>
   17b72:	89 2b       	or	r24, r25
   17b74:	a9 f1       	breq	.+106    	; 0x17be0 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17b76:	89 e6       	ldi	r24, 0x69	; 105
   17b78:	90 e0       	ldi	r25, 0x00	; 0
   17b7a:	f1 cf       	rjmp	.-30     	; 0x17b5e <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17b7c:	ca 36       	cpi	r28, 0x6A	; 106
   17b7e:	51 f4       	brne	.+20     	; 0x17b94 <AMIGO_COMMANDS+0xd8>
   17b80:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17b84:	90 e0       	ldi	r25, 0x00	; 0
   17b86:	0e 94 89 8c 	call	0x11912	; 0x11912 <AMIGO_is_MLA>
   17b8a:	89 2b       	or	r24, r25
   17b8c:	49 f1       	breq	.+82     	; 0x17be0 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17b8e:	8a e6       	ldi	r24, 0x6A	; 106
   17b90:	90 e0       	ldi	r25, 0x00	; 0
   17b92:	e5 cf       	rjmp	.-54     	; 0x17b5e <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   17b94:	cc 36       	cpi	r28, 0x6C	; 108
   17b96:	51 f4       	brne	.+20     	; 0x17bac <AMIGO_COMMANDS+0xf0>
   17b98:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17b9c:	90 e0       	ldi	r25, 0x00	; 0
   17b9e:	0e 94 89 8c 	call	0x11912	; 0x11912 <AMIGO_is_MLA>
   17ba2:	89 2b       	or	r24, r25
   17ba4:	e9 f0       	breq	.+58     	; 0x17be0 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17ba6:	8c e6       	ldi	r24, 0x6C	; 108
   17ba8:	90 e0       	ldi	r25, 0x00	; 0
   17baa:	d9 cf       	rjmp	.-78     	; 0x17b5e <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17bac:	c0 37       	cpi	r28, 0x70	; 112
   17bae:	c1 f4       	brne	.+48     	; 0x17be0 <AMIGO_COMMANDS+0x124>
   17bb0:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17bb4:	90 e0       	ldi	r25, 0x00	; 0
   17bb6:	0e 94 9b 8c 	call	0x11936	; 0x11936 <AMIGO_is_MTA>
   17bba:	ec 01       	movw	r28, r24
   17bbc:	89 2b       	or	r24, r25
   17bbe:	51 f0       	breq	.+20     	; 0x17bd4 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17bc0:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   17bc4:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   17bc8:	81 81       	ldd	r24, Z+1	; 0x01
   17bca:	90 e0       	ldi	r25, 0x00	; 0
   17bcc:	0e 94 59 86 	call	0x10cb2	; 0x10cb2 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17bd0:	ff d9       	rcall	.-3074   	; 0x16fd0 <amigo_cmd_dsj>
   17bd2:	c6 cf       	rjmp	.-116    	; 0x17b60 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17bd4:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17bd8:	90 e0       	ldi	r25, 0x00	; 0
   17bda:	0e 94 89 8c 	call	0x11912	; 0x11912 <AMIGO_is_MLA>
   17bde:	02 c0       	rjmp	.+4      	; 0x17be4 <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   17be0:	c0 e0       	ldi	r28, 0x00	; 0
   17be2:	d0 e0       	ldi	r29, 0x00	; 0
}
   17be4:	ce 01       	movw	r24, r28
   17be6:	df 91       	pop	r29
   17be8:	cf 91       	pop	r28
   17bea:	08 95       	ret

00017bec <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17bec:	e5 ea       	ldi	r30, 0xA5	; 165
   17bee:	f9 e1       	ldi	r31, 0x19	; 25
   17bf0:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17bf2:	10 82       	st	Z, r1
   17bf4:	11 82       	std	Z+1, r1	; 0x01
   17bf6:	12 82       	std	Z+2, r1	; 0x02
   17bf8:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17bfa:	15 82       	std	Z+5, r1	; 0x05
   17bfc:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17bfe:	12 86       	std	Z+10, r1	; 0x0a
   17c00:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17c02:	14 86       	std	Z+12, r1	; 0x0c
   17c04:	13 86       	std	Z+11, r1	; 0x0b
   17c06:	08 95       	ret

00017c08 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17c08:	cf 93       	push	r28
   17c0a:	df 93       	push	r29
   17c0c:	ad b7       	in	r26, 0x3d	; 61
   17c0e:	be b7       	in	r27, 0x3e	; 62
   17c10:	17 97       	sbiw	r26, 0x07	; 7
   17c12:	0f b6       	in	r0, 0x3f	; 63
   17c14:	f8 94       	cli
   17c16:	be bf       	out	0x3e, r27	; 62
   17c18:	0f be       	out	0x3f, r0	; 63
   17c1a:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17c1c:	20 91 ae 19 	lds	r18, 0x19AE	; 0x8019ae <plot+0x9>
   17c20:	30 91 af 19 	lds	r19, 0x19AF	; 0x8019af <plot+0xa>
   17c24:	21 15       	cp	r18, r1
   17c26:	31 05       	cpc	r19, r1
   17c28:	09 f4       	brne	.+2      	; 0x17c2c <receive_plot_flush+0x24>
   17c2a:	45 c0       	rjmp	.+138    	; 0x17cb6 <receive_plot_flush+0xae>
   17c2c:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot+0x4>
   17c30:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0x5>
   17c34:	00 97       	sbiw	r24, 0x00	; 0
   17c36:	09 f4       	brne	.+2      	; 0x17c3a <receive_plot_flush+0x32>
   17c38:	40 c0       	rjmp	.+128    	; 0x17cba <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17c3a:	ac 01       	movw	r20, r24
   17c3c:	61 e0       	ldi	r22, 0x01	; 1
   17c3e:	70 e0       	ldi	r23, 0x00	; 0
   17c40:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <plot+0xb>
   17c44:	90 91 b1 19 	lds	r25, 0x19B1	; 0x8019b1 <plot+0xc>
   17c48:	0e 94 49 7c 	call	0xf892	; 0xf892 <fwrite>
   17c4c:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17c4e:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot+0x4>
   17c52:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0x5>
   17c56:	c8 17       	cp	r28, r24
   17c58:	d9 07       	cpc	r29, r25
   17c5a:	09 f1       	breq	.+66     	; 0x17c9e <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17c5c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17c60:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17c64:	81 72       	andi	r24, 0x21	; 33
   17c66:	99 27       	eor	r25, r25
   17c68:	89 2b       	or	r24, r25
   17c6a:	b1 f0       	breq	.+44     	; 0x17c98 <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17c6c:	8c ed       	ldi	r24, 0xDC	; 220
   17c6e:	95 e1       	ldi	r25, 0x15	; 21
   17c70:	0e 94 52 78 	call	0xf0a4	; 0xf0a4 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17c74:	ed b7       	in	r30, 0x3d	; 61
   17c76:	fe b7       	in	r31, 0x3e	; 62
   17c78:	d7 83       	std	Z+7, r29	; 0x07
   17c7a:	c6 83       	std	Z+6, r28	; 0x06
   17c7c:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot+0x4>
   17c80:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0x5>
   17c84:	95 83       	std	Z+5, r25	; 0x05
   17c86:	84 83       	std	Z+4, r24	; 0x04
   17c88:	8e e9       	ldi	r24, 0x9E	; 158
   17c8a:	91 e3       	ldi	r25, 0x31	; 49
   17c8c:	a0 e0       	ldi	r26, 0x00	; 0
   17c8e:	81 83       	std	Z+1, r24	; 0x01
   17c90:	92 83       	std	Z+2, r25	; 0x02
   17c92:	a3 83       	std	Z+3, r26	; 0x03
   17c94:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        }
        return(-1);
   17c98:	8f ef       	ldi	r24, 0xFF	; 255
   17c9a:	9f ef       	ldi	r25, 0xFF	; 255
   17c9c:	0e c0       	rjmp	.+28     	; 0x17cba <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17c9e:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <plot+0x9>
   17ca2:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <plot+0xa>
   17ca6:	0e 94 9c 76 	call	0xed38	; 0xed38 <fileno>
    if(fno < 0)
   17caa:	97 fd       	sbrc	r25, 7
   17cac:	f5 cf       	rjmp	.-22     	; 0x17c98 <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   17cae:	0e 94 93 7b 	call	0xf726	; 0xf726 <syncfs>
    return (ret);
   17cb2:	ce 01       	movw	r24, r28
   17cb4:	02 c0       	rjmp	.+4      	; 0x17cba <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17cb6:	80 e0       	ldi	r24, 0x00	; 0
   17cb8:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   17cba:	cd b7       	in	r28, 0x3d	; 61
   17cbc:	de b7       	in	r29, 0x3e	; 62
   17cbe:	27 96       	adiw	r28, 0x07	; 7
   17cc0:	e2 e0       	ldi	r30, 0x02	; 2
   17cc2:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00017cc6 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17cc6:	ad b7       	in	r26, 0x3d	; 61
   17cc8:	be b7       	in	r27, 0x3e	; 62
   17cca:	17 97       	sbiw	r26, 0x07	; 7
   17ccc:	0f b6       	in	r0, 0x3f	; 63
   17cce:	f8 94       	cli
   17cd0:	be bf       	out	0x3e, r27	; 62
   17cd2:	0f be       	out	0x3f, r0	; 63
   17cd4:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   17cd6:	98 df       	rcall	.-208    	; 0x17c08 <receive_plot_flush>
   17cd8:	97 ff       	sbrs	r25, 7
   17cda:	03 c0       	rjmp	.+6      	; 0x17ce2 <printer_close+0x1c>
        plot.error = 1;
   17cdc:	81 e0       	ldi	r24, 0x01	; 1
   17cde:	80 93 ad 19 	sts	0x19AD, r24	; 0x8019ad <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17ce2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ce6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17cea:	81 72       	andi	r24, 0x21	; 33
   17cec:	99 27       	eor	r25, r25
   17cee:	89 2b       	or	r24, r25
   17cf0:	71 f0       	breq	.+28     	; 0x17d0e <printer_close+0x48>
    {
        if(plot.error)
   17cf2:	80 91 ad 19 	lds	r24, 0x19AD	; 0x8019ad <plot+0x8>
   17cf6:	88 23       	and	r24, r24
   17cf8:	51 f0       	breq	.+20     	; 0x17d0e <printer_close+0x48>
            printf("ERROR durring write\n");
   17cfa:	8d ec       	ldi	r24, 0xCD	; 205
   17cfc:	91 e3       	ldi	r25, 0x31	; 49
   17cfe:	a0 e0       	ldi	r26, 0x00	; 0
   17d00:	ed b7       	in	r30, 0x3d	; 61
   17d02:	fe b7       	in	r31, 0x3e	; 62
   17d04:	81 83       	std	Z+1, r24	; 0x01
   17d06:	92 83       	std	Z+2, r25	; 0x02
   17d08:	a3 83       	std	Z+3, r26	; 0x03
   17d0a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    }

    if(plot.fp)
   17d0e:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <plot+0x9>
   17d12:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <plot+0xa>
   17d16:	00 97       	sbiw	r24, 0x00	; 0
   17d18:	e1 f0       	breq	.+56     	; 0x17d52 <printer_close+0x8c>
    {
        fclose(plot.fp);
   17d1a:	0e 94 cb 7c 	call	0xf996	; 0xf996 <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17d1e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17d22:	85 ff       	sbrs	r24, 5
   17d24:	16 c0       	rjmp	.+44     	; 0x17d52 <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   17d26:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot>
   17d2a:	90 91 a6 19 	lds	r25, 0x19A6	; 0x8019a6 <plot+0x1>
   17d2e:	a0 91 a7 19 	lds	r26, 0x19A7	; 0x8019a7 <plot+0x2>
   17d32:	b0 91 a8 19 	lds	r27, 0x19A8	; 0x8019a8 <plot+0x3>
   17d36:	ed b7       	in	r30, 0x3d	; 61
   17d38:	fe b7       	in	r31, 0x3e	; 62
   17d3a:	84 83       	std	Z+4, r24	; 0x04
   17d3c:	95 83       	std	Z+5, r25	; 0x05
   17d3e:	a6 83       	std	Z+6, r26	; 0x06
   17d40:	b7 83       	std	Z+7, r27	; 0x07
   17d42:	8f eb       	ldi	r24, 0xBF	; 191
   17d44:	91 e3       	ldi	r25, 0x31	; 49
   17d46:	a0 e0       	ldi	r26, 0x00	; 0
   17d48:	81 83       	std	Z+1, r24	; 0x01
   17d4a:	92 83       	std	Z+2, r25	; 0x02
   17d4c:	a3 83       	std	Z+3, r26	; 0x03
   17d4e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    }

    if(plot.buf)
   17d52:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <plot+0xb>
   17d56:	90 91 b1 19 	lds	r25, 0x19B1	; 0x8019b1 <plot+0xc>
   17d5a:	00 97       	sbiw	r24, 0x00	; 0
   17d5c:	11 f0       	breq	.+4      	; 0x17d62 <printer_close+0x9c>
        safefree(plot.buf);
   17d5e:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safefree>
    printer_init();
   17d62:	44 df       	rcall	.-376    	; 0x17bec <printer_init>
}
   17d64:	ad b7       	in	r26, 0x3d	; 61
   17d66:	be b7       	in	r27, 0x3e	; 62
   17d68:	17 96       	adiw	r26, 0x07	; 7
   17d6a:	0f b6       	in	r0, 0x3f	; 63
   17d6c:	f8 94       	cli
   17d6e:	be bf       	out	0x3e, r27	; 62
   17d70:	0f be       	out	0x3f, r0	; 63
   17d72:	ad bf       	out	0x3d, r26	; 61
   17d74:	08 95       	ret

00017d76 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17d76:	ad e5       	ldi	r26, 0x5D	; 93
   17d78:	b0 e0       	ldi	r27, 0x00	; 0
   17d7a:	e1 ec       	ldi	r30, 0xC1	; 193
   17d7c:	fe eb       	ldi	r31, 0xBE	; 190
   17d7e:	0c 94 bf e6 	jmp	0x1cd7e	; 0x1cd7e <__prologue_saves__+0x18>
   17d82:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17d84:	89 2b       	or	r24, r25
   17d86:	09 f0       	breq	.+2      	; 0x17d8a <printer_open+0x14>
   17d88:	4f c0       	rjmp	.+158    	; 0x17e28 <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17d8a:	be 01       	movw	r22, r28
   17d8c:	6e 5a       	subi	r22, 0xAE	; 174
   17d8e:	7f 4f       	sbci	r23, 0xFF	; 255
   17d90:	80 e0       	ldi	r24, 0x00	; 0
   17d92:	90 e0       	ldi	r25, 0x00	; 0
   17d94:	0e 94 9e 33 	call	0x673c	; 0x673c <clock_gettime>
        seconds = ts.tv_sec;
   17d98:	66 96       	adiw	r28, 0x16	; 22
   17d9a:	8c ad       	ldd	r24, Y+60	; 0x3c
   17d9c:	9d ad       	ldd	r25, Y+61	; 0x3d
   17d9e:	ae ad       	ldd	r26, Y+62	; 0x3e
   17da0:	bf ad       	ldd	r27, Y+63	; 0x3f
   17da2:	66 97       	sbiw	r28, 0x16	; 22
   17da4:	6e 96       	adiw	r28, 0x1e	; 30
   17da6:	8c af       	std	Y+60, r24	; 0x3c
   17da8:	9d af       	std	Y+61, r25	; 0x3d
   17daa:	ae af       	std	Y+62, r26	; 0x3e
   17dac:	bf af       	std	Y+63, r27	; 0x3f
   17dae:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17db0:	ce 01       	movw	r24, r28
   17db2:	86 5a       	subi	r24, 0xA6	; 166
   17db4:	9f 4f       	sbci	r25, 0xFF	; 255
   17db6:	0e 94 88 37 	call	0x6f10	; 0x6f10 <gmtime>
   17dba:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17dbc:	fc 01       	movw	r30, r24
   17dbe:	e6 80       	ldd	r14, Z+6	; 0x06
   17dc0:	f7 80       	ldd	r15, Z+7	; 0x07
   17dc2:	80 85       	ldd	r24, Z+8	; 0x08
   17dc4:	91 85       	ldd	r25, Z+9	; 0x09
   17dc6:	0e 94 64 36 	call	0x6cc8	; 0x6cc8 <tm_mon_to_ascii>
   17dca:	f8 01       	movw	r30, r16
   17dcc:	20 81       	ld	r18, Z
   17dce:	31 81       	ldd	r19, Z+1	; 0x01
   17dd0:	ed b7       	in	r30, 0x3d	; 61
   17dd2:	fe b7       	in	r31, 0x3e	; 62
   17dd4:	31 8b       	std	Z+17, r19	; 0x11
   17dd6:	20 8b       	std	Z+16, r18	; 0x10
   17dd8:	f8 01       	movw	r30, r16
   17dda:	22 81       	ldd	r18, Z+2	; 0x02
   17ddc:	33 81       	ldd	r19, Z+3	; 0x03
   17dde:	ed b7       	in	r30, 0x3d	; 61
   17de0:	fe b7       	in	r31, 0x3e	; 62
   17de2:	37 87       	std	Z+15, r19	; 0x0f
   17de4:	26 87       	std	Z+14, r18	; 0x0e
   17de6:	f8 01       	movw	r30, r16
   17de8:	24 81       	ldd	r18, Z+4	; 0x04
   17dea:	35 81       	ldd	r19, Z+5	; 0x05
   17dec:	ed b7       	in	r30, 0x3d	; 61
   17dee:	fe b7       	in	r31, 0x3e	; 62
   17df0:	35 87       	std	Z+13, r19	; 0x0d
   17df2:	24 87       	std	Z+12, r18	; 0x0c
   17df4:	f8 01       	movw	r30, r16
   17df6:	22 85       	ldd	r18, Z+10	; 0x0a
   17df8:	33 85       	ldd	r19, Z+11	; 0x0b
   17dfa:	24 59       	subi	r18, 0x94	; 148
   17dfc:	38 4f       	sbci	r19, 0xF8	; 248
   17dfe:	ed b7       	in	r30, 0x3d	; 61
   17e00:	fe b7       	in	r31, 0x3e	; 62
   17e02:	33 87       	std	Z+11, r19	; 0x0b
   17e04:	22 87       	std	Z+10, r18	; 0x0a
   17e06:	91 87       	std	Z+9, r25	; 0x09
   17e08:	80 87       	std	Z+8, r24	; 0x08
   17e0a:	f7 82       	std	Z+7, r15	; 0x07
   17e0c:	e6 82       	std	Z+6, r14	; 0x06
   17e0e:	84 e0       	ldi	r24, 0x04	; 4
   17e10:	92 e3       	ldi	r25, 0x32	; 50
   17e12:	a0 e0       	ldi	r26, 0x00	; 0
   17e14:	83 83       	std	Z+3, r24	; 0x03
   17e16:	94 83       	std	Z+4, r25	; 0x04
   17e18:	a5 83       	std	Z+5, r26	; 0x05
   17e1a:	8e 01       	movw	r16, r28
   17e1c:	0e 5e       	subi	r16, 0xEE	; 238
   17e1e:	1f 4f       	sbci	r17, 0xFF	; 255
   17e20:	12 83       	std	Z+2, r17	; 0x02
   17e22:	01 83       	std	Z+1, r16	; 0x01
   17e24:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17e28:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17e2c:	85 ff       	sbrs	r24, 5
   17e2e:	0c c0       	rjmp	.+24     	; 0x17e48 <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17e30:	ed b7       	in	r30, 0x3d	; 61
   17e32:	fe b7       	in	r31, 0x3e	; 62
   17e34:	15 83       	std	Z+5, r17	; 0x05
   17e36:	04 83       	std	Z+4, r16	; 0x04
   17e38:	8e ee       	ldi	r24, 0xEE	; 238
   17e3a:	91 e3       	ldi	r25, 0x31	; 49
   17e3c:	a0 e0       	ldi	r26, 0x00	; 0
   17e3e:	81 83       	std	Z+1, r24	; 0x01
   17e40:	92 83       	std	Z+2, r25	; 0x02
   17e42:	a3 83       	std	Z+3, r26	; 0x03
   17e44:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    plot.fp = fopen(ptr,"wb");
   17e48:	6c e0       	ldi	r22, 0x0C	; 12
   17e4a:	79 e0       	ldi	r23, 0x09	; 9
   17e4c:	c8 01       	movw	r24, r16
   17e4e:	0e 94 21 7e 	call	0xfc42	; 0xfc42 <fopen>
   17e52:	90 93 af 19 	sts	0x19AF, r25	; 0x8019af <plot+0xa>
   17e56:	80 93 ae 19 	sts	0x19AE, r24	; 0x8019ae <plot+0x9>
    if(plot.fp == NULL)
   17e5a:	89 2b       	or	r24, r25
   17e5c:	b9 f4       	brne	.+46     	; 0x17e8c <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17e5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17e62:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17e66:	81 72       	andi	r24, 0x21	; 33
   17e68:	99 27       	eor	r25, r25
   17e6a:	89 2b       	or	r24, r25
   17e6c:	11 f1       	breq	.+68     	; 0x17eb2 <printer_open+0x13c>
        {
            perror("open failed");
   17e6e:	8a e9       	ldi	r24, 0x9A	; 154
   17e70:	9d e0       	ldi	r25, 0x0D	; 13
   17e72:	0e 94 52 78 	call	0xf0a4	; 0xf0a4 <perror>
            printf("exiting...\n");
   17e76:	82 ee       	ldi	r24, 0xE2	; 226
   17e78:	91 e3       	ldi	r25, 0x31	; 49
   17e7a:	a0 e0       	ldi	r26, 0x00	; 0
   17e7c:	ed b7       	in	r30, 0x3d	; 61
   17e7e:	fe b7       	in	r31, 0x3e	; 62
   17e80:	81 83       	std	Z+1, r24	; 0x01
   17e82:	92 83       	std	Z+2, r25	; 0x02
   17e84:	a3 83       	std	Z+3, r26	; 0x03
   17e86:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   17e8a:	13 c0       	rjmp	.+38     	; 0x17eb2 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17e8c:	61 e0       	ldi	r22, 0x01	; 1
   17e8e:	70 e0       	ldi	r23, 0x00	; 0
   17e90:	81 e0       	ldi	r24, 0x01	; 1
   17e92:	92 e0       	ldi	r25, 0x02	; 2
   17e94:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <safecalloc>
   17e98:	90 93 b1 19 	sts	0x19B1, r25	; 0x8019b1 <plot+0xc>
   17e9c:	80 93 b0 19 	sts	0x19B0, r24	; 0x8019b0 <plot+0xb>
    if(plot.buf == NULL)
   17ea0:	89 2b       	or	r24, r25
   17ea2:	09 f4       	brne	.+2      	; 0x17ea6 <printer_open+0x130>
        printer_close();
   17ea4:	10 df       	rcall	.-480    	; 0x17cc6 <printer_close>
    plot.size = 512;
   17ea6:	80 e0       	ldi	r24, 0x00	; 0
   17ea8:	92 e0       	ldi	r25, 0x02	; 2
   17eaa:	90 93 ac 19 	sts	0x19AC, r25	; 0x8019ac <plot+0x7>
   17eae:	80 93 ab 19 	sts	0x19AB, r24	; 0x8019ab <plot+0x6>
}
   17eb2:	c3 5a       	subi	r28, 0xA3	; 163
   17eb4:	df 4f       	sbci	r29, 0xFF	; 255
   17eb6:	e6 e0       	ldi	r30, 0x06	; 6
   17eb8:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

00017ebc <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   17ebc:	cf 93       	push	r28
   17ebe:	df 93       	push	r29
   17ec0:	ad b7       	in	r26, 0x3d	; 61
   17ec2:	be b7       	in	r27, 0x3e	; 62
   17ec4:	17 97       	sbiw	r26, 0x07	; 7
   17ec6:	0f b6       	in	r0, 0x3f	; 63
   17ec8:	f8 94       	cli
   17eca:	be bf       	out	0x3e, r27	; 62
   17ecc:	0f be       	out	0x3f, r0	; 63
   17ece:	ad bf       	out	0x3d, r26	; 61
   17ed0:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17ed2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ed6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17eda:	81 72       	andi	r24, 0x21	; 33
   17edc:	99 27       	eor	r25, r25
   17ede:	89 2b       	or	r24, r25
   17ee0:	c1 f0       	breq	.+48     	; 0x17f12 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   17ee2:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot>
   17ee6:	30 91 a6 19 	lds	r19, 0x19A6	; 0x8019a6 <plot+0x1>
   17eea:	20 91 a7 19 	lds	r18, 0x19A7	; 0x8019a7 <plot+0x2>
   17eee:	90 91 a8 19 	lds	r25, 0x19A8	; 0x8019a8 <plot+0x3>
   17ef2:	81 11       	cpse	r24, r1
   17ef4:	0e c0       	rjmp	.+28     	; 0x17f12 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   17ef6:	ed b7       	in	r30, 0x3d	; 61
   17ef8:	fe b7       	in	r31, 0x3e	; 62
   17efa:	84 83       	std	Z+4, r24	; 0x04
   17efc:	35 83       	std	Z+5, r19	; 0x05
   17efe:	26 83       	std	Z+6, r18	; 0x06
   17f00:	97 83       	std	Z+7, r25	; 0x07
   17f02:	87 e9       	ldi	r24, 0x97	; 151
   17f04:	91 e3       	ldi	r25, 0x31	; 49
   17f06:	a0 e0       	ldi	r26, 0x00	; 0
   17f08:	81 83       	std	Z+1, r24	; 0x01
   17f0a:	92 83       	std	Z+2, r25	; 0x02
   17f0c:	a3 83       	std	Z+3, r26	; 0x03
   17f0e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   17f12:	ce 01       	movw	r24, r28
   17f14:	88 27       	eor	r24, r24
   17f16:	97 7f       	andi	r25, 0xF7	; 247
   17f18:	89 2b       	or	r24, r25
   17f1a:	41 f0       	breq	.+16     	; 0x17f2c <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   17f1c:	75 de       	rcall	.-790    	; 0x17c08 <receive_plot_flush>
   17f1e:	89 2b       	or	r24, r25
   17f20:	09 f4       	brne	.+2      	; 0x17f24 <printer_buffer+0x68>
   17f22:	3f c0       	rjmp	.+126    	; 0x17fa2 <printer_buffer+0xe6>
            plot.error = 1;
   17f24:	81 e0       	ldi	r24, 0x01	; 1
   17f26:	80 93 ad 19 	sts	0x19AD, r24	; 0x8019ad <plot+0x8>
   17f2a:	3b c0       	rjmp	.+118    	; 0x17fa2 <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   17f2c:	20 91 b0 19 	lds	r18, 0x19B0	; 0x8019b0 <plot+0xb>
   17f30:	30 91 b1 19 	lds	r19, 0x19B1	; 0x8019b1 <plot+0xc>
   17f34:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot+0x4>
   17f38:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0x5>
   17f3c:	ac 01       	movw	r20, r24
   17f3e:	4f 5f       	subi	r20, 0xFF	; 255
   17f40:	5f 4f       	sbci	r21, 0xFF	; 255
   17f42:	50 93 aa 19 	sts	0x19AA, r21	; 0x8019aa <plot+0x5>
   17f46:	40 93 a9 19 	sts	0x19A9, r20	; 0x8019a9 <plot+0x4>
   17f4a:	f9 01       	movw	r30, r18
   17f4c:	e8 0f       	add	r30, r24
   17f4e:	f9 1f       	adc	r31, r25
   17f50:	c0 83       	st	Z, r28
        plot.count++;
   17f52:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot>
   17f56:	90 91 a6 19 	lds	r25, 0x19A6	; 0x8019a6 <plot+0x1>
   17f5a:	a0 91 a7 19 	lds	r26, 0x19A7	; 0x8019a7 <plot+0x2>
   17f5e:	b0 91 a8 19 	lds	r27, 0x19A8	; 0x8019a8 <plot+0x3>
   17f62:	01 96       	adiw	r24, 0x01	; 1
   17f64:	a1 1d       	adc	r26, r1
   17f66:	b1 1d       	adc	r27, r1
   17f68:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot>
   17f6c:	90 93 a6 19 	sts	0x19A6, r25	; 0x8019a6 <plot+0x1>
   17f70:	a0 93 a7 19 	sts	0x19A7, r26	; 0x8019a7 <plot+0x2>
   17f74:	b0 93 a8 19 	sts	0x19A8, r27	; 0x8019a8 <plot+0x3>

        if(plot.ind >= plot.size)
   17f78:	20 91 a9 19 	lds	r18, 0x19A9	; 0x8019a9 <plot+0x4>
   17f7c:	30 91 aa 19 	lds	r19, 0x19AA	; 0x8019aa <plot+0x5>
   17f80:	80 91 ab 19 	lds	r24, 0x19AB	; 0x8019ab <plot+0x6>
   17f84:	90 91 ac 19 	lds	r25, 0x19AC	; 0x8019ac <plot+0x7>
   17f88:	28 17       	cp	r18, r24
   17f8a:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   17f8c:	54 f0       	brlt	.+20     	; 0x17fa2 <printer_buffer+0xe6>
   17f8e:	3c de       	rcall	.-904    	; 0x17c08 <receive_plot_flush>
   17f90:	97 ff       	sbrs	r25, 7
   17f92:	03 c0       	rjmp	.+6      	; 0x17f9a <printer_buffer+0xde>
                plot.error = 1;
   17f94:	81 e0       	ldi	r24, 0x01	; 1
   17f96:	80 93 ad 19 	sts	0x19AD, r24	; 0x8019ad <plot+0x8>
            plot.ind  = 0;
   17f9a:	10 92 aa 19 	sts	0x19AA, r1	; 0x8019aa <plot+0x5>
   17f9e:	10 92 a9 19 	sts	0x19A9, r1	; 0x8019a9 <plot+0x4>
        }
    }
}
   17fa2:	cd b7       	in	r28, 0x3d	; 61
   17fa4:	de b7       	in	r29, 0x3e	; 62
   17fa6:	27 96       	adiw	r28, 0x07	; 7
   17fa8:	e2 e0       	ldi	r30, 0x02	; 2
   17faa:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00017fae <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   17fae:	cf 93       	push	r28
   17fb0:	00 d0       	rcall	.+0      	; 0x17fb2 <PRINTER_COMMANDS+0x4>
   17fb2:	00 d0       	rcall	.+0      	; 0x17fb4 <PRINTER_COMMANDS+0x6>
   17fb4:	1f 92       	push	r1
   17fb6:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   17fb8:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17fbc:	90 e0       	ldi	r25, 0x00	; 0
   17fbe:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <PRINTER_is_MLA>
   17fc2:	89 2b       	or	r24, r25
   17fc4:	69 f0       	breq	.+26     	; 0x17fe0 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17fc6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17fca:	85 ff       	sbrs	r24, 5
   17fcc:	22 c0       	rjmp	.+68     	; 0x18012 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   17fce:	8c 2f       	mov	r24, r28
   17fd0:	90 e0       	ldi	r25, 0x00	; 0
   17fd2:	ed b7       	in	r30, 0x3d	; 61
   17fd4:	fe b7       	in	r31, 0x3e	; 62
   17fd6:	95 83       	std	Z+5, r25	; 0x05
   17fd8:	84 83       	std	Z+4, r24	; 0x04
   17fda:	8b e7       	ldi	r24, 0x7B	; 123
   17fdc:	91 e3       	ldi	r25, 0x31	; 49
   17fde:	13 c0       	rjmp	.+38     	; 0x18006 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   17fe0:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17fe4:	90 e0       	ldi	r25, 0x00	; 0
   17fe6:	0e 94 d1 8c 	call	0x119a2	; 0x119a2 <PRINTER_is_MTA>
   17fea:	89 2b       	or	r24, r25
   17fec:	91 f0       	breq	.+36     	; 0x18012 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17fee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ff2:	85 ff       	sbrs	r24, 5
   17ff4:	0e c0       	rjmp	.+28     	; 0x18012 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   17ff6:	8c 2f       	mov	r24, r28
   17ff8:	90 e0       	ldi	r25, 0x00	; 0
   17ffa:	ed b7       	in	r30, 0x3d	; 61
   17ffc:	fe b7       	in	r31, 0x3e	; 62
   17ffe:	95 83       	std	Z+5, r25	; 0x05
   18000:	84 83       	std	Z+4, r24	; 0x04
   18002:	81 e6       	ldi	r24, 0x61	; 97
   18004:	91 e3       	ldi	r25, 0x31	; 49
   18006:	a0 e0       	ldi	r26, 0x00	; 0
   18008:	81 83       	std	Z+1, r24	; 0x01
   1800a:	92 83       	std	Z+2, r25	; 0x02
   1800c:	a3 83       	std	Z+3, r26	; 0x03
   1800e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   18012:	80 e0       	ldi	r24, 0x00	; 0
   18014:	90 e0       	ldi	r25, 0x00	; 0
   18016:	0f 90       	pop	r0
   18018:	0f 90       	pop	r0
   1801a:	0f 90       	pop	r0
   1801c:	0f 90       	pop	r0
   1801e:	0f 90       	pop	r0
   18020:	cf 91       	pop	r28
   18022:	08 95       	ret

00018024 <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   18024:	0f 93       	push	r16
   18026:	1f 93       	push	r17
   18028:	da 01       	movw	r26, r20
   1802a:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   1802c:	b7 fd       	sbrc	r27, 7
   1802e:	0b c0       	rjmp	.+22     	; 0x18046 <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   18030:	fd 01       	movw	r30, r26
   18032:	e6 0f       	add	r30, r22
   18034:	f7 1f       	adc	r31, r23
   18036:	e8 0f       	add	r30, r24
   18038:	f9 1f       	adc	r31, r25
   1803a:	00 83       	st	Z, r16
        val >>= 8;
   1803c:	01 2f       	mov	r16, r17
   1803e:	12 2f       	mov	r17, r18
   18040:	23 2f       	mov	r18, r19
   18042:	33 27       	eor	r19, r19
   18044:	f2 cf       	rjmp	.-28     	; 0x1802a <V2B_MSB+0x6>
    }
}
   18046:	1f 91       	pop	r17
   18048:	0f 91       	pop	r16
   1804a:	08 95       	ret

0001804c <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   1804c:	0f 93       	push	r16
   1804e:	1f 93       	push	r17
   18050:	fc 01       	movw	r30, r24
   18052:	e6 0f       	add	r30, r22
   18054:	f7 1f       	adc	r31, r23
   18056:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   18058:	cf 01       	movw	r24, r30
   1805a:	86 1b       	sub	r24, r22
   1805c:	97 0b       	sbc	r25, r23
   1805e:	84 17       	cp	r24, r20
   18060:	95 07       	cpc	r25, r21
   18062:	34 f4       	brge	.+12     	; 0x18070 <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   18064:	01 93       	st	Z+, r16
        val >>= 8;
   18066:	01 2f       	mov	r16, r17
   18068:	12 2f       	mov	r17, r18
   1806a:	23 2f       	mov	r18, r19
   1806c:	33 27       	eor	r19, r19
   1806e:	f4 cf       	rjmp	.-24     	; 0x18058 <V2B_LSB+0xc>
    }
}
   18070:	1f 91       	pop	r17
   18072:	0f 91       	pop	r16
   18074:	08 95       	ret

00018076 <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   18076:	cf 92       	push	r12
   18078:	df 92       	push	r13
   1807a:	ef 92       	push	r14
   1807c:	ff 92       	push	r15
   1807e:	fc 01       	movw	r30, r24
   18080:	e6 0f       	add	r30, r22
   18082:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   18084:	60 e0       	ldi	r22, 0x00	; 0
   18086:	70 e0       	ldi	r23, 0x00	; 0
   18088:	cb 01       	movw	r24, r22
   1808a:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   1808c:	9f 01       	movw	r18, r30
   1808e:	2a 1b       	sub	r18, r26
   18090:	3b 0b       	sbc	r19, r27
   18092:	24 17       	cp	r18, r20
   18094:	35 07       	cpc	r19, r21
   18096:	4c f4       	brge	.+18     	; 0x180aa <B2V_MSB+0x34>
    {
        val <<= 8;
   18098:	cc 24       	eor	r12, r12
   1809a:	d6 2e       	mov	r13, r22
   1809c:	e7 2e       	mov	r14, r23
   1809e:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   180a0:	21 91       	ld	r18, Z+
   180a2:	c7 01       	movw	r24, r14
   180a4:	b6 01       	movw	r22, r12
   180a6:	62 2b       	or	r22, r18
   180a8:	f1 cf       	rjmp	.-30     	; 0x1808c <B2V_MSB+0x16>
    }
    return(val);
}
   180aa:	ff 90       	pop	r15
   180ac:	ef 90       	pop	r14
   180ae:	df 90       	pop	r13
   180b0:	cf 90       	pop	r12
   180b2:	08 95       	ret

000180b4 <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   180b4:	cf 92       	push	r12
   180b6:	df 92       	push	r13
   180b8:	ef 92       	push	r14
   180ba:	ff 92       	push	r15
   180bc:	9c 01       	movw	r18, r24
   180be:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   180c0:	60 e0       	ldi	r22, 0x00	; 0
   180c2:	70 e0       	ldi	r23, 0x00	; 0
   180c4:	cb 01       	movw	r24, r22
   180c6:	41 50       	subi	r20, 0x01	; 1
   180c8:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   180ca:	57 fd       	sbrc	r21, 7
   180cc:	0e c0       	rjmp	.+28     	; 0x180ea <B2V_LSB+0x36>
    {
        val <<= 8;
   180ce:	cc 24       	eor	r12, r12
   180d0:	d6 2e       	mov	r13, r22
   180d2:	e7 2e       	mov	r14, r23
   180d4:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   180d6:	fa 01       	movw	r30, r20
   180d8:	ea 0f       	add	r30, r26
   180da:	fb 1f       	adc	r31, r27
   180dc:	e2 0f       	add	r30, r18
   180de:	f3 1f       	adc	r31, r19
   180e0:	e0 81       	ld	r30, Z
   180e2:	c7 01       	movw	r24, r14
   180e4:	b6 01       	movw	r22, r12
   180e6:	6e 2b       	or	r22, r30
   180e8:	ee cf       	rjmp	.-36     	; 0x180c6 <B2V_LSB+0x12>
    }
    return(val);
}
   180ea:	ff 90       	pop	r15
   180ec:	ef 90       	pop	r14
   180ee:	df 90       	pop	r13
   180f0:	cf 90       	pop	r12
   180f2:	08 95       	ret

000180f4 <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   180f4:	cf 93       	push	r28
   180f6:	df 93       	push	r29
   180f8:	00 d0       	rcall	.+0      	; 0x180fa <lif_help+0x6>
   180fa:	1f 92       	push	r1
   180fc:	ec 01       	movw	r28, r24
   180fe:	8c e5       	ldi	r24, 0x5C	; 92
   18100:	96 e4       	ldi	r25, 0x46	; 70
   18102:	a0 e0       	ldi	r26, 0x00	; 0
   18104:	ed b7       	in	r30, 0x3d	; 61
   18106:	fe b7       	in	r31, 0x3e	; 62
   18108:	81 83       	std	Z+1, r24	; 0x01
   1810a:	92 83       	std	Z+2, r25	; 0x02
   1810c:	a3 83       	std	Z+3, r26	; 0x03
   1810e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18112:	cd 2b       	or	r28, r29
   18114:	51 f0       	breq	.+20     	; 0x1812a <lif_help+0x36>
   18116:	88 e9       	ldi	r24, 0x98	; 152
   18118:	94 e4       	ldi	r25, 0x44	; 68
   1811a:	a0 e0       	ldi	r26, 0x00	; 0
   1811c:	ed b7       	in	r30, 0x3d	; 61
   1811e:	fe b7       	in	r31, 0x3e	; 62
   18120:	81 83       	std	Z+1, r24	; 0x01
   18122:	92 83       	std	Z+2, r25	; 0x02
   18124:	a3 83       	std	Z+3, r26	; 0x03
   18126:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1812a:	cd b7       	in	r28, 0x3d	; 61
   1812c:	de b7       	in	r29, 0x3e	; 62
   1812e:	23 96       	adiw	r28, 0x03	; 3
   18130:	e2 e0       	ldi	r30, 0x02	; 2
   18132:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00018136 <lif_calloc>:
   18136:	cf 92       	push	r12
   18138:	df 92       	push	r13
   1813a:	ef 92       	push	r14
   1813c:	ff 92       	push	r15
   1813e:	cf 93       	push	r28
   18140:	df 93       	push	r29
   18142:	ad b7       	in	r26, 0x3d	; 61
   18144:	be b7       	in	r27, 0x3e	; 62
   18146:	17 97       	sbiw	r26, 0x07	; 7
   18148:	0f b6       	in	r0, 0x3f	; 63
   1814a:	f8 94       	cli
   1814c:	be bf       	out	0x3e, r27	; 62
   1814e:	0f be       	out	0x3f, r0	; 63
   18150:	ad bf       	out	0x3d, r26	; 61
   18152:	6b 01       	movw	r12, r22
   18154:	7c 01       	movw	r14, r24
   18156:	61 e0       	ldi	r22, 0x01	; 1
   18158:	70 e0       	ldi	r23, 0x00	; 0
   1815a:	c6 01       	movw	r24, r12
   1815c:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <safecalloc>
   18160:	ec 01       	movw	r28, r24
   18162:	89 2b       	or	r24, r25
   18164:	71 f4       	brne	.+28     	; 0x18182 <lif_calloc+0x4c>
   18166:	ed b7       	in	r30, 0x3d	; 61
   18168:	fe b7       	in	r31, 0x3e	; 62
   1816a:	c4 82       	std	Z+4, r12	; 0x04
   1816c:	d5 82       	std	Z+5, r13	; 0x05
   1816e:	e6 82       	std	Z+6, r14	; 0x06
   18170:	f7 82       	std	Z+7, r15	; 0x07
   18172:	81 e3       	ldi	r24, 0x31	; 49
   18174:	94 e4       	ldi	r25, 0x44	; 68
   18176:	a0 e0       	ldi	r26, 0x00	; 0
   18178:	81 83       	std	Z+1, r24	; 0x01
   1817a:	92 83       	std	Z+2, r25	; 0x02
   1817c:	a3 83       	std	Z+3, r26	; 0x03
   1817e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18182:	ce 01       	movw	r24, r28
   18184:	ad b7       	in	r26, 0x3d	; 61
   18186:	be b7       	in	r27, 0x3e	; 62
   18188:	17 96       	adiw	r26, 0x07	; 7
   1818a:	0f b6       	in	r0, 0x3f	; 63
   1818c:	f8 94       	cli
   1818e:	be bf       	out	0x3e, r27	; 62
   18190:	0f be       	out	0x3f, r0	; 63
   18192:	ad bf       	out	0x3d, r26	; 61
   18194:	df 91       	pop	r29
   18196:	cf 91       	pop	r28
   18198:	ff 90       	pop	r15
   1819a:	ef 90       	pop	r14
   1819c:	df 90       	pop	r13
   1819e:	cf 90       	pop	r12
   181a0:	08 95       	ret

000181a2 <lif_free>:
   181a2:	00 d0       	rcall	.+0      	; 0x181a4 <lif_free+0x2>
   181a4:	1f 92       	push	r1
   181a6:	00 97       	sbiw	r24, 0x00	; 0
   181a8:	59 f4       	brne	.+22     	; 0x181c0 <lif_free+0x1e>
   181aa:	89 e1       	ldi	r24, 0x19	; 25
   181ac:	94 e4       	ldi	r25, 0x44	; 68
   181ae:	a0 e0       	ldi	r26, 0x00	; 0
   181b0:	ed b7       	in	r30, 0x3d	; 61
   181b2:	fe b7       	in	r31, 0x3e	; 62
   181b4:	81 83       	std	Z+1, r24	; 0x01
   181b6:	92 83       	std	Z+2, r25	; 0x02
   181b8:	a3 83       	std	Z+3, r26	; 0x03
   181ba:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   181be:	02 c0       	rjmp	.+4      	; 0x181c4 <lif_free+0x22>
   181c0:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safefree>
   181c4:	0f 90       	pop	r0
   181c6:	0f 90       	pop	r0
   181c8:	0f 90       	pop	r0
   181ca:	08 95       	ret

000181cc <lif_stralloc>:
   181cc:	0f 93       	push	r16
   181ce:	1f 93       	push	r17
   181d0:	cf 93       	push	r28
   181d2:	df 93       	push	r29
   181d4:	ec 01       	movw	r28, r24
   181d6:	fc 01       	movw	r30, r24
   181d8:	01 90       	ld	r0, Z+
   181da:	00 20       	and	r0, r0
   181dc:	e9 f7       	brne	.-6      	; 0x181d8 <lif_stralloc+0xc>
   181de:	bf 01       	movw	r22, r30
   181e0:	68 1b       	sub	r22, r24
   181e2:	79 0b       	sbc	r23, r25
   181e4:	6d 5f       	subi	r22, 0xFD	; 253
   181e6:	7f 4f       	sbci	r23, 0xFF	; 255
   181e8:	07 2e       	mov	r0, r23
   181ea:	00 0c       	add	r0, r0
   181ec:	88 0b       	sbc	r24, r24
   181ee:	99 0b       	sbc	r25, r25
   181f0:	a2 df       	rcall	.-188    	; 0x18136 <lif_calloc>
   181f2:	8c 01       	movw	r16, r24
   181f4:	00 97       	sbiw	r24, 0x00	; 0
   181f6:	19 f0       	breq	.+6      	; 0x181fe <lif_stralloc+0x32>
   181f8:	be 01       	movw	r22, r28
   181fa:	0e 94 21 31 	call	0x6242	; 0x6242 <strcpy>
   181fe:	c8 01       	movw	r24, r16
   18200:	df 91       	pop	r29
   18202:	cf 91       	pop	r28
   18204:	1f 91       	pop	r17
   18206:	0f 91       	pop	r16
   18208:	08 95       	ret

0001820a <lif_open>:
   1820a:	ef 92       	push	r14
   1820c:	ff 92       	push	r15
   1820e:	0f 93       	push	r16
   18210:	1f 93       	push	r17
   18212:	cf 93       	push	r28
   18214:	df 93       	push	r29
   18216:	ad b7       	in	r26, 0x3d	; 61
   18218:	be b7       	in	r27, 0x3e	; 62
   1821a:	17 97       	sbiw	r26, 0x07	; 7
   1821c:	0f b6       	in	r0, 0x3f	; 63
   1821e:	f8 94       	cli
   18220:	be bf       	out	0x3e, r27	; 62
   18222:	0f be       	out	0x3f, r0	; 63
   18224:	ad bf       	out	0x3d, r26	; 61
   18226:	8c 01       	movw	r16, r24
   18228:	7b 01       	movw	r14, r22
   1822a:	0e 94 21 7e 	call	0xfc42	; 0xfc42 <fopen>
   1822e:	ec 01       	movw	r28, r24
   18230:	89 2b       	or	r24, r25
   18232:	71 f4       	brne	.+28     	; 0x18250 <lif_open+0x46>
   18234:	ed b7       	in	r30, 0x3d	; 61
   18236:	fe b7       	in	r31, 0x3e	; 62
   18238:	f7 82       	std	Z+7, r15	; 0x07
   1823a:	e6 82       	std	Z+6, r14	; 0x06
   1823c:	15 83       	std	Z+5, r17	; 0x05
   1823e:	04 83       	std	Z+4, r16	; 0x04
   18240:	84 ef       	ldi	r24, 0xF4	; 244
   18242:	93 e4       	ldi	r25, 0x43	; 67
   18244:	a0 e0       	ldi	r26, 0x00	; 0
   18246:	81 83       	std	Z+1, r24	; 0x01
   18248:	92 83       	std	Z+2, r25	; 0x02
   1824a:	a3 83       	std	Z+3, r26	; 0x03
   1824c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18250:	ce 01       	movw	r24, r28
   18252:	cd b7       	in	r28, 0x3d	; 61
   18254:	de b7       	in	r29, 0x3e	; 62
   18256:	27 96       	adiw	r28, 0x07	; 7
   18258:	e6 e0       	ldi	r30, 0x06	; 6
   1825a:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

0001825e <lif_stat>:
   1825e:	0f 93       	push	r16
   18260:	1f 93       	push	r17
   18262:	cf 93       	push	r28
   18264:	df 93       	push	r29
   18266:	00 d0       	rcall	.+0      	; 0x18268 <lif_stat+0xa>
   18268:	00 d0       	rcall	.+0      	; 0x1826a <lif_stat+0xc>
   1826a:	1f 92       	push	r1
   1826c:	8c 01       	movw	r16, r24
   1826e:	d6 2f       	mov	r29, r22
   18270:	c7 2f       	mov	r28, r23
   18272:	0e 94 26 79 	call	0xf24c	; 0xf24c <stat>
   18276:	97 ff       	sbrs	r25, 7
   18278:	0f c0       	rjmp	.+30     	; 0x18298 <lif_stat+0x3a>
   1827a:	ed b7       	in	r30, 0x3d	; 61
   1827c:	fe b7       	in	r31, 0x3e	; 62
   1827e:	15 83       	std	Z+5, r17	; 0x05
   18280:	04 83       	std	Z+4, r16	; 0x04
   18282:	8b ed       	ldi	r24, 0xDB	; 219
   18284:	93 e4       	ldi	r25, 0x43	; 67
   18286:	a0 e0       	ldi	r26, 0x00	; 0
   18288:	81 83       	std	Z+1, r24	; 0x01
   1828a:	92 83       	std	Z+2, r25	; 0x02
   1828c:	a3 83       	std	Z+3, r26	; 0x03
   1828e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18292:	80 e0       	ldi	r24, 0x00	; 0
   18294:	90 e0       	ldi	r25, 0x00	; 0
   18296:	02 c0       	rjmp	.+4      	; 0x1829c <lif_stat+0x3e>
   18298:	8d 2f       	mov	r24, r29
   1829a:	9c 2f       	mov	r25, r28
   1829c:	cd b7       	in	r28, 0x3d	; 61
   1829e:	de b7       	in	r29, 0x3e	; 62
   182a0:	25 96       	adiw	r28, 0x05	; 5
   182a2:	e4 e0       	ldi	r30, 0x04	; 4
   182a4:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

000182a8 <lif_seek_msg>:
   182a8:	a9 e0       	ldi	r26, 0x09	; 9
   182aa:	b0 e0       	ldi	r27, 0x00	; 0
   182ac:	ea e5       	ldi	r30, 0x5A	; 90
   182ae:	f1 ec       	ldi	r31, 0xC1	; 193
   182b0:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
   182b4:	ec 01       	movw	r28, r24
   182b6:	6a 01       	movw	r12, r20
   182b8:	7b 01       	movw	r14, r22
   182ba:	89 01       	movw	r16, r18
   182bc:	0e 94 60 7a 	call	0xf4c0	; 0xf4c0 <ftell>
   182c0:	6c 15       	cp	r22, r12
   182c2:	7d 05       	cpc	r23, r13
   182c4:	8e 05       	cpc	r24, r14
   182c6:	9f 05       	cpc	r25, r15
   182c8:	19 f4       	brne	.+6      	; 0x182d0 <lif_seek_msg+0x28>
   182ca:	81 e0       	ldi	r24, 0x01	; 1
   182cc:	90 e0       	ldi	r25, 0x00	; 0
   182ce:	1b c0       	rjmp	.+54     	; 0x18306 <lif_seek_msg+0x5e>
   182d0:	20 e0       	ldi	r18, 0x00	; 0
   182d2:	30 e0       	ldi	r19, 0x00	; 0
   182d4:	b7 01       	movw	r22, r14
   182d6:	a6 01       	movw	r20, r12
   182d8:	ce 01       	movw	r24, r28
   182da:	0e 94 e3 7a 	call	0xf5c6	; 0xf5c6 <fseek>
   182de:	97 ff       	sbrs	r25, 7
   182e0:	f4 cf       	rjmp	.-24     	; 0x182ca <lif_seek_msg+0x22>
   182e2:	ed b7       	in	r30, 0x3d	; 61
   182e4:	fe b7       	in	r31, 0x3e	; 62
   182e6:	c6 82       	std	Z+6, r12	; 0x06
   182e8:	d7 82       	std	Z+7, r13	; 0x07
   182ea:	e0 86       	std	Z+8, r14	; 0x08
   182ec:	f1 86       	std	Z+9, r15	; 0x09
   182ee:	15 83       	std	Z+5, r17	; 0x05
   182f0:	04 83       	std	Z+4, r16	; 0x04
   182f2:	8a eb       	ldi	r24, 0xBA	; 186
   182f4:	93 e4       	ldi	r25, 0x43	; 67
   182f6:	a0 e0       	ldi	r26, 0x00	; 0
   182f8:	81 83       	std	Z+1, r24	; 0x01
   182fa:	92 83       	std	Z+2, r25	; 0x02
   182fc:	a3 83       	std	Z+3, r26	; 0x03
   182fe:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18302:	80 e0       	ldi	r24, 0x00	; 0
   18304:	90 e0       	ldi	r25, 0x00	; 0
   18306:	cd b7       	in	r28, 0x3d	; 61
   18308:	de b7       	in	r29, 0x3e	; 62
   1830a:	29 96       	adiw	r28, 0x09	; 9
   1830c:	e8 e0       	ldi	r30, 0x08	; 8
   1830e:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

00018312 <lif_read>:
   18312:	af e0       	ldi	r26, 0x0F	; 15
   18314:	b0 e0       	ldi	r27, 0x00	; 0
   18316:	ef e8       	ldi	r30, 0x8F	; 143
   18318:	f1 ec       	ldi	r31, 0xC1	; 193
   1831a:	0c 94 b9 e6 	jmp	0x1cd72	; 0x1cd72 <__prologue_saves__+0xc>
   1831e:	ec 01       	movw	r28, r24
   18320:	7b 01       	movw	r14, r22
   18322:	49 01       	movw	r8, r18
   18324:	5a 01       	movw	r10, r20
   18326:	28 81       	ld	r18, Y
   18328:	39 81       	ldd	r19, Y+1	; 0x01
   1832a:	b5 01       	movw	r22, r10
   1832c:	a4 01       	movw	r20, r8
   1832e:	8a 81       	ldd	r24, Y+2	; 0x02
   18330:	9b 81       	ldd	r25, Y+3	; 0x03
   18332:	ba df       	rcall	.-140    	; 0x182a8 <lif_seek_msg>
   18334:	89 2b       	or	r24, r25
   18336:	a1 f1       	breq	.+104    	; 0x183a0 <lif_read+0x8e>
   18338:	2a 81       	ldd	r18, Y+2	; 0x02
   1833a:	3b 81       	ldd	r19, Y+3	; 0x03
   1833c:	a8 01       	movw	r20, r16
   1833e:	61 e0       	ldi	r22, 0x01	; 1
   18340:	70 e0       	ldi	r23, 0x00	; 0
   18342:	c7 01       	movw	r24, r14
   18344:	0e 94 77 7b 	call	0xf6ee	; 0xf6ee <fread>
   18348:	6c 01       	movw	r12, r24
   1834a:	e1 2c       	mov	r14, r1
   1834c:	f1 2c       	mov	r15, r1
   1834e:	b8 01       	movw	r22, r16
   18350:	01 2e       	mov	r0, r17
   18352:	00 0c       	add	r0, r0
   18354:	88 0b       	sbc	r24, r24
   18356:	99 0b       	sbc	r25, r25
   18358:	c6 16       	cp	r12, r22
   1835a:	d7 06       	cpc	r13, r23
   1835c:	e8 06       	cpc	r14, r24
   1835e:	f9 06       	cpc	r15, r25
   18360:	29 f1       	breq	.+74     	; 0x183ac <lif_read+0x9a>
   18362:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18366:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1836a:	92 ff       	sbrs	r25, 2
   1836c:	1d c0       	rjmp	.+58     	; 0x183a8 <lif_read+0x96>
   1836e:	ed b7       	in	r30, 0x3d	; 61
   18370:	fe b7       	in	r31, 0x3e	; 62
   18372:	17 87       	std	Z+15, r17	; 0x0f
   18374:	06 87       	std	Z+14, r16	; 0x0e
   18376:	c2 86       	std	Z+10, r12	; 0x0a
   18378:	d3 86       	std	Z+11, r13	; 0x0b
   1837a:	e4 86       	std	Z+12, r14	; 0x0c
   1837c:	f5 86       	std	Z+13, r15	; 0x0d
   1837e:	86 82       	std	Z+6, r8	; 0x06
   18380:	97 82       	std	Z+7, r9	; 0x07
   18382:	a0 86       	std	Z+8, r10	; 0x08
   18384:	b1 86       	std	Z+9, r11	; 0x09
   18386:	88 81       	ld	r24, Y
   18388:	99 81       	ldd	r25, Y+1	; 0x01
   1838a:	95 83       	std	Z+5, r25	; 0x05
   1838c:	84 83       	std	Z+4, r24	; 0x04
   1838e:	8e e7       	ldi	r24, 0x7E	; 126
   18390:	93 e4       	ldi	r25, 0x43	; 67
   18392:	a0 e0       	ldi	r26, 0x00	; 0
   18394:	81 83       	std	Z+1, r24	; 0x01
   18396:	92 83       	std	Z+2, r25	; 0x02
   18398:	a3 83       	std	Z+3, r26	; 0x03
   1839a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1839e:	04 c0       	rjmp	.+8      	; 0x183a8 <lif_read+0x96>
   183a0:	60 e0       	ldi	r22, 0x00	; 0
   183a2:	70 e0       	ldi	r23, 0x00	; 0
   183a4:	cb 01       	movw	r24, r22
   183a6:	02 c0       	rjmp	.+4      	; 0x183ac <lif_read+0x9a>
   183a8:	c7 01       	movw	r24, r14
   183aa:	b6 01       	movw	r22, r12
   183ac:	cd b7       	in	r28, 0x3d	; 61
   183ae:	de b7       	in	r29, 0x3e	; 62
   183b0:	2f 96       	adiw	r28, 0x0f	; 15
   183b2:	ec e0       	ldi	r30, 0x0C	; 12
   183b4:	0c 94 d5 e6 	jmp	0x1cdaa	; 0x1cdaa <__epilogue_restores__+0xc>

000183b8 <lif_write>:
   183b8:	8f 92       	push	r8
   183ba:	9f 92       	push	r9
   183bc:	af 92       	push	r10
   183be:	bf 92       	push	r11
   183c0:	ef 92       	push	r14
   183c2:	ff 92       	push	r15
   183c4:	0f 93       	push	r16
   183c6:	1f 93       	push	r17
   183c8:	cf 93       	push	r28
   183ca:	df 93       	push	r29
   183cc:	ad b7       	in	r26, 0x3d	; 61
   183ce:	be b7       	in	r27, 0x3e	; 62
   183d0:	1d 97       	sbiw	r26, 0x0d	; 13
   183d2:	0f b6       	in	r0, 0x3f	; 63
   183d4:	f8 94       	cli
   183d6:	be bf       	out	0x3e, r27	; 62
   183d8:	0f be       	out	0x3f, r0	; 63
   183da:	ad bf       	out	0x3d, r26	; 61
   183dc:	7c 01       	movw	r14, r24
   183de:	eb 01       	movw	r28, r22
   183e0:	49 01       	movw	r8, r18
   183e2:	5a 01       	movw	r10, r20
   183e4:	fc 01       	movw	r30, r24
   183e6:	20 81       	ld	r18, Z
   183e8:	31 81       	ldd	r19, Z+1	; 0x01
   183ea:	b5 01       	movw	r22, r10
   183ec:	a4 01       	movw	r20, r8
   183ee:	82 81       	ldd	r24, Z+2	; 0x02
   183f0:	93 81       	ldd	r25, Z+3	; 0x03
   183f2:	5a df       	rcall	.-332    	; 0x182a8 <lif_seek_msg>
   183f4:	00 97       	sbiw	r24, 0x00	; 0
   183f6:	81 f1       	breq	.+96     	; 0x18458 <lif_write+0xa0>
   183f8:	f7 01       	movw	r30, r14
   183fa:	22 81       	ldd	r18, Z+2	; 0x02
   183fc:	33 81       	ldd	r19, Z+3	; 0x03
   183fe:	a8 01       	movw	r20, r16
   18400:	61 e0       	ldi	r22, 0x01	; 1
   18402:	70 e0       	ldi	r23, 0x00	; 0
   18404:	ce 01       	movw	r24, r28
   18406:	0e 94 49 7c 	call	0xf892	; 0xf892 <fwrite>
   1840a:	ec 01       	movw	r28, r24
   1840c:	08 17       	cp	r16, r24
   1840e:	19 07       	cpc	r17, r25
   18410:	01 f1       	breq	.+64     	; 0x18452 <lif_write+0x9a>
   18412:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18416:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1841a:	92 ff       	sbrs	r25, 2
   1841c:	1c c0       	rjmp	.+56     	; 0x18456 <lif_write+0x9e>
   1841e:	ed b7       	in	r30, 0x3d	; 61
   18420:	fe b7       	in	r31, 0x3e	; 62
   18422:	15 87       	std	Z+13, r17	; 0x0d
   18424:	04 87       	std	Z+12, r16	; 0x0c
   18426:	d3 87       	std	Z+11, r29	; 0x0b
   18428:	c2 87       	std	Z+10, r28	; 0x0a
   1842a:	86 82       	std	Z+6, r8	; 0x06
   1842c:	97 82       	std	Z+7, r9	; 0x07
   1842e:	a0 86       	std	Z+8, r10	; 0x08
   18430:	b1 86       	std	Z+9, r11	; 0x09
   18432:	f7 01       	movw	r30, r14
   18434:	80 81       	ld	r24, Z
   18436:	91 81       	ldd	r25, Z+1	; 0x01
   18438:	ed b7       	in	r30, 0x3d	; 61
   1843a:	fe b7       	in	r31, 0x3e	; 62
   1843c:	95 83       	std	Z+5, r25	; 0x05
   1843e:	84 83       	std	Z+4, r24	; 0x04
   18440:	81 e4       	ldi	r24, 0x41	; 65
   18442:	93 e4       	ldi	r25, 0x43	; 67
   18444:	a0 e0       	ldi	r26, 0x00	; 0
   18446:	81 83       	std	Z+1, r24	; 0x01
   18448:	92 83       	std	Z+2, r25	; 0x02
   1844a:	a3 83       	std	Z+3, r26	; 0x03
   1844c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18450:	02 c0       	rjmp	.+4      	; 0x18456 <lif_write+0x9e>
   18452:	c8 01       	movw	r24, r16
   18454:	01 c0       	rjmp	.+2      	; 0x18458 <lif_write+0xa0>
   18456:	ce 01       	movw	r24, r28
   18458:	ad b7       	in	r26, 0x3d	; 61
   1845a:	be b7       	in	r27, 0x3e	; 62
   1845c:	1d 96       	adiw	r26, 0x0d	; 13
   1845e:	0f b6       	in	r0, 0x3f	; 63
   18460:	f8 94       	cli
   18462:	be bf       	out	0x3e, r27	; 62
   18464:	0f be       	out	0x3f, r0	; 63
   18466:	ad bf       	out	0x3d, r26	; 61
   18468:	df 91       	pop	r29
   1846a:	cf 91       	pop	r28
   1846c:	1f 91       	pop	r17
   1846e:	0f 91       	pop	r16
   18470:	ff 90       	pop	r15
   18472:	ef 90       	pop	r14
   18474:	bf 90       	pop	r11
   18476:	af 90       	pop	r10
   18478:	9f 90       	pop	r9
   1847a:	8f 90       	pop	r8
   1847c:	08 95       	ret

0001847e <lif_chars>:
   1847e:	80 32       	cpi	r24, 0x20	; 32
   18480:	91 05       	cpc	r25, r1
   18482:	e1 f0       	breq	.+56     	; 0x184bc <lif_chars+0x3e>
   18484:	9c 01       	movw	r18, r24
   18486:	21 56       	subi	r18, 0x61	; 97
   18488:	31 09       	sbc	r19, r1
   1848a:	2a 31       	cpi	r18, 0x1A	; 26
   1848c:	31 05       	cpc	r19, r1
   1848e:	10 f4       	brcc	.+4      	; 0x18494 <lif_chars+0x16>
   18490:	80 97       	sbiw	r24, 0x20	; 32
   18492:	08 95       	ret
   18494:	9c 01       	movw	r18, r24
   18496:	21 54       	subi	r18, 0x41	; 65
   18498:	31 09       	sbc	r19, r1
   1849a:	2a 31       	cpi	r18, 0x1A	; 26
   1849c:	31 05       	cpc	r19, r1
   1849e:	c8 f0       	brcs	.+50     	; 0x184d2 <lif_chars+0x54>
   184a0:	16 16       	cp	r1, r22
   184a2:	17 06       	cpc	r1, r23
   184a4:	74 f4       	brge	.+28     	; 0x184c2 <lif_chars+0x44>
   184a6:	2f 5e       	subi	r18, 0xEF	; 239
   184a8:	3f 4f       	sbci	r19, 0xFF	; 255
   184aa:	2a 30       	cpi	r18, 0x0A	; 10
   184ac:	31 05       	cpc	r19, r1
   184ae:	88 f0       	brcs	.+34     	; 0x184d2 <lif_chars+0x54>
   184b0:	8f 35       	cpi	r24, 0x5F	; 95
   184b2:	91 05       	cpc	r25, r1
   184b4:	49 f0       	breq	.+18     	; 0x184c8 <lif_chars+0x4a>
   184b6:	8d 97       	sbiw	r24, 0x2d	; 45
   184b8:	21 f4       	brne	.+8      	; 0x184c2 <lif_chars+0x44>
   184ba:	09 c0       	rjmp	.+18     	; 0x184ce <lif_chars+0x50>
   184bc:	80 e2       	ldi	r24, 0x20	; 32
   184be:	90 e0       	ldi	r25, 0x00	; 0
   184c0:	08 95       	ret
   184c2:	80 e0       	ldi	r24, 0x00	; 0
   184c4:	90 e0       	ldi	r25, 0x00	; 0
   184c6:	08 95       	ret
   184c8:	8f e5       	ldi	r24, 0x5F	; 95
   184ca:	90 e0       	ldi	r25, 0x00	; 0
   184cc:	08 95       	ret
   184ce:	8d e2       	ldi	r24, 0x2D	; 45
   184d0:	90 e0       	ldi	r25, 0x00	; 0
   184d2:	08 95       	ret

000184d4 <lif_B2S>:
   184d4:	a0 e0       	ldi	r26, 0x00	; 0
   184d6:	b0 e0       	ldi	r27, 0x00	; 0
   184d8:	e0 e7       	ldi	r30, 0x70	; 112
   184da:	f2 ec       	ldi	r31, 0xC2	; 194
   184dc:	0c 94 b9 e6 	jmp	0x1cd72	; 0x1cd72 <__prologue_saves__+0xc>
   184e0:	5c 01       	movw	r10, r24
   184e2:	6b 01       	movw	r12, r22
   184e4:	ea 01       	movw	r28, r20
   184e6:	4c 01       	movw	r8, r24
   184e8:	ee 24       	eor	r14, r14
   184ea:	e3 94       	inc	r14
   184ec:	f1 2c       	mov	r15, r1
   184ee:	00 e0       	ldi	r16, 0x00	; 0
   184f0:	10 e0       	ldi	r17, 0x00	; 0
   184f2:	0c 17       	cp	r16, r28
   184f4:	1d 07       	cpc	r17, r29
   184f6:	6c f4       	brge	.+26     	; 0x18512 <lif_B2S+0x3e>
   184f8:	f4 01       	movw	r30, r8
   184fa:	81 91       	ld	r24, Z+
   184fc:	4f 01       	movw	r8, r30
   184fe:	b8 01       	movw	r22, r16
   18500:	90 e0       	ldi	r25, 0x00	; 0
   18502:	bd df       	rcall	.-134    	; 0x1847e <lif_chars>
   18504:	89 2b       	or	r24, r25
   18506:	11 f4       	brne	.+4      	; 0x1850c <lif_B2S+0x38>
   18508:	e1 2c       	mov	r14, r1
   1850a:	f1 2c       	mov	r15, r1
   1850c:	0f 5f       	subi	r16, 0xFF	; 255
   1850e:	1f 4f       	sbci	r17, 0xFF	; 255
   18510:	f0 cf       	rjmp	.-32     	; 0x184f2 <lif_B2S+0x1e>
   18512:	d6 01       	movw	r26, r12
   18514:	f5 01       	movw	r30, r10
   18516:	cf 01       	movw	r24, r30
   18518:	8a 19       	sub	r24, r10
   1851a:	9b 09       	sbc	r25, r11
   1851c:	8c 17       	cp	r24, r28
   1851e:	9d 07       	cpc	r25, r29
   18520:	1c f4       	brge	.+6      	; 0x18528 <lif_B2S+0x54>
   18522:	81 91       	ld	r24, Z+
   18524:	8d 93       	st	X+, r24
   18526:	f7 cf       	rjmp	.-18     	; 0x18516 <lif_B2S+0x42>
   18528:	d7 ff       	sbrs	r29, 7
   1852a:	02 c0       	rjmp	.+4      	; 0x18530 <lif_B2S+0x5c>
   1852c:	c0 e0       	ldi	r28, 0x00	; 0
   1852e:	d0 e0       	ldi	r29, 0x00	; 0
   18530:	cc 0d       	add	r28, r12
   18532:	dd 1d       	adc	r29, r13
   18534:	18 82       	st	Y, r1
   18536:	c6 01       	movw	r24, r12
   18538:	0e 94 ff 31 	call	0x63fe	; 0x63fe <trim_tail>
   1853c:	c7 01       	movw	r24, r14
   1853e:	cd b7       	in	r28, 0x3d	; 61
   18540:	de b7       	in	r29, 0x3e	; 62
   18542:	ec e0       	ldi	r30, 0x0C	; 12
   18544:	0c 94 d5 e6 	jmp	0x1cdaa	; 0x1cdaa <__epilogue_restores__+0xc>

00018548 <lif_checkname>:
   18548:	ef 92       	push	r14
   1854a:	ff 92       	push	r15
   1854c:	0f 93       	push	r16
   1854e:	1f 93       	push	r17
   18550:	cf 93       	push	r28
   18552:	df 93       	push	r29
   18554:	7c 01       	movw	r14, r24
   18556:	ec 01       	movw	r28, r24
   18558:	01 e0       	ldi	r16, 0x01	; 1
   1855a:	10 e0       	ldi	r17, 0x00	; 0
   1855c:	be 01       	movw	r22, r28
   1855e:	6e 19       	sub	r22, r14
   18560:	7f 09       	sbc	r23, r15
   18562:	89 91       	ld	r24, Y+
   18564:	88 23       	and	r24, r24
   18566:	39 f0       	breq	.+14     	; 0x18576 <lif_checkname+0x2e>
   18568:	90 e0       	ldi	r25, 0x00	; 0
   1856a:	89 df       	rcall	.-238    	; 0x1847e <lif_chars>
   1856c:	89 2b       	or	r24, r25
   1856e:	b1 f7       	brne	.-20     	; 0x1855c <lif_checkname+0x14>
   18570:	00 e0       	ldi	r16, 0x00	; 0
   18572:	10 e0       	ldi	r17, 0x00	; 0
   18574:	f3 cf       	rjmp	.-26     	; 0x1855c <lif_checkname+0x14>
   18576:	c8 01       	movw	r24, r16
   18578:	cd b7       	in	r28, 0x3d	; 61
   1857a:	de b7       	in	r29, 0x3e	; 62
   1857c:	e6 e0       	ldi	r30, 0x06	; 6
   1857e:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

00018582 <lif_S2B>:
   18582:	fb 01       	movw	r30, r22
   18584:	dc 01       	movw	r26, r24
   18586:	20 e0       	ldi	r18, 0x00	; 0
   18588:	30 e0       	ldi	r19, 0x00	; 0
   1858a:	61 91       	ld	r22, Z+
   1858c:	61 11       	cpse	r22, r1
   1858e:	05 c0       	rjmp	.+10     	; 0x1859a <lif_S2B+0x18>
   18590:	fc 01       	movw	r30, r24
   18592:	e2 0f       	add	r30, r18
   18594:	f3 1f       	adc	r31, r19
   18596:	60 e2       	ldi	r22, 0x20	; 32
   18598:	08 c0       	rjmp	.+16     	; 0x185aa <lif_S2B+0x28>
   1859a:	24 17       	cp	r18, r20
   1859c:	35 07       	cpc	r19, r21
   1859e:	24 f4       	brge	.+8      	; 0x185a8 <lif_S2B+0x26>
   185a0:	6d 93       	st	X+, r22
   185a2:	2f 5f       	subi	r18, 0xFF	; 255
   185a4:	3f 4f       	sbci	r19, 0xFF	; 255
   185a6:	f1 cf       	rjmp	.-30     	; 0x1858a <lif_S2B+0x8>
   185a8:	08 95       	ret
   185aa:	9f 01       	movw	r18, r30
   185ac:	28 1b       	sub	r18, r24
   185ae:	39 0b       	sbc	r19, r25
   185b0:	24 17       	cp	r18, r20
   185b2:	35 07       	cpc	r19, r21
   185b4:	14 f4       	brge	.+4      	; 0x185ba <lif_S2B+0x38>
   185b6:	61 93       	st	Z+, r22
   185b8:	f8 cf       	rjmp	.-16     	; 0x185aa <lif_S2B+0x28>
   185ba:	08 95       	ret

000185bc <lif_fixname>:
   185bc:	a0 e0       	ldi	r26, 0x00	; 0
   185be:	b0 e0       	ldi	r27, 0x00	; 0
   185c0:	e4 ee       	ldi	r30, 0xE4	; 228
   185c2:	f2 ec       	ldi	r31, 0xC2	; 194
   185c4:	0c 94 bc e6 	jmp	0x1cd78	; 0x1cd78 <__prologue_saves__+0x12>
   185c8:	8c 01       	movw	r16, r24
   185ca:	cb 01       	movw	r24, r22
   185cc:	7a 01       	movw	r14, r20
   185ce:	0e 94 f2 76 	call	0xede4	; 0xede4 <basename>
   185d2:	6c 01       	movw	r12, r24
   185d4:	e8 01       	movw	r28, r16
   185d6:	80 e2       	ldi	r24, 0x20	; 32
   185d8:	b8 2e       	mov	r11, r24
   185da:	be 01       	movw	r22, r28
   185dc:	60 1b       	sub	r22, r16
   185de:	71 0b       	sbc	r23, r17
   185e0:	f6 01       	movw	r30, r12
   185e2:	81 91       	ld	r24, Z+
   185e4:	6f 01       	movw	r12, r30
   185e6:	81 11       	cpse	r24, r1
   185e8:	02 c0       	rjmp	.+4      	; 0x185ee <lif_fixname+0x32>
   185ea:	20 e2       	ldi	r18, 0x20	; 32
   185ec:	0e c0       	rjmp	.+28     	; 0x1860a <lif_fixname+0x4e>
   185ee:	1e 14       	cp	r1, r14
   185f0:	1f 04       	cpc	r1, r15
   185f2:	dc f7       	brge	.-10     	; 0x185ea <lif_fixname+0x2e>
   185f4:	8e 32       	cpi	r24, 0x2E	; 46
   185f6:	c9 f3       	breq	.-14     	; 0x185ea <lif_fixname+0x2e>
   185f8:	90 e0       	ldi	r25, 0x00	; 0
   185fa:	41 df       	rcall	.-382    	; 0x1847e <lif_chars>
   185fc:	88 23       	and	r24, r24
   185fe:	11 f0       	breq	.+4      	; 0x18604 <lif_fixname+0x48>
   18600:	88 83       	st	Y, r24
   18602:	01 c0       	rjmp	.+2      	; 0x18606 <lif_fixname+0x4a>
   18604:	b8 82       	st	Y, r11
   18606:	21 96       	adiw	r28, 0x01	; 1
   18608:	e8 cf       	rjmp	.-48     	; 0x185da <lif_fixname+0x1e>
   1860a:	ce 01       	movw	r24, r28
   1860c:	80 1b       	sub	r24, r16
   1860e:	91 0b       	sbc	r25, r17
   18610:	8e 15       	cp	r24, r14
   18612:	9f 05       	cpc	r25, r15
   18614:	14 f4       	brge	.+4      	; 0x1861a <lif_fixname+0x5e>
   18616:	29 93       	st	Y+, r18
   18618:	f8 cf       	rjmp	.-16     	; 0x1860a <lif_fixname+0x4e>
   1861a:	18 82       	st	Y, r1
   1861c:	f8 01       	movw	r30, r16
   1861e:	01 90       	ld	r0, Z+
   18620:	00 20       	and	r0, r0
   18622:	e9 f7       	brne	.-6      	; 0x1861e <lif_fixname+0x62>
   18624:	cf 01       	movw	r24, r30
   18626:	01 97       	sbiw	r24, 0x01	; 1
   18628:	80 1b       	sub	r24, r16
   1862a:	91 0b       	sbc	r25, r17
   1862c:	cd b7       	in	r28, 0x3d	; 61
   1862e:	de b7       	in	r29, 0x3e	; 62
   18630:	e9 e0       	ldi	r30, 0x09	; 9
   18632:	0c 94 d8 e6 	jmp	0x1cdb0	; 0x1cdb0 <__epilogue_restores__+0x12>

00018636 <lif_vol2str>:
   18636:	ef 92       	push	r14
   18638:	ff 92       	push	r15
   1863a:	0f 93       	push	r16
   1863c:	1f 93       	push	r17
   1863e:	cf 93       	push	r28
   18640:	df 93       	push	r29
   18642:	7c 01       	movw	r14, r24
   18644:	eb 01       	movw	r28, r22
   18646:	fc 01       	movw	r30, r24
   18648:	04 a1       	ldd	r16, Z+36	; 0x24
   1864a:	15 a1       	ldd	r17, Z+37	; 0x25
   1864c:	20 e0       	ldi	r18, 0x00	; 0
   1864e:	30 e0       	ldi	r19, 0x00	; 0
   18650:	42 e0       	ldi	r20, 0x02	; 2
   18652:	50 e0       	ldi	r21, 0x00	; 0
   18654:	60 e0       	ldi	r22, 0x00	; 0
   18656:	70 e0       	ldi	r23, 0x00	; 0
   18658:	ce 01       	movw	r24, r28
   1865a:	e4 dc       	rcall	.-1592   	; 0x18024 <V2B_MSB>
   1865c:	b7 01       	movw	r22, r14
   1865e:	6a 5d       	subi	r22, 0xDA	; 218
   18660:	7f 4f       	sbci	r23, 0xFF	; 255
   18662:	46 e0       	ldi	r20, 0x06	; 6
   18664:	50 e0       	ldi	r21, 0x00	; 0
   18666:	ce 01       	movw	r24, r28
   18668:	02 96       	adiw	r24, 0x02	; 2
   1866a:	8b df       	rcall	.-234    	; 0x18582 <lif_S2B>
   1866c:	f7 01       	movw	r30, r14
   1866e:	05 a5       	ldd	r16, Z+45	; 0x2d
   18670:	16 a5       	ldd	r17, Z+46	; 0x2e
   18672:	27 a5       	ldd	r18, Z+47	; 0x2f
   18674:	30 a9       	ldd	r19, Z+48	; 0x30
   18676:	44 e0       	ldi	r20, 0x04	; 4
   18678:	50 e0       	ldi	r21, 0x00	; 0
   1867a:	68 e0       	ldi	r22, 0x08	; 8
   1867c:	70 e0       	ldi	r23, 0x00	; 0
   1867e:	ce 01       	movw	r24, r28
   18680:	d1 dc       	rcall	.-1630   	; 0x18024 <V2B_MSB>
   18682:	f7 01       	movw	r30, r14
   18684:	01 a9       	ldd	r16, Z+49	; 0x31
   18686:	12 a9       	ldd	r17, Z+50	; 0x32
   18688:	20 e0       	ldi	r18, 0x00	; 0
   1868a:	30 e0       	ldi	r19, 0x00	; 0
   1868c:	42 e0       	ldi	r20, 0x02	; 2
   1868e:	50 e0       	ldi	r21, 0x00	; 0
   18690:	6c e0       	ldi	r22, 0x0C	; 12
   18692:	70 e0       	ldi	r23, 0x00	; 0
   18694:	ce 01       	movw	r24, r28
   18696:	c6 dc       	rcall	.-1652   	; 0x18024 <V2B_MSB>
   18698:	00 e0       	ldi	r16, 0x00	; 0
   1869a:	10 e0       	ldi	r17, 0x00	; 0
   1869c:	98 01       	movw	r18, r16
   1869e:	42 e0       	ldi	r20, 0x02	; 2
   186a0:	50 e0       	ldi	r21, 0x00	; 0
   186a2:	6e e0       	ldi	r22, 0x0E	; 14
   186a4:	70 e0       	ldi	r23, 0x00	; 0
   186a6:	ce 01       	movw	r24, r28
   186a8:	bd dc       	rcall	.-1670   	; 0x18024 <V2B_MSB>
   186aa:	f7 01       	movw	r30, r14
   186ac:	05 a9       	ldd	r16, Z+53	; 0x35
   186ae:	16 a9       	ldd	r17, Z+54	; 0x36
   186b0:	27 a9       	ldd	r18, Z+55	; 0x37
   186b2:	30 ad       	ldd	r19, Z+56	; 0x38
   186b4:	44 e0       	ldi	r20, 0x04	; 4
   186b6:	50 e0       	ldi	r21, 0x00	; 0
   186b8:	60 e1       	ldi	r22, 0x10	; 16
   186ba:	70 e0       	ldi	r23, 0x00	; 0
   186bc:	ce 01       	movw	r24, r28
   186be:	b2 dc       	rcall	.-1692   	; 0x18024 <V2B_MSB>
   186c0:	f7 01       	movw	r30, r14
   186c2:	01 ad       	ldd	r16, Z+57	; 0x39
   186c4:	12 ad       	ldd	r17, Z+58	; 0x3a
   186c6:	20 e0       	ldi	r18, 0x00	; 0
   186c8:	30 e0       	ldi	r19, 0x00	; 0
   186ca:	42 e0       	ldi	r20, 0x02	; 2
   186cc:	50 e0       	ldi	r21, 0x00	; 0
   186ce:	64 e1       	ldi	r22, 0x14	; 20
   186d0:	70 e0       	ldi	r23, 0x00	; 0
   186d2:	ce 01       	movw	r24, r28
   186d4:	a7 dc       	rcall	.-1714   	; 0x18024 <V2B_MSB>
   186d6:	00 e0       	ldi	r16, 0x00	; 0
   186d8:	10 e0       	ldi	r17, 0x00	; 0
   186da:	98 01       	movw	r18, r16
   186dc:	42 e0       	ldi	r20, 0x02	; 2
   186de:	50 e0       	ldi	r21, 0x00	; 0
   186e0:	66 e1       	ldi	r22, 0x16	; 22
   186e2:	70 e0       	ldi	r23, 0x00	; 0
   186e4:	ce 01       	movw	r24, r28
   186e6:	9e dc       	rcall	.-1732   	; 0x18024 <V2B_MSB>
   186e8:	f7 01       	movw	r30, r14
   186ea:	fd 96       	adiw	r30, 0x3d	; 61
   186ec:	00 81       	ld	r16, Z
   186ee:	11 81       	ldd	r17, Z+1	; 0x01
   186f0:	22 81       	ldd	r18, Z+2	; 0x02
   186f2:	33 81       	ldd	r19, Z+3	; 0x03
   186f4:	44 e0       	ldi	r20, 0x04	; 4
   186f6:	50 e0       	ldi	r21, 0x00	; 0
   186f8:	68 e1       	ldi	r22, 0x18	; 24
   186fa:	70 e0       	ldi	r23, 0x00	; 0
   186fc:	ce 01       	movw	r24, r28
   186fe:	92 dc       	rcall	.-1756   	; 0x18024 <V2B_MSB>
   18700:	f7 01       	movw	r30, r14
   18702:	ef 5b       	subi	r30, 0xBF	; 191
   18704:	ff 4f       	sbci	r31, 0xFF	; 255
   18706:	00 81       	ld	r16, Z
   18708:	11 81       	ldd	r17, Z+1	; 0x01
   1870a:	22 81       	ldd	r18, Z+2	; 0x02
   1870c:	33 81       	ldd	r19, Z+3	; 0x03
   1870e:	44 e0       	ldi	r20, 0x04	; 4
   18710:	50 e0       	ldi	r21, 0x00	; 0
   18712:	6c e1       	ldi	r22, 0x1C	; 28
   18714:	70 e0       	ldi	r23, 0x00	; 0
   18716:	ce 01       	movw	r24, r28
   18718:	85 dc       	rcall	.-1782   	; 0x18024 <V2B_MSB>
   1871a:	f7 01       	movw	r30, r14
   1871c:	eb 5b       	subi	r30, 0xBB	; 187
   1871e:	ff 4f       	sbci	r31, 0xFF	; 255
   18720:	00 81       	ld	r16, Z
   18722:	11 81       	ldd	r17, Z+1	; 0x01
   18724:	22 81       	ldd	r18, Z+2	; 0x02
   18726:	33 81       	ldd	r19, Z+3	; 0x03
   18728:	44 e0       	ldi	r20, 0x04	; 4
   1872a:	50 e0       	ldi	r21, 0x00	; 0
   1872c:	60 e2       	ldi	r22, 0x20	; 32
   1872e:	70 e0       	ldi	r23, 0x00	; 0
   18730:	ce 01       	movw	r24, r28
   18732:	78 dc       	rcall	.-1808   	; 0x18024 <V2B_MSB>
   18734:	de 01       	movw	r26, r28
   18736:	94 96       	adiw	r26, 0x24	; 36
   18738:	f7 01       	movw	r30, r14
   1873a:	e7 5b       	subi	r30, 0xB7	; 183
   1873c:	ff 4f       	sbci	r31, 0xFF	; 255
   1873e:	86 e0       	ldi	r24, 0x06	; 6
   18740:	01 90       	ld	r0, Z+
   18742:	0d 92       	st	X+, r0
   18744:	8a 95       	dec	r24
   18746:	e1 f7       	brne	.-8      	; 0x18740 <lif_vol2str+0x10a>
   18748:	cd b7       	in	r28, 0x3d	; 61
   1874a:	de b7       	in	r29, 0x3e	; 62
   1874c:	e6 e0       	ldi	r30, 0x06	; 6
   1874e:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

00018752 <lif_str2vol>:
   18752:	0f 93       	push	r16
   18754:	1f 93       	push	r17
   18756:	cf 93       	push	r28
   18758:	df 93       	push	r29
   1875a:	8c 01       	movw	r16, r24
   1875c:	eb 01       	movw	r28, r22
   1875e:	42 e0       	ldi	r20, 0x02	; 2
   18760:	50 e0       	ldi	r21, 0x00	; 0
   18762:	60 e0       	ldi	r22, 0x00	; 0
   18764:	70 e0       	ldi	r23, 0x00	; 0
   18766:	87 dc       	rcall	.-1778   	; 0x18076 <B2V_MSB>
   18768:	7d a3       	std	Y+37, r23	; 0x25
   1876a:	6c a3       	std	Y+36, r22	; 0x24
   1876c:	be 01       	movw	r22, r28
   1876e:	6a 5d       	subi	r22, 0xDA	; 218
   18770:	7f 4f       	sbci	r23, 0xFF	; 255
   18772:	46 e0       	ldi	r20, 0x06	; 6
   18774:	50 e0       	ldi	r21, 0x00	; 0
   18776:	c8 01       	movw	r24, r16
   18778:	02 96       	adiw	r24, 0x02	; 2
   1877a:	ac de       	rcall	.-680    	; 0x184d4 <lif_B2S>
   1877c:	44 e0       	ldi	r20, 0x04	; 4
   1877e:	50 e0       	ldi	r21, 0x00	; 0
   18780:	68 e0       	ldi	r22, 0x08	; 8
   18782:	70 e0       	ldi	r23, 0x00	; 0
   18784:	c8 01       	movw	r24, r16
   18786:	77 dc       	rcall	.-1810   	; 0x18076 <B2V_MSB>
   18788:	6d a7       	std	Y+45, r22	; 0x2d
   1878a:	7e a7       	std	Y+46, r23	; 0x2e
   1878c:	8f a7       	std	Y+47, r24	; 0x2f
   1878e:	98 ab       	std	Y+48, r25	; 0x30
   18790:	42 e0       	ldi	r20, 0x02	; 2
   18792:	50 e0       	ldi	r21, 0x00	; 0
   18794:	6c e0       	ldi	r22, 0x0C	; 12
   18796:	70 e0       	ldi	r23, 0x00	; 0
   18798:	c8 01       	movw	r24, r16
   1879a:	6d dc       	rcall	.-1830   	; 0x18076 <B2V_MSB>
   1879c:	7a ab       	std	Y+50, r23	; 0x32
   1879e:	69 ab       	std	Y+49, r22	; 0x31
   187a0:	42 e0       	ldi	r20, 0x02	; 2
   187a2:	50 e0       	ldi	r21, 0x00	; 0
   187a4:	6e e0       	ldi	r22, 0x0E	; 14
   187a6:	70 e0       	ldi	r23, 0x00	; 0
   187a8:	c8 01       	movw	r24, r16
   187aa:	65 dc       	rcall	.-1846   	; 0x18076 <B2V_MSB>
   187ac:	7c ab       	std	Y+52, r23	; 0x34
   187ae:	6b ab       	std	Y+51, r22	; 0x33
   187b0:	44 e0       	ldi	r20, 0x04	; 4
   187b2:	50 e0       	ldi	r21, 0x00	; 0
   187b4:	60 e1       	ldi	r22, 0x10	; 16
   187b6:	70 e0       	ldi	r23, 0x00	; 0
   187b8:	c8 01       	movw	r24, r16
   187ba:	5d dc       	rcall	.-1862   	; 0x18076 <B2V_MSB>
   187bc:	6d ab       	std	Y+53, r22	; 0x35
   187be:	7e ab       	std	Y+54, r23	; 0x36
   187c0:	8f ab       	std	Y+55, r24	; 0x37
   187c2:	98 af       	std	Y+56, r25	; 0x38
   187c4:	42 e0       	ldi	r20, 0x02	; 2
   187c6:	50 e0       	ldi	r21, 0x00	; 0
   187c8:	64 e1       	ldi	r22, 0x14	; 20
   187ca:	70 e0       	ldi	r23, 0x00	; 0
   187cc:	c8 01       	movw	r24, r16
   187ce:	53 dc       	rcall	.-1882   	; 0x18076 <B2V_MSB>
   187d0:	7a af       	std	Y+58, r23	; 0x3a
   187d2:	69 af       	std	Y+57, r22	; 0x39
   187d4:	42 e0       	ldi	r20, 0x02	; 2
   187d6:	50 e0       	ldi	r21, 0x00	; 0
   187d8:	66 e1       	ldi	r22, 0x16	; 22
   187da:	70 e0       	ldi	r23, 0x00	; 0
   187dc:	c8 01       	movw	r24, r16
   187de:	4b dc       	rcall	.-1898   	; 0x18076 <B2V_MSB>
   187e0:	7c af       	std	Y+60, r23	; 0x3c
   187e2:	6b af       	std	Y+59, r22	; 0x3b
   187e4:	44 e0       	ldi	r20, 0x04	; 4
   187e6:	50 e0       	ldi	r21, 0x00	; 0
   187e8:	68 e1       	ldi	r22, 0x18	; 24
   187ea:	70 e0       	ldi	r23, 0x00	; 0
   187ec:	c8 01       	movw	r24, r16
   187ee:	43 dc       	rcall	.-1914   	; 0x18076 <B2V_MSB>
   187f0:	fe 01       	movw	r30, r28
   187f2:	fd 96       	adiw	r30, 0x3d	; 61
   187f4:	60 83       	st	Z, r22
   187f6:	71 83       	std	Z+1, r23	; 0x01
   187f8:	82 83       	std	Z+2, r24	; 0x02
   187fa:	93 83       	std	Z+3, r25	; 0x03
   187fc:	44 e0       	ldi	r20, 0x04	; 4
   187fe:	50 e0       	ldi	r21, 0x00	; 0
   18800:	6c e1       	ldi	r22, 0x1C	; 28
   18802:	70 e0       	ldi	r23, 0x00	; 0
   18804:	c8 01       	movw	r24, r16
   18806:	37 dc       	rcall	.-1938   	; 0x18076 <B2V_MSB>
   18808:	fe 01       	movw	r30, r28
   1880a:	ef 5b       	subi	r30, 0xBF	; 191
   1880c:	ff 4f       	sbci	r31, 0xFF	; 255
   1880e:	60 83       	st	Z, r22
   18810:	71 83       	std	Z+1, r23	; 0x01
   18812:	82 83       	std	Z+2, r24	; 0x02
   18814:	93 83       	std	Z+3, r25	; 0x03
   18816:	44 e0       	ldi	r20, 0x04	; 4
   18818:	50 e0       	ldi	r21, 0x00	; 0
   1881a:	60 e2       	ldi	r22, 0x20	; 32
   1881c:	70 e0       	ldi	r23, 0x00	; 0
   1881e:	c8 01       	movw	r24, r16
   18820:	2a dc       	rcall	.-1964   	; 0x18076 <B2V_MSB>
   18822:	fe 01       	movw	r30, r28
   18824:	eb 5b       	subi	r30, 0xBB	; 187
   18826:	ff 4f       	sbci	r31, 0xFF	; 255
   18828:	60 83       	st	Z, r22
   1882a:	71 83       	std	Z+1, r23	; 0x01
   1882c:	82 83       	std	Z+2, r24	; 0x02
   1882e:	93 83       	std	Z+3, r25	; 0x03
   18830:	de 01       	movw	r26, r28
   18832:	a7 5b       	subi	r26, 0xB7	; 183
   18834:	bf 4f       	sbci	r27, 0xFF	; 255
   18836:	f8 01       	movw	r30, r16
   18838:	b4 96       	adiw	r30, 0x24	; 36
   1883a:	86 e0       	ldi	r24, 0x06	; 6
   1883c:	01 90       	ld	r0, Z+
   1883e:	0d 92       	st	X+, r0
   18840:	8a 95       	dec	r24
   18842:	e1 f7       	brne	.-8      	; 0x1883c <lif_str2vol+0xea>
   18844:	df 91       	pop	r29
   18846:	cf 91       	pop	r28
   18848:	1f 91       	pop	r17
   1884a:	0f 91       	pop	r16
   1884c:	08 95       	ret

0001884e <lif_dir2str>:
   1884e:	ef 92       	push	r14
   18850:	ff 92       	push	r15
   18852:	0f 93       	push	r16
   18854:	1f 93       	push	r17
   18856:	cf 93       	push	r28
   18858:	df 93       	push	r29
   1885a:	ec 01       	movw	r28, r24
   1885c:	7b 01       	movw	r14, r22
   1885e:	bc 01       	movw	r22, r24
   18860:	61 5b       	subi	r22, 0xB1	; 177
   18862:	7f 4f       	sbci	r23, 0xFF	; 255
   18864:	4a e0       	ldi	r20, 0x0A	; 10
   18866:	50 e0       	ldi	r21, 0x00	; 0
   18868:	c7 01       	movw	r24, r14
   1886a:	8b de       	rcall	.-746    	; 0x18582 <lif_S2B>
   1886c:	fe 01       	movw	r30, r28
   1886e:	e6 5a       	subi	r30, 0xA6	; 166
   18870:	ff 4f       	sbci	r31, 0xFF	; 255
   18872:	00 81       	ld	r16, Z
   18874:	11 81       	ldd	r17, Z+1	; 0x01
   18876:	20 e0       	ldi	r18, 0x00	; 0
   18878:	30 e0       	ldi	r19, 0x00	; 0
   1887a:	42 e0       	ldi	r20, 0x02	; 2
   1887c:	50 e0       	ldi	r21, 0x00	; 0
   1887e:	6a e0       	ldi	r22, 0x0A	; 10
   18880:	70 e0       	ldi	r23, 0x00	; 0
   18882:	c7 01       	movw	r24, r14
   18884:	cf db       	rcall	.-2146   	; 0x18024 <V2B_MSB>
   18886:	fe 01       	movw	r30, r28
   18888:	e4 5a       	subi	r30, 0xA4	; 164
   1888a:	ff 4f       	sbci	r31, 0xFF	; 255
   1888c:	00 81       	ld	r16, Z
   1888e:	11 81       	ldd	r17, Z+1	; 0x01
   18890:	22 81       	ldd	r18, Z+2	; 0x02
   18892:	33 81       	ldd	r19, Z+3	; 0x03
   18894:	44 e0       	ldi	r20, 0x04	; 4
   18896:	50 e0       	ldi	r21, 0x00	; 0
   18898:	6c e0       	ldi	r22, 0x0C	; 12
   1889a:	70 e0       	ldi	r23, 0x00	; 0
   1889c:	c7 01       	movw	r24, r14
   1889e:	c2 db       	rcall	.-2172   	; 0x18024 <V2B_MSB>
   188a0:	fe 01       	movw	r30, r28
   188a2:	e0 5a       	subi	r30, 0xA0	; 160
   188a4:	ff 4f       	sbci	r31, 0xFF	; 255
   188a6:	00 81       	ld	r16, Z
   188a8:	11 81       	ldd	r17, Z+1	; 0x01
   188aa:	22 81       	ldd	r18, Z+2	; 0x02
   188ac:	33 81       	ldd	r19, Z+3	; 0x03
   188ae:	44 e0       	ldi	r20, 0x04	; 4
   188b0:	50 e0       	ldi	r21, 0x00	; 0
   188b2:	60 e1       	ldi	r22, 0x10	; 16
   188b4:	70 e0       	ldi	r23, 0x00	; 0
   188b6:	c7 01       	movw	r24, r14
   188b8:	b5 db       	rcall	.-2198   	; 0x18024 <V2B_MSB>
   188ba:	d7 01       	movw	r26, r14
   188bc:	54 96       	adiw	r26, 0x14	; 20
   188be:	fe 01       	movw	r30, r28
   188c0:	ec 59       	subi	r30, 0x9C	; 156
   188c2:	ff 4f       	sbci	r31, 0xFF	; 255
   188c4:	86 e0       	ldi	r24, 0x06	; 6
   188c6:	01 90       	ld	r0, Z+
   188c8:	0d 92       	st	X+, r0
   188ca:	8a 95       	dec	r24
   188cc:	e1 f7       	brne	.-8      	; 0x188c6 <lif_dir2str+0x78>
   188ce:	fe 01       	movw	r30, r28
   188d0:	e6 59       	subi	r30, 0x96	; 150
   188d2:	ff 4f       	sbci	r31, 0xFF	; 255
   188d4:	00 81       	ld	r16, Z
   188d6:	11 81       	ldd	r17, Z+1	; 0x01
   188d8:	20 e0       	ldi	r18, 0x00	; 0
   188da:	30 e0       	ldi	r19, 0x00	; 0
   188dc:	42 e0       	ldi	r20, 0x02	; 2
   188de:	50 e0       	ldi	r21, 0x00	; 0
   188e0:	6a e1       	ldi	r22, 0x1A	; 26
   188e2:	70 e0       	ldi	r23, 0x00	; 0
   188e4:	c7 01       	movw	r24, r14
   188e6:	9e db       	rcall	.-2244   	; 0x18024 <V2B_MSB>
   188e8:	fe 01       	movw	r30, r28
   188ea:	e4 59       	subi	r30, 0x94	; 148
   188ec:	ff 4f       	sbci	r31, 0xFF	; 255
   188ee:	00 81       	ld	r16, Z
   188f0:	11 81       	ldd	r17, Z+1	; 0x01
   188f2:	20 e0       	ldi	r18, 0x00	; 0
   188f4:	30 e0       	ldi	r19, 0x00	; 0
   188f6:	42 e0       	ldi	r20, 0x02	; 2
   188f8:	50 e0       	ldi	r21, 0x00	; 0
   188fa:	6c e1       	ldi	r22, 0x1C	; 28
   188fc:	70 e0       	ldi	r23, 0x00	; 0
   188fe:	c7 01       	movw	r24, r14
   18900:	a5 db       	rcall	.-2230   	; 0x1804c <V2B_LSB>
   18902:	c2 59       	subi	r28, 0x92	; 146
   18904:	df 4f       	sbci	r29, 0xFF	; 255
   18906:	08 81       	ld	r16, Y
   18908:	19 81       	ldd	r17, Y+1	; 0x01
   1890a:	20 e0       	ldi	r18, 0x00	; 0
   1890c:	30 e0       	ldi	r19, 0x00	; 0
   1890e:	42 e0       	ldi	r20, 0x02	; 2
   18910:	50 e0       	ldi	r21, 0x00	; 0
   18912:	6e e1       	ldi	r22, 0x1E	; 30
   18914:	70 e0       	ldi	r23, 0x00	; 0
   18916:	c7 01       	movw	r24, r14
   18918:	99 db       	rcall	.-2254   	; 0x1804c <V2B_LSB>
   1891a:	cd b7       	in	r28, 0x3d	; 61
   1891c:	de b7       	in	r29, 0x3e	; 62
   1891e:	e6 e0       	ldi	r30, 0x06	; 6
   18920:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

00018924 <lif_str2dir>:
   18924:	0f 93       	push	r16
   18926:	1f 93       	push	r17
   18928:	cf 93       	push	r28
   1892a:	df 93       	push	r29
   1892c:	8c 01       	movw	r16, r24
   1892e:	eb 01       	movw	r28, r22
   18930:	61 5b       	subi	r22, 0xB1	; 177
   18932:	7f 4f       	sbci	r23, 0xFF	; 255
   18934:	4a e0       	ldi	r20, 0x0A	; 10
   18936:	50 e0       	ldi	r21, 0x00	; 0
   18938:	cd dd       	rcall	.-1126   	; 0x184d4 <lif_B2S>
   1893a:	42 e0       	ldi	r20, 0x02	; 2
   1893c:	50 e0       	ldi	r21, 0x00	; 0
   1893e:	6a e0       	ldi	r22, 0x0A	; 10
   18940:	70 e0       	ldi	r23, 0x00	; 0
   18942:	c8 01       	movw	r24, r16
   18944:	98 db       	rcall	.-2256   	; 0x18076 <B2V_MSB>
   18946:	fe 01       	movw	r30, r28
   18948:	e6 5a       	subi	r30, 0xA6	; 166
   1894a:	ff 4f       	sbci	r31, 0xFF	; 255
   1894c:	71 83       	std	Z+1, r23	; 0x01
   1894e:	60 83       	st	Z, r22
   18950:	44 e0       	ldi	r20, 0x04	; 4
   18952:	50 e0       	ldi	r21, 0x00	; 0
   18954:	6c e0       	ldi	r22, 0x0C	; 12
   18956:	70 e0       	ldi	r23, 0x00	; 0
   18958:	c8 01       	movw	r24, r16
   1895a:	8d db       	rcall	.-2278   	; 0x18076 <B2V_MSB>
   1895c:	fe 01       	movw	r30, r28
   1895e:	e4 5a       	subi	r30, 0xA4	; 164
   18960:	ff 4f       	sbci	r31, 0xFF	; 255
   18962:	60 83       	st	Z, r22
   18964:	71 83       	std	Z+1, r23	; 0x01
   18966:	82 83       	std	Z+2, r24	; 0x02
   18968:	93 83       	std	Z+3, r25	; 0x03
   1896a:	44 e0       	ldi	r20, 0x04	; 4
   1896c:	50 e0       	ldi	r21, 0x00	; 0
   1896e:	60 e1       	ldi	r22, 0x10	; 16
   18970:	70 e0       	ldi	r23, 0x00	; 0
   18972:	c8 01       	movw	r24, r16
   18974:	80 db       	rcall	.-2304   	; 0x18076 <B2V_MSB>
   18976:	fe 01       	movw	r30, r28
   18978:	e0 5a       	subi	r30, 0xA0	; 160
   1897a:	ff 4f       	sbci	r31, 0xFF	; 255
   1897c:	60 83       	st	Z, r22
   1897e:	71 83       	std	Z+1, r23	; 0x01
   18980:	82 83       	std	Z+2, r24	; 0x02
   18982:	93 83       	std	Z+3, r25	; 0x03
   18984:	de 01       	movw	r26, r28
   18986:	ac 59       	subi	r26, 0x9C	; 156
   18988:	bf 4f       	sbci	r27, 0xFF	; 255
   1898a:	f8 01       	movw	r30, r16
   1898c:	74 96       	adiw	r30, 0x14	; 20
   1898e:	86 e0       	ldi	r24, 0x06	; 6
   18990:	01 90       	ld	r0, Z+
   18992:	0d 92       	st	X+, r0
   18994:	8a 95       	dec	r24
   18996:	e1 f7       	brne	.-8      	; 0x18990 <lif_str2dir+0x6c>
   18998:	42 e0       	ldi	r20, 0x02	; 2
   1899a:	50 e0       	ldi	r21, 0x00	; 0
   1899c:	6a e1       	ldi	r22, 0x1A	; 26
   1899e:	70 e0       	ldi	r23, 0x00	; 0
   189a0:	c8 01       	movw	r24, r16
   189a2:	69 db       	rcall	.-2350   	; 0x18076 <B2V_MSB>
   189a4:	fe 01       	movw	r30, r28
   189a6:	e6 59       	subi	r30, 0x96	; 150
   189a8:	ff 4f       	sbci	r31, 0xFF	; 255
   189aa:	71 83       	std	Z+1, r23	; 0x01
   189ac:	60 83       	st	Z, r22
   189ae:	42 e0       	ldi	r20, 0x02	; 2
   189b0:	50 e0       	ldi	r21, 0x00	; 0
   189b2:	6c e1       	ldi	r22, 0x1C	; 28
   189b4:	70 e0       	ldi	r23, 0x00	; 0
   189b6:	c8 01       	movw	r24, r16
   189b8:	7d db       	rcall	.-2310   	; 0x180b4 <B2V_LSB>
   189ba:	fe 01       	movw	r30, r28
   189bc:	e4 59       	subi	r30, 0x94	; 148
   189be:	ff 4f       	sbci	r31, 0xFF	; 255
   189c0:	71 83       	std	Z+1, r23	; 0x01
   189c2:	60 83       	st	Z, r22
   189c4:	42 e0       	ldi	r20, 0x02	; 2
   189c6:	50 e0       	ldi	r21, 0x00	; 0
   189c8:	6e e1       	ldi	r22, 0x1E	; 30
   189ca:	70 e0       	ldi	r23, 0x00	; 0
   189cc:	c8 01       	movw	r24, r16
   189ce:	72 db       	rcall	.-2332   	; 0x180b4 <B2V_LSB>
   189d0:	c2 59       	subi	r28, 0x92	; 146
   189d2:	df 4f       	sbci	r29, 0xFF	; 255
   189d4:	79 83       	std	Y+1, r23	; 0x01
   189d6:	68 83       	st	Y, r22
   189d8:	df 91       	pop	r29
   189da:	cf 91       	pop	r28
   189dc:	1f 91       	pop	r17
   189de:	0f 91       	pop	r16
   189e0:	08 95       	ret

000189e2 <lif_BIN2BCD>:
   189e2:	6a e0       	ldi	r22, 0x0A	; 10
   189e4:	0e 94 13 e6 	call	0x1cc26	; 0x1cc26 <__udivmodqi4>
   189e8:	82 95       	swap	r24
   189ea:	80 7f       	andi	r24, 0xF0	; 240
   189ec:	89 2b       	or	r24, r25
   189ee:	08 95       	ret

000189f0 <lif_BCD2BIN>:
   189f0:	28 2f       	mov	r18, r24
   189f2:	22 95       	swap	r18
   189f4:	2f 70       	andi	r18, 0x0F	; 15
   189f6:	8f 70       	andi	r24, 0x0F	; 15
   189f8:	90 e0       	ldi	r25, 0x00	; 0
   189fa:	3a e0       	ldi	r19, 0x0A	; 10
   189fc:	23 9f       	mul	r18, r19
   189fe:	80 0d       	add	r24, r0
   18a00:	91 1d       	adc	r25, r1
   18a02:	11 24       	eor	r1, r1
   18a04:	08 95       	ret

00018a06 <lif_time2lifbcd>:
   18a06:	aa e1       	ldi	r26, 0x1A	; 26
   18a08:	b0 e0       	ldi	r27, 0x00	; 0
   18a0a:	e9 e0       	ldi	r30, 0x09	; 9
   18a0c:	f5 ec       	ldi	r31, 0xC5	; 197
   18a0e:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
   18a12:	8b 01       	movw	r16, r22
   18a14:	9c 01       	movw	r18, r24
   18a16:	6f 8b       	std	Y+23, r22	; 0x17
   18a18:	78 8f       	std	Y+24, r23	; 0x18
   18a1a:	89 8f       	std	Y+25, r24	; 0x19
   18a1c:	9a 8f       	std	Y+26, r25	; 0x1a
   18a1e:	67 2b       	or	r22, r23
   18a20:	68 2b       	or	r22, r24
   18a22:	69 2b       	or	r22, r25
   18a24:	41 f4       	brne	.+16     	; 0x18a36 <lif_time2lifbcd+0x30>
   18a26:	fa 01       	movw	r30, r20
   18a28:	ca 01       	movw	r24, r20
   18a2a:	06 96       	adiw	r24, 0x06	; 6
   18a2c:	11 92       	st	Z+, r1
   18a2e:	e8 17       	cp	r30, r24
   18a30:	f9 07       	cpc	r31, r25
   18a32:	e1 f7       	brne	.-8      	; 0x18a2c <lif_time2lifbcd+0x26>
   18a34:	26 c0       	rjmp	.+76     	; 0x18a82 <lif_time2lifbcd+0x7c>
   18a36:	8a 01       	movw	r16, r20
   18a38:	be 01       	movw	r22, r28
   18a3a:	6f 5f       	subi	r22, 0xFF	; 255
   18a3c:	7f 4f       	sbci	r23, 0xFF	; 255
   18a3e:	ce 01       	movw	r24, r28
   18a40:	47 96       	adiw	r24, 0x17	; 23
   18a42:	0e 94 73 37 	call	0x6ee6	; 0x6ee6 <gmtime_r>
   18a46:	8b 85       	ldd	r24, Y+11	; 0x0b
   18a48:	9c 85       	ldd	r25, Y+12	; 0x0c
   18a4a:	64 e6       	ldi	r22, 0x64	; 100
   18a4c:	70 e0       	ldi	r23, 0x00	; 0
   18a4e:	0e 94 33 e6 	call	0x1cc66	; 0x1cc66 <__divmodhi4>
   18a52:	c7 df       	rcall	.-114    	; 0x189e2 <lif_BIN2BCD>
   18a54:	f8 01       	movw	r30, r16
   18a56:	80 83       	st	Z, r24
   18a58:	89 85       	ldd	r24, Y+9	; 0x09
   18a5a:	8f 5f       	subi	r24, 0xFF	; 255
   18a5c:	c2 df       	rcall	.-124    	; 0x189e2 <lif_BIN2BCD>
   18a5e:	f8 01       	movw	r30, r16
   18a60:	81 83       	std	Z+1, r24	; 0x01
   18a62:	8f 81       	ldd	r24, Y+7	; 0x07
   18a64:	be df       	rcall	.-132    	; 0x189e2 <lif_BIN2BCD>
   18a66:	f8 01       	movw	r30, r16
   18a68:	82 83       	std	Z+2, r24	; 0x02
   18a6a:	8d 81       	ldd	r24, Y+5	; 0x05
   18a6c:	ba df       	rcall	.-140    	; 0x189e2 <lif_BIN2BCD>
   18a6e:	f8 01       	movw	r30, r16
   18a70:	83 83       	std	Z+3, r24	; 0x03
   18a72:	8b 81       	ldd	r24, Y+3	; 0x03
   18a74:	b6 df       	rcall	.-148    	; 0x189e2 <lif_BIN2BCD>
   18a76:	f8 01       	movw	r30, r16
   18a78:	84 83       	std	Z+4, r24	; 0x04
   18a7a:	89 81       	ldd	r24, Y+1	; 0x01
   18a7c:	b2 df       	rcall	.-156    	; 0x189e2 <lif_BIN2BCD>
   18a7e:	f8 01       	movw	r30, r16
   18a80:	85 83       	std	Z+5, r24	; 0x05
   18a82:	6a 96       	adiw	r28, 0x1a	; 26
   18a84:	e4 e0       	ldi	r30, 0x04	; 4
   18a86:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

00018a8a <lif_lifbcd2time>:
   18a8a:	a6 e1       	ldi	r26, 0x16	; 22
   18a8c:	b0 e0       	ldi	r27, 0x00	; 0
   18a8e:	eb e4       	ldi	r30, 0x4B	; 75
   18a90:	f5 ec       	ldi	r31, 0xC5	; 197
   18a92:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__+0x10>
   18a96:	8c 01       	movw	r16, r24
   18a98:	7c 01       	movw	r14, r24
   18a9a:	5c 01       	movw	r10, r24
   18a9c:	26 e0       	ldi	r18, 0x06	; 6
   18a9e:	a2 0e       	add	r10, r18
   18aa0:	b1 1c       	adc	r11, r1
   18aa2:	cc 24       	eor	r12, r12
   18aa4:	c3 94       	inc	r12
   18aa6:	d1 2c       	mov	r13, r1
   18aa8:	f7 01       	movw	r30, r14
   18aaa:	81 91       	ld	r24, Z+
   18aac:	7f 01       	movw	r14, r30
   18aae:	a0 df       	rcall	.-192    	; 0x189f0 <lif_BCD2BIN>
   18ab0:	89 2b       	or	r24, r25
   18ab2:	11 f0       	breq	.+4      	; 0x18ab8 <lif_lifbcd2time+0x2e>
   18ab4:	c1 2c       	mov	r12, r1
   18ab6:	d1 2c       	mov	r13, r1
   18ab8:	ea 14       	cp	r14, r10
   18aba:	fb 04       	cpc	r15, r11
   18abc:	a9 f7       	brne	.-22     	; 0x18aa8 <lif_lifbcd2time+0x1e>
   18abe:	c1 14       	cp	r12, r1
   18ac0:	d1 04       	cpc	r13, r1
   18ac2:	61 f5       	brne	.+88     	; 0x18b1c <lif_lifbcd2time+0x92>
   18ac4:	f8 01       	movw	r30, r16
   18ac6:	80 81       	ld	r24, Z
   18ac8:	93 df       	rcall	.-218    	; 0x189f0 <lif_BCD2BIN>
   18aca:	7c 01       	movw	r14, r24
   18acc:	f8 01       	movw	r30, r16
   18ace:	81 81       	ldd	r24, Z+1	; 0x01
   18ad0:	8f df       	rcall	.-226    	; 0x189f0 <lif_BCD2BIN>
   18ad2:	01 97       	sbiw	r24, 0x01	; 1
   18ad4:	f6 e4       	ldi	r31, 0x46	; 70
   18ad6:	ef 16       	cp	r14, r31
   18ad8:	f1 04       	cpc	r15, r1
   18ada:	1c f4       	brge	.+6      	; 0x18ae2 <lif_lifbcd2time+0x58>
   18adc:	24 e6       	ldi	r18, 0x64	; 100
   18ade:	e2 0e       	add	r14, r18
   18ae0:	f1 1c       	adc	r15, r1
   18ae2:	fc 86       	std	Y+12, r15	; 0x0c
   18ae4:	eb 86       	std	Y+11, r14	; 0x0b
   18ae6:	9a 87       	std	Y+10, r25	; 0x0a
   18ae8:	89 87       	std	Y+9, r24	; 0x09
   18aea:	f8 01       	movw	r30, r16
   18aec:	82 81       	ldd	r24, Z+2	; 0x02
   18aee:	80 df       	rcall	.-256    	; 0x189f0 <lif_BCD2BIN>
   18af0:	98 87       	std	Y+8, r25	; 0x08
   18af2:	8f 83       	std	Y+7, r24	; 0x07
   18af4:	f8 01       	movw	r30, r16
   18af6:	83 81       	ldd	r24, Z+3	; 0x03
   18af8:	7b df       	rcall	.-266    	; 0x189f0 <lif_BCD2BIN>
   18afa:	9e 83       	std	Y+6, r25	; 0x06
   18afc:	8d 83       	std	Y+5, r24	; 0x05
   18afe:	f8 01       	movw	r30, r16
   18b00:	84 81       	ldd	r24, Z+4	; 0x04
   18b02:	76 df       	rcall	.-276    	; 0x189f0 <lif_BCD2BIN>
   18b04:	9c 83       	std	Y+4, r25	; 0x04
   18b06:	8b 83       	std	Y+3, r24	; 0x03
   18b08:	f8 01       	movw	r30, r16
   18b0a:	85 81       	ldd	r24, Z+5	; 0x05
   18b0c:	71 df       	rcall	.-286    	; 0x189f0 <lif_BCD2BIN>
   18b0e:	9a 83       	std	Y+2, r25	; 0x02
   18b10:	89 83       	std	Y+1, r24	; 0x01
   18b12:	ce 01       	movw	r24, r28
   18b14:	01 96       	adiw	r24, 0x01	; 1
   18b16:	0e 94 47 3a 	call	0x748e	; 0x748e <timegm>
   18b1a:	03 c0       	rjmp	.+6      	; 0x18b22 <lif_lifbcd2time+0x98>
   18b1c:	60 e0       	ldi	r22, 0x00	; 0
   18b1e:	70 e0       	ldi	r23, 0x00	; 0
   18b20:	cb 01       	movw	r24, r22
   18b22:	66 96       	adiw	r28, 0x16	; 22
   18b24:	ea e0       	ldi	r30, 0x0A	; 10
   18b26:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__+0x10>

00018b2a <lif_ctime_gmt>:
   18b2a:	a6 e1       	ldi	r26, 0x16	; 22
   18b2c:	b0 e0       	ldi	r27, 0x00	; 0
   18b2e:	eb e9       	ldi	r30, 0x9B	; 155
   18b30:	f5 ec       	ldi	r31, 0xC5	; 197
   18b32:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0x1c>
   18b36:	20 e2       	ldi	r18, 0x20	; 32
   18b38:	e2 ed       	ldi	r30, 0xD2	; 210
   18b3a:	f9 e1       	ldi	r31, 0x19	; 25
   18b3c:	df 01       	movw	r26, r30
   18b3e:	1d 92       	st	X+, r1
   18b40:	2a 95       	dec	r18
   18b42:	e9 f7       	brne	.-6      	; 0x18b3e <lif_ctime_gmt+0x14>
   18b44:	be 01       	movw	r22, r28
   18b46:	6f 5f       	subi	r22, 0xFF	; 255
   18b48:	7f 4f       	sbci	r23, 0xFF	; 255
   18b4a:	0e 94 73 37 	call	0x6ee6	; 0x6ee6 <gmtime_r>
   18b4e:	62 ed       	ldi	r22, 0xD2	; 210
   18b50:	79 e1       	ldi	r23, 0x19	; 25
   18b52:	0e 94 a3 3c 	call	0x7946	; 0x7946 <asctime_r>
   18b56:	8c 01       	movw	r16, r24
   18b58:	0e 94 ff 31 	call	0x63fe	; 0x63fe <trim_tail>
   18b5c:	c8 01       	movw	r24, r16
   18b5e:	66 96       	adiw	r28, 0x16	; 22
   18b60:	e4 e0       	ldi	r30, 0x04	; 4
   18b62:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

00018b66 <lif_lifbcd2timestr>:
   18b66:	a4 e0       	ldi	r26, 0x04	; 4
   18b68:	b0 e0       	ldi	r27, 0x00	; 0
   18b6a:	e9 eb       	ldi	r30, 0xB9	; 185
   18b6c:	f5 ec       	ldi	r31, 0xC5	; 197
   18b6e:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x20>
   18b72:	20 e2       	ldi	r18, 0x20	; 32
   18b74:	e2 eb       	ldi	r30, 0xB2	; 178
   18b76:	f9 e1       	ldi	r31, 0x19	; 25
   18b78:	df 01       	movw	r26, r30
   18b7a:	1d 92       	st	X+, r1
   18b7c:	2a 95       	dec	r18
   18b7e:	e9 f7       	brne	.-6      	; 0x18b7a <lif_lifbcd2timestr+0x14>
   18b80:	84 df       	rcall	.-248    	; 0x18a8a <lif_lifbcd2time>
   18b82:	69 83       	std	Y+1, r22	; 0x01
   18b84:	7a 83       	std	Y+2, r23	; 0x02
   18b86:	8b 83       	std	Y+3, r24	; 0x03
   18b88:	9c 83       	std	Y+4, r25	; 0x04
   18b8a:	67 2b       	or	r22, r23
   18b8c:	68 2b       	or	r22, r24
   18b8e:	69 2b       	or	r22, r25
   18b90:	29 f0       	breq	.+10     	; 0x18b9c <lif_lifbcd2timestr+0x36>
   18b92:	ce 01       	movw	r24, r28
   18b94:	01 96       	adiw	r24, 0x01	; 1
   18b96:	c9 df       	rcall	.-110    	; 0x18b2a <lif_ctime_gmt>
   18b98:	bc 01       	movw	r22, r24
   18b9a:	02 c0       	rjmp	.+4      	; 0x18ba0 <lif_lifbcd2timestr+0x3a>
   18b9c:	6f ee       	ldi	r22, 0xEF	; 239
   18b9e:	75 e1       	ldi	r23, 0x15	; 21
   18ba0:	82 eb       	ldi	r24, 0xB2	; 178
   18ba2:	99 e1       	ldi	r25, 0x19	; 25
   18ba4:	0e 94 21 31 	call	0x6242	; 0x6242 <strcpy>
   18ba8:	82 eb       	ldi	r24, 0xB2	; 178
   18baa:	99 e1       	ldi	r25, 0x19	; 25
   18bac:	24 96       	adiw	r28, 0x04	; 4
   18bae:	e2 e0       	ldi	r30, 0x02	; 2
   18bb0:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00018bb4 <lif_image_clear>:
   18bb4:	20 e7       	ldi	r18, 0x70	; 112
   18bb6:	fc 01       	movw	r30, r24
   18bb8:	11 92       	st	Z+, r1
   18bba:	2a 95       	dec	r18
   18bbc:	e9 f7       	brne	.-6      	; 0x18bb8 <lif_image_clear+0x4>
   18bbe:	08 95       	ret

00018bc0 <lif_dir_clear>:
   18bc0:	81 5b       	subi	r24, 0xB1	; 177
   18bc2:	9f 4f       	sbci	r25, 0xFF	; 255
   18bc4:	21 e2       	ldi	r18, 0x21	; 33
   18bc6:	fc 01       	movw	r30, r24
   18bc8:	11 92       	st	Z+, r1
   18bca:	2a 95       	dec	r18
   18bcc:	e9 f7       	brne	.-6      	; 0x18bc8 <lif_dir_clear+0x8>
   18bce:	08 95       	ret

00018bd0 <lif_vol_clear>:
   18bd0:	84 96       	adiw	r24, 0x24	; 36
   18bd2:	2b e2       	ldi	r18, 0x2B	; 43
   18bd4:	fc 01       	movw	r30, r24
   18bd6:	11 92       	st	Z+, r1
   18bd8:	2a 95       	dec	r18
   18bda:	e9 f7       	brne	.-6      	; 0x18bd6 <lif_vol_clear+0x6>
   18bdc:	08 95       	ret

00018bde <lif_dump_vol>:
   18bde:	cf 93       	push	r28
   18be0:	df 93       	push	r29
   18be2:	ad b7       	in	r26, 0x3d	; 61
   18be4:	be b7       	in	r27, 0x3e	; 62
   18be6:	17 97       	sbiw	r26, 0x07	; 7
   18be8:	0f b6       	in	r0, 0x3f	; 63
   18bea:	f8 94       	cli
   18bec:	be bf       	out	0x3e, r27	; 62
   18bee:	0f be       	out	0x3f, r0	; 63
   18bf0:	ad bf       	out	0x3d, r26	; 61
   18bf2:	ec 01       	movw	r28, r24
   18bf4:	ed b7       	in	r30, 0x3d	; 61
   18bf6:	fe b7       	in	r31, 0x3e	; 62
   18bf8:	75 83       	std	Z+5, r23	; 0x05
   18bfa:	64 83       	std	Z+4, r22	; 0x04
   18bfc:	8c e3       	ldi	r24, 0x3C	; 60
   18bfe:	93 e4       	ldi	r25, 0x43	; 67
   18c00:	a0 e0       	ldi	r26, 0x00	; 0
   18c02:	81 83       	std	Z+1, r24	; 0x01
   18c04:	92 83       	std	Z+2, r25	; 0x02
   18c06:	a3 83       	std	Z+3, r26	; 0x03
   18c08:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18c0c:	88 81       	ld	r24, Y
   18c0e:	99 81       	ldd	r25, Y+1	; 0x01
   18c10:	ed b7       	in	r30, 0x3d	; 61
   18c12:	fe b7       	in	r31, 0x3e	; 62
   18c14:	95 83       	std	Z+5, r25	; 0x05
   18c16:	84 83       	std	Z+4, r24	; 0x04
   18c18:	82 e2       	ldi	r24, 0x22	; 34
   18c1a:	93 e4       	ldi	r25, 0x43	; 67
   18c1c:	a0 e0       	ldi	r26, 0x00	; 0
   18c1e:	81 83       	std	Z+1, r24	; 0x01
   18c20:	92 83       	std	Z+2, r25	; 0x02
   18c22:	a3 83       	std	Z+3, r26	; 0x03
   18c24:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18c28:	8c 81       	ldd	r24, Y+4	; 0x04
   18c2a:	9d 81       	ldd	r25, Y+5	; 0x05
   18c2c:	ae 81       	ldd	r26, Y+6	; 0x06
   18c2e:	bf 81       	ldd	r27, Y+7	; 0x07
   18c30:	ed b7       	in	r30, 0x3d	; 61
   18c32:	fe b7       	in	r31, 0x3e	; 62
   18c34:	84 83       	std	Z+4, r24	; 0x04
   18c36:	95 83       	std	Z+5, r25	; 0x05
   18c38:	a6 83       	std	Z+6, r26	; 0x06
   18c3a:	b7 83       	std	Z+7, r27	; 0x07
   18c3c:	85 e0       	ldi	r24, 0x05	; 5
   18c3e:	93 e4       	ldi	r25, 0x43	; 67
   18c40:	a0 e0       	ldi	r26, 0x00	; 0
   18c42:	81 83       	std	Z+1, r24	; 0x01
   18c44:	92 83       	std	Z+2, r25	; 0x02
   18c46:	a3 83       	std	Z+3, r26	; 0x03
   18c48:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18c4c:	88 85       	ldd	r24, Y+8	; 0x08
   18c4e:	99 85       	ldd	r25, Y+9	; 0x09
   18c50:	aa 85       	ldd	r26, Y+10	; 0x0a
   18c52:	bb 85       	ldd	r27, Y+11	; 0x0b
   18c54:	ed b7       	in	r30, 0x3d	; 61
   18c56:	fe b7       	in	r31, 0x3e	; 62
   18c58:	84 83       	std	Z+4, r24	; 0x04
   18c5a:	95 83       	std	Z+5, r25	; 0x05
   18c5c:	a6 83       	std	Z+6, r26	; 0x06
   18c5e:	b7 83       	std	Z+7, r27	; 0x07
   18c60:	88 ee       	ldi	r24, 0xE8	; 232
   18c62:	92 e4       	ldi	r25, 0x42	; 66
   18c64:	a0 e0       	ldi	r26, 0x00	; 0
   18c66:	81 83       	std	Z+1, r24	; 0x01
   18c68:	92 83       	std	Z+2, r25	; 0x02
   18c6a:	a3 83       	std	Z+3, r26	; 0x03
   18c6c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18c70:	8c 85       	ldd	r24, Y+12	; 0x0c
   18c72:	9d 85       	ldd	r25, Y+13	; 0x0d
   18c74:	ae 85       	ldd	r26, Y+14	; 0x0e
   18c76:	bf 85       	ldd	r27, Y+15	; 0x0f
   18c78:	ed b7       	in	r30, 0x3d	; 61
   18c7a:	fe b7       	in	r31, 0x3e	; 62
   18c7c:	84 83       	std	Z+4, r24	; 0x04
   18c7e:	95 83       	std	Z+5, r25	; 0x05
   18c80:	a6 83       	std	Z+6, r26	; 0x06
   18c82:	b7 83       	std	Z+7, r27	; 0x07
   18c84:	8b ec       	ldi	r24, 0xCB	; 203
   18c86:	92 e4       	ldi	r25, 0x42	; 66
   18c88:	a0 e0       	ldi	r26, 0x00	; 0
   18c8a:	81 83       	std	Z+1, r24	; 0x01
   18c8c:	92 83       	std	Z+2, r25	; 0x02
   18c8e:	a3 83       	std	Z+3, r26	; 0x03
   18c90:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18c94:	88 89       	ldd	r24, Y+16	; 0x10
   18c96:	99 89       	ldd	r25, Y+17	; 0x11
   18c98:	aa 89       	ldd	r26, Y+18	; 0x12
   18c9a:	bb 89       	ldd	r27, Y+19	; 0x13
   18c9c:	ed b7       	in	r30, 0x3d	; 61
   18c9e:	fe b7       	in	r31, 0x3e	; 62
   18ca0:	84 83       	std	Z+4, r24	; 0x04
   18ca2:	95 83       	std	Z+5, r25	; 0x05
   18ca4:	a6 83       	std	Z+6, r26	; 0x06
   18ca6:	b7 83       	std	Z+7, r27	; 0x07
   18ca8:	8e ea       	ldi	r24, 0xAE	; 174
   18caa:	92 e4       	ldi	r25, 0x42	; 66
   18cac:	a0 e0       	ldi	r26, 0x00	; 0
   18cae:	81 83       	std	Z+1, r24	; 0x01
   18cb0:	92 83       	std	Z+2, r25	; 0x02
   18cb2:	a3 83       	std	Z+3, r26	; 0x03
   18cb4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18cb8:	8c 89       	ldd	r24, Y+20	; 0x14
   18cba:	9d 89       	ldd	r25, Y+21	; 0x15
   18cbc:	ae 89       	ldd	r26, Y+22	; 0x16
   18cbe:	bf 89       	ldd	r27, Y+23	; 0x17
   18cc0:	ed b7       	in	r30, 0x3d	; 61
   18cc2:	fe b7       	in	r31, 0x3e	; 62
   18cc4:	84 83       	std	Z+4, r24	; 0x04
   18cc6:	95 83       	std	Z+5, r25	; 0x05
   18cc8:	a6 83       	std	Z+6, r26	; 0x06
   18cca:	b7 83       	std	Z+7, r27	; 0x07
   18ccc:	81 e9       	ldi	r24, 0x91	; 145
   18cce:	92 e4       	ldi	r25, 0x42	; 66
   18cd0:	a0 e0       	ldi	r26, 0x00	; 0
   18cd2:	81 83       	std	Z+1, r24	; 0x01
   18cd4:	92 83       	std	Z+2, r25	; 0x02
   18cd6:	a3 83       	std	Z+3, r26	; 0x03
   18cd8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18cdc:	88 8d       	ldd	r24, Y+24	; 0x18
   18cde:	99 8d       	ldd	r25, Y+25	; 0x19
   18ce0:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18ce2:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18ce4:	ed b7       	in	r30, 0x3d	; 61
   18ce6:	fe b7       	in	r31, 0x3e	; 62
   18ce8:	84 83       	std	Z+4, r24	; 0x04
   18cea:	95 83       	std	Z+5, r25	; 0x05
   18cec:	a6 83       	std	Z+6, r26	; 0x06
   18cee:	b7 83       	std	Z+7, r27	; 0x07
   18cf0:	84 e7       	ldi	r24, 0x74	; 116
   18cf2:	92 e4       	ldi	r25, 0x42	; 66
   18cf4:	a0 e0       	ldi	r26, 0x00	; 0
   18cf6:	81 83       	std	Z+1, r24	; 0x01
   18cf8:	92 83       	std	Z+2, r25	; 0x02
   18cfa:	a3 83       	std	Z+3, r26	; 0x03
   18cfc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18d00:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18d02:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18d04:	09 2e       	mov	r0, r25
   18d06:	00 0c       	add	r0, r0
   18d08:	aa 0b       	sbc	r26, r26
   18d0a:	bb 0b       	sbc	r27, r27
   18d0c:	ed b7       	in	r30, 0x3d	; 61
   18d0e:	fe b7       	in	r31, 0x3e	; 62
   18d10:	84 83       	std	Z+4, r24	; 0x04
   18d12:	95 83       	std	Z+5, r25	; 0x05
   18d14:	a6 83       	std	Z+6, r26	; 0x06
   18d16:	b7 83       	std	Z+7, r27	; 0x07
   18d18:	87 e5       	ldi	r24, 0x57	; 87
   18d1a:	92 e4       	ldi	r25, 0x42	; 66
   18d1c:	a0 e0       	ldi	r26, 0x00	; 0
   18d1e:	81 83       	std	Z+1, r24	; 0x01
   18d20:	92 83       	std	Z+2, r25	; 0x02
   18d22:	a3 83       	std	Z+3, r26	; 0x03
   18d24:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18d28:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18d2a:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18d2c:	09 2e       	mov	r0, r25
   18d2e:	00 0c       	add	r0, r0
   18d30:	aa 0b       	sbc	r26, r26
   18d32:	bb 0b       	sbc	r27, r27
   18d34:	ed b7       	in	r30, 0x3d	; 61
   18d36:	fe b7       	in	r31, 0x3e	; 62
   18d38:	84 83       	std	Z+4, r24	; 0x04
   18d3a:	95 83       	std	Z+5, r25	; 0x05
   18d3c:	a6 83       	std	Z+6, r26	; 0x06
   18d3e:	b7 83       	std	Z+7, r27	; 0x07
   18d40:	8a e3       	ldi	r24, 0x3A	; 58
   18d42:	92 e4       	ldi	r25, 0x42	; 66
   18d44:	a0 e0       	ldi	r26, 0x00	; 0
   18d46:	81 83       	std	Z+1, r24	; 0x01
   18d48:	92 83       	std	Z+2, r25	; 0x02
   18d4a:	a3 83       	std	Z+3, r26	; 0x03
   18d4c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18d50:	ce 01       	movw	r24, r28
   18d52:	86 96       	adiw	r24, 0x26	; 38
   18d54:	ed b7       	in	r30, 0x3d	; 61
   18d56:	fe b7       	in	r31, 0x3e	; 62
   18d58:	95 83       	std	Z+5, r25	; 0x05
   18d5a:	84 83       	std	Z+4, r24	; 0x04
   18d5c:	80 e2       	ldi	r24, 0x20	; 32
   18d5e:	92 e4       	ldi	r25, 0x42	; 66
   18d60:	a0 e0       	ldi	r26, 0x00	; 0
   18d62:	81 83       	std	Z+1, r24	; 0x01
   18d64:	92 83       	std	Z+2, r25	; 0x02
   18d66:	a3 83       	std	Z+3, r26	; 0x03
   18d68:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18d6c:	8c a1       	ldd	r24, Y+36	; 0x24
   18d6e:	9d a1       	ldd	r25, Y+37	; 0x25
   18d70:	ed b7       	in	r30, 0x3d	; 61
   18d72:	fe b7       	in	r31, 0x3e	; 62
   18d74:	95 83       	std	Z+5, r25	; 0x05
   18d76:	84 83       	std	Z+4, r24	; 0x04
   18d78:	84 e0       	ldi	r24, 0x04	; 4
   18d7a:	92 e4       	ldi	r25, 0x42	; 66
   18d7c:	a0 e0       	ldi	r26, 0x00	; 0
   18d7e:	81 83       	std	Z+1, r24	; 0x01
   18d80:	92 83       	std	Z+2, r25	; 0x02
   18d82:	a3 83       	std	Z+3, r26	; 0x03
   18d84:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18d88:	8d a5       	ldd	r24, Y+45	; 0x2d
   18d8a:	9e a5       	ldd	r25, Y+46	; 0x2e
   18d8c:	af a5       	ldd	r26, Y+47	; 0x2f
   18d8e:	b8 a9       	ldd	r27, Y+48	; 0x30
   18d90:	ed b7       	in	r30, 0x3d	; 61
   18d92:	fe b7       	in	r31, 0x3e	; 62
   18d94:	84 83       	std	Z+4, r24	; 0x04
   18d96:	95 83       	std	Z+5, r25	; 0x05
   18d98:	a6 83       	std	Z+6, r26	; 0x06
   18d9a:	b7 83       	std	Z+7, r27	; 0x07
   18d9c:	87 ee       	ldi	r24, 0xE7	; 231
   18d9e:	91 e4       	ldi	r25, 0x41	; 65
   18da0:	a0 e0       	ldi	r26, 0x00	; 0
   18da2:	81 83       	std	Z+1, r24	; 0x01
   18da4:	92 83       	std	Z+2, r25	; 0x02
   18da6:	a3 83       	std	Z+3, r26	; 0x03
   18da8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18dac:	8d a9       	ldd	r24, Y+53	; 0x35
   18dae:	9e a9       	ldd	r25, Y+54	; 0x36
   18db0:	af a9       	ldd	r26, Y+55	; 0x37
   18db2:	b8 ad       	ldd	r27, Y+56	; 0x38
   18db4:	ed b7       	in	r30, 0x3d	; 61
   18db6:	fe b7       	in	r31, 0x3e	; 62
   18db8:	84 83       	std	Z+4, r24	; 0x04
   18dba:	95 83       	std	Z+5, r25	; 0x05
   18dbc:	a6 83       	std	Z+6, r26	; 0x06
   18dbe:	b7 83       	std	Z+7, r27	; 0x07
   18dc0:	8a ec       	ldi	r24, 0xCA	; 202
   18dc2:	91 e4       	ldi	r25, 0x41	; 65
   18dc4:	a0 e0       	ldi	r26, 0x00	; 0
   18dc6:	81 83       	std	Z+1, r24	; 0x01
   18dc8:	92 83       	std	Z+2, r25	; 0x02
   18dca:	a3 83       	std	Z+3, r26	; 0x03
   18dcc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18dd0:	89 a9       	ldd	r24, Y+49	; 0x31
   18dd2:	9a a9       	ldd	r25, Y+50	; 0x32
   18dd4:	ed b7       	in	r30, 0x3d	; 61
   18dd6:	fe b7       	in	r31, 0x3e	; 62
   18dd8:	95 83       	std	Z+5, r25	; 0x05
   18dda:	84 83       	std	Z+4, r24	; 0x04
   18ddc:	8e ea       	ldi	r24, 0xAE	; 174
   18dde:	91 e4       	ldi	r25, 0x41	; 65
   18de0:	a0 e0       	ldi	r26, 0x00	; 0
   18de2:	81 83       	std	Z+1, r24	; 0x01
   18de4:	92 83       	std	Z+2, r25	; 0x02
   18de6:	a3 83       	std	Z+3, r26	; 0x03
   18de8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18dec:	89 ad       	ldd	r24, Y+57	; 0x39
   18dee:	9a ad       	ldd	r25, Y+58	; 0x3a
   18df0:	ed b7       	in	r30, 0x3d	; 61
   18df2:	fe b7       	in	r31, 0x3e	; 62
   18df4:	95 83       	std	Z+5, r25	; 0x05
   18df6:	84 83       	std	Z+4, r24	; 0x04
   18df8:	82 e9       	ldi	r24, 0x92	; 146
   18dfa:	91 e4       	ldi	r25, 0x41	; 65
   18dfc:	a0 e0       	ldi	r26, 0x00	; 0
   18dfe:	81 83       	std	Z+1, r24	; 0x01
   18e00:	92 83       	std	Z+2, r25	; 0x02
   18e02:	a3 83       	std	Z+3, r26	; 0x03
   18e04:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18e08:	ce 01       	movw	r24, r28
   18e0a:	87 5b       	subi	r24, 0xB7	; 183
   18e0c:	9f 4f       	sbci	r25, 0xFF	; 255
   18e0e:	ab de       	rcall	.-682    	; 0x18b66 <lif_lifbcd2timestr>
   18e10:	ed b7       	in	r30, 0x3d	; 61
   18e12:	fe b7       	in	r31, 0x3e	; 62
   18e14:	95 83       	std	Z+5, r25	; 0x05
   18e16:	84 83       	std	Z+4, r24	; 0x04
   18e18:	88 e7       	ldi	r24, 0x78	; 120
   18e1a:	91 e4       	ldi	r25, 0x41	; 65
   18e1c:	a0 e0       	ldi	r26, 0x00	; 0
   18e1e:	81 83       	std	Z+1, r24	; 0x01
   18e20:	92 83       	std	Z+2, r25	; 0x02
   18e22:	a3 83       	std	Z+3, r26	; 0x03
   18e24:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18e28:	ce 01       	movw	r24, r28
   18e2a:	81 5b       	subi	r24, 0xB1	; 177
   18e2c:	9f 4f       	sbci	r25, 0xFF	; 255
   18e2e:	ed b7       	in	r30, 0x3d	; 61
   18e30:	fe b7       	in	r31, 0x3e	; 62
   18e32:	95 83       	std	Z+5, r25	; 0x05
   18e34:	84 83       	std	Z+4, r24	; 0x04
   18e36:	8e e5       	ldi	r24, 0x5E	; 94
   18e38:	91 e4       	ldi	r25, 0x41	; 65
   18e3a:	a0 e0       	ldi	r26, 0x00	; 0
   18e3c:	81 83       	std	Z+1, r24	; 0x01
   18e3e:	92 83       	std	Z+2, r25	; 0x02
   18e40:	a3 83       	std	Z+3, r26	; 0x03
   18e42:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18e46:	fe 01       	movw	r30, r28
   18e48:	e6 5a       	subi	r30, 0xA6	; 166
   18e4a:	ff 4f       	sbci	r31, 0xFF	; 255
   18e4c:	80 81       	ld	r24, Z
   18e4e:	91 81       	ldd	r25, Z+1	; 0x01
   18e50:	ed b7       	in	r30, 0x3d	; 61
   18e52:	fe b7       	in	r31, 0x3e	; 62
   18e54:	95 83       	std	Z+5, r25	; 0x05
   18e56:	84 83       	std	Z+4, r24	; 0x04
   18e58:	82 e4       	ldi	r24, 0x42	; 66
   18e5a:	91 e4       	ldi	r25, 0x41	; 65
   18e5c:	a0 e0       	ldi	r26, 0x00	; 0
   18e5e:	81 83       	std	Z+1, r24	; 0x01
   18e60:	92 83       	std	Z+2, r25	; 0x02
   18e62:	a3 83       	std	Z+3, r26	; 0x03
   18e64:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18e68:	fe 01       	movw	r30, r28
   18e6a:	e6 59       	subi	r30, 0x96	; 150
   18e6c:	ff 4f       	sbci	r31, 0xFF	; 255
   18e6e:	80 81       	ld	r24, Z
   18e70:	91 81       	ldd	r25, Z+1	; 0x01
   18e72:	ed b7       	in	r30, 0x3d	; 61
   18e74:	fe b7       	in	r31, 0x3e	; 62
   18e76:	95 83       	std	Z+5, r25	; 0x05
   18e78:	84 83       	std	Z+4, r24	; 0x04
   18e7a:	86 e2       	ldi	r24, 0x26	; 38
   18e7c:	91 e4       	ldi	r25, 0x41	; 65
   18e7e:	a0 e0       	ldi	r26, 0x00	; 0
   18e80:	81 83       	std	Z+1, r24	; 0x01
   18e82:	92 83       	std	Z+2, r25	; 0x02
   18e84:	a3 83       	std	Z+3, r26	; 0x03
   18e86:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18e8a:	fe 01       	movw	r30, r28
   18e8c:	e4 5a       	subi	r30, 0xA4	; 164
   18e8e:	ff 4f       	sbci	r31, 0xFF	; 255
   18e90:	80 81       	ld	r24, Z
   18e92:	91 81       	ldd	r25, Z+1	; 0x01
   18e94:	a2 81       	ldd	r26, Z+2	; 0x02
   18e96:	b3 81       	ldd	r27, Z+3	; 0x03
   18e98:	ed b7       	in	r30, 0x3d	; 61
   18e9a:	fe b7       	in	r31, 0x3e	; 62
   18e9c:	84 83       	std	Z+4, r24	; 0x04
   18e9e:	95 83       	std	Z+5, r25	; 0x05
   18ea0:	a6 83       	std	Z+6, r26	; 0x06
   18ea2:	b7 83       	std	Z+7, r27	; 0x07
   18ea4:	89 e0       	ldi	r24, 0x09	; 9
   18ea6:	91 e4       	ldi	r25, 0x41	; 65
   18ea8:	a0 e0       	ldi	r26, 0x00	; 0
   18eaa:	81 83       	std	Z+1, r24	; 0x01
   18eac:	92 83       	std	Z+2, r25	; 0x02
   18eae:	a3 83       	std	Z+3, r26	; 0x03
   18eb0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18eb4:	fe 01       	movw	r30, r28
   18eb6:	e0 5a       	subi	r30, 0xA0	; 160
   18eb8:	ff 4f       	sbci	r31, 0xFF	; 255
   18eba:	80 81       	ld	r24, Z
   18ebc:	91 81       	ldd	r25, Z+1	; 0x01
   18ebe:	a2 81       	ldd	r26, Z+2	; 0x02
   18ec0:	b3 81       	ldd	r27, Z+3	; 0x03
   18ec2:	ed b7       	in	r30, 0x3d	; 61
   18ec4:	fe b7       	in	r31, 0x3e	; 62
   18ec6:	84 83       	std	Z+4, r24	; 0x04
   18ec8:	95 83       	std	Z+5, r25	; 0x05
   18eca:	a6 83       	std	Z+6, r26	; 0x06
   18ecc:	b7 83       	std	Z+7, r27	; 0x07
   18ece:	8c ee       	ldi	r24, 0xEC	; 236
   18ed0:	90 e4       	ldi	r25, 0x40	; 64
   18ed2:	a0 e0       	ldi	r26, 0x00	; 0
   18ed4:	81 83       	std	Z+1, r24	; 0x01
   18ed6:	92 83       	std	Z+2, r25	; 0x02
   18ed8:	a3 83       	std	Z+3, r26	; 0x03
   18eda:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18ede:	fe 01       	movw	r30, r28
   18ee0:	e4 59       	subi	r30, 0x94	; 148
   18ee2:	ff 4f       	sbci	r31, 0xFF	; 255
   18ee4:	80 81       	ld	r24, Z
   18ee6:	91 81       	ldd	r25, Z+1	; 0x01
   18ee8:	a0 e0       	ldi	r26, 0x00	; 0
   18eea:	b0 e0       	ldi	r27, 0x00	; 0
   18eec:	ed b7       	in	r30, 0x3d	; 61
   18eee:	fe b7       	in	r31, 0x3e	; 62
   18ef0:	84 83       	std	Z+4, r24	; 0x04
   18ef2:	95 83       	std	Z+5, r25	; 0x05
   18ef4:	a6 83       	std	Z+6, r26	; 0x06
   18ef6:	b7 83       	std	Z+7, r27	; 0x07
   18ef8:	8f ec       	ldi	r24, 0xCF	; 207
   18efa:	90 e4       	ldi	r25, 0x40	; 64
   18efc:	a0 e0       	ldi	r26, 0x00	; 0
   18efe:	81 83       	std	Z+1, r24	; 0x01
   18f00:	92 83       	std	Z+2, r25	; 0x02
   18f02:	a3 83       	std	Z+3, r26	; 0x03
   18f04:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18f08:	fe 01       	movw	r30, r28
   18f0a:	e2 59       	subi	r30, 0x92	; 146
   18f0c:	ff 4f       	sbci	r31, 0xFF	; 255
   18f0e:	80 81       	ld	r24, Z
   18f10:	91 81       	ldd	r25, Z+1	; 0x01
   18f12:	ed b7       	in	r30, 0x3d	; 61
   18f14:	fe b7       	in	r31, 0x3e	; 62
   18f16:	95 83       	std	Z+5, r25	; 0x05
   18f18:	84 83       	std	Z+4, r24	; 0x04
   18f1a:	83 eb       	ldi	r24, 0xB3	; 179
   18f1c:	90 e4       	ldi	r25, 0x40	; 64
   18f1e:	a0 e0       	ldi	r26, 0x00	; 0
   18f20:	81 83       	std	Z+1, r24	; 0x01
   18f22:	92 83       	std	Z+2, r25	; 0x02
   18f24:	a3 83       	std	Z+3, r26	; 0x03
   18f26:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18f2a:	ce 01       	movw	r24, r28
   18f2c:	8c 59       	subi	r24, 0x9C	; 156
   18f2e:	9f 4f       	sbci	r25, 0xFF	; 255
   18f30:	1a de       	rcall	.-972    	; 0x18b66 <lif_lifbcd2timestr>
   18f32:	ed b7       	in	r30, 0x3d	; 61
   18f34:	fe b7       	in	r31, 0x3e	; 62
   18f36:	95 83       	std	Z+5, r25	; 0x05
   18f38:	84 83       	std	Z+4, r24	; 0x04
   18f3a:	89 e9       	ldi	r24, 0x99	; 153
   18f3c:	90 e4       	ldi	r25, 0x40	; 64
   18f3e:	a0 e0       	ldi	r26, 0x00	; 0
   18f40:	81 83       	std	Z+1, r24	; 0x01
   18f42:	92 83       	std	Z+2, r25	; 0x02
   18f44:	a3 83       	std	Z+3, r26	; 0x03
   18f46:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18f4a:	87 e9       	ldi	r24, 0x97	; 151
   18f4c:	90 e4       	ldi	r25, 0x40	; 64
   18f4e:	a0 e0       	ldi	r26, 0x00	; 0
   18f50:	ed b7       	in	r30, 0x3d	; 61
   18f52:	fe b7       	in	r31, 0x3e	; 62
   18f54:	81 83       	std	Z+1, r24	; 0x01
   18f56:	92 83       	std	Z+2, r25	; 0x02
   18f58:	a3 83       	std	Z+3, r26	; 0x03
   18f5a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18f5e:	cd b7       	in	r28, 0x3d	; 61
   18f60:	de b7       	in	r29, 0x3e	; 62
   18f62:	27 96       	adiw	r28, 0x07	; 7
   18f64:	e2 e0       	ldi	r30, 0x02	; 2
   18f66:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x20>

00018f6a <lif_check_volume>:
   18f6a:	0f 93       	push	r16
   18f6c:	1f 93       	push	r17
   18f6e:	cf 93       	push	r28
   18f70:	df 93       	push	r29
   18f72:	ad b7       	in	r26, 0x3d	; 61
   18f74:	be b7       	in	r27, 0x3e	; 62
   18f76:	17 97       	sbiw	r26, 0x07	; 7
   18f78:	0f b6       	in	r0, 0x3f	; 63
   18f7a:	f8 94       	cli
   18f7c:	be bf       	out	0x3e, r27	; 62
   18f7e:	0f be       	out	0x3f, r0	; 63
   18f80:	ad bf       	out	0x3d, r26	; 61
   18f82:	ec 01       	movw	r28, r24
   18f84:	86 96       	adiw	r24, 0x26	; 38
   18f86:	e0 da       	rcall	.-2624   	; 0x18548 <lif_checkname>
   18f88:	89 2b       	or	r24, r25
   18f8a:	89 f4       	brne	.+34     	; 0x18fae <lif_check_volume+0x44>
   18f8c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18f90:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18f94:	92 ff       	sbrs	r25, 2
   18f96:	0e c0       	rjmp	.+28     	; 0x18fb4 <lif_check_volume+0x4a>
   18f98:	88 e7       	ldi	r24, 0x78	; 120
   18f9a:	90 e4       	ldi	r25, 0x40	; 64
   18f9c:	a0 e0       	ldi	r26, 0x00	; 0
   18f9e:	ed b7       	in	r30, 0x3d	; 61
   18fa0:	fe b7       	in	r31, 0x3e	; 62
   18fa2:	81 83       	std	Z+1, r24	; 0x01
   18fa4:	92 83       	std	Z+2, r25	; 0x02
   18fa6:	a3 83       	std	Z+3, r26	; 0x03
   18fa8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18fac:	03 c0       	rjmp	.+6      	; 0x18fb4 <lif_check_volume+0x4a>
   18fae:	81 e0       	ldi	r24, 0x01	; 1
   18fb0:	90 e0       	ldi	r25, 0x00	; 0
   18fb2:	02 c0       	rjmp	.+4      	; 0x18fb8 <lif_check_volume+0x4e>
   18fb4:	80 e0       	ldi	r24, 0x00	; 0
   18fb6:	90 e0       	ldi	r25, 0x00	; 0
   18fb8:	29 a9       	ldd	r18, Y+49	; 0x31
   18fba:	3a a9       	ldd	r19, Y+50	; 0x32
   18fbc:	21 15       	cp	r18, r1
   18fbe:	f0 e1       	ldi	r31, 0x10	; 16
   18fc0:	3f 07       	cpc	r19, r31
   18fc2:	a1 f0       	breq	.+40     	; 0x18fec <lif_check_volume+0x82>
   18fc4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18fc8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18fcc:	92 ff       	sbrs	r25, 2
   18fce:	0c c0       	rjmp	.+24     	; 0x18fe8 <lif_check_volume+0x7e>
   18fd0:	ed b7       	in	r30, 0x3d	; 61
   18fd2:	fe b7       	in	r31, 0x3e	; 62
   18fd4:	35 83       	std	Z+5, r19	; 0x05
   18fd6:	24 83       	std	Z+4, r18	; 0x04
   18fd8:	8f e3       	ldi	r24, 0x3F	; 63
   18fda:	90 e4       	ldi	r25, 0x40	; 64
   18fdc:	a0 e0       	ldi	r26, 0x00	; 0
   18fde:	81 83       	std	Z+1, r24	; 0x01
   18fe0:	92 83       	std	Z+2, r25	; 0x02
   18fe2:	a3 83       	std	Z+3, r26	; 0x03
   18fe4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   18fe8:	80 e0       	ldi	r24, 0x00	; 0
   18fea:	90 e0       	ldi	r25, 0x00	; 0
   18fec:	29 ad       	ldd	r18, Y+57	; 0x39
   18fee:	3a ad       	ldd	r19, Y+58	; 0x3a
   18ff0:	22 30       	cpi	r18, 0x02	; 2
   18ff2:	31 05       	cpc	r19, r1
   18ff4:	a0 f0       	brcs	.+40     	; 0x1901e <lif_check_volume+0xb4>
   18ff6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18ffa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18ffe:	92 ff       	sbrs	r25, 2
   19000:	0c c0       	rjmp	.+24     	; 0x1901a <lif_check_volume+0xb0>
   19002:	ed b7       	in	r30, 0x3d	; 61
   19004:	fe b7       	in	r31, 0x3e	; 62
   19006:	35 83       	std	Z+5, r19	; 0x05
   19008:	24 83       	std	Z+4, r18	; 0x04
   1900a:	87 e2       	ldi	r24, 0x27	; 39
   1900c:	90 e4       	ldi	r25, 0x40	; 64
   1900e:	a0 e0       	ldi	r26, 0x00	; 0
   19010:	81 83       	std	Z+1, r24	; 0x01
   19012:	92 83       	std	Z+2, r25	; 0x02
   19014:	a3 83       	std	Z+3, r26	; 0x03
   19016:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1901a:	80 e0       	ldi	r24, 0x00	; 0
   1901c:	90 e0       	ldi	r25, 0x00	; 0
   1901e:	2b a9       	ldd	r18, Y+51	; 0x33
   19020:	3c a9       	ldd	r19, Y+52	; 0x34
   19022:	23 2b       	or	r18, r19
   19024:	91 f0       	breq	.+36     	; 0x1904a <lif_check_volume+0xe0>
   19026:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1902a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1902e:	92 ff       	sbrs	r25, 2
   19030:	0a c0       	rjmp	.+20     	; 0x19046 <lif_check_volume+0xdc>
   19032:	8e ee       	ldi	r24, 0xEE	; 238
   19034:	9f e3       	ldi	r25, 0x3F	; 63
   19036:	a0 e0       	ldi	r26, 0x00	; 0
   19038:	ed b7       	in	r30, 0x3d	; 61
   1903a:	fe b7       	in	r31, 0x3e	; 62
   1903c:	81 83       	std	Z+1, r24	; 0x01
   1903e:	92 83       	std	Z+2, r25	; 0x02
   19040:	a3 83       	std	Z+3, r26	; 0x03
   19042:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   19046:	80 e0       	ldi	r24, 0x00	; 0
   19048:	90 e0       	ldi	r25, 0x00	; 0
   1904a:	2b ad       	ldd	r18, Y+59	; 0x3b
   1904c:	3c ad       	ldd	r19, Y+60	; 0x3c
   1904e:	23 2b       	or	r18, r19
   19050:	91 f0       	breq	.+36     	; 0x19076 <lif_check_volume+0x10c>
   19052:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19056:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1905a:	92 ff       	sbrs	r25, 2
   1905c:	0a c0       	rjmp	.+20     	; 0x19072 <lif_check_volume+0x108>
   1905e:	85 eb       	ldi	r24, 0xB5	; 181
   19060:	9f e3       	ldi	r25, 0x3F	; 63
   19062:	a0 e0       	ldi	r26, 0x00	; 0
   19064:	ed b7       	in	r30, 0x3d	; 61
   19066:	fe b7       	in	r31, 0x3e	; 62
   19068:	81 83       	std	Z+1, r24	; 0x01
   1906a:	92 83       	std	Z+2, r25	; 0x02
   1906c:	a3 83       	std	Z+3, r26	; 0x03
   1906e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   19072:	80 e0       	ldi	r24, 0x00	; 0
   19074:	90 e0       	ldi	r25, 0x00	; 0
   19076:	4d a5       	ldd	r20, Y+45	; 0x2d
   19078:	5e a5       	ldd	r21, Y+46	; 0x2e
   1907a:	6f a5       	ldd	r22, Y+47	; 0x2f
   1907c:	78 a9       	ldd	r23, Y+48	; 0x30
   1907e:	45 2b       	or	r20, r21
   19080:	46 2b       	or	r20, r22
   19082:	47 2b       	or	r20, r23
   19084:	b1 f4       	brne	.+44     	; 0x190b2 <lif_check_volume+0x148>
   19086:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1908a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1908e:	92 ff       	sbrs	r25, 2
   19090:	0e c0       	rjmp	.+28     	; 0x190ae <lif_check_volume+0x144>
   19092:	ed b7       	in	r30, 0x3d	; 61
   19094:	fe b7       	in	r31, 0x3e	; 62
   19096:	14 82       	std	Z+4, r1	; 0x04
   19098:	15 82       	std	Z+5, r1	; 0x05
   1909a:	16 82       	std	Z+6, r1	; 0x06
   1909c:	17 82       	std	Z+7, r1	; 0x07
   1909e:	80 e9       	ldi	r24, 0x90	; 144
   190a0:	9f e3       	ldi	r25, 0x3F	; 63
   190a2:	a0 e0       	ldi	r26, 0x00	; 0
   190a4:	81 83       	std	Z+1, r24	; 0x01
   190a6:	92 83       	std	Z+2, r25	; 0x02
   190a8:	a3 83       	std	Z+3, r26	; 0x03
   190aa:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   190ae:	80 e0       	ldi	r24, 0x00	; 0
   190b0:	90 e0       	ldi	r25, 0x00	; 0
   190b2:	4d a9       	ldd	r20, Y+53	; 0x35
   190b4:	5e a9       	ldd	r21, Y+54	; 0x36
   190b6:	6f a9       	ldd	r22, Y+55	; 0x37
   190b8:	78 ad       	ldd	r23, Y+56	; 0x38
   190ba:	45 2b       	or	r20, r21
   190bc:	46 2b       	or	r20, r22
   190be:	47 2b       	or	r20, r23
   190c0:	91 f4       	brne	.+36     	; 0x190e6 <lif_check_volume+0x17c>
   190c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   190c6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   190ca:	92 ff       	sbrs	r25, 2
   190cc:	0a c0       	rjmp	.+20     	; 0x190e2 <lif_check_volume+0x178>
   190ce:	81 e6       	ldi	r24, 0x61	; 97
   190d0:	9f e3       	ldi	r25, 0x3F	; 63
   190d2:	a0 e0       	ldi	r26, 0x00	; 0
   190d4:	ed b7       	in	r30, 0x3d	; 61
   190d6:	fe b7       	in	r31, 0x3e	; 62
   190d8:	81 83       	std	Z+1, r24	; 0x01
   190da:	92 83       	std	Z+2, r25	; 0x02
   190dc:	a3 83       	std	Z+3, r26	; 0x03
   190de:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   190e2:	80 e0       	ldi	r24, 0x00	; 0
   190e4:	90 e0       	ldi	r25, 0x00	; 0
   190e6:	0d a5       	ldd	r16, Y+45	; 0x2d
   190e8:	1e a5       	ldd	r17, Y+46	; 0x2e
   190ea:	2f a5       	ldd	r18, Y+47	; 0x2f
   190ec:	38 a9       	ldd	r19, Y+48	; 0x30
   190ee:	4d a9       	ldd	r20, Y+53	; 0x35
   190f0:	5e a9       	ldd	r21, Y+54	; 0x36
   190f2:	6f a9       	ldd	r22, Y+55	; 0x37
   190f4:	78 ad       	ldd	r23, Y+56	; 0x38
   190f6:	40 0f       	add	r20, r16
   190f8:	51 1f       	adc	r21, r17
   190fa:	62 1f       	adc	r22, r18
   190fc:	73 1f       	adc	r23, r19
   190fe:	0c 81       	ldd	r16, Y+4	; 0x04
   19100:	1d 81       	ldd	r17, Y+5	; 0x05
   19102:	2e 81       	ldd	r18, Y+6	; 0x06
   19104:	3f 81       	ldd	r19, Y+7	; 0x07
   19106:	04 17       	cp	r16, r20
   19108:	15 07       	cpc	r17, r21
   1910a:	26 07       	cpc	r18, r22
   1910c:	37 07       	cpc	r19, r23
   1910e:	90 f4       	brcc	.+36     	; 0x19134 <lif_check_volume+0x1ca>
   19110:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19114:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19118:	92 ff       	sbrs	r25, 2
   1911a:	0a c0       	rjmp	.+20     	; 0x19130 <lif_check_volume+0x1c6>
   1911c:	85 e3       	ldi	r24, 0x35	; 53
   1911e:	9f e3       	ldi	r25, 0x3F	; 63
   19120:	a0 e0       	ldi	r26, 0x00	; 0
   19122:	ed b7       	in	r30, 0x3d	; 61
   19124:	fe b7       	in	r31, 0x3e	; 62
   19126:	81 83       	std	Z+1, r24	; 0x01
   19128:	92 83       	std	Z+2, r25	; 0x02
   1912a:	a3 83       	std	Z+3, r26	; 0x03
   1912c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   19130:	80 e0       	ldi	r24, 0x00	; 0
   19132:	90 e0       	ldi	r25, 0x00	; 0
   19134:	cd b7       	in	r28, 0x3d	; 61
   19136:	de b7       	in	r29, 0x3e	; 62
   19138:	27 96       	adiw	r28, 0x07	; 7
   1913a:	e4 e0       	ldi	r30, 0x04	; 4
   1913c:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0x1c>

00019140 <lif_check_dir>:
   19140:	a5 e1       	ldi	r26, 0x15	; 21
   19142:	b0 e0       	ldi	r27, 0x00	; 0
   19144:	e6 ea       	ldi	r30, 0xA6	; 166
   19146:	f8 ec       	ldi	r31, 0xC8	; 200
   19148:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
   1914c:	6c 01       	movw	r12, r24
   1914e:	2a e5       	ldi	r18, 0x5A	; 90
   19150:	c2 0e       	add	r12, r18
   19152:	d1 1c       	adc	r13, r1
   19154:	f6 01       	movw	r30, r12
   19156:	20 81       	ld	r18, Z
   19158:	31 81       	ldd	r19, Z+1	; 0x01
   1915a:	21 50       	subi	r18, 0x01	; 1
   1915c:	31 09       	sbc	r19, r1
   1915e:	2e 3f       	cpi	r18, 0xFE	; 254
   19160:	3f 4f       	sbci	r19, 0xFF	; 255
   19162:	08 f0       	brcs	.+2      	; 0x19166 <lif_check_dir+0x26>
   19164:	9a c1       	rjmp	.+820    	; 0x1949a <lif_check_dir+0x35a>
   19166:	9d 8b       	std	Y+21, r25	; 0x15
   19168:	8c 8b       	std	Y+20, r24	; 0x14
   1916a:	7c 01       	movw	r14, r24
   1916c:	2f e4       	ldi	r18, 0x4F	; 79
   1916e:	e2 0e       	add	r14, r18
   19170:	f1 1c       	adc	r15, r1
   19172:	c7 01       	movw	r24, r14
   19174:	e9 d9       	rcall	.-3118   	; 0x18548 <lif_checkname>
   19176:	89 2b       	or	r24, r25
   19178:	99 f4       	brne	.+38     	; 0x191a0 <lif_check_dir+0x60>
   1917a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1917e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19182:	92 ff       	sbrs	r25, 2
   19184:	0f c0       	rjmp	.+30     	; 0x191a4 <lif_check_dir+0x64>
   19186:	ed b7       	in	r30, 0x3d	; 61
   19188:	fe b7       	in	r31, 0x3e	; 62
   1918a:	f5 82       	std	Z+5, r15	; 0x05
   1918c:	e4 82       	std	Z+4, r14	; 0x04
   1918e:	84 e1       	ldi	r24, 0x14	; 20
   19190:	9f e3       	ldi	r25, 0x3F	; 63
   19192:	a0 e0       	ldi	r26, 0x00	; 0
   19194:	81 83       	std	Z+1, r24	; 0x01
   19196:	92 83       	std	Z+2, r25	; 0x02
   19198:	a3 83       	std	Z+3, r26	; 0x03
   1919a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1919e:	02 c0       	rjmp	.+4      	; 0x191a4 <lif_check_dir+0x64>
   191a0:	01 e0       	ldi	r16, 0x01	; 1
   191a2:	01 c0       	rjmp	.+2      	; 0x191a6 <lif_check_dir+0x66>
   191a4:	00 e0       	ldi	r16, 0x00	; 0
   191a6:	10 e0       	ldi	r17, 0x00	; 0
   191a8:	ec 89       	ldd	r30, Y+20	; 0x14
   191aa:	fd 89       	ldd	r31, Y+21	; 0x15
   191ac:	84 85       	ldd	r24, Z+12	; 0x0c
   191ae:	95 85       	ldd	r25, Z+13	; 0x0d
   191b0:	a6 85       	ldd	r26, Z+14	; 0x0e
   191b2:	b7 85       	ldd	r27, Z+15	; 0x0f
   191b4:	00 97       	sbiw	r24, 0x00	; 0
   191b6:	a1 05       	cpc	r26, r1
   191b8:	b1 05       	cpc	r27, r1
   191ba:	39 f1       	breq	.+78     	; 0x1920a <lif_check_dir+0xca>
   191bc:	e4 5a       	subi	r30, 0xA4	; 164
   191be:	ff 4f       	sbci	r31, 0xFF	; 255
   191c0:	40 81       	ld	r20, Z
   191c2:	51 81       	ldd	r21, Z+1	; 0x01
   191c4:	62 81       	ldd	r22, Z+2	; 0x02
   191c6:	73 81       	ldd	r23, Z+3	; 0x03
   191c8:	48 17       	cp	r20, r24
   191ca:	59 07       	cpc	r21, r25
   191cc:	6a 07       	cpc	r22, r26
   191ce:	7b 07       	cpc	r23, r27
   191d0:	e0 f4       	brcc	.+56     	; 0x1920a <lif_check_dir+0xca>
   191d2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   191d6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   191da:	32 ff       	sbrs	r19, 2
   191dc:	14 c0       	rjmp	.+40     	; 0x19206 <lif_check_dir+0xc6>
   191de:	ed b7       	in	r30, 0x3d	; 61
   191e0:	fe b7       	in	r31, 0x3e	; 62
   191e2:	82 87       	std	Z+10, r24	; 0x0a
   191e4:	93 87       	std	Z+11, r25	; 0x0b
   191e6:	a4 87       	std	Z+12, r26	; 0x0c
   191e8:	b5 87       	std	Z+13, r27	; 0x0d
   191ea:	46 83       	std	Z+6, r20	; 0x06
   191ec:	57 83       	std	Z+7, r21	; 0x07
   191ee:	60 87       	std	Z+8, r22	; 0x08
   191f0:	71 87       	std	Z+9, r23	; 0x09
   191f2:	f5 82       	std	Z+5, r15	; 0x05
   191f4:	e4 82       	std	Z+4, r14	; 0x04
   191f6:	80 ed       	ldi	r24, 0xD0	; 208
   191f8:	9e e3       	ldi	r25, 0x3E	; 62
   191fa:	a0 e0       	ldi	r26, 0x00	; 0
   191fc:	81 83       	std	Z+1, r24	; 0x01
   191fe:	92 83       	std	Z+2, r25	; 0x02
   19200:	a3 83       	std	Z+3, r26	; 0x03
   19202:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   19206:	00 e0       	ldi	r16, 0x00	; 0
   19208:	10 e0       	ldi	r17, 0x00	; 0
   1920a:	ec 89       	ldd	r30, Y+20	; 0x14
   1920c:	fd 89       	ldd	r31, Y+21	; 0x15
   1920e:	44 81       	ldd	r20, Z+4	; 0x04
   19210:	55 81       	ldd	r21, Z+5	; 0x05
   19212:	66 81       	ldd	r22, Z+6	; 0x06
   19214:	77 81       	ldd	r23, Z+7	; 0x07
   19216:	41 15       	cp	r20, r1
   19218:	51 05       	cpc	r21, r1
   1921a:	61 05       	cpc	r22, r1
   1921c:	71 05       	cpc	r23, r1
   1921e:	99 f1       	breq	.+102    	; 0x19286 <lif_check_dir+0x146>
   19220:	e4 5a       	subi	r30, 0xA4	; 164
   19222:	ff 4f       	sbci	r31, 0xFF	; 255
   19224:	80 80       	ld	r8, Z
   19226:	91 80       	ldd	r9, Z+1	; 0x01
   19228:	a2 80       	ldd	r10, Z+2	; 0x02
   1922a:	b3 80       	ldd	r11, Z+3	; 0x03
   1922c:	ec 89       	ldd	r30, Y+20	; 0x14
   1922e:	fd 89       	ldd	r31, Y+21	; 0x15
   19230:	e0 5a       	subi	r30, 0xA0	; 160
   19232:	ff 4f       	sbci	r31, 0xFF	; 255
   19234:	80 81       	ld	r24, Z
   19236:	91 81       	ldd	r25, Z+1	; 0x01
   19238:	a2 81       	ldd	r26, Z+2	; 0x02
   1923a:	b3 81       	ldd	r27, Z+3	; 0x03
   1923c:	88 0d       	add	r24, r8
   1923e:	99 1d       	adc	r25, r9
   19240:	aa 1d       	adc	r26, r10
   19242:	bb 1d       	adc	r27, r11
   19244:	48 17       	cp	r20, r24
   19246:	59 07       	cpc	r21, r25
   19248:	6a 07       	cpc	r22, r26
   1924a:	7b 07       	cpc	r23, r27
   1924c:	e0 f4       	brcc	.+56     	; 0x19286 <lif_check_dir+0x146>
   1924e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19252:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19256:	32 ff       	sbrs	r19, 2
   19258:	14 c0       	rjmp	.+40     	; 0x19282 <lif_check_dir+0x142>
   1925a:	ed b7       	in	r30, 0x3d	; 61
   1925c:	fe b7       	in	r31, 0x3e	; 62
   1925e:	42 87       	std	Z+10, r20	; 0x0a
   19260:	53 87       	std	Z+11, r21	; 0x0b
   19262:	64 87       	std	Z+12, r22	; 0x0c
   19264:	75 87       	std	Z+13, r23	; 0x0d
   19266:	86 83       	std	Z+6, r24	; 0x06
   19268:	97 83       	std	Z+7, r25	; 0x07
   1926a:	a0 87       	std	Z+8, r26	; 0x08
   1926c:	b1 87       	std	Z+9, r27	; 0x09
   1926e:	f5 82       	std	Z+5, r15	; 0x05
   19270:	e4 82       	std	Z+4, r14	; 0x04
   19272:	8f e8       	ldi	r24, 0x8F	; 143
   19274:	9e e3       	ldi	r25, 0x3E	; 62
   19276:	a0 e0       	ldi	r26, 0x00	; 0
   19278:	81 83       	std	Z+1, r24	; 0x01
   1927a:	92 83       	std	Z+2, r25	; 0x02
   1927c:	a3 83       	std	Z+3, r26	; 0x03
   1927e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   19282:	00 e0       	ldi	r16, 0x00	; 0
   19284:	10 e0       	ldi	r17, 0x00	; 0
   19286:	ec 89       	ldd	r30, Y+20	; 0x14
   19288:	fd 89       	ldd	r31, Y+21	; 0x15
   1928a:	e6 59       	subi	r30, 0x96	; 150
   1928c:	ff 4f       	sbci	r31, 0xFF	; 255
   1928e:	80 81       	ld	r24, Z
   19290:	91 81       	ldd	r25, Z+1	; 0x01
   19292:	81 30       	cpi	r24, 0x01	; 1
   19294:	f0 e8       	ldi	r31, 0x80	; 128
   19296:	9f 07       	cpc	r25, r31
   19298:	b1 f0       	breq	.+44     	; 0x192c6 <lif_check_dir+0x186>
   1929a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1929e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   192a2:	32 ff       	sbrs	r19, 2
   192a4:	0e c0       	rjmp	.+28     	; 0x192c2 <lif_check_dir+0x182>
   192a6:	ed b7       	in	r30, 0x3d	; 61
   192a8:	fe b7       	in	r31, 0x3e	; 62
   192aa:	97 83       	std	Z+7, r25	; 0x07
   192ac:	86 83       	std	Z+6, r24	; 0x06
   192ae:	f5 82       	std	Z+5, r15	; 0x05
   192b0:	e4 82       	std	Z+4, r14	; 0x04
   192b2:	81 e6       	ldi	r24, 0x61	; 97
   192b4:	9e e3       	ldi	r25, 0x3E	; 62
   192b6:	a0 e0       	ldi	r26, 0x00	; 0
   192b8:	81 83       	std	Z+1, r24	; 0x01
   192ba:	92 83       	std	Z+2, r25	; 0x02
   192bc:	a3 83       	std	Z+3, r26	; 0x03
   192be:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   192c2:	00 e0       	ldi	r16, 0x00	; 0
   192c4:	10 e0       	ldi	r17, 0x00	; 0
   192c6:	f6 01       	movw	r30, r12
   192c8:	80 81       	ld	r24, Z
   192ca:	91 81       	ldd	r25, Z+1	; 0x01
   192cc:	8c 7f       	andi	r24, 0xFC	; 252
   192ce:	80 31       	cpi	r24, 0x10	; 16
   192d0:	90 4e       	sbci	r25, 0xE0	; 224
   192d2:	09 f0       	breq	.+2      	; 0x192d6 <lif_check_dir+0x196>
   192d4:	b3 c0       	rjmp	.+358    	; 0x1943c <lif_check_dir+0x2fc>
   192d6:	cc 88       	ldd	r12, Y+20	; 0x14
   192d8:	dd 88       	ldd	r13, Y+21	; 0x15
   192da:	2c e6       	ldi	r18, 0x6C	; 108
   192dc:	c2 0e       	add	r12, r18
   192de:	d1 1c       	adc	r13, r1
   192e0:	f6 01       	movw	r30, r12
   192e2:	80 81       	ld	r24, Z
   192e4:	91 81       	ldd	r25, Z+1	; 0x01
   192e6:	00 97       	sbiw	r24, 0x00	; 0
   192e8:	09 f4       	brne	.+2      	; 0x192ec <lif_check_dir+0x1ac>
   192ea:	a8 c0       	rjmp	.+336    	; 0x1943c <lif_check_dir+0x2fc>
   192ec:	4c 01       	movw	r8, r24
   192ee:	a1 2c       	mov	r10, r1
   192f0:	b1 2c       	mov	r11, r1
   192f2:	77 27       	eor	r23, r23
   192f4:	6b 2d       	mov	r22, r11
   192f6:	5a 2d       	mov	r21, r10
   192f8:	49 2d       	mov	r20, r9
   192fa:	9c 01       	movw	r18, r24
   192fc:	33 27       	eor	r19, r19
   192fe:	3b 8b       	std	Y+19, r19	; 0x13
   19300:	2a 8b       	std	Y+18, r18	; 0x12
   19302:	db 01       	movw	r26, r22
   19304:	ca 01       	movw	r24, r20
   19306:	23 2b       	or	r18, r19
   19308:	19 f0       	breq	.+6      	; 0x19310 <lif_check_dir+0x1d0>
   1930a:	01 96       	adiw	r24, 0x01	; 1
   1930c:	a1 1d       	adc	r26, r1
   1930e:	b1 1d       	adc	r27, r1
   19310:	2c 88       	ldd	r2, Y+20	; 0x14
   19312:	3d 88       	ldd	r3, Y+21	; 0x15
   19314:	30 e6       	ldi	r19, 0x60	; 96
   19316:	23 0e       	add	r2, r19
   19318:	31 1c       	adc	r3, r1
   1931a:	f1 01       	movw	r30, r2
   1931c:	40 80       	ld	r4, Z
   1931e:	51 80       	ldd	r5, Z+1	; 0x01
   19320:	62 80       	ldd	r6, Z+2	; 0x02
   19322:	73 80       	ldd	r7, Z+3	; 0x03
   19324:	48 16       	cp	r4, r24
   19326:	59 06       	cpc	r5, r25
   19328:	6a 06       	cpc	r6, r26
   1932a:	7b 06       	cpc	r7, r27
   1932c:	40 f5       	brcc	.+80     	; 0x1937e <lif_check_dir+0x23e>
   1932e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19332:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19336:	32 ff       	sbrs	r19, 2
   19338:	20 c0       	rjmp	.+64     	; 0x1937a <lif_check_dir+0x23a>
   1933a:	2a 89       	ldd	r18, Y+18	; 0x12
   1933c:	3b 89       	ldd	r19, Y+19	; 0x13
   1933e:	23 2b       	or	r18, r19
   19340:	21 f0       	breq	.+8      	; 0x1934a <lif_check_dir+0x20a>
   19342:	4f 5f       	subi	r20, 0xFF	; 255
   19344:	5f 4f       	sbci	r21, 0xFF	; 255
   19346:	6f 4f       	sbci	r22, 0xFF	; 255
   19348:	7f 4f       	sbci	r23, 0xFF	; 255
   1934a:	ed b7       	in	r30, 0x3d	; 61
   1934c:	fe b7       	in	r31, 0x3e	; 62
   1934e:	46 86       	std	Z+14, r4	; 0x0e
   19350:	57 86       	std	Z+15, r5	; 0x0f
   19352:	60 8a       	std	Z+16, r6	; 0x10
   19354:	71 8a       	std	Z+17, r7	; 0x11
   19356:	42 87       	std	Z+10, r20	; 0x0a
   19358:	53 87       	std	Z+11, r21	; 0x0b
   1935a:	64 87       	std	Z+12, r22	; 0x0c
   1935c:	75 87       	std	Z+13, r23	; 0x0d
   1935e:	86 82       	std	Z+6, r8	; 0x06
   19360:	97 82       	std	Z+7, r9	; 0x07
   19362:	a0 86       	std	Z+8, r10	; 0x08
   19364:	b1 86       	std	Z+9, r11	; 0x09
   19366:	f5 82       	std	Z+5, r15	; 0x05
   19368:	e4 82       	std	Z+4, r14	; 0x04
   1936a:	86 e1       	ldi	r24, 0x16	; 22
   1936c:	9e e3       	ldi	r25, 0x3E	; 62
   1936e:	a0 e0       	ldi	r26, 0x00	; 0
   19370:	81 83       	std	Z+1, r24	; 0x01
   19372:	92 83       	std	Z+2, r25	; 0x02
   19374:	a3 83       	std	Z+3, r26	; 0x03
   19376:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1937a:	00 e0       	ldi	r16, 0x00	; 0
   1937c:	10 e0       	ldi	r17, 0x00	; 0
   1937e:	f6 01       	movw	r30, r12
   19380:	20 81       	ld	r18, Z
   19382:	31 81       	ldd	r19, Z+1	; 0x01
   19384:	a9 01       	movw	r20, r18
   19386:	60 e0       	ldi	r22, 0x00	; 0
   19388:	70 e0       	ldi	r23, 0x00	; 0
   1938a:	bb 27       	eor	r27, r27
   1938c:	a7 2f       	mov	r26, r23
   1938e:	96 2f       	mov	r25, r22
   19390:	85 2f       	mov	r24, r21
   19392:	f9 01       	movw	r30, r18
   19394:	ff 27       	eor	r31, r31
   19396:	fb 8b       	std	Y+19, r31	; 0x13
   19398:	ea 8b       	std	Y+18, r30	; 0x12
   1939a:	2c 01       	movw	r4, r24
   1939c:	3d 01       	movw	r6, r26
   1939e:	ef 2b       	or	r30, r31
   193a0:	29 f0       	breq	.+10     	; 0x193ac <lif_check_dir+0x26c>
   193a2:	ff ef       	ldi	r31, 0xFF	; 255
   193a4:	4f 1a       	sub	r4, r31
   193a6:	5f 0a       	sbc	r5, r31
   193a8:	6f 0a       	sbc	r6, r31
   193aa:	7f 0a       	sbc	r7, r31
   193ac:	f1 01       	movw	r30, r2
   193ae:	80 80       	ld	r8, Z
   193b0:	91 80       	ldd	r9, Z+1	; 0x01
   193b2:	a2 80       	ldd	r10, Z+2	; 0x02
   193b4:	b3 80       	ldd	r11, Z+3	; 0x03
   193b6:	48 14       	cp	r4, r8
   193b8:	59 04       	cpc	r5, r9
   193ba:	6a 04       	cpc	r6, r10
   193bc:	7b 04       	cpc	r7, r11
   193be:	28 f5       	brcc	.+74     	; 0x1940a <lif_check_dir+0x2ca>
   193c0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   193c4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   193c8:	32 ff       	sbrs	r19, 2
   193ca:	1f c0       	rjmp	.+62     	; 0x1940a <lif_check_dir+0x2ca>
   193cc:	2a 89       	ldd	r18, Y+18	; 0x12
   193ce:	3b 89       	ldd	r19, Y+19	; 0x13
   193d0:	23 2b       	or	r18, r19
   193d2:	19 f0       	breq	.+6      	; 0x193da <lif_check_dir+0x29a>
   193d4:	01 96       	adiw	r24, 0x01	; 1
   193d6:	a1 1d       	adc	r26, r1
   193d8:	b1 1d       	adc	r27, r1
   193da:	ed b7       	in	r30, 0x3d	; 61
   193dc:	fe b7       	in	r31, 0x3e	; 62
   193de:	86 86       	std	Z+14, r8	; 0x0e
   193e0:	97 86       	std	Z+15, r9	; 0x0f
   193e2:	a0 8a       	std	Z+16, r10	; 0x10
   193e4:	b1 8a       	std	Z+17, r11	; 0x11
   193e6:	82 87       	std	Z+10, r24	; 0x0a
   193e8:	93 87       	std	Z+11, r25	; 0x0b
   193ea:	a4 87       	std	Z+12, r26	; 0x0c
   193ec:	b5 87       	std	Z+13, r27	; 0x0d
   193ee:	46 83       	std	Z+6, r20	; 0x06
   193f0:	57 83       	std	Z+7, r21	; 0x07
   193f2:	60 87       	std	Z+8, r22	; 0x08
   193f4:	71 87       	std	Z+9, r23	; 0x09
   193f6:	f5 82       	std	Z+5, r15	; 0x05
   193f8:	e4 82       	std	Z+4, r14	; 0x04
   193fa:	8b ec       	ldi	r24, 0xCB	; 203
   193fc:	9d e3       	ldi	r25, 0x3D	; 61
   193fe:	a0 e0       	ldi	r26, 0x00	; 0
   19400:	81 83       	std	Z+1, r24	; 0x01
   19402:	92 83       	std	Z+2, r25	; 0x02
   19404:	a3 83       	std	Z+3, r26	; 0x03
   19406:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1940a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1940e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19412:	92 ff       	sbrs	r25, 2
   19414:	13 c0       	rjmp	.+38     	; 0x1943c <lif_check_dir+0x2fc>
   19416:	f6 01       	movw	r30, r12
   19418:	80 81       	ld	r24, Z
   1941a:	91 81       	ldd	r25, Z+1	; 0x01
   1941c:	89 2b       	or	r24, r25
   1941e:	71 f4       	brne	.+28     	; 0x1943c <lif_check_dir+0x2fc>
   19420:	ed b7       	in	r30, 0x3d	; 61
   19422:	fe b7       	in	r31, 0x3e	; 62
   19424:	f5 82       	std	Z+5, r15	; 0x05
   19426:	e4 82       	std	Z+4, r14	; 0x04
   19428:	80 ea       	ldi	r24, 0xA0	; 160
   1942a:	9d e3       	ldi	r25, 0x3D	; 61
   1942c:	a0 e0       	ldi	r26, 0x00	; 0
   1942e:	81 83       	std	Z+1, r24	; 0x01
   19430:	92 83       	std	Z+2, r25	; 0x02
   19432:	a3 83       	std	Z+3, r26	; 0x03
   19434:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   19438:	00 e0       	ldi	r16, 0x00	; 0
   1943a:	10 e0       	ldi	r17, 0x00	; 0
   1943c:	ec 89       	ldd	r30, Y+20	; 0x14
   1943e:	fd 89       	ldd	r31, Y+21	; 0x15
   19440:	e2 59       	subi	r30, 0x92	; 146
   19442:	ff 4f       	sbci	r31, 0xFF	; 255
   19444:	20 81       	ld	r18, Z
   19446:	31 81       	ldd	r19, Z+1	; 0x01
   19448:	21 15       	cp	r18, r1
   1944a:	f1 e0       	ldi	r31, 0x01	; 1
   1944c:	3f 07       	cpc	r19, r31
   1944e:	41 f1       	breq	.+80     	; 0x194a0 <lif_check_dir+0x360>
   19450:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   19454:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19458:	ca 01       	movw	r24, r20
   1945a:	88 27       	eor	r24, r24
   1945c:	94 70       	andi	r25, 0x04	; 4
   1945e:	52 ff       	sbrs	r21, 2
   19460:	20 c0       	rjmp	.+64     	; 0x194a2 <lif_check_dir+0x362>
   19462:	c9 01       	movw	r24, r18
   19464:	a0 e0       	ldi	r26, 0x00	; 0
   19466:	b0 e0       	ldi	r27, 0x00	; 0
   19468:	ed b7       	in	r30, 0x3d	; 61
   1946a:	fe b7       	in	r31, 0x3e	; 62
   1946c:	86 83       	std	Z+6, r24	; 0x06
   1946e:	97 83       	std	Z+7, r25	; 0x07
   19470:	a0 87       	std	Z+8, r26	; 0x08
   19472:	b1 87       	std	Z+9, r27	; 0x09
   19474:	ec 89       	ldd	r30, Y+20	; 0x14
   19476:	fd 89       	ldd	r31, Y+21	; 0x15
   19478:	80 81       	ld	r24, Z
   1947a:	91 81       	ldd	r25, Z+1	; 0x01
   1947c:	ed b7       	in	r30, 0x3d	; 61
   1947e:	fe b7       	in	r31, 0x3e	; 62
   19480:	95 83       	std	Z+5, r25	; 0x05
   19482:	84 83       	std	Z+4, r24	; 0x04
   19484:	84 e7       	ldi	r24, 0x74	; 116
   19486:	9d e3       	ldi	r25, 0x3D	; 61
   19488:	a0 e0       	ldi	r26, 0x00	; 0
   1948a:	81 83       	std	Z+1, r24	; 0x01
   1948c:	92 83       	std	Z+2, r25	; 0x02
   1948e:	a3 83       	std	Z+3, r26	; 0x03
   19490:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   19494:	80 e0       	ldi	r24, 0x00	; 0
   19496:	90 e0       	ldi	r25, 0x00	; 0
   19498:	04 c0       	rjmp	.+8      	; 0x194a2 <lif_check_dir+0x362>
   1949a:	81 e0       	ldi	r24, 0x01	; 1
   1949c:	90 e0       	ldi	r25, 0x00	; 0
   1949e:	01 c0       	rjmp	.+2      	; 0x194a2 <lif_check_dir+0x362>
   194a0:	c8 01       	movw	r24, r16
   194a2:	65 96       	adiw	r28, 0x15	; 21
   194a4:	e2 e1       	ldi	r30, 0x12	; 18
   194a6:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

000194aa <lif_close_volume>:
   194aa:	cf 93       	push	r28
   194ac:	df 93       	push	r29
   194ae:	00 97       	sbiw	r24, 0x00	; 0
   194b0:	f9 f0       	breq	.+62     	; 0x194f0 <lif_close_volume+0x46>
   194b2:	ec 01       	movw	r28, r24
   194b4:	8a 81       	ldd	r24, Y+2	; 0x02
   194b6:	9b 81       	ldd	r25, Y+3	; 0x03
   194b8:	00 97       	sbiw	r24, 0x00	; 0
   194ba:	79 f0       	breq	.+30     	; 0x194da <lif_close_volume+0x30>
   194bc:	22 e0       	ldi	r18, 0x02	; 2
   194be:	30 e0       	ldi	r19, 0x00	; 0
   194c0:	40 e0       	ldi	r20, 0x00	; 0
   194c2:	50 e0       	ldi	r21, 0x00	; 0
   194c4:	ba 01       	movw	r22, r20
   194c6:	0e 94 e3 7a 	call	0xf5c6	; 0xf5c6 <fseek>
   194ca:	8a 81       	ldd	r24, Y+2	; 0x02
   194cc:	9b 81       	ldd	r25, Y+3	; 0x03
   194ce:	0e 94 cb 7c 	call	0xf996	; 0xf996 <fclose>
   194d2:	1b 82       	std	Y+3, r1	; 0x03
   194d4:	1a 82       	std	Y+2, r1	; 0x02
   194d6:	0e 94 c6 7b 	call	0xf78c	; 0xf78c <sync>
   194da:	88 81       	ld	r24, Y
   194dc:	99 81       	ldd	r25, Y+1	; 0x01
   194de:	00 97       	sbiw	r24, 0x00	; 0
   194e0:	11 f0       	breq	.+4      	; 0x194e6 <lif_close_volume+0x3c>
   194e2:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <lif_free>
   194e6:	ce 01       	movw	r24, r28
   194e8:	73 db       	rcall	.-2330   	; 0x18bd0 <lif_vol_clear>
   194ea:	ce 01       	movw	r24, r28
   194ec:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <lif_free>
   194f0:	df 91       	pop	r29
   194f2:	cf 91       	pop	r28
   194f4:	08 95       	ret

000194f6 <lif_checkdirindex>:
   194f6:	cf 92       	push	r12
   194f8:	df 92       	push	r13
   194fa:	ef 92       	push	r14
   194fc:	ff 92       	push	r15
   194fe:	cf 93       	push	r28
   19500:	df 93       	push	r29
   19502:	ad b7       	in	r26, 0x3d	; 61
   19504:	be b7       	in	r27, 0x3e	; 62
   19506:	17 97       	sbiw	r26, 0x07	; 7
   19508:	0f b6       	in	r0, 0x3f	; 63
   1950a:	f8 94       	cli
   1950c:	be bf       	out	0x3e, r27	; 62
   1950e:	0f be       	out	0x3f, r0	; 63
   19510:	ad bf       	out	0x3d, r26	; 61
   19512:	9b 01       	movw	r18, r22
   19514:	77 fd       	sbrc	r23, 7
   19516:	25 c0       	rjmp	.+74     	; 0x19562 <lif_checkdirindex+0x6c>
   19518:	ab 01       	movw	r20, r22
   1951a:	77 0f       	add	r23, r23
   1951c:	66 0b       	sbc	r22, r22
   1951e:	77 0b       	sbc	r23, r23
   19520:	e5 e0       	ldi	r30, 0x05	; 5
   19522:	44 0f       	add	r20, r20
   19524:	55 1f       	adc	r21, r21
   19526:	66 1f       	adc	r22, r22
   19528:	77 1f       	adc	r23, r23
   1952a:	ea 95       	dec	r30
   1952c:	d1 f7       	brne	.-12     	; 0x19522 <lif_checkdirindex+0x2c>
   1952e:	c5 2e       	mov	r12, r21
   19530:	d6 2e       	mov	r13, r22
   19532:	e7 2e       	mov	r14, r23
   19534:	ff 24       	eor	r15, r15
   19536:	55 27       	eor	r21, r21
   19538:	66 27       	eor	r22, r22
   1953a:	77 27       	eor	r23, r23
   1953c:	45 2b       	or	r20, r21
   1953e:	46 2b       	or	r20, r22
   19540:	47 2b       	or	r20, r23
   19542:	29 f0       	breq	.+10     	; 0x1954e <lif_checkdirindex+0x58>
   19544:	4f ef       	ldi	r20, 0xFF	; 255
   19546:	c4 1a       	sub	r12, r20
   19548:	d4 0a       	sbc	r13, r20
   1954a:	e4 0a       	sbc	r14, r20
   1954c:	f4 0a       	sbc	r15, r20
   1954e:	fc 01       	movw	r30, r24
   19550:	45 a9       	ldd	r20, Z+53	; 0x35
   19552:	56 a9       	ldd	r21, Z+54	; 0x36
   19554:	67 a9       	ldd	r22, Z+55	; 0x37
   19556:	70 ad       	ldd	r23, Z+56	; 0x38
   19558:	4c 15       	cp	r20, r12
   1955a:	5d 05       	cpc	r21, r13
   1955c:	6e 05       	cpc	r22, r14
   1955e:	7f 05       	cpc	r23, r15
   19560:	08 f5       	brcc	.+66     	; 0x195a4 <lif_checkdirindex+0xae>
   19562:	ec 01       	movw	r28, r24
   19564:	ed b7       	in	r30, 0x3d	; 61
   19566:	fe b7       	in	r31, 0x3e	; 62
   19568:	37 83       	std	Z+7, r19	; 0x07
   1956a:	26 83       	std	Z+6, r18	; 0x06
   1956c:	88 81       	ld	r24, Y
   1956e:	99 81       	ldd	r25, Y+1	; 0x01
   19570:	95 83       	std	Z+5, r25	; 0x05
   19572:	84 83       	std	Z+4, r24	; 0x04
   19574:	81 eb       	ldi	r24, 0xB1	; 177
   19576:	9c e3       	ldi	r25, 0x3C	; 60
   19578:	a0 e0       	ldi	r26, 0x00	; 0
   1957a:	81 83       	std	Z+1, r24	; 0x01
   1957c:	92 83       	std	Z+2, r25	; 0x02
   1957e:	a3 83       	std	Z+3, r26	; 0x03
   19580:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   19584:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19588:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1958c:	c9 01       	movw	r24, r18
   1958e:	88 27       	eor	r24, r24
   19590:	94 70       	andi	r25, 0x04	; 4
   19592:	32 ff       	sbrs	r19, 2
   19594:	09 c0       	rjmp	.+18     	; 0x195a8 <lif_checkdirindex+0xb2>
   19596:	67 ef       	ldi	r22, 0xF7	; 247
   19598:	75 e1       	ldi	r23, 0x15	; 21
   1959a:	ce 01       	movw	r24, r28
   1959c:	20 db       	rcall	.-2496   	; 0x18bde <lif_dump_vol>
   1959e:	80 e0       	ldi	r24, 0x00	; 0
   195a0:	90 e0       	ldi	r25, 0x00	; 0
   195a2:	02 c0       	rjmp	.+4      	; 0x195a8 <lif_checkdirindex+0xb2>
   195a4:	81 e0       	ldi	r24, 0x01	; 1
   195a6:	90 e0       	ldi	r25, 0x00	; 0
   195a8:	ad b7       	in	r26, 0x3d	; 61
   195aa:	be b7       	in	r27, 0x3e	; 62
   195ac:	17 96       	adiw	r26, 0x07	; 7
   195ae:	0f b6       	in	r0, 0x3f	; 63
   195b0:	f8 94       	cli
   195b2:	be bf       	out	0x3e, r27	; 62
   195b4:	0f be       	out	0x3f, r0	; 63
   195b6:	ad bf       	out	0x3d, r26	; 61
   195b8:	df 91       	pop	r29
   195ba:	cf 91       	pop	r28
   195bc:	ff 90       	pop	r15
   195be:	ef 90       	pop	r14
   195c0:	df 90       	pop	r13
   195c2:	cf 90       	pop	r12
   195c4:	08 95       	ret

000195c6 <lif_readdirindex>:
   195c6:	a5 e2       	ldi	r26, 0x25	; 37
   195c8:	b0 e0       	ldi	r27, 0x00	; 0
   195ca:	e9 ee       	ldi	r30, 0xE9	; 233
   195cc:	fa ec       	ldi	r31, 0xCA	; 202
   195ce:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
   195d2:	7c 01       	movw	r14, r24
   195d4:	6b 01       	movw	r12, r22
   195d6:	8f df       	rcall	.-226    	; 0x194f6 <lif_checkdirindex>
   195d8:	89 2b       	or	r24, r25
   195da:	19 f4       	brne	.+6      	; 0x195e2 <lif_readdirindex+0x1c>
   195dc:	00 e0       	ldi	r16, 0x00	; 0
   195de:	10 e0       	ldi	r17, 0x00	; 0
   195e0:	54 c0       	rjmp	.+168    	; 0x1968a <lif_readdirindex+0xc4>
   195e2:	f7 01       	movw	r30, r14
   195e4:	85 a5       	ldd	r24, Z+45	; 0x2d
   195e6:	96 a5       	ldd	r25, Z+46	; 0x2e
   195e8:	a7 a5       	ldd	r26, Z+47	; 0x2f
   195ea:	b0 a9       	ldd	r27, Z+48	; 0x30
   195ec:	44 27       	eor	r20, r20
   195ee:	58 2f       	mov	r21, r24
   195f0:	69 2f       	mov	r22, r25
   195f2:	7a 2f       	mov	r23, r26
   195f4:	c6 01       	movw	r24, r12
   195f6:	0d 2c       	mov	r0, r13
   195f8:	00 0c       	add	r0, r0
   195fa:	aa 0b       	sbc	r26, r26
   195fc:	bb 0b       	sbc	r27, r27
   195fe:	35 e0       	ldi	r19, 0x05	; 5
   19600:	88 0f       	add	r24, r24
   19602:	99 1f       	adc	r25, r25
   19604:	aa 1f       	adc	r26, r26
   19606:	bb 1f       	adc	r27, r27
   19608:	3a 95       	dec	r19
   1960a:	d1 f7       	brne	.-12     	; 0x19600 <lif_readdirindex+0x3a>
   1960c:	9a 01       	movw	r18, r20
   1960e:	ab 01       	movw	r20, r22
   19610:	28 0f       	add	r18, r24
   19612:	39 1f       	adc	r19, r25
   19614:	4a 1f       	adc	r20, r26
   19616:	5b 1f       	adc	r21, r27
   19618:	00 e2       	ldi	r16, 0x20	; 32
   1961a:	10 e0       	ldi	r17, 0x00	; 0
   1961c:	be 01       	movw	r22, r28
   1961e:	6a 5f       	subi	r22, 0xFA	; 250
   19620:	7f 4f       	sbci	r23, 0xFF	; 255
   19622:	c7 01       	movw	r24, r14
   19624:	0e 94 89 c1 	call	0x18312	; 0x18312 <lif_read>
   19628:	60 32       	cpi	r22, 0x20	; 32
   1962a:	71 05       	cpc	r23, r1
   1962c:	81 05       	cpc	r24, r1
   1962e:	91 05       	cpc	r25, r1
   19630:	a8 f2       	brcs	.-86     	; 0x195dc <lif_readdirindex+0x16>
   19632:	b7 01       	movw	r22, r14
   19634:	ce 01       	movw	r24, r28
   19636:	06 96       	adiw	r24, 0x06	; 6
   19638:	75 d9       	rcall	.-3350   	; 0x18924 <lif_str2dir>
   1963a:	f7 01       	movw	r30, r14
   1963c:	e6 5a       	subi	r30, 0xA6	; 166
   1963e:	ff 4f       	sbci	r31, 0xFF	; 255
   19640:	80 81       	ld	r24, Z
   19642:	91 81       	ldd	r25, Z+1	; 0x01
   19644:	01 96       	adiw	r24, 0x01	; 1
   19646:	19 f4       	brne	.+6      	; 0x1964e <lif_readdirindex+0x88>
   19648:	f7 01       	movw	r30, r14
   1964a:	d3 a2       	std	Z+35, r13	; 0x23
   1964c:	c2 a2       	std	Z+34, r12	; 0x22
   1964e:	c7 01       	movw	r24, r14
   19650:	77 dd       	rcall	.-1298   	; 0x19140 <lif_check_dir>
   19652:	8c 01       	movw	r16, r24
   19654:	89 2b       	or	r24, r25
   19656:	b9 f4       	brne	.+46     	; 0x19686 <lif_readdirindex+0xc0>
   19658:	ed b7       	in	r30, 0x3d	; 61
   1965a:	fe b7       	in	r31, 0x3e	; 62
   1965c:	d5 82       	std	Z+5, r13	; 0x05
   1965e:	c4 82       	std	Z+4, r12	; 0x04
   19660:	81 e9       	ldi	r24, 0x91	; 145
   19662:	9c e3       	ldi	r25, 0x3C	; 60
   19664:	a0 e0       	ldi	r26, 0x00	; 0
   19666:	81 83       	std	Z+1, r24	; 0x01
   19668:	92 83       	std	Z+2, r25	; 0x02
   1966a:	a3 83       	std	Z+3, r26	; 0x03
   1966c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   19670:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19674:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19678:	92 ff       	sbrs	r25, 2
   1967a:	b0 cf       	rjmp	.-160    	; 0x195dc <lif_readdirindex+0x16>
   1967c:	68 e0       	ldi	r22, 0x08	; 8
   1967e:	76 e1       	ldi	r23, 0x16	; 22
   19680:	c7 01       	movw	r24, r14
   19682:	ad da       	rcall	.-2726   	; 0x18bde <lif_dump_vol>
   19684:	02 c0       	rjmp	.+4      	; 0x1968a <lif_readdirindex+0xc4>
   19686:	01 e0       	ldi	r16, 0x01	; 1
   19688:	10 e0       	ldi	r17, 0x00	; 0
   1968a:	c8 01       	movw	r24, r16
   1968c:	a5 96       	adiw	r28, 0x25	; 37
   1968e:	e8 e0       	ldi	r30, 0x08	; 8
   19690:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

00019694 <lif_writedirindex>:
   19694:	a0 e2       	ldi	r26, 0x20	; 32
   19696:	b0 e0       	ldi	r27, 0x00	; 0
   19698:	e0 e5       	ldi	r30, 0x50	; 80
   1969a:	fb ec       	ldi	r31, 0xCB	; 203
   1969c:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__+0x10>
   196a0:	5c 01       	movw	r10, r24
   196a2:	6b 01       	movw	r12, r22
   196a4:	4d dd       	rcall	.-1382   	; 0x19140 <lif_check_dir>
   196a6:	7c 01       	movw	r14, r24
   196a8:	89 2b       	or	r24, r25
   196aa:	71 f4       	brne	.+28     	; 0x196c8 <lif_writedirindex+0x34>
   196ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   196b0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   196b4:	92 fd       	sbrc	r25, 2
   196b6:	03 c0       	rjmp	.+6      	; 0x196be <lif_writedirindex+0x2a>
   196b8:	e1 2c       	mov	r14, r1
   196ba:	f1 2c       	mov	r15, r1
   196bc:	42 c0       	rjmp	.+132    	; 0x19742 <lif_writedirindex+0xae>
   196be:	69 e1       	ldi	r22, 0x19	; 25
   196c0:	76 e1       	ldi	r23, 0x16	; 22
   196c2:	c5 01       	movw	r24, r10
   196c4:	8c da       	rcall	.-2792   	; 0x18bde <lif_dump_vol>
   196c6:	3d c0       	rjmp	.+122    	; 0x19742 <lif_writedirindex+0xae>
   196c8:	b6 01       	movw	r22, r12
   196ca:	c5 01       	movw	r24, r10
   196cc:	14 df       	rcall	.-472    	; 0x194f6 <lif_checkdirindex>
   196ce:	89 2b       	or	r24, r25
   196d0:	99 f3       	breq	.-26     	; 0x196b8 <lif_writedirindex+0x24>
   196d2:	f5 01       	movw	r30, r10
   196d4:	e6 5a       	subi	r30, 0xA6	; 166
   196d6:	ff 4f       	sbci	r31, 0xFF	; 255
   196d8:	80 81       	ld	r24, Z
   196da:	91 81       	ldd	r25, Z+1	; 0x01
   196dc:	01 96       	adiw	r24, 0x01	; 1
   196de:	19 f4       	brne	.+6      	; 0x196e6 <lif_writedirindex+0x52>
   196e0:	f5 01       	movw	r30, r10
   196e2:	d3 a2       	std	Z+35, r13	; 0x23
   196e4:	c2 a2       	std	Z+34, r12	; 0x22
   196e6:	f5 01       	movw	r30, r10
   196e8:	85 a5       	ldd	r24, Z+45	; 0x2d
   196ea:	96 a5       	ldd	r25, Z+46	; 0x2e
   196ec:	a7 a5       	ldd	r26, Z+47	; 0x2f
   196ee:	b0 a9       	ldd	r27, Z+48	; 0x30
   196f0:	ba 2f       	mov	r27, r26
   196f2:	a9 2f       	mov	r26, r25
   196f4:	98 2f       	mov	r25, r24
   196f6:	88 27       	eor	r24, r24
   196f8:	0d 2c       	mov	r0, r13
   196fa:	00 0c       	add	r0, r0
   196fc:	ee 08       	sbc	r14, r14
   196fe:	ff 08       	sbc	r15, r15
   19700:	35 e0       	ldi	r19, 0x05	; 5
   19702:	cc 0c       	add	r12, r12
   19704:	dd 1c       	adc	r13, r13
   19706:	ee 1c       	adc	r14, r14
   19708:	ff 1c       	adc	r15, r15
   1970a:	3a 95       	dec	r19
   1970c:	d1 f7       	brne	.-12     	; 0x19702 <lif_writedirindex+0x6e>
   1970e:	c8 0e       	add	r12, r24
   19710:	d9 1e       	adc	r13, r25
   19712:	ea 1e       	adc	r14, r26
   19714:	fb 1e       	adc	r15, r27
   19716:	be 01       	movw	r22, r28
   19718:	6f 5f       	subi	r22, 0xFF	; 255
   1971a:	7f 4f       	sbci	r23, 0xFF	; 255
   1971c:	c5 01       	movw	r24, r10
   1971e:	97 d8       	rcall	.-3794   	; 0x1884e <lif_dir2str>
   19720:	00 e2       	ldi	r16, 0x20	; 32
   19722:	10 e0       	ldi	r17, 0x00	; 0
   19724:	a7 01       	movw	r20, r14
   19726:	96 01       	movw	r18, r12
   19728:	be 01       	movw	r22, r28
   1972a:	6f 5f       	subi	r22, 0xFF	; 255
   1972c:	7f 4f       	sbci	r23, 0xFF	; 255
   1972e:	c5 01       	movw	r24, r10
   19730:	0e 94 dc c1 	call	0x183b8	; 0x183b8 <lif_write>
   19734:	31 e0       	ldi	r19, 0x01	; 1
   19736:	20 e0       	ldi	r18, 0x00	; 0
   19738:	80 97       	sbiw	r24, 0x20	; 32
   1973a:	0c f4       	brge	.+2      	; 0x1973e <lif_writedirindex+0xaa>
   1973c:	30 e0       	ldi	r19, 0x00	; 0
   1973e:	e3 2e       	mov	r14, r19
   19740:	f2 2e       	mov	r15, r18
   19742:	c7 01       	movw	r24, r14
   19744:	a0 96       	adiw	r28, 0x20	; 32
   19746:	ea e0       	ldi	r30, 0x0A	; 10
   19748:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__+0x10>

0001974c <lif_writedirEOF>:
   1974c:	0f 93       	push	r16
   1974e:	1f 93       	push	r17
   19750:	cf 93       	push	r28
   19752:	df 93       	push	r29
   19754:	ec 01       	movw	r28, r24
   19756:	8b 01       	movw	r16, r22
   19758:	33 da       	rcall	.-2970   	; 0x18bc0 <lif_dir_clear>
   1975a:	fe 01       	movw	r30, r28
   1975c:	e6 5a       	subi	r30, 0xA6	; 166
   1975e:	ff 4f       	sbci	r31, 0xFF	; 255
   19760:	8f ef       	ldi	r24, 0xFF	; 255
   19762:	9f ef       	ldi	r25, 0xFF	; 255
   19764:	91 83       	std	Z+1, r25	; 0x01
   19766:	80 83       	st	Z, r24
   19768:	1b a3       	std	Y+35, r17	; 0x23
   1976a:	0a a3       	std	Y+34, r16	; 0x22
   1976c:	b8 01       	movw	r22, r16
   1976e:	ce 01       	movw	r24, r28
   19770:	91 df       	rcall	.-222    	; 0x19694 <lif_writedirindex>
   19772:	df 91       	pop	r29
   19774:	cf 91       	pop	r28
   19776:	1f 91       	pop	r17
   19778:	0f 91       	pop	r16
   1977a:	08 95       	ret

0001977c <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   1977c:	2f 92       	push	r2
   1977e:	3f 92       	push	r3
   19780:	4f 92       	push	r4
   19782:	5f 92       	push	r5
   19784:	6f 92       	push	r6
   19786:	7f 92       	push	r7
   19788:	8f 92       	push	r8
   1978a:	af 92       	push	r10
   1978c:	bf 92       	push	r11
   1978e:	cf 92       	push	r12
   19790:	df 92       	push	r13
   19792:	ef 92       	push	r14
   19794:	ff 92       	push	r15
   19796:	0f 93       	push	r16
   19798:	1f 93       	push	r17
   1979a:	cf 93       	push	r28
   1979c:	df 93       	push	r29
   1979e:	cd b7       	in	r28, 0x3d	; 61
   197a0:	de b7       	in	r29, 0x3e	; 62
   197a2:	2f 97       	sbiw	r28, 0x0f	; 15
   197a4:	0f b6       	in	r0, 0x3f	; 63
   197a6:	f8 94       	cli
   197a8:	de bf       	out	0x3e, r29	; 62
   197aa:	0f be       	out	0x3f, r0	; 63
   197ac:	cd bf       	out	0x3d, r28	; 61
   197ae:	9f 87       	std	Y+15, r25	; 0x0f
   197b0:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   197b2:	fc 01       	movw	r30, r24
   197b4:	24 84       	ldd	r2, Z+12	; 0x0c
   197b6:	35 84       	ldd	r3, Z+13	; 0x0d
   197b8:	46 84       	ldd	r4, Z+14	; 0x0e
   197ba:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   197bc:	80 89       	ldd	r24, Z+16	; 0x10
   197be:	91 89       	ldd	r25, Z+17	; 0x11
   197c0:	a2 89       	ldd	r26, Z+18	; 0x12
   197c2:	b3 89       	ldd	r27, Z+19	; 0x13
   197c4:	80 8f       	std	Z+24, r24	; 0x18
   197c6:	91 8f       	std	Z+25, r25	; 0x19
   197c8:	a2 8f       	std	Z+26, r26	; 0x1a
   197ca:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   197cc:	14 8a       	std	Z+20, r1	; 0x14
   197ce:	15 8a       	std	Z+21, r1	; 0x15
   197d0:	16 8a       	std	Z+22, r1	; 0x16
   197d2:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   197d4:	17 8e       	std	Z+31, r1	; 0x1f
   197d6:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   197d8:	15 8e       	std	Z+29, r1	; 0x1d
   197da:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   197dc:	11 a2       	std	Z+33, r1	; 0x21
   197de:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   197e0:	13 a2       	std	Z+35, r1	; 0x23
   197e2:	12 a2       	std	Z+34, r1	; 0x22
   197e4:	cc 24       	eor	r12, r12
   197e6:	c3 94       	inc	r12
   197e8:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   197ea:	0f ef       	ldi	r16, 0xFF	; 255
   197ec:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   197ee:	e6 5a       	subi	r30, 0xA6	; 166
   197f0:	ff 4f       	sbci	r31, 0xFF	; 255
   197f2:	f9 87       	std	Y+9, r31	; 0x09
   197f4:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   197f6:	ae 84       	ldd	r10, Y+14	; 0x0e
   197f8:	bf 84       	ldd	r11, Y+15	; 0x0f
   197fa:	fc e5       	ldi	r31, 0x5C	; 92
   197fc:	af 0e       	add	r10, r31
   197fe:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19800:	8e 85       	ldd	r24, Y+14	; 0x0e
   19802:	9f 85       	ldd	r25, Y+15	; 0x0f
   19804:	80 5a       	subi	r24, 0xA0	; 160
   19806:	9f 4f       	sbci	r25, 0xFF	; 255
   19808:	9b 87       	std	Y+11, r25	; 0x0b
   1980a:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   1980c:	ee 85       	ldd	r30, Y+14	; 0x0e
   1980e:	ff 85       	ldd	r31, Y+15	; 0x0f
   19810:	e1 5b       	subi	r30, 0xB1	; 177
   19812:	ff 4f       	sbci	r31, 0xFF	; 255
   19814:	fd 87       	std	Y+13, r31	; 0x0d
   19816:	ec 87       	std	Y+12, r30	; 0x0c
   19818:	84 e4       	ldi	r24, 0x44	; 68
   1981a:	9c e3       	ldi	r25, 0x3C	; 60
   1981c:	3c 01       	movw	r6, r24
   1981e:	81 2c       	mov	r8, r1
   19820:	76 01       	movw	r14, r12
   19822:	21 e0       	ldi	r18, 0x01	; 1
   19824:	e2 1a       	sub	r14, r18
   19826:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   19828:	b7 01       	movw	r22, r14
   1982a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1982c:	9f 85       	ldd	r25, Y+15	; 0x0f
   1982e:	cb de       	rcall	.-618    	; 0x195c6 <lif_readdirindex>
   19830:	89 2b       	or	r24, r25
   19832:	19 f4       	brne	.+6      	; 0x1983a <lif_updatefree+0xbe>
        {
            return(NULL);
   19834:	80 e0       	ldi	r24, 0x00	; 0
   19836:	90 e0       	ldi	r25, 0x00	; 0
   19838:	93 c0       	rjmp	.+294    	; 0x19960 <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   1983a:	e8 85       	ldd	r30, Y+8	; 0x08
   1983c:	f9 85       	ldd	r31, Y+9	; 0x09
   1983e:	80 81       	ld	r24, Z
   19840:	91 81       	ldd	r25, Z+1	; 0x01
   19842:	8f 3f       	cpi	r24, 0xFF	; 255
   19844:	ff ef       	ldi	r31, 0xFF	; 255
   19846:	9f 07       	cpc	r25, r31
   19848:	c1 f4       	brne	.+48     	; 0x1987a <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   1984a:	ee 85       	ldd	r30, Y+14	; 0x0e
   1984c:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   1984e:	0f 3f       	cpi	r16, 0xFF	; 255
   19850:	2f ef       	ldi	r18, 0xFF	; 255
   19852:	12 07       	cpc	r17, r18
   19854:	09 f4       	brne	.+2      	; 0x19858 <lif_updatefree+0xdc>
   19856:	7a c0       	rjmp	.+244    	; 0x1994c <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   19858:	13 a3       	std	Z+35, r17	; 0x23
   1985a:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   1985c:	e0 1a       	sub	r14, r16
   1985e:	f1 0a       	sbc	r15, r17
   19860:	86 8d       	ldd	r24, Z+30	; 0x1e
   19862:	97 8d       	ldd	r25, Z+31	; 0x1f
   19864:	8e 19       	sub	r24, r14
   19866:	9f 09       	sbc	r25, r15
   19868:	97 8f       	std	Z+31, r25	; 0x1f
   1986a:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   1986c:	b8 01       	movw	r22, r16
   1986e:	cf 01       	movw	r24, r30
   19870:	6d df       	rcall	.-294    	; 0x1974c <lif_writedirEOF>
   19872:	89 2b       	or	r24, r25
   19874:	09 f0       	breq	.+2      	; 0x19878 <lif_updatefree+0xfc>
   19876:	6c c0       	rjmp	.+216    	; 0x19950 <lif_updatefree+0x1d4>
   19878:	dd cf       	rjmp	.-70     	; 0x19834 <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   1987a:	89 2b       	or	r24, r25
   1987c:	81 f4       	brne	.+32     	; 0x1989e <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   1987e:	0f 3f       	cpi	r16, 0xFF	; 255
   19880:	ff ef       	ldi	r31, 0xFF	; 255
   19882:	1f 07       	cpc	r17, r31
   19884:	09 f4       	brne	.+2      	; 0x19888 <lif_updatefree+0x10c>
   19886:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   19888:	ee 85       	ldd	r30, Y+14	; 0x0e
   1988a:	ff 85       	ldd	r31, Y+15	; 0x0f
   1988c:	86 8d       	ldd	r24, Z+30	; 0x1e
   1988e:	97 8d       	ldd	r25, Z+31	; 0x1f
   19890:	01 96       	adiw	r24, 0x01	; 1
   19892:	97 8f       	std	Z+31, r25	; 0x1f
   19894:	86 8f       	std	Z+30, r24	; 0x1e
   19896:	ff ef       	ldi	r31, 0xFF	; 255
   19898:	cf 1a       	sub	r12, r31
   1989a:	df 0a       	sbc	r13, r31
   1989c:	c1 cf       	rjmp	.-126    	; 0x19820 <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   1989e:	f5 01       	movw	r30, r10
   198a0:	80 81       	ld	r24, Z
   198a2:	91 81       	ldd	r25, Z+1	; 0x01
   198a4:	a2 81       	ldd	r26, Z+2	; 0x02
   198a6:	b3 81       	ldd	r27, Z+3	; 0x03
   198a8:	82 15       	cp	r24, r2
   198aa:	93 05       	cpc	r25, r3
   198ac:	a4 05       	cpc	r26, r4
   198ae:	b5 05       	cpc	r27, r5
   198b0:	c8 f4       	brcc	.+50     	; 0x198e4 <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   198b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   198b6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   198ba:	92 ff       	sbrs	r25, 2
   198bc:	13 c0       	rjmp	.+38     	; 0x198e4 <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   198be:	8c 85       	ldd	r24, Y+12	; 0x0c
   198c0:	9d 85       	ldd	r25, Y+13	; 0x0d
   198c2:	ed b7       	in	r30, 0x3d	; 61
   198c4:	fe b7       	in	r31, 0x3e	; 62
   198c6:	97 83       	std	Z+7, r25	; 0x07
   198c8:	86 83       	std	Z+6, r24	; 0x06
   198ca:	ee 85       	ldd	r30, Y+14	; 0x0e
   198cc:	ff 85       	ldd	r31, Y+15	; 0x0f
   198ce:	80 81       	ld	r24, Z
   198d0:	91 81       	ldd	r25, Z+1	; 0x01
   198d2:	ed b7       	in	r30, 0x3d	; 61
   198d4:	fe b7       	in	r31, 0x3e	; 62
   198d6:	95 83       	std	Z+5, r25	; 0x05
   198d8:	84 83       	std	Z+4, r24	; 0x04
   198da:	61 82       	std	Z+1, r6	; 0x01
   198dc:	72 82       	std	Z+2, r7	; 0x02
   198de:	83 82       	std	Z+3, r8	; 0x03
   198e0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   198e4:	ea 85       	ldd	r30, Y+10	; 0x0a
   198e6:	fb 85       	ldd	r31, Y+11	; 0x0b
   198e8:	80 81       	ld	r24, Z
   198ea:	91 81       	ldd	r25, Z+1	; 0x01
   198ec:	a2 81       	ldd	r26, Z+2	; 0x02
   198ee:	b3 81       	ldd	r27, Z+3	; 0x03
   198f0:	ee 85       	ldd	r30, Y+14	; 0x0e
   198f2:	ff 85       	ldd	r31, Y+15	; 0x0f
   198f4:	44 89       	ldd	r20, Z+20	; 0x14
   198f6:	55 89       	ldd	r21, Z+21	; 0x15
   198f8:	66 89       	ldd	r22, Z+22	; 0x16
   198fa:	77 89       	ldd	r23, Z+23	; 0x17
   198fc:	48 0f       	add	r20, r24
   198fe:	59 1f       	adc	r21, r25
   19900:	6a 1f       	adc	r22, r26
   19902:	7b 1f       	adc	r23, r27
   19904:	44 8b       	std	Z+20, r20	; 0x14
   19906:	55 8b       	std	Z+21, r21	; 0x15
   19908:	66 8b       	std	Z+22, r22	; 0x16
   1990a:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   1990c:	40 8d       	ldd	r20, Z+24	; 0x18
   1990e:	51 8d       	ldd	r21, Z+25	; 0x19
   19910:	62 8d       	ldd	r22, Z+26	; 0x1a
   19912:	73 8d       	ldd	r23, Z+27	; 0x1b
   19914:	48 1b       	sub	r20, r24
   19916:	59 0b       	sbc	r21, r25
   19918:	6a 0b       	sbc	r22, r26
   1991a:	7b 0b       	sbc	r23, r27
   1991c:	40 8f       	std	Z+24, r20	; 0x18
   1991e:	51 8f       	std	Z+25, r21	; 0x19
   19920:	62 8f       	std	Z+26, r22	; 0x1a
   19922:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   19924:	24 8d       	ldd	r18, Z+28	; 0x1c
   19926:	35 8d       	ldd	r19, Z+29	; 0x1d
   19928:	2f 5f       	subi	r18, 0xFF	; 255
   1992a:	3f 4f       	sbci	r19, 0xFF	; 255
   1992c:	35 8f       	std	Z+29, r19	; 0x1d
   1992e:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19930:	f5 01       	movw	r30, r10
   19932:	40 81       	ld	r20, Z
   19934:	51 81       	ldd	r21, Z+1	; 0x01
   19936:	62 81       	ldd	r22, Z+2	; 0x02
   19938:	73 81       	ldd	r23, Z+3	; 0x03
   1993a:	1c 01       	movw	r2, r24
   1993c:	2d 01       	movw	r4, r26
   1993e:	24 0e       	add	r2, r20
   19940:	35 1e       	adc	r3, r21
   19942:	46 1e       	adc	r4, r22
   19944:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   19946:	0f ef       	ldi	r16, 0xFF	; 255
   19948:	1f ef       	ldi	r17, 0xFF	; 255
   1994a:	a5 cf       	rjmp	.-182    	; 0x19896 <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   1994c:	f3 a2       	std	Z+35, r15	; 0x23
   1994e:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19950:	8f ef       	ldi	r24, 0xFF	; 255
   19952:	9f ef       	ldi	r25, 0xFF	; 255
   19954:	ee 85       	ldd	r30, Y+14	; 0x0e
   19956:	ff 85       	ldd	r31, Y+15	; 0x0f
   19958:	91 a3       	std	Z+33, r25	; 0x21
   1995a:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   1995c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1995e:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   19960:	2f 96       	adiw	r28, 0x0f	; 15
   19962:	0f b6       	in	r0, 0x3f	; 63
   19964:	f8 94       	cli
   19966:	de bf       	out	0x3e, r29	; 62
   19968:	0f be       	out	0x3f, r0	; 63
   1996a:	cd bf       	out	0x3d, r28	; 61
   1996c:	df 91       	pop	r29
   1996e:	cf 91       	pop	r28
   19970:	1f 91       	pop	r17
   19972:	0f 91       	pop	r16
   19974:	ff 90       	pop	r15
   19976:	ef 90       	pop	r14
   19978:	df 90       	pop	r13
   1997a:	cf 90       	pop	r12
   1997c:	bf 90       	pop	r11
   1997e:	af 90       	pop	r10
   19980:	8f 90       	pop	r8
   19982:	7f 90       	pop	r7
   19984:	6f 90       	pop	r6
   19986:	5f 90       	pop	r5
   19988:	4f 90       	pop	r4
   1998a:	3f 90       	pop	r3
   1998c:	2f 90       	pop	r2
   1998e:	08 95       	ret

00019990 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19990:	a9 e2       	ldi	r26, 0x29	; 41
   19992:	b1 e0       	ldi	r27, 0x01	; 1
   19994:	ee ec       	ldi	r30, 0xCE	; 206
   19996:	fc ec       	ldi	r31, 0xCC	; 204
   19998:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
   1999c:	4c 01       	movw	r8, r24
   1999e:	3b 01       	movw	r6, r22
   199a0:	19 01       	movw	r2, r18
   199a2:	2a 01       	movw	r4, r20
   199a4:	ca 5d       	subi	r28, 0xDA	; 218
   199a6:	de 4f       	sbci	r29, 0xFE	; 254
   199a8:	e8 82       	st	Y, r14
   199aa:	f9 82       	std	Y+1, r15	; 0x01
   199ac:	0a 83       	std	Y+2, r16	; 0x02
   199ae:	1b 83       	std	Y+3, r17	; 0x03
   199b0:	c6 52       	subi	r28, 0x26	; 38
   199b2:	d1 40       	sbci	r29, 0x01	; 1
   199b4:	c2 5e       	subi	r28, 0xE2	; 226
   199b6:	de 4f       	sbci	r29, 0xFE	; 254
   199b8:	a8 82       	st	Y, r10
   199ba:	b9 82       	std	Y+1, r11	; 0x01
   199bc:	ca 82       	std	Y+2, r12	; 0x02
   199be:	db 82       	std	Y+3, r13	; 0x03
   199c0:	ce 51       	subi	r28, 0x1E	; 30
   199c2:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   199c4:	80 e0       	ldi	r24, 0x00	; 0
   199c6:	90 e0       	ldi	r25, 0x00	; 0
   199c8:	0e 94 e2 37 	call	0x6fc4	; 0x6fc4 <time>
   199cc:	5b 01       	movw	r10, r22
   199ce:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   199d0:	64 e7       	ldi	r22, 0x74	; 116
   199d2:	70 e0       	ldi	r23, 0x00	; 0
   199d4:	80 e0       	ldi	r24, 0x00	; 0
   199d6:	90 e0       	ldi	r25, 0x00	; 0
   199d8:	0e 94 9b c0 	call	0x18136	; 0x18136 <lif_calloc>
   199dc:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   199de:	89 2b       	or	r24, r25
   199e0:	09 f4       	brne	.+2      	; 0x199e4 <lif_create_volume+0x54>
   199e2:	b6 c2       	rjmp	.+1388   	; 0x19f50 <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   199e4:	c2 5e       	subi	r28, 0xE2	; 226
   199e6:	de 4f       	sbci	r29, 0xFE	; 254
   199e8:	28 81       	ld	r18, Y
   199ea:	39 81       	ldd	r19, Y+1	; 0x01
   199ec:	4a 81       	ldd	r20, Y+2	; 0x02
   199ee:	5b 81       	ldd	r21, Y+3	; 0x03
   199f0:	ce 51       	subi	r28, 0x1E	; 30
   199f2:	d1 40       	sbci	r29, 0x01	; 1
   199f4:	ed b7       	in	r30, 0x3d	; 61
   199f6:	fe b7       	in	r31, 0x3e	; 62
   199f8:	20 8b       	std	Z+16, r18	; 0x10
   199fa:	31 8b       	std	Z+17, r19	; 0x11
   199fc:	42 8b       	std	Z+18, r20	; 0x12
   199fe:	53 8b       	std	Z+19, r21	; 0x13
   19a00:	ca 5d       	subi	r28, 0xDA	; 218
   19a02:	de 4f       	sbci	r29, 0xFE	; 254
   19a04:	28 81       	ld	r18, Y
   19a06:	39 81       	ldd	r19, Y+1	; 0x01
   19a08:	4a 81       	ldd	r20, Y+2	; 0x02
   19a0a:	5b 81       	ldd	r21, Y+3	; 0x03
   19a0c:	c6 52       	subi	r28, 0x26	; 38
   19a0e:	d1 40       	sbci	r29, 0x01	; 1
   19a10:	24 87       	std	Z+12, r18	; 0x0c
   19a12:	35 87       	std	Z+13, r19	; 0x0d
   19a14:	46 87       	std	Z+14, r20	; 0x0e
   19a16:	57 87       	std	Z+15, r21	; 0x0f
   19a18:	20 86       	std	Z+8, r2	; 0x08
   19a1a:	31 86       	std	Z+9, r3	; 0x09
   19a1c:	42 86       	std	Z+10, r4	; 0x0a
   19a1e:	53 86       	std	Z+11, r5	; 0x0b
   19a20:	77 82       	std	Z+7, r7	; 0x07
   19a22:	66 82       	std	Z+6, r6	; 0x06
   19a24:	95 82       	std	Z+5, r9	; 0x05
   19a26:	84 82       	std	Z+4, r8	; 0x04
   19a28:	8f e1       	ldi	r24, 0x1F	; 31
   19a2a:	9d e3       	ldi	r25, 0x3D	; 61
   19a2c:	a0 e0       	ldi	r26, 0x00	; 0
   19a2e:	81 83       	std	Z+1, r24	; 0x01
   19a30:	92 83       	std	Z+2, r25	; 0x02
   19a32:	a3 83       	std	Z+3, r26	; 0x03
   19a34:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   19a38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19a3c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19a40:	92 ff       	sbrs	r25, 2
   19a42:	04 c0       	rjmp	.+8      	; 0x19a4c <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19a44:	6b e2       	ldi	r22, 0x2B	; 43
   19a46:	76 e1       	ldi	r23, 0x16	; 22
   19a48:	c7 01       	movw	r24, r14
   19a4a:	c9 d8       	rcall	.-3694   	; 0x18bde <lif_dump_vol>

    lif_image_clear(LIF);
   19a4c:	c7 01       	movw	r24, r14
   19a4e:	b2 d8       	rcall	.-3740   	; 0x18bb4 <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19a50:	80 e0       	ldi	r24, 0x00	; 0
   19a52:	90 e8       	ldi	r25, 0x80	; 128
   19a54:	f7 01       	movw	r30, r14
   19a56:	95 a3       	std	Z+37, r25	; 0x25
   19a58:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19a5a:	46 e0       	ldi	r20, 0x06	; 6
   19a5c:	50 e0       	ldi	r21, 0x00	; 0
   19a5e:	b3 01       	movw	r22, r6
   19a60:	c7 01       	movw	r24, r14
   19a62:	86 96       	adiw	r24, 0x26	; 38
   19a64:	0e 94 de c2 	call	0x185bc	; 0x185bc <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19a68:	f7 01       	movw	r30, r14
   19a6a:	25 a6       	std	Z+45, r2	; 0x2d
   19a6c:	36 a6       	std	Z+46, r3	; 0x2e
   19a6e:	47 a6       	std	Z+47, r4	; 0x2f
   19a70:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   19a72:	ca 5d       	subi	r28, 0xDA	; 218
   19a74:	de 4f       	sbci	r29, 0xFE	; 254
   19a76:	28 81       	ld	r18, Y
   19a78:	39 81       	ldd	r19, Y+1	; 0x01
   19a7a:	4a 81       	ldd	r20, Y+2	; 0x02
   19a7c:	5b 81       	ldd	r21, Y+3	; 0x03
   19a7e:	c6 52       	subi	r28, 0x26	; 38
   19a80:	d1 40       	sbci	r29, 0x01	; 1
   19a82:	25 ab       	std	Z+53, r18	; 0x35
   19a84:	36 ab       	std	Z+54, r19	; 0x36
   19a86:	47 ab       	std	Z+55, r20	; 0x37
   19a88:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   19a8a:	80 e0       	ldi	r24, 0x00	; 0
   19a8c:	90 e1       	ldi	r25, 0x10	; 16
   19a8e:	92 ab       	std	Z+50, r25	; 0x32
   19a90:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   19a92:	fd 96       	adiw	r30, 0x3d	; 61
   19a94:	10 82       	st	Z, r1
   19a96:	11 82       	std	Z+1, r1	; 0x01
   19a98:	12 82       	std	Z+2, r1	; 0x02
   19a9a:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   19a9c:	34 96       	adiw	r30, 0x04	; 4
   19a9e:	10 82       	st	Z, r1
   19aa0:	11 82       	std	Z+1, r1	; 0x01
   19aa2:	12 82       	std	Z+2, r1	; 0x02
   19aa4:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   19aa6:	34 96       	adiw	r30, 0x04	; 4
   19aa8:	10 82       	st	Z, r1
   19aaa:	11 82       	std	Z+1, r1	; 0x01
   19aac:	12 82       	std	Z+2, r1	; 0x02
   19aae:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19ab0:	a7 01       	movw	r20, r14
   19ab2:	47 5b       	subi	r20, 0xB7	; 183
   19ab4:	5f 4f       	sbci	r21, 0xFF	; 255
   19ab6:	c6 01       	movw	r24, r12
   19ab8:	b5 01       	movw	r22, r10
   19aba:	0e 94 03 c5 	call	0x18a06	; 0x18a06 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   19abe:	c4 01       	movw	r24, r8
   19ac0:	0e 94 e6 c0 	call	0x181cc	; 0x181cc <lif_stralloc>
   19ac4:	d7 01       	movw	r26, r14
   19ac6:	8d 93       	st	X+, r24
   19ac8:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   19aca:	89 2b       	or	r24, r25
   19acc:	09 f4       	brne	.+2      	; 0x19ad0 <lif_create_volume+0x140>
   19ace:	35 c2       	rjmp	.+1130   	; 0x19f3a <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   19ad0:	c2 5e       	subi	r28, 0xE2	; 226
   19ad2:	de 4f       	sbci	r29, 0xFE	; 254
   19ad4:	28 81       	ld	r18, Y
   19ad6:	39 81       	ldd	r19, Y+1	; 0x01
   19ad8:	4a 81       	ldd	r20, Y+2	; 0x02
   19ada:	5b 81       	ldd	r21, Y+3	; 0x03
   19adc:	ce 51       	subi	r28, 0x1E	; 30
   19ade:	d1 40       	sbci	r29, 0x01	; 1
   19ae0:	f7 01       	movw	r30, r14
   19ae2:	20 8b       	std	Z+16, r18	; 0x10
   19ae4:	31 8b       	std	Z+17, r19	; 0x11
   19ae6:	42 8b       	std	Z+18, r20	; 0x12
   19ae8:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   19aea:	ca 5d       	subi	r28, 0xDA	; 218
   19aec:	de 4f       	sbci	r29, 0xFE	; 254
   19aee:	88 81       	ld	r24, Y
   19af0:	99 81       	ldd	r25, Y+1	; 0x01
   19af2:	aa 81       	ldd	r26, Y+2	; 0x02
   19af4:	bb 81       	ldd	r27, Y+3	; 0x03
   19af6:	c6 52       	subi	r28, 0x26	; 38
   19af8:	d1 40       	sbci	r29, 0x01	; 1
   19afa:	82 0d       	add	r24, r2
   19afc:	93 1d       	adc	r25, r3
   19afe:	a4 1d       	adc	r26, r4
   19b00:	b5 1d       	adc	r27, r5
   19b02:	84 87       	std	Z+12, r24	; 0x0c
   19b04:	95 87       	std	Z+13, r25	; 0x0d
   19b06:	a6 87       	std	Z+14, r26	; 0x0e
   19b08:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19b0a:	82 0f       	add	r24, r18
   19b0c:	93 1f       	adc	r25, r19
   19b0e:	a4 1f       	adc	r26, r20
   19b10:	b5 1f       	adc	r27, r21
   19b12:	84 83       	std	Z+4, r24	; 0x04
   19b14:	95 83       	std	Z+5, r25	; 0x05
   19b16:	a6 83       	std	Z+6, r26	; 0x06
   19b18:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19b1a:	ba 2f       	mov	r27, r26
   19b1c:	a9 2f       	mov	r26, r25
   19b1e:	98 2f       	mov	r25, r24
   19b20:	88 27       	eor	r24, r24
   19b22:	80 87       	std	Z+8, r24	; 0x08
   19b24:	91 87       	std	Z+9, r25	; 0x09
   19b26:	a2 87       	std	Z+10, r26	; 0x0a
   19b28:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   19b2a:	20 8f       	std	Z+24, r18	; 0x18
   19b2c:	31 8f       	std	Z+25, r19	; 0x19
   19b2e:	42 8f       	std	Z+26, r20	; 0x1a
   19b30:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19b32:	14 8a       	std	Z+20, r1	; 0x14
   19b34:	15 8a       	std	Z+21, r1	; 0x15
   19b36:	16 8a       	std	Z+22, r1	; 0x16
   19b38:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   19b3a:	15 8e       	std	Z+29, r1	; 0x1d
   19b3c:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   19b3e:	17 8e       	std	Z+31, r1	; 0x1f
   19b40:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   19b42:	11 a2       	std	Z+33, r1	; 0x21
   19b44:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19b46:	13 a2       	std	Z+35, r1	; 0x23
   19b48:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   19b4a:	61 2c       	mov	r6, r1
   19b4c:	77 24       	eor	r7, r7
   19b4e:	73 94       	inc	r7
   19b50:	9e 01       	movw	r18, r28
   19b52:	2c 5e       	subi	r18, 0xEC	; 236
   19b54:	3f 4f       	sbci	r19, 0xFF	; 255
   19b56:	49 01       	movw	r8, r18
   19b58:	d9 01       	movw	r26, r18
   19b5a:	f3 01       	movw	r30, r6
   19b5c:	1d 92       	st	X+, r1
   19b5e:	31 97       	sbiw	r30, 0x01	; 1
   19b60:	e9 f7       	brne	.-6      	; 0x19b5c <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   19b62:	b9 01       	movw	r22, r18
   19b64:	c7 01       	movw	r24, r14
   19b66:	0e 94 1b c3 	call	0x18636	; 0x18636 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19b6a:	66 e1       	ldi	r22, 0x16	; 22
   19b6c:	79 e0       	ldi	r23, 0x09	; 9
   19b6e:	d7 01       	movw	r26, r14
   19b70:	8d 91       	ld	r24, X+
   19b72:	9c 91       	ld	r25, X
   19b74:	0e 94 05 c1 	call	0x1820a	; 0x1820a <lif_open>
   19b78:	f7 01       	movw	r30, r14
   19b7a:	93 83       	std	Z+3, r25	; 0x03
   19b7c:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   19b7e:	89 2b       	or	r24, r25
   19b80:	09 f4       	brne	.+2      	; 0x19b84 <lif_create_volume+0x1f4>
   19b82:	db c1       	rjmp	.+950    	; 0x19f3a <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19b84:	00 e0       	ldi	r16, 0x00	; 0
   19b86:	11 e0       	ldi	r17, 0x01	; 1
   19b88:	20 e0       	ldi	r18, 0x00	; 0
   19b8a:	30 e0       	ldi	r19, 0x00	; 0
   19b8c:	a9 01       	movw	r20, r18
   19b8e:	b4 01       	movw	r22, r8
   19b90:	c7 01       	movw	r24, r14
   19b92:	0e 94 dc c1 	call	0x183b8	; 0x183b8 <lif_write>
   19b96:	9c 01       	movw	r18, r24
   19b98:	99 0f       	add	r25, r25
   19b9a:	44 0b       	sbc	r20, r20
   19b9c:	55 0b       	sbc	r21, r21
   19b9e:	ca 5e       	subi	r28, 0xEA	; 234
   19ba0:	de 4f       	sbci	r29, 0xFE	; 254
   19ba2:	28 83       	st	Y, r18
   19ba4:	39 83       	std	Y+1, r19	; 0x01
   19ba6:	4a 83       	std	Y+2, r20	; 0x02
   19ba8:	5b 83       	std	Y+3, r21	; 0x03
   19baa:	c6 51       	subi	r28, 0x16	; 22
   19bac:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   19bae:	2f 3f       	cpi	r18, 0xFF	; 255
   19bb0:	31 05       	cpc	r19, r1
   19bb2:	41 05       	cpc	r20, r1
   19bb4:	51 05       	cpc	r21, r1
   19bb6:	09 f0       	breq	.+2      	; 0x19bba <lif_create_volume+0x22a>
   19bb8:	0c f4       	brge	.+2      	; 0x19bbc <lif_create_volume+0x22c>
   19bba:	bf c1       	rjmp	.+894    	; 0x19f3a <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   19bbc:	d4 01       	movw	r26, r8
   19bbe:	f3 01       	movw	r30, r6
   19bc0:	1d 92       	st	X+, r1
   19bc2:	31 97       	sbiw	r30, 0x01	; 1
   19bc4:	e9 f7       	brne	.-6      	; 0x19bc0 <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19bc6:	21 e0       	ldi	r18, 0x01	; 1
   19bc8:	30 e0       	ldi	r19, 0x00	; 0
   19bca:	40 e0       	ldi	r20, 0x00	; 0
   19bcc:	50 e0       	ldi	r21, 0x00	; 0
   19bce:	c6 5e       	subi	r28, 0xE6	; 230
   19bd0:	de 4f       	sbci	r29, 0xFE	; 254
   19bd2:	28 83       	st	Y, r18
   19bd4:	39 83       	std	Y+1, r19	; 0x01
   19bd6:	4a 83       	std	Y+2, r20	; 0x02
   19bd8:	5b 83       	std	Y+3, r21	; 0x03
   19bda:	ca 51       	subi	r28, 0x1A	; 26
   19bdc:	d1 40       	sbci	r29, 0x01	; 1
   19bde:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   19be0:	82 e1       	ldi	r24, 0x12	; 18
   19be2:	9d e3       	ldi	r25, 0x3D	; 61
   19be4:	3c 01       	movw	r6, r24
   19be6:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19be8:	c6 5e       	subi	r28, 0xE6	; 230
   19bea:	de 4f       	sbci	r29, 0xFE	; 254
   19bec:	88 81       	ld	r24, Y
   19bee:	99 81       	ldd	r25, Y+1	; 0x01
   19bf0:	aa 81       	ldd	r26, Y+2	; 0x02
   19bf2:	bb 81       	ldd	r27, Y+3	; 0x03
   19bf4:	ca 51       	subi	r28, 0x1A	; 26
   19bf6:	d1 40       	sbci	r29, 0x01	; 1
   19bf8:	82 15       	cp	r24, r2
   19bfa:	93 05       	cpc	r25, r3
   19bfc:	a4 05       	cpc	r26, r4
   19bfe:	b5 05       	cpc	r27, r5
   19c00:	0c f0       	brlt	.+2      	; 0x19c04 <lif_create_volume+0x274>
   19c02:	55 c0       	rjmp	.+170    	; 0x19cae <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19c04:	00 e0       	ldi	r16, 0x00	; 0
   19c06:	11 e0       	ldi	r17, 0x01	; 1
   19c08:	ca 5e       	subi	r28, 0xEA	; 234
   19c0a:	de 4f       	sbci	r29, 0xFE	; 254
   19c0c:	28 81       	ld	r18, Y
   19c0e:	39 81       	ldd	r19, Y+1	; 0x01
   19c10:	4a 81       	ldd	r20, Y+2	; 0x02
   19c12:	5b 81       	ldd	r21, Y+3	; 0x03
   19c14:	c6 51       	subi	r28, 0x16	; 22
   19c16:	d1 40       	sbci	r29, 0x01	; 1
   19c18:	b6 01       	movw	r22, r12
   19c1a:	c7 01       	movw	r24, r14
   19c1c:	0e 94 dc c1 	call	0x183b8	; 0x183b8 <lif_write>
   19c20:	09 2e       	mov	r0, r25
   19c22:	00 0c       	add	r0, r0
   19c24:	aa 0b       	sbc	r26, r26
   19c26:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19c28:	8f 3f       	cpi	r24, 0xFF	; 255
   19c2a:	91 05       	cpc	r25, r1
   19c2c:	a1 05       	cpc	r26, r1
   19c2e:	b1 05       	cpc	r27, r1
   19c30:	09 f0       	breq	.+2      	; 0x19c34 <lif_create_volume+0x2a4>
   19c32:	0c f4       	brge	.+2      	; 0x19c36 <lif_create_volume+0x2a6>
   19c34:	82 c1       	rjmp	.+772    	; 0x19f3a <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19c36:	ca 5e       	subi	r28, 0xEA	; 234
   19c38:	de 4f       	sbci	r29, 0xFE	; 254
   19c3a:	28 81       	ld	r18, Y
   19c3c:	39 81       	ldd	r19, Y+1	; 0x01
   19c3e:	4a 81       	ldd	r20, Y+2	; 0x02
   19c40:	5b 81       	ldd	r21, Y+3	; 0x03
   19c42:	c6 51       	subi	r28, 0x16	; 22
   19c44:	d1 40       	sbci	r29, 0x01	; 1
   19c46:	28 0f       	add	r18, r24
   19c48:	39 1f       	adc	r19, r25
   19c4a:	4a 1f       	adc	r20, r26
   19c4c:	5b 1f       	adc	r21, r27
   19c4e:	ca 5e       	subi	r28, 0xEA	; 234
   19c50:	de 4f       	sbci	r29, 0xFE	; 254
   19c52:	28 83       	st	Y, r18
   19c54:	39 83       	std	Y+1, r19	; 0x01
   19c56:	4a 83       	std	Y+2, r20	; 0x02
   19c58:	5b 83       	std	Y+3, r21	; 0x03
   19c5a:	c6 51       	subi	r28, 0x16	; 22
   19c5c:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   19c5e:	c6 5e       	subi	r28, 0xE6	; 230
   19c60:	de 4f       	sbci	r29, 0xFE	; 254
   19c62:	88 81       	ld	r24, Y
   19c64:	99 81       	ldd	r25, Y+1	; 0x01
   19c66:	aa 81       	ldd	r26, Y+2	; 0x02
   19c68:	bb 81       	ldd	r27, Y+3	; 0x03
   19c6a:	ca 51       	subi	r28, 0x1A	; 26
   19c6c:	d1 40       	sbci	r29, 0x01	; 1
   19c6e:	ed b7       	in	r30, 0x3d	; 61
   19c70:	fe b7       	in	r31, 0x3e	; 62
   19c72:	84 83       	std	Z+4, r24	; 0x04
   19c74:	95 83       	std	Z+5, r25	; 0x05
   19c76:	a6 83       	std	Z+6, r26	; 0x06
   19c78:	b7 83       	std	Z+7, r27	; 0x07
   19c7a:	61 82       	std	Z+1, r6	; 0x01
   19c7c:	72 82       	std	Z+2, r7	; 0x02
   19c7e:	83 82       	std	Z+3, r8	; 0x03
   19c80:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19c84:	c6 5e       	subi	r28, 0xE6	; 230
   19c86:	de 4f       	sbci	r29, 0xFE	; 254
   19c88:	28 81       	ld	r18, Y
   19c8a:	39 81       	ldd	r19, Y+1	; 0x01
   19c8c:	4a 81       	ldd	r20, Y+2	; 0x02
   19c8e:	5b 81       	ldd	r21, Y+3	; 0x03
   19c90:	ca 51       	subi	r28, 0x1A	; 26
   19c92:	d1 40       	sbci	r29, 0x01	; 1
   19c94:	2f 5f       	subi	r18, 0xFF	; 255
   19c96:	3f 4f       	sbci	r19, 0xFF	; 255
   19c98:	4f 4f       	sbci	r20, 0xFF	; 255
   19c9a:	5f 4f       	sbci	r21, 0xFF	; 255
   19c9c:	c6 5e       	subi	r28, 0xE6	; 230
   19c9e:	de 4f       	sbci	r29, 0xFE	; 254
   19ca0:	28 83       	st	Y, r18
   19ca2:	39 83       	std	Y+1, r19	; 0x01
   19ca4:	4a 83       	std	Y+2, r20	; 0x02
   19ca6:	5b 83       	std	Y+3, r21	; 0x03
   19ca8:	ca 51       	subi	r28, 0x1A	; 26
   19caa:	d1 40       	sbci	r29, 0x01	; 1
   19cac:	9d cf       	rjmp	.-198    	; 0x19be8 <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19cae:	c7 01       	movw	r24, r14
   19cb0:	0e 94 e0 c5 	call	0x18bc0	; 0x18bc0 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19cb4:	8f ef       	ldi	r24, 0xFF	; 255
   19cb6:	9f ef       	ldi	r25, 0xFF	; 255
   19cb8:	f7 01       	movw	r30, r14
   19cba:	e6 5a       	subi	r30, 0xA6	; 166
   19cbc:	ff 4f       	sbci	r31, 0xFF	; 255
   19cbe:	91 83       	std	Z+1, r25	; 0x01
   19cc0:	80 83       	st	Z, r24
   19cc2:	46 01       	movw	r8, r12
   19cc4:	6e 01       	movw	r12, r28
   19cc6:	9c ee       	ldi	r25, 0xEC	; 236
   19cc8:	c9 1a       	sub	r12, r25
   19cca:	9e ef       	ldi	r25, 0xFE	; 254
   19ccc:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19cce:	b4 01       	movw	r22, r8
   19cd0:	c7 01       	movw	r24, r14
   19cd2:	0e 94 27 c4 	call	0x1884e	; 0x1884e <lif_dir2str>
   19cd6:	a0 e2       	ldi	r26, 0x20	; 32
   19cd8:	8a 0e       	add	r8, r26
   19cda:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19cdc:	c8 14       	cp	r12, r8
   19cde:	d9 04       	cpc	r13, r9
   19ce0:	b1 f7       	brne	.-20     	; 0x19cce <lif_create_volume+0x33e>
   19ce2:	a1 2c       	mov	r10, r1
   19ce4:	b1 2c       	mov	r11, r1
   19ce6:	65 01       	movw	r12, r10
   19ce8:	fe 01       	movw	r30, r28
   19cea:	74 96       	adiw	r30, 0x14	; 20
   19cec:	cc 5e       	subi	r28, 0xEC	; 236
   19cee:	de 4f       	sbci	r29, 0xFE	; 254
   19cf0:	f9 83       	std	Y+1, r31	; 0x01
   19cf2:	e8 83       	st	Y, r30
   19cf4:	c4 51       	subi	r28, 0x14	; 20
   19cf6:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19cf8:	84 e6       	ldi	r24, 0x64	; 100
   19cfa:	28 2e       	mov	r2, r24
   19cfc:	31 2c       	mov	r3, r1
   19cfe:	41 2c       	mov	r4, r1
   19d00:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   19d02:	85 e0       	ldi	r24, 0x05	; 5
   19d04:	9d e3       	ldi	r25, 0x3D	; 61
   19d06:	3c 01       	movw	r6, r24
   19d08:	81 2c       	mov	r8, r1
   19d0a:	c6 5e       	subi	r28, 0xE6	; 230
   19d0c:	de 4f       	sbci	r29, 0xFE	; 254
   19d0e:	28 81       	ld	r18, Y
   19d10:	39 81       	ldd	r19, Y+1	; 0x01
   19d12:	4a 81       	ldd	r20, Y+2	; 0x02
   19d14:	5b 81       	ldd	r21, Y+3	; 0x03
   19d16:	ca 51       	subi	r28, 0x1A	; 26
   19d18:	d1 40       	sbci	r29, 0x01	; 1
   19d1a:	2a 0d       	add	r18, r10
   19d1c:	3b 1d       	adc	r19, r11
   19d1e:	4c 1d       	adc	r20, r12
   19d20:	5d 1d       	adc	r21, r13
   19d22:	ce 5d       	subi	r28, 0xDE	; 222
   19d24:	de 4f       	sbci	r29, 0xFE	; 254
   19d26:	28 83       	st	Y, r18
   19d28:	39 83       	std	Y+1, r19	; 0x01
   19d2a:	4a 83       	std	Y+2, r20	; 0x02
   19d2c:	5b 83       	std	Y+3, r21	; 0x03
   19d2e:	c2 52       	subi	r28, 0x22	; 34
   19d30:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19d32:	ca 5d       	subi	r28, 0xDA	; 218
   19d34:	de 4f       	sbci	r29, 0xFE	; 254
   19d36:	88 81       	ld	r24, Y
   19d38:	99 81       	ldd	r25, Y+1	; 0x01
   19d3a:	aa 81       	ldd	r26, Y+2	; 0x02
   19d3c:	bb 81       	ldd	r27, Y+3	; 0x03
   19d3e:	c6 52       	subi	r28, 0x26	; 38
   19d40:	d1 40       	sbci	r29, 0x01	; 1
   19d42:	a8 16       	cp	r10, r24
   19d44:	b9 06       	cpc	r11, r25
   19d46:	ca 06       	cpc	r12, r26
   19d48:	db 06       	cpc	r13, r27
   19d4a:	0c f0       	brlt	.+2      	; 0x19d4e <lif_create_volume+0x3be>
   19d4c:	58 c0       	rjmp	.+176    	; 0x19dfe <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19d4e:	00 e0       	ldi	r16, 0x00	; 0
   19d50:	11 e0       	ldi	r17, 0x01	; 1
   19d52:	ca 5e       	subi	r28, 0xEA	; 234
   19d54:	de 4f       	sbci	r29, 0xFE	; 254
   19d56:	28 81       	ld	r18, Y
   19d58:	39 81       	ldd	r19, Y+1	; 0x01
   19d5a:	4a 81       	ldd	r20, Y+2	; 0x02
   19d5c:	5b 81       	ldd	r21, Y+3	; 0x03
   19d5e:	c6 51       	subi	r28, 0x16	; 22
   19d60:	d1 40       	sbci	r29, 0x01	; 1
   19d62:	be 01       	movw	r22, r28
   19d64:	6c 5e       	subi	r22, 0xEC	; 236
   19d66:	7f 4f       	sbci	r23, 0xFF	; 255
   19d68:	c7 01       	movw	r24, r14
   19d6a:	0e 94 dc c1 	call	0x183b8	; 0x183b8 <lif_write>
   19d6e:	09 2e       	mov	r0, r25
   19d70:	00 0c       	add	r0, r0
   19d72:	aa 0b       	sbc	r26, r26
   19d74:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19d76:	8f 3f       	cpi	r24, 0xFF	; 255
   19d78:	91 05       	cpc	r25, r1
   19d7a:	a1 05       	cpc	r26, r1
   19d7c:	b1 05       	cpc	r27, r1
   19d7e:	09 f0       	breq	.+2      	; 0x19d82 <lif_create_volume+0x3f2>
   19d80:	0c f4       	brge	.+2      	; 0x19d84 <lif_create_volume+0x3f4>
   19d82:	db c0       	rjmp	.+438    	; 0x19f3a <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19d84:	ca 5e       	subi	r28, 0xEA	; 234
   19d86:	de 4f       	sbci	r29, 0xFE	; 254
   19d88:	28 81       	ld	r18, Y
   19d8a:	39 81       	ldd	r19, Y+1	; 0x01
   19d8c:	4a 81       	ldd	r20, Y+2	; 0x02
   19d8e:	5b 81       	ldd	r21, Y+3	; 0x03
   19d90:	c6 51       	subi	r28, 0x16	; 22
   19d92:	d1 40       	sbci	r29, 0x01	; 1
   19d94:	28 0f       	add	r18, r24
   19d96:	39 1f       	adc	r19, r25
   19d98:	4a 1f       	adc	r20, r26
   19d9a:	5b 1f       	adc	r21, r27
   19d9c:	ca 5e       	subi	r28, 0xEA	; 234
   19d9e:	de 4f       	sbci	r29, 0xFE	; 254
   19da0:	28 83       	st	Y, r18
   19da2:	39 83       	std	Y+1, r19	; 0x01
   19da4:	4a 83       	std	Y+2, r20	; 0x02
   19da6:	5b 83       	std	Y+3, r21	; 0x03
   19da8:	c6 51       	subi	r28, 0x16	; 22
   19daa:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19dac:	ce 5d       	subi	r28, 0xDE	; 222
   19dae:	de 4f       	sbci	r29, 0xFE	; 254
   19db0:	68 81       	ld	r22, Y
   19db2:	79 81       	ldd	r23, Y+1	; 0x01
   19db4:	8a 81       	ldd	r24, Y+2	; 0x02
   19db6:	9b 81       	ldd	r25, Y+3	; 0x03
   19db8:	c2 52       	subi	r28, 0x22	; 34
   19dba:	d1 40       	sbci	r29, 0x01	; 1
   19dbc:	a2 01       	movw	r20, r4
   19dbe:	91 01       	movw	r18, r2
   19dc0:	0e 94 68 e6 	call	0x1ccd0	; 0x1ccd0 <__divmodsi4>
   19dc4:	67 2b       	or	r22, r23
   19dc6:	68 2b       	or	r22, r24
   19dc8:	69 2b       	or	r22, r25
   19dca:	99 f4       	brne	.+38     	; 0x19df2 <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   19dcc:	ce 5d       	subi	r28, 0xDE	; 222
   19dce:	de 4f       	sbci	r29, 0xFE	; 254
   19dd0:	88 81       	ld	r24, Y
   19dd2:	99 81       	ldd	r25, Y+1	; 0x01
   19dd4:	aa 81       	ldd	r26, Y+2	; 0x02
   19dd6:	bb 81       	ldd	r27, Y+3	; 0x03
   19dd8:	c2 52       	subi	r28, 0x22	; 34
   19dda:	d1 40       	sbci	r29, 0x01	; 1
   19ddc:	ed b7       	in	r30, 0x3d	; 61
   19dde:	fe b7       	in	r31, 0x3e	; 62
   19de0:	84 83       	std	Z+4, r24	; 0x04
   19de2:	95 83       	std	Z+5, r25	; 0x05
   19de4:	a6 83       	std	Z+6, r26	; 0x06
   19de6:	b7 83       	std	Z+7, r27	; 0x07
   19de8:	61 82       	std	Z+1, r6	; 0x01
   19dea:	72 82       	std	Z+2, r7	; 0x02
   19dec:	83 82       	std	Z+3, r8	; 0x03
   19dee:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19df2:	ff ef       	ldi	r31, 0xFF	; 255
   19df4:	af 1a       	sub	r10, r31
   19df6:	bf 0a       	sbc	r11, r31
   19df8:	cf 0a       	sbc	r12, r31
   19dfa:	df 0a       	sbc	r13, r31
   19dfc:	86 cf       	rjmp	.-244    	; 0x19d0a <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19dfe:	80 e0       	ldi	r24, 0x00	; 0
   19e00:	91 e0       	ldi	r25, 0x01	; 1
   19e02:	cc 5e       	subi	r28, 0xEC	; 236
   19e04:	de 4f       	sbci	r29, 0xFE	; 254
   19e06:	a8 81       	ld	r26, Y
   19e08:	b9 81       	ldd	r27, Y+1	; 0x01
   19e0a:	c4 51       	subi	r28, 0x14	; 20
   19e0c:	d1 40       	sbci	r29, 0x01	; 1
   19e0e:	fc 01       	movw	r30, r24
   19e10:	1d 92       	st	X+, r1
   19e12:	31 97       	sbiw	r30, 0x01	; 1
   19e14:	e9 f7       	brne	.-6      	; 0x19e10 <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   19e16:	81 2c       	mov	r8, r1
   19e18:	91 2c       	mov	r9, r1
   19e1a:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19e1c:	88 ef       	ldi	r24, 0xF8	; 248
   19e1e:	9c e3       	ldi	r25, 0x3C	; 60
   19e20:	9c 01       	movw	r18, r24
   19e22:	40 e0       	ldi	r20, 0x00	; 0
   19e24:	c6 5e       	subi	r28, 0xE6	; 230
   19e26:	de 4f       	sbci	r29, 0xFE	; 254
   19e28:	28 83       	st	Y, r18
   19e2a:	39 83       	std	Y+1, r19	; 0x01
   19e2c:	4a 83       	std	Y+2, r20	; 0x02
   19e2e:	ca 51       	subi	r28, 0x1A	; 26
   19e30:	d1 40       	sbci	r29, 0x01	; 1
   19e32:	ce 5d       	subi	r28, 0xDE	; 222
   19e34:	de 4f       	sbci	r29, 0xFE	; 254
   19e36:	48 80       	ld	r4, Y
   19e38:	59 80       	ldd	r5, Y+1	; 0x01
   19e3a:	6a 80       	ldd	r6, Y+2	; 0x02
   19e3c:	7b 80       	ldd	r7, Y+3	; 0x03
   19e3e:	c2 52       	subi	r28, 0x22	; 34
   19e40:	d1 40       	sbci	r29, 0x01	; 1
   19e42:	48 0c       	add	r4, r8
   19e44:	59 1c       	adc	r5, r9
   19e46:	6a 1c       	adc	r6, r10
   19e48:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19e4a:	c2 5e       	subi	r28, 0xE2	; 226
   19e4c:	de 4f       	sbci	r29, 0xFE	; 254
   19e4e:	28 81       	ld	r18, Y
   19e50:	39 81       	ldd	r19, Y+1	; 0x01
   19e52:	4a 81       	ldd	r20, Y+2	; 0x02
   19e54:	5b 81       	ldd	r21, Y+3	; 0x03
   19e56:	ce 51       	subi	r28, 0x1E	; 30
   19e58:	d1 40       	sbci	r29, 0x01	; 1
   19e5a:	82 16       	cp	r8, r18
   19e5c:	93 06       	cpc	r9, r19
   19e5e:	a4 06       	cpc	r10, r20
   19e60:	b5 06       	cpc	r11, r21
   19e62:	0c f0       	brlt	.+2      	; 0x19e66 <lif_create_volume+0x4d6>
   19e64:	53 c0       	rjmp	.+166    	; 0x19f0c <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19e66:	00 e0       	ldi	r16, 0x00	; 0
   19e68:	11 e0       	ldi	r17, 0x01	; 1
   19e6a:	ca 5e       	subi	r28, 0xEA	; 234
   19e6c:	de 4f       	sbci	r29, 0xFE	; 254
   19e6e:	28 81       	ld	r18, Y
   19e70:	39 81       	ldd	r19, Y+1	; 0x01
   19e72:	4a 81       	ldd	r20, Y+2	; 0x02
   19e74:	5b 81       	ldd	r21, Y+3	; 0x03
   19e76:	c6 51       	subi	r28, 0x16	; 22
   19e78:	d1 40       	sbci	r29, 0x01	; 1
   19e7a:	be 01       	movw	r22, r28
   19e7c:	6c 5e       	subi	r22, 0xEC	; 236
   19e7e:	7f 4f       	sbci	r23, 0xFF	; 255
   19e80:	c7 01       	movw	r24, r14
   19e82:	0e 94 dc c1 	call	0x183b8	; 0x183b8 <lif_write>
   19e86:	09 2e       	mov	r0, r25
   19e88:	00 0c       	add	r0, r0
   19e8a:	aa 0b       	sbc	r26, r26
   19e8c:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19e8e:	8f 3f       	cpi	r24, 0xFF	; 255
   19e90:	91 05       	cpc	r25, r1
   19e92:	a1 05       	cpc	r26, r1
   19e94:	b1 05       	cpc	r27, r1
   19e96:	09 f0       	breq	.+2      	; 0x19e9a <lif_create_volume+0x50a>
   19e98:	0c f4       	brge	.+2      	; 0x19e9c <lif_create_volume+0x50c>
   19e9a:	4f c0       	rjmp	.+158    	; 0x19f3a <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19e9c:	ca 5e       	subi	r28, 0xEA	; 234
   19e9e:	de 4f       	sbci	r29, 0xFE	; 254
   19ea0:	28 81       	ld	r18, Y
   19ea2:	39 81       	ldd	r19, Y+1	; 0x01
   19ea4:	4a 81       	ldd	r20, Y+2	; 0x02
   19ea6:	5b 81       	ldd	r21, Y+3	; 0x03
   19ea8:	c6 51       	subi	r28, 0x16	; 22
   19eaa:	d1 40       	sbci	r29, 0x01	; 1
   19eac:	28 0f       	add	r18, r24
   19eae:	39 1f       	adc	r19, r25
   19eb0:	4a 1f       	adc	r20, r26
   19eb2:	5b 1f       	adc	r21, r27
   19eb4:	ca 5e       	subi	r28, 0xEA	; 234
   19eb6:	de 4f       	sbci	r29, 0xFE	; 254
   19eb8:	28 83       	st	Y, r18
   19eba:	39 83       	std	Y+1, r19	; 0x01
   19ebc:	4a 83       	std	Y+2, r20	; 0x02
   19ebe:	5b 83       	std	Y+3, r21	; 0x03
   19ec0:	c6 51       	subi	r28, 0x16	; 22
   19ec2:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19ec4:	c3 01       	movw	r24, r6
   19ec6:	b2 01       	movw	r22, r4
   19ec8:	24 e6       	ldi	r18, 0x64	; 100
   19eca:	30 e0       	ldi	r19, 0x00	; 0
   19ecc:	40 e0       	ldi	r20, 0x00	; 0
   19ece:	50 e0       	ldi	r21, 0x00	; 0
   19ed0:	0e 94 68 e6 	call	0x1ccd0	; 0x1ccd0 <__divmodsi4>
   19ed4:	67 2b       	or	r22, r23
   19ed6:	68 2b       	or	r22, r24
   19ed8:	69 2b       	or	r22, r25
   19eda:	91 f4       	brne	.+36     	; 0x19f00 <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   19edc:	ed b7       	in	r30, 0x3d	; 61
   19ede:	fe b7       	in	r31, 0x3e	; 62
   19ee0:	44 82       	std	Z+4, r4	; 0x04
   19ee2:	55 82       	std	Z+5, r5	; 0x05
   19ee4:	66 82       	std	Z+6, r6	; 0x06
   19ee6:	77 82       	std	Z+7, r7	; 0x07
   19ee8:	c6 5e       	subi	r28, 0xE6	; 230
   19eea:	de 4f       	sbci	r29, 0xFE	; 254
   19eec:	28 81       	ld	r18, Y
   19eee:	39 81       	ldd	r19, Y+1	; 0x01
   19ef0:	4a 81       	ldd	r20, Y+2	; 0x02
   19ef2:	ca 51       	subi	r28, 0x1A	; 26
   19ef4:	d1 40       	sbci	r29, 0x01	; 1
   19ef6:	21 83       	std	Z+1, r18	; 0x01
   19ef8:	32 83       	std	Z+2, r19	; 0x02
   19efa:	43 83       	std	Z+3, r20	; 0x03
   19efc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19f00:	ff ef       	ldi	r31, 0xFF	; 255
   19f02:	8f 1a       	sub	r8, r31
   19f04:	9f 0a       	sbc	r9, r31
   19f06:	af 0a       	sbc	r10, r31
   19f08:	bf 0a       	sbc	r11, r31
   19f0a:	93 cf       	rjmp	.-218    	; 0x19e32 <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19f0c:	ed b7       	in	r30, 0x3d	; 61
   19f0e:	fe b7       	in	r31, 0x3e	; 62
   19f10:	44 82       	std	Z+4, r4	; 0x04
   19f12:	55 82       	std	Z+5, r5	; 0x05
   19f14:	66 82       	std	Z+6, r6	; 0x06
   19f16:	77 82       	std	Z+7, r7	; 0x07
   19f18:	8b ee       	ldi	r24, 0xEB	; 235
   19f1a:	9c e3       	ldi	r25, 0x3C	; 60
   19f1c:	a0 e0       	ldi	r26, 0x00	; 0
   19f1e:	81 83       	std	Z+1, r24	; 0x01
   19f20:	92 83       	std	Z+2, r25	; 0x02
   19f22:	a3 83       	std	Z+3, r26	; 0x03
   19f24:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19f28:	8f ef       	ldi	r24, 0xFF	; 255
   19f2a:	9f ef       	ldi	r25, 0xFF	; 255
   19f2c:	f7 01       	movw	r30, r14
   19f2e:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19f30:	80 a3       	std	Z+32, r24	; 0x20
   19f32:	c7 01       	movw	r24, r14
   19f34:	1a d8       	rcall	.-4044   	; 0x18f6a <lif_check_volume>
   19f36:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19f38:	19 f4       	brne	.+6      	; 0x19f40 <lif_create_volume+0x5b0>
   19f3a:	c7 01       	movw	r24, r14
   19f3c:	b6 da       	rcall	.-2708   	; 0x194aa <lif_close_volume>
   19f3e:	08 c0       	rjmp	.+16     	; 0x19f50 <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   19f40:	c7 01       	movw	r24, r14
   19f42:	1c dc       	rcall	.-1992   	; 0x1977c <lif_updatefree>
   19f44:	6c 01       	movw	r12, r24
   19f46:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19f48:	31 f4       	brne	.+12     	; 0x19f56 <lif_create_volume+0x5c6>
   19f4a:	c7 01       	movw	r24, r14
   19f4c:	ae da       	rcall	.-2724   	; 0x194aa <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   19f4e:	04 c0       	rjmp	.+8      	; 0x19f58 <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   19f50:	c1 2c       	mov	r12, r1
   19f52:	d1 2c       	mov	r13, r1
   19f54:	01 c0       	rjmp	.+2      	; 0x19f58 <lif_create_volume+0x5c8>
   19f56:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   19f58:	c6 01       	movw	r24, r12
   19f5a:	c7 5d       	subi	r28, 0xD7	; 215
   19f5c:	de 4f       	sbci	r29, 0xFE	; 254
   19f5e:	e2 e1       	ldi	r30, 0x12	; 18
   19f60:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

00019f64 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   19f64:	ad e1       	ldi	r26, 0x1D	; 29
   19f66:	b0 e0       	ldi	r27, 0x00	; 0
   19f68:	e8 eb       	ldi	r30, 0xB8	; 184
   19f6a:	ff ec       	ldi	r31, 0xCF	; 207
   19f6c:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
   19f70:	9d 8f       	std	Y+29, r25	; 0x1d
   19f72:	8c 8f       	std	Y+28, r24	; 0x1c
   19f74:	4a 01       	movw	r8, r20
   19f76:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   19f78:	fc 01       	movw	r30, r24
   19f7a:	c4 84       	ldd	r12, Z+12	; 0x0c
   19f7c:	d5 84       	ldd	r13, Z+13	; 0x0d
   19f7e:	e6 84       	ldd	r14, Z+14	; 0x0e
   19f80:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   19f82:	fc db       	rcall	.-2056   	; 0x1977c <lif_updatefree>
   19f84:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19f86:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19f88:	40 8d       	ldd	r20, Z+24	; 0x18
   19f8a:	51 8d       	ldd	r21, Z+25	; 0x19
   19f8c:	62 8d       	ldd	r22, Z+26	; 0x1a
   19f8e:	73 8d       	ldd	r23, Z+27	; 0x1b
   19f90:	89 2b       	or	r24, r25
   19f92:	99 f4       	brne	.+38     	; 0x19fba <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   19f94:	ed b7       	in	r30, 0x3d	; 61
   19f96:	fe b7       	in	r31, 0x3e	; 62
   19f98:	80 86       	std	Z+8, r8	; 0x08
   19f9a:	91 86       	std	Z+9, r9	; 0x09
   19f9c:	a2 86       	std	Z+10, r10	; 0x0a
   19f9e:	b3 86       	std	Z+11, r11	; 0x0b
   19fa0:	44 83       	std	Z+4, r20	; 0x04
   19fa2:	55 83       	std	Z+5, r21	; 0x05
   19fa4:	66 83       	std	Z+6, r22	; 0x06
   19fa6:	77 83       	std	Z+7, r23	; 0x07
   19fa8:	8c e0       	ldi	r24, 0x0C	; 12
   19faa:	9c e3       	ldi	r25, 0x3C	; 60
   19fac:	a0 e0       	ldi	r26, 0x00	; 0
   19fae:	81 83       	std	Z+1, r24	; 0x01
   19fb0:	92 83       	std	Z+2, r25	; 0x02
   19fb2:	a3 83       	std	Z+3, r26	; 0x03
   19fb4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   19fb8:	2f c1       	rjmp	.+606    	; 0x1a218 <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   19fba:	48 15       	cp	r20, r8
   19fbc:	59 05       	cpc	r21, r9
   19fbe:	6a 05       	cpc	r22, r10
   19fc0:	7b 05       	cpc	r23, r11
   19fc2:	c4 f0       	brlt	.+48     	; 0x19ff4 <lif_newdir+0x90>
   19fc4:	44 24       	eor	r4, r4
   19fc6:	43 94       	inc	r4
   19fc8:	51 2c       	mov	r5, r1
   19fca:	61 2c       	mov	r6, r1
   19fcc:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19fce:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19fd0:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19fd2:	86 5a       	subi	r24, 0xA6	; 166
   19fd4:	9f 4f       	sbci	r25, 0xFF	; 255
   19fd6:	9d 8b       	std	Y+21, r25	; 0x15
   19fd8:	8c 8b       	std	Y+20, r24	; 0x14
   19fda:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19fdc:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19fde:	e4 5a       	subi	r30, 0xA4	; 164
   19fe0:	ff 4f       	sbci	r31, 0xFF	; 255
   19fe2:	fb 8b       	std	Y+19, r31	; 0x13
   19fe4:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19fe6:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19fe8:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19fea:	80 5a       	subi	r24, 0xA0	; 160
   19fec:	9f 4f       	sbci	r25, 0xFF	; 255
   19fee:	9f 8b       	std	Y+23, r25	; 0x17
   19ff0:	8e 8b       	std	Y+22, r24	; 0x16
   19ff2:	21 c0       	rjmp	.+66     	; 0x1a036 <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   19ff4:	ed b7       	in	r30, 0x3d	; 61
   19ff6:	fe b7       	in	r31, 0x3e	; 62
   19ff8:	44 83       	std	Z+4, r20	; 0x04
   19ffa:	55 83       	std	Z+5, r21	; 0x05
   19ffc:	66 83       	std	Z+6, r22	; 0x06
   19ffe:	77 83       	std	Z+7, r23	; 0x07
   1a000:	83 ee       	ldi	r24, 0xE3	; 227
   1a002:	9b e3       	ldi	r25, 0x3B	; 59
   1a004:	a0 e0       	ldi	r26, 0x00	; 0
   1a006:	81 83       	std	Z+1, r24	; 0x01
   1a008:	92 83       	std	Z+2, r25	; 0x02
   1a00a:	a3 83       	std	Z+3, r26	; 0x03
   1a00c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1a010:	03 c1       	rjmp	.+518    	; 0x1a218 <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a012:	ec 89       	ldd	r30, Y+20	; 0x14
   1a014:	fd 89       	ldd	r31, Y+21	; 0x15
   1a016:	80 81       	ld	r24, Z
   1a018:	91 81       	ldd	r25, Z+1	; 0x01
   1a01a:	8f 3f       	cpi	r24, 0xFF	; 255
   1a01c:	ff ef       	ldi	r31, 0xFF	; 255
   1a01e:	9f 07       	cpc	r25, r31
   1a020:	a1 f0       	breq	.+40     	; 0x1a04a <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   1a022:	89 2b       	or	r24, r25
   1a024:	09 f0       	breq	.+2      	; 0x1a028 <lif_newdir+0xc4>
   1a026:	ce c0       	rjmp	.+412    	; 0x1a1c4 <lif_newdir+0x260>
        {
            if(freestate == 0)
   1a028:	61 14       	cp	r6, r1
   1a02a:	71 04       	cpc	r7, r1
   1a02c:	09 f4       	brne	.+2      	; 0x1a030 <lif_newdir+0xcc>
   1a02e:	c1 c0       	rjmp	.+386    	; 0x1a1b2 <lif_newdir+0x24e>
   1a030:	ff ef       	ldi	r31, 0xFF	; 255
   1a032:	4f 1a       	sub	r4, r31
   1a034:	5f 0a       	sbc	r5, r31
   1a036:	82 01       	movw	r16, r4
   1a038:	01 50       	subi	r16, 0x01	; 1
   1a03a:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a03c:	b8 01       	movw	r22, r16
   1a03e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a040:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a042:	c1 da       	rcall	.-2686   	; 0x195c6 <lif_readdirindex>
   1a044:	89 2b       	or	r24, r25
   1a046:	29 f7       	brne	.-54     	; 0x1a012 <lif_newdir+0xae>
   1a048:	e7 c0       	rjmp	.+462    	; 0x1a218 <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   1a04a:	22 e0       	ldi	r18, 0x02	; 2
   1a04c:	62 16       	cp	r6, r18
   1a04e:	71 04       	cpc	r7, r1
   1a050:	09 f0       	breq	.+2      	; 0x1a054 <lif_newdir+0xf0>
   1a052:	46 c0       	rjmp	.+140    	; 0x1a0e0 <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   1a054:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a056:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a058:	0e 94 e0 c5 	call	0x18bc0	; 0x18bc0 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a05c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a05e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a060:	e4 5a       	subi	r30, 0xA4	; 164
   1a062:	ff 4f       	sbci	r31, 0xFF	; 255
   1a064:	88 8d       	ldd	r24, Y+24	; 0x18
   1a066:	80 83       	st	Z, r24
   1a068:	99 8d       	ldd	r25, Y+25	; 0x19
   1a06a:	91 83       	std	Z+1, r25	; 0x01
   1a06c:	2a 8d       	ldd	r18, Y+26	; 0x1a
   1a06e:	22 83       	std	Z+2, r18	; 0x02
   1a070:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1a072:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   1a074:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a076:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a078:	e0 5a       	subi	r30, 0xA0	; 160
   1a07a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a07c:	80 82       	st	Z, r8
   1a07e:	91 82       	std	Z+1, r9	; 0x01
   1a080:	a2 82       	std	Z+2, r10	; 0x02
   1a082:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   1a084:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a086:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a088:	84 89       	ldd	r24, Z+20	; 0x14
   1a08a:	95 89       	ldd	r25, Z+21	; 0x15
   1a08c:	a6 89       	ldd	r26, Z+22	; 0x16
   1a08e:	b7 89       	ldd	r27, Z+23	; 0x17
   1a090:	88 0d       	add	r24, r8
   1a092:	99 1d       	adc	r25, r9
   1a094:	aa 1d       	adc	r26, r10
   1a096:	bb 1d       	adc	r27, r11
   1a098:	84 8b       	std	Z+20, r24	; 0x14
   1a09a:	95 8b       	std	Z+21, r25	; 0x15
   1a09c:	a6 8b       	std	Z+22, r26	; 0x16
   1a09e:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   1a0a0:	80 8d       	ldd	r24, Z+24	; 0x18
   1a0a2:	91 8d       	ldd	r25, Z+25	; 0x19
   1a0a4:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a0a6:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a0a8:	88 19       	sub	r24, r8
   1a0aa:	99 09       	sbc	r25, r9
   1a0ac:	aa 09       	sbc	r26, r10
   1a0ae:	bb 09       	sbc	r27, r11
   1a0b0:	80 8f       	std	Z+24, r24	; 0x18
   1a0b2:	91 8f       	std	Z+25, r25	; 0x19
   1a0b4:	a2 8f       	std	Z+26, r26	; 0x1a
   1a0b6:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   1a0b8:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a0ba:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a0bc:	01 96       	adiw	r24, 0x01	; 1
   1a0be:	95 8f       	std	Z+29, r25	; 0x1d
   1a0c0:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   1a0c2:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a0c4:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a0c6:	01 97       	sbiw	r24, 0x01	; 1
   1a0c8:	97 8f       	std	Z+31, r25	; 0x1f
   1a0ca:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   1a0cc:	20 a2       	std	Z+32, r2	; 0x20
   1a0ce:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a0d0:	b1 01       	movw	r22, r2
   1a0d2:	cf 01       	movw	r24, r30
   1a0d4:	df da       	rcall	.-2626   	; 0x19694 <lif_writedirindex>
   1a0d6:	89 2b       	or	r24, r25
   1a0d8:	09 f4       	brne	.+2      	; 0x1a0dc <lif_newdir+0x178>
   1a0da:	9e c0       	rjmp	.+316    	; 0x1a218 <lif_newdir+0x2b4>
   1a0dc:	c1 01       	movw	r24, r2
   1a0de:	9e c0       	rjmp	.+316    	; 0x1a21c <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   1a0e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a0e4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a0e8:	92 ff       	sbrs	r25, 2
   1a0ea:	1e c0       	rjmp	.+60     	; 0x1a128 <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   1a0ec:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a0ee:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a0f0:	80 8d       	ldd	r24, Z+24	; 0x18
   1a0f2:	91 8d       	ldd	r25, Z+25	; 0x19
   1a0f4:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a0f6:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a0f8:	ed b7       	in	r30, 0x3d	; 61
   1a0fa:	fe b7       	in	r31, 0x3e	; 62
   1a0fc:	86 87       	std	Z+14, r24	; 0x0e
   1a0fe:	97 87       	std	Z+15, r25	; 0x0f
   1a100:	a0 8b       	std	Z+16, r26	; 0x10
   1a102:	b1 8b       	std	Z+17, r27	; 0x11
   1a104:	82 86       	std	Z+10, r8	; 0x0a
   1a106:	93 86       	std	Z+11, r9	; 0x0b
   1a108:	a4 86       	std	Z+12, r10	; 0x0c
   1a10a:	b5 86       	std	Z+13, r11	; 0x0d
   1a10c:	c6 82       	std	Z+6, r12	; 0x06
   1a10e:	d7 82       	std	Z+7, r13	; 0x07
   1a110:	e0 86       	std	Z+8, r14	; 0x08
   1a112:	f1 86       	std	Z+9, r15	; 0x09
   1a114:	15 83       	std	Z+5, r17	; 0x05
   1a116:	04 83       	std	Z+4, r16	; 0x04
   1a118:	82 e9       	ldi	r24, 0x92	; 146
   1a11a:	9b e3       	ldi	r25, 0x3B	; 59
   1a11c:	a0 e0       	ldi	r26, 0x00	; 0
   1a11e:	81 83       	std	Z+1, r24	; 0x01
   1a120:	92 83       	std	Z+2, r25	; 0x02
   1a122:	a3 83       	std	Z+3, r26	; 0x03
   1a124:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a128:	b8 01       	movw	r22, r16
   1a12a:	6f 5f       	subi	r22, 0xFF	; 255
   1a12c:	7f 4f       	sbci	r23, 0xFF	; 255
   1a12e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a130:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a132:	0c db       	rcall	.-2536   	; 0x1974c <lif_writedirEOF>
   1a134:	89 2b       	or	r24, r25
   1a136:	09 f4       	brne	.+2      	; 0x1a13a <lif_newdir+0x1d6>
   1a138:	6f c0       	rjmp	.+222    	; 0x1a218 <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   1a13a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a13c:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a13e:	0e 94 e0 c5 	call	0x18bc0	; 0x18bc0 <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   1a142:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a144:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a146:	e4 5a       	subi	r30, 0xA4	; 164
   1a148:	ff 4f       	sbci	r31, 0xFF	; 255
   1a14a:	c0 82       	st	Z, r12
   1a14c:	d1 82       	std	Z+1, r13	; 0x01
   1a14e:	e2 82       	std	Z+2, r14	; 0x02
   1a150:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   1a152:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a154:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a156:	e0 5a       	subi	r30, 0xA0	; 160
   1a158:	ff 4f       	sbci	r31, 0xFF	; 255
   1a15a:	80 82       	st	Z, r8
   1a15c:	91 82       	std	Z+1, r9	; 0x01
   1a15e:	a2 82       	std	Z+2, r10	; 0x02
   1a160:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   1a162:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a164:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a166:	84 89       	ldd	r24, Z+20	; 0x14
   1a168:	95 89       	ldd	r25, Z+21	; 0x15
   1a16a:	a6 89       	ldd	r26, Z+22	; 0x16
   1a16c:	b7 89       	ldd	r27, Z+23	; 0x17
   1a16e:	88 0d       	add	r24, r8
   1a170:	99 1d       	adc	r25, r9
   1a172:	aa 1d       	adc	r26, r10
   1a174:	bb 1d       	adc	r27, r11
   1a176:	84 8b       	std	Z+20, r24	; 0x14
   1a178:	95 8b       	std	Z+21, r25	; 0x15
   1a17a:	a6 8b       	std	Z+22, r26	; 0x16
   1a17c:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   1a17e:	80 8d       	ldd	r24, Z+24	; 0x18
   1a180:	91 8d       	ldd	r25, Z+25	; 0x19
   1a182:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a184:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a186:	88 19       	sub	r24, r8
   1a188:	99 09       	sbc	r25, r9
   1a18a:	aa 09       	sbc	r26, r10
   1a18c:	bb 09       	sbc	r27, r11
   1a18e:	80 8f       	std	Z+24, r24	; 0x18
   1a190:	91 8f       	std	Z+25, r25	; 0x19
   1a192:	a2 8f       	std	Z+26, r26	; 0x1a
   1a194:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   1a196:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a198:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a19a:	01 96       	adiw	r24, 0x01	; 1
   1a19c:	95 8f       	std	Z+29, r25	; 0x1d
   1a19e:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   1a1a0:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a1a2:	00 a3       	std	Z+32, r16	; 0x20
   1a1a4:	b8 01       	movw	r22, r16
   1a1a6:	cf 01       	movw	r24, r30
   1a1a8:	75 da       	rcall	.-2838   	; 0x19694 <lif_writedirindex>
   1a1aa:	89 2b       	or	r24, r25
   1a1ac:	a9 f1       	breq	.+106    	; 0x1a218 <lif_newdir+0x2b4>
   1a1ae:	c8 01       	movw	r24, r16
   1a1b0:	35 c0       	rjmp	.+106    	; 0x1a21c <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a1b2:	c8 8e       	std	Y+24, r12	; 0x18
   1a1b4:	d9 8e       	std	Y+25, r13	; 0x19
   1a1b6:	ea 8e       	std	Y+26, r14	; 0x1a
   1a1b8:	fb 8e       	std	Y+27, r15	; 0x1b
   1a1ba:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a1bc:	66 24       	eor	r6, r6
   1a1be:	63 94       	inc	r6
   1a1c0:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   1a1c2:	36 cf       	rjmp	.-404    	; 0x1a030 <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   1a1c4:	f1 e0       	ldi	r31, 0x01	; 1
   1a1c6:	6f 16       	cp	r6, r31
   1a1c8:	71 04       	cpc	r7, r1
   1a1ca:	a9 f4       	brne	.+42     	; 0x1a1f6 <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a1cc:	ea 89       	ldd	r30, Y+18	; 0x12
   1a1ce:	fb 89       	ldd	r31, Y+19	; 0x13
   1a1d0:	80 81       	ld	r24, Z
   1a1d2:	91 81       	ldd	r25, Z+1	; 0x01
   1a1d4:	a2 81       	ldd	r26, Z+2	; 0x02
   1a1d6:	b3 81       	ldd	r27, Z+3	; 0x03
   1a1d8:	8c 19       	sub	r24, r12
   1a1da:	9d 09       	sbc	r25, r13
   1a1dc:	ae 09       	sbc	r26, r14
   1a1de:	bf 09       	sbc	r27, r15
   1a1e0:	88 15       	cp	r24, r8
   1a1e2:	99 05       	cpc	r25, r9
   1a1e4:	aa 05       	cpc	r26, r10
   1a1e6:	bb 05       	cpc	r27, r11
   1a1e8:	1c f4       	brge	.+6      	; 0x1a1f0 <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   1a1ea:	61 2c       	mov	r6, r1
   1a1ec:	71 2c       	mov	r7, r1
   1a1ee:	03 c0       	rjmp	.+6      	; 0x1a1f6 <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   1a1f0:	82 e0       	ldi	r24, 0x02	; 2
   1a1f2:	68 2e       	mov	r6, r24
   1a1f4:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a1f6:	ea 89       	ldd	r30, Y+18	; 0x12
   1a1f8:	fb 89       	ldd	r31, Y+19	; 0x13
   1a1fa:	c0 80       	ld	r12, Z
   1a1fc:	d1 80       	ldd	r13, Z+1	; 0x01
   1a1fe:	e2 80       	ldd	r14, Z+2	; 0x02
   1a200:	f3 80       	ldd	r15, Z+3	; 0x03
   1a202:	ee 89       	ldd	r30, Y+22	; 0x16
   1a204:	ff 89       	ldd	r31, Y+23	; 0x17
   1a206:	80 81       	ld	r24, Z
   1a208:	91 81       	ldd	r25, Z+1	; 0x01
   1a20a:	a2 81       	ldd	r26, Z+2	; 0x02
   1a20c:	b3 81       	ldd	r27, Z+3	; 0x03
   1a20e:	c8 0e       	add	r12, r24
   1a210:	d9 1e       	adc	r13, r25
   1a212:	ea 1e       	adc	r14, r26
   1a214:	fb 1e       	adc	r15, r27
   1a216:	0c cf       	rjmp	.-488    	; 0x1a030 <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   1a218:	8f ef       	ldi	r24, 0xFF	; 255
   1a21a:	9f ef       	ldi	r25, 0xFF	; 255
}
   1a21c:	6d 96       	adiw	r28, 0x1d	; 29
   1a21e:	e2 e1       	ldi	r30, 0x12	; 18
   1a220:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0001a224 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a224:	a9 e3       	ldi	r26, 0x39	; 57
   1a226:	b1 e0       	ldi	r27, 0x01	; 1
   1a228:	e8 e1       	ldi	r30, 0x18	; 24
   1a22a:	f1 ed       	ldi	r31, 0xD1	; 209
   1a22c:	0c 94 b9 e6 	jmp	0x1cd72	; 0x1cd72 <__prologue_saves__+0xc>
   1a230:	6c 01       	movw	r12, r24
   1a232:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   1a234:	be 01       	movw	r22, r28
   1a236:	66 5f       	subi	r22, 0xF6	; 246
   1a238:	7e 4f       	sbci	r23, 0xFE	; 254
   1a23a:	0e 94 2f c1 	call	0x1825e	; 0x1825e <lif_stat>
   1a23e:	5c 01       	movw	r10, r24
    if(sp == NULL)
   1a240:	00 97       	sbiw	r24, 0x00	; 0
   1a242:	09 f1       	breq	.+66     	; 0x1a286 <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a244:	fc 01       	movw	r30, r24
   1a246:	80 8d       	ldd	r24, Z+24	; 0x18
   1a248:	91 8d       	ldd	r25, Z+25	; 0x19
   1a24a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a24c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a24e:	81 15       	cp	r24, r1
   1a250:	f2 e0       	ldi	r31, 0x02	; 2
   1a252:	9f 07       	cpc	r25, r31
   1a254:	a1 05       	cpc	r26, r1
   1a256:	b1 05       	cpc	r27, r1
   1a258:	c8 f4       	brcc	.+50     	; 0x1a28c <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   1a25a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a25e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a262:	32 ff       	sbrs	r19, 2
   1a264:	10 c0       	rjmp	.+32     	; 0x1a286 <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a266:	ed b7       	in	r30, 0x3d	; 61
   1a268:	fe b7       	in	r31, 0x3e	; 62
   1a26a:	86 83       	std	Z+6, r24	; 0x06
   1a26c:	97 83       	std	Z+7, r25	; 0x07
   1a26e:	a0 87       	std	Z+8, r26	; 0x08
   1a270:	b1 87       	std	Z+9, r27	; 0x09
   1a272:	d5 82       	std	Z+5, r13	; 0x05
   1a274:	c4 82       	std	Z+4, r12	; 0x04
   1a276:	83 e5       	ldi	r24, 0x53	; 83
   1a278:	9b e3       	ldi	r25, 0x3B	; 59
   1a27a:	a0 e0       	ldi	r26, 0x00	; 0
   1a27c:	81 83       	std	Z+1, r24	; 0x01
   1a27e:	92 83       	std	Z+2, r25	; 0x02
   1a280:	a3 83       	std	Z+3, r26	; 0x03
   1a282:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        return(NULL);
   1a286:	00 e0       	ldi	r16, 0x00	; 0
   1a288:	10 e0       	ldi	r17, 0x00	; 0
   1a28a:	c6 c0       	rjmp	.+396    	; 0x1a418 <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a28c:	64 e7       	ldi	r22, 0x74	; 116
   1a28e:	70 e0       	ldi	r23, 0x00	; 0
   1a290:	80 e0       	ldi	r24, 0x00	; 0
   1a292:	90 e0       	ldi	r25, 0x00	; 0
   1a294:	0e 94 9b c0 	call	0x18136	; 0x18136 <lif_calloc>
   1a298:	7c 01       	movw	r14, r24
    if(!LIF)
   1a29a:	89 2b       	or	r24, r25
   1a29c:	a1 f3       	breq	.-24     	; 0x1a286 <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a29e:	c6 01       	movw	r24, r12
   1a2a0:	0e 94 e6 c0 	call	0x181cc	; 0x181cc <lif_stralloc>
   1a2a4:	f7 01       	movw	r30, r14
   1a2a6:	91 83       	std	Z+1, r25	; 0x01
   1a2a8:	80 83       	st	Z, r24
    if(!LIF->name)
   1a2aa:	00 97       	sbiw	r24, 0x00	; 0
   1a2ac:	09 f4       	brne	.+2      	; 0x1a2b0 <lif_open_volume+0x8c>
   1a2ae:	5e c0       	rjmp	.+188    	; 0x1a36c <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   1a2b0:	f5 01       	movw	r30, r10
   1a2b2:	80 8c       	ldd	r8, Z+24	; 0x18
   1a2b4:	91 8c       	ldd	r9, Z+25	; 0x19
   1a2b6:	a2 8c       	ldd	r10, Z+26	; 0x1a
   1a2b8:	b3 8c       	ldd	r11, Z+27	; 0x1b
   1a2ba:	f7 01       	movw	r30, r14
   1a2bc:	80 86       	std	Z+8, r8	; 0x08
   1a2be:	91 86       	std	Z+9, r9	; 0x09
   1a2c0:	a2 86       	std	Z+10, r10	; 0x0a
   1a2c2:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a2c4:	77 27       	eor	r23, r23
   1a2c6:	6b 2d       	mov	r22, r11
   1a2c8:	5a 2d       	mov	r21, r10
   1a2ca:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a2cc:	88 20       	and	r8, r8
   1a2ce:	21 f0       	breq	.+8      	; 0x1a2d8 <lif_open_volume+0xb4>
        ++sectors;
   1a2d0:	4f 5f       	subi	r20, 0xFF	; 255
   1a2d2:	5f 4f       	sbci	r21, 0xFF	; 255
   1a2d4:	6f 4f       	sbci	r22, 0xFF	; 255
   1a2d6:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a2d8:	f7 01       	movw	r30, r14
   1a2da:	44 83       	std	Z+4, r20	; 0x04
   1a2dc:	55 83       	std	Z+5, r21	; 0x05
   1a2de:	66 83       	std	Z+6, r22	; 0x06
   1a2e0:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a2e2:	b8 01       	movw	r22, r16
   1a2e4:	0e 94 05 c1 	call	0x1820a	; 0x1820a <lif_open>
   1a2e8:	f7 01       	movw	r30, r14
   1a2ea:	93 83       	std	Z+3, r25	; 0x03
   1a2ec:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a2ee:	89 2b       	or	r24, r25
   1a2f0:	e9 f1       	breq	.+122    	; 0x1a36c <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a2f2:	00 e0       	ldi	r16, 0x00	; 0
   1a2f4:	11 e0       	ldi	r17, 0x01	; 1
   1a2f6:	20 e0       	ldi	r18, 0x00	; 0
   1a2f8:	30 e0       	ldi	r19, 0x00	; 0
   1a2fa:	a9 01       	movw	r20, r18
   1a2fc:	be 01       	movw	r22, r28
   1a2fe:	66 5f       	subi	r22, 0xF6	; 246
   1a300:	7f 4f       	sbci	r23, 0xFF	; 255
   1a302:	c7 01       	movw	r24, r14
   1a304:	0e 94 89 c1 	call	0x18312	; 0x18312 <lif_read>
   1a308:	6f 3f       	cpi	r22, 0xFF	; 255
   1a30a:	71 05       	cpc	r23, r1
   1a30c:	81 05       	cpc	r24, r1
   1a30e:	91 05       	cpc	r25, r1
   1a310:	09 f0       	breq	.+2      	; 0x1a314 <lif_open_volume+0xf0>
   1a312:	6c f4       	brge	.+26     	; 0x1a32e <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   1a314:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a318:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a31c:	92 ff       	sbrs	r25, 2
   1a31e:	26 c0       	rjmp	.+76     	; 0x1a36c <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a320:	ed b7       	in	r30, 0x3d	; 61
   1a322:	fe b7       	in	r31, 0x3e	; 62
   1a324:	d5 82       	std	Z+5, r13	; 0x05
   1a326:	c4 82       	std	Z+4, r12	; 0x04
   1a328:	8d e1       	ldi	r24, 0x1D	; 29
   1a32a:	9b e3       	ldi	r25, 0x3B	; 59
   1a32c:	19 c0       	rjmp	.+50     	; 0x1a360 <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a32e:	b7 01       	movw	r22, r14
   1a330:	ce 01       	movw	r24, r28
   1a332:	0a 96       	adiw	r24, 0x0a	; 10
   1a334:	0e 94 a9 c3 	call	0x18752	; 0x18752 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   1a338:	c7 01       	movw	r24, r14
   1a33a:	0e 94 b5 c7 	call	0x18f6a	; 0x18f6a <lif_check_volume>
   1a33e:	89 2b       	or	r24, r25
   1a340:	c1 f4       	brne	.+48     	; 0x1a372 <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   1a342:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a346:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a34a:	92 ff       	sbrs	r25, 2
   1a34c:	0f c0       	rjmp	.+30     	; 0x1a36c <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a34e:	f7 01       	movw	r30, r14
   1a350:	80 81       	ld	r24, Z
   1a352:	91 81       	ldd	r25, Z+1	; 0x01
   1a354:	ed b7       	in	r30, 0x3d	; 61
   1a356:	fe b7       	in	r31, 0x3e	; 62
   1a358:	95 83       	std	Z+5, r25	; 0x05
   1a35a:	84 83       	std	Z+4, r24	; 0x04
   1a35c:	8a ee       	ldi	r24, 0xEA	; 234
   1a35e:	9a e3       	ldi	r25, 0x3A	; 58
   1a360:	a0 e0       	ldi	r26, 0x00	; 0
   1a362:	81 83       	std	Z+1, r24	; 0x01
   1a364:	92 83       	std	Z+2, r25	; 0x02
   1a366:	a3 83       	std	Z+3, r26	; 0x03
   1a368:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a36c:	c7 01       	movw	r24, r14
   1a36e:	9d d8       	rcall	.-3782   	; 0x194aa <lif_close_volume>
   1a370:	8a cf       	rjmp	.-236    	; 0x1a286 <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a372:	f7 01       	movw	r30, r14
   1a374:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a376:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a378:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a37a:	70 a9       	ldd	r23, Z+48	; 0x30
   1a37c:	85 a9       	ldd	r24, Z+53	; 0x35
   1a37e:	96 a9       	ldd	r25, Z+54	; 0x36
   1a380:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a382:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a384:	48 0f       	add	r20, r24
   1a386:	59 1f       	adc	r21, r25
   1a388:	6a 1f       	adc	r22, r26
   1a38a:	7b 1f       	adc	r23, r27
   1a38c:	44 87       	std	Z+12, r20	; 0x0c
   1a38e:	55 87       	std	Z+13, r21	; 0x0d
   1a390:	66 87       	std	Z+14, r22	; 0x0e
   1a392:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a394:	84 81       	ldd	r24, Z+4	; 0x04
   1a396:	95 81       	ldd	r25, Z+5	; 0x05
   1a398:	a6 81       	ldd	r26, Z+6	; 0x06
   1a39a:	b7 81       	ldd	r27, Z+7	; 0x07
   1a39c:	84 1b       	sub	r24, r20
   1a39e:	95 0b       	sbc	r25, r21
   1a3a0:	a6 0b       	sbc	r26, r22
   1a3a2:	b7 0b       	sbc	r27, r23
   1a3a4:	80 8b       	std	Z+16, r24	; 0x10
   1a3a6:	91 8b       	std	Z+17, r25	; 0x11
   1a3a8:	a2 8b       	std	Z+18, r26	; 0x12
   1a3aa:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a3ac:	80 8f       	std	Z+24, r24	; 0x18
   1a3ae:	91 8f       	std	Z+25, r25	; 0x19
   1a3b0:	a2 8f       	std	Z+26, r26	; 0x1a
   1a3b2:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a3b4:	14 8a       	std	Z+20, r1	; 0x14
   1a3b6:	15 8a       	std	Z+21, r1	; 0x15
   1a3b8:	16 8a       	std	Z+22, r1	; 0x16
   1a3ba:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a3bc:	17 8e       	std	Z+31, r1	; 0x1f
   1a3be:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a3c0:	15 8e       	std	Z+29, r1	; 0x1d
   1a3c2:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a3c4:	11 a2       	std	Z+33, r1	; 0x21
   1a3c6:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a3c8:	13 a2       	std	Z+35, r1	; 0x23
   1a3ca:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   1a3cc:	c7 01       	movw	r24, r14
   1a3ce:	d6 d9       	rcall	.-3156   	; 0x1977c <lif_updatefree>
   1a3d0:	8c 01       	movw	r16, r24
   1a3d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a3d6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a3da:	01 15       	cp	r16, r1
   1a3dc:	11 05       	cpc	r17, r1
   1a3de:	a1 f4       	brne	.+40     	; 0x1a408 <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   1a3e0:	92 ff       	sbrs	r25, 2
   1a3e2:	0f c0       	rjmp	.+30     	; 0x1a402 <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a3e4:	f7 01       	movw	r30, r14
   1a3e6:	80 81       	ld	r24, Z
   1a3e8:	91 81       	ldd	r25, Z+1	; 0x01
   1a3ea:	ed b7       	in	r30, 0x3d	; 61
   1a3ec:	fe b7       	in	r31, 0x3e	; 62
   1a3ee:	95 83       	std	Z+5, r25	; 0x05
   1a3f0:	84 83       	std	Z+4, r24	; 0x04
   1a3f2:	87 eb       	ldi	r24, 0xB7	; 183
   1a3f4:	9a e3       	ldi	r25, 0x3A	; 58
   1a3f6:	a0 e0       	ldi	r26, 0x00	; 0
   1a3f8:	81 83       	std	Z+1, r24	; 0x01
   1a3fa:	92 83       	std	Z+2, r25	; 0x02
   1a3fc:	a3 83       	std	Z+3, r26	; 0x03
   1a3fe:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a402:	c7 01       	movw	r24, r14
   1a404:	52 d8       	rcall	.-3932   	; 0x194aa <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a406:	08 c0       	rjmp	.+16     	; 0x1a418 <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   1a408:	92 ff       	sbrs	r25, 2
   1a40a:	05 c0       	rjmp	.+10     	; 0x1a416 <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   1a40c:	6d e3       	ldi	r22, 0x3D	; 61
   1a40e:	76 e1       	ldi	r23, 0x16	; 22
   1a410:	c7 01       	movw	r24, r14
   1a412:	0e 94 ef c5 	call	0x18bde	; 0x18bde <lif_dump_vol>
   1a416:	87 01       	movw	r16, r14
    return( LIF );
}
   1a418:	c8 01       	movw	r24, r16
   1a41a:	c7 5c       	subi	r28, 0xC7	; 199
   1a41c:	de 4f       	sbci	r29, 0xFE	; 254
   1a41e:	ec e0       	ldi	r30, 0x0C	; 12
   1a420:	0c 94 d5 e6 	jmp	0x1cdaa	; 0x1cdaa <__epilogue_restores__+0xc>

0001a424 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a424:	2f 92       	push	r2
   1a426:	3f 92       	push	r3
   1a428:	4f 92       	push	r4
   1a42a:	5f 92       	push	r5
   1a42c:	6f 92       	push	r6
   1a42e:	8f 92       	push	r8
   1a430:	9f 92       	push	r9
   1a432:	af 92       	push	r10
   1a434:	bf 92       	push	r11
   1a436:	cf 92       	push	r12
   1a438:	df 92       	push	r13
   1a43a:	ef 92       	push	r14
   1a43c:	0f 93       	push	r16
   1a43e:	1f 93       	push	r17
   1a440:	cf 93       	push	r28
   1a442:	df 93       	push	r29
   1a444:	cd b7       	in	r28, 0x3d	; 61
   1a446:	de b7       	in	r29, 0x3e	; 62
   1a448:	af 97       	sbiw	r28, 0x2f	; 47
   1a44a:	0f b6       	in	r0, 0x3f	; 63
   1a44c:	f8 94       	cli
   1a44e:	de bf       	out	0x3e, r29	; 62
   1a450:	0f be       	out	0x3f, r0	; 63
   1a452:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a454:	68 e0       	ldi	r22, 0x08	; 8
   1a456:	79 e0       	ldi	r23, 0x09	; 9
   1a458:	e5 de       	rcall	.-566    	; 0x1a224 <lif_open_volume>
   1a45a:	9f a7       	std	Y+47, r25	; 0x2f
   1a45c:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   1a45e:	00 97       	sbiw	r24, 0x00	; 0
   1a460:	09 f4       	brne	.+2      	; 0x1a464 <lif_dir+0x40>
   1a462:	9e c1       	rjmp	.+828    	; 0x1a7a0 <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a464:	fc 01       	movw	r30, r24
   1a466:	86 a1       	ldd	r24, Z+38	; 0x26
   1a468:	88 23       	and	r24, r24
   1a46a:	21 f0       	breq	.+8      	; 0x1a474 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a46c:	8f 01       	movw	r16, r30
   1a46e:	0a 5d       	subi	r16, 0xDA	; 218
   1a470:	1f 4f       	sbci	r17, 0xFF	; 255
   1a472:	02 c0       	rjmp	.+4      	; 0x1a478 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   1a474:	0f ee       	ldi	r16, 0xEF	; 239
   1a476:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a478:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a47a:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a47c:	87 5b       	subi	r24, 0xB7	; 183
   1a47e:	9f 4f       	sbci	r25, 0xFF	; 255
   1a480:	0e 94 b3 c5 	call	0x18b66	; 0x18b66 <lif_lifbcd2timestr>
   1a484:	ed b7       	in	r30, 0x3d	; 61
   1a486:	fe b7       	in	r31, 0x3e	; 62
   1a488:	97 83       	std	Z+7, r25	; 0x07
   1a48a:	86 83       	std	Z+6, r24	; 0x06
   1a48c:	15 83       	std	Z+5, r17	; 0x05
   1a48e:	04 83       	std	Z+4, r16	; 0x04
   1a490:	80 ea       	ldi	r24, 0xA0	; 160
   1a492:	9a e3       	ldi	r25, 0x3A	; 58
   1a494:	a0 e0       	ldi	r26, 0x00	; 0
   1a496:	81 83       	std	Z+1, r24	; 0x01
   1a498:	92 83       	std	Z+2, r25	; 0x02
   1a49a:	a3 83       	std	Z+3, r26	; 0x03
   1a49c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a4a0:	80 e6       	ldi	r24, 0x60	; 96
   1a4a2:	9a e3       	ldi	r25, 0x3A	; 58
   1a4a4:	a0 e0       	ldi	r26, 0x00	; 0
   1a4a6:	ed b7       	in	r30, 0x3d	; 61
   1a4a8:	fe b7       	in	r31, 0x3e	; 62
   1a4aa:	81 83       	std	Z+1, r24	; 0x01
   1a4ac:	92 83       	std	Z+2, r25	; 0x02
   1a4ae:	a3 83       	std	Z+3, r26	; 0x03
   1a4b0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a4b4:	00 e2       	ldi	r16, 0x20	; 32
   1a4b6:	10 e0       	ldi	r17, 0x00	; 0
   1a4b8:	1f 8b       	std	Y+23, r17	; 0x17
   1a4ba:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a4bc:	21 2c       	mov	r2, r1
   1a4be:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a4c0:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a4c2:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a4c4:	06 5a       	subi	r16, 0xA6	; 166
   1a4c6:	1f 4f       	sbci	r17, 0xFF	; 255
   1a4c8:	1d 8f       	std	Y+29, r17	; 0x1d
   1a4ca:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a4cc:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a4ce:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a4d0:	00 5a       	subi	r16, 0xA0	; 160
   1a4d2:	1f 4f       	sbci	r17, 0xFF	; 255
   1a4d4:	1d a3       	std	Y+37, r17	; 0x25
   1a4d6:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a4d8:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a4da:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a4dc:	04 59       	subi	r16, 0x94	; 148
   1a4de:	1f 4f       	sbci	r17, 0xFF	; 255
   1a4e0:	1f a3       	std	Y+39, r17	; 0x27
   1a4e2:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a4e4:	84 e1       	ldi	r24, 0x14	; 20
   1a4e6:	9a e3       	ldi	r25, 0x3A	; 58
   1a4e8:	6c 01       	movw	r12, r24
   1a4ea:	e1 2c       	mov	r14, r1
   1a4ec:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a4ee:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a4f0:	01 5b       	subi	r16, 0xB1	; 177
   1a4f2:	1f 4f       	sbci	r17, 0xFF	; 255
   1a4f4:	1f 8f       	std	Y+31, r17	; 0x1f
   1a4f6:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a4f8:	84 ee       	ldi	r24, 0xE4	; 228
   1a4fa:	99 e3       	ldi	r25, 0x39	; 57
   1a4fc:	2c 01       	movw	r4, r24
   1a4fe:	61 2c       	mov	r6, r1
   1a500:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a502:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a504:	04 5a       	subi	r16, 0xA4	; 164
   1a506:	1f 4f       	sbci	r17, 0xFF	; 255
   1a508:	19 a7       	std	Y+41, r17	; 0x29
   1a50a:	08 a7       	std	Y+40, r16	; 0x28
   1a50c:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a50e:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a510:	02 59       	subi	r16, 0x92	; 146
   1a512:	1f 4f       	sbci	r17, 0xFF	; 255
   1a514:	1b a7       	std	Y+43, r17	; 0x2b
   1a516:	0a a7       	std	Y+42, r16	; 0x2a
   1a518:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a51a:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a51c:	0c 59       	subi	r16, 0x9C	; 156
   1a51e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a520:	1d a7       	std	Y+45, r17	; 0x2d
   1a522:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a524:	b1 01       	movw	r22, r2
   1a526:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a528:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a52a:	4d d8       	rcall	.-3942   	; 0x195c6 <lif_readdirindex>
   1a52c:	89 2b       	or	r24, r25
   1a52e:	09 f4       	brne	.+2      	; 0x1a532 <lif_dir+0x10e>
   1a530:	ad c0       	rjmp	.+346    	; 0x1a68c <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a532:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a534:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a536:	8d 91       	ld	r24, X+
   1a538:	9c 91       	ld	r25, X
   1a53a:	8f 3f       	cpi	r24, 0xFF	; 255
   1a53c:	bf ef       	ldi	r27, 0xFF	; 255
   1a53e:	9b 07       	cpc	r25, r27
   1a540:	09 f4       	brne	.+2      	; 0x1a544 <lif_dir+0x120>
   1a542:	a4 c0       	rjmp	.+328    	; 0x1a68c <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a544:	ec a1       	ldd	r30, Y+36	; 0x24
   1a546:	fd a1       	ldd	r31, Y+37	; 0x25
   1a548:	40 81       	ld	r20, Z
   1a54a:	51 81       	ldd	r21, Z+1	; 0x01
   1a54c:	62 81       	ldd	r22, Z+2	; 0x02
   1a54e:	73 81       	ldd	r23, Z+3	; 0x03
   1a550:	00 27       	eor	r16, r16
   1a552:	14 2f       	mov	r17, r20
   1a554:	25 2f       	mov	r18, r21
   1a556:	36 2f       	mov	r19, r22
   1a558:	08 8f       	std	Y+24, r16	; 0x18
   1a55a:	19 8f       	std	Y+25, r17	; 0x19
   1a55c:	2a 8f       	std	Y+26, r18	; 0x1a
   1a55e:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a560:	8c 7f       	andi	r24, 0xFC	; 252
   1a562:	80 31       	cpi	r24, 0x10	; 16
   1a564:	90 4e       	sbci	r25, 0xE0	; 224
   1a566:	09 f0       	breq	.+2      	; 0x1a56a <lif_dir+0x146>
   1a568:	4b c0       	rjmp	.+150    	; 0x1a600 <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a56a:	ae a1       	ldd	r26, Y+38	; 0x26
   1a56c:	bf a1       	ldd	r27, Y+39	; 0x27
   1a56e:	8d 91       	ld	r24, X+
   1a570:	9c 91       	ld	r25, X
   1a572:	00 97       	sbiw	r24, 0x00	; 0
   1a574:	b9 f0       	breq	.+46     	; 0x1a5a4 <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a576:	4c 01       	movw	r8, r24
   1a578:	a1 2c       	mov	r10, r1
   1a57a:	b1 2c       	mov	r11, r1
   1a57c:	33 27       	eor	r19, r19
   1a57e:	2b 2d       	mov	r18, r11
   1a580:	1a 2d       	mov	r17, r10
   1a582:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a584:	88 23       	and	r24, r24
   1a586:	21 f0       	breq	.+8      	; 0x1a590 <lif_dir+0x16c>
        ++sectors;
   1a588:	0f 5f       	subi	r16, 0xFF	; 255
   1a58a:	1f 4f       	sbci	r17, 0xFF	; 255
   1a58c:	2f 4f       	sbci	r18, 0xFF	; 255
   1a58e:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a590:	40 17       	cp	r20, r16
   1a592:	51 07       	cpc	r21, r17
   1a594:	62 07       	cpc	r22, r18
   1a596:	73 07       	cpc	r23, r19
   1a598:	29 f4       	brne	.+10     	; 0x1a5a4 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a59a:	88 8e       	std	Y+24, r8	; 0x18
   1a59c:	99 8e       	std	Y+25, r9	; 0x19
   1a59e:	aa 8e       	std	Y+26, r10	; 0x1a
   1a5a0:	bb 8e       	std	Y+27, r11	; 0x1b
   1a5a2:	2e c0       	rjmp	.+92     	; 0x1a600 <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   1a5a4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a5a8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a5ac:	32 ff       	sbrs	r19, 2
   1a5ae:	24 c0       	rjmp	.+72     	; 0x1a5f8 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a5b0:	4c 01       	movw	r8, r24
   1a5b2:	a1 2c       	mov	r10, r1
   1a5b4:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a5b6:	33 27       	eor	r19, r19
   1a5b8:	2b 2d       	mov	r18, r11
   1a5ba:	1a 2d       	mov	r17, r10
   1a5bc:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a5be:	88 23       	and	r24, r24
   1a5c0:	21 f0       	breq	.+8      	; 0x1a5ca <lif_dir+0x1a6>
        ++sectors;
   1a5c2:	0f 5f       	subi	r16, 0xFF	; 255
   1a5c4:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5c6:	2f 4f       	sbci	r18, 0xFF	; 255
   1a5c8:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a5ca:	ed b7       	in	r30, 0x3d	; 61
   1a5cc:	fe b7       	in	r31, 0x3e	; 62
   1a5ce:	46 87       	std	Z+14, r20	; 0x0e
   1a5d0:	57 87       	std	Z+15, r21	; 0x0f
   1a5d2:	60 8b       	std	Z+16, r22	; 0x10
   1a5d4:	71 8b       	std	Z+17, r23	; 0x11
   1a5d6:	02 87       	std	Z+10, r16	; 0x0a
   1a5d8:	13 87       	std	Z+11, r17	; 0x0b
   1a5da:	24 87       	std	Z+12, r18	; 0x0c
   1a5dc:	35 87       	std	Z+13, r19	; 0x0d
   1a5de:	86 82       	std	Z+6, r8	; 0x06
   1a5e0:	97 82       	std	Z+7, r9	; 0x07
   1a5e2:	a0 86       	std	Z+8, r10	; 0x08
   1a5e4:	b1 86       	std	Z+9, r11	; 0x09
   1a5e6:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a5e8:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a5ea:	15 83       	std	Z+5, r17	; 0x05
   1a5ec:	04 83       	std	Z+4, r16	; 0x04
   1a5ee:	c1 82       	std	Z+1, r12	; 0x01
   1a5f0:	d2 82       	std	Z+2, r13	; 0x02
   1a5f2:	e3 82       	std	Z+3, r14	; 0x03
   1a5f4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a5f8:	01 e2       	ldi	r16, 0x21	; 33
   1a5fa:	10 e0       	ldi	r17, 0x00	; 0
   1a5fc:	1f 8b       	std	Y+23, r17	; 0x17
   1a5fe:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a600:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a602:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a604:	8d 90       	ld	r8, X+
   1a606:	9c 90       	ld	r9, X
   1a608:	81 14       	cp	r8, r1
   1a60a:	91 04       	cpc	r9, r1
   1a60c:	19 f0       	breq	.+6      	; 0x1a614 <lif_dir+0x1f0>
   1a60e:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a610:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a612:	02 c0       	rjmp	.+4      	; 0x1a618 <lif_dir+0x1f4>
   1a614:	0c e4       	ldi	r16, 0x4C	; 76
   1a616:	16 e1       	ldi	r17, 0x16	; 22
   1a618:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a61a:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a61c:	8d 91       	ld	r24, X+
   1a61e:	9d 91       	ld	r25, X+
   1a620:	0d 90       	ld	r0, X+
   1a622:	bc 91       	ld	r27, X
   1a624:	a0 2d       	mov	r26, r0
   1a626:	88 a3       	std	Y+32, r24	; 0x20
   1a628:	99 a3       	std	Y+33, r25	; 0x21
   1a62a:	aa a3       	std	Y+34, r26	; 0x22
   1a62c:	bb a3       	std	Y+35, r27	; 0x23
   1a62e:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a630:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a632:	a0 80       	ld	r10, Z
   1a634:	b1 80       	ldd	r11, Z+1	; 0x01
   1a636:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a638:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a63a:	0e 94 b3 c5 	call	0x18b66	; 0x18b66 <lif_lifbcd2timestr>
   1a63e:	ed b7       	in	r30, 0x3d	; 61
   1a640:	fe b7       	in	r31, 0x3e	; 62
   1a642:	95 8b       	std	Z+21, r25	; 0x15
   1a644:	84 8b       	std	Z+20, r24	; 0x14
   1a646:	b3 8a       	std	Z+19, r11	; 0x13
   1a648:	a2 8a       	std	Z+18, r10	; 0x12
   1a64a:	2e 89       	ldd	r18, Y+22	; 0x16
   1a64c:	3f 89       	ldd	r19, Y+23	; 0x17
   1a64e:	31 8b       	std	Z+17, r19	; 0x11
   1a650:	20 8b       	std	Z+16, r18	; 0x10
   1a652:	88 8d       	ldd	r24, Y+24	; 0x18
   1a654:	99 8d       	ldd	r25, Y+25	; 0x19
   1a656:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a658:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a65a:	84 87       	std	Z+12, r24	; 0x0c
   1a65c:	95 87       	std	Z+13, r25	; 0x0d
   1a65e:	a6 87       	std	Z+14, r26	; 0x0e
   1a660:	b7 87       	std	Z+15, r27	; 0x0f
   1a662:	88 a1       	ldd	r24, Y+32	; 0x20
   1a664:	99 a1       	ldd	r25, Y+33	; 0x21
   1a666:	aa a1       	ldd	r26, Y+34	; 0x22
   1a668:	bb a1       	ldd	r27, Y+35	; 0x23
   1a66a:	80 87       	std	Z+8, r24	; 0x08
   1a66c:	91 87       	std	Z+9, r25	; 0x09
   1a66e:	a2 87       	std	Z+10, r26	; 0x0a
   1a670:	b3 87       	std	Z+11, r27	; 0x0b
   1a672:	97 82       	std	Z+7, r9	; 0x07
   1a674:	86 82       	std	Z+6, r8	; 0x06
   1a676:	15 83       	std	Z+5, r17	; 0x05
   1a678:	04 83       	std	Z+4, r16	; 0x04
   1a67a:	41 82       	std	Z+1, r4	; 0x01
   1a67c:	52 82       	std	Z+2, r5	; 0x02
   1a67e:	63 82       	std	Z+3, r6	; 0x03
   1a680:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a684:	ff ef       	ldi	r31, 0xFF	; 255
   1a686:	2f 1a       	sub	r2, r31
   1a688:	3f 0a       	sbc	r3, r31
    }
   1a68a:	4c cf       	rjmp	.-360    	; 0x1a524 <lif_dir+0x100>

    printf("\n");
   1a68c:	82 ee       	ldi	r24, 0xE2	; 226
   1a68e:	99 e3       	ldi	r25, 0x39	; 57
   1a690:	a0 e0       	ldi	r26, 0x00	; 0
   1a692:	ed b7       	in	r30, 0x3d	; 61
   1a694:	fe b7       	in	r31, 0x3e	; 62
   1a696:	81 83       	std	Z+1, r24	; 0x01
   1a698:	92 83       	std	Z+2, r25	; 0x02
   1a69a:	a3 83       	std	Z+3, r26	; 0x03
   1a69c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a6a0:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a6a2:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a6a4:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a6a6:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a6a8:	09 2e       	mov	r0, r25
   1a6aa:	00 0c       	add	r0, r0
   1a6ac:	aa 0b       	sbc	r26, r26
   1a6ae:	bb 0b       	sbc	r27, r27
   1a6b0:	ed b7       	in	r30, 0x3d	; 61
   1a6b2:	fe b7       	in	r31, 0x3e	; 62
   1a6b4:	84 83       	std	Z+4, r24	; 0x04
   1a6b6:	95 83       	std	Z+5, r25	; 0x05
   1a6b8:	a6 83       	std	Z+6, r26	; 0x06
   1a6ba:	b7 83       	std	Z+7, r27	; 0x07
   1a6bc:	86 ed       	ldi	r24, 0xD6	; 214
   1a6be:	99 e3       	ldi	r25, 0x39	; 57
   1a6c0:	a0 e0       	ldi	r26, 0x00	; 0
   1a6c2:	81 83       	std	Z+1, r24	; 0x01
   1a6c4:	92 83       	std	Z+2, r25	; 0x02
   1a6c6:	a3 83       	std	Z+3, r26	; 0x03
   1a6c8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a6cc:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a6ce:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a6d0:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a6d2:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a6d4:	09 2e       	mov	r0, r25
   1a6d6:	00 0c       	add	r0, r0
   1a6d8:	aa 0b       	sbc	r26, r26
   1a6da:	bb 0b       	sbc	r27, r27
   1a6dc:	ed b7       	in	r30, 0x3d	; 61
   1a6de:	fe b7       	in	r31, 0x3e	; 62
   1a6e0:	84 83       	std	Z+4, r24	; 0x04
   1a6e2:	95 83       	std	Z+5, r25	; 0x05
   1a6e4:	a6 83       	std	Z+6, r26	; 0x06
   1a6e6:	b7 83       	std	Z+7, r27	; 0x07
   1a6e8:	89 ec       	ldi	r24, 0xC9	; 201
   1a6ea:	99 e3       	ldi	r25, 0x39	; 57
   1a6ec:	a0 e0       	ldi	r26, 0x00	; 0
   1a6ee:	81 83       	std	Z+1, r24	; 0x01
   1a6f0:	92 83       	std	Z+2, r25	; 0x02
   1a6f2:	a3 83       	std	Z+3, r26	; 0x03
   1a6f4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a6f8:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a6fa:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a6fc:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a6fe:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a700:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a702:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a704:	ed b7       	in	r30, 0x3d	; 61
   1a706:	fe b7       	in	r31, 0x3e	; 62
   1a708:	84 83       	std	Z+4, r24	; 0x04
   1a70a:	95 83       	std	Z+5, r25	; 0x05
   1a70c:	a6 83       	std	Z+6, r26	; 0x06
   1a70e:	b7 83       	std	Z+7, r27	; 0x07
   1a710:	88 eb       	ldi	r24, 0xB8	; 184
   1a712:	99 e3       	ldi	r25, 0x39	; 57
   1a714:	a0 e0       	ldi	r26, 0x00	; 0
   1a716:	81 83       	std	Z+1, r24	; 0x01
   1a718:	92 83       	std	Z+2, r25	; 0x02
   1a71a:	a3 83       	std	Z+3, r26	; 0x03
   1a71c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a720:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a722:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a724:	85 a9       	ldd	r24, Z+53	; 0x35
   1a726:	96 a9       	ldd	r25, Z+54	; 0x36
   1a728:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a72a:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a72c:	ed b7       	in	r30, 0x3d	; 61
   1a72e:	fe b7       	in	r31, 0x3e	; 62
   1a730:	84 83       	std	Z+4, r24	; 0x04
   1a732:	95 83       	std	Z+5, r25	; 0x05
   1a734:	a6 83       	std	Z+6, r26	; 0x06
   1a736:	b7 83       	std	Z+7, r27	; 0x07
   1a738:	85 ea       	ldi	r24, 0xA5	; 165
   1a73a:	99 e3       	ldi	r25, 0x39	; 57
   1a73c:	a0 e0       	ldi	r26, 0x00	; 0
   1a73e:	81 83       	std	Z+1, r24	; 0x01
   1a740:	92 83       	std	Z+2, r25	; 0x02
   1a742:	a3 83       	std	Z+3, r26	; 0x03
   1a744:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a748:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a74a:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a74c:	84 89       	ldd	r24, Z+20	; 0x14
   1a74e:	95 89       	ldd	r25, Z+21	; 0x15
   1a750:	a6 89       	ldd	r26, Z+22	; 0x16
   1a752:	b7 89       	ldd	r27, Z+23	; 0x17
   1a754:	ed b7       	in	r30, 0x3d	; 61
   1a756:	fe b7       	in	r31, 0x3e	; 62
   1a758:	84 83       	std	Z+4, r24	; 0x04
   1a75a:	95 83       	std	Z+5, r25	; 0x05
   1a75c:	a6 83       	std	Z+6, r26	; 0x06
   1a75e:	b7 83       	std	Z+7, r27	; 0x07
   1a760:	82 e9       	ldi	r24, 0x92	; 146
   1a762:	99 e3       	ldi	r25, 0x39	; 57
   1a764:	a0 e0       	ldi	r26, 0x00	; 0
   1a766:	81 83       	std	Z+1, r24	; 0x01
   1a768:	92 83       	std	Z+2, r25	; 0x02
   1a76a:	a3 83       	std	Z+3, r26	; 0x03
   1a76c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a770:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a772:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a774:	80 8d       	ldd	r24, Z+24	; 0x18
   1a776:	91 8d       	ldd	r25, Z+25	; 0x19
   1a778:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a77a:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a77c:	ed b7       	in	r30, 0x3d	; 61
   1a77e:	fe b7       	in	r31, 0x3e	; 62
   1a780:	84 83       	std	Z+4, r24	; 0x04
   1a782:	95 83       	std	Z+5, r25	; 0x05
   1a784:	a6 83       	std	Z+6, r26	; 0x06
   1a786:	b7 83       	std	Z+7, r27	; 0x07
   1a788:	8f e7       	ldi	r24, 0x7F	; 127
   1a78a:	99 e3       	ldi	r25, 0x39	; 57
   1a78c:	a0 e0       	ldi	r26, 0x00	; 0
   1a78e:	81 83       	std	Z+1, r24	; 0x01
   1a790:	92 83       	std	Z+2, r25	; 0x02
   1a792:	a3 83       	std	Z+3, r26	; 0x03
   1a794:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a798:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a79a:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a79c:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a7a0:	af 96       	adiw	r28, 0x2f	; 47
   1a7a2:	0f b6       	in	r0, 0x3f	; 63
   1a7a4:	f8 94       	cli
   1a7a6:	de bf       	out	0x3e, r29	; 62
   1a7a8:	0f be       	out	0x3f, r0	; 63
   1a7aa:	cd bf       	out	0x3d, r28	; 61
   1a7ac:	df 91       	pop	r29
   1a7ae:	cf 91       	pop	r28
   1a7b0:	1f 91       	pop	r17
   1a7b2:	0f 91       	pop	r16
   1a7b4:	ef 90       	pop	r14
   1a7b6:	df 90       	pop	r13
   1a7b8:	cf 90       	pop	r12
   1a7ba:	bf 90       	pop	r11
   1a7bc:	af 90       	pop	r10
   1a7be:	9f 90       	pop	r9
   1a7c0:	8f 90       	pop	r8
   1a7c2:	6f 90       	pop	r6
   1a7c4:	5f 90       	pop	r5
   1a7c6:	4f 90       	pop	r4
   1a7c8:	3f 90       	pop	r3
   1a7ca:	2f 90       	pop	r2
   1a7cc:	08 95       	ret

0001a7ce <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a7ce:	a5 e0       	ldi	r26, 0x05	; 5
   1a7d0:	b0 e0       	ldi	r27, 0x00	; 0
   1a7d2:	ed ee       	ldi	r30, 0xED	; 237
   1a7d4:	f3 ed       	ldi	r31, 0xD3	; 211
   1a7d6:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__+0x10>
   1a7da:	7c 01       	movw	r14, r24
   1a7dc:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a7de:	cb 01       	movw	r24, r22
   1a7e0:	0e 94 a4 c2 	call	0x18548	; 0x18548 <lif_checkname>
   1a7e4:	89 2b       	or	r24, r25
   1a7e6:	69 f4       	brne	.+26     	; 0x1a802 <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a7e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a7ec:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a7f0:	92 ff       	sbrs	r25, 2
   1a7f2:	48 c0       	rjmp	.+144    	; 0x1a884 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a7f4:	ed b7       	in	r30, 0x3d	; 61
   1a7f6:	fe b7       	in	r31, 0x3e	; 62
   1a7f8:	d5 83       	std	Z+5, r29	; 0x05
   1a7fa:	c4 83       	std	Z+4, r28	; 0x04
   1a7fc:	88 e5       	ldi	r24, 0x58	; 88
   1a7fe:	99 e3       	ldi	r25, 0x39	; 57
   1a800:	15 c0       	rjmp	.+42     	; 0x1a82c <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a802:	fe 01       	movw	r30, r28
   1a804:	01 90       	ld	r0, Z+
   1a806:	00 20       	and	r0, r0
   1a808:	e9 f7       	brne	.-6      	; 0x1a804 <lif_find_file+0x36>
   1a80a:	31 97       	sbiw	r30, 0x01	; 1
   1a80c:	ec 1b       	sub	r30, r28
   1a80e:	fd 0b       	sbc	r31, r29
   1a810:	3b 97       	sbiw	r30, 0x0b	; 11
   1a812:	98 f0       	brcs	.+38     	; 0x1a83a <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a814:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a818:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a81c:	92 ff       	sbrs	r25, 2
   1a81e:	32 c0       	rjmp	.+100    	; 0x1a884 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a820:	ed b7       	in	r30, 0x3d	; 61
   1a822:	fe b7       	in	r31, 0x3e	; 62
   1a824:	d5 83       	std	Z+5, r29	; 0x05
   1a826:	c4 83       	std	Z+4, r28	; 0x04
   1a828:	83 e3       	ldi	r24, 0x33	; 51
   1a82a:	99 e3       	ldi	r25, 0x39	; 57
   1a82c:	a0 e0       	ldi	r26, 0x00	; 0
   1a82e:	81 83       	std	Z+1, r24	; 0x01
   1a830:	92 83       	std	Z+2, r25	; 0x02
   1a832:	a3 83       	std	Z+3, r26	; 0x03
   1a834:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1a838:	25 c0       	rjmp	.+74     	; 0x1a884 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a83a:	e1 14       	cp	r14, r1
   1a83c:	f1 04       	cpc	r15, r1
   1a83e:	11 f1       	breq	.+68     	; 0x1a884 <lif_find_file+0xb6>
   1a840:	00 e0       	ldi	r16, 0x00	; 0
   1a842:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a844:	67 01       	movw	r12, r14
   1a846:	fa e5       	ldi	r31, 0x5A	; 90
   1a848:	cf 0e       	add	r12, r31
   1a84a:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a84c:	57 01       	movw	r10, r14
   1a84e:	2f e4       	ldi	r18, 0x4F	; 79
   1a850:	a2 0e       	add	r10, r18
   1a852:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a854:	b8 01       	movw	r22, r16
   1a856:	c7 01       	movw	r24, r14
   1a858:	0e 94 e3 ca 	call	0x195c6	; 0x195c6 <lif_readdirindex>
   1a85c:	89 2b       	or	r24, r25
   1a85e:	91 f0       	breq	.+36     	; 0x1a884 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a860:	f6 01       	movw	r30, r12
   1a862:	80 81       	ld	r24, Z
   1a864:	91 81       	ldd	r25, Z+1	; 0x01
   1a866:	8f 3f       	cpi	r24, 0xFF	; 255
   1a868:	ff ef       	ldi	r31, 0xFF	; 255
   1a86a:	9f 07       	cpc	r25, r31
   1a86c:	59 f0       	breq	.+22     	; 0x1a884 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a86e:	89 2b       	or	r24, r25
   1a870:	31 f0       	breq	.+12     	; 0x1a87e <lif_find_file+0xb0>
   1a872:	be 01       	movw	r22, r28
   1a874:	c5 01       	movw	r24, r10
   1a876:	0e 94 88 31 	call	0x6310	; 0x6310 <strcasecmp>
   1a87a:	89 2b       	or	r24, r25
   1a87c:	31 f0       	breq	.+12     	; 0x1a88a <lif_find_file+0xbc>
            break;
        ++index;
   1a87e:	0f 5f       	subi	r16, 0xFF	; 255
   1a880:	1f 4f       	sbci	r17, 0xFF	; 255
   1a882:	e8 cf       	rjmp	.-48     	; 0x1a854 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a884:	8f ef       	ldi	r24, 0xFF	; 255
   1a886:	9f ef       	ldi	r25, 0xFF	; 255
   1a888:	01 c0       	rjmp	.+2      	; 0x1a88c <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a88a:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a88c:	cd b7       	in	r28, 0x3d	; 61
   1a88e:	de b7       	in	r29, 0x3e	; 62
   1a890:	25 96       	adiw	r28, 0x05	; 5
   1a892:	ea e0       	ldi	r30, 0x0A	; 10
   1a894:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__+0x10>

0001a898 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a898:	a5 e0       	ldi	r26, 0x05	; 5
   1a89a:	b0 e0       	ldi	r27, 0x00	; 0
   1a89c:	e2 e5       	ldi	r30, 0x52	; 82
   1a89e:	f4 ed       	ldi	r31, 0xD4	; 212
   1a8a0:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x14>
   1a8a4:	6b 01       	movw	r12, r22
   1a8a6:	7c 01       	movw	r14, r24
   1a8a8:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a8aa:	20 e0       	ldi	r18, 0x00	; 0
   1a8ac:	31 e0       	ldi	r19, 0x01	; 1
   1a8ae:	40 e0       	ldi	r20, 0x00	; 0
   1a8b0:	50 e0       	ldi	r21, 0x00	; 0
   1a8b2:	0e 94 68 e6 	call	0x1ccd0	; 0x1ccd0 <__divmodsi4>
    if(!pos)
   1a8b6:	61 15       	cp	r22, r1
   1a8b8:	71 05       	cpc	r23, r1
   1a8ba:	e1 f1       	breq	.+120    	; 0x1a934 <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a8bc:	c0 e0       	ldi	r28, 0x00	; 0
   1a8be:	d1 e0       	ldi	r29, 0x01	; 1
   1a8c0:	c6 1b       	sub	r28, r22
   1a8c2:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a8c4:	f8 01       	movw	r30, r16
   1a8c6:	8f ee       	ldi	r24, 0xEF	; 239
   1a8c8:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a8ca:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a8cc:	cf 01       	movw	r24, r30
   1a8ce:	80 1b       	sub	r24, r16
   1a8d0:	91 0b       	sbc	r25, r17
   1a8d2:	8c 17       	cp	r24, r28
   1a8d4:	9d 07       	cpc	r25, r29
   1a8d6:	14 f4       	brge	.+4      	; 0x1a8dc <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a8d8:	21 93       	st	Z+, r18
   1a8da:	f8 cf       	rjmp	.-16     	; 0x1a8cc <lif_e010_pad_sector+0x34>
   1a8dc:	1c 16       	cp	r1, r28
   1a8de:	1d 06       	cpc	r1, r29
   1a8e0:	14 f0       	brlt	.+4      	; 0x1a8e6 <lif_e010_pad_sector+0x4e>
   1a8e2:	c1 e0       	ldi	r28, 0x01	; 1
   1a8e4:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a8e6:	ce 01       	movw	r24, r28
   1a8e8:	0d 2e       	mov	r0, r29
   1a8ea:	00 0c       	add	r0, r0
   1a8ec:	aa 0b       	sbc	r26, r26
   1a8ee:	bb 0b       	sbc	r27, r27
   1a8f0:	bc 01       	movw	r22, r24
   1a8f2:	cd 01       	movw	r24, r26
   1a8f4:	6c 0d       	add	r22, r12
   1a8f6:	7d 1d       	adc	r23, r13
   1a8f8:	8e 1d       	adc	r24, r14
   1a8fa:	9f 1d       	adc	r25, r15
   1a8fc:	20 e0       	ldi	r18, 0x00	; 0
   1a8fe:	31 e0       	ldi	r19, 0x01	; 1
   1a900:	40 e0       	ldi	r20, 0x00	; 0
   1a902:	50 e0       	ldi	r21, 0x00	; 0
   1a904:	0e 94 68 e6 	call	0x1ccd0	; 0x1ccd0 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a908:	61 15       	cp	r22, r1
   1a90a:	71 05       	cpc	r23, r1
   1a90c:	b1 f0       	breq	.+44     	; 0x1a93a <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1a90e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a912:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a916:	32 ff       	sbrs	r19, 2
   1a918:	12 c0       	rjmp	.+36     	; 0x1a93e <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a91a:	ed b7       	in	r30, 0x3d	; 61
   1a91c:	fe b7       	in	r31, 0x3e	; 62
   1a91e:	75 83       	std	Z+5, r23	; 0x05
   1a920:	64 83       	std	Z+4, r22	; 0x04
   1a922:	8a ef       	ldi	r24, 0xFA	; 250
   1a924:	98 e3       	ldi	r25, 0x38	; 56
   1a926:	a0 e0       	ldi	r26, 0x00	; 0
   1a928:	81 83       	std	Z+1, r24	; 0x01
   1a92a:	92 83       	std	Z+2, r25	; 0x02
   1a92c:	a3 83       	std	Z+3, r26	; 0x03
   1a92e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1a932:	05 c0       	rjmp	.+10     	; 0x1a93e <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a934:	80 e0       	ldi	r24, 0x00	; 0
   1a936:	90 e0       	ldi	r25, 0x00	; 0
   1a938:	04 c0       	rjmp	.+8      	; 0x1a942 <lif_e010_pad_sector+0xaa>
   1a93a:	ce 01       	movw	r24, r28
   1a93c:	02 c0       	rjmp	.+4      	; 0x1a942 <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a93e:	8f ef       	ldi	r24, 0xFF	; 255
   1a940:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a942:	cd b7       	in	r28, 0x3d	; 61
   1a944:	de b7       	in	r29, 0x3e	; 62
   1a946:	25 96       	adiw	r28, 0x05	; 5
   1a948:	e8 e0       	ldi	r30, 0x08	; 8
   1a94a:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x14>

0001a94e <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a94e:	a5 e0       	ldi	r26, 0x05	; 5
   1a950:	b0 e0       	ldi	r27, 0x00	; 0
   1a952:	ed ea       	ldi	r30, 0xAD	; 173
   1a954:	f4 ed       	ldi	r31, 0xD4	; 212
   1a956:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
   1a95a:	ec 01       	movw	r28, r24
   1a95c:	4a 01       	movw	r8, r20
   1a95e:	5b 01       	movw	r10, r22
   1a960:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a962:	fc 01       	movw	r30, r24
   1a964:	01 90       	ld	r0, Z+
   1a966:	00 20       	and	r0, r0
   1a968:	e9 f7       	brne	.-6      	; 0x1a964 <lif_ascii_string_to_e010+0x16>
   1a96a:	31 97       	sbiw	r30, 0x01	; 1
   1a96c:	6f 01       	movw	r12, r30
   1a96e:	c8 1a       	sub	r12, r24
   1a970:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a972:	41 2c       	mov	r4, r1
   1a974:	51 2c       	mov	r5, r1
   1a976:	32 01       	movw	r6, r4
   1a978:	53 94       	inc	r5
   1a97a:	cb 01       	movw	r24, r22
   1a97c:	ba 01       	movw	r22, r20
   1a97e:	a3 01       	movw	r20, r6
   1a980:	92 01       	movw	r18, r4
   1a982:	0e 94 68 e6 	call	0x1ccd0	; 0x1ccd0 <__divmodsi4>
   1a986:	21 2c       	mov	r2, r1
   1a988:	33 24       	eor	r3, r3
   1a98a:	33 94       	inc	r3
   1a98c:	c1 01       	movw	r24, r2
   1a98e:	86 1b       	sub	r24, r22
   1a990:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a992:	86 30       	cpi	r24, 0x06	; 6
   1a994:	91 05       	cpc	r25, r1
   1a996:	20 f0       	brcs	.+8      	; 0x1a9a0 <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a998:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1a99a:	00 e0       	ldi	r16, 0x00	; 0
   1a99c:	10 e0       	ldi	r17, 0x00	; 0
   1a99e:	17 c0       	rjmp	.+46     	; 0x1a9ce <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a9a0:	a7 01       	movw	r20, r14
   1a9a2:	c5 01       	movw	r24, r10
   1a9a4:	b4 01       	movw	r22, r8
   1a9a6:	78 df       	rcall	.-272    	; 0x1a898 <lif_e010_pad_sector>
   1a9a8:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a9aa:	97 fd       	sbrc	r25, 7
   1a9ac:	83 c0       	rjmp	.+262    	; 0x1aab4 <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a9ae:	09 2e       	mov	r0, r25
   1a9b0:	00 0c       	add	r0, r0
   1a9b2:	aa 0b       	sbc	r26, r26
   1a9b4:	bb 0b       	sbc	r27, r27
   1a9b6:	bc 01       	movw	r22, r24
   1a9b8:	cd 01       	movw	r24, r26
   1a9ba:	68 0d       	add	r22, r8
   1a9bc:	79 1d       	adc	r23, r9
   1a9be:	8a 1d       	adc	r24, r10
   1a9c0:	9b 1d       	adc	r25, r11
   1a9c2:	a3 01       	movw	r20, r6
   1a9c4:	92 01       	movw	r18, r4
   1a9c6:	0e 94 68 e6 	call	0x1ccd0	; 0x1ccd0 <__divmodsi4>
   1a9ca:	26 1a       	sub	r2, r22
   1a9cc:	37 0a       	sbc	r3, r23
   1a9ce:	f7 01       	movw	r30, r14
   1a9d0:	e0 0f       	add	r30, r16
   1a9d2:	f1 1f       	adc	r31, r17
   1a9d4:	0d 5f       	subi	r16, 0xFD	; 253
   1a9d6:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1a9d8:	c6 01       	movw	r24, r12
   1a9da:	02 96       	adiw	r24, 0x02	; 2
   1a9dc:	82 15       	cp	r24, r2
   1a9de:	93 05       	cpc	r25, r3
   1a9e0:	84 f4       	brge	.+32     	; 0x1aa02 <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a9e2:	8f ed       	ldi	r24, 0xDF	; 223
   1a9e4:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a9e6:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a9e8:	d2 82       	std	Z+2, r13	; 0x02
   1a9ea:	f7 01       	movw	r30, r14
   1a9ec:	e0 0f       	add	r30, r16
   1a9ee:	f1 1f       	adc	r31, r17
   1a9f0:	cf 01       	movw	r24, r30
   1a9f2:	8e 19       	sub	r24, r14
   1a9f4:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a9f6:	29 91       	ld	r18, Y+
   1a9f8:	22 23       	and	r18, r18
   1a9fa:	09 f4       	brne	.+2      	; 0x1a9fe <lif_ascii_string_to_e010+0xb0>
   1a9fc:	5b c0       	rjmp	.+182    	; 0x1aab4 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a9fe:	21 93       	st	Z+, r18
   1aa00:	f7 cf       	rjmp	.-18     	; 0x1a9f0 <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1aa02:	8f ec       	ldi	r24, 0xCF	; 207
   1aa04:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1aa06:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1aa08:	d2 82       	std	Z+2, r13	; 0x02
   1aa0a:	d7 01       	movw	r26, r14
   1aa0c:	a0 0f       	add	r26, r16
   1aa0e:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1aa10:	fe 01       	movw	r30, r28
   1aa12:	81 91       	ld	r24, Z+
   1aa14:	81 11       	cpse	r24, r1
   1aa16:	0e c0       	rjmp	.+28     	; 0x1aa34 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1aa18:	c8 01       	movw	r24, r16
   1aa1a:	01 2e       	mov	r0, r17
   1aa1c:	00 0c       	add	r0, r0
   1aa1e:	aa 0b       	sbc	r26, r26
   1aa20:	bb 0b       	sbc	r27, r27
   1aa22:	bc 01       	movw	r22, r24
   1aa24:	cd 01       	movw	r24, r26
   1aa26:	68 0d       	add	r22, r8
   1aa28:	79 1d       	adc	r23, r9
   1aa2a:	8a 1d       	adc	r24, r10
   1aa2c:	9b 1d       	adc	r25, r11
   1aa2e:	61 11       	cpse	r22, r1
   1aa30:	09 c0       	rjmp	.+18     	; 0x1aa44 <lif_ascii_string_to_e010+0xf6>
   1aa32:	21 c0       	rjmp	.+66     	; 0x1aa76 <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1aa34:	02 15       	cp	r16, r2
   1aa36:	13 05       	cpc	r17, r3
   1aa38:	7c f7       	brge	.-34     	; 0x1aa18 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1aa3a:	0f 5f       	subi	r16, 0xFF	; 255
   1aa3c:	1f 4f       	sbci	r17, 0xFF	; 255
   1aa3e:	8d 93       	st	X+, r24
   1aa40:	ef 01       	movw	r28, r30
   1aa42:	e6 cf       	rjmp	.-52     	; 0x1aa10 <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1aa44:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1aa48:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1aa4c:	32 ff       	sbrs	r19, 2
   1aa4e:	30 c0       	rjmp	.+96     	; 0x1aab0 <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1aa50:	20 e0       	ldi	r18, 0x00	; 0
   1aa52:	31 e0       	ldi	r19, 0x01	; 1
   1aa54:	40 e0       	ldi	r20, 0x00	; 0
   1aa56:	50 e0       	ldi	r21, 0x00	; 0
   1aa58:	0e 94 68 e6 	call	0x1ccd0	; 0x1ccd0 <__divmodsi4>
   1aa5c:	ed b7       	in	r30, 0x3d	; 61
   1aa5e:	fe b7       	in	r31, 0x3e	; 62
   1aa60:	75 83       	std	Z+5, r23	; 0x05
   1aa62:	64 83       	std	Z+4, r22	; 0x04
   1aa64:	86 ed       	ldi	r24, 0xD6	; 214
   1aa66:	98 e3       	ldi	r25, 0x38	; 56
   1aa68:	a0 e0       	ldi	r26, 0x00	; 0
   1aa6a:	81 83       	std	Z+1, r24	; 0x01
   1aa6c:	92 83       	std	Z+2, r25	; 0x02
   1aa6e:	a3 83       	std	Z+3, r26	; 0x03
   1aa70:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1aa74:	1d c0       	rjmp	.+58     	; 0x1aab0 <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1aa76:	fe 01       	movw	r30, r28
   1aa78:	01 90       	ld	r0, Z+
   1aa7a:	00 20       	and	r0, r0
   1aa7c:	e9 f7       	brne	.-6      	; 0x1aa78 <lif_ascii_string_to_e010+0x12a>
   1aa7e:	31 97       	sbiw	r30, 0x01	; 1
   1aa80:	9f 01       	movw	r18, r30
   1aa82:	2c 1b       	sub	r18, r28
   1aa84:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1aa86:	d7 01       	movw	r26, r14
   1aa88:	a0 0f       	add	r26, r16
   1aa8a:	b1 1f       	adc	r27, r17
   1aa8c:	8f e6       	ldi	r24, 0x6F	; 111
   1aa8e:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1aa90:	fd 01       	movw	r30, r26
   1aa92:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1aa94:	32 83       	std	Z+2, r19	; 0x02
   1aa96:	0d 5f       	subi	r16, 0xFD	; 253
   1aa98:	1f 4f       	sbci	r17, 0xFF	; 255
   1aa9a:	f7 01       	movw	r30, r14
   1aa9c:	e0 0f       	add	r30, r16
   1aa9e:	f1 1f       	adc	r31, r17
   1aaa0:	cf 01       	movw	r24, r30
   1aaa2:	8e 19       	sub	r24, r14
   1aaa4:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1aaa6:	29 91       	ld	r18, Y+
   1aaa8:	22 23       	and	r18, r18
   1aaaa:	21 f0       	breq	.+8      	; 0x1aab4 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1aaac:	21 93       	st	Z+, r18
   1aaae:	f8 cf       	rjmp	.-16     	; 0x1aaa0 <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1aab0:	8f ef       	ldi	r24, 0xFF	; 255
   1aab2:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1aab4:	cd b7       	in	r28, 0x3d	; 61
   1aab6:	de b7       	in	r29, 0x3e	; 62
   1aab8:	25 96       	adiw	r28, 0x05	; 5
   1aaba:	e2 e1       	ldi	r30, 0x12	; 18
   1aabc:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0001aac0 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1aac0:	ad e0       	ldi	r26, 0x0D	; 13
   1aac2:	b3 e0       	ldi	r27, 0x03	; 3
   1aac4:	e6 e6       	ldi	r30, 0x66	; 102
   1aac6:	f5 ed       	ldi	r31, 0xD5	; 213
   1aac8:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
   1aacc:	5c 01       	movw	r10, r24
   1aace:	2a 01       	movw	r4, r20
   1aad0:	3b 01       	movw	r6, r22
   1aad2:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1aad4:	6e ef       	ldi	r22, 0xFE	; 254
   1aad6:	78 e0       	ldi	r23, 0x08	; 8
   1aad8:	0e 94 05 c1 	call	0x1820a	; 0x1820a <lif_open>
   1aadc:	c7 5f       	subi	r28, 0xF7	; 247
   1aade:	dc 4f       	sbci	r29, 0xFC	; 252
   1aae0:	99 83       	std	Y+1, r25	; 0x01
   1aae2:	88 83       	st	Y, r24
   1aae4:	c9 50       	subi	r28, 0x09	; 9
   1aae6:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1aae8:	89 2b       	or	r24, r25
   1aaea:	09 f4       	brne	.+2      	; 0x1aaee <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1aaec:	63 c0       	rjmp	.+198    	; 0x1abb4 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1aaee:	81 2c       	mov	r8, r1
   1aaf0:	91 2c       	mov	r9, r1
   1aaf2:	c1 2c       	mov	r12, r1
   1aaf4:	d1 2c       	mov	r13, r1
   1aaf6:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1aaf8:	88 ec       	ldi	r24, 0xC8	; 200
   1aafa:	98 e3       	ldi	r25, 0x38	; 56
   1aafc:	9c 01       	movw	r18, r24
   1aafe:	40 e0       	ldi	r20, 0x00	; 0
   1ab00:	c5 5f       	subi	r28, 0xF5	; 245
   1ab02:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab04:	28 83       	st	Y, r18
   1ab06:	39 83       	std	Y+1, r19	; 0x01
   1ab08:	4a 83       	std	Y+2, r20	; 0x02
   1ab0a:	cb 50       	subi	r28, 0x0B	; 11
   1ab0c:	d3 40       	sbci	r29, 0x03	; 3
   1ab0e:	14 c0       	rjmp	.+40     	; 0x1ab38 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1ab10:	c1 01       	movw	r24, r2
   1ab12:	03 2c       	mov	r0, r3
   1ab14:	00 0c       	add	r0, r0
   1ab16:	aa 0b       	sbc	r26, r26
   1ab18:	bb 0b       	sbc	r27, r27
   1ab1a:	48 0e       	add	r4, r24
   1ab1c:	59 1e       	adc	r5, r25
   1ab1e:	6a 1e       	adc	r6, r26
   1ab20:	7b 1e       	adc	r7, r27
        bytes += size;
   1ab22:	c8 0e       	add	r12, r24
   1ab24:	d9 1e       	adc	r13, r25
   1ab26:	ea 1e       	adc	r14, r26
   1ab28:	fb 1e       	adc	r15, r27
        count += size;
   1ab2a:	82 0c       	add	r8, r2
   1ab2c:	93 1c       	adc	r9, r3

        if(count > 256)
   1ab2e:	31 e0       	ldi	r19, 0x01	; 1
   1ab30:	83 16       	cp	r8, r19
   1ab32:	93 06       	cpc	r9, r19
   1ab34:	0c f0       	brlt	.+2      	; 0x1ab38 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1ab36:	43 c0       	rjmp	.+134    	; 0x1abbe <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1ab38:	c7 5f       	subi	r28, 0xF7	; 247
   1ab3a:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab3c:	48 81       	ld	r20, Y
   1ab3e:	59 81       	ldd	r21, Y+1	; 0x01
   1ab40:	c9 50       	subi	r28, 0x09	; 9
   1ab42:	d3 40       	sbci	r29, 0x03	; 3
   1ab44:	6d ef       	ldi	r22, 0xFD	; 253
   1ab46:	70 e0       	ldi	r23, 0x00	; 0
   1ab48:	ce 01       	movw	r24, r28
   1ab4a:	88 5f       	subi	r24, 0xF8	; 248
   1ab4c:	9d 4f       	sbci	r25, 0xFD	; 253
   1ab4e:	0e 94 39 76 	call	0xec72	; 0xec72 <fgets>
   1ab52:	89 2b       	or	r24, r25
   1ab54:	09 f4       	brne	.+2      	; 0x1ab58 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1ab56:	4b c0       	rjmp	.+150    	; 0x1abee <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1ab58:	ce 01       	movw	r24, r28
   1ab5a:	88 5f       	subi	r24, 0xF8	; 248
   1ab5c:	9d 4f       	sbci	r25, 0xFD	; 253
   1ab5e:	0e 94 ff 31 	call	0x63fe	; 0x63fe <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1ab62:	65 e5       	ldi	r22, 0x55	; 85
   1ab64:	76 e1       	ldi	r23, 0x16	; 22
   1ab66:	ce 01       	movw	r24, r28
   1ab68:	88 5f       	subi	r24, 0xF8	; 248
   1ab6a:	9d 4f       	sbci	r25, 0xFD	; 253
   1ab6c:	0e 94 42 31 	call	0x6284	; 0x6284 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1ab70:	9e 01       	movw	r18, r28
   1ab72:	28 5f       	subi	r18, 0xF8	; 248
   1ab74:	3f 4f       	sbci	r19, 0xFF	; 255
   1ab76:	b3 01       	movw	r22, r6
   1ab78:	a2 01       	movw	r20, r4
   1ab7a:	ce 01       	movw	r24, r28
   1ab7c:	88 5f       	subi	r24, 0xF8	; 248
   1ab7e:	9d 4f       	sbci	r25, 0xFD	; 253
   1ab80:	e6 de       	rcall	.-564    	; 0x1a94e <lif_ascii_string_to_e010>
   1ab82:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1ab84:	a1 14       	cp	r10, r1
   1ab86:	b1 04       	cpc	r11, r1
   1ab88:	19 f2       	breq	.-122    	; 0x1ab10 <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1ab8a:	8c 01       	movw	r16, r24
   1ab8c:	a3 01       	movw	r20, r6
   1ab8e:	92 01       	movw	r18, r4
   1ab90:	be 01       	movw	r22, r28
   1ab92:	68 5f       	subi	r22, 0xF8	; 248
   1ab94:	7f 4f       	sbci	r23, 0xFF	; 255
   1ab96:	c5 01       	movw	r24, r10
   1ab98:	0e 94 dc c1 	call	0x183b8	; 0x183b8 <lif_write>
            if(len < size)
   1ab9c:	82 15       	cp	r24, r2
   1ab9e:	93 05       	cpc	r25, r3
   1aba0:	0c f0       	brlt	.+2      	; 0x1aba4 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1aba2:	b6 cf       	rjmp	.-148    	; 0x1ab10 <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1aba4:	c7 5f       	subi	r28, 0xF7	; 247
   1aba6:	dc 4f       	sbci	r29, 0xFC	; 252
   1aba8:	88 81       	ld	r24, Y
   1abaa:	99 81       	ldd	r25, Y+1	; 0x01
   1abac:	c9 50       	subi	r28, 0x09	; 9
   1abae:	d3 40       	sbci	r29, 0x03	; 3
   1abb0:	0e 94 cb 7c 	call	0xf996	; 0xf996 <fclose>
                return(-1);
   1abb4:	6f ef       	ldi	r22, 0xFF	; 255
   1abb6:	7f ef       	ldi	r23, 0xFF	; 255
   1abb8:	8f ef       	ldi	r24, 0xFF	; 255
   1abba:	9f ef       	ldi	r25, 0xFF	; 255
   1abbc:	84 c0       	rjmp	.+264    	; 0x1acc6 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1abbe:	a1 14       	cp	r10, r1
   1abc0:	b1 04       	cpc	r11, r1
   1abc2:	91 f0       	breq	.+36     	; 0x1abe8 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1abc4:	ed b7       	in	r30, 0x3d	; 61
   1abc6:	fe b7       	in	r31, 0x3e	; 62
   1abc8:	c4 82       	std	Z+4, r12	; 0x04
   1abca:	d5 82       	std	Z+5, r13	; 0x05
   1abcc:	e6 82       	std	Z+6, r14	; 0x06
   1abce:	f7 82       	std	Z+7, r15	; 0x07
   1abd0:	c5 5f       	subi	r28, 0xF5	; 245
   1abd2:	dc 4f       	sbci	r29, 0xFC	; 252
   1abd4:	28 81       	ld	r18, Y
   1abd6:	39 81       	ldd	r19, Y+1	; 0x01
   1abd8:	4a 81       	ldd	r20, Y+2	; 0x02
   1abda:	cb 50       	subi	r28, 0x0B	; 11
   1abdc:	d3 40       	sbci	r29, 0x03	; 3
   1abde:	21 83       	std	Z+1, r18	; 0x01
   1abe0:	32 83       	std	Z+2, r19	; 0x02
   1abe2:	43 83       	std	Z+3, r20	; 0x03
   1abe4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1abe8:	81 2c       	mov	r8, r1
   1abea:	91 2c       	mov	r9, r1
   1abec:	a5 cf       	rjmp	.-182    	; 0x1ab38 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1abee:	c7 5f       	subi	r28, 0xF7	; 247
   1abf0:	dc 4f       	sbci	r29, 0xFC	; 252
   1abf2:	88 81       	ld	r24, Y
   1abf4:	99 81       	ldd	r25, Y+1	; 0x01
   1abf6:	c9 50       	subi	r28, 0x09	; 9
   1abf8:	d3 40       	sbci	r29, 0x03	; 3
   1abfa:	0e 94 cb 7c 	call	0xf996	; 0xf996 <fclose>

// Write EOF
    str[0] = 0;
   1abfe:	c8 5f       	subi	r28, 0xF8	; 248
   1ac00:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac02:	18 82       	st	Y, r1
   1ac04:	c8 50       	subi	r28, 0x08	; 8
   1ac06:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1ac08:	9e 01       	movw	r18, r28
   1ac0a:	28 5f       	subi	r18, 0xF8	; 248
   1ac0c:	3f 4f       	sbci	r19, 0xFF	; 255
   1ac0e:	b3 01       	movw	r22, r6
   1ac10:	a2 01       	movw	r20, r4
   1ac12:	ce 01       	movw	r24, r28
   1ac14:	88 5f       	subi	r24, 0xF8	; 248
   1ac16:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac18:	9a de       	rcall	.-716    	; 0x1a94e <lif_ascii_string_to_e010>
   1ac1a:	4c 01       	movw	r8, r24

    if(LIF)
   1ac1c:	a1 14       	cp	r10, r1
   1ac1e:	b1 04       	cpc	r11, r1
   1ac20:	d1 f4       	brne	.+52     	; 0x1ac56 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1ac22:	c4 01       	movw	r24, r8
   1ac24:	09 2c       	mov	r0, r9
   1ac26:	00 0c       	add	r0, r0
   1ac28:	aa 0b       	sbc	r26, r26
   1ac2a:	bb 0b       	sbc	r27, r27
   1ac2c:	c8 0e       	add	r12, r24
   1ac2e:	d9 1e       	adc	r13, r25
   1ac30:	ea 1e       	adc	r14, r26
   1ac32:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1ac34:	12 01       	movw	r2, r4
   1ac36:	23 01       	movw	r4, r6
   1ac38:	28 0e       	add	r2, r24
   1ac3a:	39 1e       	adc	r3, r25
   1ac3c:	4a 1e       	adc	r4, r26
   1ac3e:	5b 1e       	adc	r5, r27
   1ac40:	ae 01       	movw	r20, r28
   1ac42:	48 5f       	subi	r20, 0xF8	; 248
   1ac44:	5f 4f       	sbci	r21, 0xFF	; 255
   1ac46:	c2 01       	movw	r24, r4
   1ac48:	b1 01       	movw	r22, r2
   1ac4a:	26 de       	rcall	.-948    	; 0x1a898 <lif_e010_pad_sector>
   1ac4c:	3c 01       	movw	r6, r24
    if(LIF)
   1ac4e:	a1 14       	cp	r10, r1
   1ac50:	b1 04       	cpc	r11, r1
   1ac52:	e1 f4       	brne	.+56     	; 0x1ac8c <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1ac54:	36 c0       	rjmp	.+108    	; 0x1acc2 <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1ac56:	ed b7       	in	r30, 0x3d	; 61
   1ac58:	fe b7       	in	r31, 0x3e	; 62
   1ac5a:	c4 82       	std	Z+4, r12	; 0x04
   1ac5c:	d5 82       	std	Z+5, r13	; 0x05
   1ac5e:	e6 82       	std	Z+6, r14	; 0x06
   1ac60:	f7 82       	std	Z+7, r15	; 0x07
   1ac62:	8a eb       	ldi	r24, 0xBA	; 186
   1ac64:	98 e3       	ldi	r25, 0x38	; 56
   1ac66:	a0 e0       	ldi	r26, 0x00	; 0
   1ac68:	81 83       	std	Z+1, r24	; 0x01
   1ac6a:	92 83       	std	Z+2, r25	; 0x02
   1ac6c:	a3 83       	std	Z+3, r26	; 0x03
   1ac6e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1ac72:	84 01       	movw	r16, r8
   1ac74:	a3 01       	movw	r20, r6
   1ac76:	92 01       	movw	r18, r4
   1ac78:	be 01       	movw	r22, r28
   1ac7a:	68 5f       	subi	r22, 0xF8	; 248
   1ac7c:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac7e:	c5 01       	movw	r24, r10
   1ac80:	0e 94 dc c1 	call	0x183b8	; 0x183b8 <lif_write>
        if(len < size)
   1ac84:	88 15       	cp	r24, r8
   1ac86:	99 05       	cpc	r25, r9
   1ac88:	64 f6       	brge	.-104    	; 0x1ac22 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1ac8a:	94 cf       	rjmp	.-216    	; 0x1abb4 <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1ac8c:	8c 01       	movw	r16, r24
   1ac8e:	a2 01       	movw	r20, r4
   1ac90:	91 01       	movw	r18, r2
   1ac92:	be 01       	movw	r22, r28
   1ac94:	68 5f       	subi	r22, 0xF8	; 248
   1ac96:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac98:	c5 01       	movw	r24, r10
   1ac9a:	0e 94 dc c1 	call	0x183b8	; 0x183b8 <lif_write>
        if(len < size)
   1ac9e:	86 15       	cp	r24, r6
   1aca0:	97 05       	cpc	r25, r7
   1aca2:	0c f4       	brge	.+2      	; 0x1aca6 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1aca4:	87 cf       	rjmp	.-242    	; 0x1abb4 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1aca6:	ed b7       	in	r30, 0x3d	; 61
   1aca8:	fe b7       	in	r31, 0x3e	; 62
   1acaa:	c4 82       	std	Z+4, r12	; 0x04
   1acac:	d5 82       	std	Z+5, r13	; 0x05
   1acae:	e6 82       	std	Z+6, r14	; 0x06
   1acb0:	f7 82       	std	Z+7, r15	; 0x07
   1acb2:	8c ea       	ldi	r24, 0xAC	; 172
   1acb4:	98 e3       	ldi	r25, 0x38	; 56
   1acb6:	a0 e0       	ldi	r26, 0x00	; 0
   1acb8:	81 83       	std	Z+1, r24	; 0x01
   1acba:	92 83       	std	Z+2, r25	; 0x02
   1acbc:	a3 83       	std	Z+3, r26	; 0x03
   1acbe:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    return(bytes);
   1acc2:	b6 01       	movw	r22, r12
   1acc4:	c7 01       	movw	r24, r14
}
   1acc6:	c3 5f       	subi	r28, 0xF3	; 243
   1acc8:	dc 4f       	sbci	r29, 0xFC	; 252
   1acca:	e2 e1       	ldi	r30, 0x12	; 18
   1accc:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0001acd0 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1acd0:	ab e3       	ldi	r26, 0x3B	; 59
   1acd2:	b0 e0       	ldi	r27, 0x00	; 0
   1acd4:	ee e6       	ldi	r30, 0x6E	; 110
   1acd6:	f6 ed       	ldi	r31, 0xD6	; 214
   1acd8:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
   1acdc:	6c 01       	movw	r12, r24
   1acde:	1b 01       	movw	r2, r22
   1ace0:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1ace2:	fc 01       	movw	r30, r24
   1ace4:	80 81       	ld	r24, Z
   1ace6:	81 11       	cpse	r24, r1
   1ace8:	03 c0       	rjmp	.+6      	; 0x1acf0 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1acea:	89 e7       	ldi	r24, 0x79	; 121
   1acec:	98 e3       	ldi	r25, 0x38	; 56
   1acee:	1a c0       	rjmp	.+52     	; 0x1ad24 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1acf0:	fb 01       	movw	r30, r22
   1acf2:	80 81       	ld	r24, Z
   1acf4:	81 11       	cpse	r24, r1
   1acf6:	03 c0       	rjmp	.+6      	; 0x1acfe <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1acf8:	8b e4       	ldi	r24, 0x4B	; 75
   1acfa:	98 e3       	ldi	r25, 0x38	; 56
   1acfc:	13 c0       	rjmp	.+38     	; 0x1ad24 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1acfe:	fa 01       	movw	r30, r20
   1ad00:	80 81       	ld	r24, Z
   1ad02:	81 11       	cpse	r24, r1
   1ad04:	03 c0       	rjmp	.+6      	; 0x1ad0c <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1ad06:	8c e1       	ldi	r24, 0x1C	; 28
   1ad08:	98 e3       	ldi	r25, 0x38	; 56
   1ad0a:	0c c0       	rjmp	.+24     	; 0x1ad24 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1ad0c:	be 01       	movw	r22, r28
   1ad0e:	66 5f       	subi	r22, 0xF6	; 246
   1ad10:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad12:	ca 01       	movw	r24, r20
   1ad14:	0e 94 2f c1 	call	0x1825e	; 0x1825e <lif_stat>
   1ad18:	9b af       	std	Y+59, r25	; 0x3b
   1ad1a:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1ad1c:	89 2b       	or	r24, r25
   1ad1e:	59 f4       	brne	.+22     	; 0x1ad36 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1ad20:	8c ee       	ldi	r24, 0xEC	; 236
   1ad22:	97 e3       	ldi	r25, 0x37	; 55
   1ad24:	a0 e0       	ldi	r26, 0x00	; 0
   1ad26:	ed b7       	in	r30, 0x3d	; 61
   1ad28:	fe b7       	in	r31, 0x3e	; 62
   1ad2a:	81 83       	std	Z+1, r24	; 0x01
   1ad2c:	92 83       	std	Z+2, r25	; 0x02
   1ad2e:	a3 83       	std	Z+3, r26	; 0x03
   1ad30:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1ad34:	01 c1       	rjmp	.+514    	; 0x1af38 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1ad36:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1ad3a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ad3e:	92 ff       	sbrs	r25, 2
   1ad40:	10 c0       	rjmp	.+32     	; 0x1ad62 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1ad42:	ed b7       	in	r30, 0x3d	; 61
   1ad44:	fe b7       	in	r31, 0x3e	; 62
   1ad46:	f1 86       	std	Z+9, r15	; 0x09
   1ad48:	e0 86       	std	Z+8, r14	; 0x08
   1ad4a:	37 82       	std	Z+7, r3	; 0x07
   1ad4c:	26 82       	std	Z+6, r2	; 0x06
   1ad4e:	d5 82       	std	Z+5, r13	; 0x05
   1ad50:	c4 82       	std	Z+4, r12	; 0x04
   1ad52:	8d eb       	ldi	r24, 0xBD	; 189
   1ad54:	97 e3       	ldi	r25, 0x37	; 55
   1ad56:	a0 e0       	ldi	r26, 0x00	; 0
   1ad58:	81 83       	std	Z+1, r24	; 0x01
   1ad5a:	92 83       	std	Z+2, r25	; 0x02
   1ad5c:	a3 83       	std	Z+3, r26	; 0x03
   1ad5e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1ad62:	97 01       	movw	r18, r14
   1ad64:	40 e0       	ldi	r20, 0x00	; 0
   1ad66:	50 e0       	ldi	r21, 0x00	; 0
   1ad68:	ba 01       	movw	r22, r20
   1ad6a:	80 e0       	ldi	r24, 0x00	; 0
   1ad6c:	90 e0       	ldi	r25, 0x00	; 0
   1ad6e:	a8 de       	rcall	.-688    	; 0x1aac0 <lif_add_ascii_file_as_e010_wrapper>
   1ad70:	4b 01       	movw	r8, r22
   1ad72:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1ad74:	47 2e       	mov	r4, r23
   1ad76:	58 2e       	mov	r5, r24
   1ad78:	69 2e       	mov	r6, r25
   1ad7a:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1ad7c:	66 23       	and	r22, r22
   1ad7e:	29 f0       	breq	.+10     	; 0x1ad8a <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1ad80:	ff ef       	ldi	r31, 0xFF	; 255
   1ad82:	4f 1a       	sub	r4, r31
   1ad84:	5f 0a       	sbc	r5, r31
   1ad86:	6f 0a       	sbc	r6, r31
   1ad88:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1ad8a:	61 e0       	ldi	r22, 0x01	; 1
   1ad8c:	79 e0       	ldi	r23, 0x09	; 9
   1ad8e:	c6 01       	movw	r24, r12
   1ad90:	49 da       	rcall	.-2926   	; 0x1a224 <lif_open_volume>
   1ad92:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1ad94:	00 97       	sbiw	r24, 0x00	; 0
   1ad96:	09 f4       	brne	.+2      	; 0x1ad9a <lif_add_ascii_file_as_e010+0xca>
   1ad98:	cf c0       	rjmp	.+414    	; 0x1af38 <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1ad9a:	b3 01       	movw	r22, r6
   1ad9c:	a2 01       	movw	r20, r4
   1ad9e:	e2 d8       	rcall	.-3644   	; 0x19f64 <lif_newdir>
   1ada0:	3c 01       	movw	r6, r24
    if(index == -1)
   1ada2:	8f ef       	ldi	r24, 0xFF	; 255
   1ada4:	68 16       	cp	r6, r24
   1ada6:	78 06       	cpc	r7, r24
   1ada8:	79 f4       	brne	.+30     	; 0x1adc8 <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1adaa:	ed b7       	in	r30, 0x3d	; 61
   1adac:	fe b7       	in	r31, 0x3e	; 62
   1adae:	f7 82       	std	Z+7, r15	; 0x07
   1adb0:	e6 82       	std	Z+6, r14	; 0x06
   1adb2:	d5 82       	std	Z+5, r13	; 0x05
   1adb4:	c4 82       	std	Z+4, r12	; 0x04
   1adb6:	8d e8       	ldi	r24, 0x8D	; 141
   1adb8:	97 e3       	ldi	r25, 0x37	; 55
   1adba:	a0 e0       	ldi	r26, 0x00	; 0
   1adbc:	81 83       	std	Z+1, r24	; 0x01
   1adbe:	92 83       	std	Z+2, r25	; 0x02
   1adc0:	a3 83       	std	Z+3, r26	; 0x03
   1adc2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1adc6:	a0 c0       	rjmp	.+320    	; 0x1af08 <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1adc8:	68 01       	movw	r12, r16
   1adca:	ff e4       	ldi	r31, 0x4F	; 79
   1adcc:	cf 0e       	add	r12, r31
   1adce:	d1 1c       	adc	r13, r1
   1add0:	4a e0       	ldi	r20, 0x0A	; 10
   1add2:	50 e0       	ldi	r21, 0x00	; 0
   1add4:	b1 01       	movw	r22, r2
   1add6:	c6 01       	movw	r24, r12
   1add8:	0e 94 de c2 	call	0x185bc	; 0x185bc <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1addc:	80 e1       	ldi	r24, 0x10	; 16
   1adde:	90 ee       	ldi	r25, 0xE0	; 224
   1ade0:	f8 01       	movw	r30, r16
   1ade2:	e6 5a       	subi	r30, 0xA6	; 166
   1ade4:	ff 4f       	sbci	r31, 0xFF	; 255
   1ade6:	91 83       	std	Z+1, r25	; 0x01
   1ade8:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1adea:	ea ad       	ldd	r30, Y+58	; 0x3a
   1adec:	fb ad       	ldd	r31, Y+59	; 0x3b
   1adee:	60 a5       	ldd	r22, Z+40	; 0x28
   1adf0:	71 a5       	ldd	r23, Z+41	; 0x29
   1adf2:	82 a5       	ldd	r24, Z+42	; 0x2a
   1adf4:	93 a5       	ldd	r25, Z+43	; 0x2b
   1adf6:	a8 01       	movw	r20, r16
   1adf8:	4c 59       	subi	r20, 0x9C	; 156
   1adfa:	5f 4f       	sbci	r21, 0xFF	; 255
   1adfc:	0e 94 03 c5 	call	0x18a06	; 0x18a06 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1ae00:	81 e0       	ldi	r24, 0x01	; 1
   1ae02:	90 e8       	ldi	r25, 0x80	; 128
   1ae04:	f8 01       	movw	r30, r16
   1ae06:	e6 59       	subi	r30, 0x96	; 150
   1ae08:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae0a:	91 83       	std	Z+1, r25	; 0x01
   1ae0c:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1ae0e:	32 96       	adiw	r30, 0x02	; 2
   1ae10:	91 82       	std	Z+1, r9	; 0x01
   1ae12:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1ae14:	80 e0       	ldi	r24, 0x00	; 0
   1ae16:	91 e0       	ldi	r25, 0x01	; 1
   1ae18:	32 96       	adiw	r30, 0x02	; 2
   1ae1a:	91 83       	std	Z+1, r25	; 0x01
   1ae1c:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ae1e:	58 01       	movw	r10, r16
   1ae20:	fc e5       	ldi	r31, 0x5C	; 92
   1ae22:	af 0e       	add	r10, r31
   1ae24:	b1 1c       	adc	r11, r1
   1ae26:	f5 01       	movw	r30, r10
   1ae28:	80 81       	ld	r24, Z
   1ae2a:	91 81       	ldd	r25, Z+1	; 0x01
   1ae2c:	a2 81       	ldd	r26, Z+2	; 0x02
   1ae2e:	b3 81       	ldd	r27, Z+3	; 0x03
   1ae30:	22 24       	eor	r2, r2
   1ae32:	38 2e       	mov	r3, r24
   1ae34:	49 2e       	mov	r4, r25
   1ae36:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1ae38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1ae3c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ae40:	92 ff       	sbrs	r25, 2
   1ae42:	05 c0       	rjmp	.+10     	; 0x1ae4e <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1ae44:	67 e5       	ldi	r22, 0x57	; 87
   1ae46:	76 e1       	ldi	r23, 0x16	; 22
   1ae48:	c8 01       	movw	r24, r16
   1ae4a:	0e 94 ef c5 	call	0x18bde	; 0x18bde <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1ae4e:	97 01       	movw	r18, r14
   1ae50:	b2 01       	movw	r22, r4
   1ae52:	a1 01       	movw	r20, r2
   1ae54:	c8 01       	movw	r24, r16
   1ae56:	34 de       	rcall	.-920    	; 0x1aac0 <lif_add_ascii_file_as_e010_wrapper>
   1ae58:	4b 01       	movw	r8, r22
   1ae5a:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1ae5c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1ae60:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ae64:	92 ff       	sbrs	r25, 2
   1ae66:	4a c0       	rjmp	.+148    	; 0x1aefc <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1ae68:	86 e6       	ldi	r24, 0x66	; 102
   1ae6a:	97 e3       	ldi	r25, 0x37	; 55
   1ae6c:	a0 e0       	ldi	r26, 0x00	; 0
   1ae6e:	ed b7       	in	r30, 0x3d	; 61
   1ae70:	fe b7       	in	r31, 0x3e	; 62
   1ae72:	81 83       	std	Z+1, r24	; 0x01
   1ae74:	92 83       	std	Z+2, r25	; 0x02
   1ae76:	a3 83       	std	Z+3, r26	; 0x03
   1ae78:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1ae7c:	ed b7       	in	r30, 0x3d	; 61
   1ae7e:	fe b7       	in	r31, 0x3e	; 62
   1ae80:	d5 82       	std	Z+5, r13	; 0x05
   1ae82:	c4 82       	std	Z+4, r12	; 0x04
   1ae84:	8f e4       	ldi	r24, 0x4F	; 79
   1ae86:	97 e3       	ldi	r25, 0x37	; 55
   1ae88:	a0 e0       	ldi	r26, 0x00	; 0
   1ae8a:	81 83       	std	Z+1, r24	; 0x01
   1ae8c:	92 83       	std	Z+2, r25	; 0x02
   1ae8e:	a3 83       	std	Z+3, r26	; 0x03
   1ae90:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1ae94:	ed b7       	in	r30, 0x3d	; 61
   1ae96:	fe b7       	in	r31, 0x3e	; 62
   1ae98:	75 82       	std	Z+5, r7	; 0x05
   1ae9a:	64 82       	std	Z+4, r6	; 0x04
   1ae9c:	88 e3       	ldi	r24, 0x38	; 56
   1ae9e:	97 e3       	ldi	r25, 0x37	; 55
   1aea0:	a0 e0       	ldi	r26, 0x00	; 0
   1aea2:	81 83       	std	Z+1, r24	; 0x01
   1aea4:	92 83       	std	Z+2, r25	; 0x02
   1aea6:	a3 83       	std	Z+3, r26	; 0x03
   1aea8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1aeac:	f5 01       	movw	r30, r10
   1aeae:	80 81       	ld	r24, Z
   1aeb0:	91 81       	ldd	r25, Z+1	; 0x01
   1aeb2:	a2 81       	ldd	r26, Z+2	; 0x02
   1aeb4:	b3 81       	ldd	r27, Z+3	; 0x03
   1aeb6:	ed b7       	in	r30, 0x3d	; 61
   1aeb8:	fe b7       	in	r31, 0x3e	; 62
   1aeba:	84 83       	std	Z+4, r24	; 0x04
   1aebc:	95 83       	std	Z+5, r25	; 0x05
   1aebe:	a6 83       	std	Z+6, r26	; 0x06
   1aec0:	b7 83       	std	Z+7, r27	; 0x07
   1aec2:	8f e1       	ldi	r24, 0x1F	; 31
   1aec4:	97 e3       	ldi	r25, 0x37	; 55
   1aec6:	a0 e0       	ldi	r26, 0x00	; 0
   1aec8:	81 83       	std	Z+1, r24	; 0x01
   1aeca:	92 83       	std	Z+2, r25	; 0x02
   1aecc:	a3 83       	std	Z+3, r26	; 0x03
   1aece:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1aed2:	f8 01       	movw	r30, r16
   1aed4:	e0 5a       	subi	r30, 0xA0	; 160
   1aed6:	ff 4f       	sbci	r31, 0xFF	; 255
   1aed8:	80 81       	ld	r24, Z
   1aeda:	91 81       	ldd	r25, Z+1	; 0x01
   1aedc:	a2 81       	ldd	r26, Z+2	; 0x02
   1aede:	b3 81       	ldd	r27, Z+3	; 0x03
   1aee0:	ed b7       	in	r30, 0x3d	; 61
   1aee2:	fe b7       	in	r31, 0x3e	; 62
   1aee4:	84 83       	std	Z+4, r24	; 0x04
   1aee6:	95 83       	std	Z+5, r25	; 0x05
   1aee8:	a6 83       	std	Z+6, r26	; 0x06
   1aeea:	b7 83       	std	Z+7, r27	; 0x07
   1aeec:	86 e0       	ldi	r24, 0x06	; 6
   1aeee:	97 e3       	ldi	r25, 0x37	; 55
   1aef0:	a0 e0       	ldi	r26, 0x00	; 0
   1aef2:	81 83       	std	Z+1, r24	; 0x01
   1aef4:	92 83       	std	Z+2, r25	; 0x02
   1aef6:	a3 83       	std	Z+3, r26	; 0x03
   1aef8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1aefc:	b3 01       	movw	r22, r6
   1aefe:	c8 01       	movw	r24, r16
   1af00:	0e 94 4a cb 	call	0x19694	; 0x19694 <lif_writedirindex>
   1af04:	89 2b       	or	r24, r25
   1af06:	21 f4       	brne	.+8      	; 0x1af10 <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af08:	c8 01       	movw	r24, r16
   1af0a:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
   1af0e:	14 c0       	rjmp	.+40     	; 0x1af38 <lif_add_ascii_file_as_e010+0x268>
   1af10:	c8 01       	movw	r24, r16
   1af12:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1af16:	ed b7       	in	r30, 0x3d	; 61
   1af18:	fe b7       	in	r31, 0x3e	; 62
   1af1a:	84 82       	std	Z+4, r8	; 0x04
   1af1c:	95 82       	std	Z+5, r9	; 0x05
   1af1e:	e6 82       	std	Z+6, r14	; 0x06
   1af20:	f7 82       	std	Z+7, r15	; 0x07
   1af22:	88 ef       	ldi	r24, 0xF8	; 248
   1af24:	96 e3       	ldi	r25, 0x36	; 54
   1af26:	a0 e0       	ldi	r26, 0x00	; 0
   1af28:	81 83       	std	Z+1, r24	; 0x01
   1af2a:	92 83       	std	Z+2, r25	; 0x02
   1af2c:	a3 83       	std	Z+3, r26	; 0x03
   1af2e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

// Return file size
    return(bytes);
   1af32:	b4 01       	movw	r22, r8
   1af34:	c7 01       	movw	r24, r14
   1af36:	04 c0       	rjmp	.+8      	; 0x1af40 <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1af38:	6f ef       	ldi	r22, 0xFF	; 255
   1af3a:	7f ef       	ldi	r23, 0xFF	; 255
   1af3c:	8f ef       	ldi	r24, 0xFF	; 255
   1af3e:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1af40:	eb 96       	adiw	r28, 0x3b	; 59
   1af42:	e2 e1       	ldi	r30, 0x12	; 18
   1af44:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0001af48 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1af48:	a7 e3       	ldi	r26, 0x37	; 55
   1af4a:	b2 e0       	ldi	r27, 0x02	; 2
   1af4c:	ea ea       	ldi	r30, 0xAA	; 170
   1af4e:	f7 ed       	ldi	r31, 0xD7	; 215
   1af50:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
   1af54:	7c 01       	movw	r14, r24
   1af56:	8b 01       	movw	r16, r22
   1af58:	ca 5d       	subi	r28, 0xDA	; 218
   1af5a:	dd 4f       	sbci	r29, 0xFD	; 253
   1af5c:	59 83       	std	Y+1, r21	; 0x01
   1af5e:	48 83       	st	Y, r20
   1af60:	c6 52       	subi	r28, 0x26	; 38
   1af62:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1af64:	62 e4       	ldi	r22, 0x42	; 66
   1af66:	73 e0       	ldi	r23, 0x03	; 3
   1af68:	5d d9       	rcall	.-3398   	; 0x1a224 <lif_open_volume>
   1af6a:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1af6c:	00 97       	sbiw	r24, 0x00	; 0
   1af6e:	69 f4       	brne	.+26     	; 0x1af8a <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1af70:	ed b7       	in	r30, 0x3d	; 61
   1af72:	fe b7       	in	r31, 0x3e	; 62
   1af74:	f5 82       	std	Z+5, r15	; 0x05
   1af76:	e4 82       	std	Z+4, r14	; 0x04
   1af78:	80 ee       	ldi	r24, 0xE0	; 224
   1af7a:	96 e3       	ldi	r25, 0x36	; 54
   1af7c:	a0 e0       	ldi	r26, 0x00	; 0
   1af7e:	81 83       	std	Z+1, r24	; 0x01
   1af80:	92 83       	std	Z+2, r25	; 0x02
   1af82:	a3 83       	std	Z+3, r26	; 0x03
   1af84:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1af88:	13 c0       	rjmp	.+38     	; 0x1afb0 <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1af8a:	b8 01       	movw	r22, r16
   1af8c:	20 dc       	rcall	.-1984   	; 0x1a7ce <lif_find_file>
    if(index == -1)
   1af8e:	01 96       	adiw	r24, 0x01	; 1
   1af90:	91 f4       	brne	.+36     	; 0x1afb6 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1af92:	ed b7       	in	r30, 0x3d	; 61
   1af94:	fe b7       	in	r31, 0x3e	; 62
   1af96:	15 83       	std	Z+5, r17	; 0x05
   1af98:	04 83       	std	Z+4, r16	; 0x04
   1af9a:	89 ec       	ldi	r24, 0xC9	; 201
   1af9c:	96 e3       	ldi	r25, 0x36	; 54
   1af9e:	a0 e0       	ldi	r26, 0x00	; 0
   1afa0:	81 83       	std	Z+1, r24	; 0x01
   1afa2:	92 83       	std	Z+2, r25	; 0x02
   1afa4:	a3 83       	std	Z+3, r26	; 0x03
   1afa6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1afaa:	c6 01       	movw	r24, r12
   1afac:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1afb0:	80 e0       	ldi	r24, 0x00	; 0
   1afb2:	90 e0       	ldi	r25, 0x00	; 0
   1afb4:	73 c2       	rjmp	.+1254   	; 0x1b49c <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1afb6:	f6 01       	movw	r30, r12
   1afb8:	e6 5a       	subi	r30, 0xA6	; 166
   1afba:	ff 4f       	sbci	r31, 0xFF	; 255
   1afbc:	80 81       	ld	r24, Z
   1afbe:	91 81       	ldd	r25, Z+1	; 0x01
   1afc0:	9c 01       	movw	r18, r24
   1afc2:	2c 7f       	andi	r18, 0xFC	; 252
   1afc4:	20 31       	cpi	r18, 0x10	; 16
   1afc6:	30 4e       	sbci	r19, 0xE0	; 224
   1afc8:	a9 f0       	breq	.+42     	; 0x1aff4 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1afca:	ed b7       	in	r30, 0x3d	; 61
   1afcc:	fe b7       	in	r31, 0x3e	; 62
   1afce:	97 83       	std	Z+7, r25	; 0x07
   1afd0:	86 83       	std	Z+6, r24	; 0x06
   1afd2:	ca 5d       	subi	r28, 0xDA	; 218
   1afd4:	dd 4f       	sbci	r29, 0xFD	; 253
   1afd6:	28 81       	ld	r18, Y
   1afd8:	39 81       	ldd	r19, Y+1	; 0x01
   1afda:	c6 52       	subi	r28, 0x26	; 38
   1afdc:	d2 40       	sbci	r29, 0x02	; 2
   1afde:	35 83       	std	Z+5, r19	; 0x05
   1afe0:	24 83       	std	Z+4, r18	; 0x04
   1afe2:	81 e9       	ldi	r24, 0x91	; 145
   1afe4:	96 e3       	ldi	r25, 0x36	; 54
   1afe6:	a0 e0       	ldi	r26, 0x00	; 0
   1afe8:	81 83       	std	Z+1, r24	; 0x01
   1afea:	92 83       	std	Z+2, r25	; 0x02
   1afec:	a3 83       	std	Z+3, r26	; 0x03
   1afee:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1aff2:	db cf       	rjmp	.-74     	; 0x1afaa <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1aff4:	f6 01       	movw	r30, r12
   1aff6:	e4 5a       	subi	r30, 0xA4	; 164
   1aff8:	ff 4f       	sbci	r31, 0xFF	; 255
   1affa:	80 80       	ld	r8, Z
   1affc:	91 80       	ldd	r9, Z+1	; 0x01
   1affe:	a2 80       	ldd	r10, Z+2	; 0x02
   1b000:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1b002:	34 96       	adiw	r30, 0x04	; 4
   1b004:	80 81       	ld	r24, Z
   1b006:	91 81       	ldd	r25, Z+1	; 0x01
   1b008:	a2 81       	ldd	r26, Z+2	; 0x02
   1b00a:	b3 81       	ldd	r27, Z+3	; 0x03
   1b00c:	a5 01       	movw	r20, r10
   1b00e:	94 01       	movw	r18, r8
   1b010:	28 0f       	add	r18, r24
   1b012:	39 1f       	adc	r19, r25
   1b014:	4a 1f       	adc	r20, r26
   1b016:	5b 1f       	adc	r21, r27
   1b018:	c4 5d       	subi	r28, 0xD4	; 212
   1b01a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b01c:	28 83       	st	Y, r18
   1b01e:	39 83       	std	Y+1, r19	; 0x01
   1b020:	4a 83       	std	Y+2, r20	; 0x02
   1b022:	5b 83       	std	Y+3, r21	; 0x03
   1b024:	cc 52       	subi	r28, 0x2C	; 44
   1b026:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1b028:	c6 01       	movw	r24, r12
   1b02a:	8c 59       	subi	r24, 0x9C	; 156
   1b02c:	9f 4f       	sbci	r25, 0xFF	; 255
   1b02e:	0e 94 45 c5 	call	0x18a8a	; 0x18a8a <lif_lifbcd2time>
   1b032:	c8 5d       	subi	r28, 0xD8	; 216
   1b034:	dd 4f       	sbci	r29, 0xFD	; 253
   1b036:	68 83       	st	Y, r22
   1b038:	79 83       	std	Y+1, r23	; 0x01
   1b03a:	8a 83       	std	Y+2, r24	; 0x02
   1b03c:	9b 83       	std	Y+3, r25	; 0x03
   1b03e:	c8 52       	subi	r28, 0x28	; 40
   1b040:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1b042:	ba 2d       	mov	r27, r10
   1b044:	a9 2d       	mov	r26, r9
   1b046:	98 2d       	mov	r25, r8
   1b048:	88 27       	eor	r24, r24
   1b04a:	c2 5e       	subi	r28, 0xE2	; 226
   1b04c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b04e:	88 83       	st	Y, r24
   1b050:	99 83       	std	Y+1, r25	; 0x01
   1b052:	aa 83       	std	Y+2, r26	; 0x02
   1b054:	bb 83       	std	Y+3, r27	; 0x03
   1b056:	ce 51       	subi	r28, 0x1E	; 30
   1b058:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1b05a:	6c e0       	ldi	r22, 0x0C	; 12
   1b05c:	79 e0       	ldi	r23, 0x09	; 9
   1b05e:	ca 5d       	subi	r28, 0xDA	; 218
   1b060:	dd 4f       	sbci	r29, 0xFD	; 253
   1b062:	88 81       	ld	r24, Y
   1b064:	99 81       	ldd	r25, Y+1	; 0x01
   1b066:	c6 52       	subi	r28, 0x26	; 38
   1b068:	d2 40       	sbci	r29, 0x02	; 2
   1b06a:	0e 94 05 c1 	call	0x1820a	; 0x1820a <lif_open>
   1b06e:	cc 5d       	subi	r28, 0xDC	; 220
   1b070:	dd 4f       	sbci	r29, 0xFD	; 253
   1b072:	99 83       	std	Y+1, r25	; 0x01
   1b074:	88 83       	st	Y, r24
   1b076:	c4 52       	subi	r28, 0x24	; 36
   1b078:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1b07a:	89 2b       	or	r24, r25
   1b07c:	09 f4       	brne	.+2      	; 0x1b080 <lif_extract_e010_as_ascii+0x138>
   1b07e:	95 cf       	rjmp	.-214    	; 0x1afaa <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b080:	ca 5d       	subi	r28, 0xDA	; 218
   1b082:	dd 4f       	sbci	r29, 0xFD	; 253
   1b084:	28 81       	ld	r18, Y
   1b086:	39 81       	ldd	r19, Y+1	; 0x01
   1b088:	c6 52       	subi	r28, 0x26	; 38
   1b08a:	d2 40       	sbci	r29, 0x02	; 2
   1b08c:	ed b7       	in	r30, 0x3d	; 61
   1b08e:	fe b7       	in	r31, 0x3e	; 62
   1b090:	35 83       	std	Z+5, r19	; 0x05
   1b092:	24 83       	std	Z+4, r18	; 0x04
   1b094:	81 e8       	ldi	r24, 0x81	; 129
   1b096:	96 e3       	ldi	r25, 0x36	; 54
   1b098:	a0 e0       	ldi	r26, 0x00	; 0
   1b09a:	81 83       	std	Z+1, r24	; 0x01
   1b09c:	92 83       	std	Z+2, r25	; 0x02
   1b09e:	a3 83       	std	Z+3, r26	; 0x03
   1b0a0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    bytes = 0;
    wind = 0;
   1b0a4:	21 2c       	mov	r2, r1
   1b0a6:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b0a8:	ce 5d       	subi	r28, 0xDE	; 222
   1b0aa:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0ac:	19 82       	std	Y+1, r1	; 0x01
   1b0ae:	18 82       	st	Y, r1
   1b0b0:	c2 52       	subi	r28, 0x22	; 34
   1b0b2:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b0b4:	ee 24       	eor	r14, r14
   1b0b6:	e3 94       	inc	r14
   1b0b8:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b0ba:	41 2c       	mov	r4, r1
   1b0bc:	51 2c       	mov	r5, r1
   1b0be:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b0c0:	80 ec       	ldi	r24, 0xC0	; 192
   1b0c2:	95 e3       	ldi	r25, 0x35	; 53
   1b0c4:	9c 01       	movw	r18, r24
   1b0c6:	40 e0       	ldi	r20, 0x00	; 0
   1b0c8:	ce 5c       	subi	r28, 0xCE	; 206
   1b0ca:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0cc:	28 83       	st	Y, r18
   1b0ce:	39 83       	std	Y+1, r19	; 0x01
   1b0d0:	4a 83       	std	Y+2, r20	; 0x02
   1b0d2:	c2 53       	subi	r28, 0x32	; 50
   1b0d4:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b0d6:	8e ec       	ldi	r24, 0xCE	; 206
   1b0d8:	95 e3       	ldi	r25, 0x35	; 53
   1b0da:	9c 01       	movw	r18, r24
   1b0dc:	40 e0       	ldi	r20, 0x00	; 0
   1b0de:	cb 5c       	subi	r28, 0xCB	; 203
   1b0e0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0e2:	28 83       	st	Y, r18
   1b0e4:	39 83       	std	Y+1, r19	; 0x01
   1b0e6:	4a 83       	std	Y+2, r20	; 0x02
   1b0e8:	c5 53       	subi	r28, 0x35	; 53
   1b0ea:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b0ec:	c2 5e       	subi	r28, 0xE2	; 226
   1b0ee:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0f0:	28 81       	ld	r18, Y
   1b0f2:	39 81       	ldd	r19, Y+1	; 0x01
   1b0f4:	4a 81       	ldd	r20, Y+2	; 0x02
   1b0f6:	5b 81       	ldd	r21, Y+3	; 0x03
   1b0f8:	ce 51       	subi	r28, 0x1E	; 30
   1b0fa:	d2 40       	sbci	r29, 0x02	; 2
   1b0fc:	bb 27       	eor	r27, r27
   1b0fe:	a5 2f       	mov	r26, r21
   1b100:	94 2f       	mov	r25, r20
   1b102:	83 2f       	mov	r24, r19
   1b104:	c4 5d       	subi	r28, 0xD4	; 212
   1b106:	dd 4f       	sbci	r29, 0xFD	; 253
   1b108:	28 81       	ld	r18, Y
   1b10a:	39 81       	ldd	r19, Y+1	; 0x01
   1b10c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b10e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b110:	cc 52       	subi	r28, 0x2C	; 44
   1b112:	d2 40       	sbci	r29, 0x02	; 2
   1b114:	28 17       	cp	r18, r24
   1b116:	39 07       	cpc	r19, r25
   1b118:	4a 07       	cpc	r20, r26
   1b11a:	5b 07       	cpc	r21, r27
   1b11c:	08 f4       	brcc	.+2      	; 0x1b120 <lif_extract_e010_as_ascii+0x1d8>
   1b11e:	51 c1       	rjmp	.+674    	; 0x1b3c2 <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b120:	00 e0       	ldi	r16, 0x00	; 0
   1b122:	11 e0       	ldi	r17, 0x01	; 1
   1b124:	c2 5e       	subi	r28, 0xE2	; 226
   1b126:	dd 4f       	sbci	r29, 0xFD	; 253
   1b128:	28 81       	ld	r18, Y
   1b12a:	39 81       	ldd	r19, Y+1	; 0x01
   1b12c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b12e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b130:	ce 51       	subi	r28, 0x1E	; 30
   1b132:	d2 40       	sbci	r29, 0x02	; 2
   1b134:	be 01       	movw	r22, r28
   1b136:	60 5f       	subi	r22, 0xF0	; 240
   1b138:	7e 4f       	sbci	r23, 0xFE	; 254
   1b13a:	c6 01       	movw	r24, r12
   1b13c:	0e 94 89 c1 	call	0x18312	; 0x18312 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b140:	6f 3f       	cpi	r22, 0xFF	; 255
   1b142:	71 05       	cpc	r23, r1
   1b144:	09 f0       	breq	.+2      	; 0x1b148 <lif_extract_e010_as_ascii+0x200>
   1b146:	0c f4       	brge	.+2      	; 0x1b14a <lif_extract_e010_as_ascii+0x202>
   1b148:	3a c1       	rjmp	.+628    	; 0x1b3be <lif_extract_e010_as_ascii+0x476>
   1b14a:	00 e0       	ldi	r16, 0x00	; 0
   1b14c:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b14e:	ce 5d       	subi	r28, 0xDE	; 222
   1b150:	dd 4f       	sbci	r29, 0xFD	; 253
   1b152:	88 81       	ld	r24, Y
   1b154:	99 81       	ldd	r25, Y+1	; 0x01
   1b156:	c2 52       	subi	r28, 0x22	; 34
   1b158:	d2 40       	sbci	r29, 0x02	; 2
   1b15a:	89 2b       	or	r24, r25
   1b15c:	09 f0       	breq	.+2      	; 0x1b160 <lif_extract_e010_as_ascii+0x218>
   1b15e:	1b c1       	rjmp	.+566    	; 0x1b396 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b160:	e0 e1       	ldi	r30, 0x10	; 16
   1b162:	f1 e0       	ldi	r31, 0x01	; 1
   1b164:	ec 0f       	add	r30, r28
   1b166:	fd 1f       	adc	r31, r29
   1b168:	e0 0f       	add	r30, r16
   1b16a:	f1 1f       	adc	r31, r17
   1b16c:	80 81       	ld	r24, Z
   1b16e:	98 2f       	mov	r25, r24
   1b170:	9f 7e       	andi	r25, 0xEF	; 239
   1b172:	9f 3c       	cpi	r25, 0xCF	; 207
   1b174:	11 f0       	breq	.+4      	; 0x1b17a <lif_extract_e010_as_ascii+0x232>
   1b176:	8f 36       	cpi	r24, 0x6F	; 111
   1b178:	c9 f5       	brne	.+114    	; 0x1b1ec <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b17a:	e0 e1       	ldi	r30, 0x10	; 16
   1b17c:	f1 e0       	ldi	r31, 0x01	; 1
   1b17e:	ec 0f       	add	r30, r28
   1b180:	fd 1f       	adc	r31, r29
   1b182:	e0 0f       	add	r30, r16
   1b184:	f1 1f       	adc	r31, r17
   1b186:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1b188:	f8 01       	movw	r30, r16
   1b18a:	32 96       	adiw	r30, 0x02	; 2
   1b18c:	40 e1       	ldi	r20, 0x10	; 16
   1b18e:	51 e0       	ldi	r21, 0x01	; 1
   1b190:	4c 0f       	add	r20, r28
   1b192:	5d 1f       	adc	r21, r29
   1b194:	e4 0f       	add	r30, r20
   1b196:	f5 1f       	adc	r31, r21
   1b198:	0d 5f       	subi	r16, 0xFD	; 253
   1b19a:	1f 4f       	sbci	r17, 0xFF	; 255
   1b19c:	80 81       	ld	r24, Z
   1b19e:	b1 2c       	mov	r11, r1
   1b1a0:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1b1a2:	a1 14       	cp	r10, r1
   1b1a4:	b1 04       	cpc	r11, r1
   1b1a6:	09 f4       	brne	.+2      	; 0x1b1aa <lif_extract_e010_as_ascii+0x262>
   1b1a8:	ee c0       	rjmp	.+476    	; 0x1b386 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b1aa:	5f ef       	ldi	r21, 0xFF	; 255
   1b1ac:	a5 16       	cp	r10, r21
   1b1ae:	b1 04       	cpc	r11, r1
   1b1b0:	09 f0       	breq	.+2      	; 0x1b1b4 <lif_extract_e010_as_ascii+0x26c>
   1b1b2:	7c f4       	brge	.+30     	; 0x1b1d2 <lif_extract_e010_as_ascii+0x28a>
   1b1b4:	c4 5e       	subi	r28, 0xE4	; 228
   1b1b6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1b8:	19 82       	std	Y+1, r1	; 0x01
   1b1ba:	18 82       	st	Y, r1
   1b1bc:	cc 51       	subi	r28, 0x1C	; 28
   1b1be:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b1c0:	c5 01       	movw	r24, r10
   1b1c2:	01 97       	sbiw	r24, 0x01	; 1
   1b1c4:	c0 5d       	subi	r28, 0xD0	; 208
   1b1c6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1c8:	99 83       	std	Y+1, r25	; 0x01
   1b1ca:	88 83       	st	Y, r24
   1b1cc:	c0 53       	subi	r28, 0x30	; 48
   1b1ce:	d2 40       	sbci	r29, 0x02	; 2
   1b1d0:	68 c0       	rjmp	.+208    	; 0x1b2a2 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b1d2:	ed b7       	in	r30, 0x3d	; 61
   1b1d4:	fe b7       	in	r31, 0x3e	; 62
   1b1d6:	b5 82       	std	Z+5, r11	; 0x05
   1b1d8:	a4 82       	std	Z+4, r10	; 0x04
   1b1da:	8c e4       	ldi	r24, 0x4C	; 76
   1b1dc:	96 e3       	ldi	r25, 0x36	; 54
   1b1de:	a0 e0       	ldi	r26, 0x00	; 0
   1b1e0:	81 83       	std	Z+1, r24	; 0x01
   1b1e2:	92 83       	std	Z+2, r25	; 0x02
   1b1e4:	a3 83       	std	Z+3, r26	; 0x03
   1b1e6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1b1ea:	1e c0       	rjmp	.+60     	; 0x1b228 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1b1ec:	8f 3e       	cpi	r24, 0xEF	; 239
   1b1ee:	09 f4       	brne	.+2      	; 0x1b1f2 <lif_extract_e010_as_ascii+0x2aa>
   1b1f0:	d2 c0       	rjmp	.+420    	; 0x1b396 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b1f2:	ed b7       	in	r30, 0x3d	; 61
   1b1f4:	fe b7       	in	r31, 0x3e	; 62
   1b1f6:	13 87       	std	Z+11, r17	; 0x0b
   1b1f8:	02 87       	std	Z+10, r16	; 0x0a
   1b1fa:	c2 5e       	subi	r28, 0xE2	; 226
   1b1fc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1fe:	28 81       	ld	r18, Y
   1b200:	39 81       	ldd	r19, Y+1	; 0x01
   1b202:	4a 81       	ldd	r20, Y+2	; 0x02
   1b204:	5b 81       	ldd	r21, Y+3	; 0x03
   1b206:	ce 51       	subi	r28, 0x1E	; 30
   1b208:	d2 40       	sbci	r29, 0x02	; 2
   1b20a:	26 83       	std	Z+6, r18	; 0x06
   1b20c:	37 83       	std	Z+7, r19	; 0x07
   1b20e:	40 87       	std	Z+8, r20	; 0x08
   1b210:	51 87       	std	Z+9, r21	; 0x09
   1b212:	90 e0       	ldi	r25, 0x00	; 0
   1b214:	95 83       	std	Z+5, r25	; 0x05
   1b216:	84 83       	std	Z+4, r24	; 0x04
   1b218:	86 ef       	ldi	r24, 0xF6	; 246
   1b21a:	95 e3       	ldi	r25, 0x35	; 53
   1b21c:	a0 e0       	ldi	r26, 0x00	; 0
   1b21e:	81 83       	std	Z+1, r24	; 0x01
   1b220:	92 83       	std	Z+2, r25	; 0x02
   1b222:	a3 83       	std	Z+3, r26	; 0x03
   1b224:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
                status = 0;
                done = 1;
   1b228:	21 e0       	ldi	r18, 0x01	; 1
   1b22a:	30 e0       	ldi	r19, 0x00	; 0
   1b22c:	ce 5d       	subi	r28, 0xDE	; 222
   1b22e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b230:	39 83       	std	Y+1, r19	; 0x01
   1b232:	28 83       	st	Y, r18
   1b234:	c2 52       	subi	r28, 0x22	; 34
   1b236:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b238:	e1 2c       	mov	r14, r1
   1b23a:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b23c:	ac c0       	rjmp	.+344    	; 0x1b396 <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b23e:	0f 3f       	cpi	r16, 0xFF	; 255
   1b240:	11 05       	cpc	r17, r1
   1b242:	11 f0       	breq	.+4      	; 0x1b248 <lif_extract_e010_as_ascii+0x300>
   1b244:	0c f0       	brlt	.+2      	; 0x1b248 <lif_extract_e010_as_ascii+0x300>
   1b246:	a7 c0       	rjmp	.+334    	; 0x1b396 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b248:	e0 e1       	ldi	r30, 0x10	; 16
   1b24a:	f1 e0       	ldi	r31, 0x01	; 1
   1b24c:	ec 0f       	add	r30, r28
   1b24e:	fd 1f       	adc	r31, r29
   1b250:	e0 0f       	add	r30, r16
   1b252:	f1 1f       	adc	r31, r17
   1b254:	20 81       	ld	r18, Z
   1b256:	a1 01       	movw	r20, r2
   1b258:	4f 5f       	subi	r20, 0xFF	; 255
   1b25a:	5f 4f       	sbci	r21, 0xFF	; 255
   1b25c:	4a 01       	movw	r8, r20
   1b25e:	2d 30       	cpi	r18, 0x0D	; 13
   1b260:	51 f1       	breq	.+84     	; 0x1b2b6 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b262:	98 2d       	mov	r25, r8
   1b264:	89 2d       	mov	r24, r9
   1b266:	0f 5f       	subi	r16, 0xFF	; 255
   1b268:	1f 4f       	sbci	r17, 0xFF	; 255
   1b26a:	ec e0       	ldi	r30, 0x0C	; 12
   1b26c:	f0 e0       	ldi	r31, 0x00	; 0
   1b26e:	ec 0f       	add	r30, r28
   1b270:	fd 1f       	adc	r31, r29
   1b272:	e2 0d       	add	r30, r2
   1b274:	f3 1d       	adc	r31, r3
   1b276:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b278:	ef ef       	ldi	r30, 0xFF	; 255
   1b27a:	8e 16       	cp	r8, r30
   1b27c:	91 04       	cpc	r9, r1
   1b27e:	09 f0       	breq	.+2      	; 0x1b282 <lif_extract_e010_as_ascii+0x33a>
   1b280:	ac f5       	brge	.+106    	; 0x1b2ec <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b282:	c4 5e       	subi	r28, 0xE4	; 228
   1b284:	dd 4f       	sbci	r29, 0xFD	; 253
   1b286:	28 81       	ld	r18, Y
   1b288:	39 81       	ldd	r19, Y+1	; 0x01
   1b28a:	cc 51       	subi	r28, 0x1C	; 28
   1b28c:	d2 40       	sbci	r29, 0x02	; 2
   1b28e:	2f 5f       	subi	r18, 0xFF	; 255
   1b290:	3f 4f       	sbci	r19, 0xFF	; 255
   1b292:	c4 5e       	subi	r28, 0xE4	; 228
   1b294:	dd 4f       	sbci	r29, 0xFD	; 253
   1b296:	39 83       	std	Y+1, r19	; 0x01
   1b298:	28 83       	st	Y, r18
   1b29a:	cc 51       	subi	r28, 0x1C	; 28
   1b29c:	d2 40       	sbci	r29, 0x02	; 2
   1b29e:	29 2e       	mov	r2, r25
   1b2a0:	38 2e       	mov	r3, r24
   1b2a2:	c4 5e       	subi	r28, 0xE4	; 228
   1b2a4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2a6:	48 81       	ld	r20, Y
   1b2a8:	59 81       	ldd	r21, Y+1	; 0x01
   1b2aa:	cc 51       	subi	r28, 0x1C	; 28
   1b2ac:	d2 40       	sbci	r29, 0x02	; 2
   1b2ae:	4a 15       	cp	r20, r10
   1b2b0:	5b 05       	cpc	r21, r11
   1b2b2:	2c f2       	brlt	.-118    	; 0x1b23e <lif_extract_e010_as_ascii+0x2f6>
   1b2b4:	62 c0       	rjmp	.+196    	; 0x1b37a <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b2b6:	c4 5e       	subi	r28, 0xE4	; 228
   1b2b8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2ba:	88 81       	ld	r24, Y
   1b2bc:	99 81       	ldd	r25, Y+1	; 0x01
   1b2be:	cc 51       	subi	r28, 0x1C	; 28
   1b2c0:	d2 40       	sbci	r29, 0x02	; 2
   1b2c2:	c0 5d       	subi	r28, 0xD0	; 208
   1b2c4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2c6:	a8 81       	ld	r26, Y
   1b2c8:	b9 81       	ldd	r27, Y+1	; 0x01
   1b2ca:	c0 53       	subi	r28, 0x30	; 48
   1b2cc:	d2 40       	sbci	r29, 0x02	; 2
   1b2ce:	8a 17       	cp	r24, r26
   1b2d0:	9b 07       	cpc	r25, r27
   1b2d2:	39 f6       	brne	.-114    	; 0x1b262 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1b2d4:	ec e0       	ldi	r30, 0x0C	; 12
   1b2d6:	f0 e0       	ldi	r31, 0x00	; 0
   1b2d8:	ec 0f       	add	r30, r28
   1b2da:	fd 1f       	adc	r31, r29
   1b2dc:	e2 0d       	add	r30, r2
   1b2de:	f3 1d       	adc	r31, r3
   1b2e0:	ba e0       	ldi	r27, 0x0A	; 10
   1b2e2:	b0 83       	st	Z, r27
                    ++ind;
   1b2e4:	0f 5f       	subi	r16, 0xFF	; 255
   1b2e6:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b2e8:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1b2ea:	47 c0       	rjmp	.+142    	; 0x1b37a <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b2ec:	cc 5d       	subi	r28, 0xDC	; 220
   1b2ee:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2f0:	28 81       	ld	r18, Y
   1b2f2:	39 81       	ldd	r19, Y+1	; 0x01
   1b2f4:	c4 52       	subi	r28, 0x24	; 36
   1b2f6:	d2 40       	sbci	r29, 0x02	; 2
   1b2f8:	a4 01       	movw	r20, r8
   1b2fa:	61 e0       	ldi	r22, 0x01	; 1
   1b2fc:	70 e0       	ldi	r23, 0x00	; 0
   1b2fe:	ce 01       	movw	r24, r28
   1b300:	0c 96       	adiw	r24, 0x0c	; 12
   1b302:	0e 94 49 7c 	call	0xf892	; 0xf892 <fwrite>
                    if(size < wind)
   1b306:	88 15       	cp	r24, r8
   1b308:	99 05       	cpc	r25, r9
   1b30a:	d4 f4       	brge	.+52     	; 0x1b340 <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b30c:	cb 5c       	subi	r28, 0xCB	; 203
   1b30e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b310:	28 81       	ld	r18, Y
   1b312:	39 81       	ldd	r19, Y+1	; 0x01
   1b314:	4a 81       	ldd	r20, Y+2	; 0x02
   1b316:	c5 53       	subi	r28, 0x35	; 53
   1b318:	d2 40       	sbci	r29, 0x02	; 2
   1b31a:	ed b7       	in	r30, 0x3d	; 61
   1b31c:	fe b7       	in	r31, 0x3e	; 62
   1b31e:	21 83       	std	Z+1, r18	; 0x01
   1b320:	32 83       	std	Z+2, r19	; 0x02
   1b322:	43 83       	std	Z+3, r20	; 0x03
   1b324:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b328:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b32a:	21 e0       	ldi	r18, 0x01	; 1
   1b32c:	30 e0       	ldi	r19, 0x00	; 0
   1b32e:	ce 5d       	subi	r28, 0xDE	; 222
   1b330:	dd 4f       	sbci	r29, 0xFD	; 253
   1b332:	39 83       	std	Y+1, r19	; 0x01
   1b334:	28 83       	st	Y, r18
   1b336:	c2 52       	subi	r28, 0x22	; 34
   1b338:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b33a:	e1 2c       	mov	r14, r1
   1b33c:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b33e:	1d c0       	rjmp	.+58     	; 0x1b37a <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1b340:	09 2e       	mov	r0, r25
   1b342:	00 0c       	add	r0, r0
   1b344:	aa 0b       	sbc	r26, r26
   1b346:	bb 0b       	sbc	r27, r27
   1b348:	48 0e       	add	r4, r24
   1b34a:	59 1e       	adc	r5, r25
   1b34c:	6a 1e       	adc	r6, r26
   1b34e:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b350:	ed b7       	in	r30, 0x3d	; 61
   1b352:	fe b7       	in	r31, 0x3e	; 62
   1b354:	44 82       	std	Z+4, r4	; 0x04
   1b356:	55 82       	std	Z+5, r5	; 0x05
   1b358:	66 82       	std	Z+6, r6	; 0x06
   1b35a:	77 82       	std	Z+7, r7	; 0x07
   1b35c:	ce 5c       	subi	r28, 0xCE	; 206
   1b35e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b360:	28 81       	ld	r18, Y
   1b362:	39 81       	ldd	r19, Y+1	; 0x01
   1b364:	4a 81       	ldd	r20, Y+2	; 0x02
   1b366:	c2 53       	subi	r28, 0x32	; 50
   1b368:	d2 40       	sbci	r29, 0x02	; 2
   1b36a:	21 83       	std	Z+1, r18	; 0x01
   1b36c:	32 83       	std	Z+2, r19	; 0x02
   1b36e:	43 83       	std	Z+3, r20	; 0x03
   1b370:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
                    wind = 0;
   1b374:	90 e0       	ldi	r25, 0x00	; 0
   1b376:	80 e0       	ldi	r24, 0x00	; 0
   1b378:	84 cf       	rjmp	.-248    	; 0x1b282 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b37a:	0f 3f       	cpi	r16, 0xFF	; 255
   1b37c:	11 05       	cpc	r17, r1
   1b37e:	09 f0       	breq	.+2      	; 0x1b382 <lif_extract_e010_as_ascii+0x43a>
   1b380:	0c f4       	brge	.+2      	; 0x1b384 <lif_extract_e010_as_ascii+0x43c>
   1b382:	e5 ce       	rjmp	.-566    	; 0x1b14e <lif_extract_e010_as_ascii+0x206>
   1b384:	08 c0       	rjmp	.+16     	; 0x1b396 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1b386:	a1 e0       	ldi	r26, 0x01	; 1
   1b388:	b0 e0       	ldi	r27, 0x00	; 0
   1b38a:	ce 5d       	subi	r28, 0xDE	; 222
   1b38c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b38e:	b9 83       	std	Y+1, r27	; 0x01
   1b390:	a8 83       	st	Y, r26
   1b392:	c2 52       	subi	r28, 0x22	; 34
   1b394:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b396:	c2 5e       	subi	r28, 0xE2	; 226
   1b398:	dd 4f       	sbci	r29, 0xFD	; 253
   1b39a:	28 81       	ld	r18, Y
   1b39c:	39 81       	ldd	r19, Y+1	; 0x01
   1b39e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b3a0:	5b 81       	ldd	r21, Y+3	; 0x03
   1b3a2:	ce 51       	subi	r28, 0x1E	; 30
   1b3a4:	d2 40       	sbci	r29, 0x02	; 2
   1b3a6:	3f 5f       	subi	r19, 0xFF	; 255
   1b3a8:	4f 4f       	sbci	r20, 0xFF	; 255
   1b3aa:	5f 4f       	sbci	r21, 0xFF	; 255
   1b3ac:	c2 5e       	subi	r28, 0xE2	; 226
   1b3ae:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3b0:	28 83       	st	Y, r18
   1b3b2:	39 83       	std	Y+1, r19	; 0x01
   1b3b4:	4a 83       	std	Y+2, r20	; 0x02
   1b3b6:	5b 83       	std	Y+3, r21	; 0x03
   1b3b8:	ce 51       	subi	r28, 0x1E	; 30
   1b3ba:	d2 40       	sbci	r29, 0x02	; 2
   1b3bc:	97 ce       	rjmp	.-722    	; 0x1b0ec <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b3be:	e1 2c       	mov	r14, r1
   1b3c0:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b3c2:	c6 01       	movw	r24, r12
   1b3c4:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1b3c8:	21 14       	cp	r2, r1
   1b3ca:	31 04       	cpc	r3, r1
   1b3cc:	31 f1       	breq	.+76     	; 0x1b41a <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b3ce:	cc 5d       	subi	r28, 0xDC	; 220
   1b3d0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3d2:	28 81       	ld	r18, Y
   1b3d4:	39 81       	ldd	r19, Y+1	; 0x01
   1b3d6:	c4 52       	subi	r28, 0x24	; 36
   1b3d8:	d2 40       	sbci	r29, 0x02	; 2
   1b3da:	a1 01       	movw	r20, r2
   1b3dc:	61 e0       	ldi	r22, 0x01	; 1
   1b3de:	70 e0       	ldi	r23, 0x00	; 0
   1b3e0:	ce 01       	movw	r24, r28
   1b3e2:	0c 96       	adiw	r24, 0x0c	; 12
   1b3e4:	0e 94 49 7c 	call	0xf892	; 0xf892 <fwrite>
   1b3e8:	8c 01       	movw	r16, r24
        if(size < wind)
   1b3ea:	82 15       	cp	r24, r2
   1b3ec:	93 05       	cpc	r25, r3
   1b3ee:	64 f4       	brge	.+24     	; 0x1b408 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b3f0:	88 e9       	ldi	r24, 0x98	; 152
   1b3f2:	95 e3       	ldi	r25, 0x35	; 53
   1b3f4:	a0 e0       	ldi	r26, 0x00	; 0
   1b3f6:	ed b7       	in	r30, 0x3d	; 61
   1b3f8:	fe b7       	in	r31, 0x3e	; 62
   1b3fa:	81 83       	std	Z+1, r24	; 0x01
   1b3fc:	92 83       	std	Z+2, r25	; 0x02
   1b3fe:	a3 83       	std	Z+3, r26	; 0x03
   1b400:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            status = 0;
   1b404:	e1 2c       	mov	r14, r1
   1b406:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b408:	c8 01       	movw	r24, r16
   1b40a:	01 2e       	mov	r0, r17
   1b40c:	00 0c       	add	r0, r0
   1b40e:	aa 0b       	sbc	r26, r26
   1b410:	bb 0b       	sbc	r27, r27
   1b412:	48 0e       	add	r4, r24
   1b414:	59 1e       	adc	r5, r25
   1b416:	6a 1e       	adc	r6, r26
   1b418:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b41a:	cc 5d       	subi	r28, 0xDC	; 220
   1b41c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b41e:	88 81       	ld	r24, Y
   1b420:	99 81       	ldd	r25, Y+1	; 0x01
   1b422:	c4 52       	subi	r28, 0x24	; 36
   1b424:	d2 40       	sbci	r29, 0x02	; 2
   1b426:	0e 94 cb 7c 	call	0xf996	; 0xf996 <fclose>
    if(t)
   1b42a:	c8 5d       	subi	r28, 0xD8	; 216
   1b42c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b42e:	28 81       	ld	r18, Y
   1b430:	39 81       	ldd	r19, Y+1	; 0x01
   1b432:	4a 81       	ldd	r20, Y+2	; 0x02
   1b434:	5b 81       	ldd	r21, Y+3	; 0x03
   1b436:	c8 52       	subi	r28, 0x28	; 40
   1b438:	d2 40       	sbci	r29, 0x02	; 2
   1b43a:	21 15       	cp	r18, r1
   1b43c:	31 05       	cpc	r19, r1
   1b43e:	41 05       	cpc	r20, r1
   1b440:	51 05       	cpc	r21, r1
   1b442:	d9 f0       	breq	.+54     	; 0x1b47a <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1b444:	c8 5e       	subi	r28, 0xE8	; 232
   1b446:	dd 4f       	sbci	r29, 0xFD	; 253
   1b448:	28 83       	st	Y, r18
   1b44a:	39 83       	std	Y+1, r19	; 0x01
   1b44c:	4a 83       	std	Y+2, r20	; 0x02
   1b44e:	5b 83       	std	Y+3, r21	; 0x03
   1b450:	c8 51       	subi	r28, 0x18	; 24
   1b452:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b454:	cc 5e       	subi	r28, 0xEC	; 236
   1b456:	dd 4f       	sbci	r29, 0xFD	; 253
   1b458:	28 83       	st	Y, r18
   1b45a:	39 83       	std	Y+1, r19	; 0x01
   1b45c:	4a 83       	std	Y+2, r20	; 0x02
   1b45e:	5b 83       	std	Y+3, r21	; 0x03
   1b460:	c4 51       	subi	r28, 0x14	; 20
   1b462:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b464:	be 01       	movw	r22, r28
   1b466:	6c 5e       	subi	r22, 0xEC	; 236
   1b468:	7d 4f       	sbci	r23, 0xFD	; 253
   1b46a:	ca 5d       	subi	r28, 0xDA	; 218
   1b46c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b46e:	88 81       	ld	r24, Y
   1b470:	99 81       	ldd	r25, Y+1	; 0x01
   1b472:	c6 52       	subi	r28, 0x26	; 38
   1b474:	d2 40       	sbci	r29, 0x02	; 2
   1b476:	0e 94 08 7a 	call	0xf410	; 0xf410 <utime>
    }
    sync();
   1b47a:	0e 94 c6 7b 	call	0xf78c	; 0xf78c <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b47e:	ed b7       	in	r30, 0x3d	; 61
   1b480:	fe b7       	in	r31, 0x3e	; 62
   1b482:	44 82       	std	Z+4, r4	; 0x04
   1b484:	55 82       	std	Z+5, r5	; 0x05
   1b486:	66 82       	std	Z+6, r6	; 0x06
   1b488:	77 82       	std	Z+7, r7	; 0x07
   1b48a:	8a e8       	ldi	r24, 0x8A	; 138
   1b48c:	95 e3       	ldi	r25, 0x35	; 53
   1b48e:	a0 e0       	ldi	r26, 0x00	; 0
   1b490:	81 83       	std	Z+1, r24	; 0x01
   1b492:	92 83       	std	Z+2, r25	; 0x02
   1b494:	a3 83       	std	Z+3, r26	; 0x03
   1b496:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    return(status);
   1b49a:	c7 01       	movw	r24, r14
}
   1b49c:	c9 5c       	subi	r28, 0xC9	; 201
   1b49e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4a0:	e2 e1       	ldi	r30, 0x12	; 18
   1b4a2:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0001b4a6 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b4a6:	a4 e1       	ldi	r26, 0x14	; 20
   1b4a8:	b1 e0       	ldi	r27, 0x01	; 1
   1b4aa:	e9 e5       	ldi	r30, 0x59	; 89
   1b4ac:	fa ed       	ldi	r31, 0xDA	; 218
   1b4ae:	0c 94 b3 e6 	jmp	0x1cd66	; 0x1cd66 <__prologue_saves__>
   1b4b2:	7c 01       	movw	r14, r24
   1b4b4:	8b 01       	movw	r16, r22
   1b4b6:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b4b8:	62 e4       	ldi	r22, 0x42	; 66
   1b4ba:	73 e0       	ldi	r23, 0x03	; 3
   1b4bc:	0e 94 12 d1 	call	0x1a224	; 0x1a224 <lif_open_volume>
   1b4c0:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b4c2:	00 97       	sbiw	r24, 0x00	; 0
   1b4c4:	69 f4       	brne	.+26     	; 0x1b4e0 <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b4c6:	ed b7       	in	r30, 0x3d	; 61
   1b4c8:	fe b7       	in	r31, 0x3e	; 62
   1b4ca:	f5 82       	std	Z+5, r15	; 0x05
   1b4cc:	e4 82       	std	Z+4, r14	; 0x04
   1b4ce:	82 e7       	ldi	r24, 0x72	; 114
   1b4d0:	95 e3       	ldi	r25, 0x35	; 53
   1b4d2:	a0 e0       	ldi	r26, 0x00	; 0
   1b4d4:	81 83       	std	Z+1, r24	; 0x01
   1b4d6:	92 83       	std	Z+2, r25	; 0x02
   1b4d8:	a3 83       	std	Z+3, r26	; 0x03
   1b4da:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1b4de:	13 c0       	rjmp	.+38     	; 0x1b506 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b4e0:	b8 01       	movw	r22, r16
   1b4e2:	75 d9       	rcall	.-3350   	; 0x1a7ce <lif_find_file>
    if(index == -1)
   1b4e4:	01 96       	adiw	r24, 0x01	; 1
   1b4e6:	91 f4       	brne	.+36     	; 0x1b50c <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1b4e8:	ed b7       	in	r30, 0x3d	; 61
   1b4ea:	fe b7       	in	r31, 0x3e	; 62
   1b4ec:	15 83       	std	Z+5, r17	; 0x05
   1b4ee:	04 83       	std	Z+4, r16	; 0x04
   1b4f0:	8f e5       	ldi	r24, 0x5F	; 95
   1b4f2:	95 e3       	ldi	r25, 0x35	; 53
   1b4f4:	a0 e0       	ldi	r26, 0x00	; 0
   1b4f6:	81 83       	std	Z+1, r24	; 0x01
   1b4f8:	92 83       	std	Z+2, r25	; 0x02
   1b4fa:	a3 83       	std	Z+3, r26	; 0x03
   1b4fc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b500:	c4 01       	movw	r24, r8
   1b502:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b506:	00 e0       	ldi	r16, 0x00	; 0
   1b508:	10 e0       	ldi	r17, 0x00	; 0
   1b50a:	ff c0       	rjmp	.+510    	; 0x1b70a <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1b50c:	94 01       	movw	r18, r8
   1b50e:	20 5a       	subi	r18, 0xA0	; 160
   1b510:	3f 4f       	sbci	r19, 0xFF	; 255
   1b512:	c0 5f       	subi	r28, 0xF0	; 240
   1b514:	de 4f       	sbci	r29, 0xFE	; 254
   1b516:	39 83       	std	Y+1, r19	; 0x01
   1b518:	28 83       	st	Y, r18
   1b51a:	c0 51       	subi	r28, 0x10	; 16
   1b51c:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b51e:	f9 01       	movw	r30, r18
   1b520:	a0 80       	ld	r10, Z
   1b522:	b1 80       	ldd	r11, Z+1	; 0x01
   1b524:	0b 2c       	mov	r0, r11
   1b526:	00 0c       	add	r0, r0
   1b528:	cc 08       	sbc	r12, r12
   1b52a:	dd 08       	sbc	r13, r13
   1b52c:	e1 2c       	mov	r14, r1
   1b52e:	f1 2c       	mov	r15, r1
   1b530:	87 01       	movw	r16, r14
   1b532:	e3 94       	inc	r14
   1b534:	21 e0       	ldi	r18, 0x01	; 1
   1b536:	30 e0       	ldi	r19, 0x00	; 0
   1b538:	40 e0       	ldi	r20, 0x00	; 0
   1b53a:	50 e0       	ldi	r21, 0x00	; 0
   1b53c:	6c e6       	ldi	r22, 0x6C	; 108
   1b53e:	76 e1       	ldi	r23, 0x16	; 22
   1b540:	c3 01       	movw	r24, r6
   1b542:	0e 94 c8 cc 	call	0x19990	; 0x19990 <lif_create_volume>
   1b546:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b548:	89 2b       	or	r24, r25
   1b54a:	d1 f2       	breq	.-76     	; 0x1b500 <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1b54c:	81 e2       	ldi	r24, 0x21	; 33
   1b54e:	f4 01       	movw	r30, r8
   1b550:	e1 5b       	subi	r30, 0xB1	; 177
   1b552:	ff 4f       	sbci	r31, 0xFF	; 255
   1b554:	d7 01       	movw	r26, r14
   1b556:	a1 5b       	subi	r26, 0xB1	; 177
   1b558:	bf 4f       	sbci	r27, 0xFF	; 255
   1b55a:	01 90       	ld	r0, Z+
   1b55c:	0d 92       	st	X+, r0
   1b55e:	8a 95       	dec	r24
   1b560:	e1 f7       	brne	.-8      	; 0x1b55a <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b562:	82 e0       	ldi	r24, 0x02	; 2
   1b564:	90 e0       	ldi	r25, 0x00	; 0
   1b566:	a0 e0       	ldi	r26, 0x00	; 0
   1b568:	b0 e0       	ldi	r27, 0x00	; 0
   1b56a:	f7 01       	movw	r30, r14
   1b56c:	e4 5a       	subi	r30, 0xA4	; 164
   1b56e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b570:	80 83       	st	Z, r24
   1b572:	91 83       	std	Z+1, r25	; 0x01
   1b574:	a2 83       	std	Z+2, r26	; 0x02
   1b576:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b578:	c0 5f       	subi	r28, 0xF0	; 240
   1b57a:	de 4f       	sbci	r29, 0xFE	; 254
   1b57c:	e8 81       	ld	r30, Y
   1b57e:	f9 81       	ldd	r31, Y+1	; 0x01
   1b580:	c0 51       	subi	r28, 0x10	; 16
   1b582:	d1 40       	sbci	r29, 0x01	; 1
   1b584:	80 81       	ld	r24, Z
   1b586:	91 81       	ldd	r25, Z+1	; 0x01
   1b588:	a2 81       	ldd	r26, Z+2	; 0x02
   1b58a:	b3 81       	ldd	r27, Z+3	; 0x03
   1b58c:	f7 01       	movw	r30, r14
   1b58e:	80 8b       	std	Z+16, r24	; 0x10
   1b590:	91 8b       	std	Z+17, r25	; 0x11
   1b592:	a2 8b       	std	Z+18, r26	; 0x12
   1b594:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b596:	60 e0       	ldi	r22, 0x00	; 0
   1b598:	70 e0       	ldi	r23, 0x00	; 0
   1b59a:	c7 01       	movw	r24, r14
   1b59c:	0e 94 4a cb 	call	0x19694	; 0x19694 <lif_writedirindex>
   1b5a0:	8c 01       	movw	r16, r24
   1b5a2:	89 2b       	or	r24, r25
   1b5a4:	41 f0       	breq	.+16     	; 0x1b5b6 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b5a6:	61 e0       	ldi	r22, 0x01	; 1
   1b5a8:	70 e0       	ldi	r23, 0x00	; 0
   1b5aa:	c7 01       	movw	r24, r14
   1b5ac:	0e 94 a6 cb 	call	0x1974c	; 0x1974c <lif_writedirEOF>
   1b5b0:	8c 01       	movw	r16, r24
   1b5b2:	89 2b       	or	r24, r25
   1b5b4:	39 f4       	brne	.+14     	; 0x1b5c4 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5b6:	c4 01       	movw	r24, r8
   1b5b8:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
   1b5bc:	c7 01       	movw	r24, r14
   1b5be:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b5c2:	a3 c0       	rjmp	.+326    	; 0x1b70a <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b5c4:	f7 01       	movw	r30, r14
   1b5c6:	44 84       	ldd	r4, Z+12	; 0x0c
   1b5c8:	55 84       	ldd	r5, Z+13	; 0x0d
   1b5ca:	66 84       	ldd	r6, Z+14	; 0x0e
   1b5cc:	77 84       	ldd	r7, Z+15	; 0x0f
   1b5ce:	76 2c       	mov	r7, r6
   1b5d0:	65 2c       	mov	r6, r5
   1b5d2:	54 2c       	mov	r5, r4
   1b5d4:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b5d6:	f4 01       	movw	r30, r8
   1b5d8:	e4 5a       	subi	r30, 0xA4	; 164
   1b5da:	ff 4f       	sbci	r31, 0xFF	; 255
   1b5dc:	80 81       	ld	r24, Z
   1b5de:	91 81       	ldd	r25, Z+1	; 0x01
   1b5e0:	a2 81       	ldd	r26, Z+2	; 0x02
   1b5e2:	b3 81       	ldd	r27, Z+3	; 0x03
   1b5e4:	22 27       	eor	r18, r18
   1b5e6:	38 2f       	mov	r19, r24
   1b5e8:	49 2f       	mov	r20, r25
   1b5ea:	5a 2f       	mov	r21, r26
   1b5ec:	c4 5f       	subi	r28, 0xF4	; 244
   1b5ee:	de 4f       	sbci	r29, 0xFE	; 254
   1b5f0:	28 83       	st	Y, r18
   1b5f2:	39 83       	std	Y+1, r19	; 0x01
   1b5f4:	4a 83       	std	Y+2, r20	; 0x02
   1b5f6:	5b 83       	std	Y+3, r21	; 0x03
   1b5f8:	cc 50       	subi	r28, 0x0C	; 12
   1b5fa:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b5fc:	21 2c       	mov	r2, r1
   1b5fe:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b600:	81 e5       	ldi	r24, 0x51	; 81
   1b602:	95 e3       	ldi	r25, 0x35	; 53
   1b604:	9c 01       	movw	r18, r24
   1b606:	40 e0       	ldi	r20, 0x00	; 0
   1b608:	ce 5e       	subi	r28, 0xEE	; 238
   1b60a:	de 4f       	sbci	r29, 0xFE	; 254
   1b60c:	28 83       	st	Y, r18
   1b60e:	39 83       	std	Y+1, r19	; 0x01
   1b610:	4a 83       	std	Y+2, r20	; 0x02
   1b612:	c2 51       	subi	r28, 0x12	; 18
   1b614:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b616:	c0 5f       	subi	r28, 0xF0	; 240
   1b618:	de 4f       	sbci	r29, 0xFE	; 254
   1b61a:	e8 81       	ld	r30, Y
   1b61c:	f9 81       	ldd	r31, Y+1	; 0x01
   1b61e:	c0 51       	subi	r28, 0x10	; 16
   1b620:	d1 40       	sbci	r29, 0x01	; 1
   1b622:	80 81       	ld	r24, Z
   1b624:	91 81       	ldd	r25, Z+1	; 0x01
   1b626:	28 16       	cp	r2, r24
   1b628:	39 06       	cpc	r3, r25
   1b62a:	0c f0       	brlt	.+2      	; 0x1b62e <lif_extract_lif_as_lif+0x188>
   1b62c:	58 c0       	rjmp	.+176    	; 0x1b6de <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b62e:	00 e0       	ldi	r16, 0x00	; 0
   1b630:	11 e0       	ldi	r17, 0x01	; 1
   1b632:	c4 5f       	subi	r28, 0xF4	; 244
   1b634:	de 4f       	sbci	r29, 0xFE	; 254
   1b636:	28 81       	ld	r18, Y
   1b638:	39 81       	ldd	r19, Y+1	; 0x01
   1b63a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b63c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b63e:	cc 50       	subi	r28, 0x0C	; 12
   1b640:	d1 40       	sbci	r29, 0x01	; 1
   1b642:	be 01       	movw	r22, r28
   1b644:	68 5f       	subi	r22, 0xF8	; 248
   1b646:	7f 4f       	sbci	r23, 0xFF	; 255
   1b648:	c4 01       	movw	r24, r8
   1b64a:	0e 94 89 c1 	call	0x18312	; 0x18312 <lif_read>
   1b64e:	5b 01       	movw	r10, r22
   1b650:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b652:	6f 3f       	cpi	r22, 0xFF	; 255
   1b654:	71 05       	cpc	r23, r1
   1b656:	09 f0       	breq	.+2      	; 0x1b65a <lif_extract_lif_as_lif+0x1b4>
   1b658:	2c f4       	brge	.+10     	; 0x1b664 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b65a:	c4 01       	movw	r24, r8
   1b65c:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
   1b660:	c7 01       	movw	r24, r14
   1b662:	4f cf       	rjmp	.-354    	; 0x1b502 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b664:	00 e0       	ldi	r16, 0x00	; 0
   1b666:	11 e0       	ldi	r17, 0x01	; 1
   1b668:	a3 01       	movw	r20, r6
   1b66a:	92 01       	movw	r18, r4
   1b66c:	be 01       	movw	r22, r28
   1b66e:	68 5f       	subi	r22, 0xF8	; 248
   1b670:	7f 4f       	sbci	r23, 0xFF	; 255
   1b672:	c7 01       	movw	r24, r14
   1b674:	0e 94 dc c1 	call	0x183b8	; 0x183b8 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b678:	c5 01       	movw	r24, r10
   1b67a:	0b 2c       	mov	r0, r11
   1b67c:	00 0c       	add	r0, r0
   1b67e:	aa 0b       	sbc	r26, r26
   1b680:	bb 0b       	sbc	r27, r27
   1b682:	48 0e       	add	r4, r24
   1b684:	59 1e       	adc	r5, r25
   1b686:	6a 1e       	adc	r6, r26
   1b688:	7b 1e       	adc	r7, r27
        offset += size;
   1b68a:	c4 5f       	subi	r28, 0xF4	; 244
   1b68c:	de 4f       	sbci	r29, 0xFE	; 254
   1b68e:	28 81       	ld	r18, Y
   1b690:	39 81       	ldd	r19, Y+1	; 0x01
   1b692:	4a 81       	ldd	r20, Y+2	; 0x02
   1b694:	5b 81       	ldd	r21, Y+3	; 0x03
   1b696:	cc 50       	subi	r28, 0x0C	; 12
   1b698:	d1 40       	sbci	r29, 0x01	; 1
   1b69a:	28 0f       	add	r18, r24
   1b69c:	39 1f       	adc	r19, r25
   1b69e:	4a 1f       	adc	r20, r26
   1b6a0:	5b 1f       	adc	r21, r27
   1b6a2:	c4 5f       	subi	r28, 0xF4	; 244
   1b6a4:	de 4f       	sbci	r29, 0xFE	; 254
   1b6a6:	28 83       	st	Y, r18
   1b6a8:	39 83       	std	Y+1, r19	; 0x01
   1b6aa:	4a 83       	std	Y+2, r20	; 0x02
   1b6ac:	5b 83       	std	Y+3, r21	; 0x03
   1b6ae:	cc 50       	subi	r28, 0x0C	; 12
   1b6b0:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b6b2:	ed b7       	in	r30, 0x3d	; 61
   1b6b4:	fe b7       	in	r31, 0x3e	; 62
   1b6b6:	44 82       	std	Z+4, r4	; 0x04
   1b6b8:	55 82       	std	Z+5, r5	; 0x05
   1b6ba:	66 82       	std	Z+6, r6	; 0x06
   1b6bc:	77 82       	std	Z+7, r7	; 0x07
   1b6be:	ce 5e       	subi	r28, 0xEE	; 238
   1b6c0:	de 4f       	sbci	r29, 0xFE	; 254
   1b6c2:	28 81       	ld	r18, Y
   1b6c4:	39 81       	ldd	r19, Y+1	; 0x01
   1b6c6:	4a 81       	ldd	r20, Y+2	; 0x02
   1b6c8:	c2 51       	subi	r28, 0x12	; 18
   1b6ca:	d1 40       	sbci	r29, 0x01	; 1
   1b6cc:	21 83       	std	Z+1, r18	; 0x01
   1b6ce:	32 83       	std	Z+2, r19	; 0x02
   1b6d0:	43 83       	std	Z+3, r20	; 0x03
   1b6d2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b6d6:	ff ef       	ldi	r31, 0xFF	; 255
   1b6d8:	2f 1a       	sub	r2, r31
   1b6da:	3f 0a       	sbc	r3, r31
   1b6dc:	9c cf       	rjmp	.-200    	; 0x1b616 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b6de:	c4 01       	movw	r24, r8
   1b6e0:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
   1b6e4:	c7 01       	movw	r24, r14
   1b6e6:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b6ea:	ed b7       	in	r30, 0x3d	; 61
   1b6ec:	fe b7       	in	r31, 0x3e	; 62
   1b6ee:	44 82       	std	Z+4, r4	; 0x04
   1b6f0:	55 82       	std	Z+5, r5	; 0x05
   1b6f2:	66 82       	std	Z+6, r6	; 0x06
   1b6f4:	77 82       	std	Z+7, r7	; 0x07
   1b6f6:	83 e4       	ldi	r24, 0x43	; 67
   1b6f8:	95 e3       	ldi	r25, 0x35	; 53
   1b6fa:	a0 e0       	ldi	r26, 0x00	; 0
   1b6fc:	81 83       	std	Z+1, r24	; 0x01
   1b6fe:	92 83       	std	Z+2, r25	; 0x02
   1b700:	a3 83       	std	Z+3, r26	; 0x03
   1b702:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    return(1);
   1b706:	01 e0       	ldi	r16, 0x01	; 1
   1b708:	10 e0       	ldi	r17, 0x00	; 0
}
   1b70a:	c8 01       	movw	r24, r16
   1b70c:	cc 5e       	subi	r28, 0xEC	; 236
   1b70e:	de 4f       	sbci	r29, 0xFE	; 254
   1b710:	e2 e1       	ldi	r30, 0x12	; 18
   1b712:	0c 94 cf e6 	jmp	0x1cd9e	; 0x1cd9e <__epilogue_restores__>

0001b716 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b716:	2f 92       	push	r2
   1b718:	3f 92       	push	r3
   1b71a:	4f 92       	push	r4
   1b71c:	5f 92       	push	r5
   1b71e:	6f 92       	push	r6
   1b720:	8f 92       	push	r8
   1b722:	9f 92       	push	r9
   1b724:	af 92       	push	r10
   1b726:	bf 92       	push	r11
   1b728:	cf 92       	push	r12
   1b72a:	df 92       	push	r13
   1b72c:	ef 92       	push	r14
   1b72e:	ff 92       	push	r15
   1b730:	0f 93       	push	r16
   1b732:	1f 93       	push	r17
   1b734:	cf 93       	push	r28
   1b736:	df 93       	push	r29
   1b738:	cd b7       	in	r28, 0x3d	; 61
   1b73a:	de b7       	in	r29, 0x3e	; 62
   1b73c:	cd 51       	subi	r28, 0x1D	; 29
   1b73e:	d1 40       	sbci	r29, 0x01	; 1
   1b740:	0f b6       	in	r0, 0x3f	; 63
   1b742:	f8 94       	cli
   1b744:	de bf       	out	0x3e, r29	; 62
   1b746:	0f be       	out	0x3f, r0	; 63
   1b748:	cd bf       	out	0x3d, r28	; 61
   1b74a:	5c 01       	movw	r10, r24
   1b74c:	7b 01       	movw	r14, r22
   1b74e:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b750:	dc 01       	movw	r26, r24
   1b752:	8c 91       	ld	r24, X
   1b754:	81 11       	cpse	r24, r1
   1b756:	03 c0       	rjmp	.+6      	; 0x1b75e <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b758:	83 e2       	ldi	r24, 0x23	; 35
   1b75a:	95 e3       	ldi	r25, 0x35	; 53
   1b75c:	06 c0       	rjmp	.+12     	; 0x1b76a <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b75e:	db 01       	movw	r26, r22
   1b760:	8c 91       	ld	r24, X
   1b762:	81 11       	cpse	r24, r1
   1b764:	0b c0       	rjmp	.+22     	; 0x1b77c <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b766:	88 e0       	ldi	r24, 0x08	; 8
   1b768:	95 e3       	ldi	r25, 0x35	; 53
   1b76a:	a0 e0       	ldi	r26, 0x00	; 0
   1b76c:	ed b7       	in	r30, 0x3d	; 61
   1b76e:	fe b7       	in	r31, 0x3e	; 62
   1b770:	81 83       	std	Z+1, r24	; 0x01
   1b772:	92 83       	std	Z+2, r25	; 0x02
   1b774:	a3 83       	std	Z+3, r26	; 0x03
   1b776:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1b77a:	25 c1       	rjmp	.+586    	; 0x1b9c6 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b77c:	da 01       	movw	r26, r20
   1b77e:	8c 91       	ld	r24, X
   1b780:	81 11       	cpse	r24, r1
   1b782:	03 c0       	rjmp	.+6      	; 0x1b78a <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b784:	8c ee       	ldi	r24, 0xEC	; 236
   1b786:	94 e3       	ldi	r25, 0x34	; 52
   1b788:	f0 cf       	rjmp	.-32     	; 0x1b76a <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b78a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b78e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b792:	92 ff       	sbrs	r25, 2
   1b794:	10 c0       	rjmp	.+32     	; 0x1b7b6 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b796:	ed b7       	in	r30, 0x3d	; 61
   1b798:	fe b7       	in	r31, 0x3e	; 62
   1b79a:	51 87       	std	Z+9, r21	; 0x09
   1b79c:	40 87       	std	Z+8, r20	; 0x08
   1b79e:	77 83       	std	Z+7, r23	; 0x07
   1b7a0:	66 83       	std	Z+6, r22	; 0x06
   1b7a2:	b5 82       	std	Z+5, r11	; 0x05
   1b7a4:	a4 82       	std	Z+4, r10	; 0x04
   1b7a6:	8d eb       	ldi	r24, 0xBD	; 189
   1b7a8:	94 e3       	ldi	r25, 0x34	; 52
   1b7aa:	a0 e0       	ldi	r26, 0x00	; 0
   1b7ac:	81 83       	std	Z+1, r24	; 0x01
   1b7ae:	92 83       	std	Z+2, r25	; 0x02
   1b7b0:	a3 83       	std	Z+3, r26	; 0x03
   1b7b2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b7b6:	68 e0       	ldi	r22, 0x08	; 8
   1b7b8:	79 e0       	ldi	r23, 0x09	; 9
   1b7ba:	c4 01       	movw	r24, r8
   1b7bc:	0e 94 12 d1 	call	0x1a224	; 0x1a224 <lif_open_volume>
   1b7c0:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b7c2:	00 97       	sbiw	r24, 0x00	; 0
   1b7c4:	09 f4       	brne	.+2      	; 0x1b7c8 <lif_add_lif_file+0xb2>
   1b7c6:	ff c0       	rjmp	.+510    	; 0x1b9c6 <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b7c8:	b7 01       	movw	r22, r14
   1b7ca:	01 d8       	rcall	.-4094   	; 0x1a7ce <lif_find_file>
    if(index == -1)
   1b7cc:	01 96       	adiw	r24, 0x01	; 1
   1b7ce:	a1 f4       	brne	.+40     	; 0x1b7f8 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b7d0:	ed b7       	in	r30, 0x3d	; 61
   1b7d2:	fe b7       	in	r31, 0x3e	; 62
   1b7d4:	f5 82       	std	Z+5, r15	; 0x05
   1b7d6:	e4 82       	std	Z+4, r14	; 0x04
   1b7d8:	8a ea       	ldi	r24, 0xAA	; 170
   1b7da:	94 e3       	ldi	r25, 0x34	; 52
   1b7dc:	a0 e0       	ldi	r26, 0x00	; 0
   1b7de:	81 83       	std	Z+1, r24	; 0x01
   1b7e0:	92 83       	std	Z+2, r25	; 0x02
   1b7e2:	a3 83       	std	Z+3, r26	; 0x03
   1b7e4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b7e8:	c6 01       	movw	r24, r12
   1b7ea:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b7ee:	60 e0       	ldi	r22, 0x00	; 0
   1b7f0:	70 e0       	ldi	r23, 0x00	; 0
   1b7f2:	80 e0       	ldi	r24, 0x00	; 0
   1b7f4:	90 e0       	ldi	r25, 0x00	; 0
   1b7f6:	ff c0       	rjmp	.+510    	; 0x1b9f6 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b7f8:	68 e0       	ldi	r22, 0x08	; 8
   1b7fa:	79 e0       	ldi	r23, 0x09	; 9
   1b7fc:	c5 01       	movw	r24, r10
   1b7fe:	0e 94 12 d1 	call	0x1a224	; 0x1a224 <lif_open_volume>
   1b802:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b804:	00 97       	sbiw	r24, 0x00	; 0
   1b806:	09 f4       	brne	.+2      	; 0x1b80a <lif_add_lif_file+0xf4>
   1b808:	de c0       	rjmp	.+444    	; 0x1b9c6 <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b80a:	f6 01       	movw	r30, r12
   1b80c:	e0 5a       	subi	r30, 0xA0	; 160
   1b80e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b810:	40 81       	ld	r20, Z
   1b812:	51 81       	ldd	r21, Z+1	; 0x01
   1b814:	62 81       	ldd	r22, Z+2	; 0x02
   1b816:	73 81       	ldd	r23, Z+3	; 0x03
   1b818:	0e 94 b2 cf 	call	0x19f64	; 0x19f64 <lif_newdir>
   1b81c:	ca 5e       	subi	r28, 0xEA	; 234
   1b81e:	de 4f       	sbci	r29, 0xFE	; 254
   1b820:	99 83       	std	Y+1, r25	; 0x01
   1b822:	88 83       	st	Y, r24
   1b824:	c6 51       	subi	r28, 0x16	; 22
   1b826:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b828:	01 96       	adiw	r24, 0x01	; 1
   1b82a:	79 f4       	brne	.+30     	; 0x1b84a <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b82c:	ed b7       	in	r30, 0x3d	; 61
   1b82e:	fe b7       	in	r31, 0x3e	; 62
   1b830:	97 82       	std	Z+7, r9	; 0x07
   1b832:	86 82       	std	Z+6, r8	; 0x06
   1b834:	b5 82       	std	Z+5, r11	; 0x05
   1b836:	a4 82       	std	Z+4, r10	; 0x04
   1b838:	8a e7       	ldi	r24, 0x7A	; 122
   1b83a:	94 e3       	ldi	r25, 0x34	; 52
   1b83c:	a0 e0       	ldi	r26, 0x00	; 0
   1b83e:	81 83       	std	Z+1, r24	; 0x01
   1b840:	92 83       	std	Z+2, r25	; 0x02
   1b842:	a3 83       	std	Z+3, r26	; 0x03
   1b844:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1b848:	a8 c0       	rjmp	.+336    	; 0x1b99a <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b84a:	c7 01       	movw	r24, r14
   1b84c:	84 5a       	subi	r24, 0xA4	; 164
   1b84e:	9f 4f       	sbci	r25, 0xFF	; 255
   1b850:	dc 01       	movw	r26, r24
   1b852:	4d 91       	ld	r20, X+
   1b854:	5d 91       	ld	r21, X+
   1b856:	6d 91       	ld	r22, X+
   1b858:	7c 91       	ld	r23, X
   1b85a:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b85c:	21 e2       	ldi	r18, 0x21	; 33
   1b85e:	f6 01       	movw	r30, r12
   1b860:	e1 5b       	subi	r30, 0xB1	; 177
   1b862:	ff 4f       	sbci	r31, 0xFF	; 255
   1b864:	1d 97       	sbiw	r26, 0x0d	; 13
   1b866:	01 90       	ld	r0, Z+
   1b868:	0d 92       	st	X+, r0
   1b86a:	2a 95       	dec	r18
   1b86c:	e1 f7       	brne	.-8      	; 0x1b866 <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b86e:	fc 01       	movw	r30, r24
   1b870:	40 83       	st	Z, r20
   1b872:	51 83       	std	Z+1, r21	; 0x01
   1b874:	62 83       	std	Z+2, r22	; 0x02
   1b876:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b878:	b6 2f       	mov	r27, r22
   1b87a:	a5 2f       	mov	r26, r21
   1b87c:	94 2f       	mov	r25, r20
   1b87e:	88 27       	eor	r24, r24
   1b880:	c2 5f       	subi	r28, 0xF2	; 242
   1b882:	de 4f       	sbci	r29, 0xFE	; 254
   1b884:	88 83       	st	Y, r24
   1b886:	99 83       	std	Y+1, r25	; 0x01
   1b888:	aa 83       	std	Y+2, r26	; 0x02
   1b88a:	bb 83       	std	Y+3, r27	; 0x03
   1b88c:	ce 50       	subi	r28, 0x0E	; 14
   1b88e:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b890:	f6 01       	movw	r30, r12
   1b892:	e4 5a       	subi	r30, 0xA4	; 164
   1b894:	ff 4f       	sbci	r31, 0xFF	; 255
   1b896:	80 81       	ld	r24, Z
   1b898:	91 81       	ldd	r25, Z+1	; 0x01
   1b89a:	a2 81       	ldd	r26, Z+2	; 0x02
   1b89c:	b3 81       	ldd	r27, Z+3	; 0x03
   1b89e:	22 27       	eor	r18, r18
   1b8a0:	38 2f       	mov	r19, r24
   1b8a2:	49 2f       	mov	r20, r25
   1b8a4:	5a 2f       	mov	r21, r26
   1b8a6:	ce 5e       	subi	r28, 0xEE	; 238
   1b8a8:	de 4f       	sbci	r29, 0xFE	; 254
   1b8aa:	28 83       	st	Y, r18
   1b8ac:	39 83       	std	Y+1, r19	; 0x01
   1b8ae:	4a 83       	std	Y+2, r20	; 0x02
   1b8b0:	5b 83       	std	Y+3, r21	; 0x03
   1b8b2:	c2 51       	subi	r28, 0x12	; 18
   1b8b4:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b8b6:	21 2c       	mov	r2, r1
   1b8b8:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b8ba:	81 2c       	mov	r8, r1
   1b8bc:	91 2c       	mov	r9, r1
   1b8be:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b8c0:	a7 01       	movw	r20, r14
   1b8c2:	40 5a       	subi	r20, 0xA0	; 160
   1b8c4:	5f 4f       	sbci	r21, 0xFF	; 255
   1b8c6:	c4 5e       	subi	r28, 0xE4	; 228
   1b8c8:	de 4f       	sbci	r29, 0xFE	; 254
   1b8ca:	59 83       	std	Y+1, r21	; 0x01
   1b8cc:	48 83       	st	Y, r20
   1b8ce:	cc 51       	subi	r28, 0x1C	; 28
   1b8d0:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b8d2:	8c e6       	ldi	r24, 0x6C	; 108
   1b8d4:	94 e3       	ldi	r25, 0x34	; 52
   1b8d6:	2c 01       	movw	r4, r24
   1b8d8:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b8da:	27 c0       	rjmp	.+78     	; 0x1b92a <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b8dc:	00 e0       	ldi	r16, 0x00	; 0
   1b8de:	11 e0       	ldi	r17, 0x01	; 1
   1b8e0:	c8 5e       	subi	r28, 0xE8	; 232
   1b8e2:	de 4f       	sbci	r29, 0xFE	; 254
   1b8e4:	28 81       	ld	r18, Y
   1b8e6:	39 81       	ldd	r19, Y+1	; 0x01
   1b8e8:	4a 81       	ldd	r20, Y+2	; 0x02
   1b8ea:	5b 81       	ldd	r21, Y+3	; 0x03
   1b8ec:	c8 51       	subi	r28, 0x18	; 24
   1b8ee:	d1 40       	sbci	r29, 0x01	; 1
   1b8f0:	be 01       	movw	r22, r28
   1b8f2:	66 5f       	subi	r22, 0xF6	; 246
   1b8f4:	7f 4f       	sbci	r23, 0xFF	; 255
   1b8f6:	c7 01       	movw	r24, r14
   1b8f8:	0e 94 dc c1 	call	0x183b8	; 0x183b8 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b8fc:	8f 3f       	cpi	r24, 0xFF	; 255
   1b8fe:	91 05       	cpc	r25, r1
   1b900:	09 f0       	breq	.+2      	; 0x1b904 <lif_add_lif_file+0x1ee>
   1b902:	0c f4       	brge	.+2      	; 0x1b906 <lif_add_lif_file+0x1f0>
   1b904:	4a c0       	rjmp	.+148    	; 0x1b99a <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b906:	5f ef       	ldi	r21, 0xFF	; 255
   1b908:	95 1a       	sub	r9, r21
   1b90a:	a5 0a       	sbc	r10, r21
   1b90c:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b90e:	ed b7       	in	r30, 0x3d	; 61
   1b910:	fe b7       	in	r31, 0x3e	; 62
   1b912:	84 82       	std	Z+4, r8	; 0x04
   1b914:	95 82       	std	Z+5, r9	; 0x05
   1b916:	a6 82       	std	Z+6, r10	; 0x06
   1b918:	b7 82       	std	Z+7, r11	; 0x07
   1b91a:	41 82       	std	Z+1, r4	; 0x01
   1b91c:	52 82       	std	Z+2, r5	; 0x02
   1b91e:	63 82       	std	Z+3, r6	; 0x03
   1b920:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b924:	ff ef       	ldi	r31, 0xFF	; 255
   1b926:	2f 1a       	sub	r2, r31
   1b928:	3f 0a       	sbc	r3, r31
   1b92a:	ce 5e       	subi	r28, 0xEE	; 238
   1b92c:	de 4f       	sbci	r29, 0xFE	; 254
   1b92e:	28 81       	ld	r18, Y
   1b930:	39 81       	ldd	r19, Y+1	; 0x01
   1b932:	4a 81       	ldd	r20, Y+2	; 0x02
   1b934:	5b 81       	ldd	r21, Y+3	; 0x03
   1b936:	c2 51       	subi	r28, 0x12	; 18
   1b938:	d1 40       	sbci	r29, 0x01	; 1
   1b93a:	28 0d       	add	r18, r8
   1b93c:	39 1d       	adc	r19, r9
   1b93e:	4a 1d       	adc	r20, r10
   1b940:	5b 1d       	adc	r21, r11
   1b942:	c2 5f       	subi	r28, 0xF2	; 242
   1b944:	de 4f       	sbci	r29, 0xFE	; 254
   1b946:	88 81       	ld	r24, Y
   1b948:	99 81       	ldd	r25, Y+1	; 0x01
   1b94a:	aa 81       	ldd	r26, Y+2	; 0x02
   1b94c:	bb 81       	ldd	r27, Y+3	; 0x03
   1b94e:	ce 50       	subi	r28, 0x0E	; 14
   1b950:	d1 40       	sbci	r29, 0x01	; 1
   1b952:	88 0d       	add	r24, r8
   1b954:	99 1d       	adc	r25, r9
   1b956:	aa 1d       	adc	r26, r10
   1b958:	bb 1d       	adc	r27, r11
   1b95a:	c8 5e       	subi	r28, 0xE8	; 232
   1b95c:	de 4f       	sbci	r29, 0xFE	; 254
   1b95e:	88 83       	st	Y, r24
   1b960:	99 83       	std	Y+1, r25	; 0x01
   1b962:	aa 83       	std	Y+2, r26	; 0x02
   1b964:	bb 83       	std	Y+3, r27	; 0x03
   1b966:	c8 51       	subi	r28, 0x18	; 24
   1b968:	d1 40       	sbci	r29, 0x01	; 1
   1b96a:	c4 5e       	subi	r28, 0xE4	; 228
   1b96c:	de 4f       	sbci	r29, 0xFE	; 254
   1b96e:	a8 81       	ld	r26, Y
   1b970:	b9 81       	ldd	r27, Y+1	; 0x01
   1b972:	cc 51       	subi	r28, 0x1C	; 28
   1b974:	d1 40       	sbci	r29, 0x01	; 1
   1b976:	8d 91       	ld	r24, X+
   1b978:	9c 91       	ld	r25, X
   1b97a:	28 16       	cp	r2, r24
   1b97c:	39 06       	cpc	r3, r25
   1b97e:	94 f4       	brge	.+36     	; 0x1b9a4 <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b980:	00 e0       	ldi	r16, 0x00	; 0
   1b982:	11 e0       	ldi	r17, 0x01	; 1
   1b984:	be 01       	movw	r22, r28
   1b986:	66 5f       	subi	r22, 0xF6	; 246
   1b988:	7f 4f       	sbci	r23, 0xFF	; 255
   1b98a:	c6 01       	movw	r24, r12
   1b98c:	0e 94 89 c1 	call	0x18312	; 0x18312 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b990:	6f 3f       	cpi	r22, 0xFF	; 255
   1b992:	71 05       	cpc	r23, r1
   1b994:	11 f0       	breq	.+4      	; 0x1b99a <lif_add_lif_file+0x284>
   1b996:	0c f0       	brlt	.+2      	; 0x1b99a <lif_add_lif_file+0x284>
   1b998:	a1 cf       	rjmp	.-190    	; 0x1b8dc <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b99a:	c7 01       	movw	r24, r14
   1b99c:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
   1b9a0:	c6 01       	movw	r24, r12
   1b9a2:	0f c0       	rjmp	.+30     	; 0x1b9c2 <lif_add_lif_file+0x2ac>
   1b9a4:	c6 01       	movw	r24, r12
   1b9a6:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1b9aa:	ca 5e       	subi	r28, 0xEA	; 234
   1b9ac:	de 4f       	sbci	r29, 0xFE	; 254
   1b9ae:	68 81       	ld	r22, Y
   1b9b0:	79 81       	ldd	r23, Y+1	; 0x01
   1b9b2:	c6 51       	subi	r28, 0x16	; 22
   1b9b4:	d1 40       	sbci	r29, 0x01	; 1
   1b9b6:	c7 01       	movw	r24, r14
   1b9b8:	0e 94 4a cb 	call	0x19694	; 0x19694 <lif_writedirindex>
   1b9bc:	89 2b       	or	r24, r25
   1b9be:	41 f4       	brne	.+16     	; 0x1b9d0 <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b9c0:	c7 01       	movw	r24, r14
   1b9c2:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b9c6:	6f ef       	ldi	r22, 0xFF	; 255
   1b9c8:	7f ef       	ldi	r23, 0xFF	; 255
   1b9ca:	8f ef       	ldi	r24, 0xFF	; 255
   1b9cc:	9f ef       	ldi	r25, 0xFF	; 255
   1b9ce:	13 c0       	rjmp	.+38     	; 0x1b9f6 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b9d0:	c7 01       	movw	r24, r14
   1b9d2:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b9d6:	ed b7       	in	r30, 0x3d	; 61
   1b9d8:	fe b7       	in	r31, 0x3e	; 62
   1b9da:	84 82       	std	Z+4, r8	; 0x04
   1b9dc:	95 82       	std	Z+5, r9	; 0x05
   1b9de:	a6 82       	std	Z+6, r10	; 0x06
   1b9e0:	b7 82       	std	Z+7, r11	; 0x07
   1b9e2:	8e e5       	ldi	r24, 0x5E	; 94
   1b9e4:	94 e3       	ldi	r25, 0x34	; 52
   1b9e6:	a0 e0       	ldi	r26, 0x00	; 0
   1b9e8:	81 83       	std	Z+1, r24	; 0x01
   1b9ea:	92 83       	std	Z+2, r25	; 0x02
   1b9ec:	a3 83       	std	Z+3, r26	; 0x03
   1b9ee:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    return(bytes);
   1b9f2:	b4 01       	movw	r22, r8
   1b9f4:	c5 01       	movw	r24, r10
}
   1b9f6:	c3 5e       	subi	r28, 0xE3	; 227
   1b9f8:	de 4f       	sbci	r29, 0xFE	; 254
   1b9fa:	0f b6       	in	r0, 0x3f	; 63
   1b9fc:	f8 94       	cli
   1b9fe:	de bf       	out	0x3e, r29	; 62
   1ba00:	0f be       	out	0x3f, r0	; 63
   1ba02:	cd bf       	out	0x3d, r28	; 61
   1ba04:	df 91       	pop	r29
   1ba06:	cf 91       	pop	r28
   1ba08:	1f 91       	pop	r17
   1ba0a:	0f 91       	pop	r16
   1ba0c:	ff 90       	pop	r15
   1ba0e:	ef 90       	pop	r14
   1ba10:	df 90       	pop	r13
   1ba12:	cf 90       	pop	r12
   1ba14:	bf 90       	pop	r11
   1ba16:	af 90       	pop	r10
   1ba18:	9f 90       	pop	r9
   1ba1a:	8f 90       	pop	r8
   1ba1c:	6f 90       	pop	r6
   1ba1e:	5f 90       	pop	r5
   1ba20:	4f 90       	pop	r4
   1ba22:	3f 90       	pop	r3
   1ba24:	2f 90       	pop	r2
   1ba26:	08 95       	ret

0001ba28 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1ba28:	ef 92       	push	r14
   1ba2a:	ff 92       	push	r15
   1ba2c:	0f 93       	push	r16
   1ba2e:	1f 93       	push	r17
   1ba30:	cf 93       	push	r28
   1ba32:	df 93       	push	r29
   1ba34:	ad b7       	in	r26, 0x3d	; 61
   1ba36:	be b7       	in	r27, 0x3e	; 62
   1ba38:	17 97       	sbiw	r26, 0x07	; 7
   1ba3a:	0f b6       	in	r0, 0x3f	; 63
   1ba3c:	f8 94       	cli
   1ba3e:	be bf       	out	0x3e, r27	; 62
   1ba40:	0f be       	out	0x3f, r0	; 63
   1ba42:	ad bf       	out	0x3d, r26	; 61
   1ba44:	7c 01       	movw	r14, r24
   1ba46:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1ba48:	fc 01       	movw	r30, r24
   1ba4a:	80 81       	ld	r24, Z
   1ba4c:	81 11       	cpse	r24, r1
   1ba4e:	03 c0       	rjmp	.+6      	; 0x1ba56 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1ba50:	89 e3       	ldi	r24, 0x39	; 57
   1ba52:	94 e3       	ldi	r25, 0x34	; 52
   1ba54:	06 c0       	rjmp	.+12     	; 0x1ba62 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1ba56:	fb 01       	movw	r30, r22
   1ba58:	80 81       	ld	r24, Z
   1ba5a:	81 11       	cpse	r24, r1
   1ba5c:	0b c0       	rjmp	.+22     	; 0x1ba74 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1ba5e:	89 e1       	ldi	r24, 0x19	; 25
   1ba60:	94 e3       	ldi	r25, 0x34	; 52
   1ba62:	a0 e0       	ldi	r26, 0x00	; 0
   1ba64:	ed b7       	in	r30, 0x3d	; 61
   1ba66:	fe b7       	in	r31, 0x3e	; 62
   1ba68:	81 83       	std	Z+1, r24	; 0x01
   1ba6a:	92 83       	std	Z+2, r25	; 0x02
   1ba6c:	a3 83       	std	Z+3, r26	; 0x03
   1ba6e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1ba72:	68 c0       	rjmp	.+208    	; 0x1bb44 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1ba74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1ba78:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ba7c:	92 ff       	sbrs	r25, 2
   1ba7e:	0e c0       	rjmp	.+28     	; 0x1ba9c <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1ba80:	ed b7       	in	r30, 0x3d	; 61
   1ba82:	fe b7       	in	r31, 0x3e	; 62
   1ba84:	77 83       	std	Z+7, r23	; 0x07
   1ba86:	66 83       	std	Z+6, r22	; 0x06
   1ba88:	f5 82       	std	Z+5, r15	; 0x05
   1ba8a:	e4 82       	std	Z+4, r14	; 0x04
   1ba8c:	8a ef       	ldi	r24, 0xFA	; 250
   1ba8e:	93 e3       	ldi	r25, 0x33	; 51
   1ba90:	a0 e0       	ldi	r26, 0x00	; 0
   1ba92:	81 83       	std	Z+1, r24	; 0x01
   1ba94:	92 83       	std	Z+2, r25	; 0x02
   1ba96:	a3 83       	std	Z+3, r26	; 0x03
   1ba98:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1ba9c:	68 e0       	ldi	r22, 0x08	; 8
   1ba9e:	79 e0       	ldi	r23, 0x09	; 9
   1baa0:	c7 01       	movw	r24, r14
   1baa2:	0e 94 12 d1 	call	0x1a224	; 0x1a224 <lif_open_volume>
   1baa6:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1baa8:	00 97       	sbiw	r24, 0x00	; 0
   1baaa:	09 f4       	brne	.+2      	; 0x1baae <lif_del_file+0x86>
   1baac:	4b c0       	rjmp	.+150    	; 0x1bb44 <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1baae:	b8 01       	movw	r22, r16
   1bab0:	0e 94 e7 d3 	call	0x1a7ce	; 0x1a7ce <lif_find_file>
    if(index == -1)
   1bab4:	8f 3f       	cpi	r24, 0xFF	; 255
   1bab6:	ff ef       	ldi	r31, 0xFF	; 255
   1bab8:	9f 07       	cpc	r25, r31
   1baba:	a1 f4       	brne	.+40     	; 0x1bae4 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1babc:	ce 01       	movw	r24, r28
   1babe:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1bac2:	ed b7       	in	r30, 0x3d	; 61
   1bac4:	fe b7       	in	r31, 0x3e	; 62
   1bac6:	17 83       	std	Z+7, r17	; 0x07
   1bac8:	06 83       	std	Z+6, r16	; 0x06
   1baca:	f5 82       	std	Z+5, r15	; 0x05
   1bacc:	e4 82       	std	Z+4, r14	; 0x04
   1bace:	82 ed       	ldi	r24, 0xD2	; 210
   1bad0:	93 e3       	ldi	r25, 0x33	; 51
   1bad2:	a0 e0       	ldi	r26, 0x00	; 0
   1bad4:	81 83       	std	Z+1, r24	; 0x01
   1bad6:	92 83       	std	Z+2, r25	; 0x02
   1bad8:	a3 83       	std	Z+3, r26	; 0x03
   1bada:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        return(0);
   1bade:	80 e0       	ldi	r24, 0x00	; 0
   1bae0:	90 e0       	ldi	r25, 0x00	; 0
   1bae2:	32 c0       	rjmp	.+100    	; 0x1bb48 <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1bae4:	2a a1       	ldd	r18, Y+34	; 0x22
   1bae6:	3b a1       	ldd	r19, Y+35	; 0x23
   1bae8:	21 50       	subi	r18, 0x01	; 1
   1baea:	31 09       	sbc	r19, r1
   1baec:	fe 01       	movw	r30, r28
   1baee:	e6 5a       	subi	r30, 0xA6	; 166
   1baf0:	ff 4f       	sbci	r31, 0xFF	; 255
   1baf2:	82 17       	cp	r24, r18
   1baf4:	93 07       	cpc	r25, r19
   1baf6:	2c f0       	brlt	.+10     	; 0x1bb02 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1baf8:	2f ef       	ldi	r18, 0xFF	; 255
   1bafa:	3f ef       	ldi	r19, 0xFF	; 255
   1bafc:	31 83       	std	Z+1, r19	; 0x01
   1bafe:	20 83       	st	Z, r18
   1bb00:	02 c0       	rjmp	.+4      	; 0x1bb06 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1bb02:	11 82       	std	Z+1, r1	; 0x01
   1bb04:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1bb06:	bc 01       	movw	r22, r24
   1bb08:	ce 01       	movw	r24, r28
   1bb0a:	0e 94 4a cb 	call	0x19694	; 0x19694 <lif_writedirindex>
   1bb0e:	89 2b       	or	r24, r25
   1bb10:	21 f4       	brne	.+8      	; 0x1bb1a <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb12:	ce 01       	movw	r24, r28
   1bb14:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
   1bb18:	15 c0       	rjmp	.+42     	; 0x1bb44 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1bb1a:	ce 01       	movw	r24, r28
   1bb1c:	0e 94 be cb 	call	0x1977c	; 0x1977c <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb20:	ce 01       	movw	r24, r28
   1bb22:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1bb26:	ed b7       	in	r30, 0x3d	; 61
   1bb28:	fe b7       	in	r31, 0x3e	; 62
   1bb2a:	15 83       	std	Z+5, r17	; 0x05
   1bb2c:	04 83       	std	Z+4, r16	; 0x04
   1bb2e:	83 ec       	ldi	r24, 0xC3	; 195
   1bb30:	93 e3       	ldi	r25, 0x33	; 51
   1bb32:	a0 e0       	ldi	r26, 0x00	; 0
   1bb34:	81 83       	std	Z+1, r24	; 0x01
   1bb36:	92 83       	std	Z+2, r25	; 0x02
   1bb38:	a3 83       	std	Z+3, r26	; 0x03
   1bb3a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    return(1);
   1bb3e:	81 e0       	ldi	r24, 0x01	; 1
   1bb40:	90 e0       	ldi	r25, 0x00	; 0
   1bb42:	02 c0       	rjmp	.+4      	; 0x1bb48 <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bb44:	8f ef       	ldi	r24, 0xFF	; 255
   1bb46:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1bb48:	cd b7       	in	r28, 0x3d	; 61
   1bb4a:	de b7       	in	r29, 0x3e	; 62
   1bb4c:	27 96       	adiw	r28, 0x07	; 7
   1bb4e:	e6 e0       	ldi	r30, 0x06	; 6
   1bb50:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x18>

0001bb54 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1bb54:	a7 e0       	ldi	r26, 0x07	; 7
   1bb56:	b0 e0       	ldi	r27, 0x00	; 0
   1bb58:	e0 eb       	ldi	r30, 0xB0	; 176
   1bb5a:	fd ed       	ldi	r31, 0xDD	; 221
   1bb5c:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__+0x10>
   1bb60:	6c 01       	movw	r12, r24
   1bb62:	8b 01       	movw	r16, r22
   1bb64:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bb66:	fc 01       	movw	r30, r24
   1bb68:	80 81       	ld	r24, Z
   1bb6a:	81 11       	cpse	r24, r1
   1bb6c:	03 c0       	rjmp	.+6      	; 0x1bb74 <lif_rename_file+0x20>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bb6e:	8b e9       	ldi	r24, 0x9B	; 155
   1bb70:	93 e3       	ldi	r25, 0x33	; 51
   1bb72:	06 c0       	rjmp	.+12     	; 0x1bb80 <lif_rename_file+0x2c>
        return(-1);
    }
    if(!*oldlifname)
   1bb74:	fb 01       	movw	r30, r22
   1bb76:	80 81       	ld	r24, Z
   1bb78:	81 11       	cpse	r24, r1
   1bb7a:	0b c0       	rjmp	.+22     	; 0x1bb92 <lif_rename_file+0x3e>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bb7c:	84 e7       	ldi	r24, 0x74	; 116
   1bb7e:	93 e3       	ldi	r25, 0x33	; 51
   1bb80:	a0 e0       	ldi	r26, 0x00	; 0
   1bb82:	ed b7       	in	r30, 0x3d	; 61
   1bb84:	fe b7       	in	r31, 0x3e	; 62
   1bb86:	81 83       	std	Z+1, r24	; 0x01
   1bb88:	92 83       	std	Z+2, r25	; 0x02
   1bb8a:	a3 83       	std	Z+3, r26	; 0x03
   1bb8c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1bb90:	58 c0       	rjmp	.+176    	; 0x1bc42 <lif_rename_file+0xee>
        return(-1);
    }
    if(!*newlifname)
   1bb92:	fa 01       	movw	r30, r20
   1bb94:	80 81       	ld	r24, Z
   1bb96:	81 11       	cpse	r24, r1
   1bb98:	03 c0       	rjmp	.+6      	; 0x1bba0 <lif_rename_file+0x4c>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1bb9a:	8d e4       	ldi	r24, 0x4D	; 77
   1bb9c:	93 e3       	ldi	r25, 0x33	; 51
   1bb9e:	f0 cf       	rjmp	.-32     	; 0x1bb80 <lif_rename_file+0x2c>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1bba0:	ca 01       	movw	r24, r20
   1bba2:	0e 94 a4 c2 	call	0x18548	; 0x18548 <lif_checkname>
   1bba6:	89 2b       	or	r24, r25
   1bba8:	19 f4       	brne	.+6      	; 0x1bbb0 <lif_rename_file+0x5c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1bbaa:	87 e1       	ldi	r24, 0x17	; 23
   1bbac:	93 e3       	ldi	r25, 0x33	; 51
   1bbae:	e8 cf       	rjmp	.-48     	; 0x1bb80 <lif_rename_file+0x2c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bbb0:	68 e0       	ldi	r22, 0x08	; 8
   1bbb2:	79 e0       	ldi	r23, 0x09	; 9
   1bbb4:	c6 01       	movw	r24, r12
   1bbb6:	0e 94 12 d1 	call	0x1a224	; 0x1a224 <lif_open_volume>
   1bbba:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bbbc:	00 97       	sbiw	r24, 0x00	; 0
   1bbbe:	09 f4       	brne	.+2      	; 0x1bbc2 <lif_rename_file+0x6e>
   1bbc0:	40 c0       	rjmp	.+128    	; 0x1bc42 <lif_rename_file+0xee>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1bbc2:	b8 01       	movw	r22, r16
   1bbc4:	0e 94 e7 d3 	call	0x1a7ce	; 0x1a7ce <lif_find_file>
   1bbc8:	5c 01       	movw	r10, r24
    if(index == -1)
   1bbca:	01 96       	adiw	r24, 0x01	; 1
   1bbcc:	a1 f4       	brne	.+40     	; 0x1bbf6 <lif_rename_file+0xa2>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1bbce:	ed b7       	in	r30, 0x3d	; 61
   1bbd0:	fe b7       	in	r31, 0x3e	; 62
   1bbd2:	17 83       	std	Z+7, r17	; 0x07
   1bbd4:	06 83       	std	Z+6, r16	; 0x06
   1bbd6:	d5 82       	std	Z+5, r13	; 0x05
   1bbd8:	c4 82       	std	Z+4, r12	; 0x04
   1bbda:	8e ee       	ldi	r24, 0xEE	; 238
   1bbdc:	92 e3       	ldi	r25, 0x32	; 50
   1bbde:	a0 e0       	ldi	r26, 0x00	; 0
   1bbe0:	81 83       	std	Z+1, r24	; 0x01
   1bbe2:	92 83       	std	Z+2, r25	; 0x02
   1bbe4:	a3 83       	std	Z+3, r26	; 0x03
   1bbe6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbea:	ce 01       	movw	r24, r28
   1bbec:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1bbf0:	80 e0       	ldi	r24, 0x00	; 0
   1bbf2:	90 e0       	ldi	r25, 0x00	; 0
   1bbf4:	28 c0       	rjmp	.+80     	; 0x1bc46 <lif_rename_file+0xf2>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1bbf6:	4a e0       	ldi	r20, 0x0A	; 10
   1bbf8:	50 e0       	ldi	r21, 0x00	; 0
   1bbfa:	b7 01       	movw	r22, r14
   1bbfc:	ce 01       	movw	r24, r28
   1bbfe:	81 5b       	subi	r24, 0xB1	; 177
   1bc00:	9f 4f       	sbci	r25, 0xFF	; 255
   1bc02:	0e 94 de c2 	call	0x185bc	; 0x185bc <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1bc06:	b5 01       	movw	r22, r10
   1bc08:	ce 01       	movw	r24, r28
   1bc0a:	0e 94 4a cb 	call	0x19694	; 0x19694 <lif_writedirindex>
   1bc0e:	89 2b       	or	r24, r25
   1bc10:	21 f4       	brne	.+8      	; 0x1bc1a <lif_rename_file+0xc6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc12:	ce 01       	movw	r24, r28
   1bc14:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
   1bc18:	14 c0       	rjmp	.+40     	; 0x1bc42 <lif_rename_file+0xee>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1bc1a:	ed b7       	in	r30, 0x3d	; 61
   1bc1c:	fe b7       	in	r31, 0x3e	; 62
   1bc1e:	f7 82       	std	Z+7, r15	; 0x07
   1bc20:	e6 82       	std	Z+6, r14	; 0x06
   1bc22:	15 83       	std	Z+5, r17	; 0x05
   1bc24:	04 83       	std	Z+4, r16	; 0x04
   1bc26:	87 ed       	ldi	r24, 0xD7	; 215
   1bc28:	92 e3       	ldi	r25, 0x32	; 50
   1bc2a:	a0 e0       	ldi	r26, 0x00	; 0
   1bc2c:	81 83       	std	Z+1, r24	; 0x01
   1bc2e:	92 83       	std	Z+2, r25	; 0x02
   1bc30:	a3 83       	std	Z+3, r26	; 0x03
   1bc32:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc36:	ce 01       	movw	r24, r28
   1bc38:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1bc3c:	81 e0       	ldi	r24, 0x01	; 1
   1bc3e:	90 e0       	ldi	r25, 0x00	; 0
   1bc40:	02 c0       	rjmp	.+4      	; 0x1bc46 <lif_rename_file+0xf2>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bc42:	8f ef       	ldi	r24, 0xFF	; 255
   1bc44:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1bc46:	cd b7       	in	r28, 0x3d	; 61
   1bc48:	de b7       	in	r29, 0x3e	; 62
   1bc4a:	27 96       	adiw	r28, 0x07	; 7
   1bc4c:	ea e0       	ldi	r30, 0x0A	; 10
   1bc4e:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__+0x10>

0001bc52 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1bc52:	4f 92       	push	r4
   1bc54:	5f 92       	push	r5
   1bc56:	6f 92       	push	r6
   1bc58:	7f 92       	push	r7
   1bc5a:	af 92       	push	r10
   1bc5c:	bf 92       	push	r11
   1bc5e:	cf 92       	push	r12
   1bc60:	df 92       	push	r13
   1bc62:	ef 92       	push	r14
   1bc64:	ff 92       	push	r15
   1bc66:	0f 93       	push	r16
   1bc68:	1f 93       	push	r17
   1bc6a:	cf 93       	push	r28
   1bc6c:	df 93       	push	r29
   1bc6e:	ad b7       	in	r26, 0x3d	; 61
   1bc70:	be b7       	in	r27, 0x3e	; 62
   1bc72:	17 97       	sbiw	r26, 0x07	; 7
   1bc74:	0f b6       	in	r0, 0x3f	; 63
   1bc76:	f8 94       	cli
   1bc78:	be bf       	out	0x3e, r27	; 62
   1bc7a:	0f be       	out	0x3f, r0	; 63
   1bc7c:	ad bf       	out	0x3d, r26	; 61
   1bc7e:	27 01       	movw	r4, r14
   1bc80:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1bc82:	dc 01       	movw	r26, r24
   1bc84:	ec 91       	ld	r30, X
   1bc86:	e1 11       	cpse	r30, r1
   1bc88:	03 c0       	rjmp	.+6      	; 0x1bc90 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1bc8a:	8e ea       	ldi	r24, 0xAE	; 174
   1bc8c:	92 e3       	ldi	r25, 0x32	; 50
   1bc8e:	16 c0       	rjmp	.+44     	; 0x1bcbc <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1bc90:	db 01       	movw	r26, r22
   1bc92:	ec 91       	ld	r30, X
   1bc94:	e1 11       	cpse	r30, r1
   1bc96:	03 c0       	rjmp	.+6      	; 0x1bc9e <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1bc98:	89 e8       	ldi	r24, 0x89	; 137
   1bc9a:	92 e3       	ldi	r25, 0x32	; 50
   1bc9c:	0f c0       	rjmp	.+30     	; 0x1bcbc <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1bc9e:	21 15       	cp	r18, r1
   1bca0:	31 05       	cpc	r19, r1
   1bca2:	41 05       	cpc	r20, r1
   1bca4:	51 05       	cpc	r21, r1
   1bca6:	19 f4       	brne	.+6      	; 0x1bcae <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1bca8:	86 e6       	ldi	r24, 0x66	; 102
   1bcaa:	92 e3       	ldi	r25, 0x32	; 50
   1bcac:	07 c0       	rjmp	.+14     	; 0x1bcbc <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1bcae:	e1 14       	cp	r14, r1
   1bcb0:	f1 04       	cpc	r15, r1
   1bcb2:	01 05       	cpc	r16, r1
   1bcb4:	11 05       	cpc	r17, r1
   1bcb6:	59 f4       	brne	.+22     	; 0x1bcce <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1bcb8:	86 e4       	ldi	r24, 0x46	; 70
   1bcba:	92 e3       	ldi	r25, 0x32	; 50
   1bcbc:	a0 e0       	ldi	r26, 0x00	; 0
   1bcbe:	ed b7       	in	r30, 0x3d	; 61
   1bcc0:	fe b7       	in	r31, 0x3e	; 62
   1bcc2:	81 83       	std	Z+1, r24	; 0x01
   1bcc4:	92 83       	std	Z+2, r25	; 0x02
   1bcc6:	a3 83       	std	Z+3, r26	; 0x03
   1bcc8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1bccc:	2b c0       	rjmp	.+86     	; 0x1bd24 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1bcce:	67 01       	movw	r12, r14
   1bcd0:	78 01       	movw	r14, r16
   1bcd2:	f2 e0       	ldi	r31, 0x02	; 2
   1bcd4:	cf 1a       	sub	r12, r31
   1bcd6:	d1 08       	sbc	r13, r1
   1bcd8:	e1 08       	sbc	r14, r1
   1bcda:	f1 08       	sbc	r15, r1
   1bcdc:	56 01       	movw	r10, r12
   1bcde:	67 01       	movw	r12, r14
   1bce0:	a2 1a       	sub	r10, r18
   1bce2:	b3 0a       	sbc	r11, r19
   1bce4:	c4 0a       	sbc	r12, r20
   1bce6:	d5 0a       	sbc	r13, r21
   1bce8:	79 01       	movw	r14, r18
   1bcea:	8a 01       	movw	r16, r20
   1bcec:	22 e0       	ldi	r18, 0x02	; 2
   1bcee:	30 e0       	ldi	r19, 0x00	; 0
   1bcf0:	40 e0       	ldi	r20, 0x00	; 0
   1bcf2:	50 e0       	ldi	r21, 0x00	; 0
   1bcf4:	0e 94 c8 cc 	call	0x19990	; 0x19990 <lif_create_volume>
    if(LIF == NULL)
   1bcf8:	00 97       	sbiw	r24, 0x00	; 0
   1bcfa:	a1 f0       	breq	.+40     	; 0x1bd24 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1bcfc:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1bd00:	82 01       	movw	r16, r4
   1bd02:	d6 2d       	mov	r29, r6
   1bd04:	c7 2d       	mov	r28, r7
   1bd06:	ed b7       	in	r30, 0x3d	; 61
   1bd08:	fe b7       	in	r31, 0x3e	; 62
   1bd0a:	44 82       	std	Z+4, r4	; 0x04
   1bd0c:	15 83       	std	Z+5, r17	; 0x05
   1bd0e:	66 82       	std	Z+6, r6	; 0x06
   1bd10:	77 82       	std	Z+7, r7	; 0x07
   1bd12:	86 e2       	ldi	r24, 0x26	; 38
   1bd14:	92 e3       	ldi	r25, 0x32	; 50
   1bd16:	a0 e0       	ldi	r26, 0x00	; 0
   1bd18:	81 83       	std	Z+1, r24	; 0x01
   1bd1a:	92 83       	std	Z+2, r25	; 0x02
   1bd1c:	a3 83       	std	Z+3, r26	; 0x03
   1bd1e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    return(end);
   1bd22:	04 c0       	rjmp	.+8      	; 0x1bd2c <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1bd24:	0f ef       	ldi	r16, 0xFF	; 255
   1bd26:	1f ef       	ldi	r17, 0xFF	; 255
   1bd28:	df ef       	ldi	r29, 0xFF	; 255
   1bd2a:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1bd2c:	b8 01       	movw	r22, r16
   1bd2e:	8d 2f       	mov	r24, r29
   1bd30:	9c 2f       	mov	r25, r28
   1bd32:	ad b7       	in	r26, 0x3d	; 61
   1bd34:	be b7       	in	r27, 0x3e	; 62
   1bd36:	17 96       	adiw	r26, 0x07	; 7
   1bd38:	0f b6       	in	r0, 0x3f	; 63
   1bd3a:	f8 94       	cli
   1bd3c:	be bf       	out	0x3e, r27	; 62
   1bd3e:	0f be       	out	0x3f, r0	; 63
   1bd40:	ad bf       	out	0x3d, r26	; 61
   1bd42:	df 91       	pop	r29
   1bd44:	cf 91       	pop	r28
   1bd46:	1f 91       	pop	r17
   1bd48:	0f 91       	pop	r16
   1bd4a:	ff 90       	pop	r15
   1bd4c:	ef 90       	pop	r14
   1bd4e:	df 90       	pop	r13
   1bd50:	cf 90       	pop	r12
   1bd52:	bf 90       	pop	r11
   1bd54:	af 90       	pop	r10
   1bd56:	7f 90       	pop	r7
   1bd58:	6f 90       	pop	r6
   1bd5a:	5f 90       	pop	r5
   1bd5c:	4f 90       	pop	r4
   1bd5e:	08 95       	ret

0001bd60 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1bd60:	a5 e0       	ldi	r26, 0x05	; 5
   1bd62:	b0 e0       	ldi	r27, 0x00	; 0
   1bd64:	e6 eb       	ldi	r30, 0xB6	; 182
   1bd66:	fe ed       	ldi	r31, 0xDE	; 222
   1bd68:	0c 94 b9 e6 	jmp	0x1cd72	; 0x1cd72 <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1bd6c:	82 30       	cpi	r24, 0x02	; 2
   1bd6e:	91 05       	cpc	r25, r1
   1bd70:	1c f4       	brge	.+6      	; 0x1bd78 <lif_tests+0x18>
        return (0);
   1bd72:	80 e0       	ldi	r24, 0x00	; 0
   1bd74:	90 e0       	ldi	r25, 0x00	; 0
   1bd76:	8f c1       	rjmp	.+798    	; 0x1c096 <lif_tests+0x336>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1bd78:	fb 01       	movw	r30, r22
   1bd7a:	e2 80       	ldd	r14, Z+2	; 0x02
   1bd7c:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1bd7e:	e1 14       	cp	r14, r1
   1bd80:	f1 04       	cpc	r15, r1
   1bd82:	09 f4       	brne	.+2      	; 0x1bd86 <lif_tests+0x26>
   1bd84:	86 c1       	rjmp	.+780    	; 0x1c092 <lif_tests+0x332>
   1bd86:	f7 01       	movw	r30, r14
   1bd88:	20 81       	ld	r18, Z
   1bd8a:	22 23       	and	r18, r18
   1bd8c:	09 f4       	brne	.+2      	; 0x1bd90 <lif_tests+0x30>
   1bd8e:	81 c1       	rjmp	.+770    	; 0x1c092 <lif_tests+0x332>
   1bd90:	8b 01       	movw	r16, r22
   1bd92:	6c 01       	movw	r12, r24
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
   1bd94:	6a eb       	ldi	r22, 0xBA	; 186
   1bd96:	76 e1       	ldi	r23, 0x16	; 22
   1bd98:	f8 01       	movw	r30, r16
   1bd9a:	80 81       	ld	r24, Z
   1bd9c:	91 81       	ldd	r25, Z+1	; 0x01
   1bd9e:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCHI_LEN>
   1bda2:	89 2b       	or	r24, r25
   1bda4:	d1 f0       	breq	.+52     	; 0x1bdda <lif_tests+0x7a>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1bda6:	64 e7       	ldi	r22, 0x74	; 116
   1bda8:	76 e1       	ldi	r23, 0x16	; 22
   1bdaa:	c7 01       	movw	r24, r14
   1bdac:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1bdb0:	89 2b       	or	r24, r25
   1bdb2:	29 f0       	breq	.+10     	; 0x1bdbe <lif_tests+0x5e>
		{
			lif_help(1);
   1bdb4:	81 e0       	ldi	r24, 0x01	; 1
   1bdb6:	90 e0       	ldi	r25, 0x00	; 0
   1bdb8:	0e 94 7a c0 	call	0x180f4	; 0x180f4 <lif_help>
   1bdbc:	6a c1       	rjmp	.+724    	; 0x1c092 <lif_tests+0x332>
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1bdbe:	63 e7       	ldi	r22, 0x73	; 115
   1bdc0:	76 e1       	ldi	r23, 0x16	; 22
   1bdc2:	c7 01       	movw	r24, r14
   1bdc4:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1bdc8:	89 2b       	or	r24, r25
   1bdca:	a1 f7       	brne	.-24     	; 0x1bdb4 <lif_tests+0x54>
   1bdcc:	69 e7       	ldi	r22, 0x79	; 121
   1bdce:	76 e1       	ldi	r23, 0x16	; 22
   1bdd0:	c7 01       	movw	r24, r14
   1bdd2:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1bdd6:	89 2b       	or	r24, r25
   1bdd8:	69 f7       	brne	.-38     	; 0x1bdb4 <lif_tests+0x54>
		}
	}

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1bdda:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bdde:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bde2:	9b 7f       	andi	r25, 0xFB	; 251
   1bde4:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1bde8:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1bdec:	96 01       	movw	r18, r12
   1bdee:	42 e0       	ldi	r20, 0x02	; 2
   1bdf0:	50 e0       	ldi	r21, 0x00	; 0
   1bdf2:	6c e7       	ldi	r22, 0x7C	; 124
   1bdf4:	76 e1       	ldi	r23, 0x16	; 22
   1bdf6:	c7 01       	movw	r24, r14
   1bdf8:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   1bdfc:	89 2b       	or	r24, r25
   1bdfe:	79 f0       	breq	.+30     	; 0x1be1e <lif_tests+0xbe>
    {
        debuglevel |= 0x400;
   1be00:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1be04:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1be08:	94 60       	ori	r25, 0x04	; 4
   1be0a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1be0e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1be12:	f8 01       	movw	r30, r16
   1be14:	e4 80       	ldd	r14, Z+4	; 0x04
   1be16:	f5 80       	ldd	r15, Z+5	; 0x05
   1be18:	c3 e0       	ldi	r28, 0x03	; 3
   1be1a:	d0 e0       	ldi	r29, 0x00	; 0
   1be1c:	02 c0       	rjmp	.+4      	; 0x1be22 <lif_tests+0xc2>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1be1e:	c2 e0       	ldi	r28, 0x02	; 2
   1be20:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1be22:	5e 01       	movw	r10, r28
   1be24:	f3 e0       	ldi	r31, 0x03	; 3
   1be26:	af 0e       	add	r10, r31
   1be28:	b1 1c       	adc	r11, r1
   1be2a:	96 01       	movw	r18, r12
   1be2c:	a5 01       	movw	r20, r10
   1be2e:	6f e7       	ldi	r22, 0x7F	; 127
   1be30:	76 e1       	ldi	r23, 0x16	; 22
   1be32:	c7 01       	movw	r24, r14
   1be34:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   1be38:	89 2b       	or	r24, r25
   1be3a:	61 f0       	breq	.+24     	; 0x1be54 <lif_tests+0xf4>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1be3c:	cc 0f       	add	r28, r28
   1be3e:	dd 1f       	adc	r29, r29
   1be40:	c0 0f       	add	r28, r16
   1be42:	d1 1f       	adc	r29, r17
   1be44:	4c 81       	ldd	r20, Y+4	; 0x04
   1be46:	5d 81       	ldd	r21, Y+5	; 0x05
   1be48:	6a 81       	ldd	r22, Y+2	; 0x02
   1be4a:	7b 81       	ldd	r23, Y+3	; 0x03
   1be4c:	88 81       	ld	r24, Y
   1be4e:	99 81       	ldd	r25, Y+1	; 0x01
   1be50:	62 dc       	rcall	.-1852   	; 0x1b716 <lif_add_lif_file>
   1be52:	1f c1       	rjmp	.+574    	; 0x1c092 <lif_tests+0x332>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1be54:	96 01       	movw	r18, r12
   1be56:	a5 01       	movw	r20, r10
   1be58:	66 e8       	ldi	r22, 0x86	; 134
   1be5a:	76 e1       	ldi	r23, 0x16	; 22
   1be5c:	c7 01       	movw	r24, r14
   1be5e:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   1be62:	89 2b       	or	r24, r25
   1be64:	69 f0       	breq	.+26     	; 0x1be80 <lif_tests+0x120>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1be66:	cc 0f       	add	r28, r28
   1be68:	dd 1f       	adc	r29, r29
   1be6a:	c0 0f       	add	r28, r16
   1be6c:	d1 1f       	adc	r29, r17
   1be6e:	4c 81       	ldd	r20, Y+4	; 0x04
   1be70:	5d 81       	ldd	r21, Y+5	; 0x05
   1be72:	6a 81       	ldd	r22, Y+2	; 0x02
   1be74:	7b 81       	ldd	r23, Y+3	; 0x03
   1be76:	88 81       	ld	r24, Y
   1be78:	99 81       	ldd	r25, Y+1	; 0x01
   1be7a:	0e 94 68 d6 	call	0x1acd0	; 0x1acd0 <lif_add_ascii_file_as_e010>
   1be7e:	09 c1       	rjmp	.+530    	; 0x1c092 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1be80:	96 01       	movw	r18, r12
   1be82:	a5 01       	movw	r20, r10
   1be84:	6a e8       	ldi	r22, 0x8A	; 138
   1be86:	76 e1       	ldi	r23, 0x16	; 22
   1be88:	c7 01       	movw	r24, r14
   1be8a:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   1be8e:	89 2b       	or	r24, r25
   1be90:	09 f4       	brne	.+2      	; 0x1be94 <lif_tests+0x134>
   1be92:	42 c0       	rjmp	.+132    	; 0x1bf18 <lif_tests+0x1b8>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1be94:	ce 01       	movw	r24, r28
   1be96:	88 0f       	add	r24, r24
   1be98:	99 1f       	adc	r25, r25
   1be9a:	e8 01       	movw	r28, r16
   1be9c:	c8 0f       	add	r28, r24
   1be9e:	d9 1f       	adc	r29, r25
   1bea0:	c8 80       	ld	r12, Y
   1bea2:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1bea4:	aa 80       	ldd	r10, Y+2	; 0x02
   1bea6:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1bea8:	0c 80       	ldd	r0, Y+4	; 0x04
   1beaa:	dd 81       	ldd	r29, Y+5	; 0x05
   1beac:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1beae:	65 e9       	ldi	r22, 0x95	; 149
   1beb0:	76 e1       	ldi	r23, 0x16	; 22
   1beb2:	ce 01       	movw	r24, r28
   1beb4:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCHI_LEN>
   1beb8:	89 2b       	or	r24, r25
   1beba:	09 f0       	breq	.+2      	; 0x1bebe <lif_tests+0x15e>
            model +=2;
   1bebc:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1bebe:	40 e0       	ldi	r20, 0x00	; 0
   1bec0:	50 e0       	ldi	r21, 0x00	; 0
   1bec2:	60 e0       	ldi	r22, 0x00	; 0
   1bec4:	70 e0       	ldi	r23, 0x00	; 0
   1bec6:	ce 01       	movw	r24, r28
   1bec8:	0e 94 bd a3 	call	0x1477a	; 0x1477a <hpdir_find_drive>
   1becc:	89 2b       	or	r24, r25
   1bece:	b9 f0       	breq	.+46     	; 0x1befe <lif_tests+0x19e>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1bed0:	60 91 2c 20 	lds	r22, 0x202C	; 0x80202c <hpdir+0xac>
   1bed4:	70 91 2d 20 	lds	r23, 0x202D	; 0x80202d <hpdir+0xad>
   1bed8:	80 91 2e 20 	lds	r24, 0x202E	; 0x80202e <hpdir+0xae>
   1bedc:	90 91 2f 20 	lds	r25, 0x202F	; 0x80202f <hpdir+0xaf>
   1bee0:	0e 94 a0 a3 	call	0x14740	; 0x14740 <lif_dir_count>
   1bee4:	9b 01       	movw	r18, r22
   1bee6:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
			// NOTE: we could grab the directory size for non 0 entries in the hpdir.ini file - I use a computed value which is also fine
            lif_create_image(name, label, dir, sectors);
   1bee8:	e0 90 2c 20 	lds	r14, 0x202C	; 0x80202c <hpdir+0xac>
   1beec:	f0 90 2d 20 	lds	r15, 0x202D	; 0x80202d <hpdir+0xad>
   1bef0:	00 91 2e 20 	lds	r16, 0x202E	; 0x80202e <hpdir+0xae>
   1bef4:	10 91 2f 20 	lds	r17, 0x202F	; 0x80202f <hpdir+0xaf>
   1bef8:	b5 01       	movw	r22, r10
   1befa:	c6 01       	movw	r24, r12
   1befc:	2e c0       	rjmp	.+92     	; 0x1bf5a <lif_tests+0x1fa>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1befe:	ed b7       	in	r30, 0x3d	; 61
   1bf00:	fe b7       	in	r31, 0x3e	; 62
   1bf02:	d5 83       	std	Z+5, r29	; 0x05
   1bf04:	c4 83       	std	Z+4, r28	; 0x04
   1bf06:	87 e7       	ldi	r24, 0x77	; 119
   1bf08:	94 e4       	ldi	r25, 0x44	; 68
   1bf0a:	a0 e0       	ldi	r26, 0x00	; 0
   1bf0c:	81 83       	std	Z+1, r24	; 0x01
   1bf0e:	92 83       	std	Z+2, r25	; 0x02
   1bf10:	a3 83       	std	Z+3, r26	; 0x03
   1bf12:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1bf16:	bd c0       	rjmp	.+378    	; 0x1c092 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1bf18:	96 01       	movw	r18, r12
   1bf1a:	ae 01       	movw	r20, r28
   1bf1c:	4c 5f       	subi	r20, 0xFC	; 252
   1bf1e:	5f 4f       	sbci	r21, 0xFF	; 255
   1bf20:	68 e9       	ldi	r22, 0x98	; 152
   1bf22:	76 e1       	ldi	r23, 0x16	; 22
   1bf24:	c7 01       	movw	r24, r14
   1bf26:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   1bf2a:	89 2b       	or	r24, r25
   1bf2c:	c1 f0       	breq	.+48     	; 0x1bf5e <lif_tests+0x1fe>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1bf2e:	cc 0f       	add	r28, r28
   1bf30:	dd 1f       	adc	r29, r29
   1bf32:	c0 0f       	add	r28, r16
   1bf34:	d1 1f       	adc	r29, r17
   1bf36:	8c 81       	ldd	r24, Y+4	; 0x04
   1bf38:	9d 81       	ldd	r25, Y+5	; 0x05
   1bf3a:	0e 94 80 47 	call	0x8f00	; 0x8f00 <atol>
   1bf3e:	4b 01       	movw	r8, r22
   1bf40:	5c 01       	movw	r10, r24
   1bf42:	8e 81       	ldd	r24, Y+6	; 0x06
   1bf44:	9f 81       	ldd	r25, Y+7	; 0x07
   1bf46:	0e 94 80 47 	call	0x8f00	; 0x8f00 <atol>
   1bf4a:	7b 01       	movw	r14, r22
   1bf4c:	8c 01       	movw	r16, r24
   1bf4e:	6a 81       	ldd	r22, Y+2	; 0x02
   1bf50:	7b 81       	ldd	r23, Y+3	; 0x03
   1bf52:	a5 01       	movw	r20, r10
   1bf54:	94 01       	movw	r18, r8
   1bf56:	88 81       	ld	r24, Y
   1bf58:	99 81       	ldd	r25, Y+1	; 0x01
   1bf5a:	7b de       	rcall	.-778    	; 0x1bc52 <lif_create_image>
   1bf5c:	9a c0       	rjmp	.+308    	; 0x1c092 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1bf5e:	96 01       	movw	r18, r12
   1bf60:	ae 01       	movw	r20, r28
   1bf62:	4e 5f       	subi	r20, 0xFE	; 254
   1bf64:	5f 4f       	sbci	r21, 0xFF	; 255
   1bf66:	6f e9       	ldi	r22, 0x9F	; 159
   1bf68:	76 e1       	ldi	r23, 0x16	; 22
   1bf6a:	c7 01       	movw	r24, r14
   1bf6c:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   1bf70:	89 2b       	or	r24, r25
   1bf72:	51 f0       	breq	.+20     	; 0x1bf88 <lif_tests+0x228>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1bf74:	cc 0f       	add	r28, r28
   1bf76:	dd 1f       	adc	r29, r29
   1bf78:	c0 0f       	add	r28, r16
   1bf7a:	d1 1f       	adc	r29, r17
   1bf7c:	6a 81       	ldd	r22, Y+2	; 0x02
   1bf7e:	7b 81       	ldd	r23, Y+3	; 0x03
   1bf80:	88 81       	ld	r24, Y
   1bf82:	99 81       	ldd	r25, Y+1	; 0x01
   1bf84:	51 dd       	rcall	.-1374   	; 0x1ba28 <lif_del_file>
   1bf86:	85 c0       	rjmp	.+266    	; 0x1c092 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1bf88:	96 01       	movw	r18, r12
   1bf8a:	ae 01       	movw	r20, r28
   1bf8c:	4f 5f       	subi	r20, 0xFF	; 255
   1bf8e:	5f 4f       	sbci	r21, 0xFF	; 255
   1bf90:	68 ed       	ldi	r22, 0xD8	; 216
   1bf92:	7b e0       	ldi	r23, 0x0B	; 11
   1bf94:	c7 01       	movw	r24, r14
   1bf96:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   1bf9a:	89 2b       	or	r24, r25
   1bf9c:	49 f0       	breq	.+18     	; 0x1bfb0 <lif_tests+0x250>
    {
        lif_dir(argv[ind]);
   1bf9e:	cc 0f       	add	r28, r28
   1bfa0:	dd 1f       	adc	r29, r29
   1bfa2:	c0 0f       	add	r28, r16
   1bfa4:	d1 1f       	adc	r29, r17
   1bfa6:	88 81       	ld	r24, Y
   1bfa8:	99 81       	ldd	r25, Y+1	; 0x01
   1bfaa:	0e 94 12 d2 	call	0x1a424	; 0x1a424 <lif_dir>
   1bfae:	71 c0       	rjmp	.+226    	; 0x1c092 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1bfb0:	96 01       	movw	r18, r12
   1bfb2:	a5 01       	movw	r20, r10
   1bfb4:	63 ea       	ldi	r22, 0xA3	; 163
   1bfb6:	76 e1       	ldi	r23, 0x16	; 22
   1bfb8:	c7 01       	movw	r24, r14
   1bfba:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   1bfbe:	89 2b       	or	r24, r25
   1bfc0:	71 f0       	breq	.+28     	; 0x1bfde <lif_tests+0x27e>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1bfc2:	ce 01       	movw	r24, r28
   1bfc4:	88 0f       	add	r24, r24
   1bfc6:	99 1f       	adc	r25, r25
   1bfc8:	e8 01       	movw	r28, r16
   1bfca:	c8 0f       	add	r28, r24
   1bfcc:	d9 1f       	adc	r29, r25
   1bfce:	4c 81       	ldd	r20, Y+4	; 0x04
   1bfd0:	5d 81       	ldd	r21, Y+5	; 0x05
   1bfd2:	6a 81       	ldd	r22, Y+2	; 0x02
   1bfd4:	7b 81       	ldd	r23, Y+3	; 0x03
   1bfd6:	88 81       	ld	r24, Y
   1bfd8:	99 81       	ldd	r25, Y+1	; 0x01
   1bfda:	65 da       	rcall	.-2870   	; 0x1b4a6 <lif_extract_lif_as_lif>
   1bfdc:	5a c0       	rjmp	.+180    	; 0x1c092 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1bfde:	96 01       	movw	r18, r12
   1bfe0:	a5 01       	movw	r20, r10
   1bfe2:	6e ea       	ldi	r22, 0xAE	; 174
   1bfe4:	76 e1       	ldi	r23, 0x16	; 22
   1bfe6:	c7 01       	movw	r24, r14
   1bfe8:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   1bfec:	89 2b       	or	r24, r25
   1bfee:	79 f0       	breq	.+30     	; 0x1c00e <lif_tests+0x2ae>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1bff0:	ce 01       	movw	r24, r28
   1bff2:	88 0f       	add	r24, r24
   1bff4:	99 1f       	adc	r25, r25
   1bff6:	e8 01       	movw	r28, r16
   1bff8:	c8 0f       	add	r28, r24
   1bffa:	d9 1f       	adc	r29, r25
   1bffc:	4c 81       	ldd	r20, Y+4	; 0x04
   1bffe:	5d 81       	ldd	r21, Y+5	; 0x05
   1c000:	6a 81       	ldd	r22, Y+2	; 0x02
   1c002:	7b 81       	ldd	r23, Y+3	; 0x03
   1c004:	88 81       	ld	r24, Y
   1c006:	99 81       	ldd	r25, Y+1	; 0x01
   1c008:	0e 94 a4 d7 	call	0x1af48	; 0x1af48 <lif_extract_e010_as_ascii>
   1c00c:	42 c0       	rjmp	.+132    	; 0x1c092 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c00e:	96 01       	movw	r18, r12
   1c010:	a5 01       	movw	r20, r10
   1c012:	65 ee       	ldi	r22, 0xE5	; 229
   1c014:	7b e0       	ldi	r23, 0x0B	; 11
   1c016:	c7 01       	movw	r24, r14
   1c018:	0e 94 41 32 	call	0x6482	; 0x6482 <MATCHARGS>
   1c01c:	89 2b       	or	r24, r25
   1c01e:	71 f0       	breq	.+28     	; 0x1c03c <lif_tests+0x2dc>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c020:	ce 01       	movw	r24, r28
   1c022:	88 0f       	add	r24, r24
   1c024:	99 1f       	adc	r25, r25
   1c026:	e8 01       	movw	r28, r16
   1c028:	c8 0f       	add	r28, r24
   1c02a:	d9 1f       	adc	r29, r25
   1c02c:	4c 81       	ldd	r20, Y+4	; 0x04
   1c02e:	5d 81       	ldd	r21, Y+5	; 0x05
   1c030:	6a 81       	ldd	r22, Y+2	; 0x02
   1c032:	7b 81       	ldd	r23, Y+3	; 0x03
   1c034:	88 81       	ld	r24, Y
   1c036:	99 81       	ldd	r25, Y+1	; 0x01
   1c038:	8d dd       	rcall	.-1254   	; 0x1bb54 <lif_rename_file>
   1c03a:	2b c0       	rjmp	.+86     	; 0x1c092 <lif_tests+0x332>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
   1c03c:	66 eb       	ldi	r22, 0xB6	; 182
   1c03e:	76 e1       	ldi	r23, 0x16	; 22
   1c040:	f8 01       	movw	r30, r16
   1c042:	80 81       	ld	r24, Z
   1c044:	91 81       	ldd	r25, Z+1	; 0x01
   1c046:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCHI_LEN>
   1c04a:	89 2b       	or	r24, r25
   1c04c:	09 f4       	brne	.+2      	; 0x1c050 <lif_tests+0x2f0>
   1c04e:	91 ce       	rjmp	.-734    	; 0x1bd72 <lif_tests+0x12>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c050:	64 e7       	ldi	r22, 0x74	; 116
   1c052:	76 e1       	ldi	r23, 0x16	; 22
   1c054:	c7 01       	movw	r24, r14
   1c056:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1c05a:	89 2b       	or	r24, r25
   1c05c:	59 f0       	breq	.+22     	; 0x1c074 <lif_tests+0x314>
		{
#ifdef TELEDISK
			td0_help(1);
			return(1);
#else
		    printf("td02lif support not enabled\n");
   1c05e:	8a e5       	ldi	r24, 0x5A	; 90
   1c060:	94 e4       	ldi	r25, 0x44	; 68
   1c062:	a0 e0       	ldi	r26, 0x00	; 0
   1c064:	ed b7       	in	r30, 0x3d	; 61
   1c066:	fe b7       	in	r31, 0x3e	; 62
   1c068:	81 83       	std	Z+1, r24	; 0x01
   1c06a:	92 83       	std	Z+2, r25	; 0x02
   1c06c:	a3 83       	std	Z+3, r26	; 0x03
   1c06e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1c072:	0f c0       	rjmp	.+30     	; 0x1c092 <lif_tests+0x332>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c074:	63 e7       	ldi	r22, 0x73	; 115
   1c076:	76 e1       	ldi	r23, 0x16	; 22
   1c078:	c7 01       	movw	r24, r14
   1c07a:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1c07e:	89 2b       	or	r24, r25
   1c080:	71 f7       	brne	.-36     	; 0x1c05e <lif_tests+0x2fe>
   1c082:	69 e7       	ldi	r22, 0x79	; 121
   1c084:	76 e1       	ldi	r23, 0x16	; 22
   1c086:	c7 01       	movw	r24, r14
   1c088:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1c08c:	89 2b       	or	r24, r25
   1c08e:	39 f7       	brne	.-50     	; 0x1c05e <lif_tests+0x2fe>
   1c090:	70 ce       	rjmp	.-800    	; 0x1bd72 <lif_tests+0x12>

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);
   1c092:	81 e0       	ldi	r24, 0x01	; 1
   1c094:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
#endif
    }
    return(0);
}
   1c096:	cd b7       	in	r28, 0x3d	; 61
   1c098:	de b7       	in	r29, 0x3e	; 62
   1c09a:	25 96       	adiw	r28, 0x05	; 5
   1c09c:	ec e0       	ldi	r30, 0x0C	; 12
   1c09e:	85 c6       	rjmp	.+3338   	; 0x1cdaa <__epilogue_restores__+0xc>

0001c0a0 <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1c0a0:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <lcd_display_time>
   1c0a4:	90 91 f3 19 	lds	r25, 0x19F3	; 0x8019f3 <lcd_display_time+0x1>
   1c0a8:	01 96       	adiw	r24, 0x01	; 1
   1c0aa:	90 93 f3 19 	sts	0x19F3, r25	; 0x8019f3 <lcd_display_time+0x1>
   1c0ae:	80 93 f2 19 	sts	0x19F2, r24	; 0x8019f2 <lcd_display_time>
   1c0b2:	08 95       	ret

0001c0b4 <copyright>:
int8_t debug_input = 0;

///@brief Display Copyright
///@return void
void copyright()
{
   1c0b4:	00 d0       	rcall	.+0      	; 0x1c0b6 <copyright+0x2>
   1c0b6:	00 d0       	rcall	.+0      	; 0x1c0b8 <copyright+0x4>
   1c0b8:	1f 92       	push	r1
    printf("HP85 Disk and Device Emulator with built in LIF utilities\n");
   1c0ba:	86 e5       	ldi	r24, 0x56	; 86
   1c0bc:	9b e4       	ldi	r25, 0x4B	; 75
   1c0be:	a0 e0       	ldi	r26, 0x00	; 0
   1c0c0:	ed b7       	in	r30, 0x3d	; 61
   1c0c2:	fe b7       	in	r31, 0x3e	; 62
   1c0c4:	81 83       	std	Z+1, r24	; 0x01
   1c0c6:	92 83       	std	Z+2, r25	; 0x02
   1c0c8:	a3 83       	std	Z+3, r26	; 0x03
   1c0ca:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c0ce:	89 e3       	ldi	r24, 0x39	; 57
   1c0d0:	9b e4       	ldi	r25, 0x4B	; 75
   1c0d2:	a0 e0       	ldi	r26, 0x00	; 0
   1c0d4:	ed b7       	in	r30, 0x3d	; 61
   1c0d6:	fe b7       	in	r31, 0x3e	; 62
   1c0d8:	81 83       	std	Z+1, r24	; 0x01
   1c0da:	92 83       	std	Z+2, r25	; 0x02
   1c0dc:	a3 83       	std	Z+3, r26	; 0x03
   1c0de:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf(" GNU version 3\n");
   1c0e2:	89 e2       	ldi	r24, 0x29	; 41
   1c0e4:	9b e4       	ldi	r25, 0x4B	; 75
   1c0e6:	a0 e0       	ldi	r26, 0x00	; 0
   1c0e8:	ed b7       	in	r30, 0x3d	; 61
   1c0ea:	fe b7       	in	r31, 0x3e	; 62
   1c0ec:	81 83       	std	Z+1, r24	; 0x01
   1c0ee:	92 83       	std	Z+2, r25	; 0x02
   1c0f0:	a3 83       	std	Z+3, r26	; 0x03
   1c0f2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c0f6:	82 e0       	ldi	r24, 0x02	; 2
   1c0f8:	9b e4       	ldi	r25, 0x4B	; 75
   1c0fa:	a0 e0       	ldi	r26, 0x00	; 0
   1c0fc:	ed b7       	in	r30, 0x3d	; 61
   1c0fe:	fe b7       	in	r31, 0x3e	; 62
   1c100:	81 83       	std	Z+1, r24	; 0x01
   1c102:	92 83       	std	Z+2, r25	; 0x02
   1c104:	a3 83       	std	Z+3, r26	; 0x03
   1c106:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c10a:	8e eb       	ldi	r24, 0xBE	; 190
   1c10c:	96 e1       	ldi	r25, 0x16	; 22
   1c10e:	ed b7       	in	r30, 0x3d	; 61
   1c110:	fe b7       	in	r31, 0x3e	; 62
   1c112:	95 83       	std	Z+5, r25	; 0x05
   1c114:	84 83       	std	Z+4, r24	; 0x04
   1c116:	88 ee       	ldi	r24, 0xE8	; 232
   1c118:	9a e4       	ldi	r25, 0x4A	; 74
   1c11a:	a0 e0       	ldi	r26, 0x00	; 0
   1c11c:	81 83       	std	Z+1, r24	; 0x01
   1c11e:	92 83       	std	Z+2, r25	; 0x02
   1c120:	a3 83       	std	Z+3, r26	; 0x03
   1c122:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c126:	82 ee       	ldi	r24, 0xE2	; 226
   1c128:	96 e1       	ldi	r25, 0x16	; 22
   1c12a:	ed b7       	in	r30, 0x3d	; 61
   1c12c:	fe b7       	in	r31, 0x3e	; 62
   1c12e:	95 83       	std	Z+5, r25	; 0x05
   1c130:	84 83       	std	Z+4, r24	; 0x04
   1c132:	8e ec       	ldi	r24, 0xCE	; 206
   1c134:	9a e4       	ldi	r25, 0x4A	; 74
   1c136:	a0 e0       	ldi	r26, 0x00	; 0
   1c138:	81 83       	std	Z+1, r24	; 0x01
   1c13a:	92 83       	std	Z+2, r25	; 0x02
   1c13c:	a3 83       	std	Z+3, r26	; 0x03
   1c13e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("\n");
   1c142:	8c ec       	ldi	r24, 0xCC	; 204
   1c144:	9a e4       	ldi	r25, 0x4A	; 74
   1c146:	a0 e0       	ldi	r26, 0x00	; 0
   1c148:	ed b7       	in	r30, 0x3d	; 61
   1c14a:	fe b7       	in	r31, 0x3e	; 62
   1c14c:	81 83       	std	Z+1, r24	; 0x01
   1c14e:	92 83       	std	Z+2, r25	; 0x02
   1c150:	a3 83       	std	Z+3, r26	; 0x03
   1c152:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
}
   1c156:	0f 90       	pop	r0
   1c158:	0f 90       	pop	r0
   1c15a:	0f 90       	pop	r0
   1c15c:	0f 90       	pop	r0
   1c15e:	0f 90       	pop	r0
   1c160:	08 95       	ret

0001c162 <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1c162:	a1 e1       	ldi	r26, 0x11	; 17
   1c164:	b0 e0       	ldi	r27, 0x00	; 0
   1c166:	e6 eb       	ldi	r30, 0xB6	; 182
   1c168:	f0 ee       	ldi	r31, 0xE0	; 224
   1c16a:	09 c6       	rjmp	.+3090   	; 0x1cd7e <__prologue_saves__+0x18>
   1c16c:	ec 01       	movw	r28, r24
   1c16e:	7b 01       	movw	r14, r22
   1c170:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1c172:	60 e0       	ldi	r22, 0x00	; 0
   1c174:	70 e0       	ldi	r23, 0x00	; 0
   1c176:	0e 94 7f 38 	call	0x70fe	; 0x70fe <normalize>
    memset(buf,0,max);
   1c17a:	a8 01       	movw	r20, r16
   1c17c:	60 e0       	ldi	r22, 0x00	; 0
   1c17e:	70 e0       	ldi	r23, 0x00	; 0
   1c180:	c7 01       	movw	r24, r14
   1c182:	0e 94 ab ea 	call	0x1d556	; 0x1d556 <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1c186:	88 85       	ldd	r24, Y+8	; 0x08
   1c188:	99 85       	ldd	r25, Y+9	; 0x09
   1c18a:	0e 94 64 36 	call	0x6cc8	; 0x6cc8 <tm_mon_to_ascii>
   1c18e:	28 81       	ld	r18, Y
   1c190:	39 81       	ldd	r19, Y+1	; 0x01
   1c192:	ed b7       	in	r30, 0x3d	; 61
   1c194:	fe b7       	in	r31, 0x3e	; 62
   1c196:	31 8b       	std	Z+17, r19	; 0x11
   1c198:	20 8b       	std	Z+16, r18	; 0x10
   1c19a:	2a 81       	ldd	r18, Y+2	; 0x02
   1c19c:	3b 81       	ldd	r19, Y+3	; 0x03
   1c19e:	37 87       	std	Z+15, r19	; 0x0f
   1c1a0:	26 87       	std	Z+14, r18	; 0x0e
   1c1a2:	2c 81       	ldd	r18, Y+4	; 0x04
   1c1a4:	3d 81       	ldd	r19, Y+5	; 0x05
   1c1a6:	35 87       	std	Z+13, r19	; 0x0d
   1c1a8:	24 87       	std	Z+12, r18	; 0x0c
   1c1aa:	2e 81       	ldd	r18, Y+6	; 0x06
   1c1ac:	3f 81       	ldd	r19, Y+7	; 0x07
   1c1ae:	33 87       	std	Z+11, r19	; 0x0b
   1c1b0:	22 87       	std	Z+10, r18	; 0x0a
   1c1b2:	91 87       	std	Z+9, r25	; 0x09
   1c1b4:	80 87       	std	Z+8, r24	; 0x08
   1c1b6:	86 eb       	ldi	r24, 0xB6	; 182
   1c1b8:	9a e4       	ldi	r25, 0x4A	; 74
   1c1ba:	a0 e0       	ldi	r26, 0x00	; 0
   1c1bc:	85 83       	std	Z+5, r24	; 0x05
   1c1be:	96 83       	std	Z+6, r25	; 0x06
   1c1c0:	a7 83       	std	Z+7, r26	; 0x07
   1c1c2:	01 50       	subi	r16, 0x01	; 1
   1c1c4:	11 09       	sbc	r17, r1
   1c1c6:	14 83       	std	Z+4, r17	; 0x04
   1c1c8:	03 83       	std	Z+3, r16	; 0x03
   1c1ca:	f2 82       	std	Z+2, r15	; 0x02
   1c1cc:	e1 82       	std	Z+1, r14	; 0x01
   1c1ce:	0e 94 b8 46 	call	0x8d70	; 0x8d70 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1c1d2:	c7 01       	movw	r24, r14
   1c1d4:	cd b7       	in	r28, 0x3d	; 61
   1c1d6:	de b7       	in	r29, 0x3e	; 62
   1c1d8:	61 96       	adiw	r28, 0x11	; 17
   1c1da:	e6 e0       	ldi	r30, 0x06	; 6
   1c1dc:	ec c5       	rjmp	.+3032   	; 0x1cdb6 <__epilogue_restores__+0x18>

0001c1de <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1c1de:	cf 93       	push	r28
   1c1e0:	00 d0       	rcall	.+0      	; 0x1c1e2 <lcd_backlight+0x4>
   1c1e2:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1c1e4:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1c1e8:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1c1ec:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1c1f0:	25 e0       	ldi	r18, 0x05	; 5
   1c1f2:	40 ef       	ldi	r20, 0xF0	; 240
   1c1f4:	52 e0       	ldi	r21, 0x02	; 2
   1c1f6:	60 e0       	ldi	r22, 0x00	; 0
   1c1f8:	82 e7       	ldi	r24, 0x72	; 114
   1c1fa:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <i2c_fn>
   1c1fe:	c8 2f       	mov	r28, r24
   1c200:	81 11       	cpse	r24, r1
   1c202:	0d c0       	rjmp	.+26     	; 0x1c21e <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1c204:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c208:	8c e9       	ldi	r24, 0x9C	; 156
   1c20a:	9a e4       	ldi	r25, 0x4A	; 74
   1c20c:	a0 e0       	ldi	r26, 0x00	; 0
   1c20e:	ed b7       	in	r30, 0x3d	; 61
   1c210:	fe b7       	in	r31, 0x3e	; 62
   1c212:	81 83       	std	Z+1, r24	; 0x01
   1c214:	92 83       	std	Z+2, r25	; 0x02
   1c216:	a3 83       	std	Z+3, r26	; 0x03
   1c218:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1c21c:	01 c0       	rjmp	.+2      	; 0x1c220 <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1c21e:	c1 e0       	ldi	r28, 0x01	; 1
}
   1c220:	8c 2f       	mov	r24, r28
   1c222:	0f 90       	pop	r0
   1c224:	0f 90       	pop	r0
   1c226:	0f 90       	pop	r0
   1c228:	cf 91       	pop	r28
   1c22a:	08 95       	ret

0001c22c <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1c22c:	cf 93       	push	r28
   1c22e:	ad b7       	in	r26, 0x3d	; 61
   1c230:	be b7       	in	r27, 0x3e	; 62
   1c232:	17 97       	sbiw	r26, 0x07	; 7
   1c234:	0f b6       	in	r0, 0x3f	; 63
   1c236:	f8 94       	cli
   1c238:	be bf       	out	0x3e, r27	; 62
   1c23a:	0f be       	out	0x3f, r0	; 63
   1c23c:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1c23e:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1c240:	8e e7       	ldi	r24, 0x7E	; 126
   1c242:	9a e4       	ldi	r25, 0x4A	; 74
   1c244:	a0 e0       	ldi	r26, 0x00	; 0
   1c246:	ed b7       	in	r30, 0x3d	; 61
   1c248:	fe b7       	in	r31, 0x3e	; 62
   1c24a:	81 83       	std	Z+1, r24	; 0x01
   1c24c:	92 83       	std	Z+2, r25	; 0x02
   1c24e:	a3 83       	std	Z+3, r26	; 0x03
   1c250:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1c254:	61 e0       	ldi	r22, 0x01	; 1
   1c256:	70 e0       	ldi	r23, 0x00	; 0
   1c258:	80 e5       	ldi	r24, 0x50	; 80
   1c25a:	90 ee       	ldi	r25, 0xE0	; 224
   1c25c:	0e 94 8e 34 	call	0x691c	; 0x691c <set_timers>
   1c260:	01 96       	adiw	r24, 0x01	; 1
   1c262:	51 f4       	brne	.+20     	; 0x1c278 <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1c264:	88 e6       	ldi	r24, 0x68	; 104
   1c266:	9a e4       	ldi	r25, 0x4A	; 74
   1c268:	a0 e0       	ldi	r26, 0x00	; 0
   1c26a:	ed b7       	in	r30, 0x3d	; 61
   1c26c:	fe b7       	in	r31, 0x3e	; 62
   1c26e:	81 83       	std	Z+1, r24	; 0x01
   1c270:	92 83       	std	Z+2, r25	; 0x02
   1c272:	a3 83       	std	Z+3, r26	; 0x03
   1c274:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

	i2c_init(100000);
   1c278:	60 ea       	ldi	r22, 0xA0	; 160
   1c27a:	76 e8       	ldi	r23, 0x86	; 134
   1c27c:	81 e0       	ldi	r24, 0x01	; 1
   1c27e:	90 e0       	ldi	r25, 0x00	; 0
   1c280:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <i2c_init>

	i2c_task_init();
   1c284:	0e 94 bf 2b 	call	0x577e	; 0x577e <i2c_task_init>

	cli();
   1c288:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1c28a:	86 e0       	ldi	r24, 0x06	; 6
   1c28c:	97 e1       	ldi	r25, 0x17	; 23
   1c28e:	ed b7       	in	r30, 0x3d	; 61
   1c290:	fe b7       	in	r31, 0x3e	; 62
   1c292:	97 83       	std	Z+7, r25	; 0x07
   1c294:	86 83       	std	Z+6, r24	; 0x06
   1c296:	82 e6       	ldi	r24, 0x62	; 98
   1c298:	9a e4       	ldi	r25, 0x4A	; 74
   1c29a:	a0 e0       	ldi	r26, 0x00	; 0
   1c29c:	83 83       	std	Z+3, r24	; 0x03
   1c29e:	94 83       	std	Z+4, r25	; 0x04
   1c2a0:	a5 83       	std	Z+5, r26	; 0x05
   1c2a2:	8c e0       	ldi	r24, 0x0C	; 12
   1c2a4:	93 e0       	ldi	r25, 0x03	; 3
   1c2a6:	92 83       	std	Z+2, r25	; 0x02
   1c2a8:	81 83       	std	Z+1, r24	; 0x01
   1c2aa:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c2ae:	82 e1       	ldi	r24, 0x12	; 18
   1c2b0:	97 e1       	ldi	r25, 0x17	; 23
   1c2b2:	ed b7       	in	r30, 0x3d	; 61
   1c2b4:	fe b7       	in	r31, 0x3e	; 62
   1c2b6:	97 83       	std	Z+7, r25	; 0x07
   1c2b8:	86 83       	std	Z+6, r24	; 0x06
   1c2ba:	8c e5       	ldi	r24, 0x5C	; 92
   1c2bc:	9a e4       	ldi	r25, 0x4A	; 74
   1c2be:	a0 e0       	ldi	r26, 0x00	; 0
   1c2c0:	83 83       	std	Z+3, r24	; 0x03
   1c2c2:	94 83       	std	Z+4, r25	; 0x04
   1c2c4:	a5 83       	std	Z+5, r26	; 0x05
   1c2c6:	85 ef       	ldi	r24, 0xF5	; 245
   1c2c8:	92 e0       	ldi	r25, 0x02	; 2
   1c2ca:	92 83       	std	Z+2, r25	; 0x02
   1c2cc:	81 83       	std	Z+1, r24	; 0x01
   1c2ce:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1c2d2:	22 e0       	ldi	r18, 0x02	; 2
   1c2d4:	41 e2       	ldi	r20, 0x21	; 33
   1c2d6:	53 e0       	ldi	r21, 0x03	; 3
   1c2d8:	60 e0       	ldi	r22, 0x00	; 0
   1c2da:	82 e7       	ldi	r24, 0x72	; 114
   1c2dc:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <i2c_task_op_add>
   1c2e0:	90 93 5f 17 	sts	0x175F, r25	; 0x80175f <i2c_task_op+0x1>
   1c2e4:	80 93 5e 17 	sts	0x175E, r24	; 0x80175e <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1c2e8:	20 e1       	ldi	r18, 0x10	; 16
   1c2ea:	4c e0       	ldi	r20, 0x0C	; 12
   1c2ec:	53 e0       	ldi	r21, 0x03	; 3
   1c2ee:	60 e0       	ldi	r22, 0x00	; 0
   1c2f0:	82 e7       	ldi	r24, 0x72	; 114
   1c2f2:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <i2c_task_op_add>
   1c2f6:	90 93 61 17 	sts	0x1761, r25	; 0x801761 <i2c_task_op+0x3>
   1c2fa:	80 93 60 17 	sts	0x1760, r24	; 0x801760 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1c2fe:	22 e0       	ldi	r18, 0x02	; 2
   1c300:	4a e0       	ldi	r20, 0x0A	; 10
   1c302:	53 e0       	ldi	r21, 0x03	; 3
   1c304:	60 e0       	ldi	r22, 0x00	; 0
   1c306:	82 e7       	ldi	r24, 0x72	; 114
   1c308:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <i2c_task_op_add>
   1c30c:	90 93 63 17 	sts	0x1763, r25	; 0x801763 <i2c_task_op+0x5>
   1c310:	80 93 62 17 	sts	0x1762, r24	; 0x801762 <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1c314:	20 e1       	ldi	r18, 0x10	; 16
   1c316:	45 ef       	ldi	r20, 0xF5	; 245
   1c318:	52 e0       	ldi	r21, 0x02	; 2
   1c31a:	60 e0       	ldi	r22, 0x00	; 0
   1c31c:	82 e7       	ldi	r24, 0x72	; 114
   1c31e:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <i2c_task_op_add>
   1c322:	90 93 65 17 	sts	0x1765, r25	; 0x801765 <i2c_task_op+0x7>
   1c326:	80 93 64 17 	sts	0x1764, r24	; 0x801764 <i2c_task_op+0x6>

	SREG = sreg;
   1c32a:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1c32c:	0e 94 94 2c 	call	0x5928	; 0x5928 <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1c330:	68 ee       	ldi	r22, 0xE8	; 232
   1c332:	73 e0       	ldi	r23, 0x03	; 3
   1c334:	80 e0       	ldi	r24, 0x00	; 0
   1c336:	90 e0       	ldi	r25, 0x00	; 0
   1c338:	0e 94 3a 28 	call	0x5074	; 0x5074 <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1c33c:	0e 94 75 2c 	call	0x58ea	; 0x58ea <i2c_task_done>
   1c340:	81 11       	cpse	r24, r1
   1c342:	0c c0       	rjmp	.+24     	; 0x1c35c <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1c344:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c348:	82 e4       	ldi	r24, 0x42	; 66
   1c34a:	9a e4       	ldi	r25, 0x4A	; 74
   1c34c:	a0 e0       	ldi	r26, 0x00	; 0
   1c34e:	ed b7       	in	r30, 0x3d	; 61
   1c350:	fe b7       	in	r31, 0x3e	; 62
   1c352:	81 83       	std	Z+1, r24	; 0x01
   1c354:	92 83       	std	Z+2, r25	; 0x02
   1c356:	a3 83       	std	Z+3, r26	; 0x03
   1c358:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
	}

    sep();
   1c35c:	0e 94 ef 31 	call	0x63de	; 0x63de <sep>
}
   1c360:	ad b7       	in	r26, 0x3d	; 61
   1c362:	be b7       	in	r27, 0x3e	; 62
   1c364:	17 96       	adiw	r26, 0x07	; 7
   1c366:	0f b6       	in	r0, 0x3f	; 63
   1c368:	f8 94       	cli
   1c36a:	be bf       	out	0x3e, r27	; 62
   1c36c:	0f be       	out	0x3f, r0	; 63
   1c36e:	ad bf       	out	0x3d, r26	; 61
   1c370:	cf 91       	pop	r28
   1c372:	08 95       	ret

0001c374 <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1c374:	af e2       	ldi	r26, 0x2F	; 47
   1c376:	b0 e0       	ldi	r27, 0x00	; 0
   1c378:	ef eb       	ldi	r30, 0xBF	; 191
   1c37a:	f1 ee       	ldi	r31, 0xE1	; 225
   1c37c:	03 c5       	rjmp	.+2566   	; 0x1cd84 <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1c37e:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1c380:	f8 94       	cli
	if(!mmc_ins_status())
   1c382:	0e 94 ce 6e 	call	0xdd9c	; 0xdd9c <mmc_ins_status>
   1c386:	89 2b       	or	r24, r25
   1c388:	49 f4       	brne	.+18     	; 0x1c39c <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1c38a:	8f e1       	ldi	r24, 0x1F	; 31
   1c38c:	97 e1       	ldi	r25, 0x17	; 23
   1c38e:	ed b7       	in	r30, 0x3d	; 61
   1c390:	fe b7       	in	r31, 0x3e	; 62
   1c392:	97 83       	std	Z+7, r25	; 0x07
   1c394:	86 83       	std	Z+6, r24	; 0x06
   1c396:	8c e3       	ldi	r24, 0x3C	; 60
   1c398:	9a e4       	ldi	r25, 0x4A	; 74
   1c39a:	17 c0       	rjmp	.+46     	; 0x1c3ca <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1c39c:	be 01       	movw	r22, r28
   1c39e:	68 5d       	subi	r22, 0xD8	; 216
   1c3a0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c3a2:	80 e0       	ldi	r24, 0x00	; 0
   1c3a4:	90 e0       	ldi	r25, 0x00	; 0
   1c3a6:	0e 94 9e 33 	call	0x673c	; 0x673c <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1c3aa:	ce 01       	movw	r24, r28
   1c3ac:	88 96       	adiw	r24, 0x28	; 40
   1c3ae:	0e 94 88 37 	call	0x6f10	; 0x6f10 <gmtime>
   1c3b2:	4f e1       	ldi	r20, 0x1F	; 31
   1c3b4:	50 e0       	ldi	r21, 0x00	; 0
   1c3b6:	be 01       	movw	r22, r28
   1c3b8:	68 5f       	subi	r22, 0xF8	; 248
   1c3ba:	7f 4f       	sbci	r23, 0xFF	; 255
   1c3bc:	d2 de       	rcall	.-604    	; 0x1c162 <lcd_time>
   1c3be:	ed b7       	in	r30, 0x3d	; 61
   1c3c0:	fe b7       	in	r31, 0x3e	; 62
   1c3c2:	97 83       	std	Z+7, r25	; 0x07
   1c3c4:	86 83       	std	Z+6, r24	; 0x06
   1c3c6:	86 e3       	ldi	r24, 0x36	; 54
   1c3c8:	9a e4       	ldi	r25, 0x4A	; 74
   1c3ca:	a0 e0       	ldi	r26, 0x00	; 0
   1c3cc:	83 83       	std	Z+3, r24	; 0x03
   1c3ce:	94 83       	std	Z+4, r25	; 0x04
   1c3d0:	a5 83       	std	Z+5, r26	; 0x05
   1c3d2:	85 ef       	ldi	r24, 0xF5	; 245
   1c3d4:	92 e0       	ldi	r25, 0x02	; 2
   1c3d6:	92 83       	std	Z+2, r25	; 0x02
   1c3d8:	81 83       	std	Z+1, r24	; 0x01
   1c3da:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1c3de:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1c3e0:	0e 94 94 2c 	call	0x5928	; 0x5928 <i2c_task_run>
}
   1c3e4:	af 96       	adiw	r28, 0x2f	; 47
   1c3e6:	e3 e0       	ldi	r30, 0x03	; 3
   1c3e8:	e9 c4       	rjmp	.+2514   	; 0x1cdbc <__epilogue_restores__+0x1e>

0001c3ea <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1c3ea:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1c3ec:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1c3ee:	20 91 f2 19 	lds	r18, 0x19F2	; 0x8019f2 <lcd_display_time>
   1c3f2:	30 91 f3 19 	lds	r19, 0x19F3	; 0x8019f3 <lcd_display_time+0x1>
   1c3f6:	25 36       	cpi	r18, 0x65	; 101
   1c3f8:	31 05       	cpc	r19, r1
   1c3fa:	3c f0       	brlt	.+14     	; 0x1c40a <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1c3fc:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <lcd_display_time+0x1>
   1c400:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <lcd_display_time>
		SREG = sreg;
   1c404:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1c406:	b6 cf       	rjmp	.-148    	; 0x1c374 <i2c_lcd_task>
		return;
   1c408:	08 95       	ret
	}
	SREG = sreg;
   1c40a:	8f bf       	out	0x3f, r24	; 63
   1c40c:	08 95       	ret

0001c40e <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1c40e:	00 d0       	rcall	.+0      	; 0x1c410 <help+0x2>
   1c410:	1f 92       	push	r1

    copyright();
   1c412:	50 de       	rcall	.-864    	; 0x1c0b4 <copyright>

	printf("help     - displays this help menu\n");
   1c414:	82 e1       	ldi	r24, 0x12	; 18
   1c416:	9a e4       	ldi	r25, 0x4A	; 74
   1c418:	a0 e0       	ldi	r26, 0x00	; 0
   1c41a:	ed b7       	in	r30, 0x3d	; 61
   1c41c:	fe b7       	in	r31, 0x3e	; 62
   1c41e:	81 83       	std	Z+1, r24	; 0x01
   1c420:	92 83       	std	Z+2, r25	; 0x02
   1c422:	a3 83       	std	Z+3, r26	; 0x03
   1c424:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>


#ifdef FATFS_TESTS
    fatfs_help(0);
   1c428:	80 e0       	ldi	r24, 0x00	; 0
   1c42a:	90 e0       	ldi	r25, 0x00	; 0
   1c42c:	0e 94 f5 72 	call	0xe5ea	; 0xe5ea <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1c430:	80 e0       	ldi	r24, 0x00	; 0
   1c432:	90 e0       	ldi	r25, 0x00	; 0
   1c434:	0e 94 4d 7e 	call	0xfc9a	; 0xfc9a <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1c438:	80 e0       	ldi	r24, 0x00	; 0
   1c43a:	90 e0       	ldi	r25, 0x00	; 0
   1c43c:	0e 94 7a c0 	call	0x180f4	; 0x180f4 <lif_help>

#ifdef TELEDISK
    td0_help(0);
#endif

	gpib_help(0);
   1c440:	80 e0       	ldi	r24, 0x00	; 0
   1c442:	90 e0       	ldi	r25, 0x00	; 0
   1c444:	0e 94 ae 91 	call	0x1235c	; 0x1235c <gpib_help>

	drives_help(0);
   1c448:	80 e0       	ldi	r24, 0x00	; 0
   1c44a:	0e 94 d5 9b 	call	0x137aa	; 0x137aa <drives_help>

    printf(
   1c44e:	88 e5       	ldi	r24, 0x58	; 88
   1c450:	99 e4       	ldi	r25, 0x49	; 73
   1c452:	a0 e0       	ldi	r26, 0x00	; 0
   1c454:	ed b7       	in	r30, 0x3d	; 61
   1c456:	fe b7       	in	r31, 0x3e	; 62
   1c458:	81 83       	std	Z+1, r24	; 0x01
   1c45a:	92 83       	std	Z+2, r25	; 0x02
   1c45c:	a3 83       	std	Z+3, r26	; 0x03
   1c45e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        "reset   - reset emulator\n"
        "setdate - set date\n"
        "time    - display current time\n"
        "\n"
        );
}
   1c462:	0f 90       	pop	r0
   1c464:	0f 90       	pop	r0
   1c466:	0f 90       	pop	r0
   1c468:	08 95       	ret

0001c46a <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1c46a:	6f 92       	push	r6
   1c46c:	7f 92       	push	r7
   1c46e:	8f 92       	push	r8
   1c470:	cf 92       	push	r12
   1c472:	df 92       	push	r13
   1c474:	ef 92       	push	r14
   1c476:	ff 92       	push	r15
   1c478:	0f 93       	push	r16
   1c47a:	1f 93       	push	r17
   1c47c:	cf 93       	push	r28
   1c47e:	df 93       	push	r29
   1c480:	cd b7       	in	r28, 0x3d	; 61
   1c482:	de b7       	in	r29, 0x3e	; 62
   1c484:	cb 56       	subi	r28, 0x6B	; 107
   1c486:	d1 40       	sbci	r29, 0x01	; 1
   1c488:	0f b6       	in	r0, 0x3f	; 63
   1c48a:	f8 94       	cli
   1c48c:	de bf       	out	0x3e, r29	; 62
   1c48e:	0f be       	out	0x3f, r0	; 63
   1c490:	cd bf       	out	0x3d, r28	; 61
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1c492:	85 e5       	ldi	r24, 0x55	; 85
   1c494:	99 e4       	ldi	r25, 0x49	; 73
   1c496:	a0 e0       	ldi	r26, 0x00	; 0
   1c498:	ed b7       	in	r30, 0x3d	; 61
   1c49a:	fe b7       	in	r31, 0x3e	; 62
   1c49c:	81 83       	std	Z+1, r24	; 0x01
   1c49e:	92 83       	std	Z+2, r25	; 0x02
   1c4a0:	a3 83       	std	Z+3, r26	; 0x03
   1c4a2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

	memset(line,0,sizeof(line)-1);
   1c4a6:	8e 01       	movw	r16, r28
   1c4a8:	0a 5f       	subi	r16, 0xFA	; 250
   1c4aa:	1f 4f       	sbci	r17, 0xFF	; 255
   1c4ac:	8f ef       	ldi	r24, 0xFF	; 255
   1c4ae:	f8 01       	movw	r30, r16
   1c4b0:	11 92       	st	Z+, r1
   1c4b2:	8a 95       	dec	r24
   1c4b4:	e9 f7       	brne	.-6      	; 0x1c4b0 <user_task.part.1+0x46>

    fgets(line,sizeof(line)-2,stdin);
   1c4b6:	40 91 c7 1c 	lds	r20, 0x1CC7	; 0x801cc7 <__iob>
   1c4ba:	50 91 c8 1c 	lds	r21, 0x1CC8	; 0x801cc8 <__iob+0x1>
   1c4be:	6e ef       	ldi	r22, 0xFE	; 254
   1c4c0:	70 e0       	ldi	r23, 0x00	; 0
   1c4c2:	c8 01       	movw	r24, r16
   1c4c4:	0e 94 39 76 	call	0xec72	; 0xec72 <fgets>
    trim_tail(line);
   1c4c8:	c8 01       	movw	r24, r16
   1c4ca:	0e 94 ff 31 	call	0x63fe	; 0x63fe <trim_tail>
    argc = split_args(line,argv,50);
   1c4ce:	42 e3       	ldi	r20, 0x32	; 50
   1c4d0:	50 e0       	ldi	r21, 0x00	; 0
   1c4d2:	be 01       	movw	r22, r28
   1c4d4:	6a 5f       	subi	r22, 0xFA	; 250
   1c4d6:	7e 4f       	sbci	r23, 0xFE	; 254
   1c4d8:	c8 01       	movw	r24, r16
   1c4da:	0e 94 85 32 	call	0x650a	; 0x650a <split_args>
   1c4de:	6c 01       	movw	r12, r24

	if(debug_input)
   1c4e0:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <debug_input>
   1c4e4:	81 11       	cpse	r24, r1
   1c4e6:	0a c0       	rjmp	.+20     	; 0x1c4fc <user_task.part.1+0x92>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c4e8:	ca 5f       	subi	r28, 0xFA	; 250
   1c4ea:	de 4f       	sbci	r29, 0xFE	; 254
   1c4ec:	e8 80       	ld	r14, Y
   1c4ee:	f9 80       	ldd	r15, Y+1	; 0x01
   1c4f0:	c6 50       	subi	r28, 0x06	; 6
   1c4f2:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1c4f4:	e1 14       	cp	r14, r1
   1c4f6:	f1 04       	cpc	r15, r1
   1c4f8:	51 f5       	brne	.+84     	; 0x1c54e <user_task.part.1+0xe4>
   1c4fa:	b7 c0       	rjmp	.+366    	; 0x1c66a <user_task.part.1+0x200>
    trim_tail(line);
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
   1c4fc:	ed b7       	in	r30, 0x3d	; 61
   1c4fe:	fe b7       	in	r31, 0x3e	; 62
   1c500:	d5 82       	std	Z+5, r13	; 0x05
   1c502:	c4 82       	std	Z+4, r12	; 0x04
   1c504:	80 e4       	ldi	r24, 0x40	; 64
   1c506:	99 e4       	ldi	r25, 0x49	; 73
   1c508:	a0 e0       	ldi	r26, 0x00	; 0
   1c50a:	81 83       	std	Z+1, r24	; 0x01
   1c50c:	92 83       	std	Z+2, r25	; 0x02
   1c50e:	a3 83       	std	Z+3, r26	; 0x03
   1c510:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1c514:	ce 01       	movw	r24, r28
   1c516:	8a 5f       	subi	r24, 0xFA	; 250
   1c518:	9e 4f       	sbci	r25, 0xFE	; 254
   1c51a:	7c 01       	movw	r14, r24
		for(i=0;i<argc;++i)
   1c51c:	00 e0       	ldi	r16, 0x00	; 0
   1c51e:	10 e0       	ldi	r17, 0x00	; 0
			printf("   [%s]\n", argv[i]);
   1c520:	87 e3       	ldi	r24, 0x37	; 55
   1c522:	99 e4       	ldi	r25, 0x49	; 73
   1c524:	3c 01       	movw	r6, r24
   1c526:	81 2c       	mov	r8, r1
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c528:	0c 15       	cp	r16, r12
   1c52a:	1d 05       	cpc	r17, r13
   1c52c:	ec f6       	brge	.-70     	; 0x1c4e8 <user_task.part.1+0x7e>
			printf("   [%s]\n", argv[i]);
   1c52e:	f7 01       	movw	r30, r14
   1c530:	81 91       	ld	r24, Z+
   1c532:	91 91       	ld	r25, Z+
   1c534:	7f 01       	movw	r14, r30
   1c536:	ed b7       	in	r30, 0x3d	; 61
   1c538:	fe b7       	in	r31, 0x3e	; 62
   1c53a:	95 83       	std	Z+5, r25	; 0x05
   1c53c:	84 83       	std	Z+4, r24	; 0x04
   1c53e:	61 82       	std	Z+1, r6	; 0x01
   1c540:	72 82       	std	Z+2, r7	; 0x02
   1c542:	83 82       	std	Z+3, r8	; 0x03
   1c544:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c548:	0f 5f       	subi	r16, 0xFF	; 255
   1c54a:	1f 4f       	sbci	r17, 0xFF	; 255
   1c54c:	ed cf       	rjmp	.-38     	; 0x1c528 <user_task.part.1+0xbe>

    ind = 0;
	result = 0;
    ptr = argv[ind++];

    if(!ptr || argc < 1)
   1c54e:	1c 14       	cp	r1, r12
   1c550:	1d 04       	cpc	r1, r13
   1c552:	0c f0       	brlt	.+2      	; 0x1c556 <user_task.part.1+0xec>
   1c554:	8a c0       	rjmp	.+276    	; 0x1c66a <user_task.part.1+0x200>
    {
        result = 1;
    }
    else if (MATCHI(ptr,"input") )
   1c556:	64 e3       	ldi	r22, 0x34	; 52
   1c558:	77 e1       	ldi	r23, 0x17	; 23
   1c55a:	c7 01       	movw	r24, r14
   1c55c:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1c560:	89 2b       	or	r24, r25
   1c562:	d9 f0       	breq	.+54     	; 0x1c59a <user_task.part.1+0x130>
    {
        debug_input = !debug_input;
   1c564:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <debug_input>
   1c568:	91 e0       	ldi	r25, 0x01	; 1
   1c56a:	81 11       	cpse	r24, r1
   1c56c:	90 e0       	ldi	r25, 0x00	; 0
   1c56e:	90 93 f4 19 	sts	0x19F4, r25	; 0x8019f4 <debug_input>
		printf("Input debugging: %s\n", debug_input ? "ON" : "OFF");
   1c572:	88 23       	and	r24, r24
   1c574:	19 f0       	breq	.+6      	; 0x1c57c <user_task.part.1+0x112>
   1c576:	80 e3       	ldi	r24, 0x30	; 48
   1c578:	97 e1       	ldi	r25, 0x17	; 23
   1c57a:	02 c0       	rjmp	.+4      	; 0x1c580 <user_task.part.1+0x116>
   1c57c:	8d e2       	ldi	r24, 0x2D	; 45
   1c57e:	97 e1       	ldi	r25, 0x17	; 23
   1c580:	ed b7       	in	r30, 0x3d	; 61
   1c582:	fe b7       	in	r31, 0x3e	; 62
   1c584:	95 83       	std	Z+5, r25	; 0x05
   1c586:	84 83       	std	Z+4, r24	; 0x04
   1c588:	82 e2       	ldi	r24, 0x22	; 34
   1c58a:	99 e4       	ldi	r25, 0x49	; 73
   1c58c:	a0 e0       	ldi	r26, 0x00	; 0
   1c58e:	81 83       	std	Z+1, r24	; 0x01
   1c590:	92 83       	std	Z+2, r25	; 0x02
   1c592:	a3 83       	std	Z+3, r26	; 0x03
   1c594:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1c598:	68 c0       	rjmp	.+208    	; 0x1c66a <user_task.part.1+0x200>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1c59a:	6a e3       	ldi	r22, 0x3A	; 58
   1c59c:	77 e1       	ldi	r23, 0x17	; 23
   1c59e:	c7 01       	movw	r24, r14
   1c5a0:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1c5a4:	89 2b       	or	r24, r25
   1c5a6:	f9 f0       	breq	.+62     	; 0x1c5e6 <user_task.part.1+0x17c>
    {
		uint32_t rgb;
        ptr = argv[ind];
   1c5a8:	c8 5f       	subi	r28, 0xF8	; 248
   1c5aa:	de 4f       	sbci	r29, 0xFE	; 254
   1c5ac:	e8 80       	ld	r14, Y
   1c5ae:	f9 80       	ldd	r15, Y+1	; 0x01
   1c5b0:	c8 50       	subi	r28, 0x08	; 8
   1c5b2:	d1 40       	sbci	r29, 0x01	; 1
        if(*ptr == '=')
   1c5b4:	f7 01       	movw	r30, r14
   1c5b6:	80 81       	ld	r24, Z
   1c5b8:	8d 33       	cpi	r24, 0x3D	; 61
   1c5ba:	19 f4       	brne	.+6      	; 0x1c5c2 <user_task.part.1+0x158>
            ++ind;
   1c5bc:	82 e0       	ldi	r24, 0x02	; 2
   1c5be:	90 e0       	ldi	r25, 0x00	; 0
   1c5c0:	02 c0       	rjmp	.+4      	; 0x1c5c6 <user_task.part.1+0x15c>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c5c2:	81 e0       	ldi	r24, 0x01	; 1
   1c5c4:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1c5c6:	88 0f       	add	r24, r24
   1c5c8:	99 1f       	adc	r25, r25
   1c5ca:	e6 e0       	ldi	r30, 0x06	; 6
   1c5cc:	f1 e0       	ldi	r31, 0x01	; 1
   1c5ce:	ec 0f       	add	r30, r28
   1c5d0:	fd 1f       	adc	r31, r29
   1c5d2:	e8 0f       	add	r30, r24
   1c5d4:	f9 1f       	adc	r31, r25
   1c5d6:	80 81       	ld	r24, Z
   1c5d8:	91 81       	ldd	r25, Z+1	; 0x01
   1c5da:	0e 94 24 33 	call	0x6648	; 0x6648 <get_value>
		result = lcd_backlight(rgb);
   1c5de:	ff dd       	rcall	.-1026   	; 0x1c1de <lcd_backlight>
   1c5e0:	08 2f       	mov	r16, r24
   1c5e2:	10 e0       	ldi	r17, 0x00	; 0
   1c5e4:	44 c0       	rjmp	.+136    	; 0x1c66e <user_task.part.1+0x204>
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1c5e6:	64 e4       	ldi	r22, 0x44	; 68
   1c5e8:	77 e1       	ldi	r23, 0x17	; 23
   1c5ea:	c7 01       	movw	r24, r14
   1c5ec:	0e 94 19 32 	call	0x6432	; 0x6432 <MATCH>
   1c5f0:	89 2b       	or	r24, r25
   1c5f2:	19 f0       	breq	.+6      	; 0x1c5fa <user_task.part.1+0x190>
    {
        PrintFree();
   1c5f4:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <PrintFree>
   1c5f8:	38 c0       	rjmp	.+112    	; 0x1c66a <user_task.part.1+0x200>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1c5fa:	69 eb       	ldi	r22, 0xB9	; 185
   1c5fc:	7d e0       	ldi	r23, 0x0D	; 13
   1c5fe:	c7 01       	movw	r24, r14
   1c600:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1c604:	89 2b       	or	r24, r25
   1c606:	51 f0       	breq	.+20     	; 0x1c61c <user_task.part.1+0x1b2>
    {
        cli();
   1c608:	f8 94       	cli
        uart_rx_flush(0);
   1c60a:	80 e0       	ldi	r24, 0x00	; 0
   1c60c:	0e 94 82 28 	call	0x5104	; 0x5104 <uart_rx_flush>
        cli();
   1c610:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1c612:	82 e0       	ldi	r24, 0x02	; 2
   1c614:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c616:	e0 e0       	ldi	r30, 0x00	; 0
   1c618:	fc ef       	ldi	r31, 0xFC	; 252
   1c61a:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1c61c:	68 e4       	ldi	r22, 0x48	; 72
   1c61e:	77 e1       	ldi	r23, 0x17	; 23
   1c620:	c7 01       	movw	r24, r14
   1c622:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1c626:	89 2b       	or	r24, r25
   1c628:	19 f0       	breq	.+6      	; 0x1c630 <user_task.part.1+0x1c6>
    {
        setdate();
   1c62a:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <setdate>
   1c62e:	07 c0       	rjmp	.+14     	; 0x1c63e <user_task.part.1+0x1d4>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1c630:	60 e5       	ldi	r22, 0x50	; 80
   1c632:	77 e1       	ldi	r23, 0x17	; 23
   1c634:	c7 01       	movw	r24, r14
   1c636:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1c63a:	89 2b       	or	r24, r25
   1c63c:	19 f0       	breq	.+6      	; 0x1c644 <user_task.part.1+0x1da>
    {
        display_clock();
   1c63e:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <display_clock>
   1c642:	13 c0       	rjmp	.+38     	; 0x1c66a <user_task.part.1+0x200>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c644:	64 e7       	ldi	r22, 0x74	; 116
   1c646:	76 e1       	ldi	r23, 0x16	; 22
   1c648:	c7 01       	movw	r24, r14
   1c64a:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1c64e:	89 2b       	or	r24, r25
    {
        help();
   1c650:	11 f0       	breq	.+4      	; 0x1c656 <user_task.part.1+0x1ec>
   1c652:	dd de       	rcall	.-582    	; 0x1c40e <help>
   1c654:	0a c0       	rjmp	.+20     	; 0x1c66a <user_task.part.1+0x200>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c656:	6a e7       	ldi	r22, 0x7A	; 122
   1c658:	76 e1       	ldi	r23, 0x16	; 22
   1c65a:	c7 01       	movw	r24, r14
   1c65c:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1c660:	89 2b       	or	r24, r25
   1c662:	b9 f7       	brne	.-18     	; 0x1c652 <user_task.part.1+0x1e8>
		for(i=0;i<argc;++i)
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
   1c664:	00 e0       	ldi	r16, 0x00	; 0
   1c666:	10 e0       	ldi	r17, 0x00	; 0
   1c668:	02 c0       	rjmp	.+4      	; 0x1c66e <user_task.part.1+0x204>
    ptr = argv[ind++];

    if(!ptr || argc < 1)
    {
        result = 1;
   1c66a:	01 e0       	ldi	r16, 0x01	; 1
   1c66c:	10 e0       	ldi	r17, 0x00	; 0
    {
        help();
        result = 1;
    }

    if (MATCHI(ptr,"dir") )
   1c66e:	68 ed       	ldi	r22, 0xD8	; 216
   1c670:	7b e0       	ldi	r23, 0x0B	; 11
   1c672:	c7 01       	movw	r24, r14
   1c674:	0e 94 2d 32 	call	0x645a	; 0x645a <MATCHI>
   1c678:	89 2b       	or	r24, r25
   1c67a:	51 f1       	breq	.+84     	; 0x1c6d0 <user_task.part.1+0x266>
   1c67c:	86 e0       	ldi	r24, 0x06	; 6
   1c67e:	68 2e       	mov	r6, r24
   1c680:	77 24       	eor	r7, r7
   1c682:	73 94       	inc	r7
   1c684:	6c 0e       	add	r6, r28
   1c686:	7d 1e       	adc	r7, r29
   1c688:	f2 e0       	ldi	r31, 0x02	; 2
   1c68a:	6f 0e       	add	r6, r31
   1c68c:	71 1c       	adc	r7, r1
   1c68e:	ee 24       	eor	r14, r14
   1c690:	e3 94       	inc	r14
   1c692:	f1 2c       	mov	r15, r1
   1c694:	01 e0       	ldi	r16, 0x01	; 1
   1c696:	10 e0       	ldi	r17, 0x00	; 0
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c698:	ec 14       	cp	r14, r12
   1c69a:	fd 04       	cpc	r15, r13
   1c69c:	74 f4       	brge	.+28     	; 0x1c6ba <user_task.part.1+0x250>
        {
            if(fatfs_ls(argv[i]) == 0)
   1c69e:	f3 01       	movw	r30, r6
   1c6a0:	81 91       	ld	r24, Z+
   1c6a2:	91 91       	ld	r25, Z+
   1c6a4:	3f 01       	movw	r6, r30
   1c6a6:	0e 94 0a 73 	call	0xe614	; 0xe614 <fatfs_ls>
   1c6aa:	89 2b       	or	r24, r25
   1c6ac:	11 f4       	brne	.+4      	; 0x1c6b2 <user_task.part.1+0x248>
				result = -1;
   1c6ae:	0f ef       	ldi	r16, 0xFF	; 255
   1c6b0:	1f ef       	ldi	r17, 0xFF	; 255
    if (MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c6b2:	ff ef       	ldi	r31, 0xFF	; 255
   1c6b4:	ef 1a       	sub	r14, r31
   1c6b6:	ff 0a       	sbc	r15, r31
   1c6b8:	ef cf       	rjmp	.-34     	; 0x1c698 <user_task.part.1+0x22e>
        {
            if(fatfs_ls(argv[i]) == 0)
				result = -1;
            ++args;
        }
        if(!args)
   1c6ba:	ea 94       	dec	r14
   1c6bc:	ef 28       	or	r14, r15
   1c6be:	41 f4       	brne	.+16     	; 0x1c6d0 <user_task.part.1+0x266>
        {
            if(fatfs_ls("") == 0)
   1c6c0:	80 e2       	ldi	r24, 0x20	; 32
   1c6c2:	9c e0       	ldi	r25, 0x0C	; 12
   1c6c4:	0e 94 0a 73 	call	0xe614	; 0xe614 <fatfs_ls>
   1c6c8:	89 2b       	or	r24, r25
   1c6ca:	11 f4       	brne	.+4      	; 0x1c6d0 <user_task.part.1+0x266>
				result = -1;
   1c6cc:	0f ef       	ldi	r16, 0xFF	; 255
   1c6ce:	1f ef       	ldi	r17, 0xFF	; 255
        }
    }

	if( (ret = gpib_tests(argc,argv)) )
   1c6d0:	be 01       	movw	r22, r28
   1c6d2:	6a 5f       	subi	r22, 0xFA	; 250
   1c6d4:	7e 4f       	sbci	r23, 0xFE	; 254
   1c6d6:	c6 01       	movw	r24, r12
   1c6d8:	0e 94 cf 91 	call	0x1239e	; 0x1239e <gpib_tests>
   1c6dc:	00 97       	sbiw	r24, 0x00	; 0
   1c6de:	51 f0       	breq	.+20     	; 0x1c6f4 <user_task.part.1+0x28a>
    {
		if(ret < 0)
   1c6e0:	97 fd       	sbrc	r25, 7
   1c6e2:	03 c0       	rjmp	.+6      	; 0x1c6ea <user_task.part.1+0x280>
			result = -1;
		else
			result = 1;
   1c6e4:	01 e0       	ldi	r16, 0x01	; 1
   1c6e6:	10 e0       	ldi	r17, 0x00	; 0
   1c6e8:	02 c0       	rjmp	.+4      	; 0x1c6ee <user_task.part.1+0x284>
    }

	if( (ret = gpib_tests(argc,argv)) )
    {
		if(ret < 0)
			result = -1;
   1c6ea:	0f ef       	ldi	r16, 0xFF	; 255
   1c6ec:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
// Restore GPIB BUS states
        gpib_init_devices();
   1c6ee:	0e 94 e3 8c 	call	0x119c6	; 0x119c6 <gpib_init_devices>
   1c6f2:	0f c0       	rjmp	.+30     	; 0x1c712 <user_task.part.1+0x2a8>
    }

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
   1c6f4:	be 01       	movw	r22, r28
   1c6f6:	6a 5f       	subi	r22, 0xFA	; 250
   1c6f8:	7e 4f       	sbci	r23, 0xFE	; 254
   1c6fa:	c6 01       	movw	r24, r12
   1c6fc:	0e 94 b4 81 	call	0x10368	; 0x10368 <posix_tests>
   1c700:	00 97       	sbiw	r24, 0x00	; 0
   1c702:	39 f0       	breq	.+14     	; 0x1c712 <user_task.part.1+0x2a8>
	{
		if(ret < 0)
   1c704:	97 fd       	sbrc	r25, 7
   1c706:	03 c0       	rjmp	.+6      	; 0x1c70e <user_task.part.1+0x2a4>
			result = -1;
		else
			result = 1;
   1c708:	01 e0       	ldi	r16, 0x01	; 1
   1c70a:	10 e0       	ldi	r17, 0x00	; 0
   1c70c:	02 c0       	rjmp	.+4      	; 0x1c712 <user_task.part.1+0x2a8>

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1c70e:	0f ef       	ldi	r16, 0xFF	; 255
   1c710:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
   1c712:	be 01       	movw	r22, r28
   1c714:	6a 5f       	subi	r22, 0xFA	; 250
   1c716:	7e 4f       	sbci	r23, 0xFE	; 254
   1c718:	c6 01       	movw	r24, r12
   1c71a:	0e 94 16 74 	call	0xe82c	; 0xe82c <fatfs_tests>
   1c71e:	00 97       	sbiw	r24, 0x00	; 0
   1c720:	39 f0       	breq	.+14     	; 0x1c730 <user_task.part.1+0x2c6>
	{
		if(ret < 0)
   1c722:	97 fd       	sbrc	r25, 7
   1c724:	03 c0       	rjmp	.+6      	; 0x1c72c <user_task.part.1+0x2c2>
			result = -1;
		else
			result = 1;
   1c726:	01 e0       	ldi	r16, 0x01	; 1
   1c728:	10 e0       	ldi	r17, 0x00	; 0
   1c72a:	02 c0       	rjmp	.+4      	; 0x1c730 <user_task.part.1+0x2c6>

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
	{
		if(ret < 0)
			result = -1;
   1c72c:	0f ef       	ldi	r16, 0xFF	; 255
   1c72e:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
   1c730:	be 01       	movw	r22, r28
   1c732:	6a 5f       	subi	r22, 0xFA	; 250
   1c734:	7e 4f       	sbci	r23, 0xFE	; 254
   1c736:	c6 01       	movw	r24, r12
   1c738:	13 db       	rcall	.-2522   	; 0x1bd60 <lif_tests>
   1c73a:	00 97       	sbiw	r24, 0x00	; 0
   1c73c:	39 f0       	breq	.+14     	; 0x1c74c <user_task.part.1+0x2e2>
	{
		if(ret < 0)
   1c73e:	97 fd       	sbrc	r25, 7
   1c740:	03 c0       	rjmp	.+6      	; 0x1c748 <user_task.part.1+0x2de>
			result = -1;
		else
			result = 1;
   1c742:	01 e0       	ldi	r16, 0x01	; 1
   1c744:	10 e0       	ldi	r17, 0x00	; 0
   1c746:	02 c0       	rjmp	.+4      	; 0x1c74c <user_task.part.1+0x2e2>

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1c748:	0f ef       	ldi	r16, 0xFF	; 255
   1c74a:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
	}
#endif
    if( (ret = drives_tests(argc,argv)) )
   1c74c:	be 01       	movw	r22, r28
   1c74e:	6a 5f       	subi	r22, 0xFA	; 250
   1c750:	7e 4f       	sbci	r23, 0xFE	; 254
   1c752:	c6 01       	movw	r24, r12
   1c754:	0e 94 a1 a2 	call	0x14542	; 0x14542 <drives_tests>
   1c758:	00 97       	sbiw	r24, 0x00	; 0
   1c75a:	19 f0       	breq	.+6      	; 0x1c762 <user_task.part.1+0x2f8>
	{
		if(ret < 0)
   1c75c:	97 ff       	sbrs	r25, 7
   1c75e:	04 c0       	rjmp	.+8      	; 0x1c768 <user_task.part.1+0x2fe>
   1c760:	09 c0       	rjmp	.+18     	; 0x1c774 <user_task.part.1+0x30a>
			result = -1;
		else
			result = 1;
	}

    if(result == 1)
   1c762:	01 30       	cpi	r16, 0x01	; 1
   1c764:	11 05       	cpc	r17, r1
   1c766:	19 f4       	brne	.+6      	; 0x1c76e <user_task.part.1+0x304>
        printf("OK\n");
   1c768:	8e e1       	ldi	r24, 0x1E	; 30
   1c76a:	99 e4       	ldi	r25, 0x49	; 73
   1c76c:	05 c0       	rjmp	.+10     	; 0x1c778 <user_task.part.1+0x30e>
	else if(result == -1)
   1c76e:	0f 3f       	cpi	r16, 0xFF	; 255
   1c770:	1f 4f       	sbci	r17, 0xFF	; 255
   1c772:	59 f4       	brne	.+22     	; 0x1c78a <user_task.part.1+0x320>
        printf("Command FAILED\n");
   1c774:	8e e0       	ldi	r24, 0x0E	; 14
   1c776:	99 e4       	ldi	r25, 0x49	; 73
   1c778:	a0 e0       	ldi	r26, 0x00	; 0
   1c77a:	ed b7       	in	r30, 0x3d	; 61
   1c77c:	fe b7       	in	r31, 0x3e	; 62
   1c77e:	81 83       	std	Z+1, r24	; 0x01
   1c780:	92 83       	std	Z+2, r25	; 0x02
   1c782:	a3 83       	std	Z+3, r26	; 0x03
   1c784:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1c788:	33 c0       	rjmp	.+102    	; 0x1c7f0 <user_task.part.1+0x386>
    else
	{
        printf("Invalid Command\n");
   1c78a:	8d ef       	ldi	r24, 0xFD	; 253
   1c78c:	98 e4       	ldi	r25, 0x48	; 72
   1c78e:	a0 e0       	ldi	r26, 0x00	; 0
   1c790:	ed b7       	in	r30, 0x3d	; 61
   1c792:	fe b7       	in	r31, 0x3e	; 62
   1c794:	81 83       	std	Z+1, r24	; 0x01
   1c796:	92 83       	std	Z+2, r25	; 0x02
   1c798:	a3 83       	std	Z+3, r26	; 0x03
   1c79a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        printf("    Argument count = %d\n", argc);
   1c79e:	ed b7       	in	r30, 0x3d	; 61
   1c7a0:	fe b7       	in	r31, 0x3e	; 62
   1c7a2:	d5 82       	std	Z+5, r13	; 0x05
   1c7a4:	c4 82       	std	Z+4, r12	; 0x04
   1c7a6:	84 ee       	ldi	r24, 0xE4	; 228
   1c7a8:	98 e4       	ldi	r25, 0x48	; 72
   1c7aa:	a0 e0       	ldi	r26, 0x00	; 0
   1c7ac:	81 83       	std	Z+1, r24	; 0x01
   1c7ae:	92 83       	std	Z+2, r25	; 0x02
   1c7b0:	a3 83       	std	Z+3, r26	; 0x03
   1c7b2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
   1c7b6:	8e 01       	movw	r16, r28
   1c7b8:	0a 5f       	subi	r16, 0xFA	; 250
   1c7ba:	1e 4f       	sbci	r17, 0xFE	; 254
		for(i=0;i<argc;++i)
   1c7bc:	e1 2c       	mov	r14, r1
   1c7be:	f1 2c       	mov	r15, r1
			printf("       [%s]\n", argv[i]);
   1c7c0:	87 ed       	ldi	r24, 0xD7	; 215
   1c7c2:	98 e4       	ldi	r25, 0x48	; 72
   1c7c4:	3c 01       	movw	r6, r24
   1c7c6:	81 2c       	mov	r8, r1
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c7c8:	ec 14       	cp	r14, r12
   1c7ca:	fd 04       	cpc	r15, r13
   1c7cc:	8c f4       	brge	.+34     	; 0x1c7f0 <user_task.part.1+0x386>
			printf("       [%s]\n", argv[i]);
   1c7ce:	f8 01       	movw	r30, r16
   1c7d0:	81 91       	ld	r24, Z+
   1c7d2:	91 91       	ld	r25, Z+
   1c7d4:	8f 01       	movw	r16, r30
   1c7d6:	ed b7       	in	r30, 0x3d	; 61
   1c7d8:	fe b7       	in	r31, 0x3e	; 62
   1c7da:	95 83       	std	Z+5, r25	; 0x05
   1c7dc:	84 83       	std	Z+4, r24	; 0x04
   1c7de:	61 82       	std	Z+1, r6	; 0x01
   1c7e0:	72 82       	std	Z+2, r7	; 0x02
   1c7e2:	83 82       	std	Z+3, r8	; 0x03
   1c7e4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c7e8:	ff ef       	ldi	r31, 0xFF	; 255
   1c7ea:	ef 1a       	sub	r14, r31
   1c7ec:	ff 0a       	sbc	r15, r31
   1c7ee:	ec cf       	rjmp	.-40     	; 0x1c7c8 <user_task.part.1+0x35e>
			printf("       [%s]\n", argv[i]);
	}
}
   1c7f0:	c5 59       	subi	r28, 0x95	; 149
   1c7f2:	de 4f       	sbci	r29, 0xFE	; 254
   1c7f4:	0f b6       	in	r0, 0x3f	; 63
   1c7f6:	f8 94       	cli
   1c7f8:	de bf       	out	0x3e, r29	; 62
   1c7fa:	0f be       	out	0x3f, r0	; 63
   1c7fc:	cd bf       	out	0x3d, r28	; 61
   1c7fe:	df 91       	pop	r29
   1c800:	cf 91       	pop	r28
   1c802:	1f 91       	pop	r17
   1c804:	0f 91       	pop	r16
   1c806:	ff 90       	pop	r15
   1c808:	ef 90       	pop	r14
   1c80a:	df 90       	pop	r13
   1c80c:	cf 90       	pop	r12
   1c80e:	8f 90       	pop	r8
   1c810:	7f 90       	pop	r7
   1c812:	6f 90       	pop	r6
   1c814:	08 95       	ret

0001c816 <user_task>:
	int ret;
    char *argv[51];
    char line[256];


    if(gpib)
   1c816:	81 11       	cpse	r24, r1
        gpib_task();
   1c818:	0e 94 4e 91 	call	0x1229c	; 0x1229c <gpib_task>

    if(!kbhit(0))
   1c81c:	80 e0       	ldi	r24, 0x00	; 0
   1c81e:	0e 94 c2 29 	call	0x5384	; 0x5384 <uart_rx_count>
   1c822:	89 2b       	or	r24, r25
   1c824:	09 f0       	breq	.+2      	; 0x1c828 <user_task+0x12>
   1c826:	21 ce       	rjmp	.-958    	; 0x1c46a <user_task.part.1>
   1c828:	08 95       	ret

0001c82a <update_drive_counts>:
	}
}

#ifdef LCD_SUPPORT
void update_drive_counts()
{
   1c82a:	a9 e2       	ldi	r26, 0x29	; 41
   1c82c:	b0 e0       	ldi	r27, 0x00	; 0
   1c82e:	ea e1       	ldi	r30, 0x1A	; 26
   1c830:	f4 ee       	ldi	r31, 0xE4	; 228
   1c832:	a7 c2       	rjmp	.+1358   	; 0x1cd82 <__prologue_saves__+0x1c>
	char tmp[32];

    sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c834:	83 e0       	ldi	r24, 0x03	; 3
   1c836:	0e 94 bb 96 	call	0x12d76	; 0x12d76 <count_drive_types>
   1c83a:	18 2f       	mov	r17, r24
   1c83c:	81 e0       	ldi	r24, 0x01	; 1
   1c83e:	0e 94 bb 96 	call	0x12d76	; 0x12d76 <count_drive_types>
   1c842:	08 2e       	mov	r0, r24
   1c844:	00 0c       	add	r0, r0
   1c846:	99 0b       	sbc	r25, r25
   1c848:	ed b7       	in	r30, 0x3d	; 61
   1c84a:	fe b7       	in	r31, 0x3e	; 62
   1c84c:	91 87       	std	Z+9, r25	; 0x09
   1c84e:	80 87       	std	Z+8, r24	; 0x08
   1c850:	81 2f       	mov	r24, r17
   1c852:	11 0f       	add	r17, r17
   1c854:	99 0b       	sbc	r25, r25
   1c856:	97 83       	std	Z+7, r25	; 0x07
   1c858:	86 83       	std	Z+6, r24	; 0x06
   1c85a:	86 ec       	ldi	r24, 0xC6	; 198
   1c85c:	98 e4       	ldi	r25, 0x48	; 72
   1c85e:	a0 e0       	ldi	r26, 0x00	; 0
   1c860:	83 83       	std	Z+3, r24	; 0x03
   1c862:	94 83       	std	Z+4, r25	; 0x04
   1c864:	a5 83       	std	Z+5, r26	; 0x05
   1c866:	8e 01       	movw	r16, r28
   1c868:	06 5f       	subi	r16, 0xF6	; 246
   1c86a:	1f 4f       	sbci	r17, 0xFF	; 255
   1c86c:	12 83       	std	Z+2, r17	; 0x02
   1c86e:	01 83       	std	Z+1, r16	; 0x01
   1c870:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <sprintf_P>
        (int) count_drive_types(SS80_TYPE),
        (int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c874:	ed b7       	in	r30, 0x3d	; 61
   1c876:	fe b7       	in	r31, 0x3e	; 62
   1c878:	17 83       	std	Z+7, r17	; 0x07
   1c87a:	06 83       	std	Z+6, r16	; 0x06
   1c87c:	80 ec       	ldi	r24, 0xC0	; 192
   1c87e:	98 e4       	ldi	r25, 0x48	; 72
   1c880:	a0 e0       	ldi	r26, 0x00	; 0
   1c882:	83 83       	std	Z+3, r24	; 0x03
   1c884:	94 83       	std	Z+4, r25	; 0x04
   1c886:	a5 83       	std	Z+5, r26	; 0x05
   1c888:	8c e0       	ldi	r24, 0x0C	; 12
   1c88a:	93 e0       	ldi	r25, 0x03	; 3
   1c88c:	92 83       	std	Z+2, r25	; 0x02
   1c88e:	81 83       	std	Z+1, r24	; 0x01
   1c890:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <sprintf_P>
}
   1c894:	a9 96       	adiw	r28, 0x29	; 41
   1c896:	e4 e0       	ldi	r30, 0x04	; 4
   1c898:	90 c2       	rjmp	.+1312   	; 0x1cdba <__epilogue_restores__+0x1c>

0001c89a <main>:
#endif

/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c89a:	cf 93       	push	r28
   1c89c:	df 93       	push	r29
   1c89e:	cd b7       	in	r28, 0x3d	; 61
   1c8a0:	de b7       	in	r29, 0x3e	; 62
   1c8a2:	63 97       	sbiw	r28, 0x13	; 19
   1c8a4:	0f b6       	in	r0, 0x3f	; 63
   1c8a6:	f8 94       	cli
   1c8a8:	de bf       	out	0x3e, r29	; 62
   1c8aa:	0f be       	out	0x3f, r0	; 63
   1c8ac:	cd bf       	out	0x3d, r28	; 61
    ts_t ts;
    uint32_t actual,baud;

	clear_error();		// Clear error state
   1c8ae:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1c8b2:	46 98       	cbi	0x08, 6	; 8
   1c8b4:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c8b6:	0e 94 8e 85 	call	0x10b1c	; 0x10b1c <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1c8ba:	40 e0       	ldi	r20, 0x00	; 0
   1c8bc:	52 ec       	ldi	r21, 0xC2	; 194
   1c8be:	61 e0       	ldi	r22, 0x01	; 1
   1c8c0:	70 e0       	ldi	r23, 0x00	; 0
   1c8c2:	80 e0       	ldi	r24, 0x00	; 0
   1c8c4:	0e 94 2d 29 	call	0x525a	; 0x525a <uart_init>
   1c8c8:	6b 01       	movw	r12, r22
   1c8ca:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1c8cc:	68 ec       	ldi	r22, 0xC8	; 200
   1c8ce:	70 e0       	ldi	r23, 0x00	; 0
   1c8d0:	80 e0       	ldi	r24, 0x00	; 0
   1c8d2:	90 e0       	ldi	r25, 0x00	; 0
   1c8d4:	0e 94 3a 28 	call	0x5074	; 0x5074 <delayms>

    sep();
   1c8d8:	0e 94 ef 31 	call	0x63de	; 0x63de <sep>
    printf("Start\n");
   1c8dc:	89 eb       	ldi	r24, 0xB9	; 185
   1c8de:	98 e4       	ldi	r25, 0x48	; 72
   1c8e0:	a0 e0       	ldi	r26, 0x00	; 0
   1c8e2:	ed b7       	in	r30, 0x3d	; 61
   1c8e4:	fe b7       	in	r31, 0x3e	; 62
   1c8e6:	81 83       	std	Z+1, r24	; 0x01
   1c8e8:	92 83       	std	Z+2, r25	; 0x02
   1c8ea:	a3 83       	std	Z+3, r26	; 0x03
   1c8ec:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c8f0:	80 e0       	ldi	r24, 0x00	; 0
   1c8f2:	9d e2       	ldi	r25, 0x2D	; 45
   1c8f4:	a1 e3       	ldi	r26, 0x31	; 49
   1c8f6:	b1 e0       	ldi	r27, 0x01	; 1
   1c8f8:	ed b7       	in	r30, 0x3d	; 61
   1c8fa:	fe b7       	in	r31, 0x3e	; 62
   1c8fc:	84 83       	std	Z+4, r24	; 0x04
   1c8fe:	95 83       	std	Z+5, r25	; 0x05
   1c900:	a6 83       	std	Z+6, r26	; 0x06
   1c902:	b7 83       	std	Z+7, r27	; 0x07
   1c904:	88 ea       	ldi	r24, 0xA8	; 168
   1c906:	98 e4       	ldi	r25, 0x48	; 72
   1c908:	a0 e0       	ldi	r26, 0x00	; 0
   1c90a:	81 83       	std	Z+1, r24	; 0x01
   1c90c:	92 83       	std	Z+2, r25	; 0x02
   1c90e:	a3 83       	std	Z+3, r26	; 0x03
   1c910:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c914:	ed b7       	in	r30, 0x3d	; 61
   1c916:	fe b7       	in	r31, 0x3e	; 62
   1c918:	c0 86       	std	Z+8, r12	; 0x08
   1c91a:	d1 86       	std	Z+9, r13	; 0x09
   1c91c:	e2 86       	std	Z+10, r14	; 0x0a
   1c91e:	f3 86       	std	Z+11, r15	; 0x0b
   1c920:	80 e0       	ldi	r24, 0x00	; 0
   1c922:	92 ec       	ldi	r25, 0xC2	; 194
   1c924:	a1 e0       	ldi	r26, 0x01	; 1
   1c926:	b0 e0       	ldi	r27, 0x00	; 0
   1c928:	84 83       	std	Z+4, r24	; 0x04
   1c92a:	95 83       	std	Z+5, r25	; 0x05
   1c92c:	a6 83       	std	Z+6, r26	; 0x06
   1c92e:	b7 83       	std	Z+7, r27	; 0x07
   1c930:	81 e8       	ldi	r24, 0x81	; 129
   1c932:	98 e4       	ldi	r25, 0x48	; 72
   1c934:	a0 e0       	ldi	r26, 0x00	; 0
   1c936:	81 83       	std	Z+1, r24	; 0x01
   1c938:	92 83       	std	Z+2, r25	; 0x02
   1c93a:	a3 83       	std	Z+3, r26	; 0x03
   1c93c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    init_timers();
   1c940:	0e 94 d5 35 	call	0x6baa	; 0x6baa <init_timers>

    sep();
   1c944:	0e 94 ef 31 	call	0x63de	; 0x63de <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c948:	82 e6       	ldi	r24, 0x62	; 98
   1c94a:	98 e4       	ldi	r25, 0x48	; 72
   1c94c:	a0 e0       	ldi	r26, 0x00	; 0
   1c94e:	ed b7       	in	r30, 0x3d	; 61
   1c950:	fe b7       	in	r31, 0x3e	; 62
   1c952:	81 83       	std	Z+1, r24	; 0x01
   1c954:	92 83       	std	Z+2, r25	; 0x02
   1c956:	a3 83       	std	Z+3, r26	; 0x03
   1c958:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c95c:	85 e4       	ldi	r24, 0x45	; 69
   1c95e:	98 e4       	ldi	r25, 0x48	; 72
   1c960:	a0 e0       	ldi	r26, 0x00	; 0
   1c962:	ed b7       	in	r30, 0x3d	; 61
   1c964:	fe b7       	in	r31, 0x3e	; 62
   1c966:	81 83       	std	Z+1, r24	; 0x01
   1c968:	92 83       	std	Z+2, r25	; 0x02
   1c96a:	a3 83       	std	Z+3, r26	; 0x03
   1c96c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf(" GNU version 3\n");
   1c970:	85 e3       	ldi	r24, 0x35	; 53
   1c972:	98 e4       	ldi	r25, 0x48	; 72
   1c974:	a0 e0       	ldi	r26, 0x00	; 0
   1c976:	ed b7       	in	r30, 0x3d	; 61
   1c978:	fe b7       	in	r31, 0x3e	; 62
   1c97a:	81 83       	std	Z+1, r24	; 0x01
   1c97c:	92 83       	std	Z+2, r25	; 0x02
   1c97e:	a3 83       	std	Z+3, r26	; 0x03
   1c980:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c984:	8e e0       	ldi	r24, 0x0E	; 14
   1c986:	98 e4       	ldi	r25, 0x48	; 72
   1c988:	a0 e0       	ldi	r26, 0x00	; 0
   1c98a:	ed b7       	in	r30, 0x3d	; 61
   1c98c:	fe b7       	in	r31, 0x3e	; 62
   1c98e:	81 83       	std	Z+1, r24	; 0x01
   1c990:	92 83       	std	Z+2, r25	; 0x02
   1c992:	a3 83       	std	Z+3, r26	; 0x03
   1c994:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c998:	8e eb       	ldi	r24, 0xBE	; 190
   1c99a:	96 e1       	ldi	r25, 0x16	; 22
   1c99c:	ed b7       	in	r30, 0x3d	; 61
   1c99e:	fe b7       	in	r31, 0x3e	; 62
   1c9a0:	95 83       	std	Z+5, r25	; 0x05
   1c9a2:	84 83       	std	Z+4, r24	; 0x04
   1c9a4:	84 ef       	ldi	r24, 0xF4	; 244
   1c9a6:	97 e4       	ldi	r25, 0x47	; 71
   1c9a8:	a0 e0       	ldi	r26, 0x00	; 0
   1c9aa:	81 83       	std	Z+1, r24	; 0x01
   1c9ac:	92 83       	std	Z+2, r25	; 0x02
   1c9ae:	a3 83       	std	Z+3, r26	; 0x03
   1c9b0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c9b4:	82 ee       	ldi	r24, 0xE2	; 226
   1c9b6:	96 e1       	ldi	r25, 0x16	; 22
   1c9b8:	ed b7       	in	r30, 0x3d	; 61
   1c9ba:	fe b7       	in	r31, 0x3e	; 62
   1c9bc:	95 83       	std	Z+5, r25	; 0x05
   1c9be:	84 83       	std	Z+4, r24	; 0x04
   1c9c0:	8a ed       	ldi	r24, 0xDA	; 218
   1c9c2:	97 e4       	ldi	r25, 0x47	; 71
   1c9c4:	a0 e0       	ldi	r26, 0x00	; 0
   1c9c6:	81 83       	std	Z+1, r24	; 0x01
   1c9c8:	92 83       	std	Z+2, r25	; 0x02
   1c9ca:	a3 83       	std	Z+3, r26	; 0x03
   1c9cc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

    sep();
   1c9d0:	0e 94 ef 31 	call	0x63de	; 0x63de <sep>
    PrintFree();
   1c9d4:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <PrintFree>

    sep();
   1c9d8:	0e 94 ef 31 	call	0x63de	; 0x63de <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1c9dc:	84 ec       	ldi	r24, 0xC4	; 196
   1c9de:	97 e4       	ldi	r25, 0x47	; 71
   1c9e0:	a0 e0       	ldi	r26, 0x00	; 0
   1c9e2:	ed b7       	in	r30, 0x3d	; 61
   1c9e4:	fe b7       	in	r31, 0x3e	; 62
   1c9e6:	81 83       	std	Z+1, r24	; 0x01
   1c9e8:	92 83       	std	Z+2, r25	; 0x02
   1c9ea:	a3 83       	std	Z+3, r26	; 0x03
   1c9ec:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1c9f0:	4b e0       	ldi	r20, 0x0B	; 11
   1c9f2:	50 e0       	ldi	r21, 0x00	; 0
   1c9f4:	60 e2       	ldi	r22, 0x20	; 32
   1c9f6:	71 ea       	ldi	r23, 0xA1	; 161
   1c9f8:	87 e0       	ldi	r24, 0x07	; 7
   1c9fa:	90 e0       	ldi	r25, 0x00	; 0
   1c9fc:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1ca00:	8e ea       	ldi	r24, 0xAE	; 174
   1ca02:	97 e4       	ldi	r25, 0x47	; 71
   1ca04:	a0 e0       	ldi	r26, 0x00	; 0
   1ca06:	ed b7       	in	r30, 0x3d	; 61
   1ca08:	fe b7       	in	r31, 0x3e	; 62
   1ca0a:	81 83       	std	Z+1, r24	; 0x01
   1ca0c:	92 83       	std	Z+2, r25	; 0x02
   1ca0e:	a3 83       	std	Z+3, r26	; 0x03
   1ca10:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
	i2c_init(100000);
   1ca14:	60 ea       	ldi	r22, 0xA0	; 160
   1ca16:	76 e8       	ldi	r23, 0x86	; 134
   1ca18:	81 e0       	ldi	r24, 0x01	; 1
   1ca1a:	90 e0       	ldi	r25, 0x00	; 0
   1ca1c:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <i2c_init>
    sep();
   1ca20:	0e 94 ef 31 	call	0x63de	; 0x63de <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1ca24:	8c e9       	ldi	r24, 0x9C	; 156
   1ca26:	97 e4       	ldi	r25, 0x47	; 71
   1ca28:	a0 e0       	ldi	r26, 0x00	; 0
   1ca2a:	ed b7       	in	r30, 0x3d	; 61
   1ca2c:	fe b7       	in	r31, 0x3e	; 62
   1ca2e:	81 83       	std	Z+1, r24	; 0x01
   1ca30:	92 83       	std	Z+2, r25	; 0x02
   1ca32:	a3 83       	std	Z+3, r26	; 0x03
   1ca34:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    clock_clear();
   1ca38:	0e 94 92 35 	call	0x6b24	; 0x6b24 <clock_clear>
    printf("Clock cleared\n");
   1ca3c:	8d e8       	ldi	r24, 0x8D	; 141
   1ca3e:	97 e4       	ldi	r25, 0x47	; 71
   1ca40:	a0 e0       	ldi	r26, 0x00	; 0
   1ca42:	ed b7       	in	r30, 0x3d	; 61
   1ca44:	fe b7       	in	r31, 0x3e	; 62
   1ca46:	81 83       	std	Z+1, r24	; 0x01
   1ca48:	92 83       	std	Z+2, r25	; 0x02
   1ca4a:	a3 83       	std	Z+3, r26	; 0x03
   1ca4c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1ca50:	be 01       	movw	r22, r28
   1ca52:	64 5f       	subi	r22, 0xF4	; 244
   1ca54:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca56:	80 e0       	ldi	r24, 0x00	; 0
   1ca58:	90 e0       	ldi	r25, 0x00	; 0
   1ca5a:	0e 94 32 36 	call	0x6c64	; 0x6c64 <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1ca5e:	88 89       	ldd	r24, Y+16	; 0x10
   1ca60:	99 89       	ldd	r25, Y+17	; 0x11
   1ca62:	aa 89       	ldd	r26, Y+18	; 0x12
   1ca64:	bb 89       	ldd	r27, Y+19	; 0x13
   1ca66:	ed b7       	in	r30, 0x3d	; 61
   1ca68:	fe b7       	in	r31, 0x3e	; 62
   1ca6a:	84 83       	std	Z+4, r24	; 0x04
   1ca6c:	95 83       	std	Z+5, r25	; 0x05
   1ca6e:	a6 83       	std	Z+6, r26	; 0x06
   1ca70:	b7 83       	std	Z+7, r27	; 0x07
   1ca72:	8f e5       	ldi	r24, 0x5F	; 95
   1ca74:	97 e4       	ldi	r25, 0x47	; 71
   1ca76:	a0 e0       	ldi	r26, 0x00	; 0
   1ca78:	81 83       	std	Z+1, r24	; 0x01
   1ca7a:	92 83       	std	Z+2, r25	; 0x02
   1ca7c:	a3 83       	std	Z+3, r26	; 0x03
   1ca7e:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1ca82:	80 e0       	ldi	r24, 0x00	; 0
   1ca84:	90 e0       	ldi	r25, 0x00	; 0
   1ca86:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <initialize_clock>
    display_clock();
   1ca8a:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <display_clock>
    sep();
   1ca8e:	0e 94 ef 31 	call	0x63de	; 0x63de <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1ca92:	cc db       	rcall	.-2152   	; 0x1c22c <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1ca94:	87 e4       	ldi	r24, 0x47	; 71
   1ca96:	97 e4       	ldi	r25, 0x47	; 71
   1ca98:	a0 e0       	ldi	r26, 0x00	; 0
   1ca9a:	ed b7       	in	r30, 0x3d	; 61
   1ca9c:	fe b7       	in	r31, 0x3e	; 62
   1ca9e:	81 83       	std	Z+1, r24	; 0x01
   1caa0:	92 83       	std	Z+2, r25	; 0x02
   1caa2:	a3 83       	std	Z+3, r26	; 0x03
   1caa4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    if ( !mmc_init(1) )
   1caa8:	81 e0       	ldi	r24, 0x01	; 1
   1caaa:	90 e0       	ldi	r25, 0x00	; 0
   1caac:	0e 94 ff 6e 	call	0xddfe	; 0xddfe <mmc_init>
   1cab0:	89 2b       	or	r24, r25
   1cab2:	51 f4       	brne	.+20     	; 0x1cac8 <main+0x22e>
		printf("MMC initialized\n");
   1cab4:	86 e3       	ldi	r24, 0x36	; 54
   1cab6:	97 e4       	ldi	r25, 0x47	; 71
   1cab8:	a0 e0       	ldi	r26, 0x00	; 0
   1caba:	ed b7       	in	r30, 0x3d	; 61
   1cabc:	fe b7       	in	r31, 0x3e	; 62
   1cabe:	81 83       	std	Z+1, r24	; 0x01
   1cac0:	92 83       	std	Z+2, r25	; 0x02
   1cac2:	a3 83       	std	Z+3, r26	; 0x03
   1cac4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    sep();
   1cac8:	0e 94 ef 31 	call	0x63de	; 0x63de <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1cacc:	0e 94 8e 85 	call	0x10b1c	; 0x10b1c <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1cad0:	80 e2       	ldi	r24, 0x20	; 32
   1cad2:	97 e4       	ldi	r25, 0x47	; 71
   1cad4:	a0 e0       	ldi	r26, 0x00	; 0
   1cad6:	ed b7       	in	r30, 0x3d	; 61
   1cad8:	fe b7       	in	r31, 0x3e	; 62
   1cada:	81 83       	std	Z+1, r24	; 0x01
   1cadc:	92 83       	std	Z+2, r25	; 0x02
   1cade:	a3 83       	std	Z+3, r26	; 0x03
   1cae0:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1cae4:	0e 94 f6 bd 	call	0x17bec	; 0x17bec <printer_init>
    printf("Printer initialized\n");
   1cae8:	8b e0       	ldi	r24, 0x0B	; 11
   1caea:	97 e4       	ldi	r25, 0x47	; 71
   1caec:	a0 e0       	ldi	r26, 0x00	; 0
   1caee:	ed b7       	in	r30, 0x3d	; 61
   1caf0:	fe b7       	in	r31, 0x3e	; 62
   1caf2:	81 83       	std	Z+1, r24	; 0x01
   1caf4:	92 83       	std	Z+2, r25	; 0x02
   1caf6:	a3 83       	std	Z+3, r26	; 0x03
   1caf8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1cafc:	89 ef       	ldi	r24, 0xF9	; 249
   1cafe:	96 e4       	ldi	r25, 0x46	; 70
   1cb00:	a0 e0       	ldi	r26, 0x00	; 0
   1cb02:	ed b7       	in	r30, 0x3d	; 61
   1cb04:	fe b7       	in	r31, 0x3e	; 62
   1cb06:	81 83       	std	Z+1, r24	; 0x01
   1cb08:	92 83       	std	Z+2, r25	; 0x02
   1cb0a:	a3 83       	std	Z+3, r26	; 0x03
   1cb0c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    gpib_timer_init();
   1cb10:	0e 94 a2 83 	call	0x10744	; 0x10744 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1cb14:	81 ee       	ldi	r24, 0xE1	; 225
   1cb16:	96 e4       	ldi	r25, 0x46	; 70
   1cb18:	a0 e0       	ldi	r26, 0x00	; 0
   1cb1a:	ed b7       	in	r30, 0x3d	; 61
   1cb1c:	fe b7       	in	r31, 0x3e	; 62
   1cb1e:	81 83       	std	Z+1, r24	; 0x01
   1cb20:	92 83       	std	Z+2, r25	; 0x02
   1cb22:	a3 83       	std	Z+3, r26	; 0x03
   1cb24:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1cb28:	0e 94 06 8c 	call	0x1180c	; 0x1180c <gpib_file_init>
    printf("GPIB File init done\n");
   1cb2c:	8c ec       	ldi	r24, 0xCC	; 204
   1cb2e:	96 e4       	ldi	r25, 0x46	; 70
   1cb30:	a0 e0       	ldi	r26, 0x00	; 0
   1cb32:	ed b7       	in	r30, 0x3d	; 61
   1cb34:	fe b7       	in	r31, 0x3e	; 62
   1cb36:	81 83       	std	Z+1, r24	; 0x01
   1cb38:	92 83       	std	Z+2, r25	; 0x02
   1cb3a:	a3 83       	std	Z+3, r26	; 0x03
   1cb3c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1cb40:	0e 94 f6 85 	call	0x10bec	; 0x10bec <gpib_state_init>
    printf("GPIB State init done\n");
   1cb44:	86 eb       	ldi	r24, 0xB6	; 182
   1cb46:	96 e4       	ldi	r25, 0x46	; 70
   1cb48:	a0 e0       	ldi	r26, 0x00	; 0
   1cb4a:	ed b7       	in	r30, 0x3d	; 61
   1cb4c:	fe b7       	in	r31, 0x3e	; 62
   1cb4e:	81 83       	std	Z+1, r24	; 0x01
   1cb50:	92 83       	std	Z+2, r25	; 0x02
   1cb52:	a3 83       	std	Z+3, r26	; 0x03
   1cb54:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    sep();
   1cb58:	0e 94 ef 31 	call	0x63de	; 0x63de <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1cb5c:	80 e0       	ldi	r24, 0x00	; 0
   1cb5e:	90 e0       	ldi	r25, 0x00	; 0
   1cb60:	0e 94 4c 93 	call	0x12698	; 0x12698 <display_Addresses>
    sep();
   1cb64:	0e 94 ef 31 	call	0x63de	; 0x63de <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1cb68:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1cb6c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1cb70:	ed b7       	in	r30, 0x3d	; 61
   1cb72:	fe b7       	in	r31, 0x3e	; 62
   1cb74:	95 83       	std	Z+5, r25	; 0x05
   1cb76:	84 83       	std	Z+4, r24	; 0x04
   1cb78:	80 ea       	ldi	r24, 0xA0	; 160
   1cb7a:	96 e4       	ldi	r25, 0x46	; 70
   1cb7c:	a0 e0       	ldi	r26, 0x00	; 0
   1cb7e:	81 83       	std	Z+1, r24	; 0x01
   1cb80:	92 83       	std	Z+2, r25	; 0x02
   1cb82:	a3 83       	std	Z+3, r26	; 0x03
   1cb84:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
    sep();
   1cb88:	0e 94 ef 31 	call	0x63de	; 0x63de <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1cb8c:	0e 94 5a 9a 	call	0x134b4	; 0x134b4 <format_drives>

#ifdef LCD_SUPPORT
	update_drive_counts();
   1cb90:	4c de       	rcall	.-872    	; 0x1c82a <update_drive_counts>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1cb92:	82 e1       	ldi	r24, 0x12	; 18
   1cb94:	97 e1       	ldi	r25, 0x17	; 23
   1cb96:	ed b7       	in	r30, 0x3d	; 61
   1cb98:	fe b7       	in	r31, 0x3e	; 62
   1cb9a:	97 83       	std	Z+7, r25	; 0x07
   1cb9c:	86 83       	std	Z+6, r24	; 0x06
   1cb9e:	8a e9       	ldi	r24, 0x9A	; 154
   1cba0:	96 e4       	ldi	r25, 0x46	; 70
   1cba2:	a0 e0       	ldi	r26, 0x00	; 0
   1cba4:	83 83       	std	Z+3, r24	; 0x03
   1cba6:	94 83       	std	Z+4, r25	; 0x04
   1cba8:	a5 83       	std	Z+5, r26	; 0x05
   1cbaa:	85 ef       	ldi	r24, 0xF5	; 245
   1cbac:	92 e0       	ldi	r25, 0x02	; 2
   1cbae:	92 83       	std	Z+2, r25	; 0x02
   1cbb0:	81 83       	std	Z+1, r24	; 0x01
   1cbb2:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <sprintf_P>

	i2c_task_run();
   1cbb6:	0e 94 94 2c 	call	0x5928	; 0x5928 <i2c_task_run>
	delayms(1000);
   1cbba:	68 ee       	ldi	r22, 0xE8	; 232
   1cbbc:	73 e0       	ldi	r23, 0x03	; 3
   1cbbe:	80 e0       	ldi	r24, 0x00	; 0
   1cbc0:	90 e0       	ldi	r25, 0x00	; 0
   1cbc2:	0e 94 3a 28 	call	0x5074	; 0x5074 <delayms>
    if(!i2c_task.done || i2c_task.error )
   1cbc6:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <i2c_task+0x2>
   1cbca:	88 23       	and	r24, r24
   1cbcc:	21 f0       	breq	.+8      	; 0x1cbd6 <main+0x33c>
   1cbce:	80 91 81 17 	lds	r24, 0x1781	; 0x801781 <i2c_task+0x3>
   1cbd2:	88 23       	and	r24, r24
   1cbd4:	61 f0       	breq	.+24     	; 0x1cbee <main+0x354>
	{
		i2c_display_task_errors();
   1cbd6:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1cbda:	80 e8       	ldi	r24, 0x80	; 128
   1cbdc:	96 e4       	ldi	r25, 0x46	; 70
   1cbde:	a0 e0       	ldi	r26, 0x00	; 0
   1cbe0:	ed b7       	in	r30, 0x3d	; 61
   1cbe2:	fe b7       	in	r31, 0x3e	; 62
   1cbe4:	81 83       	std	Z+1, r24	; 0x01
   1cbe6:	92 83       	std	Z+2, r25	; 0x02
   1cbe8:	a3 83       	std	Z+3, r26	; 0x03
   1cbea:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1cbee:	8c e6       	ldi	r24, 0x6C	; 108
   1cbf0:	96 e4       	ldi	r25, 0x46	; 70
   1cbf2:	a0 e0       	ldi	r26, 0x00	; 0
   1cbf4:	ed b7       	in	r30, 0x3d	; 61
   1cbf6:	fe b7       	in	r31, 0x3e	; 62
   1cbf8:	81 83       	std	Z+1, r24	; 0x01
   1cbfa:	92 83       	std	Z+2, r25	; 0x02
   1cbfc:	a3 83       	std	Z+3, r26	; 0x03
   1cbfe:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1cc02:	81 e0       	ldi	r24, 0x01	; 1
   1cc04:	08 de       	rcall	.-1008   	; 0x1c816 <user_task>
   1cc06:	fd cf       	rjmp	.-6      	; 0x1cc02 <main+0x368>

0001cc08 <__mulsi3>:
   1cc08:	db 01       	movw	r26, r22
   1cc0a:	8f 93       	push	r24
   1cc0c:	9f 93       	push	r25
   1cc0e:	8b d0       	rcall	.+278    	; 0x1cd26 <__muluhisi3>
   1cc10:	bf 91       	pop	r27
   1cc12:	af 91       	pop	r26
   1cc14:	a2 9f       	mul	r26, r18
   1cc16:	80 0d       	add	r24, r0
   1cc18:	91 1d       	adc	r25, r1
   1cc1a:	a3 9f       	mul	r26, r19
   1cc1c:	90 0d       	add	r25, r0
   1cc1e:	b2 9f       	mul	r27, r18
   1cc20:	90 0d       	add	r25, r0
   1cc22:	11 24       	eor	r1, r1
   1cc24:	08 95       	ret

0001cc26 <__udivmodqi4>:
   1cc26:	99 1b       	sub	r25, r25
   1cc28:	79 e0       	ldi	r23, 0x09	; 9
   1cc2a:	04 c0       	rjmp	.+8      	; 0x1cc34 <__udivmodqi4_ep>

0001cc2c <__udivmodqi4_loop>:
   1cc2c:	99 1f       	adc	r25, r25
   1cc2e:	96 17       	cp	r25, r22
   1cc30:	08 f0       	brcs	.+2      	; 0x1cc34 <__udivmodqi4_ep>
   1cc32:	96 1b       	sub	r25, r22

0001cc34 <__udivmodqi4_ep>:
   1cc34:	88 1f       	adc	r24, r24
   1cc36:	7a 95       	dec	r23
   1cc38:	c9 f7       	brne	.-14     	; 0x1cc2c <__udivmodqi4_loop>
   1cc3a:	80 95       	com	r24
   1cc3c:	08 95       	ret

0001cc3e <__udivmodhi4>:
   1cc3e:	aa 1b       	sub	r26, r26
   1cc40:	bb 1b       	sub	r27, r27
   1cc42:	51 e1       	ldi	r21, 0x11	; 17
   1cc44:	07 c0       	rjmp	.+14     	; 0x1cc54 <__udivmodhi4_ep>

0001cc46 <__udivmodhi4_loop>:
   1cc46:	aa 1f       	adc	r26, r26
   1cc48:	bb 1f       	adc	r27, r27
   1cc4a:	a6 17       	cp	r26, r22
   1cc4c:	b7 07       	cpc	r27, r23
   1cc4e:	10 f0       	brcs	.+4      	; 0x1cc54 <__udivmodhi4_ep>
   1cc50:	a6 1b       	sub	r26, r22
   1cc52:	b7 0b       	sbc	r27, r23

0001cc54 <__udivmodhi4_ep>:
   1cc54:	88 1f       	adc	r24, r24
   1cc56:	99 1f       	adc	r25, r25
   1cc58:	5a 95       	dec	r21
   1cc5a:	a9 f7       	brne	.-22     	; 0x1cc46 <__udivmodhi4_loop>
   1cc5c:	80 95       	com	r24
   1cc5e:	90 95       	com	r25
   1cc60:	bc 01       	movw	r22, r24
   1cc62:	cd 01       	movw	r24, r26
   1cc64:	08 95       	ret

0001cc66 <__divmodhi4>:
   1cc66:	97 fb       	bst	r25, 7
   1cc68:	07 2e       	mov	r0, r23
   1cc6a:	16 f4       	brtc	.+4      	; 0x1cc70 <__divmodhi4+0xa>
   1cc6c:	00 94       	com	r0
   1cc6e:	06 d0       	rcall	.+12     	; 0x1cc7c <__divmodhi4_neg1>
   1cc70:	77 fd       	sbrc	r23, 7
   1cc72:	08 d0       	rcall	.+16     	; 0x1cc84 <__divmodhi4_neg2>
   1cc74:	e4 df       	rcall	.-56     	; 0x1cc3e <__udivmodhi4>
   1cc76:	07 fc       	sbrc	r0, 7
   1cc78:	05 d0       	rcall	.+10     	; 0x1cc84 <__divmodhi4_neg2>
   1cc7a:	3e f4       	brtc	.+14     	; 0x1cc8a <__divmodhi4_exit>

0001cc7c <__divmodhi4_neg1>:
   1cc7c:	90 95       	com	r25
   1cc7e:	81 95       	neg	r24
   1cc80:	9f 4f       	sbci	r25, 0xFF	; 255
   1cc82:	08 95       	ret

0001cc84 <__divmodhi4_neg2>:
   1cc84:	70 95       	com	r23
   1cc86:	61 95       	neg	r22
   1cc88:	7f 4f       	sbci	r23, 0xFF	; 255

0001cc8a <__divmodhi4_exit>:
   1cc8a:	08 95       	ret

0001cc8c <__udivmodsi4>:
   1cc8c:	a1 e2       	ldi	r26, 0x21	; 33
   1cc8e:	1a 2e       	mov	r1, r26
   1cc90:	aa 1b       	sub	r26, r26
   1cc92:	bb 1b       	sub	r27, r27
   1cc94:	fd 01       	movw	r30, r26
   1cc96:	0d c0       	rjmp	.+26     	; 0x1ccb2 <__udivmodsi4_ep>

0001cc98 <__udivmodsi4_loop>:
   1cc98:	aa 1f       	adc	r26, r26
   1cc9a:	bb 1f       	adc	r27, r27
   1cc9c:	ee 1f       	adc	r30, r30
   1cc9e:	ff 1f       	adc	r31, r31
   1cca0:	a2 17       	cp	r26, r18
   1cca2:	b3 07       	cpc	r27, r19
   1cca4:	e4 07       	cpc	r30, r20
   1cca6:	f5 07       	cpc	r31, r21
   1cca8:	20 f0       	brcs	.+8      	; 0x1ccb2 <__udivmodsi4_ep>
   1ccaa:	a2 1b       	sub	r26, r18
   1ccac:	b3 0b       	sbc	r27, r19
   1ccae:	e4 0b       	sbc	r30, r20
   1ccb0:	f5 0b       	sbc	r31, r21

0001ccb2 <__udivmodsi4_ep>:
   1ccb2:	66 1f       	adc	r22, r22
   1ccb4:	77 1f       	adc	r23, r23
   1ccb6:	88 1f       	adc	r24, r24
   1ccb8:	99 1f       	adc	r25, r25
   1ccba:	1a 94       	dec	r1
   1ccbc:	69 f7       	brne	.-38     	; 0x1cc98 <__udivmodsi4_loop>
   1ccbe:	60 95       	com	r22
   1ccc0:	70 95       	com	r23
   1ccc2:	80 95       	com	r24
   1ccc4:	90 95       	com	r25
   1ccc6:	9b 01       	movw	r18, r22
   1ccc8:	ac 01       	movw	r20, r24
   1ccca:	bd 01       	movw	r22, r26
   1cccc:	cf 01       	movw	r24, r30
   1ccce:	08 95       	ret

0001ccd0 <__divmodsi4>:
   1ccd0:	05 2e       	mov	r0, r21
   1ccd2:	97 fb       	bst	r25, 7
   1ccd4:	16 f4       	brtc	.+4      	; 0x1ccda <__divmodsi4+0xa>
   1ccd6:	00 94       	com	r0
   1ccd8:	0f d0       	rcall	.+30     	; 0x1ccf8 <__negsi2>
   1ccda:	57 fd       	sbrc	r21, 7
   1ccdc:	05 d0       	rcall	.+10     	; 0x1cce8 <__divmodsi4_neg2>
   1ccde:	d6 df       	rcall	.-84     	; 0x1cc8c <__udivmodsi4>
   1cce0:	07 fc       	sbrc	r0, 7
   1cce2:	02 d0       	rcall	.+4      	; 0x1cce8 <__divmodsi4_neg2>
   1cce4:	46 f4       	brtc	.+16     	; 0x1ccf6 <__divmodsi4_exit>
   1cce6:	08 c0       	rjmp	.+16     	; 0x1ccf8 <__negsi2>

0001cce8 <__divmodsi4_neg2>:
   1cce8:	50 95       	com	r21
   1ccea:	40 95       	com	r20
   1ccec:	30 95       	com	r19
   1ccee:	21 95       	neg	r18
   1ccf0:	3f 4f       	sbci	r19, 0xFF	; 255
   1ccf2:	4f 4f       	sbci	r20, 0xFF	; 255
   1ccf4:	5f 4f       	sbci	r21, 0xFF	; 255

0001ccf6 <__divmodsi4_exit>:
   1ccf6:	08 95       	ret

0001ccf8 <__negsi2>:
   1ccf8:	90 95       	com	r25
   1ccfa:	80 95       	com	r24
   1ccfc:	70 95       	com	r23
   1ccfe:	61 95       	neg	r22
   1cd00:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd02:	8f 4f       	sbci	r24, 0xFF	; 255
   1cd04:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd06:	08 95       	ret

0001cd08 <__tablejump2__>:
   1cd08:	ee 0f       	add	r30, r30
   1cd0a:	ff 1f       	adc	r31, r31
   1cd0c:	00 24       	eor	r0, r0
   1cd0e:	00 1c       	adc	r0, r0
   1cd10:	0b be       	out	0x3b, r0	; 59
   1cd12:	07 90       	elpm	r0, Z+
   1cd14:	f6 91       	elpm	r31, Z
   1cd16:	e0 2d       	mov	r30, r0
   1cd18:	09 94       	ijmp

0001cd1a <__usmulhisi3>:
   1cd1a:	6f d0       	rcall	.+222    	; 0x1cdfa <__umulhisi3>

0001cd1c <__usmulhisi3_tail>:
   1cd1c:	b7 ff       	sbrs	r27, 7
   1cd1e:	08 95       	ret
   1cd20:	82 1b       	sub	r24, r18
   1cd22:	93 0b       	sbc	r25, r19
   1cd24:	08 95       	ret

0001cd26 <__muluhisi3>:
   1cd26:	69 d0       	rcall	.+210    	; 0x1cdfa <__umulhisi3>
   1cd28:	a5 9f       	mul	r26, r21
   1cd2a:	90 0d       	add	r25, r0
   1cd2c:	b4 9f       	mul	r27, r20
   1cd2e:	90 0d       	add	r25, r0
   1cd30:	a4 9f       	mul	r26, r20
   1cd32:	80 0d       	add	r24, r0
   1cd34:	91 1d       	adc	r25, r1
   1cd36:	11 24       	eor	r1, r1
   1cd38:	08 95       	ret

0001cd3a <__mulshisi3>:
   1cd3a:	b7 ff       	sbrs	r27, 7
   1cd3c:	f4 cf       	rjmp	.-24     	; 0x1cd26 <__muluhisi3>

0001cd3e <__mulohisi3>:
   1cd3e:	f3 df       	rcall	.-26     	; 0x1cd26 <__muluhisi3>
   1cd40:	82 1b       	sub	r24, r18
   1cd42:	93 0b       	sbc	r25, r19
   1cd44:	08 95       	ret

0001cd46 <__negdi2>:
   1cd46:	60 95       	com	r22
   1cd48:	70 95       	com	r23
   1cd4a:	80 95       	com	r24
   1cd4c:	90 95       	com	r25
   1cd4e:	30 95       	com	r19
   1cd50:	40 95       	com	r20
   1cd52:	50 95       	com	r21
   1cd54:	21 95       	neg	r18
   1cd56:	3f 4f       	sbci	r19, 0xFF	; 255
   1cd58:	4f 4f       	sbci	r20, 0xFF	; 255
   1cd5a:	5f 4f       	sbci	r21, 0xFF	; 255
   1cd5c:	6f 4f       	sbci	r22, 0xFF	; 255
   1cd5e:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd60:	8f 4f       	sbci	r24, 0xFF	; 255
   1cd62:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd64:	08 95       	ret

0001cd66 <__prologue_saves__>:
   1cd66:	2f 92       	push	r2
   1cd68:	3f 92       	push	r3
   1cd6a:	4f 92       	push	r4
   1cd6c:	5f 92       	push	r5
   1cd6e:	6f 92       	push	r6
   1cd70:	7f 92       	push	r7
   1cd72:	8f 92       	push	r8
   1cd74:	9f 92       	push	r9
   1cd76:	af 92       	push	r10
   1cd78:	bf 92       	push	r11
   1cd7a:	cf 92       	push	r12
   1cd7c:	df 92       	push	r13
   1cd7e:	ef 92       	push	r14
   1cd80:	ff 92       	push	r15
   1cd82:	0f 93       	push	r16
   1cd84:	1f 93       	push	r17
   1cd86:	cf 93       	push	r28
   1cd88:	df 93       	push	r29
   1cd8a:	cd b7       	in	r28, 0x3d	; 61
   1cd8c:	de b7       	in	r29, 0x3e	; 62
   1cd8e:	ca 1b       	sub	r28, r26
   1cd90:	db 0b       	sbc	r29, r27
   1cd92:	0f b6       	in	r0, 0x3f	; 63
   1cd94:	f8 94       	cli
   1cd96:	de bf       	out	0x3e, r29	; 62
   1cd98:	0f be       	out	0x3f, r0	; 63
   1cd9a:	cd bf       	out	0x3d, r28	; 61
   1cd9c:	09 94       	ijmp

0001cd9e <__epilogue_restores__>:
   1cd9e:	2a 88       	ldd	r2, Y+18	; 0x12
   1cda0:	39 88       	ldd	r3, Y+17	; 0x11
   1cda2:	48 88       	ldd	r4, Y+16	; 0x10
   1cda4:	5f 84       	ldd	r5, Y+15	; 0x0f
   1cda6:	6e 84       	ldd	r6, Y+14	; 0x0e
   1cda8:	7d 84       	ldd	r7, Y+13	; 0x0d
   1cdaa:	8c 84       	ldd	r8, Y+12	; 0x0c
   1cdac:	9b 84       	ldd	r9, Y+11	; 0x0b
   1cdae:	aa 84       	ldd	r10, Y+10	; 0x0a
   1cdb0:	b9 84       	ldd	r11, Y+9	; 0x09
   1cdb2:	c8 84       	ldd	r12, Y+8	; 0x08
   1cdb4:	df 80       	ldd	r13, Y+7	; 0x07
   1cdb6:	ee 80       	ldd	r14, Y+6	; 0x06
   1cdb8:	fd 80       	ldd	r15, Y+5	; 0x05
   1cdba:	0c 81       	ldd	r16, Y+4	; 0x04
   1cdbc:	1b 81       	ldd	r17, Y+3	; 0x03
   1cdbe:	aa 81       	ldd	r26, Y+2	; 0x02
   1cdc0:	b9 81       	ldd	r27, Y+1	; 0x01
   1cdc2:	ce 0f       	add	r28, r30
   1cdc4:	d1 1d       	adc	r29, r1
   1cdc6:	0f b6       	in	r0, 0x3f	; 63
   1cdc8:	f8 94       	cli
   1cdca:	de bf       	out	0x3e, r29	; 62
   1cdcc:	0f be       	out	0x3f, r0	; 63
   1cdce:	cd bf       	out	0x3d, r28	; 61
   1cdd0:	ed 01       	movw	r28, r26
   1cdd2:	08 95       	ret

0001cdd4 <__xload_1>:
   1cdd4:	57 fd       	sbrc	r21, 7
   1cdd6:	03 c0       	rjmp	.+6      	; 0x1cdde <__xload_1+0xa>
   1cdd8:	5b bf       	out	0x3b, r21	; 59
   1cdda:	67 91       	elpm	r22, Z+
   1cddc:	08 95       	ret
   1cdde:	60 81       	ld	r22, Z
   1cde0:	08 95       	ret

0001cde2 <__cmpdi2_s8>:
   1cde2:	00 24       	eor	r0, r0
   1cde4:	a7 fd       	sbrc	r26, 7
   1cde6:	00 94       	com	r0
   1cde8:	2a 17       	cp	r18, r26
   1cdea:	30 05       	cpc	r19, r0
   1cdec:	40 05       	cpc	r20, r0
   1cdee:	50 05       	cpc	r21, r0
   1cdf0:	60 05       	cpc	r22, r0
   1cdf2:	70 05       	cpc	r23, r0
   1cdf4:	80 05       	cpc	r24, r0
   1cdf6:	90 05       	cpc	r25, r0
   1cdf8:	08 95       	ret

0001cdfa <__umulhisi3>:
   1cdfa:	a2 9f       	mul	r26, r18
   1cdfc:	b0 01       	movw	r22, r0
   1cdfe:	b3 9f       	mul	r27, r19
   1ce00:	c0 01       	movw	r24, r0
   1ce02:	a3 9f       	mul	r26, r19
   1ce04:	70 0d       	add	r23, r0
   1ce06:	81 1d       	adc	r24, r1
   1ce08:	11 24       	eor	r1, r1
   1ce0a:	91 1d       	adc	r25, r1
   1ce0c:	b2 9f       	mul	r27, r18
   1ce0e:	70 0d       	add	r23, r0
   1ce10:	81 1d       	adc	r24, r1
   1ce12:	11 24       	eor	r1, r1
   1ce14:	91 1d       	adc	r25, r1
   1ce16:	08 95       	ret

0001ce18 <__subsf3>:
   1ce18:	50 58       	subi	r21, 0x80	; 128

0001ce1a <__addsf3>:
   1ce1a:	bb 27       	eor	r27, r27
   1ce1c:	aa 27       	eor	r26, r26
   1ce1e:	0e d0       	rcall	.+28     	; 0x1ce3c <__addsf3x>
   1ce20:	75 c1       	rjmp	.+746    	; 0x1d10c <__fp_round>
   1ce22:	66 d1       	rcall	.+716    	; 0x1d0f0 <__fp_pscA>
   1ce24:	30 f0       	brcs	.+12     	; 0x1ce32 <__addsf3+0x18>
   1ce26:	6b d1       	rcall	.+726    	; 0x1d0fe <__fp_pscB>
   1ce28:	20 f0       	brcs	.+8      	; 0x1ce32 <__addsf3+0x18>
   1ce2a:	31 f4       	brne	.+12     	; 0x1ce38 <__addsf3+0x1e>
   1ce2c:	9f 3f       	cpi	r25, 0xFF	; 255
   1ce2e:	11 f4       	brne	.+4      	; 0x1ce34 <__addsf3+0x1a>
   1ce30:	1e f4       	brtc	.+6      	; 0x1ce38 <__addsf3+0x1e>
   1ce32:	5b c1       	rjmp	.+694    	; 0x1d0ea <__fp_nan>
   1ce34:	0e f4       	brtc	.+2      	; 0x1ce38 <__addsf3+0x1e>
   1ce36:	e0 95       	com	r30
   1ce38:	e7 fb       	bst	r30, 7
   1ce3a:	51 c1       	rjmp	.+674    	; 0x1d0de <__fp_inf>

0001ce3c <__addsf3x>:
   1ce3c:	e9 2f       	mov	r30, r25
   1ce3e:	77 d1       	rcall	.+750    	; 0x1d12e <__fp_split3>
   1ce40:	80 f3       	brcs	.-32     	; 0x1ce22 <__addsf3+0x8>
   1ce42:	ba 17       	cp	r27, r26
   1ce44:	62 07       	cpc	r22, r18
   1ce46:	73 07       	cpc	r23, r19
   1ce48:	84 07       	cpc	r24, r20
   1ce4a:	95 07       	cpc	r25, r21
   1ce4c:	18 f0       	brcs	.+6      	; 0x1ce54 <__addsf3x+0x18>
   1ce4e:	71 f4       	brne	.+28     	; 0x1ce6c <__addsf3x+0x30>
   1ce50:	9e f5       	brtc	.+102    	; 0x1ceb8 <__addsf3x+0x7c>
   1ce52:	8f c1       	rjmp	.+798    	; 0x1d172 <__fp_zero>
   1ce54:	0e f4       	brtc	.+2      	; 0x1ce58 <__addsf3x+0x1c>
   1ce56:	e0 95       	com	r30
   1ce58:	0b 2e       	mov	r0, r27
   1ce5a:	ba 2f       	mov	r27, r26
   1ce5c:	a0 2d       	mov	r26, r0
   1ce5e:	0b 01       	movw	r0, r22
   1ce60:	b9 01       	movw	r22, r18
   1ce62:	90 01       	movw	r18, r0
   1ce64:	0c 01       	movw	r0, r24
   1ce66:	ca 01       	movw	r24, r20
   1ce68:	a0 01       	movw	r20, r0
   1ce6a:	11 24       	eor	r1, r1
   1ce6c:	ff 27       	eor	r31, r31
   1ce6e:	59 1b       	sub	r21, r25
   1ce70:	99 f0       	breq	.+38     	; 0x1ce98 <__addsf3x+0x5c>
   1ce72:	59 3f       	cpi	r21, 0xF9	; 249
   1ce74:	50 f4       	brcc	.+20     	; 0x1ce8a <__addsf3x+0x4e>
   1ce76:	50 3e       	cpi	r21, 0xE0	; 224
   1ce78:	68 f1       	brcs	.+90     	; 0x1ced4 <__addsf3x+0x98>
   1ce7a:	1a 16       	cp	r1, r26
   1ce7c:	f0 40       	sbci	r31, 0x00	; 0
   1ce7e:	a2 2f       	mov	r26, r18
   1ce80:	23 2f       	mov	r18, r19
   1ce82:	34 2f       	mov	r19, r20
   1ce84:	44 27       	eor	r20, r20
   1ce86:	58 5f       	subi	r21, 0xF8	; 248
   1ce88:	f3 cf       	rjmp	.-26     	; 0x1ce70 <__addsf3x+0x34>
   1ce8a:	46 95       	lsr	r20
   1ce8c:	37 95       	ror	r19
   1ce8e:	27 95       	ror	r18
   1ce90:	a7 95       	ror	r26
   1ce92:	f0 40       	sbci	r31, 0x00	; 0
   1ce94:	53 95       	inc	r21
   1ce96:	c9 f7       	brne	.-14     	; 0x1ce8a <__addsf3x+0x4e>
   1ce98:	7e f4       	brtc	.+30     	; 0x1ceb8 <__addsf3x+0x7c>
   1ce9a:	1f 16       	cp	r1, r31
   1ce9c:	ba 0b       	sbc	r27, r26
   1ce9e:	62 0b       	sbc	r22, r18
   1cea0:	73 0b       	sbc	r23, r19
   1cea2:	84 0b       	sbc	r24, r20
   1cea4:	ba f0       	brmi	.+46     	; 0x1ced4 <__addsf3x+0x98>
   1cea6:	91 50       	subi	r25, 0x01	; 1
   1cea8:	a1 f0       	breq	.+40     	; 0x1ced2 <__addsf3x+0x96>
   1ceaa:	ff 0f       	add	r31, r31
   1ceac:	bb 1f       	adc	r27, r27
   1ceae:	66 1f       	adc	r22, r22
   1ceb0:	77 1f       	adc	r23, r23
   1ceb2:	88 1f       	adc	r24, r24
   1ceb4:	c2 f7       	brpl	.-16     	; 0x1cea6 <__addsf3x+0x6a>
   1ceb6:	0e c0       	rjmp	.+28     	; 0x1ced4 <__addsf3x+0x98>
   1ceb8:	ba 0f       	add	r27, r26
   1ceba:	62 1f       	adc	r22, r18
   1cebc:	73 1f       	adc	r23, r19
   1cebe:	84 1f       	adc	r24, r20
   1cec0:	48 f4       	brcc	.+18     	; 0x1ced4 <__addsf3x+0x98>
   1cec2:	87 95       	ror	r24
   1cec4:	77 95       	ror	r23
   1cec6:	67 95       	ror	r22
   1cec8:	b7 95       	ror	r27
   1ceca:	f7 95       	ror	r31
   1cecc:	9e 3f       	cpi	r25, 0xFE	; 254
   1cece:	08 f0       	brcs	.+2      	; 0x1ced2 <__addsf3x+0x96>
   1ced0:	b3 cf       	rjmp	.-154    	; 0x1ce38 <__addsf3+0x1e>
   1ced2:	93 95       	inc	r25
   1ced4:	88 0f       	add	r24, r24
   1ced6:	08 f0       	brcs	.+2      	; 0x1ceda <__addsf3x+0x9e>
   1ced8:	99 27       	eor	r25, r25
   1ceda:	ee 0f       	add	r30, r30
   1cedc:	97 95       	ror	r25
   1cede:	87 95       	ror	r24
   1cee0:	08 95       	ret

0001cee2 <__cmpsf2>:
   1cee2:	d9 d0       	rcall	.+434    	; 0x1d096 <__fp_cmp>
   1cee4:	08 f4       	brcc	.+2      	; 0x1cee8 <__cmpsf2+0x6>
   1cee6:	81 e0       	ldi	r24, 0x01	; 1
   1cee8:	08 95       	ret

0001ceea <__divsf3>:
   1ceea:	0c d0       	rcall	.+24     	; 0x1cf04 <__divsf3x>
   1ceec:	0f c1       	rjmp	.+542    	; 0x1d10c <__fp_round>
   1ceee:	07 d1       	rcall	.+526    	; 0x1d0fe <__fp_pscB>
   1cef0:	40 f0       	brcs	.+16     	; 0x1cf02 <__divsf3+0x18>
   1cef2:	fe d0       	rcall	.+508    	; 0x1d0f0 <__fp_pscA>
   1cef4:	30 f0       	brcs	.+12     	; 0x1cf02 <__divsf3+0x18>
   1cef6:	21 f4       	brne	.+8      	; 0x1cf00 <__divsf3+0x16>
   1cef8:	5f 3f       	cpi	r21, 0xFF	; 255
   1cefa:	19 f0       	breq	.+6      	; 0x1cf02 <__divsf3+0x18>
   1cefc:	f0 c0       	rjmp	.+480    	; 0x1d0de <__fp_inf>
   1cefe:	51 11       	cpse	r21, r1
   1cf00:	39 c1       	rjmp	.+626    	; 0x1d174 <__fp_szero>
   1cf02:	f3 c0       	rjmp	.+486    	; 0x1d0ea <__fp_nan>

0001cf04 <__divsf3x>:
   1cf04:	14 d1       	rcall	.+552    	; 0x1d12e <__fp_split3>
   1cf06:	98 f3       	brcs	.-26     	; 0x1ceee <__divsf3+0x4>

0001cf08 <__divsf3_pse>:
   1cf08:	99 23       	and	r25, r25
   1cf0a:	c9 f3       	breq	.-14     	; 0x1cefe <__divsf3+0x14>
   1cf0c:	55 23       	and	r21, r21
   1cf0e:	b1 f3       	breq	.-20     	; 0x1cefc <__divsf3+0x12>
   1cf10:	95 1b       	sub	r25, r21
   1cf12:	55 0b       	sbc	r21, r21
   1cf14:	bb 27       	eor	r27, r27
   1cf16:	aa 27       	eor	r26, r26
   1cf18:	62 17       	cp	r22, r18
   1cf1a:	73 07       	cpc	r23, r19
   1cf1c:	84 07       	cpc	r24, r20
   1cf1e:	38 f0       	brcs	.+14     	; 0x1cf2e <__divsf3_pse+0x26>
   1cf20:	9f 5f       	subi	r25, 0xFF	; 255
   1cf22:	5f 4f       	sbci	r21, 0xFF	; 255
   1cf24:	22 0f       	add	r18, r18
   1cf26:	33 1f       	adc	r19, r19
   1cf28:	44 1f       	adc	r20, r20
   1cf2a:	aa 1f       	adc	r26, r26
   1cf2c:	a9 f3       	breq	.-22     	; 0x1cf18 <__divsf3_pse+0x10>
   1cf2e:	33 d0       	rcall	.+102    	; 0x1cf96 <__divsf3_pse+0x8e>
   1cf30:	0e 2e       	mov	r0, r30
   1cf32:	3a f0       	brmi	.+14     	; 0x1cf42 <__divsf3_pse+0x3a>
   1cf34:	e0 e8       	ldi	r30, 0x80	; 128
   1cf36:	30 d0       	rcall	.+96     	; 0x1cf98 <__divsf3_pse+0x90>
   1cf38:	91 50       	subi	r25, 0x01	; 1
   1cf3a:	50 40       	sbci	r21, 0x00	; 0
   1cf3c:	e6 95       	lsr	r30
   1cf3e:	00 1c       	adc	r0, r0
   1cf40:	ca f7       	brpl	.-14     	; 0x1cf34 <__divsf3_pse+0x2c>
   1cf42:	29 d0       	rcall	.+82     	; 0x1cf96 <__divsf3_pse+0x8e>
   1cf44:	fe 2f       	mov	r31, r30
   1cf46:	27 d0       	rcall	.+78     	; 0x1cf96 <__divsf3_pse+0x8e>
   1cf48:	66 0f       	add	r22, r22
   1cf4a:	77 1f       	adc	r23, r23
   1cf4c:	88 1f       	adc	r24, r24
   1cf4e:	bb 1f       	adc	r27, r27
   1cf50:	26 17       	cp	r18, r22
   1cf52:	37 07       	cpc	r19, r23
   1cf54:	48 07       	cpc	r20, r24
   1cf56:	ab 07       	cpc	r26, r27
   1cf58:	b0 e8       	ldi	r27, 0x80	; 128
   1cf5a:	09 f0       	breq	.+2      	; 0x1cf5e <__divsf3_pse+0x56>
   1cf5c:	bb 0b       	sbc	r27, r27
   1cf5e:	80 2d       	mov	r24, r0
   1cf60:	bf 01       	movw	r22, r30
   1cf62:	ff 27       	eor	r31, r31
   1cf64:	93 58       	subi	r25, 0x83	; 131
   1cf66:	5f 4f       	sbci	r21, 0xFF	; 255
   1cf68:	2a f0       	brmi	.+10     	; 0x1cf74 <__divsf3_pse+0x6c>
   1cf6a:	9e 3f       	cpi	r25, 0xFE	; 254
   1cf6c:	51 05       	cpc	r21, r1
   1cf6e:	68 f0       	brcs	.+26     	; 0x1cf8a <__divsf3_pse+0x82>
   1cf70:	b6 c0       	rjmp	.+364    	; 0x1d0de <__fp_inf>
   1cf72:	00 c1       	rjmp	.+512    	; 0x1d174 <__fp_szero>
   1cf74:	5f 3f       	cpi	r21, 0xFF	; 255
   1cf76:	ec f3       	brlt	.-6      	; 0x1cf72 <__divsf3_pse+0x6a>
   1cf78:	98 3e       	cpi	r25, 0xE8	; 232
   1cf7a:	dc f3       	brlt	.-10     	; 0x1cf72 <__divsf3_pse+0x6a>
   1cf7c:	86 95       	lsr	r24
   1cf7e:	77 95       	ror	r23
   1cf80:	67 95       	ror	r22
   1cf82:	b7 95       	ror	r27
   1cf84:	f7 95       	ror	r31
   1cf86:	9f 5f       	subi	r25, 0xFF	; 255
   1cf88:	c9 f7       	brne	.-14     	; 0x1cf7c <__divsf3_pse+0x74>
   1cf8a:	88 0f       	add	r24, r24
   1cf8c:	91 1d       	adc	r25, r1
   1cf8e:	96 95       	lsr	r25
   1cf90:	87 95       	ror	r24
   1cf92:	97 f9       	bld	r25, 7
   1cf94:	08 95       	ret
   1cf96:	e1 e0       	ldi	r30, 0x01	; 1
   1cf98:	66 0f       	add	r22, r22
   1cf9a:	77 1f       	adc	r23, r23
   1cf9c:	88 1f       	adc	r24, r24
   1cf9e:	bb 1f       	adc	r27, r27
   1cfa0:	62 17       	cp	r22, r18
   1cfa2:	73 07       	cpc	r23, r19
   1cfa4:	84 07       	cpc	r24, r20
   1cfa6:	ba 07       	cpc	r27, r26
   1cfa8:	20 f0       	brcs	.+8      	; 0x1cfb2 <__divsf3_pse+0xaa>
   1cfaa:	62 1b       	sub	r22, r18
   1cfac:	73 0b       	sbc	r23, r19
   1cfae:	84 0b       	sbc	r24, r20
   1cfb0:	ba 0b       	sbc	r27, r26
   1cfb2:	ee 1f       	adc	r30, r30
   1cfb4:	88 f7       	brcc	.-30     	; 0x1cf98 <__divsf3_pse+0x90>
   1cfb6:	e0 95       	com	r30
   1cfb8:	08 95       	ret

0001cfba <__fixsfsi>:
   1cfba:	04 d0       	rcall	.+8      	; 0x1cfc4 <__fixunssfsi>
   1cfbc:	68 94       	set
   1cfbe:	b1 11       	cpse	r27, r1
   1cfc0:	d9 c0       	rjmp	.+434    	; 0x1d174 <__fp_szero>
   1cfc2:	08 95       	ret

0001cfc4 <__fixunssfsi>:
   1cfc4:	bc d0       	rcall	.+376    	; 0x1d13e <__fp_splitA>
   1cfc6:	88 f0       	brcs	.+34     	; 0x1cfea <__fixunssfsi+0x26>
   1cfc8:	9f 57       	subi	r25, 0x7F	; 127
   1cfca:	90 f0       	brcs	.+36     	; 0x1cff0 <__fixunssfsi+0x2c>
   1cfcc:	b9 2f       	mov	r27, r25
   1cfce:	99 27       	eor	r25, r25
   1cfd0:	b7 51       	subi	r27, 0x17	; 23
   1cfd2:	a0 f0       	brcs	.+40     	; 0x1cffc <__fixunssfsi+0x38>
   1cfd4:	d1 f0       	breq	.+52     	; 0x1d00a <__fixunssfsi+0x46>
   1cfd6:	66 0f       	add	r22, r22
   1cfd8:	77 1f       	adc	r23, r23
   1cfda:	88 1f       	adc	r24, r24
   1cfdc:	99 1f       	adc	r25, r25
   1cfde:	1a f0       	brmi	.+6      	; 0x1cfe6 <__fixunssfsi+0x22>
   1cfe0:	ba 95       	dec	r27
   1cfe2:	c9 f7       	brne	.-14     	; 0x1cfd6 <__fixunssfsi+0x12>
   1cfe4:	12 c0       	rjmp	.+36     	; 0x1d00a <__fixunssfsi+0x46>
   1cfe6:	b1 30       	cpi	r27, 0x01	; 1
   1cfe8:	81 f0       	breq	.+32     	; 0x1d00a <__fixunssfsi+0x46>
   1cfea:	c3 d0       	rcall	.+390    	; 0x1d172 <__fp_zero>
   1cfec:	b1 e0       	ldi	r27, 0x01	; 1
   1cfee:	08 95       	ret
   1cff0:	c0 c0       	rjmp	.+384    	; 0x1d172 <__fp_zero>
   1cff2:	67 2f       	mov	r22, r23
   1cff4:	78 2f       	mov	r23, r24
   1cff6:	88 27       	eor	r24, r24
   1cff8:	b8 5f       	subi	r27, 0xF8	; 248
   1cffa:	39 f0       	breq	.+14     	; 0x1d00a <__fixunssfsi+0x46>
   1cffc:	b9 3f       	cpi	r27, 0xF9	; 249
   1cffe:	cc f3       	brlt	.-14     	; 0x1cff2 <__fixunssfsi+0x2e>
   1d000:	86 95       	lsr	r24
   1d002:	77 95       	ror	r23
   1d004:	67 95       	ror	r22
   1d006:	b3 95       	inc	r27
   1d008:	d9 f7       	brne	.-10     	; 0x1d000 <__fixunssfsi+0x3c>
   1d00a:	3e f4       	brtc	.+14     	; 0x1d01a <__fixunssfsi+0x56>
   1d00c:	90 95       	com	r25
   1d00e:	80 95       	com	r24
   1d010:	70 95       	com	r23
   1d012:	61 95       	neg	r22
   1d014:	7f 4f       	sbci	r23, 0xFF	; 255
   1d016:	8f 4f       	sbci	r24, 0xFF	; 255
   1d018:	9f 4f       	sbci	r25, 0xFF	; 255
   1d01a:	08 95       	ret

0001d01c <__floatunsisf>:
   1d01c:	e8 94       	clt
   1d01e:	09 c0       	rjmp	.+18     	; 0x1d032 <__floatsisf+0x12>

0001d020 <__floatsisf>:
   1d020:	97 fb       	bst	r25, 7
   1d022:	3e f4       	brtc	.+14     	; 0x1d032 <__floatsisf+0x12>
   1d024:	90 95       	com	r25
   1d026:	80 95       	com	r24
   1d028:	70 95       	com	r23
   1d02a:	61 95       	neg	r22
   1d02c:	7f 4f       	sbci	r23, 0xFF	; 255
   1d02e:	8f 4f       	sbci	r24, 0xFF	; 255
   1d030:	9f 4f       	sbci	r25, 0xFF	; 255
   1d032:	99 23       	and	r25, r25
   1d034:	a9 f0       	breq	.+42     	; 0x1d060 <__floatsisf+0x40>
   1d036:	f9 2f       	mov	r31, r25
   1d038:	96 e9       	ldi	r25, 0x96	; 150
   1d03a:	bb 27       	eor	r27, r27
   1d03c:	93 95       	inc	r25
   1d03e:	f6 95       	lsr	r31
   1d040:	87 95       	ror	r24
   1d042:	77 95       	ror	r23
   1d044:	67 95       	ror	r22
   1d046:	b7 95       	ror	r27
   1d048:	f1 11       	cpse	r31, r1
   1d04a:	f8 cf       	rjmp	.-16     	; 0x1d03c <__floatsisf+0x1c>
   1d04c:	fa f4       	brpl	.+62     	; 0x1d08c <__floatsisf+0x6c>
   1d04e:	bb 0f       	add	r27, r27
   1d050:	11 f4       	brne	.+4      	; 0x1d056 <__floatsisf+0x36>
   1d052:	60 ff       	sbrs	r22, 0
   1d054:	1b c0       	rjmp	.+54     	; 0x1d08c <__floatsisf+0x6c>
   1d056:	6f 5f       	subi	r22, 0xFF	; 255
   1d058:	7f 4f       	sbci	r23, 0xFF	; 255
   1d05a:	8f 4f       	sbci	r24, 0xFF	; 255
   1d05c:	9f 4f       	sbci	r25, 0xFF	; 255
   1d05e:	16 c0       	rjmp	.+44     	; 0x1d08c <__floatsisf+0x6c>
   1d060:	88 23       	and	r24, r24
   1d062:	11 f0       	breq	.+4      	; 0x1d068 <__floatsisf+0x48>
   1d064:	96 e9       	ldi	r25, 0x96	; 150
   1d066:	11 c0       	rjmp	.+34     	; 0x1d08a <__floatsisf+0x6a>
   1d068:	77 23       	and	r23, r23
   1d06a:	21 f0       	breq	.+8      	; 0x1d074 <__floatsisf+0x54>
   1d06c:	9e e8       	ldi	r25, 0x8E	; 142
   1d06e:	87 2f       	mov	r24, r23
   1d070:	76 2f       	mov	r23, r22
   1d072:	05 c0       	rjmp	.+10     	; 0x1d07e <__floatsisf+0x5e>
   1d074:	66 23       	and	r22, r22
   1d076:	71 f0       	breq	.+28     	; 0x1d094 <__floatsisf+0x74>
   1d078:	96 e8       	ldi	r25, 0x86	; 134
   1d07a:	86 2f       	mov	r24, r22
   1d07c:	70 e0       	ldi	r23, 0x00	; 0
   1d07e:	60 e0       	ldi	r22, 0x00	; 0
   1d080:	2a f0       	brmi	.+10     	; 0x1d08c <__floatsisf+0x6c>
   1d082:	9a 95       	dec	r25
   1d084:	66 0f       	add	r22, r22
   1d086:	77 1f       	adc	r23, r23
   1d088:	88 1f       	adc	r24, r24
   1d08a:	da f7       	brpl	.-10     	; 0x1d082 <__floatsisf+0x62>
   1d08c:	88 0f       	add	r24, r24
   1d08e:	96 95       	lsr	r25
   1d090:	87 95       	ror	r24
   1d092:	97 f9       	bld	r25, 7
   1d094:	08 95       	ret

0001d096 <__fp_cmp>:
   1d096:	99 0f       	add	r25, r25
   1d098:	00 08       	sbc	r0, r0
   1d09a:	55 0f       	add	r21, r21
   1d09c:	aa 0b       	sbc	r26, r26
   1d09e:	e0 e8       	ldi	r30, 0x80	; 128
   1d0a0:	fe ef       	ldi	r31, 0xFE	; 254
   1d0a2:	16 16       	cp	r1, r22
   1d0a4:	17 06       	cpc	r1, r23
   1d0a6:	e8 07       	cpc	r30, r24
   1d0a8:	f9 07       	cpc	r31, r25
   1d0aa:	c0 f0       	brcs	.+48     	; 0x1d0dc <__fp_cmp+0x46>
   1d0ac:	12 16       	cp	r1, r18
   1d0ae:	13 06       	cpc	r1, r19
   1d0b0:	e4 07       	cpc	r30, r20
   1d0b2:	f5 07       	cpc	r31, r21
   1d0b4:	98 f0       	brcs	.+38     	; 0x1d0dc <__fp_cmp+0x46>
   1d0b6:	62 1b       	sub	r22, r18
   1d0b8:	73 0b       	sbc	r23, r19
   1d0ba:	84 0b       	sbc	r24, r20
   1d0bc:	95 0b       	sbc	r25, r21
   1d0be:	39 f4       	brne	.+14     	; 0x1d0ce <__fp_cmp+0x38>
   1d0c0:	0a 26       	eor	r0, r26
   1d0c2:	61 f0       	breq	.+24     	; 0x1d0dc <__fp_cmp+0x46>
   1d0c4:	23 2b       	or	r18, r19
   1d0c6:	24 2b       	or	r18, r20
   1d0c8:	25 2b       	or	r18, r21
   1d0ca:	21 f4       	brne	.+8      	; 0x1d0d4 <__fp_cmp+0x3e>
   1d0cc:	08 95       	ret
   1d0ce:	0a 26       	eor	r0, r26
   1d0d0:	09 f4       	brne	.+2      	; 0x1d0d4 <__fp_cmp+0x3e>
   1d0d2:	a1 40       	sbci	r26, 0x01	; 1
   1d0d4:	a6 95       	lsr	r26
   1d0d6:	8f ef       	ldi	r24, 0xFF	; 255
   1d0d8:	81 1d       	adc	r24, r1
   1d0da:	81 1d       	adc	r24, r1
   1d0dc:	08 95       	ret

0001d0de <__fp_inf>:
   1d0de:	97 f9       	bld	r25, 7
   1d0e0:	9f 67       	ori	r25, 0x7F	; 127
   1d0e2:	80 e8       	ldi	r24, 0x80	; 128
   1d0e4:	70 e0       	ldi	r23, 0x00	; 0
   1d0e6:	60 e0       	ldi	r22, 0x00	; 0
   1d0e8:	08 95       	ret

0001d0ea <__fp_nan>:
   1d0ea:	9f ef       	ldi	r25, 0xFF	; 255
   1d0ec:	80 ec       	ldi	r24, 0xC0	; 192
   1d0ee:	08 95       	ret

0001d0f0 <__fp_pscA>:
   1d0f0:	00 24       	eor	r0, r0
   1d0f2:	0a 94       	dec	r0
   1d0f4:	16 16       	cp	r1, r22
   1d0f6:	17 06       	cpc	r1, r23
   1d0f8:	18 06       	cpc	r1, r24
   1d0fa:	09 06       	cpc	r0, r25
   1d0fc:	08 95       	ret

0001d0fe <__fp_pscB>:
   1d0fe:	00 24       	eor	r0, r0
   1d100:	0a 94       	dec	r0
   1d102:	12 16       	cp	r1, r18
   1d104:	13 06       	cpc	r1, r19
   1d106:	14 06       	cpc	r1, r20
   1d108:	05 06       	cpc	r0, r21
   1d10a:	08 95       	ret

0001d10c <__fp_round>:
   1d10c:	09 2e       	mov	r0, r25
   1d10e:	03 94       	inc	r0
   1d110:	00 0c       	add	r0, r0
   1d112:	11 f4       	brne	.+4      	; 0x1d118 <__fp_round+0xc>
   1d114:	88 23       	and	r24, r24
   1d116:	52 f0       	brmi	.+20     	; 0x1d12c <__fp_round+0x20>
   1d118:	bb 0f       	add	r27, r27
   1d11a:	40 f4       	brcc	.+16     	; 0x1d12c <__fp_round+0x20>
   1d11c:	bf 2b       	or	r27, r31
   1d11e:	11 f4       	brne	.+4      	; 0x1d124 <__fp_round+0x18>
   1d120:	60 ff       	sbrs	r22, 0
   1d122:	04 c0       	rjmp	.+8      	; 0x1d12c <__fp_round+0x20>
   1d124:	6f 5f       	subi	r22, 0xFF	; 255
   1d126:	7f 4f       	sbci	r23, 0xFF	; 255
   1d128:	8f 4f       	sbci	r24, 0xFF	; 255
   1d12a:	9f 4f       	sbci	r25, 0xFF	; 255
   1d12c:	08 95       	ret

0001d12e <__fp_split3>:
   1d12e:	57 fd       	sbrc	r21, 7
   1d130:	90 58       	subi	r25, 0x80	; 128
   1d132:	44 0f       	add	r20, r20
   1d134:	55 1f       	adc	r21, r21
   1d136:	59 f0       	breq	.+22     	; 0x1d14e <__fp_splitA+0x10>
   1d138:	5f 3f       	cpi	r21, 0xFF	; 255
   1d13a:	71 f0       	breq	.+28     	; 0x1d158 <__fp_splitA+0x1a>
   1d13c:	47 95       	ror	r20

0001d13e <__fp_splitA>:
   1d13e:	88 0f       	add	r24, r24
   1d140:	97 fb       	bst	r25, 7
   1d142:	99 1f       	adc	r25, r25
   1d144:	61 f0       	breq	.+24     	; 0x1d15e <__fp_splitA+0x20>
   1d146:	9f 3f       	cpi	r25, 0xFF	; 255
   1d148:	79 f0       	breq	.+30     	; 0x1d168 <__fp_splitA+0x2a>
   1d14a:	87 95       	ror	r24
   1d14c:	08 95       	ret
   1d14e:	12 16       	cp	r1, r18
   1d150:	13 06       	cpc	r1, r19
   1d152:	14 06       	cpc	r1, r20
   1d154:	55 1f       	adc	r21, r21
   1d156:	f2 cf       	rjmp	.-28     	; 0x1d13c <__fp_split3+0xe>
   1d158:	46 95       	lsr	r20
   1d15a:	f1 df       	rcall	.-30     	; 0x1d13e <__fp_splitA>
   1d15c:	08 c0       	rjmp	.+16     	; 0x1d16e <__fp_splitA+0x30>
   1d15e:	16 16       	cp	r1, r22
   1d160:	17 06       	cpc	r1, r23
   1d162:	18 06       	cpc	r1, r24
   1d164:	99 1f       	adc	r25, r25
   1d166:	f1 cf       	rjmp	.-30     	; 0x1d14a <__fp_splitA+0xc>
   1d168:	86 95       	lsr	r24
   1d16a:	71 05       	cpc	r23, r1
   1d16c:	61 05       	cpc	r22, r1
   1d16e:	08 94       	sec
   1d170:	08 95       	ret

0001d172 <__fp_zero>:
   1d172:	e8 94       	clt

0001d174 <__fp_szero>:
   1d174:	bb 27       	eor	r27, r27
   1d176:	66 27       	eor	r22, r22
   1d178:	77 27       	eor	r23, r23
   1d17a:	cb 01       	movw	r24, r22
   1d17c:	97 f9       	bld	r25, 7
   1d17e:	08 95       	ret

0001d180 <__gesf2>:
   1d180:	8a df       	rcall	.-236    	; 0x1d096 <__fp_cmp>
   1d182:	08 f4       	brcc	.+2      	; 0x1d186 <__gesf2+0x6>
   1d184:	8f ef       	ldi	r24, 0xFF	; 255
   1d186:	08 95       	ret

0001d188 <__mulsf3>:
   1d188:	0b d0       	rcall	.+22     	; 0x1d1a0 <__mulsf3x>
   1d18a:	c0 cf       	rjmp	.-128    	; 0x1d10c <__fp_round>
   1d18c:	b1 df       	rcall	.-158    	; 0x1d0f0 <__fp_pscA>
   1d18e:	28 f0       	brcs	.+10     	; 0x1d19a <__mulsf3+0x12>
   1d190:	b6 df       	rcall	.-148    	; 0x1d0fe <__fp_pscB>
   1d192:	18 f0       	brcs	.+6      	; 0x1d19a <__mulsf3+0x12>
   1d194:	95 23       	and	r25, r21
   1d196:	09 f0       	breq	.+2      	; 0x1d19a <__mulsf3+0x12>
   1d198:	a2 cf       	rjmp	.-188    	; 0x1d0de <__fp_inf>
   1d19a:	a7 cf       	rjmp	.-178    	; 0x1d0ea <__fp_nan>
   1d19c:	11 24       	eor	r1, r1
   1d19e:	ea cf       	rjmp	.-44     	; 0x1d174 <__fp_szero>

0001d1a0 <__mulsf3x>:
   1d1a0:	c6 df       	rcall	.-116    	; 0x1d12e <__fp_split3>
   1d1a2:	a0 f3       	brcs	.-24     	; 0x1d18c <__mulsf3+0x4>

0001d1a4 <__mulsf3_pse>:
   1d1a4:	95 9f       	mul	r25, r21
   1d1a6:	d1 f3       	breq	.-12     	; 0x1d19c <__mulsf3+0x14>
   1d1a8:	95 0f       	add	r25, r21
   1d1aa:	50 e0       	ldi	r21, 0x00	; 0
   1d1ac:	55 1f       	adc	r21, r21
   1d1ae:	62 9f       	mul	r22, r18
   1d1b0:	f0 01       	movw	r30, r0
   1d1b2:	72 9f       	mul	r23, r18
   1d1b4:	bb 27       	eor	r27, r27
   1d1b6:	f0 0d       	add	r31, r0
   1d1b8:	b1 1d       	adc	r27, r1
   1d1ba:	63 9f       	mul	r22, r19
   1d1bc:	aa 27       	eor	r26, r26
   1d1be:	f0 0d       	add	r31, r0
   1d1c0:	b1 1d       	adc	r27, r1
   1d1c2:	aa 1f       	adc	r26, r26
   1d1c4:	64 9f       	mul	r22, r20
   1d1c6:	66 27       	eor	r22, r22
   1d1c8:	b0 0d       	add	r27, r0
   1d1ca:	a1 1d       	adc	r26, r1
   1d1cc:	66 1f       	adc	r22, r22
   1d1ce:	82 9f       	mul	r24, r18
   1d1d0:	22 27       	eor	r18, r18
   1d1d2:	b0 0d       	add	r27, r0
   1d1d4:	a1 1d       	adc	r26, r1
   1d1d6:	62 1f       	adc	r22, r18
   1d1d8:	73 9f       	mul	r23, r19
   1d1da:	b0 0d       	add	r27, r0
   1d1dc:	a1 1d       	adc	r26, r1
   1d1de:	62 1f       	adc	r22, r18
   1d1e0:	83 9f       	mul	r24, r19
   1d1e2:	a0 0d       	add	r26, r0
   1d1e4:	61 1d       	adc	r22, r1
   1d1e6:	22 1f       	adc	r18, r18
   1d1e8:	74 9f       	mul	r23, r20
   1d1ea:	33 27       	eor	r19, r19
   1d1ec:	a0 0d       	add	r26, r0
   1d1ee:	61 1d       	adc	r22, r1
   1d1f0:	23 1f       	adc	r18, r19
   1d1f2:	84 9f       	mul	r24, r20
   1d1f4:	60 0d       	add	r22, r0
   1d1f6:	21 1d       	adc	r18, r1
   1d1f8:	82 2f       	mov	r24, r18
   1d1fa:	76 2f       	mov	r23, r22
   1d1fc:	6a 2f       	mov	r22, r26
   1d1fe:	11 24       	eor	r1, r1
   1d200:	9f 57       	subi	r25, 0x7F	; 127
   1d202:	50 40       	sbci	r21, 0x00	; 0
   1d204:	8a f0       	brmi	.+34     	; 0x1d228 <__mulsf3_pse+0x84>
   1d206:	e1 f0       	breq	.+56     	; 0x1d240 <__mulsf3_pse+0x9c>
   1d208:	88 23       	and	r24, r24
   1d20a:	4a f0       	brmi	.+18     	; 0x1d21e <__mulsf3_pse+0x7a>
   1d20c:	ee 0f       	add	r30, r30
   1d20e:	ff 1f       	adc	r31, r31
   1d210:	bb 1f       	adc	r27, r27
   1d212:	66 1f       	adc	r22, r22
   1d214:	77 1f       	adc	r23, r23
   1d216:	88 1f       	adc	r24, r24
   1d218:	91 50       	subi	r25, 0x01	; 1
   1d21a:	50 40       	sbci	r21, 0x00	; 0
   1d21c:	a9 f7       	brne	.-22     	; 0x1d208 <__mulsf3_pse+0x64>
   1d21e:	9e 3f       	cpi	r25, 0xFE	; 254
   1d220:	51 05       	cpc	r21, r1
   1d222:	70 f0       	brcs	.+28     	; 0x1d240 <__mulsf3_pse+0x9c>
   1d224:	5c cf       	rjmp	.-328    	; 0x1d0de <__fp_inf>
   1d226:	a6 cf       	rjmp	.-180    	; 0x1d174 <__fp_szero>
   1d228:	5f 3f       	cpi	r21, 0xFF	; 255
   1d22a:	ec f3       	brlt	.-6      	; 0x1d226 <__mulsf3_pse+0x82>
   1d22c:	98 3e       	cpi	r25, 0xE8	; 232
   1d22e:	dc f3       	brlt	.-10     	; 0x1d226 <__mulsf3_pse+0x82>
   1d230:	86 95       	lsr	r24
   1d232:	77 95       	ror	r23
   1d234:	67 95       	ror	r22
   1d236:	b7 95       	ror	r27
   1d238:	f7 95       	ror	r31
   1d23a:	e7 95       	ror	r30
   1d23c:	9f 5f       	subi	r25, 0xFF	; 255
   1d23e:	c1 f7       	brne	.-16     	; 0x1d230 <__mulsf3_pse+0x8c>
   1d240:	fe 2b       	or	r31, r30
   1d242:	88 0f       	add	r24, r24
   1d244:	91 1d       	adc	r25, r1
   1d246:	96 95       	lsr	r25
   1d248:	87 95       	ror	r24
   1d24a:	97 f9       	bld	r25, 7
   1d24c:	08 95       	ret

0001d24e <round>:
   1d24e:	77 df       	rcall	.-274    	; 0x1d13e <__fp_splitA>
   1d250:	e0 f0       	brcs	.+56     	; 0x1d28a <round+0x3c>
   1d252:	9e 37       	cpi	r25, 0x7E	; 126
   1d254:	d8 f0       	brcs	.+54     	; 0x1d28c <round+0x3e>
   1d256:	96 39       	cpi	r25, 0x96	; 150
   1d258:	b8 f4       	brcc	.+46     	; 0x1d288 <round+0x3a>
   1d25a:	9e 38       	cpi	r25, 0x8E	; 142
   1d25c:	48 f4       	brcc	.+18     	; 0x1d270 <round+0x22>
   1d25e:	67 2f       	mov	r22, r23
   1d260:	78 2f       	mov	r23, r24
   1d262:	88 27       	eor	r24, r24
   1d264:	98 5f       	subi	r25, 0xF8	; 248
   1d266:	f9 cf       	rjmp	.-14     	; 0x1d25a <round+0xc>
   1d268:	86 95       	lsr	r24
   1d26a:	77 95       	ror	r23
   1d26c:	67 95       	ror	r22
   1d26e:	93 95       	inc	r25
   1d270:	95 39       	cpi	r25, 0x95	; 149
   1d272:	d0 f3       	brcs	.-12     	; 0x1d268 <round+0x1a>
   1d274:	b6 2f       	mov	r27, r22
   1d276:	b1 70       	andi	r27, 0x01	; 1
   1d278:	6b 0f       	add	r22, r27
   1d27a:	71 1d       	adc	r23, r1
   1d27c:	81 1d       	adc	r24, r1
   1d27e:	20 f4       	brcc	.+8      	; 0x1d288 <round+0x3a>
   1d280:	87 95       	ror	r24
   1d282:	77 95       	ror	r23
   1d284:	67 95       	ror	r22
   1d286:	93 95       	inc	r25
   1d288:	02 c0       	rjmp	.+4      	; 0x1d28e <__fp_mintl>
   1d28a:	1c c0       	rjmp	.+56     	; 0x1d2c4 <__fp_mpack>
   1d28c:	73 cf       	rjmp	.-282    	; 0x1d174 <__fp_szero>

0001d28e <__fp_mintl>:
   1d28e:	88 23       	and	r24, r24
   1d290:	71 f4       	brne	.+28     	; 0x1d2ae <__fp_mintl+0x20>
   1d292:	77 23       	and	r23, r23
   1d294:	21 f0       	breq	.+8      	; 0x1d29e <__fp_mintl+0x10>
   1d296:	98 50       	subi	r25, 0x08	; 8
   1d298:	87 2b       	or	r24, r23
   1d29a:	76 2f       	mov	r23, r22
   1d29c:	07 c0       	rjmp	.+14     	; 0x1d2ac <__fp_mintl+0x1e>
   1d29e:	66 23       	and	r22, r22
   1d2a0:	11 f4       	brne	.+4      	; 0x1d2a6 <__fp_mintl+0x18>
   1d2a2:	99 27       	eor	r25, r25
   1d2a4:	0d c0       	rjmp	.+26     	; 0x1d2c0 <__fp_mintl+0x32>
   1d2a6:	90 51       	subi	r25, 0x10	; 16
   1d2a8:	86 2b       	or	r24, r22
   1d2aa:	70 e0       	ldi	r23, 0x00	; 0
   1d2ac:	60 e0       	ldi	r22, 0x00	; 0
   1d2ae:	2a f0       	brmi	.+10     	; 0x1d2ba <__fp_mintl+0x2c>
   1d2b0:	9a 95       	dec	r25
   1d2b2:	66 0f       	add	r22, r22
   1d2b4:	77 1f       	adc	r23, r23
   1d2b6:	88 1f       	adc	r24, r24
   1d2b8:	da f7       	brpl	.-10     	; 0x1d2b0 <__fp_mintl+0x22>
   1d2ba:	88 0f       	add	r24, r24
   1d2bc:	96 95       	lsr	r25
   1d2be:	87 95       	ror	r24
   1d2c0:	97 f9       	bld	r25, 7
   1d2c2:	08 95       	ret

0001d2c4 <__fp_mpack>:
   1d2c4:	9f 3f       	cpi	r25, 0xFF	; 255
   1d2c6:	31 f0       	breq	.+12     	; 0x1d2d4 <__fp_mpack_finite+0xc>

0001d2c8 <__fp_mpack_finite>:
   1d2c8:	91 50       	subi	r25, 0x01	; 1
   1d2ca:	20 f4       	brcc	.+8      	; 0x1d2d4 <__fp_mpack_finite+0xc>
   1d2cc:	87 95       	ror	r24
   1d2ce:	77 95       	ror	r23
   1d2d0:	67 95       	ror	r22
   1d2d2:	b7 95       	ror	r27
   1d2d4:	88 0f       	add	r24, r24
   1d2d6:	91 1d       	adc	r25, r1
   1d2d8:	96 95       	lsr	r25
   1d2da:	87 95       	ror	r24
   1d2dc:	97 f9       	bld	r25, 7
   1d2de:	08 95       	ret

0001d2e0 <calloc>:
   1d2e0:	0f 93       	push	r16
   1d2e2:	1f 93       	push	r17
   1d2e4:	cf 93       	push	r28
   1d2e6:	df 93       	push	r29
   1d2e8:	86 9f       	mul	r24, r22
   1d2ea:	80 01       	movw	r16, r0
   1d2ec:	87 9f       	mul	r24, r23
   1d2ee:	10 0d       	add	r17, r0
   1d2f0:	96 9f       	mul	r25, r22
   1d2f2:	10 0d       	add	r17, r0
   1d2f4:	11 24       	eor	r1, r1
   1d2f6:	c8 01       	movw	r24, r16
   1d2f8:	0d d0       	rcall	.+26     	; 0x1d314 <malloc>
   1d2fa:	ec 01       	movw	r28, r24
   1d2fc:	00 97       	sbiw	r24, 0x00	; 0
   1d2fe:	21 f0       	breq	.+8      	; 0x1d308 <calloc+0x28>
   1d300:	a8 01       	movw	r20, r16
   1d302:	60 e0       	ldi	r22, 0x00	; 0
   1d304:	70 e0       	ldi	r23, 0x00	; 0
   1d306:	27 d1       	rcall	.+590    	; 0x1d556 <memset>
   1d308:	ce 01       	movw	r24, r28
   1d30a:	df 91       	pop	r29
   1d30c:	cf 91       	pop	r28
   1d30e:	1f 91       	pop	r17
   1d310:	0f 91       	pop	r16
   1d312:	08 95       	ret

0001d314 <malloc>:
   1d314:	0f 93       	push	r16
   1d316:	1f 93       	push	r17
   1d318:	cf 93       	push	r28
   1d31a:	df 93       	push	r29
   1d31c:	82 30       	cpi	r24, 0x02	; 2
   1d31e:	91 05       	cpc	r25, r1
   1d320:	10 f4       	brcc	.+4      	; 0x1d326 <malloc+0x12>
   1d322:	82 e0       	ldi	r24, 0x02	; 2
   1d324:	90 e0       	ldi	r25, 0x00	; 0
   1d326:	e0 91 36 20 	lds	r30, 0x2036	; 0x802036 <__flp>
   1d32a:	f0 91 37 20 	lds	r31, 0x2037	; 0x802037 <__flp+0x1>
   1d32e:	20 e0       	ldi	r18, 0x00	; 0
   1d330:	30 e0       	ldi	r19, 0x00	; 0
   1d332:	a0 e0       	ldi	r26, 0x00	; 0
   1d334:	b0 e0       	ldi	r27, 0x00	; 0
   1d336:	30 97       	sbiw	r30, 0x00	; 0
   1d338:	19 f1       	breq	.+70     	; 0x1d380 <malloc+0x6c>
   1d33a:	40 81       	ld	r20, Z
   1d33c:	51 81       	ldd	r21, Z+1	; 0x01
   1d33e:	02 81       	ldd	r16, Z+2	; 0x02
   1d340:	13 81       	ldd	r17, Z+3	; 0x03
   1d342:	48 17       	cp	r20, r24
   1d344:	59 07       	cpc	r21, r25
   1d346:	c8 f0       	brcs	.+50     	; 0x1d37a <malloc+0x66>
   1d348:	84 17       	cp	r24, r20
   1d34a:	95 07       	cpc	r25, r21
   1d34c:	69 f4       	brne	.+26     	; 0x1d368 <malloc+0x54>
   1d34e:	10 97       	sbiw	r26, 0x00	; 0
   1d350:	31 f0       	breq	.+12     	; 0x1d35e <malloc+0x4a>
   1d352:	12 96       	adiw	r26, 0x02	; 2
   1d354:	0c 93       	st	X, r16
   1d356:	12 97       	sbiw	r26, 0x02	; 2
   1d358:	13 96       	adiw	r26, 0x03	; 3
   1d35a:	1c 93       	st	X, r17
   1d35c:	27 c0       	rjmp	.+78     	; 0x1d3ac <malloc+0x98>
   1d35e:	00 93 36 20 	sts	0x2036, r16	; 0x802036 <__flp>
   1d362:	10 93 37 20 	sts	0x2037, r17	; 0x802037 <__flp+0x1>
   1d366:	22 c0       	rjmp	.+68     	; 0x1d3ac <malloc+0x98>
   1d368:	21 15       	cp	r18, r1
   1d36a:	31 05       	cpc	r19, r1
   1d36c:	19 f0       	breq	.+6      	; 0x1d374 <malloc+0x60>
   1d36e:	42 17       	cp	r20, r18
   1d370:	53 07       	cpc	r21, r19
   1d372:	18 f4       	brcc	.+6      	; 0x1d37a <malloc+0x66>
   1d374:	9a 01       	movw	r18, r20
   1d376:	bd 01       	movw	r22, r26
   1d378:	ef 01       	movw	r28, r30
   1d37a:	df 01       	movw	r26, r30
   1d37c:	f8 01       	movw	r30, r16
   1d37e:	db cf       	rjmp	.-74     	; 0x1d336 <malloc+0x22>
   1d380:	21 15       	cp	r18, r1
   1d382:	31 05       	cpc	r19, r1
   1d384:	f9 f0       	breq	.+62     	; 0x1d3c4 <malloc+0xb0>
   1d386:	28 1b       	sub	r18, r24
   1d388:	39 0b       	sbc	r19, r25
   1d38a:	24 30       	cpi	r18, 0x04	; 4
   1d38c:	31 05       	cpc	r19, r1
   1d38e:	80 f4       	brcc	.+32     	; 0x1d3b0 <malloc+0x9c>
   1d390:	8a 81       	ldd	r24, Y+2	; 0x02
   1d392:	9b 81       	ldd	r25, Y+3	; 0x03
   1d394:	61 15       	cp	r22, r1
   1d396:	71 05       	cpc	r23, r1
   1d398:	21 f0       	breq	.+8      	; 0x1d3a2 <malloc+0x8e>
   1d39a:	fb 01       	movw	r30, r22
   1d39c:	93 83       	std	Z+3, r25	; 0x03
   1d39e:	82 83       	std	Z+2, r24	; 0x02
   1d3a0:	04 c0       	rjmp	.+8      	; 0x1d3aa <malloc+0x96>
   1d3a2:	90 93 37 20 	sts	0x2037, r25	; 0x802037 <__flp+0x1>
   1d3a6:	80 93 36 20 	sts	0x2036, r24	; 0x802036 <__flp>
   1d3aa:	fe 01       	movw	r30, r28
   1d3ac:	32 96       	adiw	r30, 0x02	; 2
   1d3ae:	44 c0       	rjmp	.+136    	; 0x1d438 <malloc+0x124>
   1d3b0:	fe 01       	movw	r30, r28
   1d3b2:	e2 0f       	add	r30, r18
   1d3b4:	f3 1f       	adc	r31, r19
   1d3b6:	81 93       	st	Z+, r24
   1d3b8:	91 93       	st	Z+, r25
   1d3ba:	22 50       	subi	r18, 0x02	; 2
   1d3bc:	31 09       	sbc	r19, r1
   1d3be:	39 83       	std	Y+1, r19	; 0x01
   1d3c0:	28 83       	st	Y, r18
   1d3c2:	3a c0       	rjmp	.+116    	; 0x1d438 <malloc+0x124>
   1d3c4:	20 91 34 20 	lds	r18, 0x2034	; 0x802034 <__brkval>
   1d3c8:	30 91 35 20 	lds	r19, 0x2035	; 0x802035 <__brkval+0x1>
   1d3cc:	23 2b       	or	r18, r19
   1d3ce:	41 f4       	brne	.+16     	; 0x1d3e0 <malloc+0xcc>
   1d3d0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1d3d4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1d3d8:	30 93 35 20 	sts	0x2035, r19	; 0x802035 <__brkval+0x1>
   1d3dc:	20 93 34 20 	sts	0x2034, r18	; 0x802034 <__brkval>
   1d3e0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1d3e4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1d3e8:	21 15       	cp	r18, r1
   1d3ea:	31 05       	cpc	r19, r1
   1d3ec:	41 f4       	brne	.+16     	; 0x1d3fe <malloc+0xea>
   1d3ee:	2d b7       	in	r18, 0x3d	; 61
   1d3f0:	3e b7       	in	r19, 0x3e	; 62
   1d3f2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1d3f6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1d3fa:	24 1b       	sub	r18, r20
   1d3fc:	35 0b       	sbc	r19, r21
   1d3fe:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <__brkval>
   1d402:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <__brkval+0x1>
   1d406:	e2 17       	cp	r30, r18
   1d408:	f3 07       	cpc	r31, r19
   1d40a:	a0 f4       	brcc	.+40     	; 0x1d434 <malloc+0x120>
   1d40c:	2e 1b       	sub	r18, r30
   1d40e:	3f 0b       	sbc	r19, r31
   1d410:	28 17       	cp	r18, r24
   1d412:	39 07       	cpc	r19, r25
   1d414:	78 f0       	brcs	.+30     	; 0x1d434 <malloc+0x120>
   1d416:	ac 01       	movw	r20, r24
   1d418:	4e 5f       	subi	r20, 0xFE	; 254
   1d41a:	5f 4f       	sbci	r21, 0xFF	; 255
   1d41c:	24 17       	cp	r18, r20
   1d41e:	35 07       	cpc	r19, r21
   1d420:	48 f0       	brcs	.+18     	; 0x1d434 <malloc+0x120>
   1d422:	4e 0f       	add	r20, r30
   1d424:	5f 1f       	adc	r21, r31
   1d426:	50 93 35 20 	sts	0x2035, r21	; 0x802035 <__brkval+0x1>
   1d42a:	40 93 34 20 	sts	0x2034, r20	; 0x802034 <__brkval>
   1d42e:	81 93       	st	Z+, r24
   1d430:	91 93       	st	Z+, r25
   1d432:	02 c0       	rjmp	.+4      	; 0x1d438 <malloc+0x124>
   1d434:	e0 e0       	ldi	r30, 0x00	; 0
   1d436:	f0 e0       	ldi	r31, 0x00	; 0
   1d438:	cf 01       	movw	r24, r30
   1d43a:	df 91       	pop	r29
   1d43c:	cf 91       	pop	r28
   1d43e:	1f 91       	pop	r17
   1d440:	0f 91       	pop	r16
   1d442:	08 95       	ret

0001d444 <free>:
   1d444:	cf 93       	push	r28
   1d446:	df 93       	push	r29
   1d448:	00 97       	sbiw	r24, 0x00	; 0
   1d44a:	09 f4       	brne	.+2      	; 0x1d44e <free+0xa>
   1d44c:	81 c0       	rjmp	.+258    	; 0x1d550 <free+0x10c>
   1d44e:	fc 01       	movw	r30, r24
   1d450:	32 97       	sbiw	r30, 0x02	; 2
   1d452:	13 82       	std	Z+3, r1	; 0x03
   1d454:	12 82       	std	Z+2, r1	; 0x02
   1d456:	a0 91 36 20 	lds	r26, 0x2036	; 0x802036 <__flp>
   1d45a:	b0 91 37 20 	lds	r27, 0x2037	; 0x802037 <__flp+0x1>
   1d45e:	10 97       	sbiw	r26, 0x00	; 0
   1d460:	81 f4       	brne	.+32     	; 0x1d482 <free+0x3e>
   1d462:	20 81       	ld	r18, Z
   1d464:	31 81       	ldd	r19, Z+1	; 0x01
   1d466:	82 0f       	add	r24, r18
   1d468:	93 1f       	adc	r25, r19
   1d46a:	20 91 34 20 	lds	r18, 0x2034	; 0x802034 <__brkval>
   1d46e:	30 91 35 20 	lds	r19, 0x2035	; 0x802035 <__brkval+0x1>
   1d472:	28 17       	cp	r18, r24
   1d474:	39 07       	cpc	r19, r25
   1d476:	51 f5       	brne	.+84     	; 0x1d4cc <free+0x88>
   1d478:	f0 93 35 20 	sts	0x2035, r31	; 0x802035 <__brkval+0x1>
   1d47c:	e0 93 34 20 	sts	0x2034, r30	; 0x802034 <__brkval>
   1d480:	67 c0       	rjmp	.+206    	; 0x1d550 <free+0x10c>
   1d482:	ed 01       	movw	r28, r26
   1d484:	20 e0       	ldi	r18, 0x00	; 0
   1d486:	30 e0       	ldi	r19, 0x00	; 0
   1d488:	ce 17       	cp	r28, r30
   1d48a:	df 07       	cpc	r29, r31
   1d48c:	40 f4       	brcc	.+16     	; 0x1d49e <free+0x5a>
   1d48e:	4a 81       	ldd	r20, Y+2	; 0x02
   1d490:	5b 81       	ldd	r21, Y+3	; 0x03
   1d492:	9e 01       	movw	r18, r28
   1d494:	41 15       	cp	r20, r1
   1d496:	51 05       	cpc	r21, r1
   1d498:	f1 f0       	breq	.+60     	; 0x1d4d6 <free+0x92>
   1d49a:	ea 01       	movw	r28, r20
   1d49c:	f5 cf       	rjmp	.-22     	; 0x1d488 <free+0x44>
   1d49e:	d3 83       	std	Z+3, r29	; 0x03
   1d4a0:	c2 83       	std	Z+2, r28	; 0x02
   1d4a2:	40 81       	ld	r20, Z
   1d4a4:	51 81       	ldd	r21, Z+1	; 0x01
   1d4a6:	84 0f       	add	r24, r20
   1d4a8:	95 1f       	adc	r25, r21
   1d4aa:	c8 17       	cp	r28, r24
   1d4ac:	d9 07       	cpc	r29, r25
   1d4ae:	59 f4       	brne	.+22     	; 0x1d4c6 <free+0x82>
   1d4b0:	88 81       	ld	r24, Y
   1d4b2:	99 81       	ldd	r25, Y+1	; 0x01
   1d4b4:	84 0f       	add	r24, r20
   1d4b6:	95 1f       	adc	r25, r21
   1d4b8:	02 96       	adiw	r24, 0x02	; 2
   1d4ba:	91 83       	std	Z+1, r25	; 0x01
   1d4bc:	80 83       	st	Z, r24
   1d4be:	8a 81       	ldd	r24, Y+2	; 0x02
   1d4c0:	9b 81       	ldd	r25, Y+3	; 0x03
   1d4c2:	93 83       	std	Z+3, r25	; 0x03
   1d4c4:	82 83       	std	Z+2, r24	; 0x02
   1d4c6:	21 15       	cp	r18, r1
   1d4c8:	31 05       	cpc	r19, r1
   1d4ca:	29 f4       	brne	.+10     	; 0x1d4d6 <free+0x92>
   1d4cc:	f0 93 37 20 	sts	0x2037, r31	; 0x802037 <__flp+0x1>
   1d4d0:	e0 93 36 20 	sts	0x2036, r30	; 0x802036 <__flp>
   1d4d4:	3d c0       	rjmp	.+122    	; 0x1d550 <free+0x10c>
   1d4d6:	e9 01       	movw	r28, r18
   1d4d8:	fb 83       	std	Y+3, r31	; 0x03
   1d4da:	ea 83       	std	Y+2, r30	; 0x02
   1d4dc:	49 91       	ld	r20, Y+
   1d4de:	59 91       	ld	r21, Y+
   1d4e0:	c4 0f       	add	r28, r20
   1d4e2:	d5 1f       	adc	r29, r21
   1d4e4:	ec 17       	cp	r30, r28
   1d4e6:	fd 07       	cpc	r31, r29
   1d4e8:	61 f4       	brne	.+24     	; 0x1d502 <free+0xbe>
   1d4ea:	80 81       	ld	r24, Z
   1d4ec:	91 81       	ldd	r25, Z+1	; 0x01
   1d4ee:	84 0f       	add	r24, r20
   1d4f0:	95 1f       	adc	r25, r21
   1d4f2:	02 96       	adiw	r24, 0x02	; 2
   1d4f4:	e9 01       	movw	r28, r18
   1d4f6:	99 83       	std	Y+1, r25	; 0x01
   1d4f8:	88 83       	st	Y, r24
   1d4fa:	82 81       	ldd	r24, Z+2	; 0x02
   1d4fc:	93 81       	ldd	r25, Z+3	; 0x03
   1d4fe:	9b 83       	std	Y+3, r25	; 0x03
   1d500:	8a 83       	std	Y+2, r24	; 0x02
   1d502:	e0 e0       	ldi	r30, 0x00	; 0
   1d504:	f0 e0       	ldi	r31, 0x00	; 0
   1d506:	12 96       	adiw	r26, 0x02	; 2
   1d508:	8d 91       	ld	r24, X+
   1d50a:	9c 91       	ld	r25, X
   1d50c:	13 97       	sbiw	r26, 0x03	; 3
   1d50e:	00 97       	sbiw	r24, 0x00	; 0
   1d510:	19 f0       	breq	.+6      	; 0x1d518 <free+0xd4>
   1d512:	fd 01       	movw	r30, r26
   1d514:	dc 01       	movw	r26, r24
   1d516:	f7 cf       	rjmp	.-18     	; 0x1d506 <free+0xc2>
   1d518:	8d 91       	ld	r24, X+
   1d51a:	9c 91       	ld	r25, X
   1d51c:	11 97       	sbiw	r26, 0x01	; 1
   1d51e:	9d 01       	movw	r18, r26
   1d520:	2e 5f       	subi	r18, 0xFE	; 254
   1d522:	3f 4f       	sbci	r19, 0xFF	; 255
   1d524:	82 0f       	add	r24, r18
   1d526:	93 1f       	adc	r25, r19
   1d528:	20 91 34 20 	lds	r18, 0x2034	; 0x802034 <__brkval>
   1d52c:	30 91 35 20 	lds	r19, 0x2035	; 0x802035 <__brkval+0x1>
   1d530:	28 17       	cp	r18, r24
   1d532:	39 07       	cpc	r19, r25
   1d534:	69 f4       	brne	.+26     	; 0x1d550 <free+0x10c>
   1d536:	30 97       	sbiw	r30, 0x00	; 0
   1d538:	29 f4       	brne	.+10     	; 0x1d544 <free+0x100>
   1d53a:	10 92 37 20 	sts	0x2037, r1	; 0x802037 <__flp+0x1>
   1d53e:	10 92 36 20 	sts	0x2036, r1	; 0x802036 <__flp>
   1d542:	02 c0       	rjmp	.+4      	; 0x1d548 <free+0x104>
   1d544:	13 82       	std	Z+3, r1	; 0x03
   1d546:	12 82       	std	Z+2, r1	; 0x02
   1d548:	b0 93 35 20 	sts	0x2035, r27	; 0x802035 <__brkval+0x1>
   1d54c:	a0 93 34 20 	sts	0x2034, r26	; 0x802034 <__brkval>
   1d550:	df 91       	pop	r29
   1d552:	cf 91       	pop	r28
   1d554:	08 95       	ret

0001d556 <memset>:
   1d556:	dc 01       	movw	r26, r24
   1d558:	01 c0       	rjmp	.+2      	; 0x1d55c <memset+0x6>
   1d55a:	6d 93       	st	X+, r22
   1d55c:	41 50       	subi	r20, 0x01	; 1
   1d55e:	50 40       	sbci	r21, 0x00	; 0
   1d560:	e0 f7       	brcc	.-8      	; 0x1d55a <memset+0x4>
   1d562:	08 95       	ret

0001d564 <_exit>:
   1d564:	f8 94       	cli

0001d566 <__stop_program>:
   1d566:	ff cf       	rjmp	.-2      	; 0x1d566 <__stop_program>
