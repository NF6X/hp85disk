
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001646  00800100  0001d4e6  0001d57a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d4e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000962  00801746  00801746  0001ebc0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001ebc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001ebd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001768  00000000  00000000  0001ec14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00027c2e  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000062e9  00000000  00000000  00047faa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001202f  00000000  00000000  0004e293  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000611c  00000000  00000000  000602c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000474b  00000000  00000000  000663e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00026db6  00000000  00000000  0006ab2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001768  00000000  00000000  000918e1  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
00801746 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000002d8 l     O .text	0000001e __c.3699
000002f6 l     O .text	0000001d __c.3694
00000000 l    df *ABS*	00000000 LCD.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800107 l     O .data	00000001 lcd_address
00800109 l     O .data	00000001 _displayControl
00800108 l     O .data	00000001 _displayMode
00000000 l    df *ABS*	00000000 lcd_printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000062b8 l     F .text	00000016 _putc_win
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006db0 l     F .text	0000002a IS_Leap
00800263 l     O .data	00000018 __days
00801796 l     O .bss	00000016 t.3753
008017ac l     O .bss	00000002 p.3754
00801778 l     O .bss	00000008 ts.3832
00801780 l     O .bss	00000016 t.3765
0080027b l     O .data	0000001a __days_sum
00000772 l     O .text	00000012 __c.3872
00000761 l     O .text	00000011 __c.3874
00000750 l     O .text	00000011 __c.3876
0000073e l     O .text	00000012 __c.3878
0000072d l     O .text	00000011 __c.3880
00000716 l     O .text	00000017 __c.3882
00000784 l     O .text	00000021 __c.3851
000007a5 l     O .text	0000001d __c.3726
008017ee l     O .bss	00000020 buf.3731
008017ce l     O .bss	00000020 buf.3739
008017ae l     O .bss	00000020 buf.3743
000006fd l     O .text	00000019 __c.3911
000006e4 l     O .text	00000019 __c.3913
000006cb l     O .text	00000019 __c.3917
000006b2 l     O .text	00000019 __c.3919
000006a0 l     O .text	00000012 __c.3928
0000068b l     O .text	00000015 __c.3930
00000674 l     O .text	00000017 __c.3932
0000065a l     O .text	0000001a __c.3934
00000636 l     O .text	00000024 __c.3936
00000624 l     O .text	00000012 __c.3943
00000613 l     O .text	00000011 __c.3945
00000602 l     O .text	00000011 __c.3947
000005f0 l     O .text	00000012 __c.3949
000005df l     O .text	00000011 __c.3951
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000d5fe l     F .text	00000004 xchg_spi
0000d602 l     F .text	0000000c deselect
0000d60e l     F .text	0000004e rcvr_datablock
0000d680 l     F .text	0000003a select
000007c2 l     O .text	00000010 __c.3694
0000d6ba l     F .text	00000086 send_cmd
0000d740 l     F .text	00000054 xmit_datablock
00801813 l     O .bss	00000001 CardType
00801815 l     O .bss	00000001 Timer1
00801814 l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800710 l     O .data	00000014 CSWTCH.97
00000c7e l     O .text	00000018 __c.3671
00000c66 l     O .text	00000018 __c.3678
0000ed5a l     F .text	0000001a _fprintf_putc
00000c4d l     O .text	0000000d __c.3870
00000c44 l     O .text	00000009 __c.3872
00000c3f l     O .text	00000005 __c.3874
00000c39 l     O .text	00000006 __c.3876
00000c30 l     O .text	00000009 __c.3878
00000c23 l     O .text	0000000d __c.3880
00000c16 l     O .text	0000000d __c.3882
00000c09 l     O .text	0000000d __c.3884
00000bfd l     O .text	0000000c __c.3886
00000bf1 l     O .text	0000000c __c.3888
00000be5 l     O .text	0000000c __c.3890
0080182d l     O .bss	0000002e _dp
00801820 l     O .bss	0000000d _de
00000bdd l     O .text	00000008 __c.3994
00000bd9 l     O .text	00000004 __c.3996
00000bba l     O .text	0000001f __c.4025
00800724 l     O .data	0000000a defopt.4023
00000c5a l     O .text	0000000c __c.3749
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000ea8 l     O .text	0000000c __c.3695
00000de8 l     O .text	000000c0 __c.3697
00000dbb l     O .text	0000000c __c.3748
00000dab l     O .text	00000010 __c.3750
00000d9e l     O .text	0000000d __c.3752
00000d8e l     O .text	00000010 __c.3754
00000d81 l     O .text	0000000d __c.3756
00000d65 l     O .text	0000000f __c.3761
00000d74 l     O .text	0000000d __c.3758
00000d52 l     O .text	00000013 __c.3765
00800187 l     O .data	00000002 _pagesize
00000d4b l     O .text	00000007 __c.3775
00000d49 l     O .text	00000002 __c.3777
00000dd4 l     O .text	00000010 __c.3730
00000dd2 l     O .text	00000002 __c.3735
00000dc7 l     O .text	0000000b __c.3737
00000d37 l     O .text	00000012 __c.3789
00000d33 l     O .text	00000004 __c.3791
00000d19 l     O .text	0000001a __c.3796
00000cf8 l     O .text	00000021 __c.3809
00000cea l     O .text	0000000e __c.3811
00000cd4 l     O .text	00000016 __c.3813
00000ca1 l     O .text	00000023 __c.3821
00000cc4 l     O .text	00000010 __c.3818
00000c96 l     O .text	0000000b __c.3825
00000de4 l     O .text	00000004 __c.3720
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000011b7 l     O .text	00000011 __c.4236
000011a4 l     O .text	00000013 __c.4241
0000117e l     O .text	00000026 __c.4246
00001163 l     O .text	0000001b __c.4248
0000113c l     O .text	00000027 __c.4253
00001121 l     O .text	0000001b __c.4255
000010fe l     O .text	00000023 __c.4261
000010f2 l     O .text	0000000c __c.4269
000010e7 l     O .text	0000000b __c.4274
000010dd l     O .text	0000000a __c.4276
000010af l     O .text	0000002e __c.4281
0000101d l     O .text	0000001a __c.4314
00001037 l     O .text	0000001b __c.4310
00001052 l     O .text	0000001b __c.4307
0000106d l     O .text	00000028 __c.4302
00001095 l     O .text	0000001a __c.4298
0000100a l     O .text	00000013 __c.4318
00001001 l     O .text	00000009 __c.4360
00000ffb l     O .text	00000006 __c.4362
00000ff0 l     O .text	0000000b __c.4366
00000fe5 l     O .text	0000000b __c.4368
00000fda l     O .text	0000000b __c.4370
00000fc1 l     O .text	00000019 __c.4386
00000f94 l     O .text	0000002d __c.4389
00000f6d l     O .text	00000027 __c.4393
00000f53 l     O .text	0000001a __c.4403
00000f2b l     O .text	00000028 __c.4408
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000147a l     O .text	00000012 __c.4220
00001469 l     O .text	00000011 __c.4222
00001450 l     O .text	00000019 __c.4224
00001436 l     O .text	0000001a __c.4270
0000140b l     O .text	0000002b __c.4272
000013f4 l     O .text	00000017 __c.4274
000013e8 l     O .text	0000000c __c.4276
000013e2 l     O .text	00000006 __c.4280
000013d0 l     O .text	00000012 __c.4282
000013c9 l     O .text	00000007 __c.4287
000013be l     O .text	0000000b __c.4289
000013b7 l     O .text	00000007 __c.4291
000013aa l     O .text	0000000d __c.4293
00001399 l     O .text	00000011 __c.4295
00001378 l     O .text	00000021 __c.4322
0000135e l     O .text	0000001a __c.4324
0000134b l     O .text	00000013 __c.4329
00001338 l     O .text	00000013 __c.4331
00001331 l     O .text	00000007 __c.4333
0000132a l     O .text	00000007 __c.4335
00001323 l     O .text	00000007 __c.4337
00001317 l     O .text	0000000c __c.4339
0000130a l     O .text	0000000d __c.4341
00001303 l     O .text	00000007 __c.4343
000012e7 l     O .text	0000001c __c.4345
00001294 l     O .text	00000007 __c.4365
00001283 l     O .text	00000011 __c.4367
00001271 l     O .text	00000012 __c.4369
0000125d l     O .text	00000014 __c.4371
0000124d l     O .text	00000010 __c.4373
00001241 l     O .text	0000000c __c.4375
00001230 l     O .text	00000011 __c.4380
0000121e l     O .text	00000012 __c.4382
000011f8 l     O .text	00000026 __c.4384
000011e7 l     O .text	00000011 __c.4389
000012e0 l     O .text	00000007 __c.4350
000012de l     O .text	00000002 __c.4352
000012cc l     O .text	00000012 __c.4354
000012bb l     O .text	00000011 __c.4356
000012a7 l     O .text	00000014 __c.4358
0000129b l     O .text	0000000c __c.4360
000011db l     O .text	0000000c __c.4400
000011d9 l     O .text	00000002 __c.4402
000011d3 l     O .text	00000006 __c.4404
000011cf l     O .text	00000004 __c.4409
000011ca l     O .text	00000002 __c.4413
000011cc l     O .text	00000003 __c.4411
000011c8 l     O .text	00000002 __c.4421
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002785 l     O .text	0000000d __c.4212
00002773 l     O .text	00000012 __c.4214
00801897 l     O .bss	00000005 B.4225
00801884 l     O .bss	00000013 B.4229
00801877 l     O .bss	0000000d B.4233
000025b2 l     O .text	00000005 __c.4336
000025a7 l     O .text	0000000b __c.4338
00002593 l     O .text	00000014 __c.4348
00002578 l     O .text	0000001b __c.4350
00002567 l     O .text	00000011 __c.4358
00002544 l     O .text	00000023 __c.4360
00002527 l     O .text	0000001d __c.4362
00002508 l     O .text	0000001f __c.4364
000024f0 l     O .text	00000018 __c.4369
000024d6 l     O .text	0000001a __c.4374
000024b0 l     O .text	00000026 __c.4383
00002497 l     O .text	00000019 __c.4385
0000239b l     O .text	00000025 __c.4407
000023c0 l     O .text	0000001a __c.4405
000023da l     O .text	00000016 __c.4403
000023f0 l     O .text	0000000e __c.4401
000023fe l     O .text	0000001c __c.4399
0000241a l     O .text	0000001d __c.4397
00002468 l     O .text	00000019 __c.4390
00002481 l     O .text	00000016 __c.4387
00002450 l     O .text	00000018 __c.4392
00002437 l     O .text	00000019 __c.4395
0000237a l     O .text	00000021 __c.4409
00002364 l     O .text	00000016 __c.4411
00002347 l     O .text	0000001d __c.4413
0000232b l     O .text	0000001c __c.4415
0000231a l     O .text	00000011 __c.4417
000022fc l     O .text	0000001e __c.4419
000022dd l     O .text	0000001f __c.4421
000022c2 l     O .text	0000001b __c.4423
000022a9 l     O .text	00000019 __c.4425
00002292 l     O .text	00000017 __c.4427
00002271 l     O .text	00000021 __c.4429
00002251 l     O .text	00000020 __c.4431
00002219 l     O .text	00000038 __c.4434
000020d6 l     O .text	00000020 __c.4467
000020c2 l     O .text	00000014 __c.4469
00002657 l     O .text	00000029 __c.4297
0000260a l     O .text	00000026 __c.4305
00002630 l     O .text	00000014 __c.4303
00002644 l     O .text	00000013 __c.4299
000025e2 l     O .text	00000028 __c.4309
000025b7 l     O .text	0000002b __c.4311
000020a8 l     O .text	0000001a __c.4476
00002095 l     O .text	00000013 __c.4478
00002760 l     O .text	00000013 __c.4239
00002089 l     O .text	0000000c __c.4492
00002076 l     O .text	00000013 __c.4499
00002067 l     O .text	0000000f __c.4501
00002206 l     O .text	00000013 __c.4443
000021ed l     O .text	00000019 __c.4445
000021c8 l     O .text	00000025 __c.4448
000021ab l     O .text	0000001d __c.4451
0000218d l     O .text	0000001e __c.4453
00002166 l     O .text	00000027 __c.4455
00002152 l     O .text	00000014 __c.4457
00002132 l     O .text	00000020 __c.4459
000020f6 l     O .text	0000003c __c.4462
0000204b l     O .text	0000001c __c.4508
00002028 l     O .text	00000023 __c.4515
0000271c l     O .text	00000028 __c.4272
000026fe l     O .text	0000001e __c.4274
000026cd l     O .text	00000019 __c.4278
000026e6 l     O .text	00000018 __c.4276
000026a8 l     O .text	00000025 __c.4283
00002680 l     O .text	00000028 __c.4285
00002744 l     O .text	0000001c __c.4255
00002012 l     O .text	00000016 __c.4520
00001ffc l     O .text	00000016 __c.4522
00001fe7 l     O .text	00000015 __c.4524
00001fd8 l     O .text	0000000f __c.4526
00001fc4 l     O .text	00000014 __c.4528
00001f90 l     O .text	00000034 __c.4530
00001f5c l     O .text	00000034 __c.4532
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00008eac l     F .text	0000002a ld_dword
00008ed6 l     F .text	0000000c st_dword
00008ee2 l     F .text	00000012 mem_set
00008ef4 l     F .text	0000001e mem_cmp
00008f12 l     F .text	0000010c tchar2uni
0000901e l     F .text	00000050 clst2sect
0000906e l     F .text	00000078 clmt_clust
000090e6 l     F .text	0000001e sum_sfn
00009104 l     F .text	00000058 get_ldnumber
0080180e l     O .bss	00000001 CurrVol
0000915c l     F .text	00000058 validate
000091b4 l     F .text	00000016 mem_cpy.part.0
000091ca l     F .text	0000015a put_utf
00009324 l     F .text	00000232 get_fileinfo
00009556 l     F .text	0000002a ld_clust.isra.4
00009580 l     F .text	0000001a st_clust.isra.5
0000959a l     F .text	000000a6 sync_window.part.6
00009640 l     F .text	000000e4 sync_fs
00009724 l     F .text	00000150 dir_clear
00009874 l     F .text	00000076 move_window
000098ea l     F .text	00000080 check_fs
0000996a l     F .text	000004c4 mount_volume
00801811 l     O .bss	00000002 FatFs
0080180f l     O .bss	00000002 Fsid
00009e2e l     F .text	000001fe put_fat
0000a02c l     F .text	00000168 get_fat.isra.10
0000a194 l     F .text	00000182 dir_sdi
0000a316 l     F .text	0000024c create_chain
0000a562 l     F .text	00000122 remove_chain
0000a684 l     F .text	000001d0 dir_next
0000a854 l     F .text	00000074 dir_alloc
0000a8c8 l     F .text	000001a4 dir_read
0080034d l     O .data	0000000d LfnOfs
0000aa6c l     F .text	00000090 dir_remove
0000aafc l     F .text	0000021c dir_find
0000ad18 l     F .text	00000348 dir_register
0000b060 l     F .text	0000046c follow_path
008002cd l     O .data	00000080 ExCvt
008002bb l     O .data	00000012 badchr.4394
008002b1 l     O .data	0000000a defopt.4452
00800295 l     O .data	0000000e cst.4450
008002a3 l     O .data	0000000e cst32.4451
00000000 l    df *ABS*	00000000 ffunicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800608 l     O .data	00000100 uc437
0080035a l     O .data	000000bc cvt2.1843
00800416 l     O .data	000001f2 cvt1.1842
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000a5d l     O .text	00000007 __c.3673
00800708 l     O .data	00000008 CSWTCH.25
00000a4c l     O .text	00000011 __c.3709
00000a2e l     O .text	0000001e __c.3711
00000a0f l     O .text	0000001f __c.3713
000009f1 l     O .text	0000001e __c.3715
000009d3 l     O .text	0000001e __c.3717
000009b4 l     O .text	0000001f __c.3719
00000995 l     O .text	0000001f __c.3721
00000976 l     O .text	0000001f __c.3723
00000957 l     O .text	0000001f __c.3725
00000938 l     O .text	0000001f __c.3727
0000091a l     O .text	0000001e __c.3729
000008f5 l     O .text	00000025 __c.3731
000008a8 l     O .text	0000004d __c.3733
0000088d l     O .text	0000001b __c.3739
0000086b l     O .text	00000022 __c.3741
00000869 l     O .text	00000002 __c.3743
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000504 l     O .text	00000020 __c.3663
000004de l     O .text	00000026 __c.3829
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007d10 l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000dec4 l     F .text	0000003c mmc_task
0000084d l     O .text	0000001c __c.3671
00000840 l     O .text	0000000d __c.3699
00000830 l     O .text	00000010 __c.3712
0080181e l     O .bss	00000002 mmc_init_flag
00000824 l     O .text	0000000c __c.3714
00000813 l     O .text	00000011 __c.3716
000007f5 l     O .text	0000001e __c.3719
000007e0 l     O .text	00000015 __c.3721
000007d2 l     O .text	0000000e __c.3723
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000bae l     O .text	0000000c __c.3664
00000b32 l     O .text	0000007c __c.3666
00000aa2 l     O .text	0000000e __c.3705
00000a79 l     O .text	00000029 __c.3709
00000a64 l     O .text	00000015 __c.3711
00000b02 l     O .text	00000020 __c.3684
00000af2 l     O .text	00000010 __c.3686
00000ade l     O .text	00000014 __c.3688
00000ad0 l     O .text	0000000e __c.3690
00000ab0 l     O .text	00000020 __c.3692
00000b22 l     O .text	00000010 __c.3676
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001553 l     O .text	0000000b __c.4428
00001499 l     O .text	000000ba __c.4430
0000148c l     O .text	0000000d __c.4438
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001f02 l     O .text	00000025 __c.4493
00001ec9 l     O .text	00000039 __c.4495
00001e94 l     O .text	00000035 __c.4497
00001e5f l     O .text	00000035 __c.4499
00001e27 l     O .text	00000038 __c.4501
00001dfc l     O .text	0000002b __c.4503
00001dd8 l     O .text	00000024 __c.4516
00001db6 l     O .text	00000022 __c.4524
00801875 l     O .bss	00000002 stack_ind
0080186b l     O .bss	0000000a stack_p
00001d9e l     O .text	00000018 __c.4547
00001d7f l     O .text	0000001f __c.4549
00001d60 l     O .text	0000001f __c.4551
00001d41 l     O .text	0000001f __c.4560
00001cd4 l     O .text	00000037 __c.4575
00001d0b l     O .text	00000036 __c.4573
00001cc7 l     O .text	0000000d __c.4597
000019ea l     O .text	00000022 __c.4649
00001a0c l     O .text	00000030 __c.4646
00001a3c l     O .text	00000016 __c.4644
00001a52 l     O .text	0000002f __c.4641
00001a81 l     O .text	00000030 __c.4638
00001ab1 l     O .text	00000019 __c.4636
00001ca9 l     O .text	0000001e __c.4599
00001c90 l     O .text	00000019 __c.4603
00001c68 l     O .text	00000028 __c.4605
00001c3e l     O .text	0000002a __c.4609
00001c0d l     O .text	00000031 __c.4612
00001be0 l     O .text	0000002d __c.4615
00001bb2 l     O .text	0000002e __c.4618
00001b84 l     O .text	0000002e __c.4621
00001b52 l     O .text	00000032 __c.4624
00001b26 l     O .text	0000002c __c.4627
00001af8 l     O .text	0000002e __c.4630
00001aca l     O .text	0000002e __c.4633
000019c8 l     O .text	00000022 __c.4653
000019ab l     O .text	0000001d __c.4655
00001984 l     O .text	00000027 __c.4657
0000196b l     O .text	00000019 __c.4668
00001959 l     O .text	00000012 __c.4679
00001937 l     O .text	00000022 __c.4685
00001896 l     O .text	00000017 __c.4700
0000187f l     O .text	00000017 __c.4702
00001868 l     O .text	00000017 __c.4704
000018db l     O .text	00000017 __c.4694
000018c4 l     O .text	00000017 __c.4696
000018ad l     O .text	00000017 __c.4698
00001920 l     O .text	00000017 __c.4688
00001909 l     O .text	00000017 __c.4690
000018f2 l     O .text	00000017 __c.4692
00001866 l     O .text	00000002 __c.4709
00001846 l     O .text	00000020 __c.4717
000015bd l     O .text	00000005 __c.4836
000015bb l     O .text	00000002 __c.4838
000015db l     O .text	00000009 __c.4828
000015d1 l     O .text	0000000a __c.4830
000015c9 l     O .text	00000008 __c.4832
000015c2 l     O .text	00000007 __c.4834
0000183d l     O .text	00000009 __c.4720
0000181e l     O .text	0000001f __c.4722
00001814 l     O .text	0000000a __c.4724
0000180c l     O .text	00000008 __c.4726
00001808 l     O .text	00000004 __c.4728
00001803 l     O .text	00000005 __c.4730
000017fc l     O .text	00000007 __c.4732
000017f2 l     O .text	0000000a __c.4734
000017ef l     O .text	00000003 __c.4736
000017e8 l     O .text	00000007 __c.4738
000017da l     O .text	0000000e __c.4740
000017ca l     O .text	00000010 __c.4742
000017bc l     O .text	0000000e __c.4744
000017b7 l     O .text	00000005 __c.4746
000017b0 l     O .text	00000007 __c.4748
000017a8 l     O .text	00000008 __c.4750
0000179e l     O .text	0000000a __c.4752
00001790 l     O .text	0000000e __c.4754
00001780 l     O .text	00000010 __c.4756
00001770 l     O .text	00000010 __c.4758
00001765 l     O .text	0000000b __c.4760
0000175a l     O .text	0000000b __c.4762
00001742 l     O .text	00000018 __c.4764
0000172f l     O .text	00000013 __c.4766
00001723 l     O .text	0000000c __c.4768
00001710 l     O .text	00000013 __c.4770
00001702 l     O .text	0000000e __c.4772
000016f0 l     O .text	00000012 __c.4774
000016e9 l     O .text	00000007 __c.4776
000016df l     O .text	0000000a __c.4778
000016d2 l     O .text	0000000d __c.4780
000016c9 l     O .text	00000009 __c.4782
000016be l     O .text	0000000b __c.4784
000016ad l     O .text	00000011 __c.4786
000016a2 l     O .text	0000000b __c.4788
00001699 l     O .text	00000009 __c.4790
00001692 l     O .text	00000007 __c.4792
00001688 l     O .text	0000000a __c.4794
00001669 l     O .text	0000001f __c.4796
0000165f l     O .text	0000000a __c.4798
00001657 l     O .text	00000008 __c.4800
00001653 l     O .text	00000004 __c.4802
0000164e l     O .text	00000005 __c.4804
00001647 l     O .text	00000007 __c.4806
0000163d l     O .text	0000000a __c.4808
0000163a l     O .text	00000003 __c.4810
00001633 l     O .text	00000007 __c.4812
00001627 l     O .text	0000000c __c.4814
00001616 l     O .text	00000011 __c.4816
00001604 l     O .text	00000012 __c.4818
000015fe l     O .text	00000006 __c.4820
000015f4 l     O .text	0000000a __c.4822
000015eb l     O .text	00000009 __c.4824
000015e4 l     O .text	00000007 __c.4826
000015b6 l     O .text	00000005 __c.4843
000015b4 l     O .text	00000002 __c.4845
00001560 l     O .text	00000008 __c.4864
00001568 l     O .text	00000022 __c.4862
0000158a l     O .text	00000008 __c.4860
00001592 l     O .text	00000022 __c.4858
0000155e l     O .text	00000002 __c.4869
00000000 l    df *ABS*	00000000 drives_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001f38 l     O .text	00000007 __c.3724
00001f3f l     O .text	0000001d __c.3720
00001f27 l     O .text	00000011 __c.3726
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000168de l     F .text	000000a0 amigo_overflow_check
00002f33 l     O .text	00000019 __c.4185
0001697e l     F .text	000000de amigo_chs_to_logical
00002ee0 l     O .text	0000002b __c.4178
00002fb3 l     O .text	00000018 __c.4155
00002f95 l     O .text	0000001e __c.4161
00002f7b l     O .text	0000001a __c.4163
00002f66 l     O .text	00000015 __c.4169
00002f4c l     O .text	0000001a __c.4171
00002f0b l     O .text	00000028 __c.4208
00002ed0 l     O .text	00000010 __c.4219
00002ebb l     O .text	00000015 __c.4223
00002ea1 l     O .text	0000001a __c.4230
00002e82 l     O .text	0000001f __c.4237
00002e68 l     O .text	0000001a __c.4244
00002e5b l     O .text	0000000d __c.4246
00002e4b l     O .text	00000010 __c.4253
00002e31 l     O .text	0000001a __c.4255
00002e22 l     O .text	0000000f __c.4259
00002dbb l     O .text	00000067 __c.4266
00002d54 l     O .text	00000067 __c.4268
00002ced l     O .text	00000067 __c.4270
00002c88 l     O .text	00000065 __c.4272
00002c38 l     O .text	00000050 __c.4277
00002be8 l     O .text	00000050 __c.4279
00002b98 l     O .text	00000050 __c.4281
00002b47 l     O .text	00000051 __c.4283
00002b15 l     O .text	00000032 __c.4295
00002af3 l     O .text	00000022 __c.4297
00002ad2 l     O .text	00000021 __c.4299
00002ab1 l     O .text	00000021 __c.4301
00002a82 l     O .text	0000002f __c.4303
00002a62 l     O .text	00000020 __c.4306
00002a4e l     O .text	00000014 __c.4309
00002a3a l     O .text	00000014 __c.4312
00002a11 l     O .text	00000029 __c.4314
000029f0 l     O .text	00000021 __c.4316
000029e0 l     O .text	00000010 __c.4319
000029be l     O .text	00000022 __c.4321
000029a2 l     O .text	0000001c __c.4323
00002979 l     O .text	00000029 __c.4325
00002959 l     O .text	00000020 __c.4327
0000292e l     O .text	0000002b __c.4329
0000290f l     O .text	0000001f __c.4331
000028ff l     O .text	00000010 __c.4334
000028cd l     O .text	00000032 __c.4339
000028ad l     O .text	00000020 __c.4343
0000288c l     O .text	00000021 __c.4346
0000286d l     O .text	0000001f __c.4349
0000284b l     O .text	00000022 __c.4352
0000282f l     O .text	0000001c __c.4355
0000280f l     O .text	00000020 __c.4358
000027e6 l     O .text	00000029 __c.4363
000027bb l     O .text	0000002b __c.4366
00002792 l     O .text	00000029 __c.4369
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00003056 l     O .text	00000021 __c.4146
00003085 l     O .text	00000015 __c.4138
00003077 l     O .text	0000000e __c.4140
000030bc l     O .text	00000022 __c.4128
000030a6 l     O .text	00000016 __c.4130
0000309a l     O .text	0000000c __c.4132
0000304f l     O .text	00000007 __c.4152
00003033 l     O .text	0000001c __c.4157
00003019 l     O .text	0000001a __c.4159
00003004 l     O .text	00000015 __c.4168
00002ff2 l     O .text	00000012 __c.4173
00002fe0 l     O .text	00000012 __c.4175
00002fcb l     O .text	00000015 __c.4177
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000044fb l     O .text	0000000a __c.4088
00004332 l     O .text	000001c9 __c.4090
000042e8 l     O .text	00000029 __c.4109
000042d0 l     O .text	00000018 __c.4114
000042ab l     O .text	00000025 __c.4126
00004292 l     O .text	00000019 __c.4132
00004271 l     O .text	00000021 __c.4139
00004235 l     O .text	0000003c __c.4148
000041f8 l     O .text	0000003d __c.4157
008018c9 l     O .bss	00000020 _lif_ctime_buf.4260
008018a9 l     O .bss	00000020 _timestr.4265
000041f3 l     O .text	00000005 __c.4280
000041d9 l     O .text	0000001a __c.4282
000041bc l     O .text	0000001d __c.4284
0000419f l     O .text	0000001d __c.4286
00004182 l     O .text	0000001d __c.4288
00004165 l     O .text	0000001d __c.4290
00004148 l     O .text	0000001d __c.4292
0000412b l     O .text	0000001d __c.4294
0000410e l     O .text	0000001d __c.4296
000040f1 l     O .text	0000001d __c.4298
000040d7 l     O .text	0000001a __c.4300
000040bb l     O .text	0000001c __c.4302
0000409e l     O .text	0000001d __c.4304
00004081 l     O .text	0000001d __c.4306
00004065 l     O .text	0000001c __c.4308
00004049 l     O .text	0000001c __c.4310
0000402f l     O .text	0000001a __c.4312
00004015 l     O .text	0000001a __c.4314
00003ff9 l     O .text	0000001c __c.4316
00003fdd l     O .text	0000001c __c.4318
00003fc0 l     O .text	0000001d __c.4320
00003fa3 l     O .text	0000001d __c.4322
00003f86 l     O .text	0000001d __c.4324
00003f6a l     O .text	0000001c __c.4326
00003f50 l     O .text	0000001a __c.4328
00003f4e l     O .text	00000002 __c.4330
00003f2f l     O .text	0000001f __c.4337
00003ef6 l     O .text	00000039 __c.4339
00003ede l     O .text	00000018 __c.4341
00003ea5 l     O .text	00000039 __c.4343
00003e6c l     O .text	00000039 __c.4345
00003e47 l     O .text	00000025 __c.4347
00003e18 l     O .text	0000002f __c.4349
00003dec l     O .text	0000002c __c.4351
00003dcb l     O .text	00000021 __c.4357
00003d87 l     O .text	00000044 __c.4359
00003d46 l     O .text	00000041 __c.4361
00003d18 l     O .text	0000002e __c.4363
00003ccd l     O .text	0000004b __c.4365
00003c82 l     O .text	0000004b __c.4367
00003c57 l     O .text	0000002b __c.4369
00003c2b l     O .text	0000002c __c.4371
00003b68 l     O .text	0000003a __c.4426
00003b48 l     O .text	00000020 __c.4435
00003afb l     O .text	0000004d __c.4460
00003bd6 l     O .text	00000055 __c.4387
00003bc9 l     O .text	0000000d __c.4389
00003bbc l     O .text	0000000d __c.4397
00003baf l     O .text	0000000d __c.4402
00003ba2 l     O .text	0000000d __c.4407
00003ac3 l     O .text	00000038 __c.4472
00003a9a l     O .text	00000029 __c.4474
00003a49 l     O .text	00000051 __c.4477
00003a0a l     O .text	0000003f __c.4490
000039d4 l     O .text	00000036 __c.4492
000039a1 l     O .text	00000033 __c.4494
0000396e l     O .text	00000033 __c.4496
00003957 l     O .text	00000017 __c.4506
00003917 l     O .text	00000040 __c.4508
000038cb l     O .text	0000004c __c.4511
0000389b l     O .text	00000030 __c.4513
00003899 l     O .text	00000002 __c.4516
0000388d l     O .text	0000000c __c.4518
00003880 l     O .text	0000000d __c.4520
0000386f l     O .text	00000011 __c.4522
0000385c l     O .text	00000013 __c.4524
00003849 l     O .text	00000013 __c.4526
00003836 l     O .text	00000013 __c.4528
0000380f l     O .text	00000027 __c.4535
000037ea l     O .text	00000025 __c.4537
000037b1 l     O .text	00000039 __c.4551
0000378d l     O .text	00000024 __c.4568
0000377f l     O .text	0000000e __c.4585
00003771 l     O .text	0000000e __c.4590
00003763 l     O .text	0000000e __c.4592
00003730 l     O .text	00000033 __c.4606
00003702 l     O .text	0000002e __c.4608
000036d3 l     O .text	0000002f __c.4610
000036a3 l     O .text	00000030 __c.4612
00003674 l     O .text	0000002f __c.4614
00003644 l     O .text	00000030 __c.4616
0000361d l     O .text	00000027 __c.4618
00003606 l     O .text	00000017 __c.4620
000035ef l     O .text	00000017 __c.4622
000035d6 l     O .text	00000019 __c.4624
000035bd l     O .text	00000019 __c.4626
000035af l     O .text	0000000e __c.4628
00003597 l     O .text	00000018 __c.4652
00003580 l     O .text	00000017 __c.4654
00003548 l     O .text	00000038 __c.4656
00003538 l     O .text	00000010 __c.4658
00003477 l     O .text	0000000e __c.4669
00003485 l     O .text	00000028 __c.4667
00003503 l     O .text	00000035 __c.4662
000034ad l     O .text	00000056 __c.4664
0000344f l     O .text	00000028 __c.4677
00003441 l     O .text	0000000e __c.4680
00003429 l     O .text	00000018 __c.4697
00003416 l     O .text	00000013 __c.4699
00003408 l     O .text	0000000e __c.4701
000033fa l     O .text	0000000e __c.4706
000033da l     O .text	00000020 __c.4723
000033bf l     O .text	0000001b __c.4725
000033a3 l     O .text	0000001c __c.4727
00003374 l     O .text	0000002f __c.4729
00003361 l     O .text	00000013 __c.4731
00003331 l     O .text	00000030 __c.4733
00003323 l     O .text	0000000e __c.4735
00003315 l     O .text	0000000e __c.4740
000032f0 l     O .text	00000025 __c.4748
000032d0 l     O .text	00000020 __c.4750
000032b1 l     O .text	0000001f __c.4752
00003289 l     O .text	00000028 __c.4754
0000327a l     O .text	0000000f __c.4756
00003252 l     O .text	00000028 __c.4765
0000322b l     O .text	00000027 __c.4767
00003204 l     O .text	00000027 __c.4769
000031ce l     O .text	00000036 __c.4771
000031a5 l     O .text	00000029 __c.4773
0000318e l     O .text	00000017 __c.4775
00003165 l     O .text	00000029 __c.4788
00003140 l     O .text	00000025 __c.4790
0000311d l     O .text	00000023 __c.4792
000030fd l     O .text	00000020 __c.4794
000030de l     O .text	0000001f __c.4796
00004311 l     O .text	00000021 __c.4103
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00004873 l     O .text	00000030 __c.4458
00004854 l     O .text	0000001f __c.4460
00004837 l     O .text	0000001d __c.4462
00004827 l     O .text	00000010 __c.4464
00004800 l     O .text	00000027 __c.4466
000047e6 l     O .text	0000001a __c.4468
000047cc l     O .text	0000001a __c.4470
000047ca l     O .text	00000002 __c.4472
000047bb l     O .text	0000000f __c.4476
000047b0 l     O .text	0000000b __c.4478
0000478c l     O .text	00000024 __c.4482
00004789 l     O .text	00000003 __c.4492
0000477d l     O .text	0000000c __c.4494
00004776 l     O .text	00000007 __c.4502
00004765 l     O .text	00000011 __c.4504
0000473e l     O .text	00000027 __c.4506
0000471f l     O .text	0000001f __c.4508
00004702 l     O .text	0000001d __c.4510
000046f2 l     O .text	00000010 __c.4512
000046cb l     O .text	00000027 __c.4514
000046b1 l     O .text	0000001a __c.4516
00004697 l     O .text	0000001a __c.4518
00004681 l     O .text	00000016 __c.4520
0000466b l     O .text	00000016 __c.4522
00004659 l     O .text	00000012 __c.4524
0000464a l     O .text	0000000f __c.4526
0000462d l     O .text	0000001d __c.4528
0000460f l     O .text	0000001e __c.4530
000045f2 l     O .text	0000001d __c.4532
000045d8 l     O .text	0000001a __c.4534
000045c0 l     O .text	00000018 __c.4536
000045af l     O .text	00000011 __c.4538
00004599 l     O .text	00000016 __c.4540
00004584 l     O .text	00000015 __c.4542
00004572 l     O .text	00000012 __c.4544
0000455a l     O .text	00000018 __c.4546
00004545 l     O .text	00000015 __c.4548
0000452f l     O .text	00000016 __c.4550
00004519 l     O .text	00000016 __c.4552
00004505 l     O .text	00000014 __c.4554
00000000 l    df *ABS*	00000000 vfprintf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001d6 l     O .text	00000004 __c.2334
000001da l     O .text	00000004 __c.2332
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000041d l     O .text	0000000d __c.3681
0000040a l     O .text	00000013 __c.3683
000003f7 l     O .text	00000013 __c.3685
000003d9 l     O .text	0000001e __c.3687
000003bb l     O .text	0000001e __c.3689
0000039d l     O .text	0000001e __c.3691
0000037f l     O .text	0000001e __c.3693
0000036b l     O .text	00000014 __c.3695
00000350 l     O .text	0000001b __c.3710
00000338 l     O .text	00000018 __c.3716
00000313 l     O .text	00000025 __c.3725
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801748 l     O .bss	00000004 SPI0_Speed_value
0000042a l     O .text	0000001d __c.3679
00801746 l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004c8 l     O .text	00000016 __c.3671
000004b4 l     O .text	00000014 __c.3679
0000049d l     O .text	00000017 __c.3681
00000457 l     O .text	00000011 __c.3704
00000468 l     O .text	0000001c __c.3694
00000484 l     O .text	00000019 __c.3692
00000447 l     O .text	00000010 __c.3711
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000069e6 l     F .text	0000007c clock_settime.part.2
000005c2 l     O .text	0000001d __c.3676
000005b8 l     O .text	0000000a __c.3696
00801754 l     O .bss	00000020 _ts_to_str
000005a9 l     O .text	0000000f __c.3701
0080174c l     O .bss	00000008 __clock_elapsed
0000059b l     O .text	0000000e __c.3710
00000590 l     O .text	0000000b __c.3712
00801774 l     O .bss	00000002 timers_configured
00801776 l     O .bss	00000002 timers_enabled
0000057c l     O .text	00000014 __c.3732
00000569 l     O .text	00000013 __c.3734
0000055d l     O .text	0000000c __c.3736
00000545 l     O .text	00000018 __c.3738
00000534 l     O .text	00000011 __c.3740
00000524 l     O .text	00000010 __c.3742
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000f0e l     O .text	0000001d __c.3823
0080185b l     O .bss	00000001 _ppr_reg
00000efb l     O .text	00000013 __c.3841
00000eea l     O .text	00000011 __c.3855
00000edd l     O .text	0000000d __c.3864
00000ecf l     O .text	0000000e __c.3873
00000ec2 l     O .text	0000000d __c.3880
00000eb4 l     O .text	0000000e __c.3886
00000000 l    df *ABS*	00000000 _clear_bss.o
000048d4 l       .text	00000000 .do_clear_bss_start
000048d2 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 TWI_AVR8.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ffsystem.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001c90e l       .text	00000000 __udivmodqi4_ep
0001c906 l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001c92e l       .text	00000000 __udivmodhi4_ep
0001c920 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001c956 l       .text	00000000 __divmodhi4_neg1
0001c95e l       .text	00000000 __divmodhi4_neg2
0001c964 l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001c98c l       .text	00000000 __udivmodsi4_ep
0001c972 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001c9c2 l       .text	00000000 __divmodsi4_neg2
0001c9d0 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001d4e4 l       .text	00000000 __stop_program
00016014 g     F .text	00000040 SS80_Selected_Device_Clear
0001ca1e g       .text	00000002 .hidden __usmulhisi3
0000ed80 g     F .text	0000000c putchar
00011804 g     F .text	0000001e SS80_is_MTA
00006882 g     F .text	000000ea clock_gettime
00005e26 g     F .text	000000e8 rtc_init
00011b14 g     F .text	000000a8 GPIB_COMMANDS
000048e2  w      .text	00000000 __vector_22
00010ccc g     F .text	0000004a gpib_unread
00015210 g     F .text	00000034 SS80_test_extended_status
00006350  w    F .text	00000016 strcpy
00007af2 g     F .text	00000008 asctime
00006dda g     F .text	00000020 tm_mon_to_ascii
00801978 g     O .bss	00000235 Fatfs
0000eeb4 g     F .text	0000004a mctime
000048e2  w      .text	00000000 __vector_28
0000df74 g     F .text	0000001a mmc_fast
00005d70 g     F .text	000000b6 rtc_write
000160fc g     F .text	00000224 SS80_Transparent_State
0080185c g     O .bss	00000001 gpib_unread_f
000050e0 g     F .text	00000004 spi_RX_buffer
00012202 g     F .text	00000038 gpib_help
00015e78 g     F .text	0000009c SS80_Report
0000f9b2 g     F .text	0000006a free_file_descriptor
0000eb88 g     F .text	00000096 fatfs_putc
0001ca00 g       .text	0000001e .hidden __umulhisi3
008001bf g     O .data	0000000c cfgfile
000048e2  w      .text	00000000 __vector_1
00011c4e g     F .text	0000016e GPIB
0000e736 g     F .text	00000038 fatfs_help
00006ace g     F .text	00000016 delete_all_timers
00006108 g     F .text	00000016 LCD_clear
0000597c g     F .text	0000000c SPI0_TXRX_Byte
0001cfae g       .text	00000000 __fp_mpack_finite
00017016 g     F .text	00000188 amigo_buffered_read
0000f4fa g     F .text	00000086 utime
00801942 g     O .bss	00000008 __clock
00012506 g     F .text	00000054 find_device
0001400e g     F .text	0000008e print_str_P
0080010a g     O .data	00000008 lcd
00007926 g     F .text	00000128 set_dst
0000f234 g     F .text	00000096 fdevopen
00011822 g     F .text	0000001e SS80_is_MSA
00005098 g     F .text	00000044 spi_end
00018a8a g     F .text	000000e2 lif_dir2str
0001cf34 g     F .text	00000040 round
0001289a g     F .text	00000166 alloc_device
000053a4 g     F .text	00000054 safefree
00013f6c g     F .text	000000a2 print_var_P
00011dbc g     F .text	0000012a GPIB_TALK
000048e2  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001cbd0 g     F .text	00000004 __divsf3
0001caa2 g       .text	00000036 .hidden __epilogue_restores__
00005738 g     F .text	00000018 uart_rx_count
00014ba4 g     F .text	0000003a lif_dir_count
00801bd7 g     O .bss	00000009 gpib_timer
00011ee6 g     F .text	000000fa GPIB_SECONDARY_ADDRESS
00018e24 g     F .text	0000000e lif_vol_clear
0000696c g     F .text	0000007a clock_task
000110ce g     F .text	0000028e gpib_trace_display
0001bdcc g     F .text	0000010c lif_rename_file
00012e68 g     F .text	00001104 Read_Config
00012486 g     F .text	00000028 find_type
0001cdf2 g     F .text	00000022 __fp_round
000124ae g     F .text	0000001e count_drive_types
00006dfa g     F .text	00000042 Days_Per_Month
00006ca8 g     F .text	00000028 execute_timers
000100ba g     F .text	0000017a ls_info
000048e2  w      .text	00000000 __vector_34
0000df2e g     F .text	0000001a mmc_spi_begin
0001cca0 g     F .text	0000000a __fixsfsi
00006bba g     F .text	0000000c clock_elapsed_begin
000063b8  w    F .text	00000032 reverse
000062ce g     F .text	0000003c lcd_printf
0000d8ce g     F .text	00000006 mmc_disk_status
0001ce14 g     F .text	00000044 __fp_split3
00010ad2 g     F .text	00000014 gpib_timeout_set
0001c918 g       .text	00000028 .hidden __udivmodhi4
00005094 g     F .text	00000004 chip_select_init
00006b66 g     F .text	00000054 ts_to_str
00008ea0 g     F .text	0000000c atol
00007e9c g     F .text	000000aa p_ntoa
0000e136 g     F .text	000000d8 tm_to_fat
0000520c g     F .text	00000106 PrintFree
0001730e g     F .text	000000c4 amigo_cmd_dsj
0000d65c g     F .text	00000024 wait_ready
000001d6 g       .text	00000000 __trampolines_start
00012bde g     F .text	00000140 hpdir_set_device
0001cd7c g     F .text	00000048 __fp_cmp
0001166c g     F .text	000000f2 gpib_write_str
00801bb5 g     O .bss	00000002 errno
000160da g     F .text	00000022 SS80_Cancel
0001d4e6 g       .text	00000000 _etext
00005a86 g     F .text	00000008 TWI_StopTransmission
0000da2a g     F .text	0000047c mmc_disk_ioctl
0000650a g     F .text	00000028 MATCH
0080012c g     O .data	00000010 __WDay
00019848 g     F .text	000000b8 lif_writedirindex
000060b0 g     F .text	00000040 LCD_setCursor
00005842 g     F .text	000000ce SPI0_Speed
00006bc6 g     F .text	00000084 clock_elapsed_end
0080023f g     O .data	00000016 TD
0000d4ce g     F .text	000000c4 ff_wtoupper
0001cafe g     F .text	0000000a __subsf3
0001b96c g     F .text	00000330 lif_add_lif_file
00801be0 g     O .bss	00000002 lastcmd
000048e2  w      .text	00000000 __vector_24
00012bdc g     F .text	00000002 set_Config_Defaults
00006424 g     F .text	00000014 skipspaces
0000c066 g     F .text	0000026c f_getcwd
000048e2  w      .text	00000000 __vector_12
0001074c g     F .text	00000028 gpib_timer_init
000107a4 g     F .text	00000022 ppr_init
0000ed8c g     F .text	00000068 fgets
0001d426 g     F .text	000000bc __ultoa_invert
00005750 g     F .text	0000004c uart_get_tail
00005362 g     F .text	00000042 safemalloc
0001bc9c g     F .text	00000130 lif_del_file
00007cde g     F .text	00000032 _putc_buffer_fn
0001ab08 g     F .text	00000172 lif_ascii_string_to_e010
0000e12a g     F .text	00000006 mmc_ins_status
00018dba g     F .text	0000004e lif_lifbcd2timestr
00801be2 g     O .bss	00000200 gpib_iobuff
000123b6 g     F .text	00000028 V2B_MSB
00018c5a g     F .text	00000084 lif_time2lifbcd
000124fe g     F .text	00000008 find_free
0001930e g     F .text	00000366 lif_check_dir
000048e2 g       .text	00000000 __bad_interrupt
00005452 g     F .text	00000090 delayms
00015fe0 g     F .text	00000018 SS80_Channel_Independent_Clear
0000ffe0 g     F .text	000000da cat
00008d10 g     F .text	00000028 snprintf_P
00017418 g     F .text	00000152 amigo_todo_op
00016054 g     F .text	00000086 SS80_Amigo_Clear
0000f1be g     F .text	00000076 perror
0001eb2c g       *ABS*	00000000 __data_load_end
0000d59e g     F .text	0000000c disk_initialize
0080189c g     O .bss	0000000d plot
00010a80 g     F .text	00000006 gpib_timer_elapsed_end
000183da g     F .text	00000020 lif_free
0000ee24 g     F .text	0000002e puts
0000fdba g     F .text	000001c0 copy
00006da0 g     F .text	00000010 clock_settime
000183fa g     F .text	0000003e lif_stralloc
00006320  w    F .text	00000016 islower
000051de g     F .text	0000002e freeRam
00016ae4 g     F .text	0000001c amigo_request_logical_address
000060f0 g     F .text	00000018 LCD_pos
0000cf84 g     F .text	0000022a f_rename
000048e2  w      .text	00000000 __vector_6
00010a62 g     F .text	0000001e gpib_timer_reset
00019b40 g     F .text	0000065a lif_create_volume
0001cffa g     F .text	00000130 malloc
00005104 g     F .text	00000040 spi_init
0000fd82 g     F .text	00000038 posix_help
000048e2  w      .text	00000000 __vector_31
000107fc g     F .text	00000044 dbf_open
0001c2b4 g     F .text	00000092 copyright
0000bfb0 g     F .text	000000b6 f_chdir
0001cbc8 g       .text	00000000 __lesf2
00005064 g     F .text	00000030 chip_deselect
000182ec g     F .text	0000005e PRINTER_COMMANDS
00006c4a g     F .text	00000036 clock_clear
00007b1c g     F .text	000000ee initialize_clock
0000e128 g     F .text	00000002 mmc_power_off
0000e130 g     F .text	00000006 mmc_wp_status
0000ea82 g     F .text	00000106 fatfs_getc
00801de2 g     O .bss	00000001 listening_last
0000d592 g     F .text	0000000c disk_status
0000608a g     F .text	00000026 LCD_specialCommand
00800257 g     O .data	00000002 __malloc_heap_start
000001d6 g       .text	00000000 __trampolines_end
00006d80 g     F .text	00000020 clock_getres
0001ac7a g     F .text	0000021a lif_add_ascii_file_as_e010_wrapper
00010c90 g     F .text	0000003c gpib_assert_ifc
00018c44 g     F .text	00000016 lif_BCD2BIN
00005b4e g     F .text	00000028 TWI_SendByte
00018438 g     F .text	00000050 lif_open
00007c0a g     F .text	000000d4 display_clock
000107c6 g     F .text	0000001a ppr_bit_set
000048e2  w      .text	00000000 __vector_3
0001079c g     F .text	00000008 ppr_reg
00011508 g     F .text	00000008 gpib_decode
0000f0cc g     F .text	00000004 rmdir
00006a62 g     F .text	0000006c set_timers
00801966 g     O .bss	0000000c dst
0000f142 g     F .text	0000007c readdir
0001ce58 g     F .text	0000000e __fp_zero
0000c96a g     F .text	0000002a f_closedir
0000d5ea g     F .text	00000014 disk_ioctl
0001bfd0 g     F .text	000002e4 lif_tests
0000840c g     F .text	00000084 _puts_pad
000050e4 g     F .text	00000020 spi_TX
00018e32 g     F .text	00000326 lif_dump_vol
00011fe0 g     F .text	00000042 listen_cleanup
00018cde g     F .text	000000a0 lif_lifbcd2time
00018b6c g     F .text	000000ca lif_str2dir
00005a18 g     F .text	0000002c SPI0_TXRX
0000615c g     F .text	00000064 LCD_init
0001cbc8 g       .text	00000000 __nesf2
00012d1e g     F .text	00000022 hpdir_set_parameters
00005c90 g     F .text	0000000e BINtoBCD
0000f5e0 g     F .text	000000ce lseek
000048e2  w      .text	00000000 __vector_23
0001d4e6 g       *ABS*	00000000 __data_load_start
00801818 g     O .bss	00000004 _mmc_clock
000048a4 g       .text	00000000 __dtors_end
00006040 g     F .text	00000024 LCD_putb
000118d6 g     F .text	00000010 gpib_init_devices
000064ba  w    F .text	00000050 strncasecmp
008020a8 g       .bss	00000000 __bss_end
00018692 g     F .text	00000056 lif_chars
0001ca2a g       .text	00000014 .hidden __muluhisi3
000048e2  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
0001485c g     F .text	0000024c format_drives
000048e2  w      .text	00000000 __vector_25
008020a4 g     O .bss	00000002 __brkval
00006ff8 g     F .text	0000002a gmtime_r
0000ef58 g     F .text	00000052 chmod
00006cd0 g     F .text	000000b0 init_timers
0001187c g     F .text	0000001e AMIGO_is_MSA
000196c0 g     F .text	000000b6 lif_checkdirindex
0000cc56 g     F .text	0000014e f_unlink
00010d22 g     F .text	00000020 gpib_control_pin_read
00010900 g     F .text	000000ae dbf_open_read
0001c9f4 g       .text	0000000c .hidden __mulhisi3
00008dd6 g     F .text	000000bc strtol
00010a5c g     F .text	00000006 gpib_timer_elapsed_begin
0001d410 g     F .text	00000016 strnlen
000054e2 g     F .text	00000134 uart_ubr
0000d43e g     F .text	00000066 ff_uni2oem
0001aa54 g     F .text	000000b4 lif_e010_pad_sector
0001834a g     F .text	00000038 lif_help
000065ec g     F .text	000000b8 split_args
0000f050 g     F .text	0000003e rename
000108d0 g     F .text	00000030 dbf_close
00017f78 g     F .text	000000b2 receive_plot_flush
0001cbea g     F .text	000000d4 __divsf3x
000048e2  w      .text	00000000 __vector_11
00801de3 g     O .bss	00000001 spoll
0000eefe g     F .text	0000001c basename
00015244 g     F .text	000000ae SS80_display_extended_status
00017e2c g     F .text	00000130 AMIGO_COMMANDS
0001d23c g     F .text	000001b0 __ftoa_engine
000187d0 g     F .text	0000007a lif_fixname
0000d960 g     F .text	000000ca mmc_disk_write
000048a4  w      .text	00000000 __init
0001cfc6 g     F .text	00000034 calloc
0001b6de g     F .text	0000028e lif_extract_lif_as_lif
0000680e g     F .text	00000026 install_timers_isr
00012aa8 g     F .text	00000134 assign_value
00012d40 g     F .text	00000128 Post_Config
00010774 g     F .text	00000014 reverse_8bits
000153f4 g     F .text	000000e0 SS80_describe
000057d4 g     F .text	0000002c uart_getchar
00007f46 g     F .text	0000020e p_ftoa
0000f89e g     F .text	000000dc write
000061c0 g     F .text	00000046 lcd_cleareol
000186e8 g     F .text	00000074 lif_B2S
0001ce66 g       .text	00000000 __gtsf2
0000fd42 g     F .text	00000040 fprintf
0001102a g     F .text	000000a4 gpib_decode_header
0001135c g     F .text	000001ac gpib_read_byte
00015ff8 g     F .text	0000001c SS80_Universal_Device_Clear
0001ae94 g     F .text	00000272 lif_add_ascii_file_as_e010
00006834 g     F .text	0000004e __vector_13
00006392  w    F .text	00000026 strcat
008018eb g     O .bss	00000057 uarts
0001ce8a g       .text	00000000 __mulsf3_pse
000048e2  w      .text	00000000 __vector_17
000051bc g     F .text	00000022 spi_TXRX
0001cdd0 g     F .text	00000006 __fp_nan
0001255a g     F .text	00000212 set_active_device
000048e2  w      .text	00000000 __vector_19
0000678e g     F .text	0000007c get_value
000059f0 g     F .text	00000028 SPI0_TX
0001875c g     F .text	0000003a lif_checkname
0000ef1a g     F .text	0000003e chdir
000048e2  w      .text	00000000 __vector_7
0000dfec g     F .text	0000013c mmc_init
0000e76e g     F .text	0000019a fatfs_ls
0001cdc4 g     F .text	0000000c __fp_inf
00008d38 g     F .text	00000028 sprintf_P
0001cae6 g       .text	00000018 .hidden __cmpdi2_s8
0000f2ca g     F .text	00000088 fat_time_to_unix
0000f6ae g     F .text	0000004e fseek
00801bad g     O .bss	00000004 AccSize
00018e08 g     F .text	0000000c lif_image_clear
0000dfa0 g     F .text	0000000e mmc_set_ms_timeout
0000680a g     F .text	00000004 enable_system_task
0000df94 g     F .text	00000006 mmc_spi_RX_buffer
0000711a g     F .text	00000058 is_dst
00005616 g     F .text	0000008e uart_init
00014f36 g     F .text	00000078 SS80ControllerPack
00801dec g     O .bss	00000204 Devices
000048ca g       .text	00000010 .hidden __do_clear_bss
0001d3ec g     F .text	00000016 strnlen_P
00801972 g     O .bss	00000006 _pch
00005910 g     F .text	0000006c SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
0001a464 g     F .text	00000200 lif_open_volume
0000ff7a g     F .text	00000066 testpage
00018206 g     F .text	000000e6 printer_buffer
00005c34 g     F .text	0000005c TWI_WritePacket
0000bf7e g     F .text	00000032 f_close
0001ce86 g     F .text	000000ca __mulsf3x
00017f5c g     F .text	0000001c printer_init
0000df50 g     F .text	0000001a mmc_slow
0000630a g     F .text	00000016 sep
00800255 g     O .data	00000002 __malloc_heap_end
00010788 g     F .text	00000014 ppr_set
00016ef2 g     F .text	00000124 amigo_format
0000f6fc g     F .text	000000da read
00019900 g     F .text	00000030 lif_writedirEOF
0000df48 g     F .text	00000008 mmc_spi_end
0001cd06 g       .text	00000000 __floatsisf
000173d2 g     F .text	00000046 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
00019930 g     F .text	00000210 lif_updatefree
00005a44 g     F .text	0000002a SPI0_RX
0000b8ba g     F .text	00000296 f_read
008018e9 g     O .bss	00000002 rtc_ok
000117e6 g     F .text	0000001e SS80_is_MLA
00006452  w    F .text	0000002a strncmp
000056a4 g     F .text	00000040 uart_rx_interrupt
00005800 g     F .text	00000006 uart0_getchar
000048e2  w      .text	00000000 __vector_27
00010c2e g     F .text	00000062 gpib_disable_PPR
0000e252 g     F .text	000000e0 fatfs_scan_files
00005032 g     F .text	00000032 chip_select
00801746 g       .data	00000000 __data_end
000108a0 g     F .text	00000030 dbf_lseek
00016710 g     F .text	000001ce SS80_COMMANDS
0000c994 g     F .text	00000088 f_readdir
00801de4 g     O .bss	00000002 current
00015518 g     F .text	00000040 SS80_Check_Volume
0000df00 g     F .text	0000002e mmc_install_timer
00007e54 g     F .text	00000048 pch
00008d9a g     F .text	0000003c atodigit
0001c8e2 g       .text	0000001e .hidden __mulsi3
00006366  w    F .text	0000002c strncpy
0000f08e g     F .text	0000003e unlink
0000f874 g     F .text	0000002a sync
00015f52 g     F .text	0000008e SS80_init
0001cbc8 g       .text	00000000 __eqsf2
0000fa8e g     F .text	0000008a new_file_descriptor
0000647c  w    F .text	0000003e strcasecmp
0001ca4a g       .text	00000020 .hidden __negdi2
00012446 g     F .text	00000040 B2V_LSB
0000e628 g     F .text	0000010e fatfs_filinfo_list
0000d1ae g     F .text	0000009a f_chmod
0080194a g     O .bss	00000018 timer_irq
000124cc g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001c940 g       .text	00000026 .hidden __divmodhi4
00014fae g     F .text	00000198 SS80UnitPack
000109ae g     F .text	000000ae dbf_open_write
000048e2  w      .text	00000000 __vector_5
0000dea6 g     F .text	0000001e mmc_disk_timerproc
0000781a g     F .text	0000010c find_dst
00800189 g     O .data	00000034 gpib_tokens
000048e2  w      .text	00000000 __vector_33
00011510 g     F .text	0000015c gpib_read_str
0001a664 g     F .text	00000328 lif_dir
0001719e g     F .text	00000170 amigo_buffered_write
0001c444 g     F .text	00000164 task
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
000152f2 g     F .text	00000102 SS80_send_status
00006206 g     F .text	000000b2 lcd_putch
0001c9e2 g       .text	00000012 .hidden __tablejump2__
000118e6 g     F .text	0000011a gpib_trace_task
0080013c g     O .data	00000001 Stat
0000f46a g     F .text	00000090 unix_time_to_fat
000048a4 g       .text	00000000 __ctors_start
0000611e g     F .text	0000003e LCD_setFastBacklightRGB
0000d794 g     F .text	0000013a mmc_disk_initialize
00801962 g     O .bss	00000004 __tzone
0000e20e g     F .text	00000026 get_fattime
0000f7d6 g     F .text	00000038 fread
00018e14 g     F .text	00000010 lif_dir_clear
00016d28 g     F .text	00000052 amigo_increment
00012022 g     F .text	0000011c GPIB_LISTEN
008001bd g     O .data	00000002 debuglevel
0080181c g     O .bss	00000002 _mmc_timeout
000048b0 g       .text	0000001a .hidden __do_copy_data
008001cb g     O .data	00000074 faults
0000fc56 g     F .text	000000d4 posix_fopen_modes_to_open
00012408 g     F .text	0000003e B2V_MSB
00018c36 g     F .text	0000000e lif_BIN2BCD
0001cf74 g     F .text	00000036 __fp_mintl
0001cbc8 g     F .text	00000008 __cmpsf2
0001cad8 g       .text	0000000e .hidden __xload_1
0000707c g     F .text	0000005c gettimeofday
0001cde4 g     F .text	0000000e __fp_pscB
0001ce24 g       .text	00000000 __fp_splitA
00018d7e g     F .text	0000003c lif_ctime_gmt
00018544 g     F .text	000000b2 lif_read
0000fd2a g     F .text	00000018 fopen
00801746 g       .bss	00000000 __bss_start
00007a4e g     F .text	000000a4 asctime_r
0000720a g     F .text	00000008 localtime
0001d402 g     F .text	0000000e memset
0001756a g     F .text	00000120 amigo_todo
00012a48 g     F .text	00000032 push_state
000077d8 g     F .text	00000042 setdate
0001c5a8 g     F .text	0000033a main
00005a6e g     F .text	00000018 TWI_Init
00012200 g     F .text	00000002 talk_cleanup
00005cb0 g     F .text	000000c0 rtc_run
0000f5aa g     F .text	00000036 ftell
00801de6 g     O .bss	00000001 talking
0000be7e g     F .text	00000100 f_sync
00801861 g     O .bss	00000002 AMIGOs
0001cbc8 g       .text	00000000 __ltsf2
0000583e g     F .text	00000004 uart_keyhit
00012a00 g     F .text	00000048 init_Devices
000048e2  w      .text	00000000 __vector_4
00019674 g     F .text	0000004c lif_close_volume
0000df6a g     F .text	0000000a mmc_spi_init
00019776 g     F .text	000000d2 lif_readdirindex
00005a8e g     F .text	000000c0 TWI_StartTransmission
000176b2 g     F .text	000005cc Amigo_Command
0000fa7e g     F .text	00000010 fclose
0000ed74 g     F .text	0000000c getchar
00016c6c g     F .text	000000bc amigo_send_status
00016a5c g     F .text	00000088 amigo_init
0080013d g     O .data	0000004a sys_errlist
000070d8 g     F .text	00000042 time
0000f106 g     F .text	0000003c opendir
0001cfaa g     F .text	0000001c __fp_mpack
0001276c g     F .text	0000012e SS80_Set_Defaults
0000705a g     F .text	00000022 settimezone
0000b4cc g     F .text	00000078 f_mount
0000e350 g     F .text	000002d8 fatfs_status
00007e3a g     F .text	0000001a pch_init
0001185e g     F .text	0000001e AMIGO_is_MTA
0001c9d2 g       .text	00000010 .hidden __negsi2
0000c888 g     F .text	000000e2 f_opendir
00015f14 g     F .text	0000003e Clear_Common
0001c40c g     F .text	00000038 help
00010bcc g     F .text	00000062 gpib_enable_PPR
00016dd0 g     F .text	00000122 amigo_verify
0001ce6e g     F .text	00000004 __mulsf3
000066a4 g     F .text	00000086 get_token
00016b00 g     F .text	000000b0 amigo_request_status
0001409c g     F .text	000001f6 display_Addresses
0000f580 g     F .text	0000002a fileno_to_fatfs
0000d4a4 g     F .text	0000002a ff_oem2uni
00006438  w    F .text	0000001a strcmp
00010b7c g     F .text	00000050 gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
00010a86 g     F .text	0000004c gpib_timer_task
000053f8 g     F .text	0000005a delayus
00012a7a g     F .text	0000002e pop_state
000048e2  w      .text	00000000 __vector_9
0000efaa g     F .text	0000004a getcwd
000048e2  w      .text	00000000 __vector_2
00006590 g     F .text	00000028 MATCHI
0001768a g     F .text	00000028 amigo_check_unit
0001cb22 g     F .text	000000c6 __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000c2d2 g     F .text	000005b6 f_lseek
0000ec1e g     F .text	000000a2 fgetc
00801de7 g     O .bss	00000001 secondary
00008cc4 g     F .text	0000004c vsnprintf_P
00007afa g     F .text	00000022 ctime_gm
0001ce66 g     F .text	00000008 __gesf2
00014aa8 g     F .text	000000fc hpdir_init
00016bb0 g     F .text	000000bc amigo_send_logical_address
000154d4 g     F .text	00000044 SS80_Check_Unit
0001175e g     F .text	00000088 gpib_file_init
00800104 g     O .data	00000001 _cs_pin
00005fe6 g     F .text	00000028 I2C_Start
0080185d g     O .bss	00000002 gpib_log_fp
000048e2  w      .text	00000000 __vector_21
000048e2  w      .text	00000000 __vector_15
0000601e g     F .text	00000022 I2C_Send
00008154 g     F .text	000002b8 p_etoa
00016394 g     F .text	000002d0 SS80_locate_and_read
0001223a g     F .text	0000017c gpib_tests
00801bb1 g     O .bss	00000002 AccDirs
0000d438 g     F .text	00000006 ff_memfree
00801869 g     O .bss	00000002 PRINTERp
0001cdd6 g     F .text	0000000e __fp_pscA
0001c900 g       .text	00000018 .hidden __udivmodqi4
00801de8 g     O .bss	00000001 listening
00011a00 g     F .text	00000114 gpib_error_test
00801865 g     O .bss	00000002 SS80s
0000ca1c g     F .text	0000007c f_stat
00010b2c g     F .text	00000050 gpib_bus_init
0000ecc0 g     F .text	0000009a fputc
000048e2  w      .text	00000000 __vector_29
0000582a g     F .text	00000014 uart0_putchar
00008d60 g     F .text	0000003a printf_P
0001ca42 g       .text	00000006 .hidden __mulohisi3
00016664 g     F .text	000000ac SS80_Execute_State
000075a2 g     F .text	00000008 timegm
00015558 g     F .text	000004f0 SS80_Command_State
00007038 g     F .text	00000022 gettimezone
008020a8 g       .comment	00000000 __heap_start
00006404 g     F .text	00000020 trim_tail
00010d5a g     F .text	000002d0 gpib_write_byte
0001802a g     F .text	0000009a printer_close
00019158 g     F .text	000001b6 lif_check_volume
00007172 g     F .text	00000098 localtime_r
00801bb3 g     O .bss	00000002 AccFiles
00005f0e g     F .text	000000d8 rtc_read
000048a4 g       .text	00000000 __dtors_start
00010ae6 g     F .text	00000046 gpib_bus_read_init
000048a4 g       .text	00000000 __ctors_end
0001c9aa g       .text	00000028 .hidden __divmodsi4
00010d16 g     F .text	0000000c gpib_bus_read
0000f352 g     F .text	00000118 stat
000040ff  w      *ABS*	00000000 __stack
0000f80e g     F .text	00000066 syncfs
00018382 g     F .text	00000058 lif_calloc
0000f97a g     F .text	00000038 fwrite
00011bbc g     F .text	00000092 Send_Identify
00801816 g     O .bss	00000002 _mmc_pre
0000df9a g     F .text	00000006 mmc_spi_TXRX
00801746 g       .data	00000000 _edata
00005bb2 g     F .text	00000082 TWI_ReadPacket
0000d248 g     F .text	000000b2 f_utime
00014292 g     F .text	000005ca display_Config
0001ca20 g       .text	00000008 .hidden __usmulhisi3_tail
008020a8 g       .comment	00000000 _end
00005b76 g     F .text	0000003c TWI_ReceiveByte
000184d0 g     F .text	00000074 lif_seek_msg
00005144 g     F .text	00000078 spi_begin
000180c4 g     F .text	00000142 printer_open
0000bb50 g     F .text	0000032e f_write
000048e2  w      .text	00000000 __vector_8
0001a98c g     F .text	000000c8 lif_find_file
000048e2  w      .text	00000000 __vector_26
00007d28 g     F .text	00000112 bin2num
0001cbee g       .text	00000000 __divsf3_pse
0001c346 g     F .text	000000c6 delay_tests
00800100 g     O .data	00000004 _spi_clock
00801863 g     O .bss	00000002 AMIGOp
0000df8e g     F .text	00000006 mmc_spi_TX_buffer
0000b544 g     F .text	00000376 f_open
0001884a g     F .text	00000130 lif_vol2str
0000d5ca g     F .text	00000020 disk_write
00010234 g     F .text	00000224 ls
0001d4e2  w      .text	00000000 .hidden exit
0001213e g     F .text	000000c2 gpib_task
0001cd02 g     F .text	0000007a __floatunsisf
00006ae4 g     F .text	00000082 subtract_timespec
0001c940 g       .text	00000000 .hidden _div
00017c7e g     F .text	000001ae Amigo_Execute
000063ea  w    F .text	0000001a strupper
008020a6 g     O .bss	00000002 __flp
0001c966 g       .text	00000044 .hidden __udivmodsi4
000118b8 g     F .text	0000001e PRINTER_is_MTA
0001a19a g     F .text	000002ca lif_newdir
00014bde g     F .text	00000358 hpdir_find_drive
0001189a g     F .text	0000001e PRINTER_is_MLA
00008e92 g     F .text	0000000e atoi
00006e3c g     F .text	000001bc time_to_tm
0000e234 g     F .text	0000001e put_rc
00800105 g     O .data	00000002 LCD_ok
0000ee52 g     F .text	00000038 fileno
00800112 g     O .data	0000001a __Month
00005988 g     F .text	00000068 SPI0_Init
0000cda4 g     F .text	000001e0 f_mkdir
0001ccaa g     F .text	00000058 __fixunssfsi
00801ff0 g     O .bss	000000b4 hpdir
000075aa g     F .text	0000022e setdate_r
00006532 g     F .text	0000005e MATCHARGS
000050dc g     F .text	00000004 spi_TX_buffer
0000600e g     F .text	00000010 I2C_Stop
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001d4e2 g       .text	00000000 .hidden _exit
000185f6 g     F .text	0000009c lif_write
00018796 g     F .text	0000003a lif_S2B
00801de9 g     O .bss	00000001 talking_last
00010840 g     F .text	00000030 dbf_read
00005c9e g     F .text	00000012 BCDtoBIN
00007212 g     F .text	00000390 normalize
00007022 g     F .text	00000016 gmtime
000048e2  w      .text	00000000 __vector_14
0000e96c g     F .text	00000116 fatfs_tests
0001bed8 g     F .text	000000f8 lif_create_image
0000d5aa g     F .text	00000020 disk_read
0000fb18 g     F .text	0000013e open
0000672a g     F .text	00000064 token
00006336  w    F .text	0000001a toupper
00015b4a g     F .text	0000032e SS80_locate_and_write
00008490 g     F .text	00000834 _printf_fn
000048e2  w      .text	00000000 __vector_10
000107e0 g     F .text	0000001c ppr_bit_clr
00801bb7 g     O .bss	00000020 __iob
0000d2fa g     F .text	00000138 f_getlabel
0001897a g     F .text	00000110 lif_str2vol
00006064 g     F .text	00000026 LCD_command
0000ca98 g     F .text	000001be f_getfree
0000edf4 g     F .text	00000030 fputs
000048e2  w      .text	00000000 __vector_16
000065b8 g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
00005312 g     F .text	00000050 safecalloc
0000ee8a g     F .text	0000002a fileno_to_stream
00015a48 g     F .text	00000102 SS80_cmd_seek
0000f0d0 g     F .text	00000036 closedir
000048e2  w      .text	00000000 __vector_18
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00015146 g     F .text	000000ca SS80VolumePack
0000d8d4 g     F .text	0000008c mmc_disk_read
0000e908 g     F .text	00000064 mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
00018488 g     F .text	00000048 lif_stat
0000579c g     F .text	00000006 uart_rx_byte
00016320 g     F .text	00000074 SS80_error_return
00800259 g     O .data	00000002 __malloc_margin
000056e4 g     F .text	00000054 __vector_20
0000eff4 g     F .text	0000005c mkdir
00005806 g     F .text	00000024 uart_putchar
00010458 g     F .text	000002f4 posix_tests
00801dea g     O .bss	00000002 gpib_unread_data
0000fa1c g     F .text	00000062 close
0001cb00 g       .text	00000000 __addsf3
0001ca6a g       .text	00000038 .hidden __prologue_saves__
00011840 g     F .text	0000001e AMIGO_is_MLA
0000dfae g     F .text	0000003e mmc_test_timeout
0001b106 g     F .text	000005d8 lif_extract_e010_as_ascii
000048e6 g     F .text	0000074c vfprintf
00016d7a g     F .text	00000056 amigo_seek
00010d42 g     F .text	00000018 gpib_handshake_pin_read
00006c80 g     F .text	00000028 enable_timers
0000e332 g     F .text	0000001e fatfs_fstype
000123de g     F .text	0000002a V2B_LSB
00010870 g     F .text	00000030 dbf_write
00801867 g     O .bss	00000002 SS80p
0080185f g     O .bss	00000002 lines
0000d432 g     F .text	00000006 ff_memalloc
0001d12a g     F .text	00000112 free
0001ce5a g       .text	00000000 __fp_szero
000057a2 g     F .text	00000032 uart_tx_byte
0001ca3e g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__ctors_end>
       4:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
       8:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
       c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      10:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      14:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      18:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      1c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      20:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      24:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      28:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      2c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      30:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      34:	0c 94 1a 34 	jmp	0x6834	; 0x6834 <__vector_13>
      38:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      3c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      40:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      44:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      48:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      4c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      50:	0c 94 72 2b 	jmp	0x56e4	; 0x56e4 <__vector_20>
      54:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      58:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      5c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      60:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      64:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      68:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      6c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      70:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      74:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      78:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      7c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      80:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      84:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      88:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      8c:	c1 43       	sbci	r28, 0x31	; 49
      8e:	1c 45       	sbci	r17, 0x5C	; 92
      90:	f1 43       	sbci	r31, 0x31	; 49
      92:	f5 44       	sbci	r31, 0x45	; 69
      94:	f5 44       	sbci	r31, 0x45	; 69
      96:	1c 45       	sbci	r17, 0x5C	; 92
      98:	1c 45       	sbci	r17, 0x5C	; 92
      9a:	1c 45       	sbci	r17, 0x5C	; 92
      9c:	1c 45       	sbci	r17, 0x5C	; 92
      9e:	1c 45       	sbci	r17, 0x5C	; 92
      a0:	1c 45       	sbci	r17, 0x5C	; 92
      a2:	1c 45       	sbci	r17, 0x5C	; 92
      a4:	1c 45       	sbci	r17, 0x5C	; 92
      a6:	c1 43       	sbci	r28, 0x31	; 49
      a8:	bb 43       	sbci	r27, 0x3B	; 59
      aa:	1c 45       	sbci	r17, 0x5C	; 92
      ac:	1c 45       	sbci	r17, 0x5C	; 92
      ae:	1c 45       	sbci	r17, 0x5C	; 92
      b0:	1c 45       	sbci	r17, 0x5C	; 92
      b2:	eb 43       	sbci	r30, 0x3B	; 59
      b4:	1c 45       	sbci	r17, 0x5C	; 92
      b6:	1c 45       	sbci	r17, 0x5C	; 92
      b8:	c1 43       	sbci	r28, 0x31	; 49
      ba:	1c 45       	sbci	r17, 0x5C	; 92
      bc:	1c 45       	sbci	r17, 0x5C	; 92
      be:	1c 45       	sbci	r17, 0x5C	; 92
      c0:	1c 45       	sbci	r17, 0x5C	; 92
      c2:	1c 45       	sbci	r17, 0x5C	; 92
      c4:	1c 45       	sbci	r17, 0x5C	; 92
      c6:	1c 45       	sbci	r17, 0x5C	; 92
      c8:	1c 45       	sbci	r17, 0x5C	; 92
      ca:	1c 45       	sbci	r17, 0x5C	; 92
      cc:	c1 43       	sbci	r28, 0x31	; 49
      ce:	17 45       	sbci	r17, 0x57	; 87
      d0:	f1 43       	sbci	r31, 0x31	; 49
      d2:	f5 44       	sbci	r31, 0x45	; 69
      d4:	f5 44       	sbci	r31, 0x45	; 69
      d6:	1c 45       	sbci	r17, 0x5C	; 92
      d8:	1c 45       	sbci	r17, 0x5C	; 92
      da:	1c 45       	sbci	r17, 0x5C	; 92
      dc:	1c 45       	sbci	r17, 0x5C	; 92
      de:	1c 45       	sbci	r17, 0x5C	; 92
      e0:	1c 45       	sbci	r17, 0x5C	; 92
      e2:	1c 45       	sbci	r17, 0x5C	; 92
      e4:	1c 45       	sbci	r17, 0x5C	; 92
      e6:	c1 43       	sbci	r28, 0x31	; 49
      e8:	bb 43       	sbci	r27, 0x3B	; 59
      ea:	1c 45       	sbci	r17, 0x5C	; 92
      ec:	1c 45       	sbci	r17, 0x5C	; 92
      ee:	12 45       	sbci	r17, 0x52	; 82
      f0:	1c 45       	sbci	r17, 0x5C	; 92
      f2:	eb 43       	sbci	r30, 0x3B	; 59
      f4:	1c 45       	sbci	r17, 0x5C	; 92
      f6:	1c 45       	sbci	r17, 0x5C	; 92
      f8:	c1 43       	sbci	r28, 0x31	; 49
      fa:	3e 45       	sbci	r19, 0x5E	; 94
      fc:	25 46       	sbci	r18, 0x65	; 101
      fe:	34 45       	sbci	r19, 0x54	; 84
     100:	92 45       	sbci	r25, 0x52	; 82
     102:	79 45       	sbci	r23, 0x59	; 89
     104:	25 46       	sbci	r18, 0x65	; 101
     106:	25 46       	sbci	r18, 0x65	; 101
     108:	25 46       	sbci	r18, 0x65	; 101
     10a:	25 46       	sbci	r18, 0x65	; 101
     10c:	25 46       	sbci	r18, 0x65	; 101
     10e:	25 46       	sbci	r18, 0x65	; 101
     110:	25 46       	sbci	r18, 0x65	; 101
     112:	25 46       	sbci	r18, 0x65	; 101
     114:	48 45       	sbci	r20, 0x58	; 88
     116:	5c 45       	sbci	r21, 0x5C	; 92
     118:	25 46       	sbci	r18, 0x65	; 101
     11a:	25 46       	sbci	r18, 0x65	; 101
     11c:	25 46       	sbci	r18, 0x65	; 101
     11e:	25 46       	sbci	r18, 0x65	; 101
     120:	30 45       	sbci	r19, 0x50	; 80
     122:	25 46       	sbci	r18, 0x65	; 101
     124:	25 46       	sbci	r18, 0x65	; 101
     126:	5c 45       	sbci	r21, 0x5C	; 92
     128:	25 46       	sbci	r18, 0x65	; 101
     12a:	25 46       	sbci	r18, 0x65	; 101
     12c:	25 46       	sbci	r18, 0x65	; 101
     12e:	25 46       	sbci	r18, 0x65	; 101
     130:	25 46       	sbci	r18, 0x65	; 101
     132:	25 46       	sbci	r18, 0x65	; 101
     134:	25 46       	sbci	r18, 0x65	; 101
     136:	25 46       	sbci	r18, 0x65	; 101
     138:	25 46       	sbci	r18, 0x65	; 101
     13a:	3e 45       	sbci	r19, 0x5E	; 94
     13c:	c0 45       	sbci	r28, 0x50	; 80
     13e:	34 45       	sbci	r19, 0x54	; 84
     140:	92 45       	sbci	r25, 0x52	; 82
     142:	79 45       	sbci	r23, 0x59	; 89
     144:	25 46       	sbci	r18, 0x65	; 101
     146:	25 46       	sbci	r18, 0x65	; 101
     148:	25 46       	sbci	r18, 0x65	; 101
     14a:	25 46       	sbci	r18, 0x65	; 101
     14c:	25 46       	sbci	r18, 0x65	; 101
     14e:	25 46       	sbci	r18, 0x65	; 101
     150:	25 46       	sbci	r18, 0x65	; 101
     152:	25 46       	sbci	r18, 0x65	; 101
     154:	48 45       	sbci	r20, 0x58	; 88
     156:	5c 45       	sbci	r21, 0x5C	; 92
     158:	25 46       	sbci	r18, 0x65	; 101
     15a:	25 46       	sbci	r18, 0x65	; 101
     15c:	c0 45       	sbci	r28, 0x50	; 80
     15e:	25 46       	sbci	r18, 0x65	; 101
     160:	30 45       	sbci	r19, 0x50	; 80
     162:	25 46       	sbci	r18, 0x65	; 101
     164:	25 46       	sbci	r18, 0x65	; 101
     166:	5c 45       	sbci	r21, 0x5C	; 92
     168:	97 6a       	ori	r25, 0xA7	; 167
     16a:	a1 6a       	ori	r26, 0xA1	; 161
     16c:	a9 6a       	ori	r26, 0xA9	; 169
     16e:	ac 6a       	ori	r26, 0xAC	; 172
     170:	af 6a       	ori	r26, 0xAF	; 175
     172:	b2 6a       	ori	r27, 0xA2	; 162
     174:	b5 6a       	ori	r27, 0xA5	; 165
     176:	b8 6a       	ori	r27, 0xA8	; 168
     178:	bb 6a       	ori	r27, 0xAB	; 171
     17a:	fd 86       	std	Y+13, r15	; 0x0d
     17c:	23 87       	std	Z+11, r18	; 0x0b
     17e:	4a 87       	std	Y+10, r20	; 0x0a
     180:	64 87       	std	Z+12, r22	; 0x0c
     182:	6d 87       	std	Y+13, r22	; 0x0d
     184:	8d 87       	std	Y+13, r24	; 0x0d
     186:	a6 87       	std	Z+14, r26	; 0x0e
     188:	b5 87       	std	Z+13, r27	; 0x0d
     18a:	00 88       	ldd	r0, Z+16	; 0x10
     18c:	d2 87       	std	Z+10, r29	; 0x0a
     18e:	ee 89       	ldd	r30, Y+22	; 0x16
     190:	f6 89       	ldd	r31, Z+22	; 0x16
     192:	fb 89       	ldd	r31, Y+19	; 0x13
     194:	1f 8a       	std	Y+23, r1	; 0x17
     196:	29 8a       	std	Y+17, r2	; 0x11
     198:	73 8a       	std	Z+19, r7	; 0x13
     19a:	3e 8a       	std	Y+22, r3	; 0x16
     19c:	3e 8a       	std	Y+22, r3	; 0x16
     19e:	36 8a       	std	Z+22, r3	; 0x16
     1a0:	07 98       	cbi	0x00, 7	; 0
     1a2:	40 99       	sbic	0x08, 0	; 8
     1a4:	94 99       	sbic	0x12, 4	; 18
     1a6:	14 9a       	sbi	0x02, 4	; 2
     1a8:	45 9a       	sbi	0x08, 5	; 8
     1aa:	bb 9a       	sbi	0x17, 3	; 23
     1ac:	7d 9c       	mul	r7, r13
     1ae:	42 9f       	mul	r20, r18
     1b0:	42 9f       	mul	r20, r18
     1b2:	42 9f       	mul	r20, r18
     1b4:	4a 9d       	mul	r20, r10
     1b6:	85 9d       	mul	r24, r5
     1b8:	33 9e       	mul	r3, r19
     1ba:	73 9e       	mul	r7, r19
     1bc:	e0 98       	cbi	0x1c, 0	; 28
     1be:	f9 98       	cbi	0x1f, 1	; 31
     1c0:	11 bf       	out	0x31, r17	; 49
     1c2:	d0 be       	out	0x30, r13	; 48
     1c4:	d0 be       	out	0x30, r13	; 48
     1c6:	d0 be       	out	0x30, r13	; 48
     1c8:	d0 be       	out	0x30, r13	; 48
     1ca:	94 be       	out	0x34, r9	; 52
     1cc:	9b be       	out	0x3b, r9	; 59
     1ce:	a2 be       	out	0x32, r10	; 50
     1d0:	b2 be       	out	0x32, r11	; 50
     1d2:	c0 be       	out	0x30, r12	; 48
     1d4:	b9 be       	out	0x39, r11	; 57

000001d6 <__trampolines_end>:
     1d6:	6e 61       	ori	r22, 0x1E	; 30
     1d8:	6e 00       	.word	0x006e	; ????

000001da <__c.2332>:
     1da:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ea:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1fa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     20a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     21a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     22a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     23a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     24a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     25a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     26a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     27a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     28a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     29a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2aa:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ba:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ca:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d8 <__c.3699>:
     2d8:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e8:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f6 <__c.3694>:
     2f6:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     306:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000313 <__c.3725>:
     313:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     323:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     333:	25 75 29 0a 00                                      %u)..

00000338 <__c.3716>:
     338:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     348:	61 69 6c 65 64 21 0a 00                             ailed!..

00000350 <__c.3710>:
     350:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     360:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000036b <__c.3695>:
     36b:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     37b:	35 75 0a 00                                         5u..

0000037f <__c.3693>:
     37f:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     38f:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000039d <__c.3691>:
     39d:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3ad:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003bb <__c.3689>:
     3bb:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3cb:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d9 <__c.3687>:
     3d9:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f7 <__c.3685>:
     3f7:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     407:	75 0a 00                                            u..

0000040a <__c.3683>:
     40a:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     41a:	75 0a 00                                            u..

0000041d <__c.3681>:
     41d:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

0000042a <__c.3679>:
     42a:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     43a:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000447 <__c.3711>:
     447:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000457 <__c.3704>:
     457:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000468 <__c.3694>:
     468:	72 74 63 5f 69 6e 69 74 20 72 61 6d 20 2d 20 77     rtc_init ram - w
     478:	72 69 74 65 20 65 72 72 6f 72 0a 00                 rite error..

00000484 <__c.3692>:
     484:	72 74 63 20 5f 77 72 69 74 65 20 65 70 6f 63 68     rtc _write epoch
     494:	20 66 61 69 6c 65 64 0a 00                           failed..

0000049d <__c.3681>:
     49d:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     4ad:	65 72 72 6f 72 0a 00                                error..

000004b4 <__c.3679>:
     4b4:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     4c4:	6f 72 0a 00                                         or..

000004c8 <__c.3671>:
     4c8:	72 74 63 5f 73 74 61 74 65 20 72 65 61 64 20 65     rtc_state read e
     4d8:	72 72 6f 72 0a 00                                   rror..

000004de <__c.3829>:
     4de:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4ee:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4fe:	74 20 25 64 0a 00                                   t %d..

00000504 <__c.3663>:
     504:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     514:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000524 <__c.3742>:
     524:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

00000534 <__c.3740>:
     534:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

00000545 <__c.3738>:
     545:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     555:	66 61 69 6c 65 64 0a 00                             failed..

0000055d <__c.3736>:
     55d:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000569 <__c.3734>:
     569:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     579:	64 0a 00                                            d..

0000057c <__c.3732>:
     57c:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     58c:	65 64 0a 00                                         ed..

00000590 <__c.3712>:
     590:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

0000059b <__c.3710>:
     59b:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005a9 <__c.3701>:
     5a9:	5b 53 65 63 6f 6e 64 73 3a 20 25 73 5d 0a 00        [Seconds: %s]..

000005b8 <__c.3696>:
     5b8:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005c2 <__c.3676>:
     5c2:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5d2:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005df <__c.3951>:
     5df:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005f0 <__c.3949>:
     5f0:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     600:	0a 00                                               ..

00000602 <__c.3947>:
     602:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

00000613 <__c.3945>:
     613:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

00000624 <__c.3943>:
     624:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     634:	0a 00                                               ..

00000636 <__c.3936>:
     636:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     646:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     656:	6d 65 0a 00                                         me..

0000065a <__c.3934>:
     65a:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     66a:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

00000674 <__c.3932>:
     674:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     684:	61 69 6c 65 64 0a 00                                ailed..

0000068b <__c.3930>:
     68b:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     69b:	6e 69 74 0a 00                                      nit..

000006a0 <__c.3928>:
     6a0:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6b0:	0a 00                                               ..

000006b2 <__c.3919>:
     6b2:	44 53 54 20 45 4e 44 20 20 20 20 20 20 20 20 20     DST END         
     6c2:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006cb <__c.3917>:
     6cb:	44 53 54 20 53 54 41 52 54 20 20 20 20 20 20 20     DST START       
     6db:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006e4 <__c.3913>:
     6e4:	44 53 54 20 45 4e 44 20 20 20 6c 6f 63 61 6c 74     DST END   localt
     6f4:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

000006fd <__c.3911>:
     6fd:	44 53 54 20 53 54 41 52 54 20 6c 6f 63 61 6c 74     DST START localt
     70d:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

00000716 <__c.3882>:
     716:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     726:	61 69 6c 65 64 0a 00                                ailed..

0000072d <__c.3880>:
     72d:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

0000073e <__c.3878>:
     73e:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     74e:	0a 00                                               ..

00000750 <__c.3876>:
     750:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000761 <__c.3874>:
     761:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000772 <__c.3872>:
     772:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     782:	0a 00                                               ..

00000784 <__c.3851>:
     784:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     794:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

000007a5 <__c.3726>:
     7a5:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     7b5:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

000007c2 <__c.3694>:
     7c2:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

000007d2 <__c.3723>:
     7d2:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

000007e0 <__c.3721>:
     7e0:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     7f0:	25 6c 64 0a 00                                      %ld..

000007f5 <__c.3719>:
     7f5:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     805:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

00000813 <__c.3716>:
     813:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

00000824 <__c.3714>:
     824:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

00000830 <__c.3712>:
     830:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

00000840 <__c.3699>:
     840:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

0000084d <__c.3671>:
     84d:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     85d:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000869 <__c.3743>:
     869:	0a 00                                               ..

0000086b <__c.3741>:
     86b:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     87b:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     88b:	73 00                                               s.

0000088d <__c.3739>:
     88d:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     89d:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

000008a8 <__c.3733>:
     8a8:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     8b8:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8c8:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8d8:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8e8:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008f5 <__c.3731>:
     8f5:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     905:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     915:	30 34 58 0a 00                                      04X..

0000091a <__c.3729>:
     91a:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92a:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000938 <__c.3727>:
     938:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     948:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000957 <__c.3725>:
     957:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     967:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000976 <__c.3723>:
     976:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     986:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000995 <__c.3721>:
     995:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9a5:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009b4 <__c.3719>:
     9b4:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9c4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009d3 <__c.3717>:
     9d3:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9e3:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009f1 <__c.3715>:
     9f1:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a01:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a0f <__c.3713>:
     a0f:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a1f:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a2e <__c.3711>:
     a2e:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a3e:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a4c <__c.3709>:
     a4c:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a5d <__c.3673>:
     a5d:	72 63 3d 25 75 0a 00                                rc=%u..

00000a64 <__c.3711>:
     a64:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a74:	72 65 65 0a 00                                      ree..

00000a79 <__c.3709>:
     a79:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a89:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a99:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000aa2 <__c.3705>:
     aa2:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000ab0 <__c.3692>:
     ab0:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     ac0:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000ad0 <__c.3690>:
     ad0:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ade <__c.3688>:
     ade:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     aee:	73 74 0a 00                                         st..

00000af2 <__c.3686>:
     af2:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000b02 <__c.3684>:
     b02:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b12:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b22 <__c.3676>:
     b22:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b32 <__c.3666>:
     b32:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b42:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b52:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b62:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b72:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b82:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b92:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     ba2:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000bae <__c.3664>:
     bae:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000bba <__c.4025>:
     bba:	45 78 70 65 63 74 65 64 20 2f 64 65 76 2f 73 64     Expected /dev/sd
     bca:	61 20 2e 2e 20 2f 64 65 76 2f 73 64 6a 0a 00        a .. /dev/sdj..

00000bd9 <__c.3996>:
     bd9:	25 73 0a 00                                         %s..

00000bdd <__c.3994>:
     bdd:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000be5 <__c.3890>:
     be5:	09 63 74 69 6d 65 3a 20 25 73 0a 00                 .ctime: %s..

00000bf1 <__c.3888>:
     bf1:	09 6d 74 69 6d 65 3a 20 25 73 0a 00                 .mtime: %s..

00000bfd <__c.3886>:
     bfd:	09 61 74 69 6d 65 3a 20 25 73 0a 00                 .atime: %s..

00000c09 <__c.3884>:
     c09:	09 47 49 44 3a 20 20 20 25 6c 75 0a 00              .GID:   %lu..

00000c16 <__c.3882>:
     c16:	09 55 49 44 3a 20 20 20 25 6c 75 0a 00              .UID:   %lu..

00000c23 <__c.3880>:
     c23:	09 4d 6f 64 65 3a 20 20 25 6c 6f 0a 00              .Mode:  %lo..

00000c30 <__c.3878>:
     c30:	55 6e 6b 6e 6f 77 6e 0a 00                          Unknown..

00000c39 <__c.3876>:
     c39:	46 69 6c 65 0a 00                                   File..

00000c3f <__c.3874>:
     c3f:	44 49 52 0a 00                                      DIR..

00000c44 <__c.3872>:
     c44:	09 54 79 70 65 3a 20 20 00                          .Type:  .

00000c4d <__c.3870>:
     c4d:	09 53 69 7a 65 3a 20 20 25 6c 75 0a 00              .Size:  %lu..

00000c5a <__c.3749>:
     c5a:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000c66 <__c.3678>:
     c66:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     c76:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c7e <__c.3671>:
     c7e:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     c8e:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c96 <__c.3825>:
     c96:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000ca1 <__c.3821>:
     ca1:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     cb1:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     cc1:	68 0a 00                                            h..

00000cc4 <__c.3818>:
     cc4:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000cd4 <__c.3813>:
     cd4:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     ce4:	5b 25 73 5d 0a 00                                   [%s]..

00000cea <__c.3811>:
     cea:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000cf8 <__c.3809>:
     cf8:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     d08:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000d19 <__c.3796>:
     d19:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     d29:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000d33 <__c.3791>:
     d33:	25 73 0a 00                                         %s..

00000d37 <__c.3789>:
     d37:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     d47:	0a 00                                               ..

00000d49 <__c.3777>:
     d49:	0d 00                                               ..

00000d4b <__c.3775>:
     d4b:	4d 6f 72 65 2e 2e 00                                More...

00000d52 <__c.3765>:
     d52:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     d62:	2e 0a 00                                            ...

00000d65 <__c.3761>:
     d65:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000d74 <__c.3758>:
     d74:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000d81 <__c.3756>:
     d81:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000d8e <__c.3754>:
     d8e:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d9e <__c.3752>:
     d9e:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000dab <__c.3750>:
     dab:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000dbb <__c.3748>:
     dbb:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000dc7 <__c.3737>:
     dc7:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000dd2 <__c.3735>:
     dd2:	0a 00                                               ..

00000dd4 <__c.3730>:
     dd4:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000de4 <__c.3720>:
     de4:	25 73 0a 00                                         %s..

00000de8 <__c.3697>:
     de8:	70 6f 73 69 78 20 70 72 65 66 69 78 20 69 73 20     posix prefix is 
     df8:	6f 70 74 69 6f 6e 61 6c 0a 70 6f 73 69 78 20 63     optional.posix c
     e08:	61 74 20 66 69 6c 65 20 5b 2d 70 5d 0a 70 6f 73     at file [-p].pos
     e18:	69 78 20 63 64 20 64 69 72 0a 70 6f 73 69 78 20     ix cd dir.posix 
     e28:	63 6f 70 79 20 66 69 6c 65 31 20 66 69 6c 65 32     copy file1 file2
     e38:	0a 70 6f 73 69 78 20 6c 73 20 64 69 72 20 5b 2d     .posix ls dir [-
     e48:	6c 5d 0a 70 6f 73 69 78 20 6d 6b 64 69 72 20 64     l].posix mkdir d
     e58:	69 72 0a 70 6f 73 69 78 20 70 61 67 65 20 4e 4e     ir.posix page NN
     e68:	0a 70 6f 73 69 78 20 70 77 64 0a 70 6f 73 69 78     .posix pwd.posix
     e78:	20 72 6d 20 66 69 6c 65 0a 70 6f 73 69 78 20 72      rm file.posix r
     e88:	6d 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 72     mdir dir.posix r
     e98:	65 6e 61 6d 65 20 6f 6c 64 20 6e 65 77 0a 0a 00     ename old new...

00000ea8 <__c.3695>:
     ea8:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000eb4 <__c.3886>:
     eb4:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000ec2 <__c.3880>:
     ec2:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000ecf <__c.3873>:
     ecf:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000edd <__c.3864>:
     edd:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000eea <__c.3855>:
     eea:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000efb <__c.3841>:
     efb:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     f0b:	5d 0a 00                                            ]..

00000f0e <__c.3823>:
     f0e:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     f1e:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000f2b <__c.4408>:
     f2b:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f3b:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f4b:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f53 <__c.4403>:
     f53:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f63:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f6d <__c.4393>:
     f6d:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f7d:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     f8d:	28 25 64 29 5d 0a 00                                (%d)]..

00000f94 <__c.4389>:
     f94:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     fa4:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     fb4:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fc1 <__c.4386>:
     fc1:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fd1:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fda <__c.4370>:
     fda:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000fe5 <__c.4368>:
     fe5:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000ff0 <__c.4366>:
     ff0:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000ffb <__c.4362>:
     ffb:	20 20 20 20 20 00                                        .

00001001 <__c.4360>:
    1001:	25 30 32 58 20 25 63 20 00                          %02X %c .

0000100a <__c.4318>:
    100a:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    101a:	3e 0a 00                                            >..

0000101d <__c.4314>:
    101d:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    102d:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001037 <__c.4310>:
    1037:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1047:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

00001052 <__c.4307>:
    1052:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1062:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

0000106d <__c.4302>:
    106d:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    107d:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    108d:	20 3d 3d 20 30 3e 0a 00                              == 0>..

00001095 <__c.4298>:
    1095:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    10a5:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

000010af <__c.4281>:
    10af:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    10bf:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    10cf:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

000010dd <__c.4276>:
    10dd:	5b 52 45 4e 20 48 49 5d 0a 00                       [REN HI]..

000010e7 <__c.4274>:
    10e7:	5b 52 45 4e 20 4c 4f 57 5d 0a 00                    [REN LOW]..

000010f2 <__c.4269>:
    10f2:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

000010fe <__c.4261>:
    10fe:	5b 50 50 52 3a 25 30 32 58 48 2c 20 50 49 4e 3a     [PPR:%02XH, PIN:
    110e:	25 30 32 58 48 2c 20 44 44 52 3a 25 30 32 58 48     %02XH, DDR:%02XH
    111e:	5d 0a 00                                            ]..

00001121 <__c.4255>:
    1121:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1131:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000113c <__c.4253>:
    113c:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    114c:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    115c:	72 61 6e 67 65 0a 00                                range..

00001163 <__c.4248>:
    1163:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    1173:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000117e <__c.4246>:
    117e:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    118e:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    119e:	61 6e 67 65 0a 00                                   ange..

000011a4 <__c.4241>:
    11a4:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    11b4:	5d 0a 00                                            ]..

000011b7 <__c.4236>:
    11b7:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000011c8 <__c.4421>:
    11c8:	0a 00                                               ..

000011ca <__c.4413>:
    11ca:	2e 00                                               ..

000011cc <__c.4411>:
    11cc:	25 63 00                                            %c.

000011cf <__c.4409>:
    11cf:	20 7c 20 00                                          | .

000011d3 <__c.4404>:
    11d3:	20 25 30 32 58 00                                    %02X.

000011d9 <__c.4402>:
    11d9:	0a 00                                               ..

000011db <__c.4400>:
    11db:	5b 44 75 6d 70 3a 20 25 64 5d 0a 00                 [Dump: %d]..

000011e7 <__c.4389>:
    11e7:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000011f8 <__c.4384>:
    11f8:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1208:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    1218:	32 58 48 5d 0a 00                                   2XH]..

0000121e <__c.4382>:
    121e:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    122e:	0a 00                                               ..

00001230 <__c.4380>:
    1230:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001241 <__c.4375>:
    1241:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000124d <__c.4373>:
    124d:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

0000125d <__c.4371>:
    125d:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    126d:	52 5d 0a 00                                         R]..

00001271 <__c.4369>:
    1271:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    1281:	0a 00                                               ..

00001283 <__c.4367>:
    1283:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

00001294 <__c.4365>:
    1294:	5b 55 4e 54 5d 0a 00                                [UNT]..

0000129b <__c.4360>:
    129b:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012a7 <__c.4358>:
    12a7:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    12b7:	52 5d 0a 00                                         R]..

000012bb <__c.4356>:
    12bb:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000012cc <__c.4354>:
    12cc:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    12dc:	0a 00                                               ..

000012de <__c.4352>:
    12de:	0a 00                                               ..

000012e0 <__c.4350>:
    12e0:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000012e7 <__c.4345>:
    12e7:	5b 48 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [HPIB (%02XH) no
    12f7:	74 20 64 65 66 69 6e 65 64 5d 0a 00                 t defined]..

00001303 <__c.4343>:
    1303:	5b 44 43 4c 5d 0a 00                                [DCL]..

0000130a <__c.4341>:
    130a:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

00001317 <__c.4339>:
    1317:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

00001323 <__c.4337>:
    1323:	5b 53 44 43 5d 0a 00                                [SDC]..

0000132a <__c.4335>:
    132a:	5b 53 50 44 5d 0a 00                                [SPD]..

00001331 <__c.4333>:
    1331:	5b 53 50 45 5d 0a 00                                [SPE]..

00001338 <__c.4331>:
    1338:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    1348:	5d 0a 00                                            ]..

0000134b <__c.4329>:
    134b:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    135b:	5d 0a 00                                            ]..

0000135e <__c.4324>:
    135e:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    136e:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

00001378 <__c.4322>:
    1378:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1388:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001399 <__c.4295>:
    1399:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

000013aa <__c.4293>:
    13aa:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

000013b7 <__c.4291>:
    13b7:	3c 42 55 53 3e 0a 00                                <BUS>..

000013be <__c.4289>:
    13be:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000013c9 <__c.4287>:
    13c9:	3c 49 46 43 3e 0a 00                                <IFC>..

000013d0 <__c.4282>:
    13d0:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    13e0:	0a 00                                               ..

000013e2 <__c.4280>:
    13e2:	44 6f 6e 65 0a 00                                   Done..

000013e8 <__c.4276>:
    13e8:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000013f4 <__c.4274>:
    13f4:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1404:	20 65 78 69 74 0a 00                                 exit..

0000140b <__c.4272>:
    140b:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    141b:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    142b:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001436 <__c.4270>:
    1436:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1446:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

00001450 <__c.4224>:
    1450:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    1460:	6f 74 65 63 74 65 64 0a 00                          otected..

00001469 <__c.4222>:
    1469:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

0000147a <__c.4220>:
    147a:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    148a:	0a 00                                               ..

0000148c <__c.4438>:
    148c:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

00001499 <__c.4430>:
    1499:	67 70 69 62 20 70 72 65 66 69 78 20 69 73 20 6f     gpib prefix is o
    14a9:	70 74 69 6f 6e 61 6c 0a 67 70 69 62 20 61 64 64     ptional.gpib add
    14b9:	72 65 73 73 65 73 0a 67 70 69 62 20 63 6f 6e 66     resses.gpib conf
    14c9:	69 67 0a 67 70 69 62 20 64 65 62 75 67 20 4e 0a     ig.gpib debug N.
    14d9:	67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70 69     gpib elapsed.gpi
    14e9:	62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74 0a     b elapsed_reset.
    14f9:	67 70 69 62 20 69 66 63 0a 67 70 69 62 20 70 6c     gpib ifc.gpib pl
    1509:	6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78 74 0a     ot filename.txt.
    1519:	67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f 0a 67     gpib plot_echo.g
    1529:	70 69 62 20 74 61 73 6b 0a 67 70 69 62 20 74 72     pib task.gpib tr
    1539:	61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74 78 74     ace filename.txt
    1549:	20 5b 42 55 53 5d 0a 0a 0a 00                        [BUS]....

00001553 <__c.4428>:
    1553:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

0000155e <__c.4869>:
    155e:	0a 00                                               ..

00001560 <__c.4864>:
    1560:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001568 <__c.4862>:
    1568:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1578:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1588:	0a 00                                               ..

0000158a <__c.4860>:
    158a:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001592 <__c.4858>:
    1592:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    15a2:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    15b2:	0a 00                                               ..

000015b4 <__c.4845>:
    15b4:	0a 00                                               ..

000015b6 <__c.4843>:
    15b6:	45 4e 44 0a 00                                      END..

000015bb <__c.4838>:
    15bb:	0a 00                                               ..

000015bd <__c.4836>:
    15bd:	45 4e 44 0a 00                                      END..

000015c2 <__c.4834>:
    15c2:	20 20 45 4e 44 0a 00                                  END..

000015c9 <__c.4832>:
    15c9:	41 44 44 52 45 53 53 00                             ADDRESS.

000015d1 <__c.4830>:
    15d1:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

000015db <__c.4828>:
    15db:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

000015e4 <__c.4826>:
    15e4:	20 20 45 4e 44 0a 00                                  END..

000015eb <__c.4824>:
    15eb:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

000015f4 <__c.4822>:
    15f4:	43 59 4c 49 4e 44 45 52 53 00                       CYLINDERS.

000015fe <__c.4820>:
    15fe:	48 45 41 44 53 00                                   HEADS.

00001604 <__c.4818>:
    1604:	53 45 43 54 4f 52 53 5f 50 45 52 5f 54 52 41 43     SECTORS_PER_TRAC
    1614:	4b 00                                               K.

00001616 <__c.4816>:
    1616:	42 59 54 45 53 5f 50 45 52 5f 53 45 43 54 4f 52     BYTES_PER_SECTOR
	...

00001627 <__c.4814>:
    1627:	20 20 47 45 4f 4d 45 54 52 59 0a 00                   GEOMETRY..

00001633 <__c.4812>:
    1633:	20 20 45 4e 44 0a 00                                  END..

0000163a <__c.4810>:
    163a:	49 44 00                                            ID.

0000163d <__c.4808>:
    163d:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00001647 <__c.4806>:
    1647:	20 20 45 4e 44 0a 00                                  END..

0000164e <__c.4804>:
    164e:	46 49 4c 45 00                                      FILE.

00001653 <__c.4802>:
    1653:	50 50 52 00                                         PPR.

00001657 <__c.4800>:
    1657:	41 44 44 52 45 53 53 00                             ADDRESS.

0000165f <__c.4798>:
    165f:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00001669 <__c.4796>:
    1669:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1679:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001688 <__c.4794>:
    1688:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001692 <__c.4792>:
    1692:	20 20 45 4e 44 0a 00                                  END..

00001699 <__c.4790>:
    1699:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

000016a2 <__c.4788>:
    16a2:	49 4e 54 45 52 4c 45 41 56 45 00                    INTERLEAVE.

000016ad <__c.4786>:
    16ad:	4d 41 58 5f 42 4c 4f 43 4b 5f 4e 55 4d 42 45 52     MAX_BLOCK_NUMBER
	...

000016be <__c.4784>:
    16be:	4d 41 58 5f 53 45 43 54 4f 52 00                    MAX_SECTOR.

000016c9 <__c.4782>:
    16c9:	4d 41 58 5f 48 45 41 44 00                          MAX_HEAD.

000016d2 <__c.4780>:
    16d2:	4d 41 58 5f 43 59 4c 49 4e 44 45 52 00              MAX_CYLINDER.

000016df <__c.4778>:
    16df:	20 20 56 4f 4c 55 4d 45 0a 00                         VOLUME..

000016e9 <__c.4776>:
    16e9:	20 20 45 4e 44 0a 00                                  END..

000016f0 <__c.4774>:
    16f0:	52 45 4d 4f 56 41 42 4c 45 5f 56 4f 4c 55 4d 45     REMOVABLE_VOLUME
    1700:	53 00                                               S.

00001702 <__c.4772>:
    1702:	46 49 58 45 44 5f 56 4f 4c 55 4d 45 53 00           FIXED_VOLUMES.

00001710 <__c.4770>:
    1710:	4d 41 58 49 4d 55 4d 5f 49 4e 54 45 52 4c 45 41     MAXIMUM_INTERLEA
    1720:	56 45 00                                            VE.

00001723 <__c.4768>:
    1723:	41 43 43 45 53 53 5f 54 49 4d 45 00                 ACCESS_TIME.

0000172f <__c.4766>:
    172f:	4f 50 54 49 4d 41 4c 5f 52 45 54 52 59 5f 54 49     OPTIMAL_RETRY_TI
    173f:	4d 45 00                                            ME.

00001742 <__c.4764>:
    1742:	43 4f 4e 54 49 4e 4f 55 53 5f 54 52 41 4e 53 46     CONTINOUS_TRANSF
    1752:	45 52 5f 52 41 54 45 00                             ER_RATE.

0000175a <__c.4762>:
    175a:	42 4c 4f 43 4b 5f 54 49 4d 45 00                    BLOCK_TIME.

00001765 <__c.4760>:
    1765:	42 55 52 53 54 5f 53 49 5a 45 00                    BURST_SIZE.

00001770 <__c.4758>:
    1770:	42 55 46 46 45 52 45 44 5f 42 4c 4f 43 4b 53 00     BUFFERED_BLOCKS.

00001780 <__c.4756>:
    1780:	42 59 54 45 53 5f 50 45 52 5f 42 4c 4f 43 4b 00     BYTES_PER_BLOCK.

00001790 <__c.4754>:
    1790:	44 45 56 49 43 45 5f 4e 55 4d 42 45 52 00           DEVICE_NUMBER.

0000179e <__c.4752>:
    179e:	55 4e 49 54 5f 54 59 50 45 00                       UNIT_TYPE.

000017a8 <__c.4750>:
    17a8:	20 20 55 4e 49 54 0a 00                               UNIT..

000017b0 <__c.4748>:
    17b0:	20 20 45 4e 44 0a 00                                  END..

000017b7 <__c.4746>:
    17b7:	54 59 50 45 00                                      TYPE.

000017bc <__c.4744>:
    17bc:	54 52 41 4e 53 46 45 52 5f 52 41 54 45 00           TRANSFER_RATE.

000017ca <__c.4742>:
    17ca:	55 4e 49 54 53 5f 49 4e 53 54 41 4c 4c 45 44 00     UNITS_INSTALLED.

000017da <__c.4740>:
    17da:	20 20 43 4f 4e 54 52 4f 4c 4c 45 52 0a 00             CONTROLLER..

000017e8 <__c.4738>:
    17e8:	20 20 45 4e 44 0a 00                                  END..

000017ef <__c.4736>:
    17ef:	49 44 00                                            ID.

000017f2 <__c.4734>:
    17f2:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

000017fc <__c.4732>:
    17fc:	20 20 45 4e 44 0a 00                                  END..

00001803 <__c.4730>:
    1803:	46 49 4c 45 00                                      FILE.

00001808 <__c.4728>:
    1808:	50 50 52 00                                         PPR.

0000180c <__c.4726>:
    180c:	41 44 44 52 45 53 53 00                             ADDRESS.

00001814 <__c.4724>:
    1814:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

0000181e <__c.4722>:
    181e:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    182e:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

0000183d <__c.4720>:
    183d:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001846 <__c.4717>:
    1846:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1856:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001866 <__c.4709>:
    1866:	0a 00                                               ..

00001868 <__c.4704>:
    1868:	20 20 50 52 49 4e 54 45 52 5f 4d 53 41 20 3d 20       PRINTER_MSA = 
    1878:	25 30 32 58 48 0a 00                                %02XH..

0000187f <__c.4702>:
    187f:	20 20 50 52 49 4e 54 45 52 5f 4d 54 41 20 3d 20       PRINTER_MTA = 
    188f:	25 30 32 58 48 0a 00                                %02XH..

00001896 <__c.4700>:
    1896:	20 20 50 52 49 4e 54 45 52 5f 4d 4c 41 20 3d 20       PRINTER_MLA = 
    18a6:	25 30 32 58 48 0a 00                                %02XH..

000018ad <__c.4698>:
    18ad:	20 20 41 4d 49 47 4f 5f 4d 53 41 20 20 20 3d 20       AMIGO_MSA   = 
    18bd:	25 30 32 58 48 0a 00                                %02XH..

000018c4 <__c.4696>:
    18c4:	20 20 41 4d 49 47 4f 5f 4d 54 41 20 20 20 3d 20       AMIGO_MTA   = 
    18d4:	25 30 32 58 48 0a 00                                %02XH..

000018db <__c.4694>:
    18db:	20 20 41 4d 49 47 4f 5f 4d 4c 41 20 20 20 3d 20       AMIGO_MLA   = 
    18eb:	25 30 32 58 48 0a 00                                %02XH..

000018f2 <__c.4692>:
    18f2:	20 20 53 53 38 30 5f 4d 53 41 20 20 20 20 3d 20       SS80_MSA    = 
    1902:	25 30 32 58 48 0a 00                                %02XH..

00001909 <__c.4690>:
    1909:	20 20 53 53 38 30 5f 4d 54 41 20 20 20 20 3d 20       SS80_MTA    = 
    1919:	25 30 32 58 48 0a 00                                %02XH..

00001920 <__c.4688>:
    1920:	20 20 53 53 38 30 5f 4d 4c 41 20 20 20 20 3d 20       SS80_MLA    = 
    1930:	25 30 32 58 48 0a 00                                %02XH..

00001937 <__c.4685>:
    1937:	4c 69 73 74 65 6e 20 61 6e 64 20 54 61 6c 6b 20     Listen and Talk 
    1947:	41 64 64 72 65 73 73 20 53 65 74 74 69 6e 67 73     Address Settings
    1957:	0a 00                                               ..

00001959 <__c.4679>:
    1959:	20 20 20 20 25 2d 32 35 73 20 3d 20 22 25 73 22         %-25s = "%s"
    1969:	0a 00                                               ..

0000196b <__c.4668>:
    196b:	20 20 20 20 25 2d 32 35 73 20 3d 20 25 38 6c 78         %-25s = %8lx
    197b:	48 20 28 25 6c 64 29 0a 00                          H (%ld)..

00001984 <__c.4657>:
    1984:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1994:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    19a4:	2a 2a 2a 2a 2a 0a 00                                *****..

000019ab <__c.4655>:
    19ab:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    19bb:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

000019c8 <__c.4653>:
    19c8:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    19d8:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    19e8:	0a 00                                               ..

000019ea <__c.4649>:
    19ea:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    19fa:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1a0a:	0a 00                                               ..

00001a0c <__c.4646>:
    1a0c:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a1c:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1a2c:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001a3c <__c.4644>:
    1a3c:	42 59 54 45 53 20 50 45 52 20 53 45 43 54 4f 52     BYTES PER SECTOR
    1a4c:	3a 20 25 73 0a 00                                   : %s..

00001a52 <__c.4641>:
    1a52:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a62:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1a72:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001a81 <__c.4638>:
    1a81:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1a91:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1aa1:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001ab1 <__c.4636>:
    1ab1:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1ac1:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001aca <__c.4633>:
    1aca:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1ada:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1aea:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001af8 <__c.4630>:
    1af8:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b08:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1b18:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b26 <__c.4627>:
    1b26:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b36:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1b46:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001b52 <__c.4624>:
    1b52:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b62:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1b72:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1b82:	0a 00                                               ..

00001b84 <__c.4621>:
    1b84:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b94:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1ba4:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bb2 <__c.4618>:
    1bb2:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bc2:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1bd2:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001be0 <__c.4615>:
    1be0:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bf0:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1c00:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001c0d <__c.4612>:
    1c0d:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c1d:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1c2d:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001c3e <__c.4609>:
    1c3e:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c4e:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1c5e:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001c68 <__c.4605>:
    1c68:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 52 54     Unexpected START
    1c78:	20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74 20 6c      token: %s, at l
    1c88:	69 6e 65 3a 25 64 0a 00                             ine:%d..

00001c90 <__c.4603>:
    1c90:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1ca0:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001ca9 <__c.4599>:
    1ca9:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1cb9:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001cc7 <__c.4597>:
    1cc7:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001cd4 <__c.4575>:
    1cd4:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1ce4:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1cf4:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1d04:	6f 20 32 35 36 0a 00                                o 256..

00001d0b <__c.4573>:
    1d0b:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1d1b:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1d2b:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1d3b:	20 32 35 36 0a 00                                    256..

00001d41 <__c.4560>:
    1d41:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    1d51:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

00001d60 <__c.4551>:
    1d60:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 61     line:%d, %s is a
    1d70:	62 6f 76 65 20 72 61 6e 67 65 20 25 64 0a 00        bove range %d..

00001d7f <__c.4549>:
    1d7f:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 62     line:%d, %s is b
    1d8f:	65 6c 6f 77 20 72 61 6e 67 65 20 25 64 0a 00        elow range %d..

00001d9e <__c.4547>:
    1d9e:	6c 69 6e 65 3a 25 64 2c 20 6d 69 73 73 69 6e 67     line:%d, missing
    1dae:	20 76 61 6c 75 65 0a 00                              value..

00001db6 <__c.4524>:
    1db6:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1dc6:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1dd6:	0a 00                                               ..

00001dd8 <__c.4516>:
    1dd8:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1de8:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1df8:	6c 6c 0a 00                                         ll..

00001dfc <__c.4503>:
    1dfc:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e0c:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1e1c:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001e27 <__c.4501>:
    1e27:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e37:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1e47:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1e57:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001e5f <__c.4499>:
    1e5f:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e6f:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1e7f:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1e8f:	3a 25 73 0a 00                                      :%s..

00001e94 <__c.4497>:
    1e94:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1ea4:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1eb4:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1ec4:	55 4c 4c 0a 00                                      ULL..

00001ec9 <__c.4495>:
    1ec9:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1ed9:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1ee9:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1ef9:	66 20 72 61 6e 67 65 0a 00                          f range..

00001f02 <__c.4493>:
    1f02:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1f12:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1f22:	6e 67 65 0a 00                                      nge..

00001f27 <__c.3726>:
    1f27:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001f38 <__c.3724>:
    1f38:	25 73 20 25 73 0a 00                                %s %s..

00001f3f <__c.3720>:
    1f3f:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1f4f:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001f5c <__c.4532>:
    1f5c:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1f6c:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1f7c:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1f8c:	48 5d 0a 00                                         H]..

00001f90 <__c.4530>:
    1f90:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1fa0:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1fb0:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1fc0:	48 5d 0a 00                                         H]..

00001fc4 <__c.4528>:
    1fc4:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1fd4:	74 5d 0a 00                                         t]..

00001fd8 <__c.4526>:
    1fd8:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001fe7 <__c.4524>:
    1fe7:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1ff7:	74 65 5d 0a 00                                      te]..

00001ffc <__c.4522>:
    1ffc:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    200c:	61 74 65 5d 0a 00                                   ate]..

00002012 <__c.4520>:
    2012:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2022:	61 74 65 5d 0a 00                                   ate]..

00002028 <__c.4515>:
    2028:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    2038:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    2048:	5d 0a 00                                            ]..

0000204b <__c.4508>:
    204b:	5b 53 53 38 30 20 49 6e 63 72 65 6d 65 6e 74 20     [SS80 Increment 
    205b:	74 6f 20 28 25 6c 58 48 29 5d 0a 00                 to (%lXH)]..

00002067 <__c.4501>:
    2067:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002076 <__c.4499>:
    2076:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2086:	5d 0a 00                                            ]..

00002089 <__c.4492>:
    2089:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00002095 <__c.4478>:
    2095:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    20a5:	5d 0a 00                                            ]..

000020a8 <__c.4476>:
    20a8:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    20b8:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

000020c2 <__c.4469>:
    20c2:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    20d2:	48 5d 0a 00                                         H]..

000020d6 <__c.4467>:
    20d6:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    20e6:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

000020f6 <__c.4462>:
    20f6:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2106:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    2116:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    2126:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00002132 <__c.4459>:
    2132:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2142:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002152 <__c.4457>:
    2152:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    2162:	29 5d 0a 00                                         )]..

00002166 <__c.4455>:
    2166:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    2176:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    2186:	28 25 64 29 5d 0a 00                                (%d)]..

0000218d <__c.4453>:
    218d:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    219d:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

000021ab <__c.4451>:
    21ab:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    21bb:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

000021c8 <__c.4448>:
    21c8:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    21d8:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    21e8:	44 4f 5d 0a 00                                      DO]..

000021ed <__c.4445>:
    21ed:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    21fd:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002206 <__c.4443>:
    2206:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2216:	5d 0a 00                                            ]..

00002219 <__c.4434>:
    2219:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    2229:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    2239:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    2249:	43 6f 64 65 73 5d 0a 00                             Codes]..

00002251 <__c.4431>:
    2251:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2261:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002271 <__c.4429>:
    2271:	5b 53 53 38 30 20 49 6e 69 61 74 65 20 44 69 61     [SS80 Iniate Dia
    2281:	67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f 5d 0a     gnostic - TODO].
	...

00002292 <__c.4427>:
    2292:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    22a2:	61 74 75 73 5d 0a 00                                atus]..

000022a9 <__c.4425>:
    22a9:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    22b9:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

000022c2 <__c.4423>:
    22c2:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    22d2:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

000022dd <__c.4421>:
    22dd:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    22ed:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

000022fc <__c.4419>:
    22fc:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    230c:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

0000231a <__c.4417>:
    231a:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000232b <__c.4415>:
    232b:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    233b:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00002347 <__c.4413>:
    2347:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2357:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00002364 <__c.4411>:
    2364:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    2374:	2d 4f 50 5d 0a 00                                   -OP]..

0000237a <__c.4409>:
    237a:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    238a:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

0000239b <__c.4407>:
    239b:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    23ab:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    23bb:	44 4f 5d 0a 00                                      DO]..

000023c0 <__c.4405>:
    23c0:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    23d0:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

000023da <__c.4403>:
    23da:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    23ea:	2d 4f 50 5d 0a 00                                   -OP]..

000023f0 <__c.4401>:
    23f0:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000023fe <__c.4399>:
    23fe:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    240e:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

0000241a <__c.4397>:
    241a:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    242a:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00002437 <__c.4395>:
    2437:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2447:	20 57 72 69 74 65 5d 0a 00                           Write]..

00002450 <__c.4392>:
    2450:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2460:	20 52 65 61 64 5d 0a 00                              Read]..

00002468 <__c.4390>:
    2468:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    2478:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

00002481 <__c.4387>:
    2481:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    2491:	25 64 29 5d 0a 00                                   %d)]..

00002497 <__c.4385>:
    2497:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    24a7:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000024b0 <__c.4383>:
    24b0:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    24c0:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    24d0:	52 4f 52 5d 0a 00                                   ROR]..

000024d6 <__c.4374>:
    24d6:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    24e6:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

000024f0 <__c.4369>:
    24f0:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    2500:	76 61 6c 69 64 5d 0a 00                             valid]..

00002508 <__c.4364>:
    2508:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    2518:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00002527 <__c.4362>:
    2527:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    2537:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00002544 <__c.4360>:
    2544:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    2554:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    2564:	5d 0a 00                                            ]..

00002567 <__c.4358>:
    2567:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002578 <__c.4350>:
    2578:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2588:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00002593 <__c.4348>:
    2593:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    25a3:	73 5d 0a 00                                         s]..

000025a7 <__c.4338>:
    25a7:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

000025b2 <__c.4336>:
    25b2:	25 73 3a 0a 00                                      %s:..

000025b7 <__c.4311>:
    25b7:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25c7:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    25d7:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

000025e2 <__c.4309>:
    25e2:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25f2:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    2602:	49 4e 49 53 48 5d 0a 00                             INISH]..

0000260a <__c.4305>:
    260a:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    261a:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    262a:	58 48 29 5d 0a 00                                   XH)]..

00002630 <__c.4303>:
    2630:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    2640:	72 5d 0a 00                                         r]..

00002644 <__c.4299>:
    2644:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2654:	5d 0a 00                                            ]..

00002657 <__c.4297>:
    2657:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2667:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    2677:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00002680 <__c.4285>:
    2680:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2690:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    26a0:	62 79 74 65 73 5d 0a 00                             bytes]..

000026a8 <__c.4283>:
    26a8:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    26b8:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    26c8:	53 48 5d 0a 00                                      SH]..

000026cd <__c.4278>:
    26cd:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    26dd:	20 57 72 72 6f 72 5d 0a 00                           Wrror]..

000026e6 <__c.4276>:
    26e6:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    26f6:	45 72 72 6f 72 5d 0a 00                             Error]..

000026fe <__c.4274>:
    26fe:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    270e:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

0000271c <__c.4272>:
    271c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    272c:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    273c:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002744 <__c.4255>:
    2744:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2754:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

00002760 <__c.4239>:
    2760:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    2770:	5d 0a 00                                            ]..

00002773 <__c.4214>:
    2773:	5b 53 53 38 30 20 54 65 73 74 20 44 6f 6e 65 5d     [SS80 Test Done]
    2783:	0a 00                                               ..

00002785 <__c.4212>:
    2785:	5b 53 53 38 30 20 54 65 73 74 5d 0a 00              [SS80 Test]..

00002792 <__c.4369>:
    2792:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    27a2:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    27b2:	64 64 72 65 73 73 5d 0a 00                          ddress]..

000027bb <__c.4366>:
    27bb:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    27cb:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    27db:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000027e6 <__c.4363>:
    27e6:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    27f6:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2806:	66 66 65 72 65 64 5d 0a 00                          ffered]..

0000280f <__c.4358>:
    280f:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    281f:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

0000282f <__c.4355>:
    282f:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    283f:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

0000284b <__c.4352>:
    284b:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    285b:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    286b:	0a 00                                               ..

0000286d <__c.4349>:
    286d:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    287d:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

0000288c <__c.4346>:
    288c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    289c:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

000028ad <__c.4343>:
    28ad:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    28bd:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

000028cd <__c.4339>:
    28cd:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    28dd:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    28ed:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    28fd:	0a 00                                               ..

000028ff <__c.4334>:
    28ff:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

0000290f <__c.4331>:
    290f:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    291f:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

0000292e <__c.4329>:
    292e:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    293e:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    294e:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002959 <__c.4327>:
    2959:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2969:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002979 <__c.4325>:
    2979:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2989:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2999:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000029a2 <__c.4323>:
    29a2:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    29b2:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

000029be <__c.4321>:
    29be:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    29ce:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    29de:	0a 00                                               ..

000029e0 <__c.4319>:
    29e0:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

000029f0 <__c.4316>:
    29f0:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2a00:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002a11 <__c.4314>:
    2a11:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2a21:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2a31:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002a3a <__c.4312>:
    2a3a:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2a4a:	36 5d 0a 00                                         6]..

00002a4e <__c.4309>:
    2a4e:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2a5e:	35 5d 0a 00                                         5]..

00002a62 <__c.4306>:
    2a62:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2a72:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002a82 <__c.4303>:
    2a82:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2a92:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2aa2:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002ab1 <__c.4301>:
    2ab1:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2ac1:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002ad2 <__c.4299>:
    2ad2:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2ae2:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002af3 <__c.4297>:
    2af3:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2b03:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2b13:	0a 00                                               ..

00002b15 <__c.4295>:
    2b15:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2b25:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2b35:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2b45:	0a 00                                               ..

00002b47 <__c.4283>:
    2b47:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2b57:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2b67:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2b77:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2b87:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002b98 <__c.4281>:
    2b98:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2ba8:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2bb8:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2bc8:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2bd8:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002be8 <__c.4279>:
    2be8:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2bf8:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c08:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2c18:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2c28:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002c38 <__c.4277>:
    2c38:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2c48:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c58:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2c68:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2c78:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002c88 <__c.4272>:
    2c88:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2c98:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2ca8:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2cb8:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2cc8:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2cd8:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2ce8:	58 48 5d 0a 00                                      XH]..

00002ced <__c.4270>:
    2ced:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2cfd:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d0d:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2d1d:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2d2d:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2d3d:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2d4d:	30 32 58 48 5d 0a 00                                02XH]..

00002d54 <__c.4268>:
    2d54:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2d64:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d74:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2d84:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2d94:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2da4:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2db4:	30 32 58 48 5d 0a 00                                02XH]..

00002dbb <__c.4266>:
    2dbb:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2dcb:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2ddb:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2deb:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2dfb:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2e0b:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2e1b:	30 32 58 48 5d 0a 00                                02XH]..

00002e22 <__c.4259>:
    2e22:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002e31 <__c.4255>:
    2e31:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2e41:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002e4b <__c.4253>:
    2e4b:	5b 41 4d 49 47 4f 20 57 61 6b 65 75 70 5d 0a 00     [AMIGO Wakeup]..

00002e5b <__c.4246>:
    2e5b:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002e68 <__c.4244>:
    2e68:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2e78:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002e82 <__c.4237>:
    2e82:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2e92:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002ea1 <__c.4230>:
    2ea1:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2eb1:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002ebb <__c.4223>:
    2ebb:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2ecb:	6e 65 5d 0a 00                                      ne]..

00002ed0 <__c.4219>:
    2ed0:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002ee0 <__c.4178>:
    2ee0:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2ef0:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2f00:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002f0b <__c.4208>:
    2f0b:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2f1b:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2f2b:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002f33 <__c.4185>:
    2f33:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2f43:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002f4c <__c.4171>:
    2f4c:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2f5c:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002f66 <__c.4169>:
    2f66:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2f76:	75 73 5d 0a 00                                      us]..

00002f7b <__c.4163>:
    2f7b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2f8b:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002f95 <__c.4161>:
    2f95:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2fa5:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002fb3 <__c.4155>:
    2fb3:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2fc3:	74 61 74 75 73 5d 0a 00                             tatus]..

00002fcb <__c.4177>:
    2fcb:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 62 79     received:[%d] by
    2fdb:	74 65 73 0a 00                                      tes..

00002fe0 <__c.4175>:
    2fe0:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    2ff0:	0a 00                                               ..

00002ff2 <__c.4173>:
    2ff2:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    3002:	0a 00                                               ..

00003004 <__c.4168>:
    3004:	70 72 69 6e 74 65 72 20 6e 6f 74 20 64 65 66 69     printer not defi
    3014:	6e 65 64 0a 00                                      ned..

00003019 <__c.4159>:
    3019:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    3029:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00003033 <__c.4157>:
    3033:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    3043:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

0000304f <__c.4152>:
    304f:	25 30 38 6c 64 0d 00                                %08ld..

00003056 <__c.4146>:
    3056:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    3066:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00003077 <__c.4140>:
    3077:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00003085 <__c.4138>:
    3085:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    3095:	69 74 65 0a 00                                      ite..

0000309a <__c.4132>:
    309a:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000030a6 <__c.4130>:
    30a6:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    30b6:	6f 3a 25 73 0a 00                                   o:%s..

000030bc <__c.4128>:
    30bc:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    30cc:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    30dc:	74 00                                               t.

000030de <__c.4796>:
    30de:	09 46 6f 72 6d 61 74 69 6e 67 3a 20 77 72 6f 74     .Formating: wrot
    30ee:	65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00        e %ld sectors..

000030fd <__c.4794>:
    30fd:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    310d:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

0000311d <__c.4792>:
    311d:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    312d:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    313d:	30 0a 00                                            0..

00003140 <__c.4790>:
    3140:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3150:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    3160:	70 74 79 0a 00                                      pty..

00003165 <__c.4788>:
    3165:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3175:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    3185:	73 20 65 6d 70 74 79 0a 00                          s empty..

0000318e <__c.4775>:
    318e:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    319e:	20 25 31 30 73 0a 00                                 %10s..

000031a5 <__c.4773>:
    31a5:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    31b5:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    31c5:	74 20 66 6f 75 6e 64 0a 00                          t found..

000031ce <__c.4771>:
    31ce:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    31de:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    31ee:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    31fe:	74 65 72 73 0a 00                                   ters..

00003204 <__c.4769>:
    3204:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3214:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3224:	65 6d 70 74 79 0a 00                                empty..

0000322b <__c.4767>:
    322b:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    323b:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    324b:	65 6d 70 74 79 0a 00                                empty..

00003252 <__c.4765>:
    3252:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3262:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    3272:	20 65 6d 70 74 79 0a 00                              empty..

0000327a <__c.4756>:
    327a:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00003289 <__c.4754>:
    3289:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    3299:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    32a9:	20 66 6f 75 6e 64 0a 00                              found..

000032b1 <__c.4752>:
    32b1:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    32c1:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000032d0 <__c.4750>:
    32d0:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    32e0:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

000032f0 <__c.4748>:
    32f0:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3300:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    3310:	70 74 79 0a 00                                      pty..

00003315 <__c.4740>:
    3315:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003323 <__c.4735>:
    3323:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003331 <__c.4733>:
    3331:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3341:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3351:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003361 <__c.4731>:
    3361:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3371:	73 0a 00                                            s..

00003374 <__c.4729>:
    3374:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3384:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3394:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000033a3 <__c.4727>:
    33a3:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    33b3:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000033bf <__c.4725>:
    33bf:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    33cf:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000033da <__c.4723>:
    33da:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    33ea:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

000033fa <__c.4706>:
    33fa:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003408 <__c.4701>:
    3408:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003416 <__c.4699>:
    3416:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3426:	73 0a 00                                            s..

00003429 <__c.4697>:
    3429:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3439:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003441 <__c.4680>:
    3441:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000344f <__c.4677>:
    344f:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    345f:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    346f:	20 65 72 72 6f 72 0a 00                              error..

00003477 <__c.4669>:
    3477:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003485 <__c.4667>:
    3485:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3495:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    34a5:	20 65 72 72 6f 72 0a 00                              error..

000034ad <__c.4664>:
    34ad:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    34bd:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    34cd:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    34dd:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    34ed:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    34fd:	30 32 58 48 0a 00                                   02XH..

00003503 <__c.4662>:
    3503:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3513:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3523:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3533:	20 25 64 0a 00                                       %d..

00003538 <__c.4658>:
    3538:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003548 <__c.4656>:
    3548:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3558:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3568:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3578:	30 78 45 30 31 33 0a 00                             0xE013..

00003580 <__c.4654>:
    3580:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    3590:	6e 64 3a 25 73 0a 00                                nd:%s..

00003597 <__c.4652>:
    3597:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    35a7:	75 6e 64 3a 25 73 0a 00                             und:%s..

000035af <__c.4628>:
    35af:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000035bd <__c.4626>:
    35bd:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    35cd:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000035d6 <__c.4624>:
    35d6:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    35e6:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000035ef <__c.4622>:
    35ef:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    35ff:	20 20 25 34 64 0a 00                                  %4d..

00003606 <__c.4620>:
    3606:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3616:	20 20 20 25 73 0a 00                                   %s..

0000361d <__c.4618>:
    361d:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    362d:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    363d:	77 72 69 74 65 0a 00                                write..

00003644 <__c.4616>:
    3644:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3654:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3664:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003674 <__c.4614>:
    3674:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3684:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3694:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000036a3 <__c.4612>:
    36a3:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    36b3:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    36c3:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000036d3 <__c.4610>:
    36d3:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    36e3:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    36f3:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003702 <__c.4608>:
    3702:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3712:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3722:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003730 <__c.4606>:
    3730:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3740:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3750:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    3760:	79 0a 00                                            y..

00003763 <__c.4592>:
    3763:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003771 <__c.4590>:
    3771:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000377f <__c.4585>:
    377f:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000378d <__c.4568>:
    378d:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    379d:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    37ad:	25 64 0a 00                                         %d..

000037b1 <__c.4551>:
    37b1:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    37c1:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    37d1:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    37e1:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

000037ea <__c.4537>:
    37ea:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    37fa:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    380a:	62 69 67 0a 00                                      big..

0000380f <__c.4535>:
    380f:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    381f:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    382f:	63 74 65 72 73 0a 00                                cters..

00003836 <__c.4528>:
    3836:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3846:	73 0a 00                                            s..

00003849 <__c.4526>:
    3849:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3859:	73 0a 00                                            s..

0000385c <__c.4524>:
    385c:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    386c:	73 0a 00                                            s..

0000386f <__c.4522>:
    386f:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

00003880 <__c.4520>:
    3880:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

0000388d <__c.4518>:
    388d:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

00003899 <__c.4516>:
    3899:	0a 00                                               ..

0000389b <__c.4513>:
    389b:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    38ab:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    38bb:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000038cb <__c.4511>:
    38cb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    38db:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    38eb:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    38fb:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    390b:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003917 <__c.4508>:
    3917:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3927:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3937:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3947:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003957 <__c.4506>:
    3957:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3967:	3a 5b 25 73 5d 0a 00                                :[%s]..

0000396e <__c.4496>:
    396e:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    397e:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    398e:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    399e:	64 0a 00                                            d..

000039a1 <__c.4494>:
    39a1:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    39b1:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    39c1:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    39d1:	64 0a 00                                            d..

000039d4 <__c.4492>:
    39d4:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    39e4:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    39f4:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3a04:	69 6c 65 64 0a 00                                   iled..

00003a0a <__c.4490>:
    3a0a:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3a1a:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3a2a:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3a3a:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003a49 <__c.4477>:
    3a49:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3a59:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3a69:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3a79:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3a89:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003a9a <__c.4474>:
    3a9a:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3aaa:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3aba:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003ac3 <__c.4472>:
    3ac3:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3ad3:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3ae3:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3af3:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003afb <__c.4460>:
    3afb:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3b0b:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3b1b:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3b2b:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3b3b:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003b48 <__c.4435>:
    3b48:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3b58:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003b68 <__c.4426>:
    3b68:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3b78:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3b88:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3b98:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003ba2 <__c.4407>:
    3ba2:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003baf <__c.4402>:
    3baf:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003bbc <__c.4397>:
    3bbc:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003bc9 <__c.4389>:
    3bc9:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003bd6 <__c.4387>:
    3bd6:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3be6:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3bf6:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3c06:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3c16:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3c26:	25 6c 64 0a 00                                      %ld..

00003c2b <__c.4371>:
    3c2b:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c3b:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3c4b:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003c57 <__c.4369>:
    3c57:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c67:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3c77:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003c82 <__c.4367>:
    3c82:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c92:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3ca2:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3cb2:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3cc2:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003ccd <__c.4365>:
    3ccd:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3cdd:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3ced:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3cfd:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3d0d:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003d18 <__c.4363>:
    3d18:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d28:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3d38:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003d46 <__c.4361>:
    3d46:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d56:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3d66:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3d76:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003d87 <__c.4359>:
    3d87:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d97:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3da7:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3db7:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3dc7:	58 68 0a 00                                         Xh..

00003dcb <__c.4357>:
    3dcb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ddb:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003dec <__c.4351>:
    3dec:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3dfc:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3e0c:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003e18 <__c.4349>:
    3e18:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e28:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3e38:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003e47 <__c.4347>:
    3e47:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e57:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3e67:	25 6c 64 0a 00                                      %ld..

00003e6c <__c.4345>:
    3e6c:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e7c:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3e8c:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3e9c:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003ea5 <__c.4343>:
    3ea5:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3eb5:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3ec5:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3ed5:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003ede <__c.4341>:
    3ede:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3eee:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003ef6 <__c.4339>:
    3ef6:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f06:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3f16:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3f26:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003f2f <__c.4337>:
    3f2f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f3f:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003f4e <__c.4330>:
    3f4e:	0a 00                                               ..

00003f50 <__c.4328>:
    3f50:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3f60:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f6a <__c.4326>:
    3f6a:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3f7a:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003f86 <__c.4324>:
    3f86:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3f96:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fa3 <__c.4322>:
    3fa3:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3fb3:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003fc0 <__c.4320>:
    3fc0:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3fd0:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fdd <__c.4318>:
    3fdd:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3fed:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003ff9 <__c.4316>:
    3ff9:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    4009:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004015 <__c.4314>:
    4015:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    4025:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000402f <__c.4312>:
    402f:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    403f:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004049 <__c.4310>:
    4049:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    4059:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004065 <__c.4308>:
    4065:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    4075:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004081 <__c.4306>:
    4081:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    4091:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000409e <__c.4304>:
    409e:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    40ae:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040bb <__c.4302>:
    40bb:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    40cb:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000040d7 <__c.4300>:
    40d7:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    40e7:	20 20 20 20 20 20 25 73 0a 00                             %s..

000040f1 <__c.4298>:
    40f1:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    4101:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000410e <__c.4296>:
    410e:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    411e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000412b <__c.4294>:
    412b:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    413b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004148 <__c.4292>:
    4148:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4158:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004165 <__c.4290>:
    4165:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    4175:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004182 <__c.4288>:
    4182:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    4192:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000419f <__c.4286>:
    419f:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    41af:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041bc <__c.4284>:
    41bc:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    41cc:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041d9 <__c.4282>:
    41d9:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    41e9:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041f3 <__c.4280>:
    41f3:	0a 25 73 0a 00                                      .%s..

000041f8 <__c.4157>:
    41f8:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4208:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4218:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4228:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004235 <__c.4148>:
    4235:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    4245:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4255:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4265:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00004271 <__c.4139>:
    4271:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    4281:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

00004292 <__c.4132>:
    4292:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    42a2:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000042ab <__c.4126>:
    42ab:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    42bb:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    42cb:	25 73 5d 0a 00                                      %s]..

000042d0 <__c.4114>:
    42d0:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    42e0:	6f 69 6e 74 65 72 0a 00                             ointer..

000042e8 <__c.4109>:
    42e8:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    42f8:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4308:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004311 <__c.4103>:
    4311:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    4321:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004332 <__c.4090>:
    4332:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    4342:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    4352:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4362:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    4372:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    4382:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    4392:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    43a2:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    43b2:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    43c2:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    43d2:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    43e2:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    43f2:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4402:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4412:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    4422:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4432:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    4442:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    4452:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    4462:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    4472:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    4482:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    4492:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    44a2:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    44b2:	6d 65 0a 55 73 65 20 2d 64 20 61 66 74 65 72 20     me.Use -d after 
    44c2:	66 69 72 73 74 20 6b 65 79 77 6f 72 64 20 27 6c     first keyword 'l
    44d2:	69 66 27 20 61 62 6f 76 65 20 66 6f 72 20 4c 49     if' above for LI
    44e2:	46 20 66 69 6c 65 73 79 73 74 65 6d 20 64 65 62     F filesystem deb
    44f2:	75 67 67 69 6e 67 0a 0a 00                          ugging...

000044fb <__c.4088>:
    44fb:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

00004505 <__c.4554>:
    4505:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4515:	53 4b 0a 00                                         SK..

00004519 <__c.4552>:
    4519:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4529:	30 34 78 48 0a 00                                   04xH..

0000452f <__c.4550>:
    452f:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    453f:	64 6f 6e 65 0a 00                                   done..

00004545 <__c.4548>:
    4545:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    4555:	6f 6e 65 0a 00                                      one..

0000455a <__c.4546>:
    455a:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    456a:	61 6c 69 7a 65 64 0a 00                             alized..

00004572 <__c.4544>:
    4572:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    4582:	0a 00                                               ..

00004584 <__c.4542>:
    4584:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    4594:	7a 65 64 0a 00                                      zed..

00004599 <__c.4540>:
    4599:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    45a9:	69 7a 65 64 0a 00                                   ized..

000045af <__c.4538>:
    45af:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

000045c0 <__c.4536>:
    45c0:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    45d0:	20 73 74 61 72 74 0a 00                              start..

000045d8 <__c.4534>:
    45d8:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    45e8:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000045f2 <__c.4532>:
    45f2:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4602:	7a 61 74 69 6f 6e 20 44 6f 6e 65 0a 00              zation Done..

0000460f <__c.4530>:
    460f:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    461f:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

0000462d <__c.4528>:
    462d:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    463d:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

0000464a <__c.4526>:
    464a:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004659 <__c.4524>:
    4659:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     initializing RTC
    4669:	0a 00                                               ..

0000466b <__c.4522>:
    466b:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    467b:	20 62 75 73 0a 00                                    bus..

00004681 <__c.4520>:
    4681:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    4691:	20 62 75 73 0a 00                                    bus..

00004697 <__c.4518>:
    4697:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    46a7:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000046b1 <__c.4516>:
    46b1:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    46c1:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000046cb <__c.4514>:
    46cb:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    46db:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    46eb:	35 64 69 73 6b 0a 00                                5disk..

000046f2 <__c.4512>:
    46f2:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004702 <__c.4510>:
    4702:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4712:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000471f <__c.4508>:
    471f:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    472f:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000473e <__c.4506>:
    473e:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    474e:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    475e:	3a 20 25 6c 64 0a 00                                : %ld..

00004765 <__c.4504>:
    4765:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004776 <__c.4502>:
    4776:	53 74 61 72 74 0a 00                                Start..

0000477d <__c.4494>:
    477d:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

00004789 <__c.4492>:
    4789:	0a 3e 00                                            .>.

0000478c <__c.4482>:
    478c:	64 65 6c 61 79 5f 74 65 73 74 73 0a 68 65 6c 70     delay_tests.help
    479c:	0a 6d 65 6d 0a 73 65 74 64 61 74 65 0a 74 69 6d     .mem.setdate.tim
    47ac:	65 0a 0a 00                                         e...

000047b0 <__c.4478>:
    47b0:	4d 79 20 64 65 6c 61 79 73 0a 00                    My delays..

000047bb <__c.4476>:
    47bb:	53 79 73 74 65 6d 20 64 65 6c 61 79 73 0a 00        System delays..

000047ca <__c.4472>:
    47ca:	0a 00                                               ..

000047cc <__c.4470>:
    47cc:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    47dc:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000047e6 <__c.4468>:
    47e6:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    47f6:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004800 <__c.4466>:
    4800:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4810:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4820:	35 64 69 73 6b 0a 00                                5disk..

00004827 <__c.4464>:
    4827:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004837 <__c.4462>:
    4837:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4847:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004854 <__c.4460>:
    4854:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4864:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004873 <__c.4458>:
    4873:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4883:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4893:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

000048a4 <__ctors_end>:
    48a4:	11 24       	eor	r1, r1
    48a6:	1f be       	out	0x3f, r1	; 63
    48a8:	cf ef       	ldi	r28, 0xFF	; 255
    48aa:	d0 e4       	ldi	r29, 0x40	; 64
    48ac:	de bf       	out	0x3e, r29	; 62
    48ae:	cd bf       	out	0x3d, r28	; 61

000048b0 <__do_copy_data>:
    48b0:	17 e1       	ldi	r17, 0x17	; 23
    48b2:	a0 e0       	ldi	r26, 0x00	; 0
    48b4:	b1 e0       	ldi	r27, 0x01	; 1
    48b6:	e6 ee       	ldi	r30, 0xE6	; 230
    48b8:	f4 ed       	ldi	r31, 0xD4	; 212
    48ba:	01 e0       	ldi	r16, 0x01	; 1
    48bc:	0b bf       	out	0x3b, r16	; 59
    48be:	02 c0       	rjmp	.+4      	; 0x48c4 <__do_copy_data+0x14>
    48c0:	07 90       	elpm	r0, Z+
    48c2:	0d 92       	st	X+, r0
    48c4:	a6 34       	cpi	r26, 0x46	; 70
    48c6:	b1 07       	cpc	r27, r17
    48c8:	d9 f7       	brne	.-10     	; 0x48c0 <__do_copy_data+0x10>

000048ca <__do_clear_bss>:
    48ca:	20 e2       	ldi	r18, 0x20	; 32
    48cc:	a6 e4       	ldi	r26, 0x46	; 70
    48ce:	b7 e1       	ldi	r27, 0x17	; 23
    48d0:	01 c0       	rjmp	.+2      	; 0x48d4 <.do_clear_bss_start>

000048d2 <.do_clear_bss_loop>:
    48d2:	1d 92       	st	X+, r1

000048d4 <.do_clear_bss_start>:
    48d4:	a8 3a       	cpi	r26, 0xA8	; 168
    48d6:	b2 07       	cpc	r27, r18
    48d8:	e1 f7       	brne	.-8      	; 0x48d2 <.do_clear_bss_loop>
    48da:	0e 94 d4 e2 	call	0x1c5a8	; 0x1c5a8 <main>
    48de:	0c 94 71 ea 	jmp	0x1d4e2	; 0x1d4e2 <_exit>

000048e2 <__bad_interrupt>:
    48e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000048e6 <vfprintf>:
    48e6:	2f 92       	push	r2
    48e8:	3f 92       	push	r3
    48ea:	4f 92       	push	r4
    48ec:	5f 92       	push	r5
    48ee:	6f 92       	push	r6
    48f0:	7f 92       	push	r7
    48f2:	8f 92       	push	r8
    48f4:	9f 92       	push	r9
    48f6:	af 92       	push	r10
    48f8:	bf 92       	push	r11
    48fa:	cf 92       	push	r12
    48fc:	df 92       	push	r13
    48fe:	ef 92       	push	r14
    4900:	ff 92       	push	r15
    4902:	0f 93       	push	r16
    4904:	1f 93       	push	r17
    4906:	cf 93       	push	r28
    4908:	df 93       	push	r29
    490a:	cd b7       	in	r28, 0x3d	; 61
    490c:	de b7       	in	r29, 0x3e	; 62
    490e:	60 97       	sbiw	r28, 0x10	; 16
    4910:	0f b6       	in	r0, 0x3f	; 63
    4912:	f8 94       	cli
    4914:	de bf       	out	0x3e, r29	; 62
    4916:	0f be       	out	0x3f, r0	; 63
    4918:	cd bf       	out	0x3d, r28	; 61
    491a:	7c 01       	movw	r14, r24
    491c:	1b 01       	movw	r2, r22
    491e:	6a 01       	movw	r12, r20
    4920:	fc 01       	movw	r30, r24
    4922:	17 82       	std	Z+7, r1	; 0x07
    4924:	16 82       	std	Z+6, r1	; 0x06
    4926:	83 81       	ldd	r24, Z+3	; 0x03
    4928:	81 ff       	sbrs	r24, 1
    492a:	44 c3       	rjmp	.+1672   	; 0x4fb4 <vfprintf+0x6ce>
    492c:	9e 01       	movw	r18, r28
    492e:	2f 5f       	subi	r18, 0xFF	; 255
    4930:	3f 4f       	sbci	r19, 0xFF	; 255
    4932:	39 01       	movw	r6, r18
    4934:	f7 01       	movw	r30, r14
    4936:	93 81       	ldd	r25, Z+3	; 0x03
    4938:	f1 01       	movw	r30, r2
    493a:	93 fd       	sbrc	r25, 3
    493c:	85 91       	lpm	r24, Z+
    493e:	93 ff       	sbrs	r25, 3
    4940:	81 91       	ld	r24, Z+
    4942:	1f 01       	movw	r2, r30
    4944:	88 23       	and	r24, r24
    4946:	09 f4       	brne	.+2      	; 0x494a <vfprintf+0x64>
    4948:	31 c3       	rjmp	.+1634   	; 0x4fac <vfprintf+0x6c6>
    494a:	85 32       	cpi	r24, 0x25	; 37
    494c:	39 f4       	brne	.+14     	; 0x495c <vfprintf+0x76>
    494e:	93 fd       	sbrc	r25, 3
    4950:	85 91       	lpm	r24, Z+
    4952:	93 ff       	sbrs	r25, 3
    4954:	81 91       	ld	r24, Z+
    4956:	1f 01       	movw	r2, r30
    4958:	85 32       	cpi	r24, 0x25	; 37
    495a:	39 f4       	brne	.+14     	; 0x496a <vfprintf+0x84>
    495c:	b7 01       	movw	r22, r14
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4964:	56 01       	movw	r10, r12
    4966:	65 01       	movw	r12, r10
    4968:	e5 cf       	rjmp	.-54     	; 0x4934 <vfprintf+0x4e>
    496a:	10 e0       	ldi	r17, 0x00	; 0
    496c:	51 2c       	mov	r5, r1
    496e:	91 2c       	mov	r9, r1
    4970:	ff e1       	ldi	r31, 0x1F	; 31
    4972:	f9 15       	cp	r31, r9
    4974:	d8 f0       	brcs	.+54     	; 0x49ac <vfprintf+0xc6>
    4976:	8b 32       	cpi	r24, 0x2B	; 43
    4978:	79 f0       	breq	.+30     	; 0x4998 <vfprintf+0xb2>
    497a:	38 f4       	brcc	.+14     	; 0x498a <vfprintf+0xa4>
    497c:	80 32       	cpi	r24, 0x20	; 32
    497e:	79 f0       	breq	.+30     	; 0x499e <vfprintf+0xb8>
    4980:	83 32       	cpi	r24, 0x23	; 35
    4982:	a1 f4       	brne	.+40     	; 0x49ac <vfprintf+0xc6>
    4984:	f9 2d       	mov	r31, r9
    4986:	f0 61       	ori	r31, 0x10	; 16
    4988:	2e c0       	rjmp	.+92     	; 0x49e6 <vfprintf+0x100>
    498a:	8d 32       	cpi	r24, 0x2D	; 45
    498c:	61 f0       	breq	.+24     	; 0x49a6 <vfprintf+0xc0>
    498e:	80 33       	cpi	r24, 0x30	; 48
    4990:	69 f4       	brne	.+26     	; 0x49ac <vfprintf+0xc6>
    4992:	29 2d       	mov	r18, r9
    4994:	21 60       	ori	r18, 0x01	; 1
    4996:	2d c0       	rjmp	.+90     	; 0x49f2 <vfprintf+0x10c>
    4998:	39 2d       	mov	r19, r9
    499a:	32 60       	ori	r19, 0x02	; 2
    499c:	93 2e       	mov	r9, r19
    499e:	89 2d       	mov	r24, r9
    49a0:	84 60       	ori	r24, 0x04	; 4
    49a2:	98 2e       	mov	r9, r24
    49a4:	2a c0       	rjmp	.+84     	; 0x49fa <vfprintf+0x114>
    49a6:	e9 2d       	mov	r30, r9
    49a8:	e8 60       	ori	r30, 0x08	; 8
    49aa:	15 c0       	rjmp	.+42     	; 0x49d6 <vfprintf+0xf0>
    49ac:	97 fc       	sbrc	r9, 7
    49ae:	2d c0       	rjmp	.+90     	; 0x4a0a <vfprintf+0x124>
    49b0:	20 ed       	ldi	r18, 0xD0	; 208
    49b2:	28 0f       	add	r18, r24
    49b4:	2a 30       	cpi	r18, 0x0A	; 10
    49b6:	88 f4       	brcc	.+34     	; 0x49da <vfprintf+0xf4>
    49b8:	96 fe       	sbrs	r9, 6
    49ba:	06 c0       	rjmp	.+12     	; 0x49c8 <vfprintf+0xe2>
    49bc:	3a e0       	ldi	r19, 0x0A	; 10
    49be:	13 9f       	mul	r17, r19
    49c0:	20 0d       	add	r18, r0
    49c2:	11 24       	eor	r1, r1
    49c4:	12 2f       	mov	r17, r18
    49c6:	19 c0       	rjmp	.+50     	; 0x49fa <vfprintf+0x114>
    49c8:	8a e0       	ldi	r24, 0x0A	; 10
    49ca:	58 9e       	mul	r5, r24
    49cc:	20 0d       	add	r18, r0
    49ce:	11 24       	eor	r1, r1
    49d0:	52 2e       	mov	r5, r18
    49d2:	e9 2d       	mov	r30, r9
    49d4:	e0 62       	ori	r30, 0x20	; 32
    49d6:	9e 2e       	mov	r9, r30
    49d8:	10 c0       	rjmp	.+32     	; 0x49fa <vfprintf+0x114>
    49da:	8e 32       	cpi	r24, 0x2E	; 46
    49dc:	31 f4       	brne	.+12     	; 0x49ea <vfprintf+0x104>
    49de:	96 fc       	sbrc	r9, 6
    49e0:	e5 c2       	rjmp	.+1482   	; 0x4fac <vfprintf+0x6c6>
    49e2:	f9 2d       	mov	r31, r9
    49e4:	f0 64       	ori	r31, 0x40	; 64
    49e6:	9f 2e       	mov	r9, r31
    49e8:	08 c0       	rjmp	.+16     	; 0x49fa <vfprintf+0x114>
    49ea:	8c 36       	cpi	r24, 0x6C	; 108
    49ec:	21 f4       	brne	.+8      	; 0x49f6 <vfprintf+0x110>
    49ee:	29 2d       	mov	r18, r9
    49f0:	20 68       	ori	r18, 0x80	; 128
    49f2:	92 2e       	mov	r9, r18
    49f4:	02 c0       	rjmp	.+4      	; 0x49fa <vfprintf+0x114>
    49f6:	88 36       	cpi	r24, 0x68	; 104
    49f8:	41 f4       	brne	.+16     	; 0x4a0a <vfprintf+0x124>
    49fa:	f1 01       	movw	r30, r2
    49fc:	93 fd       	sbrc	r25, 3
    49fe:	85 91       	lpm	r24, Z+
    4a00:	93 ff       	sbrs	r25, 3
    4a02:	81 91       	ld	r24, Z+
    4a04:	1f 01       	movw	r2, r30
    4a06:	81 11       	cpse	r24, r1
    4a08:	b3 cf       	rjmp	.-154    	; 0x4970 <vfprintf+0x8a>
    4a0a:	9b eb       	ldi	r25, 0xBB	; 187
    4a0c:	98 0f       	add	r25, r24
    4a0e:	93 30       	cpi	r25, 0x03	; 3
    4a10:	20 f4       	brcc	.+8      	; 0x4a1a <vfprintf+0x134>
    4a12:	99 2d       	mov	r25, r9
    4a14:	90 61       	ori	r25, 0x10	; 16
    4a16:	80 5e       	subi	r24, 0xE0	; 224
    4a18:	07 c0       	rjmp	.+14     	; 0x4a28 <vfprintf+0x142>
    4a1a:	9b e9       	ldi	r25, 0x9B	; 155
    4a1c:	98 0f       	add	r25, r24
    4a1e:	93 30       	cpi	r25, 0x03	; 3
    4a20:	08 f0       	brcs	.+2      	; 0x4a24 <vfprintf+0x13e>
    4a22:	66 c1       	rjmp	.+716    	; 0x4cf0 <vfprintf+0x40a>
    4a24:	99 2d       	mov	r25, r9
    4a26:	9f 7e       	andi	r25, 0xEF	; 239
    4a28:	96 ff       	sbrs	r25, 6
    4a2a:	16 e0       	ldi	r17, 0x06	; 6
    4a2c:	9f 73       	andi	r25, 0x3F	; 63
    4a2e:	99 2e       	mov	r9, r25
    4a30:	85 36       	cpi	r24, 0x65	; 101
    4a32:	19 f4       	brne	.+6      	; 0x4a3a <vfprintf+0x154>
    4a34:	90 64       	ori	r25, 0x40	; 64
    4a36:	99 2e       	mov	r9, r25
    4a38:	08 c0       	rjmp	.+16     	; 0x4a4a <vfprintf+0x164>
    4a3a:	86 36       	cpi	r24, 0x66	; 102
    4a3c:	21 f4       	brne	.+8      	; 0x4a46 <vfprintf+0x160>
    4a3e:	39 2f       	mov	r19, r25
    4a40:	30 68       	ori	r19, 0x80	; 128
    4a42:	93 2e       	mov	r9, r19
    4a44:	02 c0       	rjmp	.+4      	; 0x4a4a <vfprintf+0x164>
    4a46:	11 11       	cpse	r17, r1
    4a48:	11 50       	subi	r17, 0x01	; 1
    4a4a:	97 fe       	sbrs	r9, 7
    4a4c:	07 c0       	rjmp	.+14     	; 0x4a5c <vfprintf+0x176>
    4a4e:	1c 33       	cpi	r17, 0x3C	; 60
    4a50:	50 f4       	brcc	.+20     	; 0x4a66 <vfprintf+0x180>
    4a52:	44 24       	eor	r4, r4
    4a54:	43 94       	inc	r4
    4a56:	41 0e       	add	r4, r17
    4a58:	27 e0       	ldi	r18, 0x07	; 7
    4a5a:	0b c0       	rjmp	.+22     	; 0x4a72 <vfprintf+0x18c>
    4a5c:	18 30       	cpi	r17, 0x08	; 8
    4a5e:	38 f0       	brcs	.+14     	; 0x4a6e <vfprintf+0x188>
    4a60:	27 e0       	ldi	r18, 0x07	; 7
    4a62:	17 e0       	ldi	r17, 0x07	; 7
    4a64:	05 c0       	rjmp	.+10     	; 0x4a70 <vfprintf+0x18a>
    4a66:	27 e0       	ldi	r18, 0x07	; 7
    4a68:	9c e3       	ldi	r25, 0x3C	; 60
    4a6a:	49 2e       	mov	r4, r25
    4a6c:	02 c0       	rjmp	.+4      	; 0x4a72 <vfprintf+0x18c>
    4a6e:	21 2f       	mov	r18, r17
    4a70:	41 2c       	mov	r4, r1
    4a72:	56 01       	movw	r10, r12
    4a74:	84 e0       	ldi	r24, 0x04	; 4
    4a76:	a8 0e       	add	r10, r24
    4a78:	b1 1c       	adc	r11, r1
    4a7a:	f6 01       	movw	r30, r12
    4a7c:	60 81       	ld	r22, Z
    4a7e:	71 81       	ldd	r23, Z+1	; 0x01
    4a80:	82 81       	ldd	r24, Z+2	; 0x02
    4a82:	93 81       	ldd	r25, Z+3	; 0x03
    4a84:	04 2d       	mov	r16, r4
    4a86:	a3 01       	movw	r20, r6
    4a88:	0e 94 1e e9 	call	0x1d23c	; 0x1d23c <__ftoa_engine>
    4a8c:	6c 01       	movw	r12, r24
    4a8e:	f9 81       	ldd	r31, Y+1	; 0x01
    4a90:	fc 87       	std	Y+12, r31	; 0x0c
    4a92:	f0 ff       	sbrs	r31, 0
    4a94:	02 c0       	rjmp	.+4      	; 0x4a9a <vfprintf+0x1b4>
    4a96:	f3 ff       	sbrs	r31, 3
    4a98:	06 c0       	rjmp	.+12     	; 0x4aa6 <vfprintf+0x1c0>
    4a9a:	91 fc       	sbrc	r9, 1
    4a9c:	06 c0       	rjmp	.+12     	; 0x4aaa <vfprintf+0x1c4>
    4a9e:	92 fe       	sbrs	r9, 2
    4aa0:	06 c0       	rjmp	.+12     	; 0x4aae <vfprintf+0x1c8>
    4aa2:	00 e2       	ldi	r16, 0x20	; 32
    4aa4:	05 c0       	rjmp	.+10     	; 0x4ab0 <vfprintf+0x1ca>
    4aa6:	0d e2       	ldi	r16, 0x2D	; 45
    4aa8:	03 c0       	rjmp	.+6      	; 0x4ab0 <vfprintf+0x1ca>
    4aaa:	0b e2       	ldi	r16, 0x2B	; 43
    4aac:	01 c0       	rjmp	.+2      	; 0x4ab0 <vfprintf+0x1ca>
    4aae:	00 e0       	ldi	r16, 0x00	; 0
    4ab0:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ab2:	8c 70       	andi	r24, 0x0C	; 12
    4ab4:	19 f0       	breq	.+6      	; 0x4abc <vfprintf+0x1d6>
    4ab6:	01 11       	cpse	r16, r1
    4ab8:	5a c2       	rjmp	.+1204   	; 0x4f6e <vfprintf+0x688>
    4aba:	9b c2       	rjmp	.+1334   	; 0x4ff2 <vfprintf+0x70c>
    4abc:	97 fe       	sbrs	r9, 7
    4abe:	10 c0       	rjmp	.+32     	; 0x4ae0 <vfprintf+0x1fa>
    4ac0:	4c 0c       	add	r4, r12
    4ac2:	fc 85       	ldd	r31, Y+12	; 0x0c
    4ac4:	f4 ff       	sbrs	r31, 4
    4ac6:	04 c0       	rjmp	.+8      	; 0x4ad0 <vfprintf+0x1ea>
    4ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aca:	81 33       	cpi	r24, 0x31	; 49
    4acc:	09 f4       	brne	.+2      	; 0x4ad0 <vfprintf+0x1ea>
    4ace:	4a 94       	dec	r4
    4ad0:	14 14       	cp	r1, r4
    4ad2:	74 f5       	brge	.+92     	; 0x4b30 <vfprintf+0x24a>
    4ad4:	28 e0       	ldi	r18, 0x08	; 8
    4ad6:	24 15       	cp	r18, r4
    4ad8:	78 f5       	brcc	.+94     	; 0x4b38 <vfprintf+0x252>
    4ada:	88 e0       	ldi	r24, 0x08	; 8
    4adc:	48 2e       	mov	r4, r24
    4ade:	2c c0       	rjmp	.+88     	; 0x4b38 <vfprintf+0x252>
    4ae0:	96 fc       	sbrc	r9, 6
    4ae2:	2a c0       	rjmp	.+84     	; 0x4b38 <vfprintf+0x252>
    4ae4:	81 2f       	mov	r24, r17
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	8c 15       	cp	r24, r12
    4aea:	9d 05       	cpc	r25, r13
    4aec:	9c f0       	brlt	.+38     	; 0x4b14 <vfprintf+0x22e>
    4aee:	3c ef       	ldi	r19, 0xFC	; 252
    4af0:	c3 16       	cp	r12, r19
    4af2:	3f ef       	ldi	r19, 0xFF	; 255
    4af4:	d3 06       	cpc	r13, r19
    4af6:	74 f0       	brlt	.+28     	; 0x4b14 <vfprintf+0x22e>
    4af8:	89 2d       	mov	r24, r9
    4afa:	80 68       	ori	r24, 0x80	; 128
    4afc:	98 2e       	mov	r9, r24
    4afe:	0a c0       	rjmp	.+20     	; 0x4b14 <vfprintf+0x22e>
    4b00:	e2 e0       	ldi	r30, 0x02	; 2
    4b02:	f0 e0       	ldi	r31, 0x00	; 0
    4b04:	ec 0f       	add	r30, r28
    4b06:	fd 1f       	adc	r31, r29
    4b08:	e1 0f       	add	r30, r17
    4b0a:	f1 1d       	adc	r31, r1
    4b0c:	80 81       	ld	r24, Z
    4b0e:	80 33       	cpi	r24, 0x30	; 48
    4b10:	19 f4       	brne	.+6      	; 0x4b18 <vfprintf+0x232>
    4b12:	11 50       	subi	r17, 0x01	; 1
    4b14:	11 11       	cpse	r17, r1
    4b16:	f4 cf       	rjmp	.-24     	; 0x4b00 <vfprintf+0x21a>
    4b18:	97 fe       	sbrs	r9, 7
    4b1a:	0e c0       	rjmp	.+28     	; 0x4b38 <vfprintf+0x252>
    4b1c:	44 24       	eor	r4, r4
    4b1e:	43 94       	inc	r4
    4b20:	41 0e       	add	r4, r17
    4b22:	81 2f       	mov	r24, r17
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	c8 16       	cp	r12, r24
    4b28:	d9 06       	cpc	r13, r25
    4b2a:	2c f4       	brge	.+10     	; 0x4b36 <vfprintf+0x250>
    4b2c:	1c 19       	sub	r17, r12
    4b2e:	04 c0       	rjmp	.+8      	; 0x4b38 <vfprintf+0x252>
    4b30:	44 24       	eor	r4, r4
    4b32:	43 94       	inc	r4
    4b34:	01 c0       	rjmp	.+2      	; 0x4b38 <vfprintf+0x252>
    4b36:	10 e0       	ldi	r17, 0x00	; 0
    4b38:	97 fe       	sbrs	r9, 7
    4b3a:	06 c0       	rjmp	.+12     	; 0x4b48 <vfprintf+0x262>
    4b3c:	1c 14       	cp	r1, r12
    4b3e:	1d 04       	cpc	r1, r13
    4b40:	34 f4       	brge	.+12     	; 0x4b4e <vfprintf+0x268>
    4b42:	c6 01       	movw	r24, r12
    4b44:	01 96       	adiw	r24, 0x01	; 1
    4b46:	05 c0       	rjmp	.+10     	; 0x4b52 <vfprintf+0x26c>
    4b48:	85 e0       	ldi	r24, 0x05	; 5
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	02 c0       	rjmp	.+4      	; 0x4b52 <vfprintf+0x26c>
    4b4e:	81 e0       	ldi	r24, 0x01	; 1
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	01 11       	cpse	r16, r1
    4b54:	01 96       	adiw	r24, 0x01	; 1
    4b56:	11 23       	and	r17, r17
    4b58:	31 f0       	breq	.+12     	; 0x4b66 <vfprintf+0x280>
    4b5a:	21 2f       	mov	r18, r17
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	2f 5f       	subi	r18, 0xFF	; 255
    4b60:	3f 4f       	sbci	r19, 0xFF	; 255
    4b62:	82 0f       	add	r24, r18
    4b64:	93 1f       	adc	r25, r19
    4b66:	25 2d       	mov	r18, r5
    4b68:	30 e0       	ldi	r19, 0x00	; 0
    4b6a:	82 17       	cp	r24, r18
    4b6c:	93 07       	cpc	r25, r19
    4b6e:	14 f4       	brge	.+4      	; 0x4b74 <vfprintf+0x28e>
    4b70:	58 1a       	sub	r5, r24
    4b72:	01 c0       	rjmp	.+2      	; 0x4b76 <vfprintf+0x290>
    4b74:	51 2c       	mov	r5, r1
    4b76:	89 2d       	mov	r24, r9
    4b78:	89 70       	andi	r24, 0x09	; 9
    4b7a:	49 f4       	brne	.+18     	; 0x4b8e <vfprintf+0x2a8>
    4b7c:	55 20       	and	r5, r5
    4b7e:	39 f0       	breq	.+14     	; 0x4b8e <vfprintf+0x2a8>
    4b80:	b7 01       	movw	r22, r14
    4b82:	80 e2       	ldi	r24, 0x20	; 32
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4b8a:	5a 94       	dec	r5
    4b8c:	f7 cf       	rjmp	.-18     	; 0x4b7c <vfprintf+0x296>
    4b8e:	00 23       	and	r16, r16
    4b90:	29 f0       	breq	.+10     	; 0x4b9c <vfprintf+0x2b6>
    4b92:	b7 01       	movw	r22, r14
    4b94:	80 2f       	mov	r24, r16
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4b9c:	93 fc       	sbrc	r9, 3
    4b9e:	09 c0       	rjmp	.+18     	; 0x4bb2 <vfprintf+0x2cc>
    4ba0:	55 20       	and	r5, r5
    4ba2:	39 f0       	breq	.+14     	; 0x4bb2 <vfprintf+0x2cc>
    4ba4:	b7 01       	movw	r22, r14
    4ba6:	80 e3       	ldi	r24, 0x30	; 48
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4bae:	5a 94       	dec	r5
    4bb0:	f7 cf       	rjmp	.-18     	; 0x4ba0 <vfprintf+0x2ba>
    4bb2:	97 fe       	sbrs	r9, 7
    4bb4:	4c c0       	rjmp	.+152    	; 0x4c4e <vfprintf+0x368>
    4bb6:	46 01       	movw	r8, r12
    4bb8:	d7 fe       	sbrs	r13, 7
    4bba:	02 c0       	rjmp	.+4      	; 0x4bc0 <vfprintf+0x2da>
    4bbc:	81 2c       	mov	r8, r1
    4bbe:	91 2c       	mov	r9, r1
    4bc0:	c6 01       	movw	r24, r12
    4bc2:	88 19       	sub	r24, r8
    4bc4:	99 09       	sbc	r25, r9
    4bc6:	f3 01       	movw	r30, r6
    4bc8:	e8 0f       	add	r30, r24
    4bca:	f9 1f       	adc	r31, r25
    4bcc:	fe 87       	std	Y+14, r31	; 0x0e
    4bce:	ed 87       	std	Y+13, r30	; 0x0d
    4bd0:	96 01       	movw	r18, r12
    4bd2:	24 19       	sub	r18, r4
    4bd4:	31 09       	sbc	r19, r1
    4bd6:	38 8b       	std	Y+16, r19	; 0x10
    4bd8:	2f 87       	std	Y+15, r18	; 0x0f
    4bda:	01 2f       	mov	r16, r17
    4bdc:	10 e0       	ldi	r17, 0x00	; 0
    4bde:	11 95       	neg	r17
    4be0:	01 95       	neg	r16
    4be2:	11 09       	sbc	r17, r1
    4be4:	3f ef       	ldi	r19, 0xFF	; 255
    4be6:	83 16       	cp	r8, r19
    4be8:	93 06       	cpc	r9, r19
    4bea:	29 f4       	brne	.+10     	; 0x4bf6 <vfprintf+0x310>
    4bec:	b7 01       	movw	r22, r14
    4bee:	8e e2       	ldi	r24, 0x2E	; 46
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4bf6:	c8 14       	cp	r12, r8
    4bf8:	d9 04       	cpc	r13, r9
    4bfa:	4c f0       	brlt	.+18     	; 0x4c0e <vfprintf+0x328>
    4bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bfe:	98 89       	ldd	r25, Y+16	; 0x10
    4c00:	88 15       	cp	r24, r8
    4c02:	99 05       	cpc	r25, r9
    4c04:	24 f4       	brge	.+8      	; 0x4c0e <vfprintf+0x328>
    4c06:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c08:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c0a:	81 81       	ldd	r24, Z+1	; 0x01
    4c0c:	01 c0       	rjmp	.+2      	; 0x4c10 <vfprintf+0x32a>
    4c0e:	80 e3       	ldi	r24, 0x30	; 48
    4c10:	f1 e0       	ldi	r31, 0x01	; 1
    4c12:	8f 1a       	sub	r8, r31
    4c14:	91 08       	sbc	r9, r1
    4c16:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c18:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c1a:	2f 5f       	subi	r18, 0xFF	; 255
    4c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c1e:	3e 87       	std	Y+14, r19	; 0x0e
    4c20:	2d 87       	std	Y+13, r18	; 0x0d
    4c22:	80 16       	cp	r8, r16
    4c24:	91 06       	cpc	r9, r17
    4c26:	2c f0       	brlt	.+10     	; 0x4c32 <vfprintf+0x34c>
    4c28:	b7 01       	movw	r22, r14
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4c30:	d9 cf       	rjmp	.-78     	; 0x4be4 <vfprintf+0x2fe>
    4c32:	c8 14       	cp	r12, r8
    4c34:	d9 04       	cpc	r13, r9
    4c36:	41 f4       	brne	.+16     	; 0x4c48 <vfprintf+0x362>
    4c38:	9a 81       	ldd	r25, Y+2	; 0x02
    4c3a:	96 33       	cpi	r25, 0x36	; 54
    4c3c:	20 f4       	brcc	.+8      	; 0x4c46 <vfprintf+0x360>
    4c3e:	95 33       	cpi	r25, 0x35	; 53
    4c40:	19 f4       	brne	.+6      	; 0x4c48 <vfprintf+0x362>
    4c42:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c44:	34 ff       	sbrs	r19, 4
    4c46:	81 e3       	ldi	r24, 0x31	; 49
    4c48:	b7 01       	movw	r22, r14
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	4e c0       	rjmp	.+156    	; 0x4cea <vfprintf+0x404>
    4c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c50:	81 33       	cpi	r24, 0x31	; 49
    4c52:	19 f0       	breq	.+6      	; 0x4c5a <vfprintf+0x374>
    4c54:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c56:	9f 7e       	andi	r25, 0xEF	; 239
    4c58:	9c 87       	std	Y+12, r25	; 0x0c
    4c5a:	b7 01       	movw	r22, r14
    4c5c:	90 e0       	ldi	r25, 0x00	; 0
    4c5e:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4c62:	11 11       	cpse	r17, r1
    4c64:	05 c0       	rjmp	.+10     	; 0x4c70 <vfprintf+0x38a>
    4c66:	94 fc       	sbrc	r9, 4
    4c68:	18 c0       	rjmp	.+48     	; 0x4c9a <vfprintf+0x3b4>
    4c6a:	85 e6       	ldi	r24, 0x65	; 101
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
    4c6e:	17 c0       	rjmp	.+46     	; 0x4c9e <vfprintf+0x3b8>
    4c70:	b7 01       	movw	r22, r14
    4c72:	8e e2       	ldi	r24, 0x2E	; 46
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4c7a:	1e 5f       	subi	r17, 0xFE	; 254
    4c7c:	82 e0       	ldi	r24, 0x02	; 2
    4c7e:	01 e0       	ldi	r16, 0x01	; 1
    4c80:	08 0f       	add	r16, r24
    4c82:	f3 01       	movw	r30, r6
    4c84:	e8 0f       	add	r30, r24
    4c86:	f1 1d       	adc	r31, r1
    4c88:	80 81       	ld	r24, Z
    4c8a:	b7 01       	movw	r22, r14
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4c92:	80 2f       	mov	r24, r16
    4c94:	01 13       	cpse	r16, r17
    4c96:	f3 cf       	rjmp	.-26     	; 0x4c7e <vfprintf+0x398>
    4c98:	e6 cf       	rjmp	.-52     	; 0x4c66 <vfprintf+0x380>
    4c9a:	85 e4       	ldi	r24, 0x45	; 69
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	b7 01       	movw	r22, r14
    4ca0:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4ca4:	d7 fc       	sbrc	r13, 7
    4ca6:	06 c0       	rjmp	.+12     	; 0x4cb4 <vfprintf+0x3ce>
    4ca8:	c1 14       	cp	r12, r1
    4caa:	d1 04       	cpc	r13, r1
    4cac:	41 f4       	brne	.+16     	; 0x4cbe <vfprintf+0x3d8>
    4cae:	ec 85       	ldd	r30, Y+12	; 0x0c
    4cb0:	e4 ff       	sbrs	r30, 4
    4cb2:	05 c0       	rjmp	.+10     	; 0x4cbe <vfprintf+0x3d8>
    4cb4:	d1 94       	neg	r13
    4cb6:	c1 94       	neg	r12
    4cb8:	d1 08       	sbc	r13, r1
    4cba:	8d e2       	ldi	r24, 0x2D	; 45
    4cbc:	01 c0       	rjmp	.+2      	; 0x4cc0 <vfprintf+0x3da>
    4cbe:	8b e2       	ldi	r24, 0x2B	; 43
    4cc0:	b7 01       	movw	r22, r14
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4cc8:	80 e3       	ldi	r24, 0x30	; 48
    4cca:	2a e0       	ldi	r18, 0x0A	; 10
    4ccc:	c2 16       	cp	r12, r18
    4cce:	d1 04       	cpc	r13, r1
    4cd0:	2c f0       	brlt	.+10     	; 0x4cdc <vfprintf+0x3f6>
    4cd2:	8f 5f       	subi	r24, 0xFF	; 255
    4cd4:	fa e0       	ldi	r31, 0x0A	; 10
    4cd6:	cf 1a       	sub	r12, r31
    4cd8:	d1 08       	sbc	r13, r1
    4cda:	f7 cf       	rjmp	.-18     	; 0x4cca <vfprintf+0x3e4>
    4cdc:	b7 01       	movw	r22, r14
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4ce4:	b7 01       	movw	r22, r14
    4ce6:	c6 01       	movw	r24, r12
    4ce8:	c0 96       	adiw	r24, 0x30	; 48
    4cea:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4cee:	54 c1       	rjmp	.+680    	; 0x4f98 <vfprintf+0x6b2>
    4cf0:	83 36       	cpi	r24, 0x63	; 99
    4cf2:	31 f0       	breq	.+12     	; 0x4d00 <vfprintf+0x41a>
    4cf4:	83 37       	cpi	r24, 0x73	; 115
    4cf6:	79 f0       	breq	.+30     	; 0x4d16 <vfprintf+0x430>
    4cf8:	83 35       	cpi	r24, 0x53	; 83
    4cfa:	09 f0       	breq	.+2      	; 0x4cfe <vfprintf+0x418>
    4cfc:	56 c0       	rjmp	.+172    	; 0x4daa <vfprintf+0x4c4>
    4cfe:	20 c0       	rjmp	.+64     	; 0x4d40 <vfprintf+0x45a>
    4d00:	56 01       	movw	r10, r12
    4d02:	32 e0       	ldi	r19, 0x02	; 2
    4d04:	a3 0e       	add	r10, r19
    4d06:	b1 1c       	adc	r11, r1
    4d08:	f6 01       	movw	r30, r12
    4d0a:	80 81       	ld	r24, Z
    4d0c:	89 83       	std	Y+1, r24	; 0x01
    4d0e:	01 e0       	ldi	r16, 0x01	; 1
    4d10:	10 e0       	ldi	r17, 0x00	; 0
    4d12:	63 01       	movw	r12, r6
    4d14:	12 c0       	rjmp	.+36     	; 0x4d3a <vfprintf+0x454>
    4d16:	56 01       	movw	r10, r12
    4d18:	f2 e0       	ldi	r31, 0x02	; 2
    4d1a:	af 0e       	add	r10, r31
    4d1c:	b1 1c       	adc	r11, r1
    4d1e:	f6 01       	movw	r30, r12
    4d20:	c0 80       	ld	r12, Z
    4d22:	d1 80       	ldd	r13, Z+1	; 0x01
    4d24:	96 fe       	sbrs	r9, 6
    4d26:	03 c0       	rjmp	.+6      	; 0x4d2e <vfprintf+0x448>
    4d28:	61 2f       	mov	r22, r17
    4d2a:	70 e0       	ldi	r23, 0x00	; 0
    4d2c:	02 c0       	rjmp	.+4      	; 0x4d32 <vfprintf+0x44c>
    4d2e:	6f ef       	ldi	r22, 0xFF	; 255
    4d30:	7f ef       	ldi	r23, 0xFF	; 255
    4d32:	c6 01       	movw	r24, r12
    4d34:	0e 94 08 ea 	call	0x1d410	; 0x1d410 <strnlen>
    4d38:	8c 01       	movw	r16, r24
    4d3a:	f9 2d       	mov	r31, r9
    4d3c:	ff 77       	andi	r31, 0x7F	; 127
    4d3e:	14 c0       	rjmp	.+40     	; 0x4d68 <vfprintf+0x482>
    4d40:	56 01       	movw	r10, r12
    4d42:	22 e0       	ldi	r18, 0x02	; 2
    4d44:	a2 0e       	add	r10, r18
    4d46:	b1 1c       	adc	r11, r1
    4d48:	f6 01       	movw	r30, r12
    4d4a:	c0 80       	ld	r12, Z
    4d4c:	d1 80       	ldd	r13, Z+1	; 0x01
    4d4e:	96 fe       	sbrs	r9, 6
    4d50:	03 c0       	rjmp	.+6      	; 0x4d58 <vfprintf+0x472>
    4d52:	61 2f       	mov	r22, r17
    4d54:	70 e0       	ldi	r23, 0x00	; 0
    4d56:	02 c0       	rjmp	.+4      	; 0x4d5c <vfprintf+0x476>
    4d58:	6f ef       	ldi	r22, 0xFF	; 255
    4d5a:	7f ef       	ldi	r23, 0xFF	; 255
    4d5c:	c6 01       	movw	r24, r12
    4d5e:	0e 94 f6 e9 	call	0x1d3ec	; 0x1d3ec <strnlen_P>
    4d62:	8c 01       	movw	r16, r24
    4d64:	f9 2d       	mov	r31, r9
    4d66:	f0 68       	ori	r31, 0x80	; 128
    4d68:	9f 2e       	mov	r9, r31
    4d6a:	f3 fd       	sbrc	r31, 3
    4d6c:	1a c0       	rjmp	.+52     	; 0x4da2 <vfprintf+0x4bc>
    4d6e:	85 2d       	mov	r24, r5
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	08 17       	cp	r16, r24
    4d74:	19 07       	cpc	r17, r25
    4d76:	a8 f4       	brcc	.+42     	; 0x4da2 <vfprintf+0x4bc>
    4d78:	b7 01       	movw	r22, r14
    4d7a:	80 e2       	ldi	r24, 0x20	; 32
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4d82:	5a 94       	dec	r5
    4d84:	f4 cf       	rjmp	.-24     	; 0x4d6e <vfprintf+0x488>
    4d86:	f6 01       	movw	r30, r12
    4d88:	97 fc       	sbrc	r9, 7
    4d8a:	85 91       	lpm	r24, Z+
    4d8c:	97 fe       	sbrs	r9, 7
    4d8e:	81 91       	ld	r24, Z+
    4d90:	6f 01       	movw	r12, r30
    4d92:	b7 01       	movw	r22, r14
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4d9a:	51 10       	cpse	r5, r1
    4d9c:	5a 94       	dec	r5
    4d9e:	01 50       	subi	r16, 0x01	; 1
    4da0:	11 09       	sbc	r17, r1
    4da2:	01 15       	cp	r16, r1
    4da4:	11 05       	cpc	r17, r1
    4da6:	79 f7       	brne	.-34     	; 0x4d86 <vfprintf+0x4a0>
    4da8:	f7 c0       	rjmp	.+494    	; 0x4f98 <vfprintf+0x6b2>
    4daa:	84 36       	cpi	r24, 0x64	; 100
    4dac:	11 f0       	breq	.+4      	; 0x4db2 <vfprintf+0x4cc>
    4dae:	89 36       	cpi	r24, 0x69	; 105
    4db0:	61 f5       	brne	.+88     	; 0x4e0a <vfprintf+0x524>
    4db2:	56 01       	movw	r10, r12
    4db4:	97 fe       	sbrs	r9, 7
    4db6:	09 c0       	rjmp	.+18     	; 0x4dca <vfprintf+0x4e4>
    4db8:	24 e0       	ldi	r18, 0x04	; 4
    4dba:	a2 0e       	add	r10, r18
    4dbc:	b1 1c       	adc	r11, r1
    4dbe:	f6 01       	movw	r30, r12
    4dc0:	60 81       	ld	r22, Z
    4dc2:	71 81       	ldd	r23, Z+1	; 0x01
    4dc4:	82 81       	ldd	r24, Z+2	; 0x02
    4dc6:	93 81       	ldd	r25, Z+3	; 0x03
    4dc8:	0a c0       	rjmp	.+20     	; 0x4dde <vfprintf+0x4f8>
    4dca:	f2 e0       	ldi	r31, 0x02	; 2
    4dcc:	af 0e       	add	r10, r31
    4dce:	b1 1c       	adc	r11, r1
    4dd0:	f6 01       	movw	r30, r12
    4dd2:	60 81       	ld	r22, Z
    4dd4:	71 81       	ldd	r23, Z+1	; 0x01
    4dd6:	07 2e       	mov	r0, r23
    4dd8:	00 0c       	add	r0, r0
    4dda:	88 0b       	sbc	r24, r24
    4ddc:	99 0b       	sbc	r25, r25
    4dde:	f9 2d       	mov	r31, r9
    4de0:	ff 76       	andi	r31, 0x6F	; 111
    4de2:	9f 2e       	mov	r9, r31
    4de4:	97 ff       	sbrs	r25, 7
    4de6:	09 c0       	rjmp	.+18     	; 0x4dfa <vfprintf+0x514>
    4de8:	90 95       	com	r25
    4dea:	80 95       	com	r24
    4dec:	70 95       	com	r23
    4dee:	61 95       	neg	r22
    4df0:	7f 4f       	sbci	r23, 0xFF	; 255
    4df2:	8f 4f       	sbci	r24, 0xFF	; 255
    4df4:	9f 4f       	sbci	r25, 0xFF	; 255
    4df6:	f0 68       	ori	r31, 0x80	; 128
    4df8:	9f 2e       	mov	r9, r31
    4dfa:	2a e0       	ldi	r18, 0x0A	; 10
    4dfc:	30 e0       	ldi	r19, 0x00	; 0
    4dfe:	a3 01       	movw	r20, r6
    4e00:	0e 94 13 ea 	call	0x1d426	; 0x1d426 <__ultoa_invert>
    4e04:	c8 2e       	mov	r12, r24
    4e06:	c6 18       	sub	r12, r6
    4e08:	3f c0       	rjmp	.+126    	; 0x4e88 <vfprintf+0x5a2>
    4e0a:	09 2d       	mov	r16, r9
    4e0c:	85 37       	cpi	r24, 0x75	; 117
    4e0e:	21 f4       	brne	.+8      	; 0x4e18 <vfprintf+0x532>
    4e10:	0f 7e       	andi	r16, 0xEF	; 239
    4e12:	2a e0       	ldi	r18, 0x0A	; 10
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	1d c0       	rjmp	.+58     	; 0x4e52 <vfprintf+0x56c>
    4e18:	09 7f       	andi	r16, 0xF9	; 249
    4e1a:	8f 36       	cpi	r24, 0x6F	; 111
    4e1c:	91 f0       	breq	.+36     	; 0x4e42 <vfprintf+0x55c>
    4e1e:	18 f4       	brcc	.+6      	; 0x4e26 <vfprintf+0x540>
    4e20:	88 35       	cpi	r24, 0x58	; 88
    4e22:	59 f0       	breq	.+22     	; 0x4e3a <vfprintf+0x554>
    4e24:	c3 c0       	rjmp	.+390    	; 0x4fac <vfprintf+0x6c6>
    4e26:	80 37       	cpi	r24, 0x70	; 112
    4e28:	19 f0       	breq	.+6      	; 0x4e30 <vfprintf+0x54a>
    4e2a:	88 37       	cpi	r24, 0x78	; 120
    4e2c:	11 f0       	breq	.+4      	; 0x4e32 <vfprintf+0x54c>
    4e2e:	be c0       	rjmp	.+380    	; 0x4fac <vfprintf+0x6c6>
    4e30:	00 61       	ori	r16, 0x10	; 16
    4e32:	04 ff       	sbrs	r16, 4
    4e34:	09 c0       	rjmp	.+18     	; 0x4e48 <vfprintf+0x562>
    4e36:	04 60       	ori	r16, 0x04	; 4
    4e38:	07 c0       	rjmp	.+14     	; 0x4e48 <vfprintf+0x562>
    4e3a:	94 fe       	sbrs	r9, 4
    4e3c:	08 c0       	rjmp	.+16     	; 0x4e4e <vfprintf+0x568>
    4e3e:	06 60       	ori	r16, 0x06	; 6
    4e40:	06 c0       	rjmp	.+12     	; 0x4e4e <vfprintf+0x568>
    4e42:	28 e0       	ldi	r18, 0x08	; 8
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	05 c0       	rjmp	.+10     	; 0x4e52 <vfprintf+0x56c>
    4e48:	20 e1       	ldi	r18, 0x10	; 16
    4e4a:	30 e0       	ldi	r19, 0x00	; 0
    4e4c:	02 c0       	rjmp	.+4      	; 0x4e52 <vfprintf+0x56c>
    4e4e:	20 e1       	ldi	r18, 0x10	; 16
    4e50:	32 e0       	ldi	r19, 0x02	; 2
    4e52:	56 01       	movw	r10, r12
    4e54:	07 ff       	sbrs	r16, 7
    4e56:	09 c0       	rjmp	.+18     	; 0x4e6a <vfprintf+0x584>
    4e58:	84 e0       	ldi	r24, 0x04	; 4
    4e5a:	a8 0e       	add	r10, r24
    4e5c:	b1 1c       	adc	r11, r1
    4e5e:	f6 01       	movw	r30, r12
    4e60:	60 81       	ld	r22, Z
    4e62:	71 81       	ldd	r23, Z+1	; 0x01
    4e64:	82 81       	ldd	r24, Z+2	; 0x02
    4e66:	93 81       	ldd	r25, Z+3	; 0x03
    4e68:	08 c0       	rjmp	.+16     	; 0x4e7a <vfprintf+0x594>
    4e6a:	f2 e0       	ldi	r31, 0x02	; 2
    4e6c:	af 0e       	add	r10, r31
    4e6e:	b1 1c       	adc	r11, r1
    4e70:	f6 01       	movw	r30, r12
    4e72:	60 81       	ld	r22, Z
    4e74:	71 81       	ldd	r23, Z+1	; 0x01
    4e76:	80 e0       	ldi	r24, 0x00	; 0
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	a3 01       	movw	r20, r6
    4e7c:	0e 94 13 ea 	call	0x1d426	; 0x1d426 <__ultoa_invert>
    4e80:	c8 2e       	mov	r12, r24
    4e82:	c6 18       	sub	r12, r6
    4e84:	0f 77       	andi	r16, 0x7F	; 127
    4e86:	90 2e       	mov	r9, r16
    4e88:	96 fe       	sbrs	r9, 6
    4e8a:	0b c0       	rjmp	.+22     	; 0x4ea2 <vfprintf+0x5bc>
    4e8c:	09 2d       	mov	r16, r9
    4e8e:	0e 7f       	andi	r16, 0xFE	; 254
    4e90:	c1 16       	cp	r12, r17
    4e92:	50 f4       	brcc	.+20     	; 0x4ea8 <vfprintf+0x5c2>
    4e94:	94 fe       	sbrs	r9, 4
    4e96:	0a c0       	rjmp	.+20     	; 0x4eac <vfprintf+0x5c6>
    4e98:	92 fc       	sbrc	r9, 2
    4e9a:	08 c0       	rjmp	.+16     	; 0x4eac <vfprintf+0x5c6>
    4e9c:	09 2d       	mov	r16, r9
    4e9e:	0e 7e       	andi	r16, 0xEE	; 238
    4ea0:	05 c0       	rjmp	.+10     	; 0x4eac <vfprintf+0x5c6>
    4ea2:	dc 2c       	mov	r13, r12
    4ea4:	09 2d       	mov	r16, r9
    4ea6:	03 c0       	rjmp	.+6      	; 0x4eae <vfprintf+0x5c8>
    4ea8:	dc 2c       	mov	r13, r12
    4eaa:	01 c0       	rjmp	.+2      	; 0x4eae <vfprintf+0x5c8>
    4eac:	d1 2e       	mov	r13, r17
    4eae:	04 ff       	sbrs	r16, 4
    4eb0:	0d c0       	rjmp	.+26     	; 0x4ecc <vfprintf+0x5e6>
    4eb2:	fe 01       	movw	r30, r28
    4eb4:	ec 0d       	add	r30, r12
    4eb6:	f1 1d       	adc	r31, r1
    4eb8:	80 81       	ld	r24, Z
    4eba:	80 33       	cpi	r24, 0x30	; 48
    4ebc:	11 f4       	brne	.+4      	; 0x4ec2 <vfprintf+0x5dc>
    4ebe:	09 7e       	andi	r16, 0xE9	; 233
    4ec0:	09 c0       	rjmp	.+18     	; 0x4ed4 <vfprintf+0x5ee>
    4ec2:	02 ff       	sbrs	r16, 2
    4ec4:	06 c0       	rjmp	.+12     	; 0x4ed2 <vfprintf+0x5ec>
    4ec6:	d3 94       	inc	r13
    4ec8:	d3 94       	inc	r13
    4eca:	04 c0       	rjmp	.+8      	; 0x4ed4 <vfprintf+0x5ee>
    4ecc:	80 2f       	mov	r24, r16
    4ece:	86 78       	andi	r24, 0x86	; 134
    4ed0:	09 f0       	breq	.+2      	; 0x4ed4 <vfprintf+0x5ee>
    4ed2:	d3 94       	inc	r13
    4ed4:	03 fd       	sbrc	r16, 3
    4ed6:	11 c0       	rjmp	.+34     	; 0x4efa <vfprintf+0x614>
    4ed8:	00 ff       	sbrs	r16, 0
    4eda:	06 c0       	rjmp	.+12     	; 0x4ee8 <vfprintf+0x602>
    4edc:	1c 2d       	mov	r17, r12
    4ede:	d5 14       	cp	r13, r5
    4ee0:	80 f4       	brcc	.+32     	; 0x4f02 <vfprintf+0x61c>
    4ee2:	15 0d       	add	r17, r5
    4ee4:	1d 19       	sub	r17, r13
    4ee6:	0d c0       	rjmp	.+26     	; 0x4f02 <vfprintf+0x61c>
    4ee8:	d5 14       	cp	r13, r5
    4eea:	58 f4       	brcc	.+22     	; 0x4f02 <vfprintf+0x61c>
    4eec:	b7 01       	movw	r22, r14
    4eee:	80 e2       	ldi	r24, 0x20	; 32
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4ef6:	d3 94       	inc	r13
    4ef8:	f7 cf       	rjmp	.-18     	; 0x4ee8 <vfprintf+0x602>
    4efa:	d5 14       	cp	r13, r5
    4efc:	10 f4       	brcc	.+4      	; 0x4f02 <vfprintf+0x61c>
    4efe:	5d 18       	sub	r5, r13
    4f00:	01 c0       	rjmp	.+2      	; 0x4f04 <vfprintf+0x61e>
    4f02:	51 2c       	mov	r5, r1
    4f04:	04 ff       	sbrs	r16, 4
    4f06:	10 c0       	rjmp	.+32     	; 0x4f28 <vfprintf+0x642>
    4f08:	b7 01       	movw	r22, r14
    4f0a:	80 e3       	ldi	r24, 0x30	; 48
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4f12:	02 ff       	sbrs	r16, 2
    4f14:	17 c0       	rjmp	.+46     	; 0x4f44 <vfprintf+0x65e>
    4f16:	01 fd       	sbrc	r16, 1
    4f18:	03 c0       	rjmp	.+6      	; 0x4f20 <vfprintf+0x63a>
    4f1a:	88 e7       	ldi	r24, 0x78	; 120
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	02 c0       	rjmp	.+4      	; 0x4f24 <vfprintf+0x63e>
    4f20:	88 e5       	ldi	r24, 0x58	; 88
    4f22:	90 e0       	ldi	r25, 0x00	; 0
    4f24:	b7 01       	movw	r22, r14
    4f26:	0c c0       	rjmp	.+24     	; 0x4f40 <vfprintf+0x65a>
    4f28:	80 2f       	mov	r24, r16
    4f2a:	86 78       	andi	r24, 0x86	; 134
    4f2c:	59 f0       	breq	.+22     	; 0x4f44 <vfprintf+0x65e>
    4f2e:	01 ff       	sbrs	r16, 1
    4f30:	02 c0       	rjmp	.+4      	; 0x4f36 <vfprintf+0x650>
    4f32:	8b e2       	ldi	r24, 0x2B	; 43
    4f34:	01 c0       	rjmp	.+2      	; 0x4f38 <vfprintf+0x652>
    4f36:	80 e2       	ldi	r24, 0x20	; 32
    4f38:	07 fd       	sbrc	r16, 7
    4f3a:	8d e2       	ldi	r24, 0x2D	; 45
    4f3c:	b7 01       	movw	r22, r14
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4f44:	c1 16       	cp	r12, r17
    4f46:	38 f4       	brcc	.+14     	; 0x4f56 <vfprintf+0x670>
    4f48:	b7 01       	movw	r22, r14
    4f4a:	80 e3       	ldi	r24, 0x30	; 48
    4f4c:	90 e0       	ldi	r25, 0x00	; 0
    4f4e:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4f52:	11 50       	subi	r17, 0x01	; 1
    4f54:	f7 cf       	rjmp	.-18     	; 0x4f44 <vfprintf+0x65e>
    4f56:	ca 94       	dec	r12
    4f58:	f3 01       	movw	r30, r6
    4f5a:	ec 0d       	add	r30, r12
    4f5c:	f1 1d       	adc	r31, r1
    4f5e:	80 81       	ld	r24, Z
    4f60:	b7 01       	movw	r22, r14
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4f68:	c1 10       	cpse	r12, r1
    4f6a:	f5 cf       	rjmp	.-22     	; 0x4f56 <vfprintf+0x670>
    4f6c:	15 c0       	rjmp	.+42     	; 0x4f98 <vfprintf+0x6b2>
    4f6e:	f4 e0       	ldi	r31, 0x04	; 4
    4f70:	f5 15       	cp	r31, r5
    4f72:	60 f5       	brcc	.+88     	; 0x4fcc <vfprintf+0x6e6>
    4f74:	84 e0       	ldi	r24, 0x04	; 4
    4f76:	58 1a       	sub	r5, r24
    4f78:	93 fe       	sbrs	r9, 3
    4f7a:	1f c0       	rjmp	.+62     	; 0x4fba <vfprintf+0x6d4>
    4f7c:	01 11       	cpse	r16, r1
    4f7e:	27 c0       	rjmp	.+78     	; 0x4fce <vfprintf+0x6e8>
    4f80:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f82:	23 ff       	sbrs	r18, 3
    4f84:	2a c0       	rjmp	.+84     	; 0x4fda <vfprintf+0x6f4>
    4f86:	06 ed       	ldi	r16, 0xD6	; 214
    4f88:	11 e0       	ldi	r17, 0x01	; 1
    4f8a:	39 2d       	mov	r19, r9
    4f8c:	30 71       	andi	r19, 0x10	; 16
    4f8e:	93 2e       	mov	r9, r19
    4f90:	f8 01       	movw	r30, r16
    4f92:	84 91       	lpm	r24, Z
    4f94:	81 11       	cpse	r24, r1
    4f96:	24 c0       	rjmp	.+72     	; 0x4fe0 <vfprintf+0x6fa>
    4f98:	55 20       	and	r5, r5
    4f9a:	09 f4       	brne	.+2      	; 0x4f9e <vfprintf+0x6b8>
    4f9c:	e4 cc       	rjmp	.-1592   	; 0x4966 <vfprintf+0x80>
    4f9e:	b7 01       	movw	r22, r14
    4fa0:	80 e2       	ldi	r24, 0x20	; 32
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4fa8:	5a 94       	dec	r5
    4faa:	f6 cf       	rjmp	.-20     	; 0x4f98 <vfprintf+0x6b2>
    4fac:	f7 01       	movw	r30, r14
    4fae:	86 81       	ldd	r24, Z+6	; 0x06
    4fb0:	97 81       	ldd	r25, Z+7	; 0x07
    4fb2:	26 c0       	rjmp	.+76     	; 0x5000 <vfprintf+0x71a>
    4fb4:	8f ef       	ldi	r24, 0xFF	; 255
    4fb6:	9f ef       	ldi	r25, 0xFF	; 255
    4fb8:	23 c0       	rjmp	.+70     	; 0x5000 <vfprintf+0x71a>
    4fba:	b7 01       	movw	r22, r14
    4fbc:	80 e2       	ldi	r24, 0x20	; 32
    4fbe:	90 e0       	ldi	r25, 0x00	; 0
    4fc0:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4fc4:	5a 94       	dec	r5
    4fc6:	51 10       	cpse	r5, r1
    4fc8:	f8 cf       	rjmp	.-16     	; 0x4fba <vfprintf+0x6d4>
    4fca:	d8 cf       	rjmp	.-80     	; 0x4f7c <vfprintf+0x696>
    4fcc:	51 2c       	mov	r5, r1
    4fce:	b7 01       	movw	r22, r14
    4fd0:	80 2f       	mov	r24, r16
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4fd8:	d3 cf       	rjmp	.-90     	; 0x4f80 <vfprintf+0x69a>
    4fda:	0a ed       	ldi	r16, 0xDA	; 218
    4fdc:	11 e0       	ldi	r17, 0x01	; 1
    4fde:	d5 cf       	rjmp	.-86     	; 0x4f8a <vfprintf+0x6a4>
    4fe0:	91 10       	cpse	r9, r1
    4fe2:	80 52       	subi	r24, 0x20	; 32
    4fe4:	b7 01       	movw	r22, r14
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	0e 94 60 76 	call	0xecc0	; 0xecc0 <fputc>
    4fec:	0f 5f       	subi	r16, 0xFF	; 255
    4fee:	1f 4f       	sbci	r17, 0xFF	; 255
    4ff0:	cf cf       	rjmp	.-98     	; 0x4f90 <vfprintf+0x6aa>
    4ff2:	23 e0       	ldi	r18, 0x03	; 3
    4ff4:	25 15       	cp	r18, r5
    4ff6:	10 f4       	brcc	.+4      	; 0x4ffc <vfprintf+0x716>
    4ff8:	83 e0       	ldi	r24, 0x03	; 3
    4ffa:	bd cf       	rjmp	.-134    	; 0x4f76 <vfprintf+0x690>
    4ffc:	51 2c       	mov	r5, r1
    4ffe:	c0 cf       	rjmp	.-128    	; 0x4f80 <vfprintf+0x69a>
    5000:	60 96       	adiw	r28, 0x10	; 16
    5002:	0f b6       	in	r0, 0x3f	; 63
    5004:	f8 94       	cli
    5006:	de bf       	out	0x3e, r29	; 62
    5008:	0f be       	out	0x3f, r0	; 63
    500a:	cd bf       	out	0x3d, r28	; 61
    500c:	df 91       	pop	r29
    500e:	cf 91       	pop	r28
    5010:	1f 91       	pop	r17
    5012:	0f 91       	pop	r16
    5014:	ff 90       	pop	r15
    5016:	ef 90       	pop	r14
    5018:	df 90       	pop	r13
    501a:	cf 90       	pop	r12
    501c:	bf 90       	pop	r11
    501e:	af 90       	pop	r10
    5020:	9f 90       	pop	r9
    5022:	8f 90       	pop	r8
    5024:	7f 90       	pop	r7
    5026:	6f 90       	pop	r6
    5028:	5f 90       	pop	r5
    502a:	4f 90       	pop	r4
    502c:	3f 90       	pop	r3
    502e:	2f 90       	pop	r2
    5030:	08 95       	ret

00005032 <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    5032:	e8 2f       	mov	r30, r24
    5034:	e6 95       	lsr	r30
    5036:	e6 95       	lsr	r30
    5038:	e6 95       	lsr	r30
    503a:	93 e0       	ldi	r25, 0x03	; 3
    503c:	e9 9f       	mul	r30, r25
    503e:	f0 01       	movw	r30, r0
    5040:	11 24       	eor	r1, r1
    5042:	32 a1       	ldd	r19, Z+34	; 0x22
    5044:	28 2f       	mov	r18, r24
    5046:	27 70       	andi	r18, 0x07	; 7
    5048:	81 e0       	ldi	r24, 0x01	; 1
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	01 c0       	rjmp	.+2      	; 0x5050 <chip_select+0x1e>
    504e:	88 0f       	add	r24, r24
    5050:	2a 95       	dec	r18
    5052:	ea f7       	brpl	.-6      	; 0x504e <chip_select+0x1c>
    5054:	98 2f       	mov	r25, r24
    5056:	90 95       	com	r25
    5058:	93 23       	and	r25, r19
    505a:	92 a3       	std	Z+34, r25	; 0x22
    505c:	91 a1       	ldd	r25, Z+33	; 0x21
    505e:	89 2b       	or	r24, r25
    5060:	81 a3       	std	Z+33, r24	; 0x21
    5062:	08 95       	ret

00005064 <chip_deselect>:
    5064:	e8 2f       	mov	r30, r24
    5066:	e6 95       	lsr	r30
    5068:	e6 95       	lsr	r30
    506a:	e6 95       	lsr	r30
    506c:	93 e0       	ldi	r25, 0x03	; 3
    506e:	e9 9f       	mul	r30, r25
    5070:	f0 01       	movw	r30, r0
    5072:	11 24       	eor	r1, r1
    5074:	32 a1       	ldd	r19, Z+34	; 0x22
    5076:	28 2f       	mov	r18, r24
    5078:	27 70       	andi	r18, 0x07	; 7
    507a:	81 e0       	ldi	r24, 0x01	; 1
    507c:	90 e0       	ldi	r25, 0x00	; 0
    507e:	01 c0       	rjmp	.+2      	; 0x5082 <chip_deselect+0x1e>
    5080:	88 0f       	add	r24, r24
    5082:	2a 95       	dec	r18
    5084:	ea f7       	brpl	.-6      	; 0x5080 <chip_deselect+0x1c>
    5086:	93 2f       	mov	r25, r19
    5088:	98 2b       	or	r25, r24
    508a:	92 a3       	std	Z+34, r25	; 0x22
    508c:	91 a1       	ldd	r25, Z+33	; 0x21
    508e:	89 2b       	or	r24, r25
    5090:	81 a3       	std	Z+33, r24	; 0x21
    5092:	08 95       	ret

00005094 <chip_select_init>:
    5094:	e7 cf       	rjmp	.-50     	; 0x5064 <chip_deselect>
    5096:	08 95       	ret

00005098 <spi_end>:
    5098:	cf 93       	push	r28
    509a:	c8 2f       	mov	r28, r24
    509c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    50a0:	8c 17       	cp	r24, r28
    50a2:	a9 f0       	breq	.+42     	; 0x50ce <spi_end+0x36>
    50a4:	8f 3f       	cpi	r24, 0xFF	; 255
    50a6:	99 f0       	breq	.+38     	; 0x50ce <spi_end+0x36>
    50a8:	1f 92       	push	r1
    50aa:	cf 93       	push	r28
    50ac:	1f 92       	push	r1
    50ae:	8f 93       	push	r24
    50b0:	88 ed       	ldi	r24, 0xD8	; 216
    50b2:	92 e0       	ldi	r25, 0x02	; 2
    50b4:	1f 92       	push	r1
    50b6:	9f 93       	push	r25
    50b8:	8f 93       	push	r24
    50ba:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    50be:	8d b7       	in	r24, 0x3d	; 61
    50c0:	9e b7       	in	r25, 0x3e	; 62
    50c2:	07 96       	adiw	r24, 0x07	; 7
    50c4:	0f b6       	in	r0, 0x3f	; 63
    50c6:	f8 94       	cli
    50c8:	9e bf       	out	0x3e, r25	; 62
    50ca:	0f be       	out	0x3f, r0	; 63
    50cc:	8d bf       	out	0x3d, r24	; 61
    50ce:	8c 2f       	mov	r24, r28
    50d0:	c9 df       	rcall	.-110    	; 0x5064 <chip_deselect>
    50d2:	8f ef       	ldi	r24, 0xFF	; 255
    50d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    50d8:	cf 91       	pop	r28
    50da:	08 95       	ret

000050dc <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    50dc:	89 c4       	rjmp	.+2322   	; 0x59f0 <SPI0_TX>
    50de:	08 95       	ret

000050e0 <spi_RX_buffer>:
    50e0:	b1 c4       	rjmp	.+2402   	; 0x5a44 <SPI0_RX>
    50e2:	08 95       	ret

000050e4 <spi_TX>:
    50e4:	a1 e0       	ldi	r26, 0x01	; 1
    50e6:	b0 e0       	ldi	r27, 0x00	; 0
    50e8:	e8 e7       	ldi	r30, 0x78	; 120
    50ea:	f8 e2       	ldi	r31, 0x28	; 40
    50ec:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    50f0:	89 83       	std	Y+1, r24	; 0x01
    50f2:	61 e0       	ldi	r22, 0x01	; 1
    50f4:	70 e0       	ldi	r23, 0x00	; 0
    50f6:	ce 01       	movw	r24, r28
    50f8:	01 96       	adiw	r24, 0x01	; 1
    50fa:	7a d4       	rcall	.+2292   	; 0x59f0 <SPI0_TX>
    50fc:	21 96       	adiw	r28, 0x01	; 1
    50fe:	e2 e0       	ldi	r30, 0x02	; 2
    5100:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

00005104 <spi_init>:
    5104:	cf 92       	push	r12
    5106:	df 92       	push	r13
    5108:	ef 92       	push	r14
    510a:	ff 92       	push	r15
    510c:	6b 01       	movw	r12, r22
    510e:	7c 01       	movw	r14, r24
    5110:	84 2f       	mov	r24, r20
    5112:	a8 df       	rcall	.-176    	; 0x5064 <chip_deselect>
    5114:	8f ef       	ldi	r24, 0xFF	; 255
    5116:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    511a:	c7 01       	movw	r24, r14
    511c:	b6 01       	movw	r22, r12
    511e:	34 d4       	rcall	.+2152   	; 0x5988 <SPI0_Init>
    5120:	80 e0       	ldi	r24, 0x00	; 0
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	f5 d3       	rcall	.+2026   	; 0x5910 <SPI0_Mode>
    5126:	8f ef       	ldi	r24, 0xFF	; 255
    5128:	dd df       	rcall	.-70     	; 0x50e4 <spi_TX>
    512a:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    512e:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    5132:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    5136:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    513a:	ff 90       	pop	r15
    513c:	ef 90       	pop	r14
    513e:	df 90       	pop	r13
    5140:	cf 90       	pop	r12
    5142:	08 95       	ret

00005144 <spi_begin>:
    5144:	cf 92       	push	r12
    5146:	df 92       	push	r13
    5148:	ef 92       	push	r14
    514a:	ff 92       	push	r15
    514c:	cf 93       	push	r28
    514e:	df 93       	push	r29
    5150:	6b 01       	movw	r12, r22
    5152:	7c 01       	movw	r14, r24
    5154:	ea 01       	movw	r28, r20
    5156:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    515a:	8f 3f       	cpi	r24, 0xFF	; 255
    515c:	99 f0       	breq	.+38     	; 0x5184 <spi_begin+0x40>
    515e:	df 93       	push	r29
    5160:	4f 93       	push	r20
    5162:	1f 92       	push	r1
    5164:	8f 93       	push	r24
    5166:	86 ef       	ldi	r24, 0xF6	; 246
    5168:	92 e0       	ldi	r25, 0x02	; 2
    516a:	1f 92       	push	r1
    516c:	9f 93       	push	r25
    516e:	8f 93       	push	r24
    5170:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    5174:	8d b7       	in	r24, 0x3d	; 61
    5176:	9e b7       	in	r25, 0x3e	; 62
    5178:	07 96       	adiw	r24, 0x07	; 7
    517a:	0f b6       	in	r0, 0x3f	; 63
    517c:	f8 94       	cli
    517e:	9e bf       	out	0x3e, r25	; 62
    5180:	0f be       	out	0x3f, r0	; 63
    5182:	8d bf       	out	0x3d, r24	; 61
    5184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5188:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    518c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    5190:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    5194:	8c 15       	cp	r24, r12
    5196:	9d 05       	cpc	r25, r13
    5198:	ae 05       	cpc	r26, r14
    519a:	bf 05       	cpc	r27, r15
    519c:	21 f0       	breq	.+8      	; 0x51a6 <spi_begin+0x62>
    519e:	ae 01       	movw	r20, r28
    51a0:	c7 01       	movw	r24, r14
    51a2:	b6 01       	movw	r22, r12
    51a4:	af df       	rcall	.-162    	; 0x5104 <spi_init>
    51a6:	8c 2f       	mov	r24, r28
    51a8:	44 df       	rcall	.-376    	; 0x5032 <chip_select>
    51aa:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <_cs_pin>
    51ae:	df 91       	pop	r29
    51b0:	cf 91       	pop	r28
    51b2:	ff 90       	pop	r15
    51b4:	ef 90       	pop	r14
    51b6:	df 90       	pop	r13
    51b8:	cf 90       	pop	r12
    51ba:	08 95       	ret

000051bc <spi_TXRX>:
    51bc:	a1 e0       	ldi	r26, 0x01	; 1
    51be:	b0 e0       	ldi	r27, 0x00	; 0
    51c0:	e4 ee       	ldi	r30, 0xE4	; 228
    51c2:	f8 e2       	ldi	r31, 0x28	; 40
    51c4:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    51c8:	89 83       	std	Y+1, r24	; 0x01
    51ca:	61 e0       	ldi	r22, 0x01	; 1
    51cc:	70 e0       	ldi	r23, 0x00	; 0
    51ce:	ce 01       	movw	r24, r28
    51d0:	01 96       	adiw	r24, 0x01	; 1
    51d2:	22 d4       	rcall	.+2116   	; 0x5a18 <SPI0_TXRX>
    51d4:	89 81       	ldd	r24, Y+1	; 0x01
    51d6:	21 96       	adiw	r28, 0x01	; 1
    51d8:	e2 e0       	ldi	r30, 0x02	; 2
    51da:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

000051de <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    51de:	a2 e0       	ldi	r26, 0x02	; 2
    51e0:	b0 e0       	ldi	r27, 0x00	; 0
    51e2:	e5 ef       	ldi	r30, 0xF5	; 245
    51e4:	f8 e2       	ldi	r31, 0x28	; 40
    51e6:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    51ea:	20 91 a4 20 	lds	r18, 0x20A4	; 0x8020a4 <__brkval>
    51ee:	30 91 a5 20 	lds	r19, 0x20A5	; 0x8020a5 <__brkval+0x1>
    51f2:	21 15       	cp	r18, r1
    51f4:	31 05       	cpc	r19, r1
    51f6:	11 f4       	brne	.+4      	; 0x51fc <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    51f8:	28 ea       	ldi	r18, 0xA8	; 168
    51fa:	30 e2       	ldi	r19, 0x20	; 32

    ret = (uint16_t) &v - top;
    return ( ret );
}
    51fc:	ce 01       	movw	r24, r28
    51fe:	01 96       	adiw	r24, 0x01	; 1
    5200:	82 1b       	sub	r24, r18
    5202:	93 0b       	sbc	r25, r19
    5204:	22 96       	adiw	r28, 0x02	; 2
    5206:	e2 e0       	ldi	r30, 0x02	; 2
    5208:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

0000520c <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    520c:	a2 e0       	ldi	r26, 0x02	; 2
    520e:	b0 e0       	ldi	r27, 0x00	; 0
    5210:	ec e0       	ldi	r30, 0x0C	; 12
    5212:	f9 e2       	ldi	r31, 0x29	; 41
    5214:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    5218:	e2 df       	rcall	.-60     	; 0x51de <freeRam>
    521a:	89 83       	std	Y+1, r24	; 0x01

    printf("Free Ram:%u\n", ram);
    521c:	9a 83       	std	Y+2, r25	; 0x02
    521e:	9f 93       	push	r25
    5220:	8f 93       	push	r24
    5222:	8d e1       	ldi	r24, 0x1D	; 29
    5224:	94 e0       	ldi	r25, 0x04	; 4
    5226:	1f 92       	push	r1
    5228:	9f 93       	push	r25
    522a:	8f 93       	push	r24
    522c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    5230:	8f ef       	ldi	r24, 0xFF	; 255
    5232:	90 e4       	ldi	r25, 0x40	; 64
    5234:	9f 93       	push	r25
    5236:	8f 93       	push	r24
    5238:	8a e0       	ldi	r24, 0x0A	; 10
    523a:	94 e0       	ldi	r25, 0x04	; 4
    523c:	1f 92       	push	r1
    523e:	9f 93       	push	r25
    5240:	8f 93       	push	r24
    5242:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    5246:	ce 01       	movw	r24, r28
    5248:	01 96       	adiw	r24, 0x01	; 1
    524a:	9f 93       	push	r25
    524c:	8f 93       	push	r24
    524e:	87 ef       	ldi	r24, 0xF7	; 247
    5250:	93 e0       	ldi	r25, 0x03	; 3
    5252:	1f 92       	push	r1
    5254:	9f 93       	push	r25
    5256:	8f 93       	push	r24
    5258:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    525c:	88 ea       	ldi	r24, 0xA8	; 168
    525e:	90 e2       	ldi	r25, 0x20	; 32
    5260:	9f 93       	push	r25
    5262:	8f 93       	push	r24
    5264:	86 e4       	ldi	r24, 0x46	; 70
    5266:	97 e1       	ldi	r25, 0x17	; 23
    5268:	9f 93       	push	r25
    526a:	8f 93       	push	r24
    526c:	89 ed       	ldi	r24, 0xD9	; 217
    526e:	93 e0       	ldi	r25, 0x03	; 3
    5270:	1f 92       	push	r1
    5272:	9f 93       	push	r25
    5274:	8f 93       	push	r24
    5276:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    527a:	86 e4       	ldi	r24, 0x46	; 70
    527c:	97 e1       	ldi	r25, 0x17	; 23
    527e:	9f 93       	push	r25
    5280:	8f 93       	push	r24
    5282:	80 e0       	ldi	r24, 0x00	; 0
    5284:	91 e0       	ldi	r25, 0x01	; 1
    5286:	9f 93       	push	r25
    5288:	8f 93       	push	r24
    528a:	8b eb       	ldi	r24, 0xBB	; 187
    528c:	93 e0       	ldi	r25, 0x03	; 3
    528e:	1f 92       	push	r1
    5290:	9f 93       	push	r25
    5292:	8f 93       	push	r24
    5294:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    5298:	80 e0       	ldi	r24, 0x00	; 0
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	9f 93       	push	r25
    529e:	8f 93       	push	r24
    52a0:	88 ea       	ldi	r24, 0xA8	; 168
    52a2:	90 e2       	ldi	r25, 0x20	; 32
    52a4:	9f 93       	push	r25
    52a6:	8f 93       	push	r24
    52a8:	8d e9       	ldi	r24, 0x9D	; 157
    52aa:	93 e0       	ldi	r25, 0x03	; 3
    52ac:	1f 92       	push	r1
    52ae:	9f 93       	push	r25
    52b0:	8f 93       	push	r24
    52b2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    52b6:	0f b6       	in	r0, 0x3f	; 63
    52b8:	f8 94       	cli
    52ba:	de bf       	out	0x3e, r29	; 62
    52bc:	0f be       	out	0x3f, r0	; 63
    52be:	cd bf       	out	0x3d, r28	; 61
    52c0:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__malloc_heap_end+0x1>
    52c4:	8f 93       	push	r24
    52c6:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <__malloc_heap_end>
    52ca:	8f 93       	push	r24
    52cc:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__malloc_heap_start+0x1>
    52d0:	8f 93       	push	r24
    52d2:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <__malloc_heap_start>
    52d6:	8f 93       	push	r24
    52d8:	8f e7       	ldi	r24, 0x7F	; 127
    52da:	93 e0       	ldi	r25, 0x03	; 3
    52dc:	1f 92       	push	r1
    52de:	9f 93       	push	r25
    52e0:	8f 93       	push	r24
    52e2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    52e6:	80 91 a5 20 	lds	r24, 0x20A5	; 0x8020a5 <__brkval+0x1>
    52ea:	8f 93       	push	r24
    52ec:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <__brkval>
    52f0:	8f 93       	push	r24
    52f2:	8b e6       	ldi	r24, 0x6B	; 107
    52f4:	93 e0       	ldi	r25, 0x03	; 3
    52f6:	1f 92       	push	r1
    52f8:	9f 93       	push	r25
    52fa:	8f 93       	push	r24
    52fc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>

}
    5300:	0f b6       	in	r0, 0x3f	; 63
    5302:	f8 94       	cli
    5304:	de bf       	out	0x3e, r29	; 62
    5306:	0f be       	out	0x3f, r0	; 63
    5308:	cd bf       	out	0x3d, r28	; 61
    530a:	22 96       	adiw	r28, 0x02	; 2
    530c:	e2 e0       	ldi	r30, 0x02	; 2
    530e:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

00005312 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    5312:	ef 92       	push	r14
    5314:	ff 92       	push	r15
    5316:	0f 93       	push	r16
    5318:	1f 93       	push	r17
    531a:	cf 93       	push	r28
    531c:	df 93       	push	r29
    531e:	18 2f       	mov	r17, r24
    5320:	09 2f       	mov	r16, r25
    5322:	f6 2e       	mov	r15, r22
    5324:	e7 2e       	mov	r14, r23
	void *p = calloc(size, elements);
    5326:	0e 94 e3 e7 	call	0x1cfc6	; 0x1cfc6 <calloc>
    532a:	ec 01       	movw	r28, r24
	if(!p)
    532c:	89 2b       	or	r24, r25
    532e:	99 f4       	brne	.+38     	; 0x5356 <safecalloc+0x44>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    5330:	ef 92       	push	r14
    5332:	ff 92       	push	r15
    5334:	0f 93       	push	r16
    5336:	1f 93       	push	r17
    5338:	80 e5       	ldi	r24, 0x50	; 80
    533a:	93 e0       	ldi	r25, 0x03	; 3
    533c:	1f 92       	push	r1
    533e:	9f 93       	push	r25
    5340:	8f 93       	push	r24
    5342:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    5346:	8d b7       	in	r24, 0x3d	; 61
    5348:	9e b7       	in	r25, 0x3e	; 62
    534a:	07 96       	adiw	r24, 0x07	; 7
    534c:	0f b6       	in	r0, 0x3f	; 63
    534e:	f8 94       	cli
    5350:	9e bf       	out	0x3e, r25	; 62
    5352:	0f be       	out	0x3f, r0	; 63
    5354:	8d bf       	out	0x3d, r24	; 61
	}
	return(p);
}
    5356:	ce 01       	movw	r24, r28
    5358:	cd b7       	in	r28, 0x3d	; 61
    535a:	de b7       	in	r29, 0x3e	; 62
    535c:	e6 e0       	ldi	r30, 0x06	; 6
    535e:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

00005362 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    5362:	0f 93       	push	r16
    5364:	1f 93       	push	r17
    5366:	cf 93       	push	r28
    5368:	df 93       	push	r29
    536a:	18 2f       	mov	r17, r24
    536c:	09 2f       	mov	r16, r25
    void *p = calloc(size, 1);
    536e:	61 e0       	ldi	r22, 0x01	; 1
    5370:	70 e0       	ldi	r23, 0x00	; 0
    5372:	0e 94 e3 e7 	call	0x1cfc6	; 0x1cfc6 <calloc>
    5376:	ec 01       	movw	r28, r24
    if(!p)
    5378:	89 2b       	or	r24, r25
    537a:	71 f4       	brne	.+28     	; 0x5398 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    537c:	0f 93       	push	r16
    537e:	1f 93       	push	r17
    5380:	88 e3       	ldi	r24, 0x38	; 56
    5382:	93 e0       	ldi	r25, 0x03	; 3
    5384:	1f 92       	push	r1
    5386:	9f 93       	push	r25
    5388:	8f 93       	push	r24
    538a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    538e:	0f 90       	pop	r0
    5390:	0f 90       	pop	r0
    5392:	0f 90       	pop	r0
    5394:	0f 90       	pop	r0
    5396:	0f 90       	pop	r0
    }
    return(p);
}
    5398:	ce 01       	movw	r24, r28
    539a:	df 91       	pop	r29
    539c:	cf 91       	pop	r28
    539e:	1f 91       	pop	r17
    53a0:	0f 91       	pop	r16
    53a2:	08 95       	ret

000053a4 <safefree>:
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    53a4:	00 97       	sbiw	r24, 0x00	; 0
    53a6:	39 f1       	breq	.+78     	; 0x53f6 <safefree+0x52>
        return;

    if(__brkval)
    53a8:	20 91 a4 20 	lds	r18, 0x20A4	; 0x8020a4 <__brkval>
    53ac:	30 91 a5 20 	lds	r19, 0x20A5	; 0x8020a5 <__brkval+0x1>
    53b0:	21 15       	cp	r18, r1
    53b2:	31 05       	cpc	r19, r1
    53b4:	11 f4       	brne	.+4      	; 0x53ba <safefree+0x16>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    53b6:	28 ea       	ldi	r18, 0xA8	; 168
    53b8:	30 e2       	ldi	r19, 0x20	; 32

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    53ba:	40 e2       	ldi	r20, 0x20	; 32
    53bc:	88 3a       	cpi	r24, 0xA8	; 168
    53be:	94 07       	cpc	r25, r20
    53c0:	30 f0       	brcs	.+12     	; 0x53ce <safefree+0x2a>
    53c2:	28 17       	cp	r18, r24
    53c4:	39 07       	cpc	r19, r25
    53c6:	18 f0       	brcs	.+6      	; 0x53ce <safefree+0x2a>
        ((uint16_t) p <= top) )
    {
        free(p);
    53c8:	0c 94 95 e8 	jmp	0x1d12a	; 0x1d12a <free>
        return;
    53cc:	08 95       	ret
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    53ce:	3f 93       	push	r19
    53d0:	2f 93       	push	r18
    53d2:	9f 93       	push	r25
    53d4:	8f 93       	push	r24
    53d6:	83 e1       	ldi	r24, 0x13	; 19
    53d8:	93 e0       	ldi	r25, 0x03	; 3
    53da:	1f 92       	push	r1
    53dc:	9f 93       	push	r25
    53de:	8f 93       	push	r24
    53e0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    PrintFree();
    53e4:	13 df       	rcall	.-474    	; 0x520c <PrintFree>
    53e6:	8d b7       	in	r24, 0x3d	; 61
    53e8:	9e b7       	in	r25, 0x3e	; 62
    53ea:	07 96       	adiw	r24, 0x07	; 7
    53ec:	0f b6       	in	r0, 0x3f	; 63
    53ee:	f8 94       	cli
    53f0:	9e bf       	out	0x3e, r25	; 62
    53f2:	0f be       	out	0x3f, r0	; 63
    53f4:	8d bf       	out	0x3d, r24	; 61
    53f6:	08 95       	ret

000053f8 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    53f8:	64 36       	cpi	r22, 0x64	; 100
    53fa:	71 05       	cpc	r23, r1
    53fc:	81 05       	cpc	r24, r1
    53fe:	91 05       	cpc	r25, r1
    5400:	58 f0       	brcs	.+22     	; 0x5418 <delayus+0x20>
    {
        us -= 100U;
    5402:	64 56       	subi	r22, 0x64	; 100
    5404:	71 09       	sbc	r23, r1
    5406:	81 09       	sbc	r24, r1
    5408:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    540a:	e3 ef       	ldi	r30, 0xF3	; 243
    540c:	f1 e0       	ldi	r31, 0x01	; 1
    540e:	31 97       	sbiw	r30, 0x01	; 1
    5410:	f1 f7       	brne	.-4      	; 0x540e <delayus+0x16>
    5412:	00 c0       	rjmp	.+0      	; 0x5414 <delayus+0x1c>
    5414:	00 00       	nop
    5416:	f0 cf       	rjmp	.-32     	; 0x53f8 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    5418:	6a 30       	cpi	r22, 0x0A	; 10
    541a:	71 05       	cpc	r23, r1
    541c:	81 05       	cpc	r24, r1
    541e:	91 05       	cpc	r25, r1
    5420:	48 f0       	brcs	.+18     	; 0x5434 <delayus+0x3c>
    {
        us -= 10U;
    5422:	6a 50       	subi	r22, 0x0A	; 10
    5424:	71 09       	sbc	r23, r1
    5426:	81 09       	sbc	r24, r1
    5428:	91 09       	sbc	r25, r1
    542a:	f2 e4       	ldi	r31, 0x42	; 66
    542c:	fa 95       	dec	r31
    542e:	f1 f7       	brne	.-4      	; 0x542c <delayus+0x34>
    5430:	00 c0       	rjmp	.+0      	; 0x5432 <delayus+0x3a>
    5432:	f2 cf       	rjmp	.-28     	; 0x5418 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    5434:	61 15       	cp	r22, r1
    5436:	71 05       	cpc	r23, r1
    5438:	81 05       	cpc	r24, r1
    543a:	91 05       	cpc	r25, r1
    543c:	49 f0       	breq	.+18     	; 0x5450 <delayus+0x58>
    {
        --us;
    543e:	61 50       	subi	r22, 0x01	; 1
    5440:	71 09       	sbc	r23, r1
    5442:	81 09       	sbc	r24, r1
    5444:	91 09       	sbc	r25, r1
    5446:	26 e0       	ldi	r18, 0x06	; 6
    5448:	2a 95       	dec	r18
    544a:	f1 f7       	brne	.-4      	; 0x5448 <delayus+0x50>
    544c:	00 c0       	rjmp	.+0      	; 0x544e <delayus+0x56>
    544e:	f2 cf       	rjmp	.-28     	; 0x5434 <delayus+0x3c>
        _delay_us(1);
    }
}
    5450:	08 95       	ret

00005452 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    5452:	61 15       	cp	r22, r1
    5454:	71 05       	cpc	r23, r1
    5456:	81 05       	cpc	r24, r1
    5458:	91 05       	cpc	r25, r1
    545a:	09 f4       	brne	.+2      	; 0x545e <delayms+0xc>
    545c:	41 c0       	rjmp	.+130    	; 0x54e0 <delayms+0x8e>
    545e:	e3 ef       	ldi	r30, 0xF3	; 243
    5460:	f1 e0       	ldi	r31, 0x01	; 1
    5462:	31 97       	sbiw	r30, 0x01	; 1
    5464:	f1 f7       	brne	.-4      	; 0x5462 <delayms+0x10>
    5466:	00 c0       	rjmp	.+0      	; 0x5468 <delayms+0x16>
    5468:	00 00       	nop
    546a:	e3 ef       	ldi	r30, 0xF3	; 243
    546c:	f1 e0       	ldi	r31, 0x01	; 1
    546e:	31 97       	sbiw	r30, 0x01	; 1
    5470:	f1 f7       	brne	.-4      	; 0x546e <delayms+0x1c>
    5472:	00 c0       	rjmp	.+0      	; 0x5474 <delayms+0x22>
    5474:	00 00       	nop
    5476:	e3 ef       	ldi	r30, 0xF3	; 243
    5478:	f1 e0       	ldi	r31, 0x01	; 1
    547a:	31 97       	sbiw	r30, 0x01	; 1
    547c:	f1 f7       	brne	.-4      	; 0x547a <delayms+0x28>
    547e:	00 c0       	rjmp	.+0      	; 0x5480 <delayms+0x2e>
    5480:	00 00       	nop
    5482:	e3 ef       	ldi	r30, 0xF3	; 243
    5484:	f1 e0       	ldi	r31, 0x01	; 1
    5486:	31 97       	sbiw	r30, 0x01	; 1
    5488:	f1 f7       	brne	.-4      	; 0x5486 <delayms+0x34>
    548a:	00 c0       	rjmp	.+0      	; 0x548c <delayms+0x3a>
    548c:	00 00       	nop
    548e:	e3 ef       	ldi	r30, 0xF3	; 243
    5490:	f1 e0       	ldi	r31, 0x01	; 1
    5492:	31 97       	sbiw	r30, 0x01	; 1
    5494:	f1 f7       	brne	.-4      	; 0x5492 <delayms+0x40>
    5496:	00 c0       	rjmp	.+0      	; 0x5498 <delayms+0x46>
    5498:	00 00       	nop
    549a:	e3 ef       	ldi	r30, 0xF3	; 243
    549c:	f1 e0       	ldi	r31, 0x01	; 1
    549e:	31 97       	sbiw	r30, 0x01	; 1
    54a0:	f1 f7       	brne	.-4      	; 0x549e <delayms+0x4c>
    54a2:	00 c0       	rjmp	.+0      	; 0x54a4 <delayms+0x52>
    54a4:	00 00       	nop
    54a6:	e3 ef       	ldi	r30, 0xF3	; 243
    54a8:	f1 e0       	ldi	r31, 0x01	; 1
    54aa:	31 97       	sbiw	r30, 0x01	; 1
    54ac:	f1 f7       	brne	.-4      	; 0x54aa <delayms+0x58>
    54ae:	00 c0       	rjmp	.+0      	; 0x54b0 <delayms+0x5e>
    54b0:	00 00       	nop
    54b2:	e3 ef       	ldi	r30, 0xF3	; 243
    54b4:	f1 e0       	ldi	r31, 0x01	; 1
    54b6:	31 97       	sbiw	r30, 0x01	; 1
    54b8:	f1 f7       	brne	.-4      	; 0x54b6 <delayms+0x64>
    54ba:	00 c0       	rjmp	.+0      	; 0x54bc <delayms+0x6a>
    54bc:	00 00       	nop
    54be:	e3 ef       	ldi	r30, 0xF3	; 243
    54c0:	f1 e0       	ldi	r31, 0x01	; 1
    54c2:	31 97       	sbiw	r30, 0x01	; 1
    54c4:	f1 f7       	brne	.-4      	; 0x54c2 <delayms+0x70>
    54c6:	00 c0       	rjmp	.+0      	; 0x54c8 <delayms+0x76>
    54c8:	00 00       	nop
    54ca:	e3 ef       	ldi	r30, 0xF3	; 243
    54cc:	f1 e0       	ldi	r31, 0x01	; 1
    54ce:	31 97       	sbiw	r30, 0x01	; 1
    54d0:	f1 f7       	brne	.-4      	; 0x54ce <delayms+0x7c>
    54d2:	00 c0       	rjmp	.+0      	; 0x54d4 <delayms+0x82>
    54d4:	00 00       	nop
    54d6:	61 50       	subi	r22, 0x01	; 1
    54d8:	71 09       	sbc	r23, r1
    54da:	81 09       	sbc	r24, r1
    54dc:	91 09       	sbc	r25, r1
    54de:	b9 cf       	rjmp	.-142    	; 0x5452 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    54e0:	08 95       	ret

000054e2 <uart_ubr>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    54e2:	4f 92       	push	r4
    54e4:	5f 92       	push	r5
    54e6:	6f 92       	push	r6
    54e8:	7f 92       	push	r7
    54ea:	8f 92       	push	r8
    54ec:	9f 92       	push	r9
    54ee:	af 92       	push	r10
    54f0:	bf 92       	push	r11
    54f2:	cf 92       	push	r12
    54f4:	df 92       	push	r13
    54f6:	ef 92       	push	r14
    54f8:	ff 92       	push	r15
    54fa:	cf 93       	push	r28
    54fc:	df 93       	push	r29
    54fe:	5a 01       	movw	r10, r20
    5500:	e9 01       	movw	r28, r18
    5502:	0e 94 81 e6 	call	0x1cd02	; 0x1cd02 <__floatunsisf>
    5506:	2b 01       	movw	r4, r22
    5508:	3c 01       	movw	r6, r24
    550a:	20 e0       	ldi	r18, 0x00	; 0
    550c:	30 e0       	ldi	r19, 0x00	; 0
    550e:	40 e0       	ldi	r20, 0x00	; 0
    5510:	51 e4       	ldi	r21, 0x41	; 65
    5512:	0e 94 37 e7 	call	0x1ce6e	; 0x1ce6e <__mulsf3>
    5516:	9b 01       	movw	r18, r22
    5518:	ac 01       	movw	r20, r24
    551a:	60 e8       	ldi	r22, 0x80	; 128
    551c:	76 e9       	ldi	r23, 0x96	; 150
    551e:	88 e9       	ldi	r24, 0x98	; 152
    5520:	9b e4       	ldi	r25, 0x4B	; 75
    5522:	0e 94 e8 e5 	call	0x1cbd0	; 0x1cbd0 <__divsf3>
    5526:	20 e0       	ldi	r18, 0x00	; 0
    5528:	30 e0       	ldi	r19, 0x00	; 0
    552a:	40 e8       	ldi	r20, 0x80	; 128
    552c:	5f e3       	ldi	r21, 0x3F	; 63
    552e:	0e 94 7f e5 	call	0x1cafe	; 0x1cafe <__subsf3>
    5532:	0e 94 9a e7 	call	0x1cf34	; 0x1cf34 <round>
    5536:	0e 94 55 e6 	call	0x1ccaa	; 0x1ccaa <__fixunssfsi>
    553a:	6b 01       	movw	r12, r22
    553c:	7c 01       	movw	r14, r24
    553e:	c1 14       	cp	r12, r1
    5540:	80 e1       	ldi	r24, 0x10	; 16
    5542:	d8 06       	cpc	r13, r24
    5544:	e1 04       	cpc	r14, r1
    5546:	f1 04       	cpc	r15, r1
    5548:	58 f4       	brcc	.+22     	; 0x5560 <uart_ubr+0x7e>
    554a:	81 e0       	ldi	r24, 0x01	; 1
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	f5 01       	movw	r30, r10
    5550:	91 83       	std	Z+1, r25	; 0x01
    5552:	80 83       	st	Z, r24
    5554:	81 2c       	mov	r8, r1
    5556:	91 2c       	mov	r9, r1
    5558:	a1 2c       	mov	r10, r1
    555a:	21 e4       	ldi	r18, 0x41	; 65
    555c:	b2 2e       	mov	r11, r18
    555e:	31 c0       	rjmp	.+98     	; 0x55c2 <uart_ubr+0xe0>
    5560:	f5 01       	movw	r30, r10
    5562:	11 82       	std	Z+1, r1	; 0x01
    5564:	10 82       	st	Z, r1
    5566:	20 e0       	ldi	r18, 0x00	; 0
    5568:	30 e0       	ldi	r19, 0x00	; 0
    556a:	40 e8       	ldi	r20, 0x80	; 128
    556c:	51 e4       	ldi	r21, 0x41	; 65
    556e:	c3 01       	movw	r24, r6
    5570:	b2 01       	movw	r22, r4
    5572:	0e 94 37 e7 	call	0x1ce6e	; 0x1ce6e <__mulsf3>
    5576:	9b 01       	movw	r18, r22
    5578:	ac 01       	movw	r20, r24
    557a:	60 e8       	ldi	r22, 0x80	; 128
    557c:	76 e9       	ldi	r23, 0x96	; 150
    557e:	88 e9       	ldi	r24, 0x98	; 152
    5580:	9b e4       	ldi	r25, 0x4B	; 75
    5582:	0e 94 e8 e5 	call	0x1cbd0	; 0x1cbd0 <__divsf3>
    5586:	20 e0       	ldi	r18, 0x00	; 0
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	40 e8       	ldi	r20, 0x80	; 128
    558c:	5f e3       	ldi	r21, 0x3F	; 63
    558e:	0e 94 7f e5 	call	0x1cafe	; 0x1cafe <__subsf3>
    5592:	0e 94 9a e7 	call	0x1cf34	; 0x1cf34 <round>
    5596:	0e 94 55 e6 	call	0x1ccaa	; 0x1ccaa <__fixunssfsi>
    559a:	6b 01       	movw	r12, r22
    559c:	7c 01       	movw	r14, r24
    559e:	81 2c       	mov	r8, r1
    55a0:	91 2c       	mov	r9, r1
    55a2:	90 e8       	ldi	r25, 0x80	; 128
    55a4:	a9 2e       	mov	r10, r25
    55a6:	91 e4       	ldi	r25, 0x41	; 65
    55a8:	b9 2e       	mov	r11, r25
    55aa:	c1 14       	cp	r12, r1
    55ac:	f0 e1       	ldi	r31, 0x10	; 16
    55ae:	df 06       	cpc	r13, r31
    55b0:	e1 04       	cpc	r14, r1
    55b2:	f1 04       	cpc	r15, r1
    55b4:	30 f0       	brcs	.+12     	; 0x55c2 <uart_ubr+0xe0>
    55b6:	cc 24       	eor	r12, r12
    55b8:	ca 94       	dec	r12
    55ba:	8f e0       	ldi	r24, 0x0F	; 15
    55bc:	d8 2e       	mov	r13, r24
    55be:	e1 2c       	mov	r14, r1
    55c0:	f1 2c       	mov	r15, r1
    55c2:	c7 01       	movw	r24, r14
    55c4:	b6 01       	movw	r22, r12
    55c6:	6f 5f       	subi	r22, 0xFF	; 255
    55c8:	7f 4f       	sbci	r23, 0xFF	; 255
    55ca:	8f 4f       	sbci	r24, 0xFF	; 255
    55cc:	9f 4f       	sbci	r25, 0xFF	; 255
    55ce:	0e 94 81 e6 	call	0x1cd02	; 0x1cd02 <__floatunsisf>
    55d2:	a5 01       	movw	r20, r10
    55d4:	94 01       	movw	r18, r8
    55d6:	0e 94 37 e7 	call	0x1ce6e	; 0x1ce6e <__mulsf3>
    55da:	9b 01       	movw	r18, r22
    55dc:	ac 01       	movw	r20, r24
    55de:	60 e8       	ldi	r22, 0x80	; 128
    55e0:	76 e9       	ldi	r23, 0x96	; 150
    55e2:	88 e9       	ldi	r24, 0x98	; 152
    55e4:	9b e4       	ldi	r25, 0x4B	; 75
    55e6:	0e 94 e8 e5 	call	0x1cbd0	; 0x1cbd0 <__divsf3>
    55ea:	0e 94 55 e6 	call	0x1ccaa	; 0x1ccaa <__fixunssfsi>
    55ee:	68 83       	st	Y, r22
    55f0:	79 83       	std	Y+1, r23	; 0x01
    55f2:	8a 83       	std	Y+2, r24	; 0x02
    55f4:	9b 83       	std	Y+3, r25	; 0x03
    55f6:	c6 01       	movw	r24, r12
    55f8:	df 91       	pop	r29
    55fa:	cf 91       	pop	r28
    55fc:	ff 90       	pop	r15
    55fe:	ef 90       	pop	r14
    5600:	df 90       	pop	r13
    5602:	cf 90       	pop	r12
    5604:	bf 90       	pop	r11
    5606:	af 90       	pop	r10
    5608:	9f 90       	pop	r9
    560a:	8f 90       	pop	r8
    560c:	7f 90       	pop	r7
    560e:	6f 90       	pop	r6
    5610:	5f 90       	pop	r5
    5612:	4f 90       	pop	r4
    5614:	08 95       	ret

00005616 <uart_init>:
    5616:	a6 e0       	ldi	r26, 0x06	; 6
    5618:	b0 e0       	ldi	r27, 0x00	; 0
    561a:	e1 e1       	ldi	r30, 0x11	; 17
    561c:	fb e2       	ldi	r31, 0x2B	; 43
    561e:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    5622:	1e 82       	std	Y+6, r1	; 0x06
    5624:	1d 82       	std	Y+5, r1	; 0x05
    5626:	81 11       	cpse	r24, r1
    5628:	36 c0       	rjmp	.+108    	; 0x5696 <uart_init+0x80>
    562a:	cb 01       	movw	r24, r22
    562c:	ba 01       	movw	r22, r20
    562e:	9e 01       	movw	r18, r28
    5630:	2f 5f       	subi	r18, 0xFF	; 255
    5632:	3f 4f       	sbci	r19, 0xFF	; 255
    5634:	ae 01       	movw	r20, r28
    5636:	4b 5f       	subi	r20, 0xFB	; 251
    5638:	5f 4f       	sbci	r21, 0xFF	; 255
    563a:	53 df       	rcall	.-346    	; 0x54e2 <uart_ubr>
    563c:	f8 94       	cli
    563e:	10 92 ef 18 	sts	0x18EF, r1	; 0x8018ef <uarts+0x4>
    5642:	10 92 ee 18 	sts	0x18EE, r1	; 0x8018ee <uarts+0x3>
    5646:	10 92 eb 18 	sts	0x18EB, r1	; 0x8018eb <uarts>
    564a:	10 92 ec 18 	sts	0x18EC, r1	; 0x8018ec <uarts+0x1>
    564e:	10 92 ed 18 	sts	0x18ED, r1	; 0x8018ed <uarts+0x2>
    5652:	10 92 f0 18 	sts	0x18F0, r1	; 0x8018f0 <uarts+0x5>
    5656:	78 94       	sei
    5658:	f8 94       	cli
    565a:	58 9a       	sbi	0x0b, 0	; 11
    565c:	59 9a       	sbi	0x0b, 1	; 11
    565e:	50 98       	cbi	0x0a, 0	; 10
    5660:	51 9a       	sbi	0x0a, 1	; 10
    5662:	28 e9       	ldi	r18, 0x98	; 152
    5664:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5668:	2d 81       	ldd	r18, Y+5	; 0x05
    566a:	3e 81       	ldd	r19, Y+6	; 0x06
    566c:	23 2b       	or	r18, r19
    566e:	19 f0       	breq	.+6      	; 0x5676 <uart_init+0x60>
    5670:	22 e0       	ldi	r18, 0x02	; 2
    5672:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5676:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    567a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    567e:	78 94       	sei
    5680:	60 e0       	ldi	r22, 0x00	; 0
    5682:	7c e2       	ldi	r23, 0x2C	; 44
    5684:	85 e1       	ldi	r24, 0x15	; 21
    5686:	9c e2       	ldi	r25, 0x2C	; 44
    5688:	0e 94 1a 79 	call	0xf234	; 0xf234 <fdevopen>
    568c:	69 81       	ldd	r22, Y+1	; 0x01
    568e:	7a 81       	ldd	r23, Y+2	; 0x02
    5690:	8b 81       	ldd	r24, Y+3	; 0x03
    5692:	9c 81       	ldd	r25, Y+4	; 0x04
    5694:	03 c0       	rjmp	.+6      	; 0x569c <uart_init+0x86>
    5696:	60 e0       	ldi	r22, 0x00	; 0
    5698:	70 e0       	ldi	r23, 0x00	; 0
    569a:	cb 01       	movw	r24, r22
    569c:	26 96       	adiw	r28, 0x06	; 6
    569e:	e2 e0       	ldi	r30, 0x02	; 2
    56a0:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

000056a4 <uart_rx_interrupt>:
    56a4:	27 e5       	ldi	r18, 0x57	; 87
    56a6:	82 9f       	mul	r24, r18
    56a8:	c0 01       	movw	r24, r0
    56aa:	11 24       	eor	r1, r1
    56ac:	fc 01       	movw	r30, r24
    56ae:	e5 51       	subi	r30, 0x15	; 21
    56b0:	f7 4e       	sbci	r31, 0xE7	; 231
    56b2:	83 81       	ldd	r24, Z+3	; 0x03
    56b4:	94 81       	ldd	r25, Z+4	; 0x04
    56b6:	80 35       	cpi	r24, 0x50	; 80
    56b8:	91 05       	cpc	r25, r1
    56ba:	84 f4       	brge	.+32     	; 0x56dc <uart_rx_interrupt+0x38>
    56bc:	30 81       	ld	r19, Z
    56be:	21 e0       	ldi	r18, 0x01	; 1
    56c0:	23 0f       	add	r18, r19
    56c2:	20 83       	st	Z, r18
    56c4:	df 01       	movw	r26, r30
    56c6:	a3 0f       	add	r26, r19
    56c8:	b1 1d       	adc	r27, r1
    56ca:	16 96       	adiw	r26, 0x06	; 6
    56cc:	6c 93       	st	X, r22
    56ce:	01 96       	adiw	r24, 0x01	; 1
    56d0:	94 83       	std	Z+4, r25	; 0x04
    56d2:	83 83       	std	Z+3, r24	; 0x03
    56d4:	20 35       	cpi	r18, 0x50	; 80
    56d6:	28 f0       	brcs	.+10     	; 0x56e2 <uart_rx_interrupt+0x3e>
    56d8:	10 82       	st	Z, r1
    56da:	08 95       	ret
    56dc:	85 81       	ldd	r24, Z+5	; 0x05
    56de:	81 60       	ori	r24, 0x01	; 1
    56e0:	85 83       	std	Z+5, r24	; 0x05
    56e2:	08 95       	ret

000056e4 <__vector_20>:
    56e4:	1f 92       	push	r1
    56e6:	0f 92       	push	r0
    56e8:	0f b6       	in	r0, 0x3f	; 63
    56ea:	0f 92       	push	r0
    56ec:	11 24       	eor	r1, r1
    56ee:	0b b6       	in	r0, 0x3b	; 59
    56f0:	0f 92       	push	r0
    56f2:	2f 93       	push	r18
    56f4:	3f 93       	push	r19
    56f6:	4f 93       	push	r20
    56f8:	5f 93       	push	r21
    56fa:	6f 93       	push	r22
    56fc:	7f 93       	push	r23
    56fe:	8f 93       	push	r24
    5700:	9f 93       	push	r25
    5702:	af 93       	push	r26
    5704:	bf 93       	push	r27
    5706:	ef 93       	push	r30
    5708:	ff 93       	push	r31
    570a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    570e:	80 e0       	ldi	r24, 0x00	; 0
    5710:	c9 df       	rcall	.-110    	; 0x56a4 <uart_rx_interrupt>
    5712:	ff 91       	pop	r31
    5714:	ef 91       	pop	r30
    5716:	bf 91       	pop	r27
    5718:	af 91       	pop	r26
    571a:	9f 91       	pop	r25
    571c:	8f 91       	pop	r24
    571e:	7f 91       	pop	r23
    5720:	6f 91       	pop	r22
    5722:	5f 91       	pop	r21
    5724:	4f 91       	pop	r20
    5726:	3f 91       	pop	r19
    5728:	2f 91       	pop	r18
    572a:	0f 90       	pop	r0
    572c:	0b be       	out	0x3b, r0	; 59
    572e:	0f 90       	pop	r0
    5730:	0f be       	out	0x3f, r0	; 63
    5732:	0f 90       	pop	r0
    5734:	1f 90       	pop	r1
    5736:	18 95       	reti

00005738 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5738:	81 11       	cpse	r24, r1
    573a:	07 c0       	rjmp	.+14     	; 0x574a <uart_rx_count+0x12>
        return(EOF);

    cli();
    573c:	f8 94       	cli

    count = uarts[uart].rx_count;
    573e:	80 91 ee 18 	lds	r24, 0x18EE	; 0x8018ee <uarts+0x3>
    5742:	90 91 ef 18 	lds	r25, 0x18EF	; 0x8018ef <uarts+0x4>

    sei();
    5746:	78 94       	sei

    return (count );
    5748:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    574a:	8f ef       	ldi	r24, 0xFF	; 255
    574c:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    574e:	08 95       	ret

00005750 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    5750:	81 11       	cpse	r24, r1
    5752:	21 c0       	rjmp	.+66     	; 0x5796 <uart_get_tail+0x46>
	{
        return(EOF);
	}

	while(uart_rx_count(uart) < 1)
    5754:	80 e0       	ldi	r24, 0x00	; 0
    5756:	f0 df       	rcall	.-32     	; 0x5738 <uart_rx_count>
    5758:	18 16       	cp	r1, r24
    575a:	19 06       	cpc	r1, r25
    575c:	dc f7       	brge	.-10     	; 0x5754 <uart_get_tail+0x4>
		;

    cli();
    575e:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5760:	e0 91 ec 18 	lds	r30, 0x18EC	; 0x8018ec <uarts+0x1>
    5764:	91 e0       	ldi	r25, 0x01	; 1
    5766:	9e 0f       	add	r25, r30
    5768:	90 93 ec 18 	sts	0x18EC, r25	; 0x8018ec <uarts+0x1>
    576c:	f0 e0       	ldi	r31, 0x00	; 0
    576e:	e5 51       	subi	r30, 0x15	; 21
    5770:	f7 4e       	sbci	r31, 0xE7	; 231
    5772:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5774:	90 35       	cpi	r25, 0x50	; 80
    5776:	10 f0       	brcs	.+4      	; 0x577c <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    5778:	10 92 ec 18 	sts	0x18EC, r1	; 0x8018ec <uarts+0x1>
    uarts[uart].rx_count--;
    577c:	20 91 ee 18 	lds	r18, 0x18EE	; 0x8018ee <uarts+0x3>
    5780:	30 91 ef 18 	lds	r19, 0x18EF	; 0x8018ef <uarts+0x4>
    5784:	21 50       	subi	r18, 0x01	; 1
    5786:	31 09       	sbc	r19, r1
    5788:	30 93 ef 18 	sts	0x18EF, r19	; 0x8018ef <uarts+0x4>
    578c:	20 93 ee 18 	sts	0x18EE, r18	; 0x8018ee <uarts+0x3>
    sei();
    5790:	78 94       	sei

    return (c & 0xff);
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
	{
        return(EOF);
    5796:	8f ef       	ldi	r24, 0xFF	; 255
    5798:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    579a:	08 95       	ret

0000579c <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    579c:	d9 df       	rcall	.-78     	; 0x5750 <uart_get_tail>
    579e:	99 27       	eor	r25, r25
    57a0:	08 95       	ret

000057a2 <uart_tx_byte>:
    57a2:	61 11       	cpse	r22, r1
    57a4:	09 c0       	rjmp	.+18     	; 0x57b8 <uart_tx_byte+0x16>
    57a6:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    57aa:	25 ff       	sbrs	r18, 5
    57ac:	fc cf       	rjmp	.-8      	; 0x57a6 <uart_tx_byte+0x4>
    57ae:	28 2f       	mov	r18, r24
    57b0:	2f 77       	andi	r18, 0x7F	; 127
    57b2:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    57b6:	08 95       	ret
    57b8:	61 30       	cpi	r22, 0x01	; 1
    57ba:	49 f4       	brne	.+18     	; 0x57ce <uart_tx_byte+0x2c>
    57bc:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    57c0:	25 ff       	sbrs	r18, 5
    57c2:	fc cf       	rjmp	.-8      	; 0x57bc <uart_tx_byte+0x1a>
    57c4:	28 2f       	mov	r18, r24
    57c6:	2f 77       	andi	r18, 0x7F	; 127
    57c8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    57cc:	08 95       	ret
    57ce:	8f ef       	ldi	r24, 0xFF	; 255
    57d0:	9f ef       	ldi	r25, 0xFF	; 255
    57d2:	08 95       	ret

000057d4 <uart_getchar>:
    57d4:	cf 93       	push	r28
    57d6:	81 11       	cpse	r24, r1
    57d8:	0f c0       	rjmp	.+30     	; 0x57f8 <uart_getchar+0x24>
    57da:	e0 df       	rcall	.-64     	; 0x579c <uart_rx_byte>
    57dc:	c8 2f       	mov	r28, r24
    57de:	60 e0       	ldi	r22, 0x00	; 0
    57e0:	90 e0       	ldi	r25, 0x00	; 0
    57e2:	df df       	rcall	.-66     	; 0x57a2 <uart_tx_byte>
    57e4:	cd 30       	cpi	r28, 0x0D	; 13
    57e6:	29 f4       	brne	.+10     	; 0x57f2 <uart_getchar+0x1e>
    57e8:	60 e0       	ldi	r22, 0x00	; 0
    57ea:	8a e0       	ldi	r24, 0x0A	; 10
    57ec:	90 e0       	ldi	r25, 0x00	; 0
    57ee:	d9 df       	rcall	.-78     	; 0x57a2 <uart_tx_byte>
    57f0:	ca e0       	ldi	r28, 0x0A	; 10
    57f2:	8c 2f       	mov	r24, r28
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	02 c0       	rjmp	.+4      	; 0x57fc <uart_getchar+0x28>
    57f8:	8f ef       	ldi	r24, 0xFF	; 255
    57fa:	9f ef       	ldi	r25, 0xFF	; 255
    57fc:	cf 91       	pop	r28
    57fe:	08 95       	ret

00005800 <uart0_getchar>:
    5800:	80 e0       	ldi	r24, 0x00	; 0
    5802:	e8 cf       	rjmp	.-48     	; 0x57d4 <uart_getchar>
    5804:	08 95       	ret

00005806 <uart_putchar>:
    5806:	1f 93       	push	r17
    5808:	cf 93       	push	r28
    580a:	df 93       	push	r29
    580c:	ec 01       	movw	r28, r24
    580e:	16 2f       	mov	r17, r22
    5810:	c8 df       	rcall	.-112    	; 0x57a2 <uart_tx_byte>
    5812:	ca 30       	cpi	r28, 0x0A	; 10
    5814:	d1 05       	cpc	r29, r1
    5816:	21 f4       	brne	.+8      	; 0x5820 <uart_putchar+0x1a>
    5818:	61 2f       	mov	r22, r17
    581a:	8d e0       	ldi	r24, 0x0D	; 13
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	c1 df       	rcall	.-126    	; 0x57a2 <uart_tx_byte>
    5820:	ce 01       	movw	r24, r28
    5822:	df 91       	pop	r29
    5824:	cf 91       	pop	r28
    5826:	1f 91       	pop	r17
    5828:	08 95       	ret

0000582a <uart0_putchar>:
    582a:	cf 93       	push	r28
    582c:	df 93       	push	r29
    582e:	ec 01       	movw	r28, r24
    5830:	60 e0       	ldi	r22, 0x00	; 0
    5832:	70 e0       	ldi	r23, 0x00	; 0
    5834:	e8 df       	rcall	.-48     	; 0x5806 <uart_putchar>
    5836:	ce 01       	movw	r24, r28
    5838:	df 91       	pop	r29
    583a:	cf 91       	pop	r28
    583c:	08 95       	ret

0000583e <uart_keyhit>:
    583e:	7c cf       	rjmp	.-264    	; 0x5738 <uart_rx_count>
    5840:	08 95       	ret

00005842 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    5842:	cf 92       	push	r12
    5844:	df 92       	push	r13
    5846:	ef 92       	push	r14
    5848:	ff 92       	push	r15
    584a:	6b 01       	movw	r12, r22
    584c:	7c 01       	movw	r14, r24
    584e:	80 91 48 17 	lds	r24, 0x1748	; 0x801748 <SPI0_Speed_value>
    5852:	90 91 49 17 	lds	r25, 0x1749	; 0x801749 <SPI0_Speed_value+0x1>
    5856:	a0 91 4a 17 	lds	r26, 0x174A	; 0x80174a <SPI0_Speed_value+0x2>
    585a:	b0 91 4b 17 	lds	r27, 0x174B	; 0x80174b <SPI0_Speed_value+0x3>
    585e:	8c 15       	cp	r24, r12
    5860:	9d 05       	cpc	r25, r13
    5862:	ae 05       	cpc	r26, r14
    5864:	bf 05       	cpc	r27, r15
    5866:	09 f4       	brne	.+2      	; 0x586a <SPI0_Speed+0x28>
    5868:	4e c0       	rjmp	.+156    	; 0x5906 <SPI0_Speed+0xc4>
    586a:	60 e0       	ldi	r22, 0x00	; 0
    586c:	7d e2       	ldi	r23, 0x2D	; 45
    586e:	81 e3       	ldi	r24, 0x31	; 49
    5870:	91 e0       	ldi	r25, 0x01	; 1
    5872:	a7 01       	movw	r20, r14
    5874:	96 01       	movw	r18, r12
    5876:	0e 94 b3 e4 	call	0x1c966	; 0x1c966 <__udivmodsi4>
    587a:	20 38       	cpi	r18, 0x80	; 128
    587c:	31 05       	cpc	r19, r1
    587e:	41 05       	cpc	r20, r1
    5880:	51 05       	cpc	r21, r1
    5882:	28 f4       	brcc	.+10     	; 0x588e <SPI0_Speed+0x4c>
    5884:	20 34       	cpi	r18, 0x40	; 64
    5886:	31 05       	cpc	r19, r1
    5888:	41 05       	cpc	r20, r1
    588a:	51 05       	cpc	r21, r1
    588c:	30 f0       	brcs	.+12     	; 0x589a <SPI0_Speed+0x58>
    588e:	8d b5       	in	r24, 0x2d	; 45
    5890:	8e 7f       	andi	r24, 0xFE	; 254
    5892:	8d bd       	out	0x2d, r24	; 45
    5894:	8c b5       	in	r24, 0x2c	; 44
    5896:	82 60       	ori	r24, 0x02	; 2
    5898:	1b c0       	rjmp	.+54     	; 0x58d0 <SPI0_Speed+0x8e>
    589a:	8d b5       	in	r24, 0x2d	; 45
    589c:	20 32       	cpi	r18, 0x20	; 32
    589e:	31 05       	cpc	r19, r1
    58a0:	41 05       	cpc	r20, r1
    58a2:	51 05       	cpc	r21, r1
    58a4:	28 f0       	brcs	.+10     	; 0x58b0 <SPI0_Speed+0x6e>
    58a6:	81 60       	ori	r24, 0x01	; 1
    58a8:	8d bd       	out	0x2d, r24	; 45
    58aa:	8c b5       	in	r24, 0x2c	; 44
    58ac:	82 60       	ori	r24, 0x02	; 2
    58ae:	1f c0       	rjmp	.+62     	; 0x58ee <SPI0_Speed+0xac>
    58b0:	20 31       	cpi	r18, 0x10	; 16
    58b2:	31 05       	cpc	r19, r1
    58b4:	41 05       	cpc	r20, r1
    58b6:	51 05       	cpc	r21, r1
    58b8:	10 f0       	brcs	.+4      	; 0x58be <SPI0_Speed+0x7c>
    58ba:	8e 7f       	andi	r24, 0xFE	; 254
    58bc:	06 c0       	rjmp	.+12     	; 0x58ca <SPI0_Speed+0x88>
    58be:	28 30       	cpi	r18, 0x08	; 8
    58c0:	31 05       	cpc	r19, r1
    58c2:	41 05       	cpc	r20, r1
    58c4:	51 05       	cpc	r21, r1
    58c6:	40 f0       	brcs	.+16     	; 0x58d8 <SPI0_Speed+0x96>
    58c8:	81 60       	ori	r24, 0x01	; 1
    58ca:	8d bd       	out	0x2d, r24	; 45
    58cc:	8c b5       	in	r24, 0x2c	; 44
    58ce:	8d 7f       	andi	r24, 0xFD	; 253
    58d0:	8c bd       	out	0x2c, r24	; 44
    58d2:	8c b5       	in	r24, 0x2c	; 44
    58d4:	81 60       	ori	r24, 0x01	; 1
    58d6:	0e c0       	rjmp	.+28     	; 0x58f4 <SPI0_Speed+0xb2>
    58d8:	24 30       	cpi	r18, 0x04	; 4
    58da:	31 05       	cpc	r19, r1
    58dc:	41 05       	cpc	r20, r1
    58de:	51 05       	cpc	r21, r1
    58e0:	10 f0       	brcs	.+4      	; 0x58e6 <SPI0_Speed+0xa4>
    58e2:	8e 7f       	andi	r24, 0xFE	; 254
    58e4:	01 c0       	rjmp	.+2      	; 0x58e8 <SPI0_Speed+0xa6>
    58e6:	81 60       	ori	r24, 0x01	; 1
    58e8:	8d bd       	out	0x2d, r24	; 45
    58ea:	8c b5       	in	r24, 0x2c	; 44
    58ec:	8d 7f       	andi	r24, 0xFD	; 253
    58ee:	8c bd       	out	0x2c, r24	; 44
    58f0:	8c b5       	in	r24, 0x2c	; 44
    58f2:	8e 7f       	andi	r24, 0xFE	; 254
    58f4:	8c bd       	out	0x2c, r24	; 44
    58f6:	c0 92 48 17 	sts	0x1748, r12	; 0x801748 <SPI0_Speed_value>
    58fa:	d0 92 49 17 	sts	0x1749, r13	; 0x801749 <SPI0_Speed_value+0x1>
    58fe:	e0 92 4a 17 	sts	0x174A, r14	; 0x80174a <SPI0_Speed_value+0x2>
    5902:	f0 92 4b 17 	sts	0x174B, r15	; 0x80174b <SPI0_Speed_value+0x3>
    5906:	ff 90       	pop	r15
    5908:	ef 90       	pop	r14
    590a:	df 90       	pop	r13
    590c:	cf 90       	pop	r12
    590e:	08 95       	ret

00005910 <SPI0_Mode>:
    5910:	cf 93       	push	r28
    5912:	df 93       	push	r29
    5914:	ec 01       	movw	r28, r24
    5916:	81 30       	cpi	r24, 0x01	; 1
    5918:	91 05       	cpc	r25, r1
    591a:	71 f0       	breq	.+28     	; 0x5938 <SPI0_Mode+0x28>
    591c:	2c f4       	brge	.+10     	; 0x5928 <SPI0_Mode+0x18>
    591e:	89 2b       	or	r24, r25
    5920:	c1 f4       	brne	.+48     	; 0x5952 <SPI0_Mode+0x42>
    5922:	8c b5       	in	r24, 0x2c	; 44
    5924:	87 7f       	andi	r24, 0xF7	; 247
    5926:	11 c0       	rjmp	.+34     	; 0x594a <SPI0_Mode+0x3a>
    5928:	82 30       	cpi	r24, 0x02	; 2
    592a:	91 05       	cpc	r25, r1
    592c:	61 f0       	breq	.+24     	; 0x5946 <SPI0_Mode+0x36>
    592e:	03 97       	sbiw	r24, 0x03	; 3
    5930:	81 f4       	brne	.+32     	; 0x5952 <SPI0_Mode+0x42>
    5932:	8c b5       	in	r24, 0x2c	; 44
    5934:	88 60       	ori	r24, 0x08	; 8
    5936:	02 c0       	rjmp	.+4      	; 0x593c <SPI0_Mode+0x2c>
    5938:	8c b5       	in	r24, 0x2c	; 44
    593a:	87 7f       	andi	r24, 0xF7	; 247
    593c:	8c bd       	out	0x2c, r24	; 44
    593e:	8c b5       	in	r24, 0x2c	; 44
    5940:	84 60       	ori	r24, 0x04	; 4
    5942:	8c bd       	out	0x2c, r24	; 44
    5944:	14 c0       	rjmp	.+40     	; 0x596e <SPI0_Mode+0x5e>
    5946:	8c b5       	in	r24, 0x2c	; 44
    5948:	88 60       	ori	r24, 0x08	; 8
    594a:	8c bd       	out	0x2c, r24	; 44
    594c:	8c b5       	in	r24, 0x2c	; 44
    594e:	8b 7f       	andi	r24, 0xFB	; 251
    5950:	f8 cf       	rjmp	.-16     	; 0x5942 <SPI0_Mode+0x32>
    5952:	df 93       	push	r29
    5954:	cf 93       	push	r28
    5956:	8a e2       	ldi	r24, 0x2A	; 42
    5958:	94 e0       	ldi	r25, 0x04	; 4
    595a:	1f 92       	push	r1
    595c:	9f 93       	push	r25
    595e:	8f 93       	push	r24
    5960:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    5964:	0f 90       	pop	r0
    5966:	0f 90       	pop	r0
    5968:	0f 90       	pop	r0
    596a:	0f 90       	pop	r0
    596c:	0f 90       	pop	r0
    596e:	d0 93 47 17 	sts	0x1747, r29	; 0x801747 <__data_end+0x1>
    5972:	c0 93 46 17 	sts	0x1746, r28	; 0x801746 <__data_end>
    5976:	df 91       	pop	r29
    5978:	cf 91       	pop	r28
    597a:	08 95       	ret

0000597c <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    597c:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    597e:	0d b4       	in	r0, 0x2d	; 45
    5980:	07 fe       	sbrs	r0, 7
    5982:	fd cf       	rjmp	.-6      	; 0x597e <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5984:	8e b5       	in	r24, 0x2e	; 46
}
    5986:	08 95       	ret

00005988 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5988:	cf 92       	push	r12
    598a:	df 92       	push	r13
    598c:	ef 92       	push	r14
    598e:	ff 92       	push	r15
    5990:	cf 93       	push	r28
    5992:	df 93       	push	r29
    5994:	1f 92       	push	r1
    5996:	cd b7       	in	r28, 0x3d	; 61
    5998:	de b7       	in	r29, 0x3e	; 62
    599a:	6b 01       	movw	r12, r22
    599c:	7c 01       	movw	r14, r24

	volatile uint8_t D;

	GPIO_PIN_HI(SS); 		// SS Output must be HI prevent slave mode from getting set while initializing
    599e:	2c 9a       	sbi	0x05, 4	; 5
    59a0:	24 9a       	sbi	0x04, 4	; 4
    delayus(10);			// Debugging delay HI
    59a2:	6a e0       	ldi	r22, 0x0A	; 10
    59a4:	70 e0       	ldi	r23, 0x00	; 0
    59a6:	80 e0       	ldi	r24, 0x00	; 0
    59a8:	90 e0       	ldi	r25, 0x00	; 0
    59aa:	26 dd       	rcall	.-1460   	; 0x53f8 <delayus>

    GPIO_PIN_HI(SCK);       // SCK Output
    59ac:	2f 9a       	sbi	0x05, 7	; 5
    59ae:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    59b0:	2d 9a       	sbi	0x05, 5	; 5
    59b2:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);   // MISO Input, no pull-up
    59b4:	26 98       	cbi	0x04, 6	; 4

	SPCR = 0;				// Clear SPCR in case we are not called after RESET
    59b6:	1c bc       	out	0x2c, r1	; 44
    BIT_SET(SPCR, SPE);     // Enable SPI
    59b8:	8c b5       	in	r24, 0x2c	; 44
    59ba:	80 64       	ori	r24, 0x40	; 64
    59bc:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, MSTR);    // Master Mode
    59be:	8c b5       	in	r24, 0x2c	; 44
    59c0:	80 61       	ori	r24, 0x10	; 16
    59c2:	8c bd       	out	0x2c, r24	; 44

	// SPI Clear pending interrupt flags
	D = SPSR;
    59c4:	8d b5       	in	r24, 0x2d	; 45
    59c6:	89 83       	std	Y+1, r24	; 0x01
	D = SPDR;
    59c8:	8e b5       	in	r24, 0x2e	; 46
    59ca:	89 83       	std	Y+1, r24	; 0x01

	/// Set SPI clock mode 0 
    ///  SPI Mode     CPOL    CPHA            Sample
    ///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    59cc:	80 e0       	ldi	r24, 0x00	; 0
    59ce:	90 e0       	ldi	r25, 0x00	; 0

	// Set SPI clock speed
    SPI0_Speed(speed);
    59d0:	9f df       	rcall	.-194    	; 0x5910 <SPI0_Mode>
    59d2:	c7 01       	movw	r24, r14

	// Now we can change the SS pin low - - but only AFTER MSTR is established
    GPIO_PIN_LOW(SS); 		// SS Output -prevents slave mode from input LOW
    59d4:	b6 01       	movw	r22, r12

    SPI0_TXRX_Byte(0xff);	// Send dummy 0xFF
    59d6:	35 df       	rcall	.-406    	; 0x5842 <SPI0_Speed>
    59d8:	2c 98       	cbi	0x05, 4	; 5
    59da:	24 9a       	sbi	0x04, 4	; 4
	SPI0_Init_state = 1;
}
    59dc:	8f ef       	ldi	r24, 0xFF	; 255
    59de:	ce df       	rcall	.-100    	; 0x597c <SPI0_TXRX_Byte>
    59e0:	0f 90       	pop	r0
    59e2:	df 91       	pop	r29
    59e4:	cf 91       	pop	r28
    59e6:	ff 90       	pop	r15
    59e8:	ef 90       	pop	r14
    59ea:	df 90       	pop	r13
    59ec:	cf 90       	pop	r12
    59ee:	08 95       	ret

000059f0 <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    59f0:	0f 93       	push	r16
    59f2:	1f 93       	push	r17
    59f4:	cf 93       	push	r28
    59f6:	df 93       	push	r29
    59f8:	8c 01       	movw	r16, r24
    59fa:	eb 01       	movw	r28, r22

    while(count > 0)
    59fc:	1c 16       	cp	r1, r28
    59fe:	1d 06       	cpc	r1, r29
    5a00:	34 f4       	brge	.+12     	; 0x5a0e <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    5a02:	f8 01       	movw	r30, r16
    5a04:	81 91       	ld	r24, Z+
    5a06:	8f 01       	movw	r16, r30
    5a08:	b9 df       	rcall	.-142    	; 0x597c <SPI0_TXRX_Byte>
		++data;
		--count;
    5a0a:	21 97       	sbiw	r28, 0x01	; 1
    5a0c:	f7 cf       	rjmp	.-18     	; 0x59fc <SPI0_TX+0xc>
	}
}
    5a0e:	df 91       	pop	r29
    5a10:	cf 91       	pop	r28
    5a12:	1f 91       	pop	r17
    5a14:	0f 91       	pop	r16
    5a16:	08 95       	ret

00005a18 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5a18:	0f 93       	push	r16
    5a1a:	1f 93       	push	r17
    5a1c:	cf 93       	push	r28
    5a1e:	df 93       	push	r29
    5a20:	8c 01       	movw	r16, r24
    5a22:	eb 01       	movw	r28, r22

    while(count > 0)
    5a24:	1c 16       	cp	r1, r28
    5a26:	1d 06       	cpc	r1, r29
    5a28:	44 f4       	brge	.+16     	; 0x5a3a <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    5a2a:	f8 01       	movw	r30, r16
    5a2c:	80 81       	ld	r24, Z
    5a2e:	a6 df       	rcall	.-180    	; 0x597c <SPI0_TXRX_Byte>
    5a30:	f8 01       	movw	r30, r16
    5a32:	81 93       	st	Z+, r24
    5a34:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a36:	21 97       	sbiw	r28, 0x01	; 1
    5a38:	f5 cf       	rjmp	.-22     	; 0x5a24 <SPI0_TXRX+0xc>
	}
}
    5a3a:	df 91       	pop	r29
    5a3c:	cf 91       	pop	r28
    5a3e:	1f 91       	pop	r17
    5a40:	0f 91       	pop	r16
    5a42:	08 95       	ret

00005a44 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5a44:	0f 93       	push	r16
    5a46:	1f 93       	push	r17
    5a48:	cf 93       	push	r28
    5a4a:	df 93       	push	r29
    5a4c:	8c 01       	movw	r16, r24
    5a4e:	eb 01       	movw	r28, r22

    while(count > 0)
    5a50:	1c 16       	cp	r1, r28
    5a52:	1d 06       	cpc	r1, r29
    5a54:	3c f4       	brge	.+14     	; 0x5a64 <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    5a56:	8f ef       	ldi	r24, 0xFF	; 255
    5a58:	91 df       	rcall	.-222    	; 0x597c <SPI0_TXRX_Byte>
    5a5a:	f8 01       	movw	r30, r16
    5a5c:	81 93       	st	Z+, r24
    5a5e:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a60:	21 97       	sbiw	r28, 0x01	; 1
    5a62:	f6 cf       	rjmp	.-20     	; 0x5a50 <SPI0_RX+0xc>
	}
}
    5a64:	df 91       	pop	r29
    5a66:	cf 91       	pop	r28
    5a68:	1f 91       	pop	r17
    5a6a:	0f 91       	pop	r16
    5a6c:	08 95       	ret

00005a6e <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    5a6e:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    5a70:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5a72:	ec eb       	ldi	r30, 0xBC	; 188
    5a74:	f0 e0       	ldi	r31, 0x00	; 0
    5a76:	90 81       	ld	r25, Z
    5a78:	94 60       	ori	r25, 0x04	; 4
    5a7a:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5a7c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    5a80:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5a84:	08 95       	ret

00005a86 <TWI_StopTransmission>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5a86:	84 e9       	ldi	r24, 0x94	; 148
    5a88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a8c:	08 95       	ret

00005a8e <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5a8e:	94 ea       	ldi	r25, 0xA4	; 164
    5a90:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a94:	24 e6       	ldi	r18, 0x64	; 100
    5a96:	62 9f       	mul	r22, r18
    5a98:	b0 01       	movw	r22, r0
    5a9a:	11 24       	eor	r1, r1
    5a9c:	61 50       	subi	r22, 0x01	; 1
    5a9e:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5aa0:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5aa2:	40 e0       	ldi	r20, 0x00	; 0
    5aa4:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5aa6:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5aa8:	2f 3f       	cpi	r18, 0xFF	; 255
    5aaa:	9f ef       	ldi	r25, 0xFF	; 255
    5aac:	39 07       	cpc	r19, r25
    5aae:	41 f1       	breq	.+80     	; 0x5b00 <TWI_StartTransmission+0x72>
    5ab0:	41 15       	cp	r20, r1
    5ab2:	51 05       	cpc	r21, r1
    5ab4:	f1 f4       	brne	.+60     	; 0x5af2 <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5ab6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5aba:	97 ff       	sbrs	r25, 7
    5abc:	13 c0       	rjmp	.+38     	; 0x5ae4 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    5abe:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5ac2:	98 7f       	andi	r25, 0xF8	; 248
    5ac4:	90 31       	cpi	r25, 0x10	; 16
    5ac6:	61 f0       	breq	.+24     	; 0x5ae0 <TWI_StartTransmission+0x52>
    5ac8:	98 33       	cpi	r25, 0x38	; 56
    5aca:	39 f0       	breq	.+14     	; 0x5ada <TWI_StartTransmission+0x4c>
    5acc:	98 30       	cpi	r25, 0x08	; 8
    5ace:	41 f0       	breq	.+16     	; 0x5ae0 <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    5ad0:	84 e0       	ldi	r24, 0x04	; 4
    5ad2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5ad6:	81 e0       	ldi	r24, 0x01	; 1
    5ad8:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5ada:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    5ade:	06 c0       	rjmp	.+12     	; 0x5aec <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    5ae0:	41 e0       	ldi	r20, 0x01	; 1
    5ae2:	50 e0       	ldi	r21, 0x00	; 0
    5ae4:	92 e4       	ldi	r25, 0x42	; 66
    5ae6:	9a 95       	dec	r25
    5ae8:	f1 f7       	brne	.-4      	; 0x5ae6 <TWI_StartTransmission+0x58>
    5aea:	00 c0       	rjmp	.+0      	; 0x5aec <TWI_StartTransmission+0x5e>
    5aec:	21 50       	subi	r18, 0x01	; 1
    5aee:	31 09       	sbc	r19, r1
    5af0:	db cf       	rjmp	.-74     	; 0x5aa8 <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5af2:	23 2b       	or	r18, r19
    5af4:	29 f4       	brne	.+10     	; 0x5b00 <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5af6:	84 e0       	ldi	r24, 0x04	; 4
    5af8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    5afc:	82 e0       	ldi	r24, 0x02	; 2
    5afe:	08 95       	ret
        }

        TWDR = SlaveAddress;
    5b00:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5b04:	84 e8       	ldi	r24, 0x84	; 132
    5b06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5b0a:	6f 3f       	cpi	r22, 0xFF	; 255
    5b0c:	8f ef       	ldi	r24, 0xFF	; 255
    5b0e:	78 07       	cpc	r23, r24
    5b10:	71 f0       	breq	.+28     	; 0x5b2e <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5b12:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b16:	cb 01       	movw	r24, r22
    5b18:	01 97       	sbiw	r24, 0x01	; 1
    5b1a:	27 fd       	sbrc	r18, 7
    5b1c:	06 c0       	rjmp	.+12     	; 0x5b2a <TWI_StartTransmission+0x9c>
    5b1e:	22 e4       	ldi	r18, 0x42	; 66
    5b20:	2a 95       	dec	r18
    5b22:	f1 f7       	brne	.-4      	; 0x5b20 <TWI_StartTransmission+0x92>
    5b24:	00 c0       	rjmp	.+0      	; 0x5b26 <TWI_StartTransmission+0x98>
    5b26:	bc 01       	movw	r22, r24
    5b28:	f0 cf       	rjmp	.-32     	; 0x5b0a <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5b2a:	67 2b       	or	r22, r23
    5b2c:	61 f0       	breq	.+24     	; 0x5b46 <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    5b2e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b32:	88 7f       	andi	r24, 0xF8	; 248
    5b34:	88 31       	cpi	r24, 0x18	; 24
    5b36:	49 f0       	breq	.+18     	; 0x5b4a <TWI_StartTransmission+0xbc>
    5b38:	80 34       	cpi	r24, 0x40	; 64
    5b3a:	39 f0       	breq	.+14     	; 0x5b4a <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5b3c:	84 e9       	ldi	r24, 0x94	; 148
    5b3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5b42:	84 e0       	ldi	r24, 0x04	; 4
    5b44:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5b46:	83 e0       	ldi	r24, 0x03	; 3
    5b48:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5b4a:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5b4c:	08 95       	ret

00005b4e <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    5b4e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5b52:	84 e8       	ldi	r24, 0x84	; 132
    5b54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5b58:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b5c:	87 ff       	sbrs	r24, 7
    5b5e:	fc cf       	rjmp	.-8      	; 0x5b58 <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    5b60:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b64:	98 7f       	andi	r25, 0xF8	; 248
    5b66:	21 e0       	ldi	r18, 0x01	; 1
    5b68:	30 e0       	ldi	r19, 0x00	; 0
    5b6a:	98 32       	cpi	r25, 0x28	; 40
    5b6c:	11 f0       	breq	.+4      	; 0x5b72 <TWI_SendByte+0x24>
    5b6e:	20 e0       	ldi	r18, 0x00	; 0
    5b70:	30 e0       	ldi	r19, 0x00	; 0
}
    5b72:	c9 01       	movw	r24, r18
    5b74:	08 95       	ret

00005b76 <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5b76:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5b78:	61 15       	cp	r22, r1
    5b7a:	71 05       	cpc	r23, r1
    5b7c:	11 f4       	brne	.+4      	; 0x5b82 <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    5b7e:	94 ec       	ldi	r25, 0xC4	; 196
    5b80:	01 c0       	rjmp	.+2      	; 0x5b84 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5b82:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5b84:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5b88:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b8c:	87 ff       	sbrs	r24, 7
    5b8e:	fc cf       	rjmp	.-8      	; 0x5b88 <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    5b90:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5b94:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5b96:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b9a:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5b9c:	81 e0       	ldi	r24, 0x01	; 1
    5b9e:	90 e0       	ldi	r25, 0x00	; 0
    5ba0:	67 2b       	or	r22, r23
    5ba2:	19 f0       	breq	.+6      	; 0x5baa <TWI_ReceiveByte+0x34>
    5ba4:	28 35       	cpi	r18, 0x58	; 88
    5ba6:	19 f4       	brne	.+6      	; 0x5bae <TWI_ReceiveByte+0x38>
    5ba8:	03 c0       	rjmp	.+6      	; 0x5bb0 <TWI_ReceiveByte+0x3a>
    5baa:	20 35       	cpi	r18, 0x50	; 80
    5bac:	09 f0       	breq	.+2      	; 0x5bb0 <TWI_ReceiveByte+0x3a>
    5bae:	80 e0       	ldi	r24, 0x00	; 0
}
    5bb0:	08 95       	ret

00005bb2 <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5bb2:	a0 e0       	ldi	r26, 0x00	; 0
    5bb4:	b0 e0       	ldi	r27, 0x00	; 0
    5bb6:	ef ed       	ldi	r30, 0xDF	; 223
    5bb8:	fd e2       	ldi	r31, 0x2D	; 45
    5bba:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__prologue_saves__+0xe>
    5bbe:	f8 2e       	mov	r15, r24
    5bc0:	b6 2e       	mov	r11, r22
    5bc2:	94 2e       	mov	r9, r20
    5bc4:	a5 2e       	mov	r10, r21
    5bc6:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5bc8:	8e 7f       	andi	r24, 0xFE	; 254
    5bca:	61 df       	rcall	.-318    	; 0x5a8e <TWI_StartTransmission>
    5bcc:	d8 2f       	mov	r29, r24
    5bce:	81 11       	cpse	r24, r1
    5bd0:	2b c0       	rjmp	.+86     	; 0x5c28 <TWI_ReadPacket+0x76>
    5bd2:	c9 2c       	mov	r12, r9
    5bd4:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5bd6:	cc 23       	and	r28, r28
    5bd8:	39 f0       	breq	.+14     	; 0x5be8 <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5bda:	f6 01       	movw	r30, r12
    5bdc:	81 91       	ld	r24, Z+
    5bde:	6f 01       	movw	r12, r30
    5be0:	b6 df       	rcall	.-148    	; 0x5b4e <TWI_SendByte>
    5be2:	c1 50       	subi	r28, 0x01	; 1
    5be4:	89 2b       	or	r24, r25
    5be6:	b9 f7       	brne	.-18     	; 0x5bd6 <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5be8:	6b 2d       	mov	r22, r11
    5bea:	8f 2d       	mov	r24, r15
    5bec:	81 60       	ori	r24, 0x01	; 1
    5bee:	4f df       	rcall	.-354    	; 0x5a8e <TWI_StartTransmission>
    5bf0:	d8 2f       	mov	r29, r24
    5bf2:	81 11       	cpse	r24, r1
    5bf4:	19 c0       	rjmp	.+50     	; 0x5c28 <TWI_ReadPacket+0x76>
    5bf6:	cf ef       	ldi	r28, 0xFF	; 255
    5bf8:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5bfa:	cf 3f       	cpi	r28, 0xFF	; 255
    5bfc:	91 f0       	breq	.+36     	; 0x5c22 <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5bfe:	78 01       	movw	r14, r16
    5c00:	ff ef       	ldi	r31, 0xFF	; 255
    5c02:	ef 1a       	sub	r14, r31
    5c04:	ff 0a       	sbc	r15, r31
    5c06:	61 e0       	ldi	r22, 0x01	; 1
    5c08:	70 e0       	ldi	r23, 0x00	; 0
    5c0a:	cc 23       	and	r28, r28
    5c0c:	11 f0       	breq	.+4      	; 0x5c12 <TWI_ReadPacket+0x60>
    5c0e:	60 e0       	ldi	r22, 0x00	; 0
    5c10:	70 e0       	ldi	r23, 0x00	; 0
    5c12:	c8 01       	movw	r24, r16
    5c14:	b0 df       	rcall	.-160    	; 0x5b76 <TWI_ReceiveByte>
    5c16:	c1 50       	subi	r28, 0x01	; 1
    5c18:	89 2b       	or	r24, r25
    5c1a:	11 f0       	breq	.+4      	; 0x5c20 <TWI_ReadPacket+0x6e>
    5c1c:	87 01       	movw	r16, r14
    5c1e:	ed cf       	rjmp	.-38     	; 0x5bfa <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5c20:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c22:	84 e9       	ldi	r24, 0x94	; 148
    5c24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5c28:	8d 2f       	mov	r24, r29
    5c2a:	cd b7       	in	r28, 0x3d	; 61
    5c2c:	de b7       	in	r29, 0x3e	; 62
    5c2e:	eb e0       	ldi	r30, 0x0B	; 11
    5c30:	0c 94 58 e5 	jmp	0x1cab0	; 0x1cab0 <__epilogue_restores__+0xe>

00005c34 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5c34:	a0 e0       	ldi	r26, 0x00	; 0
    5c36:	b0 e0       	ldi	r27, 0x00	; 0
    5c38:	e0 e2       	ldi	r30, 0x20	; 32
    5c3a:	fe e2       	ldi	r31, 0x2E	; 46
    5c3c:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x12>
    5c40:	b4 2e       	mov	r11, r20
    5c42:	f5 2e       	mov	r15, r21
    5c44:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5c46:	8e 7f       	andi	r24, 0xFE	; 254
    5c48:	22 df       	rcall	.-444    	; 0x5a8e <TWI_StartTransmission>
    5c4a:	d8 2f       	mov	r29, r24
    5c4c:	81 11       	cpse	r24, r1
    5c4e:	1a c0       	rjmp	.+52     	; 0x5c84 <TWI_WritePacket+0x50>
    5c50:	cb 2c       	mov	r12, r11
    5c52:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5c54:	cc 23       	and	r28, r28
    5c56:	41 f0       	breq	.+16     	; 0x5c68 <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5c58:	f6 01       	movw	r30, r12
    5c5a:	81 91       	ld	r24, Z+
    5c5c:	6f 01       	movw	r12, r30
    5c5e:	77 df       	rcall	.-274    	; 0x5b4e <TWI_SendByte>
    5c60:	c1 50       	subi	r28, 0x01	; 1
    5c62:	89 2b       	or	r24, r25
    5c64:	b9 f7       	brne	.-18     	; 0x5c54 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c66:	d5 e0       	ldi	r29, 0x05	; 5
    5c68:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5c6a:	ee 20       	and	r14, r14
    5c6c:	41 f0       	breq	.+16     	; 0x5c7e <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5c6e:	f6 01       	movw	r30, r12
    5c70:	81 91       	ld	r24, Z+
    5c72:	6f 01       	movw	r12, r30
    5c74:	6c df       	rcall	.-296    	; 0x5b4e <TWI_SendByte>
    5c76:	ea 94       	dec	r14
    5c78:	89 2b       	or	r24, r25
    5c7a:	b9 f7       	brne	.-18     	; 0x5c6a <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c7c:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c7e:	84 e9       	ldi	r24, 0x94	; 148
    5c80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5c84:	8d 2f       	mov	r24, r29
    5c86:	cd b7       	in	r28, 0x3d	; 61
    5c88:	de b7       	in	r29, 0x3e	; 62
    5c8a:	e9 e0       	ldi	r30, 0x09	; 9
    5c8c:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x12>

00005c90 <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5c90:	6a e0       	ldi	r22, 0x0A	; 10
    5c92:	0e 94 80 e4 	call	0x1c900	; 0x1c900 <__udivmodqi4>
    5c96:	82 95       	swap	r24
    5c98:	80 7f       	andi	r24, 0xF0	; 240
    5c9a:	89 2b       	or	r24, r25
    5c9c:	08 95       	ret

00005c9e <BCDtoBIN>:
    5c9e:	98 2f       	mov	r25, r24
    5ca0:	92 95       	swap	r25
    5ca2:	9f 70       	andi	r25, 0x0F	; 15
    5ca4:	8f 70       	andi	r24, 0x0F	; 15
    5ca6:	2a e0       	ldi	r18, 0x0A	; 10
    5ca8:	92 9f       	mul	r25, r18
    5caa:	80 0d       	add	r24, r0
    5cac:	11 24       	eor	r1, r1
    5cae:	08 95       	ret

00005cb0 <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5cb0:	cf 92       	push	r12
    5cb2:	df 92       	push	r13
    5cb4:	ef 92       	push	r14
    5cb6:	0f 93       	push	r16
    5cb8:	1f 93       	push	r17
    5cba:	cf 93       	push	r28
    5cbc:	df 93       	push	r29
    5cbe:	00 d0       	rcall	.+0      	; 0x5cc0 <rtc_run+0x10>
    5cc0:	1f 92       	push	r1
    5cc2:	cd b7       	in	r28, 0x3d	; 61
    5cc4:	de b7       	in	r29, 0x3e	; 62
    5cc6:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5cc8:	19 82       	std	Y+1, r1	; 0x01

    ReadAddress = 0;
    5cca:	1a 82       	std	Y+2, r1	; 0x02
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5ccc:	ee 24       	eor	r14, r14
    5cce:	e3 94       	inc	r14
    5cd0:	8e 01       	movw	r16, r28
    5cd2:	0f 5f       	subi	r16, 0xFF	; 255
    5cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    5cd6:	21 e0       	ldi	r18, 0x01	; 1
    5cd8:	ae 01       	movw	r20, r28
    5cda:	4e 5f       	subi	r20, 0xFE	; 254
    5cdc:	5f 4f       	sbci	r21, 0xFF	; 255
    5cde:	64 e1       	ldi	r22, 0x14	; 20
    5ce0:	81 ed       	ldi	r24, 0xD1	; 209
    5ce2:	67 df       	rcall	.-306    	; 0x5bb2 <TWI_ReadPacket>
    5ce4:	88 23       	and	r24, r24
    5ce6:	19 f0       	breq	.+6      	; 0x5cee <rtc_run+0x3e>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read error\n");
    5ce8:	84 eb       	ldi	r24, 0xB4	; 180
    5cea:	94 e0       	ldi	r25, 0x04	; 4
    5cec:	2a c0       	rjmp	.+84     	; 0x5d42 <rtc_run+0x92>
    5cee:	89 81       	ldd	r24, Y+1	; 0x01
        return -1;
    }

    if(run == -1)
    5cf0:	9f ef       	ldi	r25, 0xFF	; 255
    5cf2:	c9 16       	cp	r12, r25
    5cf4:	d9 06       	cpc	r13, r25
    5cf6:	59 f4       	brne	.+22     	; 0x5d0e <rtc_run+0x5e>
        return ((b & 0x80) ? 0 : 1);
    5cf8:	08 2e       	mov	r0, r24
    5cfa:	00 0c       	add	r0, r0
    5cfc:	99 0b       	sbc	r25, r25
    5cfe:	80 95       	com	r24
    5d00:	90 95       	com	r25
    5d02:	89 2f       	mov	r24, r25
    5d04:	88 1f       	adc	r24, r24
    5d06:	88 27       	eor	r24, r24
    5d08:	88 1f       	adc	r24, r24
    5d0a:	90 e0       	ldi	r25, 0x00	; 0
    5d0c:	26 c0       	rjmp	.+76     	; 0x5d5a <rtc_run+0xaa>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5d0e:	8f 77       	andi	r24, 0x7F	; 127
    5d10:	c1 14       	cp	r12, r1
    5d12:	d1 04       	cpc	r13, r1
    5d14:	11 f4       	brne	.+4      	; 0x5d1a <rtc_run+0x6a>
    5d16:	90 e8       	ldi	r25, 0x80	; 128
    5d18:	01 c0       	rjmp	.+2      	; 0x5d1c <rtc_run+0x6c>
    5d1a:	90 e0       	ldi	r25, 0x00	; 0
    5d1c:	89 2b       	or	r24, r25
    5d1e:	89 83       	std	Y+1, r24	; 0x01

    WriteAddress = 0;
    5d20:	1b 82       	std	Y+3, r1	; 0x03
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5d22:	ee 24       	eor	r14, r14
    5d24:	e3 94       	inc	r14
    5d26:	8e 01       	movw	r16, r28
    5d28:	0f 5f       	subi	r16, 0xFF	; 255
    5d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d2c:	21 e0       	ldi	r18, 0x01	; 1
    5d2e:	ae 01       	movw	r20, r28
    5d30:	4d 5f       	subi	r20, 0xFD	; 253
    5d32:	5f 4f       	sbci	r21, 0xFF	; 255
    5d34:	64 e1       	ldi	r22, 0x14	; 20
    5d36:	80 ed       	ldi	r24, 0xD0	; 208
    5d38:	7d df       	rcall	.-262    	; 0x5c34 <TWI_WritePacket>
    5d3a:	88 23       	and	r24, r24
    5d3c:	69 f0       	breq	.+26     	; 0x5d58 <rtc_run+0xa8>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write error\n");
    5d3e:	8d e9       	ldi	r24, 0x9D	; 157
    5d40:	94 e0       	ldi	r25, 0x04	; 4
    5d42:	1f 92       	push	r1
    5d44:	9f 93       	push	r25
    5d46:	8f 93       	push	r24
    5d48:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(-1);
    5d4c:	0f 90       	pop	r0
    5d4e:	0f 90       	pop	r0
    5d50:	0f 90       	pop	r0
    5d52:	8f ef       	ldi	r24, 0xFF	; 255
    5d54:	9f ef       	ldi	r25, 0xFF	; 255
    5d56:	01 c0       	rjmp	.+2      	; 0x5d5a <rtc_run+0xaa>
    5d58:	c6 01       	movw	r24, r12
    }
    return(run);
}
    5d5a:	0f 90       	pop	r0
    5d5c:	0f 90       	pop	r0
    5d5e:	0f 90       	pop	r0
    5d60:	df 91       	pop	r29
    5d62:	cf 91       	pop	r28
    5d64:	1f 91       	pop	r17
    5d66:	0f 91       	pop	r16
    5d68:	ef 90       	pop	r14
    5d6a:	df 90       	pop	r13
    5d6c:	cf 90       	pop	r12
    5d6e:	08 95       	ret

00005d70 <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    5d70:	ef 92       	push	r14
    5d72:	0f 93       	push	r16
    5d74:	1f 93       	push	r17
    5d76:	cf 93       	push	r28
    5d78:	df 93       	push	r29
    5d7a:	cd b7       	in	r28, 0x3d	; 61
    5d7c:	de b7       	in	r29, 0x3e	; 62
    5d7e:	29 97       	sbiw	r28, 0x09	; 9
    5d80:	0f b6       	in	r0, 0x3f	; 63
    5d82:	f8 94       	cli
    5d84:	de bf       	out	0x3e, r29	; 62
    5d86:	0f be       	out	0x3f, r0	; 63
    5d88:	cd bf       	out	0x3d, r28	; 61
    5d8a:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    5d8c:	fc 01       	movw	r30, r24
    5d8e:	80 81       	ld	r24, Z
    5d90:	7f df       	rcall	.-258    	; 0x5c90 <BINtoBCD>
    5d92:	8f 77       	andi	r24, 0x7F	; 127
    5d94:	89 83       	std	Y+1, r24	; 0x01
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    5d96:	f8 01       	movw	r30, r16
    5d98:	82 81       	ldd	r24, Z+2	; 0x02
    5d9a:	7a df       	rcall	.-268    	; 0x5c90 <BINtoBCD>
    5d9c:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    5d9e:	8a 83       	std	Y+2, r24	; 0x02
    5da0:	f8 01       	movw	r30, r16
    5da2:	84 81       	ldd	r24, Z+4	; 0x04
    5da4:	75 df       	rcall	.-278    	; 0x5c90 <BINtoBCD>
    5da6:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    5da8:	8b 83       	std	Y+3, r24	; 0x03
    5daa:	f8 01       	movw	r30, r16
    5dac:	84 85       	ldd	r24, Z+12	; 0x0c
    5dae:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    5db0:	8f 5f       	subi	r24, 0xFF	; 255
    5db2:	8c 83       	std	Y+4, r24	; 0x04
    5db4:	86 81       	ldd	r24, Z+6	; 0x06
    5db6:	6c df       	rcall	.-296    	; 0x5c90 <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    5db8:	8f 73       	andi	r24, 0x3F	; 63
    5dba:	8d 83       	std	Y+5, r24	; 0x05
    5dbc:	f8 01       	movw	r30, r16
    5dbe:	80 85       	ldd	r24, Z+8	; 0x08
    5dc0:	8f 5f       	subi	r24, 0xFF	; 255
    5dc2:	66 df       	rcall	.-308    	; 0x5c90 <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    5dc4:	8f 71       	andi	r24, 0x1F	; 31
    5dc6:	8e 83       	std	Y+6, r24	; 0x06
    5dc8:	f8 01       	movw	r30, r16
    5dca:	82 85       	ldd	r24, Z+10	; 0x0a
    5dcc:	84 56       	subi	r24, 0x64	; 100
    5dce:	60 df       	rcall	.-320    	; 0x5c90 <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    5dd0:	8f 83       	std	Y+7, r24	; 0x07
    5dd2:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    5dd4:	88 87       	std	Y+8, r24	; 0x08
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5dd6:	19 86       	std	Y+9, r1	; 0x09
    5dd8:	88 e0       	ldi	r24, 0x08	; 8
    5dda:	e8 2e       	mov	r14, r24
    5ddc:	8e 01       	movw	r16, r28
    5dde:	0f 5f       	subi	r16, 0xFF	; 255
    5de0:	1f 4f       	sbci	r17, 0xFF	; 255
    5de2:	21 e0       	ldi	r18, 0x01	; 1
    5de4:	ae 01       	movw	r20, r28
    5de6:	47 5f       	subi	r20, 0xF7	; 247
    5de8:	5f 4f       	sbci	r21, 0xFF	; 255
    5dea:	64 e1       	ldi	r22, 0x14	; 20
    5dec:	80 ed       	ldi	r24, 0xD0	; 208
    5dee:	22 df       	rcall	.-444    	; 0x5c34 <TWI_WritePacket>
    5df0:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    5df2:	61 f0       	breq	.+24     	; 0x5e0c <rtc_write+0x9c>
    5df4:	87 e5       	ldi	r24, 0x57	; 87
    5df6:	94 e0       	ldi	r25, 0x04	; 4
    5df8:	1f 92       	push	r1
    5dfa:	9f 93       	push	r25
    5dfc:	8f 93       	push	r24
    5dfe:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(0);
    5e02:	0f 90       	pop	r0
    5e04:	0f 90       	pop	r0
    5e06:	0f 90       	pop	r0
    5e08:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    5e0a:	01 c0       	rjmp	.+2      	; 0x5e0e <rtc_write+0x9e>
}
    5e0c:	81 e0       	ldi	r24, 0x01	; 1
    5e0e:	29 96       	adiw	r28, 0x09	; 9
    5e10:	0f b6       	in	r0, 0x3f	; 63
    5e12:	f8 94       	cli
    5e14:	de bf       	out	0x3e, r29	; 62
    5e16:	0f be       	out	0x3f, r0	; 63
    5e18:	cd bf       	out	0x3d, r28	; 61
    5e1a:	df 91       	pop	r29
    5e1c:	cf 91       	pop	r28
    5e1e:	1f 91       	pop	r17
    5e20:	0f 91       	pop	r16
    5e22:	ef 90       	pop	r14
    5e24:	08 95       	ret

00005e26 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    5e26:	ad e0       	ldi	r26, 0x0D	; 13
    5e28:	b0 e0       	ldi	r27, 0x00	; 0
    5e2a:	e9 e1       	ldi	r30, 0x19	; 25
    5e2c:	ff e2       	ldi	r31, 0x2F	; 47
    5e2e:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    5e32:	6c 01       	movw	r12, r24
    5e34:	4a 87       	std	Y+10, r20	; 0x0a
    5e36:	5b 87       	std	Y+11, r21	; 0x0b
    5e38:	6c 87       	std	Y+12, r22	; 0x0c
    5e3a:	7d 87       	std	Y+13, r23	; 0x0d
    uint8_t  WriteAddress;
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 50000));
    5e3c:	6a e2       	ldi	r22, 0x2A	; 42
    5e3e:	81 e0       	ldi	r24, 0x01	; 1
    5e40:	16 de       	rcall	.-980    	; 0x5a6e <TWI_Init>

    if(!force)
    5e42:	c1 14       	cp	r12, r1
    5e44:	d1 04       	cpc	r13, r1
    5e46:	09 f0       	breq	.+2      	; 0x5e4a <rtc_init+0x24>
    5e48:	42 c0       	rjmp	.+132    	; 0x5ece <rtc_init+0xa8>
    {
        state = rtc_run(-1);
    5e4a:	8f ef       	ldi	r24, 0xFF	; 255
    5e4c:	9f ef       	ldi	r25, 0xFF	; 255
    5e4e:	30 df       	rcall	.-416    	; 0x5cb0 <rtc_run>
        if(state < 0)
    5e50:	87 ff       	sbrs	r24, 7
    5e52:	05 c0       	rjmp	.+10     	; 0x5e5e <rtc_init+0x38>
        {
            rtc_ok = 0;
    5e54:	10 92 ea 18 	sts	0x18EA, r1	; 0x8018ea <rtc_ok+0x1>
    5e58:	10 92 e9 18 	sts	0x18E9, r1	; 0x8018e9 <rtc_ok>
    5e5c:	24 c0       	rjmp	.+72     	; 0x5ea6 <rtc_init+0x80>
            return 0;
        }
        if(state == 0)                            // stopped
    5e5e:	88 23       	and	r24, r24
    5e60:	b1 f1       	breq	.+108    	; 0x5ece <rtc_init+0xa8>
    5e62:	2d c0       	rjmp	.+90     	; 0x5ebe <rtc_init+0x98>
            printf("rtc _write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
    5e64:	ce 01       	movw	r24, r28
    5e66:	01 96       	adiw	r24, 0x01	; 1
    5e68:	6c 01       	movw	r12, r24
    5e6a:	88 e0       	ldi	r24, 0x08	; 8
    5e6c:	f6 01       	movw	r30, r12
    5e6e:	11 92       	st	Z+, r1
    5e70:	8a 95       	dec	r24
    5e72:	e9 f7       	brne	.-6      	; 0x5e6e <rtc_init+0x48>
        for (addr = 8; addr < 0x3f; addr += 8)
    5e74:	98 e0       	ldi	r25, 0x08	; 8
    5e76:	f9 2e       	mov	r15, r25
        {
            WriteAddress = addr;
    5e78:	f9 86       	std	Y+9, r15	; 0x09
            if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5e7a:	88 e0       	ldi	r24, 0x08	; 8
    5e7c:	e8 2e       	mov	r14, r24
    5e7e:	86 01       	movw	r16, r12
    5e80:	21 e0       	ldi	r18, 0x01	; 1
    5e82:	ae 01       	movw	r20, r28
    5e84:	47 5f       	subi	r20, 0xF7	; 247
    5e86:	5f 4f       	sbci	r21, 0xFF	; 255
    5e88:	64 e1       	ldi	r22, 0x14	; 20
    5e8a:	80 ed       	ldi	r24, 0xD0	; 208
    5e8c:	d3 de       	rcall	.-602    	; 0x5c34 <TWI_WritePacket>
    5e8e:	88 23       	and	r24, r24
    5e90:	61 f0       	breq	.+24     	; 0x5eaa <rtc_init+0x84>
                (uint8_t*)buf, 8) != TWI_ERROR_NoError)
            {
                printf("rtc_init ram - write error\n");
    5e92:	88 e6       	ldi	r24, 0x68	; 104
    5e94:	94 e0       	ldi	r25, 0x04	; 4
    5e96:	1f 92       	push	r1
    5e98:	9f 93       	push	r25
    5e9a:	8f 93       	push	r24
    5e9c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
                return(0);
    5ea0:	0f 90       	pop	r0
    5ea2:	0f 90       	pop	r0
    5ea4:	0f 90       	pop	r0
    5ea6:	10 e0       	ldi	r17, 0x00	; 0
    5ea8:	2d c0       	rjmp	.+90     	; 0x5f04 <rtc_init+0xde>
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
        for (addr = 8; addr < 0x3f; addr += 8)
    5eaa:	f8 e0       	ldi	r31, 0x08	; 8
    5eac:	ff 0e       	add	r15, r31
    5eae:	80 e4       	ldi	r24, 0x40	; 64
    5eb0:	f8 12       	cpse	r15, r24
                printf("rtc_init ram - write error\n");
                return(0);
            }
        }

        if(rtc_run(1) < 0)                        // START RTC
    5eb2:	e2 cf       	rjmp	.-60     	; 0x5e78 <rtc_init+0x52>
    5eb4:	81 e0       	ldi	r24, 0x01	; 1
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
    5eb8:	fb de       	rcall	.-522    	; 0x5cb0 <rtc_run>
    5eba:	97 fd       	sbrc	r25, 7
    5ebc:	cb cf       	rjmp	.-106    	; 0x5e54 <rtc_init+0x2e>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5ebe:	81 e0       	ldi	r24, 0x01	; 1
    5ec0:	90 e0       	ldi	r25, 0x00	; 0
    5ec2:	90 93 ea 18 	sts	0x18EA, r25	; 0x8018ea <rtc_ok+0x1>
    5ec6:	80 93 e9 18 	sts	0x18E9, r24	; 0x8018e9 <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5eca:	11 e0       	ldi	r17, 0x01	; 1
    5ecc:	1b c0       	rjmp	.+54     	; 0x5f04 <rtc_init+0xde>
    5ece:	80 e0       	ldi	r24, 0x00	; 0
    5ed0:	90 e0       	ldi	r25, 0x00	; 0
    5ed2:	ee de       	rcall	.-548    	; 0x5cb0 <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    5ed4:	97 fd       	sbrc	r25, 7
    5ed6:	be cf       	rjmp	.-132    	; 0x5e54 <rtc_init+0x2e>
    5ed8:	ce 01       	movw	r24, r28
    5eda:	0a 96       	adiw	r24, 0x0a	; 10
        if(!rtc_write(tmp))
    5edc:	0e 94 11 38 	call	0x7022	; 0x7022 <gmtime>
    5ee0:	47 df       	rcall	.-370    	; 0x5d70 <rtc_write>
    5ee2:	18 2f       	mov	r17, r24
    5ee4:	81 11       	cpse	r24, r1
        {
            printf("rtc _write epoch failed\n");
    5ee6:	be cf       	rjmp	.-132    	; 0x5e64 <rtc_init+0x3e>
    5ee8:	84 e8       	ldi	r24, 0x84	; 132
    5eea:	94 e0       	ldi	r25, 0x04	; 4
    5eec:	1f 92       	push	r1
    5eee:	9f 93       	push	r25
    5ef0:	8f 93       	push	r24
    5ef2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            rtc_ok = 0;
    5ef6:	10 92 ea 18 	sts	0x18EA, r1	; 0x8018ea <rtc_ok+0x1>
    5efa:	10 92 e9 18 	sts	0x18E9, r1	; 0x8018e9 <rtc_ok>
            return 0;
    5efe:	0f 90       	pop	r0
    5f00:	0f 90       	pop	r0
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    5f02:	0f 90       	pop	r0
    5f04:	81 2f       	mov	r24, r17
    5f06:	2d 96       	adiw	r28, 0x0d	; 13
    5f08:	e8 e0       	ldi	r30, 0x08	; 8
    5f0a:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

00005f0e <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    5f0e:	cf 92       	push	r12
    5f10:	df 92       	push	r13
    5f12:	ef 92       	push	r14
    5f14:	0f 93       	push	r16
    5f16:	1f 93       	push	r17
    5f18:	cf 93       	push	r28
    5f1a:	df 93       	push	r29
    5f1c:	cd b7       	in	r28, 0x3d	; 61
    5f1e:	de b7       	in	r29, 0x3e	; 62
    5f20:	29 97       	sbiw	r28, 0x09	; 9
    5f22:	0f b6       	in	r0, 0x3f	; 63
    5f24:	f8 94       	cli
    5f26:	de bf       	out	0x3e, r29	; 62
    5f28:	0f be       	out	0x3f, r0	; 63
    5f2a:	cd bf       	out	0x3d, r28	; 61
    5f2c:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    5f2e:	19 86       	std	Y+9, r1	; 0x09

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5f30:	88 e0       	ldi	r24, 0x08	; 8
    5f32:	e8 2e       	mov	r14, r24
    5f34:	8e 01       	movw	r16, r28
    5f36:	0f 5f       	subi	r16, 0xFF	; 255
    5f38:	1f 4f       	sbci	r17, 0xFF	; 255
    5f3a:	21 e0       	ldi	r18, 0x01	; 1
    5f3c:	ae 01       	movw	r20, r28
    5f3e:	47 5f       	subi	r20, 0xF7	; 247
    5f40:	5f 4f       	sbci	r21, 0xFF	; 255
    5f42:	64 e1       	ldi	r22, 0x14	; 20
    5f44:	81 ed       	ldi	r24, 0xD1	; 209
    5f46:	35 de       	rcall	.-918    	; 0x5bb2 <TWI_ReadPacket>
    5f48:	88 23       	and	r24, r24
    5f4a:	61 f0       	breq	.+24     	; 0x5f64 <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    5f4c:	87 e4       	ldi	r24, 0x47	; 71
    5f4e:	94 e0       	ldi	r25, 0x04	; 4
    5f50:	1f 92       	push	r1
    5f52:	9f 93       	push	r25
    5f54:	8f 93       	push	r24
    5f56:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return 0;
    5f5a:	0f 90       	pop	r0
    5f5c:	0f 90       	pop	r0
    5f5e:	0f 90       	pop	r0
    5f60:	80 e0       	ldi	r24, 0x00	; 0
    5f62:	33 c0       	rjmp	.+102    	; 0x5fca <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    5f64:	89 81       	ldd	r24, Y+1	; 0x01
    5f66:	8f 77       	andi	r24, 0x7F	; 127
    5f68:	9a de       	rcall	.-716    	; 0x5c9e <BCDtoBIN>
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	f6 01       	movw	r30, r12
    5f6e:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    5f70:	80 83       	st	Z, r24
    5f72:	8a 81       	ldd	r24, Y+2	; 0x02
    5f74:	8f 77       	andi	r24, 0x7F	; 127
    5f76:	93 de       	rcall	.-730    	; 0x5c9e <BCDtoBIN>
    5f78:	90 e0       	ldi	r25, 0x00	; 0
    5f7a:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    5f7c:	93 83       	std	Z+3, r25	; 0x03
    5f7e:	82 83       	std	Z+2, r24	; 0x02
    5f80:	8b 81       	ldd	r24, Y+3	; 0x03
    5f82:	8f 73       	andi	r24, 0x3F	; 63
    5f84:	8c de       	rcall	.-744    	; 0x5c9e <BCDtoBIN>
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	f6 01       	movw	r30, r12
    5f8a:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    5f8c:	84 83       	std	Z+4, r24	; 0x04
    5f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    5f90:	87 70       	andi	r24, 0x07	; 7
    5f92:	90 e0       	ldi	r25, 0x00	; 0
    5f94:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    5f96:	95 87       	std	Z+13, r25	; 0x0d
    5f98:	84 87       	std	Z+12, r24	; 0x0c
    5f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    5f9c:	8f 73       	andi	r24, 0x3F	; 63
    5f9e:	7f de       	rcall	.-770    	; 0x5c9e <BCDtoBIN>
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    5fa4:	97 83       	std	Z+7, r25	; 0x07
    5fa6:	86 83       	std	Z+6, r24	; 0x06
    5fa8:	8e 81       	ldd	r24, Y+6	; 0x06
    5faa:	8f 71       	andi	r24, 0x1F	; 31
    5fac:	78 de       	rcall	.-784    	; 0x5c9e <BCDtoBIN>
    5fae:	90 e0       	ldi	r25, 0x00	; 0
    5fb0:	01 97       	sbiw	r24, 0x01	; 1
    5fb2:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    5fb4:	91 87       	std	Z+9, r25	; 0x09
    5fb6:	80 87       	std	Z+8, r24	; 0x08
    5fb8:	8f 81       	ldd	r24, Y+7	; 0x07
    5fba:	71 de       	rcall	.-798    	; 0x5c9e <BCDtoBIN>
    5fbc:	90 e0       	ldi	r25, 0x00	; 0
    5fbe:	8c 59       	subi	r24, 0x9C	; 156
    5fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    5fc2:	f6 01       	movw	r30, r12
    5fc4:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    5fc6:	82 87       	std	Z+10, r24	; 0x0a
}
    5fc8:	81 e0       	ldi	r24, 0x01	; 1
    5fca:	29 96       	adiw	r28, 0x09	; 9
    5fcc:	0f b6       	in	r0, 0x3f	; 63
    5fce:	f8 94       	cli
    5fd0:	de bf       	out	0x3e, r29	; 62
    5fd2:	0f be       	out	0x3f, r0	; 63
    5fd4:	cd bf       	out	0x3d, r28	; 61
    5fd6:	df 91       	pop	r29
    5fd8:	cf 91       	pop	r28
    5fda:	1f 91       	pop	r17
    5fdc:	0f 91       	pop	r16
    5fde:	ef 90       	pop	r14
    5fe0:	df 90       	pop	r13
    5fe2:	cf 90       	pop	r12
    5fe4:	08 95       	ret

00005fe6 <I2C_Start>:
/*
 *  Move the cursor one character to the right.
 */
void LCD_moveCursorRight()
{
	LCD_moveCursorRightCount(1);
    5fe6:	64 e1       	ldi	r22, 0x14	; 20
    5fe8:	52 dd       	rcall	.-1372   	; 0x5a8e <TWI_StartTransmission>
    5fea:	81 11       	cpse	r24, r1
    5fec:	07 c0       	rjmp	.+14     	; 0x5ffc <I2C_Start+0x16>
    5fee:	81 e0       	ldi	r24, 0x01	; 1
    5ff0:	90 e0       	ldi	r25, 0x00	; 0
    5ff2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <LCD_ok+0x1>
    5ff6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LCD_ok>
    5ffa:	04 c0       	rjmp	.+8      	; 0x6004 <I2C_Start+0x1e>
    5ffc:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <LCD_ok+0x1>
    6000:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <LCD_ok>
    6004:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    6008:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    600c:	08 95       	ret

0000600e <I2C_Stop>:
    600e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    6012:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    6016:	89 2b       	or	r24, r25
    6018:	09 f0       	breq	.+2      	; 0x601c <I2C_Stop+0xe>
    601a:	35 cd       	rjmp	.-1430   	; 0x5a86 <TWI_StopTransmission>
    601c:	08 95       	ret

0000601e <I2C_Send>:
    601e:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <LCD_ok>
    6022:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <LCD_ok+0x1>
    6026:	21 15       	cp	r18, r1
    6028:	31 05       	cpc	r19, r1
    602a:	41 f0       	breq	.+16     	; 0x603c <I2C_Send+0x1e>
    602c:	90 dd       	rcall	.-1248   	; 0x5b4e <TWI_SendByte>
    602e:	51 e0       	ldi	r21, 0x01	; 1
    6030:	40 e0       	ldi	r20, 0x00	; 0
    6032:	89 2b       	or	r24, r25
    6034:	09 f0       	breq	.+2      	; 0x6038 <I2C_Send+0x1a>
    6036:	50 e0       	ldi	r21, 0x00	; 0
    6038:	25 2f       	mov	r18, r21
    603a:	34 2f       	mov	r19, r20
    603c:	c9 01       	movw	r24, r18
    603e:	08 95       	ret

00006040 <LCD_putb>:
    6040:	cf 93       	push	r28
    6042:	c8 2f       	mov	r28, r24
    6044:	84 ee       	ldi	r24, 0xE4	; 228
    6046:	cf df       	rcall	.-98     	; 0x5fe6 <I2C_Start>
    6048:	89 2b       	or	r24, r25
    604a:	19 f4       	brne	.+6      	; 0x6052 <LCD_putb+0x12>
    604c:	80 e0       	ldi	r24, 0x00	; 0
    604e:	90 e0       	ldi	r25, 0x00	; 0
    6050:	07 c0       	rjmp	.+14     	; 0x6060 <LCD_putb+0x20>
    6052:	8c 2f       	mov	r24, r28
    6054:	e4 df       	rcall	.-56     	; 0x601e <I2C_Send>
    6056:	89 2b       	or	r24, r25
    6058:	c9 f3       	breq	.-14     	; 0x604c <LCD_putb+0xc>
    605a:	d9 df       	rcall	.-78     	; 0x600e <I2C_Stop>
    605c:	81 e0       	ldi	r24, 0x01	; 1
    605e:	90 e0       	ldi	r25, 0x00	; 0
    6060:	cf 91       	pop	r28
    6062:	08 95       	ret

00006064 <LCD_command>:
    6064:	cf 93       	push	r28
    6066:	c8 2f       	mov	r28, r24
    6068:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    606c:	bc df       	rcall	.-136    	; 0x5fe6 <I2C_Start>
    606e:	89 2b       	or	r24, r25
    6070:	51 f0       	breq	.+20     	; 0x6086 <LCD_command+0x22>
    6072:	8c e7       	ldi	r24, 0x7C	; 124
    6074:	d4 df       	rcall	.-88     	; 0x601e <I2C_Send>
    6076:	8c 2f       	mov	r24, r28
    6078:	d2 df       	rcall	.-92     	; 0x601e <I2C_Send>
    607a:	c9 df       	rcall	.-110    	; 0x600e <I2C_Stop>
    607c:	6a e0       	ldi	r22, 0x0A	; 10
    607e:	70 e0       	ldi	r23, 0x00	; 0
    6080:	80 e0       	ldi	r24, 0x00	; 0
    6082:	90 e0       	ldi	r25, 0x00	; 0
    6084:	e6 d9       	rcall	.-3124   	; 0x5452 <delayms>
    6086:	cf 91       	pop	r28
    6088:	08 95       	ret

0000608a <LCD_specialCommand>:
    608a:	cf 93       	push	r28
    608c:	c8 2f       	mov	r28, r24
    608e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    6092:	a9 df       	rcall	.-174    	; 0x5fe6 <I2C_Start>
    6094:	89 2b       	or	r24, r25
    6096:	51 f0       	breq	.+20     	; 0x60ac <LCD_specialCommand+0x22>
    6098:	8e ef       	ldi	r24, 0xFE	; 254
    609a:	c1 df       	rcall	.-126    	; 0x601e <I2C_Send>
    609c:	8c 2f       	mov	r24, r28
    609e:	bf df       	rcall	.-130    	; 0x601e <I2C_Send>
    60a0:	b6 df       	rcall	.-148    	; 0x600e <I2C_Stop>
    60a2:	62 e3       	ldi	r22, 0x32	; 50
    60a4:	70 e0       	ldi	r23, 0x00	; 0
    60a6:	80 e0       	ldi	r24, 0x00	; 0
    60a8:	90 e0       	ldi	r25, 0x00	; 0
    60aa:	d3 d9       	rcall	.-3162   	; 0x5452 <delayms>
    60ac:	cf 91       	pop	r28
    60ae:	08 95       	ret

000060b0 <LCD_setCursor>:
    60b0:	a8 e0       	ldi	r26, 0x08	; 8
    60b2:	b0 e0       	ldi	r27, 0x00	; 0
    60b4:	ee e5       	ldi	r30, 0x5E	; 94
    60b6:	f0 e3       	ldi	r31, 0x30	; 48
    60b8:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    60bc:	98 e0       	ldi	r25, 0x08	; 8
    60be:	eb e5       	ldi	r30, 0x5B	; 91
    60c0:	f2 e0       	ldi	r31, 0x02	; 2
    60c2:	de 01       	movw	r26, r28
    60c4:	11 96       	adiw	r26, 0x01	; 1
    60c6:	01 90       	ld	r0, Z+
    60c8:	0d 92       	st	X+, r0
    60ca:	9a 95       	dec	r25
    60cc:	e1 f7       	brne	.-8      	; 0x60c6 <LCD_setCursor+0x16>
    60ce:	64 30       	cpi	r22, 0x04	; 4
    60d0:	08 f0       	brcs	.+2      	; 0x60d4 <LCD_setCursor+0x24>
    60d2:	63 e0       	ldi	r22, 0x03	; 3
    60d4:	fe 01       	movw	r30, r28
    60d6:	31 96       	adiw	r30, 0x01	; 1
    60d8:	e6 0f       	add	r30, r22
    60da:	f1 1d       	adc	r31, r1
    60dc:	e6 0f       	add	r30, r22
    60de:	f1 1d       	adc	r31, r1
    60e0:	90 81       	ld	r25, Z
    60e2:	89 0f       	add	r24, r25
    60e4:	80 68       	ori	r24, 0x80	; 128
    60e6:	d1 df       	rcall	.-94     	; 0x608a <LCD_specialCommand>
    60e8:	28 96       	adiw	r28, 0x08	; 8
    60ea:	e2 e0       	ldi	r30, 0x02	; 2
    60ec:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

000060f0 <LCD_pos>:
    60f0:	ea e0       	ldi	r30, 0x0A	; 10
    60f2:	f1 e0       	ldi	r31, 0x01	; 1
    60f4:	28 2f       	mov	r18, r24
    60f6:	30 e0       	ldi	r19, 0x00	; 0
    60f8:	31 83       	std	Z+1, r19	; 0x01
    60fa:	20 83       	st	Z, r18
    60fc:	26 2f       	mov	r18, r22
    60fe:	30 e0       	ldi	r19, 0x00	; 0
    6100:	33 83       	std	Z+3, r19	; 0x03
    6102:	22 83       	std	Z+2, r18	; 0x02
    6104:	d5 cf       	rjmp	.-86     	; 0x60b0 <LCD_setCursor>
    6106:	08 95       	ret

00006108 <LCD_clear>:
    6108:	8d e2       	ldi	r24, 0x2D	; 45
    610a:	ac df       	rcall	.-168    	; 0x6064 <LCD_command>
    610c:	60 e0       	ldi	r22, 0x00	; 0
    610e:	80 e0       	ldi	r24, 0x00	; 0
    6110:	ef df       	rcall	.-34     	; 0x60f0 <LCD_pos>
    6112:	6a e0       	ldi	r22, 0x0A	; 10
    6114:	70 e0       	ldi	r23, 0x00	; 0
    6116:	80 e0       	ldi	r24, 0x00	; 0
    6118:	90 e0       	ldi	r25, 0x00	; 0
    611a:	9b c9       	rjmp	.-3274   	; 0x5452 <delayms>
    611c:	08 95       	ret

0000611e <LCD_setFastBacklightRGB>:
} // moveCursorRight


//New command - set backlight with LCD messages or delaymss
void LCD_setFastBacklightRGB(byte r, byte g, byte b)
{
    611e:	1f 93       	push	r17
    6120:	cf 93       	push	r28
    6122:	df 93       	push	r29
    6124:	18 2f       	mov	r17, r24
    6126:	d6 2f       	mov	r29, r22
    6128:	c4 2f       	mov	r28, r20
  //send commands to the display to set backlights
  if( !I2C_Start(lcd_address) )
    612a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    612e:	5b df       	rcall	.-330    	; 0x5fe6 <I2C_Start>
    6130:	89 2b       	or	r24, r25
	return;
  I2C_Send(SETTING_COMMAND); //Send special command character
    6132:	81 f0       	breq	.+32     	; 0x6154 <LCD_setFastBacklightRGB+0x36>
  I2C_Send(SET_RGB_COMMAND); //Send the set RGB character '+' or plus
    6134:	8c e7       	ldi	r24, 0x7C	; 124
  I2C_Send(r);               //Send the red value
  I2C_Send(g);               //Send the green value
    6136:	73 df       	rcall	.-282    	; 0x601e <I2C_Send>
    6138:	8b e2       	ldi	r24, 0x2B	; 43
  I2C_Send(b);               //Send the blue value
    613a:	71 df       	rcall	.-286    	; 0x601e <I2C_Send>
    613c:	81 2f       	mov	r24, r17
  I2C_Stop();         //Stop transmission
    613e:	6f df       	rcall	.-290    	; 0x601e <I2C_Send>
    6140:	8d 2f       	mov	r24, r29
  delayms(10);
    6142:	6d df       	rcall	.-294    	; 0x601e <I2C_Send>
    6144:	8c 2f       	mov	r24, r28
    6146:	6b df       	rcall	.-298    	; 0x601e <I2C_Send>
    6148:	62 df       	rcall	.-316    	; 0x600e <I2C_Stop>
    614a:	6a e0       	ldi	r22, 0x0A	; 10
    614c:	70 e0       	ldi	r23, 0x00	; 0
} // setFastBacklight
    614e:	80 e0       	ldi	r24, 0x00	; 0
    6150:	90 e0       	ldi	r25, 0x00	; 0
    6152:	7f d9       	rcall	.-3330   	; 0x5452 <delayms>
    6154:	df 91       	pop	r29
    6156:	cf 91       	pop	r28
    6158:	1f 91       	pop	r17
    615a:	08 95       	ret

0000615c <LCD_init>:
 *
 */
bool LCD_init(uint8_t addr)
{
  
  if( !I2C_Start(lcd_address = addr) )
    615c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <lcd_address>
    6160:	42 df       	rcall	.-380    	; 0x5fe6 <I2C_Start>
    6162:	00 97       	sbiw	r24, 0x00	; 0
	return 0;

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    6164:	61 f1       	breq	.+88     	; 0x61be <LCD_init+0x62>
    6166:	8e ef       	ldi	r24, 0xFE	; 254
  I2C_Send(LCD_DISPLAYCONTROL | _displayControl); //Send the display command
    6168:	5a df       	rcall	.-332    	; 0x601e <I2C_Send>
    616a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_displayControl>

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    616e:	88 60       	ori	r24, 0x08	; 8
    6170:	56 df       	rcall	.-340    	; 0x601e <I2C_Send>
  I2C_Send(LCD_ENTRYMODESET | _displayMode);      //Send the entry mode command
    6172:	8e ef       	ldi	r24, 0xFE	; 254
    6174:	54 df       	rcall	.-344    	; 0x601e <I2C_Send>

  I2C_Send(SETTING_COMMAND);                      //Put LCD into setting mode
    6176:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_displayMode>
  I2C_Send(CLEAR_COMMAND);                        //Send clear display command

  I2C_Send(SETTING_COMMAND);                      //Send special command character
    617a:	84 60       	ori	r24, 0x04	; 4
  I2C_Send(DISABLE_SYSTEM_MESSAGE_DISPLAY);       //Send the set '.' character
    617c:	50 df       	rcall	.-352    	; 0x601e <I2C_Send>
    617e:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    6180:	4e df       	rcall	.-356    	; 0x601e <I2C_Send>
    6182:	8d e2       	ldi	r24, 0x2D	; 45
  I2C_Send(LCD_SETDDRAMADDR | 0);				// HOME 0,0
    6184:	4c df       	rcall	.-360    	; 0x601e <I2C_Send>
    6186:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Stop();
    6188:	4a df       	rcall	.-364    	; 0x601e <I2C_Send>
    618a:	8f e2       	ldi	r24, 0x2F	; 47
  delayms(50);                                      //let things settle a bit
    618c:	48 df       	rcall	.-368    	; 0x601e <I2C_Send>
    618e:	8e ef       	ldi	r24, 0xFE	; 254
    6190:	46 df       	rcall	.-372    	; 0x601e <I2C_Send>
    6192:	80 e8       	ldi	r24, 0x80	; 128
    6194:	44 df       	rcall	.-376    	; 0x601e <I2C_Send>
    6196:	3b df       	rcall	.-394    	; 0x600e <I2C_Stop>

  LCD_setFastBacklightRGB ( 0xC0, 0xC0, 0xC0 );
    6198:	62 e3       	ldi	r22, 0x32	; 50
    619a:	70 e0       	ldi	r23, 0x00	; 0
    619c:	80 e0       	ldi	r24, 0x00	; 0
    619e:	90 e0       	ldi	r25, 0x00	; 0
    61a0:	58 d9       	rcall	.-3408   	; 0x5452 <delayms>

  lcd.xpos = 0;
    61a2:	40 ec       	ldi	r20, 0xC0	; 192
    61a4:	60 ec       	ldi	r22, 0xC0	; 192
    61a6:	80 ec       	ldi	r24, 0xC0	; 192
    61a8:	ba df       	rcall	.-140    	; 0x611e <LCD_setFastBacklightRGB>
  lcd.ypos = 0;
    61aa:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    61ae:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>

  return(1);
    61b2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
} //init
    61b6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    61ba:	81 e0       	ldi	r24, 0x01	; 1
    61bc:	90 e0       	ldi	r25, 0x00	; 0
    61be:	08 95       	ret

000061c0 <lcd_cleareol>:
	{
		LCD_putb(' ');
		rem--;
	}
	LCD_pos(lcd.xpos = 0,lcd.ypos);
}
    61c0:	cf 93       	push	r28
    61c2:	df 93       	push	r29
    61c4:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <lcd+0x4>
    61c8:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <lcd+0x5>
    61cc:	21 97       	sbiw	r28, 0x01	; 1
    61ce:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    61d2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    61d6:	c8 1b       	sub	r28, r24
    61d8:	d9 0b       	sbc	r29, r25
    61da:	1c 16       	cp	r1, r28
    61dc:	1d 06       	cpc	r1, r29
    61de:	24 f4       	brge	.+8      	; 0x61e8 <lcd_cleareol+0x28>
    61e0:	80 e2       	ldi	r24, 0x20	; 32
    61e2:	2e df       	rcall	.-420    	; 0x6040 <LCD_putb>
    61e4:	21 97       	sbiw	r28, 0x01	; 1
    61e6:	f9 cf       	rjmp	.-14     	; 0x61da <lcd_cleareol+0x1a>
    61e8:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    61ec:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    61f0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    61f4:	01 97       	sbiw	r24, 0x01	; 1
    61f6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    61fa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
    61fe:	78 df       	rcall	.-272    	; 0x60f0 <LCD_pos>
    6200:	df 91       	pop	r29
    6202:	cf 91       	pop	r28
    6204:	08 95       	ret

00006206 <lcd_putch>:

/// @brief  put character 
/// @param[in] c: character
/// return: void
void lcd_putch(int c)
{
    6206:	cf 93       	push	r28
    6208:	df 93       	push	r29
	int rem;

	if(c < 0 || c > 0x7e)
    620a:	8f 37       	cpi	r24, 0x7F	; 127
    620c:	91 05       	cpc	r25, r1
    620e:	08 f0       	brcs	.+2      	; 0x6212 <lcd_putch+0xc>
    6210:	50 c0       	rjmp	.+160    	; 0x62b2 <lcd_putch+0xac>
    6212:	ec 01       	movw	r28, r24
		return;

	// Normal visible characters
	if(c >= ' ')
    6214:	80 32       	cpi	r24, 0x20	; 32
    6216:	91 05       	cpc	r25, r1
    6218:	4c f1       	brlt	.+82     	; 0x626c <lcd_putch+0x66>
	{
		rem = (lcd.w - 1 - lcd.xpos);
		if( rem <= 0 )
    621a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    621e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    6222:	01 97       	sbiw	r24, 0x01	; 1
    6224:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <lcd>
    6228:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <lcd+0x1>
    622c:	82 1b       	sub	r24, r18
    622e:	93 0b       	sbc	r25, r19
    6230:	18 16       	cp	r1, r24
    6232:	19 06       	cpc	r1, r25
    6234:	7c f0       	brlt	.+30     	; 0x6254 <lcd_putch+0x4e>
		{
			LCD_pos(++lcd.ypos,lcd.xpos=0);
    6236:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    623a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    623e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lcd+0x2>
    6242:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <lcd+0x3>
    6246:	01 96       	adiw	r24, 0x01	; 1
    6248:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <lcd+0x3>
    624c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lcd+0x2>
    6250:	60 e0       	ldi	r22, 0x00	; 0
		}
		(void) LCD_putb(c);
    6252:	4e df       	rcall	.-356    	; 0x60f0 <LCD_pos>
    6254:	8c 2f       	mov	r24, r28
		// uart_putchar(c,0);
		lcd.xpos++;
    6256:	f4 de       	rcall	.-536    	; 0x6040 <LCD_putb>
    6258:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    625c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    6260:	01 96       	adiw	r24, 0x01	; 1
    6262:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    6266:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
		return;
	}

	// Control characters
	if(c == '\n')
    626a:	23 c0       	rjmp	.+70     	; 0x62b2 <lcd_putch+0xac>
    626c:	8a 30       	cpi	r24, 0x0A	; 10
	{
		// uart_putchar(c,0);
		lcd_cleareol();
    626e:	91 05       	cpc	r25, r1
    6270:	91 f4       	brne	.+36     	; 0x6296 <lcd_putch+0x90>
		++lcd.ypos;
		lcd.ypos &= 3;
    6272:	a6 df       	rcall	.-180    	; 0x61c0 <lcd_cleareol>
    6274:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    6278:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <lcd+0x3>
    627c:	6f 5f       	subi	r22, 0xFF	; 255
    627e:	7f 4f       	sbci	r23, 0xFF	; 255
    6280:	63 70       	andi	r22, 0x03	; 3
    6282:	77 27       	eor	r23, r23
    6284:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <lcd+0x3>
    6288:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <lcd+0x2>
		LCD_pos(lcd.xpos=0,lcd.ypos);
    628c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    6290:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
	}

	if(c == '\f')
    6294:	0c c0       	rjmp	.+24     	; 0x62ae <lcd_putch+0xa8>
	{
		LCD_clear();
    6296:	0c 97       	sbiw	r24, 0x0c	; 12
    6298:	61 f4       	brne	.+24     	; 0x62b2 <lcd_putch+0xac>
		LCD_pos(lcd.xpos=0,lcd.ypos=0);
    629a:	36 df       	rcall	.-404    	; 0x6108 <LCD_clear>
    629c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
    62a0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    62a4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    62a8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    62ac:	60 e0       	ldi	r22, 0x00	; 0
    62ae:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    62b0:	1f df       	rcall	.-450    	; 0x60f0 <LCD_pos>
    62b2:	df 91       	pop	r29
    62b4:	cf 91       	pop	r28
    62b6:	08 95       	ret

000062b8 <_putc_win>:


// We do not use the printf structure
static void _putc_win(struct _printf_t *p, char ch)
{
    62b8:	fc 01       	movw	r30, r24
	p->sent++;
    62ba:	26 81       	ldd	r18, Z+6	; 0x06
    62bc:	37 81       	ldd	r19, Z+7	; 0x07
    62be:	2f 5f       	subi	r18, 0xFF	; 255
    62c0:	3f 4f       	sbci	r19, 0xFF	; 255
    62c2:	37 83       	std	Z+7, r19	; 0x07
    62c4:	26 83       	std	Z+6, r18	; 0x06
	lcd_putch(ch);
    62c6:	86 2f       	mov	r24, r22
    62c8:	90 e0       	ldi	r25, 0x00	; 0
    62ca:	9d cf       	rjmp	.-198    	; 0x6206 <lcd_putch>
    62cc:	08 95       	ret

000062ce <lcd_printf>:
/// @param[in] fmt: printf forat string
/// @param[in] ...: vararg list or arguments
/// @return size of string
MEMSPACE
int lcd_printf(const char *fmt, ... )
{
    62ce:	a8 e0       	ldi	r26, 0x08	; 8
    62d0:	b0 e0       	ldi	r27, 0x00	; 0
    62d2:	ed e6       	ldi	r30, 0x6D	; 109
    62d4:	f1 e3       	ldi	r31, 0x31	; 49
    62d6:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    62da:	9e 01       	movw	r18, r28
    62dc:	23 5f       	subi	r18, 0xF3	; 243
    62de:	3f 4f       	sbci	r19, 0xFF	; 255
    62e0:	f9 01       	movw	r30, r18
    62e2:	41 91       	ld	r20, Z+
    62e4:	51 91       	ld	r21, Z+
    62e6:	9f 01       	movw	r18, r30
    printf_t fn;

    fn.put = _putc_win;
    62e8:	8c e5       	ldi	r24, 0x5C	; 92
    62ea:	91 e3       	ldi	r25, 0x31	; 49
    62ec:	9a 83       	std	Y+2, r25	; 0x02
    62ee:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    62f0:	18 86       	std	Y+8, r1	; 0x08
    62f2:	1f 82       	std	Y+7, r1	; 0x07

    va_list va;
    va_start(va, fmt);

    _printf_fn(&fn, fmt, va);
    62f4:	60 e8       	ldi	r22, 0x80	; 128
    62f6:	ce 01       	movw	r24, r28
    62f8:	01 96       	adiw	r24, 0x01	; 1
    62fa:	0e 94 48 42 	call	0x8490	; 0x8490 <_printf_fn>

    va_end(va);

	return(fn.sent);

}
    62fe:	8f 81       	ldd	r24, Y+7	; 0x07
    6300:	98 85       	ldd	r25, Y+8	; 0x08
    6302:	28 96       	adiw	r28, 0x08	; 8
    6304:	e2 e0       	ldi	r30, 0x02	; 2
    6306:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

0000630a <sep>:
    {
        if(strncmp(str,pat,len) == 0 )
            return(len);
    }
    return(0);
}
    630a:	84 e0       	ldi	r24, 0x04	; 4
    630c:	95 e0       	ldi	r25, 0x05	; 5
    630e:	1f 92       	push	r1
    6310:	9f 93       	push	r25
    6312:	8f 93       	push	r24
    6314:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    6318:	0f 90       	pop	r0
    631a:	0f 90       	pop	r0
    631c:	0f 90       	pop	r0
    631e:	08 95       	ret

00006320 <islower>:
    6320:	9c 01       	movw	r18, r24
    6322:	21 56       	subi	r18, 0x61	; 97
    6324:	31 09       	sbc	r19, r1
    6326:	81 e0       	ldi	r24, 0x01	; 1
    6328:	90 e0       	ldi	r25, 0x00	; 0
    632a:	2a 31       	cpi	r18, 0x1A	; 26
    632c:	31 05       	cpc	r19, r1
    632e:	10 f0       	brcs	.+4      	; 0x6334 <islower+0x14>
    6330:	80 e0       	ldi	r24, 0x00	; 0
    6332:	90 e0       	ldi	r25, 0x00	; 0
    6334:	08 95       	ret

00006336 <toupper>:
    6336:	cf 93       	push	r28
    6338:	df 93       	push	r29
    633a:	ec 01       	movw	r28, r24
    633c:	f1 df       	rcall	.-30     	; 0x6320 <islower>
    633e:	89 2b       	or	r24, r25
    6340:	19 f0       	breq	.+6      	; 0x6348 <toupper+0x12>
    6342:	ce 01       	movw	r24, r28
    6344:	80 97       	sbiw	r24, 0x20	; 32
    6346:	01 c0       	rjmp	.+2      	; 0x634a <toupper+0x14>
    6348:	ce 01       	movw	r24, r28
    634a:	df 91       	pop	r29
    634c:	cf 91       	pop	r28
    634e:	08 95       	ret

00006350 <strcpy>:
    6350:	fc 01       	movw	r30, r24
    6352:	db 01       	movw	r26, r22
    6354:	2d 91       	ld	r18, X+
    6356:	bd 01       	movw	r22, r26
    6358:	01 96       	adiw	r24, 0x01	; 1
    635a:	22 23       	and	r18, r18
    635c:	11 f0       	breq	.+4      	; 0x6362 <strcpy+0x12>
    635e:	20 83       	st	Z, r18
    6360:	f7 cf       	rjmp	.-18     	; 0x6350 <strcpy>
    6362:	10 82       	st	Z, r1
    6364:	08 95       	ret

00006366 <strncpy>:
    6366:	db 01       	movw	r26, r22
    6368:	fc 01       	movw	r30, r24
    636a:	2d 91       	ld	r18, X+
    636c:	21 11       	cpse	r18, r1
    636e:	03 c0       	rjmp	.+6      	; 0x6376 <strncpy+0x10>
    6370:	4e 0f       	add	r20, r30
    6372:	5f 1f       	adc	r21, r31
    6374:	08 c0       	rjmp	.+16     	; 0x6386 <strncpy+0x20>
    6376:	41 15       	cp	r20, r1
    6378:	51 05       	cpc	r21, r1
    637a:	21 f0       	breq	.+8      	; 0x6384 <strncpy+0x1e>
    637c:	21 93       	st	Z+, r18
    637e:	41 50       	subi	r20, 0x01	; 1
    6380:	51 09       	sbc	r21, r1
    6382:	f3 cf       	rjmp	.-26     	; 0x636a <strncpy+0x4>
    6384:	08 95       	ret
    6386:	4e 17       	cp	r20, r30
    6388:	5f 07       	cpc	r21, r31
    638a:	11 f0       	breq	.+4      	; 0x6390 <strncpy+0x2a>
    638c:	11 92       	st	Z+, r1
    638e:	fb cf       	rjmp	.-10     	; 0x6386 <strncpy+0x20>
    6390:	08 95       	ret

00006392 <strcat>:
    6392:	cf 93       	push	r28
    6394:	df 93       	push	r29
    6396:	d8 2f       	mov	r29, r24
    6398:	c9 2f       	mov	r28, r25
    639a:	28 2f       	mov	r18, r24
    639c:	39 2f       	mov	r19, r25
    639e:	c9 01       	movw	r24, r18
    63a0:	2f 5f       	subi	r18, 0xFF	; 255
    63a2:	3f 4f       	sbci	r19, 0xFF	; 255
    63a4:	fc 01       	movw	r30, r24
    63a6:	40 81       	ld	r20, Z
    63a8:	41 11       	cpse	r20, r1
    63aa:	f9 cf       	rjmp	.-14     	; 0x639e <strcat+0xc>
    63ac:	d1 df       	rcall	.-94     	; 0x6350 <strcpy>
    63ae:	8d 2f       	mov	r24, r29
    63b0:	9c 2f       	mov	r25, r28
    63b2:	df 91       	pop	r29
    63b4:	cf 91       	pop	r28
    63b6:	08 95       	ret

000063b8 <reverse>:
    63b8:	fc 01       	movw	r30, r24
    63ba:	01 90       	ld	r0, Z+
    63bc:	00 20       	and	r0, r0
    63be:	e9 f7       	brne	.-6      	; 0x63ba <reverse+0x2>
    63c0:	31 97       	sbiw	r30, 0x01	; 1
    63c2:	e8 1b       	sub	r30, r24
    63c4:	f9 0b       	sbc	r31, r25
    63c6:	af 01       	movw	r20, r30
    63c8:	55 95       	asr	r21
    63ca:	47 95       	ror	r20
    63cc:	e8 0f       	add	r30, r24
    63ce:	f9 1f       	adc	r31, r25
    63d0:	dc 01       	movw	r26, r24
    63d2:	9d 01       	movw	r18, r26
    63d4:	28 1b       	sub	r18, r24
    63d6:	39 0b       	sbc	r19, r25
    63d8:	24 17       	cp	r18, r20
    63da:	35 07       	cpc	r19, r21
    63dc:	2c f4       	brge	.+10     	; 0x63e8 <reverse+0x30>
    63de:	22 91       	ld	r18, -Z
    63e0:	3c 91       	ld	r19, X
    63e2:	30 83       	st	Z, r19
    63e4:	2d 93       	st	X+, r18
    63e6:	f5 cf       	rjmp	.-22     	; 0x63d2 <reverse+0x1a>
    63e8:	08 95       	ret

000063ea <strupper>:
    63ea:	cf 93       	push	r28
    63ec:	df 93       	push	r29
    63ee:	ec 01       	movw	r28, r24
    63f0:	88 81       	ld	r24, Y
    63f2:	88 23       	and	r24, r24
    63f4:	21 f0       	breq	.+8      	; 0x63fe <strupper+0x14>
    63f6:	90 e0       	ldi	r25, 0x00	; 0
    63f8:	9e df       	rcall	.-196    	; 0x6336 <toupper>
    63fa:	89 93       	st	Y+, r24
    63fc:	f9 cf       	rjmp	.-14     	; 0x63f0 <strupper+0x6>
    63fe:	df 91       	pop	r29
    6400:	cf 91       	pop	r28
    6402:	08 95       	ret

00006404 <trim_tail>:
    6404:	00 97       	sbiw	r24, 0x00	; 0
    6406:	69 f0       	breq	.+26     	; 0x6422 <trim_tail+0x1e>
    6408:	fc 01       	movw	r30, r24
    640a:	01 90       	ld	r0, Z+
    640c:	00 20       	and	r0, r0
    640e:	e9 f7       	brne	.-6      	; 0x640a <trim_tail+0x6>
    6410:	31 97       	sbiw	r30, 0x01	; 1
    6412:	e8 17       	cp	r30, r24
    6414:	f9 07       	cpc	r31, r25
    6416:	29 f0       	breq	.+10     	; 0x6422 <trim_tail+0x1e>
    6418:	22 91       	ld	r18, -Z
    641a:	21 32       	cpi	r18, 0x21	; 33
    641c:	10 f4       	brcc	.+4      	; 0x6422 <trim_tail+0x1e>
    641e:	10 82       	st	Z, r1
    6420:	f8 cf       	rjmp	.-16     	; 0x6412 <trim_tail+0xe>
    6422:	08 95       	ret

00006424 <skipspaces>:
    6424:	00 97       	sbiw	r24, 0x00	; 0
    6426:	39 f0       	breq	.+14     	; 0x6436 <skipspaces+0x12>
    6428:	fc 01       	movw	r30, r24
    642a:	cf 01       	movw	r24, r30
    642c:	21 91       	ld	r18, Z+
    642e:	20 32       	cpi	r18, 0x20	; 32
    6430:	e1 f3       	breq	.-8      	; 0x642a <skipspaces+0x6>
    6432:	29 30       	cpi	r18, 0x09	; 9
    6434:	d1 f3       	breq	.-12     	; 0x642a <skipspaces+0x6>
    6436:	08 95       	ret

00006438 <strcmp>:
    6438:	dc 01       	movw	r26, r24
    643a:	fb 01       	movw	r30, r22
    643c:	2d 91       	ld	r18, X+
    643e:	41 91       	ld	r20, Z+
    6440:	50 e0       	ldi	r21, 0x00	; 0
    6442:	30 e0       	ldi	r19, 0x00	; 0
    6444:	c9 01       	movw	r24, r18
    6446:	84 1b       	sub	r24, r20
    6448:	95 0b       	sbc	r25, r21
    644a:	11 f4       	brne	.+4      	; 0x6450 <strcmp+0x18>
    644c:	45 2b       	or	r20, r21
    644e:	b1 f7       	brne	.-20     	; 0x643c <strcmp+0x4>
    6450:	08 95       	ret

00006452 <strncmp>:
    6452:	fc 01       	movw	r30, r24
    6454:	db 01       	movw	r26, r22
    6456:	48 0f       	add	r20, r24
    6458:	59 1f       	adc	r21, r25
    645a:	e4 17       	cp	r30, r20
    645c:	f5 07       	cpc	r31, r21
    645e:	59 f0       	breq	.+22     	; 0x6476 <strncmp+0x24>
    6460:	21 91       	ld	r18, Z+
    6462:	6d 91       	ld	r22, X+
    6464:	70 e0       	ldi	r23, 0x00	; 0
    6466:	30 e0       	ldi	r19, 0x00	; 0
    6468:	c9 01       	movw	r24, r18
    646a:	86 1b       	sub	r24, r22
    646c:	97 0b       	sbc	r25, r23
    646e:	29 f4       	brne	.+10     	; 0x647a <strncmp+0x28>
    6470:	67 2b       	or	r22, r23
    6472:	99 f7       	brne	.-26     	; 0x645a <strncmp+0x8>
    6474:	02 c0       	rjmp	.+4      	; 0x647a <strncmp+0x28>
    6476:	80 e0       	ldi	r24, 0x00	; 0
    6478:	90 e0       	ldi	r25, 0x00	; 0
    647a:	08 95       	ret

0000647c <strcasecmp>:
    647c:	ef 92       	push	r14
    647e:	ff 92       	push	r15
    6480:	0f 93       	push	r16
    6482:	1f 93       	push	r17
    6484:	cf 93       	push	r28
    6486:	df 93       	push	r29
    6488:	7c 01       	movw	r14, r24
    648a:	8b 01       	movw	r16, r22
    648c:	f7 01       	movw	r30, r14
    648e:	81 91       	ld	r24, Z+
    6490:	7f 01       	movw	r14, r30
    6492:	90 e0       	ldi	r25, 0x00	; 0
    6494:	50 df       	rcall	.-352    	; 0x6336 <toupper>
    6496:	ec 01       	movw	r28, r24
    6498:	f8 01       	movw	r30, r16
    649a:	81 91       	ld	r24, Z+
    649c:	8f 01       	movw	r16, r30
    649e:	90 e0       	ldi	r25, 0x00	; 0
    64a0:	4a df       	rcall	.-364    	; 0x6336 <toupper>
    64a2:	9c 01       	movw	r18, r24
    64a4:	ce 01       	movw	r24, r28
    64a6:	82 1b       	sub	r24, r18
    64a8:	93 0b       	sbc	r25, r19
    64aa:	11 f4       	brne	.+4      	; 0x64b0 <strcasecmp+0x34>
    64ac:	23 2b       	or	r18, r19
    64ae:	71 f7       	brne	.-36     	; 0x648c <strcasecmp+0x10>
    64b0:	cd b7       	in	r28, 0x3d	; 61
    64b2:	de b7       	in	r29, 0x3e	; 62
    64b4:	e6 e0       	ldi	r30, 0x06	; 6
    64b6:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

000064ba <strncasecmp>:
    64ba:	a0 e0       	ldi	r26, 0x00	; 0
    64bc:	b0 e0       	ldi	r27, 0x00	; 0
    64be:	e3 e6       	ldi	r30, 0x63	; 99
    64c0:	f2 e3       	ldi	r31, 0x32	; 50
    64c2:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    64c6:	8c 01       	movw	r16, r24
    64c8:	7b 01       	movw	r14, r22
    64ca:	6c 01       	movw	r12, r24
    64cc:	c4 0e       	add	r12, r20
    64ce:	d5 1e       	adc	r13, r21
    64d0:	0c 15       	cp	r16, r12
    64d2:	1d 05       	cpc	r17, r13
    64d4:	99 f0       	breq	.+38     	; 0x64fc <strncasecmp+0x42>
    64d6:	f8 01       	movw	r30, r16
    64d8:	81 91       	ld	r24, Z+
    64da:	8f 01       	movw	r16, r30
    64dc:	90 e0       	ldi	r25, 0x00	; 0
    64de:	2b df       	rcall	.-426    	; 0x6336 <toupper>
    64e0:	ec 01       	movw	r28, r24
    64e2:	f7 01       	movw	r30, r14
    64e4:	81 91       	ld	r24, Z+
    64e6:	7f 01       	movw	r14, r30
    64e8:	90 e0       	ldi	r25, 0x00	; 0
    64ea:	25 df       	rcall	.-438    	; 0x6336 <toupper>
    64ec:	9c 01       	movw	r18, r24
    64ee:	ce 01       	movw	r24, r28
    64f0:	82 1b       	sub	r24, r18
    64f2:	93 0b       	sbc	r25, r19
    64f4:	29 f4       	brne	.+10     	; 0x6500 <strncasecmp+0x46>
    64f6:	23 2b       	or	r18, r19
    64f8:	59 f7       	brne	.-42     	; 0x64d0 <strncasecmp+0x16>
    64fa:	02 c0       	rjmp	.+4      	; 0x6500 <strncasecmp+0x46>
    64fc:	80 e0       	ldi	r24, 0x00	; 0
    64fe:	90 e0       	ldi	r25, 0x00	; 0
    6500:	cd b7       	in	r28, 0x3d	; 61
    6502:	de b7       	in	r29, 0x3e	; 62
    6504:	e8 e0       	ldi	r30, 0x08	; 8
    6506:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

0000650a <MATCH>:
    650a:	cf 93       	push	r28
    650c:	df 93       	push	r29
    650e:	fb 01       	movw	r30, r22
    6510:	01 90       	ld	r0, Z+
    6512:	00 20       	and	r0, r0
    6514:	e9 f7       	brne	.-6      	; 0x6510 <MATCH+0x6>
    6516:	31 97       	sbiw	r30, 0x01	; 1
    6518:	ef 01       	movw	r28, r30
    651a:	c6 1b       	sub	r28, r22
    651c:	d7 0b       	sbc	r29, r23
    651e:	8c df       	rcall	.-232    	; 0x6438 <strcmp>
    6520:	89 2b       	or	r24, r25
    6522:	11 f4       	brne	.+4      	; 0x6528 <MATCH+0x1e>
    6524:	ce 01       	movw	r24, r28
    6526:	02 c0       	rjmp	.+4      	; 0x652c <MATCH+0x22>
    6528:	80 e0       	ldi	r24, 0x00	; 0
    652a:	90 e0       	ldi	r25, 0x00	; 0
    652c:	df 91       	pop	r29
    652e:	cf 91       	pop	r28
    6530:	08 95       	ret

00006532 <MATCHARGS>:
    6532:	ef 92       	push	r14
    6534:	ff 92       	push	r15
    6536:	0f 93       	push	r16
    6538:	1f 93       	push	r17
    653a:	cf 93       	push	r28
    653c:	df 93       	push	r29
    653e:	f6 2e       	mov	r15, r22
    6540:	e7 2e       	mov	r14, r23
    6542:	ea 01       	movw	r28, r20
    6544:	89 01       	movw	r16, r18
    6546:	e1 df       	rcall	.-62     	; 0x650a <MATCH>
    6548:	00 97       	sbiw	r24, 0x00	; 0
    654a:	e9 f0       	breq	.+58     	; 0x6586 <MATCHARGS+0x54>
    654c:	0c 17       	cp	r16, r28
    654e:	1d 07       	cpc	r17, r29
    6550:	c4 f4       	brge	.+48     	; 0x6582 <MATCHARGS+0x50>
    6552:	1f 93       	push	r17
    6554:	0f 93       	push	r16
    6556:	df 93       	push	r29
    6558:	cf 93       	push	r28
    655a:	ef 92       	push	r14
    655c:	ff 92       	push	r15
    655e:	8e ed       	ldi	r24, 0xDE	; 222
    6560:	94 e0       	ldi	r25, 0x04	; 4
    6562:	1f 92       	push	r1
    6564:	9f 93       	push	r25
    6566:	8f 93       	push	r24
    6568:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    656c:	8d b7       	in	r24, 0x3d	; 61
    656e:	9e b7       	in	r25, 0x3e	; 62
    6570:	09 96       	adiw	r24, 0x09	; 9
    6572:	0f b6       	in	r0, 0x3f	; 63
    6574:	f8 94       	cli
    6576:	9e bf       	out	0x3e, r25	; 62
    6578:	0f be       	out	0x3f, r0	; 63
    657a:	8d bf       	out	0x3d, r24	; 61
    657c:	80 e0       	ldi	r24, 0x00	; 0
    657e:	90 e0       	ldi	r25, 0x00	; 0
    6580:	02 c0       	rjmp	.+4      	; 0x6586 <MATCHARGS+0x54>
    6582:	81 e0       	ldi	r24, 0x01	; 1
    6584:	90 e0       	ldi	r25, 0x00	; 0
    6586:	cd b7       	in	r28, 0x3d	; 61
    6588:	de b7       	in	r29, 0x3e	; 62
    658a:	e6 e0       	ldi	r30, 0x06	; 6
    658c:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

00006590 <MATCHI>:
    6590:	cf 93       	push	r28
    6592:	df 93       	push	r29
    6594:	fb 01       	movw	r30, r22
    6596:	01 90       	ld	r0, Z+
    6598:	00 20       	and	r0, r0
    659a:	e9 f7       	brne	.-6      	; 0x6596 <MATCHI+0x6>
    659c:	31 97       	sbiw	r30, 0x01	; 1
    659e:	ef 01       	movw	r28, r30
    65a0:	c6 1b       	sub	r28, r22
    65a2:	d7 0b       	sbc	r29, r23
    65a4:	6b df       	rcall	.-298    	; 0x647c <strcasecmp>
    65a6:	89 2b       	or	r24, r25
    65a8:	11 f4       	brne	.+4      	; 0x65ae <MATCHI+0x1e>
    65aa:	ce 01       	movw	r24, r28
    65ac:	02 c0       	rjmp	.+4      	; 0x65b2 <MATCHI+0x22>
    65ae:	80 e0       	ldi	r24, 0x00	; 0
    65b0:	90 e0       	ldi	r25, 0x00	; 0
    65b2:	df 91       	pop	r29
    65b4:	cf 91       	pop	r28
    65b6:	08 95       	ret

000065b8 <MATCHI_LEN>:
///@return string lenth on match.
///@return 0 on no match.
///@warning Matches sub strings so be caeful.
MEMSPACE
int MATCHI_LEN(char *str, char *pat)
{
    65b8:	cf 93       	push	r28
    65ba:	df 93       	push	r29
    int len;

    if(!str || !pat)
    65bc:	00 97       	sbiw	r24, 0x00	; 0
    65be:	89 f0       	breq	.+34     	; 0x65e2 <MATCHI_LEN+0x2a>
    65c0:	61 15       	cp	r22, r1
    65c2:	71 05       	cpc	r23, r1
    65c4:	71 f0       	breq	.+28     	; 0x65e2 <MATCHI_LEN+0x2a>
        return(0);
    len = strlen(pat);
    65c6:	eb 01       	movw	r28, r22
    65c8:	09 90       	ld	r0, Y+
    65ca:	00 20       	and	r0, r0
    65cc:	e9 f7       	brne	.-6      	; 0x65c8 <MATCHI_LEN+0x10>
    65ce:	21 97       	sbiw	r28, 0x01	; 1
    65d0:	c6 1b       	sub	r28, r22
    65d2:	d7 0b       	sbc	r29, r23

    if( len )
    65d4:	31 f0       	breq	.+12     	; 0x65e2 <MATCHI_LEN+0x2a>
    {
        if(strncasecmp(str,pat,len) == 0 )
    65d6:	ae 01       	movw	r20, r28
    65d8:	70 df       	rcall	.-288    	; 0x64ba <strncasecmp>
    65da:	89 2b       	or	r24, r25
    65dc:	11 f4       	brne	.+4      	; 0x65e2 <MATCHI_LEN+0x2a>
    65de:	ce 01       	movw	r24, r28
    65e0:	02 c0       	rjmp	.+4      	; 0x65e6 <MATCHI_LEN+0x2e>
int MATCHI_LEN(char *str, char *pat)
{
    int len;

    if(!str || !pat)
        return(0);
    65e2:	80 e0       	ldi	r24, 0x00	; 0
    65e4:	90 e0       	ldi	r25, 0x00	; 0
    {
        if(strncasecmp(str,pat,len) == 0 )
            return(len);
    }
    return(0);
}
    65e6:	df 91       	pop	r29
    65e8:	cf 91       	pop	r28
    65ea:	08 95       	ret

000065ec <split_args>:
///@param[out] *argv[]: token array
///@param[in] max: maximum argument count
///@return count
MEMSPACE
int split_args(char *str, char *argv[], int max)
{
    65ec:	a0 e0       	ldi	r26, 0x00	; 0
    65ee:	b0 e0       	ldi	r27, 0x00	; 0
    65f0:	ec ef       	ldi	r30, 0xFC	; 252
    65f2:	f2 e3       	ldi	r31, 0x32	; 50
    65f4:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    65f8:	dc 01       	movw	r26, r24
    65fa:	6a 01       	movw	r12, r20
    65fc:	8b 01       	movw	r16, r22
    int i;
    int count = 0;
    // NULL ?

    for(i=0;i<max;++i)
    65fe:	fb 01       	movw	r30, r22
    6600:	80 e0       	ldi	r24, 0x00	; 0
    6602:	90 e0       	ldi	r25, 0x00	; 0
    6604:	8c 15       	cp	r24, r12
    6606:	9d 05       	cpc	r25, r13
    6608:	24 f4       	brge	.+8      	; 0x6612 <split_args+0x26>
        argv[i] = NULL; 
    660a:	11 92       	st	Z+, r1
    660c:	11 92       	st	Z+, r1
{
    int i;
    int count = 0;
    // NULL ?

    for(i=0;i<max;++i)
    660e:	01 96       	adiw	r24, 0x01	; 1
    6610:	f9 cf       	rjmp	.-14     	; 0x6604 <split_args+0x18>
        argv[i] = NULL; 

    // You may replace argv[0]
    // argv[count++] = "main";

    if(!max)
    6612:	c1 14       	cp	r12, r1
    6614:	d1 04       	cpc	r13, r1
    6616:	d9 f1       	breq	.+118    	; 0x668e <split_args+0xa2>
        return(0);

    if(!str)
    6618:	10 97       	sbiw	r26, 0x00	; 0
    661a:	c9 f1       	breq	.+114    	; 0x668e <split_args+0xa2>
    661c:	ee 24       	eor	r14, r14
    661e:	e3 94       	inc	r14
    6620:	f1 2c       	mov	r15, r1
    6622:	c0 e0       	ldi	r28, 0x00	; 0
    6624:	d0 e0       	ldi	r29, 0x00	; 0
        return(0);

    while(*str && count < max)
    6626:	8c 91       	ld	r24, X
    6628:	88 23       	and	r24, r24
    662a:	b1 f1       	breq	.+108    	; 0x6698 <split_args+0xac>
    662c:	cc 15       	cp	r28, r12
    662e:	dd 05       	cpc	r29, r13
    6630:	9c f5       	brge	.+102    	; 0x6698 <split_args+0xac>
    {
        str = skipspaces(str);
    6632:	cd 01       	movw	r24, r26
    6634:	f7 de       	rcall	.-530    	; 0x6424 <skipspaces>
        if(!*str)
    6636:	dc 01       	movw	r26, r24
    6638:	2c 91       	ld	r18, X
    663a:	22 23       	and	r18, r18
    663c:	69 f1       	breq	.+90     	; 0x6698 <split_args+0xac>
            break;

        // string processing
        if(*str == '"')
    663e:	22 32       	cpi	r18, 0x22	; 34
    6640:	79 f4       	brne	.+30     	; 0x6660 <split_args+0x74>
        {
            ++str;
    6642:	fc 01       	movw	r30, r24
    6644:	31 96       	adiw	r30, 0x01	; 1
            // Save string pointer
            argv[count++] = str;
    6646:	d8 01       	movw	r26, r16
    6648:	ed 93       	st	X+, r30
    664a:	fc 93       	st	X, r31
    664c:	df 01       	movw	r26, r30
            while(*str && *str != '"')
    664e:	80 81       	ld	r24, Z
    6650:	31 96       	adiw	r30, 0x01	; 1
    6652:	88 23       	and	r24, r24
    6654:	a9 f0       	breq	.+42     	; 0x6680 <split_args+0x94>
    6656:	82 32       	cpi	r24, 0x22	; 34
    6658:	c9 f7       	brne	.-14     	; 0x664c <split_args+0x60>
                ++str;
            if(*str == '"')
                *str++ = 0;
    665a:	1c 92       	st	X, r1
    665c:	df 01       	movw	r26, r30
    665e:	10 c0       	rjmp	.+32     	; 0x6680 <split_args+0x94>
            continue;
        }

        argv[count++] = str;
    6660:	f8 01       	movw	r30, r16
    6662:	91 83       	std	Z+1, r25	; 0x01
    6664:	80 83       	st	Z, r24
    6666:	fc 01       	movw	r30, r24
    6668:	2e 2f       	mov	r18, r30
    666a:	9f 2f       	mov	r25, r31
        // Find size of token
        while(*str > ' ' && *str <= 0x7e)
    666c:	81 91       	ld	r24, Z+
    666e:	3f ed       	ldi	r19, 0xDF	; 223
    6670:	38 0f       	add	r19, r24
    6672:	3e 35       	cpi	r19, 0x5E	; 94
    6674:	c8 f3       	brcs	.-14     	; 0x6668 <split_args+0x7c>
            ++str;
        if(!*str)
    6676:	88 23       	and	r24, r24
    6678:	69 f0       	breq	.+26     	; 0x6694 <split_args+0xa8>
            break;
        *str  = 0;
    667a:	a2 2f       	mov	r26, r18
    667c:	b9 2f       	mov	r27, r25
    667e:	1d 92       	st	X+, r1
    6680:	21 96       	adiw	r28, 0x01	; 1
    6682:	ff ef       	ldi	r31, 0xFF	; 255
    6684:	ef 1a       	sub	r14, r31
    6686:	ff 0a       	sbc	r15, r31
    6688:	0e 5f       	subi	r16, 0xFE	; 254
    668a:	1f 4f       	sbci	r17, 0xFF	; 255
    668c:	cc cf       	rjmp	.-104    	; 0x6626 <split_args+0x3a>

    // You may replace argv[0]
    // argv[count++] = "main";

    if(!max)
        return(0);
    668e:	80 e0       	ldi	r24, 0x00	; 0
    6690:	90 e0       	ldi	r25, 0x00	; 0
    6692:	03 c0       	rjmp	.+6      	; 0x669a <split_args+0xae>
            if(*str == '"')
                *str++ = 0;
            continue;
        }

        argv[count++] = str;
    6694:	c7 01       	movw	r24, r14
    6696:	01 c0       	rjmp	.+2      	; 0x669a <split_args+0xae>
    6698:	ce 01       	movw	r24, r28
            break;
        *str  = 0;
        ++str;
    }
    return(count);
}
    669a:	cd b7       	in	r28, 0x3d	; 61
    669c:	de b7       	in	r29, 0x3e	; 62
    669e:	e8 e0       	ldi	r30, 0x08	; 8
    66a0:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

000066a4 <get_token>:
///
///@return pointer past token on success .
///@return NULL if no token found
MEMSPACE
char *get_token(char *str, char *token, int max)
{
    66a4:	ef 92       	push	r14
    66a6:	ff 92       	push	r15
    66a8:	0f 93       	push	r16
    66aa:	1f 93       	push	r17
    66ac:	cf 93       	push	r28
    66ae:	df 93       	push	r29
    66b0:	eb 01       	movw	r28, r22
    66b2:	8a 01       	movw	r16, r20

	*token = 0;
    66b4:	18 82       	st	Y, r1

    if(!str || *str == 0)
    66b6:	00 97       	sbiw	r24, 0x00	; 0
    66b8:	89 f1       	breq	.+98     	; 0x671c <get_token+0x78>
    66ba:	fc 01       	movw	r30, r24
    66bc:	20 81       	ld	r18, Z
    66be:	22 23       	and	r18, r18
        return(str);

    // Skip beginning spaces
    str = skipspaces(str);
    66c0:	79 f1       	breq	.+94     	; 0x6720 <get_token+0x7c>
    // Delete all trailing spaces
    trim_tail(str);
    66c2:	b0 de       	rcall	.-672    	; 0x6424 <skipspaces>
    66c4:	7c 01       	movw	r14, r24
    66c6:	9e de       	rcall	.-708    	; 0x6404 <trim_tail>
    66c8:	f7 01       	movw	r30, r14

    while(*str > ' ' && max > 0) {
    66ca:	cf 01       	movw	r24, r30
    66cc:	21 91       	ld	r18, Z+
    66ce:	21 32       	cpi	r18, 0x21	; 33
    66d0:	e0 f0       	brcs	.+56     	; 0x670a <get_token+0x66>
    66d2:	10 16       	cp	r1, r16
    66d4:	11 06       	cpc	r1, r17

        // String processing
        // A token can be a quoted string
        if(*str == '"')
    66d6:	cc f4       	brge	.+50     	; 0x670a <get_token+0x66>
    66d8:	22 32       	cpi	r18, 0x22	; 34
    66da:	79 f4       	brne	.+30     	; 0x66fa <get_token+0x56>
    66dc:	fc 01       	movw	r30, r24
    66de:	31 96       	adiw	r30, 0x01	; 1
    66e0:	0c 0f       	add	r16, r28
    66e2:	1d 1f       	adc	r17, r29
        {
            ++str;
            // We are pointing at the body of the quoted string now
            while(*str && *str != '"' && max > 0)
    66e4:	cf 01       	movw	r24, r30
    66e6:	21 91       	ld	r18, Z+
    66e8:	22 23       	and	r18, r18
    66ea:	79 f0       	breq	.+30     	; 0x670a <get_token+0x66>
    66ec:	22 32       	cpi	r18, 0x22	; 34
    66ee:	59 f0       	breq	.+22     	; 0x6706 <get_token+0x62>
    66f0:	c0 17       	cp	r28, r16
    66f2:	d1 07       	cpc	r29, r17
            {
                *token++ = *str++;
    66f4:	51 f0       	breq	.+20     	; 0x670a <get_token+0x66>
    66f6:	29 93       	st	Y+, r18
            }
            break;
        }

        // If we have a comma, outside of a string, break
        if(*str == ',' )
    66f8:	f5 cf       	rjmp	.-22     	; 0x66e4 <get_token+0x40>
    66fa:	2c 32       	cpi	r18, 0x2C	; 44
            break;

        // copy token
        *token++ = *str++;
    66fc:	31 f0       	breq	.+12     	; 0x670a <get_token+0x66>
        --max;
    66fe:	29 93       	st	Y+, r18
    6700:	01 50       	subi	r16, 0x01	; 1
                --max;
            }
            if(*str == '"')
            {
                ++str;
                *token = 0;
    6702:	11 09       	sbc	r17, r1
        *token++ = *str++;
        --max;
    }

    // Skip trailing spaces
    str = skipspaces(str);
    6704:	e2 cf       	rjmp	.-60     	; 0x66ca <get_token+0x26>
    6706:	cf 01       	movw	r24, r30
    6708:	18 82       	st	Y, r1
    // If we had a trailing comma skip it
    if(*str == ',' )
    670a:	8c de       	rcall	.-744    	; 0x6424 <skipspaces>
    670c:	fc 01       	movw	r30, r24
    670e:	80 81       	ld	r24, Z
        ++str;
    6710:	8c 32       	cpi	r24, 0x2C	; 44

    *token = 0;
    6712:	09 f4       	brne	.+2      	; 0x6716 <get_token+0x72>
    return(str);
    6714:	31 96       	adiw	r30, 0x01	; 1
    6716:	18 82       	st	Y, r1
    6718:	cf 01       	movw	r24, r30
    671a:	02 c0       	rjmp	.+4      	; 0x6720 <get_token+0x7c>
}
    671c:	80 e0       	ldi	r24, 0x00	; 0
    671e:	90 e0       	ldi	r25, 0x00	; 0
    6720:	cd b7       	in	r28, 0x3d	; 61
    6722:	de b7       	in	r29, 0x3e	; 62
    6724:	e6 e0       	ldi	r30, 0x06	; 6
    6726:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

0000672a <token>:
///@return string lenth on match.
///@return 0 on no match.

MEMSPACE
int token(char *str, char *pat)
{
    672a:	ef 92       	push	r14
    672c:	ff 92       	push	r15
    672e:	0f 93       	push	r16
    6730:	1f 93       	push	r17
    6732:	cf 93       	push	r28
    6734:	df 93       	push	r29
    int patlen;
    int len;
    char *ptr;

    if(!str || *str == 0)
    6736:	00 97       	sbiw	r24, 0x00	; 0
    6738:	11 f1       	breq	.+68     	; 0x677e <token+0x54>
    673a:	fc 01       	movw	r30, r24
    673c:	20 81       	ld	r18, Z
    673e:	22 23       	and	r18, r18
    6740:	f1 f0       	breq	.+60     	; 0x677e <token+0x54>
    6742:	7b 01       	movw	r14, r22
        return(0);

    ptr = skipspaces(str);
    6744:	8c 01       	movw	r16, r24
    6746:	6e de       	rcall	.-804    	; 0x6424 <skipspaces>
    len = 0;
    while(*ptr > ' ' && *ptr <= 0x7e )
    6748:	9c 01       	movw	r18, r24
    674a:	fc 01       	movw	r30, r24
    674c:	ef 01       	movw	r28, r30
    674e:	c2 1b       	sub	r28, r18
    6750:	d3 0b       	sbc	r29, r19
    6752:	91 91       	ld	r25, Z+
    6754:	91 52       	subi	r25, 0x21	; 33
    6756:	9e 35       	cpi	r25, 0x5E	; 94
    {
        ++len;
        ++ptr;
    }

    if(!len)
    6758:	c8 f3       	brcs	.-14     	; 0x674c <token+0x22>
    675a:	20 97       	sbiw	r28, 0x00	; 0
        return(0);

    patlen = strlen(pat);
    675c:	91 f0       	breq	.+36     	; 0x6782 <token+0x58>
    675e:	f7 01       	movw	r30, r14
    6760:	01 90       	ld	r0, Z+
    6762:	00 20       	and	r0, r0
    6764:	e9 f7       	brne	.-6      	; 0x6760 <token+0x36>
    6766:	31 97       	sbiw	r30, 0x01	; 1
    6768:	ee 19       	sub	r30, r14

    if(len != patlen)
    676a:	ff 09       	sbc	r31, r15
    676c:	ec 17       	cp	r30, r28
    676e:	fd 07       	cpc	r31, r29
        return(0);

    if(strncmp(str,pat,patlen) == 0)
    6770:	31 f4       	brne	.+12     	; 0x677e <token+0x54>
    6772:	ae 01       	movw	r20, r28
    6774:	b7 01       	movw	r22, r14
    6776:	c8 01       	movw	r24, r16
    6778:	6c de       	rcall	.-808    	; 0x6452 <strncmp>
    677a:	89 2b       	or	r24, r25
    int patlen;
    int len;
    char *ptr;

    if(!str || *str == 0)
        return(0);
    677c:	11 f0       	breq	.+4      	; 0x6782 <token+0x58>
    677e:	c0 e0       	ldi	r28, 0x00	; 0
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    6780:	d0 e0       	ldi	r29, 0x00	; 0
    6782:	ce 01       	movw	r24, r28
    6784:	cd b7       	in	r28, 0x3d	; 61
    6786:	de b7       	in	r29, 0x3e	; 62
    6788:	e6 e0       	ldi	r30, 0x06	; 6
    678a:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

0000678e <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{ 
    678e:	a2 e0       	ldi	r26, 0x02	; 2
    6790:	b0 e0       	ldi	r27, 0x00	; 0
    6792:	ed ec       	ldi	r30, 0xCD	; 205
    6794:	f3 e3       	ldi	r31, 0x33	; 51
    6796:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    679a:	00 97       	sbiw	r24, 0x00	; 0
    679c:	79 f1       	breq	.+94     	; 0x67fc <get_value+0x6e>
    679e:	fc 01       	movw	r30, r24
    67a0:	20 81       	ld	r18, Z
    67a2:	22 23       	and	r18, r18
        return(0);

    ptr = skipspaces(str);
    67a4:	59 f1       	breq	.+86     	; 0x67fc <get_value+0x6e>
    67a6:	3e de       	rcall	.-900    	; 0x6424 <skipspaces>
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    67a8:	8c 01       	movw	r16, r24
    67aa:	6e e2       	ldi	r22, 0x2E	; 46
    67ac:	77 e0       	ldi	r23, 0x07	; 7
    67ae:	04 df       	rcall	.-504    	; 0x65b8 <MATCHI_LEN>
    67b0:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    67b2:	29 f0       	breq	.+10     	; 0x67be <get_value+0x30>
    67b4:	08 0f       	add	r16, r24
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    67b6:	19 1f       	adc	r17, r25
    67b8:	40 e1       	ldi	r20, 0x10	; 16
    67ba:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    67bc:	18 c0       	rjmp	.+48     	; 0x67ee <get_value+0x60>
    67be:	61 e3       	ldi	r22, 0x31	; 49
    67c0:	77 e0       	ldi	r23, 0x07	; 7
    67c2:	c8 01       	movw	r24, r16
    67c4:	f9 de       	rcall	.-526    	; 0x65b8 <MATCHI_LEN>
    67c6:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    67c8:	29 f0       	breq	.+10     	; 0x67d4 <get_value+0x46>
    67ca:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    67cc:	19 1f       	adc	r17, r25
    67ce:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    67d0:	50 e0       	ldi	r21, 0x00	; 0
    67d2:	0d c0       	rjmp	.+26     	; 0x67ee <get_value+0x60>
    67d4:	64 e3       	ldi	r22, 0x34	; 52
    67d6:	77 e0       	ldi	r23, 0x07	; 7
    67d8:	c8 01       	movw	r24, r16
    67da:	ee de       	rcall	.-548    	; 0x65b8 <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    67dc:	00 97       	sbiw	r24, 0x00	; 0
    67de:	29 f0       	breq	.+10     	; 0x67ea <get_value+0x5c>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    67e0:	08 0f       	add	r16, r24
    67e2:	19 1f       	adc	r17, r25
    67e4:	42 e0       	ldi	r20, 0x02	; 2

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    67e6:	50 e0       	ldi	r21, 0x00	; 0
    67e8:	02 c0       	rjmp	.+4      	; 0x67ee <get_value+0x60>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    67ea:	4a e0       	ldi	r20, 0x0A	; 10
    67ec:	50 e0       	ldi	r21, 0x00	; 0
    67ee:	be 01       	movw	r22, r28
    67f0:	6f 5f       	subi	r22, 0xFF	; 255
    67f2:	7f 4f       	sbci	r23, 0xFF	; 255
    67f4:	c8 01       	movw	r24, r16
    67f6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <strtol>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    67fa:	03 c0       	rjmp	.+6      	; 0x6802 <get_value+0x74>
    67fc:	60 e0       	ldi	r22, 0x00	; 0
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    67fe:	70 e0       	ldi	r23, 0x00	; 0
    6800:	cb 01       	movw	r24, r22
    6802:	22 96       	adiw	r28, 0x02	; 2
    6804:	e4 e0       	ldi	r30, 0x04	; 4
    6806:	0c 94 5f e5 	jmp	0x1cabe	; 0x1cabe <__epilogue_restores__+0x1c>

0000680a <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    680a:	78 94       	sei
    680c:	08 95       	ret

0000680e <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    680e:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    6810:	89 e0       	ldi	r24, 0x09	; 9
    6812:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6816:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    681a:	8f e1       	ldi	r24, 0x1F	; 31
    681c:	9e e4       	ldi	r25, 0x4E	; 78
    681e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6822:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    6826:	ef e6       	ldi	r30, 0x6F	; 111
    6828:	f0 e0       	ldi	r31, 0x00	; 0
    682a:	80 81       	ld	r24, Z
    682c:	82 60       	ori	r24, 0x02	; 2
    682e:	80 83       	st	Z, r24
    sei();
    6830:	78 94       	sei
    6832:	08 95       	ret

00006834 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6834:	1f 92       	push	r1
    6836:	0f 92       	push	r0
    6838:	0f b6       	in	r0, 0x3f	; 63
    683a:	0f 92       	push	r0
    683c:	11 24       	eor	r1, r1
    683e:	0b b6       	in	r0, 0x3b	; 59
    6840:	0f 92       	push	r0
    6842:	2f 93       	push	r18
    6844:	3f 93       	push	r19
    6846:	4f 93       	push	r20
    6848:	5f 93       	push	r21
    684a:	6f 93       	push	r22
    684c:	7f 93       	push	r23
    684e:	8f 93       	push	r24
    6850:	9f 93       	push	r25
    6852:	af 93       	push	r26
    6854:	bf 93       	push	r27
    6856:	ef 93       	push	r30
    execute_timers();
    6858:	ff 93       	push	r31
}
    685a:	26 d2       	rcall	.+1100   	; 0x6ca8 <execute_timers>
    685c:	ff 91       	pop	r31
    685e:	ef 91       	pop	r30
    6860:	bf 91       	pop	r27
    6862:	af 91       	pop	r26
    6864:	9f 91       	pop	r25
    6866:	8f 91       	pop	r24
    6868:	7f 91       	pop	r23
    686a:	6f 91       	pop	r22
    686c:	5f 91       	pop	r21
    686e:	4f 91       	pop	r20
    6870:	3f 91       	pop	r19
    6872:	2f 91       	pop	r18
    6874:	0f 90       	pop	r0
    6876:	0b be       	out	0x3b, r0	; 59
    6878:	0f 90       	pop	r0
    687a:	0f be       	out	0x3f, r0	; 63
    687c:	0f 90       	pop	r0
    687e:	1f 90       	pop	r1
    6880:	18 95       	reti

00006882 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    6882:	0f 93       	push	r16
    6884:	1f 93       	push	r17
    6886:	cf 93       	push	r28
    6888:	df 93       	push	r29
    688a:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    688c:	f8 94       	cli

    count1 = TCNT1;
    688e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6892:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6896:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <__clock>
    689a:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <__clock+0x1>
    689e:	a0 91 44 19 	lds	r26, 0x1944	; 0x801944 <__clock+0x2>
    68a2:	b0 91 45 19 	lds	r27, 0x1945	; 0x801945 <__clock+0x3>
    68a6:	80 83       	st	Z, r24
    68a8:	91 83       	std	Z+1, r25	; 0x01
    68aa:	a2 83       	std	Z+2, r26	; 0x02
    68ac:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    68ae:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <__clock+0x4>
    68b2:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <__clock+0x5>
    68b6:	a0 91 48 19 	lds	r26, 0x1948	; 0x801948 <__clock+0x6>
    68ba:	b0 91 49 19 	lds	r27, 0x1949	; 0x801949 <__clock+0x7>
    68be:	84 83       	std	Z+4, r24	; 0x04
    68c0:	95 83       	std	Z+5, r25	; 0x05
    68c2:	a6 83       	std	Z+6, r26	; 0x06
    68c4:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    68c6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    68ca:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    68ce:	b1 9b       	sbis	0x16, 1	; 22
    68d0:	03 c0       	rjmp	.+6      	; 0x68d8 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    68d2:	c0 e0       	ldi	r28, 0x00	; 0
    68d4:	d0 e0       	ldi	r29, 0x00	; 0
    68d6:	3f c0       	rjmp	.+126    	; 0x6956 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    68d8:	82 17       	cp	r24, r18
    68da:	93 07       	cpc	r25, r19
    68dc:	d0 f1       	brcs	.+116    	; 0x6952 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    68de:	c0 e0       	ldi	r28, 0x00	; 0
    68e0:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    68e2:	40 e0       	ldi	r20, 0x00	; 0
    68e4:	50 e0       	ldi	r21, 0x00	; 0
    68e6:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    68e8:	9a 01       	movw	r18, r20
    68ea:	ab 01       	movw	r20, r22
    68ec:	28 0f       	add	r18, r24
    68ee:	39 1f       	adc	r19, r25
    68f0:	41 1d       	adc	r20, r1
    68f2:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    68f4:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    68f6:	a2 e3       	ldi	r26, 0x32	; 50
    68f8:	b0 e0       	ldi	r27, 0x00	; 0
    68fa:	0e 94 15 e5 	call	0x1ca2a	; 0x1ca2a <__muluhisi3>
    68fe:	04 81       	ldd	r16, Z+4	; 0x04
    6900:	15 81       	ldd	r17, Z+5	; 0x05
    6902:	26 81       	ldd	r18, Z+6	; 0x06
    6904:	37 81       	ldd	r19, Z+7	; 0x07
    6906:	dc 01       	movw	r26, r24
    6908:	cb 01       	movw	r24, r22
    690a:	80 0f       	add	r24, r16
    690c:	91 1f       	adc	r25, r17
    690e:	a2 1f       	adc	r26, r18
    6910:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6912:	81 15       	cp	r24, r1
    6914:	2a ec       	ldi	r18, 0xCA	; 202
    6916:	92 07       	cpc	r25, r18
    6918:	2a e9       	ldi	r18, 0x9A	; 154
    691a:	a2 07       	cpc	r26, r18
    691c:	2b e3       	ldi	r18, 0x3B	; 59
    691e:	b2 07       	cpc	r27, r18
    6920:	2c f4       	brge	.+10     	; 0x692c <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6922:	84 83       	std	Z+4, r24	; 0x04
    6924:	95 83       	std	Z+5, r25	; 0x05
    6926:	a6 83       	std	Z+6, r26	; 0x06
    6928:	b7 83       	std	Z+7, r27	; 0x07
    692a:	1a c0       	rjmp	.+52     	; 0x6960 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    692c:	9a 5c       	subi	r25, 0xCA	; 202
    692e:	aa 49       	sbci	r26, 0x9A	; 154
    6930:	bb 43       	sbci	r27, 0x3B	; 59
    6932:	84 83       	std	Z+4, r24	; 0x04
    6934:	95 83       	std	Z+5, r25	; 0x05
    6936:	a6 83       	std	Z+6, r26	; 0x06
    6938:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    693a:	80 81       	ld	r24, Z
    693c:	91 81       	ldd	r25, Z+1	; 0x01
    693e:	a2 81       	ldd	r26, Z+2	; 0x02
    6940:	b3 81       	ldd	r27, Z+3	; 0x03
    6942:	01 96       	adiw	r24, 0x01	; 1
    6944:	a1 1d       	adc	r26, r1
    6946:	b1 1d       	adc	r27, r1
    6948:	80 83       	st	Z, r24
    694a:	91 83       	std	Z+1, r25	; 0x01
    694c:	a2 83       	std	Z+2, r26	; 0x02
    694e:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6950:	07 c0       	rjmp	.+14     	; 0x6960 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    6952:	cf ef       	ldi	r28, 0xFF	; 255
    6954:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6956:	40 e2       	ldi	r20, 0x20	; 32
    6958:	5e e4       	ldi	r21, 0x4E	; 78
    695a:	60 e0       	ldi	r22, 0x00	; 0
    695c:	70 e0       	ldi	r23, 0x00	; 0
    695e:	c4 cf       	rjmp	.-120    	; 0x68e8 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6960:	ce 01       	movw	r24, r28
    6962:	df 91       	pop	r29
    6964:	cf 91       	pop	r28
    6966:	1f 91       	pop	r17
    6968:	0f 91       	pop	r16
    696a:	08 95       	ret

0000696c <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    696c:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <__clock+0x4>
    6970:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <__clock+0x5>
    6974:	a0 91 48 19 	lds	r26, 0x1948	; 0x801948 <__clock+0x6>
    6978:	b0 91 49 19 	lds	r27, 0x1949	; 0x801949 <__clock+0x7>
    697c:	80 5c       	subi	r24, 0xC0	; 192
    697e:	9d 4b       	sbci	r25, 0xBD	; 189
    6980:	a0 4f       	sbci	r26, 0xF0	; 240
    6982:	bf 4f       	sbci	r27, 0xFF	; 255
    6984:	80 93 46 19 	sts	0x1946, r24	; 0x801946 <__clock+0x4>
    6988:	90 93 47 19 	sts	0x1947, r25	; 0x801947 <__clock+0x5>
    698c:	a0 93 48 19 	sts	0x1948, r26	; 0x801948 <__clock+0x6>
    6990:	b0 93 49 19 	sts	0x1949, r27	; 0x801949 <__clock+0x7>
    6994:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <__clock+0x4>
    6998:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <__clock+0x5>
    699c:	a0 91 48 19 	lds	r26, 0x1948	; 0x801948 <__clock+0x6>
    69a0:	b0 91 49 19 	lds	r27, 0x1949	; 0x801949 <__clock+0x7>
    69a4:	81 15       	cp	r24, r1
    69a6:	9a 4c       	sbci	r25, 0xCA	; 202
    69a8:	aa 49       	sbci	r26, 0x9A	; 154
    69aa:	bb 43       	sbci	r27, 0x3B	; 59
    69ac:	dc f0       	brlt	.+54     	; 0x69e4 <clock_task+0x78>
    69ae:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <__clock>
    69b2:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <__clock+0x1>
    69b6:	a0 91 44 19 	lds	r26, 0x1944	; 0x801944 <__clock+0x2>
    69ba:	b0 91 45 19 	lds	r27, 0x1945	; 0x801945 <__clock+0x3>
    69be:	01 96       	adiw	r24, 0x01	; 1
    69c0:	a1 1d       	adc	r26, r1
    69c2:	b1 1d       	adc	r27, r1
    69c4:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <__clock>
    69c8:	90 93 43 19 	sts	0x1943, r25	; 0x801943 <__clock+0x1>
    69cc:	a0 93 44 19 	sts	0x1944, r26	; 0x801944 <__clock+0x2>
    69d0:	b0 93 45 19 	sts	0x1945, r27	; 0x801945 <__clock+0x3>
    69d4:	10 92 46 19 	sts	0x1946, r1	; 0x801946 <__clock+0x4>
    69d8:	10 92 47 19 	sts	0x1947, r1	; 0x801947 <__clock+0x5>
    69dc:	10 92 48 19 	sts	0x1948, r1	; 0x801948 <__clock+0x6>
    69e0:	10 92 49 19 	sts	0x1949, r1	; 0x801949 <__clock+0x7>
    69e4:	08 95       	ret

000069e6 <clock_settime.part.2>:
    69e6:	fc 01       	movw	r30, r24
    69e8:	84 81       	ldd	r24, Z+4	; 0x04
    69ea:	95 81       	ldd	r25, Z+5	; 0x05
    69ec:	a6 81       	ldd	r26, Z+6	; 0x06
    69ee:	b7 81       	ldd	r27, Z+7	; 0x07
    69f0:	80 93 46 19 	sts	0x1946, r24	; 0x801946 <__clock+0x4>
    69f4:	90 93 47 19 	sts	0x1947, r25	; 0x801947 <__clock+0x5>
    69f8:	a0 93 48 19 	sts	0x1948, r26	; 0x801948 <__clock+0x6>
    69fc:	b0 93 49 19 	sts	0x1949, r27	; 0x801949 <__clock+0x7>
    6a00:	80 81       	ld	r24, Z
    6a02:	91 81       	ldd	r25, Z+1	; 0x01
    6a04:	a2 81       	ldd	r26, Z+2	; 0x02
    6a06:	b3 81       	ldd	r27, Z+3	; 0x03
    6a08:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <__clock>
    6a0c:	90 93 43 19 	sts	0x1943, r25	; 0x801943 <__clock+0x1>
    6a10:	a0 93 44 19 	sts	0x1944, r26	; 0x801944 <__clock+0x2>
    6a14:	b0 93 45 19 	sts	0x1945, r27	; 0x801945 <__clock+0x3>
    6a18:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <__clock+0x4>
    6a1c:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <__clock+0x5>
    6a20:	a0 91 48 19 	lds	r26, 0x1948	; 0x801948 <__clock+0x6>
    6a24:	b0 91 49 19 	lds	r27, 0x1949	; 0x801949 <__clock+0x7>
    6a28:	44 81       	ldd	r20, Z+4	; 0x04
    6a2a:	55 81       	ldd	r21, Z+5	; 0x05
    6a2c:	66 81       	ldd	r22, Z+6	; 0x06
    6a2e:	77 81       	ldd	r23, Z+7	; 0x07
    6a30:	48 17       	cp	r20, r24
    6a32:	59 07       	cpc	r21, r25
    6a34:	6a 07       	cpc	r22, r26
    6a36:	7b 07       	cpc	r23, r27
    6a38:	b9 f6       	brne	.-82     	; 0x69e8 <clock_settime.part.2+0x2>
    6a3a:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <__clock>
    6a3e:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <__clock+0x1>
    6a42:	a0 91 44 19 	lds	r26, 0x1944	; 0x801944 <__clock+0x2>
    6a46:	b0 91 45 19 	lds	r27, 0x1945	; 0x801945 <__clock+0x3>
    6a4a:	40 81       	ld	r20, Z
    6a4c:	51 81       	ldd	r21, Z+1	; 0x01
    6a4e:	62 81       	ldd	r22, Z+2	; 0x02
    6a50:	73 81       	ldd	r23, Z+3	; 0x03
    6a52:	48 17       	cp	r20, r24
    6a54:	59 07       	cpc	r21, r25
    6a56:	6a 07       	cpc	r22, r26
    6a58:	7b 07       	cpc	r23, r27
    6a5a:	31 f6       	brne	.-116    	; 0x69e8 <clock_settime.part.2+0x2>
    6a5c:	80 e0       	ldi	r24, 0x00	; 0
    6a5e:	90 e0       	ldi	r25, 0x00	; 0
    6a60:	08 95       	ret

00006a62 <set_timers>:
    6a62:	00 97       	sbiw	r24, 0x00	; 0
    6a64:	79 f1       	breq	.+94     	; 0x6ac4 <set_timers+0x62>
    6a66:	ea e4       	ldi	r30, 0x4A	; 74
    6a68:	f9 e1       	ldi	r31, 0x19	; 25
    6a6a:	4f ef       	ldi	r20, 0xFF	; 255
    6a6c:	5f ef       	ldi	r21, 0xFF	; 255
    6a6e:	20 e0       	ldi	r18, 0x00	; 0
    6a70:	30 e0       	ldi	r19, 0x00	; 0
    6a72:	60 81       	ld	r22, Z
    6a74:	71 81       	ldd	r23, Z+1	; 0x01
    6a76:	86 17       	cp	r24, r22
    6a78:	97 07       	cpc	r25, r23
    6a7a:	79 f0       	breq	.+30     	; 0x6a9a <set_timers+0x38>
    6a7c:	67 2b       	or	r22, r23
    6a7e:	71 f4       	brne	.+28     	; 0x6a9c <set_timers+0x3a>
    6a80:	f9 01       	movw	r30, r18
    6a82:	ee 0f       	add	r30, r30
    6a84:	ff 1f       	adc	r31, r31
    6a86:	e2 0f       	add	r30, r18
    6a88:	f3 1f       	adc	r31, r19
    6a8a:	e6 5b       	subi	r30, 0xB6	; 182
    6a8c:	f6 4e       	sbci	r31, 0xE6	; 230
    6a8e:	91 83       	std	Z+1, r25	; 0x01
    6a90:	80 83       	st	Z, r24
    6a92:	81 e0       	ldi	r24, 0x01	; 1
    6a94:	82 83       	std	Z+2, r24	; 0x02
    6a96:	c9 01       	movw	r24, r18
    6a98:	08 95       	ret
    6a9a:	a9 01       	movw	r20, r18
    6a9c:	2f 5f       	subi	r18, 0xFF	; 255
    6a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    6aa0:	33 96       	adiw	r30, 0x03	; 3
    6aa2:	28 30       	cpi	r18, 0x08	; 8
    6aa4:	31 05       	cpc	r19, r1
    6aa6:	29 f7       	brne	.-54     	; 0x6a72 <set_timers+0x10>
    6aa8:	4f 3f       	cpi	r20, 0xFF	; 255
    6aaa:	8f ef       	ldi	r24, 0xFF	; 255
    6aac:	58 07       	cpc	r21, r24
    6aae:	69 f4       	brne	.+26     	; 0x6aca <set_timers+0x68>
    6ab0:	82 ec       	ldi	r24, 0xC2	; 194
    6ab2:	95 e0       	ldi	r25, 0x05	; 5
    6ab4:	1f 92       	push	r1
    6ab6:	9f 93       	push	r25
    6ab8:	8f 93       	push	r24
    6aba:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    6abe:	0f 90       	pop	r0
    6ac0:	0f 90       	pop	r0
    6ac2:	0f 90       	pop	r0
    6ac4:	8f ef       	ldi	r24, 0xFF	; 255
    6ac6:	9f ef       	ldi	r25, 0xFF	; 255
    6ac8:	08 95       	ret
    6aca:	ca 01       	movw	r24, r20
    6acc:	08 95       	ret

00006ace <delete_all_timers>:
    6ace:	ea e4       	ldi	r30, 0x4A	; 74
    6ad0:	f9 e1       	ldi	r31, 0x19	; 25
    6ad2:	12 82       	std	Z+2, r1	; 0x02
    6ad4:	11 82       	std	Z+1, r1	; 0x01
    6ad6:	10 82       	st	Z, r1
    6ad8:	33 96       	adiw	r30, 0x03	; 3
    6ada:	89 e1       	ldi	r24, 0x19	; 25
    6adc:	e2 36       	cpi	r30, 0x62	; 98
    6ade:	f8 07       	cpc	r31, r24
    6ae0:	c1 f7       	brne	.-16     	; 0x6ad2 <delete_all_timers+0x4>
    6ae2:	08 95       	ret

00006ae4 <subtract_timespec>:
    6ae4:	0f 93       	push	r16
    6ae6:	1f 93       	push	r17
    6ae8:	cf 93       	push	r28
    6aea:	df 93       	push	r29
    6aec:	fc 01       	movw	r30, r24
    6aee:	84 81       	ldd	r24, Z+4	; 0x04
    6af0:	95 81       	ldd	r25, Z+5	; 0x05
    6af2:	a6 81       	ldd	r26, Z+6	; 0x06
    6af4:	b7 81       	ldd	r27, Z+7	; 0x07
    6af6:	eb 01       	movw	r28, r22
    6af8:	0c 81       	ldd	r16, Y+4	; 0x04
    6afa:	1d 81       	ldd	r17, Y+5	; 0x05
    6afc:	2e 81       	ldd	r18, Y+6	; 0x06
    6afe:	3f 81       	ldd	r19, Y+7	; 0x07
    6b00:	80 1b       	sub	r24, r16
    6b02:	91 0b       	sbc	r25, r17
    6b04:	a2 0b       	sbc	r26, r18
    6b06:	b3 0b       	sbc	r27, r19
    6b08:	b7 fd       	sbrc	r27, 7
    6b0a:	05 c0       	rjmp	.+10     	; 0x6b16 <subtract_timespec+0x32>
    6b0c:	84 83       	std	Z+4, r24	; 0x04
    6b0e:	95 83       	std	Z+5, r25	; 0x05
    6b10:	a6 83       	std	Z+6, r26	; 0x06
    6b12:	b7 83       	std	Z+7, r27	; 0x07
    6b14:	12 c0       	rjmp	.+36     	; 0x6b3a <subtract_timespec+0x56>
    6b16:	96 53       	subi	r25, 0x36	; 54
    6b18:	a5 46       	sbci	r26, 0x65	; 101
    6b1a:	b4 4c       	sbci	r27, 0xC4	; 196
    6b1c:	84 83       	std	Z+4, r24	; 0x04
    6b1e:	95 83       	std	Z+5, r25	; 0x05
    6b20:	a6 83       	std	Z+6, r26	; 0x06
    6b22:	b7 83       	std	Z+7, r27	; 0x07
    6b24:	80 81       	ld	r24, Z
    6b26:	91 81       	ldd	r25, Z+1	; 0x01
    6b28:	a2 81       	ldd	r26, Z+2	; 0x02
    6b2a:	b3 81       	ldd	r27, Z+3	; 0x03
    6b2c:	01 97       	sbiw	r24, 0x01	; 1
    6b2e:	a1 09       	sbc	r26, r1
    6b30:	b1 09       	sbc	r27, r1
    6b32:	80 83       	st	Z, r24
    6b34:	91 83       	std	Z+1, r25	; 0x01
    6b36:	a2 83       	std	Z+2, r26	; 0x02
    6b38:	b3 83       	std	Z+3, r27	; 0x03
    6b3a:	80 81       	ld	r24, Z
    6b3c:	91 81       	ldd	r25, Z+1	; 0x01
    6b3e:	a2 81       	ldd	r26, Z+2	; 0x02
    6b40:	b3 81       	ldd	r27, Z+3	; 0x03
    6b42:	eb 01       	movw	r28, r22
    6b44:	48 81       	ld	r20, Y
    6b46:	59 81       	ldd	r21, Y+1	; 0x01
    6b48:	6a 81       	ldd	r22, Y+2	; 0x02
    6b4a:	7b 81       	ldd	r23, Y+3	; 0x03
    6b4c:	84 1b       	sub	r24, r20
    6b4e:	95 0b       	sbc	r25, r21
    6b50:	a6 0b       	sbc	r26, r22
    6b52:	b7 0b       	sbc	r27, r23
    6b54:	80 83       	st	Z, r24
    6b56:	91 83       	std	Z+1, r25	; 0x01
    6b58:	a2 83       	std	Z+2, r26	; 0x02
    6b5a:	b3 83       	std	Z+3, r27	; 0x03
    6b5c:	df 91       	pop	r29
    6b5e:	cf 91       	pop	r28
    6b60:	1f 91       	pop	r17
    6b62:	0f 91       	pop	r16
    6b64:	08 95       	ret

00006b66 <ts_to_str>:
    6b66:	fc 01       	movw	r30, r24
    6b68:	87 81       	ldd	r24, Z+7	; 0x07
    6b6a:	8f 93       	push	r24
    6b6c:	86 81       	ldd	r24, Z+6	; 0x06
    6b6e:	8f 93       	push	r24
    6b70:	85 81       	ldd	r24, Z+5	; 0x05
    6b72:	8f 93       	push	r24
    6b74:	84 81       	ldd	r24, Z+4	; 0x04
    6b76:	8f 93       	push	r24
    6b78:	83 81       	ldd	r24, Z+3	; 0x03
    6b7a:	8f 93       	push	r24
    6b7c:	82 81       	ldd	r24, Z+2	; 0x02
    6b7e:	8f 93       	push	r24
    6b80:	81 81       	ldd	r24, Z+1	; 0x01
    6b82:	8f 93       	push	r24
    6b84:	80 81       	ld	r24, Z
    6b86:	8f 93       	push	r24
    6b88:	88 eb       	ldi	r24, 0xB8	; 184
    6b8a:	95 e0       	ldi	r25, 0x05	; 5
    6b8c:	1f 92       	push	r1
    6b8e:	9f 93       	push	r25
    6b90:	8f 93       	push	r24
    6b92:	1f 92       	push	r1
    6b94:	8f e1       	ldi	r24, 0x1F	; 31
    6b96:	8f 93       	push	r24
    6b98:	84 e5       	ldi	r24, 0x54	; 84
    6b9a:	97 e1       	ldi	r25, 0x17	; 23
    6b9c:	9f 93       	push	r25
    6b9e:	8f 93       	push	r24
    6ba0:	0e 94 88 46 	call	0x8d10	; 0x8d10 <snprintf_P>
    6ba4:	8d b7       	in	r24, 0x3d	; 61
    6ba6:	9e b7       	in	r25, 0x3e	; 62
    6ba8:	0f 96       	adiw	r24, 0x0f	; 15
    6baa:	0f b6       	in	r0, 0x3f	; 63
    6bac:	f8 94       	cli
    6bae:	9e bf       	out	0x3e, r25	; 62
    6bb0:	0f be       	out	0x3f, r0	; 63
    6bb2:	8d bf       	out	0x3d, r24	; 61
    6bb4:	84 e5       	ldi	r24, 0x54	; 84
    6bb6:	97 e1       	ldi	r25, 0x17	; 23
    6bb8:	08 95       	ret

00006bba <clock_elapsed_begin>:
    6bba:	6c e4       	ldi	r22, 0x4C	; 76
    6bbc:	77 e1       	ldi	r23, 0x17	; 23
    6bbe:	80 e0       	ldi	r24, 0x00	; 0
    6bc0:	90 e0       	ldi	r25, 0x00	; 0
    6bc2:	5f ce       	rjmp	.-834    	; 0x6882 <clock_gettime>
    6bc4:	08 95       	ret

00006bc6 <clock_elapsed_end>:
    6bc6:	a8 e0       	ldi	r26, 0x08	; 8
    6bc8:	b0 e0       	ldi	r27, 0x00	; 0
    6bca:	e9 ee       	ldi	r30, 0xE9	; 233
    6bcc:	f5 e3       	ldi	r31, 0x35	; 53
    6bce:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__prologue_saves__+0x1c>
    6bd2:	8c 01       	movw	r16, r24
    6bd4:	be 01       	movw	r22, r28
    6bd6:	6f 5f       	subi	r22, 0xFF	; 255
    6bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    6bda:	80 e0       	ldi	r24, 0x00	; 0
    6bdc:	90 e0       	ldi	r25, 0x00	; 0
    6bde:	51 de       	rcall	.-862    	; 0x6882 <clock_gettime>
    6be0:	6c e4       	ldi	r22, 0x4C	; 76
    6be2:	77 e1       	ldi	r23, 0x17	; 23
    6be4:	ce 01       	movw	r24, r28
    6be6:	01 96       	adiw	r24, 0x01	; 1
    6be8:	7d df       	rcall	.-262    	; 0x6ae4 <subtract_timespec>
    6bea:	01 15       	cp	r16, r1
    6bec:	11 05       	cpc	r17, r1
    6bee:	c1 f0       	breq	.+48     	; 0x6c20 <clock_elapsed_end+0x5a>
    6bf0:	f8 01       	movw	r30, r16
    6bf2:	80 81       	ld	r24, Z
    6bf4:	88 23       	and	r24, r24
    6bf6:	a1 f0       	breq	.+40     	; 0x6c20 <clock_elapsed_end+0x5a>
    6bf8:	ce 01       	movw	r24, r28
    6bfa:	01 96       	adiw	r24, 0x01	; 1
    6bfc:	b4 df       	rcall	.-152    	; 0x6b66 <ts_to_str>
    6bfe:	9f 93       	push	r25
    6c00:	8f 93       	push	r24
    6c02:	1f 93       	push	r17
    6c04:	0f 93       	push	r16
    6c06:	8b e9       	ldi	r24, 0x9B	; 155
    6c08:	95 e0       	ldi	r25, 0x05	; 5
    6c0a:	1f 92       	push	r1
    6c0c:	9f 93       	push	r25
    6c0e:	8f 93       	push	r24
    6c10:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    6c14:	0f b6       	in	r0, 0x3f	; 63
    6c16:	f8 94       	cli
    6c18:	de bf       	out	0x3e, r29	; 62
    6c1a:	0f be       	out	0x3f, r0	; 63
    6c1c:	cd bf       	out	0x3d, r28	; 61
    6c1e:	11 c0       	rjmp	.+34     	; 0x6c42 <clock_elapsed_end+0x7c>
    6c20:	ce 01       	movw	r24, r28
    6c22:	01 96       	adiw	r24, 0x01	; 1
    6c24:	a0 df       	rcall	.-192    	; 0x6b66 <ts_to_str>
    6c26:	9f 93       	push	r25
    6c28:	8f 93       	push	r24
    6c2a:	80 e9       	ldi	r24, 0x90	; 144
    6c2c:	95 e0       	ldi	r25, 0x05	; 5
    6c2e:	1f 92       	push	r1
    6c30:	9f 93       	push	r25
    6c32:	8f 93       	push	r24
    6c34:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    6c38:	0f 90       	pop	r0
    6c3a:	0f 90       	pop	r0
    6c3c:	0f 90       	pop	r0
    6c3e:	0f 90       	pop	r0
    6c40:	0f 90       	pop	r0
    6c42:	28 96       	adiw	r28, 0x08	; 8
    6c44:	e4 e0       	ldi	r30, 0x04	; 4
    6c46:	0c 94 5f e5 	jmp	0x1cabe	; 0x1cabe <__epilogue_restores__+0x1c>

00006c4a <clock_clear>:
    6c4a:	a8 e0       	ldi	r26, 0x08	; 8
    6c4c:	b0 e0       	ldi	r27, 0x00	; 0
    6c4e:	eb e2       	ldi	r30, 0x2B	; 43
    6c50:	f6 e3       	ldi	r31, 0x36	; 54
    6c52:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    6c56:	1d 82       	std	Y+5, r1	; 0x05
    6c58:	1e 82       	std	Y+6, r1	; 0x06
    6c5a:	1f 82       	std	Y+7, r1	; 0x07
    6c5c:	18 86       	std	Y+8, r1	; 0x08
    6c5e:	19 82       	std	Y+1, r1	; 0x01
    6c60:	1a 82       	std	Y+2, r1	; 0x02
    6c62:	1b 82       	std	Y+3, r1	; 0x03
    6c64:	1c 82       	std	Y+4, r1	; 0x04
    6c66:	ce 01       	movw	r24, r28
    6c68:	01 96       	adiw	r24, 0x01	; 1
    6c6a:	bd de       	rcall	.-646    	; 0x69e6 <clock_settime.part.2>
    6c6c:	e2 e6       	ldi	r30, 0x62	; 98
    6c6e:	f9 e1       	ldi	r31, 0x19	; 25
    6c70:	11 82       	std	Z+1, r1	; 0x01
    6c72:	10 82       	st	Z, r1
    6c74:	13 82       	std	Z+3, r1	; 0x03
    6c76:	12 82       	std	Z+2, r1	; 0x02
    6c78:	28 96       	adiw	r28, 0x08	; 8
    6c7a:	e2 e0       	ldi	r30, 0x02	; 2
    6c7c:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

00006c80 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6c80:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <timers_configured>
    6c84:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <timers_configured+0x1>
    6c88:	89 2b       	or	r24, r25
    6c8a:	69 f0       	breq	.+26     	; 0x6ca6 <enable_timers+0x26>
    6c8c:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <timers_enabled>
    6c90:	90 91 77 17 	lds	r25, 0x1777	; 0x801777 <timers_enabled+0x1>
    6c94:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6c96:	39 f4       	brne	.+14     	; 0x6ca6 <enable_timers+0x26>
        timers_enabled = 1;
    6c98:	b8 dd       	rcall	.-1168   	; 0x680a <enable_system_task>
    6c9a:	81 e0       	ldi	r24, 0x01	; 1
    6c9c:	90 e0       	ldi	r25, 0x00	; 0
    6c9e:	90 93 77 17 	sts	0x1777, r25	; 0x801777 <timers_enabled+0x1>
    6ca2:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <timers_enabled>
    6ca6:	08 95       	ret

00006ca8 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6ca8:	cf 93       	push	r28
    6caa:	df 93       	push	r29
    6cac:	ca e4       	ldi	r28, 0x4A	; 74
    6cae:	d9 e1       	ldi	r29, 0x19	; 25
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    6cb2:	88 23       	and	r24, r24
    6cb4:	29 f0       	breq	.+10     	; 0x6cc0 <execute_timers+0x18>
    6cb6:	e8 81       	ld	r30, Y
    6cb8:	f9 81       	ldd	r31, Y+1	; 0x01
    6cba:	30 97       	sbiw	r30, 0x00	; 0
    6cbc:	09 f0       	breq	.+2      	; 0x6cc0 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6cbe:	09 95       	icall
    6cc0:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6cc2:	89 e1       	ldi	r24, 0x19	; 25
    6cc4:	c2 36       	cpi	r28, 0x62	; 98
    6cc6:	d8 07       	cpc	r29, r24
    6cc8:	99 f7       	brne	.-26     	; 0x6cb0 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6cca:	df 91       	pop	r29
    6ccc:	cf 91       	pop	r28
    6cce:	08 95       	ret

00006cd0 <init_timers>:
//
/// @return  void
MEMSPACE
void init_timers()
{
    printf("Timers init called\n");
    6cd0:	8c e7       	ldi	r24, 0x7C	; 124
    6cd2:	95 e0       	ldi	r25, 0x05	; 5
    6cd4:	1f 92       	push	r1
    6cd6:	9f 93       	push	r25
    6cd8:	8f 93       	push	r24
    6cda:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>

    if(!timers_configured)
    6cde:	0f 90       	pop	r0
    6ce0:	0f 90       	pop	r0
    6ce2:	0f 90       	pop	r0
    6ce4:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <timers_configured>
    6ce8:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <timers_configured+0x1>
    6cec:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6cee:	a9 f4       	brne	.+42     	; 0x6d1a <init_timers+0x4a>
        timers_configured = 1;
    6cf0:	8e dd       	rcall	.-1252   	; 0x680e <install_timers_isr>
    6cf2:	81 e0       	ldi	r24, 0x01	; 1
    6cf4:	90 e0       	ldi	r25, 0x00	; 0
    6cf6:	90 93 75 17 	sts	0x1775, r25	; 0x801775 <timers_configured+0x1>
    6cfa:	80 93 74 17 	sts	0x1774, r24	; 0x801774 <timers_configured>
        timers_enabled = 0;
    6cfe:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <timers_enabled+0x1>
    6d02:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <timers_enabled>
        printf("Timers configured\n");
    6d06:	89 e6       	ldi	r24, 0x69	; 105
    6d08:	95 e0       	ldi	r25, 0x05	; 5
    6d0a:	1f 92       	push	r1
    6d0c:	9f 93       	push	r25
    6d0e:	8f 93       	push	r24
    6d10:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    }

    delete_all_timers();
    6d14:	0f 90       	pop	r0

    clock_clear();
    6d16:	0f 90       	pop	r0
    6d18:	0f 90       	pop	r0
    printf("Clock Init\n");
    6d1a:	d9 de       	rcall	.-590    	; 0x6ace <delete_all_timers>
    6d1c:	96 df       	rcall	.-212    	; 0x6c4a <clock_clear>
    6d1e:	8d e5       	ldi	r24, 0x5D	; 93
    6d20:	95 e0       	ldi	r25, 0x05	; 5
    6d22:	1f 92       	push	r1
    6d24:	9f 93       	push	r25
    6d26:	8f 93       	push	r24

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6d28:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    6d2c:	61 e0       	ldi	r22, 0x01	; 1
    6d2e:	70 e0       	ldi	r23, 0x00	; 0
    6d30:	86 eb       	ldi	r24, 0xB6	; 182
    6d32:	94 e3       	ldi	r25, 0x34	; 52
    6d34:	96 de       	rcall	.-724    	; 0x6a62 <set_timers>
    6d36:	0f 90       	pop	r0
    6d38:	0f 90       	pop	r0
    6d3a:	0f 90       	pop	r0
        printf("Clock task init failed\n");
    6d3c:	01 96       	adiw	r24, 0x01	; 1
    6d3e:	51 f4       	brne	.+20     	; 0x6d54 <init_timers+0x84>
    6d40:	85 e4       	ldi	r24, 0x45	; 69
    6d42:	95 e0       	ldi	r25, 0x05	; 5
    6d44:	1f 92       	push	r1
    6d46:	9f 93       	push	r25
    6d48:	8f 93       	push	r24
    6d4a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    6d4e:	0f 90       	pop	r0
    printf("Clock Installed\n");
    6d50:	0f 90       	pop	r0
    6d52:	0f 90       	pop	r0
    6d54:	84 e3       	ldi	r24, 0x34	; 52
    6d56:	95 e0       	ldi	r25, 0x05	; 5
    6d58:	1f 92       	push	r1
    6d5a:	9f 93       	push	r25

    enable_timers();
    6d5c:	8f 93       	push	r24
    6d5e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>

    printf("Timers enabled\n");
    6d62:	8e df       	rcall	.-228    	; 0x6c80 <enable_timers>
    6d64:	84 e2       	ldi	r24, 0x24	; 36
    6d66:	95 e0       	ldi	r25, 0x05	; 5
    6d68:	1f 92       	push	r1
    6d6a:	9f 93       	push	r25
    6d6c:	8f 93       	push	r24
}
    6d6e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    6d72:	0f 90       	pop	r0
    6d74:	0f 90       	pop	r0
    6d76:	0f 90       	pop	r0
    6d78:	0f 90       	pop	r0
    6d7a:	0f 90       	pop	r0
    6d7c:	0f 90       	pop	r0
    6d7e:	08 95       	ret

00006d80 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id, struct timespec *res)
{
    res->tv_sec = 0;
    6d80:	fb 01       	movw	r30, r22
    6d82:	10 82       	st	Z, r1
    6d84:	11 82       	std	Z+1, r1	; 0x01
    6d86:	12 82       	std	Z+2, r1	; 0x02
    6d88:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6d8a:	80 e4       	ldi	r24, 0x40	; 64
    6d8c:	92 e4       	ldi	r25, 0x42	; 66
    6d8e:	af e0       	ldi	r26, 0x0F	; 15
    6d90:	b0 e0       	ldi	r27, 0x00	; 0
    6d92:	84 83       	std	Z+4, r24	; 0x04
    6d94:	95 83       	std	Z+5, r25	; 0x05
    6d96:	a6 83       	std	Z+6, r26	; 0x06
    6d98:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
}
    6d9a:	80 e0       	ldi	r24, 0x00	; 0
    6d9c:	90 e0       	ldi	r25, 0x00	; 0
    6d9e:	08 95       	ret

00006da0 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id, const struct timespec *ts)
{
    if(clk_id)
    6da0:	89 2b       	or	r24, r25
    6da2:	19 f4       	brne	.+6      	; 0x6daa <clock_settime+0xa>
    6da4:	cb 01       	movw	r24, r22
    6da6:	1f ce       	rjmp	.-962    	; 0x69e6 <clock_settime.part.2>
    6da8:	08 95       	ret
        return(-1);
    6daa:	8f ef       	ldi	r24, 0xFF	; 255
    6dac:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6dae:	08 95       	ret

00006db0 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6db0:	9c 01       	movw	r18, r24
    6db2:	83 70       	andi	r24, 0x03	; 3
    6db4:	99 27       	eor	r25, r25
    6db6:	00 97       	sbiw	r24, 0x00	; 0
    6db8:	69 f4       	brne	.+26     	; 0x6dd4 <IS_Leap+0x24>
    6dba:	2c 36       	cpi	r18, 0x6C	; 108
    6dbc:	47 e0       	ldi	r20, 0x07	; 7
    6dbe:	34 07       	cpc	r19, r20
    6dc0:	59 f0       	breq	.+22     	; 0x6dd8 <IS_Leap+0x28>
    6dc2:	51 e0       	ldi	r21, 0x01	; 1
    6dc4:	40 e0       	ldi	r20, 0x00	; 0
    6dc6:	24 33       	cpi	r18, 0x34	; 52
    6dc8:	38 40       	sbci	r19, 0x08	; 8
    6dca:	09 f4       	brne	.+2      	; 0x6dce <IS_Leap+0x1e>
    6dcc:	50 e0       	ldi	r21, 0x00	; 0
    6dce:	85 2f       	mov	r24, r21
    6dd0:	94 2f       	mov	r25, r20
    6dd2:	08 95       	ret
    6dd4:	80 e0       	ldi	r24, 0x00	; 0
    6dd6:	90 e0       	ldi	r25, 0x00	; 0
    6dd8:	08 95       	ret

00006dda <tm_mon_to_ascii>:
    6dda:	8c 30       	cpi	r24, 0x0C	; 12
    6ddc:	91 05       	cpc	r25, r1
    6dde:	40 f4       	brcc	.+16     	; 0x6df0 <tm_mon_to_ascii+0x16>
    6de0:	88 0f       	add	r24, r24
    6de2:	99 1f       	adc	r25, r25
    6de4:	fc 01       	movw	r30, r24
    6de6:	ee 5e       	subi	r30, 0xEE	; 238
    6de8:	fe 4f       	sbci	r31, 0xFE	; 254
    6dea:	80 81       	ld	r24, Z
    6dec:	91 81       	ldd	r25, Z+1	; 0x01
    6dee:	08 95       	ret
    6df0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__Month+0x18>
    6df4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__Month+0x19>
    6df8:	08 95       	ret

00006dfa <Days_Per_Month>:
    6dfa:	cf 93       	push	r28
    6dfc:	df 93       	push	r29
    6dfe:	8c 30       	cpi	r24, 0x0C	; 12
    6e00:	91 05       	cpc	r25, r1
    6e02:	24 f0       	brlt	.+8      	; 0x6e0c <Days_Per_Month+0x12>
    6e04:	6f 5f       	subi	r22, 0xFF	; 255
    6e06:	7f 4f       	sbci	r23, 0xFF	; 255
    6e08:	0c 97       	sbiw	r24, 0x0c	; 12
    6e0a:	f9 cf       	rjmp	.-14     	; 0x6dfe <Days_Per_Month+0x4>
    6e0c:	97 ff       	sbrs	r25, 7
    6e0e:	04 c0       	rjmp	.+8      	; 0x6e18 <Days_Per_Month+0x1e>
    6e10:	61 50       	subi	r22, 0x01	; 1
    6e12:	71 09       	sbc	r23, r1
    6e14:	0c 96       	adiw	r24, 0x0c	; 12
    6e16:	fa cf       	rjmp	.-12     	; 0x6e0c <Days_Per_Month+0x12>
    6e18:	fc 01       	movw	r30, r24
    6e1a:	ee 0f       	add	r30, r30
    6e1c:	ff 1f       	adc	r31, r31
    6e1e:	ed 59       	subi	r30, 0x9D	; 157
    6e20:	fd 4f       	sbci	r31, 0xFD	; 253
    6e22:	c0 81       	ld	r28, Z
    6e24:	d1 81       	ldd	r29, Z+1	; 0x01
    6e26:	01 97       	sbiw	r24, 0x01	; 1
    6e28:	29 f4       	brne	.+10     	; 0x6e34 <Days_Per_Month+0x3a>
    6e2a:	cb 01       	movw	r24, r22
    6e2c:	c1 df       	rcall	.-126    	; 0x6db0 <IS_Leap>
    6e2e:	89 2b       	or	r24, r25
    6e30:	09 f0       	breq	.+2      	; 0x6e34 <Days_Per_Month+0x3a>
    6e32:	21 96       	adiw	r28, 0x01	; 1
    6e34:	ce 01       	movw	r24, r28
    6e36:	df 91       	pop	r29
    6e38:	cf 91       	pop	r28
    6e3a:	08 95       	ret

00006e3c <time_to_tm>:
    6e3c:	a0 e0       	ldi	r26, 0x00	; 0
    6e3e:	b0 e0       	ldi	r27, 0x00	; 0
    6e40:	e4 e2       	ldi	r30, 0x24	; 36
    6e42:	f7 e3       	ldi	r31, 0x37	; 55
    6e44:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__prologue_saves__+0x4>
    6e48:	e8 01       	movw	r28, r16
    6e4a:	e6 e1       	ldi	r30, 0x16	; 22
    6e4c:	d8 01       	movw	r26, r16
    6e4e:	1d 92       	st	X+, r1
    6e50:	ea 95       	dec	r30
    6e52:	e9 f7       	brne	.-6      	; 0x6e4e <time_to_tm+0x12>
    6e54:	61 15       	cp	r22, r1
    6e56:	bd e5       	ldi	r27, 0x5D	; 93
    6e58:	7b 07       	cpc	r23, r27
    6e5a:	bd ef       	ldi	r27, 0xFD	; 253
    6e5c:	8b 07       	cpc	r24, r27
    6e5e:	bf ef       	ldi	r27, 0xFF	; 255
    6e60:	9b 07       	cpc	r25, r27
    6e62:	08 f0       	brcs	.+2      	; 0x6e66 <time_to_tm+0x2a>
    6e64:	c0 c0       	rjmp	.+384    	; 0x6fe6 <time_to_tm+0x1aa>
    6e66:	6b 01       	movw	r12, r22
    6e68:	7c 01       	movw	r14, r24
    6e6a:	c2 1a       	sub	r12, r18
    6e6c:	d3 0a       	sbc	r13, r19
    6e6e:	e4 0a       	sbc	r14, r20
    6e70:	f5 0a       	sbc	r15, r21
    6e72:	46 01       	movw	r8, r12
    6e74:	57 01       	movw	r10, r14
    6e76:	e0 e8       	ldi	r30, 0x80	; 128
    6e78:	ce 16       	cp	r12, r30
    6e7a:	ee ea       	ldi	r30, 0xAE	; 174
    6e7c:	de 06       	cpc	r13, r30
    6e7e:	ee ef       	ldi	r30, 0xFE	; 254
    6e80:	ee 06       	cpc	r14, r30
    6e82:	ef ef       	ldi	r30, 0xFF	; 255
    6e84:	fe 06       	cpc	r15, r30
    6e86:	50 f0       	brcs	.+20     	; 0x6e9c <time_to_tm+0x60>
    6e88:	80 e8       	ldi	r24, 0x80	; 128
    6e8a:	88 0e       	add	r8, r24
    6e8c:	81 e5       	ldi	r24, 0x51	; 81
    6e8e:	98 1e       	adc	r9, r24
    6e90:	81 e0       	ldi	r24, 0x01	; 1
    6e92:	a8 1e       	adc	r10, r24
    6e94:	b1 1c       	adc	r11, r1
    6e96:	01 e0       	ldi	r16, 0x01	; 1
    6e98:	10 e0       	ldi	r17, 0x00	; 0
    6e9a:	02 c0       	rjmp	.+4      	; 0x6ea0 <time_to_tm+0x64>
    6e9c:	00 e0       	ldi	r16, 0x00	; 0
    6e9e:	10 e0       	ldi	r17, 0x00	; 0
    6ea0:	8c e3       	ldi	r24, 0x3C	; 60
    6ea2:	48 2e       	mov	r4, r24
    6ea4:	51 2c       	mov	r5, r1
    6ea6:	61 2c       	mov	r6, r1
    6ea8:	71 2c       	mov	r7, r1
    6eaa:	c5 01       	movw	r24, r10
    6eac:	b4 01       	movw	r22, r8
    6eae:	a3 01       	movw	r20, r6
    6eb0:	92 01       	movw	r18, r4
    6eb2:	0e 94 b3 e4 	call	0x1c966	; 0x1c966 <__udivmodsi4>
    6eb6:	79 83       	std	Y+1, r23	; 0x01
    6eb8:	68 83       	st	Y, r22
    6eba:	ca 01       	movw	r24, r20
    6ebc:	b9 01       	movw	r22, r18
    6ebe:	a3 01       	movw	r20, r6
    6ec0:	92 01       	movw	r18, r4
    6ec2:	0e 94 b3 e4 	call	0x1c966	; 0x1c966 <__udivmodsi4>
    6ec6:	7b 83       	std	Y+3, r23	; 0x03
    6ec8:	6a 83       	std	Y+2, r22	; 0x02
    6eca:	c5 01       	movw	r24, r10
    6ecc:	b4 01       	movw	r22, r8
    6ece:	20 e1       	ldi	r18, 0x10	; 16
    6ed0:	3e e0       	ldi	r19, 0x0E	; 14
    6ed2:	40 e0       	ldi	r20, 0x00	; 0
    6ed4:	50 e0       	ldi	r21, 0x00	; 0
    6ed6:	0e 94 b3 e4 	call	0x1c966	; 0x1c966 <__udivmodsi4>
    6eda:	ca 01       	movw	r24, r20
    6edc:	b9 01       	movw	r22, r18
    6ede:	28 e1       	ldi	r18, 0x18	; 24
    6ee0:	30 e0       	ldi	r19, 0x00	; 0
    6ee2:	40 e0       	ldi	r20, 0x00	; 0
    6ee4:	50 e0       	ldi	r21, 0x00	; 0
    6ee6:	0e 94 b3 e4 	call	0x1c966	; 0x1c966 <__udivmodsi4>
    6eea:	7d 83       	std	Y+5, r23	; 0x05
    6eec:	6c 83       	std	Y+4, r22	; 0x04
    6eee:	01 15       	cp	r16, r1
    6ef0:	11 05       	cpc	r17, r1
    6ef2:	89 f0       	breq	.+34     	; 0x6f16 <time_to_tm+0xda>
    6ef4:	85 e4       	ldi	r24, 0x45	; 69
    6ef6:	90 e0       	ldi	r25, 0x00	; 0
    6ef8:	9b 87       	std	Y+11, r25	; 0x0b
    6efa:	8a 87       	std	Y+10, r24	; 0x0a
    6efc:	8b e0       	ldi	r24, 0x0B	; 11
    6efe:	90 e0       	ldi	r25, 0x00	; 0
    6f00:	99 87       	std	Y+9, r25	; 0x09
    6f02:	88 87       	std	Y+8, r24	; 0x08
    6f04:	8f e1       	ldi	r24, 0x1F	; 31
    6f06:	90 e0       	ldi	r25, 0x00	; 0
    6f08:	9f 83       	std	Y+7, r25	; 0x07
    6f0a:	8e 83       	std	Y+6, r24	; 0x06
    6f0c:	83 e0       	ldi	r24, 0x03	; 3
    6f0e:	90 e0       	ldi	r25, 0x00	; 0
    6f10:	9d 87       	std	Y+13, r25	; 0x0d
    6f12:	8c 87       	std	Y+12, r24	; 0x0c
    6f14:	65 c0       	rjmp	.+202    	; 0x6fe0 <time_to_tm+0x1a4>
    6f16:	c5 01       	movw	r24, r10
    6f18:	b4 01       	movw	r22, r8
    6f1a:	20 e8       	ldi	r18, 0x80	; 128
    6f1c:	31 e5       	ldi	r19, 0x51	; 81
    6f1e:	41 e0       	ldi	r20, 0x01	; 1
    6f20:	50 e0       	ldi	r21, 0x00	; 0
    6f22:	0e 94 b3 e4 	call	0x1c966	; 0x1c966 <__udivmodsi4>
    6f26:	49 01       	movw	r8, r18
    6f28:	5a 01       	movw	r10, r20
    6f2a:	ca 01       	movw	r24, r20
    6f2c:	b9 01       	movw	r22, r18
    6f2e:	6c 5f       	subi	r22, 0xFC	; 252
    6f30:	7f 4f       	sbci	r23, 0xFF	; 255
    6f32:	8f 4f       	sbci	r24, 0xFF	; 255
    6f34:	9f 4f       	sbci	r25, 0xFF	; 255
    6f36:	27 e0       	ldi	r18, 0x07	; 7
    6f38:	30 e0       	ldi	r19, 0x00	; 0
    6f3a:	40 e0       	ldi	r20, 0x00	; 0
    6f3c:	50 e0       	ldi	r21, 0x00	; 0
    6f3e:	0e 94 d5 e4 	call	0x1c9aa	; 0x1c9aa <__divmodsi4>
    6f42:	7d 87       	std	Y+13, r23	; 0x0d
    6f44:	6c 87       	std	Y+12, r22	; 0x0c
    6f46:	02 eb       	ldi	r16, 0xB2	; 178
    6f48:	17 e0       	ldi	r17, 0x07	; 7
    6f4a:	c8 01       	movw	r24, r16
    6f4c:	31 df       	rcall	.-414    	; 0x6db0 <IS_Leap>
    6f4e:	00 97       	sbiw	r24, 0x00	; 0
    6f50:	19 f4       	brne	.+6      	; 0x6f58 <time_to_tm+0x11c>
    6f52:	4d e6       	ldi	r20, 0x6D	; 109
    6f54:	51 e0       	ldi	r21, 0x01	; 1
    6f56:	02 c0       	rjmp	.+4      	; 0x6f5c <time_to_tm+0x120>
    6f58:	4e e6       	ldi	r20, 0x6E	; 110
    6f5a:	51 e0       	ldi	r21, 0x01	; 1
    6f5c:	05 2e       	mov	r0, r21
    6f5e:	00 0c       	add	r0, r0
    6f60:	66 0b       	sbc	r22, r22
    6f62:	77 0b       	sbc	r23, r23
    6f64:	84 16       	cp	r8, r20
    6f66:	95 06       	cpc	r9, r21
    6f68:	a6 06       	cpc	r10, r22
    6f6a:	b7 06       	cpc	r11, r23
    6f6c:	3c f0       	brlt	.+14     	; 0x6f7c <time_to_tm+0x140>
    6f6e:	0f 5f       	subi	r16, 0xFF	; 255
    6f70:	1f 4f       	sbci	r17, 0xFF	; 255
    6f72:	84 1a       	sub	r8, r20
    6f74:	95 0a       	sbc	r9, r21
    6f76:	a6 0a       	sbc	r10, r22
    6f78:	b7 0a       	sbc	r11, r23
    6f7a:	e7 cf       	rjmp	.-50     	; 0x6f4a <time_to_tm+0x10e>
    6f7c:	0c 56       	subi	r16, 0x6C	; 108
    6f7e:	17 40       	sbci	r17, 0x07	; 7
    6f80:	1b 87       	std	Y+11, r17	; 0x0b
    6f82:	0a 87       	std	Y+10, r16	; 0x0a
    6f84:	9f 86       	std	Y+15, r9	; 0x0f
    6f86:	8e 86       	std	Y+14, r8	; 0x0e
    6f88:	e3 e6       	ldi	r30, 0x63	; 99
    6f8a:	f2 e0       	ldi	r31, 0x02	; 2
    6f8c:	20 e0       	ldi	r18, 0x00	; 0
    6f8e:	30 e0       	ldi	r19, 0x00	; 0
    6f90:	18 14       	cp	r1, r8
    6f92:	19 04       	cpc	r1, r9
    6f94:	1a 04       	cpc	r1, r10
    6f96:	1b 04       	cpc	r1, r11
    6f98:	e4 f4       	brge	.+56     	; 0x6fd2 <time_to_tm+0x196>
    6f9a:	2c 30       	cpi	r18, 0x0C	; 12
    6f9c:	31 05       	cpc	r19, r1
    6f9e:	c9 f0       	breq	.+50     	; 0x6fd2 <time_to_tm+0x196>
    6fa0:	41 91       	ld	r20, Z+
    6fa2:	51 91       	ld	r21, Z+
    6fa4:	21 30       	cpi	r18, 0x01	; 1
    6fa6:	31 05       	cpc	r19, r1
    6fa8:	21 f4       	brne	.+8      	; 0x6fb2 <time_to_tm+0x176>
    6faa:	00 97       	sbiw	r24, 0x00	; 0
    6fac:	11 f0       	breq	.+4      	; 0x6fb2 <time_to_tm+0x176>
    6fae:	4f 5f       	subi	r20, 0xFF	; 255
    6fb0:	5f 4f       	sbci	r21, 0xFF	; 255
    6fb2:	05 2e       	mov	r0, r21
    6fb4:	00 0c       	add	r0, r0
    6fb6:	66 0b       	sbc	r22, r22
    6fb8:	77 0b       	sbc	r23, r23
    6fba:	84 16       	cp	r8, r20
    6fbc:	95 06       	cpc	r9, r21
    6fbe:	a6 06       	cpc	r10, r22
    6fc0:	b7 06       	cpc	r11, r23
    6fc2:	3c f0       	brlt	.+14     	; 0x6fd2 <time_to_tm+0x196>
    6fc4:	84 1a       	sub	r8, r20
    6fc6:	95 0a       	sbc	r9, r21
    6fc8:	a6 0a       	sbc	r10, r22
    6fca:	b7 0a       	sbc	r11, r23
    6fcc:	2f 5f       	subi	r18, 0xFF	; 255
    6fce:	3f 4f       	sbci	r19, 0xFF	; 255
    6fd0:	df cf       	rjmp	.-66     	; 0x6f90 <time_to_tm+0x154>
    6fd2:	39 87       	std	Y+9, r19	; 0x09
    6fd4:	28 87       	std	Y+8, r18	; 0x08
    6fd6:	af ef       	ldi	r26, 0xFF	; 255
    6fd8:	8a 1a       	sub	r8, r26
    6fda:	9a 0a       	sbc	r9, r26
    6fdc:	9f 82       	std	Y+7, r9	; 0x07
    6fde:	8e 82       	std	Y+6, r8	; 0x06
    6fe0:	b6 01       	movw	r22, r12
    6fe2:	c7 01       	movw	r24, r14
    6fe4:	04 c0       	rjmp	.+8      	; 0x6fee <time_to_tm+0x1b2>
    6fe6:	6f ef       	ldi	r22, 0xFF	; 255
    6fe8:	7f ef       	ldi	r23, 0xFF	; 255
    6fea:	8f ef       	ldi	r24, 0xFF	; 255
    6fec:	9f ef       	ldi	r25, 0xFF	; 255
    6fee:	cd b7       	in	r28, 0x3d	; 61
    6ff0:	de b7       	in	r29, 0x3e	; 62
    6ff2:	e0 e1       	ldi	r30, 0x10	; 16
    6ff4:	0c 94 53 e5 	jmp	0x1caa6	; 0x1caa6 <__epilogue_restores__+0x4>

00006ff8 <gmtime_r>:
    6ff8:	0f 93       	push	r16
    6ffa:	1f 93       	push	r17
    6ffc:	cf 93       	push	r28
    6ffe:	df 93       	push	r29
    7000:	eb 01       	movw	r28, r22
    7002:	fc 01       	movw	r30, r24
    7004:	60 81       	ld	r22, Z
    7006:	71 81       	ldd	r23, Z+1	; 0x01
    7008:	82 81       	ldd	r24, Z+2	; 0x02
    700a:	93 81       	ldd	r25, Z+3	; 0x03
    700c:	8e 01       	movw	r16, r28
    700e:	20 e0       	ldi	r18, 0x00	; 0
    7010:	30 e0       	ldi	r19, 0x00	; 0
    7012:	a9 01       	movw	r20, r18
    7014:	13 df       	rcall	.-474    	; 0x6e3c <time_to_tm>
    7016:	ce 01       	movw	r24, r28
    7018:	df 91       	pop	r29
    701a:	cf 91       	pop	r28
    701c:	1f 91       	pop	r17
    701e:	0f 91       	pop	r16
    7020:	08 95       	ret

00007022 <gmtime>:
    7022:	26 e9       	ldi	r18, 0x96	; 150
    7024:	37 e1       	ldi	r19, 0x17	; 23
    7026:	30 93 ad 17 	sts	0x17AD, r19	; 0x8017ad <p.3754+0x1>
    702a:	20 93 ac 17 	sts	0x17AC, r18	; 0x8017ac <p.3754>
    702e:	b9 01       	movw	r22, r18
    7030:	e3 df       	rcall	.-58     	; 0x6ff8 <gmtime_r>
    7032:	86 e9       	ldi	r24, 0x96	; 150
    7034:	97 e1       	ldi	r25, 0x17	; 23
    7036:	08 95       	ret

00007038 <gettimezone>:
    7038:	e2 e6       	ldi	r30, 0x62	; 98
    703a:	f9 e1       	ldi	r31, 0x19	; 25
    703c:	20 81       	ld	r18, Z
    703e:	31 81       	ldd	r19, Z+1	; 0x01
    7040:	dc 01       	movw	r26, r24
    7042:	11 96       	adiw	r26, 0x01	; 1
    7044:	3c 93       	st	X, r19
    7046:	2e 93       	st	-X, r18
    7048:	22 81       	ldd	r18, Z+2	; 0x02
    704a:	33 81       	ldd	r19, Z+3	; 0x03
    704c:	13 96       	adiw	r26, 0x03	; 3
    704e:	3c 93       	st	X, r19
    7050:	2e 93       	st	-X, r18
    7052:	12 97       	sbiw	r26, 0x02	; 2
    7054:	80 e0       	ldi	r24, 0x00	; 0
    7056:	90 e0       	ldi	r25, 0x00	; 0
    7058:	08 95       	ret

0000705a <settimezone>:
    705a:	dc 01       	movw	r26, r24
    705c:	2d 91       	ld	r18, X+
    705e:	3c 91       	ld	r19, X
    7060:	11 97       	sbiw	r26, 0x01	; 1
    7062:	e2 e6       	ldi	r30, 0x62	; 98
    7064:	f9 e1       	ldi	r31, 0x19	; 25
    7066:	31 83       	std	Z+1, r19	; 0x01
    7068:	20 83       	st	Z, r18
    706a:	12 96       	adiw	r26, 0x02	; 2
    706c:	8d 91       	ld	r24, X+
    706e:	9c 91       	ld	r25, X
    7070:	13 97       	sbiw	r26, 0x03	; 3
    7072:	93 83       	std	Z+3, r25	; 0x03
    7074:	82 83       	std	Z+2, r24	; 0x02
    7076:	80 e0       	ldi	r24, 0x00	; 0
    7078:	90 e0       	ldi	r25, 0x00	; 0
    707a:	08 95       	ret

0000707c <gettimeofday>:
    707c:	a8 e0       	ldi	r26, 0x08	; 8
    707e:	b0 e0       	ldi	r27, 0x00	; 0
    7080:	e4 e4       	ldi	r30, 0x44	; 68
    7082:	f8 e3       	ldi	r31, 0x38	; 56
    7084:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__prologue_saves__+0x18>
    7088:	8c 01       	movw	r16, r24
    708a:	7b 01       	movw	r14, r22
    708c:	be 01       	movw	r22, r28
    708e:	6f 5f       	subi	r22, 0xFF	; 255
    7090:	7f 4f       	sbci	r23, 0xFF	; 255
    7092:	80 e0       	ldi	r24, 0x00	; 0
    7094:	90 e0       	ldi	r25, 0x00	; 0
    7096:	f5 db       	rcall	.-2070   	; 0x6882 <clock_gettime>
    7098:	89 81       	ldd	r24, Y+1	; 0x01
    709a:	9a 81       	ldd	r25, Y+2	; 0x02
    709c:	ab 81       	ldd	r26, Y+3	; 0x03
    709e:	bc 81       	ldd	r27, Y+4	; 0x04
    70a0:	f8 01       	movw	r30, r16
    70a2:	80 83       	st	Z, r24
    70a4:	91 83       	std	Z+1, r25	; 0x01
    70a6:	a2 83       	std	Z+2, r26	; 0x02
    70a8:	b3 83       	std	Z+3, r27	; 0x03
    70aa:	6d 81       	ldd	r22, Y+5	; 0x05
    70ac:	7e 81       	ldd	r23, Y+6	; 0x06
    70ae:	8f 81       	ldd	r24, Y+7	; 0x07
    70b0:	98 85       	ldd	r25, Y+8	; 0x08
    70b2:	28 ee       	ldi	r18, 0xE8	; 232
    70b4:	33 e0       	ldi	r19, 0x03	; 3
    70b6:	40 e0       	ldi	r20, 0x00	; 0
    70b8:	50 e0       	ldi	r21, 0x00	; 0
    70ba:	0e 94 d5 e4 	call	0x1c9aa	; 0x1c9aa <__divmodsi4>
    70be:	f8 01       	movw	r30, r16
    70c0:	24 83       	std	Z+4, r18	; 0x04
    70c2:	35 83       	std	Z+5, r19	; 0x05
    70c4:	46 83       	std	Z+6, r20	; 0x06
    70c6:	57 83       	std	Z+7, r21	; 0x07
    70c8:	c7 01       	movw	r24, r14
    70ca:	b6 df       	rcall	.-148    	; 0x7038 <gettimezone>
    70cc:	80 e0       	ldi	r24, 0x00	; 0
    70ce:	90 e0       	ldi	r25, 0x00	; 0
    70d0:	28 96       	adiw	r28, 0x08	; 8
    70d2:	e6 e0       	ldi	r30, 0x06	; 6
    70d4:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

000070d8 <time>:
    70d8:	cf 93       	push	r28
    70da:	df 93       	push	r29
    70dc:	ec 01       	movw	r28, r24
    70de:	68 e7       	ldi	r22, 0x78	; 120
    70e0:	77 e1       	ldi	r23, 0x17	; 23
    70e2:	80 e0       	ldi	r24, 0x00	; 0
    70e4:	90 e0       	ldi	r25, 0x00	; 0
    70e6:	cd db       	rcall	.-2150   	; 0x6882 <clock_gettime>
    70e8:	20 97       	sbiw	r28, 0x00	; 0
    70ea:	61 f0       	breq	.+24     	; 0x7104 <time+0x2c>
    70ec:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <ts.3832>
    70f0:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <ts.3832+0x1>
    70f4:	a0 91 7a 17 	lds	r26, 0x177A	; 0x80177a <ts.3832+0x2>
    70f8:	b0 91 7b 17 	lds	r27, 0x177B	; 0x80177b <ts.3832+0x3>
    70fc:	88 83       	st	Y, r24
    70fe:	99 83       	std	Y+1, r25	; 0x01
    7100:	aa 83       	std	Y+2, r26	; 0x02
    7102:	bb 83       	std	Y+3, r27	; 0x03
    7104:	60 91 78 17 	lds	r22, 0x1778	; 0x801778 <ts.3832>
    7108:	70 91 79 17 	lds	r23, 0x1779	; 0x801779 <ts.3832+0x1>
    710c:	80 91 7a 17 	lds	r24, 0x177A	; 0x80177a <ts.3832+0x2>
    7110:	90 91 7b 17 	lds	r25, 0x177B	; 0x80177b <ts.3832+0x3>
    7114:	df 91       	pop	r29
    7116:	cf 91       	pop	r28
    7118:	08 95       	ret

0000711a <is_dst>:
    711a:	cf 92       	push	r12
    711c:	df 92       	push	r13
    711e:	ef 92       	push	r14
    7120:	ff 92       	push	r15
    7122:	6b 01       	movw	r12, r22
    7124:	7c 01       	movw	r14, r24
    7126:	ff d3       	rcall	.+2046   	; 0x7926 <set_dst>
    7128:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <dst>
    712c:	90 91 67 19 	lds	r25, 0x1967	; 0x801967 <dst+0x1>
    7130:	a0 91 68 19 	lds	r26, 0x1968	; 0x801968 <dst+0x2>
    7134:	b0 91 69 19 	lds	r27, 0x1969	; 0x801969 <dst+0x3>
    7138:	c8 16       	cp	r12, r24
    713a:	d9 06       	cpc	r13, r25
    713c:	ea 06       	cpc	r14, r26
    713e:	fb 06       	cpc	r15, r27
    7140:	88 f0       	brcs	.+34     	; 0x7164 <is_dst+0x4a>
    7142:	81 e0       	ldi	r24, 0x01	; 1
    7144:	90 e0       	ldi	r25, 0x00	; 0
    7146:	40 91 6a 19 	lds	r20, 0x196A	; 0x80196a <dst+0x4>
    714a:	50 91 6b 19 	lds	r21, 0x196B	; 0x80196b <dst+0x5>
    714e:	60 91 6c 19 	lds	r22, 0x196C	; 0x80196c <dst+0x6>
    7152:	70 91 6d 19 	lds	r23, 0x196D	; 0x80196d <dst+0x7>
    7156:	4c 15       	cp	r20, r12
    7158:	5d 05       	cpc	r21, r13
    715a:	6e 05       	cpc	r22, r14
    715c:	7f 05       	cpc	r23, r15
    715e:	20 f4       	brcc	.+8      	; 0x7168 <is_dst+0x4e>
    7160:	80 e0       	ldi	r24, 0x00	; 0
    7162:	02 c0       	rjmp	.+4      	; 0x7168 <is_dst+0x4e>
    7164:	80 e0       	ldi	r24, 0x00	; 0
    7166:	90 e0       	ldi	r25, 0x00	; 0
    7168:	ff 90       	pop	r15
    716a:	ef 90       	pop	r14
    716c:	df 90       	pop	r13
    716e:	cf 90       	pop	r12
    7170:	08 95       	ret

00007172 <localtime_r>:
    7172:	4f 92       	push	r4
    7174:	5f 92       	push	r5
    7176:	6f 92       	push	r6
    7178:	7f 92       	push	r7
    717a:	af 92       	push	r10
    717c:	bf 92       	push	r11
    717e:	cf 92       	push	r12
    7180:	df 92       	push	r13
    7182:	ef 92       	push	r14
    7184:	ff 92       	push	r15
    7186:	0f 93       	push	r16
    7188:	1f 93       	push	r17
    718a:	cf 93       	push	r28
    718c:	df 93       	push	r29
    718e:	00 d0       	rcall	.+0      	; 0x7190 <localtime_r+0x1e>
    7190:	00 d0       	rcall	.+0      	; 0x7192 <localtime_r+0x20>
    7192:	cd b7       	in	r28, 0x3d	; 61
    7194:	de b7       	in	r29, 0x3e	; 62
    7196:	5b 01       	movw	r10, r22
    7198:	fc 01       	movw	r30, r24
    719a:	40 80       	ld	r4, Z
    719c:	51 80       	ldd	r5, Z+1	; 0x01
    719e:	62 80       	ldd	r6, Z+2	; 0x02
    71a0:	73 80       	ldd	r7, Z+3	; 0x03
    71a2:	ce 01       	movw	r24, r28
    71a4:	01 96       	adiw	r24, 0x01	; 1
    71a6:	48 df       	rcall	.-368    	; 0x7038 <gettimezone>
    71a8:	a9 81       	ldd	r26, Y+1	; 0x01
    71aa:	ba 81       	ldd	r27, Y+2	; 0x02
    71ac:	2c e3       	ldi	r18, 0x3C	; 60
    71ae:	30 e0       	ldi	r19, 0x00	; 0
    71b0:	0e 94 0f e5 	call	0x1ca1e	; 0x1ca1e <__usmulhisi3>
    71b4:	6b 01       	movw	r12, r22
    71b6:	7c 01       	movw	r14, r24
    71b8:	c3 01       	movw	r24, r6
    71ba:	b2 01       	movw	r22, r4
    71bc:	6c 19       	sub	r22, r12
    71be:	7d 09       	sbc	r23, r13
    71c0:	8e 09       	sbc	r24, r14
    71c2:	9f 09       	sbc	r25, r15
    71c4:	aa df       	rcall	.-172    	; 0x711a <is_dst>
    71c6:	89 2b       	or	r24, r25
    71c8:	31 f0       	breq	.+12     	; 0x71d6 <localtime_r+0x64>
    71ca:	f0 e1       	ldi	r31, 0x10	; 16
    71cc:	cf 1a       	sub	r12, r31
    71ce:	fe e0       	ldi	r31, 0x0E	; 14
    71d0:	df 0a       	sbc	r13, r31
    71d2:	e1 08       	sbc	r14, r1
    71d4:	f1 08       	sbc	r15, r1
    71d6:	85 01       	movw	r16, r10
    71d8:	a7 01       	movw	r20, r14
    71da:	96 01       	movw	r18, r12
    71dc:	c3 01       	movw	r24, r6
    71de:	b2 01       	movw	r22, r4
    71e0:	2d de       	rcall	.-934    	; 0x6e3c <time_to_tm>
    71e2:	c5 01       	movw	r24, r10
    71e4:	0f 90       	pop	r0
    71e6:	0f 90       	pop	r0
    71e8:	0f 90       	pop	r0
    71ea:	0f 90       	pop	r0
    71ec:	df 91       	pop	r29
    71ee:	cf 91       	pop	r28
    71f0:	1f 91       	pop	r17
    71f2:	0f 91       	pop	r16
    71f4:	ff 90       	pop	r15
    71f6:	ef 90       	pop	r14
    71f8:	df 90       	pop	r13
    71fa:	cf 90       	pop	r12
    71fc:	bf 90       	pop	r11
    71fe:	af 90       	pop	r10
    7200:	7f 90       	pop	r7
    7202:	6f 90       	pop	r6
    7204:	5f 90       	pop	r5
    7206:	4f 90       	pop	r4
    7208:	08 95       	ret

0000720a <localtime>:
    720a:	60 e8       	ldi	r22, 0x80	; 128
    720c:	77 e1       	ldi	r23, 0x17	; 23
    720e:	b1 cf       	rjmp	.-158    	; 0x7172 <localtime_r>
    7210:	08 95       	ret

00007212 <normalize>:
    7212:	aa e0       	ldi	r26, 0x0A	; 10
    7214:	b0 e0       	ldi	r27, 0x00	; 0
    7216:	ef e0       	ldi	r30, 0x0F	; 15
    7218:	f9 e3       	ldi	r31, 0x39	; 57
    721a:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    721e:	7c 01       	movw	r14, r24
    7220:	7a 87       	std	Y+10, r23	; 0x0a
    7222:	69 87       	std	Y+9, r22	; 0x09
    7224:	f7 01       	movw	r30, r14
    7226:	80 81       	ld	r24, Z
    7228:	91 81       	ldd	r25, Z+1	; 0x01
    722a:	8c 33       	cpi	r24, 0x3C	; 60
    722c:	91 05       	cpc	r25, r1
    722e:	5c f0       	brlt	.+22     	; 0x7246 <normalize+0x34>
    7230:	f7 01       	movw	r30, r14
    7232:	22 81       	ldd	r18, Z+2	; 0x02
    7234:	33 81       	ldd	r19, Z+3	; 0x03
    7236:	2f 5f       	subi	r18, 0xFF	; 255
    7238:	3f 4f       	sbci	r19, 0xFF	; 255
    723a:	33 83       	std	Z+3, r19	; 0x03
    723c:	22 83       	std	Z+2, r18	; 0x02
    723e:	cc 97       	sbiw	r24, 0x3c	; 60
    7240:	91 83       	std	Z+1, r25	; 0x01
    7242:	80 83       	st	Z, r24
    7244:	ef cf       	rjmp	.-34     	; 0x7224 <normalize+0x12>
    7246:	f7 01       	movw	r30, r14
    7248:	01 90       	ld	r0, Z+
    724a:	f0 81       	ld	r31, Z
    724c:	e0 2d       	mov	r30, r0
    724e:	fe 83       	std	Y+6, r31	; 0x06
    7250:	ed 83       	std	Y+5, r30	; 0x05
    7252:	f7 ff       	sbrs	r31, 7
    7254:	0d c0       	rjmp	.+26     	; 0x7270 <normalize+0x5e>
    7256:	f7 01       	movw	r30, r14
    7258:	82 81       	ldd	r24, Z+2	; 0x02
    725a:	93 81       	ldd	r25, Z+3	; 0x03
    725c:	01 97       	sbiw	r24, 0x01	; 1
    725e:	93 83       	std	Z+3, r25	; 0x03
    7260:	82 83       	std	Z+2, r24	; 0x02
    7262:	6d 81       	ldd	r22, Y+5	; 0x05
    7264:	7e 81       	ldd	r23, Y+6	; 0x06
    7266:	64 5c       	subi	r22, 0xC4	; 196
    7268:	7f 4f       	sbci	r23, 0xFF	; 255
    726a:	71 83       	std	Z+1, r23	; 0x01
    726c:	60 83       	st	Z, r22
    726e:	eb cf       	rjmp	.-42     	; 0x7246 <normalize+0x34>
    7270:	f7 01       	movw	r30, r14
    7272:	82 81       	ldd	r24, Z+2	; 0x02
    7274:	93 81       	ldd	r25, Z+3	; 0x03
    7276:	8c 33       	cpi	r24, 0x3C	; 60
    7278:	91 05       	cpc	r25, r1
    727a:	5c f0       	brlt	.+22     	; 0x7292 <normalize+0x80>
    727c:	f7 01       	movw	r30, r14
    727e:	24 81       	ldd	r18, Z+4	; 0x04
    7280:	35 81       	ldd	r19, Z+5	; 0x05
    7282:	2f 5f       	subi	r18, 0xFF	; 255
    7284:	3f 4f       	sbci	r19, 0xFF	; 255
    7286:	35 83       	std	Z+5, r19	; 0x05
    7288:	24 83       	std	Z+4, r18	; 0x04
    728a:	cc 97       	sbiw	r24, 0x3c	; 60
    728c:	93 83       	std	Z+3, r25	; 0x03
    728e:	82 83       	std	Z+2, r24	; 0x02
    7290:	ef cf       	rjmp	.-34     	; 0x7270 <normalize+0x5e>
    7292:	f7 01       	movw	r30, r14
    7294:	22 80       	ldd	r2, Z+2	; 0x02
    7296:	33 80       	ldd	r3, Z+3	; 0x03
    7298:	37 fe       	sbrs	r3, 7
    729a:	0d c0       	rjmp	.+26     	; 0x72b6 <normalize+0xa4>
    729c:	f7 01       	movw	r30, r14
    729e:	84 81       	ldd	r24, Z+4	; 0x04
    72a0:	95 81       	ldd	r25, Z+5	; 0x05
    72a2:	01 97       	sbiw	r24, 0x01	; 1
    72a4:	95 83       	std	Z+5, r25	; 0x05
    72a6:	84 83       	std	Z+4, r24	; 0x04
    72a8:	fc e3       	ldi	r31, 0x3C	; 60
    72aa:	2f 0e       	add	r2, r31
    72ac:	31 1c       	adc	r3, r1
    72ae:	f7 01       	movw	r30, r14
    72b0:	33 82       	std	Z+3, r3	; 0x03
    72b2:	22 82       	std	Z+2, r2	; 0x02
    72b4:	ee cf       	rjmp	.-36     	; 0x7292 <normalize+0x80>
    72b6:	f7 01       	movw	r30, r14
    72b8:	84 81       	ldd	r24, Z+4	; 0x04
    72ba:	95 81       	ldd	r25, Z+5	; 0x05
    72bc:	88 31       	cpi	r24, 0x18	; 24
    72be:	91 05       	cpc	r25, r1
    72c0:	5c f0       	brlt	.+22     	; 0x72d8 <normalize+0xc6>
    72c2:	f7 01       	movw	r30, r14
    72c4:	26 81       	ldd	r18, Z+6	; 0x06
    72c6:	37 81       	ldd	r19, Z+7	; 0x07
    72c8:	2f 5f       	subi	r18, 0xFF	; 255
    72ca:	3f 4f       	sbci	r19, 0xFF	; 255
    72cc:	37 83       	std	Z+7, r19	; 0x07
    72ce:	26 83       	std	Z+6, r18	; 0x06
    72d0:	48 97       	sbiw	r24, 0x18	; 24
    72d2:	95 83       	std	Z+5, r25	; 0x05
    72d4:	84 83       	std	Z+4, r24	; 0x04
    72d6:	ef cf       	rjmp	.-34     	; 0x72b6 <normalize+0xa4>
    72d8:	f7 01       	movw	r30, r14
    72da:	04 81       	ldd	r16, Z+4	; 0x04
    72dc:	15 81       	ldd	r17, Z+5	; 0x05
    72de:	17 ff       	sbrs	r17, 7
    72e0:	0b c0       	rjmp	.+22     	; 0x72f8 <normalize+0xe6>
    72e2:	f7 01       	movw	r30, r14
    72e4:	86 81       	ldd	r24, Z+6	; 0x06
    72e6:	97 81       	ldd	r25, Z+7	; 0x07
    72e8:	01 97       	sbiw	r24, 0x01	; 1
    72ea:	97 83       	std	Z+7, r25	; 0x07
    72ec:	86 83       	std	Z+6, r24	; 0x06
    72ee:	08 5e       	subi	r16, 0xE8	; 232
    72f0:	1f 4f       	sbci	r17, 0xFF	; 255
    72f2:	15 83       	std	Z+5, r17	; 0x05
    72f4:	04 83       	std	Z+4, r16	; 0x04
    72f6:	f0 cf       	rjmp	.-32     	; 0x72d8 <normalize+0xc6>
    72f8:	f7 01       	movw	r30, r14
    72fa:	80 85       	ldd	r24, Z+8	; 0x08
    72fc:	91 85       	ldd	r25, Z+9	; 0x09
    72fe:	8c 30       	cpi	r24, 0x0C	; 12
    7300:	91 05       	cpc	r25, r1
    7302:	5c f0       	brlt	.+22     	; 0x731a <normalize+0x108>
    7304:	f7 01       	movw	r30, r14
    7306:	22 85       	ldd	r18, Z+10	; 0x0a
    7308:	33 85       	ldd	r19, Z+11	; 0x0b
    730a:	2f 5f       	subi	r18, 0xFF	; 255
    730c:	3f 4f       	sbci	r19, 0xFF	; 255
    730e:	33 87       	std	Z+11, r19	; 0x0b
    7310:	22 87       	std	Z+10, r18	; 0x0a
    7312:	0c 97       	sbiw	r24, 0x0c	; 12
    7314:	91 87       	std	Z+9, r25	; 0x09
    7316:	80 87       	std	Z+8, r24	; 0x08
    7318:	ef cf       	rjmp	.-34     	; 0x72f8 <normalize+0xe6>
    731a:	f7 01       	movw	r30, r14
    731c:	80 85       	ldd	r24, Z+8	; 0x08
    731e:	91 85       	ldd	r25, Z+9	; 0x09
    7320:	97 ff       	sbrs	r25, 7
    7322:	2d c0       	rjmp	.+90     	; 0x737e <normalize+0x16c>
    7324:	f7 01       	movw	r30, r14
    7326:	22 85       	ldd	r18, Z+10	; 0x0a
    7328:	33 85       	ldd	r19, Z+11	; 0x0b
    732a:	21 50       	subi	r18, 0x01	; 1
    732c:	31 09       	sbc	r19, r1
    732e:	33 87       	std	Z+11, r19	; 0x0b
    7330:	22 87       	std	Z+10, r18	; 0x0a
    7332:	0c 96       	adiw	r24, 0x0c	; 12
    7334:	91 87       	std	Z+9, r25	; 0x09
    7336:	80 87       	std	Z+8, r24	; 0x08
    7338:	f0 cf       	rjmp	.-32     	; 0x731a <normalize+0x108>
    733a:	f7 01       	movw	r30, r14
    733c:	c6 80       	ldd	r12, Z+6	; 0x06
    733e:	d7 80       	ldd	r13, Z+7	; 0x07
    7340:	a0 84       	ldd	r10, Z+8	; 0x08
    7342:	b1 84       	ldd	r11, Z+9	; 0x09
    7344:	b4 01       	movw	r22, r8
    7346:	c5 01       	movw	r24, r10
    7348:	58 dd       	rcall	.-1360   	; 0x6dfa <Days_Per_Month>
    734a:	8c 15       	cp	r24, r12
    734c:	9d 05       	cpc	r25, r13
    734e:	84 f5       	brge	.+96     	; 0x73b0 <normalize+0x19e>
    7350:	c8 1a       	sub	r12, r24
    7352:	d9 0a       	sbc	r13, r25
    7354:	f7 01       	movw	r30, r14
    7356:	d7 82       	std	Z+7, r13	; 0x07
    7358:	c6 82       	std	Z+6, r12	; 0x06
    735a:	c5 01       	movw	r24, r10
    735c:	01 96       	adiw	r24, 0x01	; 1
    735e:	91 87       	std	Z+9, r25	; 0x09
    7360:	80 87       	std	Z+8, r24	; 0x08
    7362:	0c 97       	sbiw	r24, 0x0c	; 12
    7364:	54 f3       	brlt	.-44     	; 0x733a <normalize+0x128>
    7366:	fb e0       	ldi	r31, 0x0B	; 11
    7368:	af 1a       	sub	r10, r31
    736a:	b1 08       	sbc	r11, r1
    736c:	f7 01       	movw	r30, r14
    736e:	b1 86       	std	Z+9, r11	; 0x09
    7370:	a0 86       	std	Z+8, r10	; 0x08
    7372:	ff ef       	ldi	r31, 0xFF	; 255
    7374:	8f 1a       	sub	r8, r31
    7376:	9f 0a       	sbc	r9, r31
    7378:	f7 01       	movw	r30, r14
    737a:	93 86       	std	Z+11, r9	; 0x0b
    737c:	82 86       	std	Z+10, r8	; 0x0a
    737e:	f7 01       	movw	r30, r14
    7380:	82 84       	ldd	r8, Z+10	; 0x0a
    7382:	93 84       	ldd	r9, Z+11	; 0x0b
    7384:	da cf       	rjmp	.-76     	; 0x733a <normalize+0x128>
    7386:	f7 01       	movw	r30, r14
    7388:	80 85       	ldd	r24, Z+8	; 0x08
    738a:	91 85       	ldd	r25, Z+9	; 0x09
    738c:	9c 01       	movw	r18, r24
    738e:	21 50       	subi	r18, 0x01	; 1
    7390:	31 09       	sbc	r19, r1
    7392:	37 fd       	sbrc	r19, 7
    7394:	16 c0       	rjmp	.+44     	; 0x73c2 <normalize+0x1b0>
    7396:	31 87       	std	Z+9, r19	; 0x09
    7398:	20 87       	std	Z+8, r18	; 0x08
    739a:	f7 01       	movw	r30, r14
    739c:	62 85       	ldd	r22, Z+10	; 0x0a
    739e:	73 85       	ldd	r23, Z+11	; 0x0b
    73a0:	80 85       	ldd	r24, Z+8	; 0x08
    73a2:	91 85       	ldd	r25, Z+9	; 0x09
    73a4:	2a dd       	rcall	.-1452   	; 0x6dfa <Days_Per_Month>
    73a6:	88 0d       	add	r24, r8
    73a8:	99 1d       	adc	r25, r9
    73aa:	f7 01       	movw	r30, r14
    73ac:	97 83       	std	Z+7, r25	; 0x07
    73ae:	86 83       	std	Z+6, r24	; 0x06
    73b0:	f7 01       	movw	r30, r14
    73b2:	86 80       	ldd	r8, Z+6	; 0x06
    73b4:	97 80       	ldd	r9, Z+7	; 0x07
    73b6:	a2 84       	ldd	r10, Z+10	; 0x0a
    73b8:	b3 84       	ldd	r11, Z+11	; 0x0b
    73ba:	18 14       	cp	r1, r8
    73bc:	19 04       	cpc	r1, r9
    73be:	1c f7       	brge	.-58     	; 0x7386 <normalize+0x174>
    73c0:	0b c0       	rjmp	.+22     	; 0x73d8 <normalize+0x1c6>
    73c2:	0b 96       	adiw	r24, 0x0b	; 11
    73c4:	f7 01       	movw	r30, r14
    73c6:	91 87       	std	Z+9, r25	; 0x09
    73c8:	80 87       	std	Z+8, r24	; 0x08
    73ca:	f1 e0       	ldi	r31, 0x01	; 1
    73cc:	af 1a       	sub	r10, r31
    73ce:	b1 08       	sbc	r11, r1
    73d0:	f7 01       	movw	r30, r14
    73d2:	b3 86       	std	Z+11, r11	; 0x0b
    73d4:	a2 86       	std	Z+10, r10	; 0x0a
    73d6:	e1 cf       	rjmp	.-62     	; 0x739a <normalize+0x188>
    73d8:	a5 01       	movw	r20, r10
    73da:	44 59       	subi	r20, 0x94	; 148
    73dc:	58 4f       	sbci	r21, 0xF8	; 248
    73de:	58 87       	std	Y+8, r21	; 0x08
    73e0:	4f 83       	std	Y+7, r20	; 0x07
    73e2:	35 01       	movw	r6, r10
    73e4:	56 e4       	ldi	r21, 0x46	; 70
    73e6:	65 1a       	sub	r6, r21
    73e8:	71 08       	sbc	r7, r1
    73ea:	89 e8       	ldi	r24, 0x89	; 137
    73ec:	68 16       	cp	r6, r24
    73ee:	71 04       	cpc	r7, r1
    73f0:	08 f0       	brcs	.+2      	; 0x73f4 <normalize+0x1e2>
    73f2:	9b c0       	rjmp	.+310    	; 0x752a <normalize+0x318>
    73f4:	c0 84       	ldd	r12, Z+8	; 0x08
    73f6:	d1 84       	ldd	r13, Z+9	; 0x09
    73f8:	9c e0       	ldi	r25, 0x0C	; 12
    73fa:	c9 16       	cp	r12, r25
    73fc:	d1 04       	cpc	r13, r1
    73fe:	08 f0       	brcs	.+2      	; 0x7402 <normalize+0x1f0>
    7400:	94 c0       	rjmp	.+296    	; 0x752a <normalize+0x318>
    7402:	24 01       	movw	r4, r8
    7404:	e1 e0       	ldi	r30, 0x01	; 1
    7406:	4e 1a       	sub	r4, r30
    7408:	51 08       	sbc	r5, r1
    740a:	6f 81       	ldd	r22, Y+7	; 0x07
    740c:	78 85       	ldd	r23, Y+8	; 0x08
    740e:	c6 01       	movw	r24, r12
    7410:	f4 dc       	rcall	.-1560   	; 0x6dfa <Days_Per_Month>
    7412:	48 16       	cp	r4, r24
    7414:	59 06       	cpc	r5, r25
    7416:	0c f0       	brlt	.+2      	; 0x741a <normalize+0x208>
    7418:	88 c0       	rjmp	.+272    	; 0x752a <normalize+0x318>
    741a:	08 31       	cpi	r16, 0x18	; 24
    741c:	11 05       	cpc	r17, r1
    741e:	0c f0       	brlt	.+2      	; 0x7422 <normalize+0x210>
    7420:	84 c0       	rjmp	.+264    	; 0x752a <normalize+0x318>
    7422:	fc e3       	ldi	r31, 0x3C	; 60
    7424:	2f 16       	cp	r2, r31
    7426:	31 04       	cpc	r3, r1
    7428:	0c f0       	brlt	.+2      	; 0x742c <normalize+0x21a>
    742a:	7f c0       	rjmp	.+254    	; 0x752a <normalize+0x318>
    742c:	4d 81       	ldd	r20, Y+5	; 0x05
    742e:	5e 81       	ldd	r21, Y+6	; 0x06
    7430:	4c 33       	cpi	r20, 0x3C	; 60
    7432:	51 05       	cpc	r21, r1
    7434:	0c f0       	brlt	.+2      	; 0x7438 <normalize+0x226>
    7436:	79 c0       	rjmp	.+242    	; 0x752a <normalize+0x318>
    7438:	2d e6       	ldi	r18, 0x6D	; 109
    743a:	31 e0       	ldi	r19, 0x01	; 1
    743c:	d3 01       	movw	r26, r6
    743e:	0e 94 0f e5 	call	0x1ca1e	; 0x1ca1e <__usmulhisi3>
    7442:	f6 01       	movw	r30, r12
    7444:	ee 0f       	add	r30, r30
    7446:	ff 1f       	adc	r31, r31
    7448:	e5 58       	subi	r30, 0x85	; 133
    744a:	fd 4f       	sbci	r31, 0xFD	; 253
    744c:	20 81       	ld	r18, Z
    744e:	31 81       	ldd	r19, Z+1	; 0x01
    7450:	dc 01       	movw	r26, r24
    7452:	cb 01       	movw	r24, r22
    7454:	82 0f       	add	r24, r18
    7456:	93 1f       	adc	r25, r19
    7458:	a1 1d       	adc	r26, r1
    745a:	b1 1d       	adc	r27, r1
    745c:	05 2c       	mov	r0, r5
    745e:	00 0c       	add	r0, r0
    7460:	66 08       	sbc	r6, r6
    7462:	77 08       	sbc	r7, r7
    7464:	48 0e       	add	r4, r24
    7466:	59 1e       	adc	r5, r25
    7468:	6a 1e       	adc	r6, r26
    746a:	7b 1e       	adc	r7, r27
    746c:	1a 14       	cp	r1, r10
    746e:	1b 04       	cpc	r1, r11
    7470:	1c f4       	brge	.+6      	; 0x7478 <normalize+0x266>
    7472:	51 e0       	ldi	r21, 0x01	; 1
    7474:	a5 1a       	sub	r10, r21
    7476:	b1 08       	sbc	r11, r1
    7478:	45 01       	movw	r8, r10
    747a:	95 94       	asr	r9
    747c:	87 94       	ror	r8
    747e:	95 94       	asr	r9
    7480:	87 94       	ror	r8
    7482:	88 ec       	ldi	r24, 0xC8	; 200
    7484:	a8 16       	cp	r10, r24
    7486:	b1 04       	cpc	r11, r1
    7488:	1c f0       	brlt	.+6      	; 0x7490 <normalize+0x27e>
    748a:	91 e0       	ldi	r25, 0x01	; 1
    748c:	89 1a       	sub	r8, r25
    748e:	91 08       	sbc	r9, r1
    7490:	09 2c       	mov	r0, r9
    7492:	00 0c       	add	r0, r0
    7494:	aa 08       	sbc	r10, r10
    7496:	bb 08       	sbc	r11, r11
    7498:	84 0c       	add	r8, r4
    749a:	95 1c       	adc	r9, r5
    749c:	a6 1c       	adc	r10, r6
    749e:	b7 1c       	adc	r11, r7
    74a0:	24 01       	movw	r4, r8
    74a2:	35 01       	movw	r6, r10
    74a4:	e1 e1       	ldi	r30, 0x11	; 17
    74a6:	4e 1a       	sub	r4, r30
    74a8:	51 08       	sbc	r5, r1
    74aa:	61 08       	sbc	r6, r1
    74ac:	71 08       	sbc	r7, r1
    74ae:	f2 e0       	ldi	r31, 0x02	; 2
    74b0:	cf 16       	cp	r12, r31
    74b2:	d1 04       	cpc	r13, r1
    74b4:	64 f0       	brlt	.+24     	; 0x74ce <normalize+0x2bc>
    74b6:	8f 81       	ldd	r24, Y+7	; 0x07
    74b8:	98 85       	ldd	r25, Y+8	; 0x08
    74ba:	7a dc       	rcall	.-1804   	; 0x6db0 <IS_Leap>
    74bc:	89 2b       	or	r24, r25
    74be:	39 f0       	breq	.+14     	; 0x74ce <normalize+0x2bc>
    74c0:	24 01       	movw	r4, r8
    74c2:	35 01       	movw	r6, r10
    74c4:	40 e1       	ldi	r20, 0x10	; 16
    74c6:	44 1a       	sub	r4, r20
    74c8:	51 08       	sbc	r5, r1
    74ca:	61 08       	sbc	r6, r1
    74cc:	71 08       	sbc	r7, r1
    74ce:	a8 e1       	ldi	r26, 0x18	; 24
    74d0:	b0 e0       	ldi	r27, 0x00	; 0
    74d2:	a3 01       	movw	r20, r6
    74d4:	92 01       	movw	r18, r4
    74d6:	0e 94 15 e5 	call	0x1ca2a	; 0x1ca2a <__muluhisi3>
    74da:	01 2e       	mov	r0, r17
    74dc:	00 0c       	add	r0, r0
    74de:	22 0b       	sbc	r18, r18
    74e0:	33 0b       	sbc	r19, r19
    74e2:	a9 01       	movw	r20, r18
    74e4:	98 01       	movw	r18, r16
    74e6:	26 0f       	add	r18, r22
    74e8:	37 1f       	adc	r19, r23
    74ea:	48 1f       	adc	r20, r24
    74ec:	59 1f       	adc	r21, r25
    74ee:	ac e3       	ldi	r26, 0x3C	; 60
    74f0:	b0 e0       	ldi	r27, 0x00	; 0
    74f2:	0e 94 15 e5 	call	0x1ca2a	; 0x1ca2a <__muluhisi3>
    74f6:	81 01       	movw	r16, r2
    74f8:	03 2c       	mov	r0, r3
    74fa:	00 0c       	add	r0, r0
    74fc:	22 0b       	sbc	r18, r18
    74fe:	33 0b       	sbc	r19, r19
    7500:	a9 01       	movw	r20, r18
    7502:	98 01       	movw	r18, r16
    7504:	26 0f       	add	r18, r22
    7506:	37 1f       	adc	r19, r23
    7508:	48 1f       	adc	r20, r24
    750a:	59 1f       	adc	r21, r25
    750c:	0e 94 15 e5 	call	0x1ca2a	; 0x1ca2a <__muluhisi3>
    7510:	ed 81       	ldd	r30, Y+5	; 0x05
    7512:	fe 81       	ldd	r31, Y+6	; 0x06
    7514:	8f 01       	movw	r16, r30
    7516:	ff 0f       	add	r31, r31
    7518:	22 0b       	sbc	r18, r18
    751a:	33 0b       	sbc	r19, r19
    751c:	48 01       	movw	r8, r16
    751e:	59 01       	movw	r10, r18
    7520:	86 0e       	add	r8, r22
    7522:	97 1e       	adc	r9, r23
    7524:	a8 1e       	adc	r10, r24
    7526:	b9 1e       	adc	r11, r25
    7528:	04 c0       	rjmp	.+8      	; 0x7532 <normalize+0x320>
    752a:	88 24       	eor	r8, r8
    752c:	8a 94       	dec	r8
    752e:	98 2c       	mov	r9, r8
    7530:	54 01       	movw	r10, r8
    7532:	49 85       	ldd	r20, Y+9	; 0x09
    7534:	5a 85       	ldd	r21, Y+10	; 0x0a
    7536:	45 2b       	or	r20, r21
    7538:	e9 f0       	breq	.+58     	; 0x7574 <normalize+0x362>
    753a:	ce 01       	movw	r24, r28
    753c:	01 96       	adiw	r24, 0x01	; 1
    753e:	7c dd       	rcall	.-1288   	; 0x7038 <gettimezone>
    7540:	a9 81       	ldd	r26, Y+1	; 0x01
    7542:	ba 81       	ldd	r27, Y+2	; 0x02
    7544:	2c e3       	ldi	r18, 0x3C	; 60
    7546:	30 e0       	ldi	r19, 0x00	; 0
    7548:	0e 94 0f e5 	call	0x1ca1e	; 0x1ca1e <__usmulhisi3>
    754c:	2b 01       	movw	r4, r22
    754e:	3c 01       	movw	r6, r24
    7550:	c5 01       	movw	r24, r10
    7552:	b4 01       	movw	r22, r8
    7554:	e2 dd       	rcall	.-1084   	; 0x711a <is_dst>
    7556:	89 2b       	or	r24, r25
    7558:	51 f0       	breq	.+20     	; 0x756e <normalize+0x35c>
    755a:	50 e1       	ldi	r21, 0x10	; 16
    755c:	45 1a       	sub	r4, r21
    755e:	5e e0       	ldi	r21, 0x0E	; 14
    7560:	55 0a       	sbc	r5, r21
    7562:	61 08       	sbc	r6, r1
    7564:	71 08       	sbc	r7, r1
    7566:	cc 24       	eor	r12, r12
    7568:	c3 94       	inc	r12
    756a:	d1 2c       	mov	r13, r1
    756c:	08 c0       	rjmp	.+16     	; 0x757e <normalize+0x36c>
    756e:	c1 2c       	mov	r12, r1
    7570:	d1 2c       	mov	r13, r1
    7572:	05 c0       	rjmp	.+10     	; 0x757e <normalize+0x36c>
    7574:	c1 2c       	mov	r12, r1
    7576:	d1 2c       	mov	r13, r1
    7578:	41 2c       	mov	r4, r1
    757a:	51 2c       	mov	r5, r1
    757c:	32 01       	movw	r6, r4
    757e:	87 01       	movw	r16, r14
    7580:	a3 01       	movw	r20, r6
    7582:	92 01       	movw	r18, r4
    7584:	c5 01       	movw	r24, r10
    7586:	b4 01       	movw	r22, r8
    7588:	59 dc       	rcall	.-1870   	; 0x6e3c <time_to_tm>
    758a:	c1 14       	cp	r12, r1
    758c:	d1 04       	cpc	r13, r1
    758e:	29 f0       	breq	.+10     	; 0x759a <normalize+0x388>
    7590:	21 e0       	ldi	r18, 0x01	; 1
    7592:	30 e0       	ldi	r19, 0x00	; 0
    7594:	f7 01       	movw	r30, r14
    7596:	31 8b       	std	Z+17, r19	; 0x11
    7598:	20 8b       	std	Z+16, r18	; 0x10
    759a:	2a 96       	adiw	r28, 0x0a	; 10
    759c:	e2 e1       	ldi	r30, 0x12	; 18
    759e:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

000075a2 <timegm>:
    75a2:	60 e0       	ldi	r22, 0x00	; 0
    75a4:	70 e0       	ldi	r23, 0x00	; 0
    75a6:	35 ce       	rjmp	.-918    	; 0x7212 <normalize>
    75a8:	08 95       	ret

000075aa <setdate_r>:
    75aa:	cf 92       	push	r12
    75ac:	df 92       	push	r13
    75ae:	ef 92       	push	r14
    75b0:	ff 92       	push	r15
    75b2:	cf 93       	push	r28
    75b4:	df 93       	push	r29
    75b6:	cd b7       	in	r28, 0x3d	; 61
    75b8:	de b7       	in	r29, 0x3e	; 62
    75ba:	a0 97       	sbiw	r28, 0x20	; 32
    75bc:	0f b6       	in	r0, 0x3f	; 63
    75be:	f8 94       	cli
    75c0:	de bf       	out	0x3e, r29	; 62
    75c2:	0f be       	out	0x3f, r0	; 63
    75c4:	cd bf       	out	0x3d, r28	; 61
    75c6:	98 a3       	std	Y+32, r25	; 0x20
    75c8:	8f 8f       	std	Y+31, r24	; 0x1f
    75ca:	1a 82       	std	Y+2, r1	; 0x02
    75cc:	19 82       	std	Y+1, r1	; 0x01
    75ce:	1c 82       	std	Y+4, r1	; 0x04
    75d0:	1b 82       	std	Y+3, r1	; 0x03
    75d2:	1e 82       	std	Y+6, r1	; 0x06
    75d4:	1d 82       	std	Y+5, r1	; 0x05
    75d6:	18 86       	std	Y+8, r1	; 0x08
    75d8:	1f 82       	std	Y+7, r1	; 0x07
    75da:	1a 86       	std	Y+10, r1	; 0x0a
    75dc:	19 86       	std	Y+9, r1	; 0x09
    75de:	1c 86       	std	Y+12, r1	; 0x0c
    75e0:	1b 86       	std	Y+11, r1	; 0x0b
    75e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    75e4:	98 a1       	ldd	r25, Y+32	; 0x20
    75e6:	fc 01       	movw	r30, r24
    75e8:	20 81       	ld	r18, Z
    75ea:	20 32       	cpi	r18, 0x20	; 32
    75ec:	21 f4       	brne	.+8      	; 0x75f6 <setdate_r+0x4c>
    75ee:	01 96       	adiw	r24, 0x01	; 1
    75f0:	98 a3       	std	Y+32, r25	; 0x20
    75f2:	8f 8f       	std	Y+31, r24	; 0x1f
    75f4:	f6 cf       	rjmp	.-20     	; 0x75e2 <setdate_r+0x38>
    75f6:	4a e0       	ldi	r20, 0x0A	; 10
    75f8:	50 e0       	ldi	r21, 0x00	; 0
    75fa:	be 01       	movw	r22, r28
    75fc:	61 5e       	subi	r22, 0xE1	; 225
    75fe:	7f 4f       	sbci	r23, 0xFF	; 255
    7600:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <strtol>
    7604:	7c 87       	std	Y+12, r23	; 0x0c
    7606:	6b 87       	std	Y+11, r22	; 0x0b
    7608:	8f 8d       	ldd	r24, Y+31	; 0x1f
    760a:	98 a1       	ldd	r25, Y+32	; 0x20
    760c:	fc 01       	movw	r30, r24
    760e:	20 81       	ld	r18, Z
    7610:	20 32       	cpi	r18, 0x20	; 32
    7612:	21 f4       	brne	.+8      	; 0x761c <setdate_r+0x72>
    7614:	01 96       	adiw	r24, 0x01	; 1
    7616:	98 a3       	std	Y+32, r25	; 0x20
    7618:	8f 8f       	std	Y+31, r24	; 0x1f
    761a:	f6 cf       	rjmp	.-20     	; 0x7608 <setdate_r+0x5e>
    761c:	4a e0       	ldi	r20, 0x0A	; 10
    761e:	50 e0       	ldi	r21, 0x00	; 0
    7620:	be 01       	movw	r22, r28
    7622:	61 5e       	subi	r22, 0xE1	; 225
    7624:	7f 4f       	sbci	r23, 0xFF	; 255
    7626:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <strtol>
    762a:	7a 87       	std	Y+10, r23	; 0x0a
    762c:	69 87       	std	Y+9, r22	; 0x09
    762e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7630:	98 a1       	ldd	r25, Y+32	; 0x20
    7632:	fc 01       	movw	r30, r24
    7634:	20 81       	ld	r18, Z
    7636:	20 32       	cpi	r18, 0x20	; 32
    7638:	21 f4       	brne	.+8      	; 0x7642 <setdate_r+0x98>
    763a:	01 96       	adiw	r24, 0x01	; 1
    763c:	98 a3       	std	Y+32, r25	; 0x20
    763e:	8f 8f       	std	Y+31, r24	; 0x1f
    7640:	f6 cf       	rjmp	.-20     	; 0x762e <setdate_r+0x84>
    7642:	4a e0       	ldi	r20, 0x0A	; 10
    7644:	50 e0       	ldi	r21, 0x00	; 0
    7646:	be 01       	movw	r22, r28
    7648:	61 5e       	subi	r22, 0xE1	; 225
    764a:	7f 4f       	sbci	r23, 0xFF	; 255
    764c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <strtol>
    7650:	78 87       	std	Y+8, r23	; 0x08
    7652:	6f 83       	std	Y+7, r22	; 0x07
    7654:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7656:	98 a1       	ldd	r25, Y+32	; 0x20
    7658:	fc 01       	movw	r30, r24
    765a:	20 81       	ld	r18, Z
    765c:	20 32       	cpi	r18, 0x20	; 32
    765e:	21 f4       	brne	.+8      	; 0x7668 <setdate_r+0xbe>
    7660:	01 96       	adiw	r24, 0x01	; 1
    7662:	98 a3       	std	Y+32, r25	; 0x20
    7664:	8f 8f       	std	Y+31, r24	; 0x1f
    7666:	f6 cf       	rjmp	.-20     	; 0x7654 <setdate_r+0xaa>
    7668:	4a e0       	ldi	r20, 0x0A	; 10
    766a:	50 e0       	ldi	r21, 0x00	; 0
    766c:	be 01       	movw	r22, r28
    766e:	61 5e       	subi	r22, 0xE1	; 225
    7670:	7f 4f       	sbci	r23, 0xFF	; 255
    7672:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <strtol>
    7676:	7e 83       	std	Y+6, r23	; 0x06
    7678:	6d 83       	std	Y+5, r22	; 0x05
    767a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    767c:	f8 a1       	ldd	r31, Y+32	; 0x20
    767e:	80 81       	ld	r24, Z
    7680:	88 23       	and	r24, r24
    7682:	39 f0       	breq	.+14     	; 0x7692 <setdate_r+0xe8>
    7684:	80 32       	cpi	r24, 0x20	; 32
    7686:	11 f0       	breq	.+4      	; 0x768c <setdate_r+0xe2>
    7688:	8a 33       	cpi	r24, 0x3A	; 58
    768a:	19 f4       	brne	.+6      	; 0x7692 <setdate_r+0xe8>
    768c:	31 96       	adiw	r30, 0x01	; 1
    768e:	f8 a3       	std	Y+32, r31	; 0x20
    7690:	ef 8f       	std	Y+31, r30	; 0x1f
    7692:	4a e0       	ldi	r20, 0x0A	; 10
    7694:	50 e0       	ldi	r21, 0x00	; 0
    7696:	be 01       	movw	r22, r28
    7698:	61 5e       	subi	r22, 0xE1	; 225
    769a:	7f 4f       	sbci	r23, 0xFF	; 255
    769c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    769e:	98 a1       	ldd	r25, Y+32	; 0x20
    76a0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <strtol>
    76a4:	7c 83       	std	Y+4, r23	; 0x04
    76a6:	6b 83       	std	Y+3, r22	; 0x03
    76a8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    76aa:	f8 a1       	ldd	r31, Y+32	; 0x20
    76ac:	80 81       	ld	r24, Z
    76ae:	88 23       	and	r24, r24
    76b0:	39 f0       	breq	.+14     	; 0x76c0 <setdate_r+0x116>
    76b2:	80 32       	cpi	r24, 0x20	; 32
    76b4:	11 f0       	breq	.+4      	; 0x76ba <setdate_r+0x110>
    76b6:	8a 33       	cpi	r24, 0x3A	; 58
    76b8:	19 f4       	brne	.+6      	; 0x76c0 <setdate_r+0x116>
    76ba:	31 96       	adiw	r30, 0x01	; 1
    76bc:	f8 a3       	std	Y+32, r31	; 0x20
    76be:	ef 8f       	std	Y+31, r30	; 0x1f
    76c0:	4a e0       	ldi	r20, 0x0A	; 10
    76c2:	50 e0       	ldi	r21, 0x00	; 0
    76c4:	be 01       	movw	r22, r28
    76c6:	61 5e       	subi	r22, 0xE1	; 225
    76c8:	7f 4f       	sbci	r23, 0xFF	; 255
    76ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    76cc:	98 a1       	ldd	r25, Y+32	; 0x20
    76ce:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <strtol>
    76d2:	7a 83       	std	Y+2, r23	; 0x02
    76d4:	69 83       	std	Y+1, r22	; 0x01
    76d6:	29 85       	ldd	r18, Y+9	; 0x09
    76d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    76da:	21 50       	subi	r18, 0x01	; 1
    76dc:	31 09       	sbc	r19, r1
    76de:	3a 87       	std	Y+10, r19	; 0x0a
    76e0:	29 87       	std	Y+9, r18	; 0x09
    76e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    76e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    76e6:	ac 01       	movw	r20, r24
    76e8:	42 5b       	subi	r20, 0xB2	; 178
    76ea:	57 40       	sbci	r21, 0x07	; 7
    76ec:	45 34       	cpi	r20, 0x45	; 69
    76ee:	51 05       	cpc	r21, r1
    76f0:	28 f0       	brcs	.+10     	; 0x76fc <setdate_r+0x152>
    76f2:	9f 93       	push	r25
    76f4:	8f 93       	push	r24
    76f6:	82 e7       	ldi	r24, 0x72	; 114
    76f8:	97 e0       	ldi	r25, 0x07	; 7
    76fa:	2c c0       	rjmp	.+88     	; 0x7754 <setdate_r+0x1aa>
    76fc:	8c 56       	subi	r24, 0x6C	; 108
    76fe:	97 40       	sbci	r25, 0x07	; 7
    7700:	9c 87       	std	Y+12, r25	; 0x0c
    7702:	8b 87       	std	Y+11, r24	; 0x0b
    7704:	2c 30       	cpi	r18, 0x0C	; 12
    7706:	31 05       	cpc	r19, r1
    7708:	28 f0       	brcs	.+10     	; 0x7714 <setdate_r+0x16a>
    770a:	9f 93       	push	r25
    770c:	8f 93       	push	r24
    770e:	81 e6       	ldi	r24, 0x61	; 97
    7710:	97 e0       	ldi	r25, 0x07	; 7
    7712:	20 c0       	rjmp	.+64     	; 0x7754 <setdate_r+0x1aa>
    7714:	8f 81       	ldd	r24, Y+7	; 0x07
    7716:	98 85       	ldd	r25, Y+8	; 0x08
    7718:	9c 01       	movw	r18, r24
    771a:	21 50       	subi	r18, 0x01	; 1
    771c:	31 09       	sbc	r19, r1
    771e:	2f 31       	cpi	r18, 0x1F	; 31
    7720:	31 05       	cpc	r19, r1
    7722:	28 f0       	brcs	.+10     	; 0x772e <setdate_r+0x184>
    7724:	9f 93       	push	r25
    7726:	8f 93       	push	r24
    7728:	80 e5       	ldi	r24, 0x50	; 80
    772a:	97 e0       	ldi	r25, 0x07	; 7
    772c:	13 c0       	rjmp	.+38     	; 0x7754 <setdate_r+0x1aa>
    772e:	8d 81       	ldd	r24, Y+5	; 0x05
    7730:	9e 81       	ldd	r25, Y+6	; 0x06
    7732:	88 31       	cpi	r24, 0x18	; 24
    7734:	91 05       	cpc	r25, r1
    7736:	28 f0       	brcs	.+10     	; 0x7742 <setdate_r+0x198>
    7738:	9f 93       	push	r25
    773a:	8f 93       	push	r24
    773c:	8e e3       	ldi	r24, 0x3E	; 62
    773e:	97 e0       	ldi	r25, 0x07	; 7
    7740:	09 c0       	rjmp	.+18     	; 0x7754 <setdate_r+0x1aa>
    7742:	8b 81       	ldd	r24, Y+3	; 0x03
    7744:	9c 81       	ldd	r25, Y+4	; 0x04
    7746:	8c 33       	cpi	r24, 0x3C	; 60
    7748:	91 05       	cpc	r25, r1
    774a:	78 f0       	brcs	.+30     	; 0x776a <setdate_r+0x1c0>
    774c:	9f 93       	push	r25
    774e:	8f 93       	push	r24
    7750:	8d e2       	ldi	r24, 0x2D	; 45
    7752:	97 e0       	ldi	r25, 0x07	; 7
    7754:	1f 92       	push	r1
    7756:	9f 93       	push	r25
    7758:	8f 93       	push	r24
    775a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    775e:	0f 90       	pop	r0
    7760:	0f 90       	pop	r0
    7762:	0f 90       	pop	r0
    7764:	0f 90       	pop	r0
    7766:	0f 90       	pop	r0
    7768:	25 c0       	rjmp	.+74     	; 0x77b4 <setdate_r+0x20a>
    776a:	ce 01       	movw	r24, r28
    776c:	01 96       	adiw	r24, 0x01	; 1
    776e:	19 df       	rcall	.-462    	; 0x75a2 <timegm>
    7770:	6b 01       	movw	r12, r22
    7772:	7c 01       	movw	r14, r24
    7774:	6f 8b       	std	Y+23, r22	; 0x17
    7776:	78 8f       	std	Y+24, r23	; 0x18
    7778:	89 8f       	std	Y+25, r24	; 0x19
    777a:	9a 8f       	std	Y+26, r25	; 0x1a
    777c:	1b 8e       	std	Y+27, r1	; 0x1b
    777e:	1c 8e       	std	Y+28, r1	; 0x1c
    7780:	1d 8e       	std	Y+29, r1	; 0x1d
    7782:	1e 8e       	std	Y+30, r1	; 0x1e
    7784:	be 01       	movw	r22, r28
    7786:	69 5e       	subi	r22, 0xE9	; 233
    7788:	7f 4f       	sbci	r23, 0xFF	; 255
    778a:	80 e0       	ldi	r24, 0x00	; 0
    778c:	90 e0       	ldi	r25, 0x00	; 0
    778e:	08 db       	rcall	.-2544   	; 0x6da0 <clock_settime>
    7790:	b7 01       	movw	r22, r14
    7792:	a6 01       	movw	r20, r12
    7794:	81 e0       	ldi	r24, 0x01	; 1
    7796:	90 e0       	ldi	r25, 0x00	; 0
    7798:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <rtc_init>
    779c:	81 11       	cpse	r24, r1
    779e:	0d c0       	rjmp	.+26     	; 0x77ba <setdate_r+0x210>
    77a0:	86 e1       	ldi	r24, 0x16	; 22
    77a2:	97 e0       	ldi	r25, 0x07	; 7
    77a4:	1f 92       	push	r1
    77a6:	9f 93       	push	r25
    77a8:	8f 93       	push	r24
    77aa:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    77ae:	0f 90       	pop	r0
    77b0:	0f 90       	pop	r0
    77b2:	0f 90       	pop	r0
    77b4:	8f ef       	ldi	r24, 0xFF	; 255
    77b6:	9f ef       	ldi	r25, 0xFF	; 255
    77b8:	02 c0       	rjmp	.+4      	; 0x77be <setdate_r+0x214>
    77ba:	80 e0       	ldi	r24, 0x00	; 0
    77bc:	90 e0       	ldi	r25, 0x00	; 0
    77be:	a0 96       	adiw	r28, 0x20	; 32
    77c0:	0f b6       	in	r0, 0x3f	; 63
    77c2:	f8 94       	cli
    77c4:	de bf       	out	0x3e, r29	; 62
    77c6:	0f be       	out	0x3f, r0	; 63
    77c8:	cd bf       	out	0x3d, r28	; 61
    77ca:	df 91       	pop	r29
    77cc:	cf 91       	pop	r28
    77ce:	ff 90       	pop	r15
    77d0:	ef 90       	pop	r14
    77d2:	df 90       	pop	r13
    77d4:	cf 90       	pop	r12
    77d6:	08 95       	ret

000077d8 <setdate>:
    77d8:	a8 e2       	ldi	r26, 0x28	; 40
    77da:	b0 e0       	ldi	r27, 0x00	; 0
    77dc:	e2 ef       	ldi	r30, 0xF2	; 242
    77de:	fb e3       	ldi	r31, 0x3B	; 59
    77e0:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    77e4:	84 e8       	ldi	r24, 0x84	; 132
    77e6:	97 e0       	ldi	r25, 0x07	; 7
    77e8:	1f 92       	push	r1
    77ea:	9f 93       	push	r25
    77ec:	8f 93       	push	r24
    77ee:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    77f2:	40 91 b7 1b 	lds	r20, 0x1BB7	; 0x801bb7 <__iob>
    77f6:	50 91 b8 1b 	lds	r21, 0x1BB8	; 0x801bb8 <__iob+0x1>
    77fa:	67 e2       	ldi	r22, 0x27	; 39
    77fc:	70 e0       	ldi	r23, 0x00	; 0
    77fe:	ce 01       	movw	r24, r28
    7800:	01 96       	adiw	r24, 0x01	; 1
    7802:	0e 94 c6 76 	call	0xed8c	; 0xed8c <fgets>
    7806:	ce 01       	movw	r24, r28
    7808:	01 96       	adiw	r24, 0x01	; 1
    780a:	cf de       	rcall	.-610    	; 0x75aa <setdate_r>
    780c:	0f 90       	pop	r0
    780e:	0f 90       	pop	r0
    7810:	0f 90       	pop	r0
    7812:	a8 96       	adiw	r28, 0x28	; 40
    7814:	e2 e0       	ldi	r30, 0x02	; 2
    7816:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

0000781a <find_dst>:
    781a:	a8 e2       	ldi	r26, 0x28	; 40
    781c:	b0 e0       	ldi	r27, 0x00	; 0
    781e:	e3 e1       	ldi	r30, 0x13	; 19
    7820:	fc e3       	ldi	r31, 0x3C	; 60
    7822:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    7826:	3c 01       	movw	r6, r24
    7828:	1a 01       	movw	r2, r20
    782a:	2b 01       	movw	r4, r22
    782c:	49 01       	movw	r8, r18
    782e:	1c a3       	std	Y+36, r17	; 0x24
    7830:	0b a3       	std	Y+35, r16	; 0x23
    7832:	de a2       	std	Y+38, r13	; 0x26
    7834:	cd a2       	std	Y+37, r12	; 0x25
    7836:	b8 a6       	std	Y+40, r11	; 0x28
    7838:	af a2       	std	Y+39, r10	; 0x27
    783a:	be 01       	movw	r22, r28
    783c:	61 5e       	subi	r22, 0xE1	; 225
    783e:	7f 4f       	sbci	r23, 0xFF	; 255
    7840:	ce 01       	movw	r24, r28
    7842:	47 96       	adiw	r24, 0x17	; 23
    7844:	1b dc       	rcall	.-1994   	; 0x707c <gettimeofday>
    7846:	af 8d       	ldd	r26, Y+31	; 0x1f
    7848:	b8 a1       	ldd	r27, Y+32	; 0x20
    784a:	2c e3       	ldi	r18, 0x3C	; 60
    784c:	30 e0       	ldi	r19, 0x00	; 0
    784e:	0e 94 0f e5 	call	0x1ca1e	; 0x1ca1e <__usmulhisi3>
    7852:	5b 01       	movw	r10, r22
    7854:	6c 01       	movw	r12, r24
    7856:	61 14       	cp	r6, r1
    7858:	71 04       	cpc	r7, r1
    785a:	31 f0       	breq	.+12     	; 0x7868 <find_dst+0x4e>
    785c:	20 e1       	ldi	r18, 0x10	; 16
    785e:	a2 1a       	sub	r10, r18
    7860:	2e e0       	ldi	r18, 0x0E	; 14
    7862:	b2 0a       	sbc	r11, r18
    7864:	c1 08       	sbc	r12, r1
    7866:	d1 08       	sbc	r13, r1
    7868:	81 14       	cp	r8, r1
    786a:	91 04       	cpc	r9, r1
    786c:	39 f0       	breq	.+14     	; 0x787c <find_dst+0x62>
    786e:	4c e6       	ldi	r20, 0x6C	; 108
    7870:	84 1a       	sub	r8, r20
    7872:	47 e0       	ldi	r20, 0x07	; 7
    7874:	94 0a       	sbc	r9, r20
    7876:	9c 86       	std	Y+12, r9	; 0x0c
    7878:	8b 86       	std	Y+11, r8	; 0x0b
    787a:	11 c0       	rjmp	.+34     	; 0x789e <find_dst+0x84>
    787c:	21 14       	cp	r2, r1
    787e:	31 04       	cpc	r3, r1
    7880:	41 04       	cpc	r4, r1
    7882:	51 04       	cpc	r5, r1
    7884:	21 f4       	brne	.+8      	; 0x788e <find_dst+0x74>
    7886:	2f 88       	ldd	r2, Y+23	; 0x17
    7888:	38 8c       	ldd	r3, Y+24	; 0x18
    788a:	49 8c       	ldd	r4, Y+25	; 0x19
    788c:	5a 8c       	ldd	r5, Y+26	; 0x1a
    788e:	8e 01       	movw	r16, r28
    7890:	0f 5f       	subi	r16, 0xFF	; 255
    7892:	1f 4f       	sbci	r17, 0xFF	; 255
    7894:	a6 01       	movw	r20, r12
    7896:	95 01       	movw	r18, r10
    7898:	c2 01       	movw	r24, r4
    789a:	b1 01       	movw	r22, r2
    789c:	cf da       	rcall	.-2658   	; 0x6e3c <time_to_tm>
    789e:	8b a1       	ldd	r24, Y+35	; 0x23
    78a0:	9c a1       	ldd	r25, Y+36	; 0x24
    78a2:	01 97       	sbiw	r24, 0x01	; 1
    78a4:	9a 87       	std	Y+10, r25	; 0x0a
    78a6:	89 87       	std	Y+9, r24	; 0x09
    78a8:	81 e0       	ldi	r24, 0x01	; 1
    78aa:	90 e0       	ldi	r25, 0x00	; 0
    78ac:	98 87       	std	Y+8, r25	; 0x08
    78ae:	8f 83       	std	Y+7, r24	; 0x07
    78b0:	8f a1       	ldd	r24, Y+39	; 0x27
    78b2:	98 a5       	ldd	r25, Y+40	; 0x28
    78b4:	9e 83       	std	Y+6, r25	; 0x06
    78b6:	8d 83       	std	Y+5, r24	; 0x05
    78b8:	1c 82       	std	Y+4, r1	; 0x04
    78ba:	1b 82       	std	Y+3, r1	; 0x03
    78bc:	1a 82       	std	Y+2, r1	; 0x02
    78be:	19 82       	std	Y+1, r1	; 0x01
    78c0:	ce 01       	movw	r24, r28
    78c2:	01 96       	adiw	r24, 0x01	; 1
    78c4:	6e de       	rcall	.-804    	; 0x75a2 <timegm>
    78c6:	45 01       	movw	r8, r10
    78c8:	56 01       	movw	r10, r12
    78ca:	86 0e       	add	r8, r22
    78cc:	97 1e       	adc	r9, r23
    78ce:	a8 1e       	adc	r10, r24
    78d0:	b9 1e       	adc	r11, r25
    78d2:	8e 01       	movw	r16, r28
    78d4:	0f 5f       	subi	r16, 0xFF	; 255
    78d6:	1f 4f       	sbci	r17, 0xFF	; 255
    78d8:	20 e0       	ldi	r18, 0x00	; 0
    78da:	30 e0       	ldi	r19, 0x00	; 0
    78dc:	a9 01       	movw	r20, r18
    78de:	c5 01       	movw	r24, r10
    78e0:	b4 01       	movw	r22, r8
    78e2:	ac da       	rcall	.-2728   	; 0x6e3c <time_to_tm>
    78e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    78e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    78e8:	e7 e0       	ldi	r30, 0x07	; 7
    78ea:	f0 e0       	ldi	r31, 0x00	; 0
    78ec:	c9 01       	movw	r24, r18
    78ee:	bf 01       	movw	r22, r30
    78f0:	0e 94 a0 e4 	call	0x1c940	; 0x1c940 <__divmodhi4>
    78f4:	4d a1       	ldd	r20, Y+37	; 0x25
    78f6:	5e a1       	ldd	r21, Y+38	; 0x26
    78f8:	48 17       	cp	r20, r24
    78fa:	59 07       	cpc	r21, r25
    78fc:	21 f4       	brne	.+8      	; 0x7906 <find_dst+0xec>
    78fe:	51 e0       	ldi	r21, 0x01	; 1
    7900:	e5 1a       	sub	r14, r21
    7902:	f1 08       	sbc	r15, r1
    7904:	51 f0       	breq	.+20     	; 0x791a <find_dst+0x100>
    7906:	80 e8       	ldi	r24, 0x80	; 128
    7908:	88 0e       	add	r8, r24
    790a:	81 e5       	ldi	r24, 0x51	; 81
    790c:	98 1e       	adc	r9, r24
    790e:	81 e0       	ldi	r24, 0x01	; 1
    7910:	a8 1e       	adc	r10, r24
    7912:	b1 1c       	adc	r11, r1
    7914:	2f 5f       	subi	r18, 0xFF	; 255
    7916:	3f 4f       	sbci	r19, 0xFF	; 255
    7918:	e9 cf       	rjmp	.-46     	; 0x78ec <find_dst+0xd2>
    791a:	c5 01       	movw	r24, r10
    791c:	b4 01       	movw	r22, r8
    791e:	a8 96       	adiw	r28, 0x28	; 40
    7920:	e2 e1       	ldi	r30, 0x12	; 18
    7922:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

00007926 <set_dst>:
    7926:	4f 92       	push	r4
    7928:	5f 92       	push	r5
    792a:	6f 92       	push	r6
    792c:	7f 92       	push	r7
    792e:	af 92       	push	r10
    7930:	bf 92       	push	r11
    7932:	cf 92       	push	r12
    7934:	df 92       	push	r13
    7936:	ef 92       	push	r14
    7938:	ff 92       	push	r15
    793a:	0f 93       	push	r16
    793c:	1f 93       	push	r17
    793e:	cf 93       	push	r28
    7940:	df 93       	push	r29
    7942:	cd b7       	in	r28, 0x3d	; 61
    7944:	de b7       	in	r29, 0x3e	; 62
    7946:	2c 97       	sbiw	r28, 0x0c	; 12
    7948:	0f b6       	in	r0, 0x3f	; 63
    794a:	f8 94       	cli
    794c:	de bf       	out	0x3e, r29	; 62
    794e:	0f be       	out	0x3f, r0	; 63
    7950:	cd bf       	out	0x3d, r28	; 61
    7952:	2b 01       	movw	r4, r22
    7954:	3c 01       	movw	r6, r24
    7956:	67 2b       	or	r22, r23
    7958:	68 2b       	or	r22, r24
    795a:	69 2b       	or	r22, r25
    795c:	51 f4       	brne	.+20     	; 0x7972 <set_dst+0x4c>
    795e:	be 01       	movw	r22, r28
    7960:	67 5f       	subi	r22, 0xF7	; 247
    7962:	7f 4f       	sbci	r23, 0xFF	; 255
    7964:	ce 01       	movw	r24, r28
    7966:	01 96       	adiw	r24, 0x01	; 1
    7968:	89 db       	rcall	.-2286   	; 0x707c <gettimeofday>
    796a:	49 80       	ldd	r4, Y+1	; 0x01
    796c:	5a 80       	ldd	r5, Y+2	; 0x02
    796e:	6b 80       	ldd	r6, Y+3	; 0x03
    7970:	7c 80       	ldd	r7, Y+4	; 0x04
    7972:	80 91 6e 19 	lds	r24, 0x196E	; 0x80196e <dst+0x8>
    7976:	90 91 6f 19 	lds	r25, 0x196F	; 0x80196f <dst+0x9>
    797a:	a0 91 70 19 	lds	r26, 0x1970	; 0x801970 <dst+0xa>
    797e:	b0 91 71 19 	lds	r27, 0x1971	; 0x801971 <dst+0xb>
    7982:	84 15       	cp	r24, r4
    7984:	95 05       	cpc	r25, r5
    7986:	a6 05       	cpc	r26, r6
    7988:	b7 05       	cpc	r27, r7
    798a:	50 f0       	brcs	.+20     	; 0x79a0 <set_dst+0x7a>
    798c:	84 19       	sub	r24, r4
    798e:	95 09       	sbc	r25, r5
    7990:	a6 09       	sbc	r26, r6
    7992:	b7 09       	sbc	r27, r7
    7994:	80 38       	cpi	r24, 0x80	; 128
    7996:	91 45       	sbci	r25, 0x51	; 81
    7998:	a1 40       	sbci	r26, 0x01	; 1
    799a:	b1 05       	cpc	r27, r1
    799c:	70 f4       	brcc	.+28     	; 0x79ba <set_dst+0x94>
    799e:	42 c0       	rjmp	.+132    	; 0x7a24 <set_dst+0xfe>
    79a0:	a3 01       	movw	r20, r6
    79a2:	92 01       	movw	r18, r4
    79a4:	28 1b       	sub	r18, r24
    79a6:	39 0b       	sbc	r19, r25
    79a8:	4a 0b       	sbc	r20, r26
    79aa:	5b 0b       	sbc	r21, r27
    79ac:	da 01       	movw	r26, r20
    79ae:	c9 01       	movw	r24, r18
    79b0:	80 38       	cpi	r24, 0x80	; 128
    79b2:	91 45       	sbci	r25, 0x51	; 81
    79b4:	a1 40       	sbci	r26, 0x01	; 1
    79b6:	b1 05       	cpc	r27, r1
    79b8:	a8 f1       	brcs	.+106    	; 0x7a24 <set_dst+0xfe>
    79ba:	40 92 6e 19 	sts	0x196E, r4	; 0x80196e <dst+0x8>
    79be:	50 92 6f 19 	sts	0x196F, r5	; 0x80196f <dst+0x9>
    79c2:	60 92 70 19 	sts	0x1970, r6	; 0x801970 <dst+0xa>
    79c6:	70 92 71 19 	sts	0x1971, r7	; 0x801971 <dst+0xb>
    79ca:	82 e0       	ldi	r24, 0x02	; 2
    79cc:	a8 2e       	mov	r10, r24
    79ce:	b1 2c       	mov	r11, r1
    79d0:	c1 2c       	mov	r12, r1
    79d2:	d1 2c       	mov	r13, r1
    79d4:	92 e0       	ldi	r25, 0x02	; 2
    79d6:	e9 2e       	mov	r14, r25
    79d8:	f1 2c       	mov	r15, r1
    79da:	03 e0       	ldi	r16, 0x03	; 3
    79dc:	10 e0       	ldi	r17, 0x00	; 0
    79de:	20 e0       	ldi	r18, 0x00	; 0
    79e0:	30 e0       	ldi	r19, 0x00	; 0
    79e2:	b3 01       	movw	r22, r6
    79e4:	a2 01       	movw	r20, r4
    79e6:	80 e0       	ldi	r24, 0x00	; 0
    79e8:	90 e0       	ldi	r25, 0x00	; 0
    79ea:	17 df       	rcall	.-466    	; 0x781a <find_dst>
    79ec:	60 93 66 19 	sts	0x1966, r22	; 0x801966 <dst>
    79f0:	70 93 67 19 	sts	0x1967, r23	; 0x801967 <dst+0x1>
    79f4:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <dst+0x2>
    79f8:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <dst+0x3>
    79fc:	ee 24       	eor	r14, r14
    79fe:	e3 94       	inc	r14
    7a00:	f1 2c       	mov	r15, r1
    7a02:	0b e0       	ldi	r16, 0x0B	; 11
    7a04:	10 e0       	ldi	r17, 0x00	; 0
    7a06:	20 e0       	ldi	r18, 0x00	; 0
    7a08:	30 e0       	ldi	r19, 0x00	; 0
    7a0a:	b3 01       	movw	r22, r6
    7a0c:	a2 01       	movw	r20, r4
    7a0e:	81 e0       	ldi	r24, 0x01	; 1
    7a10:	90 e0       	ldi	r25, 0x00	; 0
    7a12:	03 df       	rcall	.-506    	; 0x781a <find_dst>
    7a14:	60 93 6a 19 	sts	0x196A, r22	; 0x80196a <dst+0x4>
    7a18:	70 93 6b 19 	sts	0x196B, r23	; 0x80196b <dst+0x5>
    7a1c:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <dst+0x6>
    7a20:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <dst+0x7>
    7a24:	2c 96       	adiw	r28, 0x0c	; 12
    7a26:	0f b6       	in	r0, 0x3f	; 63
    7a28:	f8 94       	cli
    7a2a:	de bf       	out	0x3e, r29	; 62
    7a2c:	0f be       	out	0x3f, r0	; 63
    7a2e:	cd bf       	out	0x3d, r28	; 61
    7a30:	df 91       	pop	r29
    7a32:	cf 91       	pop	r28
    7a34:	1f 91       	pop	r17
    7a36:	0f 91       	pop	r16
    7a38:	ff 90       	pop	r15
    7a3a:	ef 90       	pop	r14
    7a3c:	df 90       	pop	r13
    7a3e:	cf 90       	pop	r12
    7a40:	bf 90       	pop	r11
    7a42:	af 90       	pop	r10
    7a44:	7f 90       	pop	r7
    7a46:	6f 90       	pop	r6
    7a48:	5f 90       	pop	r5
    7a4a:	4f 90       	pop	r4
    7a4c:	08 95       	ret

00007a4e <asctime_r>:
    7a4e:	0f 93       	push	r16
    7a50:	1f 93       	push	r17
    7a52:	cf 93       	push	r28
    7a54:	df 93       	push	r29
    7a56:	ec 01       	movw	r28, r24
    7a58:	8b 01       	movw	r16, r22
    7a5a:	60 e0       	ldi	r22, 0x00	; 0
    7a5c:	70 e0       	ldi	r23, 0x00	; 0
    7a5e:	d9 db       	rcall	.-2126   	; 0x7212 <normalize>
    7a60:	20 e2       	ldi	r18, 0x20	; 32
    7a62:	d8 01       	movw	r26, r16
    7a64:	82 2f       	mov	r24, r18
    7a66:	1d 92       	st	X+, r1
    7a68:	8a 95       	dec	r24
    7a6a:	e9 f7       	brne	.-6      	; 0x7a66 <asctime_r+0x18>
    7a6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    7a6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7a70:	84 59       	subi	r24, 0x94	; 148
    7a72:	98 4f       	sbci	r25, 0xF8	; 248
    7a74:	9f 93       	push	r25
    7a76:	8f 93       	push	r24
    7a78:	89 81       	ldd	r24, Y+1	; 0x01
    7a7a:	8f 93       	push	r24
    7a7c:	88 81       	ld	r24, Y
    7a7e:	8f 93       	push	r24
    7a80:	8b 81       	ldd	r24, Y+3	; 0x03
    7a82:	8f 93       	push	r24
    7a84:	8a 81       	ldd	r24, Y+2	; 0x02
    7a86:	8f 93       	push	r24
    7a88:	8d 81       	ldd	r24, Y+5	; 0x05
    7a8a:	8f 93       	push	r24
    7a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    7a8e:	8f 93       	push	r24
    7a90:	8f 81       	ldd	r24, Y+7	; 0x07
    7a92:	8f 93       	push	r24
    7a94:	8e 81       	ldd	r24, Y+6	; 0x06
    7a96:	8f 93       	push	r24
    7a98:	e8 85       	ldd	r30, Y+8	; 0x08
    7a9a:	f9 85       	ldd	r31, Y+9	; 0x09
    7a9c:	ee 0f       	add	r30, r30
    7a9e:	ff 1f       	adc	r31, r31
    7aa0:	ee 5e       	subi	r30, 0xEE	; 238
    7aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    7aa4:	81 81       	ldd	r24, Z+1	; 0x01
    7aa6:	8f 93       	push	r24
    7aa8:	80 81       	ld	r24, Z
    7aaa:	8f 93       	push	r24
    7aac:	ec 85       	ldd	r30, Y+12	; 0x0c
    7aae:	fd 85       	ldd	r31, Y+13	; 0x0d
    7ab0:	ee 0f       	add	r30, r30
    7ab2:	ff 1f       	adc	r31, r31
    7ab4:	e4 5d       	subi	r30, 0xD4	; 212
    7ab6:	fe 4f       	sbci	r31, 0xFE	; 254
    7ab8:	81 81       	ldd	r24, Z+1	; 0x01
    7aba:	8f 93       	push	r24
    7abc:	80 81       	ld	r24, Z
    7abe:	8f 93       	push	r24
    7ac0:	85 ea       	ldi	r24, 0xA5	; 165
    7ac2:	97 e0       	ldi	r25, 0x07	; 7
    7ac4:	1f 92       	push	r1
    7ac6:	9f 93       	push	r25
    7ac8:	8f 93       	push	r24
    7aca:	1f 92       	push	r1
    7acc:	2f 93       	push	r18
    7ace:	1f 93       	push	r17
    7ad0:	0f 93       	push	r16
    7ad2:	0e 94 88 46 	call	0x8d10	; 0x8d10 <snprintf_P>
    7ad6:	ad b7       	in	r26, 0x3d	; 61
    7ad8:	be b7       	in	r27, 0x3e	; 62
    7ada:	55 96       	adiw	r26, 0x15	; 21
    7adc:	0f b6       	in	r0, 0x3f	; 63
    7ade:	f8 94       	cli
    7ae0:	be bf       	out	0x3e, r27	; 62
    7ae2:	0f be       	out	0x3f, r0	; 63
    7ae4:	ad bf       	out	0x3d, r26	; 61
    7ae6:	c8 01       	movw	r24, r16
    7ae8:	df 91       	pop	r29
    7aea:	cf 91       	pop	r28
    7aec:	1f 91       	pop	r17
    7aee:	0f 91       	pop	r16
    7af0:	08 95       	ret

00007af2 <asctime>:
    7af2:	6e ee       	ldi	r22, 0xEE	; 238
    7af4:	77 e1       	ldi	r23, 0x17	; 23
    7af6:	ab cf       	rjmp	.-170    	; 0x7a4e <asctime_r>
    7af8:	08 95       	ret

00007afa <ctime_gm>:
    7afa:	a6 e1       	ldi	r26, 0x16	; 22
    7afc:	b0 e0       	ldi	r27, 0x00	; 0
    7afe:	e3 e8       	ldi	r30, 0x83	; 131
    7b00:	fd e3       	ldi	r31, 0x3D	; 61
    7b02:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    7b06:	be 01       	movw	r22, r28
    7b08:	6f 5f       	subi	r22, 0xFF	; 255
    7b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    7b0c:	75 da       	rcall	.-2838   	; 0x6ff8 <gmtime_r>
    7b0e:	6e ea       	ldi	r22, 0xAE	; 174
    7b10:	77 e1       	ldi	r23, 0x17	; 23
    7b12:	9d df       	rcall	.-198    	; 0x7a4e <asctime_r>
    7b14:	66 96       	adiw	r28, 0x16	; 22
    7b16:	e2 e0       	ldi	r30, 0x02	; 2
    7b18:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

00007b1c <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7b1c:	a2 e2       	ldi	r26, 0x22	; 34
    7b1e:	b0 e0       	ldi	r27, 0x00	; 0
    7b20:	e4 e9       	ldi	r30, 0x94	; 148
    7b22:	fd e3       	ldi	r31, 0x3D	; 61
    7b24:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    7b28:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7b2a:	40 e0       	ldi	r20, 0x00	; 0
    7b2c:	50 e0       	ldi	r21, 0x00	; 0
    7b2e:	ba 01       	movw	r22, r20
    7b30:	80 e0       	ldi	r24, 0x00	; 0
    7b32:	90 e0       	ldi	r25, 0x00	; 0
    7b34:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <rtc_init>
    7b38:	81 11       	cpse	r24, r1
    7b3a:	27 c0       	rjmp	.+78     	; 0x7b8a <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7b3c:	80 ea       	ldi	r24, 0xA0	; 160
    7b3e:	96 e0       	ldi	r25, 0x06	; 6
    7b40:	1f 92       	push	r1
    7b42:	9f 93       	push	r25
    7b44:	8f 93       	push	r24
    7b46:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        printf("attempting rtc init\n");
    7b4a:	8b e8       	ldi	r24, 0x8B	; 139
    7b4c:	96 e0       	ldi	r25, 0x06	; 6
    7b4e:	1f 92       	push	r1
    7b50:	9f 93       	push	r25
    7b52:	8f 93       	push	r24
    7b54:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7b58:	40 e0       	ldi	r20, 0x00	; 0
    7b5a:	50 e0       	ldi	r21, 0x00	; 0
    7b5c:	ba 01       	movw	r22, r20
    7b5e:	81 e0       	ldi	r24, 0x01	; 1
    7b60:	90 e0       	ldi	r25, 0x00	; 0
    7b62:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <rtc_init>
    7b66:	0f 90       	pop	r0
    7b68:	0f 90       	pop	r0
    7b6a:	0f 90       	pop	r0
    7b6c:	0f 90       	pop	r0
    7b6e:	0f 90       	pop	r0
    7b70:	0f 90       	pop	r0
    7b72:	81 11       	cpse	r24, r1
    7b74:	0a c0       	rjmp	.+20     	; 0x7b8a <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7b76:	84 e7       	ldi	r24, 0x74	; 116
    7b78:	96 e0       	ldi	r25, 0x06	; 6
    7b7a:	1f 92       	push	r1
    7b7c:	9f 93       	push	r25
    7b7e:	8f 93       	push	r24
    7b80:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    7b84:	0f 90       	pop	r0
    7b86:	0f 90       	pop	r0
    7b88:	0f 90       	pop	r0
        }
    }

    if(rtc_read(&tc))
    7b8a:	ce 01       	movw	r24, r28
    7b8c:	01 96       	adiw	r24, 0x01	; 1
    7b8e:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <rtc_read>
    7b92:	88 23       	and	r24, r24
    7b94:	51 f0       	breq	.+20     	; 0x7baa <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7b96:	ce 01       	movw	r24, r28
    7b98:	01 96       	adiw	r24, 0x01	; 1
    7b9a:	03 dd       	rcall	.-1530   	; 0x75a2 <timegm>
    7b9c:	6b 01       	movw	r12, r22
    7b9e:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    7ba0:	67 2b       	or	r22, r23
    7ba2:	68 2b       	or	r22, r24
    7ba4:	69 2b       	or	r22, r25
    7ba6:	c1 f4       	brne	.+48     	; 0x7bd8 <initialize_clock+0xbc>
    7ba8:	0a c0       	rjmp	.+20     	; 0x7bbe <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7baa:	8a e5       	ldi	r24, 0x5A	; 90
    7bac:	96 e0       	ldi	r25, 0x06	; 6
    7bae:	1f 92       	push	r1
    7bb0:	9f 93       	push	r25
    7bb2:	8f 93       	push	r24
    7bb4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    7bb8:	0f 90       	pop	r0
    7bba:	0f 90       	pop	r0
    7bbc:	0f 90       	pop	r0
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7bbe:	86 e3       	ldi	r24, 0x36	; 54
    7bc0:	96 e0       	ldi	r25, 0x06	; 6
    7bc2:	1f 92       	push	r1
    7bc4:	9f 93       	push	r25
    7bc6:	8f 93       	push	r24
    7bc8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    7bcc:	0f 90       	pop	r0
    7bce:	0f 90       	pop	r0
    7bd0:	0f 90       	pop	r0
    7bd2:	c1 2c       	mov	r12, r1
    7bd4:	d1 2c       	mov	r13, r1
    7bd6:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7bd8:	18 a3       	std	Y+32, r17	; 0x20
    7bda:	0f 8f       	std	Y+31, r16	; 0x1f
    tz.tz_dsttime = 0;
    7bdc:	1a a2       	std	Y+34, r1	; 0x22
    7bde:	19 a2       	std	Y+33, r1	; 0x21
    settimezone( &tz );
    7be0:	ce 01       	movw	r24, r28
    7be2:	4f 96       	adiw	r24, 0x1f	; 31
    7be4:	3a da       	rcall	.-2956   	; 0x705a <settimezone>

    ts.tv_sec = seconds;
    7be6:	cf 8a       	std	Y+23, r12	; 0x17
    7be8:	d8 8e       	std	Y+24, r13	; 0x18
    7bea:	e9 8e       	std	Y+25, r14	; 0x19
    7bec:	fa 8e       	std	Y+26, r15	; 0x1a
    ts.tv_nsec = 0L;
    7bee:	1b 8e       	std	Y+27, r1	; 0x1b
    7bf0:	1c 8e       	std	Y+28, r1	; 0x1c
    7bf2:	1d 8e       	std	Y+29, r1	; 0x1d
    7bf4:	1e 8e       	std	Y+30, r1	; 0x1e
    clock_settime(0, (ts_t *) &ts);
    7bf6:	be 01       	movw	r22, r28
    7bf8:	69 5e       	subi	r22, 0xE9	; 233
    7bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    7bfc:	80 e0       	ldi	r24, 0x00	; 0
    7bfe:	90 e0       	ldi	r25, 0x00	; 0
    7c00:	cf d8       	rcall	.-3682   	; 0x6da0 <clock_settime>
}
    7c02:	a2 96       	adiw	r28, 0x22	; 34
    7c04:	e8 e0       	ldi	r30, 0x08	; 8
    7c06:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

00007c0a <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7c0a:	a2 e2       	ldi	r26, 0x22	; 34
    7c0c:	b0 e0       	ldi	r27, 0x00	; 0
    7c0e:	eb e0       	ldi	r30, 0x0B	; 11
    7c10:	fe e3       	ldi	r31, 0x3E	; 62
    7c12:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7c16:	ce 01       	movw	r24, r28
    7c18:	01 96       	adiw	r24, 0x01	; 1
    7c1a:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <rtc_read>
    7c1e:	88 23       	and	r24, r24
    7c20:	21 f1       	breq	.+72     	; 0x7c6a <display_clock+0x60>
    {
        seconds = timegm(&tc);
    7c22:	ce 01       	movw	r24, r28
    7c24:	01 96       	adiw	r24, 0x01	; 1
    7c26:	bd dc       	rcall	.-1670   	; 0x75a2 <timegm>
    7c28:	6f 8f       	std	Y+31, r22	; 0x1f
    7c2a:	78 a3       	std	Y+32, r23	; 0x20
    7c2c:	89 a3       	std	Y+33, r24	; 0x21
    7c2e:	9a a3       	std	Y+34, r25	; 0x22
        printf("rtc seconds: %lu\n",seconds);
    7c30:	9f 93       	push	r25
    7c32:	8f 93       	push	r24
    7c34:	7f 93       	push	r23
    7c36:	6f 93       	push	r22
    7c38:	84 e2       	ldi	r24, 0x24	; 36
    7c3a:	96 e0       	ldi	r25, 0x06	; 6
    7c3c:	1f 92       	push	r1
    7c3e:	9f 93       	push	r25
    7c40:	8f 93       	push	r24
    7c42:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7c46:	ce 01       	movw	r24, r28
    7c48:	01 96       	adiw	r24, 0x01	; 1
    7c4a:	53 df       	rcall	.-346    	; 0x7af2 <asctime>
    7c4c:	9f 93       	push	r25
    7c4e:	8f 93       	push	r24
    7c50:	83 e1       	ldi	r24, 0x13	; 19
    7c52:	96 e0       	ldi	r25, 0x06	; 6
    7c54:	1f 92       	push	r1
    7c56:	9f 93       	push	r25
    7c58:	8f 93       	push	r24
    7c5a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    7c5e:	0f b6       	in	r0, 0x3f	; 63
    7c60:	f8 94       	cli
    7c62:	de bf       	out	0x3e, r29	; 62
    7c64:	0f be       	out	0x3f, r0	; 63
    7c66:	cd bf       	out	0x3d, r28	; 61
    7c68:	0a c0       	rjmp	.+20     	; 0x7c7e <display_clock+0x74>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7c6a:	82 e0       	ldi	r24, 0x02	; 2
    7c6c:	96 e0       	ldi	r25, 0x06	; 6
    7c6e:	1f 92       	push	r1
    7c70:	9f 93       	push	r25
    7c72:	8f 93       	push	r24
    7c74:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    7c78:	0f 90       	pop	r0
    7c7a:	0f 90       	pop	r0
    7c7c:	0f 90       	pop	r0
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7c7e:	be 01       	movw	r22, r28
    7c80:	69 5e       	subi	r22, 0xE9	; 233
    7c82:	7f 4f       	sbci	r23, 0xFF	; 255
    7c84:	80 e0       	ldi	r24, 0x00	; 0
    7c86:	90 e0       	ldi	r25, 0x00	; 0
    7c88:	0e 94 41 34 	call	0x6882	; 0x6882 <clock_gettime>
    seconds = ts.tv_sec;
    7c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    7c8e:	98 8d       	ldd	r25, Y+24	; 0x18
    7c90:	29 8d       	ldd	r18, Y+25	; 0x19
    7c92:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7c94:	8f 8f       	std	Y+31, r24	; 0x1f
    7c96:	98 a3       	std	Y+32, r25	; 0x20
    7c98:	29 a3       	std	Y+33, r18	; 0x21
    7c9a:	3a a3       	std	Y+34, r19	; 0x22
    printf("clk seconds: %lu\n",seconds);
    7c9c:	3f 93       	push	r19
    7c9e:	2f 93       	push	r18
    7ca0:	9f 93       	push	r25
    7ca2:	8f 93       	push	r24
    7ca4:	80 ef       	ldi	r24, 0xF0	; 240
    7ca6:	95 e0       	ldi	r25, 0x05	; 5
    7ca8:	1f 92       	push	r1
    7caa:	9f 93       	push	r25
    7cac:	8f 93       	push	r24
    7cae:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7cb2:	ce 01       	movw	r24, r28
    7cb4:	4f 96       	adiw	r24, 0x1f	; 31
    7cb6:	b5 d9       	rcall	.-3222   	; 0x7022 <gmtime>
    7cb8:	1c df       	rcall	.-456    	; 0x7af2 <asctime>
    7cba:	9f 93       	push	r25
    7cbc:	8f 93       	push	r24
    7cbe:	8f ed       	ldi	r24, 0xDF	; 223
    7cc0:	95 e0       	ldi	r25, 0x05	; 5
    7cc2:	1f 92       	push	r1
    7cc4:	9f 93       	push	r25
    7cc6:	8f 93       	push	r24
    7cc8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
}
    7ccc:	0f b6       	in	r0, 0x3f	; 63
    7cce:	f8 94       	cli
    7cd0:	de bf       	out	0x3e, r29	; 62
    7cd2:	0f be       	out	0x3f, r0	; 63
    7cd4:	cd bf       	out	0x3d, r28	; 61
    7cd6:	a2 96       	adiw	r28, 0x22	; 34
    7cd8:	e2 e0       	ldi	r30, 0x02	; 2
    7cda:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

00007cde <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7cde:	fc 01       	movw	r30, r24
    7ce0:	84 81       	ldd	r24, Z+4	; 0x04
    7ce2:	95 81       	ldd	r25, Z+5	; 0x05
    7ce4:	00 97       	sbiw	r24, 0x00	; 0
    7ce6:	79 f0       	breq	.+30     	; 0x7d06 <_putc_buffer_fn+0x28>
    7ce8:	66 23       	and	r22, r22
    7cea:	69 f0       	breq	.+26     	; 0x7d06 <_putc_buffer_fn+0x28>
    7cec:	01 97       	sbiw	r24, 0x01	; 1
    7cee:	95 83       	std	Z+5, r25	; 0x05
    7cf0:	84 83       	std	Z+4, r24	; 0x04
    7cf2:	86 81       	ldd	r24, Z+6	; 0x06
    7cf4:	97 81       	ldd	r25, Z+7	; 0x07
    7cf6:	01 96       	adiw	r24, 0x01	; 1
    7cf8:	97 83       	std	Z+7, r25	; 0x07
    7cfa:	86 83       	std	Z+6, r24	; 0x06
    7cfc:	a2 81       	ldd	r26, Z+2	; 0x02
    7cfe:	b3 81       	ldd	r27, Z+3	; 0x03
    7d00:	6d 93       	st	X+, r22
    7d02:	b3 83       	std	Z+3, r27	; 0x03
    7d04:	a2 83       	std	Z+2, r26	; 0x02
    7d06:	02 80       	ldd	r0, Z+2	; 0x02
    7d08:	f3 81       	ldd	r31, Z+3	; 0x03
    7d0a:	e0 2d       	mov	r30, r0
    7d0c:	10 82       	st	Z, r1
    7d0e:	08 95       	ret

00007d10 <_putc_fn>:
    7d10:	fc 01       	movw	r30, r24
    7d12:	26 81       	ldd	r18, Z+6	; 0x06
    7d14:	37 81       	ldd	r19, Z+7	; 0x07
    7d16:	2f 5f       	subi	r18, 0xFF	; 255
    7d18:	3f 4f       	sbci	r19, 0xFF	; 255
    7d1a:	37 83       	std	Z+7, r19	; 0x07
    7d1c:	26 83       	std	Z+6, r18	; 0x06
    7d1e:	86 2f       	mov	r24, r22
    7d20:	90 e0       	ldi	r25, 0x00	; 0
    7d22:	0c 94 c0 76 	jmp	0xed80	; 0xed80 <putchar>
    7d26:	08 95       	ret

00007d28 <bin2num>:
    7d28:	a0 e0       	ldi	r26, 0x00	; 0
    7d2a:	b0 e0       	ldi	r27, 0x00	; 0
    7d2c:	ea e9       	ldi	r30, 0x9A	; 154
    7d2e:	fe e3       	ldi	r31, 0x3E	; 62
    7d30:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__prologue_saves__+0xe>
    7d34:	ea 01       	movw	r28, r20
    7d36:	53 e0       	ldi	r21, 0x03	; 3
    7d38:	ee 0c       	add	r14, r14
    7d3a:	ff 1c       	adc	r15, r15
    7d3c:	5a 95       	dec	r21
    7d3e:	e1 f7       	brne	.-8      	; 0x7d38 <bin2num+0x10>
    7d40:	fc 01       	movw	r30, r24
    7d42:	af 01       	movw	r20, r30
    7d44:	48 1b       	sub	r20, r24
    7d46:	59 0b       	sbc	r21, r25
    7d48:	c4 17       	cp	r28, r20
    7d4a:	d5 07       	cpc	r29, r21
    7d4c:	14 f0       	brlt	.+4      	; 0x7d52 <bin2num+0x2a>
    7d4e:	11 92       	st	Z+, r1
    7d50:	f8 cf       	rjmp	.-16     	; 0x7d42 <bin2num+0x1a>
    7d52:	41 e0       	ldi	r20, 0x01	; 1
    7d54:	e4 1a       	sub	r14, r20
    7d56:	f1 08       	sbc	r15, r1
    7d58:	5b 01       	movw	r10, r22
    7d5a:	42 e0       	ldi	r20, 0x02	; 2
    7d5c:	a4 1a       	sub	r10, r20
    7d5e:	b1 08       	sbc	r11, r1
    7d60:	f7 fc       	sbrc	r15, 7
    7d62:	3b c0       	rjmp	.+118    	; 0x7dda <bin2num+0xb2>
    7d64:	f7 01       	movw	r30, r14
    7d66:	43 e0       	ldi	r20, 0x03	; 3
    7d68:	f5 95       	asr	r31
    7d6a:	e7 95       	ror	r30
    7d6c:	4a 95       	dec	r20
    7d6e:	e1 f7       	brne	.-8      	; 0x7d68 <bin2num+0x40>
    7d70:	e0 0f       	add	r30, r16
    7d72:	f1 1f       	adc	r31, r17
    7d74:	40 81       	ld	r20, Z
    7d76:	50 e0       	ldi	r21, 0x00	; 0
    7d78:	f7 01       	movw	r30, r14
    7d7a:	e7 70       	andi	r30, 0x07	; 7
    7d7c:	ff 27       	eor	r31, r31
    7d7e:	02 c0       	rjmp	.+4      	; 0x7d84 <bin2num+0x5c>
    7d80:	55 95       	asr	r21
    7d82:	47 95       	ror	r20
    7d84:	ea 95       	dec	r30
    7d86:	e2 f7       	brpl	.-8      	; 0x7d80 <bin2num+0x58>
    7d88:	41 70       	andi	r20, 0x01	; 1
    7d8a:	55 27       	eor	r21, r21
    7d8c:	dc 01       	movw	r26, r24
    7d8e:	e0 e0       	ldi	r30, 0x00	; 0
    7d90:	f0 e0       	ldi	r31, 0x00	; 0
    7d92:	ec 17       	cp	r30, r28
    7d94:	fd 07       	cpc	r31, r29
    7d96:	ec f4       	brge	.+58     	; 0x7dd2 <bin2num+0xaa>
    7d98:	ea 15       	cp	r30, r10
    7d9a:	fb 05       	cpc	r31, r11
    7d9c:	4c f0       	brlt	.+18     	; 0x7db0 <bin2num+0x88>
    7d9e:	dc 01       	movw	r26, r24
    7da0:	ae 0f       	add	r26, r30
    7da2:	bf 1f       	adc	r27, r31
    7da4:	1c 92       	st	X, r1
    7da6:	41 e0       	ldi	r20, 0x01	; 1
    7da8:	e4 1a       	sub	r14, r20
    7daa:	f1 08       	sbc	r15, r1
    7dac:	ef 01       	movw	r28, r30
    7dae:	d8 cf       	rjmp	.-80     	; 0x7d60 <bin2num+0x38>
    7db0:	9c 90       	ld	r9, X
    7db2:	99 0c       	add	r9, r9
    7db4:	94 2a       	or	r9, r20
    7db6:	49 2d       	mov	r20, r9
    7db8:	50 e0       	ldi	r21, 0x00	; 0
    7dba:	42 17       	cp	r20, r18
    7dbc:	53 07       	cpc	r21, r19
    7dbe:	24 f0       	brlt	.+8      	; 0x7dc8 <bin2num+0xa0>
    7dc0:	92 1a       	sub	r9, r18
    7dc2:	41 e0       	ldi	r20, 0x01	; 1
    7dc4:	50 e0       	ldi	r21, 0x00	; 0
    7dc6:	02 c0       	rjmp	.+4      	; 0x7dcc <bin2num+0xa4>
    7dc8:	40 e0       	ldi	r20, 0x00	; 0
    7dca:	50 e0       	ldi	r21, 0x00	; 0
    7dcc:	9d 92       	st	X+, r9
    7dce:	31 96       	adiw	r30, 0x01	; 1
    7dd0:	e0 cf       	rjmp	.-64     	; 0x7d92 <bin2num+0x6a>
    7dd2:	41 15       	cp	r20, r1
    7dd4:	51 05       	cpc	r21, r1
    7dd6:	01 f7       	brne	.-64     	; 0x7d98 <bin2num+0x70>
    7dd8:	e2 cf       	rjmp	.-60     	; 0x7d9e <bin2num+0x76>
    7dda:	fc 01       	movw	r30, r24
    7ddc:	9f 01       	movw	r18, r30
    7dde:	28 1b       	sub	r18, r24
    7de0:	39 0b       	sbc	r19, r25
    7de2:	2c 17       	cp	r18, r28
    7de4:	3d 07       	cpc	r19, r29
    7de6:	4c f4       	brge	.+18     	; 0x7dfa <bin2num+0xd2>
    7de8:	20 81       	ld	r18, Z
    7dea:	2a 30       	cpi	r18, 0x0A	; 10
    7dec:	10 f4       	brcc	.+4      	; 0x7df2 <bin2num+0xca>
    7dee:	20 5d       	subi	r18, 0xD0	; 208
    7df0:	01 c0       	rjmp	.+2      	; 0x7df4 <bin2num+0xcc>
    7df2:	29 5a       	subi	r18, 0xA9	; 169
    7df4:	20 83       	st	Z, r18
    7df6:	31 96       	adiw	r30, 0x01	; 1
    7df8:	f1 cf       	rjmp	.-30     	; 0x7ddc <bin2num+0xb4>
    7dfa:	9e 01       	movw	r18, r28
    7dfc:	d7 ff       	sbrs	r29, 7
    7dfe:	02 c0       	rjmp	.+4      	; 0x7e04 <bin2num+0xdc>
    7e00:	20 e0       	ldi	r18, 0x00	; 0
    7e02:	30 e0       	ldi	r19, 0x00	; 0
    7e04:	c1 14       	cp	r12, r1
    7e06:	d1 04       	cpc	r13, r1
    7e08:	61 f0       	breq	.+24     	; 0x7e22 <bin2num+0xfa>
    7e0a:	61 50       	subi	r22, 0x01	; 1
    7e0c:	71 09       	sbc	r23, r1
    7e0e:	26 17       	cp	r18, r22
    7e10:	37 07       	cpc	r19, r23
    7e12:	3c f4       	brge	.+14     	; 0x7e22 <bin2num+0xfa>
    7e14:	fc 01       	movw	r30, r24
    7e16:	e2 0f       	add	r30, r18
    7e18:	f3 1f       	adc	r31, r19
    7e1a:	c0 82       	st	Z, r12
    7e1c:	21 96       	adiw	r28, 0x01	; 1
    7e1e:	2f 5f       	subi	r18, 0xFF	; 255
    7e20:	3f 4f       	sbci	r19, 0xFF	; 255
    7e22:	fc 01       	movw	r30, r24
    7e24:	e2 0f       	add	r30, r18
    7e26:	f3 1f       	adc	r31, r19
    7e28:	10 82       	st	Z, r1
    7e2a:	0e 94 dc 31 	call	0x63b8	; 0x63b8 <reverse>
    7e2e:	ce 01       	movw	r24, r28
    7e30:	cd b7       	in	r28, 0x3d	; 61
    7e32:	de b7       	in	r29, 0x3e	; 62
    7e34:	eb e0       	ldi	r30, 0x0B	; 11
    7e36:	0c 94 58 e5 	jmp	0x1cab0	; 0x1cab0 <__epilogue_restores__+0xe>

00007e3a <pch_init>:
    7e3a:	e2 e7       	ldi	r30, 0x72	; 114
    7e3c:	f9 e1       	ldi	r31, 0x19	; 25
    7e3e:	91 83       	std	Z+1, r25	; 0x01
    7e40:	80 83       	st	Z, r24
    7e42:	13 82       	std	Z+3, r1	; 0x03
    7e44:	12 82       	std	Z+2, r1	; 0x02
    7e46:	61 50       	subi	r22, 0x01	; 1
    7e48:	71 09       	sbc	r23, r1
    7e4a:	75 83       	std	Z+5, r23	; 0x05
    7e4c:	64 83       	std	Z+4, r22	; 0x04
    7e4e:	fc 01       	movw	r30, r24
    7e50:	10 82       	st	Z, r1
    7e52:	08 95       	ret

00007e54 <pch>:
    7e54:	20 91 74 19 	lds	r18, 0x1974	; 0x801974 <_pch+0x2>
    7e58:	30 91 75 19 	lds	r19, 0x1975	; 0x801975 <_pch+0x3>
    7e5c:	60 91 76 19 	lds	r22, 0x1976	; 0x801976 <_pch+0x4>
    7e60:	70 91 77 19 	lds	r23, 0x1977	; 0x801977 <_pch+0x5>
    7e64:	40 91 72 19 	lds	r20, 0x1972	; 0x801972 <_pch>
    7e68:	50 91 73 19 	lds	r21, 0x1973	; 0x801973 <_pch+0x1>
    7e6c:	26 17       	cp	r18, r22
    7e6e:	37 07       	cpc	r19, r23
    7e70:	64 f4       	brge	.+24     	; 0x7e8a <pch+0x36>
    7e72:	b9 01       	movw	r22, r18
    7e74:	6f 5f       	subi	r22, 0xFF	; 255
    7e76:	7f 4f       	sbci	r23, 0xFF	; 255
    7e78:	70 93 75 19 	sts	0x1975, r23	; 0x801975 <_pch+0x3>
    7e7c:	60 93 74 19 	sts	0x1974, r22	; 0x801974 <_pch+0x2>
    7e80:	fa 01       	movw	r30, r20
    7e82:	e2 0f       	add	r30, r18
    7e84:	f3 1f       	adc	r31, r19
    7e86:	80 83       	st	Z, r24
    7e88:	04 c0       	rjmp	.+8      	; 0x7e92 <pch+0x3e>
    7e8a:	fa 01       	movw	r30, r20
    7e8c:	e2 0f       	add	r30, r18
    7e8e:	f3 1f       	adc	r31, r19
    7e90:	10 82       	st	Z, r1
    7e92:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <_pch+0x2>
    7e96:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <_pch+0x3>
    7e9a:	08 95       	ret

00007e9c <p_ntoa>:
    7e9c:	af 92       	push	r10
    7e9e:	cf 92       	push	r12
    7ea0:	df 92       	push	r13
    7ea2:	ef 92       	push	r14
    7ea4:	ff 92       	push	r15
    7ea6:	0f 93       	push	r16
    7ea8:	1f 93       	push	r17
    7eaa:	cf 93       	push	r28
    7eac:	df 93       	push	r29
    7eae:	dc 01       	movw	r26, r24
    7eb0:	eb 01       	movw	r28, r22
    7eb2:	fa 01       	movw	r30, r20
    7eb4:	b9 01       	movw	r22, r18
    7eb6:	98 01       	movw	r18, r16
    7eb8:	a6 01       	movw	r20, r12
    7eba:	9a 2d       	mov	r25, r10
    7ebc:	a5 fa       	bst	r10, 5
    7ebe:	cc 24       	eor	r12, r12
    7ec0:	c0 f8       	bld	r12, 0
    7ec2:	a6 fc       	sbrc	r10, 6
    7ec4:	07 c0       	rjmp	.+14     	; 0x7ed4 <p_ntoa+0x38>
    7ec6:	a2 fc       	sbrc	r10, 2
    7ec8:	08 c0       	rjmp	.+16     	; 0x7eda <p_ntoa+0x3e>
    7eca:	a4 fe       	sbrs	r10, 4
    7ecc:	09 c0       	rjmp	.+18     	; 0x7ee0 <p_ntoa+0x44>
    7ece:	00 e2       	ldi	r16, 0x20	; 32
    7ed0:	10 e0       	ldi	r17, 0x00	; 0
    7ed2:	08 c0       	rjmp	.+16     	; 0x7ee4 <p_ntoa+0x48>
    7ed4:	0d e2       	ldi	r16, 0x2D	; 45
    7ed6:	10 e0       	ldi	r17, 0x00	; 0
    7ed8:	05 c0       	rjmp	.+10     	; 0x7ee4 <p_ntoa+0x48>
    7eda:	0b e2       	ldi	r16, 0x2B	; 43
    7edc:	10 e0       	ldi	r17, 0x00	; 0
    7ede:	02 c0       	rjmp	.+4      	; 0x7ee4 <p_ntoa+0x48>
    7ee0:	00 e0       	ldi	r16, 0x00	; 0
    7ee2:	10 e0       	ldi	r17, 0x00	; 0
    7ee4:	95 ff       	sbrs	r25, 5
    7ee6:	04 c0       	rjmp	.+8      	; 0x7ef0 <p_ntoa+0x54>
    7ee8:	89 2f       	mov	r24, r25
    7eea:	8a 70       	andi	r24, 0x0A	; 10
    7eec:	09 f0       	breq	.+2      	; 0x7ef0 <p_ntoa+0x54>
    7eee:	c1 2c       	mov	r12, r1
    7ef0:	c0 fa       	bst	r12, 0
    7ef2:	95 f9       	bld	r25, 5
    7ef4:	89 2f       	mov	r24, r25
    7ef6:	82 70       	andi	r24, 0x02	; 2
    7ef8:	c8 2e       	mov	r12, r24
    7efa:	91 fd       	sbrc	r25, 1
    7efc:	02 c0       	rjmp	.+4      	; 0x7f02 <p_ntoa+0x66>
    7efe:	40 e0       	ldi	r20, 0x00	; 0
    7f00:	50 e0       	ldi	r21, 0x00	; 0
    7f02:	89 2f       	mov	r24, r25
    7f04:	83 70       	andi	r24, 0x03	; 3
    7f06:	11 f4       	brne	.+4      	; 0x7f0c <p_ntoa+0x70>
    7f08:	41 e0       	ldi	r20, 0x01	; 1
    7f0a:	50 e0       	ldi	r21, 0x00	; 0
    7f0c:	90 ff       	sbrs	r25, 0
    7f0e:	0c c0       	rjmp	.+24     	; 0x7f28 <p_ntoa+0x8c>
    7f10:	95 fd       	sbrc	r25, 5
    7f12:	05 c0       	rjmp	.+10     	; 0x7f1e <p_ntoa+0x82>
    7f14:	c1 10       	cpse	r12, r1
    7f16:	08 c0       	rjmp	.+16     	; 0x7f28 <p_ntoa+0x8c>
    7f18:	41 e0       	ldi	r20, 0x01	; 1
    7f1a:	50 e0       	ldi	r21, 0x00	; 0
    7f1c:	05 c0       	rjmp	.+10     	; 0x7f28 <p_ntoa+0x8c>
    7f1e:	94 75       	andi	r25, 0x54	; 84
    7f20:	a7 01       	movw	r20, r14
    7f22:	11 f0       	breq	.+4      	; 0x7f28 <p_ntoa+0x8c>
    7f24:	41 50       	subi	r20, 0x01	; 1
    7f26:	51 09       	sbc	r21, r1
    7f28:	68 01       	movw	r12, r16
    7f2a:	7e 01       	movw	r14, r28
    7f2c:	8d 01       	movw	r16, r26
    7f2e:	cf 01       	movw	r24, r30
    7f30:	fb de       	rcall	.-522    	; 0x7d28 <bin2num>
    7f32:	df 91       	pop	r29
    7f34:	cf 91       	pop	r28
    7f36:	1f 91       	pop	r17
    7f38:	0f 91       	pop	r16
    7f3a:	ff 90       	pop	r15
    7f3c:	ef 90       	pop	r14
    7f3e:	df 90       	pop	r13
    7f40:	cf 90       	pop	r12
    7f42:	af 90       	pop	r10
    7f44:	08 95       	ret

00007f46 <p_ftoa>:
    7f46:	2f 92       	push	r2
    7f48:	3f 92       	push	r3
    7f4a:	4f 92       	push	r4
    7f4c:	5f 92       	push	r5
    7f4e:	6f 92       	push	r6
    7f50:	7f 92       	push	r7
    7f52:	8f 92       	push	r8
    7f54:	9f 92       	push	r9
    7f56:	af 92       	push	r10
    7f58:	bf 92       	push	r11
    7f5a:	cf 92       	push	r12
    7f5c:	ef 92       	push	r14
    7f5e:	ff 92       	push	r15
    7f60:	0f 93       	push	r16
    7f62:	1f 93       	push	r17
    7f64:	cf 93       	push	r28
    7f66:	df 93       	push	r29
    7f68:	4b 01       	movw	r8, r22
    7f6a:	5c 01       	movw	r10, r24
    7f6c:	1a 01       	movw	r2, r20
    7f6e:	38 01       	movw	r6, r16
    7f70:	c6 fa       	bst	r12, 6
    7f72:	cc 27       	eor	r28, r28
    7f74:	c0 f9       	bld	r28, 0
    7f76:	b9 01       	movw	r22, r18
    7f78:	ca 01       	movw	r24, r20
    7f7a:	5f df       	rcall	.-322    	; 0x7e3a <pch_init>
    7f7c:	20 e0       	ldi	r18, 0x00	; 0
    7f7e:	30 e0       	ldi	r19, 0x00	; 0
    7f80:	a9 01       	movw	r20, r18
    7f82:	c5 01       	movw	r24, r10
    7f84:	b4 01       	movw	r22, r8
    7f86:	0e 94 e4 e5 	call	0x1cbc8	; 0x1cbc8 <__cmpsf2>
    7f8a:	87 ff       	sbrs	r24, 7
    7f8c:	05 c0       	rjmp	.+10     	; 0x7f98 <p_ftoa+0x52>
    7f8e:	b7 fa       	bst	r11, 7
    7f90:	b0 94       	com	r11
    7f92:	b7 f8       	bld	r11, 7
    7f94:	b0 94       	com	r11
    7f96:	c1 e0       	ldi	r28, 0x01	; 1
    7f98:	c0 fb       	bst	r28, 0
    7f9a:	c6 f8       	bld	r12, 6
    7f9c:	c6 fe       	sbrs	r12, 6
    7f9e:	02 c0       	rjmp	.+4      	; 0x7fa4 <p_ftoa+0x5e>
    7fa0:	8d e2       	ldi	r24, 0x2D	; 45
    7fa2:	07 c0       	rjmp	.+14     	; 0x7fb2 <p_ftoa+0x6c>
    7fa4:	c2 fe       	sbrs	r12, 2
    7fa6:	02 c0       	rjmp	.+4      	; 0x7fac <p_ftoa+0x66>
    7fa8:	8b e2       	ldi	r24, 0x2B	; 43
    7faa:	03 c0       	rjmp	.+6      	; 0x7fb2 <p_ftoa+0x6c>
    7fac:	c4 fe       	sbrs	r12, 4
    7fae:	02 c0       	rjmp	.+4      	; 0x7fb4 <p_ftoa+0x6e>
    7fb0:	80 e2       	ldi	r24, 0x20	; 32
    7fb2:	50 df       	rcall	.-352    	; 0x7e54 <pch>
    7fb4:	e7 01       	movw	r28, r14
    7fb6:	f7 fe       	sbrs	r15, 7
    7fb8:	02 c0       	rjmp	.+4      	; 0x7fbe <p_ftoa+0x78>
    7fba:	c0 e0       	ldi	r28, 0x00	; 0
    7fbc:	d0 e0       	ldi	r29, 0x00	; 0
    7fbe:	20 e0       	ldi	r18, 0x00	; 0
    7fc0:	30 e0       	ldi	r19, 0x00	; 0
    7fc2:	a9 01       	movw	r20, r18
    7fc4:	c5 01       	movw	r24, r10
    7fc6:	b4 01       	movw	r22, r8
    7fc8:	0e 94 e4 e5 	call	0x1cbc8	; 0x1cbc8 <__cmpsf2>
    7fcc:	88 23       	and	r24, r24
    7fce:	d1 f1       	breq	.+116    	; 0x8044 <p_ftoa+0xfe>
    7fd0:	c1 fe       	sbrs	r12, 1
    7fd2:	11 c0       	rjmp	.+34     	; 0x7ff6 <p_ftoa+0xb0>
    7fd4:	8e 01       	movw	r16, r28
    7fd6:	60 e0       	ldi	r22, 0x00	; 0
    7fd8:	70 e0       	ldi	r23, 0x00	; 0
    7fda:	80 e0       	ldi	r24, 0x00	; 0
    7fdc:	9f e3       	ldi	r25, 0x3F	; 63
    7fde:	01 15       	cp	r16, r1
    7fe0:	11 05       	cpc	r17, r1
    7fe2:	69 f0       	breq	.+26     	; 0x7ffe <p_ftoa+0xb8>
    7fe4:	20 e0       	ldi	r18, 0x00	; 0
    7fe6:	30 e0       	ldi	r19, 0x00	; 0
    7fe8:	40 e2       	ldi	r20, 0x20	; 32
    7fea:	51 e4       	ldi	r21, 0x41	; 65
    7fec:	0e 94 e8 e5 	call	0x1cbd0	; 0x1cbd0 <__divsf3>
    7ff0:	01 50       	subi	r16, 0x01	; 1
    7ff2:	11 09       	sbc	r17, r1
    7ff4:	f4 cf       	rjmp	.-24     	; 0x7fde <p_ftoa+0x98>
    7ff6:	60 e0       	ldi	r22, 0x00	; 0
    7ff8:	70 e0       	ldi	r23, 0x00	; 0
    7ffa:	80 e0       	ldi	r24, 0x00	; 0
    7ffc:	9f e3       	ldi	r25, 0x3F	; 63
    7ffe:	9b 01       	movw	r18, r22
    8000:	ac 01       	movw	r20, r24
    8002:	c5 01       	movw	r24, r10
    8004:	b4 01       	movw	r22, r8
    8006:	0e 94 80 e5 	call	0x1cb00	; 0x1cb00 <__addsf3>
    800a:	4b 01       	movw	r8, r22
    800c:	5c 01       	movw	r10, r24
    800e:	ee 24       	eor	r14, r14
    8010:	e3 94       	inc	r14
    8012:	f1 2c       	mov	r15, r1
    8014:	20 e0       	ldi	r18, 0x00	; 0
    8016:	30 e0       	ldi	r19, 0x00	; 0
    8018:	40 e2       	ldi	r20, 0x20	; 32
    801a:	51 e4       	ldi	r21, 0x41	; 65
    801c:	c5 01       	movw	r24, r10
    801e:	b4 01       	movw	r22, r8
    8020:	0e 94 33 e7 	call	0x1ce66	; 0x1ce66 <__gesf2>
    8024:	87 fd       	sbrc	r24, 7
    8026:	11 c0       	rjmp	.+34     	; 0x804a <p_ftoa+0x104>
    8028:	2f ef       	ldi	r18, 0xFF	; 255
    802a:	e2 1a       	sub	r14, r18
    802c:	f2 0a       	sbc	r15, r18
    802e:	20 e0       	ldi	r18, 0x00	; 0
    8030:	30 e0       	ldi	r19, 0x00	; 0
    8032:	40 e2       	ldi	r20, 0x20	; 32
    8034:	51 e4       	ldi	r21, 0x41	; 65
    8036:	c5 01       	movw	r24, r10
    8038:	b4 01       	movw	r22, r8
    803a:	0e 94 e8 e5 	call	0x1cbd0	; 0x1cbd0 <__divsf3>
    803e:	4b 01       	movw	r8, r22
    8040:	5c 01       	movw	r10, r24
    8042:	e8 cf       	rjmp	.-48     	; 0x8014 <p_ftoa+0xce>
    8044:	ee 24       	eor	r14, r14
    8046:	e3 94       	inc	r14
    8048:	f1 2c       	mov	r15, r1
    804a:	8c 2d       	mov	r24, r12
    804c:	88 72       	andi	r24, 0x28	; 40
    804e:	80 32       	cpi	r24, 0x20	; 32
    8050:	b9 f4       	brne	.+46     	; 0x8080 <p_ftoa+0x13a>
    8052:	83 01       	movw	r16, r6
    8054:	0e 19       	sub	r16, r14
    8056:	1f 09       	sbc	r17, r15
    8058:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <_pch+0x2>
    805c:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <_pch+0x3>
    8060:	08 1b       	sub	r16, r24
    8062:	19 0b       	sbc	r17, r25
    8064:	c1 fe       	sbrs	r12, 1
    8066:	06 c0       	rjmp	.+12     	; 0x8074 <p_ftoa+0x12e>
    8068:	20 97       	sbiw	r28, 0x00	; 0
    806a:	21 f0       	breq	.+8      	; 0x8074 <p_ftoa+0x12e>
    806c:	0c 1b       	sub	r16, r28
    806e:	1d 0b       	sbc	r17, r29
    8070:	01 50       	subi	r16, 0x01	; 1
    8072:	11 09       	sbc	r17, r1
    8074:	10 16       	cp	r1, r16
    8076:	11 06       	cpc	r1, r17
    8078:	1c f4       	brge	.+6      	; 0x8080 <p_ftoa+0x13a>
    807a:	80 e3       	ldi	r24, 0x30	; 48
    807c:	eb de       	rcall	.-554    	; 0x7e54 <pch>
    807e:	f8 cf       	rjmp	.-16     	; 0x8070 <p_ftoa+0x12a>
    8080:	c5 01       	movw	r24, r10
    8082:	b4 01       	movw	r22, r8
    8084:	0e 94 50 e6 	call	0x1cca0	; 0x1cca0 <__fixsfsi>
    8088:	2b 01       	movw	r4, r22
    808a:	3c 01       	movw	r6, r24
    808c:	80 e3       	ldi	r24, 0x30	; 48
    808e:	84 0d       	add	r24, r4
    8090:	e1 de       	rcall	.-574    	; 0x7e54 <pch>
    8092:	b2 01       	movw	r22, r4
    8094:	55 0c       	add	r5, r5
    8096:	88 0b       	sbc	r24, r24
    8098:	99 0b       	sbc	r25, r25
    809a:	0e 94 83 e6 	call	0x1cd06	; 0x1cd06 <__floatsisf>
    809e:	9b 01       	movw	r18, r22
    80a0:	ac 01       	movw	r20, r24
    80a2:	c5 01       	movw	r24, r10
    80a4:	b4 01       	movw	r22, r8
    80a6:	0e 94 7f e5 	call	0x1cafe	; 0x1cafe <__subsf3>
    80aa:	21 e0       	ldi	r18, 0x01	; 1
    80ac:	e2 1a       	sub	r14, r18
    80ae:	f1 08       	sbc	r15, r1
    80b0:	20 e0       	ldi	r18, 0x00	; 0
    80b2:	30 e0       	ldi	r19, 0x00	; 0
    80b4:	40 e2       	ldi	r20, 0x20	; 32
    80b6:	51 e4       	ldi	r21, 0x41	; 65
    80b8:	0e 94 37 e7 	call	0x1ce6e	; 0x1ce6e <__mulsf3>
    80bc:	4b 01       	movw	r8, r22
    80be:	5c 01       	movw	r10, r24
    80c0:	e1 14       	cp	r14, r1
    80c2:	f1 04       	cpc	r15, r1
    80c4:	e9 f6       	brne	.-70     	; 0x8080 <p_ftoa+0x13a>
    80c6:	c1 fc       	sbrc	r12, 1
    80c8:	1c c0       	rjmp	.+56     	; 0x8102 <p_ftoa+0x1bc>
    80ca:	80 e0       	ldi	r24, 0x00	; 0
    80cc:	c3 de       	rcall	.-634    	; 0x7e54 <pch>
    80ce:	f1 01       	movw	r30, r2
    80d0:	01 90       	ld	r0, Z+
    80d2:	00 20       	and	r0, r0
    80d4:	e9 f7       	brne	.-6      	; 0x80d0 <p_ftoa+0x18a>
    80d6:	31 97       	sbiw	r30, 0x01	; 1
    80d8:	cf 01       	movw	r24, r30
    80da:	82 19       	sub	r24, r2
    80dc:	93 09       	sbc	r25, r3
    80de:	df 91       	pop	r29
    80e0:	cf 91       	pop	r28
    80e2:	1f 91       	pop	r17
    80e4:	0f 91       	pop	r16
    80e6:	ff 90       	pop	r15
    80e8:	ef 90       	pop	r14
    80ea:	cf 90       	pop	r12
    80ec:	bf 90       	pop	r11
    80ee:	af 90       	pop	r10
    80f0:	9f 90       	pop	r9
    80f2:	8f 90       	pop	r8
    80f4:	7f 90       	pop	r7
    80f6:	6f 90       	pop	r6
    80f8:	5f 90       	pop	r5
    80fa:	4f 90       	pop	r4
    80fc:	3f 90       	pop	r3
    80fe:	2f 90       	pop	r2
    8100:	08 95       	ret
    8102:	20 97       	sbiw	r28, 0x00	; 0
    8104:	11 f3       	breq	.-60     	; 0x80ca <p_ftoa+0x184>
    8106:	8e e2       	ldi	r24, 0x2E	; 46
    8108:	a5 de       	rcall	.-694    	; 0x7e54 <pch>
    810a:	c5 01       	movw	r24, r10
    810c:	b4 01       	movw	r22, r8
    810e:	0e 94 50 e6 	call	0x1cca0	; 0x1cca0 <__fixsfsi>
    8112:	2b 01       	movw	r4, r22
    8114:	3c 01       	movw	r6, r24
    8116:	07 2e       	mov	r0, r23
    8118:	00 0c       	add	r0, r0
    811a:	88 0b       	sbc	r24, r24
    811c:	99 0b       	sbc	r25, r25
    811e:	0e 94 83 e6 	call	0x1cd06	; 0x1cd06 <__floatsisf>
    8122:	9b 01       	movw	r18, r22
    8124:	ac 01       	movw	r20, r24
    8126:	c5 01       	movw	r24, r10
    8128:	b4 01       	movw	r22, r8
    812a:	0e 94 7f e5 	call	0x1cafe	; 0x1cafe <__subsf3>
    812e:	4b 01       	movw	r8, r22
    8130:	5c 01       	movw	r10, r24
    8132:	80 e3       	ldi	r24, 0x30	; 48
    8134:	84 0d       	add	r24, r4
    8136:	8e de       	rcall	.-740    	; 0x7e54 <pch>
    8138:	21 97       	sbiw	r28, 0x01	; 1
    813a:	20 e0       	ldi	r18, 0x00	; 0
    813c:	30 e0       	ldi	r19, 0x00	; 0
    813e:	40 e2       	ldi	r20, 0x20	; 32
    8140:	51 e4       	ldi	r21, 0x41	; 65
    8142:	c5 01       	movw	r24, r10
    8144:	b4 01       	movw	r22, r8
    8146:	0e 94 37 e7 	call	0x1ce6e	; 0x1ce6e <__mulsf3>
    814a:	4b 01       	movw	r8, r22
    814c:	5c 01       	movw	r10, r24
    814e:	20 97       	sbiw	r28, 0x00	; 0
    8150:	e1 f6       	brne	.-72     	; 0x810a <p_ftoa+0x1c4>
    8152:	bb cf       	rjmp	.-138    	; 0x80ca <p_ftoa+0x184>

00008154 <p_etoa>:
    8154:	ad e0       	ldi	r26, 0x0D	; 13
    8156:	b0 e0       	ldi	r27, 0x00	; 0
    8158:	e0 eb       	ldi	r30, 0xB0	; 176
    815a:	f0 e4       	ldi	r31, 0x40	; 64
    815c:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    8160:	4b 01       	movw	r8, r22
    8162:	5c 01       	movw	r10, r24
    8164:	5b 87       	std	Y+11, r21	; 0x0b
    8166:	4a 87       	std	Y+10, r20	; 0x0a
    8168:	1d 87       	std	Y+13, r17	; 0x0d
    816a:	0c 87       	std	Y+12, r16	; 0x0c
    816c:	3c 2c       	mov	r3, r12
    816e:	c6 fa       	bst	r12, 6
    8170:	11 27       	eor	r17, r17
    8172:	10 f9       	bld	r17, 0
    8174:	b9 01       	movw	r22, r18
    8176:	ca 01       	movw	r24, r20
    8178:	60 de       	rcall	.-832    	; 0x7e3a <pch_init>
    817a:	20 e0       	ldi	r18, 0x00	; 0
    817c:	30 e0       	ldi	r19, 0x00	; 0
    817e:	a9 01       	movw	r20, r18
    8180:	c5 01       	movw	r24, r10
    8182:	b4 01       	movw	r22, r8
    8184:	0e 94 e4 e5 	call	0x1cbc8	; 0x1cbc8 <__cmpsf2>
    8188:	87 ff       	sbrs	r24, 7
    818a:	05 c0       	rjmp	.+10     	; 0x8196 <p_etoa+0x42>
    818c:	b7 fa       	bst	r11, 7
    818e:	b0 94       	com	r11
    8190:	b7 f8       	bld	r11, 7
    8192:	b0 94       	com	r11
    8194:	11 e0       	ldi	r17, 0x01	; 1
    8196:	10 fb       	bst	r17, 0
    8198:	36 f8       	bld	r3, 6
    819a:	36 fe       	sbrs	r3, 6
    819c:	02 c0       	rjmp	.+4      	; 0x81a2 <p_etoa+0x4e>
    819e:	8d e2       	ldi	r24, 0x2D	; 45
    81a0:	07 c0       	rjmp	.+14     	; 0x81b0 <p_etoa+0x5c>
    81a2:	32 fe       	sbrs	r3, 2
    81a4:	02 c0       	rjmp	.+4      	; 0x81aa <p_etoa+0x56>
    81a6:	8b e2       	ldi	r24, 0x2B	; 43
    81a8:	03 c0       	rjmp	.+6      	; 0x81b0 <p_etoa+0x5c>
    81aa:	34 fe       	sbrs	r3, 4
    81ac:	02 c0       	rjmp	.+4      	; 0x81b2 <p_etoa+0x5e>
    81ae:	80 e2       	ldi	r24, 0x20	; 32
    81b0:	51 de       	rcall	.-862    	; 0x7e54 <pch>
    81b2:	37 01       	movw	r6, r14
    81b4:	f7 fe       	sbrs	r15, 7
    81b6:	02 c0       	rjmp	.+4      	; 0x81bc <p_etoa+0x68>
    81b8:	61 2c       	mov	r6, r1
    81ba:	71 2c       	mov	r7, r1
    81bc:	19 86       	std	Y+9, r1	; 0x09
    81be:	18 86       	std	Y+8, r1	; 0x08
    81c0:	20 e0       	ldi	r18, 0x00	; 0
    81c2:	30 e0       	ldi	r19, 0x00	; 0
    81c4:	a9 01       	movw	r20, r18
    81c6:	c5 01       	movw	r24, r10
    81c8:	b4 01       	movw	r22, r8
    81ca:	0e 94 e4 e5 	call	0x1cbc8	; 0x1cbc8 <__cmpsf2>
    81ce:	23 2d       	mov	r18, r3
    81d0:	22 70       	andi	r18, 0x02	; 2
    81d2:	22 2e       	mov	r2, r18
    81d4:	88 23       	and	r24, r24
    81d6:	09 f4       	brne	.+2      	; 0x81da <p_etoa+0x86>
    81d8:	70 c0       	rjmp	.+224    	; 0x82ba <p_etoa+0x166>
    81da:	22 23       	and	r18, r18
    81dc:	b1 f0       	breq	.+44     	; 0x820a <p_etoa+0xb6>
    81de:	83 01       	movw	r16, r6
    81e0:	c1 2c       	mov	r12, r1
    81e2:	d1 2c       	mov	r13, r1
    81e4:	e1 2c       	mov	r14, r1
    81e6:	2f e3       	ldi	r18, 0x3F	; 63
    81e8:	f2 2e       	mov	r15, r18
    81ea:	01 15       	cp	r16, r1
    81ec:	11 05       	cpc	r17, r1
    81ee:	91 f0       	breq	.+36     	; 0x8214 <p_etoa+0xc0>
    81f0:	20 e0       	ldi	r18, 0x00	; 0
    81f2:	30 e0       	ldi	r19, 0x00	; 0
    81f4:	40 e2       	ldi	r20, 0x20	; 32
    81f6:	51 e4       	ldi	r21, 0x41	; 65
    81f8:	c7 01       	movw	r24, r14
    81fa:	b6 01       	movw	r22, r12
    81fc:	0e 94 e8 e5 	call	0x1cbd0	; 0x1cbd0 <__divsf3>
    8200:	6b 01       	movw	r12, r22
    8202:	7c 01       	movw	r14, r24
    8204:	01 50       	subi	r16, 0x01	; 1
    8206:	11 09       	sbc	r17, r1
    8208:	f0 cf       	rjmp	.-32     	; 0x81ea <p_etoa+0x96>
    820a:	c1 2c       	mov	r12, r1
    820c:	d1 2c       	mov	r13, r1
    820e:	e1 2c       	mov	r14, r1
    8210:	9f e3       	ldi	r25, 0x3F	; 63
    8212:	f9 2e       	mov	r15, r25
    8214:	41 2c       	mov	r4, r1
    8216:	51 2c       	mov	r5, r1
    8218:	82 01       	movw	r16, r4
    821a:	01 50       	subi	r16, 0x01	; 1
    821c:	11 09       	sbc	r17, r1
    821e:	20 e0       	ldi	r18, 0x00	; 0
    8220:	30 e0       	ldi	r19, 0x00	; 0
    8222:	40 e8       	ldi	r20, 0x80	; 128
    8224:	5f e3       	ldi	r21, 0x3F	; 63
    8226:	c5 01       	movw	r24, r10
    8228:	b4 01       	movw	r22, r8
    822a:	0e 94 e4 e5 	call	0x1cbc8	; 0x1cbc8 <__cmpsf2>
    822e:	87 ff       	sbrs	r24, 7
    8230:	0c c0       	rjmp	.+24     	; 0x824a <p_etoa+0xf6>
    8232:	20 e0       	ldi	r18, 0x00	; 0
    8234:	30 e0       	ldi	r19, 0x00	; 0
    8236:	40 e2       	ldi	r20, 0x20	; 32
    8238:	51 e4       	ldi	r21, 0x41	; 65
    823a:	c5 01       	movw	r24, r10
    823c:	b4 01       	movw	r22, r8
    823e:	0e 94 37 e7 	call	0x1ce6e	; 0x1ce6e <__mulsf3>
    8242:	4b 01       	movw	r8, r22
    8244:	5c 01       	movw	r10, r24
    8246:	28 01       	movw	r4, r16
    8248:	e7 cf       	rjmp	.-50     	; 0x8218 <p_etoa+0xc4>
    824a:	82 01       	movw	r16, r4
    824c:	0f 5f       	subi	r16, 0xFF	; 255
    824e:	1f 4f       	sbci	r17, 0xFF	; 255
    8250:	20 e0       	ldi	r18, 0x00	; 0
    8252:	30 e0       	ldi	r19, 0x00	; 0
    8254:	40 e2       	ldi	r20, 0x20	; 32
    8256:	51 e4       	ldi	r21, 0x41	; 65
    8258:	c5 01       	movw	r24, r10
    825a:	b4 01       	movw	r22, r8
    825c:	0e 94 33 e7 	call	0x1ce66	; 0x1ce66 <__gesf2>
    8260:	87 fd       	sbrc	r24, 7
    8262:	0c c0       	rjmp	.+24     	; 0x827c <p_etoa+0x128>
    8264:	20 e0       	ldi	r18, 0x00	; 0
    8266:	30 e0       	ldi	r19, 0x00	; 0
    8268:	40 e2       	ldi	r20, 0x20	; 32
    826a:	51 e4       	ldi	r21, 0x41	; 65
    826c:	c5 01       	movw	r24, r10
    826e:	b4 01       	movw	r22, r8
    8270:	0e 94 e8 e5 	call	0x1cbd0	; 0x1cbd0 <__divsf3>
    8274:	4b 01       	movw	r8, r22
    8276:	5c 01       	movw	r10, r24
    8278:	28 01       	movw	r4, r16
    827a:	e7 cf       	rjmp	.-50     	; 0x824a <p_etoa+0xf6>
    827c:	a7 01       	movw	r20, r14
    827e:	96 01       	movw	r18, r12
    8280:	c5 01       	movw	r24, r10
    8282:	b4 01       	movw	r22, r8
    8284:	0e 94 80 e5 	call	0x1cb00	; 0x1cb00 <__addsf3>
    8288:	4b 01       	movw	r8, r22
    828a:	5c 01       	movw	r10, r24
    828c:	82 01       	movw	r16, r4
    828e:	3f ef       	ldi	r19, 0xFF	; 255
    8290:	43 1a       	sub	r4, r19
    8292:	53 0a       	sbc	r5, r19
    8294:	20 e0       	ldi	r18, 0x00	; 0
    8296:	30 e0       	ldi	r19, 0x00	; 0
    8298:	40 e2       	ldi	r20, 0x20	; 32
    829a:	51 e4       	ldi	r21, 0x41	; 65
    829c:	0e 94 33 e7 	call	0x1ce66	; 0x1ce66 <__gesf2>
    82a0:	87 fd       	sbrc	r24, 7
    82a2:	09 c0       	rjmp	.+18     	; 0x82b6 <p_etoa+0x162>
    82a4:	20 e0       	ldi	r18, 0x00	; 0
    82a6:	30 e0       	ldi	r19, 0x00	; 0
    82a8:	40 e2       	ldi	r20, 0x20	; 32
    82aa:	51 e4       	ldi	r21, 0x41	; 65
    82ac:	c5 01       	movw	r24, r10
    82ae:	b4 01       	movw	r22, r8
    82b0:	0e 94 e8 e5 	call	0x1cbd0	; 0x1cbd0 <__divsf3>
    82b4:	e9 cf       	rjmp	.-46     	; 0x8288 <p_etoa+0x134>
    82b6:	08 87       	std	Y+8, r16	; 0x08
    82b8:	19 87       	std	Y+9, r17	; 0x09
    82ba:	85 e6       	ldi	r24, 0x65	; 101
    82bc:	89 83       	std	Y+1, r24	; 0x01
    82be:	88 85       	ldd	r24, Y+8	; 0x08
    82c0:	99 85       	ldd	r25, Y+9	; 0x09
    82c2:	97 ff       	sbrs	r25, 7
    82c4:	08 c0       	rjmp	.+16     	; 0x82d6 <p_etoa+0x182>
    82c6:	91 95       	neg	r25
    82c8:	81 95       	neg	r24
    82ca:	91 09       	sbc	r25, r1
    82cc:	99 87       	std	Y+9, r25	; 0x09
    82ce:	88 87       	std	Y+8, r24	; 0x08
    82d0:	8d e2       	ldi	r24, 0x2D	; 45
    82d2:	90 e0       	ldi	r25, 0x00	; 0
    82d4:	02 c0       	rjmp	.+4      	; 0x82da <p_etoa+0x186>
    82d6:	8b e2       	ldi	r24, 0x2B	; 43
    82d8:	90 e0       	ldi	r25, 0x00	; 0
    82da:	6c 01       	movw	r12, r24
    82dc:	82 e0       	ldi	r24, 0x02	; 2
    82de:	e8 2e       	mov	r14, r24
    82e0:	f1 2c       	mov	r15, r1
    82e2:	8e 01       	movw	r16, r28
    82e4:	08 5f       	subi	r16, 0xF8	; 248
    82e6:	1f 4f       	sbci	r17, 0xFF	; 255
    82e8:	2a e0       	ldi	r18, 0x0A	; 10
    82ea:	30 e0       	ldi	r19, 0x00	; 0
    82ec:	42 e0       	ldi	r20, 0x02	; 2
    82ee:	50 e0       	ldi	r21, 0x00	; 0
    82f0:	65 e0       	ldi	r22, 0x05	; 5
    82f2:	70 e0       	ldi	r23, 0x00	; 0
    82f4:	ce 01       	movw	r24, r28
    82f6:	02 96       	adiw	r24, 0x02	; 2
    82f8:	17 dd       	rcall	.-1490   	; 0x7d28 <bin2num>
    82fa:	9c 01       	movw	r18, r24
    82fc:	93 2d       	mov	r25, r3
    82fe:	98 72       	andi	r25, 0x28	; 40
    8300:	90 32       	cpi	r25, 0x20	; 32
    8302:	61 f0       	breq	.+24     	; 0x831c <p_etoa+0x1c8>
    8304:	c5 01       	movw	r24, r10
    8306:	b4 01       	movw	r22, r8
    8308:	0e 94 50 e6 	call	0x1cca0	; 0x1cca0 <__fixsfsi>
    830c:	6b 01       	movw	r12, r22
    830e:	7c 01       	movw	r14, r24
    8310:	80 e3       	ldi	r24, 0x30	; 48
    8312:	8c 0d       	add	r24, r12
    8314:	9f dd       	rcall	.-1218   	; 0x7e54 <pch>
    8316:	21 10       	cpse	r2, r1
    8318:	20 c0       	rjmp	.+64     	; 0x835a <p_etoa+0x206>
    831a:	5e c0       	rjmp	.+188    	; 0x83d8 <p_etoa+0x284>
    831c:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <_pch+0x2>
    8320:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <_pch+0x3>
    8324:	0c 85       	ldd	r16, Y+12	; 0x0c
    8326:	1d 85       	ldd	r17, Y+13	; 0x0d
    8328:	08 1b       	sub	r16, r24
    832a:	19 0b       	sbc	r17, r25
    832c:	22 20       	and	r2, r2
    832e:	41 f0       	breq	.+16     	; 0x8340 <p_etoa+0x1ec>
    8330:	61 14       	cp	r6, r1
    8332:	71 04       	cpc	r7, r1
    8334:	29 f0       	breq	.+10     	; 0x8340 <p_etoa+0x1ec>
    8336:	06 19       	sub	r16, r6
    8338:	17 09       	sbc	r17, r7
    833a:	06 50       	subi	r16, 0x06	; 6
    833c:	11 09       	sbc	r17, r1
    833e:	02 c0       	rjmp	.+4      	; 0x8344 <p_etoa+0x1f0>
    8340:	05 50       	subi	r16, 0x05	; 5
    8342:	11 09       	sbc	r17, r1
    8344:	24 30       	cpi	r18, 0x04	; 4
    8346:	31 05       	cpc	r19, r1
    8348:	14 f0       	brlt	.+4      	; 0x834e <p_etoa+0x1fa>
    834a:	01 50       	subi	r16, 0x01	; 1
    834c:	11 09       	sbc	r17, r1
    834e:	10 16       	cp	r1, r16
    8350:	11 06       	cpc	r1, r17
    8352:	c4 f6       	brge	.-80     	; 0x8304 <p_etoa+0x1b0>
    8354:	80 e3       	ldi	r24, 0x30	; 48
    8356:	7e dd       	rcall	.-1284   	; 0x7e54 <pch>
    8358:	f8 cf       	rjmp	.-16     	; 0x834a <p_etoa+0x1f6>
    835a:	61 14       	cp	r6, r1
    835c:	71 04       	cpc	r7, r1
    835e:	09 f4       	brne	.+2      	; 0x8362 <p_etoa+0x20e>
    8360:	3b c0       	rjmp	.+118    	; 0x83d8 <p_etoa+0x284>
    8362:	b6 01       	movw	r22, r12
    8364:	dd 0c       	add	r13, r13
    8366:	88 0b       	sbc	r24, r24
    8368:	99 0b       	sbc	r25, r25
    836a:	0e 94 83 e6 	call	0x1cd06	; 0x1cd06 <__floatsisf>
    836e:	9b 01       	movw	r18, r22
    8370:	ac 01       	movw	r20, r24
    8372:	c5 01       	movw	r24, r10
    8374:	b4 01       	movw	r22, r8
    8376:	0e 94 7f e5 	call	0x1cafe	; 0x1cafe <__subsf3>
    837a:	20 e0       	ldi	r18, 0x00	; 0
    837c:	30 e0       	ldi	r19, 0x00	; 0
    837e:	40 e2       	ldi	r20, 0x20	; 32
    8380:	51 e4       	ldi	r21, 0x41	; 65
    8382:	0e 94 37 e7 	call	0x1ce6e	; 0x1ce6e <__mulsf3>
    8386:	6b 01       	movw	r12, r22
    8388:	7c 01       	movw	r14, r24
    838a:	8e e2       	ldi	r24, 0x2E	; 46
    838c:	63 dd       	rcall	.-1338   	; 0x7e54 <pch>
    838e:	c7 01       	movw	r24, r14
    8390:	b6 01       	movw	r22, r12
    8392:	0e 94 50 e6 	call	0x1cca0	; 0x1cca0 <__fixsfsi>
    8396:	4b 01       	movw	r8, r22
    8398:	5c 01       	movw	r10, r24
    839a:	07 2e       	mov	r0, r23
    839c:	00 0c       	add	r0, r0
    839e:	88 0b       	sbc	r24, r24
    83a0:	99 0b       	sbc	r25, r25
    83a2:	0e 94 83 e6 	call	0x1cd06	; 0x1cd06 <__floatsisf>
    83a6:	9b 01       	movw	r18, r22
    83a8:	ac 01       	movw	r20, r24
    83aa:	c7 01       	movw	r24, r14
    83ac:	b6 01       	movw	r22, r12
    83ae:	0e 94 7f e5 	call	0x1cafe	; 0x1cafe <__subsf3>
    83b2:	6b 01       	movw	r12, r22
    83b4:	7c 01       	movw	r14, r24
    83b6:	80 e3       	ldi	r24, 0x30	; 48
    83b8:	88 0d       	add	r24, r8
    83ba:	4c dd       	rcall	.-1384   	; 0x7e54 <pch>
    83bc:	20 e0       	ldi	r18, 0x00	; 0
    83be:	30 e0       	ldi	r19, 0x00	; 0
    83c0:	40 e2       	ldi	r20, 0x20	; 32
    83c2:	51 e4       	ldi	r21, 0x41	; 65
    83c4:	c7 01       	movw	r24, r14
    83c6:	b6 01       	movw	r22, r12
    83c8:	0e 94 37 e7 	call	0x1ce6e	; 0x1ce6e <__mulsf3>
    83cc:	6b 01       	movw	r12, r22
    83ce:	7c 01       	movw	r14, r24
    83d0:	81 e0       	ldi	r24, 0x01	; 1
    83d2:	68 1a       	sub	r6, r24
    83d4:	71 08       	sbc	r7, r1
    83d6:	d9 f6       	brne	.-74     	; 0x838e <p_etoa+0x23a>
    83d8:	8e 01       	movw	r16, r28
    83da:	0f 5f       	subi	r16, 0xFF	; 255
    83dc:	1f 4f       	sbci	r17, 0xFF	; 255
    83de:	f8 01       	movw	r30, r16
    83e0:	81 91       	ld	r24, Z+
    83e2:	8f 01       	movw	r16, r30
    83e4:	88 23       	and	r24, r24
    83e6:	11 f0       	breq	.+4      	; 0x83ec <p_etoa+0x298>
    83e8:	35 dd       	rcall	.-1430   	; 0x7e54 <pch>
    83ea:	f9 cf       	rjmp	.-14     	; 0x83de <p_etoa+0x28a>
    83ec:	33 dd       	rcall	.-1434   	; 0x7e54 <pch>
    83ee:	ea 85       	ldd	r30, Y+10	; 0x0a
    83f0:	fb 85       	ldd	r31, Y+11	; 0x0b
    83f2:	01 90       	ld	r0, Z+
    83f4:	00 20       	and	r0, r0
    83f6:	e9 f7       	brne	.-6      	; 0x83f2 <p_etoa+0x29e>
    83f8:	cf 01       	movw	r24, r30
    83fa:	01 97       	sbiw	r24, 0x01	; 1
    83fc:	2a 85       	ldd	r18, Y+10	; 0x0a
    83fe:	3b 85       	ldd	r19, Y+11	; 0x0b
    8400:	82 1b       	sub	r24, r18
    8402:	93 0b       	sbc	r25, r19
    8404:	2d 96       	adiw	r28, 0x0d	; 13
    8406:	e2 e1       	ldi	r30, 0x12	; 18
    8408:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0000840c <_puts_pad>:
    840c:	a0 e0       	ldi	r26, 0x00	; 0
    840e:	b0 e0       	ldi	r27, 0x00	; 0
    8410:	ec e0       	ldi	r30, 0x0C	; 12
    8412:	f2 e4       	ldi	r31, 0x42	; 66
    8414:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__prologue_saves__+0xc>
    8418:	6c 01       	movw	r12, r24
    841a:	4b 01       	movw	r8, r22
    841c:	79 01       	movw	r14, r18
    841e:	24 17       	cp	r18, r20
    8420:	35 07       	cpc	r19, r21
    8422:	24 f4       	brge	.+8      	; 0x842c <_puts_pad+0x20>
    8424:	ea 01       	movw	r28, r20
    8426:	c2 1b       	sub	r28, r18
    8428:	d3 0b       	sbc	r29, r19
    842a:	02 c0       	rjmp	.+4      	; 0x8430 <_puts_pad+0x24>
    842c:	c0 e0       	ldi	r28, 0x00	; 0
    842e:	d0 e0       	ldi	r29, 0x00	; 0
    8430:	01 15       	cp	r16, r1
    8432:	11 05       	cpc	r17, r1
    8434:	49 f4       	brne	.+18     	; 0x8448 <_puts_pad+0x3c>
    8436:	21 97       	sbiw	r28, 0x01	; 1
    8438:	38 f0       	brcs	.+14     	; 0x8448 <_puts_pad+0x3c>
    843a:	d6 01       	movw	r26, r12
    843c:	ed 91       	ld	r30, X+
    843e:	fc 91       	ld	r31, X
    8440:	60 e2       	ldi	r22, 0x20	; 32
    8442:	c6 01       	movw	r24, r12
    8444:	09 95       	icall
    8446:	f7 cf       	rjmp	.-18     	; 0x8436 <_puts_pad+0x2a>
    8448:	54 01       	movw	r10, r8
    844a:	f5 01       	movw	r30, r10
    844c:	61 91       	ld	r22, Z+
    844e:	5f 01       	movw	r10, r30
    8450:	66 23       	and	r22, r22
    8452:	61 f0       	breq	.+24     	; 0x846c <_puts_pad+0x60>
    8454:	e1 14       	cp	r14, r1
    8456:	f1 04       	cpc	r15, r1
    8458:	49 f0       	breq	.+18     	; 0x846c <_puts_pad+0x60>
    845a:	d6 01       	movw	r26, r12
    845c:	ed 91       	ld	r30, X+
    845e:	fc 91       	ld	r31, X
    8460:	c6 01       	movw	r24, r12
    8462:	09 95       	icall
    8464:	b1 e0       	ldi	r27, 0x01	; 1
    8466:	eb 1a       	sub	r14, r27
    8468:	f1 08       	sbc	r15, r1
    846a:	ef cf       	rjmp	.-34     	; 0x844a <_puts_pad+0x3e>
    846c:	01 15       	cp	r16, r1
    846e:	11 05       	cpc	r17, r1
    8470:	51 f0       	breq	.+20     	; 0x8486 <_puts_pad+0x7a>
    8472:	20 97       	sbiw	r28, 0x00	; 0
    8474:	41 f0       	breq	.+16     	; 0x8486 <_puts_pad+0x7a>
    8476:	d6 01       	movw	r26, r12
    8478:	ed 91       	ld	r30, X+
    847a:	fc 91       	ld	r31, X
    847c:	60 e2       	ldi	r22, 0x20	; 32
    847e:	c6 01       	movw	r24, r12
    8480:	09 95       	icall
    8482:	21 97       	sbiw	r28, 0x01	; 1
    8484:	f6 cf       	rjmp	.-20     	; 0x8472 <_puts_pad+0x66>
    8486:	cd b7       	in	r28, 0x3d	; 61
    8488:	de b7       	in	r29, 0x3e	; 62
    848a:	ec e0       	ldi	r30, 0x0C	; 12
    848c:	0c 94 57 e5 	jmp	0x1caae	; 0x1caae <__epilogue_restores__+0xc>

00008490 <_printf_fn>:
    8490:	ab e6       	ldi	r26, 0x6B	; 107
    8492:	b0 e0       	ldi	r27, 0x00	; 0
    8494:	ee e4       	ldi	r30, 0x4E	; 78
    8496:	f2 e4       	ldi	r31, 0x42	; 66
    8498:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    849c:	a5 96       	adiw	r28, 0x25	; 37
    849e:	9f af       	std	Y+63, r25	; 0x3f
    84a0:	8e af       	std	Y+62, r24	; 0x3e
    84a2:	a5 97       	sbiw	r28, 0x25	; 37
    84a4:	6a 01       	movw	r12, r20
    84a6:	e6 2e       	mov	r14, r22
    84a8:	19 01       	movw	r2, r18
    84aa:	a9 96       	adiw	r28, 0x29	; 41
    84ac:	1c ae       	std	Y+60, r1	; 0x3c
    84ae:	1d ae       	std	Y+61, r1	; 0x3d
    84b0:	1e ae       	std	Y+62, r1	; 0x3e
    84b2:	1f ae       	std	Y+63, r1	; 0x3f
    84b4:	a9 97       	sbiw	r28, 0x29	; 41
    84b6:	9e 01       	movw	r18, r28
    84b8:	2f 5a       	subi	r18, 0xAF	; 175
    84ba:	3f 4f       	sbci	r19, 0xFF	; 255
    84bc:	67 96       	adiw	r28, 0x17	; 23
    84be:	3f af       	std	Y+63, r19	; 0x3f
    84c0:	2e af       	std	Y+62, r18	; 0x3e
    84c2:	67 97       	sbiw	r28, 0x17	; 23
    84c4:	ae 01       	movw	r20, r28
    84c6:	4d 5b       	subi	r20, 0xBD	; 189
    84c8:	5f 4f       	sbci	r21, 0xFF	; 255
    84ca:	69 96       	adiw	r28, 0x19	; 25
    84cc:	5f af       	std	Y+63, r21	; 0x3f
    84ce:	4e af       	std	Y+62, r20	; 0x3e
    84d0:	69 97       	sbiw	r28, 0x19	; 25
    84d2:	ce 01       	movw	r24, r28
    84d4:	85 5b       	subi	r24, 0xB5	; 181
    84d6:	9f 4f       	sbci	r25, 0xFF	; 255
    84d8:	6b 96       	adiw	r28, 0x1b	; 27
    84da:	9f af       	std	Y+63, r25	; 0x3f
    84dc:	8e af       	std	Y+62, r24	; 0x3e
    84de:	6b 97       	sbiw	r28, 0x1b	; 27
    84e0:	de 01       	movw	r26, r28
    84e2:	ad 5a       	subi	r26, 0xAD	; 173
    84e4:	bf 4f       	sbci	r27, 0xFF	; 255
    84e6:	6d 96       	adiw	r28, 0x1d	; 29
    84e8:	bf af       	std	Y+63, r27	; 0x3f
    84ea:	ae af       	std	Y+62, r26	; 0x3e
    84ec:	6d 97       	sbiw	r28, 0x1d	; 29
    84ee:	f6 01       	movw	r30, r12
    84f0:	5e 2d       	mov	r21, r14
    84f2:	0e 94 6c e5 	call	0x1cad8	; 0x1cad8 <__xload_1>
    84f6:	66 23       	and	r22, r22
    84f8:	09 f4       	brne	.+2      	; 0x84fc <_printf_fn+0x6c>
    84fa:	df c3       	rjmp	.+1982   	; 0x8cba <_printf_fn+0x82a>
    84fc:	ae 2d       	mov	r26, r14
    84fe:	c6 01       	movw	r24, r12
    8500:	01 96       	adiw	r24, 0x01	; 1
    8502:	a1 1d       	adc	r26, r1
    8504:	3c 01       	movw	r6, r24
    8506:	8a 2e       	mov	r8, r26
    8508:	65 32       	cpi	r22, 0x25	; 37
    850a:	51 f0       	breq	.+20     	; 0x8520 <_printf_fn+0x90>
    850c:	a5 96       	adiw	r28, 0x25	; 37
    850e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8510:	bf ad       	ldd	r27, Y+63	; 0x3f
    8512:	a5 97       	sbiw	r28, 0x25	; 37
    8514:	ed 91       	ld	r30, X+
    8516:	fc 91       	ld	r31, X
    8518:	11 97       	sbiw	r26, 0x01	; 1
    851a:	cd 01       	movw	r24, r26
    851c:	09 95       	icall
    851e:	99 c3       	rjmp	.+1842   	; 0x8c52 <_printf_fn+0x7c2>
    8520:	91 2c       	mov	r9, r1
    8522:	f3 01       	movw	r30, r6
    8524:	58 2d       	mov	r21, r8
    8526:	0e 94 6c e5 	call	0x1cad8	; 0x1cad8 <__xload_1>
    852a:	63 32       	cpi	r22, 0x23	; 35
    852c:	19 f4       	brne	.+6      	; 0x8534 <_printf_fn+0xa4>
    852e:	68 94       	set
    8530:	97 f8       	bld	r9, 7
    8532:	04 c0       	rjmp	.+8      	; 0x853c <_printf_fn+0xac>
    8534:	6b 32       	cpi	r22, 0x2B	; 43
    8536:	39 f4       	brne	.+14     	; 0x8546 <_printf_fn+0xb6>
    8538:	68 94       	set
    853a:	92 f8       	bld	r9, 2
    853c:	bf ef       	ldi	r27, 0xFF	; 255
    853e:	6b 1a       	sub	r6, r27
    8540:	7b 0a       	sbc	r7, r27
    8542:	8b 0a       	sbc	r8, r27
    8544:	ee cf       	rjmp	.-36     	; 0x8522 <_printf_fn+0x92>
    8546:	6d 32       	cpi	r22, 0x2D	; 45
    8548:	a9 f4       	brne	.+42     	; 0x8574 <_printf_fn+0xe4>
    854a:	93 fc       	sbrc	r9, 3
    854c:	05 c0       	rjmp	.+10     	; 0x8558 <_printf_fn+0xc8>
    854e:	6d 32       	cpi	r22, 0x2D	; 45
    8550:	19 f4       	brne	.+6      	; 0x8558 <_printf_fn+0xc8>
    8552:	68 94       	set
    8554:	93 f8       	bld	r9, 3
    8556:	f2 cf       	rjmp	.-28     	; 0x853c <_printf_fn+0xac>
    8558:	94 fc       	sbrc	r9, 4
    855a:	05 c0       	rjmp	.+10     	; 0x8566 <_printf_fn+0xd6>
    855c:	60 32       	cpi	r22, 0x20	; 32
    855e:	19 f4       	brne	.+6      	; 0x8566 <_printf_fn+0xd6>
    8560:	68 94       	set
    8562:	94 f8       	bld	r9, 4
    8564:	eb cf       	rjmp	.-42     	; 0x853c <_printf_fn+0xac>
    8566:	95 fc       	sbrc	r9, 5
    8568:	e9 cf       	rjmp	.-46     	; 0x853c <_printf_fn+0xac>
    856a:	60 33       	cpi	r22, 0x30	; 48
    856c:	39 f7       	brne	.-50     	; 0x853c <_printf_fn+0xac>
    856e:	68 94       	set
    8570:	95 f8       	bld	r9, 5
    8572:	e4 cf       	rjmp	.-56     	; 0x853c <_printf_fn+0xac>
    8574:	86 2f       	mov	r24, r22
    8576:	8f 7e       	andi	r24, 0xEF	; 239
    8578:	80 32       	cpi	r24, 0x20	; 32
    857a:	39 f3       	breq	.-50     	; 0x854a <_printf_fn+0xba>
    857c:	70 e0       	ldi	r23, 0x00	; 0
    857e:	60 53       	subi	r22, 0x30	; 48
    8580:	71 09       	sbc	r23, r1
    8582:	41 2c       	mov	r4, r1
    8584:	51 2c       	mov	r5, r1
    8586:	6a 30       	cpi	r22, 0x0A	; 10
    8588:	71 05       	cpc	r23, r1
    858a:	e0 f4       	brcc	.+56     	; 0x85c4 <_printf_fn+0x134>
    858c:	2a e0       	ldi	r18, 0x0A	; 10
    858e:	f3 01       	movw	r30, r6
    8590:	58 2d       	mov	r21, r8
    8592:	0e 94 6c e5 	call	0x1cad8	; 0x1cad8 <__xload_1>
    8596:	70 e0       	ldi	r23, 0x00	; 0
    8598:	cb 01       	movw	r24, r22
    859a:	c0 97       	sbiw	r24, 0x30	; 48
    859c:	0a 97       	sbiw	r24, 0x0a	; 10
    859e:	80 f4       	brcc	.+32     	; 0x85c0 <_printf_fn+0x130>
    85a0:	ef ef       	ldi	r30, 0xFF	; 255
    85a2:	6e 1a       	sub	r6, r30
    85a4:	7e 0a       	sbc	r7, r30
    85a6:	8e 0a       	sbc	r8, r30
    85a8:	24 9d       	mul	r18, r4
    85aa:	c0 01       	movw	r24, r0
    85ac:	25 9d       	mul	r18, r5
    85ae:	90 0d       	add	r25, r0
    85b0:	11 24       	eor	r1, r1
    85b2:	68 0f       	add	r22, r24
    85b4:	79 1f       	adc	r23, r25
    85b6:	2b 01       	movw	r4, r22
    85b8:	f0 e3       	ldi	r31, 0x30	; 48
    85ba:	4f 1a       	sub	r4, r31
    85bc:	51 08       	sbc	r5, r1
    85be:	e7 cf       	rjmp	.-50     	; 0x858e <_printf_fn+0xfe>
    85c0:	68 94       	set
    85c2:	90 f8       	bld	r9, 0
    85c4:	f3 01       	movw	r30, r6
    85c6:	58 2d       	mov	r21, r8
    85c8:	0e 94 6c e5 	call	0x1cad8	; 0x1cad8 <__xload_1>
    85cc:	6e 32       	cpi	r22, 0x2E	; 46
    85ce:	59 f5       	brne	.+86     	; 0x8626 <_printf_fn+0x196>
    85d0:	2f ef       	ldi	r18, 0xFF	; 255
    85d2:	62 1a       	sub	r6, r18
    85d4:	72 0a       	sbc	r7, r18
    85d6:	82 0a       	sbc	r8, r18
    85d8:	a1 96       	adiw	r28, 0x21	; 33
    85da:	1f ae       	std	Y+63, r1	; 0x3f
    85dc:	1e ae       	std	Y+62, r1	; 0x3e
    85de:	a1 97       	sbiw	r28, 0x21	; 33
    85e0:	2a e0       	ldi	r18, 0x0A	; 10
    85e2:	f3 01       	movw	r30, r6
    85e4:	58 2d       	mov	r21, r8
    85e6:	0e 94 6c e5 	call	0x1cad8	; 0x1cad8 <__xload_1>
    85ea:	70 e0       	ldi	r23, 0x00	; 0
    85ec:	cb 01       	movw	r24, r22
    85ee:	c0 97       	sbiw	r24, 0x30	; 48
    85f0:	0a 97       	sbiw	r24, 0x0a	; 10
    85f2:	b0 f4       	brcc	.+44     	; 0x8620 <_printf_fn+0x190>
    85f4:	3f ef       	ldi	r19, 0xFF	; 255
    85f6:	63 1a       	sub	r6, r19
    85f8:	73 0a       	sbc	r7, r19
    85fa:	83 0a       	sbc	r8, r19
    85fc:	a1 96       	adiw	r28, 0x21	; 33
    85fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    8600:	5f ad       	ldd	r21, Y+63	; 0x3f
    8602:	a1 97       	sbiw	r28, 0x21	; 33
    8604:	24 9f       	mul	r18, r20
    8606:	c0 01       	movw	r24, r0
    8608:	25 9f       	mul	r18, r21
    860a:	90 0d       	add	r25, r0
    860c:	11 24       	eor	r1, r1
    860e:	68 0f       	add	r22, r24
    8610:	79 1f       	adc	r23, r25
    8612:	cb 01       	movw	r24, r22
    8614:	c0 97       	sbiw	r24, 0x30	; 48
    8616:	a1 96       	adiw	r28, 0x21	; 33
    8618:	9f af       	std	Y+63, r25	; 0x3f
    861a:	8e af       	std	Y+62, r24	; 0x3e
    861c:	a1 97       	sbiw	r28, 0x21	; 33
    861e:	e1 cf       	rjmp	.-62     	; 0x85e2 <_printf_fn+0x152>
    8620:	68 94       	set
    8622:	91 f8       	bld	r9, 1
    8624:	04 c0       	rjmp	.+8      	; 0x862e <_printf_fn+0x19e>
    8626:	a1 96       	adiw	r28, 0x21	; 33
    8628:	1f ae       	std	Y+63, r1	; 0x3f
    862a:	1e ae       	std	Y+62, r1	; 0x3e
    862c:	a1 97       	sbiw	r28, 0x21	; 33
    862e:	f3 01       	movw	r30, r6
    8630:	58 2d       	mov	r21, r8
    8632:	0e 94 6c e5 	call	0x1cad8	; 0x1cad8 <__xload_1>
    8636:	69 34       	cpi	r22, 0x49	; 73
    8638:	09 f0       	breq	.+2      	; 0x863c <_printf_fn+0x1ac>
    863a:	45 c0       	rjmp	.+138    	; 0x86c6 <_printf_fn+0x236>
    863c:	9f ef       	ldi	r25, 0xFF	; 255
    863e:	69 1a       	sub	r6, r25
    8640:	79 0a       	sbc	r7, r25
    8642:	89 0a       	sbc	r8, r25
    8644:	6f 96       	adiw	r28, 0x1f	; 31
    8646:	1f ae       	std	Y+63, r1	; 0x3f
    8648:	1e ae       	std	Y+62, r1	; 0x3e
    864a:	6f 97       	sbiw	r28, 0x1f	; 31
    864c:	2a e0       	ldi	r18, 0x0A	; 10
    864e:	f3 01       	movw	r30, r6
    8650:	58 2d       	mov	r21, r8
    8652:	0e 94 6c e5 	call	0x1cad8	; 0x1cad8 <__xload_1>
    8656:	70 e0       	ldi	r23, 0x00	; 0
    8658:	cb 01       	movw	r24, r22
    865a:	c0 97       	sbiw	r24, 0x30	; 48
    865c:	0a 97       	sbiw	r24, 0x0a	; 10
    865e:	b8 f4       	brcc	.+46     	; 0x868e <_printf_fn+0x1fe>
    8660:	af ef       	ldi	r26, 0xFF	; 255
    8662:	6a 1a       	sub	r6, r26
    8664:	7a 0a       	sbc	r7, r26
    8666:	8a 0a       	sbc	r8, r26
    8668:	6f 96       	adiw	r28, 0x1f	; 31
    866a:	ee ad       	ldd	r30, Y+62	; 0x3e
    866c:	ff ad       	ldd	r31, Y+63	; 0x3f
    866e:	6f 97       	sbiw	r28, 0x1f	; 31
    8670:	2e 9f       	mul	r18, r30
    8672:	c0 01       	movw	r24, r0
    8674:	2f 9f       	mul	r18, r31
    8676:	90 0d       	add	r25, r0
    8678:	11 24       	eor	r1, r1
    867a:	68 0f       	add	r22, r24
    867c:	79 1f       	adc	r23, r25
    867e:	ab 01       	movw	r20, r22
    8680:	40 53       	subi	r20, 0x30	; 48
    8682:	51 09       	sbc	r21, r1
    8684:	6f 96       	adiw	r28, 0x1f	; 31
    8686:	5f af       	std	Y+63, r21	; 0x3f
    8688:	4e af       	std	Y+62, r20	; 0x3e
    868a:	6f 97       	sbiw	r28, 0x1f	; 31
    868c:	e0 cf       	rjmp	.-64     	; 0x864e <_printf_fn+0x1be>
    868e:	6f 96       	adiw	r28, 0x1f	; 31
    8690:	8e ad       	ldd	r24, Y+62	; 0x3e
    8692:	9f ad       	ldd	r25, Y+63	; 0x3f
    8694:	6f 97       	sbiw	r28, 0x1f	; 31
    8696:	00 97       	sbiw	r24, 0x00	; 0
    8698:	09 f4       	brne	.+2      	; 0x869c <_printf_fn+0x20c>
    869a:	4f c0       	rjmp	.+158    	; 0x873a <_printf_fn+0x2aa>
    869c:	87 70       	andi	r24, 0x07	; 7
    869e:	99 27       	eor	r25, r25
    86a0:	89 2b       	or	r24, r25
    86a2:	09 f0       	breq	.+2      	; 0x86a6 <_printf_fn+0x216>
    86a4:	46 c0       	rjmp	.+140    	; 0x8732 <_printf_fn+0x2a2>
    86a6:	6f 96       	adiw	r28, 0x1f	; 31
    86a8:	ae ad       	ldd	r26, Y+62	; 0x3e
    86aa:	bf ad       	ldd	r27, Y+63	; 0x3f
    86ac:	6f 97       	sbiw	r28, 0x1f	; 31
    86ae:	83 e0       	ldi	r24, 0x03	; 3
    86b0:	b5 95       	asr	r27
    86b2:	a7 95       	ror	r26
    86b4:	8a 95       	dec	r24
    86b6:	e1 f7       	brne	.-8      	; 0x86b0 <_printf_fn+0x220>
    86b8:	6f 96       	adiw	r28, 0x1f	; 31
    86ba:	bf af       	std	Y+63, r27	; 0x3f
    86bc:	ae af       	std	Y+62, r26	; 0x3e
    86be:	6f 97       	sbiw	r28, 0x1f	; 31
    86c0:	ab 2b       	or	r26, r27
    86c2:	d9 f1       	breq	.+118    	; 0x873a <_printf_fn+0x2aa>
    86c4:	27 c0       	rjmp	.+78     	; 0x8714 <_printf_fn+0x284>
    86c6:	68 36       	cpi	r22, 0x68	; 104
    86c8:	29 f4       	brne	.+10     	; 0x86d4 <_printf_fn+0x244>
    86ca:	bf ef       	ldi	r27, 0xFF	; 255
    86cc:	6b 1a       	sub	r6, r27
    86ce:	7b 0a       	sbc	r7, r27
    86d0:	8b 0a       	sbc	r8, r27
    86d2:	c2 c2       	rjmp	.+1412   	; 0x8c58 <_printf_fn+0x7c8>
    86d4:	6c 36       	cpi	r22, 0x6C	; 108
    86d6:	09 f0       	breq	.+2      	; 0x86da <_printf_fn+0x24a>
    86d8:	bf c2       	rjmp	.+1406   	; 0x8c58 <_printf_fn+0x7c8>
    86da:	a8 2d       	mov	r26, r8
    86dc:	c3 01       	movw	r24, r6
    86de:	01 96       	adiw	r24, 0x01	; 1
    86e0:	a1 1d       	adc	r26, r1
    86e2:	fc 01       	movw	r30, r24
    86e4:	5a 2f       	mov	r21, r26
    86e6:	0e 94 6c e5 	call	0x1cad8	; 0x1cad8 <__xload_1>
    86ea:	6c 36       	cpi	r22, 0x6C	; 108
    86ec:	49 f0       	breq	.+18     	; 0x8700 <_printf_fn+0x270>
    86ee:	3c 01       	movw	r6, r24
    86f0:	8a 2e       	mov	r8, r26
    86f2:	24 e0       	ldi	r18, 0x04	; 4
    86f4:	30 e0       	ldi	r19, 0x00	; 0
    86f6:	6f 96       	adiw	r28, 0x1f	; 31
    86f8:	3f af       	std	Y+63, r19	; 0x3f
    86fa:	2e af       	std	Y+62, r18	; 0x3e
    86fc:	6f 97       	sbiw	r28, 0x1f	; 31
    86fe:	0a c0       	rjmp	.+20     	; 0x8714 <_printf_fn+0x284>
    8700:	32 e0       	ldi	r19, 0x02	; 2
    8702:	63 0e       	add	r6, r19
    8704:	71 1c       	adc	r7, r1
    8706:	81 1c       	adc	r8, r1
    8708:	48 e0       	ldi	r20, 0x08	; 8
    870a:	50 e0       	ldi	r21, 0x00	; 0
    870c:	6f 96       	adiw	r28, 0x1f	; 31
    870e:	5f af       	std	Y+63, r21	; 0x3f
    8710:	4e af       	std	Y+62, r20	; 0x3e
    8712:	6f 97       	sbiw	r28, 0x1f	; 31
    8714:	f3 01       	movw	r30, r6
    8716:	58 2d       	mov	r21, r8
    8718:	0e 94 6c e5 	call	0x1cad8	; 0x1cad8 <__xload_1>
    871c:	86 2f       	mov	r24, r22
    871e:	90 e0       	ldi	r25, 0x00	; 0
    8720:	a3 96       	adiw	r28, 0x23	; 35
    8722:	9f af       	std	Y+63, r25	; 0x3f
    8724:	8e af       	std	Y+62, r24	; 0x3e
    8726:	a3 97       	sbiw	r28, 0x23	; 35
    8728:	84 36       	cpi	r24, 0x64	; 100
    872a:	91 05       	cpc	r25, r1
    872c:	09 f4       	brne	.+2      	; 0x8730 <_printf_fn+0x2a0>
    872e:	9b c2       	rjmp	.+1334   	; 0x8c66 <_printf_fn+0x7d6>
    8730:	08 c0       	rjmp	.+16     	; 0x8742 <_printf_fn+0x2b2>
    8732:	6f 96       	adiw	r28, 0x1f	; 31
    8734:	1f ae       	std	Y+63, r1	; 0x3f
    8736:	1e ae       	std	Y+62, r1	; 0x3e
    8738:	6f 97       	sbiw	r28, 0x1f	; 31
    873a:	a3 96       	adiw	r28, 0x23	; 35
    873c:	1f ae       	std	Y+63, r1	; 0x3f
    873e:	1e ae       	std	Y+62, r1	; 0x3e
    8740:	a3 97       	sbiw	r28, 0x23	; 35
    8742:	31 e0       	ldi	r19, 0x01	; 1
    8744:	20 e0       	ldi	r18, 0x00	; 0
    8746:	a3 96       	adiw	r28, 0x23	; 35
    8748:	ae ad       	ldd	r26, Y+62	; 0x3e
    874a:	bf ad       	ldd	r27, Y+63	; 0x3f
    874c:	a3 97       	sbiw	r28, 0x23	; 35
    874e:	a4 34       	cpi	r26, 0x44	; 68
    8750:	b1 05       	cpc	r27, r1
    8752:	09 f0       	breq	.+2      	; 0x8756 <_printf_fn+0x2c6>
    8754:	30 e0       	ldi	r19, 0x00	; 0
    8756:	83 2f       	mov	r24, r19
    8758:	92 2f       	mov	r25, r18
    875a:	a3 96       	adiw	r28, 0x23	; 35
    875c:	ee ad       	ldd	r30, Y+62	; 0x3e
    875e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8760:	a3 97       	sbiw	r28, 0x23	; 35
    8762:	e2 54       	subi	r30, 0x42	; 66
    8764:	f1 09       	sbc	r31, r1
    8766:	e7 33       	cpi	r30, 0x37	; 55
    8768:	f1 05       	cpc	r31, r1
    876a:	08 f0       	brcs	.+2      	; 0x876e <_printf_fn+0x2de>
    876c:	65 c1       	rjmp	.+714    	; 0x8a38 <_printf_fn+0x5a8>
    876e:	ea 5b       	subi	r30, 0xBA	; 186
    8770:	ff 4f       	sbci	r31, 0xFF	; 255
    8772:	0c 94 f1 e4 	jmp	0x1c9e2	; 0x1c9e2 <__tablejump2__>
    8776:	e2 e0       	ldi	r30, 0x02	; 2
    8778:	f0 e0       	ldi	r31, 0x00	; 0
    877a:	6f 96       	adiw	r28, 0x1f	; 31
    877c:	ff af       	std	Y+63, r31	; 0x3f
    877e:	ee af       	std	Y+62, r30	; 0x3e
    8780:	6f 97       	sbiw	r28, 0x1f	; 31
    8782:	29 2d       	mov	r18, r9
    8784:	28 72       	andi	r18, 0x28	; 40
    8786:	28 32       	cpi	r18, 0x28	; 40
    8788:	11 f4       	brne	.+4      	; 0x878e <_printf_fn+0x2fe>
    878a:	e8 94       	clt
    878c:	95 f8       	bld	r9, 5
    878e:	29 2d       	mov	r18, r9
    8790:	22 72       	andi	r18, 0x22	; 34
    8792:	22 32       	cpi	r18, 0x22	; 34
    8794:	11 f4       	brne	.+4      	; 0x879a <_printf_fn+0x30a>
    8796:	e8 94       	clt
    8798:	95 f8       	bld	r9, 5
    879a:	29 2d       	mov	r18, r9
    879c:	21 72       	andi	r18, 0x21	; 33
    879e:	21 32       	cpi	r18, 0x21	; 33
    87a0:	59 f4       	brne	.+22     	; 0x87b8 <_printf_fn+0x328>
    87a2:	a1 96       	adiw	r28, 0x21	; 33
    87a4:	2e ad       	ldd	r18, Y+62	; 0x3e
    87a6:	3f ad       	ldd	r19, Y+63	; 0x3f
    87a8:	a1 97       	sbiw	r28, 0x21	; 33
    87aa:	24 15       	cp	r18, r4
    87ac:	35 05       	cpc	r19, r5
    87ae:	24 f4       	brge	.+8      	; 0x87b8 <_printf_fn+0x328>
    87b0:	a1 96       	adiw	r28, 0x21	; 33
    87b2:	5f ae       	std	Y+63, r5	; 0x3f
    87b4:	4e ae       	std	Y+62, r4	; 0x3e
    87b6:	a1 97       	sbiw	r28, 0x21	; 33
    87b8:	29 2d       	mov	r18, r9
    87ba:	23 72       	andi	r18, 0x23	; 35
    87bc:	23 32       	cpi	r18, 0x23	; 35
    87be:	59 f4       	brne	.+22     	; 0x87d6 <_printf_fn+0x346>
    87c0:	a1 96       	adiw	r28, 0x21	; 33
    87c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    87c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    87c6:	a1 97       	sbiw	r28, 0x21	; 33
    87c8:	44 15       	cp	r20, r4
    87ca:	55 05       	cpc	r21, r5
    87cc:	24 f4       	brge	.+8      	; 0x87d6 <_printf_fn+0x346>
    87ce:	a1 96       	adiw	r28, 0x21	; 33
    87d0:	5f ae       	std	Y+63, r5	; 0x3f
    87d2:	4e ae       	std	Y+62, r4	; 0x3e
    87d4:	a1 97       	sbiw	r28, 0x21	; 33
    87d6:	e8 94       	clt
    87d8:	94 f8       	bld	r9, 4
    87da:	e8 94       	clt
    87dc:	92 f8       	bld	r9, 2
    87de:	e8 94       	clt
    87e0:	96 f8       	bld	r9, 6
    87e2:	6f 96       	adiw	r28, 0x1f	; 31
    87e4:	ae ad       	ldd	r26, Y+62	; 0x3e
    87e6:	bf ad       	ldd	r27, Y+63	; 0x3f
    87e8:	6f 97       	sbiw	r28, 0x1f	; 31
    87ea:	12 97       	sbiw	r26, 0x02	; 2
    87ec:	29 f5       	brne	.+74     	; 0x8838 <_printf_fn+0x3a8>
    87ee:	51 01       	movw	r10, r2
    87f0:	b2 e0       	ldi	r27, 0x02	; 2
    87f2:	ab 0e       	add	r10, r27
    87f4:	b1 1c       	adc	r11, r1
    87f6:	f1 01       	movw	r30, r2
    87f8:	80 81       	ld	r24, Z
    87fa:	91 81       	ldd	r25, Z+1	; 0x01
    87fc:	65 96       	adiw	r28, 0x15	; 21
    87fe:	9f af       	std	Y+63, r25	; 0x3f
    8800:	8e af       	std	Y+62, r24	; 0x3e
    8802:	65 97       	sbiw	r28, 0x15	; 21
    8804:	a3 96       	adiw	r28, 0x23	; 35
    8806:	2e ad       	ldd	r18, Y+62	; 0x3e
    8808:	3f ad       	ldd	r19, Y+63	; 0x3f
    880a:	a3 97       	sbiw	r28, 0x23	; 35
    880c:	24 34       	cpi	r18, 0x44	; 68
    880e:	31 05       	cpc	r19, r1
    8810:	09 f0       	breq	.+2      	; 0x8814 <_printf_fn+0x384>
    8812:	c0 c0       	rjmp	.+384    	; 0x8994 <_printf_fn+0x504>
    8814:	97 ff       	sbrs	r25, 7
    8816:	b8 c0       	rjmp	.+368    	; 0x8988 <_printf_fn+0x4f8>
    8818:	68 94       	set
    881a:	96 f8       	bld	r9, 6
    881c:	91 95       	neg	r25
    881e:	81 95       	neg	r24
    8820:	91 09       	sbc	r25, r1
    8822:	65 96       	adiw	r28, 0x15	; 21
    8824:	9f af       	std	Y+63, r25	; 0x3f
    8826:	8e af       	std	Y+62, r24	; 0x3e
    8828:	65 97       	sbiw	r28, 0x15	; 21
    882a:	42 e0       	ldi	r20, 0x02	; 2
    882c:	50 e0       	ldi	r21, 0x00	; 0
    882e:	6f 96       	adiw	r28, 0x1f	; 31
    8830:	5f af       	std	Y+63, r21	; 0x3f
    8832:	4e af       	std	Y+62, r20	; 0x3e
    8834:	6f 97       	sbiw	r28, 0x1f	; 31
    8836:	ae c0       	rjmp	.+348    	; 0x8994 <_printf_fn+0x504>
    8838:	6f 96       	adiw	r28, 0x1f	; 31
    883a:	ae ad       	ldd	r26, Y+62	; 0x3e
    883c:	bf ad       	ldd	r27, Y+63	; 0x3f
    883e:	6f 97       	sbiw	r28, 0x1f	; 31
    8840:	14 97       	sbiw	r26, 0x04	; 4
    8842:	59 f5       	brne	.+86     	; 0x889a <_printf_fn+0x40a>
    8844:	51 01       	movw	r10, r2
    8846:	b4 e0       	ldi	r27, 0x04	; 4
    8848:	ab 0e       	add	r10, r27
    884a:	b1 1c       	adc	r11, r1
    884c:	f1 01       	movw	r30, r2
    884e:	80 81       	ld	r24, Z
    8850:	91 81       	ldd	r25, Z+1	; 0x01
    8852:	a2 81       	ldd	r26, Z+2	; 0x02
    8854:	b3 81       	ldd	r27, Z+3	; 0x03
    8856:	2f 96       	adiw	r28, 0x0f	; 15
    8858:	8c af       	std	Y+60, r24	; 0x3c
    885a:	9d af       	std	Y+61, r25	; 0x3d
    885c:	ae af       	std	Y+62, r26	; 0x3e
    885e:	bf af       	std	Y+63, r27	; 0x3f
    8860:	2f 97       	sbiw	r28, 0x0f	; 15
    8862:	a3 96       	adiw	r28, 0x23	; 35
    8864:	2e ad       	ldd	r18, Y+62	; 0x3e
    8866:	3f ad       	ldd	r19, Y+63	; 0x3f
    8868:	a3 97       	sbiw	r28, 0x23	; 35
    886a:	24 34       	cpi	r18, 0x44	; 68
    886c:	31 05       	cpc	r19, r1
    886e:	09 f0       	breq	.+2      	; 0x8872 <_printf_fn+0x3e2>
    8870:	9e c0       	rjmp	.+316    	; 0x89ae <_printf_fn+0x51e>
    8872:	b7 ff       	sbrs	r27, 7
    8874:	96 c0       	rjmp	.+300    	; 0x89a2 <_printf_fn+0x512>
    8876:	68 94       	set
    8878:	96 f8       	bld	r9, 6
    887a:	b0 95       	com	r27
    887c:	a0 95       	com	r26
    887e:	90 95       	com	r25
    8880:	81 95       	neg	r24
    8882:	9f 4f       	sbci	r25, 0xFF	; 255
    8884:	af 4f       	sbci	r26, 0xFF	; 255
    8886:	bf 4f       	sbci	r27, 0xFF	; 255
    8888:	2f 96       	adiw	r28, 0x0f	; 15
    888a:	8c af       	std	Y+60, r24	; 0x3c
    888c:	9d af       	std	Y+61, r25	; 0x3d
    888e:	ae af       	std	Y+62, r26	; 0x3e
    8890:	bf af       	std	Y+63, r27	; 0x3f
    8892:	2f 97       	sbiw	r28, 0x0f	; 15
    8894:	86 c0       	rjmp	.+268    	; 0x89a2 <_printf_fn+0x512>
    8896:	81 e0       	ldi	r24, 0x01	; 1
    8898:	90 e0       	ldi	r25, 0x00	; 0
    889a:	6f 96       	adiw	r28, 0x1f	; 31
    889c:	ae ad       	ldd	r26, Y+62	; 0x3e
    889e:	bf ad       	ldd	r27, Y+63	; 0x3f
    88a0:	6f 97       	sbiw	r28, 0x1f	; 31
    88a2:	51 01       	movw	r10, r2
    88a4:	18 97       	sbiw	r26, 0x08	; 8
    88a6:	09 f0       	breq	.+2      	; 0x88aa <_printf_fn+0x41a>
    88a8:	89 c0       	rjmp	.+274    	; 0x89bc <_printf_fn+0x52c>
    88aa:	b8 e0       	ldi	r27, 0x08	; 8
    88ac:	ab 0e       	add	r10, r27
    88ae:	b1 1c       	adc	r11, r1
    88b0:	f1 01       	movw	r30, r2
    88b2:	f0 81       	ld	r31, Z
    88b4:	aa 96       	adiw	r28, 0x2a	; 42
    88b6:	ff af       	std	Y+63, r31	; 0x3f
    88b8:	aa 97       	sbiw	r28, 0x2a	; 42
    88ba:	d1 01       	movw	r26, r2
    88bc:	11 96       	adiw	r26, 0x01	; 1
    88be:	fc 90       	ld	r15, X
    88c0:	11 97       	sbiw	r26, 0x01	; 1
    88c2:	12 96       	adiw	r26, 0x02	; 2
    88c4:	0c 91       	ld	r16, X
    88c6:	12 97       	sbiw	r26, 0x02	; 2
    88c8:	13 96       	adiw	r26, 0x03	; 3
    88ca:	1c 91       	ld	r17, X
    88cc:	13 97       	sbiw	r26, 0x03	; 3
    88ce:	14 96       	adiw	r26, 0x04	; 4
    88d0:	bc 91       	ld	r27, X
    88d2:	f1 01       	movw	r30, r2
    88d4:	f5 81       	ldd	r31, Z+5	; 0x05
    88d6:	ab 96       	adiw	r28, 0x2b	; 43
    88d8:	ff af       	std	Y+63, r31	; 0x3f
    88da:	ab 97       	sbiw	r28, 0x2b	; 43
    88dc:	f1 01       	movw	r30, r2
    88de:	f6 81       	ldd	r31, Z+6	; 0x06
    88e0:	ac 96       	adiw	r28, 0x2c	; 44
    88e2:	ff af       	std	Y+63, r31	; 0x3f
    88e4:	ac 97       	sbiw	r28, 0x2c	; 44
    88e6:	f1 01       	movw	r30, r2
    88e8:	37 80       	ldd	r3, Z+7	; 0x07
    88ea:	aa 96       	adiw	r28, 0x2a	; 42
    88ec:	ff ad       	ldd	r31, Y+63	; 0x3f
    88ee:	aa 97       	sbiw	r28, 0x2a	; 42
    88f0:	24 96       	adiw	r28, 0x04	; 4
    88f2:	ff af       	std	Y+63, r31	; 0x3f
    88f4:	24 97       	sbiw	r28, 0x04	; 4
    88f6:	25 96       	adiw	r28, 0x05	; 5
    88f8:	ff ae       	std	Y+63, r15	; 0x3f
    88fa:	25 97       	sbiw	r28, 0x05	; 5
    88fc:	26 96       	adiw	r28, 0x06	; 6
    88fe:	0f af       	std	Y+63, r16	; 0x3f
    8900:	26 97       	sbiw	r28, 0x06	; 6
    8902:	27 96       	adiw	r28, 0x07	; 7
    8904:	1f af       	std	Y+63, r17	; 0x3f
    8906:	27 97       	sbiw	r28, 0x07	; 7
    8908:	28 96       	adiw	r28, 0x08	; 8
    890a:	bf af       	std	Y+63, r27	; 0x3f
    890c:	28 97       	sbiw	r28, 0x08	; 8
    890e:	ab 96       	adiw	r28, 0x2b	; 43
    8910:	ef ad       	ldd	r30, Y+63	; 0x3f
    8912:	ab 97       	sbiw	r28, 0x2b	; 43
    8914:	29 96       	adiw	r28, 0x09	; 9
    8916:	ef af       	std	Y+63, r30	; 0x3f
    8918:	29 97       	sbiw	r28, 0x09	; 9
    891a:	ac 96       	adiw	r28, 0x2c	; 44
    891c:	ff ad       	ldd	r31, Y+63	; 0x3f
    891e:	ac 97       	sbiw	r28, 0x2c	; 44
    8920:	2a 96       	adiw	r28, 0x0a	; 10
    8922:	ff af       	std	Y+63, r31	; 0x3f
    8924:	2a 97       	sbiw	r28, 0x0a	; 10
    8926:	2b 96       	adiw	r28, 0x0b	; 11
    8928:	3f ae       	std	Y+63, r3	; 0x3f
    892a:	2b 97       	sbiw	r28, 0x0b	; 11
    892c:	89 2b       	or	r24, r25
    892e:	09 f4       	brne	.+2      	; 0x8932 <_printf_fn+0x4a2>
    8930:	50 c0       	rjmp	.+160    	; 0x89d2 <_printf_fn+0x542>
    8932:	aa 96       	adiw	r28, 0x2a	; 42
    8934:	2f ad       	ldd	r18, Y+63	; 0x3f
    8936:	aa 97       	sbiw	r28, 0x2a	; 42
    8938:	3f 2d       	mov	r19, r15
    893a:	a8 01       	movw	r20, r16
    893c:	6b 2f       	mov	r22, r27
    893e:	7e 2f       	mov	r23, r30
    8940:	8f 2f       	mov	r24, r31
    8942:	93 2d       	mov	r25, r3
    8944:	a0 e0       	ldi	r26, 0x00	; 0
    8946:	0e 94 73 e5 	call	0x1cae6	; 0x1cae6 <__cmpdi2_s8>
    894a:	0c f0       	brlt	.+2      	; 0x894e <_printf_fn+0x4be>
    894c:	42 c0       	rjmp	.+132    	; 0x89d2 <_printf_fn+0x542>
    894e:	68 94       	set
    8950:	96 f8       	bld	r9, 6
    8952:	0e 94 25 e5 	call	0x1ca4a	; 0x1ca4a <__negdi2>
    8956:	24 96       	adiw	r28, 0x04	; 4
    8958:	2f af       	std	Y+63, r18	; 0x3f
    895a:	24 97       	sbiw	r28, 0x04	; 4
    895c:	25 96       	adiw	r28, 0x05	; 5
    895e:	3f af       	std	Y+63, r19	; 0x3f
    8960:	25 97       	sbiw	r28, 0x05	; 5
    8962:	26 96       	adiw	r28, 0x06	; 6
    8964:	4f af       	std	Y+63, r20	; 0x3f
    8966:	26 97       	sbiw	r28, 0x06	; 6
    8968:	27 96       	adiw	r28, 0x07	; 7
    896a:	5f af       	std	Y+63, r21	; 0x3f
    896c:	27 97       	sbiw	r28, 0x07	; 7
    896e:	28 96       	adiw	r28, 0x08	; 8
    8970:	6f af       	std	Y+63, r22	; 0x3f
    8972:	28 97       	sbiw	r28, 0x08	; 8
    8974:	29 96       	adiw	r28, 0x09	; 9
    8976:	7f af       	std	Y+63, r23	; 0x3f
    8978:	29 97       	sbiw	r28, 0x09	; 9
    897a:	2a 96       	adiw	r28, 0x0a	; 10
    897c:	8f af       	std	Y+63, r24	; 0x3f
    897e:	2a 97       	sbiw	r28, 0x0a	; 10
    8980:	2b 96       	adiw	r28, 0x0b	; 11
    8982:	9f af       	std	Y+63, r25	; 0x3f
    8984:	2b 97       	sbiw	r28, 0x0b	; 11
    8986:	25 c0       	rjmp	.+74     	; 0x89d2 <_printf_fn+0x542>
    8988:	22 e0       	ldi	r18, 0x02	; 2
    898a:	30 e0       	ldi	r19, 0x00	; 0
    898c:	6f 96       	adiw	r28, 0x1f	; 31
    898e:	3f af       	std	Y+63, r19	; 0x3f
    8990:	2e af       	std	Y+62, r18	; 0x3e
    8992:	6f 97       	sbiw	r28, 0x1f	; 31
    8994:	6c 96       	adiw	r28, 0x1c	; 28
    8996:	8f ad       	ldd	r24, Y+63	; 0x3f
    8998:	6c 97       	sbiw	r28, 0x1c	; 28
    899a:	6d 96       	adiw	r28, 0x1d	; 29
    899c:	9f ad       	ldd	r25, Y+63	; 0x3f
    899e:	6d 97       	sbiw	r28, 0x1d	; 29
    89a0:	1e c0       	rjmp	.+60     	; 0x89de <_printf_fn+0x54e>
    89a2:	44 e0       	ldi	r20, 0x04	; 4
    89a4:	50 e0       	ldi	r21, 0x00	; 0
    89a6:	6f 96       	adiw	r28, 0x1f	; 31
    89a8:	5f af       	std	Y+63, r21	; 0x3f
    89aa:	4e af       	std	Y+62, r20	; 0x3e
    89ac:	6f 97       	sbiw	r28, 0x1f	; 31
    89ae:	6a 96       	adiw	r28, 0x1a	; 26
    89b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    89b2:	6a 97       	sbiw	r28, 0x1a	; 26
    89b4:	6b 96       	adiw	r28, 0x1b	; 27
    89b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    89b8:	6b 97       	sbiw	r28, 0x1b	; 27
    89ba:	11 c0       	rjmp	.+34     	; 0x89de <_printf_fn+0x54e>
    89bc:	66 96       	adiw	r28, 0x16	; 22
    89be:	8f ad       	ldd	r24, Y+63	; 0x3f
    89c0:	66 97       	sbiw	r28, 0x16	; 22
    89c2:	67 96       	adiw	r28, 0x17	; 23
    89c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    89c6:	67 97       	sbiw	r28, 0x17	; 23
    89c8:	a3 96       	adiw	r28, 0x23	; 35
    89ca:	1f ae       	std	Y+63, r1	; 0x3f
    89cc:	1e ae       	std	Y+62, r1	; 0x3e
    89ce:	a3 97       	sbiw	r28, 0x23	; 35
    89d0:	06 c0       	rjmp	.+12     	; 0x89de <_printf_fn+0x54e>
    89d2:	68 96       	adiw	r28, 0x18	; 24
    89d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    89d6:	68 97       	sbiw	r28, 0x18	; 24
    89d8:	69 96       	adiw	r28, 0x19	; 25
    89da:	9f ad       	ldd	r25, Y+63	; 0x3f
    89dc:	69 97       	sbiw	r28, 0x19	; 25
    89de:	5f ef       	ldi	r21, 0xFF	; 255
    89e0:	65 1a       	sub	r6, r21
    89e2:	75 0a       	sbc	r7, r21
    89e4:	85 0a       	sbc	r8, r21
    89e6:	15 01       	movw	r2, r10
    89e8:	2d c0       	rjmp	.+90     	; 0x8a44 <_printf_fn+0x5b4>
    89ea:	91 fc       	sbrc	r9, 1
    89ec:	08 c0       	rjmp	.+16     	; 0x89fe <_printf_fn+0x56e>
    89ee:	68 94       	set
    89f0:	91 f8       	bld	r9, 1
    89f2:	86 e0       	ldi	r24, 0x06	; 6
    89f4:	90 e0       	ldi	r25, 0x00	; 0
    89f6:	a1 96       	adiw	r28, 0x21	; 33
    89f8:	9f af       	std	Y+63, r25	; 0x3f
    89fa:	8e af       	std	Y+62, r24	; 0x3e
    89fc:	a1 97       	sbiw	r28, 0x21	; 33
    89fe:	d1 01       	movw	r26, r2
    8a00:	2d 91       	ld	r18, X+
    8a02:	3d 91       	ld	r19, X+
    8a04:	4d 91       	ld	r20, X+
    8a06:	5c 91       	ld	r21, X
    8a08:	a9 96       	adiw	r28, 0x29	; 41
    8a0a:	2c af       	std	Y+60, r18	; 0x3c
    8a0c:	3d af       	std	Y+61, r19	; 0x3d
    8a0e:	4e af       	std	Y+62, r20	; 0x3e
    8a10:	5f af       	std	Y+63, r21	; 0x3f
    8a12:	a9 97       	sbiw	r28, 0x29	; 41
    8a14:	bf ef       	ldi	r27, 0xFF	; 255
    8a16:	6b 1a       	sub	r6, r27
    8a18:	7b 0a       	sbc	r7, r27
    8a1a:	8b 0a       	sbc	r8, r27
    8a1c:	f1 01       	movw	r30, r2
    8a1e:	34 96       	adiw	r30, 0x04	; 4
    8a20:	1f 01       	movw	r2, r30
    8a22:	0a c0       	rjmp	.+20     	; 0x8a38 <_printf_fn+0x5a8>
    8a24:	ff ef       	ldi	r31, 0xFF	; 255
    8a26:	6f 1a       	sub	r6, r31
    8a28:	7f 0a       	sbc	r7, r31
    8a2a:	8f 0a       	sbc	r8, r31
    8a2c:	b0 c0       	rjmp	.+352    	; 0x8b8e <_printf_fn+0x6fe>
    8a2e:	2f ef       	ldi	r18, 0xFF	; 255
    8a30:	62 1a       	sub	r6, r18
    8a32:	72 0a       	sbc	r7, r18
    8a34:	82 0a       	sbc	r8, r18
    8a36:	b8 c0       	rjmp	.+368    	; 0x8ba8 <_printf_fn+0x718>
    8a38:	66 96       	adiw	r28, 0x16	; 22
    8a3a:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a3c:	66 97       	sbiw	r28, 0x16	; 22
    8a3e:	67 96       	adiw	r28, 0x17	; 23
    8a40:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a42:	67 97       	sbiw	r28, 0x17	; 23
    8a44:	a3 96       	adiw	r28, 0x23	; 35
    8a46:	ee ad       	ldd	r30, Y+62	; 0x3e
    8a48:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a4a:	a3 97       	sbiw	r28, 0x23	; 35
    8a4c:	e2 54       	subi	r30, 0x42	; 66
    8a4e:	f1 09       	sbc	r31, r1
    8a50:	e7 33       	cpi	r30, 0x37	; 55
    8a52:	f1 05       	cpc	r31, r1
    8a54:	08 f0       	brcs	.+2      	; 0x8a58 <_printf_fn+0x5c8>
    8a56:	f9 c0       	rjmp	.+498    	; 0x8c4a <_printf_fn+0x7ba>
    8a58:	e3 58       	subi	r30, 0x83	; 131
    8a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    8a5c:	0c 94 f1 e4 	jmp	0x1c9e2	; 0x1c9e2 <__tablejump2__>
    8a60:	e8 94       	clt
    8a62:	94 f8       	bld	r9, 4
    8a64:	e8 94       	clt
    8a66:	92 f8       	bld	r9, 2
    8a68:	a9 2c       	mov	r10, r9
    8a6a:	b1 2c       	mov	r11, r1
    8a6c:	a1 96       	adiw	r28, 0x21	; 33
    8a6e:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a70:	df ac       	ldd	r13, Y+63	; 0x3f
    8a72:	a1 97       	sbiw	r28, 0x21	; 33
    8a74:	72 01       	movw	r14, r4
    8a76:	0a e0       	ldi	r16, 0x0A	; 10
    8a78:	10 e0       	ldi	r17, 0x00	; 0
    8a7a:	13 c0       	rjmp	.+38     	; 0x8aa2 <_printf_fn+0x612>
    8a7c:	a9 2c       	mov	r10, r9
    8a7e:	b1 2c       	mov	r11, r1
    8a80:	a1 96       	adiw	r28, 0x21	; 33
    8a82:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a84:	df ac       	ldd	r13, Y+63	; 0x3f
    8a86:	a1 97       	sbiw	r28, 0x21	; 33
    8a88:	72 01       	movw	r14, r4
    8a8a:	02 e0       	ldi	r16, 0x02	; 2
    8a8c:	10 e0       	ldi	r17, 0x00	; 0
    8a8e:	09 c0       	rjmp	.+18     	; 0x8aa2 <_printf_fn+0x612>
    8a90:	a9 2c       	mov	r10, r9
    8a92:	b1 2c       	mov	r11, r1
    8a94:	a1 96       	adiw	r28, 0x21	; 33
    8a96:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a98:	df ac       	ldd	r13, Y+63	; 0x3f
    8a9a:	a1 97       	sbiw	r28, 0x21	; 33
    8a9c:	72 01       	movw	r14, r4
    8a9e:	08 e0       	ldi	r16, 0x08	; 8
    8aa0:	10 e0       	ldi	r17, 0x00	; 0
    8aa2:	22 e4       	ldi	r18, 0x42	; 66
    8aa4:	30 e0       	ldi	r19, 0x00	; 0
    8aa6:	ae 01       	movw	r20, r28
    8aa8:	4f 5f       	subi	r20, 0xFF	; 255
    8aaa:	5f 4f       	sbci	r21, 0xFF	; 255
    8aac:	6f 96       	adiw	r28, 0x1f	; 31
    8aae:	6e ad       	ldd	r22, Y+62	; 0x3e
    8ab0:	7f ad       	ldd	r23, Y+63	; 0x3f
    8ab2:	6f 97       	sbiw	r28, 0x1f	; 31
    8ab4:	f3 d9       	rcall	.-3098   	; 0x7e9c <p_ntoa>
    8ab6:	30 c0       	rjmp	.+96     	; 0x8b18 <_printf_fn+0x688>
    8ab8:	a9 2c       	mov	r10, r9
    8aba:	b1 2c       	mov	r11, r1
    8abc:	a1 96       	adiw	r28, 0x21	; 33
    8abe:	ce ac       	ldd	r12, Y+62	; 0x3e
    8ac0:	df ac       	ldd	r13, Y+63	; 0x3f
    8ac2:	a1 97       	sbiw	r28, 0x21	; 33
    8ac4:	72 01       	movw	r14, r4
    8ac6:	00 e1       	ldi	r16, 0x10	; 16
    8ac8:	10 e0       	ldi	r17, 0x00	; 0
    8aca:	22 e4       	ldi	r18, 0x42	; 66
    8acc:	30 e0       	ldi	r19, 0x00	; 0
    8ace:	ae 01       	movw	r20, r28
    8ad0:	4f 5f       	subi	r20, 0xFF	; 255
    8ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    8ad4:	6f 96       	adiw	r28, 0x1f	; 31
    8ad6:	6e ad       	ldd	r22, Y+62	; 0x3e
    8ad8:	7f ad       	ldd	r23, Y+63	; 0x3f
    8ada:	6f 97       	sbiw	r28, 0x1f	; 31
    8adc:	df d9       	rcall	.-3138   	; 0x7e9c <p_ntoa>
    8ade:	7c 01       	movw	r14, r24
    8ae0:	a3 96       	adiw	r28, 0x23	; 35
    8ae2:	6e ad       	ldd	r22, Y+62	; 0x3e
    8ae4:	7f ad       	ldd	r23, Y+63	; 0x3f
    8ae6:	a3 97       	sbiw	r28, 0x23	; 35
    8ae8:	67 7f       	andi	r22, 0xF7	; 247
    8aea:	60 35       	cpi	r22, 0x50	; 80
    8aec:	71 05       	cpc	r23, r1
    8aee:	c9 f5       	brne	.+114    	; 0x8b62 <_printf_fn+0x6d2>
    8af0:	34 c0       	rjmp	.+104    	; 0x8b5a <_printf_fn+0x6ca>
    8af2:	c9 2c       	mov	r12, r9
    8af4:	d1 2c       	mov	r13, r1
    8af6:	a1 96       	adiw	r28, 0x21	; 33
    8af8:	ee ac       	ldd	r14, Y+62	; 0x3e
    8afa:	ff ac       	ldd	r15, Y+63	; 0x3f
    8afc:	a1 97       	sbiw	r28, 0x21	; 33
    8afe:	82 01       	movw	r16, r4
    8b00:	22 e4       	ldi	r18, 0x42	; 66
    8b02:	30 e0       	ldi	r19, 0x00	; 0
    8b04:	ae 01       	movw	r20, r28
    8b06:	4f 5f       	subi	r20, 0xFF	; 255
    8b08:	5f 4f       	sbci	r21, 0xFF	; 255
    8b0a:	a9 96       	adiw	r28, 0x29	; 41
    8b0c:	6c ad       	ldd	r22, Y+60	; 0x3c
    8b0e:	7d ad       	ldd	r23, Y+61	; 0x3d
    8b10:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b12:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b14:	a9 97       	sbiw	r28, 0x29	; 41
    8b16:	17 da       	rcall	.-3026   	; 0x7f46 <p_ftoa>
    8b18:	93 fa       	bst	r9, 3
    8b1a:	00 27       	eor	r16, r16
    8b1c:	00 f9       	bld	r16, 0
    8b1e:	10 e0       	ldi	r17, 0x00	; 0
    8b20:	9c 01       	movw	r18, r24
    8b22:	24 c0       	rjmp	.+72     	; 0x8b6c <_printf_fn+0x6dc>
    8b24:	c9 2c       	mov	r12, r9
    8b26:	d1 2c       	mov	r13, r1
    8b28:	a1 96       	adiw	r28, 0x21	; 33
    8b2a:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b2c:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b2e:	a1 97       	sbiw	r28, 0x21	; 33
    8b30:	82 01       	movw	r16, r4
    8b32:	22 e4       	ldi	r18, 0x42	; 66
    8b34:	30 e0       	ldi	r19, 0x00	; 0
    8b36:	ae 01       	movw	r20, r28
    8b38:	4f 5f       	subi	r20, 0xFF	; 255
    8b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    8b3c:	a9 96       	adiw	r28, 0x29	; 41
    8b3e:	6c ad       	ldd	r22, Y+60	; 0x3c
    8b40:	7d ad       	ldd	r23, Y+61	; 0x3d
    8b42:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b44:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b46:	a9 97       	sbiw	r28, 0x29	; 41
    8b48:	05 db       	rcall	.-2550   	; 0x8154 <p_etoa>
    8b4a:	7c 01       	movw	r14, r24
    8b4c:	a3 96       	adiw	r28, 0x23	; 35
    8b4e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8b50:	5f ad       	ldd	r21, Y+63	; 0x3f
    8b52:	a3 97       	sbiw	r28, 0x23	; 35
    8b54:	45 34       	cpi	r20, 0x45	; 69
    8b56:	51 05       	cpc	r21, r1
    8b58:	21 f4       	brne	.+8      	; 0x8b62 <_printf_fn+0x6d2>
    8b5a:	ce 01       	movw	r24, r28
    8b5c:	01 96       	adiw	r24, 0x01	; 1
    8b5e:	0e 94 f5 31 	call	0x63ea	; 0x63ea <strupper>
    8b62:	93 fa       	bst	r9, 3
    8b64:	00 27       	eor	r16, r16
    8b66:	00 f9       	bld	r16, 0
    8b68:	10 e0       	ldi	r17, 0x00	; 0
    8b6a:	97 01       	movw	r18, r14
    8b6c:	a2 01       	movw	r20, r4
    8b6e:	be 01       	movw	r22, r28
    8b70:	6f 5f       	subi	r22, 0xFF	; 255
    8b72:	7f 4f       	sbci	r23, 0xFF	; 255
    8b74:	a5 96       	adiw	r28, 0x25	; 37
    8b76:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b78:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b7a:	a5 97       	sbiw	r28, 0x25	; 37
    8b7c:	47 dc       	rcall	.-1906   	; 0x840c <_puts_pad>
    8b7e:	69 c0       	rjmp	.+210    	; 0x8c52 <_printf_fn+0x7c2>
    8b80:	a3 96       	adiw	r28, 0x23	; 35
    8b82:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b84:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b86:	a3 97       	sbiw	r28, 0x23	; 35
    8b88:	83 37       	cpi	r24, 0x73	; 115
    8b8a:	91 05       	cpc	r25, r1
    8b8c:	69 f4       	brne	.+26     	; 0x8ba8 <_printf_fn+0x718>
    8b8e:	71 01       	movw	r14, r2
    8b90:	92 e0       	ldi	r25, 0x02	; 2
    8b92:	e9 0e       	add	r14, r25
    8b94:	f1 1c       	adc	r15, r1
    8b96:	d1 01       	movw	r26, r2
    8b98:	6d 91       	ld	r22, X+
    8b9a:	7c 91       	ld	r23, X
    8b9c:	61 15       	cp	r22, r1
    8b9e:	71 05       	cpc	r23, r1
    8ba0:	91 f4       	brne	.+36     	; 0x8bc6 <_printf_fn+0x736>
    8ba2:	67 ee       	ldi	r22, 0xE7	; 231
    8ba4:	77 e0       	ldi	r23, 0x07	; 7
    8ba6:	0f c0       	rjmp	.+30     	; 0x8bc6 <_printf_fn+0x736>
    8ba8:	71 01       	movw	r14, r2
    8baa:	b2 e0       	ldi	r27, 0x02	; 2
    8bac:	eb 0e       	add	r14, r27
    8bae:	f1 1c       	adc	r15, r1
    8bb0:	f1 01       	movw	r30, r2
    8bb2:	80 81       	ld	r24, Z
    8bb4:	60 96       	adiw	r28, 0x10	; 16
    8bb6:	8f af       	std	Y+63, r24	; 0x3f
    8bb8:	60 97       	sbiw	r28, 0x10	; 16
    8bba:	61 96       	adiw	r28, 0x11	; 17
    8bbc:	1f ae       	std	Y+63, r1	; 0x3f
    8bbe:	61 97       	sbiw	r28, 0x11	; 17
    8bc0:	be 01       	movw	r22, r28
    8bc2:	61 5b       	subi	r22, 0xB1	; 177
    8bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    8bc6:	fb 01       	movw	r30, r22
    8bc8:	01 90       	ld	r0, Z+
    8bca:	00 20       	and	r0, r0
    8bcc:	e9 f7       	brne	.-6      	; 0x8bc8 <_printf_fn+0x738>
    8bce:	31 97       	sbiw	r30, 0x01	; 1
    8bd0:	e6 1b       	sub	r30, r22
    8bd2:	f7 0b       	sbc	r31, r23
    8bd4:	a1 96       	adiw	r28, 0x21	; 33
    8bd6:	2e ad       	ldd	r18, Y+62	; 0x3e
    8bd8:	3f ad       	ldd	r19, Y+63	; 0x3f
    8bda:	a1 97       	sbiw	r28, 0x21	; 33
    8bdc:	23 2b       	or	r18, r19
    8bde:	21 f4       	brne	.+8      	; 0x8be8 <_printf_fn+0x758>
    8be0:	a1 96       	adiw	r28, 0x21	; 33
    8be2:	ff af       	std	Y+63, r31	; 0x3f
    8be4:	ee af       	std	Y+62, r30	; 0x3e
    8be6:	a1 97       	sbiw	r28, 0x21	; 33
    8be8:	a1 96       	adiw	r28, 0x21	; 33
    8bea:	4e ad       	ldd	r20, Y+62	; 0x3e
    8bec:	5f ad       	ldd	r21, Y+63	; 0x3f
    8bee:	a1 97       	sbiw	r28, 0x21	; 33
    8bf0:	44 16       	cp	r4, r20
    8bf2:	55 06       	cpc	r5, r21
    8bf4:	3c f4       	brge	.+14     	; 0x8c04 <_printf_fn+0x774>
    8bf6:	41 14       	cp	r4, r1
    8bf8:	51 04       	cpc	r5, r1
    8bfa:	21 f0       	breq	.+8      	; 0x8c04 <_printf_fn+0x774>
    8bfc:	a1 96       	adiw	r28, 0x21	; 33
    8bfe:	5f ae       	std	Y+63, r5	; 0x3f
    8c00:	4e ae       	std	Y+62, r4	; 0x3e
    8c02:	a1 97       	sbiw	r28, 0x21	; 33
    8c04:	93 fa       	bst	r9, 3
    8c06:	00 27       	eor	r16, r16
    8c08:	00 f9       	bld	r16, 0
    8c0a:	10 e0       	ldi	r17, 0x00	; 0
    8c0c:	a1 96       	adiw	r28, 0x21	; 33
    8c0e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c10:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c12:	a1 97       	sbiw	r28, 0x21	; 33
    8c14:	a2 01       	movw	r20, r4
    8c16:	a5 96       	adiw	r28, 0x25	; 37
    8c18:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c1c:	a5 97       	sbiw	r28, 0x25	; 37
    8c1e:	f6 db       	rcall	.-2068   	; 0x840c <_puts_pad>
    8c20:	17 01       	movw	r2, r14
    8c22:	17 c0       	rjmp	.+46     	; 0x8c52 <_printf_fn+0x7c2>
    8c24:	f6 01       	movw	r30, r12
    8c26:	5e 2d       	mov	r21, r14
    8c28:	0e 94 6c e5 	call	0x1cad8	; 0x1cad8 <__xload_1>
    8c2c:	66 23       	and	r22, r22
    8c2e:	89 f0       	breq	.+34     	; 0x8c52 <_printf_fn+0x7c2>
    8c30:	5f ef       	ldi	r21, 0xFF	; 255
    8c32:	c5 1a       	sub	r12, r21
    8c34:	d5 0a       	sbc	r13, r21
    8c36:	e5 0a       	sbc	r14, r21
    8c38:	a5 96       	adiw	r28, 0x25	; 37
    8c3a:	ae ad       	ldd	r26, Y+62	; 0x3e
    8c3c:	bf ad       	ldd	r27, Y+63	; 0x3f
    8c3e:	a5 97       	sbiw	r28, 0x25	; 37
    8c40:	ed 91       	ld	r30, X+
    8c42:	fc 91       	ld	r31, X
    8c44:	11 97       	sbiw	r26, 0x01	; 1
    8c46:	cd 01       	movw	r24, r26
    8c48:	09 95       	icall
    8c4a:	6c 14       	cp	r6, r12
    8c4c:	7d 04       	cpc	r7, r13
    8c4e:	8e 04       	cpc	r8, r14
    8c50:	48 f7       	brcc	.-46     	; 0x8c24 <_printf_fn+0x794>
    8c52:	e8 2c       	mov	r14, r8
    8c54:	63 01       	movw	r12, r6
    8c56:	4b cc       	rjmp	.-1898   	; 0x84ee <_printf_fn+0x5e>
    8c58:	e2 e0       	ldi	r30, 0x02	; 2
    8c5a:	f0 e0       	ldi	r31, 0x00	; 0
    8c5c:	6f 96       	adiw	r28, 0x1f	; 31
    8c5e:	ff af       	std	Y+63, r31	; 0x3f
    8c60:	ee af       	std	Y+62, r30	; 0x3e
    8c62:	6f 97       	sbiw	r28, 0x1f	; 31
    8c64:	57 cd       	rjmp	.-1362   	; 0x8714 <_printf_fn+0x284>
    8c66:	6f 96       	adiw	r28, 0x1f	; 31
    8c68:	ee ad       	ldd	r30, Y+62	; 0x3e
    8c6a:	ff ad       	ldd	r31, Y+63	; 0x3f
    8c6c:	6f 97       	sbiw	r28, 0x1f	; 31
    8c6e:	32 97       	sbiw	r30, 0x02	; 2
    8c70:	61 f4       	brne	.+24     	; 0x8c8a <_printf_fn+0x7fa>
    8c72:	51 01       	movw	r10, r2
    8c74:	f2 e0       	ldi	r31, 0x02	; 2
    8c76:	af 0e       	add	r10, r31
    8c78:	b1 1c       	adc	r11, r1
    8c7a:	d1 01       	movw	r26, r2
    8c7c:	8d 91       	ld	r24, X+
    8c7e:	9c 91       	ld	r25, X
    8c80:	65 96       	adiw	r28, 0x15	; 21
    8c82:	9f af       	std	Y+63, r25	; 0x3f
    8c84:	8e af       	std	Y+62, r24	; 0x3e
    8c86:	65 97       	sbiw	r28, 0x15	; 21
    8c88:	c5 cd       	rjmp	.-1142   	; 0x8814 <_printf_fn+0x384>
    8c8a:	6f 96       	adiw	r28, 0x1f	; 31
    8c8c:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c8e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c90:	6f 97       	sbiw	r28, 0x1f	; 31
    8c92:	24 30       	cpi	r18, 0x04	; 4
    8c94:	31 05       	cpc	r19, r1
    8c96:	09 f0       	breq	.+2      	; 0x8c9a <_printf_fn+0x80a>
    8c98:	fe cd       	rjmp	.-1028   	; 0x8896 <_printf_fn+0x406>
    8c9a:	51 01       	movw	r10, r2
    8c9c:	f4 e0       	ldi	r31, 0x04	; 4
    8c9e:	af 0e       	add	r10, r31
    8ca0:	b1 1c       	adc	r11, r1
    8ca2:	f1 01       	movw	r30, r2
    8ca4:	80 81       	ld	r24, Z
    8ca6:	91 81       	ldd	r25, Z+1	; 0x01
    8ca8:	a2 81       	ldd	r26, Z+2	; 0x02
    8caa:	b3 81       	ldd	r27, Z+3	; 0x03
    8cac:	2f 96       	adiw	r28, 0x0f	; 15
    8cae:	8c af       	std	Y+60, r24	; 0x3c
    8cb0:	9d af       	std	Y+61, r25	; 0x3d
    8cb2:	ae af       	std	Y+62, r26	; 0x3e
    8cb4:	bf af       	std	Y+63, r27	; 0x3f
    8cb6:	2f 97       	sbiw	r28, 0x0f	; 15
    8cb8:	dc cd       	rjmp	.-1096   	; 0x8872 <_printf_fn+0x3e2>
    8cba:	c5 59       	subi	r28, 0x95	; 149
    8cbc:	df 4f       	sbci	r29, 0xFF	; 255
    8cbe:	e2 e1       	ldi	r30, 0x12	; 18
    8cc0:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

00008cc4 <vsnprintf_P>:
    8cc4:	a8 e0       	ldi	r26, 0x08	; 8
    8cc6:	b0 e0       	ldi	r27, 0x00	; 0
    8cc8:	e8 e6       	ldi	r30, 0x68	; 104
    8cca:	f6 e4       	ldi	r31, 0x46	; 70
    8ccc:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__prologue_saves__+0x18>
    8cd0:	7c 01       	movw	r14, r24
    8cd2:	cb 01       	movw	r24, r22
    8cd4:	64 2f       	mov	r22, r20
    8cd6:	a9 01       	movw	r20, r18
    8cd8:	98 01       	movw	r18, r16
    8cda:	f7 01       	movw	r30, r14
    8cdc:	10 82       	st	Z, r1
    8cde:	ef e6       	ldi	r30, 0x6F	; 111
    8ce0:	fe e3       	ldi	r31, 0x3E	; 62
    8ce2:	fa 83       	std	Y+2, r31	; 0x02
    8ce4:	e9 83       	std	Y+1, r30	; 0x01
    8ce6:	9e 83       	std	Y+6, r25	; 0x06
    8ce8:	8d 83       	std	Y+5, r24	; 0x05
    8cea:	18 86       	std	Y+8, r1	; 0x08
    8cec:	1f 82       	std	Y+7, r1	; 0x07
    8cee:	fc 82       	std	Y+4, r15	; 0x04
    8cf0:	eb 82       	std	Y+3, r14	; 0x03
    8cf2:	ce 01       	movw	r24, r28
    8cf4:	01 96       	adiw	r24, 0x01	; 1
    8cf6:	cc db       	rcall	.-2152   	; 0x8490 <_printf_fn>
    8cf8:	f7 01       	movw	r30, r14
    8cfa:	01 90       	ld	r0, Z+
    8cfc:	00 20       	and	r0, r0
    8cfe:	e9 f7       	brne	.-6      	; 0x8cfa <vsnprintf_P+0x36>
    8d00:	cf 01       	movw	r24, r30
    8d02:	01 97       	sbiw	r24, 0x01	; 1
    8d04:	8e 19       	sub	r24, r14
    8d06:	9f 09       	sbc	r25, r15
    8d08:	28 96       	adiw	r28, 0x08	; 8
    8d0a:	e6 e0       	ldi	r30, 0x06	; 6
    8d0c:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

00008d10 <snprintf_P>:
    8d10:	a0 e0       	ldi	r26, 0x00	; 0
    8d12:	b0 e0       	ldi	r27, 0x00	; 0
    8d14:	ee e8       	ldi	r30, 0x8E	; 142
    8d16:	f6 e4       	ldi	r31, 0x46	; 70
    8d18:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__prologue_saves__+0x1c>
    8d1c:	8e 01       	movw	r16, r28
    8d1e:	02 5f       	subi	r16, 0xF2	; 242
    8d20:	1f 4f       	sbci	r17, 0xFF	; 255
    8d22:	2b 85       	ldd	r18, Y+11	; 0x0b
    8d24:	3c 85       	ldd	r19, Y+12	; 0x0c
    8d26:	4d 85       	ldd	r20, Y+13	; 0x0d
    8d28:	69 85       	ldd	r22, Y+9	; 0x09
    8d2a:	7a 85       	ldd	r23, Y+10	; 0x0a
    8d2c:	8f 81       	ldd	r24, Y+7	; 0x07
    8d2e:	98 85       	ldd	r25, Y+8	; 0x08
    8d30:	c9 df       	rcall	.-110    	; 0x8cc4 <vsnprintf_P>
    8d32:	e4 e0       	ldi	r30, 0x04	; 4
    8d34:	0c 94 5f e5 	jmp	0x1cabe	; 0x1cabe <__epilogue_restores__+0x1c>

00008d38 <sprintf_P>:
    8d38:	a0 e0       	ldi	r26, 0x00	; 0
    8d3a:	b0 e0       	ldi	r27, 0x00	; 0
    8d3c:	e2 ea       	ldi	r30, 0xA2	; 162
    8d3e:	f6 e4       	ldi	r31, 0x46	; 70
    8d40:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__prologue_saves__+0x1c>
    8d44:	8e 01       	movw	r16, r28
    8d46:	04 5f       	subi	r16, 0xF4	; 244
    8d48:	1f 4f       	sbci	r17, 0xFF	; 255
    8d4a:	29 85       	ldd	r18, Y+9	; 0x09
    8d4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    8d4e:	4b 85       	ldd	r20, Y+11	; 0x0b
    8d50:	60 e0       	ldi	r22, 0x00	; 0
    8d52:	74 e0       	ldi	r23, 0x04	; 4
    8d54:	8f 81       	ldd	r24, Y+7	; 0x07
    8d56:	98 85       	ldd	r25, Y+8	; 0x08
    8d58:	b5 df       	rcall	.-150    	; 0x8cc4 <vsnprintf_P>
    8d5a:	e4 e0       	ldi	r30, 0x04	; 4
    8d5c:	0c 94 5f e5 	jmp	0x1cabe	; 0x1cabe <__epilogue_restores__+0x1c>

00008d60 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    8d60:	a8 e0       	ldi	r26, 0x08	; 8
    8d62:	b0 e0       	ldi	r27, 0x00	; 0
    8d64:	e6 eb       	ldi	r30, 0xB6	; 182
    8d66:	f6 e4       	ldi	r31, 0x46	; 70
    8d68:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    8d6c:	9e 01       	movw	r18, r28
    8d6e:	23 5f       	subi	r18, 0xF3	; 243
    8d70:	3f 4f       	sbci	r19, 0xFF	; 255
    8d72:	f9 01       	movw	r30, r18
    8d74:	41 91       	ld	r20, Z+
    8d76:	51 91       	ld	r21, Z+
    8d78:	61 91       	ld	r22, Z+
    8d7a:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8d7c:	88 e8       	ldi	r24, 0x88	; 136
    8d7e:	9e e3       	ldi	r25, 0x3E	; 62
    8d80:	9a 83       	std	Y+2, r25	; 0x02
    8d82:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8d84:	18 86       	std	Y+8, r1	; 0x08
    8d86:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8d88:	ce 01       	movw	r24, r28
    8d8a:	01 96       	adiw	r24, 0x01	; 1
    8d8c:	81 db       	rcall	.-2302   	; 0x8490 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8d8e:	8f 81       	ldd	r24, Y+7	; 0x07
    8d90:	98 85       	ldd	r25, Y+8	; 0x08
    8d92:	28 96       	adiw	r28, 0x08	; 8
    8d94:	e2 e0       	ldi	r30, 0x02	; 2
    8d96:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

00008d9a <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8d9a:	9c 01       	movw	r18, r24
    8d9c:	20 53       	subi	r18, 0x30	; 48
    8d9e:	31 09       	sbc	r19, r1
    8da0:	2a 30       	cpi	r18, 0x0A	; 10
    8da2:	31 05       	cpc	r19, r1
    8da4:	10 f4       	brcc	.+4      	; 0x8daa <atodigit+0x10>
    8da6:	c9 01       	movw	r24, r18
    8da8:	10 c0       	rjmp	.+32     	; 0x8dca <atodigit+0x30>
    8daa:	9c 01       	movw	r18, r24
    8dac:	21 54       	subi	r18, 0x41	; 65
    8dae:	31 09       	sbc	r19, r1
    8db0:	26 30       	cpi	r18, 0x06	; 6
    8db2:	31 05       	cpc	r19, r1
    8db4:	10 f4       	brcc	.+4      	; 0x8dba <atodigit+0x20>
    8db6:	c7 97       	sbiw	r24, 0x37	; 55
    8db8:	08 c0       	rjmp	.+16     	; 0x8dca <atodigit+0x30>
    8dba:	9c 01       	movw	r18, r24
    8dbc:	21 56       	subi	r18, 0x61	; 97
    8dbe:	31 09       	sbc	r19, r1
    8dc0:	26 30       	cpi	r18, 0x06	; 6
    8dc2:	31 05       	cpc	r19, r1
    8dc4:	28 f4       	brcc	.+10     	; 0x8dd0 <atodigit+0x36>
    8dc6:	87 55       	subi	r24, 0x57	; 87
    8dc8:	91 09       	sbc	r25, r1
    8dca:	86 17       	cp	r24, r22
    8dcc:	97 07       	cpc	r25, r23
    8dce:	14 f0       	brlt	.+4      	; 0x8dd4 <atodigit+0x3a>
    8dd0:	8f ef       	ldi	r24, 0xFF	; 255
    8dd2:	9f ef       	ldi	r25, 0xFF	; 255
    8dd4:	08 95       	ret

00008dd6 <strtol>:
    8dd6:	a0 e0       	ldi	r26, 0x00	; 0
    8dd8:	b0 e0       	ldi	r27, 0x00	; 0
    8dda:	e1 ef       	ldi	r30, 0xF1	; 241
    8ddc:	f6 e4       	ldi	r31, 0x46	; 70
    8dde:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    8de2:	2b 01       	movw	r4, r22
    8de4:	8a 01       	movw	r16, r20
    8de6:	ec 01       	movw	r28, r24
    8de8:	28 81       	ld	r18, Y
    8dea:	01 96       	adiw	r24, 0x01	; 1
    8dec:	20 32       	cpi	r18, 0x20	; 32
    8dee:	d9 f3       	breq	.-10     	; 0x8de6 <strtol+0x10>
    8df0:	29 30       	cpi	r18, 0x09	; 9
    8df2:	c9 f3       	breq	.-14     	; 0x8de6 <strtol+0x10>
    8df4:	2d 32       	cpi	r18, 0x2D	; 45
    8df6:	29 f4       	brne	.+10     	; 0x8e02 <strtol+0x2c>
    8df8:	ec 01       	movw	r28, r24
    8dfa:	66 24       	eor	r6, r6
    8dfc:	63 94       	inc	r6
    8dfe:	71 2c       	mov	r7, r1
    8e00:	05 c0       	rjmp	.+10     	; 0x8e0c <strtol+0x36>
    8e02:	2b 32       	cpi	r18, 0x2B	; 43
    8e04:	09 f4       	brne	.+2      	; 0x8e08 <strtol+0x32>
    8e06:	ec 01       	movw	r28, r24
    8e08:	61 2c       	mov	r6, r1
    8e0a:	71 2c       	mov	r7, r1
    8e0c:	9e 01       	movw	r18, r28
    8e0e:	2f 5f       	subi	r18, 0xFF	; 255
    8e10:	3f 4f       	sbci	r19, 0xFF	; 255
    8e12:	88 81       	ld	r24, Y
    8e14:	80 33       	cpi	r24, 0x30	; 48
    8e16:	11 f4       	brne	.+4      	; 0x8e1c <strtol+0x46>
    8e18:	e9 01       	movw	r28, r18
    8e1a:	f8 cf       	rjmp	.-16     	; 0x8e0c <strtol+0x36>
    8e1c:	c1 2c       	mov	r12, r1
    8e1e:	d1 2c       	mov	r13, r1
    8e20:	76 01       	movw	r14, r12
    8e22:	48 01       	movw	r8, r16
    8e24:	01 2e       	mov	r0, r17
    8e26:	00 0c       	add	r0, r0
    8e28:	aa 08       	sbc	r10, r10
    8e2a:	bb 08       	sbc	r11, r11
    8e2c:	3c 2e       	mov	r3, r28
    8e2e:	2d 2e       	mov	r2, r29
    8e30:	89 91       	ld	r24, Y+
    8e32:	88 23       	and	r24, r24
    8e34:	31 f0       	breq	.+12     	; 0x8e42 <strtol+0x6c>
    8e36:	b8 01       	movw	r22, r16
    8e38:	90 e0       	ldi	r25, 0x00	; 0
    8e3a:	af df       	rcall	.-162    	; 0x8d9a <atodigit>
    8e3c:	fc 01       	movw	r30, r24
    8e3e:	97 ff       	sbrs	r25, 7
    8e40:	0c c0       	rjmp	.+24     	; 0x8e5a <strtol+0x84>
    8e42:	61 14       	cp	r6, r1
    8e44:	71 04       	cpc	r7, r1
    8e46:	c1 f0       	breq	.+48     	; 0x8e78 <strtol+0xa2>
    8e48:	f0 94       	com	r15
    8e4a:	e0 94       	com	r14
    8e4c:	d0 94       	com	r13
    8e4e:	c0 94       	com	r12
    8e50:	c1 1c       	adc	r12, r1
    8e52:	d1 1c       	adc	r13, r1
    8e54:	e1 1c       	adc	r14, r1
    8e56:	f1 1c       	adc	r15, r1
    8e58:	0f c0       	rjmp	.+30     	; 0x8e78 <strtol+0xa2>
    8e5a:	a5 01       	movw	r20, r10
    8e5c:	94 01       	movw	r18, r8
    8e5e:	c7 01       	movw	r24, r14
    8e60:	b6 01       	movw	r22, r12
    8e62:	0e 94 71 e4 	call	0x1c8e2	; 0x1c8e2 <__mulsi3>
    8e66:	6f 01       	movw	r12, r30
    8e68:	ff 0f       	add	r31, r31
    8e6a:	ee 08       	sbc	r14, r14
    8e6c:	ff 08       	sbc	r15, r15
    8e6e:	c6 0e       	add	r12, r22
    8e70:	d7 1e       	adc	r13, r23
    8e72:	e8 1e       	adc	r14, r24
    8e74:	f9 1e       	adc	r15, r25
    8e76:	da cf       	rjmp	.-76     	; 0x8e2c <strtol+0x56>
    8e78:	41 14       	cp	r4, r1
    8e7a:	51 04       	cpc	r5, r1
    8e7c:	19 f0       	breq	.+6      	; 0x8e84 <strtol+0xae>
    8e7e:	f2 01       	movw	r30, r4
    8e80:	30 82       	st	Z, r3
    8e82:	21 82       	std	Z+1, r2	; 0x01
    8e84:	c7 01       	movw	r24, r14
    8e86:	b6 01       	movw	r22, r12
    8e88:	cd b7       	in	r28, 0x3d	; 61
    8e8a:	de b7       	in	r29, 0x3e	; 62
    8e8c:	e2 e1       	ldi	r30, 0x12	; 18
    8e8e:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

00008e92 <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8e92:	4a e0       	ldi	r20, 0x0A	; 10
    8e94:	50 e0       	ldi	r21, 0x00	; 0
    8e96:	60 e0       	ldi	r22, 0x00	; 0
    8e98:	70 e0       	ldi	r23, 0x00	; 0
    8e9a:	9d df       	rcall	.-198    	; 0x8dd6 <strtol>
    return((int)num);
}
    8e9c:	cb 01       	movw	r24, r22
    8e9e:	08 95       	ret

00008ea0 <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8ea0:	4a e0       	ldi	r20, 0x0A	; 10
    8ea2:	50 e0       	ldi	r21, 0x00	; 0
    8ea4:	60 e0       	ldi	r22, 0x00	; 0
    8ea6:	70 e0       	ldi	r23, 0x00	; 0
    8ea8:	96 cf       	rjmp	.-212    	; 0x8dd6 <strtol>
    return(num);
}
    8eaa:	08 95       	ret

00008eac <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8eac:	fc 01       	movw	r30, r24
    8eae:	62 81       	ldd	r22, Z+2	; 0x02
    8eb0:	73 81       	ldd	r23, Z+3	; 0x03
    8eb2:	cb 01       	movw	r24, r22
    8eb4:	a0 e0       	ldi	r26, 0x00	; 0
    8eb6:	b0 e0       	ldi	r27, 0x00	; 0
    8eb8:	ba 2f       	mov	r27, r26
    8eba:	a9 2f       	mov	r26, r25
    8ebc:	98 2f       	mov	r25, r24
    8ebe:	88 27       	eor	r24, r24
    8ec0:	21 81       	ldd	r18, Z+1	; 0x01
    8ec2:	82 2b       	or	r24, r18
    8ec4:	ba 2f       	mov	r27, r26
    8ec6:	a9 2f       	mov	r26, r25
    8ec8:	98 2f       	mov	r25, r24
    8eca:	88 27       	eor	r24, r24
    8ecc:	20 81       	ld	r18, Z
    8ece:	bc 01       	movw	r22, r24
    8ed0:	cd 01       	movw	r24, r26
    8ed2:	62 2b       	or	r22, r18
    8ed4:	08 95       	ret

00008ed6 <st_dword>:
    8ed6:	fc 01       	movw	r30, r24
    8ed8:	40 83       	st	Z, r20
    8eda:	51 83       	std	Z+1, r21	; 0x01
    8edc:	62 83       	std	Z+2, r22	; 0x02
    8ede:	73 83       	std	Z+3, r23	; 0x03
    8ee0:	08 95       	ret

00008ee2 <mem_set>:
    8ee2:	48 0f       	add	r20, r24
    8ee4:	59 1f       	adc	r21, r25
    8ee6:	fc 01       	movw	r30, r24
    8ee8:	61 93       	st	Z+, r22
    8eea:	cf 01       	movw	r24, r30
    8eec:	e4 17       	cp	r30, r20
    8eee:	f5 07       	cpc	r31, r21
    8ef0:	d1 f7       	brne	.-12     	; 0x8ee6 <mem_set+0x4>
    8ef2:	08 95       	ret

00008ef4 <mem_cmp>:
    8ef4:	dc 01       	movw	r26, r24
    8ef6:	fb 01       	movw	r30, r22
    8ef8:	2d 91       	ld	r18, X+
    8efa:	81 91       	ld	r24, Z+
    8efc:	30 e0       	ldi	r19, 0x00	; 0
    8efe:	b9 01       	movw	r22, r18
    8f00:	68 1b       	sub	r22, r24
    8f02:	71 09       	sbc	r23, r1
    8f04:	cb 01       	movw	r24, r22
    8f06:	41 50       	subi	r20, 0x01	; 1
    8f08:	51 09       	sbc	r21, r1
    8f0a:	11 f0       	breq	.+4      	; 0x8f10 <mem_cmp+0x1c>
    8f0c:	00 97       	sbiw	r24, 0x00	; 0
    8f0e:	a1 f3       	breq	.-24     	; 0x8ef8 <mem_cmp+0x4>
    8f10:	08 95       	ret

00008f12 <tchar2uni>:
    8f12:	0f 93       	push	r16
    8f14:	1f 93       	push	r17
    8f16:	fc 01       	movw	r30, r24
    8f18:	a0 81       	ld	r26, Z
    8f1a:	b1 81       	ldd	r27, Z+1	; 0x01
    8f1c:	fd 01       	movw	r30, r26
    8f1e:	31 96       	adiw	r30, 0x01	; 1
    8f20:	4c 91       	ld	r20, X
    8f22:	47 fd       	sbrc	r20, 7
    8f24:	04 c0       	rjmp	.+8      	; 0x8f2e <tchar2uni+0x1c>
    8f26:	50 e0       	ldi	r21, 0x00	; 0
    8f28:	60 e0       	ldi	r22, 0x00	; 0
    8f2a:	70 e0       	ldi	r23, 0x00	; 0
    8f2c:	68 c0       	rjmp	.+208    	; 0x8ffe <tchar2uni+0xec>
    8f2e:	24 2f       	mov	r18, r20
    8f30:	20 7e       	andi	r18, 0xE0	; 224
    8f32:	20 3c       	cpi	r18, 0xC0	; 192
    8f34:	39 f4       	brne	.+14     	; 0x8f44 <tchar2uni+0x32>
    8f36:	4f 71       	andi	r20, 0x1F	; 31
    8f38:	50 e0       	ldi	r21, 0x00	; 0
    8f3a:	60 e0       	ldi	r22, 0x00	; 0
    8f3c:	70 e0       	ldi	r23, 0x00	; 0
    8f3e:	21 e0       	ldi	r18, 0x01	; 1
    8f40:	30 e0       	ldi	r19, 0x00	; 0
    8f42:	16 c0       	rjmp	.+44     	; 0x8f70 <tchar2uni+0x5e>
    8f44:	24 2f       	mov	r18, r20
    8f46:	20 7f       	andi	r18, 0xF0	; 240
    8f48:	20 3e       	cpi	r18, 0xE0	; 224
    8f4a:	39 f4       	brne	.+14     	; 0x8f5a <tchar2uni+0x48>
    8f4c:	4f 70       	andi	r20, 0x0F	; 15
    8f4e:	50 e0       	ldi	r21, 0x00	; 0
    8f50:	60 e0       	ldi	r22, 0x00	; 0
    8f52:	70 e0       	ldi	r23, 0x00	; 0
    8f54:	22 e0       	ldi	r18, 0x02	; 2
    8f56:	30 e0       	ldi	r19, 0x00	; 0
    8f58:	0b c0       	rjmp	.+22     	; 0x8f70 <tchar2uni+0x5e>
    8f5a:	24 2f       	mov	r18, r20
    8f5c:	28 7f       	andi	r18, 0xF8	; 248
    8f5e:	20 3f       	cpi	r18, 0xF0	; 240
    8f60:	09 f0       	breq	.+2      	; 0x8f64 <tchar2uni+0x52>
    8f62:	54 c0       	rjmp	.+168    	; 0x900c <tchar2uni+0xfa>
    8f64:	47 70       	andi	r20, 0x07	; 7
    8f66:	50 e0       	ldi	r21, 0x00	; 0
    8f68:	60 e0       	ldi	r22, 0x00	; 0
    8f6a:	70 e0       	ldi	r23, 0x00	; 0
    8f6c:	23 e0       	ldi	r18, 0x03	; 3
    8f6e:	30 e0       	ldi	r19, 0x00	; 0
    8f70:	31 96       	adiw	r30, 0x01	; 1
    8f72:	df 01       	movw	r26, r30
    8f74:	11 97       	sbiw	r26, 0x01	; 1
    8f76:	ac 91       	ld	r26, X
    8f78:	ba 2f       	mov	r27, r26
    8f7a:	b0 7c       	andi	r27, 0xC0	; 192
    8f7c:	b0 38       	cpi	r27, 0x80	; 128
    8f7e:	09 f0       	breq	.+2      	; 0x8f82 <tchar2uni+0x70>
    8f80:	45 c0       	rjmp	.+138    	; 0x900c <tchar2uni+0xfa>
    8f82:	b6 e0       	ldi	r27, 0x06	; 6
    8f84:	44 0f       	add	r20, r20
    8f86:	55 1f       	adc	r21, r21
    8f88:	66 1f       	adc	r22, r22
    8f8a:	77 1f       	adc	r23, r23
    8f8c:	ba 95       	dec	r27
    8f8e:	d1 f7       	brne	.-12     	; 0x8f84 <tchar2uni+0x72>
    8f90:	af 73       	andi	r26, 0x3F	; 63
    8f92:	4a 2b       	or	r20, r26
    8f94:	21 50       	subi	r18, 0x01	; 1
    8f96:	31 09       	sbc	r19, r1
    8f98:	59 f7       	brne	.-42     	; 0x8f70 <tchar2uni+0x5e>
    8f9a:	8a 01       	movw	r16, r20
    8f9c:	9b 01       	movw	r18, r22
    8f9e:	00 58       	subi	r16, 0x80	; 128
    8fa0:	11 09       	sbc	r17, r1
    8fa2:	21 09       	sbc	r18, r1
    8fa4:	31 09       	sbc	r19, r1
    8fa6:	00 38       	cpi	r16, 0x80	; 128
    8fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    8faa:	20 41       	sbci	r18, 0x10	; 16
    8fac:	31 05       	cpc	r19, r1
    8fae:	70 f5       	brcc	.+92     	; 0x900c <tchar2uni+0xfa>
    8fb0:	8a 01       	movw	r16, r20
    8fb2:	9b 01       	movw	r18, r22
    8fb4:	18 5d       	subi	r17, 0xD8	; 216
    8fb6:	21 09       	sbc	r18, r1
    8fb8:	31 09       	sbc	r19, r1
    8fba:	01 15       	cp	r16, r1
    8fbc:	18 40       	sbci	r17, 0x08	; 8
    8fbe:	21 05       	cpc	r18, r1
    8fc0:	31 05       	cpc	r19, r1
    8fc2:	20 f1       	brcs	.+72     	; 0x900c <tchar2uni+0xfa>
    8fc4:	41 15       	cp	r20, r1
    8fc6:	51 05       	cpc	r21, r1
    8fc8:	21 e0       	ldi	r18, 0x01	; 1
    8fca:	62 07       	cpc	r22, r18
    8fcc:	71 05       	cpc	r23, r1
    8fce:	b8 f0       	brcs	.+46     	; 0x8ffe <tchar2uni+0xec>
    8fd0:	8a 01       	movw	r16, r20
    8fd2:	9b 01       	movw	r18, r22
    8fd4:	21 50       	subi	r18, 0x01	; 1
    8fd6:	31 09       	sbc	r19, r1
    8fd8:	a6 e0       	ldi	r26, 0x06	; 6
    8fda:	00 0f       	add	r16, r16
    8fdc:	11 1f       	adc	r17, r17
    8fde:	22 1f       	adc	r18, r18
    8fe0:	33 1f       	adc	r19, r19
    8fe2:	aa 95       	dec	r26
    8fe4:	d1 f7       	brne	.-12     	; 0x8fda <tchar2uni+0xc8>
    8fe6:	00 27       	eor	r16, r16
    8fe8:	11 27       	eor	r17, r17
    8fea:	33 70       	andi	r19, 0x03	; 3
    8fec:	53 70       	andi	r21, 0x03	; 3
    8fee:	66 27       	eor	r22, r22
    8ff0:	77 27       	eor	r23, r23
    8ff2:	5c 6d       	ori	r21, 0xDC	; 220
    8ff4:	78 6d       	ori	r23, 0xD8	; 216
    8ff6:	40 2b       	or	r20, r16
    8ff8:	51 2b       	or	r21, r17
    8ffa:	62 2b       	or	r22, r18
    8ffc:	73 2b       	or	r23, r19
    8ffe:	dc 01       	movw	r26, r24
    9000:	ed 93       	st	X+, r30
    9002:	fc 93       	st	X, r31
    9004:	34 2f       	mov	r19, r20
    9006:	25 2f       	mov	r18, r21
    9008:	cb 01       	movw	r24, r22
    900a:	04 c0       	rjmp	.+8      	; 0x9014 <tchar2uni+0x102>
    900c:	3f ef       	ldi	r19, 0xFF	; 255
    900e:	2f ef       	ldi	r18, 0xFF	; 255
    9010:	8f ef       	ldi	r24, 0xFF	; 255
    9012:	9f ef       	ldi	r25, 0xFF	; 255
    9014:	63 2f       	mov	r22, r19
    9016:	72 2f       	mov	r23, r18
    9018:	1f 91       	pop	r17
    901a:	0f 91       	pop	r16
    901c:	08 95       	ret

0000901e <clst2sect>:
    901e:	0f 93       	push	r16
    9020:	1f 93       	push	r17
    9022:	fc 01       	movw	r30, r24
    9024:	9a 01       	movw	r18, r20
    9026:	ab 01       	movw	r20, r22
    9028:	22 50       	subi	r18, 0x02	; 2
    902a:	31 09       	sbc	r19, r1
    902c:	41 09       	sbc	r20, r1
    902e:	51 09       	sbc	r21, r1
    9030:	81 8d       	ldd	r24, Z+25	; 0x19
    9032:	92 8d       	ldd	r25, Z+26	; 0x1a
    9034:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9036:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9038:	02 97       	sbiw	r24, 0x02	; 2
    903a:	a1 09       	sbc	r26, r1
    903c:	b1 09       	sbc	r27, r1
    903e:	28 17       	cp	r18, r24
    9040:	39 07       	cpc	r19, r25
    9042:	4a 07       	cpc	r20, r26
    9044:	5b 07       	cpc	r21, r27
    9046:	68 f4       	brcc	.+26     	; 0x9062 <clst2sect+0x44>
    9048:	a1 85       	ldd	r26, Z+9	; 0x09
    904a:	b2 85       	ldd	r27, Z+10	; 0x0a
    904c:	0e 94 15 e5 	call	0x1ca2a	; 0x1ca2a <__muluhisi3>
    9050:	05 a5       	ldd	r16, Z+45	; 0x2d
    9052:	16 a5       	ldd	r17, Z+46	; 0x2e
    9054:	27 a5       	ldd	r18, Z+47	; 0x2f
    9056:	30 a9       	ldd	r19, Z+48	; 0x30
    9058:	60 0f       	add	r22, r16
    905a:	71 1f       	adc	r23, r17
    905c:	82 1f       	adc	r24, r18
    905e:	93 1f       	adc	r25, r19
    9060:	03 c0       	rjmp	.+6      	; 0x9068 <clst2sect+0x4a>
    9062:	60 e0       	ldi	r22, 0x00	; 0
    9064:	70 e0       	ldi	r23, 0x00	; 0
    9066:	cb 01       	movw	r24, r22
    9068:	1f 91       	pop	r17
    906a:	0f 91       	pop	r16
    906c:	08 95       	ret

0000906e <clmt_clust>:
    906e:	cf 93       	push	r28
    9070:	df 93       	push	r29
    9072:	fc 01       	movw	r30, r24
    9074:	c2 a1       	ldd	r28, Z+34	; 0x22
    9076:	d3 a1       	ldd	r29, Z+35	; 0x23
    9078:	24 96       	adiw	r28, 0x04	; 4
    907a:	cb 01       	movw	r24, r22
    907c:	ba 01       	movw	r22, r20
    907e:	29 e0       	ldi	r18, 0x09	; 9
    9080:	96 95       	lsr	r25
    9082:	87 95       	ror	r24
    9084:	77 95       	ror	r23
    9086:	67 95       	ror	r22
    9088:	2a 95       	dec	r18
    908a:	d1 f7       	brne	.-12     	; 0x9080 <clmt_clust+0x12>
    908c:	01 90       	ld	r0, Z+
    908e:	f0 81       	ld	r31, Z
    9090:	e0 2d       	mov	r30, r0
    9092:	21 85       	ldd	r18, Z+9	; 0x09
    9094:	32 85       	ldd	r19, Z+10	; 0x0a
    9096:	40 e0       	ldi	r20, 0x00	; 0
    9098:	50 e0       	ldi	r21, 0x00	; 0
    909a:	0e 94 b3 e4 	call	0x1c966	; 0x1c966 <__udivmodsi4>
    909e:	88 81       	ld	r24, Y
    90a0:	99 81       	ldd	r25, Y+1	; 0x01
    90a2:	aa 81       	ldd	r26, Y+2	; 0x02
    90a4:	bb 81       	ldd	r27, Y+3	; 0x03
    90a6:	00 97       	sbiw	r24, 0x00	; 0
    90a8:	a1 05       	cpc	r26, r1
    90aa:	b1 05       	cpc	r27, r1
    90ac:	b1 f0       	breq	.+44     	; 0x90da <clmt_clust+0x6c>
    90ae:	28 17       	cp	r18, r24
    90b0:	39 07       	cpc	r19, r25
    90b2:	4a 07       	cpc	r20, r26
    90b4:	5b 07       	cpc	r21, r27
    90b6:	30 f0       	brcs	.+12     	; 0x90c4 <clmt_clust+0x56>
    90b8:	28 1b       	sub	r18, r24
    90ba:	39 0b       	sbc	r19, r25
    90bc:	4a 0b       	sbc	r20, r26
    90be:	5b 0b       	sbc	r21, r27
    90c0:	28 96       	adiw	r28, 0x08	; 8
    90c2:	ed cf       	rjmp	.-38     	; 0x909e <clmt_clust+0x30>
    90c4:	8c 81       	ldd	r24, Y+4	; 0x04
    90c6:	9d 81       	ldd	r25, Y+5	; 0x05
    90c8:	ae 81       	ldd	r26, Y+6	; 0x06
    90ca:	bf 81       	ldd	r27, Y+7	; 0x07
    90cc:	bc 01       	movw	r22, r24
    90ce:	cd 01       	movw	r24, r26
    90d0:	62 0f       	add	r22, r18
    90d2:	73 1f       	adc	r23, r19
    90d4:	84 1f       	adc	r24, r20
    90d6:	95 1f       	adc	r25, r21
    90d8:	03 c0       	rjmp	.+6      	; 0x90e0 <clmt_clust+0x72>
    90da:	60 e0       	ldi	r22, 0x00	; 0
    90dc:	70 e0       	ldi	r23, 0x00	; 0
    90de:	cb 01       	movw	r24, r22
    90e0:	df 91       	pop	r29
    90e2:	cf 91       	pop	r28
    90e4:	08 95       	ret

000090e6 <sum_sfn>:
    90e6:	fc 01       	movw	r30, r24
    90e8:	9c 01       	movw	r18, r24
    90ea:	25 5f       	subi	r18, 0xF5	; 245
    90ec:	3f 4f       	sbci	r19, 0xFF	; 255
    90ee:	80 e0       	ldi	r24, 0x00	; 0
    90f0:	98 2f       	mov	r25, r24
    90f2:	90 fb       	bst	r25, 0
    90f4:	97 95       	ror	r25
    90f6:	97 f9       	bld	r25, 7
    90f8:	81 91       	ld	r24, Z+
    90fa:	89 0f       	add	r24, r25
    90fc:	e2 17       	cp	r30, r18
    90fe:	f3 07       	cpc	r31, r19
    9100:	b9 f7       	brne	.-18     	; 0x90f0 <sum_sfn+0xa>
    9102:	08 95       	ret

00009104 <get_ldnumber>:
    9104:	cf 93       	push	r28
    9106:	df 93       	push	r29
    9108:	dc 01       	movw	r26, r24
    910a:	ed 91       	ld	r30, X+
    910c:	fc 91       	ld	r31, X
    910e:	11 97       	sbiw	r26, 0x01	; 1
    9110:	30 97       	sbiw	r30, 0x00	; 0
    9112:	f9 f0       	breq	.+62     	; 0x9152 <get_ldnumber+0x4e>
    9114:	9f 01       	movw	r18, r30
    9116:	2f 5f       	subi	r18, 0xFF	; 255
    9118:	3f 4f       	sbci	r19, 0xFF	; 255
    911a:	e9 01       	movw	r28, r18
    911c:	21 97       	sbiw	r28, 0x01	; 1
    911e:	88 81       	ld	r24, Y
    9120:	80 32       	cpi	r24, 0x20	; 32
    9122:	18 f0       	brcs	.+6      	; 0x912a <get_ldnumber+0x26>
    9124:	8a 33       	cpi	r24, 0x3A	; 58
    9126:	b9 f7       	brne	.-18     	; 0x9116 <get_ldnumber+0x12>
    9128:	04 c0       	rjmp	.+8      	; 0x9132 <get_ldnumber+0x2e>
    912a:	80 91 0e 18 	lds	r24, 0x180E	; 0x80180e <CurrVol>
    912e:	90 e0       	ldi	r25, 0x00	; 0
    9130:	12 c0       	rjmp	.+36     	; 0x9156 <get_ldnumber+0x52>
    9132:	90 81       	ld	r25, Z
    9134:	80 ed       	ldi	r24, 0xD0	; 208
    9136:	89 0f       	add	r24, r25
    9138:	8a 30       	cpi	r24, 0x0A	; 10
    913a:	58 f4       	brcc	.+22     	; 0x9152 <get_ldnumber+0x4e>
    913c:	32 96       	adiw	r30, 0x02	; 2
    913e:	2e 17       	cp	r18, r30
    9140:	3f 07       	cpc	r19, r31
    9142:	39 f4       	brne	.+14     	; 0x9152 <get_ldnumber+0x4e>
    9144:	90 33       	cpi	r25, 0x30	; 48
    9146:	29 f4       	brne	.+10     	; 0x9152 <get_ldnumber+0x4e>
    9148:	2d 93       	st	X+, r18
    914a:	3c 93       	st	X, r19
    914c:	80 e0       	ldi	r24, 0x00	; 0
    914e:	90 e0       	ldi	r25, 0x00	; 0
    9150:	02 c0       	rjmp	.+4      	; 0x9156 <get_ldnumber+0x52>
    9152:	8f ef       	ldi	r24, 0xFF	; 255
    9154:	9f ef       	ldi	r25, 0xFF	; 255
    9156:	df 91       	pop	r29
    9158:	cf 91       	pop	r28
    915a:	08 95       	ret

0000915c <validate>:
    915c:	0f 93       	push	r16
    915e:	1f 93       	push	r17
    9160:	cf 93       	push	r28
    9162:	df 93       	push	r29
    9164:	ec 01       	movw	r28, r24
    9166:	8b 01       	movw	r16, r22
    9168:	89 2b       	or	r24, r25
    916a:	f9 f0       	breq	.+62     	; 0x91aa <validate+0x4e>
    916c:	e8 81       	ld	r30, Y
    916e:	f9 81       	ldd	r31, Y+1	; 0x01
    9170:	30 97       	sbiw	r30, 0x00	; 0
    9172:	d9 f0       	breq	.+54     	; 0x91aa <validate+0x4e>
    9174:	80 81       	ld	r24, Z
    9176:	88 23       	and	r24, r24
    9178:	c1 f0       	breq	.+48     	; 0x91aa <validate+0x4e>
    917a:	2a 81       	ldd	r18, Y+2	; 0x02
    917c:	3b 81       	ldd	r19, Y+3	; 0x03
    917e:	85 81       	ldd	r24, Z+5	; 0x05
    9180:	96 81       	ldd	r25, Z+6	; 0x06
    9182:	28 17       	cp	r18, r24
    9184:	39 07       	cpc	r19, r25
    9186:	89 f4       	brne	.+34     	; 0x91aa <validate+0x4e>
    9188:	81 81       	ldd	r24, Z+1	; 0x01
    918a:	0e 94 c9 6a 	call	0xd592	; 0xd592 <disk_status>
    918e:	80 fd       	sbrc	r24, 0
    9190:	0c c0       	rjmp	.+24     	; 0x91aa <validate+0x4e>
    9192:	28 81       	ld	r18, Y
    9194:	39 81       	ldd	r19, Y+1	; 0x01
    9196:	80 e0       	ldi	r24, 0x00	; 0
    9198:	90 e0       	ldi	r25, 0x00	; 0
    919a:	f8 01       	movw	r30, r16
    919c:	31 83       	std	Z+1, r19	; 0x01
    919e:	20 83       	st	Z, r18
    91a0:	df 91       	pop	r29
    91a2:	cf 91       	pop	r28
    91a4:	1f 91       	pop	r17
    91a6:	0f 91       	pop	r16
    91a8:	08 95       	ret
    91aa:	89 e0       	ldi	r24, 0x09	; 9
    91ac:	90 e0       	ldi	r25, 0x00	; 0
    91ae:	20 e0       	ldi	r18, 0x00	; 0
    91b0:	30 e0       	ldi	r19, 0x00	; 0
    91b2:	f3 cf       	rjmp	.-26     	; 0x919a <validate+0x3e>

000091b4 <mem_cpy.part.0>:
    91b4:	fb 01       	movw	r30, r22
    91b6:	48 0f       	add	r20, r24
    91b8:	59 1f       	adc	r21, r25
    91ba:	21 91       	ld	r18, Z+
    91bc:	dc 01       	movw	r26, r24
    91be:	2d 93       	st	X+, r18
    91c0:	cd 01       	movw	r24, r26
    91c2:	a4 17       	cp	r26, r20
    91c4:	b5 07       	cpc	r27, r21
    91c6:	c9 f7       	brne	.-14     	; 0x91ba <mem_cpy.part.0+0x6>
    91c8:	08 95       	ret

000091ca <put_utf>:
    91ca:	0f 93       	push	r16
    91cc:	1f 93       	push	r17
    91ce:	fa 01       	movw	r30, r20
    91d0:	60 38       	cpi	r22, 0x80	; 128
    91d2:	71 05       	cpc	r23, r1
    91d4:	81 05       	cpc	r24, r1
    91d6:	91 05       	cpc	r25, r1
    91d8:	30 f4       	brcc	.+12     	; 0x91e6 <put_utf+0x1c>
    91da:	23 2b       	or	r18, r19
    91dc:	09 f4       	brne	.+2      	; 0x91e0 <put_utf+0x16>
    91de:	9e c0       	rjmp	.+316    	; 0x931c <put_utf+0x152>
    91e0:	60 83       	st	Z, r22
    91e2:	81 e0       	ldi	r24, 0x01	; 1
    91e4:	9c c0       	rjmp	.+312    	; 0x931e <put_utf+0x154>
    91e6:	61 15       	cp	r22, r1
    91e8:	48 e0       	ldi	r20, 0x08	; 8
    91ea:	74 07       	cpc	r23, r20
    91ec:	81 05       	cpc	r24, r1
    91ee:	91 05       	cpc	r25, r1
    91f0:	a0 f4       	brcc	.+40     	; 0x921a <put_utf+0x50>
    91f2:	22 30       	cpi	r18, 0x02	; 2
    91f4:	31 05       	cpc	r19, r1
    91f6:	08 f4       	brcc	.+2      	; 0x91fa <put_utf+0x30>
    91f8:	91 c0       	rjmp	.+290    	; 0x931c <put_utf+0x152>
    91fa:	8b 01       	movw	r16, r22
    91fc:	9c 01       	movw	r18, r24
    91fe:	76 e0       	ldi	r23, 0x06	; 6
    9200:	36 95       	lsr	r19
    9202:	27 95       	ror	r18
    9204:	17 95       	ror	r17
    9206:	07 95       	ror	r16
    9208:	7a 95       	dec	r23
    920a:	d1 f7       	brne	.-12     	; 0x9200 <put_utf+0x36>
    920c:	00 6c       	ori	r16, 0xC0	; 192
    920e:	00 83       	st	Z, r16
    9210:	6f 73       	andi	r22, 0x3F	; 63
    9212:	60 68       	ori	r22, 0x80	; 128
    9214:	61 83       	std	Z+1, r22	; 0x01
    9216:	82 e0       	ldi	r24, 0x02	; 2
    9218:	82 c0       	rjmp	.+260    	; 0x931e <put_utf+0x154>
    921a:	61 15       	cp	r22, r1
    921c:	71 05       	cpc	r23, r1
    921e:	41 e0       	ldi	r20, 0x01	; 1
    9220:	84 07       	cpc	r24, r20
    9222:	91 05       	cpc	r25, r1
    9224:	58 f5       	brcc	.+86     	; 0x927c <put_utf+0xb2>
    9226:	23 30       	cpi	r18, 0x03	; 3
    9228:	31 05       	cpc	r19, r1
    922a:	08 f4       	brcc	.+2      	; 0x922e <put_utf+0x64>
    922c:	77 c0       	rjmp	.+238    	; 0x931c <put_utf+0x152>
    922e:	8b 01       	movw	r16, r22
    9230:	9c 01       	movw	r18, r24
    9232:	18 5d       	subi	r17, 0xD8	; 216
    9234:	21 09       	sbc	r18, r1
    9236:	31 09       	sbc	r19, r1
    9238:	01 15       	cp	r16, r1
    923a:	18 40       	sbci	r17, 0x08	; 8
    923c:	21 05       	cpc	r18, r1
    923e:	31 05       	cpc	r19, r1
    9240:	08 f4       	brcc	.+2      	; 0x9244 <put_utf+0x7a>
    9242:	6c c0       	rjmp	.+216    	; 0x931c <put_utf+0x152>
    9244:	8b 01       	movw	r16, r22
    9246:	9c 01       	movw	r18, r24
    9248:	4c e0       	ldi	r20, 0x0C	; 12
    924a:	36 95       	lsr	r19
    924c:	27 95       	ror	r18
    924e:	17 95       	ror	r17
    9250:	07 95       	ror	r16
    9252:	4a 95       	dec	r20
    9254:	d1 f7       	brne	.-12     	; 0x924a <put_utf+0x80>
    9256:	00 6e       	ori	r16, 0xE0	; 224
    9258:	00 83       	st	Z, r16
    925a:	8b 01       	movw	r16, r22
    925c:	9c 01       	movw	r18, r24
    925e:	56 e0       	ldi	r21, 0x06	; 6
    9260:	36 95       	lsr	r19
    9262:	27 95       	ror	r18
    9264:	17 95       	ror	r17
    9266:	07 95       	ror	r16
    9268:	5a 95       	dec	r21
    926a:	d1 f7       	brne	.-12     	; 0x9260 <put_utf+0x96>
    926c:	0f 73       	andi	r16, 0x3F	; 63
    926e:	00 68       	ori	r16, 0x80	; 128
    9270:	01 83       	std	Z+1, r16	; 0x01
    9272:	6f 73       	andi	r22, 0x3F	; 63
    9274:	60 68       	ori	r22, 0x80	; 128
    9276:	62 83       	std	Z+2, r22	; 0x02
    9278:	83 e0       	ldi	r24, 0x03	; 3
    927a:	51 c0       	rjmp	.+162    	; 0x931e <put_utf+0x154>
    927c:	24 30       	cpi	r18, 0x04	; 4
    927e:	31 05       	cpc	r19, r1
    9280:	08 f4       	brcc	.+2      	; 0x9284 <put_utf+0xba>
    9282:	4c c0       	rjmp	.+152    	; 0x931c <put_utf+0x152>
    9284:	8b 01       	movw	r16, r22
    9286:	9c 01       	movw	r18, r24
    9288:	00 27       	eor	r16, r16
    928a:	11 27       	eor	r17, r17
    928c:	38 5d       	subi	r19, 0xD8	; 216
    928e:	b6 e0       	ldi	r27, 0x06	; 6
    9290:	36 95       	lsr	r19
    9292:	27 95       	ror	r18
    9294:	17 95       	ror	r17
    9296:	07 95       	ror	r16
    9298:	ba 95       	dec	r27
    929a:	d1 f7       	brne	.-12     	; 0x9290 <put_utf+0xc6>
    929c:	01 15       	cp	r16, r1
    929e:	11 05       	cpc	r17, r1
    92a0:	40 e1       	ldi	r20, 0x10	; 16
    92a2:	24 07       	cpc	r18, r20
    92a4:	31 05       	cpc	r19, r1
    92a6:	d0 f5       	brcc	.+116    	; 0x931c <put_utf+0x152>
    92a8:	dc 01       	movw	r26, r24
    92aa:	cb 01       	movw	r24, r22
    92ac:	aa 27       	eor	r26, r26
    92ae:	bb 27       	eor	r27, r27
    92b0:	9c 5d       	subi	r25, 0xDC	; 220
    92b2:	a1 09       	sbc	r26, r1
    92b4:	b1 09       	sbc	r27, r1
    92b6:	81 15       	cp	r24, r1
    92b8:	44 e0       	ldi	r20, 0x04	; 4
    92ba:	94 07       	cpc	r25, r20
    92bc:	a1 05       	cpc	r26, r1
    92be:	b1 05       	cpc	r27, r1
    92c0:	68 f5       	brcc	.+90     	; 0x931c <put_utf+0x152>
    92c2:	80 2b       	or	r24, r16
    92c4:	91 2b       	or	r25, r17
    92c6:	a2 2b       	or	r26, r18
    92c8:	b3 2b       	or	r27, r19
    92ca:	11 96       	adiw	r26, 0x01	; 1
    92cc:	ac 01       	movw	r20, r24
    92ce:	bd 01       	movw	r22, r26
    92d0:	22 e1       	ldi	r18, 0x12	; 18
    92d2:	76 95       	lsr	r23
    92d4:	67 95       	ror	r22
    92d6:	57 95       	ror	r21
    92d8:	47 95       	ror	r20
    92da:	2a 95       	dec	r18
    92dc:	d1 f7       	brne	.-12     	; 0x92d2 <put_utf+0x108>
    92de:	40 6f       	ori	r20, 0xF0	; 240
    92e0:	40 83       	st	Z, r20
    92e2:	ac 01       	movw	r20, r24
    92e4:	bd 01       	movw	r22, r26
    92e6:	3c e0       	ldi	r19, 0x0C	; 12
    92e8:	76 95       	lsr	r23
    92ea:	67 95       	ror	r22
    92ec:	57 95       	ror	r21
    92ee:	47 95       	ror	r20
    92f0:	3a 95       	dec	r19
    92f2:	d1 f7       	brne	.-12     	; 0x92e8 <put_utf+0x11e>
    92f4:	4f 73       	andi	r20, 0x3F	; 63
    92f6:	40 68       	ori	r20, 0x80	; 128
    92f8:	41 83       	std	Z+1, r20	; 0x01
    92fa:	ac 01       	movw	r20, r24
    92fc:	bd 01       	movw	r22, r26
    92fe:	a6 e0       	ldi	r26, 0x06	; 6
    9300:	76 95       	lsr	r23
    9302:	67 95       	ror	r22
    9304:	57 95       	ror	r21
    9306:	47 95       	ror	r20
    9308:	aa 95       	dec	r26
    930a:	d1 f7       	brne	.-12     	; 0x9300 <put_utf+0x136>
    930c:	4f 73       	andi	r20, 0x3F	; 63
    930e:	40 68       	ori	r20, 0x80	; 128
    9310:	42 83       	std	Z+2, r20	; 0x02
    9312:	8f 73       	andi	r24, 0x3F	; 63
    9314:	80 68       	ori	r24, 0x80	; 128
    9316:	83 83       	std	Z+3, r24	; 0x03
    9318:	84 e0       	ldi	r24, 0x04	; 4
    931a:	01 c0       	rjmp	.+2      	; 0x931e <put_utf+0x154>
    931c:	80 e0       	ldi	r24, 0x00	; 0
    931e:	1f 91       	pop	r17
    9320:	0f 91       	pop	r16
    9322:	08 95       	ret

00009324 <get_fileinfo>:
    9324:	a0 e0       	ldi	r26, 0x00	; 0
    9326:	b0 e0       	ldi	r27, 0x00	; 0
    9328:	e8 e9       	ldi	r30, 0x98	; 152
    932a:	f9 e4       	ldi	r31, 0x49	; 73
    932c:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    9330:	dc 01       	movw	r26, r24
    9332:	6d 90       	ld	r6, X+
    9334:	7c 90       	ld	r7, X
    9336:	11 97       	sbiw	r26, 0x01	; 1
    9338:	fb 01       	movw	r30, r22
    933a:	16 8a       	std	Z+22, r1	; 0x16
    933c:	56 96       	adiw	r26, 0x16	; 22
    933e:	0d 91       	ld	r16, X+
    9340:	1d 91       	ld	r17, X+
    9342:	2d 91       	ld	r18, X+
    9344:	3c 91       	ld	r19, X
    9346:	59 97       	sbiw	r26, 0x19	; 25
    9348:	01 15       	cp	r16, r1
    934a:	11 05       	cpc	r17, r1
    934c:	21 05       	cpc	r18, r1
    934e:	31 05       	cpc	r19, r1
    9350:	09 f4       	brne	.+2      	; 0x9354 <get_fileinfo+0x30>
    9352:	fc c0       	rjmp	.+504    	; 0x954c <get_fileinfo+0x228>
    9354:	eb 01       	movw	r28, r22
    9356:	8c 01       	movw	r16, r24
    9358:	fc 01       	movw	r30, r24
    935a:	80 a5       	ldd	r24, Z+40	; 0x28
    935c:	91 a5       	ldd	r25, Z+41	; 0x29
    935e:	a2 a5       	ldd	r26, Z+42	; 0x2a
    9360:	b3 a5       	ldd	r27, Z+43	; 0x2b
    9362:	8f 3f       	cpi	r24, 0xFF	; 255
    9364:	9f 4f       	sbci	r25, 0xFF	; 255
    9366:	af 4f       	sbci	r26, 0xFF	; 255
    9368:	bf 4f       	sbci	r27, 0xFF	; 255
    936a:	09 f4       	brne	.+2      	; 0x936e <get_fileinfo+0x4a>
    936c:	49 c0       	rjmp	.+146    	; 0x9400 <get_fileinfo+0xdc>
    936e:	a1 2c       	mov	r10, r1
    9370:	b1 2c       	mov	r11, r1
    9372:	c1 2c       	mov	r12, r1
    9374:	d1 2c       	mov	r13, r1
    9376:	e1 2c       	mov	r14, r1
    9378:	f1 2c       	mov	r15, r1
    937a:	88 24       	eor	r8, r8
    937c:	8a 94       	dec	r8
    937e:	91 2c       	mov	r9, r1
    9380:	d3 01       	movw	r26, r6
    9382:	1b 96       	adiw	r26, 0x0b	; 11
    9384:	ed 91       	ld	r30, X+
    9386:	fc 91       	ld	r31, X
    9388:	1c 97       	sbiw	r26, 0x0c	; 12
    938a:	ea 0d       	add	r30, r10
    938c:	fb 1d       	adc	r31, r11
    938e:	80 81       	ld	r24, Z
    9390:	91 81       	ldd	r25, Z+1	; 0x01
    9392:	00 97       	sbiw	r24, 0x00	; 0
    9394:	69 f1       	breq	.+90     	; 0x93f0 <get_fileinfo+0xcc>
    9396:	c1 14       	cp	r12, r1
    9398:	d1 04       	cpc	r13, r1
    939a:	29 f4       	brne	.+10     	; 0x93a6 <get_fileinfo+0x82>
    939c:	9c 01       	movw	r18, r24
    939e:	38 5d       	subi	r19, 0xD8	; 216
    93a0:	21 15       	cp	r18, r1
    93a2:	38 40       	sbci	r19, 0x08	; 8
    93a4:	f0 f0       	brcs	.+60     	; 0x93e2 <get_fileinfo+0xbe>
    93a6:	a7 01       	movw	r20, r14
    93a8:	4a 5e       	subi	r20, 0xEA	; 234
    93aa:	5f 4f       	sbci	r21, 0xFF	; 255
    93ac:	4c 0f       	add	r20, r28
    93ae:	5d 1f       	adc	r21, r29
    93b0:	16 01       	movw	r2, r12
    93b2:	41 2c       	mov	r4, r1
    93b4:	51 2c       	mov	r5, r1
    93b6:	21 01       	movw	r4, r2
    93b8:	33 24       	eor	r3, r3
    93ba:	22 24       	eor	r2, r2
    93bc:	a0 e0       	ldi	r26, 0x00	; 0
    93be:	b0 e0       	ldi	r27, 0x00	; 0
    93c0:	bc 01       	movw	r22, r24
    93c2:	cd 01       	movw	r24, r26
    93c4:	62 29       	or	r22, r2
    93c6:	73 29       	or	r23, r3
    93c8:	84 29       	or	r24, r4
    93ca:	95 29       	or	r25, r5
    93cc:	94 01       	movw	r18, r8
    93ce:	2e 19       	sub	r18, r14
    93d0:	3f 09       	sbc	r19, r15
    93d2:	fb de       	rcall	.-522    	; 0x91ca <put_utf>
    93d4:	90 e0       	ldi	r25, 0x00	; 0
    93d6:	00 97       	sbiw	r24, 0x00	; 0
    93d8:	49 f0       	breq	.+18     	; 0x93ec <get_fileinfo+0xc8>
    93da:	e8 0e       	add	r14, r24
    93dc:	f9 1e       	adc	r15, r25
    93de:	80 e0       	ldi	r24, 0x00	; 0
    93e0:	90 e0       	ldi	r25, 0x00	; 0
    93e2:	a2 e0       	ldi	r26, 0x02	; 2
    93e4:	aa 0e       	add	r10, r26
    93e6:	b1 1c       	adc	r11, r1
    93e8:	6c 01       	movw	r12, r24
    93ea:	ca cf       	rjmp	.-108    	; 0x9380 <get_fileinfo+0x5c>
    93ec:	e1 2c       	mov	r14, r1
    93ee:	f1 2c       	mov	r15, r1
    93f0:	cd 28       	or	r12, r13
    93f2:	11 f0       	breq	.+4      	; 0x93f8 <get_fileinfo+0xd4>
    93f4:	e1 2c       	mov	r14, r1
    93f6:	f1 2c       	mov	r15, r1
    93f8:	fe 01       	movw	r30, r28
    93fa:	ee 0d       	add	r30, r14
    93fc:	ff 1d       	adc	r31, r15
    93fe:	16 8a       	std	Z+22, r1	; 0x16
    9400:	e1 2c       	mov	r14, r1
    9402:	f1 2c       	mov	r15, r1
    9404:	80 e0       	ldi	r24, 0x00	; 0
    9406:	90 e0       	ldi	r25, 0x00	; 0
    9408:	2c e0       	ldi	r18, 0x0C	; 12
    940a:	a2 2e       	mov	r10, r18
    940c:	b1 2c       	mov	r11, r1
    940e:	3e e2       	ldi	r19, 0x2E	; 46
    9410:	93 2e       	mov	r9, r19
    9412:	6c 01       	movw	r12, r24
    9414:	bf ef       	ldi	r27, 0xFF	; 255
    9416:	cb 1a       	sub	r12, r27
    9418:	db 0a       	sbc	r13, r27
    941a:	f8 01       	movw	r30, r16
    941c:	22 8d       	ldd	r18, Z+26	; 0x1a
    941e:	33 8d       	ldd	r19, Z+27	; 0x1b
    9420:	f9 01       	movw	r30, r18
    9422:	e8 0f       	add	r30, r24
    9424:	f9 1f       	adc	r31, r25
    9426:	80 81       	ld	r24, Z
    9428:	90 e0       	ldi	r25, 0x00	; 0
    942a:	80 32       	cpi	r24, 0x20	; 32
    942c:	91 05       	cpc	r25, r1
    942e:	71 f1       	breq	.+92     	; 0x948c <get_fileinfo+0x168>
    9430:	85 30       	cpi	r24, 0x05	; 5
    9432:	91 05       	cpc	r25, r1
    9434:	11 f4       	brne	.+4      	; 0x943a <get_fileinfo+0x116>
    9436:	85 ee       	ldi	r24, 0xE5	; 229
    9438:	90 e0       	ldi	r25, 0x00	; 0
    943a:	f9 e0       	ldi	r31, 0x09	; 9
    943c:	cf 16       	cp	r12, r31
    943e:	d1 04       	cpc	r13, r1
    9440:	59 f4       	brne	.+22     	; 0x9458 <get_fileinfo+0x134>
    9442:	2c e0       	ldi	r18, 0x0C	; 12
    9444:	e2 16       	cp	r14, r18
    9446:	f1 04       	cpc	r15, r1
    9448:	38 f4       	brcc	.+14     	; 0x9458 <get_fileinfo+0x134>
    944a:	fe 01       	movw	r30, r28
    944c:	ee 0d       	add	r30, r14
    944e:	ff 1d       	adc	r31, r15
    9450:	91 86       	std	Z+9, r9	; 0x09
    9452:	d7 01       	movw	r26, r14
    9454:	11 96       	adiw	r26, 0x01	; 1
    9456:	7d 01       	movw	r14, r26
    9458:	65 eb       	ldi	r22, 0xB5	; 181
    945a:	71 e0       	ldi	r23, 0x01	; 1
    945c:	0e 94 52 6a 	call	0xd4a4	; 0xd4a4 <ff_oem2uni>
    9460:	00 97       	sbiw	r24, 0x00	; 0
    9462:	19 f4       	brne	.+6      	; 0x946a <get_fileinfo+0x146>
    9464:	e1 2c       	mov	r14, r1
    9466:	f1 2c       	mov	r15, r1
    9468:	16 c0       	rjmp	.+44     	; 0x9496 <get_fileinfo+0x172>
    946a:	a7 01       	movw	r20, r14
    946c:	47 5f       	subi	r20, 0xF7	; 247
    946e:	5f 4f       	sbci	r21, 0xFF	; 255
    9470:	4c 0f       	add	r20, r28
    9472:	5d 1f       	adc	r21, r29
    9474:	bc 01       	movw	r22, r24
    9476:	80 e0       	ldi	r24, 0x00	; 0
    9478:	90 e0       	ldi	r25, 0x00	; 0
    947a:	95 01       	movw	r18, r10
    947c:	2e 19       	sub	r18, r14
    947e:	3f 09       	sbc	r19, r15
    9480:	a4 de       	rcall	.-696    	; 0x91ca <put_utf>
    9482:	90 e0       	ldi	r25, 0x00	; 0
    9484:	00 97       	sbiw	r24, 0x00	; 0
    9486:	71 f3       	breq	.-36     	; 0x9464 <get_fileinfo+0x140>
    9488:	e8 0e       	add	r14, r24
    948a:	f9 1e       	adc	r15, r25
    948c:	c6 01       	movw	r24, r12
    948e:	8b 30       	cpi	r24, 0x0B	; 11
    9490:	91 05       	cpc	r25, r1
    9492:	09 f0       	breq	.+2      	; 0x9496 <get_fileinfo+0x172>
    9494:	be cf       	rjmp	.-132    	; 0x9412 <get_fileinfo+0xee>
    9496:	fe 01       	movw	r30, r28
    9498:	ee 0d       	add	r30, r14
    949a:	ff 1d       	adc	r31, r15
    949c:	11 86       	std	Z+9, r1	; 0x09
    949e:	8e 89       	ldd	r24, Y+22	; 0x16
    94a0:	81 11       	cpse	r24, r1
    94a2:	39 c0       	rjmp	.+114    	; 0x9516 <get_fileinfo+0x1f2>
    94a4:	e1 14       	cp	r14, r1
    94a6:	f1 04       	cpc	r15, r1
    94a8:	31 f0       	breq	.+12     	; 0x94b6 <get_fileinfo+0x192>
    94aa:	fe 01       	movw	r30, r28
    94ac:	39 96       	adiw	r30, 0x09	; 9
    94ae:	58 e0       	ldi	r21, 0x08	; 8
    94b0:	20 e0       	ldi	r18, 0x00	; 0
    94b2:	30 e0       	ldi	r19, 0x00	; 0
    94b4:	13 c0       	rjmp	.+38     	; 0x94dc <get_fileinfo+0x1b8>
    94b6:	8f e3       	ldi	r24, 0x3F	; 63
    94b8:	8e 8b       	std	Y+22, r24	; 0x16
    94ba:	21 e0       	ldi	r18, 0x01	; 1
    94bc:	30 e0       	ldi	r19, 0x00	; 0
    94be:	1e c0       	rjmp	.+60     	; 0x94fc <get_fileinfo+0x1d8>
    94c0:	90 e0       	ldi	r25, 0x00	; 0
    94c2:	8e 32       	cpi	r24, 0x2E	; 46
    94c4:	91 05       	cpc	r25, r1
    94c6:	09 f4       	brne	.+2      	; 0x94ca <get_fileinfo+0x1a6>
    94c8:	50 e1       	ldi	r21, 0x10	; 16
    94ca:	bc 01       	movw	r22, r24
    94cc:	61 54       	subi	r22, 0x41	; 65
    94ce:	71 09       	sbc	r23, r1
    94d0:	6a 31       	cpi	r22, 0x1A	; 26
    94d2:	71 05       	cpc	r23, r1
    94d4:	38 f0       	brcs	.+14     	; 0x94e4 <get_fileinfo+0x1c0>
    94d6:	84 87       	std	Z+12, r24	; 0x0c
    94d8:	2f 5f       	subi	r18, 0xFF	; 255
    94da:	3f 4f       	sbci	r19, 0xFF	; 255
    94dc:	81 91       	ld	r24, Z+
    94de:	81 11       	cpse	r24, r1
    94e0:	ef cf       	rjmp	.-34     	; 0x94c0 <get_fileinfo+0x19c>
    94e2:	0c c0       	rjmp	.+24     	; 0x94fc <get_fileinfo+0x1d8>
    94e4:	d8 01       	movw	r26, r16
    94e6:	5a 96       	adiw	r26, 0x1a	; 26
    94e8:	6d 91       	ld	r22, X+
    94ea:	7c 91       	ld	r23, X
    94ec:	5b 97       	sbiw	r26, 0x1b	; 27
    94ee:	db 01       	movw	r26, r22
    94f0:	1c 96       	adiw	r26, 0x0c	; 12
    94f2:	4c 91       	ld	r20, X
    94f4:	45 23       	and	r20, r21
    94f6:	79 f3       	breq	.-34     	; 0x94d6 <get_fileinfo+0x1b2>
    94f8:	80 96       	adiw	r24, 0x20	; 32
    94fa:	ed cf       	rjmp	.-38     	; 0x94d6 <get_fileinfo+0x1b2>
    94fc:	fe 01       	movw	r30, r28
    94fe:	e2 0f       	add	r30, r18
    9500:	f3 1f       	adc	r31, r19
    9502:	16 8a       	std	Z+22, r1	; 0x16
    9504:	d8 01       	movw	r26, r16
    9506:	5a 96       	adiw	r26, 0x1a	; 26
    9508:	ed 91       	ld	r30, X+
    950a:	fc 91       	ld	r31, X
    950c:	5b 97       	sbiw	r26, 0x1b	; 27
    950e:	84 85       	ldd	r24, Z+12	; 0x0c
    9510:	81 11       	cpse	r24, r1
    9512:	01 c0       	rjmp	.+2      	; 0x9516 <get_fileinfo+0x1f2>
    9514:	19 86       	std	Y+9, r1	; 0x09
    9516:	d8 01       	movw	r26, r16
    9518:	5a 96       	adiw	r26, 0x1a	; 26
    951a:	ed 91       	ld	r30, X+
    951c:	fc 91       	ld	r31, X
    951e:	5b 97       	sbiw	r26, 0x1b	; 27
    9520:	83 85       	ldd	r24, Z+11	; 0x0b
    9522:	88 87       	std	Y+8, r24	; 0x08
    9524:	5a 96       	adiw	r26, 0x1a	; 26
    9526:	0d 91       	ld	r16, X+
    9528:	1c 91       	ld	r17, X
    952a:	5b 97       	sbiw	r26, 0x1b	; 27
    952c:	c8 01       	movw	r24, r16
    952e:	4c 96       	adiw	r24, 0x1c	; 28
    9530:	bd dc       	rcall	.-1670   	; 0x8eac <ld_dword>
    9532:	68 83       	st	Y, r22
    9534:	79 83       	std	Y+1, r23	; 0x01
    9536:	8a 83       	std	Y+2, r24	; 0x02
    9538:	9b 83       	std	Y+3, r25	; 0x03
    953a:	f8 01       	movw	r30, r16
    953c:	86 89       	ldd	r24, Z+22	; 0x16
    953e:	97 89       	ldd	r25, Z+23	; 0x17
    9540:	9f 83       	std	Y+7, r25	; 0x07
    9542:	8e 83       	std	Y+6, r24	; 0x06
    9544:	80 8d       	ldd	r24, Z+24	; 0x18
    9546:	91 8d       	ldd	r25, Z+25	; 0x19
    9548:	9d 83       	std	Y+5, r25	; 0x05
    954a:	8c 83       	std	Y+4, r24	; 0x04
    954c:	cd b7       	in	r28, 0x3d	; 61
    954e:	de b7       	in	r29, 0x3e	; 62
    9550:	e2 e1       	ldi	r30, 0x12	; 18
    9552:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

00009556 <ld_clust.isra.4>:
    9556:	fb 01       	movw	r30, r22
    9558:	42 8d       	ldd	r20, Z+26	; 0x1a
    955a:	53 8d       	ldd	r21, Z+27	; 0x1b
    955c:	60 e0       	ldi	r22, 0x00	; 0
    955e:	70 e0       	ldi	r23, 0x00	; 0
    9560:	83 30       	cpi	r24, 0x03	; 3
    9562:	59 f4       	brne	.+22     	; 0x957a <ld_clust.isra.4+0x24>
    9564:	84 89       	ldd	r24, Z+20	; 0x14
    9566:	95 89       	ldd	r25, Z+21	; 0x15
    9568:	a0 e0       	ldi	r26, 0x00	; 0
    956a:	b0 e0       	ldi	r27, 0x00	; 0
    956c:	dc 01       	movw	r26, r24
    956e:	99 27       	eor	r25, r25
    9570:	88 27       	eor	r24, r24
    9572:	48 2b       	or	r20, r24
    9574:	59 2b       	or	r21, r25
    9576:	6a 2b       	or	r22, r26
    9578:	7b 2b       	or	r23, r27
    957a:	cb 01       	movw	r24, r22
    957c:	ba 01       	movw	r22, r20
    957e:	08 95       	ret

00009580 <st_clust.isra.5>:
    9580:	fb 01       	movw	r30, r22
    9582:	22 8f       	std	Z+26, r18	; 0x1a
    9584:	33 8f       	std	Z+27, r19	; 0x1b
    9586:	dc 01       	movw	r26, r24
    9588:	8c 91       	ld	r24, X
    958a:	83 30       	cpi	r24, 0x03	; 3
    958c:	29 f4       	brne	.+10     	; 0x9598 <st_clust.isra.5+0x18>
    958e:	ca 01       	movw	r24, r20
    9590:	aa 27       	eor	r26, r26
    9592:	bb 27       	eor	r27, r27
    9594:	84 8b       	std	Z+20, r24	; 0x14
    9596:	95 8b       	std	Z+21, r25	; 0x15
    9598:	08 95       	ret

0000959a <sync_window.part.6>:
    959a:	8f 92       	push	r8
    959c:	9f 92       	push	r9
    959e:	af 92       	push	r10
    95a0:	bf 92       	push	r11
    95a2:	ef 92       	push	r14
    95a4:	ff 92       	push	r15
    95a6:	0f 93       	push	r16
    95a8:	1f 93       	push	r17
    95aa:	cf 93       	push	r28
    95ac:	df 93       	push	r29
    95ae:	ec 01       	movw	r28, r24
    95b0:	7c 01       	movw	r14, r24
    95b2:	45 e3       	ldi	r20, 0x35	; 53
    95b4:	e4 0e       	add	r14, r20
    95b6:	f1 1c       	adc	r15, r1
    95b8:	29 a9       	ldd	r18, Y+49	; 0x31
    95ba:	3a a9       	ldd	r19, Y+50	; 0x32
    95bc:	4b a9       	ldd	r20, Y+51	; 0x33
    95be:	5c a9       	ldd	r21, Y+52	; 0x34
    95c0:	01 e0       	ldi	r16, 0x01	; 1
    95c2:	10 e0       	ldi	r17, 0x00	; 0
    95c4:	b7 01       	movw	r22, r14
    95c6:	89 81       	ldd	r24, Y+1	; 0x01
    95c8:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <disk_write>
    95cc:	89 2b       	or	r24, r25
    95ce:	41 f5       	brne	.+80     	; 0x9620 <sync_window.part.6+0x86>
    95d0:	1b 82       	std	Y+3, r1	; 0x03
    95d2:	09 a9       	ldd	r16, Y+49	; 0x31
    95d4:	1a a9       	ldd	r17, Y+50	; 0x32
    95d6:	2b a9       	ldd	r18, Y+51	; 0x33
    95d8:	3c a9       	ldd	r19, Y+52	; 0x34
    95da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    95dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    95de:	af 8d       	ldd	r26, Y+31	; 0x1f
    95e0:	b8 a1       	ldd	r27, Y+32	; 0x20
    95e2:	8d a0       	ldd	r8, Y+37	; 0x25
    95e4:	9e a0       	ldd	r9, Y+38	; 0x26
    95e6:	af a0       	ldd	r10, Y+39	; 0x27
    95e8:	b8 a4       	ldd	r11, Y+40	; 0x28
    95ea:	b9 01       	movw	r22, r18
    95ec:	a8 01       	movw	r20, r16
    95ee:	48 19       	sub	r20, r8
    95f0:	59 09       	sbc	r21, r9
    95f2:	6a 09       	sbc	r22, r10
    95f4:	7b 09       	sbc	r23, r11
    95f6:	48 17       	cp	r20, r24
    95f8:	59 07       	cpc	r21, r25
    95fa:	6a 07       	cpc	r22, r26
    95fc:	7b 07       	cpc	r23, r27
    95fe:	98 f4       	brcc	.+38     	; 0x9626 <sync_window.part.6+0x8c>
    9600:	6a 81       	ldd	r22, Y+2	; 0x02
    9602:	62 30       	cpi	r22, 0x02	; 2
    9604:	81 f4       	brne	.+32     	; 0x9626 <sync_window.part.6+0x8c>
    9606:	a9 01       	movw	r20, r18
    9608:	98 01       	movw	r18, r16
    960a:	28 0f       	add	r18, r24
    960c:	39 1f       	adc	r19, r25
    960e:	4a 1f       	adc	r20, r26
    9610:	5b 1f       	adc	r21, r27
    9612:	01 e0       	ldi	r16, 0x01	; 1
    9614:	10 e0       	ldi	r17, 0x00	; 0
    9616:	b7 01       	movw	r22, r14
    9618:	89 81       	ldd	r24, Y+1	; 0x01
    961a:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <disk_write>
    961e:	03 c0       	rjmp	.+6      	; 0x9626 <sync_window.part.6+0x8c>
    9620:	81 e0       	ldi	r24, 0x01	; 1
    9622:	90 e0       	ldi	r25, 0x00	; 0
    9624:	02 c0       	rjmp	.+4      	; 0x962a <sync_window.part.6+0x90>
    9626:	80 e0       	ldi	r24, 0x00	; 0
    9628:	90 e0       	ldi	r25, 0x00	; 0
    962a:	df 91       	pop	r29
    962c:	cf 91       	pop	r28
    962e:	1f 91       	pop	r17
    9630:	0f 91       	pop	r16
    9632:	ff 90       	pop	r15
    9634:	ef 90       	pop	r14
    9636:	bf 90       	pop	r11
    9638:	af 90       	pop	r10
    963a:	9f 90       	pop	r9
    963c:	8f 90       	pop	r8
    963e:	08 95       	ret

00009640 <sync_fs>:
    9640:	ef 92       	push	r14
    9642:	ff 92       	push	r15
    9644:	0f 93       	push	r16
    9646:	1f 93       	push	r17
    9648:	cf 93       	push	r28
    964a:	df 93       	push	r29
    964c:	ec 01       	movw	r28, r24
    964e:	8b 81       	ldd	r24, Y+3	; 0x03
    9650:	81 11       	cpse	r24, r1
    9652:	05 c0       	rjmp	.+10     	; 0x965e <sync_fs+0x1e>
    9654:	88 81       	ld	r24, Y
    9656:	83 30       	cpi	r24, 0x03	; 3
    9658:	09 f0       	breq	.+2      	; 0x965c <sync_fs+0x1c>
    965a:	52 c0       	rjmp	.+164    	; 0x9700 <sync_fs+0xc0>
    965c:	06 c0       	rjmp	.+12     	; 0x966a <sync_fs+0x2a>
    965e:	ce 01       	movw	r24, r28
    9660:	9c df       	rcall	.-200    	; 0x959a <sync_window.part.6>
    9662:	00 97       	sbiw	r24, 0x00	; 0
    9664:	09 f0       	breq	.+2      	; 0x9668 <sync_fs+0x28>
    9666:	59 c0       	rjmp	.+178    	; 0x971a <sync_fs+0xda>
    9668:	f5 cf       	rjmp	.-22     	; 0x9654 <sync_fs+0x14>
    966a:	8c 81       	ldd	r24, Y+4	; 0x04
    966c:	81 30       	cpi	r24, 0x01	; 1
    966e:	09 f0       	breq	.+2      	; 0x9672 <sync_fs+0x32>
    9670:	47 c0       	rjmp	.+142    	; 0x9700 <sync_fs+0xc0>
    9672:	40 e0       	ldi	r20, 0x00	; 0
    9674:	52 e0       	ldi	r21, 0x02	; 2
    9676:	60 e0       	ldi	r22, 0x00	; 0
    9678:	70 e0       	ldi	r23, 0x00	; 0
    967a:	7e 01       	movw	r14, r28
    967c:	85 e3       	ldi	r24, 0x35	; 53
    967e:	e8 0e       	add	r14, r24
    9680:	f1 1c       	adc	r15, r1
    9682:	c7 01       	movw	r24, r14
    9684:	2e dc       	rcall	.-1956   	; 0x8ee2 <mem_set>
    9686:	85 e5       	ldi	r24, 0x55	; 85
    9688:	fe 01       	movw	r30, r28
    968a:	ed 5c       	subi	r30, 0xCD	; 205
    968c:	fd 4f       	sbci	r31, 0xFD	; 253
    968e:	80 83       	st	Z, r24
    9690:	8a ea       	ldi	r24, 0xAA	; 170
    9692:	31 96       	adiw	r30, 0x01	; 1
    9694:	80 83       	st	Z, r24
    9696:	82 e5       	ldi	r24, 0x52	; 82
    9698:	8d ab       	std	Y+53, r24	; 0x35
    969a:	8e ab       	std	Y+54, r24	; 0x36
    969c:	81 e6       	ldi	r24, 0x61	; 97
    969e:	8f ab       	std	Y+55, r24	; 0x37
    96a0:	91 e4       	ldi	r25, 0x41	; 65
    96a2:	98 af       	std	Y+56, r25	; 0x38
    96a4:	22 e7       	ldi	r18, 0x72	; 114
    96a6:	7b 97       	sbiw	r30, 0x1b	; 27
    96a8:	20 83       	st	Z, r18
    96aa:	31 96       	adiw	r30, 0x01	; 1
    96ac:	20 83       	st	Z, r18
    96ae:	31 96       	adiw	r30, 0x01	; 1
    96b0:	90 83       	st	Z, r25
    96b2:	31 96       	adiw	r30, 0x01	; 1
    96b4:	80 83       	st	Z, r24
    96b6:	49 89       	ldd	r20, Y+17	; 0x11
    96b8:	5a 89       	ldd	r21, Y+18	; 0x12
    96ba:	6b 89       	ldd	r22, Y+19	; 0x13
    96bc:	7c 89       	ldd	r23, Y+20	; 0x14
    96be:	ce 01       	movw	r24, r28
    96c0:	83 5e       	subi	r24, 0xE3	; 227
    96c2:	9d 4f       	sbci	r25, 0xFD	; 253
    96c4:	08 dc       	rcall	.-2032   	; 0x8ed6 <st_dword>
    96c6:	4d 85       	ldd	r20, Y+13	; 0x0d
    96c8:	5e 85       	ldd	r21, Y+14	; 0x0e
    96ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    96cc:	78 89       	ldd	r23, Y+16	; 0x10
    96ce:	ce 01       	movw	r24, r28
    96d0:	8f 5d       	subi	r24, 0xDF	; 223
    96d2:	9d 4f       	sbci	r25, 0xFD	; 253
    96d4:	00 dc       	rcall	.-2048   	; 0x8ed6 <st_dword>
    96d6:	89 a1       	ldd	r24, Y+33	; 0x21
    96d8:	9a a1       	ldd	r25, Y+34	; 0x22
    96da:	ab a1       	ldd	r26, Y+35	; 0x23
    96dc:	bc a1       	ldd	r27, Y+36	; 0x24
    96de:	9c 01       	movw	r18, r24
    96e0:	ad 01       	movw	r20, r26
    96e2:	2f 5f       	subi	r18, 0xFF	; 255
    96e4:	3f 4f       	sbci	r19, 0xFF	; 255
    96e6:	4f 4f       	sbci	r20, 0xFF	; 255
    96e8:	5f 4f       	sbci	r21, 0xFF	; 255
    96ea:	29 ab       	std	Y+49, r18	; 0x31
    96ec:	3a ab       	std	Y+50, r19	; 0x32
    96ee:	4b ab       	std	Y+51, r20	; 0x33
    96f0:	5c ab       	std	Y+52, r21	; 0x34
    96f2:	01 e0       	ldi	r16, 0x01	; 1
    96f4:	10 e0       	ldi	r17, 0x00	; 0
    96f6:	b7 01       	movw	r22, r14
    96f8:	89 81       	ldd	r24, Y+1	; 0x01
    96fa:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <disk_write>
    96fe:	1c 82       	std	Y+4, r1	; 0x04
    9700:	40 e0       	ldi	r20, 0x00	; 0
    9702:	50 e0       	ldi	r21, 0x00	; 0
    9704:	60 e0       	ldi	r22, 0x00	; 0
    9706:	89 81       	ldd	r24, Y+1	; 0x01
    9708:	0e 94 f5 6a 	call	0xd5ea	; 0xd5ea <disk_ioctl>
    970c:	31 e0       	ldi	r19, 0x01	; 1
    970e:	20 e0       	ldi	r18, 0x00	; 0
    9710:	89 2b       	or	r24, r25
    9712:	09 f4       	brne	.+2      	; 0x9716 <sync_fs+0xd6>
    9714:	30 e0       	ldi	r19, 0x00	; 0
    9716:	83 2f       	mov	r24, r19
    9718:	92 2f       	mov	r25, r18
    971a:	cd b7       	in	r28, 0x3d	; 61
    971c:	de b7       	in	r29, 0x3e	; 62
    971e:	e6 e0       	ldi	r30, 0x06	; 6
    9720:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

00009724 <dir_clear>:
    9724:	4f 92       	push	r4
    9726:	5f 92       	push	r5
    9728:	6f 92       	push	r6
    972a:	7f 92       	push	r7
    972c:	af 92       	push	r10
    972e:	bf 92       	push	r11
    9730:	cf 92       	push	r12
    9732:	df 92       	push	r13
    9734:	ef 92       	push	r14
    9736:	ff 92       	push	r15
    9738:	0f 93       	push	r16
    973a:	1f 93       	push	r17
    973c:	cf 93       	push	r28
    973e:	df 93       	push	r29
    9740:	ec 01       	movw	r28, r24
    9742:	6a 01       	movw	r12, r20
    9744:	7b 01       	movw	r14, r22
    9746:	8b 81       	ldd	r24, Y+3	; 0x03
    9748:	81 11       	cpse	r24, r1
    974a:	28 c0       	rjmp	.+80     	; 0x979c <dir_clear+0x78>
    974c:	b7 01       	movw	r22, r14
    974e:	a6 01       	movw	r20, r12
    9750:	ce 01       	movw	r24, r28
    9752:	65 dc       	rcall	.-1846   	; 0x901e <clst2sect>
    9754:	2b 01       	movw	r4, r22
    9756:	3c 01       	movw	r6, r24
    9758:	69 ab       	std	Y+49, r22	; 0x31
    975a:	7a ab       	std	Y+50, r23	; 0x32
    975c:	8b ab       	std	Y+51, r24	; 0x33
    975e:	9c ab       	std	Y+52, r25	; 0x34
    9760:	5e 01       	movw	r10, r28
    9762:	25 e3       	ldi	r18, 0x35	; 53
    9764:	a2 0e       	add	r10, r18
    9766:	b1 1c       	adc	r11, r1
    9768:	40 e0       	ldi	r20, 0x00	; 0
    976a:	52 e0       	ldi	r21, 0x02	; 2
    976c:	60 e0       	ldi	r22, 0x00	; 0
    976e:	70 e0       	ldi	r23, 0x00	; 0
    9770:	c5 01       	movw	r24, r10
    9772:	b7 db       	rcall	.-2194   	; 0x8ee2 <mem_set>
    9774:	09 85       	ldd	r16, Y+9	; 0x09
    9776:	1a 85       	ldd	r17, Y+10	; 0x0a
    9778:	c8 01       	movw	r24, r16
    977a:	a0 e0       	ldi	r26, 0x00	; 0
    977c:	b0 e0       	ldi	r27, 0x00	; 0
    977e:	39 e0       	ldi	r19, 0x09	; 9
    9780:	88 0f       	add	r24, r24
    9782:	99 1f       	adc	r25, r25
    9784:	aa 1f       	adc	r26, r26
    9786:	bb 1f       	adc	r27, r27
    9788:	3a 95       	dec	r19
    978a:	d1 f7       	brne	.-12     	; 0x9780 <dir_clear+0x5c>
    978c:	81 15       	cp	r24, r1
    978e:	90 48       	sbci	r25, 0x80	; 128
    9790:	a1 05       	cpc	r26, r1
    9792:	b1 05       	cpc	r27, r1
    9794:	50 f0       	brcs	.+20     	; 0x97aa <dir_clear+0x86>
    9796:	00 e0       	ldi	r16, 0x00	; 0
    9798:	10 e8       	ldi	r17, 0x80	; 128
    979a:	14 c0       	rjmp	.+40     	; 0x97c4 <dir_clear+0xa0>
    979c:	ce 01       	movw	r24, r28
    979e:	fd de       	rcall	.-518    	; 0x959a <sync_window.part.6>
    97a0:	89 2b       	or	r24, r25
    97a2:	a1 f2       	breq	.-88     	; 0x974c <dir_clear+0x28>
    97a4:	81 e0       	ldi	r24, 0x01	; 1
    97a6:	90 e0       	ldi	r25, 0x00	; 0
    97a8:	56 c0       	rjmp	.+172    	; 0x9856 <dir_clear+0x132>
    97aa:	10 2f       	mov	r17, r16
    97ac:	00 27       	eor	r16, r16
    97ae:	11 0f       	add	r17, r17
    97b0:	09 c0       	rjmp	.+18     	; 0x97c4 <dir_clear+0xa0>
    97b2:	c8 01       	movw	r24, r16
    97b4:	0e 94 19 6a 	call	0xd432	; 0xd432 <ff_memalloc>
    97b8:	6c 01       	movw	r12, r24
    97ba:	00 97       	sbiw	r24, 0x00	; 0
    97bc:	09 f0       	breq	.+2      	; 0x97c0 <dir_clear+0x9c>
    97be:	40 c0       	rjmp	.+128    	; 0x9840 <dir_clear+0x11c>
    97c0:	16 95       	lsr	r17
    97c2:	07 95       	ror	r16
    97c4:	01 30       	cpi	r16, 0x01	; 1
    97c6:	82 e0       	ldi	r24, 0x02	; 2
    97c8:	18 07       	cpc	r17, r24
    97ca:	98 f7       	brcc	.-26     	; 0x97b2 <dir_clear+0x8e>
    97cc:	e1 2c       	mov	r14, r1
    97ce:	f1 2c       	mov	r15, r1
    97d0:	11 c0       	rjmp	.+34     	; 0x97f4 <dir_clear+0xd0>
    97d2:	01 e0       	ldi	r16, 0x01	; 1
    97d4:	10 e0       	ldi	r17, 0x00	; 0
    97d6:	a3 01       	movw	r20, r6
    97d8:	92 01       	movw	r18, r4
    97da:	2e 0d       	add	r18, r14
    97dc:	3f 1d       	adc	r19, r15
    97de:	41 1d       	adc	r20, r1
    97e0:	51 1d       	adc	r21, r1
    97e2:	b5 01       	movw	r22, r10
    97e4:	89 81       	ldd	r24, Y+1	; 0x01
    97e6:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <disk_write>
    97ea:	89 2b       	or	r24, r25
    97ec:	01 f5       	brne	.+64     	; 0x982e <dir_clear+0x10a>
    97ee:	2f ef       	ldi	r18, 0xFF	; 255
    97f0:	e2 1a       	sub	r14, r18
    97f2:	f2 0a       	sbc	r15, r18
    97f4:	89 85       	ldd	r24, Y+9	; 0x09
    97f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    97f8:	e8 16       	cp	r14, r24
    97fa:	f9 06       	cpc	r15, r25
    97fc:	50 f3       	brcs	.-44     	; 0x97d2 <dir_clear+0xae>
    97fe:	17 c0       	rjmp	.+46     	; 0x982e <dir_clear+0x10a>
    9800:	85 01       	movw	r16, r10
    9802:	a3 01       	movw	r20, r6
    9804:	92 01       	movw	r18, r4
    9806:	2e 0d       	add	r18, r14
    9808:	3f 1d       	adc	r19, r15
    980a:	41 1d       	adc	r20, r1
    980c:	51 1d       	adc	r21, r1
    980e:	b6 01       	movw	r22, r12
    9810:	89 81       	ldd	r24, Y+1	; 0x01
    9812:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <disk_write>
    9816:	89 2b       	or	r24, r25
    9818:	39 f4       	brne	.+14     	; 0x9828 <dir_clear+0x104>
    981a:	ea 0c       	add	r14, r10
    981c:	fb 1c       	adc	r15, r11
    981e:	89 85       	ldd	r24, Y+9	; 0x09
    9820:	9a 85       	ldd	r25, Y+10	; 0x0a
    9822:	e8 16       	cp	r14, r24
    9824:	f9 06       	cpc	r15, r25
    9826:	60 f3       	brcs	.-40     	; 0x9800 <dir_clear+0xdc>
    9828:	c6 01       	movw	r24, r12
    982a:	0e 94 1c 6a 	call	0xd438	; 0xd438 <ff_memfree>
    982e:	81 e0       	ldi	r24, 0x01	; 1
    9830:	90 e0       	ldi	r25, 0x00	; 0
    9832:	29 85       	ldd	r18, Y+9	; 0x09
    9834:	3a 85       	ldd	r19, Y+10	; 0x0a
    9836:	2e 15       	cp	r18, r14
    9838:	3f 05       	cpc	r19, r15
    983a:	69 f4       	brne	.+26     	; 0x9856 <dir_clear+0x132>
    983c:	80 e0       	ldi	r24, 0x00	; 0
    983e:	0b c0       	rjmp	.+22     	; 0x9856 <dir_clear+0x132>
    9840:	a8 01       	movw	r20, r16
    9842:	60 e0       	ldi	r22, 0x00	; 0
    9844:	70 e0       	ldi	r23, 0x00	; 0
    9846:	4d db       	rcall	.-2406   	; 0x8ee2 <mem_set>
    9848:	58 01       	movw	r10, r16
    984a:	ab 2c       	mov	r10, r11
    984c:	bb 24       	eor	r11, r11
    984e:	a6 94       	lsr	r10
    9850:	e1 2c       	mov	r14, r1
    9852:	f1 2c       	mov	r15, r1
    9854:	e4 cf       	rjmp	.-56     	; 0x981e <dir_clear+0xfa>
    9856:	df 91       	pop	r29
    9858:	cf 91       	pop	r28
    985a:	1f 91       	pop	r17
    985c:	0f 91       	pop	r16
    985e:	ff 90       	pop	r15
    9860:	ef 90       	pop	r14
    9862:	df 90       	pop	r13
    9864:	cf 90       	pop	r12
    9866:	bf 90       	pop	r11
    9868:	af 90       	pop	r10
    986a:	7f 90       	pop	r7
    986c:	6f 90       	pop	r6
    986e:	5f 90       	pop	r5
    9870:	4f 90       	pop	r4
    9872:	08 95       	ret

00009874 <move_window>:
    9874:	a0 e0       	ldi	r26, 0x00	; 0
    9876:	b0 e0       	ldi	r27, 0x00	; 0
    9878:	e0 e4       	ldi	r30, 0x40	; 64
    987a:	fc e4       	ldi	r31, 0x4C	; 76
    987c:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    9880:	ec 01       	movw	r28, r24
    9882:	6a 01       	movw	r12, r20
    9884:	7b 01       	movw	r14, r22
    9886:	89 a9       	ldd	r24, Y+49	; 0x31
    9888:	9a a9       	ldd	r25, Y+50	; 0x32
    988a:	ab a9       	ldd	r26, Y+51	; 0x33
    988c:	bc a9       	ldd	r27, Y+52	; 0x34
    988e:	84 17       	cp	r24, r20
    9890:	95 07       	cpc	r25, r21
    9892:	a6 07       	cpc	r26, r22
    9894:	b7 07       	cpc	r27, r23
    9896:	11 f1       	breq	.+68     	; 0x98dc <move_window+0x68>
    9898:	8b 81       	ldd	r24, Y+3	; 0x03
    989a:	81 11       	cpse	r24, r1
    989c:	13 c0       	rjmp	.+38     	; 0x98c4 <move_window+0x50>
    989e:	01 e0       	ldi	r16, 0x01	; 1
    98a0:	10 e0       	ldi	r17, 0x00	; 0
    98a2:	a7 01       	movw	r20, r14
    98a4:	96 01       	movw	r18, r12
    98a6:	be 01       	movw	r22, r28
    98a8:	6b 5c       	subi	r22, 0xCB	; 203
    98aa:	7f 4f       	sbci	r23, 0xFF	; 255
    98ac:	89 81       	ldd	r24, Y+1	; 0x01
    98ae:	0e 94 d5 6a 	call	0xd5aa	; 0xd5aa <disk_read>
    98b2:	89 2b       	or	r24, r25
    98b4:	61 f0       	breq	.+24     	; 0x98ce <move_window+0x5a>
    98b6:	81 e0       	ldi	r24, 0x01	; 1
    98b8:	90 e0       	ldi	r25, 0x00	; 0
    98ba:	cc 24       	eor	r12, r12
    98bc:	ca 94       	dec	r12
    98be:	dc 2c       	mov	r13, r12
    98c0:	76 01       	movw	r14, r12
    98c2:	07 c0       	rjmp	.+14     	; 0x98d2 <move_window+0x5e>
    98c4:	ce 01       	movw	r24, r28
    98c6:	69 de       	rcall	.-814    	; 0x959a <sync_window.part.6>
    98c8:	00 97       	sbiw	r24, 0x00	; 0
    98ca:	51 f4       	brne	.+20     	; 0x98e0 <move_window+0x6c>
    98cc:	e8 cf       	rjmp	.-48     	; 0x989e <move_window+0x2a>
    98ce:	80 e0       	ldi	r24, 0x00	; 0
    98d0:	90 e0       	ldi	r25, 0x00	; 0
    98d2:	c9 aa       	std	Y+49, r12	; 0x31
    98d4:	da aa       	std	Y+50, r13	; 0x32
    98d6:	eb aa       	std	Y+51, r14	; 0x33
    98d8:	fc aa       	std	Y+52, r15	; 0x34
    98da:	02 c0       	rjmp	.+4      	; 0x98e0 <move_window+0x6c>
    98dc:	80 e0       	ldi	r24, 0x00	; 0
    98de:	90 e0       	ldi	r25, 0x00	; 0
    98e0:	cd b7       	in	r28, 0x3d	; 61
    98e2:	de b7       	in	r29, 0x3e	; 62
    98e4:	e8 e0       	ldi	r30, 0x08	; 8
    98e6:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

000098ea <check_fs>:
    98ea:	cf 93       	push	r28
    98ec:	df 93       	push	r29
    98ee:	ec 01       	movw	r28, r24
    98f0:	1b 82       	std	Y+3, r1	; 0x03
    98f2:	8f ef       	ldi	r24, 0xFF	; 255
    98f4:	9f ef       	ldi	r25, 0xFF	; 255
    98f6:	dc 01       	movw	r26, r24
    98f8:	89 ab       	std	Y+49, r24	; 0x31
    98fa:	9a ab       	std	Y+50, r25	; 0x32
    98fc:	ab ab       	std	Y+51, r26	; 0x33
    98fe:	bc ab       	std	Y+52, r27	; 0x34
    9900:	ce 01       	movw	r24, r28
    9902:	b8 df       	rcall	.-144    	; 0x9874 <move_window>
    9904:	89 2b       	or	r24, r25
    9906:	19 f5       	brne	.+70     	; 0x994e <check_fs+0x64>
    9908:	fe 01       	movw	r30, r28
    990a:	ed 5c       	subi	r30, 0xCD	; 205
    990c:	fd 4f       	sbci	r31, 0xFD	; 253
    990e:	80 81       	ld	r24, Z
    9910:	91 81       	ldd	r25, Z+1	; 0x01
    9912:	85 35       	cpi	r24, 0x55	; 85
    9914:	9a 4a       	sbci	r25, 0xAA	; 170
    9916:	f1 f4       	brne	.+60     	; 0x9954 <check_fs+0x6a>
    9918:	8d a9       	ldd	r24, Y+53	; 0x35
    991a:	8b 3e       	cpi	r24, 0xEB	; 235
    991c:	19 f0       	breq	.+6      	; 0x9924 <check_fs+0x3a>
    991e:	88 5e       	subi	r24, 0xE8	; 232
    9920:	82 30       	cpi	r24, 0x02	; 2
    9922:	f0 f4       	brcc	.+60     	; 0x9960 <check_fs+0x76>
    9924:	43 e0       	ldi	r20, 0x03	; 3
    9926:	50 e0       	ldi	r21, 0x00	; 0
    9928:	68 e5       	ldi	r22, 0x58	; 88
    992a:	78 e0       	ldi	r23, 0x08	; 8
    992c:	ce 01       	movw	r24, r28
    992e:	85 59       	subi	r24, 0x95	; 149
    9930:	9f 4f       	sbci	r25, 0xFF	; 255
    9932:	e0 da       	rcall	.-2624   	; 0x8ef4 <mem_cmp>
    9934:	89 2b       	or	r24, r25
    9936:	89 f0       	breq	.+34     	; 0x995a <check_fs+0x70>
    9938:	45 e0       	ldi	r20, 0x05	; 5
    993a:	50 e0       	ldi	r21, 0x00	; 0
    993c:	6e ee       	ldi	r22, 0xEE	; 238
    993e:	77 e0       	ldi	r23, 0x07	; 7
    9940:	ce 01       	movw	r24, r28
    9942:	89 57       	subi	r24, 0x79	; 121
    9944:	9f 4f       	sbci	r25, 0xFF	; 255
    9946:	d6 da       	rcall	.-2644   	; 0x8ef4 <mem_cmp>
    9948:	89 2b       	or	r24, r25
    994a:	51 f4       	brne	.+20     	; 0x9960 <check_fs+0x76>
    994c:	06 c0       	rjmp	.+12     	; 0x995a <check_fs+0x70>
    994e:	84 e0       	ldi	r24, 0x04	; 4
    9950:	90 e0       	ldi	r25, 0x00	; 0
    9952:	08 c0       	rjmp	.+16     	; 0x9964 <check_fs+0x7a>
    9954:	83 e0       	ldi	r24, 0x03	; 3
    9956:	90 e0       	ldi	r25, 0x00	; 0
    9958:	05 c0       	rjmp	.+10     	; 0x9964 <check_fs+0x7a>
    995a:	80 e0       	ldi	r24, 0x00	; 0
    995c:	90 e0       	ldi	r25, 0x00	; 0
    995e:	02 c0       	rjmp	.+4      	; 0x9964 <check_fs+0x7a>
    9960:	82 e0       	ldi	r24, 0x02	; 2
    9962:	90 e0       	ldi	r25, 0x00	; 0
    9964:	df 91       	pop	r29
    9966:	cf 91       	pop	r28
    9968:	08 95       	ret

0000996a <mount_volume>:
    996a:	a0 e2       	ldi	r26, 0x20	; 32
    996c:	b0 e0       	ldi	r27, 0x00	; 0
    996e:	eb eb       	ldi	r30, 0xBB	; 187
    9970:	fc e4       	ldi	r31, 0x4C	; 76
    9972:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__prologue_saves__+0x4>
    9976:	5b 01       	movw	r10, r22
    9978:	f4 2e       	mov	r15, r20
    997a:	db 01       	movw	r26, r22
    997c:	1d 92       	st	X+, r1
    997e:	1c 92       	st	X, r1
    9980:	c1 db       	rcall	.-2174   	; 0x9104 <get_ldnumber>
    9982:	6c 01       	movw	r12, r24
    9984:	97 fd       	sbrc	r25, 7
    9986:	41 c2       	rjmp	.+1154   	; 0x9e0a <mount_volume+0x4a0>
    9988:	fc 01       	movw	r30, r24
    998a:	ee 0f       	add	r30, r30
    998c:	ff 1f       	adc	r31, r31
    998e:	ef 5e       	subi	r30, 0xEF	; 239
    9990:	f7 4e       	sbci	r31, 0xE7	; 231
    9992:	00 81       	ld	r16, Z
    9994:	11 81       	ldd	r17, Z+1	; 0x01
    9996:	01 15       	cp	r16, r1
    9998:	11 05       	cpc	r17, r1
    999a:	09 f4       	brne	.+2      	; 0x999e <mount_volume+0x34>
    999c:	39 c2       	rjmp	.+1138   	; 0x9e10 <mount_volume+0x4a6>
    999e:	f5 01       	movw	r30, r10
    99a0:	11 83       	std	Z+1, r17	; 0x01
    99a2:	00 83       	st	Z, r16
    99a4:	ff 2d       	mov	r31, r15
    99a6:	fe 7f       	andi	r31, 0xFE	; 254
    99a8:	ff 2e       	mov	r15, r31
    99aa:	d8 01       	movw	r26, r16
    99ac:	8c 91       	ld	r24, X
    99ae:	88 23       	and	r24, r24
    99b0:	71 f0       	breq	.+28     	; 0x99ce <mount_volume+0x64>
    99b2:	11 96       	adiw	r26, 0x01	; 1
    99b4:	8c 91       	ld	r24, X
    99b6:	0e 94 c9 6a 	call	0xd592	; 0xd592 <disk_status>
    99ba:	80 fd       	sbrc	r24, 0
    99bc:	08 c0       	rjmp	.+16     	; 0x99ce <mount_volume+0x64>
    99be:	ff 20       	and	r15, r15
    99c0:	09 f4       	brne	.+2      	; 0x99c4 <mount_volume+0x5a>
    99c2:	29 c2       	rjmp	.+1106   	; 0x9e16 <mount_volume+0x4ac>
    99c4:	82 ff       	sbrs	r24, 2
    99c6:	27 c2       	rjmp	.+1102   	; 0x9e16 <mount_volume+0x4ac>
    99c8:	8a e0       	ldi	r24, 0x0A	; 10
    99ca:	90 e0       	ldi	r25, 0x00	; 0
    99cc:	2c c2       	rjmp	.+1112   	; 0x9e26 <mount_volume+0x4bc>
    99ce:	f8 01       	movw	r30, r16
    99d0:	10 82       	st	Z, r1
    99d2:	c1 82       	std	Z+1, r12	; 0x01
    99d4:	8c 2d       	mov	r24, r12
    99d6:	0e 94 cf 6a 	call	0xd59e	; 0xd59e <disk_initialize>
    99da:	80 fd       	sbrc	r24, 0
    99dc:	1f c2       	rjmp	.+1086   	; 0x9e1c <mount_volume+0x4b2>
    99de:	ff 20       	and	r15, r15
    99e0:	11 f0       	breq	.+4      	; 0x99e6 <mount_volume+0x7c>
    99e2:	82 fd       	sbrc	r24, 2
    99e4:	f1 cf       	rjmp	.-30     	; 0x99c8 <mount_volume+0x5e>
    99e6:	40 e0       	ldi	r20, 0x00	; 0
    99e8:	50 e0       	ldi	r21, 0x00	; 0
    99ea:	ba 01       	movw	r22, r20
    99ec:	c8 01       	movw	r24, r16
    99ee:	7d df       	rcall	.-262    	; 0x98ea <check_fs>
    99f0:	82 30       	cpi	r24, 0x02	; 2
    99f2:	91 05       	cpc	r25, r1
    99f4:	b9 f5       	brne	.+110    	; 0x9a64 <mount_volume+0xfa>
    99f6:	68 01       	movw	r12, r16
    99f8:	f5 e0       	ldi	r31, 0x05	; 5
    99fa:	cf 1a       	sub	r12, r31
    99fc:	fe ef       	ldi	r31, 0xFE	; 254
    99fe:	df 0a       	sbc	r13, r31
    9a00:	9e 01       	movw	r18, r28
    9a02:	2f 5f       	subi	r18, 0xFF	; 255
    9a04:	3f 4f       	sbci	r19, 0xFF	; 255
    9a06:	79 01       	movw	r14, r18
    9a08:	48 01       	movw	r8, r16
    9a0a:	35 ec       	ldi	r19, 0xC5	; 197
    9a0c:	83 1a       	sub	r8, r19
    9a0e:	3d ef       	ldi	r19, 0xFD	; 253
    9a10:	93 0a       	sbc	r9, r19
    9a12:	57 01       	movw	r10, r14
    9a14:	c6 01       	movw	r24, r12
    9a16:	4a da       	rcall	.-2924   	; 0x8eac <ld_dword>
    9a18:	d5 01       	movw	r26, r10
    9a1a:	6d 93       	st	X+, r22
    9a1c:	7d 93       	st	X+, r23
    9a1e:	8d 93       	st	X+, r24
    9a20:	9d 93       	st	X+, r25
    9a22:	5d 01       	movw	r10, r26
    9a24:	b0 e1       	ldi	r27, 0x10	; 16
    9a26:	cb 0e       	add	r12, r27
    9a28:	d1 1c       	adc	r13, r1
    9a2a:	c8 14       	cp	r12, r8
    9a2c:	d9 04       	cpc	r13, r9
    9a2e:	91 f7       	brne	.-28     	; 0x9a14 <mount_volume+0xaa>
    9a30:	6e 01       	movw	r12, r28
    9a32:	e1 e1       	ldi	r30, 0x11	; 17
    9a34:	ce 0e       	add	r12, r30
    9a36:	d1 1c       	adc	r13, r1
    9a38:	d7 01       	movw	r26, r14
    9a3a:	4d 91       	ld	r20, X+
    9a3c:	5d 91       	ld	r21, X+
    9a3e:	6d 91       	ld	r22, X+
    9a40:	7d 91       	ld	r23, X+
    9a42:	7d 01       	movw	r14, r26
    9a44:	41 15       	cp	r20, r1
    9a46:	51 05       	cpc	r21, r1
    9a48:	61 05       	cpc	r22, r1
    9a4a:	71 05       	cpc	r23, r1
    9a4c:	31 f0       	breq	.+12     	; 0x9a5a <mount_volume+0xf0>
    9a4e:	c8 01       	movw	r24, r16
    9a50:	4c df       	rcall	.-360    	; 0x98ea <check_fs>
    9a52:	82 30       	cpi	r24, 0x02	; 2
    9a54:	91 05       	cpc	r25, r1
    9a56:	18 f4       	brcc	.+6      	; 0x9a5e <mount_volume+0xf4>
    9a58:	05 c0       	rjmp	.+10     	; 0x9a64 <mount_volume+0xfa>
    9a5a:	83 e0       	ldi	r24, 0x03	; 3
    9a5c:	90 e0       	ldi	r25, 0x00	; 0
    9a5e:	ce 14       	cp	r12, r14
    9a60:	df 04       	cpc	r13, r15
    9a62:	51 f7       	brne	.-44     	; 0x9a38 <mount_volume+0xce>
    9a64:	84 30       	cpi	r24, 0x04	; 4
    9a66:	91 05       	cpc	r25, r1
    9a68:	09 f4       	brne	.+2      	; 0x9a6c <mount_volume+0x102>
    9a6a:	db c1       	rjmp	.+950    	; 0x9e22 <mount_volume+0x4b8>
    9a6c:	02 97       	sbiw	r24, 0x02	; 2
    9a6e:	18 f0       	brcs	.+6      	; 0x9a76 <mount_volume+0x10c>
    9a70:	8d e0       	ldi	r24, 0x0D	; 13
    9a72:	90 e0       	ldi	r25, 0x00	; 0
    9a74:	d8 c1       	rjmp	.+944    	; 0x9e26 <mount_volume+0x4bc>
    9a76:	f8 01       	movw	r30, r16
    9a78:	e0 5c       	subi	r30, 0xC0	; 192
    9a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    9a7c:	80 81       	ld	r24, Z
    9a7e:	91 81       	ldd	r25, Z+1	; 0x01
    9a80:	81 15       	cp	r24, r1
    9a82:	92 40       	sbci	r25, 0x02	; 2
    9a84:	a9 f7       	brne	.-22     	; 0x9a70 <mount_volume+0x106>
    9a86:	3b 96       	adiw	r30, 0x0b	; 11
    9a88:	40 80       	ld	r4, Z
    9a8a:	51 80       	ldd	r5, Z+1	; 0x01
    9a8c:	41 14       	cp	r4, r1
    9a8e:	51 04       	cpc	r5, r1
    9a90:	19 f0       	breq	.+6      	; 0x9a98 <mount_volume+0x12e>
    9a92:	61 2c       	mov	r6, r1
    9a94:	71 2c       	mov	r7, r1
    9a96:	06 c0       	rjmp	.+12     	; 0x9aa4 <mount_volume+0x13a>
    9a98:	c8 01       	movw	r24, r16
    9a9a:	87 5a       	subi	r24, 0xA7	; 167
    9a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    9a9e:	06 da       	rcall	.-3060   	; 0x8eac <ld_dword>
    9aa0:	2b 01       	movw	r4, r22
    9aa2:	3c 01       	movw	r6, r24
    9aa4:	d8 01       	movw	r26, r16
    9aa6:	d1 96       	adiw	r26, 0x31	; 49
    9aa8:	2d 91       	ld	r18, X+
    9aaa:	3d 91       	ld	r19, X+
    9aac:	4d 91       	ld	r20, X+
    9aae:	5c 91       	ld	r21, X
    9ab0:	d4 97       	sbiw	r26, 0x34	; 52
    9ab2:	29 8b       	std	Y+17, r18	; 0x11
    9ab4:	3a 8b       	std	Y+18, r19	; 0x12
    9ab6:	4b 8b       	std	Y+19, r20	; 0x13
    9ab8:	5c 8b       	std	Y+20, r21	; 0x14
    9aba:	f8 01       	movw	r30, r16
    9abc:	45 8e       	std	Z+29, r4	; 0x1d
    9abe:	56 8e       	std	Z+30, r5	; 0x1e
    9ac0:	67 8e       	std	Z+31, r6	; 0x1f
    9ac2:	70 a2       	std	Z+32, r7	; 0x20
    9ac4:	eb 5b       	subi	r30, 0xBB	; 187
    9ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    9ac8:	a0 80       	ld	r10, Z
    9aca:	12 96       	adiw	r26, 0x02	; 2
    9acc:	ac 92       	st	X, r10
    9ace:	12 97       	sbiw	r26, 0x02	; 2
    9ad0:	8f ef       	ldi	r24, 0xFF	; 255
    9ad2:	8a 0d       	add	r24, r10
    9ad4:	82 30       	cpi	r24, 0x02	; 2
    9ad6:	60 f6       	brcc	.-104    	; 0x9a70 <mount_volume+0x106>
    9ad8:	33 97       	sbiw	r30, 0x03	; 3
    9ada:	b0 80       	ld	r11, Z
    9adc:	8b 2d       	mov	r24, r11
    9ade:	90 e0       	ldi	r25, 0x00	; 0
    9ae0:	f8 01       	movw	r30, r16
    9ae2:	92 87       	std	Z+10, r25	; 0x0a
    9ae4:	81 87       	std	Z+9, r24	; 0x09
    9ae6:	00 97       	sbiw	r24, 0x00	; 0
    9ae8:	19 f2       	breq	.-122    	; 0x9a70 <mount_volume+0x106>
    9aea:	9c 01       	movw	r18, r24
    9aec:	21 50       	subi	r18, 0x01	; 1
    9aee:	31 09       	sbc	r19, r1
    9af0:	82 23       	and	r24, r18
    9af2:	93 23       	and	r25, r19
    9af4:	89 2b       	or	r24, r25
    9af6:	09 f0       	breq	.+2      	; 0x9afa <mount_volume+0x190>
    9af8:	bb cf       	rjmp	.-138    	; 0x9a70 <mount_volume+0x106>
    9afa:	ea 5b       	subi	r30, 0xBA	; 186
    9afc:	ff 4f       	sbci	r31, 0xFF	; 255
    9afe:	80 80       	ld	r8, Z
    9b00:	91 80       	ldd	r9, Z+1	; 0x01
    9b02:	18 96       	adiw	r26, 0x08	; 8
    9b04:	9c 92       	st	X, r9
    9b06:	8e 92       	st	-X, r8
    9b08:	17 97       	sbiw	r26, 0x07	; 7
    9b0a:	c4 01       	movw	r24, r8
    9b0c:	8f 70       	andi	r24, 0x0F	; 15
    9b0e:	99 27       	eor	r25, r25
    9b10:	89 2b       	or	r24, r25
    9b12:	09 f0       	breq	.+2      	; 0x9b16 <mount_volume+0x1ac>
    9b14:	ad cf       	rjmp	.-166    	; 0x9a70 <mount_volume+0x106>
    9b16:	32 96       	adiw	r30, 0x02	; 2
    9b18:	80 81       	ld	r24, Z
    9b1a:	91 81       	ldd	r25, Z+1	; 0x01
    9b1c:	6c 01       	movw	r12, r24
    9b1e:	e1 2c       	mov	r14, r1
    9b20:	f1 2c       	mov	r15, r1
    9b22:	89 2b       	or	r24, r25
    9b24:	31 f4       	brne	.+12     	; 0x9b32 <mount_volume+0x1c8>
    9b26:	c8 01       	movw	r24, r16
    9b28:	8b 5a       	subi	r24, 0xAB	; 171
    9b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    9b2c:	bf d9       	rcall	.-3202   	; 0x8eac <ld_dword>
    9b2e:	6b 01       	movw	r12, r22
    9b30:	7c 01       	movw	r14, r24
    9b32:	f8 01       	movw	r30, r16
    9b34:	ed 5b       	subi	r30, 0xBD	; 189
    9b36:	ff 4f       	sbci	r31, 0xFF	; 255
    9b38:	01 90       	ld	r0, Z+
    9b3a:	f0 81       	ld	r31, Z
    9b3c:	e0 2d       	mov	r30, r0
    9b3e:	30 97       	sbiw	r30, 0x00	; 0
    9b40:	09 f4       	brne	.+2      	; 0x9b44 <mount_volume+0x1da>
    9b42:	96 cf       	rjmp	.-212    	; 0x9a70 <mount_volume+0x106>
    9b44:	aa 2d       	mov	r26, r10
    9b46:	b0 e0       	ldi	r27, 0x00	; 0
    9b48:	a3 01       	movw	r20, r6
    9b4a:	92 01       	movw	r18, r4
    9b4c:	0e 94 15 e5 	call	0x1ca2a	; 0x1ca2a <__muluhisi3>
    9b50:	69 8f       	std	Y+25, r22	; 0x19
    9b52:	7a 8f       	std	Y+26, r23	; 0x1a
    9b54:	8b 8f       	std	Y+27, r24	; 0x1b
    9b56:	9c 8f       	std	Y+28, r25	; 0x1c
    9b58:	9f 01       	movw	r18, r30
    9b5a:	40 e0       	ldi	r20, 0x00	; 0
    9b5c:	50 e0       	ldi	r21, 0x00	; 0
    9b5e:	2d 8f       	std	Y+29, r18	; 0x1d
    9b60:	3e 8f       	std	Y+30, r19	; 0x1e
    9b62:	4f 8f       	std	Y+31, r20	; 0x1f
    9b64:	58 a3       	std	Y+32, r21	; 0x20
    9b66:	c4 01       	movw	r24, r8
    9b68:	f4 e0       	ldi	r31, 0x04	; 4
    9b6a:	96 95       	lsr	r25
    9b6c:	87 95       	ror	r24
    9b6e:	fa 95       	dec	r31
    9b70:	e1 f7       	brne	.-8      	; 0x9b6a <mount_volume+0x200>
    9b72:	28 0f       	add	r18, r24
    9b74:	39 1f       	adc	r19, r25
    9b76:	41 1d       	adc	r20, r1
    9b78:	51 1d       	adc	r21, r1
    9b7a:	da 01       	movw	r26, r20
    9b7c:	c9 01       	movw	r24, r18
    9b7e:	29 8d       	ldd	r18, Y+25	; 0x19
    9b80:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9b82:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9b84:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9b86:	28 0f       	add	r18, r24
    9b88:	39 1f       	adc	r19, r25
    9b8a:	4a 1f       	adc	r20, r26
    9b8c:	5b 1f       	adc	r21, r27
    9b8e:	2d 8b       	std	Y+21, r18	; 0x15
    9b90:	3e 8b       	std	Y+22, r19	; 0x16
    9b92:	4f 8b       	std	Y+23, r20	; 0x17
    9b94:	58 8f       	std	Y+24, r21	; 0x18
    9b96:	c2 16       	cp	r12, r18
    9b98:	d3 06       	cpc	r13, r19
    9b9a:	e4 06       	cpc	r14, r20
    9b9c:	f5 06       	cpc	r15, r21
    9b9e:	08 f4       	brcc	.+2      	; 0x9ba2 <mount_volume+0x238>
    9ba0:	67 cf       	rjmp	.-306    	; 0x9a70 <mount_volume+0x106>
    9ba2:	c7 01       	movw	r24, r14
    9ba4:	b6 01       	movw	r22, r12
    9ba6:	62 1b       	sub	r22, r18
    9ba8:	73 0b       	sbc	r23, r19
    9baa:	84 0b       	sbc	r24, r20
    9bac:	95 0b       	sbc	r25, r21
    9bae:	2b 2d       	mov	r18, r11
    9bb0:	30 e0       	ldi	r19, 0x00	; 0
    9bb2:	40 e0       	ldi	r20, 0x00	; 0
    9bb4:	50 e0       	ldi	r21, 0x00	; 0
    9bb6:	0e 94 b3 e4 	call	0x1c966	; 0x1c966 <__udivmodsi4>
    9bba:	da 01       	movw	r26, r20
    9bbc:	c9 01       	movw	r24, r18
    9bbe:	01 97       	sbiw	r24, 0x01	; 1
    9bc0:	a1 09       	sbc	r26, r1
    9bc2:	b1 09       	sbc	r27, r1
    9bc4:	85 3f       	cpi	r24, 0xF5	; 245
    9bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    9bc8:	af 4f       	sbci	r26, 0xFF	; 255
    9bca:	bf 40       	sbci	r27, 0x0F	; 15
    9bcc:	08 f0       	brcs	.+2      	; 0x9bd0 <mount_volume+0x266>
    9bce:	50 cf       	rjmp	.-352    	; 0x9a70 <mount_volume+0x106>
    9bd0:	26 3f       	cpi	r18, 0xF6	; 246
    9bd2:	8f ef       	ldi	r24, 0xFF	; 255
    9bd4:	38 07       	cpc	r19, r24
    9bd6:	41 05       	cpc	r20, r1
    9bd8:	51 05       	cpc	r21, r1
    9bda:	50 f4       	brcc	.+20     	; 0x9bf0 <mount_volume+0x286>
    9bdc:	26 3f       	cpi	r18, 0xF6	; 246
    9bde:	9f e0       	ldi	r25, 0x0F	; 15
    9be0:	39 07       	cpc	r19, r25
    9be2:	41 05       	cpc	r20, r1
    9be4:	51 05       	cpc	r21, r1
    9be6:	40 f4       	brcc	.+16     	; 0x9bf8 <mount_volume+0x28e>
    9be8:	aa 24       	eor	r10, r10
    9bea:	a3 94       	inc	r10
    9bec:	b1 2c       	mov	r11, r1
    9bee:	07 c0       	rjmp	.+14     	; 0x9bfe <mount_volume+0x294>
    9bf0:	73 e0       	ldi	r23, 0x03	; 3
    9bf2:	a7 2e       	mov	r10, r23
    9bf4:	b1 2c       	mov	r11, r1
    9bf6:	03 c0       	rjmp	.+6      	; 0x9bfe <mount_volume+0x294>
    9bf8:	62 e0       	ldi	r22, 0x02	; 2
    9bfa:	a6 2e       	mov	r10, r22
    9bfc:	b1 2c       	mov	r11, r1
    9bfe:	69 01       	movw	r12, r18
    9c00:	7a 01       	movw	r14, r20
    9c02:	a2 e0       	ldi	r26, 0x02	; 2
    9c04:	ca 0e       	add	r12, r26
    9c06:	d1 1c       	adc	r13, r1
    9c08:	e1 1c       	adc	r14, r1
    9c0a:	f1 1c       	adc	r15, r1
    9c0c:	f8 01       	movw	r30, r16
    9c0e:	c1 8e       	std	Z+25, r12	; 0x19
    9c10:	d2 8e       	std	Z+26, r13	; 0x1a
    9c12:	e3 8e       	std	Z+27, r14	; 0x1b
    9c14:	f4 8e       	std	Z+28, r15	; 0x1c
    9c16:	29 89       	ldd	r18, Y+17	; 0x11
    9c18:	3a 89       	ldd	r19, Y+18	; 0x12
    9c1a:	4b 89       	ldd	r20, Y+19	; 0x13
    9c1c:	5c 89       	ldd	r21, Y+20	; 0x14
    9c1e:	21 a3       	std	Z+33, r18	; 0x21
    9c20:	32 a3       	std	Z+34, r19	; 0x22
    9c22:	43 a3       	std	Z+35, r20	; 0x23
    9c24:	54 a3       	std	Z+36, r21	; 0x24
    9c26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9c28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9c2a:	af 8d       	ldd	r26, Y+31	; 0x1f
    9c2c:	b8 a1       	ldd	r27, Y+32	; 0x20
    9c2e:	28 0f       	add	r18, r24
    9c30:	39 1f       	adc	r19, r25
    9c32:	4a 1f       	adc	r20, r26
    9c34:	5b 1f       	adc	r21, r27
    9c36:	2d 8f       	std	Y+29, r18	; 0x1d
    9c38:	3e 8f       	std	Y+30, r19	; 0x1e
    9c3a:	4f 8f       	std	Y+31, r20	; 0x1f
    9c3c:	58 a3       	std	Y+32, r21	; 0x20
    9c3e:	25 a3       	std	Z+37, r18	; 0x25
    9c40:	36 a3       	std	Z+38, r19	; 0x26
    9c42:	47 a3       	std	Z+39, r20	; 0x27
    9c44:	50 a7       	std	Z+40, r21	; 0x28
    9c46:	49 89       	ldd	r20, Y+17	; 0x11
    9c48:	5a 89       	ldd	r21, Y+18	; 0x12
    9c4a:	6b 89       	ldd	r22, Y+19	; 0x13
    9c4c:	7c 89       	ldd	r23, Y+20	; 0x14
    9c4e:	8d 89       	ldd	r24, Y+21	; 0x15
    9c50:	9e 89       	ldd	r25, Y+22	; 0x16
    9c52:	af 89       	ldd	r26, Y+23	; 0x17
    9c54:	b8 8d       	ldd	r27, Y+24	; 0x18
    9c56:	48 0f       	add	r20, r24
    9c58:	59 1f       	adc	r21, r25
    9c5a:	6a 1f       	adc	r22, r26
    9c5c:	7b 1f       	adc	r23, r27
    9c5e:	45 a7       	std	Z+45, r20	; 0x2d
    9c60:	56 a7       	std	Z+46, r21	; 0x2e
    9c62:	67 a7       	std	Z+47, r22	; 0x2f
    9c64:	70 ab       	std	Z+48, r23	; 0x30
    9c66:	b3 e0       	ldi	r27, 0x03	; 3
    9c68:	ab 16       	cp	r10, r27
    9c6a:	b1 04       	cpc	r11, r1
    9c6c:	e1 f4       	brne	.+56     	; 0x9ca6 <mount_volume+0x33c>
    9c6e:	e1 5a       	subi	r30, 0xA1	; 161
    9c70:	ff 4f       	sbci	r31, 0xFF	; 255
    9c72:	80 81       	ld	r24, Z
    9c74:	91 81       	ldd	r25, Z+1	; 0x01
    9c76:	89 2b       	or	r24, r25
    9c78:	09 f0       	breq	.+2      	; 0x9c7c <mount_volume+0x312>
    9c7a:	fa ce       	rjmp	.-524    	; 0x9a70 <mount_volume+0x106>
    9c7c:	81 14       	cp	r8, r1
    9c7e:	91 04       	cpc	r9, r1
    9c80:	09 f0       	breq	.+2      	; 0x9c84 <mount_volume+0x31a>
    9c82:	f6 ce       	rjmp	.-532    	; 0x9a70 <mount_volume+0x106>
    9c84:	c8 01       	movw	r24, r16
    9c86:	8f 59       	subi	r24, 0x9F	; 159
    9c88:	9f 4f       	sbci	r25, 0xFF	; 255
    9c8a:	10 d9       	rcall	.-3552   	; 0x8eac <ld_dword>
    9c8c:	f8 01       	movw	r30, r16
    9c8e:	61 a7       	std	Z+41, r22	; 0x29
    9c90:	72 a7       	std	Z+42, r23	; 0x2a
    9c92:	83 a7       	std	Z+43, r24	; 0x2b
    9c94:	94 a7       	std	Z+44, r25	; 0x2c
    9c96:	42 e0       	ldi	r20, 0x02	; 2
    9c98:	cc 0c       	add	r12, r12
    9c9a:	dd 1c       	adc	r13, r13
    9c9c:	ee 1c       	adc	r14, r14
    9c9e:	ff 1c       	adc	r15, r15
    9ca0:	4a 95       	dec	r20
    9ca2:	d1 f7       	brne	.-12     	; 0x9c98 <mount_volume+0x32e>
    9ca4:	33 c0       	rjmp	.+102    	; 0x9d0c <mount_volume+0x3a2>
    9ca6:	81 14       	cp	r8, r1
    9ca8:	91 04       	cpc	r9, r1
    9caa:	09 f4       	brne	.+2      	; 0x9cae <mount_volume+0x344>
    9cac:	e1 ce       	rjmp	.-574    	; 0x9a70 <mount_volume+0x106>
    9cae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9cb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9cb2:	af 8d       	ldd	r26, Y+31	; 0x1f
    9cb4:	b8 a1       	ldd	r27, Y+32	; 0x20
    9cb6:	29 8d       	ldd	r18, Y+25	; 0x19
    9cb8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9cba:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9cbc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9cbe:	82 0f       	add	r24, r18
    9cc0:	93 1f       	adc	r25, r19
    9cc2:	a4 1f       	adc	r26, r20
    9cc4:	b5 1f       	adc	r27, r21
    9cc6:	f8 01       	movw	r30, r16
    9cc8:	81 a7       	std	Z+41, r24	; 0x29
    9cca:	92 a7       	std	Z+42, r25	; 0x2a
    9ccc:	a3 a7       	std	Z+43, r26	; 0x2b
    9cce:	b4 a7       	std	Z+44, r27	; 0x2c
    9cd0:	f2 e0       	ldi	r31, 0x02	; 2
    9cd2:	af 16       	cp	r10, r31
    9cd4:	b1 04       	cpc	r11, r1
    9cd6:	29 f4       	brne	.+10     	; 0x9ce2 <mount_volume+0x378>
    9cd8:	cc 0c       	add	r12, r12
    9cda:	dd 1c       	adc	r13, r13
    9cdc:	ee 1c       	adc	r14, r14
    9cde:	ff 1c       	adc	r15, r15
    9ce0:	15 c0       	rjmp	.+42     	; 0x9d0c <mount_volume+0x3a2>
    9ce2:	a3 e0       	ldi	r26, 0x03	; 3
    9ce4:	b0 e0       	ldi	r27, 0x00	; 0
    9ce6:	a7 01       	movw	r20, r14
    9ce8:	96 01       	movw	r18, r12
    9cea:	0e 94 15 e5 	call	0x1ca2a	; 0x1ca2a <__muluhisi3>
    9cee:	dc 01       	movw	r26, r24
    9cf0:	cb 01       	movw	r24, r22
    9cf2:	b6 95       	lsr	r27
    9cf4:	a7 95       	ror	r26
    9cf6:	97 95       	ror	r25
    9cf8:	87 95       	ror	r24
    9cfa:	21 e0       	ldi	r18, 0x01	; 1
    9cfc:	c2 22       	and	r12, r18
    9cfe:	dd 24       	eor	r13, r13
    9d00:	ee 24       	eor	r14, r14
    9d02:	ff 24       	eor	r15, r15
    9d04:	c8 0e       	add	r12, r24
    9d06:	d9 1e       	adc	r13, r25
    9d08:	ea 1e       	adc	r14, r26
    9d0a:	fb 1e       	adc	r15, r27
    9d0c:	3f ef       	ldi	r19, 0xFF	; 255
    9d0e:	c3 0e       	add	r12, r19
    9d10:	31 e0       	ldi	r19, 0x01	; 1
    9d12:	d3 1e       	adc	r13, r19
    9d14:	e1 1c       	adc	r14, r1
    9d16:	f1 1c       	adc	r15, r1
    9d18:	89 e0       	ldi	r24, 0x09	; 9
    9d1a:	f6 94       	lsr	r15
    9d1c:	e7 94       	ror	r14
    9d1e:	d7 94       	ror	r13
    9d20:	c7 94       	ror	r12
    9d22:	8a 95       	dec	r24
    9d24:	d1 f7       	brne	.-12     	; 0x9d1a <mount_volume+0x3b0>
    9d26:	4c 14       	cp	r4, r12
    9d28:	5d 04       	cpc	r5, r13
    9d2a:	6e 04       	cpc	r6, r14
    9d2c:	7f 04       	cpc	r7, r15
    9d2e:	08 f4       	brcc	.+2      	; 0x9d32 <mount_volume+0x3c8>
    9d30:	9f ce       	rjmp	.-706    	; 0x9a70 <mount_volume+0x106>
    9d32:	8f ef       	ldi	r24, 0xFF	; 255
    9d34:	9f ef       	ldi	r25, 0xFF	; 255
    9d36:	dc 01       	movw	r26, r24
    9d38:	f8 01       	movw	r30, r16
    9d3a:	81 8b       	std	Z+17, r24	; 0x11
    9d3c:	92 8b       	std	Z+18, r25	; 0x12
    9d3e:	a3 8b       	std	Z+19, r26	; 0x13
    9d40:	b4 8b       	std	Z+20, r27	; 0x14
    9d42:	85 87       	std	Z+13, r24	; 0x0d
    9d44:	96 87       	std	Z+14, r25	; 0x0e
    9d46:	a7 87       	std	Z+15, r26	; 0x0f
    9d48:	b0 8b       	std	Z+16, r27	; 0x10
    9d4a:	80 e8       	ldi	r24, 0x80	; 128
    9d4c:	84 83       	std	Z+4, r24	; 0x04
    9d4e:	f3 e0       	ldi	r31, 0x03	; 3
    9d50:	af 16       	cp	r10, r31
    9d52:	b1 04       	cpc	r11, r1
    9d54:	09 f0       	breq	.+2      	; 0x9d58 <mount_volume+0x3ee>
    9d56:	44 c0       	rjmp	.+136    	; 0x9de0 <mount_volume+0x476>
    9d58:	f8 01       	movw	r30, r16
    9d5a:	eb 59       	subi	r30, 0x9B	; 155
    9d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    9d5e:	80 81       	ld	r24, Z
    9d60:	91 81       	ldd	r25, Z+1	; 0x01
    9d62:	01 97       	sbiw	r24, 0x01	; 1
    9d64:	09 f0       	breq	.+2      	; 0x9d68 <mount_volume+0x3fe>
    9d66:	3c c0       	rjmp	.+120    	; 0x9de0 <mount_volume+0x476>
    9d68:	49 89       	ldd	r20, Y+17	; 0x11
    9d6a:	5a 89       	ldd	r21, Y+18	; 0x12
    9d6c:	6b 89       	ldd	r22, Y+19	; 0x13
    9d6e:	7c 89       	ldd	r23, Y+20	; 0x14
    9d70:	4f 5f       	subi	r20, 0xFF	; 255
    9d72:	5f 4f       	sbci	r21, 0xFF	; 255
    9d74:	6f 4f       	sbci	r22, 0xFF	; 255
    9d76:	7f 4f       	sbci	r23, 0xFF	; 255
    9d78:	c8 01       	movw	r24, r16
    9d7a:	7c dd       	rcall	.-1288   	; 0x9874 <move_window>
    9d7c:	89 2b       	or	r24, r25
    9d7e:	81 f5       	brne	.+96     	; 0x9de0 <mount_volume+0x476>
    9d80:	d8 01       	movw	r26, r16
    9d82:	14 96       	adiw	r26, 0x04	; 4
    9d84:	1c 92       	st	X, r1
    9d86:	f8 01       	movw	r30, r16
    9d88:	ed 5c       	subi	r30, 0xCD	; 205
    9d8a:	fd 4f       	sbci	r31, 0xFD	; 253
    9d8c:	80 81       	ld	r24, Z
    9d8e:	91 81       	ldd	r25, Z+1	; 0x01
    9d90:	85 35       	cpi	r24, 0x55	; 85
    9d92:	9a 4a       	sbci	r25, 0xAA	; 170
    9d94:	29 f5       	brne	.+74     	; 0x9de0 <mount_volume+0x476>
    9d96:	c8 01       	movw	r24, r16
    9d98:	c5 96       	adiw	r24, 0x35	; 53
    9d9a:	88 d8       	rcall	.-3824   	; 0x8eac <ld_dword>
    9d9c:	62 35       	cpi	r22, 0x52	; 82
    9d9e:	72 45       	sbci	r23, 0x52	; 82
    9da0:	81 46       	sbci	r24, 0x61	; 97
    9da2:	91 44       	sbci	r25, 0x41	; 65
    9da4:	e9 f4       	brne	.+58     	; 0x9de0 <mount_volume+0x476>
    9da6:	c8 01       	movw	r24, r16
    9da8:	87 5e       	subi	r24, 0xE7	; 231
    9daa:	9d 4f       	sbci	r25, 0xFD	; 253
    9dac:	7f d8       	rcall	.-3842   	; 0x8eac <ld_dword>
    9dae:	62 37       	cpi	r22, 0x72	; 114
    9db0:	72 47       	sbci	r23, 0x72	; 114
    9db2:	81 44       	sbci	r24, 0x41	; 65
    9db4:	91 46       	sbci	r25, 0x61	; 97
    9db6:	a1 f4       	brne	.+40     	; 0x9de0 <mount_volume+0x476>
    9db8:	c8 01       	movw	r24, r16
    9dba:	83 5e       	subi	r24, 0xE3	; 227
    9dbc:	9d 4f       	sbci	r25, 0xFD	; 253
    9dbe:	76 d8       	rcall	.-3860   	; 0x8eac <ld_dword>
    9dc0:	d8 01       	movw	r26, r16
    9dc2:	51 96       	adiw	r26, 0x11	; 17
    9dc4:	6d 93       	st	X+, r22
    9dc6:	7d 93       	st	X+, r23
    9dc8:	8d 93       	st	X+, r24
    9dca:	9c 93       	st	X, r25
    9dcc:	54 97       	sbiw	r26, 0x14	; 20
    9dce:	c8 01       	movw	r24, r16
    9dd0:	8f 5d       	subi	r24, 0xDF	; 223
    9dd2:	9d 4f       	sbci	r25, 0xFD	; 253
    9dd4:	6b d8       	rcall	.-3882   	; 0x8eac <ld_dword>
    9dd6:	f8 01       	movw	r30, r16
    9dd8:	65 87       	std	Z+13, r22	; 0x0d
    9dda:	76 87       	std	Z+14, r23	; 0x0e
    9ddc:	87 87       	std	Z+15, r24	; 0x0f
    9dde:	90 8b       	std	Z+16, r25	; 0x10
    9de0:	d8 01       	movw	r26, r16
    9de2:	ac 92       	st	X, r10
    9de4:	80 91 0f 18 	lds	r24, 0x180F	; 0x80180f <Fsid>
    9de8:	90 91 10 18 	lds	r25, 0x1810	; 0x801810 <Fsid+0x1>
    9dec:	01 96       	adiw	r24, 0x01	; 1
    9dee:	90 93 10 18 	sts	0x1810, r25	; 0x801810 <Fsid+0x1>
    9df2:	80 93 0f 18 	sts	0x180F, r24	; 0x80180f <Fsid>
    9df6:	16 96       	adiw	r26, 0x06	; 6
    9df8:	9c 93       	st	X, r25
    9dfa:	8e 93       	st	-X, r24
    9dfc:	15 97       	sbiw	r26, 0x05	; 5
    9dfe:	f8 01       	movw	r30, r16
    9e00:	15 8a       	std	Z+21, r1	; 0x15
    9e02:	16 8a       	std	Z+22, r1	; 0x16
    9e04:	17 8a       	std	Z+23, r1	; 0x17
    9e06:	10 8e       	std	Z+24, r1	; 0x18
    9e08:	06 c0       	rjmp	.+12     	; 0x9e16 <mount_volume+0x4ac>
    9e0a:	8b e0       	ldi	r24, 0x0B	; 11
    9e0c:	90 e0       	ldi	r25, 0x00	; 0
    9e0e:	0b c0       	rjmp	.+22     	; 0x9e26 <mount_volume+0x4bc>
    9e10:	8c e0       	ldi	r24, 0x0C	; 12
    9e12:	90 e0       	ldi	r25, 0x00	; 0
    9e14:	08 c0       	rjmp	.+16     	; 0x9e26 <mount_volume+0x4bc>
    9e16:	80 e0       	ldi	r24, 0x00	; 0
    9e18:	90 e0       	ldi	r25, 0x00	; 0
    9e1a:	05 c0       	rjmp	.+10     	; 0x9e26 <mount_volume+0x4bc>
    9e1c:	83 e0       	ldi	r24, 0x03	; 3
    9e1e:	90 e0       	ldi	r25, 0x00	; 0
    9e20:	02 c0       	rjmp	.+4      	; 0x9e26 <mount_volume+0x4bc>
    9e22:	81 e0       	ldi	r24, 0x01	; 1
    9e24:	90 e0       	ldi	r25, 0x00	; 0
    9e26:	a0 96       	adiw	r28, 0x20	; 32
    9e28:	e0 e1       	ldi	r30, 0x10	; 16
    9e2a:	0c 94 53 e5 	jmp	0x1caa6	; 0x1caa6 <__epilogue_restores__+0x4>

00009e2e <put_fat>:
    9e2e:	a6 e0       	ldi	r26, 0x06	; 6
    9e30:	b0 e0       	ldi	r27, 0x00	; 0
    9e32:	ed e1       	ldi	r30, 0x1D	; 29
    9e34:	ff e4       	ldi	r31, 0x4F	; 79
    9e36:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    9e3a:	42 30       	cpi	r20, 0x02	; 2
    9e3c:	51 05       	cpc	r21, r1
    9e3e:	61 05       	cpc	r22, r1
    9e40:	71 05       	cpc	r23, r1
    9e42:	08 f4       	brcc	.+2      	; 0x9e46 <put_fat+0x18>
    9e44:	eb c0       	rjmp	.+470    	; 0xa01c <put_fat+0x1ee>
    9e46:	dc 01       	movw	r26, r24
    9e48:	59 96       	adiw	r26, 0x19	; 25
    9e4a:	cd 90       	ld	r12, X+
    9e4c:	dd 90       	ld	r13, X+
    9e4e:	ed 90       	ld	r14, X+
    9e50:	fc 90       	ld	r15, X
    9e52:	5c 97       	sbiw	r26, 0x1c	; 28
    9e54:	4c 15       	cp	r20, r12
    9e56:	5d 05       	cpc	r21, r13
    9e58:	6e 05       	cpc	r22, r14
    9e5a:	7f 05       	cpc	r23, r15
    9e5c:	08 f0       	brcs	.+2      	; 0x9e60 <put_fat+0x32>
    9e5e:	de c0       	rjmp	.+444    	; 0xa01c <put_fat+0x1ee>
    9e60:	28 01       	movw	r4, r16
    9e62:	39 01       	movw	r6, r18
    9e64:	6a 01       	movw	r12, r20
    9e66:	7b 01       	movw	r14, r22
    9e68:	9e 83       	std	Y+6, r25	; 0x06
    9e6a:	8d 83       	std	Y+5, r24	; 0x05
    9e6c:	fc 01       	movw	r30, r24
    9e6e:	80 81       	ld	r24, Z
    9e70:	82 30       	cpi	r24, 0x02	; 2
    9e72:	09 f4       	brne	.+2      	; 0x9e76 <put_fat+0x48>
    9e74:	73 c0       	rjmp	.+230    	; 0x9f5c <put_fat+0x12e>
    9e76:	83 30       	cpi	r24, 0x03	; 3
    9e78:	09 f4       	brne	.+2      	; 0x9e7c <put_fat+0x4e>
    9e7a:	92 c0       	rjmp	.+292    	; 0x9fa0 <put_fat+0x172>
    9e7c:	81 30       	cpi	r24, 0x01	; 1
    9e7e:	09 f0       	breq	.+2      	; 0x9e82 <put_fat+0x54>
    9e80:	cd c0       	rjmp	.+410    	; 0xa01c <put_fat+0x1ee>
    9e82:	4a 01       	movw	r8, r20
    9e84:	96 94       	lsr	r9
    9e86:	87 94       	ror	r8
    9e88:	84 0e       	add	r8, r20
    9e8a:	95 1e       	adc	r9, r21
    9e8c:	c4 01       	movw	r24, r8
    9e8e:	89 2f       	mov	r24, r25
    9e90:	99 27       	eor	r25, r25
    9e92:	86 95       	lsr	r24
    9e94:	45 a1       	ldd	r20, Z+37	; 0x25
    9e96:	56 a1       	ldd	r21, Z+38	; 0x26
    9e98:	67 a1       	ldd	r22, Z+39	; 0x27
    9e9a:	70 a5       	ldd	r23, Z+40	; 0x28
    9e9c:	48 0f       	add	r20, r24
    9e9e:	59 1f       	adc	r21, r25
    9ea0:	61 1d       	adc	r22, r1
    9ea2:	71 1d       	adc	r23, r1
    9ea4:	cf 01       	movw	r24, r30
    9ea6:	e6 dc       	rcall	.-1588   	; 0x9874 <move_window>
    9ea8:	5c 01       	movw	r10, r24
    9eaa:	89 2b       	or	r24, r25
    9eac:	09 f0       	breq	.+2      	; 0x9eb0 <put_fat+0x82>
    9eae:	b9 c0       	rjmp	.+370    	; 0xa022 <put_fat+0x1f4>
    9eb0:	2d 80       	ldd	r2, Y+5	; 0x05
    9eb2:	3e 80       	ldd	r3, Y+6	; 0x06
    9eb4:	f5 e3       	ldi	r31, 0x35	; 53
    9eb6:	2f 0e       	add	r2, r31
    9eb8:	31 1c       	adc	r3, r1
    9eba:	84 01       	movw	r16, r8
    9ebc:	0f 5f       	subi	r16, 0xFF	; 255
    9ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    9ec0:	21 e0       	ldi	r18, 0x01	; 1
    9ec2:	92 22       	and	r9, r18
    9ec4:	f1 01       	movw	r30, r2
    9ec6:	e8 0d       	add	r30, r8
    9ec8:	f9 1d       	adc	r31, r9
    9eca:	d7 01       	movw	r26, r14
    9ecc:	c6 01       	movw	r24, r12
    9ece:	81 70       	andi	r24, 0x01	; 1
    9ed0:	99 27       	eor	r25, r25
    9ed2:	aa 27       	eor	r26, r26
    9ed4:	bb 27       	eor	r27, r27
    9ed6:	89 83       	std	Y+1, r24	; 0x01
    9ed8:	9a 83       	std	Y+2, r25	; 0x02
    9eda:	ab 83       	std	Y+3, r26	; 0x03
    9edc:	bc 83       	std	Y+4, r27	; 0x04
    9ede:	c0 fe       	sbrs	r12, 0
    9ee0:	09 c0       	rjmp	.+18     	; 0x9ef4 <put_fat+0xc6>
    9ee2:	80 81       	ld	r24, Z
    9ee4:	28 2f       	mov	r18, r24
    9ee6:	2f 70       	andi	r18, 0x0F	; 15
    9ee8:	a0 e1       	ldi	r26, 0x10	; 16
    9eea:	4a 9e       	mul	r4, r26
    9eec:	c0 01       	movw	r24, r0
    9eee:	11 24       	eor	r1, r1
    9ef0:	82 2b       	or	r24, r18
    9ef2:	01 c0       	rjmp	.+2      	; 0x9ef6 <put_fat+0xc8>
    9ef4:	84 2d       	mov	r24, r4
    9ef6:	80 83       	st	Z, r24
    9ef8:	81 e0       	ldi	r24, 0x01	; 1
    9efa:	ed 81       	ldd	r30, Y+5	; 0x05
    9efc:	fe 81       	ldd	r31, Y+6	; 0x06
    9efe:	83 83       	std	Z+3, r24	; 0x03
    9f00:	45 a1       	ldd	r20, Z+37	; 0x25
    9f02:	56 a1       	ldd	r21, Z+38	; 0x26
    9f04:	67 a1       	ldd	r22, Z+39	; 0x27
    9f06:	70 a5       	ldd	r23, Z+40	; 0x28
    9f08:	c8 01       	movw	r24, r16
    9f0a:	89 2f       	mov	r24, r25
    9f0c:	99 27       	eor	r25, r25
    9f0e:	86 95       	lsr	r24
    9f10:	48 0f       	add	r20, r24
    9f12:	59 1f       	adc	r21, r25
    9f14:	61 1d       	adc	r22, r1
    9f16:	71 1d       	adc	r23, r1
    9f18:	cf 01       	movw	r24, r30
    9f1a:	ac dc       	rcall	.-1704   	; 0x9874 <move_window>
    9f1c:	5c 01       	movw	r10, r24
    9f1e:	89 2b       	or	r24, r25
    9f20:	09 f0       	breq	.+2      	; 0x9f24 <put_fat+0xf6>
    9f22:	7f c0       	rjmp	.+254    	; 0xa022 <put_fat+0x1f4>
    9f24:	11 70       	andi	r17, 0x01	; 1
    9f26:	f1 01       	movw	r30, r2
    9f28:	e0 0f       	add	r30, r16
    9f2a:	f1 1f       	adc	r31, r17
    9f2c:	89 81       	ldd	r24, Y+1	; 0x01
    9f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    9f30:	ab 81       	ldd	r26, Y+3	; 0x03
    9f32:	bc 81       	ldd	r27, Y+4	; 0x04
    9f34:	89 2b       	or	r24, r25
    9f36:	8a 2b       	or	r24, r26
    9f38:	8b 2b       	or	r24, r27
    9f3a:	41 f0       	breq	.+16     	; 0x9f4c <put_fat+0x11e>
    9f3c:	54 e0       	ldi	r21, 0x04	; 4
    9f3e:	76 94       	lsr	r7
    9f40:	67 94       	ror	r6
    9f42:	57 94       	ror	r5
    9f44:	47 94       	ror	r4
    9f46:	5a 95       	dec	r21
    9f48:	d1 f7       	brne	.-12     	; 0x9f3e <put_fat+0x110>
    9f4a:	06 c0       	rjmp	.+12     	; 0x9f58 <put_fat+0x12a>
    9f4c:	00 81       	ld	r16, Z
    9f4e:	00 7f       	andi	r16, 0xF0	; 240
    9f50:	85 2d       	mov	r24, r5
    9f52:	8f 70       	andi	r24, 0x0F	; 15
    9f54:	40 2e       	mov	r4, r16
    9f56:	48 2a       	or	r4, r24
    9f58:	40 82       	st	Z, r4
    9f5a:	5a c0       	rjmp	.+180    	; 0xa010 <put_fat+0x1e2>
    9f5c:	77 27       	eor	r23, r23
    9f5e:	6f 2d       	mov	r22, r15
    9f60:	5e 2d       	mov	r21, r14
    9f62:	4d 2d       	mov	r20, r13
    9f64:	ed 81       	ldd	r30, Y+5	; 0x05
    9f66:	fe 81       	ldd	r31, Y+6	; 0x06
    9f68:	85 a1       	ldd	r24, Z+37	; 0x25
    9f6a:	96 a1       	ldd	r25, Z+38	; 0x26
    9f6c:	a7 a1       	ldd	r26, Z+39	; 0x27
    9f6e:	b0 a5       	ldd	r27, Z+40	; 0x28
    9f70:	48 0f       	add	r20, r24
    9f72:	59 1f       	adc	r21, r25
    9f74:	6a 1f       	adc	r22, r26
    9f76:	7b 1f       	adc	r23, r27
    9f78:	cf 01       	movw	r24, r30
    9f7a:	7c dc       	rcall	.-1800   	; 0x9874 <move_window>
    9f7c:	5c 01       	movw	r10, r24
    9f7e:	89 2b       	or	r24, r25
    9f80:	09 f0       	breq	.+2      	; 0x9f84 <put_fat+0x156>
    9f82:	4f c0       	rjmp	.+158    	; 0xa022 <put_fat+0x1f4>
    9f84:	ed 81       	ldd	r30, Y+5	; 0x05
    9f86:	fe 81       	ldd	r31, Y+6	; 0x06
    9f88:	f5 96       	adiw	r30, 0x35	; 53
    9f8a:	cc 0c       	add	r12, r12
    9f8c:	dd 1c       	adc	r13, r13
    9f8e:	e8 94       	clt
    9f90:	c0 f8       	bld	r12, 0
    9f92:	21 e0       	ldi	r18, 0x01	; 1
    9f94:	d2 22       	and	r13, r18
    9f96:	ec 0d       	add	r30, r12
    9f98:	fd 1d       	adc	r31, r13
    9f9a:	40 82       	st	Z, r4
    9f9c:	51 82       	std	Z+1, r5	; 0x01
    9f9e:	38 c0       	rjmp	.+112    	; 0xa010 <put_fat+0x1e2>
    9fa0:	ed 81       	ldd	r30, Y+5	; 0x05
    9fa2:	fe 81       	ldd	r31, Y+6	; 0x06
    9fa4:	85 a1       	ldd	r24, Z+37	; 0x25
    9fa6:	96 a1       	ldd	r25, Z+38	; 0x26
    9fa8:	a7 a1       	ldd	r26, Z+39	; 0x27
    9faa:	b0 a5       	ldd	r27, Z+40	; 0x28
    9fac:	27 e0       	ldi	r18, 0x07	; 7
    9fae:	76 95       	lsr	r23
    9fb0:	67 95       	ror	r22
    9fb2:	57 95       	ror	r21
    9fb4:	47 95       	ror	r20
    9fb6:	2a 95       	dec	r18
    9fb8:	d1 f7       	brne	.-12     	; 0x9fae <put_fat+0x180>
    9fba:	48 0f       	add	r20, r24
    9fbc:	59 1f       	adc	r21, r25
    9fbe:	6a 1f       	adc	r22, r26
    9fc0:	7b 1f       	adc	r23, r27
    9fc2:	cf 01       	movw	r24, r30
    9fc4:	57 dc       	rcall	.-1874   	; 0x9874 <move_window>
    9fc6:	5c 01       	movw	r10, r24
    9fc8:	89 2b       	or	r24, r25
    9fca:	59 f5       	brne	.+86     	; 0xa022 <put_fat+0x1f4>
    9fcc:	4d 81       	ldd	r20, Y+5	; 0x05
    9fce:	5e 81       	ldd	r21, Y+6	; 0x06
    9fd0:	4b 5c       	subi	r20, 0xCB	; 203
    9fd2:	5f 4f       	sbci	r21, 0xFF	; 255
    9fd4:	cc 0c       	add	r12, r12
    9fd6:	dd 1c       	adc	r13, r13
    9fd8:	cc 0c       	add	r12, r12
    9fda:	dd 1c       	adc	r13, r13
    9fdc:	fc ef       	ldi	r31, 0xFC	; 252
    9fde:	cf 22       	and	r12, r31
    9fe0:	f1 e0       	ldi	r31, 0x01	; 1
    9fe2:	df 22       	and	r13, r31
    9fe4:	c4 0e       	add	r12, r20
    9fe6:	d5 1e       	adc	r13, r21
    9fe8:	c6 01       	movw	r24, r12
    9fea:	0e 94 56 47 	call	0x8eac	; 0x8eac <ld_dword>
    9fee:	2f e0       	ldi	r18, 0x0F	; 15
    9ff0:	72 22       	and	r7, r18
    9ff2:	dc 01       	movw	r26, r24
    9ff4:	cb 01       	movw	r24, r22
    9ff6:	88 27       	eor	r24, r24
    9ff8:	99 27       	eor	r25, r25
    9ffa:	aa 27       	eor	r26, r26
    9ffc:	b0 7f       	andi	r27, 0xF0	; 240
    9ffe:	b3 01       	movw	r22, r6
    a000:	a2 01       	movw	r20, r4
    a002:	48 2b       	or	r20, r24
    a004:	59 2b       	or	r21, r25
    a006:	6a 2b       	or	r22, r26
    a008:	7b 2b       	or	r23, r27
    a00a:	c6 01       	movw	r24, r12
    a00c:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <st_dword>
    a010:	81 e0       	ldi	r24, 0x01	; 1
    a012:	ad 81       	ldd	r26, Y+5	; 0x05
    a014:	be 81       	ldd	r27, Y+6	; 0x06
    a016:	13 96       	adiw	r26, 0x03	; 3
    a018:	8c 93       	st	X, r24
    a01a:	03 c0       	rjmp	.+6      	; 0xa022 <put_fat+0x1f4>
    a01c:	82 e0       	ldi	r24, 0x02	; 2
    a01e:	a8 2e       	mov	r10, r24
    a020:	b1 2c       	mov	r11, r1
    a022:	c5 01       	movw	r24, r10
    a024:	26 96       	adiw	r28, 0x06	; 6
    a026:	e2 e1       	ldi	r30, 0x12	; 18
    a028:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0000a02c <get_fat.isra.10>:
    a02c:	a0 e0       	ldi	r26, 0x00	; 0
    a02e:	b0 e0       	ldi	r27, 0x00	; 0
    a030:	ec e1       	ldi	r30, 0x1C	; 28
    a032:	f0 e5       	ldi	r31, 0x50	; 80
    a034:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__prologue_saves__+0x10>
    a038:	42 30       	cpi	r20, 0x02	; 2
    a03a:	51 05       	cpc	r21, r1
    a03c:	61 05       	cpc	r22, r1
    a03e:	71 05       	cpc	r23, r1
    a040:	08 f4       	brcc	.+2      	; 0xa044 <get_fat.isra.10+0x18>
    a042:	9f c0       	rjmp	.+318    	; 0xa182 <get_fat.isra.10+0x156>
    a044:	fc 01       	movw	r30, r24
    a046:	01 8d       	ldd	r16, Z+25	; 0x19
    a048:	12 8d       	ldd	r17, Z+26	; 0x1a
    a04a:	23 8d       	ldd	r18, Z+27	; 0x1b
    a04c:	34 8d       	ldd	r19, Z+28	; 0x1c
    a04e:	40 17       	cp	r20, r16
    a050:	51 07       	cpc	r21, r17
    a052:	62 07       	cpc	r22, r18
    a054:	73 07       	cpc	r23, r19
    a056:	08 f0       	brcs	.+2      	; 0xa05a <get_fat.isra.10+0x2e>
    a058:	94 c0       	rjmp	.+296    	; 0xa182 <get_fat.isra.10+0x156>
    a05a:	6a 01       	movw	r12, r20
    a05c:	7b 01       	movw	r14, r22
    a05e:	8c 01       	movw	r16, r24
    a060:	80 81       	ld	r24, Z
    a062:	82 30       	cpi	r24, 0x02	; 2
    a064:	09 f4       	brne	.+2      	; 0xa068 <get_fat.isra.10+0x3c>
    a066:	4b c0       	rjmp	.+150    	; 0xa0fe <get_fat.isra.10+0xd2>
    a068:	83 30       	cpi	r24, 0x03	; 3
    a06a:	09 f4       	brne	.+2      	; 0xa06e <get_fat.isra.10+0x42>
    a06c:	67 c0       	rjmp	.+206    	; 0xa13c <get_fat.isra.10+0x110>
    a06e:	81 30       	cpi	r24, 0x01	; 1
    a070:	09 f0       	breq	.+2      	; 0xa074 <get_fat.isra.10+0x48>
    a072:	87 c0       	rjmp	.+270    	; 0xa182 <get_fat.isra.10+0x156>
    a074:	ea 01       	movw	r28, r20
    a076:	d6 95       	lsr	r29
    a078:	c7 95       	ror	r28
    a07a:	cc 0d       	add	r28, r12
    a07c:	dd 1d       	adc	r29, r13
    a07e:	ce 01       	movw	r24, r28
    a080:	89 2f       	mov	r24, r25
    a082:	99 27       	eor	r25, r25
    a084:	86 95       	lsr	r24
    a086:	45 a1       	ldd	r20, Z+37	; 0x25
    a088:	56 a1       	ldd	r21, Z+38	; 0x26
    a08a:	67 a1       	ldd	r22, Z+39	; 0x27
    a08c:	70 a5       	ldd	r23, Z+40	; 0x28
    a08e:	48 0f       	add	r20, r24
    a090:	59 1f       	adc	r21, r25
    a092:	61 1d       	adc	r22, r1
    a094:	71 1d       	adc	r23, r1
    a096:	cf 01       	movw	r24, r30
    a098:	ed db       	rcall	.-2086   	; 0x9874 <move_window>
    a09a:	89 2b       	or	r24, r25
    a09c:	21 f0       	breq	.+8      	; 0xa0a6 <get_fat.isra.10+0x7a>
    a09e:	6f ef       	ldi	r22, 0xFF	; 255
    a0a0:	7f ef       	ldi	r23, 0xFF	; 255
    a0a2:	cb 01       	movw	r24, r22
    a0a4:	72 c0       	rjmp	.+228    	; 0xa18a <get_fat.isra.10+0x15e>
    a0a6:	5e 01       	movw	r10, r28
    a0a8:	ff ef       	ldi	r31, 0xFF	; 255
    a0aa:	af 1a       	sub	r10, r31
    a0ac:	bf 0a       	sbc	r11, r31
    a0ae:	d1 70       	andi	r29, 0x01	; 1
    a0b0:	c0 0f       	add	r28, r16
    a0b2:	d1 1f       	adc	r29, r17
    a0b4:	cd a9       	ldd	r28, Y+53	; 0x35
    a0b6:	c5 01       	movw	r24, r10
    a0b8:	89 2f       	mov	r24, r25
    a0ba:	99 27       	eor	r25, r25
    a0bc:	86 95       	lsr	r24
    a0be:	f8 01       	movw	r30, r16
    a0c0:	45 a1       	ldd	r20, Z+37	; 0x25
    a0c2:	56 a1       	ldd	r21, Z+38	; 0x26
    a0c4:	67 a1       	ldd	r22, Z+39	; 0x27
    a0c6:	70 a5       	ldd	r23, Z+40	; 0x28
    a0c8:	48 0f       	add	r20, r24
    a0ca:	59 1f       	adc	r21, r25
    a0cc:	61 1d       	adc	r22, r1
    a0ce:	71 1d       	adc	r23, r1
    a0d0:	c8 01       	movw	r24, r16
    a0d2:	d0 db       	rcall	.-2144   	; 0x9874 <move_window>
    a0d4:	89 2b       	or	r24, r25
    a0d6:	19 f7       	brne	.-58     	; 0xa09e <get_fat.isra.10+0x72>
    a0d8:	f1 e0       	ldi	r31, 0x01	; 1
    a0da:	bf 22       	and	r11, r31
    a0dc:	f8 01       	movw	r30, r16
    a0de:	ea 0d       	add	r30, r10
    a0e0:	fb 1d       	adc	r31, r11
    a0e2:	85 a9       	ldd	r24, Z+53	; 0x35
    a0e4:	6c 2f       	mov	r22, r28
    a0e6:	70 e0       	ldi	r23, 0x00	; 0
    a0e8:	78 2b       	or	r23, r24
    a0ea:	c0 fe       	sbrs	r12, 0
    a0ec:	06 c0       	rjmp	.+12     	; 0xa0fa <get_fat.isra.10+0xce>
    a0ee:	54 e0       	ldi	r21, 0x04	; 4
    a0f0:	76 95       	lsr	r23
    a0f2:	67 95       	ror	r22
    a0f4:	5a 95       	dec	r21
    a0f6:	e1 f7       	brne	.-8      	; 0xa0f0 <get_fat.isra.10+0xc4>
    a0f8:	1e c0       	rjmp	.+60     	; 0xa136 <get_fat.isra.10+0x10a>
    a0fa:	7f 70       	andi	r23, 0x0F	; 15
    a0fc:	1c c0       	rjmp	.+56     	; 0xa136 <get_fat.isra.10+0x10a>
    a0fe:	77 27       	eor	r23, r23
    a100:	6f 2d       	mov	r22, r15
    a102:	5e 2d       	mov	r21, r14
    a104:	4d 2d       	mov	r20, r13
    a106:	85 a1       	ldd	r24, Z+37	; 0x25
    a108:	96 a1       	ldd	r25, Z+38	; 0x26
    a10a:	a7 a1       	ldd	r26, Z+39	; 0x27
    a10c:	b0 a5       	ldd	r27, Z+40	; 0x28
    a10e:	48 0f       	add	r20, r24
    a110:	59 1f       	adc	r21, r25
    a112:	6a 1f       	adc	r22, r26
    a114:	7b 1f       	adc	r23, r27
    a116:	cf 01       	movw	r24, r30
    a118:	ad db       	rcall	.-2214   	; 0x9874 <move_window>
    a11a:	89 2b       	or	r24, r25
    a11c:	09 f0       	breq	.+2      	; 0xa120 <get_fat.isra.10+0xf4>
    a11e:	bf cf       	rjmp	.-130    	; 0xa09e <get_fat.isra.10+0x72>
    a120:	cc 0c       	add	r12, r12
    a122:	dd 1c       	adc	r13, r13
    a124:	e8 94       	clt
    a126:	c0 f8       	bld	r12, 0
    a128:	f1 e0       	ldi	r31, 0x01	; 1
    a12a:	df 22       	and	r13, r31
    a12c:	f8 01       	movw	r30, r16
    a12e:	ec 0d       	add	r30, r12
    a130:	fd 1d       	adc	r31, r13
    a132:	65 a9       	ldd	r22, Z+53	; 0x35
    a134:	76 a9       	ldd	r23, Z+54	; 0x36
    a136:	80 e0       	ldi	r24, 0x00	; 0
    a138:	90 e0       	ldi	r25, 0x00	; 0
    a13a:	27 c0       	rjmp	.+78     	; 0xa18a <get_fat.isra.10+0x15e>
    a13c:	85 a1       	ldd	r24, Z+37	; 0x25
    a13e:	96 a1       	ldd	r25, Z+38	; 0x26
    a140:	a7 a1       	ldd	r26, Z+39	; 0x27
    a142:	b0 a5       	ldd	r27, Z+40	; 0x28
    a144:	27 e0       	ldi	r18, 0x07	; 7
    a146:	76 95       	lsr	r23
    a148:	67 95       	ror	r22
    a14a:	57 95       	ror	r21
    a14c:	47 95       	ror	r20
    a14e:	2a 95       	dec	r18
    a150:	d1 f7       	brne	.-12     	; 0xa146 <get_fat.isra.10+0x11a>
    a152:	48 0f       	add	r20, r24
    a154:	59 1f       	adc	r21, r25
    a156:	6a 1f       	adc	r22, r26
    a158:	7b 1f       	adc	r23, r27
    a15a:	cf 01       	movw	r24, r30
    a15c:	8b db       	rcall	.-2282   	; 0x9874 <move_window>
    a15e:	89 2b       	or	r24, r25
    a160:	09 f0       	breq	.+2      	; 0xa164 <get_fat.isra.10+0x138>
    a162:	9d cf       	rjmp	.-198    	; 0xa09e <get_fat.isra.10+0x72>
    a164:	0b 5c       	subi	r16, 0xCB	; 203
    a166:	1f 4f       	sbci	r17, 0xFF	; 255
    a168:	cc 0c       	add	r12, r12
    a16a:	dd 1c       	adc	r13, r13
    a16c:	cc 0c       	add	r12, r12
    a16e:	dd 1c       	adc	r13, r13
    a170:	c6 01       	movw	r24, r12
    a172:	8c 7f       	andi	r24, 0xFC	; 252
    a174:	91 70       	andi	r25, 0x01	; 1
    a176:	80 0f       	add	r24, r16
    a178:	91 1f       	adc	r25, r17
    a17a:	0e 94 56 47 	call	0x8eac	; 0x8eac <ld_dword>
    a17e:	9f 70       	andi	r25, 0x0F	; 15
    a180:	04 c0       	rjmp	.+8      	; 0xa18a <get_fat.isra.10+0x15e>
    a182:	61 e0       	ldi	r22, 0x01	; 1
    a184:	70 e0       	ldi	r23, 0x00	; 0
    a186:	80 e0       	ldi	r24, 0x00	; 0
    a188:	90 e0       	ldi	r25, 0x00	; 0
    a18a:	cd b7       	in	r28, 0x3d	; 61
    a18c:	de b7       	in	r29, 0x3e	; 62
    a18e:	ea e0       	ldi	r30, 0x0A	; 10
    a190:	0c 94 59 e5 	jmp	0x1cab2	; 0x1cab2 <__epilogue_restores__+0x10>

0000a194 <dir_sdi>:
    a194:	a0 e0       	ldi	r26, 0x00	; 0
    a196:	b0 e0       	ldi	r27, 0x00	; 0
    a198:	e0 ed       	ldi	r30, 0xD0	; 208
    a19a:	f0 e5       	ldi	r31, 0x50	; 80
    a19c:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__prologue_saves__+0x4>
    a1a0:	ec 01       	movw	r28, r24
    a1a2:	6a 01       	movw	r12, r20
    a1a4:	7b 01       	movw	r14, r22
    a1a6:	41 15       	cp	r20, r1
    a1a8:	51 05       	cpc	r21, r1
    a1aa:	80 e2       	ldi	r24, 0x20	; 32
    a1ac:	68 07       	cpc	r22, r24
    a1ae:	71 05       	cpc	r23, r1
    a1b0:	18 f0       	brcs	.+6      	; 0xa1b8 <dir_sdi+0x24>
    a1b2:	82 e0       	ldi	r24, 0x02	; 2
    a1b4:	90 e0       	ldi	r25, 0x00	; 0
    a1b6:	aa c0       	rjmp	.+340    	; 0xa30c <dir_sdi+0x178>
    a1b8:	db 01       	movw	r26, r22
    a1ba:	ca 01       	movw	r24, r20
    a1bc:	8f 71       	andi	r24, 0x1F	; 31
    a1be:	99 27       	eor	r25, r25
    a1c0:	aa 27       	eor	r26, r26
    a1c2:	bb 27       	eor	r27, r27
    a1c4:	89 2b       	or	r24, r25
    a1c6:	8a 2b       	or	r24, r26
    a1c8:	8b 2b       	or	r24, r27
    a1ca:	99 f7       	brne	.-26     	; 0xa1b2 <dir_sdi+0x1e>
    a1cc:	08 81       	ld	r16, Y
    a1ce:	19 81       	ldd	r17, Y+1	; 0x01
    a1d0:	4e 87       	std	Y+14, r20	; 0x0e
    a1d2:	5f 87       	std	Y+15, r21	; 0x0f
    a1d4:	68 8b       	std	Y+16, r22	; 0x10
    a1d6:	79 8b       	std	Y+17, r23	; 0x11
    a1d8:	8e 80       	ldd	r8, Y+6	; 0x06
    a1da:	9f 80       	ldd	r9, Y+7	; 0x07
    a1dc:	a8 84       	ldd	r10, Y+8	; 0x08
    a1de:	b9 84       	ldd	r11, Y+9	; 0x09
    a1e0:	81 14       	cp	r8, r1
    a1e2:	91 04       	cpc	r9, r1
    a1e4:	a1 04       	cpc	r10, r1
    a1e6:	b1 04       	cpc	r11, r1
    a1e8:	51 f5       	brne	.+84     	; 0xa23e <dir_sdi+0xaa>
    a1ea:	f8 01       	movw	r30, r16
    a1ec:	80 81       	ld	r24, Z
    a1ee:	83 30       	cpi	r24, 0x03	; 3
    a1f0:	40 f0       	brcs	.+16     	; 0xa202 <dir_sdi+0x6e>
    a1f2:	81 a5       	ldd	r24, Z+41	; 0x29
    a1f4:	92 a5       	ldd	r25, Z+42	; 0x2a
    a1f6:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a1f8:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a1fa:	00 97       	sbiw	r24, 0x00	; 0
    a1fc:	a1 05       	cpc	r26, r1
    a1fe:	b1 05       	cpc	r27, r1
    a200:	e1 f4       	brne	.+56     	; 0xa23a <dir_sdi+0xa6>
    a202:	f8 01       	movw	r30, r16
    a204:	87 81       	ldd	r24, Z+7	; 0x07
    a206:	90 85       	ldd	r25, Z+8	; 0x08
    a208:	a0 e0       	ldi	r26, 0x00	; 0
    a20a:	b0 e0       	ldi	r27, 0x00	; 0
    a20c:	b7 01       	movw	r22, r14
    a20e:	a6 01       	movw	r20, r12
    a210:	25 e0       	ldi	r18, 0x05	; 5
    a212:	76 95       	lsr	r23
    a214:	67 95       	ror	r22
    a216:	57 95       	ror	r21
    a218:	47 95       	ror	r20
    a21a:	2a 95       	dec	r18
    a21c:	d1 f7       	brne	.-12     	; 0xa212 <dir_sdi+0x7e>
    a21e:	48 17       	cp	r20, r24
    a220:	59 07       	cpc	r21, r25
    a222:	6a 07       	cpc	r22, r26
    a224:	7b 07       	cpc	r23, r27
    a226:	28 f6       	brcc	.-118    	; 0xa1b2 <dir_sdi+0x1e>
    a228:	81 a5       	ldd	r24, Z+41	; 0x29
    a22a:	92 a5       	ldd	r25, Z+42	; 0x2a
    a22c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a22e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a230:	8e 8b       	std	Y+22, r24	; 0x16
    a232:	9f 8b       	std	Y+23, r25	; 0x17
    a234:	a8 8f       	std	Y+24, r26	; 0x18
    a236:	b9 8f       	std	Y+25, r27	; 0x19
    a238:	3e c0       	rjmp	.+124    	; 0xa2b6 <dir_sdi+0x122>
    a23a:	4c 01       	movw	r8, r24
    a23c:	5d 01       	movw	r10, r26
    a23e:	f8 01       	movw	r30, r16
    a240:	41 84       	ldd	r4, Z+9	; 0x09
    a242:	52 84       	ldd	r5, Z+10	; 0x0a
    a244:	61 2c       	mov	r6, r1
    a246:	71 2c       	mov	r7, r1
    a248:	39 e0       	ldi	r19, 0x09	; 9
    a24a:	44 0c       	add	r4, r4
    a24c:	55 1c       	adc	r5, r5
    a24e:	66 1c       	adc	r6, r6
    a250:	77 1c       	adc	r7, r7
    a252:	3a 95       	dec	r19
    a254:	d1 f7       	brne	.-12     	; 0xa24a <dir_sdi+0xb6>
    a256:	b5 01       	movw	r22, r10
    a258:	a4 01       	movw	r20, r8
    a25a:	c4 14       	cp	r12, r4
    a25c:	d5 04       	cpc	r13, r5
    a25e:	e6 04       	cpc	r14, r6
    a260:	f7 04       	cpc	r15, r7
    a262:	10 f1       	brcs	.+68     	; 0xa2a8 <dir_sdi+0x114>
    a264:	88 81       	ld	r24, Y
    a266:	99 81       	ldd	r25, Y+1	; 0x01
    a268:	e1 de       	rcall	.-574    	; 0xa02c <get_fat.isra.10>
    a26a:	4b 01       	movw	r8, r22
    a26c:	5c 01       	movw	r10, r24
    a26e:	6f 3f       	cpi	r22, 0xFF	; 255
    a270:	7f 4f       	sbci	r23, 0xFF	; 255
    a272:	8f 4f       	sbci	r24, 0xFF	; 255
    a274:	9f 4f       	sbci	r25, 0xFF	; 255
    a276:	09 f4       	brne	.+2      	; 0xa27a <dir_sdi+0xe6>
    a278:	47 c0       	rjmp	.+142    	; 0xa308 <dir_sdi+0x174>
    a27a:	82 e0       	ldi	r24, 0x02	; 2
    a27c:	88 16       	cp	r8, r24
    a27e:	91 04       	cpc	r9, r1
    a280:	a1 04       	cpc	r10, r1
    a282:	b1 04       	cpc	r11, r1
    a284:	08 f4       	brcc	.+2      	; 0xa288 <dir_sdi+0xf4>
    a286:	95 cf       	rjmp	.-214    	; 0xa1b2 <dir_sdi+0x1e>
    a288:	f8 01       	movw	r30, r16
    a28a:	81 8d       	ldd	r24, Z+25	; 0x19
    a28c:	92 8d       	ldd	r25, Z+26	; 0x1a
    a28e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a290:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a292:	88 16       	cp	r8, r24
    a294:	99 06       	cpc	r9, r25
    a296:	aa 06       	cpc	r10, r26
    a298:	bb 06       	cpc	r11, r27
    a29a:	08 f0       	brcs	.+2      	; 0xa29e <dir_sdi+0x10a>
    a29c:	8a cf       	rjmp	.-236    	; 0xa1b2 <dir_sdi+0x1e>
    a29e:	c4 18       	sub	r12, r4
    a2a0:	d5 08       	sbc	r13, r5
    a2a2:	e6 08       	sbc	r14, r6
    a2a4:	f7 08       	sbc	r15, r7
    a2a6:	d7 cf       	rjmp	.-82     	; 0xa256 <dir_sdi+0xc2>
    a2a8:	c8 01       	movw	r24, r16
    a2aa:	0e 94 0f 48 	call	0x901e	; 0x901e <clst2sect>
    a2ae:	6e 8b       	std	Y+22, r22	; 0x16
    a2b0:	7f 8b       	std	Y+23, r23	; 0x17
    a2b2:	88 8f       	std	Y+24, r24	; 0x18
    a2b4:	99 8f       	std	Y+25, r25	; 0x19
    a2b6:	8a 8a       	std	Y+18, r8	; 0x12
    a2b8:	9b 8a       	std	Y+19, r9	; 0x13
    a2ba:	ac 8a       	std	Y+20, r10	; 0x14
    a2bc:	bd 8a       	std	Y+21, r11	; 0x15
    a2be:	8e 89       	ldd	r24, Y+22	; 0x16
    a2c0:	9f 89       	ldd	r25, Y+23	; 0x17
    a2c2:	a8 8d       	ldd	r26, Y+24	; 0x18
    a2c4:	b9 8d       	ldd	r27, Y+25	; 0x19
    a2c6:	00 97       	sbiw	r24, 0x00	; 0
    a2c8:	a1 05       	cpc	r26, r1
    a2ca:	b1 05       	cpc	r27, r1
    a2cc:	09 f4       	brne	.+2      	; 0xa2d0 <dir_sdi+0x13c>
    a2ce:	71 cf       	rjmp	.-286    	; 0xa1b2 <dir_sdi+0x1e>
    a2d0:	b7 01       	movw	r22, r14
    a2d2:	a6 01       	movw	r20, r12
    a2d4:	29 e0       	ldi	r18, 0x09	; 9
    a2d6:	76 95       	lsr	r23
    a2d8:	67 95       	ror	r22
    a2da:	57 95       	ror	r21
    a2dc:	47 95       	ror	r20
    a2de:	2a 95       	dec	r18
    a2e0:	d1 f7       	brne	.-12     	; 0xa2d6 <dir_sdi+0x142>
    a2e2:	84 0f       	add	r24, r20
    a2e4:	95 1f       	adc	r25, r21
    a2e6:	a6 1f       	adc	r26, r22
    a2e8:	b7 1f       	adc	r27, r23
    a2ea:	8e 8b       	std	Y+22, r24	; 0x16
    a2ec:	9f 8b       	std	Y+23, r25	; 0x17
    a2ee:	a8 8f       	std	Y+24, r26	; 0x18
    a2f0:	b9 8f       	std	Y+25, r27	; 0x19
    a2f2:	0b 5c       	subi	r16, 0xCB	; 203
    a2f4:	1f 4f       	sbci	r17, 0xFF	; 255
    a2f6:	f1 e0       	ldi	r31, 0x01	; 1
    a2f8:	df 22       	and	r13, r31
    a2fa:	c0 0e       	add	r12, r16
    a2fc:	d1 1e       	adc	r13, r17
    a2fe:	db 8e       	std	Y+27, r13	; 0x1b
    a300:	ca 8e       	std	Y+26, r12	; 0x1a
    a302:	80 e0       	ldi	r24, 0x00	; 0
    a304:	90 e0       	ldi	r25, 0x00	; 0
    a306:	02 c0       	rjmp	.+4      	; 0xa30c <dir_sdi+0x178>
    a308:	81 e0       	ldi	r24, 0x01	; 1
    a30a:	90 e0       	ldi	r25, 0x00	; 0
    a30c:	cd b7       	in	r28, 0x3d	; 61
    a30e:	de b7       	in	r29, 0x3e	; 62
    a310:	e0 e1       	ldi	r30, 0x10	; 16
    a312:	0c 94 53 e5 	jmp	0x1caa6	; 0x1caa6 <__epilogue_restores__+0x4>

0000a316 <create_chain>:
    a316:	a0 e0       	ldi	r26, 0x00	; 0
    a318:	b0 e0       	ldi	r27, 0x00	; 0
    a31a:	e1 e9       	ldi	r30, 0x91	; 145
    a31c:	f1 e5       	ldi	r31, 0x51	; 81
    a31e:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__prologue_saves__+0x4>
    a322:	8c 01       	movw	r16, r24
    a324:	2a 01       	movw	r4, r20
    a326:	3b 01       	movw	r6, r22
    a328:	fc 01       	movw	r30, r24
    a32a:	c0 81       	ld	r28, Z
    a32c:	d1 81       	ldd	r29, Z+1	; 0x01
    a32e:	41 15       	cp	r20, r1
    a330:	51 05       	cpc	r21, r1
    a332:	61 05       	cpc	r22, r1
    a334:	71 05       	cpc	r23, r1
    a336:	99 f4       	brne	.+38     	; 0xa35e <create_chain+0x48>
    a338:	8d 84       	ldd	r8, Y+13	; 0x0d
    a33a:	9e 84       	ldd	r9, Y+14	; 0x0e
    a33c:	af 84       	ldd	r10, Y+15	; 0x0f
    a33e:	b8 88       	ldd	r11, Y+16	; 0x10
    a340:	81 14       	cp	r8, r1
    a342:	91 04       	cpc	r9, r1
    a344:	a1 04       	cpc	r10, r1
    a346:	b1 04       	cpc	r11, r1
    a348:	51 f1       	breq	.+84     	; 0xa39e <create_chain+0x88>
    a34a:	89 8d       	ldd	r24, Y+25	; 0x19
    a34c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a34e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a350:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a352:	88 16       	cp	r8, r24
    a354:	99 06       	cpc	r9, r25
    a356:	aa 06       	cpc	r10, r26
    a358:	bb 06       	cpc	r11, r27
    a35a:	28 f1       	brcs	.+74     	; 0xa3a6 <create_chain+0x90>
    a35c:	20 c0       	rjmp	.+64     	; 0xa39e <create_chain+0x88>
    a35e:	ce 01       	movw	r24, r28
    a360:	65 de       	rcall	.-822    	; 0xa02c <get_fat.isra.10>
    a362:	62 30       	cpi	r22, 0x02	; 2
    a364:	71 05       	cpc	r23, r1
    a366:	81 05       	cpc	r24, r1
    a368:	91 05       	cpc	r25, r1
    a36a:	08 f4       	brcc	.+2      	; 0xa36e <create_chain+0x58>
    a36c:	ea c0       	rjmp	.+468    	; 0xa542 <create_chain+0x22c>
    a36e:	6f 3f       	cpi	r22, 0xFF	; 255
    a370:	ff ef       	ldi	r31, 0xFF	; 255
    a372:	7f 07       	cpc	r23, r31
    a374:	8f 07       	cpc	r24, r31
    a376:	9f 07       	cpc	r25, r31
    a378:	29 f4       	brne	.+10     	; 0xa384 <create_chain+0x6e>
    a37a:	4f ef       	ldi	r20, 0xFF	; 255
    a37c:	3f ef       	ldi	r19, 0xFF	; 255
    a37e:	2f ef       	ldi	r18, 0xFF	; 255
    a380:	9f ef       	ldi	r25, 0xFF	; 255
    a382:	e7 c0       	rjmp	.+462    	; 0xa552 <create_chain+0x23c>
    a384:	c9 8c       	ldd	r12, Y+25	; 0x19
    a386:	da 8c       	ldd	r13, Y+26	; 0x1a
    a388:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a38a:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a38c:	6c 15       	cp	r22, r12
    a38e:	7d 05       	cpc	r23, r13
    a390:	8e 05       	cpc	r24, r14
    a392:	9f 05       	cpc	r25, r15
    a394:	08 f4       	brcc	.+2      	; 0xa398 <create_chain+0x82>
    a396:	da c0       	rjmp	.+436    	; 0xa54c <create_chain+0x236>
    a398:	53 01       	movw	r10, r6
    a39a:	42 01       	movw	r8, r4
    a39c:	04 c0       	rjmp	.+8      	; 0xa3a6 <create_chain+0x90>
    a39e:	81 2c       	mov	r8, r1
    a3a0:	91 2c       	mov	r9, r1
    a3a2:	54 01       	movw	r10, r8
    a3a4:	83 94       	inc	r8
    a3a6:	89 89       	ldd	r24, Y+17	; 0x11
    a3a8:	9a 89       	ldd	r25, Y+18	; 0x12
    a3aa:	ab 89       	ldd	r26, Y+19	; 0x13
    a3ac:	bc 89       	ldd	r27, Y+20	; 0x14
    a3ae:	89 2b       	or	r24, r25
    a3b0:	8a 2b       	or	r24, r26
    a3b2:	8b 2b       	or	r24, r27
    a3b4:	11 f4       	brne	.+4      	; 0xa3ba <create_chain+0xa4>
    a3b6:	40 e0       	ldi	r20, 0x00	; 0
    a3b8:	c5 c0       	rjmp	.+394    	; 0xa544 <create_chain+0x22e>
    a3ba:	84 14       	cp	r8, r4
    a3bc:	95 04       	cpc	r9, r5
    a3be:	a6 04       	cpc	r10, r6
    a3c0:	b7 04       	cpc	r11, r7
    a3c2:	09 f0       	breq	.+2      	; 0xa3c6 <create_chain+0xb0>
    a3c4:	46 c0       	rjmp	.+140    	; 0xa452 <create_chain+0x13c>
    a3c6:	75 01       	movw	r14, r10
    a3c8:	64 01       	movw	r12, r8
    a3ca:	2f ef       	ldi	r18, 0xFF	; 255
    a3cc:	c2 1a       	sub	r12, r18
    a3ce:	d2 0a       	sbc	r13, r18
    a3d0:	e2 0a       	sbc	r14, r18
    a3d2:	f2 0a       	sbc	r15, r18
    a3d4:	89 8d       	ldd	r24, Y+25	; 0x19
    a3d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a3d8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a3da:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a3dc:	c8 16       	cp	r12, r24
    a3de:	d9 06       	cpc	r13, r25
    a3e0:	ea 06       	cpc	r14, r26
    a3e2:	fb 06       	cpc	r15, r27
    a3e4:	28 f0       	brcs	.+10     	; 0xa3f0 <create_chain+0xda>
    a3e6:	92 e0       	ldi	r25, 0x02	; 2
    a3e8:	c9 2e       	mov	r12, r25
    a3ea:	d1 2c       	mov	r13, r1
    a3ec:	e1 2c       	mov	r14, r1
    a3ee:	f1 2c       	mov	r15, r1
    a3f0:	b7 01       	movw	r22, r14
    a3f2:	a6 01       	movw	r20, r12
    a3f4:	f8 01       	movw	r30, r16
    a3f6:	80 81       	ld	r24, Z
    a3f8:	91 81       	ldd	r25, Z+1	; 0x01
    a3fa:	18 de       	rcall	.-976    	; 0xa02c <get_fat.isra.10>
    a3fc:	61 30       	cpi	r22, 0x01	; 1
    a3fe:	71 05       	cpc	r23, r1
    a400:	81 05       	cpc	r24, r1
    a402:	91 05       	cpc	r25, r1
    a404:	09 f4       	brne	.+2      	; 0xa408 <create_chain+0xf2>
    a406:	9d c0       	rjmp	.+314    	; 0xa542 <create_chain+0x22c>
    a408:	6f 3f       	cpi	r22, 0xFF	; 255
    a40a:	ff ef       	ldi	r31, 0xFF	; 255
    a40c:	7f 07       	cpc	r23, r31
    a40e:	8f 07       	cpc	r24, r31
    a410:	9f 07       	cpc	r25, r31
    a412:	09 f4       	brne	.+2      	; 0xa416 <create_chain+0x100>
    a414:	b2 cf       	rjmp	.-156    	; 0xa37a <create_chain+0x64>
    a416:	67 2b       	or	r22, r23
    a418:	68 2b       	or	r22, r24
    a41a:	69 2b       	or	r22, r25
    a41c:	a9 f0       	breq	.+42     	; 0xa448 <create_chain+0x132>
    a41e:	8d 85       	ldd	r24, Y+13	; 0x0d
    a420:	9e 85       	ldd	r25, Y+14	; 0x0e
    a422:	af 85       	ldd	r26, Y+15	; 0x0f
    a424:	b8 89       	ldd	r27, Y+16	; 0x10
    a426:	82 30       	cpi	r24, 0x02	; 2
    a428:	91 05       	cpc	r25, r1
    a42a:	a1 05       	cpc	r26, r1
    a42c:	b1 05       	cpc	r27, r1
    a42e:	88 f0       	brcs	.+34     	; 0xa452 <create_chain+0x13c>
    a430:	49 8d       	ldd	r20, Y+25	; 0x19
    a432:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a434:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a436:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a438:	84 17       	cp	r24, r20
    a43a:	95 07       	cpc	r25, r21
    a43c:	a6 07       	cpc	r26, r22
    a43e:	b7 07       	cpc	r27, r23
    a440:	40 f4       	brcc	.+16     	; 0xa452 <create_chain+0x13c>
    a442:	4c 01       	movw	r8, r24
    a444:	5d 01       	movw	r10, r26
    a446:	05 c0       	rjmp	.+10     	; 0xa452 <create_chain+0x13c>
    a448:	c1 14       	cp	r12, r1
    a44a:	d1 04       	cpc	r13, r1
    a44c:	e1 04       	cpc	r14, r1
    a44e:	f1 04       	cpc	r15, r1
    a450:	c9 f5       	brne	.+114    	; 0xa4c4 <create_chain+0x1ae>
    a452:	75 01       	movw	r14, r10
    a454:	64 01       	movw	r12, r8
    a456:	2f ef       	ldi	r18, 0xFF	; 255
    a458:	c2 1a       	sub	r12, r18
    a45a:	d2 0a       	sbc	r13, r18
    a45c:	e2 0a       	sbc	r14, r18
    a45e:	f2 0a       	sbc	r15, r18
    a460:	89 8d       	ldd	r24, Y+25	; 0x19
    a462:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a464:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a466:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a468:	c8 16       	cp	r12, r24
    a46a:	d9 06       	cpc	r13, r25
    a46c:	ea 06       	cpc	r14, r26
    a46e:	fb 06       	cpc	r15, r27
    a470:	60 f0       	brcs	.+24     	; 0xa48a <create_chain+0x174>
    a472:	82 e0       	ldi	r24, 0x02	; 2
    a474:	88 16       	cp	r8, r24
    a476:	91 04       	cpc	r9, r1
    a478:	a1 04       	cpc	r10, r1
    a47a:	b1 04       	cpc	r11, r1
    a47c:	08 f4       	brcc	.+2      	; 0xa480 <create_chain+0x16a>
    a47e:	9b cf       	rjmp	.-202    	; 0xa3b6 <create_chain+0xa0>
    a480:	82 e0       	ldi	r24, 0x02	; 2
    a482:	c8 2e       	mov	r12, r24
    a484:	d1 2c       	mov	r13, r1
    a486:	e1 2c       	mov	r14, r1
    a488:	f1 2c       	mov	r15, r1
    a48a:	b7 01       	movw	r22, r14
    a48c:	a6 01       	movw	r20, r12
    a48e:	f8 01       	movw	r30, r16
    a490:	80 81       	ld	r24, Z
    a492:	91 81       	ldd	r25, Z+1	; 0x01
    a494:	cb dd       	rcall	.-1130   	; 0xa02c <get_fat.isra.10>
    a496:	61 15       	cp	r22, r1
    a498:	71 05       	cpc	r23, r1
    a49a:	81 05       	cpc	r24, r1
    a49c:	91 05       	cpc	r25, r1
    a49e:	91 f0       	breq	.+36     	; 0xa4c4 <create_chain+0x1ae>
    a4a0:	61 30       	cpi	r22, 0x01	; 1
    a4a2:	71 05       	cpc	r23, r1
    a4a4:	81 05       	cpc	r24, r1
    a4a6:	91 05       	cpc	r25, r1
    a4a8:	09 f4       	brne	.+2      	; 0xa4ac <create_chain+0x196>
    a4aa:	4b c0       	rjmp	.+150    	; 0xa542 <create_chain+0x22c>
    a4ac:	6f 3f       	cpi	r22, 0xFF	; 255
    a4ae:	7f 4f       	sbci	r23, 0xFF	; 255
    a4b0:	8f 4f       	sbci	r24, 0xFF	; 255
    a4b2:	9f 4f       	sbci	r25, 0xFF	; 255
    a4b4:	09 f4       	brne	.+2      	; 0xa4b8 <create_chain+0x1a2>
    a4b6:	61 cf       	rjmp	.-318    	; 0xa37a <create_chain+0x64>
    a4b8:	c8 14       	cp	r12, r8
    a4ba:	d9 04       	cpc	r13, r9
    a4bc:	ea 04       	cpc	r14, r10
    a4be:	fb 04       	cpc	r15, r11
    a4c0:	51 f6       	brne	.-108    	; 0xa456 <create_chain+0x140>
    a4c2:	79 cf       	rjmp	.-270    	; 0xa3b6 <create_chain+0xa0>
    a4c4:	0f ef       	ldi	r16, 0xFF	; 255
    a4c6:	1f ef       	ldi	r17, 0xFF	; 255
    a4c8:	98 01       	movw	r18, r16
    a4ca:	b7 01       	movw	r22, r14
    a4cc:	a6 01       	movw	r20, r12
    a4ce:	ce 01       	movw	r24, r28
    a4d0:	ae dc       	rcall	.-1700   	; 0x9e2e <put_fat>
    a4d2:	00 97       	sbiw	r24, 0x00	; 0
    a4d4:	99 f5       	brne	.+102    	; 0xa53c <create_chain+0x226>
    a4d6:	41 14       	cp	r4, r1
    a4d8:	51 04       	cpc	r5, r1
    a4da:	61 04       	cpc	r6, r1
    a4dc:	71 04       	cpc	r7, r1
    a4de:	e9 f4       	brne	.+58     	; 0xa51a <create_chain+0x204>
    a4e0:	cd 86       	std	Y+13, r12	; 0x0d
    a4e2:	de 86       	std	Y+14, r13	; 0x0e
    a4e4:	ef 86       	std	Y+15, r14	; 0x0f
    a4e6:	f8 8a       	std	Y+16, r15	; 0x10
    a4e8:	89 89       	ldd	r24, Y+17	; 0x11
    a4ea:	9a 89       	ldd	r25, Y+18	; 0x12
    a4ec:	ab 89       	ldd	r26, Y+19	; 0x13
    a4ee:	bc 89       	ldd	r27, Y+20	; 0x14
    a4f0:	49 8d       	ldd	r20, Y+25	; 0x19
    a4f2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a4f4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a4f6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a4f8:	42 50       	subi	r20, 0x02	; 2
    a4fa:	51 09       	sbc	r21, r1
    a4fc:	61 09       	sbc	r22, r1
    a4fe:	71 09       	sbc	r23, r1
    a500:	48 17       	cp	r20, r24
    a502:	59 07       	cpc	r21, r25
    a504:	6a 07       	cpc	r22, r26
    a506:	7b 07       	cpc	r23, r27
    a508:	88 f0       	brcs	.+34     	; 0xa52c <create_chain+0x216>
    a50a:	01 97       	sbiw	r24, 0x01	; 1
    a50c:	a1 09       	sbc	r26, r1
    a50e:	b1 09       	sbc	r27, r1
    a510:	89 8b       	std	Y+17, r24	; 0x11
    a512:	9a 8b       	std	Y+18, r25	; 0x12
    a514:	ab 8b       	std	Y+19, r26	; 0x13
    a516:	bc 8b       	std	Y+20, r27	; 0x14
    a518:	09 c0       	rjmp	.+18     	; 0xa52c <create_chain+0x216>
    a51a:	97 01       	movw	r18, r14
    a51c:	86 01       	movw	r16, r12
    a51e:	b3 01       	movw	r22, r6
    a520:	a2 01       	movw	r20, r4
    a522:	ce 01       	movw	r24, r28
    a524:	84 dc       	rcall	.-1784   	; 0x9e2e <put_fat>
    a526:	00 97       	sbiw	r24, 0x00	; 0
    a528:	d9 f2       	breq	.-74     	; 0xa4e0 <create_chain+0x1ca>
    a52a:	08 c0       	rjmp	.+16     	; 0xa53c <create_chain+0x226>
    a52c:	8c 81       	ldd	r24, Y+4	; 0x04
    a52e:	81 60       	ori	r24, 0x01	; 1
    a530:	8c 83       	std	Y+4, r24	; 0x04
    a532:	4c 2d       	mov	r20, r12
    a534:	3d 2d       	mov	r19, r13
    a536:	2e 2d       	mov	r18, r14
    a538:	9f 2d       	mov	r25, r15
    a53a:	0b c0       	rjmp	.+22     	; 0xa552 <create_chain+0x23c>
    a53c:	01 97       	sbiw	r24, 0x01	; 1
    a53e:	09 f4       	brne	.+2      	; 0xa542 <create_chain+0x22c>
    a540:	1c cf       	rjmp	.-456    	; 0xa37a <create_chain+0x64>
    a542:	41 e0       	ldi	r20, 0x01	; 1
    a544:	30 e0       	ldi	r19, 0x00	; 0
    a546:	20 e0       	ldi	r18, 0x00	; 0
    a548:	90 e0       	ldi	r25, 0x00	; 0
    a54a:	03 c0       	rjmp	.+6      	; 0xa552 <create_chain+0x23c>
    a54c:	46 2f       	mov	r20, r22
    a54e:	37 2f       	mov	r19, r23
    a550:	28 2f       	mov	r18, r24
    a552:	64 2f       	mov	r22, r20
    a554:	73 2f       	mov	r23, r19
    a556:	82 2f       	mov	r24, r18
    a558:	cd b7       	in	r28, 0x3d	; 61
    a55a:	de b7       	in	r29, 0x3e	; 62
    a55c:	e0 e1       	ldi	r30, 0x10	; 16
    a55e:	0c 94 53 e5 	jmp	0x1caa6	; 0x1caa6 <__epilogue_restores__+0x4>

0000a562 <remove_chain>:
    a562:	4f 92       	push	r4
    a564:	5f 92       	push	r5
    a566:	6f 92       	push	r6
    a568:	7f 92       	push	r7
    a56a:	af 92       	push	r10
    a56c:	bf 92       	push	r11
    a56e:	cf 92       	push	r12
    a570:	df 92       	push	r13
    a572:	ef 92       	push	r14
    a574:	ff 92       	push	r15
    a576:	0f 93       	push	r16
    a578:	1f 93       	push	r17
    a57a:	cf 93       	push	r28
    a57c:	df 93       	push	r29
    a57e:	5c 01       	movw	r10, r24
    a580:	6a 01       	movw	r12, r20
    a582:	7b 01       	movw	r14, r22
    a584:	b9 01       	movw	r22, r18
    a586:	a8 01       	movw	r20, r16
    a588:	22 e0       	ldi	r18, 0x02	; 2
    a58a:	c2 16       	cp	r12, r18
    a58c:	d1 04       	cpc	r13, r1
    a58e:	e1 04       	cpc	r14, r1
    a590:	f1 04       	cpc	r15, r1
    a592:	10 f4       	brcc	.+4      	; 0xa598 <remove_chain+0x36>
    a594:	22 e0       	ldi	r18, 0x02	; 2
    a596:	27 c0       	rjmp	.+78     	; 0xa5e6 <remove_chain+0x84>
    a598:	fc 01       	movw	r30, r24
    a59a:	c0 81       	ld	r28, Z
    a59c:	d1 81       	ldd	r29, Z+1	; 0x01
    a59e:	89 8d       	ldd	r24, Y+25	; 0x19
    a5a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a5a2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a5a4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a5a6:	c8 16       	cp	r12, r24
    a5a8:	d9 06       	cpc	r13, r25
    a5aa:	ea 06       	cpc	r14, r26
    a5ac:	fb 06       	cpc	r15, r27
    a5ae:	90 f7       	brcc	.-28     	; 0xa594 <remove_chain+0x32>
    a5b0:	41 15       	cp	r20, r1
    a5b2:	51 05       	cpc	r21, r1
    a5b4:	61 05       	cpc	r22, r1
    a5b6:	71 05       	cpc	r23, r1
    a5b8:	41 f0       	breq	.+16     	; 0xa5ca <remove_chain+0x68>
    a5ba:	0f ef       	ldi	r16, 0xFF	; 255
    a5bc:	1f ef       	ldi	r17, 0xFF	; 255
    a5be:	98 01       	movw	r18, r16
    a5c0:	ce 01       	movw	r24, r28
    a5c2:	35 dc       	rcall	.-1942   	; 0x9e2e <put_fat>
    a5c4:	00 97       	sbiw	r24, 0x00	; 0
    a5c6:	09 f0       	breq	.+2      	; 0xa5ca <remove_chain+0x68>
    a5c8:	4c c0       	rjmp	.+152    	; 0xa662 <remove_chain+0x100>
    a5ca:	b7 01       	movw	r22, r14
    a5cc:	a6 01       	movw	r20, r12
    a5ce:	f5 01       	movw	r30, r10
    a5d0:	80 81       	ld	r24, Z
    a5d2:	91 81       	ldd	r25, Z+1	; 0x01
    a5d4:	2b dd       	rcall	.-1450   	; 0xa02c <get_fat.isra.10>
    a5d6:	2b 01       	movw	r4, r22
    a5d8:	3c 01       	movw	r6, r24
    a5da:	61 15       	cp	r22, r1
    a5dc:	71 05       	cpc	r23, r1
    a5de:	81 05       	cpc	r24, r1
    a5e0:	91 05       	cpc	r25, r1
    a5e2:	19 f4       	brne	.+6      	; 0xa5ea <remove_chain+0x88>
    a5e4:	20 e0       	ldi	r18, 0x00	; 0
    a5e6:	90 e0       	ldi	r25, 0x00	; 0
    a5e8:	3d c0       	rjmp	.+122    	; 0xa664 <remove_chain+0x102>
    a5ea:	61 30       	cpi	r22, 0x01	; 1
    a5ec:	71 05       	cpc	r23, r1
    a5ee:	81 05       	cpc	r24, r1
    a5f0:	91 05       	cpc	r25, r1
    a5f2:	81 f2       	breq	.-96     	; 0xa594 <remove_chain+0x32>
    a5f4:	6f 3f       	cpi	r22, 0xFF	; 255
    a5f6:	7f 4f       	sbci	r23, 0xFF	; 255
    a5f8:	8f 4f       	sbci	r24, 0xFF	; 255
    a5fa:	9f 4f       	sbci	r25, 0xFF	; 255
    a5fc:	81 f1       	breq	.+96     	; 0xa65e <remove_chain+0xfc>
    a5fe:	00 e0       	ldi	r16, 0x00	; 0
    a600:	10 e0       	ldi	r17, 0x00	; 0
    a602:	98 01       	movw	r18, r16
    a604:	b7 01       	movw	r22, r14
    a606:	a6 01       	movw	r20, r12
    a608:	ce 01       	movw	r24, r28
    a60a:	11 dc       	rcall	.-2014   	; 0x9e2e <put_fat>
    a60c:	00 97       	sbiw	r24, 0x00	; 0
    a60e:	49 f5       	brne	.+82     	; 0xa662 <remove_chain+0x100>
    a610:	89 89       	ldd	r24, Y+17	; 0x11
    a612:	9a 89       	ldd	r25, Y+18	; 0x12
    a614:	ab 89       	ldd	r26, Y+19	; 0x13
    a616:	bc 89       	ldd	r27, Y+20	; 0x14
    a618:	49 8d       	ldd	r20, Y+25	; 0x19
    a61a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a61c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a61e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a620:	6a 01       	movw	r12, r20
    a622:	7b 01       	movw	r14, r22
    a624:	e2 e0       	ldi	r30, 0x02	; 2
    a626:	ce 1a       	sub	r12, r30
    a628:	d1 08       	sbc	r13, r1
    a62a:	e1 08       	sbc	r14, r1
    a62c:	f1 08       	sbc	r15, r1
    a62e:	8c 15       	cp	r24, r12
    a630:	9d 05       	cpc	r25, r13
    a632:	ae 05       	cpc	r26, r14
    a634:	bf 05       	cpc	r27, r15
    a636:	50 f4       	brcc	.+20     	; 0xa64c <remove_chain+0xea>
    a638:	01 96       	adiw	r24, 0x01	; 1
    a63a:	a1 1d       	adc	r26, r1
    a63c:	b1 1d       	adc	r27, r1
    a63e:	89 8b       	std	Y+17, r24	; 0x11
    a640:	9a 8b       	std	Y+18, r25	; 0x12
    a642:	ab 8b       	std	Y+19, r26	; 0x13
    a644:	bc 8b       	std	Y+20, r27	; 0x14
    a646:	8c 81       	ldd	r24, Y+4	; 0x04
    a648:	81 60       	ori	r24, 0x01	; 1
    a64a:	8c 83       	std	Y+4, r24	; 0x04
    a64c:	73 01       	movw	r14, r6
    a64e:	62 01       	movw	r12, r4
    a650:	44 16       	cp	r4, r20
    a652:	55 06       	cpc	r5, r21
    a654:	66 06       	cpc	r6, r22
    a656:	77 06       	cpc	r7, r23
    a658:	08 f4       	brcc	.+2      	; 0xa65c <remove_chain+0xfa>
    a65a:	b7 cf       	rjmp	.-146    	; 0xa5ca <remove_chain+0x68>
    a65c:	c3 cf       	rjmp	.-122    	; 0xa5e4 <remove_chain+0x82>
    a65e:	21 e0       	ldi	r18, 0x01	; 1
    a660:	c2 cf       	rjmp	.-124    	; 0xa5e6 <remove_chain+0x84>
    a662:	28 2f       	mov	r18, r24
    a664:	82 2f       	mov	r24, r18
    a666:	df 91       	pop	r29
    a668:	cf 91       	pop	r28
    a66a:	1f 91       	pop	r17
    a66c:	0f 91       	pop	r16
    a66e:	ff 90       	pop	r15
    a670:	ef 90       	pop	r14
    a672:	df 90       	pop	r13
    a674:	cf 90       	pop	r12
    a676:	bf 90       	pop	r11
    a678:	af 90       	pop	r10
    a67a:	7f 90       	pop	r7
    a67c:	6f 90       	pop	r6
    a67e:	5f 90       	pop	r5
    a680:	4f 90       	pop	r4
    a682:	08 95       	ret

0000a684 <dir_next>:
    a684:	4f 92       	push	r4
    a686:	5f 92       	push	r5
    a688:	6f 92       	push	r6
    a68a:	7f 92       	push	r7
    a68c:	af 92       	push	r10
    a68e:	bf 92       	push	r11
    a690:	cf 92       	push	r12
    a692:	df 92       	push	r13
    a694:	ef 92       	push	r14
    a696:	ff 92       	push	r15
    a698:	0f 93       	push	r16
    a69a:	1f 93       	push	r17
    a69c:	cf 93       	push	r28
    a69e:	df 93       	push	r29
    a6a0:	ec 01       	movw	r28, r24
    a6a2:	08 81       	ld	r16, Y
    a6a4:	19 81       	ldd	r17, Y+1	; 0x01
    a6a6:	ce 84       	ldd	r12, Y+14	; 0x0e
    a6a8:	df 84       	ldd	r13, Y+15	; 0x0f
    a6aa:	e8 88       	ldd	r14, Y+16	; 0x10
    a6ac:	f9 88       	ldd	r15, Y+17	; 0x11
    a6ae:	80 e2       	ldi	r24, 0x20	; 32
    a6b0:	c8 0e       	add	r12, r24
    a6b2:	d1 1c       	adc	r13, r1
    a6b4:	e1 1c       	adc	r14, r1
    a6b6:	f1 1c       	adc	r15, r1
    a6b8:	c1 14       	cp	r12, r1
    a6ba:	d1 04       	cpc	r13, r1
    a6bc:	e0 e2       	ldi	r30, 0x20	; 32
    a6be:	ee 06       	cpc	r14, r30
    a6c0:	f1 04       	cpc	r15, r1
    a6c2:	20 f0       	brcs	.+8      	; 0xa6cc <dir_next+0x48>
    a6c4:	1e 8a       	std	Y+22, r1	; 0x16
    a6c6:	1f 8a       	std	Y+23, r1	; 0x17
    a6c8:	18 8e       	std	Y+24, r1	; 0x18
    a6ca:	19 8e       	std	Y+25, r1	; 0x19
    a6cc:	8e 89       	ldd	r24, Y+22	; 0x16
    a6ce:	9f 89       	ldd	r25, Y+23	; 0x17
    a6d0:	a8 8d       	ldd	r26, Y+24	; 0x18
    a6d2:	b9 8d       	ldd	r27, Y+25	; 0x19
    a6d4:	00 97       	sbiw	r24, 0x00	; 0
    a6d6:	a1 05       	cpc	r26, r1
    a6d8:	b1 05       	cpc	r27, r1
    a6da:	09 f4       	brne	.+2      	; 0xa6de <dir_next+0x5a>
    a6dc:	a7 c0       	rjmp	.+334    	; 0xa82c <dir_next+0x1a8>
    a6de:	5b 01       	movw	r10, r22
    a6e0:	b7 01       	movw	r22, r14
    a6e2:	a6 01       	movw	r20, r12
    a6e4:	51 70       	andi	r21, 0x01	; 1
    a6e6:	66 27       	eor	r22, r22
    a6e8:	77 27       	eor	r23, r23
    a6ea:	45 2b       	or	r20, r21
    a6ec:	46 2b       	or	r20, r22
    a6ee:	47 2b       	or	r20, r23
    a6f0:	09 f0       	breq	.+2      	; 0xa6f4 <dir_next+0x70>
    a6f2:	8d c0       	rjmp	.+282    	; 0xa80e <dir_next+0x18a>
    a6f4:	01 96       	adiw	r24, 0x01	; 1
    a6f6:	a1 1d       	adc	r26, r1
    a6f8:	b1 1d       	adc	r27, r1
    a6fa:	8e 8b       	std	Y+22, r24	; 0x16
    a6fc:	9f 8b       	std	Y+23, r25	; 0x17
    a6fe:	a8 8f       	std	Y+24, r26	; 0x18
    a700:	b9 8f       	std	Y+25, r27	; 0x19
    a702:	4a 89       	ldd	r20, Y+18	; 0x12
    a704:	5b 89       	ldd	r21, Y+19	; 0x13
    a706:	6c 89       	ldd	r22, Y+20	; 0x14
    a708:	7d 89       	ldd	r23, Y+21	; 0x15
    a70a:	f8 01       	movw	r30, r16
    a70c:	41 15       	cp	r20, r1
    a70e:	51 05       	cpc	r21, r1
    a710:	61 05       	cpc	r22, r1
    a712:	71 05       	cpc	r23, r1
    a714:	c1 f4       	brne	.+48     	; 0xa746 <dir_next+0xc2>
    a716:	87 81       	ldd	r24, Z+7	; 0x07
    a718:	90 85       	ldd	r25, Z+8	; 0x08
    a71a:	a0 e0       	ldi	r26, 0x00	; 0
    a71c:	b0 e0       	ldi	r27, 0x00	; 0
    a71e:	b7 01       	movw	r22, r14
    a720:	a6 01       	movw	r20, r12
    a722:	35 e0       	ldi	r19, 0x05	; 5
    a724:	76 95       	lsr	r23
    a726:	67 95       	ror	r22
    a728:	57 95       	ror	r21
    a72a:	47 95       	ror	r20
    a72c:	3a 95       	dec	r19
    a72e:	d1 f7       	brne	.-12     	; 0xa724 <dir_next+0xa0>
    a730:	48 17       	cp	r20, r24
    a732:	59 07       	cpc	r21, r25
    a734:	6a 07       	cpc	r22, r26
    a736:	7b 07       	cpc	r23, r27
    a738:	08 f4       	brcc	.+2      	; 0xa73c <dir_next+0xb8>
    a73a:	69 c0       	rjmp	.+210    	; 0xa80e <dir_next+0x18a>
    a73c:	1e 8a       	std	Y+22, r1	; 0x16
    a73e:	1f 8a       	std	Y+23, r1	; 0x17
    a740:	18 8e       	std	Y+24, r1	; 0x18
    a742:	19 8e       	std	Y+25, r1	; 0x19
    a744:	73 c0       	rjmp	.+230    	; 0xa82c <dir_next+0x1a8>
    a746:	81 85       	ldd	r24, Z+9	; 0x09
    a748:	92 85       	ldd	r25, Z+10	; 0x0a
    a74a:	01 97       	sbiw	r24, 0x01	; 1
    a74c:	a0 e0       	ldi	r26, 0x00	; 0
    a74e:	b0 e0       	ldi	r27, 0x00	; 0
    a750:	26 01       	movw	r4, r12
    a752:	37 01       	movw	r6, r14
    a754:	29 e0       	ldi	r18, 0x09	; 9
    a756:	76 94       	lsr	r7
    a758:	67 94       	ror	r6
    a75a:	57 94       	ror	r5
    a75c:	47 94       	ror	r4
    a75e:	2a 95       	dec	r18
    a760:	d1 f7       	brne	.-12     	; 0xa756 <dir_next+0xd2>
    a762:	84 21       	and	r24, r4
    a764:	95 21       	and	r25, r5
    a766:	a6 21       	and	r26, r6
    a768:	b7 21       	and	r27, r7
    a76a:	89 2b       	or	r24, r25
    a76c:	8a 2b       	or	r24, r26
    a76e:	8b 2b       	or	r24, r27
    a770:	09 f0       	breq	.+2      	; 0xa774 <dir_next+0xf0>
    a772:	4d c0       	rjmp	.+154    	; 0xa80e <dir_next+0x18a>
    a774:	c8 01       	movw	r24, r16
    a776:	5a dc       	rcall	.-1868   	; 0xa02c <get_fat.isra.10>
    a778:	2b 01       	movw	r4, r22
    a77a:	3c 01       	movw	r6, r24
    a77c:	62 30       	cpi	r22, 0x02	; 2
    a77e:	71 05       	cpc	r23, r1
    a780:	81 05       	cpc	r24, r1
    a782:	91 05       	cpc	r25, r1
    a784:	18 f4       	brcc	.+6      	; 0xa78c <dir_next+0x108>
    a786:	82 e0       	ldi	r24, 0x02	; 2
    a788:	90 e0       	ldi	r25, 0x00	; 0
    a78a:	55 c0       	rjmp	.+170    	; 0xa836 <dir_next+0x1b2>
    a78c:	8f ef       	ldi	r24, 0xFF	; 255
    a78e:	48 16       	cp	r4, r24
    a790:	58 06       	cpc	r5, r24
    a792:	68 06       	cpc	r6, r24
    a794:	78 06       	cpc	r7, r24
    a796:	19 f4       	brne	.+6      	; 0xa79e <dir_next+0x11a>
    a798:	81 e0       	ldi	r24, 0x01	; 1
    a79a:	90 e0       	ldi	r25, 0x00	; 0
    a79c:	4c c0       	rjmp	.+152    	; 0xa836 <dir_next+0x1b2>
    a79e:	f8 01       	movw	r30, r16
    a7a0:	81 8d       	ldd	r24, Z+25	; 0x19
    a7a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    a7a4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a7a6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a7a8:	48 16       	cp	r4, r24
    a7aa:	59 06       	cpc	r5, r25
    a7ac:	6a 06       	cpc	r6, r26
    a7ae:	7b 06       	cpc	r7, r27
    a7b0:	08 f1       	brcs	.+66     	; 0xa7f4 <dir_next+0x170>
    a7b2:	ab 28       	or	r10, r11
    a7b4:	19 f2       	breq	.-122    	; 0xa73c <dir_next+0xb8>
    a7b6:	4a 89       	ldd	r20, Y+18	; 0x12
    a7b8:	5b 89       	ldd	r21, Y+19	; 0x13
    a7ba:	6c 89       	ldd	r22, Y+20	; 0x14
    a7bc:	7d 89       	ldd	r23, Y+21	; 0x15
    a7be:	ce 01       	movw	r24, r28
    a7c0:	aa dd       	rcall	.-1196   	; 0xa316 <create_chain>
    a7c2:	2b 01       	movw	r4, r22
    a7c4:	3c 01       	movw	r6, r24
    a7c6:	61 15       	cp	r22, r1
    a7c8:	71 05       	cpc	r23, r1
    a7ca:	81 05       	cpc	r24, r1
    a7cc:	91 05       	cpc	r25, r1
    a7ce:	89 f1       	breq	.+98     	; 0xa832 <dir_next+0x1ae>
    a7d0:	61 30       	cpi	r22, 0x01	; 1
    a7d2:	71 05       	cpc	r23, r1
    a7d4:	81 05       	cpc	r24, r1
    a7d6:	91 05       	cpc	r25, r1
    a7d8:	b1 f2       	breq	.-84     	; 0xa786 <dir_next+0x102>
    a7da:	8f ef       	ldi	r24, 0xFF	; 255
    a7dc:	48 16       	cp	r4, r24
    a7de:	58 06       	cpc	r5, r24
    a7e0:	68 06       	cpc	r6, r24
    a7e2:	78 06       	cpc	r7, r24
    a7e4:	c9 f2       	breq	.-78     	; 0xa798 <dir_next+0x114>
    a7e6:	b3 01       	movw	r22, r6
    a7e8:	a2 01       	movw	r20, r4
    a7ea:	c8 01       	movw	r24, r16
    a7ec:	0e 94 92 4b 	call	0x9724	; 0x9724 <dir_clear>
    a7f0:	89 2b       	or	r24, r25
    a7f2:	91 f6       	brne	.-92     	; 0xa798 <dir_next+0x114>
    a7f4:	4a 8a       	std	Y+18, r4	; 0x12
    a7f6:	5b 8a       	std	Y+19, r5	; 0x13
    a7f8:	6c 8a       	std	Y+20, r6	; 0x14
    a7fa:	7d 8a       	std	Y+21, r7	; 0x15
    a7fc:	b3 01       	movw	r22, r6
    a7fe:	a2 01       	movw	r20, r4
    a800:	c8 01       	movw	r24, r16
    a802:	0e 94 0f 48 	call	0x901e	; 0x901e <clst2sect>
    a806:	6e 8b       	std	Y+22, r22	; 0x16
    a808:	7f 8b       	std	Y+23, r23	; 0x17
    a80a:	88 8f       	std	Y+24, r24	; 0x18
    a80c:	99 8f       	std	Y+25, r25	; 0x19
    a80e:	ce 86       	std	Y+14, r12	; 0x0e
    a810:	df 86       	std	Y+15, r13	; 0x0f
    a812:	e8 8a       	std	Y+16, r14	; 0x10
    a814:	f9 8a       	std	Y+17, r15	; 0x11
    a816:	0b 5c       	subi	r16, 0xCB	; 203
    a818:	1f 4f       	sbci	r17, 0xFF	; 255
    a81a:	e1 e0       	ldi	r30, 0x01	; 1
    a81c:	de 22       	and	r13, r30
    a81e:	c0 0e       	add	r12, r16
    a820:	d1 1e       	adc	r13, r17
    a822:	db 8e       	std	Y+27, r13	; 0x1b
    a824:	ca 8e       	std	Y+26, r12	; 0x1a
    a826:	80 e0       	ldi	r24, 0x00	; 0
    a828:	90 e0       	ldi	r25, 0x00	; 0
    a82a:	05 c0       	rjmp	.+10     	; 0xa836 <dir_next+0x1b2>
    a82c:	84 e0       	ldi	r24, 0x04	; 4
    a82e:	90 e0       	ldi	r25, 0x00	; 0
    a830:	02 c0       	rjmp	.+4      	; 0xa836 <dir_next+0x1b2>
    a832:	87 e0       	ldi	r24, 0x07	; 7
    a834:	90 e0       	ldi	r25, 0x00	; 0
    a836:	df 91       	pop	r29
    a838:	cf 91       	pop	r28
    a83a:	1f 91       	pop	r17
    a83c:	0f 91       	pop	r16
    a83e:	ff 90       	pop	r15
    a840:	ef 90       	pop	r14
    a842:	df 90       	pop	r13
    a844:	cf 90       	pop	r12
    a846:	bf 90       	pop	r11
    a848:	af 90       	pop	r10
    a84a:	7f 90       	pop	r7
    a84c:	6f 90       	pop	r6
    a84e:	5f 90       	pop	r5
    a850:	4f 90       	pop	r4
    a852:	08 95       	ret

0000a854 <dir_alloc>:
    a854:	a0 e0       	ldi	r26, 0x00	; 0
    a856:	b0 e0       	ldi	r27, 0x00	; 0
    a858:	e0 e3       	ldi	r30, 0x30	; 48
    a85a:	f4 e5       	ldi	r31, 0x54	; 84
    a85c:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    a860:	ec 01       	movw	r28, r24
    a862:	6b 01       	movw	r12, r22
    a864:	e8 80       	ld	r14, Y
    a866:	f9 80       	ldd	r15, Y+1	; 0x01
    a868:	40 e0       	ldi	r20, 0x00	; 0
    a86a:	50 e0       	ldi	r21, 0x00	; 0
    a86c:	ba 01       	movw	r22, r20
    a86e:	92 dc       	rcall	.-1756   	; 0xa194 <dir_sdi>
    a870:	00 97       	sbiw	r24, 0x00	; 0
    a872:	01 f5       	brne	.+64     	; 0xa8b4 <dir_alloc+0x60>
    a874:	00 e0       	ldi	r16, 0x00	; 0
    a876:	10 e0       	ldi	r17, 0x00	; 0
    a878:	4e 89       	ldd	r20, Y+22	; 0x16
    a87a:	5f 89       	ldd	r21, Y+23	; 0x17
    a87c:	68 8d       	ldd	r22, Y+24	; 0x18
    a87e:	79 8d       	ldd	r23, Y+25	; 0x19
    a880:	c7 01       	movw	r24, r14
    a882:	0e 94 3a 4c 	call	0x9874	; 0x9874 <move_window>
    a886:	00 97       	sbiw	r24, 0x00	; 0
    a888:	a9 f4       	brne	.+42     	; 0xa8b4 <dir_alloc+0x60>
    a88a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a88c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a88e:	20 81       	ld	r18, Z
    a890:	25 3e       	cpi	r18, 0xE5	; 229
    a892:	11 f0       	breq	.+4      	; 0xa898 <dir_alloc+0x44>
    a894:	21 11       	cpse	r18, r1
    a896:	06 c0       	rjmp	.+12     	; 0xa8a4 <dir_alloc+0x50>
    a898:	0f 5f       	subi	r16, 0xFF	; 255
    a89a:	1f 4f       	sbci	r17, 0xFF	; 255
    a89c:	0c 15       	cp	r16, r12
    a89e:	1d 05       	cpc	r17, r13
    a8a0:	19 f4       	brne	.+6      	; 0xa8a8 <dir_alloc+0x54>
    a8a2:	0d c0       	rjmp	.+26     	; 0xa8be <dir_alloc+0x6a>
    a8a4:	00 e0       	ldi	r16, 0x00	; 0
    a8a6:	10 e0       	ldi	r17, 0x00	; 0
    a8a8:	61 e0       	ldi	r22, 0x01	; 1
    a8aa:	70 e0       	ldi	r23, 0x00	; 0
    a8ac:	ce 01       	movw	r24, r28
    a8ae:	ea de       	rcall	.-556    	; 0xa684 <dir_next>
    a8b0:	00 97       	sbiw	r24, 0x00	; 0
    a8b2:	11 f3       	breq	.-60     	; 0xa878 <dir_alloc+0x24>
    a8b4:	84 30       	cpi	r24, 0x04	; 4
    a8b6:	91 05       	cpc	r25, r1
    a8b8:	11 f4       	brne	.+4      	; 0xa8be <dir_alloc+0x6a>
    a8ba:	87 e0       	ldi	r24, 0x07	; 7
    a8bc:	90 e0       	ldi	r25, 0x00	; 0
    a8be:	cd b7       	in	r28, 0x3d	; 61
    a8c0:	de b7       	in	r29, 0x3e	; 62
    a8c2:	e8 e0       	ldi	r30, 0x08	; 8
    a8c4:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

0000a8c8 <dir_read>:
    a8c8:	a0 e0       	ldi	r26, 0x00	; 0
    a8ca:	b0 e0       	ldi	r27, 0x00	; 0
    a8cc:	ea e6       	ldi	r30, 0x6A	; 106
    a8ce:	f4 e5       	ldi	r31, 0x54	; 84
    a8d0:	0c 94 39 e5 	jmp	0x1ca72	; 0x1ca72 <__prologue_saves__+0x8>
    a8d4:	ec 01       	movw	r28, r24
    a8d6:	7b 01       	movw	r14, r22
    a8d8:	a8 80       	ld	r10, Y
    a8da:	b9 80       	ldd	r11, Y+1	; 0x01
    a8dc:	dd 24       	eor	r13, r13
    a8de:	da 94       	dec	r13
    a8e0:	1f ef       	ldi	r17, 0xFF	; 255
    a8e2:	84 e0       	ldi	r24, 0x04	; 4
    a8e4:	90 e0       	ldi	r25, 0x00	; 0
    a8e6:	ad e0       	ldi	r26, 0x0D	; 13
    a8e8:	ca 2e       	mov	r12, r26
    a8ea:	4e 89       	ldd	r20, Y+22	; 0x16
    a8ec:	5f 89       	ldd	r21, Y+23	; 0x17
    a8ee:	68 8d       	ldd	r22, Y+24	; 0x18
    a8f0:	79 8d       	ldd	r23, Y+25	; 0x19
    a8f2:	41 15       	cp	r20, r1
    a8f4:	51 05       	cpc	r21, r1
    a8f6:	61 05       	cpc	r22, r1
    a8f8:	71 05       	cpc	r23, r1
    a8fa:	09 f4       	brne	.+2      	; 0xa8fe <dir_read+0x36>
    a8fc:	a3 c0       	rjmp	.+326    	; 0xaa44 <dir_read+0x17c>
    a8fe:	c5 01       	movw	r24, r10
    a900:	0e 94 3a 4c 	call	0x9874	; 0x9874 <move_window>
    a904:	00 97       	sbiw	r24, 0x00	; 0
    a906:	09 f0       	breq	.+2      	; 0xa90a <dir_read+0x42>
    a908:	9f c0       	rjmp	.+318    	; 0xaa48 <dir_read+0x180>
    a90a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    a90c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    a90e:	0c 91       	ld	r16, X
    a910:	00 23       	and	r16, r16
    a912:	09 f4       	brne	.+2      	; 0xa916 <dir_read+0x4e>
    a914:	a1 c0       	rjmp	.+322    	; 0xaa58 <dir_read+0x190>
    a916:	1b 96       	adiw	r26, 0x0b	; 11
    a918:	8c 91       	ld	r24, X
    a91a:	1b 97       	sbiw	r26, 0x0b	; 11
    a91c:	8f 73       	andi	r24, 0x3F	; 63
    a91e:	8c 83       	std	Y+4, r24	; 0x04
    a920:	05 3e       	cpi	r16, 0xE5	; 229
    a922:	09 f4       	brne	.+2      	; 0xa926 <dir_read+0x5e>
    a924:	86 c0       	rjmp	.+268    	; 0xaa32 <dir_read+0x16a>
    a926:	0e 32       	cpi	r16, 0x2E	; 46
    a928:	09 f4       	brne	.+2      	; 0xa92c <dir_read+0x64>
    a92a:	83 c0       	rjmp	.+262    	; 0xaa32 <dir_read+0x16a>
    a92c:	21 e0       	ldi	r18, 0x01	; 1
    a92e:	30 e0       	ldi	r19, 0x00	; 0
    a930:	98 2f       	mov	r25, r24
    a932:	9f 71       	andi	r25, 0x1F	; 31
    a934:	98 30       	cpi	r25, 0x08	; 8
    a936:	11 f0       	breq	.+4      	; 0xa93c <dir_read+0x74>
    a938:	20 e0       	ldi	r18, 0x00	; 0
    a93a:	30 e0       	ldi	r19, 0x00	; 0
    a93c:	2e 15       	cp	r18, r14
    a93e:	3f 05       	cpc	r19, r15
    a940:	09 f0       	breq	.+2      	; 0xa944 <dir_read+0x7c>
    a942:	77 c0       	rjmp	.+238    	; 0xaa32 <dir_read+0x16a>
    a944:	8f 30       	cpi	r24, 0x0F	; 15
    a946:	09 f0       	breq	.+2      	; 0xa94a <dir_read+0x82>
    a948:	64 c0       	rjmp	.+200    	; 0xaa12 <dir_read+0x14a>
    a94a:	06 ff       	sbrs	r16, 6
    a94c:	0d c0       	rjmp	.+26     	; 0xa968 <dir_read+0xa0>
    a94e:	1d 96       	adiw	r26, 0x0d	; 13
    a950:	8c 91       	ld	r24, X
    a952:	1d 97       	sbiw	r26, 0x0d	; 13
    a954:	0f 7b       	andi	r16, 0xBF	; 191
    a956:	4e 85       	ldd	r20, Y+14	; 0x0e
    a958:	5f 85       	ldd	r21, Y+15	; 0x0f
    a95a:	68 89       	ldd	r22, Y+16	; 0x10
    a95c:	79 89       	ldd	r23, Y+17	; 0x11
    a95e:	48 a7       	std	Y+40, r20	; 0x28
    a960:	59 a7       	std	Y+41, r21	; 0x29
    a962:	6a a7       	std	Y+42, r22	; 0x2a
    a964:	7b a7       	std	Y+43, r23	; 0x2b
    a966:	03 c0       	rjmp	.+6      	; 0xa96e <dir_read+0xa6>
    a968:	10 13       	cpse	r17, r16
    a96a:	63 c0       	rjmp	.+198    	; 0xaa32 <dir_read+0x16a>
    a96c:	8d 2d       	mov	r24, r13
    a96e:	1d 96       	adiw	r26, 0x0d	; 13
    a970:	dc 90       	ld	r13, X
    a972:	1d 97       	sbiw	r26, 0x0d	; 13
    a974:	d8 12       	cpse	r13, r24
    a976:	5c c0       	rjmp	.+184    	; 0xaa30 <dir_read+0x168>
    a978:	5a 96       	adiw	r26, 0x1a	; 26
    a97a:	8d 91       	ld	r24, X+
    a97c:	9c 91       	ld	r25, X
    a97e:	5b 97       	sbiw	r26, 0x1b	; 27
    a980:	89 2b       	or	r24, r25
    a982:	09 f0       	breq	.+2      	; 0xa986 <dir_read+0xbe>
    a984:	56 c0       	rjmp	.+172    	; 0xaa32 <dir_read+0x16a>
    a986:	f5 01       	movw	r30, r10
    a988:	63 85       	ldd	r22, Z+11	; 0x0b
    a98a:	74 85       	ldd	r23, Z+12	; 0x0c
    a98c:	8c 91       	ld	r24, X
    a98e:	90 e0       	ldi	r25, 0x00	; 0
    a990:	8f 7b       	andi	r24, 0xBF	; 191
    a992:	01 97       	sbiw	r24, 0x01	; 1
    a994:	c8 9e       	mul	r12, r24
    a996:	90 01       	movw	r18, r0
    a998:	c9 9e       	mul	r12, r25
    a99a:	30 0d       	add	r19, r0
    a99c:	11 24       	eor	r1, r1
    a99e:	fd e4       	ldi	r31, 0x4D	; 77
    a9a0:	6f 2e       	mov	r6, r31
    a9a2:	f3 e0       	ldi	r31, 0x03	; 3
    a9a4:	7f 2e       	mov	r7, r31
    a9a6:	81 e0       	ldi	r24, 0x01	; 1
    a9a8:	90 e0       	ldi	r25, 0x00	; 0
    a9aa:	f3 01       	movw	r30, r6
    a9ac:	41 91       	ld	r20, Z+
    a9ae:	3f 01       	movw	r6, r30
    a9b0:	4d 01       	movw	r8, r26
    a9b2:	84 0e       	add	r8, r20
    a9b4:	91 1c       	adc	r9, r1
    a9b6:	f4 01       	movw	r30, r8
    a9b8:	40 81       	ld	r20, Z
    a9ba:	51 81       	ldd	r21, Z+1	; 0x01
    a9bc:	00 97       	sbiw	r24, 0x00	; 0
    a9be:	81 f0       	breq	.+32     	; 0xa9e0 <dir_read+0x118>
    a9c0:	2f 3f       	cpi	r18, 0xFF	; 255
    a9c2:	31 05       	cpc	r19, r1
    a9c4:	09 f0       	breq	.+2      	; 0xa9c8 <dir_read+0x100>
    a9c6:	a8 f5       	brcc	.+106    	; 0xaa32 <dir_read+0x16a>
    a9c8:	c9 01       	movw	r24, r18
    a9ca:	88 0f       	add	r24, r24
    a9cc:	99 1f       	adc	r25, r25
    a9ce:	86 0f       	add	r24, r22
    a9d0:	97 1f       	adc	r25, r23
    a9d2:	fc 01       	movw	r30, r24
    a9d4:	51 83       	std	Z+1, r21	; 0x01
    a9d6:	40 83       	st	Z, r20
    a9d8:	ca 01       	movw	r24, r20
    a9da:	2f 5f       	subi	r18, 0xFF	; 255
    a9dc:	3f 4f       	sbci	r19, 0xFF	; 255
    a9de:	03 c0       	rjmp	.+6      	; 0xa9e6 <dir_read+0x11e>
    a9e0:	4f 3f       	cpi	r20, 0xFF	; 255
    a9e2:	5f 4f       	sbci	r21, 0xFF	; 255
    a9e4:	31 f5       	brne	.+76     	; 0xaa32 <dir_read+0x16a>
    a9e6:	4a e5       	ldi	r20, 0x5A	; 90
    a9e8:	64 16       	cp	r6, r20
    a9ea:	43 e0       	ldi	r20, 0x03	; 3
    a9ec:	74 06       	cpc	r7, r20
    a9ee:	e9 f6       	brne	.-70     	; 0xa9aa <dir_read+0xe2>
    a9f0:	4c 91       	ld	r20, X
    a9f2:	46 ff       	sbrs	r20, 6
    a9f4:	2e c0       	rjmp	.+92     	; 0xaa52 <dir_read+0x18a>
    a9f6:	89 2b       	or	r24, r25
    a9f8:	61 f1       	breq	.+88     	; 0xaa52 <dir_read+0x18a>
    a9fa:	2f 3f       	cpi	r18, 0xFF	; 255
    a9fc:	31 05       	cpc	r19, r1
    a9fe:	09 f0       	breq	.+2      	; 0xaa02 <dir_read+0x13a>
    aa00:	c0 f4       	brcc	.+48     	; 0xaa32 <dir_read+0x16a>
    aa02:	22 0f       	add	r18, r18
    aa04:	33 1f       	adc	r19, r19
    aa06:	fb 01       	movw	r30, r22
    aa08:	e2 0f       	add	r30, r18
    aa0a:	f3 1f       	adc	r31, r19
    aa0c:	11 82       	std	Z+1, r1	; 0x01
    aa0e:	10 82       	st	Z, r1
    aa10:	20 c0       	rjmp	.+64     	; 0xaa52 <dir_read+0x18a>
    aa12:	11 11       	cpse	r17, r1
    aa14:	05 c0       	rjmp	.+10     	; 0xaa20 <dir_read+0x158>
    aa16:	cd 01       	movw	r24, r26
    aa18:	0e 94 73 48 	call	0x90e6	; 0x90e6 <sum_sfn>
    aa1c:	d8 16       	cp	r13, r24
    aa1e:	f9 f0       	breq	.+62     	; 0xaa5e <dir_read+0x196>
    aa20:	8f ef       	ldi	r24, 0xFF	; 255
    aa22:	9f ef       	ldi	r25, 0xFF	; 255
    aa24:	dc 01       	movw	r26, r24
    aa26:	88 a7       	std	Y+40, r24	; 0x28
    aa28:	99 a7       	std	Y+41, r25	; 0x29
    aa2a:	aa a7       	std	Y+42, r26	; 0x2a
    aa2c:	bb a7       	std	Y+43, r27	; 0x2b
    aa2e:	17 c0       	rjmp	.+46     	; 0xaa5e <dir_read+0x196>
    aa30:	d8 2e       	mov	r13, r24
    aa32:	1f ef       	ldi	r17, 0xFF	; 255
    aa34:	60 e0       	ldi	r22, 0x00	; 0
    aa36:	70 e0       	ldi	r23, 0x00	; 0
    aa38:	ce 01       	movw	r24, r28
    aa3a:	24 de       	rcall	.-952    	; 0xa684 <dir_next>
    aa3c:	00 97       	sbiw	r24, 0x00	; 0
    aa3e:	09 f4       	brne	.+2      	; 0xaa42 <dir_read+0x17a>
    aa40:	54 cf       	rjmp	.-344    	; 0xa8ea <dir_read+0x22>
    aa42:	02 c0       	rjmp	.+4      	; 0xaa48 <dir_read+0x180>
    aa44:	00 97       	sbiw	r24, 0x00	; 0
    aa46:	59 f0       	breq	.+22     	; 0xaa5e <dir_read+0x196>
    aa48:	1e 8a       	std	Y+22, r1	; 0x16
    aa4a:	1f 8a       	std	Y+23, r1	; 0x17
    aa4c:	18 8e       	std	Y+24, r1	; 0x18
    aa4e:	19 8e       	std	Y+25, r1	; 0x19
    aa50:	08 c0       	rjmp	.+16     	; 0xaa62 <dir_read+0x19a>
    aa52:	1f ef       	ldi	r17, 0xFF	; 255
    aa54:	10 0f       	add	r17, r16
    aa56:	ee cf       	rjmp	.-36     	; 0xaa34 <dir_read+0x16c>
    aa58:	84 e0       	ldi	r24, 0x04	; 4
    aa5a:	90 e0       	ldi	r25, 0x00	; 0
    aa5c:	f5 cf       	rjmp	.-22     	; 0xaa48 <dir_read+0x180>
    aa5e:	80 e0       	ldi	r24, 0x00	; 0
    aa60:	90 e0       	ldi	r25, 0x00	; 0
    aa62:	cd b7       	in	r28, 0x3d	; 61
    aa64:	de b7       	in	r29, 0x3e	; 62
    aa66:	ee e0       	ldi	r30, 0x0E	; 14
    aa68:	0c 94 55 e5 	jmp	0x1caaa	; 0x1caaa <__epilogue_restores__+0x8>

0000aa6c <dir_remove>:
    aa6c:	a0 e0       	ldi	r26, 0x00	; 0
    aa6e:	b0 e0       	ldi	r27, 0x00	; 0
    aa70:	ec e3       	ldi	r30, 0x3C	; 60
    aa72:	f5 e5       	ldi	r31, 0x55	; 85
    aa74:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__prologue_saves__+0x10>
    aa78:	ec 01       	movw	r28, r24
    aa7a:	08 81       	ld	r16, Y
    aa7c:	19 81       	ldd	r17, Y+1	; 0x01
    aa7e:	ce 84       	ldd	r12, Y+14	; 0x0e
    aa80:	df 84       	ldd	r13, Y+15	; 0x0f
    aa82:	e8 88       	ldd	r14, Y+16	; 0x10
    aa84:	f9 88       	ldd	r15, Y+17	; 0x11
    aa86:	48 a5       	ldd	r20, Y+40	; 0x28
    aa88:	59 a5       	ldd	r21, Y+41	; 0x29
    aa8a:	6a a5       	ldd	r22, Y+42	; 0x2a
    aa8c:	7b a5       	ldd	r23, Y+43	; 0x2b
    aa8e:	4f 3f       	cpi	r20, 0xFF	; 255
    aa90:	8f ef       	ldi	r24, 0xFF	; 255
    aa92:	58 07       	cpc	r21, r24
    aa94:	68 07       	cpc	r22, r24
    aa96:	78 07       	cpc	r23, r24
    aa98:	29 f4       	brne	.+10     	; 0xaaa4 <dir_remove+0x38>
    aa9a:	85 ee       	ldi	r24, 0xE5	; 229
    aa9c:	b8 2e       	mov	r11, r24
    aa9e:	aa 24       	eor	r10, r10
    aaa0:	a3 94       	inc	r10
    aaa2:	19 c0       	rjmp	.+50     	; 0xaad6 <dir_remove+0x6a>
    aaa4:	ce 01       	movw	r24, r28
    aaa6:	76 db       	rcall	.-2324   	; 0xa194 <dir_sdi>
    aaa8:	00 97       	sbiw	r24, 0x00	; 0
    aaaa:	19 f5       	brne	.+70     	; 0xaaf2 <dir_remove+0x86>
    aaac:	f6 cf       	rjmp	.-20     	; 0xaa9a <dir_remove+0x2e>
    aaae:	ea 8d       	ldd	r30, Y+26	; 0x1a
    aab0:	fb 8d       	ldd	r31, Y+27	; 0x1b
    aab2:	b0 82       	st	Z, r11
    aab4:	f8 01       	movw	r30, r16
    aab6:	a3 82       	std	Z+3, r10	; 0x03
    aab8:	4e 85       	ldd	r20, Y+14	; 0x0e
    aaba:	5f 85       	ldd	r21, Y+15	; 0x0f
    aabc:	68 89       	ldd	r22, Y+16	; 0x10
    aabe:	79 89       	ldd	r23, Y+17	; 0x11
    aac0:	4c 15       	cp	r20, r12
    aac2:	5d 05       	cpc	r21, r13
    aac4:	6e 05       	cpc	r22, r14
    aac6:	7f 05       	cpc	r23, r15
    aac8:	a0 f4       	brcc	.+40     	; 0xaaf2 <dir_remove+0x86>
    aaca:	60 e0       	ldi	r22, 0x00	; 0
    aacc:	70 e0       	ldi	r23, 0x00	; 0
    aace:	ce 01       	movw	r24, r28
    aad0:	d9 dd       	rcall	.-1102   	; 0xa684 <dir_next>
    aad2:	00 97       	sbiw	r24, 0x00	; 0
    aad4:	49 f4       	brne	.+18     	; 0xaae8 <dir_remove+0x7c>
    aad6:	4e 89       	ldd	r20, Y+22	; 0x16
    aad8:	5f 89       	ldd	r21, Y+23	; 0x17
    aada:	68 8d       	ldd	r22, Y+24	; 0x18
    aadc:	79 8d       	ldd	r23, Y+25	; 0x19
    aade:	c8 01       	movw	r24, r16
    aae0:	0e 94 3a 4c 	call	0x9874	; 0x9874 <move_window>
    aae4:	00 97       	sbiw	r24, 0x00	; 0
    aae6:	19 f3       	breq	.-58     	; 0xaaae <dir_remove+0x42>
    aae8:	84 30       	cpi	r24, 0x04	; 4
    aaea:	91 05       	cpc	r25, r1
    aaec:	11 f4       	brne	.+4      	; 0xaaf2 <dir_remove+0x86>
    aaee:	82 e0       	ldi	r24, 0x02	; 2
    aaf0:	90 e0       	ldi	r25, 0x00	; 0
    aaf2:	cd b7       	in	r28, 0x3d	; 61
    aaf4:	de b7       	in	r29, 0x3e	; 62
    aaf6:	ea e0       	ldi	r30, 0x0A	; 10
    aaf8:	0c 94 59 e5 	jmp	0x1cab2	; 0x1cab2 <__epilogue_restores__+0x10>

0000aafc <dir_find>:
    aafc:	ac e0       	ldi	r26, 0x0C	; 12
    aafe:	b0 e0       	ldi	r27, 0x00	; 0
    ab00:	e4 e8       	ldi	r30, 0x84	; 132
    ab02:	f5 e5       	ldi	r31, 0x55	; 85
    ab04:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    ab08:	9c 87       	std	Y+12, r25	; 0x0c
    ab0a:	8b 87       	std	Y+11, r24	; 0x0b
    ab0c:	fc 01       	movw	r30, r24
    ab0e:	01 90       	ld	r0, Z+
    ab10:	f0 81       	ld	r31, Z
    ab12:	e0 2d       	mov	r30, r0
    ab14:	fc 83       	std	Y+4, r31	; 0x04
    ab16:	eb 83       	std	Y+3, r30	; 0x03
    ab18:	40 e0       	ldi	r20, 0x00	; 0
    ab1a:	50 e0       	ldi	r21, 0x00	; 0
    ab1c:	ba 01       	movw	r22, r20
    ab1e:	3a db       	rcall	.-2444   	; 0xa194 <dir_sdi>
    ab20:	00 97       	sbiw	r24, 0x00	; 0
    ab22:	09 f0       	breq	.+2      	; 0xab26 <dir_find+0x2a>
    ab24:	e7 c0       	rjmp	.+462    	; 0xacf4 <dir_find+0x1f8>
    ab26:	8f ef       	ldi	r24, 0xFF	; 255
    ab28:	9f ef       	ldi	r25, 0xFF	; 255
    ab2a:	dc 01       	movw	r26, r24
    ab2c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab2e:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab30:	80 a7       	std	Z+40, r24	; 0x28
    ab32:	91 a7       	std	Z+41, r25	; 0x29
    ab34:	a2 a7       	std	Z+42, r26	; 0x2a
    ab36:	b3 a7       	std	Z+43, r27	; 0x2b
    ab38:	0f ef       	ldi	r16, 0xFF	; 255
    ab3a:	1f ef       	ldi	r17, 0xFF	; 255
    ab3c:	44 24       	eor	r4, r4
    ab3e:	4a 94       	dec	r4
    ab40:	54 2c       	mov	r5, r4
    ab42:	32 01       	movw	r6, r4
    ab44:	7c 96       	adiw	r30, 0x1c	; 28
    ab46:	fa 87       	std	Y+10, r31	; 0x0a
    ab48:	e9 87       	std	Y+9, r30	; 0x09
    ab4a:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab4c:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab4e:	46 89       	ldd	r20, Z+22	; 0x16
    ab50:	57 89       	ldd	r21, Z+23	; 0x17
    ab52:	60 8d       	ldd	r22, Z+24	; 0x18
    ab54:	71 8d       	ldd	r23, Z+25	; 0x19
    ab56:	8b 81       	ldd	r24, Y+3	; 0x03
    ab58:	9c 81       	ldd	r25, Y+4	; 0x04
    ab5a:	0e 94 3a 4c 	call	0x9874	; 0x9874 <move_window>
    ab5e:	00 97       	sbiw	r24, 0x00	; 0
    ab60:	09 f0       	breq	.+2      	; 0xab64 <dir_find+0x68>
    ab62:	c8 c0       	rjmp	.+400    	; 0xacf4 <dir_find+0x1f8>
    ab64:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab66:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab68:	e2 8c       	ldd	r14, Z+26	; 0x1a
    ab6a:	f3 8c       	ldd	r15, Z+27	; 0x1b
    ab6c:	f7 01       	movw	r30, r14
    ab6e:	d0 80       	ld	r13, Z
    ab70:	dd 20       	and	r13, r13
    ab72:	09 f4       	brne	.+2      	; 0xab76 <dir_find+0x7a>
    ab74:	c1 c0       	rjmp	.+386    	; 0xacf8 <dir_find+0x1fc>
    ab76:	93 85       	ldd	r25, Z+11	; 0x0b
    ab78:	89 2f       	mov	r24, r25
    ab7a:	8f 73       	andi	r24, 0x3F	; 63
    ab7c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab7e:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab80:	84 83       	std	Z+4, r24	; 0x04
    ab82:	f5 ee       	ldi	r31, 0xE5	; 229
    ab84:	df 16       	cp	r13, r31
    ab86:	09 f4       	brne	.+2      	; 0xab8a <dir_find+0x8e>
    ab88:	a6 c0       	rjmp	.+332    	; 0xacd6 <dir_find+0x1da>
    ab8a:	93 ff       	sbrs	r25, 3
    ab8c:	04 c0       	rjmp	.+8      	; 0xab96 <dir_find+0x9a>
    ab8e:	8f 30       	cpi	r24, 0x0F	; 15
    ab90:	09 f0       	breq	.+2      	; 0xab94 <dir_find+0x98>
    ab92:	a1 c0       	rjmp	.+322    	; 0xacd6 <dir_find+0x1da>
    ab94:	03 c0       	rjmp	.+6      	; 0xab9c <dir_find+0xa0>
    ab96:	8f 30       	cpi	r24, 0x0F	; 15
    ab98:	09 f0       	breq	.+2      	; 0xab9c <dir_find+0xa0>
    ab9a:	88 c0       	rjmp	.+272    	; 0xacac <dir_find+0x1b0>
    ab9c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab9e:	fc 85       	ldd	r31, Y+12	; 0x0c
    aba0:	87 a1       	ldd	r24, Z+39	; 0x27
    aba2:	86 fd       	sbrc	r24, 6
    aba4:	9f c0       	rjmp	.+318    	; 0xace4 <dir_find+0x1e8>
    aba6:	d6 fe       	sbrs	r13, 6
    aba8:	10 c0       	rjmp	.+32     	; 0xabca <dir_find+0xce>
    abaa:	f7 01       	movw	r30, r14
    abac:	05 85       	ldd	r16, Z+13	; 0x0d
    abae:	fd 2d       	mov	r31, r13
    abb0:	ff 7b       	andi	r31, 0xBF	; 191
    abb2:	df 2e       	mov	r13, r31
    abb4:	eb 85       	ldd	r30, Y+11	; 0x0b
    abb6:	fc 85       	ldd	r31, Y+12	; 0x0c
    abb8:	86 85       	ldd	r24, Z+14	; 0x0e
    abba:	97 85       	ldd	r25, Z+15	; 0x0f
    abbc:	a0 89       	ldd	r26, Z+16	; 0x10
    abbe:	b1 89       	ldd	r27, Z+17	; 0x11
    abc0:	80 a7       	std	Z+40, r24	; 0x28
    abc2:	91 a7       	std	Z+41, r25	; 0x29
    abc4:	a2 a7       	std	Z+42, r26	; 0x2a
    abc6:	b3 a7       	std	Z+43, r27	; 0x2b
    abc8:	02 c0       	rjmp	.+4      	; 0xabce <dir_find+0xd2>
    abca:	1d 11       	cpse	r17, r13
    abcc:	8a c0       	rjmp	.+276    	; 0xace2 <dir_find+0x1e6>
    abce:	f7 01       	movw	r30, r14
    abd0:	c5 84       	ldd	r12, Z+13	; 0x0d
    abd2:	c0 12       	cpse	r12, r16
    abd4:	86 c0       	rjmp	.+268    	; 0xace2 <dir_find+0x1e6>
    abd6:	82 8d       	ldd	r24, Z+26	; 0x1a
    abd8:	93 8d       	ldd	r25, Z+27	; 0x1b
    abda:	89 2b       	or	r24, r25
    abdc:	09 f0       	breq	.+2      	; 0xabe0 <dir_find+0xe4>
    abde:	91 c0       	rjmp	.+290    	; 0xad02 <dir_find+0x206>
    abe0:	eb 81       	ldd	r30, Y+3	; 0x03
    abe2:	fc 81       	ldd	r31, Y+4	; 0x04
    abe4:	03 84       	ldd	r0, Z+11	; 0x0b
    abe6:	f4 85       	ldd	r31, Z+12	; 0x0c
    abe8:	e0 2d       	mov	r30, r0
    abea:	fe 83       	std	Y+6, r31	; 0x06
    abec:	ed 83       	std	Y+5, r30	; 0x05
    abee:	f7 01       	movw	r30, r14
    abf0:	80 81       	ld	r24, Z
    abf2:	8f 73       	andi	r24, 0x3F	; 63
    abf4:	90 e0       	ldi	r25, 0x00	; 0
    abf6:	01 97       	sbiw	r24, 0x01	; 1
    abf8:	fd e0       	ldi	r31, 0x0D	; 13
    abfa:	f8 9f       	mul	r31, r24
    abfc:	80 01       	movw	r16, r0
    abfe:	f9 9f       	mul	r31, r25
    ac00:	10 0d       	add	r17, r0
    ac02:	11 24       	eor	r1, r1
    ac04:	2d e4       	ldi	r18, 0x4D	; 77
    ac06:	33 e0       	ldi	r19, 0x03	; 3
    ac08:	3a 83       	std	Y+2, r19	; 0x02
    ac0a:	29 83       	std	Y+1, r18	; 0x01
    ac0c:	81 e0       	ldi	r24, 0x01	; 1
    ac0e:	90 e0       	ldi	r25, 0x00	; 0
    ac10:	e9 81       	ldd	r30, Y+1	; 0x01
    ac12:	fa 81       	ldd	r31, Y+2	; 0x02
    ac14:	21 91       	ld	r18, Z+
    ac16:	fa 83       	std	Y+2, r31	; 0x02
    ac18:	e9 83       	std	Y+1, r30	; 0x01
    ac1a:	f7 01       	movw	r30, r14
    ac1c:	e2 0f       	add	r30, r18
    ac1e:	f1 1d       	adc	r31, r1
    ac20:	20 80       	ld	r2, Z
    ac22:	31 80       	ldd	r3, Z+1	; 0x01
    ac24:	00 97       	sbiw	r24, 0x00	; 0
    ac26:	39 f1       	breq	.+78     	; 0xac76 <dir_find+0x17a>
    ac28:	0f 3f       	cpi	r16, 0xFF	; 255
    ac2a:	11 05       	cpc	r17, r1
    ac2c:	11 f0       	breq	.+4      	; 0xac32 <dir_find+0x136>
    ac2e:	08 f0       	brcs	.+2      	; 0xac32 <dir_find+0x136>
    ac30:	68 c0       	rjmp	.+208    	; 0xad02 <dir_find+0x206>
    ac32:	b1 01       	movw	r22, r2
    ac34:	80 e0       	ldi	r24, 0x00	; 0
    ac36:	90 e0       	ldi	r25, 0x00	; 0
    ac38:	0e 94 67 6a 	call	0xd4ce	; 0xd4ce <ff_wtoupper>
    ac3c:	4b 01       	movw	r8, r22
    ac3e:	5c 01       	movw	r10, r24
    ac40:	98 01       	movw	r18, r16
    ac42:	2f 5f       	subi	r18, 0xFF	; 255
    ac44:	3f 4f       	sbci	r19, 0xFF	; 255
    ac46:	38 87       	std	Y+8, r19	; 0x08
    ac48:	2f 83       	std	Y+7, r18	; 0x07
    ac4a:	00 0f       	add	r16, r16
    ac4c:	11 1f       	adc	r17, r17
    ac4e:	ed 81       	ldd	r30, Y+5	; 0x05
    ac50:	fe 81       	ldd	r31, Y+6	; 0x06
    ac52:	e0 0f       	add	r30, r16
    ac54:	f1 1f       	adc	r31, r17
    ac56:	60 81       	ld	r22, Z
    ac58:	71 81       	ldd	r23, Z+1	; 0x01
    ac5a:	80 e0       	ldi	r24, 0x00	; 0
    ac5c:	90 e0       	ldi	r25, 0x00	; 0
    ac5e:	0e 94 67 6a 	call	0xd4ce	; 0xd4ce <ff_wtoupper>
    ac62:	86 16       	cp	r8, r22
    ac64:	97 06       	cpc	r9, r23
    ac66:	a8 06       	cpc	r10, r24
    ac68:	b9 06       	cpc	r11, r25
    ac6a:	09 f0       	breq	.+2      	; 0xac6e <dir_find+0x172>
    ac6c:	4a c0       	rjmp	.+148    	; 0xad02 <dir_find+0x206>
    ac6e:	c1 01       	movw	r24, r2
    ac70:	0f 81       	ldd	r16, Y+7	; 0x07
    ac72:	18 85       	ldd	r17, Y+8	; 0x08
    ac74:	05 c0       	rjmp	.+10     	; 0xac80 <dir_find+0x184>
    ac76:	3f ef       	ldi	r19, 0xFF	; 255
    ac78:	23 16       	cp	r2, r19
    ac7a:	33 06       	cpc	r3, r19
    ac7c:	09 f0       	breq	.+2      	; 0xac80 <dir_find+0x184>
    ac7e:	41 c0       	rjmp	.+130    	; 0xad02 <dir_find+0x206>
    ac80:	e9 81       	ldd	r30, Y+1	; 0x01
    ac82:	fa 81       	ldd	r31, Y+2	; 0x02
    ac84:	ea 55       	subi	r30, 0x5A	; 90
    ac86:	f3 40       	sbci	r31, 0x03	; 3
    ac88:	19 f6       	brne	.-122    	; 0xac10 <dir_find+0x114>
    ac8a:	f7 01       	movw	r30, r14
    ac8c:	20 81       	ld	r18, Z
    ac8e:	26 ff       	sbrs	r18, 6
    ac90:	3a c0       	rjmp	.+116    	; 0xad06 <dir_find+0x20a>
    ac92:	89 2b       	or	r24, r25
    ac94:	c1 f1       	breq	.+112    	; 0xad06 <dir_find+0x20a>
    ac96:	00 0f       	add	r16, r16
    ac98:	11 1f       	adc	r17, r17
    ac9a:	ed 81       	ldd	r30, Y+5	; 0x05
    ac9c:	fe 81       	ldd	r31, Y+6	; 0x06
    ac9e:	e0 0f       	add	r30, r16
    aca0:	f1 1f       	adc	r31, r17
    aca2:	80 81       	ld	r24, Z
    aca4:	91 81       	ldd	r25, Z+1	; 0x01
    aca6:	89 2b       	or	r24, r25
    aca8:	71 f1       	breq	.+92     	; 0xad06 <dir_find+0x20a>
    acaa:	2b c0       	rjmp	.+86     	; 0xad02 <dir_find+0x206>
    acac:	11 11       	cpse	r17, r1
    acae:	05 c0       	rjmp	.+10     	; 0xacba <dir_find+0x1be>
    acb0:	c7 01       	movw	r24, r14
    acb2:	0e 94 73 48 	call	0x90e6	; 0x90e6 <sum_sfn>
    acb6:	08 17       	cp	r16, r24
    acb8:	09 f1       	breq	.+66     	; 0xacfc <dir_find+0x200>
    acba:	eb 85       	ldd	r30, Y+11	; 0x0b
    acbc:	fc 85       	ldd	r31, Y+12	; 0x0c
    acbe:	87 a1       	ldd	r24, Z+39	; 0x27
    acc0:	80 fd       	sbrc	r24, 0
    acc2:	09 c0       	rjmp	.+18     	; 0xacd6 <dir_find+0x1da>
    acc4:	4b e0       	ldi	r20, 0x0B	; 11
    acc6:	50 e0       	ldi	r21, 0x00	; 0
    acc8:	69 85       	ldd	r22, Y+9	; 0x09
    acca:	7a 85       	ldd	r23, Y+10	; 0x0a
    accc:	c7 01       	movw	r24, r14
    acce:	0e 94 7a 47 	call	0x8ef4	; 0x8ef4 <mem_cmp>
    acd2:	89 2b       	or	r24, r25
    acd4:	99 f0       	breq	.+38     	; 0xacfc <dir_find+0x200>
    acd6:	eb 85       	ldd	r30, Y+11	; 0x0b
    acd8:	fc 85       	ldd	r31, Y+12	; 0x0c
    acda:	40 a6       	std	Z+40, r4	; 0x28
    acdc:	51 a6       	std	Z+41, r5	; 0x29
    acde:	62 a6       	std	Z+42, r6	; 0x2a
    ace0:	73 a6       	std	Z+43, r7	; 0x2b
    ace2:	1f ef       	ldi	r17, 0xFF	; 255
    ace4:	60 e0       	ldi	r22, 0x00	; 0
    ace6:	70 e0       	ldi	r23, 0x00	; 0
    ace8:	8b 85       	ldd	r24, Y+11	; 0x0b
    acea:	9c 85       	ldd	r25, Y+12	; 0x0c
    acec:	cb dc       	rcall	.-1642   	; 0xa684 <dir_next>
    acee:	00 97       	sbiw	r24, 0x00	; 0
    acf0:	09 f4       	brne	.+2      	; 0xacf4 <dir_find+0x1f8>
    acf2:	2b cf       	rjmp	.-426    	; 0xab4a <dir_find+0x4e>
    acf4:	28 2f       	mov	r18, r24
    acf6:	0b c0       	rjmp	.+22     	; 0xad0e <dir_find+0x212>
    acf8:	24 e0       	ldi	r18, 0x04	; 4
    acfa:	01 c0       	rjmp	.+2      	; 0xacfe <dir_find+0x202>
    acfc:	20 e0       	ldi	r18, 0x00	; 0
    acfe:	90 e0       	ldi	r25, 0x00	; 0
    ad00:	06 c0       	rjmp	.+12     	; 0xad0e <dir_find+0x212>
    ad02:	0c 2d       	mov	r16, r12
    ad04:	ee cf       	rjmp	.-36     	; 0xace2 <dir_find+0x1e6>
    ad06:	1f ef       	ldi	r17, 0xFF	; 255
    ad08:	1d 0d       	add	r17, r13
    ad0a:	0c 2d       	mov	r16, r12
    ad0c:	eb cf       	rjmp	.-42     	; 0xace4 <dir_find+0x1e8>
    ad0e:	82 2f       	mov	r24, r18
    ad10:	2c 96       	adiw	r28, 0x0c	; 12
    ad12:	e2 e1       	ldi	r30, 0x12	; 18
    ad14:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0000ad18 <dir_register>:
    ad18:	a6 e1       	ldi	r26, 0x16	; 22
    ad1a:	b0 e0       	ldi	r27, 0x00	; 0
    ad1c:	e2 e9       	ldi	r30, 0x92	; 146
    ad1e:	f6 e5       	ldi	r31, 0x56	; 86
    ad20:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    ad24:	dc 01       	movw	r26, r24
    ad26:	97 96       	adiw	r26, 0x27	; 39
    ad28:	2c 91       	ld	r18, X
    ad2a:	97 97       	sbiw	r26, 0x27	; 39
    ad2c:	20 7a       	andi	r18, 0xA0	; 160
    ad2e:	09 f0       	breq	.+2      	; 0xad32 <dir_register+0x1a>
    ad30:	61 c1       	rjmp	.+706    	; 0xaff4 <dir_register+0x2dc>
    ad32:	cd 90       	ld	r12, X+
    ad34:	dc 90       	ld	r13, X
    ad36:	d6 01       	movw	r26, r12
    ad38:	1b 96       	adiw	r26, 0x0b	; 11
    ad3a:	ed 91       	ld	r30, X+
    ad3c:	fc 91       	ld	r31, X
    ad3e:	1c 97       	sbiw	r26, 0x0c	; 12
    ad40:	81 2c       	mov	r8, r1
    ad42:	91 2c       	mov	r9, r1
    ad44:	21 91       	ld	r18, Z+
    ad46:	31 91       	ld	r19, Z+
    ad48:	23 2b       	or	r18, r19
    ad4a:	21 f0       	breq	.+8      	; 0xad54 <dir_register+0x3c>
    ad4c:	bf ef       	ldi	r27, 0xFF	; 255
    ad4e:	8b 1a       	sub	r8, r27
    ad50:	9b 0a       	sbc	r9, r27
    ad52:	f8 cf       	rjmp	.-16     	; 0xad44 <dir_register+0x2c>
    ad54:	8c 01       	movw	r16, r24
    ad56:	5c 01       	movw	r10, r24
    ad58:	ec e1       	ldi	r30, 0x1C	; 28
    ad5a:	ae 0e       	add	r10, r30
    ad5c:	b1 1c       	adc	r11, r1
    ad5e:	4c e0       	ldi	r20, 0x0C	; 12
    ad60:	50 e0       	ldi	r21, 0x00	; 0
    ad62:	b5 01       	movw	r22, r10
    ad64:	ce 01       	movw	r24, r28
    ad66:	01 96       	adiw	r24, 0x01	; 1
    ad68:	0e 94 da 48 	call	0x91b4	; 0x91b4 <mem_cpy.part.0>
    ad6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    ad6e:	80 ff       	sbrs	r24, 0
    ad70:	96 c0       	rjmp	.+300    	; 0xae9e <dir_register+0x186>
    ad72:	80 e4       	ldi	r24, 0x40	; 64
    ad74:	d8 01       	movw	r26, r16
    ad76:	97 96       	adiw	r26, 0x27	; 39
    ad78:	8c 93       	st	X, r24
    ad7a:	41 2c       	mov	r4, r1
    ad7c:	51 2c       	mov	r5, r1
    ad7e:	32 01       	movw	r6, r4
    ad80:	43 94       	inc	r4
    ad82:	72 01       	movw	r14, r4
    ad84:	f6 01       	movw	r30, r12
    ad86:	23 84       	ldd	r2, Z+11	; 0x0b
    ad88:	34 84       	ldd	r3, Z+12	; 0x0c
    ad8a:	4b e0       	ldi	r20, 0x0B	; 11
    ad8c:	50 e0       	ldi	r21, 0x00	; 0
    ad8e:	be 01       	movw	r22, r28
    ad90:	6f 5f       	subi	r22, 0xFF	; 255
    ad92:	7f 4f       	sbci	r23, 0xFF	; 255
    ad94:	c5 01       	movw	r24, r10
    ad96:	0e 94 da 48 	call	0x91b4	; 0x91b4 <mem_cpy.part.0>
    ad9a:	f6 e0       	ldi	r31, 0x06	; 6
    ad9c:	4f 16       	cp	r4, r31
    ad9e:	51 04       	cpc	r5, r1
    ada0:	18 f1       	brcs	.+70     	; 0xade8 <dir_register+0xd0>
    ada2:	f1 01       	movw	r30, r2
    ada4:	b3 01       	movw	r22, r6
    ada6:	a2 01       	movw	r20, r4
    ada8:	81 91       	ld	r24, Z+
    adaa:	91 91       	ld	r25, Z+
    adac:	00 97       	sbiw	r24, 0x00	; 0
    adae:	d9 f0       	breq	.+54     	; 0xade6 <dir_register+0xce>
    adb0:	20 e1       	ldi	r18, 0x10	; 16
    adb2:	30 e0       	ldi	r19, 0x00	; 0
    adb4:	44 0f       	add	r20, r20
    adb6:	55 1f       	adc	r21, r21
    adb8:	66 1f       	adc	r22, r22
    adba:	77 1f       	adc	r23, r23
    adbc:	dc 01       	movw	r26, r24
    adbe:	a1 70       	andi	r26, 0x01	; 1
    adc0:	bb 27       	eor	r27, r27
    adc2:	4a 0f       	add	r20, r26
    adc4:	5b 1f       	adc	r21, r27
    adc6:	61 1d       	adc	r22, r1
    adc8:	71 1d       	adc	r23, r1
    adca:	96 95       	lsr	r25
    adcc:	87 95       	ror	r24
    adce:	60 ff       	sbrs	r22, 0
    add0:	06 c0       	rjmp	.+12     	; 0xadde <dir_register+0xc6>
    add2:	a1 e2       	ldi	r26, 0x21	; 33
    add4:	4a 27       	eor	r20, r26
    add6:	a0 e1       	ldi	r26, 0x10	; 16
    add8:	5a 27       	eor	r21, r26
    adda:	a1 e0       	ldi	r26, 0x01	; 1
    addc:	6a 27       	eor	r22, r26
    adde:	21 50       	subi	r18, 0x01	; 1
    ade0:	31 09       	sbc	r19, r1
    ade2:	41 f7       	brne	.-48     	; 0xadb4 <dir_register+0x9c>
    ade4:	e1 cf       	rjmp	.-62     	; 0xada8 <dir_register+0x90>
    ade6:	7a 01       	movw	r14, r20
    ade8:	fe 01       	movw	r30, r28
    adea:	75 96       	adiw	r30, 0x15	; 21
    adec:	27 e0       	ldi	r18, 0x07	; 7
    adee:	30 e0       	ldi	r19, 0x00	; 0
    adf0:	9e 2d       	mov	r25, r14
    adf2:	9f 70       	andi	r25, 0x0F	; 15
    adf4:	80 e3       	ldi	r24, 0x30	; 48
    adf6:	89 0f       	add	r24, r25
    adf8:	8a 33       	cpi	r24, 0x3A	; 58
    adfa:	10 f0       	brcs	.+4      	; 0xae00 <dir_register+0xe8>
    adfc:	87 e3       	ldi	r24, 0x37	; 55
    adfe:	89 0f       	add	r24, r25
    ae00:	21 50       	subi	r18, 0x01	; 1
    ae02:	31 09       	sbc	r19, r1
    ae04:	82 93       	st	-Z, r24
    ae06:	a4 e0       	ldi	r26, 0x04	; 4
    ae08:	f6 94       	lsr	r15
    ae0a:	e7 94       	ror	r14
    ae0c:	aa 95       	dec	r26
    ae0e:	e1 f7       	brne	.-8      	; 0xae08 <dir_register+0xf0>
    ae10:	e1 14       	cp	r14, r1
    ae12:	f1 04       	cpc	r15, r1
    ae14:	69 f7       	brne	.-38     	; 0xadf0 <dir_register+0xd8>
    ae16:	ed e0       	ldi	r30, 0x0D	; 13
    ae18:	f0 e0       	ldi	r31, 0x00	; 0
    ae1a:	ec 0f       	add	r30, r28
    ae1c:	fd 1f       	adc	r31, r29
    ae1e:	e2 0f       	add	r30, r18
    ae20:	f3 1f       	adc	r31, r19
    ae22:	be e7       	ldi	r27, 0x7E	; 126
    ae24:	b0 83       	st	Z, r27
    ae26:	f5 01       	movw	r30, r10
    ae28:	80 e0       	ldi	r24, 0x00	; 0
    ae2a:	90 e0       	ldi	r25, 0x00	; 0
    ae2c:	28 17       	cp	r18, r24
    ae2e:	39 07       	cpc	r19, r25
    ae30:	29 f0       	breq	.+10     	; 0xae3c <dir_register+0x124>
    ae32:	41 91       	ld	r20, Z+
    ae34:	40 32       	cpi	r20, 0x20	; 32
    ae36:	11 f0       	breq	.+4      	; 0xae3c <dir_register+0x124>
    ae38:	01 96       	adiw	r24, 0x01	; 1
    ae3a:	f8 cf       	rjmp	.-16     	; 0xae2c <dir_register+0x114>
    ae3c:	f5 01       	movw	r30, r10
    ae3e:	e8 0f       	add	r30, r24
    ae40:	f9 1f       	adc	r31, r25
    ae42:	28 30       	cpi	r18, 0x08	; 8
    ae44:	31 05       	cpc	r19, r1
    ae46:	50 f4       	brcc	.+20     	; 0xae5c <dir_register+0x144>
    ae48:	ad e0       	ldi	r26, 0x0D	; 13
    ae4a:	b0 e0       	ldi	r27, 0x00	; 0
    ae4c:	ac 0f       	add	r26, r28
    ae4e:	bd 1f       	adc	r27, r29
    ae50:	a2 0f       	add	r26, r18
    ae52:	b3 1f       	adc	r27, r19
    ae54:	8c 91       	ld	r24, X
    ae56:	2f 5f       	subi	r18, 0xFF	; 255
    ae58:	3f 4f       	sbci	r19, 0xFF	; 255
    ae5a:	01 c0       	rjmp	.+2      	; 0xae5e <dir_register+0x146>
    ae5c:	80 e2       	ldi	r24, 0x20	; 32
    ae5e:	81 93       	st	Z+, r24
    ae60:	cf 01       	movw	r24, r30
    ae62:	8a 19       	sub	r24, r10
    ae64:	9b 09       	sbc	r25, r11
    ae66:	08 97       	sbiw	r24, 0x08	; 8
    ae68:	60 f3       	brcs	.-40     	; 0xae42 <dir_register+0x12a>
    ae6a:	c8 01       	movw	r24, r16
    ae6c:	47 de       	rcall	.-882    	; 0xaafc <dir_find>
    ae6e:	00 97       	sbiw	r24, 0x00	; 0
    ae70:	71 f4       	brne	.+28     	; 0xae8e <dir_register+0x176>
    ae72:	ef ef       	ldi	r30, 0xFF	; 255
    ae74:	4e 1a       	sub	r4, r30
    ae76:	5e 0a       	sbc	r5, r30
    ae78:	6e 0a       	sbc	r6, r30
    ae7a:	7e 0a       	sbc	r7, r30
    ae7c:	f4 e6       	ldi	r31, 0x64	; 100
    ae7e:	4f 16       	cp	r4, r31
    ae80:	51 04       	cpc	r5, r1
    ae82:	61 04       	cpc	r6, r1
    ae84:	71 04       	cpc	r7, r1
    ae86:	09 f0       	breq	.+2      	; 0xae8a <dir_register+0x172>
    ae88:	7c cf       	rjmp	.-264    	; 0xad82 <dir_register+0x6a>
    ae8a:	27 e0       	ldi	r18, 0x07	; 7
    ae8c:	b4 c0       	rjmp	.+360    	; 0xaff6 <dir_register+0x2de>
    ae8e:	84 30       	cpi	r24, 0x04	; 4
    ae90:	91 05       	cpc	r25, r1
    ae92:	09 f0       	breq	.+2      	; 0xae96 <dir_register+0x17e>
    ae94:	df c0       	rjmp	.+446    	; 0xb054 <dir_register+0x33c>
    ae96:	8c 85       	ldd	r24, Y+12	; 0x0c
    ae98:	d8 01       	movw	r26, r16
    ae9a:	97 96       	adiw	r26, 0x27	; 39
    ae9c:	8c 93       	st	X, r24
    ae9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    aea0:	81 ff       	sbrs	r24, 1
    aea2:	0b c0       	rjmp	.+22     	; 0xaeba <dir_register+0x1a2>
    aea4:	c4 01       	movw	r24, r8
    aea6:	0c 96       	adiw	r24, 0x0c	; 12
    aea8:	6d e0       	ldi	r22, 0x0D	; 13
    aeaa:	70 e0       	ldi	r23, 0x00	; 0
    aeac:	0e 94 8c e4 	call	0x1c918	; 0x1c918 <__udivmodhi4>
    aeb0:	7b 01       	movw	r14, r22
    aeb2:	bf ef       	ldi	r27, 0xFF	; 255
    aeb4:	eb 1a       	sub	r14, r27
    aeb6:	fb 0a       	sbc	r15, r27
    aeb8:	03 c0       	rjmp	.+6      	; 0xaec0 <dir_register+0x1a8>
    aeba:	ee 24       	eor	r14, r14
    aebc:	e3 94       	inc	r14
    aebe:	f1 2c       	mov	r15, r1
    aec0:	b7 01       	movw	r22, r14
    aec2:	c8 01       	movw	r24, r16
    aec4:	c7 dc       	rcall	.-1650   	; 0xa854 <dir_alloc>
    aec6:	00 97       	sbiw	r24, 0x00	; 0
    aec8:	09 f0       	breq	.+2      	; 0xaecc <dir_register+0x1b4>
    aeca:	c4 c0       	rjmp	.+392    	; 0xb054 <dir_register+0x33c>
    aecc:	e1 e0       	ldi	r30, 0x01	; 1
    aece:	ee 1a       	sub	r14, r30
    aed0:	f1 08       	sbc	r15, r1
    aed2:	09 f4       	brne	.+2      	; 0xaed6 <dir_register+0x1be>
    aed4:	92 c0       	rjmp	.+292    	; 0xaffa <dir_register+0x2e2>
    aed6:	d8 01       	movw	r26, r16
    aed8:	1e 96       	adiw	r26, 0x0e	; 14
    aeda:	4d 91       	ld	r20, X+
    aedc:	5d 91       	ld	r21, X+
    aede:	6d 91       	ld	r22, X+
    aee0:	7c 91       	ld	r23, X
    aee2:	51 97       	sbiw	r26, 0x11	; 17
    aee4:	c7 01       	movw	r24, r14
    aee6:	e5 e0       	ldi	r30, 0x05	; 5
    aee8:	88 0f       	add	r24, r24
    aeea:	99 1f       	adc	r25, r25
    aeec:	ea 95       	dec	r30
    aeee:	e1 f7       	brne	.-8      	; 0xaee8 <dir_register+0x1d0>
    aef0:	48 1b       	sub	r20, r24
    aef2:	59 0b       	sbc	r21, r25
    aef4:	61 09       	sbc	r22, r1
    aef6:	71 09       	sbc	r23, r1
    aef8:	c8 01       	movw	r24, r16
    aefa:	4c d9       	rcall	.-3432   	; 0xa194 <dir_sdi>
    aefc:	00 97       	sbiw	r24, 0x00	; 0
    aefe:	09 f0       	breq	.+2      	; 0xaf02 <dir_register+0x1ea>
    af00:	a9 c0       	rjmp	.+338    	; 0xb054 <dir_register+0x33c>
    af02:	c5 01       	movw	r24, r10
    af04:	0e 94 73 48 	call	0x90e6	; 0x90e6 <sum_sfn>
    af08:	68 2e       	mov	r6, r24
    af0a:	5f e0       	ldi	r21, 0x0F	; 15
    af0c:	35 2e       	mov	r3, r21
    af0e:	6d e0       	ldi	r22, 0x0D	; 13
    af10:	46 2e       	mov	r4, r22
    af12:	7a e5       	ldi	r23, 0x5A	; 90
    af14:	87 2e       	mov	r8, r23
    af16:	73 e0       	ldi	r23, 0x03	; 3
    af18:	97 2e       	mov	r9, r23
    af1a:	55 24       	eor	r5, r5
    af1c:	53 94       	inc	r5
    af1e:	f8 01       	movw	r30, r16
    af20:	46 89       	ldd	r20, Z+22	; 0x16
    af22:	57 89       	ldd	r21, Z+23	; 0x17
    af24:	60 8d       	ldd	r22, Z+24	; 0x18
    af26:	71 8d       	ldd	r23, Z+25	; 0x19
    af28:	c6 01       	movw	r24, r12
    af2a:	0e 94 3a 4c 	call	0x9874	; 0x9874 <move_window>
    af2e:	00 97       	sbiw	r24, 0x00	; 0
    af30:	09 f0       	breq	.+2      	; 0xaf34 <dir_register+0x21c>
    af32:	90 c0       	rjmp	.+288    	; 0xb054 <dir_register+0x33c>
    af34:	7e 2c       	mov	r7, r14
    af36:	d8 01       	movw	r26, r16
    af38:	5a 96       	adiw	r26, 0x1a	; 26
    af3a:	ed 91       	ld	r30, X+
    af3c:	fc 91       	ld	r31, X
    af3e:	5b 97       	sbiw	r26, 0x1b	; 27
    af40:	d6 01       	movw	r26, r12
    af42:	1b 96       	adiw	r26, 0x0b	; 11
    af44:	6d 91       	ld	r22, X+
    af46:	7c 91       	ld	r23, X
    af48:	1c 97       	sbiw	r26, 0x0c	; 12
    af4a:	65 86       	std	Z+13, r6	; 0x0d
    af4c:	33 86       	std	Z+11, r3	; 0x0b
    af4e:	14 86       	std	Z+12, r1	; 0x0c
    af50:	12 8e       	std	Z+26, r1	; 0x1a
    af52:	13 8e       	std	Z+27, r1	; 0x1b
    af54:	97 01       	movw	r18, r14
    af56:	33 27       	eor	r19, r19
    af58:	21 50       	subi	r18, 0x01	; 1
    af5a:	31 09       	sbc	r19, r1
    af5c:	42 9e       	mul	r4, r18
    af5e:	c0 01       	movw	r24, r0
    af60:	43 9e       	mul	r4, r19
    af62:	90 0d       	add	r25, r0
    af64:	11 24       	eor	r1, r1
    af66:	2d e4       	ldi	r18, 0x4D	; 77
    af68:	33 e0       	ldi	r19, 0x03	; 3
    af6a:	3e 8b       	std	Y+22, r19	; 0x16
    af6c:	2d 8b       	std	Y+21, r18	; 0x15
    af6e:	20 e0       	ldi	r18, 0x00	; 0
    af70:	30 e0       	ldi	r19, 0x00	; 0
    af72:	2f 3f       	cpi	r18, 0xFF	; 255
    af74:	4f ef       	ldi	r20, 0xFF	; 255
    af76:	34 07       	cpc	r19, r20
    af78:	49 f0       	breq	.+18     	; 0xaf8c <dir_register+0x274>
    af7a:	9c 01       	movw	r18, r24
    af7c:	22 0f       	add	r18, r18
    af7e:	33 1f       	adc	r19, r19
    af80:	26 0f       	add	r18, r22
    af82:	37 1f       	adc	r19, r23
    af84:	d9 01       	movw	r26, r18
    af86:	2d 91       	ld	r18, X+
    af88:	3c 91       	ld	r19, X
    af8a:	01 96       	adiw	r24, 0x01	; 1
    af8c:	ad 89       	ldd	r26, Y+21	; 0x15
    af8e:	be 89       	ldd	r27, Y+22	; 0x16
    af90:	4d 91       	ld	r20, X+
    af92:	be 8b       	std	Y+22, r27	; 0x16
    af94:	ad 8b       	std	Y+21, r26	; 0x15
    af96:	df 01       	movw	r26, r30
    af98:	a4 0f       	add	r26, r20
    af9a:	b1 1d       	adc	r27, r1
    af9c:	2c 93       	st	X, r18
    af9e:	11 96       	adiw	r26, 0x01	; 1
    afa0:	3c 93       	st	X, r19
    afa2:	21 15       	cp	r18, r1
    afa4:	31 05       	cpc	r19, r1
    afa6:	11 f4       	brne	.+4      	; 0xafac <dir_register+0x294>
    afa8:	2f ef       	ldi	r18, 0xFF	; 255
    afaa:	3f ef       	ldi	r19, 0xFF	; 255
    afac:	4d 89       	ldd	r20, Y+21	; 0x15
    afae:	5e 89       	ldd	r21, Y+22	; 0x16
    afb0:	84 16       	cp	r8, r20
    afb2:	95 06       	cpc	r9, r21
    afb4:	f1 f6       	brne	.-68     	; 0xaf72 <dir_register+0x25a>
    afb6:	2f 3f       	cpi	r18, 0xFF	; 255
    afb8:	3f 4f       	sbci	r19, 0xFF	; 255
    afba:	49 f0       	breq	.+18     	; 0xafce <dir_register+0x2b6>
    afbc:	88 0f       	add	r24, r24
    afbe:	99 1f       	adc	r25, r25
    afc0:	db 01       	movw	r26, r22
    afc2:	a8 0f       	add	r26, r24
    afc4:	b9 1f       	adc	r27, r25
    afc6:	8d 91       	ld	r24, X+
    afc8:	9c 91       	ld	r25, X
    afca:	89 2b       	or	r24, r25
    afcc:	19 f4       	brne	.+6      	; 0xafd4 <dir_register+0x2bc>
    afce:	87 2d       	mov	r24, r7
    afd0:	80 64       	ori	r24, 0x40	; 64
    afd2:	78 2e       	mov	r7, r24
    afd4:	70 82       	st	Z, r7
    afd6:	d6 01       	movw	r26, r12
    afd8:	13 96       	adiw	r26, 0x03	; 3
    afda:	5c 92       	st	X, r5
    afdc:	60 e0       	ldi	r22, 0x00	; 0
    afde:	70 e0       	ldi	r23, 0x00	; 0
    afe0:	c8 01       	movw	r24, r16
    afe2:	50 db       	rcall	.-2400   	; 0xa684 <dir_next>
    afe4:	00 97       	sbiw	r24, 0x00	; 0
    afe6:	b1 f5       	brne	.+108    	; 0xb054 <dir_register+0x33c>
    afe8:	b1 e0       	ldi	r27, 0x01	; 1
    afea:	eb 1a       	sub	r14, r27
    afec:	f1 08       	sbc	r15, r1
    afee:	09 f0       	breq	.+2      	; 0xaff2 <dir_register+0x2da>
    aff0:	96 cf       	rjmp	.-212    	; 0xaf1e <dir_register+0x206>
    aff2:	03 c0       	rjmp	.+6      	; 0xaffa <dir_register+0x2e2>
    aff4:	26 e0       	ldi	r18, 0x06	; 6
    aff6:	90 e0       	ldi	r25, 0x00	; 0
    aff8:	2e c0       	rjmp	.+92     	; 0xb056 <dir_register+0x33e>
    affa:	d8 01       	movw	r26, r16
    affc:	56 96       	adiw	r26, 0x16	; 22
    affe:	4d 91       	ld	r20, X+
    b000:	5d 91       	ld	r21, X+
    b002:	6d 91       	ld	r22, X+
    b004:	7c 91       	ld	r23, X
    b006:	59 97       	sbiw	r26, 0x19	; 25
    b008:	c6 01       	movw	r24, r12
    b00a:	0e 94 3a 4c 	call	0x9874	; 0x9874 <move_window>
    b00e:	00 97       	sbiw	r24, 0x00	; 0
    b010:	09 f5       	brne	.+66     	; 0xb054 <dir_register+0x33c>
    b012:	40 e2       	ldi	r20, 0x20	; 32
    b014:	50 e0       	ldi	r21, 0x00	; 0
    b016:	60 e0       	ldi	r22, 0x00	; 0
    b018:	70 e0       	ldi	r23, 0x00	; 0
    b01a:	f8 01       	movw	r30, r16
    b01c:	82 8d       	ldd	r24, Z+26	; 0x1a
    b01e:	93 8d       	ldd	r25, Z+27	; 0x1b
    b020:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <mem_set>
    b024:	4b e0       	ldi	r20, 0x0B	; 11
    b026:	50 e0       	ldi	r21, 0x00	; 0
    b028:	b5 01       	movw	r22, r10
    b02a:	d8 01       	movw	r26, r16
    b02c:	5a 96       	adiw	r26, 0x1a	; 26
    b02e:	8d 91       	ld	r24, X+
    b030:	9c 91       	ld	r25, X
    b032:	5b 97       	sbiw	r26, 0x1b	; 27
    b034:	0e 94 da 48 	call	0x91b4	; 0x91b4 <mem_cpy.part.0>
    b038:	d8 01       	movw	r26, r16
    b03a:	5a 96       	adiw	r26, 0x1a	; 26
    b03c:	ed 91       	ld	r30, X+
    b03e:	fc 91       	ld	r31, X
    b040:	5b 97       	sbiw	r26, 0x1b	; 27
    b042:	97 96       	adiw	r26, 0x27	; 39
    b044:	8c 91       	ld	r24, X
    b046:	88 71       	andi	r24, 0x18	; 24
    b048:	84 87       	std	Z+12, r24	; 0x0c
    b04a:	81 e0       	ldi	r24, 0x01	; 1
    b04c:	f6 01       	movw	r30, r12
    b04e:	83 83       	std	Z+3, r24	; 0x03
    b050:	20 e0       	ldi	r18, 0x00	; 0
    b052:	d1 cf       	rjmp	.-94     	; 0xaff6 <dir_register+0x2de>
    b054:	28 2f       	mov	r18, r24
    b056:	82 2f       	mov	r24, r18
    b058:	66 96       	adiw	r28, 0x16	; 22
    b05a:	e2 e1       	ldi	r30, 0x12	; 18
    b05c:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0000b060 <follow_path>:
    b060:	aa e0       	ldi	r26, 0x0A	; 10
    b062:	b0 e0       	ldi	r27, 0x00	; 0
    b064:	e6 e3       	ldi	r30, 0x36	; 54
    b066:	f8 e5       	ldi	r31, 0x58	; 88
    b068:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    b06c:	7c 01       	movw	r14, r24
    b06e:	3b 01       	movw	r6, r22
    b070:	dc 01       	movw	r26, r24
    b072:	0d 90       	ld	r0, X+
    b074:	bc 91       	ld	r27, X
    b076:	a0 2d       	mov	r26, r0
    b078:	be 83       	std	Y+6, r27	; 0x06
    b07a:	ad 83       	std	Y+5, r26	; 0x05
    b07c:	fb 01       	movw	r30, r22
    b07e:	80 81       	ld	r24, Z
    b080:	8f 32       	cpi	r24, 0x2F	; 47
    b082:	11 f0       	breq	.+4      	; 0xb088 <follow_path+0x28>
    b084:	8c 35       	cpi	r24, 0x5C	; 92
    b086:	11 f4       	brne	.+4      	; 0xb08c <follow_path+0x2c>
    b088:	93 01       	movw	r18, r6
    b08a:	0c c0       	rjmp	.+24     	; 0xb0a4 <follow_path+0x44>
    b08c:	ed 81       	ldd	r30, Y+5	; 0x05
    b08e:	fe 81       	ldd	r31, Y+6	; 0x06
    b090:	85 89       	ldd	r24, Z+21	; 0x15
    b092:	96 89       	ldd	r25, Z+22	; 0x16
    b094:	a7 89       	ldd	r26, Z+23	; 0x17
    b096:	b0 8d       	ldd	r27, Z+24	; 0x18
    b098:	f7 01       	movw	r30, r14
    b09a:	86 83       	std	Z+6, r24	; 0x06
    b09c:	97 83       	std	Z+7, r25	; 0x07
    b09e:	a0 87       	std	Z+8, r26	; 0x08
    b0a0:	b1 87       	std	Z+9, r27	; 0x09
    b0a2:	0e c0       	rjmp	.+28     	; 0xb0c0 <follow_path+0x60>
    b0a4:	39 01       	movw	r6, r18
    b0a6:	d9 01       	movw	r26, r18
    b0a8:	8c 91       	ld	r24, X
    b0aa:	2f 5f       	subi	r18, 0xFF	; 255
    b0ac:	3f 4f       	sbci	r19, 0xFF	; 255
    b0ae:	8f 32       	cpi	r24, 0x2F	; 47
    b0b0:	c9 f3       	breq	.-14     	; 0xb0a4 <follow_path+0x44>
    b0b2:	8c 35       	cpi	r24, 0x5C	; 92
    b0b4:	b9 f3       	breq	.-18     	; 0xb0a4 <follow_path+0x44>
    b0b6:	f7 01       	movw	r30, r14
    b0b8:	16 82       	std	Z+6, r1	; 0x06
    b0ba:	17 82       	std	Z+7, r1	; 0x07
    b0bc:	10 86       	std	Z+8, r1	; 0x08
    b0be:	11 86       	std	Z+9, r1	; 0x09
    b0c0:	d3 01       	movw	r26, r6
    b0c2:	8c 91       	ld	r24, X
    b0c4:	80 32       	cpi	r24, 0x20	; 32
    b0c6:	58 f0       	brcs	.+22     	; 0xb0de <follow_path+0x7e>
    b0c8:	f7 01       	movw	r30, r14
    b0ca:	7c 96       	adiw	r30, 0x1c	; 28
    b0cc:	f8 87       	std	Y+8, r31	; 0x08
    b0ce:	ef 83       	std	Y+7, r30	; 0x07
    b0d0:	2d 81       	ldd	r18, Y+5	; 0x05
    b0d2:	3e 81       	ldd	r19, Y+6	; 0x06
    b0d4:	2b 5c       	subi	r18, 0xCB	; 203
    b0d6:	3f 4f       	sbci	r19, 0xFF	; 255
    b0d8:	3a 87       	std	Y+10, r19	; 0x0a
    b0da:	29 87       	std	Y+9, r18	; 0x09
    b0dc:	98 c0       	rjmp	.+304    	; 0xb20e <follow_path+0x1ae>
    b0de:	80 e8       	ldi	r24, 0x80	; 128
    b0e0:	d7 01       	movw	r26, r14
    b0e2:	97 96       	adiw	r26, 0x27	; 39
    b0e4:	8c 93       	st	X, r24
    b0e6:	40 e0       	ldi	r20, 0x00	; 0
    b0e8:	50 e0       	ldi	r21, 0x00	; 0
    b0ea:	ba 01       	movw	r22, r20
    b0ec:	c7 01       	movw	r24, r14
    b0ee:	52 d8       	rcall	.-3932   	; 0xa194 <dir_sdi>
    b0f0:	e9 c1       	rjmp	.+978    	; 0xb4c4 <follow_path+0x464>
    b0f2:	6c 35       	cpi	r22, 0x5C	; 92
    b0f4:	71 05       	cpc	r23, r1
    b0f6:	b9 f1       	breq	.+110    	; 0xb166 <follow_path+0x106>
    b0f8:	60 38       	cpi	r22, 0x80	; 128
    b0fa:	71 05       	cpc	r23, r1
    b0fc:	28 f4       	brcc	.+10     	; 0xb108 <follow_path+0xa8>
    b0fe:	e4 ef       	ldi	r30, 0xF4	; 244
    b100:	f7 e0       	ldi	r31, 0x07	; 7
    b102:	41 91       	ld	r20, Z+
    b104:	41 11       	cpse	r20, r1
    b106:	8d c0       	rjmp	.+282    	; 0xb222 <follow_path+0x1c2>
    b108:	0f 3f       	cpi	r16, 0xFF	; 255
    b10a:	11 05       	cpc	r17, r1
    b10c:	08 f0       	brcs	.+2      	; 0xb110 <follow_path+0xb0>
    b10e:	bc c1       	rjmp	.+888    	; 0xb488 <follow_path+0x428>
    b110:	f8 01       	movw	r30, r16
    b112:	ee 0f       	add	r30, r30
    b114:	ff 1f       	adc	r31, r31
    b116:	ea 0d       	add	r30, r10
    b118:	fb 1d       	adc	r31, r11
    b11a:	71 83       	std	Z+1, r23	; 0x01
    b11c:	60 83       	st	Z, r22
    b11e:	0f 5f       	subi	r16, 0xFF	; 255
    b120:	1f 4f       	sbci	r17, 0xFF	; 255
    b122:	ce 01       	movw	r24, r28
    b124:	01 96       	adiw	r24, 0x01	; 1
    b126:	0e 94 89 47 	call	0x8f12	; 0x8f12 <tchar2uni>
    b12a:	6f 3f       	cpi	r22, 0xFF	; 255
    b12c:	bf ef       	ldi	r27, 0xFF	; 255
    b12e:	7b 07       	cpc	r23, r27
    b130:	8b 07       	cpc	r24, r27
    b132:	9b 07       	cpc	r25, r27
    b134:	09 f4       	brne	.+2      	; 0xb138 <follow_path+0xd8>
    b136:	a8 c1       	rjmp	.+848    	; 0xb488 <follow_path+0x428>
    b138:	61 15       	cp	r22, r1
    b13a:	71 05       	cpc	r23, r1
    b13c:	e1 e0       	ldi	r30, 0x01	; 1
    b13e:	8e 07       	cpc	r24, r30
    b140:	91 05       	cpc	r25, r1
    b142:	48 f0       	brcs	.+18     	; 0xb156 <follow_path+0xf6>
    b144:	f8 01       	movw	r30, r16
    b146:	ee 0f       	add	r30, r30
    b148:	ff 1f       	adc	r31, r31
    b14a:	ea 0d       	add	r30, r10
    b14c:	fb 1d       	adc	r31, r11
    b14e:	91 83       	std	Z+1, r25	; 0x01
    b150:	80 83       	st	Z, r24
    b152:	0f 5f       	subi	r16, 0xFF	; 255
    b154:	1f 4f       	sbci	r17, 0xFF	; 255
    b156:	9b 01       	movw	r18, r22
    b158:	60 32       	cpi	r22, 0x20	; 32
    b15a:	71 05       	cpc	r23, r1
    b15c:	08 f4       	brcc	.+2      	; 0xb160 <follow_path+0x100>
    b15e:	6b c0       	rjmp	.+214    	; 0xb236 <follow_path+0x1d6>
    b160:	6f 32       	cpi	r22, 0x2F	; 47
    b162:	71 05       	cpc	r23, r1
    b164:	31 f6       	brne	.-116    	; 0xb0f2 <follow_path+0x92>
    b166:	e9 81       	ldd	r30, Y+1	; 0x01
    b168:	fa 81       	ldd	r31, Y+2	; 0x02
    b16a:	80 81       	ld	r24, Z
    b16c:	8f 32       	cpi	r24, 0x2F	; 47
    b16e:	09 f4       	brne	.+2      	; 0xb172 <follow_path+0x112>
    b170:	5e c0       	rjmp	.+188    	; 0xb22e <follow_path+0x1ce>
    b172:	8c 35       	cpi	r24, 0x5C	; 92
    b174:	09 f4       	brne	.+2      	; 0xb178 <follow_path+0x118>
    b176:	5b c0       	rjmp	.+182    	; 0xb22e <follow_path+0x1ce>
    b178:	1b 82       	std	Y+3, r1	; 0x03
    b17a:	69 80       	ldd	r6, Y+1	; 0x01
    b17c:	7a 80       	ldd	r7, Y+2	; 0x02
    b17e:	f8 01       	movw	r30, r16
    b180:	ee 0f       	add	r30, r30
    b182:	ff 1f       	adc	r31, r31
    b184:	01 30       	cpi	r16, 0x01	; 1
    b186:	11 05       	cpc	r17, r1
    b188:	09 f0       	breq	.+2      	; 0xb18c <follow_path+0x12c>
    b18a:	58 c0       	rjmp	.+176    	; 0xb23c <follow_path+0x1dc>
    b18c:	d5 01       	movw	r26, r10
    b18e:	8d 91       	ld	r24, X+
    b190:	9c 91       	ld	r25, X
    b192:	8e 97       	sbiw	r24, 0x2e	; 46
    b194:	09 f0       	breq	.+2      	; 0xb198 <follow_path+0x138>
    b196:	5d c0       	rjmp	.+186    	; 0xb252 <follow_path+0x1f2>
    b198:	ea 0d       	add	r30, r10
    b19a:	fb 1d       	adc	r31, r11
    b19c:	11 82       	std	Z+1, r1	; 0x01
    b19e:	10 82       	st	Z, r1
    b1a0:	f7 01       	movw	r30, r14
    b1a2:	7c 96       	adiw	r30, 0x1c	; 28
    b1a4:	80 e0       	ldi	r24, 0x00	; 0
    b1a6:	90 e0       	ldi	r25, 0x00	; 0
    b1a8:	80 17       	cp	r24, r16
    b1aa:	91 07       	cpc	r25, r17
    b1ac:	08 f0       	brcs	.+2      	; 0xb1b0 <follow_path+0x150>
    b1ae:	54 c0       	rjmp	.+168    	; 0xb258 <follow_path+0x1f8>
    b1b0:	2e e2       	ldi	r18, 0x2E	; 46
    b1b2:	21 93       	st	Z+, r18
    b1b4:	01 96       	adiw	r24, 0x01	; 1
    b1b6:	8b 30       	cpi	r24, 0x0B	; 11
    b1b8:	91 05       	cpc	r25, r1
    b1ba:	b1 f7       	brne	.-20     	; 0xb1a8 <follow_path+0x148>
    b1bc:	8b 81       	ldd	r24, Y+3	; 0x03
    b1be:	80 62       	ori	r24, 0x20	; 32
    b1c0:	f7 01       	movw	r30, r14
    b1c2:	87 a3       	std	Z+39, r24	; 0x27
    b1c4:	80 e0       	ldi	r24, 0x00	; 0
    b1c6:	90 e0       	ldi	r25, 0x00	; 0
    b1c8:	00 97       	sbiw	r24, 0x00	; 0
    b1ca:	09 f0       	breq	.+2      	; 0xb1ce <follow_path+0x16e>
    b1cc:	7b c1       	rjmp	.+758    	; 0xb4c4 <follow_path+0x464>
    b1ce:	c7 01       	movw	r24, r14
    b1d0:	95 dc       	rcall	.-1750   	; 0xaafc <dir_find>
    b1d2:	d7 01       	movw	r26, r14
    b1d4:	97 96       	adiw	r26, 0x27	; 39
    b1d6:	2c 91       	ld	r18, X
    b1d8:	97 97       	sbiw	r26, 0x27	; 39
    b1da:	00 97       	sbiw	r24, 0x00	; 0
    b1dc:	09 f0       	breq	.+2      	; 0xb1e0 <follow_path+0x180>
    b1de:	57 c1       	rjmp	.+686    	; 0xb48e <follow_path+0x42e>
    b1e0:	22 fd       	sbrc	r18, 2
    b1e2:	70 c1       	rjmp	.+736    	; 0xb4c4 <follow_path+0x464>
    b1e4:	f7 01       	movw	r30, r14
    b1e6:	84 81       	ldd	r24, Z+4	; 0x04
    b1e8:	84 ff       	sbrs	r24, 4
    b1ea:	63 c1       	rjmp	.+710    	; 0xb4b2 <follow_path+0x452>
    b1ec:	66 85       	ldd	r22, Z+14	; 0x0e
    b1ee:	77 85       	ldd	r23, Z+15	; 0x0f
    b1f0:	71 70       	andi	r23, 0x01	; 1
    b1f2:	29 85       	ldd	r18, Y+9	; 0x09
    b1f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    b1f6:	62 0f       	add	r22, r18
    b1f8:	73 1f       	adc	r23, r19
    b1fa:	ad 81       	ldd	r26, Y+5	; 0x05
    b1fc:	be 81       	ldd	r27, Y+6	; 0x06
    b1fe:	8c 91       	ld	r24, X
    b200:	0e 94 ab 4a 	call	0x9556	; 0x9556 <ld_clust.isra.4>
    b204:	f7 01       	movw	r30, r14
    b206:	66 83       	std	Z+6, r22	; 0x06
    b208:	77 83       	std	Z+7, r23	; 0x07
    b20a:	80 87       	std	Z+8, r24	; 0x08
    b20c:	91 87       	std	Z+9, r25	; 0x09
    b20e:	7a 82       	std	Y+2, r7	; 0x02
    b210:	69 82       	std	Y+1, r6	; 0x01
    b212:	d7 01       	movw	r26, r14
    b214:	ed 91       	ld	r30, X+
    b216:	fc 91       	ld	r31, X
    b218:	a3 84       	ldd	r10, Z+11	; 0x0b
    b21a:	b4 84       	ldd	r11, Z+12	; 0x0c
    b21c:	00 e0       	ldi	r16, 0x00	; 0
    b21e:	10 e0       	ldi	r17, 0x00	; 0
    b220:	80 cf       	rjmp	.-256    	; 0xb122 <follow_path+0xc2>
    b222:	50 e0       	ldi	r21, 0x00	; 0
    b224:	24 17       	cp	r18, r20
    b226:	35 07       	cpc	r19, r21
    b228:	09 f0       	breq	.+2      	; 0xb22c <follow_path+0x1cc>
    b22a:	6b cf       	rjmp	.-298    	; 0xb102 <follow_path+0xa2>
    b22c:	2d c1       	rjmp	.+602    	; 0xb488 <follow_path+0x428>
    b22e:	31 96       	adiw	r30, 0x01	; 1
    b230:	fa 83       	std	Y+2, r31	; 0x02
    b232:	e9 83       	std	Y+1, r30	; 0x01
    b234:	98 cf       	rjmp	.-208    	; 0xb166 <follow_path+0x106>
    b236:	f4 e0       	ldi	r31, 0x04	; 4
    b238:	fb 83       	std	Y+3, r31	; 0x03
    b23a:	9f cf       	rjmp	.-194    	; 0xb17a <follow_path+0x11a>
    b23c:	02 30       	cpi	r16, 0x02	; 2
    b23e:	11 05       	cpc	r17, r1
    b240:	41 f4       	brne	.+16     	; 0xb252 <follow_path+0x1f2>
    b242:	d5 01       	movw	r26, r10
    b244:	12 96       	adiw	r26, 0x02	; 2
    b246:	8d 91       	ld	r24, X+
    b248:	9c 91       	ld	r25, X
    b24a:	13 97       	sbiw	r26, 0x03	; 3
    b24c:	8e 97       	sbiw	r24, 0x2e	; 46
    b24e:	09 f4       	brne	.+2      	; 0xb252 <follow_path+0x1f2>
    b250:	9e cf       	rjmp	.-196    	; 0xb18e <follow_path+0x12e>
    b252:	ea 0d       	add	r30, r10
    b254:	fb 1d       	adc	r31, r11
    b256:	09 c0       	rjmp	.+18     	; 0xb26a <follow_path+0x20a>
    b258:	20 e2       	ldi	r18, 0x20	; 32
    b25a:	ab cf       	rjmp	.-170    	; 0xb1b2 <follow_path+0x152>
    b25c:	92 91       	ld	r25, -Z
    b25e:	82 91       	ld	r24, -Z
    b260:	80 32       	cpi	r24, 0x20	; 32
    b262:	91 05       	cpc	r25, r1
    b264:	31 f4       	brne	.+12     	; 0xb272 <follow_path+0x212>
    b266:	01 50       	subi	r16, 0x01	; 1
    b268:	11 09       	sbc	r17, r1
    b26a:	01 15       	cp	r16, r1
    b26c:	11 05       	cpc	r17, r1
    b26e:	b1 f7       	brne	.-20     	; 0xb25c <follow_path+0x1fc>
    b270:	02 c0       	rjmp	.+4      	; 0xb276 <follow_path+0x216>
    b272:	8e 97       	sbiw	r24, 0x2e	; 46
    b274:	c1 f3       	breq	.-16     	; 0xb266 <follow_path+0x206>
    b276:	f8 01       	movw	r30, r16
    b278:	ee 0f       	add	r30, r30
    b27a:	ff 1f       	adc	r31, r31
    b27c:	ea 0d       	add	r30, r10
    b27e:	fb 1d       	adc	r31, r11
    b280:	11 82       	std	Z+1, r1	; 0x01
    b282:	10 82       	st	Z, r1
    b284:	01 15       	cp	r16, r1
    b286:	11 05       	cpc	r17, r1
    b288:	09 f4       	brne	.+2      	; 0xb28c <follow_path+0x22c>
    b28a:	fe c0       	rjmp	.+508    	; 0xb488 <follow_path+0x428>
    b28c:	d5 01       	movw	r26, r10
    b28e:	41 2c       	mov	r4, r1
    b290:	51 2c       	mov	r5, r1
    b292:	8d 91       	ld	r24, X+
    b294:	9d 91       	ld	r25, X+
    b296:	80 32       	cpi	r24, 0x20	; 32
    b298:	91 05       	cpc	r25, r1
    b29a:	21 f4       	brne	.+8      	; 0xb2a4 <follow_path+0x244>
    b29c:	2f ef       	ldi	r18, 0xFF	; 255
    b29e:	42 1a       	sub	r4, r18
    b2a0:	52 0a       	sbc	r5, r18
    b2a2:	f7 cf       	rjmp	.-18     	; 0xb292 <follow_path+0x232>
    b2a4:	41 14       	cp	r4, r1
    b2a6:	51 04       	cpc	r5, r1
    b2a8:	11 f4       	brne	.+4      	; 0xb2ae <follow_path+0x24e>
    b2aa:	8e 97       	sbiw	r24, 0x2e	; 46
    b2ac:	39 f4       	brne	.+14     	; 0xb2bc <follow_path+0x25c>
    b2ae:	3b 81       	ldd	r19, Y+3	; 0x03
    b2b0:	33 60       	ori	r19, 0x03	; 3
    b2b2:	3b 83       	std	Y+3, r19	; 0x03
    b2b4:	03 c0       	rjmp	.+6      	; 0xb2bc <follow_path+0x25c>
    b2b6:	01 50       	subi	r16, 0x01	; 1
    b2b8:	11 09       	sbc	r17, r1
    b2ba:	21 f0       	breq	.+8      	; 0xb2c4 <follow_path+0x264>
    b2bc:	92 91       	ld	r25, -Z
    b2be:	82 91       	ld	r24, -Z
    b2c0:	8e 97       	sbiw	r24, 0x2e	; 46
    b2c2:	c9 f7       	brne	.-14     	; 0xb2b6 <follow_path+0x256>
    b2c4:	4b e0       	ldi	r20, 0x0B	; 11
    b2c6:	50 e0       	ldi	r21, 0x00	; 0
    b2c8:	60 e2       	ldi	r22, 0x20	; 32
    b2ca:	70 e0       	ldi	r23, 0x00	; 0
    b2cc:	8f 81       	ldd	r24, Y+7	; 0x07
    b2ce:	98 85       	ldd	r25, Y+8	; 0x08
    b2d0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <mem_set>
    b2d4:	48 e0       	ldi	r20, 0x08	; 8
    b2d6:	84 2e       	mov	r8, r20
    b2d8:	91 2c       	mov	r9, r1
    b2da:	c1 2c       	mov	r12, r1
    b2dc:	d1 2c       	mov	r13, r1
    b2de:	1c 82       	std	Y+4, r1	; 0x04
    b2e0:	12 01       	movw	r2, r4
    b2e2:	8f ef       	ldi	r24, 0xFF	; 255
    b2e4:	28 1a       	sub	r2, r24
    b2e6:	38 0a       	sbc	r3, r24
    b2e8:	44 0c       	add	r4, r4
    b2ea:	55 1c       	adc	r5, r5
    b2ec:	f5 01       	movw	r30, r10
    b2ee:	e4 0d       	add	r30, r4
    b2f0:	f5 1d       	adc	r31, r5
    b2f2:	80 81       	ld	r24, Z
    b2f4:	91 81       	ldd	r25, Z+1	; 0x01
    b2f6:	00 97       	sbiw	r24, 0x00	; 0
    b2f8:	09 f4       	brne	.+2      	; 0xb2fc <follow_path+0x29c>
    b2fa:	98 c0       	rjmp	.+304    	; 0xb42c <follow_path+0x3cc>
    b2fc:	80 32       	cpi	r24, 0x20	; 32
    b2fe:	91 05       	cpc	r25, r1
    b300:	31 f0       	breq	.+12     	; 0xb30e <follow_path+0x2ae>
    b302:	8e 32       	cpi	r24, 0x2E	; 46
    b304:	91 05       	cpc	r25, r1
    b306:	41 f4       	brne	.+16     	; 0xb318 <follow_path+0x2b8>
    b308:	20 16       	cp	r2, r16
    b30a:	31 06       	cpc	r3, r17
    b30c:	61 f0       	breq	.+24     	; 0xb326 <follow_path+0x2c6>
    b30e:	9b 81       	ldd	r25, Y+3	; 0x03
    b310:	93 60       	ori	r25, 0x03	; 3
    b312:	9b 83       	std	Y+3, r25	; 0x03
    b314:	21 01       	movw	r4, r2
    b316:	e4 cf       	rjmp	.-56     	; 0xb2e0 <follow_path+0x280>
    b318:	c8 14       	cp	r12, r8
    b31a:	d9 04       	cpc	r13, r9
    b31c:	40 f4       	brcc	.+16     	; 0xb32e <follow_path+0x2ce>
    b31e:	20 16       	cp	r2, r16
    b320:	31 06       	cpc	r3, r17
    b322:	31 f5       	brne	.+76     	; 0xb370 <follow_path+0x310>
    b324:	c9 c0       	rjmp	.+402    	; 0xb4b8 <follow_path+0x458>
    b326:	c8 14       	cp	r12, r8
    b328:	d9 04       	cpc	r13, r9
    b32a:	08 f4       	brcc	.+2      	; 0xb32e <follow_path+0x2ce>
    b32c:	c5 c0       	rjmp	.+394    	; 0xb4b8 <follow_path+0x458>
    b32e:	ab e0       	ldi	r26, 0x0B	; 11
    b330:	8a 16       	cp	r8, r26
    b332:	91 04       	cpc	r9, r1
    b334:	39 f4       	brne	.+14     	; 0xb344 <follow_path+0x2e4>
    b336:	bb 81       	ldd	r27, Y+3	; 0x03
    b338:	b3 60       	ori	r27, 0x03	; 3
    b33a:	bb 83       	std	Y+3, r27	; 0x03
    b33c:	2b e0       	ldi	r18, 0x0B	; 11
    b33e:	82 2e       	mov	r8, r18
    b340:	91 2c       	mov	r9, r1
    b342:	74 c0       	rjmp	.+232    	; 0xb42c <follow_path+0x3cc>
    b344:	20 16       	cp	r2, r16
    b346:	31 06       	cpc	r3, r17
    b348:	39 f0       	breq	.+14     	; 0xb358 <follow_path+0x2f8>
    b34a:	eb 81       	ldd	r30, Y+3	; 0x03
    b34c:	e3 60       	ori	r30, 0x03	; 3
    b34e:	eb 83       	std	Y+3, r30	; 0x03
    b350:	02 15       	cp	r16, r2
    b352:	13 05       	cpc	r17, r3
    b354:	08 f4       	brcc	.+2      	; 0xb358 <follow_path+0x2f8>
    b356:	6a c0       	rjmp	.+212    	; 0xb42c <follow_path+0x3cc>
    b358:	fc 81       	ldd	r31, Y+4	; 0x04
    b35a:	ff 0f       	add	r31, r31
    b35c:	ff 0f       	add	r31, r31
    b35e:	fc 83       	std	Y+4, r31	; 0x04
    b360:	18 01       	movw	r2, r16
    b362:	8b e0       	ldi	r24, 0x0B	; 11
    b364:	88 2e       	mov	r8, r24
    b366:	91 2c       	mov	r9, r1
    b368:	98 e0       	ldi	r25, 0x08	; 8
    b36a:	c9 2e       	mov	r12, r25
    b36c:	d1 2c       	mov	r13, r1
    b36e:	d2 cf       	rjmp	.-92     	; 0xb314 <follow_path+0x2b4>
    b370:	80 38       	cpi	r24, 0x80	; 128
    b372:	91 05       	cpc	r25, r1
    b374:	78 f1       	brcs	.+94     	; 0xb3d4 <follow_path+0x374>
    b376:	2b 81       	ldd	r18, Y+3	; 0x03
    b378:	22 60       	ori	r18, 0x02	; 2
    b37a:	52 2e       	mov	r5, r18
    b37c:	bc 01       	movw	r22, r24
    b37e:	80 e0       	ldi	r24, 0x00	; 0
    b380:	90 e0       	ldi	r25, 0x00	; 0
    b382:	45 eb       	ldi	r20, 0xB5	; 181
    b384:	51 e0       	ldi	r21, 0x01	; 1
    b386:	0e 94 1f 6a 	call	0xd43e	; 0xd43e <ff_uni2oem>
    b38a:	87 ff       	sbrs	r24, 7
    b38c:	08 c0       	rjmp	.+16     	; 0xb39e <follow_path+0x33e>
    b38e:	8f 77       	andi	r24, 0x7F	; 127
    b390:	99 27       	eor	r25, r25
    b392:	fc 01       	movw	r30, r24
    b394:	e3 53       	subi	r30, 0x33	; 51
    b396:	fd 4f       	sbci	r31, 0xFD	; 253
    b398:	80 81       	ld	r24, Z
    b39a:	90 e0       	ldi	r25, 0x00	; 0
    b39c:	18 c0       	rjmp	.+48     	; 0xb3ce <follow_path+0x36e>
    b39e:	8f 3f       	cpi	r24, 0xFF	; 255
    b3a0:	91 05       	cpc	r25, r1
    b3a2:	a9 f0       	breq	.+42     	; 0xb3ce <follow_path+0x36e>
    b3a4:	a0 f0       	brcs	.+40     	; 0xb3ce <follow_path+0x36e>
    b3a6:	94 01       	movw	r18, r8
    b3a8:	21 50       	subi	r18, 0x01	; 1
    b3aa:	31 09       	sbc	r19, r1
    b3ac:	c2 16       	cp	r12, r18
    b3ae:	d3 06       	cpc	r13, r19
    b3b0:	28 f0       	brcs	.+10     	; 0xb3bc <follow_path+0x35c>
    b3b2:	3b 81       	ldd	r19, Y+3	; 0x03
    b3b4:	33 60       	ori	r19, 0x03	; 3
    b3b6:	3b 83       	std	Y+3, r19	; 0x03
    b3b8:	64 01       	movw	r12, r8
    b3ba:	ac cf       	rjmp	.-168    	; 0xb314 <follow_path+0x2b4>
    b3bc:	f7 01       	movw	r30, r14
    b3be:	ec 0d       	add	r30, r12
    b3c0:	fd 1d       	adc	r31, r13
    b3c2:	94 8f       	std	Z+28, r25	; 0x1c
    b3c4:	d6 01       	movw	r26, r12
    b3c6:	11 96       	adiw	r26, 0x01	; 1
    b3c8:	6d 01       	movw	r12, r26
    b3ca:	5b 82       	std	Y+3, r5	; 0x03
    b3cc:	26 c0       	rjmp	.+76     	; 0xb41a <follow_path+0x3ba>
    b3ce:	00 97       	sbiw	r24, 0x00	; 0
    b3d0:	59 f0       	breq	.+22     	; 0xb3e8 <follow_path+0x388>
    b3d2:	5b 82       	std	Y+3, r5	; 0x03
    b3d4:	ed ef       	ldi	r30, 0xFD	; 253
    b3d6:	f7 e0       	ldi	r31, 0x07	; 7
    b3d8:	21 91       	ld	r18, Z+
    b3da:	22 23       	and	r18, r18
    b3dc:	59 f0       	breq	.+22     	; 0xb3f4 <follow_path+0x394>
    b3de:	30 e0       	ldi	r19, 0x00	; 0
    b3e0:	82 17       	cp	r24, r18
    b3e2:	93 07       	cpc	r25, r19
    b3e4:	c9 f7       	brne	.-14     	; 0xb3d8 <follow_path+0x378>
    b3e6:	5b 80       	ldd	r5, Y+3	; 0x03
    b3e8:	b5 2d       	mov	r27, r5
    b3ea:	b3 60       	ori	r27, 0x03	; 3
    b3ec:	bb 83       	std	Y+3, r27	; 0x03
    b3ee:	8f e5       	ldi	r24, 0x5F	; 95
    b3f0:	90 e0       	ldi	r25, 0x00	; 0
    b3f2:	13 c0       	rjmp	.+38     	; 0xb41a <follow_path+0x3ba>
    b3f4:	9c 01       	movw	r18, r24
    b3f6:	21 54       	subi	r18, 0x41	; 65
    b3f8:	31 09       	sbc	r19, r1
    b3fa:	2a 31       	cpi	r18, 0x1A	; 26
    b3fc:	31 05       	cpc	r19, r1
    b3fe:	18 f4       	brcc	.+6      	; 0xb406 <follow_path+0x3a6>
    b400:	ec 81       	ldd	r30, Y+4	; 0x04
    b402:	e2 60       	ori	r30, 0x02	; 2
    b404:	ec 83       	std	Y+4, r30	; 0x04
    b406:	9c 01       	movw	r18, r24
    b408:	21 56       	subi	r18, 0x61	; 97
    b40a:	31 09       	sbc	r19, r1
    b40c:	2a 31       	cpi	r18, 0x1A	; 26
    b40e:	31 05       	cpc	r19, r1
    b410:	20 f4       	brcc	.+8      	; 0xb41a <follow_path+0x3ba>
    b412:	fc 81       	ldd	r31, Y+4	; 0x04
    b414:	f1 60       	ori	r31, 0x01	; 1
    b416:	fc 83       	std	Y+4, r31	; 0x04
    b418:	80 97       	sbiw	r24, 0x20	; 32
    b41a:	f7 01       	movw	r30, r14
    b41c:	ec 0d       	add	r30, r12
    b41e:	fd 1d       	adc	r31, r13
    b420:	84 8f       	std	Z+28, r24	; 0x1c
    b422:	96 01       	movw	r18, r12
    b424:	2f 5f       	subi	r18, 0xFF	; 255
    b426:	3f 4f       	sbci	r19, 0xFF	; 255
    b428:	69 01       	movw	r12, r18
    b42a:	74 cf       	rjmp	.-280    	; 0xb314 <follow_path+0x2b4>
    b42c:	d7 01       	movw	r26, r14
    b42e:	5c 96       	adiw	r26, 0x1c	; 28
    b430:	8c 91       	ld	r24, X
    b432:	5c 97       	sbiw	r26, 0x1c	; 28
    b434:	85 3e       	cpi	r24, 0xE5	; 229
    b436:	19 f4       	brne	.+6      	; 0xb43e <follow_path+0x3de>
    b438:	e5 e0       	ldi	r30, 0x05	; 5
    b43a:	5c 96       	adiw	r26, 0x1c	; 28
    b43c:	ec 93       	st	X, r30
    b43e:	f8 e0       	ldi	r31, 0x08	; 8
    b440:	8f 16       	cp	r8, r31
    b442:	91 04       	cpc	r9, r1
    b444:	21 f4       	brne	.+8      	; 0xb44e <follow_path+0x3ee>
    b446:	2c 81       	ldd	r18, Y+4	; 0x04
    b448:	22 0f       	add	r18, r18
    b44a:	22 0f       	add	r18, r18
    b44c:	2c 83       	std	Y+4, r18	; 0x04
    b44e:	8c 81       	ldd	r24, Y+4	; 0x04
    b450:	8c 70       	andi	r24, 0x0C	; 12
    b452:	8c 30       	cpi	r24, 0x0C	; 12
    b454:	21 f0       	breq	.+8      	; 0xb45e <follow_path+0x3fe>
    b456:	8c 81       	ldd	r24, Y+4	; 0x04
    b458:	83 70       	andi	r24, 0x03	; 3
    b45a:	83 30       	cpi	r24, 0x03	; 3
    b45c:	19 f4       	brne	.+6      	; 0xb464 <follow_path+0x404>
    b45e:	3b 81       	ldd	r19, Y+3	; 0x03
    b460:	32 60       	ori	r19, 0x02	; 2
    b462:	3b 83       	std	Y+3, r19	; 0x03
    b464:	8b 81       	ldd	r24, Y+3	; 0x03
    b466:	81 fd       	sbrc	r24, 1
    b468:	0b c0       	rjmp	.+22     	; 0xb480 <follow_path+0x420>
    b46a:	9c 81       	ldd	r25, Y+4	; 0x04
    b46c:	90 ff       	sbrs	r25, 0
    b46e:	02 c0       	rjmp	.+4      	; 0xb474 <follow_path+0x414>
    b470:	80 61       	ori	r24, 0x10	; 16
    b472:	8b 83       	std	Y+3, r24	; 0x03
    b474:	ac 81       	ldd	r26, Y+4	; 0x04
    b476:	a2 ff       	sbrs	r26, 2
    b478:	03 c0       	rjmp	.+6      	; 0xb480 <follow_path+0x420>
    b47a:	bb 81       	ldd	r27, Y+3	; 0x03
    b47c:	b8 60       	ori	r27, 0x08	; 8
    b47e:	bb 83       	std	Y+3, r27	; 0x03
    b480:	2b 81       	ldd	r18, Y+3	; 0x03
    b482:	f7 01       	movw	r30, r14
    b484:	27 a3       	std	Z+39, r18	; 0x27
    b486:	9e ce       	rjmp	.-708    	; 0xb1c4 <follow_path+0x164>
    b488:	86 e0       	ldi	r24, 0x06	; 6
    b48a:	90 e0       	ldi	r25, 0x00	; 0
    b48c:	9d ce       	rjmp	.-710    	; 0xb1c8 <follow_path+0x168>
    b48e:	84 30       	cpi	r24, 0x04	; 4
    b490:	91 05       	cpc	r25, r1
    b492:	c1 f4       	brne	.+48     	; 0xb4c4 <follow_path+0x464>
    b494:	32 2f       	mov	r19, r18
    b496:	34 70       	andi	r19, 0x04	; 4
    b498:	25 ff       	sbrs	r18, 5
    b49a:	09 c0       	rjmp	.+18     	; 0xb4ae <follow_path+0x44e>
    b49c:	33 23       	and	r19, r19
    b49e:	09 f4       	brne	.+2      	; 0xb4a2 <follow_path+0x442>
    b4a0:	b6 ce       	rjmp	.-660    	; 0xb20e <follow_path+0x1ae>
    b4a2:	80 e8       	ldi	r24, 0x80	; 128
    b4a4:	97 96       	adiw	r26, 0x27	; 39
    b4a6:	8c 93       	st	X, r24
    b4a8:	80 e0       	ldi	r24, 0x00	; 0
    b4aa:	90 e0       	ldi	r25, 0x00	; 0
    b4ac:	0b c0       	rjmp	.+22     	; 0xb4c4 <follow_path+0x464>
    b4ae:	31 11       	cpse	r19, r1
    b4b0:	09 c0       	rjmp	.+18     	; 0xb4c4 <follow_path+0x464>
    b4b2:	85 e0       	ldi	r24, 0x05	; 5
    b4b4:	90 e0       	ldi	r25, 0x00	; 0
    b4b6:	06 c0       	rjmp	.+12     	; 0xb4c4 <follow_path+0x464>
    b4b8:	fb e0       	ldi	r31, 0x0B	; 11
    b4ba:	8f 16       	cp	r8, r31
    b4bc:	91 04       	cpc	r9, r1
    b4be:	09 f0       	breq	.+2      	; 0xb4c2 <follow_path+0x462>
    b4c0:	4b cf       	rjmp	.-362    	; 0xb358 <follow_path+0x2f8>
    b4c2:	39 cf       	rjmp	.-398    	; 0xb336 <follow_path+0x2d6>
    b4c4:	2a 96       	adiw	r28, 0x0a	; 10
    b4c6:	e2 e1       	ldi	r30, 0x12	; 18
    b4c8:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0000b4cc <f_mount>:
    b4cc:	a6 e0       	ldi	r26, 0x06	; 6
    b4ce:	b0 e0       	ldi	r27, 0x00	; 0
    b4d0:	ec e6       	ldi	r30, 0x6C	; 108
    b4d2:	fa e5       	ldi	r31, 0x5A	; 90
    b4d4:	0c 94 44 e5 	jmp	0x1ca88	; 0x1ca88 <__prologue_saves__+0x1e>
    b4d8:	9c 83       	std	Y+4, r25	; 0x04
    b4da:	8b 83       	std	Y+3, r24	; 0x03
    b4dc:	7e 83       	std	Y+6, r23	; 0x06
    b4de:	6d 83       	std	Y+5, r22	; 0x05
    b4e0:	14 2f       	mov	r17, r20
    b4e2:	7a 83       	std	Y+2, r23	; 0x02
    b4e4:	69 83       	std	Y+1, r22	; 0x01
    b4e6:	ce 01       	movw	r24, r28
    b4e8:	01 96       	adiw	r24, 0x01	; 1
    b4ea:	0e 94 82 48 	call	0x9104	; 0x9104 <get_ldnumber>
    b4ee:	97 fd       	sbrc	r25, 7
    b4f0:	20 c0       	rjmp	.+64     	; 0xb532 <f_mount+0x66>
    b4f2:	88 0f       	add	r24, r24
    b4f4:	99 1f       	adc	r25, r25
    b4f6:	fc 01       	movw	r30, r24
    b4f8:	ef 5e       	subi	r30, 0xEF	; 239
    b4fa:	f7 4e       	sbci	r31, 0xE7	; 231
    b4fc:	01 90       	ld	r0, Z+
    b4fe:	f0 81       	ld	r31, Z
    b500:	e0 2d       	mov	r30, r0
    b502:	30 97       	sbiw	r30, 0x00	; 0
    b504:	09 f0       	breq	.+2      	; 0xb508 <f_mount+0x3c>
    b506:	10 82       	st	Z, r1
    b508:	eb 81       	ldd	r30, Y+3	; 0x03
    b50a:	fc 81       	ldd	r31, Y+4	; 0x04
    b50c:	30 97       	sbiw	r30, 0x00	; 0
    b50e:	09 f0       	breq	.+2      	; 0xb512 <f_mount+0x46>
    b510:	10 82       	st	Z, r1
    b512:	dc 01       	movw	r26, r24
    b514:	af 5e       	subi	r26, 0xEF	; 239
    b516:	b7 4e       	sbci	r27, 0xE7	; 231
    b518:	ed 93       	st	X+, r30
    b51a:	fc 93       	st	X, r31
    b51c:	11 23       	and	r17, r17
    b51e:	61 f0       	breq	.+24     	; 0xb538 <f_mount+0x6c>
    b520:	40 e0       	ldi	r20, 0x00	; 0
    b522:	be 01       	movw	r22, r28
    b524:	6d 5f       	subi	r22, 0xFD	; 253
    b526:	7f 4f       	sbci	r23, 0xFF	; 255
    b528:	ce 01       	movw	r24, r28
    b52a:	05 96       	adiw	r24, 0x05	; 5
    b52c:	0e 94 b5 4c 	call	0x996a	; 0x996a <mount_volume>
    b530:	05 c0       	rjmp	.+10     	; 0xb53c <f_mount+0x70>
    b532:	8b e0       	ldi	r24, 0x0B	; 11
    b534:	90 e0       	ldi	r25, 0x00	; 0
    b536:	02 c0       	rjmp	.+4      	; 0xb53c <f_mount+0x70>
    b538:	80 e0       	ldi	r24, 0x00	; 0
    b53a:	90 e0       	ldi	r25, 0x00	; 0
    b53c:	26 96       	adiw	r28, 0x06	; 6
    b53e:	e3 e0       	ldi	r30, 0x03	; 3
    b540:	0c 94 60 e5 	jmp	0x1cac0	; 0x1cac0 <__epilogue_restores__+0x1e>

0000b544 <f_open>:
    b544:	a6 e3       	ldi	r26, 0x36	; 54
    b546:	b0 e0       	ldi	r27, 0x00	; 0
    b548:	e8 ea       	ldi	r30, 0xA8	; 168
    b54a:	fa e5       	ldi	r31, 0x5A	; 90
    b54c:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    b550:	7a ab       	std	Y+50, r23	; 0x32
    b552:	69 ab       	std	Y+49, r22	; 0x31
    b554:	00 97       	sbiw	r24, 0x00	; 0
    b556:	09 f4       	brne	.+2      	; 0xb55a <f_open+0x16>
    b558:	96 c1       	rjmp	.+812    	; 0xb886 <f_open+0x342>
    b55a:	74 2e       	mov	r7, r20
    b55c:	7c 01       	movw	r14, r24
    b55e:	24 2f       	mov	r18, r20
    b560:	2f 73       	andi	r18, 0x3F	; 63
    b562:	32 2e       	mov	r3, r18
    b564:	42 2f       	mov	r20, r18
    b566:	be 01       	movw	r22, r28
    b568:	61 5d       	subi	r22, 0xD1	; 209
    b56a:	7f 4f       	sbci	r23, 0xFF	; 255
    b56c:	ce 01       	movw	r24, r28
    b56e:	c1 96       	adiw	r24, 0x31	; 49
    b570:	0e 94 b5 4c 	call	0x996a	; 0x996a <mount_volume>
    b574:	00 97       	sbiw	r24, 0x00	; 0
    b576:	09 f0       	breq	.+2      	; 0xb57a <f_open+0x36>
    b578:	80 c1       	rjmp	.+768    	; 0xb87a <f_open+0x336>
    b57a:	8f a5       	ldd	r24, Y+47	; 0x2f
    b57c:	98 a9       	ldd	r25, Y+48	; 0x30
    b57e:	9a 83       	std	Y+2, r25	; 0x02
    b580:	89 83       	std	Y+1, r24	; 0x01
    b582:	80 e0       	ldi	r24, 0x00	; 0
    b584:	92 e0       	ldi	r25, 0x02	; 2
    b586:	0e 94 19 6a 	call	0xd432	; 0xd432 <ff_memalloc>
    b58a:	5c 01       	movw	r10, r24
    b58c:	00 97       	sbiw	r24, 0x00	; 0
    b58e:	09 f4       	brne	.+2      	; 0xb592 <f_open+0x4e>
    b590:	7c c1       	rjmp	.+760    	; 0xb88a <f_open+0x346>
    b592:	ef a5       	ldd	r30, Y+47	; 0x2f
    b594:	f8 a9       	ldd	r31, Y+48	; 0x30
    b596:	94 87       	std	Z+12, r25	; 0x0c
    b598:	83 87       	std	Z+11, r24	; 0x0b
    b59a:	69 a9       	ldd	r22, Y+49	; 0x31
    b59c:	7a a9       	ldd	r23, Y+50	; 0x32
    b59e:	ce 01       	movw	r24, r28
    b5a0:	01 96       	adiw	r24, 0x01	; 1
    b5a2:	5e dd       	rcall	.-1348   	; 0xb060 <follow_path>
    b5a4:	8c 01       	movw	r16, r24
    b5a6:	89 2b       	or	r24, r25
    b5a8:	29 f4       	brne	.+10     	; 0xb5b4 <f_open+0x70>
    b5aa:	88 a5       	ldd	r24, Y+40	; 0x28
    b5ac:	87 ff       	sbrs	r24, 7
    b5ae:	02 c0       	rjmp	.+4      	; 0xb5b4 <f_open+0x70>
    b5b0:	06 e0       	ldi	r16, 0x06	; 6
    b5b2:	10 e0       	ldi	r17, 0x00	; 0
    b5b4:	87 2d       	mov	r24, r7
    b5b6:	8c 71       	andi	r24, 0x1C	; 28
    b5b8:	09 f4       	brne	.+2      	; 0xb5bc <f_open+0x78>
    b5ba:	78 c0       	rjmp	.+240    	; 0xb6ac <f_open+0x168>
    b5bc:	01 15       	cp	r16, r1
    b5be:	11 05       	cpc	r17, r1
    b5c0:	79 f0       	breq	.+30     	; 0xb5e0 <f_open+0x9c>
    b5c2:	04 30       	cpi	r16, 0x04	; 4
    b5c4:	11 05       	cpc	r17, r1
    b5c6:	09 f0       	breq	.+2      	; 0xb5ca <f_open+0x86>
    b5c8:	70 c1       	rjmp	.+736    	; 0xb8aa <f_open+0x366>
    b5ca:	ce 01       	movw	r24, r28
    b5cc:	01 96       	adiw	r24, 0x01	; 1
    b5ce:	a4 db       	rcall	.-2232   	; 0xad18 <dir_register>
    b5d0:	8c 01       	movw	r16, r24
    b5d2:	89 2b       	or	r24, r25
    b5d4:	09 f0       	breq	.+2      	; 0xb5d8 <f_open+0x94>
    b5d6:	69 c1       	rjmp	.+722    	; 0xb8aa <f_open+0x366>
    b5d8:	33 2d       	mov	r19, r3
    b5da:	38 60       	ori	r19, 0x08	; 8
    b5dc:	33 2e       	mov	r3, r19
    b5de:	06 c0       	rjmp	.+12     	; 0xb5ec <f_open+0xa8>
    b5e0:	8d 81       	ldd	r24, Y+5	; 0x05
    b5e2:	81 71       	andi	r24, 0x11	; 17
    b5e4:	09 f0       	breq	.+2      	; 0xb5e8 <f_open+0xa4>
    b5e6:	5f c1       	rjmp	.+702    	; 0xb8a6 <f_open+0x362>
    b5e8:	72 fc       	sbrc	r7, 2
    b5ea:	54 c1       	rjmp	.+680    	; 0xb894 <f_open+0x350>
    b5ec:	33 fe       	sbrs	r3, 3
    b5ee:	6e c0       	rjmp	.+220    	; 0xb6cc <f_open+0x188>
    b5f0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    b5f2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    b5f4:	ef a5       	ldd	r30, Y+47	; 0x2f
    b5f6:	f8 a9       	ldd	r31, Y+48	; 0x30
    b5f8:	80 81       	ld	r24, Z
    b5fa:	0e 94 ab 4a 	call	0x9556	; 0x9556 <ld_clust.isra.4>
    b5fe:	2b 01       	movw	r4, r22
    b600:	3c 01       	movw	r6, r24
    b602:	0e 94 07 71 	call	0xe20e	; 0xe20e <get_fattime>
    b606:	ab 01       	movw	r20, r22
    b608:	bc 01       	movw	r22, r24
    b60a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b60c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b60e:	0e 96       	adiw	r24, 0x0e	; 14
    b610:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <st_dword>
    b614:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b616:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b618:	80 e2       	ldi	r24, 0x20	; 32
    b61a:	83 87       	std	Z+11, r24	; 0x0b
    b61c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b61e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b620:	af a5       	ldd	r26, Y+47	; 0x2f
    b622:	b8 a9       	ldd	r27, Y+48	; 0x30
    b624:	12 8e       	std	Z+26, r1	; 0x1a
    b626:	13 8e       	std	Z+27, r1	; 0x1b
    b628:	8c 91       	ld	r24, X
    b62a:	83 30       	cpi	r24, 0x03	; 3
    b62c:	11 f4       	brne	.+4      	; 0xb632 <f_open+0xee>
    b62e:	14 8a       	std	Z+20, r1	; 0x14
    b630:	15 8a       	std	Z+21, r1	; 0x15
    b632:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b634:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b636:	14 8e       	std	Z+28, r1	; 0x1c
    b638:	15 8e       	std	Z+29, r1	; 0x1d
    b63a:	16 8e       	std	Z+30, r1	; 0x1e
    b63c:	17 8e       	std	Z+31, r1	; 0x1f
    b63e:	81 e0       	ldi	r24, 0x01	; 1
    b640:	13 96       	adiw	r26, 0x03	; 3
    b642:	8c 93       	st	X, r24
    b644:	13 97       	sbiw	r26, 0x03	; 3
    b646:	41 14       	cp	r4, r1
    b648:	51 04       	cpc	r5, r1
    b64a:	61 04       	cpc	r6, r1
    b64c:	71 04       	cpc	r7, r1
    b64e:	d9 f1       	breq	.+118    	; 0xb6c6 <f_open+0x182>
    b650:	d1 96       	adiw	r26, 0x31	; 49
    b652:	2d 91       	ld	r18, X+
    b654:	3d 91       	ld	r19, X+
    b656:	4d 91       	ld	r20, X+
    b658:	5c 91       	ld	r21, X
    b65a:	d4 97       	sbiw	r26, 0x34	; 52
    b65c:	2b ab       	std	Y+51, r18	; 0x33
    b65e:	3c ab       	std	Y+52, r19	; 0x34
    b660:	4d ab       	std	Y+53, r20	; 0x35
    b662:	5e ab       	std	Y+54, r21	; 0x36
    b664:	00 e0       	ldi	r16, 0x00	; 0
    b666:	10 e0       	ldi	r17, 0x00	; 0
    b668:	98 01       	movw	r18, r16
    b66a:	b3 01       	movw	r22, r6
    b66c:	a2 01       	movw	r20, r4
    b66e:	ce 01       	movw	r24, r28
    b670:	01 96       	adiw	r24, 0x01	; 1
    b672:	0e 94 b1 52 	call	0xa562	; 0xa562 <remove_chain>
    b676:	8c 01       	movw	r16, r24
    b678:	89 2b       	or	r24, r25
    b67a:	09 f0       	breq	.+2      	; 0xb67e <f_open+0x13a>
    b67c:	16 c1       	rjmp	.+556    	; 0xb8aa <f_open+0x366>
    b67e:	4b a9       	ldd	r20, Y+51	; 0x33
    b680:	5c a9       	ldd	r21, Y+52	; 0x34
    b682:	6d a9       	ldd	r22, Y+53	; 0x35
    b684:	7e a9       	ldd	r23, Y+54	; 0x36
    b686:	8f a5       	ldd	r24, Y+47	; 0x2f
    b688:	98 a9       	ldd	r25, Y+48	; 0x30
    b68a:	0e 94 3a 4c 	call	0x9874	; 0x9874 <move_window>
    b68e:	8c 01       	movw	r16, r24
    b690:	ef a5       	ldd	r30, Y+47	; 0x2f
    b692:	f8 a9       	ldd	r31, Y+48	; 0x30
    b694:	31 e0       	ldi	r19, 0x01	; 1
    b696:	43 1a       	sub	r4, r19
    b698:	51 08       	sbc	r5, r1
    b69a:	61 08       	sbc	r6, r1
    b69c:	71 08       	sbc	r7, r1
    b69e:	45 86       	std	Z+13, r4	; 0x0d
    b6a0:	56 86       	std	Z+14, r5	; 0x0e
    b6a2:	67 86       	std	Z+15, r6	; 0x0f
    b6a4:	70 8a       	std	Z+16, r7	; 0x10
    b6a6:	89 2b       	or	r24, r25
    b6a8:	61 f0       	breq	.+24     	; 0xb6c2 <f_open+0x17e>
    b6aa:	ff c0       	rjmp	.+510    	; 0xb8aa <f_open+0x366>
    b6ac:	01 15       	cp	r16, r1
    b6ae:	11 05       	cpc	r17, r1
    b6b0:	09 f0       	breq	.+2      	; 0xb6b4 <f_open+0x170>
    b6b2:	fb c0       	rjmp	.+502    	; 0xb8aa <f_open+0x366>
    b6b4:	8d 81       	ldd	r24, Y+5	; 0x05
    b6b6:	84 fd       	sbrc	r24, 4
    b6b8:	f3 c0       	rjmp	.+486    	; 0xb8a0 <f_open+0x35c>
    b6ba:	71 fe       	sbrs	r7, 1
    b6bc:	02 c0       	rjmp	.+4      	; 0xb6c2 <f_open+0x17e>
    b6be:	80 fd       	sbrc	r24, 0
    b6c0:	f2 c0       	rjmp	.+484    	; 0xb8a6 <f_open+0x362>
    b6c2:	33 fe       	sbrs	r3, 3
    b6c4:	03 c0       	rjmp	.+6      	; 0xb6cc <f_open+0x188>
    b6c6:	43 2d       	mov	r20, r3
    b6c8:	40 64       	ori	r20, 0x40	; 64
    b6ca:	34 2e       	mov	r3, r20
    b6cc:	0f a5       	ldd	r16, Y+47	; 0x2f
    b6ce:	18 a9       	ldd	r17, Y+48	; 0x30
    b6d0:	f8 01       	movw	r30, r16
    b6d2:	81 a9       	ldd	r24, Z+49	; 0x31
    b6d4:	92 a9       	ldd	r25, Z+50	; 0x32
    b6d6:	a3 a9       	ldd	r26, Z+51	; 0x33
    b6d8:	b4 a9       	ldd	r27, Z+52	; 0x34
    b6da:	f7 01       	movw	r30, r14
    b6dc:	84 8f       	std	Z+28, r24	; 0x1c
    b6de:	95 8f       	std	Z+29, r25	; 0x1d
    b6e0:	a6 8f       	std	Z+30, r26	; 0x1e
    b6e2:	b7 8f       	std	Z+31, r27	; 0x1f
    b6e4:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b6e6:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b6e8:	71 a2       	std	Z+33, r7	; 0x21
    b6ea:	60 a2       	std	Z+32, r6	; 0x20
    b6ec:	b3 01       	movw	r22, r6
    b6ee:	f8 01       	movw	r30, r16
    b6f0:	80 81       	ld	r24, Z
    b6f2:	0e 94 ab 4a 	call	0x9556	; 0x9556 <ld_clust.isra.4>
    b6f6:	f7 01       	movw	r30, r14
    b6f8:	66 83       	std	Z+6, r22	; 0x06
    b6fa:	77 83       	std	Z+7, r23	; 0x07
    b6fc:	80 87       	std	Z+8, r24	; 0x08
    b6fe:	91 87       	std	Z+9, r25	; 0x09
    b700:	c3 01       	movw	r24, r6
    b702:	4c 96       	adiw	r24, 0x1c	; 28
    b704:	0e 94 56 47 	call	0x8eac	; 0x8eac <ld_dword>
    b708:	f7 01       	movw	r30, r14
    b70a:	62 87       	std	Z+10, r22	; 0x0a
    b70c:	73 87       	std	Z+11, r23	; 0x0b
    b70e:	84 87       	std	Z+12, r24	; 0x0c
    b710:	95 87       	std	Z+13, r25	; 0x0d
    b712:	13 a2       	std	Z+35, r1	; 0x23
    b714:	12 a2       	std	Z+34, r1	; 0x22
    b716:	11 83       	std	Z+1, r17	; 0x01
    b718:	00 83       	st	Z, r16
    b71a:	f8 01       	movw	r30, r16
    b71c:	85 81       	ldd	r24, Z+5	; 0x05
    b71e:	96 81       	ldd	r25, Z+6	; 0x06
    b720:	f7 01       	movw	r30, r14
    b722:	93 83       	std	Z+3, r25	; 0x03
    b724:	82 83       	std	Z+2, r24	; 0x02
    b726:	36 86       	std	Z+14, r3	; 0x0e
    b728:	17 86       	std	Z+15, r1	; 0x0f
    b72a:	10 8e       	std	Z+24, r1	; 0x18
    b72c:	11 8e       	std	Z+25, r1	; 0x19
    b72e:	12 8e       	std	Z+26, r1	; 0x1a
    b730:	13 8e       	std	Z+27, r1	; 0x1b
    b732:	10 8a       	std	Z+16, r1	; 0x10
    b734:	11 8a       	std	Z+17, r1	; 0x11
    b736:	12 8a       	std	Z+18, r1	; 0x12
    b738:	13 8a       	std	Z+19, r1	; 0x13
    b73a:	67 01       	movw	r12, r14
    b73c:	f4 e2       	ldi	r31, 0x24	; 36
    b73e:	cf 0e       	add	r12, r31
    b740:	d1 1c       	adc	r13, r1
    b742:	40 e0       	ldi	r20, 0x00	; 0
    b744:	52 e0       	ldi	r21, 0x02	; 2
    b746:	60 e0       	ldi	r22, 0x00	; 0
    b748:	70 e0       	ldi	r23, 0x00	; 0
    b74a:	c6 01       	movw	r24, r12
    b74c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <mem_set>
    b750:	35 fc       	sbrc	r3, 5
    b752:	03 c0       	rjmp	.+6      	; 0xb75a <f_open+0x216>
    b754:	00 e0       	ldi	r16, 0x00	; 0
    b756:	10 e0       	ldi	r17, 0x00	; 0
    b758:	89 c0       	rjmp	.+274    	; 0xb86c <f_open+0x328>
    b75a:	f7 01       	movw	r30, r14
    b75c:	62 84       	ldd	r6, Z+10	; 0x0a
    b75e:	73 84       	ldd	r7, Z+11	; 0x0b
    b760:	84 84       	ldd	r8, Z+12	; 0x0c
    b762:	95 84       	ldd	r9, Z+13	; 0x0d
    b764:	61 14       	cp	r6, r1
    b766:	71 04       	cpc	r7, r1
    b768:	81 04       	cpc	r8, r1
    b76a:	91 04       	cpc	r9, r1
    b76c:	99 f3       	breq	.-26     	; 0xb754 <f_open+0x210>
    b76e:	60 8a       	std	Z+16, r6	; 0x10
    b770:	71 8a       	std	Z+17, r7	; 0x11
    b772:	82 8a       	std	Z+18, r8	; 0x12
    b774:	93 8a       	std	Z+19, r9	; 0x13
    b776:	ef a5       	ldd	r30, Y+47	; 0x2f
    b778:	f8 a9       	ldd	r31, Y+48	; 0x30
    b77a:	21 84       	ldd	r2, Z+9	; 0x09
    b77c:	32 84       	ldd	r3, Z+10	; 0x0a
    b77e:	c1 01       	movw	r24, r2
    b780:	a0 e0       	ldi	r26, 0x00	; 0
    b782:	b0 e0       	ldi	r27, 0x00	; 0
    b784:	1c 01       	movw	r2, r24
    b786:	2d 01       	movw	r4, r26
    b788:	59 e0       	ldi	r21, 0x09	; 9
    b78a:	22 0c       	add	r2, r2
    b78c:	33 1c       	adc	r3, r3
    b78e:	44 1c       	adc	r4, r4
    b790:	55 1c       	adc	r5, r5
    b792:	5a 95       	dec	r21
    b794:	d1 f7       	brne	.-12     	; 0xb78a <f_open+0x246>
    b796:	f7 01       	movw	r30, r14
    b798:	46 81       	ldd	r20, Z+6	; 0x06
    b79a:	57 81       	ldd	r21, Z+7	; 0x07
    b79c:	60 85       	ldd	r22, Z+8	; 0x08
    b79e:	71 85       	ldd	r23, Z+9	; 0x09
    b7a0:	26 14       	cp	r2, r6
    b7a2:	37 04       	cpc	r3, r7
    b7a4:	48 04       	cpc	r4, r8
    b7a6:	59 04       	cpc	r5, r9
    b7a8:	f0 f4       	brcc	.+60     	; 0xb7e6 <f_open+0x2a2>
    b7aa:	f7 01       	movw	r30, r14
    b7ac:	80 81       	ld	r24, Z
    b7ae:	91 81       	ldd	r25, Z+1	; 0x01
    b7b0:	0e 94 16 50 	call	0xa02c	; 0xa02c <get_fat.isra.10>
    b7b4:	ab 01       	movw	r20, r22
    b7b6:	bc 01       	movw	r22, r24
    b7b8:	d4 01       	movw	r26, r8
    b7ba:	c3 01       	movw	r24, r6
    b7bc:	82 19       	sub	r24, r2
    b7be:	93 09       	sbc	r25, r3
    b7c0:	a4 09       	sbc	r26, r4
    b7c2:	b5 09       	sbc	r27, r5
    b7c4:	3c 01       	movw	r6, r24
    b7c6:	4d 01       	movw	r8, r26
    b7c8:	42 30       	cpi	r20, 0x02	; 2
    b7ca:	51 05       	cpc	r21, r1
    b7cc:	61 05       	cpc	r22, r1
    b7ce:	71 05       	cpc	r23, r1
    b7d0:	08 f4       	brcc	.+2      	; 0xb7d4 <f_open+0x290>
    b7d2:	63 c0       	rjmp	.+198    	; 0xb89a <f_open+0x356>
    b7d4:	4f 3f       	cpi	r20, 0xFF	; 255
    b7d6:	ff ef       	ldi	r31, 0xFF	; 255
    b7d8:	5f 07       	cpc	r21, r31
    b7da:	6f 07       	cpc	r22, r31
    b7dc:	7f 07       	cpc	r23, r31
    b7de:	01 f7       	brne	.-64     	; 0xb7a0 <f_open+0x25c>
    b7e0:	01 e0       	ldi	r16, 0x01	; 1
    b7e2:	10 e0       	ldi	r17, 0x00	; 0
    b7e4:	02 c0       	rjmp	.+4      	; 0xb7ea <f_open+0x2a6>
    b7e6:	00 e0       	ldi	r16, 0x00	; 0
    b7e8:	10 e0       	ldi	r17, 0x00	; 0
    b7ea:	f7 01       	movw	r30, r14
    b7ec:	44 8b       	std	Z+20, r20	; 0x14
    b7ee:	55 8b       	std	Z+21, r21	; 0x15
    b7f0:	66 8b       	std	Z+22, r22	; 0x16
    b7f2:	77 8b       	std	Z+23, r23	; 0x17
    b7f4:	01 15       	cp	r16, r1
    b7f6:	11 05       	cpc	r17, r1
    b7f8:	c9 f5       	brne	.+114    	; 0xb86c <f_open+0x328>
    b7fa:	d4 01       	movw	r26, r8
    b7fc:	c3 01       	movw	r24, r6
    b7fe:	91 70       	andi	r25, 0x01	; 1
    b800:	aa 27       	eor	r26, r26
    b802:	bb 27       	eor	r27, r27
    b804:	89 2b       	or	r24, r25
    b806:	8a 2b       	or	r24, r26
    b808:	8b 2b       	or	r24, r27
    b80a:	09 f4       	brne	.+2      	; 0xb80e <f_open+0x2ca>
    b80c:	a3 cf       	rjmp	.-186    	; 0xb754 <f_open+0x210>
    b80e:	4f a4       	ldd	r4, Y+47	; 0x2f
    b810:	58 a8       	ldd	r5, Y+48	; 0x30
    b812:	c2 01       	movw	r24, r4
    b814:	0e 94 0f 48 	call	0x901e	; 0x901e <clst2sect>
    b818:	61 15       	cp	r22, r1
    b81a:	71 05       	cpc	r23, r1
    b81c:	81 05       	cpc	r24, r1
    b81e:	91 05       	cpc	r25, r1
    b820:	19 f1       	breq	.+70     	; 0xb868 <f_open+0x324>
    b822:	94 01       	movw	r18, r8
    b824:	83 01       	movw	r16, r6
    b826:	49 e0       	ldi	r20, 0x09	; 9
    b828:	36 95       	lsr	r19
    b82a:	27 95       	ror	r18
    b82c:	17 95       	ror	r17
    b82e:	07 95       	ror	r16
    b830:	4a 95       	dec	r20
    b832:	d1 f7       	brne	.-12     	; 0xb828 <f_open+0x2e4>
    b834:	a9 01       	movw	r20, r18
    b836:	98 01       	movw	r18, r16
    b838:	26 0f       	add	r18, r22
    b83a:	37 1f       	adc	r19, r23
    b83c:	48 1f       	adc	r20, r24
    b83e:	59 1f       	adc	r21, r25
    b840:	f7 01       	movw	r30, r14
    b842:	20 8f       	std	Z+24, r18	; 0x18
    b844:	31 8f       	std	Z+25, r19	; 0x19
    b846:	42 8f       	std	Z+26, r20	; 0x1a
    b848:	53 8f       	std	Z+27, r21	; 0x1b
    b84a:	01 e0       	ldi	r16, 0x01	; 1
    b84c:	10 e0       	ldi	r17, 0x00	; 0
    b84e:	b6 01       	movw	r22, r12
    b850:	f2 01       	movw	r30, r4
    b852:	81 81       	ldd	r24, Z+1	; 0x01
    b854:	0e 94 d5 6a 	call	0xd5aa	; 0xd5aa <disk_read>
    b858:	31 e0       	ldi	r19, 0x01	; 1
    b85a:	20 e0       	ldi	r18, 0x00	; 0
    b85c:	89 2b       	or	r24, r25
    b85e:	09 f4       	brne	.+2      	; 0xb862 <f_open+0x31e>
    b860:	30 e0       	ldi	r19, 0x00	; 0
    b862:	03 2f       	mov	r16, r19
    b864:	12 2f       	mov	r17, r18
    b866:	02 c0       	rjmp	.+4      	; 0xb86c <f_open+0x328>
    b868:	02 e0       	ldi	r16, 0x02	; 2
    b86a:	10 e0       	ldi	r17, 0x00	; 0
    b86c:	c5 01       	movw	r24, r10
    b86e:	0e 94 1c 6a 	call	0xd438	; 0xd438 <ff_memfree>
    b872:	01 15       	cp	r16, r1
    b874:	11 05       	cpc	r17, r1
    b876:	59 f0       	breq	.+22     	; 0xb88e <f_open+0x34a>
    b878:	01 c0       	rjmp	.+2      	; 0xb87c <f_open+0x338>
    b87a:	8c 01       	movw	r16, r24
    b87c:	f7 01       	movw	r30, r14
    b87e:	11 82       	std	Z+1, r1	; 0x01
    b880:	10 82       	st	Z, r1
    b882:	c8 01       	movw	r24, r16
    b884:	16 c0       	rjmp	.+44     	; 0xb8b2 <f_open+0x36e>
    b886:	89 e0       	ldi	r24, 0x09	; 9
    b888:	03 c0       	rjmp	.+6      	; 0xb890 <f_open+0x34c>
    b88a:	81 e1       	ldi	r24, 0x11	; 17
    b88c:	01 c0       	rjmp	.+2      	; 0xb890 <f_open+0x34c>
    b88e:	80 e0       	ldi	r24, 0x00	; 0
    b890:	90 e0       	ldi	r25, 0x00	; 0
    b892:	0f c0       	rjmp	.+30     	; 0xb8b2 <f_open+0x36e>
    b894:	08 e0       	ldi	r16, 0x08	; 8
    b896:	10 e0       	ldi	r17, 0x00	; 0
    b898:	08 c0       	rjmp	.+16     	; 0xb8aa <f_open+0x366>
    b89a:	02 e0       	ldi	r16, 0x02	; 2
    b89c:	10 e0       	ldi	r17, 0x00	; 0
    b89e:	a5 cf       	rjmp	.-182    	; 0xb7ea <f_open+0x2a6>
    b8a0:	04 e0       	ldi	r16, 0x04	; 4
    b8a2:	10 e0       	ldi	r17, 0x00	; 0
    b8a4:	02 c0       	rjmp	.+4      	; 0xb8aa <f_open+0x366>
    b8a6:	07 e0       	ldi	r16, 0x07	; 7
    b8a8:	10 e0       	ldi	r17, 0x00	; 0
    b8aa:	c5 01       	movw	r24, r10
    b8ac:	0e 94 1c 6a 	call	0xd438	; 0xd438 <ff_memfree>
    b8b0:	e5 cf       	rjmp	.-54     	; 0xb87c <f_open+0x338>
    b8b2:	e6 96       	adiw	r28, 0x36	; 54
    b8b4:	e2 e1       	ldi	r30, 0x12	; 18
    b8b6:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0000b8ba <f_read>:
    b8ba:	a6 e0       	ldi	r26, 0x06	; 6
    b8bc:	b0 e0       	ldi	r27, 0x00	; 0
    b8be:	e3 e6       	ldi	r30, 0x63	; 99
    b8c0:	fc e5       	ldi	r31, 0x5C	; 92
    b8c2:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    b8c6:	7c 01       	movw	r14, r24
    b8c8:	4b 01       	movw	r8, r22
    b8ca:	5a 01       	movw	r10, r20
    b8cc:	3e 83       	std	Y+6, r19	; 0x06
    b8ce:	2d 83       	std	Y+5, r18	; 0x05
    b8d0:	f9 01       	movw	r30, r18
    b8d2:	11 82       	std	Z+1, r1	; 0x01
    b8d4:	10 82       	st	Z, r1
    b8d6:	be 01       	movw	r22, r28
    b8d8:	6f 5f       	subi	r22, 0xFF	; 255
    b8da:	7f 4f       	sbci	r23, 0xFF	; 255
    b8dc:	0e 94 ae 48 	call	0x915c	; 0x915c <validate>
    b8e0:	00 97       	sbiw	r24, 0x00	; 0
    b8e2:	09 f0       	breq	.+2      	; 0xb8e6 <f_read+0x2c>
    b8e4:	31 c1       	rjmp	.+610    	; 0xbb48 <f_read+0x28e>
    b8e6:	f7 01       	movw	r30, r14
    b8e8:	87 85       	ldd	r24, Z+15	; 0x0f
    b8ea:	90 e0       	ldi	r25, 0x00	; 0
    b8ec:	00 97       	sbiw	r24, 0x00	; 0
    b8ee:	09 f0       	breq	.+2      	; 0xb8f2 <f_read+0x38>
    b8f0:	2b c1       	rjmp	.+598    	; 0xbb48 <f_read+0x28e>
    b8f2:	86 85       	ldd	r24, Z+14	; 0x0e
    b8f4:	80 ff       	sbrs	r24, 0
    b8f6:	26 c1       	rjmp	.+588    	; 0xbb44 <f_read+0x28a>
    b8f8:	82 85       	ldd	r24, Z+10	; 0x0a
    b8fa:	93 85       	ldd	r25, Z+11	; 0x0b
    b8fc:	a4 85       	ldd	r26, Z+12	; 0x0c
    b8fe:	b5 85       	ldd	r27, Z+13	; 0x0d
    b900:	40 89       	ldd	r20, Z+16	; 0x10
    b902:	51 89       	ldd	r21, Z+17	; 0x11
    b904:	62 89       	ldd	r22, Z+18	; 0x12
    b906:	73 89       	ldd	r23, Z+19	; 0x13
    b908:	84 1b       	sub	r24, r20
    b90a:	95 0b       	sbc	r25, r21
    b90c:	a6 0b       	sbc	r26, r22
    b90e:	b7 0b       	sbc	r27, r23
    b910:	a5 01       	movw	r20, r10
    b912:	60 e0       	ldi	r22, 0x00	; 0
    b914:	70 e0       	ldi	r23, 0x00	; 0
    b916:	84 17       	cp	r24, r20
    b918:	95 07       	cpc	r25, r21
    b91a:	a6 07       	cpc	r26, r22
    b91c:	b7 07       	cpc	r27, r23
    b91e:	08 f4       	brcc	.+2      	; 0xb922 <f_read+0x68>
    b920:	5c 01       	movw	r10, r24
    b922:	17 01       	movw	r2, r14
    b924:	f4 e2       	ldi	r31, 0x24	; 36
    b926:	2f 0e       	add	r2, r31
    b928:	31 1c       	adc	r3, r1
    b92a:	a1 14       	cp	r10, r1
    b92c:	b1 04       	cpc	r11, r1
    b92e:	09 f4       	brne	.+2      	; 0xb932 <f_read+0x78>
    b930:	07 c1       	rjmp	.+526    	; 0xbb40 <f_read+0x286>
    b932:	f7 01       	movw	r30, r14
    b934:	40 89       	ldd	r20, Z+16	; 0x10
    b936:	51 89       	ldd	r21, Z+17	; 0x11
    b938:	62 89       	ldd	r22, Z+18	; 0x12
    b93a:	73 89       	ldd	r23, Z+19	; 0x13
    b93c:	db 01       	movw	r26, r22
    b93e:	ca 01       	movw	r24, r20
    b940:	91 70       	andi	r25, 0x01	; 1
    b942:	aa 27       	eor	r26, r26
    b944:	bb 27       	eor	r27, r27
    b946:	89 2b       	or	r24, r25
    b948:	8a 2b       	or	r24, r26
    b94a:	8b 2b       	or	r24, r27
    b94c:	09 f0       	breq	.+2      	; 0xb950 <f_read+0x96>
    b94e:	cb c0       	rjmp	.+406    	; 0xbae6 <f_read+0x22c>
    b950:	e9 81       	ldd	r30, Y+1	; 0x01
    b952:	fa 81       	ldd	r31, Y+2	; 0x02
    b954:	01 85       	ldd	r16, Z+9	; 0x09
    b956:	12 85       	ldd	r17, Z+10	; 0x0a
    b958:	01 50       	subi	r16, 0x01	; 1
    b95a:	11 09       	sbc	r17, r1
    b95c:	db 01       	movw	r26, r22
    b95e:	ca 01       	movw	r24, r20
    b960:	e9 e0       	ldi	r30, 0x09	; 9
    b962:	b6 95       	lsr	r27
    b964:	a7 95       	ror	r26
    b966:	97 95       	ror	r25
    b968:	87 95       	ror	r24
    b96a:	ea 95       	dec	r30
    b96c:	d1 f7       	brne	.-12     	; 0xb962 <f_read+0xa8>
    b96e:	08 23       	and	r16, r24
    b970:	19 23       	and	r17, r25
    b972:	01 15       	cp	r16, r1
    b974:	11 05       	cpc	r17, r1
    b976:	91 f5       	brne	.+100    	; 0xb9dc <f_read+0x122>
    b978:	f7 01       	movw	r30, r14
    b97a:	41 15       	cp	r20, r1
    b97c:	51 05       	cpc	r21, r1
    b97e:	61 05       	cpc	r22, r1
    b980:	71 05       	cpc	r23, r1
    b982:	29 f4       	brne	.+10     	; 0xb98e <f_read+0xd4>
    b984:	66 81       	ldd	r22, Z+6	; 0x06
    b986:	77 81       	ldd	r23, Z+7	; 0x07
    b988:	80 85       	ldd	r24, Z+8	; 0x08
    b98a:	91 85       	ldd	r25, Z+9	; 0x09
    b98c:	11 c0       	rjmp	.+34     	; 0xb9b0 <f_read+0xf6>
    b98e:	82 a1       	ldd	r24, Z+34	; 0x22
    b990:	93 a1       	ldd	r25, Z+35	; 0x23
    b992:	89 2b       	or	r24, r25
    b994:	21 f0       	breq	.+8      	; 0xb99e <f_read+0xe4>
    b996:	c7 01       	movw	r24, r14
    b998:	0e 94 37 48 	call	0x906e	; 0x906e <clmt_clust>
    b99c:	09 c0       	rjmp	.+18     	; 0xb9b0 <f_read+0xf6>
    b99e:	f7 01       	movw	r30, r14
    b9a0:	44 89       	ldd	r20, Z+20	; 0x14
    b9a2:	55 89       	ldd	r21, Z+21	; 0x15
    b9a4:	66 89       	ldd	r22, Z+22	; 0x16
    b9a6:	77 89       	ldd	r23, Z+23	; 0x17
    b9a8:	80 81       	ld	r24, Z
    b9aa:	91 81       	ldd	r25, Z+1	; 0x01
    b9ac:	0e 94 16 50 	call	0xa02c	; 0xa02c <get_fat.isra.10>
    b9b0:	62 30       	cpi	r22, 0x02	; 2
    b9b2:	71 05       	cpc	r23, r1
    b9b4:	81 05       	cpc	r24, r1
    b9b6:	91 05       	cpc	r25, r1
    b9b8:	10 f4       	brcc	.+4      	; 0xb9be <f_read+0x104>
    b9ba:	82 e0       	ldi	r24, 0x02	; 2
    b9bc:	07 c0       	rjmp	.+14     	; 0xb9cc <f_read+0x112>
    b9be:	6f 3f       	cpi	r22, 0xFF	; 255
    b9c0:	ff ef       	ldi	r31, 0xFF	; 255
    b9c2:	7f 07       	cpc	r23, r31
    b9c4:	8f 07       	cpc	r24, r31
    b9c6:	9f 07       	cpc	r25, r31
    b9c8:	21 f4       	brne	.+8      	; 0xb9d2 <f_read+0x118>
    b9ca:	81 e0       	ldi	r24, 0x01	; 1
    b9cc:	f7 01       	movw	r30, r14
    b9ce:	87 87       	std	Z+15, r24	; 0x0f
    b9d0:	ba c0       	rjmp	.+372    	; 0xbb46 <f_read+0x28c>
    b9d2:	f7 01       	movw	r30, r14
    b9d4:	64 8b       	std	Z+20, r22	; 0x14
    b9d6:	75 8b       	std	Z+21, r23	; 0x15
    b9d8:	86 8b       	std	Z+22, r24	; 0x16
    b9da:	97 8b       	std	Z+23, r25	; 0x17
    b9dc:	89 81       	ldd	r24, Y+1	; 0x01
    b9de:	9a 81       	ldd	r25, Y+2	; 0x02
    b9e0:	9c 83       	std	Y+4, r25	; 0x04
    b9e2:	8b 83       	std	Y+3, r24	; 0x03
    b9e4:	f7 01       	movw	r30, r14
    b9e6:	44 89       	ldd	r20, Z+20	; 0x14
    b9e8:	55 89       	ldd	r21, Z+21	; 0x15
    b9ea:	66 89       	ldd	r22, Z+22	; 0x16
    b9ec:	77 89       	ldd	r23, Z+23	; 0x17
    b9ee:	0e 94 0f 48 	call	0x901e	; 0x901e <clst2sect>
    b9f2:	61 15       	cp	r22, r1
    b9f4:	71 05       	cpc	r23, r1
    b9f6:	81 05       	cpc	r24, r1
    b9f8:	91 05       	cpc	r25, r1
    b9fa:	f9 f2       	breq	.-66     	; 0xb9ba <f_read+0x100>
    b9fc:	2b 01       	movw	r4, r22
    b9fe:	3c 01       	movw	r6, r24
    ba00:	40 0e       	add	r4, r16
    ba02:	51 1e       	adc	r5, r17
    ba04:	61 1c       	adc	r6, r1
    ba06:	71 1c       	adc	r7, r1
    ba08:	65 01       	movw	r12, r10
    ba0a:	cd 2c       	mov	r12, r13
    ba0c:	dd 24       	eor	r13, r13
    ba0e:	c6 94       	lsr	r12
    ba10:	c1 14       	cp	r12, r1
    ba12:	d1 04       	cpc	r13, r1
    ba14:	d1 f1       	breq	.+116    	; 0xba8a <f_read+0x1d0>
    ba16:	eb 81       	ldd	r30, Y+3	; 0x03
    ba18:	fc 81       	ldd	r31, Y+4	; 0x04
    ba1a:	81 85       	ldd	r24, Z+9	; 0x09
    ba1c:	92 85       	ldd	r25, Z+10	; 0x0a
    ba1e:	98 01       	movw	r18, r16
    ba20:	2c 0d       	add	r18, r12
    ba22:	3d 1d       	adc	r19, r13
    ba24:	82 17       	cp	r24, r18
    ba26:	93 07       	cpc	r25, r19
    ba28:	18 f4       	brcc	.+6      	; 0xba30 <f_read+0x176>
    ba2a:	6c 01       	movw	r12, r24
    ba2c:	c0 1a       	sub	r12, r16
    ba2e:	d1 0a       	sbc	r13, r17
    ba30:	86 01       	movw	r16, r12
    ba32:	a3 01       	movw	r20, r6
    ba34:	92 01       	movw	r18, r4
    ba36:	b4 01       	movw	r22, r8
    ba38:	eb 81       	ldd	r30, Y+3	; 0x03
    ba3a:	fc 81       	ldd	r31, Y+4	; 0x04
    ba3c:	81 81       	ldd	r24, Z+1	; 0x01
    ba3e:	0e 94 d5 6a 	call	0xd5aa	; 0xd5aa <disk_read>
    ba42:	89 2b       	or	r24, r25
    ba44:	11 f6       	brne	.-124    	; 0xb9ca <f_read+0x110>
    ba46:	f7 01       	movw	r30, r14
    ba48:	86 85       	ldd	r24, Z+14	; 0x0e
    ba4a:	87 ff       	sbrs	r24, 7
    ba4c:	1a c0       	rjmp	.+52     	; 0xba82 <f_read+0x1c8>
    ba4e:	80 8d       	ldd	r24, Z+24	; 0x18
    ba50:	91 8d       	ldd	r25, Z+25	; 0x19
    ba52:	a2 8d       	ldd	r26, Z+26	; 0x1a
    ba54:	b3 8d       	ldd	r27, Z+27	; 0x1b
    ba56:	84 19       	sub	r24, r4
    ba58:	95 09       	sbc	r25, r5
    ba5a:	a6 09       	sbc	r26, r6
    ba5c:	b7 09       	sbc	r27, r7
    ba5e:	a6 01       	movw	r20, r12
    ba60:	60 e0       	ldi	r22, 0x00	; 0
    ba62:	70 e0       	ldi	r23, 0x00	; 0
    ba64:	84 17       	cp	r24, r20
    ba66:	95 07       	cpc	r25, r21
    ba68:	a6 07       	cpc	r26, r22
    ba6a:	b7 07       	cpc	r27, r23
    ba6c:	50 f4       	brcc	.+20     	; 0xba82 <f_read+0x1c8>
    ba6e:	98 2f       	mov	r25, r24
    ba70:	88 27       	eor	r24, r24
    ba72:	99 0f       	add	r25, r25
    ba74:	40 e0       	ldi	r20, 0x00	; 0
    ba76:	52 e0       	ldi	r21, 0x02	; 2
    ba78:	b1 01       	movw	r22, r2
    ba7a:	88 0d       	add	r24, r8
    ba7c:	99 1d       	adc	r25, r9
    ba7e:	0e 94 da 48 	call	0x91b4	; 0x91b4 <mem_cpy.part.0>
    ba82:	dc 2c       	mov	r13, r12
    ba84:	cc 24       	eor	r12, r12
    ba86:	dd 0c       	add	r13, r13
    ba88:	41 c0       	rjmp	.+130    	; 0xbb0c <f_read+0x252>
    ba8a:	f7 01       	movw	r30, r14
    ba8c:	20 8d       	ldd	r18, Z+24	; 0x18
    ba8e:	31 8d       	ldd	r19, Z+25	; 0x19
    ba90:	42 8d       	ldd	r20, Z+26	; 0x1a
    ba92:	53 8d       	ldd	r21, Z+27	; 0x1b
    ba94:	42 16       	cp	r4, r18
    ba96:	53 06       	cpc	r5, r19
    ba98:	64 06       	cpc	r6, r20
    ba9a:	75 06       	cpc	r7, r21
    ba9c:	f9 f0       	breq	.+62     	; 0xbadc <f_read+0x222>
    ba9e:	86 85       	ldd	r24, Z+14	; 0x0e
    baa0:	87 ff       	sbrs	r24, 7
    baa2:	0f c0       	rjmp	.+30     	; 0xbac2 <f_read+0x208>
    baa4:	01 e0       	ldi	r16, 0x01	; 1
    baa6:	10 e0       	ldi	r17, 0x00	; 0
    baa8:	b1 01       	movw	r22, r2
    baaa:	eb 81       	ldd	r30, Y+3	; 0x03
    baac:	fc 81       	ldd	r31, Y+4	; 0x04
    baae:	81 81       	ldd	r24, Z+1	; 0x01
    bab0:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <disk_write>
    bab4:	89 2b       	or	r24, r25
    bab6:	09 f0       	breq	.+2      	; 0xbaba <f_read+0x200>
    bab8:	88 cf       	rjmp	.-240    	; 0xb9ca <f_read+0x110>
    baba:	f7 01       	movw	r30, r14
    babc:	86 85       	ldd	r24, Z+14	; 0x0e
    babe:	8f 77       	andi	r24, 0x7F	; 127
    bac0:	86 87       	std	Z+14, r24	; 0x0e
    bac2:	e9 81       	ldd	r30, Y+1	; 0x01
    bac4:	fa 81       	ldd	r31, Y+2	; 0x02
    bac6:	01 e0       	ldi	r16, 0x01	; 1
    bac8:	10 e0       	ldi	r17, 0x00	; 0
    baca:	a3 01       	movw	r20, r6
    bacc:	92 01       	movw	r18, r4
    bace:	b1 01       	movw	r22, r2
    bad0:	81 81       	ldd	r24, Z+1	; 0x01
    bad2:	0e 94 d5 6a 	call	0xd5aa	; 0xd5aa <disk_read>
    bad6:	89 2b       	or	r24, r25
    bad8:	09 f0       	breq	.+2      	; 0xbadc <f_read+0x222>
    bada:	77 cf       	rjmp	.-274    	; 0xb9ca <f_read+0x110>
    badc:	f7 01       	movw	r30, r14
    bade:	40 8e       	std	Z+24, r4	; 0x18
    bae0:	51 8e       	std	Z+25, r5	; 0x19
    bae2:	62 8e       	std	Z+26, r6	; 0x1a
    bae4:	73 8e       	std	Z+27, r7	; 0x1b
    bae6:	f7 01       	movw	r30, r14
    bae8:	60 89       	ldd	r22, Z+16	; 0x10
    baea:	71 89       	ldd	r23, Z+17	; 0x11
    baec:	71 70       	andi	r23, 0x01	; 1
    baee:	80 e0       	ldi	r24, 0x00	; 0
    baf0:	92 e0       	ldi	r25, 0x02	; 2
    baf2:	86 1b       	sub	r24, r22
    baf4:	97 0b       	sbc	r25, r23
    baf6:	65 01       	movw	r12, r10
    baf8:	8a 15       	cp	r24, r10
    bafa:	9b 05       	cpc	r25, r11
    bafc:	08 f4       	brcc	.+2      	; 0xbb00 <f_read+0x246>
    bafe:	6c 01       	movw	r12, r24
    bb00:	62 0d       	add	r22, r2
    bb02:	73 1d       	adc	r23, r3
    bb04:	a6 01       	movw	r20, r12
    bb06:	c4 01       	movw	r24, r8
    bb08:	0e 94 da 48 	call	0x91b4	; 0x91b4 <mem_cpy.part.0>
    bb0c:	ac 18       	sub	r10, r12
    bb0e:	bd 08       	sbc	r11, r13
    bb10:	ed 81       	ldd	r30, Y+5	; 0x05
    bb12:	fe 81       	ldd	r31, Y+6	; 0x06
    bb14:	80 81       	ld	r24, Z
    bb16:	91 81       	ldd	r25, Z+1	; 0x01
    bb18:	8c 0d       	add	r24, r12
    bb1a:	9d 1d       	adc	r25, r13
    bb1c:	91 83       	std	Z+1, r25	; 0x01
    bb1e:	80 83       	st	Z, r24
    bb20:	8c 0c       	add	r8, r12
    bb22:	9d 1c       	adc	r9, r13
    bb24:	f7 01       	movw	r30, r14
    bb26:	80 89       	ldd	r24, Z+16	; 0x10
    bb28:	91 89       	ldd	r25, Z+17	; 0x11
    bb2a:	a2 89       	ldd	r26, Z+18	; 0x12
    bb2c:	b3 89       	ldd	r27, Z+19	; 0x13
    bb2e:	8c 0d       	add	r24, r12
    bb30:	9d 1d       	adc	r25, r13
    bb32:	a1 1d       	adc	r26, r1
    bb34:	b1 1d       	adc	r27, r1
    bb36:	80 8b       	std	Z+16, r24	; 0x10
    bb38:	91 8b       	std	Z+17, r25	; 0x11
    bb3a:	a2 8b       	std	Z+18, r26	; 0x12
    bb3c:	b3 8b       	std	Z+19, r27	; 0x13
    bb3e:	f5 ce       	rjmp	.-534    	; 0xb92a <f_read+0x70>
    bb40:	80 e0       	ldi	r24, 0x00	; 0
    bb42:	01 c0       	rjmp	.+2      	; 0xbb46 <f_read+0x28c>
    bb44:	87 e0       	ldi	r24, 0x07	; 7
    bb46:	90 e0       	ldi	r25, 0x00	; 0
    bb48:	26 96       	adiw	r28, 0x06	; 6
    bb4a:	e2 e1       	ldi	r30, 0x12	; 18
    bb4c:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0000bb50 <f_write>:
    bb50:	a8 e0       	ldi	r26, 0x08	; 8
    bb52:	b0 e0       	ldi	r27, 0x00	; 0
    bb54:	ee ea       	ldi	r30, 0xAE	; 174
    bb56:	fd e5       	ldi	r31, 0x5D	; 93
    bb58:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    bb5c:	7c 01       	movw	r14, r24
    bb5e:	3b 01       	movw	r6, r22
    bb60:	5a 01       	movw	r10, r20
    bb62:	38 87       	std	Y+8, r19	; 0x08
    bb64:	2f 83       	std	Y+7, r18	; 0x07
    bb66:	f9 01       	movw	r30, r18
    bb68:	11 82       	std	Z+1, r1	; 0x01
    bb6a:	10 82       	st	Z, r1
    bb6c:	be 01       	movw	r22, r28
    bb6e:	6f 5f       	subi	r22, 0xFF	; 255
    bb70:	7f 4f       	sbci	r23, 0xFF	; 255
    bb72:	0e 94 ae 48 	call	0x915c	; 0x915c <validate>
    bb76:	00 97       	sbiw	r24, 0x00	; 0
    bb78:	09 f0       	breq	.+2      	; 0xbb7c <f_write+0x2c>
    bb7a:	7d c1       	rjmp	.+762    	; 0xbe76 <f_write+0x326>
    bb7c:	f7 01       	movw	r30, r14
    bb7e:	87 85       	ldd	r24, Z+15	; 0x0f
    bb80:	90 e0       	ldi	r25, 0x00	; 0
    bb82:	00 97       	sbiw	r24, 0x00	; 0
    bb84:	09 f0       	breq	.+2      	; 0xbb88 <f_write+0x38>
    bb86:	77 c1       	rjmp	.+750    	; 0xbe76 <f_write+0x326>
    bb88:	86 85       	ldd	r24, Z+14	; 0x0e
    bb8a:	81 ff       	sbrs	r24, 1
    bb8c:	72 c1       	rjmp	.+740    	; 0xbe72 <f_write+0x322>
    bb8e:	80 89       	ldd	r24, Z+16	; 0x10
    bb90:	91 89       	ldd	r25, Z+17	; 0x11
    bb92:	a2 89       	ldd	r26, Z+18	; 0x12
    bb94:	b3 89       	ldd	r27, Z+19	; 0x13
    bb96:	ac 01       	movw	r20, r24
    bb98:	bd 01       	movw	r22, r26
    bb9a:	4a 0d       	add	r20, r10
    bb9c:	5b 1d       	adc	r21, r11
    bb9e:	61 1d       	adc	r22, r1
    bba0:	71 1d       	adc	r23, r1
    bba2:	48 17       	cp	r20, r24
    bba4:	59 07       	cpc	r21, r25
    bba6:	6a 07       	cpc	r22, r26
    bba8:	7b 07       	cpc	r23, r27
    bbaa:	18 f4       	brcc	.+6      	; 0xbbb2 <f_write+0x62>
    bbac:	5c 01       	movw	r10, r24
    bbae:	a0 94       	com	r10
    bbb0:	b0 94       	com	r11
    bbb2:	97 01       	movw	r18, r14
    bbb4:	2c 5d       	subi	r18, 0xDC	; 220
    bbb6:	3f 4f       	sbci	r19, 0xFF	; 255
    bbb8:	3e 83       	std	Y+6, r19	; 0x06
    bbba:	2d 83       	std	Y+5, r18	; 0x05
    bbbc:	a1 14       	cp	r10, r1
    bbbe:	b1 04       	cpc	r11, r1
    bbc0:	09 f4       	brne	.+2      	; 0xbbc4 <f_write+0x74>
    bbc2:	4d c0       	rjmp	.+154    	; 0xbc5e <f_write+0x10e>
    bbc4:	f7 01       	movw	r30, r14
    bbc6:	40 89       	ldd	r20, Z+16	; 0x10
    bbc8:	51 89       	ldd	r21, Z+17	; 0x11
    bbca:	62 89       	ldd	r22, Z+18	; 0x12
    bbcc:	73 89       	ldd	r23, Z+19	; 0x13
    bbce:	db 01       	movw	r26, r22
    bbd0:	ca 01       	movw	r24, r20
    bbd2:	91 70       	andi	r25, 0x01	; 1
    bbd4:	aa 27       	eor	r26, r26
    bbd6:	bb 27       	eor	r27, r27
    bbd8:	89 2b       	or	r24, r25
    bbda:	8a 2b       	or	r24, r26
    bbdc:	8b 2b       	or	r24, r27
    bbde:	09 f0       	breq	.+2      	; 0xbbe2 <f_write+0x92>
    bbe0:	05 c1       	rjmp	.+522    	; 0xbdec <f_write+0x29c>
    bbe2:	e9 81       	ldd	r30, Y+1	; 0x01
    bbe4:	fa 81       	ldd	r31, Y+2	; 0x02
    bbe6:	81 84       	ldd	r8, Z+9	; 0x09
    bbe8:	92 84       	ldd	r9, Z+10	; 0x0a
    bbea:	f1 e0       	ldi	r31, 0x01	; 1
    bbec:	8f 1a       	sub	r8, r31
    bbee:	91 08       	sbc	r9, r1
    bbf0:	db 01       	movw	r26, r22
    bbf2:	ca 01       	movw	r24, r20
    bbf4:	e9 e0       	ldi	r30, 0x09	; 9
    bbf6:	b6 95       	lsr	r27
    bbf8:	a7 95       	ror	r26
    bbfa:	97 95       	ror	r25
    bbfc:	87 95       	ror	r24
    bbfe:	ea 95       	dec	r30
    bc00:	d1 f7       	brne	.-12     	; 0xbbf6 <f_write+0xa6>
    bc02:	88 22       	and	r8, r24
    bc04:	99 22       	and	r9, r25
    bc06:	81 14       	cp	r8, r1
    bc08:	91 04       	cpc	r9, r1
    bc0a:	09 f0       	breq	.+2      	; 0xbc0e <f_write+0xbe>
    bc0c:	51 c0       	rjmp	.+162    	; 0xbcb0 <f_write+0x160>
    bc0e:	f7 01       	movw	r30, r14
    bc10:	41 15       	cp	r20, r1
    bc12:	51 05       	cpc	r21, r1
    bc14:	61 05       	cpc	r22, r1
    bc16:	71 05       	cpc	r23, r1
    bc18:	69 f4       	brne	.+26     	; 0xbc34 <f_write+0xe4>
    bc1a:	66 81       	ldd	r22, Z+6	; 0x06
    bc1c:	77 81       	ldd	r23, Z+7	; 0x07
    bc1e:	80 85       	ldd	r24, Z+8	; 0x08
    bc20:	91 85       	ldd	r25, Z+9	; 0x09
    bc22:	61 15       	cp	r22, r1
    bc24:	71 05       	cpc	r23, r1
    bc26:	81 05       	cpc	r24, r1
    bc28:	91 05       	cpc	r25, r1
    bc2a:	f9 f4       	brne	.+62     	; 0xbc6a <f_write+0x11a>
    bc2c:	40 e0       	ldi	r20, 0x00	; 0
    bc2e:	50 e0       	ldi	r21, 0x00	; 0
    bc30:	ba 01       	movw	r22, r20
    bc32:	0d c0       	rjmp	.+26     	; 0xbc4e <f_write+0xfe>
    bc34:	82 a1       	ldd	r24, Z+34	; 0x22
    bc36:	93 a1       	ldd	r25, Z+35	; 0x23
    bc38:	89 2b       	or	r24, r25
    bc3a:	21 f0       	breq	.+8      	; 0xbc44 <f_write+0xf4>
    bc3c:	c7 01       	movw	r24, r14
    bc3e:	0e 94 37 48 	call	0x906e	; 0x906e <clmt_clust>
    bc42:	08 c0       	rjmp	.+16     	; 0xbc54 <f_write+0x104>
    bc44:	f7 01       	movw	r30, r14
    bc46:	44 89       	ldd	r20, Z+20	; 0x14
    bc48:	55 89       	ldd	r21, Z+21	; 0x15
    bc4a:	66 89       	ldd	r22, Z+22	; 0x16
    bc4c:	77 89       	ldd	r23, Z+23	; 0x17
    bc4e:	c7 01       	movw	r24, r14
    bc50:	0e 94 8b 51 	call	0xa316	; 0xa316 <create_chain>
    bc54:	61 15       	cp	r22, r1
    bc56:	71 05       	cpc	r23, r1
    bc58:	81 05       	cpc	r24, r1
    bc5a:	91 05       	cpc	r25, r1
    bc5c:	31 f4       	brne	.+12     	; 0xbc6a <f_write+0x11a>
    bc5e:	f7 01       	movw	r30, r14
    bc60:	86 85       	ldd	r24, Z+14	; 0x0e
    bc62:	80 64       	ori	r24, 0x40	; 64
    bc64:	86 87       	std	Z+14, r24	; 0x0e
    bc66:	80 e0       	ldi	r24, 0x00	; 0
    bc68:	05 c1       	rjmp	.+522    	; 0xbe74 <f_write+0x324>
    bc6a:	61 30       	cpi	r22, 0x01	; 1
    bc6c:	71 05       	cpc	r23, r1
    bc6e:	81 05       	cpc	r24, r1
    bc70:	91 05       	cpc	r25, r1
    bc72:	11 f4       	brne	.+4      	; 0xbc78 <f_write+0x128>
    bc74:	82 e0       	ldi	r24, 0x02	; 2
    bc76:	07 c0       	rjmp	.+14     	; 0xbc86 <f_write+0x136>
    bc78:	6f 3f       	cpi	r22, 0xFF	; 255
    bc7a:	ff ef       	ldi	r31, 0xFF	; 255
    bc7c:	7f 07       	cpc	r23, r31
    bc7e:	8f 07       	cpc	r24, r31
    bc80:	9f 07       	cpc	r25, r31
    bc82:	21 f4       	brne	.+8      	; 0xbc8c <f_write+0x13c>
    bc84:	81 e0       	ldi	r24, 0x01	; 1
    bc86:	f7 01       	movw	r30, r14
    bc88:	87 87       	std	Z+15, r24	; 0x0f
    bc8a:	f4 c0       	rjmp	.+488    	; 0xbe74 <f_write+0x324>
    bc8c:	f7 01       	movw	r30, r14
    bc8e:	64 8b       	std	Z+20, r22	; 0x14
    bc90:	75 8b       	std	Z+21, r23	; 0x15
    bc92:	86 8b       	std	Z+22, r24	; 0x16
    bc94:	97 8b       	std	Z+23, r25	; 0x17
    bc96:	06 81       	ldd	r16, Z+6	; 0x06
    bc98:	17 81       	ldd	r17, Z+7	; 0x07
    bc9a:	20 85       	ldd	r18, Z+8	; 0x08
    bc9c:	31 85       	ldd	r19, Z+9	; 0x09
    bc9e:	01 15       	cp	r16, r1
    bca0:	11 05       	cpc	r17, r1
    bca2:	21 05       	cpc	r18, r1
    bca4:	31 05       	cpc	r19, r1
    bca6:	21 f4       	brne	.+8      	; 0xbcb0 <f_write+0x160>
    bca8:	66 83       	std	Z+6, r22	; 0x06
    bcaa:	77 83       	std	Z+7, r23	; 0x07
    bcac:	80 87       	std	Z+8, r24	; 0x08
    bcae:	91 87       	std	Z+9, r25	; 0x09
    bcb0:	f7 01       	movw	r30, r14
    bcb2:	86 85       	ldd	r24, Z+14	; 0x0e
    bcb4:	87 ff       	sbrs	r24, 7
    bcb6:	13 c0       	rjmp	.+38     	; 0xbcde <f_write+0x18e>
    bcb8:	20 8d       	ldd	r18, Z+24	; 0x18
    bcba:	31 8d       	ldd	r19, Z+25	; 0x19
    bcbc:	42 8d       	ldd	r20, Z+26	; 0x1a
    bcbe:	53 8d       	ldd	r21, Z+27	; 0x1b
    bcc0:	e9 81       	ldd	r30, Y+1	; 0x01
    bcc2:	fa 81       	ldd	r31, Y+2	; 0x02
    bcc4:	01 e0       	ldi	r16, 0x01	; 1
    bcc6:	10 e0       	ldi	r17, 0x00	; 0
    bcc8:	6d 81       	ldd	r22, Y+5	; 0x05
    bcca:	7e 81       	ldd	r23, Y+6	; 0x06
    bccc:	81 81       	ldd	r24, Z+1	; 0x01
    bcce:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <disk_write>
    bcd2:	89 2b       	or	r24, r25
    bcd4:	b9 f6       	brne	.-82     	; 0xbc84 <f_write+0x134>
    bcd6:	f7 01       	movw	r30, r14
    bcd8:	86 85       	ldd	r24, Z+14	; 0x0e
    bcda:	8f 77       	andi	r24, 0x7F	; 127
    bcdc:	86 87       	std	Z+14, r24	; 0x0e
    bcde:	29 81       	ldd	r18, Y+1	; 0x01
    bce0:	3a 81       	ldd	r19, Y+2	; 0x02
    bce2:	3c 83       	std	Y+4, r19	; 0x04
    bce4:	2b 83       	std	Y+3, r18	; 0x03
    bce6:	f7 01       	movw	r30, r14
    bce8:	44 89       	ldd	r20, Z+20	; 0x14
    bcea:	55 89       	ldd	r21, Z+21	; 0x15
    bcec:	66 89       	ldd	r22, Z+22	; 0x16
    bcee:	77 89       	ldd	r23, Z+23	; 0x17
    bcf0:	c9 01       	movw	r24, r18
    bcf2:	0e 94 0f 48 	call	0x901e	; 0x901e <clst2sect>
    bcf6:	61 15       	cp	r22, r1
    bcf8:	71 05       	cpc	r23, r1
    bcfa:	81 05       	cpc	r24, r1
    bcfc:	91 05       	cpc	r25, r1
    bcfe:	09 f4       	brne	.+2      	; 0xbd02 <f_write+0x1b2>
    bd00:	b9 cf       	rjmp	.-142    	; 0xbc74 <f_write+0x124>
    bd02:	1b 01       	movw	r2, r22
    bd04:	2c 01       	movw	r4, r24
    bd06:	28 0c       	add	r2, r8
    bd08:	39 1c       	adc	r3, r9
    bd0a:	41 1c       	adc	r4, r1
    bd0c:	51 1c       	adc	r5, r1
    bd0e:	65 01       	movw	r12, r10
    bd10:	cd 2c       	mov	r12, r13
    bd12:	dd 24       	eor	r13, r13
    bd14:	c6 94       	lsr	r12
    bd16:	c1 14       	cp	r12, r1
    bd18:	d1 04       	cpc	r13, r1
    bd1a:	f1 f1       	breq	.+124    	; 0xbd98 <f_write+0x248>
    bd1c:	eb 81       	ldd	r30, Y+3	; 0x03
    bd1e:	fc 81       	ldd	r31, Y+4	; 0x04
    bd20:	81 85       	ldd	r24, Z+9	; 0x09
    bd22:	92 85       	ldd	r25, Z+10	; 0x0a
    bd24:	94 01       	movw	r18, r8
    bd26:	2c 0d       	add	r18, r12
    bd28:	3d 1d       	adc	r19, r13
    bd2a:	82 17       	cp	r24, r18
    bd2c:	93 07       	cpc	r25, r19
    bd2e:	18 f4       	brcc	.+6      	; 0xbd36 <f_write+0x1e6>
    bd30:	6c 01       	movw	r12, r24
    bd32:	c8 18       	sub	r12, r8
    bd34:	d9 08       	sbc	r13, r9
    bd36:	86 01       	movw	r16, r12
    bd38:	a2 01       	movw	r20, r4
    bd3a:	91 01       	movw	r18, r2
    bd3c:	b3 01       	movw	r22, r6
    bd3e:	eb 81       	ldd	r30, Y+3	; 0x03
    bd40:	fc 81       	ldd	r31, Y+4	; 0x04
    bd42:	81 81       	ldd	r24, Z+1	; 0x01
    bd44:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <disk_write>
    bd48:	89 2b       	or	r24, r25
    bd4a:	09 f0       	breq	.+2      	; 0xbd4e <f_write+0x1fe>
    bd4c:	9b cf       	rjmp	.-202    	; 0xbc84 <f_write+0x134>
    bd4e:	f7 01       	movw	r30, r14
    bd50:	80 8d       	ldd	r24, Z+24	; 0x18
    bd52:	91 8d       	ldd	r25, Z+25	; 0x19
    bd54:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bd56:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bd58:	82 19       	sub	r24, r2
    bd5a:	93 09       	sbc	r25, r3
    bd5c:	a4 09       	sbc	r26, r4
    bd5e:	b5 09       	sbc	r27, r5
    bd60:	a6 01       	movw	r20, r12
    bd62:	60 e0       	ldi	r22, 0x00	; 0
    bd64:	70 e0       	ldi	r23, 0x00	; 0
    bd66:	84 17       	cp	r24, r20
    bd68:	95 07       	cpc	r25, r21
    bd6a:	a6 07       	cpc	r26, r22
    bd6c:	b7 07       	cpc	r27, r23
    bd6e:	80 f4       	brcc	.+32     	; 0xbd90 <f_write+0x240>
    bd70:	98 2f       	mov	r25, r24
    bd72:	88 27       	eor	r24, r24
    bd74:	99 0f       	add	r25, r25
    bd76:	b3 01       	movw	r22, r6
    bd78:	68 0f       	add	r22, r24
    bd7a:	79 1f       	adc	r23, r25
    bd7c:	40 e0       	ldi	r20, 0x00	; 0
    bd7e:	52 e0       	ldi	r21, 0x02	; 2
    bd80:	8d 81       	ldd	r24, Y+5	; 0x05
    bd82:	9e 81       	ldd	r25, Y+6	; 0x06
    bd84:	0e 94 da 48 	call	0x91b4	; 0x91b4 <mem_cpy.part.0>
    bd88:	f7 01       	movw	r30, r14
    bd8a:	86 85       	ldd	r24, Z+14	; 0x0e
    bd8c:	8f 77       	andi	r24, 0x7F	; 127
    bd8e:	86 87       	std	Z+14, r24	; 0x0e
    bd90:	dc 2c       	mov	r13, r12
    bd92:	cc 24       	eor	r12, r12
    bd94:	dd 0c       	add	r13, r13
    bd96:	43 c0       	rjmp	.+134    	; 0xbe1e <f_write+0x2ce>
    bd98:	f7 01       	movw	r30, r14
    bd9a:	80 8d       	ldd	r24, Z+24	; 0x18
    bd9c:	91 8d       	ldd	r25, Z+25	; 0x19
    bd9e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bda0:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bda2:	28 16       	cp	r2, r24
    bda4:	39 06       	cpc	r3, r25
    bda6:	4a 06       	cpc	r4, r26
    bda8:	5b 06       	cpc	r5, r27
    bdaa:	d9 f0       	breq	.+54     	; 0xbde2 <f_write+0x292>
    bdac:	40 89       	ldd	r20, Z+16	; 0x10
    bdae:	51 89       	ldd	r21, Z+17	; 0x11
    bdb0:	62 89       	ldd	r22, Z+18	; 0x12
    bdb2:	73 89       	ldd	r23, Z+19	; 0x13
    bdb4:	82 85       	ldd	r24, Z+10	; 0x0a
    bdb6:	93 85       	ldd	r25, Z+11	; 0x0b
    bdb8:	a4 85       	ldd	r26, Z+12	; 0x0c
    bdba:	b5 85       	ldd	r27, Z+13	; 0x0d
    bdbc:	48 17       	cp	r20, r24
    bdbe:	59 07       	cpc	r21, r25
    bdc0:	6a 07       	cpc	r22, r26
    bdc2:	7b 07       	cpc	r23, r27
    bdc4:	70 f4       	brcc	.+28     	; 0xbde2 <f_write+0x292>
    bdc6:	01 e0       	ldi	r16, 0x01	; 1
    bdc8:	10 e0       	ldi	r17, 0x00	; 0
    bdca:	a2 01       	movw	r20, r4
    bdcc:	91 01       	movw	r18, r2
    bdce:	6d 81       	ldd	r22, Y+5	; 0x05
    bdd0:	7e 81       	ldd	r23, Y+6	; 0x06
    bdd2:	eb 81       	ldd	r30, Y+3	; 0x03
    bdd4:	fc 81       	ldd	r31, Y+4	; 0x04
    bdd6:	81 81       	ldd	r24, Z+1	; 0x01
    bdd8:	0e 94 d5 6a 	call	0xd5aa	; 0xd5aa <disk_read>
    bddc:	89 2b       	or	r24, r25
    bdde:	09 f0       	breq	.+2      	; 0xbde2 <f_write+0x292>
    bde0:	51 cf       	rjmp	.-350    	; 0xbc84 <f_write+0x134>
    bde2:	f7 01       	movw	r30, r14
    bde4:	20 8e       	std	Z+24, r2	; 0x18
    bde6:	31 8e       	std	Z+25, r3	; 0x19
    bde8:	42 8e       	std	Z+26, r4	; 0x1a
    bdea:	53 8e       	std	Z+27, r5	; 0x1b
    bdec:	f7 01       	movw	r30, r14
    bdee:	80 89       	ldd	r24, Z+16	; 0x10
    bdf0:	91 89       	ldd	r25, Z+17	; 0x11
    bdf2:	91 70       	andi	r25, 0x01	; 1
    bdf4:	20 e0       	ldi	r18, 0x00	; 0
    bdf6:	32 e0       	ldi	r19, 0x02	; 2
    bdf8:	28 1b       	sub	r18, r24
    bdfa:	39 0b       	sbc	r19, r25
    bdfc:	65 01       	movw	r12, r10
    bdfe:	2a 15       	cp	r18, r10
    be00:	3b 05       	cpc	r19, r11
    be02:	08 f4       	brcc	.+2      	; 0xbe06 <f_write+0x2b6>
    be04:	69 01       	movw	r12, r18
    be06:	a6 01       	movw	r20, r12
    be08:	b3 01       	movw	r22, r6
    be0a:	2d 81       	ldd	r18, Y+5	; 0x05
    be0c:	3e 81       	ldd	r19, Y+6	; 0x06
    be0e:	82 0f       	add	r24, r18
    be10:	93 1f       	adc	r25, r19
    be12:	0e 94 da 48 	call	0x91b4	; 0x91b4 <mem_cpy.part.0>
    be16:	f7 01       	movw	r30, r14
    be18:	86 85       	ldd	r24, Z+14	; 0x0e
    be1a:	80 68       	ori	r24, 0x80	; 128
    be1c:	86 87       	std	Z+14, r24	; 0x0e
    be1e:	ac 18       	sub	r10, r12
    be20:	bd 08       	sbc	r11, r13
    be22:	ef 81       	ldd	r30, Y+7	; 0x07
    be24:	f8 85       	ldd	r31, Y+8	; 0x08
    be26:	80 81       	ld	r24, Z
    be28:	91 81       	ldd	r25, Z+1	; 0x01
    be2a:	8c 0d       	add	r24, r12
    be2c:	9d 1d       	adc	r25, r13
    be2e:	91 83       	std	Z+1, r25	; 0x01
    be30:	80 83       	st	Z, r24
    be32:	6c 0c       	add	r6, r12
    be34:	7d 1c       	adc	r7, r13
    be36:	f7 01       	movw	r30, r14
    be38:	80 89       	ldd	r24, Z+16	; 0x10
    be3a:	91 89       	ldd	r25, Z+17	; 0x11
    be3c:	a2 89       	ldd	r26, Z+18	; 0x12
    be3e:	b3 89       	ldd	r27, Z+19	; 0x13
    be40:	8c 0d       	add	r24, r12
    be42:	9d 1d       	adc	r25, r13
    be44:	a1 1d       	adc	r26, r1
    be46:	b1 1d       	adc	r27, r1
    be48:	80 8b       	std	Z+16, r24	; 0x10
    be4a:	91 8b       	std	Z+17, r25	; 0x11
    be4c:	a2 8b       	std	Z+18, r26	; 0x12
    be4e:	b3 8b       	std	Z+19, r27	; 0x13
    be50:	42 85       	ldd	r20, Z+10	; 0x0a
    be52:	53 85       	ldd	r21, Z+11	; 0x0b
    be54:	64 85       	ldd	r22, Z+12	; 0x0c
    be56:	75 85       	ldd	r23, Z+13	; 0x0d
    be58:	48 17       	cp	r20, r24
    be5a:	59 07       	cpc	r21, r25
    be5c:	6a 07       	cpc	r22, r26
    be5e:	7b 07       	cpc	r23, r27
    be60:	10 f4       	brcc	.+4      	; 0xbe66 <f_write+0x316>
    be62:	ac 01       	movw	r20, r24
    be64:	bd 01       	movw	r22, r26
    be66:	f7 01       	movw	r30, r14
    be68:	42 87       	std	Z+10, r20	; 0x0a
    be6a:	53 87       	std	Z+11, r21	; 0x0b
    be6c:	64 87       	std	Z+12, r22	; 0x0c
    be6e:	75 87       	std	Z+13, r23	; 0x0d
    be70:	a5 ce       	rjmp	.-694    	; 0xbbbc <f_write+0x6c>
    be72:	87 e0       	ldi	r24, 0x07	; 7
    be74:	90 e0       	ldi	r25, 0x00	; 0
    be76:	28 96       	adiw	r28, 0x08	; 8
    be78:	e2 e1       	ldi	r30, 0x12	; 18
    be7a:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0000be7e <f_sync>:
    be7e:	8f 92       	push	r8
    be80:	9f 92       	push	r9
    be82:	af 92       	push	r10
    be84:	bf 92       	push	r11
    be86:	ef 92       	push	r14
    be88:	ff 92       	push	r15
    be8a:	0f 93       	push	r16
    be8c:	1f 93       	push	r17
    be8e:	cf 93       	push	r28
    be90:	df 93       	push	r29
    be92:	00 d0       	rcall	.+0      	; 0xbe94 <f_sync+0x16>
    be94:	cd b7       	in	r28, 0x3d	; 61
    be96:	de b7       	in	r29, 0x3e	; 62
    be98:	7c 01       	movw	r14, r24
    be9a:	be 01       	movw	r22, r28
    be9c:	6f 5f       	subi	r22, 0xFF	; 255
    be9e:	7f 4f       	sbci	r23, 0xFF	; 255
    bea0:	0e 94 ae 48 	call	0x915c	; 0x915c <validate>
    bea4:	00 97       	sbiw	r24, 0x00	; 0
    bea6:	09 f0       	breq	.+2      	; 0xbeaa <f_sync+0x2c>
    bea8:	5d c0       	rjmp	.+186    	; 0xbf64 <f_sync+0xe6>
    beaa:	f7 01       	movw	r30, r14
    beac:	86 85       	ldd	r24, Z+14	; 0x0e
    beae:	86 ff       	sbrs	r24, 6
    beb0:	55 c0       	rjmp	.+170    	; 0xbf5c <f_sync+0xde>
    beb2:	87 ff       	sbrs	r24, 7
    beb4:	15 c0       	rjmp	.+42     	; 0xbee0 <f_sync+0x62>
    beb6:	20 8d       	ldd	r18, Z+24	; 0x18
    beb8:	31 8d       	ldd	r19, Z+25	; 0x19
    beba:	42 8d       	ldd	r20, Z+26	; 0x1a
    bebc:	53 8d       	ldd	r21, Z+27	; 0x1b
    bebe:	e9 81       	ldd	r30, Y+1	; 0x01
    bec0:	fa 81       	ldd	r31, Y+2	; 0x02
    bec2:	01 e0       	ldi	r16, 0x01	; 1
    bec4:	10 e0       	ldi	r17, 0x00	; 0
    bec6:	b7 01       	movw	r22, r14
    bec8:	6c 5d       	subi	r22, 0xDC	; 220
    beca:	7f 4f       	sbci	r23, 0xFF	; 255
    becc:	81 81       	ldd	r24, Z+1	; 0x01
    bece:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <disk_write>
    bed2:	89 2b       	or	r24, r25
    bed4:	09 f0       	breq	.+2      	; 0xbed8 <f_sync+0x5a>
    bed6:	44 c0       	rjmp	.+136    	; 0xbf60 <f_sync+0xe2>
    bed8:	f7 01       	movw	r30, r14
    beda:	86 85       	ldd	r24, Z+14	; 0x0e
    bedc:	8f 77       	andi	r24, 0x7F	; 127
    bede:	86 87       	std	Z+14, r24	; 0x0e
    bee0:	0e 94 07 71 	call	0xe20e	; 0xe20e <get_fattime>
    bee4:	4b 01       	movw	r8, r22
    bee6:	5c 01       	movw	r10, r24
    bee8:	f7 01       	movw	r30, r14
    beea:	44 8d       	ldd	r20, Z+28	; 0x1c
    beec:	55 8d       	ldd	r21, Z+29	; 0x1d
    beee:	66 8d       	ldd	r22, Z+30	; 0x1e
    bef0:	77 8d       	ldd	r23, Z+31	; 0x1f
    bef2:	89 81       	ldd	r24, Y+1	; 0x01
    bef4:	9a 81       	ldd	r25, Y+2	; 0x02
    bef6:	0e 94 3a 4c 	call	0x9874	; 0x9874 <move_window>
    befa:	00 97       	sbiw	r24, 0x00	; 0
    befc:	99 f5       	brne	.+102    	; 0xbf64 <f_sync+0xe6>
    befe:	f7 01       	movw	r30, r14
    bf00:	00 a1       	ldd	r16, Z+32	; 0x20
    bf02:	11 a1       	ldd	r17, Z+33	; 0x21
    bf04:	f8 01       	movw	r30, r16
    bf06:	83 85       	ldd	r24, Z+11	; 0x0b
    bf08:	80 62       	ori	r24, 0x20	; 32
    bf0a:	83 87       	std	Z+11, r24	; 0x0b
    bf0c:	f7 01       	movw	r30, r14
    bf0e:	26 81       	ldd	r18, Z+6	; 0x06
    bf10:	37 81       	ldd	r19, Z+7	; 0x07
    bf12:	40 85       	ldd	r20, Z+8	; 0x08
    bf14:	51 85       	ldd	r21, Z+9	; 0x09
    bf16:	b8 01       	movw	r22, r16
    bf18:	80 81       	ld	r24, Z
    bf1a:	91 81       	ldd	r25, Z+1	; 0x01
    bf1c:	0e 94 c0 4a 	call	0x9580	; 0x9580 <st_clust.isra.5>
    bf20:	f7 01       	movw	r30, r14
    bf22:	42 85       	ldd	r20, Z+10	; 0x0a
    bf24:	53 85       	ldd	r21, Z+11	; 0x0b
    bf26:	64 85       	ldd	r22, Z+12	; 0x0c
    bf28:	75 85       	ldd	r23, Z+13	; 0x0d
    bf2a:	c8 01       	movw	r24, r16
    bf2c:	4c 96       	adiw	r24, 0x1c	; 28
    bf2e:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <st_dword>
    bf32:	b5 01       	movw	r22, r10
    bf34:	a4 01       	movw	r20, r8
    bf36:	c8 01       	movw	r24, r16
    bf38:	46 96       	adiw	r24, 0x16	; 22
    bf3a:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <st_dword>
    bf3e:	f8 01       	movw	r30, r16
    bf40:	12 8a       	std	Z+18, r1	; 0x12
    bf42:	13 8a       	std	Z+19, r1	; 0x13
    bf44:	89 81       	ldd	r24, Y+1	; 0x01
    bf46:	9a 81       	ldd	r25, Y+2	; 0x02
    bf48:	21 e0       	ldi	r18, 0x01	; 1
    bf4a:	fc 01       	movw	r30, r24
    bf4c:	23 83       	std	Z+3, r18	; 0x03
    bf4e:	0e 94 20 4b 	call	0x9640	; 0x9640 <sync_fs>
    bf52:	f7 01       	movw	r30, r14
    bf54:	26 85       	ldd	r18, Z+14	; 0x0e
    bf56:	2f 7b       	andi	r18, 0xBF	; 191
    bf58:	26 87       	std	Z+14, r18	; 0x0e
    bf5a:	04 c0       	rjmp	.+8      	; 0xbf64 <f_sync+0xe6>
    bf5c:	80 e0       	ldi	r24, 0x00	; 0
    bf5e:	01 c0       	rjmp	.+2      	; 0xbf62 <f_sync+0xe4>
    bf60:	81 e0       	ldi	r24, 0x01	; 1
    bf62:	90 e0       	ldi	r25, 0x00	; 0
    bf64:	0f 90       	pop	r0
    bf66:	0f 90       	pop	r0
    bf68:	df 91       	pop	r29
    bf6a:	cf 91       	pop	r28
    bf6c:	1f 91       	pop	r17
    bf6e:	0f 91       	pop	r16
    bf70:	ff 90       	pop	r15
    bf72:	ef 90       	pop	r14
    bf74:	bf 90       	pop	r11
    bf76:	af 90       	pop	r10
    bf78:	9f 90       	pop	r9
    bf7a:	8f 90       	pop	r8
    bf7c:	08 95       	ret

0000bf7e <f_close>:
    bf7e:	a2 e0       	ldi	r26, 0x02	; 2
    bf80:	b0 e0       	ldi	r27, 0x00	; 0
    bf82:	e5 ec       	ldi	r30, 0xC5	; 197
    bf84:	ff e5       	ldi	r31, 0x5F	; 95
    bf86:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__prologue_saves__+0x1c>
    bf8a:	8c 01       	movw	r16, r24
    bf8c:	78 df       	rcall	.-272    	; 0xbe7e <f_sync>
    bf8e:	00 97       	sbiw	r24, 0x00	; 0
    bf90:	59 f4       	brne	.+22     	; 0xbfa8 <f_close+0x2a>
    bf92:	be 01       	movw	r22, r28
    bf94:	6f 5f       	subi	r22, 0xFF	; 255
    bf96:	7f 4f       	sbci	r23, 0xFF	; 255
    bf98:	c8 01       	movw	r24, r16
    bf9a:	0e 94 ae 48 	call	0x915c	; 0x915c <validate>
    bf9e:	00 97       	sbiw	r24, 0x00	; 0
    bfa0:	19 f4       	brne	.+6      	; 0xbfa8 <f_close+0x2a>
    bfa2:	f8 01       	movw	r30, r16
    bfa4:	11 82       	std	Z+1, r1	; 0x01
    bfa6:	10 82       	st	Z, r1
    bfa8:	22 96       	adiw	r28, 0x02	; 2
    bfaa:	e4 e0       	ldi	r30, 0x04	; 4
    bfac:	0c 94 5f e5 	jmp	0x1cabe	; 0x1cabe <__epilogue_restores__+0x1c>

0000bfb0 <f_chdir>:
    bfb0:	a2 e3       	ldi	r26, 0x32	; 50
    bfb2:	b0 e0       	ldi	r27, 0x00	; 0
    bfb4:	ee ed       	ldi	r30, 0xDE	; 222
    bfb6:	ff e5       	ldi	r31, 0x5F	; 95
    bfb8:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    bfbc:	9a ab       	std	Y+50, r25	; 0x32
    bfbe:	89 ab       	std	Y+49, r24	; 0x31
    bfc0:	40 e0       	ldi	r20, 0x00	; 0
    bfc2:	be 01       	movw	r22, r28
    bfc4:	61 5d       	subi	r22, 0xD1	; 209
    bfc6:	7f 4f       	sbci	r23, 0xFF	; 255
    bfc8:	ce 01       	movw	r24, r28
    bfca:	c1 96       	adiw	r24, 0x31	; 49
    bfcc:	0e 94 b5 4c 	call	0x996a	; 0x996a <mount_volume>
    bfd0:	00 97       	sbiw	r24, 0x00	; 0
    bfd2:	09 f0       	breq	.+2      	; 0xbfd6 <f_chdir+0x26>
    bfd4:	44 c0       	rjmp	.+136    	; 0xc05e <f_chdir+0xae>
    bfd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    bfd8:	98 a9       	ldd	r25, Y+48	; 0x30
    bfda:	9a 83       	std	Y+2, r25	; 0x02
    bfdc:	89 83       	std	Y+1, r24	; 0x01
    bfde:	80 e0       	ldi	r24, 0x00	; 0
    bfe0:	92 e0       	ldi	r25, 0x02	; 2
    bfe2:	0e 94 19 6a 	call	0xd432	; 0xd432 <ff_memalloc>
    bfe6:	7c 01       	movw	r14, r24
    bfe8:	00 97       	sbiw	r24, 0x00	; 0
    bfea:	a9 f1       	breq	.+106    	; 0xc056 <f_chdir+0xa6>
    bfec:	ef a5       	ldd	r30, Y+47	; 0x2f
    bfee:	f8 a9       	ldd	r31, Y+48	; 0x30
    bff0:	94 87       	std	Z+12, r25	; 0x0c
    bff2:	83 87       	std	Z+11, r24	; 0x0b
    bff4:	69 a9       	ldd	r22, Y+49	; 0x31
    bff6:	7a a9       	ldd	r23, Y+50	; 0x32
    bff8:	ce 01       	movw	r24, r28
    bffa:	01 96       	adiw	r24, 0x01	; 1
    bffc:	31 d8       	rcall	.-3998   	; 0xb060 <follow_path>
    bffe:	8c 01       	movw	r16, r24
    c000:	89 2b       	or	r24, r25
    c002:	09 f5       	brne	.+66     	; 0xc046 <f_chdir+0x96>
    c004:	88 a5       	ldd	r24, Y+40	; 0x28
    c006:	87 ff       	sbrs	r24, 7
    c008:	0b c0       	rjmp	.+22     	; 0xc020 <f_chdir+0x70>
    c00a:	ef a5       	ldd	r30, Y+47	; 0x2f
    c00c:	f8 a9       	ldd	r31, Y+48	; 0x30
    c00e:	8f 81       	ldd	r24, Y+7	; 0x07
    c010:	98 85       	ldd	r25, Y+8	; 0x08
    c012:	a9 85       	ldd	r26, Y+9	; 0x09
    c014:	ba 85       	ldd	r27, Y+10	; 0x0a
    c016:	85 8b       	std	Z+21, r24	; 0x15
    c018:	96 8b       	std	Z+22, r25	; 0x16
    c01a:	a7 8b       	std	Z+23, r26	; 0x17
    c01c:	b0 8f       	std	Z+24, r27	; 0x18
    c01e:	13 c0       	rjmp	.+38     	; 0xc046 <f_chdir+0x96>
    c020:	8d 81       	ldd	r24, Y+5	; 0x05
    c022:	84 ff       	sbrs	r24, 4
    c024:	0e c0       	rjmp	.+28     	; 0xc042 <f_chdir+0x92>
    c026:	cf a4       	ldd	r12, Y+47	; 0x2f
    c028:	d8 a8       	ldd	r13, Y+48	; 0x30
    c02a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    c02c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    c02e:	f6 01       	movw	r30, r12
    c030:	80 81       	ld	r24, Z
    c032:	0e 94 ab 4a 	call	0x9556	; 0x9556 <ld_clust.isra.4>
    c036:	f6 01       	movw	r30, r12
    c038:	65 8b       	std	Z+21, r22	; 0x15
    c03a:	76 8b       	std	Z+22, r23	; 0x16
    c03c:	87 8b       	std	Z+23, r24	; 0x17
    c03e:	90 8f       	std	Z+24, r25	; 0x18
    c040:	02 c0       	rjmp	.+4      	; 0xc046 <f_chdir+0x96>
    c042:	05 e0       	ldi	r16, 0x05	; 5
    c044:	10 e0       	ldi	r17, 0x00	; 0
    c046:	c7 01       	movw	r24, r14
    c048:	0e 94 1c 6a 	call	0xd438	; 0xd438 <ff_memfree>
    c04c:	04 30       	cpi	r16, 0x04	; 4
    c04e:	11 05       	cpc	r17, r1
    c050:	29 f4       	brne	.+10     	; 0xc05c <f_chdir+0xac>
    c052:	85 e0       	ldi	r24, 0x05	; 5
    c054:	01 c0       	rjmp	.+2      	; 0xc058 <f_chdir+0xa8>
    c056:	81 e1       	ldi	r24, 0x11	; 17
    c058:	90 e0       	ldi	r25, 0x00	; 0
    c05a:	01 c0       	rjmp	.+2      	; 0xc05e <f_chdir+0xae>
    c05c:	c8 01       	movw	r24, r16
    c05e:	e2 96       	adiw	r28, 0x32	; 50
    c060:	e8 e0       	ldi	r30, 0x08	; 8
    c062:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

0000c066 <f_getcwd>:
    c066:	a8 e4       	ldi	r26, 0x48	; 72
    c068:	b1 e0       	ldi	r27, 0x01	; 1
    c06a:	e9 e3       	ldi	r30, 0x39	; 57
    c06c:	f0 e6       	ldi	r31, 0x60	; 96
    c06e:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    c072:	c9 5b       	subi	r28, 0xB9	; 185
    c074:	de 4f       	sbci	r29, 0xFE	; 254
    c076:	99 83       	std	Y+1, r25	; 0x01
    c078:	88 83       	st	Y, r24
    c07a:	c7 54       	subi	r28, 0x47	; 71
    c07c:	d1 40       	sbci	r29, 0x01	; 1
    c07e:	4b 01       	movw	r8, r22
    c080:	7c 01       	movw	r14, r24
    c082:	fc 01       	movw	r30, r24
    c084:	10 82       	st	Z, r1
    c086:	40 e0       	ldi	r20, 0x00	; 0
    c088:	be 01       	movw	r22, r28
    c08a:	6b 5b       	subi	r22, 0xBB	; 187
    c08c:	7e 4f       	sbci	r23, 0xFE	; 254
    c08e:	ce 01       	movw	r24, r28
    c090:	89 5b       	subi	r24, 0xB9	; 185
    c092:	9e 4f       	sbci	r25, 0xFE	; 254
    c094:	0e 94 b5 4c 	call	0x996a	; 0x996a <mount_volume>
    c098:	1c 01       	movw	r2, r24
    c09a:	89 2b       	or	r24, r25
    c09c:	09 f0       	breq	.+2      	; 0xc0a0 <f_getcwd+0x3a>
    c09e:	03 c1       	rjmp	.+518    	; 0xc2a6 <f_getcwd+0x240>
    c0a0:	cb 5b       	subi	r28, 0xBB	; 187
    c0a2:	de 4f       	sbci	r29, 0xFE	; 254
    c0a4:	88 81       	ld	r24, Y
    c0a6:	99 81       	ldd	r25, Y+1	; 0x01
    c0a8:	c5 54       	subi	r28, 0x45	; 69
    c0aa:	d1 40       	sbci	r29, 0x01	; 1
    c0ac:	c9 5e       	subi	r28, 0xE9	; 233
    c0ae:	de 4f       	sbci	r29, 0xFE	; 254
    c0b0:	99 83       	std	Y+1, r25	; 0x01
    c0b2:	88 83       	st	Y, r24
    c0b4:	c7 51       	subi	r28, 0x17	; 23
    c0b6:	d1 40       	sbci	r29, 0x01	; 1
    c0b8:	80 e0       	ldi	r24, 0x00	; 0
    c0ba:	92 e0       	ldi	r25, 0x02	; 2
    c0bc:	0e 94 19 6a 	call	0xd432	; 0xd432 <ff_memalloc>
    c0c0:	5c 01       	movw	r10, r24
    c0c2:	00 97       	sbiw	r24, 0x00	; 0
    c0c4:	09 f4       	brne	.+2      	; 0xc0c8 <f_getcwd+0x62>
    c0c6:	f3 c0       	rjmp	.+486    	; 0xc2ae <f_getcwd+0x248>
    c0c8:	cb 5b       	subi	r28, 0xBB	; 187
    c0ca:	de 4f       	sbci	r29, 0xFE	; 254
    c0cc:	e8 81       	ld	r30, Y
    c0ce:	f9 81       	ldd	r31, Y+1	; 0x01
    c0d0:	c5 54       	subi	r28, 0x45	; 69
    c0d2:	d1 40       	sbci	r29, 0x01	; 1
    c0d4:	94 87       	std	Z+12, r25	; 0x0c
    c0d6:	83 87       	std	Z+11, r24	; 0x0b
    c0d8:	85 89       	ldd	r24, Z+21	; 0x15
    c0da:	96 89       	ldd	r25, Z+22	; 0x16
    c0dc:	a7 89       	ldd	r26, Z+23	; 0x17
    c0de:	b0 8d       	ldd	r27, Z+24	; 0x18
    c0e0:	c3 5e       	subi	r28, 0xE3	; 227
    c0e2:	de 4f       	sbci	r29, 0xFE	; 254
    c0e4:	88 83       	st	Y, r24
    c0e6:	99 83       	std	Y+1, r25	; 0x01
    c0e8:	aa 83       	std	Y+2, r26	; 0x02
    c0ea:	bb 83       	std	Y+3, r27	; 0x03
    c0ec:	cd 51       	subi	r28, 0x1D	; 29
    c0ee:	d1 40       	sbci	r29, 0x01	; 1
    c0f0:	84 01       	movw	r16, r8
    c0f2:	ce 01       	movw	r24, r28
    c0f4:	01 96       	adiw	r24, 0x01	; 1
    c0f6:	6c 01       	movw	r12, r24
    c0f8:	c3 5e       	subi	r28, 0xE3	; 227
    c0fa:	de 4f       	sbci	r29, 0xFE	; 254
    c0fc:	48 80       	ld	r4, Y
    c0fe:	59 80       	ldd	r5, Y+1	; 0x01
    c100:	6a 80       	ldd	r6, Y+2	; 0x02
    c102:	7b 80       	ldd	r7, Y+3	; 0x03
    c104:	cd 51       	subi	r28, 0x1D	; 29
    c106:	d1 40       	sbci	r29, 0x01	; 1
    c108:	41 14       	cp	r4, r1
    c10a:	51 04       	cpc	r5, r1
    c10c:	61 04       	cpc	r6, r1
    c10e:	71 04       	cpc	r7, r1
    c110:	09 f4       	brne	.+2      	; 0xc114 <f_getcwd+0xae>
    c112:	a3 c0       	rjmp	.+326    	; 0xc25a <f_getcwd+0x1f4>
    c114:	40 e2       	ldi	r20, 0x20	; 32
    c116:	50 e0       	ldi	r21, 0x00	; 0
    c118:	60 e0       	ldi	r22, 0x00	; 0
    c11a:	70 e0       	ldi	r23, 0x00	; 0
    c11c:	ce 01       	movw	r24, r28
    c11e:	89 5e       	subi	r24, 0xE9	; 233
    c120:	9e 4f       	sbci	r25, 0xFE	; 254
    c122:	0e 94 ca 50 	call	0xa194	; 0xa194 <dir_sdi>
    c126:	00 97       	sbiw	r24, 0x00	; 0
    c128:	09 f0       	breq	.+2      	; 0xc12c <f_getcwd+0xc6>
    c12a:	c6 c0       	rjmp	.+396    	; 0xc2b8 <f_getcwd+0x252>
    c12c:	c3 5d       	subi	r28, 0xD3	; 211
    c12e:	de 4f       	sbci	r29, 0xFE	; 254
    c130:	48 81       	ld	r20, Y
    c132:	59 81       	ldd	r21, Y+1	; 0x01
    c134:	6a 81       	ldd	r22, Y+2	; 0x02
    c136:	7b 81       	ldd	r23, Y+3	; 0x03
    c138:	cd 52       	subi	r28, 0x2D	; 45
    c13a:	d1 40       	sbci	r29, 0x01	; 1
    c13c:	cb 5b       	subi	r28, 0xBB	; 187
    c13e:	de 4f       	sbci	r29, 0xFE	; 254
    c140:	88 81       	ld	r24, Y
    c142:	99 81       	ldd	r25, Y+1	; 0x01
    c144:	c5 54       	subi	r28, 0x45	; 69
    c146:	d1 40       	sbci	r29, 0x01	; 1
    c148:	0e 94 3a 4c 	call	0x9874	; 0x9874 <move_window>
    c14c:	00 97       	sbiw	r24, 0x00	; 0
    c14e:	09 f0       	breq	.+2      	; 0xc152 <f_getcwd+0xec>
    c150:	b3 c0       	rjmp	.+358    	; 0xc2b8 <f_getcwd+0x252>
    c152:	cf 5c       	subi	r28, 0xCF	; 207
    c154:	de 4f       	sbci	r29, 0xFE	; 254
    c156:	68 81       	ld	r22, Y
    c158:	79 81       	ldd	r23, Y+1	; 0x01
    c15a:	c1 53       	subi	r28, 0x31	; 49
    c15c:	d1 40       	sbci	r29, 0x01	; 1
    c15e:	cb 5b       	subi	r28, 0xBB	; 187
    c160:	de 4f       	sbci	r29, 0xFE	; 254
    c162:	e8 81       	ld	r30, Y
    c164:	f9 81       	ldd	r31, Y+1	; 0x01
    c166:	c5 54       	subi	r28, 0x45	; 69
    c168:	d1 40       	sbci	r29, 0x01	; 1
    c16a:	80 81       	ld	r24, Z
    c16c:	0e 94 ab 4a 	call	0x9556	; 0x9556 <ld_clust.isra.4>
    c170:	c3 5e       	subi	r28, 0xE3	; 227
    c172:	de 4f       	sbci	r29, 0xFE	; 254
    c174:	68 83       	st	Y, r22
    c176:	79 83       	std	Y+1, r23	; 0x01
    c178:	8a 83       	std	Y+2, r24	; 0x02
    c17a:	9b 83       	std	Y+3, r25	; 0x03
    c17c:	cd 51       	subi	r28, 0x1D	; 29
    c17e:	d1 40       	sbci	r29, 0x01	; 1
    c180:	40 e0       	ldi	r20, 0x00	; 0
    c182:	50 e0       	ldi	r21, 0x00	; 0
    c184:	ba 01       	movw	r22, r20
    c186:	ce 01       	movw	r24, r28
    c188:	89 5e       	subi	r24, 0xE9	; 233
    c18a:	9e 4f       	sbci	r25, 0xFE	; 254
    c18c:	0e 94 ca 50 	call	0xa194	; 0xa194 <dir_sdi>
    c190:	00 97       	sbiw	r24, 0x00	; 0
    c192:	09 f0       	breq	.+2      	; 0xc196 <f_getcwd+0x130>
    c194:	91 c0       	rjmp	.+290    	; 0xc2b8 <f_getcwd+0x252>
    c196:	60 e0       	ldi	r22, 0x00	; 0
    c198:	70 e0       	ldi	r23, 0x00	; 0
    c19a:	ce 01       	movw	r24, r28
    c19c:	89 5e       	subi	r24, 0xE9	; 233
    c19e:	9e 4f       	sbci	r25, 0xFE	; 254
    c1a0:	0e 94 64 54 	call	0xa8c8	; 0xa8c8 <dir_read>
    c1a4:	00 97       	sbiw	r24, 0x00	; 0
    c1a6:	09 f0       	breq	.+2      	; 0xc1aa <f_getcwd+0x144>
    c1a8:	89 c0       	rjmp	.+274    	; 0xc2bc <f_getcwd+0x256>
    c1aa:	cf 5c       	subi	r28, 0xCF	; 207
    c1ac:	de 4f       	sbci	r29, 0xFE	; 254
    c1ae:	68 81       	ld	r22, Y
    c1b0:	79 81       	ldd	r23, Y+1	; 0x01
    c1b2:	c1 53       	subi	r28, 0x31	; 49
    c1b4:	d1 40       	sbci	r29, 0x01	; 1
    c1b6:	cb 5b       	subi	r28, 0xBB	; 187
    c1b8:	de 4f       	sbci	r29, 0xFE	; 254
    c1ba:	e8 81       	ld	r30, Y
    c1bc:	f9 81       	ldd	r31, Y+1	; 0x01
    c1be:	c5 54       	subi	r28, 0x45	; 69
    c1c0:	d1 40       	sbci	r29, 0x01	; 1
    c1c2:	80 81       	ld	r24, Z
    c1c4:	0e 94 ab 4a 	call	0x9556	; 0x9556 <ld_clust.isra.4>
    c1c8:	46 16       	cp	r4, r22
    c1ca:	57 06       	cpc	r5, r23
    c1cc:	68 06       	cpc	r6, r24
    c1ce:	79 06       	cpc	r7, r25
    c1d0:	41 f4       	brne	.+16     	; 0xc1e2 <f_getcwd+0x17c>
    c1d2:	b6 01       	movw	r22, r12
    c1d4:	ce 01       	movw	r24, r28
    c1d6:	89 5e       	subi	r24, 0xE9	; 233
    c1d8:	9e 4f       	sbci	r25, 0xFE	; 254
    c1da:	0e 94 92 49 	call	0x9324	; 0x9324 <get_fileinfo>
    c1de:	f6 01       	movw	r30, r12
    c1e0:	0a c0       	rjmp	.+20     	; 0xc1f6 <f_getcwd+0x190>
    c1e2:	60 e0       	ldi	r22, 0x00	; 0
    c1e4:	70 e0       	ldi	r23, 0x00	; 0
    c1e6:	ce 01       	movw	r24, r28
    c1e8:	89 5e       	subi	r24, 0xE9	; 233
    c1ea:	9e 4f       	sbci	r25, 0xFE	; 254
    c1ec:	0e 94 42 53 	call	0xa684	; 0xa684 <dir_next>
    c1f0:	00 97       	sbiw	r24, 0x00	; 0
    c1f2:	89 f2       	breq	.-94     	; 0xc196 <f_getcwd+0x130>
    c1f4:	63 c0       	rjmp	.+198    	; 0xc2bc <f_getcwd+0x256>
    c1f6:	cf 01       	movw	r24, r30
    c1f8:	8c 19       	sub	r24, r12
    c1fa:	9d 09       	sbc	r25, r13
    c1fc:	31 96       	adiw	r30, 0x01	; 1
    c1fe:	25 89       	ldd	r18, Z+21	; 0x15
    c200:	21 11       	cpse	r18, r1
    c202:	f9 cf       	rjmp	.-14     	; 0xc1f6 <f_getcwd+0x190>
    c204:	9c 01       	movw	r18, r24
    c206:	2f 5f       	subi	r18, 0xFF	; 255
    c208:	3f 4f       	sbci	r19, 0xFF	; 255
    c20a:	02 17       	cp	r16, r18
    c20c:	13 07       	cpc	r17, r19
    c20e:	08 f4       	brcc	.+2      	; 0xc212 <f_getcwd+0x1ac>
    c210:	51 c0       	rjmp	.+162    	; 0xc2b4 <f_getcwd+0x24e>
    c212:	f6 01       	movw	r30, r12
    c214:	e8 0f       	add	r30, r24
    c216:	f9 1f       	adc	r31, r25
    c218:	98 01       	movw	r18, r16
    c21a:	ce 16       	cp	r12, r30
    c21c:	df 06       	cpc	r13, r31
    c21e:	71 f0       	breq	.+28     	; 0xc23c <f_getcwd+0x1d6>
    c220:	21 50       	subi	r18, 0x01	; 1
    c222:	31 09       	sbc	r19, r1
    c224:	45 89       	ldd	r20, Z+21	; 0x15
    c226:	c9 5b       	subi	r28, 0xB9	; 185
    c228:	de 4f       	sbci	r29, 0xFE	; 254
    c22a:	a8 81       	ld	r26, Y
    c22c:	b9 81       	ldd	r27, Y+1	; 0x01
    c22e:	c7 54       	subi	r28, 0x47	; 71
    c230:	d1 40       	sbci	r29, 0x01	; 1
    c232:	a2 0f       	add	r26, r18
    c234:	b3 1f       	adc	r27, r19
    c236:	4c 93       	st	X, r20
    c238:	31 97       	sbiw	r30, 0x01	; 1
    c23a:	ef cf       	rjmp	.-34     	; 0xc21a <f_getcwd+0x1b4>
    c23c:	80 95       	com	r24
    c23e:	90 95       	com	r25
    c240:	08 0f       	add	r16, r24
    c242:	19 1f       	adc	r17, r25
    c244:	c9 5b       	subi	r28, 0xB9	; 185
    c246:	de 4f       	sbci	r29, 0xFE	; 254
    c248:	e8 81       	ld	r30, Y
    c24a:	f9 81       	ldd	r31, Y+1	; 0x01
    c24c:	c7 54       	subi	r28, 0x47	; 71
    c24e:	d1 40       	sbci	r29, 0x01	; 1
    c250:	e0 0f       	add	r30, r16
    c252:	f1 1f       	adc	r31, r17
    c254:	9f e2       	ldi	r25, 0x2F	; 47
    c256:	90 83       	st	Z, r25
    c258:	4f cf       	rjmp	.-354    	; 0xc0f8 <f_getcwd+0x92>
    c25a:	08 15       	cp	r16, r8
    c25c:	19 05       	cpc	r17, r9
    c25e:	61 f4       	brne	.+24     	; 0xc278 <f_getcwd+0x212>
    c260:	01 50       	subi	r16, 0x01	; 1
    c262:	11 09       	sbc	r17, r1
    c264:	c9 5b       	subi	r28, 0xB9	; 185
    c266:	de 4f       	sbci	r29, 0xFE	; 254
    c268:	e8 81       	ld	r30, Y
    c26a:	f9 81       	ldd	r31, Y+1	; 0x01
    c26c:	c7 54       	subi	r28, 0x47	; 71
    c26e:	d1 40       	sbci	r29, 0x01	; 1
    c270:	e0 0f       	add	r30, r16
    c272:	f1 1f       	adc	r31, r17
    c274:	8f e2       	ldi	r24, 0x2F	; 47
    c276:	80 83       	st	Z, r24
    c278:	ef ef       	ldi	r30, 0xFF	; 255
    c27a:	ee 1a       	sub	r14, r30
    c27c:	fe 0a       	sbc	r15, r30
    c27e:	c9 5b       	subi	r28, 0xB9	; 185
    c280:	de 4f       	sbci	r29, 0xFE	; 254
    c282:	e8 81       	ld	r30, Y
    c284:	f9 81       	ldd	r31, Y+1	; 0x01
    c286:	c7 54       	subi	r28, 0x47	; 71
    c288:	d1 40       	sbci	r29, 0x01	; 1
    c28a:	e0 0f       	add	r30, r16
    c28c:	f1 1f       	adc	r31, r17
    c28e:	80 81       	ld	r24, Z
    c290:	f7 01       	movw	r30, r14
    c292:	31 97       	sbiw	r30, 0x01	; 1
    c294:	80 83       	st	Z, r24
    c296:	0f 5f       	subi	r16, 0xFF	; 255
    c298:	1f 4f       	sbci	r17, 0xFF	; 255
    c29a:	08 15       	cp	r16, r8
    c29c:	19 05       	cpc	r17, r9
    c29e:	60 f3       	brcs	.-40     	; 0xc278 <f_getcwd+0x212>
    c2a0:	c5 01       	movw	r24, r10
    c2a2:	0e 94 1c 6a 	call	0xd438	; 0xd438 <ff_memfree>
    c2a6:	f7 01       	movw	r30, r14
    c2a8:	10 82       	st	Z, r1
    c2aa:	c1 01       	movw	r24, r2
    c2ac:	0d c0       	rjmp	.+26     	; 0xc2c8 <f_getcwd+0x262>
    c2ae:	81 e1       	ldi	r24, 0x11	; 17
    c2b0:	90 e0       	ldi	r25, 0x00	; 0
    c2b2:	0a c0       	rjmp	.+20     	; 0xc2c8 <f_getcwd+0x262>
    c2b4:	81 e1       	ldi	r24, 0x11	; 17
    c2b6:	90 e0       	ldi	r25, 0x00	; 0
    c2b8:	1c 01       	movw	r2, r24
    c2ba:	f2 cf       	rjmp	.-28     	; 0xc2a0 <f_getcwd+0x23a>
    c2bc:	84 30       	cpi	r24, 0x04	; 4
    c2be:	91 05       	cpc	r25, r1
    c2c0:	d9 f7       	brne	.-10     	; 0xc2b8 <f_getcwd+0x252>
    c2c2:	82 e0       	ldi	r24, 0x02	; 2
    c2c4:	90 e0       	ldi	r25, 0x00	; 0
    c2c6:	f8 cf       	rjmp	.-16     	; 0xc2b8 <f_getcwd+0x252>
    c2c8:	c8 5b       	subi	r28, 0xB8	; 184
    c2ca:	de 4f       	sbci	r29, 0xFE	; 254
    c2cc:	e2 e1       	ldi	r30, 0x12	; 18
    c2ce:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0000c2d2 <f_lseek>:
    c2d2:	aa e0       	ldi	r26, 0x0A	; 10
    c2d4:	b0 e0       	ldi	r27, 0x00	; 0
    c2d6:	ef e6       	ldi	r30, 0x6F	; 111
    c2d8:	f1 e6       	ldi	r31, 0x61	; 97
    c2da:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    c2de:	1c 01       	movw	r2, r24
    c2e0:	6a 01       	movw	r12, r20
    c2e2:	7b 01       	movw	r14, r22
    c2e4:	be 01       	movw	r22, r28
    c2e6:	6f 5f       	subi	r22, 0xFF	; 255
    c2e8:	7f 4f       	sbci	r23, 0xFF	; 255
    c2ea:	0e 94 ae 48 	call	0x915c	; 0x915c <validate>
    c2ee:	00 97       	sbiw	r24, 0x00	; 0
    c2f0:	09 f0       	breq	.+2      	; 0xc2f4 <f_lseek+0x22>
    c2f2:	c6 c2       	rjmp	.+1420   	; 0xc880 <f_lseek+0x5ae>
    c2f4:	d1 01       	movw	r26, r2
    c2f6:	1f 96       	adiw	r26, 0x0f	; 15
    c2f8:	8c 91       	ld	r24, X
    c2fa:	1f 97       	sbiw	r26, 0x0f	; 15
    c2fc:	90 e0       	ldi	r25, 0x00	; 0
    c2fe:	00 97       	sbiw	r24, 0x00	; 0
    c300:	09 f0       	breq	.+2      	; 0xc304 <f_lseek+0x32>
    c302:	be c2       	rjmp	.+1404   	; 0xc880 <f_lseek+0x5ae>
    c304:	92 96       	adiw	r26, 0x22	; 34
    c306:	ed 91       	ld	r30, X+
    c308:	fc 91       	ld	r31, X
    c30a:	93 97       	sbiw	r26, 0x23	; 35
    c30c:	30 97       	sbiw	r30, 0x00	; 0
    c30e:	09 f4       	brne	.+2      	; 0xc312 <f_lseek+0x40>
    c310:	3a c1       	rjmp	.+628    	; 0xc586 <f_lseek+0x2b4>
    c312:	bf ef       	ldi	r27, 0xFF	; 255
    c314:	cb 16       	cp	r12, r27
    c316:	db 06       	cpc	r13, r27
    c318:	eb 06       	cpc	r14, r27
    c31a:	fb 06       	cpc	r15, r27
    c31c:	09 f0       	breq	.+2      	; 0xc320 <f_lseek+0x4e>
    c31e:	9f c0       	rjmp	.+318    	; 0xc45e <f_lseek+0x18c>
    c320:	8f 01       	movw	r16, r30
    c322:	0c 5f       	subi	r16, 0xFC	; 252
    c324:	1f 4f       	sbci	r17, 0xFF	; 255
    c326:	20 81       	ld	r18, Z
    c328:	31 81       	ldd	r19, Z+1	; 0x01
    c32a:	42 81       	ldd	r20, Z+2	; 0x02
    c32c:	53 81       	ldd	r21, Z+3	; 0x03
    c32e:	2f 83       	std	Y+7, r18	; 0x07
    c330:	38 87       	std	Y+8, r19	; 0x08
    c332:	49 87       	std	Y+9, r20	; 0x09
    c334:	5a 87       	std	Y+10, r21	; 0x0a
    c336:	d1 01       	movw	r26, r2
    c338:	16 96       	adiw	r26, 0x06	; 6
    c33a:	8d 90       	ld	r8, X+
    c33c:	9d 90       	ld	r9, X+
    c33e:	ad 90       	ld	r10, X+
    c340:	bc 90       	ld	r11, X
    c342:	19 97       	sbiw	r26, 0x09	; 9
    c344:	52 e0       	ldi	r21, 0x02	; 2
    c346:	c5 2e       	mov	r12, r21
    c348:	d1 2c       	mov	r13, r1
    c34a:	e1 2c       	mov	r14, r1
    c34c:	f1 2c       	mov	r15, r1
    c34e:	81 14       	cp	r8, r1
    c350:	91 04       	cpc	r9, r1
    c352:	a1 04       	cpc	r10, r1
    c354:	b1 04       	cpc	r11, r1
    c356:	09 f4       	brne	.+2      	; 0xc35a <f_lseek+0x88>
    c358:	68 c0       	rjmp	.+208    	; 0xc42a <f_lseek+0x158>
    c35a:	24 01       	movw	r4, r8
    c35c:	35 01       	movw	r6, r10
    c35e:	1b 82       	std	Y+3, r1	; 0x03
    c360:	1c 82       	std	Y+4, r1	; 0x04
    c362:	1d 82       	std	Y+5, r1	; 0x05
    c364:	1e 82       	std	Y+6, r1	; 0x06
    c366:	2b 81       	ldd	r18, Y+3	; 0x03
    c368:	3c 81       	ldd	r19, Y+4	; 0x04
    c36a:	4d 81       	ldd	r20, Y+5	; 0x05
    c36c:	5e 81       	ldd	r21, Y+6	; 0x06
    c36e:	2f 5f       	subi	r18, 0xFF	; 255
    c370:	3f 4f       	sbci	r19, 0xFF	; 255
    c372:	4f 4f       	sbci	r20, 0xFF	; 255
    c374:	5f 4f       	sbci	r21, 0xFF	; 255
    c376:	2b 83       	std	Y+3, r18	; 0x03
    c378:	3c 83       	std	Y+4, r19	; 0x04
    c37a:	4d 83       	std	Y+5, r20	; 0x05
    c37c:	5e 83       	std	Y+6, r21	; 0x06
    c37e:	b3 01       	movw	r22, r6
    c380:	a2 01       	movw	r20, r4
    c382:	d1 01       	movw	r26, r2
    c384:	8d 91       	ld	r24, X+
    c386:	9c 91       	ld	r25, X
    c388:	0e 94 16 50 	call	0xa02c	; 0xa02c <get_fat.isra.10>
    c38c:	62 30       	cpi	r22, 0x02	; 2
    c38e:	71 05       	cpc	r23, r1
    c390:	81 05       	cpc	r24, r1
    c392:	91 05       	cpc	r25, r1
    c394:	20 f4       	brcc	.+8      	; 0xc39e <f_lseek+0xcc>
    c396:	82 e0       	ldi	r24, 0x02	; 2
    c398:	f1 01       	movw	r30, r2
    c39a:	87 87       	std	Z+15, r24	; 0x0f
    c39c:	0a c0       	rjmp	.+20     	; 0xc3b2 <f_lseek+0xe0>
    c39e:	6f 3f       	cpi	r22, 0xFF	; 255
    c3a0:	ff ef       	ldi	r31, 0xFF	; 255
    c3a2:	7f 07       	cpc	r23, r31
    c3a4:	8f 07       	cpc	r24, r31
    c3a6:	9f 07       	cpc	r25, r31
    c3a8:	31 f4       	brne	.+12     	; 0xc3b6 <f_lseek+0xe4>
    c3aa:	81 e0       	ldi	r24, 0x01	; 1
    c3ac:	d1 01       	movw	r26, r2
    c3ae:	1f 96       	adiw	r26, 0x0f	; 15
    c3b0:	8c 93       	st	X, r24
    c3b2:	90 e0       	ldi	r25, 0x00	; 0
    c3b4:	65 c2       	rjmp	.+1226   	; 0xc880 <f_lseek+0x5ae>
    c3b6:	a3 01       	movw	r20, r6
    c3b8:	92 01       	movw	r18, r4
    c3ba:	2f 5f       	subi	r18, 0xFF	; 255
    c3bc:	3f 4f       	sbci	r19, 0xFF	; 255
    c3be:	4f 4f       	sbci	r20, 0xFF	; 255
    c3c0:	5f 4f       	sbci	r21, 0xFF	; 255
    c3c2:	2b 01       	movw	r4, r22
    c3c4:	3c 01       	movw	r6, r24
    c3c6:	62 17       	cp	r22, r18
    c3c8:	73 07       	cpc	r23, r19
    c3ca:	84 07       	cpc	r24, r20
    c3cc:	95 07       	cpc	r25, r21
    c3ce:	59 f2       	breq	.-106    	; 0xc366 <f_lseek+0x94>
    c3d0:	b2 e0       	ldi	r27, 0x02	; 2
    c3d2:	cb 0e       	add	r12, r27
    c3d4:	d1 1c       	adc	r13, r1
    c3d6:	e1 1c       	adc	r14, r1
    c3d8:	f1 1c       	adc	r15, r1
    c3da:	2f 81       	ldd	r18, Y+7	; 0x07
    c3dc:	38 85       	ldd	r19, Y+8	; 0x08
    c3de:	49 85       	ldd	r20, Y+9	; 0x09
    c3e0:	5a 85       	ldd	r21, Y+10	; 0x0a
    c3e2:	2c 15       	cp	r18, r12
    c3e4:	3d 05       	cpc	r19, r13
    c3e6:	4e 05       	cpc	r20, r14
    c3e8:	5f 05       	cpc	r21, r15
    c3ea:	88 f0       	brcs	.+34     	; 0xc40e <f_lseek+0x13c>
    c3ec:	2b 81       	ldd	r18, Y+3	; 0x03
    c3ee:	3c 81       	ldd	r19, Y+4	; 0x04
    c3f0:	4d 81       	ldd	r20, Y+5	; 0x05
    c3f2:	5e 81       	ldd	r21, Y+6	; 0x06
    c3f4:	d8 01       	movw	r26, r16
    c3f6:	2d 93       	st	X+, r18
    c3f8:	3d 93       	st	X+, r19
    c3fa:	4d 93       	st	X+, r20
    c3fc:	5c 93       	st	X, r21
    c3fe:	13 97       	sbiw	r26, 0x03	; 3
    c400:	f8 01       	movw	r30, r16
    c402:	84 82       	std	Z+4, r8	; 0x04
    c404:	95 82       	std	Z+5, r9	; 0x05
    c406:	a6 82       	std	Z+6, r10	; 0x06
    c408:	b7 82       	std	Z+7, r11	; 0x07
    c40a:	08 5f       	subi	r16, 0xF8	; 248
    c40c:	1f 4f       	sbci	r17, 0xFF	; 255
    c40e:	e9 81       	ldd	r30, Y+1	; 0x01
    c410:	fa 81       	ldd	r31, Y+2	; 0x02
    c412:	81 8c       	ldd	r8, Z+25	; 0x19
    c414:	92 8c       	ldd	r9, Z+26	; 0x1a
    c416:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c418:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c41a:	68 15       	cp	r22, r8
    c41c:	79 05       	cpc	r23, r9
    c41e:	8a 05       	cpc	r24, r10
    c420:	9b 05       	cpc	r25, r11
    c422:	18 f4       	brcc	.+6      	; 0xc42a <f_lseek+0x158>
    c424:	4b 01       	movw	r8, r22
    c426:	5c 01       	movw	r10, r24
    c428:	98 cf       	rjmp	.-208    	; 0xc35a <f_lseek+0x88>
    c42a:	d1 01       	movw	r26, r2
    c42c:	92 96       	adiw	r26, 0x22	; 34
    c42e:	ed 91       	ld	r30, X+
    c430:	fc 91       	ld	r31, X
    c432:	93 97       	sbiw	r26, 0x23	; 35
    c434:	c0 82       	st	Z, r12
    c436:	d1 82       	std	Z+1, r13	; 0x01
    c438:	e2 82       	std	Z+2, r14	; 0x02
    c43a:	f3 82       	std	Z+3, r15	; 0x03
    c43c:	2f 81       	ldd	r18, Y+7	; 0x07
    c43e:	38 85       	ldd	r19, Y+8	; 0x08
    c440:	49 85       	ldd	r20, Y+9	; 0x09
    c442:	5a 85       	ldd	r21, Y+10	; 0x0a
    c444:	2c 15       	cp	r18, r12
    c446:	3d 05       	cpc	r19, r13
    c448:	4e 05       	cpc	r20, r14
    c44a:	5f 05       	cpc	r21, r15
    c44c:	08 f4       	brcc	.+2      	; 0xc450 <f_lseek+0x17e>
    c44e:	0f c2       	rjmp	.+1054   	; 0xc86e <f_lseek+0x59c>
    c450:	d8 01       	movw	r26, r16
    c452:	1d 92       	st	X+, r1
    c454:	1d 92       	st	X+, r1
    c456:	1d 92       	st	X+, r1
    c458:	1c 92       	st	X, r1
    c45a:	13 97       	sbiw	r26, 0x03	; 3
    c45c:	06 c2       	rjmp	.+1036   	; 0xc86a <f_lseek+0x598>
    c45e:	f1 01       	movw	r30, r2
    c460:	82 85       	ldd	r24, Z+10	; 0x0a
    c462:	93 85       	ldd	r25, Z+11	; 0x0b
    c464:	a4 85       	ldd	r26, Z+12	; 0x0c
    c466:	b5 85       	ldd	r27, Z+13	; 0x0d
    c468:	46 01       	movw	r8, r12
    c46a:	57 01       	movw	r10, r14
    c46c:	8c 15       	cp	r24, r12
    c46e:	9d 05       	cpc	r25, r13
    c470:	ae 05       	cpc	r26, r14
    c472:	bf 05       	cpc	r27, r15
    c474:	10 f4       	brcc	.+4      	; 0xc47a <f_lseek+0x1a8>
    c476:	4c 01       	movw	r8, r24
    c478:	5d 01       	movw	r10, r26
    c47a:	d1 01       	movw	r26, r2
    c47c:	50 96       	adiw	r26, 0x10	; 16
    c47e:	8d 92       	st	X+, r8
    c480:	9d 92       	st	X+, r9
    c482:	ad 92       	st	X+, r10
    c484:	bc 92       	st	X, r11
    c486:	53 97       	sbiw	r26, 0x13	; 19
    c488:	81 14       	cp	r8, r1
    c48a:	91 04       	cpc	r9, r1
    c48c:	a1 04       	cpc	r10, r1
    c48e:	b1 04       	cpc	r11, r1
    c490:	09 f4       	brne	.+2      	; 0xc494 <f_lseek+0x1c2>
    c492:	eb c1       	rjmp	.+982    	; 0xc86a <f_lseek+0x598>
    c494:	24 01       	movw	r4, r8
    c496:	35 01       	movw	r6, r10
    c498:	b1 e0       	ldi	r27, 0x01	; 1
    c49a:	4b 1a       	sub	r4, r27
    c49c:	51 08       	sbc	r5, r1
    c49e:	61 08       	sbc	r6, r1
    c4a0:	71 08       	sbc	r7, r1
    c4a2:	b3 01       	movw	r22, r6
    c4a4:	a2 01       	movw	r20, r4
    c4a6:	c1 01       	movw	r24, r2
    c4a8:	0e 94 37 48 	call	0x906e	; 0x906e <clmt_clust>
    c4ac:	ab 01       	movw	r20, r22
    c4ae:	bc 01       	movw	r22, r24
    c4b0:	f1 01       	movw	r30, r2
    c4b2:	44 8b       	std	Z+20, r20	; 0x14
    c4b4:	55 8b       	std	Z+21, r21	; 0x15
    c4b6:	66 8b       	std	Z+22, r22	; 0x16
    c4b8:	77 8b       	std	Z+23, r23	; 0x17
    c4ba:	e9 80       	ldd	r14, Y+1	; 0x01
    c4bc:	fa 80       	ldd	r15, Y+2	; 0x02
    c4be:	c7 01       	movw	r24, r14
    c4c0:	0e 94 0f 48 	call	0x901e	; 0x901e <clst2sect>
    c4c4:	61 15       	cp	r22, r1
    c4c6:	71 05       	cpc	r23, r1
    c4c8:	81 05       	cpc	r24, r1
    c4ca:	91 05       	cpc	r25, r1
    c4cc:	09 f4       	brne	.+2      	; 0xc4d0 <f_lseek+0x1fe>
    c4ce:	63 cf       	rjmp	.-314    	; 0xc396 <f_lseek+0xc4>
    c4d0:	95 01       	movw	r18, r10
    c4d2:	84 01       	movw	r16, r8
    c4d4:	11 70       	andi	r17, 0x01	; 1
    c4d6:	22 27       	eor	r18, r18
    c4d8:	33 27       	eor	r19, r19
    c4da:	01 15       	cp	r16, r1
    c4dc:	11 05       	cpc	r17, r1
    c4de:	21 05       	cpc	r18, r1
    c4e0:	31 05       	cpc	r19, r1
    c4e2:	09 f4       	brne	.+2      	; 0xc4e6 <f_lseek+0x214>
    c4e4:	c2 c1       	rjmp	.+900    	; 0xc86a <f_lseek+0x598>
    c4e6:	d7 01       	movw	r26, r14
    c4e8:	19 96       	adiw	r26, 0x09	; 9
    c4ea:	8d 90       	ld	r8, X+
    c4ec:	9c 90       	ld	r9, X
    c4ee:	1a 97       	sbiw	r26, 0x0a	; 10
    c4f0:	b1 e0       	ldi	r27, 0x01	; 1
    c4f2:	8b 1a       	sub	r8, r27
    c4f4:	91 08       	sbc	r9, r1
    c4f6:	a1 2c       	mov	r10, r1
    c4f8:	b1 2c       	mov	r11, r1
    c4fa:	49 e0       	ldi	r20, 0x09	; 9
    c4fc:	76 94       	lsr	r7
    c4fe:	67 94       	ror	r6
    c500:	57 94       	ror	r5
    c502:	47 94       	ror	r4
    c504:	4a 95       	dec	r20
    c506:	d1 f7       	brne	.-12     	; 0xc4fc <f_lseek+0x22a>
    c508:	48 20       	and	r4, r8
    c50a:	59 20       	and	r5, r9
    c50c:	6a 20       	and	r6, r10
    c50e:	7b 20       	and	r7, r11
    c510:	53 01       	movw	r10, r6
    c512:	42 01       	movw	r8, r4
    c514:	86 0e       	add	r8, r22
    c516:	97 1e       	adc	r9, r23
    c518:	a8 1e       	adc	r10, r24
    c51a:	b9 1e       	adc	r11, r25
    c51c:	f1 01       	movw	r30, r2
    c51e:	20 8d       	ldd	r18, Z+24	; 0x18
    c520:	31 8d       	ldd	r19, Z+25	; 0x19
    c522:	42 8d       	ldd	r20, Z+26	; 0x1a
    c524:	53 8d       	ldd	r21, Z+27	; 0x1b
    c526:	82 16       	cp	r8, r18
    c528:	93 06       	cpc	r9, r19
    c52a:	a4 06       	cpc	r10, r20
    c52c:	b5 06       	cpc	r11, r21
    c52e:	09 f4       	brne	.+2      	; 0xc532 <f_lseek+0x260>
    c530:	9c c1       	rjmp	.+824    	; 0xc86a <f_lseek+0x598>
    c532:	86 85       	ldd	r24, Z+14	; 0x0e
    c534:	b1 01       	movw	r22, r2
    c536:	6c 5d       	subi	r22, 0xDC	; 220
    c538:	7f 4f       	sbci	r23, 0xFF	; 255
    c53a:	6b 01       	movw	r12, r22
    c53c:	87 ff       	sbrs	r24, 7
    c53e:	0e c0       	rjmp	.+28     	; 0xc55c <f_lseek+0x28a>
    c540:	01 e0       	ldi	r16, 0x01	; 1
    c542:	10 e0       	ldi	r17, 0x00	; 0
    c544:	d7 01       	movw	r26, r14
    c546:	11 96       	adiw	r26, 0x01	; 1
    c548:	8c 91       	ld	r24, X
    c54a:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <disk_write>
    c54e:	89 2b       	or	r24, r25
    c550:	09 f0       	breq	.+2      	; 0xc554 <f_lseek+0x282>
    c552:	2b cf       	rjmp	.-426    	; 0xc3aa <f_lseek+0xd8>
    c554:	f1 01       	movw	r30, r2
    c556:	86 85       	ldd	r24, Z+14	; 0x0e
    c558:	8f 77       	andi	r24, 0x7F	; 127
    c55a:	86 87       	std	Z+14, r24	; 0x0e
    c55c:	e9 81       	ldd	r30, Y+1	; 0x01
    c55e:	fa 81       	ldd	r31, Y+2	; 0x02
    c560:	01 e0       	ldi	r16, 0x01	; 1
    c562:	10 e0       	ldi	r17, 0x00	; 0
    c564:	a5 01       	movw	r20, r10
    c566:	94 01       	movw	r18, r8
    c568:	b6 01       	movw	r22, r12
    c56a:	81 81       	ldd	r24, Z+1	; 0x01
    c56c:	0e 94 d5 6a 	call	0xd5aa	; 0xd5aa <disk_read>
    c570:	89 2b       	or	r24, r25
    c572:	09 f0       	breq	.+2      	; 0xc576 <f_lseek+0x2a4>
    c574:	1a cf       	rjmp	.-460    	; 0xc3aa <f_lseek+0xd8>
    c576:	d1 01       	movw	r26, r2
    c578:	58 96       	adiw	r26, 0x18	; 24
    c57a:	8d 92       	st	X+, r8
    c57c:	9d 92       	st	X+, r9
    c57e:	ad 92       	st	X+, r10
    c580:	bc 92       	st	X, r11
    c582:	5b 97       	sbiw	r26, 0x1b	; 27
    c584:	72 c1       	rjmp	.+740    	; 0xc86a <f_lseek+0x598>
    c586:	f1 01       	movw	r30, r2
    c588:	82 85       	ldd	r24, Z+10	; 0x0a
    c58a:	93 85       	ldd	r25, Z+11	; 0x0b
    c58c:	a4 85       	ldd	r26, Z+12	; 0x0c
    c58e:	b5 85       	ldd	r27, Z+13	; 0x0d
    c590:	8c 15       	cp	r24, r12
    c592:	9d 05       	cpc	r25, r13
    c594:	ae 05       	cpc	r26, r14
    c596:	bf 05       	cpc	r27, r15
    c598:	28 f4       	brcc	.+10     	; 0xc5a4 <f_lseek+0x2d2>
    c59a:	26 85       	ldd	r18, Z+14	; 0x0e
    c59c:	21 fd       	sbrc	r18, 1
    c59e:	02 c0       	rjmp	.+4      	; 0xc5a4 <f_lseek+0x2d2>
    c5a0:	6c 01       	movw	r12, r24
    c5a2:	7d 01       	movw	r14, r26
    c5a4:	d1 01       	movw	r26, r2
    c5a6:	50 96       	adiw	r26, 0x10	; 16
    c5a8:	4d 90       	ld	r4, X+
    c5aa:	5d 90       	ld	r5, X+
    c5ac:	6d 90       	ld	r6, X+
    c5ae:	7c 90       	ld	r7, X
    c5b0:	53 97       	sbiw	r26, 0x13	; 19
    c5b2:	f1 01       	movw	r30, r2
    c5b4:	10 8a       	std	Z+16, r1	; 0x10
    c5b6:	11 8a       	std	Z+17, r1	; 0x11
    c5b8:	12 8a       	std	Z+18, r1	; 0x12
    c5ba:	13 8a       	std	Z+19, r1	; 0x13
    c5bc:	c1 14       	cp	r12, r1
    c5be:	d1 04       	cpc	r13, r1
    c5c0:	e1 04       	cpc	r14, r1
    c5c2:	f1 04       	cpc	r15, r1
    c5c4:	09 f4       	brne	.+2      	; 0xc5c8 <f_lseek+0x2f6>
    c5c6:	55 c1       	rjmp	.+682    	; 0xc872 <f_lseek+0x5a0>
    c5c8:	e9 81       	ldd	r30, Y+1	; 0x01
    c5ca:	fa 81       	ldd	r31, Y+2	; 0x02
    c5cc:	81 84       	ldd	r8, Z+9	; 0x09
    c5ce:	92 84       	ldd	r9, Z+10	; 0x0a
    c5d0:	a1 2c       	mov	r10, r1
    c5d2:	b1 2c       	mov	r11, r1
    c5d4:	39 e0       	ldi	r19, 0x09	; 9
    c5d6:	88 0c       	add	r8, r8
    c5d8:	99 1c       	adc	r9, r9
    c5da:	aa 1c       	adc	r10, r10
    c5dc:	bb 1c       	adc	r11, r11
    c5de:	3a 95       	dec	r19
    c5e0:	d1 f7       	brne	.-12     	; 0xc5d6 <f_lseek+0x304>
    c5e2:	41 14       	cp	r4, r1
    c5e4:	51 04       	cpc	r5, r1
    c5e6:	61 04       	cpc	r6, r1
    c5e8:	71 04       	cpc	r7, r1
    c5ea:	09 f4       	brne	.+2      	; 0xc5ee <f_lseek+0x31c>
    c5ec:	3f c0       	rjmp	.+126    	; 0xc66c <f_lseek+0x39a>
    c5ee:	f1 e0       	ldi	r31, 0x01	; 1
    c5f0:	4f 1a       	sub	r4, r31
    c5f2:	51 08       	sbc	r5, r1
    c5f4:	61 08       	sbc	r6, r1
    c5f6:	71 08       	sbc	r7, r1
    c5f8:	c7 01       	movw	r24, r14
    c5fa:	b6 01       	movw	r22, r12
    c5fc:	61 50       	subi	r22, 0x01	; 1
    c5fe:	71 09       	sbc	r23, r1
    c600:	81 09       	sbc	r24, r1
    c602:	91 09       	sbc	r25, r1
    c604:	a5 01       	movw	r20, r10
    c606:	94 01       	movw	r18, r8
    c608:	0e 94 b3 e4 	call	0x1c966	; 0x1c966 <__udivmodsi4>
    c60c:	2b 83       	std	Y+3, r18	; 0x03
    c60e:	3c 83       	std	Y+4, r19	; 0x04
    c610:	4d 83       	std	Y+5, r20	; 0x05
    c612:	5e 83       	std	Y+6, r21	; 0x06
    c614:	c3 01       	movw	r24, r6
    c616:	b2 01       	movw	r22, r4
    c618:	a5 01       	movw	r20, r10
    c61a:	94 01       	movw	r18, r8
    c61c:	0e 94 b3 e4 	call	0x1c966	; 0x1c966 <__udivmodsi4>
    c620:	6b 81       	ldd	r22, Y+3	; 0x03
    c622:	7c 81       	ldd	r23, Y+4	; 0x04
    c624:	8d 81       	ldd	r24, Y+5	; 0x05
    c626:	9e 81       	ldd	r25, Y+6	; 0x06
    c628:	62 17       	cp	r22, r18
    c62a:	73 07       	cpc	r23, r19
    c62c:	84 07       	cpc	r24, r20
    c62e:	95 07       	cpc	r25, r21
    c630:	e8 f0       	brcs	.+58     	; 0xc66c <f_lseek+0x39a>
    c632:	88 27       	eor	r24, r24
    c634:	99 27       	eor	r25, r25
    c636:	dc 01       	movw	r26, r24
    c638:	88 19       	sub	r24, r8
    c63a:	99 09       	sbc	r25, r9
    c63c:	aa 09       	sbc	r26, r10
    c63e:	bb 09       	sbc	r27, r11
    c640:	48 22       	and	r4, r24
    c642:	59 22       	and	r5, r25
    c644:	6a 22       	and	r6, r26
    c646:	7b 22       	and	r7, r27
    c648:	d1 01       	movw	r26, r2
    c64a:	50 96       	adiw	r26, 0x10	; 16
    c64c:	4d 92       	st	X+, r4
    c64e:	5d 92       	st	X+, r5
    c650:	6d 92       	st	X+, r6
    c652:	7c 92       	st	X, r7
    c654:	53 97       	sbiw	r26, 0x13	; 19
    c656:	c4 18       	sub	r12, r4
    c658:	d5 08       	sbc	r13, r5
    c65a:	e6 08       	sbc	r14, r6
    c65c:	f7 08       	sbc	r15, r7
    c65e:	54 96       	adiw	r26, 0x14	; 20
    c660:	4d 91       	ld	r20, X+
    c662:	5d 91       	ld	r21, X+
    c664:	6d 91       	ld	r22, X+
    c666:	7c 91       	ld	r23, X
    c668:	57 97       	sbiw	r26, 0x17	; 23
    c66a:	2b c0       	rjmp	.+86     	; 0xc6c2 <f_lseek+0x3f0>
    c66c:	f1 01       	movw	r30, r2
    c66e:	46 81       	ldd	r20, Z+6	; 0x06
    c670:	57 81       	ldd	r21, Z+7	; 0x07
    c672:	60 85       	ldd	r22, Z+8	; 0x08
    c674:	71 85       	ldd	r23, Z+9	; 0x09
    c676:	41 15       	cp	r20, r1
    c678:	51 05       	cpc	r21, r1
    c67a:	61 05       	cpc	r22, r1
    c67c:	71 05       	cpc	r23, r1
    c67e:	e1 f4       	brne	.+56     	; 0xc6b8 <f_lseek+0x3e6>
    c680:	40 e0       	ldi	r20, 0x00	; 0
    c682:	50 e0       	ldi	r21, 0x00	; 0
    c684:	ba 01       	movw	r22, r20
    c686:	c1 01       	movw	r24, r2
    c688:	0e 94 8b 51 	call	0xa316	; 0xa316 <create_chain>
    c68c:	ab 01       	movw	r20, r22
    c68e:	bc 01       	movw	r22, r24
    c690:	41 30       	cpi	r20, 0x01	; 1
    c692:	51 05       	cpc	r21, r1
    c694:	61 05       	cpc	r22, r1
    c696:	71 05       	cpc	r23, r1
    c698:	09 f4       	brne	.+2      	; 0xc69c <f_lseek+0x3ca>
    c69a:	7d ce       	rjmp	.-774    	; 0xc396 <f_lseek+0xc4>
    c69c:	4f 3f       	cpi	r20, 0xFF	; 255
    c69e:	ff ef       	ldi	r31, 0xFF	; 255
    c6a0:	5f 07       	cpc	r21, r31
    c6a2:	6f 07       	cpc	r22, r31
    c6a4:	7f 07       	cpc	r23, r31
    c6a6:	09 f4       	brne	.+2      	; 0xc6aa <f_lseek+0x3d8>
    c6a8:	80 ce       	rjmp	.-768    	; 0xc3aa <f_lseek+0xd8>
    c6aa:	d1 01       	movw	r26, r2
    c6ac:	16 96       	adiw	r26, 0x06	; 6
    c6ae:	4d 93       	st	X+, r20
    c6b0:	5d 93       	st	X+, r21
    c6b2:	6d 93       	st	X+, r22
    c6b4:	7c 93       	st	X, r23
    c6b6:	19 97       	sbiw	r26, 0x09	; 9
    c6b8:	f1 01       	movw	r30, r2
    c6ba:	44 8b       	std	Z+20, r20	; 0x14
    c6bc:	55 8b       	std	Z+21, r21	; 0x15
    c6be:	66 8b       	std	Z+22, r22	; 0x16
    c6c0:	77 8b       	std	Z+23, r23	; 0x17
    c6c2:	41 15       	cp	r20, r1
    c6c4:	51 05       	cpc	r21, r1
    c6c6:	61 05       	cpc	r22, r1
    c6c8:	71 05       	cpc	r23, r1
    c6ca:	09 f0       	breq	.+2      	; 0xc6ce <f_lseek+0x3fc>
    c6cc:	40 c0       	rjmp	.+128    	; 0xc74e <f_lseek+0x47c>
    c6ce:	c1 2c       	mov	r12, r1
    c6d0:	d1 2c       	mov	r13, r1
    c6d2:	76 01       	movw	r14, r12
    c6d4:	79 c0       	rjmp	.+242    	; 0xc7c8 <f_lseek+0x4f6>
    c6d6:	c8 18       	sub	r12, r8
    c6d8:	d9 08       	sbc	r13, r9
    c6da:	ea 08       	sbc	r14, r10
    c6dc:	fb 08       	sbc	r15, r11
    c6de:	f1 01       	movw	r30, r2
    c6e0:	80 89       	ldd	r24, Z+16	; 0x10
    c6e2:	91 89       	ldd	r25, Z+17	; 0x11
    c6e4:	a2 89       	ldd	r26, Z+18	; 0x12
    c6e6:	b3 89       	ldd	r27, Z+19	; 0x13
    c6e8:	88 0d       	add	r24, r8
    c6ea:	99 1d       	adc	r25, r9
    c6ec:	aa 1d       	adc	r26, r10
    c6ee:	bb 1d       	adc	r27, r11
    c6f0:	80 8b       	std	Z+16, r24	; 0x10
    c6f2:	91 8b       	std	Z+17, r25	; 0x11
    c6f4:	a2 8b       	std	Z+18, r26	; 0x12
    c6f6:	b3 8b       	std	Z+19, r27	; 0x13
    c6f8:	86 85       	ldd	r24, Z+14	; 0x0e
    c6fa:	81 ff       	sbrs	r24, 1
    c6fc:	2f c0       	rjmp	.+94     	; 0xc75c <f_lseek+0x48a>
    c6fe:	c1 01       	movw	r24, r2
    c700:	0e 94 8b 51 	call	0xa316	; 0xa316 <create_chain>
    c704:	ab 01       	movw	r20, r22
    c706:	bc 01       	movw	r22, r24
    c708:	41 15       	cp	r20, r1
    c70a:	51 05       	cpc	r21, r1
    c70c:	61 05       	cpc	r22, r1
    c70e:	71 05       	cpc	r23, r1
    c710:	61 f1       	breq	.+88     	; 0xc76a <f_lseek+0x498>
    c712:	4f 3f       	cpi	r20, 0xFF	; 255
    c714:	bf ef       	ldi	r27, 0xFF	; 255
    c716:	5b 07       	cpc	r21, r27
    c718:	6b 07       	cpc	r22, r27
    c71a:	7b 07       	cpc	r23, r27
    c71c:	09 f4       	brne	.+2      	; 0xc720 <f_lseek+0x44e>
    c71e:	45 ce       	rjmp	.-886    	; 0xc3aa <f_lseek+0xd8>
    c720:	42 30       	cpi	r20, 0x02	; 2
    c722:	51 05       	cpc	r21, r1
    c724:	61 05       	cpc	r22, r1
    c726:	71 05       	cpc	r23, r1
    c728:	08 f4       	brcc	.+2      	; 0xc72c <f_lseek+0x45a>
    c72a:	35 ce       	rjmp	.-918    	; 0xc396 <f_lseek+0xc4>
    c72c:	e9 81       	ldd	r30, Y+1	; 0x01
    c72e:	fa 81       	ldd	r31, Y+2	; 0x02
    c730:	81 8d       	ldd	r24, Z+25	; 0x19
    c732:	92 8d       	ldd	r25, Z+26	; 0x1a
    c734:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c736:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c738:	48 17       	cp	r20, r24
    c73a:	59 07       	cpc	r21, r25
    c73c:	6a 07       	cpc	r22, r26
    c73e:	7b 07       	cpc	r23, r27
    c740:	08 f0       	brcs	.+2      	; 0xc744 <f_lseek+0x472>
    c742:	29 ce       	rjmp	.-942    	; 0xc396 <f_lseek+0xc4>
    c744:	f1 01       	movw	r30, r2
    c746:	44 8b       	std	Z+20, r20	; 0x14
    c748:	55 8b       	std	Z+21, r21	; 0x15
    c74a:	66 8b       	std	Z+22, r22	; 0x16
    c74c:	77 8b       	std	Z+23, r23	; 0x17
    c74e:	8c 14       	cp	r8, r12
    c750:	9d 04       	cpc	r9, r13
    c752:	ae 04       	cpc	r10, r14
    c754:	bf 04       	cpc	r11, r15
    c756:	08 f4       	brcc	.+2      	; 0xc75a <f_lseek+0x488>
    c758:	be cf       	rjmp	.-132    	; 0xc6d6 <f_lseek+0x404>
    c75a:	0a c0       	rjmp	.+20     	; 0xc770 <f_lseek+0x49e>
    c75c:	80 81       	ld	r24, Z
    c75e:	91 81       	ldd	r25, Z+1	; 0x01
    c760:	0e 94 16 50 	call	0xa02c	; 0xa02c <get_fat.isra.10>
    c764:	ab 01       	movw	r20, r22
    c766:	bc 01       	movw	r22, r24
    c768:	d4 cf       	rjmp	.-88     	; 0xc712 <f_lseek+0x440>
    c76a:	c1 2c       	mov	r12, r1
    c76c:	d1 2c       	mov	r13, r1
    c76e:	76 01       	movw	r14, r12
    c770:	f1 01       	movw	r30, r2
    c772:	80 89       	ldd	r24, Z+16	; 0x10
    c774:	91 89       	ldd	r25, Z+17	; 0x11
    c776:	a2 89       	ldd	r26, Z+18	; 0x12
    c778:	b3 89       	ldd	r27, Z+19	; 0x13
    c77a:	8c 0d       	add	r24, r12
    c77c:	9d 1d       	adc	r25, r13
    c77e:	ae 1d       	adc	r26, r14
    c780:	bf 1d       	adc	r27, r15
    c782:	80 8b       	std	Z+16, r24	; 0x10
    c784:	91 8b       	std	Z+17, r25	; 0x11
    c786:	a2 8b       	std	Z+18, r26	; 0x12
    c788:	b3 8b       	std	Z+19, r27	; 0x13
    c78a:	d7 01       	movw	r26, r14
    c78c:	c6 01       	movw	r24, r12
    c78e:	91 70       	andi	r25, 0x01	; 1
    c790:	aa 27       	eor	r26, r26
    c792:	bb 27       	eor	r27, r27
    c794:	89 2b       	or	r24, r25
    c796:	8a 2b       	or	r24, r26
    c798:	8b 2b       	or	r24, r27
    c79a:	09 f4       	brne	.+2      	; 0xc79e <f_lseek+0x4cc>
    c79c:	98 cf       	rjmp	.-208    	; 0xc6ce <f_lseek+0x3fc>
    c79e:	89 81       	ldd	r24, Y+1	; 0x01
    c7a0:	9a 81       	ldd	r25, Y+2	; 0x02
    c7a2:	0e 94 0f 48 	call	0x901e	; 0x901e <clst2sect>
    c7a6:	61 15       	cp	r22, r1
    c7a8:	71 05       	cpc	r23, r1
    c7aa:	81 05       	cpc	r24, r1
    c7ac:	91 05       	cpc	r25, r1
    c7ae:	09 f4       	brne	.+2      	; 0xc7b2 <f_lseek+0x4e0>
    c7b0:	f2 cd       	rjmp	.-1052   	; 0xc396 <f_lseek+0xc4>
    c7b2:	29 e0       	ldi	r18, 0x09	; 9
    c7b4:	f6 94       	lsr	r15
    c7b6:	e7 94       	ror	r14
    c7b8:	d7 94       	ror	r13
    c7ba:	c7 94       	ror	r12
    c7bc:	2a 95       	dec	r18
    c7be:	d1 f7       	brne	.-12     	; 0xc7b4 <f_lseek+0x4e2>
    c7c0:	c6 0e       	add	r12, r22
    c7c2:	d7 1e       	adc	r13, r23
    c7c4:	e8 1e       	adc	r14, r24
    c7c6:	f9 1e       	adc	r15, r25
    c7c8:	f1 01       	movw	r30, r2
    c7ca:	80 89       	ldd	r24, Z+16	; 0x10
    c7cc:	91 89       	ldd	r25, Z+17	; 0x11
    c7ce:	a2 89       	ldd	r26, Z+18	; 0x12
    c7d0:	b3 89       	ldd	r27, Z+19	; 0x13
    c7d2:	42 85       	ldd	r20, Z+10	; 0x0a
    c7d4:	53 85       	ldd	r21, Z+11	; 0x0b
    c7d6:	64 85       	ldd	r22, Z+12	; 0x0c
    c7d8:	75 85       	ldd	r23, Z+13	; 0x0d
    c7da:	48 17       	cp	r20, r24
    c7dc:	59 07       	cpc	r21, r25
    c7de:	6a 07       	cpc	r22, r26
    c7e0:	7b 07       	cpc	r23, r27
    c7e2:	38 f4       	brcc	.+14     	; 0xc7f2 <f_lseek+0x520>
    c7e4:	82 87       	std	Z+10, r24	; 0x0a
    c7e6:	93 87       	std	Z+11, r25	; 0x0b
    c7e8:	a4 87       	std	Z+12, r26	; 0x0c
    c7ea:	b5 87       	std	Z+13, r27	; 0x0d
    c7ec:	26 85       	ldd	r18, Z+14	; 0x0e
    c7ee:	20 64       	ori	r18, 0x40	; 64
    c7f0:	26 87       	std	Z+14, r18	; 0x0e
    c7f2:	91 70       	andi	r25, 0x01	; 1
    c7f4:	aa 27       	eor	r26, r26
    c7f6:	bb 27       	eor	r27, r27
    c7f8:	89 2b       	or	r24, r25
    c7fa:	8a 2b       	or	r24, r26
    c7fc:	8b 2b       	or	r24, r27
    c7fe:	a9 f1       	breq	.+106    	; 0xc86a <f_lseek+0x598>
    c800:	d1 01       	movw	r26, r2
    c802:	58 96       	adiw	r26, 0x18	; 24
    c804:	2d 91       	ld	r18, X+
    c806:	3d 91       	ld	r19, X+
    c808:	4d 91       	ld	r20, X+
    c80a:	5c 91       	ld	r21, X
    c80c:	5b 97       	sbiw	r26, 0x1b	; 27
    c80e:	2c 15       	cp	r18, r12
    c810:	3d 05       	cpc	r19, r13
    c812:	4e 05       	cpc	r20, r14
    c814:	5f 05       	cpc	r21, r15
    c816:	49 f1       	breq	.+82     	; 0xc86a <f_lseek+0x598>
    c818:	1e 96       	adiw	r26, 0x0e	; 14
    c81a:	8c 91       	ld	r24, X
    c81c:	f1 01       	movw	r30, r2
    c81e:	b4 96       	adiw	r30, 0x24	; 36
    c820:	5f 01       	movw	r10, r30
    c822:	87 ff       	sbrs	r24, 7
    c824:	11 c0       	rjmp	.+34     	; 0xc848 <f_lseek+0x576>
    c826:	e9 81       	ldd	r30, Y+1	; 0x01
    c828:	fa 81       	ldd	r31, Y+2	; 0x02
    c82a:	01 e0       	ldi	r16, 0x01	; 1
    c82c:	10 e0       	ldi	r17, 0x00	; 0
    c82e:	b5 01       	movw	r22, r10
    c830:	81 81       	ldd	r24, Z+1	; 0x01
    c832:	cb d6       	rcall	.+3478   	; 0xd5ca <disk_write>
    c834:	89 2b       	or	r24, r25
    c836:	09 f0       	breq	.+2      	; 0xc83a <f_lseek+0x568>
    c838:	b8 cd       	rjmp	.-1168   	; 0xc3aa <f_lseek+0xd8>
    c83a:	d1 01       	movw	r26, r2
    c83c:	1e 96       	adiw	r26, 0x0e	; 14
    c83e:	8c 91       	ld	r24, X
    c840:	1e 97       	sbiw	r26, 0x0e	; 14
    c842:	8f 77       	andi	r24, 0x7F	; 127
    c844:	1e 96       	adiw	r26, 0x0e	; 14
    c846:	8c 93       	st	X, r24
    c848:	e9 81       	ldd	r30, Y+1	; 0x01
    c84a:	fa 81       	ldd	r31, Y+2	; 0x02
    c84c:	01 e0       	ldi	r16, 0x01	; 1
    c84e:	10 e0       	ldi	r17, 0x00	; 0
    c850:	a7 01       	movw	r20, r14
    c852:	96 01       	movw	r18, r12
    c854:	b5 01       	movw	r22, r10
    c856:	81 81       	ldd	r24, Z+1	; 0x01
    c858:	a8 d6       	rcall	.+3408   	; 0xd5aa <disk_read>
    c85a:	89 2b       	or	r24, r25
    c85c:	09 f0       	breq	.+2      	; 0xc860 <f_lseek+0x58e>
    c85e:	a5 cd       	rjmp	.-1206   	; 0xc3aa <f_lseek+0xd8>
    c860:	f1 01       	movw	r30, r2
    c862:	c0 8e       	std	Z+24, r12	; 0x18
    c864:	d1 8e       	std	Z+25, r13	; 0x19
    c866:	e2 8e       	std	Z+26, r14	; 0x1a
    c868:	f3 8e       	std	Z+27, r15	; 0x1b
    c86a:	80 e0       	ldi	r24, 0x00	; 0
    c86c:	a2 cd       	rjmp	.-1212   	; 0xc3b2 <f_lseek+0xe0>
    c86e:	81 e1       	ldi	r24, 0x11	; 17
    c870:	a0 cd       	rjmp	.-1216   	; 0xc3b2 <f_lseek+0xe0>
    c872:	80 e0       	ldi	r24, 0x00	; 0
    c874:	90 e0       	ldi	r25, 0x00	; 0
    c876:	dc 01       	movw	r26, r24
    c878:	c1 2c       	mov	r12, r1
    c87a:	d1 2c       	mov	r13, r1
    c87c:	76 01       	movw	r14, r12
    c87e:	b9 cf       	rjmp	.-142    	; 0xc7f2 <f_lseek+0x520>
    c880:	2a 96       	adiw	r28, 0x0a	; 10
    c882:	e2 e1       	ldi	r30, 0x12	; 18
    c884:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0000c888 <f_opendir>:
    c888:	a4 e0       	ldi	r26, 0x04	; 4
    c88a:	b0 e0       	ldi	r27, 0x00	; 0
    c88c:	ea e4       	ldi	r30, 0x4A	; 74
    c88e:	f4 e6       	ldi	r31, 0x64	; 100
    c890:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    c894:	7c 83       	std	Y+4, r23	; 0x04
    c896:	6b 83       	std	Y+3, r22	; 0x03
    c898:	00 97       	sbiw	r24, 0x00	; 0
    c89a:	09 f4       	brne	.+2      	; 0xc89e <f_opendir+0x16>
    c89c:	48 c0       	rjmp	.+144    	; 0xc92e <f_opendir+0xa6>
    c89e:	8c 01       	movw	r16, r24
    c8a0:	40 e0       	ldi	r20, 0x00	; 0
    c8a2:	be 01       	movw	r22, r28
    c8a4:	6f 5f       	subi	r22, 0xFF	; 255
    c8a6:	7f 4f       	sbci	r23, 0xFF	; 255
    c8a8:	ce 01       	movw	r24, r28
    c8aa:	03 96       	adiw	r24, 0x03	; 3
    c8ac:	0e 94 b5 4c 	call	0x996a	; 0x996a <mount_volume>
    c8b0:	7c 01       	movw	r14, r24
    c8b2:	89 2b       	or	r24, r25
    c8b4:	b9 f5       	brne	.+110    	; 0xc924 <f_opendir+0x9c>
    c8b6:	89 81       	ldd	r24, Y+1	; 0x01
    c8b8:	9a 81       	ldd	r25, Y+2	; 0x02
    c8ba:	f8 01       	movw	r30, r16
    c8bc:	91 83       	std	Z+1, r25	; 0x01
    c8be:	80 83       	st	Z, r24
    c8c0:	80 e0       	ldi	r24, 0x00	; 0
    c8c2:	92 e0       	ldi	r25, 0x02	; 2
    c8c4:	b6 d5       	rcall	.+2924   	; 0xd432 <ff_memalloc>
    c8c6:	6c 01       	movw	r12, r24
    c8c8:	00 97       	sbiw	r24, 0x00	; 0
    c8ca:	99 f1       	breq	.+102    	; 0xc932 <f_opendir+0xaa>
    c8cc:	e9 81       	ldd	r30, Y+1	; 0x01
    c8ce:	fa 81       	ldd	r31, Y+2	; 0x02
    c8d0:	94 87       	std	Z+12, r25	; 0x0c
    c8d2:	83 87       	std	Z+11, r24	; 0x0b
    c8d4:	6b 81       	ldd	r22, Y+3	; 0x03
    c8d6:	7c 81       	ldd	r23, Y+4	; 0x04
    c8d8:	c8 01       	movw	r24, r16
    c8da:	0e 94 30 58 	call	0xb060	; 0xb060 <follow_path>
    c8de:	7c 01       	movw	r14, r24
    c8e0:	89 2b       	or	r24, r25
    c8e2:	b9 f4       	brne	.+46     	; 0xc912 <f_opendir+0x8a>
    c8e4:	f8 01       	movw	r30, r16
    c8e6:	87 a1       	ldd	r24, Z+39	; 0x27
    c8e8:	87 fd       	sbrc	r24, 7
    c8ea:	28 c0       	rjmp	.+80     	; 0xc93c <f_opendir+0xb4>
    c8ec:	84 81       	ldd	r24, Z+4	; 0x04
    c8ee:	84 ff       	sbrs	r24, 4
    c8f0:	0d c0       	rjmp	.+26     	; 0xc90c <f_opendir+0x84>
    c8f2:	62 8d       	ldd	r22, Z+26	; 0x1a
    c8f4:	73 8d       	ldd	r23, Z+27	; 0x1b
    c8f6:	e9 81       	ldd	r30, Y+1	; 0x01
    c8f8:	fa 81       	ldd	r31, Y+2	; 0x02
    c8fa:	80 81       	ld	r24, Z
    c8fc:	0e 94 ab 4a 	call	0x9556	; 0x9556 <ld_clust.isra.4>
    c900:	f8 01       	movw	r30, r16
    c902:	66 83       	std	Z+6, r22	; 0x06
    c904:	77 83       	std	Z+7, r23	; 0x07
    c906:	80 87       	std	Z+8, r24	; 0x08
    c908:	91 87       	std	Z+9, r25	; 0x09
    c90a:	18 c0       	rjmp	.+48     	; 0xc93c <f_opendir+0xb4>
    c90c:	95 e0       	ldi	r25, 0x05	; 5
    c90e:	e9 2e       	mov	r14, r25
    c910:	f1 2c       	mov	r15, r1
    c912:	c6 01       	movw	r24, r12
    c914:	91 d5       	rcall	.+2850   	; 0xd438 <ff_memfree>
    c916:	f4 e0       	ldi	r31, 0x04	; 4
    c918:	ef 16       	cp	r14, r31
    c91a:	f1 04       	cpc	r15, r1
    c91c:	f1 f0       	breq	.+60     	; 0xc95a <f_opendir+0xd2>
    c91e:	e1 14       	cp	r14, r1
    c920:	f1 04       	cpc	r15, r1
    c922:	49 f0       	breq	.+18     	; 0xc936 <f_opendir+0xae>
    c924:	f8 01       	movw	r30, r16
    c926:	11 82       	std	Z+1, r1	; 0x01
    c928:	10 82       	st	Z, r1
    c92a:	c7 01       	movw	r24, r14
    c92c:	1a c0       	rjmp	.+52     	; 0xc962 <f_opendir+0xda>
    c92e:	89 e0       	ldi	r24, 0x09	; 9
    c930:	03 c0       	rjmp	.+6      	; 0xc938 <f_opendir+0xb0>
    c932:	81 e1       	ldi	r24, 0x11	; 17
    c934:	01 c0       	rjmp	.+2      	; 0xc938 <f_opendir+0xb0>
    c936:	80 e0       	ldi	r24, 0x00	; 0
    c938:	90 e0       	ldi	r25, 0x00	; 0
    c93a:	13 c0       	rjmp	.+38     	; 0xc962 <f_opendir+0xda>
    c93c:	e9 81       	ldd	r30, Y+1	; 0x01
    c93e:	fa 81       	ldd	r31, Y+2	; 0x02
    c940:	85 81       	ldd	r24, Z+5	; 0x05
    c942:	96 81       	ldd	r25, Z+6	; 0x06
    c944:	f8 01       	movw	r30, r16
    c946:	93 83       	std	Z+3, r25	; 0x03
    c948:	82 83       	std	Z+2, r24	; 0x02
    c94a:	40 e0       	ldi	r20, 0x00	; 0
    c94c:	50 e0       	ldi	r21, 0x00	; 0
    c94e:	ba 01       	movw	r22, r20
    c950:	c8 01       	movw	r24, r16
    c952:	0e 94 ca 50 	call	0xa194	; 0xa194 <dir_sdi>
    c956:	7c 01       	movw	r14, r24
    c958:	dc cf       	rjmp	.-72     	; 0xc912 <f_opendir+0x8a>
    c95a:	85 e0       	ldi	r24, 0x05	; 5
    c95c:	e8 2e       	mov	r14, r24
    c95e:	f1 2c       	mov	r15, r1
    c960:	e1 cf       	rjmp	.-62     	; 0xc924 <f_opendir+0x9c>
    c962:	24 96       	adiw	r28, 0x04	; 4
    c964:	e8 e0       	ldi	r30, 0x08	; 8
    c966:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

0000c96a <f_closedir>:
    c96a:	a2 e0       	ldi	r26, 0x02	; 2
    c96c:	b0 e0       	ldi	r27, 0x00	; 0
    c96e:	eb eb       	ldi	r30, 0xBB	; 187
    c970:	f4 e6       	ldi	r31, 0x64	; 100
    c972:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__prologue_saves__+0x1c>
    c976:	8c 01       	movw	r16, r24
    c978:	be 01       	movw	r22, r28
    c97a:	6f 5f       	subi	r22, 0xFF	; 255
    c97c:	7f 4f       	sbci	r23, 0xFF	; 255
    c97e:	0e 94 ae 48 	call	0x915c	; 0x915c <validate>
    c982:	00 97       	sbiw	r24, 0x00	; 0
    c984:	19 f4       	brne	.+6      	; 0xc98c <f_closedir+0x22>
    c986:	f8 01       	movw	r30, r16
    c988:	11 82       	std	Z+1, r1	; 0x01
    c98a:	10 82       	st	Z, r1
    c98c:	22 96       	adiw	r28, 0x02	; 2
    c98e:	e4 e0       	ldi	r30, 0x04	; 4
    c990:	0c 94 5f e5 	jmp	0x1cabe	; 0x1cabe <__epilogue_restores__+0x1c>

0000c994 <f_readdir>:
    c994:	a2 e0       	ldi	r26, 0x02	; 2
    c996:	b0 e0       	ldi	r27, 0x00	; 0
    c998:	e0 ed       	ldi	r30, 0xD0	; 208
    c99a:	f4 e6       	ldi	r31, 0x64	; 100
    c99c:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__prologue_saves__+0x10>
    c9a0:	7c 01       	movw	r14, r24
    c9a2:	5b 01       	movw	r10, r22
    c9a4:	be 01       	movw	r22, r28
    c9a6:	6f 5f       	subi	r22, 0xFF	; 255
    c9a8:	7f 4f       	sbci	r23, 0xFF	; 255
    c9aa:	0e 94 ae 48 	call	0x915c	; 0x915c <validate>
    c9ae:	00 97       	sbiw	r24, 0x00	; 0
    c9b0:	89 f5       	brne	.+98     	; 0xca14 <f_readdir+0x80>
    c9b2:	a1 14       	cp	r10, r1
    c9b4:	b1 04       	cpc	r11, r1
    c9b6:	39 f4       	brne	.+14     	; 0xc9c6 <f_readdir+0x32>
    c9b8:	40 e0       	ldi	r20, 0x00	; 0
    c9ba:	50 e0       	ldi	r21, 0x00	; 0
    c9bc:	ba 01       	movw	r22, r20
    c9be:	c7 01       	movw	r24, r14
    c9c0:	0e 94 ca 50 	call	0xa194	; 0xa194 <dir_sdi>
    c9c4:	27 c0       	rjmp	.+78     	; 0xca14 <f_readdir+0x80>
    c9c6:	80 e0       	ldi	r24, 0x00	; 0
    c9c8:	92 e0       	ldi	r25, 0x02	; 2
    c9ca:	33 d5       	rcall	.+2662   	; 0xd432 <ff_memalloc>
    c9cc:	6c 01       	movw	r12, r24
    c9ce:	00 97       	sbiw	r24, 0x00	; 0
    c9d0:	f9 f0       	breq	.+62     	; 0xca10 <f_readdir+0x7c>
    c9d2:	e9 81       	ldd	r30, Y+1	; 0x01
    c9d4:	fa 81       	ldd	r31, Y+2	; 0x02
    c9d6:	94 87       	std	Z+12, r25	; 0x0c
    c9d8:	83 87       	std	Z+11, r24	; 0x0b
    c9da:	60 e0       	ldi	r22, 0x00	; 0
    c9dc:	70 e0       	ldi	r23, 0x00	; 0
    c9de:	c7 01       	movw	r24, r14
    c9e0:	0e 94 64 54 	call	0xa8c8	; 0xa8c8 <dir_read>
    c9e4:	8c 01       	movw	r16, r24
    c9e6:	8b 7f       	andi	r24, 0xFB	; 251
    c9e8:	89 2b       	or	r24, r25
    c9ea:	71 f4       	brne	.+28     	; 0xca08 <f_readdir+0x74>
    c9ec:	b5 01       	movw	r22, r10
    c9ee:	c7 01       	movw	r24, r14
    c9f0:	0e 94 92 49 	call	0x9324	; 0x9324 <get_fileinfo>
    c9f4:	60 e0       	ldi	r22, 0x00	; 0
    c9f6:	70 e0       	ldi	r23, 0x00	; 0
    c9f8:	c7 01       	movw	r24, r14
    c9fa:	0e 94 42 53 	call	0xa684	; 0xa684 <dir_next>
    c9fe:	8c 01       	movw	r16, r24
    ca00:	04 97       	sbiw	r24, 0x04	; 4
    ca02:	11 f4       	brne	.+4      	; 0xca08 <f_readdir+0x74>
    ca04:	00 e0       	ldi	r16, 0x00	; 0
    ca06:	10 e0       	ldi	r17, 0x00	; 0
    ca08:	c6 01       	movw	r24, r12
    ca0a:	16 d5       	rcall	.+2604   	; 0xd438 <ff_memfree>
    ca0c:	c8 01       	movw	r24, r16
    ca0e:	02 c0       	rjmp	.+4      	; 0xca14 <f_readdir+0x80>
    ca10:	81 e1       	ldi	r24, 0x11	; 17
    ca12:	90 e0       	ldi	r25, 0x00	; 0
    ca14:	22 96       	adiw	r28, 0x02	; 2
    ca16:	ea e0       	ldi	r30, 0x0A	; 10
    ca18:	0c 94 59 e5 	jmp	0x1cab2	; 0x1cab2 <__epilogue_restores__+0x10>

0000ca1c <f_stat>:
    ca1c:	a0 e3       	ldi	r26, 0x30	; 48
    ca1e:	b0 e0       	ldi	r27, 0x00	; 0
    ca20:	e4 e1       	ldi	r30, 0x14	; 20
    ca22:	f5 e6       	ldi	r31, 0x65	; 101
    ca24:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    ca28:	98 ab       	std	Y+48, r25	; 0x30
    ca2a:	8f a7       	std	Y+47, r24	; 0x2f
    ca2c:	6b 01       	movw	r12, r22
    ca2e:	40 e0       	ldi	r20, 0x00	; 0
    ca30:	be 01       	movw	r22, r28
    ca32:	6f 5f       	subi	r22, 0xFF	; 255
    ca34:	7f 4f       	sbci	r23, 0xFF	; 255
    ca36:	ce 01       	movw	r24, r28
    ca38:	8f 96       	adiw	r24, 0x2f	; 47
    ca3a:	0e 94 b5 4c 	call	0x996a	; 0x996a <mount_volume>
    ca3e:	00 97       	sbiw	r24, 0x00	; 0
    ca40:	39 f5       	brne	.+78     	; 0xca90 <f_stat+0x74>
    ca42:	80 e0       	ldi	r24, 0x00	; 0
    ca44:	92 e0       	ldi	r25, 0x02	; 2
    ca46:	f5 d4       	rcall	.+2538   	; 0xd432 <ff_memalloc>
    ca48:	7c 01       	movw	r14, r24
    ca4a:	00 97       	sbiw	r24, 0x00	; 0
    ca4c:	f9 f0       	breq	.+62     	; 0xca8c <f_stat+0x70>
    ca4e:	e9 81       	ldd	r30, Y+1	; 0x01
    ca50:	fa 81       	ldd	r31, Y+2	; 0x02
    ca52:	94 87       	std	Z+12, r25	; 0x0c
    ca54:	83 87       	std	Z+11, r24	; 0x0b
    ca56:	6f a5       	ldd	r22, Y+47	; 0x2f
    ca58:	78 a9       	ldd	r23, Y+48	; 0x30
    ca5a:	ce 01       	movw	r24, r28
    ca5c:	01 96       	adiw	r24, 0x01	; 1
    ca5e:	0e 94 30 58 	call	0xb060	; 0xb060 <follow_path>
    ca62:	8c 01       	movw	r16, r24
    ca64:	89 2b       	or	r24, r25
    ca66:	71 f4       	brne	.+28     	; 0xca84 <f_stat+0x68>
    ca68:	88 a5       	ldd	r24, Y+40	; 0x28
    ca6a:	87 fd       	sbrc	r24, 7
    ca6c:	09 c0       	rjmp	.+18     	; 0xca80 <f_stat+0x64>
    ca6e:	c1 14       	cp	r12, r1
    ca70:	d1 04       	cpc	r13, r1
    ca72:	41 f0       	breq	.+16     	; 0xca84 <f_stat+0x68>
    ca74:	b6 01       	movw	r22, r12
    ca76:	ce 01       	movw	r24, r28
    ca78:	01 96       	adiw	r24, 0x01	; 1
    ca7a:	0e 94 92 49 	call	0x9324	; 0x9324 <get_fileinfo>
    ca7e:	02 c0       	rjmp	.+4      	; 0xca84 <f_stat+0x68>
    ca80:	06 e0       	ldi	r16, 0x06	; 6
    ca82:	10 e0       	ldi	r17, 0x00	; 0
    ca84:	c7 01       	movw	r24, r14
    ca86:	d8 d4       	rcall	.+2480   	; 0xd438 <ff_memfree>
    ca88:	c8 01       	movw	r24, r16
    ca8a:	02 c0       	rjmp	.+4      	; 0xca90 <f_stat+0x74>
    ca8c:	81 e1       	ldi	r24, 0x11	; 17
    ca8e:	90 e0       	ldi	r25, 0x00	; 0
    ca90:	e0 96       	adiw	r28, 0x30	; 48
    ca92:	e8 e0       	ldi	r30, 0x08	; 8
    ca94:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

0000ca98 <f_getfree>:
    ca98:	aa e0       	ldi	r26, 0x0A	; 10
    ca9a:	b0 e0       	ldi	r27, 0x00	; 0
    ca9c:	e2 e5       	ldi	r30, 0x52	; 82
    ca9e:	f5 e6       	ldi	r31, 0x65	; 101
    caa0:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    caa4:	9c 83       	std	Y+4, r25	; 0x04
    caa6:	8b 83       	std	Y+3, r24	; 0x03
    caa8:	7e 83       	std	Y+6, r23	; 0x06
    caaa:	6d 83       	std	Y+5, r22	; 0x05
    caac:	7a 01       	movw	r14, r20
    caae:	40 e0       	ldi	r20, 0x00	; 0
    cab0:	be 01       	movw	r22, r28
    cab2:	6f 5f       	subi	r22, 0xFF	; 255
    cab4:	7f 4f       	sbci	r23, 0xFF	; 255
    cab6:	ce 01       	movw	r24, r28
    cab8:	03 96       	adiw	r24, 0x03	; 3
    caba:	0e 94 b5 4c 	call	0x996a	; 0x996a <mount_volume>
    cabe:	8c 01       	movw	r16, r24
    cac0:	89 2b       	or	r24, r25
    cac2:	09 f0       	breq	.+2      	; 0xcac6 <f_getfree+0x2e>
    cac4:	c3 c0       	rjmp	.+390    	; 0xcc4c <f_getfree+0x1b4>
    cac6:	69 80       	ldd	r6, Y+1	; 0x01
    cac8:	7a 80       	ldd	r7, Y+2	; 0x02
    caca:	d7 01       	movw	r26, r14
    cacc:	6d 92       	st	X+, r6
    cace:	7c 92       	st	X, r7
    cad0:	f3 01       	movw	r30, r6
    cad2:	81 89       	ldd	r24, Z+17	; 0x11
    cad4:	92 89       	ldd	r25, Z+18	; 0x12
    cad6:	a3 89       	ldd	r26, Z+19	; 0x13
    cad8:	b4 89       	ldd	r27, Z+20	; 0x14
    cada:	81 8c       	ldd	r8, Z+25	; 0x19
    cadc:	92 8c       	ldd	r9, Z+26	; 0x1a
    cade:	a3 8c       	ldd	r10, Z+27	; 0x1b
    cae0:	b4 8c       	ldd	r11, Z+28	; 0x1c
    cae2:	b5 01       	movw	r22, r10
    cae4:	a4 01       	movw	r20, r8
    cae6:	42 50       	subi	r20, 0x02	; 2
    cae8:	51 09       	sbc	r21, r1
    caea:	61 09       	sbc	r22, r1
    caec:	71 09       	sbc	r23, r1
    caee:	48 17       	cp	r20, r24
    caf0:	59 07       	cpc	r21, r25
    caf2:	6a 07       	cpc	r22, r26
    caf4:	7b 07       	cpc	r23, r27
    caf6:	38 f0       	brcs	.+14     	; 0xcb06 <f_getfree+0x6e>
    caf8:	ed 81       	ldd	r30, Y+5	; 0x05
    cafa:	fe 81       	ldd	r31, Y+6	; 0x06
    cafc:	80 83       	st	Z, r24
    cafe:	91 83       	std	Z+1, r25	; 0x01
    cb00:	a2 83       	std	Z+2, r26	; 0x02
    cb02:	b3 83       	std	Z+3, r27	; 0x03
    cb04:	a3 c0       	rjmp	.+326    	; 0xcc4c <f_getfree+0x1b4>
    cb06:	80 81       	ld	r24, Z
    cb08:	81 30       	cpi	r24, 0x01	; 1
    cb0a:	a1 f5       	brne	.+104    	; 0xcb74 <f_getfree+0xdc>
    cb0c:	82 e0       	ldi	r24, 0x02	; 2
    cb0e:	88 2e       	mov	r8, r24
    cb10:	91 2c       	mov	r9, r1
    cb12:	a1 2c       	mov	r10, r1
    cb14:	b1 2c       	mov	r11, r1
    cb16:	c1 2c       	mov	r12, r1
    cb18:	d1 2c       	mov	r13, r1
    cb1a:	76 01       	movw	r14, r12
    cb1c:	b5 01       	movw	r22, r10
    cb1e:	a4 01       	movw	r20, r8
    cb20:	c3 01       	movw	r24, r6
    cb22:	0e 94 16 50 	call	0xa02c	; 0xa02c <get_fat.isra.10>
    cb26:	6f 3f       	cpi	r22, 0xFF	; 255
    cb28:	bf ef       	ldi	r27, 0xFF	; 255
    cb2a:	7b 07       	cpc	r23, r27
    cb2c:	8b 07       	cpc	r24, r27
    cb2e:	9b 07       	cpc	r25, r27
    cb30:	09 f4       	brne	.+2      	; 0xcb34 <f_getfree+0x9c>
    cb32:	75 c0       	rjmp	.+234    	; 0xcc1e <f_getfree+0x186>
    cb34:	61 30       	cpi	r22, 0x01	; 1
    cb36:	71 05       	cpc	r23, r1
    cb38:	81 05       	cpc	r24, r1
    cb3a:	91 05       	cpc	r25, r1
    cb3c:	09 f4       	brne	.+2      	; 0xcb40 <f_getfree+0xa8>
    cb3e:	72 c0       	rjmp	.+228    	; 0xcc24 <f_getfree+0x18c>
    cb40:	67 2b       	or	r22, r23
    cb42:	68 2b       	or	r22, r24
    cb44:	69 2b       	or	r22, r25
    cb46:	29 f4       	brne	.+10     	; 0xcb52 <f_getfree+0xba>
    cb48:	ef ef       	ldi	r30, 0xFF	; 255
    cb4a:	ce 1a       	sub	r12, r30
    cb4c:	de 0a       	sbc	r13, r30
    cb4e:	ee 0a       	sbc	r14, r30
    cb50:	fe 0a       	sbc	r15, r30
    cb52:	ff ef       	ldi	r31, 0xFF	; 255
    cb54:	8f 1a       	sub	r8, r31
    cb56:	9f 0a       	sbc	r9, r31
    cb58:	af 0a       	sbc	r10, r31
    cb5a:	bf 0a       	sbc	r11, r31
    cb5c:	e9 81       	ldd	r30, Y+1	; 0x01
    cb5e:	fa 81       	ldd	r31, Y+2	; 0x02
    cb60:	81 8d       	ldd	r24, Z+25	; 0x19
    cb62:	92 8d       	ldd	r25, Z+26	; 0x1a
    cb64:	a3 8d       	ldd	r26, Z+27	; 0x1b
    cb66:	b4 8d       	ldd	r27, Z+28	; 0x1c
    cb68:	88 16       	cp	r8, r24
    cb6a:	99 06       	cpc	r9, r25
    cb6c:	aa 06       	cpc	r10, r26
    cb6e:	bb 06       	cpc	r11, r27
    cb70:	a8 f2       	brcs	.-86     	; 0xcb1c <f_getfree+0x84>
    cb72:	5c c0       	rjmp	.+184    	; 0xcc2c <f_getfree+0x194>
    cb74:	45 a0       	ldd	r4, Z+37	; 0x25
    cb76:	56 a0       	ldd	r5, Z+38	; 0x26
    cb78:	67 a0       	ldd	r6, Z+39	; 0x27
    cb7a:	70 a4       	ldd	r7, Z+40	; 0x28
    cb7c:	21 2c       	mov	r2, r1
    cb7e:	31 2c       	mov	r3, r1
    cb80:	c1 2c       	mov	r12, r1
    cb82:	d1 2c       	mov	r13, r1
    cb84:	76 01       	movw	r14, r12
    cb86:	21 14       	cp	r2, r1
    cb88:	31 04       	cpc	r3, r1
    cb8a:	b1 f4       	brne	.+44     	; 0xcbb8 <f_getfree+0x120>
    cb8c:	d3 01       	movw	r26, r6
    cb8e:	c2 01       	movw	r24, r4
    cb90:	01 96       	adiw	r24, 0x01	; 1
    cb92:	a1 1d       	adc	r26, r1
    cb94:	b1 1d       	adc	r27, r1
    cb96:	8f 83       	std	Y+7, r24	; 0x07
    cb98:	98 87       	std	Y+8, r25	; 0x08
    cb9a:	a9 87       	std	Y+9, r26	; 0x09
    cb9c:	ba 87       	std	Y+10, r27	; 0x0a
    cb9e:	b3 01       	movw	r22, r6
    cba0:	a2 01       	movw	r20, r4
    cba2:	89 81       	ldd	r24, Y+1	; 0x01
    cba4:	9a 81       	ldd	r25, Y+2	; 0x02
    cba6:	0e 94 3a 4c 	call	0x9874	; 0x9874 <move_window>
    cbaa:	00 97       	sbiw	r24, 0x00	; 0
    cbac:	09 f0       	breq	.+2      	; 0xcbb0 <f_getfree+0x118>
    cbae:	3d c0       	rjmp	.+122    	; 0xcc2a <f_getfree+0x192>
    cbb0:	4f 80       	ldd	r4, Y+7	; 0x07
    cbb2:	58 84       	ldd	r5, Y+8	; 0x08
    cbb4:	69 84       	ldd	r6, Y+9	; 0x09
    cbb6:	7a 84       	ldd	r7, Y+10	; 0x0a
    cbb8:	e9 81       	ldd	r30, Y+1	; 0x01
    cbba:	fa 81       	ldd	r31, Y+2	; 0x02
    cbbc:	80 81       	ld	r24, Z
    cbbe:	82 30       	cpi	r24, 0x02	; 2
    cbc0:	79 f4       	brne	.+30     	; 0xcbe0 <f_getfree+0x148>
    cbc2:	e2 0d       	add	r30, r2
    cbc4:	f3 1d       	adc	r31, r3
    cbc6:	85 a9       	ldd	r24, Z+53	; 0x35
    cbc8:	96 a9       	ldd	r25, Z+54	; 0x36
    cbca:	89 2b       	or	r24, r25
    cbcc:	29 f4       	brne	.+10     	; 0xcbd8 <f_getfree+0x140>
    cbce:	9f ef       	ldi	r25, 0xFF	; 255
    cbd0:	c9 1a       	sub	r12, r25
    cbd2:	d9 0a       	sbc	r13, r25
    cbd4:	e9 0a       	sbc	r14, r25
    cbd6:	f9 0a       	sbc	r15, r25
    cbd8:	a2 e0       	ldi	r26, 0x02	; 2
    cbda:	2a 0e       	add	r2, r26
    cbdc:	31 1c       	adc	r3, r1
    cbde:	15 c0       	rjmp	.+42     	; 0xcc0a <f_getfree+0x172>
    cbe0:	cf 01       	movw	r24, r30
    cbe2:	c5 96       	adiw	r24, 0x35	; 53
    cbe4:	82 0d       	add	r24, r2
    cbe6:	93 1d       	adc	r25, r3
    cbe8:	0e 94 56 47 	call	0x8eac	; 0x8eac <ld_dword>
    cbec:	dc 01       	movw	r26, r24
    cbee:	cb 01       	movw	r24, r22
    cbf0:	bf 70       	andi	r27, 0x0F	; 15
    cbf2:	89 2b       	or	r24, r25
    cbf4:	8a 2b       	or	r24, r26
    cbf6:	8b 2b       	or	r24, r27
    cbf8:	29 f4       	brne	.+10     	; 0xcc04 <f_getfree+0x16c>
    cbfa:	bf ef       	ldi	r27, 0xFF	; 255
    cbfc:	cb 1a       	sub	r12, r27
    cbfe:	db 0a       	sbc	r13, r27
    cc00:	eb 0a       	sbc	r14, r27
    cc02:	fb 0a       	sbc	r15, r27
    cc04:	e4 e0       	ldi	r30, 0x04	; 4
    cc06:	2e 0e       	add	r2, r30
    cc08:	31 1c       	adc	r3, r1
    cc0a:	f1 e0       	ldi	r31, 0x01	; 1
    cc0c:	3f 22       	and	r3, r31
    cc0e:	21 e0       	ldi	r18, 0x01	; 1
    cc10:	82 1a       	sub	r8, r18
    cc12:	91 08       	sbc	r9, r1
    cc14:	a1 08       	sbc	r10, r1
    cc16:	b1 08       	sbc	r11, r1
    cc18:	09 f0       	breq	.+2      	; 0xcc1c <f_getfree+0x184>
    cc1a:	b5 cf       	rjmp	.-150    	; 0xcb86 <f_getfree+0xee>
    cc1c:	07 c0       	rjmp	.+14     	; 0xcc2c <f_getfree+0x194>
    cc1e:	01 e0       	ldi	r16, 0x01	; 1
    cc20:	10 e0       	ldi	r17, 0x00	; 0
    cc22:	04 c0       	rjmp	.+8      	; 0xcc2c <f_getfree+0x194>
    cc24:	02 e0       	ldi	r16, 0x02	; 2
    cc26:	10 e0       	ldi	r17, 0x00	; 0
    cc28:	01 c0       	rjmp	.+2      	; 0xcc2c <f_getfree+0x194>
    cc2a:	8c 01       	movw	r16, r24
    cc2c:	ad 81       	ldd	r26, Y+5	; 0x05
    cc2e:	be 81       	ldd	r27, Y+6	; 0x06
    cc30:	cd 92       	st	X+, r12
    cc32:	dd 92       	st	X+, r13
    cc34:	ed 92       	st	X+, r14
    cc36:	fc 92       	st	X, r15
    cc38:	13 97       	sbiw	r26, 0x03	; 3
    cc3a:	e9 81       	ldd	r30, Y+1	; 0x01
    cc3c:	fa 81       	ldd	r31, Y+2	; 0x02
    cc3e:	c1 8a       	std	Z+17, r12	; 0x11
    cc40:	d2 8a       	std	Z+18, r13	; 0x12
    cc42:	e3 8a       	std	Z+19, r14	; 0x13
    cc44:	f4 8a       	std	Z+20, r15	; 0x14
    cc46:	84 81       	ldd	r24, Z+4	; 0x04
    cc48:	81 60       	ori	r24, 0x01	; 1
    cc4a:	84 83       	std	Z+4, r24	; 0x04
    cc4c:	c8 01       	movw	r24, r16
    cc4e:	2a 96       	adiw	r28, 0x0a	; 10
    cc50:	e2 e1       	ldi	r30, 0x12	; 18
    cc52:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0000cc56 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    cc56:	a0 e6       	ldi	r26, 0x60	; 96
    cc58:	b0 e0       	ldi	r27, 0x00	; 0
    cc5a:	e1 e3       	ldi	r30, 0x31	; 49
    cc5c:	f6 e6       	ldi	r31, 0x66	; 102
    cc5e:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__prologue_saves__+0xe>
    cc62:	a1 96       	adiw	r28, 0x21	; 33
    cc64:	9f af       	std	Y+63, r25	; 0x3f
    cc66:	8e af       	std	Y+62, r24	; 0x3e
    cc68:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    cc6a:	42 e0       	ldi	r20, 0x02	; 2
    cc6c:	be 01       	movw	r22, r28
    cc6e:	63 5a       	subi	r22, 0xA3	; 163
    cc70:	7f 4f       	sbci	r23, 0xFF	; 255
    cc72:	ce 01       	movw	r24, r28
    cc74:	81 5a       	subi	r24, 0xA1	; 161
    cc76:	9f 4f       	sbci	r25, 0xFF	; 255
    cc78:	0e 94 b5 4c 	call	0x996a	; 0x996a <mount_volume>
	if (res == FR_OK) {
    cc7c:	00 97       	sbiw	r24, 0x00	; 0
    cc7e:	09 f0       	breq	.+2      	; 0xcc82 <f_unlink+0x2c>
    cc80:	8c c0       	rjmp	.+280    	; 0xcd9a <f_unlink+0x144>
		dj.obj.fs = fs;
    cc82:	6f 96       	adiw	r28, 0x1f	; 31
    cc84:	8e ad       	ldd	r24, Y+62	; 0x3e
    cc86:	9f ad       	ldd	r25, Y+63	; 0x3f
    cc88:	6f 97       	sbiw	r28, 0x1f	; 31
    cc8a:	98 ab       	std	Y+48, r25	; 0x30
    cc8c:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cc8e:	80 e0       	ldi	r24, 0x00	; 0
    cc90:	92 e0       	ldi	r25, 0x02	; 2
    cc92:	cf d3       	rcall	.+1950   	; 0xd432 <ff_memalloc>
    cc94:	5c 01       	movw	r10, r24
    cc96:	00 97       	sbiw	r24, 0x00	; 0
    cc98:	09 f4       	brne	.+2      	; 0xcc9c <f_unlink+0x46>
    cc9a:	49 c0       	rjmp	.+146    	; 0xcd2e <f_unlink+0xd8>
    cc9c:	6f 96       	adiw	r28, 0x1f	; 31
    cc9e:	ee ad       	ldd	r30, Y+62	; 0x3e
    cca0:	ff ad       	ldd	r31, Y+63	; 0x3f
    cca2:	6f 97       	sbiw	r28, 0x1f	; 31
    cca4:	94 87       	std	Z+12, r25	; 0x0c
    cca6:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    cca8:	a1 96       	adiw	r28, 0x21	; 33
    ccaa:	6e ad       	ldd	r22, Y+62	; 0x3e
    ccac:	7f ad       	ldd	r23, Y+63	; 0x3f
    ccae:	a1 97       	sbiw	r28, 0x21	; 33
    ccb0:	ce 01       	movw	r24, r28
    ccb2:	8f 96       	adiw	r24, 0x2f	; 47
    ccb4:	0e 94 30 58 	call	0xb060	; 0xb060 <follow_path>
    ccb8:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    ccba:	89 2b       	or	r24, r25
    ccbc:	a1 f5       	brne	.+104    	; 0xcd26 <f_unlink+0xd0>
    ccbe:	67 96       	adiw	r28, 0x17	; 23
    ccc0:	8f ad       	ldd	r24, Y+63	; 0x3f
    ccc2:	67 97       	sbiw	r28, 0x17	; 23
    ccc4:	85 fd       	sbrc	r24, 5
    ccc6:	36 c0       	rjmp	.+108    	; 0xcd34 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    ccc8:	87 fd       	sbrc	r24, 7
    ccca:	34 c0       	rjmp	.+104    	; 0xcd34 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    cccc:	9b a8       	ldd	r9, Y+51	; 0x33
    ccce:	90 fc       	sbrc	r9, 0
    ccd0:	40 c0       	rjmp	.+128    	; 0xcd52 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    ccd2:	6f 96       	adiw	r28, 0x1f	; 31
    ccd4:	0e ad       	ldd	r16, Y+62	; 0x3e
    ccd6:	1f ad       	ldd	r17, Y+63	; 0x3f
    ccd8:	6f 97       	sbiw	r28, 0x1f	; 31
    ccda:	2b 96       	adiw	r28, 0x0b	; 11
    ccdc:	6e ad       	ldd	r22, Y+62	; 0x3e
    ccde:	7f ad       	ldd	r23, Y+63	; 0x3f
    cce0:	2b 97       	sbiw	r28, 0x0b	; 11
    cce2:	f8 01       	movw	r30, r16
    cce4:	80 81       	ld	r24, Z
    cce6:	0e 94 ab 4a 	call	0x9556	; 0x9556 <ld_clust.isra.4>
    ccea:	6b 01       	movw	r12, r22
    ccec:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    ccee:	94 fe       	sbrs	r9, 4
    ccf0:	33 c0       	rjmp	.+102    	; 0xcd58 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    ccf2:	f8 01       	movw	r30, r16
    ccf4:	85 89       	ldd	r24, Z+21	; 0x15
    ccf6:	96 89       	ldd	r25, Z+22	; 0x16
    ccf8:	a7 89       	ldd	r26, Z+23	; 0x17
    ccfa:	b0 8d       	ldd	r27, Z+24	; 0x18
    ccfc:	c8 16       	cp	r12, r24
    ccfe:	d9 06       	cpc	r13, r25
    cd00:	ea 06       	cpc	r14, r26
    cd02:	fb 06       	cpc	r15, r27
    cd04:	31 f1       	breq	.+76     	; 0xcd52 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    cd06:	1a 83       	std	Y+2, r17	; 0x02
    cd08:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    cd0a:	cf 82       	std	Y+7, r12	; 0x07
    cd0c:	d8 86       	std	Y+8, r13	; 0x08
    cd0e:	e9 86       	std	Y+9, r14	; 0x09
    cd10:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    cd12:	40 e0       	ldi	r20, 0x00	; 0
    cd14:	50 e0       	ldi	r21, 0x00	; 0
    cd16:	ba 01       	movw	r22, r20
    cd18:	ce 01       	movw	r24, r28
    cd1a:	01 96       	adiw	r24, 0x01	; 1
    cd1c:	0e 94 ca 50 	call	0xa194	; 0xa194 <dir_sdi>
    cd20:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    cd22:	89 2b       	or	r24, r25
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cd24:	51 f0       	breq	.+20     	; 0xcd3a <f_unlink+0xe4>
    cd26:	c5 01       	movw	r24, r10
    cd28:	87 d3       	rcall	.+1806   	; 0xd438 <ff_memfree>
    cd2a:	c8 01       	movw	r24, r16

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cd2c:	36 c0       	rjmp	.+108    	; 0xcd9a <f_unlink+0x144>
    cd2e:	81 e1       	ldi	r24, 0x11	; 17
    cd30:	90 e0       	ldi	r25, 0x00	; 0
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    cd32:	33 c0       	rjmp	.+102    	; 0xcd9a <f_unlink+0x144>
    cd34:	06 e0       	ldi	r16, 0x06	; 6
    cd36:	10 e0       	ldi	r17, 0x00	; 0
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    cd38:	f6 cf       	rjmp	.-20     	; 0xcd26 <f_unlink+0xd0>
    cd3a:	60 e0       	ldi	r22, 0x00	; 0
    cd3c:	70 e0       	ldi	r23, 0x00	; 0
    cd3e:	ce 01       	movw	r24, r28
    cd40:	01 96       	adiw	r24, 0x01	; 1
    cd42:	0e 94 64 54 	call	0xa8c8	; 0xa8c8 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cd46:	8c 01       	movw	r16, r24
    cd48:	00 97       	sbiw	r24, 0x00	; 0
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cd4a:	19 f0       	breq	.+6      	; 0xcd52 <f_unlink+0xfc>
    cd4c:	04 97       	sbiw	r24, 0x04	; 4
    cd4e:	21 f0       	breq	.+8      	; 0xcd58 <f_unlink+0x102>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    cd50:	ea cf       	rjmp	.-44     	; 0xcd26 <f_unlink+0xd0>
    cd52:	07 e0       	ldi	r16, 0x07	; 7
    cd54:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    cd56:	e7 cf       	rjmp	.-50     	; 0xcd26 <f_unlink+0xd0>
    cd58:	ce 01       	movw	r24, r28
    cd5a:	8f 96       	adiw	r24, 0x2f	; 47
    cd5c:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    cd60:	8c 01       	movw	r16, r24
    cd62:	89 2b       	or	r24, r25
    cd64:	01 f7       	brne	.-64     	; 0xcd26 <f_unlink+0xd0>
    cd66:	c1 14       	cp	r12, r1
    cd68:	d1 04       	cpc	r13, r1
    cd6a:	e1 04       	cpc	r14, r1
    cd6c:	f1 04       	cpc	r15, r1
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cd6e:	41 f4       	brne	.+16     	; 0xcd80 <f_unlink+0x12a>
    cd70:	6f 96       	adiw	r28, 0x1f	; 31
    cd72:	8e ad       	ldd	r24, Y+62	; 0x3e
    cd74:	9f ad       	ldd	r25, Y+63	; 0x3f
    cd76:	6f 97       	sbiw	r28, 0x1f	; 31
    cd78:	0e 94 20 4b 	call	0x9640	; 0x9640 <sync_fs>
    cd7c:	8c 01       	movw	r16, r24
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cd7e:	d3 cf       	rjmp	.-90     	; 0xcd26 <f_unlink+0xd0>
    cd80:	00 e0       	ldi	r16, 0x00	; 0
    cd82:	10 e0       	ldi	r17, 0x00	; 0
    cd84:	98 01       	movw	r18, r16
    cd86:	b7 01       	movw	r22, r14
    cd88:	a6 01       	movw	r20, r12
    cd8a:	ce 01       	movw	r24, r28
    cd8c:	8f 96       	adiw	r24, 0x2f	; 47
    cd8e:	0e 94 b1 52 	call	0xa562	; 0xa562 <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cd92:	8c 01       	movw	r16, r24
    cd94:	89 2b       	or	r24, r25
    cd96:	39 f6       	brne	.-114    	; 0xcd26 <f_unlink+0xd0>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cd98:	eb cf       	rjmp	.-42     	; 0xcd70 <f_unlink+0x11a>
    cd9a:	c0 5a       	subi	r28, 0xA0	; 160
    cd9c:	df 4f       	sbci	r29, 0xFF	; 255
    cd9e:	eb e0       	ldi	r30, 0x0B	; 11
    cda0:	0c 94 58 e5 	jmp	0x1cab0	; 0x1cab0 <__epilogue_restores__+0xe>

0000cda4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cda4:	a0 e4       	ldi	r26, 0x40	; 64
    cda6:	b0 e0       	ldi	r27, 0x00	; 0
    cda8:	e8 ed       	ldi	r30, 0xD8	; 216
    cdaa:	f6 e6       	ldi	r31, 0x66	; 102
    cdac:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__prologue_saves__+0x4>
    cdb0:	21 96       	adiw	r28, 0x01	; 1
    cdb2:	9f af       	std	Y+63, r25	; 0x3f
    cdb4:	8e af       	std	Y+62, r24	; 0x3e
    cdb6:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cdb8:	42 e0       	ldi	r20, 0x02	; 2
    cdba:	be 01       	movw	r22, r28
    cdbc:	63 5c       	subi	r22, 0xC3	; 195
    cdbe:	7f 4f       	sbci	r23, 0xFF	; 255
    cdc0:	ce 01       	movw	r24, r28
    cdc2:	cf 96       	adiw	r24, 0x3f	; 63
    cdc4:	0e 94 b5 4c 	call	0x996a	; 0x996a <mount_volume>
	if (res == FR_OK) {
    cdc8:	00 97       	sbiw	r24, 0x00	; 0
    cdca:	09 f0       	breq	.+2      	; 0xcdce <f_mkdir+0x2a>
    cdcc:	d6 c0       	rjmp	.+428    	; 0xcf7a <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cdce:	8d ad       	ldd	r24, Y+61	; 0x3d
    cdd0:	9e ad       	ldd	r25, Y+62	; 0x3e
    cdd2:	9a 83       	std	Y+2, r25	; 0x02
    cdd4:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cdd6:	80 e0       	ldi	r24, 0x00	; 0
    cdd8:	92 e0       	ldi	r25, 0x02	; 2
    cdda:	2b d3       	rcall	.+1622   	; 0xd432 <ff_memalloc>
    cddc:	6c 01       	movw	r12, r24
    cdde:	00 97       	sbiw	r24, 0x00	; 0
    cde0:	e9 f0       	breq	.+58     	; 0xce1c <f_mkdir+0x78>
    cde2:	ed ad       	ldd	r30, Y+61	; 0x3d
    cde4:	fe ad       	ldd	r31, Y+62	; 0x3e
    cde6:	94 87       	std	Z+12, r25	; 0x0c
    cde8:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cdea:	21 96       	adiw	r28, 0x01	; 1
    cdec:	6e ad       	ldd	r22, Y+62	; 0x3e
    cdee:	7f ad       	ldd	r23, Y+63	; 0x3f
    cdf0:	21 97       	sbiw	r28, 0x01	; 1
    cdf2:	ce 01       	movw	r24, r28
    cdf4:	01 96       	adiw	r24, 0x01	; 1
    cdf6:	0e 94 30 58 	call	0xb060	; 0xb060 <follow_path>
    cdfa:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cdfc:	89 2b       	or	r24, r25
    cdfe:	89 f0       	breq	.+34     	; 0xce22 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    ce00:	84 e0       	ldi	r24, 0x04	; 4
    ce02:	e8 16       	cp	r14, r24
    ce04:	f1 04       	cpc	r15, r1
    ce06:	31 f4       	brne	.+12     	; 0xce14 <f_mkdir+0x70>
    ce08:	88 a5       	ldd	r24, Y+40	; 0x28
    ce0a:	85 ff       	sbrs	r24, 5
    ce0c:	0e c0       	rjmp	.+28     	; 0xce2a <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    ce0e:	26 e0       	ldi	r18, 0x06	; 6
    ce10:	e2 2e       	mov	r14, r18
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    ce12:	f1 2c       	mov	r15, r1
    ce14:	c6 01       	movw	r24, r12
    ce16:	10 d3       	rcall	.+1568   	; 0xd438 <ff_memfree>
    ce18:	c7 01       	movw	r24, r14


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ce1a:	af c0       	rjmp	.+350    	; 0xcf7a <f_mkdir+0x1d6>
    ce1c:	81 e1       	ldi	r24, 0x11	; 17
    ce1e:	90 e0       	ldi	r25, 0x00	; 0
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    ce20:	ac c0       	rjmp	.+344    	; 0xcf7a <f_mkdir+0x1d6>
    ce22:	38 e0       	ldi	r19, 0x08	; 8
    ce24:	e3 2e       	mov	r14, r19
    ce26:	f1 2c       	mov	r15, r1
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    ce28:	f5 cf       	rjmp	.-22     	; 0xce14 <f_mkdir+0x70>
    ce2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    ce2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    ce2e:	98 ab       	std	Y+48, r25	; 0x30
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    ce30:	8f a7       	std	Y+47, r24	; 0x2f
    ce32:	40 e0       	ldi	r20, 0x00	; 0
    ce34:	50 e0       	ldi	r21, 0x00	; 0
    ce36:	ba 01       	movw	r22, r20
    ce38:	ce 01       	movw	r24, r28
    ce3a:	8f 96       	adiw	r24, 0x2f	; 47
    ce3c:	0e 94 8b 51 	call	0xa316	; 0xa316 <create_chain>
    ce40:	4b 01       	movw	r8, r22
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ce42:	5c 01       	movw	r10, r24
    ce44:	67 2b       	or	r22, r23
    ce46:	68 2b       	or	r22, r24
    ce48:	69 2b       	or	r22, r25
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    ce4a:	09 f1       	breq	.+66     	; 0xce8e <f_mkdir+0xea>
    ce4c:	e1 e0       	ldi	r30, 0x01	; 1
    ce4e:	8e 16       	cp	r8, r30
    ce50:	91 04       	cpc	r9, r1
    ce52:	a1 04       	cpc	r10, r1
    ce54:	b1 04       	cpc	r11, r1
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    ce56:	61 f0       	breq	.+24     	; 0xce70 <f_mkdir+0xcc>
    ce58:	ff ef       	ldi	r31, 0xFF	; 255
    ce5a:	8f 16       	cp	r8, r31
    ce5c:	9f 06       	cpc	r9, r31
    ce5e:	af 06       	cpc	r10, r31
    ce60:	bf 06       	cpc	r11, r31
			tm = GET_FATTIME();
    ce62:	d9 f4       	brne	.+54     	; 0xce9a <f_mkdir+0xf6>
    ce64:	0e 94 07 71 	call	0xe20e	; 0xe20e <get_fattime>
    ce68:	ee 24       	eor	r14, r14
    ce6a:	e3 94       	inc	r14
    ce6c:	f1 2c       	mov	r15, r1
    ce6e:	05 c0       	rjmp	.+10     	; 0xce7a <f_mkdir+0xd6>
    ce70:	0e 94 07 71 	call	0xe20e	; 0xe20e <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    ce74:	92 e0       	ldi	r25, 0x02	; 2
    ce76:	e9 2e       	mov	r14, r25
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    ce78:	f1 2c       	mov	r15, r1
    ce7a:	00 e0       	ldi	r16, 0x00	; 0
    ce7c:	10 e0       	ldi	r17, 0x00	; 0
    ce7e:	98 01       	movw	r18, r16
    ce80:	b5 01       	movw	r22, r10
    ce82:	a4 01       	movw	r20, r8
    ce84:	ce 01       	movw	r24, r28
    ce86:	8f 96       	adiw	r24, 0x2f	; 47
    ce88:	0e 94 b1 52 	call	0xa562	; 0xa562 <remove_chain>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    ce8c:	c3 cf       	rjmp	.-122    	; 0xce14 <f_mkdir+0x70>
    ce8e:	0e 94 07 71 	call	0xe20e	; 0xe20e <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ce92:	87 e0       	ldi	r24, 0x07	; 7
    ce94:	e8 2e       	mov	r14, r24
    ce96:	f1 2c       	mov	r15, r1
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    ce98:	f0 cf       	rjmp	.-32     	; 0xce7a <f_mkdir+0xd6>
    ce9a:	0e 94 07 71 	call	0xe20e	; 0xe20e <get_fattime>
    ce9e:	2b 01       	movw	r4, r22
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    cea0:	3c 01       	movw	r6, r24
    cea2:	b5 01       	movw	r22, r10
    cea4:	a4 01       	movw	r20, r8
    cea6:	8d ad       	ldd	r24, Y+61	; 0x3d
    cea8:	9e ad       	ldd	r25, Y+62	; 0x3e
    ceaa:	0e 94 92 4b 	call	0x9724	; 0x9724 <dir_clear>
				if (res == FR_OK) {
    ceae:	7c 01       	movw	r14, r24
    ceb0:	89 2b       	or	r24, r25
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    ceb2:	19 f7       	brne	.-58     	; 0xce7a <f_mkdir+0xd6>
    ceb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    ceb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    ceb8:	4b e0       	ldi	r20, 0x0B	; 11
    ceba:	50 e0       	ldi	r21, 0x00	; 0
    cebc:	60 e2       	ldi	r22, 0x20	; 32
    cebe:	70 e0       	ldi	r23, 0x00	; 0
    cec0:	c5 96       	adiw	r24, 0x35	; 53
    cec2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <mem_set>
						fs->win[DIR_Name] = '.';
    cec6:	8d ad       	ldd	r24, Y+61	; 0x3d
    cec8:	9e ad       	ldd	r25, Y+62	; 0x3e
    ceca:	1e e2       	ldi	r17, 0x2E	; 46
    cecc:	fc 01       	movw	r30, r24
						fs->win[DIR_Attr] = AM_DIR;
    cece:	15 ab       	std	Z+53, r17	; 0x35
    ced0:	e0 5c       	subi	r30, 0xC0	; 192
    ced2:	ff 4f       	sbci	r31, 0xFF	; 255
    ced4:	20 e1       	ldi	r18, 0x10	; 16
						st_dword(fs->win + DIR_ModTime, tm);
    ced6:	20 83       	st	Z, r18
    ced8:	b3 01       	movw	r22, r6
    ceda:	a2 01       	movw	r20, r4
    cedc:	85 5b       	subi	r24, 0xB5	; 181
    cede:	9f 4f       	sbci	r25, 0xFF	; 255
    cee0:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <st_dword>
						st_clust(fs, fs->win, dcl);
    cee4:	8d ad       	ldd	r24, Y+61	; 0x3d
    cee6:	9e ad       	ldd	r25, Y+62	; 0x3e
    cee8:	bc 01       	movw	r22, r24
    ceea:	6b 5c       	subi	r22, 0xCB	; 203
    ceec:	7f 4f       	sbci	r23, 0xFF	; 255
    ceee:	a5 01       	movw	r20, r10
    cef0:	94 01       	movw	r18, r8
    cef2:	0e 94 c0 4a 	call	0x9580	; 0x9580 <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cef6:	8d ad       	ldd	r24, Y+61	; 0x3d
    cef8:	9e ad       	ldd	r25, Y+62	; 0x3e
    cefa:	bc 01       	movw	r22, r24
    cefc:	6b 5c       	subi	r22, 0xCB	; 203
    cefe:	7f 4f       	sbci	r23, 0xFF	; 255
    cf00:	40 e2       	ldi	r20, 0x20	; 32
    cf02:	50 e0       	ldi	r21, 0x00	; 0
    cf04:	8b 5a       	subi	r24, 0xAB	; 171
    cf06:	9f 4f       	sbci	r25, 0xFF	; 255
    cf08:	0e 94 da 48 	call	0x91b4	; 0x91b4 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cf0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf0e:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf10:	fc 01       	movw	r30, r24
    cf12:	ea 5a       	subi	r30, 0xAA	; 170
    cf14:	ff 4f       	sbci	r31, 0xFF	; 255
						st_clust(fs, fs->win + SZDIRE, pcl);
    cf16:	10 83       	st	Z, r17
    cf18:	2f 81       	ldd	r18, Y+7	; 0x07
    cf1a:	38 85       	ldd	r19, Y+8	; 0x08
    cf1c:	49 85       	ldd	r20, Y+9	; 0x09
    cf1e:	5a 85       	ldd	r21, Y+10	; 0x0a
    cf20:	bc 01       	movw	r22, r24
    cf22:	6b 5a       	subi	r22, 0xAB	; 171
    cf24:	7f 4f       	sbci	r23, 0xFF	; 255
    cf26:	0e 94 c0 4a 	call	0x9580	; 0x9580 <st_clust.isra.5>
						fs->wflag = 1;
    cf2a:	ed ad       	ldd	r30, Y+61	; 0x3d
    cf2c:	fe ad       	ldd	r31, Y+62	; 0x3e
    cf2e:	81 e0       	ldi	r24, 0x01	; 1
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    cf30:	83 83       	std	Z+3, r24	; 0x03
    cf32:	ce 01       	movw	r24, r28
    cf34:	01 96       	adiw	r24, 0x01	; 1
    cf36:	0e 94 8c 56 	call	0xad18	; 0xad18 <dir_register>
				}
			}
			if (res == FR_OK) {
    cf3a:	7c 01       	movw	r14, r24
    cf3c:	89 2b       	or	r24, r25
    cf3e:	09 f0       	breq	.+2      	; 0xcf42 <f_mkdir+0x19e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cf40:	9c cf       	rjmp	.-200    	; 0xce7a <f_mkdir+0xd6>
    cf42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cf44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cf46:	b3 01       	movw	r22, r6
    cf48:	a2 01       	movw	r20, r4
    cf4a:	46 96       	adiw	r24, 0x16	; 22
    cf4c:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    cf50:	6b 8d       	ldd	r22, Y+27	; 0x1b
    cf52:	7c 8d       	ldd	r23, Y+28	; 0x1c
    cf54:	a5 01       	movw	r20, r10
    cf56:	94 01       	movw	r18, r8
    cf58:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf5c:	0e 94 c0 4a 	call	0x9580	; 0x9580 <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    cf60:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cf62:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cf64:	80 e1       	ldi	r24, 0x10	; 16
					fs->wflag = 1;
    cf66:	83 87       	std	Z+11, r24	; 0x0b
    cf68:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf6c:	21 e0       	ldi	r18, 0x01	; 1
    cf6e:	fc 01       	movw	r30, r24
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    cf70:	23 83       	std	Z+3, r18	; 0x03
    cf72:	0e 94 20 4b 	call	0x9640	; 0x9640 <sync_fs>
    cf76:	7c 01       	movw	r14, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cf78:	4d cf       	rjmp	.-358    	; 0xce14 <f_mkdir+0x70>
    cf7a:	c0 5c       	subi	r28, 0xC0	; 192
    cf7c:	df 4f       	sbci	r29, 0xFF	; 255
    cf7e:	e0 e1       	ldi	r30, 0x10	; 16
    cf80:	0c 94 53 e5 	jmp	0x1caa6	; 0x1caa6 <__epilogue_restores__+0x4>

0000cf84 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cf84:	a2 e8       	ldi	r26, 0x82	; 130
    cf86:	b0 e0       	ldi	r27, 0x00	; 0
    cf88:	e8 ec       	ldi	r30, 0xC8	; 200
    cf8a:	f7 e6       	ldi	r31, 0x67	; 103
    cf8c:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x12>
    cf90:	c1 58       	subi	r28, 0x81	; 129
    cf92:	df 4f       	sbci	r29, 0xFF	; 255
    cf94:	99 83       	std	Y+1, r25	; 0x01
    cf96:	88 83       	st	Y, r24
    cf98:	cf 57       	subi	r28, 0x7F	; 127
    cf9a:	d0 40       	sbci	r29, 0x00	; 0
    cf9c:	cf 57       	subi	r28, 0x7F	; 127
    cf9e:	df 4f       	sbci	r29, 0xFF	; 255
    cfa0:	79 83       	std	Y+1, r23	; 0x01
    cfa2:	68 83       	st	Y, r22
    cfa4:	c1 58       	subi	r28, 0x81	; 129
    cfa6:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    cfa8:	ce 01       	movw	r24, r28
    cfaa:	8f 57       	subi	r24, 0x7F	; 127
    cfac:	9f 4f       	sbci	r25, 0xFF	; 255
    cfae:	0e 94 82 48 	call	0x9104	; 0x9104 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    cfb2:	42 e0       	ldi	r20, 0x02	; 2
    cfb4:	be 01       	movw	r22, r28
    cfb6:	63 58       	subi	r22, 0x83	; 131
    cfb8:	7f 4f       	sbci	r23, 0xFF	; 255
    cfba:	ce 01       	movw	r24, r28
    cfbc:	81 58       	subi	r24, 0x81	; 129
    cfbe:	9f 4f       	sbci	r25, 0xFF	; 255
    cfc0:	0e 94 b5 4c 	call	0x996a	; 0x996a <mount_volume>
	if (res == FR_OK) {
    cfc4:	00 97       	sbiw	r24, 0x00	; 0
    cfc6:	09 f0       	breq	.+2      	; 0xcfca <f_rename+0x46>
    cfc8:	ed c0       	rjmp	.+474    	; 0xd1a4 <f_rename+0x220>
		djo.obj.fs = fs;
    cfca:	ef 96       	adiw	r28, 0x3f	; 63
    cfcc:	8e ad       	ldd	r24, Y+62	; 0x3e
    cfce:	9f ad       	ldd	r25, Y+63	; 0x3f
    cfd0:	ef 97       	sbiw	r28, 0x3f	; 63
    cfd2:	98 ab       	std	Y+48, r25	; 0x30
    cfd4:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cfd6:	80 e0       	ldi	r24, 0x00	; 0
    cfd8:	92 e0       	ldi	r25, 0x02	; 2
    cfda:	2b d2       	rcall	.+1110   	; 0xd432 <ff_memalloc>
    cfdc:	6c 01       	movw	r12, r24
    cfde:	00 97       	sbiw	r24, 0x00	; 0
    cfe0:	f1 f0       	breq	.+60     	; 0xd01e <f_rename+0x9a>
    cfe2:	ef 96       	adiw	r28, 0x3f	; 63
    cfe4:	ee ad       	ldd	r30, Y+62	; 0x3e
    cfe6:	ff ad       	ldd	r31, Y+63	; 0x3f
    cfe8:	ef 97       	sbiw	r28, 0x3f	; 63
    cfea:	94 87       	std	Z+12, r25	; 0x0c
    cfec:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    cfee:	c1 58       	subi	r28, 0x81	; 129
    cff0:	df 4f       	sbci	r29, 0xFF	; 255
    cff2:	68 81       	ld	r22, Y
    cff4:	79 81       	ldd	r23, Y+1	; 0x01
    cff6:	cf 57       	subi	r28, 0x7F	; 127
    cff8:	d0 40       	sbci	r29, 0x00	; 0
    cffa:	ce 01       	movw	r24, r28
    cffc:	8f 96       	adiw	r24, 0x2f	; 47
    cffe:	0e 94 30 58 	call	0xb060	; 0xb060 <follow_path>
    d002:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    d004:	89 2b       	or	r24, r25
    d006:	39 f4       	brne	.+14     	; 0xd016 <f_rename+0x92>
    d008:	67 96       	adiw	r28, 0x17	; 23
    d00a:	8f ad       	ldd	r24, Y+63	; 0x3f
    d00c:	67 97       	sbiw	r28, 0x17	; 23
    d00e:	80 7a       	andi	r24, 0xA0	; 160
    d010:	49 f0       	breq	.+18     	; 0xd024 <f_rename+0xa0>
    d012:	06 e0       	ldi	r16, 0x06	; 6
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    d014:	10 e0       	ldi	r17, 0x00	; 0
    d016:	c6 01       	movw	r24, r12
    d018:	0f d2       	rcall	.+1054   	; 0xd438 <ff_memfree>
    d01a:	c8 01       	movw	r24, r16

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    d01c:	c3 c0       	rjmp	.+390    	; 0xd1a4 <f_rename+0x220>
    d01e:	81 e1       	ldi	r24, 0x11	; 17
    d020:	90 e0       	ldi	r25, 0x00	; 0
    d022:	c0 c0       	rjmp	.+384    	; 0xd1a4 <f_rename+0x220>
    d024:	2b 96       	adiw	r28, 0x0b	; 11
    d026:	6e ad       	ldd	r22, Y+62	; 0x3e
    d028:	7f ad       	ldd	r23, Y+63	; 0x3f
    d02a:	2b 97       	sbiw	r28, 0x0b	; 11
    d02c:	40 e2       	ldi	r20, 0x20	; 32
    d02e:	50 e0       	ldi	r21, 0x00	; 0
    d030:	ce 01       	movw	r24, r28
    d032:	83 5a       	subi	r24, 0xA3	; 163
    d034:	9f 4f       	sbci	r25, 0xFF	; 255
    d036:	0e 94 da 48 	call	0x91b4	; 0x91b4 <mem_cpy.part.0>
    d03a:	4e e2       	ldi	r20, 0x2E	; 46
    d03c:	50 e0       	ldi	r21, 0x00	; 0
    d03e:	be 01       	movw	r22, r28
    d040:	61 5d       	subi	r22, 0xD1	; 209
    d042:	7f 4f       	sbci	r23, 0xFF	; 255
    d044:	ce 01       	movw	r24, r28
    d046:	01 96       	adiw	r24, 0x01	; 1
    d048:	0e 94 da 48 	call	0x91b4	; 0x91b4 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    d04c:	cf 57       	subi	r28, 0x7F	; 127
    d04e:	df 4f       	sbci	r29, 0xFF	; 255
    d050:	68 81       	ld	r22, Y
    d052:	79 81       	ldd	r23, Y+1	; 0x01
    d054:	c1 58       	subi	r28, 0x81	; 129
    d056:	d0 40       	sbci	r29, 0x00	; 0
    d058:	ce 01       	movw	r24, r28
    d05a:	01 96       	adiw	r24, 0x01	; 1
    d05c:	0e 94 30 58 	call	0xb060	; 0xb060 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    d060:	8c 01       	movw	r16, r24
    d062:	89 2b       	or	r24, r25
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    d064:	f9 f4       	brne	.+62     	; 0xd0a4 <f_rename+0x120>
    d066:	4f 81       	ldd	r20, Y+7	; 0x07
    d068:	58 85       	ldd	r21, Y+8	; 0x08
    d06a:	69 85       	ldd	r22, Y+9	; 0x09
    d06c:	7a 85       	ldd	r23, Y+10	; 0x0a
    d06e:	8d a9       	ldd	r24, Y+53	; 0x35
    d070:	9e a9       	ldd	r25, Y+54	; 0x36
    d072:	af a9       	ldd	r26, Y+55	; 0x37
    d074:	b8 ad       	ldd	r27, Y+56	; 0x38
    d076:	48 17       	cp	r20, r24
    d078:	59 07       	cpc	r21, r25
    d07a:	6a 07       	cpc	r22, r26
    d07c:	7b 07       	cpc	r23, r27
    d07e:	09 f0       	breq	.+2      	; 0xd082 <f_rename+0xfe>
    d080:	8b c0       	rjmp	.+278    	; 0xd198 <f_rename+0x214>
    d082:	4f 85       	ldd	r20, Y+15	; 0x0f
    d084:	58 89       	ldd	r21, Y+16	; 0x10
    d086:	69 89       	ldd	r22, Y+17	; 0x11
    d088:	7a 89       	ldd	r23, Y+18	; 0x12
    d08a:	21 96       	adiw	r28, 0x01	; 1
    d08c:	8c ad       	ldd	r24, Y+60	; 0x3c
    d08e:	9d ad       	ldd	r25, Y+61	; 0x3d
    d090:	ae ad       	ldd	r26, Y+62	; 0x3e
    d092:	bf ad       	ldd	r27, Y+63	; 0x3f
    d094:	21 97       	sbiw	r28, 0x01	; 1
    d096:	48 17       	cp	r20, r24
    d098:	59 07       	cpc	r21, r25
    d09a:	6a 07       	cpc	r22, r26
    d09c:	7b 07       	cpc	r23, r27
    d09e:	09 f0       	breq	.+2      	; 0xd0a2 <f_rename+0x11e>
    d0a0:	7b c0       	rjmp	.+246    	; 0xd198 <f_rename+0x214>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    d0a2:	04 c0       	rjmp	.+8      	; 0xd0ac <f_rename+0x128>
    d0a4:	04 30       	cpi	r16, 0x04	; 4
    d0a6:	11 05       	cpc	r17, r1
    d0a8:	09 f0       	breq	.+2      	; 0xd0ac <f_rename+0x128>
					res = dir_register(&djn);			/* Register the new entry */
    d0aa:	b5 cf       	rjmp	.-150    	; 0xd016 <f_rename+0x92>
    d0ac:	ce 01       	movw	r24, r28
    d0ae:	01 96       	adiw	r24, 0x01	; 1
    d0b0:	0e 94 8c 56 	call	0xad18	; 0xad18 <dir_register>
					if (res == FR_OK) {
    d0b4:	8c 01       	movw	r16, r24
    d0b6:	89 2b       	or	r24, r25
    d0b8:	09 f0       	breq	.+2      	; 0xd0bc <f_rename+0x138>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    d0ba:	ad cf       	rjmp	.-166    	; 0xd016 <f_rename+0x92>
    d0bc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    d0be:	1c 8d       	ldd	r17, Y+28	; 0x1c
    d0c0:	6d e5       	ldi	r22, 0x5D	; 93
    d0c2:	70 e0       	ldi	r23, 0x00	; 0
    d0c4:	6c 0f       	add	r22, r28
    d0c6:	7d 1f       	adc	r23, r29
    d0c8:	63 5f       	subi	r22, 0xF3	; 243
    d0ca:	7f 4f       	sbci	r23, 0xFF	; 255
    d0cc:	43 e1       	ldi	r20, 0x13	; 19
    d0ce:	50 e0       	ldi	r21, 0x00	; 0
    d0d0:	c8 01       	movw	r24, r16
    d0d2:	0d 96       	adiw	r24, 0x0d	; 13
    d0d4:	0e 94 da 48 	call	0x91b4	; 0x91b4 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    d0d8:	a9 96       	adiw	r28, 0x29	; 41
    d0da:	8f ad       	ldd	r24, Y+63	; 0x3f
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    d0dc:	a9 97       	sbiw	r28, 0x29	; 41
    d0de:	84 ff       	sbrs	r24, 4
    d0e0:	80 62       	ori	r24, 0x20	; 32
    d0e2:	f8 01       	movw	r30, r16
						fs->wflag = 1;
    d0e4:	83 87       	std	Z+11, r24	; 0x0b
    d0e6:	ef 96       	adiw	r28, 0x3f	; 63
    d0e8:	ee ac       	ldd	r14, Y+62	; 0x3e
    d0ea:	ff ac       	ldd	r15, Y+63	; 0x3f
    d0ec:	ef 97       	sbiw	r28, 0x3f	; 63
    d0ee:	bb 24       	eor	r11, r11
    d0f0:	b3 94       	inc	r11
    d0f2:	f7 01       	movw	r30, r14
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    d0f4:	b3 82       	std	Z+3, r11	; 0x03
    d0f6:	f8 01       	movw	r30, r16
    d0f8:	83 85       	ldd	r24, Z+11	; 0x0b
    d0fa:	84 ff       	sbrs	r24, 4
    d0fc:	3d c0       	rjmp	.+122    	; 0xd178 <f_rename+0x1f4>
    d0fe:	4d a9       	ldd	r20, Y+53	; 0x35
    d100:	5e a9       	ldd	r21, Y+54	; 0x36
    d102:	6f a9       	ldd	r22, Y+55	; 0x37
    d104:	78 ad       	ldd	r23, Y+56	; 0x38
    d106:	8f 81       	ldd	r24, Y+7	; 0x07
    d108:	98 85       	ldd	r25, Y+8	; 0x08
    d10a:	a9 85       	ldd	r26, Y+9	; 0x09
    d10c:	ba 85       	ldd	r27, Y+10	; 0x0a
    d10e:	48 17       	cp	r20, r24
    d110:	59 07       	cpc	r21, r25
    d112:	6a 07       	cpc	r22, r26
    d114:	7b 07       	cpc	r23, r27
							sect = clst2sect(fs, ld_clust(fs, dir));
    d116:	81 f1       	breq	.+96     	; 0xd178 <f_rename+0x1f4>
    d118:	b8 01       	movw	r22, r16
    d11a:	f7 01       	movw	r30, r14
    d11c:	80 81       	ld	r24, Z
    d11e:	0e 94 ab 4a 	call	0x9556	; 0x9556 <ld_clust.isra.4>
    d122:	ab 01       	movw	r20, r22
    d124:	bc 01       	movw	r22, r24
    d126:	c7 01       	movw	r24, r14
    d128:	0e 94 0f 48 	call	0x901e	; 0x901e <clst2sect>
    d12c:	ab 01       	movw	r20, r22
							if (sect == 0) {
    d12e:	bc 01       	movw	r22, r24
    d130:	41 15       	cp	r20, r1
    d132:	51 05       	cpc	r21, r1
    d134:	61 05       	cpc	r22, r1
    d136:	71 05       	cpc	r23, r1
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    d138:	91 f1       	breq	.+100    	; 0xd19e <f_rename+0x21a>
    d13a:	c7 01       	movw	r24, r14
    d13c:	0e 94 3a 4c 	call	0x9874	; 0x9874 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    d140:	8c 01       	movw	r16, r24
    d142:	89 2b       	or	r24, r25
    d144:	09 f0       	breq	.+2      	; 0xd148 <f_rename+0x1c4>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d146:	67 cf       	rjmp	.-306    	; 0xd016 <f_rename+0x92>
    d148:	ef 96       	adiw	r28, 0x3f	; 63
    d14a:	8e ad       	ldd	r24, Y+62	; 0x3e
    d14c:	9f ad       	ldd	r25, Y+63	; 0x3f
								if (res == FR_OK && dir[1] == '.') {
    d14e:	ef 97       	sbiw	r28, 0x3f	; 63
    d150:	fc 01       	movw	r30, r24
    d152:	ea 5a       	subi	r30, 0xAA	; 170
    d154:	ff 4f       	sbci	r31, 0xFF	; 255
    d156:	20 81       	ld	r18, Z
    d158:	2e 32       	cpi	r18, 0x2E	; 46
									st_clust(fs, dir, djn.obj.sclust);
    d15a:	71 f4       	brne	.+28     	; 0xd178 <f_rename+0x1f4>
    d15c:	2f 81       	ldd	r18, Y+7	; 0x07
    d15e:	38 85       	ldd	r19, Y+8	; 0x08
    d160:	49 85       	ldd	r20, Y+9	; 0x09
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d162:	5a 85       	ldd	r21, Y+10	; 0x0a
    d164:	bc 01       	movw	r22, r24
    d166:	6b 5a       	subi	r22, 0xAB	; 171
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    d168:	7f 4f       	sbci	r23, 0xFF	; 255
    d16a:	0e 94 c0 4a 	call	0x9580	; 0x9580 <st_clust.isra.5>
									fs->wflag = 1;
    d16e:	ef 96       	adiw	r28, 0x3f	; 63
    d170:	ee ad       	ldd	r30, Y+62	; 0x3e
    d172:	ff ad       	ldd	r31, Y+63	; 0x3f
    d174:	ef 97       	sbiw	r28, 0x3f	; 63
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    d176:	b3 82       	std	Z+3, r11	; 0x03
    d178:	ce 01       	movw	r24, r28
    d17a:	8f 96       	adiw	r24, 0x2f	; 47
    d17c:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <dir_remove>
				if (res == FR_OK) {
    d180:	8c 01       	movw	r16, r24
    d182:	89 2b       	or	r24, r25
    d184:	09 f0       	breq	.+2      	; 0xd188 <f_rename+0x204>
					res = sync_fs(fs);
    d186:	47 cf       	rjmp	.-370    	; 0xd016 <f_rename+0x92>
    d188:	ef 96       	adiw	r28, 0x3f	; 63
    d18a:	8e ad       	ldd	r24, Y+62	; 0x3e
    d18c:	9f ad       	ldd	r25, Y+63	; 0x3f
    d18e:	ef 97       	sbiw	r28, 0x3f	; 63
    d190:	0e 94 20 4b 	call	0x9640	; 0x9640 <sync_fs>
    d194:	8c 01       	movw	r16, r24
    d196:	3f cf       	rjmp	.-386    	; 0xd016 <f_rename+0x92>
    d198:	08 e0       	ldi	r16, 0x08	; 8
    d19a:	10 e0       	ldi	r17, 0x00	; 0
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    d19c:	3c cf       	rjmp	.-392    	; 0xd016 <f_rename+0x92>
    d19e:	02 e0       	ldi	r16, 0x02	; 2
    d1a0:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d1a2:	39 cf       	rjmp	.-398    	; 0xd016 <f_rename+0x92>
    d1a4:	ce 57       	subi	r28, 0x7E	; 126
    d1a6:	df 4f       	sbci	r29, 0xFF	; 255
    d1a8:	e9 e0       	ldi	r30, 0x09	; 9
    d1aa:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x12>

0000d1ae <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    d1ae:	a2 e3       	ldi	r26, 0x32	; 50
    d1b0:	b0 e0       	ldi	r27, 0x00	; 0
    d1b2:	ed ed       	ldi	r30, 0xDD	; 221
    d1b4:	f8 e6       	ldi	r31, 0x68	; 104
    d1b6:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    d1ba:	9a ab       	std	Y+50, r25	; 0x32
    d1bc:	89 ab       	std	Y+49, r24	; 0x31
    d1be:	e6 2e       	mov	r14, r22
    d1c0:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d1c2:	42 e0       	ldi	r20, 0x02	; 2
    d1c4:	be 01       	movw	r22, r28
    d1c6:	61 5d       	subi	r22, 0xD1	; 209
    d1c8:	7f 4f       	sbci	r23, 0xFF	; 255
    d1ca:	ce 01       	movw	r24, r28
    d1cc:	c1 96       	adiw	r24, 0x31	; 49
    d1ce:	0e 94 b5 4c 	call	0x996a	; 0x996a <mount_volume>
	if (res == FR_OK) {
    d1d2:	00 97       	sbiw	r24, 0x00	; 0
    d1d4:	a9 f5       	brne	.+106    	; 0xd240 <f_chmod+0x92>
		dj.obj.fs = fs;
    d1d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    d1d8:	98 a9       	ldd	r25, Y+48	; 0x30
    d1da:	9a 83       	std	Y+2, r25	; 0x02
    d1dc:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d1de:	80 e0       	ldi	r24, 0x00	; 0
    d1e0:	92 e0       	ldi	r25, 0x02	; 2
    d1e2:	27 d1       	rcall	.+590    	; 0xd432 <ff_memalloc>
    d1e4:	6c 01       	movw	r12, r24
    d1e6:	00 97       	sbiw	r24, 0x00	; 0
    d1e8:	b1 f0       	breq	.+44     	; 0xd216 <f_chmod+0x68>
    d1ea:	ef a5       	ldd	r30, Y+47	; 0x2f
    d1ec:	f8 a9       	ldd	r31, Y+48	; 0x30
    d1ee:	94 87       	std	Z+12, r25	; 0x0c
    d1f0:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d1f2:	69 a9       	ldd	r22, Y+49	; 0x31
    d1f4:	7a a9       	ldd	r23, Y+50	; 0x32
    d1f6:	ce 01       	movw	r24, r28
    d1f8:	01 96       	adiw	r24, 0x01	; 1
    d1fa:	0e 94 30 58 	call	0xb060	; 0xb060 <follow_path>
    d1fe:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d200:	89 2b       	or	r24, r25
    d202:	29 f4       	brne	.+10     	; 0xd20e <f_chmod+0x60>
    d204:	88 a5       	ldd	r24, Y+40	; 0x28
    d206:	80 7a       	andi	r24, 0xA0	; 160
    d208:	49 f0       	breq	.+18     	; 0xd21c <f_chmod+0x6e>
    d20a:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d20c:	10 e0       	ldi	r17, 0x00	; 0
    d20e:	c6 01       	movw	r24, r12
    d210:	13 d1       	rcall	.+550    	; 0xd438 <ff_memfree>
    d212:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d214:	15 c0       	rjmp	.+42     	; 0xd240 <f_chmod+0x92>
    d216:	81 e1       	ldi	r24, 0x11	; 17
    d218:	90 e0       	ldi	r25, 0x00	; 0
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d21a:	12 c0       	rjmp	.+36     	; 0xd240 <f_chmod+0x92>
    d21c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d21e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d220:	83 85       	ldd	r24, Z+11	; 0x0b
    d222:	6e 2d       	mov	r22, r14
    d224:	68 27       	eor	r22, r24
    d226:	6f 21       	and	r22, r15
    d228:	67 72       	andi	r22, 0x27	; 39
    d22a:	68 27       	eor	r22, r24
				fs->wflag = 1;
    d22c:	63 87       	std	Z+11, r22	; 0x0b
    d22e:	8f a5       	ldd	r24, Y+47	; 0x2f
    d230:	98 a9       	ldd	r25, Y+48	; 0x30
    d232:	21 e0       	ldi	r18, 0x01	; 1
    d234:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d236:	23 83       	std	Z+3, r18	; 0x03
    d238:	0e 94 20 4b 	call	0x9640	; 0x9640 <sync_fs>
    d23c:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d23e:	e7 cf       	rjmp	.-50     	; 0xd20e <f_chmod+0x60>
    d240:	e2 96       	adiw	r28, 0x32	; 50
    d242:	e8 e0       	ldi	r30, 0x08	; 8
    d244:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

0000d248 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d248:	a2 e3       	ldi	r26, 0x32	; 50
    d24a:	b0 e0       	ldi	r27, 0x00	; 0
    d24c:	ea e2       	ldi	r30, 0x2A	; 42
    d24e:	f9 e6       	ldi	r31, 0x69	; 105
    d250:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    d254:	9a ab       	std	Y+50, r25	; 0x32
    d256:	89 ab       	std	Y+49, r24	; 0x31
    d258:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d25a:	42 e0       	ldi	r20, 0x02	; 2
    d25c:	be 01       	movw	r22, r28
    d25e:	61 5d       	subi	r22, 0xD1	; 209
    d260:	7f 4f       	sbci	r23, 0xFF	; 255
    d262:	ce 01       	movw	r24, r28
    d264:	c1 96       	adiw	r24, 0x31	; 49
    d266:	0e 94 b5 4c 	call	0x996a	; 0x996a <mount_volume>
	if (res == FR_OK) {
    d26a:	00 97       	sbiw	r24, 0x00	; 0
    d26c:	09 f0       	breq	.+2      	; 0xd270 <f_utime+0x28>
    d26e:	41 c0       	rjmp	.+130    	; 0xd2f2 <f_utime+0xaa>
		dj.obj.fs = fs;
    d270:	8f a5       	ldd	r24, Y+47	; 0x2f
    d272:	98 a9       	ldd	r25, Y+48	; 0x30
    d274:	9a 83       	std	Y+2, r25	; 0x02
    d276:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d278:	80 e0       	ldi	r24, 0x00	; 0
    d27a:	92 e0       	ldi	r25, 0x02	; 2
    d27c:	da d0       	rcall	.+436    	; 0xd432 <ff_memalloc>
    d27e:	7c 01       	movw	r14, r24
    d280:	00 97       	sbiw	r24, 0x00	; 0
    d282:	b1 f0       	breq	.+44     	; 0xd2b0 <f_utime+0x68>
    d284:	ef a5       	ldd	r30, Y+47	; 0x2f
    d286:	f8 a9       	ldd	r31, Y+48	; 0x30
    d288:	94 87       	std	Z+12, r25	; 0x0c
    d28a:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d28c:	69 a9       	ldd	r22, Y+49	; 0x31
    d28e:	7a a9       	ldd	r23, Y+50	; 0x32
    d290:	ce 01       	movw	r24, r28
    d292:	01 96       	adiw	r24, 0x01	; 1
    d294:	0e 94 30 58 	call	0xb060	; 0xb060 <follow_path>
    d298:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d29a:	89 2b       	or	r24, r25
    d29c:	29 f4       	brne	.+10     	; 0xd2a8 <f_utime+0x60>
    d29e:	88 a5       	ldd	r24, Y+40	; 0x28
    d2a0:	80 7a       	andi	r24, 0xA0	; 160
    d2a2:	49 f0       	breq	.+18     	; 0xd2b6 <f_utime+0x6e>
    d2a4:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d2a6:	10 e0       	ldi	r17, 0x00	; 0
    d2a8:	c7 01       	movw	r24, r14
    d2aa:	c6 d0       	rcall	.+396    	; 0xd438 <ff_memfree>
    d2ac:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d2ae:	21 c0       	rjmp	.+66     	; 0xd2f2 <f_utime+0xaa>
    d2b0:	81 e1       	ldi	r24, 0x11	; 17
    d2b2:	90 e0       	ldi	r25, 0x00	; 0
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d2b4:	1e c0       	rjmp	.+60     	; 0xd2f2 <f_utime+0xaa>
    d2b6:	f6 01       	movw	r30, r12
    d2b8:	44 81       	ldd	r20, Z+4	; 0x04
    d2ba:	55 81       	ldd	r21, Z+5	; 0x05
    d2bc:	60 e0       	ldi	r22, 0x00	; 0
    d2be:	70 e0       	ldi	r23, 0x00	; 0
    d2c0:	ba 01       	movw	r22, r20
    d2c2:	55 27       	eor	r21, r21
    d2c4:	44 27       	eor	r20, r20
    d2c6:	86 81       	ldd	r24, Z+6	; 0x06
    d2c8:	97 81       	ldd	r25, Z+7	; 0x07
    d2ca:	a0 e0       	ldi	r26, 0x00	; 0
    d2cc:	b0 e0       	ldi	r27, 0x00	; 0
    d2ce:	48 2b       	or	r20, r24
    d2d0:	59 2b       	or	r21, r25
    d2d2:	6a 2b       	or	r22, r26
    d2d4:	7b 2b       	or	r23, r27
    d2d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d2d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d2da:	46 96       	adiw	r24, 0x16	; 22
    d2dc:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <st_dword>
				fs->wflag = 1;
    d2e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    d2e2:	98 a9       	ldd	r25, Y+48	; 0x30
    d2e4:	21 e0       	ldi	r18, 0x01	; 1
    d2e6:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d2e8:	23 83       	std	Z+3, r18	; 0x03
    d2ea:	0e 94 20 4b 	call	0x9640	; 0x9640 <sync_fs>
    d2ee:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d2f0:	db cf       	rjmp	.-74     	; 0xd2a8 <f_utime+0x60>
    d2f2:	e2 96       	adiw	r28, 0x32	; 50
    d2f4:	e8 e0       	ldi	r30, 0x08	; 8
    d2f6:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

0000d2fa <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d2fa:	a2 e3       	ldi	r26, 0x32	; 50
    d2fc:	b0 e0       	ldi	r27, 0x00	; 0
    d2fe:	e3 e8       	ldi	r30, 0x83	; 131
    d300:	f9 e6       	ldi	r31, 0x69	; 105
    d302:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__prologue_saves__+0xc>
    d306:	9a ab       	std	Y+50, r25	; 0x32
    d308:	89 ab       	std	Y+49, r24	; 0x31
    d30a:	6b 01       	movw	r12, r22
    d30c:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d30e:	40 e0       	ldi	r20, 0x00	; 0
    d310:	be 01       	movw	r22, r28
    d312:	61 5d       	subi	r22, 0xD1	; 209
    d314:	7f 4f       	sbci	r23, 0xFF	; 255
    d316:	ce 01       	movw	r24, r28
    d318:	c1 96       	adiw	r24, 0x31	; 49
    d31a:	0e 94 b5 4c 	call	0x996a	; 0x996a <mount_volume>
    d31e:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d320:	89 2b       	or	r24, r25
    d322:	09 f0       	breq	.+2      	; 0xd326 <f_getlabel+0x2c>
    d324:	81 c0       	rjmp	.+258    	; 0xd428 <f_getlabel+0x12e>
    d326:	c1 14       	cp	r12, r1
    d328:	d1 04       	cpc	r13, r1
    d32a:	09 f4       	brne	.+2      	; 0xd32e <f_getlabel+0x34>
    d32c:	53 c0       	rjmp	.+166    	; 0xd3d4 <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d32e:	8f a5       	ldd	r24, Y+47	; 0x2f
    d330:	98 a9       	ldd	r25, Y+48	; 0x30
    d332:	9a 83       	std	Y+2, r25	; 0x02
    d334:	89 83       	std	Y+1, r24	; 0x01
    d336:	1f 82       	std	Y+7, r1	; 0x07
    d338:	18 86       	std	Y+8, r1	; 0x08
    d33a:	19 86       	std	Y+9, r1	; 0x09
    d33c:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d33e:	40 e0       	ldi	r20, 0x00	; 0
    d340:	50 e0       	ldi	r21, 0x00	; 0
    d342:	ba 01       	movw	r22, r20
    d344:	ce 01       	movw	r24, r28
    d346:	01 96       	adiw	r24, 0x01	; 1
    d348:	0e 94 ca 50 	call	0xa194	; 0xa194 <dir_sdi>
		if (res == FR_OK) {
    d34c:	00 97       	sbiw	r24, 0x00	; 0
    d34e:	e9 f5       	brne	.+122    	; 0xd3ca <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d350:	61 e0       	ldi	r22, 0x01	; 1
    d352:	70 e0       	ldi	r23, 0x00	; 0
    d354:	ce 01       	movw	r24, r28
    d356:	01 96       	adiw	r24, 0x01	; 1
    d358:	0e 94 64 54 	call	0xa8c8	; 0xa8c8 <dir_read>
		 	if (res == FR_OK) {
    d35c:	00 97       	sbiw	r24, 0x00	; 0
    d35e:	a9 f5       	brne	.+106    	; 0xd3ca <f_getlabel+0xd0>
    d360:	00 e0       	ldi	r16, 0x00	; 0
    d362:	10 e0       	ldi	r17, 0x00	; 0
    d364:	80 e0       	ldi	r24, 0x00	; 0
    d366:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d368:	4c 01       	movw	r8, r24
    d36a:	2f ef       	ldi	r18, 0xFF	; 255
    d36c:	82 1a       	sub	r8, r18
    d36e:	92 0a       	sbc	r9, r18
    d370:	2b 8d       	ldd	r18, Y+27	; 0x1b
    d372:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d374:	f9 01       	movw	r30, r18
    d376:	e8 0f       	add	r30, r24
    d378:	f9 1f       	adc	r31, r25
    d37a:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    d37c:	65 eb       	ldi	r22, 0xB5	; 181
    d37e:	71 e0       	ldi	r23, 0x01	; 1
    d380:	90 e0       	ldi	r25, 0x00	; 0
    d382:	90 d0       	rcall	.+288    	; 0xd4a4 <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d384:	00 97       	sbiw	r24, 0x00	; 0
    d386:	19 f4       	brne	.+6      	; 0xd38e <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    d388:	00 e0       	ldi	r16, 0x00	; 0
    d38a:	10 e0       	ldi	r17, 0x00	; 0
    d38c:	13 c0       	rjmp	.+38     	; 0xd3b4 <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d38e:	bc 01       	movw	r22, r24
    d390:	80 e0       	ldi	r24, 0x00	; 0
    d392:	90 e0       	ldi	r25, 0x00	; 0
    d394:	24 e0       	ldi	r18, 0x04	; 4
    d396:	30 e0       	ldi	r19, 0x00	; 0
    d398:	a6 01       	movw	r20, r12
    d39a:	40 0f       	add	r20, r16
    d39c:	51 1f       	adc	r21, r17
    d39e:	0e 94 e5 48 	call	0x91ca	; 0x91ca <put_utf>
    d3a2:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    d3a4:	00 97       	sbiw	r24, 0x00	; 0
    d3a6:	81 f3       	breq	.-32     	; 0xd388 <f_getlabel+0x8e>
						di += wc;
    d3a8:	08 0f       	add	r16, r24
    d3aa:	19 1f       	adc	r17, r25
    d3ac:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d3ae:	8b 30       	cpi	r24, 0x0B	; 11
    d3b0:	91 05       	cpc	r25, r1
    d3b2:	d1 f6       	brne	.-76     	; 0xd368 <f_getlabel+0x6e>
    d3b4:	f6 01       	movw	r30, r12
    d3b6:	e0 0f       	add	r30, r16
    d3b8:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d3ba:	10 82       	st	Z, r1
						if (di == 0) break;
    d3bc:	ce 16       	cp	r12, r30
    d3be:	df 06       	cpc	r13, r31
    d3c0:	49 f0       	breq	.+18     	; 0xd3d4 <f_getlabel+0xda>
					} while (label[--di] == ' ');
    d3c2:	82 91       	ld	r24, -Z
    d3c4:	80 32       	cpi	r24, 0x20	; 32
    d3c6:	c9 f3       	breq	.-14     	; 0xd3ba <f_getlabel+0xc0>
    d3c8:	05 c0       	rjmp	.+10     	; 0xd3d4 <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d3ca:	84 30       	cpi	r24, 0x04	; 4
    d3cc:	91 05       	cpc	r25, r1
    d3ce:	59 f5       	brne	.+86     	; 0xd426 <f_getlabel+0x12c>
			label[0] = 0;
    d3d0:	f6 01       	movw	r30, r12
    d3d2:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d3d4:	a1 14       	cp	r10, r1
    d3d6:	b1 04       	cpc	r11, r1
    d3d8:	39 f1       	breq	.+78     	; 0xd428 <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    d3da:	8f a5       	ldd	r24, Y+47	; 0x2f
    d3dc:	98 a9       	ldd	r25, Y+48	; 0x30
    d3de:	fc 01       	movw	r30, r24
    d3e0:	41 a1       	ldd	r20, Z+33	; 0x21
    d3e2:	52 a1       	ldd	r21, Z+34	; 0x22
    d3e4:	63 a1       	ldd	r22, Z+35	; 0x23
    d3e6:	74 a1       	ldd	r23, Z+36	; 0x24
    d3e8:	0e 94 3a 4c 	call	0x9874	; 0x9874 <move_window>
    d3ec:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    d3ee:	89 2b       	or	r24, r25
    d3f0:	d9 f4       	brne	.+54     	; 0xd428 <f_getlabel+0x12e>
			switch (fs->fs_type) {
    d3f2:	ef a5       	ldd	r30, Y+47	; 0x2f
    d3f4:	f8 a9       	ldd	r31, Y+48	; 0x30
    d3f6:	80 81       	ld	r24, Z
    d3f8:	83 30       	cpi	r24, 0x03	; 3
    d3fa:	29 f0       	breq	.+10     	; 0xd406 <f_getlabel+0x10c>
    d3fc:	84 30       	cpi	r24, 0x04	; 4
    d3fe:	31 f0       	breq	.+12     	; 0xd40c <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d400:	87 e2       	ldi	r24, 0x27	; 39
    d402:	90 e0       	ldi	r25, 0x00	; 0
    d404:	05 c0       	rjmp	.+10     	; 0xd410 <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d406:	83 e4       	ldi	r24, 0x43	; 67
    d408:	90 e0       	ldi	r25, 0x00	; 0
    d40a:	02 c0       	rjmp	.+4      	; 0xd410 <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d40c:	84 e6       	ldi	r24, 0x64	; 100
    d40e:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d410:	f5 96       	adiw	r30, 0x35	; 53
    d412:	8e 0f       	add	r24, r30
    d414:	9f 1f       	adc	r25, r31
    d416:	0e 94 56 47 	call	0x8eac	; 0x8eac <ld_dword>
    d41a:	f5 01       	movw	r30, r10
    d41c:	60 83       	st	Z, r22
    d41e:	71 83       	std	Z+1, r23	; 0x01
    d420:	82 83       	std	Z+2, r24	; 0x02
    d422:	93 83       	std	Z+3, r25	; 0x03
    d424:	01 c0       	rjmp	.+2      	; 0xd428 <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d426:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d428:	c7 01       	movw	r24, r14
    d42a:	e2 96       	adiw	r28, 0x32	; 50
    d42c:	ec e0       	ldi	r30, 0x0C	; 12
    d42e:	0c 94 57 e5 	jmp	0x1caae	; 0x1caae <__epilogue_restores__+0xc>

0000d432 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d432:	0c 94 b1 29 	jmp	0x5362	; 0x5362 <safemalloc>
}
    d436:	08 95       	ret

0000d438 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d438:	0c 94 d2 29 	jmp	0x53a4	; 0x53a4 <safefree>
    d43c:	08 95       	ret

0000d43e <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d43e:	cf 92       	push	r12
    d440:	df 92       	push	r13
    d442:	ef 92       	push	r14
    d444:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d446:	60 38       	cpi	r22, 0x80	; 128
    d448:	71 05       	cpc	r23, r1
    d44a:	81 05       	cpc	r24, r1
    d44c:	91 05       	cpc	r25, r1
    d44e:	10 f4       	brcc	.+4      	; 0xd454 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d450:	cb 01       	movw	r24, r22
    d452:	23 c0       	rjmp	.+70     	; 0xd49a <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d454:	61 15       	cp	r22, r1
    d456:	71 05       	cpc	r23, r1
    d458:	21 e0       	ldi	r18, 0x01	; 1
    d45a:	82 07       	cpc	r24, r18
    d45c:	91 05       	cpc	r25, r1
    d45e:	d8 f4       	brcc	.+54     	; 0xd496 <ff_uni2oem+0x58>
    d460:	45 3b       	cpi	r20, 0xB5	; 181
    d462:	51 40       	sbci	r21, 0x01	; 1
    d464:	c1 f4       	brne	.+48     	; 0xd496 <ff_uni2oem+0x58>
    d466:	e8 e0       	ldi	r30, 0x08	; 8
    d468:	f6 e0       	ldi	r31, 0x06	; 6
    d46a:	20 e0       	ldi	r18, 0x00	; 0
    d46c:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d46e:	c1 90       	ld	r12, Z+
    d470:	d1 90       	ld	r13, Z+
    d472:	e1 2c       	mov	r14, r1
    d474:	f1 2c       	mov	r15, r1
    d476:	6c 15       	cp	r22, r12
    d478:	7d 05       	cpc	r23, r13
    d47a:	8e 05       	cpc	r24, r14
    d47c:	9f 05       	cpc	r25, r15
    d47e:	29 f0       	breq	.+10     	; 0xd48a <ff_uni2oem+0x4c>
    d480:	2f 5f       	subi	r18, 0xFF	; 255
    d482:	3f 4f       	sbci	r19, 0xFF	; 255
    d484:	20 38       	cpi	r18, 0x80	; 128
    d486:	31 05       	cpc	r19, r1
    d488:	91 f7       	brne	.-28     	; 0xd46e <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d48a:	b9 01       	movw	r22, r18
    d48c:	60 58       	subi	r22, 0x80	; 128
    d48e:	7f 4f       	sbci	r23, 0xFF	; 255
    d490:	cb 01       	movw	r24, r22
    d492:	99 27       	eor	r25, r25
    d494:	02 c0       	rjmp	.+4      	; 0xd49a <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d496:	80 e0       	ldi	r24, 0x00	; 0
    d498:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d49a:	ff 90       	pop	r15
    d49c:	ef 90       	pop	r14
    d49e:	df 90       	pop	r13
    d4a0:	cf 90       	pop	r12
    d4a2:	08 95       	ret

0000d4a4 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d4a4:	80 38       	cpi	r24, 0x80	; 128
    d4a6:	91 05       	cpc	r25, r1
    d4a8:	88 f0       	brcs	.+34     	; 0xd4cc <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d4aa:	65 3b       	cpi	r22, 0xB5	; 181
    d4ac:	71 40       	sbci	r23, 0x01	; 1
    d4ae:	61 f4       	brne	.+24     	; 0xd4c8 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d4b0:	8f 3f       	cpi	r24, 0xFF	; 255
    d4b2:	91 05       	cpc	r25, r1
    d4b4:	09 f0       	breq	.+2      	; 0xd4b8 <ff_oem2uni+0x14>
    d4b6:	40 f4       	brcc	.+16     	; 0xd4c8 <ff_oem2uni+0x24>
    d4b8:	88 0f       	add	r24, r24
    d4ba:	99 1f       	adc	r25, r25
    d4bc:	fc 01       	movw	r30, r24
    d4be:	e8 5f       	subi	r30, 0xF8	; 248
    d4c0:	fa 4f       	sbci	r31, 0xFA	; 250
    d4c2:	80 81       	ld	r24, Z
    d4c4:	91 81       	ldd	r25, Z+1	; 0x01
    d4c6:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d4c8:	80 e0       	ldi	r24, 0x00	; 0
    d4ca:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d4cc:	08 95       	ret

0000d4ce <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d4ce:	61 15       	cp	r22, r1
    d4d0:	71 05       	cpc	r23, r1
    d4d2:	21 e0       	ldi	r18, 0x01	; 1
    d4d4:	82 07       	cpc	r24, r18
    d4d6:	91 05       	cpc	r25, r1
    d4d8:	08 f0       	brcs	.+2      	; 0xd4dc <ff_wtoupper+0xe>
    d4da:	5a c0       	rjmp	.+180    	; 0xd590 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d4dc:	61 15       	cp	r22, r1
    d4de:	80 e1       	ldi	r24, 0x10	; 16
    d4e0:	78 07       	cpc	r23, r24
    d4e2:	18 f0       	brcs	.+6      	; 0xd4ea <ff_wtoupper+0x1c>
    d4e4:	aa e5       	ldi	r26, 0x5A	; 90
    d4e6:	b3 e0       	ldi	r27, 0x03	; 3
    d4e8:	02 c0       	rjmp	.+4      	; 0xd4ee <ff_wtoupper+0x20>
    d4ea:	a6 e1       	ldi	r26, 0x16	; 22
    d4ec:	b4 e0       	ldi	r27, 0x04	; 4
		for (;;) {
			bc = *p++;								/* Get the block base */
    d4ee:	2d 91       	ld	r18, X+
    d4f0:	3c 91       	ld	r19, X
    d4f2:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d4f4:	21 15       	cp	r18, r1
    d4f6:	31 05       	cpc	r19, r1
    d4f8:	09 f4       	brne	.+2      	; 0xd4fc <ff_wtoupper+0x2e>
    d4fa:	48 c0       	rjmp	.+144    	; 0xd58c <ff_wtoupper+0xbe>
    d4fc:	62 17       	cp	r22, r18
    d4fe:	73 07       	cpc	r23, r19
    d500:	08 f4       	brcc	.+2      	; 0xd504 <ff_wtoupper+0x36>
    d502:	44 c0       	rjmp	.+136    	; 0xd58c <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d504:	14 96       	adiw	r26, 0x04	; 4
    d506:	fd 01       	movw	r30, r26
    d508:	32 97       	sbiw	r30, 0x02	; 2
    d50a:	80 81       	ld	r24, Z
    d50c:	91 81       	ldd	r25, Z+1	; 0x01
    d50e:	e9 2f       	mov	r30, r25
    d510:	ff 27       	eor	r31, r31
    d512:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d514:	a9 01       	movw	r20, r18
    d516:	48 0f       	add	r20, r24
    d518:	59 1f       	adc	r21, r25
    d51a:	64 17       	cp	r22, r20
    d51c:	75 07       	cpc	r23, r21
    d51e:	70 f5       	brcc	.+92     	; 0xd57c <ff_wtoupper+0xae>
				switch (cmd) {
    d520:	e9 30       	cpi	r30, 0x09	; 9
    d522:	f1 05       	cpc	r31, r1
    d524:	98 f5       	brcc	.+102    	; 0xd58c <ff_wtoupper+0xbe>
    d526:	ec 54       	subi	r30, 0x4C	; 76
    d528:	ff 4f       	sbci	r31, 0xFF	; 255
    d52a:	0c 94 f1 e4 	jmp	0x1c9e2	; 0x1c9e2 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d52e:	62 1b       	sub	r22, r18
    d530:	73 0b       	sbc	r23, r19
    d532:	fb 01       	movw	r30, r22
    d534:	ee 0f       	add	r30, r30
    d536:	ff 1f       	adc	r31, r31
    d538:	ea 0f       	add	r30, r26
    d53a:	fb 1f       	adc	r31, r27
    d53c:	60 81       	ld	r22, Z
    d53e:	71 81       	ldd	r23, Z+1	; 0x01
    d540:	25 c0       	rjmp	.+74     	; 0xd58c <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d542:	cb 01       	movw	r24, r22
    d544:	82 1b       	sub	r24, r18
    d546:	93 0b       	sbc	r25, r19
    d548:	81 70       	andi	r24, 0x01	; 1
    d54a:	99 27       	eor	r25, r25
    d54c:	68 1b       	sub	r22, r24
    d54e:	79 0b       	sbc	r23, r25
    d550:	1d c0       	rjmp	.+58     	; 0xd58c <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d552:	60 51       	subi	r22, 0x10	; 16
    d554:	71 09       	sbc	r23, r1
    d556:	1a c0       	rjmp	.+52     	; 0xd58c <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d558:	60 52       	subi	r22, 0x20	; 32
    d55a:	71 09       	sbc	r23, r1
    d55c:	17 c0       	rjmp	.+46     	; 0xd58c <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d55e:	60 53       	subi	r22, 0x30	; 48
    d560:	71 09       	sbc	r23, r1
    d562:	14 c0       	rjmp	.+40     	; 0xd58c <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d564:	6a 51       	subi	r22, 0x1A	; 26
    d566:	71 09       	sbc	r23, r1
    d568:	11 c0       	rjmp	.+34     	; 0xd58c <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d56a:	68 5f       	subi	r22, 0xF8	; 248
    d56c:	7f 4f       	sbci	r23, 0xFF	; 255
    d56e:	0e c0       	rjmp	.+28     	; 0xd58c <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d570:	60 55       	subi	r22, 0x50	; 80
    d572:	71 09       	sbc	r23, r1
    d574:	0b c0       	rjmp	.+22     	; 0xd58c <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d576:	60 56       	subi	r22, 0x60	; 96
    d578:	7c 41       	sbci	r23, 0x1C	; 28
    d57a:	08 c0       	rjmp	.+16     	; 0xd58c <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d57c:	ef 2b       	or	r30, r31
    d57e:	09 f0       	breq	.+2      	; 0xd582 <ff_wtoupper+0xb4>
    d580:	b6 cf       	rjmp	.-148    	; 0xd4ee <ff_wtoupper+0x20>
    d582:	88 0f       	add	r24, r24
    d584:	99 1f       	adc	r25, r25
    d586:	a8 0f       	add	r26, r24
    d588:	b9 1f       	adc	r27, r25
    d58a:	b1 cf       	rjmp	.-158    	; 0xd4ee <ff_wtoupper+0x20>
		}
		uni = uc;
    d58c:	80 e0       	ldi	r24, 0x00	; 0
    d58e:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d590:	08 95       	ret

0000d592 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
    d592:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_status() );
    d594:	02 c0       	rjmp	.+4      	; 0xd59a <disk_status+0x8>
    d596:	9b c1       	rjmp	.+822    	; 0xd8ce <mmc_disk_status>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_status() );
#endif
	}
	return STA_NOINIT;
    d598:	08 95       	ret
}
    d59a:	81 e0       	ldi	r24, 0x01	; 1
    d59c:	08 95       	ret

0000d59e <disk_initialize>:
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{

	switch (pdrv) {
    d59e:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_initialize() );
    d5a0:	02 c0       	rjmp	.+4      	; 0xd5a6 <disk_initialize+0x8>
    d5a2:	f8 c0       	rjmp	.+496    	; 0xd794 <mmc_disk_initialize>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_initialize() );
#endif
	}
	return STA_NOINIT;
    d5a4:	08 95       	ret
}
    d5a6:	81 e0       	ldi	r24, 0x01	; 1
    d5a8:	08 95       	ret

0000d5aa <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
    d5aa:	0f 93       	push	r16
    d5ac:	1f 93       	push	r17
    d5ae:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d5b0:	81 11       	cpse	r24, r1
    d5b2:	06 c0       	rjmp	.+12     	; 0xd5c0 <disk_read+0x16>
    d5b4:	ba 01       	movw	r22, r20
    d5b6:	a9 01       	movw	r20, r18
    d5b8:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_read(buff, sector, count) );
    d5ba:	98 01       	movw	r18, r16
    d5bc:	8b d1       	rcall	.+790    	; 0xd8d4 <mmc_disk_read>
    d5be:	02 c0       	rjmp	.+4      	; 0xd5c4 <disk_read+0x1a>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_read(buff, sector, count) );
#endif
	}
	return RES_PARERR;
    d5c0:	84 e0       	ldi	r24, 0x04	; 4
    d5c2:	90 e0       	ldi	r25, 0x00	; 0
}
    d5c4:	1f 91       	pop	r17
    d5c6:	0f 91       	pop	r16
    d5c8:	08 95       	ret

0000d5ca <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
    d5ca:	0f 93       	push	r16
    d5cc:	1f 93       	push	r17
    d5ce:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d5d0:	81 11       	cpse	r24, r1
    d5d2:	06 c0       	rjmp	.+12     	; 0xd5e0 <disk_write+0x16>
    d5d4:	ba 01       	movw	r22, r20
    d5d6:	a9 01       	movw	r20, r18
    d5d8:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_write(buff, sector, count) );
    d5da:	98 01       	movw	r18, r16
    d5dc:	c1 d1       	rcall	.+898    	; 0xd960 <mmc_disk_write>
    d5de:	02 c0       	rjmp	.+4      	; 0xd5e4 <disk_write+0x1a>
	case DEV_USB :
		return ( usb_disk_write(buff, sector, count) );
#endif
	}

	return RES_PARERR;
    d5e0:	84 e0       	ldi	r24, 0x04	; 4
    d5e2:	90 e0       	ldi	r25, 0x00	; 0
}
    d5e4:	1f 91       	pop	r17
    d5e6:	0f 91       	pop	r16
    d5e8:	08 95       	ret

0000d5ea <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    d5ea:	96 2f       	mov	r25, r22
    switch (pdrv) {
    d5ec:	81 11       	cpse	r24, r1
    d5ee:	04 c0       	rjmp	.+8      	; 0xd5f8 <disk_ioctl+0xe>
    d5f0:	ba 01       	movw	r22, r20
#ifdef DRV_MMC
    case DEV_MMC :
        return ( mmc_disk_ioctl(cmd, buff) );
    d5f2:	89 2f       	mov	r24, r25
    d5f4:	1a c2       	rjmp	.+1076   	; 0xda2a <mmc_disk_ioctl>
#ifdef DRV_USB
    case DEV_MMC :
        return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d5f6:	08 95       	ret
    d5f8:	84 e0       	ldi	r24, 0x04	; 4
}
    d5fa:	90 e0       	ldi	r25, 0x00	; 0
    d5fc:	08 95       	ret

0000d5fe <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    d5fe:	cd c4       	rjmp	.+2458   	; 0xdf9a <mmc_spi_TXRX>
    d600:	08 95       	ret

0000d602 <deselect>:
    d602:	a2 d4       	rcall	.+2372   	; 0xdf48 <mmc_spi_end>
    d604:	8f ef       	ldi	r24, 0xFF	; 255
    d606:	fb df       	rcall	.-10     	; 0xd5fe <xchg_spi>
    d608:	8f ef       	ldi	r24, 0xFF	; 255
    d60a:	f9 cf       	rjmp	.-14     	; 0xd5fe <xchg_spi>
    d60c:	08 95       	ret

0000d60e <rcvr_datablock>:
    d60e:	0f 93       	push	r16
    d610:	1f 93       	push	r17
    d612:	cf 93       	push	r28
    d614:	df 93       	push	r29
    d616:	ec 01       	movw	r28, r24
    d618:	8b 01       	movw	r16, r22
    d61a:	46 9a       	sbi	0x08, 6	; 8
    d61c:	3e 9a       	sbi	0x07, 6	; 7
    d61e:	88 ee       	ldi	r24, 0xE8	; 232
    d620:	93 e0       	ldi	r25, 0x03	; 3
    d622:	be d4       	rcall	.+2428   	; 0xdfa0 <mmc_set_ms_timeout>
    d624:	8f ef       	ldi	r24, 0xFF	; 255
    d626:	b9 d4       	rcall	.+2418   	; 0xdf9a <mmc_spi_TXRX>
    d628:	8f 3f       	cpi	r24, 0xFF	; 255
    d62a:	31 f4       	brne	.+12     	; 0xd638 <rcvr_datablock+0x2a>
    d62c:	c0 d4       	rcall	.+2432   	; 0xdfae <mmc_test_timeout>
    d62e:	89 2b       	or	r24, r25
    d630:	c9 f3       	breq	.-14     	; 0xd624 <rcvr_datablock+0x16>
    d632:	80 e0       	ldi	r24, 0x00	; 0
    d634:	90 e0       	ldi	r25, 0x00	; 0
    d636:	0d c0       	rjmp	.+26     	; 0xd652 <rcvr_datablock+0x44>
    d638:	8e 3f       	cpi	r24, 0xFE	; 254
    d63a:	d9 f7       	brne	.-10     	; 0xd632 <rcvr_datablock+0x24>
    d63c:	b8 01       	movw	r22, r16
    d63e:	ce 01       	movw	r24, r28
    d640:	a9 d4       	rcall	.+2386   	; 0xdf94 <mmc_spi_RX_buffer>
    d642:	8f ef       	ldi	r24, 0xFF	; 255
    d644:	dc df       	rcall	.-72     	; 0xd5fe <xchg_spi>
    d646:	8f ef       	ldi	r24, 0xFF	; 255
    d648:	da df       	rcall	.-76     	; 0xd5fe <xchg_spi>
    d64a:	46 98       	cbi	0x08, 6	; 8
    d64c:	3e 9a       	sbi	0x07, 6	; 7
    d64e:	81 e0       	ldi	r24, 0x01	; 1
    d650:	90 e0       	ldi	r25, 0x00	; 0
    d652:	df 91       	pop	r29
    d654:	cf 91       	pop	r28
    d656:	1f 91       	pop	r17
    d658:	0f 91       	pop	r16
    d65a:	08 95       	ret

0000d65c <wait_ready>:
    d65c:	cf 93       	push	r28
    d65e:	a0 d4       	rcall	.+2368   	; 0xdfa0 <mmc_set_ms_timeout>
    d660:	8f ef       	ldi	r24, 0xFF	; 255
    d662:	9b d4       	rcall	.+2358   	; 0xdf9a <mmc_spi_TXRX>
    d664:	c8 2f       	mov	r28, r24
    d666:	8f 3f       	cpi	r24, 0xFF	; 255
    d668:	19 f0       	breq	.+6      	; 0xd670 <wait_ready+0x14>
    d66a:	a1 d4       	rcall	.+2370   	; 0xdfae <mmc_test_timeout>
    d66c:	89 2b       	or	r24, r25
    d66e:	c1 f3       	breq	.-16     	; 0xd660 <wait_ready+0x4>
    d670:	81 e0       	ldi	r24, 0x01	; 1
    d672:	90 e0       	ldi	r25, 0x00	; 0
    d674:	cf 3f       	cpi	r28, 0xFF	; 255
    d676:	11 f0       	breq	.+4      	; 0xd67c <wait_ready+0x20>
    d678:	80 e0       	ldi	r24, 0x00	; 0
    d67a:	90 e0       	ldi	r25, 0x00	; 0
    d67c:	cf 91       	pop	r28
    d67e:	08 95       	ret

0000d680 <select>:
    d680:	cf 93       	push	r28
    d682:	df 93       	push	r29
    d684:	54 d4       	rcall	.+2216   	; 0xdf2e <mmc_spi_begin>
    d686:	8f ef       	ldi	r24, 0xFF	; 255
    d688:	ba df       	rcall	.-140    	; 0xd5fe <xchg_spi>
    d68a:	88 ee       	ldi	r24, 0xE8	; 232
    d68c:	93 e0       	ldi	r25, 0x03	; 3
    d68e:	e6 df       	rcall	.-52     	; 0xd65c <wait_ready>
    d690:	ec 01       	movw	r28, r24
    d692:	89 2b       	or	r24, r25
    d694:	61 f4       	brne	.+24     	; 0xd6ae <select+0x2e>
    d696:	82 ec       	ldi	r24, 0xC2	; 194
    d698:	97 e0       	ldi	r25, 0x07	; 7
    d69a:	1f 92       	push	r1
    d69c:	9f 93       	push	r25
    d69e:	8f 93       	push	r24
    d6a0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    d6a4:	ae df       	rcall	.-164    	; 0xd602 <deselect>
    d6a6:	0f 90       	pop	r0
    d6a8:	0f 90       	pop	r0
    d6aa:	0f 90       	pop	r0
    d6ac:	02 c0       	rjmp	.+4      	; 0xd6b2 <select+0x32>
    d6ae:	c1 e0       	ldi	r28, 0x01	; 1
    d6b0:	d0 e0       	ldi	r29, 0x00	; 0
    d6b2:	ce 01       	movw	r24, r28
    d6b4:	df 91       	pop	r29
    d6b6:	cf 91       	pop	r28
    d6b8:	08 95       	ret

0000d6ba <send_cmd>:
    d6ba:	ff 92       	push	r15
    d6bc:	0f 93       	push	r16
    d6be:	1f 93       	push	r17
    d6c0:	cf 93       	push	r28
    d6c2:	df 93       	push	r29
    d6c4:	c8 2f       	mov	r28, r24
    d6c6:	d4 2f       	mov	r29, r20
    d6c8:	15 2f       	mov	r17, r21
    d6ca:	06 2f       	mov	r16, r22
    d6cc:	f7 2e       	mov	r15, r23
    d6ce:	87 ff       	sbrs	r24, 7
    d6d0:	08 c0       	rjmp	.+16     	; 0xd6e2 <send_cmd+0x28>
    d6d2:	40 e0       	ldi	r20, 0x00	; 0
    d6d4:	50 e0       	ldi	r21, 0x00	; 0
    d6d6:	ba 01       	movw	r22, r20
    d6d8:	87 e3       	ldi	r24, 0x37	; 55
    d6da:	ef df       	rcall	.-34     	; 0xd6ba <send_cmd>
    d6dc:	82 30       	cpi	r24, 0x02	; 2
    d6de:	58 f5       	brcc	.+86     	; 0xd736 <send_cmd+0x7c>
    d6e0:	cf 77       	andi	r28, 0x7F	; 127
    d6e2:	cc 30       	cpi	r28, 0x0C	; 12
    d6e4:	71 f4       	brne	.+28     	; 0xd702 <send_cmd+0x48>
    d6e6:	8c 2f       	mov	r24, r28
    d6e8:	80 64       	ori	r24, 0x40	; 64
    d6ea:	89 df       	rcall	.-238    	; 0xd5fe <xchg_spi>
    d6ec:	8f 2d       	mov	r24, r15
    d6ee:	87 df       	rcall	.-242    	; 0xd5fe <xchg_spi>
    d6f0:	80 2f       	mov	r24, r16
    d6f2:	85 df       	rcall	.-246    	; 0xd5fe <xchg_spi>
    d6f4:	81 2f       	mov	r24, r17
    d6f6:	83 df       	rcall	.-250    	; 0xd5fe <xchg_spi>
    d6f8:	8d 2f       	mov	r24, r29
    d6fa:	81 df       	rcall	.-254    	; 0xd5fe <xchg_spi>
    d6fc:	cc 23       	and	r28, r28
    d6fe:	c9 f0       	breq	.+50     	; 0xd732 <send_cmd+0x78>
    d700:	06 c0       	rjmp	.+12     	; 0xd70e <send_cmd+0x54>
    d702:	7f df       	rcall	.-258    	; 0xd602 <deselect>
    d704:	bd df       	rcall	.-134    	; 0xd680 <select>
    d706:	89 2b       	or	r24, r25
    d708:	71 f7       	brne	.-36     	; 0xd6e6 <send_cmd+0x2c>
    d70a:	8f ef       	ldi	r24, 0xFF	; 255
    d70c:	14 c0       	rjmp	.+40     	; 0xd736 <send_cmd+0x7c>
    d70e:	c8 30       	cpi	r28, 0x08	; 8
    d710:	11 f4       	brne	.+4      	; 0xd716 <send_cmd+0x5c>
    d712:	87 e8       	ldi	r24, 0x87	; 135
    d714:	01 c0       	rjmp	.+2      	; 0xd718 <send_cmd+0x5e>
    d716:	81 e0       	ldi	r24, 0x01	; 1
    d718:	72 df       	rcall	.-284    	; 0xd5fe <xchg_spi>
    d71a:	cc 30       	cpi	r28, 0x0C	; 12
    d71c:	11 f4       	brne	.+4      	; 0xd722 <send_cmd+0x68>
    d71e:	8f ef       	ldi	r24, 0xFF	; 255
    d720:	6e df       	rcall	.-292    	; 0xd5fe <xchg_spi>
    d722:	ca e0       	ldi	r28, 0x0A	; 10
    d724:	8f ef       	ldi	r24, 0xFF	; 255
    d726:	39 d4       	rcall	.+2162   	; 0xdf9a <mmc_spi_TXRX>
    d728:	87 ff       	sbrs	r24, 7
    d72a:	05 c0       	rjmp	.+10     	; 0xd736 <send_cmd+0x7c>
    d72c:	c1 50       	subi	r28, 0x01	; 1
    d72e:	d1 f7       	brne	.-12     	; 0xd724 <send_cmd+0x6a>
    d730:	02 c0       	rjmp	.+4      	; 0xd736 <send_cmd+0x7c>
    d732:	85 e9       	ldi	r24, 0x95	; 149
    d734:	f5 cf       	rjmp	.-22     	; 0xd720 <send_cmd+0x66>
    d736:	cd b7       	in	r28, 0x3d	; 61
    d738:	de b7       	in	r29, 0x3e	; 62
    d73a:	e5 e0       	ldi	r30, 0x05	; 5
    d73c:	0c 94 5e e5 	jmp	0x1cabc	; 0x1cabc <__epilogue_restores__+0x1a>

0000d740 <xmit_datablock>:
    d740:	0f 93       	push	r16
    d742:	1f 93       	push	r17
    d744:	cf 93       	push	r28
    d746:	8c 01       	movw	r16, r24
    d748:	c6 2f       	mov	r28, r22
    d74a:	2c 9a       	sbi	0x05, 4	; 5
    d74c:	24 9a       	sbi	0x04, 4	; 4
    d74e:	88 ee       	ldi	r24, 0xE8	; 232
    d750:	93 e0       	ldi	r25, 0x03	; 3
    d752:	84 df       	rcall	.-248    	; 0xd65c <wait_ready>
    d754:	89 2b       	or	r24, r25
    d756:	19 f4       	brne	.+6      	; 0xd75e <xmit_datablock+0x1e>
    d758:	80 e0       	ldi	r24, 0x00	; 0
    d75a:	90 e0       	ldi	r25, 0x00	; 0
    d75c:	17 c0       	rjmp	.+46     	; 0xd78c <xmit_datablock+0x4c>
    d75e:	8c 2f       	mov	r24, r28
    d760:	4e df       	rcall	.-356    	; 0xd5fe <xchg_spi>
    d762:	cd 3f       	cpi	r28, 0xFD	; 253
    d764:	29 f4       	brne	.+10     	; 0xd770 <xmit_datablock+0x30>
    d766:	46 98       	cbi	0x08, 6	; 8
    d768:	3e 9a       	sbi	0x07, 6	; 7
    d76a:	81 e0       	ldi	r24, 0x01	; 1
    d76c:	90 e0       	ldi	r25, 0x00	; 0
    d76e:	0e c0       	rjmp	.+28     	; 0xd78c <xmit_datablock+0x4c>
    d770:	60 e0       	ldi	r22, 0x00	; 0
    d772:	72 e0       	ldi	r23, 0x02	; 2
    d774:	c8 01       	movw	r24, r16
    d776:	0b d4       	rcall	.+2070   	; 0xdf8e <mmc_spi_TX_buffer>
    d778:	8f ef       	ldi	r24, 0xFF	; 255
    d77a:	41 df       	rcall	.-382    	; 0xd5fe <xchg_spi>
    d77c:	8f ef       	ldi	r24, 0xFF	; 255
    d77e:	3f df       	rcall	.-386    	; 0xd5fe <xchg_spi>
    d780:	8f ef       	ldi	r24, 0xFF	; 255
    d782:	0b d4       	rcall	.+2070   	; 0xdf9a <mmc_spi_TXRX>
    d784:	8f 71       	andi	r24, 0x1F	; 31
    d786:	85 30       	cpi	r24, 0x05	; 5
    d788:	39 f7       	brne	.-50     	; 0xd758 <xmit_datablock+0x18>
    d78a:	ed cf       	rjmp	.-38     	; 0xd766 <xmit_datablock+0x26>
    d78c:	cf 91       	pop	r28
    d78e:	1f 91       	pop	r17
    d790:	0f 91       	pop	r16
    d792:	08 95       	ret

0000d794 <mmc_disk_initialize>:
    d794:	a4 e0       	ldi	r26, 0x04	; 4
    d796:	b0 e0       	ldi	r27, 0x00	; 0
    d798:	e0 ed       	ldi	r30, 0xD0	; 208
    d79a:	fb e6       	ldi	r31, 0x6B	; 107
    d79c:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    d7a0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d7a4:	81 fd       	sbrc	r24, 1
    d7a6:	8d c0       	rjmp	.+282    	; 0xd8c2 <mmc_disk_initialize+0x12e>
    d7a8:	d3 d3       	rcall	.+1958   	; 0xdf50 <mmc_slow>
    d7aa:	1a e0       	ldi	r17, 0x0A	; 10
    d7ac:	8f ef       	ldi	r24, 0xFF	; 255
    d7ae:	27 df       	rcall	.-434    	; 0xd5fe <xchg_spi>
    d7b0:	11 50       	subi	r17, 0x01	; 1
    d7b2:	e1 f7       	brne	.-8      	; 0xd7ac <mmc_disk_initialize+0x18>
    d7b4:	40 e0       	ldi	r20, 0x00	; 0
    d7b6:	50 e0       	ldi	r21, 0x00	; 0
    d7b8:	ba 01       	movw	r22, r20
    d7ba:	80 e0       	ldi	r24, 0x00	; 0
    d7bc:	7e df       	rcall	.-260    	; 0xd6ba <send_cmd>
    d7be:	81 30       	cpi	r24, 0x01	; 1
    d7c0:	09 f0       	breq	.+2      	; 0xd7c4 <mmc_disk_initialize+0x30>
    d7c2:	6f c0       	rjmp	.+222    	; 0xd8a2 <mmc_disk_initialize+0x10e>
    d7c4:	80 ed       	ldi	r24, 0xD0	; 208
    d7c6:	97 e0       	ldi	r25, 0x07	; 7
    d7c8:	eb d3       	rcall	.+2006   	; 0xdfa0 <mmc_set_ms_timeout>
    d7ca:	4a ea       	ldi	r20, 0xAA	; 170
    d7cc:	51 e0       	ldi	r21, 0x01	; 1
    d7ce:	60 e0       	ldi	r22, 0x00	; 0
    d7d0:	70 e0       	ldi	r23, 0x00	; 0
    d7d2:	88 e0       	ldi	r24, 0x08	; 8
    d7d4:	72 df       	rcall	.-284    	; 0xd6ba <send_cmd>
    d7d6:	81 30       	cpi	r24, 0x01	; 1
    d7d8:	09 f0       	breq	.+2      	; 0xd7dc <mmc_disk_initialize+0x48>
    d7da:	3d c0       	rjmp	.+122    	; 0xd856 <mmc_disk_initialize+0xc2>
    d7dc:	8e 01       	movw	r16, r28
    d7de:	0f 5f       	subi	r16, 0xFF	; 255
    d7e0:	1f 4f       	sbci	r17, 0xFF	; 255
    d7e2:	6e 01       	movw	r12, r28
    d7e4:	85 e0       	ldi	r24, 0x05	; 5
    d7e6:	c8 0e       	add	r12, r24
    d7e8:	d1 1c       	adc	r13, r1
    d7ea:	78 01       	movw	r14, r16
    d7ec:	8f ef       	ldi	r24, 0xFF	; 255
    d7ee:	d5 d3       	rcall	.+1962   	; 0xdf9a <mmc_spi_TXRX>
    d7f0:	f7 01       	movw	r30, r14
    d7f2:	81 93       	st	Z+, r24
    d7f4:	7f 01       	movw	r14, r30
    d7f6:	ce 16       	cp	r12, r30
    d7f8:	df 06       	cpc	r13, r31
    d7fa:	c1 f7       	brne	.-16     	; 0xd7ec <mmc_disk_initialize+0x58>
    d7fc:	8b 81       	ldd	r24, Y+3	; 0x03
    d7fe:	81 30       	cpi	r24, 0x01	; 1
    d800:	09 f0       	breq	.+2      	; 0xd804 <mmc_disk_initialize+0x70>
    d802:	4f c0       	rjmp	.+158    	; 0xd8a2 <mmc_disk_initialize+0x10e>
    d804:	8c 81       	ldd	r24, Y+4	; 0x04
    d806:	8a 3a       	cpi	r24, 0xAA	; 170
    d808:	09 f0       	breq	.+2      	; 0xd80c <mmc_disk_initialize+0x78>
    d80a:	4b c0       	rjmp	.+150    	; 0xd8a2 <mmc_disk_initialize+0x10e>
    d80c:	d0 d3       	rcall	.+1952   	; 0xdfae <mmc_test_timeout>
    d80e:	89 2b       	or	r24, r25
    d810:	29 f0       	breq	.+10     	; 0xd81c <mmc_disk_initialize+0x88>
    d812:	cd d3       	rcall	.+1946   	; 0xdfae <mmc_test_timeout>
    d814:	89 2b       	or	r24, r25
    d816:	09 f0       	breq	.+2      	; 0xd81a <mmc_disk_initialize+0x86>
    d818:	44 c0       	rjmp	.+136    	; 0xd8a2 <mmc_disk_initialize+0x10e>
    d81a:	09 c0       	rjmp	.+18     	; 0xd82e <mmc_disk_initialize+0x9a>
    d81c:	40 e0       	ldi	r20, 0x00	; 0
    d81e:	50 e0       	ldi	r21, 0x00	; 0
    d820:	60 e0       	ldi	r22, 0x00	; 0
    d822:	70 e4       	ldi	r23, 0x40	; 64
    d824:	89 ea       	ldi	r24, 0xA9	; 169
    d826:	49 df       	rcall	.-366    	; 0xd6ba <send_cmd>
    d828:	81 11       	cpse	r24, r1
    d82a:	f0 cf       	rjmp	.-32     	; 0xd80c <mmc_disk_initialize+0x78>
    d82c:	f2 cf       	rjmp	.-28     	; 0xd812 <mmc_disk_initialize+0x7e>
    d82e:	40 e0       	ldi	r20, 0x00	; 0
    d830:	50 e0       	ldi	r21, 0x00	; 0
    d832:	ba 01       	movw	r22, r20
    d834:	8a e3       	ldi	r24, 0x3A	; 58
    d836:	41 df       	rcall	.-382    	; 0xd6ba <send_cmd>
    d838:	81 11       	cpse	r24, r1
    d83a:	33 c0       	rjmp	.+102    	; 0xd8a2 <mmc_disk_initialize+0x10e>
    d83c:	8f ef       	ldi	r24, 0xFF	; 255
    d83e:	ad d3       	rcall	.+1882   	; 0xdf9a <mmc_spi_TXRX>
    d840:	f8 01       	movw	r30, r16
    d842:	81 93       	st	Z+, r24
    d844:	8f 01       	movw	r16, r30
    d846:	ce 16       	cp	r12, r30
    d848:	df 06       	cpc	r13, r31
    d84a:	c1 f7       	brne	.-16     	; 0xd83c <mmc_disk_initialize+0xa8>
    d84c:	89 81       	ldd	r24, Y+1	; 0x01
    d84e:	86 fd       	sbrc	r24, 6
    d850:	2a c0       	rjmp	.+84     	; 0xd8a6 <mmc_disk_initialize+0x112>
    d852:	14 e0       	ldi	r17, 0x04	; 4
    d854:	29 c0       	rjmp	.+82     	; 0xd8a8 <mmc_disk_initialize+0x114>
    d856:	80 ed       	ldi	r24, 0xD0	; 208
    d858:	97 e0       	ldi	r25, 0x07	; 7
    d85a:	a2 d3       	rcall	.+1860   	; 0xdfa0 <mmc_set_ms_timeout>
    d85c:	40 e0       	ldi	r20, 0x00	; 0
    d85e:	50 e0       	ldi	r21, 0x00	; 0
    d860:	ba 01       	movw	r22, r20
    d862:	89 ea       	ldi	r24, 0xA9	; 169
    d864:	2a df       	rcall	.-428    	; 0xd6ba <send_cmd>
    d866:	82 30       	cpi	r24, 0x02	; 2
    d868:	18 f0       	brcs	.+6      	; 0xd870 <mmc_disk_initialize+0xdc>
    d86a:	11 e0       	ldi	r17, 0x01	; 1
    d86c:	01 e0       	ldi	r16, 0x01	; 1
    d86e:	02 c0       	rjmp	.+4      	; 0xd874 <mmc_disk_initialize+0xe0>
    d870:	12 e0       	ldi	r17, 0x02	; 2
    d872:	09 ea       	ldi	r16, 0xA9	; 169
    d874:	9c d3       	rcall	.+1848   	; 0xdfae <mmc_test_timeout>
    d876:	89 2b       	or	r24, r25
    d878:	21 f0       	breq	.+8      	; 0xd882 <mmc_disk_initialize+0xee>
    d87a:	99 d3       	rcall	.+1842   	; 0xdfae <mmc_test_timeout>
    d87c:	89 2b       	or	r24, r25
    d87e:	89 f4       	brne	.+34     	; 0xd8a2 <mmc_disk_initialize+0x10e>
    d880:	08 c0       	rjmp	.+16     	; 0xd892 <mmc_disk_initialize+0xfe>
    d882:	40 e0       	ldi	r20, 0x00	; 0
    d884:	50 e0       	ldi	r21, 0x00	; 0
    d886:	ba 01       	movw	r22, r20
    d888:	80 2f       	mov	r24, r16
    d88a:	17 df       	rcall	.-466    	; 0xd6ba <send_cmd>
    d88c:	81 11       	cpse	r24, r1
    d88e:	f2 cf       	rjmp	.-28     	; 0xd874 <mmc_disk_initialize+0xe0>
    d890:	f4 cf       	rjmp	.-24     	; 0xd87a <mmc_disk_initialize+0xe6>
    d892:	40 e0       	ldi	r20, 0x00	; 0
    d894:	52 e0       	ldi	r21, 0x02	; 2
    d896:	60 e0       	ldi	r22, 0x00	; 0
    d898:	70 e0       	ldi	r23, 0x00	; 0
    d89a:	80 e1       	ldi	r24, 0x10	; 16
    d89c:	0e df       	rcall	.-484    	; 0xd6ba <send_cmd>
    d89e:	88 23       	and	r24, r24
    d8a0:	19 f0       	breq	.+6      	; 0xd8a8 <mmc_disk_initialize+0x114>
    d8a2:	10 e0       	ldi	r17, 0x00	; 0
    d8a4:	01 c0       	rjmp	.+2      	; 0xd8a8 <mmc_disk_initialize+0x114>
    d8a6:	1c e0       	ldi	r17, 0x0C	; 12
    d8a8:	10 93 13 18 	sts	0x1813, r17	; 0x801813 <CardType>
    d8ac:	aa de       	rcall	.-684    	; 0xd602 <deselect>
    d8ae:	11 23       	and	r17, r17
    d8b0:	39 f0       	breq	.+14     	; 0xd8c0 <mmc_disk_initialize+0x12c>
    d8b2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d8b6:	8e 7f       	andi	r24, 0xFE	; 254
    d8b8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    d8bc:	5b d3       	rcall	.+1718   	; 0xdf74 <mmc_fast>
    d8be:	01 c0       	rjmp	.+2      	; 0xd8c2 <mmc_disk_initialize+0x12e>
    d8c0:	33 d4       	rcall	.+2150   	; 0xe128 <mmc_power_off>
    d8c2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d8c6:	24 96       	adiw	r28, 0x04	; 4
    d8c8:	e8 e0       	ldi	r30, 0x08	; 8
    d8ca:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

0000d8ce <mmc_disk_status>:
    d8ce:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d8d2:	08 95       	ret

0000d8d4 <mmc_disk_read>:
    d8d4:	ef 92       	push	r14
    d8d6:	ff 92       	push	r15
    d8d8:	1f 93       	push	r17
    d8da:	cf 93       	push	r28
    d8dc:	df 93       	push	r29
    d8de:	7c 01       	movw	r14, r24
    d8e0:	e9 01       	movw	r28, r18
    d8e2:	20 97       	sbiw	r28, 0x00	; 0
    d8e4:	19 f4       	brne	.+6      	; 0xd8ec <mmc_disk_read+0x18>
    d8e6:	8d de       	rcall	.-742    	; 0xd602 <deselect>
    d8e8:	84 e0       	ldi	r24, 0x04	; 4
    d8ea:	06 c0       	rjmp	.+12     	; 0xd8f8 <mmc_disk_read+0x24>
    d8ec:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d8f0:	80 ff       	sbrs	r24, 0
    d8f2:	04 c0       	rjmp	.+8      	; 0xd8fc <mmc_disk_read+0x28>
    d8f4:	86 de       	rcall	.-756    	; 0xd602 <deselect>
    d8f6:	83 e0       	ldi	r24, 0x03	; 3
    d8f8:	90 e0       	ldi	r25, 0x00	; 0
    d8fa:	2c c0       	rjmp	.+88     	; 0xd954 <mmc_disk_read+0x80>
    d8fc:	80 91 13 18 	lds	r24, 0x1813	; 0x801813 <CardType>
    d900:	83 fd       	sbrc	r24, 3
    d902:	07 c0       	rjmp	.+14     	; 0xd912 <mmc_disk_read+0x3e>
    d904:	89 e0       	ldi	r24, 0x09	; 9
    d906:	44 0f       	add	r20, r20
    d908:	55 1f       	adc	r21, r21
    d90a:	66 1f       	adc	r22, r22
    d90c:	77 1f       	adc	r23, r23
    d90e:	8a 95       	dec	r24
    d910:	d1 f7       	brne	.-12     	; 0xd906 <mmc_disk_read+0x32>
    d912:	c2 30       	cpi	r28, 0x02	; 2
    d914:	d1 05       	cpc	r29, r1
    d916:	10 f4       	brcc	.+4      	; 0xd91c <mmc_disk_read+0x48>
    d918:	11 e1       	ldi	r17, 0x11	; 17
    d91a:	01 c0       	rjmp	.+2      	; 0xd91e <mmc_disk_read+0x4a>
    d91c:	12 e1       	ldi	r17, 0x12	; 18
    d91e:	81 2f       	mov	r24, r17
    d920:	cc de       	rcall	.-616    	; 0xd6ba <send_cmd>
    d922:	81 11       	cpse	r24, r1
    d924:	11 c0       	rjmp	.+34     	; 0xd948 <mmc_disk_read+0x74>
    d926:	60 e0       	ldi	r22, 0x00	; 0
    d928:	72 e0       	ldi	r23, 0x02	; 2
    d92a:	c7 01       	movw	r24, r14
    d92c:	70 de       	rcall	.-800    	; 0xd60e <rcvr_datablock>
    d92e:	89 2b       	or	r24, r25
    d930:	21 f0       	breq	.+8      	; 0xd93a <mmc_disk_read+0x66>
    d932:	8e ef       	ldi	r24, 0xFE	; 254
    d934:	f8 1a       	sub	r15, r24
    d936:	21 97       	sbiw	r28, 0x01	; 1
    d938:	b1 f7       	brne	.-20     	; 0xd926 <mmc_disk_read+0x52>
    d93a:	12 31       	cpi	r17, 0x12	; 18
    d93c:	29 f4       	brne	.+10     	; 0xd948 <mmc_disk_read+0x74>
    d93e:	40 e0       	ldi	r20, 0x00	; 0
    d940:	50 e0       	ldi	r21, 0x00	; 0
    d942:	ba 01       	movw	r22, r20
    d944:	8c e0       	ldi	r24, 0x0C	; 12
    d946:	b9 de       	rcall	.-654    	; 0xd6ba <send_cmd>
    d948:	5c de       	rcall	.-840    	; 0xd602 <deselect>
    d94a:	81 e0       	ldi	r24, 0x01	; 1
    d94c:	90 e0       	ldi	r25, 0x00	; 0
    d94e:	cd 2b       	or	r28, r29
    d950:	09 f4       	brne	.+2      	; 0xd954 <mmc_disk_read+0x80>
    d952:	80 e0       	ldi	r24, 0x00	; 0
    d954:	df 91       	pop	r29
    d956:	cf 91       	pop	r28
    d958:	1f 91       	pop	r17
    d95a:	ff 90       	pop	r15
    d95c:	ef 90       	pop	r14
    d95e:	08 95       	ret

0000d960 <mmc_disk_write>:
    d960:	a0 e0       	ldi	r26, 0x00	; 0
    d962:	b0 e0       	ldi	r27, 0x00	; 0
    d964:	e6 eb       	ldi	r30, 0xB6	; 182
    d966:	fc e6       	ldi	r31, 0x6C	; 108
    d968:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    d96c:	8c 01       	movw	r16, r24
    d96e:	6a 01       	movw	r12, r20
    d970:	7b 01       	movw	r14, r22
    d972:	e9 01       	movw	r28, r18
    d974:	20 97       	sbiw	r28, 0x00	; 0
    d976:	19 f4       	brne	.+6      	; 0xd97e <mmc_disk_write+0x1e>
    d978:	44 de       	rcall	.-888    	; 0xd602 <deselect>
    d97a:	84 e0       	ldi	r24, 0x04	; 4
    d97c:	06 c0       	rjmp	.+12     	; 0xd98a <mmc_disk_write+0x2a>
    d97e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d982:	80 ff       	sbrs	r24, 0
    d984:	04 c0       	rjmp	.+8      	; 0xd98e <mmc_disk_write+0x2e>
    d986:	3d de       	rcall	.-902    	; 0xd602 <deselect>
    d988:	83 e0       	ldi	r24, 0x03	; 3
    d98a:	90 e0       	ldi	r25, 0x00	; 0
    d98c:	49 c0       	rjmp	.+146    	; 0xda20 <mmc_disk_write+0xc0>
    d98e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d992:	82 ff       	sbrs	r24, 2
    d994:	03 c0       	rjmp	.+6      	; 0xd99c <mmc_disk_write+0x3c>
    d996:	35 de       	rcall	.-918    	; 0xd602 <deselect>
    d998:	82 e0       	ldi	r24, 0x02	; 2
    d99a:	f7 cf       	rjmp	.-18     	; 0xd98a <mmc_disk_write+0x2a>
    d99c:	80 91 13 18 	lds	r24, 0x1813	; 0x801813 <CardType>
    d9a0:	83 fd       	sbrc	r24, 3
    d9a2:	07 c0       	rjmp	.+14     	; 0xd9b2 <mmc_disk_write+0x52>
    d9a4:	99 e0       	ldi	r25, 0x09	; 9
    d9a6:	cc 0c       	add	r12, r12
    d9a8:	dd 1c       	adc	r13, r13
    d9aa:	ee 1c       	adc	r14, r14
    d9ac:	ff 1c       	adc	r15, r15
    d9ae:	9a 95       	dec	r25
    d9b0:	d1 f7       	brne	.-12     	; 0xd9a6 <mmc_disk_write+0x46>
    d9b2:	c1 30       	cpi	r28, 0x01	; 1
    d9b4:	d1 05       	cpc	r29, r1
    d9b6:	89 f4       	brne	.+34     	; 0xd9da <mmc_disk_write+0x7a>
    d9b8:	b7 01       	movw	r22, r14
    d9ba:	a6 01       	movw	r20, r12
    d9bc:	88 e1       	ldi	r24, 0x18	; 24
    d9be:	7d de       	rcall	.-774    	; 0xd6ba <send_cmd>
    d9c0:	81 11       	cpse	r24, r1
    d9c2:	26 c0       	rjmp	.+76     	; 0xda10 <mmc_disk_write+0xb0>
    d9c4:	6e ef       	ldi	r22, 0xFE	; 254
    d9c6:	c8 01       	movw	r24, r16
    d9c8:	bb de       	rcall	.-650    	; 0xd740 <xmit_datablock>
    d9ca:	31 e0       	ldi	r19, 0x01	; 1
    d9cc:	20 e0       	ldi	r18, 0x00	; 0
    d9ce:	89 2b       	or	r24, r25
    d9d0:	09 f0       	breq	.+2      	; 0xd9d4 <mmc_disk_write+0x74>
    d9d2:	30 e0       	ldi	r19, 0x00	; 0
    d9d4:	c3 2f       	mov	r28, r19
    d9d6:	d2 2f       	mov	r29, r18
    d9d8:	1d c0       	rjmp	.+58     	; 0xda14 <mmc_disk_write+0xb4>
    d9da:	86 70       	andi	r24, 0x06	; 6
    d9dc:	29 f0       	breq	.+10     	; 0xd9e8 <mmc_disk_write+0x88>
    d9de:	ae 01       	movw	r20, r28
    d9e0:	60 e0       	ldi	r22, 0x00	; 0
    d9e2:	70 e0       	ldi	r23, 0x00	; 0
    d9e4:	87 e9       	ldi	r24, 0x97	; 151
    d9e6:	69 de       	rcall	.-814    	; 0xd6ba <send_cmd>
    d9e8:	b7 01       	movw	r22, r14
    d9ea:	a6 01       	movw	r20, r12
    d9ec:	89 e1       	ldi	r24, 0x19	; 25
    d9ee:	65 de       	rcall	.-822    	; 0xd6ba <send_cmd>
    d9f0:	81 11       	cpse	r24, r1
    d9f2:	10 c0       	rjmp	.+32     	; 0xda14 <mmc_disk_write+0xb4>
    d9f4:	6c ef       	ldi	r22, 0xFC	; 252
    d9f6:	c8 01       	movw	r24, r16
    d9f8:	a3 de       	rcall	.-698    	; 0xd740 <xmit_datablock>
    d9fa:	89 2b       	or	r24, r25
    d9fc:	19 f0       	breq	.+6      	; 0xda04 <mmc_disk_write+0xa4>
    d9fe:	1e 5f       	subi	r17, 0xFE	; 254
    da00:	21 97       	sbiw	r28, 0x01	; 1
    da02:	c1 f7       	brne	.-16     	; 0xd9f4 <mmc_disk_write+0x94>
    da04:	6d ef       	ldi	r22, 0xFD	; 253
    da06:	80 e0       	ldi	r24, 0x00	; 0
    da08:	90 e0       	ldi	r25, 0x00	; 0
    da0a:	9a de       	rcall	.-716    	; 0xd740 <xmit_datablock>
    da0c:	89 2b       	or	r24, r25
    da0e:	11 f4       	brne	.+4      	; 0xda14 <mmc_disk_write+0xb4>
    da10:	c1 e0       	ldi	r28, 0x01	; 1
    da12:	d0 e0       	ldi	r29, 0x00	; 0
    da14:	f6 dd       	rcall	.-1044   	; 0xd602 <deselect>
    da16:	81 e0       	ldi	r24, 0x01	; 1
    da18:	90 e0       	ldi	r25, 0x00	; 0
    da1a:	cd 2b       	or	r28, r29
    da1c:	09 f4       	brne	.+2      	; 0xda20 <mmc_disk_write+0xc0>
    da1e:	80 e0       	ldi	r24, 0x00	; 0
    da20:	cd b7       	in	r28, 0x3d	; 61
    da22:	de b7       	in	r29, 0x3e	; 62
    da24:	e8 e0       	ldi	r30, 0x08	; 8
    da26:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

0000da2a <mmc_disk_ioctl>:
    da2a:	a0 e1       	ldi	r26, 0x10	; 16
    da2c:	b0 e0       	ldi	r27, 0x00	; 0
    da2e:	eb e1       	ldi	r30, 0x1B	; 27
    da30:	fd e6       	ldi	r31, 0x6D	; 109
    da32:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    da36:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Stat>
    da3a:	90 fd       	sbrc	r25, 0
    da3c:	2b c2       	rjmp	.+1110   	; 0xde94 <mmc_disk_ioctl+0x46a>
    da3e:	8b 01       	movw	r16, r22
    da40:	83 33       	cpi	r24, 0x33	; 51
    da42:	09 f4       	brne	.+2      	; 0xda46 <mmc_disk_ioctl+0x1c>
    da44:	01 c1       	rjmp	.+514    	; 0xdc48 <mmc_disk_ioctl+0x21e>
    da46:	a0 f4       	brcc	.+40     	; 0xda70 <mmc_disk_ioctl+0x46>
    da48:	83 30       	cpi	r24, 0x03	; 3
    da4a:	09 f4       	brne	.+2      	; 0xda4e <mmc_disk_ioctl+0x24>
    da4c:	85 c0       	rjmp	.+266    	; 0xdb58 <mmc_disk_ioctl+0x12e>
    da4e:	28 f4       	brcc	.+10     	; 0xda5a <mmc_disk_ioctl+0x30>
    da50:	88 23       	and	r24, r24
    da52:	11 f1       	breq	.+68     	; 0xda98 <mmc_disk_ioctl+0x6e>
    da54:	81 30       	cpi	r24, 0x01	; 1
    da56:	11 f1       	breq	.+68     	; 0xda9c <mmc_disk_ioctl+0x72>
    da58:	1f c2       	rjmp	.+1086   	; 0xde98 <mmc_disk_ioctl+0x46e>
    da5a:	87 30       	cpi	r24, 0x07	; 7
    da5c:	09 f4       	brne	.+2      	; 0xda60 <mmc_disk_ioctl+0x36>
    da5e:	2a c1       	rjmp	.+596    	; 0xdcb4 <mmc_disk_ioctl+0x28a>
    da60:	82 33       	cpi	r24, 0x32	; 50
    da62:	09 f0       	breq	.+2      	; 0xda66 <mmc_disk_ioctl+0x3c>
    da64:	19 c2       	rjmp	.+1074   	; 0xde98 <mmc_disk_ioctl+0x46e>
    da66:	80 91 13 18 	lds	r24, 0x1813	; 0x801813 <CardType>
    da6a:	fb 01       	movw	r30, r22
    da6c:	80 83       	st	Z, r24
    da6e:	28 c1       	rjmp	.+592    	; 0xdcc0 <mmc_disk_ioctl+0x296>
    da70:	86 33       	cpi	r24, 0x36	; 54
    da72:	09 f4       	brne	.+2      	; 0xda76 <mmc_disk_ioctl+0x4c>
    da74:	0c c1       	rjmp	.+536    	; 0xdc8e <mmc_disk_ioctl+0x264>
    da76:	38 f4       	brcc	.+14     	; 0xda86 <mmc_disk_ioctl+0x5c>
    da78:	84 33       	cpi	r24, 0x34	; 52
    da7a:	09 f4       	brne	.+2      	; 0xda7e <mmc_disk_ioctl+0x54>
    da7c:	ea c0       	rjmp	.+468    	; 0xdc52 <mmc_disk_ioctl+0x228>
    da7e:	85 33       	cpi	r24, 0x35	; 53
    da80:	09 f4       	brne	.+2      	; 0xda84 <mmc_disk_ioctl+0x5a>
    da82:	f1 c0       	rjmp	.+482    	; 0xdc66 <mmc_disk_ioctl+0x23c>
    da84:	09 c2       	rjmp	.+1042   	; 0xde98 <mmc_disk_ioctl+0x46e>
    da86:	88 33       	cpi	r24, 0x38	; 56
    da88:	09 f4       	brne	.+2      	; 0xda8c <mmc_disk_ioctl+0x62>
    da8a:	74 c1       	rjmp	.+744    	; 0xdd74 <mmc_disk_ioctl+0x34a>
    da8c:	08 f4       	brcc	.+2      	; 0xda90 <mmc_disk_ioctl+0x66>
    da8e:	1a c1       	rjmp	.+564    	; 0xdcc4 <mmc_disk_ioctl+0x29a>
    da90:	89 33       	cpi	r24, 0x39	; 57
    da92:	09 f4       	brne	.+2      	; 0xda96 <mmc_disk_ioctl+0x6c>
    da94:	bc c1       	rjmp	.+888    	; 0xde0e <mmc_disk_ioctl+0x3e4>
    da96:	00 c2       	rjmp	.+1024   	; 0xde98 <mmc_disk_ioctl+0x46e>
    da98:	f3 dd       	rcall	.-1050   	; 0xd680 <select>
    da9a:	06 c1       	rjmp	.+524    	; 0xdca8 <mmc_disk_ioctl+0x27e>
    da9c:	40 e0       	ldi	r20, 0x00	; 0
    da9e:	50 e0       	ldi	r21, 0x00	; 0
    daa0:	ba 01       	movw	r22, r20
    daa2:	89 e0       	ldi	r24, 0x09	; 9
    daa4:	0a de       	rcall	.-1004   	; 0xd6ba <send_cmd>
    daa6:	81 11       	cpse	r24, r1
    daa8:	f1 c1       	rjmp	.+994    	; 0xde8c <mmc_disk_ioctl+0x462>
    daaa:	60 e1       	ldi	r22, 0x10	; 16
    daac:	70 e0       	ldi	r23, 0x00	; 0
    daae:	ce 01       	movw	r24, r28
    dab0:	01 96       	adiw	r24, 0x01	; 1
    dab2:	ad dd       	rcall	.-1190   	; 0xd60e <rcvr_datablock>
    dab4:	89 2b       	or	r24, r25
    dab6:	09 f4       	brne	.+2      	; 0xdaba <mmc_disk_ioctl+0x90>
    dab8:	e9 c1       	rjmp	.+978    	; 0xde8c <mmc_disk_ioctl+0x462>
    daba:	99 81       	ldd	r25, Y+1	; 0x01
    dabc:	92 95       	swap	r25
    dabe:	96 95       	lsr	r25
    dac0:	96 95       	lsr	r25
    dac2:	93 70       	andi	r25, 0x03	; 3
    dac4:	29 85       	ldd	r18, Y+9	; 0x09
    dac6:	4a 85       	ldd	r20, Y+10	; 0x0a
    dac8:	88 85       	ldd	r24, Y+8	; 0x08
    daca:	91 30       	cpi	r25, 0x01	; 1
    dacc:	d9 f4       	brne	.+54     	; 0xdb04 <mmc_disk_ioctl+0xda>
    dace:	30 e0       	ldi	r19, 0x00	; 0
    dad0:	32 2f       	mov	r19, r18
    dad2:	22 27       	eor	r18, r18
    dad4:	24 0f       	add	r18, r20
    dad6:	31 1d       	adc	r19, r1
    dad8:	8f 73       	andi	r24, 0x3F	; 63
    dada:	90 e0       	ldi	r25, 0x00	; 0
    dadc:	a0 e0       	ldi	r26, 0x00	; 0
    dade:	b0 e0       	ldi	r27, 0x00	; 0
    dae0:	dc 01       	movw	r26, r24
    dae2:	99 27       	eor	r25, r25
    dae4:	88 27       	eor	r24, r24
    dae6:	01 96       	adiw	r24, 0x01	; 1
    dae8:	a1 1d       	adc	r26, r1
    daea:	b1 1d       	adc	r27, r1
    daec:	82 0f       	add	r24, r18
    daee:	93 1f       	adc	r25, r19
    daf0:	a1 1d       	adc	r26, r1
    daf2:	b1 1d       	adc	r27, r1
    daf4:	fa e0       	ldi	r31, 0x0A	; 10
    daf6:	88 0f       	add	r24, r24
    daf8:	99 1f       	adc	r25, r25
    dafa:	aa 1f       	adc	r26, r26
    dafc:	bb 1f       	adc	r27, r27
    dafe:	fa 95       	dec	r31
    db00:	d1 f7       	brne	.-12     	; 0xdaf6 <mmc_disk_ioctl+0xcc>
    db02:	9b c0       	rjmp	.+310    	; 0xdc3a <mmc_disk_ioctl+0x210>
    db04:	22 95       	swap	r18
    db06:	26 95       	lsr	r18
    db08:	26 95       	lsr	r18
    db0a:	23 70       	andi	r18, 0x03	; 3
    db0c:	f4 e0       	ldi	r31, 0x04	; 4
    db0e:	8f 9f       	mul	r24, r31
    db10:	c0 01       	movw	r24, r0
    db12:	11 24       	eor	r1, r1
    db14:	82 0f       	add	r24, r18
    db16:	91 1d       	adc	r25, r1
    db18:	01 96       	adiw	r24, 0x01	; 1
    db1a:	2f 81       	ldd	r18, Y+7	; 0x07
    db1c:	23 70       	andi	r18, 0x03	; 3
    db1e:	30 e0       	ldi	r19, 0x00	; 0
    db20:	32 2f       	mov	r19, r18
    db22:	22 27       	eor	r18, r18
    db24:	33 0f       	add	r19, r19
    db26:	33 0f       	add	r19, r19
    db28:	82 0f       	add	r24, r18
    db2a:	93 1f       	adc	r25, r19
    db2c:	a0 e0       	ldi	r26, 0x00	; 0
    db2e:	b0 e0       	ldi	r27, 0x00	; 0
    db30:	2e 81       	ldd	r18, Y+6	; 0x06
    db32:	32 2f       	mov	r19, r18
    db34:	3f 70       	andi	r19, 0x0F	; 15
    db36:	2b 85       	ldd	r18, Y+11	; 0x0b
    db38:	22 1f       	adc	r18, r18
    db3a:	22 27       	eor	r18, r18
    db3c:	22 1f       	adc	r18, r18
    db3e:	23 0f       	add	r18, r19
    db40:	43 70       	andi	r20, 0x03	; 3
    db42:	44 0f       	add	r20, r20
    db44:	42 0f       	add	r20, r18
    db46:	47 50       	subi	r20, 0x07	; 7
    db48:	04 c0       	rjmp	.+8      	; 0xdb52 <mmc_disk_ioctl+0x128>
    db4a:	88 0f       	add	r24, r24
    db4c:	99 1f       	adc	r25, r25
    db4e:	aa 1f       	adc	r26, r26
    db50:	bb 1f       	adc	r27, r27
    db52:	4a 95       	dec	r20
    db54:	d2 f7       	brpl	.-12     	; 0xdb4a <mmc_disk_ioctl+0x120>
    db56:	71 c0       	rjmp	.+226    	; 0xdc3a <mmc_disk_ioctl+0x210>
    db58:	80 91 13 18 	lds	r24, 0x1813	; 0x801813 <CardType>
    db5c:	40 e0       	ldi	r20, 0x00	; 0
    db5e:	50 e0       	ldi	r21, 0x00	; 0
    db60:	ba 01       	movw	r22, r20
    db62:	82 ff       	sbrs	r24, 2
    db64:	24 c0       	rjmp	.+72     	; 0xdbae <mmc_disk_ioctl+0x184>
    db66:	8d e8       	ldi	r24, 0x8D	; 141
    db68:	a8 dd       	rcall	.-1200   	; 0xd6ba <send_cmd>
    db6a:	81 11       	cpse	r24, r1
    db6c:	8f c1       	rjmp	.+798    	; 0xde8c <mmc_disk_ioctl+0x462>
    db6e:	8f ef       	ldi	r24, 0xFF	; 255
    db70:	46 dd       	rcall	.-1396   	; 0xd5fe <xchg_spi>
    db72:	60 e1       	ldi	r22, 0x10	; 16
    db74:	70 e0       	ldi	r23, 0x00	; 0
    db76:	ce 01       	movw	r24, r28
    db78:	01 96       	adiw	r24, 0x01	; 1
    db7a:	49 dd       	rcall	.-1390   	; 0xd60e <rcvr_datablock>
    db7c:	89 2b       	or	r24, r25
    db7e:	09 f4       	brne	.+2      	; 0xdb82 <mmc_disk_ioctl+0x158>
    db80:	85 c1       	rjmp	.+778    	; 0xde8c <mmc_disk_ioctl+0x462>
    db82:	50 e3       	ldi	r21, 0x30	; 48
    db84:	f5 2e       	mov	r15, r21
    db86:	8f ef       	ldi	r24, 0xFF	; 255
    db88:	3a dd       	rcall	.-1420   	; 0xd5fe <xchg_spi>
    db8a:	fa 94       	dec	r15
    db8c:	f1 10       	cpse	r15, r1
    db8e:	fb cf       	rjmp	.-10     	; 0xdb86 <mmc_disk_ioctl+0x15c>
    db90:	2b 85       	ldd	r18, Y+11	; 0x0b
    db92:	22 95       	swap	r18
    db94:	2f 70       	andi	r18, 0x0F	; 15
    db96:	80 e1       	ldi	r24, 0x10	; 16
    db98:	90 e0       	ldi	r25, 0x00	; 0
    db9a:	a0 e0       	ldi	r26, 0x00	; 0
    db9c:	b0 e0       	ldi	r27, 0x00	; 0
    db9e:	04 c0       	rjmp	.+8      	; 0xdba8 <mmc_disk_ioctl+0x17e>
    dba0:	88 0f       	add	r24, r24
    dba2:	99 1f       	adc	r25, r25
    dba4:	aa 1f       	adc	r26, r26
    dba6:	bb 1f       	adc	r27, r27
    dba8:	2a 95       	dec	r18
    dbaa:	d2 f7       	brpl	.-12     	; 0xdba0 <mmc_disk_ioctl+0x176>
    dbac:	46 c0       	rjmp	.+140    	; 0xdc3a <mmc_disk_ioctl+0x210>
    dbae:	89 e0       	ldi	r24, 0x09	; 9
    dbb0:	84 dd       	rcall	.-1272   	; 0xd6ba <send_cmd>
    dbb2:	81 11       	cpse	r24, r1
    dbb4:	6b c1       	rjmp	.+726    	; 0xde8c <mmc_disk_ioctl+0x462>
    dbb6:	60 e1       	ldi	r22, 0x10	; 16
    dbb8:	70 e0       	ldi	r23, 0x00	; 0
    dbba:	ce 01       	movw	r24, r28
    dbbc:	01 96       	adiw	r24, 0x01	; 1
    dbbe:	27 dd       	rcall	.-1458   	; 0xd60e <rcvr_datablock>
    dbc0:	89 2b       	or	r24, r25
    dbc2:	09 f4       	brne	.+2      	; 0xdbc6 <mmc_disk_ioctl+0x19c>
    dbc4:	63 c1       	rjmp	.+710    	; 0xde8c <mmc_disk_ioctl+0x462>
    dbc6:	90 91 13 18 	lds	r25, 0x1813	; 0x801813 <CardType>
    dbca:	2b 85       	ldd	r18, Y+11	; 0x0b
    dbcc:	8c 85       	ldd	r24, Y+12	; 0x0c
    dbce:	91 ff       	sbrs	r25, 1
    dbd0:	16 c0       	rjmp	.+44     	; 0xdbfe <mmc_disk_ioctl+0x1d4>
    dbd2:	2f 73       	andi	r18, 0x3F	; 63
    dbd4:	88 1f       	adc	r24, r24
    dbd6:	88 27       	eor	r24, r24
    dbd8:	88 1f       	adc	r24, r24
    dbda:	90 e0       	ldi	r25, 0x00	; 0
    dbdc:	01 96       	adiw	r24, 0x01	; 1
    dbde:	82 0f       	add	r24, r18
    dbe0:	91 1d       	adc	r25, r1
    dbe2:	82 0f       	add	r24, r18
    dbe4:	91 1d       	adc	r25, r1
    dbe6:	2e 85       	ldd	r18, Y+14	; 0x0e
    dbe8:	22 95       	swap	r18
    dbea:	26 95       	lsr	r18
    dbec:	26 95       	lsr	r18
    dbee:	23 70       	andi	r18, 0x03	; 3
    dbf0:	21 50       	subi	r18, 0x01	; 1
    dbf2:	02 c0       	rjmp	.+4      	; 0xdbf8 <mmc_disk_ioctl+0x1ce>
    dbf4:	88 0f       	add	r24, r24
    dbf6:	99 1f       	adc	r25, r25
    dbf8:	2a 95       	dec	r18
    dbfa:	e2 f7       	brpl	.-8      	; 0xdbf4 <mmc_disk_ioctl+0x1ca>
    dbfc:	1c c0       	rjmp	.+56     	; 0xdc36 <mmc_disk_ioctl+0x20c>
    dbfe:	38 2f       	mov	r19, r24
    dc00:	33 70       	andi	r19, 0x03	; 3
    dc02:	82 95       	swap	r24
    dc04:	86 95       	lsr	r24
    dc06:	87 70       	andi	r24, 0x07	; 7
    dc08:	90 e0       	ldi	r25, 0x00	; 0
    dc0a:	f8 e0       	ldi	r31, 0x08	; 8
    dc0c:	3f 9f       	mul	r19, r31
    dc0e:	80 0d       	add	r24, r0
    dc10:	91 1d       	adc	r25, r1
    dc12:	11 24       	eor	r1, r1
    dc14:	01 96       	adiw	r24, 0x01	; 1
    dc16:	2c 77       	andi	r18, 0x7C	; 124
    dc18:	30 e0       	ldi	r19, 0x00	; 0
    dc1a:	35 95       	asr	r19
    dc1c:	27 95       	ror	r18
    dc1e:	35 95       	asr	r19
    dc20:	27 95       	ror	r18
    dc22:	2f 5f       	subi	r18, 0xFF	; 255
    dc24:	3f 4f       	sbci	r19, 0xFF	; 255
    dc26:	82 9f       	mul	r24, r18
    dc28:	a0 01       	movw	r20, r0
    dc2a:	83 9f       	mul	r24, r19
    dc2c:	50 0d       	add	r21, r0
    dc2e:	92 9f       	mul	r25, r18
    dc30:	50 0d       	add	r21, r0
    dc32:	11 24       	eor	r1, r1
    dc34:	ca 01       	movw	r24, r20
    dc36:	a0 e0       	ldi	r26, 0x00	; 0
    dc38:	b0 e0       	ldi	r27, 0x00	; 0
    dc3a:	f8 01       	movw	r30, r16
    dc3c:	80 83       	st	Z, r24
    dc3e:	91 83       	std	Z+1, r25	; 0x01
    dc40:	a2 83       	std	Z+2, r26	; 0x02
    dc42:	b3 83       	std	Z+3, r27	; 0x03
    dc44:	00 e0       	ldi	r16, 0x00	; 0
    dc46:	23 c1       	rjmp	.+582    	; 0xde8e <mmc_disk_ioctl+0x464>
    dc48:	40 e0       	ldi	r20, 0x00	; 0
    dc4a:	50 e0       	ldi	r21, 0x00	; 0
    dc4c:	ba 01       	movw	r22, r20
    dc4e:	89 e0       	ldi	r24, 0x09	; 9
    dc50:	04 c0       	rjmp	.+8      	; 0xdc5a <mmc_disk_ioctl+0x230>
    dc52:	40 e0       	ldi	r20, 0x00	; 0
    dc54:	50 e0       	ldi	r21, 0x00	; 0
    dc56:	ba 01       	movw	r22, r20
    dc58:	8a e0       	ldi	r24, 0x0A	; 10
    dc5a:	2f dd       	rcall	.-1442   	; 0xd6ba <send_cmd>
    dc5c:	81 11       	cpse	r24, r1
    dc5e:	16 c1       	rjmp	.+556    	; 0xde8c <mmc_disk_ioctl+0x462>
    dc60:	60 e1       	ldi	r22, 0x10	; 16
    dc62:	70 e0       	ldi	r23, 0x00	; 0
    dc64:	1f c0       	rjmp	.+62     	; 0xdca4 <mmc_disk_ioctl+0x27a>
    dc66:	40 e0       	ldi	r20, 0x00	; 0
    dc68:	50 e0       	ldi	r21, 0x00	; 0
    dc6a:	ba 01       	movw	r22, r20
    dc6c:	8a e3       	ldi	r24, 0x3A	; 58
    dc6e:	25 dd       	rcall	.-1462   	; 0xd6ba <send_cmd>
    dc70:	81 11       	cpse	r24, r1
    dc72:	0c c1       	rjmp	.+536    	; 0xde8c <mmc_disk_ioctl+0x462>
    dc74:	78 01       	movw	r14, r16
    dc76:	f4 e0       	ldi	r31, 0x04	; 4
    dc78:	ef 0e       	add	r14, r31
    dc7a:	f1 1c       	adc	r15, r1
    dc7c:	8f ef       	ldi	r24, 0xFF	; 255
    dc7e:	8d d1       	rcall	.+794    	; 0xdf9a <mmc_spi_TXRX>
    dc80:	f8 01       	movw	r30, r16
    dc82:	81 93       	st	Z+, r24
    dc84:	8f 01       	movw	r16, r30
    dc86:	ee 15       	cp	r30, r14
    dc88:	ff 05       	cpc	r31, r15
    dc8a:	c1 f7       	brne	.-16     	; 0xdc7c <mmc_disk_ioctl+0x252>
    dc8c:	db cf       	rjmp	.-74     	; 0xdc44 <mmc_disk_ioctl+0x21a>
    dc8e:	40 e0       	ldi	r20, 0x00	; 0
    dc90:	50 e0       	ldi	r21, 0x00	; 0
    dc92:	ba 01       	movw	r22, r20
    dc94:	8d e8       	ldi	r24, 0x8D	; 141
    dc96:	11 dd       	rcall	.-1502   	; 0xd6ba <send_cmd>
    dc98:	81 11       	cpse	r24, r1
    dc9a:	f8 c0       	rjmp	.+496    	; 0xde8c <mmc_disk_ioctl+0x462>
    dc9c:	8f ef       	ldi	r24, 0xFF	; 255
    dc9e:	af dc       	rcall	.-1698   	; 0xd5fe <xchg_spi>
    dca0:	60 e4       	ldi	r22, 0x40	; 64
    dca2:	70 e0       	ldi	r23, 0x00	; 0
    dca4:	c8 01       	movw	r24, r16
    dca6:	b3 dc       	rcall	.-1690   	; 0xd60e <rcvr_datablock>
    dca8:	01 e0       	ldi	r16, 0x01	; 1
    dcaa:	10 e0       	ldi	r17, 0x00	; 0
    dcac:	89 2b       	or	r24, r25
    dcae:	09 f4       	brne	.+2      	; 0xdcb2 <mmc_disk_ioctl+0x288>
    dcb0:	ef c0       	rjmp	.+478    	; 0xde90 <mmc_disk_ioctl+0x466>
    dcb2:	ea c0       	rjmp	.+468    	; 0xde88 <mmc_disk_ioctl+0x45e>
    dcb4:	39 d2       	rcall	.+1138   	; 0xe128 <mmc_power_off>
    dcb6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dcba:	81 60       	ori	r24, 0x01	; 1
    dcbc:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    dcc0:	00 e0       	ldi	r16, 0x00	; 0
    dcc2:	eb c0       	rjmp	.+470    	; 0xde9a <mmc_disk_ioctl+0x470>
    dcc4:	fb 01       	movw	r30, r22
    dcc6:	43 81       	ldd	r20, Z+3	; 0x03
    dcc8:	54 81       	ldd	r21, Z+4	; 0x04
    dcca:	65 81       	ldd	r22, Z+5	; 0x05
    dccc:	76 81       	ldd	r23, Z+6	; 0x06
    dcce:	39 e0       	ldi	r19, 0x09	; 9
    dcd0:	44 0f       	add	r20, r20
    dcd2:	55 1f       	adc	r21, r21
    dcd4:	66 1f       	adc	r22, r22
    dcd6:	77 1f       	adc	r23, r23
    dcd8:	3a 95       	dec	r19
    dcda:	d1 f7       	brne	.-12     	; 0xdcd0 <mmc_disk_ioctl+0x2a6>
    dcdc:	70 68       	ori	r23, 0x80	; 128
    dcde:	80 81       	ld	r24, Z
    dce0:	90 e0       	ldi	r25, 0x00	; 0
    dce2:	a0 e0       	ldi	r26, 0x00	; 0
    dce4:	b0 e0       	ldi	r27, 0x00	; 0
    dce6:	2c e1       	ldi	r18, 0x1C	; 28
    dce8:	88 0f       	add	r24, r24
    dcea:	99 1f       	adc	r25, r25
    dcec:	aa 1f       	adc	r26, r26
    dcee:	bb 1f       	adc	r27, r27
    dcf0:	2a 95       	dec	r18
    dcf2:	d1 f7       	brne	.-12     	; 0xdce8 <mmc_disk_ioctl+0x2be>
    dcf4:	48 2b       	or	r20, r24
    dcf6:	59 2b       	or	r21, r25
    dcf8:	6a 2b       	or	r22, r26
    dcfa:	7b 2b       	or	r23, r27
    dcfc:	81 81       	ldd	r24, Z+1	; 0x01
    dcfe:	92 81       	ldd	r25, Z+2	; 0x02
    dd00:	01 97       	sbiw	r24, 0x01	; 1
    dd02:	91 70       	andi	r25, 0x01	; 1
    dd04:	a0 e0       	ldi	r26, 0x00	; 0
    dd06:	b0 e0       	ldi	r27, 0x00	; 0
    dd08:	48 2b       	or	r20, r24
    dd0a:	59 2b       	or	r21, r25
    dd0c:	6a 2b       	or	r22, r26
    dd0e:	7b 2b       	or	r23, r27
    dd10:	80 e3       	ldi	r24, 0x30	; 48
    dd12:	d3 dc       	rcall	.-1626   	; 0xd6ba <send_cmd>
    dd14:	81 11       	cpse	r24, r1
    dd16:	ba c0       	rjmp	.+372    	; 0xde8c <mmc_disk_ioctl+0x462>
    dd18:	88 ee       	ldi	r24, 0xE8	; 232
    dd1a:	93 e0       	ldi	r25, 0x03	; 3
    dd1c:	41 d1       	rcall	.+642    	; 0xdfa0 <mmc_set_ms_timeout>
    dd1e:	8f ef       	ldi	r24, 0xFF	; 255
    dd20:	3c d1       	rcall	.+632    	; 0xdf9a <mmc_spi_TXRX>
    dd22:	8f 3f       	cpi	r24, 0xFF	; 255
    dd24:	21 f4       	brne	.+8      	; 0xdd2e <mmc_disk_ioctl+0x304>
    dd26:	43 d1       	rcall	.+646    	; 0xdfae <mmc_test_timeout>
    dd28:	89 2b       	or	r24, r25
    dd2a:	c9 f3       	breq	.-14     	; 0xdd1e <mmc_disk_ioctl+0x2f4>
    dd2c:	af c0       	rjmp	.+350    	; 0xde8c <mmc_disk_ioctl+0x462>
    dd2e:	8e 3f       	cpi	r24, 0xFE	; 254
    dd30:	09 f0       	breq	.+2      	; 0xdd34 <mmc_disk_ioctl+0x30a>
    dd32:	ac c0       	rjmp	.+344    	; 0xde8c <mmc_disk_ioctl+0x462>
    dd34:	f8 01       	movw	r30, r16
    dd36:	e7 80       	ldd	r14, Z+7	; 0x07
    dd38:	f0 84       	ldd	r15, Z+8	; 0x08
    dd3a:	c1 80       	ldd	r12, Z+1	; 0x01
    dd3c:	d2 80       	ldd	r13, Z+2	; 0x02
    dd3e:	ce 0c       	add	r12, r14
    dd40:	df 1c       	adc	r13, r15
    dd42:	ce 14       	cp	r12, r14
    dd44:	df 04       	cpc	r13, r15
    dd46:	31 f0       	breq	.+12     	; 0xdd54 <mmc_disk_ioctl+0x32a>
    dd48:	8f ef       	ldi	r24, 0xFF	; 255
    dd4a:	27 d1       	rcall	.+590    	; 0xdf9a <mmc_spi_TXRX>
    dd4c:	f7 01       	movw	r30, r14
    dd4e:	81 93       	st	Z+, r24
    dd50:	7f 01       	movw	r14, r30
    dd52:	f7 cf       	rjmp	.-18     	; 0xdd42 <mmc_disk_ioctl+0x318>
    dd54:	f8 01       	movw	r30, r16
    dd56:	81 81       	ldd	r24, Z+1	; 0x01
    dd58:	92 81       	ldd	r25, Z+2	; 0x02
    dd5a:	02 e0       	ldi	r16, 0x02	; 2
    dd5c:	12 e0       	ldi	r17, 0x02	; 2
    dd5e:	08 1b       	sub	r16, r24
    dd60:	19 0b       	sbc	r17, r25
    dd62:	01 15       	cp	r16, r1
    dd64:	11 05       	cpc	r17, r1
    dd66:	09 f4       	brne	.+2      	; 0xdd6a <mmc_disk_ioctl+0x340>
    dd68:	6d cf       	rjmp	.-294    	; 0xdc44 <mmc_disk_ioctl+0x21a>
    dd6a:	8f ef       	ldi	r24, 0xFF	; 255
    dd6c:	48 dc       	rcall	.-1904   	; 0xd5fe <xchg_spi>
    dd6e:	01 50       	subi	r16, 0x01	; 1
    dd70:	11 09       	sbc	r17, r1
    dd72:	f7 cf       	rjmp	.-18     	; 0xdd62 <mmc_disk_ioctl+0x338>
    dd74:	fb 01       	movw	r30, r22
    dd76:	43 81       	ldd	r20, Z+3	; 0x03
    dd78:	54 81       	ldd	r21, Z+4	; 0x04
    dd7a:	65 81       	ldd	r22, Z+5	; 0x05
    dd7c:	76 81       	ldd	r23, Z+6	; 0x06
    dd7e:	39 e0       	ldi	r19, 0x09	; 9
    dd80:	44 0f       	add	r20, r20
    dd82:	55 1f       	adc	r21, r21
    dd84:	66 1f       	adc	r22, r22
    dd86:	77 1f       	adc	r23, r23
    dd88:	3a 95       	dec	r19
    dd8a:	d1 f7       	brne	.-12     	; 0xdd80 <mmc_disk_ioctl+0x356>
    dd8c:	70 68       	ori	r23, 0x80	; 128
    dd8e:	80 81       	ld	r24, Z
    dd90:	90 e0       	ldi	r25, 0x00	; 0
    dd92:	a0 e0       	ldi	r26, 0x00	; 0
    dd94:	b0 e0       	ldi	r27, 0x00	; 0
    dd96:	2c e1       	ldi	r18, 0x1C	; 28
    dd98:	88 0f       	add	r24, r24
    dd9a:	99 1f       	adc	r25, r25
    dd9c:	aa 1f       	adc	r26, r26
    dd9e:	bb 1f       	adc	r27, r27
    dda0:	2a 95       	dec	r18
    dda2:	d1 f7       	brne	.-12     	; 0xdd98 <mmc_disk_ioctl+0x36e>
    dda4:	48 2b       	or	r20, r24
    dda6:	59 2b       	or	r21, r25
    dda8:	6a 2b       	or	r22, r26
    ddaa:	7b 2b       	or	r23, r27
    ddac:	81 81       	ldd	r24, Z+1	; 0x01
    ddae:	92 81       	ldd	r25, Z+2	; 0x02
    ddb0:	01 97       	sbiw	r24, 0x01	; 1
    ddb2:	91 70       	andi	r25, 0x01	; 1
    ddb4:	a0 e0       	ldi	r26, 0x00	; 0
    ddb6:	b0 e0       	ldi	r27, 0x00	; 0
    ddb8:	48 2b       	or	r20, r24
    ddba:	59 2b       	or	r21, r25
    ddbc:	6a 2b       	or	r22, r26
    ddbe:	7b 2b       	or	r23, r27
    ddc0:	81 e3       	ldi	r24, 0x31	; 49
    ddc2:	7b dc       	rcall	.-1802   	; 0xd6ba <send_cmd>
    ddc4:	81 11       	cpse	r24, r1
    ddc6:	62 c0       	rjmp	.+196    	; 0xde8c <mmc_disk_ioctl+0x462>
    ddc8:	8f ef       	ldi	r24, 0xFF	; 255
    ddca:	19 dc       	rcall	.-1998   	; 0xd5fe <xchg_spi>
    ddcc:	8e ef       	ldi	r24, 0xFE	; 254
    ddce:	17 dc       	rcall	.-2002   	; 0xd5fe <xchg_spi>
    ddd0:	f8 01       	movw	r30, r16
    ddd2:	e7 80       	ldd	r14, Z+7	; 0x07
    ddd4:	f0 84       	ldd	r15, Z+8	; 0x08
    ddd6:	c1 80       	ldd	r12, Z+1	; 0x01
    ddd8:	d2 80       	ldd	r13, Z+2	; 0x02
    ddda:	ce 0c       	add	r12, r14
    dddc:	df 1c       	adc	r13, r15
    ddde:	ec 14       	cp	r14, r12
    dde0:	fd 04       	cpc	r15, r13
    dde2:	29 f0       	breq	.+10     	; 0xddee <mmc_disk_ioctl+0x3c4>
    dde4:	f7 01       	movw	r30, r14
    dde6:	81 91       	ld	r24, Z+
    dde8:	7f 01       	movw	r14, r30
    ddea:	09 dc       	rcall	.-2030   	; 0xd5fe <xchg_spi>
    ddec:	f8 cf       	rjmp	.-16     	; 0xddde <mmc_disk_ioctl+0x3b4>
    ddee:	f8 01       	movw	r30, r16
    ddf0:	81 81       	ldd	r24, Z+1	; 0x01
    ddf2:	92 81       	ldd	r25, Z+2	; 0x02
    ddf4:	02 e0       	ldi	r16, 0x02	; 2
    ddf6:	12 e0       	ldi	r17, 0x02	; 2
    ddf8:	08 1b       	sub	r16, r24
    ddfa:	19 0b       	sbc	r17, r25
    ddfc:	8f ef       	ldi	r24, 0xFF	; 255
    ddfe:	01 15       	cp	r16, r1
    de00:	11 05       	cpc	r17, r1
    de02:	09 f4       	brne	.+2      	; 0xde06 <mmc_disk_ioctl+0x3dc>
    de04:	3b c0       	rjmp	.+118    	; 0xde7c <mmc_disk_ioctl+0x452>
    de06:	fb db       	rcall	.-2058   	; 0xd5fe <xchg_spi>
    de08:	01 50       	subi	r16, 0x01	; 1
    de0a:	11 09       	sbc	r17, r1
    de0c:	f7 cf       	rjmp	.-18     	; 0xddfc <mmc_disk_ioctl+0x3d2>
    de0e:	fb 01       	movw	r30, r22
    de10:	43 81       	ldd	r20, Z+3	; 0x03
    de12:	54 81       	ldd	r21, Z+4	; 0x04
    de14:	65 81       	ldd	r22, Z+5	; 0x05
    de16:	76 81       	ldd	r23, Z+6	; 0x06
    de18:	89 e0       	ldi	r24, 0x09	; 9
    de1a:	44 0f       	add	r20, r20
    de1c:	55 1f       	adc	r21, r21
    de1e:	66 1f       	adc	r22, r22
    de20:	77 1f       	adc	r23, r23
    de22:	8a 95       	dec	r24
    de24:	d1 f7       	brne	.-12     	; 0xde1a <mmc_disk_ioctl+0x3f0>
    de26:	74 68       	ori	r23, 0x84	; 132
    de28:	80 81       	ld	r24, Z
    de2a:	90 e0       	ldi	r25, 0x00	; 0
    de2c:	a0 e0       	ldi	r26, 0x00	; 0
    de2e:	b0 e0       	ldi	r27, 0x00	; 0
    de30:	2c e1       	ldi	r18, 0x1C	; 28
    de32:	88 0f       	add	r24, r24
    de34:	99 1f       	adc	r25, r25
    de36:	aa 1f       	adc	r26, r26
    de38:	bb 1f       	adc	r27, r27
    de3a:	2a 95       	dec	r18
    de3c:	d1 f7       	brne	.-12     	; 0xde32 <mmc_disk_ioctl+0x408>
    de3e:	48 2b       	or	r20, r24
    de40:	59 2b       	or	r21, r25
    de42:	6a 2b       	or	r22, r26
    de44:	7b 2b       	or	r23, r27
    de46:	82 81       	ldd	r24, Z+2	; 0x02
    de48:	90 e0       	ldi	r25, 0x00	; 0
    de4a:	a0 e0       	ldi	r26, 0x00	; 0
    de4c:	b0 e0       	ldi	r27, 0x00	; 0
    de4e:	48 2b       	or	r20, r24
    de50:	59 2b       	or	r21, r25
    de52:	6a 2b       	or	r22, r26
    de54:	7b 2b       	or	r23, r27
    de56:	81 e3       	ldi	r24, 0x31	; 49
    de58:	30 dc       	rcall	.-1952   	; 0xd6ba <send_cmd>
    de5a:	81 11       	cpse	r24, r1
    de5c:	17 c0       	rjmp	.+46     	; 0xde8c <mmc_disk_ioctl+0x462>
    de5e:	8f ef       	ldi	r24, 0xFF	; 255
    de60:	ce db       	rcall	.-2148   	; 0xd5fe <xchg_spi>
    de62:	8e ef       	ldi	r24, 0xFE	; 254
    de64:	cc db       	rcall	.-2152   	; 0xd5fe <xchg_spi>
    de66:	f8 01       	movw	r30, r16
    de68:	81 81       	ldd	r24, Z+1	; 0x01
    de6a:	c9 db       	rcall	.-2158   	; 0xd5fe <xchg_spi>
    de6c:	01 e0       	ldi	r16, 0x01	; 1
    de6e:	12 e0       	ldi	r17, 0x02	; 2
    de70:	8f ef       	ldi	r24, 0xFF	; 255
    de72:	c5 db       	rcall	.-2166   	; 0xd5fe <xchg_spi>
    de74:	01 50       	subi	r16, 0x01	; 1
    de76:	11 09       	sbc	r17, r1
    de78:	d9 f7       	brne	.-10     	; 0xde70 <mmc_disk_ioctl+0x446>
    de7a:	8f ef       	ldi	r24, 0xFF	; 255
    de7c:	8e d0       	rcall	.+284    	; 0xdf9a <mmc_spi_TXRX>
    de7e:	8f 71       	andi	r24, 0x1F	; 31
    de80:	01 e0       	ldi	r16, 0x01	; 1
    de82:	10 e0       	ldi	r17, 0x00	; 0
    de84:	85 30       	cpi	r24, 0x05	; 5
    de86:	21 f4       	brne	.+8      	; 0xde90 <mmc_disk_ioctl+0x466>
    de88:	00 e0       	ldi	r16, 0x00	; 0
    de8a:	02 c0       	rjmp	.+4      	; 0xde90 <mmc_disk_ioctl+0x466>
    de8c:	01 e0       	ldi	r16, 0x01	; 1
    de8e:	10 e0       	ldi	r17, 0x00	; 0
    de90:	b8 db       	rcall	.-2192   	; 0xd602 <deselect>
    de92:	04 c0       	rjmp	.+8      	; 0xde9c <mmc_disk_ioctl+0x472>
    de94:	03 e0       	ldi	r16, 0x03	; 3
    de96:	01 c0       	rjmp	.+2      	; 0xde9a <mmc_disk_ioctl+0x470>
    de98:	04 e0       	ldi	r16, 0x04	; 4
    de9a:	10 e0       	ldi	r17, 0x00	; 0
    de9c:	c8 01       	movw	r24, r16
    de9e:	60 96       	adiw	r28, 0x10	; 16
    dea0:	e8 e0       	ldi	r30, 0x08	; 8
    dea2:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

0000dea6 <mmc_disk_timerproc>:
    dea6:	80 91 15 18 	lds	r24, 0x1815	; 0x801815 <Timer1>
    deaa:	88 23       	and	r24, r24
    deac:	19 f0       	breq	.+6      	; 0xdeb4 <mmc_disk_timerproc+0xe>
    deae:	81 50       	subi	r24, 0x01	; 1
    deb0:	80 93 15 18 	sts	0x1815, r24	; 0x801815 <Timer1>
    deb4:	80 91 14 18 	lds	r24, 0x1814	; 0x801814 <Timer2>
    deb8:	88 23       	and	r24, r24
    deba:	19 f0       	breq	.+6      	; 0xdec2 <mmc_disk_timerproc+0x1c>
    debc:	81 50       	subi	r24, 0x01	; 1
    debe:	80 93 14 18 	sts	0x1814, r24	; 0x801814 <Timer2>
    dec2:	08 95       	ret

0000dec4 <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    dec4:	80 91 1c 18 	lds	r24, 0x181C	; 0x80181c <_mmc_timeout>
    dec8:	90 91 1d 18 	lds	r25, 0x181D	; 0x80181d <_mmc_timeout+0x1>
    decc:	00 97       	sbiw	r24, 0x00	; 0
    dece:	29 f0       	breq	.+10     	; 0xdeda <mmc_task+0x16>
    ded0:	01 97       	sbiw	r24, 0x01	; 1
    ded2:	90 93 1d 18 	sts	0x181D, r25	; 0x80181d <_mmc_timeout+0x1>
    ded6:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <_mmc_timeout>
    deda:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <_mmc_pre>
    dede:	90 91 17 18 	lds	r25, 0x1817	; 0x801817 <_mmc_pre+0x1>
    dee2:	8a 30       	cpi	r24, 0x0A	; 10
    dee4:	91 05       	cpc	r25, r1
    dee6:	30 f4       	brcc	.+12     	; 0xdef4 <mmc_task+0x30>
    dee8:	01 96       	adiw	r24, 0x01	; 1
    deea:	90 93 17 18 	sts	0x1817, r25	; 0x801817 <_mmc_pre+0x1>
    deee:	80 93 16 18 	sts	0x1816, r24	; 0x801816 <_mmc_pre>
    def2:	08 95       	ret
    def4:	10 92 17 18 	sts	0x1817, r1	; 0x801817 <_mmc_pre+0x1>
    def8:	10 92 16 18 	sts	0x1816, r1	; 0x801816 <_mmc_pre>
    defc:	d4 cf       	rjmp	.-88     	; 0xdea6 <mmc_disk_timerproc>
    defe:	08 95       	ret

0000df00 <mmc_install_timer>:
    df00:	10 92 1d 18 	sts	0x181D, r1	; 0x80181d <_mmc_timeout+0x1>
    df04:	10 92 1c 18 	sts	0x181C, r1	; 0x80181c <_mmc_timeout>
    df08:	61 e0       	ldi	r22, 0x01	; 1
    df0a:	70 e0       	ldi	r23, 0x00	; 0
    df0c:	82 e6       	ldi	r24, 0x62	; 98
    df0e:	9f e6       	ldi	r25, 0x6F	; 111
    df10:	0e 94 31 35 	call	0x6a62	; 0x6a62 <set_timers>
    df14:	01 96       	adiw	r24, 0x01	; 1
    df16:	51 f4       	brne	.+20     	; 0xdf2c <mmc_install_timer+0x2c>
    df18:	8d e4       	ldi	r24, 0x4D	; 77
    df1a:	98 e0       	ldi	r25, 0x08	; 8
    df1c:	1f 92       	push	r1
    df1e:	9f 93       	push	r25
    df20:	8f 93       	push	r24
    df22:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    df26:	0f 90       	pop	r0
    df28:	0f 90       	pop	r0
    df2a:	0f 90       	pop	r0
    df2c:	08 95       	ret

0000df2e <mmc_spi_begin>:
    df2e:	60 91 18 18 	lds	r22, 0x1818	; 0x801818 <_mmc_clock>
    df32:	70 91 19 18 	lds	r23, 0x1819	; 0x801819 <_mmc_clock+0x1>
    df36:	80 91 1a 18 	lds	r24, 0x181A	; 0x80181a <_mmc_clock+0x2>
    df3a:	90 91 1b 18 	lds	r25, 0x181B	; 0x80181b <_mmc_clock+0x3>
    df3e:	4b e0       	ldi	r20, 0x0B	; 11
    df40:	50 e0       	ldi	r21, 0x00	; 0
    df42:	0c 94 a2 28 	jmp	0x5144	; 0x5144 <spi_begin>
    df46:	08 95       	ret

0000df48 <mmc_spi_end>:
    df48:	8b e0       	ldi	r24, 0x0B	; 11
    df4a:	0c 94 4c 28 	jmp	0x5098	; 0x5098 <spi_end>
    df4e:	08 95       	ret

0000df50 <mmc_slow>:
    df50:	80 e2       	ldi	r24, 0x20	; 32
    df52:	91 ea       	ldi	r25, 0xA1	; 161
    df54:	a7 e0       	ldi	r26, 0x07	; 7
    df56:	b0 e0       	ldi	r27, 0x00	; 0
    df58:	80 93 18 18 	sts	0x1818, r24	; 0x801818 <_mmc_clock>
    df5c:	90 93 19 18 	sts	0x1819, r25	; 0x801819 <_mmc_clock+0x1>
    df60:	a0 93 1a 18 	sts	0x181A, r26	; 0x80181a <_mmc_clock+0x2>
    df64:	b0 93 1b 18 	sts	0x181B, r27	; 0x80181b <_mmc_clock+0x3>
    df68:	08 95       	ret

0000df6a <mmc_spi_init>:
    df6a:	8b e0       	ldi	r24, 0x0B	; 11
    df6c:	0e 94 4a 28 	call	0x5094	; 0x5094 <chip_select_init>
    df70:	ef cf       	rjmp	.-34     	; 0xdf50 <mmc_slow>
    df72:	08 95       	ret

0000df74 <mmc_fast>:
    df74:	80 ea       	ldi	r24, 0xA0	; 160
    df76:	95 e2       	ldi	r25, 0x25	; 37
    df78:	a6 e2       	ldi	r26, 0x26	; 38
    df7a:	b0 e0       	ldi	r27, 0x00	; 0
    df7c:	80 93 18 18 	sts	0x1818, r24	; 0x801818 <_mmc_clock>
    df80:	90 93 19 18 	sts	0x1819, r25	; 0x801819 <_mmc_clock+0x1>
    df84:	a0 93 1a 18 	sts	0x181A, r26	; 0x80181a <_mmc_clock+0x2>
    df88:	b0 93 1b 18 	sts	0x181B, r27	; 0x80181b <_mmc_clock+0x3>
    df8c:	08 95       	ret

0000df8e <mmc_spi_TX_buffer>:
    df8e:	0c 94 6e 28 	jmp	0x50dc	; 0x50dc <spi_TX_buffer>
    df92:	08 95       	ret

0000df94 <mmc_spi_RX_buffer>:
    df94:	0c 94 70 28 	jmp	0x50e0	; 0x50e0 <spi_RX_buffer>
    df98:	08 95       	ret

0000df9a <mmc_spi_TXRX>:
    df9a:	0c 94 de 28 	jmp	0x51bc	; 0x51bc <spi_TXRX>
    df9e:	08 95       	ret

0000dfa0 <mmc_set_ms_timeout>:
    dfa0:	f8 94       	cli
    dfa2:	90 93 1d 18 	sts	0x181D, r25	; 0x80181d <_mmc_timeout+0x1>
    dfa6:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <_mmc_timeout>
    dfaa:	78 94       	sei
    dfac:	08 95       	ret

0000dfae <mmc_test_timeout>:
    dfae:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dfb2:	81 fd       	sbrc	r24, 1
    dfb4:	15 c0       	rjmp	.+42     	; 0xdfe0 <mmc_test_timeout+0x32>
    dfb6:	80 91 1c 18 	lds	r24, 0x181C	; 0x80181c <_mmc_timeout>
    dfba:	90 91 1d 18 	lds	r25, 0x181D	; 0x80181d <_mmc_timeout+0x1>
    dfbe:	89 2b       	or	r24, r25
    dfc0:	91 f4       	brne	.+36     	; 0xdfe6 <mmc_test_timeout+0x38>
    dfc2:	80 e4       	ldi	r24, 0x40	; 64
    dfc4:	98 e0       	ldi	r25, 0x08	; 8
    dfc6:	1f 92       	push	r1
    dfc8:	9f 93       	push	r25
    dfca:	8f 93       	push	r24
    dfcc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    dfd0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dfd4:	83 60       	ori	r24, 0x03	; 3
    dfd6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    dfda:	0f 90       	pop	r0
    dfdc:	0f 90       	pop	r0
    dfde:	0f 90       	pop	r0
    dfe0:	81 e0       	ldi	r24, 0x01	; 1
    dfe2:	90 e0       	ldi	r25, 0x00	; 0
    dfe4:	08 95       	ret
    dfe6:	80 e0       	ldi	r24, 0x00	; 0
    dfe8:	90 e0       	ldi	r25, 0x00	; 0
    dfea:	08 95       	ret

0000dfec <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    dfec:	a4 e0       	ldi	r26, 0x04	; 4
    dfee:	b0 e0       	ldi	r27, 0x00	; 0
    dff0:	ec ef       	ldi	r30, 0xFC	; 252
    dff2:	ff e6       	ldi	r31, 0x6F	; 111
    dff4:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__prologue_saves__+0x18>
    dff8:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    dffa:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Stat>

    mmc_spi_init();

    if( verbose)
    dffe:	b5 df       	rcall	.-150    	; 0xdf6a <mmc_spi_init>
    e000:	e1 14       	cp	r14, r1
    e002:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    e004:	51 f0       	breq	.+20     	; 0xe01a <mmc_init+0x2e>
    e006:	80 e3       	ldi	r24, 0x30	; 48
    e008:	98 e0       	ldi	r25, 0x08	; 8
    e00a:	1f 92       	push	r1
    e00c:	9f 93       	push	r25
    e00e:	8f 93       	push	r24
    e010:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    e014:	0f 90       	pop	r0
    e016:	0f 90       	pop	r0
    }
    // we only install timers once!
    if(!mmc_init_flag)
    e018:	0f 90       	pop	r0
    e01a:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <mmc_init_flag>
    e01e:	90 91 1f 18 	lds	r25, 0x181F	; 0x80181f <mmc_init_flag+0x1>
        mmc_install_timer();
    e022:	89 2b       	or	r24, r25
    e024:	09 f4       	brne	.+2      	; 0xe028 <mmc_init+0x3c>

    if( verbose)
    e026:	6c df       	rcall	.-296    	; 0xdf00 <mmc_install_timer>
    e028:	e1 14       	cp	r14, r1
    e02a:	f1 04       	cpc	r15, r1
    {
#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    e02c:	b9 f0       	breq	.+46     	; 0xe05c <mmc_init+0x70>
    e02e:	84 e2       	ldi	r24, 0x24	; 36
    e030:	98 e0       	ldi	r25, 0x08	; 8
    e032:	1f 92       	push	r1
    e034:	9f 93       	push	r25
    e036:	8f 93       	push	r24
    e038:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    e03c:	81 e0       	ldi	r24, 0x01	; 1
    e03e:	8f 93       	push	r24
    e040:	85 eb       	ldi	r24, 0xB5	; 181
    e042:	8f 93       	push	r24
    e044:	83 e1       	ldi	r24, 0x13	; 19
    e046:	98 e0       	ldi	r25, 0x08	; 8
    e048:	1f 92       	push	r1
    e04a:	9f 93       	push	r25
    e04c:	8f 93       	push	r24
    e04e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    e052:	0f b6       	in	r0, 0x3f	; 63
    e054:	f8 94       	cli
    e056:	de bf       	out	0x3e, r29	; 62
    }

    rc = disk_initialize(DEV_MMC);    // aliased to mmc_disk_initialize()
    e058:	0f be       	out	0x3f, r0	; 63
    e05a:	cd bf       	out	0x3d, r28	; 61
    e05c:	80 e0       	ldi	r24, 0x00	; 0
    e05e:	9f da       	rcall	.-2754   	; 0xd59e <disk_initialize>
    e060:	08 2f       	mov	r16, r24

    if( rc != RES_OK  )
    e062:	10 e0       	ldi	r17, 0x00	; 0
    e064:	01 15       	cp	r16, r1
        put_rc(rc);
    e066:	11 05       	cpc	r17, r1
    e068:	19 f0       	breq	.+6      	; 0xe070 <mmc_init+0x84>
    e06a:	c8 01       	movw	r24, r16
    e06c:	e3 d0       	rcall	.+454    	; 0xe234 <put_rc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    e06e:	0e c0       	rjmp	.+28     	; 0xe08c <mmc_init+0xa0>
    e070:	40 e0       	ldi	r20, 0x00	; 0
    e072:	68 e3       	ldi	r22, 0x38	; 56
    e074:	78 e0       	ldi	r23, 0x08	; 8
    e076:	88 e7       	ldi	r24, 0x78	; 120
    e078:	99 e1       	ldi	r25, 0x19	; 25
    e07a:	0e 94 66 5a 	call	0xb4cc	; 0xb4cc <f_mount>

    if( rc != RES_OK || verbose)
    e07e:	8c 01       	movw	r16, r24
    e080:	89 2b       	or	r24, r25
    e082:	21 f4       	brne	.+8      	; 0xe08c <mmc_init+0xa0>
    e084:	e1 14       	cp	r14, r1
    e086:	f1 04       	cpc	r15, r1
        put_rc( rc );
    e088:	09 f4       	brne	.+2      	; 0xe08c <mmc_init+0xa0>
    e08a:	43 c0       	rjmp	.+134    	; 0xe112 <mmc_init+0x126>
    e08c:	c8 01       	movw	r24, r16

    if (verbose )
    e08e:	d2 d0       	rcall	.+420    	; 0xe234 <put_rc>
    e090:	e1 14       	cp	r14, r1
    e092:	f1 04       	cpc	r15, r1
    e094:	09 f4       	brne	.+2      	; 0xe098 <mmc_init+0xac>
    {
        DWORD blksize = 0;
    e096:	3d c0       	rjmp	.+122    	; 0xe112 <mmc_init+0x126>
    e098:	19 82       	std	Y+1, r1	; 0x01
    e09a:	1a 82       	std	Y+2, r1	; 0x02
    e09c:	1b 82       	std	Y+3, r1	; 0x03
        if(rc == RES_OK)
    e09e:	1c 82       	std	Y+4, r1	; 0x04
    e0a0:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    e0a2:	11 05       	cpc	r17, r1
    e0a4:	61 f5       	brne	.+88     	; 0xe0fe <mmc_init+0x112>
    e0a6:	ae 01       	movw	r20, r28
    e0a8:	4f 5f       	subi	r20, 0xFF	; 255
    e0aa:	5f 4f       	sbci	r21, 0xFF	; 255
    e0ac:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    e0ae:	80 e0       	ldi	r24, 0x00	; 0
    e0b0:	9c da       	rcall	.-2760   	; 0xd5ea <disk_ioctl>
            {
                put_rc( rc );
    e0b2:	8c 01       	movw	r16, r24
    e0b4:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    e0b6:	61 f0       	breq	.+24     	; 0xe0d0 <mmc_init+0xe4>
    e0b8:	bd d0       	rcall	.+378    	; 0xe234 <put_rc>
    e0ba:	85 ef       	ldi	r24, 0xF5	; 245
    e0bc:	97 e0       	ldi	r25, 0x07	; 7
    e0be:	1f 92       	push	r1
    e0c0:	9f 93       	push	r25
    e0c2:	8f 93       	push	r24
    e0c4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    e0c8:	0f 90       	pop	r0
    e0ca:	0f 90       	pop	r0
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e0cc:	0f 90       	pop	r0
    e0ce:	17 c0       	rjmp	.+46     	; 0xe0fe <mmc_init+0x112>
    e0d0:	8c 81       	ldd	r24, Y+4	; 0x04
    e0d2:	8f 93       	push	r24
    e0d4:	8b 81       	ldd	r24, Y+3	; 0x03
    e0d6:	8f 93       	push	r24
    e0d8:	8a 81       	ldd	r24, Y+2	; 0x02
    e0da:	8f 93       	push	r24
    e0dc:	89 81       	ldd	r24, Y+1	; 0x01
    e0de:	8f 93       	push	r24
    e0e0:	80 ee       	ldi	r24, 0xE0	; 224
    e0e2:	97 e0       	ldi	r25, 0x07	; 7
    e0e4:	1f 92       	push	r1
    e0e6:	9f 93       	push	r25
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e0e8:	8f 93       	push	r24
    e0ea:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    e0ee:	88 e3       	ldi	r24, 0x38	; 56
    e0f0:	98 e0       	ldi	r25, 0x08	; 8
    e0f2:	2e d1       	rcall	.+604    	; 0xe350 <fatfs_status>
    e0f4:	0f b6       	in	r0, 0x3f	; 63
    e0f6:	f8 94       	cli
    e0f8:	de bf       	out	0x3e, r29	; 62
            }
        }
        printf("END MMC INIT\n");
    e0fa:	0f be       	out	0x3f, r0	; 63
    e0fc:	cd bf       	out	0x3d, r28	; 61
    e0fe:	82 ed       	ldi	r24, 0xD2	; 210
    e100:	97 e0       	ldi	r25, 0x07	; 7
    e102:	1f 92       	push	r1
    e104:	9f 93       	push	r25
    e106:	8f 93       	push	r24
    e108:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    e10c:	0f 90       	pop	r0
    }
    mmc_init_flag = 1;
    e10e:	0f 90       	pop	r0
    e110:	0f 90       	pop	r0
    e112:	81 e0       	ldi	r24, 0x01	; 1
    e114:	90 e0       	ldi	r25, 0x00	; 0
    e116:	90 93 1f 18 	sts	0x181F, r25	; 0x80181f <mmc_init_flag+0x1>

    return( rc ) ;
}
    e11a:	80 93 1e 18 	sts	0x181E, r24	; 0x80181e <mmc_init_flag>
    e11e:	c8 01       	movw	r24, r16
    e120:	24 96       	adiw	r28, 0x04	; 4
    e122:	e6 e0       	ldi	r30, 0x06	; 6
    e124:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

0000e128 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    e128:	08 95       	ret

0000e12a <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    e12a:	81 e0       	ldi	r24, 0x01	; 1
    e12c:	90 e0       	ldi	r25, 0x00	; 0
    e12e:	08 95       	ret

0000e130 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e130:	80 e0       	ldi	r24, 0x00	; 0
    e132:	90 e0       	ldi	r25, 0x00	; 0
    e134:	08 95       	ret

0000e136 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e136:	0f 93       	push	r16
    e138:	1f 93       	push	r17
    e13a:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e13c:	46 81       	ldd	r20, Z+6	; 0x06
    e13e:	57 81       	ldd	r21, Z+7	; 0x07
    e140:	05 2e       	mov	r0, r21
    e142:	00 0c       	add	r0, r0
    e144:	66 0b       	sbc	r22, r22
    e146:	77 0b       	sbc	r23, r23
    e148:	ba 01       	movw	r22, r20
    e14a:	55 27       	eor	r21, r21
    e14c:	44 27       	eor	r20, r20
    e14e:	84 81       	ldd	r24, Z+4	; 0x04
    e150:	95 81       	ldd	r25, Z+5	; 0x05
    e152:	09 2e       	mov	r0, r25
    e154:	00 0c       	add	r0, r0
    e156:	aa 0b       	sbc	r26, r26
    e158:	bb 0b       	sbc	r27, r27
    e15a:	2b e0       	ldi	r18, 0x0B	; 11
    e15c:	88 0f       	add	r24, r24
    e15e:	99 1f       	adc	r25, r25
    e160:	aa 1f       	adc	r26, r26
    e162:	bb 1f       	adc	r27, r27
    e164:	2a 95       	dec	r18
    e166:	d1 f7       	brne	.-12     	; 0xe15c <tm_to_fat+0x26>
    e168:	48 2b       	or	r20, r24
    e16a:	59 2b       	or	r21, r25
    e16c:	6a 2b       	or	r22, r26
    e16e:	7b 2b       	or	r23, r27
    e170:	82 81       	ldd	r24, Z+2	; 0x02
    e172:	93 81       	ldd	r25, Z+3	; 0x03
    e174:	09 2e       	mov	r0, r25
    e176:	00 0c       	add	r0, r0
    e178:	aa 0b       	sbc	r26, r26
    e17a:	bb 0b       	sbc	r27, r27
    e17c:	35 e0       	ldi	r19, 0x05	; 5
    e17e:	88 0f       	add	r24, r24
    e180:	99 1f       	adc	r25, r25
    e182:	aa 1f       	adc	r26, r26
    e184:	bb 1f       	adc	r27, r27
    e186:	3a 95       	dec	r19
    e188:	d1 f7       	brne	.-12     	; 0xe17e <tm_to_fat+0x48>
    e18a:	48 2b       	or	r20, r24
    e18c:	59 2b       	or	r21, r25
    e18e:	6a 2b       	or	r22, r26
    e190:	7b 2b       	or	r23, r27
    e192:	80 81       	ld	r24, Z
    e194:	91 81       	ldd	r25, Z+1	; 0x01
    e196:	09 2e       	mov	r0, r25
    e198:	00 0c       	add	r0, r0
    e19a:	aa 0b       	sbc	r26, r26
    e19c:	bb 0b       	sbc	r27, r27
    e19e:	b6 95       	lsr	r27
    e1a0:	a7 95       	ror	r26
    e1a2:	97 95       	ror	r25
    e1a4:	87 95       	ror	r24
    e1a6:	84 2b       	or	r24, r20
    e1a8:	95 2b       	or	r25, r21
    e1aa:	a6 2b       	or	r26, r22
    e1ac:	b7 2b       	or	r27, r23
    e1ae:	02 85       	ldd	r16, Z+10	; 0x0a
    e1b0:	13 85       	ldd	r17, Z+11	; 0x0b
    e1b2:	00 55       	subi	r16, 0x50	; 80
    e1b4:	11 09       	sbc	r17, r1
    e1b6:	01 2e       	mov	r0, r17
    e1b8:	00 0c       	add	r0, r0
    e1ba:	22 0b       	sbc	r18, r18
    e1bc:	33 0b       	sbc	r19, r19
    e1be:	49 e1       	ldi	r20, 0x19	; 25
    e1c0:	00 0f       	add	r16, r16
    e1c2:	11 1f       	adc	r17, r17
    e1c4:	22 1f       	adc	r18, r18
    e1c6:	33 1f       	adc	r19, r19
    e1c8:	4a 95       	dec	r20
    e1ca:	d1 f7       	brne	.-12     	; 0xe1c0 <tm_to_fat+0x8a>
    e1cc:	ac 01       	movw	r20, r24
    e1ce:	bd 01       	movw	r22, r26
    e1d0:	40 2b       	or	r20, r16
    e1d2:	51 2b       	or	r21, r17
    e1d4:	62 2b       	or	r22, r18
    e1d6:	73 2b       	or	r23, r19
    e1d8:	80 85       	ldd	r24, Z+8	; 0x08
    e1da:	91 85       	ldd	r25, Z+9	; 0x09
    e1dc:	09 2e       	mov	r0, r25
    e1de:	00 0c       	add	r0, r0
    e1e0:	aa 0b       	sbc	r26, r26
    e1e2:	bb 0b       	sbc	r27, r27
    e1e4:	01 96       	adiw	r24, 0x01	; 1
    e1e6:	a1 1d       	adc	r26, r1
    e1e8:	b1 1d       	adc	r27, r1
    e1ea:	e5 e1       	ldi	r30, 0x15	; 21
    e1ec:	88 0f       	add	r24, r24
    e1ee:	99 1f       	adc	r25, r25
    e1f0:	aa 1f       	adc	r26, r26
    e1f2:	bb 1f       	adc	r27, r27
    e1f4:	ea 95       	dec	r30
    e1f6:	d1 f7       	brne	.-12     	; 0xe1ec <tm_to_fat+0xb6>
    e1f8:	8a 01       	movw	r16, r20
    e1fa:	9b 01       	movw	r18, r22
    e1fc:	08 2b       	or	r16, r24
    e1fe:	19 2b       	or	r17, r25
    e200:	2a 2b       	or	r18, r26
    e202:	3b 2b       	or	r19, r27
    e204:	c9 01       	movw	r24, r18
    e206:	b8 01       	movw	r22, r16
}
    e208:	1f 91       	pop	r17
    e20a:	0f 91       	pop	r16
    e20c:	08 95       	ret

0000e20e <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e20e:	a4 e0       	ldi	r26, 0x04	; 4
    e210:	b0 e0       	ldi	r27, 0x00	; 0
    e212:	ed e0       	ldi	r30, 0x0D	; 13
    e214:	f1 e7       	ldi	r31, 0x71	; 113
    e216:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e21a:	ce 01       	movw	r24, r28
    e21c:	01 96       	adiw	r24, 0x01	; 1
    e21e:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <time>
    return( tm_to_fat(localtime(&t)));
    e222:	ce 01       	movw	r24, r28
    e224:	01 96       	adiw	r24, 0x01	; 1
    e226:	0e 94 05 39 	call	0x720a	; 0x720a <localtime>
    e22a:	85 df       	rcall	.-246    	; 0xe136 <tm_to_fat>
}
    e22c:	24 96       	adiw	r28, 0x04	; 4
    e22e:	e2 e0       	ldi	r30, 0x02	; 2
    e230:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

0000e234 <put_rc>:
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e234:	9f 93       	push	r25
    e236:	8f 93       	push	r24
    e238:	8d e5       	ldi	r24, 0x5D	; 93
    e23a:	9a e0       	ldi	r25, 0x0A	; 10
    e23c:	1f 92       	push	r1
    e23e:	9f 93       	push	r25
    e240:	8f 93       	push	r24
    e242:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
#endif
}
    e246:	0f 90       	pop	r0
    e248:	0f 90       	pop	r0
    e24a:	0f 90       	pop	r0
    e24c:	0f 90       	pop	r0
    e24e:	0f 90       	pop	r0
    e250:	08 95       	ret

0000e252 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e252:	a4 e4       	ldi	r26, 0x44	; 68
    e254:	b1 e0       	ldi	r27, 0x01	; 1
    e256:	ef e2       	ldi	r30, 0x2F	; 47
    e258:	f1 e7       	ldi	r31, 0x71	; 113
    e25a:	0c 94 40 e5 	jmp	0x1ca80	; 0x1ca80 <__prologue_saves__+0x16>
    e25e:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e260:	bc 01       	movw	r22, r24
    e262:	ce 01       	movw	r24, r28
    e264:	89 5e       	subi	r24, 0xE9	; 233
    e266:	9e 4f       	sbci	r25, 0xFE	; 254
    e268:	0e 94 44 64 	call	0xc888	; 0xc888 <f_opendir>
    if (fr == FR_OK) {
    e26c:	00 97       	sbiw	r24, 0x00	; 0
    e26e:	09 f0       	breq	.+2      	; 0xe272 <fatfs_scan_files+0x20>
    e270:	5b c0       	rjmp	.+182    	; 0xe328 <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e272:	8f e2       	ldi	r24, 0x2F	; 47
    e274:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    e276:	be 01       	movw	r22, r28
    e278:	6f 5f       	subi	r22, 0xFF	; 255
    e27a:	7f 4f       	sbci	r23, 0xFF	; 255
    e27c:	ce 01       	movw	r24, r28
    e27e:	89 5e       	subi	r24, 0xE9	; 233
    e280:	9e 4f       	sbci	r25, 0xFE	; 254
    e282:	0e 94 ca 64 	call	0xc994	; 0xc994 <f_readdir>
    e286:	00 97       	sbiw	r24, 0x00	; 0
    e288:	09 f0       	breq	.+2      	; 0xe28c <fatfs_scan_files+0x3a>
    e28a:	4e c0       	rjmp	.+156    	; 0xe328 <fatfs_scan_files+0xd6>
    e28c:	2f 89       	ldd	r18, Y+23	; 0x17
    e28e:	22 23       	and	r18, r18
    e290:	09 f4       	brne	.+2      	; 0xe294 <fatfs_scan_files+0x42>
    e292:	4a c0       	rjmp	.+148    	; 0xe328 <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    e294:	89 85       	ldd	r24, Y+9	; 0x09
    e296:	84 ff       	sbrs	r24, 4
    e298:	25 c0       	rjmp	.+74     	; 0xe2e4 <fatfs_scan_files+0x92>
                AccDirs++;
    e29a:	80 91 b1 1b 	lds	r24, 0x1BB1	; 0x801bb1 <AccDirs>
    e29e:	90 91 b2 1b 	lds	r25, 0x1BB2	; 0x801bb2 <AccDirs+0x1>
    e2a2:	01 96       	adiw	r24, 0x01	; 1
    e2a4:	90 93 b2 1b 	sts	0x1BB2, r25	; 0x801bb2 <AccDirs+0x1>
    e2a8:	80 93 b1 1b 	sts	0x1BB1, r24	; 0x801bb1 <AccDirs>
                i = strlen(path);
    e2ac:	f8 01       	movw	r30, r16
    e2ae:	01 90       	ld	r0, Z+
    e2b0:	00 20       	and	r0, r0
    e2b2:	e9 f7       	brne	.-6      	; 0xe2ae <fatfs_scan_files+0x5c>
    e2b4:	31 97       	sbiw	r30, 0x01	; 1
    e2b6:	e0 1b       	sub	r30, r16
    e2b8:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e2ba:	78 01       	movw	r14, r16
    e2bc:	ee 0e       	add	r14, r30
    e2be:	ff 1e       	adc	r15, r31
    e2c0:	d7 01       	movw	r26, r14
    e2c2:	dc 92       	st	X, r13
    e2c4:	cf 01       	movw	r24, r30
    e2c6:	01 96       	adiw	r24, 0x01	; 1
    e2c8:	be 01       	movw	r22, r28
    e2ca:	69 5e       	subi	r22, 0xE9	; 233
    e2cc:	7f 4f       	sbci	r23, 0xFF	; 255
    e2ce:	80 0f       	add	r24, r16
    e2d0:	91 1f       	adc	r25, r17
    e2d2:	0e 94 a8 31 	call	0x6350	; 0x6350 <strcpy>
                fr = fatfs_scan_files(path);
    e2d6:	c8 01       	movw	r24, r16
    e2d8:	bc df       	rcall	.-136    	; 0xe252 <fatfs_scan_files>
                path[i] = 0;
    e2da:	f7 01       	movw	r30, r14
    e2dc:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e2de:	00 97       	sbiw	r24, 0x00	; 0
    e2e0:	51 f2       	breq	.-108    	; 0xe276 <fatfs_scan_files+0x24>
    e2e2:	22 c0       	rjmp	.+68     	; 0xe328 <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e2e4:	80 91 b3 1b 	lds	r24, 0x1BB3	; 0x801bb3 <AccFiles>
    e2e8:	90 91 b4 1b 	lds	r25, 0x1BB4	; 0x801bb4 <AccFiles+0x1>
    e2ec:	01 96       	adiw	r24, 0x01	; 1
    e2ee:	90 93 b4 1b 	sts	0x1BB4, r25	; 0x801bb4 <AccFiles+0x1>
    e2f2:	80 93 b3 1b 	sts	0x1BB3, r24	; 0x801bb3 <AccFiles>
                AccSize += info.fsize;
    e2f6:	40 91 ad 1b 	lds	r20, 0x1BAD	; 0x801bad <AccSize>
    e2fa:	50 91 ae 1b 	lds	r21, 0x1BAE	; 0x801bae <AccSize+0x1>
    e2fe:	60 91 af 1b 	lds	r22, 0x1BAF	; 0x801baf <AccSize+0x2>
    e302:	70 91 b0 1b 	lds	r23, 0x1BB0	; 0x801bb0 <AccSize+0x3>
    e306:	89 81       	ldd	r24, Y+1	; 0x01
    e308:	9a 81       	ldd	r25, Y+2	; 0x02
    e30a:	ab 81       	ldd	r26, Y+3	; 0x03
    e30c:	bc 81       	ldd	r27, Y+4	; 0x04
    e30e:	84 0f       	add	r24, r20
    e310:	95 1f       	adc	r25, r21
    e312:	a6 1f       	adc	r26, r22
    e314:	b7 1f       	adc	r27, r23
    e316:	80 93 ad 1b 	sts	0x1BAD, r24	; 0x801bad <AccSize>
    e31a:	90 93 ae 1b 	sts	0x1BAE, r25	; 0x801bae <AccSize+0x1>
    e31e:	a0 93 af 1b 	sts	0x1BAF, r26	; 0x801baf <AccSize+0x2>
    e322:	b0 93 b0 1b 	sts	0x1BB0, r27	; 0x801bb0 <AccSize+0x3>
    e326:	a7 cf       	rjmp	.-178    	; 0xe276 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e328:	cc 5b       	subi	r28, 0xBC	; 188
    e32a:	de 4f       	sbci	r29, 0xFE	; 254
    e32c:	e7 e0       	ldi	r30, 0x07	; 7
    e32e:	0c 94 5c e5 	jmp	0x1cab8	; 0x1cab8 <__epilogue_restores__+0x16>

0000e332 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e332:	01 97       	sbiw	r24, 0x01	; 1
    e334:	84 30       	cpi	r24, 0x04	; 4
    e336:	91 05       	cpc	r25, r1
    e338:	40 f4       	brcc	.+16     	; 0xe34a <fatfs_fstype+0x18>
    e33a:	88 0f       	add	r24, r24
    e33c:	99 1f       	adc	r25, r25
    e33e:	fc 01       	movw	r30, r24
    e340:	e8 5f       	subi	r30, 0xF8	; 248
    e342:	f8 4f       	sbci	r31, 0xF8	; 248
    e344:	80 81       	ld	r24, Z
    e346:	91 81       	ldd	r25, Z+1	; 0x01
    e348:	08 95       	ret
    char *ptr;
    switch(type)
    e34a:	8a e3       	ldi	r24, 0x3A	; 58
    e34c:	98 e0       	ldi	r25, 0x08	; 8
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e34e:	08 95       	ret

0000e350 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e350:	a4 e2       	ldi	r26, 0x24	; 36
    e352:	b0 e0       	ldi	r27, 0x00	; 0
    e354:	ee ea       	ldi	r30, 0xAE	; 174
    e356:	f1 e7       	ldi	r31, 0x71	; 113
    e358:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    e35c:	8c 01       	movw	r16, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e35e:	fc 01       	movw	r30, r24
    e360:	21 91       	ld	r18, Z+
    e362:	cf 01       	movw	r24, r30
    e364:	20 32       	cpi	r18, 0x20	; 32
    e366:	d1 f3       	breq	.-12     	; 0xe35c <fatfs_status+0xc>
    e368:	29 30       	cpi	r18, 0x09	; 9
    e36a:	c1 f3       	breq	.-16     	; 0xe35c <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e36c:	1f 93       	push	r17
    e36e:	0f 93       	push	r16
    e370:	8c e4       	ldi	r24, 0x4C	; 76
    e372:	9a e0       	ldi	r25, 0x0A	; 10
    e374:	1f 92       	push	r1
    e376:	9f 93       	push	r25
    e378:	8f 93       	push	r24
    e37a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e37e:	ae 01       	movw	r20, r28
    e380:	4d 5d       	subi	r20, 0xDD	; 221
    e382:	5f 4f       	sbci	r21, 0xFF	; 255
    e384:	be 01       	movw	r22, r28
    e386:	61 5e       	subi	r22, 0xE1	; 225
    e388:	7f 4f       	sbci	r23, 0xFF	; 255
    e38a:	c8 01       	movw	r24, r16
    e38c:	0e 94 4c 65 	call	0xca98	; 0xca98 <f_getfree>
    if (res)
    e390:	0f 90       	pop	r0
    e392:	0f 90       	pop	r0
    e394:	0f 90       	pop	r0
    e396:	0f 90       	pop	r0
    e398:	0f 90       	pop	r0
    e39a:	00 97       	sbiw	r24, 0x00	; 0
    e39c:	09 f0       	breq	.+2      	; 0xe3a0 <fatfs_status+0x50>
    e39e:	e8 c0       	rjmp	.+464    	; 0xe570 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e3a0:	eb a1       	ldd	r30, Y+35	; 0x23
    e3a2:	fc a1       	ldd	r31, Y+36	; 0x24
    e3a4:	80 81       	ld	r24, Z
    e3a6:	90 e0       	ldi	r25, 0x00	; 0
    e3a8:	c4 df       	rcall	.-120    	; 0xe332 <fatfs_fstype>
    e3aa:	9f 93       	push	r25
    e3ac:	8f 93       	push	r24
    e3ae:	8e e2       	ldi	r24, 0x2E	; 46
    e3b0:	9a e0       	ldi	r25, 0x0A	; 10
    e3b2:	1f 92       	push	r1
    e3b4:	9f 93       	push	r25
    e3b6:	8f 93       	push	r24
    e3b8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e3bc:	eb a1       	ldd	r30, Y+35	; 0x23
    e3be:	fc a1       	ldd	r31, Y+36	; 0x24
    e3c0:	81 85       	ldd	r24, Z+9	; 0x09
    e3c2:	92 85       	ldd	r25, Z+10	; 0x0a
    e3c4:	a0 e0       	ldi	r26, 0x00	; 0
    e3c6:	b0 e0       	ldi	r27, 0x00	; 0
    e3c8:	49 e0       	ldi	r20, 0x09	; 9
    e3ca:	88 0f       	add	r24, r24
    e3cc:	99 1f       	adc	r25, r25
    e3ce:	aa 1f       	adc	r26, r26
    e3d0:	bb 1f       	adc	r27, r27
    e3d2:	4a 95       	dec	r20
    e3d4:	d1 f7       	brne	.-12     	; 0xe3ca <fatfs_status+0x7a>
    e3d6:	bf 93       	push	r27
    e3d8:	af 93       	push	r26
    e3da:	9f 93       	push	r25
    e3dc:	8f 93       	push	r24
    e3de:	8f e0       	ldi	r24, 0x0F	; 15
    e3e0:	9a e0       	ldi	r25, 0x0A	; 10
    e3e2:	1f 92       	push	r1
    e3e4:	9f 93       	push	r25
    e3e6:	8f 93       	push	r24
    e3e8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e3ec:	eb a1       	ldd	r30, Y+35	; 0x23
    e3ee:	fc a1       	ldd	r31, Y+36	; 0x24
    e3f0:	82 81       	ldd	r24, Z+2	; 0x02
    e3f2:	1f 92       	push	r1
    e3f4:	8f 93       	push	r24
    e3f6:	81 ef       	ldi	r24, 0xF1	; 241
    e3f8:	99 e0       	ldi	r25, 0x09	; 9
    e3fa:	1f 92       	push	r1
    e3fc:	9f 93       	push	r25
    e3fe:	8f 93       	push	r24
    e400:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e404:	eb a1       	ldd	r30, Y+35	; 0x23
    e406:	fc a1       	ldd	r31, Y+36	; 0x24
    e408:	80 85       	ldd	r24, Z+8	; 0x08
    e40a:	8f 93       	push	r24
    e40c:	87 81       	ldd	r24, Z+7	; 0x07
    e40e:	8f 93       	push	r24
    e410:	83 ed       	ldi	r24, 0xD3	; 211
    e412:	99 e0       	ldi	r25, 0x09	; 9
    e414:	1f 92       	push	r1
    e416:	9f 93       	push	r25
    e418:	8f 93       	push	r24
    e41a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e41e:	eb a1       	ldd	r30, Y+35	; 0x23
    e420:	fc a1       	ldd	r31, Y+36	; 0x24
    e422:	80 a1       	ldd	r24, Z+32	; 0x20
    e424:	8f 93       	push	r24
    e426:	87 8d       	ldd	r24, Z+31	; 0x1f
    e428:	8f 93       	push	r24
    e42a:	86 8d       	ldd	r24, Z+30	; 0x1e
    e42c:	8f 93       	push	r24
    e42e:	85 8d       	ldd	r24, Z+29	; 0x1d
    e430:	8f 93       	push	r24
    e432:	84 eb       	ldi	r24, 0xB4	; 180
    e434:	99 e0       	ldi	r25, 0x09	; 9
    e436:	1f 92       	push	r1
    e438:	9f 93       	push	r25
    e43a:	8f 93       	push	r24
    e43c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e440:	eb a1       	ldd	r30, Y+35	; 0x23
    e442:	fc a1       	ldd	r31, Y+36	; 0x24
    e444:	81 8d       	ldd	r24, Z+25	; 0x19
    e446:	92 8d       	ldd	r25, Z+26	; 0x1a
    e448:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e44a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e44c:	02 97       	sbiw	r24, 0x02	; 2
    e44e:	a1 09       	sbc	r26, r1
    e450:	b1 09       	sbc	r27, r1
    e452:	bf 93       	push	r27
    e454:	af 93       	push	r26
    e456:	9f 93       	push	r25
    e458:	8f 93       	push	r24
    e45a:	85 e9       	ldi	r24, 0x95	; 149
    e45c:	99 e0       	ldi	r25, 0x09	; 9
    e45e:	1f 92       	push	r1
    e460:	9f 93       	push	r25
    e462:	8f 93       	push	r24
    e464:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e468:	0f b6       	in	r0, 0x3f	; 63
    e46a:	f8 94       	cli
    e46c:	de bf       	out	0x3e, r29	; 62
    e46e:	0f be       	out	0x3f, r0	; 63
    e470:	cd bf       	out	0x3d, r28	; 61
    e472:	eb a1       	ldd	r30, Y+35	; 0x23
    e474:	fc a1       	ldd	r31, Y+36	; 0x24
    e476:	80 a5       	ldd	r24, Z+40	; 0x28
    e478:	8f 93       	push	r24
    e47a:	87 a1       	ldd	r24, Z+39	; 0x27
    e47c:	8f 93       	push	r24
    e47e:	86 a1       	ldd	r24, Z+38	; 0x26
    e480:	8f 93       	push	r24
    e482:	85 a1       	ldd	r24, Z+37	; 0x25
    e484:	8f 93       	push	r24
    e486:	86 e7       	ldi	r24, 0x76	; 118
    e488:	99 e0       	ldi	r25, 0x09	; 9
    e48a:	1f 92       	push	r1
    e48c:	9f 93       	push	r25
    e48e:	8f 93       	push	r24
    e490:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e494:	eb a1       	ldd	r30, Y+35	; 0x23
    e496:	fc a1       	ldd	r31, Y+36	; 0x24
    e498:	84 a5       	ldd	r24, Z+44	; 0x2c
    e49a:	8f 93       	push	r24
    e49c:	83 a5       	ldd	r24, Z+43	; 0x2b
    e49e:	8f 93       	push	r24
    e4a0:	82 a5       	ldd	r24, Z+42	; 0x2a
    e4a2:	8f 93       	push	r24
    e4a4:	81 a5       	ldd	r24, Z+41	; 0x29
    e4a6:	8f 93       	push	r24
    e4a8:	87 e5       	ldi	r24, 0x57	; 87
    e4aa:	99 e0       	ldi	r25, 0x09	; 9
    e4ac:	1f 92       	push	r1
    e4ae:	9f 93       	push	r25
    e4b0:	8f 93       	push	r24
    e4b2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e4b6:	eb a1       	ldd	r30, Y+35	; 0x23
    e4b8:	fc a1       	ldd	r31, Y+36	; 0x24
    e4ba:	80 a9       	ldd	r24, Z+48	; 0x30
    e4bc:	8f 93       	push	r24
    e4be:	87 a5       	ldd	r24, Z+47	; 0x2f
    e4c0:	8f 93       	push	r24
    e4c2:	86 a5       	ldd	r24, Z+46	; 0x2e
    e4c4:	8f 93       	push	r24
    e4c6:	85 a5       	ldd	r24, Z+45	; 0x2d
    e4c8:	8f 93       	push	r24
    e4ca:	88 e3       	ldi	r24, 0x38	; 56
    e4cc:	99 e0       	ldi	r25, 0x09	; 9
    e4ce:	1f 92       	push	r1
    e4d0:	9f 93       	push	r25
    e4d2:	8f 93       	push	r24
    e4d4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e4d8:	ae 01       	movw	r20, r28
    e4da:	45 5e       	subi	r20, 0xE5	; 229
    e4dc:	5f 4f       	sbci	r21, 0xFF	; 255
    e4de:	be 01       	movw	r22, r28
    e4e0:	6f 5f       	subi	r22, 0xFF	; 255
    e4e2:	7f 4f       	sbci	r23, 0xFF	; 255
    e4e4:	c8 01       	movw	r24, r16
    e4e6:	0e 94 7d 69 	call	0xd2fa	; 0xd2fa <f_getlabel>
    if (res)
    e4ea:	0f b6       	in	r0, 0x3f	; 63
    e4ec:	f8 94       	cli
    e4ee:	de bf       	out	0x3e, r29	; 62
    e4f0:	0f be       	out	0x3f, r0	; 63
    e4f2:	cd bf       	out	0x3d, r28	; 61
    e4f4:	00 97       	sbiw	r24, 0x00	; 0
    e4f6:	e1 f5       	brne	.+120    	; 0xe570 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e4f8:	89 81       	ldd	r24, Y+1	; 0x01
    e4fa:	81 11       	cpse	r24, r1
    e4fc:	03 c0       	rjmp	.+6      	; 0xe504 <fatfs_status+0x1b4>
    e4fe:	82 e4       	ldi	r24, 0x42	; 66
    e500:	98 e0       	ldi	r25, 0x08	; 8
    e502:	02 c0       	rjmp	.+4      	; 0xe508 <fatfs_status+0x1b8>
    e504:	ce 01       	movw	r24, r28
    e506:	01 96       	adiw	r24, 0x01	; 1
    e508:	9f 93       	push	r25
    e50a:	8f 93       	push	r24
    e50c:	8a e1       	ldi	r24, 0x1A	; 26
    e50e:	99 e0       	ldi	r25, 0x09	; 9
    e510:	1f 92       	push	r1
    e512:	9f 93       	push	r25
    e514:	8f 93       	push	r24
    e516:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e51a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e51c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e51e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    e520:	be 8d       	ldd	r27, Y+30	; 0x1e
    e522:	9f 93       	push	r25
    e524:	8f 93       	push	r24
    e526:	cd 01       	movw	r24, r26
    e528:	aa 27       	eor	r26, r26
    e52a:	bb 27       	eor	r27, r27
    e52c:	9f 93       	push	r25
    e52e:	8f 93       	push	r24
    e530:	85 ef       	ldi	r24, 0xF5	; 245
    e532:	98 e0       	ldi	r25, 0x08	; 8
    e534:	1f 92       	push	r1
    e536:	9f 93       	push	r25
    e538:	8f 93       	push	r24
    e53a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e53e:	10 92 b2 1b 	sts	0x1BB2, r1	; 0x801bb2 <AccDirs+0x1>
    e542:	10 92 b1 1b 	sts	0x1BB1, r1	; 0x801bb1 <AccDirs>
    e546:	10 92 b4 1b 	sts	0x1BB4, r1	; 0x801bb4 <AccFiles+0x1>
    e54a:	10 92 b3 1b 	sts	0x1BB3, r1	; 0x801bb3 <AccFiles>
    e54e:	10 92 ad 1b 	sts	0x1BAD, r1	; 0x801bad <AccSize>
    e552:	10 92 ae 1b 	sts	0x1BAE, r1	; 0x801bae <AccSize+0x1>
    e556:	10 92 af 1b 	sts	0x1BAF, r1	; 0x801baf <AccSize+0x2>
    e55a:	10 92 b0 1b 	sts	0x1BB0, r1	; 0x801bb0 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e55e:	c8 01       	movw	r24, r16
    if (res)
    e560:	78 de       	rcall	.-784    	; 0xe252 <fatfs_scan_files>
    e562:	0f b6       	in	r0, 0x3f	; 63
    e564:	f8 94       	cli
    e566:	de bf       	out	0x3e, r29	; 62
    e568:	0f be       	out	0x3f, r0	; 63
    e56a:	cd bf       	out	0x3d, r28	; 61
    {
        put_rc(res);
    e56c:	00 97       	sbiw	r24, 0x00	; 0
    e56e:	11 f0       	breq	.+4      	; 0xe574 <fatfs_status+0x224>
        return;
    e570:	61 de       	rcall	.-830    	; 0xe234 <put_rc>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e572:	56 c0       	rjmp	.+172    	; 0xe620 <fatfs_status+0x2d0>
    e574:	0b a1       	ldd	r16, Y+35	; 0x23
    e576:	1c a1       	ldd	r17, Y+36	; 0x24
    e578:	f8 01       	movw	r30, r16
    e57a:	c1 84       	ldd	r12, Z+9	; 0x09
    e57c:	d2 84       	ldd	r13, Z+10	; 0x0a
    e57e:	e1 2c       	mov	r14, r1
    e580:	f1 2c       	mov	r15, r1
    e582:	6f 8d       	ldd	r22, Y+31	; 0x1f
    e584:	78 a1       	ldd	r23, Y+32	; 0x20
    e586:	89 a1       	ldd	r24, Y+33	; 0x21
    e588:	9a a1       	ldd	r25, Y+34	; 0x22
    e58a:	a7 01       	movw	r20, r14
    e58c:	96 01       	movw	r18, r12
    e58e:	0e 94 71 e4 	call	0x1c8e2	; 0x1c8e2 <__mulsi3>
    e592:	22 e0       	ldi	r18, 0x02	; 2
    e594:	30 e0       	ldi	r19, 0x00	; 0
    e596:	40 e0       	ldi	r20, 0x00	; 0
    e598:	50 e0       	ldi	r21, 0x00	; 0
    e59a:	0e 94 d5 e4 	call	0x1c9aa	; 0x1c9aa <__divmodsi4>
    e59e:	5f 93       	push	r21
    e5a0:	4f 93       	push	r20
    e5a2:	3f 93       	push	r19
    e5a4:	2f 93       	push	r18
    e5a6:	f8 01       	movw	r30, r16
    e5a8:	81 8d       	ldd	r24, Z+25	; 0x19
    e5aa:	92 8d       	ldd	r25, Z+26	; 0x1a
    e5ac:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e5ae:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e5b0:	9c 01       	movw	r18, r24
    e5b2:	ad 01       	movw	r20, r26
    e5b4:	22 50       	subi	r18, 0x02	; 2
    e5b6:	31 09       	sbc	r19, r1
    e5b8:	41 09       	sbc	r20, r1
    e5ba:	51 09       	sbc	r21, r1
    e5bc:	c7 01       	movw	r24, r14
    e5be:	b6 01       	movw	r22, r12
    e5c0:	0e 94 71 e4 	call	0x1c8e2	; 0x1c8e2 <__mulsi3>
    e5c4:	dc 01       	movw	r26, r24
    e5c6:	cb 01       	movw	r24, r22
    e5c8:	b6 95       	lsr	r27
    e5ca:	a7 95       	ror	r26
    e5cc:	97 95       	ror	r25
    e5ce:	87 95       	ror	r24
    e5d0:	bf 93       	push	r27
    e5d2:	af 93       	push	r26
    e5d4:	9f 93       	push	r25
    e5d6:	8f 93       	push	r24
    e5d8:	80 91 b2 1b 	lds	r24, 0x1BB2	; 0x801bb2 <AccDirs+0x1>
    e5dc:	8f 93       	push	r24
    e5de:	80 91 b1 1b 	lds	r24, 0x1BB1	; 0x801bb1 <AccDirs>
    e5e2:	8f 93       	push	r24
    e5e4:	80 91 b0 1b 	lds	r24, 0x1BB0	; 0x801bb0 <AccSize+0x3>
    e5e8:	8f 93       	push	r24
    e5ea:	80 91 af 1b 	lds	r24, 0x1BAF	; 0x801baf <AccSize+0x2>
    e5ee:	8f 93       	push	r24
    e5f0:	80 91 ae 1b 	lds	r24, 0x1BAE	; 0x801bae <AccSize+0x1>
    e5f4:	8f 93       	push	r24
    e5f6:	80 91 ad 1b 	lds	r24, 0x1BAD	; 0x801bad <AccSize>
    e5fa:	8f 93       	push	r24
    e5fc:	80 91 b4 1b 	lds	r24, 0x1BB4	; 0x801bb4 <AccFiles+0x1>
    e600:	8f 93       	push	r24
    e602:	80 91 b3 1b 	lds	r24, 0x1BB3	; 0x801bb3 <AccFiles>
    e606:	8f 93       	push	r24
    e608:	88 ea       	ldi	r24, 0xA8	; 168
    e60a:	98 e0       	ldi	r25, 0x08	; 8
    e60c:	1f 92       	push	r1
    e60e:	9f 93       	push	r25
    e610:	8f 93       	push	r24
    e612:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    e616:	0f b6       	in	r0, 0x3f	; 63
    e618:	f8 94       	cli
    e61a:	de bf       	out	0x3e, r29	; 62
    e61c:	0f be       	out	0x3f, r0	; 63
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    e61e:	cd bf       	out	0x3d, r28	; 61
    e620:	a4 96       	adiw	r28, 0x24	; 36
    e622:	e8 e0       	ldi	r30, 0x08	; 8
    e624:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

0000e628 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e628:	a6 e0       	ldi	r26, 0x06	; 6
    e62a:	b0 e0       	ldi	r27, 0x00	; 0
    e62c:	ea e1       	ldi	r30, 0x1A	; 26
    e62e:	f3 e7       	ldi	r31, 0x73	; 115
    e630:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    e634:	fc 01       	movw	r30, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e636:	86 89       	ldd	r24, Z+22	; 0x16
    e638:	81 11       	cpse	r24, r1
    e63a:	0b c0       	rjmp	.+22     	; 0xe652 <fatfs_filinfo_list+0x2a>
    {
        printf("fatfs_filinfo_list: empty\n");
    e63c:	8d e8       	ldi	r24, 0x8D	; 141
    e63e:	98 e0       	ldi	r25, 0x08	; 8
    e640:	1f 92       	push	r1
    e642:	9f 93       	push	r25
    e644:	8f 93       	push	r24
    e646:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return;
    e64a:	0f 90       	pop	r0
    e64c:	0f 90       	pop	r0
    e64e:	0f 90       	pop	r0
    e650:	6e c0       	rjmp	.+220    	; 0xe72e <fatfs_filinfo_list+0x106>
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e652:	80 85       	ldd	r24, Z+8	; 0x08
    e654:	84 fd       	sbrc	r24, 4
    e656:	02 c0       	rjmp	.+4      	; 0xe65c <fatfs_filinfo_list+0x34>
    e658:	9d e2       	ldi	r25, 0x2D	; 45
    e65a:	01 c0       	rjmp	.+2      	; 0xe65e <fatfs_filinfo_list+0x36>
    e65c:	94 e4       	ldi	r25, 0x44	; 68
    e65e:	99 83       	std	Y+1, r25	; 0x01
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e660:	80 fd       	sbrc	r24, 0
    e662:	02 c0       	rjmp	.+4      	; 0xe668 <fatfs_filinfo_list+0x40>
    e664:	9d e2       	ldi	r25, 0x2D	; 45
    e666:	01 c0       	rjmp	.+2      	; 0xe66a <fatfs_filinfo_list+0x42>
    e668:	92 e5       	ldi	r25, 0x52	; 82
    e66a:	9a 83       	std	Y+2, r25	; 0x02
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e66c:	81 fd       	sbrc	r24, 1
    e66e:	02 c0       	rjmp	.+4      	; 0xe674 <fatfs_filinfo_list+0x4c>
    e670:	9d e2       	ldi	r25, 0x2D	; 45
    e672:	01 c0       	rjmp	.+2      	; 0xe676 <fatfs_filinfo_list+0x4e>
    e674:	98 e4       	ldi	r25, 0x48	; 72
    e676:	9b 83       	std	Y+3, r25	; 0x03
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e678:	82 fd       	sbrc	r24, 2
    e67a:	02 c0       	rjmp	.+4      	; 0xe680 <fatfs_filinfo_list+0x58>
    e67c:	9d e2       	ldi	r25, 0x2D	; 45
    e67e:	01 c0       	rjmp	.+2      	; 0xe682 <fatfs_filinfo_list+0x5a>
    e680:	93 e5       	ldi	r25, 0x53	; 83
    e682:	9c 83       	std	Y+4, r25	; 0x04
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e684:	85 fd       	sbrc	r24, 5
    e686:	02 c0       	rjmp	.+4      	; 0xe68c <fatfs_filinfo_list+0x64>
    e688:	8d e2       	ldi	r24, 0x2D	; 45
    e68a:	01 c0       	rjmp	.+2      	; 0xe68e <fatfs_filinfo_list+0x66>
    e68c:	81 e4       	ldi	r24, 0x41	; 65
    e68e:	8d 83       	std	Y+5, r24	; 0x05
    attrs[5] = 0;
    e690:	1e 82       	std	Y+6, r1	; 0x06
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e692:	46 81       	ldd	r20, Z+6	; 0x06
    e694:	57 81       	ldd	r21, Z+7	; 0x07
    e696:	84 81       	ldd	r24, Z+4	; 0x04
    e698:	95 81       	ldd	r25, Z+5	; 0x05
    e69a:	9f 01       	movw	r18, r30
    e69c:	2a 5e       	subi	r18, 0xEA	; 234
    e69e:	3f 4f       	sbci	r19, 0xFF	; 255
    e6a0:	3f 93       	push	r19
    e6a2:	2f 93       	push	r18
    e6a4:	23 81       	ldd	r18, Z+3	; 0x03
    e6a6:	2f 93       	push	r18
    e6a8:	22 81       	ldd	r18, Z+2	; 0x02
    e6aa:	2f 93       	push	r18
    e6ac:	21 81       	ldd	r18, Z+1	; 0x01
    e6ae:	2f 93       	push	r18
    e6b0:	20 81       	ld	r18, Z
    e6b2:	2f 93       	push	r18
    e6b4:	9a 01       	movw	r18, r20
    e6b6:	45 e0       	ldi	r20, 0x05	; 5
    e6b8:	36 95       	lsr	r19
    e6ba:	27 95       	ror	r18
    e6bc:	4a 95       	dec	r20
    e6be:	e1 f7       	brne	.-8      	; 0xe6b8 <fatfs_filinfo_list+0x90>
    e6c0:	2f 73       	andi	r18, 0x3F	; 63
    e6c2:	33 27       	eor	r19, r19
    e6c4:	3f 93       	push	r19
    e6c6:	2f 93       	push	r18
    e6c8:	25 2f       	mov	r18, r21
    e6ca:	26 95       	lsr	r18
    e6cc:	26 95       	lsr	r18
    e6ce:	26 95       	lsr	r18
    e6d0:	1f 92       	push	r1
    e6d2:	2f 93       	push	r18
    e6d4:	9c 01       	movw	r18, r24
    e6d6:	2f 71       	andi	r18, 0x1F	; 31
    e6d8:	33 27       	eor	r19, r19
    e6da:	3f 93       	push	r19
    e6dc:	2f 93       	push	r18
    e6de:	9c 01       	movw	r18, r24
    e6e0:	55 e0       	ldi	r21, 0x05	; 5
    e6e2:	36 95       	lsr	r19
    e6e4:	27 95       	ror	r18
    e6e6:	5a 95       	dec	r21
    e6e8:	e1 f7       	brne	.-8      	; 0xe6e2 <fatfs_filinfo_list+0xba>
    e6ea:	2f 70       	andi	r18, 0x0F	; 15
    e6ec:	33 27       	eor	r19, r19
    e6ee:	3f 93       	push	r19
    e6f0:	2f 93       	push	r18
    e6f2:	89 2f       	mov	r24, r25
    e6f4:	99 27       	eor	r25, r25
    e6f6:	86 95       	lsr	r24
    e6f8:	84 54       	subi	r24, 0x44	; 68
    e6fa:	98 4f       	sbci	r25, 0xF8	; 248
    e6fc:	9f 93       	push	r25
    e6fe:	8f 93       	push	r24
    e700:	ce 01       	movw	r24, r28
    e702:	01 96       	adiw	r24, 0x01	; 1
    e704:	9f 93       	push	r25
    e706:	8f 93       	push	r24
    e708:	8b e6       	ldi	r24, 0x6B	; 107
    e70a:	98 e0       	ldi	r25, 0x08	; 8
    e70c:	1f 92       	push	r1
    e70e:	9f 93       	push	r25
    e710:	8f 93       	push	r24
    e712:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e716:	89 e6       	ldi	r24, 0x69	; 105
    e718:	98 e0       	ldi	r25, 0x08	; 8
    e71a:	1f 92       	push	r1
    e71c:	9f 93       	push	r25
    e71e:	8f 93       	push	r24
    e720:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    e724:	0f b6       	in	r0, 0x3f	; 63
    e726:	f8 94       	cli
    e728:	de bf       	out	0x3e, r29	; 62
    e72a:	0f be       	out	0x3f, r0	; 63
    e72c:	cd bf       	out	0x3d, r28	; 61
}
    e72e:	26 96       	adiw	r28, 0x06	; 6
    e730:	e2 e0       	ldi	r30, 0x02	; 2
    e732:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

0000e736 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e736:	cf 93       	push	r28
    e738:	df 93       	push	r29
    e73a:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e73c:	8e ea       	ldi	r24, 0xAE	; 174
    e73e:	9b e0       	ldi	r25, 0x0B	; 11
    e740:	1f 92       	push	r1
    e742:	9f 93       	push	r25
    e744:	8f 93       	push	r24
    e746:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    
    if(full)
    e74a:	0f 90       	pop	r0
    e74c:	0f 90       	pop	r0
    e74e:	0f 90       	pop	r0
    e750:	cd 2b       	or	r28, r29
    e752:	51 f0       	breq	.+20     	; 0xe768 <fatfs_help+0x32>
    {
        printf(
    e754:	82 e3       	ldi	r24, 0x32	; 50
    e756:	9b e0       	ldi	r25, 0x0B	; 11
    e758:	1f 92       	push	r1
    e75a:	9f 93       	push	r25
    e75c:	8f 93       	push	r24
    e75e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    e762:	0f 90       	pop	r0
    e764:	0f 90       	pop	r0
    e766:	0f 90       	pop	r0
#endif
        "\n"
        );
    }
        
}
    e768:	df 91       	pop	r29
    e76a:	cf 91       	pop	r28
    e76c:	08 95       	ret

0000e76e <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e76e:	aa e4       	ldi	r26, 0x4A	; 74
    e770:	b2 e0       	ldi	r27, 0x02	; 2
    e772:	ed eb       	ldi	r30, 0xBD	; 189
    e774:	f3 e7       	ldi	r31, 0x73	; 115
    e776:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    e77a:	8e 01       	movw	r16, r28
    e77c:	09 5e       	subi	r16, 0xE9	; 233
    e77e:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    e780:	00 97       	sbiw	r24, 0x00	; 0
    e782:	21 f0       	breq	.+8      	; 0xe78c <fatfs_ls+0x1e>
    e784:	fc 01       	movw	r30, r24
    e786:	20 81       	ld	r18, Z
    e788:	21 11       	cpse	r18, r1
    e78a:	03 c0       	rjmp	.+6      	; 0xe792 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e78c:	66 e4       	ldi	r22, 0x46	; 70
    e78e:	72 e1       	ldi	r23, 0x12	; 18
    e790:	01 c0       	rjmp	.+2      	; 0xe794 <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e792:	bc 01       	movw	r22, r24
    e794:	c8 01       	movw	r24, r16
    e796:	0e 94 a8 31 	call	0x6350	; 0x6350 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e79a:	1f 93       	push	r17
    e79c:	0f 93       	push	r16
    e79e:	82 ea       	ldi	r24, 0xA2	; 162
    e7a0:	9a e0       	ldi	r25, 0x0A	; 10
    e7a2:	1f 92       	push	r1
    e7a4:	9f 93       	push	r25
    e7a6:	8f 93       	push	r24
    e7a8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>

    res = f_opendir(&dirs, buff);
    e7ac:	b8 01       	movw	r22, r16
    e7ae:	ce 01       	movw	r24, r28
    e7b0:	89 5e       	subi	r24, 0xE9	; 233
    e7b2:	9d 4f       	sbci	r25, 0xFD	; 253
    e7b4:	0e 94 44 64 	call	0xc888	; 0xc888 <f_opendir>
    if (res) { put_rc(res); return; }
    e7b8:	0f 90       	pop	r0
    e7ba:	0f 90       	pop	r0
    e7bc:	0f 90       	pop	r0
    e7be:	0f 90       	pop	r0
    e7c0:	0f 90       	pop	r0
    e7c2:	00 97       	sbiw	r24, 0x00	; 0
    e7c4:	11 f0       	breq	.+4      	; 0xe7ca <fatfs_ls+0x5c>
    e7c6:	36 dd       	rcall	.-1428   	; 0xe234 <put_rc>
    p1 = s1 = s2 = 0;
    e7c8:	9a c0       	rjmp	.+308    	; 0xe8fe <fatfs_ls+0x190>
    e7ca:	cb 5b       	subi	r28, 0xBB	; 187
    e7cc:	dd 4f       	sbci	r29, 0xFD	; 253
    e7ce:	18 82       	st	Y, r1
    e7d0:	19 82       	std	Y+1, r1	; 0x01
    e7d2:	1a 82       	std	Y+2, r1	; 0x02
    e7d4:	1b 82       	std	Y+3, r1	; 0x03
    e7d6:	c5 54       	subi	r28, 0x45	; 69
    e7d8:	d2 40       	sbci	r29, 0x02	; 2
    e7da:	c1 2c       	mov	r12, r1
    e7dc:	d1 2c       	mov	r13, r1
    e7de:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e7e0:	f1 2c       	mov	r15, r1
    e7e2:	be 01       	movw	r22, r28
    e7e4:	6f 5f       	subi	r22, 0xFF	; 255
    e7e6:	7f 4f       	sbci	r23, 0xFF	; 255
    e7e8:	ce 01       	movw	r24, r28
    e7ea:	89 5e       	subi	r24, 0xE9	; 233
    e7ec:	9d 4f       	sbci	r25, 0xFD	; 253
    e7ee:	0e 94 ca 64 	call	0xc994	; 0xc994 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e7f2:	89 2b       	or	r24, r25
    e7f4:	49 f5       	brne	.+82     	; 0xe848 <fatfs_ls+0xda>
    e7f6:	8f 89       	ldd	r24, Y+23	; 0x17
    e7f8:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    e7fa:	31 f1       	breq	.+76     	; 0xe848 <fatfs_ls+0xda>
    e7fc:	89 85       	ldd	r24, Y+9	; 0x09
    e7fe:	84 ff       	sbrs	r24, 4
        {
            s2++;
    e800:	04 c0       	rjmp	.+8      	; 0xe80a <fatfs_ls+0x9c>
    e802:	ff ef       	ldi	r31, 0xFF	; 255
    e804:	cf 1a       	sub	r12, r31
    e806:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    e808:	1b c0       	rjmp	.+54     	; 0xe840 <fatfs_ls+0xd2>
    e80a:	2f ef       	ldi	r18, 0xFF	; 255
    e80c:	e2 1a       	sub	r14, r18
    e80e:	f2 0a       	sbc	r15, r18
    e810:	49 81       	ldd	r20, Y+1	; 0x01
    e812:	5a 81       	ldd	r21, Y+2	; 0x02
    e814:	6b 81       	ldd	r22, Y+3	; 0x03
    e816:	7c 81       	ldd	r23, Y+4	; 0x04
    e818:	cb 5b       	subi	r28, 0xBB	; 187
    e81a:	dd 4f       	sbci	r29, 0xFD	; 253
    e81c:	88 81       	ld	r24, Y
    e81e:	99 81       	ldd	r25, Y+1	; 0x01
    e820:	aa 81       	ldd	r26, Y+2	; 0x02
    e822:	bb 81       	ldd	r27, Y+3	; 0x03
    e824:	c5 54       	subi	r28, 0x45	; 69
    e826:	d2 40       	sbci	r29, 0x02	; 2
    e828:	84 0f       	add	r24, r20
    e82a:	95 1f       	adc	r25, r21
    e82c:	a6 1f       	adc	r26, r22
    e82e:	b7 1f       	adc	r27, r23
    e830:	cb 5b       	subi	r28, 0xBB	; 187
    e832:	dd 4f       	sbci	r29, 0xFD	; 253
    e834:	88 83       	st	Y, r24
    e836:	99 83       	std	Y+1, r25	; 0x01
    e838:	aa 83       	std	Y+2, r26	; 0x02
    e83a:	bb 83       	std	Y+3, r27	; 0x03
    e83c:	c5 54       	subi	r28, 0x45	; 69
        }
        fatfs_filinfo_list(&fno);
    e83e:	d2 40       	sbci	r29, 0x02	; 2
    e840:	ce 01       	movw	r24, r28
    e842:	01 96       	adiw	r24, 0x01	; 1
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e844:	f1 de       	rcall	.-542    	; 0xe628 <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e846:	cd cf       	rjmp	.-102    	; 0xe7e2 <fatfs_ls+0x74>
    e848:	df 92       	push	r13
    e84a:	cf 92       	push	r12
    e84c:	c8 5b       	subi	r28, 0xB8	; 184
    e84e:	dd 4f       	sbci	r29, 0xFD	; 253
    e850:	88 81       	ld	r24, Y
    e852:	c8 54       	subi	r28, 0x48	; 72
    e854:	d2 40       	sbci	r29, 0x02	; 2
    e856:	8f 93       	push	r24
    e858:	c9 5b       	subi	r28, 0xB9	; 185
    e85a:	dd 4f       	sbci	r29, 0xFD	; 253
    e85c:	88 81       	ld	r24, Y
    e85e:	c7 54       	subi	r28, 0x47	; 71
    e860:	d2 40       	sbci	r29, 0x02	; 2
    e862:	8f 93       	push	r24
    e864:	ca 5b       	subi	r28, 0xBA	; 186
    e866:	dd 4f       	sbci	r29, 0xFD	; 253
    e868:	88 81       	ld	r24, Y
    e86a:	c6 54       	subi	r28, 0x46	; 70
    e86c:	d2 40       	sbci	r29, 0x02	; 2
    e86e:	8f 93       	push	r24
    e870:	cb 5b       	subi	r28, 0xBB	; 187
    e872:	dd 4f       	sbci	r29, 0xFD	; 253
    e874:	88 81       	ld	r24, Y
    e876:	c5 54       	subi	r28, 0x45	; 69
    e878:	d2 40       	sbci	r29, 0x02	; 2
    e87a:	8f 93       	push	r24
    e87c:	ff 92       	push	r15
    e87e:	ef 92       	push	r14
    e880:	89 e7       	ldi	r24, 0x79	; 121
    e882:	9a e0       	ldi	r25, 0x0A	; 10
    e884:	1f 92       	push	r1
    e886:	9f 93       	push	r25
    e888:	8f 93       	push	r24
    e88a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e88e:	ae 01       	movw	r20, r28
    e890:	47 5b       	subi	r20, 0xB7	; 183
    e892:	5d 4f       	sbci	r21, 0xFD	; 253
    e894:	be 01       	movw	r22, r28
    e896:	6b 5b       	subi	r22, 0xBB	; 187
    e898:	7d 4f       	sbci	r23, 0xFD	; 253
    e89a:	c8 01       	movw	r24, r16
    e89c:	0e 94 4c 65 	call	0xca98	; 0xca98 <f_getfree>
    e8a0:	0f b6       	in	r0, 0x3f	; 63
    e8a2:	f8 94       	cli
    e8a4:	de bf       	out	0x3e, r29	; 62
    e8a6:	0f be       	out	0x3f, r0	; 63
    e8a8:	cd bf       	out	0x3d, r28	; 61
    e8aa:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e8ac:	41 f5       	brne	.+80     	; 0xe8fe <fatfs_ls+0x190>
    e8ae:	c7 5b       	subi	r28, 0xB7	; 183
    e8b0:	dd 4f       	sbci	r29, 0xFD	; 253
    e8b2:	e8 81       	ld	r30, Y
    e8b4:	f9 81       	ldd	r31, Y+1	; 0x01
    e8b6:	c9 54       	subi	r28, 0x49	; 73
    e8b8:	d2 40       	sbci	r29, 0x02	; 2
    e8ba:	a1 85       	ldd	r26, Z+9	; 0x09
    e8bc:	b2 85       	ldd	r27, Z+10	; 0x0a
    e8be:	cb 5b       	subi	r28, 0xBB	; 187
    e8c0:	dd 4f       	sbci	r29, 0xFD	; 253
    e8c2:	28 81       	ld	r18, Y
    e8c4:	39 81       	ldd	r19, Y+1	; 0x01
    e8c6:	4a 81       	ldd	r20, Y+2	; 0x02
    e8c8:	5b 81       	ldd	r21, Y+3	; 0x03
    e8ca:	c5 54       	subi	r28, 0x45	; 69
    e8cc:	d2 40       	sbci	r29, 0x02	; 2
    e8ce:	0e 94 15 e5 	call	0x1ca2a	; 0x1ca2a <__muluhisi3>
    e8d2:	22 e0       	ldi	r18, 0x02	; 2
    e8d4:	30 e0       	ldi	r19, 0x00	; 0
    e8d6:	40 e0       	ldi	r20, 0x00	; 0
    e8d8:	50 e0       	ldi	r21, 0x00	; 0
    e8da:	0e 94 d5 e4 	call	0x1c9aa	; 0x1c9aa <__divmodsi4>
    e8de:	5f 93       	push	r21
    e8e0:	4f 93       	push	r20
    e8e2:	3f 93       	push	r19
    e8e4:	2f 93       	push	r18
    e8e6:	84 e6       	ldi	r24, 0x64	; 100
    e8e8:	9a e0       	ldi	r25, 0x0A	; 10
    e8ea:	1f 92       	push	r1
    e8ec:	9f 93       	push	r25
    e8ee:	8f 93       	push	r24
    e8f0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    e8f4:	0f b6       	in	r0, 0x3f	; 63
    e8f6:	f8 94       	cli
    e8f8:	de bf       	out	0x3e, r29	; 62
    e8fa:	0f be       	out	0x3f, r0	; 63
}
    e8fc:	cd bf       	out	0x3d, r28	; 61
    e8fe:	c6 5b       	subi	r28, 0xB6	; 182
    e900:	dd 4f       	sbci	r29, 0xFD	; 253
    e902:	e8 e0       	ldi	r30, 0x08	; 8
    e904:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

0000e908 <mmc_test>:
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    printf("==============================\n");
    e908:	82 e0       	ldi	r24, 0x02	; 2
    e90a:	9b e0       	ldi	r25, 0x0B	; 11
    e90c:	1f 92       	push	r1
    e90e:	9f 93       	push	r25
    e910:	8f 93       	push	r24
    e912:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("START MMC TEST\n");
    e916:	82 ef       	ldi	r24, 0xF2	; 242
    e918:	9a e0       	ldi	r25, 0x0A	; 10
    e91a:	1f 92       	push	r1
    e91c:	9f 93       	push	r25
    e91e:	8f 93       	push	r24
    e920:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    fatfs_status("/");
    e924:	88 e3       	ldi	r24, 0x38	; 56
    e926:	98 e0       	ldi	r25, 0x08	; 8
    e928:	13 dd       	rcall	.-1498   	; 0xe350 <fatfs_status>
    printf("MMC Directory List\n");
    e92a:	8e ed       	ldi	r24, 0xDE	; 222
    e92c:	9a e0       	ldi	r25, 0x0A	; 10
    e92e:	1f 92       	push	r1
    e930:	9f 93       	push	r25
    e932:	8f 93       	push	r24
    e934:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    fatfs_ls("/");
    e938:	88 e3       	ldi	r24, 0x38	; 56
    e93a:	98 e0       	ldi	r25, 0x08	; 8
    e93c:	18 df       	rcall	.-464    	; 0xe76e <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e93e:	80 ed       	ldi	r24, 0xD0	; 208
    e940:	9a e0       	ldi	r25, 0x0A	; 10
    e942:	1f 92       	push	r1
    e944:	9f 93       	push	r25
    e946:	8f 93       	push	r24
    e948:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("==============================\n");
    e94c:	80 eb       	ldi	r24, 0xB0	; 176
    e94e:	9a e0       	ldi	r25, 0x0A	; 10
    e950:	1f 92       	push	r1
    e952:	9f 93       	push	r25
    e954:	8f 93       	push	r24
    e956:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
}
    e95a:	8d b7       	in	r24, 0x3d	; 61
    e95c:	9e b7       	in	r25, 0x3e	; 62
    e95e:	0f 96       	adiw	r24, 0x0f	; 15
    e960:	0f b6       	in	r0, 0x3f	; 63
    e962:	f8 94       	cli
    e964:	9e bf       	out	0x3e, r25	; 62
    e966:	0f be       	out	0x3f, r0	; 63
    e968:	8d bf       	out	0x3d, r24	; 61
    e96a:	08 95       	ret

0000e96c <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e96c:	ef 92       	push	r14
    e96e:	ff 92       	push	r15
    e970:	0f 93       	push	r16
    e972:	1f 93       	push	r17
    e974:	cf 93       	push	r28
    e976:	df 93       	push	r29
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    e978:	fb 01       	movw	r30, r22
    e97a:	20 81       	ld	r18, Z
    e97c:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e97e:	21 15       	cp	r18, r1
    e980:	31 05       	cpc	r19, r1
    e982:	19 f4       	brne	.+6      	; 0xe98a <fatfs_tests+0x1e>
        return(0);
    e984:	80 e0       	ldi	r24, 0x00	; 0
    e986:	90 e0       	ldi	r25, 0x00	; 0
    e988:	77 c0       	rjmp	.+238    	; 0xea78 <fatfs_tests+0x10c>
    e98a:	eb 01       	movw	r28, r22
    e98c:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    e98e:	6c e5       	ldi	r22, 0x5C	; 92
    e990:	78 e0       	ldi	r23, 0x08	; 8
    e992:	c9 01       	movw	r24, r18
    e994:	0e 94 85 32 	call	0x650a	; 0x650a <MATCH>
    e998:	89 2b       	or	r24, r25
    e99a:	a1 f3       	breq	.-24     	; 0xe984 <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    e99c:	ea 80       	ldd	r14, Y+2	; 0x02
    e99e:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    e9a0:	e1 14       	cp	r14, r1
    e9a2:	f1 04       	cpc	r15, r1
    e9a4:	21 f4       	brne	.+8      	; 0xe9ae <fatfs_tests+0x42>
        {
            fatfs_help(1);
    e9a6:	81 e0       	ldi	r24, 0x01	; 1
    e9a8:	90 e0       	ldi	r25, 0x00	; 0
    e9aa:	c5 de       	rcall	.-630    	; 0xe736 <fatfs_help>
    e9ac:	63 c0       	rjmp	.+198    	; 0xea74 <fatfs_tests+0x108>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    e9ae:	67 ef       	ldi	r22, 0xF7	; 247
    e9b0:	75 e1       	ldi	r23, 0x15	; 21
    e9b2:	c7 01       	movw	r24, r14
    e9b4:	0e 94 85 32 	call	0x650a	; 0x650a <MATCH>
    e9b8:	89 2b       	or	r24, r25
    e9ba:	a9 f7       	brne	.-22     	; 0xe9a6 <fatfs_tests+0x3a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    e9bc:	98 01       	movw	r18, r16
    e9be:	42 e0       	ldi	r20, 0x02	; 2
    e9c0:	50 e0       	ldi	r21, 0x00	; 0
    e9c2:	62 e6       	ldi	r22, 0x62	; 98
    e9c4:	78 e0       	ldi	r23, 0x08	; 8
    e9c6:	c7 01       	movw	r24, r14
    e9c8:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
    e9cc:	89 2b       	or	r24, r25
    e9ce:	51 f1       	breq	.+84     	; 0xea24 <fatfs_tests+0xb8>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    e9d0:	1f 93       	push	r17
    e9d2:	0f 93       	push	r16
    e9d4:	1f 92       	push	r1
    e9d6:	82 e0       	ldi	r24, 0x02	; 2
    e9d8:	8f 93       	push	r24
    e9da:	82 e2       	ldi	r24, 0x22	; 34
    e9dc:	9b e0       	ldi	r25, 0x0B	; 11
    e9de:	1f 92       	push	r1
    e9e0:	9f 93       	push	r25
    e9e2:	8f 93       	push	r24
    e9e4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    e9e8:	7e 01       	movw	r14, r28
    e9ea:	f4 e0       	ldi	r31, 0x04	; 4
    e9ec:	ef 0e       	add	r14, r31
    e9ee:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    e9f0:	8d b7       	in	r24, 0x3d	; 61
    e9f2:	9e b7       	in	r25, 0x3e	; 62
    e9f4:	07 96       	adiw	r24, 0x07	; 7
    e9f6:	0f b6       	in	r0, 0x3f	; 63
    e9f8:	f8 94       	cli
    e9fa:	9e bf       	out	0x3e, r25	; 62
    e9fc:	0f be       	out	0x3f, r0	; 63
    e9fe:	8d bf       	out	0x3d, r24	; 61
    ea00:	c2 e0       	ldi	r28, 0x02	; 2
    ea02:	d0 e0       	ldi	r29, 0x00	; 0
    ea04:	c0 17       	cp	r28, r16
    ea06:	d1 07       	cpc	r29, r17
    ea08:	3c f4       	brge	.+14     	; 0xea18 <fatfs_tests+0xac>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    ea0a:	f7 01       	movw	r30, r14
    ea0c:	81 91       	ld	r24, Z+
    ea0e:	91 91       	ld	r25, Z+
    ea10:	7f 01       	movw	r14, r30
    ea12:	ad de       	rcall	.-678    	; 0xe76e <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    ea14:	21 96       	adiw	r28, 0x01	; 1
    ea16:	f6 cf       	rjmp	.-20     	; 0xea04 <fatfs_tests+0x98>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    ea18:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    ea1a:	61 f5       	brne	.+88     	; 0xea74 <fatfs_tests+0x108>
    ea1c:	87 e1       	ldi	r24, 0x17	; 23
    ea1e:	97 e1       	ldi	r25, 0x17	; 23
    ea20:	a6 de       	rcall	.-692    	; 0xe76e <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    ea22:	28 c0       	rjmp	.+80     	; 0xea74 <fatfs_tests+0x108>
    ea24:	98 01       	movw	r18, r16
    ea26:	42 e0       	ldi	r20, 0x02	; 2
    ea28:	50 e0       	ldi	r21, 0x00	; 0
    ea2a:	65 e6       	ldi	r22, 0x65	; 101
    ea2c:	78 e0       	ldi	r23, 0x08	; 8
    ea2e:	c7 01       	movw	r24, r14
    ea30:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
    {
        mmc_test();
    ea34:	89 2b       	or	r24, r25
    ea36:	11 f0       	breq	.+4      	; 0xea3c <fatfs_tests+0xd0>
    ea38:	67 df       	rcall	.-306    	; 0xe908 <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    ea3a:	1c c0       	rjmp	.+56     	; 0xea74 <fatfs_tests+0x108>
    ea3c:	98 01       	movw	r18, r16
    ea3e:	42 e0       	ldi	r20, 0x02	; 2
    ea40:	50 e0       	ldi	r21, 0x00	; 0
    ea42:	6e e6       	ldi	r22, 0x6E	; 110
    ea44:	78 e0       	ldi	r23, 0x08	; 8
    ea46:	c7 01       	movw	r24, r14
    ea48:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
    {
        mmc_init(1);
    ea4c:	89 2b       	or	r24, r25
    ea4e:	21 f0       	breq	.+8      	; 0xea58 <fatfs_tests+0xec>
    ea50:	81 e0       	ldi	r24, 0x01	; 1
    ea52:	90 e0       	ldi	r25, 0x00	; 0
    ea54:	cb da       	rcall	.-2666   	; 0xdfec <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    ea56:	0e c0       	rjmp	.+28     	; 0xea74 <fatfs_tests+0x108>
    ea58:	98 01       	movw	r18, r16
    ea5a:	43 e0       	ldi	r20, 0x03	; 3
    ea5c:	50 e0       	ldi	r21, 0x00	; 0
    ea5e:	67 e7       	ldi	r22, 0x77	; 119
    ea60:	78 e0       	ldi	r23, 0x08	; 8
    ea62:	c7 01       	movw	r24, r14
    ea64:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
    ea68:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    ea6a:	09 f4       	brne	.+2      	; 0xea6e <fatfs_tests+0x102>
    ea6c:	8b cf       	rjmp	.-234    	; 0xe984 <fatfs_tests+0x18>
    ea6e:	8c 81       	ldd	r24, Y+4	; 0x04
    ea70:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    ea72:	6e dc       	rcall	.-1828   	; 0xe350 <fatfs_status>
    ea74:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    ea76:	90 e0       	ldi	r25, 0x00	; 0
    ea78:	cd b7       	in	r28, 0x3d	; 61
    ea7a:	de b7       	in	r29, 0x3e	; 62
    ea7c:	e6 e0       	ldi	r30, 0x06	; 6
    ea7e:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

0000ea82 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    ea82:	8f 92       	push	r8
    ea84:	9f 92       	push	r9
    ea86:	af 92       	push	r10
    ea88:	bf 92       	push	r11
    ea8a:	ef 92       	push	r14
    ea8c:	ff 92       	push	r15
    ea8e:	0f 93       	push	r16
    ea90:	1f 93       	push	r17
    ea92:	cf 93       	push	r28
    ea94:	df 93       	push	r29
    ea96:	00 d0       	rcall	.+0      	; 0xea98 <fatfs_getc+0x16>
    ea98:	1f 92       	push	r1
    ea9a:	cd b7       	in	r28, 0x3d	; 61
    ea9c:	de b7       	in	r29, 0x3e	; 62
    ea9e:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    eaa2:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    eaa6:	00 97       	sbiw	r24, 0x00	; 0
    eaa8:	39 f4       	brne	.+14     	; 0xeab8 <fatfs_getc+0x36>
    eaaa:	89 e0       	ldi	r24, 0x09	; 9
    eaac:	90 e0       	ldi	r25, 0x00	; 0
    eaae:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    eab2:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    eab6:	2f c0       	rjmp	.+94     	; 0xeb16 <fatfs_getc+0x94>
    eab8:	fc 01       	movw	r30, r24
    eaba:	e4 84       	ldd	r14, Z+12	; 0x0c
    eabc:	f5 84       	ldd	r15, Z+13	; 0x0d
    eabe:	e1 14       	cp	r14, r1
    eac0:	f1 04       	cpc	r15, r1
    eac2:	99 f3       	breq	.-26     	; 0xeaaa <fatfs_getc+0x28>
    eac4:	8c 01       	movw	r16, r24
    eac6:	9e 01       	movw	r18, r28
    eac8:	2f 5f       	subi	r18, 0xFF	; 255
    eaca:	3f 4f       	sbci	r19, 0xFF	; 255
    eacc:	41 e0       	ldi	r20, 0x01	; 1
    eace:	50 e0       	ldi	r21, 0x00	; 0
    ead0:	be 01       	movw	r22, r28
    ead2:	6d 5f       	subi	r22, 0xFD	; 253
    ead4:	7f 4f       	sbci	r23, 0xFF	; 255
    ead6:	c7 01       	movw	r24, r14
    ead8:	0e 94 5d 5c 	call	0xb8ba	; 0xb8ba <f_read>
    eadc:	00 97       	sbiw	r24, 0x00	; 0
    eade:	31 f4       	brne	.+12     	; 0xeaec <fatfs_getc+0x6a>
    eae0:	29 81       	ldd	r18, Y+1	; 0x01
    eae2:	3a 81       	ldd	r19, Y+2	; 0x02
    eae4:	21 30       	cpi	r18, 0x01	; 1
    eae6:	31 05       	cpc	r19, r1
    eae8:	c9 f0       	breq	.+50     	; 0xeb1c <fatfs_getc+0x9a>
    eaea:	03 c0       	rjmp	.+6      	; 0xeaf2 <fatfs_getc+0x70>
    eaec:	84 31       	cpi	r24, 0x14	; 20
    eaee:	91 05       	cpc	r25, r1
    eaf0:	40 f4       	brcc	.+16     	; 0xeb02 <fatfs_getc+0x80>
    eaf2:	fc 01       	movw	r30, r24
    eaf4:	e0 5f       	subi	r30, 0xF0	; 240
    eaf6:	f8 4f       	sbci	r31, 0xF8	; 248
    eaf8:	80 81       	ld	r24, Z
    eafa:	08 2e       	mov	r0, r24
    eafc:	00 0c       	add	r0, r0
    eafe:	99 0b       	sbc	r25, r25
    eb00:	02 c0       	rjmp	.+4      	; 0xeb06 <fatfs_getc+0x84>
    eb02:	83 e2       	ldi	r24, 0x23	; 35
    eb04:	90 e0       	ldi	r25, 0x00	; 0
    eb06:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    eb0a:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    eb0e:	f8 01       	movw	r30, r16
    eb10:	83 81       	ldd	r24, Z+3	; 0x03
    eb12:	80 62       	ori	r24, 0x20	; 32
    eb14:	83 83       	std	Z+3, r24	; 0x03
    eb16:	8f ef       	ldi	r24, 0xFF	; 255
    eb18:	9f ef       	ldi	r25, 0xFF	; 255
    eb1a:	28 c0       	rjmp	.+80     	; 0xeb6c <fatfs_getc+0xea>
    eb1c:	8b 81       	ldd	r24, Y+3	; 0x03
    eb1e:	8d 30       	cpi	r24, 0x0D	; 13
    eb20:	01 f5       	brne	.+64     	; 0xeb62 <fatfs_getc+0xe0>
    eb22:	f7 01       	movw	r30, r14
    eb24:	80 88       	ldd	r8, Z+16	; 0x10
    eb26:	91 88       	ldd	r9, Z+17	; 0x11
    eb28:	a2 88       	ldd	r10, Z+18	; 0x12
    eb2a:	b3 88       	ldd	r11, Z+19	; 0x13
    eb2c:	9e 01       	movw	r18, r28
    eb2e:	2f 5f       	subi	r18, 0xFF	; 255
    eb30:	3f 4f       	sbci	r19, 0xFF	; 255
    eb32:	41 e0       	ldi	r20, 0x01	; 1
    eb34:	50 e0       	ldi	r21, 0x00	; 0
    eb36:	be 01       	movw	r22, r28
    eb38:	6d 5f       	subi	r22, 0xFD	; 253
    eb3a:	7f 4f       	sbci	r23, 0xFF	; 255
    eb3c:	c7 01       	movw	r24, r14
    eb3e:	0e 94 5d 5c 	call	0xb8ba	; 0xb8ba <f_read>
    eb42:	89 2b       	or	r24, r25
    eb44:	89 f4       	brne	.+34     	; 0xeb68 <fatfs_getc+0xe6>
    eb46:	89 81       	ldd	r24, Y+1	; 0x01
    eb48:	9a 81       	ldd	r25, Y+2	; 0x02
    eb4a:	01 97       	sbiw	r24, 0x01	; 1
    eb4c:	69 f4       	brne	.+26     	; 0xeb68 <fatfs_getc+0xe6>
    eb4e:	8b 81       	ldd	r24, Y+3	; 0x03
    eb50:	8a 30       	cpi	r24, 0x0A	; 10
    eb52:	31 f0       	breq	.+12     	; 0xeb60 <fatfs_getc+0xde>
    eb54:	b5 01       	movw	r22, r10
    eb56:	a4 01       	movw	r20, r8
    eb58:	c7 01       	movw	r24, r14
    eb5a:	0e 94 69 61 	call	0xc2d2	; 0xc2d2 <f_lseek>
    eb5e:	04 c0       	rjmp	.+8      	; 0xeb68 <fatfs_getc+0xe6>
    eb60:	8b 83       	std	Y+3, r24	; 0x03
    eb62:	8b 81       	ldd	r24, Y+3	; 0x03
    eb64:	90 e0       	ldi	r25, 0x00	; 0
    eb66:	02 c0       	rjmp	.+4      	; 0xeb6c <fatfs_getc+0xea>
    eb68:	8a e0       	ldi	r24, 0x0A	; 10
    eb6a:	90 e0       	ldi	r25, 0x00	; 0
    eb6c:	0f 90       	pop	r0
    eb6e:	0f 90       	pop	r0
    eb70:	0f 90       	pop	r0
    eb72:	df 91       	pop	r29
    eb74:	cf 91       	pop	r28
    eb76:	1f 91       	pop	r17
    eb78:	0f 91       	pop	r16
    eb7a:	ff 90       	pop	r15
    eb7c:	ef 90       	pop	r14
    eb7e:	bf 90       	pop	r11
    eb80:	af 90       	pop	r10
    eb82:	9f 90       	pop	r9
    eb84:	8f 90       	pop	r8
    eb86:	08 95       	ret

0000eb88 <fatfs_putc>:
    eb88:	a3 e0       	ldi	r26, 0x03	; 3
    eb8a:	b0 e0       	ldi	r27, 0x00	; 0
    eb8c:	ea ec       	ldi	r30, 0xCA	; 202
    eb8e:	f5 e7       	ldi	r31, 0x75	; 117
    eb90:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__prologue_saves__+0x1c>
    eb94:	8b 83       	std	Y+3, r24	; 0x03
    eb96:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    eb9a:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    eb9e:	61 15       	cp	r22, r1
    eba0:	71 05       	cpc	r23, r1
    eba2:	39 f4       	brne	.+14     	; 0xebb2 <fatfs_putc+0x2a>
    eba4:	89 e0       	ldi	r24, 0x09	; 9
    eba6:	90 e0       	ldi	r25, 0x00	; 0
    eba8:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    ebac:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    ebb0:	2d c0       	rjmp	.+90     	; 0xec0c <fatfs_putc+0x84>
    ebb2:	fb 01       	movw	r30, r22
    ebb4:	84 85       	ldd	r24, Z+12	; 0x0c
    ebb6:	95 85       	ldd	r25, Z+13	; 0x0d
    ebb8:	00 97       	sbiw	r24, 0x00	; 0
    ebba:	a1 f3       	breq	.-24     	; 0xeba4 <fatfs_putc+0x1c>
    ebbc:	8b 01       	movw	r16, r22
    ebbe:	9e 01       	movw	r18, r28
    ebc0:	2f 5f       	subi	r18, 0xFF	; 255
    ebc2:	3f 4f       	sbci	r19, 0xFF	; 255
    ebc4:	41 e0       	ldi	r20, 0x01	; 1
    ebc6:	50 e0       	ldi	r21, 0x00	; 0
    ebc8:	be 01       	movw	r22, r28
    ebca:	6d 5f       	subi	r22, 0xFD	; 253
    ebcc:	7f 4f       	sbci	r23, 0xFF	; 255
    ebce:	0e 94 a8 5d 	call	0xbb50	; 0xbb50 <f_write>
    ebd2:	00 97       	sbiw	r24, 0x00	; 0
    ebd4:	31 f4       	brne	.+12     	; 0xebe2 <fatfs_putc+0x5a>
    ebd6:	29 81       	ldd	r18, Y+1	; 0x01
    ebd8:	3a 81       	ldd	r19, Y+2	; 0x02
    ebda:	21 30       	cpi	r18, 0x01	; 1
    ebdc:	31 05       	cpc	r19, r1
    ebde:	c9 f0       	breq	.+50     	; 0xec12 <fatfs_putc+0x8a>
    ebe0:	03 c0       	rjmp	.+6      	; 0xebe8 <fatfs_putc+0x60>
    ebe2:	84 31       	cpi	r24, 0x14	; 20
    ebe4:	91 05       	cpc	r25, r1
    ebe6:	40 f4       	brcc	.+16     	; 0xebf8 <fatfs_putc+0x70>
    ebe8:	fc 01       	movw	r30, r24
    ebea:	e0 5f       	subi	r30, 0xF0	; 240
    ebec:	f8 4f       	sbci	r31, 0xF8	; 248
    ebee:	80 81       	ld	r24, Z
    ebf0:	08 2e       	mov	r0, r24
    ebf2:	00 0c       	add	r0, r0
    ebf4:	99 0b       	sbc	r25, r25
    ebf6:	02 c0       	rjmp	.+4      	; 0xebfc <fatfs_putc+0x74>
    ebf8:	83 e2       	ldi	r24, 0x23	; 35
    ebfa:	90 e0       	ldi	r25, 0x00	; 0
    ebfc:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    ec00:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    ec04:	f8 01       	movw	r30, r16
    ec06:	83 81       	ldd	r24, Z+3	; 0x03
    ec08:	80 62       	ori	r24, 0x20	; 32
    ec0a:	83 83       	std	Z+3, r24	; 0x03
    ec0c:	8f ef       	ldi	r24, 0xFF	; 255
    ec0e:	9f ef       	ldi	r25, 0xFF	; 255
    ec10:	02 c0       	rjmp	.+4      	; 0xec16 <fatfs_putc+0x8e>
    ec12:	8b 81       	ldd	r24, Y+3	; 0x03
    ec14:	90 e0       	ldi	r25, 0x00	; 0
    ec16:	23 96       	adiw	r28, 0x03	; 3
    ec18:	e4 e0       	ldi	r30, 0x04	; 4
    ec1a:	0c 94 5f e5 	jmp	0x1cabe	; 0x1cabe <__epilogue_restores__+0x1c>

0000ec1e <fgetc>:
    ec1e:	cf 93       	push	r28
    ec20:	df 93       	push	r29
    ec22:	ec 01       	movw	r28, r24
    ec24:	00 97       	sbiw	r24, 0x00	; 0
    ec26:	39 f4       	brne	.+14     	; 0xec36 <fgetc+0x18>
    ec28:	89 e0       	ldi	r24, 0x09	; 9
    ec2a:	90 e0       	ldi	r25, 0x00	; 0
    ec2c:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    ec30:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    ec34:	40 c0       	rjmp	.+128    	; 0xecb6 <fgetc+0x98>
    ec36:	2b 81       	ldd	r18, Y+3	; 0x03
    ec38:	20 ff       	sbrs	r18, 0
    ec3a:	3d c0       	rjmp	.+122    	; 0xecb6 <fgetc+0x98>
    ec3c:	26 ff       	sbrs	r18, 6
    ec3e:	0a c0       	rjmp	.+20     	; 0xec54 <fgetc+0x36>
    ec40:	2f 7b       	andi	r18, 0xBF	; 191
    ec42:	2b 83       	std	Y+3, r18	; 0x03
    ec44:	8e 81       	ldd	r24, Y+6	; 0x06
    ec46:	9f 81       	ldd	r25, Y+7	; 0x07
    ec48:	01 96       	adiw	r24, 0x01	; 1
    ec4a:	9f 83       	std	Y+7, r25	; 0x07
    ec4c:	8e 83       	std	Y+6, r24	; 0x06
    ec4e:	8a 81       	ldd	r24, Y+2	; 0x02
    ec50:	90 e0       	ldi	r25, 0x00	; 0
    ec52:	33 c0       	rjmp	.+102    	; 0xecba <fgetc+0x9c>
    ec54:	22 ff       	sbrs	r18, 2
    ec56:	0d c0       	rjmp	.+26     	; 0xec72 <fgetc+0x54>
    ec58:	e8 81       	ld	r30, Y
    ec5a:	f9 81       	ldd	r31, Y+1	; 0x01
    ec5c:	80 81       	ld	r24, Z
    ec5e:	90 e0       	ldi	r25, 0x00	; 0
    ec60:	00 97       	sbiw	r24, 0x00	; 0
    ec62:	19 f4       	brne	.+6      	; 0xec6a <fgetc+0x4c>
    ec64:	20 62       	ori	r18, 0x20	; 32
    ec66:	2b 83       	std	Y+3, r18	; 0x03
    ec68:	26 c0       	rjmp	.+76     	; 0xecb6 <fgetc+0x98>
    ec6a:	31 96       	adiw	r30, 0x01	; 1
    ec6c:	f9 83       	std	Y+1, r31	; 0x01
    ec6e:	e8 83       	st	Y, r30
    ec70:	1b c0       	rjmp	.+54     	; 0xeca8 <fgetc+0x8a>
    ec72:	ea 85       	ldd	r30, Y+10	; 0x0a
    ec74:	fb 85       	ldd	r31, Y+11	; 0x0b
    ec76:	30 97       	sbiw	r30, 0x00	; 0
    ec78:	59 f4       	brne	.+22     	; 0xec90 <fgetc+0x72>
    ec7a:	8e e7       	ldi	r24, 0x7E	; 126
    ec7c:	9c e0       	ldi	r25, 0x0C	; 12
    ec7e:	1f 92       	push	r1
    ec80:	9f 93       	push	r25
    ec82:	8f 93       	push	r24
    ec84:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    ec88:	0f 90       	pop	r0
    ec8a:	0f 90       	pop	r0
    ec8c:	0f 90       	pop	r0
    ec8e:	13 c0       	rjmp	.+38     	; 0xecb6 <fgetc+0x98>
    ec90:	09 95       	icall
    ec92:	97 ff       	sbrs	r25, 7
    ec94:	09 c0       	rjmp	.+18     	; 0xeca8 <fgetc+0x8a>
    ec96:	2b 81       	ldd	r18, Y+3	; 0x03
    ec98:	02 96       	adiw	r24, 0x02	; 2
    ec9a:	11 f0       	breq	.+4      	; 0xeca0 <fgetc+0x82>
    ec9c:	80 e2       	ldi	r24, 0x20	; 32
    ec9e:	01 c0       	rjmp	.+2      	; 0xeca2 <fgetc+0x84>
    eca0:	80 e1       	ldi	r24, 0x10	; 16
    eca2:	82 2b       	or	r24, r18
    eca4:	8b 83       	std	Y+3, r24	; 0x03
    eca6:	07 c0       	rjmp	.+14     	; 0xecb6 <fgetc+0x98>
    eca8:	2e 81       	ldd	r18, Y+6	; 0x06
    ecaa:	3f 81       	ldd	r19, Y+7	; 0x07
    ecac:	2f 5f       	subi	r18, 0xFF	; 255
    ecae:	3f 4f       	sbci	r19, 0xFF	; 255
    ecb0:	3f 83       	std	Y+7, r19	; 0x07
    ecb2:	2e 83       	std	Y+6, r18	; 0x06
    ecb4:	02 c0       	rjmp	.+4      	; 0xecba <fgetc+0x9c>
    ecb6:	8f ef       	ldi	r24, 0xFF	; 255
    ecb8:	9f ef       	ldi	r25, 0xFF	; 255
    ecba:	df 91       	pop	r29
    ecbc:	cf 91       	pop	r28
    ecbe:	08 95       	ret

0000ecc0 <fputc>:
    ecc0:	cf 93       	push	r28
    ecc2:	df 93       	push	r29
    ecc4:	eb 01       	movw	r28, r22
    ecc6:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    ecca:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    ecce:	20 91 b9 1b 	lds	r18, 0x1BB9	; 0x801bb9 <__iob+0x2>
    ecd2:	30 91 ba 1b 	lds	r19, 0x1BBA	; 0x801bba <__iob+0x3>
    ecd6:	62 17       	cp	r22, r18
    ecd8:	73 07       	cpc	r23, r19
    ecda:	49 f0       	breq	.+18     	; 0xecee <fputc+0x2e>
    ecdc:	20 91 bb 1b 	lds	r18, 0x1BBB	; 0x801bbb <__iob+0x4>
    ece0:	30 91 bc 1b 	lds	r19, 0x1BBC	; 0x801bbc <__iob+0x5>
    ece4:	62 17       	cp	r22, r18
    ece6:	73 07       	cpc	r23, r19
    ece8:	11 f0       	breq	.+4      	; 0xecee <fputc+0x2e>
    ecea:	4e df       	rcall	.-356    	; 0xeb88 <fatfs_putc>
    ecec:	33 c0       	rjmp	.+102    	; 0xed54 <fputc+0x94>
    ecee:	2b 81       	ldd	r18, Y+3	; 0x03
    ecf0:	21 ff       	sbrs	r18, 1
    ecf2:	2e c0       	rjmp	.+92     	; 0xed50 <fputc+0x90>
    ecf4:	22 ff       	sbrs	r18, 2
    ecf6:	10 c0       	rjmp	.+32     	; 0xed18 <fputc+0x58>
    ecf8:	4e 81       	ldd	r20, Y+6	; 0x06
    ecfa:	5f 81       	ldd	r21, Y+7	; 0x07
    ecfc:	2c 81       	ldd	r18, Y+4	; 0x04
    ecfe:	3d 81       	ldd	r19, Y+5	; 0x05
    ed00:	42 17       	cp	r20, r18
    ed02:	53 07       	cpc	r21, r19
    ed04:	f4 f4       	brge	.+60     	; 0xed42 <fputc+0x82>
    ed06:	e8 81       	ld	r30, Y
    ed08:	f9 81       	ldd	r31, Y+1	; 0x01
    ed0a:	9f 01       	movw	r18, r30
    ed0c:	2f 5f       	subi	r18, 0xFF	; 255
    ed0e:	3f 4f       	sbci	r19, 0xFF	; 255
    ed10:	39 83       	std	Y+1, r19	; 0x01
    ed12:	28 83       	st	Y, r18
    ed14:	80 83       	st	Z, r24
    ed16:	15 c0       	rjmp	.+42     	; 0xed42 <fputc+0x82>
    ed18:	e8 85       	ldd	r30, Y+8	; 0x08
    ed1a:	f9 85       	ldd	r31, Y+9	; 0x09
    ed1c:	30 97       	sbiw	r30, 0x00	; 0
    ed1e:	59 f4       	brne	.+22     	; 0xed36 <fputc+0x76>
    ed20:	86 e6       	ldi	r24, 0x66	; 102
    ed22:	9c e0       	ldi	r25, 0x0C	; 12
    ed24:	1f 92       	push	r1
    ed26:	9f 93       	push	r25
    ed28:	8f 93       	push	r24
    ed2a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    ed2e:	0f 90       	pop	r0
    ed30:	0f 90       	pop	r0
    ed32:	0f 90       	pop	r0
    ed34:	0d c0       	rjmp	.+26     	; 0xed50 <fputc+0x90>
    ed36:	be 01       	movw	r22, r28
    ed38:	09 95       	icall
    ed3a:	8f 3f       	cpi	r24, 0xFF	; 255
    ed3c:	2f ef       	ldi	r18, 0xFF	; 255
    ed3e:	92 07       	cpc	r25, r18
    ed40:	39 f0       	breq	.+14     	; 0xed50 <fputc+0x90>
    ed42:	2e 81       	ldd	r18, Y+6	; 0x06
    ed44:	3f 81       	ldd	r19, Y+7	; 0x07
    ed46:	2f 5f       	subi	r18, 0xFF	; 255
    ed48:	3f 4f       	sbci	r19, 0xFF	; 255
    ed4a:	3f 83       	std	Y+7, r19	; 0x07
    ed4c:	2e 83       	std	Y+6, r18	; 0x06
    ed4e:	02 c0       	rjmp	.+4      	; 0xed54 <fputc+0x94>
    ed50:	8f ef       	ldi	r24, 0xFF	; 255
    ed52:	9f ef       	ldi	r25, 0xFF	; 255
    ed54:	df 91       	pop	r29
    ed56:	cf 91       	pop	r28
    ed58:	08 95       	ret

0000ed5a <_fprintf_putc>:
    ed5a:	fc 01       	movw	r30, r24
    ed5c:	86 2f       	mov	r24, r22
    ed5e:	26 81       	ldd	r18, Z+6	; 0x06
    ed60:	37 81       	ldd	r19, Z+7	; 0x07
    ed62:	2f 5f       	subi	r18, 0xFF	; 255
    ed64:	3f 4f       	sbci	r19, 0xFF	; 255
    ed66:	37 83       	std	Z+7, r19	; 0x07
    ed68:	26 83       	std	Z+6, r18	; 0x06
    ed6a:	62 81       	ldd	r22, Z+2	; 0x02
    ed6c:	73 81       	ldd	r23, Z+3	; 0x03
    ed6e:	90 e0       	ldi	r25, 0x00	; 0
    ed70:	a7 cf       	rjmp	.-178    	; 0xecc0 <fputc>
    ed72:	08 95       	ret

0000ed74 <getchar>:
    ed74:	80 91 b7 1b 	lds	r24, 0x1BB7	; 0x801bb7 <__iob>
    ed78:	90 91 b8 1b 	lds	r25, 0x1BB8	; 0x801bb8 <__iob+0x1>
    ed7c:	50 cf       	rjmp	.-352    	; 0xec1e <fgetc>
    ed7e:	08 95       	ret

0000ed80 <putchar>:
    ed80:	60 91 b9 1b 	lds	r22, 0x1BB9	; 0x801bb9 <__iob+0x2>
    ed84:	70 91 ba 1b 	lds	r23, 0x1BBA	; 0x801bba <__iob+0x3>
    ed88:	9b cf       	rjmp	.-202    	; 0xecc0 <fputc>
    ed8a:	08 95       	ret

0000ed8c <fgets>:
    ed8c:	a0 e0       	ldi	r26, 0x00	; 0
    ed8e:	b0 e0       	ldi	r27, 0x00	; 0
    ed90:	ec ec       	ldi	r30, 0xCC	; 204
    ed92:	f6 e7       	ldi	r31, 0x76	; 118
    ed94:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
    ed98:	7c 01       	movw	r14, r24
    ed9a:	6a 01       	movw	r12, r20
    ed9c:	8b 01       	movw	r16, r22
    ed9e:	c0 e0       	ldi	r28, 0x00	; 0
    eda0:	d0 e0       	ldi	r29, 0x00	; 0
    eda2:	01 15       	cp	r16, r1
    eda4:	11 05       	cpc	r17, r1
    eda6:	41 f0       	breq	.+16     	; 0xedb8 <fgets+0x2c>
    eda8:	c6 01       	movw	r24, r12
    edaa:	39 df       	rcall	.-398    	; 0xec1e <fgetc>
    edac:	8f 3f       	cpi	r24, 0xFF	; 255
    edae:	2f ef       	ldi	r18, 0xFF	; 255
    edb0:	92 07       	cpc	r25, r18
    edb2:	39 f4       	brne	.+14     	; 0xedc2 <fgets+0x36>
    edb4:	20 97       	sbiw	r28, 0x00	; 0
    edb6:	b9 f0       	breq	.+46     	; 0xede6 <fgets+0x5a>
    edb8:	ce 0d       	add	r28, r14
    edba:	df 1d       	adc	r29, r15
    edbc:	18 82       	st	Y, r1
    edbe:	c7 01       	movw	r24, r14
    edc0:	14 c0       	rjmp	.+40     	; 0xedea <fgets+0x5e>
    edc2:	8a 30       	cpi	r24, 0x0A	; 10
    edc4:	91 05       	cpc	r25, r1
    edc6:	c1 f3       	breq	.-16     	; 0xedb8 <fgets+0x2c>
    edc8:	88 30       	cpi	r24, 0x08	; 8
    edca:	91 05       	cpc	r25, r1
    edcc:	21 f4       	brne	.+8      	; 0xedd6 <fgets+0x4a>
    edce:	20 97       	sbiw	r28, 0x00	; 0
    edd0:	39 f0       	breq	.+14     	; 0xede0 <fgets+0x54>
    edd2:	21 97       	sbiw	r28, 0x01	; 1
    edd4:	05 c0       	rjmp	.+10     	; 0xede0 <fgets+0x54>
    edd6:	f7 01       	movw	r30, r14
    edd8:	ec 0f       	add	r30, r28
    edda:	fd 1f       	adc	r31, r29
    eddc:	80 83       	st	Z, r24
    edde:	21 96       	adiw	r28, 0x01	; 1
    ede0:	01 50       	subi	r16, 0x01	; 1
    ede2:	11 09       	sbc	r17, r1
    ede4:	de cf       	rjmp	.-68     	; 0xeda2 <fgets+0x16>
    ede6:	80 e0       	ldi	r24, 0x00	; 0
    ede8:	90 e0       	ldi	r25, 0x00	; 0
    edea:	cd b7       	in	r28, 0x3d	; 61
    edec:	de b7       	in	r29, 0x3e	; 62
    edee:	e8 e0       	ldi	r30, 0x08	; 8
    edf0:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

0000edf4 <fputs>:
    edf4:	0f 93       	push	r16
    edf6:	1f 93       	push	r17
    edf8:	cf 93       	push	r28
    edfa:	df 93       	push	r29
    edfc:	8b 01       	movw	r16, r22
    edfe:	ec 01       	movw	r28, r24
    ee00:	89 91       	ld	r24, Y+
    ee02:	88 23       	and	r24, r24
    ee04:	41 f0       	breq	.+16     	; 0xee16 <fputs+0x22>
    ee06:	b8 01       	movw	r22, r16
    ee08:	90 e0       	ldi	r25, 0x00	; 0
    ee0a:	5a df       	rcall	.-332    	; 0xecc0 <fputc>
    ee0c:	8f 3f       	cpi	r24, 0xFF	; 255
    ee0e:	2f ef       	ldi	r18, 0xFF	; 255
    ee10:	92 07       	cpc	r25, r18
    ee12:	b1 f7       	brne	.-20     	; 0xee00 <fputs+0xc>
    ee14:	02 c0       	rjmp	.+4      	; 0xee1a <fputs+0x26>
    ee16:	80 e0       	ldi	r24, 0x00	; 0
    ee18:	90 e0       	ldi	r25, 0x00	; 0
    ee1a:	df 91       	pop	r29
    ee1c:	cf 91       	pop	r28
    ee1e:	1f 91       	pop	r17
    ee20:	0f 91       	pop	r16
    ee22:	08 95       	ret

0000ee24 <puts>:
    ee24:	cf 93       	push	r28
    ee26:	df 93       	push	r29
    ee28:	ec 01       	movw	r28, r24
    ee2a:	89 91       	ld	r24, Y+
    ee2c:	60 91 b9 1b 	lds	r22, 0x1BB9	; 0x801bb9 <__iob+0x2>
    ee30:	70 91 ba 1b 	lds	r23, 0x1BBA	; 0x801bba <__iob+0x3>
    ee34:	88 23       	and	r24, r24
    ee36:	39 f0       	breq	.+14     	; 0xee46 <puts+0x22>
    ee38:	90 e0       	ldi	r25, 0x00	; 0
    ee3a:	42 df       	rcall	.-380    	; 0xecc0 <fputc>
    ee3c:	8f 3f       	cpi	r24, 0xFF	; 255
    ee3e:	2f ef       	ldi	r18, 0xFF	; 255
    ee40:	92 07       	cpc	r25, r18
    ee42:	99 f7       	brne	.-26     	; 0xee2a <puts+0x6>
    ee44:	03 c0       	rjmp	.+6      	; 0xee4c <puts+0x28>
    ee46:	8a e0       	ldi	r24, 0x0A	; 10
    ee48:	90 e0       	ldi	r25, 0x00	; 0
    ee4a:	3a df       	rcall	.-396    	; 0xecc0 <fputc>
    ee4c:	df 91       	pop	r29
    ee4e:	cf 91       	pop	r28
    ee50:	08 95       	ret

0000ee52 <fileno>:
    ee52:	00 97       	sbiw	r24, 0x00	; 0
    ee54:	39 f4       	brne	.+14     	; 0xee64 <fileno+0x12>
    ee56:	89 e0       	ldi	r24, 0x09	; 9
    ee58:	90 e0       	ldi	r25, 0x00	; 0
    ee5a:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    ee5e:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    ee62:	0e c0       	rjmp	.+28     	; 0xee80 <fileno+0x2e>
    ee64:	e7 eb       	ldi	r30, 0xB7	; 183
    ee66:	fb e1       	ldi	r31, 0x1B	; 27
    ee68:	20 e0       	ldi	r18, 0x00	; 0
    ee6a:	30 e0       	ldi	r19, 0x00	; 0
    ee6c:	41 91       	ld	r20, Z+
    ee6e:	51 91       	ld	r21, Z+
    ee70:	84 17       	cp	r24, r20
    ee72:	95 07       	cpc	r25, r21
    ee74:	41 f0       	breq	.+16     	; 0xee86 <fileno+0x34>
    ee76:	2f 5f       	subi	r18, 0xFF	; 255
    ee78:	3f 4f       	sbci	r19, 0xFF	; 255
    ee7a:	20 31       	cpi	r18, 0x10	; 16
    ee7c:	31 05       	cpc	r19, r1
    ee7e:	b1 f7       	brne	.-20     	; 0xee6c <fileno+0x1a>
    ee80:	8f ef       	ldi	r24, 0xFF	; 255
    ee82:	9f ef       	ldi	r25, 0xFF	; 255
    ee84:	08 95       	ret
    ee86:	c9 01       	movw	r24, r18
    ee88:	08 95       	ret

0000ee8a <fileno_to_stream>:
    ee8a:	80 31       	cpi	r24, 0x10	; 16
    ee8c:	91 05       	cpc	r25, r1
    ee8e:	48 f4       	brcc	.+18     	; 0xeea2 <fileno_to_stream+0x18>
    ee90:	88 0f       	add	r24, r24
    ee92:	99 1f       	adc	r25, r25
    ee94:	fc 01       	movw	r30, r24
    ee96:	e9 54       	subi	r30, 0x49	; 73
    ee98:	f4 4e       	sbci	r31, 0xE4	; 228
    ee9a:	80 81       	ld	r24, Z
    ee9c:	91 81       	ldd	r25, Z+1	; 0x01
    ee9e:	00 97       	sbiw	r24, 0x00	; 0
    eea0:	41 f4       	brne	.+16     	; 0xeeb2 <fileno_to_stream+0x28>
    eea2:	89 e0       	ldi	r24, 0x09	; 9
    eea4:	90 e0       	ldi	r25, 0x00	; 0
    eea6:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    eeaa:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    eeae:	80 e0       	ldi	r24, 0x00	; 0
    eeb0:	90 e0       	ldi	r25, 0x00	; 0
    eeb2:	08 95       	ret

0000eeb4 <mctime>:
    eeb4:	a4 e0       	ldi	r26, 0x04	; 4
    eeb6:	b0 e0       	ldi	r27, 0x00	; 0
    eeb8:	e0 e6       	ldi	r30, 0x60	; 96
    eeba:	f7 e7       	ldi	r31, 0x77	; 119
    eebc:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    eec0:	69 83       	std	Y+1, r22	; 0x01
    eec2:	7a 83       	std	Y+2, r23	; 0x02
    eec4:	8b 83       	std	Y+3, r24	; 0x03
    eec6:	9c 83       	std	Y+4, r25	; 0x04
    eec8:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    eecc:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    eed0:	ce 01       	movw	r24, r28
    eed2:	01 96       	adiw	r24, 0x01	; 1
    eed4:	0e 94 7d 3d 	call	0x7afa	; 0x7afa <ctime_gm>
    eed8:	fc 01       	movw	r30, r24
    eeda:	01 90       	ld	r0, Z+
    eedc:	00 20       	and	r0, r0
    eede:	e9 f7       	brne	.-6      	; 0xeeda <mctime+0x26>
    eee0:	31 97       	sbiw	r30, 0x01	; 1
    eee2:	e8 1b       	sub	r30, r24
    eee4:	f9 0b       	sbc	r31, r25
    eee6:	39 f0       	breq	.+14     	; 0xeef6 <mctime+0x42>
    eee8:	31 97       	sbiw	r30, 0x01	; 1
    eeea:	e8 0f       	add	r30, r24
    eeec:	f9 1f       	adc	r31, r25
    eeee:	20 81       	ld	r18, Z
    eef0:	2a 30       	cpi	r18, 0x0A	; 10
    eef2:	09 f4       	brne	.+2      	; 0xeef6 <mctime+0x42>
    eef4:	10 82       	st	Z, r1
    eef6:	24 96       	adiw	r28, 0x04	; 4
    eef8:	e2 e0       	ldi	r30, 0x02	; 2
    eefa:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

0000eefe <basename>:
    eefe:	00 97       	sbiw	r24, 0x00	; 0
    ef00:	49 f0       	breq	.+18     	; 0xef14 <basename+0x16>
    ef02:	fc 01       	movw	r30, r24
    ef04:	21 91       	ld	r18, Z+
    ef06:	22 23       	and	r18, r18
    ef08:	21 f0       	breq	.+8      	; 0xef12 <basename+0x14>
    ef0a:	2f 32       	cpi	r18, 0x2F	; 47
    ef0c:	d9 f7       	brne	.-10     	; 0xef04 <basename+0x6>
    ef0e:	cf 01       	movw	r24, r30
    ef10:	f9 cf       	rjmp	.-14     	; 0xef04 <basename+0x6>
    ef12:	08 95       	ret
    ef14:	87 e1       	ldi	r24, 0x17	; 23
    ef16:	97 e1       	ldi	r25, 0x17	; 23
    ef18:	08 95       	ret

0000ef1a <chdir>:
    ef1a:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    ef1e:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    ef22:	0e 94 d8 5f 	call	0xbfb0	; 0xbfb0 <f_chdir>
    ef26:	00 97       	sbiw	r24, 0x00	; 0
    ef28:	a1 f0       	breq	.+40     	; 0xef52 <chdir+0x38>
    ef2a:	84 31       	cpi	r24, 0x14	; 20
    ef2c:	91 05       	cpc	r25, r1
    ef2e:	40 f4       	brcc	.+16     	; 0xef40 <chdir+0x26>
    ef30:	fc 01       	movw	r30, r24
    ef32:	e0 5f       	subi	r30, 0xF0	; 240
    ef34:	f8 4f       	sbci	r31, 0xF8	; 248
    ef36:	80 81       	ld	r24, Z
    ef38:	08 2e       	mov	r0, r24
    ef3a:	00 0c       	add	r0, r0
    ef3c:	99 0b       	sbc	r25, r25
    ef3e:	02 c0       	rjmp	.+4      	; 0xef44 <chdir+0x2a>
    ef40:	83 e2       	ldi	r24, 0x23	; 35
    ef42:	90 e0       	ldi	r25, 0x00	; 0
    ef44:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    ef48:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    ef4c:	8f ef       	ldi	r24, 0xFF	; 255
    ef4e:	9f ef       	ldi	r25, 0xFF	; 255
    ef50:	08 95       	ret
    ef52:	80 e0       	ldi	r24, 0x00	; 0
    ef54:	90 e0       	ldi	r25, 0x00	; 0
    ef56:	08 95       	ret

0000ef58 <chmod>:
    ef58:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    ef5c:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    ef60:	42 79       	andi	r20, 0x92	; 146
    ef62:	55 27       	eor	r21, r21
    ef64:	66 27       	eor	r22, r22
    ef66:	77 27       	eor	r23, r23
    ef68:	45 2b       	or	r20, r21
    ef6a:	46 2b       	or	r20, r22
    ef6c:	47 2b       	or	r20, r23
    ef6e:	19 f0       	breq	.+6      	; 0xef76 <chmod+0x1e>
    ef70:	80 e0       	ldi	r24, 0x00	; 0
    ef72:	90 e0       	ldi	r25, 0x00	; 0
    ef74:	08 95       	ret
    ef76:	41 e0       	ldi	r20, 0x01	; 1
    ef78:	61 e0       	ldi	r22, 0x01	; 1
    ef7a:	0e 94 d7 68 	call	0xd1ae	; 0xd1ae <f_chmod>
    ef7e:	00 97       	sbiw	r24, 0x00	; 0
    ef80:	b9 f3       	breq	.-18     	; 0xef70 <chmod+0x18>
    ef82:	84 31       	cpi	r24, 0x14	; 20
    ef84:	91 05       	cpc	r25, r1
    ef86:	40 f4       	brcc	.+16     	; 0xef98 <chmod+0x40>
    ef88:	fc 01       	movw	r30, r24
    ef8a:	e0 5f       	subi	r30, 0xF0	; 240
    ef8c:	f8 4f       	sbci	r31, 0xF8	; 248
    ef8e:	80 81       	ld	r24, Z
    ef90:	08 2e       	mov	r0, r24
    ef92:	00 0c       	add	r0, r0
    ef94:	99 0b       	sbc	r25, r25
    ef96:	02 c0       	rjmp	.+4      	; 0xef9c <chmod+0x44>
    ef98:	83 e2       	ldi	r24, 0x23	; 35
    ef9a:	90 e0       	ldi	r25, 0x00	; 0
    ef9c:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    efa0:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    efa4:	8f ef       	ldi	r24, 0xFF	; 255
    efa6:	9f ef       	ldi	r25, 0xFF	; 255
    efa8:	08 95       	ret

0000efaa <getcwd>:
    efaa:	cf 93       	push	r28
    efac:	df 93       	push	r29
    efae:	d8 2f       	mov	r29, r24
    efb0:	c9 2f       	mov	r28, r25
    efb2:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    efb6:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    efba:	0e 94 33 60 	call	0xc066	; 0xc066 <f_getcwd>
    efbe:	00 97       	sbiw	r24, 0x00	; 0
    efc0:	a1 f0       	breq	.+40     	; 0xefea <getcwd+0x40>
    efc2:	84 31       	cpi	r24, 0x14	; 20
    efc4:	91 05       	cpc	r25, r1
    efc6:	40 f4       	brcc	.+16     	; 0xefd8 <getcwd+0x2e>
    efc8:	fc 01       	movw	r30, r24
    efca:	e0 5f       	subi	r30, 0xF0	; 240
    efcc:	f8 4f       	sbci	r31, 0xF8	; 248
    efce:	80 81       	ld	r24, Z
    efd0:	08 2e       	mov	r0, r24
    efd2:	00 0c       	add	r0, r0
    efd4:	99 0b       	sbc	r25, r25
    efd6:	02 c0       	rjmp	.+4      	; 0xefdc <getcwd+0x32>
    efd8:	83 e2       	ldi	r24, 0x23	; 35
    efda:	90 e0       	ldi	r25, 0x00	; 0
    efdc:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    efe0:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    efe4:	80 e0       	ldi	r24, 0x00	; 0
    efe6:	90 e0       	ldi	r25, 0x00	; 0
    efe8:	02 c0       	rjmp	.+4      	; 0xefee <getcwd+0x44>
    efea:	8d 2f       	mov	r24, r29
    efec:	9c 2f       	mov	r25, r28
    efee:	df 91       	pop	r29
    eff0:	cf 91       	pop	r28
    eff2:	08 95       	ret

0000eff4 <mkdir>:
    eff4:	cf 93       	push	r28
    eff6:	df 93       	push	r29
    eff8:	ec 01       	movw	r28, r24
    effa:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    effe:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    f002:	41 15       	cp	r20, r1
    f004:	51 05       	cpc	r21, r1
    f006:	61 05       	cpc	r22, r1
    f008:	71 05       	cpc	r23, r1
    f00a:	41 f4       	brne	.+16     	; 0xf01c <mkdir+0x28>
    f00c:	ce 01       	movw	r24, r28
    f00e:	0e 94 d2 66 	call	0xcda4	; 0xcda4 <f_mkdir>
    f012:	00 97       	sbiw	r24, 0x00	; 0
    f014:	39 f4       	brne	.+14     	; 0xf024 <mkdir+0x30>
    f016:	80 e0       	ldi	r24, 0x00	; 0
    f018:	90 e0       	ldi	r25, 0x00	; 0
    f01a:	17 c0       	rjmp	.+46     	; 0xf04a <mkdir+0x56>
    f01c:	9d df       	rcall	.-198    	; 0xef58 <chmod>
    f01e:	89 2b       	or	r24, r25
    f020:	a9 f3       	breq	.-22     	; 0xf00c <mkdir+0x18>
    f022:	11 c0       	rjmp	.+34     	; 0xf046 <mkdir+0x52>
    f024:	84 31       	cpi	r24, 0x14	; 20
    f026:	91 05       	cpc	r25, r1
    f028:	40 f4       	brcc	.+16     	; 0xf03a <mkdir+0x46>
    f02a:	fc 01       	movw	r30, r24
    f02c:	e0 5f       	subi	r30, 0xF0	; 240
    f02e:	f8 4f       	sbci	r31, 0xF8	; 248
    f030:	80 81       	ld	r24, Z
    f032:	08 2e       	mov	r0, r24
    f034:	00 0c       	add	r0, r0
    f036:	99 0b       	sbc	r25, r25
    f038:	02 c0       	rjmp	.+4      	; 0xf03e <mkdir+0x4a>
    f03a:	83 e2       	ldi	r24, 0x23	; 35
    f03c:	90 e0       	ldi	r25, 0x00	; 0
    f03e:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f042:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f046:	8f ef       	ldi	r24, 0xFF	; 255
    f048:	9f ef       	ldi	r25, 0xFF	; 255
    f04a:	df 91       	pop	r29
    f04c:	cf 91       	pop	r28
    f04e:	08 95       	ret

0000f050 <rename>:
    f050:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f054:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    f058:	0e 94 c2 67 	call	0xcf84	; 0xcf84 <f_rename>
    f05c:	00 97       	sbiw	r24, 0x00	; 0
    f05e:	a1 f0       	breq	.+40     	; 0xf088 <rename+0x38>
    f060:	84 31       	cpi	r24, 0x14	; 20
    f062:	91 05       	cpc	r25, r1
    f064:	40 f4       	brcc	.+16     	; 0xf076 <rename+0x26>
    f066:	fc 01       	movw	r30, r24
    f068:	e0 5f       	subi	r30, 0xF0	; 240
    f06a:	f8 4f       	sbci	r31, 0xF8	; 248
    f06c:	80 81       	ld	r24, Z
    f06e:	08 2e       	mov	r0, r24
    f070:	00 0c       	add	r0, r0
    f072:	99 0b       	sbc	r25, r25
    f074:	02 c0       	rjmp	.+4      	; 0xf07a <rename+0x2a>
    f076:	83 e2       	ldi	r24, 0x23	; 35
    f078:	90 e0       	ldi	r25, 0x00	; 0
    f07a:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f07e:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f082:	8f ef       	ldi	r24, 0xFF	; 255
    f084:	9f ef       	ldi	r25, 0xFF	; 255
    f086:	08 95       	ret
    f088:	80 e0       	ldi	r24, 0x00	; 0
    f08a:	90 e0       	ldi	r25, 0x00	; 0
    f08c:	08 95       	ret

0000f08e <unlink>:
    f08e:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f092:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    f096:	0e 94 2b 66 	call	0xcc56	; 0xcc56 <f_unlink>
    f09a:	00 97       	sbiw	r24, 0x00	; 0
    f09c:	a1 f0       	breq	.+40     	; 0xf0c6 <unlink+0x38>
    f09e:	84 31       	cpi	r24, 0x14	; 20
    f0a0:	91 05       	cpc	r25, r1
    f0a2:	40 f4       	brcc	.+16     	; 0xf0b4 <unlink+0x26>
    f0a4:	fc 01       	movw	r30, r24
    f0a6:	e0 5f       	subi	r30, 0xF0	; 240
    f0a8:	f8 4f       	sbci	r31, 0xF8	; 248
    f0aa:	80 81       	ld	r24, Z
    f0ac:	08 2e       	mov	r0, r24
    f0ae:	00 0c       	add	r0, r0
    f0b0:	99 0b       	sbc	r25, r25
    f0b2:	02 c0       	rjmp	.+4      	; 0xf0b8 <unlink+0x2a>
    f0b4:	83 e2       	ldi	r24, 0x23	; 35
    f0b6:	90 e0       	ldi	r25, 0x00	; 0
    f0b8:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f0bc:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f0c0:	8f ef       	ldi	r24, 0xFF	; 255
    f0c2:	9f ef       	ldi	r25, 0xFF	; 255
    f0c4:	08 95       	ret
    f0c6:	80 e0       	ldi	r24, 0x00	; 0
    f0c8:	90 e0       	ldi	r25, 0x00	; 0
    f0ca:	08 95       	ret

0000f0cc <rmdir>:
    f0cc:	e0 cf       	rjmp	.-64     	; 0xf08e <unlink>
    f0ce:	08 95       	ret

0000f0d0 <closedir>:
    f0d0:	0e 94 b5 64 	call	0xc96a	; 0xc96a <f_closedir>
    f0d4:	00 97       	sbiw	r24, 0x00	; 0
    f0d6:	a1 f0       	breq	.+40     	; 0xf100 <closedir+0x30>
    f0d8:	84 31       	cpi	r24, 0x14	; 20
    f0da:	91 05       	cpc	r25, r1
    f0dc:	40 f4       	brcc	.+16     	; 0xf0ee <closedir+0x1e>
    f0de:	fc 01       	movw	r30, r24
    f0e0:	e0 5f       	subi	r30, 0xF0	; 240
    f0e2:	f8 4f       	sbci	r31, 0xF8	; 248
    f0e4:	80 81       	ld	r24, Z
    f0e6:	08 2e       	mov	r0, r24
    f0e8:	00 0c       	add	r0, r0
    f0ea:	99 0b       	sbc	r25, r25
    f0ec:	02 c0       	rjmp	.+4      	; 0xf0f2 <closedir+0x22>
    f0ee:	83 e2       	ldi	r24, 0x23	; 35
    f0f0:	90 e0       	ldi	r25, 0x00	; 0
    f0f2:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f0f6:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f0fa:	8f ef       	ldi	r24, 0xFF	; 255
    f0fc:	9f ef       	ldi	r25, 0xFF	; 255
    f0fe:	08 95       	ret
    f100:	80 e0       	ldi	r24, 0x00	; 0
    f102:	90 e0       	ldi	r25, 0x00	; 0
    f104:	08 95       	ret

0000f106 <opendir>:
    f106:	bc 01       	movw	r22, r24
    f108:	8d e2       	ldi	r24, 0x2D	; 45
    f10a:	98 e1       	ldi	r25, 0x18	; 24
    f10c:	0e 94 44 64 	call	0xc888	; 0xc888 <f_opendir>
    f110:	00 97       	sbiw	r24, 0x00	; 0
    f112:	a1 f0       	breq	.+40     	; 0xf13c <opendir+0x36>
    f114:	84 31       	cpi	r24, 0x14	; 20
    f116:	91 05       	cpc	r25, r1
    f118:	40 f4       	brcc	.+16     	; 0xf12a <opendir+0x24>
    f11a:	fc 01       	movw	r30, r24
    f11c:	e0 5f       	subi	r30, 0xF0	; 240
    f11e:	f8 4f       	sbci	r31, 0xF8	; 248
    f120:	80 81       	ld	r24, Z
    f122:	08 2e       	mov	r0, r24
    f124:	00 0c       	add	r0, r0
    f126:	99 0b       	sbc	r25, r25
    f128:	02 c0       	rjmp	.+4      	; 0xf12e <opendir+0x28>
    f12a:	83 e2       	ldi	r24, 0x23	; 35
    f12c:	90 e0       	ldi	r25, 0x00	; 0
    f12e:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f132:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f136:	80 e0       	ldi	r24, 0x00	; 0
    f138:	90 e0       	ldi	r25, 0x00	; 0
    f13a:	08 95       	ret
    f13c:	8d e2       	ldi	r24, 0x2D	; 45
    f13e:	98 e1       	ldi	r25, 0x18	; 24
    f140:	08 95       	ret

0000f142 <readdir>:
    f142:	a6 e1       	ldi	r26, 0x16	; 22
    f144:	b1 e0       	ldi	r27, 0x01	; 1
    f146:	e7 ea       	ldi	r30, 0xA7	; 167
    f148:	f8 e7       	ldi	r31, 0x78	; 120
    f14a:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__prologue_saves__+0x1c>
    f14e:	10 92 20 18 	sts	0x1820, r1	; 0x801820 <_de>
    f152:	be 01       	movw	r22, r28
    f154:	6f 5f       	subi	r22, 0xFF	; 255
    f156:	7f 4f       	sbci	r23, 0xFF	; 255
    f158:	0e 94 ca 64 	call	0xc994	; 0xc994 <f_readdir>
    f15c:	00 97       	sbiw	r24, 0x00	; 0
    f15e:	a1 f0       	breq	.+40     	; 0xf188 <readdir+0x46>
    f160:	84 31       	cpi	r24, 0x14	; 20
    f162:	91 05       	cpc	r25, r1
    f164:	40 f4       	brcc	.+16     	; 0xf176 <readdir+0x34>
    f166:	fc 01       	movw	r30, r24
    f168:	e0 5f       	subi	r30, 0xF0	; 240
    f16a:	f8 4f       	sbci	r31, 0xF8	; 248
    f16c:	80 81       	ld	r24, Z
    f16e:	08 2e       	mov	r0, r24
    f170:	00 0c       	add	r0, r0
    f172:	99 0b       	sbc	r25, r25
    f174:	02 c0       	rjmp	.+4      	; 0xf17a <readdir+0x38>
    f176:	83 e2       	ldi	r24, 0x23	; 35
    f178:	90 e0       	ldi	r25, 0x00	; 0
    f17a:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f17e:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f182:	80 e0       	ldi	r24, 0x00	; 0
    f184:	90 e0       	ldi	r25, 0x00	; 0
    f186:	16 c0       	rjmp	.+44     	; 0xf1b4 <readdir+0x72>
    f188:	be 01       	movw	r22, r28
    f18a:	69 5e       	subi	r22, 0xE9	; 233
    f18c:	7f 4f       	sbci	r23, 0xFF	; 255
    f18e:	fb 01       	movw	r30, r22
    f190:	01 90       	ld	r0, Z+
    f192:	00 20       	and	r0, r0
    f194:	e9 f7       	brne	.-6      	; 0xf190 <readdir+0x4e>
    f196:	31 97       	sbiw	r30, 0x01	; 1
    f198:	8f 01       	movw	r16, r30
    f19a:	06 1b       	sub	r16, r22
    f19c:	17 0b       	sbc	r17, r23
    f19e:	a8 01       	movw	r20, r16
    f1a0:	80 e2       	ldi	r24, 0x20	; 32
    f1a2:	98 e1       	ldi	r25, 0x18	; 24
    f1a4:	0e 94 b3 31 	call	0x6366	; 0x6366 <strncpy>
    f1a8:	f8 01       	movw	r30, r16
    f1aa:	e0 5e       	subi	r30, 0xE0	; 224
    f1ac:	f7 4e       	sbci	r31, 0xE7	; 231
    f1ae:	10 82       	st	Z, r1
    f1b0:	80 e2       	ldi	r24, 0x20	; 32
    f1b2:	98 e1       	ldi	r25, 0x18	; 24
    f1b4:	ca 5e       	subi	r28, 0xEA	; 234
    f1b6:	de 4f       	sbci	r29, 0xFE	; 254
    f1b8:	e4 e0       	ldi	r30, 0x04	; 4
    f1ba:	0c 94 5f e5 	jmp	0x1cabe	; 0x1cabe <__epilogue_restores__+0x1c>

0000f1be <perror>:
    f1be:	e0 91 b5 1b 	lds	r30, 0x1BB5	; 0x801bb5 <errno>
    f1c2:	f0 91 b6 1b 	lds	r31, 0x1BB6	; 0x801bb6 <errno+0x1>
    f1c6:	e3 32       	cpi	r30, 0x23	; 35
    f1c8:	f1 05       	cpc	r31, r1
    f1ca:	38 f4       	brcc	.+14     	; 0xf1da <perror+0x1c>
    f1cc:	ee 0f       	add	r30, r30
    f1ce:	ff 1f       	adc	r31, r31
    f1d0:	e3 5c       	subi	r30, 0xC3	; 195
    f1d2:	fe 4f       	sbci	r31, 0xFE	; 254
    f1d4:	20 81       	ld	r18, Z
    f1d6:	31 81       	ldd	r19, Z+1	; 0x01
    f1d8:	04 c0       	rjmp	.+8      	; 0xf1e2 <perror+0x24>
    f1da:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <sys_errlist+0x46>
    f1de:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <sys_errlist+0x47>
    f1e2:	00 97       	sbiw	r24, 0x00	; 0
    f1e4:	c1 f0       	breq	.+48     	; 0xf216 <perror+0x58>
    f1e6:	fc 01       	movw	r30, r24
    f1e8:	40 81       	ld	r20, Z
    f1ea:	44 23       	and	r20, r20
    f1ec:	a1 f0       	breq	.+40     	; 0xf216 <perror+0x58>
    f1ee:	3f 93       	push	r19
    f1f0:	2f 93       	push	r18
    f1f2:	9f 93       	push	r25
    f1f4:	8f 93       	push	r24
    f1f6:	8d ed       	ldi	r24, 0xDD	; 221
    f1f8:	9b e0       	ldi	r25, 0x0B	; 11
    f1fa:	1f 92       	push	r1
    f1fc:	9f 93       	push	r25
    f1fe:	8f 93       	push	r24
    f200:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    f204:	8d b7       	in	r24, 0x3d	; 61
    f206:	9e b7       	in	r25, 0x3e	; 62
    f208:	07 96       	adiw	r24, 0x07	; 7
    f20a:	0f b6       	in	r0, 0x3f	; 63
    f20c:	f8 94       	cli
    f20e:	9e bf       	out	0x3e, r25	; 62
    f210:	0f be       	out	0x3f, r0	; 63
    f212:	8d bf       	out	0x3d, r24	; 61
    f214:	08 95       	ret
    f216:	3f 93       	push	r19
    f218:	2f 93       	push	r18
    f21a:	89 ed       	ldi	r24, 0xD9	; 217
    f21c:	9b e0       	ldi	r25, 0x0B	; 11
    f21e:	1f 92       	push	r1
    f220:	9f 93       	push	r25
    f222:	8f 93       	push	r24
    f224:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    f228:	0f 90       	pop	r0
    f22a:	0f 90       	pop	r0
    f22c:	0f 90       	pop	r0
    f22e:	0f 90       	pop	r0
    f230:	0f 90       	pop	r0
    f232:	08 95       	ret

0000f234 <fdevopen>:
    f234:	0f 93       	push	r16
    f236:	1f 93       	push	r17
    f238:	cf 93       	push	r28
    f23a:	df 93       	push	r29
    f23c:	00 97       	sbiw	r24, 0x00	; 0
    f23e:	31 f4       	brne	.+12     	; 0xf24c <fdevopen+0x18>
    f240:	61 15       	cp	r22, r1
    f242:	71 05       	cpc	r23, r1
    f244:	19 f4       	brne	.+6      	; 0xf24c <fdevopen+0x18>
    f246:	80 e0       	ldi	r24, 0x00	; 0
    f248:	90 e0       	ldi	r25, 0x00	; 0
    f24a:	3a c0       	rjmp	.+116    	; 0xf2c0 <fdevopen+0x8c>
    f24c:	8b 01       	movw	r16, r22
    f24e:	ec 01       	movw	r28, r24
    f250:	6e e0       	ldi	r22, 0x0E	; 14
    f252:	70 e0       	ldi	r23, 0x00	; 0
    f254:	81 e0       	ldi	r24, 0x01	; 1
    f256:	90 e0       	ldi	r25, 0x00	; 0
    f258:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
    f25c:	fc 01       	movw	r30, r24
    f25e:	89 2b       	or	r24, r25
    f260:	91 f3       	breq	.-28     	; 0xf246 <fdevopen+0x12>
    f262:	80 e8       	ldi	r24, 0x80	; 128
    f264:	83 83       	std	Z+3, r24	; 0x03
    f266:	01 15       	cp	r16, r1
    f268:	11 05       	cpc	r17, r1
    f26a:	71 f0       	breq	.+28     	; 0xf288 <fdevopen+0x54>
    f26c:	13 87       	std	Z+11, r17	; 0x0b
    f26e:	02 87       	std	Z+10, r16	; 0x0a
    f270:	81 e8       	ldi	r24, 0x81	; 129
    f272:	83 83       	std	Z+3, r24	; 0x03
    f274:	80 91 b7 1b 	lds	r24, 0x1BB7	; 0x801bb7 <__iob>
    f278:	90 91 b8 1b 	lds	r25, 0x1BB8	; 0x801bb8 <__iob+0x1>
    f27c:	89 2b       	or	r24, r25
    f27e:	21 f4       	brne	.+8      	; 0xf288 <fdevopen+0x54>
    f280:	f0 93 b8 1b 	sts	0x1BB8, r31	; 0x801bb8 <__iob+0x1>
    f284:	e0 93 b7 1b 	sts	0x1BB7, r30	; 0x801bb7 <__iob>
    f288:	20 97       	sbiw	r28, 0x00	; 0
    f28a:	c9 f0       	breq	.+50     	; 0xf2be <fdevopen+0x8a>
    f28c:	d1 87       	std	Z+9, r29	; 0x09
    f28e:	c0 87       	std	Z+8, r28	; 0x08
    f290:	83 81       	ldd	r24, Z+3	; 0x03
    f292:	82 60       	ori	r24, 0x02	; 2
    f294:	83 83       	std	Z+3, r24	; 0x03
    f296:	80 91 b9 1b 	lds	r24, 0x1BB9	; 0x801bb9 <__iob+0x2>
    f29a:	90 91 ba 1b 	lds	r25, 0x1BBA	; 0x801bba <__iob+0x3>
    f29e:	89 2b       	or	r24, r25
    f2a0:	21 f4       	brne	.+8      	; 0xf2aa <fdevopen+0x76>
    f2a2:	f0 93 ba 1b 	sts	0x1BBA, r31	; 0x801bba <__iob+0x3>
    f2a6:	e0 93 b9 1b 	sts	0x1BB9, r30	; 0x801bb9 <__iob+0x2>
    f2aa:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <__iob+0x4>
    f2ae:	90 91 bc 1b 	lds	r25, 0x1BBC	; 0x801bbc <__iob+0x5>
    f2b2:	89 2b       	or	r24, r25
    f2b4:	21 f4       	brne	.+8      	; 0xf2be <fdevopen+0x8a>
    f2b6:	f0 93 bc 1b 	sts	0x1BBC, r31	; 0x801bbc <__iob+0x5>
    f2ba:	e0 93 bb 1b 	sts	0x1BBB, r30	; 0x801bbb <__iob+0x4>
    f2be:	cf 01       	movw	r24, r30
    f2c0:	df 91       	pop	r29
    f2c2:	cf 91       	pop	r28
    f2c4:	1f 91       	pop	r17
    f2c6:	0f 91       	pop	r16
    f2c8:	08 95       	ret

0000f2ca <fat_time_to_unix>:
    f2ca:	a6 e1       	ldi	r26, 0x16	; 22
    f2cc:	b0 e0       	ldi	r27, 0x00	; 0
    f2ce:	eb e6       	ldi	r30, 0x6B	; 107
    f2d0:	f9 e7       	ldi	r31, 0x79	; 121
    f2d2:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    f2d6:	fe 01       	movw	r30, r28
    f2d8:	31 96       	adiw	r30, 0x01	; 1
    f2da:	26 e1       	ldi	r18, 0x16	; 22
    f2dc:	df 01       	movw	r26, r30
    f2de:	1d 92       	st	X+, r1
    f2e0:	2a 95       	dec	r18
    f2e2:	e9 f7       	brne	.-6      	; 0xf2de <fat_time_to_unix+0x14>
    f2e4:	9b 01       	movw	r18, r22
    f2e6:	22 0f       	add	r18, r18
    f2e8:	33 1f       	adc	r19, r19
    f2ea:	2e 73       	andi	r18, 0x3E	; 62
    f2ec:	33 27       	eor	r19, r19
    f2ee:	3a 83       	std	Y+2, r19	; 0x02
    f2f0:	29 83       	std	Y+1, r18	; 0x01
    f2f2:	9b 01       	movw	r18, r22
    f2f4:	55 e0       	ldi	r21, 0x05	; 5
    f2f6:	36 95       	lsr	r19
    f2f8:	27 95       	ror	r18
    f2fa:	5a 95       	dec	r21
    f2fc:	e1 f7       	brne	.-8      	; 0xf2f6 <fat_time_to_unix+0x2c>
    f2fe:	2f 73       	andi	r18, 0x3F	; 63
    f300:	33 27       	eor	r19, r19
    f302:	3c 83       	std	Y+4, r19	; 0x04
    f304:	2b 83       	std	Y+3, r18	; 0x03
    f306:	27 2f       	mov	r18, r23
    f308:	26 95       	lsr	r18
    f30a:	26 95       	lsr	r18
    f30c:	26 95       	lsr	r18
    f30e:	2d 83       	std	Y+5, r18	; 0x05
    f310:	1e 82       	std	Y+6, r1	; 0x06
    f312:	9c 01       	movw	r18, r24
    f314:	2f 71       	andi	r18, 0x1F	; 31
    f316:	33 27       	eor	r19, r19
    f318:	38 87       	std	Y+8, r19	; 0x08
    f31a:	2f 83       	std	Y+7, r18	; 0x07
    f31c:	9c 01       	movw	r18, r24
    f31e:	65 e0       	ldi	r22, 0x05	; 5
    f320:	36 95       	lsr	r19
    f322:	27 95       	ror	r18
    f324:	6a 95       	dec	r22
    f326:	e1 f7       	brne	.-8      	; 0xf320 <fat_time_to_unix+0x56>
    f328:	2f 70       	andi	r18, 0x0F	; 15
    f32a:	33 27       	eor	r19, r19
    f32c:	21 50       	subi	r18, 0x01	; 1
    f32e:	31 09       	sbc	r19, r1
    f330:	3a 87       	std	Y+10, r19	; 0x0a
    f332:	29 87       	std	Y+9, r18	; 0x09
    f334:	9c 01       	movw	r18, r24
    f336:	23 2f       	mov	r18, r19
    f338:	33 27       	eor	r19, r19
    f33a:	26 95       	lsr	r18
    f33c:	20 5b       	subi	r18, 0xB0	; 176
    f33e:	3f 4f       	sbci	r19, 0xFF	; 255
    f340:	3c 87       	std	Y+12, r19	; 0x0c
    f342:	2b 87       	std	Y+11, r18	; 0x0b
    f344:	cf 01       	movw	r24, r30
    f346:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <timegm>
    f34a:	66 96       	adiw	r28, 0x16	; 22
    f34c:	e2 e0       	ldi	r30, 0x02	; 2
    f34e:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

0000f352 <stat>:
    f352:	a6 e1       	ldi	r26, 0x16	; 22
    f354:	b1 e0       	ldi	r27, 0x01	; 1
    f356:	ef ea       	ldi	r30, 0xAF	; 175
    f358:	f9 e7       	ldi	r31, 0x79	; 121
    f35a:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__prologue_saves__+0x18>
    f35e:	7c 01       	movw	r14, r24
    f360:	8b 01       	movw	r16, r22
    f362:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f366:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    f36a:	68 e3       	ldi	r22, 0x38	; 56
    f36c:	78 e0       	ldi	r23, 0x08	; 8
    f36e:	0e 94 1c 32 	call	0x6438	; 0x6438 <strcmp>
    f372:	89 2b       	or	r24, r25
    f374:	39 f0       	breq	.+14     	; 0xf384 <stat+0x32>
    f376:	66 e4       	ldi	r22, 0x46	; 70
    f378:	72 e1       	ldi	r23, 0x12	; 18
    f37a:	c7 01       	movw	r24, r14
    f37c:	0e 94 1c 32 	call	0x6438	; 0x6438 <strcmp>
    f380:	89 2b       	or	r24, r25
    f382:	d1 f4       	brne	.+52     	; 0xf3b8 <stat+0x66>
    f384:	f8 01       	movw	r30, r16
    f386:	14 a2       	std	Z+36, r1	; 0x24
    f388:	15 a2       	std	Z+37, r1	; 0x25
    f38a:	16 a2       	std	Z+38, r1	; 0x26
    f38c:	17 a2       	std	Z+39, r1	; 0x27
    f38e:	10 a6       	std	Z+40, r1	; 0x28
    f390:	11 a6       	std	Z+41, r1	; 0x29
    f392:	12 a6       	std	Z+42, r1	; 0x2a
    f394:	13 a6       	std	Z+43, r1	; 0x2b
    f396:	14 a6       	std	Z+44, r1	; 0x2c
    f398:	15 a6       	std	Z+45, r1	; 0x2d
    f39a:	16 a6       	std	Z+46, r1	; 0x2e
    f39c:	17 a6       	std	Z+47, r1	; 0x2f
    f39e:	11 8a       	std	Z+17, r1	; 0x11
    f3a0:	10 8a       	std	Z+16, r1	; 0x10
    f3a2:	13 8a       	std	Z+19, r1	; 0x13
    f3a4:	12 8a       	std	Z+18, r1	; 0x12
    f3a6:	10 8e       	std	Z+24, r1	; 0x18
    f3a8:	11 8e       	std	Z+25, r1	; 0x19
    f3aa:	12 8e       	std	Z+26, r1	; 0x1a
    f3ac:	13 8e       	std	Z+27, r1	; 0x1b
    f3ae:	80 e0       	ldi	r24, 0x00	; 0
    f3b0:	90 e4       	ldi	r25, 0x40	; 64
    f3b2:	a0 e0       	ldi	r26, 0x00	; 0
    f3b4:	b0 e0       	ldi	r27, 0x00	; 0
    f3b6:	4e c0       	rjmp	.+156    	; 0xf454 <stat+0x102>
    f3b8:	be 01       	movw	r22, r28
    f3ba:	6f 5f       	subi	r22, 0xFF	; 255
    f3bc:	7f 4f       	sbci	r23, 0xFF	; 255
    f3be:	c7 01       	movw	r24, r14
    f3c0:	0e 94 0e 65 	call	0xca1c	; 0xca1c <f_stat>
    f3c4:	00 97       	sbiw	r24, 0x00	; 0
    f3c6:	a1 f0       	breq	.+40     	; 0xf3f0 <stat+0x9e>
    f3c8:	84 31       	cpi	r24, 0x14	; 20
    f3ca:	91 05       	cpc	r25, r1
    f3cc:	40 f4       	brcc	.+16     	; 0xf3de <stat+0x8c>
    f3ce:	fc 01       	movw	r30, r24
    f3d0:	e0 5f       	subi	r30, 0xF0	; 240
    f3d2:	f8 4f       	sbci	r31, 0xF8	; 248
    f3d4:	80 81       	ld	r24, Z
    f3d6:	08 2e       	mov	r0, r24
    f3d8:	00 0c       	add	r0, r0
    f3da:	99 0b       	sbc	r25, r25
    f3dc:	02 c0       	rjmp	.+4      	; 0xf3e2 <stat+0x90>
    f3de:	83 e2       	ldi	r24, 0x23	; 35
    f3e0:	90 e0       	ldi	r25, 0x00	; 0
    f3e2:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f3e6:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f3ea:	8f ef       	ldi	r24, 0xFF	; 255
    f3ec:	9f ef       	ldi	r25, 0xFF	; 255
    f3ee:	38 c0       	rjmp	.+112    	; 0xf460 <stat+0x10e>
    f3f0:	89 81       	ldd	r24, Y+1	; 0x01
    f3f2:	9a 81       	ldd	r25, Y+2	; 0x02
    f3f4:	ab 81       	ldd	r26, Y+3	; 0x03
    f3f6:	bc 81       	ldd	r27, Y+4	; 0x04
    f3f8:	f8 01       	movw	r30, r16
    f3fa:	80 8f       	std	Z+24, r24	; 0x18
    f3fc:	91 8f       	std	Z+25, r25	; 0x19
    f3fe:	a2 8f       	std	Z+26, r26	; 0x1a
    f400:	b3 8f       	std	Z+27, r27	; 0x1b
    f402:	6f 81       	ldd	r22, Y+7	; 0x07
    f404:	78 85       	ldd	r23, Y+8	; 0x08
    f406:	8d 81       	ldd	r24, Y+5	; 0x05
    f408:	9e 81       	ldd	r25, Y+6	; 0x06
    f40a:	5f df       	rcall	.-322    	; 0xf2ca <fat_time_to_unix>
    f40c:	f8 01       	movw	r30, r16
    f40e:	64 a3       	std	Z+36, r22	; 0x24
    f410:	75 a3       	std	Z+37, r23	; 0x25
    f412:	86 a3       	std	Z+38, r24	; 0x26
    f414:	97 a3       	std	Z+39, r25	; 0x27
    f416:	60 a7       	std	Z+40, r22	; 0x28
    f418:	71 a7       	std	Z+41, r23	; 0x29
    f41a:	82 a7       	std	Z+42, r24	; 0x2a
    f41c:	93 a7       	std	Z+43, r25	; 0x2b
    f41e:	64 a7       	std	Z+44, r22	; 0x2c
    f420:	75 a7       	std	Z+45, r23	; 0x2d
    f422:	86 a7       	std	Z+46, r24	; 0x2e
    f424:	97 a7       	std	Z+47, r25	; 0x2f
    f426:	29 85       	ldd	r18, Y+9	; 0x09
    f428:	20 fd       	sbrc	r18, 0
    f42a:	03 c0       	rjmp	.+6      	; 0xf432 <stat+0xe0>
    f42c:	8f ef       	ldi	r24, 0xFF	; 255
    f42e:	91 e0       	ldi	r25, 0x01	; 1
    f430:	02 c0       	rjmp	.+4      	; 0xf436 <stat+0xe4>
    f432:	8d e6       	ldi	r24, 0x6D	; 109
    f434:	91 e0       	ldi	r25, 0x01	; 1
    f436:	48 ee       	ldi	r20, 0xE8	; 232
    f438:	53 e0       	ldi	r21, 0x03	; 3
    f43a:	f8 01       	movw	r30, r16
    f43c:	51 8b       	std	Z+17, r21	; 0x11
    f43e:	40 8b       	std	Z+16, r20	; 0x10
    f440:	53 8b       	std	Z+19, r21	; 0x13
    f442:	42 8b       	std	Z+18, r20	; 0x12
    f444:	24 ff       	sbrs	r18, 4
    f446:	02 c0       	rjmp	.+4      	; 0xf44c <stat+0xfa>
    f448:	90 64       	ori	r25, 0x40	; 64
    f44a:	01 c0       	rjmp	.+2      	; 0xf44e <stat+0xfc>
    f44c:	90 68       	ori	r25, 0x80	; 128
    f44e:	a0 e0       	ldi	r26, 0x00	; 0
    f450:	b0 e0       	ldi	r27, 0x00	; 0
    f452:	f8 01       	movw	r30, r16
    f454:	80 87       	std	Z+8, r24	; 0x08
    f456:	91 87       	std	Z+9, r25	; 0x09
    f458:	a2 87       	std	Z+10, r26	; 0x0a
    f45a:	b3 87       	std	Z+11, r27	; 0x0b
    f45c:	80 e0       	ldi	r24, 0x00	; 0
    f45e:	90 e0       	ldi	r25, 0x00	; 0
    f460:	ca 5e       	subi	r28, 0xEA	; 234
    f462:	de 4f       	sbci	r29, 0xFE	; 254
    f464:	e6 e0       	ldi	r30, 0x06	; 6
    f466:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

0000f46a <unix_time_to_fat>:
    f46a:	a4 e0       	ldi	r26, 0x04	; 4
    f46c:	b0 e0       	ldi	r27, 0x00	; 0
    f46e:	eb e3       	ldi	r30, 0x3B	; 59
    f470:	fa e7       	ldi	r31, 0x7A	; 122
    f472:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__prologue_saves__+0x18>
    f476:	69 83       	std	Y+1, r22	; 0x01
    f478:	7a 83       	std	Y+2, r23	; 0x02
    f47a:	8b 83       	std	Y+3, r24	; 0x03
    f47c:	9c 83       	std	Y+4, r25	; 0x04
    f47e:	7a 01       	movw	r14, r20
    f480:	89 01       	movw	r16, r18
    f482:	ce 01       	movw	r24, r28
    f484:	01 96       	adiw	r24, 0x01	; 1
    f486:	0e 94 11 38 	call	0x7022	; 0x7022 <gmtime>
    f48a:	fc 01       	movw	r30, r24
    f48c:	22 85       	ldd	r18, Z+10	; 0x0a
    f48e:	33 85       	ldd	r19, Z+11	; 0x0b
    f490:	20 55       	subi	r18, 0x50	; 80
    f492:	31 09       	sbc	r19, r1
    f494:	c9 01       	movw	r24, r18
    f496:	98 2f       	mov	r25, r24
    f498:	88 27       	eor	r24, r24
    f49a:	99 0f       	add	r25, r25
    f49c:	20 85       	ldd	r18, Z+8	; 0x08
    f49e:	31 85       	ldd	r19, Z+9	; 0x09
    f4a0:	2f 5f       	subi	r18, 0xFF	; 255
    f4a2:	3f 4f       	sbci	r19, 0xFF	; 255
    f4a4:	45 e0       	ldi	r20, 0x05	; 5
    f4a6:	22 0f       	add	r18, r18
    f4a8:	33 1f       	adc	r19, r19
    f4aa:	4a 95       	dec	r20
    f4ac:	e1 f7       	brne	.-8      	; 0xf4a6 <unix_time_to_fat+0x3c>
    f4ae:	28 2b       	or	r18, r24
    f4b0:	39 2b       	or	r19, r25
    f4b2:	86 81       	ldd	r24, Z+6	; 0x06
    f4b4:	97 81       	ldd	r25, Z+7	; 0x07
    f4b6:	28 2b       	or	r18, r24
    f4b8:	39 2b       	or	r19, r25
    f4ba:	d7 01       	movw	r26, r14
    f4bc:	2d 93       	st	X+, r18
    f4be:	3c 93       	st	X, r19
    f4c0:	84 81       	ldd	r24, Z+4	; 0x04
    f4c2:	20 e0       	ldi	r18, 0x00	; 0
    f4c4:	30 e0       	ldi	r19, 0x00	; 0
    f4c6:	38 2f       	mov	r19, r24
    f4c8:	33 0f       	add	r19, r19
    f4ca:	33 0f       	add	r19, r19
    f4cc:	33 0f       	add	r19, r19
    f4ce:	82 81       	ldd	r24, Z+2	; 0x02
    f4d0:	93 81       	ldd	r25, Z+3	; 0x03
    f4d2:	55 e0       	ldi	r21, 0x05	; 5
    f4d4:	88 0f       	add	r24, r24
    f4d6:	99 1f       	adc	r25, r25
    f4d8:	5a 95       	dec	r21
    f4da:	e1 f7       	brne	.-8      	; 0xf4d4 <unix_time_to_fat+0x6a>
    f4dc:	82 2b       	or	r24, r18
    f4de:	93 2b       	or	r25, r19
    f4e0:	20 81       	ld	r18, Z
    f4e2:	31 81       	ldd	r19, Z+1	; 0x01
    f4e4:	36 95       	lsr	r19
    f4e6:	27 95       	ror	r18
    f4e8:	82 2b       	or	r24, r18
    f4ea:	93 2b       	or	r25, r19
    f4ec:	f8 01       	movw	r30, r16
    f4ee:	91 83       	std	Z+1, r25	; 0x01
    f4f0:	80 83       	st	Z, r24
    f4f2:	24 96       	adiw	r28, 0x04	; 4
    f4f4:	e6 e0       	ldi	r30, 0x06	; 6
    f4f6:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

0000f4fa <utime>:
    f4fa:	aa e1       	ldi	r26, 0x1A	; 26
    f4fc:	b1 e0       	ldi	r27, 0x01	; 1
    f4fe:	e3 e8       	ldi	r30, 0x83	; 131
    f500:	fa e7       	ldi	r31, 0x7A	; 122
    f502:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__prologue_saves__+0x1c>
    f506:	8c 01       	movw	r16, r24
    f508:	61 15       	cp	r22, r1
    f50a:	71 05       	cpc	r23, r1
    f50c:	31 f0       	breq	.+12     	; 0xf51a <utime+0x20>
    f50e:	fb 01       	movw	r30, r22
    f510:	64 81       	ldd	r22, Z+4	; 0x04
    f512:	75 81       	ldd	r23, Z+5	; 0x05
    f514:	86 81       	ldd	r24, Z+6	; 0x06
    f516:	97 81       	ldd	r25, Z+7	; 0x07
    f518:	04 c0       	rjmp	.+8      	; 0xf522 <utime+0x28>
    f51a:	80 e0       	ldi	r24, 0x00	; 0
    f51c:	90 e0       	ldi	r25, 0x00	; 0
    f51e:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <time>
    f522:	9e 01       	movw	r18, r28
    f524:	29 5e       	subi	r18, 0xE9	; 233
    f526:	3e 4f       	sbci	r19, 0xFE	; 254
    f528:	ae 01       	movw	r20, r28
    f52a:	47 5e       	subi	r20, 0xE7	; 231
    f52c:	5e 4f       	sbci	r21, 0xFE	; 254
    f52e:	9d df       	rcall	.-198    	; 0xf46a <unix_time_to_fat>
    f530:	c7 5e       	subi	r28, 0xE7	; 231
    f532:	de 4f       	sbci	r29, 0xFE	; 254
    f534:	88 81       	ld	r24, Y
    f536:	99 81       	ldd	r25, Y+1	; 0x01
    f538:	c9 51       	subi	r28, 0x19	; 25
    f53a:	d1 40       	sbci	r29, 0x01	; 1
    f53c:	9e 83       	std	Y+6, r25	; 0x06
    f53e:	8d 83       	std	Y+5, r24	; 0x05
    f540:	c9 5e       	subi	r28, 0xE9	; 233
    f542:	de 4f       	sbci	r29, 0xFE	; 254
    f544:	88 81       	ld	r24, Y
    f546:	99 81       	ldd	r25, Y+1	; 0x01
    f548:	c7 51       	subi	r28, 0x17	; 23
    f54a:	d1 40       	sbci	r29, 0x01	; 1
    f54c:	98 87       	std	Y+8, r25	; 0x08
    f54e:	8f 83       	std	Y+7, r24	; 0x07
    f550:	be 01       	movw	r22, r28
    f552:	6f 5f       	subi	r22, 0xFF	; 255
    f554:	7f 4f       	sbci	r23, 0xFF	; 255
    f556:	c8 01       	movw	r24, r16
    f558:	0e 94 24 69 	call	0xd248	; 0xd248 <f_utime>
    f55c:	84 31       	cpi	r24, 0x14	; 20
    f55e:	91 05       	cpc	r25, r1
    f560:	40 f4       	brcc	.+16     	; 0xf572 <utime+0x78>
    f562:	fc 01       	movw	r30, r24
    f564:	e0 5f       	subi	r30, 0xF0	; 240
    f566:	f8 4f       	sbci	r31, 0xF8	; 248
    f568:	80 81       	ld	r24, Z
    f56a:	08 2e       	mov	r0, r24
    f56c:	00 0c       	add	r0, r0
    f56e:	99 0b       	sbc	r25, r25
    f570:	02 c0       	rjmp	.+4      	; 0xf576 <utime+0x7c>
    f572:	83 e2       	ldi	r24, 0x23	; 35
    f574:	90 e0       	ldi	r25, 0x00	; 0
    f576:	c6 5e       	subi	r28, 0xE6	; 230
    f578:	de 4f       	sbci	r29, 0xFE	; 254
    f57a:	e4 e0       	ldi	r30, 0x04	; 4
    f57c:	0c 94 5f e5 	jmp	0x1cabe	; 0x1cabe <__epilogue_restores__+0x1c>

0000f580 <fileno_to_fatfs>:
    f580:	83 30       	cpi	r24, 0x03	; 3
    f582:	91 05       	cpc	r25, r1
    f584:	48 f4       	brcc	.+18     	; 0xf598 <fileno_to_fatfs+0x18>
    f586:	89 e0       	ldi	r24, 0x09	; 9
    f588:	90 e0       	ldi	r25, 0x00	; 0
    f58a:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f58e:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f592:	80 e0       	ldi	r24, 0x00	; 0
    f594:	90 e0       	ldi	r25, 0x00	; 0
    f596:	08 95       	ret
    f598:	78 dc       	rcall	.-1808   	; 0xee8a <fileno_to_stream>
    f59a:	00 97       	sbiw	r24, 0x00	; 0
    f59c:	d1 f3       	breq	.-12     	; 0xf592 <fileno_to_fatfs+0x12>
    f59e:	fc 01       	movw	r30, r24
    f5a0:	84 85       	ldd	r24, Z+12	; 0x0c
    f5a2:	95 85       	ldd	r25, Z+13	; 0x0d
    f5a4:	00 97       	sbiw	r24, 0x00	; 0
    f5a6:	79 f3       	breq	.-34     	; 0xf586 <fileno_to_fatfs+0x6>
    f5a8:	08 95       	ret

0000f5aa <ftell>:
    f5aa:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f5ae:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    f5b2:	4f dc       	rcall	.-1890   	; 0xee52 <fileno>
    f5b4:	83 30       	cpi	r24, 0x03	; 3
    f5b6:	91 05       	cpc	r25, r1
    f5b8:	48 f0       	brcs	.+18     	; 0xf5cc <ftell+0x22>
    f5ba:	e2 df       	rcall	.-60     	; 0xf580 <fileno_to_fatfs>
    f5bc:	00 97       	sbiw	r24, 0x00	; 0
    f5be:	51 f4       	brne	.+20     	; 0xf5d4 <ftell+0x2a>
    f5c0:	89 e0       	ldi	r24, 0x09	; 9
    f5c2:	90 e0       	ldi	r25, 0x00	; 0
    f5c4:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f5c8:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f5cc:	6f ef       	ldi	r22, 0xFF	; 255
    f5ce:	7f ef       	ldi	r23, 0xFF	; 255
    f5d0:	cb 01       	movw	r24, r22
    f5d2:	08 95       	ret
    f5d4:	fc 01       	movw	r30, r24
    f5d6:	60 89       	ldd	r22, Z+16	; 0x10
    f5d8:	71 89       	ldd	r23, Z+17	; 0x11
    f5da:	82 89       	ldd	r24, Z+18	; 0x12
    f5dc:	93 89       	ldd	r25, Z+19	; 0x13
    f5de:	08 95       	ret

0000f5e0 <lseek>:
    f5e0:	a0 e0       	ldi	r26, 0x00	; 0
    f5e2:	b0 e0       	ldi	r27, 0x00	; 0
    f5e4:	e6 ef       	ldi	r30, 0xF6	; 246
    f5e6:	fa e7       	ldi	r31, 0x7A	; 122
    f5e8:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__prologue_saves__+0x10>
    f5ec:	5c 01       	movw	r10, r24
    f5ee:	6a 01       	movw	r12, r20
    f5f0:	7b 01       	movw	r14, r22
    f5f2:	89 01       	movw	r16, r18
    f5f4:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f5f8:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    f5fc:	c1 df       	rcall	.-126    	; 0xf580 <fileno_to_fatfs>
    f5fe:	ec 01       	movw	r28, r24
    f600:	89 2b       	or	r24, r25
    f602:	19 f4       	brne	.+6      	; 0xf60a <lseek+0x2a>
    f604:	88 e1       	ldi	r24, 0x18	; 24
    f606:	90 e0       	ldi	r25, 0x00	; 0
    f608:	26 c0       	rjmp	.+76     	; 0xf656 <lseek+0x76>
    f60a:	83 e0       	ldi	r24, 0x03	; 3
    f60c:	a8 16       	cp	r10, r24
    f60e:	b1 04       	cpc	r11, r1
    f610:	d0 f1       	brcs	.+116    	; 0xf686 <lseek+0xa6>
    f612:	c5 01       	movw	r24, r10
    f614:	3a dc       	rcall	.-1932   	; 0xee8a <fileno_to_stream>
    f616:	fc 01       	movw	r30, r24
    f618:	93 81       	ldd	r25, Z+3	; 0x03
    f61a:	90 64       	ori	r25, 0x40	; 64
    f61c:	93 83       	std	Z+3, r25	; 0x03
    f61e:	02 30       	cpi	r16, 0x02	; 2
    f620:	11 05       	cpc	r17, r1
    f622:	a9 f5       	brne	.+106    	; 0xf68e <lseek+0xae>
    f624:	8a 85       	ldd	r24, Y+10	; 0x0a
    f626:	9b 85       	ldd	r25, Y+11	; 0x0b
    f628:	ac 85       	ldd	r26, Y+12	; 0x0c
    f62a:	bd 85       	ldd	r27, Y+13	; 0x0d
    f62c:	c8 0e       	add	r12, r24
    f62e:	d9 1e       	adc	r13, r25
    f630:	ea 1e       	adc	r14, r26
    f632:	fb 1e       	adc	r15, r27
    f634:	b7 01       	movw	r22, r14
    f636:	a6 01       	movw	r20, r12
    f638:	ce 01       	movw	r24, r28
    f63a:	0e 94 69 61 	call	0xc2d2	; 0xc2d2 <f_lseek>
    f63e:	00 97       	sbiw	r24, 0x00	; 0
    f640:	79 f0       	breq	.+30     	; 0xf660 <lseek+0x80>
    f642:	84 31       	cpi	r24, 0x14	; 20
    f644:	91 05       	cpc	r25, r1
    f646:	58 f5       	brcc	.+86     	; 0xf69e <lseek+0xbe>
    f648:	fc 01       	movw	r30, r24
    f64a:	e0 5f       	subi	r30, 0xF0	; 240
    f64c:	f8 4f       	sbci	r31, 0xF8	; 248
    f64e:	80 81       	ld	r24, Z
    f650:	08 2e       	mov	r0, r24
    f652:	00 0c       	add	r0, r0
    f654:	99 0b       	sbc	r25, r25
    f656:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f65a:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f65e:	13 c0       	rjmp	.+38     	; 0xf686 <lseek+0xa6>
    f660:	68 89       	ldd	r22, Y+16	; 0x10
    f662:	79 89       	ldd	r23, Y+17	; 0x11
    f664:	8a 89       	ldd	r24, Y+18	; 0x12
    f666:	9b 89       	ldd	r25, Y+19	; 0x13
    f668:	c6 16       	cp	r12, r22
    f66a:	d7 06       	cpc	r13, r23
    f66c:	e8 06       	cpc	r14, r24
    f66e:	f9 06       	cpc	r15, r25
    f670:	c9 f0       	breq	.+50     	; 0xf6a4 <lseek+0xc4>
    f672:	8a e5       	ldi	r24, 0x5A	; 90
    f674:	9c e0       	ldi	r25, 0x0C	; 12
    f676:	1f 92       	push	r1
    f678:	9f 93       	push	r25
    f67a:	8f 93       	push	r24
    f67c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    f680:	0f 90       	pop	r0
    f682:	0f 90       	pop	r0
    f684:	0f 90       	pop	r0
    f686:	6f ef       	ldi	r22, 0xFF	; 255
    f688:	7f ef       	ldi	r23, 0xFF	; 255
    f68a:	cb 01       	movw	r24, r22
    f68c:	0b c0       	rjmp	.+22     	; 0xf6a4 <lseek+0xc4>
    f68e:	01 30       	cpi	r16, 0x01	; 1
    f690:	11 05       	cpc	r17, r1
    f692:	81 f6       	brne	.-96     	; 0xf634 <lseek+0x54>
    f694:	88 89       	ldd	r24, Y+16	; 0x10
    f696:	99 89       	ldd	r25, Y+17	; 0x11
    f698:	aa 89       	ldd	r26, Y+18	; 0x12
    f69a:	bb 89       	ldd	r27, Y+19	; 0x13
    f69c:	c7 cf       	rjmp	.-114    	; 0xf62c <lseek+0x4c>
    f69e:	83 e2       	ldi	r24, 0x23	; 35
    f6a0:	90 e0       	ldi	r25, 0x00	; 0
    f6a2:	d9 cf       	rjmp	.-78     	; 0xf656 <lseek+0x76>
    f6a4:	cd b7       	in	r28, 0x3d	; 61
    f6a6:	de b7       	in	r29, 0x3e	; 62
    f6a8:	ea e0       	ldi	r30, 0x0A	; 10
    f6aa:	0c 94 59 e5 	jmp	0x1cab2	; 0x1cab2 <__epilogue_restores__+0x10>

0000f6ae <fseek>:
    f6ae:	cf 92       	push	r12
    f6b0:	df 92       	push	r13
    f6b2:	ef 92       	push	r14
    f6b4:	ff 92       	push	r15
    f6b6:	cf 93       	push	r28
    f6b8:	df 93       	push	r29
    f6ba:	6a 01       	movw	r12, r20
    f6bc:	7b 01       	movw	r14, r22
    f6be:	e9 01       	movw	r28, r18
    f6c0:	c8 db       	rcall	.-2160   	; 0xee52 <fileno>
    f6c2:	97 fd       	sbrc	r25, 7
    f6c4:	12 c0       	rjmp	.+36     	; 0xf6ea <fseek+0x3c>
    f6c6:	9e 01       	movw	r18, r28
    f6c8:	b7 01       	movw	r22, r14
    f6ca:	a6 01       	movw	r20, r12
    f6cc:	89 df       	rcall	.-238    	; 0xf5e0 <lseek>
    f6ce:	21 e0       	ldi	r18, 0x01	; 1
    f6d0:	30 e0       	ldi	r19, 0x00	; 0
    f6d2:	6f 3f       	cpi	r22, 0xFF	; 255
    f6d4:	7f 4f       	sbci	r23, 0xFF	; 255
    f6d6:	8f 4f       	sbci	r24, 0xFF	; 255
    f6d8:	9f 4f       	sbci	r25, 0xFF	; 255
    f6da:	11 f0       	breq	.+4      	; 0xf6e0 <fseek+0x32>
    f6dc:	20 e0       	ldi	r18, 0x00	; 0
    f6de:	30 e0       	ldi	r19, 0x00	; 0
    f6e0:	88 27       	eor	r24, r24
    f6e2:	99 27       	eor	r25, r25
    f6e4:	82 1b       	sub	r24, r18
    f6e6:	93 0b       	sbc	r25, r19
    f6e8:	02 c0       	rjmp	.+4      	; 0xf6ee <fseek+0x40>
    f6ea:	8f ef       	ldi	r24, 0xFF	; 255
    f6ec:	9f ef       	ldi	r25, 0xFF	; 255
    f6ee:	df 91       	pop	r29
    f6f0:	cf 91       	pop	r28
    f6f2:	ff 90       	pop	r15
    f6f4:	ef 90       	pop	r14
    f6f6:	df 90       	pop	r13
    f6f8:	cf 90       	pop	r12
    f6fa:	08 95       	ret

0000f6fc <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f6fc:	a2 e0       	ldi	r26, 0x02	; 2
    f6fe:	b0 e0       	ldi	r27, 0x00	; 0
    f700:	e4 e8       	ldi	r30, 0x84	; 132
    f702:	fb e7       	ldi	r31, 0x7B	; 123
    f704:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__prologue_saves__+0x10>
    f708:	5c 01       	movw	r10, r24
    f70a:	8b 01       	movw	r16, r22
    f70c:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

    //FIXME
    *(char *) buf = 0;
    f70e:	fb 01       	movw	r30, r22
    f710:	10 82       	st	Z, r1

    errno = 0;
    f712:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f716:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>

    // TTY read function
    // FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f71a:	b7 db       	rcall	.-2194   	; 0xee8a <fileno_to_stream>
    if(stream == stdin)
    f71c:	7c 01       	movw	r14, r24
    f71e:	80 91 b7 1b 	lds	r24, 0x1BB7	; 0x801bb7 <__iob>
    f722:	90 91 b8 1b 	lds	r25, 0x1BB8	; 0x801bb8 <__iob+0x1>
    f726:	e8 16       	cp	r14, r24
    f728:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
        // ungetc is undefined for read
        stream->flags |= __SUNGET;
    f72a:	c9 f4       	brne	.+50     	; 0xf75e <read+0x62>
    f72c:	f7 01       	movw	r30, r14
    f72e:	83 81       	ldd	r24, Z+3	; 0x03
    f730:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    f732:	83 83       	std	Z+3, r24	; 0x03
    f734:	1a 82       	std	Y+2, r1	; 0x02
    f736:	19 82       	std	Y+1, r1	; 0x01
    f738:	c0 0e       	add	r12, r16
        while(count--)
    f73a:	d1 1e       	adc	r13, r17
    f73c:	0c 15       	cp	r16, r12
    f73e:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    f740:	09 f4       	brne	.+2      	; 0xf744 <read+0x48>
    f742:	3d c0       	rjmp	.+122    	; 0xf7be <read+0xc2>
            if(ret < 0)
    f744:	c7 01       	movw	r24, r14
    f746:	6b da       	rcall	.-2858   	; 0xec1e <fgetc>
                break;
            
            *ptr++ = ret;
    f748:	97 fd       	sbrc	r25, 7
    f74a:	39 c0       	rjmp	.+114    	; 0xf7be <read+0xc2>
    f74c:	f8 01       	movw	r30, r16
            ++size;
    f74e:	81 93       	st	Z+, r24
    f750:	8f 01       	movw	r16, r30
    f752:	89 81       	ldd	r24, Y+1	; 0x01
    f754:	9a 81       	ldd	r25, Y+2	; 0x02
    f756:	01 96       	adiw	r24, 0x01	; 1
    f758:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f75a:	89 83       	std	Y+1, r24	; 0x01
    f75c:	ef cf       	rjmp	.-34     	; 0xf73c <read+0x40>
    f75e:	80 91 b9 1b 	lds	r24, 0x1BB9	; 0x801bb9 <__iob+0x2>
    f762:	90 91 ba 1b 	lds	r25, 0x1BBA	; 0x801bba <__iob+0x3>
    f766:	e8 16       	cp	r14, r24
    f768:	f9 06       	cpc	r15, r25
    f76a:	71 f1       	breq	.+92     	; 0xf7c8 <read+0xcc>
    f76c:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <__iob+0x4>
    f770:	90 91 bc 1b 	lds	r25, 0x1BBC	; 0x801bbc <__iob+0x5>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f774:	e8 16       	cp	r14, r24
    f776:	f9 06       	cpc	r15, r25
    f778:	39 f1       	breq	.+78     	; 0xf7c8 <read+0xcc>
    if ( fh == NULL )
    f77a:	c5 01       	movw	r24, r10
    f77c:	01 df       	rcall	.-510    	; 0xf580 <fileno_to_fatfs>
    {
        errno = EBADF;
    f77e:	00 97       	sbiw	r24, 0x00	; 0
    f780:	19 f4       	brne	.+6      	; 0xf788 <read+0x8c>
    f782:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f784:	90 e0       	ldi	r25, 0x00	; 0
    f786:	16 c0       	rjmp	.+44     	; 0xf7b4 <read+0xb8>
    f788:	9e 01       	movw	r18, r28
    f78a:	2f 5f       	subi	r18, 0xFF	; 255
    f78c:	3f 4f       	sbci	r19, 0xFF	; 255
    f78e:	a6 01       	movw	r20, r12
    f790:	b8 01       	movw	r22, r16
    if(res != FR_OK)
    f792:	0e 94 5d 5c 	call	0xb8ba	; 0xb8ba <f_read>
    f796:	00 97       	sbiw	r24, 0x00	; 0
    f798:	91 f0       	breq	.+36     	; 0xf7be <read+0xc2>
    f79a:	84 31       	cpi	r24, 0x14	; 20
    f79c:	91 05       	cpc	r25, r1
    f79e:	40 f4       	brcc	.+16     	; 0xf7b0 <read+0xb4>
    f7a0:	fc 01       	movw	r30, r24
    f7a2:	e0 5f       	subi	r30, 0xF0	; 240
    f7a4:	f8 4f       	sbci	r31, 0xF8	; 248
    f7a6:	80 81       	ld	r24, Z
    f7a8:	08 2e       	mov	r0, r24
    f7aa:	00 0c       	add	r0, r0
    f7ac:	99 0b       	sbc	r25, r25
    f7ae:	02 c0       	rjmp	.+4      	; 0xf7b4 <read+0xb8>
    {
        errno = fatfs_to_errno(res);
    f7b0:	83 e2       	ldi	r24, 0x23	; 35
    f7b2:	90 e0       	ldi	r25, 0x00	; 0
    f7b4:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f7b8:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f7bc:	05 c0       	rjmp	.+10     	; 0xf7c8 <read+0xcc>
    f7be:	69 81       	ldd	r22, Y+1	; 0x01
    f7c0:	7a 81       	ldd	r23, Y+2	; 0x02
    f7c2:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f7c4:	90 e0       	ldi	r25, 0x00	; 0
    f7c6:	03 c0       	rjmp	.+6      	; 0xf7ce <read+0xd2>
    f7c8:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f7ca:	7f ef       	ldi	r23, 0xFF	; 255
    f7cc:	cb 01       	movw	r24, r22
    f7ce:	22 96       	adiw	r28, 0x02	; 2
    f7d0:	ea e0       	ldi	r30, 0x0A	; 10
    f7d2:	0c 94 59 e5 	jmp	0x1cab2	; 0x1cab2 <__epilogue_restores__+0x10>

0000f7d6 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f7d6:	0f 93       	push	r16
    f7d8:	1f 93       	push	r17
    f7da:	cf 93       	push	r28
    f7dc:	df 93       	push	r29
    f7de:	ec 01       	movw	r28, r24
    f7e0:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f7e2:	64 9f       	mul	r22, r20
    f7e4:	80 01       	movw	r16, r0
    f7e6:	65 9f       	mul	r22, r21
    f7e8:	10 0d       	add	r17, r0
    f7ea:	74 9f       	mul	r23, r20
    f7ec:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f7ee:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f7f0:	30 db       	rcall	.-2464   	; 0xee52 <fileno>
    f7f2:	a8 01       	movw	r20, r16
    f7f4:	be 01       	movw	r22, r28
    if(ret < 0)
    f7f6:	82 df       	rcall	.-252    	; 0xf6fc <read>
    f7f8:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f7fa:	02 c0       	rjmp	.+4      	; 0xf800 <fread+0x2a>
    f7fc:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f7fe:	02 c0       	rjmp	.+4      	; 0xf804 <fread+0x2e>
    f800:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f802:	90 e0       	ldi	r25, 0x00	; 0
    f804:	df 91       	pop	r29
    f806:	cf 91       	pop	r28
    f808:	1f 91       	pop	r17
    f80a:	0f 91       	pop	r16
    f80c:	08 95       	ret

0000f80e <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f80e:	cf 93       	push	r28
    f810:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f812:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f816:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f81a:	83 30       	cpi	r24, 0x03	; 3
    f81c:	91 05       	cpc	r25, r1
    f81e:	18 f4       	brcc	.+6      	; 0xf826 <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f820:	89 e0       	ldi	r24, 0x09	; 9
    f822:	90 e0       	ldi	r25, 0x00	; 0
    f824:	18 c0       	rjmp	.+48     	; 0xf856 <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f826:	ec 01       	movw	r28, r24
    f828:	30 db       	rcall	.-2464   	; 0xee8a <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
    f82a:	fc 01       	movw	r30, r24
    f82c:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f82e:	90 64       	ori	r25, 0x40	; 64
    f830:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    f832:	ce 01       	movw	r24, r28
    f834:	a5 de       	rcall	.-694    	; 0xf580 <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f836:	00 97       	sbiw	r24, 0x00	; 0
    f838:	99 f3       	breq	.-26     	; 0xf820 <syncfs+0x12>
    if (res != FR_OK)
    f83a:	0e 94 3f 5f 	call	0xbe7e	; 0xbe7e <f_sync>
    f83e:	00 97       	sbiw	r24, 0x00	; 0
    f840:	a1 f0       	breq	.+40     	; 0xf86a <syncfs+0x5c>
    f842:	84 31       	cpi	r24, 0x14	; 20
    f844:	91 05       	cpc	r25, r1
    f846:	70 f4       	brcc	.+28     	; 0xf864 <syncfs+0x56>
    f848:	fc 01       	movw	r30, r24
    f84a:	e0 5f       	subi	r30, 0xF0	; 240
    f84c:	f8 4f       	sbci	r31, 0xF8	; 248
    f84e:	80 81       	ld	r24, Z
    f850:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    f852:	00 0c       	add	r0, r0
    f854:	99 0b       	sbc	r25, r25
    f856:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
        return(-1);
    f85a:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    f85e:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f860:	9f ef       	ldi	r25, 0xFF	; 255
    f862:	05 c0       	rjmp	.+10     	; 0xf86e <syncfs+0x60>
    f864:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f866:	90 e0       	ldi	r25, 0x00	; 0
    f868:	f6 cf       	rjmp	.-20     	; 0xf856 <syncfs+0x48>
}
    f86a:	80 e0       	ldi	r24, 0x00	; 0
    f86c:	90 e0       	ldi	r25, 0x00	; 0
    f86e:	df 91       	pop	r29
    f870:	cf 91       	pop	r28
    f872:	08 95       	ret

0000f874 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f874:	cf 93       	push	r28
    f876:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f878:	c0 e0       	ldi	r28, 0x00	; 0
    f87a:	d0 e0       	ldi	r29, 0x00	; 0
    f87c:	21 96       	adiw	r28, 0x01	; 1
    f87e:	c0 31       	cpi	r28, 0x10	; 16
    f880:	d1 05       	cpc	r29, r1
    f882:	51 f0       	breq	.+20     	; 0xf898 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f884:	c3 30       	cpi	r28, 0x03	; 3
    f886:	d1 05       	cpc	r29, r1
    f888:	cc f3       	brlt	.-14     	; 0xf87c <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f88a:	ce 01       	movw	r24, r28
    f88c:	79 de       	rcall	.-782    	; 0xf580 <fileno_to_fatfs>
        if(fh == NULL)
    f88e:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    f890:	a9 f3       	breq	.-22     	; 0xf87c <sync+0x8>
    f892:	ce 01       	movw	r24, r28
    f894:	bc df       	rcall	.-136    	; 0xf80e <syncfs>
    }
}
    f896:	f2 cf       	rjmp	.-28     	; 0xf87c <sync+0x8>
    f898:	df 91       	pop	r29
    f89a:	cf 91       	pop	r28
    f89c:	08 95       	ret

0000f89e <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f89e:	a2 e0       	ldi	r26, 0x02	; 2
    f8a0:	b0 e0       	ldi	r27, 0x00	; 0
    f8a2:	e5 e5       	ldi	r30, 0x55	; 85
    f8a4:	fc e7       	ldi	r31, 0x7C	; 124
    f8a6:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__prologue_saves__+0xc>
    f8aa:	8c 01       	movw	r16, r24
    f8ac:	b6 2e       	mov	r11, r22
    f8ae:	f7 2e       	mov	r15, r23
    f8b0:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f8b2:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    f8b6:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
    f8ba:	e7 da       	rcall	.-2610   	; 0xee8a <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    f8bc:	6c 01       	movw	r12, r24
    f8be:	80 91 b9 1b 	lds	r24, 0x1BB9	; 0x801bb9 <__iob+0x2>
    f8c2:	90 91 ba 1b 	lds	r25, 0x1BBA	; 0x801bba <__iob+0x3>
    f8c6:	c8 16       	cp	r12, r24
    f8c8:	d9 06       	cpc	r13, r25
    f8ca:	39 f0       	breq	.+14     	; 0xf8da <write+0x3c>
    f8cc:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <__iob+0x4>
    f8d0:	90 91 bc 1b 	lds	r25, 0x1BBC	; 0x801bbc <__iob+0x5>
    f8d4:	c8 16       	cp	r12, r24
    f8d6:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
    f8d8:	d1 f4       	brne	.+52     	; 0xf90e <write+0x70>
    f8da:	1a 82       	std	Y+2, r1	; 0x02
    f8dc:	19 82       	std	Y+1, r1	; 0x01
    f8de:	0b 2d       	mov	r16, r11
    f8e0:	1f 2d       	mov	r17, r15
    f8e2:	78 01       	movw	r14, r16
    f8e4:	e8 0c       	add	r14, r8
        while(count--)
    f8e6:	f9 1c       	adc	r15, r9
    f8e8:	0e 15       	cp	r16, r14
    f8ea:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    f8ec:	d1 f1       	breq	.+116    	; 0xf962 <write+0xc4>
    f8ee:	f8 01       	movw	r30, r16
    f8f0:	a1 90       	ld	r10, Z+
    f8f2:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    f8f4:	b1 2c       	mov	r11, r1
    f8f6:	b6 01       	movw	r22, r12
    f8f8:	c5 01       	movw	r24, r10
            if(c != ret)
    f8fa:	e2 d9       	rcall	.-3132   	; 0xecc0 <fputc>
    f8fc:	a8 16       	cp	r10, r24
    f8fe:	b9 06       	cpc	r11, r25
                break;

            ++size;
    f900:	81 f5       	brne	.+96     	; 0xf962 <write+0xc4>
    f902:	89 81       	ldd	r24, Y+1	; 0x01
    f904:	9a 81       	ldd	r25, Y+2	; 0x02
    f906:	01 96       	adiw	r24, 0x01	; 1
    f908:	9a 83       	std	Y+2, r25	; 0x02
    f90a:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
    f90c:	ed cf       	rjmp	.-38     	; 0xf8e8 <write+0x4a>
    f90e:	80 91 b7 1b 	lds	r24, 0x1BB7	; 0x801bb7 <__iob>
    f912:	90 91 b8 1b 	lds	r25, 0x1BB8	; 0x801bb8 <__iob+0x1>
    f916:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f918:	d9 06       	cpc	r13, r25
    f91a:	41 f1       	breq	.+80     	; 0xf96c <write+0xce>
    f91c:	c8 01       	movw	r24, r16
    if ( fh == NULL )
    f91e:	30 de       	rcall	.-928    	; 0xf580 <fileno_to_fatfs>
    f920:	00 97       	sbiw	r24, 0x00	; 0
    {
        errno = EBADF;
    f922:	19 f4       	brne	.+6      	; 0xf92a <write+0x8c>
    f924:	89 e0       	ldi	r24, 0x09	; 9
    f926:	90 e0       	ldi	r25, 0x00	; 0
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f928:	17 c0       	rjmp	.+46     	; 0xf958 <write+0xba>
    f92a:	9e 01       	movw	r18, r28
    f92c:	2f 5f       	subi	r18, 0xFF	; 255
    f92e:	3f 4f       	sbci	r19, 0xFF	; 255
    f930:	a4 01       	movw	r20, r8
    f932:	6b 2d       	mov	r22, r11
    f934:	7f 2d       	mov	r23, r15
    f936:	0e 94 a8 5d 	call	0xbb50	; 0xbb50 <f_write>
    if(res != FR_OK)
    f93a:	00 97       	sbiw	r24, 0x00	; 0
    f93c:	91 f0       	breq	.+36     	; 0xf962 <write+0xc4>
    f93e:	84 31       	cpi	r24, 0x14	; 20
    f940:	91 05       	cpc	r25, r1
    f942:	40 f4       	brcc	.+16     	; 0xf954 <write+0xb6>
    f944:	fc 01       	movw	r30, r24
    f946:	e0 5f       	subi	r30, 0xF0	; 240
    f948:	f8 4f       	sbci	r31, 0xF8	; 248
    f94a:	80 81       	ld	r24, Z
    f94c:	08 2e       	mov	r0, r24
    f94e:	00 0c       	add	r0, r0
    f950:	99 0b       	sbc	r25, r25
    f952:	02 c0       	rjmp	.+4      	; 0xf958 <write+0xba>
    f954:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
    f956:	90 e0       	ldi	r25, 0x00	; 0
    f958:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f95c:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f960:	05 c0       	rjmp	.+10     	; 0xf96c <write+0xce>
    f962:	69 81       	ldd	r22, Y+1	; 0x01
    f964:	7a 81       	ldd	r23, Y+2	; 0x02
    f966:	80 e0       	ldi	r24, 0x00	; 0
    f968:	90 e0       	ldi	r25, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f96a:	03 c0       	rjmp	.+6      	; 0xf972 <write+0xd4>
    f96c:	6f ef       	ldi	r22, 0xFF	; 255
    f96e:	7f ef       	ldi	r23, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f970:	cb 01       	movw	r24, r22
    f972:	22 96       	adiw	r28, 0x02	; 2
    f974:	ec e0       	ldi	r30, 0x0C	; 12
    f976:	0c 94 57 e5 	jmp	0x1caae	; 0x1caae <__epilogue_restores__+0xc>

0000f97a <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f97a:	0f 93       	push	r16
    f97c:	1f 93       	push	r17
    f97e:	cf 93       	push	r28
    f980:	df 93       	push	r29
    f982:	ec 01       	movw	r28, r24
    f984:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f986:	64 9f       	mul	r22, r20
    f988:	80 01       	movw	r16, r0
    f98a:	65 9f       	mul	r22, r21
    f98c:	10 0d       	add	r17, r0
    f98e:	74 9f       	mul	r23, r20
    f990:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f992:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f994:	5e da       	rcall	.-2884   	; 0xee52 <fileno>
    f996:	a8 01       	movw	r20, r16
    f998:	be 01       	movw	r22, r28

    if(ret < 0)
    f99a:	81 df       	rcall	.-254    	; 0xf89e <write>
    f99c:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f99e:	02 c0       	rjmp	.+4      	; 0xf9a4 <fwrite+0x2a>
    f9a0:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f9a2:	02 c0       	rjmp	.+4      	; 0xf9a8 <fwrite+0x2e>
    f9a4:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f9a6:	90 e0       	ldi	r25, 0x00	; 0
    f9a8:	df 91       	pop	r29
    f9aa:	cf 91       	pop	r28
    f9ac:	1f 91       	pop	r17
    f9ae:	0f 91       	pop	r16
    f9b0:	08 95       	ret

0000f9b2 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f9b2:	0f 93       	push	r16
    f9b4:	1f 93       	push	r17
    f9b6:	cf 93       	push	r28
    f9b8:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f9ba:	83 30       	cpi	r24, 0x03	; 3
    f9bc:	91 05       	cpc	r25, r1
    f9be:	48 f4       	brcc	.+18     	; 0xf9d2 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f9c0:	89 e0       	ldi	r24, 0x09	; 9
    f9c2:	90 e0       	ldi	r25, 0x00	; 0
    f9c4:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    f9c8:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
        return(-1);
    f9cc:	8f ef       	ldi	r24, 0xFF	; 255
    f9ce:	9f ef       	ldi	r25, 0xFF	; 255
    f9d0:	20 c0       	rjmp	.+64     	; 0xfa12 <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f9d2:	ec 01       	movw	r28, r24
    f9d4:	5a da       	rcall	.-2892   	; 0xee8a <fileno_to_stream>
    if(stream == NULL)
    f9d6:	8c 01       	movw	r16, r24
    f9d8:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f9da:	c1 f3       	breq	.-16     	; 0xf9cc <free_file_descriptor+0x1a>
    f9dc:	f8 01       	movw	r30, r16
    f9de:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
    f9e0:	95 85       	ldd	r25, Z+13	; 0x0d
    f9e2:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
    f9e4:	11 f0       	breq	.+4      	; 0xf9ea <free_file_descriptor+0x38>
    f9e6:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f9ea:	f8 01       	movw	r30, r16
    f9ec:	80 81       	ld	r24, Z
    f9ee:	91 81       	ldd	r25, Z+1	; 0x01
    f9f0:	00 97       	sbiw	r24, 0x00	; 0
    f9f2:	21 f0       	breq	.+8      	; 0xf9fc <free_file_descriptor+0x4a>
    f9f4:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
    f9f6:	27 fd       	sbrc	r18, 7
    f9f8:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
    }

    __iob[fileno]  = NULL;
    f9fc:	fe 01       	movw	r30, r28
    f9fe:	ee 0f       	add	r30, r30
    fa00:	ff 1f       	adc	r31, r31
    fa02:	e9 54       	subi	r30, 0x49	; 73
    fa04:	f4 4e       	sbci	r31, 0xE4	; 228
    fa06:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
    fa08:	10 82       	st	Z, r1
    fa0a:	c8 01       	movw	r24, r16
    fa0c:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
    return(fileno);
}
    fa10:	ce 01       	movw	r24, r28
    fa12:	df 91       	pop	r29
    fa14:	cf 91       	pop	r28
    fa16:	1f 91       	pop	r17
    fa18:	0f 91       	pop	r16
    fa1a:	08 95       	ret

0000fa1c <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    fa1c:	0f 93       	push	r16
    fa1e:	1f 93       	push	r17
    fa20:	cf 93       	push	r28
    fa22:	df 93       	push	r29
    fa24:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fa26:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    fa2a:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fa2e:	2d da       	rcall	.-2982   	; 0xee8a <fileno_to_stream>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fa30:	89 2b       	or	r24, r25
    fa32:	d9 f0       	breq	.+54     	; 0xfa6a <close+0x4e>
    if(fh == NULL)
    fa34:	c8 01       	movw	r24, r16
    fa36:	a4 dd       	rcall	.-1208   	; 0xf580 <fileno_to_fatfs>
    {
        return(-1);
    }
    res = f_close(fh);
    fa38:	00 97       	sbiw	r24, 0x00	; 0
    fa3a:	b9 f0       	breq	.+46     	; 0xfa6a <close+0x4e>
    free_file_descriptor(fileno);
    fa3c:	0e 94 bf 5f 	call	0xbf7e	; 0xbf7e <f_close>
    fa40:	ec 01       	movw	r28, r24
    if (res != FR_OK)
    fa42:	c8 01       	movw	r24, r16
    fa44:	b6 df       	rcall	.-148    	; 0xf9b2 <free_file_descriptor>
    fa46:	20 97       	sbiw	r28, 0x00	; 0
    fa48:	99 f0       	breq	.+38     	; 0xfa70 <close+0x54>
    fa4a:	c4 31       	cpi	r28, 0x14	; 20
    fa4c:	d1 05       	cpc	r29, r1
    fa4e:	38 f4       	brcc	.+14     	; 0xfa5e <close+0x42>
    fa50:	c0 5f       	subi	r28, 0xF0	; 240
    fa52:	d8 4f       	sbci	r29, 0xF8	; 248
    fa54:	88 81       	ld	r24, Y
    fa56:	08 2e       	mov	r0, r24
    fa58:	00 0c       	add	r0, r0
    fa5a:	99 0b       	sbc	r25, r25
    fa5c:	02 c0       	rjmp	.+4      	; 0xfa62 <close+0x46>
    {
        errno = fatfs_to_errno(res);
    fa5e:	83 e2       	ldi	r24, 0x23	; 35
    fa60:	90 e0       	ldi	r25, 0x00	; 0
    fa62:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
        return(-1);
    fa66:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    fa6a:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
    fa6c:	9f ef       	ldi	r25, 0xFF	; 255
    fa6e:	02 c0       	rjmp	.+4      	; 0xfa74 <close+0x58>
}
    fa70:	80 e0       	ldi	r24, 0x00	; 0
    fa72:	90 e0       	ldi	r25, 0x00	; 0
    fa74:	df 91       	pop	r29
    fa76:	cf 91       	pop	r28
    fa78:	1f 91       	pop	r17
    fa7a:	0f 91       	pop	r16
    fa7c:	08 95       	ret

0000fa7e <fclose>:
    fa7e:	e9 d9       	rcall	.-3118   	; 0xee52 <fileno>
    fa80:	97 fd       	sbrc	r25, 7
    fa82:	02 c0       	rjmp	.+4      	; 0xfa88 <fclose+0xa>
    fa84:	cb cf       	rjmp	.-106    	; 0xfa1c <close>
    fa86:	08 95       	ret
    fa88:	8f ef       	ldi	r24, 0xFF	; 255
    fa8a:	9f ef       	ldi	r25, 0xFF	; 255
    fa8c:	08 95       	ret

0000fa8e <new_file_descriptor>:
    fa8e:	0f 93       	push	r16
    fa90:	1f 93       	push	r17
    fa92:	cf 93       	push	r28
    fa94:	df 93       	push	r29
    fa96:	e7 eb       	ldi	r30, 0xB7	; 183
    fa98:	fb e1       	ldi	r31, 0x1B	; 27
    fa9a:	c0 e0       	ldi	r28, 0x00	; 0
    fa9c:	d0 e0       	ldi	r29, 0x00	; 0
    fa9e:	21 96       	adiw	r28, 0x01	; 1
    faa0:	c0 31       	cpi	r28, 0x10	; 16
    faa2:	d1 05       	cpc	r29, r1
    faa4:	49 f0       	breq	.+18     	; 0xfab8 <new_file_descriptor+0x2a>
    faa6:	c3 30       	cpi	r28, 0x03	; 3
    faa8:	d1 05       	cpc	r29, r1
    faaa:	24 f0       	brlt	.+8      	; 0xfab4 <new_file_descriptor+0x26>
    faac:	82 81       	ldd	r24, Z+2	; 0x02
    faae:	93 81       	ldd	r25, Z+3	; 0x03
    fab0:	89 2b       	or	r24, r25
    fab2:	59 f0       	breq	.+22     	; 0xfaca <new_file_descriptor+0x3c>
    fab4:	32 96       	adiw	r30, 0x02	; 2
    fab6:	f3 cf       	rjmp	.-26     	; 0xfa9e <new_file_descriptor+0x10>
    fab8:	87 e1       	ldi	r24, 0x17	; 23
    faba:	90 e0       	ldi	r25, 0x00	; 0
    fabc:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    fac0:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    fac4:	8f ef       	ldi	r24, 0xFF	; 255
    fac6:	9f ef       	ldi	r25, 0xFF	; 255
    fac8:	22 c0       	rjmp	.+68     	; 0xfb0e <new_file_descriptor+0x80>
    faca:	61 e0       	ldi	r22, 0x01	; 1
    facc:	70 e0       	ldi	r23, 0x00	; 0
    face:	8e e0       	ldi	r24, 0x0E	; 14
    fad0:	90 e0       	ldi	r25, 0x00	; 0
    fad2:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
    fad6:	8c 01       	movw	r16, r24
    fad8:	89 2b       	or	r24, r25
    fada:	59 f0       	breq	.+22     	; 0xfaf2 <new_file_descriptor+0x64>
    fadc:	61 e0       	ldi	r22, 0x01	; 1
    fade:	70 e0       	ldi	r23, 0x00	; 0
    fae0:	84 e2       	ldi	r24, 0x24	; 36
    fae2:	92 e0       	ldi	r25, 0x02	; 2
    fae4:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
    fae8:	00 97       	sbiw	r24, 0x00	; 0
    faea:	31 f4       	brne	.+12     	; 0xfaf8 <new_file_descriptor+0x6a>
    faec:	c8 01       	movw	r24, r16
    faee:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
    faf2:	8c e0       	ldi	r24, 0x0C	; 12
    faf4:	90 e0       	ldi	r25, 0x00	; 0
    faf6:	e2 cf       	rjmp	.-60     	; 0xfabc <new_file_descriptor+0x2e>
    faf8:	fe 01       	movw	r30, r28
    fafa:	ee 0f       	add	r30, r30
    fafc:	ff 1f       	adc	r31, r31
    fafe:	e9 54       	subi	r30, 0x49	; 73
    fb00:	f4 4e       	sbci	r31, 0xE4	; 228
    fb02:	11 83       	std	Z+1, r17	; 0x01
    fb04:	00 83       	st	Z, r16
    fb06:	f8 01       	movw	r30, r16
    fb08:	95 87       	std	Z+13, r25	; 0x0d
    fb0a:	84 87       	std	Z+12, r24	; 0x0c
    fb0c:	ce 01       	movw	r24, r28
    fb0e:	df 91       	pop	r29
    fb10:	cf 91       	pop	r28
    fb12:	1f 91       	pop	r17
    fb14:	0f 91       	pop	r16
    fb16:	08 95       	ret

0000fb18 <open>:
    fb18:	a0 e0       	ldi	r26, 0x00	; 0
    fb1a:	b0 e0       	ldi	r27, 0x00	; 0
    fb1c:	e2 e9       	ldi	r30, 0x92	; 146
    fb1e:	fd e7       	ldi	r31, 0x7D	; 125
    fb20:	0c 94 39 e5 	jmp	0x1ca72	; 0x1ca72 <__prologue_saves__+0x8>
    fb24:	5c 01       	movw	r10, r24
    fb26:	6b 01       	movw	r12, r22
    fb28:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <errno+0x1>
    fb2c:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <errno>
    fb30:	7b 01       	movw	r14, r22
    fb32:	83 e0       	ldi	r24, 0x03	; 3
    fb34:	e8 22       	and	r14, r24
    fb36:	ff 24       	eor	r15, r15
    fb38:	e2 e0       	ldi	r30, 0x02	; 2
    fb3a:	ee 16       	cp	r14, r30
    fb3c:	f1 04       	cpc	r15, r1
    fb3e:	31 f0       	breq	.+12     	; 0xfb4c <open+0x34>
    fb40:	e1 14       	cp	r14, r1
    fb42:	f1 04       	cpc	r15, r1
    fb44:	31 f0       	breq	.+12     	; 0xfb52 <open+0x3a>
    fb46:	02 e0       	ldi	r16, 0x02	; 2
    fb48:	10 e0       	ldi	r17, 0x00	; 0
    fb4a:	05 c0       	rjmp	.+10     	; 0xfb56 <open+0x3e>
    fb4c:	03 e0       	ldi	r16, 0x03	; 3
    fb4e:	10 e0       	ldi	r17, 0x00	; 0
    fb50:	02 c0       	rjmp	.+4      	; 0xfb56 <open+0x3e>
    fb52:	01 e0       	ldi	r16, 0x01	; 1
    fb54:	10 e0       	ldi	r17, 0x00	; 0
    fb56:	c6 fe       	sbrs	r12, 6
    fb58:	05 c0       	rjmp	.+10     	; 0xfb64 <open+0x4c>
    fb5a:	d1 fe       	sbrs	r13, 1
    fb5c:	02 c0       	rjmp	.+4      	; 0xfb62 <open+0x4a>
    fb5e:	08 60       	ori	r16, 0x08	; 8
    fb60:	01 c0       	rjmp	.+2      	; 0xfb64 <open+0x4c>
    fb62:	00 61       	ori	r16, 0x10	; 16
    fb64:	94 df       	rcall	.-216    	; 0xfa8e <new_file_descriptor>
    fb66:	3c 01       	movw	r6, r24
    fb68:	90 d9       	rcall	.-3296   	; 0xee8a <fileno_to_stream>
    fb6a:	ec 01       	movw	r28, r24
    fb6c:	c3 01       	movw	r24, r6
    fb6e:	20 97       	sbiw	r28, 0x00	; 0
    fb70:	09 f4       	brne	.+2      	; 0xfb74 <open+0x5c>
    fb72:	48 c0       	rjmp	.+144    	; 0xfc04 <open+0xec>
    fb74:	05 dd       	rcall	.-1526   	; 0xf580 <fileno_to_fatfs>
    fb76:	4c 01       	movw	r8, r24
    fb78:	00 97       	sbiw	r24, 0x00	; 0
    fb7a:	59 f4       	brne	.+22     	; 0xfb92 <open+0x7a>
    fb7c:	c3 01       	movw	r24, r6
    fb7e:	19 df       	rcall	.-462    	; 0xf9b2 <free_file_descriptor>
    fb80:	89 e0       	ldi	r24, 0x09	; 9
    fb82:	90 e0       	ldi	r25, 0x00	; 0
    fb84:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    fb88:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    fb8c:	8f ef       	ldi	r24, 0xFF	; 255
    fb8e:	9f ef       	ldi	r25, 0xFF	; 255
    fb90:	5d c0       	rjmp	.+186    	; 0xfc4c <open+0x134>
    fb92:	40 2f       	mov	r20, r16
    fb94:	b5 01       	movw	r22, r10
    fb96:	0e 94 a2 5a 	call	0xb544	; 0xb544 <f_open>
    fb9a:	00 97       	sbiw	r24, 0x00	; 0
    fb9c:	91 f0       	breq	.+36     	; 0xfbc2 <open+0xaa>
    fb9e:	84 31       	cpi	r24, 0x14	; 20
    fba0:	91 05       	cpc	r25, r1
    fba2:	40 f4       	brcc	.+16     	; 0xfbb4 <open+0x9c>
    fba4:	fc 01       	movw	r30, r24
    fba6:	e0 5f       	subi	r30, 0xF0	; 240
    fba8:	f8 4f       	sbci	r31, 0xF8	; 248
    fbaa:	80 81       	ld	r24, Z
    fbac:	08 2e       	mov	r0, r24
    fbae:	00 0c       	add	r0, r0
    fbb0:	99 0b       	sbc	r25, r25
    fbb2:	02 c0       	rjmp	.+4      	; 0xfbb8 <open+0xa0>
    fbb4:	83 e2       	ldi	r24, 0x23	; 35
    fbb6:	90 e0       	ldi	r25, 0x00	; 0
    fbb8:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    fbbc:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    fbc0:	20 c0       	rjmp	.+64     	; 0xfc02 <open+0xea>
    fbc2:	d2 fe       	sbrs	r13, 2
    fbc4:	21 c0       	rjmp	.+66     	; 0xfc08 <open+0xf0>
    fbc6:	f4 01       	movw	r30, r8
    fbc8:	42 85       	ldd	r20, Z+10	; 0x0a
    fbca:	53 85       	ldd	r21, Z+11	; 0x0b
    fbcc:	64 85       	ldd	r22, Z+12	; 0x0c
    fbce:	75 85       	ldd	r23, Z+13	; 0x0d
    fbd0:	c4 01       	movw	r24, r8
    fbd2:	0e 94 69 61 	call	0xc2d2	; 0xc2d2 <f_lseek>
    fbd6:	00 97       	sbiw	r24, 0x00	; 0
    fbd8:	b9 f0       	breq	.+46     	; 0xfc08 <open+0xf0>
    fbda:	84 31       	cpi	r24, 0x14	; 20
    fbdc:	91 05       	cpc	r25, r1
    fbde:	40 f4       	brcc	.+16     	; 0xfbf0 <open+0xd8>
    fbe0:	fc 01       	movw	r30, r24
    fbe2:	e0 5f       	subi	r30, 0xF0	; 240
    fbe4:	f8 4f       	sbci	r31, 0xF8	; 248
    fbe6:	80 81       	ld	r24, Z
    fbe8:	08 2e       	mov	r0, r24
    fbea:	00 0c       	add	r0, r0
    fbec:	99 0b       	sbc	r25, r25
    fbee:	02 c0       	rjmp	.+4      	; 0xfbf4 <open+0xdc>
    fbf0:	83 e2       	ldi	r24, 0x23	; 35
    fbf2:	90 e0       	ldi	r25, 0x00	; 0
    fbf4:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <errno+0x1>
    fbf8:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <errno>
    fbfc:	c4 01       	movw	r24, r8
    fbfe:	0e 94 bf 5f 	call	0xbf7e	; 0xbf7e <f_close>
    fc02:	c3 01       	movw	r24, r6
    fc04:	d6 de       	rcall	.-596    	; 0xf9b2 <free_file_descriptor>
    fc06:	c2 cf       	rjmp	.-124    	; 0xfb8c <open+0x74>
    fc08:	f2 e0       	ldi	r31, 0x02	; 2
    fc0a:	ef 16       	cp	r14, r31
    fc0c:	f1 04       	cpc	r15, r1
    fc0e:	51 f4       	brne	.+20     	; 0xfc24 <open+0x10c>
    fc10:	84 ec       	ldi	r24, 0xC4	; 196
    fc12:	95 e7       	ldi	r25, 0x75	; 117
    fc14:	99 87       	std	Y+9, r25	; 0x09
    fc16:	88 87       	std	Y+8, r24	; 0x08
    fc18:	81 e4       	ldi	r24, 0x41	; 65
    fc1a:	95 e7       	ldi	r25, 0x75	; 117
    fc1c:	9b 87       	std	Y+11, r25	; 0x0b
    fc1e:	8a 87       	std	Y+10, r24	; 0x0a
    fc20:	83 e0       	ldi	r24, 0x03	; 3
    fc22:	12 c0       	rjmp	.+36     	; 0xfc48 <open+0x130>
    fc24:	e1 14       	cp	r14, r1
    fc26:	f1 04       	cpc	r15, r1
    fc28:	41 f4       	brne	.+16     	; 0xfc3a <open+0x122>
    fc2a:	19 86       	std	Y+9, r1	; 0x09
    fc2c:	18 86       	std	Y+8, r1	; 0x08
    fc2e:	81 e4       	ldi	r24, 0x41	; 65
    fc30:	95 e7       	ldi	r25, 0x75	; 117
    fc32:	9b 87       	std	Y+11, r25	; 0x0b
    fc34:	8a 87       	std	Y+10, r24	; 0x0a
    fc36:	81 e0       	ldi	r24, 0x01	; 1
    fc38:	07 c0       	rjmp	.+14     	; 0xfc48 <open+0x130>
    fc3a:	84 ec       	ldi	r24, 0xC4	; 196
    fc3c:	95 e7       	ldi	r25, 0x75	; 117
    fc3e:	99 87       	std	Y+9, r25	; 0x09
    fc40:	88 87       	std	Y+8, r24	; 0x08
    fc42:	1b 86       	std	Y+11, r1	; 0x0b
    fc44:	1a 86       	std	Y+10, r1	; 0x0a
    fc46:	82 e0       	ldi	r24, 0x02	; 2
    fc48:	8b 83       	std	Y+3, r24	; 0x03
    fc4a:	c3 01       	movw	r24, r6
    fc4c:	cd b7       	in	r28, 0x3d	; 61
    fc4e:	de b7       	in	r29, 0x3e	; 62
    fc50:	ee e0       	ldi	r30, 0x0E	; 14
    fc52:	0c 94 55 e5 	jmp	0x1caaa	; 0x1caaa <__epilogue_restores__+0x8>

0000fc56 <posix_fopen_modes_to_open>:
    fc56:	cf 93       	push	r28
    fc58:	df 93       	push	r29
    fc5a:	ec 01       	movw	r28, r24
    fc5c:	61 e4       	ldi	r22, 0x41	; 65
    fc5e:	77 e0       	ldi	r23, 0x07	; 7
    fc60:	0e 94 1c 32 	call	0x6438	; 0x6438 <strcmp>
    fc64:	00 97       	sbiw	r24, 0x00	; 0
    fc66:	09 f4       	brne	.+2      	; 0xfc6a <posix_fopen_modes_to_open+0x14>
    fc68:	5d c0       	rjmp	.+186    	; 0xfd24 <posix_fopen_modes_to_open+0xce>
    fc6a:	66 e8       	ldi	r22, 0x86	; 134
    fc6c:	78 e0       	ldi	r23, 0x08	; 8
    fc6e:	ce 01       	movw	r24, r28
    fc70:	0e 94 1c 32 	call	0x6438	; 0x6438 <strcmp>
    fc74:	00 97       	sbiw	r24, 0x00	; 0
    fc76:	09 f4       	brne	.+2      	; 0xfc7a <posix_fopen_modes_to_open+0x24>
    fc78:	55 c0       	rjmp	.+170    	; 0xfd24 <posix_fopen_modes_to_open+0xce>
    fc7a:	69 e8       	ldi	r22, 0x89	; 137
    fc7c:	78 e0       	ldi	r23, 0x08	; 8
    fc7e:	ce 01       	movw	r24, r28
    fc80:	0e 94 1c 32 	call	0x6438	; 0x6438 <strcmp>
    fc84:	89 2b       	or	r24, r25
    fc86:	09 f4       	brne	.+2      	; 0xfc8a <posix_fopen_modes_to_open+0x34>
    fc88:	42 c0       	rjmp	.+132    	; 0xfd0e <posix_fopen_modes_to_open+0xb8>
    fc8a:	6c e8       	ldi	r22, 0x8C	; 140
    fc8c:	78 e0       	ldi	r23, 0x08	; 8
    fc8e:	ce 01       	movw	r24, r28
    fc90:	0e 94 1c 32 	call	0x6438	; 0x6438 <strcmp>
    fc94:	89 2b       	or	r24, r25
    fc96:	d9 f1       	breq	.+118    	; 0xfd0e <posix_fopen_modes_to_open+0xb8>
    fc98:	60 e9       	ldi	r22, 0x90	; 144
    fc9a:	78 e0       	ldi	r23, 0x08	; 8
    fc9c:	ce 01       	movw	r24, r28
    fc9e:	0e 94 1c 32 	call	0x6438	; 0x6438 <strcmp>
    fca2:	89 2b       	or	r24, r25
    fca4:	a1 f1       	breq	.+104    	; 0xfd0e <posix_fopen_modes_to_open+0xb8>
    fca6:	65 e4       	ldi	r22, 0x45	; 69
    fca8:	7a e0       	ldi	r23, 0x0A	; 10
    fcaa:	ce 01       	movw	r24, r28
    fcac:	0e 94 1c 32 	call	0x6438	; 0x6438 <strcmp>
    fcb0:	89 2b       	or	r24, r25
    fcb2:	81 f1       	breq	.+96     	; 0xfd14 <posix_fopen_modes_to_open+0xbe>
    fcb4:	64 e9       	ldi	r22, 0x94	; 148
    fcb6:	78 e0       	ldi	r23, 0x08	; 8
    fcb8:	ce 01       	movw	r24, r28
    fcba:	0e 94 1c 32 	call	0x6438	; 0x6438 <strcmp>
    fcbe:	89 2b       	or	r24, r25
    fcc0:	49 f1       	breq	.+82     	; 0xfd14 <posix_fopen_modes_to_open+0xbe>
    fcc2:	67 e9       	ldi	r22, 0x97	; 151
    fcc4:	78 e0       	ldi	r23, 0x08	; 8
    fcc6:	ce 01       	movw	r24, r28
    fcc8:	0e 94 1c 32 	call	0x6438	; 0x6438 <strcmp>
    fccc:	89 2b       	or	r24, r25
    fcce:	29 f1       	breq	.+74     	; 0xfd1a <posix_fopen_modes_to_open+0xc4>
    fcd0:	6a e9       	ldi	r22, 0x9A	; 154
    fcd2:	78 e0       	ldi	r23, 0x08	; 8
    fcd4:	ce 01       	movw	r24, r28
    fcd6:	0e 94 1c 32 	call	0x6438	; 0x6438 <strcmp>
    fcda:	89 2b       	or	r24, r25
    fcdc:	f1 f0       	breq	.+60     	; 0xfd1a <posix_fopen_modes_to_open+0xc4>
    fcde:	6e e9       	ldi	r22, 0x9E	; 158
    fce0:	78 e0       	ldi	r23, 0x08	; 8
    fce2:	ce 01       	movw	r24, r28
    fce4:	0e 94 1c 32 	call	0x6438	; 0x6438 <strcmp>
    fce8:	89 2b       	or	r24, r25
    fcea:	b9 f0       	breq	.+46     	; 0xfd1a <posix_fopen_modes_to_open+0xc4>
    fcec:	67 e7       	ldi	r22, 0x77	; 119
    fcee:	72 e1       	ldi	r23, 0x12	; 18
    fcf0:	ce 01       	movw	r24, r28
    fcf2:	0e 94 1c 32 	call	0x6438	; 0x6438 <strcmp>
    fcf6:	89 2b       	or	r24, r25
    fcf8:	99 f0       	breq	.+38     	; 0xfd20 <posix_fopen_modes_to_open+0xca>
    fcfa:	62 ea       	ldi	r22, 0xA2	; 162
    fcfc:	78 e0       	ldi	r23, 0x08	; 8
    fcfe:	ce 01       	movw	r24, r28
    fd00:	0e 94 1c 32 	call	0x6438	; 0x6438 <strcmp>
    fd04:	89 2b       	or	r24, r25
    fd06:	61 f0       	breq	.+24     	; 0xfd20 <posix_fopen_modes_to_open+0xca>
    fd08:	8f ef       	ldi	r24, 0xFF	; 255
    fd0a:	9f ef       	ldi	r25, 0xFF	; 255
    fd0c:	0b c0       	rjmp	.+22     	; 0xfd24 <posix_fopen_modes_to_open+0xce>
    fd0e:	82 e0       	ldi	r24, 0x02	; 2
    fd10:	92 e0       	ldi	r25, 0x02	; 2
    fd12:	08 c0       	rjmp	.+16     	; 0xfd24 <posix_fopen_modes_to_open+0xce>
    fd14:	81 e4       	ldi	r24, 0x41	; 65
    fd16:	92 e0       	ldi	r25, 0x02	; 2
    fd18:	05 c0       	rjmp	.+10     	; 0xfd24 <posix_fopen_modes_to_open+0xce>
    fd1a:	82 e4       	ldi	r24, 0x42	; 66
    fd1c:	92 e0       	ldi	r25, 0x02	; 2
    fd1e:	02 c0       	rjmp	.+4      	; 0xfd24 <posix_fopen_modes_to_open+0xce>
    fd20:	81 e4       	ldi	r24, 0x41	; 65
    fd22:	94 e0       	ldi	r25, 0x04	; 4
    fd24:	df 91       	pop	r29
    fd26:	cf 91       	pop	r28
    fd28:	08 95       	ret

0000fd2a <fopen>:
    fd2a:	cf 93       	push	r28
    fd2c:	df 93       	push	r29
    fd2e:	ec 01       	movw	r28, r24
    fd30:	cb 01       	movw	r24, r22
    fd32:	91 df       	rcall	.-222    	; 0xfc56 <posix_fopen_modes_to_open>
    fd34:	bc 01       	movw	r22, r24
    fd36:	ce 01       	movw	r24, r28
    fd38:	ef de       	rcall	.-546    	; 0xfb18 <open>
    fd3a:	a7 d8       	rcall	.-3762   	; 0xee8a <fileno_to_stream>
    fd3c:	df 91       	pop	r29
    fd3e:	cf 91       	pop	r28
    fd40:	08 95       	ret

0000fd42 <fprintf>:
    fd42:	a8 e0       	ldi	r26, 0x08	; 8
    fd44:	b0 e0       	ldi	r27, 0x00	; 0
    fd46:	e7 ea       	ldi	r30, 0xA7	; 167
    fd48:	fe e7       	ldi	r31, 0x7E	; 126
    fd4a:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
    fd4e:	8d ea       	ldi	r24, 0xAD	; 173
    fd50:	96 e7       	ldi	r25, 0x76	; 118
    fd52:	9a 83       	std	Y+2, r25	; 0x02
    fd54:	89 83       	std	Y+1, r24	; 0x01
    fd56:	18 86       	std	Y+8, r1	; 0x08
    fd58:	1f 82       	std	Y+7, r1	; 0x07
    fd5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    fd5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    fd5e:	9c 83       	std	Y+4, r25	; 0x04
    fd60:	8b 83       	std	Y+3, r24	; 0x03
    fd62:	4f 85       	ldd	r20, Y+15	; 0x0f
    fd64:	58 89       	ldd	r21, Y+16	; 0x10
    fd66:	60 e8       	ldi	r22, 0x80	; 128
    fd68:	9e 01       	movw	r18, r28
    fd6a:	2f 5e       	subi	r18, 0xEF	; 239
    fd6c:	3f 4f       	sbci	r19, 0xFF	; 255
    fd6e:	ce 01       	movw	r24, r28
    fd70:	01 96       	adiw	r24, 0x01	; 1
    fd72:	0e 94 48 42 	call	0x8490	; 0x8490 <_printf_fn>
    fd76:	8f 81       	ldd	r24, Y+7	; 0x07
    fd78:	98 85       	ldd	r25, Y+8	; 0x08
    fd7a:	28 96       	adiw	r28, 0x08	; 8
    fd7c:	e2 e0       	ldi	r30, 0x02	; 2
    fd7e:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

0000fd82 <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    fd82:	cf 93       	push	r28
    fd84:	df 93       	push	r29
    fd86:	ec 01       	movw	r28, r24
    fd88:	88 ea       	ldi	r24, 0xA8	; 168
    fd8a:	9e e0       	ldi	r25, 0x0E	; 14
    fd8c:	1f 92       	push	r1
    fd8e:	9f 93       	push	r25
    fd90:	8f 93       	push	r24
    fd92:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    fd96:	0f 90       	pop	r0
    fd98:	0f 90       	pop	r0
    fd9a:	0f 90       	pop	r0
    fd9c:	cd 2b       	or	r28, r29
    fd9e:	51 f0       	breq	.+20     	; 0xfdb4 <posix_help+0x32>
    fda0:	88 ee       	ldi	r24, 0xE8	; 232
    fda2:	9d e0       	ldi	r25, 0x0D	; 13
    fda4:	1f 92       	push	r1
    fda6:	9f 93       	push	r25
    fda8:	8f 93       	push	r24
    fdaa:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    fdae:	0f 90       	pop	r0
    fdb0:	0f 90       	pop	r0
    fdb2:	0f 90       	pop	r0
    fdb4:	df 91       	pop	r29
    fdb6:	cf 91       	pop	r28
    fdb8:	08 95       	ret

0000fdba <copy>:
    fdba:	4f 92       	push	r4
    fdbc:	5f 92       	push	r5
    fdbe:	6f 92       	push	r6
    fdc0:	8f 92       	push	r8
    fdc2:	9f 92       	push	r9
    fdc4:	af 92       	push	r10
    fdc6:	bf 92       	push	r11
    fdc8:	cf 92       	push	r12
    fdca:	df 92       	push	r13
    fdcc:	ef 92       	push	r14
    fdce:	ff 92       	push	r15
    fdd0:	0f 93       	push	r16
    fdd2:	1f 93       	push	r17
    fdd4:	cf 93       	push	r28
    fdd6:	df 93       	push	r29
    fdd8:	18 2f       	mov	r17, r24
    fdda:	09 2f       	mov	r16, r25
    fddc:	eb 01       	movw	r28, r22
    fdde:	9f 93       	push	r25
    fde0:	8f 93       	push	r24
    fde2:	8b eb       	ldi	r24, 0xBB	; 187
    fde4:	9d e0       	ldi	r25, 0x0D	; 13
    fde6:	1f 92       	push	r1
    fde8:	9f 93       	push	r25
    fdea:	8f 93       	push	r24
    fdec:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    fdf0:	66 e8       	ldi	r22, 0x86	; 134
    fdf2:	78 e0       	ldi	r23, 0x08	; 8
    fdf4:	81 2f       	mov	r24, r17
    fdf6:	90 2f       	mov	r25, r16
    fdf8:	98 df       	rcall	.-208    	; 0xfd2a <fopen>
    fdfa:	7c 01       	movw	r14, r24
    fdfc:	0f 90       	pop	r0
    fdfe:	0f 90       	pop	r0
    fe00:	0f 90       	pop	r0
    fe02:	0f 90       	pop	r0
    fe04:	0f 90       	pop	r0
    fe06:	89 2b       	or	r24, r25
    fe08:	51 f4       	brne	.+20     	; 0xfe1e <copy+0x64>
    fe0a:	0f 93       	push	r16
    fe0c:	1f 93       	push	r17
    fe0e:	8b ea       	ldi	r24, 0xAB	; 171
    fe10:	9d e0       	ldi	r25, 0x0D	; 13
    fe12:	1f 92       	push	r1
    fe14:	9f 93       	push	r25
    fe16:	8f 93       	push	r24
    fe18:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    fe1c:	21 c0       	rjmp	.+66     	; 0xfe60 <copy+0xa6>
    fe1e:	df 93       	push	r29
    fe20:	cf 93       	push	r28
    fe22:	8e e9       	ldi	r24, 0x9E	; 158
    fe24:	9d e0       	ldi	r25, 0x0D	; 13
    fe26:	1f 92       	push	r1
    fe28:	9f 93       	push	r25
    fe2a:	8f 93       	push	r24
    fe2c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    fe30:	64 e9       	ldi	r22, 0x94	; 148
    fe32:	78 e0       	ldi	r23, 0x08	; 8
    fe34:	ce 01       	movw	r24, r28
    fe36:	79 df       	rcall	.-270    	; 0xfd2a <fopen>
    fe38:	8c 01       	movw	r16, r24
    fe3a:	0f 90       	pop	r0
    fe3c:	0f 90       	pop	r0
    fe3e:	0f 90       	pop	r0
    fe40:	0f 90       	pop	r0
    fe42:	0f 90       	pop	r0
    fe44:	89 2b       	or	r24, r25
    fe46:	b1 f4       	brne	.+44     	; 0xfe74 <copy+0xba>
    fe48:	df 93       	push	r29
    fe4a:	cf 93       	push	r28
    fe4c:	8e e8       	ldi	r24, 0x8E	; 142
    fe4e:	9d e0       	ldi	r25, 0x0D	; 13
    fe50:	1f 92       	push	r1
    fe52:	9f 93       	push	r25
    fe54:	8f 93       	push	r24
    fe56:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    fe5a:	80 e0       	ldi	r24, 0x00	; 0
    fe5c:	90 e0       	ldi	r25, 0x00	; 0
    fe5e:	0f de       	rcall	.-994    	; 0xfa7e <fclose>
    fe60:	0f 90       	pop	r0
    fe62:	0f 90       	pop	r0
    fe64:	0f 90       	pop	r0
    fe66:	0f 90       	pop	r0
    fe68:	0f 90       	pop	r0
    fe6a:	60 e0       	ldi	r22, 0x00	; 0
    fe6c:	70 e0       	ldi	r23, 0x00	; 0
    fe6e:	80 e0       	ldi	r24, 0x00	; 0
    fe70:	90 e0       	ldi	r25, 0x00	; 0
    fe72:	73 c0       	rjmp	.+230    	; 0xff5a <__DATA_REGION_LENGTH__+0x5a>
    fe74:	61 e0       	ldi	r22, 0x01	; 1
    fe76:	70 e0       	ldi	r23, 0x00	; 0
    fe78:	80 e0       	ldi	r24, 0x00	; 0
    fe7a:	92 e0       	ldi	r25, 0x02	; 2
    fe7c:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
    fe80:	6c 01       	movw	r12, r24
    fe82:	89 2b       	or	r24, r25
    fe84:	29 f4       	brne	.+10     	; 0xfe90 <copy+0xd6>
    fe86:	c7 01       	movw	r24, r14
    fe88:	fa dd       	rcall	.-1036   	; 0xfa7e <fclose>
    fe8a:	c8 01       	movw	r24, r16
    fe8c:	f8 dd       	rcall	.-1040   	; 0xfa7e <fclose>
    fe8e:	ed cf       	rjmp	.-38     	; 0xfe6a <copy+0xb0>
    fe90:	81 e8       	ldi	r24, 0x81	; 129
    fe92:	9d e0       	ldi	r25, 0x0D	; 13
    fe94:	1f 92       	push	r1
    fe96:	9f 93       	push	r25
    fe98:	8f 93       	push	r24
    fe9a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    fe9e:	0f 90       	pop	r0
    fea0:	0f 90       	pop	r0
    fea2:	0f 90       	pop	r0
    fea4:	81 2c       	mov	r8, r1
    fea6:	91 2c       	mov	r9, r1
    fea8:	54 01       	movw	r10, r8
    feaa:	85 e6       	ldi	r24, 0x65	; 101
    feac:	9d e0       	ldi	r25, 0x0D	; 13
    feae:	2c 01       	movw	r4, r24
    feb0:	97 01       	movw	r18, r14
    feb2:	40 e0       	ldi	r20, 0x00	; 0
    feb4:	52 e0       	ldi	r21, 0x02	; 2
    feb6:	61 e0       	ldi	r22, 0x01	; 1
    feb8:	70 e0       	ldi	r23, 0x00	; 0
    feba:	c6 01       	movw	r24, r12
    febc:	8c dc       	rcall	.-1768   	; 0xf7d6 <fread>
    febe:	ec 01       	movw	r28, r24
    fec0:	18 16       	cp	r1, r24
    fec2:	19 06       	cpc	r1, r25
    fec4:	74 f5       	brge	.+92     	; 0xff22 <__DATA_REGION_LENGTH__+0x22>
    fec6:	98 01       	movw	r18, r16
    fec8:	ae 01       	movw	r20, r28
    feca:	61 e0       	ldi	r22, 0x01	; 1
    fecc:	70 e0       	ldi	r23, 0x00	; 0
    fece:	c6 01       	movw	r24, r12
    fed0:	54 dd       	rcall	.-1368   	; 0xf97a <fwrite>
    fed2:	8c 17       	cp	r24, r28
    fed4:	9d 07       	cpc	r25, r29
    fed6:	5c f4       	brge	.+22     	; 0xfeee <copy+0x134>
    fed8:	84 e7       	ldi	r24, 0x74	; 116
    feda:	9d e0       	ldi	r25, 0x0D	; 13
    fedc:	1f 92       	push	r1
    fede:	9f 93       	push	r25
    fee0:	8f 93       	push	r24
    fee2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    fee6:	0f 90       	pop	r0
    fee8:	0f 90       	pop	r0
    feea:	0f 90       	pop	r0
    feec:	1a c0       	rjmp	.+52     	; 0xff22 <__DATA_REGION_LENGTH__+0x22>
    feee:	ce 01       	movw	r24, r28
    fef0:	dd 0f       	add	r29, r29
    fef2:	aa 0b       	sbc	r26, r26
    fef4:	bb 0b       	sbc	r27, r27
    fef6:	88 0e       	add	r8, r24
    fef8:	99 1e       	adc	r9, r25
    fefa:	aa 1e       	adc	r10, r26
    fefc:	bb 1e       	adc	r11, r27
    fefe:	bf 92       	push	r11
    ff00:	af 92       	push	r10
    ff02:	9f 92       	push	r9
    ff04:	8f 92       	push	r8
    ff06:	1f 92       	push	r1
    ff08:	5f 92       	push	r5
    ff0a:	4f 92       	push	r4
    ff0c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    ff10:	8d b7       	in	r24, 0x3d	; 61
    ff12:	9e b7       	in	r25, 0x3e	; 62
    ff14:	07 96       	adiw	r24, 0x07	; 7
    ff16:	0f b6       	in	r0, 0x3f	; 63
    ff18:	f8 94       	cli
    ff1a:	9e bf       	out	0x3e, r25	; 62
    ff1c:	0f be       	out	0x3f, r0	; 63
    ff1e:	8d bf       	out	0x3d, r24	; 61
    ff20:	c7 cf       	rjmp	.-114    	; 0xfeb0 <copy+0xf6>
    ff22:	bf 92       	push	r11
    ff24:	af 92       	push	r10
    ff26:	9f 92       	push	r9
    ff28:	8f 92       	push	r8
    ff2a:	82 e5       	ldi	r24, 0x52	; 82
    ff2c:	9d e0       	ldi	r25, 0x0D	; 13
    ff2e:	1f 92       	push	r1
    ff30:	9f 93       	push	r25
    ff32:	8f 93       	push	r24
    ff34:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    ff38:	c6 01       	movw	r24, r12
    ff3a:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
    ff3e:	c7 01       	movw	r24, r14
    ff40:	9e dd       	rcall	.-1220   	; 0xfa7e <fclose>
    ff42:	c8 01       	movw	r24, r16
    ff44:	9c dd       	rcall	.-1224   	; 0xfa7e <fclose>
    ff46:	8d b7       	in	r24, 0x3d	; 61
    ff48:	9e b7       	in	r25, 0x3e	; 62
    ff4a:	07 96       	adiw	r24, 0x07	; 7
    ff4c:	0f b6       	in	r0, 0x3f	; 63
    ff4e:	f8 94       	cli
    ff50:	9e bf       	out	0x3e, r25	; 62
    ff52:	0f be       	out	0x3f, r0	; 63
    ff54:	8d bf       	out	0x3d, r24	; 61
    ff56:	b4 01       	movw	r22, r8
    ff58:	c5 01       	movw	r24, r10
    ff5a:	df 91       	pop	r29
    ff5c:	cf 91       	pop	r28
    ff5e:	1f 91       	pop	r17
    ff60:	0f 91       	pop	r16
    ff62:	ff 90       	pop	r15
    ff64:	ef 90       	pop	r14
    ff66:	df 90       	pop	r13
    ff68:	cf 90       	pop	r12
    ff6a:	bf 90       	pop	r11
    ff6c:	af 90       	pop	r10
    ff6e:	9f 90       	pop	r9
    ff70:	8f 90       	pop	r8
    ff72:	6f 90       	pop	r6
    ff74:	5f 90       	pop	r5
    ff76:	4f 90       	pop	r4
    ff78:	08 95       	ret

0000ff7a <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    ff7a:	cf 93       	push	r28
    ff7c:	df 93       	push	r29
    int c;
    if(count >= _pagesize)
    ff7e:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <_pagesize>
    ff82:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <_pagesize+0x1>
    ff86:	82 17       	cp	r24, r18
    ff88:	93 07       	cpc	r25, r19
    ff8a:	3c f1       	brlt	.+78     	; 0xffda <testpage+0x60>
    {
        printf("More..");
    ff8c:	8b e4       	ldi	r24, 0x4B	; 75
    ff8e:	9d e0       	ldi	r25, 0x0D	; 13
    ff90:	1f 92       	push	r1
    ff92:	9f 93       	push	r25
    ff94:	8f 93       	push	r24
    ff96:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    ff9a:	0e 94 ba 76 	call	0xed74	; 0xed74 <getchar>
    ff9e:	ec 01       	movw	r28, r24
        printf("\r");
    ffa0:	89 e4       	ldi	r24, 0x49	; 73
    ffa2:	9d e0       	ldi	r25, 0x0D	; 13
    ffa4:	1f 92       	push	r1
    ffa6:	9f 93       	push	r25
    ffa8:	8f 93       	push	r24
    ffaa:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        if(c == 'q')
    ffae:	0f 90       	pop	r0
    ffb0:	0f 90       	pop	r0
    ffb2:	0f 90       	pop	r0
    ffb4:	0f 90       	pop	r0
    ffb6:	0f 90       	pop	r0
    ffb8:	0f 90       	pop	r0
    ffba:	c1 37       	cpi	r28, 0x71	; 113
    ffbc:	d1 05       	cpc	r29, r1
    ffbe:	41 f0       	breq	.+16     	; 0xffd0 <testpage+0x56>
            return(-1);         // quit
        if(c == '\n')
    ffc0:	2a 97       	sbiw	r28, 0x0a	; 10
    ffc2:	49 f4       	brne	.+18     	; 0xffd6 <testpage+0x5c>
            return(_pagesize-1); // single line
    ffc4:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_pagesize>
    ffc8:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_pagesize+0x1>
    ffcc:	01 97       	sbiw	r24, 0x01	; 1
    ffce:	05 c0       	rjmp	.+10     	; 0xffda <testpage+0x60>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);         // quit
    ffd0:	8f ef       	ldi	r24, 0xFF	; 255
    ffd2:	9f ef       	ldi	r25, 0xFF	; 255
    ffd4:	02 c0       	rjmp	.+4      	; 0xffda <testpage+0x60>
        if(c == '\n')
            return(_pagesize-1); // single line
        return(0);              // new page
    ffd6:	80 e0       	ldi	r24, 0x00	; 0
    ffd8:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    ffda:	df 91       	pop	r29
    ffdc:	cf 91       	pop	r28
    ffde:	08 95       	ret

0000ffe0 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
    ffe0:	a0 e0       	ldi	r26, 0x00	; 0
    ffe2:	b1 e0       	ldi	r27, 0x01	; 1
    ffe4:	e6 ef       	ldi	r30, 0xF6	; 246
    ffe6:	ff e7       	ldi	r31, 0x7F	; 127
    ffe8:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__prologue_saves__+0xc>
    ffec:	18 2f       	mov	r17, r24
    ffee:	09 2f       	mov	r16, r25
    fff0:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    fff2:	66 e8       	ldi	r22, 0x86	; 134
    fff4:	78 e0       	ldi	r23, 0x08	; 8
    fff6:	99 de       	rcall	.-718    	; 0xfd2a <fopen>
    fff8:	7c 01       	movw	r14, r24
    if (!fp)
    fffa:	89 2b       	or	r24, r25
    fffc:	41 f0       	breq	.+16     	; 0x1000e <__EEPROM_REGION_LENGTH__+0xe>
    fffe:	c1 2c       	mov	r12, r1
   10000:	d1 2c       	mov	r13, r1
   10002:	a1 2c       	mov	r10, r1
   10004:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10006:	8e 01       	movw	r16, r28
   10008:	0f 5f       	subi	r16, 0xFF	; 255
   1000a:	1f 4f       	sbci	r17, 0xFF	; 255
   1000c:	24 c0       	rjmp	.+72     	; 0x10056 <__EEPROM_REGION_LENGTH__+0x56>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   1000e:	0f 93       	push	r16
   10010:	1f 93       	push	r17
   10012:	84 ed       	ldi	r24, 0xD4	; 212
   10014:	9d e0       	ldi	r25, 0x0D	; 13
   10016:	1f 92       	push	r1
   10018:	9f 93       	push	r25
   1001a:	8f 93       	push	r24
   1001c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(0);
   10020:	0f 90       	pop	r0
   10022:	0f 90       	pop	r0
   10024:	0f 90       	pop	r0
   10026:	0f 90       	pop	r0
   10028:	0f 90       	pop	r0
   1002a:	c1 2c       	mov	r12, r1
   1002c:	d1 2c       	mov	r13, r1
   1002e:	76 01       	movw	r14, r12
   10030:	3e c0       	rjmp	.+124    	; 0x100ae <__EEPROM_REGION_LENGTH__+0xae>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   10032:	c8 01       	movw	r24, r16
   10034:	0e 94 02 32 	call	0x6404	; 0x6404 <trim_tail>
        size += strlen(line);
   10038:	f8 01       	movw	r30, r16
   1003a:	01 90       	ld	r0, Z+
   1003c:	00 20       	and	r0, r0
   1003e:	e9 f7       	brne	.-6      	; 0x1003a <__EEPROM_REGION_LENGTH__+0x3a>
   10040:	31 97       	sbiw	r30, 0x01	; 1
   10042:	e0 1b       	sub	r30, r16
   10044:	f1 0b       	sbc	r31, r17
   10046:	ce 0e       	add	r12, r30
   10048:	df 1e       	adc	r13, r31
        puts(line);
   1004a:	c8 01       	movw	r24, r16
   1004c:	0e 94 12 77 	call	0xee24	; 0xee24 <puts>
        if(dopage)
   10050:	81 14       	cp	r8, r1
   10052:	91 04       	cpc	r9, r1
   10054:	49 f4       	brne	.+18     	; 0x10068 <__EEPROM_REGION_LENGTH__+0x68>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10056:	a7 01       	movw	r20, r14
   10058:	6e ef       	ldi	r22, 0xFE	; 254
   1005a:	70 e0       	ldi	r23, 0x00	; 0
   1005c:	c8 01       	movw	r24, r16
   1005e:	0e 94 c6 76 	call	0xed8c	; 0xed8c <fgets>
   10062:	89 2b       	or	r24, r25
   10064:	31 f7       	brne	.-52     	; 0x10032 <__EEPROM_REGION_LENGTH__+0x32>
   10066:	06 c0       	rjmp	.+12     	; 0x10074 <__EEPROM_REGION_LENGTH__+0x74>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   10068:	c5 01       	movw	r24, r10
   1006a:	01 96       	adiw	r24, 0x01	; 1
   1006c:	86 df       	rcall	.-244    	; 0xff7a <testpage>
   1006e:	5c 01       	movw	r10, r24
            if(count < 0)
   10070:	97 ff       	sbrs	r25, 7
   10072:	f1 cf       	rjmp	.-30     	; 0x10056 <__EEPROM_REGION_LENGTH__+0x56>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   10074:	82 ed       	ldi	r24, 0xD2	; 210
   10076:	9d e0       	ldi	r25, 0x0D	; 13
   10078:	1f 92       	push	r1
   1007a:	9f 93       	push	r25
   1007c:	8f 93       	push	r24
   1007e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    fclose(fp);
   10082:	c7 01       	movw	r24, r14
   10084:	fc dc       	rcall	.-1544   	; 0xfa7e <fclose>
    printf("%ld bytes\n", (long)size);
   10086:	0d 2c       	mov	r0, r13
   10088:	00 0c       	add	r0, r0
   1008a:	ee 08       	sbc	r14, r14
   1008c:	ff 08       	sbc	r15, r15
   1008e:	ff 92       	push	r15
   10090:	ef 92       	push	r14
   10092:	df 92       	push	r13
   10094:	cf 92       	push	r12
   10096:	87 ec       	ldi	r24, 0xC7	; 199
   10098:	9d e0       	ldi	r25, 0x0D	; 13
   1009a:	1f 92       	push	r1
   1009c:	9f 93       	push	r25
   1009e:	8f 93       	push	r24
   100a0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    return(size);
   100a4:	0f b6       	in	r0, 0x3f	; 63
   100a6:	f8 94       	cli
   100a8:	de bf       	out	0x3e, r29	; 62
   100aa:	0f be       	out	0x3f, r0	; 63
   100ac:	cd bf       	out	0x3d, r28	; 61
}
   100ae:	c7 01       	movw	r24, r14
   100b0:	b6 01       	movw	r22, r12
   100b2:	d3 95       	inc	r29
   100b4:	ec e0       	ldi	r30, 0x0C	; 12
   100b6:	0c 94 57 e5 	jmp	0x1caae	; 0x1caae <__epilogue_restores__+0xc>

000100ba <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   100ba:	4f 92       	push	r4
   100bc:	5f 92       	push	r5
   100be:	6f 92       	push	r6
   100c0:	7f 92       	push	r7
   100c2:	af 92       	push	r10
   100c4:	bf 92       	push	r11
   100c6:	cf 92       	push	r12
   100c8:	df 92       	push	r13
   100ca:	ef 92       	push	r14
   100cc:	ff 92       	push	r15
   100ce:	0f 93       	push	r16
   100d0:	1f 93       	push	r17
   100d2:	cf 93       	push	r28
   100d4:	df 93       	push	r29
   100d6:	cd b7       	in	r28, 0x3d	; 61
   100d8:	de b7       	in	r29, 0x3e	; 62
   100da:	ec 97       	sbiw	r28, 0x3c	; 60
   100dc:	0f b6       	in	r0, 0x3f	; 63
   100de:	f8 94       	cli
   100e0:	de bf       	out	0x3e, r29	; 62
   100e2:	0f be       	out	0x3f, r0	; 63
   100e4:	cd bf       	out	0x3d, r28	; 61
   100e6:	8c 01       	movw	r16, r24
   100e8:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
   100ea:	be 01       	movw	r22, r28
   100ec:	6f 5f       	subi	r22, 0xFF	; 255
   100ee:	7f 4f       	sbci	r23, 0xFF	; 255
   100f0:	30 d9       	rcall	.-3488   	; 0xf352 <stat>
   100f2:	01 96       	adiw	r24, 0x01	; 1
   100f4:	89 f4       	brne	.+34     	; 0x10118 <ls_info+0x5e>
    {
        printf("can not stat: %s\n", name);
   100f6:	1f 93       	push	r17
   100f8:	0f 93       	push	r16
   100fa:	87 e3       	ldi	r24, 0x37	; 55
   100fc:	9d e0       	ldi	r25, 0x0D	; 13
   100fe:	1f 92       	push	r1
   10100:	9f 93       	push	r25
   10102:	8f 93       	push	r24
   10104:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(0);
   10108:	0f 90       	pop	r0
   1010a:	0f 90       	pop	r0
   1010c:	0f 90       	pop	r0
   1010e:	0f 90       	pop	r0
   10110:	0f 90       	pop	r0
   10112:	80 e0       	ldi	r24, 0x00	; 0
   10114:	90 e0       	ldi	r25, 0x00	; 0
   10116:	79 c0       	rjmp	.+242    	; 0x1020a <ls_info+0x150>
    }

    if(!verbose)
   10118:	ef 28       	or	r14, r15
   1011a:	91 f4       	brne	.+36     	; 0x10140 <ls_info+0x86>
    {
        printf("%s\n",basename(name));
   1011c:	c8 01       	movw	r24, r16
   1011e:	0e 94 7f 77 	call	0xeefe	; 0xeefe <basename>
   10122:	9f 93       	push	r25
   10124:	8f 93       	push	r24
   10126:	83 e3       	ldi	r24, 0x33	; 51
   10128:	9d e0       	ldi	r25, 0x0D	; 13
   1012a:	1f 92       	push	r1
   1012c:	9f 93       	push	r25
   1012e:	8f 93       	push	r24
   10130:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(1);
   10134:	0f 90       	pop	r0
   10136:	0f 90       	pop	r0
   10138:	0f 90       	pop	r0
   1013a:	0f 90       	pop	r0
   1013c:	0f 90       	pop	r0
   1013e:	63 c0       	rjmp	.+198    	; 0x10206 <ls_info+0x14c>
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   10140:	49 84       	ldd	r4, Y+9	; 0x09
   10142:	5a 84       	ldd	r5, Y+10	; 0x0a
   10144:	6b 84       	ldd	r6, Y+11	; 0x0b
   10146:	7c 84       	ldd	r7, Y+12	; 0x0c
   10148:	d3 01       	movw	r26, r6
   1014a:	c2 01       	movw	r24, r4
   1014c:	88 27       	eor	r24, r24
   1014e:	90 7f       	andi	r25, 0xF0	; 240
   10150:	aa 27       	eor	r26, r26
   10152:	bb 27       	eor	r27, r27
   10154:	81 15       	cp	r24, r1
   10156:	90 44       	sbci	r25, 0x40	; 64
   10158:	a1 05       	cpc	r26, r1
   1015a:	b1 05       	cpc	r27, r1
   1015c:	11 f4       	brne	.+4      	; 0x10162 <ls_info+0xa8>
        *p++ = 'd';
   1015e:	84 e6       	ldi	r24, 0x64	; 100
   10160:	01 c0       	rjmp	.+2      	; 0x10164 <ls_info+0xaa>
    else
        *p++ = '-';
   10162:	8d e2       	ldi	r24, 0x2D	; 45
   10164:	89 ab       	std	Y+49, r24	; 0x31
   10166:	fe 01       	movw	r30, r28
   10168:	f1 96       	adiw	r30, 0x31	; 49
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   1016a:	e1 2c       	mov	r14, r1
   1016c:	ff 24       	eor	r15, r15
   1016e:	f3 94       	inc	r15
   10170:	20 e0       	ldi	r18, 0x00	; 0
   10172:	30 e0       	ldi	r19, 0x00	; 0
   10174:	5f 01       	movw	r10, r30
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   10176:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   10178:	53 e0       	ldi	r21, 0x03	; 3
   1017a:	c5 2e       	mov	r12, r21
   1017c:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
   1017e:	c7 01       	movw	r24, r14
   10180:	a0 e0       	ldi	r26, 0x00	; 0
   10182:	b0 e0       	ldi	r27, 0x00	; 0
   10184:	84 21       	and	r24, r4
   10186:	95 21       	and	r25, r5
   10188:	a6 21       	and	r26, r6
   1018a:	b7 21       	and	r27, r7
   1018c:	89 2b       	or	r24, r25
   1018e:	8a 2b       	or	r24, r26
   10190:	8b 2b       	or	r24, r27
   10192:	51 f0       	breq	.+20     	; 0x101a8 <ls_info+0xee>
            *p++ = cm[ i % 3];
   10194:	c9 01       	movw	r24, r18
   10196:	b6 01       	movw	r22, r12
   10198:	0e 94 a0 e4 	call	0x1c940	; 0x1c940 <__divmodhi4>
   1019c:	dc 01       	movw	r26, r24
   1019e:	a2 5d       	subi	r26, 0xD2	; 210
   101a0:	b4 4f       	sbci	r27, 0xF4	; 244
   101a2:	8c 91       	ld	r24, X
   101a4:	81 83       	std	Z+1, r24	; 0x01
   101a6:	01 c0       	rjmp	.+2      	; 0x101aa <ls_info+0xf0>
        else
            *p++ = '-';
   101a8:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   101aa:	f6 94       	lsr	r15
   101ac:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   101ae:	2f 5f       	subi	r18, 0xFF	; 255
   101b0:	3f 4f       	sbci	r19, 0xFF	; 255
   101b2:	31 96       	adiw	r30, 0x01	; 1
   101b4:	29 30       	cpi	r18, 0x09	; 9
   101b6:	31 05       	cpc	r19, r1
   101b8:	11 f7       	brne	.-60     	; 0x1017e <ls_info+0xc4>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   101ba:	1b ae       	std	Y+59, r1	; 0x3b

    printf("%s none none %12ld %s %s\n",
   101bc:	c8 01       	movw	r24, r16
   101be:	0e 94 7f 77 	call	0xeefe	; 0xeefe <basename>
   101c2:	18 2f       	mov	r17, r24
   101c4:	09 2f       	mov	r16, r25
   101c6:	69 a5       	ldd	r22, Y+41	; 0x29
   101c8:	7a a5       	ldd	r23, Y+42	; 0x2a
   101ca:	8b a5       	ldd	r24, Y+43	; 0x2b
   101cc:	9c a5       	ldd	r25, Y+44	; 0x2c
   101ce:	0e 94 5a 77 	call	0xeeb4	; 0xeeb4 <mctime>
   101d2:	0f 93       	push	r16
   101d4:	1f 93       	push	r17
   101d6:	9f 93       	push	r25
   101d8:	8f 93       	push	r24
   101da:	8c 8d       	ldd	r24, Y+28	; 0x1c
   101dc:	8f 93       	push	r24
   101de:	8b 8d       	ldd	r24, Y+27	; 0x1b
   101e0:	8f 93       	push	r24
   101e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
   101e4:	8f 93       	push	r24
   101e6:	89 8d       	ldd	r24, Y+25	; 0x19
   101e8:	8f 93       	push	r24
   101ea:	bf 92       	push	r11
   101ec:	af 92       	push	r10
   101ee:	89 e1       	ldi	r24, 0x19	; 25
   101f0:	9d e0       	ldi	r25, 0x0D	; 13
   101f2:	1f 92       	push	r1
   101f4:	9f 93       	push	r25
   101f6:	8f 93       	push	r24
   101f8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   101fc:	0f b6       	in	r0, 0x3f	; 63
   101fe:	f8 94       	cli
   10200:	de bf       	out	0x3e, r29	; 62
   10202:	0f be       	out	0x3f, r0	; 63
   10204:	cd bf       	out	0x3d, r28	; 61
   10206:	81 e0       	ldi	r24, 0x01	; 1
   10208:	90 e0       	ldi	r25, 0x00	; 0
}
   1020a:	ec 96       	adiw	r28, 0x3c	; 60
   1020c:	0f b6       	in	r0, 0x3f	; 63
   1020e:	f8 94       	cli
   10210:	de bf       	out	0x3e, r29	; 62
   10212:	0f be       	out	0x3f, r0	; 63
   10214:	cd bf       	out	0x3d, r28	; 61
   10216:	df 91       	pop	r29
   10218:	cf 91       	pop	r28
   1021a:	1f 91       	pop	r17
   1021c:	0f 91       	pop	r16
   1021e:	ff 90       	pop	r15
   10220:	ef 90       	pop	r14
   10222:	df 90       	pop	r13
   10224:	cf 90       	pop	r12
   10226:	bf 90       	pop	r11
   10228:	af 90       	pop	r10
   1022a:	7f 90       	pop	r7
   1022c:	6f 90       	pop	r6
   1022e:	5f 90       	pop	r5
   10230:	4f 90       	pop	r4
   10232:	08 95       	ret

00010234 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   10234:	2f 92       	push	r2
   10236:	3f 92       	push	r3
   10238:	4f 92       	push	r4
   1023a:	5f 92       	push	r5
   1023c:	6f 92       	push	r6
   1023e:	8f 92       	push	r8
   10240:	9f 92       	push	r9
   10242:	af 92       	push	r10
   10244:	bf 92       	push	r11
   10246:	cf 92       	push	r12
   10248:	df 92       	push	r13
   1024a:	ef 92       	push	r14
   1024c:	ff 92       	push	r15
   1024e:	0f 93       	push	r16
   10250:	1f 93       	push	r17
   10252:	cf 93       	push	r28
   10254:	df 93       	push	r29
   10256:	cd b7       	in	r28, 0x3d	; 61
   10258:	de b7       	in	r29, 0x3e	; 62
   1025a:	c0 54       	subi	r28, 0x40	; 64
   1025c:	d1 09       	sbc	r29, r1
   1025e:	0f b6       	in	r0, 0x3f	; 63
   10260:	f8 94       	cli
   10262:	de bf       	out	0x3e, r29	; 62
   10264:	0f be       	out	0x3f, r0	; 63
   10266:	cd bf       	out	0x3d, r28	; 61
   10268:	7c 01       	movw	r14, r24
   1026a:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   1026c:	19 aa       	std	Y+49, r1	; 0x31
   1026e:	8e 01       	movw	r16, r28
   10270:	0f 5c       	subi	r16, 0xCF	; 207
   10272:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   10274:	00 97       	sbiw	r24, 0x00	; 0
   10276:	91 f4       	brne	.+36     	; 0x1029c <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10278:	6c e0       	ldi	r22, 0x0C	; 12
   1027a:	70 e0       	ldi	r23, 0x00	; 0
   1027c:	c8 01       	movw	r24, r16
   1027e:	0e 94 d5 77 	call	0xefaa	; 0xefaa <getcwd>
   10282:	89 2b       	or	r24, r25
   10284:	d1 f4       	brne	.+52     	; 0x102ba <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   10286:	88 ef       	ldi	r24, 0xF8	; 248
   10288:	9c e0       	ldi	r25, 0x0C	; 12
   1028a:	1f 92       	push	r1
   1028c:	9f 93       	push	r25
   1028e:	8f 93       	push	r24
   10290:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            return(0); 
   10294:	0f 90       	pop	r0
   10296:	0f 90       	pop	r0
   10298:	0f 90       	pop	r0
   1029a:	3b c0       	rjmp	.+118    	; 0x10312 <ls+0xde>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   1029c:	fc 01       	movw	r30, r24
   1029e:	80 81       	ld	r24, Z
   102a0:	88 23       	and	r24, r24
   102a2:	51 f3       	breq	.-44     	; 0x10278 <ls+0x44>
   102a4:	66 e4       	ldi	r22, 0x46	; 70
   102a6:	72 e1       	ldi	r23, 0x12	; 18
   102a8:	c7 01       	movw	r24, r14
   102aa:	0e 94 85 32 	call	0x650a	; 0x650a <MATCH>
   102ae:	89 2b       	or	r24, r25
   102b0:	19 f7       	brne	.-58     	; 0x10278 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   102b2:	b7 01       	movw	r22, r14
   102b4:	c8 01       	movw	r24, r16
   102b6:	0e 94 a8 31 	call	0x6350	; 0x6350 <strcpy>
    }
    len = strlen(fullpath);
   102ba:	f8 01       	movw	r30, r16
   102bc:	01 90       	ld	r0, Z+
   102be:	00 20       	and	r0, r0
   102c0:	e9 f7       	brne	.-6      	; 0x102bc <ls+0x88>
   102c2:	31 97       	sbiw	r30, 0x01	; 1
   102c4:	1f 01       	movw	r2, r30
   102c6:	20 1a       	sub	r2, r16
   102c8:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   102ca:	1f 93       	push	r17
   102cc:	0f 93       	push	r16
   102ce:	8a ee       	ldi	r24, 0xEA	; 234
   102d0:	9c e0       	ldi	r25, 0x0C	; 12
   102d2:	1f 92       	push	r1
   102d4:	9f 93       	push	r25
   102d6:	8f 93       	push	r24
   102d8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>

    if (stat(fullpath, &st)) 
   102dc:	be 01       	movw	r22, r28
   102de:	6f 5f       	subi	r22, 0xFF	; 255
   102e0:	7f 4f       	sbci	r23, 0xFF	; 255
   102e2:	c8 01       	movw	r24, r16
   102e4:	36 d8       	rcall	.-3988   	; 0xf352 <stat>
   102e6:	7c 01       	movw	r14, r24
   102e8:	0f 90       	pop	r0
   102ea:	0f 90       	pop	r0
   102ec:	0f 90       	pop	r0
   102ee:	0f 90       	pop	r0
   102f0:	0f 90       	pop	r0
   102f2:	89 2b       	or	r24, r25
   102f4:	89 f0       	breq	.+34     	; 0x10318 <ls+0xe4>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   102f6:	1f 93       	push	r17
   102f8:	0f 93       	push	r16
   102fa:	84 ed       	ldi	r24, 0xD4	; 212
   102fc:	9c e0       	ldi	r25, 0x0C	; 12
   102fe:	1f 92       	push	r1
   10300:	9f 93       	push	r25
   10302:	8f 93       	push	r24
   10304:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(0); 
   10308:	0f 90       	pop	r0
   1030a:	0f 90       	pop	r0
   1030c:	0f 90       	pop	r0
   1030e:	0f 90       	pop	r0
   10310:	0f 90       	pop	r0
   10312:	e1 2c       	mov	r14, r1
   10314:	f1 2c       	mov	r15, r1
   10316:	86 c0       	rjmp	.+268    	; 0x10424 <ls+0x1f0>
    }

    switch (st.st_mode & S_IFMT) 
   10318:	89 85       	ldd	r24, Y+9	; 0x09
   1031a:	9a 85       	ldd	r25, Y+10	; 0x0a
   1031c:	ab 85       	ldd	r26, Y+11	; 0x0b
   1031e:	bc 85       	ldd	r27, Y+12	; 0x0c
   10320:	88 27       	eor	r24, r24
   10322:	90 7f       	andi	r25, 0xF0	; 240
   10324:	aa 27       	eor	r26, r26
   10326:	bb 27       	eor	r27, r27
   10328:	81 15       	cp	r24, r1
   1032a:	f0 e4       	ldi	r31, 0x40	; 64
   1032c:	9f 07       	cpc	r25, r31
   1032e:	a1 05       	cpc	r26, r1
   10330:	b1 05       	cpc	r27, r1
   10332:	51 f0       	breq	.+20     	; 0x10348 <ls+0x114>
   10334:	81 15       	cp	r24, r1
   10336:	90 48       	sbci	r25, 0x80	; 128
   10338:	a1 05       	cpc	r26, r1
   1033a:	b1 05       	cpc	r27, r1
   1033c:	09 f0       	breq	.+2      	; 0x10340 <ls+0x10c>
   1033e:	62 c0       	rjmp	.+196    	; 0x10404 <ls+0x1d0>
    {
    case S_IFREG:
        ls_info(fullpath,verbose);
   10340:	b4 01       	movw	r22, r8
   10342:	c8 01       	movw	r24, r16
   10344:	ba de       	rcall	.-652    	; 0x100ba <ls_info>
   10346:	5e c0       	rjmp	.+188    	; 0x10404 <ls+0x1d0>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
   10348:	c8 01       	movw	r24, r16
   1034a:	0e 94 83 78 	call	0xf106	; 0xf106 <opendir>
   1034e:	5c 01       	movw	r10, r24
        if(!dirp)
   10350:	89 2b       	or	r24, r25
   10352:	69 f0       	breq	.+26     	; 0x1036e <ls+0x13a>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   10354:	e1 2c       	mov	r14, r1
   10356:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   10358:	c8 01       	movw	r24, r16
   1035a:	82 0d       	add	r24, r2
   1035c:	93 1d       	adc	r25, r3
   1035e:	21 96       	adiw	r28, 0x01	; 1
   10360:	9f af       	std	Y+63, r25	; 0x3f
   10362:	8e af       	std	Y+62, r24	; 0x3e
   10364:	21 97       	sbiw	r28, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10366:	81 ea       	ldi	r24, 0xA1	; 161
   10368:	9c e0       	ldi	r25, 0x0C	; 12
   1036a:	2c 01       	movw	r4, r24
   1036c:	26 c0       	rjmp	.+76     	; 0x103ba <ls+0x186>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   1036e:	84 ec       	ldi	r24, 0xC4	; 196
   10370:	9c e0       	ldi	r25, 0x0C	; 12
   10372:	1f 92       	push	r1
   10374:	9f 93       	push	r25
   10376:	8f 93       	push	r24
   10378:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            return(0);
   1037c:	0f 90       	pop	r0
   1037e:	0f 90       	pop	r0
   10380:	0f 90       	pop	r0
   10382:	50 c0       	rjmp	.+160    	; 0x10424 <ls+0x1f0>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   10384:	f6 01       	movw	r30, r12
   10386:	80 81       	ld	r24, Z
   10388:	88 23       	and	r24, r24
   1038a:	e9 f0       	breq	.+58     	; 0x103c6 <ls+0x192>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   1038c:	f6 01       	movw	r30, r12
   1038e:	01 90       	ld	r0, Z+
   10390:	00 20       	and	r0, r0
   10392:	e9 f7       	brne	.-6      	; 0x1038e <ls+0x15a>
   10394:	31 97       	sbiw	r30, 0x01	; 1
   10396:	ec 19       	sub	r30, r12
   10398:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   1039a:	e2 0d       	add	r30, r2
   1039c:	f3 1d       	adc	r31, r3
   1039e:	3d 97       	sbiw	r30, 0x0d	; 13
   103a0:	b4 f0       	brlt	.+44     	; 0x103ce <ls+0x19a>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   103a2:	df 92       	push	r13
   103a4:	cf 92       	push	r12
   103a6:	1f 92       	push	r1
   103a8:	5f 92       	push	r5
   103aa:	4f 92       	push	r4
   103ac:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
                continue;
   103b0:	0f 90       	pop	r0
   103b2:	0f 90       	pop	r0
   103b4:	0f 90       	pop	r0
   103b6:	0f 90       	pop	r0
   103b8:	0f 90       	pop	r0
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   103ba:	c5 01       	movw	r24, r10
   103bc:	0e 94 a1 78 	call	0xf142	; 0xf142 <readdir>
   103c0:	6c 01       	movw	r12, r24
   103c2:	89 2b       	or	r24, r25
   103c4:	f9 f6       	brne	.-66     	; 0x10384 <ls+0x150>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   103c6:	c5 01       	movw	r24, r10
   103c8:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <closedir>
        break;
   103cc:	1d c0       	rjmp	.+58     	; 0x10408 <ls+0x1d4>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   103ce:	68 e3       	ldi	r22, 0x38	; 56
   103d0:	78 e0       	ldi	r23, 0x08	; 8
   103d2:	c8 01       	movw	r24, r16
   103d4:	0e 94 85 32 	call	0x650a	; 0x650a <MATCH>
   103d8:	89 2b       	or	r24, r25
   103da:	29 f4       	brne	.+10     	; 0x103e6 <ls+0x1b2>
            {
                strcat(fullpath,"/");
   103dc:	68 e3       	ldi	r22, 0x38	; 56
   103de:	78 e0       	ldi	r23, 0x08	; 8
   103e0:	c8 01       	movw	r24, r16
   103e2:	0e 94 c9 31 	call	0x6392	; 0x6392 <strcat>
            }
            strcat(fullpath,de->d_name);
   103e6:	b6 01       	movw	r22, r12
   103e8:	c8 01       	movw	r24, r16
   103ea:	0e 94 c9 31 	call	0x6392	; 0x6392 <strcat>
            files +=ls_info(fullpath,verbose);
   103ee:	b4 01       	movw	r22, r8
   103f0:	c8 01       	movw	r24, r16
   103f2:	63 de       	rcall	.-826    	; 0x100ba <ls_info>
   103f4:	e8 0e       	add	r14, r24
   103f6:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   103f8:	21 96       	adiw	r28, 0x01	; 1
   103fa:	ee ad       	ldd	r30, Y+62	; 0x3e
   103fc:	ff ad       	ldd	r31, Y+63	; 0x3f
   103fe:	21 97       	sbiw	r28, 0x01	; 1
   10400:	10 82       	st	Z, r1
   10402:	db cf       	rjmp	.-74     	; 0x103ba <ls+0x186>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   10404:	e1 2c       	mov	r14, r1
   10406:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   10408:	ff 92       	push	r15
   1040a:	ef 92       	push	r14
   1040c:	86 e9       	ldi	r24, 0x96	; 150
   1040e:	9c e0       	ldi	r25, 0x0C	; 12
   10410:	1f 92       	push	r1
   10412:	9f 93       	push	r25
   10414:	8f 93       	push	r24
   10416:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    return(files);
   1041a:	0f 90       	pop	r0
   1041c:	0f 90       	pop	r0
   1041e:	0f 90       	pop	r0
   10420:	0f 90       	pop	r0
   10422:	0f 90       	pop	r0
}
   10424:	c7 01       	movw	r24, r14
   10426:	c0 5c       	subi	r28, 0xC0	; 192
   10428:	df 4f       	sbci	r29, 0xFF	; 255
   1042a:	0f b6       	in	r0, 0x3f	; 63
   1042c:	f8 94       	cli
   1042e:	de bf       	out	0x3e, r29	; 62
   10430:	0f be       	out	0x3f, r0	; 63
   10432:	cd bf       	out	0x3d, r28	; 61
   10434:	df 91       	pop	r29
   10436:	cf 91       	pop	r28
   10438:	1f 91       	pop	r17
   1043a:	0f 91       	pop	r16
   1043c:	ff 90       	pop	r15
   1043e:	ef 90       	pop	r14
   10440:	df 90       	pop	r13
   10442:	cf 90       	pop	r12
   10444:	bf 90       	pop	r11
   10446:	af 90       	pop	r10
   10448:	9f 90       	pop	r9
   1044a:	8f 90       	pop	r8
   1044c:	6f 90       	pop	r6
   1044e:	5f 90       	pop	r5
   10450:	4f 90       	pop	r4
   10452:	3f 90       	pop	r3
   10454:	2f 90       	pop	r2
   10456:	08 95       	ret

00010458 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   10458:	a0 e0       	ldi	r26, 0x00	; 0
   1045a:	b1 e0       	ldi	r27, 0x01	; 1
   1045c:	e2 e3       	ldi	r30, 0x32	; 50
   1045e:	f2 e8       	ldi	r31, 0x82	; 130
   10460:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10464:	fb 01       	movw	r30, r22
   10466:	c0 80       	ld	r12, Z
   10468:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   1046a:	c1 14       	cp	r12, r1
   1046c:	d1 04       	cpc	r13, r1
   1046e:	19 f4       	brne	.+6      	; 0x10476 <posix_tests+0x1e>
        return(0);
   10470:	80 e0       	ldi	r24, 0x00	; 0
   10472:	90 e0       	ldi	r25, 0x00	; 0
   10474:	67 c1       	rjmp	.+718    	; 0x10744 <posix_tests+0x2ec>
   10476:	4b 01       	movw	r8, r22
   10478:	8c 01       	movw	r16, r24

    if( MATCH(ptr,"posix") )
   1047a:	62 e3       	ldi	r22, 0x32	; 50
   1047c:	7b e0       	ldi	r23, 0x0B	; 11
   1047e:	c6 01       	movw	r24, r12
   10480:	0e 94 85 32 	call	0x650a	; 0x650a <MATCH>
   10484:	89 2b       	or	r24, r25
   10486:	a9 f0       	breq	.+42     	; 0x104b2 <posix_tests+0x5a>
    {
        ptr = argv[ind++];
   10488:	f4 01       	movw	r30, r8
   1048a:	c2 80       	ldd	r12, Z+2	; 0x02
   1048c:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   1048e:	c1 14       	cp	r12, r1
   10490:	d1 04       	cpc	r13, r1
   10492:	21 f4       	brne	.+8      	; 0x1049c <posix_tests+0x44>
        {
            posix_help(1);
   10494:	81 e0       	ldi	r24, 0x01	; 1
   10496:	90 e0       	ldi	r25, 0x00	; 0
   10498:	74 dc       	rcall	.-1816   	; 0xfd82 <posix_help>
   1049a:	52 c1       	rjmp	.+676    	; 0x10740 <posix_tests+0x2e8>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   1049c:	67 ef       	ldi	r22, 0xF7	; 247
   1049e:	75 e1       	ldi	r23, 0x15	; 21
   104a0:	c6 01       	movw	r24, r12
   104a2:	0e 94 85 32 	call	0x650a	; 0x650a <MATCH>
   104a6:	89 2b       	or	r24, r25
   104a8:	a9 f7       	brne	.-22     	; 0x10494 <posix_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   104aa:	42 e0       	ldi	r20, 0x02	; 2
   104ac:	64 2e       	mov	r6, r20
   104ae:	71 2c       	mov	r7, r1
   104b0:	03 c0       	rjmp	.+6      	; 0x104b8 <posix_tests+0x60>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   104b2:	66 24       	eor	r6, r6
   104b4:	63 94       	inc	r6
   104b6:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   104b8:	73 01       	movw	r14, r6
   104ba:	ff ef       	ldi	r31, 0xFF	; 255
   104bc:	ef 1a       	sub	r14, r31
   104be:	ff 0a       	sbc	r15, r31
   104c0:	98 01       	movw	r18, r16
   104c2:	a7 01       	movw	r20, r14
   104c4:	68 e3       	ldi	r22, 0x38	; 56
   104c6:	7b e0       	ldi	r23, 0x0B	; 11
   104c8:	c6 01       	movw	r24, r12
   104ca:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   104ce:	89 2b       	or	r24, r25
   104d0:	a1 f1       	breq	.+104    	; 0x1053a <posix_tests+0xe2>
   104d2:	73 01       	movw	r14, r6
   104d4:	ee 0c       	add	r14, r14
   104d6:	ff 1c       	adc	r15, r15
   104d8:	e8 0c       	add	r14, r8
   104da:	f9 1c       	adc	r15, r9
   104dc:	57 01       	movw	r10, r14
   104de:	47 01       	movw	r8, r14
   104e0:	63 01       	movw	r12, r6
   104e2:	41 2c       	mov	r4, r1
   104e4:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   104e6:	c0 16       	cp	r12, r16
   104e8:	d1 06       	cpc	r13, r17
   104ea:	1c f5       	brge	.+70     	; 0x10532 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   104ec:	6c e3       	ldi	r22, 0x3C	; 60
   104ee:	7b e0       	ldi	r23, 0x0B	; 11
   104f0:	f4 01       	movw	r30, r8
   104f2:	81 91       	ld	r24, Z+
   104f4:	91 91       	ld	r25, Z+
   104f6:	4f 01       	movw	r8, r30
   104f8:	0e 94 85 32 	call	0x650a	; 0x650a <MATCH>
   104fc:	89 2b       	or	r24, r25
   104fe:	19 f0       	breq	.+6      	; 0x10506 <posix_tests+0xae>
                page = 1;
   10500:	44 24       	eor	r4, r4
   10502:	43 94       	inc	r4
   10504:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10506:	ff ef       	ldi	r31, 0xFF	; 255
   10508:	cf 1a       	sub	r12, r31
   1050a:	df 0a       	sbc	r13, r31
   1050c:	ec cf       	rjmp	.-40     	; 0x104e6 <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   1050e:	6c e3       	ldi	r22, 0x3C	; 60
   10510:	7b e0       	ldi	r23, 0x0B	; 11
   10512:	f5 01       	movw	r30, r10
   10514:	81 91       	ld	r24, Z+
   10516:	91 91       	ld	r25, Z+
   10518:	5f 01       	movw	r10, r30
   1051a:	0e 94 85 32 	call	0x650a	; 0x650a <MATCH>
   1051e:	89 2b       	or	r24, r25
   10520:	29 f4       	brne	.+10     	; 0x1052c <posix_tests+0xd4>
                cat(argv[ind], page);
   10522:	b2 01       	movw	r22, r4
   10524:	f7 01       	movw	r30, r14
   10526:	80 81       	ld	r24, Z
   10528:	91 81       	ldd	r25, Z+1	; 0x01
   1052a:	5a dd       	rcall	.-1356   	; 0xffe0 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   1052c:	ff ef       	ldi	r31, 0xFF	; 255
   1052e:	6f 1a       	sub	r6, r31
   10530:	7f 0a       	sbc	r7, r31
   10532:	60 16       	cp	r6, r16
   10534:	71 06       	cpc	r7, r17
   10536:	5c f3       	brlt	.-42     	; 0x1050e <posix_tests+0xb6>
   10538:	03 c1       	rjmp	.+518    	; 0x10740 <posix_tests+0x2e8>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   1053a:	53 01       	movw	r10, r6
   1053c:	82 e0       	ldi	r24, 0x02	; 2
   1053e:	a8 0e       	add	r10, r24
   10540:	b1 1c       	adc	r11, r1
   10542:	98 01       	movw	r18, r16
   10544:	a5 01       	movw	r20, r10
   10546:	6f e3       	ldi	r22, 0x3F	; 63
   10548:	7b e0       	ldi	r23, 0x0B	; 11
   1054a:	c6 01       	movw	r24, r12
   1054c:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   10550:	89 2b       	or	r24, r25
   10552:	61 f0       	breq	.+24     	; 0x1056c <posix_tests+0x114>
    {
        copy(argv[ind],argv[ind+1]);
   10554:	ee 0c       	add	r14, r14
   10556:	ff 1c       	adc	r15, r15
   10558:	f4 01       	movw	r30, r8
   1055a:	ee 0d       	add	r30, r14
   1055c:	ff 1d       	adc	r31, r15
   1055e:	60 81       	ld	r22, Z
   10560:	71 81       	ldd	r23, Z+1	; 0x01
   10562:	32 97       	sbiw	r30, 0x02	; 2
   10564:	80 81       	ld	r24, Z
   10566:	91 81       	ldd	r25, Z+1	; 0x01
   10568:	28 dc       	rcall	.-1968   	; 0xfdba <copy>
   1056a:	ea c0       	rjmp	.+468    	; 0x10740 <posix_tests+0x2e8>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   1056c:	98 01       	movw	r18, r16
   1056e:	a7 01       	movw	r20, r14
   10570:	64 e4       	ldi	r22, 0x44	; 68
   10572:	7b e0       	ldi	r23, 0x0B	; 11
   10574:	c6 01       	movw	r24, r12
   10576:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1057a:	89 2b       	or	r24, r25
   1057c:	59 f0       	breq	.+22     	; 0x10594 <posix_tests+0x13c>
    {
        chdir(argv[ind]);
   1057e:	73 01       	movw	r14, r6
   10580:	ee 0c       	add	r14, r14
   10582:	ff 1c       	adc	r15, r15
   10584:	f4 01       	movw	r30, r8
   10586:	ee 0d       	add	r30, r14
   10588:	ff 1d       	adc	r31, r15
   1058a:	80 81       	ld	r24, Z
   1058c:	91 81       	ldd	r25, Z+1	; 0x01
   1058e:	0e 94 8d 77 	call	0xef1a	; 0xef1a <chdir>
   10592:	d6 c0       	rjmp	.+428    	; 0x10740 <posix_tests+0x2e8>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   10594:	98 01       	movw	r18, r16
   10596:	a3 01       	movw	r20, r6
   10598:	62 e6       	ldi	r22, 0x62	; 98
   1059a:	78 e0       	ldi	r23, 0x08	; 8
   1059c:	c6 01       	movw	r24, r12
   1059e:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   105a2:	89 2b       	or	r24, r25
   105a4:	69 f1       	breq	.+90     	; 0x10600 <posix_tests+0x1a8>
   105a6:	73 01       	movw	r14, r6
   105a8:	ee 0c       	add	r14, r14
   105aa:	ff 1c       	adc	r15, r15
   105ac:	e8 0c       	add	r14, r8
   105ae:	f9 1c       	adc	r15, r9
   105b0:	c1 2c       	mov	r12, r1
   105b2:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   105b4:	c6 01       	movw	r24, r12
   105b6:	86 0d       	add	r24, r6
   105b8:	97 1d       	adc	r25, r7
   105ba:	80 17       	cp	r24, r16
   105bc:	91 07       	cpc	r25, r17
   105be:	b4 f4       	brge	.+44     	; 0x105ec <posix_tests+0x194>
        {
            if(!MATCH(argv[i],"-l"))
   105c0:	67 e4       	ldi	r22, 0x47	; 71
   105c2:	7b e0       	ldi	r23, 0x0B	; 11
   105c4:	f7 01       	movw	r30, r14
   105c6:	80 81       	ld	r24, Z
   105c8:	91 81       	ldd	r25, Z+1	; 0x01
   105ca:	0e 94 85 32 	call	0x650a	; 0x650a <MATCH>
   105ce:	89 2b       	or	r24, r25
   105d0:	31 f4       	brne	.+12     	; 0x105de <posix_tests+0x186>
                ls(argv[i],1);
   105d2:	61 e0       	ldi	r22, 0x01	; 1
   105d4:	70 e0       	ldi	r23, 0x00	; 0
   105d6:	f7 01       	movw	r30, r14
   105d8:	80 81       	ld	r24, Z
   105da:	91 81       	ldd	r25, Z+1	; 0x01
   105dc:	2b de       	rcall	.-938    	; 0x10234 <ls>
            ++args;
   105de:	ff ef       	ldi	r31, 0xFF	; 255
   105e0:	cf 1a       	sub	r12, r31
   105e2:	df 0a       	sbc	r13, r31
   105e4:	82 e0       	ldi	r24, 0x02	; 2
   105e6:	e8 0e       	add	r14, r24
   105e8:	f1 1c       	adc	r15, r1
   105ea:	e4 cf       	rjmp	.-56     	; 0x105b4 <posix_tests+0x15c>
        }
        if(!args)
   105ec:	c1 14       	cp	r12, r1
   105ee:	d1 04       	cpc	r13, r1
   105f0:	09 f0       	breq	.+2      	; 0x105f4 <posix_tests+0x19c>
        {
            ls("",1);
   105f2:	a6 c0       	rjmp	.+332    	; 0x10740 <posix_tests+0x2e8>
   105f4:	61 e0       	ldi	r22, 0x01	; 1
   105f6:	70 e0       	ldi	r23, 0x00	; 0
   105f8:	87 e1       	ldi	r24, 0x17	; 23
   105fa:	97 e1       	ldi	r25, 0x17	; 23
   105fc:	1b de       	rcall	.-970    	; 0x10234 <ls>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   105fe:	a0 c0       	rjmp	.+320    	; 0x10740 <posix_tests+0x2e8>
   10600:	98 01       	movw	r18, r16
   10602:	a7 01       	movw	r20, r14
   10604:	6a e4       	ldi	r22, 0x4A	; 74
   10606:	7b e0       	ldi	r23, 0x0B	; 11
   10608:	c6 01       	movw	r24, r12
   1060a:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1060e:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10610:	19 f1       	breq	.+70     	; 0x10658 <posix_tests+0x200>
   10612:	e0 16       	cp	r14, r16
   10614:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   10616:	7c f4       	brge	.+30     	; 0x10636 <posix_tests+0x1de>
   10618:	ee 0c       	add	r14, r14
   1061a:	ff 1c       	adc	r15, r15
   1061c:	f4 01       	movw	r30, r8
   1061e:	ee 0d       	add	r30, r14
   10620:	ff 1d       	adc	r31, r15
   10622:	48 e0       	ldi	r20, 0x08	; 8
   10624:	50 e0       	ldi	r21, 0x00	; 0
   10626:	60 e0       	ldi	r22, 0x00	; 0
   10628:	70 e0       	ldi	r23, 0x00	; 0
   1062a:	80 81       	ld	r24, Z
   1062c:	91 81       	ldd	r25, Z+1	; 0x01
   1062e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <strtol>
   10632:	ab 01       	movw	r20, r22
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10634:	02 c0       	rjmp	.+4      	; 0x1063a <posix_tests+0x1e2>
   10636:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        mkdir(argv[ind],mode);
   10638:	51 e0       	ldi	r21, 0x01	; 1
   1063a:	05 2e       	mov	r0, r21
   1063c:	00 0c       	add	r0, r0
   1063e:	66 0b       	sbc	r22, r22
   10640:	77 0b       	sbc	r23, r23
   10642:	73 01       	movw	r14, r6
   10644:	ee 0c       	add	r14, r14
   10646:	ff 1c       	adc	r15, r15
   10648:	f4 01       	movw	r30, r8
   1064a:	ee 0d       	add	r30, r14
   1064c:	ff 1d       	adc	r31, r15
   1064e:	80 81       	ld	r24, Z
   10650:	91 81       	ldd	r25, Z+1	; 0x01
   10652:	0e 94 fa 77 	call	0xeff4	; 0xeff4 <mkdir>
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10656:	74 c0       	rjmp	.+232    	; 0x10740 <posix_tests+0x2e8>
   10658:	98 01       	movw	r18, r16
   1065a:	a7 01       	movw	r20, r14
   1065c:	60 e5       	ldi	r22, 0x50	; 80
   1065e:	7b e0       	ldi	r23, 0x0B	; 11
   10660:	c6 01       	movw	r24, r12
   10662:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   10666:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   10668:	79 f0       	breq	.+30     	; 0x10688 <posix_tests+0x230>
   1066a:	73 01       	movw	r14, r6
   1066c:	ee 0c       	add	r14, r14
   1066e:	ff 1c       	adc	r15, r15
   10670:	f4 01       	movw	r30, r8
   10672:	ee 0d       	add	r30, r14
   10674:	ff 1d       	adc	r31, r15
   10676:	80 81       	ld	r24, Z
   10678:	91 81       	ldd	r25, Z+1	; 0x01
   1067a:	0e 94 49 47 	call	0x8e92	; 0x8e92 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   1067e:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_pagesize+0x1>
   10682:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   10686:	5c c0       	rjmp	.+184    	; 0x10740 <posix_tests+0x2e8>
   10688:	98 01       	movw	r18, r16
   1068a:	a3 01       	movw	r20, r6
   1068c:	65 e5       	ldi	r22, 0x55	; 85
   1068e:	7b e0       	ldi	r23, 0x0B	; 11
   10690:	c6 01       	movw	r24, r12
   10692:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   10696:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   10698:	a9 f0       	breq	.+42     	; 0x106c4 <posix_tests+0x26c>
   1069a:	6e ef       	ldi	r22, 0xFE	; 254
   1069c:	70 e0       	ldi	r23, 0x00	; 0
   1069e:	ce 01       	movw	r24, r28
   106a0:	01 96       	adiw	r24, 0x01	; 1
   106a2:	0e 94 d5 77 	call	0xefaa	; 0xefaa <getcwd>
   106a6:	9f 93       	push	r25
   106a8:	8f 93       	push	r24
   106aa:	84 ee       	ldi	r24, 0xE4	; 228
   106ac:	9d e0       	ldi	r25, 0x0D	; 13
   106ae:	1f 92       	push	r1
   106b0:	9f 93       	push	r25
   106b2:	8f 93       	push	r24
   106b4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   106b8:	0f 90       	pop	r0
   106ba:	0f 90       	pop	r0
   106bc:	0f 90       	pop	r0
   106be:	0f 90       	pop	r0
   106c0:	0f 90       	pop	r0
        return(1);
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   106c2:	3e c0       	rjmp	.+124    	; 0x10740 <posix_tests+0x2e8>
   106c4:	98 01       	movw	r18, r16
   106c6:	a5 01       	movw	r20, r10
   106c8:	69 e5       	ldi	r22, 0x59	; 89
   106ca:	7b e0       	ldi	r23, 0x0B	; 11
   106cc:	c6 01       	movw	r24, r12
   106ce:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   106d2:	89 2b       	or	r24, r25
    {
        rename(argv[ind],argv[ind+1]);
   106d4:	69 f0       	breq	.+26     	; 0x106f0 <posix_tests+0x298>
   106d6:	ee 0c       	add	r14, r14
   106d8:	ff 1c       	adc	r15, r15
   106da:	f4 01       	movw	r30, r8
   106dc:	ee 0d       	add	r30, r14
   106de:	ff 1d       	adc	r31, r15
   106e0:	60 81       	ld	r22, Z
   106e2:	71 81       	ldd	r23, Z+1	; 0x01
   106e4:	32 97       	sbiw	r30, 0x02	; 2
   106e6:	80 81       	ld	r24, Z
   106e8:	91 81       	ldd	r25, Z+1	; 0x01
   106ea:	0e 94 28 78 	call	0xf050	; 0xf050 <rename>
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   106ee:	28 c0       	rjmp	.+80     	; 0x10740 <posix_tests+0x2e8>
   106f0:	98 01       	movw	r18, r16
   106f2:	a7 01       	movw	r20, r14
   106f4:	60 e6       	ldi	r22, 0x60	; 96
   106f6:	7b e0       	ldi	r23, 0x0B	; 11
   106f8:	c6 01       	movw	r24, r12
   106fa:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   106fe:	89 2b       	or	r24, r25
    {
        unlink(argv[ind]);
   10700:	59 f0       	breq	.+22     	; 0x10718 <posix_tests+0x2c0>
   10702:	73 01       	movw	r14, r6
   10704:	ee 0c       	add	r14, r14
   10706:	ff 1c       	adc	r15, r15
   10708:	f4 01       	movw	r30, r8
   1070a:	ee 0d       	add	r30, r14
   1070c:	ff 1d       	adc	r31, r15
   1070e:	80 81       	ld	r24, Z
   10710:	91 81       	ldd	r25, Z+1	; 0x01
   10712:	0e 94 47 78 	call	0xf08e	; 0xf08e <unlink>
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   10716:	14 c0       	rjmp	.+40     	; 0x10740 <posix_tests+0x2e8>
   10718:	98 01       	movw	r18, r16
   1071a:	a7 01       	movw	r20, r14
   1071c:	63 e6       	ldi	r22, 0x63	; 99
   1071e:	7b e0       	ldi	r23, 0x0B	; 11
   10720:	c6 01       	movw	r24, r12
   10722:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   10726:	89 2b       	or	r24, r25
   10728:	09 f4       	brne	.+2      	; 0x1072c <posix_tests+0x2d4>
    {
        rmdir(argv[ind]);
   1072a:	a2 ce       	rjmp	.-700    	; 0x10470 <posix_tests+0x18>
   1072c:	73 01       	movw	r14, r6
   1072e:	ee 0c       	add	r14, r14
   10730:	ff 1c       	adc	r15, r15
   10732:	f4 01       	movw	r30, r8
   10734:	ee 0d       	add	r30, r14
   10736:	ff 1d       	adc	r31, r15
   10738:	80 81       	ld	r24, Z
   1073a:	91 81       	ldd	r25, Z+1	; 0x01
   1073c:	0e 94 66 78 	call	0xf0cc	; 0xf0cc <rmdir>
        return(1);
   10740:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
   10742:	90 e0       	ldi	r25, 0x00	; 0
   10744:	d3 95       	inc	r29
   10746:	e0 e1       	ldi	r30, 0x10	; 16
   10748:	0c 94 53 e5 	jmp	0x1caa6	; 0x1caa6 <__epilogue_restores__+0x4>

0001074c <gpib_timer_init>:
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   1074c:	61 e0       	ldi	r22, 0x01	; 1
   1074e:	70 e0       	ldi	r23, 0x00	; 0
   10750:	83 e4       	ldi	r24, 0x43	; 67
   10752:	95 e8       	ldi	r25, 0x85	; 133
   10754:	0e 94 31 35 	call	0x6a62	; 0x6a62 <set_timers>
   10758:	01 96       	adiw	r24, 0x01	; 1
   1075a:	51 f4       	brne	.+20     	; 0x10770 <gpib_timer_init+0x24>
        printf("GPIB Clock task init failed\n");
   1075c:	8e e0       	ldi	r24, 0x0E	; 14
   1075e:	9f e0       	ldi	r25, 0x0F	; 15
   10760:	1f 92       	push	r1
   10762:	9f 93       	push	r25
   10764:	8f 93       	push	r24
   10766:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1076a:	0f 90       	pop	r0
   1076c:	0f 90       	pop	r0

    gpib_timer_reset();
   1076e:	0f 90       	pop	r0
   10770:	78 c1       	rjmp	.+752    	; 0x10a62 <gpib_timer_reset>
   10772:	08 95       	ret

00010774 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10774:	28 2f       	mov	r18, r24
   10776:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   10778:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   1077a:	88 0f       	add	r24, r24
        if(mask & 1)
   1077c:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   1077e:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10780:	26 95       	lsr	r18
   10782:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10784:	d1 f7       	brne	.-12     	; 0x1077a <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   10786:	08 95       	ret

00010788 <ppr_set>:
   10788:	f5 df       	rcall	.-22     	; 0x10774 <reverse_8bits>
   1078a:	80 93 5b 18 	sts	0x185B, r24	; 0x80185b <_ppr_reg>
   1078e:	0e 94 be 2c 	call	0x597c	; 0x597c <SPI0_TXRX_Byte>
   10792:	2a 9a       	sbi	0x05, 2	; 5
   10794:	22 9a       	sbi	0x04, 2	; 4
   10796:	2a 98       	cbi	0x05, 2	; 5
   10798:	22 9a       	sbi	0x04, 2	; 4
   1079a:	08 95       	ret

0001079c <ppr_reg>:
   1079c:	80 91 5b 18 	lds	r24, 0x185B	; 0x80185b <_ppr_reg>
   107a0:	e9 cf       	rjmp	.-46     	; 0x10774 <reverse_8bits>
   107a2:	08 95       	ret

000107a4 <ppr_init>:
   107a4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   107a8:	81 ff       	sbrs	r24, 1
   107aa:	0a c0       	rjmp	.+20     	; 0x107c0 <ppr_init+0x1c>
   107ac:	8b ef       	ldi	r24, 0xFB	; 251
   107ae:	9e e0       	ldi	r25, 0x0E	; 14
   107b0:	1f 92       	push	r1
   107b2:	9f 93       	push	r25
   107b4:	8f 93       	push	r24
   107b6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   107ba:	0f 90       	pop	r0
   107bc:	0f 90       	pop	r0
   107be:	0f 90       	pop	r0
   107c0:	80 e0       	ldi	r24, 0x00	; 0
   107c2:	e2 cf       	rjmp	.-60     	; 0x10788 <ppr_set>
   107c4:	08 95       	ret

000107c6 <ppr_bit_set>:
   107c6:	21 e0       	ldi	r18, 0x01	; 1
   107c8:	30 e0       	ldi	r19, 0x00	; 0
   107ca:	01 c0       	rjmp	.+2      	; 0x107ce <ppr_bit_set+0x8>
   107cc:	22 0f       	add	r18, r18
   107ce:	8a 95       	dec	r24
   107d0:	ea f7       	brpl	.-6      	; 0x107cc <ppr_bit_set+0x6>
   107d2:	80 91 5b 18 	lds	r24, 0x185B	; 0x80185b <_ppr_reg>
   107d6:	82 2b       	or	r24, r18
   107d8:	80 93 5b 18 	sts	0x185B, r24	; 0x80185b <_ppr_reg>
   107dc:	d5 cf       	rjmp	.-86     	; 0x10788 <ppr_set>
   107de:	08 95       	ret

000107e0 <ppr_bit_clr>:
   107e0:	21 e0       	ldi	r18, 0x01	; 1
   107e2:	30 e0       	ldi	r19, 0x00	; 0
   107e4:	01 c0       	rjmp	.+2      	; 0x107e8 <ppr_bit_clr+0x8>
   107e6:	22 0f       	add	r18, r18
   107e8:	8a 95       	dec	r24
   107ea:	ea f7       	brpl	.-6      	; 0x107e6 <ppr_bit_clr+0x6>
   107ec:	20 95       	com	r18
   107ee:	80 91 5b 18 	lds	r24, 0x185B	; 0x80185b <_ppr_reg>
   107f2:	82 23       	and	r24, r18
   107f4:	80 93 5b 18 	sts	0x185B, r24	; 0x80185b <_ppr_reg>
   107f8:	c7 cf       	rjmp	.-114    	; 0x10788 <ppr_set>
   107fa:	08 95       	ret

000107fc <dbf_open>:
   107fc:	0f 93       	push	r16
   107fe:	1f 93       	push	r17
   10800:	cf 93       	push	r28
   10802:	df 93       	push	r29
   10804:	16 2f       	mov	r17, r22
   10806:	07 2f       	mov	r16, r23
   10808:	0e 94 a2 5a 	call	0xb544	; 0xb544 <f_open>
   1080c:	ec 01       	movw	r28, r24
   1080e:	89 2b       	or	r24, r25
   10810:	89 f0       	breq	.+34     	; 0x10834 <dbf_open+0x38>
   10812:	0f 93       	push	r16
   10814:	1f 93       	push	r17
   10816:	8a ee       	ldi	r24, 0xEA	; 234
   10818:	9e e0       	ldi	r25, 0x0E	; 14
   1081a:	1f 92       	push	r1
   1081c:	9f 93       	push	r25
   1081e:	8f 93       	push	r24
   10820:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   10824:	ce 01       	movw	r24, r28
   10826:	0e 94 1a 71 	call	0xe234	; 0xe234 <put_rc>
   1082a:	0f 90       	pop	r0
   1082c:	0f 90       	pop	r0
   1082e:	0f 90       	pop	r0
   10830:	0f 90       	pop	r0
   10832:	0f 90       	pop	r0
   10834:	ce 01       	movw	r24, r28
   10836:	df 91       	pop	r29
   10838:	cf 91       	pop	r28
   1083a:	1f 91       	pop	r17
   1083c:	0f 91       	pop	r16
   1083e:	08 95       	ret

00010840 <dbf_read>:
   10840:	cf 93       	push	r28
   10842:	df 93       	push	r29
   10844:	0e 94 5d 5c 	call	0xb8ba	; 0xb8ba <f_read>
   10848:	ec 01       	movw	r28, r24
   1084a:	89 2b       	or	r24, r25
   1084c:	69 f0       	breq	.+26     	; 0x10868 <dbf_read+0x28>
   1084e:	8d ed       	ldi	r24, 0xDD	; 221
   10850:	9e e0       	ldi	r25, 0x0E	; 14
   10852:	1f 92       	push	r1
   10854:	9f 93       	push	r25
   10856:	8f 93       	push	r24
   10858:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1085c:	ce 01       	movw	r24, r28
   1085e:	0e 94 1a 71 	call	0xe234	; 0xe234 <put_rc>
   10862:	0f 90       	pop	r0
   10864:	0f 90       	pop	r0
   10866:	0f 90       	pop	r0
   10868:	ce 01       	movw	r24, r28
   1086a:	df 91       	pop	r29
   1086c:	cf 91       	pop	r28
   1086e:	08 95       	ret

00010870 <dbf_write>:
   10870:	cf 93       	push	r28
   10872:	df 93       	push	r29
   10874:	0e 94 a8 5d 	call	0xbb50	; 0xbb50 <f_write>
   10878:	ec 01       	movw	r28, r24
   1087a:	89 2b       	or	r24, r25
   1087c:	69 f0       	breq	.+26     	; 0x10898 <dbf_write+0x28>
   1087e:	8f ec       	ldi	r24, 0xCF	; 207
   10880:	9e e0       	ldi	r25, 0x0E	; 14
   10882:	1f 92       	push	r1
   10884:	9f 93       	push	r25
   10886:	8f 93       	push	r24
   10888:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1088c:	ce 01       	movw	r24, r28
   1088e:	0e 94 1a 71 	call	0xe234	; 0xe234 <put_rc>
   10892:	0f 90       	pop	r0
   10894:	0f 90       	pop	r0
   10896:	0f 90       	pop	r0
   10898:	ce 01       	movw	r24, r28
   1089a:	df 91       	pop	r29
   1089c:	cf 91       	pop	r28
   1089e:	08 95       	ret

000108a0 <dbf_lseek>:
   108a0:	cf 93       	push	r28
   108a2:	df 93       	push	r29
   108a4:	0e 94 69 61 	call	0xc2d2	; 0xc2d2 <f_lseek>
   108a8:	ec 01       	movw	r28, r24
   108aa:	89 2b       	or	r24, r25
   108ac:	69 f0       	breq	.+26     	; 0x108c8 <dbf_lseek+0x28>
   108ae:	82 ec       	ldi	r24, 0xC2	; 194
   108b0:	9e e0       	ldi	r25, 0x0E	; 14
   108b2:	1f 92       	push	r1
   108b4:	9f 93       	push	r25
   108b6:	8f 93       	push	r24
   108b8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   108bc:	ce 01       	movw	r24, r28
   108be:	0e 94 1a 71 	call	0xe234	; 0xe234 <put_rc>
   108c2:	0f 90       	pop	r0
   108c4:	0f 90       	pop	r0
   108c6:	0f 90       	pop	r0
   108c8:	ce 01       	movw	r24, r28
   108ca:	df 91       	pop	r29
   108cc:	cf 91       	pop	r28
   108ce:	08 95       	ret

000108d0 <dbf_close>:
   108d0:	cf 93       	push	r28
   108d2:	df 93       	push	r29
   108d4:	0e 94 bf 5f 	call	0xbf7e	; 0xbf7e <f_close>
   108d8:	ec 01       	movw	r28, r24
   108da:	89 2b       	or	r24, r25
   108dc:	69 f0       	breq	.+26     	; 0x108f8 <dbf_close+0x28>
   108de:	84 eb       	ldi	r24, 0xB4	; 180
   108e0:	9e e0       	ldi	r25, 0x0E	; 14
   108e2:	1f 92       	push	r1
   108e4:	9f 93       	push	r25
   108e6:	8f 93       	push	r24
   108e8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   108ec:	ce 01       	movw	r24, r28
   108ee:	0e 94 1a 71 	call	0xe234	; 0xe234 <put_rc>
   108f2:	0f 90       	pop	r0
   108f4:	0f 90       	pop	r0
   108f6:	0f 90       	pop	r0
   108f8:	ce 01       	movw	r24, r28
   108fa:	df 91       	pop	r29
   108fc:	cf 91       	pop	r28
   108fe:	08 95       	ret

00010900 <dbf_open_read>:
   10900:	a6 e2       	ldi	r26, 0x26	; 38
   10902:	b2 e0       	ldi	r27, 0x02	; 2
   10904:	e6 e8       	ldi	r30, 0x86	; 134
   10906:	f4 e8       	ldi	r31, 0x84	; 132
   10908:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__prologue_saves__+0xc>
   1090c:	4a 01       	movw	r8, r20
   1090e:	5b 01       	movw	r10, r22
   10910:	69 01       	movw	r12, r18
   10912:	cb 5d       	subi	r28, 0xDB	; 219
   10914:	dd 4f       	sbci	r29, 0xFD	; 253
   10916:	19 82       	std	Y+1, r1	; 0x01
   10918:	18 82       	st	Y, r1
   1091a:	c5 52       	subi	r28, 0x25	; 37
   1091c:	d2 40       	sbci	r29, 0x02	; 2
   1091e:	43 e0       	ldi	r20, 0x03	; 3
   10920:	bc 01       	movw	r22, r24
   10922:	ce 01       	movw	r24, r28
   10924:	01 96       	adiw	r24, 0x01	; 1
   10926:	6a df       	rcall	.-300    	; 0x107fc <dbf_open>
   10928:	89 2b       	or	r24, r25
   1092a:	19 f0       	breq	.+6      	; 0x10932 <dbf_open_read+0x32>
   1092c:	81 e1       	ldi	r24, 0x11	; 17
   1092e:	90 e0       	ldi	r25, 0x00	; 0
   10930:	2f c0       	rjmp	.+94     	; 0x10990 <dbf_open_read+0x90>
   10932:	b5 01       	movw	r22, r10
   10934:	a4 01       	movw	r20, r8
   10936:	ce 01       	movw	r24, r28
   10938:	01 96       	adiw	r24, 0x01	; 1
   1093a:	b2 df       	rcall	.-156    	; 0x108a0 <dbf_lseek>
   1093c:	89 2b       	or	r24, r25
   1093e:	59 f0       	breq	.+22     	; 0x10956 <dbf_open_read+0x56>
   10940:	85 e0       	ldi	r24, 0x05	; 5
   10942:	90 e0       	ldi	r25, 0x00	; 0
   10944:	f7 01       	movw	r30, r14
   10946:	91 83       	std	Z+1, r25	; 0x01
   10948:	80 83       	st	Z, r24
   1094a:	ce 01       	movw	r24, r28
   1094c:	01 96       	adiw	r24, 0x01	; 1
   1094e:	c0 df       	rcall	.-128    	; 0x108d0 <dbf_close>
   10950:	8f ef       	ldi	r24, 0xFF	; 255
   10952:	9f ef       	ldi	r25, 0xFF	; 255
   10954:	27 c0       	rjmp	.+78     	; 0x109a4 <dbf_open_read+0xa4>
   10956:	9e 01       	movw	r18, r28
   10958:	2b 5d       	subi	r18, 0xDB	; 219
   1095a:	3d 4f       	sbci	r19, 0xFD	; 253
   1095c:	a8 01       	movw	r20, r16
   1095e:	b6 01       	movw	r22, r12
   10960:	ce 01       	movw	r24, r28
   10962:	01 96       	adiw	r24, 0x01	; 1
   10964:	6d df       	rcall	.-294    	; 0x10840 <dbf_read>
   10966:	89 2b       	or	r24, r25
   10968:	49 f4       	brne	.+18     	; 0x1097c <dbf_open_read+0x7c>
   1096a:	cb 5d       	subi	r28, 0xDB	; 219
   1096c:	dd 4f       	sbci	r29, 0xFD	; 253
   1096e:	88 81       	ld	r24, Y
   10970:	99 81       	ldd	r25, Y+1	; 0x01
   10972:	c5 52       	subi	r28, 0x25	; 37
   10974:	d2 40       	sbci	r29, 0x02	; 2
   10976:	08 17       	cp	r16, r24
   10978:	19 07       	cpc	r17, r25
   1097a:	19 f0       	breq	.+6      	; 0x10982 <dbf_open_read+0x82>
   1097c:	81 e0       	ldi	r24, 0x01	; 1
   1097e:	90 e0       	ldi	r25, 0x00	; 0
   10980:	e1 cf       	rjmp	.-62     	; 0x10944 <dbf_open_read+0x44>
   10982:	ce 01       	movw	r24, r28
   10984:	01 96       	adiw	r24, 0x01	; 1
   10986:	a4 df       	rcall	.-184    	; 0x108d0 <dbf_close>
   10988:	89 2b       	or	r24, r25
   1098a:	31 f0       	breq	.+12     	; 0x10998 <dbf_open_read+0x98>
   1098c:	80 e1       	ldi	r24, 0x10	; 16
   1098e:	90 e0       	ldi	r25, 0x00	; 0
   10990:	f7 01       	movw	r30, r14
   10992:	91 83       	std	Z+1, r25	; 0x01
   10994:	80 83       	st	Z, r24
   10996:	dc cf       	rjmp	.-72     	; 0x10950 <dbf_open_read+0x50>
   10998:	cb 5d       	subi	r28, 0xDB	; 219
   1099a:	dd 4f       	sbci	r29, 0xFD	; 253
   1099c:	88 81       	ld	r24, Y
   1099e:	99 81       	ldd	r25, Y+1	; 0x01
   109a0:	c5 52       	subi	r28, 0x25	; 37
   109a2:	d2 40       	sbci	r29, 0x02	; 2
   109a4:	ca 5d       	subi	r28, 0xDA	; 218
   109a6:	dd 4f       	sbci	r29, 0xFD	; 253
   109a8:	ec e0       	ldi	r30, 0x0C	; 12
   109aa:	0c 94 57 e5 	jmp	0x1caae	; 0x1caae <__epilogue_restores__+0xc>

000109ae <dbf_open_write>:
   109ae:	a6 e2       	ldi	r26, 0x26	; 38
   109b0:	b2 e0       	ldi	r27, 0x02	; 2
   109b2:	ed ed       	ldi	r30, 0xDD	; 221
   109b4:	f4 e8       	ldi	r31, 0x84	; 132
   109b6:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__prologue_saves__+0xc>
   109ba:	4a 01       	movw	r8, r20
   109bc:	5b 01       	movw	r10, r22
   109be:	69 01       	movw	r12, r18
   109c0:	cb 5d       	subi	r28, 0xDB	; 219
   109c2:	dd 4f       	sbci	r29, 0xFD	; 253
   109c4:	19 82       	std	Y+1, r1	; 0x01
   109c6:	18 82       	st	Y, r1
   109c8:	c5 52       	subi	r28, 0x25	; 37
   109ca:	d2 40       	sbci	r29, 0x02	; 2
   109cc:	43 e0       	ldi	r20, 0x03	; 3
   109ce:	bc 01       	movw	r22, r24
   109d0:	ce 01       	movw	r24, r28
   109d2:	01 96       	adiw	r24, 0x01	; 1
   109d4:	13 df       	rcall	.-474    	; 0x107fc <dbf_open>
   109d6:	89 2b       	or	r24, r25
   109d8:	19 f0       	breq	.+6      	; 0x109e0 <dbf_open_write+0x32>
   109da:	81 e1       	ldi	r24, 0x11	; 17
   109dc:	90 e0       	ldi	r25, 0x00	; 0
   109de:	2f c0       	rjmp	.+94     	; 0x10a3e <dbf_open_write+0x90>
   109e0:	b5 01       	movw	r22, r10
   109e2:	a4 01       	movw	r20, r8
   109e4:	ce 01       	movw	r24, r28
   109e6:	01 96       	adiw	r24, 0x01	; 1
   109e8:	5b df       	rcall	.-330    	; 0x108a0 <dbf_lseek>
   109ea:	89 2b       	or	r24, r25
   109ec:	59 f0       	breq	.+22     	; 0x10a04 <dbf_open_write+0x56>
   109ee:	85 e0       	ldi	r24, 0x05	; 5
   109f0:	90 e0       	ldi	r25, 0x00	; 0
   109f2:	f7 01       	movw	r30, r14
   109f4:	91 83       	std	Z+1, r25	; 0x01
   109f6:	80 83       	st	Z, r24
   109f8:	ce 01       	movw	r24, r28
   109fa:	01 96       	adiw	r24, 0x01	; 1
   109fc:	69 df       	rcall	.-302    	; 0x108d0 <dbf_close>
   109fe:	8f ef       	ldi	r24, 0xFF	; 255
   10a00:	9f ef       	ldi	r25, 0xFF	; 255
   10a02:	27 c0       	rjmp	.+78     	; 0x10a52 <dbf_open_write+0xa4>
   10a04:	9e 01       	movw	r18, r28
   10a06:	2b 5d       	subi	r18, 0xDB	; 219
   10a08:	3d 4f       	sbci	r19, 0xFD	; 253
   10a0a:	a8 01       	movw	r20, r16
   10a0c:	b6 01       	movw	r22, r12
   10a0e:	ce 01       	movw	r24, r28
   10a10:	01 96       	adiw	r24, 0x01	; 1
   10a12:	2e df       	rcall	.-420    	; 0x10870 <dbf_write>
   10a14:	89 2b       	or	r24, r25
   10a16:	49 f4       	brne	.+18     	; 0x10a2a <dbf_open_write+0x7c>
   10a18:	cb 5d       	subi	r28, 0xDB	; 219
   10a1a:	dd 4f       	sbci	r29, 0xFD	; 253
   10a1c:	88 81       	ld	r24, Y
   10a1e:	99 81       	ldd	r25, Y+1	; 0x01
   10a20:	c5 52       	subi	r28, 0x25	; 37
   10a22:	d2 40       	sbci	r29, 0x02	; 2
   10a24:	08 17       	cp	r16, r24
   10a26:	19 07       	cpc	r17, r25
   10a28:	19 f0       	breq	.+6      	; 0x10a30 <dbf_open_write+0x82>
   10a2a:	81 e0       	ldi	r24, 0x01	; 1
   10a2c:	90 e0       	ldi	r25, 0x00	; 0
   10a2e:	e1 cf       	rjmp	.-62     	; 0x109f2 <dbf_open_write+0x44>
   10a30:	ce 01       	movw	r24, r28
   10a32:	01 96       	adiw	r24, 0x01	; 1
   10a34:	4d df       	rcall	.-358    	; 0x108d0 <dbf_close>
   10a36:	89 2b       	or	r24, r25
   10a38:	31 f0       	breq	.+12     	; 0x10a46 <dbf_open_write+0x98>
   10a3a:	80 e1       	ldi	r24, 0x10	; 16
   10a3c:	90 e0       	ldi	r25, 0x00	; 0
   10a3e:	f7 01       	movw	r30, r14
   10a40:	91 83       	std	Z+1, r25	; 0x01
   10a42:	80 83       	st	Z, r24
   10a44:	dc cf       	rjmp	.-72     	; 0x109fe <dbf_open_write+0x50>
   10a46:	cb 5d       	subi	r28, 0xDB	; 219
   10a48:	dd 4f       	sbci	r29, 0xFD	; 253
   10a4a:	88 81       	ld	r24, Y
   10a4c:	99 81       	ldd	r25, Y+1	; 0x01
   10a4e:	c5 52       	subi	r28, 0x25	; 37
   10a50:	d2 40       	sbci	r29, 0x02	; 2
   10a52:	ca 5d       	subi	r28, 0xDA	; 218
   10a54:	dd 4f       	sbci	r29, 0xFD	; 253
   10a56:	ec e0       	ldi	r30, 0x0C	; 12
   10a58:	0c 94 57 e5 	jmp	0x1caae	; 0x1caae <__epilogue_restores__+0xc>

00010a5c <gpib_timer_elapsed_begin>:
   10a5c:	0c 94 dd 35 	jmp	0x6bba	; 0x6bba <clock_elapsed_begin>
   10a60:	08 95       	ret

00010a62 <gpib_timer_reset>:
   10a62:	f8 94       	cli
   10a64:	e7 ed       	ldi	r30, 0xD7	; 215
   10a66:	fb e1       	ldi	r31, 0x1B	; 27
   10a68:	10 82       	st	Z, r1
   10a6a:	11 82       	std	Z+1, r1	; 0x01
   10a6c:	12 82       	std	Z+2, r1	; 0x02
   10a6e:	13 82       	std	Z+3, r1	; 0x03
   10a70:	14 82       	std	Z+4, r1	; 0x04
   10a72:	15 82       	std	Z+5, r1	; 0x05
   10a74:	16 82       	std	Z+6, r1	; 0x06
   10a76:	17 82       	std	Z+7, r1	; 0x07
   10a78:	81 e0       	ldi	r24, 0x01	; 1
   10a7a:	80 87       	std	Z+8, r24	; 0x08
   10a7c:	78 94       	sei
   10a7e:	08 95       	ret

00010a80 <gpib_timer_elapsed_end>:
   10a80:	0c 94 e3 35 	jmp	0x6bc6	; 0x6bc6 <clock_elapsed_end>
   10a84:	08 95       	ret

00010a86 <gpib_timer_task>:
   10a86:	f8 94       	cli
   10a88:	80 91 db 1b 	lds	r24, 0x1BDB	; 0x801bdb <gpib_timer+0x4>
   10a8c:	90 91 dc 1b 	lds	r25, 0x1BDC	; 0x801bdc <gpib_timer+0x5>
   10a90:	a0 91 dd 1b 	lds	r26, 0x1BDD	; 0x801bdd <gpib_timer+0x6>
   10a94:	b0 91 de 1b 	lds	r27, 0x1BDE	; 0x801bde <gpib_timer+0x7>
   10a98:	89 2b       	or	r24, r25
   10a9a:	8a 2b       	or	r24, r26
   10a9c:	8b 2b       	or	r24, r27
   10a9e:	a1 f0       	breq	.+40     	; 0x10ac8 <gpib_timer_task+0x42>
   10aa0:	80 91 db 1b 	lds	r24, 0x1BDB	; 0x801bdb <gpib_timer+0x4>
   10aa4:	90 91 dc 1b 	lds	r25, 0x1BDC	; 0x801bdc <gpib_timer+0x5>
   10aa8:	a0 91 dd 1b 	lds	r26, 0x1BDD	; 0x801bdd <gpib_timer+0x6>
   10aac:	b0 91 de 1b 	lds	r27, 0x1BDE	; 0x801bde <gpib_timer+0x7>
   10ab0:	01 97       	sbiw	r24, 0x01	; 1
   10ab2:	a1 09       	sbc	r26, r1
   10ab4:	b1 09       	sbc	r27, r1
   10ab6:	80 93 db 1b 	sts	0x1BDB, r24	; 0x801bdb <gpib_timer+0x4>
   10aba:	90 93 dc 1b 	sts	0x1BDC, r25	; 0x801bdc <gpib_timer+0x5>
   10abe:	a0 93 dd 1b 	sts	0x1BDD, r26	; 0x801bdd <gpib_timer+0x6>
   10ac2:	b0 93 de 1b 	sts	0x1BDE, r27	; 0x801bde <gpib_timer+0x7>
   10ac6:	03 c0       	rjmp	.+6      	; 0x10ace <gpib_timer_task+0x48>
   10ac8:	81 e0       	ldi	r24, 0x01	; 1
   10aca:	80 93 df 1b 	sts	0x1BDF, r24	; 0x801bdf <gpib_timer+0x8>
   10ace:	78 94       	sei
   10ad0:	08 95       	ret

00010ad2 <gpib_timeout_set>:
   10ad2:	f8 94       	cli
   10ad4:	e7 ed       	ldi	r30, 0xD7	; 215
   10ad6:	fb e1       	ldi	r31, 0x1B	; 27
   10ad8:	64 83       	std	Z+4, r22	; 0x04
   10ada:	75 83       	std	Z+5, r23	; 0x05
   10adc:	86 83       	std	Z+6, r24	; 0x06
   10ade:	97 83       	std	Z+7, r25	; 0x07
   10ae0:	10 86       	std	Z+8, r1	; 0x08
   10ae2:	78 94       	sei
   10ae4:	08 95       	ret

00010ae6 <gpib_bus_read_init>:
   10ae6:	54 98       	cbi	0x0a, 4	; 10
   10ae8:	57 98       	cbi	0x0a, 7	; 10
   10aea:	45 98       	cbi	0x08, 5	; 8
   10aec:	3d 9a       	sbi	0x07, 5	; 7
   10aee:	11 b8       	out	0x01, r1	; 1
   10af0:	2f ef       	ldi	r18, 0xFF	; 255
   10af2:	22 b9       	out	0x02, r18	; 2
   10af4:	43 98       	cbi	0x08, 3	; 8
   10af6:	3b 9a       	sbi	0x07, 3	; 7
   10af8:	21 98       	cbi	0x04, 1	; 4
   10afa:	56 98       	cbi	0x0a, 6	; 10
   10afc:	20 98       	cbi	0x04, 0	; 4
   10afe:	55 98       	cbi	0x0a, 5	; 10
   10b00:	89 2b       	or	r24, r25
   10b02:	39 f4       	brne	.+14     	; 0x10b12 <gpib_bus_read_init+0x2c>
   10b04:	52 98       	cbi	0x0a, 2	; 10
   10b06:	53 98       	cbi	0x0a, 3	; 10
   10b08:	8d e0       	ldi	r24, 0x0D	; 13
   10b0a:	8a 95       	dec	r24
   10b0c:	f1 f7       	brne	.-4      	; 0x10b0a <gpib_bus_read_init+0x24>
   10b0e:	00 00       	nop
   10b10:	04 c0       	rjmp	.+8      	; 0x10b1a <gpib_bus_read_init+0x34>
   10b12:	5b 98       	cbi	0x0b, 3	; 11
   10b14:	53 9a       	sbi	0x0a, 3	; 10
   10b16:	5a 98       	cbi	0x0b, 2	; 11
   10b18:	52 9a       	sbi	0x0a, 2	; 10
   10b1a:	42 98       	cbi	0x08, 2	; 8
   10b1c:	3a 9a       	sbi	0x07, 2	; 7
   10b1e:	44 9a       	sbi	0x08, 4	; 8
   10b20:	3c 9a       	sbi	0x07, 4	; 7
   10b22:	8d e0       	ldi	r24, 0x0D	; 13
   10b24:	8a 95       	dec	r24
   10b26:	f1 f7       	brne	.-4      	; 0x10b24 <gpib_bus_read_init+0x3e>
   10b28:	00 00       	nop
   10b2a:	08 95       	ret

00010b2c <gpib_bus_init>:
   10b2c:	10 92 5c 18 	sts	0x185C, r1	; 0x80185c <gpib_unread_f>
   10b30:	11 b8       	out	0x01, r1	; 1
   10b32:	8f ef       	ldi	r24, 0xFF	; 255
   10b34:	82 b9       	out	0x02, r24	; 2
   10b36:	21 98       	cbi	0x04, 1	; 4
   10b38:	52 98       	cbi	0x0a, 2	; 10
   10b3a:	53 98       	cbi	0x0a, 3	; 10
   10b3c:	54 98       	cbi	0x0a, 4	; 10
   10b3e:	57 98       	cbi	0x0a, 7	; 10
   10b40:	56 98       	cbi	0x0a, 6	; 10
   10b42:	20 98       	cbi	0x04, 0	; 4
   10b44:	55 98       	cbi	0x0a, 5	; 10
   10b46:	45 98       	cbi	0x08, 5	; 8
   10b48:	3d 9a       	sbi	0x07, 5	; 7
   10b4a:	43 98       	cbi	0x08, 3	; 8
   10b4c:	3b 9a       	sbi	0x07, 3	; 7
   10b4e:	42 98       	cbi	0x08, 2	; 8
   10b50:	3a 9a       	sbi	0x07, 2	; 7
   10b52:	44 9a       	sbi	0x08, 4	; 8
   10b54:	3c 9a       	sbi	0x07, 4	; 7
   10b56:	8d e0       	ldi	r24, 0x0D	; 13
   10b58:	8a 95       	dec	r24
   10b5a:	f1 f7       	brne	.-4      	; 0x10b58 <gpib_bus_init+0x2c>
   10b5c:	00 00       	nop
   10b5e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10b62:	82 ff       	sbrs	r24, 2
   10b64:	0a c0       	rjmp	.+20     	; 0x10b7a <gpib_bus_init+0x4e>
   10b66:	87 eb       	ldi	r24, 0xB7	; 183
   10b68:	91 e1       	ldi	r25, 0x11	; 17
   10b6a:	1f 92       	push	r1
   10b6c:	9f 93       	push	r25
   10b6e:	8f 93       	push	r24
   10b70:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   10b74:	0f 90       	pop	r0
   10b76:	0f 90       	pop	r0
   10b78:	0f 90       	pop	r0
   10b7a:	08 95       	ret

00010b7c <gpib_state_init>:
   10b7c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10b80:	82 ff       	sbrs	r24, 2
   10b82:	0a c0       	rjmp	.+20     	; 0x10b98 <gpib_state_init+0x1c>
   10b84:	84 ea       	ldi	r24, 0xA4	; 164
   10b86:	91 e1       	ldi	r25, 0x11	; 17
   10b88:	1f 92       	push	r1
   10b8a:	9f 93       	push	r25
   10b8c:	8f 93       	push	r24
   10b8e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   10b92:	0f 90       	pop	r0
   10b94:	0f 90       	pop	r0
   10b96:	0f 90       	pop	r0
   10b98:	05 de       	rcall	.-1014   	; 0x107a4 <ppr_init>
   10b9a:	0e 94 f0 8f 	call	0x11fe0	; 0x11fe0 <listen_cleanup>
   10b9e:	0e 94 00 91 	call	0x12200	; 0x12200 <talk_cleanup>
   10ba2:	10 92 e3 1d 	sts	0x1DE3, r1	; 0x801de3 <spoll>
   10ba6:	10 92 e6 1d 	sts	0x1DE6, r1	; 0x801de6 <talking>
   10baa:	10 92 e9 1d 	sts	0x1DE9, r1	; 0x801de9 <talking_last>
   10bae:	10 92 e8 1d 	sts	0x1DE8, r1	; 0x801de8 <listening>
   10bb2:	10 92 e2 1d 	sts	0x1DE2, r1	; 0x801de2 <listening_last>
   10bb6:	10 92 e1 1b 	sts	0x1BE1, r1	; 0x801be1 <lastcmd+0x1>
   10bba:	10 92 e0 1b 	sts	0x1BE0, r1	; 0x801be0 <lastcmd>
   10bbe:	10 92 e5 1d 	sts	0x1DE5, r1	; 0x801de5 <current+0x1>
   10bc2:	10 92 e4 1d 	sts	0x1DE4, r1	; 0x801de4 <current>
   10bc6:	10 92 e7 1d 	sts	0x1DE7, r1	; 0x801de7 <secondary>
   10bca:	08 95       	ret

00010bcc <gpib_enable_PPR>:
   10bcc:	cf 93       	push	r28
   10bce:	df 93       	push	r29
   10bd0:	ec 01       	movw	r28, r24
   10bd2:	88 30       	cpi	r24, 0x08	; 8
   10bd4:	91 05       	cpc	r25, r1
   10bd6:	78 f0       	brcs	.+30     	; 0x10bf6 <gpib_enable_PPR+0x2a>
   10bd8:	df 93       	push	r29
   10bda:	cf 93       	push	r28
   10bdc:	8e e7       	ldi	r24, 0x7E	; 126
   10bde:	91 e1       	ldi	r25, 0x11	; 17
   10be0:	1f 92       	push	r1
   10be2:	9f 93       	push	r25
   10be4:	8f 93       	push	r24
   10be6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   10bea:	0f 90       	pop	r0
   10bec:	0f 90       	pop	r0
   10bee:	0f 90       	pop	r0
   10bf0:	0f 90       	pop	r0
   10bf2:	0f 90       	pop	r0
   10bf4:	19 c0       	rjmp	.+50     	; 0x10c28 <gpib_enable_PPR+0x5c>
   10bf6:	e7 dd       	rcall	.-1074   	; 0x107c6 <ppr_bit_set>
   10bf8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10bfc:	81 ff       	sbrs	r24, 1
   10bfe:	14 c0       	rjmp	.+40     	; 0x10c28 <gpib_enable_PPR+0x5c>
   10c00:	cd dd       	rcall	.-1126   	; 0x1079c <ppr_reg>
   10c02:	1f 92       	push	r1
   10c04:	8f 93       	push	r24
   10c06:	df 93       	push	r29
   10c08:	cf 93       	push	r28
   10c0a:	83 e6       	ldi	r24, 0x63	; 99
   10c0c:	91 e1       	ldi	r25, 0x11	; 17
   10c0e:	1f 92       	push	r1
   10c10:	9f 93       	push	r25
   10c12:	8f 93       	push	r24
   10c14:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   10c18:	8d b7       	in	r24, 0x3d	; 61
   10c1a:	9e b7       	in	r25, 0x3e	; 62
   10c1c:	07 96       	adiw	r24, 0x07	; 7
   10c1e:	0f b6       	in	r0, 0x3f	; 63
   10c20:	f8 94       	cli
   10c22:	9e bf       	out	0x3e, r25	; 62
   10c24:	0f be       	out	0x3f, r0	; 63
   10c26:	8d bf       	out	0x3d, r24	; 61
   10c28:	df 91       	pop	r29
   10c2a:	cf 91       	pop	r28
   10c2c:	08 95       	ret

00010c2e <gpib_disable_PPR>:
   10c2e:	cf 93       	push	r28
   10c30:	df 93       	push	r29
   10c32:	ec 01       	movw	r28, r24
   10c34:	88 30       	cpi	r24, 0x08	; 8
   10c36:	91 05       	cpc	r25, r1
   10c38:	78 f0       	brcs	.+30     	; 0x10c58 <gpib_disable_PPR+0x2a>
   10c3a:	df 93       	push	r29
   10c3c:	cf 93       	push	r28
   10c3e:	8c e3       	ldi	r24, 0x3C	; 60
   10c40:	91 e1       	ldi	r25, 0x11	; 17
   10c42:	1f 92       	push	r1
   10c44:	9f 93       	push	r25
   10c46:	8f 93       	push	r24
   10c48:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   10c4c:	0f 90       	pop	r0
   10c4e:	0f 90       	pop	r0
   10c50:	0f 90       	pop	r0
   10c52:	0f 90       	pop	r0
   10c54:	0f 90       	pop	r0
   10c56:	19 c0       	rjmp	.+50     	; 0x10c8a <gpib_disable_PPR+0x5c>
   10c58:	c3 dd       	rcall	.-1146   	; 0x107e0 <ppr_bit_clr>
   10c5a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10c5e:	81 ff       	sbrs	r24, 1
   10c60:	14 c0       	rjmp	.+40     	; 0x10c8a <gpib_disable_PPR+0x5c>
   10c62:	9c dd       	rcall	.-1224   	; 0x1079c <ppr_reg>
   10c64:	1f 92       	push	r1
   10c66:	8f 93       	push	r24
   10c68:	df 93       	push	r29
   10c6a:	cf 93       	push	r28
   10c6c:	81 e2       	ldi	r24, 0x21	; 33
   10c6e:	91 e1       	ldi	r25, 0x11	; 17
   10c70:	1f 92       	push	r1
   10c72:	9f 93       	push	r25
   10c74:	8f 93       	push	r24
   10c76:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   10c7a:	8d b7       	in	r24, 0x3d	; 61
   10c7c:	9e b7       	in	r25, 0x3e	; 62
   10c7e:	07 96       	adiw	r24, 0x07	; 7
   10c80:	0f b6       	in	r0, 0x3f	; 63
   10c82:	f8 94       	cli
   10c84:	9e bf       	out	0x3e, r25	; 62
   10c86:	0f be       	out	0x3f, r0	; 63
   10c88:	8d bf       	out	0x3d, r24	; 61
   10c8a:	df 91       	pop	r29
   10c8c:	cf 91       	pop	r28
   10c8e:	08 95       	ret

00010c90 <gpib_assert_ifc>:
   10c90:	5c 98       	cbi	0x0b, 4	; 11
   10c92:	54 9a       	sbi	0x0a, 4	; 10
   10c94:	6a ef       	ldi	r22, 0xFA	; 250
   10c96:	70 e0       	ldi	r23, 0x00	; 0
   10c98:	80 e0       	ldi	r24, 0x00	; 0
   10c9a:	90 e0       	ldi	r25, 0x00	; 0
   10c9c:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <delayus>
   10ca0:	54 98       	cbi	0x0a, 4	; 10
   10ca2:	6a ef       	ldi	r22, 0xFA	; 250
   10ca4:	70 e0       	ldi	r23, 0x00	; 0
   10ca6:	80 e0       	ldi	r24, 0x00	; 0
   10ca8:	90 e0       	ldi	r25, 0x00	; 0
   10caa:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <delayus>
   10cae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10cb2:	82 ff       	sbrs	r24, 2
   10cb4:	0a c0       	rjmp	.+20     	; 0x10cca <gpib_assert_ifc+0x3a>
   10cb6:	82 ef       	ldi	r24, 0xF2	; 242
   10cb8:	90 e1       	ldi	r25, 0x10	; 16
   10cba:	1f 92       	push	r1
   10cbc:	9f 93       	push	r25
   10cbe:	8f 93       	push	r24
   10cc0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   10cc4:	0f 90       	pop	r0
   10cc6:	0f 90       	pop	r0
   10cc8:	0f 90       	pop	r0
   10cca:	08 95       	ret

00010ccc <gpib_unread>:
   10ccc:	cf 93       	push	r28
   10cce:	df 93       	push	r29
   10cd0:	ec 01       	movw	r28, r24
   10cd2:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <gpib_unread_f>
   10cd6:	81 11       	cpse	r24, r1
   10cd8:	08 c0       	rjmp	.+16     	; 0x10cea <gpib_unread+0x1e>
   10cda:	d0 93 eb 1d 	sts	0x1DEB, r29	; 0x801deb <gpib_unread_data+0x1>
   10cde:	c0 93 ea 1d 	sts	0x1DEA, r28	; 0x801dea <gpib_unread_data>
   10ce2:	81 e0       	ldi	r24, 0x01	; 1
   10ce4:	80 93 5c 18 	sts	0x185C, r24	; 0x80185c <gpib_unread_f>
   10ce8:	12 c0       	rjmp	.+36     	; 0x10d0e <gpib_unread+0x42>
   10cea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10cee:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10cf2:	85 70       	andi	r24, 0x05	; 5
   10cf4:	99 27       	eor	r25, r25
   10cf6:	89 2b       	or	r24, r25
   10cf8:	51 f0       	breq	.+20     	; 0x10d0e <gpib_unread+0x42>
   10cfa:	8f ea       	ldi	r24, 0xAF	; 175
   10cfc:	90 e1       	ldi	r25, 0x10	; 16
   10cfe:	1f 92       	push	r1
   10d00:	9f 93       	push	r25
   10d02:	8f 93       	push	r24
   10d04:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   10d08:	0f 90       	pop	r0
   10d0a:	0f 90       	pop	r0
   10d0c:	0f 90       	pop	r0
   10d0e:	ce 01       	movw	r24, r28
   10d10:	df 91       	pop	r29
   10d12:	cf 91       	pop	r28
   10d14:	08 95       	ret

00010d16 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10d16:	11 b8       	out	0x01, r1	; 1
   10d18:	80 b1       	in	r24, 0x00	; 0
   10d1a:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10d1c:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10d1e:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10d20:	08 95       	ret

00010d22 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10d22:	4e 99       	sbic	0x09, 6	; 9
   10d24:	03 c0       	rjmp	.+6      	; 0x10d2c <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10d26:	80 e0       	ldi	r24, 0x00	; 0
   10d28:	94 e0       	ldi	r25, 0x04	; 4
   10d2a:	02 c0       	rjmp	.+4      	; 0x10d30 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10d2c:	80 e0       	ldi	r24, 0x00	; 0
   10d2e:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10d30:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10d32:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10d34:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10d36:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10d38:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10d3a:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10d3c:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10d3e:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10d40:	08 95       	ret

00010d42 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10d42:	19 99       	sbic	0x03, 1	; 3
   10d44:	03 c0       	rjmp	.+6      	; 0x10d4c <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10d46:	80 e0       	ldi	r24, 0x00	; 0
   10d48:	90 e2       	ldi	r25, 0x20	; 32
   10d4a:	02 c0       	rjmp	.+4      	; 0x10d50 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10d4c:	80 e0       	ldi	r24, 0x00	; 0
   10d4e:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10d50:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10d52:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10d54:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10d56:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10d58:	08 95       	ret

00010d5a <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10d5a:	2f 92       	push	r2
   10d5c:	3f 92       	push	r3
   10d5e:	4f 92       	push	r4
   10d60:	6f 92       	push	r6
   10d62:	7f 92       	push	r7
   10d64:	8f 92       	push	r8
   10d66:	cf 92       	push	r12
   10d68:	df 92       	push	r13
   10d6a:	ef 92       	push	r14
   10d6c:	1f 93       	push	r17
   10d6e:	cf 93       	push	r28
   10d70:	df 93       	push	r29
   10d72:	cd b7       	in	r28, 0x3d	; 61
   10d74:	de b7       	in	r29, 0x3e	; 62
   10d76:	28 97       	sbiw	r28, 0x08	; 8
   10d78:	0f b6       	in	r0, 0x3f	; 63
   10d7a:	f8 94       	cli
   10d7c:	de bf       	out	0x3e, r29	; 62
   10d7e:	0f be       	out	0x3f, r0	; 63
   10d80:	cd bf       	out	0x3d, r28	; 61
   10d82:	98 87       	std	Y+8, r25	; 0x08
   10d84:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   10d86:	80 e0       	ldi	r24, 0x00	; 0
   10d88:	90 e0       	ldi	r25, 0x00	; 0
   10d8a:	ad de       	rcall	.-678    	; 0x10ae6 <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10d8c:	64 ef       	ldi	r22, 0xF4	; 244
   10d8e:	71 e0       	ldi	r23, 0x01	; 1
   10d90:	80 e0       	ldi	r24, 0x00	; 0
   10d92:	90 e0       	ldi	r25, 0x00	; 0
   10d94:	9e de       	rcall	.-708    	; 0x10ad2 <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   10d96:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   10d98:	8d e1       	ldi	r24, 0x1D	; 29
   10d9a:	90 e1       	ldi	r25, 0x10	; 16
   10d9c:	6c 01       	movw	r12, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NDAC==1>\n");
   10d9e:	87 e3       	ldi	r24, 0x37	; 55
   10da0:	90 e1       	ldi	r25, 0x10	; 16
   10da2:	3c 01       	movw	r6, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==0>\n");
   10da4:	82 e5       	ldi	r24, 0x52	; 82
   10da6:	90 e1       	ldi	r25, 0x10	; 16
   10da8:	1c 01       	movw	r2, r24
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10daa:	8d e6       	ldi	r24, 0x6D	; 109
   10dac:	90 e1       	ldi	r25, 0x10	; 16
   10dae:	9c 01       	movw	r18, r24
   10db0:	40 e0       	ldi	r20, 0x00	; 0
   10db2:	29 83       	std	Y+1, r18	; 0x01
   10db4:	3a 83       	std	Y+2, r19	; 0x02
   10db6:	4b 83       	std	Y+3, r20	; 0x03
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   10db8:	85 e9       	ldi	r24, 0x95	; 149
   10dba:	90 e1       	ldi	r25, 0x10	; 16
   10dbc:	9c 01       	movw	r18, r24
   10dbe:	40 e0       	ldi	r20, 0x00	; 0
   10dc0:	2c 83       	std	Y+4, r18	; 0x04
   10dc2:	3d 83       	std	Y+5, r19	; 0x05
   10dc4:	4e 83       	std	Y+6, r20	; 0x06
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   10dc6:	80 e0       	ldi	r24, 0x00	; 0
   10dc8:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   10dcc:	89 2b       	or	r24, r25
   10dce:	09 f0       	breq	.+2      	; 0x10dd2 <gpib_write_byte+0x78>
   10dd0:	17 c1       	rjmp	.+558    	; 0x11000 <gpib_write_byte+0x2a6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10dd2:	4c 99       	sbic	0x09, 4	; 9
   10dd4:	07 c0       	rjmp	.+14     	; 0x10de4 <gpib_write_byte+0x8a>
        {
            ch |= IFC_FLAG;
   10dd6:	8f 81       	ldd	r24, Y+7	; 0x07
   10dd8:	98 85       	ldd	r25, Y+8	; 0x08
   10dda:	90 61       	ori	r25, 0x10	; 16
   10ddc:	98 87       	std	Y+8, r25	; 0x08
			gpib_bus_init();
   10dde:	8f 83       	std	Y+7, r24	; 0x07
   10de0:	a5 de       	rcall	.-694    	; 0x10b2c <gpib_bus_init>
            break;
   10de2:	0e c1       	rjmp	.+540    	; 0x11000 <gpib_write_byte+0x2a6>
        }

        switch(tx_state)
   10de4:	81 2f       	mov	r24, r17
   10de6:	90 e0       	ldi	r25, 0x00	; 0
   10de8:	8a 30       	cpi	r24, 0x0A	; 10
   10dea:	91 05       	cpc	r25, r1
   10dec:	08 f0       	brcs	.+2      	; 0x10df0 <gpib_write_byte+0x96>
   10dee:	fe c0       	rjmp	.+508    	; 0x10fec <gpib_write_byte+0x292>
   10df0:	fc 01       	movw	r30, r24
   10df2:	e3 54       	subi	r30, 0x43	; 67
   10df4:	ff 4f       	sbci	r31, 0xFF	; 255
   10df6:	0c 94 f1 e4 	jmp	0x1c9e2	; 0x1c9e2 <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   10dfa:	19 9b       	sbis	0x03, 1	; 3
   10dfc:	12 c0       	rjmp	.+36     	; 0x10e22 <gpib_write_byte+0xc8>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   10dfe:	42 9a       	sbi	0x08, 2	; 8
   10e00:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   10e02:	44 98       	cbi	0x08, 4	; 8
   10e04:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   10e06:	2f 81       	ldd	r18, Y+7	; 0x07
   10e08:	38 85       	ldd	r19, Y+8	; 0x08
   10e0a:	32 ff       	sbrs	r19, 2
   10e0c:	03 c0       	rjmp	.+6      	; 0x10e14 <gpib_write_byte+0xba>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   10e0e:	5e 98       	cbi	0x0b, 6	; 11
   10e10:	56 9a       	sbi	0x0a, 6	; 10
   10e12:	01 c0       	rjmp	.+2      	; 0x10e16 <gpib_write_byte+0xbc>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   10e14:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   10e16:	64 ef       	ldi	r22, 0xF4	; 244
   10e18:	71 e0       	ldi	r23, 0x01	; 1
   10e1a:	80 e0       	ldi	r24, 0x00	; 0
   10e1c:	90 e0       	ldi	r25, 0x00	; 0
   10e1e:	59 de       	rcall	.-846    	; 0x10ad2 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   10e20:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10e22:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   10e26:	88 23       	and	r24, r24
   10e28:	71 f2       	breq	.-100    	; 0x10dc6 <gpib_write_byte+0x6c>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   10e2a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10e2e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10e32:	85 70       	andi	r24, 0x05	; 5
   10e34:	99 27       	eor	r25, r25
   10e36:	89 2b       	or	r24, r25
   10e38:	39 f1       	breq	.+78     	; 0x10e88 <gpib_write_byte+0x12e>
                        printf("<BUS waiting for DAV==1>\n");
   10e3a:	1f 92       	push	r1
   10e3c:	3d 81       	ldd	r19, Y+5	; 0x05
   10e3e:	3f 93       	push	r19
   10e40:	4c 81       	ldd	r20, Y+4	; 0x04
   10e42:	4f 93       	push	r20
   10e44:	1c c0       	rjmp	.+56     	; 0x10e7e <gpib_write_byte+0x124>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   10e46:	4a 9b       	sbis	0x09, 2	; 9
   10e48:	08 c0       	rjmp	.+16     	; 0x10e5a <gpib_write_byte+0x100>
   10e4a:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   10e4c:	06 c0       	rjmp	.+12     	; 0x10e5a <gpib_write_byte+0x100>
   10e4e:	64 ef       	ldi	r22, 0xF4	; 244
   10e50:	71 e0       	ldi	r23, 0x01	; 1
   10e52:	80 e0       	ldi	r24, 0x00	; 0
   10e54:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   10e56:	3d de       	rcall	.-902    	; 0x10ad2 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10e58:	12 e0       	ldi	r17, 0x02	; 2
   10e5a:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   10e5e:	88 23       	and	r24, r24
   10e60:	09 f4       	brne	.+2      	; 0x10e64 <gpib_write_byte+0x10a>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   10e62:	b1 cf       	rjmp	.-158    	; 0x10dc6 <gpib_write_byte+0x6c>
   10e64:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10e68:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10e6c:	85 70       	andi	r24, 0x05	; 5
   10e6e:	99 27       	eor	r25, r25
   10e70:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10e72:	51 f0       	breq	.+20     	; 0x10e88 <gpib_write_byte+0x12e>
   10e74:	1f 92       	push	r1
   10e76:	9a 81       	ldd	r25, Y+2	; 0x02
   10e78:	9f 93       	push	r25
   10e7a:	29 81       	ldd	r18, Y+1	; 0x01
   10e7c:	2f 93       	push	r18
   10e7e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   10e82:	0f 90       	pop	r0
   10e84:	0f 90       	pop	r0
#endif
                    ch |= TIMEOUT_FLAG;
   10e86:	0f 90       	pop	r0
   10e88:	8f 81       	ldd	r24, Y+7	; 0x07
   10e8a:	98 85       	ldd	r25, Y+8	; 0x08
   10e8c:	90 64       	ori	r25, 0x40	; 64
   10e8e:	98 87       	std	Y+8, r25	; 0x08
   10e90:	8f 83       	std	Y+7, r24	; 0x07
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   10e92:	b4 c0       	rjmp	.+360    	; 0x10ffc <gpib_write_byte+0x2a2>
   10e94:	2f 81       	ldd	r18, Y+7	; 0x07
   10e96:	38 85       	ldd	r19, Y+8	; 0x08
   10e98:	30 ff       	sbrs	r19, 0
                    GPIB_IO_LOW(EOI);
   10e9a:	03 c0       	rjmp	.+6      	; 0x10ea2 <gpib_write_byte+0x148>
   10e9c:	28 98       	cbi	0x05, 0	; 5
   10e9e:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10ea0:	01 c0       	rjmp	.+2      	; 0x10ea4 <gpib_write_byte+0x14a>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10ea2:	20 98       	cbi	0x04, 0	; 4
   10ea4:	8f ef       	ldi	r24, 0xFF	; 255
   10ea6:	81 b9       	out	0x01, r24	; 1
   10ea8:	8f 81       	ldd	r24, Y+7	; 0x07
   10eaa:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   10eac:	82 b9       	out	0x02, r24	; 2
   10eae:	43 9a       	sbi	0x08, 3	; 8
   10eb0:	3b 9a       	sbi	0x07, 3	; 7
   10eb2:	3d e0       	ldi	r19, 0x0D	; 13
   10eb4:	3a 95       	dec	r19
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10eb6:	f1 f7       	brne	.-4      	; 0x10eb4 <gpib_write_byte+0x15a>
   10eb8:	00 00       	nop
   10eba:	64 ef       	ldi	r22, 0xF4	; 244
   10ebc:	71 e0       	ldi	r23, 0x01	; 1
   10ebe:	80 e0       	ldi	r24, 0x00	; 0
   10ec0:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   10ec2:	07 de       	rcall	.-1010   	; 0x10ad2 <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10ec4:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   10ec6:	7f cf       	rjmp	.-258    	; 0x10dc6 <gpib_write_byte+0x6c>
   10ec8:	29 98       	cbi	0x05, 1	; 5
   10eca:	21 9a       	sbi	0x04, 1	; 4
   10ecc:	64 ef       	ldi	r22, 0xF4	; 244
   10ece:	71 e0       	ldi	r23, 0x01	; 1
   10ed0:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   10ed2:	90 e0       	ldi	r25, 0x00	; 0
   10ed4:	fe dd       	rcall	.-1028   	; 0x10ad2 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   10ed6:	14 e0       	ldi	r17, 0x04	; 4
   10ed8:	76 cf       	rjmp	.-276    	; 0x10dc6 <gpib_write_byte+0x6c>
   10eda:	4a 99       	sbic	0x09, 2	; 9
   10edc:	07 c0       	rjmp	.+14     	; 0x10eec <gpib_write_byte+0x192>
   10ede:	64 ef       	ldi	r22, 0xF4	; 244
   10ee0:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10ee2:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   10ee4:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10ee6:	f5 dd       	rcall	.-1046   	; 0x10ad2 <gpib_timeout_set>
   10ee8:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   10eea:	6d cf       	rjmp	.-294    	; 0x10dc6 <gpib_write_byte+0x6c>
   10eec:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10ef0:	88 23       	and	r24, r24
   10ef2:	09 f4       	brne	.+2      	; 0x10ef6 <gpib_write_byte+0x19c>
   10ef4:	68 cf       	rjmp	.-304    	; 0x10dc6 <gpib_write_byte+0x6c>
   10ef6:	8f 81       	ldd	r24, Y+7	; 0x07
   10ef8:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   10efa:	90 64       	ori	r25, 0x40	; 64
   10efc:	98 87       	std	Y+8, r25	; 0x08
   10efe:	8f 83       	std	Y+7, r24	; 0x07
   10f00:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10f04:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10f08:	85 70       	andi	r24, 0x05	; 5
   10f0a:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   10f0c:	89 2b       	or	r24, r25
   10f0e:	09 f4       	brne	.+2      	; 0x10f12 <gpib_write_byte+0x1b8>
   10f10:	75 c0       	rjmp	.+234    	; 0x10ffc <gpib_write_byte+0x2a2>
   10f12:	1f 92       	push	r1
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   10f14:	3f 92       	push	r3
   10f16:	2f 92       	push	r2
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f18:	3f c0       	rjmp	.+126    	; 0x10f98 <gpib_write_byte+0x23e>
   10f1a:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10f1c:	6b c0       	rjmp	.+214    	; 0x10ff4 <gpib_write_byte+0x29a>
   10f1e:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10f22:	88 23       	and	r24, r24
   10f24:	09 f4       	brne	.+2      	; 0x10f28 <gpib_write_byte+0x1ce>
   10f26:	4f cf       	rjmp	.-354    	; 0x10dc6 <gpib_write_byte+0x6c>
   10f28:	2f 81       	ldd	r18, Y+7	; 0x07
   10f2a:	38 85       	ldd	r19, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   10f2c:	30 64       	ori	r19, 0x40	; 64
   10f2e:	38 87       	std	Y+8, r19	; 0x08
   10f30:	2f 83       	std	Y+7, r18	; 0x07
   10f32:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10f36:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10f3a:	85 70       	andi	r24, 0x05	; 5
   10f3c:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   10f3e:	89 2b       	or	r24, r25
   10f40:	09 f4       	brne	.+2      	; 0x10f44 <gpib_write_byte+0x1ea>
   10f42:	5c c0       	rjmp	.+184    	; 0x10ffc <gpib_write_byte+0x2a2>
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10f44:	1f 92       	push	r1
   10f46:	7f 92       	push	r7
   10f48:	6f 92       	push	r6
   10f4a:	26 c0       	rjmp	.+76     	; 0x10f98 <gpib_write_byte+0x23e>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   10f4c:	21 98       	cbi	0x04, 1	; 4
   10f4e:	3d e0       	ldi	r19, 0x0D	; 13
   10f50:	3a 95       	dec	r19
   10f52:	f1 f7       	brne	.-4      	; 0x10f50 <gpib_write_byte+0x1f6>

                gpib_timeout_set(HTIMEOUT);
   10f54:	00 00       	nop
   10f56:	80 e0       	ldi	r24, 0x00	; 0
   10f58:	90 e0       	ldi	r25, 0x00	; 0
   10f5a:	c5 dd       	rcall	.-1142   	; 0x10ae6 <gpib_bus_read_init>
   10f5c:	64 ef       	ldi	r22, 0xF4	; 244
   10f5e:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   10f60:	80 e0       	ldi	r24, 0x00	; 0
                break;
   10f62:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   10f64:	b6 dd       	rcall	.-1172   	; 0x10ad2 <gpib_timeout_set>
   10f66:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f68:	2e cf       	rjmp	.-420    	; 0x10dc6 <gpib_write_byte+0x6c>
   10f6a:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   10f6c:	45 c0       	rjmp	.+138    	; 0x10ff8 <gpib_write_byte+0x29e>
   10f6e:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10f72:	88 23       	and	r24, r24
   10f74:	09 f4       	brne	.+2      	; 0x10f78 <gpib_write_byte+0x21e>
   10f76:	27 cf       	rjmp	.-434    	; 0x10dc6 <gpib_write_byte+0x6c>
   10f78:	8f 81       	ldd	r24, Y+7	; 0x07
   10f7a:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   10f7c:	90 64       	ori	r25, 0x40	; 64
   10f7e:	98 87       	std	Y+8, r25	; 0x08
   10f80:	8f 83       	std	Y+7, r24	; 0x07
   10f82:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10f86:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10f8a:	85 70       	andi	r24, 0x05	; 5
                        printf("<BUS waiting for DAV==1>\n");
   10f8c:	99 27       	eor	r25, r25
   10f8e:	89 2b       	or	r24, r25
   10f90:	a9 f1       	breq	.+106    	; 0x10ffc <gpib_write_byte+0x2a2>
   10f92:	1f 92       	push	r1
   10f94:	df 92       	push	r13
   10f96:	cf 92       	push	r12
   10f98:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   10f9c:	0f 90       	pop	r0
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
#if SDEBUG
                if(debuglevel & (1+4))
   10f9e:	0f 90       	pop	r0
   10fa0:	0f 90       	pop	r0
   10fa2:	2c c0       	rjmp	.+88     	; 0x10ffc <gpib_write_byte+0x2a2>
   10fa4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10fa8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10fac:	85 70       	andi	r24, 0x05	; 5
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   10fae:	99 27       	eor	r25, r25
   10fb0:	89 2b       	or	r24, r25
   10fb2:	c1 f0       	breq	.+48     	; 0x10fe4 <gpib_write_byte+0x28a>
   10fb4:	99 b1       	in	r25, 0x09	; 9
   10fb6:	89 b1       	in	r24, 0x09	; 9
   10fb8:	93 fb       	bst	r25, 3
   10fba:	99 27       	eor	r25, r25
   10fbc:	90 f9       	bld	r25, 0
   10fbe:	1f 92       	push	r1
   10fc0:	9f 93       	push	r25
   10fc2:	82 fb       	bst	r24, 2
   10fc4:	88 27       	eor	r24, r24
   10fc6:	80 f9       	bld	r24, 0
   10fc8:	1f 92       	push	r1
   10fca:	8f 93       	push	r24
   10fcc:	8a e0       	ldi	r24, 0x0A	; 10
   10fce:	90 e1       	ldi	r25, 0x10	; 16
   10fd0:	1f 92       	push	r1
   10fd2:	9f 93       	push	r25
   10fd4:	8f 93       	push	r24
   10fd6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   10fda:	0f b6       	in	r0, 0x3f	; 63
#endif
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   10fdc:	f8 94       	cli
   10fde:	de bf       	out	0x3e, r29	; 62
   10fe0:	0f be       	out	0x3f, r0	; 63
   10fe2:	cd bf       	out	0x3d, r28	; 61
                tx_state = GPIB_TX_DONE;
                break;
   10fe4:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   10fe6:	90 e0       	ldi	r25, 0x00	; 0
   10fe8:	7e dd       	rcall	.-1284   	; 0x10ae6 <gpib_bus_read_init>
   10fea:	0a c0       	rjmp	.+20     	; 0x11000 <gpib_write_byte+0x2a6>
   10fec:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10fee:	09 f0       	breq	.+2      	; 0x10ff2 <gpib_write_byte+0x298>
   10ff0:	ea ce       	rjmp	.-556    	; 0x10dc6 <gpib_write_byte+0x6c>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   10ff2:	06 c0       	rjmp	.+12     	; 0x11000 <gpib_write_byte+0x2a6>
   10ff4:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10ff6:	e7 ce       	rjmp	.-562    	; 0x10dc6 <gpib_write_byte+0x6c>
   10ff8:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10ffa:	e5 ce       	rjmp	.-566    	; 0x10dc6 <gpib_write_byte+0x6c>
   10ffc:	19 e0       	ldi	r17, 0x09	; 9
   10ffe:	e3 ce       	rjmp	.-570    	; 0x10dc6 <gpib_write_byte+0x6c>
   11000:	8f 81       	ldd	r24, Y+7	; 0x07
   11002:	98 85       	ldd	r25, Y+8	; 0x08
   11004:	28 96       	adiw	r28, 0x08	; 8
   11006:	0f b6       	in	r0, 0x3f	; 63
   11008:	f8 94       	cli
   1100a:	de bf       	out	0x3e, r29	; 62
   1100c:	0f be       	out	0x3f, r0	; 63
   1100e:	cd bf       	out	0x3d, r28	; 61
   11010:	df 91       	pop	r29
   11012:	cf 91       	pop	r28
   11014:	1f 91       	pop	r17
   11016:	ef 90       	pop	r14
   11018:	df 90       	pop	r13
   1101a:	cf 90       	pop	r12
   1101c:	8f 90       	pop	r8
   1101e:	7f 90       	pop	r7
   11020:	6f 90       	pop	r6
   11022:	4f 90       	pop	r4
   11024:	3f 90       	pop	r3
   11026:	2f 90       	pop	r2
   11028:	08 95       	ret

0001102a <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   1102a:	cf 93       	push	r28
   1102c:	df 93       	push	r29
   1102e:	ec 01       	movw	r28, r24
    if(fo == NULL)
   11030:	89 2b       	or	r24, r25
   11032:	21 f4       	brne	.+8      	; 0x1103c <gpib_decode_header+0x12>
        fo = stdout;
   11034:	c0 91 b9 1b 	lds	r28, 0x1BB9	; 0x801bb9 <__iob+0x2>
   11038:	d0 91 ba 1b 	lds	r29, 0x1BBA	; 0x801bba <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   1103c:	be 01       	movw	r22, r28
   1103e:	85 e7       	ldi	r24, 0x75	; 117
   11040:	9b e0       	ldi	r25, 0x0B	; 11
   11042:	0e 94 fa 76 	call	0xedf4	; 0xedf4 <fputs>
    fprintf(fo,"GPIB bus state\n");
   11046:	be 01       	movw	r22, r28
   11048:	82 ea       	ldi	r24, 0xA2	; 162
   1104a:	9b e0       	ldi	r25, 0x0B	; 11
   1104c:	0e 94 fa 76 	call	0xedf4	; 0xedf4 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   11050:	be 01       	movw	r22, r28
   11052:	82 eb       	ldi	r24, 0xB2	; 178
   11054:	9b e0       	ldi	r25, 0x0B	; 11
   11056:	0e 94 fa 76 	call	0xedf4	; 0xedf4 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   1105a:	be 01       	movw	r22, r28
   1105c:	86 ec       	ldi	r24, 0xC6	; 198
   1105e:	9b e0       	ldi	r25, 0x0B	; 11
   11060:	0e 94 fa 76 	call	0xedf4	; 0xedf4 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   11064:	be 01       	movw	r22, r28
   11066:	89 ee       	ldi	r24, 0xE9	; 233
   11068:	9b e0       	ldi	r25, 0x0B	; 11
   1106a:	0e 94 fa 76 	call	0xedf4	; 0xedf4 <fputs>
    fprintf(fo,"     A = ATN\n");
   1106e:	be 01       	movw	r22, r28
   11070:	83 e1       	ldi	r24, 0x13	; 19
   11072:	9c e0       	ldi	r25, 0x0C	; 12
   11074:	0e 94 fa 76 	call	0xedf4	; 0xedf4 <fputs>
    fprintf(fo,"      E = EOI\n");
   11078:	be 01       	movw	r22, r28
   1107a:	81 e2       	ldi	r24, 0x21	; 33
   1107c:	9c e0       	ldi	r25, 0x0C	; 12
   1107e:	0e 94 fa 76 	call	0xedf4	; 0xedf4 <fputs>
    fprintf(fo,"       S = SRQ\n");
   11082:	be 01       	movw	r22, r28
   11084:	80 e3       	ldi	r24, 0x30	; 48
   11086:	9c e0       	ldi	r25, 0x0C	; 12
   11088:	0e 94 fa 76 	call	0xedf4	; 0xedf4 <fputs>
    fprintf(fo,"        R = REN\n");
   1108c:	be 01       	movw	r22, r28
   1108e:	80 e4       	ldi	r24, 0x40	; 64
   11090:	9c e0       	ldi	r25, 0x0C	; 12
   11092:	0e 94 fa 76 	call	0xedf4	; 0xedf4 <fputs>
    fprintf(fo,"         I = IFC\n");
   11096:	be 01       	movw	r22, r28
   11098:	81 e5       	ldi	r24, 0x51	; 81
   1109a:	9c e0       	ldi	r25, 0x0C	; 12
   1109c:	0e 94 fa 76 	call	0xedf4	; 0xedf4 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   110a0:	be 01       	movw	r22, r28
   110a2:	83 e6       	ldi	r24, 0x63	; 99
   110a4:	9c e0       	ldi	r25, 0x0C	; 12
   110a6:	0e 94 fa 76 	call	0xedf4	; 0xedf4 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   110aa:	be 01       	movw	r22, r28
   110ac:	85 e8       	ldi	r24, 0x85	; 133
   110ae:	9c e0       	ldi	r25, 0x0C	; 12
   110b0:	0e 94 fa 76 	call	0xedf4	; 0xedf4 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   110b4:	be 01       	movw	r22, r28
   110b6:	8d e9       	ldi	r24, 0x9D	; 157
   110b8:	9c e0       	ldi	r25, 0x0C	; 12
   110ba:	0e 94 fa 76 	call	0xedf4	; 0xedf4 <fputs>
    fprintf(fo,"              GPIB commands\n");
   110be:	be 01       	movw	r22, r28
   110c0:	88 eb       	ldi	r24, 0xB8	; 184
   110c2:	9c e0       	ldi	r25, 0x0C	; 12
   110c4:	0e 94 fa 76 	call	0xedf4	; 0xedf4 <fputs>
}
   110c8:	df 91       	pop	r29
   110ca:	cf 91       	pop	r28
   110cc:	08 95       	ret

000110ce <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   110ce:	a0 e8       	ldi	r26, 0x80	; 128
   110d0:	b0 e0       	ldi	r27, 0x00	; 0
   110d2:	ed e6       	ldi	r30, 0x6D	; 109
   110d4:	f8 e8       	ldi	r31, 0x88	; 136
   110d6:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__prologue_saves__+0xc>
   110da:	8c 01       	movw	r16, r24
   110dc:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   110de:	19 82       	std	Y+1, r1	; 0x01
   110e0:	4c 01       	movw	r8, r24
   110e2:	88 24       	eor	r8, r8
   110e4:	44 e0       	ldi	r20, 0x04	; 4
   110e6:	94 22       	and	r9, r20
   110e8:	ce 01       	movw	r24, r28
   110ea:	01 96       	adiw	r24, 0x01	; 1
   110ec:	6c 01       	movw	r12, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   110ee:	62 30       	cpi	r22, 0x02	; 2
   110f0:	71 05       	cpc	r23, r1
   110f2:	f0 f4       	brcc	.+60     	; 0x11130 <gpib_trace_display+0x62>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   110f4:	81 14       	cp	r8, r1
   110f6:	91 04       	cpc	r9, r1
   110f8:	29 f4       	brne	.+10     	; 0x11104 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   110fa:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   110fc:	90 ee       	ldi	r25, 0xE0	; 224
   110fe:	90 0f       	add	r25, r16
   11100:	9f 35       	cpi	r25, 0x5F	; 95
   11102:	08 f0       	brcs	.+2      	; 0x11106 <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   11104:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11106:	1f 92       	push	r1
   11108:	8f 93       	push	r24
   1110a:	c8 01       	movw	r24, r16
   1110c:	99 27       	eor	r25, r25
   1110e:	9f 93       	push	r25
   11110:	8f 93       	push	r24
   11112:	81 e0       	ldi	r24, 0x01	; 1
   11114:	90 e1       	ldi	r25, 0x10	; 16
   11116:	1f 92       	push	r1
   11118:	9f 93       	push	r25
   1111a:	8f 93       	push	r24
   1111c:	df 92       	push	r13
   1111e:	cf 92       	push	r12
   11120:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <sprintf_P>
   11124:	0f b6       	in	r0, 0x3f	; 63
   11126:	f8 94       	cli
   11128:	de bf       	out	0x3e, r29	; 62
   1112a:	0f be       	out	0x3f, r0	; 63
   1112c:	cd bf       	out	0x3d, r28	; 61
   1112e:	0e c0       	rjmp	.+28     	; 0x1114c <gpib_trace_display+0x7e>
    }
    else
    {
        sprintf(str, "     ");
   11130:	8b ef       	ldi	r24, 0xFB	; 251
   11132:	9f e0       	ldi	r25, 0x0F	; 15
   11134:	1f 92       	push	r1
   11136:	9f 93       	push	r25
   11138:	8f 93       	push	r24
   1113a:	df 92       	push	r13
   1113c:	cf 92       	push	r12
   1113e:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <sprintf_P>
   11142:	0f 90       	pop	r0
   11144:	0f 90       	pop	r0
   11146:	0f 90       	pop	r0
   11148:	0f 90       	pop	r0
   1114a:	0f 90       	pop	r0
    }

    tmp = str + strlen(str);
   1114c:	f6 01       	movw	r30, r12
   1114e:	01 90       	ld	r0, Z+
   11150:	00 20       	and	r0, r0
   11152:	e9 f7       	brne	.-6      	; 0x1114e <gpib_trace_display+0x80>
   11154:	31 97       	sbiw	r30, 0x01	; 1
   11156:	cf 01       	movw	r24, r30
   11158:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   1115a:	81 14       	cp	r8, r1
   1115c:	91 04       	cpc	r9, r1
   1115e:	11 f0       	breq	.+4      	; 0x11164 <gpib_trace_display+0x96>
        *tmp++ = 'A';
   11160:	21 e4       	ldi	r18, 0x41	; 65
   11162:	01 c0       	rjmp	.+2      	; 0x11166 <gpib_trace_display+0x98>
    else
        *tmp++ = '-';
   11164:	2d e2       	ldi	r18, 0x2D	; 45
   11166:	20 83       	st	Z, r18
   11168:	dc 01       	movw	r26, r24
   1116a:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   1116c:	10 ff       	sbrs	r17, 0
   1116e:	02 c0       	rjmp	.+4      	; 0x11174 <gpib_trace_display+0xa6>
        *tmp++ = 'E';
   11170:	25 e4       	ldi	r18, 0x45	; 69
   11172:	01 c0       	rjmp	.+2      	; 0x11176 <gpib_trace_display+0xa8>
    else
        *tmp++ = '-';
   11174:	2d e2       	ldi	r18, 0x2D	; 45
   11176:	fc 01       	movw	r30, r24
   11178:	20 83       	st	Z, r18
   1117a:	fd 01       	movw	r30, r26
   1117c:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   1117e:	11 ff       	sbrs	r17, 1
   11180:	02 c0       	rjmp	.+4      	; 0x11186 <gpib_trace_display+0xb8>
        *tmp++ = 'S';
   11182:	83 e5       	ldi	r24, 0x53	; 83
   11184:	01 c0       	rjmp	.+2      	; 0x11188 <gpib_trace_display+0xba>
    else
        *tmp++ = '-';
   11186:	8d e2       	ldi	r24, 0x2D	; 45
   11188:	8c 93       	st	X, r24
   1118a:	df 01       	movw	r26, r30
   1118c:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   1118e:	13 ff       	sbrs	r17, 3
   11190:	02 c0       	rjmp	.+4      	; 0x11196 <gpib_trace_display+0xc8>
        *tmp++ = 'R';
   11192:	82 e5       	ldi	r24, 0x52	; 82
   11194:	01 c0       	rjmp	.+2      	; 0x11198 <gpib_trace_display+0xca>
    else
        *tmp++ = '-';
   11196:	8d e2       	ldi	r24, 0x2D	; 45
   11198:	80 83       	st	Z, r24
   1119a:	fd 01       	movw	r30, r26
   1119c:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   1119e:	14 ff       	sbrs	r17, 4
   111a0:	02 c0       	rjmp	.+4      	; 0x111a6 <gpib_trace_display+0xd8>
        *tmp++ = 'I';
   111a2:	89 e4       	ldi	r24, 0x49	; 73
   111a4:	01 c0       	rjmp	.+2      	; 0x111a8 <gpib_trace_display+0xda>
    else
        *tmp++ = '-';
   111a6:	8d e2       	ldi	r24, 0x2D	; 45
   111a8:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   111aa:	a1 14       	cp	r10, r1
   111ac:	b1 04       	cpc	r11, r1
   111ae:	d1 f4       	brne	.+52     	; 0x111e4 <gpib_trace_display+0x116>
   111b0:	df 01       	movw	r26, r30
   111b2:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   111b4:	15 ff       	sbrs	r17, 5
   111b6:	02 c0       	rjmp	.+4      	; 0x111bc <gpib_trace_display+0xee>
            *tmp++ = 'P';
   111b8:	80 e5       	ldi	r24, 0x50	; 80
   111ba:	01 c0       	rjmp	.+2      	; 0x111be <gpib_trace_display+0xf0>
        else
            *tmp++ = '-';
   111bc:	8d e2       	ldi	r24, 0x2D	; 45
   111be:	80 83       	st	Z, r24
   111c0:	fd 01       	movw	r30, r26
   111c2:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   111c4:	16 ff       	sbrs	r17, 6
   111c6:	02 c0       	rjmp	.+4      	; 0x111cc <gpib_trace_display+0xfe>
            *tmp++ = 'T';
   111c8:	84 e5       	ldi	r24, 0x54	; 84
   111ca:	01 c0       	rjmp	.+2      	; 0x111ce <gpib_trace_display+0x100>
        else
            *tmp++ = '-';
   111cc:	8d e2       	ldi	r24, 0x2D	; 45
   111ce:	8c 93       	st	X, r24
   111d0:	cf 01       	movw	r24, r30
   111d2:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   111d4:	7c 01       	movw	r14, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   111d6:	17 ff       	sbrs	r17, 7
   111d8:	02 c0       	rjmp	.+4      	; 0x111de <gpib_trace_display+0x110>
            *tmp++ = 'B';
   111da:	82 e4       	ldi	r24, 0x42	; 66
   111dc:	01 c0       	rjmp	.+2      	; 0x111e0 <gpib_trace_display+0x112>
        else
            *tmp++ = '-';
   111de:	8d e2       	ldi	r24, 0x2D	; 45
   111e0:	80 83       	st	Z, r24
   111e2:	08 c0       	rjmp	.+16     	; 0x111f4 <gpib_trace_display+0x126>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   111e4:	8d e2       	ldi	r24, 0x2D	; 45
   111e6:	80 83       	st	Z, r24
        *tmp++ = '-';
   111e8:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   111ea:	7f 01       	movw	r14, r30
   111ec:	43 e0       	ldi	r20, 0x03	; 3
   111ee:	e4 0e       	add	r14, r20
   111f0:	f1 1c       	adc	r15, r1
   111f2:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   111f4:	f7 01       	movw	r30, r14
   111f6:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   111f8:	f1 e0       	ldi	r31, 0x01	; 1
   111fa:	af 1a       	sub	r10, r31
   111fc:	b1 08       	sbc	r11, r1
   111fe:	42 e0       	ldi	r20, 0x02	; 2
   11200:	a4 16       	cp	r10, r20
   11202:	b1 04       	cpc	r11, r1
   11204:	f0 f4       	brcc	.+60     	; 0x11242 <gpib_trace_display+0x174>
    {
        if(status & DAV_FLAG)
   11206:	15 ff       	sbrs	r17, 5
   11208:	03 c0       	rjmp	.+6      	; 0x11210 <gpib_trace_display+0x142>
            strcat(str,"  DAV");
   1120a:	65 ed       	ldi	r22, 0xD5	; 213
   1120c:	7c e0       	ldi	r23, 0x0C	; 12
   1120e:	02 c0       	rjmp	.+4      	; 0x11214 <gpib_trace_display+0x146>
        else
            strcat(str,"     ");
   11210:	62 e3       	ldi	r22, 0x32	; 50
   11212:	78 e0       	ldi	r23, 0x08	; 8
   11214:	c6 01       	movw	r24, r12
   11216:	0e 94 c9 31 	call	0x6392	; 0x6392 <strcat>
        if(status & NRFD_FLAG)
   1121a:	16 ff       	sbrs	r17, 6
   1121c:	03 c0       	rjmp	.+6      	; 0x11224 <gpib_trace_display+0x156>
            strcat(str," NRFD");
   1121e:	6b ed       	ldi	r22, 0xDB	; 219
   11220:	7c e0       	ldi	r23, 0x0C	; 12
   11222:	02 c0       	rjmp	.+4      	; 0x11228 <gpib_trace_display+0x15a>
        else
            strcat(str,"     ");
   11224:	62 e3       	ldi	r22, 0x32	; 50
   11226:	78 e0       	ldi	r23, 0x08	; 8
   11228:	c6 01       	movw	r24, r12
   1122a:	0e 94 c9 31 	call	0x6392	; 0x6392 <strcat>
        if(status & NDAC_FLAG)
   1122e:	17 ff       	sbrs	r17, 7
   11230:	03 c0       	rjmp	.+6      	; 0x11238 <gpib_trace_display+0x16a>
            strcat(str," NDAC");
   11232:	61 ee       	ldi	r22, 0xE1	; 225
   11234:	7c e0       	ldi	r23, 0x0C	; 12
   11236:	02 c0       	rjmp	.+4      	; 0x1123c <gpib_trace_display+0x16e>
        else
            strcat(str,"     ");
   11238:	62 e3       	ldi	r22, 0x32	; 50
   1123a:	78 e0       	ldi	r23, 0x08	; 8
   1123c:	c6 01       	movw	r24, r12
   1123e:	0e 94 c9 31 	call	0x6392	; 0x6392 <strcat>
    }

    if( (status & ATN_FLAG) )
   11242:	81 14       	cp	r8, r1
   11244:	91 04       	cpc	r9, r1
   11246:	09 f4       	brne	.+2      	; 0x1124a <gpib_trace_display+0x17c>
   11248:	58 c0       	rjmp	.+176    	; 0x112fa <gpib_trace_display+0x22c>
    {
        int i;
        int cmd = status & CMD_MASK;
   1124a:	c8 01       	movw	r24, r16
   1124c:	8f 77       	andi	r24, 0x7F	; 127
   1124e:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   11250:	9c 01       	movw	r18, r24
   11252:	20 52       	subi	r18, 0x20	; 32
   11254:	31 09       	sbc	r19, r1
   11256:	2f 31       	cpi	r18, 0x1F	; 31
   11258:	31 05       	cpc	r19, r1
   1125a:	38 f4       	brcc	.+14     	; 0x1126a <gpib_trace_display+0x19c>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   1125c:	0f 71       	andi	r16, 0x1F	; 31
   1125e:	11 27       	eor	r17, r17
   11260:	1f 93       	push	r17
   11262:	0f 93       	push	r16
   11264:	80 ef       	ldi	r24, 0xF0	; 240
   11266:	9f e0       	ldi	r25, 0x0F	; 15
   11268:	0c c0       	rjmp	.+24     	; 0x11282 <gpib_trace_display+0x1b4>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   1126a:	9c 01       	movw	r18, r24
   1126c:	20 54       	subi	r18, 0x40	; 64
   1126e:	31 09       	sbc	r19, r1
   11270:	2f 30       	cpi	r18, 0x0F	; 15
   11272:	31 05       	cpc	r19, r1
   11274:	98 f4       	brcc	.+38     	; 0x1129c <gpib_trace_display+0x1ce>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   11276:	0f 71       	andi	r16, 0x1F	; 31
   11278:	11 27       	eor	r17, r17
   1127a:	1f 93       	push	r17
   1127c:	0f 93       	push	r16
   1127e:	85 ee       	ldi	r24, 0xE5	; 229
   11280:	9f e0       	ldi	r25, 0x0F	; 15
   11282:	1f 92       	push	r1
   11284:	9f 93       	push	r25
   11286:	8f 93       	push	r24
   11288:	ff 92       	push	r15
   1128a:	ef 92       	push	r14
   1128c:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <sprintf_P>
   11290:	0f b6       	in	r0, 0x3f	; 63
   11292:	f8 94       	cli
   11294:	de bf       	out	0x3e, r29	; 62
   11296:	0f be       	out	0x3f, r0	; 63
   11298:	cd bf       	out	0x3d, r28	; 61
   1129a:	2f c0       	rjmp	.+94     	; 0x112fa <gpib_trace_display+0x22c>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   1129c:	9c 01       	movw	r18, r24
   1129e:	20 56       	subi	r18, 0x60	; 96
   112a0:	31 09       	sbc	r19, r1
   112a2:	20 31       	cpi	r18, 0x10	; 16
   112a4:	31 05       	cpc	r19, r1
   112a6:	28 f0       	brcs	.+10     	; 0x112b2 <gpib_trace_display+0x1e4>
   112a8:	e9 e8       	ldi	r30, 0x89	; 137
   112aa:	f1 e0       	ldi	r31, 0x01	; 1
   112ac:	00 e0       	ldi	r16, 0x00	; 0
   112ae:	10 e0       	ldi	r17, 0x00	; 0
   112b0:	09 c0       	rjmp	.+18     	; 0x112c4 <gpib_trace_display+0x1f6>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   112b2:	0f 71       	andi	r16, 0x1F	; 31
   112b4:	11 27       	eor	r17, r17
   112b6:	1f 93       	push	r17
   112b8:	0f 93       	push	r16
   112ba:	8a ed       	ldi	r24, 0xDA	; 218
   112bc:	9f e0       	ldi	r25, 0x0F	; 15
   112be:	e1 cf       	rjmp	.-62     	; 0x11282 <gpib_trace_display+0x1b4>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   112c0:	0f 5f       	subi	r16, 0xFF	; 255
   112c2:	1f 4f       	sbci	r17, 0xFF	; 255
   112c4:	20 81       	ld	r18, Z
   112c6:	31 81       	ldd	r19, Z+1	; 0x01
   112c8:	2f 3f       	cpi	r18, 0xFF	; 255
   112ca:	4f ef       	ldi	r20, 0xFF	; 255
   112cc:	34 07       	cpc	r19, r20
   112ce:	a9 f0       	breq	.+42     	; 0x112fa <gpib_trace_display+0x22c>
   112d0:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   112d2:	82 17       	cp	r24, r18
   112d4:	93 07       	cpc	r25, r19
   112d6:	a1 f7       	brne	.-24     	; 0x112c0 <gpib_trace_display+0x1f2>
                {
                    strcat(tmp," ");
   112d8:	66 e3       	ldi	r22, 0x36	; 54
   112da:	78 e0       	ldi	r23, 0x08	; 8
   112dc:	c7 01       	movw	r24, r14
   112de:	0e 94 c9 31 	call	0x6392	; 0x6392 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   112e2:	00 0f       	add	r16, r16
   112e4:	11 1f       	adc	r17, r17
   112e6:	00 0f       	add	r16, r16
   112e8:	11 1f       	adc	r17, r17
   112ea:	f8 01       	movw	r30, r16
   112ec:	e7 57       	subi	r30, 0x77	; 119
   112ee:	fe 4f       	sbci	r31, 0xFE	; 254
   112f0:	62 81       	ldd	r22, Z+2	; 0x02
   112f2:	73 81       	ldd	r23, Z+3	; 0x03
   112f4:	c7 01       	movw	r24, r14
   112f6:	0e 94 c9 31 	call	0x6392	; 0x6392 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   112fa:	20 91 5d 18 	lds	r18, 0x185D	; 0x80185d <gpib_log_fp>
   112fe:	30 91 5e 18 	lds	r19, 0x185E	; 0x80185e <gpib_log_fp+0x1>
   11302:	80 91 b9 1b 	lds	r24, 0x1BB9	; 0x801bb9 <__iob+0x2>
   11306:	90 91 ba 1b 	lds	r25, 0x1BBA	; 0x801bba <__iob+0x3>
   1130a:	23 2b       	or	r18, r19
   1130c:	21 f4       	brne	.+8      	; 0x11316 <gpib_trace_display+0x248>
        gpib_log_fp = stdout;
   1130e:	90 93 5e 18 	sts	0x185E, r25	; 0x80185e <gpib_log_fp+0x1>
   11312:	80 93 5d 18 	sts	0x185D, r24	; 0x80185d <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11316:	20 91 5d 18 	lds	r18, 0x185D	; 0x80185d <gpib_log_fp>
   1131a:	30 91 5e 18 	lds	r19, 0x185E	; 0x80185e <gpib_log_fp+0x1>
   1131e:	82 17       	cp	r24, r18
   11320:	93 07       	cpc	r25, r19
   11322:	19 f0       	breq	.+6      	; 0x1132a <gpib_trace_display+0x25c>
        puts(str);
   11324:	c6 01       	movw	r24, r12
   11326:	0e 94 12 77 	call	0xee24	; 0xee24 <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   1132a:	df 92       	push	r13
   1132c:	cf 92       	push	r12
   1132e:	87 ee       	ldi	r24, 0xE7	; 231
   11330:	9c e0       	ldi	r25, 0x0C	; 12
   11332:	9f 93       	push	r25
   11334:	8f 93       	push	r24
   11336:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <gpib_log_fp+0x1>
   1133a:	8f 93       	push	r24
   1133c:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <gpib_log_fp>
   11340:	8f 93       	push	r24
   11342:	0e 94 a1 7e 	call	0xfd42	; 0xfd42 <fprintf>
}
   11346:	0f 90       	pop	r0
   11348:	0f 90       	pop	r0
   1134a:	0f 90       	pop	r0
   1134c:	0f 90       	pop	r0
   1134e:	0f 90       	pop	r0
   11350:	0f 90       	pop	r0
   11352:	c0 58       	subi	r28, 0x80	; 128
   11354:	df 4f       	sbci	r29, 0xFF	; 255
   11356:	ec e0       	ldi	r30, 0x0C	; 12
   11358:	0c 94 57 e5 	jmp	0x1caae	; 0x1caae <__epilogue_restores__+0xc>

0001135c <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   1135c:	af 92       	push	r10
   1135e:	bf 92       	push	r11
   11360:	cf 92       	push	r12
   11362:	df 92       	push	r13
   11364:	ff 92       	push	r15
   11366:	0f 93       	push	r16
   11368:	1f 93       	push	r17
   1136a:	cf 93       	push	r28
   1136c:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   1136e:	20 91 5c 18 	lds	r18, 0x185C	; 0x80185c <gpib_unread_f>
   11372:	22 23       	and	r18, r18
   11374:	39 f0       	breq	.+14     	; 0x11384 <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   11376:	10 92 5c 18 	sts	0x185C, r1	; 0x80185c <gpib_unread_f>
        return(gpib_unread_data);
   1137a:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <gpib_unread_data>
   1137e:	90 91 eb 1d 	lds	r25, 0x1DEB	; 0x801deb <gpib_unread_data+0x1>
   11382:	b8 c0       	rjmp	.+368    	; 0x114f4 <gpib_read_byte+0x198>
   11384:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   11386:	81 e0       	ldi	r24, 0x01	; 1
   11388:	90 e0       	ldi	r25, 0x00	; 0
   1138a:	ad db       	rcall	.-2214   	; 0x10ae6 <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   1138c:	c1 14       	cp	r12, r1
   1138e:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   11390:	51 f0       	breq	.+20     	; 0x113a6 <gpib_read_byte+0x4a>
   11392:	c7 dc       	rcall	.-1650   	; 0x10d22 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   11394:	8c 01       	movw	r16, r24
   11396:	d5 dc       	rcall	.-1622   	; 0x10d42 <gpib_handshake_pin_read>
   11398:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   1139a:	19 2b       	or	r17, r25
   1139c:	62 e0       	ldi	r22, 0x02	; 2
   1139e:	70 e0       	ldi	r23, 0x00	; 0
   113a0:	c8 01       	movw	r24, r16
   113a2:	95 de       	rcall	.-726    	; 0x110ce <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   113a4:	02 c0       	rjmp	.+4      	; 0x113aa <gpib_read_byte+0x4e>
   113a6:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   113a8:	10 e0       	ldi	r17, 0x00	; 0
   113aa:	f1 2c       	mov	r15, r1
   113ac:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   113ae:	d0 e0       	ldi	r29, 0x00	; 0
   113b0:	80 e0       	ldi	r24, 0x00	; 0
   113b2:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   113b6:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   113b8:	09 f0       	breq	.+2      	; 0x113bc <gpib_read_byte+0x60>
   113ba:	78 c0       	rjmp	.+240    	; 0x114ac <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   113bc:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   113be:	03 c0       	rjmp	.+6      	; 0x113c6 <gpib_read_byte+0x6a>
   113c0:	d0 61       	ori	r29, 0x10	; 16
   113c2:	b4 db       	rcall	.-2200   	; 0x10b2c <gpib_bus_init>
            break;
        }


        switch(rx_state)
   113c4:	73 c0       	rjmp	.+230    	; 0x114ac <gpib_read_byte+0x150>
   113c6:	8f 2d       	mov	r24, r15
   113c8:	90 e0       	ldi	r25, 0x00	; 0
   113ca:	89 30       	cpi	r24, 0x09	; 9
   113cc:	91 05       	cpc	r25, r1
   113ce:	08 f0       	brcs	.+2      	; 0x113d2 <gpib_read_byte+0x76>
   113d0:	51 c0       	rjmp	.+162    	; 0x11474 <gpib_read_byte+0x118>
   113d2:	fc 01       	movw	r30, r24
   113d4:	e9 53       	subi	r30, 0x39	; 57
   113d6:	ff 4f       	sbci	r31, 0xFF	; 255
   113d8:	0c 94 f1 e4 	jmp	0x1c9e2	; 0x1c9e2 <__tablejump2__>
   113dc:	52 98       	cbi	0x0a, 2	; 10
   113de:	8d e0       	ldi	r24, 0x0D	; 13
   113e0:	8a 95       	dec	r24
   113e2:	f1 f7       	brne	.-4      	; 0x113e0 <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   113e4:	00 00       	nop
   113e6:	ff 24       	eor	r15, r15
   113e8:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   113ea:	7f c0       	rjmp	.+254    	; 0x114ea <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   113ec:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   113ee:	7d c0       	rjmp	.+250    	; 0x114ea <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   113f0:	62 e0       	ldi	r22, 0x02	; 2
   113f2:	f6 2e       	mov	r15, r22
   113f4:	7a c0       	rjmp	.+244    	; 0x114ea <gpib_read_byte+0x18e>
   113f6:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   113f8:	52 9a       	sbi	0x0a, 2	; 10
   113fa:	8d dc       	rcall	.-1766   	; 0x10d16 <gpib_bus_read>
   113fc:	a8 2e       	mov	r10, r24
   113fe:	b1 2c       	mov	r11, r1
                ch |= control_last;
   11400:	90 dc       	rcall	.-1760   	; 0x10d22 <gpib_control_pin_read>
   11402:	8c 01       	movw	r16, r24

                if(trace)
   11404:	c8 2b       	or	r28, r24
   11406:	d9 2b       	or	r29, r25
   11408:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   1140a:	db 29       	or	r29, r11
   1140c:	c1 14       	cp	r12, r1
   1140e:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   11410:	49 f0       	breq	.+18     	; 0x11424 <gpib_read_byte+0xc8>
   11412:	97 dc       	rcall	.-1746   	; 0x10d42 <gpib_handshake_pin_read>
   11414:	08 2b       	or	r16, r24
   11416:	19 2b       	or	r17, r25
   11418:	61 e0       	ldi	r22, 0x01	; 1
   1141a:	70 e0       	ldi	r23, 0x00	; 0
   1141c:	c5 01       	movw	r24, r10
   1141e:	80 2b       	or	r24, r16
   11420:	91 2b       	or	r25, r17
   11422:	55 de       	rcall	.-854    	; 0x110ce <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   11424:	53 98       	cbi	0x0a, 3	; 10
   11426:	8d e0       	ldi	r24, 0x0D	; 13
   11428:	8a 95       	dec	r24
   1142a:	f1 f7       	brne	.-4      	; 0x11428 <gpib_read_byte+0xcc>
   1142c:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1142e:	64 ef       	ldi	r22, 0xF4	; 244
   11430:	71 e0       	ldi	r23, 0x01	; 1
   11432:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   11434:	90 e0       	ldi	r25, 0x00	; 0
   11436:	4d db       	rcall	.-2406   	; 0x10ad2 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   11438:	54 e0       	ldi	r21, 0x04	; 4
   1143a:	f5 2e       	mov	r15, r21
   1143c:	56 c0       	rjmp	.+172    	; 0x114ea <gpib_read_byte+0x18e>
   1143e:	4b 9b       	sbis	0x09, 3	; 9
   11440:	0c c0       	rjmp	.+24     	; 0x1145a <gpib_read_byte+0xfe>
   11442:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11444:	71 e0       	ldi	r23, 0x01	; 1
   11446:	80 e0       	ldi	r24, 0x00	; 0
   11448:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   1144a:	43 db       	rcall	.-2426   	; 0x10ad2 <gpib_timeout_set>
   1144c:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   1144e:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11450:	04 c0       	rjmp	.+8      	; 0x1145a <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   11452:	19 9b       	sbis	0x03, 1	; 3
   11454:	02 c0       	rjmp	.+4      	; 0x1145a <gpib_read_byte+0xfe>
   11456:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   11458:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   1145a:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <gpib_timer+0x8>
   1145e:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   11460:	09 f4       	brne	.+2      	; 0x11464 <gpib_read_byte+0x108>
   11462:	43 c0       	rjmp	.+134    	; 0x114ea <gpib_read_byte+0x18e>
   11464:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   11466:	27 e0       	ldi	r18, 0x07	; 7
   11468:	f2 2e       	mov	r15, r18
   1146a:	3f c0       	rjmp	.+126    	; 0x114ea <gpib_read_byte+0x18e>
   1146c:	81 e0       	ldi	r24, 0x01	; 1
   1146e:	90 e0       	ldi	r25, 0x00	; 0
   11470:	3a db       	rcall	.-2444   	; 0x10ae6 <gpib_bus_read_init>
   11472:	04 c0       	rjmp	.+8      	; 0x1147c <gpib_read_byte+0x120>
   11474:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11476:	d1 04       	cpc	r13, r1
   11478:	99 f0       	breq	.+38     	; 0x114a0 <gpib_read_byte+0x144>
   1147a:	05 c0       	rjmp	.+10     	; 0x11486 <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   1147c:	c1 14       	cp	r12, r1
   1147e:	d1 04       	cpc	r13, r1
   11480:	a9 f0       	breq	.+42     	; 0x114ac <gpib_read_byte+0x150>
   11482:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   11484:	f9 2e       	mov	r15, r25
   11486:	4d dc       	rcall	.-1894   	; 0x10d22 <gpib_control_pin_read>
   11488:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   1148a:	5b dc       	rcall	.-1866   	; 0x10d42 <gpib_handshake_pin_read>
   1148c:	a8 2a       	or	r10, r24
   1148e:	b9 2a       	or	r11, r25
   11490:	a0 16       	cp	r10, r16
   11492:	b1 06       	cpc	r11, r17
   11494:	31 f0       	breq	.+12     	; 0x114a2 <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   11496:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11498:	70 e0       	ldi	r23, 0x00	; 0
   1149a:	c5 01       	movw	r24, r10
   1149c:	18 de       	rcall	.-976    	; 0x110ce <gpib_trace_display>
   1149e:	01 c0       	rjmp	.+2      	; 0x114a2 <gpib_read_byte+0x146>
   114a0:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   114a2:	88 e0       	ldi	r24, 0x08	; 8
   114a4:	f8 16       	cp	r15, r24
   114a6:	11 f0       	breq	.+4      	; 0x114ac <gpib_read_byte+0x150>
   114a8:	85 01       	movw	r16, r10
   114aa:	82 cf       	rjmp	.-252    	; 0x113b0 <gpib_read_byte+0x54>
   114ac:	80 91 e4 1d 	lds	r24, 0x1DE4	; 0x801de4 <current>
   114b0:	90 91 e5 1d 	lds	r25, 0x1DE5	; 0x801de5 <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   114b4:	90 93 e1 1b 	sts	0x1BE1, r25	; 0x801be1 <lastcmd+0x1>
   114b8:	80 93 e0 1b 	sts	0x1BE0, r24	; 0x801be0 <lastcmd>
   114bc:	ce 01       	movw	r24, r28
   114be:	88 27       	eor	r24, r24
        current = 0;
   114c0:	90 7d       	andi	r25, 0xD0	; 208
   114c2:	89 2b       	or	r24, r25
   114c4:	11 f4       	brne	.+4      	; 0x114ca <gpib_read_byte+0x16e>
   114c6:	d2 fd       	sbrc	r29, 2
   114c8:	05 c0       	rjmp	.+10     	; 0x114d4 <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   114ca:	10 92 e5 1d 	sts	0x1DE5, r1	; 0x801de5 <current+0x1>
   114ce:	10 92 e4 1d 	sts	0x1DE4, r1	; 0x801de4 <current>
   114d2:	07 c0       	rjmp	.+14     	; 0x114e2 <gpib_read_byte+0x186>
   114d4:	ce 01       	movw	r24, r28
   114d6:	8f 77       	andi	r24, 0x7F	; 127
   114d8:	99 27       	eor	r25, r25
   114da:	90 93 e5 1d 	sts	0x1DE5, r25	; 0x801de5 <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   114de:	80 93 e4 1d 	sts	0x1DE4, r24	; 0x801de4 <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   114e2:	ce 01       	movw	r24, r28
   114e4:	07 c0       	rjmp	.+14     	; 0x114f4 <gpib_read_byte+0x198>
   114e6:	86 e0       	ldi	r24, 0x06	; 6
   114e8:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   114ea:	c1 14       	cp	r12, r1
   114ec:	d1 04       	cpc	r13, r1
   114ee:	09 f4       	brne	.+2      	; 0x114f2 <gpib_read_byte+0x196>
   114f0:	5f cf       	rjmp	.-322    	; 0x113b0 <gpib_read_byte+0x54>
   114f2:	c9 cf       	rjmp	.-110    	; 0x11486 <gpib_read_byte+0x12a>
   114f4:	df 91       	pop	r29
   114f6:	cf 91       	pop	r28
   114f8:	1f 91       	pop	r17
   114fa:	0f 91       	pop	r16
   114fc:	ff 90       	pop	r15
   114fe:	df 90       	pop	r13
   11500:	cf 90       	pop	r12
   11502:	bf 90       	pop	r11
   11504:	af 90       	pop	r10
   11506:	08 95       	ret

00011508 <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   11508:	60 e0       	ldi	r22, 0x00	; 0
   1150a:	70 e0       	ldi	r23, 0x00	; 0
   1150c:	e0 cd       	rjmp	.-1088   	; 0x110ce <gpib_trace_display>
   1150e:	08 95       	ret

00011510 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11510:	a0 e0       	ldi	r26, 0x00	; 0
   11512:	b0 e0       	ldi	r27, 0x00	; 0
   11514:	ee e8       	ldi	r30, 0x8E	; 142
   11516:	fa e8       	ldi	r31, 0x8A	; 138
   11518:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__prologue_saves__+0x10>
   1151c:	5b 01       	movw	r10, r22
   1151e:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11520:	fa 01       	movw	r30, r20
   11522:	20 81       	ld	r18, Z
   11524:	31 81       	ldd	r19, Z+1	; 0x01
   11526:	22 27       	eor	r18, r18
   11528:	31 83       	std	Z+1, r19	; 0x01
   1152a:	20 83       	st	Z, r18

    if(!size)
   1152c:	67 2b       	or	r22, r23
   1152e:	21 f0       	breq	.+8      	; 0x11538 <gpib_read_str+0x28>
   11530:	7c 01       	movw	r14, r24
   11532:	c0 e0       	ldi	r28, 0x00	; 0
   11534:	d0 e0       	ldi	r29, 0x00	; 0
   11536:	28 c0       	rjmp	.+80     	; 0x11588 <gpib_read_str+0x78>
    {
        if(debuglevel & (1+4))
   11538:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1153c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11540:	85 70       	andi	r24, 0x05	; 5
   11542:	99 27       	eor	r25, r25
   11544:	89 2b       	or	r24, r25
   11546:	09 f4       	brne	.+2      	; 0x1154a <gpib_read_str+0x3a>
   11548:	89 c0       	rjmp	.+274    	; 0x1165c <gpib_read_str+0x14c>
            printf("gpib_read_str: size = 0\n");
   1154a:	81 ec       	ldi	r24, 0xC1	; 193
   1154c:	9f e0       	ldi	r25, 0x0F	; 15
   1154e:	1f 92       	push	r1
   11550:	9f 93       	push	r25
   11552:	8f 93       	push	r24
   11554:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11558:	0f 90       	pop	r0
   1155a:	0f 90       	pop	r0
   1155c:	0f 90       	pop	r0
   1155e:	7e c0       	rjmp	.+252    	; 0x1165c <gpib_read_str+0x14c>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11560:	80 27       	eor	r24, r16
   11562:	91 27       	eor	r25, r17
   11564:	92 fd       	sbrc	r25, 2
   11566:	2e c0       	rjmp	.+92     	; 0x115c4 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11568:	c8 01       	movw	r24, r16
   1156a:	88 27       	eor	r24, r24
   1156c:	94 70       	andi	r25, 0x04	; 4
   1156e:	12 ff       	sbrs	r17, 2
   11570:	49 c0       	rjmp	.+146    	; 0x11604 <gpib_read_str+0xf4>
            buf[ind] = (val & CMD_MASK);
   11572:	20 2f       	mov	r18, r16
   11574:	2f 77       	andi	r18, 0x7F	; 127
   11576:	f7 01       	movw	r30, r14
   11578:	20 83       	st	Z, r18
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;
   1157a:	21 96       	adiw	r28, 0x01	; 1

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1157c:	89 2b       	or	r24, r25
   1157e:	09 f4       	brne	.+2      	; 0x11582 <gpib_read_str+0x72>
   11580:	44 c0       	rjmp	.+136    	; 0x1160a <gpib_read_str+0xfa>
   11582:	ff ef       	ldi	r31, 0xFF	; 255
   11584:	ef 1a       	sub	r14, r31
   11586:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (1+4))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   11588:	ca 15       	cp	r28, r10
   1158a:	db 05       	cpc	r29, r11
   1158c:	0c f0       	brlt	.+2      	; 0x11590 <gpib_read_str+0x80>
   1158e:	47 c0       	rjmp	.+142    	; 0x1161e <gpib_read_str+0x10e>
    {
        val = gpib_read_byte(NO_TRACE);
   11590:	80 e0       	ldi	r24, 0x00	; 0
   11592:	90 e0       	ldi	r25, 0x00	; 0
   11594:	e3 de       	rcall	.-570    	; 0x1135c <gpib_read_byte>
   11596:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & 256)
   11598:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1159c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   115a0:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   115a2:	02 c0       	rjmp	.+4      	; 0x115a8 <gpib_read_str+0x98>
   115a4:	c8 01       	movw	r24, r16
#endif
        if(val & ERROR_MASK)
   115a6:	b0 df       	rcall	.-160    	; 0x11508 <gpib_decode>
   115a8:	98 01       	movw	r18, r16
   115aa:	22 27       	eor	r18, r18
   115ac:	30 7d       	andi	r19, 0xD0	; 208
   115ae:	f6 01       	movw	r30, r12
   115b0:	80 81       	ld	r24, Z
   115b2:	91 81       	ldd	r25, Z+1	; 0x01
   115b4:	21 15       	cp	r18, r1
   115b6:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   115b8:	99 f2       	breq	.-90     	; 0x11560 <gpib_read_str+0x50>
   115ba:	82 2b       	or	r24, r18
   115bc:	93 2b       	or	r25, r19
   115be:	91 83       	std	Z+1, r25	; 0x01
            break;
   115c0:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (1+4))
   115c2:	30 c0       	rjmp	.+96     	; 0x11624 <gpib_read_str+0x114>
   115c4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   115c8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   115cc:	85 70       	andi	r24, 0x05	; 5
   115ce:	99 27       	eor	r25, r25
   115d0:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   115d2:	a9 f0       	breq	.+42     	; 0x115fe <gpib_read_str+0xee>
   115d4:	c8 01       	movw	r24, r16
   115d6:	99 27       	eor	r25, r25
   115d8:	9f 93       	push	r25
   115da:	8f 93       	push	r24
   115dc:	df 93       	push	r29
   115de:	cf 93       	push	r28
   115e0:	84 e9       	ldi	r24, 0x94	; 148
   115e2:	9f e0       	ldi	r25, 0x0F	; 15
   115e4:	1f 92       	push	r1
   115e6:	9f 93       	push	r25
   115e8:	8f 93       	push	r24
   115ea:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   115ee:	ed b7       	in	r30, 0x3d	; 61
   115f0:	fe b7       	in	r31, 0x3e	; 62
   115f2:	37 96       	adiw	r30, 0x07	; 7
   115f4:	0f b6       	in	r0, 0x3f	; 63
   115f6:	f8 94       	cli
   115f8:	fe bf       	out	0x3e, r31	; 62
            gpib_unread(val);
   115fa:	0f be       	out	0x3f, r0	; 63
   115fc:	ed bf       	out	0x3d, r30	; 61
   115fe:	c8 01       	movw	r24, r16
            break;
   11600:	65 db       	rcall	.-2358   	; 0x10ccc <gpib_unread>
        }

        if(val & ATN_FLAG)
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
   11602:	10 c0       	rjmp	.+32     	; 0x11624 <gpib_read_str+0x114>
   11604:	f7 01       	movw	r30, r14
   11606:	00 83       	st	Z, r16
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11608:	b8 cf       	rjmp	.-144    	; 0x1157a <gpib_read_str+0x6a>
   1160a:	10 ff       	sbrs	r17, 0
        {

            if(*status & EOI_FLAG)
   1160c:	ba cf       	rjmp	.-140    	; 0x11582 <gpib_read_str+0x72>
   1160e:	f6 01       	movw	r30, r12
   11610:	80 81       	ld	r24, Z
   11612:	91 81       	ldd	r25, Z+1	; 0x01
   11614:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   11616:	24 c0       	rjmp	.+72     	; 0x11660 <gpib_read_str+0x150>
   11618:	91 60       	ori	r25, 0x01	; 1
   1161a:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   1161c:	80 83       	st	Z, r24
   1161e:	ca 15       	cp	r28, r10
   11620:	db 05       	cpc	r29, r11
    {
        if(debuglevel & (1+4))
   11622:	f1 f0       	breq	.+60     	; 0x11660 <gpib_read_str+0x150>
   11624:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11628:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1162c:	85 70       	andi	r24, 0x05	; 5
   1162e:	99 27       	eor	r25, r25
   11630:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   11632:	b1 f0       	breq	.+44     	; 0x11660 <gpib_read_str+0x150>
   11634:	bf 92       	push	r11
   11636:	af 92       	push	r10
   11638:	df 93       	push	r29
   1163a:	cf 93       	push	r28
   1163c:	8d e6       	ldi	r24, 0x6D	; 109
   1163e:	9f e0       	ldi	r25, 0x0F	; 15
   11640:	1f 92       	push	r1
   11642:	9f 93       	push	r25
   11644:	8f 93       	push	r24
   11646:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1164a:	ed b7       	in	r30, 0x3d	; 61
   1164c:	fe b7       	in	r31, 0x3e	; 62
   1164e:	37 96       	adiw	r30, 0x07	; 7
   11650:	0f b6       	in	r0, 0x3f	; 63
   11652:	f8 94       	cli
   11654:	fe bf       	out	0x3e, r31	; 62
   11656:	0f be       	out	0x3f, r0	; 63
   11658:	ed bf       	out	0x3d, r30	; 61
   1165a:	02 c0       	rjmp	.+4      	; 0x11660 <gpib_read_str+0x150>
   1165c:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return(ind);
}
   1165e:	d0 e0       	ldi	r29, 0x00	; 0
   11660:	ce 01       	movw	r24, r28
   11662:	cd b7       	in	r28, 0x3d	; 61
   11664:	de b7       	in	r29, 0x3e	; 62
   11666:	ea e0       	ldi	r30, 0x0A	; 10
   11668:	0c 94 59 e5 	jmp	0x1cab2	; 0x1cab2 <__epilogue_restores__+0x10>

0001166c <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   1166c:	a0 e0       	ldi	r26, 0x00	; 0
   1166e:	b0 e0       	ldi	r27, 0x00	; 0
   11670:	ec e3       	ldi	r30, 0x3C	; 60
   11672:	fb e8       	ldi	r31, 0x8B	; 139
   11674:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__prologue_saves__+0x10>
   11678:	8b 01       	movw	r16, r22
   1167a:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   1167c:	fa 01       	movw	r30, r20
   1167e:	20 81       	ld	r18, Z
   11680:	31 81       	ldd	r19, Z+1	; 0x01
   11682:	22 27       	eor	r18, r18
   11684:	31 83       	std	Z+1, r19	; 0x01
   11686:	20 83       	st	Z, r18

    if(!size)
   11688:	67 2b       	or	r22, r23
   1168a:	21 f0       	breq	.+8      	; 0x11694 <gpib_write_str+0x28>
   1168c:	6c 01       	movw	r12, r24
   1168e:	c0 e0       	ldi	r28, 0x00	; 0
   11690:	d0 e0       	ldi	r29, 0x00	; 0
   11692:	35 c0       	rjmp	.+106    	; 0x116fe <gpib_write_str+0x92>
    {
        if(debuglevel & (1+4))
   11694:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11698:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1169c:	85 70       	andi	r24, 0x05	; 5
   1169e:	99 27       	eor	r25, r25
   116a0:	89 2b       	or	r24, r25
   116a2:	09 f4       	brne	.+2      	; 0x116a6 <gpib_write_str+0x3a>
   116a4:	54 c0       	rjmp	.+168    	; 0x1174e <gpib_write_str+0xe2>
            printf("gpib_write_str: size = 0\n");
   116a6:	83 e5       	ldi	r24, 0x53	; 83
   116a8:	9f e0       	ldi	r25, 0x0F	; 15
   116aa:	1f 92       	push	r1
   116ac:	9f 93       	push	r25
   116ae:	8f 93       	push	r24
   116b0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   116b4:	0f 90       	pop	r0
   116b6:	0f 90       	pop	r0
   116b8:	0f 90       	pop	r0
   116ba:	49 c0       	rjmp	.+146    	; 0x1174e <gpib_write_str+0xe2>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   116bc:	21 96       	adiw	r28, 0x01	; 1
   116be:	f6 01       	movw	r30, r12
   116c0:	81 91       	ld	r24, Z+
   116c2:	6f 01       	movw	r12, r30
   116c4:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   116c6:	f7 01       	movw	r30, r14
   116c8:	20 81       	ld	r18, Z
   116ca:	31 81       	ldd	r19, Z+1	; 0x01
   116cc:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   116ce:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   116d0:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   116d2:	19 c0       	rjmp	.+50     	; 0x11706 <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   116d4:	42 db       	rcall	.-2428   	; 0x10d5a <gpib_write_byte>
   116d6:	5c 01       	movw	r10, r24
   116d8:	aa 24       	eor	r10, r10
   116da:	f0 ed       	ldi	r31, 0xD0	; 208
   116dc:	bf 22       	and	r11, r31
   116de:	f7 01       	movw	r30, r14
   116e0:	20 81       	ld	r18, Z
   116e2:	31 81       	ldd	r19, Z+1	; 0x01
   116e4:	2a 29       	or	r18, r10
   116e6:	3b 29       	or	r19, r11
   116e8:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & 256)
   116ea:	20 83       	st	Z, r18
   116ec:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   116f0:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
            gpib_decode(val);
   116f4:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   116f6:	08 df       	rcall	.-496    	; 0x11508 <gpib_decode>
   116f8:	a1 14       	cp	r10, r1
   116fa:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (1+4))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   116fc:	49 f4       	brne	.+18     	; 0x11710 <gpib_write_str+0xa4>
   116fe:	c0 17       	cp	r28, r16
   11700:	d1 07       	cpc	r29, r17
   11702:	e4 f2       	brlt	.-72     	; 0x116bc <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   11704:	05 c0       	rjmp	.+10     	; 0x11710 <gpib_write_str+0xa4>
   11706:	0c 17       	cp	r16, r28
   11708:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   1170a:	21 f7       	brne	.-56     	; 0x116d4 <gpib_write_str+0x68>
   1170c:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   1170e:	e2 cf       	rjmp	.-60     	; 0x116d4 <gpib_write_str+0x68>
   11710:	c0 17       	cp	r28, r16
   11712:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (1+4))
   11714:	f1 f0       	breq	.+60     	; 0x11752 <gpib_write_str+0xe6>
   11716:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1171a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1171e:	85 70       	andi	r24, 0x05	; 5
   11720:	99 27       	eor	r25, r25
   11722:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11724:	b1 f0       	breq	.+44     	; 0x11752 <gpib_write_str+0xe6>
   11726:	1f 93       	push	r17
   11728:	0f 93       	push	r16
   1172a:	df 93       	push	r29
   1172c:	cf 93       	push	r28
   1172e:	8b e2       	ldi	r24, 0x2B	; 43
   11730:	9f e0       	ldi	r25, 0x0F	; 15
   11732:	1f 92       	push	r1
   11734:	9f 93       	push	r25
   11736:	8f 93       	push	r24
   11738:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1173c:	8d b7       	in	r24, 0x3d	; 61
   1173e:	9e b7       	in	r25, 0x3e	; 62
   11740:	07 96       	adiw	r24, 0x07	; 7
   11742:	0f b6       	in	r0, 0x3f	; 63
   11744:	f8 94       	cli
   11746:	9e bf       	out	0x3e, r25	; 62
   11748:	0f be       	out	0x3f, r0	; 63
   1174a:	8d bf       	out	0x3d, r24	; 61
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   1174c:	02 c0       	rjmp	.+4      	; 0x11752 <gpib_write_str+0xe6>
   1174e:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (1+4))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   11750:	d0 e0       	ldi	r29, 0x00	; 0
   11752:	ce 01       	movw	r24, r28
   11754:	cd b7       	in	r28, 0x3d	; 61
   11756:	de b7       	in	r29, 0x3e	; 62
   11758:	ea e0       	ldi	r30, 0x0A	; 10
   1175a:	0c 94 59 e5 	jmp	0x1cab2	; 0x1cab2 <__epilogue_restores__+0x10>

0001175e <gpib_file_init>:
   1175e:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <debuglevel+0x1>
   11762:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <debuglevel>
   11766:	8f eb       	ldi	r24, 0xBF	; 191
   11768:	91 e0       	ldi	r25, 0x01	; 1
   1176a:	0e 94 34 97 	call	0x12e68	; 0x12e68 <Read_Config>
   1176e:	18 16       	cp	r1, r24
   11770:	19 06       	cpc	r1, r25
   11772:	b4 f4       	brge	.+44     	; 0x117a0 <gpib_file_init+0x42>
   11774:	9f 93       	push	r25
   11776:	8f 93       	push	r24
   11778:	8f eb       	ldi	r24, 0xBF	; 191
   1177a:	91 e0       	ldi	r25, 0x01	; 1
   1177c:	9f 93       	push	r25
   1177e:	8f 93       	push	r24
   11780:	8a e7       	ldi	r24, 0x7A	; 122
   11782:	94 e1       	ldi	r25, 0x14	; 20
   11784:	1f 92       	push	r1
   11786:	9f 93       	push	r25
   11788:	8f 93       	push	r24
   1178a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1178e:	8d b7       	in	r24, 0x3d	; 61
   11790:	9e b7       	in	r25, 0x3e	; 62
   11792:	07 96       	adiw	r24, 0x07	; 7
   11794:	0f b6       	in	r0, 0x3f	; 63
   11796:	f8 94       	cli
   11798:	9e bf       	out	0x3e, r25	; 62
   1179a:	0f be       	out	0x3f, r0	; 63
   1179c:	8d bf       	out	0x3d, r24	; 61
   1179e:	12 c0       	rjmp	.+36     	; 0x117c4 <gpib_file_init+0x66>
   117a0:	89 2b       	or	r24, r25
   117a2:	81 f0       	breq	.+32     	; 0x117c4 <gpib_file_init+0x66>
   117a4:	8f eb       	ldi	r24, 0xBF	; 191
   117a6:	91 e0       	ldi	r25, 0x01	; 1
   117a8:	9f 93       	push	r25
   117aa:	8f 93       	push	r24
   117ac:	89 e6       	ldi	r24, 0x69	; 105
   117ae:	94 e1       	ldi	r25, 0x14	; 20
   117b0:	1f 92       	push	r1
   117b2:	9f 93       	push	r25
   117b4:	8f 93       	push	r24
   117b6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   117ba:	0f 90       	pop	r0
   117bc:	0f 90       	pop	r0
   117be:	0f 90       	pop	r0
   117c0:	0f 90       	pop	r0
   117c2:	0f 90       	pop	r0
   117c4:	0e 94 ee 95 	call	0x12bdc	; 0x12bdc <set_Config_Defaults>
   117c8:	0e 94 98 70 	call	0xe130	; 0xe130 <mmc_wp_status>
   117cc:	89 2b       	or	r24, r25
   117ce:	51 f0       	breq	.+20     	; 0x117e4 <gpib_file_init+0x86>
   117d0:	80 e5       	ldi	r24, 0x50	; 80
   117d2:	94 e1       	ldi	r25, 0x14	; 20
   117d4:	1f 92       	push	r1
   117d6:	9f 93       	push	r25
   117d8:	8f 93       	push	r24
   117da:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   117de:	0f 90       	pop	r0
   117e0:	0f 90       	pop	r0
   117e2:	0f 90       	pop	r0
   117e4:	08 95       	ret

000117e6 <SS80_is_MLA>:
   117e6:	40 e2       	ldi	r20, 0x20	; 32
   117e8:	50 e0       	ldi	r21, 0x00	; 0
   117ea:	bc 01       	movw	r22, r24
   117ec:	83 e0       	ldi	r24, 0x03	; 3
   117ee:	90 e0       	ldi	r25, 0x00	; 0
   117f0:	8a d6       	rcall	.+3348   	; 0x12506 <find_device>
   117f2:	8f 3f       	cpi	r24, 0xFF	; 255
   117f4:	2f ef       	ldi	r18, 0xFF	; 255
   117f6:	92 07       	cpc	r25, r18
   117f8:	11 f0       	breq	.+4      	; 0x117fe <SS80_is_MLA+0x18>
   117fa:	af c6       	rjmp	.+3422   	; 0x1255a <set_active_device>
   117fc:	08 95       	ret
   117fe:	80 e0       	ldi	r24, 0x00	; 0
   11800:	90 e0       	ldi	r25, 0x00	; 0
   11802:	08 95       	ret

00011804 <SS80_is_MTA>:
   11804:	40 e4       	ldi	r20, 0x40	; 64
   11806:	50 e0       	ldi	r21, 0x00	; 0
   11808:	bc 01       	movw	r22, r24
   1180a:	83 e0       	ldi	r24, 0x03	; 3
   1180c:	90 e0       	ldi	r25, 0x00	; 0
   1180e:	7b d6       	rcall	.+3318   	; 0x12506 <find_device>
   11810:	8f 3f       	cpi	r24, 0xFF	; 255
   11812:	2f ef       	ldi	r18, 0xFF	; 255
   11814:	92 07       	cpc	r25, r18
   11816:	11 f0       	breq	.+4      	; 0x1181c <SS80_is_MTA+0x18>
   11818:	a0 c6       	rjmp	.+3392   	; 0x1255a <set_active_device>
   1181a:	08 95       	ret
   1181c:	80 e0       	ldi	r24, 0x00	; 0
   1181e:	90 e0       	ldi	r25, 0x00	; 0
   11820:	08 95       	ret

00011822 <SS80_is_MSA>:
   11822:	40 e6       	ldi	r20, 0x60	; 96
   11824:	50 e0       	ldi	r21, 0x00	; 0
   11826:	bc 01       	movw	r22, r24
   11828:	83 e0       	ldi	r24, 0x03	; 3
   1182a:	90 e0       	ldi	r25, 0x00	; 0
   1182c:	6c d6       	rcall	.+3288   	; 0x12506 <find_device>
   1182e:	8f 3f       	cpi	r24, 0xFF	; 255
   11830:	2f ef       	ldi	r18, 0xFF	; 255
   11832:	92 07       	cpc	r25, r18
   11834:	11 f0       	breq	.+4      	; 0x1183a <SS80_is_MSA+0x18>
   11836:	91 c6       	rjmp	.+3362   	; 0x1255a <set_active_device>
   11838:	08 95       	ret
   1183a:	80 e0       	ldi	r24, 0x00	; 0
   1183c:	90 e0       	ldi	r25, 0x00	; 0
   1183e:	08 95       	ret

00011840 <AMIGO_is_MLA>:
   11840:	40 e2       	ldi	r20, 0x20	; 32
   11842:	50 e0       	ldi	r21, 0x00	; 0
   11844:	bc 01       	movw	r22, r24
   11846:	81 e0       	ldi	r24, 0x01	; 1
   11848:	90 e0       	ldi	r25, 0x00	; 0
   1184a:	5d d6       	rcall	.+3258   	; 0x12506 <find_device>
   1184c:	8f 3f       	cpi	r24, 0xFF	; 255
   1184e:	2f ef       	ldi	r18, 0xFF	; 255
   11850:	92 07       	cpc	r25, r18
   11852:	11 f0       	breq	.+4      	; 0x11858 <AMIGO_is_MLA+0x18>
   11854:	82 c6       	rjmp	.+3332   	; 0x1255a <set_active_device>
   11856:	08 95       	ret
   11858:	80 e0       	ldi	r24, 0x00	; 0
   1185a:	90 e0       	ldi	r25, 0x00	; 0
   1185c:	08 95       	ret

0001185e <AMIGO_is_MTA>:
   1185e:	40 e4       	ldi	r20, 0x40	; 64
   11860:	50 e0       	ldi	r21, 0x00	; 0
   11862:	bc 01       	movw	r22, r24
   11864:	81 e0       	ldi	r24, 0x01	; 1
   11866:	90 e0       	ldi	r25, 0x00	; 0
   11868:	4e d6       	rcall	.+3228   	; 0x12506 <find_device>
   1186a:	8f 3f       	cpi	r24, 0xFF	; 255
   1186c:	2f ef       	ldi	r18, 0xFF	; 255
   1186e:	92 07       	cpc	r25, r18
   11870:	11 f0       	breq	.+4      	; 0x11876 <AMIGO_is_MTA+0x18>
   11872:	73 c6       	rjmp	.+3302   	; 0x1255a <set_active_device>
   11874:	08 95       	ret
   11876:	80 e0       	ldi	r24, 0x00	; 0
   11878:	90 e0       	ldi	r25, 0x00	; 0
   1187a:	08 95       	ret

0001187c <AMIGO_is_MSA>:
   1187c:	40 e6       	ldi	r20, 0x60	; 96
   1187e:	50 e0       	ldi	r21, 0x00	; 0
   11880:	bc 01       	movw	r22, r24
   11882:	81 e0       	ldi	r24, 0x01	; 1
   11884:	90 e0       	ldi	r25, 0x00	; 0
   11886:	3f d6       	rcall	.+3198   	; 0x12506 <find_device>
   11888:	8f 3f       	cpi	r24, 0xFF	; 255
   1188a:	2f ef       	ldi	r18, 0xFF	; 255
   1188c:	92 07       	cpc	r25, r18
   1188e:	11 f0       	breq	.+4      	; 0x11894 <AMIGO_is_MSA+0x18>
   11890:	64 c6       	rjmp	.+3272   	; 0x1255a <set_active_device>
   11892:	08 95       	ret
   11894:	80 e0       	ldi	r24, 0x00	; 0
   11896:	90 e0       	ldi	r25, 0x00	; 0
   11898:	08 95       	ret

0001189a <PRINTER_is_MLA>:
   1189a:	40 e2       	ldi	r20, 0x20	; 32
   1189c:	50 e0       	ldi	r21, 0x00	; 0
   1189e:	bc 01       	movw	r22, r24
   118a0:	84 e0       	ldi	r24, 0x04	; 4
   118a2:	90 e0       	ldi	r25, 0x00	; 0
   118a4:	30 d6       	rcall	.+3168   	; 0x12506 <find_device>
   118a6:	8f 3f       	cpi	r24, 0xFF	; 255
   118a8:	2f ef       	ldi	r18, 0xFF	; 255
   118aa:	92 07       	cpc	r25, r18
   118ac:	11 f0       	breq	.+4      	; 0x118b2 <PRINTER_is_MLA+0x18>
   118ae:	55 c6       	rjmp	.+3242   	; 0x1255a <set_active_device>
   118b0:	08 95       	ret
   118b2:	80 e0       	ldi	r24, 0x00	; 0
   118b4:	90 e0       	ldi	r25, 0x00	; 0
   118b6:	08 95       	ret

000118b8 <PRINTER_is_MTA>:
   118b8:	40 e4       	ldi	r20, 0x40	; 64
   118ba:	50 e0       	ldi	r21, 0x00	; 0
   118bc:	bc 01       	movw	r22, r24
   118be:	84 e0       	ldi	r24, 0x04	; 4
   118c0:	90 e0       	ldi	r25, 0x00	; 0
   118c2:	21 d6       	rcall	.+3138   	; 0x12506 <find_device>
   118c4:	8f 3f       	cpi	r24, 0xFF	; 255
   118c6:	2f ef       	ldi	r18, 0xFF	; 255
   118c8:	92 07       	cpc	r25, r18
   118ca:	11 f0       	breq	.+4      	; 0x118d0 <PRINTER_is_MTA+0x18>
   118cc:	46 c6       	rjmp	.+3212   	; 0x1255a <set_active_device>
   118ce:	08 95       	ret
   118d0:	80 e0       	ldi	r24, 0x00	; 0
   118d2:	90 e0       	ldi	r25, 0x00	; 0
   118d4:	08 95       	ret

000118d6 <gpib_init_devices>:
   118d6:	2a d9       	rcall	.-3500   	; 0x10b2c <gpib_bus_init>
   118d8:	0e 94 a9 af 	call	0x15f52	; 0x15f52 <SS80_init>
   118dc:	0e 94 2e b5 	call	0x16a5c	; 0x16a5c <amigo_init>
   118e0:	0c 94 15 c0 	jmp	0x1802a	; 0x1802a <printer_close>
   118e4:	08 95       	ret

000118e6 <gpib_trace_task>:
   118e6:	0f 93       	push	r16
   118e8:	1f 93       	push	r17
   118ea:	cf 93       	push	r28
   118ec:	df 93       	push	r29
   118ee:	eb 01       	movw	r28, r22
   118f0:	00 97       	sbiw	r24, 0x00	; 0
   118f2:	09 f4       	brne	.+2      	; 0x118f6 <gpib_trace_task+0x10>
   118f4:	42 c0       	rjmp	.+132    	; 0x1197a <gpib_trace_task+0x94>
   118f6:	fc 01       	movw	r30, r24
   118f8:	20 81       	ld	r18, Z
   118fa:	22 23       	and	r18, r18
   118fc:	f1 f1       	breq	.+124    	; 0x1197a <gpib_trace_task+0x94>
   118fe:	0e 94 12 32 	call	0x6424	; 0x6424 <skipspaces>
   11902:	8c 01       	movw	r16, r24
   11904:	1f 93       	push	r17
   11906:	8f 93       	push	r24
   11908:	86 e3       	ldi	r24, 0x36	; 54
   1190a:	94 e1       	ldi	r25, 0x14	; 20
   1190c:	1f 92       	push	r1
   1190e:	9f 93       	push	r25
   11910:	8f 93       	push	r24
   11912:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11916:	0f 90       	pop	r0
   11918:	0f 90       	pop	r0
   1191a:	0f 90       	pop	r0
   1191c:	0f 90       	pop	r0
   1191e:	0f 90       	pop	r0
   11920:	20 97       	sbiw	r28, 0x00	; 0
   11922:	51 f0       	breq	.+20     	; 0x11938 <gpib_trace_task+0x52>
   11924:	8b e0       	ldi	r24, 0x0B	; 11
   11926:	94 e1       	ldi	r25, 0x14	; 20
   11928:	1f 92       	push	r1
   1192a:	9f 93       	push	r25
   1192c:	8f 93       	push	r24
   1192e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11932:	0f 90       	pop	r0
   11934:	0f 90       	pop	r0
   11936:	0f 90       	pop	r0
   11938:	84 ef       	ldi	r24, 0xF4	; 244
   1193a:	93 e1       	ldi	r25, 0x13	; 19
   1193c:	1f 92       	push	r1
   1193e:	9f 93       	push	r25
   11940:	8f 93       	push	r24
   11942:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11946:	64 e9       	ldi	r22, 0x94	; 148
   11948:	78 e0       	ldi	r23, 0x08	; 8
   1194a:	c8 01       	movw	r24, r16
   1194c:	0e 94 95 7e 	call	0xfd2a	; 0xfd2a <fopen>
   11950:	90 93 5e 18 	sts	0x185E, r25	; 0x80185e <gpib_log_fp+0x1>
   11954:	80 93 5d 18 	sts	0x185D, r24	; 0x80185d <gpib_log_fp>
   11958:	0f 90       	pop	r0
   1195a:	0f 90       	pop	r0
   1195c:	0f 90       	pop	r0
   1195e:	89 2b       	or	r24, r25
   11960:	a1 f4       	brne	.+40     	; 0x1198a <gpib_trace_task+0xa4>
   11962:	8b e1       	ldi	r24, 0x1B	; 27
   11964:	9d e0       	ldi	r25, 0x0D	; 13
   11966:	0e 94 df 78 	call	0xf1be	; 0xf1be <perror>
   1196a:	88 ee       	ldi	r24, 0xE8	; 232
   1196c:	93 e1       	ldi	r25, 0x13	; 19
   1196e:	1f 92       	push	r1
   11970:	9f 93       	push	r25
   11972:	8f 93       	push	r24
   11974:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11978:	3b c0       	rjmp	.+118    	; 0x119f0 <gpib_trace_task+0x10a>
   1197a:	80 91 b9 1b 	lds	r24, 0x1BB9	; 0x801bb9 <__iob+0x2>
   1197e:	90 91 ba 1b 	lds	r25, 0x1BBA	; 0x801bba <__iob+0x3>
   11982:	90 93 5e 18 	sts	0x185E, r25	; 0x80185e <gpib_log_fp+0x1>
   11986:	80 93 5d 18 	sts	0x185D, r24	; 0x80185d <gpib_log_fp>
   1198a:	f8 d8       	rcall	.-3600   	; 0x10b7c <gpib_state_init>
   1198c:	a4 df       	rcall	.-184    	; 0x118d6 <gpib_init_devices>
   1198e:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <gpib_log_fp>
   11992:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <gpib_log_fp+0x1>
   11996:	49 db       	rcall	.-2414   	; 0x1102a <gpib_decode_header>
   11998:	80 e0       	ldi	r24, 0x00	; 0
   1199a:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   1199e:	89 2b       	or	r24, r25
   119a0:	31 f4       	brne	.+12     	; 0x119ae <gpib_trace_task+0xc8>
   119a2:	ce 01       	movw	r24, r28
   119a4:	db dc       	rcall	.-1610   	; 0x1135c <gpib_read_byte>
   119a6:	20 97       	sbiw	r28, 0x00	; 0
   119a8:	b9 f7       	brne	.-18     	; 0x11998 <gpib_trace_task+0xb2>
   119aa:	ae dd       	rcall	.-1188   	; 0x11508 <gpib_decode>
   119ac:	f5 cf       	rjmp	.-22     	; 0x11998 <gpib_trace_task+0xb2>
   119ae:	82 ee       	ldi	r24, 0xE2	; 226
   119b0:	93 e1       	ldi	r25, 0x13	; 19
   119b2:	1f 92       	push	r1
   119b4:	9f 93       	push	r25
   119b6:	8f 93       	push	r24
   119b8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   119bc:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <gpib_log_fp>
   119c0:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <gpib_log_fp+0x1>
   119c4:	0f 90       	pop	r0
   119c6:	0f 90       	pop	r0
   119c8:	0f 90       	pop	r0
   119ca:	00 97       	sbiw	r24, 0x00	; 0
   119cc:	a1 f0       	breq	.+40     	; 0x119f6 <gpib_trace_task+0x110>
   119ce:	0e 94 3f 7d 	call	0xfa7e	; 0xfa7e <fclose>
   119d2:	80 ed       	ldi	r24, 0xD0	; 208
   119d4:	93 e1       	ldi	r25, 0x13	; 19
   119d6:	1f 92       	push	r1
   119d8:	9f 93       	push	r25
   119da:	8f 93       	push	r24
   119dc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   119e0:	80 91 b9 1b 	lds	r24, 0x1BB9	; 0x801bb9 <__iob+0x2>
   119e4:	90 91 ba 1b 	lds	r25, 0x1BBA	; 0x801bba <__iob+0x3>
   119e8:	90 93 5e 18 	sts	0x185E, r25	; 0x80185e <gpib_log_fp+0x1>
   119ec:	80 93 5d 18 	sts	0x185D, r24	; 0x80185d <gpib_log_fp>
   119f0:	0f 90       	pop	r0
   119f2:	0f 90       	pop	r0
   119f4:	0f 90       	pop	r0
   119f6:	df 91       	pop	r29
   119f8:	cf 91       	pop	r28
   119fa:	1f 91       	pop	r17
   119fc:	0f 91       	pop	r16
   119fe:	08 95       	ret

00011a00 <gpib_error_test>:
   11a00:	ef 92       	push	r14
   11a02:	ff 92       	push	r15
   11a04:	0f 93       	push	r16
   11a06:	1f 93       	push	r17
   11a08:	cf 93       	push	r28
   11a0a:	df 93       	push	r29
   11a0c:	7c 01       	movw	r14, r24
   11a0e:	ec 01       	movw	r28, r24
   11a10:	cc 27       	eor	r28, r28
   11a12:	d0 7d       	andi	r29, 0xD0	; 208
   11a14:	20 97       	sbiw	r28, 0x00	; 0
   11a16:	61 f0       	breq	.+24     	; 0x11a30 <gpib_error_test+0x30>
   11a18:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11a1c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11a20:	8e 72       	andi	r24, 0x2E	; 46
   11a22:	99 27       	eor	r25, r25
   11a24:	87 01       	movw	r16, r14
   11a26:	00 27       	eor	r16, r16
   11a28:	10 71       	andi	r17, 0x10	; 16
   11a2a:	89 2b       	or	r24, r25
   11a2c:	59 f4       	brne	.+22     	; 0x11a44 <gpib_error_test+0x44>
   11a2e:	17 c0       	rjmp	.+46     	; 0x11a5e <gpib_error_test+0x5e>
   11a30:	80 e0       	ldi	r24, 0x00	; 0
   11a32:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   11a36:	89 2b       	or	r24, r25
   11a38:	79 f7       	brne	.-34     	; 0x11a18 <gpib_error_test+0x18>
   11a3a:	0e 94 95 70 	call	0xe12a	; 0xe12a <mmc_ins_status>
   11a3e:	01 97       	sbiw	r24, 0x01	; 1
   11a40:	59 f7       	brne	.-42     	; 0x11a18 <gpib_error_test+0x18>
   11a42:	62 c0       	rjmp	.+196    	; 0x11b08 <gpib_error_test+0x108>
   11a44:	01 15       	cp	r16, r1
   11a46:	11 05       	cpc	r17, r1
   11a48:	51 f0       	breq	.+20     	; 0x11a5e <gpib_error_test+0x5e>
   11a4a:	89 ec       	ldi	r24, 0xC9	; 201
   11a4c:	93 e1       	ldi	r25, 0x13	; 19
   11a4e:	1f 92       	push	r1
   11a50:	9f 93       	push	r25
   11a52:	8f 93       	push	r24
   11a54:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11a58:	0f 90       	pop	r0
   11a5a:	0f 90       	pop	r0
   11a5c:	0f 90       	pop	r0
   11a5e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11a62:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11a66:	85 70       	andi	r24, 0x05	; 5
   11a68:	99 27       	eor	r25, r25
   11a6a:	89 2b       	or	r24, r25
   11a6c:	c1 f0       	breq	.+48     	; 0x11a9e <gpib_error_test+0x9e>
   11a6e:	f6 fe       	sbrs	r15, 6
   11a70:	0a c0       	rjmp	.+20     	; 0x11a86 <gpib_error_test+0x86>
   11a72:	8e eb       	ldi	r24, 0xBE	; 190
   11a74:	93 e1       	ldi	r25, 0x13	; 19
   11a76:	1f 92       	push	r1
   11a78:	9f 93       	push	r25
   11a7a:	8f 93       	push	r24
   11a7c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11a80:	0f 90       	pop	r0
   11a82:	0f 90       	pop	r0
   11a84:	0f 90       	pop	r0
   11a86:	d7 ff       	sbrs	r29, 7
   11a88:	0a c0       	rjmp	.+20     	; 0x11a9e <gpib_error_test+0x9e>
   11a8a:	87 eb       	ldi	r24, 0xB7	; 183
   11a8c:	93 e1       	ldi	r25, 0x13	; 19
   11a8e:	1f 92       	push	r1
   11a90:	9f 93       	push	r25
   11a92:	8f 93       	push	r24
   11a94:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11a98:	0f 90       	pop	r0
   11a9a:	0f 90       	pop	r0
   11a9c:	0f 90       	pop	r0
   11a9e:	80 e0       	ldi	r24, 0x00	; 0
   11aa0:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   11aa4:	89 2b       	or	r24, r25
   11aa6:	51 f0       	breq	.+20     	; 0x11abc <gpib_error_test+0xbc>
   11aa8:	8a ea       	ldi	r24, 0xAA	; 170
   11aaa:	93 e1       	ldi	r25, 0x13	; 19
   11aac:	1f 92       	push	r1
   11aae:	9f 93       	push	r25
   11ab0:	8f 93       	push	r24
   11ab2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11ab6:	0f 90       	pop	r0
   11ab8:	0f 90       	pop	r0
   11aba:	0f 90       	pop	r0
   11abc:	0e 94 95 70 	call	0xe12a	; 0xe12a <mmc_ins_status>
   11ac0:	01 97       	sbiw	r24, 0x01	; 1
   11ac2:	51 f0       	breq	.+20     	; 0x11ad8 <gpib_error_test+0xd8>
   11ac4:	89 e9       	ldi	r24, 0x99	; 153
   11ac6:	93 e1       	ldi	r25, 0x13	; 19
   11ac8:	1f 92       	push	r1
   11aca:	9f 93       	push	r25
   11acc:	8f 93       	push	r24
   11ace:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11ad2:	0f 90       	pop	r0
   11ad4:	0f 90       	pop	r0
   11ad6:	0f 90       	pop	r0
   11ad8:	01 15       	cp	r16, r1
   11ada:	11 05       	cpc	r17, r1
   11adc:	09 f0       	breq	.+2      	; 0x11ae0 <gpib_error_test+0xe0>
   11ade:	fb de       	rcall	.-522    	; 0x118d6 <gpib_init_devices>
   11ae0:	80 e0       	ldi	r24, 0x00	; 0
   11ae2:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   11ae6:	89 2b       	or	r24, r25
   11ae8:	11 f0       	breq	.+4      	; 0x11aee <gpib_error_test+0xee>
   11aea:	f5 de       	rcall	.-534    	; 0x118d6 <gpib_init_devices>
   11aec:	0b c0       	rjmp	.+22     	; 0x11b04 <gpib_error_test+0x104>
   11aee:	0e 94 95 70 	call	0xe12a	; 0xe12a <mmc_ins_status>
   11af2:	01 97       	sbiw	r24, 0x01	; 1
   11af4:	39 f4       	brne	.+14     	; 0x11b04 <gpib_error_test+0x104>
   11af6:	01 15       	cp	r16, r1
   11af8:	11 05       	cpc	r17, r1
   11afa:	31 f0       	breq	.+12     	; 0x11b08 <gpib_error_test+0x108>
   11afc:	54 98       	cbi	0x0a, 4	; 10
   11afe:	4c 9b       	sbis	0x09, 4	; 9
   11b00:	fd cf       	rjmp	.-6      	; 0x11afc <gpib_error_test+0xfc>
   11b02:	02 c0       	rjmp	.+4      	; 0x11b08 <gpib_error_test+0x108>
   11b04:	c1 e0       	ldi	r28, 0x01	; 1
   11b06:	d0 e0       	ldi	r29, 0x00	; 0
   11b08:	ce 01       	movw	r24, r28
   11b0a:	cd b7       	in	r28, 0x3d	; 61
   11b0c:	de b7       	in	r29, 0x3e	; 62
   11b0e:	e6 e0       	ldi	r30, 0x06	; 6
   11b10:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

00011b14 <GPIB_COMMANDS>:
   11b14:	1f 93       	push	r17
   11b16:	cf 93       	push	r28
   11b18:	df 93       	push	r29
   11b1a:	ec 01       	movw	r28, r24
   11b1c:	16 2f       	mov	r17, r22
   11b1e:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   11b22:	8f 35       	cpi	r24, 0x5F	; 95
   11b24:	91 f0       	breq	.+36     	; 0x11b4a <GPIB_COMMANDS+0x36>
   11b26:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11b2a:	90 e0       	ldi	r25, 0x00	; 0
   11b2c:	89 de       	rcall	.-750    	; 0x11840 <AMIGO_is_MLA>
   11b2e:	89 2b       	or	r24, r25
   11b30:	c9 f4       	brne	.+50     	; 0x11b64 <GPIB_COMMANDS+0x50>
   11b32:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11b36:	90 e0       	ldi	r25, 0x00	; 0
   11b38:	56 de       	rcall	.-852    	; 0x117e6 <SS80_is_MLA>
   11b3a:	89 2b       	or	r24, r25
   11b3c:	11 f5       	brne	.+68     	; 0x11b82 <GPIB_COMMANDS+0x6e>
   11b3e:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11b42:	90 e0       	ldi	r25, 0x00	; 0
   11b44:	aa de       	rcall	.-684    	; 0x1189a <PRINTER_is_MLA>
   11b46:	89 2b       	or	r24, r25
   11b48:	59 f5       	brne	.+86     	; 0x11ba0 <GPIB_COMMANDS+0x8c>
   11b4a:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11b4e:	8f 33       	cpi	r24, 0x3F	; 63
   11b50:	19 f4       	brne	.+6      	; 0x11b58 <GPIB_COMMANDS+0x44>
   11b52:	80 e0       	ldi	r24, 0x00	; 0
   11b54:	90 e0       	ldi	r25, 0x00	; 0
   11b56:	2e c0       	rjmp	.+92     	; 0x11bb4 <GPIB_COMMANDS+0xa0>
   11b58:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   11b5c:	90 e0       	ldi	r25, 0x00	; 0
   11b5e:	7f de       	rcall	.-770    	; 0x1185e <AMIGO_is_MTA>
   11b60:	89 2b       	or	r24, r25
   11b62:	49 f0       	breq	.+18     	; 0x11b76 <GPIB_COMMANDS+0x62>
   11b64:	11 23       	and	r17, r17
   11b66:	11 f0       	breq	.+4      	; 0x11b6c <GPIB_COMMANDS+0x58>
   11b68:	ce 01       	movw	r24, r28
   11b6a:	b0 d8       	rcall	.-3744   	; 0x10ccc <gpib_unread>
   11b6c:	80 91 e7 1d 	lds	r24, 0x1DE7	; 0x801de7 <secondary>
   11b70:	0e 94 16 bf 	call	0x17e2c	; 0x17e2c <AMIGO_COMMANDS>
   11b74:	1d c0       	rjmp	.+58     	; 0x11bb0 <GPIB_COMMANDS+0x9c>
   11b76:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   11b7a:	90 e0       	ldi	r25, 0x00	; 0
   11b7c:	43 de       	rcall	.-890    	; 0x11804 <SS80_is_MTA>
   11b7e:	89 2b       	or	r24, r25
   11b80:	49 f0       	breq	.+18     	; 0x11b94 <GPIB_COMMANDS+0x80>
   11b82:	11 23       	and	r17, r17
   11b84:	11 f0       	breq	.+4      	; 0x11b8a <GPIB_COMMANDS+0x76>
   11b86:	ce 01       	movw	r24, r28
   11b88:	a1 d8       	rcall	.-3774   	; 0x10ccc <gpib_unread>
   11b8a:	80 91 e7 1d 	lds	r24, 0x1DE7	; 0x801de7 <secondary>
   11b8e:	0e 94 88 b3 	call	0x16710	; 0x16710 <SS80_COMMANDS>
   11b92:	0e c0       	rjmp	.+28     	; 0x11bb0 <GPIB_COMMANDS+0x9c>
   11b94:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   11b98:	90 e0       	ldi	r25, 0x00	; 0
   11b9a:	8e de       	rcall	.-740    	; 0x118b8 <PRINTER_is_MTA>
   11b9c:	89 2b       	or	r24, r25
   11b9e:	c9 f2       	breq	.-78     	; 0x11b52 <GPIB_COMMANDS+0x3e>
   11ba0:	11 23       	and	r17, r17
   11ba2:	11 f0       	breq	.+4      	; 0x11ba8 <GPIB_COMMANDS+0x94>
   11ba4:	ce 01       	movw	r24, r28
   11ba6:	92 d8       	rcall	.-3804   	; 0x10ccc <gpib_unread>
   11ba8:	80 91 e7 1d 	lds	r24, 0x1DE7	; 0x801de7 <secondary>
   11bac:	0e 94 76 c1 	call	0x182ec	; 0x182ec <PRINTER_COMMANDS>
   11bb0:	10 92 e7 1d 	sts	0x1DE7, r1	; 0x801de7 <secondary>
   11bb4:	df 91       	pop	r29
   11bb6:	cf 91       	pop	r28
   11bb8:	1f 91       	pop	r17
   11bba:	08 95       	ret

00011bbc <Send_Identify>:
   11bbc:	a4 e0       	ldi	r26, 0x04	; 4
   11bbe:	b0 e0       	ldi	r27, 0x00	; 0
   11bc0:	e4 ee       	ldi	r30, 0xE4	; 228
   11bc2:	fd e8       	ldi	r31, 0x8D	; 141
   11bc4:	0c 94 40 e5 	jmp	0x1ca80	; 0x1ca80 <__prologue_saves__+0x16>
   11bc8:	d8 2e       	mov	r13, r24
   11bca:	7b 01       	movw	r14, r22
   11bcc:	80 e0       	ldi	r24, 0x00	; 0
   11bce:	91 e0       	ldi	r25, 0x01	; 1
   11bd0:	9c 83       	std	Y+4, r25	; 0x04
   11bd2:	8b 83       	std	Y+3, r24	; 0x03
   11bd4:	8b 01       	movw	r16, r22
   11bd6:	20 e0       	ldi	r18, 0x00	; 0
   11bd8:	30 e0       	ldi	r19, 0x00	; 0
   11bda:	42 e0       	ldi	r20, 0x02	; 2
   11bdc:	50 e0       	ldi	r21, 0x00	; 0
   11bde:	60 e0       	ldi	r22, 0x00	; 0
   11be0:	70 e0       	ldi	r23, 0x00	; 0
   11be2:	ce 01       	movw	r24, r28
   11be4:	01 96       	adiw	r24, 0x01	; 1
   11be6:	e7 d3       	rcall	.+1998   	; 0x123b6 <V2B_MSB>
   11be8:	ae 01       	movw	r20, r28
   11bea:	4d 5f       	subi	r20, 0xFD	; 253
   11bec:	5f 4f       	sbci	r21, 0xFF	; 255
   11bee:	62 e0       	ldi	r22, 0x02	; 2
   11bf0:	70 e0       	ldi	r23, 0x00	; 0
   11bf2:	ce 01       	movw	r24, r28
   11bf4:	01 96       	adiw	r24, 0x01	; 1
   11bf6:	3a dd       	rcall	.-1420   	; 0x1166c <gpib_write_str>
   11bf8:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11bfc:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11c00:	02 97       	sbiw	r24, 0x02	; 2
   11c02:	59 f0       	breq	.+22     	; 0x11c1a <Send_Identify+0x5e>
   11c04:	25 70       	andi	r18, 0x05	; 5
   11c06:	33 27       	eor	r19, r19
   11c08:	23 2b       	or	r18, r19
   11c0a:	c9 f0       	breq	.+50     	; 0x11c3e <Send_Identify+0x82>
   11c0c:	ff 92       	push	r15
   11c0e:	ef 92       	push	r14
   11c10:	1f 92       	push	r1
   11c12:	df 92       	push	r13
   11c14:	88 e7       	ldi	r24, 0x78	; 120
   11c16:	93 e1       	ldi	r25, 0x13	; 19
   11c18:	08 c0       	rjmp	.+16     	; 0x11c2a <Send_Identify+0x6e>
   11c1a:	22 ff       	sbrs	r18, 2
   11c1c:	10 c0       	rjmp	.+32     	; 0x11c3e <Send_Identify+0x82>
   11c1e:	ff 92       	push	r15
   11c20:	ef 92       	push	r14
   11c22:	1f 92       	push	r1
   11c24:	df 92       	push	r13
   11c26:	8e e5       	ldi	r24, 0x5E	; 94
   11c28:	93 e1       	ldi	r25, 0x13	; 19
   11c2a:	1f 92       	push	r1
   11c2c:	9f 93       	push	r25
   11c2e:	8f 93       	push	r24
   11c30:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11c34:	0f b6       	in	r0, 0x3f	; 63
   11c36:	f8 94       	cli
   11c38:	de bf       	out	0x3e, r29	; 62
   11c3a:	0f be       	out	0x3f, r0	; 63
   11c3c:	cd bf       	out	0x3d, r28	; 61
   11c3e:	8b 81       	ldd	r24, Y+3	; 0x03
   11c40:	9c 81       	ldd	r25, Y+4	; 0x04
   11c42:	88 27       	eor	r24, r24
   11c44:	90 7d       	andi	r25, 0xD0	; 208
   11c46:	24 96       	adiw	r28, 0x04	; 4
   11c48:	e7 e0       	ldi	r30, 0x07	; 7
   11c4a:	0c 94 5c e5 	jmp	0x1cab8	; 0x1cab8 <__epilogue_restores__+0x16>

00011c4e <GPIB>:
   11c4e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11c52:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11c56:	85 30       	cpi	r24, 0x05	; 5
   11c58:	89 f4       	brne	.+34     	; 0x11c7c <GPIB+0x2e>
   11c5a:	24 71       	andi	r18, 0x14	; 20
   11c5c:	33 27       	eor	r19, r19
   11c5e:	23 2b       	or	r18, r19
   11c60:	51 f0       	breq	.+20     	; 0x11c76 <GPIB+0x28>
   11c62:	8b e4       	ldi	r24, 0x4B	; 75
   11c64:	93 e1       	ldi	r25, 0x13	; 19
   11c66:	1f 92       	push	r1
   11c68:	9f 93       	push	r25
   11c6a:	8f 93       	push	r24
   11c6c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11c70:	0f 90       	pop	r0
   11c72:	0f 90       	pop	r0
   11c74:	0f 90       	pop	r0
   11c76:	10 92 e3 1d 	sts	0x1DE3, r1	; 0x801de3 <spoll>
   11c7a:	9d c0       	rjmp	.+314    	; 0x11db6 <GPIB+0x168>
   11c7c:	85 31       	cpi	r24, 0x15	; 21
   11c7e:	39 f4       	brne	.+14     	; 0x11c8e <GPIB+0x40>
   11c80:	24 71       	andi	r18, 0x14	; 20
   11c82:	33 27       	eor	r19, r19
   11c84:	23 2b       	or	r18, r19
   11c86:	b9 f3       	breq	.-18     	; 0x11c76 <GPIB+0x28>
   11c88:	88 e3       	ldi	r24, 0x38	; 56
   11c8a:	93 e1       	ldi	r25, 0x13	; 19
   11c8c:	ec cf       	rjmp	.-40     	; 0x11c66 <GPIB+0x18>
   11c8e:	88 31       	cpi	r24, 0x18	; 24
   11c90:	c9 f4       	brne	.+50     	; 0x11cc4 <GPIB+0x76>
   11c92:	22 ff       	sbrs	r18, 2
   11c94:	0a c0       	rjmp	.+20     	; 0x11caa <GPIB+0x5c>
   11c96:	81 e3       	ldi	r24, 0x31	; 49
   11c98:	93 e1       	ldi	r25, 0x13	; 19
   11c9a:	1f 92       	push	r1
   11c9c:	9f 93       	push	r25
   11c9e:	8f 93       	push	r24
   11ca0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11ca4:	0f 90       	pop	r0
   11ca6:	0f 90       	pop	r0
   11ca8:	0f 90       	pop	r0
   11caa:	81 e0       	ldi	r24, 0x01	; 1
   11cac:	80 93 e3 1d 	sts	0x1DE3, r24	; 0x801de3 <spoll>
   11cb0:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   11cb4:	90 e0       	ldi	r25, 0x00	; 0
   11cb6:	a6 dd       	rcall	.-1204   	; 0x11804 <SS80_is_MTA>
   11cb8:	89 2b       	or	r24, r25
   11cba:	09 f4       	brne	.+2      	; 0x11cbe <GPIB+0x70>
   11cbc:	7c c0       	rjmp	.+248    	; 0x11db6 <GPIB+0x168>
   11cbe:	0c 94 3c af 	jmp	0x15e78	; 0x15e78 <SS80_Report>
   11cc2:	08 95       	ret
   11cc4:	89 31       	cpi	r24, 0x19	; 25
   11cc6:	29 f4       	brne	.+10     	; 0x11cd2 <GPIB+0x84>
   11cc8:	22 ff       	sbrs	r18, 2
   11cca:	d5 cf       	rjmp	.-86     	; 0x11c76 <GPIB+0x28>
   11ccc:	8a e2       	ldi	r24, 0x2A	; 42
   11cce:	93 e1       	ldi	r25, 0x13	; 19
   11cd0:	ca cf       	rjmp	.-108    	; 0x11c66 <GPIB+0x18>
   11cd2:	84 30       	cpi	r24, 0x04	; 4
   11cd4:	09 f0       	breq	.+2      	; 0x11cd8 <GPIB+0x8a>
   11cd6:	48 c0       	rjmp	.+144    	; 0x11d68 <GPIB+0x11a>
   11cd8:	22 ff       	sbrs	r18, 2
   11cda:	0a c0       	rjmp	.+20     	; 0x11cf0 <GPIB+0xa2>
   11cdc:	83 e2       	ldi	r24, 0x23	; 35
   11cde:	93 e1       	ldi	r25, 0x13	; 19
   11ce0:	1f 92       	push	r1
   11ce2:	9f 93       	push	r25
   11ce4:	8f 93       	push	r24
   11ce6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11cea:	0f 90       	pop	r0
   11cec:	0f 90       	pop	r0
   11cee:	0f 90       	pop	r0
   11cf0:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11cf4:	90 e0       	ldi	r25, 0x00	; 0
   11cf6:	77 dd       	rcall	.-1298   	; 0x117e6 <SS80_is_MLA>
   11cf8:	89 2b       	or	r24, r25
   11cfa:	d9 f0       	breq	.+54     	; 0x11d32 <GPIB+0xe4>
   11cfc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11d00:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11d04:	84 72       	andi	r24, 0x24	; 36
   11d06:	99 27       	eor	r25, r25
   11d08:	89 2b       	or	r24, r25
   11d0a:	51 f0       	breq	.+20     	; 0x11d20 <GPIB+0xd2>
   11d0c:	87 e1       	ldi	r24, 0x17	; 23
   11d0e:	93 e1       	ldi	r25, 0x13	; 19
   11d10:	1f 92       	push	r1
   11d12:	9f 93       	push	r25
   11d14:	8f 93       	push	r24
   11d16:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11d1a:	0f 90       	pop	r0
   11d1c:	0f 90       	pop	r0
   11d1e:	0f 90       	pop	r0
   11d20:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   11d24:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   11d28:	85 81       	ldd	r24, Z+5	; 0x05
   11d2a:	90 e0       	ldi	r25, 0x00	; 0
   11d2c:	0c 94 0a b0 	jmp	0x16014	; 0x16014 <SS80_Selected_Device_Clear>
   11d30:	08 95       	ret
   11d32:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11d36:	90 e0       	ldi	r25, 0x00	; 0
   11d38:	83 dd       	rcall	.-1274   	; 0x11840 <AMIGO_is_MLA>
   11d3a:	89 2b       	or	r24, r25
   11d3c:	e1 f1       	breq	.+120    	; 0x11db6 <GPIB+0x168>
   11d3e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11d42:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11d46:	84 72       	andi	r24, 0x24	; 36
   11d48:	99 27       	eor	r25, r25
   11d4a:	89 2b       	or	r24, r25
   11d4c:	51 f0       	breq	.+20     	; 0x11d62 <GPIB+0x114>
   11d4e:	8a e0       	ldi	r24, 0x0A	; 10
   11d50:	93 e1       	ldi	r25, 0x13	; 19
   11d52:	1f 92       	push	r1
   11d54:	9f 93       	push	r25
   11d56:	8f 93       	push	r24
   11d58:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11d5c:	0f 90       	pop	r0
   11d5e:	0f 90       	pop	r0
   11d60:	0f 90       	pop	r0
   11d62:	0c 94 e9 b9 	jmp	0x173d2	; 0x173d2 <amigo_cmd_clear>
   11d66:	08 95       	ret
   11d68:	84 31       	cpi	r24, 0x14	; 20
   11d6a:	99 f4       	brne	.+38     	; 0x11d92 <GPIB+0x144>
   11d6c:	22 ff       	sbrs	r18, 2
   11d6e:	0a c0       	rjmp	.+20     	; 0x11d84 <GPIB+0x136>
   11d70:	83 e0       	ldi	r24, 0x03	; 3
   11d72:	93 e1       	ldi	r25, 0x13	; 19
   11d74:	1f 92       	push	r1
   11d76:	9f 93       	push	r25
   11d78:	8f 93       	push	r24
   11d7a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11d7e:	0f 90       	pop	r0
   11d80:	0f 90       	pop	r0
   11d82:	0f 90       	pop	r0
   11d84:	0e 94 fc af 	call	0x15ff8	; 0x15ff8 <SS80_Universal_Device_Clear>
   11d88:	0e 94 e9 b9 	call	0x173d2	; 0x173d2 <amigo_cmd_clear>
   11d8c:	0e 94 15 c0 	call	0x1802a	; 0x1802a <printer_close>
   11d90:	12 c0       	rjmp	.+36     	; 0x11db6 <GPIB+0x168>
   11d92:	25 71       	andi	r18, 0x15	; 21
   11d94:	33 27       	eor	r19, r19
   11d96:	23 2b       	or	r18, r19
   11d98:	71 f0       	breq	.+28     	; 0x11db6 <GPIB+0x168>
   11d9a:	1f 92       	push	r1
   11d9c:	8f 93       	push	r24
   11d9e:	87 ee       	ldi	r24, 0xE7	; 231
   11da0:	92 e1       	ldi	r25, 0x12	; 18
   11da2:	1f 92       	push	r1
   11da4:	9f 93       	push	r25
   11da6:	8f 93       	push	r24
   11da8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11dac:	0f 90       	pop	r0
   11dae:	0f 90       	pop	r0
   11db0:	0f 90       	pop	r0
   11db2:	0f 90       	pop	r0
   11db4:	0f 90       	pop	r0
   11db6:	80 e0       	ldi	r24, 0x00	; 0
   11db8:	90 e0       	ldi	r25, 0x00	; 0
   11dba:	08 95       	ret

00011dbc <GPIB_TALK>:
   11dbc:	0f 93       	push	r16
   11dbe:	1f 93       	push	r17
   11dc0:	cf 93       	push	r28
   11dc2:	c8 2f       	mov	r28, r24
   11dc4:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   11dc8:	80 93 e9 1d 	sts	0x1DE9, r24	; 0x801de9 <talking_last>
   11dcc:	c0 93 e6 1d 	sts	0x1DE6, r28	; 0x801de6 <talking>
   11dd0:	cf 35       	cpi	r28, 0x5F	; 95
   11dd2:	79 f4       	brne	.+30     	; 0x11df2 <GPIB_TALK+0x36>
   11dd4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11dd8:	82 ff       	sbrs	r24, 2
   11dda:	7f c0       	rjmp	.+254    	; 0x11eda <GPIB_TALK+0x11e>
   11ddc:	84 e9       	ldi	r24, 0x94	; 148
   11dde:	92 e1       	ldi	r25, 0x12	; 18
   11de0:	1f 92       	push	r1
   11de2:	9f 93       	push	r25
   11de4:	8f 93       	push	r24
   11de6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11dea:	0f 90       	pop	r0
   11dec:	0f 90       	pop	r0
   11dee:	0f 90       	pop	r0
   11df0:	74 c0       	rjmp	.+232    	; 0x11eda <GPIB_TALK+0x11e>
   11df2:	0c 2f       	mov	r16, r28
   11df4:	10 e0       	ldi	r17, 0x00	; 0
   11df6:	c8 01       	movw	r24, r16
   11df8:	05 dd       	rcall	.-1526   	; 0x11804 <SS80_is_MTA>
   11dfa:	89 2b       	or	r24, r25
   11dfc:	f1 f0       	breq	.+60     	; 0x11e3a <GPIB_TALK+0x7e>
   11dfe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11e02:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11e06:	84 72       	andi	r24, 0x24	; 36
   11e08:	99 27       	eor	r25, r25
   11e0a:	89 2b       	or	r24, r25
   11e0c:	71 f0       	breq	.+28     	; 0x11e2a <GPIB_TALK+0x6e>
   11e0e:	1f 92       	push	r1
   11e10:	cf 93       	push	r28
   11e12:	83 e8       	ldi	r24, 0x83	; 131
   11e14:	92 e1       	ldi	r25, 0x12	; 18
   11e16:	1f 92       	push	r1
   11e18:	9f 93       	push	r25
   11e1a:	8f 93       	push	r24
   11e1c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11e20:	0f 90       	pop	r0
   11e22:	0f 90       	pop	r0
   11e24:	0f 90       	pop	r0
   11e26:	0f 90       	pop	r0
   11e28:	0f 90       	pop	r0
   11e2a:	80 91 e3 1d 	lds	r24, 0x1DE3	; 0x801de3 <spoll>
   11e2e:	88 23       	and	r24, r24
   11e30:	09 f4       	brne	.+2      	; 0x11e34 <GPIB_TALK+0x78>
   11e32:	53 c0       	rjmp	.+166    	; 0x11eda <GPIB_TALK+0x11e>
   11e34:	0e 94 3c af 	call	0x15e78	; 0x15e78 <SS80_Report>
   11e38:	50 c0       	rjmp	.+160    	; 0x11eda <GPIB_TALK+0x11e>
   11e3a:	c8 01       	movw	r24, r16
   11e3c:	10 dd       	rcall	.-1504   	; 0x1185e <AMIGO_is_MTA>
   11e3e:	89 2b       	or	r24, r25
   11e40:	71 f0       	breq	.+28     	; 0x11e5e <GPIB_TALK+0xa2>
   11e42:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11e46:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11e4a:	84 72       	andi	r24, 0x24	; 36
   11e4c:	99 27       	eor	r25, r25
   11e4e:	89 2b       	or	r24, r25
   11e50:	09 f4       	brne	.+2      	; 0x11e54 <GPIB_TALK+0x98>
   11e52:	43 c0       	rjmp	.+134    	; 0x11eda <GPIB_TALK+0x11e>
   11e54:	1f 92       	push	r1
   11e56:	cf 93       	push	r28
   11e58:	81 e7       	ldi	r24, 0x71	; 113
   11e5a:	92 e1       	ldi	r25, 0x12	; 18
   11e5c:	34 c0       	rjmp	.+104    	; 0x11ec6 <GPIB_TALK+0x10a>
   11e5e:	c8 01       	movw	r24, r16
   11e60:	2b dd       	rcall	.-1450   	; 0x118b8 <PRINTER_is_MTA>
   11e62:	89 2b       	or	r24, r25
   11e64:	69 f0       	breq	.+26     	; 0x11e80 <GPIB_TALK+0xc4>
   11e66:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11e6a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11e6e:	84 72       	andi	r24, 0x24	; 36
   11e70:	99 27       	eor	r25, r25
   11e72:	89 2b       	or	r24, r25
   11e74:	91 f1       	breq	.+100    	; 0x11eda <GPIB_TALK+0x11e>
   11e76:	1f 92       	push	r1
   11e78:	cf 93       	push	r28
   11e7a:	8d e5       	ldi	r24, 0x5D	; 93
   11e7c:	92 e1       	ldi	r25, 0x12	; 18
   11e7e:	23 c0       	rjmp	.+70     	; 0x11ec6 <GPIB_TALK+0x10a>
   11e80:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11e84:	90 e0       	ldi	r25, 0x00	; 0
   11e86:	09 dd       	rcall	.-1518   	; 0x1189a <PRINTER_is_MLA>
   11e88:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11e8c:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11e90:	89 2b       	or	r24, r25
   11e92:	99 f0       	breq	.+38     	; 0x11eba <GPIB_TALK+0xfe>
   11e94:	24 72       	andi	r18, 0x24	; 36
   11e96:	33 27       	eor	r19, r19
   11e98:	23 2b       	or	r18, r19
   11e9a:	51 f0       	breq	.+20     	; 0x11eb0 <GPIB_TALK+0xf4>
   11e9c:	8d e4       	ldi	r24, 0x4D	; 77
   11e9e:	92 e1       	ldi	r25, 0x12	; 18
   11ea0:	1f 92       	push	r1
   11ea2:	9f 93       	push	r25
   11ea4:	8f 93       	push	r24
   11ea6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11eaa:	0f 90       	pop	r0
   11eac:	0f 90       	pop	r0
   11eae:	0f 90       	pop	r0
   11eb0:	80 e0       	ldi	r24, 0x00	; 0
   11eb2:	90 e0       	ldi	r25, 0x00	; 0
   11eb4:	0e 94 62 c0 	call	0x180c4	; 0x180c4 <printer_open>
   11eb8:	10 c0       	rjmp	.+32     	; 0x11eda <GPIB_TALK+0x11e>
   11eba:	22 ff       	sbrs	r18, 2
   11ebc:	0e c0       	rjmp	.+28     	; 0x11eda <GPIB_TALK+0x11e>
   11ebe:	1f 92       	push	r1
   11ec0:	cf 93       	push	r28
   11ec2:	81 e4       	ldi	r24, 0x41	; 65
   11ec4:	92 e1       	ldi	r25, 0x12	; 18
   11ec6:	1f 92       	push	r1
   11ec8:	9f 93       	push	r25
   11eca:	8f 93       	push	r24
   11ecc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11ed0:	0f 90       	pop	r0
   11ed2:	0f 90       	pop	r0
   11ed4:	0f 90       	pop	r0
   11ed6:	0f 90       	pop	r0
   11ed8:	0f 90       	pop	r0
   11eda:	80 e0       	ldi	r24, 0x00	; 0
   11edc:	90 e0       	ldi	r25, 0x00	; 0
   11ede:	cf 91       	pop	r28
   11ee0:	1f 91       	pop	r17
   11ee2:	0f 91       	pop	r16
   11ee4:	08 95       	ret

00011ee6 <GPIB_SECONDARY_ADDRESS>:
   11ee6:	0f 93       	push	r16
   11ee8:	1f 93       	push	r17
   11eea:	cf 93       	push	r28
   11eec:	c8 2f       	mov	r28, r24
   11eee:	08 2f       	mov	r16, r24
   11ef0:	10 e0       	ldi	r17, 0x00	; 0
   11ef2:	c8 01       	movw	r24, r16
   11ef4:	96 dc       	rcall	.-1748   	; 0x11822 <SS80_is_MSA>
   11ef6:	89 2b       	or	r24, r25
   11ef8:	19 f1       	breq	.+70     	; 0x11f40 <GPIB_SECONDARY_ADDRESS+0x5a>
   11efa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11efe:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11f02:	84 72       	andi	r24, 0x24	; 36
   11f04:	99 27       	eor	r25, r25
   11f06:	89 2b       	or	r24, r25
   11f08:	71 f0       	breq	.+28     	; 0x11f26 <GPIB_SECONDARY_ADDRESS+0x40>
   11f0a:	1f 92       	push	r1
   11f0c:	cf 93       	push	r28
   11f0e:	80 e3       	ldi	r24, 0x30	; 48
   11f10:	92 e1       	ldi	r25, 0x12	; 18
   11f12:	1f 92       	push	r1
   11f14:	9f 93       	push	r25
   11f16:	8f 93       	push	r24
   11f18:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11f1c:	0f 90       	pop	r0
   11f1e:	0f 90       	pop	r0
   11f20:	0f 90       	pop	r0
   11f22:	0f 90       	pop	r0
   11f24:	0f 90       	pop	r0
   11f26:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   11f2a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   11f2e:	81 81       	ldd	r24, Z+1	; 0x01
   11f30:	90 e0       	ldi	r25, 0x00	; 0
   11f32:	0e 94 17 86 	call	0x10c2e	; 0x10c2e <gpib_disable_PPR>
   11f36:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   11f3a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   11f3e:	27 c0       	rjmp	.+78     	; 0x11f8e <GPIB_SECONDARY_ADDRESS+0xa8>
   11f40:	c8 01       	movw	r24, r16
   11f42:	9c dc       	rcall	.-1736   	; 0x1187c <AMIGO_is_MSA>
   11f44:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11f48:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11f4c:	89 2b       	or	r24, r25
   11f4e:	21 f1       	breq	.+72     	; 0x11f98 <GPIB_SECONDARY_ADDRESS+0xb2>
   11f50:	c9 01       	movw	r24, r18
   11f52:	84 72       	andi	r24, 0x24	; 36
   11f54:	99 27       	eor	r25, r25
   11f56:	89 2b       	or	r24, r25
   11f58:	71 f0       	breq	.+28     	; 0x11f76 <GPIB_SECONDARY_ADDRESS+0x90>
   11f5a:	1f 92       	push	r1
   11f5c:	cf 93       	push	r28
   11f5e:	8e e1       	ldi	r24, 0x1E	; 30
   11f60:	92 e1       	ldi	r25, 0x12	; 18
   11f62:	1f 92       	push	r1
   11f64:	9f 93       	push	r25
   11f66:	8f 93       	push	r24
   11f68:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11f6c:	0f 90       	pop	r0
   11f6e:	0f 90       	pop	r0
   11f70:	0f 90       	pop	r0
   11f72:	0f 90       	pop	r0
   11f74:	0f 90       	pop	r0
   11f76:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   11f7a:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   11f7e:	81 81       	ldd	r24, Z+1	; 0x01
   11f80:	90 e0       	ldi	r25, 0x00	; 0
   11f82:	0e 94 17 86 	call	0x10c2e	; 0x10c2e <gpib_disable_PPR>
   11f86:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   11f8a:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   11f8e:	63 a1       	ldd	r22, Z+35	; 0x23
   11f90:	74 a1       	ldd	r23, Z+36	; 0x24
   11f92:	8c 2f       	mov	r24, r28
   11f94:	13 de       	rcall	.-986    	; 0x11bbc <Send_Identify>
   11f96:	20 c0       	rjmp	.+64     	; 0x11fd8 <GPIB_SECONDARY_ADDRESS+0xf2>
   11f98:	c9 01       	movw	r24, r18
   11f9a:	84 72       	andi	r24, 0x24	; 36
   11f9c:	99 27       	eor	r25, r25
   11f9e:	00 97       	sbiw	r24, 0x00	; 0
   11fa0:	d9 f0       	breq	.+54     	; 0x11fd8 <GPIB_SECONDARY_ADDRESS+0xf2>
   11fa2:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   11fa6:	1f 92       	push	r1
   11fa8:	8f 93       	push	r24
   11faa:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   11fae:	1f 92       	push	r1
   11fb0:	8f 93       	push	r24
   11fb2:	1f 92       	push	r1
   11fb4:	cf 93       	push	r28
   11fb6:	88 ef       	ldi	r24, 0xF8	; 248
   11fb8:	91 e1       	ldi	r25, 0x11	; 17
   11fba:	1f 92       	push	r1
   11fbc:	9f 93       	push	r25
   11fbe:	8f 93       	push	r24
   11fc0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   11fc4:	8d b7       	in	r24, 0x3d	; 61
   11fc6:	9e b7       	in	r25, 0x3e	; 62
   11fc8:	09 96       	adiw	r24, 0x09	; 9
   11fca:	0f b6       	in	r0, 0x3f	; 63
   11fcc:	f8 94       	cli
   11fce:	9e bf       	out	0x3e, r25	; 62
   11fd0:	0f be       	out	0x3f, r0	; 63
   11fd2:	8d bf       	out	0x3d, r24	; 61
   11fd4:	80 e0       	ldi	r24, 0x00	; 0
   11fd6:	90 e0       	ldi	r25, 0x00	; 0
   11fd8:	cf 91       	pop	r28
   11fda:	1f 91       	pop	r17
   11fdc:	0f 91       	pop	r16
   11fde:	08 95       	ret

00011fe0 <listen_cleanup>:
   11fe0:	60 91 e2 1d 	lds	r22, 0x1DE2	; 0x801de2 <listening_last>
   11fe4:	66 23       	and	r22, r22
   11fe6:	e1 f0       	breq	.+56     	; 0x12020 <listen_cleanup+0x40>
   11fe8:	70 e0       	ldi	r23, 0x00	; 0
   11fea:	40 e2       	ldi	r20, 0x20	; 32
   11fec:	50 e0       	ldi	r21, 0x00	; 0
   11fee:	84 e0       	ldi	r24, 0x04	; 4
   11ff0:	90 e0       	ldi	r25, 0x00	; 0
   11ff2:	89 d2       	rcall	.+1298   	; 0x12506 <find_device>
   11ff4:	01 96       	adiw	r24, 0x01	; 1
   11ff6:	a1 f0       	breq	.+40     	; 0x12020 <listen_cleanup+0x40>
   11ff8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11ffc:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12000:	84 72       	andi	r24, 0x24	; 36
   12002:	99 27       	eor	r25, r25
   12004:	89 2b       	or	r24, r25
   12006:	51 f0       	breq	.+20     	; 0x1201c <listen_cleanup+0x3c>
   12008:	87 ee       	ldi	r24, 0xE7	; 231
   1200a:	91 e1       	ldi	r25, 0x11	; 17
   1200c:	1f 92       	push	r1
   1200e:	9f 93       	push	r25
   12010:	8f 93       	push	r24
   12012:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   12016:	0f 90       	pop	r0
   12018:	0f 90       	pop	r0
   1201a:	0f 90       	pop	r0
   1201c:	0c 94 15 c0 	jmp	0x1802a	; 0x1802a <printer_close>
   12020:	08 95       	ret

00012022 <GPIB_LISTEN>:
   12022:	0f 93       	push	r16
   12024:	1f 93       	push	r17
   12026:	cf 93       	push	r28
   12028:	c8 2f       	mov	r28, r24
   1202a:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   1202e:	80 93 e2 1d 	sts	0x1DE2, r24	; 0x801de2 <listening_last>
   12032:	c0 93 e8 1d 	sts	0x1DE8, r28	; 0x801de8 <listening>
   12036:	d4 df       	rcall	.-88     	; 0x11fe0 <listen_cleanup>
   12038:	cf 33       	cpi	r28, 0x3F	; 63
   1203a:	19 f5       	brne	.+70     	; 0x12082 <GPIB_LISTEN+0x60>
   1203c:	10 92 e8 1d 	sts	0x1DE8, r1	; 0x801de8 <listening>
   12040:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12044:	82 ff       	sbrs	r24, 2
   12046:	75 c0       	rjmp	.+234    	; 0x12132 <GPIB_LISTEN+0x110>
   12048:	80 ee       	ldi	r24, 0xE0	; 224
   1204a:	92 e1       	ldi	r25, 0x12	; 18
   1204c:	1f 92       	push	r1
   1204e:	9f 93       	push	r25
   12050:	8f 93       	push	r24
   12052:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   12056:	0f 90       	pop	r0
   12058:	0f 90       	pop	r0
   1205a:	0f 90       	pop	r0
   1205c:	80 91 e0 1b 	lds	r24, 0x1BE0	; 0x801be0 <lastcmd>
   12060:	90 91 e1 1b 	lds	r25, 0x1BE1	; 0x801be1 <lastcmd+0x1>
   12064:	8f 35       	cpi	r24, 0x5F	; 95
   12066:	91 05       	cpc	r25, r1
   12068:	09 f0       	breq	.+2      	; 0x1206c <GPIB_LISTEN+0x4a>
   1206a:	63 c0       	rjmp	.+198    	; 0x12132 <GPIB_LISTEN+0x110>
   1206c:	8e ed       	ldi	r24, 0xDE	; 222
   1206e:	92 e1       	ldi	r25, 0x12	; 18
   12070:	1f 92       	push	r1
   12072:	9f 93       	push	r25
   12074:	8f 93       	push	r24
   12076:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1207a:	0f 90       	pop	r0
   1207c:	0f 90       	pop	r0
   1207e:	0f 90       	pop	r0
   12080:	58 c0       	rjmp	.+176    	; 0x12132 <GPIB_LISTEN+0x110>
   12082:	0c 2f       	mov	r16, r28
   12084:	10 e0       	ldi	r17, 0x00	; 0
   12086:	c8 01       	movw	r24, r16
   12088:	db db       	rcall	.-2122   	; 0x11840 <AMIGO_is_MLA>
   1208a:	89 2b       	or	r24, r25
   1208c:	71 f0       	breq	.+28     	; 0x120aa <GPIB_LISTEN+0x88>
   1208e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12092:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12096:	84 72       	andi	r24, 0x24	; 36
   12098:	99 27       	eor	r25, r25
   1209a:	89 2b       	or	r24, r25
   1209c:	09 f4       	brne	.+2      	; 0x120a0 <GPIB_LISTEN+0x7e>
   1209e:	49 c0       	rjmp	.+146    	; 0x12132 <GPIB_LISTEN+0x110>
   120a0:	1f 92       	push	r1
   120a2:	cf 93       	push	r28
   120a4:	8c ec       	ldi	r24, 0xCC	; 204
   120a6:	92 e1       	ldi	r25, 0x12	; 18
   120a8:	3a c0       	rjmp	.+116    	; 0x1211e <GPIB_LISTEN+0xfc>
   120aa:	c8 01       	movw	r24, r16
   120ac:	9c db       	rcall	.-2248   	; 0x117e6 <SS80_is_MLA>
   120ae:	89 2b       	or	r24, r25
   120b0:	69 f0       	breq	.+26     	; 0x120cc <GPIB_LISTEN+0xaa>
   120b2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   120b6:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   120ba:	84 72       	andi	r24, 0x24	; 36
   120bc:	99 27       	eor	r25, r25
   120be:	89 2b       	or	r24, r25
   120c0:	c1 f1       	breq	.+112    	; 0x12132 <GPIB_LISTEN+0x110>
   120c2:	1f 92       	push	r1
   120c4:	cf 93       	push	r28
   120c6:	8b eb       	ldi	r24, 0xBB	; 187
   120c8:	92 e1       	ldi	r25, 0x12	; 18
   120ca:	29 c0       	rjmp	.+82     	; 0x1211e <GPIB_LISTEN+0xfc>
   120cc:	c8 01       	movw	r24, r16
   120ce:	e5 db       	rcall	.-2102   	; 0x1189a <PRINTER_is_MLA>
   120d0:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   120d4:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   120d8:	89 2b       	or	r24, r25
   120da:	d9 f0       	breq	.+54     	; 0x12112 <GPIB_LISTEN+0xf0>
   120dc:	24 72       	andi	r18, 0x24	; 36
   120de:	33 27       	eor	r19, r19
   120e0:	23 2b       	or	r18, r19
   120e2:	71 f0       	breq	.+28     	; 0x12100 <GPIB_LISTEN+0xde>
   120e4:	1f 92       	push	r1
   120e6:	cf 93       	push	r28
   120e8:	87 ea       	ldi	r24, 0xA7	; 167
   120ea:	92 e1       	ldi	r25, 0x12	; 18
   120ec:	1f 92       	push	r1
   120ee:	9f 93       	push	r25
   120f0:	8f 93       	push	r24
   120f2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   120f6:	0f 90       	pop	r0
   120f8:	0f 90       	pop	r0
   120fa:	0f 90       	pop	r0
   120fc:	0f 90       	pop	r0
   120fe:	0f 90       	pop	r0
   12100:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   12104:	8f 35       	cpi	r24, 0x5F	; 95
   12106:	a9 f0       	breq	.+42     	; 0x12132 <GPIB_LISTEN+0x110>
   12108:	80 e0       	ldi	r24, 0x00	; 0
   1210a:	90 e0       	ldi	r25, 0x00	; 0
   1210c:	0e 94 62 c0 	call	0x180c4	; 0x180c4 <printer_open>
   12110:	10 c0       	rjmp	.+32     	; 0x12132 <GPIB_LISTEN+0x110>
   12112:	22 ff       	sbrs	r18, 2
   12114:	0e c0       	rjmp	.+28     	; 0x12132 <GPIB_LISTEN+0x110>
   12116:	1f 92       	push	r1
   12118:	cf 93       	push	r28
   1211a:	8b e9       	ldi	r24, 0x9B	; 155
   1211c:	92 e1       	ldi	r25, 0x12	; 18
   1211e:	1f 92       	push	r1
   12120:	9f 93       	push	r25
   12122:	8f 93       	push	r24
   12124:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   12128:	0f 90       	pop	r0
   1212a:	0f 90       	pop	r0
   1212c:	0f 90       	pop	r0
   1212e:	0f 90       	pop	r0
   12130:	0f 90       	pop	r0
   12132:	80 e0       	ldi	r24, 0x00	; 0
   12134:	90 e0       	ldi	r25, 0x00	; 0
   12136:	cf 91       	pop	r28
   12138:	1f 91       	pop	r17
   1213a:	0f 91       	pop	r16
   1213c:	08 95       	ret

0001213e <gpib_task>:
   1213e:	cf 93       	push	r28
   12140:	df 93       	push	r29
   12142:	0e 94 be 85 	call	0x10b7c	; 0x10b7c <gpib_state_init>
   12146:	c7 db       	rcall	.-2162   	; 0x118d6 <gpib_init_devices>
   12148:	10 92 5e 18 	sts	0x185E, r1	; 0x80185e <gpib_log_fp+0x1>
   1214c:	10 92 5d 18 	sts	0x185D, r1	; 0x80185d <gpib_log_fp>
   12150:	80 e0       	ldi	r24, 0x00	; 0
   12152:	90 e0       	ldi	r25, 0x00	; 0
   12154:	03 d9       	rcall	.-3578   	; 0x1135c <gpib_read_byte>
   12156:	ec 01       	movw	r28, r24
   12158:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1215c:	83 ff       	sbrs	r24, 3
   1215e:	02 c0       	rjmp	.+4      	; 0x12164 <gpib_task+0x26>
   12160:	ce 01       	movw	r24, r28
   12162:	d2 d9       	rcall	.-3164   	; 0x11508 <gpib_decode>
   12164:	ce 01       	movw	r24, r28
   12166:	4c dc       	rcall	.-1896   	; 0x11a00 <gpib_error_test>
   12168:	9c 01       	movw	r18, r24
   1216a:	23 70       	andi	r18, 0x03	; 3
   1216c:	33 27       	eor	r19, r19
   1216e:	23 2b       	or	r18, r19
   12170:	09 f0       	breq	.+2      	; 0x12174 <gpib_task+0x36>
   12172:	43 c0       	rjmp	.+134    	; 0x121fa <gpib_task+0xbc>
   12174:	89 2b       	or	r24, r25
   12176:	61 f7       	brne	.-40     	; 0x12150 <gpib_task+0x12>
   12178:	d2 ff       	sbrs	r29, 2
   1217a:	26 c0       	rjmp	.+76     	; 0x121c8 <gpib_task+0x8a>
   1217c:	8c 2f       	mov	r24, r28
   1217e:	8f 77       	andi	r24, 0x7F	; 127
   12180:	80 32       	cpi	r24, 0x20	; 32
   12182:	10 f4       	brcc	.+4      	; 0x12188 <gpib_task+0x4a>
   12184:	64 dd       	rcall	.-1336   	; 0x11c4e <GPIB>
   12186:	e4 cf       	rjmp	.-56     	; 0x12150 <gpib_task+0x12>
   12188:	90 ee       	ldi	r25, 0xE0	; 224
   1218a:	98 0f       	add	r25, r24
   1218c:	90 32       	cpi	r25, 0x20	; 32
   1218e:	10 f4       	brcc	.+4      	; 0x12194 <gpib_task+0x56>
   12190:	48 df       	rcall	.-368    	; 0x12022 <GPIB_LISTEN>
   12192:	de cf       	rjmp	.-68     	; 0x12150 <gpib_task+0x12>
   12194:	90 ec       	ldi	r25, 0xC0	; 192
   12196:	98 0f       	add	r25, r24
   12198:	90 32       	cpi	r25, 0x20	; 32
   1219a:	10 f4       	brcc	.+4      	; 0x121a0 <gpib_task+0x62>
   1219c:	0f de       	rcall	.-994    	; 0x11dbc <GPIB_TALK>
   1219e:	d8 cf       	rjmp	.-80     	; 0x12150 <gpib_task+0x12>
   121a0:	90 91 e8 1d 	lds	r25, 0x1DE8	; 0x801de8 <listening>
   121a4:	99 23       	and	r25, r25
   121a6:	59 f0       	breq	.+22     	; 0x121be <gpib_task+0x80>
   121a8:	20 91 e0 1b 	lds	r18, 0x1BE0	; 0x801be0 <lastcmd>
   121ac:	30 91 e1 1b 	lds	r19, 0x1BE1	; 0x801be1 <lastcmd+0x1>
   121b0:	2f 35       	cpi	r18, 0x5F	; 95
   121b2:	31 05       	cpc	r19, r1
   121b4:	21 f4       	brne	.+8      	; 0x121be <gpib_task+0x80>
   121b6:	10 92 e7 1d 	sts	0x1DE7, r1	; 0x801de7 <secondary>
   121ba:	95 de       	rcall	.-726    	; 0x11ee6 <GPIB_SECONDARY_ADDRESS>
   121bc:	c9 cf       	rjmp	.-110    	; 0x12150 <gpib_task+0x12>
   121be:	80 93 e7 1d 	sts	0x1DE7, r24	; 0x801de7 <secondary>
   121c2:	60 e0       	ldi	r22, 0x00	; 0
   121c4:	90 e0       	ldi	r25, 0x00	; 0
   121c6:	12 c0       	rjmp	.+36     	; 0x121ec <gpib_task+0xae>
   121c8:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   121cc:	90 e0       	ldi	r25, 0x00	; 0
   121ce:	65 db       	rcall	.-2358   	; 0x1189a <PRINTER_is_MLA>
   121d0:	89 2b       	or	r24, r25
   121d2:	29 f0       	breq	.+10     	; 0x121de <gpib_task+0xa0>
   121d4:	ce 01       	movw	r24, r28
   121d6:	99 27       	eor	r25, r25
   121d8:	0e 94 03 c1 	call	0x18206	; 0x18206 <printer_buffer>
   121dc:	b9 cf       	rjmp	.-142    	; 0x12150 <gpib_task+0x12>
   121de:	80 91 e7 1d 	lds	r24, 0x1DE7	; 0x801de7 <secondary>
   121e2:	88 23       	and	r24, r24
   121e4:	09 f4       	brne	.+2      	; 0x121e8 <gpib_task+0xaa>
   121e6:	b4 cf       	rjmp	.-152    	; 0x12150 <gpib_task+0x12>
   121e8:	61 e0       	ldi	r22, 0x01	; 1
   121ea:	ce 01       	movw	r24, r28
   121ec:	93 dc       	rcall	.-1754   	; 0x11b14 <GPIB_COMMANDS>
   121ee:	08 dc       	rcall	.-2032   	; 0x11a00 <gpib_error_test>
   121f0:	83 70       	andi	r24, 0x03	; 3
   121f2:	99 27       	eor	r25, r25
   121f4:	89 2b       	or	r24, r25
   121f6:	09 f4       	brne	.+2      	; 0x121fa <gpib_task+0xbc>
   121f8:	ab cf       	rjmp	.-170    	; 0x12150 <gpib_task+0x12>
   121fa:	df 91       	pop	r29
   121fc:	cf 91       	pop	r28
   121fe:	08 95       	ret

00012200 <talk_cleanup>:
   12200:	08 95       	ret

00012202 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   12202:	cf 93       	push	r28
   12204:	df 93       	push	r29
   12206:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   12208:	83 e5       	ldi	r24, 0x53	; 83
   1220a:	95 e1       	ldi	r25, 0x15	; 21
   1220c:	1f 92       	push	r1
   1220e:	9f 93       	push	r25
   12210:	8f 93       	push	r24
   12212:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    if(full)
   12216:	0f 90       	pop	r0
   12218:	0f 90       	pop	r0
   1221a:	0f 90       	pop	r0
   1221c:	cd 2b       	or	r28, r29
   1221e:	51 f0       	breq	.+20     	; 0x12234 <gpib_help+0x32>
    {
        printf("gpib prefix is optional\n"
   12220:	89 e9       	ldi	r24, 0x99	; 153
   12222:	94 e1       	ldi	r25, 0x14	; 20
   12224:	1f 92       	push	r1
   12226:	9f 93       	push	r25
   12228:	8f 93       	push	r24
   1222a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1222e:	0f 90       	pop	r0
   12230:	0f 90       	pop	r0
   12232:	0f 90       	pop	r0
            "gpib ppr_set XX\n"
#endif
            "\n"
            );
    }
}
   12234:	df 91       	pop	r29
   12236:	cf 91       	pop	r28
   12238:	08 95       	ret

0001223a <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   1223a:	ef 92       	push	r14
   1223c:	ff 92       	push	r15
   1223e:	0f 93       	push	r16
   12240:	1f 93       	push	r17
   12242:	cf 93       	push	r28
   12244:	df 93       	push	r29
   12246:	8c 01       	movw	r16, r24

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12248:	fb 01       	movw	r30, r22
   1224a:	80 81       	ld	r24, Z
   1224c:	91 81       	ldd	r25, Z+1	; 0x01

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   1224e:	00 97       	sbiw	r24, 0x00	; 0
   12250:	19 f4       	brne	.+6      	; 0x12258 <gpib_tests+0x1e>
        return(0);
   12252:	80 e0       	ldi	r24, 0x00	; 0
   12254:	90 e0       	ldi	r25, 0x00	; 0
   12256:	aa c0       	rjmp	.+340    	; 0x123ac <gpib_tests+0x172>
   12258:	7b 01       	movw	r14, r22

    ind = 0;
    ptr = argv[ind++];

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   1225a:	67 e2       	ldi	r22, 0x27	; 39
   1225c:	7d e0       	ldi	r23, 0x0D	; 13
   1225e:	0e 94 85 32 	call	0x650a	; 0x650a <MATCH>
   12262:	89 2b       	or	r24, r25
   12264:	b1 f3       	breq	.-20     	; 0x12252 <gpib_tests+0x18>
        return(0);

    ptr = argv[ind++];
   12266:	f7 01       	movw	r30, r14
   12268:	c2 81       	ldd	r28, Z+2	; 0x02
   1226a:	d3 81       	ldd	r29, Z+3	; 0x03
    if ( !ptr || MATCH(ptr,"help") )
   1226c:	20 97       	sbiw	r28, 0x00	; 0
   1226e:	21 f4       	brne	.+8      	; 0x12278 <gpib_tests+0x3e>
    {
        gpib_help(1);
   12270:	81 e0       	ldi	r24, 0x01	; 1
   12272:	90 e0       	ldi	r25, 0x00	; 0
   12274:	c6 df       	rcall	.-116    	; 0x12202 <gpib_help>
   12276:	98 c0       	rjmp	.+304    	; 0x123a8 <gpib_tests+0x16e>
    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
    if ( !ptr || MATCH(ptr,"help") )
   12278:	67 ef       	ldi	r22, 0xF7	; 247
   1227a:	75 e1       	ldi	r23, 0x15	; 21
   1227c:	ce 01       	movw	r24, r28
   1227e:	0e 94 85 32 	call	0x650a	; 0x650a <MATCH>
   12282:	89 2b       	or	r24, r25
   12284:	a9 f7       	brne	.-22     	; 0x12270 <gpib_tests+0x36>
    {
        gpib_help(1);
        return(1);
    }

    if (MATCHARGS(ptr,"addresses",(ind+0),argc))
   12286:	98 01       	movw	r18, r16
   12288:	42 e0       	ldi	r20, 0x02	; 2
   1228a:	50 e0       	ldi	r21, 0x00	; 0
   1228c:	6c e2       	ldi	r22, 0x2C	; 44
   1228e:	7d e0       	ldi	r23, 0x0D	; 13
   12290:	ce 01       	movw	r24, r28
   12292:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   12296:	89 2b       	or	r24, r25
   12298:	19 f0       	breq	.+6      	; 0x122a0 <gpib_tests+0x66>
    {
        display_Addresses();
   1229a:	0e 94 4e a0 	call	0x1409c	; 0x1409c <display_Addresses>
   1229e:	84 c0       	rjmp	.+264    	; 0x123a8 <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"config",(ind+0),argc))
   122a0:	98 01       	movw	r18, r16
   122a2:	42 e0       	ldi	r20, 0x02	; 2
   122a4:	50 e0       	ldi	r21, 0x00	; 0
   122a6:	66 e3       	ldi	r22, 0x36	; 54
   122a8:	7d e0       	ldi	r23, 0x0D	; 13
   122aa:	ce 01       	movw	r24, r28
   122ac:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   122b0:	89 2b       	or	r24, r25
   122b2:	19 f0       	breq	.+6      	; 0x122ba <gpib_tests+0x80>
    {
        display_Config();
   122b4:	0e 94 49 a1 	call	0x14292	; 0x14292 <display_Config>
   122b8:	77 c0       	rjmp	.+238    	; 0x123a8 <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"debug", (ind+1) ,argc))
   122ba:	98 01       	movw	r18, r16
   122bc:	43 e0       	ldi	r20, 0x03	; 3
   122be:	50 e0       	ldi	r21, 0x00	; 0
   122c0:	6d e3       	ldi	r22, 0x3D	; 61
   122c2:	7d e0       	ldi	r23, 0x0D	; 13
   122c4:	ce 01       	movw	r24, r28
   122c6:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   122ca:	89 2b       	or	r24, r25
   122cc:	c1 f0       	breq	.+48     	; 0x122fe <gpib_tests+0xc4>
    {
        debuglevel = get_value(argv[ind]);
   122ce:	f7 01       	movw	r30, r14
   122d0:	84 81       	ldd	r24, Z+4	; 0x04
   122d2:	95 81       	ldd	r25, Z+5	; 0x05
   122d4:	0e 94 c7 33 	call	0x678e	; 0x678e <get_value>
   122d8:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <debuglevel>
   122dc:	70 93 be 01 	sts	0x01BE, r23	; 0x8001be <debuglevel+0x1>
        printf("debug=%04XH\n", debuglevel);
   122e0:	7f 93       	push	r23
   122e2:	6f 93       	push	r22
   122e4:	8c e8       	ldi	r24, 0x8C	; 140
   122e6:	94 e1       	ldi	r25, 0x14	; 20
   122e8:	1f 92       	push	r1
   122ea:	9f 93       	push	r25
   122ec:	8f 93       	push	r24
   122ee:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(1);
   122f2:	0f 90       	pop	r0
   122f4:	0f 90       	pop	r0
   122f6:	0f 90       	pop	r0
   122f8:	0f 90       	pop	r0
   122fa:	0f 90       	pop	r0
   122fc:	55 c0       	rjmp	.+170    	; 0x123a8 <gpib_tests+0x16e>
    }

    if (MATCHARGS(ptr,"elapsed_reset",(ind+0),argc))
   122fe:	98 01       	movw	r18, r16
   12300:	42 e0       	ldi	r20, 0x02	; 2
   12302:	50 e0       	ldi	r21, 0x00	; 0
   12304:	63 e4       	ldi	r22, 0x43	; 67
   12306:	7d e0       	ldi	r23, 0x0D	; 13
   12308:	ce 01       	movw	r24, r28
   1230a:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1230e:	89 2b       	or	r24, r25
   12310:	19 f0       	breq	.+6      	; 0x12318 <gpib_tests+0xde>
    {
        gpib_timer_elapsed_begin();
   12312:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <gpib_timer_elapsed_begin>
   12316:	48 c0       	rjmp	.+144    	; 0x123a8 <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed",(ind+0),argc))
   12318:	98 01       	movw	r18, r16
   1231a:	42 e0       	ldi	r20, 0x02	; 2
   1231c:	50 e0       	ldi	r21, 0x00	; 0
   1231e:	61 e5       	ldi	r22, 0x51	; 81
   12320:	7d e0       	ldi	r23, 0x0D	; 13
   12322:	ce 01       	movw	r24, r28
   12324:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   12328:	89 2b       	or	r24, r25
   1232a:	29 f0       	breq	.+10     	; 0x12336 <gpib_tests+0xfc>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   1232c:	89 e5       	ldi	r24, 0x59	; 89
   1232e:	9d e0       	ldi	r25, 0x0D	; 13
   12330:	0e 94 40 85 	call	0x10a80	; 0x10a80 <gpib_timer_elapsed_end>
   12334:	39 c0       	rjmp	.+114    	; 0x123a8 <gpib_tests+0x16e>
        return(1);
    }

    if ( MATCHARGS(ptr, "ifc",(ind+0),argc))
   12336:	98 01       	movw	r18, r16
   12338:	42 e0       	ldi	r20, 0x02	; 2
   1233a:	50 e0       	ldi	r21, 0x00	; 0
   1233c:	67 e6       	ldi	r22, 0x67	; 103
   1233e:	7d e0       	ldi	r23, 0x0D	; 13
   12340:	ce 01       	movw	r24, r28
   12342:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   12346:	89 2b       	or	r24, r25
   12348:	19 f0       	breq	.+6      	; 0x12350 <gpib_tests+0x116>
    {
        gpib_assert_ifc();
   1234a:	0e 94 48 86 	call	0x10c90	; 0x10c90 <gpib_assert_ifc>
   1234e:	2c c0       	rjmp	.+88     	; 0x123a8 <gpib_tests+0x16e>
        return(1);

    }

    if (MATCHARGS(ptr,"task",(ind+0),argc))
   12350:	98 01       	movw	r18, r16
   12352:	42 e0       	ldi	r20, 0x02	; 2
   12354:	50 e0       	ldi	r21, 0x00	; 0
   12356:	6b e6       	ldi	r22, 0x6B	; 107
   12358:	7d e0       	ldi	r23, 0x0D	; 13
   1235a:	ce 01       	movw	r24, r28
   1235c:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   12360:	89 2b       	or	r24, r25
    {
        gpib_task();
   12362:	11 f0       	breq	.+4      	; 0x12368 <gpib_tests+0x12e>
   12364:	ec de       	rcall	.-552    	; 0x1213e <gpib_task>
   12366:	20 c0       	rjmp	.+64     	; 0x123a8 <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   12368:	98 01       	movw	r18, r16
   1236a:	43 e0       	ldi	r20, 0x03	; 3
   1236c:	50 e0       	ldi	r21, 0x00	; 0
   1236e:	60 e7       	ldi	r22, 0x70	; 112
   12370:	7d e0       	ldi	r23, 0x0D	; 13
   12372:	ce 01       	movw	r24, r28
   12374:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   12378:	89 2b       	or	r24, r25
   1237a:	09 f4       	brne	.+2      	; 0x1237e <gpib_tests+0x144>
   1237c:	6a cf       	rjmp	.-300    	; 0x12252 <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   1237e:	f7 01       	movw	r30, r14
   12380:	86 81       	ldd	r24, Z+6	; 0x06
   12382:	97 81       	ldd	r25, Z+7	; 0x07
   12384:	00 97       	sbiw	r24, 0x00	; 0
   12386:	51 f0       	breq	.+20     	; 0x1239c <gpib_tests+0x162>
   12388:	66 e7       	ldi	r22, 0x76	; 118
   1238a:	7d e0       	ldi	r23, 0x0D	; 13
   1238c:	0e 94 85 32 	call	0x650a	; 0x650a <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12390:	61 e0       	ldi	r22, 0x01	; 1
   12392:	70 e0       	ldi	r23, 0x00	; 0
   12394:	89 2b       	or	r24, r25
   12396:	21 f4       	brne	.+8      	; 0x123a0 <gpib_tests+0x166>
   12398:	60 e0       	ldi	r22, 0x00	; 0
   1239a:	02 c0       	rjmp	.+4      	; 0x123a0 <gpib_tests+0x166>
   1239c:	60 e0       	ldi	r22, 0x00	; 0
   1239e:	70 e0       	ldi	r23, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   123a0:	f7 01       	movw	r30, r14
   123a2:	84 81       	ldd	r24, Z+4	; 0x04
   123a4:	95 81       	ldd	r25, Z+5	; 0x05
   123a6:	9f da       	rcall	.-2754   	; 0x118e6 <gpib_trace_task>
        return(1);
   123a8:	81 e0       	ldi	r24, 0x01	; 1
   123aa:	90 e0       	ldi	r25, 0x00	; 0

	} // port write 
#endif  // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   123ac:	cd b7       	in	r28, 0x3d	; 61
   123ae:	de b7       	in	r29, 0x3e	; 62
   123b0:	e6 e0       	ldi	r30, 0x06	; 6
   123b2:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

000123b6 <V2B_MSB>:
   123b6:	0f 93       	push	r16
   123b8:	1f 93       	push	r17
   123ba:	da 01       	movw	r26, r20
   123bc:	11 97       	sbiw	r26, 0x01	; 1
   123be:	b7 fd       	sbrc	r27, 7
   123c0:	0b c0       	rjmp	.+22     	; 0x123d8 <V2B_MSB+0x22>
   123c2:	fd 01       	movw	r30, r26
   123c4:	e6 0f       	add	r30, r22
   123c6:	f7 1f       	adc	r31, r23
   123c8:	e8 0f       	add	r30, r24
   123ca:	f9 1f       	adc	r31, r25
   123cc:	00 83       	st	Z, r16
   123ce:	01 2f       	mov	r16, r17
   123d0:	12 2f       	mov	r17, r18
   123d2:	23 2f       	mov	r18, r19
   123d4:	33 27       	eor	r19, r19
   123d6:	f2 cf       	rjmp	.-28     	; 0x123bc <V2B_MSB+0x6>
   123d8:	1f 91       	pop	r17
   123da:	0f 91       	pop	r16
   123dc:	08 95       	ret

000123de <V2B_LSB>:
   123de:	0f 93       	push	r16
   123e0:	1f 93       	push	r17
   123e2:	fc 01       	movw	r30, r24
   123e4:	e6 0f       	add	r30, r22
   123e6:	f7 1f       	adc	r31, r23
   123e8:	bf 01       	movw	r22, r30
   123ea:	cf 01       	movw	r24, r30
   123ec:	86 1b       	sub	r24, r22
   123ee:	97 0b       	sbc	r25, r23
   123f0:	84 17       	cp	r24, r20
   123f2:	95 07       	cpc	r25, r21
   123f4:	34 f4       	brge	.+12     	; 0x12402 <V2B_LSB+0x24>
   123f6:	01 93       	st	Z+, r16
   123f8:	01 2f       	mov	r16, r17
   123fa:	12 2f       	mov	r17, r18
   123fc:	23 2f       	mov	r18, r19
   123fe:	33 27       	eor	r19, r19
   12400:	f4 cf       	rjmp	.-24     	; 0x123ea <V2B_LSB+0xc>
   12402:	1f 91       	pop	r17
   12404:	0f 91       	pop	r16
   12406:	08 95       	ret

00012408 <B2V_MSB>:
   12408:	cf 92       	push	r12
   1240a:	df 92       	push	r13
   1240c:	ef 92       	push	r14
   1240e:	ff 92       	push	r15
   12410:	fc 01       	movw	r30, r24
   12412:	e6 0f       	add	r30, r22
   12414:	f7 1f       	adc	r31, r23
   12416:	60 e0       	ldi	r22, 0x00	; 0
   12418:	70 e0       	ldi	r23, 0x00	; 0
   1241a:	cb 01       	movw	r24, r22
   1241c:	df 01       	movw	r26, r30
   1241e:	9f 01       	movw	r18, r30
   12420:	2a 1b       	sub	r18, r26
   12422:	3b 0b       	sbc	r19, r27
   12424:	24 17       	cp	r18, r20
   12426:	35 07       	cpc	r19, r21
   12428:	4c f4       	brge	.+18     	; 0x1243c <B2V_MSB+0x34>
   1242a:	cc 24       	eor	r12, r12
   1242c:	d6 2e       	mov	r13, r22
   1242e:	e7 2e       	mov	r14, r23
   12430:	f8 2e       	mov	r15, r24
   12432:	21 91       	ld	r18, Z+
   12434:	c7 01       	movw	r24, r14
   12436:	b6 01       	movw	r22, r12
   12438:	62 2b       	or	r22, r18
   1243a:	f1 cf       	rjmp	.-30     	; 0x1241e <B2V_MSB+0x16>
   1243c:	ff 90       	pop	r15
   1243e:	ef 90       	pop	r14
   12440:	df 90       	pop	r13
   12442:	cf 90       	pop	r12
   12444:	08 95       	ret

00012446 <B2V_LSB>:
   12446:	cf 92       	push	r12
   12448:	df 92       	push	r13
   1244a:	ef 92       	push	r14
   1244c:	ff 92       	push	r15
   1244e:	9c 01       	movw	r18, r24
   12450:	db 01       	movw	r26, r22
   12452:	60 e0       	ldi	r22, 0x00	; 0
   12454:	70 e0       	ldi	r23, 0x00	; 0
   12456:	cb 01       	movw	r24, r22
   12458:	41 50       	subi	r20, 0x01	; 1
   1245a:	51 09       	sbc	r21, r1
   1245c:	57 fd       	sbrc	r21, 7
   1245e:	0e c0       	rjmp	.+28     	; 0x1247c <B2V_LSB+0x36>
   12460:	cc 24       	eor	r12, r12
   12462:	d6 2e       	mov	r13, r22
   12464:	e7 2e       	mov	r14, r23
   12466:	f8 2e       	mov	r15, r24
   12468:	fa 01       	movw	r30, r20
   1246a:	ea 0f       	add	r30, r26
   1246c:	fb 1f       	adc	r31, r27
   1246e:	e2 0f       	add	r30, r18
   12470:	f3 1f       	adc	r31, r19
   12472:	e0 81       	ld	r30, Z
   12474:	c7 01       	movw	r24, r14
   12476:	b6 01       	movw	r22, r12
   12478:	6e 2b       	or	r22, r30
   1247a:	ee cf       	rjmp	.-36     	; 0x12458 <B2V_LSB+0x12>
   1247c:	ff 90       	pop	r15
   1247e:	ef 90       	pop	r14
   12480:	df 90       	pop	r13
   12482:	cf 90       	pop	r12
   12484:	08 95       	ret

00012486 <find_type>:
   12486:	ec ee       	ldi	r30, 0xEC	; 236
   12488:	fd e1       	ldi	r31, 0x1D	; 29
   1248a:	20 e0       	ldi	r18, 0x00	; 0
   1248c:	30 e0       	ldi	r19, 0x00	; 0
   1248e:	40 81       	ld	r20, Z
   12490:	50 e0       	ldi	r21, 0x00	; 0
   12492:	48 17       	cp	r20, r24
   12494:	59 07       	cpc	r21, r25
   12496:	49 f0       	breq	.+18     	; 0x124aa <find_type+0x24>
   12498:	2f 5f       	subi	r18, 0xFF	; 255
   1249a:	3f 4f       	sbci	r19, 0xFF	; 255
   1249c:	bb 96       	adiw	r30, 0x2b	; 43
   1249e:	2c 30       	cpi	r18, 0x0C	; 12
   124a0:	31 05       	cpc	r19, r1
   124a2:	a9 f7       	brne	.-22     	; 0x1248e <find_type+0x8>
   124a4:	8f ef       	ldi	r24, 0xFF	; 255
   124a6:	9f ef       	ldi	r25, 0xFF	; 255
   124a8:	08 95       	ret
   124aa:	c9 01       	movw	r24, r18
   124ac:	08 95       	ret

000124ae <count_drive_types>:
   124ae:	28 2f       	mov	r18, r24
   124b0:	ec ee       	ldi	r30, 0xEC	; 236
   124b2:	fd e1       	ldi	r31, 0x1D	; 29
   124b4:	80 e0       	ldi	r24, 0x00	; 0
   124b6:	90 e0       	ldi	r25, 0x00	; 0
   124b8:	30 81       	ld	r19, Z
   124ba:	32 13       	cpse	r19, r18
   124bc:	01 c0       	rjmp	.+2      	; 0x124c0 <count_drive_types+0x12>
   124be:	01 96       	adiw	r24, 0x01	; 1
   124c0:	bb 96       	adiw	r30, 0x2b	; 43
   124c2:	3f e1       	ldi	r19, 0x1F	; 31
   124c4:	e0 3f       	cpi	r30, 0xF0	; 240
   124c6:	f3 07       	cpc	r31, r19
   124c8:	b9 f7       	brne	.-18     	; 0x124b8 <count_drive_types+0xa>
   124ca:	08 95       	ret

000124cc <type_to_str>:
   124cc:	00 97       	sbiw	r24, 0x00	; 0
   124ce:	59 f0       	breq	.+22     	; 0x124e6 <type_to_str+0x1a>
   124d0:	81 30       	cpi	r24, 0x01	; 1
   124d2:	91 05       	cpc	r25, r1
   124d4:	59 f0       	breq	.+22     	; 0x124ec <type_to_str+0x20>
   124d6:	83 30       	cpi	r24, 0x03	; 3
   124d8:	91 05       	cpc	r25, r1
   124da:	59 f0       	breq	.+22     	; 0x124f2 <type_to_str+0x26>
   124dc:	04 97       	sbiw	r24, 0x04	; 4
   124de:	61 f0       	breq	.+24     	; 0x124f8 <type_to_str+0x2c>
   124e0:	84 ea       	ldi	r24, 0xA4	; 164
   124e2:	9d e0       	ldi	r25, 0x0D	; 13
   124e4:	08 95       	ret
   124e6:	8a e7       	ldi	r24, 0x7A	; 122
   124e8:	9d e0       	ldi	r25, 0x0D	; 13
   124ea:	08 95       	ret
   124ec:	82 e8       	ldi	r24, 0x82	; 130
   124ee:	9d e0       	ldi	r25, 0x0D	; 13
   124f0:	08 95       	ret
   124f2:	8a e9       	ldi	r24, 0x9A	; 154
   124f4:	9d e0       	ldi	r25, 0x0D	; 13
   124f6:	08 95       	ret
   124f8:	8d e8       	ldi	r24, 0x8D	; 141
   124fa:	9d e0       	ldi	r25, 0x0D	; 13
   124fc:	08 95       	ret

000124fe <find_free>:
   124fe:	80 e0       	ldi	r24, 0x00	; 0
   12500:	90 e0       	ldi	r25, 0x00	; 0
   12502:	c1 cf       	rjmp	.-126    	; 0x12486 <find_type>
   12504:	08 95       	ret

00012506 <find_device>:
int find_device(int type, int address, int base)
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
   12506:	9b 01       	movw	r18, r22
   12508:	20 52       	subi	r18, 0x20	; 32
   1250a:	31 09       	sbc	r19, r1
   1250c:	2f 35       	cpi	r18, 0x5F	; 95
   1250e:	31 05       	cpc	r19, r1
   12510:	f8 f4       	brcc	.+62     	; 0x12550 <find_device+0x4a>
        return(-1);

    ///@brief Make sure address is in expected range
    if(address < base || address > (base+30))
   12512:	64 17       	cp	r22, r20
   12514:	75 07       	cpc	r23, r21
   12516:	e4 f0       	brlt	.+56     	; 0x12550 <find_device+0x4a>
   12518:	9a 01       	movw	r18, r20
   1251a:	22 5e       	subi	r18, 0xE2	; 226
   1251c:	3f 4f       	sbci	r19, 0xFF	; 255
   1251e:	26 17       	cp	r18, r22
   12520:	37 07       	cpc	r19, r23
   12522:	b4 f0       	brlt	.+44     	; 0x12550 <find_device+0x4a>
        return(-1);

    ///@brief convert to device address
    address -= base;
   12524:	64 1b       	sub	r22, r20
   12526:	75 0b       	sbc	r23, r21
   12528:	ec ee       	ldi	r30, 0xEC	; 236
   1252a:	fd e1       	ldi	r31, 0x1D	; 29

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   1252c:	20 e0       	ldi	r18, 0x00	; 0
   1252e:	30 e0       	ldi	r19, 0x00	; 0
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
   12530:	40 81       	ld	r20, Z
   12532:	50 e0       	ldi	r21, 0x00	; 0
   12534:	48 17       	cp	r20, r24
   12536:	59 07       	cpc	r21, r25
   12538:	29 f4       	brne	.+10     	; 0x12544 <find_device+0x3e>
   1253a:	41 81       	ldd	r20, Z+1	; 0x01
   1253c:	50 e0       	ldi	r21, 0x00	; 0
   1253e:	64 17       	cp	r22, r20
   12540:	75 07       	cpc	r23, r21
   12542:	49 f0       	breq	.+18     	; 0x12556 <find_device+0x50>

    ///@brief convert to device address
    address -= base;

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   12544:	2f 5f       	subi	r18, 0xFF	; 255
   12546:	3f 4f       	sbci	r19, 0xFF	; 255
   12548:	bb 96       	adiw	r30, 0x2b	; 43
   1254a:	2c 30       	cpi	r18, 0x0C	; 12
   1254c:	31 05       	cpc	r19, r1
   1254e:	81 f7       	brne	.-32     	; 0x12530 <find_device+0x2a>
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
        return(-1);
   12550:	8f ef       	ldi	r24, 0xFF	; 255
   12552:	9f ef       	ldi	r25, 0xFF	; 255
   12554:	08 95       	ret
   12556:	c9 01       	movw	r24, r18
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
            return(i);
    }
    return(-1);
}
   12558:	08 95       	ret

0001255a <set_active_device>:
/// Since we can be called multiple times per single GPIB state we do not
/// display state changes here. Other code displays the active state.
///@param index: Devices[] index
///@return 1 on success or 0 on fail
int set_active_device(int index)
{
   1255a:	1f 93       	push	r17
   1255c:	cf 93       	push	r28
   1255e:	df 93       	push	r29
    int type,address;

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
   12560:	8f 3f       	cpi	r24, 0xFF	; 255
   12562:	2f ef       	ldi	r18, 0xFF	; 255
   12564:	92 07       	cpc	r25, r18
   12566:	09 f4       	brne	.+2      	; 0x1256a <set_active_device+0x10>
   12568:	fa c0       	rjmp	.+500    	; 0x1275e <set_active_device+0x204>
   1256a:	ec 01       	movw	r28, r24
    {
        return(0);
    }

    if(index < 0 || index >= MAX_DEVICES)
   1256c:	0c 97       	sbiw	r24, 0x0c	; 12
   1256e:	c0 f0       	brcs	.+48     	; 0x125a0 <set_active_device+0x46>
    {
        if(debuglevel & 1)
   12570:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12574:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12578:	9c 01       	movw	r18, r24
   1257a:	21 70       	andi	r18, 0x01	; 1
   1257c:	33 27       	eor	r19, r19
   1257e:	80 ff       	sbrs	r24, 0
   12580:	f0 c0       	rjmp	.+480    	; 0x12762 <set_active_device+0x208>
            printf("set_active_device:(%d) out of range\n", index);
   12582:	df 93       	push	r29
   12584:	cf 93       	push	r28
   12586:	82 e0       	ldi	r24, 0x02	; 2
   12588:	9f e1       	ldi	r25, 0x1F	; 31
   1258a:	1f 92       	push	r1
   1258c:	9f 93       	push	r25
   1258e:	8f 93       	push	r24
   12590:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   12594:	0f 90       	pop	r0
   12596:	0f 90       	pop	r0
   12598:	0f 90       	pop	r0
   1259a:	0f 90       	pop	r0
   1259c:	0f 90       	pop	r0
   1259e:	df c0       	rjmp	.+446    	; 0x1275e <set_active_device+0x204>
        return(0);
    }

    type = Devices[index].TYPE;
    address = Devices[index].ADDRESS;
   125a0:	8b e2       	ldi	r24, 0x2B	; 43
   125a2:	8c 9f       	mul	r24, r28
   125a4:	f0 01       	movw	r30, r0
   125a6:	8d 9f       	mul	r24, r29
   125a8:	f0 0d       	add	r31, r0
   125aa:	11 24       	eor	r1, r1
   125ac:	e4 51       	subi	r30, 0x14	; 20
   125ae:	f2 4e       	sbci	r31, 0xE2	; 226
   125b0:	81 81       	ldd	r24, Z+1	; 0x01
    if(address < 0 || address > 30)
   125b2:	8f 31       	cpi	r24, 0x1F	; 31
   125b4:	e8 f0       	brcs	.+58     	; 0x125f0 <set_active_device+0x96>
    {
        if(debuglevel & 1)
   125b6:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   125ba:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   125be:	9a 01       	movw	r18, r20
   125c0:	21 70       	andi	r18, 0x01	; 1
   125c2:	33 27       	eor	r19, r19
   125c4:	40 ff       	sbrs	r20, 0
   125c6:	cd c0       	rjmp	.+410    	; 0x12762 <set_active_device+0x208>
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
   125c8:	1f 92       	push	r1
   125ca:	8f 93       	push	r24
   125cc:	df 93       	push	r29
   125ce:	cf 93       	push	r28
   125d0:	89 ec       	ldi	r24, 0xC9	; 201
   125d2:	9e e1       	ldi	r25, 0x1E	; 30
   125d4:	1f 92       	push	r1
   125d6:	9f 93       	push	r25
   125d8:	8f 93       	push	r24
   125da:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   125de:	8d b7       	in	r24, 0x3d	; 61
   125e0:	9e b7       	in	r25, 0x3e	; 62
   125e2:	07 96       	adiw	r24, 0x07	; 7
   125e4:	0f b6       	in	r0, 0x3f	; 63
   125e6:	f8 94       	cli
   125e8:	9e bf       	out	0x3e, r25	; 62
   125ea:	0f be       	out	0x3f, r0	; 63
   125ec:	8d bf       	out	0x3d, r24	; 61
   125ee:	b7 c0       	rjmp	.+366    	; 0x1275e <set_active_device+0x204>
        if(debuglevel & 1)
            printf("set_active_device:(%d) out of range\n", index);
        return(0);
    }

    type = Devices[index].TYPE;
   125f0:	10 81       	ld	r17, Z
   125f2:	81 2f       	mov	r24, r17
   125f4:	90 e0       	ldi	r25, 0x00	; 0
        if(debuglevel & 1)
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
        return(0);
    }

    if(Devices[index].dev == NULL)
   125f6:	27 a1       	ldd	r18, Z+39	; 0x27
   125f8:	30 a5       	ldd	r19, Z+40	; 0x28
   125fa:	21 15       	cp	r18, r1
   125fc:	31 05       	cpc	r19, r1
   125fe:	01 f5       	brne	.+64     	; 0x12640 <set_active_device+0xe6>
    {
        if(debuglevel & 1)
   12600:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   12604:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   12608:	9a 01       	movw	r18, r20
   1260a:	21 70       	andi	r18, 0x01	; 1
   1260c:	33 27       	eor	r19, r19
   1260e:	40 ff       	sbrs	r20, 0
            printf("set_active_device: index:%d type:%d:%s, dev == NULL\n", 
   12610:	a8 c0       	rjmp	.+336    	; 0x12762 <set_active_device+0x208>
   12612:	5c df       	rcall	.-328    	; 0x124cc <type_to_str>
   12614:	9f 93       	push	r25
   12616:	8f 93       	push	r24
   12618:	1f 92       	push	r1
   1261a:	1f 93       	push	r17
   1261c:	df 93       	push	r29
   1261e:	cf 93       	push	r28
   12620:	84 e9       	ldi	r24, 0x94	; 148
   12622:	9e e1       	ldi	r25, 0x1E	; 30
   12624:	1f 92       	push	r1
   12626:	9f 93       	push	r25
   12628:	8f 93       	push	r24
   1262a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1262e:	8d b7       	in	r24, 0x3d	; 61
   12630:	9e b7       	in	r25, 0x3e	; 62
   12632:	09 96       	adiw	r24, 0x09	; 9
   12634:	0f b6       	in	r0, 0x3f	; 63
   12636:	f8 94       	cli
   12638:	9e bf       	out	0x3e, r25	; 62
   1263a:	0f be       	out	0x3f, r0	; 63
   1263c:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == NO_TYPE)
   1263e:	8f c0       	rjmp	.+286    	; 0x1275e <set_active_device+0x204>
   12640:	00 97       	sbiw	r24, 0x00	; 0
    {
        if(debuglevel & 1)
   12642:	11 f5       	brne	.+68     	; 0x12688 <set_active_device+0x12e>
   12644:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12648:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1264c:	9c 01       	movw	r18, r24
   1264e:	21 70       	andi	r18, 0x01	; 1
   12650:	33 27       	eor	r19, r19
   12652:	80 ff       	sbrs	r24, 0
            printf("set_active_device: index %d uninitalized type:%d:%s\n", 
   12654:	86 c0       	rjmp	.+268    	; 0x12762 <set_active_device+0x208>
   12656:	80 e0       	ldi	r24, 0x00	; 0
   12658:	90 e0       	ldi	r25, 0x00	; 0
   1265a:	38 df       	rcall	.-400    	; 0x124cc <type_to_str>
   1265c:	9f 93       	push	r25
   1265e:	8f 93       	push	r24
   12660:	1f 92       	push	r1
   12662:	1f 92       	push	r1
   12664:	df 93       	push	r29
   12666:	cf 93       	push	r28
   12668:	8f e5       	ldi	r24, 0x5F	; 95
   1266a:	9e e1       	ldi	r25, 0x1E	; 30
   1266c:	1f 92       	push	r1
   1266e:	9f 93       	push	r25
   12670:	8f 93       	push	r24
   12672:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   12676:	8d b7       	in	r24, 0x3d	; 61
   12678:	9e b7       	in	r25, 0x3e	; 62
   1267a:	09 96       	adiw	r24, 0x09	; 9
   1267c:	0f b6       	in	r0, 0x3f	; 63
   1267e:	f8 94       	cli
   12680:	9e bf       	out	0x3e, r25	; 62
   12682:	0f be       	out	0x3f, r0	; 63
   12684:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == PRINTER_TYPE)
   12686:	6b c0       	rjmp	.+214    	; 0x1275e <set_active_device+0x204>
   12688:	84 30       	cpi	r24, 0x04	; 4
   1268a:	91 05       	cpc	r25, r1
    {
        PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   1268c:	29 f4       	brne	.+10     	; 0x12698 <set_active_device+0x13e>
   1268e:	30 93 6a 18 	sts	0x186A, r19	; 0x80186a <PRINTERp+0x1>
   12692:	20 93 69 18 	sts	0x1869, r18	; 0x801869 <PRINTERp>
        return(1);
    }

    if(type == AMIGO_TYPE || type == SS80_TYPE) 
   12696:	41 c0       	rjmp	.+130    	; 0x1271a <set_active_device+0x1c0>
   12698:	41 2f       	mov	r20, r17
   1269a:	4d 7f       	andi	r20, 0xFD	; 253
   1269c:	41 30       	cpi	r20, 0x01	; 1
   1269e:	09 f0       	breq	.+2      	; 0x126a2 <set_active_device+0x148>
    {
        if(Devices[index].state == NULL)
   126a0:	3f c0       	rjmp	.+126    	; 0x12720 <set_active_device+0x1c6>
   126a2:	41 a5       	ldd	r20, Z+41	; 0x29
   126a4:	52 a5       	ldd	r21, Z+42	; 0x2a
   126a6:	41 15       	cp	r20, r1
   126a8:	51 05       	cpc	r21, r1
        {
            if(debuglevel & 1)
   126aa:	01 f5       	brne	.+64     	; 0x126ec <set_active_device+0x192>
   126ac:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   126b0:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   126b4:	9a 01       	movw	r18, r20
   126b6:	21 70       	andi	r18, 0x01	; 1
   126b8:	33 27       	eor	r19, r19
                printf("set_active_device: index: %d type:%d:%s, state == NULL\n",
   126ba:	40 ff       	sbrs	r20, 0
   126bc:	52 c0       	rjmp	.+164    	; 0x12762 <set_active_device+0x208>
   126be:	06 df       	rcall	.-500    	; 0x124cc <type_to_str>
   126c0:	9f 93       	push	r25
   126c2:	8f 93       	push	r24
   126c4:	1f 92       	push	r1
   126c6:	1f 93       	push	r17
   126c8:	df 93       	push	r29
   126ca:	cf 93       	push	r28
   126cc:	87 e2       	ldi	r24, 0x27	; 39
   126ce:	9e e1       	ldi	r25, 0x1E	; 30
   126d0:	1f 92       	push	r1
   126d2:	9f 93       	push	r25
   126d4:	8f 93       	push	r24
   126d6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   126da:	8d b7       	in	r24, 0x3d	; 61
   126dc:	9e b7       	in	r25, 0x3e	; 62
   126de:	09 96       	adiw	r24, 0x09	; 9
   126e0:	0f b6       	in	r0, 0x3f	; 63
   126e2:	f8 94       	cli
   126e4:	9e bf       	out	0x3e, r25	; 62
   126e6:	0f be       	out	0x3f, r0	; 63
   126e8:	8d bf       	out	0x3d, r24	; 61
                     index,type,type_to_str(type));
            return(0);
        }
#ifdef AMIGO
        if(type == AMIGO_TYPE)
   126ea:	39 c0       	rjmp	.+114    	; 0x1275e <set_active_device+0x204>
   126ec:	81 30       	cpi	r24, 0x01	; 1
   126ee:	91 05       	cpc	r25, r1
        {
            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   126f0:	49 f4       	brne	.+18     	; 0x12704 <set_active_device+0x1aa>
   126f2:	30 93 64 18 	sts	0x1864, r19	; 0x801864 <AMIGOp+0x1>
   126f6:	20 93 63 18 	sts	0x1863, r18	; 0x801863 <AMIGOp>
            AMIGOs = (AMIGOStateType *) Devices[index].state;
   126fa:	50 93 62 18 	sts	0x1862, r21	; 0x801862 <AMIGOs+0x1>
   126fe:	40 93 61 18 	sts	0x1861, r20	; 0x801861 <AMIGOs>
            return(1);
        }
#endif
        if(type == SS80_TYPE)
   12702:	0b c0       	rjmp	.+22     	; 0x1271a <set_active_device+0x1c0>
   12704:	83 30       	cpi	r24, 0x03	; 3
   12706:	91 05       	cpc	r25, r1
        {
            SS80p = (SS80DiskType *) Devices[index].dev;
   12708:	59 f4       	brne	.+22     	; 0x12720 <set_active_device+0x1c6>
   1270a:	30 93 68 18 	sts	0x1868, r19	; 0x801868 <SS80p+0x1>
   1270e:	20 93 67 18 	sts	0x1867, r18	; 0x801867 <SS80p>
            SS80s = (SS80StateType *) Devices[index].state;
   12712:	50 93 66 18 	sts	0x1866, r21	; 0x801866 <SS80s+0x1>
   12716:	40 93 65 18 	sts	0x1865, r20	; 0x801865 <SS80s>
            return(1);
   1271a:	21 e0       	ldi	r18, 0x01	; 1
   1271c:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    if(debuglevel & 1)
   1271e:	21 c0       	rjmp	.+66     	; 0x12762 <set_active_device+0x208>
   12720:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   12724:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   12728:	9a 01       	movw	r18, r20
   1272a:	21 70       	andi	r18, 0x01	; 1
   1272c:	33 27       	eor	r19, r19
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
   1272e:	40 ff       	sbrs	r20, 0
   12730:	18 c0       	rjmp	.+48     	; 0x12762 <set_active_device+0x208>
   12732:	cc de       	rcall	.-616    	; 0x124cc <type_to_str>
   12734:	9f 93       	push	r25
   12736:	8f 93       	push	r24
   12738:	1f 92       	push	r1
   1273a:	1f 93       	push	r17
   1273c:	df 93       	push	r29
   1273e:	cf 93       	push	r28
   12740:	8c ef       	ldi	r24, 0xFC	; 252
   12742:	9d e1       	ldi	r25, 0x1D	; 29
   12744:	1f 92       	push	r1
   12746:	9f 93       	push	r25
   12748:	8f 93       	push	r24
   1274a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1274e:	8d b7       	in	r24, 0x3d	; 61
   12750:	9e b7       	in	r25, 0x3e	; 62
   12752:	09 96       	adiw	r24, 0x09	; 9
   12754:	0f b6       	in	r0, 0x3f	; 63
   12756:	f8 94       	cli
   12758:	9e bf       	out	0x3e, r25	; 62
   1275a:	0f be       	out	0x3f, r0	; 63

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
    {
        return(0);
   1275c:	8d bf       	out	0x3d, r24	; 61
   1275e:	20 e0       	ldi	r18, 0x00	; 0
    }
    if(debuglevel & 1)
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
            index,type,type_to_str(type));
    return(0);
}
   12760:	30 e0       	ldi	r19, 0x00	; 0
   12762:	c9 01       	movw	r24, r18
   12764:	df 91       	pop	r29
   12766:	cf 91       	pop	r28
   12768:	1f 91       	pop	r17
   1276a:	08 95       	ret

0001276c <SS80_Set_Defaults>:
///@brief Set Default Values for a new SS80 Device IF defaults have been defined
/// Most values in the CONTROLER and UNIT are defaults that should not need to be specified
/// Note all of the values are zeroed on allocation including strings
///@return void
void SS80_Set_Defaults(int index)
{
   1276c:	0f 93       	push	r16
   1276e:	1f 93       	push	r17
   12770:	cf 93       	push	r28
   12772:	df 93       	push	r29
   12774:	ec 01       	movw	r28, r24
	int defindex = find_type(SS80_DEFAULT_TYPE);
   12776:	82 e0       	ldi	r24, 0x02	; 2
   12778:	90 e0       	ldi	r25, 0x00	; 0
   1277a:	85 de       	rcall	.-758    	; 0x12486 <find_type>
	SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
	SS80DiskType *SS80DEFAULTp;

	if(defindex < 0 )
   1277c:	97 fd       	sbrc	r25, 7
   1277e:	88 c0       	rjmp	.+272    	; 0x12890 <SS80_Set_Defaults+0x124>
/// Note all of the values are zeroed on allocation including strings
///@return void
void SS80_Set_Defaults(int index)
{
	int defindex = find_type(SS80_DEFAULT_TYPE);
	SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   12780:	2b e2       	ldi	r18, 0x2B	; 43
   12782:	2c 9f       	mul	r18, r28
   12784:	f0 01       	movw	r30, r0
   12786:	2d 9f       	mul	r18, r29
   12788:	f0 0d       	add	r31, r0
   1278a:	11 24       	eor	r1, r1
   1278c:	e4 51       	subi	r30, 0x14	; 20
   1278e:	f2 4e       	sbci	r31, 0xE2	; 226
   12790:	c7 a1       	ldd	r28, Z+39	; 0x27
   12792:	d0 a5       	ldd	r29, Z+40	; 0x28
	SS80DiskType *SS80DEFAULTp;

	if(defindex < 0 )
		return;

	SS80DEFAULTp = (SS80DiskType *) Devices[defindex].dev;
   12794:	28 9f       	mul	r18, r24
   12796:	f0 01       	movw	r30, r0
   12798:	29 9f       	mul	r18, r25
   1279a:	f0 0d       	add	r31, r0
   1279c:	11 24       	eor	r1, r1
   1279e:	e4 51       	subi	r30, 0x14	; 20
   127a0:	f2 4e       	sbci	r31, 0xE2	; 226
   127a2:	07 a1       	ldd	r16, Z+39	; 0x27
   127a4:	10 a5       	ldd	r17, Z+40	; 0x28

	SS80p->HEADER.ADDRESS				= SS80DEFAULTp->HEADER.ADDRESS;
   127a6:	f8 01       	movw	r30, r16
   127a8:	80 81       	ld	r24, Z
   127aa:	88 83       	st	Y, r24
	SS80p->HEADER.PPR					= SS80DEFAULTp->HEADER.PPR;
   127ac:	81 81       	ldd	r24, Z+1	; 0x01
   127ae:	89 83       	std	Y+1, r24	; 0x01
	strncpy(SS80p->HEADER.NAME,SS80DEFAULTp->HEADER.NAME,sizeof(SS80p->HEADER.NAME)-1);
   127b0:	b8 01       	movw	r22, r16
   127b2:	6e 5f       	subi	r22, 0xFE	; 254
   127b4:	7f 4f       	sbci	r23, 0xFF	; 255
   127b6:	40 e2       	ldi	r20, 0x20	; 32
   127b8:	50 e0       	ldi	r21, 0x00	; 0
   127ba:	ce 01       	movw	r24, r28
   127bc:	02 96       	adiw	r24, 0x02	; 2
   127be:	0e 94 b3 31 	call	0x6366	; 0x6366 <strncpy>

	SS80p->CONFIG.ID					= SS80DEFAULTp->CONFIG.ID;
   127c2:	f8 01       	movw	r30, r16
   127c4:	83 a1       	ldd	r24, Z+35	; 0x23
   127c6:	94 a1       	ldd	r25, Z+36	; 0x24
   127c8:	9c a3       	std	Y+36, r25	; 0x24
   127ca:	8b a3       	std	Y+35, r24	; 0x23
	SS80p->CONTROLLER.UNITS_INSTALLED	= SS80DEFAULTp->CONTROLLER.UNITS_INSTALLED;
   127cc:	85 a1       	ldd	r24, Z+37	; 0x25
   127ce:	96 a1       	ldd	r25, Z+38	; 0x26
   127d0:	9e a3       	std	Y+38, r25	; 0x26
   127d2:	8d a3       	std	Y+37, r24	; 0x25
	SS80p->CONTROLLER.TRANSFER_RATE		= SS80DEFAULTp->CONTROLLER.TRANSFER_RATE;
   127d4:	87 a1       	ldd	r24, Z+39	; 0x27
   127d6:	90 a5       	ldd	r25, Z+40	; 0x28
   127d8:	98 a7       	std	Y+40, r25	; 0x28
   127da:	8f a3       	std	Y+39, r24	; 0x27
	SS80p->CONTROLLER.TYPE				= SS80DEFAULTp->CONTROLLER.TYPE;
   127dc:	81 a5       	ldd	r24, Z+41	; 0x29
   127de:	89 a7       	std	Y+41, r24	; 0x29

	SS80p->UNIT.UNIT_TYPE				= SS80DEFAULTp->UNIT.UNIT_TYPE;
   127e0:	82 a5       	ldd	r24, Z+42	; 0x2a
   127e2:	8a a7       	std	Y+42, r24	; 0x2a
	SS80p->UNIT.DEVICE_NUMBER			= SS80DEFAULTp->UNIT.DEVICE_NUMBER;
   127e4:	83 a5       	ldd	r24, Z+43	; 0x2b
   127e6:	94 a5       	ldd	r25, Z+44	; 0x2c
   127e8:	a5 a5       	ldd	r26, Z+45	; 0x2d
   127ea:	b6 a5       	ldd	r27, Z+46	; 0x2e
   127ec:	8b a7       	std	Y+43, r24	; 0x2b
   127ee:	9c a7       	std	Y+44, r25	; 0x2c
   127f0:	ad a7       	std	Y+45, r26	; 0x2d
   127f2:	be a7       	std	Y+46, r27	; 0x2e
	SS80p->UNIT.BYTES_PER_BLOCK			= SS80DEFAULTp->UNIT.BYTES_PER_BLOCK;
   127f4:	87 a5       	ldd	r24, Z+47	; 0x2f
   127f6:	90 a9       	ldd	r25, Z+48	; 0x30
   127f8:	98 ab       	std	Y+48, r25	; 0x30
   127fa:	8f a7       	std	Y+47, r24	; 0x2f
	SS80p->UNIT.BUFFERED_BLOCKS			= SS80DEFAULTp->UNIT.BUFFERED_BLOCKS;
   127fc:	81 a9       	ldd	r24, Z+49	; 0x31
   127fe:	89 ab       	std	Y+49, r24	; 0x31
	SS80p->UNIT.BURST_SIZE				= SS80DEFAULTp->UNIT.BURST_SIZE;
   12800:	82 a9       	ldd	r24, Z+50	; 0x32
   12802:	8a ab       	std	Y+50, r24	; 0x32
	SS80p->UNIT.BLOCK_TIME				= SS80DEFAULTp->UNIT.BLOCK_TIME;
   12804:	83 a9       	ldd	r24, Z+51	; 0x33
   12806:	94 a9       	ldd	r25, Z+52	; 0x34
   12808:	9c ab       	std	Y+52, r25	; 0x34
   1280a:	8b ab       	std	Y+51, r24	; 0x33
	SS80p->UNIT.CONTINOUS_TRANSFER_RATE	= SS80DEFAULTp->UNIT.CONTINOUS_TRANSFER_RATE;
   1280c:	85 a9       	ldd	r24, Z+53	; 0x35
   1280e:	96 a9       	ldd	r25, Z+54	; 0x36
   12810:	9e ab       	std	Y+54, r25	; 0x36
   12812:	8d ab       	std	Y+53, r24	; 0x35
	SS80p->UNIT.OPTIMAL_RETRY_TIME		= SS80DEFAULTp->UNIT.OPTIMAL_RETRY_TIME;
   12814:	87 a9       	ldd	r24, Z+55	; 0x37
   12816:	90 ad       	ldd	r25, Z+56	; 0x38
   12818:	98 af       	std	Y+56, r25	; 0x38
   1281a:	8f ab       	std	Y+55, r24	; 0x37
	SS80p->UNIT.ACCESS_TIME				= SS80DEFAULTp->UNIT.ACCESS_TIME;
   1281c:	81 ad       	ldd	r24, Z+57	; 0x39
   1281e:	92 ad       	ldd	r25, Z+58	; 0x3a
   12820:	9a af       	std	Y+58, r25	; 0x3a
   12822:	89 af       	std	Y+57, r24	; 0x39
	SS80p->UNIT.MAXIMUM_INTERLEAVE		= SS80DEFAULTp->UNIT.MAXIMUM_INTERLEAVE;
   12824:	83 ad       	ldd	r24, Z+59	; 0x3b
   12826:	8b af       	std	Y+59, r24	; 0x3b
	SS80p->UNIT.FIXED_VOLUMES			= SS80DEFAULTp->UNIT.FIXED_VOLUMES;
   12828:	84 ad       	ldd	r24, Z+60	; 0x3c
   1282a:	8c af       	std	Y+60, r24	; 0x3c

	SS80p->VOLUME.MAX_CYLINDER			= SS80DEFAULTp->VOLUME.MAX_CYLINDER;
   1282c:	fe 96       	adiw	r30, 0x3e	; 62
   1282e:	80 81       	ld	r24, Z
   12830:	91 81       	ldd	r25, Z+1	; 0x01
   12832:	a2 81       	ldd	r26, Z+2	; 0x02
   12834:	b3 81       	ldd	r27, Z+3	; 0x03
   12836:	fe 01       	movw	r30, r28
   12838:	fe 96       	adiw	r30, 0x3e	; 62
   1283a:	80 83       	st	Z, r24
   1283c:	91 83       	std	Z+1, r25	; 0x01
   1283e:	a2 83       	std	Z+2, r26	; 0x02
   12840:	b3 83       	std	Z+3, r27	; 0x03
	SS80p->VOLUME.MAX_HEAD				= SS80DEFAULTp->VOLUME.MAX_HEAD;
   12842:	f8 01       	movw	r30, r16
   12844:	ee 5b       	subi	r30, 0xBE	; 190
   12846:	ff 4f       	sbci	r31, 0xFF	; 255
   12848:	80 81       	ld	r24, Z
   1284a:	fe 01       	movw	r30, r28
   1284c:	ee 5b       	subi	r30, 0xBE	; 190
   1284e:	ff 4f       	sbci	r31, 0xFF	; 255
   12850:	80 83       	st	Z, r24
	SS80p->VOLUME.MAX_SECTOR			= SS80DEFAULTp->VOLUME.MAX_SECTOR;
   12852:	f8 01       	movw	r30, r16
   12854:	ed 5b       	subi	r30, 0xBD	; 189
   12856:	ff 4f       	sbci	r31, 0xFF	; 255
   12858:	80 81       	ld	r24, Z
   1285a:	91 81       	ldd	r25, Z+1	; 0x01
   1285c:	fe 01       	movw	r30, r28
   1285e:	ed 5b       	subi	r30, 0xBD	; 189
   12860:	ff 4f       	sbci	r31, 0xFF	; 255
   12862:	91 83       	std	Z+1, r25	; 0x01
   12864:	80 83       	st	Z, r24
	SS80p->VOLUME.MAX_BLOCK_NUMBER		= SS80DEFAULTp->VOLUME.MAX_BLOCK_NUMBER;
   12866:	f8 01       	movw	r30, r16
   12868:	eb 5b       	subi	r30, 0xBB	; 187
   1286a:	ff 4f       	sbci	r31, 0xFF	; 255
   1286c:	80 81       	ld	r24, Z
   1286e:	91 81       	ldd	r25, Z+1	; 0x01
   12870:	a2 81       	ldd	r26, Z+2	; 0x02
   12872:	b3 81       	ldd	r27, Z+3	; 0x03
   12874:	fe 01       	movw	r30, r28
   12876:	eb 5b       	subi	r30, 0xBB	; 187
   12878:	ff 4f       	sbci	r31, 0xFF	; 255
   1287a:	80 83       	st	Z, r24
   1287c:	91 83       	std	Z+1, r25	; 0x01
   1287e:	a2 83       	std	Z+2, r26	; 0x02
   12880:	b3 83       	std	Z+3, r27	; 0x03
	SS80p->VOLUME.INTERLEAVE			= SS80DEFAULTp->VOLUME.INTERLEAVE;
   12882:	f8 01       	movw	r30, r16
   12884:	e7 5b       	subi	r30, 0xB7	; 183
   12886:	ff 4f       	sbci	r31, 0xFF	; 255
   12888:	80 81       	ld	r24, Z
   1288a:	c7 5b       	subi	r28, 0xB7	; 183
   1288c:	df 4f       	sbci	r29, 0xFF	; 255
   1288e:	88 83       	st	Y, r24
};
   12890:	df 91       	pop	r29
   12892:	cf 91       	pop	r28
   12894:	1f 91       	pop	r17
   12896:	0f 91       	pop	r16
   12898:	08 95       	ret

0001289a <alloc_device>:

///@brief Allocate a Device structure for a disk or printer
///@param type: disk type
///@return Devices[] index on sucess or -1
int alloc_device(int type)
{
   1289a:	0f 93       	push	r16
   1289c:	1f 93       	push	r17
   1289e:	cf 93       	push	r28
   128a0:	df 93       	push	r29
    int ind;
    int index = -1;

    // Find a free slot
    ind = find_free();
   128a2:	ec 01       	movw	r28, r24
   128a4:	2c de       	rcall	.-936    	; 0x124fe <find_free>
    if(ind == -1)
   128a6:	8c 01       	movw	r16, r24
   128a8:	0f 3f       	cpi	r16, 0xFF	; 255
   128aa:	8f ef       	ldi	r24, 0xFF	; 255
   128ac:	18 07       	cpc	r17, r24
    {
        if(debuglevel & 1)
   128ae:	99 f4       	brne	.+38     	; 0x128d6 <alloc_device+0x3c>
   128b0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   128b4:	80 ff       	sbrs	r24, 0
            printf("alloc_device: Device table is full\n", type);
   128b6:	9e c0       	rjmp	.+316    	; 0x129f4 <alloc_device+0x15a>
   128b8:	df 93       	push	r29
   128ba:	cf 93       	push	r28
   128bc:	88 ed       	ldi	r24, 0xD8	; 216
   128be:	9d e1       	ldi	r25, 0x1D	; 29
   128c0:	1f 92       	push	r1
   128c2:	9f 93       	push	r25
   128c4:	8f 93       	push	r24
   128c6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   128ca:	0f 90       	pop	r0
   128cc:	0f 90       	pop	r0
   128ce:	0f 90       	pop	r0
   128d0:	0f 90       	pop	r0
   128d2:	0f 90       	pop	r0
        return(ind);
    }

    switch(type)
   128d4:	8f c0       	rjmp	.+286    	; 0x129f4 <alloc_device+0x15a>
   128d6:	c2 30       	cpi	r28, 0x02	; 2
   128d8:	d1 05       	cpc	r29, r1
   128da:	c1 f1       	breq	.+112    	; 0x1294c <alloc_device+0xb2>
   128dc:	dc f4       	brge	.+54     	; 0x12914 <alloc_device+0x7a>
   128de:	c1 30       	cpi	r28, 0x01	; 1
   128e0:	d1 05       	cpc	r29, r1
   128e2:	09 f0       	breq	.+2      	; 0x128e6 <alloc_device+0x4c>
            index = ind;
			SS80_Set_Defaults(index);	// Set any defaults we may have
            break;
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
   128e4:	6c c0       	rjmp	.+216    	; 0x129be <alloc_device+0x124>
   128e6:	8b e2       	ldi	r24, 0x2B	; 43
   128e8:	80 9f       	mul	r24, r16
   128ea:	e0 01       	movw	r28, r0
   128ec:	81 9f       	mul	r24, r17
   128ee:	d0 0d       	add	r29, r0
   128f0:	11 24       	eor	r1, r1
   128f2:	c4 51       	subi	r28, 0x14	; 20
   128f4:	d2 4e       	sbci	r29, 0xE2	; 226
   128f6:	81 e0       	ldi	r24, 0x01	; 1
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
   128f8:	88 83       	st	Y, r24
   128fa:	61 e0       	ldi	r22, 0x01	; 1
   128fc:	70 e0       	ldi	r23, 0x00	; 0
   128fe:	84 e3       	ldi	r24, 0x34	; 52
   12900:	90 e0       	ldi	r25, 0x00	; 0
   12902:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   12906:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   12908:	8f a3       	std	Y+39, r24	; 0x27
   1290a:	61 e0       	ldi	r22, 0x01	; 1
   1290c:	70 e0       	ldi	r23, 0x00	; 0
   1290e:	88 e1       	ldi	r24, 0x18	; 24
   12910:	90 e0       	ldi	r25, 0x00	; 0
        if(debuglevel & 1)
            printf("alloc_device: Device table is full\n", type);
        return(ind);
    }

    switch(type)
   12912:	50 c0       	rjmp	.+160    	; 0x129b4 <alloc_device+0x11a>
   12914:	c3 30       	cpi	r28, 0x03	; 3
   12916:	d1 05       	cpc	r29, r1
   12918:	81 f1       	breq	.+96     	; 0x1297a <alloc_device+0xe0>
   1291a:	c4 30       	cpi	r28, 0x04	; 4
   1291c:	d1 05       	cpc	r29, r1
   1291e:	09 f0       	breq	.+2      	; 0x12922 <alloc_device+0x88>
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
            index = ind;
            break;
#endif
        case PRINTER_TYPE:
            Devices[ind].TYPE = type;
   12920:	4e c0       	rjmp	.+156    	; 0x129be <alloc_device+0x124>
   12922:	8b e2       	ldi	r24, 0x2B	; 43
   12924:	80 9f       	mul	r24, r16
   12926:	e0 01       	movw	r28, r0
   12928:	81 9f       	mul	r24, r17
   1292a:	d0 0d       	add	r29, r0
   1292c:	11 24       	eor	r1, r1
   1292e:	c4 51       	subi	r28, 0x14	; 20
   12930:	d2 4e       	sbci	r29, 0xE2	; 226
   12932:	84 e0       	ldi	r24, 0x04	; 4
            Devices[ind].dev = safecalloc(sizeof(PRINTERDeviceType)+7,1);
   12934:	88 83       	st	Y, r24
   12936:	61 e0       	ldi	r22, 0x01	; 1
   12938:	70 e0       	ldi	r23, 0x00	; 0
   1293a:	8a e2       	ldi	r24, 0x2A	; 42
   1293c:	90 e0       	ldi	r25, 0x00	; 0
   1293e:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   12942:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = NULL;
   12944:	8f a3       	std	Y+39, r24	; 0x27
   12946:	1a a6       	std	Y+42, r1	; 0x2a
            index = ind;
            break;
   12948:	19 a6       	std	Y+41, r1	; 0x29

    switch(type)
    {
		// Same as SS80 type but sets initial defaults for any remaining SS80 drives
        case SS80_DEFAULT_TYPE:
            Devices[ind].TYPE = type;
   1294a:	54 c0       	rjmp	.+168    	; 0x129f4 <alloc_device+0x15a>
   1294c:	8b e2       	ldi	r24, 0x2B	; 43
   1294e:	80 9f       	mul	r24, r16
   12950:	e0 01       	movw	r28, r0
   12952:	81 9f       	mul	r24, r17
   12954:	d0 0d       	add	r29, r0
   12956:	11 24       	eor	r1, r1
   12958:	c4 51       	subi	r28, 0x14	; 20
   1295a:	d2 4e       	sbci	r29, 0xE2	; 226
   1295c:	82 e0       	ldi	r24, 0x02	; 2
            Devices[ind].dev = safecalloc(sizeof(SS80DiskType)+7,1);
   1295e:	88 83       	st	Y, r24
   12960:	61 e0       	ldi	r22, 0x01	; 1
   12962:	70 e0       	ldi	r23, 0x00	; 0
   12964:	81 e5       	ldi	r24, 0x51	; 81
   12966:	90 e0       	ldi	r25, 0x00	; 0
   12968:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   1296c:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
   1296e:	8f a3       	std	Y+39, r24	; 0x27
   12970:	61 e0       	ldi	r22, 0x01	; 1
   12972:	70 e0       	ldi	r23, 0x00	; 0
   12974:	86 e1       	ldi	r24, 0x16	; 22
   12976:	90 e0       	ldi	r25, 0x00	; 0
            index = ind;
            break;
        case SS80_TYPE:
            Devices[ind].TYPE = type;
   12978:	1d c0       	rjmp	.+58     	; 0x129b4 <alloc_device+0x11a>
   1297a:	8b e2       	ldi	r24, 0x2B	; 43
   1297c:	80 9f       	mul	r24, r16
   1297e:	e0 01       	movw	r28, r0
   12980:	81 9f       	mul	r24, r17
   12982:	d0 0d       	add	r29, r0
   12984:	11 24       	eor	r1, r1
   12986:	c4 51       	subi	r28, 0x14	; 20
   12988:	d2 4e       	sbci	r29, 0xE2	; 226
   1298a:	83 e0       	ldi	r24, 0x03	; 3
            Devices[ind].dev = safecalloc(sizeof(SS80DiskType)+7,1);
   1298c:	88 83       	st	Y, r24
   1298e:	61 e0       	ldi	r22, 0x01	; 1
   12990:	70 e0       	ldi	r23, 0x00	; 0
   12992:	81 e5       	ldi	r24, 0x51	; 81
   12994:	90 e0       	ldi	r25, 0x00	; 0
   12996:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   1299a:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
   1299c:	8f a3       	std	Y+39, r24	; 0x27
   1299e:	61 e0       	ldi	r22, 0x01	; 1
   129a0:	70 e0       	ldi	r23, 0x00	; 0
   129a2:	86 e1       	ldi	r24, 0x16	; 22
   129a4:	90 e0       	ldi	r25, 0x00	; 0
   129a6:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
            index = ind;
			SS80_Set_Defaults(index);	// Set any defaults we may have
   129aa:	9a a7       	std	Y+42, r25	; 0x2a
   129ac:	89 a7       	std	Y+41, r24	; 0x29
            break;
   129ae:	c8 01       	movw	r24, r16
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   129b0:	dd de       	rcall	.-582    	; 0x1276c <SS80_Set_Defaults>
   129b2:	20 c0       	rjmp	.+64     	; 0x129f4 <alloc_device+0x15a>
   129b4:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
            index = ind;
            break;
   129b8:	9a a7       	std	Y+42, r25	; 0x2a
            Devices[ind].dev = safecalloc(sizeof(PRINTERDeviceType)+7,1);
            Devices[ind].state = NULL;
            index = ind;
            break;
        default:
            if(debuglevel & 1)
   129ba:	89 a7       	std	Y+41, r24	; 0x29
   129bc:	1b c0       	rjmp	.+54     	; 0x129f4 <alloc_device+0x15a>
   129be:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("alloc_device: invalid type:%d:%s\n", type,type_to_str(type));
   129c2:	80 ff       	sbrs	r24, 0
   129c4:	15 c0       	rjmp	.+42     	; 0x129f0 <alloc_device+0x156>
   129c6:	ce 01       	movw	r24, r28
   129c8:	81 dd       	rcall	.-1278   	; 0x124cc <type_to_str>
   129ca:	9f 93       	push	r25
   129cc:	8f 93       	push	r24
   129ce:	df 93       	push	r29
   129d0:	cf 93       	push	r28
   129d2:	86 eb       	ldi	r24, 0xB6	; 182
   129d4:	9d e1       	ldi	r25, 0x1D	; 29
   129d6:	1f 92       	push	r1
   129d8:	9f 93       	push	r25
   129da:	8f 93       	push	r24
   129dc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   129e0:	8d b7       	in	r24, 0x3d	; 61
   129e2:	9e b7       	in	r25, 0x3e	; 62
   129e4:	07 96       	adiw	r24, 0x07	; 7
   129e6:	0f b6       	in	r0, 0x3f	; 63
   129e8:	f8 94       	cli
   129ea:	9e bf       	out	0x3e, r25	; 62
   129ec:	0f be       	out	0x3f, r0	; 63
   129ee:	8d bf       	out	0x3d, r24	; 61
            break;
    }
    return(index);
}
   129f0:	0f ef       	ldi	r16, 0xFF	; 255
   129f2:	1f ef       	ldi	r17, 0xFF	; 255
   129f4:	c8 01       	movw	r24, r16
   129f6:	df 91       	pop	r29
   129f8:	cf 91       	pop	r28
   129fa:	1f 91       	pop	r17
   129fc:	0f 91       	pop	r16
   129fe:	08 95       	ret

00012a00 <init_Devices>:

// =============================================
/// @brief Init Config Parser Stack
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
   12a00:	cf 93       	push	r28
   12a02:	df 93       	push	r29
    int i;
    stack_ind = 0;
   12a04:	10 92 76 18 	sts	0x1876, r1	; 0x801876 <stack_ind+0x1>
   12a08:	10 92 75 18 	sts	0x1875, r1	; 0x801875 <stack_ind>
   12a0c:	ec ee       	ldi	r30, 0xEC	; 236
   12a0e:	fd e1       	ldi	r31, 0x1D	; 29
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
        Devices[i].ADDRESS = 0;
        Devices[i].PPR = 0xff;
   12a10:	9f ef       	ldi	r25, 0xFF	; 255
        Devices[i].BLOCKS = 0;
        memset(Devices[i].model, 0, sizeof(Devices[i].model) );
   12a12:	80 e2       	ldi	r24, 0x20	; 32
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
   12a14:	10 82       	st	Z, r1
        Devices[i].ADDRESS = 0;
   12a16:	11 82       	std	Z+1, r1	; 0x01
        Devices[i].PPR = 0xff;
   12a18:	92 83       	std	Z+2, r25	; 0x02
        Devices[i].BLOCKS = 0;
   12a1a:	13 82       	std	Z+3, r1	; 0x03
   12a1c:	14 82       	std	Z+4, r1	; 0x04
   12a1e:	15 82       	std	Z+5, r1	; 0x05
   12a20:	16 82       	std	Z+6, r1	; 0x06
        memset(Devices[i].model, 0, sizeof(Devices[i].model) );
   12a22:	df 01       	movw	r26, r30
   12a24:	17 96       	adiw	r26, 0x07	; 7
   12a26:	ed 01       	movw	r28, r26
   12a28:	28 2f       	mov	r18, r24
   12a2a:	19 92       	st	Y+, r1
   12a2c:	2a 95       	dec	r18
   12a2e:	e9 f7       	brne	.-6      	; 0x12a2a <init_Devices+0x2a>
        Devices[i].dev = NULL;
   12a30:	10 a6       	std	Z+40, r1	; 0x28
   12a32:	17 a2       	std	Z+39, r1	; 0x27
        Devices[i].state = NULL;
   12a34:	12 a6       	std	Z+42, r1	; 0x2a
   12a36:	11 a6       	std	Z+41, r1	; 0x29
   12a38:	bb 96       	adiw	r30, 0x2b	; 43
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
   12a3a:	cf e1       	ldi	r28, 0x1F	; 31
   12a3c:	e0 3f       	cpi	r30, 0xF0	; 240
   12a3e:	fc 07       	cpc	r31, r28
   12a40:	49 f7       	brne	.-46     	; 0x12a14 <init_Devices+0x14>
        Devices[i].BLOCKS = 0;
        memset(Devices[i].model, 0, sizeof(Devices[i].model) );
        Devices[i].dev = NULL;
        Devices[i].state = NULL;
    }
}
   12a42:	df 91       	pop	r29
   12a44:	cf 91       	pop	r28
   12a46:	08 95       	ret

00012a48 <push_state>:
/// @brief Push Parser State
/// @param state: parser state
/// @return state
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
   12a48:	20 91 75 18 	lds	r18, 0x1875	; 0x801875 <stack_ind>
   12a4c:	30 91 76 18 	lds	r19, 0x1876	; 0x801876 <stack_ind+0x1>
   12a50:	25 30       	cpi	r18, 0x05	; 5
   12a52:	31 05       	cpc	r19, r1
   12a54:	7c f4       	brge	.+30     	; 0x12a74 <push_state+0x2c>
        stack_p[stack_ind++] = state;
   12a56:	a9 01       	movw	r20, r18
   12a58:	4f 5f       	subi	r20, 0xFF	; 255
   12a5a:	5f 4f       	sbci	r21, 0xFF	; 255
   12a5c:	50 93 76 18 	sts	0x1876, r21	; 0x801876 <stack_ind+0x1>
   12a60:	40 93 75 18 	sts	0x1875, r20	; 0x801875 <stack_ind>
   12a64:	22 0f       	add	r18, r18
   12a66:	33 1f       	adc	r19, r19
   12a68:	f9 01       	movw	r30, r18
   12a6a:	e5 59       	subi	r30, 0x95	; 149
   12a6c:	f7 4e       	sbci	r31, 0xE7	; 231
   12a6e:	80 83       	st	Z, r24
   12a70:	91 83       	std	Z+1, r25	; 0x01
    else
        return(START_STATE);
    return(state);
   12a72:	08 95       	ret
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
        stack_p[stack_ind++] = state;
    else
        return(START_STATE);
   12a74:	80 e0       	ldi	r24, 0x00	; 0
   12a76:	90 e0       	ldi	r25, 0x00	; 0
    return(state);
}
   12a78:	08 95       	ret

00012a7a <pop_state>:
/// ===============================================
/// @brief Pop Parser State
/// @return state
int pop_state()
{
    if(stack_ind > 0)
   12a7a:	80 91 75 18 	lds	r24, 0x1875	; 0x801875 <stack_ind>
   12a7e:	90 91 76 18 	lds	r25, 0x1876	; 0x801876 <stack_ind+0x1>
   12a82:	18 16       	cp	r1, r24
   12a84:	19 06       	cpc	r1, r25
   12a86:	6c f4       	brge	.+26     	; 0x12aa2 <pop_state+0x28>
        return(stack_p[--stack_ind]);
   12a88:	01 97       	sbiw	r24, 0x01	; 1
   12a8a:	90 93 76 18 	sts	0x1876, r25	; 0x801876 <stack_ind+0x1>
   12a8e:	80 93 75 18 	sts	0x1875, r24	; 0x801875 <stack_ind>
   12a92:	88 0f       	add	r24, r24
   12a94:	99 1f       	adc	r25, r25
   12a96:	fc 01       	movw	r30, r24
   12a98:	e5 59       	subi	r30, 0x95	; 149
   12a9a:	f7 4e       	sbci	r31, 0xE7	; 231
   12a9c:	80 81       	ld	r24, Z
   12a9e:	91 81       	ldd	r25, Z+1	; 0x01
   12aa0:	08 95       	ret
    else
        return(START_STATE);
   12aa2:	80 e0       	ldi	r24, 0x00	; 0
   12aa4:	90 e0       	ldi	r25, 0x00	; 0
}
   12aa6:	08 95       	ret

00012aa8 <assign_value>:
/// @param[in] maxval: maximum value
/// @param[in] *val: value to set
///
/// @return  1 is matched and value in range, 0 not matched or out of range
bool assign_value(char *str, uint32_t minval, uint32_t maxval, uint32_t *val)
{
   12aa8:	a0 e0       	ldi	r26, 0x00	; 0
   12aaa:	b0 e0       	ldi	r27, 0x00	; 0
   12aac:	ea e5       	ldi	r30, 0x5A	; 90
   12aae:	f5 e9       	ldi	r31, 0x95	; 149
   12ab0:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__prologue_saves__+0x4>
   12ab4:	2a 01       	movw	r4, r20
   12ab6:	3b 01       	movw	r6, r22
   12ab8:	48 01       	movw	r8, r16
   12aba:	59 01       	movw	r10, r18
   12abc:	87 01       	movw	r16, r14
    uint32_t tmp;
    int bad = 0;
    char *ptr;

    // Skip spaces before assignment
    ptr = skipspaces(str);
   12abe:	0e 94 12 32 	call	0x6424	; 0x6424 <skipspaces>
   12ac2:	ec 01       	movw	r28, r24
    // Skip optional '='
    if(*ptr == '=')
   12ac4:	88 81       	ld	r24, Y
   12ac6:	8d 33       	cpi	r24, 0x3D	; 61
   12ac8:	29 f4       	brne	.+10     	; 0x12ad4 <assign_value+0x2c>
    {
        ++ptr;
        // skip spaces after assignment
        ptr = skipspaces(ptr);
   12aca:	ce 01       	movw	r24, r28
   12acc:	01 96       	adiw	r24, 0x01	; 1
   12ace:	0e 94 12 32 	call	0x6424	; 0x6424 <skipspaces>
   12ad2:	ec 01       	movw	r28, r24
    }
    if(!*ptr)
   12ad4:	88 81       	ld	r24, Y
   12ad6:	81 11       	cpse	r24, r1
   12ad8:	17 c0       	rjmp	.+46     	; 0x12b08 <assign_value+0x60>
    {
        if(debuglevel & 1)
   12ada:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12ade:	80 ff       	sbrs	r24, 0
   12ae0:	76 c0       	rjmp	.+236    	; 0x12bce <assign_value+0x126>
            printf("line:%d, missing value\n", lines);
   12ae2:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   12ae6:	8f 93       	push	r24
   12ae8:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   12aec:	8f 93       	push	r24
   12aee:	8e e9       	ldi	r24, 0x9E	; 158
   12af0:	9d e1       	ldi	r25, 0x1D	; 29
   12af2:	1f 92       	push	r1
   12af4:	9f 93       	push	r25
   12af6:	8f 93       	push	r24
   12af8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   12afc:	0f 90       	pop	r0
   12afe:	0f 90       	pop	r0
   12b00:	0f 90       	pop	r0
   12b02:	0f 90       	pop	r0
   12b04:	0f 90       	pop	r0
   12b06:	63 c0       	rjmp	.+198    	; 0x12bce <assign_value+0x126>
        bad = 1;
    }
    if(!bad)
    {
        // FIXME detect bad numbers
        tmp = get_value(ptr);
   12b08:	ce 01       	movw	r24, r28
   12b0a:	0e 94 c7 33 	call	0x678e	; 0x678e <get_value>
   12b0e:	6b 01       	movw	r12, r22
   12b10:	7c 01       	movw	r14, r24
        *val = tmp;
   12b12:	f8 01       	movw	r30, r16
   12b14:	60 83       	st	Z, r22
   12b16:	71 83       	std	Z+1, r23	; 0x01
   12b18:	82 83       	std	Z+2, r24	; 0x02
   12b1a:	93 83       	std	Z+3, r25	; 0x03
        if((minval && (tmp < minval)))
   12b1c:	41 14       	cp	r4, r1
   12b1e:	51 04       	cpc	r5, r1
   12b20:	61 04       	cpc	r6, r1
   12b22:	71 04       	cpc	r7, r1
   12b24:	39 f1       	breq	.+78     	; 0x12b74 <assign_value+0xcc>
   12b26:	c4 14       	cp	r12, r4
   12b28:	d5 04       	cpc	r13, r5
   12b2a:	e6 04       	cpc	r14, r6
   12b2c:	f7 04       	cpc	r15, r7
   12b2e:	10 f5       	brcc	.+68     	; 0x12b74 <assign_value+0xcc>
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
   12b30:	5f 92       	push	r5
   12b32:	4f 92       	push	r4
   12b34:	df 93       	push	r29
   12b36:	cf 93       	push	r28
   12b38:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   12b3c:	8f 93       	push	r24
   12b3e:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   12b42:	8f 93       	push	r24
   12b44:	8f e7       	ldi	r24, 0x7F	; 127
   12b46:	9d e1       	ldi	r25, 0x1D	; 29
   12b48:	1f 92       	push	r1
   12b4a:	9f 93       	push	r25
   12b4c:	8f 93       	push	r24
   12b4e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            bad = 1;
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   12b52:	ed b7       	in	r30, 0x3d	; 61
   12b54:	fe b7       	in	r31, 0x3e	; 62
   12b56:	39 96       	adiw	r30, 0x09	; 9
   12b58:	0f b6       	in	r0, 0x3f	; 63
   12b5a:	f8 94       	cli
   12b5c:	fe bf       	out	0x3e, r31	; 62
   12b5e:	0f be       	out	0x3f, r0	; 63
   12b60:	ed bf       	out	0x3d, r30	; 61
   12b62:	ff ef       	ldi	r31, 0xFF	; 255
   12b64:	8f 16       	cp	r8, r31
   12b66:	9f 06       	cpc	r9, r31
   12b68:	af 06       	cpc	r10, r31
   12b6a:	bf 06       	cpc	r11, r31
   12b6c:	81 f1       	breq	.+96     	; 0x12bce <assign_value+0x126>
        tmp = get_value(ptr);
        *val = tmp;
        if((minval && (tmp < minval)))
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
            bad = 1;
   12b6e:	81 e0       	ldi	r24, 0x01	; 1
   12b70:	90 e0       	ldi	r25, 0x00	; 0
   12b72:	08 c0       	rjmp	.+16     	; 0x12b84 <assign_value+0xdc>
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   12b74:	ff ef       	ldi	r31, 0xFF	; 255
   12b76:	8f 16       	cp	r8, r31
   12b78:	9f 06       	cpc	r9, r31
   12b7a:	af 06       	cpc	r10, r31
   12b7c:	bf 06       	cpc	r11, r31
   12b7e:	21 f1       	breq	.+72     	; 0x12bc8 <assign_value+0x120>
   12b80:	80 e0       	ldi	r24, 0x00	; 0
   12b82:	90 e0       	ldi	r25, 0x00	; 0
   12b84:	8c 14       	cp	r8, r12
   12b86:	9d 04       	cpc	r9, r13
   12b88:	ae 04       	cpc	r10, r14
   12b8a:	bf 04       	cpc	r11, r15
   12b8c:	d0 f4       	brcc	.+52     	; 0x12bc2 <assign_value+0x11a>
        {
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
   12b8e:	9f 92       	push	r9
   12b90:	8f 92       	push	r8
   12b92:	df 93       	push	r29
   12b94:	cf 93       	push	r28
   12b96:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   12b9a:	8f 93       	push	r24
   12b9c:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   12ba0:	8f 93       	push	r24
   12ba2:	80 e6       	ldi	r24, 0x60	; 96
   12ba4:	9d e1       	ldi	r25, 0x1D	; 29
   12ba6:	1f 92       	push	r1
   12ba8:	9f 93       	push	r25
   12baa:	8f 93       	push	r24
   12bac:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   12bb0:	ed b7       	in	r30, 0x3d	; 61
   12bb2:	fe b7       	in	r31, 0x3e	; 62
   12bb4:	39 96       	adiw	r30, 0x09	; 9
   12bb6:	0f b6       	in	r0, 0x3f	; 63
   12bb8:	f8 94       	cli
   12bba:	fe bf       	out	0x3e, r31	; 62
   12bbc:	0f be       	out	0x3f, r0	; 63
   12bbe:	ed bf       	out	0x3d, r30	; 61
   12bc0:	06 c0       	rjmp	.+12     	; 0x12bce <assign_value+0x126>
            bad = 1;
        }
    }
    if(bad)
        return(0);
   12bc2:	f1 e0       	ldi	r31, 0x01	; 1
   12bc4:	8f 27       	eor	r24, r31
   12bc6:	05 c0       	rjmp	.+10     	; 0x12bd2 <assign_value+0x12a>
    return(1);
   12bc8:	81 e0       	ldi	r24, 0x01	; 1
   12bca:	90 e0       	ldi	r25, 0x00	; 0
   12bcc:	02 c0       	rjmp	.+4      	; 0x12bd2 <assign_value+0x12a>
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
            bad = 1;
        }
    }
    if(bad)
        return(0);
   12bce:	80 e0       	ldi	r24, 0x00	; 0
   12bd0:	90 e0       	ldi	r25, 0x00	; 0
    return(1);
}
   12bd2:	cd b7       	in	r28, 0x3d	; 61
   12bd4:	de b7       	in	r29, 0x3e	; 62
   12bd6:	e0 e1       	ldi	r30, 0x10	; 16
   12bd8:	0c 94 53 e5 	jmp	0x1caa6	; 0x1caa6 <__epilogue_restores__+0x4>

00012bdc <set_Config_Defaults>:
/// ===============================================
///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   12bdc:	08 95       	ret

00012bde <hpdir_set_device>:
{
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
#endif
	if(Devices[index].TYPE == SS80_TYPE)
   12bde:	2b e2       	ldi	r18, 0x2B	; 43
   12be0:	28 9f       	mul	r18, r24
   12be2:	f0 01       	movw	r30, r0
   12be4:	29 9f       	mul	r18, r25
   12be6:	f0 0d       	add	r31, r0
   12be8:	11 24       	eor	r1, r1
   12bea:	e4 51       	subi	r30, 0x14	; 20
   12bec:	f2 4e       	sbci	r31, 0xE2	; 226
   12bee:	20 81       	ld	r18, Z
   12bf0:	23 30       	cpi	r18, 0x03	; 3
   12bf2:	e1 f5       	brne	.+120    	; 0x12c6c <hpdir_set_device+0x8e>
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
   12bf4:	07 a0       	ldd	r0, Z+39	; 0x27
   12bf6:	f0 a5       	ldd	r31, Z+40	; 0x28
   12bf8:	e0 2d       	mov	r30, r0
		return;
	}

	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p->CONFIG.ID 				= hpdir.ID;
   12bfa:	20 91 70 20 	lds	r18, 0x2070	; 0x802070 <hpdir+0x80>
   12bfe:	30 91 71 20 	lds	r19, 0x2071	; 0x802071 <hpdir+0x81>
   12c02:	34 a3       	std	Z+36, r19	; 0x24
   12c04:	23 a3       	std	Z+35, r18	; 0x23
		SS80p->UNIT.DEVICE_NUMBER 		= hpdir.DEVICE_NUMBER;
   12c06:	40 91 7c 20 	lds	r20, 0x207C	; 0x80207c <hpdir+0x8c>
   12c0a:	50 91 7d 20 	lds	r21, 0x207D	; 0x80207d <hpdir+0x8d>
   12c0e:	60 91 7e 20 	lds	r22, 0x207E	; 0x80207e <hpdir+0x8e>
   12c12:	70 91 7f 20 	lds	r23, 0x207F	; 0x80207f <hpdir+0x8f>
   12c16:	43 a7       	std	Z+43, r20	; 0x2b
   12c18:	54 a7       	std	Z+44, r21	; 0x2c
   12c1a:	65 a7       	std	Z+45, r22	; 0x2d
   12c1c:	76 a7       	std	Z+46, r23	; 0x2e
		SS80p->UNIT.BYTES_PER_BLOCK 	= hpdir.BYTES_PER_SECTOR;
   12c1e:	20 91 90 20 	lds	r18, 0x2090	; 0x802090 <hpdir+0xa0>
   12c22:	30 91 91 20 	lds	r19, 0x2091	; 0x802091 <hpdir+0xa1>
   12c26:	30 ab       	std	Z+48, r19	; 0x30
   12c28:	27 a7       	std	Z+47, r18	; 0x2f

		// CHS NOT used in this emulator!
		SS80p->VOLUME.MAX_CYLINDER 		= 0;	// hpdir.CYLINDERS-1;
   12c2a:	df 01       	movw	r26, r30
   12c2c:	de 96       	adiw	r26, 0x3e	; 62
   12c2e:	1d 92       	st	X+, r1
   12c30:	1d 92       	st	X+, r1
   12c32:	1d 92       	st	X+, r1
   12c34:	1c 92       	st	X, r1
   12c36:	13 97       	sbiw	r26, 0x03	; 3
		SS80p->VOLUME.MAX_HEAD 			= 0;	// hpdir.HEADS-1;
   12c38:	14 96       	adiw	r26, 0x04	; 4
   12c3a:	1c 92       	st	X, r1
		SS80p->VOLUME.MAX_SECTOR 		= 0;	// hpdir.SECTORS-1;
   12c3c:	11 96       	adiw	r26, 0x01	; 1
   12c3e:	1d 92       	st	X+, r1
   12c40:	1c 92       	st	X, r1

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
   12c42:	eb 5b       	subi	r30, 0xBB	; 187
   12c44:	ff 4f       	sbci	r31, 0xFF	; 255
   12c46:	40 91 9c 20 	lds	r20, 0x209C	; 0x80209c <hpdir+0xac>
   12c4a:	50 91 9d 20 	lds	r21, 0x209D	; 0x80209d <hpdir+0xad>
   12c4e:	60 91 9e 20 	lds	r22, 0x209E	; 0x80209e <hpdir+0xae>
   12c52:	70 91 9f 20 	lds	r23, 0x209F	; 0x80209f <hpdir+0xaf>
   12c56:	41 50       	subi	r20, 0x01	; 1
   12c58:	51 09       	sbc	r21, r1
   12c5a:	61 09       	sbc	r22, r1
   12c5c:	71 09       	sbc	r23, r1
   12c5e:	40 83       	st	Z, r20
   12c60:	51 83       	std	Z+1, r21	; 0x01
   12c62:	62 83       	std	Z+2, r22	; 0x02
   12c64:	73 83       	std	Z+3, r23	; 0x03
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
   12c66:	e0 e0       	ldi	r30, 0x00	; 0
   12c68:	f0 e0       	ldi	r31, 0x00	; 0
   12c6a:	11 c0       	rjmp	.+34     	; 0x12c8e <hpdir_set_device+0xb0>
	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
	}
#ifdef AMIGO
	else if(Devices[index].TYPE == AMIGO_TYPE)
   12c6c:	21 30       	cpi	r18, 0x01	; 1
   12c6e:	21 f4       	brne	.+8      	; 0x12c78 <hpdir_set_device+0x9a>
	{
		AMIGOp = (AMIGODiskType *) Devices[index].dev;
   12c70:	07 a0       	ldd	r0, Z+39	; 0x27
   12c72:	f0 a5       	ldd	r31, Z+40	; 0x28
   12c74:	e0 2d       	mov	r30, r0
   12c76:	0b c0       	rjmp	.+22     	; 0x12c8e <hpdir_set_device+0xb0>
	}
#endif
	else
	{
		printf("hpdir_parameters invalid TYPE\n");
   12c78:	81 e4       	ldi	r24, 0x41	; 65
   12c7a:	9d e1       	ldi	r25, 0x1D	; 29
   12c7c:	1f 92       	push	r1
   12c7e:	9f 93       	push	r25
   12c80:	8f 93       	push	r24
   12c82:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
		return;
   12c86:	0f 90       	pop	r0
   12c88:	0f 90       	pop	r0
   12c8a:	0f 90       	pop	r0
   12c8c:	08 95       	ret

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE)
   12c8e:	2b e2       	ldi	r18, 0x2B	; 43
   12c90:	28 9f       	mul	r18, r24
   12c92:	d0 01       	movw	r26, r0
   12c94:	29 9f       	mul	r18, r25
   12c96:	b0 0d       	add	r27, r0
   12c98:	11 24       	eor	r1, r1
   12c9a:	a4 51       	subi	r26, 0x14	; 20
   12c9c:	b2 4e       	sbci	r27, 0xE2	; 226
   12c9e:	2c 91       	ld	r18, X
   12ca0:	21 30       	cpi	r18, 0x01	; 1
   12ca2:	f1 f4       	brne	.+60     	; 0x12ce0 <hpdir_set_device+0x102>
	{
		AMIGOp->CONFIG.ID = hpdir.ID;
   12ca4:	20 91 70 20 	lds	r18, 0x2070	; 0x802070 <hpdir+0x80>
   12ca8:	30 91 71 20 	lds	r19, 0x2071	; 0x802071 <hpdir+0x81>
   12cac:	34 a3       	std	Z+36, r19	; 0x24
   12cae:	23 a3       	std	Z+35, r18	; 0x23
		AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   12cb0:	20 91 90 20 	lds	r18, 0x2090	; 0x802090 <hpdir+0xa0>
   12cb4:	30 91 91 20 	lds	r19, 0x2091	; 0x802091 <hpdir+0xa1>
   12cb8:	36 a3       	std	Z+38, r19	; 0x26
   12cba:	25 a3       	std	Z+37, r18	; 0x25
		AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   12cbc:	20 91 8c 20 	lds	r18, 0x208C	; 0x80208c <hpdir+0x9c>
   12cc0:	30 91 8d 20 	lds	r19, 0x208D	; 0x80208d <hpdir+0x9d>
   12cc4:	30 a7       	std	Z+40, r19	; 0x28
   12cc6:	27 a3       	std	Z+39, r18	; 0x27
		AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   12cc8:	20 91 88 20 	lds	r18, 0x2088	; 0x802088 <hpdir+0x98>
   12ccc:	30 91 89 20 	lds	r19, 0x2089	; 0x802089 <hpdir+0x99>
   12cd0:	32 a7       	std	Z+42, r19	; 0x2a
   12cd2:	21 a7       	std	Z+41, r18	; 0x29
		AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   12cd4:	20 91 84 20 	lds	r18, 0x2084	; 0x802084 <hpdir+0x94>
   12cd8:	30 91 85 20 	lds	r19, 0x2085	; 0x802085 <hpdir+0x95>
   12cdc:	34 a7       	std	Z+44, r19	; 0x2c
   12cde:	23 a7       	std	Z+43, r18	; 0x2b
	}
#endif
	Devices[index].BLOCKS = hpdir.BLOCKS;
   12ce0:	4b e2       	ldi	r20, 0x2B	; 43
   12ce2:	48 9f       	mul	r20, r24
   12ce4:	90 01       	movw	r18, r0
   12ce6:	49 9f       	mul	r20, r25
   12ce8:	30 0d       	add	r19, r0
   12cea:	11 24       	eor	r1, r1
   12cec:	f9 01       	movw	r30, r18
   12cee:	e4 51       	subi	r30, 0x14	; 20
   12cf0:	f2 4e       	sbci	r31, 0xE2	; 226
   12cf2:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <hpdir+0xac>
   12cf6:	90 91 9d 20 	lds	r25, 0x209D	; 0x80209d <hpdir+0xad>
   12cfa:	a0 91 9e 20 	lds	r26, 0x209E	; 0x80209e <hpdir+0xae>
   12cfe:	b0 91 9f 20 	lds	r27, 0x209F	; 0x80209f <hpdir+0xaf>
   12d02:	83 83       	std	Z+3, r24	; 0x03
   12d04:	94 83       	std	Z+4, r25	; 0x04
   12d06:	a5 83       	std	Z+5, r26	; 0x05
   12d08:	b6 83       	std	Z+6, r27	; 0x06
	strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   12d0a:	4e e1       	ldi	r20, 0x1E	; 30
   12d0c:	50 e0       	ldi	r21, 0x00	; 0
   12d0e:	60 ef       	ldi	r22, 0xF0	; 240
   12d10:	7f e1       	ldi	r23, 0x1F	; 31
   12d12:	c9 01       	movw	r24, r18
   12d14:	8d 50       	subi	r24, 0x0D	; 13
   12d16:	92 4e       	sbci	r25, 0xE2	; 226
   12d18:	0c 94 b3 31 	jmp	0x6366	; 0x6366 <strncpy>
   12d1c:	08 95       	ret

00012d1e <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   12d1e:	cf 93       	push	r28
   12d20:	df 93       	push	r29
   12d22:	ec 01       	movw	r28, r24
   12d24:	cb 01       	movw	r24, r22
	if ( hpdir_find_drive( model, 0 ,1) )
   12d26:	41 e0       	ldi	r20, 0x01	; 1
   12d28:	50 e0       	ldi	r21, 0x00	; 0
   12d2a:	60 e0       	ldi	r22, 0x00	; 0
   12d2c:	70 e0       	ldi	r23, 0x00	; 0
   12d2e:	0e 94 ef a5 	call	0x14bde	; 0x14bde <hpdir_find_drive>
   12d32:	89 2b       	or	r24, r25
   12d34:	11 f0       	breq	.+4      	; 0x12d3a <hpdir_set_parameters+0x1c>
		hpdir_set_device(index);
   12d36:	ce 01       	movw	r24, r28
   12d38:	52 df       	rcall	.-348    	; 0x12bde <hpdir_set_device>
}
   12d3a:	df 91       	pop	r29
   12d3c:	cf 91       	pop	r28
   12d3e:	08 95       	ret

00012d40 <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   12d40:	4f 92       	push	r4
   12d42:	5f 92       	push	r5
   12d44:	6f 92       	push	r6
   12d46:	7f 92       	push	r7
   12d48:	8f 92       	push	r8
   12d4a:	af 92       	push	r10
   12d4c:	bf 92       	push	r11
   12d4e:	cf 92       	push	r12
   12d50:	df 92       	push	r13
   12d52:	ef 92       	push	r14
   12d54:	0f 93       	push	r16
   12d56:	1f 93       	push	r17
   12d58:	cf 93       	push	r28
   12d5a:	df 93       	push	r29
   12d5c:	cc ee       	ldi	r28, 0xEC	; 236
   12d5e:	dd e1       	ldi	r29, 0x1D	; 29
   12d60:	80 ef       	ldi	r24, 0xF0	; 240
   12d62:	48 2e       	mov	r4, r24
   12d64:	8f e1       	ldi	r24, 0x1F	; 31
   12d66:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12d68:	a1 2c       	mov	r10, r1
   12d6a:	bb 24       	eor	r11, r11
   12d6c:	b3 94       	inc	r11
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12d6e:	84 ed       	ldi	r24, 0xD4	; 212
   12d70:	9c e1       	ldi	r25, 0x1C	; 28
   12d72:	6c 01       	movw	r12, r24
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12d74:	8b e0       	ldi	r24, 0x0B	; 11
   12d76:	9d e1       	ldi	r25, 0x1D	; 29
   12d78:	3c 01       	movw	r6, r24
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   12d7a:	88 81       	ld	r24, Y
   12d7c:	88 23       	and	r24, r24
   12d7e:	09 f4       	brne	.+2      	; 0x12d82 <Post_Config+0x42>
   12d80:	5f c0       	rjmp	.+190    	; 0x12e40 <Post_Config+0x100>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   12d82:	83 30       	cpi	r24, 0x03	; 3
   12d84:	21 f5       	brne	.+72     	; 0x12dce <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   12d86:	0f a1       	ldd	r16, Y+39	; 0x27
   12d88:	18 a5       	ldd	r17, Y+40	; 0x28
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   12d8a:	f8 01       	movw	r30, r16
   12d8c:	87 a5       	ldd	r24, Z+47	; 0x2f
   12d8e:	90 a9       	ldd	r25, Z+48	; 0x30
   12d90:	81 15       	cp	r24, r1
   12d92:	91 40       	sbci	r25, 0x01	; 1
   12d94:	71 f0       	breq	.+28     	; 0x12db2 <Post_Config+0x72>
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12d96:	ce 01       	movw	r24, r28
   12d98:	07 96       	adiw	r24, 0x07	; 7
   12d9a:	9f 93       	push	r25
   12d9c:	8f 93       	push	r24
   12d9e:	1f 92       	push	r1
   12da0:	7f 92       	push	r7
   12da2:	6f 92       	push	r6
   12da4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   12da8:	0f 90       	pop	r0
   12daa:	0f 90       	pop	r0
   12dac:	0f 90       	pop	r0
   12dae:	0f 90       	pop	r0
   12db0:	0f 90       	pop	r0
			}
			sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
   12db2:	f8 01       	movw	r30, r16
   12db4:	eb 5b       	subi	r30, 0xBB	; 187
   12db6:	ff 4f       	sbci	r31, 0xFF	; 255
			Devices[i].BLOCKS = sectors;
   12db8:	80 81       	ld	r24, Z
   12dba:	91 81       	ldd	r25, Z+1	; 0x01
   12dbc:	a2 81       	ldd	r26, Z+2	; 0x02
   12dbe:	b3 81       	ldd	r27, Z+3	; 0x03
   12dc0:	01 96       	adiw	r24, 0x01	; 1
   12dc2:	a1 1d       	adc	r26, r1
   12dc4:	b1 1d       	adc	r27, r1
   12dc6:	8b 83       	std	Y+3, r24	; 0x03
   12dc8:	9c 83       	std	Y+4, r25	; 0x04
   12dca:	ad 83       	std	Y+5, r26	; 0x05
   12dcc:	be 83       	std	Y+6, r27	; 0x06
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   12dce:	88 81       	ld	r24, Y
   12dd0:	81 30       	cpi	r24, 0x01	; 1
   12dd2:	b1 f5       	brne	.+108    	; 0x12e40 <Post_Config+0x100>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   12dd4:	0f a1       	ldd	r16, Y+39	; 0x27
   12dd6:	18 a5       	ldd	r17, Y+40	; 0x28
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   12dd8:	f8 01       	movw	r30, r16
   12dda:	85 a1       	ldd	r24, Z+37	; 0x25
   12ddc:	96 a1       	ldd	r25, Z+38	; 0x26
   12dde:	81 15       	cp	r24, r1
   12de0:	91 40       	sbci	r25, 0x01	; 1
   12de2:	89 f0       	breq	.+34     	; 0x12e06 <Post_Config+0xc6>
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12de4:	f8 01       	movw	r30, r16
   12de6:	b6 a2       	std	Z+38, r11	; 0x26
   12de8:	a5 a2       	std	Z+37, r10	; 0x25
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12dea:	ce 01       	movw	r24, r28
   12dec:	07 96       	adiw	r24, 0x07	; 7
   12dee:	9f 93       	push	r25
   12df0:	8f 93       	push	r24
   12df2:	1f 92       	push	r1
   12df4:	df 92       	push	r13
   12df6:	cf 92       	push	r12
   12df8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   12dfc:	0f 90       	pop	r0
   12dfe:	0f 90       	pop	r0
   12e00:	0f 90       	pop	r0
   12e02:	0f 90       	pop	r0
   12e04:	0f 90       	pop	r0
			}
			sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
				 * AMIGOp->GEOMETRY.HEADS
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
   12e06:	f8 01       	movw	r30, r16
   12e08:	27 a1       	ldd	r18, Z+39	; 0x27
   12e0a:	30 a5       	ldd	r19, Z+40	; 0x28
   12e0c:	81 a5       	ldd	r24, Z+41	; 0x29
   12e0e:	92 a5       	ldd	r25, Z+42	; 0x2a
   12e10:	28 9f       	mul	r18, r24
   12e12:	a0 01       	movw	r20, r0
   12e14:	29 9f       	mul	r18, r25
   12e16:	50 0d       	add	r21, r0
   12e18:	38 9f       	mul	r19, r24
   12e1a:	50 0d       	add	r21, r0
   12e1c:	11 24       	eor	r1, r1
   12e1e:	23 a5       	ldd	r18, Z+43	; 0x2b
   12e20:	34 a5       	ldd	r19, Z+44	; 0x2c
   12e22:	42 9f       	mul	r20, r18
   12e24:	c0 01       	movw	r24, r0
   12e26:	43 9f       	mul	r20, r19
   12e28:	90 0d       	add	r25, r0
   12e2a:	52 9f       	mul	r21, r18
   12e2c:	90 0d       	add	r25, r0
   12e2e:	11 24       	eor	r1, r1
   12e30:	09 2e       	mov	r0, r25
   12e32:	00 0c       	add	r0, r0
   12e34:	aa 0b       	sbc	r26, r26
   12e36:	bb 0b       	sbc	r27, r27
   12e38:	8b 83       	std	Y+3, r24	; 0x03
   12e3a:	9c 83       	std	Y+4, r25	; 0x04
   12e3c:	ad 83       	std	Y+5, r26	; 0x05
   12e3e:	be 83       	std	Y+6, r27	; 0x06
   12e40:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   12e42:	4c 16       	cp	r4, r28
   12e44:	5d 06       	cpc	r5, r29
   12e46:	09 f0       	breq	.+2      	; 0x12e4a <Post_Config+0x10a>
   12e48:	98 cf       	rjmp	.-208    	; 0x12d7a <Post_Config+0x3a>
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
        } 
#endif // #ifdef AMIGO
    }
}
   12e4a:	df 91       	pop	r29
   12e4c:	cf 91       	pop	r28
   12e4e:	1f 91       	pop	r17
   12e50:	0f 91       	pop	r16
   12e52:	ef 90       	pop	r14
   12e54:	df 90       	pop	r13
   12e56:	cf 90       	pop	r12
   12e58:	bf 90       	pop	r11
   12e5a:	af 90       	pop	r10
   12e5c:	8f 90       	pop	r8
   12e5e:	7f 90       	pop	r7
   12e60:	6f 90       	pop	r6
   12e62:	5f 90       	pop	r5
   12e64:	4f 90       	pop	r4
   12e66:	08 95       	ret

00012e68 <Read_Config>:
/// Set all drive parameters and debuglevel 
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   12e68:	aa e9       	ldi	r26, 0x9A	; 154
   12e6a:	b0 e0       	ldi	r27, 0x00	; 0
   12e6c:	ea e3       	ldi	r30, 0x3A	; 58
   12e6e:	f7 e9       	ldi	r31, 0x97	; 151
   12e70:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
   12e74:	18 2f       	mov	r17, r24
#endif

    char *ptr;
    char str[128];

    init_Devices();
   12e76:	09 2f       	mov	r16, r25

    lines = 0;
   12e78:	c3 dd       	rcall	.-1146   	; 0x12a00 <init_Devices>
   12e7a:	10 92 60 18 	sts	0x1860, r1	; 0x801860 <lines+0x1>
   12e7e:	10 92 5f 18 	sts	0x185F, r1	; 0x80185f <lines>

    printf("Reading: %s\n", name);
   12e82:	0f 93       	push	r16
   12e84:	1f 93       	push	r17
   12e86:	87 ec       	ldi	r24, 0xC7	; 199
   12e88:	9c e1       	ldi	r25, 0x1C	; 28
   12e8a:	1f 92       	push	r1
   12e8c:	9f 93       	push	r25
   12e8e:	8f 93       	push	r24
   12e90:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    cfg = fopen(name, "rb");
   12e94:	66 e8       	ldi	r22, 0x86	; 134
   12e96:	78 e0       	ldi	r23, 0x08	; 8
   12e98:	81 2f       	mov	r24, r17
   12e9a:	90 2f       	mov	r25, r16
   12e9c:	0e 94 95 7e 	call	0xfd2a	; 0xfd2a <fopen>
   12ea0:	c9 57       	subi	r28, 0x79	; 121
   12ea2:	df 4f       	sbci	r29, 0xFF	; 255
   12ea4:	99 83       	std	Y+1, r25	; 0x01
   12ea6:	88 83       	st	Y, r24
   12ea8:	c7 58       	subi	r28, 0x87	; 135
    if(cfg == NULL)
   12eaa:	d0 40       	sbci	r29, 0x00	; 0
   12eac:	0f 90       	pop	r0
   12eae:	0f 90       	pop	r0
   12eb0:	0f 90       	pop	r0
   12eb2:	0f 90       	pop	r0
   12eb4:	0f 90       	pop	r0
   12eb6:	89 2b       	or	r24, r25
   12eb8:	09 f4       	brne	.+2      	; 0x12ebc <Read_Config+0x54>
   12eba:	53 c0       	rjmp	.+166    	; 0x12f62 <Read_Config+0xfa>
   12ebc:	21 2c       	mov	r2, r1
   12ebe:	31 2c       	mov	r3, r1
   12ec0:	41 2c       	mov	r4, r1
   12ec2:	51 2c       	mov	r5, r1
   12ec4:	cb 57       	subi	r28, 0x7B	; 123
   12ec6:	df 4f       	sbci	r29, 0xFF	; 255
   12ec8:	19 82       	std	Y+1, r1	; 0x01
   12eca:	18 82       	st	Y, r1
   12ecc:	c5 58       	subi	r28, 0x85	; 133
   12ece:	d0 40       	sbci	r29, 0x00	; 0
   12ed0:	81 2c       	mov	r8, r1
   12ed2:	91 2c       	mov	r9, r1
   12ed4:	a1 2c       	mov	r10, r1
   12ed6:	b1 2c       	mov	r11, r1
   12ed8:	61 2c       	mov	r6, r1
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   12eda:	71 2c       	mov	r7, r1
   12edc:	8a ee       	ldi	r24, 0xEA	; 234
   12ede:	99 e1       	ldi	r25, 0x19	; 25
   12ee0:	9c 01       	movw	r18, r24
   12ee2:	40 e0       	ldi	r20, 0x00	; 0
   12ee4:	c7 57       	subi	r28, 0x77	; 119
   12ee6:	df 4f       	sbci	r29, 0xFF	; 255
   12ee8:	28 83       	st	Y, r18
   12eea:	39 83       	std	Y+1, r19	; 0x01
   12eec:	4a 83       	std	Y+2, r20	; 0x02
   12eee:	c9 58       	subi	r28, 0x89	; 137
                    ++errors;
                AMIGOp->GEOMETRY.CYLINDERS = val;
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   12ef0:	d0 40       	sbci	r29, 0x00	; 0
   12ef2:	8c e0       	ldi	r24, 0x0C	; 12
   12ef4:	9a e1       	ldi	r25, 0x1A	; 26
   12ef6:	9c 01       	movw	r18, r24
   12ef8:	40 e0       	ldi	r20, 0x00	; 0
   12efa:	c4 57       	subi	r28, 0x74	; 116
   12efc:	df 4f       	sbci	r29, 0xFF	; 255
   12efe:	28 83       	st	Y, r18
   12f00:	39 83       	std	Y+1, r19	; 0x01
   12f02:	4a 83       	std	Y+2, r20	; 0x02
   12f04:	cc 58       	subi	r28, 0x8C	; 140
            if( (ind = token(ptr,"BYTES_PER_SECTOR")) )
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
                    ++errors;
printf("BYTES PER SECTOR: %s\n", token);
   12f06:	d0 40       	sbci	r29, 0x00	; 0
   12f08:	8c e3       	ldi	r24, 0x3C	; 60
   12f0a:	9a e1       	ldi	r25, 0x1A	; 26
   12f0c:	9c 01       	movw	r18, r24
   12f0e:	40 e0       	ldi	r20, 0x00	; 0
   12f10:	c1 57       	subi	r28, 0x71	; 113
   12f12:	df 4f       	sbci	r29, 0xFF	; 255
   12f14:	28 83       	st	Y, r18
   12f16:	39 83       	std	Y+1, r19	; 0x01
   12f18:	4a 83       	std	Y+2, r20	; 0x02
   12f1a:	cf 58       	subi	r28, 0x8F	; 143
                    ++errors;
                AMIGOp->CONFIG.ID = val;
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   12f1c:	d0 40       	sbci	r29, 0x00	; 0
   12f1e:	82 e5       	ldi	r24, 0x52	; 82
   12f20:	9a e1       	ldi	r25, 0x1A	; 26
   12f22:	9c 01       	movw	r18, r24
   12f24:	40 e0       	ldi	r20, 0x00	; 0
   12f26:	ce 56       	subi	r28, 0x6E	; 110
   12f28:	df 4f       	sbci	r29, 0xFF	; 255
   12f2a:	28 83       	st	Y, r18
   12f2c:	39 83       	std	Y+1, r19	; 0x01
   12f2e:	4a 83       	std	Y+2, r20	; 0x02
   12f30:	c2 59       	subi	r28, 0x92	; 146
                strncpy(AMIGOp->HEADER.NAME, ptr, sizeof(AMIGOp->HEADER.NAME)-1);
                AMIGOp->HEADER.NAME[sizeof(AMIGOp->HEADER.NAME)-1] = 0;
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   12f32:	d0 40       	sbci	r29, 0x00	; 0
   12f34:	81 e8       	ldi	r24, 0x81	; 129
   12f36:	9a e1       	ldi	r25, 0x1A	; 26
   12f38:	9c 01       	movw	r18, r24
   12f3a:	40 e0       	ldi	r20, 0x00	; 0
   12f3c:	cb 56       	subi	r28, 0x6B	; 107
   12f3e:	df 4f       	sbci	r29, 0xFF	; 255
   12f40:	28 83       	st	Y, r18
   12f42:	39 83       	std	Y+1, r19	; 0x01
   12f44:	4a 83       	std	Y+2, r20	; 0x02
   12f46:	c5 59       	subi	r28, 0x95	; 149

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   12f48:	d0 40       	sbci	r29, 0x00	; 0
   12f4a:	81 eb       	ldi	r24, 0xB1	; 177
   12f4c:	9a e1       	ldi	r25, 0x1A	; 26
   12f4e:	9c 01       	movw	r18, r24
   12f50:	40 e0       	ldi	r20, 0x00	; 0
   12f52:	c8 56       	subi	r28, 0x68	; 104
   12f54:	df 4f       	sbci	r29, 0xFF	; 255
   12f56:	28 83       	st	Y, r18
   12f58:	39 83       	std	Y+1, r19	; 0x01
   12f5a:	4a 83       	std	Y+2, r20	; 0x02
   12f5c:	c8 59       	subi	r28, 0x98	; 152
   12f5e:	d0 40       	sbci	r29, 0x00	; 0
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
        //FIXME
        perror("Read_Config - open");
   12f60:	2f c0       	rjmp	.+94     	; 0x12fc0 <Read_Config+0x158>
   12f62:	8c ec       	ldi	r24, 0xCC	; 204
   12f64:	9d e0       	ldi	r25, 0x0D	; 13
   12f66:	0e 94 df 78 	call	0xf1be	; 0xf1be <perror>
        printf("Read_Config: open(%s) failed\n", name);
   12f6a:	0f 93       	push	r16
   12f6c:	1f 93       	push	r17
   12f6e:	89 ea       	ldi	r24, 0xA9	; 169
   12f70:	9c e1       	ldi	r25, 0x1C	; 28
   12f72:	1f 92       	push	r1
   12f74:	9f 93       	push	r25
   12f76:	8f 93       	push	r24
   12f78:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        set_Config_Defaults();
        return(errors);
   12f7c:	0f 90       	pop	r0
   12f7e:	0f 90       	pop	r0
   12f80:	0f 90       	pop	r0
   12f82:	0f 90       	pop	r0
   12f84:	0f 90       	pop	r0
   12f86:	81 e0       	ldi	r24, 0x01	; 1
   12f88:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   12f8a:	eb c7       	rjmp	.+4054   	; 0x13f62 <Read_Config+0x10fa>
   12f8c:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   12f90:	90 91 60 18 	lds	r25, 0x1860	; 0x801860 <lines+0x1>
   12f94:	01 96       	adiw	r24, 0x01	; 1
   12f96:	90 93 60 18 	sts	0x1860, r25	; 0x801860 <lines+0x1>
   12f9a:	80 93 5f 18 	sts	0x185F, r24	; 0x80185f <lines>

        ptr = str;

        trim_tail(ptr);
   12f9e:	ce 01       	movw	r24, r28
   12fa0:	01 96       	adiw	r24, 0x01	; 1
   12fa2:	0e 94 02 32 	call	0x6404	; 0x6404 <trim_tail>
        ptr = skipspaces(ptr);
   12fa6:	ce 01       	movw	r24, r28
   12fa8:	01 96       	adiw	r24, 0x01	; 1
   12faa:	0e 94 12 32 	call	0x6424	; 0x6424 <skipspaces>
        len = strlen(ptr);
   12fae:	6c 01       	movw	r12, r24
   12fb0:	fc 01       	movw	r30, r24
   12fb2:	01 90       	ld	r0, Z+
   12fb4:	00 20       	and	r0, r0
   12fb6:	e9 f7       	brne	.-6      	; 0x12fb2 <Read_Config+0x14a>
        if(!len)
   12fb8:	31 97       	sbiw	r30, 0x01	; 1
   12fba:	8e 17       	cp	r24, r30
   12fbc:	9f 07       	cpc	r25, r31
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   12fbe:	79 f4       	brne	.+30     	; 0x12fde <Read_Config+0x176>
   12fc0:	c9 57       	subi	r28, 0x79	; 121
   12fc2:	df 4f       	sbci	r29, 0xFF	; 255
   12fc4:	48 81       	ld	r20, Y
   12fc6:	59 81       	ldd	r21, Y+1	; 0x01
   12fc8:	c7 58       	subi	r28, 0x87	; 135
   12fca:	d0 40       	sbci	r29, 0x00	; 0
   12fcc:	6e e7       	ldi	r22, 0x7E	; 126
   12fce:	70 e0       	ldi	r23, 0x00	; 0
   12fd0:	ce 01       	movw	r24, r28
   12fd2:	01 96       	adiw	r24, 0x01	; 1
   12fd4:	0e 94 c6 76 	call	0xed8c	; 0xed8c <fgets>
   12fd8:	89 2b       	or	r24, r25
   12fda:	c1 f6       	brne	.-80     	; 0x12f8c <Read_Config+0x124>
        ptr = skipspaces(ptr);
        len = strlen(ptr);
        if(!len)
            continue;
        // Skip comments
        if(*ptr == '#')
   12fdc:	73 c7       	rjmp	.+3814   	; 0x13ec4 <Read_Config+0x105c>
   12fde:	dc 01       	movw	r26, r24
   12fe0:	8c 91       	ld	r24, X
   12fe2:	83 32       	cpi	r24, 0x23	; 35
            continue;

        //FIXME check for state and last state
        if(token(ptr,"END"))
   12fe4:	69 f3       	breq	.-38     	; 0x12fc0 <Read_Config+0x158>
   12fe6:	6f ed       	ldi	r22, 0xDF	; 223
   12fe8:	7d e0       	ldi	r23, 0x0D	; 13
   12fea:	c6 01       	movw	r24, r12
   12fec:	0e 94 95 33 	call	0x672a	; 0x672a <token>
        {
            state = pop_state();
   12ff0:	89 2b       	or	r24, r25
   12ff2:	19 f0       	breq	.+6      	; 0x12ffa <Read_Config+0x192>
   12ff4:	42 dd       	rcall	.-1404   	; 0x12a7a <pop_state>
            continue;
   12ff6:	3c 01       	movw	r6, r24
        }

        switch(state)
   12ff8:	e3 cf       	rjmp	.-58     	; 0x12fc0 <Read_Config+0x158>
   12ffa:	b0 e1       	ldi	r27, 0x10	; 16
   12ffc:	6b 16       	cp	r6, r27
   12ffe:	71 04       	cpc	r7, r1
   13000:	08 f0       	brcs	.+2      	; 0x13004 <Read_Config+0x19c>
   13002:	40 c7       	rjmp	.+3712   	; 0x13e84 <Read_Config+0x101c>
   13004:	f3 01       	movw	r30, r6
   13006:	e0 53       	subi	r30, 0x30	; 48
   13008:	ff 4f       	sbci	r31, 0xFF	; 255
   1300a:	0c 94 f1 e4 	jmp	0x1c9e2	; 0x1c9e2 <__tablejump2__>
        {
        case START_STATE:

            if( (ind = token(ptr,"SS80_DEFAULT") ))
   1300e:	63 ee       	ldi	r22, 0xE3	; 227
   13010:	7d e0       	ldi	r23, 0x0D	; 13
   13012:	c6 01       	movw	r24, r12
   13014:	0e 94 95 33 	call	0x672a	; 0x672a <token>
            {
                push_state(state);
   13018:	89 2b       	or	r24, r25
   1301a:	a1 f0       	breq	.+40     	; 0x13044 <Read_Config+0x1dc>
				state = SS80_STATE;
				index = alloc_device(SS80_DEFAULT_TYPE);
   1301c:	80 e0       	ldi	r24, 0x00	; 0
   1301e:	90 e0       	ldi	r25, 0x00	; 0
   13020:	13 dd       	rcall	.-1498   	; 0x12a48 <push_state>
   13022:	82 e0       	ldi	r24, 0x02	; 2
   13024:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   13026:	39 dc       	rcall	.-1934   	; 0x1289a <alloc_device>
   13028:	4c 01       	movw	r8, r24
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
   1302a:	01 96       	adiw	r24, 0x01	; 1
   1302c:	49 f2       	breq	.-110    	; 0x12fc0 <Read_Config+0x158>
   1302e:	8b e2       	ldi	r24, 0x2B	; 43
   13030:	88 9d       	mul	r24, r8
   13032:	f0 01       	movw	r30, r0
   13034:	89 9d       	mul	r24, r9
   13036:	f0 0d       	add	r31, r0
   13038:	11 24       	eor	r1, r1
   1303a:	e4 51       	subi	r30, 0x14	; 20
   1303c:	f2 4e       	sbci	r31, 0xE2	; 226
   1303e:	47 a0       	ldd	r4, Z+39	; 0x27
            }

            else if( (ind = token(ptr,"SS80")) || (ind = token(ptr, "CS80")) )
   13040:	50 a4       	ldd	r5, Z+40	; 0x28
   13042:	2c c0       	rjmp	.+88     	; 0x1309c <Read_Config+0x234>
   13044:	60 ef       	ldi	r22, 0xF0	; 240
   13046:	7d e0       	ldi	r23, 0x0D	; 13
   13048:	c6 01       	movw	r24, r12
   1304a:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   1304e:	8c 01       	movw	r16, r24
   13050:	89 2b       	or	r24, r25
   13052:	41 f4       	brne	.+16     	; 0x13064 <Read_Config+0x1fc>
   13054:	65 ef       	ldi	r22, 0xF5	; 245
   13056:	7d e0       	ldi	r23, 0x0D	; 13
   13058:	c6 01       	movw	r24, r12
   1305a:	0e 94 95 33 	call	0x672a	; 0x672a <token>
            {
                push_state(state);
   1305e:	8c 01       	movw	r16, r24
   13060:	89 2b       	or	r24, r25
   13062:	01 f1       	breq	.+64     	; 0x130a4 <Read_Config+0x23c>
				state = SS80_STATE;
				index = alloc_device(SS80_TYPE);
   13064:	80 e0       	ldi	r24, 0x00	; 0
   13066:	90 e0       	ldi	r25, 0x00	; 0
   13068:	ef dc       	rcall	.-1570   	; 0x12a48 <push_state>
   1306a:	83 e0       	ldi	r24, 0x03	; 3
   1306c:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   1306e:	15 dc       	rcall	.-2006   	; 0x1289a <alloc_device>
   13070:	4c 01       	movw	r8, r24
   13072:	01 96       	adiw	r24, 0x01	; 1
				{
					state = START_STATE;
				}
				else
				{
					SS80p = (SS80DiskType *) Devices[index].dev;
   13074:	09 f4       	brne	.+2      	; 0x13078 <Read_Config+0x210>
   13076:	a4 cf       	rjmp	.-184    	; 0x12fc0 <Read_Config+0x158>
   13078:	8b e2       	ldi	r24, 0x2B	; 43
   1307a:	88 9d       	mul	r24, r8
   1307c:	f0 01       	movw	r30, r0
   1307e:	89 9d       	mul	r24, r9
   13080:	f0 0d       	add	r31, r0
   13082:	11 24       	eor	r1, r1
   13084:	e4 51       	subi	r30, 0x14	; 20
   13086:	f2 4e       	sbci	r31, 0xE2	; 226
					ptr += ind;
					ptr = skipspaces(ptr);
   13088:	47 a0       	ldd	r4, Z+39	; 0x27
   1308a:	50 a4       	ldd	r5, Z+40	; 0x28
   1308c:	c6 01       	movw	r24, r12
   1308e:	80 0f       	add	r24, r16
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index].model
   13090:	91 1f       	adc	r25, r17
   13092:	0e 94 12 32 	call	0x6424	; 0x6424 <skipspaces>
   13096:	bc 01       	movw	r22, r24
            }

            else if( (ind = token(ptr,"SS80")) || (ind = token(ptr, "CS80")) )
            {
                push_state(state);
				state = SS80_STATE;
   13098:	c4 01       	movw	r24, r8
   1309a:	41 de       	rcall	.-894    	; 0x12d1e <hpdir_set_parameters>
   1309c:	66 24       	eor	r6, r6
   1309e:	63 94       	inc	r6
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index].model
				}
			}

#ifdef AMIGO
            else if( (ind = token(ptr,"AMIGO")) )
   130a0:	71 2c       	mov	r7, r1
   130a2:	8e cf       	rjmp	.-228    	; 0x12fc0 <Read_Config+0x158>
   130a4:	6a ef       	ldi	r22, 0xFA	; 250
   130a6:	7d e0       	ldi	r23, 0x0D	; 13
   130a8:	c6 01       	movw	r24, r12
   130aa:	0e 94 95 33 	call	0x672a	; 0x672a <token>
            {
                push_state(state);
   130ae:	8c 01       	movw	r16, r24
   130b0:	89 2b       	or	r24, r25
   130b2:	01 f1       	breq	.+64     	; 0x130f4 <Read_Config+0x28c>
                state = AMIGO_STATE;
                index = alloc_device(AMIGO_TYPE);
   130b4:	80 e0       	ldi	r24, 0x00	; 0
   130b6:	90 e0       	ldi	r25, 0x00	; 0
   130b8:	c7 dc       	rcall	.-1650   	; 0x12a48 <push_state>
   130ba:	81 e0       	ldi	r24, 0x01	; 1
   130bc:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   130be:	ed db       	rcall	.-2086   	; 0x1289a <alloc_device>
   130c0:	4c 01       	movw	r8, r24
   130c2:	01 96       	adiw	r24, 0x01	; 1
				{
                    state = START_STATE;
				}
                else
				{
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
   130c4:	09 f4       	brne	.+2      	; 0x130c8 <Read_Config+0x260>
   130c6:	7c cf       	rjmp	.-264    	; 0x12fc0 <Read_Config+0x158>
   130c8:	8b e2       	ldi	r24, 0x2B	; 43
   130ca:	88 9d       	mul	r24, r8
   130cc:	f0 01       	movw	r30, r0
   130ce:	89 9d       	mul	r24, r9
   130d0:	f0 0d       	add	r31, r0
   130d2:	11 24       	eor	r1, r1
   130d4:	e4 51       	subi	r30, 0x14	; 20
					ptr += ind;
					ptr = skipspaces(ptr);
   130d6:	f2 4e       	sbci	r31, 0xE2	; 226
   130d8:	27 a0       	ldd	r2, Z+39	; 0x27
   130da:	30 a4       	ldd	r3, Z+40	; 0x28
   130dc:	c6 01       	movw	r24, r12
   130de:	80 0f       	add	r24, r16
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index.model
   130e0:	91 1f       	adc	r25, r17
   130e2:	0e 94 12 32 	call	0x6424	; 0x6424 <skipspaces>
   130e6:	bc 01       	movw	r22, r24

#ifdef AMIGO
            else if( (ind = token(ptr,"AMIGO")) )
            {
                push_state(state);
                state = AMIGO_STATE;
   130e8:	c4 01       	movw	r24, r8
   130ea:	19 de       	rcall	.-974    	; 0x12d1e <hpdir_set_parameters>
   130ec:	aa e0       	ldi	r26, 0x0A	; 10
					ptr = skipspaces(ptr);
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index.model
				}
			}
#endif
            else if(token(ptr,"PRINTER"))
   130ee:	6a 2e       	mov	r6, r26
   130f0:	71 2c       	mov	r7, r1
   130f2:	66 cf       	rjmp	.-308    	; 0x12fc0 <Read_Config+0x158>
   130f4:	60 e0       	ldi	r22, 0x00	; 0
   130f6:	7e e0       	ldi	r23, 0x0E	; 14
   130f8:	c6 01       	movw	r24, r12
            {
                push_state(state);
   130fa:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   130fe:	89 2b       	or	r24, r25
   13100:	f1 f0       	breq	.+60     	; 0x1313e <Read_Config+0x2d6>
                state = PRINTER_STATE;
                index = alloc_device(PRINTER_TYPE);
   13102:	80 e0       	ldi	r24, 0x00	; 0
   13104:	90 e0       	ldi	r25, 0x00	; 0
   13106:	a0 dc       	rcall	.-1728   	; 0x12a48 <push_state>
   13108:	84 e0       	ldi	r24, 0x04	; 4
   1310a:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   1310c:	c6 db       	rcall	.-2164   	; 0x1289a <alloc_device>
   1310e:	4c 01       	movw	r8, r24
   13110:	01 96       	adiw	r24, 0x01	; 1
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13112:	09 f4       	brne	.+2      	; 0x13116 <Read_Config+0x2ae>
   13114:	55 cf       	rjmp	.-342    	; 0x12fc0 <Read_Config+0x158>
   13116:	8b e2       	ldi	r24, 0x2B	; 43
   13118:	88 9d       	mul	r24, r8
   1311a:	f0 01       	movw	r30, r0
   1311c:	89 9d       	mul	r24, r9
   1311e:	f0 0d       	add	r31, r0
   13120:	11 24       	eor	r1, r1
   13122:	e4 51       	subi	r30, 0x14	; 20
   13124:	f2 4e       	sbci	r31, 0xE2	; 226
   13126:	87 a1       	ldd	r24, Z+39	; 0x27
   13128:	90 a5       	ldd	r25, Z+40	; 0x28
   1312a:	cb 57       	subi	r28, 0x7B	; 123
   1312c:	df 4f       	sbci	r29, 0xFF	; 255
   1312e:	99 83       	std	Y+1, r25	; 0x01
   13130:	88 83       	st	Y, r24
			}
#endif
            else if(token(ptr,"PRINTER"))
            {
                push_state(state);
                state = PRINTER_STATE;
   13132:	c5 58       	subi	r28, 0x85	; 133
   13134:	d0 40       	sbci	r29, 0x00	; 0
   13136:	fe e0       	ldi	r31, 0x0E	; 14
   13138:	6f 2e       	mov	r6, r31
                if(index == -1)
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
            }
            else if( (ind = token(ptr,"DEBUG")) )
   1313a:	71 2c       	mov	r7, r1
   1313c:	41 cf       	rjmp	.-382    	; 0x12fc0 <Read_Config+0x158>
   1313e:	68 e0       	ldi	r22, 0x08	; 8
   13140:	7e e0       	ldi	r23, 0x0E	; 14
   13142:	c6 01       	movw	r24, r12
   13144:	0e 94 95 33 	call	0x672a	; 0x672a <token>
            {
                ptr += ind;
                if ( assign_value(ptr, 0, 65535, &val) )
   13148:	00 97       	sbiw	r24, 0x00	; 0
   1314a:	e1 f0       	breq	.+56     	; 0x13184 <Read_Config+0x31c>
   1314c:	de 01       	movw	r26, r28
   1314e:	af 57       	subi	r26, 0x7F	; 127
   13150:	bf 4f       	sbci	r27, 0xFF	; 255
   13152:	7d 01       	movw	r14, r26
   13154:	0f ef       	ldi	r16, 0xFF	; 255
   13156:	1f ef       	ldi	r17, 0xFF	; 255
   13158:	20 e0       	ldi	r18, 0x00	; 0
   1315a:	30 e0       	ldi	r19, 0x00	; 0
   1315c:	40 e0       	ldi	r20, 0x00	; 0
   1315e:	50 e0       	ldi	r21, 0x00	; 0
   13160:	ba 01       	movw	r22, r20
   13162:	8c 0d       	add	r24, r12
   13164:	9d 1d       	adc	r25, r13
   13166:	a0 dc       	rcall	.-1728   	; 0x12aa8 <assign_value>
   13168:	89 2b       	or	r24, r25
                    debuglevel = val;
   1316a:	09 f4       	brne	.+2      	; 0x1316e <Read_Config+0x306>
   1316c:	29 cf       	rjmp	.-430    	; 0x12fc0 <Read_Config+0x158>
   1316e:	cf 57       	subi	r28, 0x7F	; 127
   13170:	df 4f       	sbci	r29, 0xFF	; 255
   13172:	88 81       	ld	r24, Y
   13174:	99 81       	ldd	r25, Y+1	; 0x01
   13176:	c1 58       	subi	r28, 0x81	; 129
   13178:	d0 40       	sbci	r29, 0x00	; 0
   1317a:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   1317e:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
            }
            else if( (ind = token(ptr,"PRINTER_DEFAULT_ADDRESS")) )
   13182:	1e cf       	rjmp	.-452    	; 0x12fc0 <Read_Config+0x158>
   13184:	6e e0       	ldi	r22, 0x0E	; 14
   13186:	7e e0       	ldi	r23, 0x0E	; 14
   13188:	c6 01       	movw	r24, r12
   1318a:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   1318e:	30 91 60 18 	lds	r19, 0x1860	; 0x801860 <lines+0x1>
   13192:	20 91 5f 18 	lds	r18, 0x185F	; 0x80185f <lines>
            {
                ptr += ind;
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", ptr,lines);
   13196:	00 97       	sbiw	r24, 0x00	; 0
   13198:	61 f0       	breq	.+24     	; 0x131b2 <Read_Config+0x34a>
   1319a:	3f 93       	push	r19
   1319c:	2f 93       	push	r18
   1319e:	c8 0e       	add	r12, r24
   131a0:	d9 1e       	adc	r13, r25
   131a2:	df 92       	push	r13
   131a4:	cf 92       	push	r12
   131a6:	80 e9       	ldi	r24, 0x90	; 144
   131a8:	9c e1       	ldi	r25, 0x1C	; 28
   131aa:	1f 92       	push	r1
   131ac:	9f 93       	push	r25
            }
            else
            {
                printf("Unexpected START token: %s, at line:%d\n", ptr,lines);
   131ae:	8f 93       	push	r24
   131b0:	ca c4       	rjmp	.+2452   	; 0x13b46 <Read_Config+0xcde>
   131b2:	3f 93       	push	r19
   131b4:	2f 93       	push	r18
   131b6:	df 92       	push	r13
   131b8:	cf 92       	push	r12
                ++errors;
            }
            break;

        case PRINTER_STATE:
            if(token(ptr,"CONFIG"))
   131ba:	88 e6       	ldi	r24, 0x68	; 104
   131bc:	9c e1       	ldi	r25, 0x1C	; 28
   131be:	b0 c0       	rjmp	.+352    	; 0x13320 <Read_Config+0x4b8>
   131c0:	66 e2       	ldi	r22, 0x26	; 38
   131c2:	7e e0       	ldi	r23, 0x0E	; 14
   131c4:	c6 01       	movw	r24, r12
   131c6:	0e 94 95 33 	call	0x672a	; 0x672a <token>
            {
                push_state(state);
   131ca:	89 2b       	or	r24, r25
   131cc:	39 f0       	breq	.+14     	; 0x131dc <Read_Config+0x374>
   131ce:	8e e0       	ldi	r24, 0x0E	; 14
                state = PRINTER_CONFIG;
   131d0:	90 e0       	ldi	r25, 0x00	; 0
   131d2:	3a dc       	rcall	.-1932   	; 0x12a48 <push_state>
   131d4:	ef e0       	ldi	r30, 0x0F	; 15
   131d6:	6e 2e       	mov	r6, r30
            }
            else
            {
                printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   131d8:	71 2c       	mov	r7, r1
   131da:	f2 ce       	rjmp	.-540    	; 0x12fc0 <Read_Config+0x158>
   131dc:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   131e0:	8f 93       	push	r24
   131e2:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   131e6:	8f 93       	push	r24
   131e8:	df 92       	push	r13
   131ea:	cf 92       	push	r12
   131ec:	8e e3       	ldi	r24, 0x3E	; 62
                ++errors;
            }
            break;

        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
   131ee:	9c e1       	ldi	r25, 0x1C	; 28
   131f0:	88 c4       	rjmp	.+2320   	; 0x13b02 <Read_Config+0xc9a>
   131f2:	6e e1       	ldi	r22, 0x1E	; 30
   131f4:	7e e0       	ldi	r23, 0x0E	; 14
   131f6:	c6 01       	movw	r24, r12
   131f8:	0e 94 95 33 	call	0x672a	; 0x672a <token>
            {
                ptr += ind;
                
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14, &val) )
   131fc:	00 97       	sbiw	r24, 0x00	; 0
   131fe:	69 f1       	breq	.+90     	; 0x1325a <Read_Config+0x3f2>
   13200:	de 01       	movw	r26, r28
   13202:	af 57       	subi	r26, 0x7F	; 127
   13204:	bf 4f       	sbci	r27, 0xFF	; 255
   13206:	7d 01       	movw	r14, r26
   13208:	0e e0       	ldi	r16, 0x0E	; 14
   1320a:	10 e0       	ldi	r17, 0x00	; 0
   1320c:	20 e0       	ldi	r18, 0x00	; 0
   1320e:	30 e0       	ldi	r19, 0x00	; 0
   13210:	40 e0       	ldi	r20, 0x00	; 0
   13212:	50 e0       	ldi	r21, 0x00	; 0
   13214:	ba 01       	movw	r22, r20
   13216:	8c 0d       	add	r24, r12
   13218:	9d 1d       	adc	r25, r13
   1321a:	46 dc       	rcall	.-1908   	; 0x12aa8 <assign_value>
                    ++errors;
   1321c:	89 2b       	or	r24, r25
   1321e:	29 f4       	brne	.+10     	; 0x1322a <Read_Config+0x3c2>
   13220:	bf ef       	ldi	r27, 0xFF	; 255
        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                
                tmp = 0xff;
   13222:	ab 1a       	sub	r10, r27
   13224:	bb 0a       	sbc	r11, r27
                if (!assign_value(ptr, 0, 14, &val) )
                    ++errors;
                else
                    tmp = val;
   13226:	8f ef       	ldi	r24, 0xFF	; 255
   13228:	05 c0       	rjmp	.+10     	; 0x13234 <Read_Config+0x3cc>
   1322a:	cf 57       	subi	r28, 0x7F	; 127
   1322c:	df 4f       	sbci	r29, 0xFF	; 255
   1322e:	88 81       	ld	r24, Y
                Devices[index].ADDRESS = tmp;
   13230:	c1 58       	subi	r28, 0x81	; 129
   13232:	d0 40       	sbci	r29, 0x00	; 0
   13234:	9b e2       	ldi	r25, 0x2B	; 43
   13236:	98 9d       	mul	r25, r8
   13238:	f0 01       	movw	r30, r0
   1323a:	99 9d       	mul	r25, r9
   1323c:	f0 0d       	add	r31, r0
   1323e:	11 24       	eor	r1, r1
   13240:	e4 51       	subi	r30, 0x14	; 20
                PRINTERp->HEADER.ADDRESS  = tmp;
   13242:	f2 4e       	sbci	r31, 0xE2	; 226
   13244:	81 83       	std	Z+1, r24	; 0x01
   13246:	cb 57       	subi	r28, 0x7B	; 123
   13248:	df 4f       	sbci	r29, 0xFF	; 255
   1324a:	a8 81       	ld	r26, Y
   1324c:	b9 81       	ldd	r27, Y+1	; 0x01
   1324e:	c5 58       	subi	r28, 0x85	; 133
                // NO PPR
                Devices[index].PPR = 0xff;
   13250:	d0 40       	sbci	r29, 0x00	; 0
   13252:	8c 93       	st	X, r24
   13254:	8f ef       	ldi	r24, 0xFF	; 255
                PRINTERp->HEADER.PPR = 0xff;
            }
            else
            {
                printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   13256:	82 83       	std	Z+2, r24	; 0x02
   13258:	be c0       	rjmp	.+380    	; 0x133d6 <Read_Config+0x56e>
   1325a:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   1325e:	8f 93       	push	r24
   13260:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   13264:	8f 93       	push	r24
   13266:	df 92       	push	r13
   13268:	cf 92       	push	r12
   1326a:	8d e0       	ldi	r24, 0x0D	; 13
   1326c:	9c e1       	ldi	r25, 0x1C	; 28
   1326e:	1f 92       	push	r1
   13270:	9f 93       	push	r25
                ++errors;
   13272:	8f 93       	push	r24
   13274:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   13278:	bf ef       	ldi	r27, 0xFF	; 255
            }
            break;

        case SS80_STATE:
            if(token(ptr,"HEADER"))
   1327a:	ab 1a       	sub	r10, r27
   1327c:	bb 0a       	sbc	r11, r27
   1327e:	1c c6       	rjmp	.+3128   	; 0x13eb8 <Read_Config+0x1050>
   13280:	6d e2       	ldi	r22, 0x2D	; 45
   13282:	7e e0       	ldi	r23, 0x0E	; 14
   13284:	c6 01       	movw	r24, r12
   13286:	0e 94 95 33 	call	0x672a	; 0x672a <token>
            {
                push_state(state);
   1328a:	89 2b       	or	r24, r25
   1328c:	39 f0       	breq	.+14     	; 0x1329c <Read_Config+0x434>
                state = SS80_HEADER;
   1328e:	81 e0       	ldi	r24, 0x01	; 1
   13290:	90 e0       	ldi	r25, 0x00	; 0
   13292:	da db       	rcall	.-2124   	; 0x12a48 <push_state>
   13294:	72 e0       	ldi	r23, 0x02	; 2
            }
            else if(token(ptr,"CONFIG"))
   13296:	67 2e       	mov	r6, r23
   13298:	71 2c       	mov	r7, r1
   1329a:	92 ce       	rjmp	.-732    	; 0x12fc0 <Read_Config+0x158>
   1329c:	66 e2       	ldi	r22, 0x26	; 38
   1329e:	7e e0       	ldi	r23, 0x0E	; 14
   132a0:	c6 01       	movw	r24, r12
            {
                push_state(state);
   132a2:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   132a6:	89 2b       	or	r24, r25
                state = SS80_CONFIG;
   132a8:	39 f0       	breq	.+14     	; 0x132b8 <Read_Config+0x450>
   132aa:	81 e0       	ldi	r24, 0x01	; 1
   132ac:	90 e0       	ldi	r25, 0x00	; 0
   132ae:	cc db       	rcall	.-2152   	; 0x12a48 <push_state>
            }
            else if(token(ptr,"CONTROLLER"))
   132b0:	63 e0       	ldi	r22, 0x03	; 3
   132b2:	66 2e       	mov	r6, r22
   132b4:	71 2c       	mov	r7, r1
   132b6:	84 ce       	rjmp	.-760    	; 0x12fc0 <Read_Config+0x158>
   132b8:	64 e3       	ldi	r22, 0x34	; 52
   132ba:	7e e0       	ldi	r23, 0x0E	; 14
            {
                push_state(state);
   132bc:	c6 01       	movw	r24, r12
   132be:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   132c2:	89 2b       	or	r24, r25
                state = SS80_CONTROLLER;
   132c4:	39 f0       	breq	.+14     	; 0x132d4 <Read_Config+0x46c>
   132c6:	81 e0       	ldi	r24, 0x01	; 1
   132c8:	90 e0       	ldi	r25, 0x00	; 0
   132ca:	be db       	rcall	.-2180   	; 0x12a48 <push_state>
            }
            else if(token(ptr,"UNIT"))
   132cc:	54 e0       	ldi	r21, 0x04	; 4
   132ce:	65 2e       	mov	r6, r21
   132d0:	71 2c       	mov	r7, r1
   132d2:	76 ce       	rjmp	.-788    	; 0x12fc0 <Read_Config+0x158>
   132d4:	6f e3       	ldi	r22, 0x3F	; 63
   132d6:	7e e0       	ldi	r23, 0x0E	; 14
            {
                push_state(state);
   132d8:	c6 01       	movw	r24, r12
   132da:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   132de:	89 2b       	or	r24, r25
                state = SS80_UNIT;
   132e0:	39 f0       	breq	.+14     	; 0x132f0 <Read_Config+0x488>
   132e2:	81 e0       	ldi	r24, 0x01	; 1
   132e4:	90 e0       	ldi	r25, 0x00	; 0
   132e6:	b0 db       	rcall	.-2208   	; 0x12a48 <push_state>
            }
            else if(token(ptr,"VOLUME"))
   132e8:	45 e0       	ldi	r20, 0x05	; 5
   132ea:	64 2e       	mov	r6, r20
   132ec:	71 2c       	mov	r7, r1
   132ee:	68 ce       	rjmp	.-816    	; 0x12fc0 <Read_Config+0x158>
   132f0:	64 e4       	ldi	r22, 0x44	; 68
   132f2:	7e e0       	ldi	r23, 0x0E	; 14
   132f4:	c6 01       	movw	r24, r12
            {
                push_state(state);
   132f6:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   132fa:	89 2b       	or	r24, r25
   132fc:	39 f0       	breq	.+14     	; 0x1330c <Read_Config+0x4a4>
                state = SS80_VOLUME;
   132fe:	81 e0       	ldi	r24, 0x01	; 1
   13300:	90 e0       	ldi	r25, 0x00	; 0
   13302:	a2 db       	rcall	.-2236   	; 0x12a48 <push_state>
   13304:	36 e0       	ldi	r19, 0x06	; 6
            }
            else
            {
                printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   13306:	63 2e       	mov	r6, r19
   13308:	71 2c       	mov	r7, r1
   1330a:	5a ce       	rjmp	.-844    	; 0x12fc0 <Read_Config+0x158>
   1330c:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13310:	8f 93       	push	r24
   13312:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   13316:	8f 93       	push	r24
   13318:	df 92       	push	r13
   1331a:	cf 92       	push	r12
   1331c:	80 ee       	ldi	r24, 0xE0	; 224
   1331e:	9b e1       	ldi	r25, 0x1B	; 27
            }
            break;


        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
   13320:	1f 92       	push	r1
   13322:	9f 93       	push	r25
   13324:	8f 93       	push	r24
   13326:	a8 c5       	rjmp	.+2896   	; 0x13e78 <Read_Config+0x1010>
   13328:	6e e1       	ldi	r22, 0x1E	; 30
   1332a:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 30, &val) )
   1332c:	c6 01       	movw	r24, r12
   1332e:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13332:	00 97       	sbiw	r24, 0x00	; 0
   13334:	29 f1       	breq	.+74     	; 0x13380 <Read_Config+0x518>
   13336:	de 01       	movw	r26, r28
   13338:	af 57       	subi	r26, 0x7F	; 127
   1333a:	bf 4f       	sbci	r27, 0xFF	; 255
   1333c:	7d 01       	movw	r14, r26
   1333e:	0e e1       	ldi	r16, 0x1E	; 30
   13340:	10 e0       	ldi	r17, 0x00	; 0
   13342:	20 e0       	ldi	r18, 0x00	; 0
   13344:	30 e0       	ldi	r19, 0x00	; 0
   13346:	40 e0       	ldi	r20, 0x00	; 0
   13348:	50 e0       	ldi	r21, 0x00	; 0
   1334a:	ba 01       	movw	r22, r20
   1334c:	8c 0d       	add	r24, r12
                    ++errors;
   1334e:	9d 1d       	adc	r25, r13
   13350:	ab db       	rcall	.-2218   	; 0x12aa8 <assign_value>
   13352:	89 2b       	or	r24, r25

        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   13354:	29 f4       	brne	.+10     	; 0x13360 <Read_Config+0x4f8>
   13356:	bf ef       	ldi	r27, 0xFF	; 255
                if (!assign_value(ptr, 0, 30, &val) )
                    ++errors;
                else
                    tmp = val;
   13358:	ab 1a       	sub	r10, r27
   1335a:	bb 0a       	sbc	r11, r27
   1335c:	8f ef       	ldi	r24, 0xFF	; 255
   1335e:	05 c0       	rjmp	.+10     	; 0x1336a <Read_Config+0x502>
   13360:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].ADDRESS = tmp;
   13362:	df 4f       	sbci	r29, 0xFF	; 255
   13364:	88 81       	ld	r24, Y
   13366:	c1 58       	subi	r28, 0x81	; 129
   13368:	d0 40       	sbci	r29, 0x00	; 0
   1336a:	9b e2       	ldi	r25, 0x2B	; 43
   1336c:	98 9d       	mul	r25, r8
   1336e:	f0 01       	movw	r30, r0
   13370:	99 9d       	mul	r25, r9
   13372:	f0 0d       	add	r31, r0
                SS80p->HEADER.ADDRESS  = tmp;
   13374:	11 24       	eor	r1, r1
            }
            else if( (ind = token(ptr,"PPR")) )
   13376:	e4 51       	subi	r30, 0x14	; 20
   13378:	f2 4e       	sbci	r31, 0xE2	; 226
   1337a:	81 83       	std	Z+1, r24	; 0x01
   1337c:	f2 01       	movw	r30, r4
   1337e:	03 c3       	rjmp	.+1542   	; 0x13986 <Read_Config+0xb1e>
   13380:	6b e4       	ldi	r22, 0x4B	; 75
   13382:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7, &val) )
   13384:	c6 01       	movw	r24, r12
   13386:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   1338a:	00 97       	sbiw	r24, 0x00	; 0
   1338c:	39 f1       	breq	.+78     	; 0x133dc <Read_Config+0x574>
   1338e:	9e 01       	movw	r18, r28
   13390:	2f 57       	subi	r18, 0x7F	; 127
   13392:	3f 4f       	sbci	r19, 0xFF	; 255
   13394:	79 01       	movw	r14, r18
   13396:	07 e0       	ldi	r16, 0x07	; 7
   13398:	10 e0       	ldi	r17, 0x00	; 0
   1339a:	20 e0       	ldi	r18, 0x00	; 0
   1339c:	30 e0       	ldi	r19, 0x00	; 0
   1339e:	40 e0       	ldi	r20, 0x00	; 0
   133a0:	50 e0       	ldi	r21, 0x00	; 0
   133a2:	ba 01       	movw	r22, r20
   133a4:	8c 0d       	add	r24, r12
                    ++errors;
   133a6:	9d 1d       	adc	r25, r13
   133a8:	7f db       	rcall	.-2306   	; 0x12aa8 <assign_value>
   133aa:	89 2b       	or	r24, r25
                SS80p->HEADER.ADDRESS  = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   133ac:	29 f4       	brne	.+10     	; 0x133b8 <Read_Config+0x550>
   133ae:	3f ef       	ldi	r19, 0xFF	; 255
                if (!assign_value(ptr, 0, 7, &val) )
                    ++errors;
                else
                    tmp = val;
   133b0:	a3 1a       	sub	r10, r19
   133b2:	b3 0a       	sbc	r11, r19
   133b4:	8f ef       	ldi	r24, 0xFF	; 255
   133b6:	05 c0       	rjmp	.+10     	; 0x133c2 <Read_Config+0x55a>
   133b8:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].PPR = tmp;
   133ba:	df 4f       	sbci	r29, 0xFF	; 255
   133bc:	88 81       	ld	r24, Y
   133be:	c1 58       	subi	r28, 0x81	; 129
   133c0:	d0 40       	sbci	r29, 0x00	; 0
   133c2:	9b e2       	ldi	r25, 0x2B	; 43
   133c4:	98 9d       	mul	r25, r8
   133c6:	f0 01       	movw	r30, r0
   133c8:	99 9d       	mul	r25, r9
   133ca:	f0 0d       	add	r31, r0
                SS80p->HEADER.PPR = tmp;
   133cc:	11 24       	eor	r1, r1
   133ce:	e4 51       	subi	r30, 0x14	; 20
   133d0:	f2 4e       	sbci	r31, 0xE2	; 226
   133d2:	82 83       	std	Z+2, r24	; 0x02
            }
            else if( (ind = token(ptr,"FILE")) )
   133d4:	d2 01       	movw	r26, r4
   133d6:	11 96       	adiw	r26, 0x01	; 1
   133d8:	8c 93       	st	X, r24
   133da:	f2 cd       	rjmp	.-1052   	; 0x12fc0 <Read_Config+0x158>
   133dc:	6f e4       	ldi	r22, 0x4F	; 79
   133de:	7e e0       	ldi	r23, 0x0E	; 14
   133e0:	c6 01       	movw	r24, r12
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   133e2:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   133e6:	00 97       	sbiw	r24, 0x00	; 0
   133e8:	a1 f0       	breq	.+40     	; 0x13412 <Read_Config+0x5aa>
                if(*ptr == '=')
   133ea:	8c 0d       	add	r24, r12
   133ec:	9d 1d       	adc	r25, r13
   133ee:	0e 94 12 32 	call	0x6424	; 0x6424 <skipspaces>
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   133f2:	fc 01       	movw	r30, r24
   133f4:	20 81       	ld	r18, Z
   133f6:	2d 33       	cpi	r18, 0x3D	; 61
                }
                strncpy(SS80p->HEADER.NAME,ptr, sizeof(SS80p->HEADER.NAME)-1);
   133f8:	19 f4       	brne	.+6      	; 0x13400 <Read_Config+0x598>
   133fa:	01 96       	adiw	r24, 0x01	; 1
   133fc:	0e 94 12 32 	call	0x6424	; 0x6424 <skipspaces>
   13400:	40 e2       	ldi	r20, 0x20	; 32
   13402:	50 e0       	ldi	r21, 0x00	; 0
   13404:	bc 01       	movw	r22, r24
                SS80p->HEADER.NAME[sizeof(SS80p->HEADER.NAME)-1] = 0;
   13406:	c2 01       	movw	r24, r4
   13408:	02 96       	adiw	r24, 0x02	; 2
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   1340a:	0e 94 b3 31 	call	0x6366	; 0x6366 <strncpy>
   1340e:	d2 01       	movw	r26, r4
   13410:	12 c4       	rjmp	.+2084   	; 0x13c36 <Read_Config+0xdce>
   13412:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13416:	8f 93       	push	r24
   13418:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   1341c:	8f 93       	push	r24
                ++errors;
            }
            break;

        case SS80_CONFIG:
            if( (ind = token(ptr,"ID")) )
   1341e:	df 92       	push	r13
   13420:	cf 92       	push	r12
   13422:	82 eb       	ldi	r24, 0xB2	; 178
   13424:	9b e1       	ldi	r25, 0x1B	; 27
   13426:	23 cf       	rjmp	.-442    	; 0x1326e <Read_Config+0x406>
   13428:	64 e5       	ldi	r22, 0x54	; 84
   1342a:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   1342c:	c6 01       	movw	r24, r12
   1342e:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13432:	00 97       	sbiw	r24, 0x00	; 0
   13434:	f9 f0       	breq	.+62     	; 0x13474 <Read_Config+0x60c>
   13436:	9e 01       	movw	r18, r28
   13438:	2f 57       	subi	r18, 0x7F	; 127
   1343a:	3f 4f       	sbci	r19, 0xFF	; 255
   1343c:	79 01       	movw	r14, r18
   1343e:	0f ef       	ldi	r16, 0xFF	; 255
   13440:	1f ef       	ldi	r17, 0xFF	; 255
   13442:	20 e0       	ldi	r18, 0x00	; 0
   13444:	30 e0       	ldi	r19, 0x00	; 0
   13446:	40 e0       	ldi	r20, 0x00	; 0
   13448:	50 e0       	ldi	r21, 0x00	; 0
   1344a:	ba 01       	movw	r22, r20
   1344c:	8c 0d       	add	r24, r12
                    ++errors;
   1344e:	9d 1d       	adc	r25, r13
   13450:	2b db       	rcall	.-2474   	; 0x12aa8 <assign_value>
   13452:	89 2b       	or	r24, r25
                SS80p->CONFIG.ID = val;
   13454:	19 f4       	brne	.+6      	; 0x1345c <Read_Config+0x5f4>
   13456:	3f ef       	ldi	r19, 0xFF	; 255
   13458:	a3 1a       	sub	r10, r19
   1345a:	b3 0a       	sbc	r11, r19
   1345c:	cf 57       	subi	r28, 0x7F	; 127
   1345e:	df 4f       	sbci	r29, 0xFF	; 255
   13460:	88 81       	ld	r24, Y
   13462:	99 81       	ldd	r25, Y+1	; 0x01
   13464:	c1 58       	subi	r28, 0x81	; 129
   13466:	d0 40       	sbci	r29, 0x00	; 0
   13468:	d2 01       	movw	r26, r4
   1346a:	94 96       	adiw	r26, 0x24	; 36
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   1346c:	9c 93       	st	X, r25
   1346e:	8e 93       	st	-X, r24
   13470:	93 97       	sbiw	r26, 0x23	; 35
   13472:	a6 cd       	rjmp	.-1204   	; 0x12fc0 <Read_Config+0x158>
   13474:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13478:	8f 93       	push	r24
   1347a:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   1347e:	8f 93       	push	r24
                ++errors;
            }
            break;

        case SS80_CONTROLLER:
            if( (ind = token(ptr,"UNITS_INSTALLED")) )
   13480:	df 92       	push	r13
   13482:	cf 92       	push	r12
   13484:	84 e8       	ldi	r24, 0x84	; 132
   13486:	9b e1       	ldi	r25, 0x1B	; 27
   13488:	f2 ce       	rjmp	.-540    	; 0x1326e <Read_Config+0x406>
   1348a:	67 e5       	ldi	r22, 0x57	; 87
   1348c:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   1348e:	c6 01       	movw	r24, r12
   13490:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13494:	00 97       	sbiw	r24, 0x00	; 0
   13496:	f9 f0       	breq	.+62     	; 0x134d6 <Read_Config+0x66e>
   13498:	9e 01       	movw	r18, r28
   1349a:	2f 57       	subi	r18, 0x7F	; 127
   1349c:	3f 4f       	sbci	r19, 0xFF	; 255
   1349e:	79 01       	movw	r14, r18
   134a0:	0f ef       	ldi	r16, 0xFF	; 255
   134a2:	1f ef       	ldi	r17, 0xFF	; 255
   134a4:	20 e0       	ldi	r18, 0x00	; 0
   134a6:	30 e0       	ldi	r19, 0x00	; 0
   134a8:	40 e0       	ldi	r20, 0x00	; 0
   134aa:	50 e0       	ldi	r21, 0x00	; 0
   134ac:	ba 01       	movw	r22, r20
   134ae:	8c 0d       	add	r24, r12
                    ++errors;
   134b0:	9d 1d       	adc	r25, r13
   134b2:	fa da       	rcall	.-2572   	; 0x12aa8 <assign_value>
   134b4:	89 2b       	or	r24, r25
                SS80p->CONTROLLER.UNITS_INSTALLED = val;
   134b6:	19 f4       	brne	.+6      	; 0x134be <Read_Config+0x656>
   134b8:	3f ef       	ldi	r19, 0xFF	; 255
   134ba:	a3 1a       	sub	r10, r19
   134bc:	b3 0a       	sbc	r11, r19
   134be:	cf 57       	subi	r28, 0x7F	; 127
   134c0:	df 4f       	sbci	r29, 0xFF	; 255
   134c2:	88 81       	ld	r24, Y
   134c4:	99 81       	ldd	r25, Y+1	; 0x01
   134c6:	c1 58       	subi	r28, 0x81	; 129
   134c8:	d0 40       	sbci	r29, 0x00	; 0
   134ca:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"TRANSFER_RATE")) )
   134cc:	96 96       	adiw	r26, 0x26	; 38
   134ce:	9c 93       	st	X, r25
   134d0:	8e 93       	st	-X, r24
   134d2:	95 97       	sbiw	r26, 0x25	; 37
   134d4:	75 cd       	rjmp	.-1302   	; 0x12fc0 <Read_Config+0x158>
   134d6:	6f eb       	ldi	r22, 0xBF	; 191
   134d8:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   134da:	c6 01       	movw	r24, r12
   134dc:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   134e0:	00 97       	sbiw	r24, 0x00	; 0
   134e2:	d9 f0       	breq	.+54     	; 0x1351a <Read_Config+0x6b2>
   134e4:	fe 01       	movw	r30, r28
   134e6:	ef 57       	subi	r30, 0x7F	; 127
   134e8:	ff 4f       	sbci	r31, 0xFF	; 255
   134ea:	7f 01       	movw	r14, r30
   134ec:	0f ef       	ldi	r16, 0xFF	; 255
   134ee:	1f ef       	ldi	r17, 0xFF	; 255
   134f0:	20 e0       	ldi	r18, 0x00	; 0
   134f2:	30 e0       	ldi	r19, 0x00	; 0
   134f4:	40 e0       	ldi	r20, 0x00	; 0
   134f6:	50 e0       	ldi	r21, 0x00	; 0
   134f8:	ba 01       	movw	r22, r20
   134fa:	8c 0d       	add	r24, r12
                    ++errors;
   134fc:	9d 1d       	adc	r25, r13
   134fe:	d4 da       	rcall	.-2648   	; 0x12aa8 <assign_value>
   13500:	89 2b       	or	r24, r25
                SS80p->CONTROLLER.TRANSFER_RATE = val;
   13502:	19 f4       	brne	.+6      	; 0x1350a <Read_Config+0x6a2>
   13504:	ff ef       	ldi	r31, 0xFF	; 255
   13506:	af 1a       	sub	r10, r31
   13508:	bf 0a       	sbc	r11, r31
   1350a:	cf 57       	subi	r28, 0x7F	; 127
   1350c:	df 4f       	sbci	r29, 0xFF	; 255
   1350e:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"TYPE")) )
   13510:	99 81       	ldd	r25, Y+1	; 0x01
   13512:	c1 58       	subi	r28, 0x81	; 129
   13514:	d0 40       	sbci	r29, 0x00	; 0
   13516:	d2 01       	movw	r26, r4
   13518:	47 c4       	rjmp	.+2190   	; 0x13da8 <Read_Config+0xf40>
   1351a:	6c ea       	ldi	r22, 0xAC	; 172
   1351c:	7d e0       	ldi	r23, 0x0D	; 13
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   1351e:	c6 01       	movw	r24, r12
   13520:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13524:	00 97       	sbiw	r24, 0x00	; 0
   13526:	e1 f0       	breq	.+56     	; 0x13560 <Read_Config+0x6f8>
   13528:	fe 01       	movw	r30, r28
   1352a:	ef 57       	subi	r30, 0x7F	; 127
   1352c:	ff 4f       	sbci	r31, 0xFF	; 255
   1352e:	7f 01       	movw	r14, r30
   13530:	0f ef       	ldi	r16, 0xFF	; 255
   13532:	1f ef       	ldi	r17, 0xFF	; 255
   13534:	20 e0       	ldi	r18, 0x00	; 0
   13536:	30 e0       	ldi	r19, 0x00	; 0
   13538:	40 e0       	ldi	r20, 0x00	; 0
   1353a:	50 e0       	ldi	r21, 0x00	; 0
   1353c:	ba 01       	movw	r22, r20
   1353e:	8c 0d       	add	r24, r12
                    ++errors;
   13540:	9d 1d       	adc	r25, r13
   13542:	b2 da       	rcall	.-2716   	; 0x12aa8 <assign_value>
   13544:	89 2b       	or	r24, r25
                SS80p->CONTROLLER.TYPE = val;
   13546:	19 f4       	brne	.+6      	; 0x1354e <Read_Config+0x6e6>
   13548:	ff ef       	ldi	r31, 0xFF	; 255
   1354a:	af 1a       	sub	r10, r31
   1354c:	bf 0a       	sbc	r11, r31
   1354e:	cf 57       	subi	r28, 0x7F	; 127
   13550:	df 4f       	sbci	r29, 0xFF	; 255
   13552:	88 81       	ld	r24, Y
   13554:	c1 58       	subi	r28, 0x81	; 129
   13556:	d0 40       	sbci	r29, 0x00	; 0
            }
            else
            {
                printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   13558:	d2 01       	movw	r26, r4
   1355a:	99 96       	adiw	r26, 0x29	; 41
   1355c:	8c 93       	st	X, r24
   1355e:	30 cd       	rjmp	.-1440   	; 0x12fc0 <Read_Config+0x158>
   13560:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13564:	8f 93       	push	r24
   13566:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   1356a:	8f 93       	push	r24
            }
            break;


        case SS80_UNIT:
            if( (ind = token(ptr,"UNIT_TYPE")) )
   1356c:	df 92       	push	r13
   1356e:	cf 92       	push	r12
   13570:	82 e5       	ldi	r24, 0x52	; 82
   13572:	9b e1       	ldi	r25, 0x1B	; 27
   13574:	7c ce       	rjmp	.-776    	; 0x1326e <Read_Config+0x406>
   13576:	67 e6       	ldi	r22, 0x67	; 103
   13578:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   1357a:	c6 01       	movw	r24, r12
   1357c:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13580:	00 97       	sbiw	r24, 0x00	; 0
   13582:	e1 f0       	breq	.+56     	; 0x135bc <Read_Config+0x754>
   13584:	9e 01       	movw	r18, r28
   13586:	2f 57       	subi	r18, 0x7F	; 127
   13588:	3f 4f       	sbci	r19, 0xFF	; 255
   1358a:	79 01       	movw	r14, r18
   1358c:	0f ef       	ldi	r16, 0xFF	; 255
   1358e:	1f ef       	ldi	r17, 0xFF	; 255
   13590:	20 e0       	ldi	r18, 0x00	; 0
   13592:	30 e0       	ldi	r19, 0x00	; 0
   13594:	40 e0       	ldi	r20, 0x00	; 0
   13596:	50 e0       	ldi	r21, 0x00	; 0
   13598:	ba 01       	movw	r22, r20
   1359a:	8c 0d       	add	r24, r12
                    ++errors;
   1359c:	9d 1d       	adc	r25, r13
   1359e:	84 da       	rcall	.-2808   	; 0x12aa8 <assign_value>
                SS80p->UNIT.UNIT_TYPE = val;
   135a0:	89 2b       	or	r24, r25
   135a2:	19 f4       	brne	.+6      	; 0x135aa <Read_Config+0x742>
   135a4:	3f ef       	ldi	r19, 0xFF	; 255
   135a6:	a3 1a       	sub	r10, r19
   135a8:	b3 0a       	sbc	r11, r19
   135aa:	cf 57       	subi	r28, 0x7F	; 127
   135ac:	df 4f       	sbci	r29, 0xFF	; 255
   135ae:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"DEVICE_NUMBER")) )
   135b0:	c1 58       	subi	r28, 0x81	; 129
   135b2:	d0 40       	sbci	r29, 0x00	; 0
   135b4:	d2 01       	movw	r26, r4
   135b6:	9a 96       	adiw	r26, 0x2a	; 42
   135b8:	8c 93       	st	X, r24
   135ba:	02 cd       	rjmp	.-1532   	; 0x12fc0 <Read_Config+0x158>
   135bc:	61 e7       	ldi	r22, 0x71	; 113
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val))
   135be:	7e e0       	ldi	r23, 0x0E	; 14
   135c0:	c6 01       	movw	r24, r12
   135c2:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   135c6:	00 97       	sbiw	r24, 0x00	; 0
   135c8:	01 f1       	breq	.+64     	; 0x1360a <Read_Config+0x7a2>
   135ca:	fe 01       	movw	r30, r28
   135cc:	ef 57       	subi	r30, 0x7F	; 127
   135ce:	ff 4f       	sbci	r31, 0xFF	; 255
   135d0:	7f 01       	movw	r14, r30
   135d2:	0f ef       	ldi	r16, 0xFF	; 255
   135d4:	1f ef       	ldi	r17, 0xFF	; 255
   135d6:	98 01       	movw	r18, r16
   135d8:	40 e0       	ldi	r20, 0x00	; 0
   135da:	50 e0       	ldi	r21, 0x00	; 0
   135dc:	ba 01       	movw	r22, r20
                    ++errors;
   135de:	8c 0d       	add	r24, r12
   135e0:	9d 1d       	adc	r25, r13
   135e2:	62 da       	rcall	.-2876   	; 0x12aa8 <assign_value>
                SS80p->UNIT.DEVICE_NUMBER = val;
   135e4:	89 2b       	or	r24, r25
   135e6:	19 f4       	brne	.+6      	; 0x135ee <Read_Config+0x786>
   135e8:	ff ef       	ldi	r31, 0xFF	; 255
   135ea:	af 1a       	sub	r10, r31
   135ec:	bf 0a       	sbc	r11, r31
   135ee:	cf 57       	subi	r28, 0x7F	; 127
   135f0:	df 4f       	sbci	r29, 0xFF	; 255
   135f2:	88 81       	ld	r24, Y
   135f4:	99 81       	ldd	r25, Y+1	; 0x01
   135f6:	aa 81       	ldd	r26, Y+2	; 0x02
   135f8:	bb 81       	ldd	r27, Y+3	; 0x03
   135fa:	c1 58       	subi	r28, 0x81	; 129
   135fc:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BYTES_PER_BLOCK")) )
   135fe:	f2 01       	movw	r30, r4
   13600:	83 a7       	std	Z+43, r24	; 0x2b
   13602:	94 a7       	std	Z+44, r25	; 0x2c
   13604:	a5 a7       	std	Z+45, r26	; 0x2d
   13606:	b6 a7       	std	Z+46, r27	; 0x2e
   13608:	db cc       	rjmp	.-1610   	; 0x12fc0 <Read_Config+0x158>
   1360a:	6f e7       	ldi	r22, 0x7F	; 127
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   1360c:	7e e0       	ldi	r23, 0x0E	; 14
   1360e:	c6 01       	movw	r24, r12
   13610:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13614:	00 97       	sbiw	r24, 0x00	; 0
   13616:	f9 f0       	breq	.+62     	; 0x13656 <Read_Config+0x7ee>
   13618:	9e 01       	movw	r18, r28
   1361a:	2f 57       	subi	r18, 0x7F	; 127
   1361c:	3f 4f       	sbci	r19, 0xFF	; 255
   1361e:	79 01       	movw	r14, r18
   13620:	00 e0       	ldi	r16, 0x00	; 0
   13622:	10 e1       	ldi	r17, 0x10	; 16
   13624:	20 e0       	ldi	r18, 0x00	; 0
   13626:	30 e0       	ldi	r19, 0x00	; 0
   13628:	40 e0       	ldi	r20, 0x00	; 0
   1362a:	50 e0       	ldi	r21, 0x00	; 0
   1362c:	ba 01       	movw	r22, r20
                    ++errors;
   1362e:	8c 0d       	add	r24, r12
   13630:	9d 1d       	adc	r25, r13
   13632:	3a da       	rcall	.-2956   	; 0x12aa8 <assign_value>
                SS80p->UNIT.BYTES_PER_BLOCK = val;
   13634:	89 2b       	or	r24, r25
   13636:	19 f4       	brne	.+6      	; 0x1363e <Read_Config+0x7d6>
   13638:	3f ef       	ldi	r19, 0xFF	; 255
   1363a:	a3 1a       	sub	r10, r19
   1363c:	b3 0a       	sbc	r11, r19
   1363e:	cf 57       	subi	r28, 0x7F	; 127
   13640:	df 4f       	sbci	r29, 0xFF	; 255
   13642:	88 81       	ld	r24, Y
   13644:	99 81       	ldd	r25, Y+1	; 0x01
   13646:	c1 58       	subi	r28, 0x81	; 129
   13648:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BUFFERED_BLOCKS")) )
   1364a:	d2 01       	movw	r26, r4
   1364c:	d0 96       	adiw	r26, 0x30	; 48
   1364e:	9c 93       	st	X, r25
   13650:	8e 93       	st	-X, r24
   13652:	9f 97       	sbiw	r26, 0x2f	; 47
   13654:	b5 cc       	rjmp	.-1686   	; 0x12fc0 <Read_Config+0x158>
   13656:	6f e8       	ldi	r22, 0x8F	; 143
            {
                ptr += ind;
                if (!assign_value(ptr, 1UL, 1UL, &val) )
   13658:	7e e0       	ldi	r23, 0x0E	; 14
   1365a:	c6 01       	movw	r24, r12
   1365c:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13660:	00 97       	sbiw	r24, 0x00	; 0
   13662:	e9 f0       	breq	.+58     	; 0x1369e <Read_Config+0x836>
   13664:	fe 01       	movw	r30, r28
   13666:	ef 57       	subi	r30, 0x7F	; 127
   13668:	ff 4f       	sbci	r31, 0xFF	; 255
   1366a:	7f 01       	movw	r14, r30
   1366c:	01 e0       	ldi	r16, 0x01	; 1
   1366e:	10 e0       	ldi	r17, 0x00	; 0
   13670:	20 e0       	ldi	r18, 0x00	; 0
   13672:	30 e0       	ldi	r19, 0x00	; 0
   13674:	41 e0       	ldi	r20, 0x01	; 1
   13676:	50 e0       	ldi	r21, 0x00	; 0
   13678:	60 e0       	ldi	r22, 0x00	; 0
                    ++errors;
   1367a:	70 e0       	ldi	r23, 0x00	; 0
   1367c:	8c 0d       	add	r24, r12
                SS80p->UNIT.BUFFERED_BLOCKS = val;
   1367e:	9d 1d       	adc	r25, r13
   13680:	13 da       	rcall	.-3034   	; 0x12aa8 <assign_value>
   13682:	89 2b       	or	r24, r25
   13684:	19 f4       	brne	.+6      	; 0x1368c <Read_Config+0x824>
   13686:	ff ef       	ldi	r31, 0xFF	; 255
   13688:	af 1a       	sub	r10, r31
   1368a:	bf 0a       	sbc	r11, r31
   1368c:	cf 57       	subi	r28, 0x7F	; 127
   1368e:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"BURST_SIZE")) )
   13690:	88 81       	ld	r24, Y
   13692:	c1 58       	subi	r28, 0x81	; 129
   13694:	d0 40       	sbci	r29, 0x00	; 0
   13696:	d2 01       	movw	r26, r4
   13698:	d1 96       	adiw	r26, 0x31	; 49
   1369a:	8c 93       	st	X, r24
   1369c:	91 cc       	rjmp	.-1758   	; 0x12fc0 <Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0, &val) )
   1369e:	6f e9       	ldi	r22, 0x9F	; 159
   136a0:	7e e0       	ldi	r23, 0x0E	; 14
   136a2:	c6 01       	movw	r24, r12
   136a4:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   136a8:	00 97       	sbiw	r24, 0x00	; 0
   136aa:	d9 f0       	breq	.+54     	; 0x136e2 <Read_Config+0x87a>
   136ac:	fe 01       	movw	r30, r28
   136ae:	ef 57       	subi	r30, 0x7F	; 127
   136b0:	ff 4f       	sbci	r31, 0xFF	; 255
   136b2:	7f 01       	movw	r14, r30
   136b4:	00 e0       	ldi	r16, 0x00	; 0
   136b6:	10 e0       	ldi	r17, 0x00	; 0
   136b8:	98 01       	movw	r18, r16
   136ba:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   136bc:	50 e0       	ldi	r21, 0x00	; 0
   136be:	ba 01       	movw	r22, r20
                SS80p->UNIT.BURST_SIZE = val;
   136c0:	8c 0d       	add	r24, r12
   136c2:	9d 1d       	adc	r25, r13
   136c4:	f1 d9       	rcall	.-3102   	; 0x12aa8 <assign_value>
   136c6:	89 2b       	or	r24, r25
   136c8:	19 f4       	brne	.+6      	; 0x136d0 <Read_Config+0x868>
   136ca:	ff ef       	ldi	r31, 0xFF	; 255
   136cc:	af 1a       	sub	r10, r31
   136ce:	bf 0a       	sbc	r11, r31
   136d0:	cf 57       	subi	r28, 0x7F	; 127
            }
            else if( (ind = token(ptr,"BLOCK_TIME")) )
   136d2:	df 4f       	sbci	r29, 0xFF	; 255
   136d4:	88 81       	ld	r24, Y
   136d6:	c1 58       	subi	r28, 0x81	; 129
   136d8:	d0 40       	sbci	r29, 0x00	; 0
   136da:	d2 01       	movw	r26, r4
   136dc:	d2 96       	adiw	r26, 0x32	; 50
   136de:	8c 93       	st	X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   136e0:	6f cc       	rjmp	.-1826   	; 0x12fc0 <Read_Config+0x158>
   136e2:	6a ea       	ldi	r22, 0xAA	; 170
   136e4:	7e e0       	ldi	r23, 0x0E	; 14
   136e6:	c6 01       	movw	r24, r12
   136e8:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   136ec:	00 97       	sbiw	r24, 0x00	; 0
   136ee:	f9 f0       	breq	.+62     	; 0x1372e <Read_Config+0x8c6>
   136f0:	fe 01       	movw	r30, r28
   136f2:	ef 57       	subi	r30, 0x7F	; 127
   136f4:	ff 4f       	sbci	r31, 0xFF	; 255
   136f6:	7f 01       	movw	r14, r30
   136f8:	0f ef       	ldi	r16, 0xFF	; 255
   136fa:	1f ef       	ldi	r17, 0xFF	; 255
   136fc:	20 e0       	ldi	r18, 0x00	; 0
   136fe:	30 e0       	ldi	r19, 0x00	; 0
   13700:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   13702:	50 e0       	ldi	r21, 0x00	; 0
   13704:	ba 01       	movw	r22, r20
                SS80p->UNIT.BLOCK_TIME = val;
   13706:	8c 0d       	add	r24, r12
   13708:	9d 1d       	adc	r25, r13
   1370a:	ce d9       	rcall	.-3172   	; 0x12aa8 <assign_value>
   1370c:	89 2b       	or	r24, r25
   1370e:	19 f4       	brne	.+6      	; 0x13716 <Read_Config+0x8ae>
   13710:	ff ef       	ldi	r31, 0xFF	; 255
   13712:	af 1a       	sub	r10, r31
   13714:	bf 0a       	sbc	r11, r31
   13716:	cf 57       	subi	r28, 0x7F	; 127
   13718:	df 4f       	sbci	r29, 0xFF	; 255
   1371a:	88 81       	ld	r24, Y
   1371c:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else if( (ind = token(ptr,"CONTINOUS_TRANSFER_RATE")) )
   1371e:	c1 58       	subi	r28, 0x81	; 129
   13720:	d0 40       	sbci	r29, 0x00	; 0
   13722:	d2 01       	movw	r26, r4
   13724:	d4 96       	adiw	r26, 0x34	; 52
   13726:	9c 93       	st	X, r25
   13728:	8e 93       	st	-X, r24
   1372a:	d3 97       	sbiw	r26, 0x33	; 51
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   1372c:	49 cc       	rjmp	.-1902   	; 0x12fc0 <Read_Config+0x158>
   1372e:	65 eb       	ldi	r22, 0xB5	; 181
   13730:	7e e0       	ldi	r23, 0x0E	; 14
   13732:	c6 01       	movw	r24, r12
   13734:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13738:	00 97       	sbiw	r24, 0x00	; 0
   1373a:	f9 f0       	breq	.+62     	; 0x1377a <Read_Config+0x912>
   1373c:	fe 01       	movw	r30, r28
   1373e:	ef 57       	subi	r30, 0x7F	; 127
   13740:	ff 4f       	sbci	r31, 0xFF	; 255
   13742:	7f 01       	movw	r14, r30
   13744:	0f ef       	ldi	r16, 0xFF	; 255
   13746:	1f ef       	ldi	r17, 0xFF	; 255
   13748:	20 e0       	ldi	r18, 0x00	; 0
   1374a:	30 e0       	ldi	r19, 0x00	; 0
   1374c:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   1374e:	50 e0       	ldi	r21, 0x00	; 0
   13750:	ba 01       	movw	r22, r20
                SS80p->UNIT.CONTINOUS_TRANSFER_RATE = val;
   13752:	8c 0d       	add	r24, r12
   13754:	9d 1d       	adc	r25, r13
   13756:	a8 d9       	rcall	.-3248   	; 0x12aa8 <assign_value>
   13758:	89 2b       	or	r24, r25
   1375a:	19 f4       	brne	.+6      	; 0x13762 <Read_Config+0x8fa>
   1375c:	ff ef       	ldi	r31, 0xFF	; 255
   1375e:	af 1a       	sub	r10, r31
   13760:	bf 0a       	sbc	r11, r31
   13762:	cf 57       	subi	r28, 0x7F	; 127
   13764:	df 4f       	sbci	r29, 0xFF	; 255
   13766:	88 81       	ld	r24, Y
   13768:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else if( (ind = token(ptr,"OPTIMAL_RETRY_TIME")) )
   1376a:	c1 58       	subi	r28, 0x81	; 129
   1376c:	d0 40       	sbci	r29, 0x00	; 0
   1376e:	d2 01       	movw	r26, r4
   13770:	d6 96       	adiw	r26, 0x36	; 54
   13772:	9c 93       	st	X, r25
   13774:	8e 93       	st	-X, r24
   13776:	d5 97       	sbiw	r26, 0x35	; 53
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13778:	23 cc       	rjmp	.-1978   	; 0x12fc0 <Read_Config+0x158>
   1377a:	6d ec       	ldi	r22, 0xCD	; 205
   1377c:	7e e0       	ldi	r23, 0x0E	; 14
   1377e:	c6 01       	movw	r24, r12
   13780:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13784:	00 97       	sbiw	r24, 0x00	; 0
   13786:	f9 f0       	breq	.+62     	; 0x137c6 <Read_Config+0x95e>
   13788:	fe 01       	movw	r30, r28
   1378a:	ef 57       	subi	r30, 0x7F	; 127
   1378c:	ff 4f       	sbci	r31, 0xFF	; 255
   1378e:	7f 01       	movw	r14, r30
   13790:	0f ef       	ldi	r16, 0xFF	; 255
   13792:	1f ef       	ldi	r17, 0xFF	; 255
   13794:	20 e0       	ldi	r18, 0x00	; 0
   13796:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13798:	40 e0       	ldi	r20, 0x00	; 0
   1379a:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.OPTIMAL_RETRY_TIME = val;
   1379c:	ba 01       	movw	r22, r20
   1379e:	8c 0d       	add	r24, r12
   137a0:	9d 1d       	adc	r25, r13
   137a2:	82 d9       	rcall	.-3324   	; 0x12aa8 <assign_value>
   137a4:	89 2b       	or	r24, r25
   137a6:	19 f4       	brne	.+6      	; 0x137ae <Read_Config+0x946>
   137a8:	ff ef       	ldi	r31, 0xFF	; 255
   137aa:	af 1a       	sub	r10, r31
   137ac:	bf 0a       	sbc	r11, r31
   137ae:	cf 57       	subi	r28, 0x7F	; 127
   137b0:	df 4f       	sbci	r29, 0xFF	; 255
   137b2:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"ACCESS_TIME")) )
   137b4:	99 81       	ldd	r25, Y+1	; 0x01
   137b6:	c1 58       	subi	r28, 0x81	; 129
   137b8:	d0 40       	sbci	r29, 0x00	; 0
   137ba:	d2 01       	movw	r26, r4
   137bc:	d8 96       	adiw	r26, 0x38	; 56
   137be:	9c 93       	st	X, r25
   137c0:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   137c2:	d7 97       	sbiw	r26, 0x37	; 55
   137c4:	fd cb       	rjmp	.-2054   	; 0x12fc0 <Read_Config+0x158>
   137c6:	60 ee       	ldi	r22, 0xE0	; 224
   137c8:	7e e0       	ldi	r23, 0x0E	; 14
   137ca:	c6 01       	movw	r24, r12
   137cc:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   137d0:	00 97       	sbiw	r24, 0x00	; 0
   137d2:	f9 f0       	breq	.+62     	; 0x13812 <Read_Config+0x9aa>
   137d4:	fe 01       	movw	r30, r28
   137d6:	ef 57       	subi	r30, 0x7F	; 127
   137d8:	ff 4f       	sbci	r31, 0xFF	; 255
   137da:	7f 01       	movw	r14, r30
   137dc:	0f ef       	ldi	r16, 0xFF	; 255
   137de:	1f ef       	ldi	r17, 0xFF	; 255
   137e0:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   137e2:	30 e0       	ldi	r19, 0x00	; 0
   137e4:	40 e0       	ldi	r20, 0x00	; 0
   137e6:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.ACCESS_TIME = val;
   137e8:	ba 01       	movw	r22, r20
   137ea:	8c 0d       	add	r24, r12
   137ec:	9d 1d       	adc	r25, r13
   137ee:	5c d9       	rcall	.-3400   	; 0x12aa8 <assign_value>
   137f0:	89 2b       	or	r24, r25
   137f2:	19 f4       	brne	.+6      	; 0x137fa <Read_Config+0x992>
   137f4:	ff ef       	ldi	r31, 0xFF	; 255
   137f6:	af 1a       	sub	r10, r31
   137f8:	bf 0a       	sbc	r11, r31
   137fa:	cf 57       	subi	r28, 0x7F	; 127
   137fc:	df 4f       	sbci	r29, 0xFF	; 255
   137fe:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"MAXIMUM_INTERLEAVE")) )
   13800:	99 81       	ldd	r25, Y+1	; 0x01
   13802:	c1 58       	subi	r28, 0x81	; 129
   13804:	d0 40       	sbci	r29, 0x00	; 0
   13806:	d2 01       	movw	r26, r4
   13808:	da 96       	adiw	r26, 0x3a	; 58
   1380a:	9c 93       	st	X, r25
   1380c:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   1380e:	d9 97       	sbiw	r26, 0x39	; 57
   13810:	d7 cb       	rjmp	.-2130   	; 0x12fc0 <Read_Config+0x158>
   13812:	6c ee       	ldi	r22, 0xEC	; 236
   13814:	7e e0       	ldi	r23, 0x0E	; 14
   13816:	c6 01       	movw	r24, r12
   13818:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   1381c:	00 97       	sbiw	r24, 0x00	; 0
   1381e:	e1 f0       	breq	.+56     	; 0x13858 <Read_Config+0x9f0>
   13820:	fe 01       	movw	r30, r28
   13822:	ef 57       	subi	r30, 0x7F	; 127
   13824:	ff 4f       	sbci	r31, 0xFF	; 255
   13826:	7f 01       	movw	r14, r30
   13828:	0f ef       	ldi	r16, 0xFF	; 255
   1382a:	10 e0       	ldi	r17, 0x00	; 0
   1382c:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   1382e:	30 e0       	ldi	r19, 0x00	; 0
   13830:	40 e0       	ldi	r20, 0x00	; 0
   13832:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.MAXIMUM_INTERLEAVE = val;
   13834:	ba 01       	movw	r22, r20
   13836:	8c 0d       	add	r24, r12
   13838:	9d 1d       	adc	r25, r13
   1383a:	36 d9       	rcall	.-3476   	; 0x12aa8 <assign_value>
   1383c:	89 2b       	or	r24, r25
   1383e:	19 f4       	brne	.+6      	; 0x13846 <Read_Config+0x9de>
   13840:	ff ef       	ldi	r31, 0xFF	; 255
   13842:	af 1a       	sub	r10, r31
   13844:	bf 0a       	sbc	r11, r31
            }
            else if( (ind = token(ptr,"FIXED_VOLUMES")) )
   13846:	cf 57       	subi	r28, 0x7F	; 127
   13848:	df 4f       	sbci	r29, 0xFF	; 255
   1384a:	88 81       	ld	r24, Y
   1384c:	c1 58       	subi	r28, 0x81	; 129
   1384e:	d0 40       	sbci	r29, 0x00	; 0
   13850:	d2 01       	movw	r26, r4
   13852:	db 96       	adiw	r26, 0x3b	; 59
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13854:	8c 93       	st	X, r24
   13856:	b4 cb       	rjmp	.-2200   	; 0x12fc0 <Read_Config+0x158>
   13858:	6f ef       	ldi	r22, 0xFF	; 255
   1385a:	7e e0       	ldi	r23, 0x0E	; 14
   1385c:	c6 01       	movw	r24, r12
   1385e:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13862:	00 97       	sbiw	r24, 0x00	; 0
   13864:	e1 f0       	breq	.+56     	; 0x1389e <Read_Config+0xa36>
   13866:	fe 01       	movw	r30, r28
   13868:	ef 57       	subi	r30, 0x7F	; 127
   1386a:	ff 4f       	sbci	r31, 0xFF	; 255
   1386c:	7f 01       	movw	r14, r30
   1386e:	0f ef       	ldi	r16, 0xFF	; 255
   13870:	10 e0       	ldi	r17, 0x00	; 0
   13872:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   13874:	30 e0       	ldi	r19, 0x00	; 0
   13876:	40 e0       	ldi	r20, 0x00	; 0
   13878:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.FIXED_VOLUMES = val;
   1387a:	ba 01       	movw	r22, r20
   1387c:	8c 0d       	add	r24, r12
   1387e:	9d 1d       	adc	r25, r13
   13880:	13 d9       	rcall	.-3546   	; 0x12aa8 <assign_value>
   13882:	89 2b       	or	r24, r25
   13884:	19 f4       	brne	.+6      	; 0x1388c <Read_Config+0xa24>
   13886:	ff ef       	ldi	r31, 0xFF	; 255
   13888:	af 1a       	sub	r10, r31
   1388a:	bf 0a       	sbc	r11, r31
            }
            else if( (ind = token(ptr,"REMOVABLE_VOLUMES")) )
   1388c:	cf 57       	subi	r28, 0x7F	; 127
   1388e:	df 4f       	sbci	r29, 0xFF	; 255
   13890:	88 81       	ld	r24, Y
   13892:	c1 58       	subi	r28, 0x81	; 129
   13894:	d0 40       	sbci	r29, 0x00	; 0
   13896:	d2 01       	movw	r26, r4
   13898:	dc 96       	adiw	r26, 0x3c	; 60
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   1389a:	8c 93       	st	X, r24
   1389c:	91 cb       	rjmp	.-2270   	; 0x12fc0 <Read_Config+0x158>
   1389e:	6d e0       	ldi	r22, 0x0D	; 13
   138a0:	7f e0       	ldi	r23, 0x0F	; 15
   138a2:	c6 01       	movw	r24, r12
   138a4:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   138a8:	00 97       	sbiw	r24, 0x00	; 0
   138aa:	e1 f0       	breq	.+56     	; 0x138e4 <Read_Config+0xa7c>
   138ac:	fe 01       	movw	r30, r28
   138ae:	ef 57       	subi	r30, 0x7F	; 127
   138b0:	ff 4f       	sbci	r31, 0xFF	; 255
   138b2:	7f 01       	movw	r14, r30
   138b4:	0f ef       	ldi	r16, 0xFF	; 255
   138b6:	10 e0       	ldi	r17, 0x00	; 0
   138b8:	20 e0       	ldi	r18, 0x00	; 0
   138ba:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   138bc:	40 e0       	ldi	r20, 0x00	; 0
   138be:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.REMOVABLE_VOLUMES = val;
   138c0:	ba 01       	movw	r22, r20
   138c2:	8c 0d       	add	r24, r12
   138c4:	9d 1d       	adc	r25, r13
   138c6:	f0 d8       	rcall	.-3616   	; 0x12aa8 <assign_value>
   138c8:	89 2b       	or	r24, r25
   138ca:	19 f4       	brne	.+6      	; 0x138d2 <Read_Config+0xa6a>
   138cc:	ff ef       	ldi	r31, 0xFF	; 255
   138ce:	af 1a       	sub	r10, r31
            }
            else
            {
                printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   138d0:	bf 0a       	sbc	r11, r31
   138d2:	cf 57       	subi	r28, 0x7F	; 127
   138d4:	df 4f       	sbci	r29, 0xFF	; 255
   138d6:	88 81       	ld	r24, Y
   138d8:	c1 58       	subi	r28, 0x81	; 129
   138da:	d0 40       	sbci	r29, 0x00	; 0
   138dc:	d2 01       	movw	r26, r4
   138de:	dd 96       	adiw	r26, 0x3d	; 61
   138e0:	8c 93       	st	X, r24
   138e2:	6e cb       	rjmp	.-2340   	; 0x12fc0 <Read_Config+0x158>
   138e4:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
                ++errors;
            }
            break;

        case SS80_VOLUME:
            if( (ind = token(ptr,"MAX_CYLINDER")) )
   138e8:	8f 93       	push	r24
   138ea:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   138ee:	8f 93       	push	r24
   138f0:	df 92       	push	r13
   138f2:	cf 92       	push	r12
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   138f4:	86 e2       	ldi	r24, 0x26	; 38
   138f6:	9b e1       	ldi	r25, 0x1B	; 27
   138f8:	ba cc       	rjmp	.-1676   	; 0x1326e <Read_Config+0x406>
   138fa:	6f e1       	ldi	r22, 0x1F	; 31
   138fc:	7f e0       	ldi	r23, 0x0F	; 15
   138fe:	c6 01       	movw	r24, r12
   13900:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13904:	00 97       	sbiw	r24, 0x00	; 0
   13906:	e9 f0       	breq	.+58     	; 0x13942 <Read_Config+0xada>
   13908:	9e 01       	movw	r18, r28
   1390a:	2f 57       	subi	r18, 0x7F	; 127
   1390c:	3f 4f       	sbci	r19, 0xFF	; 255
   1390e:	79 01       	movw	r14, r18
   13910:	0f ef       	ldi	r16, 0xFF	; 255
                    ++errors;
   13912:	1f ef       	ldi	r17, 0xFF	; 255
   13914:	98 01       	movw	r18, r16
   13916:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_CYLINDER = val;
   13918:	50 e0       	ldi	r21, 0x00	; 0
   1391a:	ba 01       	movw	r22, r20
   1391c:	8c 0d       	add	r24, r12
   1391e:	9d 1d       	adc	r25, r13
   13920:	c3 d8       	rcall	.-3706   	; 0x12aa8 <assign_value>
   13922:	89 2b       	or	r24, r25
   13924:	19 f4       	brne	.+6      	; 0x1392c <Read_Config+0xac4>
   13926:	3f ef       	ldi	r19, 0xFF	; 255
   13928:	a3 1a       	sub	r10, r19
   1392a:	b3 0a       	sbc	r11, r19
   1392c:	cf 57       	subi	r28, 0x7F	; 127
            }
            else if( (ind = token(ptr,"MAX_HEAD")) )
   1392e:	df 4f       	sbci	r29, 0xFF	; 255
   13930:	88 81       	ld	r24, Y
   13932:	99 81       	ldd	r25, Y+1	; 0x01
   13934:	aa 81       	ldd	r26, Y+2	; 0x02
   13936:	bb 81       	ldd	r27, Y+3	; 0x03
   13938:	c1 58       	subi	r28, 0x81	; 129
   1393a:	d0 40       	sbci	r29, 0x00	; 0
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   1393c:	f2 01       	movw	r30, r4
   1393e:	fe 96       	adiw	r30, 0x3e	; 62
   13940:	6e c0       	rjmp	.+220    	; 0x13a1e <Read_Config+0xbb6>
   13942:	6c e2       	ldi	r22, 0x2C	; 44
   13944:	7f e0       	ldi	r23, 0x0F	; 15
   13946:	c6 01       	movw	r24, r12
   13948:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   1394c:	00 97       	sbiw	r24, 0x00	; 0
   1394e:	e9 f0       	breq	.+58     	; 0x1398a <Read_Config+0xb22>
   13950:	de 01       	movw	r26, r28
   13952:	af 57       	subi	r26, 0x7F	; 127
   13954:	bf 4f       	sbci	r27, 0xFF	; 255
   13956:	7d 01       	movw	r14, r26
   13958:	0f ef       	ldi	r16, 0xFF	; 255
   1395a:	10 e0       	ldi	r17, 0x00	; 0
                    ++errors;
   1395c:	20 e0       	ldi	r18, 0x00	; 0
   1395e:	30 e0       	ldi	r19, 0x00	; 0
   13960:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_HEAD = val;
   13962:	50 e0       	ldi	r21, 0x00	; 0
   13964:	ba 01       	movw	r22, r20
   13966:	8c 0d       	add	r24, r12
   13968:	9d 1d       	adc	r25, r13
   1396a:	9e d8       	rcall	.-3780   	; 0x12aa8 <assign_value>
   1396c:	89 2b       	or	r24, r25
   1396e:	19 f4       	brne	.+6      	; 0x13976 <Read_Config+0xb0e>
   13970:	bf ef       	ldi	r27, 0xFF	; 255
   13972:	ab 1a       	sub	r10, r27
   13974:	bb 0a       	sbc	r11, r27
            }
            else if( (ind = token(ptr,"MAX_SECTOR")) )
   13976:	cf 57       	subi	r28, 0x7F	; 127
   13978:	df 4f       	sbci	r29, 0xFF	; 255
   1397a:	88 81       	ld	r24, Y
   1397c:	c1 58       	subi	r28, 0x81	; 129
   1397e:	d0 40       	sbci	r29, 0x00	; 0
   13980:	f2 01       	movw	r30, r4
   13982:	ee 5b       	subi	r30, 0xBE	; 190
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13984:	ff 4f       	sbci	r31, 0xFF	; 255
   13986:	80 83       	st	Z, r24
   13988:	1b cb       	rjmp	.-2506   	; 0x12fc0 <Read_Config+0x158>
   1398a:	65 e3       	ldi	r22, 0x35	; 53
   1398c:	7f e0       	ldi	r23, 0x0F	; 15
   1398e:	c6 01       	movw	r24, r12
   13990:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13994:	00 97       	sbiw	r24, 0x00	; 0
   13996:	f9 f0       	breq	.+62     	; 0x139d6 <Read_Config+0xb6e>
   13998:	fe 01       	movw	r30, r28
   1399a:	ef 57       	subi	r30, 0x7F	; 127
   1399c:	ff 4f       	sbci	r31, 0xFF	; 255
   1399e:	7f 01       	movw	r14, r30
   139a0:	0f ef       	ldi	r16, 0xFF	; 255
   139a2:	1f ef       	ldi	r17, 0xFF	; 255
                    ++errors;
   139a4:	20 e0       	ldi	r18, 0x00	; 0
   139a6:	30 e0       	ldi	r19, 0x00	; 0
   139a8:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_SECTOR = val;
   139aa:	50 e0       	ldi	r21, 0x00	; 0
   139ac:	ba 01       	movw	r22, r20
   139ae:	8c 0d       	add	r24, r12
   139b0:	9d 1d       	adc	r25, r13
   139b2:	7a d8       	rcall	.-3852   	; 0x12aa8 <assign_value>
   139b4:	89 2b       	or	r24, r25
   139b6:	19 f4       	brne	.+6      	; 0x139be <Read_Config+0xb56>
   139b8:	ff ef       	ldi	r31, 0xFF	; 255
   139ba:	af 1a       	sub	r10, r31
   139bc:	bf 0a       	sbc	r11, r31
   139be:	cf 57       	subi	r28, 0x7F	; 127
   139c0:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"MAX_BLOCK_NUMBER")) )
   139c2:	88 81       	ld	r24, Y
   139c4:	99 81       	ldd	r25, Y+1	; 0x01
   139c6:	c1 58       	subi	r28, 0x81	; 129
   139c8:	d0 40       	sbci	r29, 0x00	; 0
   139ca:	f2 01       	movw	r30, r4
   139cc:	ed 5b       	subi	r30, 0xBD	; 189
   139ce:	ff 4f       	sbci	r31, 0xFF	; 255
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   139d0:	91 83       	std	Z+1, r25	; 0x01
   139d2:	80 83       	st	Z, r24
   139d4:	f5 ca       	rjmp	.-2582   	; 0x12fc0 <Read_Config+0x158>
   139d6:	60 e4       	ldi	r22, 0x40	; 64
   139d8:	7f e0       	ldi	r23, 0x0F	; 15
   139da:	c6 01       	movw	r24, r12
   139dc:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   139e0:	00 97       	sbiw	r24, 0x00	; 0
   139e2:	11 f1       	breq	.+68     	; 0x13a28 <Read_Config+0xbc0>
   139e4:	9e 01       	movw	r18, r28
   139e6:	2f 57       	subi	r18, 0x7F	; 127
   139e8:	3f 4f       	sbci	r19, 0xFF	; 255
   139ea:	79 01       	movw	r14, r18
   139ec:	0f ef       	ldi	r16, 0xFF	; 255
                    ++errors;
   139ee:	1f ef       	ldi	r17, 0xFF	; 255
   139f0:	98 01       	movw	r18, r16
   139f2:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_BLOCK_NUMBER = val;
   139f4:	50 e0       	ldi	r21, 0x00	; 0
   139f6:	ba 01       	movw	r22, r20
   139f8:	8c 0d       	add	r24, r12
   139fa:	9d 1d       	adc	r25, r13
   139fc:	55 d8       	rcall	.-3926   	; 0x12aa8 <assign_value>
   139fe:	89 2b       	or	r24, r25
   13a00:	19 f4       	brne	.+6      	; 0x13a08 <Read_Config+0xba0>
   13a02:	3f ef       	ldi	r19, 0xFF	; 255
   13a04:	a3 1a       	sub	r10, r19
   13a06:	b3 0a       	sbc	r11, r19
   13a08:	cf 57       	subi	r28, 0x7F	; 127
   13a0a:	df 4f       	sbci	r29, 0xFF	; 255
   13a0c:	88 81       	ld	r24, Y
   13a0e:	99 81       	ldd	r25, Y+1	; 0x01
   13a10:	aa 81       	ldd	r26, Y+2	; 0x02
   13a12:	bb 81       	ldd	r27, Y+3	; 0x03
            }
            else if( (ind = token(ptr,"INTERLEAVE")) )
   13a14:	c1 58       	subi	r28, 0x81	; 129
   13a16:	d0 40       	sbci	r29, 0x00	; 0
   13a18:	f2 01       	movw	r30, r4
   13a1a:	eb 5b       	subi	r30, 0xBB	; 187
   13a1c:	ff 4f       	sbci	r31, 0xFF	; 255
   13a1e:	80 83       	st	Z, r24
   13a20:	91 83       	std	Z+1, r25	; 0x01
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13a22:	a2 83       	std	Z+2, r26	; 0x02
   13a24:	b3 83       	std	Z+3, r27	; 0x03
   13a26:	cc ca       	rjmp	.-2664   	; 0x12fc0 <Read_Config+0x158>
   13a28:	64 ef       	ldi	r22, 0xF4	; 244
   13a2a:	7e e0       	ldi	r23, 0x0E	; 14
   13a2c:	c6 01       	movw	r24, r12
   13a2e:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13a32:	00 97       	sbiw	r24, 0x00	; 0
   13a34:	e1 f0       	breq	.+56     	; 0x13a6e <Read_Config+0xc06>
   13a36:	de 01       	movw	r26, r28
   13a38:	af 57       	subi	r26, 0x7F	; 127
   13a3a:	bf 4f       	sbci	r27, 0xFF	; 255
   13a3c:	7d 01       	movw	r14, r26
   13a3e:	0f ef       	ldi	r16, 0xFF	; 255
   13a40:	10 e0       	ldi	r17, 0x00	; 0
   13a42:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   13a44:	30 e0       	ldi	r19, 0x00	; 0
   13a46:	40 e0       	ldi	r20, 0x00	; 0
   13a48:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->VOLUME.INTERLEAVE = val;
   13a4a:	ba 01       	movw	r22, r20
   13a4c:	8c 0d       	add	r24, r12
   13a4e:	9d 1d       	adc	r25, r13
   13a50:	2b d8       	rcall	.-4010   	; 0x12aa8 <assign_value>
   13a52:	89 2b       	or	r24, r25
   13a54:	19 f4       	brne	.+6      	; 0x13a5c <Read_Config+0xbf4>
   13a56:	bf ef       	ldi	r27, 0xFF	; 255
   13a58:	ab 1a       	sub	r10, r27
   13a5a:	bb 0a       	sbc	r11, r27

            }
            else
            {
                printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13a5c:	cf 57       	subi	r28, 0x7F	; 127
   13a5e:	df 4f       	sbci	r29, 0xFF	; 255
   13a60:	88 81       	ld	r24, Y
   13a62:	c1 58       	subi	r28, 0x81	; 129
   13a64:	d0 40       	sbci	r29, 0x00	; 0
   13a66:	f2 01       	movw	r30, r4
   13a68:	e7 5b       	subi	r30, 0xB7	; 183
   13a6a:	ff 4f       	sbci	r31, 0xFF	; 255
   13a6c:	8c cf       	rjmp	.-232    	; 0x13986 <Read_Config+0xb1e>
   13a6e:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13a72:	8f 93       	push	r24
   13a74:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   13a78:	8f 93       	push	r24
                ++errors;
   13a7a:	df 92       	push	r13
   13a7c:	cf 92       	push	r12
   13a7e:	88 ef       	ldi	r24, 0xF8	; 248
   13a80:	9a e1       	ldi	r25, 0x1A	; 26
            }
            break;

#ifdef AMIGO
        case AMIGO_STATE:
            if(token(ptr,"HEADER"))
   13a82:	1f 92       	push	r1
   13a84:	9f 93       	push	r25
   13a86:	8f 93       	push	r24
   13a88:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   13a8c:	ef ef       	ldi	r30, 0xFF	; 255
   13a8e:	ae 1a       	sub	r10, r30
            {
                push_state(state);
   13a90:	be 0a       	sbc	r11, r30
   13a92:	12 c2       	rjmp	.+1060   	; 0x13eb8 <Read_Config+0x1050>
   13a94:	6d e2       	ldi	r22, 0x2D	; 45
   13a96:	7e e0       	ldi	r23, 0x0E	; 14
                state = AMIGO_HEADER;
   13a98:	c6 01       	movw	r24, r12
   13a9a:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13a9e:	89 2b       	or	r24, r25
            }
            else if(token(ptr,"CONFIG"))
   13aa0:	41 f0       	breq	.+16     	; 0x13ab2 <Read_Config+0xc4a>
   13aa2:	8a e0       	ldi	r24, 0x0A	; 10
   13aa4:	90 e0       	ldi	r25, 0x00	; 0
   13aa6:	0e 94 24 95 	call	0x12a48	; 0x12a48 <push_state>
   13aaa:	2b e0       	ldi	r18, 0x0B	; 11
   13aac:	62 2e       	mov	r6, r18
            {
                push_state(state);
   13aae:	71 2c       	mov	r7, r1
   13ab0:	87 ca       	rjmp	.-2802   	; 0x12fc0 <Read_Config+0x158>
   13ab2:	66 e2       	ldi	r22, 0x26	; 38
   13ab4:	7e e0       	ldi	r23, 0x0E	; 14
                state = AMIGO_CONFIG;
   13ab6:	c6 01       	movw	r24, r12
   13ab8:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13abc:	89 2b       	or	r24, r25
            }
            else if(token(ptr,"GEOMETRY"))
   13abe:	41 f0       	breq	.+16     	; 0x13ad0 <Read_Config+0xc68>
   13ac0:	8a e0       	ldi	r24, 0x0A	; 10
   13ac2:	90 e0       	ldi	r25, 0x00	; 0
   13ac4:	0e 94 24 95 	call	0x12a48	; 0x12a48 <push_state>
   13ac8:	9c e0       	ldi	r25, 0x0C	; 12
   13aca:	69 2e       	mov	r6, r25
            {
                push_state(state);
   13acc:	71 2c       	mov	r7, r1
   13ace:	78 ca       	rjmp	.-2832   	; 0x12fc0 <Read_Config+0x158>
   13ad0:	61 e5       	ldi	r22, 0x51	; 81
   13ad2:	7f e0       	ldi	r23, 0x0F	; 15
                state = AMIGO_GEOMETRY;
   13ad4:	c6 01       	movw	r24, r12
   13ad6:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13ada:	89 2b       	or	r24, r25
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13adc:	41 f0       	breq	.+16     	; 0x13aee <Read_Config+0xc86>
   13ade:	8a e0       	ldi	r24, 0x0A	; 10
   13ae0:	90 e0       	ldi	r25, 0x00	; 0
   13ae2:	0e 94 24 95 	call	0x12a48	; 0x12a48 <push_state>
   13ae6:	8d e0       	ldi	r24, 0x0D	; 13
   13ae8:	68 2e       	mov	r6, r24
   13aea:	71 2c       	mov	r7, r1
   13aec:	69 ca       	rjmp	.-2862   	; 0x12fc0 <Read_Config+0x158>
   13aee:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13af2:	8f 93       	push	r24
   13af4:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
                ++errors;
            }
            break;

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
   13af8:	8f 93       	push	r24
   13afa:	df 92       	push	r13
   13afc:	cf 92       	push	r12
   13afe:	8a ec       	ldi	r24, 0xCA	; 202
   13b00:	9a e1       	ldi	r25, 0x1A	; 26
   13b02:	1f 92       	push	r1
   13b04:	9f 93       	push	r25
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   13b06:	8f 93       	push	r24
   13b08:	e8 c0       	rjmp	.+464    	; 0x13cda <Read_Config+0xe72>
   13b0a:	6a e5       	ldi	r22, 0x5A	; 90
   13b0c:	7f e0       	ldi	r23, 0x0F	; 15
   13b0e:	c6 01       	movw	r24, r12
   13b10:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13b14:	00 97       	sbiw	r24, 0x00	; 0
   13b16:	d1 f0       	breq	.+52     	; 0x13b4c <Read_Config+0xce4>
   13b18:	20 91 60 18 	lds	r18, 0x1860	; 0x801860 <lines+0x1>
   13b1c:	2f 93       	push	r18
   13b1e:	20 91 5f 18 	lds	r18, 0x185F	; 0x80185f <lines>
   13b22:	2f 93       	push	r18
   13b24:	c8 0e       	add	r12, r24
   13b26:	d9 1e       	adc	r13, r25
   13b28:	df 92       	push	r13
   13b2a:	cf 92       	push	r12
   13b2c:	1f 92       	push	r1
   13b2e:	c7 56       	subi	r28, 0x67	; 103
   13b30:	df 4f       	sbci	r29, 0xFF	; 255
   13b32:	98 81       	ld	r25, Y
   13b34:	c9 59       	subi	r28, 0x99	; 153
   13b36:	d0 40       	sbci	r29, 0x00	; 0
   13b38:	9f 93       	push	r25
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
   13b3a:	c8 56       	subi	r28, 0x68	; 104
   13b3c:	df 4f       	sbci	r29, 0xFF	; 255
   13b3e:	a8 81       	ld	r26, Y
   13b40:	c8 59       	subi	r28, 0x98	; 152
   13b42:	d0 40       	sbci	r29, 0x00	; 0
   13b44:	af 93       	push	r26
   13b46:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14UL, &val) )
   13b4a:	b6 c1       	rjmp	.+876    	; 0x13eb8 <Read_Config+0x1050>
   13b4c:	6e e1       	ldi	r22, 0x1E	; 30
   13b4e:	7e e0       	ldi	r23, 0x0E	; 14
   13b50:	c6 01       	movw	r24, r12
   13b52:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13b56:	00 97       	sbiw	r24, 0x00	; 0
   13b58:	39 f1       	breq	.+78     	; 0x13ba8 <Read_Config+0xd40>
   13b5a:	9e 01       	movw	r18, r28
   13b5c:	2f 57       	subi	r18, 0x7F	; 127
   13b5e:	3f 4f       	sbci	r19, 0xFF	; 255
   13b60:	79 01       	movw	r14, r18
   13b62:	0e e0       	ldi	r16, 0x0E	; 14
   13b64:	10 e0       	ldi	r17, 0x00	; 0
   13b66:	20 e0       	ldi	r18, 0x00	; 0
   13b68:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13b6a:	40 e0       	ldi	r20, 0x00	; 0
   13b6c:	50 e0       	ldi	r21, 0x00	; 0
   13b6e:	ba 01       	movw	r22, r20
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   13b70:	8c 0d       	add	r24, r12
   13b72:	9d 1d       	adc	r25, r13
                if (!assign_value(ptr, 0, 14UL, &val) )
                    ++errors;
                else
                    tmp = val;
   13b74:	0e 94 54 95 	call	0x12aa8	; 0x12aa8 <assign_value>
   13b78:	89 2b       	or	r24, r25
   13b7a:	29 f4       	brne	.+10     	; 0x13b86 <Read_Config+0xd1e>
   13b7c:	3f ef       	ldi	r19, 0xFF	; 255
                Devices[index].ADDRESS = tmp;
   13b7e:	a3 1a       	sub	r10, r19
   13b80:	b3 0a       	sbc	r11, r19
   13b82:	8f ef       	ldi	r24, 0xFF	; 255
   13b84:	05 c0       	rjmp	.+10     	; 0x13b90 <Read_Config+0xd28>
   13b86:	cf 57       	subi	r28, 0x7F	; 127
   13b88:	df 4f       	sbci	r29, 0xFF	; 255
   13b8a:	88 81       	ld	r24, Y
   13b8c:	c1 58       	subi	r28, 0x81	; 129
   13b8e:	d0 40       	sbci	r29, 0x00	; 0
                AMIGOp->HEADER.ADDRESS = tmp;
   13b90:	9b e2       	ldi	r25, 0x2B	; 43
   13b92:	98 9d       	mul	r25, r8
   13b94:	f0 01       	movw	r30, r0
            }
            else if( (ind = token(ptr,"PPR")) )
   13b96:	99 9d       	mul	r25, r9
   13b98:	f0 0d       	add	r31, r0
   13b9a:	11 24       	eor	r1, r1
   13b9c:	e4 51       	subi	r30, 0x14	; 20
   13b9e:	f2 4e       	sbci	r31, 0xE2	; 226
   13ba0:	81 83       	std	Z+1, r24	; 0x01
   13ba2:	d1 01       	movw	r26, r2
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7UL, &val) )
   13ba4:	8c 93       	st	X, r24
   13ba6:	0c ca       	rjmp	.-3048   	; 0x12fc0 <Read_Config+0x158>
   13ba8:	6b e4       	ldi	r22, 0x4B	; 75
   13baa:	7e e0       	ldi	r23, 0x0E	; 14
   13bac:	c6 01       	movw	r24, r12
   13bae:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13bb2:	00 97       	sbiw	r24, 0x00	; 0
   13bb4:	31 f1       	breq	.+76     	; 0x13c02 <Read_Config+0xd9a>
   13bb6:	fe 01       	movw	r30, r28
   13bb8:	ef 57       	subi	r30, 0x7F	; 127
   13bba:	ff 4f       	sbci	r31, 0xFF	; 255
   13bbc:	7f 01       	movw	r14, r30
   13bbe:	07 e0       	ldi	r16, 0x07	; 7
   13bc0:	10 e0       	ldi	r17, 0x00	; 0
   13bc2:	20 e0       	ldi	r18, 0x00	; 0
   13bc4:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13bc6:	40 e0       	ldi	r20, 0x00	; 0
   13bc8:	50 e0       	ldi	r21, 0x00	; 0
   13bca:	ba 01       	movw	r22, r20
                AMIGOp->HEADER.ADDRESS = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   13bcc:	8c 0d       	add	r24, r12
   13bce:	9d 1d       	adc	r25, r13
                if (!assign_value(ptr, 0, 7UL, &val) )
                    ++errors;
                else
                    tmp = val;
   13bd0:	0e 94 54 95 	call	0x12aa8	; 0x12aa8 <assign_value>
   13bd4:	89 2b       	or	r24, r25
   13bd6:	29 f4       	brne	.+10     	; 0x13be2 <Read_Config+0xd7a>
   13bd8:	ff ef       	ldi	r31, 0xFF	; 255
                Devices[index].PPR = tmp;
   13bda:	af 1a       	sub	r10, r31
   13bdc:	bf 0a       	sbc	r11, r31
   13bde:	8f ef       	ldi	r24, 0xFF	; 255
   13be0:	05 c0       	rjmp	.+10     	; 0x13bec <Read_Config+0xd84>
   13be2:	cf 57       	subi	r28, 0x7F	; 127
   13be4:	df 4f       	sbci	r29, 0xFF	; 255
   13be6:	88 81       	ld	r24, Y
   13be8:	c1 58       	subi	r28, 0x81	; 129
   13bea:	d0 40       	sbci	r29, 0x00	; 0
                AMIGOp->HEADER.PPR = tmp;
   13bec:	9b e2       	ldi	r25, 0x2B	; 43
   13bee:	98 9d       	mul	r25, r8
            }
            else if( (ind = token(ptr,"FILE")) )
   13bf0:	f0 01       	movw	r30, r0
   13bf2:	99 9d       	mul	r25, r9
   13bf4:	f0 0d       	add	r31, r0
   13bf6:	11 24       	eor	r1, r1
   13bf8:	e4 51       	subi	r30, 0x14	; 20
   13bfa:	f2 4e       	sbci	r31, 0xE2	; 226
   13bfc:	82 83       	std	Z+2, r24	; 0x02
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   13bfe:	d1 01       	movw	r26, r2
   13c00:	ea cb       	rjmp	.-2092   	; 0x133d6 <Read_Config+0x56e>
   13c02:	6f e4       	ldi	r22, 0x4F	; 79
   13c04:	7e e0       	ldi	r23, 0x0E	; 14
                if(*ptr == '=')
   13c06:	c6 01       	movw	r24, r12
   13c08:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13c0c:	00 97       	sbiw	r24, 0x00	; 0
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   13c0e:	b1 f0       	breq	.+44     	; 0x13c3c <Read_Config+0xdd4>
   13c10:	8c 0d       	add	r24, r12
   13c12:	9d 1d       	adc	r25, r13
                }
                strncpy(AMIGOp->HEADER.NAME, ptr, sizeof(AMIGOp->HEADER.NAME)-1);
   13c14:	0e 94 12 32 	call	0x6424	; 0x6424 <skipspaces>
   13c18:	fc 01       	movw	r30, r24
   13c1a:	20 81       	ld	r18, Z
   13c1c:	2d 33       	cpi	r18, 0x3D	; 61
   13c1e:	19 f4       	brne	.+6      	; 0x13c26 <Read_Config+0xdbe>
   13c20:	01 96       	adiw	r24, 0x01	; 1
                AMIGOp->HEADER.NAME[sizeof(AMIGOp->HEADER.NAME)-1] = 0;
   13c22:	0e 94 12 32 	call	0x6424	; 0x6424 <skipspaces>
   13c26:	40 e2       	ldi	r20, 0x20	; 32
   13c28:	50 e0       	ldi	r21, 0x00	; 0
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13c2a:	bc 01       	movw	r22, r24
   13c2c:	c1 01       	movw	r24, r2
   13c2e:	02 96       	adiw	r24, 0x02	; 2
   13c30:	0e 94 b3 31 	call	0x6366	; 0x6366 <strncpy>
   13c34:	d1 01       	movw	r26, r2
   13c36:	92 96       	adiw	r26, 0x22	; 34
   13c38:	1c 92       	st	X, r1
   13c3a:	c2 c9       	rjmp	.-3196   	; 0x12fc0 <Read_Config+0x158>
   13c3c:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13c40:	8f 93       	push	r24
   13c42:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   13c46:	8f 93       	push	r24
   13c48:	df 92       	push	r13
   13c4a:	cf 92       	push	r12
   13c4c:	1f 92       	push	r1
   13c4e:	ca 56       	subi	r28, 0x6A	; 106
   13c50:	df 4f       	sbci	r29, 0xFF	; 255
   13c52:	b8 81       	ld	r27, Y
                ++errors;
            }
            break;

        case AMIGO_CONFIG:
            if( (ind = token(ptr,"ID")) )
   13c54:	c6 59       	subi	r28, 0x96	; 150
   13c56:	d0 40       	sbci	r29, 0x00	; 0
   13c58:	bf 93       	push	r27
   13c5a:	cb 56       	subi	r28, 0x6B	; 107
   13c5c:	df 4f       	sbci	r29, 0xFF	; 255
   13c5e:	e8 81       	ld	r30, Y
   13c60:	c5 59       	subi	r28, 0x95	; 149
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13c62:	d0 40       	sbci	r29, 0x00	; 0
   13c64:	08 c1       	rjmp	.+528    	; 0x13e76 <Read_Config+0x100e>
   13c66:	64 e5       	ldi	r22, 0x54	; 84
   13c68:	7e e0       	ldi	r23, 0x0E	; 14
   13c6a:	c6 01       	movw	r24, r12
   13c6c:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13c70:	00 97       	sbiw	r24, 0x00	; 0
   13c72:	f1 f0       	breq	.+60     	; 0x13cb0 <Read_Config+0xe48>
   13c74:	de 01       	movw	r26, r28
   13c76:	af 57       	subi	r26, 0x7F	; 127
   13c78:	bf 4f       	sbci	r27, 0xFF	; 255
   13c7a:	7d 01       	movw	r14, r26
   13c7c:	0f ef       	ldi	r16, 0xFF	; 255
   13c7e:	1f ef       	ldi	r17, 0xFF	; 255
   13c80:	20 e0       	ldi	r18, 0x00	; 0
   13c82:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13c84:	40 e0       	ldi	r20, 0x00	; 0
   13c86:	50 e0       	ldi	r21, 0x00	; 0
   13c88:	ba 01       	movw	r22, r20
                AMIGOp->CONFIG.ID = val;
   13c8a:	8c 0d       	add	r24, r12
   13c8c:	9d 1d       	adc	r25, r13
   13c8e:	0e 94 54 95 	call	0x12aa8	; 0x12aa8 <assign_value>
   13c92:	89 2b       	or	r24, r25
   13c94:	19 f4       	brne	.+6      	; 0x13c9c <Read_Config+0xe34>
   13c96:	bf ef       	ldi	r27, 0xFF	; 255
   13c98:	ab 1a       	sub	r10, r27
   13c9a:	bb 0a       	sbc	r11, r27
   13c9c:	cf 57       	subi	r28, 0x7F	; 127
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13c9e:	df 4f       	sbci	r29, 0xFF	; 255
   13ca0:	88 81       	ld	r24, Y
   13ca2:	99 81       	ldd	r25, Y+1	; 0x01
   13ca4:	c1 58       	subi	r28, 0x81	; 129
   13ca6:	d0 40       	sbci	r29, 0x00	; 0
   13ca8:	f1 01       	movw	r30, r2
   13caa:	94 a3       	std	Z+36, r25	; 0x24
   13cac:	83 a3       	std	Z+35, r24	; 0x23
   13cae:	88 c9       	rjmp	.-3312   	; 0x12fc0 <Read_Config+0x158>
   13cb0:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13cb4:	8f 93       	push	r24
   13cb6:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   13cba:	8f 93       	push	r24
   13cbc:	df 92       	push	r13
   13cbe:	cf 92       	push	r12
   13cc0:	1f 92       	push	r1
   13cc2:	cd 56       	subi	r28, 0x6D	; 109
   13cc4:	df 4f       	sbci	r29, 0xFF	; 255
   13cc6:	f8 81       	ld	r31, Y
   13cc8:	c3 59       	subi	r28, 0x93	; 147
   13cca:	d0 40       	sbci	r29, 0x00	; 0
                ++errors;
   13ccc:	ff 93       	push	r31
   13cce:	ce 56       	subi	r28, 0x6E	; 110
   13cd0:	df 4f       	sbci	r29, 0xFF	; 255
   13cd2:	28 81       	ld	r18, Y
            }
            break;

        case AMIGO_GEOMETRY:
            if( (ind = token(ptr,"BYTES_PER_SECTOR")) )
   13cd4:	c2 59       	subi	r28, 0x92	; 146
   13cd6:	d0 40       	sbci	r29, 0x00	; 0
   13cd8:	2f 93       	push	r18
   13cda:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   13cde:	3f ef       	ldi	r19, 0xFF	; 255
   13ce0:	a3 1a       	sub	r10, r19
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   13ce2:	b3 0a       	sbc	r11, r19
   13ce4:	e9 c0       	rjmp	.+466    	; 0x13eb8 <Read_Config+0x1050>
   13ce6:	60 e6       	ldi	r22, 0x60	; 96
   13ce8:	7f e0       	ldi	r23, 0x0F	; 15
   13cea:	c6 01       	movw	r24, r12
   13cec:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13cf0:	00 97       	sbiw	r24, 0x00	; 0
   13cf2:	c1 f1       	breq	.+112    	; 0x13d64 <Read_Config+0xefc>
   13cf4:	de 01       	movw	r26, r28
   13cf6:	af 57       	subi	r26, 0x7F	; 127
   13cf8:	bf 4f       	sbci	r27, 0xFF	; 255
   13cfa:	7d 01       	movw	r14, r26
   13cfc:	00 e0       	ldi	r16, 0x00	; 0
   13cfe:	10 e1       	ldi	r17, 0x10	; 16
   13d00:	20 e0       	ldi	r18, 0x00	; 0
   13d02:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13d04:	40 e0       	ldi	r20, 0x00	; 0
   13d06:	50 e0       	ldi	r21, 0x00	; 0
   13d08:	ba 01       	movw	r22, r20
printf("BYTES PER SECTOR: %s\n", token);
   13d0a:	8c 0d       	add	r24, r12
   13d0c:	9d 1d       	adc	r25, r13
   13d0e:	0e 94 54 95 	call	0x12aa8	; 0x12aa8 <assign_value>
   13d12:	89 2b       	or	r24, r25
   13d14:	19 f4       	brne	.+6      	; 0x13d1c <Read_Config+0xeb4>
   13d16:	bf ef       	ldi	r27, 0xFF	; 255
   13d18:	ab 1a       	sub	r10, r27
   13d1a:	bb 0a       	sbc	r11, r27
   13d1c:	85 e9       	ldi	r24, 0x95	; 149
   13d1e:	93 e3       	ldi	r25, 0x33	; 51
   13d20:	9f 93       	push	r25
   13d22:	8f 93       	push	r24
   13d24:	1f 92       	push	r1
   13d26:	c0 57       	subi	r28, 0x70	; 112
   13d28:	df 4f       	sbci	r29, 0xFF	; 255
   13d2a:	e8 81       	ld	r30, Y
   13d2c:	c0 59       	subi	r28, 0x90	; 144
   13d2e:	d0 40       	sbci	r29, 0x00	; 0
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val;
   13d30:	ef 93       	push	r30
   13d32:	c1 57       	subi	r28, 0x71	; 113
   13d34:	df 4f       	sbci	r29, 0xFF	; 255
   13d36:	f8 81       	ld	r31, Y
   13d38:	cf 58       	subi	r28, 0x8F	; 143
   13d3a:	d0 40       	sbci	r29, 0x00	; 0
   13d3c:	ff 93       	push	r31
   13d3e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   13d42:	cf 57       	subi	r28, 0x7F	; 127
   13d44:	df 4f       	sbci	r29, 0xFF	; 255
   13d46:	88 81       	ld	r24, Y
   13d48:	99 81       	ldd	r25, Y+1	; 0x01
   13d4a:	c1 58       	subi	r28, 0x81	; 129
   13d4c:	d0 40       	sbci	r29, 0x00	; 0
   13d4e:	d1 01       	movw	r26, r2
   13d50:	96 96       	adiw	r26, 0x26	; 38
            }
            else if( (ind = token(ptr,"SECTORS_PER_TRACK")) )
   13d52:	9c 93       	st	X, r25
   13d54:	8e 93       	st	-X, r24
   13d56:	95 97       	sbiw	r26, 0x25	; 37
   13d58:	0f 90       	pop	r0
   13d5a:	0f 90       	pop	r0
   13d5c:	0f 90       	pop	r0
   13d5e:	0f 90       	pop	r0
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13d60:	0f 90       	pop	r0
   13d62:	2e c9       	rjmp	.-3492   	; 0x12fc0 <Read_Config+0x158>
   13d64:	61 e7       	ldi	r22, 0x71	; 113
   13d66:	7f e0       	ldi	r23, 0x0F	; 15
   13d68:	c6 01       	movw	r24, r12
   13d6a:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13d6e:	00 97       	sbiw	r24, 0x00	; 0
   13d70:	01 f1       	breq	.+64     	; 0x13db2 <Read_Config+0xf4a>
   13d72:	fe 01       	movw	r30, r28
   13d74:	ef 57       	subi	r30, 0x7F	; 127
   13d76:	ff 4f       	sbci	r31, 0xFF	; 255
   13d78:	7f 01       	movw	r14, r30
   13d7a:	0f ef       	ldi	r16, 0xFF	; 255
   13d7c:	10 e0       	ldi	r17, 0x00	; 0
   13d7e:	20 e0       	ldi	r18, 0x00	; 0
   13d80:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13d82:	40 e0       	ldi	r20, 0x00	; 0
   13d84:	50 e0       	ldi	r21, 0x00	; 0
   13d86:	ba 01       	movw	r22, r20
                AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val;
   13d88:	8c 0d       	add	r24, r12
   13d8a:	9d 1d       	adc	r25, r13
   13d8c:	0e 94 54 95 	call	0x12aa8	; 0x12aa8 <assign_value>
   13d90:	89 2b       	or	r24, r25
   13d92:	19 f4       	brne	.+6      	; 0x13d9a <Read_Config+0xf32>
   13d94:	ff ef       	ldi	r31, 0xFF	; 255
   13d96:	af 1a       	sub	r10, r31
   13d98:	bf 0a       	sbc	r11, r31
   13d9a:	cf 57       	subi	r28, 0x7F	; 127
   13d9c:	df 4f       	sbci	r29, 0xFF	; 255
   13d9e:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"HEADS")) )
   13da0:	99 81       	ldd	r25, Y+1	; 0x01
   13da2:	c1 58       	subi	r28, 0x81	; 129
   13da4:	d0 40       	sbci	r29, 0x00	; 0
   13da6:	d1 01       	movw	r26, r2
   13da8:	98 96       	adiw	r26, 0x28	; 40
   13daa:	9c 93       	st	X, r25
   13dac:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13dae:	97 97       	sbiw	r26, 0x27	; 39
   13db0:	07 c9       	rjmp	.-3570   	; 0x12fc0 <Read_Config+0x158>
   13db2:	63 e8       	ldi	r22, 0x83	; 131
   13db4:	7f e0       	ldi	r23, 0x0F	; 15
   13db6:	c6 01       	movw	r24, r12
   13db8:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13dbc:	00 97       	sbiw	r24, 0x00	; 0
   13dbe:	01 f1       	breq	.+64     	; 0x13e00 <Read_Config+0xf98>
   13dc0:	fe 01       	movw	r30, r28
   13dc2:	ef 57       	subi	r30, 0x7F	; 127
   13dc4:	ff 4f       	sbci	r31, 0xFF	; 255
   13dc6:	7f 01       	movw	r14, r30
   13dc8:	0f ef       	ldi	r16, 0xFF	; 255
   13dca:	10 e0       	ldi	r17, 0x00	; 0
   13dcc:	20 e0       	ldi	r18, 0x00	; 0
   13dce:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13dd0:	40 e0       	ldi	r20, 0x00	; 0
   13dd2:	50 e0       	ldi	r21, 0x00	; 0
   13dd4:	ba 01       	movw	r22, r20
                AMIGOp->GEOMETRY.HEADS = val;
   13dd6:	8c 0d       	add	r24, r12
   13dd8:	9d 1d       	adc	r25, r13
   13dda:	0e 94 54 95 	call	0x12aa8	; 0x12aa8 <assign_value>
   13dde:	89 2b       	or	r24, r25
   13de0:	19 f4       	brne	.+6      	; 0x13de8 <Read_Config+0xf80>
   13de2:	ff ef       	ldi	r31, 0xFF	; 255
   13de4:	af 1a       	sub	r10, r31
   13de6:	bf 0a       	sbc	r11, r31
   13de8:	cf 57       	subi	r28, 0x7F	; 127
   13dea:	df 4f       	sbci	r29, 0xFF	; 255
   13dec:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"CYLINDERS")) )
   13dee:	99 81       	ldd	r25, Y+1	; 0x01
   13df0:	c1 58       	subi	r28, 0x81	; 129
   13df2:	d0 40       	sbci	r29, 0x00	; 0
   13df4:	d1 01       	movw	r26, r2
   13df6:	9a 96       	adiw	r26, 0x2a	; 42
   13df8:	9c 93       	st	X, r25
   13dfa:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13dfc:	99 97       	sbiw	r26, 0x29	; 41
   13dfe:	e0 c8       	rjmp	.-3648   	; 0x12fc0 <Read_Config+0x158>
   13e00:	69 e8       	ldi	r22, 0x89	; 137
   13e02:	7f e0       	ldi	r23, 0x0F	; 15
   13e04:	c6 01       	movw	r24, r12
   13e06:	0e 94 95 33 	call	0x672a	; 0x672a <token>
   13e0a:	00 97       	sbiw	r24, 0x00	; 0
   13e0c:	01 f1       	breq	.+64     	; 0x13e4e <Read_Config+0xfe6>
   13e0e:	fe 01       	movw	r30, r28
   13e10:	ef 57       	subi	r30, 0x7F	; 127
   13e12:	ff 4f       	sbci	r31, 0xFF	; 255
   13e14:	7f 01       	movw	r14, r30
   13e16:	0f ef       	ldi	r16, 0xFF	; 255
   13e18:	10 e0       	ldi	r17, 0x00	; 0
   13e1a:	20 e0       	ldi	r18, 0x00	; 0
   13e1c:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13e1e:	40 e0       	ldi	r20, 0x00	; 0
   13e20:	50 e0       	ldi	r21, 0x00	; 0
   13e22:	ba 01       	movw	r22, r20
                AMIGOp->GEOMETRY.CYLINDERS = val;
   13e24:	8c 0d       	add	r24, r12
   13e26:	9d 1d       	adc	r25, r13
   13e28:	0e 94 54 95 	call	0x12aa8	; 0x12aa8 <assign_value>
   13e2c:	89 2b       	or	r24, r25
   13e2e:	19 f4       	brne	.+6      	; 0x13e36 <Read_Config+0xfce>
   13e30:	ff ef       	ldi	r31, 0xFF	; 255
   13e32:	af 1a       	sub	r10, r31
   13e34:	bf 0a       	sbc	r11, r31
   13e36:	cf 57       	subi	r28, 0x7F	; 127
   13e38:	df 4f       	sbci	r29, 0xFF	; 255
   13e3a:	88 81       	ld	r24, Y
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13e3c:	99 81       	ldd	r25, Y+1	; 0x01
   13e3e:	c1 58       	subi	r28, 0x81	; 129
   13e40:	d0 40       	sbci	r29, 0x00	; 0
   13e42:	d1 01       	movw	r26, r2
   13e44:	9c 96       	adiw	r26, 0x2c	; 44
   13e46:	9c 93       	st	X, r25
   13e48:	8e 93       	st	-X, r24
   13e4a:	9b 97       	sbiw	r26, 0x2b	; 43
   13e4c:	b9 c8       	rjmp	.-3726   	; 0x12fc0 <Read_Config+0x158>
   13e4e:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13e52:	8f 93       	push	r24
   13e54:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   13e58:	8f 93       	push	r24
   13e5a:	df 92       	push	r13
   13e5c:	cf 92       	push	r12
   13e5e:	1f 92       	push	r1
   13e60:	c3 57       	subi	r28, 0x73	; 115
   13e62:	df 4f       	sbci	r29, 0xFF	; 255
   13e64:	b8 81       	ld	r27, Y
   13e66:	cd 58       	subi	r28, 0x8D	; 141
   13e68:	d0 40       	sbci	r29, 0x00	; 0
                ++errors;
   13e6a:	bf 93       	push	r27
   13e6c:	c4 57       	subi	r28, 0x74	; 116
   13e6e:	df 4f       	sbci	r29, 0xFF	; 255
   13e70:	e8 81       	ld	r30, Y
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13e72:	cc 58       	subi	r28, 0x8C	; 140
   13e74:	d0 40       	sbci	r29, 0x00	; 0
   13e76:	ef 93       	push	r30
   13e78:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   13e7c:	ff ef       	ldi	r31, 0xFF	; 255
   13e7e:	af 1a       	sub	r10, r31
   13e80:	bf 0a       	sbc	r11, r31
   13e82:	1a c0       	rjmp	.+52     	; 0x13eb8 <Read_Config+0x1050>
   13e84:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13e88:	8f 93       	push	r24
   13e8a:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
   13e8e:	8f 93       	push	r24
   13e90:	df 92       	push	r13
   13e92:	cf 92       	push	r12
   13e94:	1f 92       	push	r1
   13e96:	c6 57       	subi	r28, 0x76	; 118
   13e98:	df 4f       	sbci	r29, 0xFF	; 255
   13e9a:	38 81       	ld	r19, Y
   13e9c:	ca 58       	subi	r28, 0x8A	; 138
   13e9e:	d0 40       	sbci	r29, 0x00	; 0
            ++errors;
   13ea0:	3f 93       	push	r19
   13ea2:	c7 57       	subi	r28, 0x77	; 119
   13ea4:	df 4f       	sbci	r29, 0xFF	; 255
            break;
   13ea6:	48 81       	ld	r20, Y
   13ea8:	c9 58       	subi	r28, 0x89	; 137
   13eaa:	d0 40       	sbci	r29, 0x00	; 0
   13eac:	4f 93       	push	r20
   13eae:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>

        } // switch
    } //while
    if(state != START_STATE)
   13eb2:	8f ef       	ldi	r24, 0xFF	; 255
   13eb4:	a8 1a       	sub	r10, r24
   13eb6:	b8 0a       	sbc	r11, r24
    {
        printf("Missing END statement at line:%d\n", lines);
   13eb8:	0f b6       	in	r0, 0x3f	; 63
   13eba:	f8 94       	cli
   13ebc:	de bf       	out	0x3e, r29	; 62
   13ebe:	0f be       	out	0x3f, r0	; 63
   13ec0:	cd bf       	out	0x3d, r28	; 61
   13ec2:	7e c8       	rjmp	.-3844   	; 0x12fc0 <Read_Config+0x158>
   13ec4:	61 14       	cp	r6, r1
   13ec6:	71 04       	cpc	r7, r1
   13ec8:	a9 f0       	breq	.+42     	; 0x13ef4 <Read_Config+0x108c>
   13eca:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13ece:	8f 93       	push	r24
   13ed0:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
        ++errors;
   13ed4:	8f 93       	push	r24
   13ed6:	88 ec       	ldi	r24, 0xC8	; 200
   13ed8:	99 e1       	ldi	r25, 0x19	; 25
   13eda:	1f 92       	push	r1
   13edc:	9f 93       	push	r25
   13ede:	8f 93       	push	r24
   13ee0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13ee4:	bf ef       	ldi	r27, 0xFF	; 255
   13ee6:	ab 1a       	sub	r10, r27
   13ee8:	bb 0a       	sbc	r11, r27
   13eea:	0f 90       	pop	r0
   13eec:	0f 90       	pop	r0
   13eee:	0f 90       	pop	r0
   13ef0:	0f 90       	pop	r0
   13ef2:	0f 90       	pop	r0
   13ef4:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <lines+0x1>
   13ef8:	8f 93       	push	r24
   13efa:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <lines>
    if(errors)
   13efe:	8f 93       	push	r24
   13f00:	8b ea       	ldi	r24, 0xAB	; 171
   13f02:	99 e1       	ldi	r25, 0x19	; 25
   13f04:	1f 92       	push	r1
   13f06:	9f 93       	push	r25
   13f08:	8f 93       	push	r24
   13f0a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13f0e:	0f 90       	pop	r0
   13f10:	0f 90       	pop	r0
   13f12:	0f 90       	pop	r0
   13f14:	0f 90       	pop	r0
   13f16:	0f 90       	pop	r0
   13f18:	a1 14       	cp	r10, r1
   13f1a:	b1 04       	cpc	r11, r1
   13f1c:	71 f0       	breq	.+28     	; 0x13f3a <Read_Config+0x10d2>
   13f1e:	bf 92       	push	r11
   13f20:	af 92       	push	r10
   13f22:	84 e8       	ldi	r24, 0x84	; 132
   13f24:	99 e1       	ldi	r25, 0x19	; 25
   13f26:	1f 92       	push	r1

    ret = fclose(cfg);
   13f28:	9f 93       	push	r25
   13f2a:	8f 93       	push	r24
   13f2c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   13f30:	0f 90       	pop	r0
   13f32:	0f 90       	pop	r0
   13f34:	0f 90       	pop	r0
   13f36:	0f 90       	pop	r0
    if(ret == EOF)
   13f38:	0f 90       	pop	r0
   13f3a:	c9 57       	subi	r28, 0x79	; 121
    {
        perror("Read_Config - close error");
   13f3c:	df 4f       	sbci	r29, 0xFF	; 255
   13f3e:	88 81       	ld	r24, Y
   13f40:	99 81       	ldd	r25, Y+1	; 0x01
   13f42:	c7 58       	subi	r28, 0x87	; 135
        ++errors;
   13f44:	d0 40       	sbci	r29, 0x00	; 0
   13f46:	0e 94 3f 7d 	call	0xfa7e	; 0xfa7e <fclose>
    }

	// Post process device values
	Post_Config();
   13f4a:	01 96       	adiw	r24, 0x01	; 1
   13f4c:	39 f4       	brne	.+14     	; 0x13f5c <Read_Config+0x10f4>

    return(errors);
   13f4e:	83 e9       	ldi	r24, 0x93	; 147
}
   13f50:	9f e0       	ldi	r25, 0x0F	; 15
   13f52:	0e 94 df 78 	call	0xf1be	; 0xf1be <perror>
   13f56:	ff ef       	ldi	r31, 0xFF	; 255
   13f58:	af 1a       	sub	r10, r31
   13f5a:	bf 0a       	sbc	r11, r31
   13f5c:	0e 94 a0 96 	call	0x12d40	; 0x12d40 <Post_Config>
   13f60:	c5 01       	movw	r24, r10
   13f62:	c6 56       	subi	r28, 0x66	; 102
   13f64:	df 4f       	sbci	r29, 0xFF	; 255
   13f66:	e2 e1       	ldi	r30, 0x12	; 18
   13f68:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

00013f6c <print_var_P>:
/// @brief Display Configuration File variable
/// @param str: title
/// @param val: variable value
/// @return  void
void print_var_P(__memx const char *str, uint32_t val)
{
   13f6c:	cf 92       	push	r12
   13f6e:	df 92       	push	r13
   13f70:	ef 92       	push	r14
   13f72:	0f 93       	push	r16
   13f74:	1f 93       	push	r17
   13f76:	cf 93       	push	r28
   13f78:	df 93       	push	r29
   13f7a:	cd b7       	in	r28, 0x3d	; 61
   13f7c:	de b7       	in	r29, 0x3e	; 62
   13f7e:	c0 54       	subi	r28, 0x40	; 64
   13f80:	d1 09       	sbc	r29, r1
   13f82:	0f b6       	in	r0, 0x3f	; 63
   13f84:	f8 94       	cli
   13f86:	de bf       	out	0x3e, r29	; 62
   13f88:	0f be       	out	0x3f, r0	; 63
   13f8a:	cd bf       	out	0x3d, r28	; 61
   13f8c:	6b 01       	movw	r12, r22
   13f8e:	e8 2e       	mov	r14, r24
   13f90:	75 2f       	mov	r23, r21
   13f92:	de 01       	movw	r26, r28
   13f94:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   13f96:	80 e0       	ldi	r24, 0x00	; 0
   13f98:	90 e0       	ldi	r25, 0x00	; 0
   13f9a:	8d 01       	movw	r16, r26
    while( *str && i < 62)
   13f9c:	f6 01       	movw	r30, r12
   13f9e:	5e 2d       	mov	r21, r14
   13fa0:	0e 94 6c e5 	call	0x1cad8	; 0x1cad8 <__xload_1>
   13fa4:	66 23       	and	r22, r22
   13fa6:	51 f0       	breq	.+20     	; 0x13fbc <print_var_P+0x50>
   13fa8:	8e 33       	cpi	r24, 0x3E	; 62
   13faa:	91 05       	cpc	r25, r1
   13fac:	39 f0       	breq	.+14     	; 0x13fbc <print_var_P+0x50>
        tmp[i++] = *str++;
   13fae:	01 96       	adiw	r24, 0x01	; 1
   13fb0:	5f ef       	ldi	r21, 0xFF	; 255
   13fb2:	c5 1a       	sub	r12, r21
   13fb4:	d5 0a       	sbc	r13, r21
   13fb6:	e5 0a       	sbc	r14, r21
   13fb8:	6d 93       	st	X+, r22
   13fba:	f0 cf       	rjmp	.-32     	; 0x13f9c <print_var_P+0x30>
    tmp[i++] = 0;
   13fbc:	f8 01       	movw	r30, r16
   13fbe:	e8 0f       	add	r30, r24
   13fc0:	f9 1f       	adc	r31, r25
   13fc2:	10 82       	st	Z, r1

    printf("    %-25s = %8lxH (%ld)\n", tmp, val, val); 
   13fc4:	7f 93       	push	r23
   13fc6:	4f 93       	push	r20
   13fc8:	3f 93       	push	r19
   13fca:	2f 93       	push	r18
   13fcc:	7f 93       	push	r23
   13fce:	4f 93       	push	r20
   13fd0:	3f 93       	push	r19
   13fd2:	2f 93       	push	r18
   13fd4:	1f 93       	push	r17
   13fd6:	0f 93       	push	r16
   13fd8:	8b e6       	ldi	r24, 0x6B	; 107
   13fda:	99 e1       	ldi	r25, 0x19	; 25
   13fdc:	1f 92       	push	r1
   13fde:	9f 93       	push	r25
   13fe0:	8f 93       	push	r24
   13fe2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
}
   13fe6:	0f b6       	in	r0, 0x3f	; 63
   13fe8:	f8 94       	cli
   13fea:	de bf       	out	0x3e, r29	; 62
   13fec:	0f be       	out	0x3f, r0	; 63
   13fee:	cd bf       	out	0x3d, r28	; 61
   13ff0:	c0 5c       	subi	r28, 0xC0	; 192
   13ff2:	df 4f       	sbci	r29, 0xFF	; 255
   13ff4:	0f b6       	in	r0, 0x3f	; 63
   13ff6:	f8 94       	cli
   13ff8:	de bf       	out	0x3e, r29	; 62
   13ffa:	0f be       	out	0x3f, r0	; 63
   13ffc:	cd bf       	out	0x3d, r28	; 61
   13ffe:	df 91       	pop	r29
   14000:	cf 91       	pop	r28
   14002:	1f 91       	pop	r17
   14004:	0f 91       	pop	r16
   14006:	ef 90       	pop	r14
   14008:	df 90       	pop	r13
   1400a:	cf 90       	pop	r12
   1400c:	08 95       	ret

0001400e <print_str_P>:
/// @brief Display Configuration File string
/// @param *str: title
/// @param *arg: string
/// @return  void
void print_str_P(__memx const char *str, char *arg)
{
   1400e:	cf 92       	push	r12
   14010:	df 92       	push	r13
   14012:	ef 92       	push	r14
   14014:	cf 93       	push	r28
   14016:	df 93       	push	r29
   14018:	cd b7       	in	r28, 0x3d	; 61
   1401a:	de b7       	in	r29, 0x3e	; 62
   1401c:	c0 54       	subi	r28, 0x40	; 64
   1401e:	d1 09       	sbc	r29, r1
   14020:	0f b6       	in	r0, 0x3f	; 63
   14022:	f8 94       	cli
   14024:	de bf       	out	0x3e, r29	; 62
   14026:	0f be       	out	0x3f, r0	; 63
   14028:	cd bf       	out	0x3d, r28	; 61
   1402a:	6b 01       	movw	r12, r22
   1402c:	e8 2e       	mov	r14, r24
   1402e:	75 2f       	mov	r23, r21
   14030:	de 01       	movw	r26, r28
   14032:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   14034:	80 e0       	ldi	r24, 0x00	; 0
   14036:	90 e0       	ldi	r25, 0x00	; 0
   14038:	9d 01       	movw	r18, r26
    while( *str && i < 62)
   1403a:	f6 01       	movw	r30, r12
   1403c:	5e 2d       	mov	r21, r14
   1403e:	0e 94 6c e5 	call	0x1cad8	; 0x1cad8 <__xload_1>
   14042:	66 23       	and	r22, r22
   14044:	51 f0       	breq	.+20     	; 0x1405a <print_str_P+0x4c>
   14046:	8e 33       	cpi	r24, 0x3E	; 62
   14048:	91 05       	cpc	r25, r1
   1404a:	39 f0       	breq	.+14     	; 0x1405a <print_str_P+0x4c>
        tmp[i++] = *str++;
   1404c:	01 96       	adiw	r24, 0x01	; 1
   1404e:	5f ef       	ldi	r21, 0xFF	; 255
   14050:	c5 1a       	sub	r12, r21
   14052:	d5 0a       	sbc	r13, r21
   14054:	e5 0a       	sbc	r14, r21
   14056:	6d 93       	st	X+, r22
   14058:	f0 cf       	rjmp	.-32     	; 0x1403a <print_str_P+0x2c>
    tmp[i++] = 0;
   1405a:	f9 01       	movw	r30, r18
   1405c:	e8 0f       	add	r30, r24
   1405e:	f9 1f       	adc	r31, r25
   14060:	10 82       	st	Z, r1
    printf("    %-25s = \"%s\"\n", tmp, arg);   
   14062:	7f 93       	push	r23
   14064:	4f 93       	push	r20
   14066:	3f 93       	push	r19
   14068:	2f 93       	push	r18
   1406a:	89 e5       	ldi	r24, 0x59	; 89
   1406c:	99 e1       	ldi	r25, 0x19	; 25
   1406e:	1f 92       	push	r1
   14070:	9f 93       	push	r25
   14072:	8f 93       	push	r24
   14074:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
}
   14078:	0f b6       	in	r0, 0x3f	; 63
   1407a:	f8 94       	cli
   1407c:	de bf       	out	0x3e, r29	; 62
   1407e:	0f be       	out	0x3f, r0	; 63
   14080:	cd bf       	out	0x3d, r28	; 61
   14082:	c0 5c       	subi	r28, 0xC0	; 192
   14084:	df 4f       	sbci	r29, 0xFF	; 255
   14086:	0f b6       	in	r0, 0x3f	; 63
   14088:	f8 94       	cli
   1408a:	de bf       	out	0x3e, r29	; 62
   1408c:	0f be       	out	0x3f, r0	; 63
   1408e:	cd bf       	out	0x3d, r28	; 61
   14090:	df 91       	pop	r29
   14092:	cf 91       	pop	r28
   14094:	ef 90       	pop	r14
   14096:	df 90       	pop	r13
   14098:	cf 90       	pop	r12
   1409a:	08 95       	ret

0001409c <display_Addresses>:

/// ===============================================
/// @brief Display Configuration device address saummary
/// @return  void
void display_Addresses()
{
   1409c:	2f 92       	push	r2
   1409e:	3f 92       	push	r3
   140a0:	4f 92       	push	r4
   140a2:	6f 92       	push	r6
   140a4:	7f 92       	push	r7
   140a6:	8f 92       	push	r8
   140a8:	af 92       	push	r10
   140aa:	bf 92       	push	r11
   140ac:	cf 92       	push	r12
   140ae:	df 92       	push	r13
   140b0:	ef 92       	push	r14
   140b2:	0f 93       	push	r16
   140b4:	1f 93       	push	r17
   140b6:	cf 93       	push	r28
   140b8:	df 93       	push	r29
   140ba:	cd b7       	in	r28, 0x3d	; 61
   140bc:	de b7       	in	r29, 0x3e	; 62
   140be:	2b 97       	sbiw	r28, 0x0b	; 11
   140c0:	0f b6       	in	r0, 0x3f	; 63
   140c2:	f8 94       	cli
   140c4:	de bf       	out	0x3e, r29	; 62
   140c6:	0f be       	out	0x3f, r0	; 63
   140c8:	cd bf       	out	0x3d, r28	; 61
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
   140ca:	87 e3       	ldi	r24, 0x37	; 55
   140cc:	99 e1       	ldi	r25, 0x19	; 25
   140ce:	1f 92       	push	r1
   140d0:	9f 93       	push	r25
   140d2:	8f 93       	push	r24
   140d4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   140d8:	0c ee       	ldi	r16, 0xEC	; 236
   140da:	1d e1       	ldi	r17, 0x1D	; 29
   140dc:	0f 90       	pop	r0
   140de:	0f 90       	pop	r0
   140e0:	0f 90       	pop	r0
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   140e2:	86 e9       	ldi	r24, 0x96	; 150
   140e4:	98 e1       	ldi	r25, 0x18	; 24
   140e6:	9c 01       	movw	r18, r24
   140e8:	40 e0       	ldi	r20, 0x00	; 0
   140ea:	29 83       	std	Y+1, r18	; 0x01
   140ec:	3a 83       	std	Y+2, r19	; 0x02
   140ee:	4b 83       	std	Y+3, r20	; 0x03
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   140f0:	8f e7       	ldi	r24, 0x7F	; 127
   140f2:	98 e1       	ldi	r25, 0x18	; 24
   140f4:	9c 01       	movw	r18, r24
   140f6:	40 e0       	ldi	r20, 0x00	; 0
   140f8:	2c 83       	std	Y+4, r18	; 0x04
   140fa:	3d 83       	std	Y+5, r19	; 0x05
   140fc:	4e 83       	std	Y+6, r20	; 0x06
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   140fe:	88 e6       	ldi	r24, 0x68	; 104
   14100:	98 e1       	ldi	r25, 0x18	; 24
   14102:	9c 01       	movw	r18, r24
   14104:	40 e0       	ldi	r20, 0x00	; 0
   14106:	2f 83       	std	Y+7, r18	; 0x07
   14108:	38 87       	std	Y+8, r19	; 0x08
   1410a:	49 87       	std	Y+9, r20	; 0x09
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   1410c:	8b ed       	ldi	r24, 0xDB	; 219
   1410e:	98 e1       	ldi	r25, 0x18	; 24
   14110:	6c 01       	movw	r12, r24
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   14112:	84 ec       	ldi	r24, 0xC4	; 196
   14114:	98 e1       	ldi	r25, 0x18	; 24
   14116:	3c 01       	movw	r6, r24
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   14118:	8d ea       	ldi	r24, 0xAD	; 173
   1411a:	98 e1       	ldi	r25, 0x18	; 24
   1411c:	1c 01       	movw	r2, r24
            continue;
        address = Devices[i].ADDRESS;

        if(Devices[i].TYPE == SS80_TYPE)
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   1411e:	80 e2       	ldi	r24, 0x20	; 32
   14120:	a8 2e       	mov	r10, r24
   14122:	89 e1       	ldi	r24, 0x19	; 25
   14124:	b8 2e       	mov	r11, r24
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   14126:	f8 01       	movw	r30, r16
   14128:	80 81       	ld	r24, Z
   1412a:	88 23       	and	r24, r24
   1412c:	09 f4       	brne	.+2      	; 0x14130 <display_Addresses+0x94>
   1412e:	8a c0       	rjmp	.+276    	; 0x14244 <display_Addresses+0x1a8>
            continue;
        address = Devices[i].ADDRESS;
   14130:	f1 81       	ldd	r31, Z+1	; 0x01
   14132:	2f 2f       	mov	r18, r31
   14134:	30 e0       	ldi	r19, 0x00	; 0
   14136:	3b 87       	std	Y+11, r19	; 0x0b
   14138:	2a 87       	std	Y+10, r18	; 0x0a

        if(Devices[i].TYPE == SS80_TYPE)
   1413a:	83 30       	cpi	r24, 0x03	; 3
   1413c:	49 f5       	brne	.+82     	; 0x14190 <display_Addresses+0xf4>
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   1413e:	c9 01       	movw	r24, r18
   14140:	80 96       	adiw	r24, 0x20	; 32
   14142:	9f 93       	push	r25
   14144:	8f 93       	push	r24
   14146:	c5 01       	movw	r24, r10
   14148:	1f 92       	push	r1
   1414a:	9f 93       	push	r25
   1414c:	af 92       	push	r10
   1414e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            printf("  SS80_MTA    = %02XH\n",BASE_MTA + address );
   14152:	8a 85       	ldd	r24, Y+10	; 0x0a
   14154:	9b 85       	ldd	r25, Y+11	; 0x0b
   14156:	80 5c       	subi	r24, 0xC0	; 192
   14158:	9f 4f       	sbci	r25, 0xFF	; 255
   1415a:	9f 93       	push	r25
   1415c:	8f 93       	push	r24
   1415e:	89 e0       	ldi	r24, 0x09	; 9
   14160:	99 e1       	ldi	r25, 0x19	; 25
   14162:	1f 92       	push	r1
   14164:	9f 93       	push	r25
   14166:	8f 93       	push	r24
   14168:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
   1416c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1416e:	9b 85       	ldd	r25, Y+11	; 0x0b
   14170:	80 5a       	subi	r24, 0xA0	; 160
   14172:	9f 4f       	sbci	r25, 0xFF	; 255
   14174:	9f 93       	push	r25
   14176:	8f 93       	push	r24
   14178:	82 ef       	ldi	r24, 0xF2	; 242
   1417a:	98 e1       	ldi	r25, 0x18	; 24
   1417c:	1f 92       	push	r1
   1417e:	9f 93       	push	r25
   14180:	8f 93       	push	r24
   14182:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   14186:	0f b6       	in	r0, 0x3f	; 63
   14188:	f8 94       	cli
   1418a:	de bf       	out	0x3e, r29	; 62
   1418c:	0f be       	out	0x3f, r0	; 63
   1418e:	cd bf       	out	0x3d, r28	; 61
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   14190:	f8 01       	movw	r30, r16
   14192:	80 81       	ld	r24, Z
   14194:	81 30       	cpi	r24, 0x01	; 1
   14196:	29 f5       	brne	.+74     	; 0x141e2 <display_Addresses+0x146>
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   14198:	8a 85       	ldd	r24, Y+10	; 0x0a
   1419a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1419c:	80 96       	adiw	r24, 0x20	; 32
   1419e:	9f 93       	push	r25
   141a0:	8f 93       	push	r24
   141a2:	1f 92       	push	r1
   141a4:	df 92       	push	r13
   141a6:	cf 92       	push	r12
   141a8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   141ac:	8a 85       	ldd	r24, Y+10	; 0x0a
   141ae:	9b 85       	ldd	r25, Y+11	; 0x0b
   141b0:	80 5c       	subi	r24, 0xC0	; 192
   141b2:	9f 4f       	sbci	r25, 0xFF	; 255
   141b4:	9f 93       	push	r25
   141b6:	8f 93       	push	r24
   141b8:	1f 92       	push	r1
   141ba:	7f 92       	push	r7
   141bc:	6f 92       	push	r6
   141be:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   141c2:	8a 85       	ldd	r24, Y+10	; 0x0a
   141c4:	9b 85       	ldd	r25, Y+11	; 0x0b
   141c6:	80 5a       	subi	r24, 0xA0	; 160
   141c8:	9f 4f       	sbci	r25, 0xFF	; 255
   141ca:	9f 93       	push	r25
   141cc:	8f 93       	push	r24
   141ce:	1f 92       	push	r1
   141d0:	3f 92       	push	r3
   141d2:	2f 92       	push	r2
   141d4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   141d8:	0f b6       	in	r0, 0x3f	; 63
   141da:	f8 94       	cli
   141dc:	de bf       	out	0x3e, r29	; 62
   141de:	0f be       	out	0x3f, r0	; 63
   141e0:	cd bf       	out	0x3d, r28	; 61
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
   141e2:	f8 01       	movw	r30, r16
   141e4:	80 81       	ld	r24, Z
   141e6:	84 30       	cpi	r24, 0x04	; 4
   141e8:	69 f5       	brne	.+90     	; 0x14244 <display_Addresses+0x1a8>
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   141ea:	8a 85       	ldd	r24, Y+10	; 0x0a
   141ec:	9b 85       	ldd	r25, Y+11	; 0x0b
   141ee:	80 96       	adiw	r24, 0x20	; 32
   141f0:	9f 93       	push	r25
   141f2:	8f 93       	push	r24
   141f4:	1f 92       	push	r1
   141f6:	fa 81       	ldd	r31, Y+2	; 0x02
   141f8:	ff 93       	push	r31
   141fa:	29 81       	ldd	r18, Y+1	; 0x01
   141fc:	2f 93       	push	r18
   141fe:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   14202:	8a 85       	ldd	r24, Y+10	; 0x0a
   14204:	9b 85       	ldd	r25, Y+11	; 0x0b
   14206:	80 5c       	subi	r24, 0xC0	; 192
   14208:	9f 4f       	sbci	r25, 0xFF	; 255
   1420a:	9f 93       	push	r25
   1420c:	8f 93       	push	r24
   1420e:	1f 92       	push	r1
   14210:	3d 81       	ldd	r19, Y+5	; 0x05
   14212:	3f 93       	push	r19
   14214:	4c 81       	ldd	r20, Y+4	; 0x04
   14216:	4f 93       	push	r20
   14218:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   1421c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1421e:	9b 85       	ldd	r25, Y+11	; 0x0b
   14220:	80 5a       	subi	r24, 0xA0	; 160
   14222:	9f 4f       	sbci	r25, 0xFF	; 255
   14224:	9b 87       	std	Y+11, r25	; 0x0b
   14226:	8a 87       	std	Y+10, r24	; 0x0a
   14228:	9f 93       	push	r25
   1422a:	8f 93       	push	r24
   1422c:	1f 92       	push	r1
   1422e:	98 85       	ldd	r25, Y+8	; 0x08
   14230:	9f 93       	push	r25
   14232:	ef 81       	ldd	r30, Y+7	; 0x07
   14234:	ef 93       	push	r30
   14236:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1423a:	0f b6       	in	r0, 0x3f	; 63
   1423c:	f8 94       	cli
   1423e:	de bf       	out	0x3e, r29	; 62
   14240:	0f be       	out	0x3f, r0	; 63
   14242:	cd bf       	out	0x3d, r28	; 61
   14244:	05 5d       	subi	r16, 0xD5	; 213
   14246:	1f 4f       	sbci	r17, 0xFF	; 255
void display_Addresses()
{
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   14248:	3f e1       	ldi	r19, 0x1F	; 31
   1424a:	00 3f       	cpi	r16, 0xF0	; 240
   1424c:	13 07       	cpc	r17, r19
   1424e:	09 f0       	breq	.+2      	; 0x14252 <display_Addresses+0x1b6>
   14250:	6a cf       	rjmp	.-300    	; 0x14126 <display_Addresses+0x8a>
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
        }
    }
    printf("\n");
   14252:	86 e6       	ldi	r24, 0x66	; 102
   14254:	98 e1       	ldi	r25, 0x18	; 24
   14256:	1f 92       	push	r1
   14258:	9f 93       	push	r25
   1425a:	8f 93       	push	r24
   1425c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
}
   14260:	0f 90       	pop	r0
   14262:	0f 90       	pop	r0
   14264:	0f 90       	pop	r0
   14266:	2b 96       	adiw	r28, 0x0b	; 11
   14268:	0f b6       	in	r0, 0x3f	; 63
   1426a:	f8 94       	cli
   1426c:	de bf       	out	0x3e, r29	; 62
   1426e:	0f be       	out	0x3f, r0	; 63
   14270:	cd bf       	out	0x3d, r28	; 61
   14272:	df 91       	pop	r29
   14274:	cf 91       	pop	r28
   14276:	1f 91       	pop	r17
   14278:	0f 91       	pop	r16
   1427a:	ef 90       	pop	r14
   1427c:	df 90       	pop	r13
   1427e:	cf 90       	pop	r12
   14280:	bf 90       	pop	r11
   14282:	af 90       	pop	r10
   14284:	8f 90       	pop	r8
   14286:	7f 90       	pop	r7
   14288:	6f 90       	pop	r6
   1428a:	4f 90       	pop	r4
   1428c:	3f 90       	pop	r3
   1428e:	2f 90       	pop	r2
   14290:	08 95       	ret

00014292 <display_Config>:

/// ===============================================
/// @brief Display current Configuration File values
/// @return  void
void display_Config()
{
   14292:	2f 92       	push	r2
   14294:	3f 92       	push	r3
   14296:	4f 92       	push	r4
   14298:	6f 92       	push	r6
   1429a:	7f 92       	push	r7
   1429c:	8f 92       	push	r8
   1429e:	af 92       	push	r10
   142a0:	bf 92       	push	r11
   142a2:	cf 92       	push	r12
   142a4:	df 92       	push	r13
   142a6:	ef 92       	push	r14
   142a8:	0f 93       	push	r16
   142aa:	1f 93       	push	r17
   142ac:	cf 93       	push	r28
   142ae:	df 93       	push	r29
   142b0:	cd b7       	in	r28, 0x3d	; 61
   142b2:	de b7       	in	r29, 0x3e	; 62
   142b4:	2b 97       	sbiw	r28, 0x0b	; 11
   142b6:	0f b6       	in	r0, 0x3f	; 63
   142b8:	f8 94       	cli
   142ba:	de bf       	out	0x3e, r29	; 62
   142bc:	0f be       	out	0x3f, r0	; 63
   142be:	cd bf       	out	0x3d, r28	; 61
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
   142c0:	86 e4       	ldi	r24, 0x46	; 70
   142c2:	98 e1       	ldi	r25, 0x18	; 24
   142c4:	1f 92       	push	r1
   142c6:	9f 93       	push	r25
   142c8:	8f 93       	push	r24
   142ca:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   142ce:	0c ee       	ldi	r16, 0xEC	; 236
   142d0:	1d e1       	ldi	r17, 0x1D	; 29
   142d2:	0f 90       	pop	r0
   142d4:	0f 90       	pop	r0
   142d6:	0f 90       	pop	r0
            printf("PRINTER\n");
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
			printf("  END\n");
        }
		printf("END\n");
   142d8:	8d eb       	ldi	r24, 0xBD	; 189
   142da:	95 e1       	ldi	r25, 0x15	; 21
   142dc:	9c 01       	movw	r18, r24
   142de:	40 e0       	ldi	r20, 0x00	; 0
   142e0:	29 83       	std	Y+1, r18	; 0x01
   142e2:	3a 83       	std	Y+2, r19	; 0x02
   142e4:	4b 83       	std	Y+3, r20	; 0x03
		printf("\n");
   142e6:	8b eb       	ldi	r24, 0xBB	; 187
   142e8:	95 e1       	ldi	r25, 0x15	; 21
   142ea:	9c 01       	movw	r18, r24
   142ec:	40 e0       	ldi	r20, 0x00	; 0
   142ee:	2c 83       	std	Y+4, r18	; 0x04
   142f0:	3d 83       	std	Y+5, r19	; 0x05
   142f2:	4e 83       	std	Y+6, r20	; 0x06

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;

            printf("PRINTER\n");
   142f4:	8b ed       	ldi	r24, 0xDB	; 219
   142f6:	95 e1       	ldi	r25, 0x15	; 21
   142f8:	9c 01       	movw	r18, r24
   142fa:	40 e0       	ldi	r20, 0x00	; 0
   142fc:	2f 83       	std	Y+7, r18	; 0x07
   142fe:	38 87       	std	Y+8, r19	; 0x08
   14300:	49 87       	std	Y+9, r20	; 0x09
            printf("  CONFIG\n");
   14302:	81 ed       	ldi	r24, 0xD1	; 209
   14304:	95 e1       	ldi	r25, 0x15	; 21
   14306:	1c 01       	movw	r2, r24
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   14308:	89 ec       	ldi	r24, 0xC9	; 201
   1430a:	95 e1       	ldi	r25, 0x15	; 21
   1430c:	3c 01       	movw	r6, r24
   1430e:	81 2c       	mov	r8, r1
			printf("  END\n");
   14310:	82 ec       	ldi	r24, 0xC2	; 194
   14312:	95 e1       	ldi	r25, 0x15	; 21
   14314:	6c 01       	movw	r12, r24
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   14316:	f8 01       	movw	r30, r16
   14318:	80 81       	ld	r24, Z
   1431a:	88 23       	and	r24, r24
   1431c:	09 f4       	brne	.+2      	; 0x14320 <display_Config+0x8e>
   1431e:	6d c2       	rjmp	.+1242   	; 0x147fa <display_Config+0x568>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   14320:	83 30       	cpi	r24, 0x03	; 3
   14322:	09 f0       	breq	.+2      	; 0x14326 <display_Config+0x94>
   14324:	75 c1       	rjmp	.+746    	; 0x14610 <display_Config+0x37e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   14326:	27 a1       	ldd	r18, Z+39	; 0x27
   14328:	30 a5       	ldd	r19, Z+40	; 0x28
   1432a:	3b 87       	std	Y+11, r19	; 0x0b
   1432c:	2a 87       	std	Y+10, r18	; 0x0a

            printf("SS80 %s\n", Devices[i].model);
   1432e:	c8 01       	movw	r24, r16
   14330:	07 96       	adiw	r24, 0x07	; 7
   14332:	9f 93       	push	r25
   14334:	8f 93       	push	r24
   14336:	8d e3       	ldi	r24, 0x3D	; 61
   14338:	98 e1       	ldi	r25, 0x18	; 24
   1433a:	1f 92       	push	r1
   1433c:	9f 93       	push	r25
   1433e:	8f 93       	push	r24
   14340:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) SS80p->HEADER.ADDRESS);
   14344:	ea 85       	ldd	r30, Y+10	; 0x0a
   14346:	fb 85       	ldd	r31, Y+11	; 0x0b
   14348:	80 81       	ld	r24, Z
   1434a:	1f 92       	push	r1
   1434c:	8f 93       	push	r24
   1434e:	8e e1       	ldi	r24, 0x1E	; 30
   14350:	98 e1       	ldi	r25, 0x18	; 24
   14352:	1f 92       	push	r1
   14354:	9f 93       	push	r25
   14356:	8f 93       	push	r24
   14358:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            printf("  CONFIG\n");
   1435c:	84 e1       	ldi	r24, 0x14	; 20
   1435e:	98 e1       	ldi	r25, 0x18	; 24
   14360:	1f 92       	push	r1
   14362:	9f 93       	push	r25
   14364:	8f 93       	push	r24
   14366:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
                print_var("ADDRESS", (uint32_t) SS80p->HEADER.ADDRESS);
   1436a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1436c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1436e:	20 81       	ld	r18, Z
   14370:	30 e0       	ldi	r19, 0x00	; 0
   14372:	40 e0       	ldi	r20, 0x00	; 0
   14374:	50 e0       	ldi	r21, 0x00	; 0
   14376:	6c e0       	ldi	r22, 0x0C	; 12
   14378:	78 e1       	ldi	r23, 0x18	; 24
   1437a:	80 e0       	ldi	r24, 0x00	; 0
   1437c:	f7 dd       	rcall	.-1042   	; 0x13f6c <print_var_P>
                print_var("PPR", (uint32_t) SS80p->HEADER.PPR);
   1437e:	ea 85       	ldd	r30, Y+10	; 0x0a
   14380:	fb 85       	ldd	r31, Y+11	; 0x0b
   14382:	21 81       	ldd	r18, Z+1	; 0x01
   14384:	30 e0       	ldi	r19, 0x00	; 0
   14386:	40 e0       	ldi	r20, 0x00	; 0
   14388:	50 e0       	ldi	r21, 0x00	; 0
   1438a:	68 e0       	ldi	r22, 0x08	; 8
   1438c:	78 e1       	ldi	r23, 0x18	; 24
   1438e:	80 e0       	ldi	r24, 0x00	; 0
   14390:	ed dd       	rcall	.-1062   	; 0x13f6c <print_var_P>
                print_str("FILE", SS80p->HEADER.NAME);
   14392:	4a 85       	ldd	r20, Y+10	; 0x0a
   14394:	5b 85       	ldd	r21, Y+11	; 0x0b
   14396:	4e 5f       	subi	r20, 0xFE	; 254
   14398:	5f 4f       	sbci	r21, 0xFF	; 255
   1439a:	63 e0       	ldi	r22, 0x03	; 3
   1439c:	78 e1       	ldi	r23, 0x18	; 24
   1439e:	80 e0       	ldi	r24, 0x00	; 0
   143a0:	36 de       	rcall	.-916    	; 0x1400e <print_str_P>
			printf("  END\n");
   143a2:	8c ef       	ldi	r24, 0xFC	; 252
   143a4:	97 e1       	ldi	r25, 0x17	; 23
   143a6:	1f 92       	push	r1
   143a8:	9f 93       	push	r25
   143aa:	8f 93       	push	r24
   143ac:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            printf("  HEADER\n");
   143b0:	82 ef       	ldi	r24, 0xF2	; 242
   143b2:	97 e1       	ldi	r25, 0x17	; 23
   143b4:	1f 92       	push	r1
   143b6:	9f 93       	push	r25
   143b8:	8f 93       	push	r24
   143ba:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
                print_var("ID", (uint32_t) SS80p->CONFIG.ID);
   143be:	ea 85       	ldd	r30, Y+10	; 0x0a
   143c0:	fb 85       	ldd	r31, Y+11	; 0x0b
   143c2:	23 a1       	ldd	r18, Z+35	; 0x23
   143c4:	34 a1       	ldd	r19, Z+36	; 0x24
   143c6:	40 e0       	ldi	r20, 0x00	; 0
   143c8:	50 e0       	ldi	r21, 0x00	; 0
   143ca:	6f ee       	ldi	r22, 0xEF	; 239
   143cc:	77 e1       	ldi	r23, 0x17	; 23
   143ce:	80 e0       	ldi	r24, 0x00	; 0
   143d0:	cd dd       	rcall	.-1126   	; 0x13f6c <print_var_P>
			printf("  END\n");
   143d2:	88 ee       	ldi	r24, 0xE8	; 232
   143d4:	97 e1       	ldi	r25, 0x17	; 23
   143d6:	1f 92       	push	r1
   143d8:	9f 93       	push	r25
   143da:	8f 93       	push	r24
   143dc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            printf("  CONTROLLER\n");
   143e0:	8a ed       	ldi	r24, 0xDA	; 218
   143e2:	97 e1       	ldi	r25, 0x17	; 23
   143e4:	1f 92       	push	r1
   143e6:	9f 93       	push	r25
   143e8:	8f 93       	push	r24
   143ea:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
                print_var("UNITS_INSTALLED", (uint32_t) SS80p->CONTROLLER.UNITS_INSTALLED);
   143ee:	ea 85       	ldd	r30, Y+10	; 0x0a
   143f0:	fb 85       	ldd	r31, Y+11	; 0x0b
   143f2:	25 a1       	ldd	r18, Z+37	; 0x25
   143f4:	36 a1       	ldd	r19, Z+38	; 0x26
   143f6:	40 e0       	ldi	r20, 0x00	; 0
   143f8:	50 e0       	ldi	r21, 0x00	; 0
   143fa:	6a ec       	ldi	r22, 0xCA	; 202
   143fc:	77 e1       	ldi	r23, 0x17	; 23
   143fe:	80 e0       	ldi	r24, 0x00	; 0
   14400:	b5 dd       	rcall	.-1174   	; 0x13f6c <print_var_P>
                print_var("TRANSFER_RATE", (uint32_t)  SS80p->CONTROLLER.TRANSFER_RATE);
   14402:	ea 85       	ldd	r30, Y+10	; 0x0a
   14404:	fb 85       	ldd	r31, Y+11	; 0x0b
   14406:	27 a1       	ldd	r18, Z+39	; 0x27
   14408:	30 a5       	ldd	r19, Z+40	; 0x28
   1440a:	40 e0       	ldi	r20, 0x00	; 0
   1440c:	50 e0       	ldi	r21, 0x00	; 0
   1440e:	6c eb       	ldi	r22, 0xBC	; 188
   14410:	77 e1       	ldi	r23, 0x17	; 23
   14412:	80 e0       	ldi	r24, 0x00	; 0
   14414:	ab dd       	rcall	.-1194   	; 0x13f6c <print_var_P>
                print_var("TYPE", (uint32_t)  SS80p->CONTROLLER.TYPE);
   14416:	ea 85       	ldd	r30, Y+10	; 0x0a
   14418:	fb 85       	ldd	r31, Y+11	; 0x0b
   1441a:	21 a5       	ldd	r18, Z+41	; 0x29
   1441c:	30 e0       	ldi	r19, 0x00	; 0
   1441e:	40 e0       	ldi	r20, 0x00	; 0
   14420:	50 e0       	ldi	r21, 0x00	; 0
   14422:	67 eb       	ldi	r22, 0xB7	; 183
   14424:	77 e1       	ldi	r23, 0x17	; 23
   14426:	80 e0       	ldi	r24, 0x00	; 0
   14428:	a1 dd       	rcall	.-1214   	; 0x13f6c <print_var_P>
			printf("  END\n");
   1442a:	80 eb       	ldi	r24, 0xB0	; 176
   1442c:	97 e1       	ldi	r25, 0x17	; 23
   1442e:	1f 92       	push	r1
   14430:	9f 93       	push	r25
   14432:	8f 93       	push	r24
   14434:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            printf("  UNIT\n");
   14438:	88 ea       	ldi	r24, 0xA8	; 168
   1443a:	97 e1       	ldi	r25, 0x17	; 23
   1443c:	1f 92       	push	r1
   1443e:	9f 93       	push	r25
   14440:	8f 93       	push	r24
   14442:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
                print_var("UNIT_TYPE", (uint32_t)SS80p->UNIT.UNIT_TYPE);
   14446:	ea 85       	ldd	r30, Y+10	; 0x0a
   14448:	fb 85       	ldd	r31, Y+11	; 0x0b
   1444a:	22 a5       	ldd	r18, Z+42	; 0x2a
   1444c:	30 e0       	ldi	r19, 0x00	; 0
   1444e:	40 e0       	ldi	r20, 0x00	; 0
   14450:	50 e0       	ldi	r21, 0x00	; 0
   14452:	6e e9       	ldi	r22, 0x9E	; 158
   14454:	77 e1       	ldi	r23, 0x17	; 23
   14456:	80 e0       	ldi	r24, 0x00	; 0
   14458:	89 dd       	rcall	.-1262   	; 0x13f6c <print_var_P>
                print_var("DEVICE_NUMBER", (uint32_t)SS80p->UNIT.DEVICE_NUMBER);
   1445a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1445c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1445e:	23 a5       	ldd	r18, Z+43	; 0x2b
   14460:	34 a5       	ldd	r19, Z+44	; 0x2c
   14462:	45 a5       	ldd	r20, Z+45	; 0x2d
   14464:	56 a5       	ldd	r21, Z+46	; 0x2e
   14466:	60 e9       	ldi	r22, 0x90	; 144
   14468:	77 e1       	ldi	r23, 0x17	; 23
   1446a:	80 e0       	ldi	r24, 0x00	; 0
                print_var("BYTES_PER_BLOCK", (uint32_t)SS80p->UNIT.BYTES_PER_BLOCK);
   1446c:	7f dd       	rcall	.-1282   	; 0x13f6c <print_var_P>
   1446e:	ea 85       	ldd	r30, Y+10	; 0x0a
   14470:	fb 85       	ldd	r31, Y+11	; 0x0b
   14472:	27 a5       	ldd	r18, Z+47	; 0x2f
   14474:	30 a9       	ldd	r19, Z+48	; 0x30
   14476:	40 e0       	ldi	r20, 0x00	; 0
   14478:	50 e0       	ldi	r21, 0x00	; 0
   1447a:	60 e8       	ldi	r22, 0x80	; 128
   1447c:	77 e1       	ldi	r23, 0x17	; 23
                print_var("BUFFERED_BLOCKS", (uint32_t)SS80p->UNIT.BUFFERED_BLOCKS);
   1447e:	80 e0       	ldi	r24, 0x00	; 0
   14480:	75 dd       	rcall	.-1302   	; 0x13f6c <print_var_P>
   14482:	ea 85       	ldd	r30, Y+10	; 0x0a
   14484:	fb 85       	ldd	r31, Y+11	; 0x0b
   14486:	21 a9       	ldd	r18, Z+49	; 0x31
   14488:	30 e0       	ldi	r19, 0x00	; 0
   1448a:	40 e0       	ldi	r20, 0x00	; 0
   1448c:	50 e0       	ldi	r21, 0x00	; 0
   1448e:	60 e7       	ldi	r22, 0x70	; 112
   14490:	77 e1       	ldi	r23, 0x17	; 23
                print_var("BURST_SIZE", (uint32_t)SS80p->UNIT.BURST_SIZE);
   14492:	80 e0       	ldi	r24, 0x00	; 0
   14494:	6b dd       	rcall	.-1322   	; 0x13f6c <print_var_P>
   14496:	ea 85       	ldd	r30, Y+10	; 0x0a
   14498:	fb 85       	ldd	r31, Y+11	; 0x0b
   1449a:	22 a9       	ldd	r18, Z+50	; 0x32
   1449c:	30 e0       	ldi	r19, 0x00	; 0
   1449e:	40 e0       	ldi	r20, 0x00	; 0
   144a0:	50 e0       	ldi	r21, 0x00	; 0
   144a2:	65 e6       	ldi	r22, 0x65	; 101
   144a4:	77 e1       	ldi	r23, 0x17	; 23
                print_var("BLOCK_TIME", (uint32_t)SS80p->UNIT.BLOCK_TIME);
   144a6:	80 e0       	ldi	r24, 0x00	; 0
   144a8:	61 dd       	rcall	.-1342   	; 0x13f6c <print_var_P>
   144aa:	ea 85       	ldd	r30, Y+10	; 0x0a
   144ac:	fb 85       	ldd	r31, Y+11	; 0x0b
   144ae:	23 a9       	ldd	r18, Z+51	; 0x33
   144b0:	34 a9       	ldd	r19, Z+52	; 0x34
   144b2:	40 e0       	ldi	r20, 0x00	; 0
   144b4:	50 e0       	ldi	r21, 0x00	; 0
   144b6:	6a e5       	ldi	r22, 0x5A	; 90
   144b8:	77 e1       	ldi	r23, 0x17	; 23
                print_var("CONTINOUS_TRANSFER_RATE", (uint32_t)SS80p->UNIT.CONTINOUS_TRANSFER_RATE);
   144ba:	80 e0       	ldi	r24, 0x00	; 0
   144bc:	57 dd       	rcall	.-1362   	; 0x13f6c <print_var_P>
   144be:	ea 85       	ldd	r30, Y+10	; 0x0a
   144c0:	fb 85       	ldd	r31, Y+11	; 0x0b
   144c2:	25 a9       	ldd	r18, Z+53	; 0x35
   144c4:	36 a9       	ldd	r19, Z+54	; 0x36
   144c6:	40 e0       	ldi	r20, 0x00	; 0
   144c8:	50 e0       	ldi	r21, 0x00	; 0
   144ca:	62 e4       	ldi	r22, 0x42	; 66
   144cc:	77 e1       	ldi	r23, 0x17	; 23
                print_var("OPTIMAL_RETRY_TIME", (uint32_t)SS80p->UNIT.OPTIMAL_RETRY_TIME);
   144ce:	80 e0       	ldi	r24, 0x00	; 0
   144d0:	4d dd       	rcall	.-1382   	; 0x13f6c <print_var_P>
   144d2:	ea 85       	ldd	r30, Y+10	; 0x0a
   144d4:	fb 85       	ldd	r31, Y+11	; 0x0b
   144d6:	27 a9       	ldd	r18, Z+55	; 0x37
   144d8:	30 ad       	ldd	r19, Z+56	; 0x38
   144da:	40 e0       	ldi	r20, 0x00	; 0
   144dc:	50 e0       	ldi	r21, 0x00	; 0
   144de:	6f e2       	ldi	r22, 0x2F	; 47
   144e0:	77 e1       	ldi	r23, 0x17	; 23
                print_var("ACCESS_TIME", (uint32_t)SS80p->UNIT.ACCESS_TIME);
   144e2:	80 e0       	ldi	r24, 0x00	; 0
   144e4:	43 dd       	rcall	.-1402   	; 0x13f6c <print_var_P>
   144e6:	ea 85       	ldd	r30, Y+10	; 0x0a
   144e8:	fb 85       	ldd	r31, Y+11	; 0x0b
   144ea:	21 ad       	ldd	r18, Z+57	; 0x39
   144ec:	32 ad       	ldd	r19, Z+58	; 0x3a
   144ee:	40 e0       	ldi	r20, 0x00	; 0
   144f0:	50 e0       	ldi	r21, 0x00	; 0
   144f2:	63 e2       	ldi	r22, 0x23	; 35
   144f4:	77 e1       	ldi	r23, 0x17	; 23
                print_var("MAXIMUM_INTERLEAVE", (uint32_t)SS80p->UNIT.MAXIMUM_INTERLEAVE);
   144f6:	80 e0       	ldi	r24, 0x00	; 0
   144f8:	39 dd       	rcall	.-1422   	; 0x13f6c <print_var_P>
   144fa:	ea 85       	ldd	r30, Y+10	; 0x0a
   144fc:	fb 85       	ldd	r31, Y+11	; 0x0b
   144fe:	23 ad       	ldd	r18, Z+59	; 0x3b
   14500:	30 e0       	ldi	r19, 0x00	; 0
   14502:	40 e0       	ldi	r20, 0x00	; 0
   14504:	50 e0       	ldi	r21, 0x00	; 0
   14506:	60 e1       	ldi	r22, 0x10	; 16
   14508:	77 e1       	ldi	r23, 0x17	; 23
                print_var("FIXED_VOLUMES", (uint32_t)SS80p->UNIT.FIXED_VOLUMES);
   1450a:	80 e0       	ldi	r24, 0x00	; 0
   1450c:	2f dd       	rcall	.-1442   	; 0x13f6c <print_var_P>
   1450e:	ea 85       	ldd	r30, Y+10	; 0x0a
   14510:	fb 85       	ldd	r31, Y+11	; 0x0b
   14512:	24 ad       	ldd	r18, Z+60	; 0x3c
   14514:	30 e0       	ldi	r19, 0x00	; 0
   14516:	40 e0       	ldi	r20, 0x00	; 0
   14518:	50 e0       	ldi	r21, 0x00	; 0
   1451a:	62 e0       	ldi	r22, 0x02	; 2
   1451c:	77 e1       	ldi	r23, 0x17	; 23
                print_var("REMOVABLE_VOLUMES", (uint32_t)SS80p->UNIT.REMOVABLE_VOLUMES);
   1451e:	80 e0       	ldi	r24, 0x00	; 0
   14520:	25 dd       	rcall	.-1462   	; 0x13f6c <print_var_P>
   14522:	ea 85       	ldd	r30, Y+10	; 0x0a
   14524:	fb 85       	ldd	r31, Y+11	; 0x0b
   14526:	25 ad       	ldd	r18, Z+61	; 0x3d
   14528:	30 e0       	ldi	r19, 0x00	; 0
   1452a:	40 e0       	ldi	r20, 0x00	; 0
   1452c:	50 e0       	ldi	r21, 0x00	; 0
   1452e:	60 ef       	ldi	r22, 0xF0	; 240
   14530:	76 e1       	ldi	r23, 0x16	; 22
   14532:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   14534:	1b dd       	rcall	.-1482   	; 0x13f6c <print_var_P>
   14536:	89 ee       	ldi	r24, 0xE9	; 233
   14538:	96 e1       	ldi	r25, 0x16	; 22
   1453a:	1f 92       	push	r1
   1453c:	9f 93       	push	r25
   1453e:	8f 93       	push	r24
   14540:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            printf("  VOLUME\n");
   14544:	0f b6       	in	r0, 0x3f	; 63
   14546:	f8 94       	cli
   14548:	de bf       	out	0x3e, r29	; 62
   1454a:	0f be       	out	0x3f, r0	; 63
   1454c:	cd bf       	out	0x3d, r28	; 61
   1454e:	8f ed       	ldi	r24, 0xDF	; 223
   14550:	96 e1       	ldi	r25, 0x16	; 22
   14552:	1f 92       	push	r1
   14554:	9f 93       	push	r25
   14556:	8f 93       	push	r24
                print_var("MAX_CYLINDER", (uint32_t)SS80p->VOLUME.MAX_CYLINDER);
   14558:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1455c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1455e:	fb 85       	ldd	r31, Y+11	; 0x0b
   14560:	fe 96       	adiw	r30, 0x3e	; 62
   14562:	20 81       	ld	r18, Z
   14564:	31 81       	ldd	r19, Z+1	; 0x01
   14566:	42 81       	ldd	r20, Z+2	; 0x02
   14568:	53 81       	ldd	r21, Z+3	; 0x03
   1456a:	62 ed       	ldi	r22, 0xD2	; 210
   1456c:	76 e1       	ldi	r23, 0x16	; 22
                print_var("MAX_HEAD", (uint32_t)SS80p->VOLUME.MAX_HEAD);
   1456e:	80 e0       	ldi	r24, 0x00	; 0
   14570:	fd dc       	rcall	.-1542   	; 0x13f6c <print_var_P>
   14572:	ea 85       	ldd	r30, Y+10	; 0x0a
   14574:	fb 85       	ldd	r31, Y+11	; 0x0b
   14576:	ee 5b       	subi	r30, 0xBE	; 190
   14578:	ff 4f       	sbci	r31, 0xFF	; 255
   1457a:	20 81       	ld	r18, Z
   1457c:	30 e0       	ldi	r19, 0x00	; 0
   1457e:	40 e0       	ldi	r20, 0x00	; 0
   14580:	50 e0       	ldi	r21, 0x00	; 0
   14582:	69 ec       	ldi	r22, 0xC9	; 201
   14584:	76 e1       	ldi	r23, 0x16	; 22
                print_var("MAX_SECTOR", (uint32_t)SS80p->VOLUME.MAX_SECTOR);
   14586:	80 e0       	ldi	r24, 0x00	; 0
   14588:	f1 dc       	rcall	.-1566   	; 0x13f6c <print_var_P>
   1458a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1458c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1458e:	ed 5b       	subi	r30, 0xBD	; 189
   14590:	ff 4f       	sbci	r31, 0xFF	; 255
   14592:	20 81       	ld	r18, Z
   14594:	31 81       	ldd	r19, Z+1	; 0x01
   14596:	40 e0       	ldi	r20, 0x00	; 0
   14598:	50 e0       	ldi	r21, 0x00	; 0
   1459a:	6e eb       	ldi	r22, 0xBE	; 190
   1459c:	76 e1       	ldi	r23, 0x16	; 22
                print_var("MAX_BLOCK_NUMBER", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER);
   1459e:	80 e0       	ldi	r24, 0x00	; 0
   145a0:	e5 dc       	rcall	.-1590   	; 0x13f6c <print_var_P>
   145a2:	aa 84       	ldd	r10, Y+10	; 0x0a
   145a4:	bb 84       	ldd	r11, Y+11	; 0x0b
   145a6:	35 e4       	ldi	r19, 0x45	; 69
   145a8:	a3 0e       	add	r10, r19
   145aa:	b1 1c       	adc	r11, r1
   145ac:	f5 01       	movw	r30, r10
   145ae:	20 81       	ld	r18, Z
   145b0:	31 81       	ldd	r19, Z+1	; 0x01
   145b2:	42 81       	ldd	r20, Z+2	; 0x02
   145b4:	53 81       	ldd	r21, Z+3	; 0x03
   145b6:	6d ea       	ldi	r22, 0xAD	; 173
   145b8:	76 e1       	ldi	r23, 0x16	; 22
                print_var("INTERLEAVE", (uint32_t)SS80p->VOLUME.INTERLEAVE);
   145ba:	80 e0       	ldi	r24, 0x00	; 0
   145bc:	d7 dc       	rcall	.-1618   	; 0x13f6c <print_var_P>
   145be:	2a 85       	ldd	r18, Y+10	; 0x0a
   145c0:	3b 85       	ldd	r19, Y+11	; 0x0b
   145c2:	27 5b       	subi	r18, 0xB7	; 183
   145c4:	3f 4f       	sbci	r19, 0xFF	; 255
   145c6:	f9 01       	movw	r30, r18
   145c8:	20 81       	ld	r18, Z
   145ca:	30 e0       	ldi	r19, 0x00	; 0
   145cc:	40 e0       	ldi	r20, 0x00	; 0
   145ce:	50 e0       	ldi	r21, 0x00	; 0
   145d0:	62 ea       	ldi	r22, 0xA2	; 162
   145d2:	76 e1       	ldi	r23, 0x16	; 22
                print_var("# BLOCKS", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER+1);
   145d4:	80 e0       	ldi	r24, 0x00	; 0
   145d6:	ca dc       	rcall	.-1644   	; 0x13f6c <print_var_P>
   145d8:	f5 01       	movw	r30, r10
   145da:	80 81       	ld	r24, Z
   145dc:	91 81       	ldd	r25, Z+1	; 0x01
   145de:	a2 81       	ldd	r26, Z+2	; 0x02
   145e0:	b3 81       	ldd	r27, Z+3	; 0x03
   145e2:	9c 01       	movw	r18, r24
   145e4:	ad 01       	movw	r20, r26
   145e6:	2f 5f       	subi	r18, 0xFF	; 255
   145e8:	3f 4f       	sbci	r19, 0xFF	; 255
   145ea:	4f 4f       	sbci	r20, 0xFF	; 255
   145ec:	5f 4f       	sbci	r21, 0xFF	; 255
   145ee:	69 e9       	ldi	r22, 0x99	; 153
   145f0:	76 e1       	ldi	r23, 0x16	; 22
   145f2:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   145f4:	bb dc       	rcall	.-1674   	; 0x13f6c <print_var_P>
   145f6:	82 e9       	ldi	r24, 0x92	; 146
   145f8:	96 e1       	ldi	r25, 0x16	; 22
   145fa:	1f 92       	push	r1
   145fc:	9f 93       	push	r25
   145fe:	8f 93       	push	r24
   14600:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   14604:	0f 90       	pop	r0
   14606:	0f 90       	pop	r0
   14608:	0f 90       	pop	r0
   1460a:	0f 90       	pop	r0
   1460c:	0f 90       	pop	r0
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   1460e:	0f 90       	pop	r0
   14610:	f8 01       	movw	r30, r16
   14612:	80 81       	ld	r24, Z
   14614:	81 30       	cpi	r24, 0x01	; 1
   14616:	09 f0       	breq	.+2      	; 0x1461a <display_Config+0x388>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   14618:	b5 c0       	rjmp	.+362    	; 0x14784 <display_Config+0x4f2>
   1461a:	27 a1       	ldd	r18, Z+39	; 0x27
   1461c:	30 a5       	ldd	r19, Z+40	; 0x28
   1461e:	3b 87       	std	Y+11, r19	; 0x0b

            printf("AMIGO %s\n", Devices[i].model);
   14620:	2a 87       	std	Y+10, r18	; 0x0a
   14622:	c8 01       	movw	r24, r16
   14624:	07 96       	adiw	r24, 0x07	; 7
   14626:	9f 93       	push	r25
   14628:	8f 93       	push	r24
   1462a:	e8 e8       	ldi	r30, 0x88	; 136
   1462c:	f6 e1       	ldi	r31, 0x16	; 22
   1462e:	cf 01       	movw	r24, r30
   14630:	1f 92       	push	r1
   14632:	9f 93       	push	r25
   14634:	ef 93       	push	r30
   14636:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) AMIGOp->HEADER.ADDRESS);
   1463a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1463c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1463e:	80 81       	ld	r24, Z
   14640:	1f 92       	push	r1
   14642:	8f 93       	push	r24
   14644:	89 e6       	ldi	r24, 0x69	; 105
   14646:	96 e1       	ldi	r25, 0x16	; 22
   14648:	1f 92       	push	r1
   1464a:	9f 93       	push	r25
   1464c:	8f 93       	push	r24
            printf("  HEADER\n");
   1464e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   14652:	8f e5       	ldi	r24, 0x5F	; 95
   14654:	96 e1       	ldi	r25, 0x16	; 22
   14656:	1f 92       	push	r1
   14658:	9f 93       	push	r25
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   1465a:	8f 93       	push	r24
   1465c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   14660:	ea 85       	ldd	r30, Y+10	; 0x0a
   14662:	fb 85       	ldd	r31, Y+11	; 0x0b
   14664:	20 81       	ld	r18, Z
   14666:	30 e0       	ldi	r19, 0x00	; 0
   14668:	40 e0       	ldi	r20, 0x00	; 0
   1466a:	50 e0       	ldi	r21, 0x00	; 0
   1466c:	67 e5       	ldi	r22, 0x57	; 87
                print_var("PPR", (uint32_t) AMIGOp->HEADER.PPR);
   1466e:	76 e1       	ldi	r23, 0x16	; 22
   14670:	80 e0       	ldi	r24, 0x00	; 0
   14672:	7c dc       	rcall	.-1800   	; 0x13f6c <print_var_P>
   14674:	ea 85       	ldd	r30, Y+10	; 0x0a
   14676:	fb 85       	ldd	r31, Y+11	; 0x0b
   14678:	21 81       	ldd	r18, Z+1	; 0x01
   1467a:	30 e0       	ldi	r19, 0x00	; 0
   1467c:	40 e0       	ldi	r20, 0x00	; 0
   1467e:	50 e0       	ldi	r21, 0x00	; 0
   14680:	63 e5       	ldi	r22, 0x53	; 83
   14682:	76 e1       	ldi	r23, 0x16	; 22
                print_str("FILE", AMIGOp->HEADER.NAME);
   14684:	80 e0       	ldi	r24, 0x00	; 0
   14686:	72 dc       	rcall	.-1820   	; 0x13f6c <print_var_P>
   14688:	4a 85       	ldd	r20, Y+10	; 0x0a
   1468a:	5b 85       	ldd	r21, Y+11	; 0x0b
   1468c:	4e 5f       	subi	r20, 0xFE	; 254
   1468e:	5f 4f       	sbci	r21, 0xFF	; 255
   14690:	6e e4       	ldi	r22, 0x4E	; 78
   14692:	76 e1       	ldi	r23, 0x16	; 22
			printf("  END\n");
   14694:	80 e0       	ldi	r24, 0x00	; 0
   14696:	bb dc       	rcall	.-1674   	; 0x1400e <print_str_P>
   14698:	87 e4       	ldi	r24, 0x47	; 71
   1469a:	96 e1       	ldi	r25, 0x16	; 22
   1469c:	1f 92       	push	r1
   1469e:	9f 93       	push	r25
   146a0:	8f 93       	push	r24
            printf("  CONFIG\n");
   146a2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   146a6:	8d e3       	ldi	r24, 0x3D	; 61
   146a8:	96 e1       	ldi	r25, 0x16	; 22
   146aa:	1f 92       	push	r1
   146ac:	9f 93       	push	r25
   146ae:	8f 93       	push	r24
                print_var("ID", (uint32_t) AMIGOp->CONFIG.ID);
   146b0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   146b4:	ea 85       	ldd	r30, Y+10	; 0x0a
   146b6:	fb 85       	ldd	r31, Y+11	; 0x0b
   146b8:	23 a1       	ldd	r18, Z+35	; 0x23
   146ba:	34 a1       	ldd	r19, Z+36	; 0x24
   146bc:	40 e0       	ldi	r20, 0x00	; 0
   146be:	50 e0       	ldi	r21, 0x00	; 0
   146c0:	6a e3       	ldi	r22, 0x3A	; 58
   146c2:	76 e1       	ldi	r23, 0x16	; 22
			printf("  END\n");
   146c4:	80 e0       	ldi	r24, 0x00	; 0
   146c6:	52 dc       	rcall	.-1884   	; 0x13f6c <print_var_P>
   146c8:	83 e3       	ldi	r24, 0x33	; 51
   146ca:	96 e1       	ldi	r25, 0x16	; 22
   146cc:	1f 92       	push	r1
   146ce:	9f 93       	push	r25
   146d0:	8f 93       	push	r24
            printf("  GEOMETRY\n");
   146d2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   146d6:	87 e2       	ldi	r24, 0x27	; 39
   146d8:	96 e1       	ldi	r25, 0x16	; 22
   146da:	1f 92       	push	r1
   146dc:	9f 93       	push	r25
                print_var("BYTES_PER_SECTOR", (uint32_t) AMIGOp->GEOMETRY.BYTES_PER_SECTOR);
   146de:	8f 93       	push	r24
   146e0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   146e4:	ea 85       	ldd	r30, Y+10	; 0x0a
   146e6:	fb 85       	ldd	r31, Y+11	; 0x0b
   146e8:	25 a1       	ldd	r18, Z+37	; 0x25
   146ea:	36 a1       	ldd	r19, Z+38	; 0x26
   146ec:	03 2e       	mov	r0, r19
   146ee:	00 0c       	add	r0, r0
   146f0:	44 0b       	sbc	r20, r20
   146f2:	55 0b       	sbc	r21, r21
   146f4:	66 e1       	ldi	r22, 0x16	; 22
                print_var("SECTORS_PER_TRACK", (uint32_t) AMIGOp->GEOMETRY.SECTORS_PER_TRACK);
   146f6:	76 e1       	ldi	r23, 0x16	; 22
   146f8:	80 e0       	ldi	r24, 0x00	; 0
   146fa:	38 dc       	rcall	.-1936   	; 0x13f6c <print_var_P>
   146fc:	ea 85       	ldd	r30, Y+10	; 0x0a
   146fe:	fb 85       	ldd	r31, Y+11	; 0x0b
   14700:	27 a1       	ldd	r18, Z+39	; 0x27
   14702:	30 a5       	ldd	r19, Z+40	; 0x28
   14704:	03 2e       	mov	r0, r19
   14706:	00 0c       	add	r0, r0
   14708:	44 0b       	sbc	r20, r20
   1470a:	55 0b       	sbc	r21, r21
   1470c:	64 e0       	ldi	r22, 0x04	; 4
                print_var("HEADS", (uint32_t) AMIGOp->GEOMETRY.HEADS);
   1470e:	76 e1       	ldi	r23, 0x16	; 22
   14710:	80 e0       	ldi	r24, 0x00	; 0
   14712:	2c dc       	rcall	.-1960   	; 0x13f6c <print_var_P>
   14714:	ea 85       	ldd	r30, Y+10	; 0x0a
   14716:	fb 85       	ldd	r31, Y+11	; 0x0b
   14718:	21 a5       	ldd	r18, Z+41	; 0x29
   1471a:	32 a5       	ldd	r19, Z+42	; 0x2a
   1471c:	03 2e       	mov	r0, r19
   1471e:	00 0c       	add	r0, r0
   14720:	44 0b       	sbc	r20, r20
   14722:	55 0b       	sbc	r21, r21
   14724:	6e ef       	ldi	r22, 0xFE	; 254
                print_var("CYLINDERS", (uint32_t) AMIGOp->GEOMETRY.CYLINDERS);
   14726:	75 e1       	ldi	r23, 0x15	; 21
   14728:	80 e0       	ldi	r24, 0x00	; 0
   1472a:	20 dc       	rcall	.-1984   	; 0x13f6c <print_var_P>
   1472c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1472e:	fb 85       	ldd	r31, Y+11	; 0x0b
   14730:	23 a5       	ldd	r18, Z+43	; 0x2b
   14732:	34 a5       	ldd	r19, Z+44	; 0x2c
   14734:	03 2e       	mov	r0, r19
   14736:	00 0c       	add	r0, r0
   14738:	44 0b       	sbc	r20, r20
   1473a:	55 0b       	sbc	r21, r21
   1473c:	64 ef       	ldi	r22, 0xF4	; 244
   1473e:	75 e1       	ldi	r23, 0x15	; 21
                print_var("# BLOCKS", (uint32_t)AMIGOp->GEOMETRY.CYLINDERS * AMIGOp->GEOMETRY.SECTORS_PER_TRACK * AMIGOp->GEOMETRY.HEADS );
   14740:	80 e0       	ldi	r24, 0x00	; 0
   14742:	14 dc       	rcall	.-2008   	; 0x13f6c <print_var_P>
   14744:	ea 85       	ldd	r30, Y+10	; 0x0a
   14746:	fb 85       	ldd	r31, Y+11	; 0x0b
   14748:	23 a5       	ldd	r18, Z+43	; 0x2b
   1474a:	34 a5       	ldd	r19, Z+44	; 0x2c
   1474c:	a7 a1       	ldd	r26, Z+39	; 0x27
   1474e:	b0 a5       	ldd	r27, Z+40	; 0x28
   14750:	0e 94 fa e4 	call	0x1c9f4	; 0x1c9f4 <__mulhisi3>
   14754:	9b 01       	movw	r18, r22
   14756:	ac 01       	movw	r20, r24
   14758:	a1 a5       	ldd	r26, Z+41	; 0x29
   1475a:	b2 a5       	ldd	r27, Z+42	; 0x2a
   1475c:	0e 94 1f e5 	call	0x1ca3e	; 0x1ca3e <__mulshisi3>
   14760:	9b 01       	movw	r18, r22
   14762:	ac 01       	movw	r20, r24
   14764:	6b ee       	ldi	r22, 0xEB	; 235
   14766:	75 e1       	ldi	r23, 0x15	; 21
   14768:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   1476a:	00 dc       	rcall	.-2048   	; 0x13f6c <print_var_P>
   1476c:	84 ee       	ldi	r24, 0xE4	; 228
   1476e:	95 e1       	ldi	r25, 0x15	; 21
   14770:	1f 92       	push	r1
   14772:	9f 93       	push	r25
   14774:	8f 93       	push	r24
   14776:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1477a:	0f b6       	in	r0, 0x3f	; 63
   1477c:	f8 94       	cli
   1477e:	de bf       	out	0x3e, r29	; 62
        } 
#endif // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   14780:	0f be       	out	0x3f, r0	; 63
   14782:	cd bf       	out	0x3d, r28	; 61
   14784:	f8 01       	movw	r30, r16
   14786:	80 81       	ld	r24, Z
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
   14788:	84 30       	cpi	r24, 0x04	; 4
   1478a:	19 f5       	brne	.+70     	; 0x147d2 <display_Config+0x540>
   1478c:	27 a1       	ldd	r18, Z+39	; 0x27
   1478e:	30 a5       	ldd	r19, Z+40	; 0x28

            printf("PRINTER\n");
   14790:	3b 87       	std	Y+11, r19	; 0x0b
   14792:	2a 87       	std	Y+10, r18	; 0x0a
   14794:	1f 92       	push	r1
   14796:	38 85       	ldd	r19, Y+8	; 0x08
   14798:	3f 93       	push	r19
   1479a:	4f 81       	ldd	r20, Y+7	; 0x07
   1479c:	4f 93       	push	r20
            printf("  CONFIG\n");
   1479e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   147a2:	1f 92       	push	r1
   147a4:	3f 92       	push	r3
   147a6:	2f 92       	push	r2
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   147a8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   147ac:	ea 85       	ldd	r30, Y+10	; 0x0a
   147ae:	fb 85       	ldd	r31, Y+11	; 0x0b
   147b0:	20 81       	ld	r18, Z
   147b2:	30 e0       	ldi	r19, 0x00	; 0
   147b4:	40 e0       	ldi	r20, 0x00	; 0
   147b6:	50 e0       	ldi	r21, 0x00	; 0
   147b8:	88 2d       	mov	r24, r8
   147ba:	b3 01       	movw	r22, r6
			printf("  END\n");
   147bc:	d7 db       	rcall	.-2130   	; 0x13f6c <print_var_P>
   147be:	1f 92       	push	r1
   147c0:	df 92       	push	r13
   147c2:	cf 92       	push	r12
   147c4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   147c8:	0f b6       	in	r0, 0x3f	; 63
   147ca:	f8 94       	cli
   147cc:	de bf       	out	0x3e, r29	; 62
   147ce:	0f be       	out	0x3f, r0	; 63
        }
		printf("END\n");
   147d0:	cd bf       	out	0x3d, r28	; 61
   147d2:	1f 92       	push	r1
   147d4:	3a 81       	ldd	r19, Y+2	; 0x02
   147d6:	3f 93       	push	r19
   147d8:	49 81       	ldd	r20, Y+1	; 0x01
   147da:	4f 93       	push	r20
   147dc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
		printf("\n");
   147e0:	1f 92       	push	r1
   147e2:	8d 81       	ldd	r24, Y+5	; 0x05
   147e4:	8f 93       	push	r24
   147e6:	9c 81       	ldd	r25, Y+4	; 0x04
   147e8:	9f 93       	push	r25
   147ea:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   147ee:	0f 90       	pop	r0
   147f0:	0f 90       	pop	r0
   147f2:	0f 90       	pop	r0
   147f4:	0f 90       	pop	r0
   147f6:	0f 90       	pop	r0
   147f8:	0f 90       	pop	r0
   147fa:	05 5d       	subi	r16, 0xD5	; 213
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   147fc:	1f 4f       	sbci	r17, 0xFF	; 255
   147fe:	ef e1       	ldi	r30, 0x1F	; 31
   14800:	00 3f       	cpi	r16, 0xF0	; 240
   14802:	1e 07       	cpc	r17, r30
   14804:	09 f0       	breq	.+2      	; 0x14808 <display_Config+0x576>
			printf("  END\n");
        }
		printf("END\n");
		printf("\n");
    }
    printf("END\n");
   14806:	87 cd       	rjmp	.-1266   	; 0x14316 <display_Config+0x84>
   14808:	86 eb       	ldi	r24, 0xB6	; 182
   1480a:	95 e1       	ldi	r25, 0x15	; 21
   1480c:	1f 92       	push	r1
   1480e:	9f 93       	push	r25
   14810:	8f 93       	push	r24
   14812:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("\n");
   14816:	84 eb       	ldi	r24, 0xB4	; 180
   14818:	95 e1       	ldi	r25, 0x15	; 21
   1481a:	1f 92       	push	r1
   1481c:	9f 93       	push	r25
   1481e:	8f 93       	push	r24
   14820:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
}
   14824:	0f 90       	pop	r0
   14826:	0f 90       	pop	r0
   14828:	0f 90       	pop	r0
   1482a:	0f 90       	pop	r0
   1482c:	0f 90       	pop	r0
   1482e:	0f 90       	pop	r0
   14830:	2b 96       	adiw	r28, 0x0b	; 11
   14832:	0f b6       	in	r0, 0x3f	; 63
   14834:	f8 94       	cli
   14836:	de bf       	out	0x3e, r29	; 62
   14838:	0f be       	out	0x3f, r0	; 63
   1483a:	cd bf       	out	0x3d, r28	; 61
   1483c:	df 91       	pop	r29
   1483e:	cf 91       	pop	r28
   14840:	1f 91       	pop	r17
   14842:	0f 91       	pop	r16
   14844:	ef 90       	pop	r14
   14846:	df 90       	pop	r13
   14848:	cf 90       	pop	r12
   1484a:	bf 90       	pop	r11
   1484c:	af 90       	pop	r10
   1484e:	8f 90       	pop	r8
   14850:	7f 90       	pop	r7
   14852:	6f 90       	pop	r6
   14854:	4f 90       	pop	r4
   14856:	3f 90       	pop	r3
   14858:	2f 90       	pop	r2
   1485a:	08 95       	ret

0001485c <format_drives>:

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   1485c:	2f 92       	push	r2
   1485e:	3f 92       	push	r3
   14860:	4f 92       	push	r4
   14862:	5f 92       	push	r5
   14864:	6f 92       	push	r6
   14866:	7f 92       	push	r7
   14868:	8f 92       	push	r8
   1486a:	af 92       	push	r10
   1486c:	bf 92       	push	r11
   1486e:	cf 92       	push	r12
   14870:	df 92       	push	r13
   14872:	ef 92       	push	r14
   14874:	ff 92       	push	r15
   14876:	0f 93       	push	r16
   14878:	1f 93       	push	r17
   1487a:	cf 93       	push	r28
   1487c:	df 93       	push	r29
   1487e:	cd b7       	in	r28, 0x3d	; 61
   14880:	de b7       	in	r29, 0x3e	; 62
   14882:	cd 55       	subi	r28, 0x5D	; 93
   14884:	d1 09       	sbc	r29, r1
   14886:	0f b6       	in	r0, 0x3f	; 63
   14888:	f8 94       	cli
   1488a:	de bf       	out	0x3e, r29	; 62
   1488c:	0f be       	out	0x3f, r0	; 63
   1488e:	cd bf       	out	0x3d, r28	; 61
   14890:	8c ee       	ldi	r24, 0xEC	; 236
   14892:	a8 2e       	mov	r10, r24
   14894:	8d e1       	ldi	r24, 0x1D	; 29
   14896:	b8 2e       	mov	r11, r24
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
    int amigo = 1;
   14898:	21 e0       	ldi	r18, 0x01	; 1
   1489a:	30 e0       	ldi	r19, 0x00	; 0
   1489c:	65 96       	adiw	r28, 0x15	; 21
   1489e:	3f af       	std	Y+63, r19	; 0x3f
   148a0:	2e af       	std	Y+62, r18	; 0x3e
   148a2:	65 97       	sbiw	r28, 0x15	; 21
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
   148a4:	81 e0       	ldi	r24, 0x01	; 1
   148a6:	90 e0       	ldi	r25, 0x00	; 0
   148a8:	63 96       	adiw	r28, 0x13	; 19
   148aa:	9f af       	std	Y+63, r25	; 0x3f
   148ac:	8e af       	std	Y+62, r24	; 0x3e
   148ae:	63 97       	sbiw	r28, 0x13	; 19
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
   148b0:	80 e6       	ldi	r24, 0x60	; 96
   148b2:	95 e1       	ldi	r25, 0x15	; 21
   148b4:	9c 01       	movw	r18, r24
   148b6:	40 e0       	ldi	r20, 0x00	; 0
   148b8:	68 96       	adiw	r28, 0x18	; 24
   148ba:	2d af       	std	Y+61, r18	; 0x3d
   148bc:	3e af       	std	Y+62, r19	; 0x3e
   148be:	4f af       	std	Y+63, r20	; 0x3f
   148c0:	68 97       	sbiw	r28, 0x18	; 24
   148c2:	2e 01       	movw	r4, r28
   148c4:	31 e3       	ldi	r19, 0x31	; 49
   148c6:	43 0e       	add	r4, r19
   148c8:	51 1c       	adc	r5, r1
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   148ca:	88 e6       	ldi	r24, 0x68	; 104
   148cc:	95 e1       	ldi	r25, 0x15	; 21
   148ce:	9c 01       	movw	r18, r24
   148d0:	40 e0       	ldi	r20, 0x00	; 0
   148d2:	6b 96       	adiw	r28, 0x1b	; 27
   148d4:	2d af       	std	Y+61, r18	; 0x3d
   148d6:	3e af       	std	Y+62, r19	; 0x3e
   148d8:	4f af       	std	Y+63, r20	; 0x3f
   148da:	6b 97       	sbiw	r28, 0x1b	; 27
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
   148dc:	8a e8       	ldi	r24, 0x8A	; 138
   148de:	95 e1       	ldi	r25, 0x15	; 21
   148e0:	3c 01       	movw	r6, r24

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   148e2:	82 e9       	ldi	r24, 0x92	; 146
   148e4:	95 e1       	ldi	r25, 0x15	; 21
   148e6:	9c 01       	movw	r18, r24
   148e8:	40 e0       	ldi	r20, 0x00	; 0
   148ea:	6e 96       	adiw	r28, 0x1e	; 30
   148ec:	2d af       	std	Y+61, r18	; 0x3d
   148ee:	3e af       	std	Y+62, r19	; 0x3e
   148f0:	4f af       	std	Y+63, r20	; 0x3f
   148f2:	6e 97       	sbiw	r28, 0x1e	; 30
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   148f4:	f5 01       	movw	r30, r10
   148f6:	80 81       	ld	r24, Z
   148f8:	88 23       	and	r24, r24
   148fa:	09 f4       	brne	.+2      	; 0x148fe <format_drives+0xa2>
   148fc:	a9 c0       	rjmp	.+338    	; 0x14a50 <format_drives+0x1f4>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   148fe:	83 30       	cpi	r24, 0x03	; 3
   14900:	09 f0       	breq	.+2      	; 0x14904 <format_drives+0xa8>
   14902:	4a c0       	rjmp	.+148    	; 0x14998 <format_drives+0x13c>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   14904:	07 a1       	ldd	r16, Z+39	; 0x27
   14906:	10 a5       	ldd	r17, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   14908:	18 01       	movw	r2, r16
   1490a:	f2 e0       	ldi	r31, 0x02	; 2
   1490c:	2f 0e       	add	r2, r31
   1490e:	31 1c       	adc	r3, r1
   14910:	be 01       	movw	r22, r28
   14912:	6f 5f       	subi	r22, 0xFF	; 255
   14914:	7f 4f       	sbci	r23, 0xFF	; 255
   14916:	c1 01       	movw	r24, r2
   14918:	0e 94 a9 79 	call	0xf352	; 0xf352 <stat>
   1491c:	01 96       	adiw	r24, 0x01	; 1
   1491e:	99 f5       	brne	.+102    	; 0x14986 <format_drives+0x12a>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   14920:	f8 01       	movw	r30, r16
   14922:	87 a5       	ldd	r24, Z+47	; 0x2f
   14924:	90 a9       	ldd	r25, Z+48	; 0x30
   14926:	81 15       	cp	r24, r1
   14928:	91 40       	sbci	r25, 0x01	; 1
   1492a:	49 f0       	breq	.+18     	; 0x1493e <format_drives+0xe2>
                {
                    printf("Can not use non 256 byte sectors\n");
   1492c:	1f 92       	push	r1
   1492e:	6d 96       	adiw	r28, 0x1d	; 29
   14930:	2f ad       	ldd	r18, Y+63	; 0x3f
   14932:	6d 97       	sbiw	r28, 0x1d	; 29
   14934:	2f 93       	push	r18
   14936:	6c 96       	adiw	r28, 0x1c	; 28
   14938:	3f ad       	ldd	r19, Y+63	; 0x3f
   1493a:	6c 97       	sbiw	r28, 0x1c	; 28
   1493c:	4f c0       	rjmp	.+158    	; 0x149dc <format_drives+0x180>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   1493e:	f5 01       	movw	r30, r10
   14940:	c3 80       	ldd	r12, Z+3	; 0x03
   14942:	d4 80       	ldd	r13, Z+4	; 0x04
   14944:	e5 80       	ldd	r14, Z+5	; 0x05
   14946:	f6 80       	ldd	r15, Z+6	; 0x06
                sprintf(label,"SS80-%d", ss80);
   14948:	63 96       	adiw	r28, 0x13	; 19
   1494a:	ff ad       	ldd	r31, Y+63	; 0x3f
   1494c:	63 97       	sbiw	r28, 0x13	; 19
   1494e:	ff 93       	push	r31
   14950:	62 96       	adiw	r28, 0x12	; 18
   14952:	2f ad       	ldd	r18, Y+63	; 0x3f
   14954:	62 97       	sbiw	r28, 0x12	; 18
   14956:	2f 93       	push	r18
   14958:	1f 92       	push	r1
   1495a:	7f 92       	push	r7
   1495c:	6f 92       	push	r6
   1495e:	5f 92       	push	r5
   14960:	4f 92       	push	r4
   14962:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
                    label,
                    lif_dir_count(sectors), 
   14966:	c7 01       	movw	r24, r14
   14968:	b6 01       	movw	r22, r12
   1496a:	1c d1       	rcall	.+568    	; 0x14ba4 <lif_dir_count>
   1496c:	9b 01       	movw	r18, r22
   1496e:	ac 01       	movw	r20, r24
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   14970:	87 01       	movw	r16, r14
   14972:	76 01       	movw	r14, r12
   14974:	b2 01       	movw	r22, r4
   14976:	c1 01       	movw	r24, r2
   14978:	0e 94 6c df 	call	0x1bed8	; 0x1bed8 <lif_create_image>
   1497c:	0f b6       	in	r0, 0x3f	; 63
   1497e:	f8 94       	cli
   14980:	de bf       	out	0x3e, r29	; 62
   14982:	0f be       	out	0x3f, r0	; 63
   14984:	cd bf       	out	0x3d, r28	; 61
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif

            }
            ss80++;
   14986:	63 96       	adiw	r28, 0x13	; 19
   14988:	ee ad       	ldd	r30, Y+62	; 0x3e
   1498a:	ff ad       	ldd	r31, Y+63	; 0x3f
   1498c:	63 97       	sbiw	r28, 0x13	; 19
   1498e:	31 96       	adiw	r30, 0x01	; 1
   14990:	63 96       	adiw	r28, 0x13	; 19
   14992:	ff af       	std	Y+63, r31	; 0x3f
   14994:	ee af       	std	Y+62, r30	; 0x3e
   14996:	63 97       	sbiw	r28, 0x13	; 19
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   14998:	f5 01       	movw	r30, r10
   1499a:	80 81       	ld	r24, Z
   1499c:	81 30       	cpi	r24, 0x01	; 1
   1499e:	09 f0       	breq	.+2      	; 0x149a2 <format_drives+0x146>
   149a0:	57 c0       	rjmp	.+174    	; 0x14a50 <format_drives+0x1f4>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   149a2:	07 a1       	ldd	r16, Z+39	; 0x27
   149a4:	10 a5       	ldd	r17, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   149a6:	18 01       	movw	r2, r16
   149a8:	f2 e0       	ldi	r31, 0x02	; 2
   149aa:	2f 0e       	add	r2, r31
   149ac:	31 1c       	adc	r3, r1
   149ae:	be 01       	movw	r22, r28
   149b0:	6f 5f       	subi	r22, 0xFF	; 255
   149b2:	7f 4f       	sbci	r23, 0xFF	; 255
   149b4:	c1 01       	movw	r24, r2
   149b6:	0e 94 a9 79 	call	0xf352	; 0xf352 <stat>
   149ba:	01 96       	adiw	r24, 0x01	; 1
   149bc:	09 f0       	breq	.+2      	; 0x149c0 <format_drives+0x164>
   149be:	3f c0       	rjmp	.+126    	; 0x14a3e <format_drives+0x1e2>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   149c0:	f8 01       	movw	r30, r16
   149c2:	85 a1       	ldd	r24, Z+37	; 0x25
   149c4:	96 a1       	ldd	r25, Z+38	; 0x26
   149c6:	81 15       	cp	r24, r1
   149c8:	91 40       	sbci	r25, 0x01	; 1
   149ca:	79 f0       	breq	.+30     	; 0x149ea <format_drives+0x18e>
                {
                    printf("Can not use non 256 byte sectors\n");
   149cc:	1f 92       	push	r1
   149ce:	6a 96       	adiw	r28, 0x1a	; 26
   149d0:	2f ad       	ldd	r18, Y+63	; 0x3f
   149d2:	6a 97       	sbiw	r28, 0x1a	; 26
   149d4:	2f 93       	push	r18
   149d6:	69 96       	adiw	r28, 0x19	; 25
   149d8:	3f ad       	ldd	r19, Y+63	; 0x3f
   149da:	69 97       	sbiw	r28, 0x19	; 25
   149dc:	3f 93       	push	r19
   149de:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
                    continue;
   149e2:	0f 90       	pop	r0
   149e4:	0f 90       	pop	r0
   149e6:	0f 90       	pop	r0
   149e8:	33 c0       	rjmp	.+102    	; 0x14a50 <format_drives+0x1f4>
                }
                sectors = Devices[i].BLOCKS;
   149ea:	f5 01       	movw	r30, r10
   149ec:	c3 80       	ldd	r12, Z+3	; 0x03
   149ee:	d4 80       	ldd	r13, Z+4	; 0x04
   149f0:	e5 80       	ldd	r14, Z+5	; 0x05
   149f2:	f6 80       	ldd	r15, Z+6	; 0x06
                sprintf(label,"AMIGO%d", amigo);
   149f4:	65 96       	adiw	r28, 0x15	; 21
   149f6:	ff ad       	ldd	r31, Y+63	; 0x3f
   149f8:	65 97       	sbiw	r28, 0x15	; 21
   149fa:	ff 93       	push	r31
   149fc:	64 96       	adiw	r28, 0x14	; 20
   149fe:	2f ad       	ldd	r18, Y+63	; 0x3f
   14a00:	64 97       	sbiw	r28, 0x14	; 20
   14a02:	2f 93       	push	r18
   14a04:	1f 92       	push	r1
   14a06:	67 96       	adiw	r28, 0x17	; 23
   14a08:	3f ad       	ldd	r19, Y+63	; 0x3f
   14a0a:	67 97       	sbiw	r28, 0x17	; 23
   14a0c:	3f 93       	push	r19
   14a0e:	66 96       	adiw	r28, 0x16	; 22
   14a10:	4f ad       	ldd	r20, Y+63	; 0x3f
   14a12:	66 97       	sbiw	r28, 0x16	; 22
   14a14:	4f 93       	push	r20
   14a16:	5f 92       	push	r5
   14a18:	4f 92       	push	r4
   14a1a:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
                    label,
                    lif_dir_count(sectors), 
   14a1e:	c7 01       	movw	r24, r14
   14a20:	b6 01       	movw	r22, r12
   14a22:	c0 d0       	rcall	.+384    	; 0x14ba4 <lif_dir_count>
   14a24:	9b 01       	movw	r18, r22
   14a26:	ac 01       	movw	r20, r24
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   14a28:	87 01       	movw	r16, r14
   14a2a:	76 01       	movw	r14, r12
   14a2c:	b2 01       	movw	r22, r4
   14a2e:	c1 01       	movw	r24, r2
   14a30:	0e 94 6c df 	call	0x1bed8	; 0x1bed8 <lif_create_image>
   14a34:	0f b6       	in	r0, 0x3f	; 63
   14a36:	f8 94       	cli
   14a38:	de bf       	out	0x3e, r29	; 62
   14a3a:	0f be       	out	0x3f, r0	; 63
   14a3c:	cd bf       	out	0x3d, r28	; 61
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
            }
            amigo++;
   14a3e:	65 96       	adiw	r28, 0x15	; 21
   14a40:	ee ad       	ldd	r30, Y+62	; 0x3e
   14a42:	ff ad       	ldd	r31, Y+63	; 0x3f
   14a44:	65 97       	sbiw	r28, 0x15	; 21
   14a46:	31 96       	adiw	r30, 0x01	; 1
   14a48:	65 96       	adiw	r28, 0x15	; 21
   14a4a:	ff af       	std	Y+63, r31	; 0x3f
   14a4c:	ee af       	std	Y+62, r30	; 0x3e
   14a4e:	65 97       	sbiw	r28, 0x15	; 21
   14a50:	fb e2       	ldi	r31, 0x2B	; 43
   14a52:	af 0e       	add	r10, r31
   14a54:	b1 1c       	adc	r11, r1
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   14a56:	20 ef       	ldi	r18, 0xF0	; 240
   14a58:	3f e1       	ldi	r19, 0x1F	; 31
   14a5a:	2a 15       	cp	r18, r10
   14a5c:	3b 05       	cpc	r19, r11
   14a5e:	09 f0       	breq	.+2      	; 0x14a62 <format_drives+0x206>
   14a60:	49 cf       	rjmp	.-366    	; 0x148f4 <format_drives+0x98>
            }
            amigo++;
        } 
#endif // #ifdef AMIGO
    }
    printf("\n");
   14a62:	8e e5       	ldi	r24, 0x5E	; 94
   14a64:	95 e1       	ldi	r25, 0x15	; 21
   14a66:	1f 92       	push	r1
   14a68:	9f 93       	push	r25
   14a6a:	8f 93       	push	r24
   14a6c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
}
   14a70:	0f 90       	pop	r0
   14a72:	0f 90       	pop	r0
   14a74:	0f 90       	pop	r0
   14a76:	c3 5a       	subi	r28, 0xA3	; 163
   14a78:	df 4f       	sbci	r29, 0xFF	; 255
   14a7a:	0f b6       	in	r0, 0x3f	; 63
   14a7c:	f8 94       	cli
   14a7e:	de bf       	out	0x3e, r29	; 62
   14a80:	0f be       	out	0x3f, r0	; 63
   14a82:	cd bf       	out	0x3d, r28	; 61
   14a84:	df 91       	pop	r29
   14a86:	cf 91       	pop	r28
   14a88:	1f 91       	pop	r17
   14a8a:	0f 91       	pop	r16
   14a8c:	ff 90       	pop	r15
   14a8e:	ef 90       	pop	r14
   14a90:	df 90       	pop	r13
   14a92:	cf 90       	pop	r12
   14a94:	bf 90       	pop	r11
   14a96:	af 90       	pop	r10
   14a98:	8f 90       	pop	r8
   14a9a:	7f 90       	pop	r7
   14a9c:	6f 90       	pop	r6
   14a9e:	5f 90       	pop	r5
   14aa0:	4f 90       	pop	r4
   14aa2:	3f 90       	pop	r3
   14aa4:	2f 90       	pop	r2
   14aa6:	08 95       	ret

00014aa8 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1);		// 1
   14aa8:	8f e1       	ldi	r24, 0x1F	; 31
   14aaa:	e0 ef       	ldi	r30, 0xF0	; 240
   14aac:	ff e1       	ldi	r31, 0x1F	; 31
   14aae:	df 01       	movw	r26, r30
   14ab0:	98 2f       	mov	r25, r24
   14ab2:	1d 92       	st	X+, r1
   14ab4:	9a 95       	dec	r25
   14ab6:	e9 f7       	brne	.-6      	; 0x14ab2 <hpdir_init+0xa>
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);	// 2
   14ab8:	9f e3       	ldi	r25, 0x3F	; 63
   14aba:	e0 e1       	ldi	r30, 0x10	; 16
   14abc:	f0 e2       	ldi	r31, 0x20	; 32
   14abe:	df 01       	movw	r26, r30
   14ac0:	1d 92       	st	X+, r1
   14ac2:	9a 95       	dec	r25
   14ac4:	e9 f7       	brne	.-6      	; 0x14ac0 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);		// 3
   14ac6:	e0 e5       	ldi	r30, 0x50	; 80
   14ac8:	f0 e2       	ldi	r31, 0x20	; 32
   14aca:	df 01       	movw	r26, r30
   14acc:	1d 92       	st	X+, r1
   14ace:	8a 95       	dec	r24
   14ad0:	e9 f7       	brne	.-6      	; 0x14acc <hpdir_init+0x24>
    hpdir.ID = 0;						// 4
   14ad2:	10 92 70 20 	sts	0x2070, r1	; 0x802070 <hpdir+0x80>
   14ad6:	10 92 71 20 	sts	0x2071, r1	; 0x802071 <hpdir+0x81>
   14ada:	10 92 72 20 	sts	0x2072, r1	; 0x802072 <hpdir+0x82>
   14ade:	10 92 73 20 	sts	0x2073, r1	; 0x802073 <hpdir+0x83>
	hpdir.mask_stat2 = 0;				// 5
   14ae2:	10 92 74 20 	sts	0x2074, r1	; 0x802074 <hpdir+0x84>
   14ae6:	10 92 75 20 	sts	0x2075, r1	; 0x802075 <hpdir+0x85>
   14aea:	10 92 76 20 	sts	0x2076, r1	; 0x802076 <hpdir+0x86>
   14aee:	10 92 77 20 	sts	0x2077, r1	; 0x802077 <hpdir+0x87>
	hpdir.id_stat2 = 0;					// 6
   14af2:	10 92 78 20 	sts	0x2078, r1	; 0x802078 <hpdir+0x88>
   14af6:	10 92 79 20 	sts	0x2079, r1	; 0x802079 <hpdir+0x89>
   14afa:	10 92 7a 20 	sts	0x207A, r1	; 0x80207a <hpdir+0x8a>
   14afe:	10 92 7b 20 	sts	0x207B, r1	; 0x80207b <hpdir+0x8b>
	hpdir.DEVICE_NUMBER = 0;			// 7
   14b02:	10 92 7c 20 	sts	0x207C, r1	; 0x80207c <hpdir+0x8c>
   14b06:	10 92 7d 20 	sts	0x207D, r1	; 0x80207d <hpdir+0x8d>
   14b0a:	10 92 7e 20 	sts	0x207E, r1	; 0x80207e <hpdir+0x8e>
   14b0e:	10 92 7f 20 	sts	0x207F, r1	; 0x80207f <hpdir+0x8f>
	hpdir.UNITS_INSTALLED = 0x8001;		// 8
   14b12:	81 e0       	ldi	r24, 0x01	; 1
   14b14:	90 e8       	ldi	r25, 0x80	; 128
   14b16:	a0 e0       	ldi	r26, 0x00	; 0
   14b18:	b0 e0       	ldi	r27, 0x00	; 0
   14b1a:	80 93 80 20 	sts	0x2080, r24	; 0x802080 <hpdir+0x90>
   14b1e:	90 93 81 20 	sts	0x2081, r25	; 0x802081 <hpdir+0x91>
   14b22:	a0 93 82 20 	sts	0x2082, r26	; 0x802082 <hpdir+0x92>
   14b26:	b0 93 83 20 	sts	0x2083, r27	; 0x802083 <hpdir+0x93>
	hpdir.CYLINDERS = 0;  				// 9
   14b2a:	10 92 84 20 	sts	0x2084, r1	; 0x802084 <hpdir+0x94>
   14b2e:	10 92 85 20 	sts	0x2085, r1	; 0x802085 <hpdir+0x95>
   14b32:	10 92 86 20 	sts	0x2086, r1	; 0x802086 <hpdir+0x96>
   14b36:	10 92 87 20 	sts	0x2087, r1	; 0x802087 <hpdir+0x97>
	hpdir.HEADS= 0;	     				// 10
   14b3a:	10 92 88 20 	sts	0x2088, r1	; 0x802088 <hpdir+0x98>
   14b3e:	10 92 89 20 	sts	0x2089, r1	; 0x802089 <hpdir+0x99>
   14b42:	10 92 8a 20 	sts	0x208A, r1	; 0x80208a <hpdir+0x9a>
   14b46:	10 92 8b 20 	sts	0x208B, r1	; 0x80208b <hpdir+0x9b>
	hpdir.SECTORS= 0;    				// 11
   14b4a:	10 92 8c 20 	sts	0x208C, r1	; 0x80208c <hpdir+0x9c>
   14b4e:	10 92 8d 20 	sts	0x208D, r1	; 0x80208d <hpdir+0x9d>
   14b52:	10 92 8e 20 	sts	0x208E, r1	; 0x80208e <hpdir+0x9e>
   14b56:	10 92 8f 20 	sts	0x208F, r1	; 0x80208f <hpdir+0x9f>
	hpdir.BYTES_PER_SECTOR = 0;			// 12
   14b5a:	10 92 90 20 	sts	0x2090, r1	; 0x802090 <hpdir+0xa0>
   14b5e:	10 92 91 20 	sts	0x2091, r1	; 0x802091 <hpdir+0xa1>
   14b62:	10 92 92 20 	sts	0x2092, r1	; 0x802092 <hpdir+0xa2>
   14b66:	10 92 93 20 	sts	0x2093, r1	; 0x802093 <hpdir+0xa3>
	hpdir.INTERLEAVE = 0;				// 13
   14b6a:	10 92 94 20 	sts	0x2094, r1	; 0x802094 <hpdir+0xa4>
   14b6e:	10 92 95 20 	sts	0x2095, r1	; 0x802095 <hpdir+0xa5>
   14b72:	10 92 96 20 	sts	0x2096, r1	; 0x802096 <hpdir+0xa6>
   14b76:	10 92 97 20 	sts	0x2097, r1	; 0x802097 <hpdir+0xa7>
    hpdir.FIXED = 1;					// 14 ALWAYS 1
   14b7a:	81 e0       	ldi	r24, 0x01	; 1
   14b7c:	90 e0       	ldi	r25, 0x00	; 0
   14b7e:	a0 e0       	ldi	r26, 0x00	; 0
   14b80:	b0 e0       	ldi	r27, 0x00	; 0
   14b82:	80 93 98 20 	sts	0x2098, r24	; 0x802098 <hpdir+0xa8>
   14b86:	90 93 99 20 	sts	0x2099, r25	; 0x802099 <hpdir+0xa9>
   14b8a:	a0 93 9a 20 	sts	0x209A, r26	; 0x80209a <hpdir+0xaa>
   14b8e:	b0 93 9b 20 	sts	0x209B, r27	; 0x80209b <hpdir+0xab>

	// Computed values
    hpdir.BLOCKS = 0;
   14b92:	10 92 9c 20 	sts	0x209C, r1	; 0x80209c <hpdir+0xac>
   14b96:	10 92 9d 20 	sts	0x209D, r1	; 0x80209d <hpdir+0xad>
   14b9a:	10 92 9e 20 	sts	0x209E, r1	; 0x80209e <hpdir+0xae>
   14b9e:	10 92 9f 20 	sts	0x209F, r1	; 0x80209f <hpdir+0xaf>
   14ba2:	08 95       	ret

00014ba4 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
   14ba4:	20 e0       	ldi	r18, 0x00	; 0
   14ba6:	30 e0       	ldi	r19, 0x00	; 0
	long num = 1;
	while(blocks)
   14ba8:	61 15       	cp	r22, r1
   14baa:	71 05       	cpc	r23, r1
   14bac:	81 05       	cpc	r24, r1
   14bae:	91 05       	cpc	r25, r1
   14bb0:	39 f0       	breq	.+14     	; 0x14bc0 <lif_dir_count+0x1c>
	{
		scale++;
   14bb2:	2f 5f       	subi	r18, 0xFF	; 255
   14bb4:	3f 4f       	sbci	r19, 0xFF	; 255
 		blocks >>= 1;
   14bb6:	95 95       	asr	r25
   14bb8:	87 95       	ror	r24
   14bba:	77 95       	ror	r23
   14bbc:	67 95       	ror	r22
   14bbe:	f4 cf       	rjmp	.-24     	; 0x14ba8 <lif_dir_count+0x4>
	}
	scale>>=1;
   14bc0:	35 95       	asr	r19
   14bc2:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
	long num = 1;
   14bc4:	61 e0       	ldi	r22, 0x01	; 1
   14bc6:	70 e0       	ldi	r23, 0x00	; 0
   14bc8:	80 e0       	ldi	r24, 0x00	; 0
   14bca:	90 e0       	ldi	r25, 0x00	; 0
	{
		scale++;
 		blocks >>= 1;
	}
	scale>>=1;
	while(scale--)
   14bcc:	21 50       	subi	r18, 0x01	; 1
   14bce:	31 09       	sbc	r19, r1
   14bd0:	28 f0       	brcs	.+10     	; 0x14bdc <lif_dir_count+0x38>
		num <<=1;
   14bd2:	66 0f       	add	r22, r22
   14bd4:	77 1f       	adc	r23, r23
   14bd6:	88 1f       	adc	r24, r24
   14bd8:	99 1f       	adc	r25, r25
   14bda:	f8 cf       	rjmp	.-16     	; 0x14bcc <lif_dir_count+0x28>
	return(num);
}
   14bdc:	08 95       	ret

00014bde <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   14bde:	a1 e8       	ldi	r26, 0x81	; 129
   14be0:	b1 e0       	ldi	r27, 0x01	; 1
   14be2:	e5 ef       	ldi	r30, 0xF5	; 245
   14be4:	f5 ea       	ldi	r31, 0xA5	; 165
   14be6:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
   14bea:	98 2e       	mov	r9, r24
   14bec:	59 2e       	mov	r5, r25
   14bee:	1b 01       	movw	r2, r22
	FILE *cfg;
	char *ptr;
    char str[256];
    char token[128];

	hpdir_init();
   14bf0:	5a 01       	movw	r10, r20

	cfg = fopen("hpdir.ini","rb");
   14bf2:	5a df       	rcall	.-332    	; 0x14aa8 <hpdir_init>
   14bf4:	66 e8       	ldi	r22, 0x86	; 134
   14bf6:	78 e0       	ldi	r23, 0x08	; 8
   14bf8:	8e ea       	ldi	r24, 0xAE	; 174
   14bfa:	9f e0       	ldi	r25, 0x0F	; 15
   14bfc:	0e 94 95 7e 	call	0xfd2a	; 0xfd2a <fopen>

#ifndef LIF_STAND_ALONE
	if(cfg == NULL)
   14c00:	7c 01       	movw	r14, r24
   14c02:	89 2b       	or	r24, r25
		cfg = fopen("/hpdir.ini","rb");
   14c04:	49 f4       	brne	.+18     	; 0x14c18 <hpdir_find_drive+0x3a>
   14c06:	66 e8       	ldi	r22, 0x86	; 134
   14c08:	78 e0       	ldi	r23, 0x08	; 8
   14c0a:	8d ea       	ldi	r24, 0xAD	; 173
   14c0c:	9f e0       	ldi	r25, 0x0F	; 15
   14c0e:	0e 94 95 7e 	call	0xfd2a	; 0xfd2a <fopen>
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

	if(cfg == NULL)
   14c12:	7c 01       	movw	r14, r24
   14c14:	89 2b       	or	r24, r25
		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
			driveinfo = 1;
   14c16:	51 f0       	breq	.+20     	; 0x14c2c <hpdir_find_drive+0x4e>
   14c18:	c1 2c       	mov	r12, r1

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   14c1a:	d1 2c       	mov	r13, r1
   14c1c:	8e 01       	movw	r16, r28
   14c1e:	0f 5f       	subi	r16, 0xFF	; 255
		if( driveinfo != 1)
			continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14c20:	1e 4f       	sbci	r17, 0xFE	; 254
   14c22:	88 e3       	ldi	r24, 0x38	; 56
   14c24:	9f e1       	ldi	r25, 0x1F	; 31
   14c26:	3c 01       	movw	r6, r24
   14c28:	81 2c       	mov	r8, r1
    }
#endif

	if(cfg == NULL)
	{
		if(verbose)
   14c2a:	1f c0       	rjmp	.+62     	; 0x14c6a <hpdir_find_drive+0x8c>
   14c2c:	a1 14       	cp	r10, r1
   14c2e:	b1 04       	cpc	r11, r1
   14c30:	09 f4       	brne	.+2      	; 0x14c34 <hpdir_find_drive+0x56>
			printf("Error: hpdir.ini not found!\n");
   14c32:	7a c1       	rjmp	.+756    	; 0x14f28 <hpdir_find_drive+0x34a>
   14c34:	8f e3       	ldi	r24, 0x3F	; 63
   14c36:	9f e1       	ldi	r25, 0x1F	; 31
   14c38:	1f 92       	push	r1
   14c3a:	9f 93       	push	r25
   14c3c:	8f 93       	push	r24
   14c3e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   14c42:	0f 90       	pop	r0
   14c44:	0f 90       	pop	r0
   14c46:	0f 90       	pop	r0
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
		errors = 0;
        ptr = str;

        trim_tail(ptr);
   14c48:	6f c1       	rjmp	.+734    	; 0x14f28 <hpdir_find_drive+0x34a>
   14c4a:	ce 01       	movw	r24, r28
   14c4c:	01 96       	adiw	r24, 0x01	; 1
   14c4e:	0e 94 02 32 	call	0x6404	; 0x6404 <trim_tail>
        ptr = skipspaces(ptr);
   14c52:	ce 01       	movw	r24, r28
   14c54:	01 96       	adiw	r24, 0x01	; 1
   14c56:	0e 94 12 32 	call	0x6424	; 0x6424 <skipspaces>

        len = strlen(ptr);
   14c5a:	fc 01       	movw	r30, r24
   14c5c:	01 90       	ld	r0, Z+
   14c5e:	00 20       	and	r0, r0
   14c60:	e9 f7       	brne	.-6      	; 0x14c5c <hpdir_find_drive+0x7e>
        if(!len)
   14c62:	31 97       	sbiw	r30, 0x01	; 1
   14c64:	8e 17       	cp	r24, r30
   14c66:	9f 07       	cpc	r25, r31
		return(0);
	}

	// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14c68:	51 f4       	brne	.+20     	; 0x14c7e <hpdir_find_drive+0xa0>
   14c6a:	a7 01       	movw	r20, r14
   14c6c:	6e ef       	ldi	r22, 0xFE	; 254
   14c6e:	70 e0       	ldi	r23, 0x00	; 0
   14c70:	ce 01       	movw	r24, r28
   14c72:	01 96       	adiw	r24, 0x01	; 1
   14c74:	0e 94 c6 76 	call	0xed8c	; 0xed8c <fgets>
   14c78:	89 2b       	or	r24, r25
   14c7a:	39 f7       	brne	.-50     	; 0x14c4a <hpdir_find_drive+0x6c>
        len = strlen(ptr);
        if(!len)
            continue;

        // Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14c7c:	0c c0       	rjmp	.+24     	; 0x14c96 <hpdir_find_drive+0xb8>
   14c7e:	fc 01       	movw	r30, r24
   14c80:	20 81       	ld	r18, Z
   14c82:	2b 33       	cpi	r18, 0x3B	; 59
   14c84:	91 f3       	breq	.-28     	; 0x14c6a <hpdir_find_drive+0x8c>
   14c86:	23 32       	cpi	r18, 0x23	; 35
            continue;

		if(*ptr == '[' && driveinfo == 1 )
   14c88:	81 f3       	breq	.-32     	; 0x14c6a <hpdir_find_drive+0x8c>
   14c8a:	2b 35       	cpi	r18, 0x5B	; 91
   14c8c:	31 f4       	brne	.+12     	; 0x14c9a <hpdir_find_drive+0xbc>
   14c8e:	f1 e0       	ldi	r31, 0x01	; 1
   14c90:	cf 16       	cp	r12, r31
   14c92:	d1 04       	cpc	r13, r1
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   14c94:	11 f4       	brne	.+4      	; 0x14c9a <hpdir_find_drive+0xbc>
   14c96:	00 e0       	ldi	r16, 0x00	; 0

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   14c98:	41 c1       	rjmp	.+642    	; 0x14f1c <hpdir_find_drive+0x33e>
   14c9a:	4e e7       	ldi	r20, 0x7E	; 126
   14c9c:	50 e0       	ldi	r21, 0x00	; 0
   14c9e:	b8 01       	movw	r22, r16
   14ca0:	0e 94 52 33 	call	0x66a4	; 0x66a4 <get_token>
   14ca4:	cf 57       	subi	r28, 0x7F	; 127
   14ca6:	de 4f       	sbci	r29, 0xFE	; 254
   14ca8:	88 83       	st	Y, r24
   14caa:	c1 58       	subi	r28, 0x81	; 129
   14cac:	d1 40       	sbci	r29, 0x01	; 1

        if(MATCHI(token,"[driveinfo]"))
   14cae:	49 2e       	mov	r4, r25
   14cb0:	68 eb       	ldi	r22, 0xB8	; 184
   14cb2:	7f e0       	ldi	r23, 0x0F	; 15
   14cb4:	c8 01       	movw	r24, r16
   14cb6:	0e 94 c8 32 	call	0x6590	; 0x6590 <MATCHI>
   14cba:	89 2b       	or	r24, r25
        {
			driveinfo = 1;
   14cbc:	21 f0       	breq	.+8      	; 0x14cc6 <hpdir_find_drive+0xe8>
   14cbe:	cc 24       	eor	r12, r12
   14cc0:	c3 94       	inc	r12
   14cc2:	d1 2c       	mov	r13, r1
            continue;
        }

		if( driveinfo != 1)
   14cc4:	d2 cf       	rjmp	.-92     	; 0x14c6a <hpdir_find_drive+0x8c>
   14cc6:	21 e0       	ldi	r18, 0x01	; 1
   14cc8:	c2 16       	cp	r12, r18
   14cca:	d1 04       	cpc	r13, r1
			continue;

        if(list)
   14ccc:	71 f6       	brne	.-100    	; 0x14c6a <hpdir_find_drive+0x8c>
   14cce:	21 14       	cp	r2, r1
   14cd0:	31 04       	cpc	r3, r1
        {
            printf("%s %s\n", token, ptr);
   14cd2:	a1 f0       	breq	.+40     	; 0x14cfc <hpdir_find_drive+0x11e>
   14cd4:	4f 92       	push	r4
   14cd6:	cf 57       	subi	r28, 0x7F	; 127
   14cd8:	de 4f       	sbci	r29, 0xFE	; 254
   14cda:	88 81       	ld	r24, Y
   14cdc:	c1 58       	subi	r28, 0x81	; 129
   14cde:	d1 40       	sbci	r29, 0x01	; 1
   14ce0:	8f 93       	push	r24
   14ce2:	1f 93       	push	r17
   14ce4:	0f 93       	push	r16
   14ce6:	1f 92       	push	r1
   14ce8:	7f 92       	push	r7
   14cea:	6f 92       	push	r6
   14cec:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            continue;
   14cf0:	0f b6       	in	r0, 0x3f	; 63
   14cf2:	f8 94       	cli
   14cf4:	de bf       	out	0x3e, r29	; 62
   14cf6:	0f be       	out	0x3f, r0	; 63
   14cf8:	cd bf       	out	0x3d, r28	; 61
        }

		if ( ! MATCHI(model,token) )
   14cfa:	b7 cf       	rjmp	.-146    	; 0x14c6a <hpdir_find_drive+0x8c>
   14cfc:	b8 01       	movw	r22, r16
   14cfe:	89 2d       	mov	r24, r9
   14d00:	95 2d       	mov	r25, r5
   14d02:	0e 94 c8 32 	call	0x6590	; 0x6590 <MATCHI>
			continue;

		hpdir_init();
   14d06:	89 2b       	or	r24, r25
   14d08:	d1 f2       	breq	.-76     	; 0x14cbe <hpdir_find_drive+0xe0>

		if(verbose)
   14d0a:	ce de       	rcall	.-612    	; 0x14aa8 <hpdir_init>
   14d0c:	a1 14       	cp	r10, r1
   14d0e:	b1 04       	cpc	r11, r1
			printf("Found Model: %s\n", model);
   14d10:	71 f0       	breq	.+28     	; 0x14d2e <hpdir_find_drive+0x150>
   14d12:	5f 92       	push	r5
   14d14:	9f 92       	push	r9
   14d16:	87 e2       	ldi	r24, 0x27	; 39
   14d18:	9f e1       	ldi	r25, 0x1F	; 31
   14d1a:	1f 92       	push	r1
   14d1c:	9f 93       	push	r25
   14d1e:	8f 93       	push	r24
   14d20:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   14d24:	0f 90       	pop	r0
   14d26:	0f 90       	pop	r0
   14d28:	0f 90       	pop	r0
   14d2a:	0f 90       	pop	r0

		strncpy(hpdir.model,token,sizeof(hpdir.model)-2);				// 1 Model
   14d2c:	0f 90       	pop	r0
   14d2e:	4e e1       	ldi	r20, 0x1E	; 30
   14d30:	50 e0       	ldi	r21, 0x00	; 0
   14d32:	b8 01       	movw	r22, r16
   14d34:	80 ef       	ldi	r24, 0xF0	; 240
   14d36:	9f e1       	ldi	r25, 0x1F	; 31
   14d38:	0e 94 b3 31 	call	0x6366	; 0x6366 <strncpy>

		ptr = get_token(ptr, token, 	sizeof(token)-2);				// =
   14d3c:	4e e7       	ldi	r20, 0x7E	; 126
   14d3e:	50 e0       	ldi	r21, 0x00	; 0
   14d40:	b8 01       	movw	r22, r16
   14d42:	cf 57       	subi	r28, 0x7F	; 127
   14d44:	de 4f       	sbci	r29, 0xFE	; 254
   14d46:	88 81       	ld	r24, Y
   14d48:	c1 58       	subi	r28, 0x81	; 129
   14d4a:	d1 40       	sbci	r29, 0x01	; 1
   14d4c:	94 2d       	mov	r25, r4
   14d4e:	0e 94 52 33 	call	0x66a4	; 0x66a4 <get_token>

		ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);	// 2 Comment
   14d52:	4e e3       	ldi	r20, 0x3E	; 62
   14d54:	50 e0       	ldi	r21, 0x00	; 0
   14d56:	60 e1       	ldi	r22, 0x10	; 16
   14d58:	70 e2       	ldi	r23, 0x20	; 32
   14d5a:	0e 94 52 33 	call	0x66a4	; 0x66a4 <get_token>

		ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);		// 3 AMIGO/SS80/CS80
   14d5e:	4e e1       	ldi	r20, 0x1E	; 30
   14d60:	50 e0       	ldi	r21, 0x00	; 0
   14d62:	60 e5       	ldi	r22, 0x50	; 80
   14d64:	70 e2       	ldi	r23, 0x20	; 32
   14d66:	0e 94 52 33 	call	0x66a4	; 0x66a4 <get_token>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 4 Identify ID
   14d6a:	4e e7       	ldi	r20, 0x7E	; 126
   14d6c:	50 e0       	ldi	r21, 0x00	; 0
   14d6e:	b8 01       	movw	r22, r16
   14d70:	0e 94 52 33 	call	0x66a4	; 0x66a4 <get_token>
		hpdir.ID = get_value(token);
   14d74:	6c 01       	movw	r12, r24
   14d76:	c8 01       	movw	r24, r16
   14d78:	0e 94 c7 33 	call	0x678e	; 0x678e <get_value>
   14d7c:	60 93 70 20 	sts	0x2070, r22	; 0x802070 <hpdir+0x80>
   14d80:	70 93 71 20 	sts	0x2071, r23	; 0x802071 <hpdir+0x81>
   14d84:	80 93 72 20 	sts	0x2072, r24	; 0x802072 <hpdir+0x82>
   14d88:	90 93 73 20 	sts	0x2073, r25	; 0x802073 <hpdir+0x83>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 5 MASK STAT 2
   14d8c:	4e e7       	ldi	r20, 0x7E	; 126
   14d8e:	50 e0       	ldi	r21, 0x00	; 0
   14d90:	b8 01       	movw	r22, r16
   14d92:	c6 01       	movw	r24, r12
   14d94:	0e 94 52 33 	call	0x66a4	; 0x66a4 <get_token>
		hpdir.mask_stat2 = get_value(token);
   14d98:	6c 01       	movw	r12, r24
   14d9a:	c8 01       	movw	r24, r16
   14d9c:	0e 94 c7 33 	call	0x678e	; 0x678e <get_value>
   14da0:	60 93 74 20 	sts	0x2074, r22	; 0x802074 <hpdir+0x84>
   14da4:	70 93 75 20 	sts	0x2075, r23	; 0x802075 <hpdir+0x85>
   14da8:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <hpdir+0x86>
   14dac:	90 93 77 20 	sts	0x2077, r25	; 0x802077 <hpdir+0x87>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 6 STAT2
   14db0:	4e e7       	ldi	r20, 0x7E	; 126
   14db2:	50 e0       	ldi	r21, 0x00	; 0
   14db4:	b8 01       	movw	r22, r16
   14db6:	c6 01       	movw	r24, r12
   14db8:	0e 94 52 33 	call	0x66a4	; 0x66a4 <get_token>
		hpdir.id_stat2 = get_value(token);
   14dbc:	6c 01       	movw	r12, r24
   14dbe:	c8 01       	movw	r24, r16
   14dc0:	0e 94 c7 33 	call	0x678e	; 0x678e <get_value>
   14dc4:	60 93 78 20 	sts	0x2078, r22	; 0x802078 <hpdir+0x88>
   14dc8:	70 93 79 20 	sts	0x2079, r23	; 0x802079 <hpdir+0x89>
   14dcc:	80 93 7a 20 	sts	0x207A, r24	; 0x80207a <hpdir+0x8a>
   14dd0:	90 93 7b 20 	sts	0x207B, r25	; 0x80207b <hpdir+0x8b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 7 BCD include model number
   14dd4:	4e e7       	ldi	r20, 0x7E	; 126
   14dd6:	50 e0       	ldi	r21, 0x00	; 0
   14dd8:	b8 01       	movw	r22, r16
   14dda:	c6 01       	movw	r24, r12
   14ddc:	0e 94 52 33 	call	0x66a4	; 0x66a4 <get_token>
		hpdir.DEVICE_NUMBER = get_value(token);
   14de0:	6c 01       	movw	r12, r24
   14de2:	c8 01       	movw	r24, r16
   14de4:	0e 94 c7 33 	call	0x678e	; 0x678e <get_value>
   14de8:	60 93 7c 20 	sts	0x207C, r22	; 0x80207c <hpdir+0x8c>
   14dec:	70 93 7d 20 	sts	0x207D, r23	; 0x80207d <hpdir+0x8d>
   14df0:	80 93 7e 20 	sts	0x207E, r24	; 0x80207e <hpdir+0x8e>
   14df4:	90 93 7f 20 	sts	0x207F, r25	; 0x80207f <hpdir+0x8f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 8 Units installed
   14df8:	4e e7       	ldi	r20, 0x7E	; 126
   14dfa:	50 e0       	ldi	r21, 0x00	; 0
   14dfc:	b8 01       	movw	r22, r16
   14dfe:	c6 01       	movw	r24, r12
   14e00:	0e 94 52 33 	call	0x66a4	; 0x66a4 <get_token>
		hpdir.UNITS_INSTALLED = get_value(token);
   14e04:	6c 01       	movw	r12, r24
   14e06:	c8 01       	movw	r24, r16
   14e08:	0e 94 c7 33 	call	0x678e	; 0x678e <get_value>
   14e0c:	60 93 80 20 	sts	0x2080, r22	; 0x802080 <hpdir+0x90>
   14e10:	70 93 81 20 	sts	0x2081, r23	; 0x802081 <hpdir+0x91>
   14e14:	80 93 82 20 	sts	0x2082, r24	; 0x802082 <hpdir+0x92>
   14e18:	90 93 83 20 	sts	0x2083, r25	; 0x802083 <hpdir+0x93>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 9 Cylinders
   14e1c:	4e e7       	ldi	r20, 0x7E	; 126
   14e1e:	50 e0       	ldi	r21, 0x00	; 0
   14e20:	b8 01       	movw	r22, r16
   14e22:	c6 01       	movw	r24, r12
   14e24:	0e 94 52 33 	call	0x66a4	; 0x66a4 <get_token>
		hpdir.CYLINDERS = get_value(token);
   14e28:	6c 01       	movw	r12, r24
   14e2a:	c8 01       	movw	r24, r16
   14e2c:	0e 94 c7 33 	call	0x678e	; 0x678e <get_value>
   14e30:	60 93 84 20 	sts	0x2084, r22	; 0x802084 <hpdir+0x94>
   14e34:	70 93 85 20 	sts	0x2085, r23	; 0x802085 <hpdir+0x95>
   14e38:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <hpdir+0x96>
   14e3c:	90 93 87 20 	sts	0x2087, r25	; 0x802087 <hpdir+0x97>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 10 Heads
   14e40:	4e e7       	ldi	r20, 0x7E	; 126
   14e42:	50 e0       	ldi	r21, 0x00	; 0
   14e44:	b8 01       	movw	r22, r16
   14e46:	c6 01       	movw	r24, r12
   14e48:	0e 94 52 33 	call	0x66a4	; 0x66a4 <get_token>
		hpdir.HEADS = get_value(token);
   14e4c:	6c 01       	movw	r12, r24
   14e4e:	c8 01       	movw	r24, r16
   14e50:	0e 94 c7 33 	call	0x678e	; 0x678e <get_value>
   14e54:	60 93 88 20 	sts	0x2088, r22	; 0x802088 <hpdir+0x98>
   14e58:	70 93 89 20 	sts	0x2089, r23	; 0x802089 <hpdir+0x99>
   14e5c:	80 93 8a 20 	sts	0x208A, r24	; 0x80208a <hpdir+0x9a>
   14e60:	90 93 8b 20 	sts	0x208B, r25	; 0x80208b <hpdir+0x9b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 11 Sectors
   14e64:	4e e7       	ldi	r20, 0x7E	; 126
   14e66:	50 e0       	ldi	r21, 0x00	; 0
   14e68:	b8 01       	movw	r22, r16
   14e6a:	c6 01       	movw	r24, r12
   14e6c:	0e 94 52 33 	call	0x66a4	; 0x66a4 <get_token>
		hpdir.SECTORS = get_value(token);
   14e70:	6c 01       	movw	r12, r24
   14e72:	c8 01       	movw	r24, r16
   14e74:	0e 94 c7 33 	call	0x678e	; 0x678e <get_value>
   14e78:	60 93 8c 20 	sts	0x208C, r22	; 0x80208c <hpdir+0x9c>
   14e7c:	70 93 8d 20 	sts	0x208D, r23	; 0x80208d <hpdir+0x9d>
   14e80:	80 93 8e 20 	sts	0x208E, r24	; 0x80208e <hpdir+0x9e>
   14e84:	90 93 8f 20 	sts	0x208F, r25	; 0x80208f <hpdir+0x9f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 12 Bytes Per Block/Sector
   14e88:	4e e7       	ldi	r20, 0x7E	; 126
   14e8a:	50 e0       	ldi	r21, 0x00	; 0
   14e8c:	b8 01       	movw	r22, r16
   14e8e:	c6 01       	movw	r24, r12
   14e90:	0e 94 52 33 	call	0x66a4	; 0x66a4 <get_token>
		hpdir.BYTES_PER_SECTOR = get_value(token);
   14e94:	6c 01       	movw	r12, r24
   14e96:	c8 01       	movw	r24, r16
   14e98:	0e 94 c7 33 	call	0x678e	; 0x678e <get_value>
   14e9c:	60 93 90 20 	sts	0x2090, r22	; 0x802090 <hpdir+0xa0>
   14ea0:	70 93 91 20 	sts	0x2091, r23	; 0x802091 <hpdir+0xa1>
   14ea4:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <hpdir+0xa2>
   14ea8:	90 93 93 20 	sts	0x2093, r25	; 0x802093 <hpdir+0xa3>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 13 Interleave
   14eac:	4e e7       	ldi	r20, 0x7E	; 126
   14eae:	50 e0       	ldi	r21, 0x00	; 0
   14eb0:	b8 01       	movw	r22, r16
   14eb2:	c6 01       	movw	r24, r12
   14eb4:	0e 94 52 33 	call	0x66a4	; 0x66a4 <get_token>
		hpdir.INTERLEAVE = get_value(token);
   14eb8:	c8 01       	movw	r24, r16
   14eba:	0e 94 c7 33 	call	0x678e	; 0x678e <get_value>
   14ebe:	60 93 94 20 	sts	0x2094, r22	; 0x802094 <hpdir+0xa4>
   14ec2:	70 93 95 20 	sts	0x2095, r23	; 0x802095 <hpdir+0xa5>
   14ec6:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <hpdir+0xa6>
   14eca:	90 93 97 20 	sts	0x2097, r25	; 0x802097 <hpdir+0xa7>

		// Computed values
		hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14ece:	20 91 84 20 	lds	r18, 0x2084	; 0x802084 <hpdir+0x94>
   14ed2:	30 91 85 20 	lds	r19, 0x2085	; 0x802085 <hpdir+0x95>
   14ed6:	40 91 86 20 	lds	r20, 0x2086	; 0x802086 <hpdir+0x96>
   14eda:	50 91 87 20 	lds	r21, 0x2087	; 0x802087 <hpdir+0x97>
   14ede:	60 91 88 20 	lds	r22, 0x2088	; 0x802088 <hpdir+0x98>
   14ee2:	70 91 89 20 	lds	r23, 0x2089	; 0x802089 <hpdir+0x99>
   14ee6:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <hpdir+0x9a>
   14eea:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <hpdir+0x9b>
   14eee:	0e 94 71 e4 	call	0x1c8e2	; 0x1c8e2 <__mulsi3>
   14ef2:	9b 01       	movw	r18, r22
   14ef4:	ac 01       	movw	r20, r24
   14ef6:	60 91 8c 20 	lds	r22, 0x208C	; 0x80208c <hpdir+0x9c>
   14efa:	70 91 8d 20 	lds	r23, 0x208D	; 0x80208d <hpdir+0x9d>
   14efe:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <hpdir+0x9e>
   14f02:	90 91 8f 20 	lds	r25, 0x208F	; 0x80208f <hpdir+0x9f>
   14f06:	0e 94 71 e4 	call	0x1c8e2	; 0x1c8e2 <__mulsi3>
   14f0a:	60 93 9c 20 	sts	0x209C, r22	; 0x80209c <hpdir+0xac>
   14f0e:	70 93 9d 20 	sts	0x209D, r23	; 0x80209d <hpdir+0xad>
   14f12:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <hpdir+0xae>
   14f16:	90 93 9f 20 	sts	0x209F, r25	; 0x80209f <hpdir+0xaf>
		{
			if(verbose)
				printf("Error /hpdir.ini parsing\n");
			break;
		}
		found = 1;
   14f1a:	01 e0       	ldi	r16, 0x01	; 1
		break;

	}	// while
	fclose(cfg);
   14f1c:	10 e0       	ldi	r17, 0x00	; 0
   14f1e:	c7 01       	movw	r24, r14
   14f20:	0e 94 3f 7d 	call	0xfa7e	; 0xfa7e <fclose>
	return(found);
   14f24:	c8 01       	movw	r24, r16

	if(cfg == NULL)
	{
		if(verbose)
			printf("Error: hpdir.ini not found!\n");
		return(0);
   14f26:	02 c0       	rjmp	.+4      	; 0x14f2c <hpdir_find_drive+0x34e>
   14f28:	80 e0       	ldi	r24, 0x00	; 0
		break;

	}	// while
	fclose(cfg);
	return(found);
}
   14f2a:	90 e0       	ldi	r25, 0x00	; 0
   14f2c:	cf 57       	subi	r28, 0x7F	; 127
   14f2e:	de 4f       	sbci	r29, 0xFE	; 254
   14f30:	e2 e1       	ldi	r30, 0x12	; 18
   14f32:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

00014f36 <SS80ControllerPack>:
   14f36:	0f 93       	push	r16
   14f38:	1f 93       	push	r17
   14f3a:	25 e0       	ldi	r18, 0x05	; 5
   14f3c:	30 e0       	ldi	r19, 0x00	; 0
   14f3e:	fc 01       	movw	r30, r24
   14f40:	31 83       	std	Z+1, r19	; 0x01
   14f42:	20 83       	st	Z, r18
   14f44:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   14f48:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   14f4c:	05 a1       	ldd	r16, Z+37	; 0x25
   14f4e:	16 a1       	ldd	r17, Z+38	; 0x26
   14f50:	20 e0       	ldi	r18, 0x00	; 0
   14f52:	30 e0       	ldi	r19, 0x00	; 0
   14f54:	42 e0       	ldi	r20, 0x02	; 2
   14f56:	50 e0       	ldi	r21, 0x00	; 0
   14f58:	60 e0       	ldi	r22, 0x00	; 0
   14f5a:	70 e0       	ldi	r23, 0x00	; 0
   14f5c:	87 e9       	ldi	r24, 0x97	; 151
   14f5e:	98 e1       	ldi	r25, 0x18	; 24
   14f60:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   14f64:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   14f68:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   14f6c:	07 a1       	ldd	r16, Z+39	; 0x27
   14f6e:	10 a5       	ldd	r17, Z+40	; 0x28
   14f70:	20 e0       	ldi	r18, 0x00	; 0
   14f72:	30 e0       	ldi	r19, 0x00	; 0
   14f74:	42 e0       	ldi	r20, 0x02	; 2
   14f76:	50 e0       	ldi	r21, 0x00	; 0
   14f78:	61 e0       	ldi	r22, 0x01	; 1
   14f7a:	70 e0       	ldi	r23, 0x00	; 0
   14f7c:	87 e9       	ldi	r24, 0x97	; 151
   14f7e:	98 e1       	ldi	r25, 0x18	; 24
   14f80:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   14f84:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   14f88:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   14f8c:	01 a5       	ldd	r16, Z+41	; 0x29
   14f8e:	10 e0       	ldi	r17, 0x00	; 0
   14f90:	20 e0       	ldi	r18, 0x00	; 0
   14f92:	30 e0       	ldi	r19, 0x00	; 0
   14f94:	41 e0       	ldi	r20, 0x01	; 1
   14f96:	50 e0       	ldi	r21, 0x00	; 0
   14f98:	64 e0       	ldi	r22, 0x04	; 4
   14f9a:	70 e0       	ldi	r23, 0x00	; 0
   14f9c:	87 e9       	ldi	r24, 0x97	; 151
   14f9e:	98 e1       	ldi	r25, 0x18	; 24
   14fa0:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   14fa4:	87 e9       	ldi	r24, 0x97	; 151
   14fa6:	98 e1       	ldi	r25, 0x18	; 24
   14fa8:	1f 91       	pop	r17
   14faa:	0f 91       	pop	r16
   14fac:	08 95       	ret

00014fae <SS80UnitPack>:
   14fae:	0f 93       	push	r16
   14fb0:	1f 93       	push	r17
   14fb2:	23 e1       	ldi	r18, 0x13	; 19
   14fb4:	30 e0       	ldi	r19, 0x00	; 0
   14fb6:	fc 01       	movw	r30, r24
   14fb8:	31 83       	std	Z+1, r19	; 0x01
   14fba:	20 83       	st	Z, r18
   14fbc:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   14fc0:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   14fc4:	02 a5       	ldd	r16, Z+42	; 0x2a
   14fc6:	10 e0       	ldi	r17, 0x00	; 0
   14fc8:	20 e0       	ldi	r18, 0x00	; 0
   14fca:	30 e0       	ldi	r19, 0x00	; 0
   14fcc:	41 e0       	ldi	r20, 0x01	; 1
   14fce:	50 e0       	ldi	r21, 0x00	; 0
   14fd0:	60 e0       	ldi	r22, 0x00	; 0
   14fd2:	70 e0       	ldi	r23, 0x00	; 0
   14fd4:	84 e8       	ldi	r24, 0x84	; 132
   14fd6:	98 e1       	ldi	r25, 0x18	; 24
   14fd8:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   14fdc:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   14fe0:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   14fe4:	03 a5       	ldd	r16, Z+43	; 0x2b
   14fe6:	14 a5       	ldd	r17, Z+44	; 0x2c
   14fe8:	25 a5       	ldd	r18, Z+45	; 0x2d
   14fea:	36 a5       	ldd	r19, Z+46	; 0x2e
   14fec:	43 e0       	ldi	r20, 0x03	; 3
   14fee:	50 e0       	ldi	r21, 0x00	; 0
   14ff0:	61 e0       	ldi	r22, 0x01	; 1
   14ff2:	70 e0       	ldi	r23, 0x00	; 0
   14ff4:	84 e8       	ldi	r24, 0x84	; 132
   14ff6:	98 e1       	ldi	r25, 0x18	; 24
   14ff8:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   14ffc:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15000:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15004:	07 a5       	ldd	r16, Z+47	; 0x2f
   15006:	10 a9       	ldd	r17, Z+48	; 0x30
   15008:	20 e0       	ldi	r18, 0x00	; 0
   1500a:	30 e0       	ldi	r19, 0x00	; 0
   1500c:	42 e0       	ldi	r20, 0x02	; 2
   1500e:	50 e0       	ldi	r21, 0x00	; 0
   15010:	64 e0       	ldi	r22, 0x04	; 4
   15012:	70 e0       	ldi	r23, 0x00	; 0
   15014:	84 e8       	ldi	r24, 0x84	; 132
   15016:	98 e1       	ldi	r25, 0x18	; 24
   15018:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   1501c:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15020:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15024:	01 a9       	ldd	r16, Z+49	; 0x31
   15026:	10 e0       	ldi	r17, 0x00	; 0
   15028:	20 e0       	ldi	r18, 0x00	; 0
   1502a:	30 e0       	ldi	r19, 0x00	; 0
   1502c:	41 e0       	ldi	r20, 0x01	; 1
   1502e:	50 e0       	ldi	r21, 0x00	; 0
   15030:	66 e0       	ldi	r22, 0x06	; 6
   15032:	70 e0       	ldi	r23, 0x00	; 0
   15034:	84 e8       	ldi	r24, 0x84	; 132
   15036:	98 e1       	ldi	r25, 0x18	; 24
   15038:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   1503c:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15040:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15044:	02 a9       	ldd	r16, Z+50	; 0x32
   15046:	10 e0       	ldi	r17, 0x00	; 0
   15048:	20 e0       	ldi	r18, 0x00	; 0
   1504a:	30 e0       	ldi	r19, 0x00	; 0
   1504c:	41 e0       	ldi	r20, 0x01	; 1
   1504e:	50 e0       	ldi	r21, 0x00	; 0
   15050:	67 e0       	ldi	r22, 0x07	; 7
   15052:	70 e0       	ldi	r23, 0x00	; 0
   15054:	84 e8       	ldi	r24, 0x84	; 132
   15056:	98 e1       	ldi	r25, 0x18	; 24
   15058:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   1505c:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15060:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15064:	03 a9       	ldd	r16, Z+51	; 0x33
   15066:	14 a9       	ldd	r17, Z+52	; 0x34
   15068:	20 e0       	ldi	r18, 0x00	; 0
   1506a:	30 e0       	ldi	r19, 0x00	; 0
   1506c:	42 e0       	ldi	r20, 0x02	; 2
   1506e:	50 e0       	ldi	r21, 0x00	; 0
   15070:	68 e0       	ldi	r22, 0x08	; 8
   15072:	70 e0       	ldi	r23, 0x00	; 0
   15074:	84 e8       	ldi	r24, 0x84	; 132
   15076:	98 e1       	ldi	r25, 0x18	; 24
   15078:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   1507c:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15080:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15084:	05 a9       	ldd	r16, Z+53	; 0x35
   15086:	16 a9       	ldd	r17, Z+54	; 0x36
   15088:	20 e0       	ldi	r18, 0x00	; 0
   1508a:	30 e0       	ldi	r19, 0x00	; 0
   1508c:	42 e0       	ldi	r20, 0x02	; 2
   1508e:	50 e0       	ldi	r21, 0x00	; 0
   15090:	6a e0       	ldi	r22, 0x0A	; 10
   15092:	70 e0       	ldi	r23, 0x00	; 0
   15094:	84 e8       	ldi	r24, 0x84	; 132
   15096:	98 e1       	ldi	r25, 0x18	; 24
   15098:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   1509c:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   150a0:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   150a4:	07 a9       	ldd	r16, Z+55	; 0x37
   150a6:	10 ad       	ldd	r17, Z+56	; 0x38
   150a8:	20 e0       	ldi	r18, 0x00	; 0
   150aa:	30 e0       	ldi	r19, 0x00	; 0
   150ac:	42 e0       	ldi	r20, 0x02	; 2
   150ae:	50 e0       	ldi	r21, 0x00	; 0
   150b0:	6c e0       	ldi	r22, 0x0C	; 12
   150b2:	70 e0       	ldi	r23, 0x00	; 0
   150b4:	84 e8       	ldi	r24, 0x84	; 132
   150b6:	98 e1       	ldi	r25, 0x18	; 24
   150b8:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   150bc:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   150c0:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   150c4:	01 ad       	ldd	r16, Z+57	; 0x39
   150c6:	12 ad       	ldd	r17, Z+58	; 0x3a
   150c8:	20 e0       	ldi	r18, 0x00	; 0
   150ca:	30 e0       	ldi	r19, 0x00	; 0
   150cc:	42 e0       	ldi	r20, 0x02	; 2
   150ce:	50 e0       	ldi	r21, 0x00	; 0
   150d0:	6e e0       	ldi	r22, 0x0E	; 14
   150d2:	70 e0       	ldi	r23, 0x00	; 0
   150d4:	84 e8       	ldi	r24, 0x84	; 132
   150d6:	98 e1       	ldi	r25, 0x18	; 24
   150d8:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   150dc:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   150e0:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   150e4:	03 ad       	ldd	r16, Z+59	; 0x3b
   150e6:	10 e0       	ldi	r17, 0x00	; 0
   150e8:	20 e0       	ldi	r18, 0x00	; 0
   150ea:	30 e0       	ldi	r19, 0x00	; 0
   150ec:	41 e0       	ldi	r20, 0x01	; 1
   150ee:	50 e0       	ldi	r21, 0x00	; 0
   150f0:	60 e1       	ldi	r22, 0x10	; 16
   150f2:	70 e0       	ldi	r23, 0x00	; 0
   150f4:	84 e8       	ldi	r24, 0x84	; 132
   150f6:	98 e1       	ldi	r25, 0x18	; 24
   150f8:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   150fc:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15100:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15104:	04 ad       	ldd	r16, Z+60	; 0x3c
   15106:	10 e0       	ldi	r17, 0x00	; 0
   15108:	20 e0       	ldi	r18, 0x00	; 0
   1510a:	30 e0       	ldi	r19, 0x00	; 0
   1510c:	41 e0       	ldi	r20, 0x01	; 1
   1510e:	50 e0       	ldi	r21, 0x00	; 0
   15110:	61 e1       	ldi	r22, 0x11	; 17
   15112:	70 e0       	ldi	r23, 0x00	; 0
   15114:	84 e8       	ldi	r24, 0x84	; 132
   15116:	98 e1       	ldi	r25, 0x18	; 24
   15118:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   1511c:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15120:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15124:	05 ad       	ldd	r16, Z+61	; 0x3d
   15126:	10 e0       	ldi	r17, 0x00	; 0
   15128:	20 e0       	ldi	r18, 0x00	; 0
   1512a:	30 e0       	ldi	r19, 0x00	; 0
   1512c:	41 e0       	ldi	r20, 0x01	; 1
   1512e:	50 e0       	ldi	r21, 0x00	; 0
   15130:	62 e1       	ldi	r22, 0x12	; 18
   15132:	70 e0       	ldi	r23, 0x00	; 0
   15134:	84 e8       	ldi	r24, 0x84	; 132
   15136:	98 e1       	ldi	r25, 0x18	; 24
   15138:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   1513c:	84 e8       	ldi	r24, 0x84	; 132
   1513e:	98 e1       	ldi	r25, 0x18	; 24
   15140:	1f 91       	pop	r17
   15142:	0f 91       	pop	r16
   15144:	08 95       	ret

00015146 <SS80VolumePack>:
   15146:	0f 93       	push	r16
   15148:	1f 93       	push	r17
   1514a:	2d e0       	ldi	r18, 0x0D	; 13
   1514c:	30 e0       	ldi	r19, 0x00	; 0
   1514e:	fc 01       	movw	r30, r24
   15150:	31 83       	std	Z+1, r19	; 0x01
   15152:	20 83       	st	Z, r18
   15154:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15158:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   1515c:	fe 96       	adiw	r30, 0x3e	; 62
   1515e:	00 81       	ld	r16, Z
   15160:	11 81       	ldd	r17, Z+1	; 0x01
   15162:	22 81       	ldd	r18, Z+2	; 0x02
   15164:	33 81       	ldd	r19, Z+3	; 0x03
   15166:	43 e0       	ldi	r20, 0x03	; 3
   15168:	50 e0       	ldi	r21, 0x00	; 0
   1516a:	60 e0       	ldi	r22, 0x00	; 0
   1516c:	70 e0       	ldi	r23, 0x00	; 0
   1516e:	87 e7       	ldi	r24, 0x77	; 119
   15170:	98 e1       	ldi	r25, 0x18	; 24
   15172:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   15176:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   1517a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   1517e:	ee 5b       	subi	r30, 0xBE	; 190
   15180:	ff 4f       	sbci	r31, 0xFF	; 255
   15182:	00 81       	ld	r16, Z
   15184:	10 e0       	ldi	r17, 0x00	; 0
   15186:	20 e0       	ldi	r18, 0x00	; 0
   15188:	30 e0       	ldi	r19, 0x00	; 0
   1518a:	41 e0       	ldi	r20, 0x01	; 1
   1518c:	50 e0       	ldi	r21, 0x00	; 0
   1518e:	63 e0       	ldi	r22, 0x03	; 3
   15190:	70 e0       	ldi	r23, 0x00	; 0
   15192:	87 e7       	ldi	r24, 0x77	; 119
   15194:	98 e1       	ldi	r25, 0x18	; 24
   15196:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   1519a:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   1519e:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   151a2:	ed 5b       	subi	r30, 0xBD	; 189
   151a4:	ff 4f       	sbci	r31, 0xFF	; 255
   151a6:	00 81       	ld	r16, Z
   151a8:	11 81       	ldd	r17, Z+1	; 0x01
   151aa:	20 e0       	ldi	r18, 0x00	; 0
   151ac:	30 e0       	ldi	r19, 0x00	; 0
   151ae:	42 e0       	ldi	r20, 0x02	; 2
   151b0:	50 e0       	ldi	r21, 0x00	; 0
   151b2:	64 e0       	ldi	r22, 0x04	; 4
   151b4:	70 e0       	ldi	r23, 0x00	; 0
   151b6:	87 e7       	ldi	r24, 0x77	; 119
   151b8:	98 e1       	ldi	r25, 0x18	; 24
   151ba:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   151be:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   151c2:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   151c6:	eb 5b       	subi	r30, 0xBB	; 187
   151c8:	ff 4f       	sbci	r31, 0xFF	; 255
   151ca:	00 81       	ld	r16, Z
   151cc:	11 81       	ldd	r17, Z+1	; 0x01
   151ce:	22 81       	ldd	r18, Z+2	; 0x02
   151d0:	33 81       	ldd	r19, Z+3	; 0x03
   151d2:	46 e0       	ldi	r20, 0x06	; 6
   151d4:	50 e0       	ldi	r21, 0x00	; 0
   151d6:	66 e0       	ldi	r22, 0x06	; 6
   151d8:	70 e0       	ldi	r23, 0x00	; 0
   151da:	87 e7       	ldi	r24, 0x77	; 119
   151dc:	98 e1       	ldi	r25, 0x18	; 24
   151de:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   151e2:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   151e6:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   151ea:	e7 5b       	subi	r30, 0xB7	; 183
   151ec:	ff 4f       	sbci	r31, 0xFF	; 255
   151ee:	00 81       	ld	r16, Z
   151f0:	10 e0       	ldi	r17, 0x00	; 0
   151f2:	20 e0       	ldi	r18, 0x00	; 0
   151f4:	30 e0       	ldi	r19, 0x00	; 0
   151f6:	41 e0       	ldi	r20, 0x01	; 1
   151f8:	50 e0       	ldi	r21, 0x00	; 0
   151fa:	6c e0       	ldi	r22, 0x0C	; 12
   151fc:	70 e0       	ldi	r23, 0x00	; 0
   151fe:	87 e7       	ldi	r24, 0x77	; 119
   15200:	98 e1       	ldi	r25, 0x18	; 24
   15202:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   15206:	87 e7       	ldi	r24, 0x77	; 119
   15208:	98 e1       	ldi	r25, 0x18	; 24
   1520a:	1f 91       	pop	r17
   1520c:	0f 91       	pop	r16
   1520e:	08 95       	ret

00015210 <SS80_test_extended_status>:
   15210:	9b 01       	movw	r18, r22
   15212:	43 e0       	ldi	r20, 0x03	; 3
   15214:	35 95       	asr	r19
   15216:	27 95       	ror	r18
   15218:	4a 95       	dec	r20
   1521a:	e1 f7       	brne	.-8      	; 0x15214 <SS80_test_extended_status+0x4>
   1521c:	82 0f       	add	r24, r18
   1521e:	93 1f       	adc	r25, r19
   15220:	67 70       	andi	r22, 0x07	; 7
   15222:	77 27       	eor	r23, r23
   15224:	20 e8       	ldi	r18, 0x80	; 128
   15226:	30 e0       	ldi	r19, 0x00	; 0
   15228:	02 c0       	rjmp	.+4      	; 0x1522e <SS80_test_extended_status+0x1e>
   1522a:	35 95       	asr	r19
   1522c:	27 95       	ror	r18
   1522e:	6a 95       	dec	r22
   15230:	e2 f7       	brpl	.-8      	; 0x1522a <SS80_test_extended_status+0x1a>
   15232:	fc 01       	movw	r30, r24
   15234:	80 81       	ld	r24, Z
   15236:	28 23       	and	r18, r24
   15238:	81 e0       	ldi	r24, 0x01	; 1
   1523a:	90 e0       	ldi	r25, 0x00	; 0
   1523c:	11 f4       	brne	.+4      	; 0x15242 <SS80_test_extended_status+0x32>
   1523e:	80 e0       	ldi	r24, 0x00	; 0
   15240:	90 e0       	ldi	r25, 0x00	; 0
   15242:	08 95       	ret

00015244 <SS80_display_extended_status>:
   15244:	6f 92       	push	r6
   15246:	7f 92       	push	r7
   15248:	8f 92       	push	r8
   1524a:	ef 92       	push	r14
   1524c:	ff 92       	push	r15
   1524e:	0f 93       	push	r16
   15250:	1f 93       	push	r17
   15252:	cf 93       	push	r28
   15254:	df 93       	push	r29
   15256:	fc 01       	movw	r30, r24
   15258:	ac 01       	movw	r20, r24
   1525a:	48 5f       	subi	r20, 0xF8	; 248
   1525c:	5f 4f       	sbci	r21, 0xFF	; 255
   1525e:	20 e0       	ldi	r18, 0x00	; 0
   15260:	30 e0       	ldi	r19, 0x00	; 0
   15262:	a1 91       	ld	r26, Z+
   15264:	aa 23       	and	r26, r26
   15266:	11 f0       	breq	.+4      	; 0x1526c <SS80_display_extended_status+0x28>
   15268:	21 e0       	ldi	r18, 0x01	; 1
   1526a:	30 e0       	ldi	r19, 0x00	; 0
   1526c:	e4 17       	cp	r30, r20
   1526e:	f5 07       	cpc	r31, r21
   15270:	c1 f7       	brne	.-16     	; 0x15262 <SS80_display_extended_status+0x1e>
   15272:	23 2b       	or	r18, r19
   15274:	a1 f1       	breq	.+104    	; 0x152de <SS80_display_extended_status+0x9a>
   15276:	8c 01       	movw	r16, r24
   15278:	7f 93       	push	r23
   1527a:	6f 93       	push	r22
   1527c:	82 eb       	ldi	r24, 0xB2	; 178
   1527e:	95 e2       	ldi	r25, 0x25	; 37
   15280:	1f 92       	push	r1
   15282:	9f 93       	push	r25
   15284:	8f 93       	push	r24
   15286:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1528a:	cb ec       	ldi	r28, 0xCB	; 203
   1528c:	d1 e0       	ldi	r29, 0x01	; 1
   1528e:	0f 90       	pop	r0
   15290:	0f 90       	pop	r0
   15292:	0f 90       	pop	r0
   15294:	0f 90       	pop	r0
   15296:	0f 90       	pop	r0
   15298:	87 ea       	ldi	r24, 0xA7	; 167
   1529a:	95 e2       	ldi	r25, 0x25	; 37
   1529c:	3c 01       	movw	r6, r24
   1529e:	e8 80       	ld	r14, Y
   152a0:	f9 80       	ldd	r15, Y+1	; 0x01
   152a2:	9f ef       	ldi	r25, 0xFF	; 255
   152a4:	e9 16       	cp	r14, r25
   152a6:	f9 06       	cpc	r15, r25
   152a8:	d1 f0       	breq	.+52     	; 0x152de <SS80_display_extended_status+0x9a>
   152aa:	b7 01       	movw	r22, r14
   152ac:	c8 01       	movw	r24, r16
   152ae:	b0 df       	rcall	.-160    	; 0x15210 <SS80_test_extended_status>
   152b0:	89 2b       	or	r24, r25
   152b2:	99 f0       	breq	.+38     	; 0x152da <SS80_display_extended_status+0x96>
   152b4:	8b 81       	ldd	r24, Y+3	; 0x03
   152b6:	8f 93       	push	r24
   152b8:	8a 81       	ldd	r24, Y+2	; 0x02
   152ba:	8f 93       	push	r24
   152bc:	ff 92       	push	r15
   152be:	ef 92       	push	r14
   152c0:	1f 92       	push	r1
   152c2:	7f 92       	push	r7
   152c4:	6f 92       	push	r6
   152c6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   152ca:	8d b7       	in	r24, 0x3d	; 61
   152cc:	9e b7       	in	r25, 0x3e	; 62
   152ce:	07 96       	adiw	r24, 0x07	; 7
   152d0:	0f b6       	in	r0, 0x3f	; 63
   152d2:	f8 94       	cli
   152d4:	9e bf       	out	0x3e, r25	; 62
   152d6:	0f be       	out	0x3f, r0	; 63
   152d8:	8d bf       	out	0x3d, r24	; 61
   152da:	24 96       	adiw	r28, 0x04	; 4
   152dc:	e0 cf       	rjmp	.-64     	; 0x1529e <SS80_display_extended_status+0x5a>
   152de:	df 91       	pop	r29
   152e0:	cf 91       	pop	r28
   152e2:	1f 91       	pop	r17
   152e4:	0f 91       	pop	r16
   152e6:	ff 90       	pop	r15
   152e8:	ef 90       	pop	r14
   152ea:	8f 90       	pop	r8
   152ec:	7f 90       	pop	r7
   152ee:	6f 90       	pop	r6
   152f0:	08 95       	ret

000152f2 <SS80_send_status>:
   152f2:	a6 e1       	ldi	r26, 0x16	; 22
   152f4:	b0 e0       	ldi	r27, 0x00	; 0
   152f6:	ef e7       	ldi	r30, 0x7F	; 127
   152f8:	f9 ea       	ldi	r31, 0xA9	; 169
   152fa:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__prologue_saves__+0x18>
   152fe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15302:	85 ff       	sbrs	r24, 5
   15304:	0a c0       	rjmp	.+20     	; 0x1531a <SS80_send_status+0x28>
   15306:	83 e9       	ldi	r24, 0x93	; 147
   15308:	95 e2       	ldi	r25, 0x25	; 37
   1530a:	1f 92       	push	r1
   1530c:	9f 93       	push	r25
   1530e:	8f 93       	push	r24
   15310:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15314:	0f 90       	pop	r0
   15316:	0f 90       	pop	r0
   15318:	0f 90       	pop	r0
   1531a:	ce 01       	movw	r24, r28
   1531c:	01 96       	adiw	r24, 0x01	; 1
   1531e:	7c 01       	movw	r14, r24
   15320:	84 e1       	ldi	r24, 0x14	; 20
   15322:	f7 01       	movw	r30, r14
   15324:	11 92       	st	Z+, r1
   15326:	8a 95       	dec	r24
   15328:	e9 f7       	brne	.-6      	; 0x15324 <SS80_send_status+0x32>
   1532a:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   1532e:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15332:	86 81       	ldd	r24, Z+6	; 0x06
   15334:	20 e1       	ldi	r18, 0x10	; 16
   15336:	82 9f       	mul	r24, r18
   15338:	c0 01       	movw	r24, r0
   1533a:	11 24       	eor	r1, r1
   1533c:	95 81       	ldd	r25, Z+5	; 0x05
   1533e:	9f 70       	andi	r25, 0x0F	; 15
   15340:	89 2b       	or	r24, r25
   15342:	89 83       	std	Y+1, r24	; 0x01
   15344:	8f ef       	ldi	r24, 0xFF	; 255
   15346:	8a 83       	std	Y+2, r24	; 0x02
   15348:	83 81       	ldd	r24, Z+3	; 0x03
   1534a:	86 ff       	sbrs	r24, 6
   1534c:	02 c0       	rjmp	.+4      	; 0x15352 <SS80_send_status+0x60>
   1534e:	92 e0       	ldi	r25, 0x02	; 2
   15350:	9b 83       	std	Y+3, r25	; 0x03
   15352:	82 ff       	sbrs	r24, 2
   15354:	03 c0       	rjmp	.+6      	; 0x1535c <SS80_send_status+0x6a>
   15356:	9b 81       	ldd	r25, Y+3	; 0x03
   15358:	91 60       	ori	r25, 0x01	; 1
   1535a:	9b 83       	std	Y+3, r25	; 0x03
   1535c:	80 ff       	sbrs	r24, 0
   1535e:	02 c0       	rjmp	.+4      	; 0x15364 <SS80_send_status+0x72>
   15360:	82 e0       	ldi	r24, 0x02	; 2
   15362:	8d 83       	std	Y+5, r24	; 0x05
   15364:	83 81       	ldd	r24, Z+3	; 0x03
   15366:	81 ff       	sbrs	r24, 1
   15368:	03 c0       	rjmp	.+6      	; 0x15370 <SS80_send_status+0x7e>
   1536a:	8d 81       	ldd	r24, Y+5	; 0x05
   1536c:	82 60       	ori	r24, 0x02	; 2
   1536e:	8d 83       	std	Y+5, r24	; 0x05
   15370:	83 81       	ldd	r24, Z+3	; 0x03
   15372:	83 ff       	sbrs	r24, 3
   15374:	02 c0       	rjmp	.+4      	; 0x1537a <SS80_send_status+0x88>
   15376:	88 e0       	ldi	r24, 0x08	; 8
   15378:	8f 83       	std	Y+7, r24	; 0x07
   1537a:	83 81       	ldd	r24, Z+3	; 0x03
   1537c:	94 81       	ldd	r25, Z+4	; 0x04
   1537e:	89 2b       	or	r24, r25
   15380:	59 f4       	brne	.+22     	; 0x15398 <SS80_send_status+0xa6>
   15382:	07 81       	ldd	r16, Z+7	; 0x07
   15384:	10 85       	ldd	r17, Z+8	; 0x08
   15386:	21 85       	ldd	r18, Z+9	; 0x09
   15388:	32 85       	ldd	r19, Z+10	; 0x0a
   1538a:	46 e0       	ldi	r20, 0x06	; 6
   1538c:	50 e0       	ldi	r21, 0x00	; 0
   1538e:	6a e0       	ldi	r22, 0x0A	; 10
   15390:	70 e0       	ldi	r23, 0x00	; 0
   15392:	c7 01       	movw	r24, r14
   15394:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   15398:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   1539c:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   153a0:	83 81       	ldd	r24, Z+3	; 0x03
   153a2:	94 81       	ldd	r25, Z+4	; 0x04
   153a4:	89 2b       	or	r24, r25
   153a6:	11 f0       	breq	.+4      	; 0x153ac <SS80_send_status+0xba>
   153a8:	81 e0       	ldi	r24, 0x01	; 1
   153aa:	82 83       	std	Z+2, r24	; 0x02
   153ac:	80 e0       	ldi	r24, 0x00	; 0
   153ae:	91 e0       	ldi	r25, 0x01	; 1
   153b0:	9e 8b       	std	Y+22, r25	; 0x16
   153b2:	8d 8b       	std	Y+21, r24	; 0x15
   153b4:	ae 01       	movw	r20, r28
   153b6:	4b 5e       	subi	r20, 0xEB	; 235
   153b8:	5f 4f       	sbci	r21, 0xFF	; 255
   153ba:	64 e1       	ldi	r22, 0x14	; 20
   153bc:	70 e0       	ldi	r23, 0x00	; 0
   153be:	c7 01       	movw	r24, r14
   153c0:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_write_str>
   153c4:	44 97       	sbiw	r24, 0x14	; 20
   153c6:	71 f0       	breq	.+28     	; 0x153e4 <SS80_send_status+0xf2>
   153c8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   153cc:	80 ff       	sbrs	r24, 0
   153ce:	0a c0       	rjmp	.+20     	; 0x153e4 <SS80_send_status+0xf2>
   153d0:	88 e7       	ldi	r24, 0x78	; 120
   153d2:	95 e2       	ldi	r25, 0x25	; 37
   153d4:	1f 92       	push	r1
   153d6:	9f 93       	push	r25
   153d8:	8f 93       	push	r24
   153da:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   153de:	0f 90       	pop	r0
   153e0:	0f 90       	pop	r0
   153e2:	0f 90       	pop	r0
   153e4:	8d 89       	ldd	r24, Y+21	; 0x15
   153e6:	9e 89       	ldd	r25, Y+22	; 0x16
   153e8:	88 27       	eor	r24, r24
   153ea:	90 7d       	andi	r25, 0xD0	; 208
   153ec:	66 96       	adiw	r28, 0x16	; 22
   153ee:	e6 e0       	ldi	r30, 0x06	; 6
   153f0:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

000153f4 <SS80_describe>:
   153f4:	a4 e0       	ldi	r26, 0x04	; 4
   153f6:	b0 e0       	ldi	r27, 0x00	; 0
   153f8:	e0 e0       	ldi	r30, 0x00	; 0
   153fa:	fa ea       	ldi	r31, 0xAA	; 170
   153fc:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
   15400:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15404:	85 ff       	sbrs	r24, 5
   15406:	0a c0       	rjmp	.+20     	; 0x1541c <SS80_describe+0x28>
   15408:	87 e6       	ldi	r24, 0x67	; 103
   1540a:	95 e2       	ldi	r25, 0x25	; 37
   1540c:	1f 92       	push	r1
   1540e:	9f 93       	push	r25
   15410:	8f 93       	push	r24
   15412:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15416:	0f 90       	pop	r0
   15418:	0f 90       	pop	r0
   1541a:	0f 90       	pop	r0
   1541c:	1c 82       	std	Y+4, r1	; 0x04
   1541e:	1b 82       	std	Y+3, r1	; 0x03
   15420:	ce 01       	movw	r24, r28
   15422:	01 96       	adiw	r24, 0x01	; 1
   15424:	88 dd       	rcall	.-1264   	; 0x14f36 <SS80ControllerPack>
   15426:	69 81       	ldd	r22, Y+1	; 0x01
   15428:	7a 81       	ldd	r23, Y+2	; 0x02
   1542a:	ae 01       	movw	r20, r28
   1542c:	4d 5f       	subi	r20, 0xFD	; 253
   1542e:	5f 4f       	sbci	r21, 0xFF	; 255
   15430:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_write_str>
   15434:	29 81       	ldd	r18, Y+1	; 0x01
   15436:	3a 81       	ldd	r19, Y+2	; 0x02
   15438:	82 17       	cp	r24, r18
   1543a:	93 07       	cpc	r25, r19
   1543c:	39 f0       	breq	.+14     	; 0x1544c <SS80_describe+0x58>
   1543e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15442:	80 ff       	sbrs	r24, 0
   15444:	3c c0       	rjmp	.+120    	; 0x154be <SS80_describe+0xca>
   15446:	84 e4       	ldi	r24, 0x44	; 68
   15448:	95 e2       	ldi	r25, 0x25	; 37
   1544a:	31 c0       	rjmp	.+98     	; 0x154ae <SS80_describe+0xba>
   1544c:	1c 82       	std	Y+4, r1	; 0x04
   1544e:	1b 82       	std	Y+3, r1	; 0x03
   15450:	ce 01       	movw	r24, r28
   15452:	01 96       	adiw	r24, 0x01	; 1
   15454:	ac dd       	rcall	.-1192   	; 0x14fae <SS80UnitPack>
   15456:	69 81       	ldd	r22, Y+1	; 0x01
   15458:	7a 81       	ldd	r23, Y+2	; 0x02
   1545a:	ae 01       	movw	r20, r28
   1545c:	4d 5f       	subi	r20, 0xFD	; 253
   1545e:	5f 4f       	sbci	r21, 0xFF	; 255
   15460:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_write_str>
   15464:	29 81       	ldd	r18, Y+1	; 0x01
   15466:	3a 81       	ldd	r19, Y+2	; 0x02
   15468:	82 17       	cp	r24, r18
   1546a:	93 07       	cpc	r25, r19
   1546c:	39 f0       	breq	.+14     	; 0x1547c <SS80_describe+0x88>
   1546e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15472:	80 ff       	sbrs	r24, 0
   15474:	24 c0       	rjmp	.+72     	; 0x154be <SS80_describe+0xca>
   15476:	87 e2       	ldi	r24, 0x27	; 39
   15478:	95 e2       	ldi	r25, 0x25	; 37
   1547a:	19 c0       	rjmp	.+50     	; 0x154ae <SS80_describe+0xba>
   1547c:	80 e0       	ldi	r24, 0x00	; 0
   1547e:	91 e0       	ldi	r25, 0x01	; 1
   15480:	9c 83       	std	Y+4, r25	; 0x04
   15482:	8b 83       	std	Y+3, r24	; 0x03
   15484:	ce 01       	movw	r24, r28
   15486:	01 96       	adiw	r24, 0x01	; 1
   15488:	5e de       	rcall	.-836    	; 0x15146 <SS80VolumePack>
   1548a:	69 81       	ldd	r22, Y+1	; 0x01
   1548c:	7a 81       	ldd	r23, Y+2	; 0x02
   1548e:	ae 01       	movw	r20, r28
   15490:	4d 5f       	subi	r20, 0xFD	; 253
   15492:	5f 4f       	sbci	r21, 0xFF	; 255
   15494:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_write_str>
   15498:	29 81       	ldd	r18, Y+1	; 0x01
   1549a:	3a 81       	ldd	r19, Y+2	; 0x02
   1549c:	82 17       	cp	r24, r18
   1549e:	93 07       	cpc	r25, r19
   154a0:	99 f0       	breq	.+38     	; 0x154c8 <SS80_describe+0xd4>
   154a2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   154a6:	80 ff       	sbrs	r24, 0
   154a8:	0a c0       	rjmp	.+20     	; 0x154be <SS80_describe+0xca>
   154aa:	88 e0       	ldi	r24, 0x08	; 8
   154ac:	95 e2       	ldi	r25, 0x25	; 37
   154ae:	1f 92       	push	r1
   154b0:	9f 93       	push	r25
   154b2:	8f 93       	push	r24
   154b4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   154b8:	0f 90       	pop	r0
   154ba:	0f 90       	pop	r0
   154bc:	0f 90       	pop	r0
   154be:	8b 81       	ldd	r24, Y+3	; 0x03
   154c0:	9c 81       	ldd	r25, Y+4	; 0x04
   154c2:	88 27       	eor	r24, r24
   154c4:	90 7d       	andi	r25, 0xD0	; 208
   154c6:	02 c0       	rjmp	.+4      	; 0x154cc <SS80_describe+0xd8>
   154c8:	80 e0       	ldi	r24, 0x00	; 0
   154ca:	90 e0       	ldi	r25, 0x00	; 0
   154cc:	24 96       	adiw	r28, 0x04	; 4
   154ce:	e2 e0       	ldi	r30, 0x02	; 2
   154d0:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

000154d4 <SS80_Check_Unit>:
   154d4:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   154d8:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   154dc:	88 23       	and	r24, r24
   154de:	d1 f0       	breq	.+52     	; 0x15514 <SS80_Check_Unit+0x40>
   154e0:	8f 30       	cpi	r24, 0x0F	; 15
   154e2:	c1 f0       	breq	.+48     	; 0x15514 <SS80_Check_Unit+0x40>
   154e4:	23 81       	ldd	r18, Z+3	; 0x03
   154e6:	34 81       	ldd	r19, Z+4	; 0x04
   154e8:	20 64       	ori	r18, 0x40	; 64
   154ea:	34 83       	std	Z+4, r19	; 0x04
   154ec:	23 83       	std	Z+3, r18	; 0x03
   154ee:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   154f2:	90 ff       	sbrs	r25, 0
   154f4:	10 c0       	rjmp	.+32     	; 0x15516 <SS80_Check_Unit+0x42>
   154f6:	1f 92       	push	r1
   154f8:	8f 93       	push	r24
   154fa:	80 ef       	ldi	r24, 0xF0	; 240
   154fc:	94 e2       	ldi	r25, 0x24	; 36
   154fe:	1f 92       	push	r1
   15500:	9f 93       	push	r25
   15502:	8f 93       	push	r24
   15504:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15508:	0f 90       	pop	r0
   1550a:	0f 90       	pop	r0
   1550c:	0f 90       	pop	r0
   1550e:	0f 90       	pop	r0
   15510:	0f 90       	pop	r0
   15512:	08 95       	ret
   15514:	85 83       	std	Z+5, r24	; 0x05
   15516:	08 95       	ret

00015518 <SS80_Check_Volume>:
   15518:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   1551c:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15520:	88 23       	and	r24, r24
   15522:	c1 f0       	breq	.+48     	; 0x15554 <SS80_Check_Volume+0x3c>
   15524:	23 81       	ldd	r18, Z+3	; 0x03
   15526:	34 81       	ldd	r19, Z+4	; 0x04
   15528:	20 64       	ori	r18, 0x40	; 64
   1552a:	34 83       	std	Z+4, r19	; 0x04
   1552c:	23 83       	std	Z+3, r18	; 0x03
   1552e:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   15532:	90 ff       	sbrs	r25, 0
   15534:	10 c0       	rjmp	.+32     	; 0x15556 <SS80_Check_Volume+0x3e>
   15536:	1f 92       	push	r1
   15538:	8f 93       	push	r24
   1553a:	86 ed       	ldi	r24, 0xD6	; 214
   1553c:	94 e2       	ldi	r25, 0x24	; 36
   1553e:	1f 92       	push	r1
   15540:	9f 93       	push	r25
   15542:	8f 93       	push	r24
   15544:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15548:	0f 90       	pop	r0
   1554a:	0f 90       	pop	r0
   1554c:	0f 90       	pop	r0
   1554e:	0f 90       	pop	r0
   15550:	0f 90       	pop	r0
   15552:	08 95       	ret
   15554:	16 82       	std	Z+6, r1	; 0x06
   15556:	08 95       	ret

00015558 <SS80_Command_State>:
   15558:	2f 92       	push	r2
   1555a:	3f 92       	push	r3
   1555c:	4f 92       	push	r4
   1555e:	6f 92       	push	r6
   15560:	7f 92       	push	r7
   15562:	8f 92       	push	r8
   15564:	af 92       	push	r10
   15566:	bf 92       	push	r11
   15568:	cf 92       	push	r12
   1556a:	df 92       	push	r13
   1556c:	ef 92       	push	r14
   1556e:	ff 92       	push	r15
   15570:	0f 93       	push	r16
   15572:	1f 93       	push	r17
   15574:	cf 93       	push	r28
   15576:	df 93       	push	r29
   15578:	cd b7       	in	r28, 0x3d	; 61
   1557a:	de b7       	in	r29, 0x3e	; 62
   1557c:	60 97       	sbiw	r28, 0x10	; 16
   1557e:	0f b6       	in	r0, 0x3f	; 63
   15580:	f8 94       	cli
   15582:	de bf       	out	0x3e, r29	; 62
   15584:	0f be       	out	0x3f, r0	; 63
   15586:	cd bf       	out	0x3d, r28	; 61
   15588:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   1558c:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15590:	81 81       	ldd	r24, Z+1	; 0x01
   15592:	90 e0       	ldi	r25, 0x00	; 0
   15594:	0e 94 17 86 	call	0x10c2e	; 0x10c2e <gpib_disable_PPR>
   15598:	80 e0       	ldi	r24, 0x00	; 0
   1559a:	91 e0       	ldi	r25, 0x01	; 1
   1559c:	9a 83       	std	Y+2, r25	; 0x02
   1559e:	89 83       	std	Y+1, r24	; 0x01
   155a0:	ae 01       	movw	r20, r28
   155a2:	4f 5f       	subi	r20, 0xFF	; 255
   155a4:	5f 4f       	sbci	r21, 0xFF	; 255
   155a6:	60 e0       	ldi	r22, 0x00	; 0
   155a8:	72 e0       	ldi	r23, 0x02	; 2
   155aa:	82 ee       	ldi	r24, 0xE2	; 226
   155ac:	9b e1       	ldi	r25, 0x1B	; 27
   155ae:	0e 94 88 8a 	call	0x11510	; 0x11510 <gpib_read_str>
   155b2:	6c 01       	movw	r12, r24
   155b4:	89 81       	ldd	r24, Y+1	; 0x01
   155b6:	9a 81       	ldd	r25, Y+2	; 0x02
   155b8:	9c 01       	movw	r18, r24
   155ba:	22 27       	eor	r18, r18
   155bc:	30 7d       	andi	r19, 0xD0	; 208
   155be:	23 2b       	or	r18, r19
   155c0:	79 f0       	breq	.+30     	; 0x155e0 <SS80_Command_State+0x88>
   155c2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   155c6:	80 ff       	sbrs	r24, 0
   155c8:	21 c2       	rjmp	.+1090   	; 0x15a0c <SS80_Command_State+0x4b4>
   155ca:	80 eb       	ldi	r24, 0xB0	; 176
   155cc:	94 e2       	ldi	r25, 0x24	; 36
   155ce:	1f 92       	push	r1
   155d0:	9f 93       	push	r25
   155d2:	8f 93       	push	r24
   155d4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   155d8:	0f 90       	pop	r0
   155da:	0f 90       	pop	r0
   155dc:	0f 90       	pop	r0
   155de:	16 c2       	rjmp	.+1068   	; 0x15a0c <SS80_Command_State+0x4b4>
   155e0:	c1 14       	cp	r12, r1
   155e2:	d1 04       	cpc	r13, r1
   155e4:	09 f4       	brne	.+2      	; 0x155e8 <SS80_Command_State+0x90>
   155e6:	17 c2       	rjmp	.+1070   	; 0x15a16 <SS80_Command_State+0x4be>
   155e8:	90 fd       	sbrc	r25, 0
   155ea:	0e c0       	rjmp	.+28     	; 0x15608 <SS80_Command_State+0xb0>
   155ec:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   155f0:	80 ff       	sbrs	r24, 0
   155f2:	0a c0       	rjmp	.+20     	; 0x15608 <SS80_Command_State+0xb0>
   155f4:	87 e9       	ldi	r24, 0x97	; 151
   155f6:	94 e2       	ldi	r25, 0x24	; 36
   155f8:	1f 92       	push	r1
   155fa:	9f 93       	push	r25
   155fc:	8f 93       	push	r24
   155fe:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15602:	0f 90       	pop	r0
   15604:	0f 90       	pop	r0
   15606:	0f 90       	pop	r0
   15608:	e1 2c       	mov	r14, r1
   1560a:	f1 2c       	mov	r15, r1
   1560c:	8b e9       	ldi	r24, 0x9B	; 155
   1560e:	93 e2       	ldi	r25, 0x23	; 35
   15610:	9c 01       	movw	r18, r24
   15612:	40 e0       	ldi	r20, 0x00	; 0
   15614:	2d 83       	std	Y+5, r18	; 0x05
   15616:	3e 83       	std	Y+6, r19	; 0x06
   15618:	4f 83       	std	Y+7, r20	; 0x07
   1561a:	80 ec       	ldi	r24, 0xC0	; 192
   1561c:	93 e2       	ldi	r25, 0x23	; 35
   1561e:	9c 01       	movw	r18, r24
   15620:	40 e0       	ldi	r20, 0x00	; 0
   15622:	28 87       	std	Y+8, r18	; 0x08
   15624:	39 87       	std	Y+9, r19	; 0x09
   15626:	4a 87       	std	Y+10, r20	; 0x0a
   15628:	8a ed       	ldi	r24, 0xDA	; 218
   1562a:	93 e2       	ldi	r25, 0x23	; 35
   1562c:	9c 01       	movw	r18, r24
   1562e:	40 e0       	ldi	r20, 0x00	; 0
   15630:	2b 87       	std	Y+11, r18	; 0x0b
   15632:	3c 87       	std	Y+12, r19	; 0x0c
   15634:	4d 87       	std	Y+13, r20	; 0x0d
   15636:	80 ef       	ldi	r24, 0xF0	; 240
   15638:	93 e2       	ldi	r25, 0x23	; 35
   1563a:	3c 01       	movw	r6, r24
   1563c:	8e ef       	ldi	r24, 0xFE	; 254
   1563e:	93 e2       	ldi	r25, 0x23	; 35
   15640:	9c 01       	movw	r18, r24
   15642:	40 e0       	ldi	r20, 0x00	; 0
   15644:	2e 87       	std	Y+14, r18	; 0x0e
   15646:	3f 87       	std	Y+15, r19	; 0x0f
   15648:	48 8b       	std	Y+16, r20	; 0x10
   1564a:	8a e1       	ldi	r24, 0x1A	; 26
   1564c:	94 e2       	ldi	r25, 0x24	; 36
   1564e:	1c 01       	movw	r2, r24
   15650:	88 e6       	ldi	r24, 0x68	; 104
   15652:	a8 2e       	mov	r10, r24
   15654:	84 e2       	ldi	r24, 0x24	; 36
   15656:	b8 2e       	mov	r11, r24
   15658:	87 01       	movw	r16, r14
   1565a:	ec 14       	cp	r14, r12
   1565c:	fd 04       	cpc	r15, r13
   1565e:	0c f0       	brlt	.+2      	; 0x15662 <SS80_Command_State+0x10a>
   15660:	b6 c1       	rjmp	.+876    	; 0x159ce <SS80_Command_State+0x476>
   15662:	0f 5f       	subi	r16, 0xFF	; 255
   15664:	1f 4f       	sbci	r17, 0xFF	; 255
   15666:	f7 01       	movw	r30, r14
   15668:	ee 51       	subi	r30, 0x1E	; 30
   1566a:	f4 4e       	sbci	r31, 0xE4	; 228
   1566c:	80 81       	ld	r24, Z
   1566e:	28 2f       	mov	r18, r24
   15670:	30 e0       	ldi	r19, 0x00	; 0
   15672:	a9 01       	movw	r20, r18
   15674:	40 52       	subi	r20, 0x20	; 32
   15676:	51 09       	sbc	r21, r1
   15678:	40 31       	cpi	r20, 0x10	; 16
   1567a:	51 05       	cpc	r21, r1
   1567c:	80 f4       	brcc	.+32     	; 0x1569e <SS80_Command_State+0x146>
   1567e:	80 52       	subi	r24, 0x20	; 32
   15680:	29 df       	rcall	.-430    	; 0x154d4 <SS80_Check_Unit>
   15682:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15686:	85 ff       	sbrs	r24, 5
   15688:	a0 c1       	rjmp	.+832    	; 0x159ca <SS80_Command_State+0x472>
   1568a:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   1568e:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15692:	85 81       	ldd	r24, Z+5	; 0x05
   15694:	1f 92       	push	r1
   15696:	8f 93       	push	r24
   15698:	81 e8       	ldi	r24, 0x81	; 129
   1569a:	94 e2       	ldi	r25, 0x24	; 36
   1569c:	14 c0       	rjmp	.+40     	; 0x156c6 <SS80_Command_State+0x16e>
   1569e:	a9 01       	movw	r20, r18
   156a0:	40 54       	subi	r20, 0x40	; 64
   156a2:	51 09       	sbc	r21, r1
   156a4:	40 31       	cpi	r20, 0x10	; 16
   156a6:	51 05       	cpc	r21, r1
   156a8:	c8 f4       	brcc	.+50     	; 0x156dc <SS80_Command_State+0x184>
   156aa:	80 54       	subi	r24, 0x40	; 64
   156ac:	35 df       	rcall	.-406    	; 0x15518 <SS80_Check_Volume>
   156ae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   156b2:	85 ff       	sbrs	r24, 5
   156b4:	8a c1       	rjmp	.+788    	; 0x159ca <SS80_Command_State+0x472>
   156b6:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   156ba:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   156be:	86 81       	ldd	r24, Z+6	; 0x06
   156c0:	1f 92       	push	r1
   156c2:	8f 93       	push	r24
   156c4:	c5 01       	movw	r24, r10
   156c6:	1f 92       	push	r1
   156c8:	9f 93       	push	r25
   156ca:	8f 93       	push	r24
   156cc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   156d0:	0f 90       	pop	r0
   156d2:	0f 90       	pop	r0
   156d4:	0f 90       	pop	r0
   156d6:	0f 90       	pop	r0
   156d8:	0f 90       	pop	r0
   156da:	77 c1       	rjmp	.+750    	; 0x159ca <SS80_Command_State+0x472>
   156dc:	21 15       	cp	r18, r1
   156de:	31 05       	cpc	r19, r1
   156e0:	79 f4       	brne	.+30     	; 0x15700 <SS80_Command_State+0x1a8>
   156e2:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   156e6:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   156ea:	81 e0       	ldi	r24, 0x01	; 1
   156ec:	90 e0       	ldi	r25, 0x00	; 0
   156ee:	91 83       	std	Z+1, r25	; 0x01
   156f0:	80 83       	st	Z, r24
   156f2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   156f6:	85 ff       	sbrs	r24, 5
   156f8:	6a c1       	rjmp	.+724    	; 0x159ce <SS80_Command_State+0x476>
   156fa:	80 e5       	ldi	r24, 0x50	; 80
   156fc:	94 e2       	ldi	r25, 0x24	; 36
   156fe:	0f c0       	rjmp	.+30     	; 0x1571e <SS80_Command_State+0x1c6>
   15700:	22 30       	cpi	r18, 0x02	; 2
   15702:	31 05       	cpc	r19, r1
   15704:	a9 f4       	brne	.+42     	; 0x15730 <SS80_Command_State+0x1d8>
   15706:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   1570a:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   1570e:	31 83       	std	Z+1, r19	; 0x01
   15710:	20 83       	st	Z, r18
   15712:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15716:	85 ff       	sbrs	r24, 5
   15718:	5a c1       	rjmp	.+692    	; 0x159ce <SS80_Command_State+0x476>
   1571a:	87 e3       	ldi	r24, 0x37	; 55
   1571c:	94 e2       	ldi	r25, 0x24	; 36
   1571e:	1f 92       	push	r1
   15720:	9f 93       	push	r25
   15722:	8f 93       	push	r24
   15724:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15728:	0f 90       	pop	r0
   1572a:	0f 90       	pop	r0
   1572c:	0f 90       	pop	r0
   1572e:	4f c1       	rjmp	.+670    	; 0x159ce <SS80_Command_State+0x476>
   15730:	20 31       	cpi	r18, 0x10	; 16
   15732:	31 05       	cpc	r19, r1
   15734:	a1 f5       	brne	.+104    	; 0x1579e <SS80_Command_State+0x246>
   15736:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <SS80s>
   1573a:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <SS80s+0x1>
   1573e:	9c 83       	std	Y+4, r25	; 0x04
   15740:	8b 83       	std	Y+3, r24	; 0x03
   15742:	46 e0       	ldi	r20, 0x06	; 6
   15744:	50 e0       	ldi	r21, 0x00	; 0
   15746:	b8 01       	movw	r22, r16
   15748:	82 ee       	ldi	r24, 0xE2	; 226
   1574a:	9b e1       	ldi	r25, 0x1B	; 27
   1574c:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   15750:	eb 81       	ldd	r30, Y+3	; 0x03
   15752:	fc 81       	ldd	r31, Y+4	; 0x04
   15754:	67 83       	std	Z+7, r22	; 0x07
   15756:	70 87       	std	Z+8, r23	; 0x08
   15758:	81 87       	std	Z+9, r24	; 0x09
   1575a:	92 87       	std	Z+10, r25	; 0x0a
   1575c:	87 01       	movw	r16, r14
   1575e:	09 5f       	subi	r16, 0xF9	; 249
   15760:	1f 4f       	sbci	r17, 0xFF	; 255
   15762:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15766:	85 ff       	sbrs	r24, 5
   15768:	30 c1       	rjmp	.+608    	; 0x159ca <SS80_Command_State+0x472>
   1576a:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   1576e:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15772:	a0 91 67 18 	lds	r26, 0x1867	; 0x801867 <SS80p>
   15776:	b0 91 68 18 	lds	r27, 0x1868	; 0x801868 <SS80p+0x1>
   1577a:	9f 96       	adiw	r26, 0x2f	; 47
   1577c:	0d 90       	ld	r0, X+
   1577e:	bc 91       	ld	r27, X
   15780:	a0 2d       	mov	r26, r0
   15782:	27 81       	ldd	r18, Z+7	; 0x07
   15784:	30 85       	ldd	r19, Z+8	; 0x08
   15786:	41 85       	ldd	r20, Z+9	; 0x09
   15788:	52 85       	ldd	r21, Z+10	; 0x0a
   1578a:	0e 94 15 e5 	call	0x1ca2a	; 0x1ca2a <__muluhisi3>
   1578e:	9f 93       	push	r25
   15790:	8f 93       	push	r24
   15792:	7f 93       	push	r23
   15794:	6f 93       	push	r22
   15796:	1f 92       	push	r1
   15798:	3f 92       	push	r3
   1579a:	2f 92       	push	r2
   1579c:	2e c0       	rjmp	.+92     	; 0x157fa <SS80_Command_State+0x2a2>
   1579e:	28 31       	cpi	r18, 0x18	; 24
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   157a0:	31 05       	cpc	r19, r1
   157a2:	99 f5       	brne	.+102    	; 0x1580a <SS80_Command_State+0x2b2>
   157a4:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <SS80s>
   157a8:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <SS80s+0x1>
   157ac:	9c 83       	std	Y+4, r25	; 0x04
   157ae:	8b 83       	std	Y+3, r24	; 0x03
   157b0:	44 e0       	ldi	r20, 0x04	; 4
   157b2:	50 e0       	ldi	r21, 0x00	; 0
   157b4:	b8 01       	movw	r22, r16
   157b6:	82 ee       	ldi	r24, 0xE2	; 226
   157b8:	9b e1       	ldi	r25, 0x1B	; 27
   157ba:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   157be:	eb 81       	ldd	r30, Y+3	; 0x03
   157c0:	fc 81       	ldd	r31, Y+4	; 0x04
   157c2:	63 87       	std	Z+11, r22	; 0x0b
   157c4:	74 87       	std	Z+12, r23	; 0x0c
   157c6:	85 87       	std	Z+13, r24	; 0x0d
   157c8:	96 87       	std	Z+14, r25	; 0x0e
   157ca:	87 01       	movw	r16, r14
   157cc:	0b 5f       	subi	r16, 0xFB	; 251
   157ce:	1f 4f       	sbci	r17, 0xFF	; 255
   157d0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   157d4:	85 ff       	sbrs	r24, 5
   157d6:	f9 c0       	rjmp	.+498    	; 0x159ca <SS80_Command_State+0x472>
   157d8:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   157dc:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   157e0:	86 85       	ldd	r24, Z+14	; 0x0e
   157e2:	8f 93       	push	r24
   157e4:	85 85       	ldd	r24, Z+13	; 0x0d
   157e6:	8f 93       	push	r24
   157e8:	84 85       	ldd	r24, Z+12	; 0x0c
   157ea:	8f 93       	push	r24
   157ec:	83 85       	ldd	r24, Z+11	; 0x0b
   157ee:	8f 93       	push	r24
   157f0:	1f 92       	push	r1
   157f2:	ff 85       	ldd	r31, Y+15	; 0x0f
   157f4:	ff 93       	push	r31
   157f6:	2e 85       	ldd	r18, Y+14	; 0x0e
   157f8:	2f 93       	push	r18
   157fa:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   157fe:	0f b6       	in	r0, 0x3f	; 63
   15800:	f8 94       	cli
   15802:	de bf       	out	0x3e, r29	; 62
   15804:	0f be       	out	0x3f, r0	; 63
   15806:	cd bf       	out	0x3d, r28	; 61
   15808:	e0 c0       	rjmp	.+448    	; 0x159ca <SS80_Command_State+0x472>
   1580a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1580e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   15812:	24 33       	cpi	r18, 0x34	; 52
   15814:	31 05       	cpc	r19, r1
   15816:	31 f4       	brne	.+12     	; 0x15824 <SS80_Command_State+0x2cc>
   15818:	85 ff       	sbrs	r24, 5
   1581a:	d7 c0       	rjmp	.+430    	; 0x159ca <SS80_Command_State+0x472>
   1581c:	1f 92       	push	r1
   1581e:	7f 92       	push	r7
   15820:	6f 92       	push	r6
   15822:	2c c0       	rjmp	.+88     	; 0x1587c <SS80_Command_State+0x324>
   15824:	29 33       	cpi	r18, 0x39	; 57
   15826:	31 05       	cpc	r19, r1
   15828:	59 f4       	brne	.+22     	; 0x15840 <SS80_Command_State+0x2e8>
   1582a:	87 01       	movw	r16, r14
   1582c:	0d 5f       	subi	r16, 0xFD	; 253
   1582e:	1f 4f       	sbci	r17, 0xFF	; 255
   15830:	85 ff       	sbrs	r24, 5
   15832:	cb c0       	rjmp	.+406    	; 0x159ca <SS80_Command_State+0x472>
   15834:	1f 92       	push	r1
   15836:	9c 85       	ldd	r25, Y+12	; 0x0c
   15838:	9f 93       	push	r25
   1583a:	eb 85       	ldd	r30, Y+11	; 0x0b
    return ( uart_rx_count( uart ) );
   1583c:	ef 93       	push	r30
}
   1583e:	1e c0       	rjmp	.+60     	; 0x1587c <SS80_Command_State+0x324>
   15840:	2b 33       	cpi	r18, 0x3B	; 59
   15842:	31 05       	cpc	r19, r1
   15844:	59 f4       	brne	.+22     	; 0x1585c <SS80_Command_State+0x304>
   15846:	87 01       	movw	r16, r14
   15848:	0e 5f       	subi	r16, 0xFE	; 254
   1584a:	1f 4f       	sbci	r17, 0xFF	; 255
   1584c:	85 ff       	sbrs	r24, 5
   1584e:	bd c0       	rjmp	.+378    	; 0x159ca <SS80_Command_State+0x472>
   15850:	1f 92       	push	r1
   15852:	f9 85       	ldd	r31, Y+9	; 0x09
   15854:	ff 93       	push	r31
   15856:	28 85       	ldd	r18, Y+8	; 0x08
   15858:	2f 93       	push	r18
   1585a:	10 c0       	rjmp	.+32     	; 0x1587c <SS80_Command_State+0x324>
   1585c:	28 34       	cpi	r18, 0x48	; 72
   1585e:	31 05       	cpc	r19, r1
   15860:	99 f4       	brne	.+38     	; 0x15888 <SS80_Command_State+0x330>
   15862:	87 01       	movw	r16, r14
   15864:	0e 5f       	subi	r16, 0xFE	; 254
   15866:	1f 4f       	sbci	r17, 0xFF	; 255
   15868:	80 73       	andi	r24, 0x30	; 48
   1586a:	99 27       	eor	r25, r25
   1586c:	89 2b       	or	r24, r25
   1586e:	09 f4       	brne	.+2      	; 0x15872 <SS80_Command_State+0x31a>
   15870:	ac c0       	rjmp	.+344    	; 0x159ca <SS80_Command_State+0x472>
   15872:	1f 92       	push	r1
   15874:	3e 81       	ldd	r19, Y+6	; 0x06
   15876:	3f 93       	push	r19
   15878:	4d 81       	ldd	r20, Y+5	; 0x05
   1587a:	4f 93       	push	r20
   1587c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15880:	0f 90       	pop	r0
   15882:	0f 90       	pop	r0
   15884:	0f 90       	pop	r0
   15886:	a1 c0       	rjmp	.+322    	; 0x159ca <SS80_Command_State+0x472>
   15888:	24 30       	cpi	r18, 0x04	; 4
   1588a:	31 05       	cpc	r19, r1
   1588c:	41 f4       	brne	.+16     	; 0x1589e <SS80_Command_State+0x346>
   1588e:	80 73       	andi	r24, 0x30	; 48
   15890:	99 27       	eor	r25, r25
   15892:	89 2b       	or	r24, r25
   15894:	09 f4       	brne	.+2      	; 0x15898 <SS80_Command_State+0x340>
   15896:	9b c0       	rjmp	.+310    	; 0x159ce <SS80_Command_State+0x476>
   15898:	8a e7       	ldi	r24, 0x7A	; 122
   1589a:	93 e2       	ldi	r25, 0x23	; 35
   1589c:	40 cf       	rjmp	.-384    	; 0x1571e <SS80_Command_State+0x1c6>
   1589e:	2e 30       	cpi	r18, 0x0E	; 14
   158a0:	31 05       	cpc	r19, r1
   158a2:	29 f4       	brne	.+10     	; 0x158ae <SS80_Command_State+0x356>
   158a4:	85 ff       	sbrs	r24, 5
   158a6:	93 c0       	rjmp	.+294    	; 0x159ce <SS80_Command_State+0x476>
   158a8:	84 e6       	ldi	r24, 0x64	; 100
   158aa:	93 e2       	ldi	r25, 0x23	; 35
   158ac:	38 cf       	rjmp	.-400    	; 0x1571e <SS80_Command_State+0x1c6>
   158ae:	2f 30       	cpi	r18, 0x0F	; 15
   158b0:	31 05       	cpc	r19, r1
   158b2:	29 f4       	brne	.+10     	; 0x158be <SS80_Command_State+0x366>
   158b4:	85 ff       	sbrs	r24, 5
   158b6:	8b c0       	rjmp	.+278    	; 0x159ce <SS80_Command_State+0x476>
   158b8:	87 e4       	ldi	r24, 0x47	; 71
   158ba:	93 e2       	ldi	r25, 0x23	; 35
   158bc:	30 cf       	rjmp	.-416    	; 0x1571e <SS80_Command_State+0x1c6>
   158be:	21 33       	cpi	r18, 0x31	; 49
   158c0:	31 05       	cpc	r19, r1
   158c2:	41 f4       	brne	.+16     	; 0x158d4 <SS80_Command_State+0x37c>
   158c4:	87 01       	movw	r16, r14
   158c6:	0d 5f       	subi	r16, 0xFD	; 253
   158c8:	1f 4f       	sbci	r17, 0xFF	; 255
   158ca:	85 ff       	sbrs	r24, 5
   158cc:	80 c0       	rjmp	.+256    	; 0x159ce <SS80_Command_State+0x476>
   158ce:	8b e2       	ldi	r24, 0x2B	; 43
   158d0:	93 e2       	ldi	r25, 0x23	; 35
   158d2:	25 cf       	rjmp	.-438    	; 0x1571e <SS80_Command_State+0x1c6>
   158d4:	25 33       	cpi	r18, 0x35	; 53
   158d6:	31 05       	cpc	r19, r1
   158d8:	69 f4       	brne	.+26     	; 0x158f4 <SS80_Command_State+0x39c>
   158da:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   158de:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   158e2:	24 e0       	ldi	r18, 0x04	; 4
   158e4:	30 e0       	ldi	r19, 0x00	; 0
   158e6:	31 83       	std	Z+1, r19	; 0x01
   158e8:	20 83       	st	Z, r18
   158ea:	85 ff       	sbrs	r24, 5
   158ec:	70 c0       	rjmp	.+224    	; 0x159ce <SS80_Command_State+0x476>
   158ee:	8a e1       	ldi	r24, 0x1A	; 26
   158f0:	93 e2       	ldi	r25, 0x23	; 35
   158f2:	15 cf       	rjmp	.-470    	; 0x1571e <SS80_Command_State+0x1c6>
   158f4:	27 33       	cpi	r18, 0x37	; 55
   158f6:	31 05       	cpc	r19, r1
   158f8:	59 f4       	brne	.+22     	; 0x15910 <SS80_Command_State+0x3b8>
   158fa:	87 01       	movw	r16, r14
   158fc:	0d 5f       	subi	r16, 0xFD	; 253
   158fe:	1f 4f       	sbci	r17, 0xFF	; 255
   15900:	80 73       	andi	r24, 0x30	; 48
   15902:	99 27       	eor	r25, r25
   15904:	89 2b       	or	r24, r25
   15906:	09 f4       	brne	.+2      	; 0x1590a <SS80_Command_State+0x3b2>
   15908:	62 c0       	rjmp	.+196    	; 0x159ce <SS80_Command_State+0x476>
   1590a:	8c ef       	ldi	r24, 0xFC	; 252
   1590c:	92 e2       	ldi	r25, 0x22	; 34
   1590e:	07 cf       	rjmp	.-498    	; 0x1571e <SS80_Command_State+0x1c6>
   15910:	2e 33       	cpi	r18, 0x3E	; 62
   15912:	31 05       	cpc	r19, r1
   15914:	c1 f4       	brne	.+48     	; 0x15946 <SS80_Command_State+0x3ee>
   15916:	80 73       	andi	r24, 0x30	; 48
   15918:	99 27       	eor	r25, r25
   1591a:	89 2b       	or	r24, r25
   1591c:	81 f0       	breq	.+32     	; 0x1593e <SS80_Command_State+0x3e6>
   1591e:	8d ed       	ldi	r24, 0xDD	; 221
   15920:	92 e2       	ldi	r25, 0x22	; 34
   15922:	1f 92       	push	r1
   15924:	9f 93       	push	r25
   15926:	8f 93       	push	r24
   15928:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1592c:	64 ec       	ldi	r22, 0xC4	; 196
   1592e:	7f e0       	ldi	r23, 0x0F	; 15
   15930:	c8 01       	movw	r24, r16
   15932:	8e 51       	subi	r24, 0x1E	; 30
   15934:	94 4e       	sbci	r25, 0xE4	; 228
   15936:	86 dc       	rcall	.-1780   	; 0x15244 <SS80_display_extended_status>
   15938:	0f 90       	pop	r0
   1593a:	0f 90       	pop	r0
   1593c:	0f 90       	pop	r0
   1593e:	87 01       	movw	r16, r14
   15940:	07 5f       	subi	r16, 0xF7	; 247
   15942:	1f 4f       	sbci	r17, 0xFF	; 255
   15944:	44 c0       	rjmp	.+136    	; 0x159ce <SS80_Command_State+0x476>
   15946:	2c 34       	cpi	r18, 0x4C	; 76
   15948:	31 05       	cpc	r19, r1
   1594a:	39 f4       	brne	.+14     	; 0x1595a <SS80_Command_State+0x402>
   1594c:	80 73       	andi	r24, 0x30	; 48
   1594e:	99 27       	eor	r25, r25
   15950:	89 2b       	or	r24, r25
   15952:	e9 f1       	breq	.+122    	; 0x159ce <SS80_Command_State+0x476>
   15954:	82 ec       	ldi	r24, 0xC2	; 194
   15956:	92 e2       	ldi	r25, 0x22	; 34
   15958:	e2 ce       	rjmp	.-572    	; 0x1571e <SS80_Command_State+0x1c6>
   1595a:	2d 34       	cpi	r18, 0x4D	; 77
   1595c:	31 05       	cpc	r19, r1
   1595e:	39 f4       	brne	.+14     	; 0x1596e <SS80_Command_State+0x416>
   15960:	80 73       	andi	r24, 0x30	; 48
   15962:	99 27       	eor	r25, r25
   15964:	89 2b       	or	r24, r25
   15966:	99 f1       	breq	.+102    	; 0x159ce <SS80_Command_State+0x476>
   15968:	89 ea       	ldi	r24, 0xA9	; 169
   1596a:	92 e2       	ldi	r25, 0x22	; 34
   1596c:	d8 ce       	rjmp	.-592    	; 0x1571e <SS80_Command_State+0x1c6>
   1596e:	2d 30       	cpi	r18, 0x0D	; 13
   15970:	31 05       	cpc	r19, r1
   15972:	69 f4       	brne	.+26     	; 0x1598e <SS80_Command_State+0x436>
   15974:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15978:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   1597c:	23 e0       	ldi	r18, 0x03	; 3
   1597e:	30 e0       	ldi	r19, 0x00	; 0
   15980:	31 83       	std	Z+1, r19	; 0x01
   15982:	20 83       	st	Z, r18
   15984:	85 ff       	sbrs	r24, 5
   15986:	23 c0       	rjmp	.+70     	; 0x159ce <SS80_Command_State+0x476>
   15988:	82 e9       	ldi	r24, 0x92	; 146
   1598a:	92 e2       	ldi	r25, 0x22	; 34
   1598c:	c8 ce       	rjmp	.-624    	; 0x1571e <SS80_Command_State+0x1c6>
   1598e:	23 33       	cpi	r18, 0x33	; 51
   15990:	31 05       	cpc	r19, r1
   15992:	51 f4       	brne	.+20     	; 0x159a8 <SS80_Command_State+0x450>
   15994:	87 01       	movw	r16, r14
   15996:	0c 5f       	subi	r16, 0xFC	; 252
   15998:	1f 4f       	sbci	r17, 0xFF	; 255
   1599a:	80 73       	andi	r24, 0x30	; 48
   1599c:	99 27       	eor	r25, r25
   1599e:	89 2b       	or	r24, r25
   159a0:	b1 f0       	breq	.+44     	; 0x159ce <SS80_Command_State+0x476>
   159a2:	81 e7       	ldi	r24, 0x71	; 113
   159a4:	92 e2       	ldi	r25, 0x22	; 34
   159a6:	bb ce       	rjmp	.-650    	; 0x1571e <SS80_Command_State+0x1c6>
   159a8:	80 ff       	sbrs	r24, 0
   159aa:	28 c0       	rjmp	.+80     	; 0x159fc <SS80_Command_State+0x4a4>
   159ac:	3f 93       	push	r19
   159ae:	2f 93       	push	r18
   159b0:	81 e5       	ldi	r24, 0x51	; 81
   159b2:	92 e2       	ldi	r25, 0x22	; 34
   159b4:	1f 92       	push	r1
   159b6:	9f 93       	push	r25
   159b8:	8f 93       	push	r24
   159ba:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   159be:	0f 90       	pop	r0
   159c0:	0f 90       	pop	r0
   159c2:	0f 90       	pop	r0
   159c4:	0f 90       	pop	r0
   159c6:	0f 90       	pop	r0
   159c8:	02 c0       	rjmp	.+4      	; 0x159ce <SS80_Command_State+0x476>
   159ca:	78 01       	movw	r14, r16
   159cc:	45 ce       	rjmp	.-886    	; 0x15658 <SS80_Command_State+0x100>
   159ce:	0c 15       	cp	r16, r12
   159d0:	1d 05       	cpc	r17, r13
   159d2:	a1 f0       	breq	.+40     	; 0x159fc <SS80_Command_State+0x4a4>
   159d4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   159d8:	80 ff       	sbrs	r24, 0
   159da:	10 c0       	rjmp	.+32     	; 0x159fc <SS80_Command_State+0x4a4>
   159dc:	df 92       	push	r13
   159de:	cf 92       	push	r12
   159e0:	1f 93       	push	r17
   159e2:	0f 93       	push	r16
   159e4:	89 e1       	ldi	r24, 0x19	; 25
   159e6:	92 e2       	ldi	r25, 0x22	; 34
   159e8:	1f 92       	push	r1
   159ea:	9f 93       	push	r25
   159ec:	8f 93       	push	r24
   159ee:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   159f2:	0f b6       	in	r0, 0x3f	; 63
   159f4:	f8 94       	cli
   159f6:	de bf       	out	0x3e, r29	; 62
   159f8:	0f be       	out	0x3f, r0	; 63
   159fa:	cd bf       	out	0x3d, r28	; 61
   159fc:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15a00:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15a04:	81 81       	ldd	r24, Z+1	; 0x01
   15a06:	90 e0       	ldi	r25, 0x00	; 0
   15a08:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   15a0c:	89 81       	ldd	r24, Y+1	; 0x01
   15a0e:	9a 81       	ldd	r25, Y+2	; 0x02
   15a10:	88 27       	eor	r24, r24
   15a12:	90 7d       	andi	r25, 0xD0	; 208
   15a14:	02 c0       	rjmp	.+4      	; 0x15a1a <SS80_Command_State+0x4c2>
   15a16:	80 e0       	ldi	r24, 0x00	; 0
   15a18:	90 e0       	ldi	r25, 0x00	; 0
   15a1a:	60 96       	adiw	r28, 0x10	; 16
   15a1c:	0f b6       	in	r0, 0x3f	; 63
   15a1e:	f8 94       	cli
   15a20:	de bf       	out	0x3e, r29	; 62
   15a22:	0f be       	out	0x3f, r0	; 63
   15a24:	cd bf       	out	0x3d, r28	; 61
   15a26:	df 91       	pop	r29
   15a28:	cf 91       	pop	r28
   15a2a:	1f 91       	pop	r17
   15a2c:	0f 91       	pop	r16
   15a2e:	ff 90       	pop	r15
   15a30:	ef 90       	pop	r14
   15a32:	df 90       	pop	r13
   15a34:	cf 90       	pop	r12
   15a36:	bf 90       	pop	r11
   15a38:	af 90       	pop	r10
   15a3a:	8f 90       	pop	r8
   15a3c:	7f 90       	pop	r7
   15a3e:	6f 90       	pop	r6
   15a40:	4f 90       	pop	r4
   15a42:	3f 90       	pop	r3
   15a44:	2f 90       	pop	r2
   15a46:	08 95       	ret

00015a48 <SS80_cmd_seek>:
   15a48:	a0 e0       	ldi	r26, 0x00	; 0
   15a4a:	b0 e0       	ldi	r27, 0x00	; 0
   15a4c:	ea e2       	ldi	r30, 0x2A	; 42
   15a4e:	fd ea       	ldi	r31, 0xAD	; 173
   15a50:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__prologue_saves__+0x4>
   15a54:	c0 91 65 18 	lds	r28, 0x1865	; 0x801865 <SS80s>
   15a58:	d0 91 66 18 	lds	r29, 0x1866	; 0x801866 <SS80s+0x1>
   15a5c:	8f 80       	ldd	r8, Y+7	; 0x07
   15a5e:	98 84       	ldd	r9, Y+8	; 0x08
   15a60:	a9 84       	ldd	r10, Y+9	; 0x09
   15a62:	ba 84       	ldd	r11, Y+10	; 0x0a
   15a64:	00 91 67 18 	lds	r16, 0x1867	; 0x801867 <SS80p>
   15a68:	10 91 68 18 	lds	r17, 0x1868	; 0x801868 <SS80p+0x1>
   15a6c:	f8 01       	movw	r30, r16
   15a6e:	c7 a4       	ldd	r12, Z+47	; 0x2f
   15a70:	d0 a8       	ldd	r13, Z+48	; 0x30
   15a72:	e1 2c       	mov	r14, r1
   15a74:	f1 2c       	mov	r15, r1
   15a76:	6b 85       	ldd	r22, Y+11	; 0x0b
   15a78:	7c 85       	ldd	r23, Y+12	; 0x0c
   15a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
   15a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
   15a7e:	a7 01       	movw	r20, r14
   15a80:	96 01       	movw	r18, r12
   15a82:	0e 94 b3 e4 	call	0x1c966	; 0x1c966 <__udivmodsi4>
   15a86:	da 01       	movw	r26, r20
   15a88:	c9 01       	movw	r24, r18
   15a8a:	88 0d       	add	r24, r8
   15a8c:	99 1d       	adc	r25, r9
   15a8e:	aa 1d       	adc	r26, r10
   15a90:	bb 1d       	adc	r27, r11
   15a92:	f8 01       	movw	r30, r16
   15a94:	eb 5b       	subi	r30, 0xBB	; 187
   15a96:	ff 4f       	sbci	r31, 0xFF	; 255
   15a98:	40 80       	ld	r4, Z
   15a9a:	51 80       	ldd	r5, Z+1	; 0x01
   15a9c:	62 80       	ldd	r6, Z+2	; 0x02
   15a9e:	73 80       	ldd	r7, Z+3	; 0x03
   15aa0:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   15aa4:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   15aa8:	48 16       	cp	r4, r24
   15aaa:	59 06       	cpc	r5, r25
   15aac:	6a 06       	cpc	r6, r26
   15aae:	7b 06       	cpc	r7, r27
   15ab0:	20 f5       	brcc	.+72     	; 0x15afa <SS80_cmd_seek+0xb2>
   15ab2:	81 e0       	ldi	r24, 0x01	; 1
   15ab4:	8a 83       	std	Y+2, r24	; 0x02
   15ab6:	8b 81       	ldd	r24, Y+3	; 0x03
   15ab8:	9c 81       	ldd	r25, Y+4	; 0x04
   15aba:	84 60       	ori	r24, 0x04	; 4
   15abc:	9c 83       	std	Y+4, r25	; 0x04
   15abe:	8b 83       	std	Y+3, r24	; 0x03
   15ac0:	40 ff       	sbrs	r20, 0
   15ac2:	3c c0       	rjmp	.+120    	; 0x15b3c <SS80_cmd_seek+0xf4>
   15ac4:	f8 01       	movw	r30, r16
   15ac6:	a7 a5       	ldd	r26, Z+47	; 0x2f
   15ac8:	b0 a9       	ldd	r27, Z+48	; 0x30
   15aca:	a5 01       	movw	r20, r10
   15acc:	94 01       	movw	r18, r8
   15ace:	0e 94 15 e5 	call	0x1ca2a	; 0x1ca2a <__muluhisi3>
   15ad2:	9f 93       	push	r25
   15ad4:	8f 93       	push	r24
   15ad6:	7f 93       	push	r23
   15ad8:	6f 93       	push	r22
   15ada:	86 ed       	ldi	r24, 0xD6	; 214
   15adc:	90 e2       	ldi	r25, 0x20	; 32
   15ade:	1f 92       	push	r1
   15ae0:	9f 93       	push	r25
   15ae2:	8f 93       	push	r24
   15ae4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15ae8:	8d b7       	in	r24, 0x3d	; 61
   15aea:	9e b7       	in	r25, 0x3e	; 62
   15aec:	07 96       	adiw	r24, 0x07	; 7
   15aee:	0f b6       	in	r0, 0x3f	; 63
   15af0:	f8 94       	cli
   15af2:	9e bf       	out	0x3e, r25	; 62
   15af4:	0f be       	out	0x3f, r0	; 63
   15af6:	8d bf       	out	0x3d, r24	; 61
   15af8:	21 c0       	rjmp	.+66     	; 0x15b3c <SS80_cmd_seek+0xf4>
   15afa:	ca 01       	movw	r24, r20
   15afc:	80 72       	andi	r24, 0x20	; 32
   15afe:	99 27       	eor	r25, r25
   15b00:	45 ff       	sbrs	r20, 5
   15b02:	1e c0       	rjmp	.+60     	; 0x15b40 <SS80_cmd_seek+0xf8>
   15b04:	a5 01       	movw	r20, r10
   15b06:	94 01       	movw	r18, r8
   15b08:	c7 01       	movw	r24, r14
   15b0a:	b6 01       	movw	r22, r12
   15b0c:	0e 94 71 e4 	call	0x1c8e2	; 0x1c8e2 <__mulsi3>
   15b10:	9f 93       	push	r25
   15b12:	8f 93       	push	r24
   15b14:	7f 93       	push	r23
   15b16:	6f 93       	push	r22
   15b18:	82 ec       	ldi	r24, 0xC2	; 194
   15b1a:	90 e2       	ldi	r25, 0x20	; 32
   15b1c:	1f 92       	push	r1
   15b1e:	9f 93       	push	r25
   15b20:	8f 93       	push	r24
   15b22:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15b26:	ed b7       	in	r30, 0x3d	; 61
   15b28:	fe b7       	in	r31, 0x3e	; 62
   15b2a:	37 96       	adiw	r30, 0x07	; 7
   15b2c:	0f b6       	in	r0, 0x3f	; 63
   15b2e:	f8 94       	cli
   15b30:	fe bf       	out	0x3e, r31	; 62
   15b32:	0f be       	out	0x3f, r0	; 63
   15b34:	ed bf       	out	0x3d, r30	; 61
   15b36:	80 e0       	ldi	r24, 0x00	; 0
   15b38:	90 e0       	ldi	r25, 0x00	; 0
   15b3a:	02 c0       	rjmp	.+4      	; 0x15b40 <SS80_cmd_seek+0xf8>
   15b3c:	81 e0       	ldi	r24, 0x01	; 1
   15b3e:	90 e0       	ldi	r25, 0x00	; 0
   15b40:	cd b7       	in	r28, 0x3d	; 61
   15b42:	de b7       	in	r29, 0x3e	; 62
   15b44:	e0 e1       	ldi	r30, 0x10	; 16
   15b46:	0c 94 53 e5 	jmp	0x1caa6	; 0x1caa6 <__epilogue_restores__+0x4>

00015b4a <SS80_locate_and_write>:
   15b4a:	a8 e0       	ldi	r26, 0x08	; 8
   15b4c:	b0 e0       	ldi	r27, 0x00	; 0
   15b4e:	eb ea       	ldi	r30, 0xAB	; 171
   15b50:	fd ea       	ldi	r31, 0xAD	; 173
   15b52:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
   15b56:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15b5a:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15b5e:	a0 91 67 18 	lds	r26, 0x1867	; 0x801867 <SS80p>
   15b62:	b0 91 68 18 	lds	r27, 0x1868	; 0x801868 <SS80p+0x1>
   15b66:	9f 96       	adiw	r26, 0x2f	; 47
   15b68:	0d 90       	ld	r0, X+
   15b6a:	bc 91       	ld	r27, X
   15b6c:	a0 2d       	mov	r26, r0
   15b6e:	27 81       	ldd	r18, Z+7	; 0x07
   15b70:	30 85       	ldd	r19, Z+8	; 0x08
   15b72:	41 85       	ldd	r20, Z+9	; 0x09
   15b74:	52 85       	ldd	r21, Z+10	; 0x0a
   15b76:	0e 94 15 e5 	call	0x1ca2a	; 0x1ca2a <__muluhisi3>
   15b7a:	4b 01       	movw	r8, r22
   15b7c:	5c 01       	movw	r10, r24
   15b7e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15b82:	85 ff       	sbrs	r24, 5
   15b84:	18 c0       	rjmp	.+48     	; 0x15bb6 <SS80_locate_and_write+0x6c>
   15b86:	86 85       	ldd	r24, Z+14	; 0x0e
   15b88:	8f 93       	push	r24
   15b8a:	85 85       	ldd	r24, Z+13	; 0x0d
   15b8c:	8f 93       	push	r24
   15b8e:	84 85       	ldd	r24, Z+12	; 0x0c
   15b90:	8f 93       	push	r24
   15b92:	83 85       	ldd	r24, Z+11	; 0x0b
   15b94:	8f 93       	push	r24
   15b96:	bf 92       	push	r11
   15b98:	af 92       	push	r10
   15b9a:	9f 92       	push	r9
   15b9c:	8f 92       	push	r8
   15b9e:	87 e5       	ldi	r24, 0x57	; 87
   15ba0:	96 e2       	ldi	r25, 0x26	; 38
   15ba2:	1f 92       	push	r1
   15ba4:	9f 93       	push	r25
   15ba6:	8f 93       	push	r24
   15ba8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15bac:	0f b6       	in	r0, 0x3f	; 63
   15bae:	f8 94       	cli
   15bb0:	de bf       	out	0x3e, r29	; 62
   15bb2:	0f be       	out	0x3f, r0	; 63
   15bb4:	cd bf       	out	0x3d, r28	; 61
   15bb6:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15bba:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15bbe:	12 82       	std	Z+2, r1	; 0x02
   15bc0:	54 98       	cbi	0x0a, 4	; 10
   15bc2:	4c 99       	sbic	0x09, 4	; 9
   15bc4:	03 c0       	rjmp	.+6      	; 0x15bcc <SS80_locate_and_write+0x82>
   15bc6:	80 e0       	ldi	r24, 0x00	; 0
   15bc8:	90 e1       	ldi	r25, 0x10	; 16
   15bca:	52 c1       	rjmp	.+676    	; 0x15e70 <SS80_locate_and_write+0x326>
   15bcc:	3d df       	rcall	.-390    	; 0x15a48 <SS80_cmd_seek>
   15bce:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15bd2:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15bd6:	89 2b       	or	r24, r25
   15bd8:	41 f0       	breq	.+16     	; 0x15bea <SS80_locate_and_write+0xa0>
   15bda:	83 81       	ldd	r24, Z+3	; 0x03
   15bdc:	94 81       	ldd	r25, Z+4	; 0x04
   15bde:	82 60       	ori	r24, 0x02	; 2
   15be0:	94 83       	std	Z+4, r25	; 0x04
   15be2:	83 83       	std	Z+3, r24	; 0x03
   15be4:	01 e0       	ldi	r16, 0x01	; 1
   15be6:	10 e0       	ldi	r17, 0x00	; 0
   15be8:	02 c0       	rjmp	.+4      	; 0x15bee <SS80_locate_and_write+0xa4>
   15bea:	00 e0       	ldi	r16, 0x00	; 0
   15bec:	10 e0       	ldi	r17, 0x00	; 0
   15bee:	23 84       	ldd	r2, Z+11	; 0x0b
   15bf0:	34 84       	ldd	r3, Z+12	; 0x0c
   15bf2:	1a 82       	std	Y+2, r1	; 0x02
   15bf4:	19 82       	std	Y+1, r1	; 0x01
   15bf6:	41 2c       	mov	r4, r1
   15bf8:	51 2c       	mov	r5, r1
   15bfa:	32 01       	movw	r6, r4
   15bfc:	8a e0       	ldi	r24, 0x0A	; 10
   15bfe:	96 e2       	ldi	r25, 0x26	; 38
   15c00:	9c 01       	movw	r18, r24
   15c02:	40 e0       	ldi	r20, 0x00	; 0
   15c04:	2b 83       	std	Y+3, r18	; 0x03
   15c06:	3c 83       	std	Y+4, r19	; 0x04
   15c08:	4d 83       	std	Y+5, r20	; 0x05
   15c0a:	80 e3       	ldi	r24, 0x30	; 48
   15c0c:	96 e2       	ldi	r25, 0x26	; 38
   15c0e:	9c 01       	movw	r18, r24
   15c10:	40 e0       	ldi	r20, 0x00	; 0
   15c12:	2e 83       	std	Y+6, r18	; 0x06
   15c14:	3f 83       	std	Y+7, r19	; 0x07
   15c16:	48 87       	std	Y+8, r20	; 0x08
   15c18:	12 14       	cp	r1, r2
   15c1a:	13 04       	cpc	r1, r3
   15c1c:	0c f0       	brlt	.+2      	; 0x15c20 <SS80_locate_and_write+0xd6>
   15c1e:	f6 c0       	rjmp	.+492    	; 0x15e0c <SS80_locate_and_write+0x2c2>
   15c20:	54 98       	cbi	0x0a, 4	; 10
   15c22:	4c 9b       	sbis	0x09, 4	; 9
   15c24:	d0 cf       	rjmp	.-96     	; 0x15bc6 <SS80_locate_and_write+0x7c>
   15c26:	71 01       	movw	r14, r2
   15c28:	31 e0       	ldi	r19, 0x01	; 1
   15c2a:	23 16       	cp	r2, r19
   15c2c:	33 06       	cpc	r3, r19
   15c2e:	1c f0       	brlt	.+6      	; 0x15c36 <SS80_locate_and_write+0xec>
   15c30:	e1 2c       	mov	r14, r1
   15c32:	ff 24       	eor	r15, r15
   15c34:	f3 94       	inc	r15
   15c36:	e2 ee       	ldi	r30, 0xE2	; 226
   15c38:	fb e1       	ldi	r31, 0x1B	; 27
   15c3a:	20 e0       	ldi	r18, 0x00	; 0
   15c3c:	32 e0       	ldi	r19, 0x02	; 2
   15c3e:	11 92       	st	Z+, r1
   15c40:	21 50       	subi	r18, 0x01	; 1
   15c42:	30 40       	sbci	r19, 0x00	; 0
   15c44:	e1 f7       	brne	.-8      	; 0x15c3e <SS80_locate_and_write+0xf4>
   15c46:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15c4a:	87 fd       	sbrc	r24, 7
   15c4c:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <gpib_timer_elapsed_begin>
   15c50:	ae 01       	movw	r20, r28
   15c52:	4f 5f       	subi	r20, 0xFF	; 255
   15c54:	5f 4f       	sbci	r21, 0xFF	; 255
   15c56:	b7 01       	movw	r22, r14
   15c58:	82 ee       	ldi	r24, 0xE2	; 226
   15c5a:	9b e1       	ldi	r25, 0x1B	; 27
   15c5c:	0e 94 88 8a 	call	0x11510	; 0x11510 <gpib_read_str>
   15c60:	6c 01       	movw	r12, r24
   15c62:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15c66:	87 ff       	sbrs	r24, 7
   15c68:	04 c0       	rjmp	.+8      	; 0x15c72 <SS80_locate_and_write+0x128>
   15c6a:	80 ee       	ldi	r24, 0xE0	; 224
   15c6c:	9f e0       	ldi	r25, 0x0F	; 15
   15c6e:	0e 94 40 85 	call	0x10a80	; 0x10a80 <gpib_timer_elapsed_end>
   15c72:	ce 14       	cp	r12, r14
   15c74:	df 04       	cpc	r13, r15
   15c76:	39 f1       	breq	.+78     	; 0x15cc6 <SS80_locate_and_write+0x17c>
   15c78:	89 81       	ldd	r24, Y+1	; 0x01
   15c7a:	9a 81       	ldd	r25, Y+2	; 0x02
   15c7c:	9c 01       	movw	r18, r24
   15c7e:	22 27       	eor	r18, r18
   15c80:	30 7d       	andi	r19, 0xD0	; 208
   15c82:	23 2b       	or	r18, r19
   15c84:	d1 f0       	breq	.+52     	; 0x15cba <SS80_locate_and_write+0x170>
   15c86:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15c8a:	80 ff       	sbrs	r24, 0
   15c8c:	0a c0       	rjmp	.+20     	; 0x15ca2 <SS80_locate_and_write+0x158>
   15c8e:	84 e4       	ldi	r24, 0x44	; 68
   15c90:	96 e2       	ldi	r25, 0x26	; 38
   15c92:	1f 92       	push	r1
   15c94:	9f 93       	push	r25
   15c96:	8f 93       	push	r24
   15c98:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15c9c:	0f 90       	pop	r0
   15c9e:	0f 90       	pop	r0
   15ca0:	0f 90       	pop	r0
   15ca2:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15ca6:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15caa:	83 81       	ldd	r24, Z+3	; 0x03
   15cac:	94 81       	ldd	r25, Z+4	; 0x04
   15cae:	82 60       	ori	r24, 0x02	; 2
   15cb0:	94 83       	std	Z+4, r25	; 0x04
   15cb2:	83 83       	std	Z+3, r24	; 0x03
   15cb4:	81 e0       	ldi	r24, 0x01	; 1
   15cb6:	82 83       	std	Z+2, r24	; 0x02
   15cb8:	9a c0       	rjmp	.+308    	; 0x15dee <SS80_locate_and_write+0x2a4>
   15cba:	c1 14       	cp	r12, r1
   15cbc:	d1 04       	cpc	r13, r1
   15cbe:	09 f0       	breq	.+2      	; 0x15cc2 <SS80_locate_and_write+0x178>
   15cc0:	d3 c0       	rjmp	.+422    	; 0x15e68 <SS80_locate_and_write+0x31e>
   15cc2:	90 fd       	sbrc	r25, 0
   15cc4:	94 c0       	rjmp	.+296    	; 0x15dee <SS80_locate_and_write+0x2a4>
   15cc6:	01 15       	cp	r16, r1
   15cc8:	11 05       	cpc	r17, r1
   15cca:	09 f0       	breq	.+2      	; 0x15cce <SS80_locate_and_write+0x184>
   15ccc:	85 c0       	rjmp	.+266    	; 0x15dd8 <SS80_locate_and_write+0x28e>
   15cce:	c1 14       	cp	r12, r1
   15cd0:	d1 04       	cpc	r13, r1
   15cd2:	09 f4       	brne	.+2      	; 0x15cd6 <SS80_locate_and_write+0x18c>
   15cd4:	83 c0       	rjmp	.+262    	; 0x15ddc <SS80_locate_and_write+0x292>
   15cd6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15cda:	86 fd       	sbrc	r24, 6
   15cdc:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <gpib_timer_elapsed_begin>
   15ce0:	e0 90 65 18 	lds	r14, 0x1865	; 0x801865 <SS80s>
   15ce4:	f0 90 66 18 	lds	r15, 0x1866	; 0x801866 <SS80s+0x1>
   15ce8:	33 e0       	ldi	r19, 0x03	; 3
   15cea:	e3 0e       	add	r14, r19
   15cec:	f1 1c       	adc	r15, r1
   15cee:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <SS80p>
   15cf2:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <SS80p+0x1>
   15cf6:	86 01       	movw	r16, r12
   15cf8:	22 ee       	ldi	r18, 0xE2	; 226
   15cfa:	3b e1       	ldi	r19, 0x1B	; 27
   15cfc:	b5 01       	movw	r22, r10
   15cfe:	a4 01       	movw	r20, r8
   15d00:	02 96       	adiw	r24, 0x02	; 2
   15d02:	0e 94 d7 84 	call	0x109ae	; 0x109ae <dbf_open_write>
   15d06:	7c 01       	movw	r14, r24
   15d08:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15d0c:	86 ff       	sbrs	r24, 6
   15d0e:	04 c0       	rjmp	.+8      	; 0x15d18 <SS80_locate_and_write+0x1ce>
   15d10:	8a ee       	ldi	r24, 0xEA	; 234
   15d12:	9f e0       	ldi	r25, 0x0F	; 15
   15d14:	0e 94 40 85 	call	0x10a80	; 0x10a80 <gpib_timer_elapsed_end>
   15d18:	ce 14       	cp	r12, r14
   15d1a:	df 04       	cpc	r13, r15
   15d1c:	39 f1       	breq	.+78     	; 0x15d6c <SS80_locate_and_write+0x222>
   15d1e:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15d22:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15d26:	83 81       	ldd	r24, Z+3	; 0x03
   15d28:	94 81       	ldd	r25, Z+4	; 0x04
   15d2a:	82 60       	ori	r24, 0x02	; 2
   15d2c:	94 83       	std	Z+4, r25	; 0x04
   15d2e:	83 83       	std	Z+3, r24	; 0x03
   15d30:	0e 94 98 70 	call	0xe130	; 0xe130 <mmc_wp_status>
   15d34:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15d38:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15d3c:	89 2b       	or	r24, r25
   15d3e:	29 f0       	breq	.+10     	; 0x15d4a <SS80_locate_and_write+0x200>
   15d40:	83 81       	ldd	r24, Z+3	; 0x03
   15d42:	94 81       	ldd	r25, Z+4	; 0x04
   15d44:	88 60       	ori	r24, 0x08	; 8
   15d46:	94 83       	std	Z+4, r25	; 0x04
   15d48:	83 83       	std	Z+3, r24	; 0x03
   15d4a:	41 e0       	ldi	r20, 0x01	; 1
   15d4c:	42 83       	std	Z+2, r20	; 0x02
   15d4e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15d52:	80 ff       	sbrs	r24, 0
   15d54:	29 c0       	rjmp	.+82     	; 0x15da8 <SS80_locate_and_write+0x25e>
   15d56:	1f 92       	push	r1
   15d58:	8f 81       	ldd	r24, Y+7	; 0x07
   15d5a:	8f 93       	push	r24
   15d5c:	9e 81       	ldd	r25, Y+6	; 0x06
   15d5e:	9f 93       	push	r25
   15d60:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15d64:	0f 90       	pop	r0
   15d66:	0f 90       	pop	r0
   15d68:	0f 90       	pop	r0
   15d6a:	1e c0       	rjmp	.+60     	; 0x15da8 <SS80_locate_and_write+0x25e>
   15d6c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15d70:	85 ff       	sbrs	r24, 5
   15d72:	0e c0       	rjmp	.+28     	; 0x15d90 <SS80_locate_and_write+0x246>
   15d74:	df 92       	push	r13
   15d76:	cf 92       	push	r12
   15d78:	1f 92       	push	r1
   15d7a:	ec 81       	ldd	r30, Y+4	; 0x04
   15d7c:	ef 93       	push	r30
   15d7e:	fb 81       	ldd	r31, Y+3	; 0x03
   15d80:	ff 93       	push	r31
   15d82:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15d86:	0f 90       	pop	r0
   15d88:	0f 90       	pop	r0
   15d8a:	0f 90       	pop	r0
   15d8c:	0f 90       	pop	r0
   15d8e:	0f 90       	pop	r0
   15d90:	c6 01       	movw	r24, r12
   15d92:	0d 2c       	mov	r0, r13
   15d94:	00 0c       	add	r0, r0
   15d96:	aa 0b       	sbc	r26, r26
   15d98:	bb 0b       	sbc	r27, r27
   15d9a:	88 0e       	add	r8, r24
   15d9c:	99 1e       	adc	r9, r25
   15d9e:	aa 1e       	adc	r10, r26
   15da0:	bb 1e       	adc	r11, r27
   15da2:	00 e0       	ldi	r16, 0x00	; 0
   15da4:	10 e0       	ldi	r17, 0x00	; 0
   15da6:	05 c0       	rjmp	.+10     	; 0x15db2 <SS80_locate_and_write+0x268>
   15da8:	ec 14       	cp	r14, r12
   15daa:	fd 04       	cpc	r15, r13
   15dac:	64 f0       	brlt	.+24     	; 0x15dc6 <SS80_locate_and_write+0x27c>
   15dae:	01 e0       	ldi	r16, 0x01	; 1
   15db0:	10 e0       	ldi	r17, 0x00	; 0
   15db2:	c7 01       	movw	r24, r14
   15db4:	0f 2c       	mov	r0, r15
   15db6:	00 0c       	add	r0, r0
   15db8:	aa 0b       	sbc	r26, r26
   15dba:	bb 0b       	sbc	r27, r27
   15dbc:	48 0e       	add	r4, r24
   15dbe:	59 1e       	adc	r5, r25
   15dc0:	6a 1e       	adc	r6, r26
   15dc2:	7b 1e       	adc	r7, r27
   15dc4:	0b c0       	rjmp	.+22     	; 0x15ddc <SS80_locate_and_write+0x292>
   15dc6:	c6 01       	movw	r24, r12
   15dc8:	0d 2c       	mov	r0, r13
   15dca:	00 0c       	add	r0, r0
   15dcc:	aa 0b       	sbc	r26, r26
   15dce:	bb 0b       	sbc	r27, r27
   15dd0:	48 0e       	add	r4, r24
   15dd2:	59 1e       	adc	r5, r25
   15dd4:	6a 1e       	adc	r6, r26
   15dd6:	7b 1e       	adc	r7, r27
   15dd8:	01 e0       	ldi	r16, 0x01	; 1
   15dda:	10 e0       	ldi	r17, 0x00	; 0
   15ddc:	2c 18       	sub	r2, r12
   15dde:	3d 08       	sbc	r3, r13
   15de0:	89 81       	ldd	r24, Y+1	; 0x01
   15de2:	9a 81       	ldd	r25, Y+2	; 0x02
   15de4:	90 ff       	sbrs	r25, 0
   15de6:	18 cf       	rjmp	.-464    	; 0x15c18 <SS80_locate_and_write+0xce>
   15de8:	12 14       	cp	r1, r2
   15dea:	13 04       	cpc	r1, r3
   15dec:	7c f4       	brge	.+30     	; 0x15e0c <SS80_locate_and_write+0x2c2>
   15dee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15df2:	80 ff       	sbrs	r24, 0
   15df4:	1f c0       	rjmp	.+62     	; 0x15e34 <SS80_locate_and_write+0x2ea>
   15df6:	82 ee       	ldi	r24, 0xE2	; 226
   15df8:	95 e2       	ldi	r25, 0x25	; 37
   15dfa:	1f 92       	push	r1
   15dfc:	9f 93       	push	r25
   15dfe:	8f 93       	push	r24
   15e00:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15e04:	0f 90       	pop	r0
   15e06:	0f 90       	pop	r0
   15e08:	0f 90       	pop	r0
   15e0a:	14 c0       	rjmp	.+40     	; 0x15e34 <SS80_locate_and_write+0x2ea>
   15e0c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15e10:	85 ff       	sbrs	r24, 5
   15e12:	10 c0       	rjmp	.+32     	; 0x15e34 <SS80_locate_and_write+0x2ea>
   15e14:	7f 92       	push	r7
   15e16:	6f 92       	push	r6
   15e18:	5f 92       	push	r5
   15e1a:	4f 92       	push	r4
   15e1c:	87 eb       	ldi	r24, 0xB7	; 183
   15e1e:	95 e2       	ldi	r25, 0x25	; 37
   15e20:	1f 92       	push	r1
   15e22:	9f 93       	push	r25
   15e24:	8f 93       	push	r24
   15e26:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15e2a:	0f b6       	in	r0, 0x3f	; 63
   15e2c:	f8 94       	cli
   15e2e:	de bf       	out	0x3e, r29	; 62
   15e30:	0f be       	out	0x3f, r0	; 63
   15e32:	cd bf       	out	0x3d, r28	; 61
   15e34:	00 91 65 18 	lds	r16, 0x1865	; 0x801865 <SS80s>
   15e38:	10 91 66 18 	lds	r17, 0x1866	; 0x801866 <SS80s+0x1>
   15e3c:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15e40:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15e44:	27 a5       	ldd	r18, Z+47	; 0x2f
   15e46:	30 a9       	ldd	r19, Z+48	; 0x30
   15e48:	40 e0       	ldi	r20, 0x00	; 0
   15e4a:	50 e0       	ldi	r21, 0x00	; 0
   15e4c:	c5 01       	movw	r24, r10
   15e4e:	b4 01       	movw	r22, r8
   15e50:	0e 94 b3 e4 	call	0x1c966	; 0x1c966 <__udivmodsi4>
   15e54:	f8 01       	movw	r30, r16
   15e56:	27 83       	std	Z+7, r18	; 0x07
   15e58:	30 87       	std	Z+8, r19	; 0x08
   15e5a:	41 87       	std	Z+9, r20	; 0x09
   15e5c:	52 87       	std	Z+10, r21	; 0x0a
   15e5e:	89 81       	ldd	r24, Y+1	; 0x01
   15e60:	9a 81       	ldd	r25, Y+2	; 0x02
   15e62:	88 27       	eor	r24, r24
   15e64:	90 7d       	andi	r25, 0xD0	; 208
   15e66:	04 c0       	rjmp	.+8      	; 0x15e70 <SS80_locate_and_write+0x326>
   15e68:	01 2b       	or	r16, r17
   15e6a:	09 f4       	brne	.+2      	; 0x15e6e <SS80_locate_and_write+0x324>
   15e6c:	34 cf       	rjmp	.-408    	; 0x15cd6 <SS80_locate_and_write+0x18c>
   15e6e:	b4 cf       	rjmp	.-152    	; 0x15dd8 <SS80_locate_and_write+0x28e>
   15e70:	28 96       	adiw	r28, 0x08	; 8
   15e72:	e2 e1       	ldi	r30, 0x12	; 18
   15e74:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

00015e78 <SS80_Report>:
   15e78:	a3 e0       	ldi	r26, 0x03	; 3
   15e7a:	b0 e0       	ldi	r27, 0x00	; 0
   15e7c:	e2 e4       	ldi	r30, 0x42	; 66
   15e7e:	ff ea       	ldi	r31, 0xAF	; 175
   15e80:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
   15e84:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15e88:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15e8c:	82 81       	ldd	r24, Z+2	; 0x02
   15e8e:	8b 83       	std	Y+3, r24	; 0x03
   15e90:	80 e0       	ldi	r24, 0x00	; 0
   15e92:	91 e0       	ldi	r25, 0x01	; 1
   15e94:	9a 83       	std	Y+2, r25	; 0x02
   15e96:	89 83       	std	Y+1, r24	; 0x01
   15e98:	ae 01       	movw	r20, r28
   15e9a:	4f 5f       	subi	r20, 0xFF	; 255
   15e9c:	5f 4f       	sbci	r21, 0xFF	; 255
   15e9e:	61 e0       	ldi	r22, 0x01	; 1
   15ea0:	70 e0       	ldi	r23, 0x00	; 0
   15ea2:	ce 01       	movw	r24, r28
   15ea4:	03 96       	adiw	r24, 0x03	; 3
   15ea6:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_write_str>
   15eaa:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   15eae:	01 97       	sbiw	r24, 0x01	; 1
   15eb0:	89 f0       	breq	.+34     	; 0x15ed4 <SS80_Report+0x5c>
   15eb2:	20 ff       	sbrs	r18, 0
   15eb4:	0a c0       	rjmp	.+20     	; 0x15eca <SS80_Report+0x52>
   15eb6:	88 ea       	ldi	r24, 0xA8	; 168
   15eb8:	90 e2       	ldi	r25, 0x20	; 32
   15eba:	1f 92       	push	r1
   15ebc:	9f 93       	push	r25
   15ebe:	8f 93       	push	r24
   15ec0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15ec4:	0f 90       	pop	r0
   15ec6:	0f 90       	pop	r0
   15ec8:	0f 90       	pop	r0
   15eca:	89 81       	ldd	r24, Y+1	; 0x01
   15ecc:	9a 81       	ldd	r25, Y+2	; 0x02
   15ece:	88 27       	eor	r24, r24
   15ed0:	90 7d       	andi	r25, 0xD0	; 208
   15ed2:	1c c0       	rjmp	.+56     	; 0x15f0c <SS80_Report+0x94>
   15ed4:	25 ff       	sbrs	r18, 5
   15ed6:	13 c0       	rjmp	.+38     	; 0x15efe <SS80_Report+0x86>
   15ed8:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15edc:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15ee0:	82 81       	ldd	r24, Z+2	; 0x02
   15ee2:	1f 92       	push	r1
   15ee4:	8f 93       	push	r24
   15ee6:	85 e9       	ldi	r24, 0x95	; 149
   15ee8:	90 e2       	ldi	r25, 0x20	; 32
   15eea:	1f 92       	push	r1
   15eec:	9f 93       	push	r25
   15eee:	8f 93       	push	r24
   15ef0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15ef4:	0f 90       	pop	r0
   15ef6:	0f 90       	pop	r0
   15ef8:	0f 90       	pop	r0
   15efa:	0f 90       	pop	r0
   15efc:	0f 90       	pop	r0
   15efe:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15f02:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15f06:	12 82       	std	Z+2, r1	; 0x02
   15f08:	80 e0       	ldi	r24, 0x00	; 0
   15f0a:	90 e0       	ldi	r25, 0x00	; 0
   15f0c:	23 96       	adiw	r28, 0x03	; 3
   15f0e:	e2 e0       	ldi	r30, 0x02	; 2
   15f10:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

00015f14 <Clear_Common>:
   15f14:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15f18:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15f1c:	25 81       	ldd	r18, Z+5	; 0x05
   15f1e:	30 e0       	ldi	r19, 0x00	; 0
   15f20:	28 17       	cp	r18, r24
   15f22:	39 07       	cpc	r19, r25
   15f24:	19 f0       	breq	.+6      	; 0x15f2c <Clear_Common+0x18>
   15f26:	0f 97       	sbiw	r24, 0x0f	; 15
   15f28:	99 f4       	brne	.+38     	; 0x15f50 <Clear_Common+0x3c>
   15f2a:	03 c0       	rjmp	.+6      	; 0x15f32 <Clear_Common+0x1e>
   15f2c:	2f 30       	cpi	r18, 0x0F	; 15
   15f2e:	31 05       	cpc	r19, r1
   15f30:	09 f4       	brne	.+2      	; 0x15f34 <Clear_Common+0x20>
   15f32:	15 82       	std	Z+5, r1	; 0x05
   15f34:	16 82       	std	Z+6, r1	; 0x06
   15f36:	17 82       	std	Z+7, r1	; 0x07
   15f38:	10 86       	std	Z+8, r1	; 0x08
   15f3a:	11 86       	std	Z+9, r1	; 0x09
   15f3c:	12 86       	std	Z+10, r1	; 0x0a
   15f3e:	13 86       	std	Z+11, r1	; 0x0b
   15f40:	14 86       	std	Z+12, r1	; 0x0c
   15f42:	15 86       	std	Z+13, r1	; 0x0d
   15f44:	16 86       	std	Z+14, r1	; 0x0e
   15f46:	11 82       	std	Z+1, r1	; 0x01
   15f48:	10 82       	st	Z, r1
   15f4a:	14 82       	std	Z+4, r1	; 0x04
   15f4c:	13 82       	std	Z+3, r1	; 0x03
   15f4e:	12 82       	std	Z+2, r1	; 0x02
   15f50:	08 95       	ret

00015f52 <SS80_init>:
   15f52:	a0 e0       	ldi	r26, 0x00	; 0
   15f54:	b0 e0       	ldi	r27, 0x00	; 0
   15f56:	ef ea       	ldi	r30, 0xAF	; 175
   15f58:	ff ea       	ldi	r31, 0xAF	; 175
   15f5a:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
   15f5e:	05 ec       	ldi	r16, 0xC5	; 197
   15f60:	1f e1       	ldi	r17, 0x1F	; 31
   15f62:	cb e0       	ldi	r28, 0x0B	; 11
   15f64:	d0 e0       	ldi	r29, 0x00	; 0
   15f66:	82 e0       	ldi	r24, 0x02	; 2
   15f68:	f8 2e       	mov	r15, r24
   15f6a:	80 e6       	ldi	r24, 0x60	; 96
   15f6c:	97 e2       	ldi	r25, 0x27	; 39
   15f6e:	6c 01       	movw	r12, r24
   15f70:	e1 2c       	mov	r14, r1
   15f72:	f8 01       	movw	r30, r16
   15f74:	80 81       	ld	r24, Z
   15f76:	83 30       	cpi	r24, 0x03	; 3
   15f78:	39 f5       	brne	.+78     	; 0x15fc8 <SS80_init+0x76>
   15f7a:	ce 01       	movw	r24, r28
   15f7c:	0e 94 ad 92 	call	0x1255a	; 0x1255a <set_active_device>
   15f80:	89 2b       	or	r24, r25
   15f82:	11 f1       	breq	.+68     	; 0x15fc8 <SS80_init+0x76>
   15f84:	8f e0       	ldi	r24, 0x0F	; 15
   15f86:	90 e0       	ldi	r25, 0x00	; 0
   15f88:	c5 df       	rcall	.-118    	; 0x15f14 <Clear_Common>
   15f8a:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   15f8e:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   15f92:	f2 82       	std	Z+2, r15	; 0x02
   15f94:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15f98:	85 ff       	sbrs	r24, 5
   15f9a:	0e c0       	rjmp	.+28     	; 0x15fb8 <SS80_init+0x66>
   15f9c:	f8 01       	movw	r30, r16
   15f9e:	81 81       	ldd	r24, Z+1	; 0x01
   15fa0:	1f 92       	push	r1
   15fa2:	8f 93       	push	r24
   15fa4:	1f 92       	push	r1
   15fa6:	df 92       	push	r13
   15fa8:	cf 92       	push	r12
   15faa:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   15fae:	0f 90       	pop	r0
   15fb0:	0f 90       	pop	r0
   15fb2:	0f 90       	pop	r0
   15fb4:	0f 90       	pop	r0
   15fb6:	0f 90       	pop	r0
   15fb8:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15fbc:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15fc0:	81 81       	ldd	r24, Z+1	; 0x01
   15fc2:	90 e0       	ldi	r25, 0x00	; 0
   15fc4:	0e 94 17 86 	call	0x10c2e	; 0x10c2e <gpib_disable_PPR>
   15fc8:	21 97       	sbiw	r28, 0x01	; 1
   15fca:	0b 52       	subi	r16, 0x2B	; 43
   15fcc:	11 09       	sbc	r17, r1
   15fce:	cf 3f       	cpi	r28, 0xFF	; 255
   15fd0:	ff ef       	ldi	r31, 0xFF	; 255
   15fd2:	df 07       	cpc	r29, r31
   15fd4:	71 f6       	brne	.-100    	; 0x15f72 <SS80_init+0x20>
   15fd6:	cd b7       	in	r28, 0x3d	; 61
   15fd8:	de b7       	in	r29, 0x3e	; 62
   15fda:	e8 e0       	ldi	r30, 0x08	; 8
   15fdc:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

00015fe0 <SS80_Channel_Independent_Clear>:
   15fe0:	99 df       	rcall	.-206    	; 0x15f14 <Clear_Common>
   15fe2:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   15fe6:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   15fea:	81 81       	ldd	r24, Z+1	; 0x01
   15fec:	90 e0       	ldi	r25, 0x00	; 0
   15fee:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   15ff2:	80 e0       	ldi	r24, 0x00	; 0
   15ff4:	90 e0       	ldi	r25, 0x00	; 0
   15ff6:	08 95       	ret

00015ff8 <SS80_Universal_Device_Clear>:
   15ff8:	8f e0       	ldi	r24, 0x0F	; 15
   15ffa:	90 e0       	ldi	r25, 0x00	; 0
   15ffc:	8b df       	rcall	.-234    	; 0x15f14 <Clear_Common>
   15ffe:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   16002:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   16006:	81 81       	ldd	r24, Z+1	; 0x01
   16008:	90 e0       	ldi	r25, 0x00	; 0
   1600a:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   1600e:	80 e0       	ldi	r24, 0x00	; 0
   16010:	90 e0       	ldi	r25, 0x00	; 0
   16012:	08 95       	ret

00016014 <SS80_Selected_Device_Clear>:
   16014:	cf 93       	push	r28
   16016:	df 93       	push	r29
   16018:	ec 01       	movw	r28, r24
   1601a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1601e:	85 ff       	sbrs	r24, 5
   16020:	0a c0       	rjmp	.+20     	; 0x16036 <SS80_Selected_Device_Clear+0x22>
   16022:	89 e8       	ldi	r24, 0x89	; 137
   16024:	90 e2       	ldi	r25, 0x20	; 32
   16026:	1f 92       	push	r1
   16028:	9f 93       	push	r25
   1602a:	8f 93       	push	r24
   1602c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16030:	0f 90       	pop	r0
   16032:	0f 90       	pop	r0
   16034:	0f 90       	pop	r0
   16036:	ce 01       	movw	r24, r28
   16038:	6d df       	rcall	.-294    	; 0x15f14 <Clear_Common>
   1603a:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   1603e:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   16042:	81 81       	ldd	r24, Z+1	; 0x01
   16044:	90 e0       	ldi	r25, 0x00	; 0
   16046:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   1604a:	80 e0       	ldi	r24, 0x00	; 0
   1604c:	90 e0       	ldi	r25, 0x00	; 0
   1604e:	df 91       	pop	r29
   16050:	cf 91       	pop	r28
   16052:	08 95       	ret

00016054 <SS80_Amigo_Clear>:
   16054:	a3 e0       	ldi	r26, 0x03	; 3
   16056:	b0 e0       	ldi	r27, 0x00	; 0
   16058:	e0 e3       	ldi	r30, 0x30	; 48
   1605a:	f0 eb       	ldi	r31, 0xB0	; 176
   1605c:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
   16060:	1a 82       	std	Y+2, r1	; 0x02
   16062:	19 82       	std	Y+1, r1	; 0x01
   16064:	ae 01       	movw	r20, r28
   16066:	4f 5f       	subi	r20, 0xFF	; 255
   16068:	5f 4f       	sbci	r21, 0xFF	; 255
   1606a:	61 e0       	ldi	r22, 0x01	; 1
   1606c:	70 e0       	ldi	r23, 0x00	; 0
   1606e:	ce 01       	movw	r24, r28
   16070:	03 96       	adiw	r24, 0x03	; 3
   16072:	0e 94 88 8a 	call	0x11510	; 0x11510 <gpib_read_str>
   16076:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1607a:	01 97       	sbiw	r24, 0x01	; 1
   1607c:	89 f0       	breq	.+34     	; 0x160a0 <SS80_Amigo_Clear+0x4c>
   1607e:	20 ff       	sbrs	r18, 0
   16080:	0a c0       	rjmp	.+20     	; 0x16096 <SS80_Amigo_Clear+0x42>
   16082:	86 e7       	ldi	r24, 0x76	; 118
   16084:	90 e2       	ldi	r25, 0x20	; 32
   16086:	1f 92       	push	r1
   16088:	9f 93       	push	r25
   1608a:	8f 93       	push	r24
   1608c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16090:	0f 90       	pop	r0
   16092:	0f 90       	pop	r0
   16094:	0f 90       	pop	r0
   16096:	89 81       	ldd	r24, Y+1	; 0x01
   16098:	9a 81       	ldd	r25, Y+2	; 0x02
   1609a:	88 27       	eor	r24, r24
   1609c:	90 7d       	andi	r25, 0xD0	; 208
   1609e:	19 c0       	rjmp	.+50     	; 0x160d2 <SS80_Amigo_Clear+0x7e>
   160a0:	25 ff       	sbrs	r18, 5
   160a2:	0a c0       	rjmp	.+20     	; 0x160b8 <SS80_Amigo_Clear+0x64>
   160a4:	87 e6       	ldi	r24, 0x67	; 103
   160a6:	90 e2       	ldi	r25, 0x20	; 32
   160a8:	1f 92       	push	r1
   160aa:	9f 93       	push	r25
   160ac:	8f 93       	push	r24
   160ae:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   160b2:	0f 90       	pop	r0
   160b4:	0f 90       	pop	r0
   160b6:	0f 90       	pop	r0
   160b8:	8f e0       	ldi	r24, 0x0F	; 15
   160ba:	90 e0       	ldi	r25, 0x00	; 0
   160bc:	2b df       	rcall	.-426    	; 0x15f14 <Clear_Common>
   160be:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   160c2:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   160c6:	81 81       	ldd	r24, Z+1	; 0x01
   160c8:	90 e0       	ldi	r25, 0x00	; 0
   160ca:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   160ce:	80 e0       	ldi	r24, 0x00	; 0
   160d0:	90 e0       	ldi	r25, 0x00	; 0
   160d2:	23 96       	adiw	r28, 0x03	; 3
   160d4:	e2 e0       	ldi	r30, 0x02	; 2
   160d6:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

000160da <SS80_Cancel>:
   160da:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   160de:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   160e2:	11 82       	std	Z+1, r1	; 0x01
   160e4:	10 82       	st	Z, r1
   160e6:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   160ea:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   160ee:	81 81       	ldd	r24, Z+1	; 0x01
   160f0:	90 e0       	ldi	r25, 0x00	; 0
   160f2:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   160f6:	80 e0       	ldi	r24, 0x00	; 0
   160f8:	90 e0       	ldi	r25, 0x00	; 0
   160fa:	08 95       	ret

000160fc <SS80_Transparent_State>:
   160fc:	a2 e0       	ldi	r26, 0x02	; 2
   160fe:	b0 e0       	ldi	r27, 0x00	; 0
   16100:	e4 e8       	ldi	r30, 0x84	; 132
   16102:	f0 eb       	ldi	r31, 0xB0	; 176
   16104:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__prologue_saves__+0x10>
   16108:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   1610c:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   16110:	81 81       	ldd	r24, Z+1	; 0x01
   16112:	90 e0       	ldi	r25, 0x00	; 0
   16114:	0e 94 17 86 	call	0x10c2e	; 0x10c2e <gpib_disable_PPR>
   16118:	80 e0       	ldi	r24, 0x00	; 0
   1611a:	91 e0       	ldi	r25, 0x01	; 1
   1611c:	9a 83       	std	Y+2, r25	; 0x02
   1611e:	89 83       	std	Y+1, r24	; 0x01
   16120:	ae 01       	movw	r20, r28
   16122:	4f 5f       	subi	r20, 0xFF	; 255
   16124:	5f 4f       	sbci	r21, 0xFF	; 255
   16126:	60 e0       	ldi	r22, 0x00	; 0
   16128:	72 e0       	ldi	r23, 0x02	; 2
   1612a:	82 ee       	ldi	r24, 0xE2	; 226
   1612c:	9b e1       	ldi	r25, 0x1B	; 27
   1612e:	0e 94 88 8a 	call	0x11510	; 0x11510 <gpib_read_str>
   16132:	7c 01       	movw	r14, r24
   16134:	89 81       	ldd	r24, Y+1	; 0x01
   16136:	9a 81       	ldd	r25, Y+2	; 0x02
   16138:	9c 01       	movw	r18, r24
   1613a:	22 27       	eor	r18, r18
   1613c:	30 7d       	andi	r19, 0xD0	; 208
   1613e:	23 2b       	or	r18, r19
   16140:	79 f0       	breq	.+30     	; 0x16160 <SS80_Transparent_State+0x64>
   16142:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16146:	80 ff       	sbrs	r24, 0
   16148:	e0 c0       	rjmp	.+448    	; 0x1630a <SS80_Transparent_State+0x20e>
   1614a:	86 e0       	ldi	r24, 0x06	; 6
   1614c:	92 e2       	ldi	r25, 0x22	; 34
   1614e:	1f 92       	push	r1
   16150:	9f 93       	push	r25
   16152:	8f 93       	push	r24
   16154:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16158:	0f 90       	pop	r0
   1615a:	0f 90       	pop	r0
   1615c:	0f 90       	pop	r0
   1615e:	d5 c0       	rjmp	.+426    	; 0x1630a <SS80_Transparent_State+0x20e>
   16160:	e1 14       	cp	r14, r1
   16162:	f1 04       	cpc	r15, r1
   16164:	09 f4       	brne	.+2      	; 0x16168 <SS80_Transparent_State+0x6c>
   16166:	d6 c0       	rjmp	.+428    	; 0x16314 <SS80_Transparent_State+0x218>
   16168:	90 fd       	sbrc	r25, 0
   1616a:	0e c0       	rjmp	.+28     	; 0x16188 <SS80_Transparent_State+0x8c>
   1616c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16170:	80 ff       	sbrs	r24, 0
   16172:	0a c0       	rjmp	.+20     	; 0x16188 <SS80_Transparent_State+0x8c>
   16174:	8d ee       	ldi	r24, 0xED	; 237
   16176:	91 e2       	ldi	r25, 0x21	; 33
   16178:	1f 92       	push	r1
   1617a:	9f 93       	push	r25
   1617c:	8f 93       	push	r24
   1617e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16182:	0f 90       	pop	r0
   16184:	0f 90       	pop	r0
   16186:	0f 90       	pop	r0
   16188:	82 ee       	ldi	r24, 0xE2	; 226
   1618a:	a8 2e       	mov	r10, r24
   1618c:	8b e1       	ldi	r24, 0x1B	; 27
   1618e:	b8 2e       	mov	r11, r24
   16190:	00 e0       	ldi	r16, 0x00	; 0
   16192:	10 e0       	ldi	r17, 0x00	; 0
   16194:	0e 15       	cp	r16, r14
   16196:	1f 05       	cpc	r17, r15
   16198:	0c f0       	brlt	.+2      	; 0x1619c <SS80_Transparent_State+0xa0>
   1619a:	a0 c0       	rjmp	.+320    	; 0x162dc <SS80_Transparent_State+0x1e0>
   1619c:	68 01       	movw	r12, r16
   1619e:	8f ef       	ldi	r24, 0xFF	; 255
   161a0:	c8 1a       	sub	r12, r24
   161a2:	d8 0a       	sbc	r13, r24
   161a4:	f5 01       	movw	r30, r10
   161a6:	81 91       	ld	r24, Z+
   161a8:	5f 01       	movw	r10, r30
   161aa:	28 2f       	mov	r18, r24
   161ac:	30 e0       	ldi	r19, 0x00	; 0
   161ae:	a9 01       	movw	r20, r18
   161b0:	40 52       	subi	r20, 0x20	; 32
   161b2:	51 09       	sbc	r21, r1
   161b4:	40 31       	cpi	r20, 0x10	; 16
   161b6:	51 05       	cpc	r21, r1
   161b8:	20 f4       	brcc	.+8      	; 0x161c2 <SS80_Transparent_State+0xc6>
   161ba:	80 52       	subi	r24, 0x20	; 32
   161bc:	8b d9       	rcall	.-3306   	; 0x154d4 <SS80_Check_Unit>
   161be:	86 01       	movw	r16, r12
   161c0:	e9 cf       	rjmp	.-46     	; 0x16194 <SS80_Transparent_State+0x98>
   161c2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   161c6:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   161ca:	21 30       	cpi	r18, 0x01	; 1
   161cc:	31 05       	cpc	r19, r1
   161ce:	c9 f4       	brne	.+50     	; 0x16202 <SS80_Transparent_State+0x106>
   161d0:	0e 5f       	subi	r16, 0xFE	; 254
   161d2:	1f 4f       	sbci	r17, 0xFF	; 255
   161d4:	80 73       	andi	r24, 0x30	; 48
   161d6:	99 27       	eor	r25, r25
   161d8:	89 2b       	or	r24, r25
   161da:	51 f0       	breq	.+20     	; 0x161f0 <SS80_Transparent_State+0xf4>
   161dc:	88 ec       	ldi	r24, 0xC8	; 200
   161de:	91 e2       	ldi	r25, 0x21	; 33
   161e0:	1f 92       	push	r1
   161e2:	9f 93       	push	r25
   161e4:	8f 93       	push	r24
   161e6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   161ea:	0f 90       	pop	r0
   161ec:	0f 90       	pop	r0
   161ee:	0f 90       	pop	r0
   161f0:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   161f4:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   161f8:	81 81       	ldd	r24, Z+1	; 0x01
   161fa:	90 e0       	ldi	r25, 0x00	; 0
   161fc:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   16200:	6d c0       	rjmp	.+218    	; 0x162dc <SS80_Transparent_State+0x1e0>
   16202:	22 30       	cpi	r18, 0x02	; 2
   16204:	31 05       	cpc	r19, r1
   16206:	51 f4       	brne	.+20     	; 0x1621c <SS80_Transparent_State+0x120>
   16208:	0b 5f       	subi	r16, 0xFB	; 251
   1620a:	1f 4f       	sbci	r17, 0xFF	; 255
   1620c:	80 73       	andi	r24, 0x30	; 48
   1620e:	99 27       	eor	r25, r25
   16210:	89 2b       	or	r24, r25
   16212:	09 f4       	brne	.+2      	; 0x16216 <SS80_Transparent_State+0x11a>
   16214:	63 c0       	rjmp	.+198    	; 0x162dc <SS80_Transparent_State+0x1e0>
   16216:	8b ea       	ldi	r24, 0xAB	; 171
   16218:	91 e2       	ldi	r25, 0x21	; 33
   1621a:	0c c0       	rjmp	.+24     	; 0x16234 <SS80_Transparent_State+0x138>
   1621c:	23 30       	cpi	r18, 0x03	; 3
   1621e:	31 05       	cpc	r19, r1
   16220:	91 f4       	brne	.+36     	; 0x16246 <SS80_Transparent_State+0x14a>
   16222:	0b 5f       	subi	r16, 0xFB	; 251
   16224:	1f 4f       	sbci	r17, 0xFF	; 255
   16226:	80 73       	andi	r24, 0x30	; 48
   16228:	99 27       	eor	r25, r25
   1622a:	89 2b       	or	r24, r25
   1622c:	09 f4       	brne	.+2      	; 0x16230 <SS80_Transparent_State+0x134>
   1622e:	56 c0       	rjmp	.+172    	; 0x162dc <SS80_Transparent_State+0x1e0>
   16230:	8d e8       	ldi	r24, 0x8D	; 141
   16232:	91 e2       	ldi	r25, 0x21	; 33
   16234:	1f 92       	push	r1
   16236:	9f 93       	push	r25
   16238:	8f 93       	push	r24
   1623a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1623e:	0f 90       	pop	r0
   16240:	0f 90       	pop	r0
   16242:	0f 90       	pop	r0
   16244:	4b c0       	rjmp	.+150    	; 0x162dc <SS80_Transparent_State+0x1e0>
   16246:	28 30       	cpi	r18, 0x08	; 8
   16248:	31 05       	cpc	r19, r1
   1624a:	e9 f4       	brne	.+58     	; 0x16286 <SS80_Transparent_State+0x18a>
   1624c:	85 ff       	sbrs	r24, 5
   1624e:	13 c0       	rjmp	.+38     	; 0x16276 <SS80_Transparent_State+0x17a>
   16250:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   16254:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   16258:	85 81       	ldd	r24, Z+5	; 0x05
   1625a:	1f 92       	push	r1
   1625c:	8f 93       	push	r24
   1625e:	86 e6       	ldi	r24, 0x66	; 102
   16260:	91 e2       	ldi	r25, 0x21	; 33
   16262:	1f 92       	push	r1
   16264:	9f 93       	push	r25
   16266:	8f 93       	push	r24
   16268:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1626c:	0f 90       	pop	r0
   1626e:	0f 90       	pop	r0
   16270:	0f 90       	pop	r0
   16272:	0f 90       	pop	r0
   16274:	0f 90       	pop	r0
   16276:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   1627a:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   1627e:	85 81       	ldd	r24, Z+5	; 0x05
   16280:	90 e0       	ldi	r25, 0x00	; 0
   16282:	ae de       	rcall	.-676    	; 0x15fe0 <SS80_Channel_Independent_Clear>
   16284:	49 c0       	rjmp	.+146    	; 0x16318 <SS80_Transparent_State+0x21c>
   16286:	29 30       	cpi	r18, 0x09	; 9
   16288:	31 05       	cpc	r19, r1
   1628a:	b9 f4       	brne	.+46     	; 0x162ba <SS80_Transparent_State+0x1be>
   1628c:	85 ff       	sbrs	r24, 5
   1628e:	13 c0       	rjmp	.+38     	; 0x162b6 <SS80_Transparent_State+0x1ba>
   16290:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   16294:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   16298:	85 81       	ldd	r24, Z+5	; 0x05
   1629a:	1f 92       	push	r1
   1629c:	8f 93       	push	r24
   1629e:	82 e5       	ldi	r24, 0x52	; 82
   162a0:	91 e2       	ldi	r25, 0x21	; 33
   162a2:	1f 92       	push	r1
   162a4:	9f 93       	push	r25
   162a6:	8f 93       	push	r24
   162a8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   162ac:	0f 90       	pop	r0
   162ae:	0f 90       	pop	r0
   162b0:	0f 90       	pop	r0
   162b2:	0f 90       	pop	r0
   162b4:	0f 90       	pop	r0
   162b6:	11 df       	rcall	.-478    	; 0x160da <SS80_Cancel>
   162b8:	2f c0       	rjmp	.+94     	; 0x16318 <SS80_Transparent_State+0x21c>
   162ba:	80 ff       	sbrs	r24, 0
   162bc:	26 c0       	rjmp	.+76     	; 0x1630a <SS80_Transparent_State+0x20e>
   162be:	3f 93       	push	r19
   162c0:	2f 93       	push	r18
   162c2:	82 e3       	ldi	r24, 0x32	; 50
   162c4:	91 e2       	ldi	r25, 0x21	; 33
   162c6:	1f 92       	push	r1
   162c8:	9f 93       	push	r25
   162ca:	8f 93       	push	r24
   162cc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   162d0:	0f 90       	pop	r0
   162d2:	0f 90       	pop	r0
   162d4:	0f 90       	pop	r0
   162d6:	0f 90       	pop	r0
   162d8:	0f 90       	pop	r0
   162da:	86 01       	movw	r16, r12
   162dc:	0e 15       	cp	r16, r14
   162de:	1f 05       	cpc	r17, r15
   162e0:	a1 f0       	breq	.+40     	; 0x1630a <SS80_Transparent_State+0x20e>
   162e2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   162e6:	80 ff       	sbrs	r24, 0
   162e8:	10 c0       	rjmp	.+32     	; 0x1630a <SS80_Transparent_State+0x20e>
   162ea:	ff 92       	push	r15
   162ec:	ef 92       	push	r14
   162ee:	1f 93       	push	r17
   162f0:	0f 93       	push	r16
   162f2:	86 ef       	ldi	r24, 0xF6	; 246
   162f4:	90 e2       	ldi	r25, 0x20	; 32
   162f6:	1f 92       	push	r1
   162f8:	9f 93       	push	r25
   162fa:	8f 93       	push	r24
   162fc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16300:	0f b6       	in	r0, 0x3f	; 63
   16302:	f8 94       	cli
   16304:	de bf       	out	0x3e, r29	; 62
   16306:	0f be       	out	0x3f, r0	; 63
   16308:	cd bf       	out	0x3d, r28	; 61
   1630a:	89 81       	ldd	r24, Y+1	; 0x01
   1630c:	9a 81       	ldd	r25, Y+2	; 0x02
   1630e:	88 27       	eor	r24, r24
   16310:	90 7d       	andi	r25, 0xD0	; 208
   16312:	02 c0       	rjmp	.+4      	; 0x16318 <SS80_Transparent_State+0x21c>
   16314:	80 e0       	ldi	r24, 0x00	; 0
   16316:	90 e0       	ldi	r25, 0x00	; 0
   16318:	22 96       	adiw	r28, 0x02	; 2
   1631a:	ea e0       	ldi	r30, 0x0A	; 10
   1631c:	0c 94 59 e5 	jmp	0x1cab2	; 0x1cab2 <__epilogue_restores__+0x10>

00016320 <SS80_error_return>:
   16320:	a3 e0       	ldi	r26, 0x03	; 3
   16322:	b0 e0       	ldi	r27, 0x00	; 0
   16324:	e6 e9       	ldi	r30, 0x96	; 150
   16326:	f1 eb       	ldi	r31, 0xB1	; 177
   16328:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
   1632c:	80 e0       	ldi	r24, 0x00	; 0
   1632e:	91 e0       	ldi	r25, 0x01	; 1
   16330:	9a 83       	std	Y+2, r25	; 0x02
   16332:	89 83       	std	Y+1, r24	; 0x01
   16334:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   16338:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   1633c:	81 e0       	ldi	r24, 0x01	; 1
   1633e:	82 83       	std	Z+2, r24	; 0x02
   16340:	8b 83       	std	Y+3, r24	; 0x03
   16342:	ae 01       	movw	r20, r28
   16344:	4f 5f       	subi	r20, 0xFF	; 255
   16346:	5f 4f       	sbci	r21, 0xFF	; 255
   16348:	61 e0       	ldi	r22, 0x01	; 1
   1634a:	70 e0       	ldi	r23, 0x00	; 0
   1634c:	ce 01       	movw	r24, r28
   1634e:	03 96       	adiw	r24, 0x03	; 3
   16350:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_write_str>
   16354:	01 97       	sbiw	r24, 0x01	; 1
   16356:	99 f0       	breq	.+38     	; 0x1637e <SS80_error_return+0x5e>
   16358:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1635c:	80 ff       	sbrs	r24, 0
   1635e:	0a c0       	rjmp	.+20     	; 0x16374 <SS80_error_return+0x54>
   16360:	88 e2       	ldi	r24, 0x28	; 40
   16362:	90 e2       	ldi	r25, 0x20	; 32
   16364:	1f 92       	push	r1
   16366:	9f 93       	push	r25
   16368:	8f 93       	push	r24
   1636a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1636e:	0f 90       	pop	r0
   16370:	0f 90       	pop	r0
   16372:	0f 90       	pop	r0
   16374:	89 81       	ldd	r24, Y+1	; 0x01
   16376:	9a 81       	ldd	r25, Y+2	; 0x02
   16378:	88 27       	eor	r24, r24
   1637a:	90 7d       	andi	r25, 0xD0	; 208
   1637c:	07 c0       	rjmp	.+14     	; 0x1638c <SS80_error_return+0x6c>
   1637e:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   16382:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   16386:	12 82       	std	Z+2, r1	; 0x02
   16388:	80 e0       	ldi	r24, 0x00	; 0
   1638a:	90 e0       	ldi	r25, 0x00	; 0
   1638c:	23 96       	adiw	r28, 0x03	; 3
   1638e:	e2 e0       	ldi	r30, 0x02	; 2
   16390:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

00016394 <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   16394:	ac e0       	ldi	r26, 0x0C	; 12
   16396:	b0 e0       	ldi	r27, 0x00	; 0
   16398:	e0 ed       	ldi	r30, 0xD0	; 208
   1639a:	f1 eb       	ldi	r31, 0xB1	; 177
   1639c:	0c 94 36 e5 	jmp	0x1ca6c	; 0x1ca6c <__prologue_saves__+0x2>
   163a0:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   163a4:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   163a8:	27 81       	ldd	r18, Z+7	; 0x07
   163aa:	30 85       	ldd	r19, Z+8	; 0x08
   163ac:	41 85       	ldd	r20, Z+9	; 0x09
   163ae:	52 85       	ldd	r21, Z+10	; 0x0a
   163b0:	a0 91 67 18 	lds	r26, 0x1867	; 0x801867 <SS80p>
   163b4:	b0 91 68 18 	lds	r27, 0x1868	; 0x801868 <SS80p+0x1>
   163b8:	9f 96       	adiw	r26, 0x2f	; 47
   163ba:	0d 90       	ld	r0, X+
   163bc:	bc 91       	ld	r27, X
   163be:	a0 2d       	mov	r26, r0
   163c0:	12 82       	std	Z+2, r1	; 0x02
   163c2:	1a 82       	std	Y+2, r1	; 0x02
   163c4:	19 82       	std	Y+1, r1	; 0x01
   163c6:	54 98       	cbi	0x0a, 4	; 10
   163c8:	4c 99       	sbic	0x09, 4	; 9
   163ca:	03 c0       	rjmp	.+6      	; 0x163d2 <SS80_locate_and_read+0x3e>
   163cc:	80 e0       	ldi	r24, 0x00	; 0
   163ce:	90 e1       	ldi	r25, 0x10	; 16
   163d0:	45 c1       	rjmp	.+650    	; 0x1665c <SS80_locate_and_read+0x2c8>
   163d2:	0e 94 15 e5 	call	0x1ca2a	; 0x1ca2a <__muluhisi3>
   163d6:	4b 01       	movw	r8, r22
   163d8:	5c 01       	movw	r10, r24
   163da:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   163de:	85 ff       	sbrs	r24, 5
   163e0:	1c c0       	rjmp	.+56     	; 0x1641a <SS80_locate_and_read+0x86>
   163e2:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   163e6:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   163ea:	86 85       	ldd	r24, Z+14	; 0x0e
   163ec:	8f 93       	push	r24
   163ee:	85 85       	ldd	r24, Z+13	; 0x0d
   163f0:	8f 93       	push	r24
   163f2:	84 85       	ldd	r24, Z+12	; 0x0c
   163f4:	8f 93       	push	r24
   163f6:	83 85       	ldd	r24, Z+11	; 0x0b
   163f8:	8f 93       	push	r24
   163fa:	bf 92       	push	r11
   163fc:	af 92       	push	r10
   163fe:	9f 92       	push	r9
   16400:	8f 92       	push	r8
   16402:	8c e1       	ldi	r24, 0x1C	; 28
   16404:	97 e2       	ldi	r25, 0x27	; 39
   16406:	1f 92       	push	r1
   16408:	9f 93       	push	r25
   1640a:	8f 93       	push	r24
   1640c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16410:	0f b6       	in	r0, 0x3f	; 63
   16412:	f8 94       	cli
   16414:	de bf       	out	0x3e, r29	; 62
   16416:	0f be       	out	0x3f, r0	; 63
   16418:	cd bf       	out	0x3d, r28	; 61
   1641a:	16 db       	rcall	.-2516   	; 0x15a48 <SS80_cmd_seek>
   1641c:	89 2b       	or	r24, r25
   1641e:	09 f0       	breq	.+2      	; 0x16422 <SS80_locate_and_read+0x8e>
   16420:	af c0       	rjmp	.+350    	; 0x16580 <SS80_locate_and_read+0x1ec>
   16422:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   16426:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   1642a:	43 84       	ldd	r4, Z+11	; 0x0b
   1642c:	54 84       	ldd	r5, Z+12	; 0x0c
   1642e:	65 84       	ldd	r6, Z+13	; 0x0d
   16430:	76 84       	ldd	r7, Z+14	; 0x0e
   16432:	1b 82       	std	Y+3, r1	; 0x03
   16434:	1c 82       	std	Y+4, r1	; 0x04
   16436:	1d 82       	std	Y+5, r1	; 0x05
   16438:	1e 82       	std	Y+6, r1	; 0x06
   1643a:	8e ef       	ldi	r24, 0xFE	; 254
   1643c:	96 e2       	ldi	r25, 0x26	; 38
   1643e:	9c 01       	movw	r18, r24
   16440:	40 e0       	ldi	r20, 0x00	; 0
   16442:	2f 83       	std	Y+7, r18	; 0x07
   16444:	38 87       	std	Y+8, r19	; 0x08
   16446:	49 87       	std	Y+9, r20	; 0x09
   16448:	33 24       	eor	r3, r3
   1644a:	33 94       	inc	r3
   1644c:	8d ec       	ldi	r24, 0xCD	; 205
   1644e:	96 e2       	ldi	r25, 0x26	; 38
   16450:	9c 01       	movw	r18, r24
   16452:	40 e0       	ldi	r20, 0x00	; 0
   16454:	2a 87       	std	Y+10, r18	; 0x0a
   16456:	3b 87       	std	Y+11, r19	; 0x0b
   16458:	4c 87       	std	Y+12, r20	; 0x0c
   1645a:	34 c0       	rjmp	.+104    	; 0x164c4 <SS80_locate_and_read+0x130>
   1645c:	86 fd       	sbrc	r24, 6
   1645e:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <gpib_timer_elapsed_begin>
   16462:	ae 01       	movw	r20, r28
   16464:	4f 5f       	subi	r20, 0xFF	; 255
   16466:	5f 4f       	sbci	r21, 0xFF	; 255
   16468:	b6 01       	movw	r22, r12
   1646a:	82 ee       	ldi	r24, 0xE2	; 226
   1646c:	9b e1       	ldi	r25, 0x1B	; 27
   1646e:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_write_str>
   16472:	8c 01       	movw	r16, r24
   16474:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16478:	86 ff       	sbrs	r24, 6
   1647a:	04 c0       	rjmp	.+8      	; 0x16484 <SS80_locate_and_read+0xf0>
   1647c:	8f ef       	ldi	r24, 0xFF	; 255
   1647e:	9f e0       	ldi	r25, 0x0F	; 15
   16480:	0e 94 40 85 	call	0x10a80	; 0x10a80 <gpib_timer_elapsed_end>
   16484:	c0 16       	cp	r12, r16
   16486:	d1 06       	cpc	r13, r17
   16488:	09 f0       	breq	.+2      	; 0x1648c <SS80_locate_and_read+0xf8>
   1648a:	83 c0       	rjmp	.+262    	; 0x16592 <SS80_locate_and_read+0x1fe>
   1648c:	0d 2c       	mov	r0, r13
   1648e:	00 0c       	add	r0, r0
   16490:	ee 08       	sbc	r14, r14
   16492:	ff 08       	sbc	r15, r15
   16494:	8c 0c       	add	r8, r12
   16496:	9d 1c       	adc	r9, r13
   16498:	ae 1c       	adc	r10, r14
   1649a:	bf 1c       	adc	r11, r15
   1649c:	01 2e       	mov	r0, r17
   1649e:	00 0c       	add	r0, r0
   164a0:	22 0b       	sbc	r18, r18
   164a2:	33 0b       	sbc	r19, r19
   164a4:	8b 81       	ldd	r24, Y+3	; 0x03
   164a6:	9c 81       	ldd	r25, Y+4	; 0x04
   164a8:	ad 81       	ldd	r26, Y+5	; 0x05
   164aa:	be 81       	ldd	r27, Y+6	; 0x06
   164ac:	80 0f       	add	r24, r16
   164ae:	91 1f       	adc	r25, r17
   164b0:	a2 1f       	adc	r26, r18
   164b2:	b3 1f       	adc	r27, r19
   164b4:	8b 83       	std	Y+3, r24	; 0x03
   164b6:	9c 83       	std	Y+4, r25	; 0x04
   164b8:	ad 83       	std	Y+5, r26	; 0x05
   164ba:	be 83       	std	Y+6, r27	; 0x06
   164bc:	40 1a       	sub	r4, r16
   164be:	51 0a       	sbc	r5, r17
   164c0:	62 0a       	sbc	r6, r18
   164c2:	73 0a       	sbc	r7, r19
   164c4:	41 14       	cp	r4, r1
   164c6:	51 04       	cpc	r5, r1
   164c8:	61 04       	cpc	r6, r1
   164ca:	71 04       	cpc	r7, r1
   164cc:	09 f4       	brne	.+2      	; 0x164d0 <SS80_locate_and_read+0x13c>
   164ce:	93 c0       	rjmp	.+294    	; 0x165f6 <SS80_locate_and_read+0x262>
   164d0:	54 98       	cbi	0x0a, 4	; 10
   164d2:	4c 9b       	sbis	0x09, 4	; 9
   164d4:	7b cf       	rjmp	.-266    	; 0x163cc <SS80_locate_and_read+0x38>
   164d6:	31 e0       	ldi	r19, 0x01	; 1
   164d8:	43 16       	cp	r4, r19
   164da:	53 06       	cpc	r5, r19
   164dc:	61 04       	cpc	r6, r1
   164de:	71 04       	cpc	r7, r1
   164e0:	08 f4       	brcc	.+2      	; 0x164e4 <SS80_locate_and_read+0x150>
   164e2:	50 c0       	rjmp	.+160    	; 0x16584 <SS80_locate_and_read+0x1f0>
   164e4:	1a 82       	std	Y+2, r1	; 0x02
   164e6:	19 82       	std	Y+1, r1	; 0x01
   164e8:	c1 2c       	mov	r12, r1
   164ea:	dd 24       	eor	r13, r13
   164ec:	d3 94       	inc	r13
   164ee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   164f2:	86 fd       	sbrc	r24, 6
   164f4:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <gpib_timer_elapsed_begin>
   164f8:	e0 90 65 18 	lds	r14, 0x1865	; 0x801865 <SS80s>
   164fc:	f0 90 66 18 	lds	r15, 0x1866	; 0x801866 <SS80s+0x1>
   16500:	43 e0       	ldi	r20, 0x03	; 3
   16502:	e4 0e       	add	r14, r20
   16504:	f1 1c       	adc	r15, r1
   16506:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <SS80p>
   1650a:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <SS80p+0x1>
   1650e:	86 01       	movw	r16, r12
   16510:	22 ee       	ldi	r18, 0xE2	; 226
   16512:	3b e1       	ldi	r19, 0x1B	; 27
   16514:	b5 01       	movw	r22, r10
   16516:	a4 01       	movw	r20, r8
   16518:	02 96       	adiw	r24, 0x02	; 2
   1651a:	0e 94 80 84 	call	0x10900	; 0x10900 <dbf_open_read>
   1651e:	8c 01       	movw	r16, r24
   16520:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16524:	86 ff       	sbrs	r24, 6
   16526:	04 c0       	rjmp	.+8      	; 0x16530 <SS80_locate_and_read+0x19c>
   16528:	85 ef       	ldi	r24, 0xF5	; 245
   1652a:	9f e0       	ldi	r25, 0x0F	; 15
   1652c:	0e 94 40 85 	call	0x10a80	; 0x10a80 <gpib_timer_elapsed_end>
   16530:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16534:	85 ff       	sbrs	r24, 5
   16536:	0e c0       	rjmp	.+28     	; 0x16554 <SS80_locate_and_read+0x1c0>
   16538:	1f 93       	push	r17
   1653a:	0f 93       	push	r16
   1653c:	1f 92       	push	r1
   1653e:	88 85       	ldd	r24, Y+8	; 0x08
   16540:	8f 93       	push	r24
   16542:	9f 81       	ldd	r25, Y+7	; 0x07
   16544:	9f 93       	push	r25
   16546:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1654a:	0f 90       	pop	r0
   1654c:	0f 90       	pop	r0
   1654e:	0f 90       	pop	r0
   16550:	0f 90       	pop	r0
   16552:	0f 90       	pop	r0
   16554:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16558:	17 ff       	sbrs	r17, 7
   1655a:	80 cf       	rjmp	.-256    	; 0x1645c <SS80_locate_and_read+0xc8>
   1655c:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   16560:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   16564:	91 e0       	ldi	r25, 0x01	; 1
   16566:	92 83       	std	Z+2, r25	; 0x02
   16568:	80 ff       	sbrs	r24, 0
   1656a:	0a c0       	rjmp	.+20     	; 0x16580 <SS80_locate_and_read+0x1ec>
   1656c:	86 ee       	ldi	r24, 0xE6	; 230
   1656e:	96 e2       	ldi	r25, 0x26	; 38
   16570:	1f 92       	push	r1
   16572:	9f 93       	push	r25
   16574:	8f 93       	push	r24
   16576:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1657a:	0f 90       	pop	r0
   1657c:	0f 90       	pop	r0
   1657e:	0f 90       	pop	r0
   16580:	cf de       	rcall	.-610    	; 0x16320 <SS80_error_return>
   16582:	6c c0       	rjmp	.+216    	; 0x1665c <SS80_locate_and_read+0x2c8>
   16584:	62 01       	movw	r12, r4
   16586:	89 81       	ldd	r24, Y+1	; 0x01
   16588:	9a 81       	ldd	r25, Y+2	; 0x02
   1658a:	91 60       	ori	r25, 0x01	; 1
   1658c:	9a 83       	std	Y+2, r25	; 0x02
   1658e:	89 83       	std	Y+1, r24	; 0x01
   16590:	ae cf       	rjmp	.-164    	; 0x164ee <SS80_locate_and_read+0x15a>
   16592:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   16596:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   1659a:	32 82       	std	Z+2, r3	; 0x02
   1659c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   165a0:	80 ff       	sbrs	r24, 0
   165a2:	0a c0       	rjmp	.+20     	; 0x165b8 <SS80_locate_and_read+0x224>
   165a4:	1f 92       	push	r1
   165a6:	ab 85       	ldd	r26, Y+11	; 0x0b
   165a8:	af 93       	push	r26
   165aa:	ba 85       	ldd	r27, Y+10	; 0x0a
   165ac:	bf 93       	push	r27
   165ae:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   165b2:	0f 90       	pop	r0
   165b4:	0f 90       	pop	r0
   165b6:	0f 90       	pop	r0
   165b8:	89 81       	ldd	r24, Y+1	; 0x01
   165ba:	9a 81       	ldd	r25, Y+2	; 0x02
   165bc:	88 27       	eor	r24, r24
   165be:	90 7d       	andi	r25, 0xD0	; 208
   165c0:	89 2b       	or	r24, r25
   165c2:	09 f4       	brne	.+2      	; 0x165c6 <SS80_locate_and_read+0x232>
   165c4:	63 cf       	rjmp	.-314    	; 0x1648c <SS80_locate_and_read+0xf8>
   165c6:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   165ca:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   165ce:	83 81       	ldd	r24, Z+3	; 0x03
   165d0:	94 81       	ldd	r25, Z+4	; 0x04
   165d2:	80 62       	ori	r24, 0x20	; 32
   165d4:	94 83       	std	Z+4, r25	; 0x04
   165d6:	83 83       	std	Z+3, r24	; 0x03
   165d8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   165dc:	80 ff       	sbrs	r24, 0
   165de:	23 c0       	rjmp	.+70     	; 0x16626 <SS80_locate_and_read+0x292>
   165e0:	88 ea       	ldi	r24, 0xA8	; 168
   165e2:	96 e2       	ldi	r25, 0x26	; 38
   165e4:	1f 92       	push	r1
   165e6:	9f 93       	push	r25
   165e8:	8f 93       	push	r24
   165ea:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   165ee:	0f 90       	pop	r0
   165f0:	0f 90       	pop	r0
   165f2:	0f 90       	pop	r0
   165f4:	18 c0       	rjmp	.+48     	; 0x16626 <SS80_locate_and_read+0x292>
   165f6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   165fa:	85 ff       	sbrs	r24, 5
   165fc:	14 c0       	rjmp	.+40     	; 0x16626 <SS80_locate_and_read+0x292>
   165fe:	9e 81       	ldd	r25, Y+6	; 0x06
   16600:	9f 93       	push	r25
   16602:	ad 81       	ldd	r26, Y+5	; 0x05
   16604:	af 93       	push	r26
   16606:	bc 81       	ldd	r27, Y+4	; 0x04
   16608:	bf 93       	push	r27
   1660a:	eb 81       	ldd	r30, Y+3	; 0x03
   1660c:	ef 93       	push	r30
   1660e:	80 e8       	ldi	r24, 0x80	; 128
   16610:	96 e2       	ldi	r25, 0x26	; 38
   16612:	1f 92       	push	r1
   16614:	9f 93       	push	r25
   16616:	8f 93       	push	r24
   16618:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1661c:	0f b6       	in	r0, 0x3f	; 63
   1661e:	f8 94       	cli
   16620:	de bf       	out	0x3e, r29	; 62
   16622:	0f be       	out	0x3f, r0	; 63
   16624:	cd bf       	out	0x3d, r28	; 61
   16626:	00 91 65 18 	lds	r16, 0x1865	; 0x801865 <SS80s>
   1662a:	10 91 66 18 	lds	r17, 0x1866	; 0x801866 <SS80s+0x1>
   1662e:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   16632:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   16636:	27 a5       	ldd	r18, Z+47	; 0x2f
   16638:	30 a9       	ldd	r19, Z+48	; 0x30
   1663a:	40 e0       	ldi	r20, 0x00	; 0
   1663c:	50 e0       	ldi	r21, 0x00	; 0
   1663e:	c5 01       	movw	r24, r10
   16640:	b4 01       	movw	r22, r8
   16642:	0e 94 b3 e4 	call	0x1c966	; 0x1c966 <__udivmodsi4>
   16646:	d8 01       	movw	r26, r16
   16648:	17 96       	adiw	r26, 0x07	; 7
   1664a:	2d 93       	st	X+, r18
   1664c:	3d 93       	st	X+, r19
   1664e:	4d 93       	st	X+, r20
   16650:	5c 93       	st	X, r21
   16652:	1a 97       	sbiw	r26, 0x0a	; 10
   16654:	89 81       	ldd	r24, Y+1	; 0x01
   16656:	9a 81       	ldd	r25, Y+2	; 0x02
   16658:	88 27       	eor	r24, r24
   1665a:	90 7d       	andi	r25, 0xD0	; 208
   1665c:	2c 96       	adiw	r28, 0x0c	; 12
   1665e:	e1 e1       	ldi	r30, 0x11	; 17
   16660:	0c 94 52 e5 	jmp	0x1caa4	; 0x1caa4 <__epilogue_restores__+0x2>

00016664 <SS80_Execute_State>:
   16664:	cf 93       	push	r28
   16666:	df 93       	push	r29
   16668:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   1666c:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   16670:	81 81       	ldd	r24, Z+1	; 0x01
   16672:	90 e0       	ldi	r25, 0x00	; 0
   16674:	0e 94 17 86 	call	0x10c2e	; 0x10c2e <gpib_disable_PPR>
   16678:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   1667c:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   16680:	80 81       	ld	r24, Z
   16682:	91 81       	ldd	r25, Z+1	; 0x01
   16684:	82 30       	cpi	r24, 0x02	; 2
   16686:	91 05       	cpc	r25, r1
   16688:	89 f0       	breq	.+34     	; 0x166ac <SS80_Execute_State+0x48>
   1668a:	3c f4       	brge	.+14     	; 0x1669a <SS80_Execute_State+0x36>
   1668c:	00 97       	sbiw	r24, 0x00	; 0
   1668e:	91 f1       	breq	.+100    	; 0x166f4 <SS80_Execute_State+0x90>
   16690:	81 30       	cpi	r24, 0x01	; 1
   16692:	91 05       	cpc	r25, r1
   16694:	b9 f4       	brne	.+46     	; 0x166c4 <SS80_Execute_State+0x60>
   16696:	7e de       	rcall	.-772    	; 0x16394 <SS80_locate_and_read>
   16698:	0d c0       	rjmp	.+26     	; 0x166b4 <SS80_Execute_State+0x50>
   1669a:	83 30       	cpi	r24, 0x03	; 3
   1669c:	91 05       	cpc	r25, r1
   1669e:	41 f0       	breq	.+16     	; 0x166b0 <SS80_Execute_State+0x4c>
   166a0:	84 30       	cpi	r24, 0x04	; 4
   166a2:	91 05       	cpc	r25, r1
   166a4:	79 f4       	brne	.+30     	; 0x166c4 <SS80_Execute_State+0x60>
   166a6:	0e 94 fa a9 	call	0x153f4	; 0x153f4 <SS80_describe>
   166aa:	04 c0       	rjmp	.+8      	; 0x166b4 <SS80_Execute_State+0x50>
   166ac:	4e da       	rcall	.-2916   	; 0x15b4a <SS80_locate_and_write>
   166ae:	02 c0       	rjmp	.+4      	; 0x166b4 <SS80_Execute_State+0x50>
   166b0:	0e 94 79 a9 	call	0x152f2	; 0x152f2 <SS80_send_status>
   166b4:	ec 01       	movw	r28, r24
   166b6:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   166ba:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   166be:	11 82       	std	Z+1, r1	; 0x01
   166c0:	10 82       	st	Z, r1
   166c2:	1a c0       	rjmp	.+52     	; 0x166f8 <SS80_Execute_State+0x94>
   166c4:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   166c8:	20 ff       	sbrs	r18, 0
   166ca:	0e c0       	rjmp	.+28     	; 0x166e8 <SS80_Execute_State+0x84>
   166cc:	9f 93       	push	r25
   166ce:	8f 93       	push	r24
   166d0:	84 e4       	ldi	r24, 0x44	; 68
   166d2:	97 e2       	ldi	r25, 0x27	; 39
   166d4:	1f 92       	push	r1
   166d6:	9f 93       	push	r25
   166d8:	8f 93       	push	r24
   166da:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   166de:	0f 90       	pop	r0
   166e0:	0f 90       	pop	r0
   166e2:	0f 90       	pop	r0
   166e4:	0f 90       	pop	r0
   166e6:	0f 90       	pop	r0
   166e8:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <SS80s>
   166ec:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <SS80s+0x1>
   166f0:	11 82       	std	Z+1, r1	; 0x01
   166f2:	10 82       	st	Z, r1
   166f4:	c0 e0       	ldi	r28, 0x00	; 0
   166f6:	d0 e0       	ldi	r29, 0x00	; 0
   166f8:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   166fc:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   16700:	81 81       	ldd	r24, Z+1	; 0x01
   16702:	90 e0       	ldi	r25, 0x00	; 0
   16704:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   16708:	ce 01       	movw	r24, r28
   1670a:	df 91       	pop	r29
   1670c:	cf 91       	pop	r28
   1670e:	08 95       	ret

00016710 <SS80_COMMANDS>:
   16710:	1f 93       	push	r17
   16712:	cf 93       	push	r28
   16714:	df 93       	push	r29
   16716:	18 2f       	mov	r17, r24
   16718:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   1671c:	90 e0       	ldi	r25, 0x00	; 0
   1671e:	0e 94 02 8c 	call	0x11804	; 0x11804 <SS80_is_MTA>
   16722:	89 2b       	or	r24, r25
   16724:	19 f0       	breq	.+6      	; 0x1672c <SS80_COMMANDS+0x1c>
   16726:	15 36       	cpi	r17, 0x65	; 101
   16728:	19 f5       	brne	.+70     	; 0x16770 <SS80_COMMANDS+0x60>
   1672a:	09 c0       	rjmp	.+18     	; 0x1673e <SS80_COMMANDS+0x2e>
   1672c:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   16730:	90 e0       	ldi	r25, 0x00	; 0
   16732:	0e 94 f3 8b 	call	0x117e6	; 0x117e6 <SS80_is_MLA>
   16736:	ec 01       	movw	r28, r24
   16738:	89 2b       	or	r24, r25
   1673a:	a9 f7       	brne	.-22     	; 0x16726 <SS80_COMMANDS+0x16>
   1673c:	ae c0       	rjmp	.+348    	; 0x1689a <SS80_COMMANDS+0x18a>
   1673e:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   16742:	90 e0       	ldi	r25, 0x00	; 0
   16744:	0e 94 f3 8b 	call	0x117e6	; 0x117e6 <SS80_is_MLA>
   16748:	89 2b       	or	r24, r25
   1674a:	09 f4       	brne	.+2      	; 0x1674e <SS80_COMMANDS+0x3e>
   1674c:	a3 c0       	rjmp	.+326    	; 0x16894 <SS80_COMMANDS+0x184>
   1674e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16752:	85 ff       	sbrs	r24, 5
   16754:	0a c0       	rjmp	.+20     	; 0x1676a <SS80_COMMANDS+0x5a>
   16756:	82 e1       	ldi	r24, 0x12	; 18
   16758:	90 e2       	ldi	r25, 0x20	; 32
   1675a:	1f 92       	push	r1
   1675c:	9f 93       	push	r25
   1675e:	8f 93       	push	r24
   16760:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16764:	0f 90       	pop	r0
   16766:	0f 90       	pop	r0
   16768:	0f 90       	pop	r0
   1676a:	0e 94 ac aa 	call	0x15558	; 0x15558 <SS80_Command_State>
   1676e:	73 c0       	rjmp	.+230    	; 0x16856 <SS80_COMMANDS+0x146>
   16770:	1e 36       	cpi	r17, 0x6E	; 110
   16772:	01 f5       	brne	.+64     	; 0x167b4 <SS80_COMMANDS+0xa4>
   16774:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   16778:	90 e0       	ldi	r25, 0x00	; 0
   1677a:	0e 94 f3 8b 	call	0x117e6	; 0x117e6 <SS80_is_MLA>
   1677e:	89 2b       	or	r24, r25
   16780:	79 f0       	breq	.+30     	; 0x167a0 <SS80_COMMANDS+0x90>
   16782:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16786:	85 ff       	sbrs	r24, 5
   16788:	13 c0       	rjmp	.+38     	; 0x167b0 <SS80_COMMANDS+0xa0>
   1678a:	8c ef       	ldi	r24, 0xFC	; 252
   1678c:	9f e1       	ldi	r25, 0x1F	; 31
   1678e:	1f 92       	push	r1
   16790:	9f 93       	push	r25
   16792:	8f 93       	push	r24
   16794:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16798:	0f 90       	pop	r0
   1679a:	0f 90       	pop	r0
   1679c:	0f 90       	pop	r0
   1679e:	08 c0       	rjmp	.+16     	; 0x167b0 <SS80_COMMANDS+0xa0>
   167a0:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   167a4:	90 e0       	ldi	r25, 0x00	; 0
   167a6:	0e 94 02 8c 	call	0x11804	; 0x11804 <SS80_is_MTA>
   167aa:	89 2b       	or	r24, r25
   167ac:	51 f7       	brne	.-44     	; 0x16782 <SS80_COMMANDS+0x72>
   167ae:	72 c0       	rjmp	.+228    	; 0x16894 <SS80_COMMANDS+0x184>
   167b0:	59 df       	rcall	.-334    	; 0x16664 <SS80_Execute_State>
   167b2:	51 c0       	rjmp	.+162    	; 0x16856 <SS80_COMMANDS+0x146>
   167b4:	10 37       	cpi	r17, 0x70	; 112
   167b6:	b9 f5       	brne	.+110    	; 0x16826 <SS80_COMMANDS+0x116>
   167b8:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   167bc:	90 e0       	ldi	r25, 0x00	; 0
   167be:	0e 94 02 8c 	call	0x11804	; 0x11804 <SS80_is_MTA>
   167c2:	89 2b       	or	r24, r25
   167c4:	81 f0       	breq	.+32     	; 0x167e6 <SS80_COMMANDS+0xd6>
   167c6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   167ca:	85 ff       	sbrs	r24, 5
   167cc:	0a c0       	rjmp	.+20     	; 0x167e2 <SS80_COMMANDS+0xd2>
   167ce:	87 ee       	ldi	r24, 0xE7	; 231
   167d0:	9f e1       	ldi	r25, 0x1F	; 31
   167d2:	1f 92       	push	r1
   167d4:	9f 93       	push	r25
   167d6:	8f 93       	push	r24
   167d8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   167dc:	0f 90       	pop	r0
   167de:	0f 90       	pop	r0
   167e0:	0f 90       	pop	r0
   167e2:	4a db       	rcall	.-2412   	; 0x15e78 <SS80_Report>
   167e4:	38 c0       	rjmp	.+112    	; 0x16856 <SS80_COMMANDS+0x146>
   167e6:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   167ea:	90 e0       	ldi	r25, 0x00	; 0
   167ec:	0e 94 f3 8b 	call	0x117e6	; 0x117e6 <SS80_is_MLA>
   167f0:	89 2b       	or	r24, r25
   167f2:	09 f4       	brne	.+2      	; 0x167f6 <SS80_COMMANDS+0xe6>
   167f4:	4f c0       	rjmp	.+158    	; 0x16894 <SS80_COMMANDS+0x184>
   167f6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   167fa:	85 ff       	sbrs	r24, 5
   167fc:	0a c0       	rjmp	.+20     	; 0x16812 <SS80_COMMANDS+0x102>
   167fe:	88 ed       	ldi	r24, 0xD8	; 216
   16800:	9f e1       	ldi	r25, 0x1F	; 31
   16802:	1f 92       	push	r1
   16804:	9f 93       	push	r25
   16806:	8f 93       	push	r24
   16808:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1680c:	0f 90       	pop	r0
   1680e:	0f 90       	pop	r0
   16810:	0f 90       	pop	r0
   16812:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <SS80p>
   16816:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <SS80p+0x1>
   1681a:	81 81       	ldd	r24, Z+1	; 0x01
   1681c:	90 e0       	ldi	r25, 0x00	; 0
   1681e:	0e 94 17 86 	call	0x10c2e	; 0x10c2e <gpib_disable_PPR>
   16822:	18 dc       	rcall	.-2000   	; 0x16054 <SS80_Amigo_Clear>
   16824:	18 c0       	rjmp	.+48     	; 0x16856 <SS80_COMMANDS+0x146>
   16826:	12 37       	cpi	r17, 0x72	; 114
   16828:	c1 f4       	brne	.+48     	; 0x1685a <SS80_COMMANDS+0x14a>
   1682a:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   1682e:	90 e0       	ldi	r25, 0x00	; 0
   16830:	0e 94 f3 8b 	call	0x117e6	; 0x117e6 <SS80_is_MLA>
   16834:	89 2b       	or	r24, r25
   16836:	89 f0       	breq	.+34     	; 0x1685a <SS80_COMMANDS+0x14a>
   16838:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1683c:	85 ff       	sbrs	r24, 5
   1683e:	0a c0       	rjmp	.+20     	; 0x16854 <SS80_COMMANDS+0x144>
   16840:	84 ec       	ldi	r24, 0xC4	; 196
   16842:	9f e1       	ldi	r25, 0x1F	; 31
   16844:	1f 92       	push	r1
   16846:	9f 93       	push	r25
   16848:	8f 93       	push	r24
   1684a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1684e:	0f 90       	pop	r0
   16850:	0f 90       	pop	r0
   16852:	0f 90       	pop	r0
   16854:	53 dc       	rcall	.-1882   	; 0x160fc <SS80_Transparent_State>
   16856:	ec 01       	movw	r28, r24
   16858:	3d c0       	rjmp	.+122    	; 0x168d4 <SS80_COMMANDS+0x1c4>
   1685a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1685e:	80 ff       	sbrs	r24, 0
   16860:	19 c0       	rjmp	.+50     	; 0x16894 <SS80_COMMANDS+0x184>
   16862:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   16866:	1f 92       	push	r1
   16868:	8f 93       	push	r24
   1686a:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   1686e:	1f 92       	push	r1
   16870:	8f 93       	push	r24
   16872:	1f 92       	push	r1
   16874:	1f 93       	push	r17
   16876:	80 e9       	ldi	r24, 0x90	; 144
   16878:	9f e1       	ldi	r25, 0x1F	; 31
   1687a:	1f 92       	push	r1
   1687c:	9f 93       	push	r25
   1687e:	8f 93       	push	r24
   16880:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16884:	8d b7       	in	r24, 0x3d	; 61
   16886:	9e b7       	in	r25, 0x3e	; 62
   16888:	09 96       	adiw	r24, 0x09	; 9
   1688a:	0f b6       	in	r0, 0x3f	; 63
   1688c:	f8 94       	cli
   1688e:	9e bf       	out	0x3e, r25	; 62
   16890:	0f be       	out	0x3f, r0	; 63
   16892:	8d bf       	out	0x3d, r24	; 61
   16894:	c0 e0       	ldi	r28, 0x00	; 0
   16896:	d0 e0       	ldi	r29, 0x00	; 0
   16898:	1d c0       	rjmp	.+58     	; 0x168d4 <SS80_COMMANDS+0x1c4>
   1689a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1689e:	80 ff       	sbrs	r24, 0
   168a0:	f9 cf       	rjmp	.-14     	; 0x16894 <SS80_COMMANDS+0x184>
   168a2:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   168a6:	1f 92       	push	r1
   168a8:	8f 93       	push	r24
   168aa:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   168ae:	1f 92       	push	r1
   168b0:	8f 93       	push	r24
   168b2:	1f 92       	push	r1
   168b4:	1f 93       	push	r17
   168b6:	8c e5       	ldi	r24, 0x5C	; 92
   168b8:	9f e1       	ldi	r25, 0x1F	; 31
   168ba:	1f 92       	push	r1
   168bc:	9f 93       	push	r25
   168be:	8f 93       	push	r24
   168c0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   168c4:	8d b7       	in	r24, 0x3d	; 61
   168c6:	9e b7       	in	r25, 0x3e	; 62
   168c8:	09 96       	adiw	r24, 0x09	; 9
   168ca:	0f b6       	in	r0, 0x3f	; 63
   168cc:	f8 94       	cli
   168ce:	9e bf       	out	0x3e, r25	; 62
   168d0:	0f be       	out	0x3f, r0	; 63
   168d2:	8d bf       	out	0x3d, r24	; 61
   168d4:	ce 01       	movw	r24, r28
   168d6:	df 91       	pop	r29
   168d8:	cf 91       	pop	r28
   168da:	1f 91       	pop	r17
   168dc:	08 95       	ret

000168de <amigo_overflow_check>:
   168de:	cf 92       	push	r12
   168e0:	df 92       	push	r13
   168e2:	ef 92       	push	r14
   168e4:	0f 93       	push	r16
   168e6:	1f 93       	push	r17
   168e8:	cf 93       	push	r28
   168ea:	df 93       	push	r29
   168ec:	ec 01       	movw	r28, r24
   168ee:	8b 01       	movw	r16, r22
   168f0:	80 e0       	ldi	r24, 0x00	; 0
   168f2:	90 e0       	ldi	r25, 0x00	; 0
   168f4:	23 e3       	ldi	r18, 0x33	; 51
   168f6:	3f e2       	ldi	r19, 0x2F	; 47
   168f8:	69 01       	movw	r12, r18
   168fa:	2d 81       	ldd	r18, Y+5	; 0x05
   168fc:	30 e0       	ldi	r19, 0x00	; 0
   168fe:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16902:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16906:	47 a1       	ldd	r20, Z+39	; 0x27
   16908:	50 a5       	ldd	r21, Z+40	; 0x28
   1690a:	24 17       	cp	r18, r20
   1690c:	35 07       	cpc	r19, r21
   1690e:	7c f1       	brlt	.+94     	; 0x1696e <amigo_overflow_check+0x90>
   16910:	1d 82       	std	Y+5, r1	; 0x05
   16912:	2c 81       	ldd	r18, Y+4	; 0x04
   16914:	2f 5f       	subi	r18, 0xFF	; 255
   16916:	2c 83       	std	Y+4, r18	; 0x04
   16918:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   1691c:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16920:	2c 81       	ldd	r18, Y+4	; 0x04
   16922:	30 e0       	ldi	r19, 0x00	; 0
   16924:	41 a5       	ldd	r20, Z+41	; 0x29
   16926:	52 a5       	ldd	r21, Z+42	; 0x2a
   16928:	24 17       	cp	r18, r20
   1692a:	35 07       	cpc	r19, r21
   1692c:	34 f3       	brlt	.-52     	; 0x168fa <amigo_overflow_check+0x1c>
   1692e:	1c 82       	std	Y+4, r1	; 0x04
   16930:	2b 81       	ldd	r18, Y+3	; 0x03
   16932:	2f 5f       	subi	r18, 0xFF	; 255
   16934:	2b 83       	std	Y+3, r18	; 0x03
   16936:	30 e0       	ldi	r19, 0x00	; 0
   16938:	43 a5       	ldd	r20, Z+43	; 0x2b
   1693a:	54 a5       	ldd	r21, Z+44	; 0x2c
   1693c:	24 17       	cp	r18, r20
   1693e:	35 07       	cpc	r19, r21
   16940:	5c f3       	brlt	.-42     	; 0x16918 <amigo_overflow_check+0x3a>
   16942:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16946:	80 ff       	sbrs	r24, 0
   16948:	0f c0       	rjmp	.+30     	; 0x16968 <amigo_overflow_check+0x8a>
   1694a:	01 15       	cp	r16, r1
   1694c:	11 05       	cpc	r17, r1
   1694e:	61 f0       	breq	.+24     	; 0x16968 <amigo_overflow_check+0x8a>
   16950:	1f 93       	push	r17
   16952:	0f 93       	push	r16
   16954:	1f 92       	push	r1
   16956:	df 92       	push	r13
   16958:	cf 92       	push	r12
   1695a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1695e:	0f 90       	pop	r0
   16960:	0f 90       	pop	r0
   16962:	0f 90       	pop	r0
   16964:	0f 90       	pop	r0
   16966:	0f 90       	pop	r0
   16968:	81 e0       	ldi	r24, 0x01	; 1
   1696a:	90 e0       	ldi	r25, 0x00	; 0
   1696c:	d5 cf       	rjmp	.-86     	; 0x16918 <amigo_overflow_check+0x3a>
   1696e:	df 91       	pop	r29
   16970:	cf 91       	pop	r28
   16972:	1f 91       	pop	r17
   16974:	0f 91       	pop	r16
   16976:	ef 90       	pop	r14
   16978:	df 90       	pop	r13
   1697a:	cf 90       	pop	r12
   1697c:	08 95       	ret

0001697e <amigo_chs_to_logical>:
   1697e:	a0 e0       	ldi	r26, 0x00	; 0
   16980:	b0 e0       	ldi	r27, 0x00	; 0
   16982:	e5 ec       	ldi	r30, 0xC5	; 197
   16984:	f4 eb       	ldi	r31, 0xB4	; 180
   16986:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x12>
   1698a:	dc 01       	movw	r26, r24
   1698c:	d6 2f       	mov	r29, r22
   1698e:	17 2f       	mov	r17, r23
   16990:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16994:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16998:	87 a1       	ldd	r24, Z+39	; 0x27
   1699a:	90 a5       	ldd	r25, Z+40	; 0x28
   1699c:	14 96       	adiw	r26, 0x04	; 4
   1699e:	cc 91       	ld	r28, X
   169a0:	14 97       	sbiw	r26, 0x04	; 4
   169a2:	c8 9f       	mul	r28, r24
   169a4:	90 01       	movw	r18, r0
   169a6:	c9 9f       	mul	r28, r25
   169a8:	30 0d       	add	r19, r0
   169aa:	11 24       	eor	r1, r1
   169ac:	a9 01       	movw	r20, r18
   169ae:	33 0f       	add	r19, r19
   169b0:	66 0b       	sbc	r22, r22
   169b2:	77 0b       	sbc	r23, r23
   169b4:	13 96       	adiw	r26, 0x03	; 3
   169b6:	0c 91       	ld	r16, X
   169b8:	13 97       	sbiw	r26, 0x03	; 3
   169ba:	21 a5       	ldd	r18, Z+41	; 0x29
   169bc:	32 a5       	ldd	r19, Z+42	; 0x2a
   169be:	82 9f       	mul	r24, r18
   169c0:	70 01       	movw	r14, r0
   169c2:	83 9f       	mul	r24, r19
   169c4:	f0 0c       	add	r15, r0
   169c6:	92 9f       	mul	r25, r18
   169c8:	f0 0c       	add	r15, r0
   169ca:	11 24       	eor	r1, r1
   169cc:	0e 9d       	mul	r16, r14
   169ce:	90 01       	movw	r18, r0
   169d0:	0f 9d       	mul	r16, r15
   169d2:	30 0d       	add	r19, r0
   169d4:	11 24       	eor	r1, r1
   169d6:	69 01       	movw	r12, r18
   169d8:	33 0f       	add	r19, r19
   169da:	ee 08       	sbc	r14, r14
   169dc:	ff 08       	sbc	r15, r15
   169de:	4c 0d       	add	r20, r12
   169e0:	5d 1d       	adc	r21, r13
   169e2:	6e 1d       	adc	r22, r14
   169e4:	7f 1d       	adc	r23, r15
   169e6:	15 96       	adiw	r26, 0x05	; 5
   169e8:	bc 90       	ld	r11, X
   169ea:	9a 01       	movw	r18, r20
   169ec:	ab 01       	movw	r20, r22
   169ee:	2b 0d       	add	r18, r11
   169f0:	31 1d       	adc	r19, r1
   169f2:	41 1d       	adc	r20, r1
   169f4:	51 1d       	adc	r21, r1
   169f6:	a5 a1       	ldd	r26, Z+37	; 0x25
   169f8:	b6 a1       	ldd	r27, Z+38	; 0x26
   169fa:	0e 94 1f e5 	call	0x1ca3e	; 0x1ca3e <__mulshisi3>
   169fe:	6b 01       	movw	r12, r22
   16a00:	7c 01       	movw	r14, r24
   16a02:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16a06:	85 ff       	sbrs	r24, 5
   16a08:	22 c0       	rjmp	.+68     	; 0x16a4e <amigo_chs_to_logical+0xd0>
   16a0a:	1f 92       	push	r1
   16a0c:	bf 92       	push	r11
   16a0e:	1f 92       	push	r1
   16a10:	cf 93       	push	r28
   16a12:	1f 92       	push	r1
   16a14:	0f 93       	push	r16
   16a16:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16a1a:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16a1e:	81 81       	ldd	r24, Z+1	; 0x01
   16a20:	1f 92       	push	r1
   16a22:	8f 93       	push	r24
   16a24:	ff 92       	push	r15
   16a26:	ef 92       	push	r14
   16a28:	df 92       	push	r13
   16a2a:	cf 92       	push	r12
   16a2c:	1f 93       	push	r17
   16a2e:	df 93       	push	r29
   16a30:	80 ee       	ldi	r24, 0xE0	; 224
   16a32:	9e e2       	ldi	r25, 0x2E	; 46
   16a34:	1f 92       	push	r1
   16a36:	9f 93       	push	r25
   16a38:	8f 93       	push	r24
   16a3a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16a3e:	8d b7       	in	r24, 0x3d	; 61
   16a40:	9e b7       	in	r25, 0x3e	; 62
   16a42:	41 96       	adiw	r24, 0x11	; 17
   16a44:	0f b6       	in	r0, 0x3f	; 63
   16a46:	f8 94       	cli
   16a48:	9e bf       	out	0x3e, r25	; 62
   16a4a:	0f be       	out	0x3f, r0	; 63
   16a4c:	8d bf       	out	0x3d, r24	; 61
   16a4e:	b6 01       	movw	r22, r12
   16a50:	c7 01       	movw	r24, r14
   16a52:	cd b7       	in	r28, 0x3d	; 61
   16a54:	de b7       	in	r29, 0x3e	; 62
   16a56:	e9 e0       	ldi	r30, 0x09	; 9
   16a58:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x12>

00016a5c <amigo_init>:
   16a5c:	ef 92       	push	r14
   16a5e:	ff 92       	push	r15
   16a60:	0f 93       	push	r16
   16a62:	1f 93       	push	r17
   16a64:	cf 93       	push	r28
   16a66:	df 93       	push	r29
   16a68:	05 ec       	ldi	r16, 0xC5	; 197
   16a6a:	1f e1       	ldi	r17, 0x1F	; 31
   16a6c:	cb e0       	ldi	r28, 0x0B	; 11
   16a6e:	d0 e0       	ldi	r29, 0x00	; 0
   16a70:	84 e0       	ldi	r24, 0x04	; 4
   16a72:	f8 2e       	mov	r15, r24
   16a74:	92 e0       	ldi	r25, 0x02	; 2
   16a76:	e9 2e       	mov	r14, r25
   16a78:	d8 01       	movw	r26, r16
   16a7a:	8c 91       	ld	r24, X
   16a7c:	81 30       	cpi	r24, 0x01	; 1
   16a7e:	31 f5       	brne	.+76     	; 0x16acc <amigo_init+0x70>
   16a80:	ce 01       	movw	r24, r28
   16a82:	0e 94 ad 92 	call	0x1255a	; 0x1255a <set_active_device>
   16a86:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16a8a:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16a8e:	10 82       	st	Z, r1
   16a90:	9f 01       	movw	r18, r30
   16a92:	27 5f       	subi	r18, 0xF7	; 247
   16a94:	3f 4f       	sbci	r19, 0xFF	; 255
   16a96:	d9 01       	movw	r26, r18
   16a98:	8f 2d       	mov	r24, r15
   16a9a:	1d 92       	st	X+, r1
   16a9c:	8a 95       	dec	r24
   16a9e:	e9 f7       	brne	.-6      	; 0x16a9a <amigo_init+0x3e>
   16aa0:	2c 5f       	subi	r18, 0xFC	; 252
   16aa2:	3f 4f       	sbci	r19, 0xFF	; 255
   16aa4:	d9 01       	movw	r26, r18
   16aa6:	8f 2d       	mov	r24, r15
   16aa8:	1d 92       	st	X+, r1
   16aaa:	8a 95       	dec	r24
   16aac:	e9 f7       	brne	.-6      	; 0x16aa8 <amigo_init+0x4c>
   16aae:	11 82       	std	Z+1, r1	; 0x01
   16ab0:	15 82       	std	Z+5, r1	; 0x05
   16ab2:	14 82       	std	Z+4, r1	; 0x04
   16ab4:	13 82       	std	Z+3, r1	; 0x03
   16ab6:	e6 82       	std	Z+6, r14	; 0x06
   16ab8:	10 86       	std	Z+8, r1	; 0x08
   16aba:	17 82       	std	Z+7, r1	; 0x07
   16abc:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16ac0:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16ac4:	81 81       	ldd	r24, Z+1	; 0x01
   16ac6:	90 e0       	ldi	r25, 0x00	; 0
   16ac8:	0e 94 17 86 	call	0x10c2e	; 0x10c2e <gpib_disable_PPR>
   16acc:	21 97       	sbiw	r28, 0x01	; 1
   16ace:	0b 52       	subi	r16, 0x2B	; 43
   16ad0:	11 09       	sbc	r17, r1
   16ad2:	cf 3f       	cpi	r28, 0xFF	; 255
   16ad4:	af ef       	ldi	r26, 0xFF	; 255
   16ad6:	da 07       	cpc	r29, r26
   16ad8:	79 f6       	brne	.-98     	; 0x16a78 <amigo_init+0x1c>
   16ada:	cd b7       	in	r28, 0x3d	; 61
   16adc:	de b7       	in	r29, 0x3e	; 62
   16ade:	e6 e0       	ldi	r30, 0x06	; 6
   16ae0:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

00016ae4 <amigo_request_logical_address>:
   16ae4:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16ae8:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16aec:	15 86       	std	Z+13, r1	; 0x0d
   16aee:	83 81       	ldd	r24, Z+3	; 0x03
   16af0:	86 87       	std	Z+14, r24	; 0x0e
   16af2:	84 81       	ldd	r24, Z+4	; 0x04
   16af4:	87 87       	std	Z+15, r24	; 0x0f
   16af6:	85 81       	ldd	r24, Z+5	; 0x05
   16af8:	80 8b       	std	Z+16, r24	; 0x10
   16afa:	80 e0       	ldi	r24, 0x00	; 0
   16afc:	90 e0       	ldi	r25, 0x00	; 0
   16afe:	08 95       	ret

00016b00 <amigo_request_status>:
   16b00:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16b04:	85 ff       	sbrs	r24, 5
   16b06:	0a c0       	rjmp	.+20     	; 0x16b1c <amigo_request_status+0x1c>
   16b08:	83 eb       	ldi	r24, 0xB3	; 179
   16b0a:	9f e2       	ldi	r25, 0x2F	; 47
   16b0c:	1f 92       	push	r1
   16b0e:	9f 93       	push	r25
   16b10:	8f 93       	push	r24
   16b12:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16b16:	0f 90       	pop	r0
   16b18:	0f 90       	pop	r0
   16b1a:	0f 90       	pop	r0
   16b1c:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16b20:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16b24:	11 86       	std	Z+9, r1	; 0x09
   16b26:	81 81       	ldd	r24, Z+1	; 0x01
   16b28:	82 87       	std	Z+10, r24	; 0x0a
   16b2a:	8d e0       	ldi	r24, 0x0D	; 13
   16b2c:	83 87       	std	Z+11, r24	; 0x0b
   16b2e:	14 86       	std	Z+12, r1	; 0x0c
   16b30:	0e 94 98 70 	call	0xe130	; 0xe130 <mmc_wp_status>
   16b34:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16b38:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16b3c:	89 2b       	or	r24, r25
   16b3e:	19 f0       	breq	.+6      	; 0x16b46 <amigo_request_status+0x46>
   16b40:	84 85       	ldd	r24, Z+12	; 0x0c
   16b42:	80 66       	ori	r24, 0x60	; 96
   16b44:	84 87       	std	Z+12, r24	; 0x0c
   16b46:	86 81       	ldd	r24, Z+6	; 0x06
   16b48:	82 30       	cpi	r24, 0x02	; 2
   16b4a:	31 f4       	brne	.+12     	; 0x16b58 <amigo_request_status+0x58>
   16b4c:	83 e1       	ldi	r24, 0x13	; 19
   16b4e:	81 87       	std	Z+9, r24	; 0x09
   16b50:	84 85       	ldd	r24, Z+12	; 0x0c
   16b52:	88 60       	ori	r24, 0x08	; 8
   16b54:	84 87       	std	Z+12, r24	; 0x0c
   16b56:	21 c0       	rjmp	.+66     	; 0x16b9a <amigo_request_status+0x9a>
   16b58:	27 81       	ldd	r18, Z+7	; 0x07
   16b5a:	30 85       	ldd	r19, Z+8	; 0x08
   16b5c:	21 15       	cp	r18, r1
   16b5e:	31 05       	cpc	r19, r1
   16b60:	11 f4       	brne	.+4      	; 0x16b66 <amigo_request_status+0x66>
   16b62:	81 30       	cpi	r24, 0x01	; 1
   16b64:	d1 f4       	brne	.+52     	; 0x16b9a <amigo_request_status+0x9a>
   16b66:	26 fd       	sbrc	r18, 6
   16b68:	0c c0       	rjmp	.+24     	; 0x16b82 <amigo_request_status+0x82>
   16b6a:	25 ff       	sbrs	r18, 5
   16b6c:	03 c0       	rjmp	.+6      	; 0x16b74 <amigo_request_status+0x74>
   16b6e:	8a e0       	ldi	r24, 0x0A	; 10
   16b70:	81 87       	std	Z+9, r24	; 0x09
   16b72:	0d c0       	rjmp	.+26     	; 0x16b8e <amigo_request_status+0x8e>
   16b74:	84 85       	ldd	r24, Z+12	; 0x0c
   16b76:	24 ff       	sbrs	r18, 4
   16b78:	02 c0       	rjmp	.+4      	; 0x16b7e <amigo_request_status+0x7e>
   16b7a:	83 60       	ori	r24, 0x03	; 3
   16b7c:	07 c0       	rjmp	.+14     	; 0x16b8c <amigo_request_status+0x8c>
   16b7e:	21 ff       	sbrs	r18, 1
   16b80:	02 c0       	rjmp	.+4      	; 0x16b86 <amigo_request_status+0x86>
   16b82:	83 e1       	ldi	r24, 0x13	; 19
   16b84:	f5 cf       	rjmp	.-22     	; 0x16b70 <amigo_request_status+0x70>
   16b86:	22 ff       	sbrs	r18, 2
   16b88:	02 c0       	rjmp	.+4      	; 0x16b8e <amigo_request_status+0x8e>
   16b8a:	84 60       	ori	r24, 0x04	; 4
   16b8c:	84 87       	std	Z+12, r24	; 0x0c
   16b8e:	84 85       	ldd	r24, Z+12	; 0x0c
   16b90:	80 61       	ori	r24, 0x10	; 16
   16b92:	84 87       	std	Z+12, r24	; 0x0c
   16b94:	83 85       	ldd	r24, Z+11	; 0x0b
   16b96:	80 68       	ori	r24, 0x80	; 128
   16b98:	83 87       	std	Z+11, r24	; 0x0b
   16b9a:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16b9e:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16ba2:	81 81       	ldd	r24, Z+1	; 0x01
   16ba4:	90 e0       	ldi	r25, 0x00	; 0
   16ba6:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   16baa:	80 e0       	ldi	r24, 0x00	; 0
   16bac:	90 e0       	ldi	r25, 0x00	; 0
   16bae:	08 95       	ret

00016bb0 <amigo_send_logical_address>:
   16bb0:	a2 e0       	ldi	r26, 0x02	; 2
   16bb2:	b0 e0       	ldi	r27, 0x00	; 0
   16bb4:	ee ed       	ldi	r30, 0xDE	; 222
   16bb6:	f5 eb       	ldi	r31, 0xB5	; 181
   16bb8:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
   16bbc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16bc0:	85 ff       	sbrs	r24, 5
   16bc2:	0a c0       	rjmp	.+20     	; 0x16bd8 <amigo_send_logical_address+0x28>
   16bc4:	85 e9       	ldi	r24, 0x95	; 149
   16bc6:	9f e2       	ldi	r25, 0x2F	; 47
   16bc8:	1f 92       	push	r1
   16bca:	9f 93       	push	r25
   16bcc:	8f 93       	push	r24
   16bce:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16bd2:	0f 90       	pop	r0
   16bd4:	0f 90       	pop	r0
   16bd6:	0f 90       	pop	r0
   16bd8:	80 e0       	ldi	r24, 0x00	; 0
   16bda:	91 e0       	ldi	r25, 0x01	; 1
   16bdc:	9a 83       	std	Y+2, r25	; 0x02
   16bde:	89 83       	std	Y+1, r24	; 0x01
   16be0:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <AMIGOs>
   16be4:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <AMIGOs+0x1>
   16be8:	ae 01       	movw	r20, r28
   16bea:	4f 5f       	subi	r20, 0xFF	; 255
   16bec:	5f 4f       	sbci	r21, 0xFF	; 255
   16bee:	64 e0       	ldi	r22, 0x04	; 4
   16bf0:	70 e0       	ldi	r23, 0x00	; 0
   16bf2:	0d 96       	adiw	r24, 0x0d	; 13
   16bf4:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_write_str>
   16bf8:	29 81       	ldd	r18, Y+1	; 0x01
   16bfa:	3a 81       	ldd	r19, Y+2	; 0x02
   16bfc:	22 27       	eor	r18, r18
   16bfe:	30 7d       	andi	r19, 0xD0	; 208
   16c00:	23 2b       	or	r18, r19
   16c02:	49 f0       	breq	.+18     	; 0x16c16 <amigo_send_logical_address+0x66>
   16c04:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16c08:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16c0c:	27 81       	ldd	r18, Z+7	; 0x07
   16c0e:	30 85       	ldd	r19, Z+8	; 0x08
   16c10:	20 62       	ori	r18, 0x20	; 32
   16c12:	30 87       	std	Z+8, r19	; 0x08
   16c14:	27 83       	std	Z+7, r18	; 0x07
   16c16:	04 97       	sbiw	r24, 0x04	; 4
   16c18:	c9 f0       	breq	.+50     	; 0x16c4c <amigo_send_logical_address+0x9c>
   16c1a:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16c1e:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16c22:	87 81       	ldd	r24, Z+7	; 0x07
   16c24:	90 85       	ldd	r25, Z+8	; 0x08
   16c26:	80 62       	ori	r24, 0x20	; 32
   16c28:	90 87       	std	Z+8, r25	; 0x08
   16c2a:	87 83       	std	Z+7, r24	; 0x07
   16c2c:	81 e0       	ldi	r24, 0x01	; 1
   16c2e:	86 83       	std	Z+6, r24	; 0x06
   16c30:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16c34:	80 ff       	sbrs	r24, 0
   16c36:	0a c0       	rjmp	.+20     	; 0x16c4c <amigo_send_logical_address+0x9c>
   16c38:	8b e7       	ldi	r24, 0x7B	; 123
   16c3a:	9f e2       	ldi	r25, 0x2F	; 47
   16c3c:	1f 92       	push	r1
   16c3e:	9f 93       	push	r25
   16c40:	8f 93       	push	r24
   16c42:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16c46:	0f 90       	pop	r0
   16c48:	0f 90       	pop	r0
   16c4a:	0f 90       	pop	r0
   16c4c:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16c50:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16c54:	81 81       	ldd	r24, Z+1	; 0x01
   16c56:	90 e0       	ldi	r25, 0x00	; 0
   16c58:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   16c5c:	89 81       	ldd	r24, Y+1	; 0x01
   16c5e:	9a 81       	ldd	r25, Y+2	; 0x02
   16c60:	88 27       	eor	r24, r24
   16c62:	90 7d       	andi	r25, 0xD0	; 208
   16c64:	22 96       	adiw	r28, 0x02	; 2
   16c66:	e2 e0       	ldi	r30, 0x02	; 2
   16c68:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

00016c6c <amigo_send_status>:
   16c6c:	a2 e0       	ldi	r26, 0x02	; 2
   16c6e:	b0 e0       	ldi	r27, 0x00	; 0
   16c70:	ec e3       	ldi	r30, 0x3C	; 60
   16c72:	f6 eb       	ldi	r31, 0xB6	; 182
   16c74:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
   16c78:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16c7c:	85 ff       	sbrs	r24, 5
   16c7e:	0a c0       	rjmp	.+20     	; 0x16c94 <amigo_send_status+0x28>
   16c80:	86 e6       	ldi	r24, 0x66	; 102
   16c82:	9f e2       	ldi	r25, 0x2F	; 47
   16c84:	1f 92       	push	r1
   16c86:	9f 93       	push	r25
   16c88:	8f 93       	push	r24
   16c8a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16c8e:	0f 90       	pop	r0
   16c90:	0f 90       	pop	r0
   16c92:	0f 90       	pop	r0
   16c94:	80 e0       	ldi	r24, 0x00	; 0
   16c96:	91 e0       	ldi	r25, 0x01	; 1
   16c98:	9a 83       	std	Y+2, r25	; 0x02
   16c9a:	89 83       	std	Y+1, r24	; 0x01
   16c9c:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <AMIGOs>
   16ca0:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <AMIGOs+0x1>
   16ca4:	ae 01       	movw	r20, r28
   16ca6:	4f 5f       	subi	r20, 0xFF	; 255
   16ca8:	5f 4f       	sbci	r21, 0xFF	; 255
   16caa:	64 e0       	ldi	r22, 0x04	; 4
   16cac:	70 e0       	ldi	r23, 0x00	; 0
   16cae:	09 96       	adiw	r24, 0x09	; 9
   16cb0:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_write_str>
   16cb4:	29 81       	ldd	r18, Y+1	; 0x01
   16cb6:	3a 81       	ldd	r19, Y+2	; 0x02
   16cb8:	22 27       	eor	r18, r18
   16cba:	30 7d       	andi	r19, 0xD0	; 208
   16cbc:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16cc0:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16cc4:	23 2b       	or	r18, r19
   16cc6:	29 f0       	breq	.+10     	; 0x16cd2 <amigo_send_status+0x66>
   16cc8:	27 81       	ldd	r18, Z+7	; 0x07
   16cca:	30 85       	ldd	r19, Z+8	; 0x08
   16ccc:	20 62       	ori	r18, 0x20	; 32
   16cce:	30 87       	std	Z+8, r19	; 0x08
   16cd0:	27 83       	std	Z+7, r18	; 0x07
   16cd2:	04 97       	sbiw	r24, 0x04	; 4
   16cd4:	b1 f0       	breq	.+44     	; 0x16d02 <amigo_send_status+0x96>
   16cd6:	87 81       	ldd	r24, Z+7	; 0x07
   16cd8:	90 85       	ldd	r25, Z+8	; 0x08
   16cda:	80 62       	ori	r24, 0x20	; 32
   16cdc:	90 87       	std	Z+8, r25	; 0x08
   16cde:	87 83       	std	Z+7, r24	; 0x07
   16ce0:	81 e0       	ldi	r24, 0x01	; 1
   16ce2:	86 83       	std	Z+6, r24	; 0x06
   16ce4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16ce8:	80 ff       	sbrs	r24, 0
   16cea:	0e c0       	rjmp	.+28     	; 0x16d08 <amigo_send_status+0x9c>
   16cec:	8c e4       	ldi	r24, 0x4C	; 76
   16cee:	9f e2       	ldi	r25, 0x2F	; 47
   16cf0:	1f 92       	push	r1
   16cf2:	9f 93       	push	r25
   16cf4:	8f 93       	push	r24
   16cf6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16cfa:	0f 90       	pop	r0
   16cfc:	0f 90       	pop	r0
   16cfe:	0f 90       	pop	r0
   16d00:	03 c0       	rjmp	.+6      	; 0x16d08 <amigo_send_status+0x9c>
   16d02:	10 86       	std	Z+8, r1	; 0x08
   16d04:	17 82       	std	Z+7, r1	; 0x07
   16d06:	16 82       	std	Z+6, r1	; 0x06
   16d08:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16d0c:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16d10:	81 81       	ldd	r24, Z+1	; 0x01
   16d12:	90 e0       	ldi	r25, 0x00	; 0
   16d14:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   16d18:	89 81       	ldd	r24, Y+1	; 0x01
   16d1a:	9a 81       	ldd	r25, Y+2	; 0x02
   16d1c:	88 27       	eor	r24, r24
   16d1e:	90 7d       	andi	r25, 0xD0	; 208
   16d20:	22 96       	adiw	r28, 0x02	; 2
   16d22:	e2 e0       	ldi	r30, 0x02	; 2
   16d24:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

00016d28 <amigo_increment>:
   16d28:	a1 e1       	ldi	r26, 0x11	; 17
   16d2a:	b0 e0       	ldi	r27, 0x00	; 0
   16d2c:	ea e9       	ldi	r30, 0x9A	; 154
   16d2e:	f6 eb       	ldi	r31, 0xB6	; 182
   16d30:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
   16d34:	bc 01       	movw	r22, r24
   16d36:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16d3a:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16d3e:	91 e1       	ldi	r25, 0x11	; 17
   16d40:	de 01       	movw	r26, r28
   16d42:	11 96       	adiw	r26, 0x01	; 1
   16d44:	01 90       	ld	r0, Z+
   16d46:	0d 92       	st	X+, r0
   16d48:	9a 95       	dec	r25
   16d4a:	e1 f7       	brne	.-8      	; 0x16d44 <amigo_increment+0x1c>
   16d4c:	9e 81       	ldd	r25, Y+6	; 0x06
   16d4e:	9f 5f       	subi	r25, 0xFF	; 255
   16d50:	9e 83       	std	Y+6, r25	; 0x06
   16d52:	ce 01       	movw	r24, r28
   16d54:	01 96       	adiw	r24, 0x01	; 1
   16d56:	c3 dd       	rcall	.-1146   	; 0x168de <amigo_overflow_check>
   16d58:	00 97       	sbiw	r24, 0x00	; 0
   16d5a:	59 f4       	brne	.+22     	; 0x16d72 <amigo_increment+0x4a>
   16d5c:	a0 91 61 18 	lds	r26, 0x1861	; 0x801861 <AMIGOs>
   16d60:	b0 91 62 18 	lds	r27, 0x1862	; 0x801862 <AMIGOs+0x1>
   16d64:	21 e1       	ldi	r18, 0x11	; 17
   16d66:	fe 01       	movw	r30, r28
   16d68:	31 96       	adiw	r30, 0x01	; 1
   16d6a:	01 90       	ld	r0, Z+
   16d6c:	0d 92       	st	X+, r0
   16d6e:	2a 95       	dec	r18
   16d70:	e1 f7       	brne	.-8      	; 0x16d6a <amigo_increment+0x42>
   16d72:	61 96       	adiw	r28, 0x11	; 17
   16d74:	e2 e0       	ldi	r30, 0x02	; 2
   16d76:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

00016d7a <amigo_seek>:
   16d7a:	0f 93       	push	r16
   16d7c:	1f 93       	push	r17
   16d7e:	cf 93       	push	r28
   16d80:	df 93       	push	r29
   16d82:	ec 01       	movw	r28, r24
   16d84:	6b ed       	ldi	r22, 0xDB	; 219
   16d86:	74 e1       	ldi	r23, 0x14	; 20
   16d88:	aa dd       	rcall	.-1196   	; 0x168de <amigo_overflow_check>
   16d8a:	8c 01       	movw	r16, r24
   16d8c:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16d90:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16d94:	89 2b       	or	r24, r25
   16d96:	41 f0       	breq	.+16     	; 0x16da8 <amigo_seek+0x2e>
   16d98:	81 e0       	ldi	r24, 0x01	; 1
   16d9a:	86 83       	std	Z+6, r24	; 0x06
   16d9c:	87 81       	ldd	r24, Z+7	; 0x07
   16d9e:	90 85       	ldd	r25, Z+8	; 0x08
   16da0:	84 60       	ori	r24, 0x04	; 4
   16da2:	90 87       	std	Z+8, r25	; 0x08
   16da4:	87 83       	std	Z+7, r24	; 0x07
   16da6:	06 c0       	rjmp	.+12     	; 0x16db4 <amigo_seek+0x3a>
   16da8:	8d 81       	ldd	r24, Y+5	; 0x05
   16daa:	85 83       	std	Z+5, r24	; 0x05
   16dac:	8c 81       	ldd	r24, Y+4	; 0x04
   16dae:	84 83       	std	Z+4, r24	; 0x04
   16db0:	8b 81       	ldd	r24, Y+3	; 0x03
   16db2:	83 83       	std	Z+3, r24	; 0x03
   16db4:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16db8:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16dbc:	81 81       	ldd	r24, Z+1	; 0x01
   16dbe:	90 e0       	ldi	r25, 0x00	; 0
   16dc0:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   16dc4:	c8 01       	movw	r24, r16
   16dc6:	df 91       	pop	r29
   16dc8:	cf 91       	pop	r28
   16dca:	1f 91       	pop	r17
   16dcc:	0f 91       	pop	r16
   16dce:	08 95       	ret

00016dd0 <amigo_verify>:
   16dd0:	8f 92       	push	r8
   16dd2:	9f 92       	push	r9
   16dd4:	af 92       	push	r10
   16dd6:	bf 92       	push	r11
   16dd8:	ef 92       	push	r14
   16dda:	ff 92       	push	r15
   16ddc:	0f 93       	push	r16
   16dde:	1f 93       	push	r17
   16de0:	cf 93       	push	r28
   16de2:	df 93       	push	r29
   16de4:	7c 01       	movw	r14, r24
   16de6:	60 ee       	ldi	r22, 0xE0	; 224
   16de8:	74 e1       	ldi	r23, 0x14	; 20
   16dea:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <AMIGOs>
   16dee:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <AMIGOs+0x1>
   16df2:	c5 dd       	rcall	.-1142   	; 0x1697e <amigo_chs_to_logical>
   16df4:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   16df8:	25 ff       	sbrs	r18, 5
   16dfa:	15 c0       	rjmp	.+42     	; 0x16e26 <amigo_verify+0x56>
   16dfc:	ff 92       	push	r15
   16dfe:	ef 92       	push	r14
   16e00:	9f 93       	push	r25
   16e02:	8f 93       	push	r24
   16e04:	7f 93       	push	r23
   16e06:	6f 93       	push	r22
   16e08:	8b e0       	ldi	r24, 0x0B	; 11
   16e0a:	9f e2       	ldi	r25, 0x2F	; 47
   16e0c:	1f 92       	push	r1
   16e0e:	9f 93       	push	r25
   16e10:	8f 93       	push	r24
   16e12:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16e16:	8d b7       	in	r24, 0x3d	; 61
   16e18:	9e b7       	in	r25, 0x3e	; 62
   16e1a:	09 96       	adiw	r24, 0x09	; 9
   16e1c:	0f b6       	in	r0, 0x3f	; 63
   16e1e:	f8 94       	cli
   16e20:	9e bf       	out	0x3e, r25	; 62
   16e22:	0f be       	out	0x3f, r0	; 63
   16e24:	8d bf       	out	0x3d, r24	; 61
   16e26:	e7 01       	movw	r28, r14
   16e28:	20 97       	sbiw	r28, 0x00	; 0
   16e2a:	09 f4       	brne	.+2      	; 0x16e2e <amigo_verify+0x5e>
   16e2c:	49 c0       	rjmp	.+146    	; 0x16ec0 <amigo_verify+0xf0>
   16e2e:	6d ee       	ldi	r22, 0xED	; 237
   16e30:	74 e1       	ldi	r23, 0x14	; 20
   16e32:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <AMIGOs>
   16e36:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <AMIGOs+0x1>
   16e3a:	a1 dd       	rcall	.-1214   	; 0x1697e <amigo_chs_to_logical>
   16e3c:	4b 01       	movw	r8, r22
   16e3e:	5c 01       	movw	r10, r24
   16e40:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16e44:	86 fd       	sbrc	r24, 6
   16e46:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <gpib_timer_elapsed_begin>
   16e4a:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <AMIGOp>
   16e4e:	90 91 64 18 	lds	r25, 0x1864	; 0x801864 <AMIGOp+0x1>
   16e52:	e0 90 61 18 	lds	r14, 0x1861	; 0x801861 <AMIGOs>
   16e56:	f0 90 62 18 	lds	r15, 0x1862	; 0x801862 <AMIGOs+0x1>
   16e5a:	e7 e0       	ldi	r30, 0x07	; 7
   16e5c:	ee 0e       	add	r14, r30
   16e5e:	f1 1c       	adc	r15, r1
   16e60:	fc 01       	movw	r30, r24
   16e62:	05 a1       	ldd	r16, Z+37	; 0x25
   16e64:	16 a1       	ldd	r17, Z+38	; 0x26
   16e66:	22 ee       	ldi	r18, 0xE2	; 226
   16e68:	3b e1       	ldi	r19, 0x1B	; 27
   16e6a:	b5 01       	movw	r22, r10
   16e6c:	a4 01       	movw	r20, r8
   16e6e:	02 96       	adiw	r24, 0x02	; 2
   16e70:	0e 94 80 84 	call	0x10900	; 0x10900 <dbf_open_read>
   16e74:	7c 01       	movw	r14, r24
   16e76:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16e7a:	86 ff       	sbrs	r24, 6
   16e7c:	04 c0       	rjmp	.+8      	; 0x16e86 <amigo_verify+0xb6>
   16e7e:	85 ef       	ldi	r24, 0xF5	; 245
   16e80:	9f e0       	ldi	r25, 0x0F	; 15
   16e82:	0e 94 40 85 	call	0x10a80	; 0x10a80 <gpib_timer_elapsed_end>
   16e86:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16e8a:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16e8e:	85 a1       	ldd	r24, Z+37	; 0x25
   16e90:	96 a1       	ldd	r25, Z+38	; 0x26
   16e92:	e8 16       	cp	r14, r24
   16e94:	f9 06       	cpc	r15, r25
   16e96:	61 f0       	breq	.+24     	; 0x16eb0 <amigo_verify+0xe0>
   16e98:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16e9c:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16ea0:	81 e0       	ldi	r24, 0x01	; 1
   16ea2:	86 83       	std	Z+6, r24	; 0x06
   16ea4:	87 81       	ldd	r24, Z+7	; 0x07
   16ea6:	90 85       	ldd	r25, Z+8	; 0x08
   16ea8:	81 60       	ori	r24, 0x01	; 1
   16eaa:	90 87       	std	Z+8, r25	; 0x08
   16eac:	87 83       	std	Z+7, r24	; 0x07
   16eae:	0b c0       	rjmp	.+22     	; 0x16ec6 <amigo_verify+0xf6>
   16eb0:	85 ef       	ldi	r24, 0xF5	; 245
   16eb2:	94 e1       	ldi	r25, 0x14	; 20
   16eb4:	39 df       	rcall	.-398    	; 0x16d28 <amigo_increment>
   16eb6:	21 97       	sbiw	r28, 0x01	; 1
   16eb8:	89 2b       	or	r24, r25
   16eba:	09 f4       	brne	.+2      	; 0x16ebe <amigo_verify+0xee>
   16ebc:	b5 cf       	rjmp	.-150    	; 0x16e28 <amigo_verify+0x58>
   16ebe:	03 c0       	rjmp	.+6      	; 0x16ec6 <amigo_verify+0xf6>
   16ec0:	c0 e0       	ldi	r28, 0x00	; 0
   16ec2:	d0 e0       	ldi	r29, 0x00	; 0
   16ec4:	02 c0       	rjmp	.+4      	; 0x16eca <amigo_verify+0xfa>
   16ec6:	c1 e0       	ldi	r28, 0x01	; 1
   16ec8:	d0 e0       	ldi	r29, 0x00	; 0
   16eca:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16ece:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16ed2:	81 81       	ldd	r24, Z+1	; 0x01
   16ed4:	90 e0       	ldi	r25, 0x00	; 0
   16ed6:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   16eda:	ce 01       	movw	r24, r28
   16edc:	df 91       	pop	r29
   16ede:	cf 91       	pop	r28
   16ee0:	1f 91       	pop	r17
   16ee2:	0f 91       	pop	r16
   16ee4:	ff 90       	pop	r15
   16ee6:	ef 90       	pop	r14
   16ee8:	bf 90       	pop	r11
   16eea:	af 90       	pop	r10
   16eec:	9f 90       	pop	r9
   16eee:	8f 90       	pop	r8
   16ef0:	08 95       	ret

00016ef2 <amigo_format>:
   16ef2:	ef 92       	push	r14
   16ef4:	ff 92       	push	r15
   16ef6:	0f 93       	push	r16
   16ef8:	1f 93       	push	r17
   16efa:	cf 93       	push	r28
   16efc:	df 93       	push	r29
   16efe:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16f02:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16f06:	15 82       	std	Z+5, r1	; 0x05
   16f08:	14 82       	std	Z+4, r1	; 0x04
   16f0a:	13 82       	std	Z+3, r1	; 0x03
   16f0c:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16f10:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16f14:	45 a1       	ldd	r20, Z+37	; 0x25
   16f16:	56 a1       	ldd	r21, Z+38	; 0x26
   16f18:	68 2f       	mov	r22, r24
   16f1a:	70 e0       	ldi	r23, 0x00	; 0
   16f1c:	82 ee       	ldi	r24, 0xE2	; 226
   16f1e:	9b e1       	ldi	r25, 0x1B	; 27
   16f20:	0e 94 01 ea 	call	0x1d402	; 0x1d402 <memset>
   16f24:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16f28:	85 ff       	sbrs	r24, 5
   16f2a:	0a c0       	rjmp	.+20     	; 0x16f40 <amigo_format+0x4e>
   16f2c:	80 ed       	ldi	r24, 0xD0	; 208
   16f2e:	9e e2       	ldi	r25, 0x2E	; 46
   16f30:	1f 92       	push	r1
   16f32:	9f 93       	push	r25
   16f34:	8f 93       	push	r24
   16f36:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16f3a:	0f 90       	pop	r0
   16f3c:	0f 90       	pop	r0
   16f3e:	0f 90       	pop	r0
   16f40:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16f44:	86 fd       	sbrc	r24, 6
   16f46:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <gpib_timer_elapsed_begin>
   16f4a:	6c ef       	ldi	r22, 0xFC	; 252
   16f4c:	74 e1       	ldi	r23, 0x14	; 20
   16f4e:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <AMIGOs>
   16f52:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <AMIGOs+0x1>
   16f56:	13 dd       	rcall	.-1498   	; 0x1697e <amigo_chs_to_logical>
   16f58:	ab 01       	movw	r20, r22
   16f5a:	bc 01       	movw	r22, r24
   16f5c:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <AMIGOp>
   16f60:	90 91 64 18 	lds	r25, 0x1864	; 0x801864 <AMIGOp+0x1>
   16f64:	e0 90 61 18 	lds	r14, 0x1861	; 0x801861 <AMIGOs>
   16f68:	f0 90 62 18 	lds	r15, 0x1862	; 0x801862 <AMIGOs+0x1>
   16f6c:	27 e0       	ldi	r18, 0x07	; 7
   16f6e:	e2 0e       	add	r14, r18
   16f70:	f1 1c       	adc	r15, r1
   16f72:	fc 01       	movw	r30, r24
   16f74:	05 a1       	ldd	r16, Z+37	; 0x25
   16f76:	16 a1       	ldd	r17, Z+38	; 0x26
   16f78:	22 ee       	ldi	r18, 0xE2	; 226
   16f7a:	3b e1       	ldi	r19, 0x1B	; 27
   16f7c:	02 96       	adiw	r24, 0x02	; 2
   16f7e:	0e 94 d7 84 	call	0x109ae	; 0x109ae <dbf_open_write>
   16f82:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16f86:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   16f8a:	25 a1       	ldd	r18, Z+37	; 0x25
   16f8c:	36 a1       	ldd	r19, Z+38	; 0x26
   16f8e:	82 17       	cp	r24, r18
   16f90:	93 07       	cpc	r25, r19
   16f92:	71 f0       	breq	.+28     	; 0x16fb0 <amigo_format+0xbe>
   16f94:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16f98:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16f9c:	87 81       	ldd	r24, Z+7	; 0x07
   16f9e:	90 85       	ldd	r25, Z+8	; 0x08
   16fa0:	82 60       	ori	r24, 0x02	; 2
   16fa2:	90 87       	std	Z+8, r25	; 0x08
   16fa4:	87 83       	std	Z+7, r24	; 0x07
   16fa6:	81 e0       	ldi	r24, 0x01	; 1
   16fa8:	86 83       	std	Z+6, r24	; 0x06
   16faa:	c1 e0       	ldi	r28, 0x01	; 1
   16fac:	d0 e0       	ldi	r29, 0x00	; 0
   16fae:	0f c0       	rjmp	.+30     	; 0x16fce <amigo_format+0xdc>
   16fb0:	80 e0       	ldi	r24, 0x00	; 0
   16fb2:	90 e0       	ldi	r25, 0x00	; 0
   16fb4:	b9 de       	rcall	.-654    	; 0x16d28 <amigo_increment>
   16fb6:	89 2b       	or	r24, r25
   16fb8:	41 f2       	breq	.-112    	; 0x16f4a <amigo_format+0x58>
   16fba:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   16fbe:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   16fc2:	15 82       	std	Z+5, r1	; 0x05
   16fc4:	14 82       	std	Z+4, r1	; 0x04
   16fc6:	13 82       	std	Z+3, r1	; 0x03
   16fc8:	16 82       	std	Z+6, r1	; 0x06
   16fca:	c0 e0       	ldi	r28, 0x00	; 0
   16fcc:	d0 e0       	ldi	r29, 0x00	; 0
   16fce:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16fd2:	86 ff       	sbrs	r24, 6
   16fd4:	04 c0       	rjmp	.+8      	; 0x16fde <amigo_format+0xec>
   16fd6:	8c ef       	ldi	r24, 0xFC	; 252
   16fd8:	94 e1       	ldi	r25, 0x14	; 20
   16fda:	0e 94 40 85 	call	0x10a80	; 0x10a80 <gpib_timer_elapsed_end>
   16fde:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16fe2:	85 ff       	sbrs	r24, 5
   16fe4:	0a c0       	rjmp	.+20     	; 0x16ffa <amigo_format+0x108>
   16fe6:	8b eb       	ldi	r24, 0xBB	; 187
   16fe8:	9e e2       	ldi	r25, 0x2E	; 46
   16fea:	1f 92       	push	r1
   16fec:	9f 93       	push	r25
   16fee:	8f 93       	push	r24
   16ff0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   16ff4:	0f 90       	pop	r0
   16ff6:	0f 90       	pop	r0
   16ff8:	0f 90       	pop	r0
   16ffa:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   16ffe:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17002:	81 81       	ldd	r24, Z+1	; 0x01
   17004:	90 e0       	ldi	r25, 0x00	; 0
   17006:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   1700a:	ce 01       	movw	r24, r28
   1700c:	cd b7       	in	r28, 0x3d	; 61
   1700e:	de b7       	in	r29, 0x3e	; 62
   17010:	e6 e0       	ldi	r30, 0x06	; 6
   17012:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

00017016 <amigo_buffered_read>:
   17016:	8f 92       	push	r8
   17018:	9f 92       	push	r9
   1701a:	af 92       	push	r10
   1701c:	bf 92       	push	r11
   1701e:	ef 92       	push	r14
   17020:	ff 92       	push	r15
   17022:	0f 93       	push	r16
   17024:	1f 93       	push	r17
   17026:	cf 93       	push	r28
   17028:	df 93       	push	r29
   1702a:	00 d0       	rcall	.+0      	; 0x1702c <amigo_buffered_read+0x16>
   1702c:	cd b7       	in	r28, 0x3d	; 61
   1702e:	de b7       	in	r29, 0x3e	; 62
   17030:	63 e0       	ldi	r22, 0x03	; 3
   17032:	75 e1       	ldi	r23, 0x15	; 21
   17034:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <AMIGOs>
   17038:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <AMIGOs+0x1>
   1703c:	a0 dc       	rcall	.-1728   	; 0x1697e <amigo_chs_to_logical>
   1703e:	4b 01       	movw	r8, r22
   17040:	5c 01       	movw	r10, r24
   17042:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17046:	86 fd       	sbrc	r24, 6
   17048:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <gpib_timer_elapsed_begin>
   1704c:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <AMIGOp>
   17050:	90 91 64 18 	lds	r25, 0x1864	; 0x801864 <AMIGOp+0x1>
   17054:	e0 90 61 18 	lds	r14, 0x1861	; 0x801861 <AMIGOs>
   17058:	f0 90 62 18 	lds	r15, 0x1862	; 0x801862 <AMIGOs+0x1>
   1705c:	27 e0       	ldi	r18, 0x07	; 7
   1705e:	e2 0e       	add	r14, r18
   17060:	f1 1c       	adc	r15, r1
   17062:	fc 01       	movw	r30, r24
   17064:	05 a1       	ldd	r16, Z+37	; 0x25
   17066:	16 a1       	ldd	r17, Z+38	; 0x26
   17068:	22 ee       	ldi	r18, 0xE2	; 226
   1706a:	3b e1       	ldi	r19, 0x1B	; 27
   1706c:	b5 01       	movw	r22, r10
   1706e:	a4 01       	movw	r20, r8
   17070:	02 96       	adiw	r24, 0x02	; 2
   17072:	0e 94 80 84 	call	0x10900	; 0x10900 <dbf_open_read>
   17076:	7c 01       	movw	r14, r24
   17078:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1707c:	86 ff       	sbrs	r24, 6
   1707e:	04 c0       	rjmp	.+8      	; 0x17088 <amigo_buffered_read+0x72>
   17080:	85 ef       	ldi	r24, 0xF5	; 245
   17082:	9f e0       	ldi	r25, 0x0F	; 15
   17084:	0e 94 40 85 	call	0x10a80	; 0x10a80 <gpib_timer_elapsed_end>
   17088:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   1708c:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17090:	85 a1       	ldd	r24, Z+37	; 0x25
   17092:	96 a1       	ldd	r25, Z+38	; 0x26
   17094:	e8 16       	cp	r14, r24
   17096:	f9 06       	cpc	r15, r25
   17098:	39 f0       	breq	.+14     	; 0x170a8 <amigo_buffered_read+0x92>
   1709a:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   1709e:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   170a2:	81 e0       	ldi	r24, 0x01	; 1
   170a4:	86 83       	std	Z+6, r24	; 0x06
   170a6:	6c c0       	rjmp	.+216    	; 0x17180 <amigo_buffered_read+0x16a>
   170a8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   170ac:	87 fd       	sbrc	r24, 7
   170ae:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <gpib_timer_elapsed_begin>
   170b2:	80 e0       	ldi	r24, 0x00	; 0
   170b4:	91 e0       	ldi	r25, 0x01	; 1
   170b6:	9a 83       	std	Y+2, r25	; 0x02
   170b8:	89 83       	std	Y+1, r24	; 0x01
   170ba:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   170be:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   170c2:	65 a1       	ldd	r22, Z+37	; 0x25
   170c4:	76 a1       	ldd	r23, Z+38	; 0x26
   170c6:	ae 01       	movw	r20, r28
   170c8:	4f 5f       	subi	r20, 0xFF	; 255
   170ca:	5f 4f       	sbci	r21, 0xFF	; 255
   170cc:	82 ee       	ldi	r24, 0xE2	; 226
   170ce:	9b e1       	ldi	r25, 0x1B	; 27
   170d0:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_write_str>
   170d4:	7c 01       	movw	r14, r24
   170d6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   170da:	87 ff       	sbrs	r24, 7
   170dc:	04 c0       	rjmp	.+8      	; 0x170e6 <amigo_buffered_read+0xd0>
   170de:	81 e1       	ldi	r24, 0x11	; 17
   170e0:	95 e1       	ldi	r25, 0x15	; 21
   170e2:	0e 94 40 85 	call	0x10a80	; 0x10a80 <gpib_timer_elapsed_end>
   170e6:	89 81       	ldd	r24, Y+1	; 0x01
   170e8:	9a 81       	ldd	r25, Y+2	; 0x02
   170ea:	88 27       	eor	r24, r24
   170ec:	90 7d       	andi	r25, 0xD0	; 208
   170ee:	89 2b       	or	r24, r25
   170f0:	49 f4       	brne	.+18     	; 0x17104 <amigo_buffered_read+0xee>
   170f2:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   170f6:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   170fa:	85 a1       	ldd	r24, Z+37	; 0x25
   170fc:	96 a1       	ldd	r25, Z+38	; 0x26
   170fe:	e8 16       	cp	r14, r24
   17100:	f9 06       	cpc	r15, r25
   17102:	31 f1       	breq	.+76     	; 0x17150 <amigo_buffered_read+0x13a>
   17104:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17108:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   1710c:	81 e0       	ldi	r24, 0x01	; 1
   1710e:	86 83       	std	Z+6, r24	; 0x06
   17110:	87 81       	ldd	r24, Z+7	; 0x07
   17112:	90 85       	ldd	r25, Z+8	; 0x08
   17114:	80 62       	ori	r24, 0x20	; 32
   17116:	90 87       	std	Z+8, r25	; 0x08
   17118:	87 83       	std	Z+7, r24	; 0x07
   1711a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1711e:	80 ff       	sbrs	r24, 0
   17120:	0a c0       	rjmp	.+20     	; 0x17136 <amigo_buffered_read+0x120>
   17122:	81 ea       	ldi	r24, 0xA1	; 161
   17124:	9e e2       	ldi	r25, 0x2E	; 46
   17126:	1f 92       	push	r1
   17128:	9f 93       	push	r25
   1712a:	8f 93       	push	r24
   1712c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17130:	0f 90       	pop	r0
   17132:	0f 90       	pop	r0
   17134:	0f 90       	pop	r0
   17136:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   1713a:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   1713e:	81 81       	ldd	r24, Z+1	; 0x01
   17140:	90 e0       	ldi	r25, 0x00	; 0
   17142:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   17146:	89 81       	ldd	r24, Y+1	; 0x01
   17148:	9a 81       	ldd	r25, Y+2	; 0x02
   1714a:	88 27       	eor	r24, r24
   1714c:	90 7d       	andi	r25, 0xD0	; 208
   1714e:	1a c0       	rjmp	.+52     	; 0x17184 <amigo_buffered_read+0x16e>
   17150:	83 e0       	ldi	r24, 0x03	; 3
   17152:	95 e1       	ldi	r25, 0x15	; 21
   17154:	e9 dd       	rcall	.-1070   	; 0x16d28 <amigo_increment>
   17156:	89 2b       	or	r24, r25
   17158:	59 f0       	breq	.+22     	; 0x17170 <amigo_buffered_read+0x15a>
   1715a:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   1715e:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17162:	81 e0       	ldi	r24, 0x01	; 1
   17164:	86 83       	std	Z+6, r24	; 0x06
   17166:	87 81       	ldd	r24, Z+7	; 0x07
   17168:	90 85       	ldd	r25, Z+8	; 0x08
   1716a:	84 60       	ori	r24, 0x04	; 4
   1716c:	90 87       	std	Z+8, r25	; 0x08
   1716e:	87 83       	std	Z+7, r24	; 0x07
   17170:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17174:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17178:	81 81       	ldd	r24, Z+1	; 0x01
   1717a:	90 e0       	ldi	r25, 0x00	; 0
   1717c:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   17180:	80 e0       	ldi	r24, 0x00	; 0
   17182:	90 e0       	ldi	r25, 0x00	; 0
   17184:	0f 90       	pop	r0
   17186:	0f 90       	pop	r0
   17188:	df 91       	pop	r29
   1718a:	cf 91       	pop	r28
   1718c:	1f 91       	pop	r17
   1718e:	0f 91       	pop	r16
   17190:	ff 90       	pop	r15
   17192:	ef 90       	pop	r14
   17194:	bf 90       	pop	r11
   17196:	af 90       	pop	r10
   17198:	9f 90       	pop	r9
   1719a:	8f 90       	pop	r8
   1719c:	08 95       	ret

0001719e <amigo_buffered_write>:
   1719e:	8f 92       	push	r8
   171a0:	9f 92       	push	r9
   171a2:	af 92       	push	r10
   171a4:	bf 92       	push	r11
   171a6:	ef 92       	push	r14
   171a8:	ff 92       	push	r15
   171aa:	0f 93       	push	r16
   171ac:	1f 93       	push	r17
   171ae:	cf 93       	push	r28
   171b0:	df 93       	push	r29
   171b2:	00 d0       	rcall	.+0      	; 0x171b4 <amigo_buffered_write+0x16>
   171b4:	cd b7       	in	r28, 0x3d	; 61
   171b6:	de b7       	in	r29, 0x3e	; 62
   171b8:	6c e1       	ldi	r22, 0x1C	; 28
   171ba:	75 e1       	ldi	r23, 0x15	; 21
   171bc:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <AMIGOs>
   171c0:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <AMIGOs+0x1>
   171c4:	dc db       	rcall	.-2120   	; 0x1697e <amigo_chs_to_logical>
   171c6:	4b 01       	movw	r8, r22
   171c8:	5c 01       	movw	r10, r24
   171ca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   171ce:	87 fd       	sbrc	r24, 7
   171d0:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <gpib_timer_elapsed_begin>
   171d4:	1a 82       	std	Y+2, r1	; 0x02
   171d6:	19 82       	std	Y+1, r1	; 0x01
   171d8:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   171dc:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   171e0:	65 a1       	ldd	r22, Z+37	; 0x25
   171e2:	76 a1       	ldd	r23, Z+38	; 0x26
   171e4:	ae 01       	movw	r20, r28
   171e6:	4f 5f       	subi	r20, 0xFF	; 255
   171e8:	5f 4f       	sbci	r21, 0xFF	; 255
   171ea:	82 ee       	ldi	r24, 0xE2	; 226
   171ec:	9b e1       	ldi	r25, 0x1B	; 27
   171ee:	0e 94 88 8a 	call	0x11510	; 0x11510 <gpib_read_str>
   171f2:	7c 01       	movw	r14, r24
   171f4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   171f8:	87 ff       	sbrs	r24, 7
   171fa:	04 c0       	rjmp	.+8      	; 0x17204 <amigo_buffered_write+0x66>
   171fc:	8b e2       	ldi	r24, 0x2B	; 43
   171fe:	95 e1       	ldi	r25, 0x15	; 21
   17200:	0e 94 40 85 	call	0x10a80	; 0x10a80 <gpib_timer_elapsed_end>
   17204:	89 81       	ldd	r24, Y+1	; 0x01
   17206:	9a 81       	ldd	r25, Y+2	; 0x02
   17208:	88 27       	eor	r24, r24
   1720a:	90 7d       	andi	r25, 0xD0	; 208
   1720c:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   17210:	89 2b       	or	r24, r25
   17212:	49 f4       	brne	.+18     	; 0x17226 <amigo_buffered_write+0x88>
   17214:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17218:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   1721c:	85 a1       	ldd	r24, Z+37	; 0x25
   1721e:	96 a1       	ldd	r25, Z+38	; 0x26
   17220:	e8 16       	cp	r14, r24
   17222:	f9 06       	cpc	r15, r25
   17224:	c1 f0       	breq	.+48     	; 0x17256 <amigo_buffered_write+0xb8>
   17226:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   1722a:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   1722e:	81 e0       	ldi	r24, 0x01	; 1
   17230:	86 83       	std	Z+6, r24	; 0x06
   17232:	87 81       	ldd	r24, Z+7	; 0x07
   17234:	90 85       	ldd	r25, Z+8	; 0x08
   17236:	80 62       	ori	r24, 0x20	; 32
   17238:	90 87       	std	Z+8, r25	; 0x08
   1723a:	87 83       	std	Z+7, r24	; 0x07
   1723c:	20 ff       	sbrs	r18, 0
   1723e:	4e c0       	rjmp	.+156    	; 0x172dc <amigo_buffered_write+0x13e>
   17240:	82 e8       	ldi	r24, 0x82	; 130
   17242:	9e e2       	ldi	r25, 0x2E	; 46
   17244:	1f 92       	push	r1
   17246:	9f 93       	push	r25
   17248:	8f 93       	push	r24
   1724a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1724e:	0f 90       	pop	r0
   17250:	0f 90       	pop	r0
   17252:	0f 90       	pop	r0
   17254:	43 c0       	rjmp	.+134    	; 0x172dc <amigo_buffered_write+0x13e>
   17256:	26 fd       	sbrc	r18, 6
   17258:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <gpib_timer_elapsed_begin>
   1725c:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <AMIGOp>
   17260:	90 91 64 18 	lds	r25, 0x1864	; 0x801864 <AMIGOp+0x1>
   17264:	e0 90 61 18 	lds	r14, 0x1861	; 0x801861 <AMIGOs>
   17268:	f0 90 62 18 	lds	r15, 0x1862	; 0x801862 <AMIGOs+0x1>
   1726c:	27 e0       	ldi	r18, 0x07	; 7
   1726e:	e2 0e       	add	r14, r18
   17270:	f1 1c       	adc	r15, r1
   17272:	fc 01       	movw	r30, r24
   17274:	05 a1       	ldd	r16, Z+37	; 0x25
   17276:	16 a1       	ldd	r17, Z+38	; 0x26
   17278:	22 ee       	ldi	r18, 0xE2	; 226
   1727a:	3b e1       	ldi	r19, 0x1B	; 27
   1727c:	b5 01       	movw	r22, r10
   1727e:	a4 01       	movw	r20, r8
   17280:	02 96       	adiw	r24, 0x02	; 2
   17282:	0e 94 d7 84 	call	0x109ae	; 0x109ae <dbf_open_write>
   17286:	7c 01       	movw	r14, r24
   17288:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1728c:	86 ff       	sbrs	r24, 6
   1728e:	04 c0       	rjmp	.+8      	; 0x17298 <amigo_buffered_write+0xfa>
   17290:	8a ee       	ldi	r24, 0xEA	; 234
   17292:	9f e0       	ldi	r25, 0x0F	; 15
   17294:	0e 94 40 85 	call	0x10a80	; 0x10a80 <gpib_timer_elapsed_end>
   17298:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   1729c:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   172a0:	85 a1       	ldd	r24, Z+37	; 0x25
   172a2:	96 a1       	ldd	r25, Z+38	; 0x26
   172a4:	e8 16       	cp	r14, r24
   172a6:	f9 06       	cpc	r15, r25
   172a8:	49 f0       	breq	.+18     	; 0x172bc <amigo_buffered_write+0x11e>
   172aa:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   172ae:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   172b2:	81 e0       	ldi	r24, 0x01	; 1
   172b4:	86 83       	std	Z+6, r24	; 0x06
   172b6:	80 e0       	ldi	r24, 0x00	; 0
   172b8:	90 e0       	ldi	r25, 0x00	; 0
   172ba:	1c c0       	rjmp	.+56     	; 0x172f4 <amigo_buffered_write+0x156>
   172bc:	8c e1       	ldi	r24, 0x1C	; 28
   172be:	95 e1       	ldi	r25, 0x15	; 21
   172c0:	33 dd       	rcall	.-1434   	; 0x16d28 <amigo_increment>
   172c2:	89 2b       	or	r24, r25
   172c4:	59 f0       	breq	.+22     	; 0x172dc <amigo_buffered_write+0x13e>
   172c6:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   172ca:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   172ce:	81 e0       	ldi	r24, 0x01	; 1
   172d0:	86 83       	std	Z+6, r24	; 0x06
   172d2:	87 81       	ldd	r24, Z+7	; 0x07
   172d4:	90 85       	ldd	r25, Z+8	; 0x08
   172d6:	84 60       	ori	r24, 0x04	; 4
   172d8:	90 87       	std	Z+8, r25	; 0x08
   172da:	87 83       	std	Z+7, r24	; 0x07
   172dc:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   172e0:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   172e4:	81 81       	ldd	r24, Z+1	; 0x01
   172e6:	90 e0       	ldi	r25, 0x00	; 0
   172e8:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   172ec:	89 81       	ldd	r24, Y+1	; 0x01
   172ee:	9a 81       	ldd	r25, Y+2	; 0x02
   172f0:	88 27       	eor	r24, r24
   172f2:	90 7d       	andi	r25, 0xD0	; 208
   172f4:	0f 90       	pop	r0
   172f6:	0f 90       	pop	r0
   172f8:	df 91       	pop	r29
   172fa:	cf 91       	pop	r28
   172fc:	1f 91       	pop	r17
   172fe:	0f 91       	pop	r16
   17300:	ff 90       	pop	r15
   17302:	ef 90       	pop	r14
   17304:	bf 90       	pop	r11
   17306:	af 90       	pop	r10
   17308:	9f 90       	pop	r9
   1730a:	8f 90       	pop	r8
   1730c:	08 95       	ret

0001730e <amigo_cmd_dsj>:
   1730e:	a3 e0       	ldi	r26, 0x03	; 3
   17310:	b0 e0       	ldi	r27, 0x00	; 0
   17312:	ed e8       	ldi	r30, 0x8D	; 141
   17314:	f9 eb       	ldi	r31, 0xB9	; 185
   17316:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
   1731a:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   1731e:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17322:	86 81       	ldd	r24, Z+6	; 0x06
   17324:	8b 83       	std	Y+3, r24	; 0x03
   17326:	80 e0       	ldi	r24, 0x00	; 0
   17328:	91 e0       	ldi	r25, 0x01	; 1
   1732a:	9a 83       	std	Y+2, r25	; 0x02
   1732c:	89 83       	std	Y+1, r24	; 0x01
   1732e:	ae 01       	movw	r20, r28
   17330:	4f 5f       	subi	r20, 0xFF	; 255
   17332:	5f 4f       	sbci	r21, 0xFF	; 255
   17334:	61 e0       	ldi	r22, 0x01	; 1
   17336:	70 e0       	ldi	r23, 0x00	; 0
   17338:	ce 01       	movw	r24, r28
   1733a:	03 96       	adiw	r24, 0x03	; 3
   1733c:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_write_str>
   17340:	29 81       	ldd	r18, Y+1	; 0x01
   17342:	3a 81       	ldd	r19, Y+2	; 0x02
   17344:	22 27       	eor	r18, r18
   17346:	30 7d       	andi	r19, 0xD0	; 208
   17348:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   1734c:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17350:	23 2b       	or	r18, r19
   17352:	29 f0       	breq	.+10     	; 0x1735e <amigo_cmd_dsj+0x50>
   17354:	27 81       	ldd	r18, Z+7	; 0x07
   17356:	30 85       	ldd	r19, Z+8	; 0x08
   17358:	20 62       	ori	r18, 0x20	; 32
   1735a:	30 87       	std	Z+8, r19	; 0x08
   1735c:	27 83       	std	Z+7, r18	; 0x07
   1735e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   17362:	01 97       	sbiw	r24, 0x01	; 1
   17364:	c1 f0       	breq	.+48     	; 0x17396 <amigo_cmd_dsj+0x88>
   17366:	81 e0       	ldi	r24, 0x01	; 1
   17368:	86 83       	std	Z+6, r24	; 0x06
   1736a:	87 81       	ldd	r24, Z+7	; 0x07
   1736c:	90 85       	ldd	r25, Z+8	; 0x08
   1736e:	80 62       	ori	r24, 0x20	; 32
   17370:	90 87       	std	Z+8, r25	; 0x08
   17372:	87 83       	std	Z+7, r24	; 0x07
   17374:	20 ff       	sbrs	r18, 0
   17376:	0a c0       	rjmp	.+20     	; 0x1738c <amigo_cmd_dsj+0x7e>
   17378:	88 e6       	ldi	r24, 0x68	; 104
   1737a:	9e e2       	ldi	r25, 0x2E	; 46
   1737c:	1f 92       	push	r1
   1737e:	9f 93       	push	r25
   17380:	8f 93       	push	r24
   17382:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17386:	0f 90       	pop	r0
   17388:	0f 90       	pop	r0
   1738a:	0f 90       	pop	r0
   1738c:	89 81       	ldd	r24, Y+1	; 0x01
   1738e:	9a 81       	ldd	r25, Y+2	; 0x02
   17390:	88 27       	eor	r24, r24
   17392:	90 7d       	andi	r25, 0xD0	; 208
   17394:	1a c0       	rjmp	.+52     	; 0x173ca <amigo_cmd_dsj+0xbc>
   17396:	25 ff       	sbrs	r18, 5
   17398:	0f c0       	rjmp	.+30     	; 0x173b8 <amigo_cmd_dsj+0xaa>
   1739a:	86 81       	ldd	r24, Z+6	; 0x06
   1739c:	1f 92       	push	r1
   1739e:	8f 93       	push	r24
   173a0:	8b e5       	ldi	r24, 0x5B	; 91
   173a2:	9e e2       	ldi	r25, 0x2E	; 46
   173a4:	1f 92       	push	r1
   173a6:	9f 93       	push	r25
   173a8:	8f 93       	push	r24
   173aa:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   173ae:	0f 90       	pop	r0
   173b0:	0f 90       	pop	r0
   173b2:	0f 90       	pop	r0
   173b4:	0f 90       	pop	r0
   173b6:	0f 90       	pop	r0
   173b8:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   173bc:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   173c0:	16 82       	std	Z+6, r1	; 0x06
   173c2:	10 86       	std	Z+8, r1	; 0x08
   173c4:	17 82       	std	Z+7, r1	; 0x07
   173c6:	80 e0       	ldi	r24, 0x00	; 0
   173c8:	90 e0       	ldi	r25, 0x00	; 0
   173ca:	23 96       	adiw	r28, 0x03	; 3
   173cc:	e2 e0       	ldi	r30, 0x02	; 2
   173ce:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

000173d2 <amigo_cmd_clear>:
   173d2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   173d6:	85 ff       	sbrs	r24, 5
   173d8:	0a c0       	rjmp	.+20     	; 0x173ee <amigo_cmd_clear+0x1c>
   173da:	82 e2       	ldi	r24, 0x22	; 34
   173dc:	9e e2       	ldi	r25, 0x2E	; 46
   173de:	1f 92       	push	r1
   173e0:	9f 93       	push	r25
   173e2:	8f 93       	push	r24
   173e4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   173e8:	0f 90       	pop	r0
   173ea:	0f 90       	pop	r0
   173ec:	0f 90       	pop	r0
   173ee:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   173f2:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   173f6:	15 82       	std	Z+5, r1	; 0x05
   173f8:	14 82       	std	Z+4, r1	; 0x04
   173fa:	13 82       	std	Z+3, r1	; 0x03
   173fc:	16 82       	std	Z+6, r1	; 0x06
   173fe:	10 86       	std	Z+8, r1	; 0x08
   17400:	17 82       	std	Z+7, r1	; 0x07
   17402:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17406:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   1740a:	81 81       	ldd	r24, Z+1	; 0x01
   1740c:	90 e0       	ldi	r25, 0x00	; 0
   1740e:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
   17412:	80 e0       	ldi	r24, 0x00	; 0
   17414:	90 e0       	ldi	r25, 0x00	; 0
   17416:	08 95       	ret

00017418 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   17418:	0f 93       	push	r16
   1741a:	1f 93       	push	r17
   1741c:	cf 93       	push	r28
   1741e:	df 93       	push	r29
   17420:	c8 2f       	mov	r28, r24
   17422:	d6 2f       	mov	r29, r22
   17424:	14 2f       	mov	r17, r20
   17426:	05 2f       	mov	r16, r21
    if(AMIGO_is_MLA(listening))
   17428:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   1742c:	90 e0       	ldi	r25, 0x00	; 0
   1742e:	0e 94 20 8c 	call	0x11840	; 0x11840 <AMIGO_is_MLA>
   17432:	20 91 e6 1d 	lds	r18, 0x1DE6	; 0x801de6 <talking>
   17436:	89 2b       	or	r24, r25
   17438:	19 f1       	breq	.+70     	; 0x17480 <amigo_todo_op+0x68>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   1743a:	1f 92       	push	r1
   1743c:	2f 93       	push	r18
   1743e:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17442:	1f 92       	push	r1
   17444:	8f 93       	push	r24
   17446:	0f 93       	push	r16
   17448:	1f 93       	push	r17
   1744a:	1f 92       	push	r1
   1744c:	df 93       	push	r29
   1744e:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17452:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17456:	80 81       	ld	r24, Z
   17458:	1f 92       	push	r1
   1745a:	8f 93       	push	r24
   1745c:	1f 92       	push	r1
   1745e:	cf 93       	push	r28
   17460:	8b eb       	ldi	r24, 0xBB	; 187
   17462:	9d e2       	ldi	r25, 0x2D	; 45
   17464:	1f 92       	push	r1
   17466:	9f 93       	push	r25
   17468:	8f 93       	push	r24
   1746a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1746e:	8d b7       	in	r24, 0x3d	; 61
   17470:	9e b7       	in	r25, 0x3e	; 62
   17472:	0f 96       	adiw	r24, 0x0f	; 15
   17474:	0f b6       	in	r0, 0x3f	; 63
   17476:	f8 94       	cli
   17478:	9e bf       	out	0x3e, r25	; 62
   1747a:	0f be       	out	0x3f, r0	; 63
   1747c:	8d bf       	out	0x3d, r24	; 61
   1747e:	66 c0       	rjmp	.+204    	; 0x1754c <amigo_todo_op+0x134>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   17480:	82 2f       	mov	r24, r18
   17482:	90 e0       	ldi	r25, 0x00	; 0
   17484:	0e 94 2f 8c 	call	0x1185e	; 0x1185e <AMIGO_is_MTA>
   17488:	30 91 e8 1d 	lds	r19, 0x1DE8	; 0x801de8 <listening>
   1748c:	20 91 e6 1d 	lds	r18, 0x1DE6	; 0x801de6 <talking>
   17490:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17494:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17498:	89 2b       	or	r24, r25
   1749a:	e9 f0       	breq	.+58     	; 0x174d6 <amigo_todo_op+0xbe>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   1749c:	1f 92       	push	r1
   1749e:	2f 93       	push	r18
   174a0:	1f 92       	push	r1
   174a2:	3f 93       	push	r19
   174a4:	0f 93       	push	r16
   174a6:	1f 93       	push	r17
   174a8:	1f 92       	push	r1
   174aa:	df 93       	push	r29
   174ac:	80 81       	ld	r24, Z
   174ae:	1f 92       	push	r1
   174b0:	8f 93       	push	r24
   174b2:	1f 92       	push	r1
   174b4:	cf 93       	push	r28
   174b6:	84 e5       	ldi	r24, 0x54	; 84
   174b8:	9d e2       	ldi	r25, 0x2D	; 45
   174ba:	1f 92       	push	r1
   174bc:	9f 93       	push	r25
   174be:	8f 93       	push	r24
   174c0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   174c4:	8d b7       	in	r24, 0x3d	; 61
   174c6:	9e b7       	in	r25, 0x3e	; 62
   174c8:	0f 96       	adiw	r24, 0x0f	; 15
   174ca:	0f b6       	in	r0, 0x3f	; 63
   174cc:	f8 94       	cli
   174ce:	9e bf       	out	0x3e, r25	; 62
   174d0:	0f be       	out	0x3f, r0	; 63
   174d2:	8d bf       	out	0x3d, r24	; 61
   174d4:	3b c0       	rjmp	.+118    	; 0x1754c <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   174d6:	2f 35       	cpi	r18, 0x5F	; 95
   174d8:	e9 f4       	brne	.+58     	; 0x17514 <amigo_todo_op+0xfc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   174da:	1f 92       	push	r1
   174dc:	2f 93       	push	r18
   174de:	1f 92       	push	r1
   174e0:	3f 93       	push	r19
   174e2:	0f 93       	push	r16
   174e4:	1f 93       	push	r17
   174e6:	1f 92       	push	r1
   174e8:	df 93       	push	r29
   174ea:	80 81       	ld	r24, Z
   174ec:	1f 92       	push	r1
   174ee:	8f 93       	push	r24
   174f0:	1f 92       	push	r1
   174f2:	cf 93       	push	r28
   174f4:	8d ee       	ldi	r24, 0xED	; 237
   174f6:	9c e2       	ldi	r25, 0x2C	; 44
   174f8:	1f 92       	push	r1
   174fa:	9f 93       	push	r25
   174fc:	8f 93       	push	r24
   174fe:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17502:	8d b7       	in	r24, 0x3d	; 61
   17504:	9e b7       	in	r25, 0x3e	; 62
   17506:	0f 96       	adiw	r24, 0x0f	; 15
   17508:	0f b6       	in	r0, 0x3f	; 63
   1750a:	f8 94       	cli
   1750c:	9e bf       	out	0x3e, r25	; 62
   1750e:	0f be       	out	0x3f, r0	; 63
   17510:	8d bf       	out	0x3d, r24	; 61
   17512:	1c c0       	rjmp	.+56     	; 0x1754c <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17514:	1f 92       	push	r1
   17516:	2f 93       	push	r18
   17518:	1f 92       	push	r1
   1751a:	3f 93       	push	r19
   1751c:	0f 93       	push	r16
   1751e:	1f 93       	push	r17
   17520:	1f 92       	push	r1
   17522:	df 93       	push	r29
   17524:	80 81       	ld	r24, Z
   17526:	1f 92       	push	r1
   17528:	8f 93       	push	r24
   1752a:	1f 92       	push	r1
   1752c:	cf 93       	push	r28
   1752e:	88 e8       	ldi	r24, 0x88	; 136
   17530:	9c e2       	ldi	r25, 0x2C	; 44
   17532:	1f 92       	push	r1
   17534:	9f 93       	push	r25
   17536:	8f 93       	push	r24
   17538:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1753c:	8d b7       	in	r24, 0x3d	; 61
   1753e:	9e b7       	in	r25, 0x3e	; 62
   17540:	0f 96       	adiw	r24, 0x0f	; 15
   17542:	0f b6       	in	r0, 0x3f	; 63
   17544:	f8 94       	cli
   17546:	9e bf       	out	0x3e, r25	; 62
   17548:	0f be       	out	0x3f, r0	; 63
   1754a:	8d bf       	out	0x3d, r24	; 61
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1754c:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17550:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17554:	81 81       	ldd	r24, Z+1	; 0x01
   17556:	90 e0       	ldi	r25, 0x00	; 0
   17558:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
    return(0);
}
   1755c:	80 e0       	ldi	r24, 0x00	; 0
   1755e:	90 e0       	ldi	r25, 0x00	; 0
   17560:	df 91       	pop	r29
   17562:	cf 91       	pop	r28
   17564:	1f 91       	pop	r17
   17566:	0f 91       	pop	r16
   17568:	08 95       	ret

0001756a <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   1756a:	cf 93       	push	r28
   1756c:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   1756e:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17572:	90 e0       	ldi	r25, 0x00	; 0
   17574:	0e 94 20 8c 	call	0x11840	; 0x11840 <AMIGO_is_MLA>
   17578:	20 91 e6 1d 	lds	r18, 0x1DE6	; 0x801de6 <talking>
   1757c:	89 2b       	or	r24, r25
   1757e:	f9 f0       	breq	.+62     	; 0x175be <amigo_todo+0x54>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17580:	1f 92       	push	r1
   17582:	2f 93       	push	r18
   17584:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17588:	1f 92       	push	r1
   1758a:	8f 93       	push	r24
   1758c:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17590:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17594:	80 81       	ld	r24, Z
   17596:	1f 92       	push	r1
   17598:	8f 93       	push	r24
   1759a:	1f 92       	push	r1
   1759c:	cf 93       	push	r28
   1759e:	88 e3       	ldi	r24, 0x38	; 56
   175a0:	9c e2       	ldi	r25, 0x2C	; 44
   175a2:	1f 92       	push	r1
   175a4:	9f 93       	push	r25
   175a6:	8f 93       	push	r24
   175a8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   175ac:	8d b7       	in	r24, 0x3d	; 61
   175ae:	9e b7       	in	r25, 0x3e	; 62
   175b0:	0b 96       	adiw	r24, 0x0b	; 11
   175b2:	0f b6       	in	r0, 0x3f	; 63
   175b4:	f8 94       	cli
   175b6:	9e bf       	out	0x3e, r25	; 62
   175b8:	0f be       	out	0x3f, r0	; 63
   175ba:	8d bf       	out	0x3d, r24	; 61
   175bc:	5a c0       	rjmp	.+180    	; 0x17672 <amigo_todo+0x108>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   175be:	82 2f       	mov	r24, r18
   175c0:	90 e0       	ldi	r25, 0x00	; 0
   175c2:	0e 94 2f 8c 	call	0x1185e	; 0x1185e <AMIGO_is_MTA>
   175c6:	30 91 e8 1d 	lds	r19, 0x1DE8	; 0x801de8 <listening>
   175ca:	20 91 e6 1d 	lds	r18, 0x1DE6	; 0x801de6 <talking>
   175ce:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   175d2:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   175d6:	89 2b       	or	r24, r25
   175d8:	c9 f0       	breq	.+50     	; 0x1760c <amigo_todo+0xa2>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   175da:	1f 92       	push	r1
   175dc:	2f 93       	push	r18
   175de:	1f 92       	push	r1
   175e0:	3f 93       	push	r19
   175e2:	80 81       	ld	r24, Z
   175e4:	1f 92       	push	r1
   175e6:	8f 93       	push	r24
   175e8:	1f 92       	push	r1
   175ea:	cf 93       	push	r28
   175ec:	88 ee       	ldi	r24, 0xE8	; 232
   175ee:	9b e2       	ldi	r25, 0x2B	; 43
   175f0:	1f 92       	push	r1
   175f2:	9f 93       	push	r25
   175f4:	8f 93       	push	r24
   175f6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   175fa:	8d b7       	in	r24, 0x3d	; 61
   175fc:	9e b7       	in	r25, 0x3e	; 62
   175fe:	0b 96       	adiw	r24, 0x0b	; 11
   17600:	0f b6       	in	r0, 0x3f	; 63
   17602:	f8 94       	cli
   17604:	9e bf       	out	0x3e, r25	; 62
   17606:	0f be       	out	0x3f, r0	; 63
   17608:	8d bf       	out	0x3d, r24	; 61
   1760a:	33 c0       	rjmp	.+102    	; 0x17672 <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   1760c:	2f 35       	cpi	r18, 0x5F	; 95
   1760e:	c9 f4       	brne	.+50     	; 0x17642 <amigo_todo+0xd8>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17610:	1f 92       	push	r1
   17612:	2f 93       	push	r18
   17614:	1f 92       	push	r1
   17616:	3f 93       	push	r19
   17618:	80 81       	ld	r24, Z
   1761a:	1f 92       	push	r1
   1761c:	8f 93       	push	r24
   1761e:	1f 92       	push	r1
   17620:	cf 93       	push	r28
   17622:	88 e9       	ldi	r24, 0x98	; 152
   17624:	9b e2       	ldi	r25, 0x2B	; 43
   17626:	1f 92       	push	r1
   17628:	9f 93       	push	r25
   1762a:	8f 93       	push	r24
   1762c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17630:	8d b7       	in	r24, 0x3d	; 61
   17632:	9e b7       	in	r25, 0x3e	; 62
   17634:	0b 96       	adiw	r24, 0x0b	; 11
   17636:	0f b6       	in	r0, 0x3f	; 63
   17638:	f8 94       	cli
   1763a:	9e bf       	out	0x3e, r25	; 62
   1763c:	0f be       	out	0x3f, r0	; 63
   1763e:	8d bf       	out	0x3d, r24	; 61
   17640:	18 c0       	rjmp	.+48     	; 0x17672 <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17642:	1f 92       	push	r1
   17644:	2f 93       	push	r18
   17646:	1f 92       	push	r1
   17648:	3f 93       	push	r19
   1764a:	80 81       	ld	r24, Z
   1764c:	1f 92       	push	r1
   1764e:	8f 93       	push	r24
   17650:	1f 92       	push	r1
   17652:	cf 93       	push	r28
   17654:	87 e4       	ldi	r24, 0x47	; 71
   17656:	9b e2       	ldi	r25, 0x2B	; 43
   17658:	1f 92       	push	r1
   1765a:	9f 93       	push	r25
   1765c:	8f 93       	push	r24
   1765e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17662:	8d b7       	in	r24, 0x3d	; 61
   17664:	9e b7       	in	r25, 0x3e	; 62
   17666:	0b 96       	adiw	r24, 0x0b	; 11
   17668:	0f b6       	in	r0, 0x3f	; 63
   1766a:	f8 94       	cli
   1766c:	9e bf       	out	0x3e, r25	; 62
   1766e:	0f be       	out	0x3f, r0	; 63
   17670:	8d bf       	out	0x3d, r24	; 61
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17672:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17676:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   1767a:	81 81       	ldd	r24, Z+1	; 0x01
   1767c:	90 e0       	ldi	r25, 0x00	; 0
   1767e:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
    return(0);
}
   17682:	80 e0       	ldi	r24, 0x00	; 0
   17684:	90 e0       	ldi	r25, 0x00	; 0
   17686:	cf 91       	pop	r28
   17688:	08 95       	ret

0001768a <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   1768a:	8f 30       	cpi	r24, 0x0F	; 15
   1768c:	29 f0       	breq	.+10     	; 0x17698 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   1768e:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17692:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17696:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   17698:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   1769c:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   176a0:	81 81       	ldd	r24, Z+1	; 0x01
   176a2:	88 23       	and	r24, r24
   176a4:	29 f0       	breq	.+10     	; 0x176b0 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   176a6:	87 81       	ldd	r24, Z+7	; 0x07
   176a8:	90 85       	ldd	r25, Z+8	; 0x08
   176aa:	80 64       	ori	r24, 0x40	; 64
   176ac:	90 87       	std	Z+8, r25	; 0x08
   176ae:	87 83       	std	Z+7, r24	; 0x07
   176b0:	08 95       	ret

000176b2 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   176b2:	a3 e1       	ldi	r26, 0x13	; 19
   176b4:	b0 e0       	ldi	r27, 0x00	; 0
   176b6:	ef e5       	ldi	r30, 0x5F	; 95
   176b8:	fb eb       	ldi	r31, 0xBB	; 187
   176ba:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__prologue_saves__+0x18>
   176be:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & 32)
   176c0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   176c4:	85 ff       	sbrs	r24, 5
   176c6:	16 c0       	rjmp	.+44     	; 0x176f4 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   176c8:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   176cc:	1f 92       	push	r1
   176ce:	8f 93       	push	r24
   176d0:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   176d4:	1f 92       	push	r1
   176d6:	8f 93       	push	r24
   176d8:	ff 92       	push	r15
   176da:	ef 92       	push	r14
   176dc:	85 e1       	ldi	r24, 0x15	; 21
   176de:	9b e2       	ldi	r25, 0x2B	; 43
   176e0:	1f 92       	push	r1
   176e2:	9f 93       	push	r25
   176e4:	8f 93       	push	r24
   176e6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   176ea:	0f b6       	in	r0, 0x3f	; 63
   176ec:	f8 94       	cli
   176ee:	de bf       	out	0x3e, r29	; 62
   176f0:	0f be       	out	0x3f, r0	; 63
   176f2:	cd bf       	out	0x3d, r28	; 61
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   176f4:	9e e7       	ldi	r25, 0x7E	; 126
   176f6:	e9 16       	cp	r14, r25
   176f8:	f1 04       	cpc	r15, r1
   176fa:	f1 f5       	brne	.+124    	; 0x17778 <Amigo_Command+0xc6>
   176fc:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17700:	90 e0       	ldi	r25, 0x00	; 0
   17702:	0e 94 2f 8c 	call	0x1185e	; 0x1185e <AMIGO_is_MTA>
   17706:	89 2b       	or	r24, r25
   17708:	09 f4       	brne	.+2      	; 0x1770c <Amigo_Command+0x5a>
   1770a:	86 c0       	rjmp	.+268    	; 0x17818 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1770c:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17710:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17714:	81 81       	ldd	r24, Z+1	; 0x01
   17716:	90 e0       	ldi	r25, 0x00	; 0
   17718:	0e 94 17 86 	call	0x10c2e	; 0x10c2e <gpib_disable_PPR>
        status = EOI_FLAG;
   1771c:	80 e0       	ldi	r24, 0x00	; 0
   1771e:	91 e0       	ldi	r25, 0x01	; 1
   17720:	9b 8b       	std	Y+19, r25	; 0x13
   17722:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17724:	ae 01       	movw	r20, r28
   17726:	4e 5e       	subi	r20, 0xEE	; 238
   17728:	5f 4f       	sbci	r21, 0xFF	; 255
   1772a:	60 e0       	ldi	r22, 0x00	; 0
   1772c:	72 e0       	ldi	r23, 0x02	; 2
   1772e:	82 ee       	ldi	r24, 0xE2	; 226
   17730:	9b e1       	ldi	r25, 0x1B	; 27
   17732:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17736:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   1773a:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   1773e:	81 81       	ldd	r24, Z+1	; 0x01
   17740:	90 e0       	ldi	r25, 0x00	; 0
   17742:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17746:	8a 89       	ldd	r24, Y+18	; 0x12
   17748:	9b 89       	ldd	r25, Y+19	; 0x13
   1774a:	88 27       	eor	r24, r24
   1774c:	90 7d       	andi	r25, 0xD0	; 208
   1774e:	89 2b       	or	r24, r25
   17750:	09 f4       	brne	.+2      	; 0x17754 <Amigo_Command+0xa2>
   17752:	89 c2       	rjmp	.+1298   	; 0x17c66 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   17754:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17758:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   1775c:	81 e0       	ldi	r24, 0x01	; 1
   1775e:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17760:	87 81       	ldd	r24, Z+7	; 0x07
   17762:	90 85       	ldd	r25, Z+8	; 0x08
   17764:	80 62       	ori	r24, 0x20	; 32
   17766:	90 87       	std	Z+8, r25	; 0x08
   17768:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   1776a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1776e:	80 ff       	sbrs	r24, 0
   17770:	7a c2       	rjmp	.+1268   	; 0x17c66 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   17772:	83 ef       	ldi	r24, 0xF3	; 243
   17774:	9a e2       	ldi	r25, 0x2A	; 42
   17776:	8e c0       	rjmp	.+284    	; 0x17894 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   17778:	8f e7       	ldi	r24, 0x7F	; 127
   1777a:	e8 16       	cp	r14, r24
   1777c:	f1 04       	cpc	r15, r1
   1777e:	09 f0       	breq	.+2      	; 0x17782 <Amigo_Command+0xd0>
   17780:	4b c0       	rjmp	.+150    	; 0x17818 <Amigo_Command+0x166>
   17782:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17786:	90 e0       	ldi	r25, 0x00	; 0
   17788:	0e 94 20 8c 	call	0x11840	; 0x11840 <AMIGO_is_MLA>
   1778c:	89 2b       	or	r24, r25
   1778e:	09 f4       	brne	.+2      	; 0x17792 <Amigo_Command+0xe0>
   17790:	43 c0       	rjmp	.+134    	; 0x17818 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17792:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17796:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   1779a:	81 81       	ldd	r24, Z+1	; 0x01
   1779c:	90 e0       	ldi	r25, 0x00	; 0
   1779e:	0e 94 17 86 	call	0x10c2e	; 0x10c2e <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & 128)
   177a2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   177a6:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   177a8:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   177ac:	80 e0       	ldi	r24, 0x00	; 0
   177ae:	91 e0       	ldi	r25, 0x01	; 1
   177b0:	9b 8b       	std	Y+19, r25	; 0x13
   177b2:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   177b4:	ae 01       	movw	r20, r28
   177b6:	4e 5e       	subi	r20, 0xEE	; 238
   177b8:	5f 4f       	sbci	r21, 0xFF	; 255
   177ba:	60 e0       	ldi	r22, 0x00	; 0
   177bc:	72 e0       	ldi	r23, 0x02	; 2
   177be:	82 ee       	ldi	r24, 0xE2	; 226
   177c0:	9b e1       	ldi	r25, 0x1B	; 27
   177c2:	0e 94 88 8a 	call	0x11510	; 0x11510 <gpib_read_str>
#if SDEBUG
        if(debuglevel & 128)
   177c6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   177ca:	87 ff       	sbrs	r24, 7
   177cc:	04 c0       	rjmp	.+8      	; 0x177d6 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   177ce:	8b e2       	ldi	r24, 0x2B	; 43
   177d0:	95 e1       	ldi	r25, 0x15	; 21
   177d2:	0e 94 40 85 	call	0x10a80	; 0x10a80 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   177d6:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   177da:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   177de:	81 81       	ldd	r24, Z+1	; 0x01
   177e0:	90 e0       	ldi	r25, 0x00	; 0
   177e2:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
        if(status & ERROR_MASK)
   177e6:	8a 89       	ldd	r24, Y+18	; 0x12
   177e8:	9b 89       	ldd	r25, Y+19	; 0x13
   177ea:	88 27       	eor	r24, r24
   177ec:	90 7d       	andi	r25, 0xD0	; 208
   177ee:	89 2b       	or	r24, r25
   177f0:	09 f4       	brne	.+2      	; 0x177f4 <Amigo_Command+0x142>
   177f2:	39 c2       	rjmp	.+1138   	; 0x17c66 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   177f4:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   177f8:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   177fc:	81 e0       	ldi	r24, 0x01	; 1
   177fe:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17800:	87 81       	ldd	r24, Z+7	; 0x07
   17802:	90 85       	ldd	r25, Z+8	; 0x08
   17804:	80 62       	ori	r24, 0x20	; 32
   17806:	90 87       	std	Z+8, r25	; 0x08
   17808:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   1780a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1780e:	80 ff       	sbrs	r24, 0
   17810:	2a c2       	rjmp	.+1108   	; 0x17c66 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   17812:	82 ed       	ldi	r24, 0xD2	; 210
   17814:	9a e2       	ldi	r25, 0x2A	; 42
   17816:	3e c0       	rjmp	.+124    	; 0x17894 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   17818:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   1781c:	90 e0       	ldi	r25, 0x00	; 0
   1781e:	0e 94 20 8c 	call	0x11840	; 0x11840 <AMIGO_is_MLA>
   17822:	89 2b       	or	r24, r25
   17824:	19 f4       	brne	.+6      	; 0x1782c <Amigo_Command+0x17a>
        return(0);
   17826:	80 e0       	ldi	r24, 0x00	; 0
   17828:	90 e0       	ldi	r25, 0x00	; 0
   1782a:	25 c2       	rjmp	.+1098   	; 0x17c76 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   1782c:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17830:	90 e0       	ldi	r25, 0x00	; 0
   17832:	0e 94 2f 8c 	call	0x1185e	; 0x1185e <AMIGO_is_MTA>
   17836:	89 2b       	or	r24, r25
   17838:	b1 f7       	brne	.-20     	; 0x17826 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1783a:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   1783e:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17842:	81 81       	ldd	r24, Z+1	; 0x01
   17844:	90 e0       	ldi	r25, 0x00	; 0
   17846:	0e 94 17 86 	call	0x10c2e	; 0x10c2e <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   1784a:	80 e0       	ldi	r24, 0x00	; 0
   1784c:	91 e0       	ldi	r25, 0x01	; 1
   1784e:	9b 8b       	std	Y+19, r25	; 0x13
   17850:	8a 8b       	std	Y+18, r24	; 0x12
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17852:	ae 01       	movw	r20, r28
   17854:	4e 5e       	subi	r20, 0xEE	; 238
   17856:	5f 4f       	sbci	r21, 0xFF	; 255
   17858:	60 e0       	ldi	r22, 0x00	; 0
   1785a:	72 e0       	ldi	r23, 0x02	; 2
   1785c:	82 ee       	ldi	r24, 0xE2	; 226
   1785e:	9b e1       	ldi	r25, 0x1B	; 27
   17860:	0e 94 88 8a 	call	0x11510	; 0x11510 <gpib_read_str>
   17864:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   17866:	8a 89       	ldd	r24, Y+18	; 0x12
   17868:	9b 89       	ldd	r25, Y+19	; 0x13
   1786a:	88 27       	eor	r24, r24
   1786c:	90 7d       	andi	r25, 0xD0	; 208
   1786e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   17872:	89 2b       	or	r24, r25
   17874:	c1 f0       	breq	.+48     	; 0x178a6 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   17876:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   1787a:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   1787e:	81 e0       	ldi	r24, 0x01	; 1
   17880:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17882:	87 81       	ldd	r24, Z+7	; 0x07
   17884:	90 85       	ldd	r25, Z+8	; 0x08
   17886:	80 62       	ori	r24, 0x20	; 32
   17888:	90 87       	std	Z+8, r25	; 0x08
   1788a:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & 1)
   1788c:	20 ff       	sbrs	r18, 0
   1788e:	eb c1       	rjmp	.+982    	; 0x17c66 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   17890:	81 eb       	ldi	r24, 0xB1	; 177
   17892:	9a e2       	ldi	r25, 0x2A	; 42
   17894:	1f 92       	push	r1
   17896:	9f 93       	push	r25
   17898:	8f 93       	push	r24
   1789a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1789e:	0f 90       	pop	r0
   178a0:	0f 90       	pop	r0
   178a2:	0f 90       	pop	r0
   178a4:	e0 c1       	rjmp	.+960    	; 0x17c66 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 32)
   178a6:	25 ff       	sbrs	r18, 5
   178a8:	10 c0       	rjmp	.+32     	; 0x178ca <Amigo_Command+0x218>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   178aa:	1f 93       	push	r17
   178ac:	0f 93       	push	r16
   178ae:	ff 92       	push	r15
   178b0:	ef 92       	push	r14
   178b2:	82 e8       	ldi	r24, 0x82	; 130
   178b4:	9a e2       	ldi	r25, 0x2A	; 42
   178b6:	1f 92       	push	r1
   178b8:	9f 93       	push	r25
   178ba:	8f 93       	push	r24
   178bc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   178c0:	0f b6       	in	r0, 0x3f	; 63
   178c2:	f8 94       	cli
   178c4:	de bf       	out	0x3e, r29	; 62
   178c6:	0f be       	out	0x3f, r0	; 63
   178c8:	cd bf       	out	0x3d, r28	; 61
            secondary, len);
#endif
    if(!len)
   178ca:	01 15       	cp	r16, r1
   178cc:	11 05       	cpc	r17, r1
   178ce:	61 f4       	brne	.+24     	; 0x178e8 <Amigo_Command+0x236>
    {
        AMIGOs->dsj = 1;
   178d0:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   178d4:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   178d8:	81 e0       	ldi	r24, 0x01	; 1
   178da:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   178dc:	87 81       	ldd	r24, Z+7	; 0x07
   178de:	90 85       	ldd	r25, Z+8	; 0x08
   178e0:	80 62       	ori	r24, 0x20	; 32
   178e2:	90 87       	std	Z+8, r25	; 0x08
   178e4:	87 83       	std	Z+7, r24	; 0x07
   178e6:	bf c1       	rjmp	.+894    	; 0x17c66 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   178e8:	60 91 e2 1b 	lds	r22, 0x1BE2	; 0x801be2 <gpib_iobuff>

    if (secondary == 0x68)
   178ec:	98 e6       	ldi	r25, 0x68	; 104
   178ee:	e9 16       	cp	r14, r25
   178f0:	f1 04       	cpc	r15, r1
   178f2:	09 f0       	breq	.+2      	; 0x178f6 <Amigo_Command+0x244>
   178f4:	28 c1       	rjmp	.+592    	; 0x17b46 <Amigo_Command+0x494>
    {
        if(op == 0x00 && len == 2)
   178f6:	61 11       	cpse	r22, r1
   178f8:	2e c0       	rjmp	.+92     	; 0x17956 <Amigo_Command+0x2a4>
   178fa:	02 30       	cpi	r16, 0x02	; 2
   178fc:	11 05       	cpc	r17, r1
   178fe:	09 f0       	breq	.+2      	; 0x17902 <Amigo_Command+0x250>
   17900:	b7 c1       	rjmp	.+878    	; 0x17c70 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17902:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17906:	85 ff       	sbrs	r24, 5
   17908:	0a c0       	rjmp	.+20     	; 0x1791e <Amigo_Command+0x26c>
                printf("[AMIGO Cold Load Read Command]\n");
   1790a:	82 e6       	ldi	r24, 0x62	; 98
   1790c:	9a e2       	ldi	r25, 0x2A	; 42
   1790e:	1f 92       	push	r1
   17910:	9f 93       	push	r25
   17912:	8f 93       	push	r24
   17914:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17918:	0f 90       	pop	r0
   1791a:	0f 90       	pop	r0
   1791c:	0f 90       	pop	r0
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   1791e:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17922:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17926:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   17928:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   1792a:	10 86       	std	Z+8, r1	; 0x08
   1792c:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   1792e:	1c 82       	std	Y+4, r1	; 0x04
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   17930:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
   17934:	98 2f       	mov	r25, r24
   17936:	92 95       	swap	r25
   17938:	96 95       	lsr	r25
   1793a:	96 95       	lsr	r25
   1793c:	93 70       	andi	r25, 0x03	; 3
   1793e:	9d 83       	std	Y+5, r25	; 0x05
            tmp.sector = 0x3f & *ptr;
   17940:	8f 73       	andi	r24, 0x3F	; 63
   17942:	8e 83       	std	Y+6, r24	; 0x06
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   17944:	ce 01       	movw	r24, r28
   17946:	01 96       	adiw	r24, 0x01	; 1
   17948:	18 da       	rcall	.-3024   	; 0x16d7a <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   1794a:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   1794e:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17952:	85 e0       	ldi	r24, 0x05	; 5
   17954:	5c c1       	rjmp	.+696    	; 0x17c0e <Amigo_Command+0x55c>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   17956:	62 30       	cpi	r22, 0x02	; 2
   17958:	09 f0       	breq	.+2      	; 0x1795c <Amigo_Command+0x2aa>
   1795a:	3f c0       	rjmp	.+126    	; 0x179da <Amigo_Command+0x328>
   1795c:	05 30       	cpi	r16, 0x05	; 5
   1795e:	11 05       	cpc	r17, r1
   17960:	d1 f4       	brne	.+52     	; 0x17996 <Amigo_Command+0x2e4>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17962:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17966:	85 ff       	sbrs	r24, 5
   17968:	0a c0       	rjmp	.+20     	; 0x1797e <Amigo_Command+0x2cc>
                printf("[AMIGO Seek len=5]\n");
   1796a:	8e e4       	ldi	r24, 0x4E	; 78
   1796c:	9a e2       	ldi	r25, 0x2A	; 42
   1796e:	1f 92       	push	r1
   17970:	9f 93       	push	r25
   17972:	8f 93       	push	r24
   17974:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17978:	0f 90       	pop	r0
   1797a:	0f 90       	pop	r0
   1797c:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1797e:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
   17982:	83 de       	rcall	.-762    	; 0x1768a <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   17984:	80 91 e4 1b 	lds	r24, 0x1BE4	; 0x801be4 <gpib_iobuff+0x2>
   17988:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   1798a:	80 91 e5 1b 	lds	r24, 0x1BE5	; 0x801be5 <gpib_iobuff+0x3>
   1798e:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   17990:	80 91 e6 1b 	lds	r24, 0x1BE6	; 0x801be6 <gpib_iobuff+0x4>
   17994:	1d c0       	rjmp	.+58     	; 0x179d0 <Amigo_Command+0x31e>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   17996:	06 30       	cpi	r16, 0x06	; 6
   17998:	11 05       	cpc	r17, r1
   1799a:	09 f0       	breq	.+2      	; 0x1799e <Amigo_Command+0x2ec>
   1799c:	69 c1       	rjmp	.+722    	; 0x17c70 <Amigo_Command+0x5be>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   1799e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   179a2:	85 ff       	sbrs	r24, 5
   179a4:	0a c0       	rjmp	.+20     	; 0x179ba <Amigo_Command+0x308>
                printf("[AMIGO Seek len=6]\n");
   179a6:	8a e3       	ldi	r24, 0x3A	; 58
   179a8:	9a e2       	ldi	r25, 0x2A	; 42
   179aa:	1f 92       	push	r1
   179ac:	9f 93       	push	r25
   179ae:	8f 93       	push	r24
   179b0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   179b4:	0f 90       	pop	r0
   179b6:	0f 90       	pop	r0
   179b8:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   179ba:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
   179be:	65 de       	rcall	.-822    	; 0x1768a <amigo_check_unit>
            /// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   179c0:	80 91 e5 1b 	lds	r24, 0x1BE5	; 0x801be5 <gpib_iobuff+0x3>
   179c4:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   179c6:	80 91 e6 1b 	lds	r24, 0x1BE6	; 0x801be6 <gpib_iobuff+0x4>
   179ca:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   179cc:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_iobuff+0x5>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   179d0:	8e 83       	std	Y+6, r24	; 0x06
   179d2:	ce 01       	movw	r24, r28
   179d4:	01 96       	adiw	r24, 0x01	; 1
   179d6:	d1 d9       	rcall	.-3166   	; 0x16d7a <amigo_seek>
   179d8:	1b c1       	rjmp	.+566    	; 0x17c10 <Amigo_Command+0x55e>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   179da:	63 30       	cpi	r22, 0x03	; 3
   179dc:	e9 f4       	brne	.+58     	; 0x17a18 <Amigo_Command+0x366>
   179de:	02 30       	cpi	r16, 0x02	; 2
   179e0:	11 05       	cpc	r17, r1
   179e2:	09 f0       	breq	.+2      	; 0x179e6 <Amigo_Command+0x334>
   179e4:	45 c1       	rjmp	.+650    	; 0x17c70 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & 32)
   179e6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   179ea:	85 ff       	sbrs	r24, 5
   179ec:	0a c0       	rjmp	.+20     	; 0x17a02 <Amigo_Command+0x350>
                printf("[AMIGO Request Status Buffered Command]\n");
   179ee:	81 e1       	ldi	r24, 0x11	; 17
   179f0:	9a e2       	ldi	r25, 0x2A	; 42
   179f2:	1f 92       	push	r1
   179f4:	9f 93       	push	r25
   179f6:	8f 93       	push	r24
   179f8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   179fc:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   179fe:	0f 90       	pop	r0
   17a00:	0f 90       	pop	r0
   17a02:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            amigo_request_status();
   17a06:	41 de       	rcall	.-894    	; 0x1768a <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   17a08:	7b d8       	rcall	.-3850   	; 0x16b00 <amigo_request_status>
   17a0a:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17a0e:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17a12:	83 e0       	ldi	r24, 0x03	; 3
   17a14:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   17a16:	27 c1       	rjmp	.+590    	; 0x17c66 <Amigo_Command+0x5b4>
   17a18:	65 30       	cpi	r22, 0x05	; 5
   17a1a:	d9 f4       	brne	.+54     	; 0x17a52 <Amigo_Command+0x3a0>
   17a1c:	02 30       	cpi	r16, 0x02	; 2
   17a1e:	11 05       	cpc	r17, r1
   17a20:	09 f0       	breq	.+2      	; 0x17a24 <Amigo_Command+0x372>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & 32)
   17a22:	26 c1       	rjmp	.+588    	; 0x17c70 <Amigo_Command+0x5be>
   17a24:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17a28:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   17a2a:	0a c0       	rjmp	.+20     	; 0x17a40 <Amigo_Command+0x38e>
   17a2c:	80 ef       	ldi	r24, 0xF0	; 240
   17a2e:	99 e2       	ldi	r25, 0x29	; 41
   17a30:	1f 92       	push	r1
   17a32:	9f 93       	push	r25
   17a34:	8f 93       	push	r24
   17a36:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17a3a:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17a3c:	0f 90       	pop	r0
   17a3e:	0f 90       	pop	r0
   17a40:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   17a44:	22 de       	rcall	.-956    	; 0x1768a <amigo_check_unit>
   17a46:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17a4a:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17a4e:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   17a50:	de c0       	rjmp	.+444    	; 0x17c0e <Amigo_Command+0x55c>
   17a52:	67 30       	cpi	r22, 0x07	; 7
   17a54:	f9 f4       	brne	.+62     	; 0x17a94 <Amigo_Command+0x3e2>
   17a56:	04 30       	cpi	r16, 0x04	; 4
   17a58:	11 05       	cpc	r17, r1
   17a5a:	09 f0       	breq	.+2      	; 0x17a5e <Amigo_Command+0x3ac>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & 32)
   17a5c:	09 c1       	rjmp	.+530    	; 0x17c70 <Amigo_Command+0x5be>
   17a5e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17a62:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   17a64:	0a c0       	rjmp	.+20     	; 0x17a7a <Amigo_Command+0x3c8>
   17a66:	80 ee       	ldi	r24, 0xE0	; 224
   17a68:	99 e2       	ldi	r25, 0x29	; 41
   17a6a:	1f 92       	push	r1
   17a6c:	9f 93       	push	r25
   17a6e:	8f 93       	push	r24
   17a70:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17a74:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17a76:	0f 90       	pop	r0
   17a78:	0f 90       	pop	r0
   17a7a:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   17a7e:	05 de       	rcall	.-1014   	; 0x1768a <amigo_check_unit>
   17a80:	80 91 e4 1b 	lds	r24, 0x1BE4	; 0x801be4 <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   17a84:	90 e0       	ldi	r25, 0x00	; 0
   17a86:	98 2f       	mov	r25, r24
   17a88:	88 27       	eor	r24, r24
   17a8a:	20 91 e5 1b 	lds	r18, 0x1BE5	; 0x801be5 <gpib_iobuff+0x3>
   17a8e:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   17a90:	9f d9       	rcall	.-3266   	; 0x16dd0 <amigo_verify>
   17a92:	f1 c0       	rjmp	.+482    	; 0x17c76 <Amigo_Command+0x5c4>
   17a94:	68 30       	cpi	r22, 0x08	; 8
   17a96:	d9 f4       	brne	.+54     	; 0x17ace <Amigo_Command+0x41c>
   17a98:	02 30       	cpi	r16, 0x02	; 2
   17a9a:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17a9c:	09 f0       	breq	.+2      	; 0x17aa0 <Amigo_Command+0x3ee>
   17a9e:	e8 c0       	rjmp	.+464    	; 0x17c70 <Amigo_Command+0x5be>
   17aa0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   17aa4:	85 ff       	sbrs	r24, 5
   17aa6:	0a c0       	rjmp	.+20     	; 0x17abc <Amigo_Command+0x40a>
   17aa8:	8e eb       	ldi	r24, 0xBE	; 190
   17aaa:	99 e2       	ldi	r25, 0x29	; 41
   17aac:	1f 92       	push	r1
   17aae:	9f 93       	push	r25
   17ab0:	8f 93       	push	r24
   17ab2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17ab6:	0f 90       	pop	r0
   17ab8:	0f 90       	pop	r0
   17aba:	0f 90       	pop	r0
   17abc:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   17ac0:	e4 dd       	rcall	.-1080   	; 0x1768a <amigo_check_unit>
   17ac2:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17ac6:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   17aca:	88 e0       	ldi	r24, 0x08	; 8
   17acc:	a0 c0       	rjmp	.+320    	; 0x17c0e <Amigo_Command+0x55c>
   17ace:	86 2f       	mov	r24, r22
   17ad0:	8f 7d       	andi	r24, 0xDF	; 223
   17ad2:	8b 30       	cpi	r24, 0x0B	; 11
   17ad4:	d9 f4       	brne	.+54     	; 0x17b0c <Amigo_Command+0x45a>
   17ad6:	02 30       	cpi	r16, 0x02	; 2
   17ad8:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17ada:	09 f0       	breq	.+2      	; 0x17ade <Amigo_Command+0x42c>
   17adc:	c9 c0       	rjmp	.+402    	; 0x17c70 <Amigo_Command+0x5be>
   17ade:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   17ae2:	85 ff       	sbrs	r24, 5
   17ae4:	0a c0       	rjmp	.+20     	; 0x17afa <Amigo_Command+0x448>
   17ae6:	82 ea       	ldi	r24, 0xA2	; 162
   17ae8:	99 e2       	ldi	r25, 0x29	; 41
   17aea:	1f 92       	push	r1
   17aec:	9f 93       	push	r25
   17aee:	8f 93       	push	r24
   17af0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17af4:	0f 90       	pop	r0
   17af6:	0f 90       	pop	r0
   17af8:	0f 90       	pop	r0
   17afa:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   17afe:	c5 dd       	rcall	.-1142   	; 0x1768a <amigo_check_unit>
   17b00:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17b04:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   17b08:	8a e0       	ldi	r24, 0x0A	; 10
   17b0a:	81 c0       	rjmp	.+258    	; 0x17c0e <Amigo_Command+0x55c>
   17b0c:	64 31       	cpi	r22, 0x14	; 20
   17b0e:	09 f0       	breq	.+2      	; 0x17b12 <Amigo_Command+0x460>
   17b10:	af c0       	rjmp	.+350    	; 0x17c70 <Amigo_Command+0x5be>
   17b12:	02 30       	cpi	r16, 0x02	; 2
   17b14:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17b16:	09 f0       	breq	.+2      	; 0x17b1a <Amigo_Command+0x468>
   17b18:	ab c0       	rjmp	.+342    	; 0x17c70 <Amigo_Command+0x5be>
   17b1a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   17b1e:	85 ff       	sbrs	r24, 5
   17b20:	0a c0       	rjmp	.+20     	; 0x17b36 <Amigo_Command+0x484>
   17b22:	89 e7       	ldi	r24, 0x79	; 121
   17b24:	99 e2       	ldi	r25, 0x29	; 41
   17b26:	1f 92       	push	r1
   17b28:	9f 93       	push	r25
   17b2a:	8f 93       	push	r24
   17b2c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17b30:	0f 90       	pop	r0
#endif
            amigo_request_logical_address();
   17b32:	0f 90       	pop	r0
   17b34:	0f 90       	pop	r0
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   17b36:	0e 94 72 b5 	call	0x16ae4	; 0x16ae4 <amigo_request_logical_address>
   17b3a:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17b3e:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   17b42:	84 e0       	ldi	r24, 0x04	; 4
   17b44:	64 c0       	rjmp	.+200    	; 0x17c0e <Amigo_Command+0x55c>
   17b46:	89 e6       	ldi	r24, 0x69	; 105
   17b48:	e8 16       	cp	r14, r24
    {
        if(op == 0x08 && len == 2)
   17b4a:	f1 04       	cpc	r15, r1
   17b4c:	f1 f4       	brne	.+60     	; 0x17b8a <Amigo_Command+0x4d8>
   17b4e:	68 30       	cpi	r22, 0x08	; 8
   17b50:	09 f0       	breq	.+2      	; 0x17b54 <Amigo_Command+0x4a2>
   17b52:	8e c0       	rjmp	.+284    	; 0x17c70 <Amigo_Command+0x5be>
   17b54:	02 30       	cpi	r16, 0x02	; 2
   17b56:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17b58:	09 f0       	breq	.+2      	; 0x17b5c <Amigo_Command+0x4aa>
   17b5a:	8a c0       	rjmp	.+276    	; 0x17c70 <Amigo_Command+0x5be>
   17b5c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   17b60:	85 ff       	sbrs	r24, 5
   17b62:	0a c0       	rjmp	.+20     	; 0x17b78 <Amigo_Command+0x4c6>
   17b64:	89 e5       	ldi	r24, 0x59	; 89
   17b66:	99 e2       	ldi	r25, 0x29	; 41
   17b68:	1f 92       	push	r1
   17b6a:	9f 93       	push	r25
   17b6c:	8f 93       	push	r24
   17b6e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17b72:	0f 90       	pop	r0
   17b74:	0f 90       	pop	r0
   17b76:	0f 90       	pop	r0
   17b78:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17b7c:	86 dd       	rcall	.-1268   	; 0x1768a <amigo_check_unit>
   17b7e:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17b82:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17b86:	89 e0       	ldi	r24, 0x09	; 9
   17b88:	42 c0       	rjmp	.+132    	; 0x17c0e <Amigo_Command+0x55c>
   17b8a:	9a e6       	ldi	r25, 0x6A	; 106
   17b8c:	e9 16       	cp	r14, r25
   17b8e:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   17b90:	09 f0       	breq	.+2      	; 0x17b94 <Amigo_Command+0x4e2>
   17b92:	47 c0       	rjmp	.+142    	; 0x17c22 <Amigo_Command+0x570>
   17b94:	68 30       	cpi	r22, 0x08	; 8
   17b96:	f1 f4       	brne	.+60     	; 0x17bd4 <Amigo_Command+0x522>
   17b98:	02 30       	cpi	r16, 0x02	; 2
   17b9a:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17b9c:	09 f0       	breq	.+2      	; 0x17ba0 <Amigo_Command+0x4ee>
   17b9e:	68 c0       	rjmp	.+208    	; 0x17c70 <Amigo_Command+0x5be>
   17ba0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17ba4:	85 ff       	sbrs	r24, 5
   17ba6:	0a c0       	rjmp	.+20     	; 0x17bbc <Amigo_Command+0x50a>
   17ba8:	8e e2       	ldi	r24, 0x2E	; 46
   17baa:	99 e2       	ldi	r25, 0x29	; 41
   17bac:	1f 92       	push	r1
   17bae:	9f 93       	push	r25
   17bb0:	8f 93       	push	r24
   17bb2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17bb6:	0f 90       	pop	r0
   17bb8:	0f 90       	pop	r0
   17bba:	0f 90       	pop	r0
   17bbc:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   17bc0:	64 dd       	rcall	.-1336   	; 0x1768a <amigo_check_unit>
   17bc2:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17bc6:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
            amigo_request_status();
   17bca:	82 e0       	ldi	r24, 0x02	; 2
   17bcc:	80 83       	st	Z, r24
   17bce:	0e 94 80 b5 	call	0x16b00	; 0x16b00 <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17bd2:	49 c0       	rjmp	.+146    	; 0x17c66 <Amigo_Command+0x5b4>
   17bd4:	65 30       	cpi	r22, 0x05	; 5
   17bd6:	09 f0       	breq	.+2      	; 0x17bda <Amigo_Command+0x528>
   17bd8:	4b c0       	rjmp	.+150    	; 0x17c70 <Amigo_Command+0x5be>
   17bda:	02 30       	cpi	r16, 0x02	; 2
   17bdc:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17bde:	09 f0       	breq	.+2      	; 0x17be2 <Amigo_Command+0x530>
   17be0:	47 c0       	rjmp	.+142    	; 0x17c70 <Amigo_Command+0x5be>
   17be2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   17be6:	85 ff       	sbrs	r24, 5
   17be8:	0a c0       	rjmp	.+20     	; 0x17bfe <Amigo_Command+0x54c>
   17bea:	8f e0       	ldi	r24, 0x0F	; 15
   17bec:	99 e2       	ldi	r25, 0x29	; 41
   17bee:	1f 92       	push	r1
   17bf0:	9f 93       	push	r25
   17bf2:	8f 93       	push	r24
   17bf4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17bf8:	0f 90       	pop	r0
   17bfa:	0f 90       	pop	r0
   17bfc:	0f 90       	pop	r0
   17bfe:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   17c02:	43 dd       	rcall	.-1402   	; 0x1768a <amigo_check_unit>
   17c04:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17c08:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17c0c:	87 e0       	ldi	r24, 0x07	; 7
   17c0e:	80 83       	st	Z, r24
   17c10:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17c14:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17c18:	81 81       	ldd	r24, Z+1	; 0x01
   17c1a:	90 e0       	ldi	r25, 0x00	; 0
   17c1c:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   17c20:	22 c0       	rjmp	.+68     	; 0x17c66 <Amigo_Command+0x5b4>
   17c22:	8c e6       	ldi	r24, 0x6C	; 108
   17c24:	e8 16       	cp	r14, r24
    {
        if(op == 0x18 && len == 5)
   17c26:	f1 04       	cpc	r15, r1
   17c28:	d1 f4       	brne	.+52     	; 0x17c5e <Amigo_Command+0x5ac>
   17c2a:	68 31       	cpi	r22, 0x18	; 24
   17c2c:	09 f5       	brne	.+66     	; 0x17c70 <Amigo_Command+0x5be>
   17c2e:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & 32)
   17c30:	11 05       	cpc	r17, r1
   17c32:	f1 f4       	brne	.+60     	; 0x17c70 <Amigo_Command+0x5be>
   17c34:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Format]\n");
   17c38:	85 ff       	sbrs	r24, 5
   17c3a:	0a c0       	rjmp	.+20     	; 0x17c50 <Amigo_Command+0x59e>
   17c3c:	8f ef       	ldi	r24, 0xFF	; 255
   17c3e:	98 e2       	ldi	r25, 0x28	; 40
   17c40:	1f 92       	push	r1
   17c42:	9f 93       	push	r25
   17c44:	8f 93       	push	r24
   17c46:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17c4a:	0f 90       	pop	r0
   17c4c:	0f 90       	pop	r0
   17c4e:	0f 90       	pop	r0
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   17c50:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_iobuff+0x1>
   17c54:	1a dd       	rcall	.-1484   	; 0x1768a <amigo_check_unit>
   17c56:	80 91 e6 1b 	lds	r24, 0x1BE6	; 0x801be6 <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17c5a:	4b d9       	rcall	.-3434   	; 0x16ef2 <amigo_format>
   17c5c:	04 c0       	rjmp	.+8      	; 0x17c66 <Amigo_Command+0x5b4>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   17c5e:	90 e7       	ldi	r25, 0x70	; 112
   17c60:	e9 16       	cp	r14, r25
   17c62:	f1 04       	cpc	r15, r1
   17c64:	29 f4       	brne	.+10     	; 0x17c70 <Amigo_Command+0x5be>
   17c66:	8a 89       	ldd	r24, Y+18	; 0x12
    }
    return ( amigo_todo_op(secondary, op, len) );
   17c68:	9b 89       	ldd	r25, Y+19	; 0x13
   17c6a:	88 27       	eor	r24, r24
   17c6c:	90 7d       	andi	r25, 0xD0	; 208
   17c6e:	03 c0       	rjmp	.+6      	; 0x17c76 <Amigo_Command+0x5c4>
}
   17c70:	a8 01       	movw	r20, r16
   17c72:	8e 2d       	mov	r24, r14
   17c74:	d1 db       	rcall	.-2142   	; 0x17418 <amigo_todo_op>
   17c76:	63 96       	adiw	r28, 0x13	; 19
   17c78:	e6 e0       	ldi	r30, 0x06	; 6
   17c7a:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

00017c7e <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   17c7e:	cf 93       	push	r28
   17c80:	df 93       	push	r29
   17c82:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & 32)
   17c84:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17c88:	85 ff       	sbrs	r24, 5
   17c8a:	19 c0       	rjmp	.+50     	; 0x17cbe <Amigo_Execute+0x40>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17c8c:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17c90:	1f 92       	push	r1
   17c92:	8f 93       	push	r24
   17c94:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17c98:	1f 92       	push	r1
   17c9a:	8f 93       	push	r24
   17c9c:	df 93       	push	r29
   17c9e:	cf 93       	push	r28
   17ca0:	8d ec       	ldi	r24, 0xCD	; 205
   17ca2:	98 e2       	ldi	r25, 0x28	; 40
   17ca4:	1f 92       	push	r1
   17ca6:	9f 93       	push	r25
   17ca8:	8f 93       	push	r24
   17caa:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17cae:	8d b7       	in	r24, 0x3d	; 61
   17cb0:	9e b7       	in	r25, 0x3e	; 62
   17cb2:	09 96       	adiw	r24, 0x09	; 9
   17cb4:	0f b6       	in	r0, 0x3f	; 63
   17cb6:	f8 94       	cli
   17cb8:	9e bf       	out	0x3e, r25	; 62
   17cba:	0f be       	out	0x3f, r0	; 63
   17cbc:	8d bf       	out	0x3d, r24	; 61
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17cbe:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17cc2:	8f 35       	cpi	r24, 0x5F	; 95
   17cc4:	09 f4       	brne	.+2      	; 0x17cc8 <Amigo_Execute+0x4a>
   17cc6:	ad c0       	rjmp	.+346    	; 0x17e22 <Amigo_Execute+0x1a4>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17cc8:	90 e0       	ldi	r25, 0x00	; 0
   17cca:	0e 94 2f 8c 	call	0x1185e	; 0x1185e <AMIGO_is_MTA>
   17cce:	89 2b       	or	r24, r25
   17cd0:	39 f0       	breq	.+14     	; 0x17ce0 <Amigo_Execute+0x62>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17cd2:	ce 01       	movw	r24, r28
   17cd4:	87 7f       	andi	r24, 0xF7	; 247
   17cd6:	80 36       	cpi	r24, 0x60	; 96
   17cd8:	91 05       	cpc	r25, r1
   17cda:	09 f0       	breq	.+2      	; 0x17cde <Amigo_Execute+0x60>
   17cdc:	a2 c0       	rjmp	.+324    	; 0x17e22 <Amigo_Execute+0x1a4>
   17cde:	08 c0       	rjmp	.+16     	; 0x17cf0 <Amigo_Execute+0x72>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17ce0:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17ce4:	90 e0       	ldi	r25, 0x00	; 0
   17ce6:	0e 94 20 8c 	call	0x11840	; 0x11840 <AMIGO_is_MLA>
   17cea:	89 2b       	or	r24, r25
   17cec:	91 f7       	brne	.-28     	; 0x17cd2 <Amigo_Execute+0x54>
   17cee:	99 c0       	rjmp	.+306    	; 0x17e22 <Amigo_Execute+0x1a4>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17cf0:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17cf4:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17cf8:	81 81       	ldd	r24, Z+1	; 0x01
   17cfa:	90 e0       	ldi	r25, 0x00	; 0
   17cfc:	0e 94 17 86 	call	0x10c2e	; 0x10c2e <gpib_disable_PPR>

    if(secondary == 0x60)
   17d00:	c0 36       	cpi	r28, 0x60	; 96
   17d02:	d1 05       	cpc	r29, r1
   17d04:	09 f0       	breq	.+2      	; 0x17d08 <Amigo_Execute+0x8a>
   17d06:	4e c0       	rjmp	.+156    	; 0x17da4 <Amigo_Execute+0x126>
    {
        switch(AMIGOs->state)
   17d08:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17d0c:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17d10:	e0 81       	ld	r30, Z
   17d12:	8e 2f       	mov	r24, r30
   17d14:	90 e0       	ldi	r25, 0x00	; 0
   17d16:	8b 30       	cpi	r24, 0x0B	; 11
   17d18:	91 05       	cpc	r25, r1
   17d1a:	08 f0       	brcs	.+2      	; 0x17d1e <Amigo_Execute+0xa0>
   17d1c:	41 c0       	rjmp	.+130    	; 0x17da0 <Amigo_Execute+0x122>
   17d1e:	fc 01       	movw	r30, r24
   17d20:	e0 52       	subi	r30, 0x20	; 32
   17d22:	ff 4f       	sbci	r31, 0xFF	; 255
   17d24:	0c 94 f1 e4 	jmp	0x1c9e2	; 0x1c9e2 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & 32)
   17d28:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17d2c:	85 ff       	sbrs	r24, 5
   17d2e:	18 c0       	rjmp	.+48     	; 0x17d60 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17d30:	8d ea       	ldi	r24, 0xAD	; 173
   17d32:	98 e2       	ldi	r25, 0x28	; 40
   17d34:	0d c0       	rjmp	.+26     	; 0x17d50 <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17d36:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17d3a:	85 ff       	sbrs	r24, 5
   17d3c:	11 c0       	rjmp	.+34     	; 0x17d60 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17d3e:	8c e8       	ldi	r24, 0x8C	; 140
   17d40:	98 e2       	ldi	r25, 0x28	; 40
   17d42:	06 c0       	rjmp	.+12     	; 0x17d50 <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17d44:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17d48:	85 ff       	sbrs	r24, 5
   17d4a:	0a c0       	rjmp	.+20     	; 0x17d60 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Buffered]\n");
   17d4c:	8d e6       	ldi	r24, 0x6D	; 109
   17d4e:	98 e2       	ldi	r25, 0x28	; 40
   17d50:	1f 92       	push	r1
   17d52:	9f 93       	push	r25
   17d54:	8f 93       	push	r24
   17d56:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17d5a:	0f 90       	pop	r0
   17d5c:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_read() );
   17d5e:	0f 90       	pop	r0
   17d60:	5a d9       	rcall	.-3404   	; 0x17016 <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17d62:	61 c0       	rjmp	.+194    	; 0x17e26 <Amigo_Execute+0x1a8>
   17d64:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17d68:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17d6a:	18 c0       	rjmp	.+48     	; 0x17d9c <Amigo_Execute+0x11e>
   17d6c:	8b e4       	ldi	r24, 0x4B	; 75
   17d6e:	98 e2       	ldi	r25, 0x28	; 40
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & 32)
   17d70:	0d c0       	rjmp	.+26     	; 0x17d8c <Amigo_Execute+0x10e>
   17d72:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17d76:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   17d78:	11 c0       	rjmp	.+34     	; 0x17d9c <Amigo_Execute+0x11e>
   17d7a:	8f e2       	ldi	r24, 0x2F	; 47
   17d7c:	98 e2       	ldi	r25, 0x28	; 40
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17d7e:	06 c0       	rjmp	.+12     	; 0x17d8c <Amigo_Execute+0x10e>
   17d80:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17d84:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   17d86:	0a c0       	rjmp	.+20     	; 0x17d9c <Amigo_Execute+0x11e>
   17d88:	8f e0       	ldi	r24, 0x0F	; 15
   17d8a:	98 e2       	ldi	r25, 0x28	; 40
   17d8c:	1f 92       	push	r1
   17d8e:	9f 93       	push	r25
   17d90:	8f 93       	push	r24
   17d92:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17d96:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_write() );
   17d98:	0f 90       	pop	r0
   17d9a:	0f 90       	pop	r0
   17d9c:	00 da       	rcall	.-3072   	; 0x1719e <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   17d9e:	43 c0       	rjmp	.+134    	; 0x17e26 <Amigo_Execute+0x1a8>
   17da0:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17da2:	3d c0       	rjmp	.+122    	; 0x17e1e <Amigo_Execute+0x1a0>
   17da4:	c8 36       	cpi	r28, 0x68	; 104
   17da6:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   17da8:	e1 f5       	brne	.+120    	; 0x17e22 <Amigo_Execute+0x1a4>
   17daa:	e0 91 61 18 	lds	r30, 0x1861	; 0x801861 <AMIGOs>
   17dae:	f0 91 62 18 	lds	r31, 0x1862	; 0x801862 <AMIGOs+0x1>
   17db2:	80 81       	ld	r24, Z
   17db4:	82 30       	cpi	r24, 0x02	; 2
   17db6:	81 f0       	breq	.+32     	; 0x17dd8 <Amigo_Execute+0x15a>
   17db8:	18 f4       	brcc	.+6      	; 0x17dc0 <Amigo_Execute+0x142>
   17dba:	88 23       	and	r24, r24
   17dbc:	91 f1       	breq	.+100    	; 0x17e22 <Amigo_Execute+0x1a4>
   17dbe:	2e c0       	rjmp	.+92     	; 0x17e1c <Amigo_Execute+0x19e>
   17dc0:	83 30       	cpi	r24, 0x03	; 3
   17dc2:	19 f0       	breq	.+6      	; 0x17dca <Amigo_Execute+0x14c>
   17dc4:	84 30       	cpi	r24, 0x04	; 4
   17dc6:	c9 f0       	breq	.+50     	; 0x17dfa <Amigo_Execute+0x17c>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17dc8:	29 c0       	rjmp	.+82     	; 0x17e1c <Amigo_Execute+0x19e>
   17dca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17dce:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17dd0:	11 c0       	rjmp	.+34     	; 0x17df4 <Amigo_Execute+0x176>
   17dd2:	86 ee       	ldi	r24, 0xE6	; 230
   17dd4:	97 e2       	ldi	r25, 0x27	; 39
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17dd6:	06 c0       	rjmp	.+12     	; 0x17de4 <Amigo_Execute+0x166>
   17dd8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17ddc:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17dde:	0a c0       	rjmp	.+20     	; 0x17df4 <Amigo_Execute+0x176>
   17de0:	8b eb       	ldi	r24, 0xBB	; 187
   17de2:	97 e2       	ldi	r25, 0x27	; 39
   17de4:	1f 92       	push	r1
   17de6:	9f 93       	push	r25
   17de8:	8f 93       	push	r24
   17dea:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17dee:	0f 90       	pop	r0
   17df0:	0f 90       	pop	r0
#endif
                return ( amigo_send_status() );
   17df2:	0f 90       	pop	r0
   17df4:	0e 94 36 b6 	call	0x16c6c	; 0x16c6c <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & 32)
   17df8:	16 c0       	rjmp	.+44     	; 0x17e26 <Amigo_Execute+0x1a8>
   17dfa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17dfe:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   17e00:	0a c0       	rjmp	.+20     	; 0x17e16 <Amigo_Execute+0x198>
   17e02:	82 e9       	ldi	r24, 0x92	; 146
   17e04:	97 e2       	ldi	r25, 0x27	; 39
   17e06:	1f 92       	push	r1
   17e08:	9f 93       	push	r25
   17e0a:	8f 93       	push	r24
   17e0c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17e10:	0f 90       	pop	r0
   17e12:	0f 90       	pop	r0
#endif
                return ( amigo_send_logical_address() );
   17e14:	0f 90       	pop	r0
   17e16:	0e 94 d8 b5 	call	0x16bb0	; 0x16bb0 <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   17e1a:	05 c0       	rjmp	.+10     	; 0x17e26 <Amigo_Execute+0x1a8>
   17e1c:	88 e6       	ldi	r24, 0x68	; 104
   17e1e:	a5 db       	rcall	.-2230   	; 0x1756a <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17e20:	02 c0       	rjmp	.+4      	; 0x17e26 <Amigo_Execute+0x1a8>
   17e22:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17e24:	90 e0       	ldi	r25, 0x00	; 0
   17e26:	df 91       	pop	r29
   17e28:	cf 91       	pop	r28
   17e2a:	08 95       	ret

00017e2c <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17e2c:	cf 93       	push	r28
   17e2e:	df 93       	push	r29
   17e30:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17e32:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17e36:	90 e0       	ldi	r25, 0x00	; 0
   17e38:	0e 94 2f 8c 	call	0x1185e	; 0x1185e <AMIGO_is_MTA>
   17e3c:	89 2b       	or	r24, r25
   17e3e:	51 f0       	breq	.+20     	; 0x17e54 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17e40:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17e44:	8f 35       	cpi	r24, 0x5F	; 95
   17e46:	71 f4       	brne	.+28     	; 0x17e64 <AMIGO_COMMANDS+0x38>
   17e48:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17e4c:	90 e0       	ldi	r25, 0x00	; 0
   17e4e:	0e 94 20 8c 	call	0x11840	; 0x11840 <AMIGO_is_MLA>
   17e52:	08 c0       	rjmp	.+16     	; 0x17e64 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17e54:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17e58:	90 e0       	ldi	r25, 0x00	; 0
   17e5a:	0e 94 20 8c 	call	0x11840	; 0x11840 <AMIGO_is_MLA>
   17e5e:	89 2b       	or	r24, r25
   17e60:	79 f7       	brne	.-34     	; 0x17e40 <AMIGO_COMMANDS+0x14>
   17e62:	76 c0       	rjmp	.+236    	; 0x17f50 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17e64:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17e68:	81 11       	cpse	r24, r1
   17e6a:	05 c0       	rjmp	.+10     	; 0x17e76 <AMIGO_COMMANDS+0x4a>
   17e6c:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17e70:	90 e0       	ldi	r25, 0x00	; 0
   17e72:	0e 94 2f 8c 	call	0x1185e	; 0x1185e <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17e76:	c0 36       	cpi	r28, 0x60	; 96
   17e78:	99 f4       	brne	.+38     	; 0x17ea0 <AMIGO_COMMANDS+0x74>
   17e7a:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17e7e:	90 e0       	ldi	r25, 0x00	; 0
   17e80:	0e 94 2f 8c 	call	0x1185e	; 0x1185e <AMIGO_is_MTA>
   17e84:	89 2b       	or	r24, r25
   17e86:	19 f0       	breq	.+6      	; 0x17e8e <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17e88:	80 e6       	ldi	r24, 0x60	; 96
   17e8a:	90 e0       	ldi	r25, 0x00	; 0
   17e8c:	14 c0       	rjmp	.+40     	; 0x17eb6 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17e8e:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17e92:	90 e0       	ldi	r25, 0x00	; 0
   17e94:	0e 94 20 8c 	call	0x11840	; 0x11840 <AMIGO_is_MLA>
   17e98:	89 2b       	or	r24, r25
   17e9a:	09 f4       	brne	.+2      	; 0x17e9e <AMIGO_COMMANDS+0x72>
   17e9c:	59 c0       	rjmp	.+178    	; 0x17f50 <AMIGO_COMMANDS+0x124>
   17e9e:	f4 cf       	rjmp	.-24     	; 0x17e88 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17ea0:	c8 36       	cpi	r28, 0x68	; 104
   17ea2:	c1 f4       	brne	.+48     	; 0x17ed4 <AMIGO_COMMANDS+0xa8>
   17ea4:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17ea8:	90 e0       	ldi	r25, 0x00	; 0
   17eaa:	0e 94 2f 8c 	call	0x1185e	; 0x1185e <AMIGO_is_MTA>
   17eae:	89 2b       	or	r24, r25
   17eb0:	21 f0       	breq	.+8      	; 0x17eba <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17eb2:	88 e6       	ldi	r24, 0x68	; 104
   17eb4:	90 e0       	ldi	r25, 0x00	; 0
   17eb6:	e3 de       	rcall	.-570    	; 0x17c7e <Amigo_Execute>
   17eb8:	0b c0       	rjmp	.+22     	; 0x17ed0 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   17eba:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17ebe:	90 e0       	ldi	r25, 0x00	; 0
   17ec0:	0e 94 20 8c 	call	0x11840	; 0x11840 <AMIGO_is_MLA>
   17ec4:	89 2b       	or	r24, r25
   17ec6:	09 f4       	brne	.+2      	; 0x17eca <AMIGO_COMMANDS+0x9e>
   17ec8:	43 c0       	rjmp	.+134    	; 0x17f50 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17eca:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   17ecc:	90 e0       	ldi	r25, 0x00	; 0
   17ece:	f1 db       	rcall	.-2078   	; 0x176b2 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17ed0:	ec 01       	movw	r28, r24
   17ed2:	40 c0       	rjmp	.+128    	; 0x17f54 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   17ed4:	c9 36       	cpi	r28, 0x69	; 105
   17ed6:	51 f4       	brne	.+20     	; 0x17eec <AMIGO_COMMANDS+0xc0>
   17ed8:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17edc:	90 e0       	ldi	r25, 0x00	; 0
   17ede:	0e 94 20 8c 	call	0x11840	; 0x11840 <AMIGO_is_MLA>
   17ee2:	89 2b       	or	r24, r25
   17ee4:	a9 f1       	breq	.+106    	; 0x17f50 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17ee6:	89 e6       	ldi	r24, 0x69	; 105
   17ee8:	90 e0       	ldi	r25, 0x00	; 0
   17eea:	f1 cf       	rjmp	.-30     	; 0x17ece <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   17eec:	ca 36       	cpi	r28, 0x6A	; 106
   17eee:	51 f4       	brne	.+20     	; 0x17f04 <AMIGO_COMMANDS+0xd8>
   17ef0:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17ef4:	90 e0       	ldi	r25, 0x00	; 0
   17ef6:	0e 94 20 8c 	call	0x11840	; 0x11840 <AMIGO_is_MLA>
   17efa:	89 2b       	or	r24, r25
   17efc:	49 f1       	breq	.+82     	; 0x17f50 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17efe:	8a e6       	ldi	r24, 0x6A	; 106
   17f00:	90 e0       	ldi	r25, 0x00	; 0
   17f02:	e5 cf       	rjmp	.-54     	; 0x17ece <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   17f04:	cc 36       	cpi	r28, 0x6C	; 108
   17f06:	51 f4       	brne	.+20     	; 0x17f1c <AMIGO_COMMANDS+0xf0>
   17f08:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17f0c:	90 e0       	ldi	r25, 0x00	; 0
   17f0e:	0e 94 20 8c 	call	0x11840	; 0x11840 <AMIGO_is_MLA>
   17f12:	89 2b       	or	r24, r25
   17f14:	e9 f0       	breq	.+58     	; 0x17f50 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17f16:	8c e6       	ldi	r24, 0x6C	; 108
   17f18:	90 e0       	ldi	r25, 0x00	; 0
   17f1a:	d9 cf       	rjmp	.-78     	; 0x17ece <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17f1c:	c0 37       	cpi	r28, 0x70	; 112
   17f1e:	c1 f4       	brne	.+48     	; 0x17f50 <AMIGO_COMMANDS+0x124>
   17f20:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   17f24:	90 e0       	ldi	r25, 0x00	; 0
   17f26:	0e 94 2f 8c 	call	0x1185e	; 0x1185e <AMIGO_is_MTA>
   17f2a:	ec 01       	movw	r28, r24
   17f2c:	89 2b       	or	r24, r25
   17f2e:	51 f0       	breq	.+20     	; 0x17f44 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17f30:	e0 91 63 18 	lds	r30, 0x1863	; 0x801863 <AMIGOp>
   17f34:	f0 91 64 18 	lds	r31, 0x1864	; 0x801864 <AMIGOp+0x1>
   17f38:	81 81       	ldd	r24, Z+1	; 0x01
   17f3a:	90 e0       	ldi	r25, 0x00	; 0
   17f3c:	0e 94 17 86 	call	0x10c2e	; 0x10c2e <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17f40:	e6 d9       	rcall	.-3124   	; 0x1730e <amigo_cmd_dsj>
   17f42:	c6 cf       	rjmp	.-116    	; 0x17ed0 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17f44:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   17f48:	90 e0       	ldi	r25, 0x00	; 0
   17f4a:	0e 94 20 8c 	call	0x11840	; 0x11840 <AMIGO_is_MLA>
   17f4e:	02 c0       	rjmp	.+4      	; 0x17f54 <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   17f50:	c0 e0       	ldi	r28, 0x00	; 0
   17f52:	d0 e0       	ldi	r29, 0x00	; 0
}
   17f54:	ce 01       	movw	r24, r28
   17f56:	df 91       	pop	r29
   17f58:	cf 91       	pop	r28
   17f5a:	08 95       	ret

00017f5c <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17f5c:	ec e9       	ldi	r30, 0x9C	; 156
   17f5e:	f8 e1       	ldi	r31, 0x18	; 24
   17f60:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17f62:	10 82       	st	Z, r1
   17f64:	11 82       	std	Z+1, r1	; 0x01
   17f66:	12 82       	std	Z+2, r1	; 0x02
   17f68:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17f6a:	15 82       	std	Z+5, r1	; 0x05
   17f6c:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17f6e:	12 86       	std	Z+10, r1	; 0x0a
   17f70:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17f72:	14 86       	std	Z+12, r1	; 0x0c
   17f74:	13 86       	std	Z+11, r1	; 0x0b
   17f76:	08 95       	ret

00017f78 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17f78:	cf 93       	push	r28
   17f7a:	df 93       	push	r29
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17f7c:	20 91 a5 18 	lds	r18, 0x18A5	; 0x8018a5 <plot+0x9>
   17f80:	30 91 a6 18 	lds	r19, 0x18A6	; 0x8018a6 <plot+0xa>
   17f84:	21 15       	cp	r18, r1
   17f86:	31 05       	cpc	r19, r1
   17f88:	09 f4       	brne	.+2      	; 0x17f8c <receive_plot_flush+0x14>
   17f8a:	4a c0       	rjmp	.+148    	; 0x18020 <receive_plot_flush+0xa8>
   17f8c:	80 91 a0 18 	lds	r24, 0x18A0	; 0x8018a0 <plot+0x4>
   17f90:	90 91 a1 18 	lds	r25, 0x18A1	; 0x8018a1 <plot+0x5>
   17f94:	00 97       	sbiw	r24, 0x00	; 0
   17f96:	09 f4       	brne	.+2      	; 0x17f9a <receive_plot_flush+0x22>
   17f98:	45 c0       	rjmp	.+138    	; 0x18024 <receive_plot_flush+0xac>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17f9a:	ac 01       	movw	r20, r24
   17f9c:	61 e0       	ldi	r22, 0x01	; 1
   17f9e:	70 e0       	ldi	r23, 0x00	; 0
   17fa0:	80 91 a7 18 	lds	r24, 0x18A7	; 0x8018a7 <plot+0xb>
   17fa4:	90 91 a8 18 	lds	r25, 0x18A8	; 0x8018a8 <plot+0xc>
   17fa8:	0e 94 bd 7c 	call	0xf97a	; 0xf97a <fwrite>
   17fac:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17fae:	80 91 a0 18 	lds	r24, 0x18A0	; 0x8018a0 <plot+0x4>
   17fb2:	90 91 a1 18 	lds	r25, 0x18A1	; 0x8018a1 <plot+0x5>
   17fb6:	c8 17       	cp	r28, r24
   17fb8:	d9 07       	cpc	r29, r25
   17fba:	31 f1       	breq	.+76     	; 0x18008 <receive_plot_flush+0x90>
    {
        if(debuglevel & (1+32))
   17fbc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17fc0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   17fc4:	81 72       	andi	r24, 0x21	; 33
   17fc6:	99 27       	eor	r25, r25
   17fc8:	89 2b       	or	r24, r25
   17fca:	d9 f0       	breq	.+54     	; 0x18002 <receive_plot_flush+0x8a>
        {
            perror("receive_plot_flush");
   17fcc:	89 e3       	ldi	r24, 0x39	; 57
   17fce:	95 e1       	ldi	r25, 0x15	; 21
   17fd0:	0e 94 df 78 	call	0xf1be	; 0xf1be <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17fd4:	df 93       	push	r29
   17fd6:	cf 93       	push	r28
   17fd8:	80 91 a1 18 	lds	r24, 0x18A1	; 0x8018a1 <plot+0x5>
   17fdc:	8f 93       	push	r24
   17fde:	80 91 a0 18 	lds	r24, 0x18A0	; 0x8018a0 <plot+0x4>
   17fe2:	8f 93       	push	r24
   17fe4:	86 e5       	ldi	r24, 0x56	; 86
   17fe6:	90 e3       	ldi	r25, 0x30	; 48
   17fe8:	1f 92       	push	r1
   17fea:	9f 93       	push	r25
   17fec:	8f 93       	push	r24
   17fee:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   17ff2:	8d b7       	in	r24, 0x3d	; 61
   17ff4:	9e b7       	in	r25, 0x3e	; 62
   17ff6:	07 96       	adiw	r24, 0x07	; 7
   17ff8:	0f b6       	in	r0, 0x3f	; 63
   17ffa:	f8 94       	cli
   17ffc:	9e bf       	out	0x3e, r25	; 62
   17ffe:	0f be       	out	0x3f, r0	; 63
   18000:	8d bf       	out	0x3d, r24	; 61
        }
        return(-1);
   18002:	8f ef       	ldi	r24, 0xFF	; 255
   18004:	9f ef       	ldi	r25, 0xFF	; 255
   18006:	0e c0       	rjmp	.+28     	; 0x18024 <receive_plot_flush+0xac>
    }

    fno = fileno( plot.fp );
   18008:	80 91 a5 18 	lds	r24, 0x18A5	; 0x8018a5 <plot+0x9>
   1800c:	90 91 a6 18 	lds	r25, 0x18A6	; 0x8018a6 <plot+0xa>
   18010:	0e 94 29 77 	call	0xee52	; 0xee52 <fileno>
    if(fno < 0)
   18014:	97 fd       	sbrc	r25, 7
   18016:	f5 cf       	rjmp	.-22     	; 0x18002 <receive_plot_flush+0x8a>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   18018:	0e 94 07 7c 	call	0xf80e	; 0xf80e <syncfs>
    return (ret);
   1801c:	ce 01       	movw	r24, r28
   1801e:	02 c0       	rjmp	.+4      	; 0x18024 <receive_plot_flush+0xac>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   18020:	80 e0       	ldi	r24, 0x00	; 0
   18022:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   18024:	df 91       	pop	r29
   18026:	cf 91       	pop	r28
   18028:	08 95       	ret

0001802a <printer_close>:
   1802a:	a6 df       	rcall	.-180    	; 0x17f78 <receive_plot_flush>
   1802c:	97 ff       	sbrs	r25, 7
   1802e:	03 c0       	rjmp	.+6      	; 0x18036 <printer_close+0xc>
   18030:	81 e0       	ldi	r24, 0x01	; 1
   18032:	80 93 a4 18 	sts	0x18A4, r24	; 0x8018a4 <plot+0x8>
   18036:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1803a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1803e:	81 72       	andi	r24, 0x21	; 33
   18040:	99 27       	eor	r25, r25
   18042:	89 2b       	or	r24, r25
   18044:	71 f0       	breq	.+28     	; 0x18062 <printer_close+0x38>
   18046:	80 91 a4 18 	lds	r24, 0x18A4	; 0x8018a4 <plot+0x8>
   1804a:	88 23       	and	r24, r24
   1804c:	51 f0       	breq	.+20     	; 0x18062 <printer_close+0x38>
   1804e:	85 e8       	ldi	r24, 0x85	; 133
   18050:	90 e3       	ldi	r25, 0x30	; 48
   18052:	1f 92       	push	r1
   18054:	9f 93       	push	r25
   18056:	8f 93       	push	r24
   18058:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1805c:	0f 90       	pop	r0
   1805e:	0f 90       	pop	r0
   18060:	0f 90       	pop	r0
   18062:	80 91 a5 18 	lds	r24, 0x18A5	; 0x8018a5 <plot+0x9>
   18066:	90 91 a6 18 	lds	r25, 0x18A6	; 0x8018a6 <plot+0xa>
   1806a:	00 97       	sbiw	r24, 0x00	; 0
   1806c:	09 f1       	breq	.+66     	; 0x180b0 <printer_close+0x86>
   1806e:	0e 94 3f 7d 	call	0xfa7e	; 0xfa7e <fclose>
   18072:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18076:	85 ff       	sbrs	r24, 5
   18078:	1b c0       	rjmp	.+54     	; 0x180b0 <printer_close+0x86>
   1807a:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <plot+0x3>
   1807e:	8f 93       	push	r24
   18080:	80 91 9e 18 	lds	r24, 0x189E	; 0x80189e <plot+0x2>
   18084:	8f 93       	push	r24
   18086:	80 91 9d 18 	lds	r24, 0x189D	; 0x80189d <plot+0x1>
   1808a:	8f 93       	push	r24
   1808c:	80 91 9c 18 	lds	r24, 0x189C	; 0x80189c <plot>
   18090:	8f 93       	push	r24
   18092:	87 e7       	ldi	r24, 0x77	; 119
   18094:	90 e3       	ldi	r25, 0x30	; 48
   18096:	1f 92       	push	r1
   18098:	9f 93       	push	r25
   1809a:	8f 93       	push	r24
   1809c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   180a0:	8d b7       	in	r24, 0x3d	; 61
   180a2:	9e b7       	in	r25, 0x3e	; 62
   180a4:	07 96       	adiw	r24, 0x07	; 7
   180a6:	0f b6       	in	r0, 0x3f	; 63
   180a8:	f8 94       	cli
   180aa:	9e bf       	out	0x3e, r25	; 62
   180ac:	0f be       	out	0x3f, r0	; 63
   180ae:	8d bf       	out	0x3d, r24	; 61
   180b0:	80 91 a7 18 	lds	r24, 0x18A7	; 0x8018a7 <plot+0xb>
   180b4:	90 91 a8 18 	lds	r25, 0x18A8	; 0x8018a8 <plot+0xc>
   180b8:	00 97       	sbiw	r24, 0x00	; 0
   180ba:	11 f0       	breq	.+4      	; 0x180c0 <printer_close+0x96>
   180bc:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
   180c0:	4d cf       	rjmp	.-358    	; 0x17f5c <printer_init>
   180c2:	08 95       	ret

000180c4 <printer_open>:
   180c4:	ac e4       	ldi	r26, 0x4C	; 76
   180c6:	b0 e0       	ldi	r27, 0x00	; 0
   180c8:	e8 e6       	ldi	r30, 0x68	; 104
   180ca:	f0 ec       	ldi	r31, 0xC0	; 192
   180cc:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__prologue_saves__+0xc>
   180d0:	8c 01       	movw	r16, r24
   180d2:	89 2b       	or	r24, r25
   180d4:	09 f0       	breq	.+2      	; 0x180d8 <printer_open+0x14>
   180d6:	4b c0       	rjmp	.+150    	; 0x1816e <printer_open+0xaa>
   180d8:	be 01       	movw	r22, r28
   180da:	6f 5b       	subi	r22, 0xBF	; 191
   180dc:	7f 4f       	sbci	r23, 0xFF	; 255
   180de:	80 e0       	ldi	r24, 0x00	; 0
   180e0:	90 e0       	ldi	r25, 0x00	; 0
   180e2:	0e 94 41 34 	call	0x6882	; 0x6882 <clock_gettime>
   180e6:	25 96       	adiw	r28, 0x05	; 5
   180e8:	8c ad       	ldd	r24, Y+60	; 0x3c
   180ea:	9d ad       	ldd	r25, Y+61	; 0x3d
   180ec:	ae ad       	ldd	r26, Y+62	; 0x3e
   180ee:	bf ad       	ldd	r27, Y+63	; 0x3f
   180f0:	25 97       	sbiw	r28, 0x05	; 5
   180f2:	2d 96       	adiw	r28, 0x0d	; 13
   180f4:	8c af       	std	Y+60, r24	; 0x3c
   180f6:	9d af       	std	Y+61, r25	; 0x3d
   180f8:	ae af       	std	Y+62, r26	; 0x3e
   180fa:	bf af       	std	Y+63, r27	; 0x3f
   180fc:	2d 97       	sbiw	r28, 0x0d	; 13
   180fe:	ce 01       	movw	r24, r28
   18100:	87 5b       	subi	r24, 0xB7	; 183
   18102:	9f 4f       	sbci	r25, 0xFF	; 255
   18104:	0e 94 11 38 	call	0x7022	; 0x7022 <gmtime>
   18108:	8c 01       	movw	r16, r24
   1810a:	fc 01       	movw	r30, r24
   1810c:	90 80       	ld	r9, Z
   1810e:	81 80       	ldd	r8, Z+1	; 0x01
   18110:	b2 80       	ldd	r11, Z+2	; 0x02
   18112:	a3 80       	ldd	r10, Z+3	; 0x03
   18114:	d4 80       	ldd	r13, Z+4	; 0x04
   18116:	c5 80       	ldd	r12, Z+5	; 0x05
   18118:	e2 84       	ldd	r14, Z+10	; 0x0a
   1811a:	f3 84       	ldd	r15, Z+11	; 0x0b
   1811c:	f4 e9       	ldi	r31, 0x94	; 148
   1811e:	ef 1a       	sub	r14, r31
   18120:	f8 ef       	ldi	r31, 0xF8	; 248
   18122:	ff 0a       	sbc	r15, r31
   18124:	fc 01       	movw	r30, r24
   18126:	80 85       	ldd	r24, Z+8	; 0x08
   18128:	91 85       	ldd	r25, Z+9	; 0x09
   1812a:	0e 94 ed 36 	call	0x6dda	; 0x6dda <tm_mon_to_ascii>
   1812e:	8f 92       	push	r8
   18130:	9f 92       	push	r9
   18132:	af 92       	push	r10
   18134:	bf 92       	push	r11
   18136:	cf 92       	push	r12
   18138:	df 92       	push	r13
   1813a:	ff 92       	push	r15
   1813c:	ef 92       	push	r14
   1813e:	9f 93       	push	r25
   18140:	8f 93       	push	r24
   18142:	f8 01       	movw	r30, r16
   18144:	87 81       	ldd	r24, Z+7	; 0x07
   18146:	8f 93       	push	r24
   18148:	86 81       	ldd	r24, Z+6	; 0x06
   1814a:	8f 93       	push	r24
   1814c:	8c eb       	ldi	r24, 0xBC	; 188
   1814e:	90 e3       	ldi	r25, 0x30	; 48
   18150:	1f 92       	push	r1
   18152:	9f 93       	push	r25
   18154:	8f 93       	push	r24
   18156:	8e 01       	movw	r16, r28
   18158:	0f 5f       	subi	r16, 0xFF	; 255
   1815a:	1f 4f       	sbci	r17, 0xFF	; 255
   1815c:	1f 93       	push	r17
   1815e:	0f 93       	push	r16
   18160:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <sprintf_P>
   18164:	0f b6       	in	r0, 0x3f	; 63
   18166:	f8 94       	cli
   18168:	de bf       	out	0x3e, r29	; 62
   1816a:	0f be       	out	0x3f, r0	; 63
   1816c:	cd bf       	out	0x3d, r28	; 61
   1816e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18172:	85 ff       	sbrs	r24, 5
   18174:	0e c0       	rjmp	.+28     	; 0x18192 <printer_open+0xce>
   18176:	1f 93       	push	r17
   18178:	0f 93       	push	r16
   1817a:	86 ea       	ldi	r24, 0xA6	; 166
   1817c:	90 e3       	ldi	r25, 0x30	; 48
   1817e:	1f 92       	push	r1
   18180:	9f 93       	push	r25
   18182:	8f 93       	push	r24
   18184:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18188:	0f 90       	pop	r0
   1818a:	0f 90       	pop	r0
   1818c:	0f 90       	pop	r0
   1818e:	0f 90       	pop	r0
   18190:	0f 90       	pop	r0
   18192:	64 e9       	ldi	r22, 0x94	; 148
   18194:	78 e0       	ldi	r23, 0x08	; 8
   18196:	c8 01       	movw	r24, r16
   18198:	0e 94 95 7e 	call	0xfd2a	; 0xfd2a <fopen>
   1819c:	90 93 a6 18 	sts	0x18A6, r25	; 0x8018a6 <plot+0xa>
   181a0:	80 93 a5 18 	sts	0x18A5, r24	; 0x8018a5 <plot+0x9>
   181a4:	89 2b       	or	r24, r25
   181a6:	b9 f4       	brne	.+46     	; 0x181d6 <printer_open+0x112>
   181a8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   181ac:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   181b0:	81 72       	andi	r24, 0x21	; 33
   181b2:	99 27       	eor	r25, r25
   181b4:	89 2b       	or	r24, r25
   181b6:	11 f1       	breq	.+68     	; 0x181fc <printer_open+0x138>
   181b8:	8b e1       	ldi	r24, 0x1B	; 27
   181ba:	9d e0       	ldi	r25, 0x0D	; 13
   181bc:	0e 94 df 78 	call	0xf1be	; 0xf1be <perror>
   181c0:	8a e9       	ldi	r24, 0x9A	; 154
   181c2:	90 e3       	ldi	r25, 0x30	; 48
   181c4:	1f 92       	push	r1
   181c6:	9f 93       	push	r25
   181c8:	8f 93       	push	r24
   181ca:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   181ce:	0f 90       	pop	r0
   181d0:	0f 90       	pop	r0
   181d2:	0f 90       	pop	r0
   181d4:	13 c0       	rjmp	.+38     	; 0x181fc <printer_open+0x138>
   181d6:	61 e0       	ldi	r22, 0x01	; 1
   181d8:	70 e0       	ldi	r23, 0x00	; 0
   181da:	81 e0       	ldi	r24, 0x01	; 1
   181dc:	92 e0       	ldi	r25, 0x02	; 2
   181de:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   181e2:	90 93 a8 18 	sts	0x18A8, r25	; 0x8018a8 <plot+0xc>
   181e6:	80 93 a7 18 	sts	0x18A7, r24	; 0x8018a7 <plot+0xb>
   181ea:	89 2b       	or	r24, r25
   181ec:	09 f4       	brne	.+2      	; 0x181f0 <printer_open+0x12c>
   181ee:	1d df       	rcall	.-454    	; 0x1802a <printer_close>
   181f0:	80 e0       	ldi	r24, 0x00	; 0
   181f2:	92 e0       	ldi	r25, 0x02	; 2
   181f4:	90 93 a3 18 	sts	0x18A3, r25	; 0x8018a3 <plot+0x7>
   181f8:	80 93 a2 18 	sts	0x18A2, r24	; 0x8018a2 <plot+0x6>
   181fc:	c4 5b       	subi	r28, 0xB4	; 180
   181fe:	df 4f       	sbci	r29, 0xFF	; 255
   18200:	ec e0       	ldi	r30, 0x0C	; 12
   18202:	0c 94 57 e5 	jmp	0x1caae	; 0x1caae <__epilogue_restores__+0xc>

00018206 <printer_buffer>:
   18206:	cf 93       	push	r28
   18208:	df 93       	push	r29
   1820a:	ec 01       	movw	r28, r24
   1820c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18210:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   18214:	81 72       	andi	r24, 0x21	; 33
   18216:	99 27       	eor	r25, r25
   18218:	89 2b       	or	r24, r25
   1821a:	e9 f0       	breq	.+58     	; 0x18256 <printer_buffer+0x50>
   1821c:	80 91 9c 18 	lds	r24, 0x189C	; 0x80189c <plot>
   18220:	90 91 9d 18 	lds	r25, 0x189D	; 0x80189d <plot+0x1>
   18224:	20 91 9e 18 	lds	r18, 0x189E	; 0x80189e <plot+0x2>
   18228:	30 91 9f 18 	lds	r19, 0x189F	; 0x80189f <plot+0x3>
   1822c:	81 11       	cpse	r24, r1
   1822e:	13 c0       	rjmp	.+38     	; 0x18256 <printer_buffer+0x50>
   18230:	3f 93       	push	r19
   18232:	2f 93       	push	r18
   18234:	9f 93       	push	r25
   18236:	8f 93       	push	r24
   18238:	8f e4       	ldi	r24, 0x4F	; 79
   1823a:	90 e3       	ldi	r25, 0x30	; 48
   1823c:	1f 92       	push	r1
   1823e:	9f 93       	push	r25
   18240:	8f 93       	push	r24
   18242:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18246:	8d b7       	in	r24, 0x3d	; 61
   18248:	9e b7       	in	r25, 0x3e	; 62
   1824a:	07 96       	adiw	r24, 0x07	; 7
   1824c:	0f b6       	in	r0, 0x3f	; 63
   1824e:	f8 94       	cli
   18250:	9e bf       	out	0x3e, r25	; 62
   18252:	0f be       	out	0x3f, r0	; 63
   18254:	8d bf       	out	0x3d, r24	; 61
   18256:	ce 01       	movw	r24, r28
   18258:	88 27       	eor	r24, r24
   1825a:	97 7f       	andi	r25, 0xF7	; 247
   1825c:	89 2b       	or	r24, r25
   1825e:	41 f0       	breq	.+16     	; 0x18270 <printer_buffer+0x6a>
   18260:	8b de       	rcall	.-746    	; 0x17f78 <receive_plot_flush>
   18262:	89 2b       	or	r24, r25
   18264:	09 f4       	brne	.+2      	; 0x18268 <printer_buffer+0x62>
   18266:	3f c0       	rjmp	.+126    	; 0x182e6 <printer_buffer+0xe0>
   18268:	81 e0       	ldi	r24, 0x01	; 1
   1826a:	80 93 a4 18 	sts	0x18A4, r24	; 0x8018a4 <plot+0x8>
   1826e:	3b c0       	rjmp	.+118    	; 0x182e6 <printer_buffer+0xe0>
   18270:	20 91 a7 18 	lds	r18, 0x18A7	; 0x8018a7 <plot+0xb>
   18274:	30 91 a8 18 	lds	r19, 0x18A8	; 0x8018a8 <plot+0xc>
   18278:	80 91 a0 18 	lds	r24, 0x18A0	; 0x8018a0 <plot+0x4>
   1827c:	90 91 a1 18 	lds	r25, 0x18A1	; 0x8018a1 <plot+0x5>
   18280:	ac 01       	movw	r20, r24
   18282:	4f 5f       	subi	r20, 0xFF	; 255
   18284:	5f 4f       	sbci	r21, 0xFF	; 255
   18286:	50 93 a1 18 	sts	0x18A1, r21	; 0x8018a1 <plot+0x5>
   1828a:	40 93 a0 18 	sts	0x18A0, r20	; 0x8018a0 <plot+0x4>
   1828e:	f9 01       	movw	r30, r18
   18290:	e8 0f       	add	r30, r24
   18292:	f9 1f       	adc	r31, r25
   18294:	c0 83       	st	Z, r28
   18296:	80 91 9c 18 	lds	r24, 0x189C	; 0x80189c <plot>
   1829a:	90 91 9d 18 	lds	r25, 0x189D	; 0x80189d <plot+0x1>
   1829e:	a0 91 9e 18 	lds	r26, 0x189E	; 0x80189e <plot+0x2>
   182a2:	b0 91 9f 18 	lds	r27, 0x189F	; 0x80189f <plot+0x3>
   182a6:	01 96       	adiw	r24, 0x01	; 1
   182a8:	a1 1d       	adc	r26, r1
   182aa:	b1 1d       	adc	r27, r1
   182ac:	80 93 9c 18 	sts	0x189C, r24	; 0x80189c <plot>
   182b0:	90 93 9d 18 	sts	0x189D, r25	; 0x80189d <plot+0x1>
   182b4:	a0 93 9e 18 	sts	0x189E, r26	; 0x80189e <plot+0x2>
   182b8:	b0 93 9f 18 	sts	0x189F, r27	; 0x80189f <plot+0x3>
   182bc:	20 91 a0 18 	lds	r18, 0x18A0	; 0x8018a0 <plot+0x4>
   182c0:	30 91 a1 18 	lds	r19, 0x18A1	; 0x8018a1 <plot+0x5>
   182c4:	80 91 a2 18 	lds	r24, 0x18A2	; 0x8018a2 <plot+0x6>
   182c8:	90 91 a3 18 	lds	r25, 0x18A3	; 0x8018a3 <plot+0x7>
   182cc:	28 17       	cp	r18, r24
   182ce:	39 07       	cpc	r19, r25
   182d0:	54 f0       	brlt	.+20     	; 0x182e6 <printer_buffer+0xe0>
   182d2:	52 de       	rcall	.-860    	; 0x17f78 <receive_plot_flush>
   182d4:	97 ff       	sbrs	r25, 7
   182d6:	03 c0       	rjmp	.+6      	; 0x182de <printer_buffer+0xd8>
   182d8:	81 e0       	ldi	r24, 0x01	; 1
   182da:	80 93 a4 18 	sts	0x18A4, r24	; 0x8018a4 <plot+0x8>
   182de:	10 92 a1 18 	sts	0x18A1, r1	; 0x8018a1 <plot+0x5>
   182e2:	10 92 a0 18 	sts	0x18A0, r1	; 0x8018a0 <plot+0x4>
   182e6:	df 91       	pop	r29
   182e8:	cf 91       	pop	r28
   182ea:	08 95       	ret

000182ec <PRINTER_COMMANDS>:
   182ec:	cf 93       	push	r28
   182ee:	c8 2f       	mov	r28, r24
   182f0:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <listening>
   182f4:	90 e0       	ldi	r25, 0x00	; 0
   182f6:	0e 94 4d 8c 	call	0x1189a	; 0x1189a <PRINTER_is_MLA>
   182fa:	89 2b       	or	r24, r25
   182fc:	49 f0       	breq	.+18     	; 0x18310 <PRINTER_COMMANDS+0x24>
   182fe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18302:	85 ff       	sbrs	r24, 5
   18304:	1e c0       	rjmp	.+60     	; 0x18342 <PRINTER_COMMANDS+0x56>
   18306:	1f 92       	push	r1
   18308:	cf 93       	push	r28
   1830a:	83 e3       	ldi	r24, 0x33	; 51
   1830c:	90 e3       	ldi	r25, 0x30	; 48
   1830e:	0f c0       	rjmp	.+30     	; 0x1832e <PRINTER_COMMANDS+0x42>
   18310:	80 91 e6 1d 	lds	r24, 0x1DE6	; 0x801de6 <talking>
   18314:	90 e0       	ldi	r25, 0x00	; 0
   18316:	0e 94 5c 8c 	call	0x118b8	; 0x118b8 <PRINTER_is_MTA>
   1831a:	89 2b       	or	r24, r25
   1831c:	91 f0       	breq	.+36     	; 0x18342 <PRINTER_COMMANDS+0x56>
   1831e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18322:	85 ff       	sbrs	r24, 5
   18324:	0e c0       	rjmp	.+28     	; 0x18342 <PRINTER_COMMANDS+0x56>
   18326:	1f 92       	push	r1
   18328:	cf 93       	push	r28
   1832a:	89 e1       	ldi	r24, 0x19	; 25
   1832c:	90 e3       	ldi	r25, 0x30	; 48
   1832e:	1f 92       	push	r1
   18330:	9f 93       	push	r25
   18332:	8f 93       	push	r24
   18334:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18338:	0f 90       	pop	r0
   1833a:	0f 90       	pop	r0
   1833c:	0f 90       	pop	r0
   1833e:	0f 90       	pop	r0
   18340:	0f 90       	pop	r0
   18342:	80 e0       	ldi	r24, 0x00	; 0
   18344:	90 e0       	ldi	r25, 0x00	; 0
   18346:	cf 91       	pop	r28
   18348:	08 95       	ret

0001834a <lif_help>:
   1834a:	cf 93       	push	r28
   1834c:	df 93       	push	r29
   1834e:	ec 01       	movw	r28, r24
   18350:	8b ef       	ldi	r24, 0xFB	; 251
   18352:	94 e4       	ldi	r25, 0x44	; 68
   18354:	1f 92       	push	r1
   18356:	9f 93       	push	r25
   18358:	8f 93       	push	r24
   1835a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1835e:	0f 90       	pop	r0
   18360:	0f 90       	pop	r0
   18362:	0f 90       	pop	r0
   18364:	cd 2b       	or	r28, r29
   18366:	51 f0       	breq	.+20     	; 0x1837c <lif_help+0x32>
   18368:	82 e3       	ldi	r24, 0x32	; 50
   1836a:	93 e4       	ldi	r25, 0x43	; 67
   1836c:	1f 92       	push	r1
   1836e:	9f 93       	push	r25
   18370:	8f 93       	push	r24
   18372:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18376:	0f 90       	pop	r0
   18378:	0f 90       	pop	r0
   1837a:	0f 90       	pop	r0
   1837c:	df 91       	pop	r29
   1837e:	cf 91       	pop	r28
   18380:	08 95       	ret

00018382 <lif_calloc>:
   18382:	ef 92       	push	r14
   18384:	ff 92       	push	r15
   18386:	0f 93       	push	r16
   18388:	1f 93       	push	r17
   1838a:	cf 93       	push	r28
   1838c:	df 93       	push	r29
   1838e:	16 2f       	mov	r17, r22
   18390:	07 2f       	mov	r16, r23
   18392:	f8 2e       	mov	r15, r24
   18394:	e9 2e       	mov	r14, r25
   18396:	61 e0       	ldi	r22, 0x01	; 1
   18398:	70 e0       	ldi	r23, 0x00	; 0
   1839a:	81 2f       	mov	r24, r17
   1839c:	90 2f       	mov	r25, r16
   1839e:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   183a2:	ec 01       	movw	r28, r24
   183a4:	89 2b       	or	r24, r25
   183a6:	99 f4       	brne	.+38     	; 0x183ce <lif_calloc+0x4c>
   183a8:	ef 92       	push	r14
   183aa:	ff 92       	push	r15
   183ac:	0f 93       	push	r16
   183ae:	1f 93       	push	r17
   183b0:	88 ee       	ldi	r24, 0xE8	; 232
   183b2:	92 e4       	ldi	r25, 0x42	; 66
   183b4:	1f 92       	push	r1
   183b6:	9f 93       	push	r25
   183b8:	8f 93       	push	r24
   183ba:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   183be:	8d b7       	in	r24, 0x3d	; 61
   183c0:	9e b7       	in	r25, 0x3e	; 62
   183c2:	07 96       	adiw	r24, 0x07	; 7
   183c4:	0f b6       	in	r0, 0x3f	; 63
   183c6:	f8 94       	cli
   183c8:	9e bf       	out	0x3e, r25	; 62
   183ca:	0f be       	out	0x3f, r0	; 63
   183cc:	8d bf       	out	0x3d, r24	; 61
   183ce:	ce 01       	movw	r24, r28
   183d0:	cd b7       	in	r28, 0x3d	; 61
   183d2:	de b7       	in	r29, 0x3e	; 62
   183d4:	e6 e0       	ldi	r30, 0x06	; 6
   183d6:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

000183da <lif_free>:
   183da:	00 97       	sbiw	r24, 0x00	; 0
   183dc:	59 f4       	brne	.+22     	; 0x183f4 <lif_free+0x1a>
   183de:	80 ed       	ldi	r24, 0xD0	; 208
   183e0:	92 e4       	ldi	r25, 0x42	; 66
   183e2:	1f 92       	push	r1
   183e4:	9f 93       	push	r25
   183e6:	8f 93       	push	r24
   183e8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   183ec:	0f 90       	pop	r0
   183ee:	0f 90       	pop	r0
   183f0:	0f 90       	pop	r0
   183f2:	08 95       	ret
   183f4:	0c 94 d2 29 	jmp	0x53a4	; 0x53a4 <safefree>
   183f8:	08 95       	ret

000183fa <lif_stralloc>:
   183fa:	0f 93       	push	r16
   183fc:	1f 93       	push	r17
   183fe:	cf 93       	push	r28
   18400:	df 93       	push	r29
   18402:	ec 01       	movw	r28, r24
   18404:	fc 01       	movw	r30, r24
   18406:	01 90       	ld	r0, Z+
   18408:	00 20       	and	r0, r0
   1840a:	e9 f7       	brne	.-6      	; 0x18406 <lif_stralloc+0xc>
   1840c:	bf 01       	movw	r22, r30
   1840e:	68 1b       	sub	r22, r24
   18410:	79 0b       	sbc	r23, r25
   18412:	6d 5f       	subi	r22, 0xFD	; 253
   18414:	7f 4f       	sbci	r23, 0xFF	; 255
   18416:	07 2e       	mov	r0, r23
   18418:	00 0c       	add	r0, r0
   1841a:	88 0b       	sbc	r24, r24
   1841c:	99 0b       	sbc	r25, r25
   1841e:	b1 df       	rcall	.-158    	; 0x18382 <lif_calloc>
   18420:	8c 01       	movw	r16, r24
   18422:	00 97       	sbiw	r24, 0x00	; 0
   18424:	19 f0       	breq	.+6      	; 0x1842c <lif_stralloc+0x32>
   18426:	be 01       	movw	r22, r28
   18428:	0e 94 a8 31 	call	0x6350	; 0x6350 <strcpy>
   1842c:	c8 01       	movw	r24, r16
   1842e:	df 91       	pop	r29
   18430:	cf 91       	pop	r28
   18432:	1f 91       	pop	r17
   18434:	0f 91       	pop	r16
   18436:	08 95       	ret

00018438 <lif_open>:
   18438:	ef 92       	push	r14
   1843a:	ff 92       	push	r15
   1843c:	0f 93       	push	r16
   1843e:	1f 93       	push	r17
   18440:	cf 93       	push	r28
   18442:	df 93       	push	r29
   18444:	18 2f       	mov	r17, r24
   18446:	09 2f       	mov	r16, r25
   18448:	f6 2e       	mov	r15, r22
   1844a:	e7 2e       	mov	r14, r23
   1844c:	0e 94 95 7e 	call	0xfd2a	; 0xfd2a <fopen>
   18450:	ec 01       	movw	r28, r24
   18452:	89 2b       	or	r24, r25
   18454:	99 f4       	brne	.+38     	; 0x1847c <lif_open+0x44>
   18456:	ef 92       	push	r14
   18458:	ff 92       	push	r15
   1845a:	0f 93       	push	r16
   1845c:	1f 93       	push	r17
   1845e:	8b ea       	ldi	r24, 0xAB	; 171
   18460:	92 e4       	ldi	r25, 0x42	; 66
   18462:	1f 92       	push	r1
   18464:	9f 93       	push	r25
   18466:	8f 93       	push	r24
   18468:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1846c:	8d b7       	in	r24, 0x3d	; 61
   1846e:	9e b7       	in	r25, 0x3e	; 62
   18470:	07 96       	adiw	r24, 0x07	; 7
   18472:	0f b6       	in	r0, 0x3f	; 63
   18474:	f8 94       	cli
   18476:	9e bf       	out	0x3e, r25	; 62
   18478:	0f be       	out	0x3f, r0	; 63
   1847a:	8d bf       	out	0x3d, r24	; 61
   1847c:	ce 01       	movw	r24, r28
   1847e:	cd b7       	in	r28, 0x3d	; 61
   18480:	de b7       	in	r29, 0x3e	; 62
   18482:	e6 e0       	ldi	r30, 0x06	; 6
   18484:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

00018488 <lif_stat>:
   18488:	0f 93       	push	r16
   1848a:	1f 93       	push	r17
   1848c:	cf 93       	push	r28
   1848e:	df 93       	push	r29
   18490:	18 2f       	mov	r17, r24
   18492:	09 2f       	mov	r16, r25
   18494:	d6 2f       	mov	r29, r22
   18496:	c7 2f       	mov	r28, r23
   18498:	0e 94 a9 79 	call	0xf352	; 0xf352 <stat>
   1849c:	97 ff       	sbrs	r25, 7
   1849e:	11 c0       	rjmp	.+34     	; 0x184c2 <lif_stat+0x3a>
   184a0:	0f 93       	push	r16
   184a2:	1f 93       	push	r17
   184a4:	82 e9       	ldi	r24, 0x92	; 146
   184a6:	92 e4       	ldi	r25, 0x42	; 66
   184a8:	1f 92       	push	r1
   184aa:	9f 93       	push	r25
   184ac:	8f 93       	push	r24
   184ae:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   184b2:	0f 90       	pop	r0
   184b4:	0f 90       	pop	r0
   184b6:	0f 90       	pop	r0
   184b8:	0f 90       	pop	r0
   184ba:	0f 90       	pop	r0
   184bc:	80 e0       	ldi	r24, 0x00	; 0
   184be:	90 e0       	ldi	r25, 0x00	; 0
   184c0:	02 c0       	rjmp	.+4      	; 0x184c6 <lif_stat+0x3e>
   184c2:	8d 2f       	mov	r24, r29
   184c4:	9c 2f       	mov	r25, r28
   184c6:	df 91       	pop	r29
   184c8:	cf 91       	pop	r28
   184ca:	1f 91       	pop	r17
   184cc:	0f 91       	pop	r16
   184ce:	08 95       	ret

000184d0 <lif_seek_msg>:
   184d0:	a0 e0       	ldi	r26, 0x00	; 0
   184d2:	b0 e0       	ldi	r27, 0x00	; 0
   184d4:	ee e6       	ldi	r30, 0x6E	; 110
   184d6:	f2 ec       	ldi	r31, 0xC2	; 194
   184d8:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
   184dc:	ec 01       	movw	r28, r24
   184de:	6a 01       	movw	r12, r20
   184e0:	7b 01       	movw	r14, r22
   184e2:	12 2f       	mov	r17, r18
   184e4:	03 2f       	mov	r16, r19
   184e6:	0e 94 d5 7a 	call	0xf5aa	; 0xf5aa <ftell>
   184ea:	6c 15       	cp	r22, r12
   184ec:	7d 05       	cpc	r23, r13
   184ee:	8e 05       	cpc	r24, r14
   184f0:	9f 05       	cpc	r25, r15
   184f2:	19 f4       	brne	.+6      	; 0x184fa <lif_seek_msg+0x2a>
   184f4:	81 e0       	ldi	r24, 0x01	; 1
   184f6:	90 e0       	ldi	r25, 0x00	; 0
   184f8:	20 c0       	rjmp	.+64     	; 0x1853a <lif_seek_msg+0x6a>
   184fa:	20 e0       	ldi	r18, 0x00	; 0
   184fc:	30 e0       	ldi	r19, 0x00	; 0
   184fe:	b7 01       	movw	r22, r14
   18500:	a6 01       	movw	r20, r12
   18502:	ce 01       	movw	r24, r28
   18504:	0e 94 57 7b 	call	0xf6ae	; 0xf6ae <fseek>
   18508:	97 ff       	sbrs	r25, 7
   1850a:	f4 cf       	rjmp	.-24     	; 0x184f4 <lif_seek_msg+0x24>
   1850c:	ff 92       	push	r15
   1850e:	ef 92       	push	r14
   18510:	df 92       	push	r13
   18512:	cf 92       	push	r12
   18514:	0f 93       	push	r16
   18516:	1f 93       	push	r17
   18518:	81 e7       	ldi	r24, 0x71	; 113
   1851a:	92 e4       	ldi	r25, 0x42	; 66
   1851c:	1f 92       	push	r1
   1851e:	9f 93       	push	r25
   18520:	8f 93       	push	r24
   18522:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18526:	8d b7       	in	r24, 0x3d	; 61
   18528:	9e b7       	in	r25, 0x3e	; 62
   1852a:	09 96       	adiw	r24, 0x09	; 9
   1852c:	0f b6       	in	r0, 0x3f	; 63
   1852e:	f8 94       	cli
   18530:	9e bf       	out	0x3e, r25	; 62
   18532:	0f be       	out	0x3f, r0	; 63
   18534:	8d bf       	out	0x3d, r24	; 61
   18536:	80 e0       	ldi	r24, 0x00	; 0
   18538:	90 e0       	ldi	r25, 0x00	; 0
   1853a:	cd b7       	in	r28, 0x3d	; 61
   1853c:	de b7       	in	r29, 0x3e	; 62
   1853e:	e8 e0       	ldi	r30, 0x08	; 8
   18540:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

00018544 <lif_read>:
   18544:	a0 e0       	ldi	r26, 0x00	; 0
   18546:	b0 e0       	ldi	r27, 0x00	; 0
   18548:	e8 ea       	ldi	r30, 0xA8	; 168
   1854a:	f2 ec       	ldi	r31, 0xC2	; 194
   1854c:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__prologue_saves__+0xc>
   18550:	ec 01       	movw	r28, r24
   18552:	7b 01       	movw	r14, r22
   18554:	b2 2e       	mov	r11, r18
   18556:	a3 2e       	mov	r10, r19
   18558:	94 2e       	mov	r9, r20
   1855a:	85 2e       	mov	r8, r21
   1855c:	28 81       	ld	r18, Y
   1855e:	39 81       	ldd	r19, Y+1	; 0x01
   18560:	4b 2d       	mov	r20, r11
   18562:	5a 2d       	mov	r21, r10
   18564:	69 2d       	mov	r22, r9
   18566:	78 2d       	mov	r23, r8
   18568:	8a 81       	ldd	r24, Y+2	; 0x02
   1856a:	9b 81       	ldd	r25, Y+3	; 0x03
   1856c:	b1 df       	rcall	.-158    	; 0x184d0 <lif_seek_msg>
   1856e:	89 2b       	or	r24, r25
   18570:	b9 f1       	breq	.+110    	; 0x185e0 <lif_read+0x9c>
   18572:	2a 81       	ldd	r18, Y+2	; 0x02
   18574:	3b 81       	ldd	r19, Y+3	; 0x03
   18576:	a8 01       	movw	r20, r16
   18578:	61 e0       	ldi	r22, 0x01	; 1
   1857a:	70 e0       	ldi	r23, 0x00	; 0
   1857c:	c7 01       	movw	r24, r14
   1857e:	0e 94 eb 7b 	call	0xf7d6	; 0xf7d6 <fread>
   18582:	6c 01       	movw	r12, r24
   18584:	e1 2c       	mov	r14, r1
   18586:	f1 2c       	mov	r15, r1
   18588:	b8 01       	movw	r22, r16
   1858a:	01 2e       	mov	r0, r17
   1858c:	00 0c       	add	r0, r0
   1858e:	88 0b       	sbc	r24, r24
   18590:	99 0b       	sbc	r25, r25
   18592:	c6 16       	cp	r12, r22
   18594:	d7 06       	cpc	r13, r23
   18596:	e8 06       	cpc	r14, r24
   18598:	f9 06       	cpc	r15, r25
   1859a:	41 f1       	breq	.+80     	; 0x185ec <lif_read+0xa8>
   1859c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   185a0:	80 ff       	sbrs	r24, 0
   185a2:	22 c0       	rjmp	.+68     	; 0x185e8 <lif_read+0xa4>
   185a4:	1f 93       	push	r17
   185a6:	0f 93       	push	r16
   185a8:	1f 92       	push	r1
   185aa:	1f 92       	push	r1
   185ac:	df 92       	push	r13
   185ae:	cf 92       	push	r12
   185b0:	8f 92       	push	r8
   185b2:	9f 92       	push	r9
   185b4:	af 92       	push	r10
   185b6:	bf 92       	push	r11
   185b8:	89 81       	ldd	r24, Y+1	; 0x01
   185ba:	8f 93       	push	r24
   185bc:	88 81       	ld	r24, Y
   185be:	8f 93       	push	r24
   185c0:	85 e3       	ldi	r24, 0x35	; 53
   185c2:	92 e4       	ldi	r25, 0x42	; 66
   185c4:	1f 92       	push	r1
   185c6:	9f 93       	push	r25
   185c8:	8f 93       	push	r24
   185ca:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   185ce:	8d b7       	in	r24, 0x3d	; 61
   185d0:	9e b7       	in	r25, 0x3e	; 62
   185d2:	0f 96       	adiw	r24, 0x0f	; 15
   185d4:	0f b6       	in	r0, 0x3f	; 63
   185d6:	f8 94       	cli
   185d8:	9e bf       	out	0x3e, r25	; 62
   185da:	0f be       	out	0x3f, r0	; 63
   185dc:	8d bf       	out	0x3d, r24	; 61
   185de:	04 c0       	rjmp	.+8      	; 0x185e8 <lif_read+0xa4>
   185e0:	60 e0       	ldi	r22, 0x00	; 0
   185e2:	70 e0       	ldi	r23, 0x00	; 0
   185e4:	cb 01       	movw	r24, r22
   185e6:	02 c0       	rjmp	.+4      	; 0x185ec <lif_read+0xa8>
   185e8:	c7 01       	movw	r24, r14
   185ea:	b6 01       	movw	r22, r12
   185ec:	cd b7       	in	r28, 0x3d	; 61
   185ee:	de b7       	in	r29, 0x3e	; 62
   185f0:	ec e0       	ldi	r30, 0x0C	; 12
   185f2:	0c 94 57 e5 	jmp	0x1caae	; 0x1caae <__epilogue_restores__+0xc>

000185f6 <lif_write>:
   185f6:	a0 e0       	ldi	r26, 0x00	; 0
   185f8:	b0 e0       	ldi	r27, 0x00	; 0
   185fa:	e1 e0       	ldi	r30, 0x01	; 1
   185fc:	f3 ec       	ldi	r31, 0xC3	; 195
   185fe:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__prologue_saves__+0x10>
   18602:	7c 01       	movw	r14, r24
   18604:	eb 01       	movw	r28, r22
   18606:	d2 2e       	mov	r13, r18
   18608:	c3 2e       	mov	r12, r19
   1860a:	b4 2e       	mov	r11, r20
   1860c:	a5 2e       	mov	r10, r21
   1860e:	fc 01       	movw	r30, r24
   18610:	20 81       	ld	r18, Z
   18612:	31 81       	ldd	r19, Z+1	; 0x01
   18614:	4d 2d       	mov	r20, r13
   18616:	5c 2d       	mov	r21, r12
   18618:	6b 2d       	mov	r22, r11
   1861a:	7a 2d       	mov	r23, r10
   1861c:	82 81       	ldd	r24, Z+2	; 0x02
   1861e:	93 81       	ldd	r25, Z+3	; 0x03
   18620:	57 df       	rcall	.-338    	; 0x184d0 <lif_seek_msg>
   18622:	00 97       	sbiw	r24, 0x00	; 0
   18624:	89 f1       	breq	.+98     	; 0x18688 <lif_write+0x92>
   18626:	f7 01       	movw	r30, r14
   18628:	22 81       	ldd	r18, Z+2	; 0x02
   1862a:	33 81       	ldd	r19, Z+3	; 0x03
   1862c:	a8 01       	movw	r20, r16
   1862e:	61 e0       	ldi	r22, 0x01	; 1
   18630:	70 e0       	ldi	r23, 0x00	; 0
   18632:	ce 01       	movw	r24, r28
   18634:	0e 94 bd 7c 	call	0xf97a	; 0xf97a <fwrite>
   18638:	ec 01       	movw	r28, r24
   1863a:	08 17       	cp	r16, r24
   1863c:	19 07       	cpc	r17, r25
   1863e:	09 f1       	breq	.+66     	; 0x18682 <lif_write+0x8c>
   18640:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18644:	80 ff       	sbrs	r24, 0
   18646:	1f c0       	rjmp	.+62     	; 0x18686 <lif_write+0x90>
   18648:	1f 93       	push	r17
   1864a:	0f 93       	push	r16
   1864c:	df 93       	push	r29
   1864e:	cf 93       	push	r28
   18650:	af 92       	push	r10
   18652:	bf 92       	push	r11
   18654:	cf 92       	push	r12
   18656:	df 92       	push	r13
   18658:	f7 01       	movw	r30, r14
   1865a:	81 81       	ldd	r24, Z+1	; 0x01
   1865c:	8f 93       	push	r24
   1865e:	80 81       	ld	r24, Z
   18660:	8f 93       	push	r24
   18662:	88 ef       	ldi	r24, 0xF8	; 248
   18664:	91 e4       	ldi	r25, 0x41	; 65
   18666:	1f 92       	push	r1
   18668:	9f 93       	push	r25
   1866a:	8f 93       	push	r24
   1866c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18670:	8d b7       	in	r24, 0x3d	; 61
   18672:	9e b7       	in	r25, 0x3e	; 62
   18674:	0d 96       	adiw	r24, 0x0d	; 13
   18676:	0f b6       	in	r0, 0x3f	; 63
   18678:	f8 94       	cli
   1867a:	9e bf       	out	0x3e, r25	; 62
   1867c:	0f be       	out	0x3f, r0	; 63
   1867e:	8d bf       	out	0x3d, r24	; 61
   18680:	02 c0       	rjmp	.+4      	; 0x18686 <lif_write+0x90>
   18682:	c8 01       	movw	r24, r16
   18684:	01 c0       	rjmp	.+2      	; 0x18688 <lif_write+0x92>
   18686:	ce 01       	movw	r24, r28
   18688:	cd b7       	in	r28, 0x3d	; 61
   1868a:	de b7       	in	r29, 0x3e	; 62
   1868c:	ea e0       	ldi	r30, 0x0A	; 10
   1868e:	0c 94 59 e5 	jmp	0x1cab2	; 0x1cab2 <__epilogue_restores__+0x10>

00018692 <lif_chars>:
   18692:	80 32       	cpi	r24, 0x20	; 32
   18694:	91 05       	cpc	r25, r1
   18696:	e1 f0       	breq	.+56     	; 0x186d0 <lif_chars+0x3e>
   18698:	9c 01       	movw	r18, r24
   1869a:	21 56       	subi	r18, 0x61	; 97
   1869c:	31 09       	sbc	r19, r1
   1869e:	2a 31       	cpi	r18, 0x1A	; 26
   186a0:	31 05       	cpc	r19, r1
   186a2:	10 f4       	brcc	.+4      	; 0x186a8 <lif_chars+0x16>
   186a4:	80 97       	sbiw	r24, 0x20	; 32
   186a6:	08 95       	ret
   186a8:	9c 01       	movw	r18, r24
   186aa:	21 54       	subi	r18, 0x41	; 65
   186ac:	31 09       	sbc	r19, r1
   186ae:	2a 31       	cpi	r18, 0x1A	; 26
   186b0:	31 05       	cpc	r19, r1
   186b2:	c8 f0       	brcs	.+50     	; 0x186e6 <lif_chars+0x54>
   186b4:	16 16       	cp	r1, r22
   186b6:	17 06       	cpc	r1, r23
   186b8:	74 f4       	brge	.+28     	; 0x186d6 <lif_chars+0x44>
   186ba:	2f 5e       	subi	r18, 0xEF	; 239
   186bc:	3f 4f       	sbci	r19, 0xFF	; 255
   186be:	2a 30       	cpi	r18, 0x0A	; 10
   186c0:	31 05       	cpc	r19, r1
   186c2:	88 f0       	brcs	.+34     	; 0x186e6 <lif_chars+0x54>
   186c4:	8f 35       	cpi	r24, 0x5F	; 95
   186c6:	91 05       	cpc	r25, r1
   186c8:	49 f0       	breq	.+18     	; 0x186dc <lif_chars+0x4a>
   186ca:	8d 97       	sbiw	r24, 0x2d	; 45
   186cc:	21 f4       	brne	.+8      	; 0x186d6 <lif_chars+0x44>
   186ce:	09 c0       	rjmp	.+18     	; 0x186e2 <lif_chars+0x50>
   186d0:	80 e2       	ldi	r24, 0x20	; 32
   186d2:	90 e0       	ldi	r25, 0x00	; 0
   186d4:	08 95       	ret
   186d6:	80 e0       	ldi	r24, 0x00	; 0
   186d8:	90 e0       	ldi	r25, 0x00	; 0
   186da:	08 95       	ret
   186dc:	8f e5       	ldi	r24, 0x5F	; 95
   186de:	90 e0       	ldi	r25, 0x00	; 0
   186e0:	08 95       	ret
   186e2:	8d e2       	ldi	r24, 0x2D	; 45
   186e4:	90 e0       	ldi	r25, 0x00	; 0
   186e6:	08 95       	ret

000186e8 <lif_B2S>:
   186e8:	a0 e0       	ldi	r26, 0x00	; 0
   186ea:	b0 e0       	ldi	r27, 0x00	; 0
   186ec:	ea e7       	ldi	r30, 0x7A	; 122
   186ee:	f3 ec       	ldi	r31, 0xC3	; 195
   186f0:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__prologue_saves__+0xc>
   186f4:	5c 01       	movw	r10, r24
   186f6:	6b 01       	movw	r12, r22
   186f8:	ea 01       	movw	r28, r20
   186fa:	4c 01       	movw	r8, r24
   186fc:	ee 24       	eor	r14, r14
   186fe:	e3 94       	inc	r14
   18700:	f1 2c       	mov	r15, r1
   18702:	00 e0       	ldi	r16, 0x00	; 0
   18704:	10 e0       	ldi	r17, 0x00	; 0
   18706:	0c 17       	cp	r16, r28
   18708:	1d 07       	cpc	r17, r29
   1870a:	6c f4       	brge	.+26     	; 0x18726 <lif_B2S+0x3e>
   1870c:	f4 01       	movw	r30, r8
   1870e:	81 91       	ld	r24, Z+
   18710:	4f 01       	movw	r8, r30
   18712:	b8 01       	movw	r22, r16
   18714:	90 e0       	ldi	r25, 0x00	; 0
   18716:	bd df       	rcall	.-134    	; 0x18692 <lif_chars>
   18718:	89 2b       	or	r24, r25
   1871a:	11 f4       	brne	.+4      	; 0x18720 <lif_B2S+0x38>
   1871c:	e1 2c       	mov	r14, r1
   1871e:	f1 2c       	mov	r15, r1
   18720:	0f 5f       	subi	r16, 0xFF	; 255
   18722:	1f 4f       	sbci	r17, 0xFF	; 255
   18724:	f0 cf       	rjmp	.-32     	; 0x18706 <lif_B2S+0x1e>
   18726:	d6 01       	movw	r26, r12
   18728:	f5 01       	movw	r30, r10
   1872a:	cf 01       	movw	r24, r30
   1872c:	8a 19       	sub	r24, r10
   1872e:	9b 09       	sbc	r25, r11
   18730:	8c 17       	cp	r24, r28
   18732:	9d 07       	cpc	r25, r29
   18734:	1c f4       	brge	.+6      	; 0x1873c <lif_B2S+0x54>
   18736:	81 91       	ld	r24, Z+
   18738:	8d 93       	st	X+, r24
   1873a:	f7 cf       	rjmp	.-18     	; 0x1872a <lif_B2S+0x42>
   1873c:	d7 ff       	sbrs	r29, 7
   1873e:	02 c0       	rjmp	.+4      	; 0x18744 <lif_B2S+0x5c>
   18740:	c0 e0       	ldi	r28, 0x00	; 0
   18742:	d0 e0       	ldi	r29, 0x00	; 0
   18744:	cc 0d       	add	r28, r12
   18746:	dd 1d       	adc	r29, r13
   18748:	18 82       	st	Y, r1
   1874a:	c6 01       	movw	r24, r12
   1874c:	0e 94 02 32 	call	0x6404	; 0x6404 <trim_tail>
   18750:	c7 01       	movw	r24, r14
   18752:	cd b7       	in	r28, 0x3d	; 61
   18754:	de b7       	in	r29, 0x3e	; 62
   18756:	ec e0       	ldi	r30, 0x0C	; 12
   18758:	0c 94 57 e5 	jmp	0x1caae	; 0x1caae <__epilogue_restores__+0xc>

0001875c <lif_checkname>:
   1875c:	ef 92       	push	r14
   1875e:	ff 92       	push	r15
   18760:	0f 93       	push	r16
   18762:	1f 93       	push	r17
   18764:	cf 93       	push	r28
   18766:	df 93       	push	r29
   18768:	7c 01       	movw	r14, r24
   1876a:	ec 01       	movw	r28, r24
   1876c:	01 e0       	ldi	r16, 0x01	; 1
   1876e:	10 e0       	ldi	r17, 0x00	; 0
   18770:	be 01       	movw	r22, r28
   18772:	6e 19       	sub	r22, r14
   18774:	7f 09       	sbc	r23, r15
   18776:	89 91       	ld	r24, Y+
   18778:	88 23       	and	r24, r24
   1877a:	39 f0       	breq	.+14     	; 0x1878a <lif_checkname+0x2e>
   1877c:	90 e0       	ldi	r25, 0x00	; 0
   1877e:	89 df       	rcall	.-238    	; 0x18692 <lif_chars>
   18780:	89 2b       	or	r24, r25
   18782:	b1 f7       	brne	.-20     	; 0x18770 <lif_checkname+0x14>
   18784:	00 e0       	ldi	r16, 0x00	; 0
   18786:	10 e0       	ldi	r17, 0x00	; 0
   18788:	f3 cf       	rjmp	.-26     	; 0x18770 <lif_checkname+0x14>
   1878a:	c8 01       	movw	r24, r16
   1878c:	cd b7       	in	r28, 0x3d	; 61
   1878e:	de b7       	in	r29, 0x3e	; 62
   18790:	e6 e0       	ldi	r30, 0x06	; 6
   18792:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

00018796 <lif_S2B>:
   18796:	fb 01       	movw	r30, r22
   18798:	dc 01       	movw	r26, r24
   1879a:	20 e0       	ldi	r18, 0x00	; 0
   1879c:	30 e0       	ldi	r19, 0x00	; 0
   1879e:	61 91       	ld	r22, Z+
   187a0:	61 11       	cpse	r22, r1
   187a2:	05 c0       	rjmp	.+10     	; 0x187ae <lif_S2B+0x18>
   187a4:	fc 01       	movw	r30, r24
   187a6:	e2 0f       	add	r30, r18
   187a8:	f3 1f       	adc	r31, r19
   187aa:	60 e2       	ldi	r22, 0x20	; 32
   187ac:	08 c0       	rjmp	.+16     	; 0x187be <lif_S2B+0x28>
   187ae:	24 17       	cp	r18, r20
   187b0:	35 07       	cpc	r19, r21
   187b2:	24 f4       	brge	.+8      	; 0x187bc <lif_S2B+0x26>
   187b4:	6d 93       	st	X+, r22
   187b6:	2f 5f       	subi	r18, 0xFF	; 255
   187b8:	3f 4f       	sbci	r19, 0xFF	; 255
   187ba:	f1 cf       	rjmp	.-30     	; 0x1879e <lif_S2B+0x8>
   187bc:	08 95       	ret
   187be:	9f 01       	movw	r18, r30
   187c0:	28 1b       	sub	r18, r24
   187c2:	39 0b       	sbc	r19, r25
   187c4:	24 17       	cp	r18, r20
   187c6:	35 07       	cpc	r19, r21
   187c8:	14 f4       	brge	.+4      	; 0x187ce <lif_S2B+0x38>
   187ca:	61 93       	st	Z+, r22
   187cc:	f8 cf       	rjmp	.-16     	; 0x187be <lif_S2B+0x28>
   187ce:	08 95       	ret

000187d0 <lif_fixname>:
   187d0:	a0 e0       	ldi	r26, 0x00	; 0
   187d2:	b0 e0       	ldi	r27, 0x00	; 0
   187d4:	ee ee       	ldi	r30, 0xEE	; 238
   187d6:	f3 ec       	ldi	r31, 0xC3	; 195
   187d8:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__prologue_saves__+0x12>
   187dc:	8c 01       	movw	r16, r24
   187de:	cb 01       	movw	r24, r22
   187e0:	7a 01       	movw	r14, r20
   187e2:	0e 94 7f 77 	call	0xeefe	; 0xeefe <basename>
   187e6:	6c 01       	movw	r12, r24
   187e8:	e8 01       	movw	r28, r16
   187ea:	80 e2       	ldi	r24, 0x20	; 32
   187ec:	b8 2e       	mov	r11, r24
   187ee:	be 01       	movw	r22, r28
   187f0:	60 1b       	sub	r22, r16
   187f2:	71 0b       	sbc	r23, r17
   187f4:	f6 01       	movw	r30, r12
   187f6:	81 91       	ld	r24, Z+
   187f8:	6f 01       	movw	r12, r30
   187fa:	81 11       	cpse	r24, r1
   187fc:	02 c0       	rjmp	.+4      	; 0x18802 <lif_fixname+0x32>
   187fe:	20 e2       	ldi	r18, 0x20	; 32
   18800:	0e c0       	rjmp	.+28     	; 0x1881e <lif_fixname+0x4e>
   18802:	1e 14       	cp	r1, r14
   18804:	1f 04       	cpc	r1, r15
   18806:	dc f7       	brge	.-10     	; 0x187fe <lif_fixname+0x2e>
   18808:	8e 32       	cpi	r24, 0x2E	; 46
   1880a:	c9 f3       	breq	.-14     	; 0x187fe <lif_fixname+0x2e>
   1880c:	90 e0       	ldi	r25, 0x00	; 0
   1880e:	41 df       	rcall	.-382    	; 0x18692 <lif_chars>
   18810:	88 23       	and	r24, r24
   18812:	11 f0       	breq	.+4      	; 0x18818 <lif_fixname+0x48>
   18814:	88 83       	st	Y, r24
   18816:	01 c0       	rjmp	.+2      	; 0x1881a <lif_fixname+0x4a>
   18818:	b8 82       	st	Y, r11
   1881a:	21 96       	adiw	r28, 0x01	; 1
   1881c:	e8 cf       	rjmp	.-48     	; 0x187ee <lif_fixname+0x1e>
   1881e:	ce 01       	movw	r24, r28
   18820:	80 1b       	sub	r24, r16
   18822:	91 0b       	sbc	r25, r17
   18824:	8e 15       	cp	r24, r14
   18826:	9f 05       	cpc	r25, r15
   18828:	14 f4       	brge	.+4      	; 0x1882e <lif_fixname+0x5e>
   1882a:	29 93       	st	Y+, r18
   1882c:	f8 cf       	rjmp	.-16     	; 0x1881e <lif_fixname+0x4e>
   1882e:	18 82       	st	Y, r1
   18830:	f8 01       	movw	r30, r16
   18832:	01 90       	ld	r0, Z+
   18834:	00 20       	and	r0, r0
   18836:	e9 f7       	brne	.-6      	; 0x18832 <lif_fixname+0x62>
   18838:	cf 01       	movw	r24, r30
   1883a:	01 97       	sbiw	r24, 0x01	; 1
   1883c:	80 1b       	sub	r24, r16
   1883e:	91 0b       	sbc	r25, r17
   18840:	cd b7       	in	r28, 0x3d	; 61
   18842:	de b7       	in	r29, 0x3e	; 62
   18844:	e9 e0       	ldi	r30, 0x09	; 9
   18846:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <__epilogue_restores__+0x12>

0001884a <lif_vol2str>:
   1884a:	ef 92       	push	r14
   1884c:	ff 92       	push	r15
   1884e:	0f 93       	push	r16
   18850:	1f 93       	push	r17
   18852:	cf 93       	push	r28
   18854:	df 93       	push	r29
   18856:	7c 01       	movw	r14, r24
   18858:	eb 01       	movw	r28, r22
   1885a:	fc 01       	movw	r30, r24
   1885c:	04 a1       	ldd	r16, Z+36	; 0x24
   1885e:	15 a1       	ldd	r17, Z+37	; 0x25
   18860:	20 e0       	ldi	r18, 0x00	; 0
   18862:	30 e0       	ldi	r19, 0x00	; 0
   18864:	42 e0       	ldi	r20, 0x02	; 2
   18866:	50 e0       	ldi	r21, 0x00	; 0
   18868:	60 e0       	ldi	r22, 0x00	; 0
   1886a:	70 e0       	ldi	r23, 0x00	; 0
   1886c:	ce 01       	movw	r24, r28
   1886e:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   18872:	b7 01       	movw	r22, r14
   18874:	6a 5d       	subi	r22, 0xDA	; 218
   18876:	7f 4f       	sbci	r23, 0xFF	; 255
   18878:	46 e0       	ldi	r20, 0x06	; 6
   1887a:	50 e0       	ldi	r21, 0x00	; 0
   1887c:	ce 01       	movw	r24, r28
   1887e:	02 96       	adiw	r24, 0x02	; 2
   18880:	8a df       	rcall	.-236    	; 0x18796 <lif_S2B>
   18882:	f7 01       	movw	r30, r14
   18884:	05 a5       	ldd	r16, Z+45	; 0x2d
   18886:	16 a5       	ldd	r17, Z+46	; 0x2e
   18888:	27 a5       	ldd	r18, Z+47	; 0x2f
   1888a:	30 a9       	ldd	r19, Z+48	; 0x30
   1888c:	44 e0       	ldi	r20, 0x04	; 4
   1888e:	50 e0       	ldi	r21, 0x00	; 0
   18890:	68 e0       	ldi	r22, 0x08	; 8
   18892:	70 e0       	ldi	r23, 0x00	; 0
   18894:	ce 01       	movw	r24, r28
   18896:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   1889a:	f7 01       	movw	r30, r14
   1889c:	01 a9       	ldd	r16, Z+49	; 0x31
   1889e:	12 a9       	ldd	r17, Z+50	; 0x32
   188a0:	20 e0       	ldi	r18, 0x00	; 0
   188a2:	30 e0       	ldi	r19, 0x00	; 0
   188a4:	42 e0       	ldi	r20, 0x02	; 2
   188a6:	50 e0       	ldi	r21, 0x00	; 0
   188a8:	6c e0       	ldi	r22, 0x0C	; 12
   188aa:	70 e0       	ldi	r23, 0x00	; 0
   188ac:	ce 01       	movw	r24, r28
   188ae:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   188b2:	00 e0       	ldi	r16, 0x00	; 0
   188b4:	10 e0       	ldi	r17, 0x00	; 0
   188b6:	98 01       	movw	r18, r16
   188b8:	42 e0       	ldi	r20, 0x02	; 2
   188ba:	50 e0       	ldi	r21, 0x00	; 0
   188bc:	6e e0       	ldi	r22, 0x0E	; 14
   188be:	70 e0       	ldi	r23, 0x00	; 0
   188c0:	ce 01       	movw	r24, r28
   188c2:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   188c6:	f7 01       	movw	r30, r14
   188c8:	05 a9       	ldd	r16, Z+53	; 0x35
   188ca:	16 a9       	ldd	r17, Z+54	; 0x36
   188cc:	27 a9       	ldd	r18, Z+55	; 0x37
   188ce:	30 ad       	ldd	r19, Z+56	; 0x38
   188d0:	44 e0       	ldi	r20, 0x04	; 4
   188d2:	50 e0       	ldi	r21, 0x00	; 0
   188d4:	60 e1       	ldi	r22, 0x10	; 16
   188d6:	70 e0       	ldi	r23, 0x00	; 0
   188d8:	ce 01       	movw	r24, r28
   188da:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   188de:	f7 01       	movw	r30, r14
   188e0:	01 ad       	ldd	r16, Z+57	; 0x39
   188e2:	12 ad       	ldd	r17, Z+58	; 0x3a
   188e4:	20 e0       	ldi	r18, 0x00	; 0
   188e6:	30 e0       	ldi	r19, 0x00	; 0
   188e8:	42 e0       	ldi	r20, 0x02	; 2
   188ea:	50 e0       	ldi	r21, 0x00	; 0
   188ec:	64 e1       	ldi	r22, 0x14	; 20
   188ee:	70 e0       	ldi	r23, 0x00	; 0
   188f0:	ce 01       	movw	r24, r28
   188f2:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   188f6:	00 e0       	ldi	r16, 0x00	; 0
   188f8:	10 e0       	ldi	r17, 0x00	; 0
   188fa:	98 01       	movw	r18, r16
   188fc:	42 e0       	ldi	r20, 0x02	; 2
   188fe:	50 e0       	ldi	r21, 0x00	; 0
   18900:	66 e1       	ldi	r22, 0x16	; 22
   18902:	70 e0       	ldi	r23, 0x00	; 0
   18904:	ce 01       	movw	r24, r28
   18906:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   1890a:	f7 01       	movw	r30, r14
   1890c:	fd 96       	adiw	r30, 0x3d	; 61
   1890e:	00 81       	ld	r16, Z
   18910:	11 81       	ldd	r17, Z+1	; 0x01
   18912:	22 81       	ldd	r18, Z+2	; 0x02
   18914:	33 81       	ldd	r19, Z+3	; 0x03
   18916:	44 e0       	ldi	r20, 0x04	; 4
   18918:	50 e0       	ldi	r21, 0x00	; 0
   1891a:	68 e1       	ldi	r22, 0x18	; 24
   1891c:	70 e0       	ldi	r23, 0x00	; 0
   1891e:	ce 01       	movw	r24, r28
   18920:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   18924:	f7 01       	movw	r30, r14
   18926:	ef 5b       	subi	r30, 0xBF	; 191
   18928:	ff 4f       	sbci	r31, 0xFF	; 255
   1892a:	00 81       	ld	r16, Z
   1892c:	11 81       	ldd	r17, Z+1	; 0x01
   1892e:	22 81       	ldd	r18, Z+2	; 0x02
   18930:	33 81       	ldd	r19, Z+3	; 0x03
   18932:	44 e0       	ldi	r20, 0x04	; 4
   18934:	50 e0       	ldi	r21, 0x00	; 0
   18936:	6c e1       	ldi	r22, 0x1C	; 28
   18938:	70 e0       	ldi	r23, 0x00	; 0
   1893a:	ce 01       	movw	r24, r28
   1893c:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   18940:	f7 01       	movw	r30, r14
   18942:	eb 5b       	subi	r30, 0xBB	; 187
   18944:	ff 4f       	sbci	r31, 0xFF	; 255
   18946:	00 81       	ld	r16, Z
   18948:	11 81       	ldd	r17, Z+1	; 0x01
   1894a:	22 81       	ldd	r18, Z+2	; 0x02
   1894c:	33 81       	ldd	r19, Z+3	; 0x03
   1894e:	44 e0       	ldi	r20, 0x04	; 4
   18950:	50 e0       	ldi	r21, 0x00	; 0
   18952:	60 e2       	ldi	r22, 0x20	; 32
   18954:	70 e0       	ldi	r23, 0x00	; 0
   18956:	ce 01       	movw	r24, r28
   18958:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   1895c:	de 01       	movw	r26, r28
   1895e:	94 96       	adiw	r26, 0x24	; 36
   18960:	f7 01       	movw	r30, r14
   18962:	e7 5b       	subi	r30, 0xB7	; 183
   18964:	ff 4f       	sbci	r31, 0xFF	; 255
   18966:	86 e0       	ldi	r24, 0x06	; 6
   18968:	01 90       	ld	r0, Z+
   1896a:	0d 92       	st	X+, r0
   1896c:	8a 95       	dec	r24
   1896e:	e1 f7       	brne	.-8      	; 0x18968 <lif_vol2str+0x11e>
   18970:	cd b7       	in	r28, 0x3d	; 61
   18972:	de b7       	in	r29, 0x3e	; 62
   18974:	e6 e0       	ldi	r30, 0x06	; 6
   18976:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

0001897a <lif_str2vol>:
   1897a:	0f 93       	push	r16
   1897c:	1f 93       	push	r17
   1897e:	cf 93       	push	r28
   18980:	df 93       	push	r29
   18982:	8c 01       	movw	r16, r24
   18984:	eb 01       	movw	r28, r22
   18986:	42 e0       	ldi	r20, 0x02	; 2
   18988:	50 e0       	ldi	r21, 0x00	; 0
   1898a:	60 e0       	ldi	r22, 0x00	; 0
   1898c:	70 e0       	ldi	r23, 0x00	; 0
   1898e:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   18992:	7d a3       	std	Y+37, r23	; 0x25
   18994:	6c a3       	std	Y+36, r22	; 0x24
   18996:	be 01       	movw	r22, r28
   18998:	6a 5d       	subi	r22, 0xDA	; 218
   1899a:	7f 4f       	sbci	r23, 0xFF	; 255
   1899c:	46 e0       	ldi	r20, 0x06	; 6
   1899e:	50 e0       	ldi	r21, 0x00	; 0
   189a0:	c8 01       	movw	r24, r16
   189a2:	02 96       	adiw	r24, 0x02	; 2
   189a4:	a1 de       	rcall	.-702    	; 0x186e8 <lif_B2S>
   189a6:	44 e0       	ldi	r20, 0x04	; 4
   189a8:	50 e0       	ldi	r21, 0x00	; 0
   189aa:	68 e0       	ldi	r22, 0x08	; 8
   189ac:	70 e0       	ldi	r23, 0x00	; 0
   189ae:	c8 01       	movw	r24, r16
   189b0:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   189b4:	6d a7       	std	Y+45, r22	; 0x2d
   189b6:	7e a7       	std	Y+46, r23	; 0x2e
   189b8:	8f a7       	std	Y+47, r24	; 0x2f
   189ba:	98 ab       	std	Y+48, r25	; 0x30
   189bc:	42 e0       	ldi	r20, 0x02	; 2
   189be:	50 e0       	ldi	r21, 0x00	; 0
   189c0:	6c e0       	ldi	r22, 0x0C	; 12
   189c2:	70 e0       	ldi	r23, 0x00	; 0
   189c4:	c8 01       	movw	r24, r16
   189c6:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   189ca:	7a ab       	std	Y+50, r23	; 0x32
   189cc:	69 ab       	std	Y+49, r22	; 0x31
   189ce:	42 e0       	ldi	r20, 0x02	; 2
   189d0:	50 e0       	ldi	r21, 0x00	; 0
   189d2:	6e e0       	ldi	r22, 0x0E	; 14
   189d4:	70 e0       	ldi	r23, 0x00	; 0
   189d6:	c8 01       	movw	r24, r16
   189d8:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   189dc:	7c ab       	std	Y+52, r23	; 0x34
   189de:	6b ab       	std	Y+51, r22	; 0x33
   189e0:	44 e0       	ldi	r20, 0x04	; 4
   189e2:	50 e0       	ldi	r21, 0x00	; 0
   189e4:	60 e1       	ldi	r22, 0x10	; 16
   189e6:	70 e0       	ldi	r23, 0x00	; 0
   189e8:	c8 01       	movw	r24, r16
   189ea:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   189ee:	6d ab       	std	Y+53, r22	; 0x35
   189f0:	7e ab       	std	Y+54, r23	; 0x36
   189f2:	8f ab       	std	Y+55, r24	; 0x37
   189f4:	98 af       	std	Y+56, r25	; 0x38
   189f6:	42 e0       	ldi	r20, 0x02	; 2
   189f8:	50 e0       	ldi	r21, 0x00	; 0
   189fa:	64 e1       	ldi	r22, 0x14	; 20
   189fc:	70 e0       	ldi	r23, 0x00	; 0
   189fe:	c8 01       	movw	r24, r16
   18a00:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   18a04:	7a af       	std	Y+58, r23	; 0x3a
   18a06:	69 af       	std	Y+57, r22	; 0x39
   18a08:	42 e0       	ldi	r20, 0x02	; 2
   18a0a:	50 e0       	ldi	r21, 0x00	; 0
   18a0c:	66 e1       	ldi	r22, 0x16	; 22
   18a0e:	70 e0       	ldi	r23, 0x00	; 0
   18a10:	c8 01       	movw	r24, r16
   18a12:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   18a16:	7c af       	std	Y+60, r23	; 0x3c
   18a18:	6b af       	std	Y+59, r22	; 0x3b
   18a1a:	44 e0       	ldi	r20, 0x04	; 4
   18a1c:	50 e0       	ldi	r21, 0x00	; 0
   18a1e:	68 e1       	ldi	r22, 0x18	; 24
   18a20:	70 e0       	ldi	r23, 0x00	; 0
   18a22:	c8 01       	movw	r24, r16
   18a24:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   18a28:	fe 01       	movw	r30, r28
   18a2a:	fd 96       	adiw	r30, 0x3d	; 61
   18a2c:	60 83       	st	Z, r22
   18a2e:	71 83       	std	Z+1, r23	; 0x01
   18a30:	82 83       	std	Z+2, r24	; 0x02
   18a32:	93 83       	std	Z+3, r25	; 0x03
   18a34:	44 e0       	ldi	r20, 0x04	; 4
   18a36:	50 e0       	ldi	r21, 0x00	; 0
   18a38:	6c e1       	ldi	r22, 0x1C	; 28
   18a3a:	70 e0       	ldi	r23, 0x00	; 0
   18a3c:	c8 01       	movw	r24, r16
   18a3e:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   18a42:	fe 01       	movw	r30, r28
   18a44:	ef 5b       	subi	r30, 0xBF	; 191
   18a46:	ff 4f       	sbci	r31, 0xFF	; 255
   18a48:	60 83       	st	Z, r22
   18a4a:	71 83       	std	Z+1, r23	; 0x01
   18a4c:	82 83       	std	Z+2, r24	; 0x02
   18a4e:	93 83       	std	Z+3, r25	; 0x03
   18a50:	44 e0       	ldi	r20, 0x04	; 4
   18a52:	50 e0       	ldi	r21, 0x00	; 0
   18a54:	60 e2       	ldi	r22, 0x20	; 32
   18a56:	70 e0       	ldi	r23, 0x00	; 0
   18a58:	c8 01       	movw	r24, r16
   18a5a:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   18a5e:	fe 01       	movw	r30, r28
   18a60:	eb 5b       	subi	r30, 0xBB	; 187
   18a62:	ff 4f       	sbci	r31, 0xFF	; 255
   18a64:	60 83       	st	Z, r22
   18a66:	71 83       	std	Z+1, r23	; 0x01
   18a68:	82 83       	std	Z+2, r24	; 0x02
   18a6a:	93 83       	std	Z+3, r25	; 0x03
   18a6c:	de 01       	movw	r26, r28
   18a6e:	a7 5b       	subi	r26, 0xB7	; 183
   18a70:	bf 4f       	sbci	r27, 0xFF	; 255
   18a72:	f8 01       	movw	r30, r16
   18a74:	b4 96       	adiw	r30, 0x24	; 36
   18a76:	86 e0       	ldi	r24, 0x06	; 6
   18a78:	01 90       	ld	r0, Z+
   18a7a:	0d 92       	st	X+, r0
   18a7c:	8a 95       	dec	r24
   18a7e:	e1 f7       	brne	.-8      	; 0x18a78 <lif_str2vol+0xfe>
   18a80:	df 91       	pop	r29
   18a82:	cf 91       	pop	r28
   18a84:	1f 91       	pop	r17
   18a86:	0f 91       	pop	r16
   18a88:	08 95       	ret

00018a8a <lif_dir2str>:
   18a8a:	ef 92       	push	r14
   18a8c:	ff 92       	push	r15
   18a8e:	0f 93       	push	r16
   18a90:	1f 93       	push	r17
   18a92:	cf 93       	push	r28
   18a94:	df 93       	push	r29
   18a96:	ec 01       	movw	r28, r24
   18a98:	7b 01       	movw	r14, r22
   18a9a:	bc 01       	movw	r22, r24
   18a9c:	61 5b       	subi	r22, 0xB1	; 177
   18a9e:	7f 4f       	sbci	r23, 0xFF	; 255
   18aa0:	4a e0       	ldi	r20, 0x0A	; 10
   18aa2:	50 e0       	ldi	r21, 0x00	; 0
   18aa4:	c7 01       	movw	r24, r14
   18aa6:	77 de       	rcall	.-786    	; 0x18796 <lif_S2B>
   18aa8:	fe 01       	movw	r30, r28
   18aaa:	e6 5a       	subi	r30, 0xA6	; 166
   18aac:	ff 4f       	sbci	r31, 0xFF	; 255
   18aae:	00 81       	ld	r16, Z
   18ab0:	11 81       	ldd	r17, Z+1	; 0x01
   18ab2:	20 e0       	ldi	r18, 0x00	; 0
   18ab4:	30 e0       	ldi	r19, 0x00	; 0
   18ab6:	42 e0       	ldi	r20, 0x02	; 2
   18ab8:	50 e0       	ldi	r21, 0x00	; 0
   18aba:	6a e0       	ldi	r22, 0x0A	; 10
   18abc:	70 e0       	ldi	r23, 0x00	; 0
   18abe:	c7 01       	movw	r24, r14
   18ac0:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   18ac4:	fe 01       	movw	r30, r28
   18ac6:	e4 5a       	subi	r30, 0xA4	; 164
   18ac8:	ff 4f       	sbci	r31, 0xFF	; 255
   18aca:	00 81       	ld	r16, Z
   18acc:	11 81       	ldd	r17, Z+1	; 0x01
   18ace:	22 81       	ldd	r18, Z+2	; 0x02
   18ad0:	33 81       	ldd	r19, Z+3	; 0x03
   18ad2:	44 e0       	ldi	r20, 0x04	; 4
   18ad4:	50 e0       	ldi	r21, 0x00	; 0
   18ad6:	6c e0       	ldi	r22, 0x0C	; 12
   18ad8:	70 e0       	ldi	r23, 0x00	; 0
   18ada:	c7 01       	movw	r24, r14
   18adc:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   18ae0:	fe 01       	movw	r30, r28
   18ae2:	e0 5a       	subi	r30, 0xA0	; 160
   18ae4:	ff 4f       	sbci	r31, 0xFF	; 255
   18ae6:	00 81       	ld	r16, Z
   18ae8:	11 81       	ldd	r17, Z+1	; 0x01
   18aea:	22 81       	ldd	r18, Z+2	; 0x02
   18aec:	33 81       	ldd	r19, Z+3	; 0x03
   18aee:	44 e0       	ldi	r20, 0x04	; 4
   18af0:	50 e0       	ldi	r21, 0x00	; 0
   18af2:	60 e1       	ldi	r22, 0x10	; 16
   18af4:	70 e0       	ldi	r23, 0x00	; 0
   18af6:	c7 01       	movw	r24, r14
   18af8:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   18afc:	d7 01       	movw	r26, r14
   18afe:	54 96       	adiw	r26, 0x14	; 20
   18b00:	fe 01       	movw	r30, r28
   18b02:	ec 59       	subi	r30, 0x9C	; 156
   18b04:	ff 4f       	sbci	r31, 0xFF	; 255
   18b06:	86 e0       	ldi	r24, 0x06	; 6
   18b08:	01 90       	ld	r0, Z+
   18b0a:	0d 92       	st	X+, r0
   18b0c:	8a 95       	dec	r24
   18b0e:	e1 f7       	brne	.-8      	; 0x18b08 <lif_dir2str+0x7e>
   18b10:	fe 01       	movw	r30, r28
   18b12:	e6 59       	subi	r30, 0x96	; 150
   18b14:	ff 4f       	sbci	r31, 0xFF	; 255
   18b16:	00 81       	ld	r16, Z
   18b18:	11 81       	ldd	r17, Z+1	; 0x01
   18b1a:	20 e0       	ldi	r18, 0x00	; 0
   18b1c:	30 e0       	ldi	r19, 0x00	; 0
   18b1e:	42 e0       	ldi	r20, 0x02	; 2
   18b20:	50 e0       	ldi	r21, 0x00	; 0
   18b22:	6a e1       	ldi	r22, 0x1A	; 26
   18b24:	70 e0       	ldi	r23, 0x00	; 0
   18b26:	c7 01       	movw	r24, r14
   18b28:	0e 94 db 91 	call	0x123b6	; 0x123b6 <V2B_MSB>
   18b2c:	fe 01       	movw	r30, r28
   18b2e:	e4 59       	subi	r30, 0x94	; 148
   18b30:	ff 4f       	sbci	r31, 0xFF	; 255
   18b32:	00 81       	ld	r16, Z
   18b34:	11 81       	ldd	r17, Z+1	; 0x01
   18b36:	20 e0       	ldi	r18, 0x00	; 0
   18b38:	30 e0       	ldi	r19, 0x00	; 0
   18b3a:	42 e0       	ldi	r20, 0x02	; 2
   18b3c:	50 e0       	ldi	r21, 0x00	; 0
   18b3e:	6c e1       	ldi	r22, 0x1C	; 28
   18b40:	70 e0       	ldi	r23, 0x00	; 0
   18b42:	c7 01       	movw	r24, r14
   18b44:	0e 94 ef 91 	call	0x123de	; 0x123de <V2B_LSB>
   18b48:	c2 59       	subi	r28, 0x92	; 146
   18b4a:	df 4f       	sbci	r29, 0xFF	; 255
   18b4c:	08 81       	ld	r16, Y
   18b4e:	19 81       	ldd	r17, Y+1	; 0x01
   18b50:	20 e0       	ldi	r18, 0x00	; 0
   18b52:	30 e0       	ldi	r19, 0x00	; 0
   18b54:	42 e0       	ldi	r20, 0x02	; 2
   18b56:	50 e0       	ldi	r21, 0x00	; 0
   18b58:	6e e1       	ldi	r22, 0x1E	; 30
   18b5a:	70 e0       	ldi	r23, 0x00	; 0
   18b5c:	c7 01       	movw	r24, r14
   18b5e:	0e 94 ef 91 	call	0x123de	; 0x123de <V2B_LSB>
   18b62:	cd b7       	in	r28, 0x3d	; 61
   18b64:	de b7       	in	r29, 0x3e	; 62
   18b66:	e6 e0       	ldi	r30, 0x06	; 6
   18b68:	0c 94 5d e5 	jmp	0x1caba	; 0x1caba <__epilogue_restores__+0x18>

00018b6c <lif_str2dir>:
   18b6c:	0f 93       	push	r16
   18b6e:	1f 93       	push	r17
   18b70:	cf 93       	push	r28
   18b72:	df 93       	push	r29
   18b74:	8c 01       	movw	r16, r24
   18b76:	eb 01       	movw	r28, r22
   18b78:	61 5b       	subi	r22, 0xB1	; 177
   18b7a:	7f 4f       	sbci	r23, 0xFF	; 255
   18b7c:	4a e0       	ldi	r20, 0x0A	; 10
   18b7e:	50 e0       	ldi	r21, 0x00	; 0
   18b80:	b3 dd       	rcall	.-1178   	; 0x186e8 <lif_B2S>
   18b82:	42 e0       	ldi	r20, 0x02	; 2
   18b84:	50 e0       	ldi	r21, 0x00	; 0
   18b86:	6a e0       	ldi	r22, 0x0A	; 10
   18b88:	70 e0       	ldi	r23, 0x00	; 0
   18b8a:	c8 01       	movw	r24, r16
   18b8c:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   18b90:	fe 01       	movw	r30, r28
   18b92:	e6 5a       	subi	r30, 0xA6	; 166
   18b94:	ff 4f       	sbci	r31, 0xFF	; 255
   18b96:	71 83       	std	Z+1, r23	; 0x01
   18b98:	60 83       	st	Z, r22
   18b9a:	44 e0       	ldi	r20, 0x04	; 4
   18b9c:	50 e0       	ldi	r21, 0x00	; 0
   18b9e:	6c e0       	ldi	r22, 0x0C	; 12
   18ba0:	70 e0       	ldi	r23, 0x00	; 0
   18ba2:	c8 01       	movw	r24, r16
   18ba4:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   18ba8:	fe 01       	movw	r30, r28
   18baa:	e4 5a       	subi	r30, 0xA4	; 164
   18bac:	ff 4f       	sbci	r31, 0xFF	; 255
   18bae:	60 83       	st	Z, r22
   18bb0:	71 83       	std	Z+1, r23	; 0x01
   18bb2:	82 83       	std	Z+2, r24	; 0x02
   18bb4:	93 83       	std	Z+3, r25	; 0x03
   18bb6:	44 e0       	ldi	r20, 0x04	; 4
   18bb8:	50 e0       	ldi	r21, 0x00	; 0
   18bba:	60 e1       	ldi	r22, 0x10	; 16
   18bbc:	70 e0       	ldi	r23, 0x00	; 0
   18bbe:	c8 01       	movw	r24, r16
   18bc0:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   18bc4:	fe 01       	movw	r30, r28
   18bc6:	e0 5a       	subi	r30, 0xA0	; 160
   18bc8:	ff 4f       	sbci	r31, 0xFF	; 255
   18bca:	60 83       	st	Z, r22
   18bcc:	71 83       	std	Z+1, r23	; 0x01
   18bce:	82 83       	std	Z+2, r24	; 0x02
   18bd0:	93 83       	std	Z+3, r25	; 0x03
   18bd2:	de 01       	movw	r26, r28
   18bd4:	ac 59       	subi	r26, 0x9C	; 156
   18bd6:	bf 4f       	sbci	r27, 0xFF	; 255
   18bd8:	f8 01       	movw	r30, r16
   18bda:	74 96       	adiw	r30, 0x14	; 20
   18bdc:	86 e0       	ldi	r24, 0x06	; 6
   18bde:	01 90       	ld	r0, Z+
   18be0:	0d 92       	st	X+, r0
   18be2:	8a 95       	dec	r24
   18be4:	e1 f7       	brne	.-8      	; 0x18bde <lif_str2dir+0x72>
   18be6:	42 e0       	ldi	r20, 0x02	; 2
   18be8:	50 e0       	ldi	r21, 0x00	; 0
   18bea:	6a e1       	ldi	r22, 0x1A	; 26
   18bec:	70 e0       	ldi	r23, 0x00	; 0
   18bee:	c8 01       	movw	r24, r16
   18bf0:	0e 94 04 92 	call	0x12408	; 0x12408 <B2V_MSB>
   18bf4:	fe 01       	movw	r30, r28
   18bf6:	e6 59       	subi	r30, 0x96	; 150
   18bf8:	ff 4f       	sbci	r31, 0xFF	; 255
   18bfa:	71 83       	std	Z+1, r23	; 0x01
   18bfc:	60 83       	st	Z, r22
   18bfe:	42 e0       	ldi	r20, 0x02	; 2
   18c00:	50 e0       	ldi	r21, 0x00	; 0
   18c02:	6c e1       	ldi	r22, 0x1C	; 28
   18c04:	70 e0       	ldi	r23, 0x00	; 0
   18c06:	c8 01       	movw	r24, r16
   18c08:	0e 94 23 92 	call	0x12446	; 0x12446 <B2V_LSB>
   18c0c:	fe 01       	movw	r30, r28
   18c0e:	e4 59       	subi	r30, 0x94	; 148
   18c10:	ff 4f       	sbci	r31, 0xFF	; 255
   18c12:	71 83       	std	Z+1, r23	; 0x01
   18c14:	60 83       	st	Z, r22
   18c16:	42 e0       	ldi	r20, 0x02	; 2
   18c18:	50 e0       	ldi	r21, 0x00	; 0
   18c1a:	6e e1       	ldi	r22, 0x1E	; 30
   18c1c:	70 e0       	ldi	r23, 0x00	; 0
   18c1e:	c8 01       	movw	r24, r16
   18c20:	0e 94 23 92 	call	0x12446	; 0x12446 <B2V_LSB>
   18c24:	c2 59       	subi	r28, 0x92	; 146
   18c26:	df 4f       	sbci	r29, 0xFF	; 255
   18c28:	79 83       	std	Y+1, r23	; 0x01
   18c2a:	68 83       	st	Y, r22
   18c2c:	df 91       	pop	r29
   18c2e:	cf 91       	pop	r28
   18c30:	1f 91       	pop	r17
   18c32:	0f 91       	pop	r16
   18c34:	08 95       	ret

00018c36 <lif_BIN2BCD>:
   18c36:	6a e0       	ldi	r22, 0x0A	; 10
   18c38:	0e 94 80 e4 	call	0x1c900	; 0x1c900 <__udivmodqi4>
   18c3c:	82 95       	swap	r24
   18c3e:	80 7f       	andi	r24, 0xF0	; 240
   18c40:	89 2b       	or	r24, r25
   18c42:	08 95       	ret

00018c44 <lif_BCD2BIN>:
   18c44:	28 2f       	mov	r18, r24
   18c46:	22 95       	swap	r18
   18c48:	2f 70       	andi	r18, 0x0F	; 15
   18c4a:	8f 70       	andi	r24, 0x0F	; 15
   18c4c:	90 e0       	ldi	r25, 0x00	; 0
   18c4e:	3a e0       	ldi	r19, 0x0A	; 10
   18c50:	23 9f       	mul	r18, r19
   18c52:	80 0d       	add	r24, r0
   18c54:	91 1d       	adc	r25, r1
   18c56:	11 24       	eor	r1, r1
   18c58:	08 95       	ret

00018c5a <lif_time2lifbcd>:
   18c5a:	aa e1       	ldi	r26, 0x1A	; 26
   18c5c:	b0 e0       	ldi	r27, 0x00	; 0
   18c5e:	e3 e3       	ldi	r30, 0x33	; 51
   18c60:	f6 ec       	ldi	r31, 0xC6	; 198
   18c62:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__prologue_saves__+0x1c>
   18c66:	8b 01       	movw	r16, r22
   18c68:	9c 01       	movw	r18, r24
   18c6a:	6f 8b       	std	Y+23, r22	; 0x17
   18c6c:	78 8f       	std	Y+24, r23	; 0x18
   18c6e:	89 8f       	std	Y+25, r24	; 0x19
   18c70:	9a 8f       	std	Y+26, r25	; 0x1a
   18c72:	67 2b       	or	r22, r23
   18c74:	68 2b       	or	r22, r24
   18c76:	69 2b       	or	r22, r25
   18c78:	41 f4       	brne	.+16     	; 0x18c8a <lif_time2lifbcd+0x30>
   18c7a:	fa 01       	movw	r30, r20
   18c7c:	ca 01       	movw	r24, r20
   18c7e:	06 96       	adiw	r24, 0x06	; 6
   18c80:	11 92       	st	Z+, r1
   18c82:	e8 17       	cp	r30, r24
   18c84:	f9 07       	cpc	r31, r25
   18c86:	e1 f7       	brne	.-8      	; 0x18c80 <lif_time2lifbcd+0x26>
   18c88:	26 c0       	rjmp	.+76     	; 0x18cd6 <lif_time2lifbcd+0x7c>
   18c8a:	8a 01       	movw	r16, r20
   18c8c:	be 01       	movw	r22, r28
   18c8e:	6f 5f       	subi	r22, 0xFF	; 255
   18c90:	7f 4f       	sbci	r23, 0xFF	; 255
   18c92:	ce 01       	movw	r24, r28
   18c94:	47 96       	adiw	r24, 0x17	; 23
   18c96:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <gmtime_r>
   18c9a:	8b 85       	ldd	r24, Y+11	; 0x0b
   18c9c:	9c 85       	ldd	r25, Y+12	; 0x0c
   18c9e:	64 e6       	ldi	r22, 0x64	; 100
   18ca0:	70 e0       	ldi	r23, 0x00	; 0
   18ca2:	0e 94 a0 e4 	call	0x1c940	; 0x1c940 <__divmodhi4>
   18ca6:	c7 df       	rcall	.-114    	; 0x18c36 <lif_BIN2BCD>
   18ca8:	f8 01       	movw	r30, r16
   18caa:	80 83       	st	Z, r24
   18cac:	89 85       	ldd	r24, Y+9	; 0x09
   18cae:	8f 5f       	subi	r24, 0xFF	; 255
   18cb0:	c2 df       	rcall	.-124    	; 0x18c36 <lif_BIN2BCD>
   18cb2:	f8 01       	movw	r30, r16
   18cb4:	81 83       	std	Z+1, r24	; 0x01
   18cb6:	8f 81       	ldd	r24, Y+7	; 0x07
   18cb8:	be df       	rcall	.-132    	; 0x18c36 <lif_BIN2BCD>
   18cba:	f8 01       	movw	r30, r16
   18cbc:	82 83       	std	Z+2, r24	; 0x02
   18cbe:	8d 81       	ldd	r24, Y+5	; 0x05
   18cc0:	ba df       	rcall	.-140    	; 0x18c36 <lif_BIN2BCD>
   18cc2:	f8 01       	movw	r30, r16
   18cc4:	83 83       	std	Z+3, r24	; 0x03
   18cc6:	8b 81       	ldd	r24, Y+3	; 0x03
   18cc8:	b6 df       	rcall	.-148    	; 0x18c36 <lif_BIN2BCD>
   18cca:	f8 01       	movw	r30, r16
   18ccc:	84 83       	std	Z+4, r24	; 0x04
   18cce:	89 81       	ldd	r24, Y+1	; 0x01
   18cd0:	b2 df       	rcall	.-156    	; 0x18c36 <lif_BIN2BCD>
   18cd2:	f8 01       	movw	r30, r16
   18cd4:	85 83       	std	Z+5, r24	; 0x05
   18cd6:	6a 96       	adiw	r28, 0x1a	; 26
   18cd8:	e4 e0       	ldi	r30, 0x04	; 4
   18cda:	0c 94 5f e5 	jmp	0x1cabe	; 0x1cabe <__epilogue_restores__+0x1c>

00018cde <lif_lifbcd2time>:
   18cde:	a6 e1       	ldi	r26, 0x16	; 22
   18ce0:	b0 e0       	ldi	r27, 0x00	; 0
   18ce2:	e5 e7       	ldi	r30, 0x75	; 117
   18ce4:	f6 ec       	ldi	r31, 0xC6	; 198
   18ce6:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__prologue_saves__+0x10>
   18cea:	8c 01       	movw	r16, r24
   18cec:	7c 01       	movw	r14, r24
   18cee:	5c 01       	movw	r10, r24
   18cf0:	26 e0       	ldi	r18, 0x06	; 6
   18cf2:	a2 0e       	add	r10, r18
   18cf4:	b1 1c       	adc	r11, r1
   18cf6:	cc 24       	eor	r12, r12
   18cf8:	c3 94       	inc	r12
   18cfa:	d1 2c       	mov	r13, r1
   18cfc:	f7 01       	movw	r30, r14
   18cfe:	81 91       	ld	r24, Z+
   18d00:	7f 01       	movw	r14, r30
   18d02:	a0 df       	rcall	.-192    	; 0x18c44 <lif_BCD2BIN>
   18d04:	89 2b       	or	r24, r25
   18d06:	11 f0       	breq	.+4      	; 0x18d0c <lif_lifbcd2time+0x2e>
   18d08:	c1 2c       	mov	r12, r1
   18d0a:	d1 2c       	mov	r13, r1
   18d0c:	ea 14       	cp	r14, r10
   18d0e:	fb 04       	cpc	r15, r11
   18d10:	a9 f7       	brne	.-22     	; 0x18cfc <lif_lifbcd2time+0x1e>
   18d12:	c1 14       	cp	r12, r1
   18d14:	d1 04       	cpc	r13, r1
   18d16:	61 f5       	brne	.+88     	; 0x18d70 <lif_lifbcd2time+0x92>
   18d18:	f8 01       	movw	r30, r16
   18d1a:	80 81       	ld	r24, Z
   18d1c:	93 df       	rcall	.-218    	; 0x18c44 <lif_BCD2BIN>
   18d1e:	7c 01       	movw	r14, r24
   18d20:	f8 01       	movw	r30, r16
   18d22:	81 81       	ldd	r24, Z+1	; 0x01
   18d24:	8f df       	rcall	.-226    	; 0x18c44 <lif_BCD2BIN>
   18d26:	01 97       	sbiw	r24, 0x01	; 1
   18d28:	f6 e4       	ldi	r31, 0x46	; 70
   18d2a:	ef 16       	cp	r14, r31
   18d2c:	f1 04       	cpc	r15, r1
   18d2e:	1c f4       	brge	.+6      	; 0x18d36 <lif_lifbcd2time+0x58>
   18d30:	24 e6       	ldi	r18, 0x64	; 100
   18d32:	e2 0e       	add	r14, r18
   18d34:	f1 1c       	adc	r15, r1
   18d36:	fc 86       	std	Y+12, r15	; 0x0c
   18d38:	eb 86       	std	Y+11, r14	; 0x0b
   18d3a:	9a 87       	std	Y+10, r25	; 0x0a
   18d3c:	89 87       	std	Y+9, r24	; 0x09
   18d3e:	f8 01       	movw	r30, r16
   18d40:	82 81       	ldd	r24, Z+2	; 0x02
   18d42:	80 df       	rcall	.-256    	; 0x18c44 <lif_BCD2BIN>
   18d44:	98 87       	std	Y+8, r25	; 0x08
   18d46:	8f 83       	std	Y+7, r24	; 0x07
   18d48:	f8 01       	movw	r30, r16
   18d4a:	83 81       	ldd	r24, Z+3	; 0x03
   18d4c:	7b df       	rcall	.-266    	; 0x18c44 <lif_BCD2BIN>
   18d4e:	9e 83       	std	Y+6, r25	; 0x06
   18d50:	8d 83       	std	Y+5, r24	; 0x05
   18d52:	f8 01       	movw	r30, r16
   18d54:	84 81       	ldd	r24, Z+4	; 0x04
   18d56:	76 df       	rcall	.-276    	; 0x18c44 <lif_BCD2BIN>
   18d58:	9c 83       	std	Y+4, r25	; 0x04
   18d5a:	8b 83       	std	Y+3, r24	; 0x03
   18d5c:	f8 01       	movw	r30, r16
   18d5e:	85 81       	ldd	r24, Z+5	; 0x05
   18d60:	71 df       	rcall	.-286    	; 0x18c44 <lif_BCD2BIN>
   18d62:	9a 83       	std	Y+2, r25	; 0x02
   18d64:	89 83       	std	Y+1, r24	; 0x01
   18d66:	ce 01       	movw	r24, r28
   18d68:	01 96       	adiw	r24, 0x01	; 1
   18d6a:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <timegm>
   18d6e:	03 c0       	rjmp	.+6      	; 0x18d76 <lif_lifbcd2time+0x98>
   18d70:	60 e0       	ldi	r22, 0x00	; 0
   18d72:	70 e0       	ldi	r23, 0x00	; 0
   18d74:	cb 01       	movw	r24, r22
   18d76:	66 96       	adiw	r28, 0x16	; 22
   18d78:	ea e0       	ldi	r30, 0x0A	; 10
   18d7a:	0c 94 59 e5 	jmp	0x1cab2	; 0x1cab2 <__epilogue_restores__+0x10>

00018d7e <lif_ctime_gmt>:
   18d7e:	a6 e1       	ldi	r26, 0x16	; 22
   18d80:	b0 e0       	ldi	r27, 0x00	; 0
   18d82:	e5 ec       	ldi	r30, 0xC5	; 197
   18d84:	f6 ec       	ldi	r31, 0xC6	; 198
   18d86:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__prologue_saves__+0x1c>
   18d8a:	20 e2       	ldi	r18, 0x20	; 32
   18d8c:	e9 ec       	ldi	r30, 0xC9	; 201
   18d8e:	f8 e1       	ldi	r31, 0x18	; 24
   18d90:	df 01       	movw	r26, r30
   18d92:	1d 92       	st	X+, r1
   18d94:	2a 95       	dec	r18
   18d96:	e9 f7       	brne	.-6      	; 0x18d92 <lif_ctime_gmt+0x14>
   18d98:	be 01       	movw	r22, r28
   18d9a:	6f 5f       	subi	r22, 0xFF	; 255
   18d9c:	7f 4f       	sbci	r23, 0xFF	; 255
   18d9e:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <gmtime_r>
   18da2:	69 ec       	ldi	r22, 0xC9	; 201
   18da4:	78 e1       	ldi	r23, 0x18	; 24
   18da6:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <asctime_r>
   18daa:	8c 01       	movw	r16, r24
   18dac:	0e 94 02 32 	call	0x6404	; 0x6404 <trim_tail>
   18db0:	c8 01       	movw	r24, r16
   18db2:	66 96       	adiw	r28, 0x16	; 22
   18db4:	e4 e0       	ldi	r30, 0x04	; 4
   18db6:	0c 94 5f e5 	jmp	0x1cabe	; 0x1cabe <__epilogue_restores__+0x1c>

00018dba <lif_lifbcd2timestr>:
   18dba:	a4 e0       	ldi	r26, 0x04	; 4
   18dbc:	b0 e0       	ldi	r27, 0x00	; 0
   18dbe:	e3 ee       	ldi	r30, 0xE3	; 227
   18dc0:	f6 ec       	ldi	r31, 0xC6	; 198
   18dc2:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__prologue_saves__+0x20>
   18dc6:	20 e2       	ldi	r18, 0x20	; 32
   18dc8:	e9 ea       	ldi	r30, 0xA9	; 169
   18dca:	f8 e1       	ldi	r31, 0x18	; 24
   18dcc:	df 01       	movw	r26, r30
   18dce:	1d 92       	st	X+, r1
   18dd0:	2a 95       	dec	r18
   18dd2:	e9 f7       	brne	.-6      	; 0x18dce <lif_lifbcd2timestr+0x14>
   18dd4:	84 df       	rcall	.-248    	; 0x18cde <lif_lifbcd2time>
   18dd6:	69 83       	std	Y+1, r22	; 0x01
   18dd8:	7a 83       	std	Y+2, r23	; 0x02
   18dda:	8b 83       	std	Y+3, r24	; 0x03
   18ddc:	9c 83       	std	Y+4, r25	; 0x04
   18dde:	67 2b       	or	r22, r23
   18de0:	68 2b       	or	r22, r24
   18de2:	69 2b       	or	r22, r25
   18de4:	29 f0       	breq	.+10     	; 0x18df0 <lif_lifbcd2timestr+0x36>
   18de6:	ce 01       	movw	r24, r28
   18de8:	01 96       	adiw	r24, 0x01	; 1
   18dea:	c9 df       	rcall	.-110    	; 0x18d7e <lif_ctime_gmt>
   18dec:	bc 01       	movw	r22, r24
   18dee:	02 c0       	rjmp	.+4      	; 0x18df4 <lif_lifbcd2timestr+0x3a>
   18df0:	62 e7       	ldi	r22, 0x72	; 114
   18df2:	75 e1       	ldi	r23, 0x15	; 21
   18df4:	89 ea       	ldi	r24, 0xA9	; 169
   18df6:	98 e1       	ldi	r25, 0x18	; 24
   18df8:	0e 94 a8 31 	call	0x6350	; 0x6350 <strcpy>
   18dfc:	89 ea       	ldi	r24, 0xA9	; 169
   18dfe:	98 e1       	ldi	r25, 0x18	; 24
   18e00:	24 96       	adiw	r28, 0x04	; 4
   18e02:	e2 e0       	ldi	r30, 0x02	; 2
   18e04:	0c 94 61 e5 	jmp	0x1cac2	; 0x1cac2 <__epilogue_restores__+0x20>

00018e08 <lif_image_clear>:
   18e08:	20 e7       	ldi	r18, 0x70	; 112
   18e0a:	fc 01       	movw	r30, r24
   18e0c:	11 92       	st	Z+, r1
   18e0e:	2a 95       	dec	r18
   18e10:	e9 f7       	brne	.-6      	; 0x18e0c <lif_image_clear+0x4>
   18e12:	08 95       	ret

00018e14 <lif_dir_clear>:
   18e14:	81 5b       	subi	r24, 0xB1	; 177
   18e16:	9f 4f       	sbci	r25, 0xFF	; 255
   18e18:	21 e2       	ldi	r18, 0x21	; 33
   18e1a:	fc 01       	movw	r30, r24
   18e1c:	11 92       	st	Z+, r1
   18e1e:	2a 95       	dec	r18
   18e20:	e9 f7       	brne	.-6      	; 0x18e1c <lif_dir_clear+0x8>
   18e22:	08 95       	ret

00018e24 <lif_vol_clear>:
   18e24:	84 96       	adiw	r24, 0x24	; 36
   18e26:	2b e2       	ldi	r18, 0x2B	; 43
   18e28:	fc 01       	movw	r30, r24
   18e2a:	11 92       	st	Z+, r1
   18e2c:	2a 95       	dec	r18
   18e2e:	e9 f7       	brne	.-6      	; 0x18e2a <lif_vol_clear+0x6>
   18e30:	08 95       	ret

00018e32 <lif_dump_vol>:
   18e32:	cf 93       	push	r28
   18e34:	df 93       	push	r29
   18e36:	ec 01       	movw	r28, r24
   18e38:	7f 93       	push	r23
   18e3a:	6f 93       	push	r22
   18e3c:	83 ef       	ldi	r24, 0xF3	; 243
   18e3e:	91 e4       	ldi	r25, 0x41	; 65
   18e40:	1f 92       	push	r1
   18e42:	9f 93       	push	r25
   18e44:	8f 93       	push	r24
   18e46:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18e4a:	89 81       	ldd	r24, Y+1	; 0x01
   18e4c:	8f 93       	push	r24
   18e4e:	88 81       	ld	r24, Y
   18e50:	8f 93       	push	r24
   18e52:	89 ed       	ldi	r24, 0xD9	; 217
   18e54:	91 e4       	ldi	r25, 0x41	; 65
   18e56:	1f 92       	push	r1
   18e58:	9f 93       	push	r25
   18e5a:	8f 93       	push	r24
   18e5c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18e60:	8f 81       	ldd	r24, Y+7	; 0x07
   18e62:	8f 93       	push	r24
   18e64:	8e 81       	ldd	r24, Y+6	; 0x06
   18e66:	8f 93       	push	r24
   18e68:	8d 81       	ldd	r24, Y+5	; 0x05
   18e6a:	8f 93       	push	r24
   18e6c:	8c 81       	ldd	r24, Y+4	; 0x04
   18e6e:	8f 93       	push	r24
   18e70:	8c eb       	ldi	r24, 0xBC	; 188
   18e72:	91 e4       	ldi	r25, 0x41	; 65
   18e74:	1f 92       	push	r1
   18e76:	9f 93       	push	r25
   18e78:	8f 93       	push	r24
   18e7a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18e7e:	8b 85       	ldd	r24, Y+11	; 0x0b
   18e80:	8f 93       	push	r24
   18e82:	8a 85       	ldd	r24, Y+10	; 0x0a
   18e84:	8f 93       	push	r24
   18e86:	89 85       	ldd	r24, Y+9	; 0x09
   18e88:	8f 93       	push	r24
   18e8a:	88 85       	ldd	r24, Y+8	; 0x08
   18e8c:	8f 93       	push	r24
   18e8e:	8f e9       	ldi	r24, 0x9F	; 159
   18e90:	91 e4       	ldi	r25, 0x41	; 65
   18e92:	1f 92       	push	r1
   18e94:	9f 93       	push	r25
   18e96:	8f 93       	push	r24
   18e98:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
   18e9e:	8f 93       	push	r24
   18ea0:	8e 85       	ldd	r24, Y+14	; 0x0e
   18ea2:	8f 93       	push	r24
   18ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
   18ea6:	8f 93       	push	r24
   18ea8:	8c 85       	ldd	r24, Y+12	; 0x0c
   18eaa:	8f 93       	push	r24
   18eac:	82 e8       	ldi	r24, 0x82	; 130
   18eae:	91 e4       	ldi	r25, 0x41	; 65
   18eb0:	1f 92       	push	r1
   18eb2:	9f 93       	push	r25
   18eb4:	8f 93       	push	r24
   18eb6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18eba:	8b 89       	ldd	r24, Y+19	; 0x13
   18ebc:	8f 93       	push	r24
   18ebe:	8a 89       	ldd	r24, Y+18	; 0x12
   18ec0:	8f 93       	push	r24
   18ec2:	89 89       	ldd	r24, Y+17	; 0x11
   18ec4:	8f 93       	push	r24
   18ec6:	88 89       	ldd	r24, Y+16	; 0x10
   18ec8:	8f 93       	push	r24
   18eca:	85 e6       	ldi	r24, 0x65	; 101
   18ecc:	91 e4       	ldi	r25, 0x41	; 65
   18ece:	1f 92       	push	r1
   18ed0:	9f 93       	push	r25
   18ed2:	8f 93       	push	r24
   18ed4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18ed8:	8d b7       	in	r24, 0x3d	; 61
   18eda:	9e b7       	in	r25, 0x3e	; 62
   18edc:	86 96       	adiw	r24, 0x26	; 38
   18ede:	0f b6       	in	r0, 0x3f	; 63
   18ee0:	f8 94       	cli
   18ee2:	9e bf       	out	0x3e, r25	; 62
   18ee4:	0f be       	out	0x3f, r0	; 63
   18ee6:	8d bf       	out	0x3d, r24	; 61
   18ee8:	8f 89       	ldd	r24, Y+23	; 0x17
   18eea:	8f 93       	push	r24
   18eec:	8e 89       	ldd	r24, Y+22	; 0x16
   18eee:	8f 93       	push	r24
   18ef0:	8d 89       	ldd	r24, Y+21	; 0x15
   18ef2:	8f 93       	push	r24
   18ef4:	8c 89       	ldd	r24, Y+20	; 0x14
   18ef6:	8f 93       	push	r24
   18ef8:	88 e4       	ldi	r24, 0x48	; 72
   18efa:	91 e4       	ldi	r25, 0x41	; 65
   18efc:	1f 92       	push	r1
   18efe:	9f 93       	push	r25
   18f00:	8f 93       	push	r24
   18f02:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18f06:	8b 8d       	ldd	r24, Y+27	; 0x1b
   18f08:	8f 93       	push	r24
   18f0a:	8a 8d       	ldd	r24, Y+26	; 0x1a
   18f0c:	8f 93       	push	r24
   18f0e:	89 8d       	ldd	r24, Y+25	; 0x19
   18f10:	8f 93       	push	r24
   18f12:	88 8d       	ldd	r24, Y+24	; 0x18
   18f14:	8f 93       	push	r24
   18f16:	8b e2       	ldi	r24, 0x2B	; 43
   18f18:	91 e4       	ldi	r25, 0x41	; 65
   18f1a:	1f 92       	push	r1
   18f1c:	9f 93       	push	r25
   18f1e:	8f 93       	push	r24
   18f20:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18f24:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18f26:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18f28:	09 2e       	mov	r0, r25
   18f2a:	00 0c       	add	r0, r0
   18f2c:	aa 0b       	sbc	r26, r26
   18f2e:	bb 0b       	sbc	r27, r27
   18f30:	bf 93       	push	r27
   18f32:	af 93       	push	r26
   18f34:	9f 93       	push	r25
   18f36:	8f 93       	push	r24
   18f38:	8e e0       	ldi	r24, 0x0E	; 14
   18f3a:	91 e4       	ldi	r25, 0x41	; 65
   18f3c:	1f 92       	push	r1
   18f3e:	9f 93       	push	r25
   18f40:	8f 93       	push	r24
   18f42:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18f46:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18f48:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18f4a:	09 2e       	mov	r0, r25
   18f4c:	00 0c       	add	r0, r0
   18f4e:	aa 0b       	sbc	r26, r26
   18f50:	bb 0b       	sbc	r27, r27
   18f52:	bf 93       	push	r27
   18f54:	af 93       	push	r26
   18f56:	9f 93       	push	r25
   18f58:	8f 93       	push	r24
   18f5a:	81 ef       	ldi	r24, 0xF1	; 241
   18f5c:	90 e4       	ldi	r25, 0x40	; 64
   18f5e:	1f 92       	push	r1
   18f60:	9f 93       	push	r25
   18f62:	8f 93       	push	r24
   18f64:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18f68:	ce 01       	movw	r24, r28
   18f6a:	86 96       	adiw	r24, 0x26	; 38
   18f6c:	9f 93       	push	r25
   18f6e:	8f 93       	push	r24
   18f70:	87 ed       	ldi	r24, 0xD7	; 215
   18f72:	90 e4       	ldi	r25, 0x40	; 64
   18f74:	1f 92       	push	r1
   18f76:	9f 93       	push	r25
   18f78:	8f 93       	push	r24
   18f7a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18f7e:	8d b7       	in	r24, 0x3d	; 61
   18f80:	9e b7       	in	r25, 0x3e	; 62
   18f82:	81 96       	adiw	r24, 0x21	; 33
   18f84:	0f b6       	in	r0, 0x3f	; 63
   18f86:	f8 94       	cli
   18f88:	9e bf       	out	0x3e, r25	; 62
   18f8a:	0f be       	out	0x3f, r0	; 63
   18f8c:	8d bf       	out	0x3d, r24	; 61
   18f8e:	8d a1       	ldd	r24, Y+37	; 0x25
   18f90:	8f 93       	push	r24
   18f92:	8c a1       	ldd	r24, Y+36	; 0x24
   18f94:	8f 93       	push	r24
   18f96:	8b eb       	ldi	r24, 0xBB	; 187
   18f98:	90 e4       	ldi	r25, 0x40	; 64
   18f9a:	1f 92       	push	r1
   18f9c:	9f 93       	push	r25
   18f9e:	8f 93       	push	r24
   18fa0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18fa4:	88 a9       	ldd	r24, Y+48	; 0x30
   18fa6:	8f 93       	push	r24
   18fa8:	8f a5       	ldd	r24, Y+47	; 0x2f
   18faa:	8f 93       	push	r24
   18fac:	8e a5       	ldd	r24, Y+46	; 0x2e
   18fae:	8f 93       	push	r24
   18fb0:	8d a5       	ldd	r24, Y+45	; 0x2d
   18fb2:	8f 93       	push	r24
   18fb4:	8e e9       	ldi	r24, 0x9E	; 158
   18fb6:	90 e4       	ldi	r25, 0x40	; 64
   18fb8:	1f 92       	push	r1
   18fba:	9f 93       	push	r25
   18fbc:	8f 93       	push	r24
   18fbe:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18fc2:	88 ad       	ldd	r24, Y+56	; 0x38
   18fc4:	8f 93       	push	r24
   18fc6:	8f a9       	ldd	r24, Y+55	; 0x37
   18fc8:	8f 93       	push	r24
   18fca:	8e a9       	ldd	r24, Y+54	; 0x36
   18fcc:	8f 93       	push	r24
   18fce:	8d a9       	ldd	r24, Y+53	; 0x35
   18fd0:	8f 93       	push	r24
   18fd2:	81 e8       	ldi	r24, 0x81	; 129
   18fd4:	90 e4       	ldi	r25, 0x40	; 64
   18fd6:	1f 92       	push	r1
   18fd8:	9f 93       	push	r25
   18fda:	8f 93       	push	r24
   18fdc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18fe0:	8a a9       	ldd	r24, Y+50	; 0x32
   18fe2:	8f 93       	push	r24
   18fe4:	89 a9       	ldd	r24, Y+49	; 0x31
   18fe6:	8f 93       	push	r24
   18fe8:	85 e6       	ldi	r24, 0x65	; 101
   18fea:	90 e4       	ldi	r25, 0x40	; 64
   18fec:	1f 92       	push	r1
   18fee:	9f 93       	push	r25
   18ff0:	8f 93       	push	r24
   18ff2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   18ff6:	8a ad       	ldd	r24, Y+58	; 0x3a
   18ff8:	8f 93       	push	r24
   18ffa:	89 ad       	ldd	r24, Y+57	; 0x39
   18ffc:	8f 93       	push	r24
   18ffe:	89 e4       	ldi	r24, 0x49	; 73
   19000:	90 e4       	ldi	r25, 0x40	; 64
   19002:	1f 92       	push	r1
   19004:	9f 93       	push	r25
   19006:	8f 93       	push	r24
   19008:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1900c:	ce 01       	movw	r24, r28
   1900e:	87 5b       	subi	r24, 0xB7	; 183
   19010:	9f 4f       	sbci	r25, 0xFF	; 255
   19012:	d3 de       	rcall	.-602    	; 0x18dba <lif_lifbcd2timestr>
   19014:	9f 93       	push	r25
   19016:	8f 93       	push	r24
   19018:	8f e2       	ldi	r24, 0x2F	; 47
   1901a:	90 e4       	ldi	r25, 0x40	; 64
   1901c:	1f 92       	push	r1
   1901e:	9f 93       	push	r25
   19020:	8f 93       	push	r24
   19022:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   19026:	8d b7       	in	r24, 0x3d	; 61
   19028:	9e b7       	in	r25, 0x3e	; 62
   1902a:	82 96       	adiw	r24, 0x22	; 34
   1902c:	0f b6       	in	r0, 0x3f	; 63
   1902e:	f8 94       	cli
   19030:	9e bf       	out	0x3e, r25	; 62
   19032:	0f be       	out	0x3f, r0	; 63
   19034:	8d bf       	out	0x3d, r24	; 61
   19036:	ce 01       	movw	r24, r28
   19038:	81 5b       	subi	r24, 0xB1	; 177
   1903a:	9f 4f       	sbci	r25, 0xFF	; 255
   1903c:	9f 93       	push	r25
   1903e:	8f 93       	push	r24
   19040:	85 e1       	ldi	r24, 0x15	; 21
   19042:	90 e4       	ldi	r25, 0x40	; 64
   19044:	1f 92       	push	r1
   19046:	9f 93       	push	r25
   19048:	8f 93       	push	r24
   1904a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1904e:	fe 01       	movw	r30, r28
   19050:	e6 5a       	subi	r30, 0xA6	; 166
   19052:	ff 4f       	sbci	r31, 0xFF	; 255
   19054:	81 81       	ldd	r24, Z+1	; 0x01
   19056:	8f 93       	push	r24
   19058:	80 81       	ld	r24, Z
   1905a:	8f 93       	push	r24
   1905c:	89 ef       	ldi	r24, 0xF9	; 249
   1905e:	9f e3       	ldi	r25, 0x3F	; 63
   19060:	1f 92       	push	r1
   19062:	9f 93       	push	r25
   19064:	8f 93       	push	r24
   19066:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1906a:	fe 01       	movw	r30, r28
   1906c:	e6 59       	subi	r30, 0x96	; 150
   1906e:	ff 4f       	sbci	r31, 0xFF	; 255
   19070:	81 81       	ldd	r24, Z+1	; 0x01
   19072:	8f 93       	push	r24
   19074:	80 81       	ld	r24, Z
   19076:	8f 93       	push	r24
   19078:	8d ed       	ldi	r24, 0xDD	; 221
   1907a:	9f e3       	ldi	r25, 0x3F	; 63
   1907c:	1f 92       	push	r1
   1907e:	9f 93       	push	r25
   19080:	8f 93       	push	r24
   19082:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   19086:	fe 01       	movw	r30, r28
   19088:	e4 5a       	subi	r30, 0xA4	; 164
   1908a:	ff 4f       	sbci	r31, 0xFF	; 255
   1908c:	83 81       	ldd	r24, Z+3	; 0x03
   1908e:	8f 93       	push	r24
   19090:	82 81       	ldd	r24, Z+2	; 0x02
   19092:	8f 93       	push	r24
   19094:	81 81       	ldd	r24, Z+1	; 0x01
   19096:	8f 93       	push	r24
   19098:	80 81       	ld	r24, Z
   1909a:	8f 93       	push	r24
   1909c:	80 ec       	ldi	r24, 0xC0	; 192
   1909e:	9f e3       	ldi	r25, 0x3F	; 63
   190a0:	1f 92       	push	r1
   190a2:	9f 93       	push	r25
   190a4:	8f 93       	push	r24
   190a6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   190aa:	fe 01       	movw	r30, r28
   190ac:	e0 5a       	subi	r30, 0xA0	; 160
   190ae:	ff 4f       	sbci	r31, 0xFF	; 255
   190b0:	83 81       	ldd	r24, Z+3	; 0x03
   190b2:	8f 93       	push	r24
   190b4:	82 81       	ldd	r24, Z+2	; 0x02
   190b6:	8f 93       	push	r24
   190b8:	81 81       	ldd	r24, Z+1	; 0x01
   190ba:	8f 93       	push	r24
   190bc:	80 81       	ld	r24, Z
   190be:	8f 93       	push	r24
   190c0:	83 ea       	ldi	r24, 0xA3	; 163
   190c2:	9f e3       	ldi	r25, 0x3F	; 63
   190c4:	1f 92       	push	r1
   190c6:	9f 93       	push	r25
   190c8:	8f 93       	push	r24
   190ca:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   190ce:	fe 01       	movw	r30, r28
   190d0:	e4 59       	subi	r30, 0x94	; 148
   190d2:	ff 4f       	sbci	r31, 0xFF	; 255
   190d4:	80 81       	ld	r24, Z
   190d6:	91 81       	ldd	r25, Z+1	; 0x01
   190d8:	1f 92       	push	r1
   190da:	1f 92       	push	r1
   190dc:	9f 93       	push	r25
   190de:	8f 93       	push	r24
   190e0:	86 e8       	ldi	r24, 0x86	; 134
   190e2:	9f e3       	ldi	r25, 0x3F	; 63
   190e4:	1f 92       	push	r1
   190e6:	9f 93       	push	r25
   190e8:	8f 93       	push	r24
   190ea:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   190ee:	8d b7       	in	r24, 0x3d	; 61
   190f0:	9e b7       	in	r25, 0x3e	; 62
   190f2:	84 96       	adiw	r24, 0x24	; 36
   190f4:	0f b6       	in	r0, 0x3f	; 63
   190f6:	f8 94       	cli
   190f8:	9e bf       	out	0x3e, r25	; 62
   190fa:	0f be       	out	0x3f, r0	; 63
   190fc:	8d bf       	out	0x3d, r24	; 61
   190fe:	fe 01       	movw	r30, r28
   19100:	e2 59       	subi	r30, 0x92	; 146
   19102:	ff 4f       	sbci	r31, 0xFF	; 255
   19104:	81 81       	ldd	r24, Z+1	; 0x01
   19106:	8f 93       	push	r24
   19108:	80 81       	ld	r24, Z
   1910a:	8f 93       	push	r24
   1910c:	8a e6       	ldi	r24, 0x6A	; 106
   1910e:	9f e3       	ldi	r25, 0x3F	; 63
   19110:	1f 92       	push	r1
   19112:	9f 93       	push	r25
   19114:	8f 93       	push	r24
   19116:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1911a:	ce 01       	movw	r24, r28
   1911c:	8c 59       	subi	r24, 0x9C	; 156
   1911e:	9f 4f       	sbci	r25, 0xFF	; 255
   19120:	4c de       	rcall	.-872    	; 0x18dba <lif_lifbcd2timestr>
   19122:	9f 93       	push	r25
   19124:	8f 93       	push	r24
   19126:	80 e5       	ldi	r24, 0x50	; 80
   19128:	9f e3       	ldi	r25, 0x3F	; 63
   1912a:	1f 92       	push	r1
   1912c:	9f 93       	push	r25
   1912e:	8f 93       	push	r24
   19130:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   19134:	8e e4       	ldi	r24, 0x4E	; 78
   19136:	9f e3       	ldi	r25, 0x3F	; 63
   19138:	1f 92       	push	r1
   1913a:	9f 93       	push	r25
   1913c:	8f 93       	push	r24
   1913e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   19142:	8d b7       	in	r24, 0x3d	; 61
   19144:	9e b7       	in	r25, 0x3e	; 62
   19146:	0d 96       	adiw	r24, 0x0d	; 13
   19148:	0f b6       	in	r0, 0x3f	; 63
   1914a:	f8 94       	cli
   1914c:	9e bf       	out	0x3e, r25	; 62
   1914e:	0f be       	out	0x3f, r0	; 63
   19150:	8d bf       	out	0x3d, r24	; 61
   19152:	df 91       	pop	r29
   19154:	cf 91       	pop	r28
   19156:	08 95       	ret

00019158 <lif_check_volume>:
   19158:	0f 93       	push	r16
   1915a:	1f 93       	push	r17
   1915c:	cf 93       	push	r28
   1915e:	df 93       	push	r29
   19160:	ec 01       	movw	r28, r24
   19162:	86 96       	adiw	r24, 0x26	; 38
   19164:	fb da       	rcall	.-2570   	; 0x1875c <lif_checkname>
   19166:	89 2b       	or	r24, r25
   19168:	79 f4       	brne	.+30     	; 0x19188 <lif_check_volume+0x30>
   1916a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1916e:	80 ff       	sbrs	r24, 0
   19170:	0e c0       	rjmp	.+28     	; 0x1918e <lif_check_volume+0x36>
   19172:	8f e2       	ldi	r24, 0x2F	; 47
   19174:	9f e3       	ldi	r25, 0x3F	; 63
   19176:	1f 92       	push	r1
   19178:	9f 93       	push	r25
   1917a:	8f 93       	push	r24
   1917c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   19180:	0f 90       	pop	r0
   19182:	0f 90       	pop	r0
   19184:	0f 90       	pop	r0
   19186:	03 c0       	rjmp	.+6      	; 0x1918e <lif_check_volume+0x36>
   19188:	81 e0       	ldi	r24, 0x01	; 1
   1918a:	90 e0       	ldi	r25, 0x00	; 0
   1918c:	02 c0       	rjmp	.+4      	; 0x19192 <lif_check_volume+0x3a>
   1918e:	80 e0       	ldi	r24, 0x00	; 0
   19190:	90 e0       	ldi	r25, 0x00	; 0
   19192:	29 a9       	ldd	r18, Y+49	; 0x31
   19194:	3a a9       	ldd	r19, Y+50	; 0x32
   19196:	21 15       	cp	r18, r1
   19198:	40 e1       	ldi	r20, 0x10	; 16
   1919a:	34 07       	cpc	r19, r20
   1919c:	a1 f0       	breq	.+40     	; 0x191c6 <lif_check_volume+0x6e>
   1919e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   191a2:	80 ff       	sbrs	r24, 0
   191a4:	0e c0       	rjmp	.+28     	; 0x191c2 <lif_check_volume+0x6a>
   191a6:	3f 93       	push	r19
   191a8:	2f 93       	push	r18
   191aa:	86 ef       	ldi	r24, 0xF6	; 246
   191ac:	9e e3       	ldi	r25, 0x3E	; 62
   191ae:	1f 92       	push	r1
   191b0:	9f 93       	push	r25
   191b2:	8f 93       	push	r24
   191b4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   191b8:	0f 90       	pop	r0
   191ba:	0f 90       	pop	r0
   191bc:	0f 90       	pop	r0
   191be:	0f 90       	pop	r0
   191c0:	0f 90       	pop	r0
   191c2:	80 e0       	ldi	r24, 0x00	; 0
   191c4:	90 e0       	ldi	r25, 0x00	; 0
   191c6:	29 ad       	ldd	r18, Y+57	; 0x39
   191c8:	3a ad       	ldd	r19, Y+58	; 0x3a
   191ca:	22 30       	cpi	r18, 0x02	; 2
   191cc:	31 05       	cpc	r19, r1
   191ce:	a0 f0       	brcs	.+40     	; 0x191f8 <lif_check_volume+0xa0>
   191d0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   191d4:	80 ff       	sbrs	r24, 0
   191d6:	0e c0       	rjmp	.+28     	; 0x191f4 <lif_check_volume+0x9c>
   191d8:	3f 93       	push	r19
   191da:	2f 93       	push	r18
   191dc:	8e ed       	ldi	r24, 0xDE	; 222
   191de:	9e e3       	ldi	r25, 0x3E	; 62
   191e0:	1f 92       	push	r1
   191e2:	9f 93       	push	r25
   191e4:	8f 93       	push	r24
   191e6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   191ea:	0f 90       	pop	r0
   191ec:	0f 90       	pop	r0
   191ee:	0f 90       	pop	r0
   191f0:	0f 90       	pop	r0
   191f2:	0f 90       	pop	r0
   191f4:	80 e0       	ldi	r24, 0x00	; 0
   191f6:	90 e0       	ldi	r25, 0x00	; 0
   191f8:	2b a9       	ldd	r18, Y+51	; 0x33
   191fa:	3c a9       	ldd	r19, Y+52	; 0x34
   191fc:	23 2b       	or	r18, r19
   191fe:	81 f0       	breq	.+32     	; 0x19220 <lif_check_volume+0xc8>
   19200:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19204:	80 ff       	sbrs	r24, 0
   19206:	0a c0       	rjmp	.+20     	; 0x1921c <lif_check_volume+0xc4>
   19208:	85 ea       	ldi	r24, 0xA5	; 165
   1920a:	9e e3       	ldi	r25, 0x3E	; 62
   1920c:	1f 92       	push	r1
   1920e:	9f 93       	push	r25
   19210:	8f 93       	push	r24
   19212:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   19216:	0f 90       	pop	r0
   19218:	0f 90       	pop	r0
   1921a:	0f 90       	pop	r0
   1921c:	80 e0       	ldi	r24, 0x00	; 0
   1921e:	90 e0       	ldi	r25, 0x00	; 0
   19220:	2b ad       	ldd	r18, Y+59	; 0x3b
   19222:	3c ad       	ldd	r19, Y+60	; 0x3c
   19224:	23 2b       	or	r18, r19
   19226:	81 f0       	breq	.+32     	; 0x19248 <lif_check_volume+0xf0>
   19228:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1922c:	80 ff       	sbrs	r24, 0
   1922e:	0a c0       	rjmp	.+20     	; 0x19244 <lif_check_volume+0xec>
   19230:	8c e6       	ldi	r24, 0x6C	; 108
   19232:	9e e3       	ldi	r25, 0x3E	; 62
   19234:	1f 92       	push	r1
   19236:	9f 93       	push	r25
   19238:	8f 93       	push	r24
   1923a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1923e:	0f 90       	pop	r0
   19240:	0f 90       	pop	r0
   19242:	0f 90       	pop	r0
   19244:	80 e0       	ldi	r24, 0x00	; 0
   19246:	90 e0       	ldi	r25, 0x00	; 0
   19248:	4d a5       	ldd	r20, Y+45	; 0x2d
   1924a:	5e a5       	ldd	r21, Y+46	; 0x2e
   1924c:	6f a5       	ldd	r22, Y+47	; 0x2f
   1924e:	78 a9       	ldd	r23, Y+48	; 0x30
   19250:	45 2b       	or	r20, r21
   19252:	46 2b       	or	r20, r22
   19254:	47 2b       	or	r20, r23
   19256:	c9 f4       	brne	.+50     	; 0x1928a <lif_check_volume+0x132>
   19258:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1925c:	80 ff       	sbrs	r24, 0
   1925e:	13 c0       	rjmp	.+38     	; 0x19286 <lif_check_volume+0x12e>
   19260:	1f 92       	push	r1
   19262:	1f 92       	push	r1
   19264:	1f 92       	push	r1
   19266:	1f 92       	push	r1
   19268:	87 e4       	ldi	r24, 0x47	; 71
   1926a:	9e e3       	ldi	r25, 0x3E	; 62
   1926c:	1f 92       	push	r1
   1926e:	9f 93       	push	r25
   19270:	8f 93       	push	r24
   19272:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   19276:	8d b7       	in	r24, 0x3d	; 61
   19278:	9e b7       	in	r25, 0x3e	; 62
   1927a:	07 96       	adiw	r24, 0x07	; 7
   1927c:	0f b6       	in	r0, 0x3f	; 63
   1927e:	f8 94       	cli
   19280:	9e bf       	out	0x3e, r25	; 62
   19282:	0f be       	out	0x3f, r0	; 63
   19284:	8d bf       	out	0x3d, r24	; 61
   19286:	80 e0       	ldi	r24, 0x00	; 0
   19288:	90 e0       	ldi	r25, 0x00	; 0
   1928a:	4d a9       	ldd	r20, Y+53	; 0x35
   1928c:	5e a9       	ldd	r21, Y+54	; 0x36
   1928e:	6f a9       	ldd	r22, Y+55	; 0x37
   19290:	78 ad       	ldd	r23, Y+56	; 0x38
   19292:	45 2b       	or	r20, r21
   19294:	46 2b       	or	r20, r22
   19296:	47 2b       	or	r20, r23
   19298:	81 f4       	brne	.+32     	; 0x192ba <lif_check_volume+0x162>
   1929a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1929e:	80 ff       	sbrs	r24, 0
   192a0:	0a c0       	rjmp	.+20     	; 0x192b6 <lif_check_volume+0x15e>
   192a2:	88 e1       	ldi	r24, 0x18	; 24
   192a4:	9e e3       	ldi	r25, 0x3E	; 62
   192a6:	1f 92       	push	r1
   192a8:	9f 93       	push	r25
   192aa:	8f 93       	push	r24
   192ac:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   192b0:	0f 90       	pop	r0
   192b2:	0f 90       	pop	r0
   192b4:	0f 90       	pop	r0
   192b6:	80 e0       	ldi	r24, 0x00	; 0
   192b8:	90 e0       	ldi	r25, 0x00	; 0
   192ba:	0d a5       	ldd	r16, Y+45	; 0x2d
   192bc:	1e a5       	ldd	r17, Y+46	; 0x2e
   192be:	2f a5       	ldd	r18, Y+47	; 0x2f
   192c0:	38 a9       	ldd	r19, Y+48	; 0x30
   192c2:	4d a9       	ldd	r20, Y+53	; 0x35
   192c4:	5e a9       	ldd	r21, Y+54	; 0x36
   192c6:	6f a9       	ldd	r22, Y+55	; 0x37
   192c8:	78 ad       	ldd	r23, Y+56	; 0x38
   192ca:	40 0f       	add	r20, r16
   192cc:	51 1f       	adc	r21, r17
   192ce:	62 1f       	adc	r22, r18
   192d0:	73 1f       	adc	r23, r19
   192d2:	0c 81       	ldd	r16, Y+4	; 0x04
   192d4:	1d 81       	ldd	r17, Y+5	; 0x05
   192d6:	2e 81       	ldd	r18, Y+6	; 0x06
   192d8:	3f 81       	ldd	r19, Y+7	; 0x07
   192da:	04 17       	cp	r16, r20
   192dc:	15 07       	cpc	r17, r21
   192de:	26 07       	cpc	r18, r22
   192e0:	37 07       	cpc	r19, r23
   192e2:	80 f4       	brcc	.+32     	; 0x19304 <lif_check_volume+0x1ac>
   192e4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   192e8:	80 ff       	sbrs	r24, 0
   192ea:	0a c0       	rjmp	.+20     	; 0x19300 <lif_check_volume+0x1a8>
   192ec:	8c ee       	ldi	r24, 0xEC	; 236
   192ee:	9d e3       	ldi	r25, 0x3D	; 61
   192f0:	1f 92       	push	r1
   192f2:	9f 93       	push	r25
   192f4:	8f 93       	push	r24
   192f6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   192fa:	0f 90       	pop	r0
   192fc:	0f 90       	pop	r0
   192fe:	0f 90       	pop	r0
   19300:	80 e0       	ldi	r24, 0x00	; 0
   19302:	90 e0       	ldi	r25, 0x00	; 0
   19304:	df 91       	pop	r29
   19306:	cf 91       	pop	r28
   19308:	1f 91       	pop	r17
   1930a:	0f 91       	pop	r16
   1930c:	08 95       	ret

0001930e <lif_check_dir>:
   1930e:	a4 e0       	ldi	r26, 0x04	; 4
   19310:	b0 e0       	ldi	r27, 0x00	; 0
   19312:	ed e8       	ldi	r30, 0x8D	; 141
   19314:	f9 ec       	ldi	r31, 0xC9	; 201
   19316:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
   1931a:	6c 01       	movw	r12, r24
   1931c:	2a e5       	ldi	r18, 0x5A	; 90
   1931e:	c2 0e       	add	r12, r18
   19320:	d1 1c       	adc	r13, r1
   19322:	f6 01       	movw	r30, r12
   19324:	20 81       	ld	r18, Z
   19326:	31 81       	ldd	r19, Z+1	; 0x01
   19328:	21 50       	subi	r18, 0x01	; 1
   1932a:	31 09       	sbc	r19, r1
   1932c:	2e 3f       	cpi	r18, 0xFE	; 254
   1932e:	3f 4f       	sbci	r19, 0xFF	; 255
   19330:	08 f0       	brcs	.+2      	; 0x19334 <lif_check_dir+0x26>
   19332:	98 c1       	rjmp	.+816    	; 0x19664 <lif_check_dir+0x356>
   19334:	9c 83       	std	Y+4, r25	; 0x04
   19336:	8b 83       	std	Y+3, r24	; 0x03
   19338:	8c 01       	movw	r16, r24
   1933a:	01 5b       	subi	r16, 0xB1	; 177
   1933c:	1f 4f       	sbci	r17, 0xFF	; 255
   1933e:	c8 01       	movw	r24, r16
   19340:	0d da       	rcall	.-3046   	; 0x1875c <lif_checkname>
   19342:	89 2b       	or	r24, r25
   19344:	99 f4       	brne	.+38     	; 0x1936c <lif_check_dir+0x5e>
   19346:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1934a:	80 ff       	sbrs	r24, 0
   1934c:	12 c0       	rjmp	.+36     	; 0x19372 <lif_check_dir+0x64>
   1934e:	1f 93       	push	r17
   19350:	0f 93       	push	r16
   19352:	8b ec       	ldi	r24, 0xCB	; 203
   19354:	9d e3       	ldi	r25, 0x3D	; 61
   19356:	1f 92       	push	r1
   19358:	9f 93       	push	r25
   1935a:	8f 93       	push	r24
   1935c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   19360:	0f 90       	pop	r0
   19362:	0f 90       	pop	r0
   19364:	0f 90       	pop	r0
   19366:	0f 90       	pop	r0
   19368:	0f 90       	pop	r0
   1936a:	03 c0       	rjmp	.+6      	; 0x19372 <lif_check_dir+0x64>
   1936c:	ee 24       	eor	r14, r14
   1936e:	e3 94       	inc	r14
   19370:	01 c0       	rjmp	.+2      	; 0x19374 <lif_check_dir+0x66>
   19372:	e1 2c       	mov	r14, r1
   19374:	f1 2c       	mov	r15, r1
   19376:	eb 81       	ldd	r30, Y+3	; 0x03
   19378:	fc 81       	ldd	r31, Y+4	; 0x04
   1937a:	84 85       	ldd	r24, Z+12	; 0x0c
   1937c:	95 85       	ldd	r25, Z+13	; 0x0d
   1937e:	a6 85       	ldd	r26, Z+14	; 0x0e
   19380:	b7 85       	ldd	r27, Z+15	; 0x0f
   19382:	00 97       	sbiw	r24, 0x00	; 0
   19384:	a1 05       	cpc	r26, r1
   19386:	b1 05       	cpc	r27, r1
   19388:	39 f1       	breq	.+78     	; 0x193d8 <lif_check_dir+0xca>
   1938a:	e4 5a       	subi	r30, 0xA4	; 164
   1938c:	ff 4f       	sbci	r31, 0xFF	; 255
   1938e:	40 81       	ld	r20, Z
   19390:	51 81       	ldd	r21, Z+1	; 0x01
   19392:	62 81       	ldd	r22, Z+2	; 0x02
   19394:	73 81       	ldd	r23, Z+3	; 0x03
   19396:	48 17       	cp	r20, r24
   19398:	59 07       	cpc	r21, r25
   1939a:	6a 07       	cpc	r22, r26
   1939c:	7b 07       	cpc	r23, r27
   1939e:	e0 f4       	brcc	.+56     	; 0x193d8 <lif_check_dir+0xca>
   193a0:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   193a4:	20 ff       	sbrs	r18, 0
   193a6:	16 c0       	rjmp	.+44     	; 0x193d4 <lif_check_dir+0xc6>
   193a8:	bf 93       	push	r27
   193aa:	af 93       	push	r26
   193ac:	9f 93       	push	r25
   193ae:	8f 93       	push	r24
   193b0:	7f 93       	push	r23
   193b2:	6f 93       	push	r22
   193b4:	5f 93       	push	r21
   193b6:	4f 93       	push	r20
   193b8:	1f 93       	push	r17
   193ba:	0f 93       	push	r16
   193bc:	87 e8       	ldi	r24, 0x87	; 135
   193be:	9d e3       	ldi	r25, 0x3D	; 61
   193c0:	1f 92       	push	r1
   193c2:	9f 93       	push	r25
   193c4:	8f 93       	push	r24
   193c6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   193ca:	0f b6       	in	r0, 0x3f	; 63
   193cc:	f8 94       	cli
   193ce:	de bf       	out	0x3e, r29	; 62
   193d0:	0f be       	out	0x3f, r0	; 63
   193d2:	cd bf       	out	0x3d, r28	; 61
   193d4:	e1 2c       	mov	r14, r1
   193d6:	f1 2c       	mov	r15, r1
   193d8:	eb 81       	ldd	r30, Y+3	; 0x03
   193da:	fc 81       	ldd	r31, Y+4	; 0x04
   193dc:	44 81       	ldd	r20, Z+4	; 0x04
   193de:	55 81       	ldd	r21, Z+5	; 0x05
   193e0:	66 81       	ldd	r22, Z+6	; 0x06
   193e2:	77 81       	ldd	r23, Z+7	; 0x07
   193e4:	41 15       	cp	r20, r1
   193e6:	51 05       	cpc	r21, r1
   193e8:	61 05       	cpc	r22, r1
   193ea:	71 05       	cpc	r23, r1
   193ec:	99 f1       	breq	.+102    	; 0x19454 <lif_check_dir+0x146>
   193ee:	e4 5a       	subi	r30, 0xA4	; 164
   193f0:	ff 4f       	sbci	r31, 0xFF	; 255
   193f2:	80 80       	ld	r8, Z
   193f4:	91 80       	ldd	r9, Z+1	; 0x01
   193f6:	a2 80       	ldd	r10, Z+2	; 0x02
   193f8:	b3 80       	ldd	r11, Z+3	; 0x03
   193fa:	eb 81       	ldd	r30, Y+3	; 0x03
   193fc:	fc 81       	ldd	r31, Y+4	; 0x04
   193fe:	e0 5a       	subi	r30, 0xA0	; 160
   19400:	ff 4f       	sbci	r31, 0xFF	; 255
   19402:	80 81       	ld	r24, Z
   19404:	91 81       	ldd	r25, Z+1	; 0x01
   19406:	a2 81       	ldd	r26, Z+2	; 0x02
   19408:	b3 81       	ldd	r27, Z+3	; 0x03
   1940a:	88 0d       	add	r24, r8
   1940c:	99 1d       	adc	r25, r9
   1940e:	aa 1d       	adc	r26, r10
   19410:	bb 1d       	adc	r27, r11
   19412:	48 17       	cp	r20, r24
   19414:	59 07       	cpc	r21, r25
   19416:	6a 07       	cpc	r22, r26
   19418:	7b 07       	cpc	r23, r27
   1941a:	e0 f4       	brcc	.+56     	; 0x19454 <lif_check_dir+0x146>
   1941c:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   19420:	20 ff       	sbrs	r18, 0
   19422:	16 c0       	rjmp	.+44     	; 0x19450 <lif_check_dir+0x142>
   19424:	7f 93       	push	r23
   19426:	6f 93       	push	r22
   19428:	5f 93       	push	r21
   1942a:	4f 93       	push	r20
   1942c:	bf 93       	push	r27
   1942e:	af 93       	push	r26
   19430:	9f 93       	push	r25
   19432:	8f 93       	push	r24
   19434:	1f 93       	push	r17
   19436:	0f 93       	push	r16
   19438:	86 e4       	ldi	r24, 0x46	; 70
   1943a:	9d e3       	ldi	r25, 0x3D	; 61
   1943c:	1f 92       	push	r1
   1943e:	9f 93       	push	r25
   19440:	8f 93       	push	r24
   19442:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   19446:	0f b6       	in	r0, 0x3f	; 63
   19448:	f8 94       	cli
   1944a:	de bf       	out	0x3e, r29	; 62
   1944c:	0f be       	out	0x3f, r0	; 63
   1944e:	cd bf       	out	0x3d, r28	; 61
   19450:	e1 2c       	mov	r14, r1
   19452:	f1 2c       	mov	r15, r1
   19454:	eb 81       	ldd	r30, Y+3	; 0x03
   19456:	fc 81       	ldd	r31, Y+4	; 0x04
   19458:	e6 59       	subi	r30, 0x96	; 150
   1945a:	ff 4f       	sbci	r31, 0xFF	; 255
   1945c:	80 81       	ld	r24, Z
   1945e:	91 81       	ldd	r25, Z+1	; 0x01
   19460:	81 30       	cpi	r24, 0x01	; 1
   19462:	30 e8       	ldi	r19, 0x80	; 128
   19464:	93 07       	cpc	r25, r19
   19466:	b1 f0       	breq	.+44     	; 0x19494 <lif_check_dir+0x186>
   19468:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1946c:	20 ff       	sbrs	r18, 0
   1946e:	10 c0       	rjmp	.+32     	; 0x19490 <lif_check_dir+0x182>
   19470:	9f 93       	push	r25
   19472:	8f 93       	push	r24
   19474:	1f 93       	push	r17
   19476:	0f 93       	push	r16
   19478:	88 e1       	ldi	r24, 0x18	; 24
   1947a:	9d e3       	ldi	r25, 0x3D	; 61
   1947c:	1f 92       	push	r1
   1947e:	9f 93       	push	r25
   19480:	8f 93       	push	r24
   19482:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   19486:	0f b6       	in	r0, 0x3f	; 63
   19488:	f8 94       	cli
   1948a:	de bf       	out	0x3e, r29	; 62
   1948c:	0f be       	out	0x3f, r0	; 63
   1948e:	cd bf       	out	0x3d, r28	; 61
   19490:	e1 2c       	mov	r14, r1
   19492:	f1 2c       	mov	r15, r1
   19494:	f6 01       	movw	r30, r12
   19496:	80 81       	ld	r24, Z
   19498:	91 81       	ldd	r25, Z+1	; 0x01
   1949a:	8c 7f       	andi	r24, 0xFC	; 252
   1949c:	80 31       	cpi	r24, 0x10	; 16
   1949e:	90 4e       	sbci	r25, 0xE0	; 224
   194a0:	09 f0       	breq	.+2      	; 0x194a4 <lif_check_dir+0x196>
   194a2:	b3 c0       	rjmp	.+358    	; 0x1960a <lif_check_dir+0x2fc>
   194a4:	cb 80       	ldd	r12, Y+3	; 0x03
   194a6:	dc 80       	ldd	r13, Y+4	; 0x04
   194a8:	2c e6       	ldi	r18, 0x6C	; 108
   194aa:	c2 0e       	add	r12, r18
   194ac:	d1 1c       	adc	r13, r1
   194ae:	f6 01       	movw	r30, r12
   194b0:	20 81       	ld	r18, Z
   194b2:	31 81       	ldd	r19, Z+1	; 0x01
   194b4:	21 15       	cp	r18, r1
   194b6:	31 05       	cpc	r19, r1
   194b8:	09 f4       	brne	.+2      	; 0x194bc <lif_check_dir+0x1ae>
   194ba:	a7 c0       	rjmp	.+334    	; 0x1960a <lif_check_dir+0x2fc>
   194bc:	49 01       	movw	r8, r18
   194be:	a1 2c       	mov	r10, r1
   194c0:	b1 2c       	mov	r11, r1
   194c2:	bb 27       	eor	r27, r27
   194c4:	ab 2d       	mov	r26, r11
   194c6:	9a 2d       	mov	r25, r10
   194c8:	89 2d       	mov	r24, r9
   194ca:	33 27       	eor	r19, r19
   194cc:	2c 01       	movw	r4, r24
   194ce:	3d 01       	movw	r6, r26
   194d0:	21 15       	cp	r18, r1
   194d2:	31 05       	cpc	r19, r1
   194d4:	29 f0       	breq	.+10     	; 0x194e0 <lif_check_dir+0x1d2>
   194d6:	ff ef       	ldi	r31, 0xFF	; 255
   194d8:	4f 1a       	sub	r4, r31
   194da:	5f 0a       	sbc	r5, r31
   194dc:	6f 0a       	sbc	r6, r31
   194de:	7f 0a       	sbc	r7, r31
   194e0:	2b 80       	ldd	r2, Y+3	; 0x03
   194e2:	3c 80       	ldd	r3, Y+4	; 0x04
   194e4:	40 e6       	ldi	r20, 0x60	; 96
   194e6:	24 0e       	add	r2, r20
   194e8:	31 1c       	adc	r3, r1
   194ea:	f1 01       	movw	r30, r2
   194ec:	40 81       	ld	r20, Z
   194ee:	51 81       	ldd	r21, Z+1	; 0x01
   194f0:	62 81       	ldd	r22, Z+2	; 0x02
   194f2:	73 81       	ldd	r23, Z+3	; 0x03
   194f4:	44 15       	cp	r20, r4
   194f6:	55 05       	cpc	r21, r5
   194f8:	66 05       	cpc	r22, r6
   194fa:	77 05       	cpc	r23, r7
   194fc:	28 f5       	brcc	.+74     	; 0x19548 <lif_check_dir+0x23a>
   194fe:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <debuglevel>
   19502:	e0 ff       	sbrs	r30, 0
   19504:	1f c0       	rjmp	.+62     	; 0x19544 <lif_check_dir+0x236>
   19506:	23 2b       	or	r18, r19
   19508:	19 f0       	breq	.+6      	; 0x19510 <lif_check_dir+0x202>
   1950a:	01 96       	adiw	r24, 0x01	; 1
   1950c:	a1 1d       	adc	r26, r1
   1950e:	b1 1d       	adc	r27, r1
   19510:	7f 93       	push	r23
   19512:	6f 93       	push	r22
   19514:	5f 93       	push	r21
   19516:	4f 93       	push	r20
   19518:	bf 93       	push	r27
   1951a:	af 93       	push	r26
   1951c:	9f 93       	push	r25
   1951e:	8f 93       	push	r24
   19520:	1f 92       	push	r1
   19522:	1f 92       	push	r1
   19524:	9f 92       	push	r9
   19526:	8f 92       	push	r8
   19528:	1f 93       	push	r17
   1952a:	0f 93       	push	r16
   1952c:	8d ec       	ldi	r24, 0xCD	; 205
   1952e:	9c e3       	ldi	r25, 0x3C	; 60
   19530:	1f 92       	push	r1
   19532:	9f 93       	push	r25
   19534:	8f 93       	push	r24
   19536:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1953a:	0f b6       	in	r0, 0x3f	; 63
   1953c:	f8 94       	cli
   1953e:	de bf       	out	0x3e, r29	; 62
   19540:	0f be       	out	0x3f, r0	; 63
   19542:	cd bf       	out	0x3d, r28	; 61
   19544:	e1 2c       	mov	r14, r1
   19546:	f1 2c       	mov	r15, r1
   19548:	f6 01       	movw	r30, r12
   1954a:	20 81       	ld	r18, Z
   1954c:	31 81       	ldd	r19, Z+1	; 0x01
   1954e:	49 01       	movw	r8, r18
   19550:	a1 2c       	mov	r10, r1
   19552:	b1 2c       	mov	r11, r1
   19554:	bb 27       	eor	r27, r27
   19556:	ab 2d       	mov	r26, r11
   19558:	9a 2d       	mov	r25, r10
   1955a:	89 2d       	mov	r24, r9
   1955c:	a9 01       	movw	r20, r18
   1955e:	55 27       	eor	r21, r21
   19560:	5a 83       	std	Y+2, r21	; 0x02
   19562:	49 83       	std	Y+1, r20	; 0x01
   19564:	2c 01       	movw	r4, r24
   19566:	3d 01       	movw	r6, r26
   19568:	45 2b       	or	r20, r21
   1956a:	29 f0       	breq	.+10     	; 0x19576 <lif_check_dir+0x268>
   1956c:	5f ef       	ldi	r21, 0xFF	; 255
   1956e:	45 1a       	sub	r4, r21
   19570:	55 0a       	sbc	r5, r21
   19572:	65 0a       	sbc	r6, r21
   19574:	75 0a       	sbc	r7, r21
   19576:	f1 01       	movw	r30, r2
   19578:	40 81       	ld	r20, Z
   1957a:	51 81       	ldd	r21, Z+1	; 0x01
   1957c:	62 81       	ldd	r22, Z+2	; 0x02
   1957e:	73 81       	ldd	r23, Z+3	; 0x03
   19580:	44 16       	cp	r4, r20
   19582:	55 06       	cpc	r5, r21
   19584:	66 06       	cpc	r6, r22
   19586:	77 06       	cpc	r7, r23
   19588:	38 f5       	brcc	.+78     	; 0x195d8 <lif_check_dir+0x2ca>
   1958a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1958e:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   19592:	32 ff       	sbrs	r19, 2
   19594:	21 c0       	rjmp	.+66     	; 0x195d8 <lif_check_dir+0x2ca>
   19596:	29 81       	ldd	r18, Y+1	; 0x01
   19598:	3a 81       	ldd	r19, Y+2	; 0x02
   1959a:	23 2b       	or	r18, r19
   1959c:	19 f0       	breq	.+6      	; 0x195a4 <lif_check_dir+0x296>
   1959e:	01 96       	adiw	r24, 0x01	; 1
   195a0:	a1 1d       	adc	r26, r1
   195a2:	b1 1d       	adc	r27, r1
   195a4:	7f 93       	push	r23
   195a6:	6f 93       	push	r22
   195a8:	5f 93       	push	r21
   195aa:	4f 93       	push	r20
   195ac:	bf 93       	push	r27
   195ae:	af 93       	push	r26
   195b0:	9f 93       	push	r25
   195b2:	8f 93       	push	r24
   195b4:	1f 92       	push	r1
   195b6:	1f 92       	push	r1
   195b8:	9f 92       	push	r9
   195ba:	8f 92       	push	r8
   195bc:	1f 93       	push	r17
   195be:	0f 93       	push	r16
   195c0:	82 e8       	ldi	r24, 0x82	; 130
   195c2:	9c e3       	ldi	r25, 0x3C	; 60
   195c4:	1f 92       	push	r1
   195c6:	9f 93       	push	r25
   195c8:	8f 93       	push	r24
   195ca:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   195ce:	0f b6       	in	r0, 0x3f	; 63
   195d0:	f8 94       	cli
   195d2:	de bf       	out	0x3e, r29	; 62
   195d4:	0f be       	out	0x3f, r0	; 63
   195d6:	cd bf       	out	0x3d, r28	; 61
   195d8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   195dc:	80 ff       	sbrs	r24, 0
   195de:	15 c0       	rjmp	.+42     	; 0x1960a <lif_check_dir+0x2fc>
   195e0:	f6 01       	movw	r30, r12
   195e2:	80 81       	ld	r24, Z
   195e4:	91 81       	ldd	r25, Z+1	; 0x01
   195e6:	89 2b       	or	r24, r25
   195e8:	81 f4       	brne	.+32     	; 0x1960a <lif_check_dir+0x2fc>
   195ea:	1f 93       	push	r17
   195ec:	0f 93       	push	r16
   195ee:	87 e5       	ldi	r24, 0x57	; 87
   195f0:	9c e3       	ldi	r25, 0x3C	; 60
   195f2:	1f 92       	push	r1
   195f4:	9f 93       	push	r25
   195f6:	8f 93       	push	r24
   195f8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   195fc:	0f 90       	pop	r0
   195fe:	0f 90       	pop	r0
   19600:	0f 90       	pop	r0
   19602:	0f 90       	pop	r0
   19604:	0f 90       	pop	r0
   19606:	e1 2c       	mov	r14, r1
   19608:	f1 2c       	mov	r15, r1
   1960a:	eb 81       	ldd	r30, Y+3	; 0x03
   1960c:	fc 81       	ldd	r31, Y+4	; 0x04
   1960e:	e2 59       	subi	r30, 0x92	; 146
   19610:	ff 4f       	sbci	r31, 0xFF	; 255
   19612:	20 81       	ld	r18, Z
   19614:	31 81       	ldd	r19, Z+1	; 0x01
   19616:	21 15       	cp	r18, r1
   19618:	f1 e0       	ldi	r31, 0x01	; 1
   1961a:	3f 07       	cpc	r19, r31
   1961c:	31 f1       	breq	.+76     	; 0x1966a <lif_check_dir+0x35c>
   1961e:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   19622:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   19626:	ca 01       	movw	r24, r20
   19628:	81 70       	andi	r24, 0x01	; 1
   1962a:	99 27       	eor	r25, r25
   1962c:	40 ff       	sbrs	r20, 0
   1962e:	1e c0       	rjmp	.+60     	; 0x1966c <lif_check_dir+0x35e>
   19630:	c9 01       	movw	r24, r18
   19632:	1f 92       	push	r1
   19634:	1f 92       	push	r1
   19636:	9f 93       	push	r25
   19638:	2f 93       	push	r18
   1963a:	eb 81       	ldd	r30, Y+3	; 0x03
   1963c:	fc 81       	ldd	r31, Y+4	; 0x04
   1963e:	81 81       	ldd	r24, Z+1	; 0x01
   19640:	8f 93       	push	r24
   19642:	80 81       	ld	r24, Z
   19644:	8f 93       	push	r24
   19646:	8b e2       	ldi	r24, 0x2B	; 43
   19648:	9c e3       	ldi	r25, 0x3C	; 60
   1964a:	1f 92       	push	r1
   1964c:	9f 93       	push	r25
   1964e:	8f 93       	push	r24
   19650:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   19654:	0f b6       	in	r0, 0x3f	; 63
   19656:	f8 94       	cli
   19658:	de bf       	out	0x3e, r29	; 62
   1965a:	0f be       	out	0x3f, r0	; 63
   1965c:	cd bf       	out	0x3d, r28	; 61
   1965e:	80 e0       	ldi	r24, 0x00	; 0
   19660:	90 e0       	ldi	r25, 0x00	; 0
   19662:	04 c0       	rjmp	.+8      	; 0x1966c <lif_check_dir+0x35e>
   19664:	81 e0       	ldi	r24, 0x01	; 1
   19666:	90 e0       	ldi	r25, 0x00	; 0
   19668:	01 c0       	rjmp	.+2      	; 0x1966c <lif_check_dir+0x35e>
   1966a:	c7 01       	movw	r24, r14
   1966c:	24 96       	adiw	r28, 0x04	; 4
   1966e:	e2 e1       	ldi	r30, 0x12	; 18
   19670:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

00019674 <lif_close_volume>:
   19674:	cf 93       	push	r28
   19676:	df 93       	push	r29
   19678:	00 97       	sbiw	r24, 0x00	; 0
   1967a:	f9 f0       	breq	.+62     	; 0x196ba <lif_close_volume+0x46>
   1967c:	ec 01       	movw	r28, r24
   1967e:	8a 81       	ldd	r24, Y+2	; 0x02
   19680:	9b 81       	ldd	r25, Y+3	; 0x03
   19682:	00 97       	sbiw	r24, 0x00	; 0
   19684:	79 f0       	breq	.+30     	; 0x196a4 <lif_close_volume+0x30>
   19686:	22 e0       	ldi	r18, 0x02	; 2
   19688:	30 e0       	ldi	r19, 0x00	; 0
   1968a:	40 e0       	ldi	r20, 0x00	; 0
   1968c:	50 e0       	ldi	r21, 0x00	; 0
   1968e:	ba 01       	movw	r22, r20
   19690:	0e 94 57 7b 	call	0xf6ae	; 0xf6ae <fseek>
   19694:	8a 81       	ldd	r24, Y+2	; 0x02
   19696:	9b 81       	ldd	r25, Y+3	; 0x03
   19698:	0e 94 3f 7d 	call	0xfa7e	; 0xfa7e <fclose>
   1969c:	1b 82       	std	Y+3, r1	; 0x03
   1969e:	1a 82       	std	Y+2, r1	; 0x02
   196a0:	0e 94 3a 7c 	call	0xf874	; 0xf874 <sync>
   196a4:	88 81       	ld	r24, Y
   196a6:	99 81       	ldd	r25, Y+1	; 0x01
   196a8:	00 97       	sbiw	r24, 0x00	; 0
   196aa:	11 f0       	breq	.+4      	; 0x196b0 <lif_close_volume+0x3c>
   196ac:	0e 94 ed c1 	call	0x183da	; 0x183da <lif_free>
   196b0:	ce 01       	movw	r24, r28
   196b2:	b8 db       	rcall	.-2192   	; 0x18e24 <lif_vol_clear>
   196b4:	ce 01       	movw	r24, r28
   196b6:	0e 94 ed c1 	call	0x183da	; 0x183da <lif_free>
   196ba:	df 91       	pop	r29
   196bc:	cf 91       	pop	r28
   196be:	08 95       	ret

000196c0 <lif_checkdirindex>:
   196c0:	a0 e0       	ldi	r26, 0x00	; 0
   196c2:	b0 e0       	ldi	r27, 0x00	; 0
   196c4:	e6 e6       	ldi	r30, 0x66	; 102
   196c6:	fb ec       	ldi	r31, 0xCB	; 203
   196c8:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
   196cc:	77 fd       	sbrc	r23, 7
   196ce:	26 c0       	rjmp	.+76     	; 0x1971c <lif_checkdirindex+0x5c>
   196d0:	8b 01       	movw	r16, r22
   196d2:	07 2e       	mov	r0, r23
   196d4:	00 0c       	add	r0, r0
   196d6:	22 0b       	sbc	r18, r18
   196d8:	33 0b       	sbc	r19, r19
   196da:	45 e0       	ldi	r20, 0x05	; 5
   196dc:	00 0f       	add	r16, r16
   196de:	11 1f       	adc	r17, r17
   196e0:	22 1f       	adc	r18, r18
   196e2:	33 1f       	adc	r19, r19
   196e4:	4a 95       	dec	r20
   196e6:	d1 f7       	brne	.-12     	; 0x196dc <lif_checkdirindex+0x1c>
   196e8:	c1 2e       	mov	r12, r17
   196ea:	d2 2e       	mov	r13, r18
   196ec:	e3 2e       	mov	r14, r19
   196ee:	ff 24       	eor	r15, r15
   196f0:	11 27       	eor	r17, r17
   196f2:	22 27       	eor	r18, r18
   196f4:	33 27       	eor	r19, r19
   196f6:	01 2b       	or	r16, r17
   196f8:	02 2b       	or	r16, r18
   196fa:	03 2b       	or	r16, r19
   196fc:	29 f0       	breq	.+10     	; 0x19708 <lif_checkdirindex+0x48>
   196fe:	2f ef       	ldi	r18, 0xFF	; 255
   19700:	c2 1a       	sub	r12, r18
   19702:	d2 0a       	sbc	r13, r18
   19704:	e2 0a       	sbc	r14, r18
   19706:	f2 0a       	sbc	r15, r18
   19708:	fc 01       	movw	r30, r24
   1970a:	05 a9       	ldd	r16, Z+53	; 0x35
   1970c:	16 a9       	ldd	r17, Z+54	; 0x36
   1970e:	27 a9       	ldd	r18, Z+55	; 0x37
   19710:	30 ad       	ldd	r19, Z+56	; 0x38
   19712:	0c 15       	cp	r16, r12
   19714:	1d 05       	cpc	r17, r13
   19716:	2e 05       	cpc	r18, r14
   19718:	3f 05       	cpc	r19, r15
   1971a:	30 f5       	brcc	.+76     	; 0x19768 <lif_checkdirindex+0xa8>
   1971c:	ec 01       	movw	r28, r24
   1971e:	7f 93       	push	r23
   19720:	6f 93       	push	r22
   19722:	89 81       	ldd	r24, Y+1	; 0x01
   19724:	8f 93       	push	r24
   19726:	88 81       	ld	r24, Y
   19728:	8f 93       	push	r24
   1972a:	88 e6       	ldi	r24, 0x68	; 104
   1972c:	9b e3       	ldi	r25, 0x3B	; 59
   1972e:	1f 92       	push	r1
   19730:	9f 93       	push	r25
   19732:	8f 93       	push	r24
   19734:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   19738:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1973c:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   19740:	8d b7       	in	r24, 0x3d	; 61
   19742:	9e b7       	in	r25, 0x3e	; 62
   19744:	07 96       	adiw	r24, 0x07	; 7
   19746:	0f b6       	in	r0, 0x3f	; 63
   19748:	f8 94       	cli
   1974a:	9e bf       	out	0x3e, r25	; 62
   1974c:	0f be       	out	0x3f, r0	; 63
   1974e:	8d bf       	out	0x3d, r24	; 61
   19750:	c9 01       	movw	r24, r18
   19752:	88 27       	eor	r24, r24
   19754:	94 70       	andi	r25, 0x04	; 4
   19756:	32 ff       	sbrs	r19, 2
   19758:	09 c0       	rjmp	.+18     	; 0x1976c <lif_checkdirindex+0xac>
   1975a:	6a e7       	ldi	r22, 0x7A	; 122
   1975c:	75 e1       	ldi	r23, 0x15	; 21
   1975e:	ce 01       	movw	r24, r28
   19760:	68 db       	rcall	.-2352   	; 0x18e32 <lif_dump_vol>
   19762:	80 e0       	ldi	r24, 0x00	; 0
   19764:	90 e0       	ldi	r25, 0x00	; 0
   19766:	02 c0       	rjmp	.+4      	; 0x1976c <lif_checkdirindex+0xac>
   19768:	81 e0       	ldi	r24, 0x01	; 1
   1976a:	90 e0       	ldi	r25, 0x00	; 0
   1976c:	cd b7       	in	r28, 0x3d	; 61
   1976e:	de b7       	in	r29, 0x3e	; 62
   19770:	e8 e0       	ldi	r30, 0x08	; 8
   19772:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

00019776 <lif_readdirindex>:
   19776:	a0 e2       	ldi	r26, 0x20	; 32
   19778:	b0 e0       	ldi	r27, 0x00	; 0
   1977a:	e1 ec       	ldi	r30, 0xC1	; 193
   1977c:	fb ec       	ldi	r31, 0xCB	; 203
   1977e:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
   19782:	7c 01       	movw	r14, r24
   19784:	6b 01       	movw	r12, r22
   19786:	9c df       	rcall	.-200    	; 0x196c0 <lif_checkdirindex>
   19788:	89 2b       	or	r24, r25
   1978a:	19 f4       	brne	.+6      	; 0x19792 <lif_readdirindex+0x1c>
   1978c:	00 e0       	ldi	r16, 0x00	; 0
   1978e:	10 e0       	ldi	r17, 0x00	; 0
   19790:	56 c0       	rjmp	.+172    	; 0x1983e <lif_readdirindex+0xc8>
   19792:	f7 01       	movw	r30, r14
   19794:	85 a5       	ldd	r24, Z+45	; 0x2d
   19796:	96 a5       	ldd	r25, Z+46	; 0x2e
   19798:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1979a:	b0 a9       	ldd	r27, Z+48	; 0x30
   1979c:	44 27       	eor	r20, r20
   1979e:	58 2f       	mov	r21, r24
   197a0:	69 2f       	mov	r22, r25
   197a2:	7a 2f       	mov	r23, r26
   197a4:	c6 01       	movw	r24, r12
   197a6:	0d 2c       	mov	r0, r13
   197a8:	00 0c       	add	r0, r0
   197aa:	aa 0b       	sbc	r26, r26
   197ac:	bb 0b       	sbc	r27, r27
   197ae:	35 e0       	ldi	r19, 0x05	; 5
   197b0:	88 0f       	add	r24, r24
   197b2:	99 1f       	adc	r25, r25
   197b4:	aa 1f       	adc	r26, r26
   197b6:	bb 1f       	adc	r27, r27
   197b8:	3a 95       	dec	r19
   197ba:	d1 f7       	brne	.-12     	; 0x197b0 <lif_readdirindex+0x3a>
   197bc:	9a 01       	movw	r18, r20
   197be:	ab 01       	movw	r20, r22
   197c0:	28 0f       	add	r18, r24
   197c2:	39 1f       	adc	r19, r25
   197c4:	4a 1f       	adc	r20, r26
   197c6:	5b 1f       	adc	r21, r27
   197c8:	00 e2       	ldi	r16, 0x20	; 32
   197ca:	10 e0       	ldi	r17, 0x00	; 0
   197cc:	be 01       	movw	r22, r28
   197ce:	6f 5f       	subi	r22, 0xFF	; 255
   197d0:	7f 4f       	sbci	r23, 0xFF	; 255
   197d2:	c7 01       	movw	r24, r14
   197d4:	0e 94 a2 c2 	call	0x18544	; 0x18544 <lif_read>
   197d8:	60 32       	cpi	r22, 0x20	; 32
   197da:	71 05       	cpc	r23, r1
   197dc:	81 05       	cpc	r24, r1
   197de:	91 05       	cpc	r25, r1
   197e0:	a8 f2       	brcs	.-86     	; 0x1978c <lif_readdirindex+0x16>
   197e2:	b7 01       	movw	r22, r14
   197e4:	ce 01       	movw	r24, r28
   197e6:	01 96       	adiw	r24, 0x01	; 1
   197e8:	c1 d9       	rcall	.-3198   	; 0x18b6c <lif_str2dir>
   197ea:	f7 01       	movw	r30, r14
   197ec:	e6 5a       	subi	r30, 0xA6	; 166
   197ee:	ff 4f       	sbci	r31, 0xFF	; 255
   197f0:	80 81       	ld	r24, Z
   197f2:	91 81       	ldd	r25, Z+1	; 0x01
   197f4:	01 96       	adiw	r24, 0x01	; 1
   197f6:	19 f4       	brne	.+6      	; 0x197fe <lif_readdirindex+0x88>
   197f8:	f7 01       	movw	r30, r14
   197fa:	d3 a2       	std	Z+35, r13	; 0x23
   197fc:	c2 a2       	std	Z+34, r12	; 0x22
   197fe:	c7 01       	movw	r24, r14
   19800:	86 dd       	rcall	.-1268   	; 0x1930e <lif_check_dir>
   19802:	8c 01       	movw	r16, r24
   19804:	89 2b       	or	r24, r25
   19806:	c9 f4       	brne	.+50     	; 0x1983a <lif_readdirindex+0xc4>
   19808:	df 92       	push	r13
   1980a:	cf 92       	push	r12
   1980c:	88 e4       	ldi	r24, 0x48	; 72
   1980e:	9b e3       	ldi	r25, 0x3B	; 59
   19810:	1f 92       	push	r1
   19812:	9f 93       	push	r25
   19814:	8f 93       	push	r24
   19816:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1981a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1981e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   19822:	0f 90       	pop	r0
   19824:	0f 90       	pop	r0
   19826:	0f 90       	pop	r0
   19828:	0f 90       	pop	r0
   1982a:	0f 90       	pop	r0
   1982c:	92 ff       	sbrs	r25, 2
   1982e:	ae cf       	rjmp	.-164    	; 0x1978c <lif_readdirindex+0x16>
   19830:	6b e8       	ldi	r22, 0x8B	; 139
   19832:	75 e1       	ldi	r23, 0x15	; 21
   19834:	c7 01       	movw	r24, r14
   19836:	fd da       	rcall	.-2566   	; 0x18e32 <lif_dump_vol>
   19838:	02 c0       	rjmp	.+4      	; 0x1983e <lif_readdirindex+0xc8>
   1983a:	01 e0       	ldi	r16, 0x01	; 1
   1983c:	10 e0       	ldi	r17, 0x00	; 0
   1983e:	c8 01       	movw	r24, r16
   19840:	a0 96       	adiw	r28, 0x20	; 32
   19842:	e8 e0       	ldi	r30, 0x08	; 8
   19844:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

00019848 <lif_writedirindex>:
   19848:	a0 e2       	ldi	r26, 0x20	; 32
   1984a:	b0 e0       	ldi	r27, 0x00	; 0
   1984c:	ea e2       	ldi	r30, 0x2A	; 42
   1984e:	fc ec       	ldi	r31, 0xCC	; 204
   19850:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__prologue_saves__+0x10>
   19854:	5c 01       	movw	r10, r24
   19856:	6b 01       	movw	r12, r22
   19858:	5a dd       	rcall	.-1356   	; 0x1930e <lif_check_dir>
   1985a:	7c 01       	movw	r14, r24
   1985c:	89 2b       	or	r24, r25
   1985e:	71 f4       	brne	.+28     	; 0x1987c <lif_writedirindex+0x34>
   19860:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19864:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   19868:	92 fd       	sbrc	r25, 2
   1986a:	03 c0       	rjmp	.+6      	; 0x19872 <lif_writedirindex+0x2a>
   1986c:	e1 2c       	mov	r14, r1
   1986e:	f1 2c       	mov	r15, r1
   19870:	42 c0       	rjmp	.+132    	; 0x198f6 <lif_writedirindex+0xae>
   19872:	6c e9       	ldi	r22, 0x9C	; 156
   19874:	75 e1       	ldi	r23, 0x15	; 21
   19876:	c5 01       	movw	r24, r10
   19878:	dc da       	rcall	.-2632   	; 0x18e32 <lif_dump_vol>
   1987a:	3d c0       	rjmp	.+122    	; 0x198f6 <lif_writedirindex+0xae>
   1987c:	b6 01       	movw	r22, r12
   1987e:	c5 01       	movw	r24, r10
   19880:	1f df       	rcall	.-450    	; 0x196c0 <lif_checkdirindex>
   19882:	89 2b       	or	r24, r25
   19884:	99 f3       	breq	.-26     	; 0x1986c <lif_writedirindex+0x24>
   19886:	f5 01       	movw	r30, r10
   19888:	e6 5a       	subi	r30, 0xA6	; 166
   1988a:	ff 4f       	sbci	r31, 0xFF	; 255
   1988c:	80 81       	ld	r24, Z
   1988e:	91 81       	ldd	r25, Z+1	; 0x01
   19890:	01 96       	adiw	r24, 0x01	; 1
   19892:	19 f4       	brne	.+6      	; 0x1989a <lif_writedirindex+0x52>
   19894:	f5 01       	movw	r30, r10
   19896:	d3 a2       	std	Z+35, r13	; 0x23
   19898:	c2 a2       	std	Z+34, r12	; 0x22
   1989a:	f5 01       	movw	r30, r10
   1989c:	85 a5       	ldd	r24, Z+45	; 0x2d
   1989e:	96 a5       	ldd	r25, Z+46	; 0x2e
   198a0:	a7 a5       	ldd	r26, Z+47	; 0x2f
   198a2:	b0 a9       	ldd	r27, Z+48	; 0x30
   198a4:	ba 2f       	mov	r27, r26
   198a6:	a9 2f       	mov	r26, r25
   198a8:	98 2f       	mov	r25, r24
   198aa:	88 27       	eor	r24, r24
   198ac:	0d 2c       	mov	r0, r13
   198ae:	00 0c       	add	r0, r0
   198b0:	ee 08       	sbc	r14, r14
   198b2:	ff 08       	sbc	r15, r15
   198b4:	35 e0       	ldi	r19, 0x05	; 5
   198b6:	cc 0c       	add	r12, r12
   198b8:	dd 1c       	adc	r13, r13
   198ba:	ee 1c       	adc	r14, r14
   198bc:	ff 1c       	adc	r15, r15
   198be:	3a 95       	dec	r19
   198c0:	d1 f7       	brne	.-12     	; 0x198b6 <lif_writedirindex+0x6e>
   198c2:	c8 0e       	add	r12, r24
   198c4:	d9 1e       	adc	r13, r25
   198c6:	ea 1e       	adc	r14, r26
   198c8:	fb 1e       	adc	r15, r27
   198ca:	be 01       	movw	r22, r28
   198cc:	6f 5f       	subi	r22, 0xFF	; 255
   198ce:	7f 4f       	sbci	r23, 0xFF	; 255
   198d0:	c5 01       	movw	r24, r10
   198d2:	db d8       	rcall	.-3658   	; 0x18a8a <lif_dir2str>
   198d4:	00 e2       	ldi	r16, 0x20	; 32
   198d6:	10 e0       	ldi	r17, 0x00	; 0
   198d8:	a7 01       	movw	r20, r14
   198da:	96 01       	movw	r18, r12
   198dc:	be 01       	movw	r22, r28
   198de:	6f 5f       	subi	r22, 0xFF	; 255
   198e0:	7f 4f       	sbci	r23, 0xFF	; 255
   198e2:	c5 01       	movw	r24, r10
   198e4:	0e 94 fb c2 	call	0x185f6	; 0x185f6 <lif_write>
   198e8:	31 e0       	ldi	r19, 0x01	; 1
   198ea:	20 e0       	ldi	r18, 0x00	; 0
   198ec:	80 97       	sbiw	r24, 0x20	; 32
   198ee:	0c f4       	brge	.+2      	; 0x198f2 <lif_writedirindex+0xaa>
   198f0:	30 e0       	ldi	r19, 0x00	; 0
   198f2:	e3 2e       	mov	r14, r19
   198f4:	f2 2e       	mov	r15, r18
   198f6:	c7 01       	movw	r24, r14
   198f8:	a0 96       	adiw	r28, 0x20	; 32
   198fa:	ea e0       	ldi	r30, 0x0A	; 10
   198fc:	0c 94 59 e5 	jmp	0x1cab2	; 0x1cab2 <__epilogue_restores__+0x10>

00019900 <lif_writedirEOF>:
   19900:	0f 93       	push	r16
   19902:	1f 93       	push	r17
   19904:	cf 93       	push	r28
   19906:	df 93       	push	r29
   19908:	ec 01       	movw	r28, r24
   1990a:	8b 01       	movw	r16, r22
   1990c:	83 da       	rcall	.-2810   	; 0x18e14 <lif_dir_clear>
   1990e:	fe 01       	movw	r30, r28
   19910:	e6 5a       	subi	r30, 0xA6	; 166
   19912:	ff 4f       	sbci	r31, 0xFF	; 255
   19914:	8f ef       	ldi	r24, 0xFF	; 255
   19916:	9f ef       	ldi	r25, 0xFF	; 255
   19918:	91 83       	std	Z+1, r25	; 0x01
   1991a:	80 83       	st	Z, r24
   1991c:	1b a3       	std	Y+35, r17	; 0x23
   1991e:	0a a3       	std	Y+34, r16	; 0x22
   19920:	b8 01       	movw	r22, r16
   19922:	ce 01       	movw	r24, r28
   19924:	91 df       	rcall	.-222    	; 0x19848 <lif_writedirindex>
   19926:	df 91       	pop	r29
   19928:	cf 91       	pop	r28
   1992a:	1f 91       	pop	r17
   1992c:	0f 91       	pop	r16
   1992e:	08 95       	ret

00019930 <lif_updatefree>:
   19930:	2f 92       	push	r2
   19932:	3f 92       	push	r3
   19934:	4f 92       	push	r4
   19936:	5f 92       	push	r5
   19938:	6f 92       	push	r6
   1993a:	7f 92       	push	r7
   1993c:	8f 92       	push	r8
   1993e:	af 92       	push	r10
   19940:	bf 92       	push	r11
   19942:	cf 92       	push	r12
   19944:	df 92       	push	r13
   19946:	ef 92       	push	r14
   19948:	ff 92       	push	r15
   1994a:	0f 93       	push	r16
   1994c:	1f 93       	push	r17
   1994e:	cf 93       	push	r28
   19950:	df 93       	push	r29
   19952:	cd b7       	in	r28, 0x3d	; 61
   19954:	de b7       	in	r29, 0x3e	; 62
   19956:	28 97       	sbiw	r28, 0x08	; 8
   19958:	0f b6       	in	r0, 0x3f	; 63
   1995a:	f8 94       	cli
   1995c:	de bf       	out	0x3e, r29	; 62
   1995e:	0f be       	out	0x3f, r0	; 63
   19960:	cd bf       	out	0x3d, r28	; 61
   19962:	98 87       	std	Y+8, r25	; 0x08
   19964:	8f 83       	std	Y+7, r24	; 0x07
   19966:	fc 01       	movw	r30, r24
   19968:	24 84       	ldd	r2, Z+12	; 0x0c
   1996a:	35 84       	ldd	r3, Z+13	; 0x0d
   1996c:	46 84       	ldd	r4, Z+14	; 0x0e
   1996e:	57 84       	ldd	r5, Z+15	; 0x0f
   19970:	80 89       	ldd	r24, Z+16	; 0x10
   19972:	91 89       	ldd	r25, Z+17	; 0x11
   19974:	a2 89       	ldd	r26, Z+18	; 0x12
   19976:	b3 89       	ldd	r27, Z+19	; 0x13
   19978:	80 8f       	std	Z+24, r24	; 0x18
   1997a:	91 8f       	std	Z+25, r25	; 0x19
   1997c:	a2 8f       	std	Z+26, r26	; 0x1a
   1997e:	b3 8f       	std	Z+27, r27	; 0x1b
   19980:	14 8a       	std	Z+20, r1	; 0x14
   19982:	15 8a       	std	Z+21, r1	; 0x15
   19984:	16 8a       	std	Z+22, r1	; 0x16
   19986:	17 8a       	std	Z+23, r1	; 0x17
   19988:	17 8e       	std	Z+31, r1	; 0x1f
   1998a:	16 8e       	std	Z+30, r1	; 0x1e
   1998c:	15 8e       	std	Z+29, r1	; 0x1d
   1998e:	14 8e       	std	Z+28, r1	; 0x1c
   19990:	11 a2       	std	Z+33, r1	; 0x21
   19992:	10 a2       	std	Z+32, r1	; 0x20
   19994:	13 a2       	std	Z+35, r1	; 0x23
   19996:	12 a2       	std	Z+34, r1	; 0x22
   19998:	cc 24       	eor	r12, r12
   1999a:	c3 94       	inc	r12
   1999c:	d1 2c       	mov	r13, r1
   1999e:	0f ef       	ldi	r16, 0xFF	; 255
   199a0:	1f ef       	ldi	r17, 0xFF	; 255
   199a2:	e6 5a       	subi	r30, 0xA6	; 166
   199a4:	ff 4f       	sbci	r31, 0xFF	; 255
   199a6:	fc 83       	std	Y+4, r31	; 0x04
   199a8:	eb 83       	std	Y+3, r30	; 0x03
   199aa:	af 80       	ldd	r10, Y+7	; 0x07
   199ac:	b8 84       	ldd	r11, Y+8	; 0x08
   199ae:	fc e5       	ldi	r31, 0x5C	; 92
   199b0:	af 0e       	add	r10, r31
   199b2:	b1 1c       	adc	r11, r1
   199b4:	8f 81       	ldd	r24, Y+7	; 0x07
   199b6:	98 85       	ldd	r25, Y+8	; 0x08
   199b8:	80 5a       	subi	r24, 0xA0	; 160
   199ba:	9f 4f       	sbci	r25, 0xFF	; 255
   199bc:	9e 83       	std	Y+6, r25	; 0x06
   199be:	8d 83       	std	Y+5, r24	; 0x05
   199c0:	ef 81       	ldd	r30, Y+7	; 0x07
   199c2:	f8 85       	ldd	r31, Y+8	; 0x08
   199c4:	e1 5b       	subi	r30, 0xB1	; 177
   199c6:	ff 4f       	sbci	r31, 0xFF	; 255
   199c8:	fa 83       	std	Y+2, r31	; 0x02
   199ca:	e9 83       	std	Y+1, r30	; 0x01
   199cc:	8b ef       	ldi	r24, 0xFB	; 251
   199ce:	9a e3       	ldi	r25, 0x3A	; 58
   199d0:	3c 01       	movw	r6, r24
   199d2:	76 01       	movw	r14, r12
   199d4:	21 e0       	ldi	r18, 0x01	; 1
   199d6:	e2 1a       	sub	r14, r18
   199d8:	f1 08       	sbc	r15, r1
   199da:	b7 01       	movw	r22, r14
   199dc:	8f 81       	ldd	r24, Y+7	; 0x07
   199de:	98 85       	ldd	r25, Y+8	; 0x08
   199e0:	ca de       	rcall	.-620    	; 0x19776 <lif_readdirindex>
   199e2:	89 2b       	or	r24, r25
   199e4:	19 f4       	brne	.+6      	; 0x199ec <lif_updatefree+0xbc>
   199e6:	80 e0       	ldi	r24, 0x00	; 0
   199e8:	90 e0       	ldi	r25, 0x00	; 0
   199ea:	92 c0       	rjmp	.+292    	; 0x19b10 <lif_updatefree+0x1e0>
   199ec:	eb 81       	ldd	r30, Y+3	; 0x03
   199ee:	fc 81       	ldd	r31, Y+4	; 0x04
   199f0:	80 81       	ld	r24, Z
   199f2:	91 81       	ldd	r25, Z+1	; 0x01
   199f4:	8f 3f       	cpi	r24, 0xFF	; 255
   199f6:	ff ef       	ldi	r31, 0xFF	; 255
   199f8:	9f 07       	cpc	r25, r31
   199fa:	c1 f4       	brne	.+48     	; 0x19a2c <lif_updatefree+0xfc>
   199fc:	ef 81       	ldd	r30, Y+7	; 0x07
   199fe:	f8 85       	ldd	r31, Y+8	; 0x08
   19a00:	0f 3f       	cpi	r16, 0xFF	; 255
   19a02:	2f ef       	ldi	r18, 0xFF	; 255
   19a04:	12 07       	cpc	r17, r18
   19a06:	09 f4       	brne	.+2      	; 0x19a0a <lif_updatefree+0xda>
   19a08:	79 c0       	rjmp	.+242    	; 0x19afc <lif_updatefree+0x1cc>
   19a0a:	13 a3       	std	Z+35, r17	; 0x23
   19a0c:	02 a3       	std	Z+34, r16	; 0x22
   19a0e:	e0 1a       	sub	r14, r16
   19a10:	f1 0a       	sbc	r15, r17
   19a12:	86 8d       	ldd	r24, Z+30	; 0x1e
   19a14:	97 8d       	ldd	r25, Z+31	; 0x1f
   19a16:	8e 19       	sub	r24, r14
   19a18:	9f 09       	sbc	r25, r15
   19a1a:	97 8f       	std	Z+31, r25	; 0x1f
   19a1c:	86 8f       	std	Z+30, r24	; 0x1e
   19a1e:	b8 01       	movw	r22, r16
   19a20:	cf 01       	movw	r24, r30
   19a22:	6e df       	rcall	.-292    	; 0x19900 <lif_writedirEOF>
   19a24:	89 2b       	or	r24, r25
   19a26:	09 f0       	breq	.+2      	; 0x19a2a <lif_updatefree+0xfa>
   19a28:	6b c0       	rjmp	.+214    	; 0x19b00 <lif_updatefree+0x1d0>
   19a2a:	dd cf       	rjmp	.-70     	; 0x199e6 <lif_updatefree+0xb6>
   19a2c:	89 2b       	or	r24, r25
   19a2e:	81 f4       	brne	.+32     	; 0x19a50 <lif_updatefree+0x120>
   19a30:	0f 3f       	cpi	r16, 0xFF	; 255
   19a32:	ff ef       	ldi	r31, 0xFF	; 255
   19a34:	1f 07       	cpc	r17, r31
   19a36:	09 f4       	brne	.+2      	; 0x19a3a <lif_updatefree+0x10a>
   19a38:	87 01       	movw	r16, r14
   19a3a:	ef 81       	ldd	r30, Y+7	; 0x07
   19a3c:	f8 85       	ldd	r31, Y+8	; 0x08
   19a3e:	86 8d       	ldd	r24, Z+30	; 0x1e
   19a40:	97 8d       	ldd	r25, Z+31	; 0x1f
   19a42:	01 96       	adiw	r24, 0x01	; 1
   19a44:	97 8f       	std	Z+31, r25	; 0x1f
   19a46:	86 8f       	std	Z+30, r24	; 0x1e
   19a48:	ff ef       	ldi	r31, 0xFF	; 255
   19a4a:	cf 1a       	sub	r12, r31
   19a4c:	df 0a       	sbc	r13, r31
   19a4e:	c1 cf       	rjmp	.-126    	; 0x199d2 <lif_updatefree+0xa2>
   19a50:	f5 01       	movw	r30, r10
   19a52:	80 81       	ld	r24, Z
   19a54:	91 81       	ldd	r25, Z+1	; 0x01
   19a56:	a2 81       	ldd	r26, Z+2	; 0x02
   19a58:	b3 81       	ldd	r27, Z+3	; 0x03
   19a5a:	82 15       	cp	r24, r2
   19a5c:	93 05       	cpc	r25, r3
   19a5e:	a4 05       	cpc	r26, r4
   19a60:	b5 05       	cpc	r27, r5
   19a62:	c0 f4       	brcc	.+48     	; 0x19a94 <lif_updatefree+0x164>
   19a64:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19a68:	80 ff       	sbrs	r24, 0
   19a6a:	14 c0       	rjmp	.+40     	; 0x19a94 <lif_updatefree+0x164>
   19a6c:	fa 81       	ldd	r31, Y+2	; 0x02
   19a6e:	ff 93       	push	r31
   19a70:	29 81       	ldd	r18, Y+1	; 0x01
   19a72:	2f 93       	push	r18
   19a74:	ef 81       	ldd	r30, Y+7	; 0x07
   19a76:	f8 85       	ldd	r31, Y+8	; 0x08
   19a78:	81 81       	ldd	r24, Z+1	; 0x01
   19a7a:	8f 93       	push	r24
   19a7c:	80 81       	ld	r24, Z
   19a7e:	8f 93       	push	r24
   19a80:	1f 92       	push	r1
   19a82:	7f 92       	push	r7
   19a84:	6f 92       	push	r6
   19a86:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   19a8a:	0f b6       	in	r0, 0x3f	; 63
   19a8c:	f8 94       	cli
   19a8e:	de bf       	out	0x3e, r29	; 62
   19a90:	0f be       	out	0x3f, r0	; 63
   19a92:	cd bf       	out	0x3d, r28	; 61
   19a94:	ed 81       	ldd	r30, Y+5	; 0x05
   19a96:	fe 81       	ldd	r31, Y+6	; 0x06
   19a98:	80 81       	ld	r24, Z
   19a9a:	91 81       	ldd	r25, Z+1	; 0x01
   19a9c:	a2 81       	ldd	r26, Z+2	; 0x02
   19a9e:	b3 81       	ldd	r27, Z+3	; 0x03
   19aa0:	ef 81       	ldd	r30, Y+7	; 0x07
   19aa2:	f8 85       	ldd	r31, Y+8	; 0x08
   19aa4:	44 89       	ldd	r20, Z+20	; 0x14
   19aa6:	55 89       	ldd	r21, Z+21	; 0x15
   19aa8:	66 89       	ldd	r22, Z+22	; 0x16
   19aaa:	77 89       	ldd	r23, Z+23	; 0x17
   19aac:	48 0f       	add	r20, r24
   19aae:	59 1f       	adc	r21, r25
   19ab0:	6a 1f       	adc	r22, r26
   19ab2:	7b 1f       	adc	r23, r27
   19ab4:	44 8b       	std	Z+20, r20	; 0x14
   19ab6:	55 8b       	std	Z+21, r21	; 0x15
   19ab8:	66 8b       	std	Z+22, r22	; 0x16
   19aba:	77 8b       	std	Z+23, r23	; 0x17
   19abc:	40 8d       	ldd	r20, Z+24	; 0x18
   19abe:	51 8d       	ldd	r21, Z+25	; 0x19
   19ac0:	62 8d       	ldd	r22, Z+26	; 0x1a
   19ac2:	73 8d       	ldd	r23, Z+27	; 0x1b
   19ac4:	48 1b       	sub	r20, r24
   19ac6:	59 0b       	sbc	r21, r25
   19ac8:	6a 0b       	sbc	r22, r26
   19aca:	7b 0b       	sbc	r23, r27
   19acc:	40 8f       	std	Z+24, r20	; 0x18
   19ace:	51 8f       	std	Z+25, r21	; 0x19
   19ad0:	62 8f       	std	Z+26, r22	; 0x1a
   19ad2:	73 8f       	std	Z+27, r23	; 0x1b
   19ad4:	24 8d       	ldd	r18, Z+28	; 0x1c
   19ad6:	35 8d       	ldd	r19, Z+29	; 0x1d
   19ad8:	2f 5f       	subi	r18, 0xFF	; 255
   19ada:	3f 4f       	sbci	r19, 0xFF	; 255
   19adc:	35 8f       	std	Z+29, r19	; 0x1d
   19ade:	24 8f       	std	Z+28, r18	; 0x1c
   19ae0:	f5 01       	movw	r30, r10
   19ae2:	40 81       	ld	r20, Z
   19ae4:	51 81       	ldd	r21, Z+1	; 0x01
   19ae6:	62 81       	ldd	r22, Z+2	; 0x02
   19ae8:	73 81       	ldd	r23, Z+3	; 0x03
   19aea:	1c 01       	movw	r2, r24
   19aec:	2d 01       	movw	r4, r26
   19aee:	24 0e       	add	r2, r20
   19af0:	35 1e       	adc	r3, r21
   19af2:	46 1e       	adc	r4, r22
   19af4:	57 1e       	adc	r5, r23
   19af6:	0f ef       	ldi	r16, 0xFF	; 255
   19af8:	1f ef       	ldi	r17, 0xFF	; 255
   19afa:	a6 cf       	rjmp	.-180    	; 0x19a48 <lif_updatefree+0x118>
   19afc:	f3 a2       	std	Z+35, r15	; 0x23
   19afe:	e2 a2       	std	Z+34, r14	; 0x22
   19b00:	8f ef       	ldi	r24, 0xFF	; 255
   19b02:	9f ef       	ldi	r25, 0xFF	; 255
   19b04:	ef 81       	ldd	r30, Y+7	; 0x07
   19b06:	f8 85       	ldd	r31, Y+8	; 0x08
   19b08:	91 a3       	std	Z+33, r25	; 0x21
   19b0a:	80 a3       	std	Z+32, r24	; 0x20
   19b0c:	8f 81       	ldd	r24, Y+7	; 0x07
   19b0e:	98 85       	ldd	r25, Y+8	; 0x08
   19b10:	28 96       	adiw	r28, 0x08	; 8
   19b12:	0f b6       	in	r0, 0x3f	; 63
   19b14:	f8 94       	cli
   19b16:	de bf       	out	0x3e, r29	; 62
   19b18:	0f be       	out	0x3f, r0	; 63
   19b1a:	cd bf       	out	0x3d, r28	; 61
   19b1c:	df 91       	pop	r29
   19b1e:	cf 91       	pop	r28
   19b20:	1f 91       	pop	r17
   19b22:	0f 91       	pop	r16
   19b24:	ff 90       	pop	r15
   19b26:	ef 90       	pop	r14
   19b28:	df 90       	pop	r13
   19b2a:	cf 90       	pop	r12
   19b2c:	bf 90       	pop	r11
   19b2e:	af 90       	pop	r10
   19b30:	8f 90       	pop	r8
   19b32:	7f 90       	pop	r7
   19b34:	6f 90       	pop	r6
   19b36:	5f 90       	pop	r5
   19b38:	4f 90       	pop	r4
   19b3a:	3f 90       	pop	r3
   19b3c:	2f 90       	pop	r2
   19b3e:	08 95       	ret

00019b40 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19b40:	a6 e1       	ldi	r26, 0x16	; 22
   19b42:	b1 e0       	ldi	r27, 0x01	; 1
   19b44:	e6 ea       	ldi	r30, 0xA6	; 166
   19b46:	fd ec       	ldi	r31, 0xCD	; 205
   19b48:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
   19b4c:	4c 01       	movw	r8, r24
   19b4e:	1b 01       	movw	r2, r22
   19b50:	29 01       	movw	r4, r18
   19b52:	3a 01       	movw	r6, r20
   19b54:	cd 5e       	subi	r28, 0xED	; 237
   19b56:	de 4f       	sbci	r29, 0xFE	; 254
   19b58:	e8 82       	st	Y, r14
   19b5a:	f9 82       	std	Y+1, r15	; 0x01
   19b5c:	0a 83       	std	Y+2, r16	; 0x02
   19b5e:	1b 83       	std	Y+3, r17	; 0x03
   19b60:	c3 51       	subi	r28, 0x13	; 19
   19b62:	d1 40       	sbci	r29, 0x01	; 1
   19b64:	c5 5f       	subi	r28, 0xF5	; 245
   19b66:	de 4f       	sbci	r29, 0xFE	; 254
   19b68:	a8 82       	st	Y, r10
   19b6a:	b9 82       	std	Y+1, r11	; 0x01
   19b6c:	ca 82       	std	Y+2, r12	; 0x02
   19b6e:	db 82       	std	Y+3, r13	; 0x03
   19b70:	cb 50       	subi	r28, 0x0B	; 11
   19b72:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19b74:	80 e0       	ldi	r24, 0x00	; 0
   19b76:	90 e0       	ldi	r25, 0x00	; 0
   19b78:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <time>
   19b7c:	6b 01       	movw	r12, r22
   19b7e:	7c 01       	movw	r14, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19b80:	64 e7       	ldi	r22, 0x74	; 116
   19b82:	70 e0       	ldi	r23, 0x00	; 0
   19b84:	80 e0       	ldi	r24, 0x00	; 0
   19b86:	90 e0       	ldi	r25, 0x00	; 0
   19b88:	0e 94 c1 c1 	call	0x18382	; 0x18382 <lif_calloc>
   19b8c:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   19b8e:	89 2b       	or	r24, r25
   19b90:	09 f4       	brne	.+2      	; 0x19b94 <lif_create_volume+0x54>
   19b92:	f9 c2       	rjmp	.+1522   	; 0x1a186 <lif_create_volume+0x646>
        return(NULL);

	printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19b94:	c2 5f       	subi	r28, 0xF2	; 242
   19b96:	de 4f       	sbci	r29, 0xFE	; 254
   19b98:	28 81       	ld	r18, Y
   19b9a:	ce 50       	subi	r28, 0x0E	; 14
   19b9c:	d1 40       	sbci	r29, 0x01	; 1
   19b9e:	2f 93       	push	r18
   19ba0:	c3 5f       	subi	r28, 0xF3	; 243
   19ba2:	de 4f       	sbci	r29, 0xFE	; 254
   19ba4:	38 81       	ld	r19, Y
   19ba6:	cd 50       	subi	r28, 0x0D	; 13
   19ba8:	d1 40       	sbci	r29, 0x01	; 1
   19baa:	3f 93       	push	r19
   19bac:	c4 5f       	subi	r28, 0xF4	; 244
   19bae:	de 4f       	sbci	r29, 0xFE	; 254
   19bb0:	48 81       	ld	r20, Y
   19bb2:	cc 50       	subi	r28, 0x0C	; 12
   19bb4:	d1 40       	sbci	r29, 0x01	; 1
   19bb6:	4f 93       	push	r20
   19bb8:	c5 5f       	subi	r28, 0xF5	; 245
   19bba:	de 4f       	sbci	r29, 0xFE	; 254
   19bbc:	58 81       	ld	r21, Y
   19bbe:	cb 50       	subi	r28, 0x0B	; 11
   19bc0:	d1 40       	sbci	r29, 0x01	; 1
   19bc2:	5f 93       	push	r21
   19bc4:	ca 5e       	subi	r28, 0xEA	; 234
   19bc6:	de 4f       	sbci	r29, 0xFE	; 254
   19bc8:	88 81       	ld	r24, Y
   19bca:	c6 51       	subi	r28, 0x16	; 22
   19bcc:	d1 40       	sbci	r29, 0x01	; 1
   19bce:	8f 93       	push	r24
   19bd0:	cb 5e       	subi	r28, 0xEB	; 235
   19bd2:	de 4f       	sbci	r29, 0xFE	; 254
   19bd4:	98 81       	ld	r25, Y
   19bd6:	c5 51       	subi	r28, 0x15	; 21
   19bd8:	d1 40       	sbci	r29, 0x01	; 1
   19bda:	9f 93       	push	r25
   19bdc:	cc 5e       	subi	r28, 0xEC	; 236
   19bde:	de 4f       	sbci	r29, 0xFE	; 254
   19be0:	a8 81       	ld	r26, Y
   19be2:	c4 51       	subi	r28, 0x14	; 20
   19be4:	d1 40       	sbci	r29, 0x01	; 1
   19be6:	af 93       	push	r26
   19be8:	cd 5e       	subi	r28, 0xED	; 237
   19bea:	de 4f       	sbci	r29, 0xFE	; 254
   19bec:	b8 81       	ld	r27, Y
   19bee:	c3 51       	subi	r28, 0x13	; 19
   19bf0:	d1 40       	sbci	r29, 0x01	; 1
   19bf2:	bf 93       	push	r27
   19bf4:	7f 92       	push	r7
   19bf6:	6f 92       	push	r6
   19bf8:	5f 92       	push	r5
   19bfa:	4f 92       	push	r4
   19bfc:	3f 92       	push	r3
   19bfe:	2f 92       	push	r2
   19c00:	9f 92       	push	r9
   19c02:	8f 92       	push	r8
   19c04:	86 ed       	ldi	r24, 0xD6	; 214
   19c06:	9b e3       	ldi	r25, 0x3B	; 59
   19c08:	1f 92       	push	r1
   19c0a:	9f 93       	push	r25
   19c0c:	8f 93       	push	r24
   19c0e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
		imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & 0x400)
   19c12:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19c16:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   19c1a:	0f b6       	in	r0, 0x3f	; 63
   19c1c:	f8 94       	cli
   19c1e:	de bf       	out	0x3e, r29	; 62
   19c20:	0f be       	out	0x3f, r0	; 63
   19c22:	cd bf       	out	0x3d, r28	; 61
   19c24:	92 ff       	sbrs	r25, 2
   19c26:	04 c0       	rjmp	.+8      	; 0x19c30 <lif_create_volume+0xf0>
        lif_dump_vol(LIF,"lif_create_volume");
   19c28:	6e ea       	ldi	r22, 0xAE	; 174
   19c2a:	75 e1       	ldi	r23, 0x15	; 21
   19c2c:	c5 01       	movw	r24, r10
    
    lif_image_clear(LIF);
   19c2e:	01 d9       	rcall	.-3582   	; 0x18e32 <lif_dump_vol>
   19c30:	c5 01       	movw	r24, r10

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19c32:	ea d8       	rcall	.-3628   	; 0x18e08 <lif_image_clear>
   19c34:	80 e0       	ldi	r24, 0x00	; 0
   19c36:	90 e8       	ldi	r25, 0x80	; 128
   19c38:	d5 01       	movw	r26, r10
   19c3a:	95 96       	adiw	r26, 0x25	; 37
   19c3c:	9c 93       	st	X, r25
   19c3e:	8e 93       	st	-X, r24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19c40:	94 97       	sbiw	r26, 0x24	; 36
   19c42:	46 e0       	ldi	r20, 0x06	; 6
   19c44:	50 e0       	ldi	r21, 0x00	; 0
   19c46:	b1 01       	movw	r22, r2
   19c48:	c5 01       	movw	r24, r10
   19c4a:	86 96       	adiw	r24, 0x26	; 38
   19c4c:	0e 94 e8 c3 	call	0x187d0	; 0x187d0 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19c50:	f5 01       	movw	r30, r10
   19c52:	45 a6       	std	Z+45, r4	; 0x2d
   19c54:	56 a6       	std	Z+46, r5	; 0x2e
   19c56:	67 a6       	std	Z+47, r6	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   19c58:	70 aa       	std	Z+48, r7	; 0x30
   19c5a:	cd 5e       	subi	r28, 0xED	; 237
   19c5c:	de 4f       	sbci	r29, 0xFE	; 254
   19c5e:	28 81       	ld	r18, Y
   19c60:	39 81       	ldd	r19, Y+1	; 0x01
   19c62:	4a 81       	ldd	r20, Y+2	; 0x02
   19c64:	5b 81       	ldd	r21, Y+3	; 0x03
   19c66:	c3 51       	subi	r28, 0x13	; 19
   19c68:	d1 40       	sbci	r29, 0x01	; 1
   19c6a:	25 ab       	std	Z+53, r18	; 0x35
   19c6c:	36 ab       	std	Z+54, r19	; 0x36
   19c6e:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   19c70:	50 af       	std	Z+56, r21	; 0x38
   19c72:	80 e0       	ldi	r24, 0x00	; 0
   19c74:	90 e1       	ldi	r25, 0x10	; 16
   19c76:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   19c78:	81 ab       	std	Z+49, r24	; 0x31
   19c7a:	fd 96       	adiw	r30, 0x3d	; 61
   19c7c:	10 82       	st	Z, r1
   19c7e:	11 82       	std	Z+1, r1	; 0x01
   19c80:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   19c82:	13 82       	std	Z+3, r1	; 0x03
   19c84:	34 96       	adiw	r30, 0x04	; 4
   19c86:	10 82       	st	Z, r1
   19c88:	11 82       	std	Z+1, r1	; 0x01
   19c8a:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   19c8c:	13 82       	std	Z+3, r1	; 0x03
   19c8e:	34 96       	adiw	r30, 0x04	; 4
   19c90:	10 82       	st	Z, r1
   19c92:	11 82       	std	Z+1, r1	; 0x01
   19c94:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19c96:	13 82       	std	Z+3, r1	; 0x03
   19c98:	a5 01       	movw	r20, r10
   19c9a:	47 5b       	subi	r20, 0xB7	; 183
   19c9c:	5f 4f       	sbci	r21, 0xFF	; 255
   19c9e:	c7 01       	movw	r24, r14
   19ca0:	b6 01       	movw	r22, r12
   19ca2:	0e 94 2d c6 	call	0x18c5a	; 0x18c5a <lif_time2lifbcd>

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   19ca6:	c4 01       	movw	r24, r8
   19ca8:	0e 94 fd c1 	call	0x183fa	; 0x183fa <lif_stralloc>
   19cac:	f5 01       	movw	r30, r10
   19cae:	91 83       	std	Z+1, r25	; 0x01
    if(LIF->name == NULL)
   19cb0:	80 83       	st	Z, r24
   19cb2:	89 2b       	or	r24, r25
   19cb4:	09 f4       	brne	.+2      	; 0x19cb8 <lif_create_volume+0x178>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   19cb6:	5c c2       	rjmp	.+1208   	; 0x1a170 <lif_create_volume+0x630>
   19cb8:	c5 5f       	subi	r28, 0xF5	; 245
   19cba:	de 4f       	sbci	r29, 0xFE	; 254
   19cbc:	28 81       	ld	r18, Y
   19cbe:	39 81       	ldd	r19, Y+1	; 0x01
   19cc0:	4a 81       	ldd	r20, Y+2	; 0x02
   19cc2:	5b 81       	ldd	r21, Y+3	; 0x03
   19cc4:	cb 50       	subi	r28, 0x0B	; 11
   19cc6:	d1 40       	sbci	r29, 0x01	; 1
   19cc8:	20 8b       	std	Z+16, r18	; 0x10
   19cca:	31 8b       	std	Z+17, r19	; 0x11
   19ccc:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   19cce:	53 8b       	std	Z+19, r21	; 0x13
   19cd0:	cd 5e       	subi	r28, 0xED	; 237
   19cd2:	de 4f       	sbci	r29, 0xFE	; 254
   19cd4:	88 81       	ld	r24, Y
   19cd6:	99 81       	ldd	r25, Y+1	; 0x01
   19cd8:	aa 81       	ldd	r26, Y+2	; 0x02
   19cda:	bb 81       	ldd	r27, Y+3	; 0x03
   19cdc:	c3 51       	subi	r28, 0x13	; 19
   19cde:	d1 40       	sbci	r29, 0x01	; 1
   19ce0:	84 0d       	add	r24, r4
   19ce2:	95 1d       	adc	r25, r5
   19ce4:	a6 1d       	adc	r26, r6
   19ce6:	b7 1d       	adc	r27, r7
   19ce8:	f5 01       	movw	r30, r10
   19cea:	84 87       	std	Z+12, r24	; 0x0c
   19cec:	95 87       	std	Z+13, r25	; 0x0d
   19cee:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19cf0:	b7 87       	std	Z+15, r27	; 0x0f
   19cf2:	82 0f       	add	r24, r18
   19cf4:	93 1f       	adc	r25, r19
   19cf6:	a4 1f       	adc	r26, r20
   19cf8:	b5 1f       	adc	r27, r21
   19cfa:	84 83       	std	Z+4, r24	; 0x04
   19cfc:	95 83       	std	Z+5, r25	; 0x05
   19cfe:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19d00:	b7 83       	std	Z+7, r27	; 0x07
   19d02:	ba 2f       	mov	r27, r26
   19d04:	a9 2f       	mov	r26, r25
   19d06:	98 2f       	mov	r25, r24
   19d08:	88 27       	eor	r24, r24
   19d0a:	80 87       	std	Z+8, r24	; 0x08
   19d0c:	91 87       	std	Z+9, r25	; 0x09
   19d0e:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   19d10:	b3 87       	std	Z+11, r27	; 0x0b
   19d12:	20 8f       	std	Z+24, r18	; 0x18
   19d14:	31 8f       	std	Z+25, r19	; 0x19
   19d16:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   19d18:	53 8f       	std	Z+27, r21	; 0x1b
   19d1a:	14 8a       	std	Z+20, r1	; 0x14
   19d1c:	15 8a       	std	Z+21, r1	; 0x15
   19d1e:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   19d20:	17 8a       	std	Z+23, r1	; 0x17
   19d22:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   19d24:	14 8e       	std	Z+28, r1	; 0x1c
   19d26:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   19d28:	16 8e       	std	Z+30, r1	; 0x1e
   19d2a:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   19d2c:	10 a2       	std	Z+32, r1	; 0x20
   19d2e:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   19d30:	12 a2       	std	Z+34, r1	; 0x22
   19d32:	c1 2c       	mov	r12, r1
   19d34:	dd 24       	eor	r13, r13
   19d36:	d3 94       	inc	r13
   19d38:	9e 01       	movw	r18, r28
   19d3a:	2f 5f       	subi	r18, 0xFF	; 255
   19d3c:	3f 4f       	sbci	r19, 0xFF	; 255
   19d3e:	79 01       	movw	r14, r18
   19d40:	d9 01       	movw	r26, r18
   19d42:	f6 01       	movw	r30, r12
   19d44:	1d 92       	st	X+, r1
   19d46:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   19d48:	e9 f7       	brne	.-6      	; 0x19d44 <lif_create_volume+0x204>
   19d4a:	b9 01       	movw	r22, r18
   19d4c:	c5 01       	movw	r24, r10
   19d4e:	0e 94 25 c4 	call	0x1884a	; 0x1884a <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19d52:	6e e9       	ldi	r22, 0x9E	; 158
   19d54:	78 e0       	ldi	r23, 0x08	; 8
   19d56:	d5 01       	movw	r26, r10
   19d58:	8d 91       	ld	r24, X+
   19d5a:	9c 91       	ld	r25, X
   19d5c:	0e 94 1c c2 	call	0x18438	; 0x18438 <lif_open>
   19d60:	f5 01       	movw	r30, r10
   19d62:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   19d64:	82 83       	std	Z+2, r24	; 0x02
   19d66:	89 2b       	or	r24, r25
   19d68:	09 f4       	brne	.+2      	; 0x19d6c <lif_create_volume+0x22c>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19d6a:	02 c2       	rjmp	.+1028   	; 0x1a170 <lif_create_volume+0x630>
   19d6c:	00 e0       	ldi	r16, 0x00	; 0
   19d6e:	11 e0       	ldi	r17, 0x01	; 1
   19d70:	20 e0       	ldi	r18, 0x00	; 0
   19d72:	30 e0       	ldi	r19, 0x00	; 0
   19d74:	a9 01       	movw	r20, r18
   19d76:	b7 01       	movw	r22, r14
   19d78:	c5 01       	movw	r24, r10
   19d7a:	0e 94 fb c2 	call	0x185f6	; 0x185f6 <lif_write>
   19d7e:	9c 01       	movw	r18, r24
   19d80:	99 0f       	add	r25, r25
   19d82:	44 0b       	sbc	r20, r20
   19d84:	55 0b       	sbc	r21, r21
   19d86:	c9 5f       	subi	r28, 0xF9	; 249
   19d88:	de 4f       	sbci	r29, 0xFE	; 254
   19d8a:	28 83       	st	Y, r18
   19d8c:	39 83       	std	Y+1, r19	; 0x01
   19d8e:	4a 83       	std	Y+2, r20	; 0x02
   19d90:	5b 83       	std	Y+3, r21	; 0x03
   19d92:	c7 50       	subi	r28, 0x07	; 7

    if(size < LIF_SECTOR_SIZE)
   19d94:	d1 40       	sbci	r29, 0x01	; 1
   19d96:	2f 3f       	cpi	r18, 0xFF	; 255
   19d98:	31 05       	cpc	r19, r1
   19d9a:	41 05       	cpc	r20, r1
   19d9c:	51 05       	cpc	r21, r1
   19d9e:	09 f0       	breq	.+2      	; 0x19da2 <lif_create_volume+0x262>
   19da0:	0c f4       	brge	.+2      	; 0x19da4 <lif_create_volume+0x264>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   19da2:	e6 c1       	rjmp	.+972    	; 0x1a170 <lif_create_volume+0x630>
   19da4:	d7 01       	movw	r26, r14
   19da6:	f6 01       	movw	r30, r12
   19da8:	1d 92       	st	X+, r1
   19daa:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19dac:	e9 f7       	brne	.-6      	; 0x19da8 <lif_create_volume+0x268>
   19dae:	21 e0       	ldi	r18, 0x01	; 1
   19db0:	30 e0       	ldi	r19, 0x00	; 0
   19db2:	40 e0       	ldi	r20, 0x00	; 0
   19db4:	50 e0       	ldi	r21, 0x00	; 0
   19db6:	cd 5f       	subi	r28, 0xFD	; 253
   19db8:	de 4f       	sbci	r29, 0xFE	; 254
   19dba:	28 83       	st	Y, r18
   19dbc:	39 83       	std	Y+1, r19	; 0x01
   19dbe:	4a 83       	std	Y+2, r20	; 0x02
   19dc0:	5b 83       	std	Y+3, r21	; 0x03
   19dc2:	c3 50       	subi	r28, 0x03	; 3
   19dc4:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("\tWrote: %ld\r", count);
   19dc6:	47 01       	movw	r8, r14
   19dc8:	89 ec       	ldi	r24, 0xC9	; 201
   19dca:	9b e3       	ldi	r25, 0x3B	; 59


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19dcc:	6c 01       	movw	r12, r24
   19dce:	cd 5f       	subi	r28, 0xFD	; 253
   19dd0:	de 4f       	sbci	r29, 0xFE	; 254
   19dd2:	88 81       	ld	r24, Y
   19dd4:	99 81       	ldd	r25, Y+1	; 0x01
   19dd6:	aa 81       	ldd	r26, Y+2	; 0x02
   19dd8:	bb 81       	ldd	r27, Y+3	; 0x03
   19dda:	c3 50       	subi	r28, 0x03	; 3
   19ddc:	d1 40       	sbci	r29, 0x01	; 1
   19dde:	84 15       	cp	r24, r4
   19de0:	95 05       	cpc	r25, r5
   19de2:	a6 05       	cpc	r26, r6
   19de4:	b7 05       	cpc	r27, r7
   19de6:	0c f0       	brlt	.+2      	; 0x19dea <lif_create_volume+0x2aa>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19de8:	64 c0       	rjmp	.+200    	; 0x19eb2 <lif_create_volume+0x372>
   19dea:	00 e0       	ldi	r16, 0x00	; 0
   19dec:	11 e0       	ldi	r17, 0x01	; 1
   19dee:	c9 5f       	subi	r28, 0xF9	; 249
   19df0:	de 4f       	sbci	r29, 0xFE	; 254
   19df2:	28 81       	ld	r18, Y
   19df4:	39 81       	ldd	r19, Y+1	; 0x01
   19df6:	4a 81       	ldd	r20, Y+2	; 0x02
   19df8:	5b 81       	ldd	r21, Y+3	; 0x03
   19dfa:	c7 50       	subi	r28, 0x07	; 7
   19dfc:	d1 40       	sbci	r29, 0x01	; 1
   19dfe:	b4 01       	movw	r22, r8
   19e00:	c5 01       	movw	r24, r10
   19e02:	0e 94 fb c2 	call	0x185f6	; 0x185f6 <lif_write>
   19e06:	09 2e       	mov	r0, r25
   19e08:	00 0c       	add	r0, r0
   19e0a:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19e0c:	bb 0b       	sbc	r27, r27
   19e0e:	8f 3f       	cpi	r24, 0xFF	; 255
   19e10:	91 05       	cpc	r25, r1
   19e12:	a1 05       	cpc	r26, r1
   19e14:	b1 05       	cpc	r27, r1
   19e16:	09 f0       	breq	.+2      	; 0x19e1a <lif_create_volume+0x2da>
   19e18:	0c f4       	brge	.+2      	; 0x19e1c <lif_create_volume+0x2dc>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19e1a:	aa c1       	rjmp	.+852    	; 0x1a170 <lif_create_volume+0x630>
   19e1c:	c9 5f       	subi	r28, 0xF9	; 249
   19e1e:	de 4f       	sbci	r29, 0xFE	; 254
   19e20:	28 81       	ld	r18, Y
   19e22:	39 81       	ldd	r19, Y+1	; 0x01
   19e24:	4a 81       	ldd	r20, Y+2	; 0x02
   19e26:	5b 81       	ldd	r21, Y+3	; 0x03
   19e28:	c7 50       	subi	r28, 0x07	; 7
   19e2a:	d1 40       	sbci	r29, 0x01	; 1
   19e2c:	28 0f       	add	r18, r24
   19e2e:	39 1f       	adc	r19, r25
   19e30:	4a 1f       	adc	r20, r26
   19e32:	5b 1f       	adc	r21, r27
   19e34:	c9 5f       	subi	r28, 0xF9	; 249
   19e36:	de 4f       	sbci	r29, 0xFE	; 254
   19e38:	28 83       	st	Y, r18
   19e3a:	39 83       	std	Y+1, r19	; 0x01
   19e3c:	4a 83       	std	Y+2, r20	; 0x02
   19e3e:	5b 83       	std	Y+3, r21	; 0x03
   19e40:	c7 50       	subi	r28, 0x07	; 7
            printf("\tWrote: %ld\r", count);
   19e42:	d1 40       	sbci	r29, 0x01	; 1
   19e44:	ca 5f       	subi	r28, 0xFA	; 250
   19e46:	de 4f       	sbci	r29, 0xFE	; 254
   19e48:	38 81       	ld	r19, Y
   19e4a:	c6 50       	subi	r28, 0x06	; 6
   19e4c:	d1 40       	sbci	r29, 0x01	; 1
   19e4e:	3f 93       	push	r19
   19e50:	cb 5f       	subi	r28, 0xFB	; 251
   19e52:	de 4f       	sbci	r29, 0xFE	; 254
   19e54:	48 81       	ld	r20, Y
   19e56:	c5 50       	subi	r28, 0x05	; 5
   19e58:	d1 40       	sbci	r29, 0x01	; 1
   19e5a:	4f 93       	push	r20
   19e5c:	cc 5f       	subi	r28, 0xFC	; 252
   19e5e:	de 4f       	sbci	r29, 0xFE	; 254
   19e60:	58 81       	ld	r21, Y
   19e62:	c4 50       	subi	r28, 0x04	; 4
   19e64:	d1 40       	sbci	r29, 0x01	; 1
   19e66:	5f 93       	push	r21
   19e68:	cd 5f       	subi	r28, 0xFD	; 253
   19e6a:	de 4f       	sbci	r29, 0xFE	; 254
   19e6c:	88 81       	ld	r24, Y
   19e6e:	c3 50       	subi	r28, 0x03	; 3
   19e70:	d1 40       	sbci	r29, 0x01	; 1
   19e72:	8f 93       	push	r24
   19e74:	1f 92       	push	r1
   19e76:	df 92       	push	r13
   19e78:	cf 92       	push	r12
   19e7a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19e7e:	cd 5f       	subi	r28, 0xFD	; 253
   19e80:	de 4f       	sbci	r29, 0xFE	; 254
   19e82:	28 81       	ld	r18, Y
   19e84:	39 81       	ldd	r19, Y+1	; 0x01
   19e86:	4a 81       	ldd	r20, Y+2	; 0x02
   19e88:	5b 81       	ldd	r21, Y+3	; 0x03
   19e8a:	c3 50       	subi	r28, 0x03	; 3
   19e8c:	d1 40       	sbci	r29, 0x01	; 1
   19e8e:	2f 5f       	subi	r18, 0xFF	; 255
   19e90:	3f 4f       	sbci	r19, 0xFF	; 255
   19e92:	4f 4f       	sbci	r20, 0xFF	; 255
   19e94:	5f 4f       	sbci	r21, 0xFF	; 255
   19e96:	cd 5f       	subi	r28, 0xFD	; 253
   19e98:	de 4f       	sbci	r29, 0xFE	; 254
   19e9a:	28 83       	st	Y, r18
   19e9c:	39 83       	std	Y+1, r19	; 0x01
   19e9e:	4a 83       	std	Y+2, r20	; 0x02
   19ea0:	5b 83       	std	Y+3, r21	; 0x03
   19ea2:	c3 50       	subi	r28, 0x03	; 3
   19ea4:	d1 40       	sbci	r29, 0x01	; 1
   19ea6:	0f b6       	in	r0, 0x3f	; 63
   19ea8:	f8 94       	cli
   19eaa:	de bf       	out	0x3e, r29	; 62
   19eac:	0f be       	out	0x3f, r0	; 63
   19eae:	cd bf       	out	0x3d, r28	; 61
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   19eb0:	8e cf       	rjmp	.-228    	; 0x19dce <lif_create_volume+0x28e>
   19eb2:	c5 01       	movw	r24, r10
   19eb4:	0e 94 0a c7 	call	0x18e14	; 0x18e14 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19eb8:	8f ef       	ldi	r24, 0xFF	; 255
   19eba:	9f ef       	ldi	r25, 0xFF	; 255
   19ebc:	f5 01       	movw	r30, r10
   19ebe:	e6 5a       	subi	r30, 0xA6	; 166
   19ec0:	ff 4f       	sbci	r31, 0xFF	; 255
   19ec2:	91 83       	std	Z+1, r25	; 0x01
   19ec4:	80 83       	st	Z, r24
   19ec6:	74 01       	movw	r14, r8
   19ec8:	6e 01       	movw	r12, r28
   19eca:	91 e0       	ldi	r25, 0x01	; 1
   19ecc:	c9 0e       	add	r12, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19ece:	d9 1e       	adc	r13, r25
   19ed0:	b7 01       	movw	r22, r14
   19ed2:	c5 01       	movw	r24, r10
   19ed4:	0e 94 45 c5 	call	0x18a8a	; 0x18a8a <lif_dir2str>
   19ed8:	a0 e2       	ldi	r26, 0x20	; 32
   19eda:	ea 0e       	add	r14, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19edc:	f1 1c       	adc	r15, r1
   19ede:	ce 14       	cp	r12, r14
   19ee0:	df 04       	cpc	r13, r15
   19ee2:	b1 f7       	brne	.-20     	; 0x19ed0 <lif_create_volume+0x390>
   19ee4:	c1 2c       	mov	r12, r1
   19ee6:	d1 2c       	mov	r13, r1
   19ee8:	76 01       	movw	r14, r12
   19eea:	fe 01       	movw	r30, r28
   19eec:	31 96       	adiw	r30, 0x01	; 1
   19eee:	cf 5f       	subi	r28, 0xFF	; 255
   19ef0:	de 4f       	sbci	r29, 0xFE	; 254
   19ef2:	f9 83       	std	Y+1, r31	; 0x01
   19ef4:	e8 83       	st	Y, r30
   19ef6:	c1 50       	subi	r28, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19ef8:	d1 40       	sbci	r29, 0x01	; 1
   19efa:	84 e6       	ldi	r24, 0x64	; 100
   19efc:	28 2e       	mov	r2, r24
   19efe:	31 2c       	mov	r3, r1
   19f00:	41 2c       	mov	r4, r1
            printf("\tWrote: %ld\r", count);
   19f02:	51 2c       	mov	r5, r1
   19f04:	8c eb       	ldi	r24, 0xBC	; 188
   19f06:	9b e3       	ldi	r25, 0x3B	; 59
   19f08:	3c 01       	movw	r6, r24
   19f0a:	81 2c       	mov	r8, r1
   19f0c:	cd 5f       	subi	r28, 0xFD	; 253
   19f0e:	de 4f       	sbci	r29, 0xFE	; 254
   19f10:	28 81       	ld	r18, Y
   19f12:	39 81       	ldd	r19, Y+1	; 0x01
   19f14:	4a 81       	ldd	r20, Y+2	; 0x02
   19f16:	5b 81       	ldd	r21, Y+3	; 0x03
   19f18:	c3 50       	subi	r28, 0x03	; 3
   19f1a:	d1 40       	sbci	r29, 0x01	; 1
   19f1c:	2c 0d       	add	r18, r12
   19f1e:	3d 1d       	adc	r19, r13
   19f20:	4e 1d       	adc	r20, r14
   19f22:	5f 1d       	adc	r21, r15
   19f24:	c1 5f       	subi	r28, 0xF1	; 241
   19f26:	de 4f       	sbci	r29, 0xFE	; 254
   19f28:	28 83       	st	Y, r18
   19f2a:	39 83       	std	Y+1, r19	; 0x01
   19f2c:	4a 83       	std	Y+2, r20	; 0x02
   19f2e:	5b 83       	std	Y+3, r21	; 0x03
   19f30:	cf 50       	subi	r28, 0x0F	; 15
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19f32:	d1 40       	sbci	r29, 0x01	; 1
   19f34:	cd 5e       	subi	r28, 0xED	; 237
   19f36:	de 4f       	sbci	r29, 0xFE	; 254
   19f38:	88 81       	ld	r24, Y
   19f3a:	99 81       	ldd	r25, Y+1	; 0x01
   19f3c:	aa 81       	ldd	r26, Y+2	; 0x02
   19f3e:	bb 81       	ldd	r27, Y+3	; 0x03
   19f40:	c3 51       	subi	r28, 0x13	; 19
   19f42:	d1 40       	sbci	r29, 0x01	; 1
   19f44:	c8 16       	cp	r12, r24
   19f46:	d9 06       	cpc	r13, r25
   19f48:	ea 06       	cpc	r14, r26
   19f4a:	fb 06       	cpc	r15, r27
   19f4c:	0c f0       	brlt	.+2      	; 0x19f50 <lif_create_volume+0x410>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19f4e:	67 c0       	rjmp	.+206    	; 0x1a01e <lif_create_volume+0x4de>
   19f50:	00 e0       	ldi	r16, 0x00	; 0
   19f52:	11 e0       	ldi	r17, 0x01	; 1
   19f54:	c9 5f       	subi	r28, 0xF9	; 249
   19f56:	de 4f       	sbci	r29, 0xFE	; 254
   19f58:	28 81       	ld	r18, Y
   19f5a:	39 81       	ldd	r19, Y+1	; 0x01
   19f5c:	4a 81       	ldd	r20, Y+2	; 0x02
   19f5e:	5b 81       	ldd	r21, Y+3	; 0x03
   19f60:	c7 50       	subi	r28, 0x07	; 7
   19f62:	d1 40       	sbci	r29, 0x01	; 1
   19f64:	be 01       	movw	r22, r28
   19f66:	6f 5f       	subi	r22, 0xFF	; 255
   19f68:	7f 4f       	sbci	r23, 0xFF	; 255
   19f6a:	c5 01       	movw	r24, r10
   19f6c:	0e 94 fb c2 	call	0x185f6	; 0x185f6 <lif_write>
   19f70:	09 2e       	mov	r0, r25
   19f72:	00 0c       	add	r0, r0
   19f74:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19f76:	bb 0b       	sbc	r27, r27
   19f78:	8f 3f       	cpi	r24, 0xFF	; 255
   19f7a:	91 05       	cpc	r25, r1
   19f7c:	a1 05       	cpc	r26, r1
   19f7e:	b1 05       	cpc	r27, r1
   19f80:	09 f0       	breq	.+2      	; 0x19f84 <lif_create_volume+0x444>
   19f82:	0c f4       	brge	.+2      	; 0x19f86 <lif_create_volume+0x446>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19f84:	f5 c0       	rjmp	.+490    	; 0x1a170 <lif_create_volume+0x630>
   19f86:	c9 5f       	subi	r28, 0xF9	; 249
   19f88:	de 4f       	sbci	r29, 0xFE	; 254
   19f8a:	28 81       	ld	r18, Y
   19f8c:	39 81       	ldd	r19, Y+1	; 0x01
   19f8e:	4a 81       	ldd	r20, Y+2	; 0x02
   19f90:	5b 81       	ldd	r21, Y+3	; 0x03
   19f92:	c7 50       	subi	r28, 0x07	; 7
   19f94:	d1 40       	sbci	r29, 0x01	; 1
   19f96:	28 0f       	add	r18, r24
   19f98:	39 1f       	adc	r19, r25
   19f9a:	4a 1f       	adc	r20, r26
   19f9c:	5b 1f       	adc	r21, r27
   19f9e:	c9 5f       	subi	r28, 0xF9	; 249
   19fa0:	de 4f       	sbci	r29, 0xFE	; 254
   19fa2:	28 83       	st	Y, r18
   19fa4:	39 83       	std	Y+1, r19	; 0x01
   19fa6:	4a 83       	std	Y+2, r20	; 0x02
   19fa8:	5b 83       	std	Y+3, r21	; 0x03
   19faa:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   19fac:	d1 40       	sbci	r29, 0x01	; 1
   19fae:	c1 5f       	subi	r28, 0xF1	; 241
   19fb0:	de 4f       	sbci	r29, 0xFE	; 254
   19fb2:	68 81       	ld	r22, Y
   19fb4:	79 81       	ldd	r23, Y+1	; 0x01
   19fb6:	8a 81       	ldd	r24, Y+2	; 0x02
   19fb8:	9b 81       	ldd	r25, Y+3	; 0x03
   19fba:	cf 50       	subi	r28, 0x0F	; 15
   19fbc:	d1 40       	sbci	r29, 0x01	; 1
   19fbe:	a2 01       	movw	r20, r4
   19fc0:	91 01       	movw	r18, r2
   19fc2:	0e 94 d5 e4 	call	0x1c9aa	; 0x1c9aa <__divmodsi4>
   19fc6:	67 2b       	or	r22, r23
   19fc8:	68 2b       	or	r22, r24
   19fca:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   19fcc:	11 f5       	brne	.+68     	; 0x1a012 <lif_create_volume+0x4d2>
   19fce:	ce 5e       	subi	r28, 0xEE	; 238
   19fd0:	de 4f       	sbci	r29, 0xFE	; 254
   19fd2:	38 81       	ld	r19, Y
   19fd4:	c2 51       	subi	r28, 0x12	; 18
   19fd6:	d1 40       	sbci	r29, 0x01	; 1
   19fd8:	3f 93       	push	r19
   19fda:	cf 5e       	subi	r28, 0xEF	; 239
   19fdc:	de 4f       	sbci	r29, 0xFE	; 254
   19fde:	48 81       	ld	r20, Y
   19fe0:	c1 51       	subi	r28, 0x11	; 17
   19fe2:	d1 40       	sbci	r29, 0x01	; 1
   19fe4:	4f 93       	push	r20
   19fe6:	c0 5f       	subi	r28, 0xF0	; 240
   19fe8:	de 4f       	sbci	r29, 0xFE	; 254
   19fea:	58 81       	ld	r21, Y
   19fec:	c0 51       	subi	r28, 0x10	; 16
   19fee:	d1 40       	sbci	r29, 0x01	; 1
   19ff0:	5f 93       	push	r21
   19ff2:	c1 5f       	subi	r28, 0xF1	; 241
   19ff4:	de 4f       	sbci	r29, 0xFE	; 254
   19ff6:	88 81       	ld	r24, Y
   19ff8:	cf 50       	subi	r28, 0x0F	; 15
   19ffa:	d1 40       	sbci	r29, 0x01	; 1
   19ffc:	8f 93       	push	r24
   19ffe:	1f 92       	push	r1
   1a000:	7f 92       	push	r7
   1a002:	6f 92       	push	r6
   1a004:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1a008:	0f b6       	in	r0, 0x3f	; 63
   1a00a:	f8 94       	cli
   1a00c:	de bf       	out	0x3e, r29	; 62
   1a00e:	0f be       	out	0x3f, r0	; 63
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1a010:	cd bf       	out	0x3d, r28	; 61
   1a012:	bf ef       	ldi	r27, 0xFF	; 255
   1a014:	cb 1a       	sub	r12, r27
   1a016:	db 0a       	sbc	r13, r27
   1a018:	eb 0a       	sbc	r14, r27
   1a01a:	fb 0a       	sbc	r15, r27
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1a01c:	77 cf       	rjmp	.-274    	; 0x19f0c <lif_create_volume+0x3cc>
   1a01e:	80 e0       	ldi	r24, 0x00	; 0
   1a020:	91 e0       	ldi	r25, 0x01	; 1
   1a022:	cf 5f       	subi	r28, 0xFF	; 255
   1a024:	de 4f       	sbci	r29, 0xFE	; 254
   1a026:	a8 81       	ld	r26, Y
   1a028:	b9 81       	ldd	r27, Y+1	; 0x01
   1a02a:	c1 50       	subi	r28, 0x01	; 1
   1a02c:	d1 40       	sbci	r29, 0x01	; 1
   1a02e:	fc 01       	movw	r30, r24
   1a030:	1d 92       	st	X+, r1
   1a032:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   1a034:	e9 f7       	brne	.-6      	; 0x1a030 <lif_create_volume+0x4f0>
   1a036:	41 2c       	mov	r4, r1
   1a038:	51 2c       	mov	r5, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   1a03a:	32 01       	movw	r6, r4
   1a03c:	8f ea       	ldi	r24, 0xAF	; 175
   1a03e:	9b e3       	ldi	r25, 0x3B	; 59
   1a040:	9c 01       	movw	r18, r24
   1a042:	40 e0       	ldi	r20, 0x00	; 0
   1a044:	cd 5f       	subi	r28, 0xFD	; 253
   1a046:	de 4f       	sbci	r29, 0xFE	; 254
   1a048:	28 83       	st	Y, r18
   1a04a:	39 83       	std	Y+1, r19	; 0x01
   1a04c:	4a 83       	std	Y+2, r20	; 0x02
   1a04e:	c3 50       	subi	r28, 0x03	; 3
   1a050:	d1 40       	sbci	r29, 0x01	; 1
   1a052:	c1 5f       	subi	r28, 0xF1	; 241
   1a054:	de 4f       	sbci	r29, 0xFE	; 254
   1a056:	c8 80       	ld	r12, Y
   1a058:	d9 80       	ldd	r13, Y+1	; 0x01
   1a05a:	ea 80       	ldd	r14, Y+2	; 0x02
   1a05c:	fb 80       	ldd	r15, Y+3	; 0x03
   1a05e:	cf 50       	subi	r28, 0x0F	; 15
   1a060:	d1 40       	sbci	r29, 0x01	; 1
   1a062:	c4 0c       	add	r12, r4
   1a064:	d5 1c       	adc	r13, r5
   1a066:	e6 1c       	adc	r14, r6
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a068:	f7 1c       	adc	r15, r7
   1a06a:	c5 5f       	subi	r28, 0xF5	; 245
   1a06c:	de 4f       	sbci	r29, 0xFE	; 254
   1a06e:	28 81       	ld	r18, Y
   1a070:	39 81       	ldd	r19, Y+1	; 0x01
   1a072:	4a 81       	ldd	r20, Y+2	; 0x02
   1a074:	5b 81       	ldd	r21, Y+3	; 0x03
   1a076:	cb 50       	subi	r28, 0x0B	; 11
   1a078:	d1 40       	sbci	r29, 0x01	; 1
   1a07a:	42 16       	cp	r4, r18
   1a07c:	53 06       	cpc	r5, r19
   1a07e:	64 06       	cpc	r6, r20
   1a080:	75 06       	cpc	r7, r21
   1a082:	0c f0       	brlt	.+2      	; 0x1a086 <lif_create_volume+0x546>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a084:	59 c0       	rjmp	.+178    	; 0x1a138 <lif_create_volume+0x5f8>
   1a086:	00 e0       	ldi	r16, 0x00	; 0
   1a088:	11 e0       	ldi	r17, 0x01	; 1
   1a08a:	c9 5f       	subi	r28, 0xF9	; 249
   1a08c:	de 4f       	sbci	r29, 0xFE	; 254
   1a08e:	28 81       	ld	r18, Y
   1a090:	39 81       	ldd	r19, Y+1	; 0x01
   1a092:	4a 81       	ldd	r20, Y+2	; 0x02
   1a094:	5b 81       	ldd	r21, Y+3	; 0x03
   1a096:	c7 50       	subi	r28, 0x07	; 7
   1a098:	d1 40       	sbci	r29, 0x01	; 1
   1a09a:	be 01       	movw	r22, r28
   1a09c:	6f 5f       	subi	r22, 0xFF	; 255
   1a09e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a0a0:	c5 01       	movw	r24, r10
   1a0a2:	0e 94 fb c2 	call	0x185f6	; 0x185f6 <lif_write>
   1a0a6:	09 2e       	mov	r0, r25
   1a0a8:	00 0c       	add	r0, r0
   1a0aa:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a0ac:	bb 0b       	sbc	r27, r27
   1a0ae:	8f 3f       	cpi	r24, 0xFF	; 255
   1a0b0:	91 05       	cpc	r25, r1
   1a0b2:	a1 05       	cpc	r26, r1
   1a0b4:	b1 05       	cpc	r27, r1
   1a0b6:	09 f0       	breq	.+2      	; 0x1a0ba <lif_create_volume+0x57a>
   1a0b8:	0c f4       	brge	.+2      	; 0x1a0bc <lif_create_volume+0x57c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a0ba:	5a c0       	rjmp	.+180    	; 0x1a170 <lif_create_volume+0x630>
   1a0bc:	c9 5f       	subi	r28, 0xF9	; 249
   1a0be:	de 4f       	sbci	r29, 0xFE	; 254
   1a0c0:	28 81       	ld	r18, Y
   1a0c2:	39 81       	ldd	r19, Y+1	; 0x01
   1a0c4:	4a 81       	ldd	r20, Y+2	; 0x02
   1a0c6:	5b 81       	ldd	r21, Y+3	; 0x03
   1a0c8:	c7 50       	subi	r28, 0x07	; 7
   1a0ca:	d1 40       	sbci	r29, 0x01	; 1
   1a0cc:	28 0f       	add	r18, r24
   1a0ce:	39 1f       	adc	r19, r25
   1a0d0:	4a 1f       	adc	r20, r26
   1a0d2:	5b 1f       	adc	r21, r27
   1a0d4:	c9 5f       	subi	r28, 0xF9	; 249
   1a0d6:	de 4f       	sbci	r29, 0xFE	; 254
   1a0d8:	28 83       	st	Y, r18
   1a0da:	39 83       	std	Y+1, r19	; 0x01
   1a0dc:	4a 83       	std	Y+2, r20	; 0x02
   1a0de:	5b 83       	std	Y+3, r21	; 0x03
   1a0e0:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   1a0e2:	d1 40       	sbci	r29, 0x01	; 1
   1a0e4:	c7 01       	movw	r24, r14
   1a0e6:	b6 01       	movw	r22, r12
   1a0e8:	24 e6       	ldi	r18, 0x64	; 100
   1a0ea:	30 e0       	ldi	r19, 0x00	; 0
   1a0ec:	40 e0       	ldi	r20, 0x00	; 0
   1a0ee:	50 e0       	ldi	r21, 0x00	; 0
   1a0f0:	0e 94 d5 e4 	call	0x1c9aa	; 0x1c9aa <__divmodsi4>
   1a0f4:	67 2b       	or	r22, r23
   1a0f6:	68 2b       	or	r22, r24
   1a0f8:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   1a0fa:	c1 f4       	brne	.+48     	; 0x1a12c <lif_create_volume+0x5ec>
   1a0fc:	ff 92       	push	r15
   1a0fe:	ef 92       	push	r14
   1a100:	df 92       	push	r13
   1a102:	cf 92       	push	r12
   1a104:	1f 92       	push	r1
   1a106:	cc 5f       	subi	r28, 0xFC	; 252
   1a108:	de 4f       	sbci	r29, 0xFE	; 254
   1a10a:	38 81       	ld	r19, Y
   1a10c:	c4 50       	subi	r28, 0x04	; 4
   1a10e:	d1 40       	sbci	r29, 0x01	; 1
   1a110:	3f 93       	push	r19
   1a112:	cd 5f       	subi	r28, 0xFD	; 253
   1a114:	de 4f       	sbci	r29, 0xFE	; 254
   1a116:	48 81       	ld	r20, Y
   1a118:	c3 50       	subi	r28, 0x03	; 3
   1a11a:	d1 40       	sbci	r29, 0x01	; 1
   1a11c:	4f 93       	push	r20
   1a11e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1a122:	0f b6       	in	r0, 0x3f	; 63
   1a124:	f8 94       	cli
   1a126:	de bf       	out	0x3e, r29	; 62
   1a128:	0f be       	out	0x3f, r0	; 63
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a12a:	cd bf       	out	0x3d, r28	; 61
   1a12c:	9f ef       	ldi	r25, 0xFF	; 255
   1a12e:	49 1a       	sub	r4, r25
   1a130:	59 0a       	sbc	r5, r25
   1a132:	69 0a       	sbc	r6, r25
   1a134:	79 0a       	sbc	r7, r25
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   1a136:	8d cf       	rjmp	.-230    	; 0x1a052 <lif_create_volume+0x512>
   1a138:	ff 92       	push	r15
   1a13a:	ef 92       	push	r14
   1a13c:	df 92       	push	r13
   1a13e:	cf 92       	push	r12
   1a140:	82 ea       	ldi	r24, 0xA2	; 162
   1a142:	9b e3       	ldi	r25, 0x3B	; 59
   1a144:	1f 92       	push	r1
   1a146:	9f 93       	push	r25
   1a148:	8f 93       	push	r24
   1a14a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   1a14e:	8f ef       	ldi	r24, 0xFF	; 255
   1a150:	9f ef       	ldi	r25, 0xFF	; 255
   1a152:	d5 01       	movw	r26, r10
   1a154:	91 96       	adiw	r26, 0x21	; 33
   1a156:	9c 93       	st	X, r25
   1a158:	8e 93       	st	-X, r24
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1a15a:	90 97       	sbiw	r26, 0x20	; 32
   1a15c:	c5 01       	movw	r24, r10
   1a15e:	0e 94 ac c8 	call	0x19158	; 0x19158 <lif_check_volume>
   1a162:	0f b6       	in	r0, 0x3f	; 63
   1a164:	f8 94       	cli
   1a166:	de bf       	out	0x3e, r29	; 62
   1a168:	0f be       	out	0x3f, r0	; 63
   1a16a:	cd bf       	out	0x3d, r28	; 61
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a16c:	89 2b       	or	r24, r25
   1a16e:	19 f4       	brne	.+6      	; 0x1a176 <lif_create_volume+0x636>
   1a170:	c5 01       	movw	r24, r10
   1a172:	80 da       	rcall	.-2816   	; 0x19674 <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   1a174:	08 c0       	rjmp	.+16     	; 0x1a186 <lif_create_volume+0x646>
   1a176:	c5 01       	movw	r24, r10
   1a178:	db db       	rcall	.-2122   	; 0x19930 <lif_updatefree>
   1a17a:	7c 01       	movw	r14, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a17c:	89 2b       	or	r24, r25
   1a17e:	31 f4       	brne	.+12     	; 0x1a18c <lif_create_volume+0x64c>
   1a180:	c5 01       	movw	r24, r10

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1a182:	78 da       	rcall	.-2832   	; 0x19674 <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1a184:	04 c0       	rjmp	.+8      	; 0x1a18e <lif_create_volume+0x64e>
   1a186:	e1 2c       	mov	r14, r1
   1a188:	f1 2c       	mov	r15, r1
   1a18a:	01 c0       	rjmp	.+2      	; 0x1a18e <lif_create_volume+0x64e>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1a18c:	75 01       	movw	r14, r10
   1a18e:	c7 01       	movw	r24, r14
   1a190:	ca 5e       	subi	r28, 0xEA	; 234
   1a192:	de 4f       	sbci	r29, 0xFE	; 254
   1a194:	e2 e1       	ldi	r30, 0x12	; 18
   1a196:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0001a19a <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1a19a:	ac e0       	ldi	r26, 0x0C	; 12
   1a19c:	b0 e0       	ldi	r27, 0x00	; 0
   1a19e:	e3 ed       	ldi	r30, 0xD3	; 211
   1a1a0:	f0 ed       	ldi	r31, 0xD0	; 208
   1a1a2:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
   1a1a6:	9c 87       	std	Y+12, r25	; 0x0c
   1a1a8:	8b 87       	std	Y+11, r24	; 0x0b
   1a1aa:	6a 01       	movw	r12, r20
   1a1ac:	7b 01       	movw	r14, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   1a1ae:	fc 01       	movw	r30, r24
   1a1b0:	84 84       	ldd	r8, Z+12	; 0x0c
   1a1b2:	95 84       	ldd	r9, Z+13	; 0x0d
   1a1b4:	a6 84       	ldd	r10, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   1a1b6:	b7 84       	ldd	r11, Z+15	; 0x0f
   1a1b8:	bb db       	rcall	.-2186   	; 0x19930 <lif_updatefree>
   1a1ba:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1a1bc:	b1 f4       	brne	.+44     	; 0x1a1ea <lif_newdir+0x50>
   1a1be:	ff 92       	push	r15
   1a1c0:	ef 92       	push	r14
   1a1c2:	df 92       	push	r13
   1a1c4:	cf 92       	push	r12
   1a1c6:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a1c8:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a1ca:	83 8d       	ldd	r24, Z+27	; 0x1b
   1a1cc:	8f 93       	push	r24
   1a1ce:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a1d0:	8f 93       	push	r24
   1a1d2:	81 8d       	ldd	r24, Z+25	; 0x19
   1a1d4:	8f 93       	push	r24
   1a1d6:	80 8d       	ldd	r24, Z+24	; 0x18
   1a1d8:	8f 93       	push	r24
   1a1da:	83 ec       	ldi	r24, 0xC3	; 195
   1a1dc:	9a e3       	ldi	r25, 0x3A	; 58
   1a1de:	1f 92       	push	r1
   1a1e0:	9f 93       	push	r25
   1a1e2:	8f 93       	push	r24
   1a1e4:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1a1e8:	2c c0       	rjmp	.+88     	; 0x1a242 <lif_newdir+0xa8>
   1a1ea:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a1ec:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a1ee:	80 8d       	ldd	r24, Z+24	; 0x18
   1a1f0:	91 8d       	ldd	r25, Z+25	; 0x19
   1a1f2:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a1f4:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a1f6:	8c 15       	cp	r24, r12
   1a1f8:	9d 05       	cpc	r25, r13
   1a1fa:	ae 05       	cpc	r26, r14
   1a1fc:	bf 05       	cpc	r27, r15
   1a1fe:	b4 f0       	brlt	.+44     	; 0x1a22c <lif_newdir+0x92>
   1a200:	44 24       	eor	r4, r4
   1a202:	43 94       	inc	r4
   1a204:	51 2c       	mov	r5, r1
   1a206:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a208:	71 2c       	mov	r7, r1
   1a20a:	e6 5a       	subi	r30, 0xA6	; 166
   1a20c:	ff 4f       	sbci	r31, 0xFF	; 255
   1a20e:	fc 83       	std	Y+4, r31	; 0x04
   1a210:	eb 83       	std	Y+3, r30	; 0x03
   1a212:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a214:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a216:	84 5a       	subi	r24, 0xA4	; 164
   1a218:	9f 4f       	sbci	r25, 0xFF	; 255
   1a21a:	9a 83       	std	Y+2, r25	; 0x02
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a21c:	89 83       	std	Y+1, r24	; 0x01
   1a21e:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a220:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a222:	e0 5a       	subi	r30, 0xA0	; 160
   1a224:	ff 4f       	sbci	r31, 0xFF	; 255
   1a226:	fe 83       	std	Y+6, r31	; 0x06
   1a228:	ed 83       	std	Y+5, r30	; 0x05
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1a22a:	23 c0       	rjmp	.+70     	; 0x1a272 <lif_newdir+0xd8>
   1a22c:	bf 93       	push	r27
   1a22e:	af 93       	push	r26
   1a230:	9f 93       	push	r25
   1a232:	8f 93       	push	r24
   1a234:	8a e9       	ldi	r24, 0x9A	; 154
   1a236:	9a e3       	ldi	r25, 0x3A	; 58
   1a238:	1f 92       	push	r1
   1a23a:	9f 93       	push	r25
   1a23c:	8f 93       	push	r24
   1a23e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(-1);
   1a242:	0f b6       	in	r0, 0x3f	; 63
   1a244:	f8 94       	cli
   1a246:	de bf       	out	0x3e, r29	; 62
   1a248:	0f be       	out	0x3f, r0	; 63
   1a24a:	cd bf       	out	0x3d, r28	; 61
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a24c:	05 c1       	rjmp	.+522    	; 0x1a458 <lif_newdir+0x2be>
   1a24e:	eb 81       	ldd	r30, Y+3	; 0x03
   1a250:	fc 81       	ldd	r31, Y+4	; 0x04
   1a252:	80 81       	ld	r24, Z
   1a254:	91 81       	ldd	r25, Z+1	; 0x01
   1a256:	8f 3f       	cpi	r24, 0xFF	; 255
   1a258:	ff ef       	ldi	r31, 0xFF	; 255
   1a25a:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   1a25c:	a1 f0       	breq	.+40     	; 0x1a286 <lif_newdir+0xec>
   1a25e:	89 2b       	or	r24, r25
   1a260:	09 f0       	breq	.+2      	; 0x1a264 <lif_newdir+0xca>
        {
            if(freestate == 0)
   1a262:	d0 c0       	rjmp	.+416    	; 0x1a404 <lif_newdir+0x26a>
   1a264:	61 14       	cp	r6, r1
   1a266:	71 04       	cpc	r7, r1
   1a268:	09 f4       	brne	.+2      	; 0x1a26c <lif_newdir+0xd2>
   1a26a:	c3 c0       	rjmp	.+390    	; 0x1a3f2 <lif_newdir+0x258>
   1a26c:	9f ef       	ldi	r25, 0xFF	; 255
   1a26e:	49 1a       	sub	r4, r25
   1a270:	59 0a       	sbc	r5, r25
   1a272:	82 01       	movw	r16, r4
   1a274:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a276:	11 09       	sbc	r17, r1
   1a278:	b8 01       	movw	r22, r16
   1a27a:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a27c:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a27e:	7b da       	rcall	.-2826   	; 0x19776 <lif_readdirindex>
   1a280:	89 2b       	or	r24, r25
   1a282:	29 f7       	brne	.-54     	; 0x1a24e <lif_newdir+0xb4>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   1a284:	e9 c0       	rjmp	.+466    	; 0x1a458 <lif_newdir+0x2be>
   1a286:	22 e0       	ldi	r18, 0x02	; 2
   1a288:	62 16       	cp	r6, r18
   1a28a:	71 04       	cpc	r7, r1
   1a28c:	09 f0       	breq	.+2      	; 0x1a290 <lif_newdir+0xf6>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   1a28e:	46 c0       	rjmp	.+140    	; 0x1a31c <lif_newdir+0x182>
   1a290:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a292:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a294:	0e 94 0a c7 	call	0x18e14	; 0x18e14 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a298:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a29a:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a29c:	e4 5a       	subi	r30, 0xA4	; 164
   1a29e:	ff 4f       	sbci	r31, 0xFF	; 255
   1a2a0:	8f 81       	ldd	r24, Y+7	; 0x07
   1a2a2:	80 83       	st	Z, r24
   1a2a4:	98 85       	ldd	r25, Y+8	; 0x08
   1a2a6:	91 83       	std	Z+1, r25	; 0x01
   1a2a8:	29 85       	ldd	r18, Y+9	; 0x09
   1a2aa:	22 83       	std	Z+2, r18	; 0x02
   1a2ac:	8a 85       	ldd	r24, Y+10	; 0x0a
                LIF->DIR.FileSectors = sectors;
   1a2ae:	83 83       	std	Z+3, r24	; 0x03
   1a2b0:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a2b2:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a2b4:	e0 5a       	subi	r30, 0xA0	; 160
   1a2b6:	ff 4f       	sbci	r31, 0xFF	; 255
   1a2b8:	c0 82       	st	Z, r12
   1a2ba:	d1 82       	std	Z+1, r13	; 0x01
   1a2bc:	e2 82       	std	Z+2, r14	; 0x02
                LIF->usedsectors += sectors;
   1a2be:	f3 82       	std	Z+3, r15	; 0x03
   1a2c0:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a2c2:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a2c4:	84 89       	ldd	r24, Z+20	; 0x14
   1a2c6:	95 89       	ldd	r25, Z+21	; 0x15
   1a2c8:	a6 89       	ldd	r26, Z+22	; 0x16
   1a2ca:	b7 89       	ldd	r27, Z+23	; 0x17
   1a2cc:	8c 0d       	add	r24, r12
   1a2ce:	9d 1d       	adc	r25, r13
   1a2d0:	ae 1d       	adc	r26, r14
   1a2d2:	bf 1d       	adc	r27, r15
   1a2d4:	84 8b       	std	Z+20, r24	; 0x14
   1a2d6:	95 8b       	std	Z+21, r25	; 0x15
   1a2d8:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   1a2da:	b7 8b       	std	Z+23, r27	; 0x17
   1a2dc:	80 8d       	ldd	r24, Z+24	; 0x18
   1a2de:	91 8d       	ldd	r25, Z+25	; 0x19
   1a2e0:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a2e2:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a2e4:	8c 19       	sub	r24, r12
   1a2e6:	9d 09       	sbc	r25, r13
   1a2e8:	ae 09       	sbc	r26, r14
   1a2ea:	bf 09       	sbc	r27, r15
   1a2ec:	80 8f       	std	Z+24, r24	; 0x18
   1a2ee:	91 8f       	std	Z+25, r25	; 0x19
   1a2f0:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1a2f2:	b3 8f       	std	Z+27, r27	; 0x1b
   1a2f4:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a2f6:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a2f8:	01 96       	adiw	r24, 0x01	; 1
   1a2fa:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   1a2fc:	84 8f       	std	Z+28, r24	; 0x1c
   1a2fe:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a300:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a302:	01 97       	sbiw	r24, 0x01	; 1
   1a304:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1a306:	86 8f       	std	Z+30, r24	; 0x1e
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a308:	20 a2       	std	Z+32, r2	; 0x20
   1a30a:	31 a2       	std	Z+33, r3	; 0x21
   1a30c:	b1 01       	movw	r22, r2
   1a30e:	cf 01       	movw	r24, r30
   1a310:	9b da       	rcall	.-2762   	; 0x19848 <lif_writedirindex>
   1a312:	89 2b       	or	r24, r25
   1a314:	09 f4       	brne	.+2      	; 0x1a318 <lif_newdir+0x17e>
   1a316:	a0 c0       	rjmp	.+320    	; 0x1a458 <lif_newdir+0x2be>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & 0x400)
   1a318:	c1 01       	movw	r24, r2
   1a31a:	a0 c0       	rjmp	.+320    	; 0x1a45c <lif_newdir+0x2c2>
   1a31c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a320:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   1a324:	92 ff       	sbrs	r25, 2
   1a326:	20 c0       	rjmp	.+64     	; 0x1a368 <lif_newdir+0x1ce>
   1a328:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a32a:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a32c:	83 8d       	ldd	r24, Z+27	; 0x1b
   1a32e:	8f 93       	push	r24
   1a330:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a332:	8f 93       	push	r24
   1a334:	81 8d       	ldd	r24, Z+25	; 0x19
   1a336:	8f 93       	push	r24
   1a338:	80 8d       	ldd	r24, Z+24	; 0x18
   1a33a:	8f 93       	push	r24
   1a33c:	ff 92       	push	r15
   1a33e:	ef 92       	push	r14
   1a340:	df 92       	push	r13
   1a342:	cf 92       	push	r12
   1a344:	bf 92       	push	r11
   1a346:	af 92       	push	r10
   1a348:	9f 92       	push	r9
   1a34a:	8f 92       	push	r8
   1a34c:	1f 93       	push	r17
   1a34e:	0f 93       	push	r16
   1a350:	89 e4       	ldi	r24, 0x49	; 73
   1a352:	9a e3       	ldi	r25, 0x3A	; 58
   1a354:	1f 92       	push	r1
   1a356:	9f 93       	push	r25
   1a358:	8f 93       	push	r24
   1a35a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1a35e:	0f b6       	in	r0, 0x3f	; 63
   1a360:	f8 94       	cli
   1a362:	de bf       	out	0x3e, r29	; 62
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a364:	0f be       	out	0x3f, r0	; 63
   1a366:	cd bf       	out	0x3d, r28	; 61
   1a368:	b8 01       	movw	r22, r16
   1a36a:	6f 5f       	subi	r22, 0xFF	; 255
   1a36c:	7f 4f       	sbci	r23, 0xFF	; 255
   1a36e:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a370:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a372:	c6 da       	rcall	.-2676   	; 0x19900 <lif_writedirEOF>
   1a374:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   1a376:	09 f4       	brne	.+2      	; 0x1a37a <lif_newdir+0x1e0>
   1a378:	6f c0       	rjmp	.+222    	; 0x1a458 <lif_newdir+0x2be>
   1a37a:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a37c:	9c 85       	ldd	r25, Y+12	; 0x0c
            LIF->DIR.FileStartSector = start;
   1a37e:	0e 94 0a c7 	call	0x18e14	; 0x18e14 <lif_dir_clear>
   1a382:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a384:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a386:	e4 5a       	subi	r30, 0xA4	; 164
   1a388:	ff 4f       	sbci	r31, 0xFF	; 255
   1a38a:	80 82       	st	Z, r8
   1a38c:	91 82       	std	Z+1, r9	; 0x01
            LIF->DIR.FileSectors = sectors;
   1a38e:	a2 82       	std	Z+2, r10	; 0x02
   1a390:	b3 82       	std	Z+3, r11	; 0x03
   1a392:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a394:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a396:	e0 5a       	subi	r30, 0xA0	; 160
   1a398:	ff 4f       	sbci	r31, 0xFF	; 255
   1a39a:	c0 82       	st	Z, r12
   1a39c:	d1 82       	std	Z+1, r13	; 0x01
            LIF->usedsectors += sectors;
   1a39e:	e2 82       	std	Z+2, r14	; 0x02
   1a3a0:	f3 82       	std	Z+3, r15	; 0x03
   1a3a2:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a3a4:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a3a6:	84 89       	ldd	r24, Z+20	; 0x14
   1a3a8:	95 89       	ldd	r25, Z+21	; 0x15
   1a3aa:	a6 89       	ldd	r26, Z+22	; 0x16
   1a3ac:	b7 89       	ldd	r27, Z+23	; 0x17
   1a3ae:	8c 0d       	add	r24, r12
   1a3b0:	9d 1d       	adc	r25, r13
   1a3b2:	ae 1d       	adc	r26, r14
   1a3b4:	bf 1d       	adc	r27, r15
   1a3b6:	84 8b       	std	Z+20, r24	; 0x14
   1a3b8:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   1a3ba:	a6 8b       	std	Z+22, r26	; 0x16
   1a3bc:	b7 8b       	std	Z+23, r27	; 0x17
   1a3be:	80 8d       	ldd	r24, Z+24	; 0x18
   1a3c0:	91 8d       	ldd	r25, Z+25	; 0x19
   1a3c2:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a3c4:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a3c6:	8c 19       	sub	r24, r12
   1a3c8:	9d 09       	sbc	r25, r13
   1a3ca:	ae 09       	sbc	r26, r14
   1a3cc:	bf 09       	sbc	r27, r15
   1a3ce:	80 8f       	std	Z+24, r24	; 0x18
   1a3d0:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   1a3d2:	a2 8f       	std	Z+26, r26	; 0x1a
   1a3d4:	b3 8f       	std	Z+27, r27	; 0x1b
   1a3d6:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a3d8:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   1a3da:	01 96       	adiw	r24, 0x01	; 1
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a3dc:	95 8f       	std	Z+29, r25	; 0x1d
   1a3de:	84 8f       	std	Z+28, r24	; 0x1c
   1a3e0:	11 a3       	std	Z+33, r17	; 0x21
   1a3e2:	00 a3       	std	Z+32, r16	; 0x20
   1a3e4:	b8 01       	movw	r22, r16
   1a3e6:	cf 01       	movw	r24, r30
   1a3e8:	2f da       	rcall	.-2978   	; 0x19848 <lif_writedirindex>
   1a3ea:	89 2b       	or	r24, r25


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a3ec:	a9 f1       	breq	.+106    	; 0x1a458 <lif_newdir+0x2be>
   1a3ee:	c8 01       	movw	r24, r16
   1a3f0:	35 c0       	rjmp	.+106    	; 0x1a45c <lif_newdir+0x2c2>
   1a3f2:	8f 82       	std	Y+7, r8	; 0x07
   1a3f4:	98 86       	std	Y+8, r9	; 0x08
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a3f6:	a9 86       	std	Y+9, r10	; 0x09
   1a3f8:	ba 86       	std	Y+10, r11	; 0x0a
   1a3fa:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   1a3fc:	66 24       	eor	r6, r6
        }
        

        // VALID record
        if(freestate == 1)
   1a3fe:	63 94       	inc	r6
   1a400:	71 2c       	mov	r7, r1
   1a402:	34 cf       	rjmp	.-408    	; 0x1a26c <lif_newdir+0xd2>
   1a404:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a406:	6f 16       	cp	r6, r31
   1a408:	71 04       	cpc	r7, r1
   1a40a:	a9 f4       	brne	.+42     	; 0x1a436 <lif_newdir+0x29c>
   1a40c:	e9 81       	ldd	r30, Y+1	; 0x01
   1a40e:	fa 81       	ldd	r31, Y+2	; 0x02
   1a410:	80 81       	ld	r24, Z
   1a412:	91 81       	ldd	r25, Z+1	; 0x01
   1a414:	a2 81       	ldd	r26, Z+2	; 0x02
   1a416:	b3 81       	ldd	r27, Z+3	; 0x03
   1a418:	88 19       	sub	r24, r8
   1a41a:	99 09       	sbc	r25, r9
   1a41c:	aa 09       	sbc	r26, r10
   1a41e:	bb 09       	sbc	r27, r11
   1a420:	8c 15       	cp	r24, r12
   1a422:	9d 05       	cpc	r25, r13
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   1a424:	ae 05       	cpc	r26, r14
   1a426:	bf 05       	cpc	r27, r15
   1a428:	1c f4       	brge	.+6      	; 0x1a430 <lif_newdir+0x296>
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   1a42a:	61 2c       	mov	r6, r1
   1a42c:	71 2c       	mov	r7, r1
   1a42e:	03 c0       	rjmp	.+6      	; 0x1a436 <lif_newdir+0x29c>
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a430:	82 e0       	ldi	r24, 0x02	; 2
   1a432:	68 2e       	mov	r6, r24
   1a434:	71 2c       	mov	r7, r1
   1a436:	e9 81       	ldd	r30, Y+1	; 0x01
   1a438:	fa 81       	ldd	r31, Y+2	; 0x02
   1a43a:	80 80       	ld	r8, Z
   1a43c:	91 80       	ldd	r9, Z+1	; 0x01
   1a43e:	a2 80       	ldd	r10, Z+2	; 0x02
   1a440:	b3 80       	ldd	r11, Z+3	; 0x03
   1a442:	ed 81       	ldd	r30, Y+5	; 0x05
   1a444:	fe 81       	ldd	r31, Y+6	; 0x06
   1a446:	80 81       	ld	r24, Z
   1a448:	91 81       	ldd	r25, Z+1	; 0x01
   1a44a:	a2 81       	ldd	r26, Z+2	; 0x02
   1a44c:	b3 81       	ldd	r27, Z+3	; 0x03
   1a44e:	88 0e       	add	r8, r24
   1a450:	99 1e       	adc	r9, r25
        ++index;
    }
    // ERROR
    return(-1);
   1a452:	aa 1e       	adc	r10, r26
   1a454:	bb 1e       	adc	r11, r27
}
   1a456:	0a cf       	rjmp	.-492    	; 0x1a26c <lif_newdir+0xd2>
   1a458:	8f ef       	ldi	r24, 0xFF	; 255
   1a45a:	9f ef       	ldi	r25, 0xFF	; 255
   1a45c:	2c 96       	adiw	r28, 0x0c	; 12
   1a45e:	e2 e1       	ldi	r30, 0x12	; 18
   1a460:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0001a464 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a464:	a0 e3       	ldi	r26, 0x30	; 48
   1a466:	b1 e0       	ldi	r27, 0x01	; 1
   1a468:	e8 e3       	ldi	r30, 0x38	; 56
   1a46a:	f2 ed       	ldi	r31, 0xD2	; 210
   1a46c:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__prologue_saves__+0x10>
   1a470:	b8 2e       	mov	r11, r24
   1a472:	a9 2e       	mov	r10, r25
   1a474:	6b 01       	movw	r12, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   1a476:	be 01       	movw	r22, r28
   1a478:	6f 5f       	subi	r22, 0xFF	; 255
   1a47a:	7e 4f       	sbci	r23, 0xFE	; 254
   1a47c:	0e 94 44 c2 	call	0x18488	; 0x18488 <lif_stat>
   1a480:	8c 01       	movw	r16, r24
    if(sp == NULL)
   1a482:	00 97       	sbiw	r24, 0x00	; 0
   1a484:	09 f1       	breq	.+66     	; 0x1a4c8 <lif_open_volume+0x64>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a486:	fc 01       	movw	r30, r24
   1a488:	80 8d       	ldd	r24, Z+24	; 0x18
   1a48a:	91 8d       	ldd	r25, Z+25	; 0x19
   1a48c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a48e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a490:	81 15       	cp	r24, r1
   1a492:	f2 e0       	ldi	r31, 0x02	; 2
   1a494:	9f 07       	cpc	r25, r31
   1a496:	a1 05       	cpc	r26, r1
   1a498:	b1 05       	cpc	r27, r1
   1a49a:	c8 f4       	brcc	.+50     	; 0x1a4ce <lif_open_volume+0x6a>
    {
        if(debuglevel & 1)
   1a49c:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a4a0:	20 ff       	sbrs	r18, 0
   1a4a2:	12 c0       	rjmp	.+36     	; 0x1a4c8 <lif_open_volume+0x64>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a4a4:	bf 93       	push	r27
   1a4a6:	af 93       	push	r26
   1a4a8:	9f 93       	push	r25
   1a4aa:	8f 93       	push	r24
   1a4ac:	af 92       	push	r10
   1a4ae:	bf 92       	push	r11
   1a4b0:	8a e0       	ldi	r24, 0x0A	; 10
   1a4b2:	9a e3       	ldi	r25, 0x3A	; 58
   1a4b4:	1f 92       	push	r1
   1a4b6:	9f 93       	push	r25
   1a4b8:	8f 93       	push	r24
   1a4ba:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1a4be:	0f b6       	in	r0, 0x3f	; 63
   1a4c0:	f8 94       	cli
   1a4c2:	de bf       	out	0x3e, r29	; 62
   1a4c4:	0f be       	out	0x3f, r0	; 63
   1a4c6:	cd bf       	out	0x3d, r28	; 61
        return(NULL);
   1a4c8:	00 e0       	ldi	r16, 0x00	; 0
   1a4ca:	10 e0       	ldi	r17, 0x00	; 0
   1a4cc:	c5 c0       	rjmp	.+394    	; 0x1a658 <lif_open_volume+0x1f4>
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a4ce:	64 e7       	ldi	r22, 0x74	; 116
   1a4d0:	70 e0       	ldi	r23, 0x00	; 0
   1a4d2:	80 e0       	ldi	r24, 0x00	; 0
   1a4d4:	90 e0       	ldi	r25, 0x00	; 0
   1a4d6:	0e 94 c1 c1 	call	0x18382	; 0x18382 <lif_calloc>
   1a4da:	7c 01       	movw	r14, r24
    if(!LIF)
   1a4dc:	89 2b       	or	r24, r25
   1a4de:	a1 f3       	breq	.-24     	; 0x1a4c8 <lif_open_volume+0x64>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a4e0:	8b 2d       	mov	r24, r11
   1a4e2:	9a 2d       	mov	r25, r10
   1a4e4:	0e 94 fd c1 	call	0x183fa	; 0x183fa <lif_stralloc>
   1a4e8:	f7 01       	movw	r30, r14
   1a4ea:	91 83       	std	Z+1, r25	; 0x01
   1a4ec:	80 83       	st	Z, r24
    if(!LIF->name)
   1a4ee:	00 97       	sbiw	r24, 0x00	; 0
   1a4f0:	09 f4       	brne	.+2      	; 0x1a4f4 <lif_open_volume+0x90>
   1a4f2:	5a c0       	rjmp	.+180    	; 0x1a5a8 <lif_open_volume+0x144>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   1a4f4:	f8 01       	movw	r30, r16
   1a4f6:	00 8d       	ldd	r16, Z+24	; 0x18
   1a4f8:	11 8d       	ldd	r17, Z+25	; 0x19
   1a4fa:	22 8d       	ldd	r18, Z+26	; 0x1a
   1a4fc:	33 8d       	ldd	r19, Z+27	; 0x1b
   1a4fe:	f7 01       	movw	r30, r14
   1a500:	00 87       	std	Z+8, r16	; 0x08
   1a502:	11 87       	std	Z+9, r17	; 0x09
   1a504:	22 87       	std	Z+10, r18	; 0x0a
   1a506:	33 87       	std	Z+11, r19	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a508:	77 27       	eor	r23, r23
   1a50a:	63 2f       	mov	r22, r19
   1a50c:	52 2f       	mov	r21, r18
   1a50e:	41 2f       	mov	r20, r17
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a510:	00 23       	and	r16, r16
   1a512:	21 f0       	breq	.+8      	; 0x1a51c <lif_open_volume+0xb8>
        ++sectors;
   1a514:	4f 5f       	subi	r20, 0xFF	; 255
   1a516:	5f 4f       	sbci	r21, 0xFF	; 255
   1a518:	6f 4f       	sbci	r22, 0xFF	; 255
   1a51a:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a51c:	f7 01       	movw	r30, r14
   1a51e:	44 83       	std	Z+4, r20	; 0x04
   1a520:	55 83       	std	Z+5, r21	; 0x05
   1a522:	66 83       	std	Z+6, r22	; 0x06
   1a524:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a526:	b6 01       	movw	r22, r12
   1a528:	0e 94 1c c2 	call	0x18438	; 0x18438 <lif_open>
   1a52c:	f7 01       	movw	r30, r14
   1a52e:	93 83       	std	Z+3, r25	; 0x03
   1a530:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a532:	89 2b       	or	r24, r25
   1a534:	c9 f1       	breq	.+114    	; 0x1a5a8 <lif_open_volume+0x144>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a536:	00 e0       	ldi	r16, 0x00	; 0
   1a538:	11 e0       	ldi	r17, 0x01	; 1
   1a53a:	20 e0       	ldi	r18, 0x00	; 0
   1a53c:	30 e0       	ldi	r19, 0x00	; 0
   1a53e:	a9 01       	movw	r20, r18
   1a540:	be 01       	movw	r22, r28
   1a542:	6f 5f       	subi	r22, 0xFF	; 255
   1a544:	7f 4f       	sbci	r23, 0xFF	; 255
   1a546:	c7 01       	movw	r24, r14
   1a548:	0e 94 a2 c2 	call	0x18544	; 0x18544 <lif_read>
   1a54c:	6f 3f       	cpi	r22, 0xFF	; 255
   1a54e:	71 05       	cpc	r23, r1
   1a550:	81 05       	cpc	r24, r1
   1a552:	91 05       	cpc	r25, r1
   1a554:	09 f0       	breq	.+2      	; 0x1a558 <lif_open_volume+0xf4>
   1a556:	4c f4       	brge	.+18     	; 0x1a56a <lif_open_volume+0x106>
    {
        if(debuglevel & 1)
   1a558:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a55c:	80 ff       	sbrs	r24, 0
   1a55e:	24 c0       	rjmp	.+72     	; 0x1a5a8 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a560:	af 92       	push	r10
   1a562:	bf 92       	push	r11
   1a564:	84 ed       	ldi	r24, 0xD4	; 212
   1a566:	99 e3       	ldi	r25, 0x39	; 57
   1a568:	15 c0       	rjmp	.+42     	; 0x1a594 <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a56a:	b7 01       	movw	r22, r14
   1a56c:	ce 01       	movw	r24, r28
   1a56e:	01 96       	adiw	r24, 0x01	; 1
   1a570:	0e 94 bd c4 	call	0x1897a	; 0x1897a <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   1a574:	c7 01       	movw	r24, r14
   1a576:	0e 94 ac c8 	call	0x19158	; 0x19158 <lif_check_volume>
   1a57a:	89 2b       	or	r24, r25
   1a57c:	c1 f4       	brne	.+48     	; 0x1a5ae <lif_open_volume+0x14a>
    {
        if(debuglevel & 1)
   1a57e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a582:	80 ff       	sbrs	r24, 0
   1a584:	11 c0       	rjmp	.+34     	; 0x1a5a8 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a586:	f7 01       	movw	r30, r14
   1a588:	81 81       	ldd	r24, Z+1	; 0x01
   1a58a:	8f 93       	push	r24
   1a58c:	80 81       	ld	r24, Z
   1a58e:	8f 93       	push	r24
   1a590:	81 ea       	ldi	r24, 0xA1	; 161
   1a592:	99 e3       	ldi	r25, 0x39	; 57
   1a594:	1f 92       	push	r1
   1a596:	9f 93       	push	r25
   1a598:	8f 93       	push	r24
   1a59a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1a59e:	0f 90       	pop	r0
   1a5a0:	0f 90       	pop	r0
   1a5a2:	0f 90       	pop	r0
   1a5a4:	0f 90       	pop	r0
   1a5a6:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a5a8:	c7 01       	movw	r24, r14
   1a5aa:	64 d8       	rcall	.-3896   	; 0x19674 <lif_close_volume>
   1a5ac:	8d cf       	rjmp	.-230    	; 0x1a4c8 <lif_open_volume+0x64>
        lif_closedir(LIF);
        return(NULL);
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a5ae:	f7 01       	movw	r30, r14
   1a5b0:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a5b2:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a5b4:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a5b6:	70 a9       	ldd	r23, Z+48	; 0x30
   1a5b8:	85 a9       	ldd	r24, Z+53	; 0x35
   1a5ba:	96 a9       	ldd	r25, Z+54	; 0x36
   1a5bc:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a5be:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a5c0:	48 0f       	add	r20, r24
   1a5c2:	59 1f       	adc	r21, r25
   1a5c4:	6a 1f       	adc	r22, r26
   1a5c6:	7b 1f       	adc	r23, r27
   1a5c8:	44 87       	std	Z+12, r20	; 0x0c
   1a5ca:	55 87       	std	Z+13, r21	; 0x0d
   1a5cc:	66 87       	std	Z+14, r22	; 0x0e
   1a5ce:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a5d0:	84 81       	ldd	r24, Z+4	; 0x04
   1a5d2:	95 81       	ldd	r25, Z+5	; 0x05
   1a5d4:	a6 81       	ldd	r26, Z+6	; 0x06
   1a5d6:	b7 81       	ldd	r27, Z+7	; 0x07
   1a5d8:	84 1b       	sub	r24, r20
   1a5da:	95 0b       	sbc	r25, r21
   1a5dc:	a6 0b       	sbc	r26, r22
   1a5de:	b7 0b       	sbc	r27, r23
   1a5e0:	80 8b       	std	Z+16, r24	; 0x10
   1a5e2:	91 8b       	std	Z+17, r25	; 0x11
   1a5e4:	a2 8b       	std	Z+18, r26	; 0x12
   1a5e6:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a5e8:	80 8f       	std	Z+24, r24	; 0x18
   1a5ea:	91 8f       	std	Z+25, r25	; 0x19
   1a5ec:	a2 8f       	std	Z+26, r26	; 0x1a
   1a5ee:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a5f0:	14 8a       	std	Z+20, r1	; 0x14
   1a5f2:	15 8a       	std	Z+21, r1	; 0x15
   1a5f4:	16 8a       	std	Z+22, r1	; 0x16
   1a5f6:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a5f8:	17 8e       	std	Z+31, r1	; 0x1f
   1a5fa:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a5fc:	15 8e       	std	Z+29, r1	; 0x1d
   1a5fe:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a600:	11 a2       	std	Z+33, r1	; 0x21
   1a602:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a604:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1a606:	12 a2       	std	Z+34, r1	; 0x22
   1a608:	c7 01       	movw	r24, r14
   1a60a:	92 d9       	rcall	.-3292   	; 0x19930 <lif_updatefree>
   1a60c:	8c 01       	movw	r16, r24
   1a60e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a612:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a616:	01 15       	cp	r16, r1
   1a618:	11 05       	cpc	r17, r1
    {
        if(debuglevel & 1)
   1a61a:	b1 f4       	brne	.+44     	; 0x1a648 <lif_open_volume+0x1e4>
   1a61c:	80 ff       	sbrs	r24, 0
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a61e:	11 c0       	rjmp	.+34     	; 0x1a642 <lif_open_volume+0x1de>
   1a620:	f7 01       	movw	r30, r14
   1a622:	81 81       	ldd	r24, Z+1	; 0x01
   1a624:	8f 93       	push	r24
   1a626:	80 81       	ld	r24, Z
   1a628:	8f 93       	push	r24
   1a62a:	8e e6       	ldi	r24, 0x6E	; 110
   1a62c:	99 e3       	ldi	r25, 0x39	; 57
   1a62e:	1f 92       	push	r1
   1a630:	9f 93       	push	r25
   1a632:	8f 93       	push	r24
   1a634:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1a638:	0f 90       	pop	r0
   1a63a:	0f 90       	pop	r0
   1a63c:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a63e:	0f 90       	pop	r0
   1a640:	0f 90       	pop	r0
   1a642:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a644:	17 d8       	rcall	.-4050   	; 0x19674 <lif_close_volume>
    }

	if(debuglevel &0x400)
   1a646:	08 c0       	rjmp	.+16     	; 0x1a658 <lif_open_volume+0x1f4>
   1a648:	92 ff       	sbrs	r25, 2
		lif_dump_vol(LIF, "Volume Listing");	
   1a64a:	05 c0       	rjmp	.+10     	; 0x1a656 <lif_open_volume+0x1f2>
   1a64c:	60 ec       	ldi	r22, 0xC0	; 192
   1a64e:	75 e1       	ldi	r23, 0x15	; 21
   1a650:	c7 01       	movw	r24, r14
   1a652:	0e 94 19 c7 	call	0x18e32	; 0x18e32 <lif_dump_vol>
    return( LIF );
}
   1a656:	87 01       	movw	r16, r14
   1a658:	c8 01       	movw	r24, r16
   1a65a:	c0 5d       	subi	r28, 0xD0	; 208
   1a65c:	de 4f       	sbci	r29, 0xFE	; 254
   1a65e:	ea e0       	ldi	r30, 0x0A	; 10
   1a660:	0c 94 59 e5 	jmp	0x1cab2	; 0x1cab2 <__epilogue_restores__+0x10>

0001a664 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a664:	a1 e1       	ldi	r26, 0x11	; 17
   1a666:	b0 e0       	ldi	r27, 0x00	; 0
   1a668:	e8 e3       	ldi	r30, 0x38	; 56
   1a66a:	f3 ed       	ldi	r31, 0xD3	; 211
   1a66c:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a670:	60 e9       	ldi	r22, 0x90	; 144
   1a672:	78 e0       	ldi	r23, 0x08	; 8
   1a674:	f7 de       	rcall	.-530    	; 0x1a464 <lif_open_volume>
   1a676:	99 8b       	std	Y+17, r25	; 0x11
   1a678:	88 8b       	std	Y+16, r24	; 0x10
    if(LIF == NULL)
   1a67a:	00 97       	sbiw	r24, 0x00	; 0
   1a67c:	09 f4       	brne	.+2      	; 0x1a680 <lif_dir+0x1c>
   1a67e:	82 c1       	rjmp	.+772    	; 0x1a984 <lif_dir+0x320>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a680:	fc 01       	movw	r30, r24
   1a682:	86 a1       	ldd	r24, Z+38	; 0x26
   1a684:	88 23       	and	r24, r24
   1a686:	21 f0       	breq	.+8      	; 0x1a690 <lif_dir+0x2c>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a688:	8f 01       	movw	r16, r30
   1a68a:	0a 5d       	subi	r16, 0xDA	; 218
   1a68c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a68e:	02 c0       	rjmp	.+4      	; 0x1a694 <lif_dir+0x30>
    if(!vol[0])
        vol = "<EMPTY>";
   1a690:	02 e7       	ldi	r16, 0x72	; 114
   1a692:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a694:	88 89       	ldd	r24, Y+16	; 0x10
   1a696:	99 89       	ldd	r25, Y+17	; 0x11
   1a698:	87 5b       	subi	r24, 0xB7	; 183
   1a69a:	9f 4f       	sbci	r25, 0xFF	; 255
   1a69c:	0e 94 dd c6 	call	0x18dba	; 0x18dba <lif_lifbcd2timestr>
   1a6a0:	9f 93       	push	r25
   1a6a2:	8f 93       	push	r24
   1a6a4:	1f 93       	push	r17
   1a6a6:	0f 93       	push	r16
   1a6a8:	87 e5       	ldi	r24, 0x57	; 87
   1a6aa:	99 e3       	ldi	r25, 0x39	; 57
   1a6ac:	1f 92       	push	r1
   1a6ae:	9f 93       	push	r25
   1a6b0:	8f 93       	push	r24
   1a6b2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a6b6:	87 e1       	ldi	r24, 0x17	; 23
   1a6b8:	99 e3       	ldi	r25, 0x39	; 57
   1a6ba:	1f 92       	push	r1
   1a6bc:	9f 93       	push	r25
   1a6be:	8f 93       	push	r24
   1a6c0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1a6c4:	0f b6       	in	r0, 0x3f	; 63
   1a6c6:	f8 94       	cli
   1a6c8:	de bf       	out	0x3e, r29	; 62
   1a6ca:	0f be       	out	0x3f, r0	; 63
   1a6cc:	cd bf       	out	0x3d, r28	; 61
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a6ce:	60 e2       	ldi	r22, 0x20	; 32
   1a6d0:	96 2e       	mov	r9, r22
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a6d2:	00 e0       	ldi	r16, 0x00	; 0
   1a6d4:	10 e0       	ldi	r17, 0x00	; 0

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a6d6:	88 89       	ldd	r24, Y+16	; 0x10
   1a6d8:	99 89       	ldd	r25, Y+17	; 0x11
   1a6da:	86 5a       	subi	r24, 0xA6	; 166
   1a6dc:	9f 4f       	sbci	r25, 0xFF	; 255
   1a6de:	9c 83       	std	Y+4, r25	; 0x04
   1a6e0:	8b 83       	std	Y+3, r24	; 0x03
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a6e2:	e8 89       	ldd	r30, Y+16	; 0x10
   1a6e4:	f9 89       	ldd	r31, Y+17	; 0x11
   1a6e6:	e0 5a       	subi	r30, 0xA0	; 160
   1a6e8:	ff 4f       	sbci	r31, 0xFF	; 255
   1a6ea:	fb 87       	std	Y+11, r31	; 0x0b
   1a6ec:	ea 87       	std	Y+10, r30	; 0x0a

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a6ee:	28 89       	ldd	r18, Y+16	; 0x10
   1a6f0:	39 89       	ldd	r19, Y+17	; 0x11
   1a6f2:	24 59       	subi	r18, 0x94	; 148
   1a6f4:	3f 4f       	sbci	r19, 0xFF	; 255
   1a6f6:	3d 87       	std	Y+13, r19	; 0x0d
   1a6f8:	2c 87       	std	Y+12, r18	; 0x0c
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a6fa:	88 89       	ldd	r24, Y+16	; 0x10
   1a6fc:	99 89       	ldd	r25, Y+17	; 0x11
   1a6fe:	81 5b       	subi	r24, 0xB1	; 177
   1a700:	9f 4f       	sbci	r25, 0xFF	; 255
   1a702:	9a 83       	std	Y+2, r25	; 0x02
   1a704:	89 83       	std	Y+1, r24	; 0x01
   1a706:	8b ec       	ldi	r24, 0xCB	; 203
   1a708:	98 e3       	ldi	r25, 0x38	; 56
   1a70a:	3c 01       	movw	r6, r24
   1a70c:	81 2c       	mov	r8, r1
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a70e:	e8 89       	ldd	r30, Y+16	; 0x10
   1a710:	f9 89       	ldd	r31, Y+17	; 0x11
   1a712:	ec 59       	subi	r30, 0x9C	; 156
   1a714:	ff 4f       	sbci	r31, 0xFF	; 255
   1a716:	ff 87       	std	Y+15, r31	; 0x0f
   1a718:	ee 87       	std	Y+14, r30	; 0x0e
   1a71a:	28 89       	ldd	r18, Y+16	; 0x10
   1a71c:	39 89       	ldd	r19, Y+17	; 0x11
   1a71e:	22 59       	subi	r18, 0x92	; 146
   1a720:	3f 4f       	sbci	r19, 0xFF	; 255
   1a722:	3e 83       	std	Y+6, r19	; 0x06
   1a724:	2d 83       	std	Y+5, r18	; 0x05
   1a726:	a8 88       	ldd	r10, Y+16	; 0x10
   1a728:	b9 88       	ldd	r11, Y+17	; 0x11
   1a72a:	3c e5       	ldi	r19, 0x5C	; 92
   1a72c:	a3 0e       	add	r10, r19
   1a72e:	b1 1c       	adc	r11, r1
   1a730:	8b e9       	ldi	r24, 0x9B	; 155
   1a732:	98 e3       	ldi	r25, 0x38	; 56
   1a734:	9c 01       	movw	r18, r24
   1a736:	40 e0       	ldi	r20, 0x00	; 0
   1a738:	2f 83       	std	Y+7, r18	; 0x07
   1a73a:	38 87       	std	Y+8, r19	; 0x08
   1a73c:	49 87       	std	Y+9, r20	; 0x09
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a73e:	b8 01       	movw	r22, r16
   1a740:	88 89       	ldd	r24, Y+16	; 0x10
   1a742:	99 89       	ldd	r25, Y+17	; 0x11
   1a744:	18 d8       	rcall	.-4048   	; 0x19776 <lif_readdirindex>
   1a746:	89 2b       	or	r24, r25
   1a748:	09 f4       	brne	.+2      	; 0x1a74c <lif_dir+0xe8>
   1a74a:	9d c0       	rjmp	.+314    	; 0x1a886 <lif_dir+0x222>
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a74c:	eb 81       	ldd	r30, Y+3	; 0x03
   1a74e:	fc 81       	ldd	r31, Y+4	; 0x04
   1a750:	20 81       	ld	r18, Z
   1a752:	31 81       	ldd	r19, Z+1	; 0x01
   1a754:	2f 3f       	cpi	r18, 0xFF	; 255
   1a756:	ff ef       	ldi	r31, 0xFF	; 255
   1a758:	3f 07       	cpc	r19, r31
   1a75a:	09 f4       	brne	.+2      	; 0x1a75e <lif_dir+0xfa>
   1a75c:	94 c0       	rjmp	.+296    	; 0x1a886 <lif_dir+0x222>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a75e:	ea 85       	ldd	r30, Y+10	; 0x0a
   1a760:	fb 85       	ldd	r31, Y+11	; 0x0b
   1a762:	80 81       	ld	r24, Z
   1a764:	91 81       	ldd	r25, Z+1	; 0x01
   1a766:	a2 81       	ldd	r26, Z+2	; 0x02
   1a768:	b3 81       	ldd	r27, Z+3	; 0x03
   1a76a:	cc 24       	eor	r12, r12
   1a76c:	d8 2e       	mov	r13, r24
   1a76e:	e9 2e       	mov	r14, r25
   1a770:	fa 2e       	mov	r15, r26

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a772:	2c 7f       	andi	r18, 0xFC	; 252
   1a774:	20 31       	cpi	r18, 0x10	; 16
   1a776:	30 4e       	sbci	r19, 0xE0	; 224
   1a778:	09 f0       	breq	.+2      	; 0x1a77c <lif_dir+0x118>
   1a77a:	4b c0       	rjmp	.+150    	; 0x1a812 <lif_dir+0x1ae>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a77c:	ec 85       	ldd	r30, Y+12	; 0x0c
   1a77e:	fd 85       	ldd	r31, Y+13	; 0x0d
   1a780:	20 81       	ld	r18, Z
   1a782:	31 81       	ldd	r19, Z+1	; 0x01
   1a784:	21 15       	cp	r18, r1
   1a786:	31 05       	cpc	r19, r1
   1a788:	a9 f0       	breq	.+42     	; 0x1a7b4 <lif_dir+0x150>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a78a:	19 01       	movw	r2, r18
   1a78c:	41 2c       	mov	r4, r1
   1a78e:	51 2c       	mov	r5, r1
   1a790:	77 27       	eor	r23, r23
   1a792:	65 2d       	mov	r22, r5
   1a794:	54 2d       	mov	r21, r4
   1a796:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a798:	22 23       	and	r18, r18
   1a79a:	21 f0       	breq	.+8      	; 0x1a7a4 <lif_dir+0x140>
        ++sectors;
   1a79c:	4f 5f       	subi	r20, 0xFF	; 255
   1a79e:	5f 4f       	sbci	r21, 0xFF	; 255
   1a7a0:	6f 4f       	sbci	r22, 0xFF	; 255
   1a7a2:	7f 4f       	sbci	r23, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a7a4:	84 17       	cp	r24, r20
   1a7a6:	95 07       	cpc	r25, r21
   1a7a8:	a6 07       	cpc	r26, r22
   1a7aa:	b7 07       	cpc	r27, r23
   1a7ac:	19 f4       	brne	.+6      	; 0x1a7b4 <lif_dir+0x150>
            {
                bytes = LIF->DIR.FileBytes;
   1a7ae:	72 01       	movw	r14, r4
   1a7b0:	61 01       	movw	r12, r2
   1a7b2:	2f c0       	rjmp	.+94     	; 0x1a812 <lif_dir+0x1ae>
            }
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
   1a7b4:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1a7b8:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a7bc:	52 ff       	sbrs	r21, 2
   1a7be:	27 c0       	rjmp	.+78     	; 0x1a80e <lif_dir+0x1aa>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a7c0:	19 01       	movw	r2, r18
   1a7c2:	41 2c       	mov	r4, r1
   1a7c4:	51 2c       	mov	r5, r1
   1a7c6:	77 27       	eor	r23, r23
   1a7c8:	65 2d       	mov	r22, r5
   1a7ca:	54 2d       	mov	r21, r4
   1a7cc:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a7ce:	22 23       	and	r18, r18
   1a7d0:	21 f0       	breq	.+8      	; 0x1a7da <lif_dir+0x176>
        ++sectors;
   1a7d2:	4f 5f       	subi	r20, 0xFF	; 255
   1a7d4:	5f 4f       	sbci	r21, 0xFF	; 255
   1a7d6:	6f 4f       	sbci	r22, 0xFF	; 255
   1a7d8:	7f 4f       	sbci	r23, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a7da:	bf 93       	push	r27
   1a7dc:	af 93       	push	r26
   1a7de:	9f 93       	push	r25
   1a7e0:	8f 93       	push	r24
   1a7e2:	7f 93       	push	r23
   1a7e4:	6f 93       	push	r22
   1a7e6:	5f 93       	push	r21
   1a7e8:	4f 93       	push	r20
   1a7ea:	1f 92       	push	r1
   1a7ec:	1f 92       	push	r1
   1a7ee:	3f 92       	push	r3
   1a7f0:	2f 92       	push	r2
   1a7f2:	fa 81       	ldd	r31, Y+2	; 0x02
   1a7f4:	ff 93       	push	r31
   1a7f6:	29 81       	ldd	r18, Y+1	; 0x01
   1a7f8:	2f 93       	push	r18
   1a7fa:	1f 92       	push	r1
   1a7fc:	7f 92       	push	r7
   1a7fe:	6f 92       	push	r6
   1a800:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1a804:	0f b6       	in	r0, 0x3f	; 63
   1a806:	f8 94       	cli
   1a808:	de bf       	out	0x3e, r29	; 62
   1a80a:	0f be       	out	0x3f, r0	; 63
   1a80c:	cd bf       	out	0x3d, r28	; 61
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a80e:	81 e2       	ldi	r24, 0x21	; 33
   1a810:	98 2e       	mov	r9, r24
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a812:	8e 85       	ldd	r24, Y+14	; 0x0e
   1a814:	9f 85       	ldd	r25, Y+15	; 0x0f
   1a816:	0e 94 dd c6 	call	0x18dba	; 0x18dba <lif_lifbcd2timestr>
   1a81a:	ed 81       	ldd	r30, Y+5	; 0x05
   1a81c:	fe 81       	ldd	r31, Y+6	; 0x06
   1a81e:	a0 81       	ld	r26, Z
   1a820:	b1 81       	ldd	r27, Z+1	; 0x01
   1a822:	f5 01       	movw	r30, r10
   1a824:	60 81       	ld	r22, Z
   1a826:	71 81       	ldd	r23, Z+1	; 0x01
   1a828:	52 80       	ldd	r5, Z+2	; 0x02
   1a82a:	43 80       	ldd	r4, Z+3	; 0x03
   1a82c:	eb 81       	ldd	r30, Y+3	; 0x03
   1a82e:	fc 81       	ldd	r31, Y+4	; 0x04
   1a830:	40 81       	ld	r20, Z
   1a832:	51 81       	ldd	r21, Z+1	; 0x01
   1a834:	41 15       	cp	r20, r1
   1a836:	51 05       	cpc	r21, r1
   1a838:	19 f0       	breq	.+6      	; 0x1a840 <lif_dir+0x1dc>
   1a83a:	29 81       	ldd	r18, Y+1	; 0x01
   1a83c:	3a 81       	ldd	r19, Y+2	; 0x02
   1a83e:	02 c0       	rjmp	.+4      	; 0x1a844 <lif_dir+0x1e0>
   1a840:	2f ec       	ldi	r18, 0xCF	; 207
   1a842:	35 e1       	ldi	r19, 0x15	; 21
   1a844:	9f 93       	push	r25
   1a846:	8f 93       	push	r24
   1a848:	bf 93       	push	r27
   1a84a:	af 93       	push	r26
   1a84c:	1f 92       	push	r1
   1a84e:	9f 92       	push	r9
   1a850:	ff 92       	push	r15
   1a852:	ef 92       	push	r14
   1a854:	df 92       	push	r13
   1a856:	cf 92       	push	r12
   1a858:	4f 92       	push	r4
   1a85a:	5f 92       	push	r5
   1a85c:	7f 93       	push	r23
   1a85e:	6f 93       	push	r22
   1a860:	5f 93       	push	r21
   1a862:	4f 93       	push	r20
   1a864:	3f 93       	push	r19
   1a866:	2f 93       	push	r18
   1a868:	1f 92       	push	r1
   1a86a:	f8 85       	ldd	r31, Y+8	; 0x08
   1a86c:	ff 93       	push	r31
   1a86e:	2f 81       	ldd	r18, Y+7	; 0x07
   1a870:	2f 93       	push	r18
   1a872:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a876:	0f 5f       	subi	r16, 0xFF	; 255
   1a878:	1f 4f       	sbci	r17, 0xFF	; 255
    }   
   1a87a:	0f b6       	in	r0, 0x3f	; 63
   1a87c:	f8 94       	cli
   1a87e:	de bf       	out	0x3e, r29	; 62
   1a880:	0f be       	out	0x3f, r0	; 63
   1a882:	cd bf       	out	0x3d, r28	; 61
   1a884:	5c cf       	rjmp	.-328    	; 0x1a73e <lif_dir+0xda>

    printf("\n");
   1a886:	89 e9       	ldi	r24, 0x99	; 153
   1a888:	98 e3       	ldi	r25, 0x38	; 56
   1a88a:	1f 92       	push	r1
   1a88c:	9f 93       	push	r25
   1a88e:	8f 93       	push	r24
   1a890:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a894:	e8 89       	ldd	r30, Y+16	; 0x10
   1a896:	f9 89       	ldd	r31, Y+17	; 0x11
   1a898:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a89a:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a89c:	09 2e       	mov	r0, r25
   1a89e:	00 0c       	add	r0, r0
   1a8a0:	aa 0b       	sbc	r26, r26
   1a8a2:	bb 0b       	sbc	r27, r27
   1a8a4:	bf 93       	push	r27
   1a8a6:	af 93       	push	r26
   1a8a8:	9f 93       	push	r25
   1a8aa:	8f 93       	push	r24
   1a8ac:	8d e8       	ldi	r24, 0x8D	; 141
   1a8ae:	98 e3       	ldi	r25, 0x38	; 56
   1a8b0:	1f 92       	push	r1
   1a8b2:	9f 93       	push	r25
   1a8b4:	8f 93       	push	r24
   1a8b6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a8ba:	e8 89       	ldd	r30, Y+16	; 0x10
   1a8bc:	f9 89       	ldd	r31, Y+17	; 0x11
   1a8be:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a8c0:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a8c2:	09 2e       	mov	r0, r25
   1a8c4:	00 0c       	add	r0, r0
   1a8c6:	aa 0b       	sbc	r26, r26
   1a8c8:	bb 0b       	sbc	r27, r27
   1a8ca:	bf 93       	push	r27
   1a8cc:	af 93       	push	r26
   1a8ce:	9f 93       	push	r25
   1a8d0:	8f 93       	push	r24
   1a8d2:	80 e8       	ldi	r24, 0x80	; 128
   1a8d4:	98 e3       	ldi	r25, 0x38	; 56
   1a8d6:	1f 92       	push	r1
   1a8d8:	9f 93       	push	r25
   1a8da:	8f 93       	push	r24
   1a8dc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a8e0:	e8 89       	ldd	r30, Y+16	; 0x10
   1a8e2:	f9 89       	ldd	r31, Y+17	; 0x11
   1a8e4:	80 a9       	ldd	r24, Z+48	; 0x30
   1a8e6:	8f 93       	push	r24
   1a8e8:	87 a5       	ldd	r24, Z+47	; 0x2f
   1a8ea:	8f 93       	push	r24
   1a8ec:	86 a5       	ldd	r24, Z+46	; 0x2e
   1a8ee:	8f 93       	push	r24
   1a8f0:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a8f2:	8f 93       	push	r24
   1a8f4:	8f e6       	ldi	r24, 0x6F	; 111
   1a8f6:	98 e3       	ldi	r25, 0x38	; 56
   1a8f8:	1f 92       	push	r1
   1a8fa:	9f 93       	push	r25
   1a8fc:	8f 93       	push	r24
   1a8fe:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a902:	e8 89       	ldd	r30, Y+16	; 0x10
   1a904:	f9 89       	ldd	r31, Y+17	; 0x11
   1a906:	80 ad       	ldd	r24, Z+56	; 0x38
   1a908:	8f 93       	push	r24
   1a90a:	87 a9       	ldd	r24, Z+55	; 0x37
   1a90c:	8f 93       	push	r24
   1a90e:	86 a9       	ldd	r24, Z+54	; 0x36
   1a910:	8f 93       	push	r24
   1a912:	85 a9       	ldd	r24, Z+53	; 0x35
   1a914:	8f 93       	push	r24
   1a916:	8c e5       	ldi	r24, 0x5C	; 92
   1a918:	98 e3       	ldi	r25, 0x38	; 56
   1a91a:	1f 92       	push	r1
   1a91c:	9f 93       	push	r25
   1a91e:	8f 93       	push	r24
   1a920:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a924:	e8 89       	ldd	r30, Y+16	; 0x10
   1a926:	f9 89       	ldd	r31, Y+17	; 0x11
   1a928:	87 89       	ldd	r24, Z+23	; 0x17
   1a92a:	8f 93       	push	r24
   1a92c:	86 89       	ldd	r24, Z+22	; 0x16
   1a92e:	8f 93       	push	r24
   1a930:	85 89       	ldd	r24, Z+21	; 0x15
   1a932:	8f 93       	push	r24
   1a934:	84 89       	ldd	r24, Z+20	; 0x14
   1a936:	8f 93       	push	r24
   1a938:	89 e4       	ldi	r24, 0x49	; 73
   1a93a:	98 e3       	ldi	r25, 0x38	; 56
   1a93c:	1f 92       	push	r1
   1a93e:	9f 93       	push	r25
   1a940:	8f 93       	push	r24
   1a942:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a946:	0f b6       	in	r0, 0x3f	; 63
   1a948:	f8 94       	cli
   1a94a:	de bf       	out	0x3e, r29	; 62
   1a94c:	0f be       	out	0x3f, r0	; 63
   1a94e:	cd bf       	out	0x3d, r28	; 61
   1a950:	e8 89       	ldd	r30, Y+16	; 0x10
   1a952:	f9 89       	ldd	r31, Y+17	; 0x11
   1a954:	83 8d       	ldd	r24, Z+27	; 0x1b
   1a956:	8f 93       	push	r24
   1a958:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a95a:	8f 93       	push	r24
   1a95c:	81 8d       	ldd	r24, Z+25	; 0x19
   1a95e:	8f 93       	push	r24
   1a960:	80 8d       	ldd	r24, Z+24	; 0x18
   1a962:	8f 93       	push	r24
   1a964:	86 e3       	ldi	r24, 0x36	; 54
   1a966:	98 e3       	ldi	r25, 0x38	; 56
   1a968:	1f 92       	push	r1
   1a96a:	9f 93       	push	r25
   1a96c:	8f 93       	push	r24
   1a96e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a972:	88 89       	ldd	r24, Y+16	; 0x10
   1a974:	99 89       	ldd	r25, Y+17	; 0x11
   1a976:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
   1a97a:	0f b6       	in	r0, 0x3f	; 63
   1a97c:	f8 94       	cli
   1a97e:	de bf       	out	0x3e, r29	; 62
   1a980:	0f be       	out	0x3f, r0	; 63
   1a982:	cd bf       	out	0x3d, r28	; 61
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a984:	61 96       	adiw	r28, 0x11	; 17
   1a986:	e2 e1       	ldi	r30, 0x12	; 18
   1a988:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0001a98c <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a98c:	a0 e0       	ldi	r26, 0x00	; 0
   1a98e:	b0 e0       	ldi	r27, 0x00	; 0
   1a990:	ec ec       	ldi	r30, 0xCC	; 204
   1a992:	f4 ed       	ldi	r31, 0xD4	; 212
   1a994:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__prologue_saves__+0x10>
   1a998:	7c 01       	movw	r14, r24
   1a99a:	16 2f       	mov	r17, r22
   1a99c:	07 2f       	mov	r16, r23
    int index;

    if( !lif_checkname(liflabel) )
   1a99e:	86 2f       	mov	r24, r22
   1a9a0:	97 2f       	mov	r25, r23
   1a9a2:	0e 94 ae c3 	call	0x1875c	; 0x1875c <lif_checkname>
   1a9a6:	89 2b       	or	r24, r25
   1a9a8:	49 f4       	brne	.+18     	; 0x1a9bc <lif_find_file+0x30>
    {
        if(debuglevel & 1)
   1a9aa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a9ae:	80 ff       	sbrs	r24, 0
   1a9b0:	48 c0       	rjmp	.+144    	; 0x1aa42 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a9b2:	0f 93       	push	r16
   1a9b4:	1f 93       	push	r17
   1a9b6:	8f e0       	ldi	r24, 0x0F	; 15
   1a9b8:	98 e3       	ldi	r25, 0x38	; 56
   1a9ba:	13 c0       	rjmp	.+38     	; 0x1a9e2 <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a9bc:	a1 2f       	mov	r26, r17
   1a9be:	b0 2f       	mov	r27, r16
   1a9c0:	fd 01       	movw	r30, r26
   1a9c2:	01 90       	ld	r0, Z+
   1a9c4:	00 20       	and	r0, r0
   1a9c6:	e9 f7       	brne	.-6      	; 0x1a9c2 <lif_find_file+0x36>
   1a9c8:	31 97       	sbiw	r30, 0x01	; 1
   1a9ca:	ea 1b       	sub	r30, r26
   1a9cc:	fb 0b       	sbc	r31, r27
   1a9ce:	3b 97       	sbiw	r30, 0x0b	; 11
   1a9d0:	98 f0       	brcs	.+38     	; 0x1a9f8 <lif_find_file+0x6c>
    {
        if(debuglevel & 1)
   1a9d2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a9d6:	80 ff       	sbrs	r24, 0
   1a9d8:	34 c0       	rjmp	.+104    	; 0x1aa42 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a9da:	0f 93       	push	r16
   1a9dc:	1f 93       	push	r17
   1a9de:	8a ee       	ldi	r24, 0xEA	; 234
   1a9e0:	97 e3       	ldi	r25, 0x37	; 55
   1a9e2:	1f 92       	push	r1
   1a9e4:	9f 93       	push	r25
   1a9e6:	8f 93       	push	r24
   1a9e8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1a9ec:	0f 90       	pop	r0
   1a9ee:	0f 90       	pop	r0
   1a9f0:	0f 90       	pop	r0
   1a9f2:	0f 90       	pop	r0
   1a9f4:	0f 90       	pop	r0
   1a9f6:	25 c0       	rjmp	.+74     	; 0x1aa42 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a9f8:	e1 14       	cp	r14, r1
   1a9fa:	f1 04       	cpc	r15, r1
   1a9fc:	11 f1       	breq	.+68     	; 0x1aa42 <lif_find_file+0xb6>
   1a9fe:	c0 e0       	ldi	r28, 0x00	; 0
   1aa00:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1aa02:	67 01       	movw	r12, r14
   1aa04:	2a e5       	ldi	r18, 0x5A	; 90
   1aa06:	c2 0e       	add	r12, r18
   1aa08:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1aa0a:	57 01       	movw	r10, r14
   1aa0c:	8f e4       	ldi	r24, 0x4F	; 79
   1aa0e:	a8 0e       	add	r10, r24
   1aa10:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1aa12:	be 01       	movw	r22, r28
   1aa14:	c7 01       	movw	r24, r14
   1aa16:	0e 94 bb cb 	call	0x19776	; 0x19776 <lif_readdirindex>
   1aa1a:	89 2b       	or	r24, r25
   1aa1c:	91 f0       	breq	.+36     	; 0x1aa42 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1aa1e:	f6 01       	movw	r30, r12
   1aa20:	80 81       	ld	r24, Z
   1aa22:	91 81       	ldd	r25, Z+1	; 0x01
   1aa24:	8f 3f       	cpi	r24, 0xFF	; 255
   1aa26:	ff ef       	ldi	r31, 0xFF	; 255
   1aa28:	9f 07       	cpc	r25, r31
   1aa2a:	59 f0       	breq	.+22     	; 0x1aa42 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1aa2c:	89 2b       	or	r24, r25
   1aa2e:	39 f0       	breq	.+14     	; 0x1aa3e <lif_find_file+0xb2>
   1aa30:	61 2f       	mov	r22, r17
   1aa32:	70 2f       	mov	r23, r16
   1aa34:	c5 01       	movw	r24, r10
   1aa36:	0e 94 3e 32 	call	0x647c	; 0x647c <strcasecmp>
   1aa3a:	89 2b       	or	r24, r25
   1aa3c:	29 f0       	breq	.+10     	; 0x1aa48 <lif_find_file+0xbc>
            break;
        ++index;
   1aa3e:	21 96       	adiw	r28, 0x01	; 1
   1aa40:	e8 cf       	rjmp	.-48     	; 0x1aa12 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & 1)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1aa42:	8f ef       	ldi	r24, 0xFF	; 255
   1aa44:	9f ef       	ldi	r25, 0xFF	; 255
   1aa46:	01 c0       	rjmp	.+2      	; 0x1aa4a <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1aa48:	ce 01       	movw	r24, r28
            break;
        ++index;
    }
    return(index);
}
   1aa4a:	cd b7       	in	r28, 0x3d	; 61
   1aa4c:	de b7       	in	r29, 0x3e	; 62
   1aa4e:	ea e0       	ldi	r30, 0x0A	; 10
   1aa50:	0c 94 59 e5 	jmp	0x1cab2	; 0x1cab2 <__epilogue_restores__+0x10>

0001aa54 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1aa54:	a0 e0       	ldi	r26, 0x00	; 0
   1aa56:	b0 e0       	ldi	r27, 0x00	; 0
   1aa58:	e0 e3       	ldi	r30, 0x30	; 48
   1aa5a:	f5 ed       	ldi	r31, 0xD5	; 213
   1aa5c:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__prologue_saves__+0x14>
   1aa60:	6b 01       	movw	r12, r22
   1aa62:	7c 01       	movw	r14, r24
   1aa64:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1aa66:	20 e0       	ldi	r18, 0x00	; 0
   1aa68:	31 e0       	ldi	r19, 0x01	; 1
   1aa6a:	40 e0       	ldi	r20, 0x00	; 0
   1aa6c:	50 e0       	ldi	r21, 0x00	; 0
   1aa6e:	0e 94 d5 e4 	call	0x1c9aa	; 0x1c9aa <__divmodsi4>
    if(!pos)
   1aa72:	61 15       	cp	r22, r1
   1aa74:	71 05       	cpc	r23, r1
   1aa76:	e1 f1       	breq	.+120    	; 0x1aaf0 <lif_e010_pad_sector+0x9c>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1aa78:	c0 e0       	ldi	r28, 0x00	; 0
   1aa7a:	d1 e0       	ldi	r29, 0x01	; 1
   1aa7c:	c6 1b       	sub	r28, r22
   1aa7e:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1aa80:	f8 01       	movw	r30, r16
   1aa82:	8f ee       	ldi	r24, 0xEF	; 239
   1aa84:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1aa86:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1aa88:	cf 01       	movw	r24, r30
   1aa8a:	80 1b       	sub	r24, r16
   1aa8c:	91 0b       	sbc	r25, r17
   1aa8e:	8c 17       	cp	r24, r28
   1aa90:	9d 07       	cpc	r25, r29
   1aa92:	14 f4       	brge	.+4      	; 0x1aa98 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1aa94:	21 93       	st	Z+, r18
   1aa96:	f8 cf       	rjmp	.-16     	; 0x1aa88 <lif_e010_pad_sector+0x34>
   1aa98:	1c 16       	cp	r1, r28
   1aa9a:	1d 06       	cpc	r1, r29
   1aa9c:	14 f0       	brlt	.+4      	; 0x1aaa2 <lif_e010_pad_sector+0x4e>
   1aa9e:	c1 e0       	ldi	r28, 0x01	; 1
   1aaa0:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1aaa2:	ce 01       	movw	r24, r28
   1aaa4:	0d 2e       	mov	r0, r29
   1aaa6:	00 0c       	add	r0, r0
   1aaa8:	aa 0b       	sbc	r26, r26
   1aaaa:	bb 0b       	sbc	r27, r27
   1aaac:	bc 01       	movw	r22, r24
   1aaae:	cd 01       	movw	r24, r26
   1aab0:	6c 0d       	add	r22, r12
   1aab2:	7d 1d       	adc	r23, r13
   1aab4:	8e 1d       	adc	r24, r14
   1aab6:	9f 1d       	adc	r25, r15
   1aab8:	20 e0       	ldi	r18, 0x00	; 0
   1aaba:	31 e0       	ldi	r19, 0x01	; 1
   1aabc:	40 e0       	ldi	r20, 0x00	; 0
   1aabe:	50 e0       	ldi	r21, 0x00	; 0
   1aac0:	0e 94 d5 e4 	call	0x1c9aa	; 0x1c9aa <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1aac4:	61 15       	cp	r22, r1
   1aac6:	71 05       	cpc	r23, r1
   1aac8:	b1 f0       	breq	.+44     	; 0x1aaf6 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & 1)
   1aaca:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1aace:	20 ff       	sbrs	r18, 0
   1aad0:	14 c0       	rjmp	.+40     	; 0x1aafa <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1aad2:	7f 93       	push	r23
   1aad4:	6f 93       	push	r22
   1aad6:	81 eb       	ldi	r24, 0xB1	; 177
   1aad8:	97 e3       	ldi	r25, 0x37	; 55
   1aada:	1f 92       	push	r1
   1aadc:	9f 93       	push	r25
   1aade:	8f 93       	push	r24
   1aae0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1aae4:	0f 90       	pop	r0
   1aae6:	0f 90       	pop	r0
   1aae8:	0f 90       	pop	r0
   1aaea:	0f 90       	pop	r0
   1aaec:	0f 90       	pop	r0
   1aaee:	05 c0       	rjmp	.+10     	; 0x1aafa <lif_e010_pad_sector+0xa6>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1aaf0:	80 e0       	ldi	r24, 0x00	; 0
   1aaf2:	90 e0       	ldi	r25, 0x00	; 0
   1aaf4:	04 c0       	rjmp	.+8      	; 0x1aafe <lif_e010_pad_sector+0xaa>
   1aaf6:	ce 01       	movw	r24, r28
   1aaf8:	02 c0       	rjmp	.+4      	; 0x1aafe <lif_e010_pad_sector+0xaa>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & 1)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1aafa:	8f ef       	ldi	r24, 0xFF	; 255
   1aafc:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1aafe:	cd b7       	in	r28, 0x3d	; 61
   1ab00:	de b7       	in	r29, 0x3e	; 62
   1ab02:	e8 e0       	ldi	r30, 0x08	; 8
   1ab04:	0c 94 5b e5 	jmp	0x1cab6	; 0x1cab6 <__epilogue_restores__+0x14>

0001ab08 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1ab08:	a0 e0       	ldi	r26, 0x00	; 0
   1ab0a:	b0 e0       	ldi	r27, 0x00	; 0
   1ab0c:	ea e8       	ldi	r30, 0x8A	; 138
   1ab0e:	f5 ed       	ldi	r31, 0xD5	; 213
   1ab10:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
   1ab14:	ec 01       	movw	r28, r24
   1ab16:	4a 01       	movw	r8, r20
   1ab18:	5b 01       	movw	r10, r22
   1ab1a:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1ab1c:	fc 01       	movw	r30, r24
   1ab1e:	01 90       	ld	r0, Z+
   1ab20:	00 20       	and	r0, r0
   1ab22:	e9 f7       	brne	.-6      	; 0x1ab1e <lif_ascii_string_to_e010+0x16>
   1ab24:	31 97       	sbiw	r30, 0x01	; 1
   1ab26:	6f 01       	movw	r12, r30
   1ab28:	c8 1a       	sub	r12, r24
   1ab2a:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1ab2c:	41 2c       	mov	r4, r1
   1ab2e:	51 2c       	mov	r5, r1
   1ab30:	32 01       	movw	r6, r4
   1ab32:	53 94       	inc	r5
   1ab34:	cb 01       	movw	r24, r22
   1ab36:	ba 01       	movw	r22, r20
   1ab38:	a3 01       	movw	r20, r6
   1ab3a:	92 01       	movw	r18, r4
   1ab3c:	0e 94 d5 e4 	call	0x1c9aa	; 0x1c9aa <__divmodsi4>
   1ab40:	21 2c       	mov	r2, r1
   1ab42:	33 24       	eor	r3, r3
   1ab44:	33 94       	inc	r3
   1ab46:	c1 01       	movw	r24, r2
   1ab48:	86 1b       	sub	r24, r22
   1ab4a:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1ab4c:	86 30       	cpi	r24, 0x06	; 6
   1ab4e:	91 05       	cpc	r25, r1
   1ab50:	20 f0       	brcs	.+8      	; 0x1ab5a <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1ab52:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1ab54:	00 e0       	ldi	r16, 0x00	; 0
   1ab56:	10 e0       	ldi	r17, 0x00	; 0
   1ab58:	17 c0       	rjmp	.+46     	; 0x1ab88 <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1ab5a:	a7 01       	movw	r20, r14
   1ab5c:	c5 01       	movw	r24, r10
   1ab5e:	b4 01       	movw	r22, r8
   1ab60:	79 df       	rcall	.-270    	; 0x1aa54 <lif_e010_pad_sector>
   1ab62:	8c 01       	movw	r16, r24
        if(ind < 0)
   1ab64:	97 fd       	sbrc	r25, 7
   1ab66:	84 c0       	rjmp	.+264    	; 0x1ac70 <lif_ascii_string_to_e010+0x168>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1ab68:	09 2e       	mov	r0, r25
   1ab6a:	00 0c       	add	r0, r0
   1ab6c:	aa 0b       	sbc	r26, r26
   1ab6e:	bb 0b       	sbc	r27, r27
   1ab70:	bc 01       	movw	r22, r24
   1ab72:	cd 01       	movw	r24, r26
   1ab74:	68 0d       	add	r22, r8
   1ab76:	79 1d       	adc	r23, r9
   1ab78:	8a 1d       	adc	r24, r10
   1ab7a:	9b 1d       	adc	r25, r11
   1ab7c:	a3 01       	movw	r20, r6
   1ab7e:	92 01       	movw	r18, r4
   1ab80:	0e 94 d5 e4 	call	0x1c9aa	; 0x1c9aa <__divmodsi4>
   1ab84:	26 1a       	sub	r2, r22
   1ab86:	37 0a       	sbc	r3, r23
   1ab88:	f7 01       	movw	r30, r14
   1ab8a:	e0 0f       	add	r30, r16
   1ab8c:	f1 1f       	adc	r31, r17
   1ab8e:	0d 5f       	subi	r16, 0xFD	; 253
   1ab90:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1ab92:	c6 01       	movw	r24, r12
   1ab94:	02 96       	adiw	r24, 0x02	; 2
   1ab96:	82 15       	cp	r24, r2
   1ab98:	93 05       	cpc	r25, r3
   1ab9a:	84 f4       	brge	.+32     	; 0x1abbc <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1ab9c:	8f ed       	ldi	r24, 0xDF	; 223
   1ab9e:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1aba0:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1aba2:	d2 82       	std	Z+2, r13	; 0x02
   1aba4:	f7 01       	movw	r30, r14
   1aba6:	e0 0f       	add	r30, r16
   1aba8:	f1 1f       	adc	r31, r17
   1abaa:	cf 01       	movw	r24, r30
   1abac:	8e 19       	sub	r24, r14
   1abae:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1abb0:	29 91       	ld	r18, Y+
   1abb2:	22 23       	and	r18, r18
   1abb4:	09 f4       	brne	.+2      	; 0x1abb8 <lif_ascii_string_to_e010+0xb0>
   1abb6:	5c c0       	rjmp	.+184    	; 0x1ac70 <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1abb8:	21 93       	st	Z+, r18
   1abba:	f7 cf       	rjmp	.-18     	; 0x1abaa <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1abbc:	8f ec       	ldi	r24, 0xCF	; 207
   1abbe:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1abc0:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1abc2:	d2 82       	std	Z+2, r13	; 0x02
   1abc4:	d7 01       	movw	r26, r14
   1abc6:	a0 0f       	add	r26, r16
   1abc8:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1abca:	fe 01       	movw	r30, r28
   1abcc:	81 91       	ld	r24, Z+
   1abce:	81 11       	cpse	r24, r1
   1abd0:	0e c0       	rjmp	.+28     	; 0x1abee <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1abd2:	c8 01       	movw	r24, r16
   1abd4:	01 2e       	mov	r0, r17
   1abd6:	00 0c       	add	r0, r0
   1abd8:	aa 0b       	sbc	r26, r26
   1abda:	bb 0b       	sbc	r27, r27
   1abdc:	bc 01       	movw	r22, r24
   1abde:	cd 01       	movw	r24, r26
   1abe0:	68 0d       	add	r22, r8
   1abe2:	79 1d       	adc	r23, r9
   1abe4:	8a 1d       	adc	r24, r10
   1abe6:	9b 1d       	adc	r25, r11
   1abe8:	61 11       	cpse	r22, r1
   1abea:	09 c0       	rjmp	.+18     	; 0x1abfe <lif_ascii_string_to_e010+0xf6>
   1abec:	21 c0       	rjmp	.+66     	; 0x1ac30 <lif_ascii_string_to_e010+0x128>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1abee:	02 15       	cp	r16, r2
   1abf0:	13 05       	cpc	r17, r3
   1abf2:	7c f7       	brge	.-34     	; 0x1abd2 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1abf4:	0f 5f       	subi	r16, 0xFF	; 255
   1abf6:	1f 4f       	sbci	r17, 0xFF	; 255
   1abf8:	8d 93       	st	X+, r24
   1abfa:	ef 01       	movw	r28, r30
   1abfc:	e6 cf       	rjmp	.-52     	; 0x1abca <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
   1abfe:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1ac02:	20 ff       	sbrs	r18, 0
   1ac04:	33 c0       	rjmp	.+102    	; 0x1ac6c <lif_ascii_string_to_e010+0x164>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1ac06:	20 e0       	ldi	r18, 0x00	; 0
   1ac08:	31 e0       	ldi	r19, 0x01	; 1
   1ac0a:	40 e0       	ldi	r20, 0x00	; 0
   1ac0c:	50 e0       	ldi	r21, 0x00	; 0
   1ac0e:	0e 94 d5 e4 	call	0x1c9aa	; 0x1c9aa <__divmodsi4>
   1ac12:	7f 93       	push	r23
   1ac14:	6f 93       	push	r22
   1ac16:	8d e8       	ldi	r24, 0x8D	; 141
   1ac18:	97 e3       	ldi	r25, 0x37	; 55
   1ac1a:	1f 92       	push	r1
   1ac1c:	9f 93       	push	r25
   1ac1e:	8f 93       	push	r24
   1ac20:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1ac24:	0f 90       	pop	r0
   1ac26:	0f 90       	pop	r0
   1ac28:	0f 90       	pop	r0
   1ac2a:	0f 90       	pop	r0
   1ac2c:	0f 90       	pop	r0
   1ac2e:	1e c0       	rjmp	.+60     	; 0x1ac6c <lif_ascii_string_to_e010+0x164>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1ac30:	fe 01       	movw	r30, r28
   1ac32:	01 90       	ld	r0, Z+
   1ac34:	00 20       	and	r0, r0
   1ac36:	e9 f7       	brne	.-6      	; 0x1ac32 <lif_ascii_string_to_e010+0x12a>
   1ac38:	31 97       	sbiw	r30, 0x01	; 1
   1ac3a:	ec 1b       	sub	r30, r28
   1ac3c:	fd 0b       	sbc	r31, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1ac3e:	d7 01       	movw	r26, r14
   1ac40:	a0 0f       	add	r26, r16
   1ac42:	b1 1f       	adc	r27, r17
   1ac44:	8f e6       	ldi	r24, 0x6F	; 111
   1ac46:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1ac48:	11 96       	adiw	r26, 0x01	; 1
   1ac4a:	ec 93       	st	X, r30
   1ac4c:	11 97       	sbiw	r26, 0x01	; 1
        wbuf[ind++] = (len>>8) & 0xff;
   1ac4e:	12 96       	adiw	r26, 0x02	; 2
   1ac50:	fc 93       	st	X, r31
   1ac52:	0d 5f       	subi	r16, 0xFD	; 253
   1ac54:	1f 4f       	sbci	r17, 0xFF	; 255
   1ac56:	f7 01       	movw	r30, r14
   1ac58:	e0 0f       	add	r30, r16
   1ac5a:	f1 1f       	adc	r31, r17
   1ac5c:	cf 01       	movw	r24, r30
   1ac5e:	8e 19       	sub	r24, r14
   1ac60:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1ac62:	29 91       	ld	r18, Y+
   1ac64:	22 23       	and	r18, r18
   1ac66:	21 f0       	breq	.+8      	; 0x1ac70 <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1ac68:	21 93       	st	Z+, r18
   1ac6a:	f8 cf       	rjmp	.-16     	; 0x1ac5c <lif_ascii_string_to_e010+0x154>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1ac6c:	8f ef       	ldi	r24, 0xFF	; 255
   1ac6e:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1ac70:	cd b7       	in	r28, 0x3d	; 61
   1ac72:	de b7       	in	r29, 0x3e	; 62
   1ac74:	e2 e1       	ldi	r30, 0x12	; 18
   1ac76:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0001ac7a <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1ac7a:	a6 e0       	ldi	r26, 0x06	; 6
   1ac7c:	b3 e0       	ldi	r27, 0x03	; 3
   1ac7e:	e3 e4       	ldi	r30, 0x43	; 67
   1ac80:	f6 ed       	ldi	r31, 0xD6	; 214
   1ac82:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
   1ac86:	7c 01       	movw	r14, r24
   1ac88:	4a 01       	movw	r8, r20
   1ac8a:	5b 01       	movw	r10, r22
   1ac8c:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1ac8e:	66 e8       	ldi	r22, 0x86	; 134
   1ac90:	78 e0       	ldi	r23, 0x08	; 8
   1ac92:	0e 94 1c c2 	call	0x18438	; 0x18438 <lif_open>
   1ac96:	6c 01       	movw	r12, r24
    if(fi == NULL)
   1ac98:	89 2b       	or	r24, r25
   1ac9a:	09 f4       	brne	.+2      	; 0x1ac9e <lif_add_ascii_file_as_e010_wrapper+0x24>
   1ac9c:	6b c0       	rjmp	.+214    	; 0x1ad74 <lif_add_ascii_file_as_e010_wrapper+0xfa>
   1ac9e:	21 2c       	mov	r2, r1
   1aca0:	31 2c       	mov	r3, r1
   1aca2:	41 2c       	mov	r4, r1
   1aca4:	51 2c       	mov	r5, r1
   1aca6:	32 01       	movw	r6, r4

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1aca8:	8f e7       	ldi	r24, 0x7F	; 127
   1acaa:	97 e3       	ldi	r25, 0x37	; 55
   1acac:	9c 01       	movw	r18, r24
   1acae:	40 e0       	ldi	r20, 0x00	; 0
   1acb0:	cc 5f       	subi	r28, 0xFC	; 252
   1acb2:	dc 4f       	sbci	r29, 0xFC	; 252
   1acb4:	28 83       	st	Y, r18
   1acb6:	39 83       	std	Y+1, r19	; 0x01
   1acb8:	4a 83       	std	Y+2, r20	; 0x02
   1acba:	c4 50       	subi	r28, 0x04	; 4
   1acbc:	d3 40       	sbci	r29, 0x03	; 3
   1acbe:	1a c0       	rjmp	.+52     	; 0x1acf4 <lif_add_ascii_file_as_e010_wrapper+0x7a>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1acc0:	ce 5f       	subi	r28, 0xFE	; 254
   1acc2:	dc 4f       	sbci	r29, 0xFC	; 252
   1acc4:	28 81       	ld	r18, Y
   1acc6:	39 81       	ldd	r19, Y+1	; 0x01
   1acc8:	c2 50       	subi	r28, 0x02	; 2
   1acca:	d3 40       	sbci	r29, 0x03	; 3
   1accc:	c9 01       	movw	r24, r18
   1acce:	03 2e       	mov	r0, r19
   1acd0:	00 0c       	add	r0, r0
   1acd2:	aa 0b       	sbc	r26, r26
   1acd4:	bb 0b       	sbc	r27, r27
   1acd6:	88 0e       	add	r8, r24
   1acd8:	99 1e       	adc	r9, r25
   1acda:	aa 1e       	adc	r10, r26
   1acdc:	bb 1e       	adc	r11, r27
        bytes += size;
   1acde:	48 0e       	add	r4, r24
   1ace0:	59 1e       	adc	r5, r25
   1ace2:	6a 1e       	adc	r6, r26
   1ace4:	7b 1e       	adc	r7, r27
        count += size;
   1ace6:	22 0e       	add	r2, r18
   1ace8:	33 1e       	adc	r3, r19

        if(count > 256)
   1acea:	31 e0       	ldi	r19, 0x01	; 1
   1acec:	23 16       	cp	r2, r19
   1acee:	33 06       	cpc	r3, r19
   1acf0:	0c f0       	brlt	.+2      	; 0x1acf4 <lif_add_ascii_file_as_e010_wrapper+0x7a>
   1acf2:	45 c0       	rjmp	.+138    	; 0x1ad7e <lif_add_ascii_file_as_e010_wrapper+0x104>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1acf4:	a6 01       	movw	r20, r12
   1acf6:	6d ef       	ldi	r22, 0xFD	; 253
   1acf8:	70 e0       	ldi	r23, 0x00	; 0
   1acfa:	ce 01       	movw	r24, r28
   1acfc:	8f 5f       	subi	r24, 0xFF	; 255
   1acfe:	9d 4f       	sbci	r25, 0xFD	; 253
   1ad00:	0e 94 c6 76 	call	0xed8c	; 0xed8c <fgets>
   1ad04:	89 2b       	or	r24, r25
   1ad06:	09 f4       	brne	.+2      	; 0x1ad0a <lif_add_ascii_file_as_e010_wrapper+0x90>
   1ad08:	58 c0       	rjmp	.+176    	; 0x1adba <lif_add_ascii_file_as_e010_wrapper+0x140>
    {
        trim_tail((char *)str);
   1ad0a:	ce 01       	movw	r24, r28
   1ad0c:	8f 5f       	subi	r24, 0xFF	; 255
   1ad0e:	9d 4f       	sbci	r25, 0xFD	; 253
   1ad10:	0e 94 02 32 	call	0x6404	; 0x6404 <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1ad14:	68 ed       	ldi	r22, 0xD8	; 216
   1ad16:	75 e1       	ldi	r23, 0x15	; 21
   1ad18:	ce 01       	movw	r24, r28
   1ad1a:	8f 5f       	subi	r24, 0xFF	; 255
   1ad1c:	9d 4f       	sbci	r25, 0xFD	; 253
   1ad1e:	0e 94 c9 31 	call	0x6392	; 0x6392 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1ad22:	9e 01       	movw	r18, r28
   1ad24:	2f 5f       	subi	r18, 0xFF	; 255
   1ad26:	3f 4f       	sbci	r19, 0xFF	; 255
   1ad28:	b5 01       	movw	r22, r10
   1ad2a:	a4 01       	movw	r20, r8
   1ad2c:	ce 01       	movw	r24, r28
   1ad2e:	8f 5f       	subi	r24, 0xFF	; 255
   1ad30:	9d 4f       	sbci	r25, 0xFD	; 253
   1ad32:	ea de       	rcall	.-556    	; 0x1ab08 <lif_ascii_string_to_e010>
   1ad34:	ce 5f       	subi	r28, 0xFE	; 254
   1ad36:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad38:	99 83       	std	Y+1, r25	; 0x01
   1ad3a:	88 83       	st	Y, r24
   1ad3c:	c2 50       	subi	r28, 0x02	; 2
   1ad3e:	d3 40       	sbci	r29, 0x03	; 3
        // Write string
        // Now Write string
        if(LIF)
   1ad40:	e1 14       	cp	r14, r1
   1ad42:	f1 04       	cpc	r15, r1
   1ad44:	09 f4       	brne	.+2      	; 0x1ad48 <lif_add_ascii_file_as_e010_wrapper+0xce>
   1ad46:	bc cf       	rjmp	.-136    	; 0x1acc0 <lif_add_ascii_file_as_e010_wrapper+0x46>
        {
            len = lif_write(LIF, obuf, offset, size);
   1ad48:	8c 01       	movw	r16, r24
   1ad4a:	a5 01       	movw	r20, r10
   1ad4c:	94 01       	movw	r18, r8
   1ad4e:	be 01       	movw	r22, r28
   1ad50:	6f 5f       	subi	r22, 0xFF	; 255
   1ad52:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad54:	c7 01       	movw	r24, r14
   1ad56:	0e 94 fb c2 	call	0x185f6	; 0x185f6 <lif_write>
            if(len < size)
   1ad5a:	ce 5f       	subi	r28, 0xFE	; 254
   1ad5c:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad5e:	08 81       	ld	r16, Y
   1ad60:	19 81       	ldd	r17, Y+1	; 0x01
   1ad62:	c2 50       	subi	r28, 0x02	; 2
   1ad64:	d3 40       	sbci	r29, 0x03	; 3
   1ad66:	80 17       	cp	r24, r16
   1ad68:	91 07       	cpc	r25, r17
   1ad6a:	0c f0       	brlt	.+2      	; 0x1ad6e <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1ad6c:	a9 cf       	rjmp	.-174    	; 0x1acc0 <lif_add_ascii_file_as_e010_wrapper+0x46>
            {
                fclose(fi);
   1ad6e:	c6 01       	movw	r24, r12
   1ad70:	0e 94 3f 7d 	call	0xfa7e	; 0xfa7e <fclose>
                return(-1);
   1ad74:	6f ef       	ldi	r22, 0xFF	; 255
   1ad76:	7f ef       	ldi	r23, 0xFF	; 255
   1ad78:	8f ef       	ldi	r24, 0xFF	; 255
   1ad7a:	9f ef       	ldi	r25, 0xFF	; 255
   1ad7c:	86 c0       	rjmp	.+268    	; 0x1ae8a <lif_add_ascii_file_as_e010_wrapper+0x210>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1ad7e:	e1 14       	cp	r14, r1
   1ad80:	f1 04       	cpc	r15, r1
   1ad82:	c1 f0       	breq	.+48     	; 0x1adb4 <lif_add_ascii_file_as_e010_wrapper+0x13a>
                printf("\tWrote: %8ld\r", (long)bytes);
   1ad84:	7f 92       	push	r7
   1ad86:	6f 92       	push	r6
   1ad88:	5f 92       	push	r5
   1ad8a:	4f 92       	push	r4
   1ad8c:	1f 92       	push	r1
   1ad8e:	cb 5f       	subi	r28, 0xFB	; 251
   1ad90:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad92:	48 81       	ld	r20, Y
   1ad94:	c5 50       	subi	r28, 0x05	; 5
   1ad96:	d3 40       	sbci	r29, 0x03	; 3
   1ad98:	4f 93       	push	r20
   1ad9a:	cc 5f       	subi	r28, 0xFC	; 252
   1ad9c:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad9e:	88 81       	ld	r24, Y
   1ada0:	c4 50       	subi	r28, 0x04	; 4
   1ada2:	d3 40       	sbci	r29, 0x03	; 3
   1ada4:	8f 93       	push	r24
   1ada6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1adaa:	0f b6       	in	r0, 0x3f	; 63
   1adac:	f8 94       	cli
   1adae:	de bf       	out	0x3e, r29	; 62
   1adb0:	0f be       	out	0x3f, r0	; 63
   1adb2:	cd bf       	out	0x3d, r28	; 61
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1adb4:	21 2c       	mov	r2, r1
   1adb6:	31 2c       	mov	r3, r1
   1adb8:	9d cf       	rjmp	.-198    	; 0x1acf4 <lif_add_ascii_file_as_e010_wrapper+0x7a>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1adba:	c6 01       	movw	r24, r12
   1adbc:	0e 94 3f 7d 	call	0xfa7e	; 0xfa7e <fclose>

    // Write EOF
    str[0] = 0;
   1adc0:	cf 5f       	subi	r28, 0xFF	; 255
   1adc2:	dd 4f       	sbci	r29, 0xFD	; 253
   1adc4:	18 82       	st	Y, r1
   1adc6:	c1 50       	subi	r28, 0x01	; 1
   1adc8:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1adca:	9e 01       	movw	r18, r28
   1adcc:	2f 5f       	subi	r18, 0xFF	; 255
   1adce:	3f 4f       	sbci	r19, 0xFF	; 255
   1add0:	b5 01       	movw	r22, r10
   1add2:	a4 01       	movw	r20, r8
   1add4:	ce 01       	movw	r24, r28
   1add6:	8f 5f       	subi	r24, 0xFF	; 255
   1add8:	9d 4f       	sbci	r25, 0xFD	; 253
   1adda:	96 de       	rcall	.-724    	; 0x1ab08 <lif_ascii_string_to_e010>
   1addc:	6c 01       	movw	r12, r24

    if(LIF)
   1adde:	e1 14       	cp	r14, r1
   1ade0:	f1 04       	cpc	r15, r1
   1ade2:	b9 f4       	brne	.+46     	; 0x1ae12 <lif_add_ascii_file_as_e010_wrapper+0x198>
            return(-1);

    }

    offset += size;
    bytes += size;
   1ade4:	c6 01       	movw	r24, r12
   1ade6:	dd 0c       	add	r13, r13
   1ade8:	aa 0b       	sbc	r26, r26
   1adea:	bb 0b       	sbc	r27, r27
   1adec:	48 0e       	add	r4, r24
   1adee:	59 1e       	adc	r5, r25
   1adf0:	6a 1e       	adc	r6, r26
   1adf2:	7b 1e       	adc	r7, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1adf4:	88 0e       	add	r8, r24
   1adf6:	99 1e       	adc	r9, r25
   1adf8:	aa 1e       	adc	r10, r26
   1adfa:	bb 1e       	adc	r11, r27
   1adfc:	ae 01       	movw	r20, r28
   1adfe:	4f 5f       	subi	r20, 0xFF	; 255
   1ae00:	5f 4f       	sbci	r21, 0xFF	; 255
   1ae02:	c5 01       	movw	r24, r10
   1ae04:	b4 01       	movw	r22, r8
   1ae06:	26 de       	rcall	.-948    	; 0x1aa54 <lif_e010_pad_sector>
   1ae08:	6c 01       	movw	r12, r24
    if(LIF)
   1ae0a:	e1 14       	cp	r14, r1
   1ae0c:	f1 04       	cpc	r15, r1
   1ae0e:	f1 f4       	brne	.+60     	; 0x1ae4c <lif_add_ascii_file_as_e010_wrapper+0x1d2>
   1ae10:	3a c0       	rjmp	.+116    	; 0x1ae86 <lif_add_ascii_file_as_e010_wrapper+0x20c>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1ae12:	7f 92       	push	r7
   1ae14:	6f 92       	push	r6
   1ae16:	5f 92       	push	r5
   1ae18:	4f 92       	push	r4
   1ae1a:	81 e7       	ldi	r24, 0x71	; 113
   1ae1c:	97 e3       	ldi	r25, 0x37	; 55
   1ae1e:	1f 92       	push	r1
   1ae20:	9f 93       	push	r25
   1ae22:	8f 93       	push	r24
   1ae24:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1ae28:	86 01       	movw	r16, r12
   1ae2a:	a5 01       	movw	r20, r10
   1ae2c:	94 01       	movw	r18, r8
   1ae2e:	be 01       	movw	r22, r28
   1ae30:	6f 5f       	subi	r22, 0xFF	; 255
   1ae32:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae34:	c7 01       	movw	r24, r14
   1ae36:	0e 94 fb c2 	call	0x185f6	; 0x185f6 <lif_write>
        if(len < size)
   1ae3a:	0f b6       	in	r0, 0x3f	; 63
   1ae3c:	f8 94       	cli
   1ae3e:	de bf       	out	0x3e, r29	; 62
   1ae40:	0f be       	out	0x3f, r0	; 63
   1ae42:	cd bf       	out	0x3d, r28	; 61
   1ae44:	8c 15       	cp	r24, r12
   1ae46:	9d 05       	cpc	r25, r13
   1ae48:	6c f6       	brge	.-102    	; 0x1ade4 <lif_add_ascii_file_as_e010_wrapper+0x16a>
   1ae4a:	94 cf       	rjmp	.-216    	; 0x1ad74 <lif_add_ascii_file_as_e010_wrapper+0xfa>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1ae4c:	8c 01       	movw	r16, r24
   1ae4e:	a5 01       	movw	r20, r10
   1ae50:	94 01       	movw	r18, r8
   1ae52:	be 01       	movw	r22, r28
   1ae54:	6f 5f       	subi	r22, 0xFF	; 255
   1ae56:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae58:	c7 01       	movw	r24, r14
   1ae5a:	0e 94 fb c2 	call	0x185f6	; 0x185f6 <lif_write>
        if(len < size)
   1ae5e:	8c 15       	cp	r24, r12
   1ae60:	9d 05       	cpc	r25, r13
   1ae62:	0c f4       	brge	.+2      	; 0x1ae66 <lif_add_ascii_file_as_e010_wrapper+0x1ec>
   1ae64:	87 cf       	rjmp	.-242    	; 0x1ad74 <lif_add_ascii_file_as_e010_wrapper+0xfa>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1ae66:	7f 92       	push	r7
   1ae68:	6f 92       	push	r6
   1ae6a:	5f 92       	push	r5
   1ae6c:	4f 92       	push	r4
   1ae6e:	83 e6       	ldi	r24, 0x63	; 99
   1ae70:	97 e3       	ldi	r25, 0x37	; 55
   1ae72:	1f 92       	push	r1
   1ae74:	9f 93       	push	r25
   1ae76:	8f 93       	push	r24
   1ae78:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1ae7c:	0f b6       	in	r0, 0x3f	; 63
   1ae7e:	f8 94       	cli
   1ae80:	de bf       	out	0x3e, r29	; 62
   1ae82:	0f be       	out	0x3f, r0	; 63
   1ae84:	cd bf       	out	0x3d, r28	; 61

    return(bytes);
   1ae86:	b2 01       	movw	r22, r4
   1ae88:	c3 01       	movw	r24, r6
}
   1ae8a:	ca 5f       	subi	r28, 0xFA	; 250
   1ae8c:	dc 4f       	sbci	r29, 0xFC	; 252
   1ae8e:	e2 e1       	ldi	r30, 0x12	; 18
   1ae90:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0001ae94 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1ae94:	a2 e3       	ldi	r26, 0x32	; 50
   1ae96:	b0 e0       	ldi	r27, 0x00	; 0
   1ae98:	e0 e5       	ldi	r30, 0x50	; 80
   1ae9a:	f7 ed       	ldi	r31, 0xD7	; 215
   1ae9c:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
   1aea0:	6c 01       	movw	r12, r24
   1aea2:	1b 01       	movw	r2, r22
   1aea4:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1aea6:	fc 01       	movw	r30, r24
   1aea8:	80 81       	ld	r24, Z
   1aeaa:	81 11       	cpse	r24, r1
   1aeac:	03 c0       	rjmp	.+6      	; 0x1aeb4 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1aeae:	80 e3       	ldi	r24, 0x30	; 48
   1aeb0:	97 e3       	ldi	r25, 0x37	; 55
   1aeb2:	1a c0       	rjmp	.+52     	; 0x1aee8 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1aeb4:	fb 01       	movw	r30, r22
   1aeb6:	80 81       	ld	r24, Z
   1aeb8:	81 11       	cpse	r24, r1
   1aeba:	03 c0       	rjmp	.+6      	; 0x1aec2 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1aebc:	82 e0       	ldi	r24, 0x02	; 2
   1aebe:	97 e3       	ldi	r25, 0x37	; 55
   1aec0:	13 c0       	rjmp	.+38     	; 0x1aee8 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1aec2:	fa 01       	movw	r30, r20
   1aec4:	80 81       	ld	r24, Z
   1aec6:	81 11       	cpse	r24, r1
   1aec8:	03 c0       	rjmp	.+6      	; 0x1aed0 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1aeca:	83 ed       	ldi	r24, 0xD3	; 211
   1aecc:	96 e3       	ldi	r25, 0x36	; 54
   1aece:	0c c0       	rjmp	.+24     	; 0x1aee8 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1aed0:	be 01       	movw	r22, r28
   1aed2:	6f 5f       	subi	r22, 0xFF	; 255
   1aed4:	7f 4f       	sbci	r23, 0xFF	; 255
   1aed6:	ca 01       	movw	r24, r20
   1aed8:	0e 94 44 c2 	call	0x18488	; 0x18488 <lif_stat>
   1aedc:	9a ab       	std	Y+50, r25	; 0x32
   1aede:	89 ab       	std	Y+49, r24	; 0x31
    if(!sp)
   1aee0:	89 2b       	or	r24, r25
   1aee2:	59 f4       	brne	.+22     	; 0x1aefa <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1aee4:	83 ea       	ldi	r24, 0xA3	; 163
   1aee6:	96 e3       	ldi	r25, 0x36	; 54
   1aee8:	1f 92       	push	r1
   1aeea:	9f 93       	push	r25
   1aeec:	8f 93       	push	r24
   1aeee:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(-1);
   1aef2:	0f 90       	pop	r0
   1aef4:	0f 90       	pop	r0
   1aef6:	0f 90       	pop	r0
   1aef8:	fe c0       	rjmp	.+508    	; 0x1b0f6 <lif_add_ascii_file_as_e010+0x262>
    }

    if(debuglevel & 0x400)
   1aefa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1aefe:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1af02:	92 ff       	sbrs	r25, 2
   1af04:	12 c0       	rjmp	.+36     	; 0x1af2a <lif_add_ascii_file_as_e010+0x96>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1af06:	ff 92       	push	r15
   1af08:	ef 92       	push	r14
   1af0a:	3f 92       	push	r3
   1af0c:	2f 92       	push	r2
   1af0e:	df 92       	push	r13
   1af10:	cf 92       	push	r12
   1af12:	84 e7       	ldi	r24, 0x74	; 116
   1af14:	96 e3       	ldi	r25, 0x36	; 54
   1af16:	1f 92       	push	r1
   1af18:	9f 93       	push	r25
   1af1a:	8f 93       	push	r24
   1af1c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1af20:	0f b6       	in	r0, 0x3f	; 63
   1af22:	f8 94       	cli
   1af24:	de bf       	out	0x3e, r29	; 62
   1af26:	0f be       	out	0x3f, r0	; 63
   1af28:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1af2a:	97 01       	movw	r18, r14
   1af2c:	40 e0       	ldi	r20, 0x00	; 0
   1af2e:	50 e0       	ldi	r21, 0x00	; 0
   1af30:	ba 01       	movw	r22, r20
   1af32:	80 e0       	ldi	r24, 0x00	; 0
   1af34:	90 e0       	ldi	r25, 0x00	; 0
   1af36:	a1 de       	rcall	.-702    	; 0x1ac7a <lif_add_ascii_file_as_e010_wrapper>
   1af38:	4b 01       	movw	r8, r22
   1af3a:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1af3c:	47 2e       	mov	r4, r23
   1af3e:	58 2e       	mov	r5, r24
   1af40:	69 2e       	mov	r6, r25
   1af42:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1af44:	66 23       	and	r22, r22
   1af46:	29 f0       	breq	.+10     	; 0x1af52 <lif_add_ascii_file_as_e010+0xbe>
        ++sectors;
   1af48:	9f ef       	ldi	r25, 0xFF	; 255
   1af4a:	49 1a       	sub	r4, r25
   1af4c:	59 0a       	sbc	r5, r25
   1af4e:	69 0a       	sbc	r6, r25
   1af50:	79 0a       	sbc	r7, r25

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1af52:	69 e8       	ldi	r22, 0x89	; 137
   1af54:	78 e0       	ldi	r23, 0x08	; 8
   1af56:	c6 01       	movw	r24, r12
   1af58:	85 da       	rcall	.-2806   	; 0x1a464 <lif_open_volume>
   1af5a:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1af5c:	00 97       	sbiw	r24, 0x00	; 0
   1af5e:	09 f4       	brne	.+2      	; 0x1af62 <lif_add_ascii_file_as_e010+0xce>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1af60:	ca c0       	rjmp	.+404    	; 0x1b0f6 <lif_add_ascii_file_as_e010+0x262>
   1af62:	b3 01       	movw	r22, r6
   1af64:	a2 01       	movw	r20, r4
   1af66:	19 d9       	rcall	.-3534   	; 0x1a19a <lif_newdir>
    if(index == -1)
   1af68:	3c 01       	movw	r6, r24
   1af6a:	01 96       	adiw	r24, 0x01	; 1
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1af6c:	a1 f4       	brne	.+40     	; 0x1af96 <lif_add_ascii_file_as_e010+0x102>
   1af6e:	ff 92       	push	r15
   1af70:	ef 92       	push	r14
   1af72:	df 92       	push	r13
   1af74:	cf 92       	push	r12
   1af76:	84 e4       	ldi	r24, 0x44	; 68
   1af78:	96 e3       	ldi	r25, 0x36	; 54
   1af7a:	1f 92       	push	r1
   1af7c:	9f 93       	push	r25
   1af7e:	8f 93       	push	r24
   1af80:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af84:	c8 01       	movw	r24, r16
   1af86:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
    if(index == -1)
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            return(-1);
   1af8a:	0f b6       	in	r0, 0x3f	; 63
   1af8c:	f8 94       	cli
   1af8e:	de bf       	out	0x3e, r29	; 62
   1af90:	0f be       	out	0x3f, r0	; 63
   1af92:	cd bf       	out	0x3d, r28	; 61
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1af94:	b0 c0       	rjmp	.+352    	; 0x1b0f6 <lif_add_ascii_file_as_e010+0x262>
   1af96:	68 01       	movw	r12, r16
   1af98:	9f e4       	ldi	r25, 0x4F	; 79
   1af9a:	c9 0e       	add	r12, r25
   1af9c:	d1 1c       	adc	r13, r1
   1af9e:	4a e0       	ldi	r20, 0x0A	; 10
   1afa0:	50 e0       	ldi	r21, 0x00	; 0
   1afa2:	b1 01       	movw	r22, r2
   1afa4:	c6 01       	movw	r24, r12
   1afa6:	0e 94 e8 c3 	call	0x187d0	; 0x187d0 <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1afaa:	80 e1       	ldi	r24, 0x10	; 16
   1afac:	90 ee       	ldi	r25, 0xE0	; 224
   1afae:	f8 01       	movw	r30, r16
   1afb0:	e6 5a       	subi	r30, 0xA6	; 166
   1afb2:	ff 4f       	sbci	r31, 0xFF	; 255
   1afb4:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1afb6:	80 83       	st	Z, r24
   1afb8:	e9 a9       	ldd	r30, Y+49	; 0x31
   1afba:	fa a9       	ldd	r31, Y+50	; 0x32
   1afbc:	60 a5       	ldd	r22, Z+40	; 0x28
   1afbe:	71 a5       	ldd	r23, Z+41	; 0x29
   1afc0:	82 a5       	ldd	r24, Z+42	; 0x2a
   1afc2:	93 a5       	ldd	r25, Z+43	; 0x2b
   1afc4:	a8 01       	movw	r20, r16
   1afc6:	4c 59       	subi	r20, 0x9C	; 156
   1afc8:	5f 4f       	sbci	r21, 0xFF	; 255
   1afca:	0e 94 2d c6 	call	0x18c5a	; 0x18c5a <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1afce:	81 e0       	ldi	r24, 0x01	; 1
   1afd0:	90 e8       	ldi	r25, 0x80	; 128
   1afd2:	f8 01       	movw	r30, r16
   1afd4:	e6 59       	subi	r30, 0x96	; 150
   1afd6:	ff 4f       	sbci	r31, 0xFF	; 255
   1afd8:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1afda:	80 83       	st	Z, r24
   1afdc:	32 96       	adiw	r30, 0x02	; 2
   1afde:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1afe0:	80 82       	st	Z, r8
   1afe2:	80 e0       	ldi	r24, 0x00	; 0
   1afe4:	91 e0       	ldi	r25, 0x01	; 1
   1afe6:	32 96       	adiw	r30, 0x02	; 2
   1afe8:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1afea:	80 83       	st	Z, r24
   1afec:	58 01       	movw	r10, r16
   1afee:	fc e5       	ldi	r31, 0x5C	; 92
   1aff0:	af 0e       	add	r10, r31
   1aff2:	b1 1c       	adc	r11, r1
   1aff4:	f5 01       	movw	r30, r10
   1aff6:	80 81       	ld	r24, Z
   1aff8:	91 81       	ldd	r25, Z+1	; 0x01
   1affa:	a2 81       	ldd	r26, Z+2	; 0x02
   1affc:	b3 81       	ldd	r27, Z+3	; 0x03
   1affe:	22 24       	eor	r2, r2
   1b000:	38 2e       	mov	r3, r24
   1b002:	49 2e       	mov	r4, r25

    if(debuglevel & 0x400)
   1b004:	5a 2e       	mov	r5, r26
   1b006:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b00a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b00e:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1b010:	05 c0       	rjmp	.+10     	; 0x1b01c <lif_add_ascii_file_as_e010+0x188>
   1b012:	6a ed       	ldi	r22, 0xDA	; 218
   1b014:	75 e1       	ldi	r23, 0x15	; 21
   1b016:	c8 01       	movw	r24, r16
   1b018:	0e 94 19 c7 	call	0x18e32	; 0x18e32 <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1b01c:	97 01       	movw	r18, r14
   1b01e:	b2 01       	movw	r22, r4
   1b020:	a1 01       	movw	r20, r2
   1b022:	c8 01       	movw	r24, r16
   1b024:	2a de       	rcall	.-940    	; 0x1ac7a <lif_add_ascii_file_as_e010_wrapper>
   1b026:	4b 01       	movw	r8, r22

    if(debuglevel & 0x400)
   1b028:	7c 01       	movw	r14, r24
   1b02a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b02e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b032:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1b034:	40 c0       	rjmp	.+128    	; 0x1b0b6 <lif_add_ascii_file_as_e010+0x222>
   1b036:	8d e1       	ldi	r24, 0x1D	; 29
   1b038:	96 e3       	ldi	r25, 0x36	; 54
   1b03a:	1f 92       	push	r1
   1b03c:	9f 93       	push	r25
   1b03e:	8f 93       	push	r24
   1b040:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1b044:	df 92       	push	r13
   1b046:	cf 92       	push	r12
   1b048:	86 e0       	ldi	r24, 0x06	; 6
   1b04a:	96 e3       	ldi	r25, 0x36	; 54
   1b04c:	1f 92       	push	r1
   1b04e:	9f 93       	push	r25
   1b050:	8f 93       	push	r24
   1b052:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1b056:	7f 92       	push	r7
   1b058:	6f 92       	push	r6
   1b05a:	8f ee       	ldi	r24, 0xEF	; 239
   1b05c:	95 e3       	ldi	r25, 0x35	; 53
   1b05e:	1f 92       	push	r1
   1b060:	9f 93       	push	r25
   1b062:	8f 93       	push	r24
   1b064:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1b068:	f5 01       	movw	r30, r10
   1b06a:	83 81       	ldd	r24, Z+3	; 0x03
   1b06c:	8f 93       	push	r24
   1b06e:	82 81       	ldd	r24, Z+2	; 0x02
   1b070:	8f 93       	push	r24
   1b072:	81 81       	ldd	r24, Z+1	; 0x01
   1b074:	8f 93       	push	r24
   1b076:	80 81       	ld	r24, Z
   1b078:	8f 93       	push	r24
   1b07a:	86 ed       	ldi	r24, 0xD6	; 214
   1b07c:	95 e3       	ldi	r25, 0x35	; 53
   1b07e:	1f 92       	push	r1
   1b080:	9f 93       	push	r25
   1b082:	8f 93       	push	r24
   1b084:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1b088:	f8 01       	movw	r30, r16
   1b08a:	e0 5a       	subi	r30, 0xA0	; 160
   1b08c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b08e:	83 81       	ldd	r24, Z+3	; 0x03
   1b090:	8f 93       	push	r24
   1b092:	82 81       	ldd	r24, Z+2	; 0x02
   1b094:	8f 93       	push	r24
   1b096:	81 81       	ldd	r24, Z+1	; 0x01
   1b098:	8f 93       	push	r24
   1b09a:	80 81       	ld	r24, Z
   1b09c:	8f 93       	push	r24
   1b09e:	8d eb       	ldi	r24, 0xBD	; 189
   1b0a0:	95 e3       	ldi	r25, 0x35	; 53
   1b0a2:	1f 92       	push	r1
   1b0a4:	9f 93       	push	r25
   1b0a6:	8f 93       	push	r24
   1b0a8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1b0ac:	0f b6       	in	r0, 0x3f	; 63
   1b0ae:	f8 94       	cli
   1b0b0:	de bf       	out	0x3e, r29	; 62
   1b0b2:	0f be       	out	0x3f, r0	; 63
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1b0b4:	cd bf       	out	0x3d, r28	; 61
   1b0b6:	b3 01       	movw	r22, r6
   1b0b8:	c8 01       	movw	r24, r16
   1b0ba:	0e 94 24 cc 	call	0x19848	; 0x19848 <lif_writedirindex>
   1b0be:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b0c0:	21 f4       	brne	.+8      	; 0x1b0ca <lif_add_ascii_file_as_e010+0x236>
   1b0c2:	c8 01       	movw	r24, r16
   1b0c4:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
   1b0c8:	16 c0       	rjmp	.+44     	; 0x1b0f6 <lif_add_ascii_file_as_e010+0x262>
   1b0ca:	c8 01       	movw	r24, r16
   1b0cc:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1b0d0:	ff 92       	push	r15
   1b0d2:	ef 92       	push	r14
   1b0d4:	9f 92       	push	r9
   1b0d6:	8f 92       	push	r8
   1b0d8:	8f ea       	ldi	r24, 0xAF	; 175
   1b0da:	95 e3       	ldi	r25, 0x35	; 53
   1b0dc:	1f 92       	push	r1
   1b0de:	9f 93       	push	r25
   1b0e0:	8f 93       	push	r24
   1b0e2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>

    // Return file size
    return(bytes);
   1b0e6:	0f b6       	in	r0, 0x3f	; 63
   1b0e8:	f8 94       	cli
   1b0ea:	de bf       	out	0x3e, r29	; 62
   1b0ec:	0f be       	out	0x3f, r0	; 63
   1b0ee:	cd bf       	out	0x3d, r28	; 61
   1b0f0:	b4 01       	movw	r22, r8
   1b0f2:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1b0f4:	04 c0       	rjmp	.+8      	; 0x1b0fe <lif_add_ascii_file_as_e010+0x26a>
   1b0f6:	6f ef       	ldi	r22, 0xFF	; 255
   1b0f8:	7f ef       	ldi	r23, 0xFF	; 255
   1b0fa:	8f ef       	ldi	r24, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1b0fc:	9f ef       	ldi	r25, 0xFF	; 255
   1b0fe:	e2 96       	adiw	r28, 0x32	; 50
   1b100:	e2 e1       	ldi	r30, 0x12	; 18
   1b102:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0001b106 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1b106:	ac e2       	ldi	r26, 0x2C	; 44
   1b108:	b2 e0       	ldi	r27, 0x02	; 2
   1b10a:	e9 e8       	ldi	r30, 0x89	; 137
   1b10c:	f8 ed       	ldi	r31, 0xD8	; 216
   1b10e:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
   1b112:	f8 2e       	mov	r15, r24
   1b114:	b9 2e       	mov	r11, r25
   1b116:	16 2f       	mov	r17, r22
   1b118:	07 2f       	mov	r16, r23
   1b11a:	c4 5e       	subi	r28, 0xE4	; 228
   1b11c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b11e:	48 83       	st	Y, r20
   1b120:	cc 51       	subi	r28, 0x1C	; 28
   1b122:	d2 40       	sbci	r29, 0x02	; 2
   1b124:	e5 2e       	mov	r14, r21
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1b126:	61 e4       	ldi	r22, 0x41	; 65
   1b128:	77 e0       	ldi	r23, 0x07	; 7
   1b12a:	9c d9       	rcall	.-3272   	; 0x1a464 <lif_open_volume>
   1b12c:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1b12e:	00 97       	sbiw	r24, 0x00	; 0
   1b130:	51 f4       	brne	.+20     	; 0x1b146 <lif_extract_e010_as_ascii+0x40>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b132:	bf 92       	push	r11
   1b134:	ff 92       	push	r15
   1b136:	87 e9       	ldi	r24, 0x97	; 151
   1b138:	95 e3       	ldi	r25, 0x35	; 53
   1b13a:	1f 92       	push	r1
   1b13c:	9f 93       	push	r25
   1b13e:	8f 93       	push	r24
   1b140:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1b144:	11 c0       	rjmp	.+34     	; 0x1b168 <lif_extract_e010_as_ascii+0x62>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b146:	61 2f       	mov	r22, r17
   1b148:	70 2f       	mov	r23, r16
   1b14a:	20 dc       	rcall	.-1984   	; 0x1a98c <lif_find_file>
    if(index == -1)
   1b14c:	01 96       	adiw	r24, 0x01	; 1
   1b14e:	a1 f4       	brne	.+40     	; 0x1b178 <lif_extract_e010_as_ascii+0x72>
    {
        printf("LIF File not found:%s\n", lifname);
   1b150:	0f 93       	push	r16
   1b152:	1f 93       	push	r17
   1b154:	80 e8       	ldi	r24, 0x80	; 128
   1b156:	95 e3       	ldi	r25, 0x35	; 53
   1b158:	1f 92       	push	r1
   1b15a:	9f 93       	push	r25
   1b15c:	8f 93       	push	r24
   1b15e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b162:	c6 01       	movw	r24, r12
   1b164:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b168:	0f 90       	pop	r0
   1b16a:	0f 90       	pop	r0
   1b16c:	0f 90       	pop	r0
   1b16e:	0f 90       	pop	r0
   1b170:	0f 90       	pop	r0
   1b172:	80 e0       	ldi	r24, 0x00	; 0
   1b174:	90 e0       	ldi	r25, 0x00	; 0
   1b176:	ae c2       	rjmp	.+1372   	; 0x1b6d4 <lif_extract_e010_as_ascii+0x5ce>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1b178:	f6 01       	movw	r30, r12
   1b17a:	e6 5a       	subi	r30, 0xA6	; 166
   1b17c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b17e:	80 81       	ld	r24, Z
   1b180:	91 81       	ldd	r25, Z+1	; 0x01
   1b182:	9c 01       	movw	r18, r24
   1b184:	2c 7f       	andi	r18, 0xFC	; 252
   1b186:	20 31       	cpi	r18, 0x10	; 16
   1b188:	30 4e       	sbci	r19, 0xE0	; 224
   1b18a:	c9 f0       	breq	.+50     	; 0x1b1be <lif_extract_e010_as_ascii+0xb8>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1b18c:	9f 93       	push	r25
   1b18e:	8f 93       	push	r24
   1b190:	ef 92       	push	r14
   1b192:	c4 5e       	subi	r28, 0xE4	; 228
   1b194:	dd 4f       	sbci	r29, 0xFD	; 253
   1b196:	58 81       	ld	r21, Y
   1b198:	cc 51       	subi	r28, 0x1C	; 28
   1b19a:	d2 40       	sbci	r29, 0x02	; 2
   1b19c:	5f 93       	push	r21
   1b19e:	88 e4       	ldi	r24, 0x48	; 72
   1b1a0:	95 e3       	ldi	r25, 0x35	; 53
   1b1a2:	1f 92       	push	r1
   1b1a4:	9f 93       	push	r25
   1b1a6:	8f 93       	push	r24
   1b1a8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b1ac:	c6 01       	movw	r24, r12
   1b1ae:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
        lif_closedir(LIF);
        return(0);
   1b1b2:	0f b6       	in	r0, 0x3f	; 63
   1b1b4:	f8 94       	cli
   1b1b6:	de bf       	out	0x3e, r29	; 62
   1b1b8:	0f be       	out	0x3f, r0	; 63
   1b1ba:	cd bf       	out	0x3d, r28	; 61
   1b1bc:	da cf       	rjmp	.-76     	; 0x1b172 <lif_extract_e010_as_ascii+0x6c>
    }

    start = LIF->DIR.FileStartSector;
   1b1be:	f6 01       	movw	r30, r12
   1b1c0:	e4 5a       	subi	r30, 0xA4	; 164
   1b1c2:	ff 4f       	sbci	r31, 0xFF	; 255
   1b1c4:	80 80       	ld	r8, Z
   1b1c6:	91 80       	ldd	r9, Z+1	; 0x01
   1b1c8:	a2 80       	ldd	r10, Z+2	; 0x02
   1b1ca:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1b1cc:	34 96       	adiw	r30, 0x04	; 4
   1b1ce:	80 81       	ld	r24, Z
   1b1d0:	91 81       	ldd	r25, Z+1	; 0x01
   1b1d2:	a2 81       	ldd	r26, Z+2	; 0x02
   1b1d4:	b3 81       	ldd	r27, Z+3	; 0x03
   1b1d6:	a5 01       	movw	r20, r10
   1b1d8:	94 01       	movw	r18, r8
   1b1da:	28 0f       	add	r18, r24
   1b1dc:	39 1f       	adc	r19, r25
   1b1de:	4a 1f       	adc	r20, r26
   1b1e0:	5b 1f       	adc	r21, r27
   1b1e2:	c9 5d       	subi	r28, 0xD9	; 217
   1b1e4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1e6:	28 83       	st	Y, r18
   1b1e8:	39 83       	std	Y+1, r19	; 0x01
   1b1ea:	4a 83       	std	Y+2, r20	; 0x02
   1b1ec:	5b 83       	std	Y+3, r21	; 0x03
   1b1ee:	c7 52       	subi	r28, 0x27	; 39
   1b1f0:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1b1f2:	c6 01       	movw	r24, r12
   1b1f4:	8c 59       	subi	r24, 0x9C	; 156
   1b1f6:	9f 4f       	sbci	r25, 0xFF	; 255
   1b1f8:	0e 94 6f c6 	call	0x18cde	; 0x18cde <lif_lifbcd2time>
   1b1fc:	c3 5e       	subi	r28, 0xE3	; 227
   1b1fe:	dd 4f       	sbci	r29, 0xFD	; 253
   1b200:	68 83       	st	Y, r22
   1b202:	79 83       	std	Y+1, r23	; 0x01
   1b204:	8a 83       	std	Y+2, r24	; 0x02
   1b206:	9b 83       	std	Y+3, r25	; 0x03
   1b208:	cd 51       	subi	r28, 0x1D	; 29
   1b20a:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1b20c:	ba 2d       	mov	r27, r10
   1b20e:	a9 2d       	mov	r26, r9
   1b210:	98 2d       	mov	r25, r8
   1b212:	88 27       	eor	r24, r24
   1b214:	cf 5e       	subi	r28, 0xEF	; 239
   1b216:	dd 4f       	sbci	r29, 0xFD	; 253
   1b218:	88 83       	st	Y, r24
   1b21a:	99 83       	std	Y+1, r25	; 0x01
   1b21c:	aa 83       	std	Y+2, r26	; 0x02
   1b21e:	bb 83       	std	Y+3, r27	; 0x03
   1b220:	c1 51       	subi	r28, 0x11	; 17
   1b222:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1b224:	64 e9       	ldi	r22, 0x94	; 148
   1b226:	78 e0       	ldi	r23, 0x08	; 8
   1b228:	c4 5e       	subi	r28, 0xE4	; 228
   1b22a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b22c:	88 81       	ld	r24, Y
   1b22e:	cc 51       	subi	r28, 0x1C	; 28
   1b230:	d2 40       	sbci	r29, 0x02	; 2
   1b232:	9e 2d       	mov	r25, r14
   1b234:	0e 94 1c c2 	call	0x18438	; 0x18438 <lif_open>
   1b238:	c6 5e       	subi	r28, 0xE6	; 230
   1b23a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b23c:	99 83       	std	Y+1, r25	; 0x01
   1b23e:	88 83       	st	Y, r24
   1b240:	ca 51       	subi	r28, 0x1A	; 26
   1b242:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1b244:	89 2b       	or	r24, r25
   1b246:	21 f4       	brne	.+8      	; 0x1b250 <lif_extract_e010_as_ascii+0x14a>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b248:	c6 01       	movw	r24, r12
   1b24a:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
   1b24e:	91 cf       	rjmp	.-222    	; 0x1b172 <lif_extract_e010_as_ascii+0x6c>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b250:	ef 92       	push	r14
   1b252:	c4 5e       	subi	r28, 0xE4	; 228
   1b254:	dd 4f       	sbci	r29, 0xFD	; 253
   1b256:	98 81       	ld	r25, Y
   1b258:	cc 51       	subi	r28, 0x1C	; 28
   1b25a:	d2 40       	sbci	r29, 0x02	; 2
   1b25c:	9f 93       	push	r25
   1b25e:	88 e3       	ldi	r24, 0x38	; 56
   1b260:	95 e3       	ldi	r25, 0x35	; 53
   1b262:	1f 92       	push	r1
   1b264:	9f 93       	push	r25
   1b266:	8f 93       	push	r24
   1b268:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b26c:	0f 90       	pop	r0
   1b26e:	0f 90       	pop	r0
   1b270:	0f 90       	pop	r0
   1b272:	0f 90       	pop	r0
   1b274:	0f 90       	pop	r0
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
    wind = 0;
   1b276:	81 2c       	mov	r8, r1
   1b278:	91 2c       	mov	r9, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b27a:	c8 5e       	subi	r28, 0xE8	; 232
   1b27c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b27e:	19 82       	std	Y+1, r1	; 0x01
   1b280:	18 82       	st	Y, r1
   1b282:	c8 51       	subi	r28, 0x18	; 24
   1b284:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b286:	a1 e0       	ldi	r26, 0x01	; 1
   1b288:	cb 5e       	subi	r28, 0xEB	; 235
   1b28a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b28c:	a8 83       	st	Y, r26
   1b28e:	c5 51       	subi	r28, 0x15	; 21
   1b290:	d2 40       	sbci	r29, 0x02	; 2
   1b292:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b294:	41 2c       	mov	r4, r1
   1b296:	51 2c       	mov	r5, r1
   1b298:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b29a:	87 e7       	ldi	r24, 0x77	; 119
   1b29c:	94 e3       	ldi	r25, 0x34	; 52
   1b29e:	9c 01       	movw	r18, r24
   1b2a0:	40 e0       	ldi	r20, 0x00	; 0
   1b2a2:	cf 5d       	subi	r28, 0xDF	; 223
   1b2a4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2a6:	28 83       	st	Y, r18
   1b2a8:	39 83       	std	Y+1, r19	; 0x01
   1b2aa:	4a 83       	std	Y+2, r20	; 0x02
   1b2ac:	c1 52       	subi	r28, 0x21	; 33
   1b2ae:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b2b0:	85 e8       	ldi	r24, 0x85	; 133
   1b2b2:	94 e3       	ldi	r25, 0x34	; 52
   1b2b4:	9c 01       	movw	r18, r24
   1b2b6:	40 e0       	ldi	r20, 0x00	; 0
   1b2b8:	cc 5d       	subi	r28, 0xDC	; 220
   1b2ba:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2bc:	28 83       	st	Y, r18
   1b2be:	39 83       	std	Y+1, r19	; 0x01
   1b2c0:	4a 83       	std	Y+2, r20	; 0x02
   1b2c2:	c4 52       	subi	r28, 0x24	; 36
   1b2c4:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b2c6:	cf 5e       	subi	r28, 0xEF	; 239
   1b2c8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2ca:	28 81       	ld	r18, Y
   1b2cc:	39 81       	ldd	r19, Y+1	; 0x01
   1b2ce:	4a 81       	ldd	r20, Y+2	; 0x02
   1b2d0:	5b 81       	ldd	r21, Y+3	; 0x03
   1b2d2:	c1 51       	subi	r28, 0x11	; 17
   1b2d4:	d2 40       	sbci	r29, 0x02	; 2
   1b2d6:	bb 27       	eor	r27, r27
   1b2d8:	a5 2f       	mov	r26, r21
   1b2da:	94 2f       	mov	r25, r20
   1b2dc:	83 2f       	mov	r24, r19
   1b2de:	c9 5d       	subi	r28, 0xD9	; 217
   1b2e0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2e2:	28 81       	ld	r18, Y
   1b2e4:	39 81       	ldd	r19, Y+1	; 0x01
   1b2e6:	4a 81       	ldd	r20, Y+2	; 0x02
   1b2e8:	5b 81       	ldd	r21, Y+3	; 0x03
   1b2ea:	c7 52       	subi	r28, 0x27	; 39
   1b2ec:	d2 40       	sbci	r29, 0x02	; 2
   1b2ee:	28 17       	cp	r18, r24
   1b2f0:	39 07       	cpc	r19, r25
   1b2f2:	4a 07       	cpc	r20, r26
   1b2f4:	5b 07       	cpc	r21, r27
   1b2f6:	08 f4       	brcc	.+2      	; 0x1b2fa <lif_extract_e010_as_ascii+0x1f4>
   1b2f8:	76 c1       	rjmp	.+748    	; 0x1b5e6 <lif_extract_e010_as_ascii+0x4e0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b2fa:	00 e0       	ldi	r16, 0x00	; 0
   1b2fc:	11 e0       	ldi	r17, 0x01	; 1
   1b2fe:	cf 5e       	subi	r28, 0xEF	; 239
   1b300:	dd 4f       	sbci	r29, 0xFD	; 253
   1b302:	28 81       	ld	r18, Y
   1b304:	39 81       	ldd	r19, Y+1	; 0x01
   1b306:	4a 81       	ldd	r20, Y+2	; 0x02
   1b308:	5b 81       	ldd	r21, Y+3	; 0x03
   1b30a:	c1 51       	subi	r28, 0x11	; 17
   1b30c:	d2 40       	sbci	r29, 0x02	; 2
   1b30e:	be 01       	movw	r22, r28
   1b310:	6b 5f       	subi	r22, 0xFB	; 251
   1b312:	7e 4f       	sbci	r23, 0xFE	; 254
   1b314:	c6 01       	movw	r24, r12
   1b316:	0e 94 a2 c2 	call	0x18544	; 0x18544 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b31a:	6f 3f       	cpi	r22, 0xFF	; 255
   1b31c:	71 05       	cpc	r23, r1
   1b31e:	09 f0       	breq	.+2      	; 0x1b322 <lif_extract_e010_as_ascii+0x21c>
   1b320:	0c f4       	brge	.+2      	; 0x1b324 <lif_extract_e010_as_ascii+0x21e>
   1b322:	5b c1       	rjmp	.+694    	; 0x1b5da <lif_extract_e010_as_ascii+0x4d4>
   1b324:	00 e0       	ldi	r16, 0x00	; 0
   1b326:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b328:	c8 5e       	subi	r28, 0xE8	; 232
   1b32a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b32c:	a8 81       	ld	r26, Y
   1b32e:	b9 81       	ldd	r27, Y+1	; 0x01
   1b330:	c8 51       	subi	r28, 0x18	; 24
   1b332:	d2 40       	sbci	r29, 0x02	; 2
   1b334:	ab 2b       	or	r26, r27
   1b336:	09 f0       	breq	.+2      	; 0x1b33a <lif_extract_e010_as_ascii+0x234>
   1b338:	3c c1       	rjmp	.+632    	; 0x1b5b2 <lif_extract_e010_as_ascii+0x4ac>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b33a:	e5 e0       	ldi	r30, 0x05	; 5
   1b33c:	f1 e0       	ldi	r31, 0x01	; 1
   1b33e:	ec 0f       	add	r30, r28
   1b340:	fd 1f       	adc	r31, r29
   1b342:	e0 0f       	add	r30, r16
   1b344:	f1 1f       	adc	r31, r17
   1b346:	80 81       	ld	r24, Z
   1b348:	98 2f       	mov	r25, r24
   1b34a:	9f 7e       	andi	r25, 0xEF	; 239
   1b34c:	9f 3c       	cpi	r25, 0xCF	; 207
   1b34e:	11 f0       	breq	.+4      	; 0x1b354 <lif_extract_e010_as_ascii+0x24e>
   1b350:	8f 36       	cpi	r24, 0x6F	; 111
   1b352:	d9 f5       	brne	.+118    	; 0x1b3ca <lif_extract_e010_as_ascii+0x2c4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b354:	e5 e0       	ldi	r30, 0x05	; 5
   1b356:	f1 e0       	ldi	r31, 0x01	; 1
   1b358:	ec 0f       	add	r30, r28
   1b35a:	fd 1f       	adc	r31, r29
   1b35c:	e0 0f       	add	r30, r16
   1b35e:	f1 1f       	adc	r31, r17
   1b360:	21 80       	ldd	r2, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1b362:	f8 01       	movw	r30, r16
   1b364:	32 96       	adiw	r30, 0x02	; 2
   1b366:	45 e0       	ldi	r20, 0x05	; 5
   1b368:	51 e0       	ldi	r21, 0x01	; 1
   1b36a:	4c 0f       	add	r20, r28
   1b36c:	5d 1f       	adc	r21, r29
   1b36e:	e4 0f       	add	r30, r20
   1b370:	f5 1f       	adc	r31, r21
   1b372:	0d 5f       	subi	r16, 0xFD	; 253
   1b374:	1f 4f       	sbci	r17, 0xFF	; 255
   1b376:	80 81       	ld	r24, Z
   1b378:	31 2c       	mov	r3, r1
   1b37a:	38 2a       	or	r3, r24
                // EOF ?
                if(len == 0)
   1b37c:	21 14       	cp	r2, r1
   1b37e:	31 04       	cpc	r3, r1
   1b380:	09 f4       	brne	.+2      	; 0x1b384 <lif_extract_e010_as_ascii+0x27e>
   1b382:	0f c1       	rjmp	.+542    	; 0x1b5a2 <lif_extract_e010_as_ascii+0x49c>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b384:	5f ef       	ldi	r21, 0xFF	; 255
   1b386:	25 16       	cp	r2, r21
   1b388:	31 04       	cpc	r3, r1
   1b38a:	09 f0       	breq	.+2      	; 0x1b38e <lif_extract_e010_as_ascii+0x288>
   1b38c:	7c f4       	brge	.+30     	; 0x1b3ac <lif_extract_e010_as_ascii+0x2a6>
   1b38e:	ca 5e       	subi	r28, 0xEA	; 234
   1b390:	dd 4f       	sbci	r29, 0xFD	; 253
   1b392:	19 82       	std	Y+1, r1	; 0x01
   1b394:	18 82       	st	Y, r1
   1b396:	c6 51       	subi	r28, 0x16	; 22
   1b398:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b39a:	c1 01       	movw	r24, r2
   1b39c:	01 97       	sbiw	r24, 0x01	; 1
   1b39e:	c5 5d       	subi	r28, 0xD5	; 213
   1b3a0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3a2:	99 83       	std	Y+1, r25	; 0x01
   1b3a4:	88 83       	st	Y, r24
   1b3a6:	cb 52       	subi	r28, 0x2B	; 43
   1b3a8:	d2 40       	sbci	r29, 0x02	; 2
   1b3aa:	7b c0       	rjmp	.+246    	; 0x1b4a2 <lif_extract_e010_as_ascii+0x39c>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b3ac:	3f 92       	push	r3
   1b3ae:	2f 92       	push	r2
   1b3b0:	83 e0       	ldi	r24, 0x03	; 3
   1b3b2:	95 e3       	ldi	r25, 0x35	; 53
   1b3b4:	1f 92       	push	r1
   1b3b6:	9f 93       	push	r25
   1b3b8:	8f 93       	push	r24
   1b3ba:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
                    status = 0;
                    done = 1;
                    break;
   1b3be:	0f 90       	pop	r0
   1b3c0:	0f 90       	pop	r0
   1b3c2:	0f 90       	pop	r0
   1b3c4:	0f 90       	pop	r0
   1b3c6:	0f 90       	pop	r0
   1b3c8:	2b c0       	rjmp	.+86     	; 0x1b420 <lif_extract_e010_as_ascii+0x31a>
                }
            }
            else if(buf[ind] == 0xEF)
   1b3ca:	8f 3e       	cpi	r24, 0xEF	; 239
   1b3cc:	09 f4       	brne	.+2      	; 0x1b3d0 <lif_extract_e010_as_ascii+0x2ca>
   1b3ce:	f1 c0       	rjmp	.+482    	; 0x1b5b2 <lif_extract_e010_as_ascii+0x4ac>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b3d0:	1f 93       	push	r17
   1b3d2:	0f 93       	push	r16
   1b3d4:	cc 5e       	subi	r28, 0xEC	; 236
   1b3d6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3d8:	b8 81       	ld	r27, Y
   1b3da:	c4 51       	subi	r28, 0x14	; 20
   1b3dc:	d2 40       	sbci	r29, 0x02	; 2
   1b3de:	bf 93       	push	r27
   1b3e0:	cd 5e       	subi	r28, 0xED	; 237
   1b3e2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3e4:	28 81       	ld	r18, Y
   1b3e6:	c3 51       	subi	r28, 0x13	; 19
   1b3e8:	d2 40       	sbci	r29, 0x02	; 2
   1b3ea:	2f 93       	push	r18
   1b3ec:	ce 5e       	subi	r28, 0xEE	; 238
   1b3ee:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3f0:	38 81       	ld	r19, Y
   1b3f2:	c2 51       	subi	r28, 0x12	; 18
   1b3f4:	d2 40       	sbci	r29, 0x02	; 2
   1b3f6:	3f 93       	push	r19
   1b3f8:	cf 5e       	subi	r28, 0xEF	; 239
   1b3fa:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3fc:	48 81       	ld	r20, Y
   1b3fe:	c1 51       	subi	r28, 0x11	; 17
   1b400:	d2 40       	sbci	r29, 0x02	; 2
   1b402:	4f 93       	push	r20
   1b404:	1f 92       	push	r1
   1b406:	8f 93       	push	r24
   1b408:	8d ea       	ldi	r24, 0xAD	; 173
   1b40a:	94 e3       	ldi	r25, 0x34	; 52
   1b40c:	1f 92       	push	r1
   1b40e:	9f 93       	push	r25
   1b410:	8f 93       	push	r24
   1b412:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
                status = 0;
                done = 1;
                break;
   1b416:	0f b6       	in	r0, 0x3f	; 63
   1b418:	f8 94       	cli
   1b41a:	de bf       	out	0x3e, r29	; 62
   1b41c:	0f be       	out	0x3f, r0	; 63
   1b41e:	cd bf       	out	0x3d, r28	; 61
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
                done = 1;
   1b420:	a1 e0       	ldi	r26, 0x01	; 1
   1b422:	b0 e0       	ldi	r27, 0x00	; 0
   1b424:	c8 5e       	subi	r28, 0xE8	; 232
   1b426:	dd 4f       	sbci	r29, 0xFD	; 253
   1b428:	b9 83       	std	Y+1, r27	; 0x01
   1b42a:	a8 83       	st	Y, r26
   1b42c:	c8 51       	subi	r28, 0x18	; 24
   1b42e:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b430:	cb 5e       	subi	r28, 0xEB	; 235
   1b432:	dd 4f       	sbci	r29, 0xFD	; 253
   1b434:	18 82       	st	Y, r1
   1b436:	c5 51       	subi	r28, 0x15	; 21
   1b438:	d2 40       	sbci	r29, 0x02	; 2
   1b43a:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b43c:	ba c0       	rjmp	.+372    	; 0x1b5b2 <lif_extract_e010_as_ascii+0x4ac>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b43e:	0f 3f       	cpi	r16, 0xFF	; 255
   1b440:	11 05       	cpc	r17, r1
   1b442:	11 f0       	breq	.+4      	; 0x1b448 <lif_extract_e010_as_ascii+0x342>
   1b444:	0c f0       	brlt	.+2      	; 0x1b448 <lif_extract_e010_as_ascii+0x342>
   1b446:	b5 c0       	rjmp	.+362    	; 0x1b5b2 <lif_extract_e010_as_ascii+0x4ac>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b448:	e5 e0       	ldi	r30, 0x05	; 5
   1b44a:	f1 e0       	ldi	r31, 0x01	; 1
   1b44c:	ec 0f       	add	r30, r28
   1b44e:	fd 1f       	adc	r31, r29
   1b450:	e0 0f       	add	r30, r16
   1b452:	f1 1f       	adc	r31, r17
   1b454:	20 81       	ld	r18, Z
   1b456:	a4 01       	movw	r20, r8
   1b458:	4f 5f       	subi	r20, 0xFF	; 255
   1b45a:	5f 4f       	sbci	r21, 0xFF	; 255
   1b45c:	5a 01       	movw	r10, r20
   1b45e:	2d 30       	cpi	r18, 0x0D	; 13
   1b460:	51 f1       	breq	.+84     	; 0x1b4b6 <lif_extract_e010_as_ascii+0x3b0>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b462:	9a 2d       	mov	r25, r10
   1b464:	8b 2d       	mov	r24, r11
   1b466:	0f 5f       	subi	r16, 0xFF	; 255
   1b468:	1f 4f       	sbci	r17, 0xFF	; 255
   1b46a:	e1 e0       	ldi	r30, 0x01	; 1
   1b46c:	f0 e0       	ldi	r31, 0x00	; 0
   1b46e:	ec 0f       	add	r30, r28
   1b470:	fd 1f       	adc	r31, r29
   1b472:	e8 0d       	add	r30, r8
   1b474:	f9 1d       	adc	r31, r9
   1b476:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b478:	2f ef       	ldi	r18, 0xFF	; 255
   1b47a:	a2 16       	cp	r10, r18
   1b47c:	b1 04       	cpc	r11, r1
   1b47e:	09 f0       	breq	.+2      	; 0x1b482 <lif_extract_e010_as_ascii+0x37c>
   1b480:	ac f5       	brge	.+106    	; 0x1b4ec <lif_extract_e010_as_ascii+0x3e6>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b482:	ca 5e       	subi	r28, 0xEA	; 234
   1b484:	dd 4f       	sbci	r29, 0xFD	; 253
   1b486:	48 81       	ld	r20, Y
   1b488:	59 81       	ldd	r21, Y+1	; 0x01
   1b48a:	c6 51       	subi	r28, 0x16	; 22
   1b48c:	d2 40       	sbci	r29, 0x02	; 2
   1b48e:	4f 5f       	subi	r20, 0xFF	; 255
   1b490:	5f 4f       	sbci	r21, 0xFF	; 255
   1b492:	ca 5e       	subi	r28, 0xEA	; 234
   1b494:	dd 4f       	sbci	r29, 0xFD	; 253
   1b496:	59 83       	std	Y+1, r21	; 0x01
   1b498:	48 83       	st	Y, r20
   1b49a:	c6 51       	subi	r28, 0x16	; 22
   1b49c:	d2 40       	sbci	r29, 0x02	; 2
   1b49e:	89 2e       	mov	r8, r25
   1b4a0:	98 2e       	mov	r9, r24
   1b4a2:	ca 5e       	subi	r28, 0xEA	; 234
   1b4a4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4a6:	88 81       	ld	r24, Y
   1b4a8:	99 81       	ldd	r25, Y+1	; 0x01
   1b4aa:	c6 51       	subi	r28, 0x16	; 22
   1b4ac:	d2 40       	sbci	r29, 0x02	; 2
   1b4ae:	82 15       	cp	r24, r2
   1b4b0:	93 05       	cpc	r25, r3
   1b4b2:	2c f2       	brlt	.-118    	; 0x1b43e <lif_extract_e010_as_ascii+0x338>
   1b4b4:	70 c0       	rjmp	.+224    	; 0x1b596 <lif_extract_e010_as_ascii+0x490>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b4b6:	ca 5e       	subi	r28, 0xEA	; 234
   1b4b8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4ba:	88 81       	ld	r24, Y
   1b4bc:	99 81       	ldd	r25, Y+1	; 0x01
   1b4be:	c6 51       	subi	r28, 0x16	; 22
   1b4c0:	d2 40       	sbci	r29, 0x02	; 2
   1b4c2:	c5 5d       	subi	r28, 0xD5	; 213
   1b4c4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4c6:	a8 81       	ld	r26, Y
   1b4c8:	b9 81       	ldd	r27, Y+1	; 0x01
   1b4ca:	cb 52       	subi	r28, 0x2B	; 43
   1b4cc:	d2 40       	sbci	r29, 0x02	; 2
   1b4ce:	8a 17       	cp	r24, r26
   1b4d0:	9b 07       	cpc	r25, r27
   1b4d2:	39 f6       	brne	.-114    	; 0x1b462 <lif_extract_e010_as_ascii+0x35c>
                {
                    wbuf[wind++] = '\n';
   1b4d4:	e1 e0       	ldi	r30, 0x01	; 1
   1b4d6:	f0 e0       	ldi	r31, 0x00	; 0
   1b4d8:	ec 0f       	add	r30, r28
   1b4da:	fd 1f       	adc	r31, r29
   1b4dc:	e8 0d       	add	r30, r8
   1b4de:	f9 1d       	adc	r31, r9
   1b4e0:	ba e0       	ldi	r27, 0x0A	; 10
   1b4e2:	b0 83       	st	Z, r27
                    ++ind;
   1b4e4:	0f 5f       	subi	r16, 0xFF	; 255
   1b4e6:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b4e8:	4a 01       	movw	r8, r20
                    ++ind;
                    break;
   1b4ea:	55 c0       	rjmp	.+170    	; 0x1b596 <lif_extract_e010_as_ascii+0x490>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b4ec:	c6 5e       	subi	r28, 0xE6	; 230
   1b4ee:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4f0:	28 81       	ld	r18, Y
   1b4f2:	39 81       	ldd	r19, Y+1	; 0x01
   1b4f4:	ca 51       	subi	r28, 0x1A	; 26
   1b4f6:	d2 40       	sbci	r29, 0x02	; 2
   1b4f8:	a5 01       	movw	r20, r10
   1b4fa:	61 e0       	ldi	r22, 0x01	; 1
   1b4fc:	70 e0       	ldi	r23, 0x00	; 0
   1b4fe:	ce 01       	movw	r24, r28
   1b500:	01 96       	adiw	r24, 0x01	; 1
   1b502:	0e 94 bd 7c 	call	0xf97a	; 0xf97a <fwrite>
                    if(size < wind)
   1b506:	8a 15       	cp	r24, r10
   1b508:	9b 05       	cpc	r25, r11
   1b50a:	14 f5       	brge	.+68     	; 0x1b550 <lif_extract_e010_as_ascii+0x44a>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b50c:	1f 92       	push	r1
   1b50e:	cb 5d       	subi	r28, 0xDB	; 219
   1b510:	dd 4f       	sbci	r29, 0xFD	; 253
   1b512:	38 81       	ld	r19, Y
   1b514:	c5 52       	subi	r28, 0x25	; 37
   1b516:	d2 40       	sbci	r29, 0x02	; 2
   1b518:	3f 93       	push	r19
   1b51a:	cc 5d       	subi	r28, 0xDC	; 220
   1b51c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b51e:	48 81       	ld	r20, Y
   1b520:	c4 52       	subi	r28, 0x24	; 36
   1b522:	d2 40       	sbci	r29, 0x02	; 2
   1b524:	4f 93       	push	r20
   1b526:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
                        status = 0;
                        done = 1;
                        break;
   1b52a:	0f 90       	pop	r0
   1b52c:	0f 90       	pop	r0
   1b52e:	0f 90       	pop	r0
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b530:	45 01       	movw	r8, r10
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b532:	81 e0       	ldi	r24, 0x01	; 1
   1b534:	90 e0       	ldi	r25, 0x00	; 0
   1b536:	c8 5e       	subi	r28, 0xE8	; 232
   1b538:	dd 4f       	sbci	r29, 0xFD	; 253
   1b53a:	99 83       	std	Y+1, r25	; 0x01
   1b53c:	88 83       	st	Y, r24
   1b53e:	c8 51       	subi	r28, 0x18	; 24
   1b540:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b542:	cb 5e       	subi	r28, 0xEB	; 235
   1b544:	dd 4f       	sbci	r29, 0xFD	; 253
   1b546:	18 82       	st	Y, r1
   1b548:	c5 51       	subi	r28, 0x15	; 21
   1b54a:	d2 40       	sbci	r29, 0x02	; 2
   1b54c:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b54e:	23 c0       	rjmp	.+70     	; 0x1b596 <lif_extract_e010_as_ascii+0x490>
                    }
                    bytes += size;
   1b550:	09 2e       	mov	r0, r25
   1b552:	00 0c       	add	r0, r0
   1b554:	aa 0b       	sbc	r26, r26
   1b556:	bb 0b       	sbc	r27, r27
   1b558:	48 0e       	add	r4, r24
   1b55a:	59 1e       	adc	r5, r25
   1b55c:	6a 1e       	adc	r6, r26
   1b55e:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b560:	7f 92       	push	r7
   1b562:	6f 92       	push	r6
   1b564:	5f 92       	push	r5
   1b566:	4f 92       	push	r4
   1b568:	1f 92       	push	r1
   1b56a:	ce 5d       	subi	r28, 0xDE	; 222
   1b56c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b56e:	98 81       	ld	r25, Y
   1b570:	c2 52       	subi	r28, 0x22	; 34
   1b572:	d2 40       	sbci	r29, 0x02	; 2
   1b574:	9f 93       	push	r25
   1b576:	cf 5d       	subi	r28, 0xDF	; 223
   1b578:	dd 4f       	sbci	r29, 0xFD	; 253
   1b57a:	a8 81       	ld	r26, Y
   1b57c:	c1 52       	subi	r28, 0x21	; 33
   1b57e:	d2 40       	sbci	r29, 0x02	; 2
   1b580:	af 93       	push	r26
   1b582:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1b586:	0f b6       	in	r0, 0x3f	; 63
   1b588:	f8 94       	cli
   1b58a:	de bf       	out	0x3e, r29	; 62
   1b58c:	0f be       	out	0x3f, r0	; 63
   1b58e:	cd bf       	out	0x3d, r28	; 61
                    wind = 0;
   1b590:	90 e0       	ldi	r25, 0x00	; 0
   1b592:	80 e0       	ldi	r24, 0x00	; 0
   1b594:	76 cf       	rjmp	.-276    	; 0x1b482 <lif_extract_e010_as_ascii+0x37c>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b596:	0f 3f       	cpi	r16, 0xFF	; 255
   1b598:	11 05       	cpc	r17, r1
   1b59a:	09 f0       	breq	.+2      	; 0x1b59e <lif_extract_e010_as_ascii+0x498>
   1b59c:	0c f4       	brge	.+2      	; 0x1b5a0 <lif_extract_e010_as_ascii+0x49a>
   1b59e:	c4 ce       	rjmp	.-632    	; 0x1b328 <lif_extract_e010_as_ascii+0x222>
   1b5a0:	08 c0       	rjmp	.+16     	; 0x1b5b2 <lif_extract_e010_as_ascii+0x4ac>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1b5a2:	21 e0       	ldi	r18, 0x01	; 1
   1b5a4:	30 e0       	ldi	r19, 0x00	; 0
   1b5a6:	c8 5e       	subi	r28, 0xE8	; 232
   1b5a8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5aa:	39 83       	std	Y+1, r19	; 0x01
   1b5ac:	28 83       	st	Y, r18
   1b5ae:	c8 51       	subi	r28, 0x18	; 24
   1b5b0:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b5b2:	cf 5e       	subi	r28, 0xEF	; 239
   1b5b4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5b6:	88 81       	ld	r24, Y
   1b5b8:	99 81       	ldd	r25, Y+1	; 0x01
   1b5ba:	aa 81       	ldd	r26, Y+2	; 0x02
   1b5bc:	bb 81       	ldd	r27, Y+3	; 0x03
   1b5be:	c1 51       	subi	r28, 0x11	; 17
   1b5c0:	d2 40       	sbci	r29, 0x02	; 2
   1b5c2:	9f 5f       	subi	r25, 0xFF	; 255
   1b5c4:	af 4f       	sbci	r26, 0xFF	; 255
   1b5c6:	bf 4f       	sbci	r27, 0xFF	; 255
   1b5c8:	cf 5e       	subi	r28, 0xEF	; 239
   1b5ca:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5cc:	88 83       	st	Y, r24
   1b5ce:	99 83       	std	Y+1, r25	; 0x01
   1b5d0:	aa 83       	std	Y+2, r26	; 0x02
   1b5d2:	bb 83       	std	Y+3, r27	; 0x03
   1b5d4:	c1 51       	subi	r28, 0x11	; 17
   1b5d6:	d2 40       	sbci	r29, 0x02	; 2
   1b5d8:	76 ce       	rjmp	.-788    	; 0x1b2c6 <lif_extract_e010_as_ascii+0x1c0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b5da:	cb 5e       	subi	r28, 0xEB	; 235
   1b5dc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5de:	18 82       	st	Y, r1
   1b5e0:	c5 51       	subi	r28, 0x15	; 21
   1b5e2:	d2 40       	sbci	r29, 0x02	; 2
   1b5e4:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5e6:	c6 01       	movw	r24, r12
   1b5e8:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1b5ec:	81 14       	cp	r8, r1
   1b5ee:	91 04       	cpc	r9, r1
   1b5f0:	51 f1       	breq	.+84     	; 0x1b646 <lif_extract_e010_as_ascii+0x540>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b5f2:	c6 5e       	subi	r28, 0xE6	; 230
   1b5f4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5f6:	28 81       	ld	r18, Y
   1b5f8:	39 81       	ldd	r19, Y+1	; 0x01
   1b5fa:	ca 51       	subi	r28, 0x1A	; 26
   1b5fc:	d2 40       	sbci	r29, 0x02	; 2
   1b5fe:	a4 01       	movw	r20, r8
   1b600:	61 e0       	ldi	r22, 0x01	; 1
   1b602:	70 e0       	ldi	r23, 0x00	; 0
   1b604:	ce 01       	movw	r24, r28
   1b606:	01 96       	adiw	r24, 0x01	; 1
   1b608:	0e 94 bd 7c 	call	0xf97a	; 0xf97a <fwrite>
   1b60c:	8c 01       	movw	r16, r24
        if(size < wind)
   1b60e:	88 15       	cp	r24, r8
   1b610:	99 05       	cpc	r25, r9
   1b612:	84 f4       	brge	.+32     	; 0x1b634 <lif_extract_e010_as_ascii+0x52e>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b614:	8f e4       	ldi	r24, 0x4F	; 79
   1b616:	94 e3       	ldi	r25, 0x34	; 52
   1b618:	1f 92       	push	r1
   1b61a:	9f 93       	push	r25
   1b61c:	8f 93       	push	r24
   1b61e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1b622:	0f 90       	pop	r0
   1b624:	0f 90       	pop	r0
   1b626:	0f 90       	pop	r0
            status = 0;
   1b628:	cb 5e       	subi	r28, 0xEB	; 235
   1b62a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b62c:	18 82       	st	Y, r1
   1b62e:	c5 51       	subi	r28, 0x15	; 21
   1b630:	d2 40       	sbci	r29, 0x02	; 2
   1b632:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b634:	c8 01       	movw	r24, r16
   1b636:	01 2e       	mov	r0, r17
   1b638:	00 0c       	add	r0, r0
   1b63a:	aa 0b       	sbc	r26, r26
   1b63c:	bb 0b       	sbc	r27, r27
   1b63e:	48 0e       	add	r4, r24
   1b640:	59 1e       	adc	r5, r25
   1b642:	6a 1e       	adc	r6, r26
   1b644:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b646:	c6 5e       	subi	r28, 0xE6	; 230
   1b648:	dd 4f       	sbci	r29, 0xFD	; 253
   1b64a:	88 81       	ld	r24, Y
   1b64c:	99 81       	ldd	r25, Y+1	; 0x01
   1b64e:	ca 51       	subi	r28, 0x1A	; 26
   1b650:	d2 40       	sbci	r29, 0x02	; 2
   1b652:	0e 94 3f 7d 	call	0xfa7e	; 0xfa7e <fclose>
    if(t)
   1b656:	c3 5e       	subi	r28, 0xE3	; 227
   1b658:	dd 4f       	sbci	r29, 0xFD	; 253
   1b65a:	88 81       	ld	r24, Y
   1b65c:	99 81       	ldd	r25, Y+1	; 0x01
   1b65e:	aa 81       	ldd	r26, Y+2	; 0x02
   1b660:	bb 81       	ldd	r27, Y+3	; 0x03
   1b662:	cd 51       	subi	r28, 0x1D	; 29
   1b664:	d2 40       	sbci	r29, 0x02	; 2
   1b666:	00 97       	sbiw	r24, 0x00	; 0
   1b668:	a1 05       	cpc	r26, r1
   1b66a:	b1 05       	cpc	r27, r1
   1b66c:	d9 f0       	breq	.+54     	; 0x1b6a4 <lif_extract_e010_as_ascii+0x59e>
    {
        struct utimbuf times;
        times.modtime = t;
   1b66e:	c3 5f       	subi	r28, 0xF3	; 243
   1b670:	dd 4f       	sbci	r29, 0xFD	; 253
   1b672:	88 83       	st	Y, r24
   1b674:	99 83       	std	Y+1, r25	; 0x01
   1b676:	aa 83       	std	Y+2, r26	; 0x02
   1b678:	bb 83       	std	Y+3, r27	; 0x03
   1b67a:	cd 50       	subi	r28, 0x0D	; 13
   1b67c:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b67e:	c7 5f       	subi	r28, 0xF7	; 247
   1b680:	dd 4f       	sbci	r29, 0xFD	; 253
   1b682:	88 83       	st	Y, r24
   1b684:	99 83       	std	Y+1, r25	; 0x01
   1b686:	aa 83       	std	Y+2, r26	; 0x02
   1b688:	bb 83       	std	Y+3, r27	; 0x03
   1b68a:	c9 50       	subi	r28, 0x09	; 9
   1b68c:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b68e:	be 01       	movw	r22, r28
   1b690:	67 5f       	subi	r22, 0xF7	; 247
   1b692:	7d 4f       	sbci	r23, 0xFD	; 253
   1b694:	c4 5e       	subi	r28, 0xE4	; 228
   1b696:	dd 4f       	sbci	r29, 0xFD	; 253
   1b698:	88 81       	ld	r24, Y
   1b69a:	cc 51       	subi	r28, 0x1C	; 28
   1b69c:	d2 40       	sbci	r29, 0x02	; 2
   1b69e:	9e 2d       	mov	r25, r14
   1b6a0:	0e 94 7d 7a 	call	0xf4fa	; 0xf4fa <utime>
    }
    sync();
   1b6a4:	0e 94 3a 7c 	call	0xf874	; 0xf874 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b6a8:	7f 92       	push	r7
   1b6aa:	6f 92       	push	r6
   1b6ac:	5f 92       	push	r5
   1b6ae:	4f 92       	push	r4
   1b6b0:	81 e4       	ldi	r24, 0x41	; 65
   1b6b2:	94 e3       	ldi	r25, 0x34	; 52
   1b6b4:	1f 92       	push	r1
   1b6b6:	9f 93       	push	r25
   1b6b8:	8f 93       	push	r24
   1b6ba:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    return(status);
   1b6be:	0f b6       	in	r0, 0x3f	; 63
   1b6c0:	f8 94       	cli
   1b6c2:	de bf       	out	0x3e, r29	; 62
   1b6c4:	0f be       	out	0x3f, r0	; 63
   1b6c6:	cd bf       	out	0x3d, r28	; 61
   1b6c8:	cb 5e       	subi	r28, 0xEB	; 235
   1b6ca:	dd 4f       	sbci	r29, 0xFD	; 253
   1b6cc:	88 81       	ld	r24, Y
   1b6ce:	c5 51       	subi	r28, 0x15	; 21
   1b6d0:	d2 40       	sbci	r29, 0x02	; 2
   1b6d2:	9f 2d       	mov	r25, r15
}
   1b6d4:	c4 5d       	subi	r28, 0xD4	; 212
   1b6d6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b6d8:	e2 e1       	ldi	r30, 0x12	; 18
   1b6da:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0001b6de <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b6de:	ad e0       	ldi	r26, 0x0D	; 13
   1b6e0:	b1 e0       	ldi	r27, 0x01	; 1
   1b6e2:	e5 e7       	ldi	r30, 0x75	; 117
   1b6e4:	fb ed       	ldi	r31, 0xDB	; 219
   1b6e6:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__prologue_saves__>
   1b6ea:	f8 2e       	mov	r15, r24
   1b6ec:	e9 2e       	mov	r14, r25
   1b6ee:	16 2f       	mov	r17, r22
   1b6f0:	07 2f       	mov	r16, r23
   1b6f2:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b6f4:	61 e4       	ldi	r22, 0x41	; 65
   1b6f6:	77 e0       	ldi	r23, 0x07	; 7
   1b6f8:	0e 94 32 d2 	call	0x1a464	; 0x1a464 <lif_open_volume>
   1b6fc:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b6fe:	00 97       	sbiw	r24, 0x00	; 0
   1b700:	51 f4       	brne	.+20     	; 0x1b716 <lif_extract_lif_as_lif+0x38>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b702:	ef 92       	push	r14
   1b704:	ff 92       	push	r15
   1b706:	89 e2       	ldi	r24, 0x29	; 41
   1b708:	94 e3       	ldi	r25, 0x34	; 52
   1b70a:	1f 92       	push	r1
   1b70c:	9f 93       	push	r25
   1b70e:	8f 93       	push	r24
   1b710:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1b714:	11 c0       	rjmp	.+34     	; 0x1b738 <lif_extract_lif_as_lif+0x5a>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b716:	61 2f       	mov	r22, r17
   1b718:	70 2f       	mov	r23, r16
   1b71a:	38 d9       	rcall	.-3472   	; 0x1a98c <lif_find_file>
    if(index == -1)
   1b71c:	01 96       	adiw	r24, 0x01	; 1
   1b71e:	a1 f4       	brne	.+40     	; 0x1b748 <lif_extract_lif_as_lif+0x6a>
    {
        printf("File not found:%s\n", lifname);
   1b720:	0f 93       	push	r16
   1b722:	1f 93       	push	r17
   1b724:	86 e1       	ldi	r24, 0x16	; 22
   1b726:	94 e3       	ldi	r25, 0x34	; 52
   1b728:	1f 92       	push	r1
   1b72a:	9f 93       	push	r25
   1b72c:	8f 93       	push	r24
   1b72e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b732:	c4 01       	movw	r24, r8
   1b734:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b738:	0f 90       	pop	r0
   1b73a:	0f 90       	pop	r0
   1b73c:	0f 90       	pop	r0
   1b73e:	0f 90       	pop	r0
   1b740:	0f 90       	pop	r0
   1b742:	00 e0       	ldi	r16, 0x00	; 0
   1b744:	10 e0       	ldi	r17, 0x00	; 0
   1b746:	0c c1       	rjmp	.+536    	; 0x1b960 <lif_extract_lif_as_lif+0x282>
    }

    sectors = LIF->DIR.FileSectors;
   1b748:	a4 01       	movw	r20, r8
   1b74a:	40 5a       	subi	r20, 0xA0	; 160
   1b74c:	5f 4f       	sbci	r21, 0xFF	; 255
   1b74e:	c4 5f       	subi	r28, 0xF4	; 244
   1b750:	de 4f       	sbci	r29, 0xFE	; 254
   1b752:	59 83       	std	Y+1, r21	; 0x01
   1b754:	48 83       	st	Y, r20
   1b756:	cc 50       	subi	r28, 0x0C	; 12
   1b758:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b75a:	da 01       	movw	r26, r20
   1b75c:	ad 90       	ld	r10, X+
   1b75e:	bc 90       	ld	r11, X
   1b760:	0b 2c       	mov	r0, r11
   1b762:	00 0c       	add	r0, r0
   1b764:	cc 08       	sbc	r12, r12
   1b766:	dd 08       	sbc	r13, r13
   1b768:	e1 2c       	mov	r14, r1
   1b76a:	f1 2c       	mov	r15, r1
   1b76c:	87 01       	movw	r16, r14
   1b76e:	e3 94       	inc	r14
   1b770:	21 e0       	ldi	r18, 0x01	; 1
   1b772:	30 e0       	ldi	r19, 0x00	; 0
   1b774:	40 e0       	ldi	r20, 0x00	; 0
   1b776:	50 e0       	ldi	r21, 0x00	; 0
   1b778:	6f ee       	ldi	r22, 0xEF	; 239
   1b77a:	75 e1       	ldi	r23, 0x15	; 21
   1b77c:	c3 01       	movw	r24, r6
   1b77e:	0e 94 a0 cd 	call	0x19b40	; 0x19b40 <lif_create_volume>
   1b782:	5c 01       	movw	r10, r24
    if(ULIF == NULL)
   1b784:	89 2b       	or	r24, r25
   1b786:	11 f4       	brne	.+4      	; 0x1b78c <lif_extract_lif_as_lif+0xae>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b788:	c4 01       	movw	r24, r8
   1b78a:	cf c0       	rjmp	.+414    	; 0x1b92a <lif_extract_lif_as_lif+0x24c>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1b78c:	81 e2       	ldi	r24, 0x21	; 33
   1b78e:	f4 01       	movw	r30, r8
   1b790:	e1 5b       	subi	r30, 0xB1	; 177
   1b792:	ff 4f       	sbci	r31, 0xFF	; 255
   1b794:	d5 01       	movw	r26, r10
   1b796:	a1 5b       	subi	r26, 0xB1	; 177
   1b798:	bf 4f       	sbci	r27, 0xFF	; 255
   1b79a:	01 90       	ld	r0, Z+
   1b79c:	0d 92       	st	X+, r0
   1b79e:	8a 95       	dec	r24
   1b7a0:	e1 f7       	brne	.-8      	; 0x1b79a <lif_extract_lif_as_lif+0xbc>

    ULIF->DIR.FileStartSector = 2;
   1b7a2:	82 e0       	ldi	r24, 0x02	; 2
   1b7a4:	90 e0       	ldi	r25, 0x00	; 0
   1b7a6:	a0 e0       	ldi	r26, 0x00	; 0
   1b7a8:	b0 e0       	ldi	r27, 0x00	; 0
   1b7aa:	f5 01       	movw	r30, r10
   1b7ac:	e4 5a       	subi	r30, 0xA4	; 164
   1b7ae:	ff 4f       	sbci	r31, 0xFF	; 255
   1b7b0:	80 83       	st	Z, r24
   1b7b2:	91 83       	std	Z+1, r25	; 0x01
   1b7b4:	a2 83       	std	Z+2, r26	; 0x02
   1b7b6:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b7b8:	c4 5f       	subi	r28, 0xF4	; 244
   1b7ba:	de 4f       	sbci	r29, 0xFE	; 254
   1b7bc:	e8 81       	ld	r30, Y
   1b7be:	f9 81       	ldd	r31, Y+1	; 0x01
   1b7c0:	cc 50       	subi	r28, 0x0C	; 12
   1b7c2:	d1 40       	sbci	r29, 0x01	; 1
   1b7c4:	80 81       	ld	r24, Z
   1b7c6:	91 81       	ldd	r25, Z+1	; 0x01
   1b7c8:	a2 81       	ldd	r26, Z+2	; 0x02
   1b7ca:	b3 81       	ldd	r27, Z+3	; 0x03
   1b7cc:	f5 01       	movw	r30, r10
   1b7ce:	80 8b       	std	Z+16, r24	; 0x10
   1b7d0:	91 8b       	std	Z+17, r25	; 0x11
   1b7d2:	a2 8b       	std	Z+18, r26	; 0x12
   1b7d4:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b7d6:	60 e0       	ldi	r22, 0x00	; 0
   1b7d8:	70 e0       	ldi	r23, 0x00	; 0
   1b7da:	c5 01       	movw	r24, r10
   1b7dc:	0e 94 24 cc 	call	0x19848	; 0x19848 <lif_writedirindex>
   1b7e0:	8c 01       	movw	r16, r24
   1b7e2:	89 2b       	or	r24, r25
   1b7e4:	41 f0       	breq	.+16     	; 0x1b7f6 <lif_extract_lif_as_lif+0x118>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b7e6:	61 e0       	ldi	r22, 0x01	; 1
   1b7e8:	70 e0       	ldi	r23, 0x00	; 0
   1b7ea:	c5 01       	movw	r24, r10
   1b7ec:	0e 94 80 cc 	call	0x19900	; 0x19900 <lif_writedirEOF>
   1b7f0:	8c 01       	movw	r16, r24
   1b7f2:	89 2b       	or	r24, r25
   1b7f4:	39 f4       	brne	.+14     	; 0x1b804 <lif_extract_lif_as_lif+0x126>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b7f6:	c4 01       	movw	r24, r8
   1b7f8:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
   1b7fc:	c5 01       	movw	r24, r10
   1b7fe:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b802:	ae c0       	rjmp	.+348    	; 0x1b960 <lif_extract_lif_as_lif+0x282>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b804:	d5 01       	movw	r26, r10
   1b806:	1c 96       	adiw	r26, 0x0c	; 12
   1b808:	cd 90       	ld	r12, X+
   1b80a:	dd 90       	ld	r13, X+
   1b80c:	ed 90       	ld	r14, X+
   1b80e:	fc 90       	ld	r15, X
   1b810:	1f 97       	sbiw	r26, 0x0f	; 15
   1b812:	fe 2c       	mov	r15, r14
   1b814:	ed 2c       	mov	r14, r13
   1b816:	dc 2c       	mov	r13, r12
   1b818:	cc 24       	eor	r12, r12

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b81a:	f4 01       	movw	r30, r8
   1b81c:	e4 5a       	subi	r30, 0xA4	; 164
   1b81e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b820:	80 81       	ld	r24, Z
   1b822:	91 81       	ldd	r25, Z+1	; 0x01
   1b824:	a2 81       	ldd	r26, Z+2	; 0x02
   1b826:	b3 81       	ldd	r27, Z+3	; 0x03
   1b828:	22 27       	eor	r18, r18
   1b82a:	38 2f       	mov	r19, r24
   1b82c:	49 2f       	mov	r20, r25
   1b82e:	5a 2f       	mov	r21, r26
   1b830:	cb 5f       	subi	r28, 0xFB	; 251
   1b832:	de 4f       	sbci	r29, 0xFE	; 254
   1b834:	28 83       	st	Y, r18
   1b836:	39 83       	std	Y+1, r19	; 0x01
   1b838:	4a 83       	std	Y+2, r20	; 0x02
   1b83a:	5b 83       	std	Y+3, r21	; 0x03
   1b83c:	c5 50       	subi	r28, 0x05	; 5
   1b83e:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b840:	21 2c       	mov	r2, r1
   1b842:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b844:	88 e0       	ldi	r24, 0x08	; 8
   1b846:	94 e3       	ldi	r25, 0x34	; 52
   1b848:	9c 01       	movw	r18, r24
   1b84a:	40 e0       	ldi	r20, 0x00	; 0
   1b84c:	c7 5f       	subi	r28, 0xF7	; 247
   1b84e:	de 4f       	sbci	r29, 0xFE	; 254
   1b850:	28 83       	st	Y, r18
   1b852:	39 83       	std	Y+1, r19	; 0x01
   1b854:	4a 83       	std	Y+2, r20	; 0x02
   1b856:	c9 50       	subi	r28, 0x09	; 9
   1b858:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b85a:	41 c0       	rjmp	.+130    	; 0x1b8de <lif_extract_lif_as_lif+0x200>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b85c:	00 e0       	ldi	r16, 0x00	; 0
   1b85e:	11 e0       	ldi	r17, 0x01	; 1
   1b860:	a7 01       	movw	r20, r14
   1b862:	96 01       	movw	r18, r12
   1b864:	be 01       	movw	r22, r28
   1b866:	6f 5f       	subi	r22, 0xFF	; 255
   1b868:	7f 4f       	sbci	r23, 0xFF	; 255
   1b86a:	c5 01       	movw	r24, r10
   1b86c:	0e 94 fb c2 	call	0x185f6	; 0x185f6 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b870:	05 2c       	mov	r0, r5
   1b872:	00 0c       	add	r0, r0
   1b874:	66 08       	sbc	r6, r6
   1b876:	77 08       	sbc	r7, r7
   1b878:	c4 0c       	add	r12, r4
   1b87a:	d5 1c       	adc	r13, r5
   1b87c:	e6 1c       	adc	r14, r6
   1b87e:	f7 1c       	adc	r15, r7
        offset += size;
   1b880:	cb 5f       	subi	r28, 0xFB	; 251
   1b882:	de 4f       	sbci	r29, 0xFE	; 254
   1b884:	88 81       	ld	r24, Y
   1b886:	99 81       	ldd	r25, Y+1	; 0x01
   1b888:	aa 81       	ldd	r26, Y+2	; 0x02
   1b88a:	bb 81       	ldd	r27, Y+3	; 0x03
   1b88c:	c5 50       	subi	r28, 0x05	; 5
   1b88e:	d1 40       	sbci	r29, 0x01	; 1
   1b890:	84 0d       	add	r24, r4
   1b892:	95 1d       	adc	r25, r5
   1b894:	a6 1d       	adc	r26, r6
   1b896:	b7 1d       	adc	r27, r7
   1b898:	cb 5f       	subi	r28, 0xFB	; 251
   1b89a:	de 4f       	sbci	r29, 0xFE	; 254
   1b89c:	88 83       	st	Y, r24
   1b89e:	99 83       	std	Y+1, r25	; 0x01
   1b8a0:	aa 83       	std	Y+2, r26	; 0x02
   1b8a2:	bb 83       	std	Y+3, r27	; 0x03
   1b8a4:	c5 50       	subi	r28, 0x05	; 5
   1b8a6:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b8a8:	ff 92       	push	r15
   1b8aa:	ef 92       	push	r14
   1b8ac:	df 92       	push	r13
   1b8ae:	cf 92       	push	r12
   1b8b0:	1f 92       	push	r1
   1b8b2:	c6 5f       	subi	r28, 0xF6	; 246
   1b8b4:	de 4f       	sbci	r29, 0xFE	; 254
   1b8b6:	98 81       	ld	r25, Y
   1b8b8:	ca 50       	subi	r28, 0x0A	; 10
   1b8ba:	d1 40       	sbci	r29, 0x01	; 1
   1b8bc:	9f 93       	push	r25
   1b8be:	c7 5f       	subi	r28, 0xF7	; 247
   1b8c0:	de 4f       	sbci	r29, 0xFE	; 254
   1b8c2:	a8 81       	ld	r26, Y
   1b8c4:	c9 50       	subi	r28, 0x09	; 9
   1b8c6:	d1 40       	sbci	r29, 0x01	; 1
   1b8c8:	af 93       	push	r26
   1b8ca:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b8ce:	bf ef       	ldi	r27, 0xFF	; 255
   1b8d0:	2b 1a       	sub	r2, r27
   1b8d2:	3b 0a       	sbc	r3, r27
   1b8d4:	0f b6       	in	r0, 0x3f	; 63
   1b8d6:	f8 94       	cli
   1b8d8:	de bf       	out	0x3e, r29	; 62
   1b8da:	0f be       	out	0x3f, r0	; 63
   1b8dc:	cd bf       	out	0x3d, r28	; 61
   1b8de:	c4 5f       	subi	r28, 0xF4	; 244
   1b8e0:	de 4f       	sbci	r29, 0xFE	; 254
   1b8e2:	a8 81       	ld	r26, Y
   1b8e4:	b9 81       	ldd	r27, Y+1	; 0x01
   1b8e6:	cc 50       	subi	r28, 0x0C	; 12
   1b8e8:	d1 40       	sbci	r29, 0x01	; 1
   1b8ea:	8d 91       	ld	r24, X+
   1b8ec:	9c 91       	ld	r25, X
   1b8ee:	28 16       	cp	r2, r24
   1b8f0:	39 06       	cpc	r3, r25
   1b8f2:	f4 f4       	brge	.+60     	; 0x1b930 <lif_extract_lif_as_lif+0x252>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b8f4:	00 e0       	ldi	r16, 0x00	; 0
   1b8f6:	11 e0       	ldi	r17, 0x01	; 1
   1b8f8:	cb 5f       	subi	r28, 0xFB	; 251
   1b8fa:	de 4f       	sbci	r29, 0xFE	; 254
   1b8fc:	28 81       	ld	r18, Y
   1b8fe:	39 81       	ldd	r19, Y+1	; 0x01
   1b900:	4a 81       	ldd	r20, Y+2	; 0x02
   1b902:	5b 81       	ldd	r21, Y+3	; 0x03
   1b904:	c5 50       	subi	r28, 0x05	; 5
   1b906:	d1 40       	sbci	r29, 0x01	; 1
   1b908:	be 01       	movw	r22, r28
   1b90a:	6f 5f       	subi	r22, 0xFF	; 255
   1b90c:	7f 4f       	sbci	r23, 0xFF	; 255
   1b90e:	c4 01       	movw	r24, r8
   1b910:	0e 94 a2 c2 	call	0x18544	; 0x18544 <lif_read>
   1b914:	2b 01       	movw	r4, r22
   1b916:	3c 01       	movw	r6, r24
        if(size < LIF_SECTOR_SIZE)
   1b918:	6f 3f       	cpi	r22, 0xFF	; 255
   1b91a:	71 05       	cpc	r23, r1
   1b91c:	11 f0       	breq	.+4      	; 0x1b922 <lif_extract_lif_as_lif+0x244>
   1b91e:	0c f0       	brlt	.+2      	; 0x1b922 <lif_extract_lif_as_lif+0x244>
   1b920:	9d cf       	rjmp	.-198    	; 0x1b85c <lif_extract_lif_as_lif+0x17e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b922:	c4 01       	movw	r24, r8
   1b924:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
   1b928:	c5 01       	movw	r24, r10
   1b92a:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
   1b92e:	09 cf       	rjmp	.-494    	; 0x1b742 <lif_extract_lif_as_lif+0x64>
   1b930:	c4 01       	movw	r24, r8
   1b932:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
   1b936:	c5 01       	movw	r24, r10
   1b938:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b93c:	ff 92       	push	r15
   1b93e:	ef 92       	push	r14
   1b940:	df 92       	push	r13
   1b942:	cf 92       	push	r12
   1b944:	8a ef       	ldi	r24, 0xFA	; 250
   1b946:	93 e3       	ldi	r25, 0x33	; 51
   1b948:	1f 92       	push	r1
   1b94a:	9f 93       	push	r25
   1b94c:	8f 93       	push	r24
   1b94e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    return(1);
   1b952:	0f b6       	in	r0, 0x3f	; 63
   1b954:	f8 94       	cli
   1b956:	de bf       	out	0x3e, r29	; 62
   1b958:	0f be       	out	0x3f, r0	; 63
   1b95a:	cd bf       	out	0x3d, r28	; 61
   1b95c:	01 e0       	ldi	r16, 0x01	; 1
   1b95e:	10 e0       	ldi	r17, 0x00	; 0
}
   1b960:	c8 01       	movw	r24, r16
   1b962:	c3 5f       	subi	r28, 0xF3	; 243
   1b964:	de 4f       	sbci	r29, 0xFE	; 254
   1b966:	e2 e1       	ldi	r30, 0x12	; 18
   1b968:	0c 94 51 e5 	jmp	0x1caa2	; 0x1caa2 <__epilogue_restores__>

0001b96c <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b96c:	2f 92       	push	r2
   1b96e:	3f 92       	push	r3
   1b970:	4f 92       	push	r4
   1b972:	5f 92       	push	r5
   1b974:	6f 92       	push	r6
   1b976:	8f 92       	push	r8
   1b978:	9f 92       	push	r9
   1b97a:	af 92       	push	r10
   1b97c:	bf 92       	push	r11
   1b97e:	cf 92       	push	r12
   1b980:	df 92       	push	r13
   1b982:	ef 92       	push	r14
   1b984:	ff 92       	push	r15
   1b986:	0f 93       	push	r16
   1b988:	1f 93       	push	r17
   1b98a:	cf 93       	push	r28
   1b98c:	df 93       	push	r29
   1b98e:	cd b7       	in	r28, 0x3d	; 61
   1b990:	de b7       	in	r29, 0x3e	; 62
   1b992:	c4 51       	subi	r28, 0x14	; 20
   1b994:	d1 40       	sbci	r29, 0x01	; 1
   1b996:	0f b6       	in	r0, 0x3f	; 63
   1b998:	f8 94       	cli
   1b99a:	de bf       	out	0x3e, r29	; 62
   1b99c:	0f be       	out	0x3f, r0	; 63
   1b99e:	cd bf       	out	0x3d, r28	; 61
   1b9a0:	7c 01       	movw	r14, r24
   1b9a2:	5b 01       	movw	r10, r22
   1b9a4:	6a 01       	movw	r12, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b9a6:	dc 01       	movw	r26, r24
   1b9a8:	8c 91       	ld	r24, X
   1b9aa:	81 11       	cpse	r24, r1
   1b9ac:	03 c0       	rjmp	.+6      	; 0x1b9b4 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b9ae:	8a ed       	ldi	r24, 0xDA	; 218
   1b9b0:	93 e3       	ldi	r25, 0x33	; 51
   1b9b2:	06 c0       	rjmp	.+12     	; 0x1b9c0 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b9b4:	fb 01       	movw	r30, r22
   1b9b6:	80 81       	ld	r24, Z
   1b9b8:	81 11       	cpse	r24, r1
   1b9ba:	0b c0       	rjmp	.+22     	; 0x1b9d2 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b9bc:	8f eb       	ldi	r24, 0xBF	; 191
   1b9be:	93 e3       	ldi	r25, 0x33	; 51
   1b9c0:	1f 92       	push	r1
   1b9c2:	9f 93       	push	r25
   1b9c4:	8f 93       	push	r24
   1b9c6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(-1);
   1b9ca:	0f 90       	pop	r0
   1b9cc:	0f 90       	pop	r0
   1b9ce:	0f 90       	pop	r0
   1b9d0:	32 c1       	rjmp	.+612    	; 0x1bc36 <lif_add_lif_file+0x2ca>
    }
    if(!*userfile)
   1b9d2:	da 01       	movw	r26, r20
   1b9d4:	8c 91       	ld	r24, X
   1b9d6:	81 11       	cpse	r24, r1
   1b9d8:	03 c0       	rjmp	.+6      	; 0x1b9e0 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b9da:	83 ea       	ldi	r24, 0xA3	; 163
   1b9dc:	93 e3       	ldi	r25, 0x33	; 51
   1b9de:	f0 cf       	rjmp	.-32     	; 0x1b9c0 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & 0x400)
   1b9e0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b9e4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b9e8:	92 ff       	sbrs	r25, 2
   1b9ea:	12 c0       	rjmp	.+36     	; 0x1ba10 <lif_add_lif_file+0xa4>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1b9ec:	df 92       	push	r13
   1b9ee:	4f 93       	push	r20
   1b9f0:	bf 92       	push	r11
   1b9f2:	6f 93       	push	r22
   1b9f4:	ff 92       	push	r15
   1b9f6:	ef 92       	push	r14
   1b9f8:	84 e7       	ldi	r24, 0x74	; 116
   1b9fa:	93 e3       	ldi	r25, 0x33	; 51
   1b9fc:	1f 92       	push	r1
   1b9fe:	9f 93       	push	r25
   1ba00:	8f 93       	push	r24
   1ba02:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1ba06:	0f b6       	in	r0, 0x3f	; 63
   1ba08:	f8 94       	cli
   1ba0a:	de bf       	out	0x3e, r29	; 62
   1ba0c:	0f be       	out	0x3f, r0	; 63
   1ba0e:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1ba10:	60 e9       	ldi	r22, 0x90	; 144
   1ba12:	78 e0       	ldi	r23, 0x08	; 8
   1ba14:	c6 01       	movw	r24, r12
   1ba16:	0e 94 32 d2 	call	0x1a464	; 0x1a464 <lif_open_volume>
   1ba1a:	4c 01       	movw	r8, r24
    if(ULIF == NULL)
   1ba1c:	00 97       	sbiw	r24, 0x00	; 0
   1ba1e:	09 f4       	brne	.+2      	; 0x1ba22 <lif_add_lif_file+0xb6>
   1ba20:	0a c1       	rjmp	.+532    	; 0x1bc36 <lif_add_lif_file+0x2ca>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1ba22:	b5 01       	movw	r22, r10
   1ba24:	0e 94 c6 d4 	call	0x1a98c	; 0x1a98c <lif_find_file>
    if(index == -1)
   1ba28:	01 96       	adiw	r24, 0x01	; 1
   1ba2a:	b1 f4       	brne	.+44     	; 0x1ba58 <lif_add_lif_file+0xec>
    {
        printf("File not found:%s\n", lifname);
   1ba2c:	bf 92       	push	r11
   1ba2e:	af 92       	push	r10
   1ba30:	81 e6       	ldi	r24, 0x61	; 97
   1ba32:	93 e3       	ldi	r25, 0x33	; 51
   1ba34:	1f 92       	push	r1
   1ba36:	9f 93       	push	r25
   1ba38:	8f 93       	push	r24
   1ba3a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba3e:	c4 01       	movw	r24, r8
   1ba40:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1ba44:	0f 90       	pop	r0
   1ba46:	0f 90       	pop	r0
   1ba48:	0f 90       	pop	r0
   1ba4a:	0f 90       	pop	r0
   1ba4c:	0f 90       	pop	r0
   1ba4e:	60 e0       	ldi	r22, 0x00	; 0
   1ba50:	70 e0       	ldi	r23, 0x00	; 0
   1ba52:	80 e0       	ldi	r24, 0x00	; 0
   1ba54:	90 e0       	ldi	r25, 0x00	; 0
   1ba56:	09 c1       	rjmp	.+530    	; 0x1bc6a <lif_add_lif_file+0x2fe>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1ba58:	60 e9       	ldi	r22, 0x90	; 144
   1ba5a:	78 e0       	ldi	r23, 0x08	; 8
   1ba5c:	c7 01       	movw	r24, r14
   1ba5e:	0e 94 32 d2 	call	0x1a464	; 0x1a464 <lif_open_volume>
   1ba62:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   1ba64:	00 97       	sbiw	r24, 0x00	; 0
   1ba66:	09 f4       	brne	.+2      	; 0x1ba6a <lif_add_lif_file+0xfe>
   1ba68:	e6 c0       	rjmp	.+460    	; 0x1bc36 <lif_add_lif_file+0x2ca>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1ba6a:	f4 01       	movw	r30, r8
   1ba6c:	e0 5a       	subi	r30, 0xA0	; 160
   1ba6e:	ff 4f       	sbci	r31, 0xFF	; 255
   1ba70:	40 81       	ld	r20, Z
   1ba72:	51 81       	ldd	r21, Z+1	; 0x01
   1ba74:	62 81       	ldd	r22, Z+2	; 0x02
   1ba76:	73 81       	ldd	r23, Z+3	; 0x03
   1ba78:	0e 94 cd d0 	call	0x1a19a	; 0x1a19a <lif_newdir>
   1ba7c:	c3 5f       	subi	r28, 0xF3	; 243
   1ba7e:	de 4f       	sbci	r29, 0xFE	; 254
   1ba80:	99 83       	std	Y+1, r25	; 0x01
   1ba82:	88 83       	st	Y, r24
   1ba84:	cd 50       	subi	r28, 0x0D	; 13
   1ba86:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1ba88:	01 96       	adiw	r24, 0x01	; 1
   1ba8a:	b9 f4       	brne	.+46     	; 0x1baba <lif_add_lif_file+0x14e>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1ba8c:	df 92       	push	r13
   1ba8e:	cf 92       	push	r12
   1ba90:	ff 92       	push	r15
   1ba92:	ef 92       	push	r14
   1ba94:	81 e3       	ldi	r24, 0x31	; 49
   1ba96:	93 e3       	ldi	r25, 0x33	; 51
   1ba98:	1f 92       	push	r1
   1ba9a:	9f 93       	push	r25
   1ba9c:	8f 93       	push	r24
   1ba9e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1baa2:	c5 01       	movw	r24, r10
   1baa4:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
   1baa8:	c4 01       	movw	r24, r8
   1baaa:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            lif_closedir(ULIF);
        return(-1);
   1baae:	0f b6       	in	r0, 0x3f	; 63
   1bab0:	f8 94       	cli
   1bab2:	de bf       	out	0x3e, r29	; 62
   1bab4:	0f be       	out	0x3f, r0	; 63
   1bab6:	cd bf       	out	0x3d, r28	; 61
   1bab8:	be c0       	rjmp	.+380    	; 0x1bc36 <lif_add_lif_file+0x2ca>
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1baba:	c5 01       	movw	r24, r10
   1babc:	84 5a       	subi	r24, 0xA4	; 164
   1babe:	9f 4f       	sbci	r25, 0xFF	; 255
   1bac0:	dc 01       	movw	r26, r24
   1bac2:	4d 91       	ld	r20, X+
   1bac4:	5d 91       	ld	r21, X+
   1bac6:	6d 91       	ld	r22, X+
   1bac8:	7c 91       	ld	r23, X
   1baca:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1bacc:	21 e2       	ldi	r18, 0x21	; 33
   1bace:	f4 01       	movw	r30, r8
   1bad0:	e1 5b       	subi	r30, 0xB1	; 177
   1bad2:	ff 4f       	sbci	r31, 0xFF	; 255
   1bad4:	1d 97       	sbiw	r26, 0x0d	; 13
   1bad6:	01 90       	ld	r0, Z+
   1bad8:	0d 92       	st	X+, r0
   1bada:	2a 95       	dec	r18
   1badc:	e1 f7       	brne	.-8      	; 0x1bad6 <lif_add_lif_file+0x16a>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1bade:	fc 01       	movw	r30, r24
   1bae0:	40 83       	st	Z, r20
   1bae2:	51 83       	std	Z+1, r21	; 0x01
   1bae4:	62 83       	std	Z+2, r22	; 0x02
   1bae6:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1bae8:	b6 2f       	mov	r27, r22
   1baea:	a5 2f       	mov	r26, r21
   1baec:	94 2f       	mov	r25, r20
   1baee:	88 27       	eor	r24, r24
   1baf0:	cb 5f       	subi	r28, 0xFB	; 251
   1baf2:	de 4f       	sbci	r29, 0xFE	; 254
   1baf4:	88 83       	st	Y, r24
   1baf6:	99 83       	std	Y+1, r25	; 0x01
   1baf8:	aa 83       	std	Y+2, r26	; 0x02
   1bafa:	bb 83       	std	Y+3, r27	; 0x03
   1bafc:	c5 50       	subi	r28, 0x05	; 5
   1bafe:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1bb00:	f4 01       	movw	r30, r8
   1bb02:	e4 5a       	subi	r30, 0xA4	; 164
   1bb04:	ff 4f       	sbci	r31, 0xFF	; 255
   1bb06:	80 81       	ld	r24, Z
   1bb08:	91 81       	ldd	r25, Z+1	; 0x01
   1bb0a:	a2 81       	ldd	r26, Z+2	; 0x02
   1bb0c:	b3 81       	ldd	r27, Z+3	; 0x03
   1bb0e:	22 27       	eor	r18, r18
   1bb10:	38 2f       	mov	r19, r24
   1bb12:	49 2f       	mov	r20, r25
   1bb14:	5a 2f       	mov	r21, r26
   1bb16:	c7 5f       	subi	r28, 0xF7	; 247
   1bb18:	de 4f       	sbci	r29, 0xFE	; 254
   1bb1a:	28 83       	st	Y, r18
   1bb1c:	39 83       	std	Y+1, r19	; 0x01
   1bb1e:	4a 83       	std	Y+2, r20	; 0x02
   1bb20:	5b 83       	std	Y+3, r21	; 0x03
   1bb22:	c9 50       	subi	r28, 0x09	; 9
   1bb24:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bb26:	21 2c       	mov	r2, r1
   1bb28:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1bb2a:	c1 2c       	mov	r12, r1
   1bb2c:	d1 2c       	mov	r13, r1
   1bb2e:	76 01       	movw	r14, r12
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bb30:	a5 01       	movw	r20, r10
   1bb32:	40 5a       	subi	r20, 0xA0	; 160
   1bb34:	5f 4f       	sbci	r21, 0xFF	; 255
   1bb36:	cd 5e       	subi	r28, 0xED	; 237
   1bb38:	de 4f       	sbci	r29, 0xFE	; 254
   1bb3a:	59 83       	std	Y+1, r21	; 0x01
   1bb3c:	48 83       	st	Y, r20
   1bb3e:	c3 51       	subi	r28, 0x13	; 19
   1bb40:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1bb42:	83 e2       	ldi	r24, 0x23	; 35
   1bb44:	93 e3       	ldi	r25, 0x33	; 51
   1bb46:	2c 01       	movw	r4, r24
   1bb48:	c7 5f       	subi	r28, 0xF7	; 247
   1bb4a:	de 4f       	sbci	r29, 0xFE	; 254
   1bb4c:	28 81       	ld	r18, Y
   1bb4e:	39 81       	ldd	r19, Y+1	; 0x01
   1bb50:	4a 81       	ldd	r20, Y+2	; 0x02
   1bb52:	5b 81       	ldd	r21, Y+3	; 0x03
   1bb54:	c9 50       	subi	r28, 0x09	; 9
   1bb56:	d1 40       	sbci	r29, 0x01	; 1
   1bb58:	2c 0d       	add	r18, r12
   1bb5a:	3d 1d       	adc	r19, r13
   1bb5c:	4e 1d       	adc	r20, r14
   1bb5e:	5f 1d       	adc	r21, r15
   1bb60:	cb 5f       	subi	r28, 0xFB	; 251
   1bb62:	de 4f       	sbci	r29, 0xFE	; 254
   1bb64:	88 81       	ld	r24, Y
   1bb66:	99 81       	ldd	r25, Y+1	; 0x01
   1bb68:	aa 81       	ldd	r26, Y+2	; 0x02
   1bb6a:	bb 81       	ldd	r27, Y+3	; 0x03
   1bb6c:	c5 50       	subi	r28, 0x05	; 5
   1bb6e:	d1 40       	sbci	r29, 0x01	; 1
   1bb70:	8c 0d       	add	r24, r12
   1bb72:	9d 1d       	adc	r25, r13
   1bb74:	ae 1d       	adc	r26, r14
   1bb76:	bf 1d       	adc	r27, r15
   1bb78:	c1 5f       	subi	r28, 0xF1	; 241
   1bb7a:	de 4f       	sbci	r29, 0xFE	; 254
   1bb7c:	88 83       	st	Y, r24
   1bb7e:	99 83       	std	Y+1, r25	; 0x01
   1bb80:	aa 83       	std	Y+2, r26	; 0x02
   1bb82:	bb 83       	std	Y+3, r27	; 0x03
   1bb84:	cf 50       	subi	r28, 0x0F	; 15
   1bb86:	d1 40       	sbci	r29, 0x01	; 1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bb88:	cd 5e       	subi	r28, 0xED	; 237
   1bb8a:	de 4f       	sbci	r29, 0xFE	; 254
   1bb8c:	a8 81       	ld	r26, Y
   1bb8e:	b9 81       	ldd	r27, Y+1	; 0x01
   1bb90:	c3 51       	subi	r28, 0x13	; 19
   1bb92:	d1 40       	sbci	r29, 0x01	; 1
   1bb94:	8d 91       	ld	r24, X+
   1bb96:	9c 91       	ld	r25, X
   1bb98:	28 16       	cp	r2, r24
   1bb9a:	39 06       	cpc	r3, r25
   1bb9c:	dc f5       	brge	.+118    	; 0x1bc14 <lif_add_lif_file+0x2a8>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1bb9e:	00 e0       	ldi	r16, 0x00	; 0
   1bba0:	11 e0       	ldi	r17, 0x01	; 1
   1bba2:	be 01       	movw	r22, r28
   1bba4:	6f 5f       	subi	r22, 0xFF	; 255
   1bba6:	7f 4f       	sbci	r23, 0xFF	; 255
   1bba8:	c4 01       	movw	r24, r8
   1bbaa:	0e 94 a2 c2 	call	0x18544	; 0x18544 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1bbae:	6f 3f       	cpi	r22, 0xFF	; 255
   1bbb0:	71 05       	cpc	r23, r1
   1bbb2:	a9 f0       	breq	.+42     	; 0x1bbde <lif_add_lif_file+0x272>
   1bbb4:	a4 f0       	brlt	.+40     	; 0x1bbde <lif_add_lif_file+0x272>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1bbb6:	00 e0       	ldi	r16, 0x00	; 0
   1bbb8:	11 e0       	ldi	r17, 0x01	; 1
   1bbba:	c1 5f       	subi	r28, 0xF1	; 241
   1bbbc:	de 4f       	sbci	r29, 0xFE	; 254
   1bbbe:	28 81       	ld	r18, Y
   1bbc0:	39 81       	ldd	r19, Y+1	; 0x01
   1bbc2:	4a 81       	ldd	r20, Y+2	; 0x02
   1bbc4:	5b 81       	ldd	r21, Y+3	; 0x03
   1bbc6:	cf 50       	subi	r28, 0x0F	; 15
   1bbc8:	d1 40       	sbci	r29, 0x01	; 1
   1bbca:	be 01       	movw	r22, r28
   1bbcc:	6f 5f       	subi	r22, 0xFF	; 255
   1bbce:	7f 4f       	sbci	r23, 0xFF	; 255
   1bbd0:	c5 01       	movw	r24, r10
   1bbd2:	0e 94 fb c2 	call	0x185f6	; 0x185f6 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1bbd6:	8f 3f       	cpi	r24, 0xFF	; 255
   1bbd8:	91 05       	cpc	r25, r1
   1bbda:	09 f0       	breq	.+2      	; 0x1bbde <lif_add_lif_file+0x272>
   1bbdc:	2c f4       	brge	.+10     	; 0x1bbe8 <lif_add_lif_file+0x27c>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbde:	c5 01       	movw	r24, r10
   1bbe0:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
   1bbe4:	c4 01       	movw	r24, r8
   1bbe6:	25 c0       	rjmp	.+74     	; 0x1bc32 <lif_add_lif_file+0x2c6>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1bbe8:	5f ef       	ldi	r21, 0xFF	; 255
   1bbea:	d5 1a       	sub	r13, r21
   1bbec:	e5 0a       	sbc	r14, r21
   1bbee:	f5 0a       	sbc	r15, r21
        printf("\tWrote: %8ld\r", bytes);
   1bbf0:	ff 92       	push	r15
   1bbf2:	ef 92       	push	r14
   1bbf4:	df 92       	push	r13
   1bbf6:	cf 92       	push	r12
   1bbf8:	1f 92       	push	r1
   1bbfa:	5f 92       	push	r5
   1bbfc:	4f 92       	push	r4
   1bbfe:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bc02:	8f ef       	ldi	r24, 0xFF	; 255
   1bc04:	28 1a       	sub	r2, r24
   1bc06:	38 0a       	sbc	r3, r24
   1bc08:	0f b6       	in	r0, 0x3f	; 63
   1bc0a:	f8 94       	cli
   1bc0c:	de bf       	out	0x3e, r29	; 62
   1bc0e:	0f be       	out	0x3f, r0	; 63
   1bc10:	cd bf       	out	0x3d, r28	; 61
   1bc12:	9a cf       	rjmp	.-204    	; 0x1bb48 <lif_add_lif_file+0x1dc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc14:	c4 01       	movw	r24, r8
   1bc16:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1bc1a:	c3 5f       	subi	r28, 0xF3	; 243
   1bc1c:	de 4f       	sbci	r29, 0xFE	; 254
   1bc1e:	68 81       	ld	r22, Y
   1bc20:	79 81       	ldd	r23, Y+1	; 0x01
   1bc22:	cd 50       	subi	r28, 0x0D	; 13
   1bc24:	d1 40       	sbci	r29, 0x01	; 1
   1bc26:	c5 01       	movw	r24, r10
   1bc28:	0e 94 24 cc 	call	0x19848	; 0x19848 <lif_writedirindex>
   1bc2c:	89 2b       	or	r24, r25
   1bc2e:	41 f4       	brne	.+16     	; 0x1bc40 <lif_add_lif_file+0x2d4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc30:	c5 01       	movw	r24, r10
   1bc32:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1bc36:	6f ef       	ldi	r22, 0xFF	; 255
   1bc38:	7f ef       	ldi	r23, 0xFF	; 255
   1bc3a:	8f ef       	ldi	r24, 0xFF	; 255
   1bc3c:	9f ef       	ldi	r25, 0xFF	; 255
   1bc3e:	15 c0       	rjmp	.+42     	; 0x1bc6a <lif_add_lif_file+0x2fe>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc40:	c5 01       	movw	r24, r10
   1bc42:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1bc46:	ff 92       	push	r15
   1bc48:	ef 92       	push	r14
   1bc4a:	df 92       	push	r13
   1bc4c:	cf 92       	push	r12
   1bc4e:	85 e1       	ldi	r24, 0x15	; 21
   1bc50:	93 e3       	ldi	r25, 0x33	; 51
   1bc52:	1f 92       	push	r1
   1bc54:	9f 93       	push	r25
   1bc56:	8f 93       	push	r24
   1bc58:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    return(bytes);
   1bc5c:	0f b6       	in	r0, 0x3f	; 63
   1bc5e:	f8 94       	cli
   1bc60:	de bf       	out	0x3e, r29	; 62
   1bc62:	0f be       	out	0x3f, r0	; 63
   1bc64:	cd bf       	out	0x3d, r28	; 61
   1bc66:	b6 01       	movw	r22, r12
   1bc68:	c7 01       	movw	r24, r14
}
   1bc6a:	cc 5e       	subi	r28, 0xEC	; 236
   1bc6c:	de 4f       	sbci	r29, 0xFE	; 254
   1bc6e:	0f b6       	in	r0, 0x3f	; 63
   1bc70:	f8 94       	cli
   1bc72:	de bf       	out	0x3e, r29	; 62
   1bc74:	0f be       	out	0x3f, r0	; 63
   1bc76:	cd bf       	out	0x3d, r28	; 61
   1bc78:	df 91       	pop	r29
   1bc7a:	cf 91       	pop	r28
   1bc7c:	1f 91       	pop	r17
   1bc7e:	0f 91       	pop	r16
   1bc80:	ff 90       	pop	r15
   1bc82:	ef 90       	pop	r14
   1bc84:	df 90       	pop	r13
   1bc86:	cf 90       	pop	r12
   1bc88:	bf 90       	pop	r11
   1bc8a:	af 90       	pop	r10
   1bc8c:	9f 90       	pop	r9
   1bc8e:	8f 90       	pop	r8
   1bc90:	6f 90       	pop	r6
   1bc92:	5f 90       	pop	r5
   1bc94:	4f 90       	pop	r4
   1bc96:	3f 90       	pop	r3
   1bc98:	2f 90       	pop	r2
   1bc9a:	08 95       	ret

0001bc9c <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1bc9c:	ef 92       	push	r14
   1bc9e:	ff 92       	push	r15
   1bca0:	0f 93       	push	r16
   1bca2:	1f 93       	push	r17
   1bca4:	cf 93       	push	r28
   1bca6:	df 93       	push	r29
   1bca8:	7c 01       	movw	r14, r24
   1bcaa:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1bcac:	fc 01       	movw	r30, r24
   1bcae:	80 81       	ld	r24, Z
   1bcb0:	81 11       	cpse	r24, r1
   1bcb2:	03 c0       	rjmp	.+6      	; 0x1bcba <lif_del_file+0x1e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1bcb4:	80 ef       	ldi	r24, 0xF0	; 240
   1bcb6:	92 e3       	ldi	r25, 0x32	; 50
   1bcb8:	06 c0       	rjmp	.+12     	; 0x1bcc6 <lif_del_file+0x2a>
        return(-1);
    }
    if(!*lifname)
   1bcba:	fb 01       	movw	r30, r22
   1bcbc:	80 81       	ld	r24, Z
   1bcbe:	81 11       	cpse	r24, r1
   1bcc0:	0b c0       	rjmp	.+22     	; 0x1bcd8 <lif_del_file+0x3c>
    {
        printf("lif_del_file: lifname is empty\n");
   1bcc2:	80 ed       	ldi	r24, 0xD0	; 208
   1bcc4:	92 e3       	ldi	r25, 0x32	; 50
   1bcc6:	1f 92       	push	r1
   1bcc8:	9f 93       	push	r25
   1bcca:	8f 93       	push	r24
   1bccc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(-1);
   1bcd0:	0f 90       	pop	r0
   1bcd2:	0f 90       	pop	r0
   1bcd4:	0f 90       	pop	r0
   1bcd6:	74 c0       	rjmp	.+232    	; 0x1bdc0 <lif_del_file+0x124>
    }
    if(debuglevel & 0x400)
   1bcd8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1bcdc:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1bce0:	92 ff       	sbrs	r25, 2
   1bce2:	13 c0       	rjmp	.+38     	; 0x1bd0a <lif_del_file+0x6e>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1bce4:	1f 93       	push	r17
   1bce6:	6f 93       	push	r22
   1bce8:	ff 92       	push	r15
   1bcea:	ef 92       	push	r14
   1bcec:	81 eb       	ldi	r24, 0xB1	; 177
   1bcee:	92 e3       	ldi	r25, 0x32	; 50
   1bcf0:	1f 92       	push	r1
   1bcf2:	9f 93       	push	r25
   1bcf4:	8f 93       	push	r24
   1bcf6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1bcfa:	8d b7       	in	r24, 0x3d	; 61
   1bcfc:	9e b7       	in	r25, 0x3e	; 62
   1bcfe:	07 96       	adiw	r24, 0x07	; 7
   1bd00:	0f b6       	in	r0, 0x3f	; 63
   1bd02:	f8 94       	cli
   1bd04:	9e bf       	out	0x3e, r25	; 62
   1bd06:	0f be       	out	0x3f, r0	; 63
   1bd08:	8d bf       	out	0x3d, r24	; 61
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1bd0a:	60 e9       	ldi	r22, 0x90	; 144
   1bd0c:	78 e0       	ldi	r23, 0x08	; 8
   1bd0e:	c7 01       	movw	r24, r14
   1bd10:	0e 94 32 d2 	call	0x1a464	; 0x1a464 <lif_open_volume>
   1bd14:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bd16:	00 97       	sbiw	r24, 0x00	; 0
   1bd18:	09 f4       	brne	.+2      	; 0x1bd1c <lif_del_file+0x80>
   1bd1a:	52 c0       	rjmp	.+164    	; 0x1bdc0 <lif_del_file+0x124>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1bd1c:	b8 01       	movw	r22, r16
   1bd1e:	0e 94 c6 d4 	call	0x1a98c	; 0x1a98c <lif_find_file>
    if(index == -1)
   1bd22:	8f 3f       	cpi	r24, 0xFF	; 255
   1bd24:	ef ef       	ldi	r30, 0xFF	; 255
   1bd26:	9e 07       	cpc	r25, r30
   1bd28:	c9 f4       	brne	.+50     	; 0x1bd5c <lif_del_file+0xc0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd2a:	ce 01       	movw	r24, r28
   1bd2c:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1bd30:	1f 93       	push	r17
   1bd32:	0f 93       	push	r16
   1bd34:	ff 92       	push	r15
   1bd36:	ef 92       	push	r14
   1bd38:	89 e8       	ldi	r24, 0x89	; 137
   1bd3a:	92 e3       	ldi	r25, 0x32	; 50
   1bd3c:	1f 92       	push	r1
   1bd3e:	9f 93       	push	r25
   1bd40:	8f 93       	push	r24
   1bd42:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(0);
   1bd46:	8d b7       	in	r24, 0x3d	; 61
   1bd48:	9e b7       	in	r25, 0x3e	; 62
   1bd4a:	07 96       	adiw	r24, 0x07	; 7
   1bd4c:	0f b6       	in	r0, 0x3f	; 63
   1bd4e:	f8 94       	cli
   1bd50:	9e bf       	out	0x3e, r25	; 62
   1bd52:	0f be       	out	0x3f, r0	; 63
   1bd54:	8d bf       	out	0x3d, r24	; 61
   1bd56:	80 e0       	ldi	r24, 0x00	; 0
   1bd58:	90 e0       	ldi	r25, 0x00	; 0
   1bd5a:	34 c0       	rjmp	.+104    	; 0x1bdc4 <lif_del_file+0x128>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1bd5c:	2a a1       	ldd	r18, Y+34	; 0x22
   1bd5e:	3b a1       	ldd	r19, Y+35	; 0x23
   1bd60:	21 50       	subi	r18, 0x01	; 1
   1bd62:	31 09       	sbc	r19, r1
   1bd64:	fe 01       	movw	r30, r28
   1bd66:	e6 5a       	subi	r30, 0xA6	; 166
   1bd68:	ff 4f       	sbci	r31, 0xFF	; 255
   1bd6a:	82 17       	cp	r24, r18
   1bd6c:	93 07       	cpc	r25, r19
   1bd6e:	2c f0       	brlt	.+10     	; 0x1bd7a <lif_del_file+0xde>
        LIF->DIR.FileType = 0xffff;
   1bd70:	2f ef       	ldi	r18, 0xFF	; 255
   1bd72:	3f ef       	ldi	r19, 0xFF	; 255
   1bd74:	31 83       	std	Z+1, r19	; 0x01
   1bd76:	20 83       	st	Z, r18
   1bd78:	02 c0       	rjmp	.+4      	; 0x1bd7e <lif_del_file+0xe2>
    else
        LIF->DIR.FileType = 0;
   1bd7a:	11 82       	std	Z+1, r1	; 0x01
   1bd7c:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1bd7e:	bc 01       	movw	r22, r24
   1bd80:	ce 01       	movw	r24, r28
   1bd82:	0e 94 24 cc 	call	0x19848	; 0x19848 <lif_writedirindex>
   1bd86:	89 2b       	or	r24, r25
   1bd88:	21 f4       	brne	.+8      	; 0x1bd92 <lif_del_file+0xf6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd8a:	ce 01       	movw	r24, r28
   1bd8c:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
   1bd90:	17 c0       	rjmp	.+46     	; 0x1bdc0 <lif_del_file+0x124>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1bd92:	ce 01       	movw	r24, r28
   1bd94:	0e 94 98 cc 	call	0x19930	; 0x19930 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd98:	ce 01       	movw	r24, r28
   1bd9a:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1bd9e:	1f 93       	push	r17
   1bda0:	0f 93       	push	r16
   1bda2:	8a e7       	ldi	r24, 0x7A	; 122
   1bda4:	92 e3       	ldi	r25, 0x32	; 50
   1bda6:	1f 92       	push	r1
   1bda8:	9f 93       	push	r25
   1bdaa:	8f 93       	push	r24
   1bdac:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>

    return(1);
   1bdb0:	0f 90       	pop	r0
   1bdb2:	0f 90       	pop	r0
   1bdb4:	0f 90       	pop	r0
   1bdb6:	0f 90       	pop	r0
   1bdb8:	0f 90       	pop	r0
   1bdba:	81 e0       	ldi	r24, 0x01	; 1
   1bdbc:	90 e0       	ldi	r25, 0x00	; 0
   1bdbe:	02 c0       	rjmp	.+4      	; 0x1bdc4 <lif_del_file+0x128>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1bdc0:	8f ef       	ldi	r24, 0xFF	; 255
   1bdc2:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1bdc4:	cd b7       	in	r28, 0x3d	; 61
   1bdc6:	de b7       	in	r29, 0x3e	; 62
   1bdc8:	e6 e0       	ldi	r30, 0x06	; 6
   1bdca:	77 c6       	rjmp	.+3310   	; 0x1caba <__epilogue_restores__+0x18>

0001bdcc <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1bdcc:	a0 e0       	ldi	r26, 0x00	; 0
   1bdce:	b0 e0       	ldi	r27, 0x00	; 0
   1bdd0:	eb ee       	ldi	r30, 0xEB	; 235
   1bdd2:	fe ed       	ldi	r31, 0xDE	; 222
   1bdd4:	52 c6       	rjmp	.+3236   	; 0x1ca7a <__prologue_saves__+0x10>
   1bdd6:	6c 01       	movw	r12, r24
   1bdd8:	8b 01       	movw	r16, r22
   1bdda:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bddc:	fc 01       	movw	r30, r24
   1bdde:	80 81       	ld	r24, Z
   1bde0:	81 11       	cpse	r24, r1
   1bde2:	03 c0       	rjmp	.+6      	; 0x1bdea <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bde4:	82 e5       	ldi	r24, 0x52	; 82
   1bde6:	92 e3       	ldi	r25, 0x32	; 50
   1bde8:	06 c0       	rjmp	.+12     	; 0x1bdf6 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1bdea:	fb 01       	movw	r30, r22
   1bdec:	80 81       	ld	r24, Z
   1bdee:	81 11       	cpse	r24, r1
   1bdf0:	0b c0       	rjmp	.+22     	; 0x1be08 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bdf2:	8b e2       	ldi	r24, 0x2B	; 43
   1bdf4:	92 e3       	ldi	r25, 0x32	; 50
   1bdf6:	1f 92       	push	r1
   1bdf8:	9f 93       	push	r25
   1bdfa:	8f 93       	push	r24
   1bdfc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(-1);
   1be00:	0f 90       	pop	r0
   1be02:	0f 90       	pop	r0
   1be04:	0f 90       	pop	r0
   1be06:	62 c0       	rjmp	.+196    	; 0x1becc <lif_rename_file+0x100>
    }
    if(!*newlifname)
   1be08:	fa 01       	movw	r30, r20
   1be0a:	80 81       	ld	r24, Z
   1be0c:	81 11       	cpse	r24, r1
   1be0e:	03 c0       	rjmp	.+6      	; 0x1be16 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1be10:	84 e0       	ldi	r24, 0x04	; 4
   1be12:	92 e3       	ldi	r25, 0x32	; 50
   1be14:	f0 cf       	rjmp	.-32     	; 0x1bdf6 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1be16:	ca 01       	movw	r24, r20
   1be18:	0e 94 ae c3 	call	0x1875c	; 0x1875c <lif_checkname>
   1be1c:	89 2b       	or	r24, r25
   1be1e:	19 f4       	brne	.+6      	; 0x1be26 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1be20:	8e ec       	ldi	r24, 0xCE	; 206
   1be22:	91 e3       	ldi	r25, 0x31	; 49
   1be24:	e8 cf       	rjmp	.-48     	; 0x1bdf6 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1be26:	60 e9       	ldi	r22, 0x90	; 144
   1be28:	78 e0       	ldi	r23, 0x08	; 8
   1be2a:	c6 01       	movw	r24, r12
   1be2c:	0e 94 32 d2 	call	0x1a464	; 0x1a464 <lif_open_volume>
   1be30:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1be32:	00 97       	sbiw	r24, 0x00	; 0
   1be34:	09 f4       	brne	.+2      	; 0x1be38 <lif_rename_file+0x6c>
   1be36:	4a c0       	rjmp	.+148    	; 0x1becc <lif_rename_file+0x100>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1be38:	b8 01       	movw	r22, r16
   1be3a:	0e 94 c6 d4 	call	0x1a98c	; 0x1a98c <lif_find_file>
   1be3e:	5c 01       	movw	r10, r24
    if(index == -1)
   1be40:	01 96       	adiw	r24, 0x01	; 1
   1be42:	c9 f4       	brne	.+50     	; 0x1be76 <lif_rename_file+0xaa>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1be44:	1f 93       	push	r17
   1be46:	0f 93       	push	r16
   1be48:	df 92       	push	r13
   1be4a:	cf 92       	push	r12
   1be4c:	85 ea       	ldi	r24, 0xA5	; 165
   1be4e:	91 e3       	ldi	r25, 0x31	; 49
   1be50:	1f 92       	push	r1
   1be52:	9f 93       	push	r25
   1be54:	8f 93       	push	r24
   1be56:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1be5a:	ce 01       	movw	r24, r28
   1be5c:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1be60:	8d b7       	in	r24, 0x3d	; 61
   1be62:	9e b7       	in	r25, 0x3e	; 62
   1be64:	07 96       	adiw	r24, 0x07	; 7
   1be66:	0f b6       	in	r0, 0x3f	; 63
   1be68:	f8 94       	cli
   1be6a:	9e bf       	out	0x3e, r25	; 62
   1be6c:	0f be       	out	0x3f, r0	; 63
   1be6e:	8d bf       	out	0x3d, r24	; 61
   1be70:	80 e0       	ldi	r24, 0x00	; 0
   1be72:	90 e0       	ldi	r25, 0x00	; 0
   1be74:	2d c0       	rjmp	.+90     	; 0x1bed0 <lif_rename_file+0x104>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1be76:	4a e0       	ldi	r20, 0x0A	; 10
   1be78:	50 e0       	ldi	r21, 0x00	; 0
   1be7a:	b7 01       	movw	r22, r14
   1be7c:	ce 01       	movw	r24, r28
   1be7e:	81 5b       	subi	r24, 0xB1	; 177
   1be80:	9f 4f       	sbci	r25, 0xFF	; 255
   1be82:	0e 94 e8 c3 	call	0x187d0	; 0x187d0 <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1be86:	b5 01       	movw	r22, r10
   1be88:	ce 01       	movw	r24, r28
   1be8a:	0e 94 24 cc 	call	0x19848	; 0x19848 <lif_writedirindex>
   1be8e:	89 2b       	or	r24, r25
   1be90:	21 f4       	brne	.+8      	; 0x1be9a <lif_rename_file+0xce>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1be92:	ce 01       	movw	r24, r28
   1be94:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
   1be98:	19 c0       	rjmp	.+50     	; 0x1becc <lif_rename_file+0x100>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1be9a:	ff 92       	push	r15
   1be9c:	ef 92       	push	r14
   1be9e:	1f 93       	push	r17
   1bea0:	0f 93       	push	r16
   1bea2:	8e e8       	ldi	r24, 0x8E	; 142
   1bea4:	91 e3       	ldi	r25, 0x31	; 49
   1bea6:	1f 92       	push	r1
   1bea8:	9f 93       	push	r25
   1beaa:	8f 93       	push	r24
   1beac:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1beb0:	ce 01       	movw	r24, r28
   1beb2:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1beb6:	ed b7       	in	r30, 0x3d	; 61
   1beb8:	fe b7       	in	r31, 0x3e	; 62
   1beba:	37 96       	adiw	r30, 0x07	; 7
   1bebc:	0f b6       	in	r0, 0x3f	; 63
   1bebe:	f8 94       	cli
   1bec0:	fe bf       	out	0x3e, r31	; 62
   1bec2:	0f be       	out	0x3f, r0	; 63
   1bec4:	ed bf       	out	0x3d, r30	; 61
   1bec6:	81 e0       	ldi	r24, 0x01	; 1
   1bec8:	90 e0       	ldi	r25, 0x00	; 0
   1beca:	02 c0       	rjmp	.+4      	; 0x1bed0 <lif_rename_file+0x104>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1becc:	8f ef       	ldi	r24, 0xFF	; 255
   1bece:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1bed0:	cd b7       	in	r28, 0x3d	; 61
   1bed2:	de b7       	in	r29, 0x3e	; 62
   1bed4:	ea e0       	ldi	r30, 0x0A	; 10
   1bed6:	ed c5       	rjmp	.+3034   	; 0x1cab2 <__epilogue_restores__+0x10>

0001bed8 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1bed8:	4f 92       	push	r4
   1beda:	5f 92       	push	r5
   1bedc:	6f 92       	push	r6
   1bede:	7f 92       	push	r7
   1bee0:	af 92       	push	r10
   1bee2:	bf 92       	push	r11
   1bee4:	cf 92       	push	r12
   1bee6:	df 92       	push	r13
   1bee8:	ef 92       	push	r14
   1beea:	ff 92       	push	r15
   1beec:	0f 93       	push	r16
   1beee:	1f 93       	push	r17
   1bef0:	cf 93       	push	r28
   1bef2:	df 93       	push	r29
   1bef4:	27 01       	movw	r4, r14
   1bef6:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1bef8:	dc 01       	movw	r26, r24
   1befa:	ec 91       	ld	r30, X
   1befc:	e1 11       	cpse	r30, r1
   1befe:	03 c0       	rjmp	.+6      	; 0x1bf06 <lif_create_image+0x2e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1bf00:	85 e6       	ldi	r24, 0x65	; 101
   1bf02:	91 e3       	ldi	r25, 0x31	; 49
   1bf04:	16 c0       	rjmp	.+44     	; 0x1bf32 <lif_create_image+0x5a>
        return(-1);
    }
    if(!*liflabel)
   1bf06:	db 01       	movw	r26, r22
   1bf08:	ec 91       	ld	r30, X
   1bf0a:	e1 11       	cpse	r30, r1
   1bf0c:	03 c0       	rjmp	.+6      	; 0x1bf14 <lif_create_image+0x3c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1bf0e:	80 e4       	ldi	r24, 0x40	; 64
   1bf10:	91 e3       	ldi	r25, 0x31	; 49
   1bf12:	0f c0       	rjmp	.+30     	; 0x1bf32 <lif_create_image+0x5a>
        return(-1);
    }
    if(!dirsectors)
   1bf14:	21 15       	cp	r18, r1
   1bf16:	31 05       	cpc	r19, r1
   1bf18:	41 05       	cpc	r20, r1
   1bf1a:	51 05       	cpc	r21, r1
   1bf1c:	19 f4       	brne	.+6      	; 0x1bf24 <lif_create_image+0x4c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1bf1e:	8d e1       	ldi	r24, 0x1D	; 29
   1bf20:	91 e3       	ldi	r25, 0x31	; 49
   1bf22:	07 c0       	rjmp	.+14     	; 0x1bf32 <lif_create_image+0x5a>
        return(-1);
    }
    if(!sectors)
   1bf24:	e1 14       	cp	r14, r1
   1bf26:	f1 04       	cpc	r15, r1
   1bf28:	01 05       	cpc	r16, r1
   1bf2a:	11 05       	cpc	r17, r1
   1bf2c:	59 f4       	brne	.+22     	; 0x1bf44 <lif_create_image+0x6c>
    {
        printf("lif_create_image: sectors is 0\n");
   1bf2e:	8d ef       	ldi	r24, 0xFD	; 253
   1bf30:	90 e3       	ldi	r25, 0x30	; 48
   1bf32:	1f 92       	push	r1
   1bf34:	9f 93       	push	r25
   1bf36:	8f 93       	push	r24
   1bf38:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(-1);
   1bf3c:	0f 90       	pop	r0
   1bf3e:	0f 90       	pop	r0
   1bf40:	0f 90       	pop	r0
   1bf42:	30 c0       	rjmp	.+96     	; 0x1bfa4 <lif_create_image+0xcc>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1bf44:	67 01       	movw	r12, r14
   1bf46:	78 01       	movw	r14, r16
   1bf48:	b2 e0       	ldi	r27, 0x02	; 2
   1bf4a:	cb 1a       	sub	r12, r27
   1bf4c:	d1 08       	sbc	r13, r1
   1bf4e:	e1 08       	sbc	r14, r1
   1bf50:	f1 08       	sbc	r15, r1
   1bf52:	56 01       	movw	r10, r12
   1bf54:	67 01       	movw	r12, r14
   1bf56:	a2 1a       	sub	r10, r18
   1bf58:	b3 0a       	sbc	r11, r19
   1bf5a:	c4 0a       	sbc	r12, r20
   1bf5c:	d5 0a       	sbc	r13, r21
   1bf5e:	79 01       	movw	r14, r18
   1bf60:	8a 01       	movw	r16, r20
   1bf62:	22 e0       	ldi	r18, 0x02	; 2
   1bf64:	30 e0       	ldi	r19, 0x00	; 0
   1bf66:	40 e0       	ldi	r20, 0x00	; 0
   1bf68:	50 e0       	ldi	r21, 0x00	; 0
   1bf6a:	0e 94 a0 cd 	call	0x19b40	; 0x19b40 <lif_create_volume>
    if(LIF == NULL)
   1bf6e:	00 97       	sbiw	r24, 0x00	; 0
   1bf70:	c9 f0       	breq	.+50     	; 0x1bfa4 <lif_create_image+0xcc>
        return(-1);
    lif_close_volume(LIF);
   1bf72:	0e 94 3a cb 	call	0x19674	; 0x19674 <lif_close_volume>

    printf("\tFormating: wrote %ld sectors\n", (long)end);
   1bf76:	82 01       	movw	r16, r4
   1bf78:	d6 2d       	mov	r29, r6
   1bf7a:	c7 2d       	mov	r28, r7
   1bf7c:	7f 92       	push	r7
   1bf7e:	6f 92       	push	r6
   1bf80:	5f 92       	push	r5
   1bf82:	4f 92       	push	r4
   1bf84:	8e ed       	ldi	r24, 0xDE	; 222
   1bf86:	90 e3       	ldi	r25, 0x30	; 48
   1bf88:	1f 92       	push	r1
   1bf8a:	9f 93       	push	r25
   1bf8c:	8f 93       	push	r24
   1bf8e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    return(end);
   1bf92:	8d b7       	in	r24, 0x3d	; 61
   1bf94:	9e b7       	in	r25, 0x3e	; 62
   1bf96:	07 96       	adiw	r24, 0x07	; 7
   1bf98:	0f b6       	in	r0, 0x3f	; 63
   1bf9a:	f8 94       	cli
   1bf9c:	9e bf       	out	0x3e, r25	; 62
   1bf9e:	0f be       	out	0x3f, r0	; 63
   1bfa0:	8d bf       	out	0x3d, r24	; 61
   1bfa2:	04 c0       	rjmp	.+8      	; 0x1bfac <lif_create_image+0xd4>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1bfa4:	0f ef       	ldi	r16, 0xFF	; 255
   1bfa6:	1f ef       	ldi	r17, 0xFF	; 255
   1bfa8:	df ef       	ldi	r29, 0xFF	; 255
   1bfaa:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormating: wrote %ld sectors\n", (long)end);
    return(end);
}
   1bfac:	b8 01       	movw	r22, r16
   1bfae:	8d 2f       	mov	r24, r29
   1bfb0:	9c 2f       	mov	r25, r28
   1bfb2:	df 91       	pop	r29
   1bfb4:	cf 91       	pop	r28
   1bfb6:	1f 91       	pop	r17
   1bfb8:	0f 91       	pop	r16
   1bfba:	ff 90       	pop	r15
   1bfbc:	ef 90       	pop	r14
   1bfbe:	df 90       	pop	r13
   1bfc0:	cf 90       	pop	r12
   1bfc2:	bf 90       	pop	r11
   1bfc4:	af 90       	pop	r10
   1bfc6:	7f 90       	pop	r7
   1bfc8:	6f 90       	pop	r6
   1bfca:	5f 90       	pop	r5
   1bfcc:	4f 90       	pop	r4
   1bfce:	08 95       	ret

0001bfd0 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1bfd0:	a0 e0       	ldi	r26, 0x00	; 0
   1bfd2:	b0 e0       	ldi	r27, 0x00	; 0
   1bfd4:	ed ee       	ldi	r30, 0xED	; 237
   1bfd6:	ff ed       	ldi	r31, 0xDF	; 223
   1bfd8:	4e c5       	rjmp	.+2716   	; 0x1ca76 <__prologue_saves__+0xc>
    // NAME
    ind = 0;
	// Skip program name
    ptr = argv[ind++];

    if(!ptr )
   1bfda:	fb 01       	movw	r30, r22
   1bfdc:	20 81       	ld	r18, Z
   1bfde:	31 81       	ldd	r19, Z+1	; 0x01
   1bfe0:	23 2b       	or	r18, r19
   1bfe2:	59 f0       	breq	.+22     	; 0x1bffa <lif_tests+0x2a>
   1bfe4:	6b 01       	movw	r12, r22
   1bfe6:	4c 01       	movw	r8, r24
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1bfe8:	fb 01       	movw	r30, r22
   1bfea:	a2 80       	ldd	r10, Z+2	; 0x02
   1bfec:	b3 80       	ldd	r11, Z+3	; 0x03



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1bfee:	02 97       	sbiw	r24, 0x02	; 2
   1bff0:	3c f4       	brge	.+14     	; 0x1c000 <lif_tests+0x30>
    {
        lif_help(1);
   1bff2:	81 e0       	ldi	r24, 0x01	; 1
   1bff4:	90 e0       	ldi	r25, 0x00	; 0
   1bff6:	0e 94 a5 c1 	call	0x1834a	; 0x1834a <lif_help>
#ifdef TELEDISK
        td0_help(1);
#endif
        return(0);
   1bffa:	80 e0       	ldi	r24, 0x00	; 0
   1bffc:	90 e0       	ldi	r25, 0x00	; 0
   1bffe:	56 c1       	rjmp	.+684    	; 0x1c2ac <lif_tests+0x2dc>
	// Next Argument after program name
    ptr = argv[ind++];



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1c000:	a1 14       	cp	r10, r1
   1c002:	b1 04       	cpc	r11, r1
   1c004:	b1 f3       	breq	.-20     	; 0x1bff2 <lif_tests+0x22>
   1c006:	67 ef       	ldi	r22, 0xF7	; 247
   1c008:	75 e1       	ldi	r23, 0x15	; 21
   1c00a:	c5 01       	movw	r24, r10
   1c00c:	0e 94 85 32 	call	0x650a	; 0x650a <MATCH>
   1c010:	89 2b       	or	r24, r25
   1c012:	79 f7       	brne	.-34     	; 0x1bff2 <lif_tests+0x22>
   1c014:	66 ef       	ldi	r22, 0xF6	; 246
   1c016:	75 e1       	ldi	r23, 0x15	; 21
   1c018:	c5 01       	movw	r24, r10
   1c01a:	0e 94 85 32 	call	0x650a	; 0x650a <MATCH>
   1c01e:	89 2b       	or	r24, r25
   1c020:	41 f7       	brne	.-48     	; 0x1bff2 <lif_tests+0x22>
   1c022:	6c ef       	ldi	r22, 0xFC	; 252
   1c024:	75 e1       	ldi	r23, 0x15	; 21
   1c026:	c5 01       	movw	r24, r10
   1c028:	0e 94 85 32 	call	0x650a	; 0x650a <MATCH>
   1c02c:	89 2b       	or	r24, r25
   1c02e:	09 f7       	brne	.-62     	; 0x1bff2 <lif_tests+0x22>
        return(0);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1c030:	94 01       	movw	r18, r8
   1c032:	42 e0       	ldi	r20, 0x02	; 2
   1c034:	50 e0       	ldi	r21, 0x00	; 0
   1c036:	6f ef       	ldi	r22, 0xFF	; 255
   1c038:	75 e1       	ldi	r23, 0x15	; 21
   1c03a:	c5 01       	movw	r24, r10
   1c03c:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c040:	89 2b       	or	r24, r25
   1c042:	61 f0       	breq	.+24     	; 0x1c05c <lif_tests+0x8c>
    {
		debuglevel = 0xffff;
   1c044:	8f ef       	ldi	r24, 0xFF	; 255
   1c046:	9f ef       	ldi	r25, 0xFF	; 255
   1c048:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   1c04c:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
		ptr = argv[ind++];
   1c050:	f6 01       	movw	r30, r12
   1c052:	a4 80       	ldd	r10, Z+4	; 0x04
   1c054:	b5 80       	ldd	r11, Z+5	; 0x05
   1c056:	c3 e0       	ldi	r28, 0x03	; 3
   1c058:	d0 e0       	ldi	r29, 0x00	; 0
   1c05a:	02 c0       	rjmp	.+4      	; 0x1c060 <lif_tests+0x90>

    if(!ptr )
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1c05c:	c2 e0       	ldi	r28, 0x02	; 2
   1c05e:	d0 e0       	ldi	r29, 0x00	; 0
    {
		debuglevel = 0xffff;
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1c060:	7e 01       	movw	r14, r28
   1c062:	f3 e0       	ldi	r31, 0x03	; 3
   1c064:	ef 0e       	add	r14, r31
   1c066:	f1 1c       	adc	r15, r1
   1c068:	94 01       	movw	r18, r8
   1c06a:	a7 01       	movw	r20, r14
   1c06c:	62 e0       	ldi	r22, 0x02	; 2
   1c06e:	76 e1       	ldi	r23, 0x16	; 22
   1c070:	c5 01       	movw	r24, r10
   1c072:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c076:	89 2b       	or	r24, r25
   1c078:	81 f0       	breq	.+32     	; 0x1c09a <lif_tests+0xca>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c07a:	22 96       	adiw	r28, 0x02	; 2
   1c07c:	cc 0f       	add	r28, r28
   1c07e:	dd 1f       	adc	r29, r29
   1c080:	cc 0d       	add	r28, r12
   1c082:	dd 1d       	adc	r29, r13
   1c084:	48 81       	ld	r20, Y
   1c086:	59 81       	ldd	r21, Y+1	; 0x01
   1c088:	fe 01       	movw	r30, r28
   1c08a:	32 97       	sbiw	r30, 0x02	; 2
   1c08c:	60 81       	ld	r22, Z
   1c08e:	71 81       	ldd	r23, Z+1	; 0x01
   1c090:	24 97       	sbiw	r28, 0x04	; 4
   1c092:	88 81       	ld	r24, Y
   1c094:	99 81       	ldd	r25, Y+1	; 0x01
   1c096:	6a dc       	rcall	.-1836   	; 0x1b96c <lif_add_lif_file>
   1c098:	07 c1       	rjmp	.+526    	; 0x1c2a8 <lif_tests+0x2d8>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1c09a:	94 01       	movw	r18, r8
   1c09c:	a7 01       	movw	r20, r14
   1c09e:	69 e0       	ldi	r22, 0x09	; 9
   1c0a0:	76 e1       	ldi	r23, 0x16	; 22
   1c0a2:	c5 01       	movw	r24, r10
   1c0a4:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c0a8:	89 2b       	or	r24, r25
   1c0aa:	89 f0       	breq	.+34     	; 0x1c0ce <lif_tests+0xfe>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1c0ac:	22 96       	adiw	r28, 0x02	; 2
   1c0ae:	cc 0f       	add	r28, r28
   1c0b0:	dd 1f       	adc	r29, r29
   1c0b2:	cc 0d       	add	r28, r12
   1c0b4:	dd 1d       	adc	r29, r13
   1c0b6:	48 81       	ld	r20, Y
   1c0b8:	59 81       	ldd	r21, Y+1	; 0x01
   1c0ba:	fe 01       	movw	r30, r28
   1c0bc:	32 97       	sbiw	r30, 0x02	; 2
   1c0be:	60 81       	ld	r22, Z
   1c0c0:	71 81       	ldd	r23, Z+1	; 0x01
   1c0c2:	24 97       	sbiw	r28, 0x04	; 4
   1c0c4:	88 81       	ld	r24, Y
   1c0c6:	99 81       	ldd	r25, Y+1	; 0x01
   1c0c8:	0e 94 4a d7 	call	0x1ae94	; 0x1ae94 <lif_add_ascii_file_as_e010>
   1c0cc:	ed c0       	rjmp	.+474    	; 0x1c2a8 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1c0ce:	94 01       	movw	r18, r8
   1c0d0:	a7 01       	movw	r20, r14
   1c0d2:	6d e0       	ldi	r22, 0x0D	; 13
   1c0d4:	76 e1       	ldi	r23, 0x16	; 22
   1c0d6:	c5 01       	movw	r24, r10
   1c0d8:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c0dc:	89 2b       	or	r24, r25
   1c0de:	09 f4       	brne	.+2      	; 0x1c0e2 <lif_tests+0x112>
   1c0e0:	42 c0       	rjmp	.+132    	; 0x1c166 <lif_tests+0x196>
    {
		///@brief format LIF image
		long dir,sectors;
		char *name = argv[ind];
   1c0e2:	cc 0f       	add	r28, r28
   1c0e4:	dd 1f       	adc	r29, r29
   1c0e6:	cc 0d       	add	r28, r12
   1c0e8:	dd 1d       	adc	r29, r13
   1c0ea:	c8 80       	ld	r12, Y
   1c0ec:	d9 80       	ldd	r13, Y+1	; 0x01
		char *label = argv[ind+1];
   1c0ee:	aa 80       	ldd	r10, Y+2	; 0x02
   1c0f0:	bb 80       	ldd	r11, Y+3	; 0x03
		char *model = argv[ind+2];
   1c0f2:	0c 80       	ldd	r0, Y+4	; 0x04
   1c0f4:	dd 81       	ldd	r29, Y+5	; 0x05
   1c0f6:	c0 2d       	mov	r28, r0
		if( MATCHI_LEN(model,"hp"))
   1c0f8:	68 e1       	ldi	r22, 0x18	; 24
   1c0fa:	76 e1       	ldi	r23, 0x16	; 22
   1c0fc:	ce 01       	movw	r24, r28
   1c0fe:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <MATCHI_LEN>
   1c102:	89 2b       	or	r24, r25
   1c104:	09 f0       	breq	.+2      	; 0x1c108 <lif_tests+0x138>
			model +=2;
   1c106:	22 96       	adiw	r28, 0x02	; 2
		if(hpdir_find_drive(model,0, 0))
   1c108:	40 e0       	ldi	r20, 0x00	; 0
   1c10a:	50 e0       	ldi	r21, 0x00	; 0
   1c10c:	60 e0       	ldi	r22, 0x00	; 0
   1c10e:	70 e0       	ldi	r23, 0x00	; 0
   1c110:	ce 01       	movw	r24, r28
   1c112:	0e 94 ef a5 	call	0x14bde	; 0x14bde <hpdir_find_drive>
   1c116:	89 2b       	or	r24, r25
   1c118:	b9 f0       	breq	.+46     	; 0x1c148 <lif_tests+0x178>
		{
			dir = lif_dir_count(hpdir.BLOCKS);
   1c11a:	60 91 9c 20 	lds	r22, 0x209C	; 0x80209c <hpdir+0xac>
   1c11e:	70 91 9d 20 	lds	r23, 0x209D	; 0x80209d <hpdir+0xad>
   1c122:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <hpdir+0xae>
   1c126:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <hpdir+0xaf>
   1c12a:	0e 94 d2 a5 	call	0x14ba4	; 0x14ba4 <lif_dir_count>
   1c12e:	9b 01       	movw	r18, r22
   1c130:	ac 01       	movw	r20, r24
			sectors = hpdir.BLOCKS;
			lif_create_image(name, label, dir, sectors);
   1c132:	e0 90 9c 20 	lds	r14, 0x209C	; 0x80209c <hpdir+0xac>
   1c136:	f0 90 9d 20 	lds	r15, 0x209D	; 0x80209d <hpdir+0xad>
   1c13a:	00 91 9e 20 	lds	r16, 0x209E	; 0x80209e <hpdir+0xae>
   1c13e:	10 91 9f 20 	lds	r17, 0x209F	; 0x80209f <hpdir+0xaf>
   1c142:	b5 01       	movw	r22, r10
   1c144:	c6 01       	movw	r24, r12
   1c146:	36 c0       	rjmp	.+108    	; 0x1c1b4 <lif_tests+0x1e4>
			return(1);
		}
		printf("Disk: %s not found in hpdir.ini\n", model);
   1c148:	df 93       	push	r29
   1c14a:	cf 93       	push	r28
   1c14c:	81 e1       	ldi	r24, 0x11	; 17
   1c14e:	93 e4       	ldi	r25, 0x43	; 67
   1c150:	1f 92       	push	r1
   1c152:	9f 93       	push	r25
   1c154:	8f 93       	push	r24
   1c156:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
        return(1);
   1c15a:	0f 90       	pop	r0
   1c15c:	0f 90       	pop	r0
   1c15e:	0f 90       	pop	r0
   1c160:	0f 90       	pop	r0
   1c162:	0f 90       	pop	r0
   1c164:	a1 c0       	rjmp	.+322    	; 0x1c2a8 <lif_tests+0x2d8>
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1c166:	94 01       	movw	r18, r8
   1c168:	ae 01       	movw	r20, r28
   1c16a:	4c 5f       	subi	r20, 0xFC	; 252
   1c16c:	5f 4f       	sbci	r21, 0xFF	; 255
   1c16e:	6b e1       	ldi	r22, 0x1B	; 27
   1c170:	76 e1       	ldi	r23, 0x16	; 22
   1c172:	c5 01       	movw	r24, r10
   1c174:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c178:	89 2b       	or	r24, r25
   1c17a:	f1 f0       	breq	.+60     	; 0x1c1b8 <lif_tests+0x1e8>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1c17c:	e7 01       	movw	r28, r14
   1c17e:	cc 0f       	add	r28, r28
   1c180:	dd 1f       	adc	r29, r29
   1c182:	cc 0d       	add	r28, r12
   1c184:	dd 1d       	adc	r29, r13
   1c186:	88 81       	ld	r24, Y
   1c188:	99 81       	ldd	r25, Y+1	; 0x01
   1c18a:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <atol>
   1c18e:	6b 01       	movw	r12, r22
   1c190:	7c 01       	movw	r14, r24
   1c192:	fe 01       	movw	r30, r28
   1c194:	32 97       	sbiw	r30, 0x02	; 2
   1c196:	80 81       	ld	r24, Z
   1c198:	91 81       	ldd	r25, Z+1	; 0x01
   1c19a:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <atol>
   1c19e:	9b 01       	movw	r18, r22
   1c1a0:	ac 01       	movw	r20, r24
   1c1a2:	fe 01       	movw	r30, r28
   1c1a4:	34 97       	sbiw	r30, 0x04	; 4
   1c1a6:	60 81       	ld	r22, Z
   1c1a8:	71 81       	ldd	r23, Z+1	; 0x01
   1c1aa:	26 97       	sbiw	r28, 0x06	; 6
   1c1ac:	87 01       	movw	r16, r14
   1c1ae:	76 01       	movw	r14, r12
   1c1b0:	88 81       	ld	r24, Y
   1c1b2:	99 81       	ldd	r25, Y+1	; 0x01
   1c1b4:	91 de       	rcall	.-734    	; 0x1bed8 <lif_create_image>
   1c1b6:	78 c0       	rjmp	.+240    	; 0x1c2a8 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1c1b8:	8e 01       	movw	r16, r28
   1c1ba:	0e 5f       	subi	r16, 0xFE	; 254
   1c1bc:	1f 4f       	sbci	r17, 0xFF	; 255
   1c1be:	94 01       	movw	r18, r8
   1c1c0:	a8 01       	movw	r20, r16
   1c1c2:	62 e2       	ldi	r22, 0x22	; 34
   1c1c4:	76 e1       	ldi	r23, 0x16	; 22
   1c1c6:	c5 01       	movw	r24, r10
   1c1c8:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c1cc:	ae 01       	movw	r20, r28
   1c1ce:	4f 5f       	subi	r20, 0xFF	; 255
   1c1d0:	5f 4f       	sbci	r21, 0xFF	; 255
   1c1d2:	89 2b       	or	r24, r25
   1c1d4:	61 f0       	breq	.+24     	; 0x1c1ee <lif_tests+0x21e>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1c1d6:	ea 01       	movw	r28, r20
   1c1d8:	cc 0f       	add	r28, r28
   1c1da:	dd 1f       	adc	r29, r29
   1c1dc:	cc 0d       	add	r28, r12
   1c1de:	dd 1d       	adc	r29, r13
   1c1e0:	68 81       	ld	r22, Y
   1c1e2:	79 81       	ldd	r23, Y+1	; 0x01
   1c1e4:	22 97       	sbiw	r28, 0x02	; 2
   1c1e6:	88 81       	ld	r24, Y
   1c1e8:	99 81       	ldd	r25, Y+1	; 0x01
   1c1ea:	58 dd       	rcall	.-1360   	; 0x1bc9c <lif_del_file>
   1c1ec:	5d c0       	rjmp	.+186    	; 0x1c2a8 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1c1ee:	94 01       	movw	r18, r8
   1c1f0:	6c e4       	ldi	r22, 0x4C	; 76
   1c1f2:	7b e0       	ldi	r23, 0x0B	; 11
   1c1f4:	c5 01       	movw	r24, r10
   1c1f6:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c1fa:	89 2b       	or	r24, r25
   1c1fc:	49 f0       	breq	.+18     	; 0x1c210 <lif_tests+0x240>
    {
        lif_dir(argv[ind]);
   1c1fe:	cc 0f       	add	r28, r28
   1c200:	dd 1f       	adc	r29, r29
   1c202:	cc 0d       	add	r28, r12
   1c204:	dd 1d       	adc	r29, r13
   1c206:	88 81       	ld	r24, Y
   1c208:	99 81       	ldd	r25, Y+1	; 0x01
   1c20a:	0e 94 32 d3 	call	0x1a664	; 0x1a664 <lif_dir>
   1c20e:	4c c0       	rjmp	.+152    	; 0x1c2a8 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1c210:	94 01       	movw	r18, r8
   1c212:	a7 01       	movw	r20, r14
   1c214:	66 e2       	ldi	r22, 0x26	; 38
   1c216:	76 e1       	ldi	r23, 0x16	; 22
   1c218:	c5 01       	movw	r24, r10
   1c21a:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c21e:	89 2b       	or	r24, r25
   1c220:	81 f0       	breq	.+32     	; 0x1c242 <lif_tests+0x272>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1c222:	e8 01       	movw	r28, r16
   1c224:	cc 0f       	add	r28, r28
   1c226:	dd 1f       	adc	r29, r29
   1c228:	cc 0d       	add	r28, r12
   1c22a:	dd 1d       	adc	r29, r13
   1c22c:	48 81       	ld	r20, Y
   1c22e:	59 81       	ldd	r21, Y+1	; 0x01
   1c230:	fe 01       	movw	r30, r28
   1c232:	32 97       	sbiw	r30, 0x02	; 2
   1c234:	60 81       	ld	r22, Z
   1c236:	71 81       	ldd	r23, Z+1	; 0x01
   1c238:	24 97       	sbiw	r28, 0x04	; 4
   1c23a:	88 81       	ld	r24, Y
   1c23c:	99 81       	ldd	r25, Y+1	; 0x01
   1c23e:	4f da       	rcall	.-2914   	; 0x1b6de <lif_extract_lif_as_lif>
   1c240:	33 c0       	rjmp	.+102    	; 0x1c2a8 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1c242:	94 01       	movw	r18, r8
   1c244:	a7 01       	movw	r20, r14
   1c246:	61 e3       	ldi	r22, 0x31	; 49
   1c248:	76 e1       	ldi	r23, 0x16	; 22
   1c24a:	c5 01       	movw	r24, r10
   1c24c:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c250:	89 2b       	or	r24, r25
   1c252:	89 f0       	breq	.+34     	; 0x1c276 <lif_tests+0x2a6>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1c254:	e8 01       	movw	r28, r16
   1c256:	cc 0f       	add	r28, r28
   1c258:	dd 1f       	adc	r29, r29
   1c25a:	cc 0d       	add	r28, r12
   1c25c:	dd 1d       	adc	r29, r13
   1c25e:	48 81       	ld	r20, Y
   1c260:	59 81       	ldd	r21, Y+1	; 0x01
   1c262:	fe 01       	movw	r30, r28
   1c264:	32 97       	sbiw	r30, 0x02	; 2
   1c266:	60 81       	ld	r22, Z
   1c268:	71 81       	ldd	r23, Z+1	; 0x01
   1c26a:	24 97       	sbiw	r28, 0x04	; 4
   1c26c:	88 81       	ld	r24, Y
   1c26e:	99 81       	ldd	r25, Y+1	; 0x01
   1c270:	0e 94 83 d8 	call	0x1b106	; 0x1b106 <lif_extract_e010_as_ascii>
   1c274:	19 c0       	rjmp	.+50     	; 0x1c2a8 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c276:	94 01       	movw	r18, r8
   1c278:	a7 01       	movw	r20, r14
   1c27a:	69 e5       	ldi	r22, 0x59	; 89
   1c27c:	7b e0       	ldi	r23, 0x0B	; 11
   1c27e:	c5 01       	movw	r24, r10
   1c280:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c284:	89 2b       	or	r24, r25
   1c286:	09 f4       	brne	.+2      	; 0x1c28a <lif_tests+0x2ba>
   1c288:	b8 ce       	rjmp	.-656    	; 0x1bffa <lif_tests+0x2a>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c28a:	00 0f       	add	r16, r16
   1c28c:	11 1f       	adc	r17, r17
   1c28e:	e6 01       	movw	r28, r12
   1c290:	c0 0f       	add	r28, r16
   1c292:	d1 1f       	adc	r29, r17
   1c294:	48 81       	ld	r20, Y
   1c296:	59 81       	ldd	r21, Y+1	; 0x01
   1c298:	fe 01       	movw	r30, r28
   1c29a:	32 97       	sbiw	r30, 0x02	; 2
   1c29c:	60 81       	ld	r22, Z
   1c29e:	71 81       	ldd	r23, Z+1	; 0x01
   1c2a0:	24 97       	sbiw	r28, 0x04	; 4
   1c2a2:	88 81       	ld	r24, Y
   1c2a4:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   1c2a6:	92 dd       	rcall	.-1244   	; 0x1bdcc <lif_rename_file>
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1c2a8:	81 e0       	ldi	r24, 0x01	; 1
   1c2aa:	90 e0       	ldi	r25, 0x00	; 0
   1c2ac:	cd b7       	in	r28, 0x3d	; 61
   1c2ae:	de b7       	in	r29, 0x3e	; 62
   1c2b0:	ec e0       	ldi	r30, 0x0C	; 12
   1c2b2:	fd c3       	rjmp	.+2042   	; 0x1caae <__epilogue_restores__+0xc>

0001c2b4 <copyright>:

///@brief Display Copyright
///@return void
void copyright()
{
    printf("Stand alone version of LIF utilities for linux\n");
   1c2b4:	83 e7       	ldi	r24, 0x73	; 115
   1c2b6:	98 e4       	ldi	r25, 0x48	; 72
   1c2b8:	1f 92       	push	r1
   1c2ba:	9f 93       	push	r25
   1c2bc:	8f 93       	push	r24
   1c2be:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1c2c2:	84 e5       	ldi	r24, 0x54	; 84
   1c2c4:	98 e4       	ldi	r25, 0x48	; 72
   1c2c6:	1f 92       	push	r1
   1c2c8:	9f 93       	push	r25
   1c2ca:	8f 93       	push	r24
   1c2cc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c2d0:	87 e3       	ldi	r24, 0x37	; 55
   1c2d2:	98 e4       	ldi	r25, 0x48	; 72
   1c2d4:	1f 92       	push	r1
   1c2d6:	9f 93       	push	r25
   1c2d8:	8f 93       	push	r24
   1c2da:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf(" GNU version 3\n");
   1c2de:	87 e2       	ldi	r24, 0x27	; 39
   1c2e0:	98 e4       	ldi	r25, 0x48	; 72
   1c2e2:	1f 92       	push	r1
   1c2e4:	9f 93       	push	r25
   1c2e6:	8f 93       	push	r24
   1c2e8:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c2ec:	80 e0       	ldi	r24, 0x00	; 0
   1c2ee:	98 e4       	ldi	r25, 0x48	; 72
   1c2f0:	1f 92       	push	r1
   1c2f2:	9f 93       	push	r25
   1c2f4:	8f 93       	push	r24
   1c2f6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c2fa:	89 e3       	ldi	r24, 0x39	; 57
   1c2fc:	96 e1       	ldi	r25, 0x16	; 22
   1c2fe:	9f 93       	push	r25
   1c300:	8f 93       	push	r24
   1c302:	86 ee       	ldi	r24, 0xE6	; 230
   1c304:	97 e4       	ldi	r25, 0x47	; 71
   1c306:	1f 92       	push	r1
   1c308:	9f 93       	push	r25
   1c30a:	8f 93       	push	r24
   1c30c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c310:	8d e5       	ldi	r24, 0x5D	; 93
   1c312:	96 e1       	ldi	r25, 0x16	; 22
   1c314:	9f 93       	push	r25
   1c316:	8f 93       	push	r24
   1c318:	8c ec       	ldi	r24, 0xCC	; 204
   1c31a:	97 e4       	ldi	r25, 0x47	; 71
   1c31c:	1f 92       	push	r1
   1c31e:	9f 93       	push	r25
   1c320:	8f 93       	push	r24
   1c322:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
    printf("\n");
   1c326:	8a ec       	ldi	r24, 0xCA	; 202
   1c328:	97 e4       	ldi	r25, 0x47	; 71
   1c32a:	1f 92       	push	r1
   1c32c:	9f 93       	push	r25
   1c32e:	8f 93       	push	r24
   1c330:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
}
   1c334:	8d b7       	in	r24, 0x3d	; 61
   1c336:	9e b7       	in	r25, 0x3e	; 62
   1c338:	4c 96       	adiw	r24, 0x1c	; 28
   1c33a:	0f b6       	in	r0, 0x3f	; 63
   1c33c:	f8 94       	cli
   1c33e:	9e bf       	out	0x3e, r25	; 62
   1c340:	0f be       	out	0x3f, r0	; 63
   1c342:	8d bf       	out	0x3d, r24	; 61
   1c344:	08 95       	ret

0001c346 <delay_tests>:
///
/// This included measurement of avr-libc delays
/// @return  void
void delay_tests()
{
    printf("System delays\n");
   1c346:	8b eb       	ldi	r24, 0xBB	; 187
   1c348:	97 e4       	ldi	r25, 0x47	; 71
   1c34a:	1f 92       	push	r1
   1c34c:	9f 93       	push	r25
   1c34e:	8f 93       	push	r24
   1c350:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>

    clock_elapsed_begin();
   1c354:	0e 94 dd 35 	call	0x6bba	; 0x6bba <clock_elapsed_begin>
    clock_elapsed_end("elapsed timer overhead");
   1c358:	81 e8       	ldi	r24, 0x81	; 129
   1c35a:	96 e1       	ldi	r25, 0x16	; 22
   1c35c:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <clock_elapsed_end>

    clock_elapsed_begin();
   1c360:	0e 94 dd 35 	call	0x6bba	; 0x6bba <clock_elapsed_begin>
   1c364:	83 ef       	ldi	r24, 0xF3	; 243
   1c366:	91 e0       	ldi	r25, 0x01	; 1
   1c368:	01 97       	sbiw	r24, 0x01	; 1
   1c36a:	f1 f7       	brne	.-4      	; 0x1c368 <delay_tests+0x22>
   1c36c:	00 c0       	rjmp	.+0      	; 0x1c36e <delay_tests+0x28>
   1c36e:	00 00       	nop
    _delay_us(100);
    clock_elapsed_end("_delay_us(100)");
   1c370:	88 e9       	ldi	r24, 0x98	; 152
   1c372:	96 e1       	ldi	r25, 0x16	; 22
   1c374:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <clock_elapsed_end>

    clock_elapsed_begin();
   1c378:	0e 94 dd 35 	call	0x6bba	; 0x6bba <clock_elapsed_begin>
   1c37c:	83 ec       	ldi	r24, 0xC3	; 195
   1c37e:	99 e0       	ldi	r25, 0x09	; 9
   1c380:	01 97       	sbiw	r24, 0x01	; 1
   1c382:	f1 f7       	brne	.-4      	; 0x1c380 <delay_tests+0x3a>
   1c384:	00 c0       	rjmp	.+0      	; 0x1c386 <delay_tests+0x40>
   1c386:	00 00       	nop
    _delay_us(500);
    clock_elapsed_end("_delay_us(500)");
   1c388:	87 ea       	ldi	r24, 0xA7	; 167
   1c38a:	96 e1       	ldi	r25, 0x16	; 22
   1c38c:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <clock_elapsed_end>

    printf("My delays\n");
   1c390:	80 eb       	ldi	r24, 0xB0	; 176
   1c392:	97 e4       	ldi	r25, 0x47	; 71
   1c394:	1f 92       	push	r1
   1c396:	9f 93       	push	r25
   1c398:	8f 93       	push	r24
   1c39a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>

    clock_elapsed_begin();
   1c39e:	0e 94 dd 35 	call	0x6bba	; 0x6bba <clock_elapsed_begin>
    delayus(100U);
   1c3a2:	64 e6       	ldi	r22, 0x64	; 100
   1c3a4:	70 e0       	ldi	r23, 0x00	; 0
   1c3a6:	80 e0       	ldi	r24, 0x00	; 0
   1c3a8:	90 e0       	ldi	r25, 0x00	; 0
   1c3aa:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <delayus>
    clock_elapsed_end("delayus(100)");
   1c3ae:	86 eb       	ldi	r24, 0xB6	; 182
   1c3b0:	96 e1       	ldi	r25, 0x16	; 22
   1c3b2:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <clock_elapsed_end>

    clock_elapsed_begin();
   1c3b6:	0e 94 dd 35 	call	0x6bba	; 0x6bba <clock_elapsed_begin>
    delayus(500U);
   1c3ba:	64 ef       	ldi	r22, 0xF4	; 244
   1c3bc:	71 e0       	ldi	r23, 0x01	; 1
   1c3be:	80 e0       	ldi	r24, 0x00	; 0
   1c3c0:	90 e0       	ldi	r25, 0x00	; 0
   1c3c2:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <delayus>
    clock_elapsed_end("delayus(500)");
   1c3c6:	83 ec       	ldi	r24, 0xC3	; 195
   1c3c8:	96 e1       	ldi	r25, 0x16	; 22
   1c3ca:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <clock_elapsed_end>

    clock_elapsed_begin();
   1c3ce:	0e 94 dd 35 	call	0x6bba	; 0x6bba <clock_elapsed_begin>
    delayus(1100);
   1c3d2:	6c e4       	ldi	r22, 0x4C	; 76
   1c3d4:	74 e0       	ldi	r23, 0x04	; 4
   1c3d6:	80 e0       	ldi	r24, 0x00	; 0
   1c3d8:	90 e0       	ldi	r25, 0x00	; 0
   1c3da:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <delayus>
    clock_elapsed_end("delayus(1100)");
   1c3de:	80 ed       	ldi	r24, 0xD0	; 208
   1c3e0:	96 e1       	ldi	r25, 0x16	; 22
   1c3e2:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <clock_elapsed_end>

    clock_elapsed_begin();
   1c3e6:	0e 94 dd 35 	call	0x6bba	; 0x6bba <clock_elapsed_begin>
    delayms(1000);
   1c3ea:	68 ee       	ldi	r22, 0xE8	; 232
   1c3ec:	73 e0       	ldi	r23, 0x03	; 3
   1c3ee:	80 e0       	ldi	r24, 0x00	; 0
   1c3f0:	90 e0       	ldi	r25, 0x00	; 0
   1c3f2:	0e 94 29 2a 	call	0x5452	; 0x5452 <delayms>
    clock_elapsed_end("delayms(1100)");
   1c3f6:	8e ed       	ldi	r24, 0xDE	; 222
   1c3f8:	96 e1       	ldi	r25, 0x16	; 22
   1c3fa:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <clock_elapsed_end>
}
   1c3fe:	0f 90       	pop	r0
   1c400:	0f 90       	pop	r0
   1c402:	0f 90       	pop	r0
   1c404:	0f 90       	pop	r0
   1c406:	0f 90       	pop	r0
   1c408:	0f 90       	pop	r0
   1c40a:	08 95       	ret

0001c40c <help>:
   1c40c:	53 df       	rcall	.-346    	; 0x1c2b4 <copyright>
   1c40e:	80 e0       	ldi	r24, 0x00	; 0
   1c410:	90 e0       	ldi	r25, 0x00	; 0
   1c412:	0e 94 9b 73 	call	0xe736	; 0xe736 <fatfs_help>
   1c416:	80 e0       	ldi	r24, 0x00	; 0
   1c418:	90 e0       	ldi	r25, 0x00	; 0
   1c41a:	0e 94 c1 7e 	call	0xfd82	; 0xfd82 <posix_help>
   1c41e:	80 e0       	ldi	r24, 0x00	; 0
   1c420:	90 e0       	ldi	r25, 0x00	; 0
   1c422:	0e 94 a5 c1 	call	0x1834a	; 0x1834a <lif_help>
   1c426:	80 e0       	ldi	r24, 0x00	; 0
   1c428:	90 e0       	ldi	r25, 0x00	; 0
   1c42a:	0e 94 01 91 	call	0x12202	; 0x12202 <gpib_help>
   1c42e:	8c e8       	ldi	r24, 0x8C	; 140
   1c430:	97 e4       	ldi	r25, 0x47	; 71
   1c432:	1f 92       	push	r1
   1c434:	9f 93       	push	r25
   1c436:	8f 93       	push	r24
   1c438:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c43c:	0f 90       	pop	r0
   1c43e:	0f 90       	pop	r0
   1c440:	0f 90       	pop	r0
   1c442:	08 95       	ret

0001c444 <task>:
   1c444:	a4 ee       	ldi	r26, 0xE4	; 228
   1c446:	b0 e0       	ldi	r27, 0x00	; 0
   1c448:	e7 e2       	ldi	r30, 0x27	; 39
   1c44a:	f2 ee       	ldi	r31, 0xE2	; 226
   1c44c:	1a c3       	rjmp	.+1588   	; 0x1ca82 <__prologue_saves__+0x18>
   1c44e:	81 11       	cpse	r24, r1
   1c450:	0e 94 9f 90 	call	0x1213e	; 0x1213e <gpib_task>
   1c454:	80 e0       	ldi	r24, 0x00	; 0
   1c456:	0e 94 9c 2b 	call	0x5738	; 0x5738 <uart_rx_count>
   1c45a:	89 2b       	or	r24, r25
   1c45c:	09 f4       	brne	.+2      	; 0x1c460 <task+0x1c>
   1c45e:	a0 c0       	rjmp	.+320    	; 0x1c5a0 <task+0x15c>
   1c460:	89 e8       	ldi	r24, 0x89	; 137
   1c462:	97 e4       	ldi	r25, 0x47	; 71
   1c464:	1f 92       	push	r1
   1c466:	9f 93       	push	r25
   1c468:	8f 93       	push	r24
   1c46a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c46e:	40 91 b7 1b 	lds	r20, 0x1BB7	; 0x801bb7 <__iob>
   1c472:	50 91 b8 1b 	lds	r21, 0x1BB8	; 0x801bb8 <__iob+0x1>
   1c476:	6e e7       	ldi	r22, 0x7E	; 126
   1c478:	70 e0       	ldi	r23, 0x00	; 0
   1c47a:	ce 01       	movw	r24, r28
   1c47c:	01 96       	adiw	r24, 0x01	; 1
   1c47e:	0e 94 c6 76 	call	0xed8c	; 0xed8c <fgets>
   1c482:	42 e3       	ldi	r20, 0x32	; 50
   1c484:	50 e0       	ldi	r21, 0x00	; 0
   1c486:	be 01       	movw	r22, r28
   1c488:	6f 57       	subi	r22, 0x7F	; 127
   1c48a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c48c:	ce 01       	movw	r24, r28
   1c48e:	01 96       	adiw	r24, 0x01	; 1
   1c490:	0e 94 f6 32 	call	0x65ec	; 0x65ec <split_args>
   1c494:	8c 01       	movw	r16, r24
   1c496:	cf 57       	subi	r28, 0x7F	; 127
   1c498:	df 4f       	sbci	r29, 0xFF	; 255
   1c49a:	e8 80       	ld	r14, Y
   1c49c:	f9 80       	ldd	r15, Y+1	; 0x01
   1c49e:	c1 58       	subi	r28, 0x81	; 129
   1c4a0:	d0 40       	sbci	r29, 0x00	; 0
   1c4a2:	0f 90       	pop	r0
   1c4a4:	0f 90       	pop	r0
   1c4a6:	0f 90       	pop	r0
   1c4a8:	e1 14       	cp	r14, r1
   1c4aa:	f1 04       	cpc	r15, r1
   1c4ac:	09 f4       	brne	.+2      	; 0x1c4b0 <task+0x6c>
   1c4ae:	78 c0       	rjmp	.+240    	; 0x1c5a0 <task+0x15c>
   1c4b0:	9c 01       	movw	r18, r24
   1c4b2:	41 e0       	ldi	r20, 0x01	; 1
   1c4b4:	50 e0       	ldi	r21, 0x00	; 0
   1c4b6:	6c ee       	ldi	r22, 0xEC	; 236
   1c4b8:	76 e1       	ldi	r23, 0x16	; 22
   1c4ba:	c7 01       	movw	r24, r14
   1c4bc:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c4c0:	89 2b       	or	r24, r25
   1c4c2:	11 f0       	breq	.+4      	; 0x1c4c8 <task+0x84>
   1c4c4:	40 df       	rcall	.-384    	; 0x1c346 <delay_tests>
   1c4c6:	6c c0       	rjmp	.+216    	; 0x1c5a0 <task+0x15c>
   1c4c8:	98 01       	movw	r18, r16
   1c4ca:	41 e0       	ldi	r20, 0x01	; 1
   1c4cc:	50 e0       	ldi	r21, 0x00	; 0
   1c4ce:	68 ef       	ldi	r22, 0xF8	; 248
   1c4d0:	76 e1       	ldi	r23, 0x16	; 22
   1c4d2:	c7 01       	movw	r24, r14
   1c4d4:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c4d8:	89 2b       	or	r24, r25
   1c4da:	61 f4       	brne	.+24     	; 0x1c4f4 <task+0xb0>
   1c4dc:	98 01       	movw	r18, r16
   1c4de:	41 e0       	ldi	r20, 0x01	; 1
   1c4e0:	50 e0       	ldi	r21, 0x00	; 0
   1c4e2:	6d ef       	ldi	r22, 0xFD	; 253
   1c4e4:	76 e1       	ldi	r23, 0x16	; 22
   1c4e6:	c7 01       	movw	r24, r14
   1c4e8:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c4ec:	89 2b       	or	r24, r25
   1c4ee:	29 f0       	breq	.+10     	; 0x1c4fa <task+0xb6>
   1c4f0:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <setdate>
   1c4f4:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <display_clock>
   1c4f8:	53 c0       	rjmp	.+166    	; 0x1c5a0 <task+0x15c>
   1c4fa:	98 01       	movw	r18, r16
   1c4fc:	41 e0       	ldi	r20, 0x01	; 1
   1c4fe:	50 e0       	ldi	r21, 0x00	; 0
   1c500:	65 e0       	ldi	r22, 0x05	; 5
   1c502:	77 e1       	ldi	r23, 0x17	; 23
   1c504:	c7 01       	movw	r24, r14
   1c506:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c50a:	89 2b       	or	r24, r25
   1c50c:	19 f0       	breq	.+6      	; 0x1c514 <task+0xd0>
   1c50e:	0e 94 06 29 	call	0x520c	; 0x520c <PrintFree>
   1c512:	46 c0       	rjmp	.+140    	; 0x1c5a0 <task+0x15c>
   1c514:	98 01       	movw	r18, r16
   1c516:	41 e0       	ldi	r20, 0x01	; 1
   1c518:	50 e0       	ldi	r21, 0x00	; 0
   1c51a:	67 ef       	ldi	r22, 0xF7	; 247
   1c51c:	75 e1       	ldi	r23, 0x15	; 21
   1c51e:	c7 01       	movw	r24, r14
   1c520:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c524:	89 2b       	or	r24, r25
   1c526:	11 f0       	breq	.+4      	; 0x1c52c <task+0xe8>
   1c528:	71 df       	rcall	.-286    	; 0x1c40c <help>
   1c52a:	3a c0       	rjmp	.+116    	; 0x1c5a0 <task+0x15c>
   1c52c:	98 01       	movw	r18, r16
   1c52e:	41 e0       	ldi	r20, 0x01	; 1
   1c530:	50 e0       	ldi	r21, 0x00	; 0
   1c532:	6d ef       	ldi	r22, 0xFD	; 253
   1c534:	75 e1       	ldi	r23, 0x15	; 21
   1c536:	c7 01       	movw	r24, r14
   1c538:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1c53c:	89 2b       	or	r24, r25
   1c53e:	a1 f7       	brne	.-24     	; 0x1c528 <task+0xe4>
   1c540:	be 01       	movw	r22, r28
   1c542:	6f 57       	subi	r22, 0x7F	; 127
   1c544:	7f 4f       	sbci	r23, 0xFF	; 255
   1c546:	c8 01       	movw	r24, r16
   1c548:	0e 94 1d 91 	call	0x1223a	; 0x1223a <gpib_tests>
   1c54c:	89 2b       	or	r24, r25
   1c54e:	19 f0       	breq	.+6      	; 0x1c556 <task+0x112>
   1c550:	0e 94 6b 8c 	call	0x118d6	; 0x118d6 <gpib_init_devices>
   1c554:	25 c0       	rjmp	.+74     	; 0x1c5a0 <task+0x15c>
   1c556:	be 01       	movw	r22, r28
   1c558:	6f 57       	subi	r22, 0x7F	; 127
   1c55a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c55c:	c8 01       	movw	r24, r16
   1c55e:	0e 94 2c 82 	call	0x10458	; 0x10458 <posix_tests>
   1c562:	89 2b       	or	r24, r25
   1c564:	e9 f4       	brne	.+58     	; 0x1c5a0 <task+0x15c>
   1c566:	be 01       	movw	r22, r28
   1c568:	6f 57       	subi	r22, 0x7F	; 127
   1c56a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c56c:	c8 01       	movw	r24, r16
   1c56e:	0e 94 b6 74 	call	0xe96c	; 0xe96c <fatfs_tests>
   1c572:	89 2b       	or	r24, r25
   1c574:	a9 f4       	brne	.+42     	; 0x1c5a0 <task+0x15c>
   1c576:	be 01       	movw	r22, r28
   1c578:	6f 57       	subi	r22, 0x7F	; 127
   1c57a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c57c:	c8 01       	movw	r24, r16
   1c57e:	28 dd       	rcall	.-1456   	; 0x1bfd0 <lif_tests>
   1c580:	89 2b       	or	r24, r25
   1c582:	71 f4       	brne	.+28     	; 0x1c5a0 <task+0x15c>
   1c584:	ff 92       	push	r15
   1c586:	ef 92       	push	r14
   1c588:	8d e7       	ldi	r24, 0x7D	; 125
   1c58a:	97 e4       	ldi	r25, 0x47	; 71
   1c58c:	1f 92       	push	r1
   1c58e:	9f 93       	push	r25
   1c590:	8f 93       	push	r24
   1c592:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c596:	0f 90       	pop	r0
   1c598:	0f 90       	pop	r0
   1c59a:	0f 90       	pop	r0
   1c59c:	0f 90       	pop	r0
   1c59e:	0f 90       	pop	r0
   1c5a0:	cc 51       	subi	r28, 0x1C	; 28
   1c5a2:	df 4f       	sbci	r29, 0xFF	; 255
   1c5a4:	e6 e0       	ldi	r30, 0x06	; 6
   1c5a6:	89 c2       	rjmp	.+1298   	; 0x1caba <__epilogue_restores__+0x18>

0001c5a8 <main>:
   1c5a8:	a8 e0       	ldi	r26, 0x08	; 8
   1c5aa:	b0 e0       	ldi	r27, 0x00	; 0
   1c5ac:	e9 ed       	ldi	r30, 0xD9	; 217
   1c5ae:	f2 ee       	ldi	r31, 0xE2	; 226
   1c5b0:	67 c2       	rjmp	.+1230   	; 0x1ca80 <__prologue_saves__+0x16>
   1c5b2:	0e 94 96 85 	call	0x10b2c	; 0x10b2c <gpib_bus_init>
   1c5b6:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <init_timers>
   1c5ba:	40 e0       	ldi	r20, 0x00	; 0
   1c5bc:	52 ec       	ldi	r21, 0xC2	; 194
   1c5be:	61 e0       	ldi	r22, 0x01	; 1
   1c5c0:	70 e0       	ldi	r23, 0x00	; 0
   1c5c2:	80 e0       	ldi	r24, 0x00	; 0
   1c5c4:	0e 94 0b 2b 	call	0x5616	; 0x5616 <uart_init>
   1c5c8:	06 2f       	mov	r16, r22
   1c5ca:	f7 2e       	mov	r15, r23
   1c5cc:	e8 2e       	mov	r14, r24
   1c5ce:	d9 2e       	mov	r13, r25
   1c5d0:	68 ec       	ldi	r22, 0xC8	; 200
   1c5d2:	70 e0       	ldi	r23, 0x00	; 0
   1c5d4:	80 e0       	ldi	r24, 0x00	; 0
   1c5d6:	90 e0       	ldi	r25, 0x00	; 0
   1c5d8:	0e 94 29 2a 	call	0x5452	; 0x5452 <delayms>
   1c5dc:	0e 94 85 31 	call	0x630a	; 0x630a <sep>
   1c5e0:	86 e7       	ldi	r24, 0x76	; 118
   1c5e2:	97 e4       	ldi	r25, 0x47	; 71
   1c5e4:	1f 92       	push	r1
   1c5e6:	9f 93       	push	r25
   1c5e8:	8f 93       	push	r24
   1c5ea:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c5ee:	11 e0       	ldi	r17, 0x01	; 1
   1c5f0:	1f 93       	push	r17
   1c5f2:	81 e3       	ldi	r24, 0x31	; 49
   1c5f4:	8f 93       	push	r24
   1c5f6:	8d e2       	ldi	r24, 0x2D	; 45
   1c5f8:	8f 93       	push	r24
   1c5fa:	1f 92       	push	r1
   1c5fc:	85 e6       	ldi	r24, 0x65	; 101
   1c5fe:	97 e4       	ldi	r25, 0x47	; 71
   1c600:	1f 92       	push	r1
   1c602:	9f 93       	push	r25
   1c604:	8f 93       	push	r24
   1c606:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c60a:	df 92       	push	r13
   1c60c:	ef 92       	push	r14
   1c60e:	ff 92       	push	r15
   1c610:	0f 93       	push	r16
   1c612:	1f 92       	push	r1
   1c614:	1f 93       	push	r17
   1c616:	82 ec       	ldi	r24, 0xC2	; 194
   1c618:	8f 93       	push	r24
   1c61a:	1f 92       	push	r1
   1c61c:	8e e3       	ldi	r24, 0x3E	; 62
   1c61e:	97 e4       	ldi	r25, 0x47	; 71
   1c620:	1f 92       	push	r1
   1c622:	9f 93       	push	r25
   1c624:	8f 93       	push	r24
   1c626:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c62a:	0e 94 85 31 	call	0x630a	; 0x630a <sep>
   1c62e:	8f e1       	ldi	r24, 0x1F	; 31
   1c630:	97 e4       	ldi	r25, 0x47	; 71
   1c632:	1f 92       	push	r1
   1c634:	9f 93       	push	r25
   1c636:	8f 93       	push	r24
   1c638:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c63c:	82 e0       	ldi	r24, 0x02	; 2
   1c63e:	97 e4       	ldi	r25, 0x47	; 71
   1c640:	1f 92       	push	r1
   1c642:	9f 93       	push	r25
   1c644:	8f 93       	push	r24
   1c646:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c64a:	82 ef       	ldi	r24, 0xF2	; 242
   1c64c:	96 e4       	ldi	r25, 0x46	; 70
   1c64e:	1f 92       	push	r1
   1c650:	9f 93       	push	r25
   1c652:	8f 93       	push	r24
   1c654:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c658:	8b ec       	ldi	r24, 0xCB	; 203
   1c65a:	96 e4       	ldi	r25, 0x46	; 70
   1c65c:	1f 92       	push	r1
   1c65e:	9f 93       	push	r25
   1c660:	8f 93       	push	r24
   1c662:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c666:	0f b6       	in	r0, 0x3f	; 63
   1c668:	f8 94       	cli
   1c66a:	de bf       	out	0x3e, r29	; 62
   1c66c:	0f be       	out	0x3f, r0	; 63
   1c66e:	cd bf       	out	0x3d, r28	; 61
   1c670:	89 e3       	ldi	r24, 0x39	; 57
   1c672:	96 e1       	ldi	r25, 0x16	; 22
   1c674:	9f 93       	push	r25
   1c676:	8f 93       	push	r24
   1c678:	81 eb       	ldi	r24, 0xB1	; 177
   1c67a:	96 e4       	ldi	r25, 0x46	; 70
   1c67c:	1f 92       	push	r1
   1c67e:	9f 93       	push	r25
   1c680:	8f 93       	push	r24
   1c682:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c686:	8d e5       	ldi	r24, 0x5D	; 93
   1c688:	96 e1       	ldi	r25, 0x16	; 22
   1c68a:	9f 93       	push	r25
   1c68c:	8f 93       	push	r24
   1c68e:	87 e9       	ldi	r24, 0x97	; 151
   1c690:	96 e4       	ldi	r25, 0x46	; 70
   1c692:	1f 92       	push	r1
   1c694:	9f 93       	push	r25
   1c696:	8f 93       	push	r24
   1c698:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c69c:	0e 94 85 31 	call	0x630a	; 0x630a <sep>
   1c6a0:	0e 94 06 29 	call	0x520c	; 0x520c <PrintFree>
   1c6a4:	0e 94 85 31 	call	0x630a	; 0x630a <sep>
   1c6a8:	68 ec       	ldi	r22, 0xC8	; 200
   1c6aa:	70 e0       	ldi	r23, 0x00	; 0
   1c6ac:	80 e0       	ldi	r24, 0x00	; 0
   1c6ae:	90 e0       	ldi	r25, 0x00	; 0
   1c6b0:	0e 94 29 2a 	call	0x5452	; 0x5452 <delayms>
   1c6b4:	81 e8       	ldi	r24, 0x81	; 129
   1c6b6:	96 e4       	ldi	r25, 0x46	; 70
   1c6b8:	1f 92       	push	r1
   1c6ba:	9f 93       	push	r25
   1c6bc:	8f 93       	push	r24
   1c6be:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c6c2:	4b e0       	ldi	r20, 0x0B	; 11
   1c6c4:	50 e0       	ldi	r21, 0x00	; 0
   1c6c6:	60 e2       	ldi	r22, 0x20	; 32
   1c6c8:	71 ea       	ldi	r23, 0xA1	; 161
   1c6ca:	87 e0       	ldi	r24, 0x07	; 7
   1c6cc:	90 e0       	ldi	r25, 0x00	; 0
   1c6ce:	0e 94 82 28 	call	0x5104	; 0x5104 <spi_init>
   1c6d2:	8b e6       	ldi	r24, 0x6B	; 107
   1c6d4:	96 e4       	ldi	r25, 0x46	; 70
   1c6d6:	1f 92       	push	r1
   1c6d8:	9f 93       	push	r25
   1c6da:	8f 93       	push	r24
   1c6dc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c6e0:	61 e1       	ldi	r22, 0x11	; 17
   1c6e2:	81 e0       	ldi	r24, 0x01	; 1
   1c6e4:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <TWI_Init>
   1c6e8:	0e 94 85 31 	call	0x630a	; 0x630a <sep>
   1c6ec:	89 e5       	ldi	r24, 0x59	; 89
   1c6ee:	96 e4       	ldi	r25, 0x46	; 70
   1c6f0:	1f 92       	push	r1
   1c6f2:	9f 93       	push	r25
   1c6f4:	8f 93       	push	r24
   1c6f6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c6fa:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <clock_clear>
   1c6fe:	8a e4       	ldi	r24, 0x4A	; 74
   1c700:	96 e4       	ldi	r25, 0x46	; 70
   1c702:	1f 92       	push	r1
   1c704:	9f 93       	push	r25
   1c706:	8f 93       	push	r24
   1c708:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c70c:	be 01       	movw	r22, r28
   1c70e:	6f 5f       	subi	r22, 0xFF	; 255
   1c710:	7f 4f       	sbci	r23, 0xFF	; 255
   1c712:	80 e0       	ldi	r24, 0x00	; 0
   1c714:	90 e0       	ldi	r25, 0x00	; 0
   1c716:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <clock_getres>
   1c71a:	88 85       	ldd	r24, Y+8	; 0x08
   1c71c:	8f 93       	push	r24
   1c71e:	8f 81       	ldd	r24, Y+7	; 0x07
   1c720:	8f 93       	push	r24
   1c722:	8e 81       	ldd	r24, Y+6	; 0x06
   1c724:	8f 93       	push	r24
   1c726:	8d 81       	ldd	r24, Y+5	; 0x05
   1c728:	8f 93       	push	r24
   1c72a:	8d e2       	ldi	r24, 0x2D	; 45
   1c72c:	96 e4       	ldi	r25, 0x46	; 70
   1c72e:	1f 92       	push	r1
   1c730:	9f 93       	push	r25
   1c732:	8f 93       	push	r24
   1c734:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c738:	8c e2       	ldi	r24, 0x2C	; 44
   1c73a:	91 e0       	ldi	r25, 0x01	; 1
   1c73c:	0e 94 8e 3d 	call	0x7b1c	; 0x7b1c <initialize_clock>
   1c740:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <display_clock>
   1c744:	0e 94 85 31 	call	0x630a	; 0x630a <sep>
   1c748:	8f e0       	ldi	r24, 0x0F	; 15
   1c74a:	96 e4       	ldi	r25, 0x46	; 70
   1c74c:	1f 92       	push	r1
   1c74e:	9f 93       	push	r25
   1c750:	8f 93       	push	r24
   1c752:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c756:	0f b6       	in	r0, 0x3f	; 63
   1c758:	f8 94       	cli
   1c75a:	de bf       	out	0x3e, r29	; 62
   1c75c:	0f be       	out	0x3f, r0	; 63
   1c75e:	cd bf       	out	0x3d, r28	; 61
   1c760:	84 ee       	ldi	r24, 0xE4	; 228
   1c762:	0e 94 ae 30 	call	0x615c	; 0x615c <LCD_init>
   1c766:	89 2b       	or	r24, r25
   1c768:	e9 f0       	breq	.+58     	; 0x1c7a4 <main+0x1fc>
   1c76a:	60 e0       	ldi	r22, 0x00	; 0
   1c76c:	80 e0       	ldi	r24, 0x00	; 0
   1c76e:	0e 94 78 30 	call	0x60f0	; 0x60f0 <LCD_pos>
   1c772:	89 e0       	ldi	r24, 0x09	; 9
   1c774:	97 e1       	ldi	r25, 0x17	; 23
   1c776:	9f 93       	push	r25
   1c778:	8f 93       	push	r24
   1c77a:	0e 94 67 31 	call	0x62ce	; 0x62ce <lcd_printf>
   1c77e:	88 e1       	ldi	r24, 0x18	; 24
   1c780:	97 e1       	ldi	r25, 0x17	; 23
   1c782:	9f 93       	push	r25
   1c784:	8f 93       	push	r24
   1c786:	0e 94 67 31 	call	0x62ce	; 0x62ce <lcd_printf>
   1c78a:	82 ef       	ldi	r24, 0xF2	; 242
   1c78c:	95 e4       	ldi	r25, 0x45	; 69
   1c78e:	1f 92       	push	r1
   1c790:	9f 93       	push	r25
   1c792:	8f 93       	push	r24
   1c794:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c798:	0f b6       	in	r0, 0x3f	; 63
   1c79a:	f8 94       	cli
   1c79c:	de bf       	out	0x3e, r29	; 62
   1c79e:	0f be       	out	0x3f, r0	; 63
   1c7a0:	cd bf       	out	0x3d, r28	; 61
   1c7a2:	0a c0       	rjmp	.+20     	; 0x1c7b8 <main+0x210>
   1c7a4:	88 ed       	ldi	r24, 0xD8	; 216
   1c7a6:	95 e4       	ldi	r25, 0x45	; 69
   1c7a8:	1f 92       	push	r1
   1c7aa:	9f 93       	push	r25
   1c7ac:	8f 93       	push	r24
   1c7ae:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c7b2:	0f 90       	pop	r0
   1c7b4:	0f 90       	pop	r0
   1c7b6:	0f 90       	pop	r0
   1c7b8:	0e 94 85 31 	call	0x630a	; 0x630a <sep>
   1c7bc:	80 ec       	ldi	r24, 0xC0	; 192
   1c7be:	95 e4       	ldi	r25, 0x45	; 69
   1c7c0:	1f 92       	push	r1
   1c7c2:	9f 93       	push	r25
   1c7c4:	8f 93       	push	r24
   1c7c6:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c7ca:	81 e0       	ldi	r24, 0x01	; 1
   1c7cc:	90 e0       	ldi	r25, 0x00	; 0
   1c7ce:	0e 94 f6 6f 	call	0xdfec	; 0xdfec <mmc_init>
   1c7d2:	8f ea       	ldi	r24, 0xAF	; 175
   1c7d4:	95 e4       	ldi	r25, 0x45	; 69
   1c7d6:	1f 92       	push	r1
   1c7d8:	9f 93       	push	r25
   1c7da:	8f 93       	push	r24
   1c7dc:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c7e0:	0e 94 85 31 	call	0x630a	; 0x630a <sep>
   1c7e4:	0e 94 96 85 	call	0x10b2c	; 0x10b2c <gpib_bus_init>
   1c7e8:	89 e9       	ldi	r24, 0x99	; 153
   1c7ea:	95 e4       	ldi	r25, 0x45	; 69
   1c7ec:	1f 92       	push	r1
   1c7ee:	9f 93       	push	r25
   1c7f0:	8f 93       	push	r24
   1c7f2:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c7f6:	0e 94 ae bf 	call	0x17f5c	; 0x17f5c <printer_init>
   1c7fa:	84 e8       	ldi	r24, 0x84	; 132
   1c7fc:	95 e4       	ldi	r25, 0x45	; 69
   1c7fe:	1f 92       	push	r1
   1c800:	9f 93       	push	r25
   1c802:	8f 93       	push	r24
   1c804:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c808:	0e 94 85 31 	call	0x630a	; 0x630a <sep>
   1c80c:	82 e7       	ldi	r24, 0x72	; 114
   1c80e:	95 e4       	ldi	r25, 0x45	; 69
   1c810:	1f 92       	push	r1
   1c812:	9f 93       	push	r25
   1c814:	8f 93       	push	r24
   1c816:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c81a:	0e 94 a6 83 	call	0x1074c	; 0x1074c <gpib_timer_init>
   1c81e:	8a e5       	ldi	r24, 0x5A	; 90
   1c820:	95 e4       	ldi	r25, 0x45	; 69
   1c822:	1f 92       	push	r1
   1c824:	9f 93       	push	r25
   1c826:	8f 93       	push	r24
   1c828:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c82c:	0e 94 af 8b 	call	0x1175e	; 0x1175e <gpib_file_init>
   1c830:	85 e4       	ldi	r24, 0x45	; 69
   1c832:	95 e4       	ldi	r25, 0x45	; 69
   1c834:	1f 92       	push	r1
   1c836:	9f 93       	push	r25
   1c838:	8f 93       	push	r24
   1c83a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c83e:	0e 94 be 85 	call	0x10b7c	; 0x10b7c <gpib_state_init>
   1c842:	8f e2       	ldi	r24, 0x2F	; 47
   1c844:	95 e4       	ldi	r25, 0x45	; 69
   1c846:	1f 92       	push	r1
   1c848:	9f 93       	push	r25
   1c84a:	8f 93       	push	r24
   1c84c:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c850:	0e 94 85 31 	call	0x630a	; 0x630a <sep>
   1c854:	0e 94 49 a1 	call	0x14292	; 0x14292 <display_Config>
   1c858:	0e 94 2e a4 	call	0x1485c	; 0x1485c <format_drives>
   1c85c:	0e 94 85 31 	call	0x630a	; 0x630a <sep>
   1c860:	0e 94 4e a0 	call	0x1409c	; 0x1409c <display_Addresses>
   1c864:	0e 94 85 31 	call	0x630a	; 0x630a <sep>
   1c868:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <debuglevel+0x1>
   1c86c:	8f 93       	push	r24
   1c86e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1c872:	8f 93       	push	r24
   1c874:	89 e1       	ldi	r24, 0x19	; 25
   1c876:	95 e4       	ldi	r25, 0x45	; 69
   1c878:	1f 92       	push	r1
   1c87a:	9f 93       	push	r25
   1c87c:	8f 93       	push	r24
   1c87e:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c882:	60 e0       	ldi	r22, 0x00	; 0
   1c884:	80 e0       	ldi	r24, 0x00	; 0
   1c886:	0e 94 78 30 	call	0x60f0	; 0x60f0 <LCD_pos>
   1c88a:	83 e0       	ldi	r24, 0x03	; 3
   1c88c:	0e 94 57 92 	call	0x124ae	; 0x124ae <count_drive_types>
   1c890:	9f 93       	push	r25
   1c892:	8f 93       	push	r24
   1c894:	86 e2       	ldi	r24, 0x26	; 38
   1c896:	97 e1       	ldi	r25, 0x17	; 23
   1c898:	9f 93       	push	r25
   1c89a:	8f 93       	push	r24
   1c89c:	0e 94 67 31 	call	0x62ce	; 0x62ce <lcd_printf>
   1c8a0:	0f b6       	in	r0, 0x3f	; 63
   1c8a2:	f8 94       	cli
   1c8a4:	de bf       	out	0x3e, r29	; 62
   1c8a6:	0f be       	out	0x3f, r0	; 63
   1c8a8:	cd bf       	out	0x3d, r28	; 61
   1c8aa:	81 e0       	ldi	r24, 0x01	; 1
   1c8ac:	0e 94 57 92 	call	0x124ae	; 0x124ae <count_drive_types>
   1c8b0:	9f 93       	push	r25
   1c8b2:	8f 93       	push	r24
   1c8b4:	86 e3       	ldi	r24, 0x36	; 54
   1c8b6:	97 e1       	ldi	r25, 0x17	; 23
   1c8b8:	9f 93       	push	r25
   1c8ba:	8f 93       	push	r24
   1c8bc:	0e 94 67 31 	call	0x62ce	; 0x62ce <lcd_printf>
   1c8c0:	0e 94 85 31 	call	0x630a	; 0x630a <sep>
   1c8c4:	85 e0       	ldi	r24, 0x05	; 5
   1c8c6:	95 e4       	ldi	r25, 0x45	; 69
   1c8c8:	1f 92       	push	r1
   1c8ca:	9f 93       	push	r25
   1c8cc:	8f 93       	push	r24
   1c8ce:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <printf_P>
   1c8d2:	0f b6       	in	r0, 0x3f	; 63
   1c8d4:	f8 94       	cli
   1c8d6:	de bf       	out	0x3e, r29	; 62
   1c8d8:	0f be       	out	0x3f, r0	; 63
   1c8da:	cd bf       	out	0x3d, r28	; 61
   1c8dc:	81 e0       	ldi	r24, 0x01	; 1
   1c8de:	b2 dd       	rcall	.-1180   	; 0x1c444 <task>
   1c8e0:	fd cf       	rjmp	.-6      	; 0x1c8dc <main+0x334>

0001c8e2 <__mulsi3>:
   1c8e2:	db 01       	movw	r26, r22
   1c8e4:	8f 93       	push	r24
   1c8e6:	9f 93       	push	r25
   1c8e8:	a0 d0       	rcall	.+320    	; 0x1ca2a <__muluhisi3>
   1c8ea:	bf 91       	pop	r27
   1c8ec:	af 91       	pop	r26
   1c8ee:	a2 9f       	mul	r26, r18
   1c8f0:	80 0d       	add	r24, r0
   1c8f2:	91 1d       	adc	r25, r1
   1c8f4:	a3 9f       	mul	r26, r19
   1c8f6:	90 0d       	add	r25, r0
   1c8f8:	b2 9f       	mul	r27, r18
   1c8fa:	90 0d       	add	r25, r0
   1c8fc:	11 24       	eor	r1, r1
   1c8fe:	08 95       	ret

0001c900 <__udivmodqi4>:
   1c900:	99 1b       	sub	r25, r25
   1c902:	79 e0       	ldi	r23, 0x09	; 9
   1c904:	04 c0       	rjmp	.+8      	; 0x1c90e <__udivmodqi4_ep>

0001c906 <__udivmodqi4_loop>:
   1c906:	99 1f       	adc	r25, r25
   1c908:	96 17       	cp	r25, r22
   1c90a:	08 f0       	brcs	.+2      	; 0x1c90e <__udivmodqi4_ep>
   1c90c:	96 1b       	sub	r25, r22

0001c90e <__udivmodqi4_ep>:
   1c90e:	88 1f       	adc	r24, r24
   1c910:	7a 95       	dec	r23
   1c912:	c9 f7       	brne	.-14     	; 0x1c906 <__udivmodqi4_loop>
   1c914:	80 95       	com	r24
   1c916:	08 95       	ret

0001c918 <__udivmodhi4>:
   1c918:	aa 1b       	sub	r26, r26
   1c91a:	bb 1b       	sub	r27, r27
   1c91c:	51 e1       	ldi	r21, 0x11	; 17
   1c91e:	07 c0       	rjmp	.+14     	; 0x1c92e <__udivmodhi4_ep>

0001c920 <__udivmodhi4_loop>:
   1c920:	aa 1f       	adc	r26, r26
   1c922:	bb 1f       	adc	r27, r27
   1c924:	a6 17       	cp	r26, r22
   1c926:	b7 07       	cpc	r27, r23
   1c928:	10 f0       	brcs	.+4      	; 0x1c92e <__udivmodhi4_ep>
   1c92a:	a6 1b       	sub	r26, r22
   1c92c:	b7 0b       	sbc	r27, r23

0001c92e <__udivmodhi4_ep>:
   1c92e:	88 1f       	adc	r24, r24
   1c930:	99 1f       	adc	r25, r25
   1c932:	5a 95       	dec	r21
   1c934:	a9 f7       	brne	.-22     	; 0x1c920 <__udivmodhi4_loop>
   1c936:	80 95       	com	r24
   1c938:	90 95       	com	r25
   1c93a:	bc 01       	movw	r22, r24
   1c93c:	cd 01       	movw	r24, r26
   1c93e:	08 95       	ret

0001c940 <__divmodhi4>:
   1c940:	97 fb       	bst	r25, 7
   1c942:	07 2e       	mov	r0, r23
   1c944:	16 f4       	brtc	.+4      	; 0x1c94a <__divmodhi4+0xa>
   1c946:	00 94       	com	r0
   1c948:	06 d0       	rcall	.+12     	; 0x1c956 <__divmodhi4_neg1>
   1c94a:	77 fd       	sbrc	r23, 7
   1c94c:	08 d0       	rcall	.+16     	; 0x1c95e <__divmodhi4_neg2>
   1c94e:	e4 df       	rcall	.-56     	; 0x1c918 <__udivmodhi4>
   1c950:	07 fc       	sbrc	r0, 7
   1c952:	05 d0       	rcall	.+10     	; 0x1c95e <__divmodhi4_neg2>
   1c954:	3e f4       	brtc	.+14     	; 0x1c964 <__divmodhi4_exit>

0001c956 <__divmodhi4_neg1>:
   1c956:	90 95       	com	r25
   1c958:	81 95       	neg	r24
   1c95a:	9f 4f       	sbci	r25, 0xFF	; 255
   1c95c:	08 95       	ret

0001c95e <__divmodhi4_neg2>:
   1c95e:	70 95       	com	r23
   1c960:	61 95       	neg	r22
   1c962:	7f 4f       	sbci	r23, 0xFF	; 255

0001c964 <__divmodhi4_exit>:
   1c964:	08 95       	ret

0001c966 <__udivmodsi4>:
   1c966:	a1 e2       	ldi	r26, 0x21	; 33
   1c968:	1a 2e       	mov	r1, r26
   1c96a:	aa 1b       	sub	r26, r26
   1c96c:	bb 1b       	sub	r27, r27
   1c96e:	fd 01       	movw	r30, r26
   1c970:	0d c0       	rjmp	.+26     	; 0x1c98c <__udivmodsi4_ep>

0001c972 <__udivmodsi4_loop>:
   1c972:	aa 1f       	adc	r26, r26
   1c974:	bb 1f       	adc	r27, r27
   1c976:	ee 1f       	adc	r30, r30
   1c978:	ff 1f       	adc	r31, r31
   1c97a:	a2 17       	cp	r26, r18
   1c97c:	b3 07       	cpc	r27, r19
   1c97e:	e4 07       	cpc	r30, r20
   1c980:	f5 07       	cpc	r31, r21
   1c982:	20 f0       	brcs	.+8      	; 0x1c98c <__udivmodsi4_ep>
   1c984:	a2 1b       	sub	r26, r18
   1c986:	b3 0b       	sbc	r27, r19
   1c988:	e4 0b       	sbc	r30, r20
   1c98a:	f5 0b       	sbc	r31, r21

0001c98c <__udivmodsi4_ep>:
   1c98c:	66 1f       	adc	r22, r22
   1c98e:	77 1f       	adc	r23, r23
   1c990:	88 1f       	adc	r24, r24
   1c992:	99 1f       	adc	r25, r25
   1c994:	1a 94       	dec	r1
   1c996:	69 f7       	brne	.-38     	; 0x1c972 <__udivmodsi4_loop>
   1c998:	60 95       	com	r22
   1c99a:	70 95       	com	r23
   1c99c:	80 95       	com	r24
   1c99e:	90 95       	com	r25
   1c9a0:	9b 01       	movw	r18, r22
   1c9a2:	ac 01       	movw	r20, r24
   1c9a4:	bd 01       	movw	r22, r26
   1c9a6:	cf 01       	movw	r24, r30
   1c9a8:	08 95       	ret

0001c9aa <__divmodsi4>:
   1c9aa:	05 2e       	mov	r0, r21
   1c9ac:	97 fb       	bst	r25, 7
   1c9ae:	16 f4       	brtc	.+4      	; 0x1c9b4 <__divmodsi4+0xa>
   1c9b0:	00 94       	com	r0
   1c9b2:	0f d0       	rcall	.+30     	; 0x1c9d2 <__negsi2>
   1c9b4:	57 fd       	sbrc	r21, 7
   1c9b6:	05 d0       	rcall	.+10     	; 0x1c9c2 <__divmodsi4_neg2>
   1c9b8:	d6 df       	rcall	.-84     	; 0x1c966 <__udivmodsi4>
   1c9ba:	07 fc       	sbrc	r0, 7
   1c9bc:	02 d0       	rcall	.+4      	; 0x1c9c2 <__divmodsi4_neg2>
   1c9be:	46 f4       	brtc	.+16     	; 0x1c9d0 <__divmodsi4_exit>
   1c9c0:	08 c0       	rjmp	.+16     	; 0x1c9d2 <__negsi2>

0001c9c2 <__divmodsi4_neg2>:
   1c9c2:	50 95       	com	r21
   1c9c4:	40 95       	com	r20
   1c9c6:	30 95       	com	r19
   1c9c8:	21 95       	neg	r18
   1c9ca:	3f 4f       	sbci	r19, 0xFF	; 255
   1c9cc:	4f 4f       	sbci	r20, 0xFF	; 255
   1c9ce:	5f 4f       	sbci	r21, 0xFF	; 255

0001c9d0 <__divmodsi4_exit>:
   1c9d0:	08 95       	ret

0001c9d2 <__negsi2>:
   1c9d2:	90 95       	com	r25
   1c9d4:	80 95       	com	r24
   1c9d6:	70 95       	com	r23
   1c9d8:	61 95       	neg	r22
   1c9da:	7f 4f       	sbci	r23, 0xFF	; 255
   1c9dc:	8f 4f       	sbci	r24, 0xFF	; 255
   1c9de:	9f 4f       	sbci	r25, 0xFF	; 255
   1c9e0:	08 95       	ret

0001c9e2 <__tablejump2__>:
   1c9e2:	ee 0f       	add	r30, r30
   1c9e4:	ff 1f       	adc	r31, r31
   1c9e6:	00 24       	eor	r0, r0
   1c9e8:	00 1c       	adc	r0, r0
   1c9ea:	0b be       	out	0x3b, r0	; 59
   1c9ec:	07 90       	elpm	r0, Z+
   1c9ee:	f6 91       	elpm	r31, Z
   1c9f0:	e0 2d       	mov	r30, r0
   1c9f2:	09 94       	ijmp

0001c9f4 <__mulhisi3>:
   1c9f4:	05 d0       	rcall	.+10     	; 0x1ca00 <__umulhisi3>
   1c9f6:	33 23       	and	r19, r19
   1c9f8:	12 f4       	brpl	.+4      	; 0x1c9fe <__mulhisi3+0xa>
   1c9fa:	8a 1b       	sub	r24, r26
   1c9fc:	9b 0b       	sbc	r25, r27
   1c9fe:	10 c0       	rjmp	.+32     	; 0x1ca20 <__usmulhisi3_tail>

0001ca00 <__umulhisi3>:
   1ca00:	a2 9f       	mul	r26, r18
   1ca02:	b0 01       	movw	r22, r0
   1ca04:	b3 9f       	mul	r27, r19
   1ca06:	c0 01       	movw	r24, r0
   1ca08:	a3 9f       	mul	r26, r19
   1ca0a:	70 0d       	add	r23, r0
   1ca0c:	81 1d       	adc	r24, r1
   1ca0e:	11 24       	eor	r1, r1
   1ca10:	91 1d       	adc	r25, r1
   1ca12:	b2 9f       	mul	r27, r18
   1ca14:	70 0d       	add	r23, r0
   1ca16:	81 1d       	adc	r24, r1
   1ca18:	11 24       	eor	r1, r1
   1ca1a:	91 1d       	adc	r25, r1
   1ca1c:	08 95       	ret

0001ca1e <__usmulhisi3>:
   1ca1e:	f0 df       	rcall	.-32     	; 0x1ca00 <__umulhisi3>

0001ca20 <__usmulhisi3_tail>:
   1ca20:	b7 ff       	sbrs	r27, 7
   1ca22:	08 95       	ret
   1ca24:	82 1b       	sub	r24, r18
   1ca26:	93 0b       	sbc	r25, r19
   1ca28:	08 95       	ret

0001ca2a <__muluhisi3>:
   1ca2a:	ea df       	rcall	.-44     	; 0x1ca00 <__umulhisi3>
   1ca2c:	a5 9f       	mul	r26, r21
   1ca2e:	90 0d       	add	r25, r0
   1ca30:	b4 9f       	mul	r27, r20
   1ca32:	90 0d       	add	r25, r0
   1ca34:	a4 9f       	mul	r26, r20
   1ca36:	80 0d       	add	r24, r0
   1ca38:	91 1d       	adc	r25, r1
   1ca3a:	11 24       	eor	r1, r1
   1ca3c:	08 95       	ret

0001ca3e <__mulshisi3>:
   1ca3e:	b7 ff       	sbrs	r27, 7
   1ca40:	f4 cf       	rjmp	.-24     	; 0x1ca2a <__muluhisi3>

0001ca42 <__mulohisi3>:
   1ca42:	f3 df       	rcall	.-26     	; 0x1ca2a <__muluhisi3>
   1ca44:	82 1b       	sub	r24, r18
   1ca46:	93 0b       	sbc	r25, r19
   1ca48:	08 95       	ret

0001ca4a <__negdi2>:
   1ca4a:	60 95       	com	r22
   1ca4c:	70 95       	com	r23
   1ca4e:	80 95       	com	r24
   1ca50:	90 95       	com	r25
   1ca52:	30 95       	com	r19
   1ca54:	40 95       	com	r20
   1ca56:	50 95       	com	r21
   1ca58:	21 95       	neg	r18
   1ca5a:	3f 4f       	sbci	r19, 0xFF	; 255
   1ca5c:	4f 4f       	sbci	r20, 0xFF	; 255
   1ca5e:	5f 4f       	sbci	r21, 0xFF	; 255
   1ca60:	6f 4f       	sbci	r22, 0xFF	; 255
   1ca62:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca64:	8f 4f       	sbci	r24, 0xFF	; 255
   1ca66:	9f 4f       	sbci	r25, 0xFF	; 255
   1ca68:	08 95       	ret

0001ca6a <__prologue_saves__>:
   1ca6a:	2f 92       	push	r2
   1ca6c:	3f 92       	push	r3
   1ca6e:	4f 92       	push	r4
   1ca70:	5f 92       	push	r5
   1ca72:	6f 92       	push	r6
   1ca74:	7f 92       	push	r7
   1ca76:	8f 92       	push	r8
   1ca78:	9f 92       	push	r9
   1ca7a:	af 92       	push	r10
   1ca7c:	bf 92       	push	r11
   1ca7e:	cf 92       	push	r12
   1ca80:	df 92       	push	r13
   1ca82:	ef 92       	push	r14
   1ca84:	ff 92       	push	r15
   1ca86:	0f 93       	push	r16
   1ca88:	1f 93       	push	r17
   1ca8a:	cf 93       	push	r28
   1ca8c:	df 93       	push	r29
   1ca8e:	cd b7       	in	r28, 0x3d	; 61
   1ca90:	de b7       	in	r29, 0x3e	; 62
   1ca92:	ca 1b       	sub	r28, r26
   1ca94:	db 0b       	sbc	r29, r27
   1ca96:	0f b6       	in	r0, 0x3f	; 63
   1ca98:	f8 94       	cli
   1ca9a:	de bf       	out	0x3e, r29	; 62
   1ca9c:	0f be       	out	0x3f, r0	; 63
   1ca9e:	cd bf       	out	0x3d, r28	; 61
   1caa0:	09 94       	ijmp

0001caa2 <__epilogue_restores__>:
   1caa2:	2a 88       	ldd	r2, Y+18	; 0x12
   1caa4:	39 88       	ldd	r3, Y+17	; 0x11
   1caa6:	48 88       	ldd	r4, Y+16	; 0x10
   1caa8:	5f 84       	ldd	r5, Y+15	; 0x0f
   1caaa:	6e 84       	ldd	r6, Y+14	; 0x0e
   1caac:	7d 84       	ldd	r7, Y+13	; 0x0d
   1caae:	8c 84       	ldd	r8, Y+12	; 0x0c
   1cab0:	9b 84       	ldd	r9, Y+11	; 0x0b
   1cab2:	aa 84       	ldd	r10, Y+10	; 0x0a
   1cab4:	b9 84       	ldd	r11, Y+9	; 0x09
   1cab6:	c8 84       	ldd	r12, Y+8	; 0x08
   1cab8:	df 80       	ldd	r13, Y+7	; 0x07
   1caba:	ee 80       	ldd	r14, Y+6	; 0x06
   1cabc:	fd 80       	ldd	r15, Y+5	; 0x05
   1cabe:	0c 81       	ldd	r16, Y+4	; 0x04
   1cac0:	1b 81       	ldd	r17, Y+3	; 0x03
   1cac2:	aa 81       	ldd	r26, Y+2	; 0x02
   1cac4:	b9 81       	ldd	r27, Y+1	; 0x01
   1cac6:	ce 0f       	add	r28, r30
   1cac8:	d1 1d       	adc	r29, r1
   1caca:	0f b6       	in	r0, 0x3f	; 63
   1cacc:	f8 94       	cli
   1cace:	de bf       	out	0x3e, r29	; 62
   1cad0:	0f be       	out	0x3f, r0	; 63
   1cad2:	cd bf       	out	0x3d, r28	; 61
   1cad4:	ed 01       	movw	r28, r26
   1cad6:	08 95       	ret

0001cad8 <__xload_1>:
   1cad8:	57 fd       	sbrc	r21, 7
   1cada:	03 c0       	rjmp	.+6      	; 0x1cae2 <__xload_1+0xa>
   1cadc:	5b bf       	out	0x3b, r21	; 59
   1cade:	67 91       	elpm	r22, Z+
   1cae0:	08 95       	ret
   1cae2:	60 81       	ld	r22, Z
   1cae4:	08 95       	ret

0001cae6 <__cmpdi2_s8>:
   1cae6:	00 24       	eor	r0, r0
   1cae8:	a7 fd       	sbrc	r26, 7
   1caea:	00 94       	com	r0
   1caec:	2a 17       	cp	r18, r26
   1caee:	30 05       	cpc	r19, r0
   1caf0:	40 05       	cpc	r20, r0
   1caf2:	50 05       	cpc	r21, r0
   1caf4:	60 05       	cpc	r22, r0
   1caf6:	70 05       	cpc	r23, r0
   1caf8:	80 05       	cpc	r24, r0
   1cafa:	90 05       	cpc	r25, r0
   1cafc:	08 95       	ret

0001cafe <__subsf3>:
   1cafe:	50 58       	subi	r21, 0x80	; 128

0001cb00 <__addsf3>:
   1cb00:	bb 27       	eor	r27, r27
   1cb02:	aa 27       	eor	r26, r26
   1cb04:	0e d0       	rcall	.+28     	; 0x1cb22 <__addsf3x>
   1cb06:	75 c1       	rjmp	.+746    	; 0x1cdf2 <__fp_round>
   1cb08:	66 d1       	rcall	.+716    	; 0x1cdd6 <__fp_pscA>
   1cb0a:	30 f0       	brcs	.+12     	; 0x1cb18 <__addsf3+0x18>
   1cb0c:	6b d1       	rcall	.+726    	; 0x1cde4 <__fp_pscB>
   1cb0e:	20 f0       	brcs	.+8      	; 0x1cb18 <__addsf3+0x18>
   1cb10:	31 f4       	brne	.+12     	; 0x1cb1e <__addsf3+0x1e>
   1cb12:	9f 3f       	cpi	r25, 0xFF	; 255
   1cb14:	11 f4       	brne	.+4      	; 0x1cb1a <__addsf3+0x1a>
   1cb16:	1e f4       	brtc	.+6      	; 0x1cb1e <__addsf3+0x1e>
   1cb18:	5b c1       	rjmp	.+694    	; 0x1cdd0 <__fp_nan>
   1cb1a:	0e f4       	brtc	.+2      	; 0x1cb1e <__addsf3+0x1e>
   1cb1c:	e0 95       	com	r30
   1cb1e:	e7 fb       	bst	r30, 7
   1cb20:	51 c1       	rjmp	.+674    	; 0x1cdc4 <__fp_inf>

0001cb22 <__addsf3x>:
   1cb22:	e9 2f       	mov	r30, r25
   1cb24:	77 d1       	rcall	.+750    	; 0x1ce14 <__fp_split3>
   1cb26:	80 f3       	brcs	.-32     	; 0x1cb08 <__addsf3+0x8>
   1cb28:	ba 17       	cp	r27, r26
   1cb2a:	62 07       	cpc	r22, r18
   1cb2c:	73 07       	cpc	r23, r19
   1cb2e:	84 07       	cpc	r24, r20
   1cb30:	95 07       	cpc	r25, r21
   1cb32:	18 f0       	brcs	.+6      	; 0x1cb3a <__addsf3x+0x18>
   1cb34:	71 f4       	brne	.+28     	; 0x1cb52 <__addsf3x+0x30>
   1cb36:	9e f5       	brtc	.+102    	; 0x1cb9e <__addsf3x+0x7c>
   1cb38:	8f c1       	rjmp	.+798    	; 0x1ce58 <__fp_zero>
   1cb3a:	0e f4       	brtc	.+2      	; 0x1cb3e <__addsf3x+0x1c>
   1cb3c:	e0 95       	com	r30
   1cb3e:	0b 2e       	mov	r0, r27
   1cb40:	ba 2f       	mov	r27, r26
   1cb42:	a0 2d       	mov	r26, r0
   1cb44:	0b 01       	movw	r0, r22
   1cb46:	b9 01       	movw	r22, r18
   1cb48:	90 01       	movw	r18, r0
   1cb4a:	0c 01       	movw	r0, r24
   1cb4c:	ca 01       	movw	r24, r20
   1cb4e:	a0 01       	movw	r20, r0
   1cb50:	11 24       	eor	r1, r1
   1cb52:	ff 27       	eor	r31, r31
   1cb54:	59 1b       	sub	r21, r25
   1cb56:	99 f0       	breq	.+38     	; 0x1cb7e <__addsf3x+0x5c>
   1cb58:	59 3f       	cpi	r21, 0xF9	; 249
   1cb5a:	50 f4       	brcc	.+20     	; 0x1cb70 <__addsf3x+0x4e>
   1cb5c:	50 3e       	cpi	r21, 0xE0	; 224
   1cb5e:	68 f1       	brcs	.+90     	; 0x1cbba <__addsf3x+0x98>
   1cb60:	1a 16       	cp	r1, r26
   1cb62:	f0 40       	sbci	r31, 0x00	; 0
   1cb64:	a2 2f       	mov	r26, r18
   1cb66:	23 2f       	mov	r18, r19
   1cb68:	34 2f       	mov	r19, r20
   1cb6a:	44 27       	eor	r20, r20
   1cb6c:	58 5f       	subi	r21, 0xF8	; 248
   1cb6e:	f3 cf       	rjmp	.-26     	; 0x1cb56 <__addsf3x+0x34>
   1cb70:	46 95       	lsr	r20
   1cb72:	37 95       	ror	r19
   1cb74:	27 95       	ror	r18
   1cb76:	a7 95       	ror	r26
   1cb78:	f0 40       	sbci	r31, 0x00	; 0
   1cb7a:	53 95       	inc	r21
   1cb7c:	c9 f7       	brne	.-14     	; 0x1cb70 <__addsf3x+0x4e>
   1cb7e:	7e f4       	brtc	.+30     	; 0x1cb9e <__addsf3x+0x7c>
   1cb80:	1f 16       	cp	r1, r31
   1cb82:	ba 0b       	sbc	r27, r26
   1cb84:	62 0b       	sbc	r22, r18
   1cb86:	73 0b       	sbc	r23, r19
   1cb88:	84 0b       	sbc	r24, r20
   1cb8a:	ba f0       	brmi	.+46     	; 0x1cbba <__addsf3x+0x98>
   1cb8c:	91 50       	subi	r25, 0x01	; 1
   1cb8e:	a1 f0       	breq	.+40     	; 0x1cbb8 <__addsf3x+0x96>
   1cb90:	ff 0f       	add	r31, r31
   1cb92:	bb 1f       	adc	r27, r27
   1cb94:	66 1f       	adc	r22, r22
   1cb96:	77 1f       	adc	r23, r23
   1cb98:	88 1f       	adc	r24, r24
   1cb9a:	c2 f7       	brpl	.-16     	; 0x1cb8c <__addsf3x+0x6a>
   1cb9c:	0e c0       	rjmp	.+28     	; 0x1cbba <__addsf3x+0x98>
   1cb9e:	ba 0f       	add	r27, r26
   1cba0:	62 1f       	adc	r22, r18
   1cba2:	73 1f       	adc	r23, r19
   1cba4:	84 1f       	adc	r24, r20
   1cba6:	48 f4       	brcc	.+18     	; 0x1cbba <__addsf3x+0x98>
   1cba8:	87 95       	ror	r24
   1cbaa:	77 95       	ror	r23
   1cbac:	67 95       	ror	r22
   1cbae:	b7 95       	ror	r27
   1cbb0:	f7 95       	ror	r31
   1cbb2:	9e 3f       	cpi	r25, 0xFE	; 254
   1cbb4:	08 f0       	brcs	.+2      	; 0x1cbb8 <__addsf3x+0x96>
   1cbb6:	b3 cf       	rjmp	.-154    	; 0x1cb1e <__addsf3+0x1e>
   1cbb8:	93 95       	inc	r25
   1cbba:	88 0f       	add	r24, r24
   1cbbc:	08 f0       	brcs	.+2      	; 0x1cbc0 <__addsf3x+0x9e>
   1cbbe:	99 27       	eor	r25, r25
   1cbc0:	ee 0f       	add	r30, r30
   1cbc2:	97 95       	ror	r25
   1cbc4:	87 95       	ror	r24
   1cbc6:	08 95       	ret

0001cbc8 <__cmpsf2>:
   1cbc8:	d9 d0       	rcall	.+434    	; 0x1cd7c <__fp_cmp>
   1cbca:	08 f4       	brcc	.+2      	; 0x1cbce <__cmpsf2+0x6>
   1cbcc:	81 e0       	ldi	r24, 0x01	; 1
   1cbce:	08 95       	ret

0001cbd0 <__divsf3>:
   1cbd0:	0c d0       	rcall	.+24     	; 0x1cbea <__divsf3x>
   1cbd2:	0f c1       	rjmp	.+542    	; 0x1cdf2 <__fp_round>
   1cbd4:	07 d1       	rcall	.+526    	; 0x1cde4 <__fp_pscB>
   1cbd6:	40 f0       	brcs	.+16     	; 0x1cbe8 <__divsf3+0x18>
   1cbd8:	fe d0       	rcall	.+508    	; 0x1cdd6 <__fp_pscA>
   1cbda:	30 f0       	brcs	.+12     	; 0x1cbe8 <__divsf3+0x18>
   1cbdc:	21 f4       	brne	.+8      	; 0x1cbe6 <__divsf3+0x16>
   1cbde:	5f 3f       	cpi	r21, 0xFF	; 255
   1cbe0:	19 f0       	breq	.+6      	; 0x1cbe8 <__divsf3+0x18>
   1cbe2:	f0 c0       	rjmp	.+480    	; 0x1cdc4 <__fp_inf>
   1cbe4:	51 11       	cpse	r21, r1
   1cbe6:	39 c1       	rjmp	.+626    	; 0x1ce5a <__fp_szero>
   1cbe8:	f3 c0       	rjmp	.+486    	; 0x1cdd0 <__fp_nan>

0001cbea <__divsf3x>:
   1cbea:	14 d1       	rcall	.+552    	; 0x1ce14 <__fp_split3>
   1cbec:	98 f3       	brcs	.-26     	; 0x1cbd4 <__divsf3+0x4>

0001cbee <__divsf3_pse>:
   1cbee:	99 23       	and	r25, r25
   1cbf0:	c9 f3       	breq	.-14     	; 0x1cbe4 <__divsf3+0x14>
   1cbf2:	55 23       	and	r21, r21
   1cbf4:	b1 f3       	breq	.-20     	; 0x1cbe2 <__divsf3+0x12>
   1cbf6:	95 1b       	sub	r25, r21
   1cbf8:	55 0b       	sbc	r21, r21
   1cbfa:	bb 27       	eor	r27, r27
   1cbfc:	aa 27       	eor	r26, r26
   1cbfe:	62 17       	cp	r22, r18
   1cc00:	73 07       	cpc	r23, r19
   1cc02:	84 07       	cpc	r24, r20
   1cc04:	38 f0       	brcs	.+14     	; 0x1cc14 <__divsf3_pse+0x26>
   1cc06:	9f 5f       	subi	r25, 0xFF	; 255
   1cc08:	5f 4f       	sbci	r21, 0xFF	; 255
   1cc0a:	22 0f       	add	r18, r18
   1cc0c:	33 1f       	adc	r19, r19
   1cc0e:	44 1f       	adc	r20, r20
   1cc10:	aa 1f       	adc	r26, r26
   1cc12:	a9 f3       	breq	.-22     	; 0x1cbfe <__divsf3_pse+0x10>
   1cc14:	33 d0       	rcall	.+102    	; 0x1cc7c <__divsf3_pse+0x8e>
   1cc16:	0e 2e       	mov	r0, r30
   1cc18:	3a f0       	brmi	.+14     	; 0x1cc28 <__divsf3_pse+0x3a>
   1cc1a:	e0 e8       	ldi	r30, 0x80	; 128
   1cc1c:	30 d0       	rcall	.+96     	; 0x1cc7e <__divsf3_pse+0x90>
   1cc1e:	91 50       	subi	r25, 0x01	; 1
   1cc20:	50 40       	sbci	r21, 0x00	; 0
   1cc22:	e6 95       	lsr	r30
   1cc24:	00 1c       	adc	r0, r0
   1cc26:	ca f7       	brpl	.-14     	; 0x1cc1a <__divsf3_pse+0x2c>
   1cc28:	29 d0       	rcall	.+82     	; 0x1cc7c <__divsf3_pse+0x8e>
   1cc2a:	fe 2f       	mov	r31, r30
   1cc2c:	27 d0       	rcall	.+78     	; 0x1cc7c <__divsf3_pse+0x8e>
   1cc2e:	66 0f       	add	r22, r22
   1cc30:	77 1f       	adc	r23, r23
   1cc32:	88 1f       	adc	r24, r24
   1cc34:	bb 1f       	adc	r27, r27
   1cc36:	26 17       	cp	r18, r22
   1cc38:	37 07       	cpc	r19, r23
   1cc3a:	48 07       	cpc	r20, r24
   1cc3c:	ab 07       	cpc	r26, r27
   1cc3e:	b0 e8       	ldi	r27, 0x80	; 128
   1cc40:	09 f0       	breq	.+2      	; 0x1cc44 <__divsf3_pse+0x56>
   1cc42:	bb 0b       	sbc	r27, r27
   1cc44:	80 2d       	mov	r24, r0
   1cc46:	bf 01       	movw	r22, r30
   1cc48:	ff 27       	eor	r31, r31
   1cc4a:	93 58       	subi	r25, 0x83	; 131
   1cc4c:	5f 4f       	sbci	r21, 0xFF	; 255
   1cc4e:	2a f0       	brmi	.+10     	; 0x1cc5a <__divsf3_pse+0x6c>
   1cc50:	9e 3f       	cpi	r25, 0xFE	; 254
   1cc52:	51 05       	cpc	r21, r1
   1cc54:	68 f0       	brcs	.+26     	; 0x1cc70 <__divsf3_pse+0x82>
   1cc56:	b6 c0       	rjmp	.+364    	; 0x1cdc4 <__fp_inf>
   1cc58:	00 c1       	rjmp	.+512    	; 0x1ce5a <__fp_szero>
   1cc5a:	5f 3f       	cpi	r21, 0xFF	; 255
   1cc5c:	ec f3       	brlt	.-6      	; 0x1cc58 <__divsf3_pse+0x6a>
   1cc5e:	98 3e       	cpi	r25, 0xE8	; 232
   1cc60:	dc f3       	brlt	.-10     	; 0x1cc58 <__divsf3_pse+0x6a>
   1cc62:	86 95       	lsr	r24
   1cc64:	77 95       	ror	r23
   1cc66:	67 95       	ror	r22
   1cc68:	b7 95       	ror	r27
   1cc6a:	f7 95       	ror	r31
   1cc6c:	9f 5f       	subi	r25, 0xFF	; 255
   1cc6e:	c9 f7       	brne	.-14     	; 0x1cc62 <__divsf3_pse+0x74>
   1cc70:	88 0f       	add	r24, r24
   1cc72:	91 1d       	adc	r25, r1
   1cc74:	96 95       	lsr	r25
   1cc76:	87 95       	ror	r24
   1cc78:	97 f9       	bld	r25, 7
   1cc7a:	08 95       	ret
   1cc7c:	e1 e0       	ldi	r30, 0x01	; 1
   1cc7e:	66 0f       	add	r22, r22
   1cc80:	77 1f       	adc	r23, r23
   1cc82:	88 1f       	adc	r24, r24
   1cc84:	bb 1f       	adc	r27, r27
   1cc86:	62 17       	cp	r22, r18
   1cc88:	73 07       	cpc	r23, r19
   1cc8a:	84 07       	cpc	r24, r20
   1cc8c:	ba 07       	cpc	r27, r26
   1cc8e:	20 f0       	brcs	.+8      	; 0x1cc98 <__divsf3_pse+0xaa>
   1cc90:	62 1b       	sub	r22, r18
   1cc92:	73 0b       	sbc	r23, r19
   1cc94:	84 0b       	sbc	r24, r20
   1cc96:	ba 0b       	sbc	r27, r26
   1cc98:	ee 1f       	adc	r30, r30
   1cc9a:	88 f7       	brcc	.-30     	; 0x1cc7e <__divsf3_pse+0x90>
   1cc9c:	e0 95       	com	r30
   1cc9e:	08 95       	ret

0001cca0 <__fixsfsi>:
   1cca0:	04 d0       	rcall	.+8      	; 0x1ccaa <__fixunssfsi>
   1cca2:	68 94       	set
   1cca4:	b1 11       	cpse	r27, r1
   1cca6:	d9 c0       	rjmp	.+434    	; 0x1ce5a <__fp_szero>
   1cca8:	08 95       	ret

0001ccaa <__fixunssfsi>:
   1ccaa:	bc d0       	rcall	.+376    	; 0x1ce24 <__fp_splitA>
   1ccac:	88 f0       	brcs	.+34     	; 0x1ccd0 <__fixunssfsi+0x26>
   1ccae:	9f 57       	subi	r25, 0x7F	; 127
   1ccb0:	90 f0       	brcs	.+36     	; 0x1ccd6 <__fixunssfsi+0x2c>
   1ccb2:	b9 2f       	mov	r27, r25
   1ccb4:	99 27       	eor	r25, r25
   1ccb6:	b7 51       	subi	r27, 0x17	; 23
   1ccb8:	a0 f0       	brcs	.+40     	; 0x1cce2 <__fixunssfsi+0x38>
   1ccba:	d1 f0       	breq	.+52     	; 0x1ccf0 <__fixunssfsi+0x46>
   1ccbc:	66 0f       	add	r22, r22
   1ccbe:	77 1f       	adc	r23, r23
   1ccc0:	88 1f       	adc	r24, r24
   1ccc2:	99 1f       	adc	r25, r25
   1ccc4:	1a f0       	brmi	.+6      	; 0x1cccc <__fixunssfsi+0x22>
   1ccc6:	ba 95       	dec	r27
   1ccc8:	c9 f7       	brne	.-14     	; 0x1ccbc <__fixunssfsi+0x12>
   1ccca:	12 c0       	rjmp	.+36     	; 0x1ccf0 <__fixunssfsi+0x46>
   1cccc:	b1 30       	cpi	r27, 0x01	; 1
   1ccce:	81 f0       	breq	.+32     	; 0x1ccf0 <__fixunssfsi+0x46>
   1ccd0:	c3 d0       	rcall	.+390    	; 0x1ce58 <__fp_zero>
   1ccd2:	b1 e0       	ldi	r27, 0x01	; 1
   1ccd4:	08 95       	ret
   1ccd6:	c0 c0       	rjmp	.+384    	; 0x1ce58 <__fp_zero>
   1ccd8:	67 2f       	mov	r22, r23
   1ccda:	78 2f       	mov	r23, r24
   1ccdc:	88 27       	eor	r24, r24
   1ccde:	b8 5f       	subi	r27, 0xF8	; 248
   1cce0:	39 f0       	breq	.+14     	; 0x1ccf0 <__fixunssfsi+0x46>
   1cce2:	b9 3f       	cpi	r27, 0xF9	; 249
   1cce4:	cc f3       	brlt	.-14     	; 0x1ccd8 <__fixunssfsi+0x2e>
   1cce6:	86 95       	lsr	r24
   1cce8:	77 95       	ror	r23
   1ccea:	67 95       	ror	r22
   1ccec:	b3 95       	inc	r27
   1ccee:	d9 f7       	brne	.-10     	; 0x1cce6 <__fixunssfsi+0x3c>
   1ccf0:	3e f4       	brtc	.+14     	; 0x1cd00 <__fixunssfsi+0x56>
   1ccf2:	90 95       	com	r25
   1ccf4:	80 95       	com	r24
   1ccf6:	70 95       	com	r23
   1ccf8:	61 95       	neg	r22
   1ccfa:	7f 4f       	sbci	r23, 0xFF	; 255
   1ccfc:	8f 4f       	sbci	r24, 0xFF	; 255
   1ccfe:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd00:	08 95       	ret

0001cd02 <__floatunsisf>:
   1cd02:	e8 94       	clt
   1cd04:	09 c0       	rjmp	.+18     	; 0x1cd18 <__floatsisf+0x12>

0001cd06 <__floatsisf>:
   1cd06:	97 fb       	bst	r25, 7
   1cd08:	3e f4       	brtc	.+14     	; 0x1cd18 <__floatsisf+0x12>
   1cd0a:	90 95       	com	r25
   1cd0c:	80 95       	com	r24
   1cd0e:	70 95       	com	r23
   1cd10:	61 95       	neg	r22
   1cd12:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd14:	8f 4f       	sbci	r24, 0xFF	; 255
   1cd16:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd18:	99 23       	and	r25, r25
   1cd1a:	a9 f0       	breq	.+42     	; 0x1cd46 <__floatsisf+0x40>
   1cd1c:	f9 2f       	mov	r31, r25
   1cd1e:	96 e9       	ldi	r25, 0x96	; 150
   1cd20:	bb 27       	eor	r27, r27
   1cd22:	93 95       	inc	r25
   1cd24:	f6 95       	lsr	r31
   1cd26:	87 95       	ror	r24
   1cd28:	77 95       	ror	r23
   1cd2a:	67 95       	ror	r22
   1cd2c:	b7 95       	ror	r27
   1cd2e:	f1 11       	cpse	r31, r1
   1cd30:	f8 cf       	rjmp	.-16     	; 0x1cd22 <__floatsisf+0x1c>
   1cd32:	fa f4       	brpl	.+62     	; 0x1cd72 <__floatsisf+0x6c>
   1cd34:	bb 0f       	add	r27, r27
   1cd36:	11 f4       	brne	.+4      	; 0x1cd3c <__floatsisf+0x36>
   1cd38:	60 ff       	sbrs	r22, 0
   1cd3a:	1b c0       	rjmp	.+54     	; 0x1cd72 <__floatsisf+0x6c>
   1cd3c:	6f 5f       	subi	r22, 0xFF	; 255
   1cd3e:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd40:	8f 4f       	sbci	r24, 0xFF	; 255
   1cd42:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd44:	16 c0       	rjmp	.+44     	; 0x1cd72 <__floatsisf+0x6c>
   1cd46:	88 23       	and	r24, r24
   1cd48:	11 f0       	breq	.+4      	; 0x1cd4e <__floatsisf+0x48>
   1cd4a:	96 e9       	ldi	r25, 0x96	; 150
   1cd4c:	11 c0       	rjmp	.+34     	; 0x1cd70 <__floatsisf+0x6a>
   1cd4e:	77 23       	and	r23, r23
   1cd50:	21 f0       	breq	.+8      	; 0x1cd5a <__floatsisf+0x54>
   1cd52:	9e e8       	ldi	r25, 0x8E	; 142
   1cd54:	87 2f       	mov	r24, r23
   1cd56:	76 2f       	mov	r23, r22
   1cd58:	05 c0       	rjmp	.+10     	; 0x1cd64 <__floatsisf+0x5e>
   1cd5a:	66 23       	and	r22, r22
   1cd5c:	71 f0       	breq	.+28     	; 0x1cd7a <__floatsisf+0x74>
   1cd5e:	96 e8       	ldi	r25, 0x86	; 134
   1cd60:	86 2f       	mov	r24, r22
   1cd62:	70 e0       	ldi	r23, 0x00	; 0
   1cd64:	60 e0       	ldi	r22, 0x00	; 0
   1cd66:	2a f0       	brmi	.+10     	; 0x1cd72 <__floatsisf+0x6c>
   1cd68:	9a 95       	dec	r25
   1cd6a:	66 0f       	add	r22, r22
   1cd6c:	77 1f       	adc	r23, r23
   1cd6e:	88 1f       	adc	r24, r24
   1cd70:	da f7       	brpl	.-10     	; 0x1cd68 <__floatsisf+0x62>
   1cd72:	88 0f       	add	r24, r24
   1cd74:	96 95       	lsr	r25
   1cd76:	87 95       	ror	r24
   1cd78:	97 f9       	bld	r25, 7
   1cd7a:	08 95       	ret

0001cd7c <__fp_cmp>:
   1cd7c:	99 0f       	add	r25, r25
   1cd7e:	00 08       	sbc	r0, r0
   1cd80:	55 0f       	add	r21, r21
   1cd82:	aa 0b       	sbc	r26, r26
   1cd84:	e0 e8       	ldi	r30, 0x80	; 128
   1cd86:	fe ef       	ldi	r31, 0xFE	; 254
   1cd88:	16 16       	cp	r1, r22
   1cd8a:	17 06       	cpc	r1, r23
   1cd8c:	e8 07       	cpc	r30, r24
   1cd8e:	f9 07       	cpc	r31, r25
   1cd90:	c0 f0       	brcs	.+48     	; 0x1cdc2 <__fp_cmp+0x46>
   1cd92:	12 16       	cp	r1, r18
   1cd94:	13 06       	cpc	r1, r19
   1cd96:	e4 07       	cpc	r30, r20
   1cd98:	f5 07       	cpc	r31, r21
   1cd9a:	98 f0       	brcs	.+38     	; 0x1cdc2 <__fp_cmp+0x46>
   1cd9c:	62 1b       	sub	r22, r18
   1cd9e:	73 0b       	sbc	r23, r19
   1cda0:	84 0b       	sbc	r24, r20
   1cda2:	95 0b       	sbc	r25, r21
   1cda4:	39 f4       	brne	.+14     	; 0x1cdb4 <__fp_cmp+0x38>
   1cda6:	0a 26       	eor	r0, r26
   1cda8:	61 f0       	breq	.+24     	; 0x1cdc2 <__fp_cmp+0x46>
   1cdaa:	23 2b       	or	r18, r19
   1cdac:	24 2b       	or	r18, r20
   1cdae:	25 2b       	or	r18, r21
   1cdb0:	21 f4       	brne	.+8      	; 0x1cdba <__fp_cmp+0x3e>
   1cdb2:	08 95       	ret
   1cdb4:	0a 26       	eor	r0, r26
   1cdb6:	09 f4       	brne	.+2      	; 0x1cdba <__fp_cmp+0x3e>
   1cdb8:	a1 40       	sbci	r26, 0x01	; 1
   1cdba:	a6 95       	lsr	r26
   1cdbc:	8f ef       	ldi	r24, 0xFF	; 255
   1cdbe:	81 1d       	adc	r24, r1
   1cdc0:	81 1d       	adc	r24, r1
   1cdc2:	08 95       	ret

0001cdc4 <__fp_inf>:
   1cdc4:	97 f9       	bld	r25, 7
   1cdc6:	9f 67       	ori	r25, 0x7F	; 127
   1cdc8:	80 e8       	ldi	r24, 0x80	; 128
   1cdca:	70 e0       	ldi	r23, 0x00	; 0
   1cdcc:	60 e0       	ldi	r22, 0x00	; 0
   1cdce:	08 95       	ret

0001cdd0 <__fp_nan>:
   1cdd0:	9f ef       	ldi	r25, 0xFF	; 255
   1cdd2:	80 ec       	ldi	r24, 0xC0	; 192
   1cdd4:	08 95       	ret

0001cdd6 <__fp_pscA>:
   1cdd6:	00 24       	eor	r0, r0
   1cdd8:	0a 94       	dec	r0
   1cdda:	16 16       	cp	r1, r22
   1cddc:	17 06       	cpc	r1, r23
   1cdde:	18 06       	cpc	r1, r24
   1cde0:	09 06       	cpc	r0, r25
   1cde2:	08 95       	ret

0001cde4 <__fp_pscB>:
   1cde4:	00 24       	eor	r0, r0
   1cde6:	0a 94       	dec	r0
   1cde8:	12 16       	cp	r1, r18
   1cdea:	13 06       	cpc	r1, r19
   1cdec:	14 06       	cpc	r1, r20
   1cdee:	05 06       	cpc	r0, r21
   1cdf0:	08 95       	ret

0001cdf2 <__fp_round>:
   1cdf2:	09 2e       	mov	r0, r25
   1cdf4:	03 94       	inc	r0
   1cdf6:	00 0c       	add	r0, r0
   1cdf8:	11 f4       	brne	.+4      	; 0x1cdfe <__fp_round+0xc>
   1cdfa:	88 23       	and	r24, r24
   1cdfc:	52 f0       	brmi	.+20     	; 0x1ce12 <__fp_round+0x20>
   1cdfe:	bb 0f       	add	r27, r27
   1ce00:	40 f4       	brcc	.+16     	; 0x1ce12 <__fp_round+0x20>
   1ce02:	bf 2b       	or	r27, r31
   1ce04:	11 f4       	brne	.+4      	; 0x1ce0a <__fp_round+0x18>
   1ce06:	60 ff       	sbrs	r22, 0
   1ce08:	04 c0       	rjmp	.+8      	; 0x1ce12 <__fp_round+0x20>
   1ce0a:	6f 5f       	subi	r22, 0xFF	; 255
   1ce0c:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce0e:	8f 4f       	sbci	r24, 0xFF	; 255
   1ce10:	9f 4f       	sbci	r25, 0xFF	; 255
   1ce12:	08 95       	ret

0001ce14 <__fp_split3>:
   1ce14:	57 fd       	sbrc	r21, 7
   1ce16:	90 58       	subi	r25, 0x80	; 128
   1ce18:	44 0f       	add	r20, r20
   1ce1a:	55 1f       	adc	r21, r21
   1ce1c:	59 f0       	breq	.+22     	; 0x1ce34 <__fp_splitA+0x10>
   1ce1e:	5f 3f       	cpi	r21, 0xFF	; 255
   1ce20:	71 f0       	breq	.+28     	; 0x1ce3e <__fp_splitA+0x1a>
   1ce22:	47 95       	ror	r20

0001ce24 <__fp_splitA>:
   1ce24:	88 0f       	add	r24, r24
   1ce26:	97 fb       	bst	r25, 7
   1ce28:	99 1f       	adc	r25, r25
   1ce2a:	61 f0       	breq	.+24     	; 0x1ce44 <__fp_splitA+0x20>
   1ce2c:	9f 3f       	cpi	r25, 0xFF	; 255
   1ce2e:	79 f0       	breq	.+30     	; 0x1ce4e <__fp_splitA+0x2a>
   1ce30:	87 95       	ror	r24
   1ce32:	08 95       	ret
   1ce34:	12 16       	cp	r1, r18
   1ce36:	13 06       	cpc	r1, r19
   1ce38:	14 06       	cpc	r1, r20
   1ce3a:	55 1f       	adc	r21, r21
   1ce3c:	f2 cf       	rjmp	.-28     	; 0x1ce22 <__fp_split3+0xe>
   1ce3e:	46 95       	lsr	r20
   1ce40:	f1 df       	rcall	.-30     	; 0x1ce24 <__fp_splitA>
   1ce42:	08 c0       	rjmp	.+16     	; 0x1ce54 <__fp_splitA+0x30>
   1ce44:	16 16       	cp	r1, r22
   1ce46:	17 06       	cpc	r1, r23
   1ce48:	18 06       	cpc	r1, r24
   1ce4a:	99 1f       	adc	r25, r25
   1ce4c:	f1 cf       	rjmp	.-30     	; 0x1ce30 <__fp_splitA+0xc>
   1ce4e:	86 95       	lsr	r24
   1ce50:	71 05       	cpc	r23, r1
   1ce52:	61 05       	cpc	r22, r1
   1ce54:	08 94       	sec
   1ce56:	08 95       	ret

0001ce58 <__fp_zero>:
   1ce58:	e8 94       	clt

0001ce5a <__fp_szero>:
   1ce5a:	bb 27       	eor	r27, r27
   1ce5c:	66 27       	eor	r22, r22
   1ce5e:	77 27       	eor	r23, r23
   1ce60:	cb 01       	movw	r24, r22
   1ce62:	97 f9       	bld	r25, 7
   1ce64:	08 95       	ret

0001ce66 <__gesf2>:
   1ce66:	8a df       	rcall	.-236    	; 0x1cd7c <__fp_cmp>
   1ce68:	08 f4       	brcc	.+2      	; 0x1ce6c <__gesf2+0x6>
   1ce6a:	8f ef       	ldi	r24, 0xFF	; 255
   1ce6c:	08 95       	ret

0001ce6e <__mulsf3>:
   1ce6e:	0b d0       	rcall	.+22     	; 0x1ce86 <__mulsf3x>
   1ce70:	c0 cf       	rjmp	.-128    	; 0x1cdf2 <__fp_round>
   1ce72:	b1 df       	rcall	.-158    	; 0x1cdd6 <__fp_pscA>
   1ce74:	28 f0       	brcs	.+10     	; 0x1ce80 <__mulsf3+0x12>
   1ce76:	b6 df       	rcall	.-148    	; 0x1cde4 <__fp_pscB>
   1ce78:	18 f0       	brcs	.+6      	; 0x1ce80 <__mulsf3+0x12>
   1ce7a:	95 23       	and	r25, r21
   1ce7c:	09 f0       	breq	.+2      	; 0x1ce80 <__mulsf3+0x12>
   1ce7e:	a2 cf       	rjmp	.-188    	; 0x1cdc4 <__fp_inf>
   1ce80:	a7 cf       	rjmp	.-178    	; 0x1cdd0 <__fp_nan>
   1ce82:	11 24       	eor	r1, r1
   1ce84:	ea cf       	rjmp	.-44     	; 0x1ce5a <__fp_szero>

0001ce86 <__mulsf3x>:
   1ce86:	c6 df       	rcall	.-116    	; 0x1ce14 <__fp_split3>
   1ce88:	a0 f3       	brcs	.-24     	; 0x1ce72 <__mulsf3+0x4>

0001ce8a <__mulsf3_pse>:
   1ce8a:	95 9f       	mul	r25, r21
   1ce8c:	d1 f3       	breq	.-12     	; 0x1ce82 <__mulsf3+0x14>
   1ce8e:	95 0f       	add	r25, r21
   1ce90:	50 e0       	ldi	r21, 0x00	; 0
   1ce92:	55 1f       	adc	r21, r21
   1ce94:	62 9f       	mul	r22, r18
   1ce96:	f0 01       	movw	r30, r0
   1ce98:	72 9f       	mul	r23, r18
   1ce9a:	bb 27       	eor	r27, r27
   1ce9c:	f0 0d       	add	r31, r0
   1ce9e:	b1 1d       	adc	r27, r1
   1cea0:	63 9f       	mul	r22, r19
   1cea2:	aa 27       	eor	r26, r26
   1cea4:	f0 0d       	add	r31, r0
   1cea6:	b1 1d       	adc	r27, r1
   1cea8:	aa 1f       	adc	r26, r26
   1ceaa:	64 9f       	mul	r22, r20
   1ceac:	66 27       	eor	r22, r22
   1ceae:	b0 0d       	add	r27, r0
   1ceb0:	a1 1d       	adc	r26, r1
   1ceb2:	66 1f       	adc	r22, r22
   1ceb4:	82 9f       	mul	r24, r18
   1ceb6:	22 27       	eor	r18, r18
   1ceb8:	b0 0d       	add	r27, r0
   1ceba:	a1 1d       	adc	r26, r1
   1cebc:	62 1f       	adc	r22, r18
   1cebe:	73 9f       	mul	r23, r19
   1cec0:	b0 0d       	add	r27, r0
   1cec2:	a1 1d       	adc	r26, r1
   1cec4:	62 1f       	adc	r22, r18
   1cec6:	83 9f       	mul	r24, r19
   1cec8:	a0 0d       	add	r26, r0
   1ceca:	61 1d       	adc	r22, r1
   1cecc:	22 1f       	adc	r18, r18
   1cece:	74 9f       	mul	r23, r20
   1ced0:	33 27       	eor	r19, r19
   1ced2:	a0 0d       	add	r26, r0
   1ced4:	61 1d       	adc	r22, r1
   1ced6:	23 1f       	adc	r18, r19
   1ced8:	84 9f       	mul	r24, r20
   1ceda:	60 0d       	add	r22, r0
   1cedc:	21 1d       	adc	r18, r1
   1cede:	82 2f       	mov	r24, r18
   1cee0:	76 2f       	mov	r23, r22
   1cee2:	6a 2f       	mov	r22, r26
   1cee4:	11 24       	eor	r1, r1
   1cee6:	9f 57       	subi	r25, 0x7F	; 127
   1cee8:	50 40       	sbci	r21, 0x00	; 0
   1ceea:	8a f0       	brmi	.+34     	; 0x1cf0e <__mulsf3_pse+0x84>
   1ceec:	e1 f0       	breq	.+56     	; 0x1cf26 <__mulsf3_pse+0x9c>
   1ceee:	88 23       	and	r24, r24
   1cef0:	4a f0       	brmi	.+18     	; 0x1cf04 <__mulsf3_pse+0x7a>
   1cef2:	ee 0f       	add	r30, r30
   1cef4:	ff 1f       	adc	r31, r31
   1cef6:	bb 1f       	adc	r27, r27
   1cef8:	66 1f       	adc	r22, r22
   1cefa:	77 1f       	adc	r23, r23
   1cefc:	88 1f       	adc	r24, r24
   1cefe:	91 50       	subi	r25, 0x01	; 1
   1cf00:	50 40       	sbci	r21, 0x00	; 0
   1cf02:	a9 f7       	brne	.-22     	; 0x1ceee <__mulsf3_pse+0x64>
   1cf04:	9e 3f       	cpi	r25, 0xFE	; 254
   1cf06:	51 05       	cpc	r21, r1
   1cf08:	70 f0       	brcs	.+28     	; 0x1cf26 <__mulsf3_pse+0x9c>
   1cf0a:	5c cf       	rjmp	.-328    	; 0x1cdc4 <__fp_inf>
   1cf0c:	a6 cf       	rjmp	.-180    	; 0x1ce5a <__fp_szero>
   1cf0e:	5f 3f       	cpi	r21, 0xFF	; 255
   1cf10:	ec f3       	brlt	.-6      	; 0x1cf0c <__mulsf3_pse+0x82>
   1cf12:	98 3e       	cpi	r25, 0xE8	; 232
   1cf14:	dc f3       	brlt	.-10     	; 0x1cf0c <__mulsf3_pse+0x82>
   1cf16:	86 95       	lsr	r24
   1cf18:	77 95       	ror	r23
   1cf1a:	67 95       	ror	r22
   1cf1c:	b7 95       	ror	r27
   1cf1e:	f7 95       	ror	r31
   1cf20:	e7 95       	ror	r30
   1cf22:	9f 5f       	subi	r25, 0xFF	; 255
   1cf24:	c1 f7       	brne	.-16     	; 0x1cf16 <__mulsf3_pse+0x8c>
   1cf26:	fe 2b       	or	r31, r30
   1cf28:	88 0f       	add	r24, r24
   1cf2a:	91 1d       	adc	r25, r1
   1cf2c:	96 95       	lsr	r25
   1cf2e:	87 95       	ror	r24
   1cf30:	97 f9       	bld	r25, 7
   1cf32:	08 95       	ret

0001cf34 <round>:
   1cf34:	77 df       	rcall	.-274    	; 0x1ce24 <__fp_splitA>
   1cf36:	e0 f0       	brcs	.+56     	; 0x1cf70 <round+0x3c>
   1cf38:	9e 37       	cpi	r25, 0x7E	; 126
   1cf3a:	d8 f0       	brcs	.+54     	; 0x1cf72 <round+0x3e>
   1cf3c:	96 39       	cpi	r25, 0x96	; 150
   1cf3e:	b8 f4       	brcc	.+46     	; 0x1cf6e <round+0x3a>
   1cf40:	9e 38       	cpi	r25, 0x8E	; 142
   1cf42:	48 f4       	brcc	.+18     	; 0x1cf56 <round+0x22>
   1cf44:	67 2f       	mov	r22, r23
   1cf46:	78 2f       	mov	r23, r24
   1cf48:	88 27       	eor	r24, r24
   1cf4a:	98 5f       	subi	r25, 0xF8	; 248
   1cf4c:	f9 cf       	rjmp	.-14     	; 0x1cf40 <round+0xc>
   1cf4e:	86 95       	lsr	r24
   1cf50:	77 95       	ror	r23
   1cf52:	67 95       	ror	r22
   1cf54:	93 95       	inc	r25
   1cf56:	95 39       	cpi	r25, 0x95	; 149
   1cf58:	d0 f3       	brcs	.-12     	; 0x1cf4e <round+0x1a>
   1cf5a:	b6 2f       	mov	r27, r22
   1cf5c:	b1 70       	andi	r27, 0x01	; 1
   1cf5e:	6b 0f       	add	r22, r27
   1cf60:	71 1d       	adc	r23, r1
   1cf62:	81 1d       	adc	r24, r1
   1cf64:	20 f4       	brcc	.+8      	; 0x1cf6e <round+0x3a>
   1cf66:	87 95       	ror	r24
   1cf68:	77 95       	ror	r23
   1cf6a:	67 95       	ror	r22
   1cf6c:	93 95       	inc	r25
   1cf6e:	02 c0       	rjmp	.+4      	; 0x1cf74 <__fp_mintl>
   1cf70:	1c c0       	rjmp	.+56     	; 0x1cfaa <__fp_mpack>
   1cf72:	73 cf       	rjmp	.-282    	; 0x1ce5a <__fp_szero>

0001cf74 <__fp_mintl>:
   1cf74:	88 23       	and	r24, r24
   1cf76:	71 f4       	brne	.+28     	; 0x1cf94 <__fp_mintl+0x20>
   1cf78:	77 23       	and	r23, r23
   1cf7a:	21 f0       	breq	.+8      	; 0x1cf84 <__fp_mintl+0x10>
   1cf7c:	98 50       	subi	r25, 0x08	; 8
   1cf7e:	87 2b       	or	r24, r23
   1cf80:	76 2f       	mov	r23, r22
   1cf82:	07 c0       	rjmp	.+14     	; 0x1cf92 <__fp_mintl+0x1e>
   1cf84:	66 23       	and	r22, r22
   1cf86:	11 f4       	brne	.+4      	; 0x1cf8c <__fp_mintl+0x18>
   1cf88:	99 27       	eor	r25, r25
   1cf8a:	0d c0       	rjmp	.+26     	; 0x1cfa6 <__fp_mintl+0x32>
   1cf8c:	90 51       	subi	r25, 0x10	; 16
   1cf8e:	86 2b       	or	r24, r22
   1cf90:	70 e0       	ldi	r23, 0x00	; 0
   1cf92:	60 e0       	ldi	r22, 0x00	; 0
   1cf94:	2a f0       	brmi	.+10     	; 0x1cfa0 <__fp_mintl+0x2c>
   1cf96:	9a 95       	dec	r25
   1cf98:	66 0f       	add	r22, r22
   1cf9a:	77 1f       	adc	r23, r23
   1cf9c:	88 1f       	adc	r24, r24
   1cf9e:	da f7       	brpl	.-10     	; 0x1cf96 <__fp_mintl+0x22>
   1cfa0:	88 0f       	add	r24, r24
   1cfa2:	96 95       	lsr	r25
   1cfa4:	87 95       	ror	r24
   1cfa6:	97 f9       	bld	r25, 7
   1cfa8:	08 95       	ret

0001cfaa <__fp_mpack>:
   1cfaa:	9f 3f       	cpi	r25, 0xFF	; 255
   1cfac:	31 f0       	breq	.+12     	; 0x1cfba <__fp_mpack_finite+0xc>

0001cfae <__fp_mpack_finite>:
   1cfae:	91 50       	subi	r25, 0x01	; 1
   1cfb0:	20 f4       	brcc	.+8      	; 0x1cfba <__fp_mpack_finite+0xc>
   1cfb2:	87 95       	ror	r24
   1cfb4:	77 95       	ror	r23
   1cfb6:	67 95       	ror	r22
   1cfb8:	b7 95       	ror	r27
   1cfba:	88 0f       	add	r24, r24
   1cfbc:	91 1d       	adc	r25, r1
   1cfbe:	96 95       	lsr	r25
   1cfc0:	87 95       	ror	r24
   1cfc2:	97 f9       	bld	r25, 7
   1cfc4:	08 95       	ret

0001cfc6 <calloc>:
   1cfc6:	0f 93       	push	r16
   1cfc8:	1f 93       	push	r17
   1cfca:	cf 93       	push	r28
   1cfcc:	df 93       	push	r29
   1cfce:	86 9f       	mul	r24, r22
   1cfd0:	80 01       	movw	r16, r0
   1cfd2:	87 9f       	mul	r24, r23
   1cfd4:	10 0d       	add	r17, r0
   1cfd6:	96 9f       	mul	r25, r22
   1cfd8:	10 0d       	add	r17, r0
   1cfda:	11 24       	eor	r1, r1
   1cfdc:	c8 01       	movw	r24, r16
   1cfde:	0d d0       	rcall	.+26     	; 0x1cffa <malloc>
   1cfe0:	ec 01       	movw	r28, r24
   1cfe2:	00 97       	sbiw	r24, 0x00	; 0
   1cfe4:	21 f0       	breq	.+8      	; 0x1cfee <calloc+0x28>
   1cfe6:	a8 01       	movw	r20, r16
   1cfe8:	60 e0       	ldi	r22, 0x00	; 0
   1cfea:	70 e0       	ldi	r23, 0x00	; 0
   1cfec:	0a d2       	rcall	.+1044   	; 0x1d402 <memset>
   1cfee:	ce 01       	movw	r24, r28
   1cff0:	df 91       	pop	r29
   1cff2:	cf 91       	pop	r28
   1cff4:	1f 91       	pop	r17
   1cff6:	0f 91       	pop	r16
   1cff8:	08 95       	ret

0001cffa <malloc>:
   1cffa:	0f 93       	push	r16
   1cffc:	1f 93       	push	r17
   1cffe:	cf 93       	push	r28
   1d000:	df 93       	push	r29
   1d002:	82 30       	cpi	r24, 0x02	; 2
   1d004:	91 05       	cpc	r25, r1
   1d006:	10 f4       	brcc	.+4      	; 0x1d00c <malloc+0x12>
   1d008:	82 e0       	ldi	r24, 0x02	; 2
   1d00a:	90 e0       	ldi	r25, 0x00	; 0
   1d00c:	e0 91 a6 20 	lds	r30, 0x20A6	; 0x8020a6 <__flp>
   1d010:	f0 91 a7 20 	lds	r31, 0x20A7	; 0x8020a7 <__flp+0x1>
   1d014:	20 e0       	ldi	r18, 0x00	; 0
   1d016:	30 e0       	ldi	r19, 0x00	; 0
   1d018:	a0 e0       	ldi	r26, 0x00	; 0
   1d01a:	b0 e0       	ldi	r27, 0x00	; 0
   1d01c:	30 97       	sbiw	r30, 0x00	; 0
   1d01e:	19 f1       	breq	.+70     	; 0x1d066 <malloc+0x6c>
   1d020:	40 81       	ld	r20, Z
   1d022:	51 81       	ldd	r21, Z+1	; 0x01
   1d024:	02 81       	ldd	r16, Z+2	; 0x02
   1d026:	13 81       	ldd	r17, Z+3	; 0x03
   1d028:	48 17       	cp	r20, r24
   1d02a:	59 07       	cpc	r21, r25
   1d02c:	c8 f0       	brcs	.+50     	; 0x1d060 <malloc+0x66>
   1d02e:	84 17       	cp	r24, r20
   1d030:	95 07       	cpc	r25, r21
   1d032:	69 f4       	brne	.+26     	; 0x1d04e <malloc+0x54>
   1d034:	10 97       	sbiw	r26, 0x00	; 0
   1d036:	31 f0       	breq	.+12     	; 0x1d044 <malloc+0x4a>
   1d038:	12 96       	adiw	r26, 0x02	; 2
   1d03a:	0c 93       	st	X, r16
   1d03c:	12 97       	sbiw	r26, 0x02	; 2
   1d03e:	13 96       	adiw	r26, 0x03	; 3
   1d040:	1c 93       	st	X, r17
   1d042:	27 c0       	rjmp	.+78     	; 0x1d092 <malloc+0x98>
   1d044:	00 93 a6 20 	sts	0x20A6, r16	; 0x8020a6 <__flp>
   1d048:	10 93 a7 20 	sts	0x20A7, r17	; 0x8020a7 <__flp+0x1>
   1d04c:	22 c0       	rjmp	.+68     	; 0x1d092 <malloc+0x98>
   1d04e:	21 15       	cp	r18, r1
   1d050:	31 05       	cpc	r19, r1
   1d052:	19 f0       	breq	.+6      	; 0x1d05a <malloc+0x60>
   1d054:	42 17       	cp	r20, r18
   1d056:	53 07       	cpc	r21, r19
   1d058:	18 f4       	brcc	.+6      	; 0x1d060 <malloc+0x66>
   1d05a:	9a 01       	movw	r18, r20
   1d05c:	bd 01       	movw	r22, r26
   1d05e:	ef 01       	movw	r28, r30
   1d060:	df 01       	movw	r26, r30
   1d062:	f8 01       	movw	r30, r16
   1d064:	db cf       	rjmp	.-74     	; 0x1d01c <malloc+0x22>
   1d066:	21 15       	cp	r18, r1
   1d068:	31 05       	cpc	r19, r1
   1d06a:	f9 f0       	breq	.+62     	; 0x1d0aa <malloc+0xb0>
   1d06c:	28 1b       	sub	r18, r24
   1d06e:	39 0b       	sbc	r19, r25
   1d070:	24 30       	cpi	r18, 0x04	; 4
   1d072:	31 05       	cpc	r19, r1
   1d074:	80 f4       	brcc	.+32     	; 0x1d096 <malloc+0x9c>
   1d076:	8a 81       	ldd	r24, Y+2	; 0x02
   1d078:	9b 81       	ldd	r25, Y+3	; 0x03
   1d07a:	61 15       	cp	r22, r1
   1d07c:	71 05       	cpc	r23, r1
   1d07e:	21 f0       	breq	.+8      	; 0x1d088 <malloc+0x8e>
   1d080:	fb 01       	movw	r30, r22
   1d082:	93 83       	std	Z+3, r25	; 0x03
   1d084:	82 83       	std	Z+2, r24	; 0x02
   1d086:	04 c0       	rjmp	.+8      	; 0x1d090 <malloc+0x96>
   1d088:	90 93 a7 20 	sts	0x20A7, r25	; 0x8020a7 <__flp+0x1>
   1d08c:	80 93 a6 20 	sts	0x20A6, r24	; 0x8020a6 <__flp>
   1d090:	fe 01       	movw	r30, r28
   1d092:	32 96       	adiw	r30, 0x02	; 2
   1d094:	44 c0       	rjmp	.+136    	; 0x1d11e <malloc+0x124>
   1d096:	fe 01       	movw	r30, r28
   1d098:	e2 0f       	add	r30, r18
   1d09a:	f3 1f       	adc	r31, r19
   1d09c:	81 93       	st	Z+, r24
   1d09e:	91 93       	st	Z+, r25
   1d0a0:	22 50       	subi	r18, 0x02	; 2
   1d0a2:	31 09       	sbc	r19, r1
   1d0a4:	39 83       	std	Y+1, r19	; 0x01
   1d0a6:	28 83       	st	Y, r18
   1d0a8:	3a c0       	rjmp	.+116    	; 0x1d11e <malloc+0x124>
   1d0aa:	20 91 a4 20 	lds	r18, 0x20A4	; 0x8020a4 <__brkval>
   1d0ae:	30 91 a5 20 	lds	r19, 0x20A5	; 0x8020a5 <__brkval+0x1>
   1d0b2:	23 2b       	or	r18, r19
   1d0b4:	41 f4       	brne	.+16     	; 0x1d0c6 <malloc+0xcc>
   1d0b6:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__malloc_heap_start>
   1d0ba:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__malloc_heap_start+0x1>
   1d0be:	30 93 a5 20 	sts	0x20A5, r19	; 0x8020a5 <__brkval+0x1>
   1d0c2:	20 93 a4 20 	sts	0x20A4, r18	; 0x8020a4 <__brkval>
   1d0c6:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <__malloc_heap_end>
   1d0ca:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <__malloc_heap_end+0x1>
   1d0ce:	21 15       	cp	r18, r1
   1d0d0:	31 05       	cpc	r19, r1
   1d0d2:	41 f4       	brne	.+16     	; 0x1d0e4 <malloc+0xea>
   1d0d4:	2d b7       	in	r18, 0x3d	; 61
   1d0d6:	3e b7       	in	r19, 0x3e	; 62
   1d0d8:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <__malloc_margin>
   1d0dc:	50 91 5a 02 	lds	r21, 0x025A	; 0x80025a <__malloc_margin+0x1>
   1d0e0:	24 1b       	sub	r18, r20
   1d0e2:	35 0b       	sbc	r19, r21
   1d0e4:	e0 91 a4 20 	lds	r30, 0x20A4	; 0x8020a4 <__brkval>
   1d0e8:	f0 91 a5 20 	lds	r31, 0x20A5	; 0x8020a5 <__brkval+0x1>
   1d0ec:	e2 17       	cp	r30, r18
   1d0ee:	f3 07       	cpc	r31, r19
   1d0f0:	a0 f4       	brcc	.+40     	; 0x1d11a <malloc+0x120>
   1d0f2:	2e 1b       	sub	r18, r30
   1d0f4:	3f 0b       	sbc	r19, r31
   1d0f6:	28 17       	cp	r18, r24
   1d0f8:	39 07       	cpc	r19, r25
   1d0fa:	78 f0       	brcs	.+30     	; 0x1d11a <malloc+0x120>
   1d0fc:	ac 01       	movw	r20, r24
   1d0fe:	4e 5f       	subi	r20, 0xFE	; 254
   1d100:	5f 4f       	sbci	r21, 0xFF	; 255
   1d102:	24 17       	cp	r18, r20
   1d104:	35 07       	cpc	r19, r21
   1d106:	48 f0       	brcs	.+18     	; 0x1d11a <malloc+0x120>
   1d108:	4e 0f       	add	r20, r30
   1d10a:	5f 1f       	adc	r21, r31
   1d10c:	50 93 a5 20 	sts	0x20A5, r21	; 0x8020a5 <__brkval+0x1>
   1d110:	40 93 a4 20 	sts	0x20A4, r20	; 0x8020a4 <__brkval>
   1d114:	81 93       	st	Z+, r24
   1d116:	91 93       	st	Z+, r25
   1d118:	02 c0       	rjmp	.+4      	; 0x1d11e <malloc+0x124>
   1d11a:	e0 e0       	ldi	r30, 0x00	; 0
   1d11c:	f0 e0       	ldi	r31, 0x00	; 0
   1d11e:	cf 01       	movw	r24, r30
   1d120:	df 91       	pop	r29
   1d122:	cf 91       	pop	r28
   1d124:	1f 91       	pop	r17
   1d126:	0f 91       	pop	r16
   1d128:	08 95       	ret

0001d12a <free>:
   1d12a:	cf 93       	push	r28
   1d12c:	df 93       	push	r29
   1d12e:	00 97       	sbiw	r24, 0x00	; 0
   1d130:	09 f4       	brne	.+2      	; 0x1d134 <free+0xa>
   1d132:	81 c0       	rjmp	.+258    	; 0x1d236 <free+0x10c>
   1d134:	fc 01       	movw	r30, r24
   1d136:	32 97       	sbiw	r30, 0x02	; 2
   1d138:	13 82       	std	Z+3, r1	; 0x03
   1d13a:	12 82       	std	Z+2, r1	; 0x02
   1d13c:	a0 91 a6 20 	lds	r26, 0x20A6	; 0x8020a6 <__flp>
   1d140:	b0 91 a7 20 	lds	r27, 0x20A7	; 0x8020a7 <__flp+0x1>
   1d144:	10 97       	sbiw	r26, 0x00	; 0
   1d146:	81 f4       	brne	.+32     	; 0x1d168 <free+0x3e>
   1d148:	20 81       	ld	r18, Z
   1d14a:	31 81       	ldd	r19, Z+1	; 0x01
   1d14c:	82 0f       	add	r24, r18
   1d14e:	93 1f       	adc	r25, r19
   1d150:	20 91 a4 20 	lds	r18, 0x20A4	; 0x8020a4 <__brkval>
   1d154:	30 91 a5 20 	lds	r19, 0x20A5	; 0x8020a5 <__brkval+0x1>
   1d158:	28 17       	cp	r18, r24
   1d15a:	39 07       	cpc	r19, r25
   1d15c:	51 f5       	brne	.+84     	; 0x1d1b2 <free+0x88>
   1d15e:	f0 93 a5 20 	sts	0x20A5, r31	; 0x8020a5 <__brkval+0x1>
   1d162:	e0 93 a4 20 	sts	0x20A4, r30	; 0x8020a4 <__brkval>
   1d166:	67 c0       	rjmp	.+206    	; 0x1d236 <free+0x10c>
   1d168:	ed 01       	movw	r28, r26
   1d16a:	20 e0       	ldi	r18, 0x00	; 0
   1d16c:	30 e0       	ldi	r19, 0x00	; 0
   1d16e:	ce 17       	cp	r28, r30
   1d170:	df 07       	cpc	r29, r31
   1d172:	40 f4       	brcc	.+16     	; 0x1d184 <free+0x5a>
   1d174:	4a 81       	ldd	r20, Y+2	; 0x02
   1d176:	5b 81       	ldd	r21, Y+3	; 0x03
   1d178:	9e 01       	movw	r18, r28
   1d17a:	41 15       	cp	r20, r1
   1d17c:	51 05       	cpc	r21, r1
   1d17e:	f1 f0       	breq	.+60     	; 0x1d1bc <free+0x92>
   1d180:	ea 01       	movw	r28, r20
   1d182:	f5 cf       	rjmp	.-22     	; 0x1d16e <free+0x44>
   1d184:	d3 83       	std	Z+3, r29	; 0x03
   1d186:	c2 83       	std	Z+2, r28	; 0x02
   1d188:	40 81       	ld	r20, Z
   1d18a:	51 81       	ldd	r21, Z+1	; 0x01
   1d18c:	84 0f       	add	r24, r20
   1d18e:	95 1f       	adc	r25, r21
   1d190:	c8 17       	cp	r28, r24
   1d192:	d9 07       	cpc	r29, r25
   1d194:	59 f4       	brne	.+22     	; 0x1d1ac <free+0x82>
   1d196:	88 81       	ld	r24, Y
   1d198:	99 81       	ldd	r25, Y+1	; 0x01
   1d19a:	84 0f       	add	r24, r20
   1d19c:	95 1f       	adc	r25, r21
   1d19e:	02 96       	adiw	r24, 0x02	; 2
   1d1a0:	91 83       	std	Z+1, r25	; 0x01
   1d1a2:	80 83       	st	Z, r24
   1d1a4:	8a 81       	ldd	r24, Y+2	; 0x02
   1d1a6:	9b 81       	ldd	r25, Y+3	; 0x03
   1d1a8:	93 83       	std	Z+3, r25	; 0x03
   1d1aa:	82 83       	std	Z+2, r24	; 0x02
   1d1ac:	21 15       	cp	r18, r1
   1d1ae:	31 05       	cpc	r19, r1
   1d1b0:	29 f4       	brne	.+10     	; 0x1d1bc <free+0x92>
   1d1b2:	f0 93 a7 20 	sts	0x20A7, r31	; 0x8020a7 <__flp+0x1>
   1d1b6:	e0 93 a6 20 	sts	0x20A6, r30	; 0x8020a6 <__flp>
   1d1ba:	3d c0       	rjmp	.+122    	; 0x1d236 <free+0x10c>
   1d1bc:	e9 01       	movw	r28, r18
   1d1be:	fb 83       	std	Y+3, r31	; 0x03
   1d1c0:	ea 83       	std	Y+2, r30	; 0x02
   1d1c2:	49 91       	ld	r20, Y+
   1d1c4:	59 91       	ld	r21, Y+
   1d1c6:	c4 0f       	add	r28, r20
   1d1c8:	d5 1f       	adc	r29, r21
   1d1ca:	ec 17       	cp	r30, r28
   1d1cc:	fd 07       	cpc	r31, r29
   1d1ce:	61 f4       	brne	.+24     	; 0x1d1e8 <free+0xbe>
   1d1d0:	80 81       	ld	r24, Z
   1d1d2:	91 81       	ldd	r25, Z+1	; 0x01
   1d1d4:	84 0f       	add	r24, r20
   1d1d6:	95 1f       	adc	r25, r21
   1d1d8:	02 96       	adiw	r24, 0x02	; 2
   1d1da:	e9 01       	movw	r28, r18
   1d1dc:	99 83       	std	Y+1, r25	; 0x01
   1d1de:	88 83       	st	Y, r24
   1d1e0:	82 81       	ldd	r24, Z+2	; 0x02
   1d1e2:	93 81       	ldd	r25, Z+3	; 0x03
   1d1e4:	9b 83       	std	Y+3, r25	; 0x03
   1d1e6:	8a 83       	std	Y+2, r24	; 0x02
   1d1e8:	e0 e0       	ldi	r30, 0x00	; 0
   1d1ea:	f0 e0       	ldi	r31, 0x00	; 0
   1d1ec:	12 96       	adiw	r26, 0x02	; 2
   1d1ee:	8d 91       	ld	r24, X+
   1d1f0:	9c 91       	ld	r25, X
   1d1f2:	13 97       	sbiw	r26, 0x03	; 3
   1d1f4:	00 97       	sbiw	r24, 0x00	; 0
   1d1f6:	19 f0       	breq	.+6      	; 0x1d1fe <free+0xd4>
   1d1f8:	fd 01       	movw	r30, r26
   1d1fa:	dc 01       	movw	r26, r24
   1d1fc:	f7 cf       	rjmp	.-18     	; 0x1d1ec <free+0xc2>
   1d1fe:	8d 91       	ld	r24, X+
   1d200:	9c 91       	ld	r25, X
   1d202:	11 97       	sbiw	r26, 0x01	; 1
   1d204:	9d 01       	movw	r18, r26
   1d206:	2e 5f       	subi	r18, 0xFE	; 254
   1d208:	3f 4f       	sbci	r19, 0xFF	; 255
   1d20a:	82 0f       	add	r24, r18
   1d20c:	93 1f       	adc	r25, r19
   1d20e:	20 91 a4 20 	lds	r18, 0x20A4	; 0x8020a4 <__brkval>
   1d212:	30 91 a5 20 	lds	r19, 0x20A5	; 0x8020a5 <__brkval+0x1>
   1d216:	28 17       	cp	r18, r24
   1d218:	39 07       	cpc	r19, r25
   1d21a:	69 f4       	brne	.+26     	; 0x1d236 <free+0x10c>
   1d21c:	30 97       	sbiw	r30, 0x00	; 0
   1d21e:	29 f4       	brne	.+10     	; 0x1d22a <free+0x100>
   1d220:	10 92 a7 20 	sts	0x20A7, r1	; 0x8020a7 <__flp+0x1>
   1d224:	10 92 a6 20 	sts	0x20A6, r1	; 0x8020a6 <__flp>
   1d228:	02 c0       	rjmp	.+4      	; 0x1d22e <free+0x104>
   1d22a:	13 82       	std	Z+3, r1	; 0x03
   1d22c:	12 82       	std	Z+2, r1	; 0x02
   1d22e:	b0 93 a5 20 	sts	0x20A5, r27	; 0x8020a5 <__brkval+0x1>
   1d232:	a0 93 a4 20 	sts	0x20A4, r26	; 0x8020a4 <__brkval>
   1d236:	df 91       	pop	r29
   1d238:	cf 91       	pop	r28
   1d23a:	08 95       	ret

0001d23c <__ftoa_engine>:
   1d23c:	28 30       	cpi	r18, 0x08	; 8
   1d23e:	08 f0       	brcs	.+2      	; 0x1d242 <__ftoa_engine+0x6>
   1d240:	27 e0       	ldi	r18, 0x07	; 7
   1d242:	33 27       	eor	r19, r19
   1d244:	da 01       	movw	r26, r20
   1d246:	99 0f       	add	r25, r25
   1d248:	31 1d       	adc	r19, r1
   1d24a:	87 fd       	sbrc	r24, 7
   1d24c:	91 60       	ori	r25, 0x01	; 1
   1d24e:	00 96       	adiw	r24, 0x00	; 0
   1d250:	61 05       	cpc	r22, r1
   1d252:	71 05       	cpc	r23, r1
   1d254:	39 f4       	brne	.+14     	; 0x1d264 <__ftoa_engine+0x28>
   1d256:	32 60       	ori	r19, 0x02	; 2
   1d258:	2e 5f       	subi	r18, 0xFE	; 254
   1d25a:	3d 93       	st	X+, r19
   1d25c:	30 e3       	ldi	r19, 0x30	; 48
   1d25e:	2a 95       	dec	r18
   1d260:	e1 f7       	brne	.-8      	; 0x1d25a <__ftoa_engine+0x1e>
   1d262:	08 95       	ret
   1d264:	9f 3f       	cpi	r25, 0xFF	; 255
   1d266:	30 f0       	brcs	.+12     	; 0x1d274 <__ftoa_engine+0x38>
   1d268:	80 38       	cpi	r24, 0x80	; 128
   1d26a:	71 05       	cpc	r23, r1
   1d26c:	61 05       	cpc	r22, r1
   1d26e:	09 f0       	breq	.+2      	; 0x1d272 <__ftoa_engine+0x36>
   1d270:	3c 5f       	subi	r19, 0xFC	; 252
   1d272:	3c 5f       	subi	r19, 0xFC	; 252
   1d274:	3d 93       	st	X+, r19
   1d276:	91 30       	cpi	r25, 0x01	; 1
   1d278:	08 f0       	brcs	.+2      	; 0x1d27c <__ftoa_engine+0x40>
   1d27a:	80 68       	ori	r24, 0x80	; 128
   1d27c:	91 1d       	adc	r25, r1
   1d27e:	df 93       	push	r29
   1d280:	cf 93       	push	r28
   1d282:	1f 93       	push	r17
   1d284:	0f 93       	push	r16
   1d286:	ff 92       	push	r15
   1d288:	ef 92       	push	r14
   1d28a:	19 2f       	mov	r17, r25
   1d28c:	98 7f       	andi	r25, 0xF8	; 248
   1d28e:	96 95       	lsr	r25
   1d290:	e9 2f       	mov	r30, r25
   1d292:	96 95       	lsr	r25
   1d294:	96 95       	lsr	r25
   1d296:	e9 0f       	add	r30, r25
   1d298:	ff 27       	eor	r31, r31
   1d29a:	e8 5c       	subi	r30, 0xC8	; 200
   1d29c:	fd 4f       	sbci	r31, 0xFD	; 253
   1d29e:	99 27       	eor	r25, r25
   1d2a0:	33 27       	eor	r19, r19
   1d2a2:	ee 24       	eor	r14, r14
   1d2a4:	ff 24       	eor	r15, r15
   1d2a6:	a7 01       	movw	r20, r14
   1d2a8:	e7 01       	movw	r28, r14
   1d2aa:	05 90       	lpm	r0, Z+
   1d2ac:	08 94       	sec
   1d2ae:	07 94       	ror	r0
   1d2b0:	28 f4       	brcc	.+10     	; 0x1d2bc <__ftoa_engine+0x80>
   1d2b2:	36 0f       	add	r19, r22
   1d2b4:	e7 1e       	adc	r14, r23
   1d2b6:	f8 1e       	adc	r15, r24
   1d2b8:	49 1f       	adc	r20, r25
   1d2ba:	51 1d       	adc	r21, r1
   1d2bc:	66 0f       	add	r22, r22
   1d2be:	77 1f       	adc	r23, r23
   1d2c0:	88 1f       	adc	r24, r24
   1d2c2:	99 1f       	adc	r25, r25
   1d2c4:	06 94       	lsr	r0
   1d2c6:	a1 f7       	brne	.-24     	; 0x1d2b0 <__ftoa_engine+0x74>
   1d2c8:	05 90       	lpm	r0, Z+
   1d2ca:	07 94       	ror	r0
   1d2cc:	28 f4       	brcc	.+10     	; 0x1d2d8 <__ftoa_engine+0x9c>
   1d2ce:	e7 0e       	add	r14, r23
   1d2d0:	f8 1e       	adc	r15, r24
   1d2d2:	49 1f       	adc	r20, r25
   1d2d4:	56 1f       	adc	r21, r22
   1d2d6:	c1 1d       	adc	r28, r1
   1d2d8:	77 0f       	add	r23, r23
   1d2da:	88 1f       	adc	r24, r24
   1d2dc:	99 1f       	adc	r25, r25
   1d2de:	66 1f       	adc	r22, r22
   1d2e0:	06 94       	lsr	r0
   1d2e2:	a1 f7       	brne	.-24     	; 0x1d2cc <__ftoa_engine+0x90>
   1d2e4:	05 90       	lpm	r0, Z+
   1d2e6:	07 94       	ror	r0
   1d2e8:	28 f4       	brcc	.+10     	; 0x1d2f4 <__ftoa_engine+0xb8>
   1d2ea:	f8 0e       	add	r15, r24
   1d2ec:	49 1f       	adc	r20, r25
   1d2ee:	56 1f       	adc	r21, r22
   1d2f0:	c7 1f       	adc	r28, r23
   1d2f2:	d1 1d       	adc	r29, r1
   1d2f4:	88 0f       	add	r24, r24
   1d2f6:	99 1f       	adc	r25, r25
   1d2f8:	66 1f       	adc	r22, r22
   1d2fa:	77 1f       	adc	r23, r23
   1d2fc:	06 94       	lsr	r0
   1d2fe:	a1 f7       	brne	.-24     	; 0x1d2e8 <__ftoa_engine+0xac>
   1d300:	05 90       	lpm	r0, Z+
   1d302:	07 94       	ror	r0
   1d304:	20 f4       	brcc	.+8      	; 0x1d30e <__ftoa_engine+0xd2>
   1d306:	49 0f       	add	r20, r25
   1d308:	56 1f       	adc	r21, r22
   1d30a:	c7 1f       	adc	r28, r23
   1d30c:	d8 1f       	adc	r29, r24
   1d30e:	99 0f       	add	r25, r25
   1d310:	66 1f       	adc	r22, r22
   1d312:	77 1f       	adc	r23, r23
   1d314:	88 1f       	adc	r24, r24
   1d316:	06 94       	lsr	r0
   1d318:	a9 f7       	brne	.-22     	; 0x1d304 <__ftoa_engine+0xc8>
   1d31a:	84 91       	lpm	r24, Z
   1d31c:	10 95       	com	r17
   1d31e:	17 70       	andi	r17, 0x07	; 7
   1d320:	41 f0       	breq	.+16     	; 0x1d332 <__ftoa_engine+0xf6>
   1d322:	d6 95       	lsr	r29
   1d324:	c7 95       	ror	r28
   1d326:	57 95       	ror	r21
   1d328:	47 95       	ror	r20
   1d32a:	f7 94       	ror	r15
   1d32c:	e7 94       	ror	r14
   1d32e:	1a 95       	dec	r17
   1d330:	c1 f7       	brne	.-16     	; 0x1d322 <__ftoa_engine+0xe6>
   1d332:	ee ed       	ldi	r30, 0xDE	; 222
   1d334:	f1 e0       	ldi	r31, 0x01	; 1
   1d336:	68 94       	set
   1d338:	15 90       	lpm	r1, Z+
   1d33a:	15 91       	lpm	r17, Z+
   1d33c:	35 91       	lpm	r19, Z+
   1d33e:	65 91       	lpm	r22, Z+
   1d340:	95 91       	lpm	r25, Z+
   1d342:	05 90       	lpm	r0, Z+
   1d344:	7f e2       	ldi	r23, 0x2F	; 47
   1d346:	73 95       	inc	r23
   1d348:	e1 18       	sub	r14, r1
   1d34a:	f1 0a       	sbc	r15, r17
   1d34c:	43 0b       	sbc	r20, r19
   1d34e:	56 0b       	sbc	r21, r22
   1d350:	c9 0b       	sbc	r28, r25
   1d352:	d0 09       	sbc	r29, r0
   1d354:	c0 f7       	brcc	.-16     	; 0x1d346 <__ftoa_engine+0x10a>
   1d356:	e1 0c       	add	r14, r1
   1d358:	f1 1e       	adc	r15, r17
   1d35a:	43 1f       	adc	r20, r19
   1d35c:	56 1f       	adc	r21, r22
   1d35e:	c9 1f       	adc	r28, r25
   1d360:	d0 1d       	adc	r29, r0
   1d362:	7e f4       	brtc	.+30     	; 0x1d382 <__ftoa_engine+0x146>
   1d364:	70 33       	cpi	r23, 0x30	; 48
   1d366:	11 f4       	brne	.+4      	; 0x1d36c <__ftoa_engine+0x130>
   1d368:	8a 95       	dec	r24
   1d36a:	e6 cf       	rjmp	.-52     	; 0x1d338 <__ftoa_engine+0xfc>
   1d36c:	e8 94       	clt
   1d36e:	01 50       	subi	r16, 0x01	; 1
   1d370:	30 f0       	brcs	.+12     	; 0x1d37e <__ftoa_engine+0x142>
   1d372:	08 0f       	add	r16, r24
   1d374:	0a f4       	brpl	.+2      	; 0x1d378 <__ftoa_engine+0x13c>
   1d376:	00 27       	eor	r16, r16
   1d378:	02 17       	cp	r16, r18
   1d37a:	08 f4       	brcc	.+2      	; 0x1d37e <__ftoa_engine+0x142>
   1d37c:	20 2f       	mov	r18, r16
   1d37e:	23 95       	inc	r18
   1d380:	02 2f       	mov	r16, r18
   1d382:	7a 33       	cpi	r23, 0x3A	; 58
   1d384:	28 f0       	brcs	.+10     	; 0x1d390 <__ftoa_engine+0x154>
   1d386:	79 e3       	ldi	r23, 0x39	; 57
   1d388:	7d 93       	st	X+, r23
   1d38a:	2a 95       	dec	r18
   1d38c:	e9 f7       	brne	.-6      	; 0x1d388 <__ftoa_engine+0x14c>
   1d38e:	10 c0       	rjmp	.+32     	; 0x1d3b0 <__ftoa_engine+0x174>
   1d390:	7d 93       	st	X+, r23
   1d392:	2a 95       	dec	r18
   1d394:	89 f6       	brne	.-94     	; 0x1d338 <__ftoa_engine+0xfc>
   1d396:	06 94       	lsr	r0
   1d398:	97 95       	ror	r25
   1d39a:	67 95       	ror	r22
   1d39c:	37 95       	ror	r19
   1d39e:	17 95       	ror	r17
   1d3a0:	17 94       	ror	r1
   1d3a2:	e1 18       	sub	r14, r1
   1d3a4:	f1 0a       	sbc	r15, r17
   1d3a6:	43 0b       	sbc	r20, r19
   1d3a8:	56 0b       	sbc	r21, r22
   1d3aa:	c9 0b       	sbc	r28, r25
   1d3ac:	d0 09       	sbc	r29, r0
   1d3ae:	98 f0       	brcs	.+38     	; 0x1d3d6 <__ftoa_engine+0x19a>
   1d3b0:	23 95       	inc	r18
   1d3b2:	7e 91       	ld	r23, -X
   1d3b4:	73 95       	inc	r23
   1d3b6:	7a 33       	cpi	r23, 0x3A	; 58
   1d3b8:	08 f0       	brcs	.+2      	; 0x1d3bc <__ftoa_engine+0x180>
   1d3ba:	70 e3       	ldi	r23, 0x30	; 48
   1d3bc:	7c 93       	st	X, r23
   1d3be:	20 13       	cpse	r18, r16
   1d3c0:	b8 f7       	brcc	.-18     	; 0x1d3b0 <__ftoa_engine+0x174>
   1d3c2:	7e 91       	ld	r23, -X
   1d3c4:	70 61       	ori	r23, 0x10	; 16
   1d3c6:	7d 93       	st	X+, r23
   1d3c8:	30 f0       	brcs	.+12     	; 0x1d3d6 <__ftoa_engine+0x19a>
   1d3ca:	83 95       	inc	r24
   1d3cc:	71 e3       	ldi	r23, 0x31	; 49
   1d3ce:	7d 93       	st	X+, r23
   1d3d0:	70 e3       	ldi	r23, 0x30	; 48
   1d3d2:	2a 95       	dec	r18
   1d3d4:	e1 f7       	brne	.-8      	; 0x1d3ce <__ftoa_engine+0x192>
   1d3d6:	11 24       	eor	r1, r1
   1d3d8:	ef 90       	pop	r14
   1d3da:	ff 90       	pop	r15
   1d3dc:	0f 91       	pop	r16
   1d3de:	1f 91       	pop	r17
   1d3e0:	cf 91       	pop	r28
   1d3e2:	df 91       	pop	r29
   1d3e4:	99 27       	eor	r25, r25
   1d3e6:	87 fd       	sbrc	r24, 7
   1d3e8:	90 95       	com	r25
   1d3ea:	08 95       	ret

0001d3ec <strnlen_P>:
   1d3ec:	fc 01       	movw	r30, r24
   1d3ee:	05 90       	lpm	r0, Z+
   1d3f0:	61 50       	subi	r22, 0x01	; 1
   1d3f2:	70 40       	sbci	r23, 0x00	; 0
   1d3f4:	01 10       	cpse	r0, r1
   1d3f6:	d8 f7       	brcc	.-10     	; 0x1d3ee <strnlen_P+0x2>
   1d3f8:	80 95       	com	r24
   1d3fa:	90 95       	com	r25
   1d3fc:	8e 0f       	add	r24, r30
   1d3fe:	9f 1f       	adc	r25, r31
   1d400:	08 95       	ret

0001d402 <memset>:
   1d402:	dc 01       	movw	r26, r24
   1d404:	01 c0       	rjmp	.+2      	; 0x1d408 <memset+0x6>
   1d406:	6d 93       	st	X+, r22
   1d408:	41 50       	subi	r20, 0x01	; 1
   1d40a:	50 40       	sbci	r21, 0x00	; 0
   1d40c:	e0 f7       	brcc	.-8      	; 0x1d406 <memset+0x4>
   1d40e:	08 95       	ret

0001d410 <strnlen>:
   1d410:	fc 01       	movw	r30, r24
   1d412:	61 50       	subi	r22, 0x01	; 1
   1d414:	70 40       	sbci	r23, 0x00	; 0
   1d416:	01 90       	ld	r0, Z+
   1d418:	01 10       	cpse	r0, r1
   1d41a:	d8 f7       	brcc	.-10     	; 0x1d412 <strnlen+0x2>
   1d41c:	80 95       	com	r24
   1d41e:	90 95       	com	r25
   1d420:	8e 0f       	add	r24, r30
   1d422:	9f 1f       	adc	r25, r31
   1d424:	08 95       	ret

0001d426 <__ultoa_invert>:
   1d426:	fa 01       	movw	r30, r20
   1d428:	aa 27       	eor	r26, r26
   1d42a:	28 30       	cpi	r18, 0x08	; 8
   1d42c:	51 f1       	breq	.+84     	; 0x1d482 <__ultoa_invert+0x5c>
   1d42e:	20 31       	cpi	r18, 0x10	; 16
   1d430:	81 f1       	breq	.+96     	; 0x1d492 <__ultoa_invert+0x6c>
   1d432:	e8 94       	clt
   1d434:	6f 93       	push	r22
   1d436:	6e 7f       	andi	r22, 0xFE	; 254
   1d438:	6e 5f       	subi	r22, 0xFE	; 254
   1d43a:	7f 4f       	sbci	r23, 0xFF	; 255
   1d43c:	8f 4f       	sbci	r24, 0xFF	; 255
   1d43e:	9f 4f       	sbci	r25, 0xFF	; 255
   1d440:	af 4f       	sbci	r26, 0xFF	; 255
   1d442:	b1 e0       	ldi	r27, 0x01	; 1
   1d444:	3e d0       	rcall	.+124    	; 0x1d4c2 <__ultoa_invert+0x9c>
   1d446:	b4 e0       	ldi	r27, 0x04	; 4
   1d448:	3c d0       	rcall	.+120    	; 0x1d4c2 <__ultoa_invert+0x9c>
   1d44a:	67 0f       	add	r22, r23
   1d44c:	78 1f       	adc	r23, r24
   1d44e:	89 1f       	adc	r24, r25
   1d450:	9a 1f       	adc	r25, r26
   1d452:	a1 1d       	adc	r26, r1
   1d454:	68 0f       	add	r22, r24
   1d456:	79 1f       	adc	r23, r25
   1d458:	8a 1f       	adc	r24, r26
   1d45a:	91 1d       	adc	r25, r1
   1d45c:	a1 1d       	adc	r26, r1
   1d45e:	6a 0f       	add	r22, r26
   1d460:	71 1d       	adc	r23, r1
   1d462:	81 1d       	adc	r24, r1
   1d464:	91 1d       	adc	r25, r1
   1d466:	a1 1d       	adc	r26, r1
   1d468:	20 d0       	rcall	.+64     	; 0x1d4aa <__ultoa_invert+0x84>
   1d46a:	09 f4       	brne	.+2      	; 0x1d46e <__ultoa_invert+0x48>
   1d46c:	68 94       	set
   1d46e:	3f 91       	pop	r19
   1d470:	2a e0       	ldi	r18, 0x0A	; 10
   1d472:	26 9f       	mul	r18, r22
   1d474:	11 24       	eor	r1, r1
   1d476:	30 19       	sub	r19, r0
   1d478:	30 5d       	subi	r19, 0xD0	; 208
   1d47a:	31 93       	st	Z+, r19
   1d47c:	de f6       	brtc	.-74     	; 0x1d434 <__ultoa_invert+0xe>
   1d47e:	cf 01       	movw	r24, r30
   1d480:	08 95       	ret
   1d482:	46 2f       	mov	r20, r22
   1d484:	47 70       	andi	r20, 0x07	; 7
   1d486:	40 5d       	subi	r20, 0xD0	; 208
   1d488:	41 93       	st	Z+, r20
   1d48a:	b3 e0       	ldi	r27, 0x03	; 3
   1d48c:	0f d0       	rcall	.+30     	; 0x1d4ac <__ultoa_invert+0x86>
   1d48e:	c9 f7       	brne	.-14     	; 0x1d482 <__ultoa_invert+0x5c>
   1d490:	f6 cf       	rjmp	.-20     	; 0x1d47e <__ultoa_invert+0x58>
   1d492:	46 2f       	mov	r20, r22
   1d494:	4f 70       	andi	r20, 0x0F	; 15
   1d496:	40 5d       	subi	r20, 0xD0	; 208
   1d498:	4a 33       	cpi	r20, 0x3A	; 58
   1d49a:	18 f0       	brcs	.+6      	; 0x1d4a2 <__ultoa_invert+0x7c>
   1d49c:	49 5d       	subi	r20, 0xD9	; 217
   1d49e:	31 fd       	sbrc	r19, 1
   1d4a0:	40 52       	subi	r20, 0x20	; 32
   1d4a2:	41 93       	st	Z+, r20
   1d4a4:	02 d0       	rcall	.+4      	; 0x1d4aa <__ultoa_invert+0x84>
   1d4a6:	a9 f7       	brne	.-22     	; 0x1d492 <__ultoa_invert+0x6c>
   1d4a8:	ea cf       	rjmp	.-44     	; 0x1d47e <__ultoa_invert+0x58>
   1d4aa:	b4 e0       	ldi	r27, 0x04	; 4
   1d4ac:	a6 95       	lsr	r26
   1d4ae:	97 95       	ror	r25
   1d4b0:	87 95       	ror	r24
   1d4b2:	77 95       	ror	r23
   1d4b4:	67 95       	ror	r22
   1d4b6:	ba 95       	dec	r27
   1d4b8:	c9 f7       	brne	.-14     	; 0x1d4ac <__ultoa_invert+0x86>
   1d4ba:	00 97       	sbiw	r24, 0x00	; 0
   1d4bc:	61 05       	cpc	r22, r1
   1d4be:	71 05       	cpc	r23, r1
   1d4c0:	08 95       	ret
   1d4c2:	9b 01       	movw	r18, r22
   1d4c4:	ac 01       	movw	r20, r24
   1d4c6:	0a 2e       	mov	r0, r26
   1d4c8:	06 94       	lsr	r0
   1d4ca:	57 95       	ror	r21
   1d4cc:	47 95       	ror	r20
   1d4ce:	37 95       	ror	r19
   1d4d0:	27 95       	ror	r18
   1d4d2:	ba 95       	dec	r27
   1d4d4:	c9 f7       	brne	.-14     	; 0x1d4c8 <__ultoa_invert+0xa2>
   1d4d6:	62 0f       	add	r22, r18
   1d4d8:	73 1f       	adc	r23, r19
   1d4da:	84 1f       	adc	r24, r20
   1d4dc:	95 1f       	adc	r25, r21
   1d4de:	a0 1d       	adc	r26, r0
   1d4e0:	08 95       	ret

0001d4e2 <_exit>:
   1d4e2:	f8 94       	cli

0001d4e4 <__stop_program>:
   1d4e4:	ff cf       	rjmp	.-2      	; 0x1d4e4 <__stop_program>
